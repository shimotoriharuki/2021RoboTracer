
2021RoboTrace_1.5.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000191b0  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c0c  08019370  08019370  00029370  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019f7c  08019f7c  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  08019f7c  08019f7c  00029f7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019f84  08019f84  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08019f84  08019f84  00029f84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08019f8c  08019f8c  00029f8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08019f90  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00045af8  200001e0  0801a16c  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  20045cd8  0801a16c  00035cd8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003aa48  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007bec  00000000  00000000  0006ac54  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000022f8  00000000  00000000  00072840  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002028  00000000  00000000  00074b38  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000354a8  00000000  00000000  00076b60  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000264a4  00000000  00000000  000ac008  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00110e1b  00000000  00000000  000d24ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001e32c7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a604  00000000  00000000  001e3344  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08019358 	.word	0x08019358

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	08019358 	.word	0x08019358

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b972 	b.w	8000fb4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14b      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4615      	mov	r5, r2
 8000cfa:	d967      	bls.n	8000dcc <__udivmoddi4+0xe4>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0720 	rsb	r7, r2, #32
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	ea47 0803 	orr.w	r8, r7, r3
 8000d14:	4094      	lsls	r4, r2
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d20:	fa1f fc85 	uxth.w	ip, r5
 8000d24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x60>
 8000d34:	18eb      	adds	r3, r5, r3
 8000d36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d3a:	f080 811b 	bcs.w	8000f74 <__udivmoddi4+0x28c>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 8118 	bls.w	8000f74 <__udivmoddi4+0x28c>
 8000d44:	3f02      	subs	r7, #2
 8000d46:	442b      	add	r3, r5
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x8c>
 8000d60:	192c      	adds	r4, r5, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d78:	eba4 040c 	sub.w	r4, r4, ip
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa0>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xbe>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80eb 	beq.w	8000f6e <__udivmoddi4+0x286>
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d9e:	4638      	mov	r0, r7
 8000da0:	4639      	mov	r1, r7
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f783 	clz	r7, r3
 8000daa:	2f00      	cmp	r7, #0
 8000dac:	d147      	bne.n	8000e3e <__udivmoddi4+0x156>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd0>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80fa 	bhi.w	8000fac <__udivmoddi4+0x2c4>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa0>
 8000dc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xe8>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 808f 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dda:	1b49      	subs	r1, r1, r5
 8000ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de0:	fa1f f885 	uxth.w	r8, r5
 8000de4:	2701      	movs	r7, #1
 8000de6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dea:	0c23      	lsrs	r3, r4, #16
 8000dec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb08 f10c 	mul.w	r1, r8, ip
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfc:	18eb      	adds	r3, r5, r3
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	f200 80cd 	bhi.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1a59      	subs	r1, r3, r1
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x14c>
 8000e24:	192c      	adds	r4, r5, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x14a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80b6 	bhi.w	8000f9e <__udivmoddi4+0x2b6>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e79f      	b.n	8000d7e <__udivmoddi4+0x96>
 8000e3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e42:	40bb      	lsls	r3, r7
 8000e44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e5c:	4325      	orrs	r5, r4
 8000e5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e62:	0c2c      	lsrs	r4, r5, #16
 8000e64:	fb08 3319 	mls	r3, r8, r9, r3
 8000e68:	fa1f fa8e 	uxth.w	sl, lr
 8000e6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e70:	fb09 f40a 	mul.w	r4, r9, sl
 8000e74:	429c      	cmp	r4, r3
 8000e76:	fa02 f207 	lsl.w	r2, r2, r7
 8000e7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1e 0303 	adds.w	r3, lr, r3
 8000e84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e88:	f080 8087 	bcs.w	8000f9a <__udivmoddi4+0x2b2>
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	f240 8084 	bls.w	8000f9a <__udivmoddi4+0x2b2>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4473      	add	r3, lr
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	b2ad      	uxth	r5, r5
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ea8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eac:	45a2      	cmp	sl, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1e 0404 	adds.w	r4, lr, r4
 8000eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eb8:	d26b      	bcs.n	8000f92 <__udivmoddi4+0x2aa>
 8000eba:	45a2      	cmp	sl, r4
 8000ebc:	d969      	bls.n	8000f92 <__udivmoddi4+0x2aa>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4474      	add	r4, lr
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eca:	eba4 040a 	sub.w	r4, r4, sl
 8000ece:	454c      	cmp	r4, r9
 8000ed0:	46c2      	mov	sl, r8
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	d354      	bcc.n	8000f80 <__udivmoddi4+0x298>
 8000ed6:	d051      	beq.n	8000f7c <__udivmoddi4+0x294>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d069      	beq.n	8000fb0 <__udivmoddi4+0x2c8>
 8000edc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ee0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ee4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	40fc      	lsrs	r4, r7
 8000eec:	ea4c 0505 	orr.w	r5, ip, r5
 8000ef0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ef4:	2700      	movs	r7, #0
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f703 	lsr.w	r7, r0, r3
 8000f00:	4095      	lsls	r5, r2
 8000f02:	fa01 f002 	lsl.w	r0, r1, r2
 8000f06:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f0e:	4338      	orrs	r0, r7
 8000f10:	0c01      	lsrs	r1, r0, #16
 8000f12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f16:	fa1f f885 	uxth.w	r8, r5
 8000f1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb07 f308 	mul.w	r3, r7, r8
 8000f26:	428b      	cmp	r3, r1
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x256>
 8000f2e:	1869      	adds	r1, r5, r1
 8000f30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f34:	d22f      	bcs.n	8000f96 <__udivmoddi4+0x2ae>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d92d      	bls.n	8000f96 <__udivmoddi4+0x2ae>
 8000f3a:	3f02      	subs	r7, #2
 8000f3c:	4429      	add	r1, r5
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	b281      	uxth	r1, r0
 8000f42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f4e:	fb00 f308 	mul.w	r3, r0, r8
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x27e>
 8000f56:	1869      	adds	r1, r5, r1
 8000f58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f5c:	d217      	bcs.n	8000f8e <__udivmoddi4+0x2a6>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d915      	bls.n	8000f8e <__udivmoddi4+0x2a6>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4429      	add	r1, r5
 8000f66:	1ac9      	subs	r1, r1, r3
 8000f68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f6c:	e73b      	b.n	8000de6 <__udivmoddi4+0xfe>
 8000f6e:	4637      	mov	r7, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e709      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000f74:	4607      	mov	r7, r0
 8000f76:	e6e7      	b.n	8000d48 <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x8c>
 8000f7c:	4541      	cmp	r1, r8
 8000f7e:	d2ab      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f84:	eb69 020e 	sbc.w	r2, r9, lr
 8000f88:	3801      	subs	r0, #1
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	e7a4      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f8e:	4660      	mov	r0, ip
 8000f90:	e7e9      	b.n	8000f66 <__udivmoddi4+0x27e>
 8000f92:	4618      	mov	r0, r3
 8000f94:	e795      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f96:	4667      	mov	r7, ip
 8000f98:	e7d1      	b.n	8000f3e <__udivmoddi4+0x256>
 8000f9a:	4681      	mov	r9, r0
 8000f9c:	e77c      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	442c      	add	r4, r5
 8000fa2:	e747      	b.n	8000e34 <__udivmoddi4+0x14c>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	442b      	add	r3, r5
 8000faa:	e72f      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fac:	4638      	mov	r0, r7
 8000fae:	e708      	b.n	8000dc2 <__udivmoddi4+0xda>
 8000fb0:	4637      	mov	r7, r6
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0xa0>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <lcd_cmd>:

extern I2C_HandleTypeDef hi2c1;

#define SLAVEADRESS (0x3E<<1)

void lcd_cmd(uint8_t cmd) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txcmd[2] = { 0x00 , cmd };
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	733b      	strb	r3, [r7, #12]
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txcmd,2,100);
 8000fca:	f107 020c 	add.w	r2, r7, #12
 8000fce:	2364      	movs	r3, #100	; 0x64
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	217c      	movs	r1, #124	; 0x7c
 8000fd6:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <lcd_cmd+0x2c>)
 8000fd8:	f009 fe60 	bl	800ac9c <HAL_I2C_Master_Transmit>
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	200437cc 	.word	0x200437cc

08000fe8 <lcd_data>:

void lcd_data(uint8_t data) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txdata[2] = { 0x40 , data };
 8000ff2:	2340      	movs	r3, #64	; 0x40
 8000ff4:	733b      	strb	r3, [r7, #12]
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txdata,2,100);
 8000ffa:	f107 020c 	add.w	r2, r7, #12
 8000ffe:	2364      	movs	r3, #100	; 0x64
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2302      	movs	r3, #2
 8001004:	217c      	movs	r1, #124	; 0x7c
 8001006:	4803      	ldr	r0, [pc, #12]	; (8001014 <lcd_data+0x2c>)
 8001008:	f009 fe48 	bl	800ac9c <HAL_I2C_Master_Transmit>
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	200437cc 	.word	0x200437cc

08001018 <lcd_init>:

void lcd_init(){
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);//lcd_reset_pin
 800101c:	2201      	movs	r2, #1
 800101e:	2110      	movs	r1, #16
 8001020:	481e      	ldr	r0, [pc, #120]	; (800109c <lcd_init+0x84>)
 8001022:	f009 fce9 	bl	800a9f8 <HAL_GPIO_WritePin>
	HAL_Delay(40);
 8001026:	2028      	movs	r0, #40	; 0x28
 8001028:	f008 fa50 	bl	80094cc <HAL_Delay>
	lcd_cmd(0x38);
 800102c:	2038      	movs	r0, #56	; 0x38
 800102e:	f7ff ffc3 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f008 fa4a 	bl	80094cc <HAL_Delay>
	lcd_cmd(0x39);
 8001038:	2039      	movs	r0, #57	; 0x39
 800103a:	f7ff ffbd 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800103e:	2001      	movs	r0, #1
 8001040:	f008 fa44 	bl	80094cc <HAL_Delay>
	lcd_cmd(0x14);
 8001044:	2014      	movs	r0, #20
 8001046:	f7ff ffb7 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800104a:	2001      	movs	r0, #1
 800104c:	f008 fa3e 	bl	80094cc <HAL_Delay>
	lcd_cmd(0x70);
 8001050:	2070      	movs	r0, #112	; 0x70
 8001052:	f7ff ffb1 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001056:	2001      	movs	r0, #1
 8001058:	f008 fa38 	bl	80094cc <HAL_Delay>
	lcd_cmd(0x56);
 800105c:	2056      	movs	r0, #86	; 0x56
 800105e:	f7ff ffab 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f008 fa32 	bl	80094cc <HAL_Delay>
	lcd_cmd(0x6C);
 8001068:	206c      	movs	r0, #108	; 0x6c
 800106a:	f7ff ffa5 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(200);
 800106e:	20c8      	movs	r0, #200	; 0xc8
 8001070:	f008 fa2c 	bl	80094cc <HAL_Delay>
	lcd_cmd(0x38);
 8001074:	2038      	movs	r0, #56	; 0x38
 8001076:	f7ff ff9f 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800107a:	2001      	movs	r0, #1
 800107c:	f008 fa26 	bl	80094cc <HAL_Delay>
	lcd_cmd(0x0C);
 8001080:	200c      	movs	r0, #12
 8001082:	f7ff ff99 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001086:	2001      	movs	r0, #1
 8001088:	f008 fa20 	bl	80094cc <HAL_Delay>
	lcd_cmd(0x01);
 800108c:	2001      	movs	r0, #1
 800108e:	f7ff ff93 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001092:	2001      	movs	r0, #1
 8001094:	f008 fa1a 	bl	80094cc <HAL_Delay>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40020000 	.word	0x40020000

080010a0 <lcd_clear>:

void lcd_clear(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	lcd_cmd(0x01);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff ff87 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010aa:	2001      	movs	r0, #1
 80010ac:	f008 fa0e 	bl	80094cc <HAL_Delay>
	lcd_cmd(0x02);
 80010b0:	2002      	movs	r0, #2
 80010b2:	f7ff ff81 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f008 fa08 	bl	80094cc <HAL_Delay>
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <lcd_locate>:

void lcd_locate(int x, int y) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
	lcd_cmd(0x80 + y*0x40 + x);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	3302      	adds	r3, #2
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	019b      	lsls	r3, r3, #6
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	4413      	add	r3, r2
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff6b 	bl	8000fb8 <lcd_cmd>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <lcd_print>:

void lcd_print(const char *str) {
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
	while(*str != '\0')
 80010f2:	e007      	b.n	8001104 <lcd_print+0x1a>
	{
			lcd_data(*str);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff75 	bl	8000fe8 <lcd_data>
			str++;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3301      	adds	r3, #1
 8001102:	607b      	str	r3, [r7, #4]
	while(*str != '\0')
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f3      	bne.n	80010f4 <lcd_print+0xa>
	}
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <lcd_printf>:

short lcd_printf(const char *format, ...) {
 8001114:	b40f      	push	{r0, r1, r2, r3}
 8001116:	b580      	push	{r7, lr}
 8001118:	b088      	sub	sp, #32
 800111a:	af00      	add	r7, sp, #0
	va_list argptr;
	char lcd_bff[20];
	short ret;

  va_start(argptr, format);
 800111c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001120:	61bb      	str	r3, [r7, #24]
  ret = vsprintf(lcd_bff, format, argptr);
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001128:	4618      	mov	r0, r3
 800112a:	f015 fce9 	bl	8016b00 <vsiprintf>
 800112e:	4603      	mov	r3, r0
 8001130:	83fb      	strh	r3, [r7, #30]
	va_end(argptr);

	if(ret>0) {
 8001132:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001136:	2b00      	cmp	r3, #0
 8001138:	dd03      	ble.n	8001142 <lcd_printf+0x2e>
		lcd_print(lcd_bff);
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ffd4 	bl	80010ea <lcd_print>
	}

	return ret;
 8001142:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001150:	b004      	add	sp, #16
 8001152:	4770      	bx	lr

08001154 <_ZN3ESC20getCounterPeriodTIM3Ef>:
#define ESC_MAX_TIM10_11 7559

//---private---//

uint16_t ESC::getCounterPeriodTIM3(float ratio)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	ed87 0a00 	vstr	s0, [r7]
	return int((ESC_MAX_TIM3 - ESC_MIN_TIM3) * ratio + ESC_MIN_TIM3);
 8001160:	edd7 7a00 	vldr	s15, [r7]
 8001164:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800118c <_ZN3ESC20getCounterPeriodTIM3Ef+0x38>
 8001168:	ee67 7a87 	vmul.f32	s15, s15, s14
 800116c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001190 <_ZN3ESC20getCounterPeriodTIM3Ef+0x3c>
 8001170:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001174:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001178:	ee17 3a90 	vmov	r3, s15
 800117c:	b29b      	uxth	r3, r3
}
 800117e:	4618      	mov	r0, r3
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	44ec4000 	.word	0x44ec4000
 8001190:	44ec2000 	.word	0x44ec2000

08001194 <_ZN3ESC24getCounterPeriodTIM10_11Ef>:

uint16_t ESC::getCounterPeriodTIM10_11(float ratio)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	ed87 0a00 	vstr	s0, [r7]
	return int((ESC_MAX_TIM10_11 - ESC_MIN_TIM10_11) * ratio + ESC_MIN_TIM10_11);
 80011a0:	edd7 7a00 	vldr	s15, [r7]
 80011a4:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80011cc <_ZN3ESC24getCounterPeriodTIM10_11Ef+0x38>
 80011a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011ac:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80011d0 <_ZN3ESC24getCounterPeriodTIM10_11Ef+0x3c>
 80011b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011b8:	ee17 3a90 	vmov	r3, s15
 80011bc:	b29b      	uxth	r3, r3
}
 80011be:	4618      	mov	r0, r3
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	456cd000 	.word	0x456cd000
 80011d0:	456ba000 	.word	0x456ba000

080011d4 <_ZN3ESCC1Ev>:

//---public---//
ESC::ESC()
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
{

}
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4618      	mov	r0, r3
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
	...

080011ec <_ZN3ESC4initEv>:

void ESC::init()
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80011f4:	2100      	movs	r1, #0
 80011f6:	4813      	ldr	r0, [pc, #76]	; (8001244 <_ZN3ESC4initEv+0x58>)
 80011f8:	f00d fb18 	bl	800e82c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80011fc:	2104      	movs	r1, #4
 80011fe:	4811      	ldr	r0, [pc, #68]	; (8001244 <_ZN3ESC4initEv+0x58>)
 8001200:	f00d fb14 	bl	800e82c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 8001204:	2100      	movs	r1, #0
 8001206:	4810      	ldr	r0, [pc, #64]	; (8001248 <_ZN3ESC4initEv+0x5c>)
 8001208:	f00d fb10 	bl	800e82c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 800120c:	2100      	movs	r1, #0
 800120e:	480f      	ldr	r0, [pc, #60]	; (800124c <_ZN3ESC4initEv+0x60>)
 8001210:	f00d fb0c 	bl	800e82c <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ESC_MIN_TIM3);
 8001214:	4b0b      	ldr	r3, [pc, #44]	; (8001244 <_ZN3ESC4initEv+0x58>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f240 7261 	movw	r2, #1889	; 0x761
 800121c:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, ESC_MIN_TIM3);
 800121e:	4b09      	ldr	r3, [pc, #36]	; (8001244 <_ZN3ESC4initEv+0x58>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f240 7261 	movw	r2, #1889	; 0x761
 8001226:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 8001228:	4b07      	ldr	r3, [pc, #28]	; (8001248 <_ZN3ESC4initEv+0x5c>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f640 62ba 	movw	r2, #3770	; 0xeba
 8001230:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 8001232:	4b06      	ldr	r3, [pc, #24]	; (800124c <_ZN3ESC4initEv+0x60>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f640 62ba 	movw	r2, #3770	; 0xeba
 800123a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800123c:	bf00      	nop
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	200438b8 	.word	0x200438b8
 8001248:	20043820 	.word	0x20043820
 800124c:	20043940 	.word	0x20043940

08001250 <_ZN3ESC2onEffff>:

void ESC::on(float FL, float FR, float RL, float RR)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af00      	add	r7, sp, #0
 8001256:	6178      	str	r0, [r7, #20]
 8001258:	ed87 0a04 	vstr	s0, [r7, #16]
 800125c:	edc7 0a03 	vstr	s1, [r7, #12]
 8001260:	ed87 1a02 	vstr	s2, [r7, #8]
 8001264:	edc7 1a01 	vstr	s3, [r7, #4]
	if(FL > 1.0) FL = 1.0;
 8001268:	edd7 7a04 	vldr	s15, [r7, #16]
 800126c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001270:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001278:	dd03      	ble.n	8001282 <_ZN3ESC2onEffff+0x32>
 800127a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800127e:	613b      	str	r3, [r7, #16]
 8001280:	e009      	b.n	8001296 <_ZN3ESC2onEffff+0x46>
	else if(FL < 0) FL = 0;
 8001282:	edd7 7a04 	vldr	s15, [r7, #16]
 8001286:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800128a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800128e:	d502      	bpl.n	8001296 <_ZN3ESC2onEffff+0x46>
 8001290:	f04f 0300 	mov.w	r3, #0
 8001294:	613b      	str	r3, [r7, #16]

	if(FR > 1.0) FR = 1.0;
 8001296:	edd7 7a03 	vldr	s15, [r7, #12]
 800129a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800129e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012a6:	dd03      	ble.n	80012b0 <_ZN3ESC2onEffff+0x60>
 80012a8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	e009      	b.n	80012c4 <_ZN3ESC2onEffff+0x74>
	else if(FR < 0) FR = 0;
 80012b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80012b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012bc:	d502      	bpl.n	80012c4 <_ZN3ESC2onEffff+0x74>
 80012be:	f04f 0300 	mov.w	r3, #0
 80012c2:	60fb      	str	r3, [r7, #12]

	if(RL > 1.0) RL = 1.0;
 80012c4:	edd7 7a02 	vldr	s15, [r7, #8]
 80012c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012d4:	dd03      	ble.n	80012de <_ZN3ESC2onEffff+0x8e>
 80012d6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012da:	60bb      	str	r3, [r7, #8]
 80012dc:	e009      	b.n	80012f2 <_ZN3ESC2onEffff+0xa2>
	else if(RL < 0) RL = 0;
 80012de:	edd7 7a02 	vldr	s15, [r7, #8]
 80012e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ea:	d502      	bpl.n	80012f2 <_ZN3ESC2onEffff+0xa2>
 80012ec:	f04f 0300 	mov.w	r3, #0
 80012f0:	60bb      	str	r3, [r7, #8]

	if(RR > 1.0) RR = 1.0;
 80012f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80012f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001302:	dd03      	ble.n	800130c <_ZN3ESC2onEffff+0xbc>
 8001304:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001308:	607b      	str	r3, [r7, #4]
 800130a:	e009      	b.n	8001320 <_ZN3ESC2onEffff+0xd0>
	else if(RR < 0) RR = 0;
 800130c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001310:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001318:	d502      	bpl.n	8001320 <_ZN3ESC2onEffff+0xd0>
 800131a:	f04f 0300 	mov.w	r3, #0
 800131e:	607b      	str	r3, [r7, #4]

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, getCounterPeriodTIM3(FL));
 8001320:	ed97 0a04 	vldr	s0, [r7, #16]
 8001324:	6978      	ldr	r0, [r7, #20]
 8001326:	f7ff ff15 	bl	8001154 <_ZN3ESC20getCounterPeriodTIM3Ef>
 800132a:	4603      	mov	r3, r0
 800132c:	461a      	mov	r2, r3
 800132e:	4b12      	ldr	r3, [pc, #72]	; (8001378 <_ZN3ESC2onEffff+0x128>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, getCounterPeriodTIM10_11(FR));
 8001334:	ed97 0a03 	vldr	s0, [r7, #12]
 8001338:	6978      	ldr	r0, [r7, #20]
 800133a:	f7ff ff2b 	bl	8001194 <_ZN3ESC24getCounterPeriodTIM10_11Ef>
 800133e:	4603      	mov	r3, r0
 8001340:	461a      	mov	r2, r3
 8001342:	4b0e      	ldr	r3, [pc, #56]	; (800137c <_ZN3ESC2onEffff+0x12c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, getCounterPeriodTIM3(RL));
 8001348:	ed97 0a02 	vldr	s0, [r7, #8]
 800134c:	6978      	ldr	r0, [r7, #20]
 800134e:	f7ff ff01 	bl	8001154 <_ZN3ESC20getCounterPeriodTIM3Ef>
 8001352:	4603      	mov	r3, r0
 8001354:	461a      	mov	r2, r3
 8001356:	4b08      	ldr	r3, [pc, #32]	; (8001378 <_ZN3ESC2onEffff+0x128>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, getCounterPeriodTIM10_11(RR));
 800135c:	ed97 0a01 	vldr	s0, [r7, #4]
 8001360:	6978      	ldr	r0, [r7, #20]
 8001362:	f7ff ff17 	bl	8001194 <_ZN3ESC24getCounterPeriodTIM10_11Ef>
 8001366:	4603      	mov	r3, r0
 8001368:	461a      	mov	r2, r3
 800136a:	4b05      	ldr	r3, [pc, #20]	; (8001380 <_ZN3ESC2onEffff+0x130>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001370:	bf00      	nop
 8001372:	3718      	adds	r7, #24
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	200438b8 	.word	0x200438b8
 800137c:	20043940 	.word	0x20043940
 8001380:	20043820 	.word	0x20043820

08001384 <_ZN3ESC3offEv>:

void ESC::off()
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ESC_MIN_TIM3);
 800138c:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <_ZN3ESC3offEv+0x3c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f240 7261 	movw	r2, #1889	; 0x761
 8001394:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, ESC_MIN_TIM3);
 8001396:	4b0a      	ldr	r3, [pc, #40]	; (80013c0 <_ZN3ESC3offEv+0x3c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f240 7261 	movw	r2, #1889	; 0x761
 800139e:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 80013a0:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <_ZN3ESC3offEv+0x40>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f640 62ba 	movw	r2, #3770	; 0xeba
 80013a8:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 80013aa:	4b07      	ldr	r3, [pc, #28]	; (80013c8 <_ZN3ESC3offEv+0x44>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f640 62ba 	movw	r2, #3770	; 0xeba
 80013b2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80013b4:	bf00      	nop
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	200438b8 	.word	0x200438b8
 80013c4:	20043820 	.word	0x20043820
 80013c8:	20043940 	.word	0x20043940

080013cc <_ZN7EncoderC1Ev>:

float monitor_distance;
float monitor_cnt_l;
float monitor_cnt_l_lpf;

Encoder::Encoder() : cnt_l_(0), cnt_r_(0), distance_(0), total_cnt_l_(0), total_cnt_r_(0), distance_10mm_(0), total_distance_(0), cross_line_ignore_distance_(0){}
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f04f 0200 	mov.w	r2, #0
 80013e2:	605a      	str	r2, [r3, #4]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f04f 0200 	mov.w	r2, #0
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f04f 0200 	mov.w	r2, #0
 80013f2:	60da      	str	r2, [r3, #12]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f04f 0200 	mov.w	r2, #0
 80013fa:	611a      	str	r2, [r3, #16]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f04f 0200 	mov.w	r2, #0
 8001402:	615a      	str	r2, [r3, #20]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f04f 0200 	mov.w	r2, #0
 800140a:	619a      	str	r2, [r3, #24]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f04f 0200 	mov.w	r2, #0
 8001412:	61da      	str	r2, [r3, #28]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	4618      	mov	r0, r3
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
	...

08001424 <_ZN7Encoder4initEv>:

void Encoder::init()
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 800142c:	213c      	movs	r1, #60	; 0x3c
 800142e:	4809      	ldr	r0, [pc, #36]	; (8001454 <_ZN7Encoder4initEv+0x30>)
 8001430:	f00d facc 	bl	800e9cc <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 8001434:	213c      	movs	r1, #60	; 0x3c
 8001436:	4808      	ldr	r0, [pc, #32]	; (8001458 <_ZN7Encoder4initEv+0x34>)
 8001438:	f00d fac8 	bl	800e9cc <HAL_TIM_Encoder_Start>
	TIM1 -> CNT = CNT_OFFSET;
 800143c:	4b07      	ldr	r3, [pc, #28]	; (800145c <_ZN7Encoder4initEv+0x38>)
 800143e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001442:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 8001444:	4b06      	ldr	r3, [pc, #24]	; (8001460 <_ZN7Encoder4initEv+0x3c>)
 8001446:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800144a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800144c:	bf00      	nop
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	20043a20 	.word	0x20043a20
 8001458:	20043704 	.word	0x20043704
 800145c:	40010000 	.word	0x40010000
 8001460:	40010400 	.word	0x40010400
 8001464:	00000000 	.word	0x00000000

08001468 <_ZN7Encoder6updateEv>:

void Encoder::update()
{
 8001468:	b5b0      	push	{r4, r5, r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
	static float pre_cnt_l, pre_cnt_r;
	float cnt_l = (float(CNT_OFFSET) - float(TIM1 -> CNT)) * CORRECTION_COEFFICIENT;
 8001470:	4b69      	ldr	r3, [pc, #420]	; (8001618 <_ZN7Encoder6updateEv+0x1b0>)
 8001472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001474:	ee07 3a90 	vmov	s15, r3
 8001478:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800147c:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800161c <_ZN7Encoder6updateEv+0x1b4>
 8001480:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001484:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8001620 <_ZN7Encoder6updateEv+0x1b8>
 8001488:	ee67 7a87 	vmul.f32	s15, s15, s14
 800148c:	edc7 7a03 	vstr	s15, [r7, #12]
	float cnt_r = (float(TIM8 -> CNT) - float(CNT_OFFSET)) * CORRECTION_COEFFICIENT;
 8001490:	4b64      	ldr	r3, [pc, #400]	; (8001624 <_ZN7Encoder6updateEv+0x1bc>)
 8001492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001494:	ee07 3a90 	vmov	s15, r3
 8001498:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800149c:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 800161c <_ZN7Encoder6updateEv+0x1b4>
 80014a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80014a4:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8001620 <_ZN7Encoder6updateEv+0x1b8>
 80014a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014ac:	edc7 7a02 	vstr	s15, [r7, #8]
	monitor_cnt_l = cnt_l;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	4a5d      	ldr	r2, [pc, #372]	; (8001628 <_ZN7Encoder6updateEv+0x1c0>)
 80014b4:	6013      	str	r3, [r2, #0]

	cnt_l_ = ((R_ENC)*(cnt_l) + (1.0 - (R_ENC))* (pre_cnt_l)); // lowpath filter
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff f85d 	bl	8000578 <__aeabi_f2d>
 80014be:	a350      	add	r3, pc, #320	; (adr r3, 8001600 <_ZN7Encoder6updateEv+0x198>)
 80014c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c4:	f7ff f8b0 	bl	8000628 <__aeabi_dmul>
 80014c8:	4603      	mov	r3, r0
 80014ca:	460c      	mov	r4, r1
 80014cc:	4625      	mov	r5, r4
 80014ce:	461c      	mov	r4, r3
 80014d0:	4b56      	ldr	r3, [pc, #344]	; (800162c <_ZN7Encoder6updateEv+0x1c4>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff f84f 	bl	8000578 <__aeabi_f2d>
 80014da:	a34b      	add	r3, pc, #300	; (adr r3, 8001608 <_ZN7Encoder6updateEv+0x1a0>)
 80014dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e0:	f7ff f8a2 	bl	8000628 <__aeabi_dmul>
 80014e4:	4602      	mov	r2, r0
 80014e6:	460b      	mov	r3, r1
 80014e8:	4620      	mov	r0, r4
 80014ea:	4629      	mov	r1, r5
 80014ec:	f7fe fee6 	bl	80002bc <__adddf3>
 80014f0:	4603      	mov	r3, r0
 80014f2:	460c      	mov	r4, r1
 80014f4:	4618      	mov	r0, r3
 80014f6:	4621      	mov	r1, r4
 80014f8:	f7ff fb8e 	bl	8000c18 <__aeabi_d2f>
 80014fc:	4602      	mov	r2, r0
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	601a      	str	r2, [r3, #0]
	cnt_r_ = ((R_ENC)*(cnt_r) + (1.0 - (R_ENC))* (pre_cnt_r)); // lowpath filter
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff f837 	bl	8000578 <__aeabi_f2d>
 800150a:	a33d      	add	r3, pc, #244	; (adr r3, 8001600 <_ZN7Encoder6updateEv+0x198>)
 800150c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001510:	f7ff f88a 	bl	8000628 <__aeabi_dmul>
 8001514:	4603      	mov	r3, r0
 8001516:	460c      	mov	r4, r1
 8001518:	4625      	mov	r5, r4
 800151a:	461c      	mov	r4, r3
 800151c:	4b44      	ldr	r3, [pc, #272]	; (8001630 <_ZN7Encoder6updateEv+0x1c8>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff f829 	bl	8000578 <__aeabi_f2d>
 8001526:	a338      	add	r3, pc, #224	; (adr r3, 8001608 <_ZN7Encoder6updateEv+0x1a0>)
 8001528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800152c:	f7ff f87c 	bl	8000628 <__aeabi_dmul>
 8001530:	4602      	mov	r2, r0
 8001532:	460b      	mov	r3, r1
 8001534:	4620      	mov	r0, r4
 8001536:	4629      	mov	r1, r5
 8001538:	f7fe fec0 	bl	80002bc <__adddf3>
 800153c:	4603      	mov	r3, r0
 800153e:	460c      	mov	r4, r1
 8001540:	4618      	mov	r0, r3
 8001542:	4621      	mov	r1, r4
 8001544:	f7ff fb68 	bl	8000c18 <__aeabi_d2f>
 8001548:	4602      	mov	r2, r0
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	605a      	str	r2, [r3, #4]
	monitor_cnt_l_lpf = cnt_l_;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a38      	ldr	r2, [pc, #224]	; (8001634 <_ZN7Encoder6updateEv+0x1cc>)
 8001554:	6013      	str	r3, [r2, #0]

	pre_cnt_l = cnt_l_;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a34      	ldr	r2, [pc, #208]	; (800162c <_ZN7Encoder6updateEv+0x1c4>)
 800155c:	6013      	str	r3, [r2, #0]
	pre_cnt_r = cnt_r_;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	4a33      	ldr	r2, [pc, #204]	; (8001630 <_ZN7Encoder6updateEv+0x1c8>)
 8001564:	6013      	str	r3, [r2, #0]

	//total_cnt_l_ += cnt_l_;
	//total_cnt_r_ += cnt_r_;

	//distance_ = distance_ + DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
	distance_ = DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	ed93 7a00 	vldr	s14, [r3]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001572:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001576:	ee17 0a90 	vmov	r0, s15
 800157a:	f7fe fffd 	bl	8000578 <__aeabi_f2d>
 800157e:	a324      	add	r3, pc, #144	; (adr r3, 8001610 <_ZN7Encoder6updateEv+0x1a8>)
 8001580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001584:	f7ff f850 	bl	8000628 <__aeabi_dmul>
 8001588:	4603      	mov	r3, r0
 800158a:	460c      	mov	r4, r1
 800158c:	4618      	mov	r0, r3
 800158e:	4621      	mov	r1, r4
 8001590:	f04f 0200 	mov.w	r2, #0
 8001594:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001598:	f7ff f970 	bl	800087c <__aeabi_ddiv>
 800159c:	4603      	mov	r3, r0
 800159e:	460c      	mov	r4, r1
 80015a0:	4618      	mov	r0, r3
 80015a2:	4621      	mov	r1, r4
 80015a4:	f7ff fb38 	bl	8000c18 <__aeabi_d2f>
 80015a8:	4602      	mov	r2, r0
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	609a      	str	r2, [r3, #8]
	distance_10mm_ += distance_;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	ed93 7a05 	vldr	s14, [r3, #20]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	edd3 7a02 	vldr	s15, [r3, #8]
 80015ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	edc3 7a05 	vstr	s15, [r3, #20]
	total_distance_ += distance_;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	ed93 7a06 	vldr	s14, [r3, #24]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	edd3 7a02 	vldr	s15, [r3, #8]
 80015d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	edc3 7a06 	vstr	s15, [r3, #24]
	cross_line_ignore_distance_ += distance_;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	ed93 7a07 	vldr	s14, [r3, #28]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	edd3 7a02 	vldr	s15, [r3, #8]
 80015e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	edc3 7a07 	vstr	s15, [r3, #28]
	monitor_distance = distance_10mm_;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	695b      	ldr	r3, [r3, #20]
 80015f4:	4a10      	ldr	r2, [pc, #64]	; (8001638 <_ZN7Encoder6updateEv+0x1d0>)
 80015f6:	6013      	str	r3, [r2, #0]
}
 80015f8:	bf00      	nop
 80015fa:	3710      	adds	r7, #16
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bdb0      	pop	{r4, r5, r7, pc}
 8001600:	9999999a 	.word	0x9999999a
 8001604:	3fa99999 	.word	0x3fa99999
 8001608:	66666666 	.word	0x66666666
 800160c:	3fee6666 	.word	0x3fee6666
 8001610:	ce73a049 	.word	0xce73a049
 8001614:	3f77a3f6 	.word	0x3f77a3f6
 8001618:	40010000 	.word	0x40010000
 800161c:	47000000 	.word	0x47000000
 8001620:	3f912547 	.word	0x3f912547
 8001624:	40010400 	.word	0x40010400
 8001628:	20000200 	.word	0x20000200
 800162c:	20000208 	.word	0x20000208
 8001630:	2000020c 	.word	0x2000020c
 8001634:	20000204 	.word	0x20000204
 8001638:	200001fc 	.word	0x200001fc

0800163c <_ZN7Encoder5clearEv>:

void Encoder::clear()
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
	cnt_l_ = 0;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f04f 0200 	mov.w	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
	cnt_r_ = 0;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f04f 0200 	mov.w	r2, #0
 8001652:	605a      	str	r2, [r3, #4]
	TIM1 -> CNT = CNT_OFFSET;
 8001654:	4b08      	ldr	r3, [pc, #32]	; (8001678 <_ZN7Encoder5clearEv+0x3c>)
 8001656:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800165a:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 800165c:	4b07      	ldr	r3, [pc, #28]	; (800167c <_ZN7Encoder5clearEv+0x40>)
 800165e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001662:	625a      	str	r2, [r3, #36]	; 0x24
	distance_ = 0;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f04f 0200 	mov.w	r2, #0
 800166a:	609a      	str	r2, [r3, #8]
}
 800166c:	bf00      	nop
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	40010000 	.word	0x40010000
 800167c:	40010400 	.word	0x40010400

08001680 <_ZN7Encoder6getCntERfS0_>:

void Encoder::getCnt(float &cnt_l, float &cnt_r)
{
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	60b9      	str	r1, [r7, #8]
 800168a:	607a      	str	r2, [r7, #4]
	cnt_l = cnt_l_;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	601a      	str	r2, [r3, #0]
	cnt_r = cnt_r_;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	685a      	ldr	r2, [r3, #4]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	601a      	str	r2, [r3, #0]
}
 800169c:	bf00      	nop
 800169e:	3714      	adds	r7, #20
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <_ZN7Encoder11getDistanceEv>:

float Encoder::getDistance()
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
	return distance_;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	ee07 3a90 	vmov	s15, r3
}
 80016b8:	eeb0 0a67 	vmov.f32	s0, s15
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr

080016c6 <_ZN7Encoder15getDistance10mmEv>:

float Encoder::getDistance10mm()
{
 80016c6:	b480      	push	{r7}
 80016c8:	b083      	sub	sp, #12
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
	return distance_10mm_;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	695b      	ldr	r3, [r3, #20]
 80016d2:	ee07 3a90 	vmov	s15, r3
}
 80016d6:	eeb0 0a67 	vmov.f32	s0, s15
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <_ZN7Encoder16getTotalDistanceEv>:

float Encoder::getTotalDistance()
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
	return total_distance_;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	ee07 3a90 	vmov	s15, r3
}
 80016f4:	eeb0 0a67 	vmov.f32	s0, s15
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr

08001702 <_ZN7Encoder16setTotalDistanceEf>:

void Encoder::setTotalDistance(float true_distance){
 8001702:	b480      	push	{r7}
 8001704:	b083      	sub	sp, #12
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
 800170a:	ed87 0a00 	vstr	s0, [r7]
	total_distance_ = true_distance;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	683a      	ldr	r2, [r7, #0]
 8001712:	619a      	str	r2, [r3, #24]
}
 8001714:	bf00      	nop
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <_ZN7Encoder17clearDistance10mmEv>:
	return (total_cnt_l_ + total_cnt_r_) / 2;
}
*/

void Encoder::clearDistance10mm()
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
	//total_cnt_l_ = 0;
	//total_cnt_r_ = 0;
	distance_10mm_ = 0;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f04f 0200 	mov.w	r2, #0
 800172e:	615a      	str	r2, [r3, #20]
}
 8001730:	bf00      	nop
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <_ZN7Encoder18clearTotalDistanceEv>:

void Encoder::clearTotalDistance()
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
	total_distance_ = 0;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f04f 0200 	mov.w	r2, #0
 800174a:	619a      	str	r2, [r3, #24]
}
 800174c:	bf00      	nop
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <_ZN7Encoder26getCrossLineIgnoreDistanceEv>:

float Encoder::getCrossLineIgnoreDistance()
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
	return cross_line_ignore_distance_;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	69db      	ldr	r3, [r3, #28]
 8001764:	ee07 3a90 	vmov	s15, r3
}
 8001768:	eeb0 0a67 	vmov.f32	s0, s15
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr

08001776 <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>:

void Encoder::clearCrossLineIgnoreDistance()
{
 8001776:	b480      	push	{r7}
 8001778:	b083      	sub	sp, #12
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
	cross_line_ignore_distance_ = 0;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	f04f 0200 	mov.w	r2, #0
 8001784:	61da      	str	r2, [r3, #28]
}
 8001786:	bf00      	nop
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <user_fopen>:
//* 役割　：　fopenする
//* 引数　：　char, float *: short　: フォルダ名、ファイル名
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fopen(const char *p_folder_name, const char *p_file_name){
 8001792:	b580      	push	{r7, lr}
 8001794:	b084      	sub	sp, #16
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
 800179a:	6039      	str	r1, [r7, #0]

	FRESULT ret = 0;
 800179c:	2300      	movs	r3, #0
 800179e:	73fb      	strb	r3, [r7, #15]

	create_path(p_folder_name, p_file_name);
 80017a0:	6839      	ldr	r1, [r7, #0]
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f000 f978 	bl	8001a98 <create_path>

	fopen_folder_and_file();	//書き込むファイルを選択
 80017a8:	f000 f98c 	bl	8001ac4 <fopen_folder_and_file>

	return ret;
 80017ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3710      	adds	r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
	...

080017b8 <user_fclose>:
//* 役割　：　fcloseする
//* 引数　：　void
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fclose(){
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 80017be:	2300      	movs	r3, #0
 80017c0:	71fb      	strb	r3, [r7, #7]

	f_close(&fil);	//ファイル閉じる
 80017c2:	4804      	ldr	r0, [pc, #16]	; (80017d4 <user_fclose+0x1c>)
 80017c4:	f011 fe5c 	bl	8013480 <f_close>

	return ret;
 80017c8:	79fb      	ldrb	r3, [r7, #7]
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	20042610 	.word	0x20042610

080017d8 <sd_write_float>:
//* 役割　：　SDに書き込む
//* 引数　：　short, float *, char : 変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_float(short size, float *data, char state){
 80017d8:	b590      	push	{r4, r7, lr}
 80017da:	b087      	sub	sp, #28
 80017dc:	af02      	add	r7, sp, #8
 80017de:	4603      	mov	r3, r0
 80017e0:	6039      	str	r1, [r7, #0]
 80017e2:	80fb      	strh	r3, [r7, #6]
 80017e4:	4613      	mov	r3, r2
 80017e6:	717b      	strb	r3, [r7, #5]
	FRESULT ret = 0;
 80017e8:	2300      	movs	r3, #0
 80017ea:	737b      	strb	r3, [r7, #13]

	for(short i = 0 ; i < size; i++){
 80017ec:	2300      	movs	r3, #0
 80017ee:	81fb      	strh	r3, [r7, #14]
 80017f0:	e030      	b.n	8001854 <sd_write_float+0x7c>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 80017f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	683a      	ldr	r2, [r7, #0]
 80017fa:	4413      	add	r3, r2
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4618      	mov	r0, r3
 8001800:	f7fe feba 	bl	8000578 <__aeabi_f2d>
 8001804:	4603      	mov	r3, r0
 8001806:	460c      	mov	r4, r1
 8001808:	e9cd 3400 	strd	r3, r4, [sp]
 800180c:	4a17      	ldr	r2, [pc, #92]	; (800186c <sd_write_float+0x94>)
 800180e:	2180      	movs	r1, #128	; 0x80
 8001810:	4817      	ldr	r0, [pc, #92]	; (8001870 <sd_write_float+0x98>)
 8001812:	f014 fa29 	bl	8015c68 <sniprintf>

		if(state == ADD_WRITE){
 8001816:	797b      	ldrb	r3, [r7, #5]
 8001818:	2b01      	cmp	r3, #1
 800181a:	d106      	bne.n	800182a <sd_write_float+0x52>
			f_lseek(&fil, f_size(&fil));	//ファイルの最後に移動
 800181c:	4b15      	ldr	r3, [pc, #84]	; (8001874 <sd_write_float+0x9c>)
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	4619      	mov	r1, r3
 8001822:	4814      	ldr	r0, [pc, #80]	; (8001874 <sd_write_float+0x9c>)
 8001824:	f011 fea0 	bl	8013568 <f_lseek>
 8001828:	e003      	b.n	8001832 <sd_write_float+0x5a>
		}
		else{
			f_lseek(&fil, 0);	//ファイルの最初に移動
 800182a:	2100      	movs	r1, #0
 800182c:	4811      	ldr	r0, [pc, #68]	; (8001874 <sd_write_float+0x9c>)
 800182e:	f011 fe9b 	bl	8013568 <f_lseek>
		}

		f_write(&fil, buffer, strlen(buffer), &bw);	//書き込む
 8001832:	480f      	ldr	r0, [pc, #60]	; (8001870 <sd_write_float+0x98>)
 8001834:	f7fe fce4 	bl	8000200 <strlen>
 8001838:	4602      	mov	r2, r0
 800183a:	4b0f      	ldr	r3, [pc, #60]	; (8001878 <sd_write_float+0xa0>)
 800183c:	490c      	ldr	r1, [pc, #48]	; (8001870 <sd_write_float+0x98>)
 800183e:	480d      	ldr	r0, [pc, #52]	; (8001874 <sd_write_float+0x9c>)
 8001840:	f011 fc09 	bl	8013056 <f_write>

		bufclear();	//書き込み用のバッファをクリア
 8001844:	f000 f958 	bl	8001af8 <bufclear>
	for(short i = 0 ; i < size; i++){
 8001848:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800184c:	b29b      	uxth	r3, r3
 800184e:	3301      	adds	r3, #1
 8001850:	b29b      	uxth	r3, r3
 8001852:	81fb      	strh	r3, [r7, #14]
 8001854:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001858:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800185c:	429a      	cmp	r2, r3
 800185e:	dbc8      	blt.n	80017f2 <sd_write_float+0x1a>
	}
	return ret;
 8001860:	7b7b      	ldrb	r3, [r7, #13]
}
 8001862:	4618      	mov	r0, r3
 8001864:	3714      	adds	r7, #20
 8001866:	46bd      	mov	sp, r7
 8001868:	bd90      	pop	{r4, r7, pc}
 800186a:	bf00      	nop
 800186c:	08019370 	.word	0x08019370
 8001870:	20042580 	.word	0x20042580
 8001874:	20042610 	.word	0x20042610
 8001878:	20042600 	.word	0x20042600

0800187c <sd_write_array_float>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data, char state){
 800187c:	b590      	push	{r4, r7, lr}
 800187e:	b089      	sub	sp, #36	; 0x24
 8001880:	af02      	add	r7, sp, #8
 8001882:	60f8      	str	r0, [r7, #12]
 8001884:	60b9      	str	r1, [r7, #8]
 8001886:	603b      	str	r3, [r7, #0]
 8001888:	4613      	mov	r3, r2
 800188a:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 800188c:	2300      	movs	r3, #0
 800188e:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 8001890:	68b9      	ldr	r1, [r7, #8]
 8001892:	68f8      	ldr	r0, [r7, #12]
 8001894:	f000 f900 	bl	8001a98 <create_path>

	if(state == OVER_WRITE){
 8001898:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800189c:	2b00      	cmp	r3, #0
 800189e:	d108      	bne.n	80018b2 <sd_write_array_float+0x36>
		f_chdir(dirpath);
 80018a0:	4822      	ldr	r0, [pc, #136]	; (800192c <sd_write_array_float+0xb0>)
 80018a2:	f011 fe17 	bl	80134d4 <f_chdir>
		f_unlink(filepath);	//	一回消す
 80018a6:	4822      	ldr	r0, [pc, #136]	; (8001930 <sd_write_array_float+0xb4>)
 80018a8:	f012 f882 	bl	80139b0 <f_unlink>
		f_chdir("..");
 80018ac:	4821      	ldr	r0, [pc, #132]	; (8001934 <sd_write_array_float+0xb8>)
 80018ae:	f011 fe11 	bl	80134d4 <f_chdir>
	}

	fopen_folder_and_file();	//	書き込むファイルを選択
 80018b2:	f000 f907 	bl	8001ac4 <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 80018b6:	2300      	movs	r3, #0
 80018b8:	82fb      	strh	r3, [r7, #22]
 80018ba:	e028      	b.n	800190e <sd_write_array_float+0x92>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 80018bc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	683a      	ldr	r2, [r7, #0]
 80018c4:	4413      	add	r3, r2
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7fe fe55 	bl	8000578 <__aeabi_f2d>
 80018ce:	4603      	mov	r3, r0
 80018d0:	460c      	mov	r4, r1
 80018d2:	e9cd 3400 	strd	r3, r4, [sp]
 80018d6:	4a18      	ldr	r2, [pc, #96]	; (8001938 <sd_write_array_float+0xbc>)
 80018d8:	2180      	movs	r1, #128	; 0x80
 80018da:	4818      	ldr	r0, [pc, #96]	; (800193c <sd_write_array_float+0xc0>)
 80018dc:	f014 f9c4 	bl	8015c68 <sniprintf>

		f_lseek(&fil, f_size(&fil));	//	ファイルの最後に移動
 80018e0:	4b17      	ldr	r3, [pc, #92]	; (8001940 <sd_write_array_float+0xc4>)
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	4619      	mov	r1, r3
 80018e6:	4816      	ldr	r0, [pc, #88]	; (8001940 <sd_write_array_float+0xc4>)
 80018e8:	f011 fe3e 	bl	8013568 <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//	書き込む
 80018ec:	4813      	ldr	r0, [pc, #76]	; (800193c <sd_write_array_float+0xc0>)
 80018ee:	f7fe fc87 	bl	8000200 <strlen>
 80018f2:	4602      	mov	r2, r0
 80018f4:	4b13      	ldr	r3, [pc, #76]	; (8001944 <sd_write_array_float+0xc8>)
 80018f6:	4911      	ldr	r1, [pc, #68]	; (800193c <sd_write_array_float+0xc0>)
 80018f8:	4811      	ldr	r0, [pc, #68]	; (8001940 <sd_write_array_float+0xc4>)
 80018fa:	f011 fbac 	bl	8013056 <f_write>

		bufclear();	//	書き込み用のバッファをクリア
 80018fe:	f000 f8fb 	bl	8001af8 <bufclear>
	for(short i = 0 ; i < size; i++){
 8001902:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001906:	b29b      	uxth	r3, r3
 8001908:	3301      	adds	r3, #1
 800190a:	b29b      	uxth	r3, r3
 800190c:	82fb      	strh	r3, [r7, #22]
 800190e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001912:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001916:	429a      	cmp	r2, r3
 8001918:	dbd0      	blt.n	80018bc <sd_write_array_float+0x40>
	}

	f_close(&fil);	//	ファイル閉じる
 800191a:	4809      	ldr	r0, [pc, #36]	; (8001940 <sd_write_array_float+0xc4>)
 800191c:	f011 fdb0 	bl	8013480 <f_close>

	return ret;
 8001920:	7d7b      	ldrb	r3, [r7, #21]
}
 8001922:	4618      	mov	r0, r3
 8001924:	371c      	adds	r7, #28
 8001926:	46bd      	mov	sp, r7
 8001928:	bd90      	pop	{r4, r7, pc}
 800192a:	bf00      	nop
 800192c:	20042480 	.word	0x20042480
 8001930:	20041340 	.word	0x20041340
 8001934:	0801938c 	.word	0x0801938c
 8001938:	08019370 	.word	0x08019370
 800193c:	20042580 	.word	0x20042580
 8001940:	20042610 	.word	0x20042610
 8001944:	20042600 	.word	0x20042600

08001948 <sd_read_array_float>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, float *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data){
 8001948:	b580      	push	{r7, lr}
 800194a:	b086      	sub	sp, #24
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	603b      	str	r3, [r7, #0]
 8001954:	4613      	mov	r3, r2
 8001956:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001958:	2300      	movs	r3, #0
 800195a:	757b      	strb	r3, [r7, #21]
	short i = 0;
 800195c:	2300      	movs	r3, #0
 800195e:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 8001960:	68b9      	ldr	r1, [r7, #8]
 8001962:	68f8      	ldr	r0, [r7, #12]
 8001964:	f000 f898 	bl	8001a98 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 8001968:	f000 f8ac 	bl	8001ac4 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 800196c:	e019      	b.n	80019a2 <sd_read_array_float+0x5a>
		sscanf(buffer, "%f", data + i);
 800196e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	683a      	ldr	r2, [r7, #0]
 8001976:	4413      	add	r3, r2
 8001978:	461a      	mov	r2, r3
 800197a:	4913      	ldr	r1, [pc, #76]	; (80019c8 <sd_read_array_float+0x80>)
 800197c:	4813      	ldr	r0, [pc, #76]	; (80019cc <sd_read_array_float+0x84>)
 800197e:	f014 f9c7 	bl	8015d10 <siscanf>
		i++;
 8001982:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001986:	b29b      	uxth	r3, r3
 8001988:	3301      	adds	r3, #1
 800198a:	b29b      	uxth	r3, r3
 800198c:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 800198e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001992:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001996:	429a      	cmp	r2, r3
 8001998:	db03      	blt.n	80019a2 <sd_read_array_float+0x5a>
 800199a:	88fb      	ldrh	r3, [r7, #6]
 800199c:	3b01      	subs	r3, #1
 800199e:	b29b      	uxth	r3, r3
 80019a0:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80019a2:	4a0b      	ldr	r2, [pc, #44]	; (80019d0 <sd_read_array_float+0x88>)
 80019a4:	2180      	movs	r1, #128	; 0x80
 80019a6:	4809      	ldr	r0, [pc, #36]	; (80019cc <sd_read_array_float+0x84>)
 80019a8:	f012 f9e0 	bl	8013d6c <f_gets>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d1dd      	bne.n	800196e <sd_read_array_float+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 80019b2:	f000 f8a1 	bl	8001af8 <bufclear>

	f_close(&fil);	//ファイル閉じる
 80019b6:	4806      	ldr	r0, [pc, #24]	; (80019d0 <sd_read_array_float+0x88>)
 80019b8:	f011 fd62 	bl	8013480 <f_close>

	return ret;
 80019bc:	7d7b      	ldrb	r3, [r7, #21]
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3718      	adds	r7, #24
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	0801937c 	.word	0x0801937c
 80019cc:	20042580 	.word	0x20042580
 80019d0:	20042610 	.word	0x20042610

080019d4 <sd_read_array_double>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, double *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_double(const char *p_folder_name, const char *p_file_name, short size, double *data){
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	60b9      	str	r1, [r7, #8]
 80019de:	603b      	str	r3, [r7, #0]
 80019e0:	4613      	mov	r3, r2
 80019e2:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 80019e4:	2300      	movs	r3, #0
 80019e6:	757b      	strb	r3, [r7, #21]
	short i = 0;
 80019e8:	2300      	movs	r3, #0
 80019ea:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 80019ec:	68b9      	ldr	r1, [r7, #8]
 80019ee:	68f8      	ldr	r0, [r7, #12]
 80019f0:	f000 f852 	bl	8001a98 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 80019f4:	f000 f866 	bl	8001ac4 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80019f8:	e019      	b.n	8001a2e <sd_read_array_double+0x5a>
		sscanf(buffer, "%lf", data + i);
 80019fa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80019fe:	00db      	lsls	r3, r3, #3
 8001a00:	683a      	ldr	r2, [r7, #0]
 8001a02:	4413      	add	r3, r2
 8001a04:	461a      	mov	r2, r3
 8001a06:	4913      	ldr	r1, [pc, #76]	; (8001a54 <sd_read_array_double+0x80>)
 8001a08:	4813      	ldr	r0, [pc, #76]	; (8001a58 <sd_read_array_double+0x84>)
 8001a0a:	f014 f981 	bl	8015d10 <siscanf>
		i++;
 8001a0e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001a12:	b29b      	uxth	r3, r3
 8001a14:	3301      	adds	r3, #1
 8001a16:	b29b      	uxth	r3, r3
 8001a18:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 8001a1a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001a1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a22:	429a      	cmp	r2, r3
 8001a24:	db03      	blt.n	8001a2e <sd_read_array_double+0x5a>
 8001a26:	88fb      	ldrh	r3, [r7, #6]
 8001a28:	3b01      	subs	r3, #1
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001a2e:	4a0b      	ldr	r2, [pc, #44]	; (8001a5c <sd_read_array_double+0x88>)
 8001a30:	2180      	movs	r1, #128	; 0x80
 8001a32:	4809      	ldr	r0, [pc, #36]	; (8001a58 <sd_read_array_double+0x84>)
 8001a34:	f012 f99a 	bl	8013d6c <f_gets>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d1dd      	bne.n	80019fa <sd_read_array_double+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 8001a3e:	f000 f85b 	bl	8001af8 <bufclear>

	f_close(&fil);	//ファイル閉じる
 8001a42:	4806      	ldr	r0, [pc, #24]	; (8001a5c <sd_read_array_double+0x88>)
 8001a44:	f011 fd1c 	bl	8013480 <f_close>

	return ret;
 8001a48:	7d7b      	ldrb	r3, [r7, #21]
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3718      	adds	r7, #24
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	08019388 	.word	0x08019388
 8001a58:	20042580 	.word	0x20042580
 8001a5c:	20042610 	.word	0x20042610

08001a60 <sd_mount>:
//* 役割　：　SDカードをマウント
//* 引数　：　void:
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_mount(){
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 8001a66:	2300      	movs	r3, #0
 8001a68:	71fb      	strb	r3, [r7, #7]

	if(f_mount(&fs, "", 1) == FR_OK) ret = 1;
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	4908      	ldr	r1, [pc, #32]	; (8001a90 <sd_mount+0x30>)
 8001a6e:	4809      	ldr	r0, [pc, #36]	; (8001a94 <sd_mount+0x34>)
 8001a70:	f010 ff7e 	bl	8012970 <f_mount>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d102      	bne.n	8001a80 <sd_mount+0x20>
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	71fb      	strb	r3, [r7, #7]
 8001a7e:	e001      	b.n	8001a84 <sd_mount+0x24>
	else ret = 0;
 8001a80:	2300      	movs	r3, #0
 8001a82:	71fb      	strb	r3, [r7, #7]

	return ret;
 8001a84:	79fb      	ldrb	r3, [r7, #7]
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	08019398 	.word	0x08019398
 8001a94:	20041440 	.word	0x20041440

08001a98 <create_path>:
//* 役割　：　操作するパスの文字列を作る
//* 引数　：　char, char: フォルダ名, ファイル名
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void create_path(char const *p_folder_name, char const *p_file_name){
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	6039      	str	r1, [r7, #0]

	sprintf(dirpath, "%s", p_folder_name);
 8001aa2:	6879      	ldr	r1, [r7, #4]
 8001aa4:	4805      	ldr	r0, [pc, #20]	; (8001abc <create_path+0x24>)
 8001aa6:	f014 f95f 	bl	8015d68 <strcpy>

	sprintf(filepath, "%s", p_file_name);
 8001aaa:	6839      	ldr	r1, [r7, #0]
 8001aac:	4804      	ldr	r0, [pc, #16]	; (8001ac0 <create_path+0x28>)
 8001aae:	f014 f95b 	bl	8015d68 <strcpy>

}
 8001ab2:	bf00      	nop
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	20042480 	.word	0x20042480
 8001ac0:	20041340 	.word	0x20041340

08001ac4 <fopen_folder_and_file>:
//* 役割　：　操作するファイルを選択する_
//* 引数　：　char: ファイル選択
//* 戻り値：　char: 状態チェック	0(マウント失敗) or 1(成功)
//* 備考 : なし
//************************************************************************/
void fopen_folder_and_file(){	//mkdir
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0

	f_mkdir(dirpath);
 8001ac8:	4807      	ldr	r0, [pc, #28]	; (8001ae8 <fopen_folder_and_file+0x24>)
 8001aca:	f012 f833 	bl	8013b34 <f_mkdir>

	f_chdir(dirpath);
 8001ace:	4806      	ldr	r0, [pc, #24]	; (8001ae8 <fopen_folder_and_file+0x24>)
 8001ad0:	f011 fd00 	bl	80134d4 <f_chdir>

	f_open(&fil, filepath, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8001ad4:	2213      	movs	r2, #19
 8001ad6:	4905      	ldr	r1, [pc, #20]	; (8001aec <fopen_folder_and_file+0x28>)
 8001ad8:	4805      	ldr	r0, [pc, #20]	; (8001af0 <fopen_folder_and_file+0x2c>)
 8001ada:	f010 ff8f 	bl	80129fc <f_open>

	f_chdir("..");
 8001ade:	4805      	ldr	r0, [pc, #20]	; (8001af4 <fopen_folder_and_file+0x30>)
 8001ae0:	f011 fcf8 	bl	80134d4 <f_chdir>


}
 8001ae4:	bf00      	nop
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	20042480 	.word	0x20042480
 8001aec:	20041340 	.word	0x20041340
 8001af0:	20042610 	.word	0x20042610
 8001af4:	0801938c 	.word	0x0801938c

08001af8 <bufclear>:
//* 役割　：　バッファをクリア
//* 引数　：　void:
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void bufclear(void){
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
	for(int i = 0; i < BUFF_SIZE; i++){
 8001afe:	2300      	movs	r3, #0
 8001b00:	607b      	str	r3, [r7, #4]
 8001b02:	e007      	b.n	8001b14 <bufclear+0x1c>
		buffer[i] = '\0';
 8001b04:	4a08      	ldr	r2, [pc, #32]	; (8001b28 <bufclear+0x30>)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4413      	add	r3, r2
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFF_SIZE; i++){
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	3301      	adds	r3, #1
 8001b12:	607b      	str	r3, [r7, #4]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2b7f      	cmp	r3, #127	; 0x7f
 8001b18:	ddf4      	ble.n	8001b04 <bufclear+0xc>
	}
}
 8001b1a:	bf00      	nop
 8001b1c:	370c      	adds	r7, #12
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	20042580 	.word	0x20042580

08001b2c <read_byte>:
#include "ICM_20648.h"

volatile int16_t xa, ya, za; // 加速度(16bitデータ)
volatile int16_t xg, yg, zg;	// 角加速度(16bitデータ)

uint8_t read_byte( uint8_t reg ) {
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	4603      	mov	r3, r0
 8001b34:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 8001b36:	79fb      	ldrb	r3, [r7, #7]
 8001b38:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8001b40:	2200      	movs	r2, #0
 8001b42:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b46:	480e      	ldr	r0, [pc, #56]	; (8001b80 <read_byte+0x54>)
 8001b48:	f008 ff56 	bl	800a9f8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001b4c:	f107 010f 	add.w	r1, r7, #15
 8001b50:	2364      	movs	r3, #100	; 0x64
 8001b52:	2201      	movs	r2, #1
 8001b54:	480b      	ldr	r0, [pc, #44]	; (8001b84 <read_byte+0x58>)
 8001b56:	f00c f8ff 	bl	800dd58 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2,&val,1,100);
 8001b5a:	f107 010e 	add.w	r1, r7, #14
 8001b5e:	2364      	movs	r3, #100	; 0x64
 8001b60:	2201      	movs	r2, #1
 8001b62:	4808      	ldr	r0, [pc, #32]	; (8001b84 <read_byte+0x58>)
 8001b64:	f00c fa2c 	bl	800dfc0 <HAL_SPI_Receive>
	CS_SET;
 8001b68:	2201      	movs	r2, #1
 8001b6a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b6e:	4804      	ldr	r0, [pc, #16]	; (8001b80 <read_byte+0x54>)
 8001b70:	f008 ff42 	bl	800a9f8 <HAL_GPIO_WritePin>

	return val;
 8001b74:	7bbb      	ldrb	r3, [r7, #14]
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3710      	adds	r7, #16
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	40020400 	.word	0x40020400
 8001b84:	200436ac 	.word	0x200436ac

08001b88 <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	4603      	mov	r3, r0
 8001b90:	460a      	mov	r2, r1
 8001b92:	71fb      	strb	r3, [r7, #7]
 8001b94:	4613      	mov	r3, r2
 8001b96:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8001b98:	79fb      	ldrb	r3, [r7, #7]
 8001b9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ba8:	480c      	ldr	r0, [pc, #48]	; (8001bdc <write_byte+0x54>)
 8001baa:	f008 ff25 	bl	800a9f8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001bae:	f107 010f 	add.w	r1, r7, #15
 8001bb2:	2364      	movs	r3, #100	; 0x64
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	480a      	ldr	r0, [pc, #40]	; (8001be0 <write_byte+0x58>)
 8001bb8:	f00c f8ce 	bl	800dd58 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2,&val,1,100);
 8001bbc:	1db9      	adds	r1, r7, #6
 8001bbe:	2364      	movs	r3, #100	; 0x64
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	4807      	ldr	r0, [pc, #28]	; (8001be0 <write_byte+0x58>)
 8001bc4:	f00c f8c8 	bl	800dd58 <HAL_SPI_Transmit>
	CS_SET;
 8001bc8:	2201      	movs	r2, #1
 8001bca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001bce:	4803      	ldr	r0, [pc, #12]	; (8001bdc <write_byte+0x54>)
 8001bd0:	f008 ff12 	bl	800a9f8 <HAL_GPIO_WritePin>
}
 8001bd4:	bf00      	nop
 8001bd6:	3710      	adds	r7, #16
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	40020400 	.word	0x40020400
 8001be0:	200436ac 	.word	0x200436ac

08001be4 <IMU_init>:

uint16_t IMU_init() {
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
	uint8_t who_am_i;
	uint16_t ret = 0;
 8001bea:	2300      	movs	r3, #0
 8001bec:	80fb      	strh	r3, [r7, #6]

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 8001bee:	2000      	movs	r0, #0
 8001bf0:	f7ff ff9c 	bl	8001b2c <read_byte>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	717b      	strb	r3, [r7, #5]
	if ( who_am_i == 0xE0 ) {
 8001bf8:	797b      	ldrb	r3, [r7, #5]
 8001bfa:	2be0      	cmp	r3, #224	; 0xe0
 8001bfc:	d119      	bne.n	8001c32 <IMU_init+0x4e>
		ret = 1;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	80fb      	strh	r3, [r7, #6]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 8001c02:	2101      	movs	r1, #1
 8001c04:	2006      	movs	r0, #6
 8001c06:	f7ff ffbf 	bl	8001b88 <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 8001c0a:	2110      	movs	r1, #16
 8001c0c:	2003      	movs	r0, #3
 8001c0e:	f7ff ffbb 	bl	8001b88 <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 8001c12:	2120      	movs	r1, #32
 8001c14:	207f      	movs	r0, #127	; 0x7f
 8001c16:	f7ff ffb7 	bl	8001b88 <write_byte>
		write_byte(0x01,0x06);	//レンジ±2000dps
 8001c1a:	2106      	movs	r1, #6
 8001c1c:	2001      	movs	r0, #1
 8001c1e:	f7ff ffb3 	bl	8001b88 <write_byte>
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		write_byte(0x14,0x06);	//レンジ±16g
 8001c22:	2106      	movs	r1, #6
 8001c24:	2014      	movs	r0, #20
 8001c26:	f7ff ffaf 	bl	8001b88 <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(0x7F,0x00);	//USER_BANK0
 8001c2a:	2100      	movs	r1, #0
 8001c2c:	207f      	movs	r0, #127	; 0x7f
 8001c2e:	f7ff ffab 	bl	8001b88 <write_byte>
	}
	return ret;
 8001c32:	88fb      	ldrh	r3, [r7, #6]
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <read_gyro_data>:

void read_gyro_data() {
 8001c3c:	b598      	push	{r3, r4, r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
	xg = ((uint16_t)read_byte(0x33) << 8) | ((uint16_t)read_byte(0x34));
 8001c40:	2033      	movs	r0, #51	; 0x33
 8001c42:	f7ff ff73 	bl	8001b2c <read_byte>
 8001c46:	4603      	mov	r3, r0
 8001c48:	021b      	lsls	r3, r3, #8
 8001c4a:	b21c      	sxth	r4, r3
 8001c4c:	2034      	movs	r0, #52	; 0x34
 8001c4e:	f7ff ff6d 	bl	8001b2c <read_byte>
 8001c52:	4603      	mov	r3, r0
 8001c54:	b21b      	sxth	r3, r3
 8001c56:	4323      	orrs	r3, r4
 8001c58:	b21a      	sxth	r2, r3
 8001c5a:	4b11      	ldr	r3, [pc, #68]	; (8001ca0 <read_gyro_data+0x64>)
 8001c5c:	801a      	strh	r2, [r3, #0]
	yg = ((uint16_t)read_byte(0x35) << 8) | ((uint16_t)read_byte(0x36));
 8001c5e:	2035      	movs	r0, #53	; 0x35
 8001c60:	f7ff ff64 	bl	8001b2c <read_byte>
 8001c64:	4603      	mov	r3, r0
 8001c66:	021b      	lsls	r3, r3, #8
 8001c68:	b21c      	sxth	r4, r3
 8001c6a:	2036      	movs	r0, #54	; 0x36
 8001c6c:	f7ff ff5e 	bl	8001b2c <read_byte>
 8001c70:	4603      	mov	r3, r0
 8001c72:	b21b      	sxth	r3, r3
 8001c74:	4323      	orrs	r3, r4
 8001c76:	b21a      	sxth	r2, r3
 8001c78:	4b0a      	ldr	r3, [pc, #40]	; (8001ca4 <read_gyro_data+0x68>)
 8001c7a:	801a      	strh	r2, [r3, #0]
	zg = ((uint16_t)read_byte(0x37) << 8) | ((uint16_t)read_byte(0x38));
 8001c7c:	2037      	movs	r0, #55	; 0x37
 8001c7e:	f7ff ff55 	bl	8001b2c <read_byte>
 8001c82:	4603      	mov	r3, r0
 8001c84:	021b      	lsls	r3, r3, #8
 8001c86:	b21c      	sxth	r4, r3
 8001c88:	2038      	movs	r0, #56	; 0x38
 8001c8a:	f7ff ff4f 	bl	8001b2c <read_byte>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	b21b      	sxth	r3, r3
 8001c92:	4323      	orrs	r3, r4
 8001c94:	b21a      	sxth	r2, r3
 8001c96:	4b04      	ldr	r3, [pc, #16]	; (8001ca8 <read_gyro_data+0x6c>)
 8001c98:	801a      	strh	r2, [r3, #0]
}
 8001c9a:	bf00      	nop
 8001c9c:	bd98      	pop	{r3, r4, r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	20043648 	.word	0x20043648
 8001ca4:	20043646 	.word	0x20043646
 8001ca8:	20043640 	.word	0x20043640

08001cac <_ZN3IMUC1Ev>:

#define PI 3.1415926535

//int16_t mon_zg_;

IMU::IMU() : xa_(0), ya_(0), za_(0), xg_(0), yg_(0), zg_(0), offset_(0)
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	801a      	strh	r2, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	805a      	strh	r2, [r3, #2]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	809a      	strh	r2, [r3, #4]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	80da      	strh	r2, [r3, #6]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	811a      	strh	r2, [r3, #8]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	815a      	strh	r2, [r3, #10]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f04f 0200 	mov.w	r2, #0
 8001cde:	60da      	str	r2, [r3, #12]
{

}
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
	...

08001cf0 <_ZN3IMU4initEv>:

void IMU::init()
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
	uint16_t who_i_am;
	who_i_am = IMU_init();
 8001cf8:	f7ff ff74 	bl	8001be4 <IMU_init>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	81fb      	strh	r3, [r7, #14]
	//printf("who i am: %d\n", who_i_am);

	lcd_clear();
 8001d00:	f7ff f9ce 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001d04:	2100      	movs	r1, #0
 8001d06:	2000      	movs	r0, #0
 8001d08:	f7ff f9da 	bl	80010c0 <lcd_locate>
	lcd_printf("IMUstatus");
 8001d0c:	4809      	ldr	r0, [pc, #36]	; (8001d34 <_ZN3IMU4initEv+0x44>)
 8001d0e:	f7ff fa01 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001d12:	2101      	movs	r1, #1
 8001d14:	2000      	movs	r0, #0
 8001d16:	f7ff f9d3 	bl	80010c0 <lcd_locate>
	lcd_printf("%d", who_i_am);
 8001d1a:	89fb      	ldrh	r3, [r7, #14]
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4806      	ldr	r0, [pc, #24]	; (8001d38 <_ZN3IMU4initEv+0x48>)
 8001d20:	f7ff f9f8 	bl	8001114 <lcd_printf>

	HAL_Delay(500);
 8001d24:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d28:	f007 fbd0 	bl	80094cc <HAL_Delay>

}
 8001d2c:	bf00      	nop
 8001d2e:	3710      	adds	r7, #16
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	0801939c 	.word	0x0801939c
 8001d38:	080193a8 	.word	0x080193a8
 8001d3c:	00000000 	.word	0x00000000

08001d40 <_ZN3IMU12updateValuesEv>:
	if(array_idx >= STORE_NUM) array_idx = 0;

}
*/
void IMU::updateValues()
{
 8001d40:	b5b0      	push	{r4, r5, r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
	read_gyro_data();
 8001d48:	f7ff ff78 	bl	8001c3c <read_gyro_data>
	//read_accel_data();

	//xa_ = xa;
	//ya_ = ya;
	//za_ = za;
	xg_ = xg;
 8001d4c:	4b24      	ldr	r3, [pc, #144]	; (8001de0 <_ZN3IMU12updateValuesEv+0xa0>)
 8001d4e:	881b      	ldrh	r3, [r3, #0]
 8001d50:	b21a      	sxth	r2, r3
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	80da      	strh	r2, [r3, #6]
	yg_ = yg;
 8001d56:	4b23      	ldr	r3, [pc, #140]	; (8001de4 <_ZN3IMU12updateValuesEv+0xa4>)
 8001d58:	881b      	ldrh	r3, [r3, #0]
 8001d5a:	b21a      	sxth	r2, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	811a      	strh	r2, [r3, #8]
	zg_ = zg;
 8001d60:	4b21      	ldr	r3, [pc, #132]	; (8001de8 <_ZN3IMU12updateValuesEv+0xa8>)
 8001d62:	881b      	ldrh	r3, [r3, #0]
 8001d64:	b21a      	sxth	r2, r3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	815a      	strh	r2, [r3, #10]

	static int16_t pre_zg;
	zg_ = ((R_IMU)*(zg_) + (1.0 - (R_IMU))* (pre_zg)); // lowpath filter
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7fe fbef 	bl	8000554 <__aeabi_i2d>
 8001d76:	a316      	add	r3, pc, #88	; (adr r3, 8001dd0 <_ZN3IMU12updateValuesEv+0x90>)
 8001d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d7c:	f7fe fc54 	bl	8000628 <__aeabi_dmul>
 8001d80:	4603      	mov	r3, r0
 8001d82:	460c      	mov	r4, r1
 8001d84:	4625      	mov	r5, r4
 8001d86:	461c      	mov	r4, r3
 8001d88:	4b18      	ldr	r3, [pc, #96]	; (8001dec <_ZN3IMU12updateValuesEv+0xac>)
 8001d8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7fe fbe0 	bl	8000554 <__aeabi_i2d>
 8001d94:	a310      	add	r3, pc, #64	; (adr r3, 8001dd8 <_ZN3IMU12updateValuesEv+0x98>)
 8001d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d9a:	f7fe fc45 	bl	8000628 <__aeabi_dmul>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	460b      	mov	r3, r1
 8001da2:	4620      	mov	r0, r4
 8001da4:	4629      	mov	r1, r5
 8001da6:	f7fe fa89 	bl	80002bc <__adddf3>
 8001daa:	4603      	mov	r3, r0
 8001dac:	460c      	mov	r4, r1
 8001dae:	4618      	mov	r0, r3
 8001db0:	4621      	mov	r1, r4
 8001db2:	f7fe fee9 	bl	8000b88 <__aeabi_d2iz>
 8001db6:	4603      	mov	r3, r0
 8001db8:	b21a      	sxth	r2, r3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	815a      	strh	r2, [r3, #10]

	pre_zg = zg_;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001dc4:	4b09      	ldr	r3, [pc, #36]	; (8001dec <_ZN3IMU12updateValuesEv+0xac>)
 8001dc6:	801a      	strh	r2, [r3, #0]
	zg_ = temp_val[2];
	mon_zg_ = zg_;
	*/


}
 8001dc8:	bf00      	nop
 8001dca:	3708      	adds	r7, #8
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bdb0      	pop	{r4, r5, r7, pc}
 8001dd0:	eb851eb8 	.word	0xeb851eb8
 8001dd4:	3f9eb851 	.word	0x3f9eb851
 8001dd8:	70a3d70a 	.word	0x70a3d70a
 8001ddc:	3fef0a3d 	.word	0x3fef0a3d
 8001de0:	20043648 	.word	0x20043648
 8001de4:	20043646 	.word	0x20043646
 8001de8:	20043640 	.word	0x20043640
 8001dec:	20000210 	.word	0x20000210

08001df0 <_ZN3IMU8getOmegaEv>:

float IMU::getOmega()
{
 8001df0:	b5b0      	push	{r4, r5, r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
	float corrected_zg = float(zg_) - offset_;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001dfe:	ee07 3a90 	vmov	s15, r3
 8001e02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	edd3 7a03 	vldr	s15, [r3, #12]
 8001e0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e10:	edc7 7a03 	vstr	s15, [r7, #12]
	return -(corrected_zg / 16.4) * PI / 180;
 8001e14:	68f8      	ldr	r0, [r7, #12]
 8001e16:	f7fe fbaf 	bl	8000578 <__aeabi_f2d>
 8001e1a:	a316      	add	r3, pc, #88	; (adr r3, 8001e74 <_ZN3IMU8getOmegaEv+0x84>)
 8001e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e20:	f7fe fd2c 	bl	800087c <__aeabi_ddiv>
 8001e24:	4602      	mov	r2, r0
 8001e26:	460b      	mov	r3, r1
 8001e28:	4614      	mov	r4, r2
 8001e2a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001e2e:	a313      	add	r3, pc, #76	; (adr r3, 8001e7c <_ZN3IMU8getOmegaEv+0x8c>)
 8001e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e34:	4620      	mov	r0, r4
 8001e36:	4629      	mov	r1, r5
 8001e38:	f7fe fbf6 	bl	8000628 <__aeabi_dmul>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	460c      	mov	r4, r1
 8001e40:	4618      	mov	r0, r3
 8001e42:	4621      	mov	r1, r4
 8001e44:	f04f 0200 	mov.w	r2, #0
 8001e48:	4b09      	ldr	r3, [pc, #36]	; (8001e70 <_ZN3IMU8getOmegaEv+0x80>)
 8001e4a:	f7fe fd17 	bl	800087c <__aeabi_ddiv>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	460c      	mov	r4, r1
 8001e52:	4618      	mov	r0, r3
 8001e54:	4621      	mov	r1, r4
 8001e56:	f7fe fedf 	bl	8000c18 <__aeabi_d2f>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	ee07 3a90 	vmov	s15, r3
}
 8001e60:	eeb0 0a67 	vmov.f32	s0, s15
 8001e64:	3710      	adds	r7, #16
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bdb0      	pop	{r4, r5, r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	f3af 8000 	nop.w
 8001e70:	40668000 	.word	0x40668000
 8001e74:	66666666 	.word	0x66666666
 8001e78:	40306666 	.word	0x40306666
 8001e7c:	54411744 	.word	0x54411744
 8001e80:	400921fb 	.word	0x400921fb

08001e84 <_ZN3IMU11calibrationEv>:

void IMU::calibration()
{
 8001e84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e86:	b08b      	sub	sp, #44	; 0x2c
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
	float sum;
	for(const auto &v : zg_vals){
		sum += v;
	}

	offset_ = sum / num;
 8001e8c:	466b      	mov	r3, sp
 8001e8e:	461e      	mov	r6, r3
	HAL_Delay(1000);
 8001e90:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e94:	f007 fb1a 	bl	80094cc <HAL_Delay>
	lcd_clear();
 8001e98:	f7ff f902 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001e9c:	2100      	movs	r1, #0
 8001e9e:	2000      	movs	r0, #0
 8001ea0:	f7ff f90e 	bl	80010c0 <lcd_locate>
	lcd_printf("IMU     ");
 8001ea4:	4840      	ldr	r0, [pc, #256]	; (8001fa8 <_ZN3IMU11calibrationEv+0x124>)
 8001ea6:	f7ff f935 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001eaa:	2101      	movs	r1, #1
 8001eac:	2000      	movs	r0, #0
 8001eae:	f7ff f907 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 8001eb2:	483e      	ldr	r0, [pc, #248]	; (8001fac <_ZN3IMU11calibrationEv+0x128>)
 8001eb4:	f7ff f92e 	bl	8001114 <lcd_printf>
	int16_t num = 2000;
 8001eb8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001ebc:	83bb      	strh	r3, [r7, #28]
	float zg_vals[num];
 8001ebe:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001ec2:	1e5d      	subs	r5, r3, #1
 8001ec4:	61bd      	str	r5, [r7, #24]
 8001ec6:	462b      	mov	r3, r5
 8001ec8:	3301      	adds	r3, #1
 8001eca:	4619      	mov	r1, r3
 8001ecc:	f04f 0200 	mov.w	r2, #0
 8001ed0:	f04f 0300 	mov.w	r3, #0
 8001ed4:	f04f 0400 	mov.w	r4, #0
 8001ed8:	0154      	lsls	r4, r2, #5
 8001eda:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001ede:	014b      	lsls	r3, r1, #5
 8001ee0:	462b      	mov	r3, r5
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	f04f 0200 	mov.w	r2, #0
 8001eea:	f04f 0300 	mov.w	r3, #0
 8001eee:	f04f 0400 	mov.w	r4, #0
 8001ef2:	0154      	lsls	r4, r2, #5
 8001ef4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001ef8:	014b      	lsls	r3, r1, #5
 8001efa:	462b      	mov	r3, r5
 8001efc:	3301      	adds	r3, #1
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	3303      	adds	r3, #3
 8001f02:	3307      	adds	r3, #7
 8001f04:	08db      	lsrs	r3, r3, #3
 8001f06:	00db      	lsls	r3, r3, #3
 8001f08:	ebad 0d03 	sub.w	sp, sp, r3
 8001f0c:	466b      	mov	r3, sp
 8001f0e:	3303      	adds	r3, #3
 8001f10:	089b      	lsrs	r3, r3, #2
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	617b      	str	r3, [r7, #20]
	for(uint16_t i = 0; i < num; i++){
 8001f16:	2300      	movs	r3, #0
 8001f18:	83fb      	strh	r3, [r7, #30]
 8001f1a:	8bfa      	ldrh	r2, [r7, #30]
 8001f1c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	da13      	bge.n	8001f4c <_ZN3IMU11calibrationEv+0xc8>
		zg_vals[i] = float(zg_);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001f2a:	8bfb      	ldrh	r3, [r7, #30]
 8001f2c:	ee07 2a90 	vmov	s15, r2
 8001f30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f34:	697a      	ldr	r2, [r7, #20]
 8001f36:	009b      	lsls	r3, r3, #2
 8001f38:	4413      	add	r3, r2
 8001f3a:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(2);
 8001f3e:	2002      	movs	r0, #2
 8001f40:	f007 fac4 	bl	80094cc <HAL_Delay>
	for(uint16_t i = 0; i < num; i++){
 8001f44:	8bfb      	ldrh	r3, [r7, #30]
 8001f46:	3301      	adds	r3, #1
 8001f48:	83fb      	strh	r3, [r7, #30]
 8001f4a:	e7e6      	b.n	8001f1a <_ZN3IMU11calibrationEv+0x96>
	for(const auto &v : zg_vals){
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	627b      	str	r3, [r7, #36]	; 0x24
 8001f50:	697a      	ldr	r2, [r7, #20]
 8001f52:	462b      	mov	r3, r5
 8001f54:	3301      	adds	r3, #1
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	4413      	add	r3, r2
 8001f5a:	613b      	str	r3, [r7, #16]
 8001f5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d00e      	beq.n	8001f82 <_ZN3IMU11calibrationEv+0xfe>
 8001f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f66:	60fb      	str	r3, [r7, #12]
		sum += v;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	edd3 7a00 	vldr	s15, [r3]
 8001f6e:	ed97 7a08 	vldr	s14, [r7, #32]
 8001f72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f76:	edc7 7a08 	vstr	s15, [r7, #32]
	for(const auto &v : zg_vals){
 8001f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7c:	3304      	adds	r3, #4
 8001f7e:	627b      	str	r3, [r7, #36]	; 0x24
 8001f80:	e7ec      	b.n	8001f5c <_ZN3IMU11calibrationEv+0xd8>
	offset_ = sum / num;
 8001f82:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001f86:	ee07 3a90 	vmov	s15, r3
 8001f8a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f8e:	edd7 6a08 	vldr	s13, [r7, #32]
 8001f92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	edc3 7a03 	vstr	s15, [r3, #12]
 8001f9c:	46b5      	mov	sp, r6
}
 8001f9e:	bf00      	nop
 8001fa0:	372c      	adds	r7, #44	; 0x2c
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	080193ac 	.word	0x080193ac
 8001fac:	080193b8 	.word	0x080193b8

08001fb0 <INA260_read>:

#include "INA260.h"

//#define SLAVEADRESS1 (0x44<<1)

unsigned short INA260_read(uint8_t pointer_byte, uint8_t slave_adress) {
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b086      	sub	sp, #24
 8001fb4:	af02      	add	r7, sp, #8
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	460a      	mov	r2, r1
 8001fba:	71fb      	strb	r3, [r7, #7]
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	71bb      	strb	r3, [r7, #6]
	uint8_t Rxdata[2];
	unsigned short val;
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, &pointer_byte, 1, 100);
 8001fc0:	79bb      	ldrb	r3, [r7, #6]
 8001fc2:	b299      	uxth	r1, r3
 8001fc4:	1dfa      	adds	r2, r7, #7
 8001fc6:	2364      	movs	r3, #100	; 0x64
 8001fc8:	9300      	str	r3, [sp, #0]
 8001fca:	2301      	movs	r3, #1
 8001fcc:	480c      	ldr	r0, [pc, #48]	; (8002000 <INA260_read+0x50>)
 8001fce:	f008 fe65 	bl	800ac9c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, slave_adress, Rxdata, 2, 100);
 8001fd2:	79bb      	ldrb	r3, [r7, #6]
 8001fd4:	b299      	uxth	r1, r3
 8001fd6:	f107 020c 	add.w	r2, r7, #12
 8001fda:	2364      	movs	r3, #100	; 0x64
 8001fdc:	9300      	str	r3, [sp, #0]
 8001fde:	2302      	movs	r3, #2
 8001fe0:	4807      	ldr	r0, [pc, #28]	; (8002000 <INA260_read+0x50>)
 8001fe2:	f008 ff59 	bl	800ae98 <HAL_I2C_Master_Receive>
	val = ((unsigned short)Rxdata[0] << 8) | (unsigned short)Rxdata[1];
 8001fe6:	7b3b      	ldrb	r3, [r7, #12]
 8001fe8:	021b      	lsls	r3, r3, #8
 8001fea:	b21a      	sxth	r2, r3
 8001fec:	7b7b      	ldrb	r3, [r7, #13]
 8001fee:	b21b      	sxth	r3, r3
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	b21b      	sxth	r3, r3
 8001ff4:	81fb      	strh	r3, [r7, #14]
	return val;
 8001ff6:	89fb      	ldrh	r3, [r7, #14]
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3710      	adds	r7, #16
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	20043860 	.word	0x20043860

08002004 <INA260_write>:

void INA260_write(uint8_t pointer_byte , uint8_t data_msbyte , uint8_t data_lsbyte, uint8_t slave_adress) {
 8002004:	b590      	push	{r4, r7, lr}
 8002006:	b087      	sub	sp, #28
 8002008:	af02      	add	r7, sp, #8
 800200a:	4604      	mov	r4, r0
 800200c:	4608      	mov	r0, r1
 800200e:	4611      	mov	r1, r2
 8002010:	461a      	mov	r2, r3
 8002012:	4623      	mov	r3, r4
 8002014:	71fb      	strb	r3, [r7, #7]
 8002016:	4603      	mov	r3, r0
 8002018:	71bb      	strb	r3, [r7, #6]
 800201a:	460b      	mov	r3, r1
 800201c:	717b      	strb	r3, [r7, #5]
 800201e:	4613      	mov	r3, r2
 8002020:	713b      	strb	r3, [r7, #4]
	uint8_t Txcmd[3] = { pointer_byte , data_msbyte , data_lsbyte };
 8002022:	79fb      	ldrb	r3, [r7, #7]
 8002024:	733b      	strb	r3, [r7, #12]
 8002026:	79bb      	ldrb	r3, [r7, #6]
 8002028:	737b      	strb	r3, [r7, #13]
 800202a:	797b      	ldrb	r3, [r7, #5]
 800202c:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, Txcmd, 3, 100);
 800202e:	793b      	ldrb	r3, [r7, #4]
 8002030:	b299      	uxth	r1, r3
 8002032:	f107 020c 	add.w	r2, r7, #12
 8002036:	2364      	movs	r3, #100	; 0x64
 8002038:	9300      	str	r3, [sp, #0]
 800203a:	2303      	movs	r3, #3
 800203c:	4803      	ldr	r0, [pc, #12]	; (800204c <INA260_write+0x48>)
 800203e:	f008 fe2d 	bl	800ac9c <HAL_I2C_Master_Transmit>
}
 8002042:	bf00      	nop
 8002044:	3714      	adds	r7, #20
 8002046:	46bd      	mov	sp, r7
 8002048:	bd90      	pop	{r4, r7, pc}
 800204a:	bf00      	nop
 800204c:	20043860 	.word	0x20043860

08002050 <setConfig>:

void setConfig(uint8_t msbyte , uint8_t lsbyte, uint8_t slave_adress) {
 8002050:	b580      	push	{r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	4603      	mov	r3, r0
 8002058:	71fb      	strb	r3, [r7, #7]
 800205a:	460b      	mov	r3, r1
 800205c:	71bb      	strb	r3, [r7, #6]
 800205e:	4613      	mov	r3, r2
 8002060:	717b      	strb	r3, [r7, #5]
	INA260_write(0x00 , msbyte , lsbyte, slave_adress);
 8002062:	797b      	ldrb	r3, [r7, #5]
 8002064:	79ba      	ldrb	r2, [r7, #6]
 8002066:	79f9      	ldrb	r1, [r7, #7]
 8002068:	2000      	movs	r0, #0
 800206a:	f7ff ffcb 	bl	8002004 <INA260_write>
}
 800206e:	bf00      	nop
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <INA260_init>:

void INA260_init(uint8_t slave_adress) {
 8002076:	b580      	push	{r7, lr}
 8002078:	b082      	sub	sp, #8
 800207a:	af00      	add	r7, sp, #0
 800207c:	4603      	mov	r3, r0
 800207e:	71fb      	strb	r3, [r7, #7]
	setConfig(0x00,0xDF, slave_adress);//AVG=1,BusVoltageConversionTime=588u,ShuntCurrentConversionTime=588u,mode=BusVoltageContinuous
 8002080:	79fb      	ldrb	r3, [r7, #7]
 8002082:	461a      	mov	r2, r3
 8002084:	21df      	movs	r1, #223	; 0xdf
 8002086:	2000      	movs	r0, #0
 8002088:	f7ff ffe2 	bl	8002050 <setConfig>
}
 800208c:	bf00      	nop
 800208e:	3708      	adds	r7, #8
 8002090:	46bd      	mov	sp, r7
 8002092:	bd80      	pop	{r7, pc}

08002094 <_ZN8JoyStickC1Ev>:
 */

#include "Joystick.hpp"
//#include "stm32f4xx_hal.h"

JoyStick::JoyStick()
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
{

}
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	4618      	mov	r0, r3
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
	...

080020ac <_ZN8JoyStick8getValueEv>:

uint16_t JoyStick::getValue()
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 80020b4:	2300      	movs	r3, #0
 80020b6:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10)) ret_value |= 0x01;
 80020b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020bc:	482a      	ldr	r0, [pc, #168]	; (8002168 <_ZN8JoyStick8getValueEv+0xbc>)
 80020be:	f008 fc83 	bl	800a9c8 <HAL_GPIO_ReadPin>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	bf0c      	ite	eq
 80020c8:	2301      	moveq	r3, #1
 80020ca:	2300      	movne	r3, #0
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d003      	beq.n	80020da <_ZN8JoyStick8getValueEv+0x2e>
 80020d2:	89fb      	ldrh	r3, [r7, #14]
 80020d4:	f043 0301 	orr.w	r3, r3, #1
 80020d8:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_0)) ret_value |= 0x02;
 80020da:	2101      	movs	r1, #1
 80020dc:	4823      	ldr	r0, [pc, #140]	; (800216c <_ZN8JoyStick8getValueEv+0xc0>)
 80020de:	f008 fc73 	bl	800a9c8 <HAL_GPIO_ReadPin>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	bf0c      	ite	eq
 80020e8:	2301      	moveq	r3, #1
 80020ea:	2300      	movne	r3, #0
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d003      	beq.n	80020fa <_ZN8JoyStick8getValueEv+0x4e>
 80020f2:	89fb      	ldrh	r3, [r7, #14]
 80020f4:	f043 0302 	orr.w	r3, r3, #2
 80020f8:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_8)) ret_value |= 0x04;
 80020fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020fe:	481a      	ldr	r0, [pc, #104]	; (8002168 <_ZN8JoyStick8getValueEv+0xbc>)
 8002100:	f008 fc62 	bl	800a9c8 <HAL_GPIO_ReadPin>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	bf0c      	ite	eq
 800210a:	2301      	moveq	r3, #1
 800210c:	2300      	movne	r3, #0
 800210e:	b2db      	uxtb	r3, r3
 8002110:	2b00      	cmp	r3, #0
 8002112:	d003      	beq.n	800211c <_ZN8JoyStick8getValueEv+0x70>
 8002114:	89fb      	ldrh	r3, [r7, #14]
 8002116:	f043 0304 	orr.w	r3, r3, #4
 800211a:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)) ret_value |= 0x08;
 800211c:	2104      	movs	r1, #4
 800211e:	4814      	ldr	r0, [pc, #80]	; (8002170 <_ZN8JoyStick8getValueEv+0xc4>)
 8002120:	f008 fc52 	bl	800a9c8 <HAL_GPIO_ReadPin>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	bf0c      	ite	eq
 800212a:	2301      	moveq	r3, #1
 800212c:	2300      	movne	r3, #0
 800212e:	b2db      	uxtb	r3, r3
 8002130:	2b00      	cmp	r3, #0
 8002132:	d003      	beq.n	800213c <_ZN8JoyStick8getValueEv+0x90>
 8002134:	89fb      	ldrh	r3, [r7, #14]
 8002136:	f043 0308 	orr.w	r3, r3, #8
 800213a:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_7)) ret_value |= 0x10;
 800213c:	2180      	movs	r1, #128	; 0x80
 800213e:	480a      	ldr	r0, [pc, #40]	; (8002168 <_ZN8JoyStick8getValueEv+0xbc>)
 8002140:	f008 fc42 	bl	800a9c8 <HAL_GPIO_ReadPin>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	bf0c      	ite	eq
 800214a:	2301      	moveq	r3, #1
 800214c:	2300      	movne	r3, #0
 800214e:	b2db      	uxtb	r3, r3
 8002150:	2b00      	cmp	r3, #0
 8002152:	d003      	beq.n	800215c <_ZN8JoyStick8getValueEv+0xb0>
 8002154:	89fb      	ldrh	r3, [r7, #14]
 8002156:	f043 0310 	orr.w	r3, r3, #16
 800215a:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 800215c:	89fb      	ldrh	r3, [r7, #14]
}
 800215e:	4618      	mov	r0, r3
 8002160:	3710      	adds	r7, #16
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	40021000 	.word	0x40021000
 800216c:	40020c00 	.word	0x40020c00
 8002170:	40020400 	.word	0x40020400

08002174 <_ZN3LED9fullColorEc>:
 */

#include "LED.hpp"

void LED::fullColor(char color)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	460b      	mov	r3, r1
 800217e:	70fb      	strb	r3, [r7, #3]
	if(color == 'R'){
 8002180:	78fb      	ldrb	r3, [r7, #3]
 8002182:	2b52      	cmp	r3, #82	; 0x52
 8002184:	d112      	bne.n	80021ac <_ZN3LED9fullColorEc+0x38>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002186:	2200      	movs	r2, #0
 8002188:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800218c:	4856      	ldr	r0, [pc, #344]	; (80022e8 <_ZN3LED9fullColorEc+0x174>)
 800218e:	f008 fc33 	bl	800a9f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8002192:	2201      	movs	r2, #1
 8002194:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002198:	4853      	ldr	r0, [pc, #332]	; (80022e8 <_ZN3LED9fullColorEc+0x174>)
 800219a:	f008 fc2d 	bl	800a9f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800219e:	2201      	movs	r2, #1
 80021a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021a4:	4850      	ldr	r0, [pc, #320]	; (80022e8 <_ZN3LED9fullColorEc+0x174>)
 80021a6:	f008 fc27 	bl	800a9f8 <HAL_GPIO_WritePin>
	else if(color == '~'){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
	}
}
 80021aa:	e098      	b.n	80022de <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'G'){
 80021ac:	78fb      	ldrb	r3, [r7, #3]
 80021ae:	2b47      	cmp	r3, #71	; 0x47
 80021b0:	d112      	bne.n	80021d8 <_ZN3LED9fullColorEc+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80021b2:	2201      	movs	r2, #1
 80021b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021b8:	484b      	ldr	r0, [pc, #300]	; (80022e8 <_ZN3LED9fullColorEc+0x174>)
 80021ba:	f008 fc1d 	bl	800a9f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 80021be:	2200      	movs	r2, #0
 80021c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021c4:	4848      	ldr	r0, [pc, #288]	; (80022e8 <_ZN3LED9fullColorEc+0x174>)
 80021c6:	f008 fc17 	bl	800a9f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80021ca:	2201      	movs	r2, #1
 80021cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021d0:	4845      	ldr	r0, [pc, #276]	; (80022e8 <_ZN3LED9fullColorEc+0x174>)
 80021d2:	f008 fc11 	bl	800a9f8 <HAL_GPIO_WritePin>
}
 80021d6:	e082      	b.n	80022de <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'B'){
 80021d8:	78fb      	ldrb	r3, [r7, #3]
 80021da:	2b42      	cmp	r3, #66	; 0x42
 80021dc:	d112      	bne.n	8002204 <_ZN3LED9fullColorEc+0x90>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80021de:	2201      	movs	r2, #1
 80021e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021e4:	4840      	ldr	r0, [pc, #256]	; (80022e8 <_ZN3LED9fullColorEc+0x174>)
 80021e6:	f008 fc07 	bl	800a9f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80021ea:	2201      	movs	r2, #1
 80021ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021f0:	483d      	ldr	r0, [pc, #244]	; (80022e8 <_ZN3LED9fullColorEc+0x174>)
 80021f2:	f008 fc01 	bl	800a9f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80021f6:	2200      	movs	r2, #0
 80021f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021fc:	483a      	ldr	r0, [pc, #232]	; (80022e8 <_ZN3LED9fullColorEc+0x174>)
 80021fe:	f008 fbfb 	bl	800a9f8 <HAL_GPIO_WritePin>
}
 8002202:	e06c      	b.n	80022de <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'C'){
 8002204:	78fb      	ldrb	r3, [r7, #3]
 8002206:	2b43      	cmp	r3, #67	; 0x43
 8002208:	d112      	bne.n	8002230 <_ZN3LED9fullColorEc+0xbc>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800220a:	2201      	movs	r2, #1
 800220c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002210:	4835      	ldr	r0, [pc, #212]	; (80022e8 <_ZN3LED9fullColorEc+0x174>)
 8002212:	f008 fbf1 	bl	800a9f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8002216:	2200      	movs	r2, #0
 8002218:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800221c:	4832      	ldr	r0, [pc, #200]	; (80022e8 <_ZN3LED9fullColorEc+0x174>)
 800221e:	f008 fbeb 	bl	800a9f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8002222:	2200      	movs	r2, #0
 8002224:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002228:	482f      	ldr	r0, [pc, #188]	; (80022e8 <_ZN3LED9fullColorEc+0x174>)
 800222a:	f008 fbe5 	bl	800a9f8 <HAL_GPIO_WritePin>
}
 800222e:	e056      	b.n	80022de <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'M'){
 8002230:	78fb      	ldrb	r3, [r7, #3]
 8002232:	2b4d      	cmp	r3, #77	; 0x4d
 8002234:	d112      	bne.n	800225c <_ZN3LED9fullColorEc+0xe8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002236:	2200      	movs	r2, #0
 8002238:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800223c:	482a      	ldr	r0, [pc, #168]	; (80022e8 <_ZN3LED9fullColorEc+0x174>)
 800223e:	f008 fbdb 	bl	800a9f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8002242:	2201      	movs	r2, #1
 8002244:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002248:	4827      	ldr	r0, [pc, #156]	; (80022e8 <_ZN3LED9fullColorEc+0x174>)
 800224a:	f008 fbd5 	bl	800a9f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800224e:	2200      	movs	r2, #0
 8002250:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002254:	4824      	ldr	r0, [pc, #144]	; (80022e8 <_ZN3LED9fullColorEc+0x174>)
 8002256:	f008 fbcf 	bl	800a9f8 <HAL_GPIO_WritePin>
}
 800225a:	e040      	b.n	80022de <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'Y'){
 800225c:	78fb      	ldrb	r3, [r7, #3]
 800225e:	2b59      	cmp	r3, #89	; 0x59
 8002260:	d112      	bne.n	8002288 <_ZN3LED9fullColorEc+0x114>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002262:	2200      	movs	r2, #0
 8002264:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002268:	481f      	ldr	r0, [pc, #124]	; (80022e8 <_ZN3LED9fullColorEc+0x174>)
 800226a:	f008 fbc5 	bl	800a9f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800226e:	2200      	movs	r2, #0
 8002270:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002274:	481c      	ldr	r0, [pc, #112]	; (80022e8 <_ZN3LED9fullColorEc+0x174>)
 8002276:	f008 fbbf 	bl	800a9f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800227a:	2201      	movs	r2, #1
 800227c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002280:	4819      	ldr	r0, [pc, #100]	; (80022e8 <_ZN3LED9fullColorEc+0x174>)
 8002282:	f008 fbb9 	bl	800a9f8 <HAL_GPIO_WritePin>
}
 8002286:	e02a      	b.n	80022de <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'W'){
 8002288:	78fb      	ldrb	r3, [r7, #3]
 800228a:	2b57      	cmp	r3, #87	; 0x57
 800228c:	d112      	bne.n	80022b4 <_ZN3LED9fullColorEc+0x140>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800228e:	2200      	movs	r2, #0
 8002290:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002294:	4814      	ldr	r0, [pc, #80]	; (80022e8 <_ZN3LED9fullColorEc+0x174>)
 8002296:	f008 fbaf 	bl	800a9f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800229a:	2200      	movs	r2, #0
 800229c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022a0:	4811      	ldr	r0, [pc, #68]	; (80022e8 <_ZN3LED9fullColorEc+0x174>)
 80022a2:	f008 fba9 	bl	800a9f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80022a6:	2200      	movs	r2, #0
 80022a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022ac:	480e      	ldr	r0, [pc, #56]	; (80022e8 <_ZN3LED9fullColorEc+0x174>)
 80022ae:	f008 fba3 	bl	800a9f8 <HAL_GPIO_WritePin>
}
 80022b2:	e014      	b.n	80022de <_ZN3LED9fullColorEc+0x16a>
	else if(color == '~'){
 80022b4:	78fb      	ldrb	r3, [r7, #3]
 80022b6:	2b7e      	cmp	r3, #126	; 0x7e
 80022b8:	d111      	bne.n	80022de <_ZN3LED9fullColorEc+0x16a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80022ba:	2201      	movs	r2, #1
 80022bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022c0:	4809      	ldr	r0, [pc, #36]	; (80022e8 <_ZN3LED9fullColorEc+0x174>)
 80022c2:	f008 fb99 	bl	800a9f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80022c6:	2201      	movs	r2, #1
 80022c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022cc:	4806      	ldr	r0, [pc, #24]	; (80022e8 <_ZN3LED9fullColorEc+0x174>)
 80022ce:	f008 fb93 	bl	800a9f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 80022d2:	2201      	movs	r2, #1
 80022d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022d8:	4803      	ldr	r0, [pc, #12]	; (80022e8 <_ZN3LED9fullColorEc+0x174>)
 80022da:	f008 fb8d 	bl	800a9f8 <HAL_GPIO_WritePin>
}
 80022de:	bf00      	nop
 80022e0:	3708      	adds	r7, #8
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	40020000 	.word	0x40020000

080022ec <_ZN3LED2LREaa>:

void LED::LR(int8_t l_status, int8_t r_status)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	460b      	mov	r3, r1
 80022f6:	70fb      	strb	r3, [r7, #3]
 80022f8:	4613      	mov	r3, r2
 80022fa:	70bb      	strb	r3, [r7, #2]
	if(l_status == 1)
 80022fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002300:	2b01      	cmp	r3, #1
 8002302:	d106      	bne.n	8002312 <_ZN3LED2LREaa+0x26>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8002304:	2201      	movs	r2, #1
 8002306:	f44f 7180 	mov.w	r1, #256	; 0x100
 800230a:	4813      	ldr	r0, [pc, #76]	; (8002358 <_ZN3LED2LREaa+0x6c>)
 800230c:	f008 fb74 	bl	800a9f8 <HAL_GPIO_WritePin>
 8002310:	e009      	b.n	8002326 <_ZN3LED2LREaa+0x3a>
	else if(l_status == 0)
 8002312:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d105      	bne.n	8002326 <_ZN3LED2LREaa+0x3a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800231a:	2200      	movs	r2, #0
 800231c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002320:	480d      	ldr	r0, [pc, #52]	; (8002358 <_ZN3LED2LREaa+0x6c>)
 8002322:	f008 fb69 	bl	800a9f8 <HAL_GPIO_WritePin>

	if(r_status == 1)
 8002326:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800232a:	2b01      	cmp	r3, #1
 800232c:	d106      	bne.n	800233c <_ZN3LED2LREaa+0x50>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 800232e:	2201      	movs	r2, #1
 8002330:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002334:	4808      	ldr	r0, [pc, #32]	; (8002358 <_ZN3LED2LREaa+0x6c>)
 8002336:	f008 fb5f 	bl	800a9f8 <HAL_GPIO_WritePin>
	else if(r_status == 0)
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);

}
 800233a:	e009      	b.n	8002350 <_ZN3LED2LREaa+0x64>
	else if(r_status == 0)
 800233c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d105      	bne.n	8002350 <_ZN3LED2LREaa+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8002344:	2200      	movs	r2, #0
 8002346:	f44f 7100 	mov.w	r1, #512	; 0x200
 800234a:	4803      	ldr	r0, [pc, #12]	; (8002358 <_ZN3LED2LREaa+0x6c>)
 800234c:	f008 fb54 	bl	800a9f8 <HAL_GPIO_WritePin>
}
 8002350:	bf00      	nop
 8002352:	3708      	adds	r7, #8
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	40020000 	.word	0x40020000

0800235c <_ZN10LineSensorC1Ev>:
#include "Macro.h"
#include "AQM0802.h"

float mon_sens, mon_sens_lpf;

LineSensor::LineSensor()
 800235c:	b580      	push	{r7, lr}
 800235e:	b092      	sub	sp, #72	; 0x48
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 800236a:	4618      	mov	r0, r3
 800236c:	f7ff fe92 	bl	8002094 <_ZN8JoyStickC1Ev>
{
	for(auto &av : analog_val_){
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	637b      	str	r3, [r7, #52]	; 0x34
 8002374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002376:	647b      	str	r3, [r7, #68]	; 0x44
 8002378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800237a:	331c      	adds	r3, #28
 800237c:	633b      	str	r3, [r7, #48]	; 0x30
 800237e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002382:	429a      	cmp	r2, r3
 8002384:	d008      	beq.n	8002398 <_ZN10LineSensorC1Ev+0x3c>
 8002386:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002388:	62fb      	str	r3, [r7, #44]	; 0x2c
		av = 0;
 800238a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800238c:	2200      	movs	r2, #0
 800238e:	801a      	strh	r2, [r3, #0]
	for(auto &av : analog_val_){
 8002390:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002392:	3302      	adds	r3, #2
 8002394:	647b      	str	r3, [r7, #68]	; 0x44
 8002396:	e7f2      	b.n	800237e <_ZN10LineSensorC1Ev+0x22>
	}

	for(auto &s : sensor){
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 800239e:	62bb      	str	r3, [r7, #40]	; 0x28
 80023a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023a2:	643b      	str	r3, [r7, #64]	; 0x40
 80023a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023a6:	3338      	adds	r3, #56	; 0x38
 80023a8:	627b      	str	r3, [r7, #36]	; 0x24
 80023aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80023ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d009      	beq.n	80023c6 <_ZN10LineSensorC1Ev+0x6a>
 80023b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023b4:	623b      	str	r3, [r7, #32]
		s = 0;
 80023b6:	6a3b      	ldr	r3, [r7, #32]
 80023b8:	f04f 0200 	mov.w	r2, #0
 80023bc:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor){
 80023be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023c0:	3304      	adds	r3, #4
 80023c2:	643b      	str	r3, [r7, #64]	; 0x40
 80023c4:	e7f1      	b.n	80023aa <_ZN10LineSensorC1Ev+0x4e>
	}

	for(auto &m : offset_values_){
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80023cc:	61fb      	str	r3, [r7, #28]
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	3338      	adds	r3, #56	; 0x38
 80023d6:	61bb      	str	r3, [r7, #24]
 80023d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	429a      	cmp	r2, r3
 80023de:	d009      	beq.n	80023f4 <_ZN10LineSensorC1Ev+0x98>
 80023e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023e2:	617b      	str	r3, [r7, #20]
		m = 0;
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	f04f 0200 	mov.w	r2, #0
 80023ea:	601a      	str	r2, [r3, #0]
	for(auto &m : offset_values_){
 80023ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023ee:	3304      	adds	r3, #4
 80023f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023f2:	e7f1      	b.n	80023d8 <_ZN10LineSensorC1Ev+0x7c>
	}
	for(auto &s : sensor_coefficient_){
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 80023fa:	613b      	str	r3, [r7, #16]
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	3338      	adds	r3, #56	; 0x38
 8002404:	60fb      	str	r3, [r7, #12]
 8002406:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	429a      	cmp	r2, r3
 800240c:	d009      	beq.n	8002422 <_ZN10LineSensorC1Ev+0xc6>
 800240e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002410:	60bb      	str	r3, [r7, #8]
		s = 1;
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002418:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor_coefficient_){
 800241a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800241c:	3304      	adds	r3, #4
 800241e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002420:	e7f1      	b.n	8002406 <_ZN10LineSensorC1Ev+0xaa>
	}

}
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4618      	mov	r0, r3
 8002426:	3748      	adds	r7, #72	; 0x48
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}

0800242c <_ZN10LineSensor8ADCStartEv>:

void LineSensor::ADCStart()
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) analog_val_, 14);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	220e      	movs	r2, #14
 8002438:	4619      	mov	r1, r3
 800243a:	4803      	ldr	r0, [pc, #12]	; (8002448 <_ZN10LineSensor8ADCStartEv+0x1c>)
 800243c:	f007 f8ac 	bl	8009598 <HAL_ADC_Start_DMA>
}
 8002440:	bf00      	nop
 8002442:	3708      	adds	r7, #8
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	20043784 	.word	0x20043784

0800244c <_ZN10LineSensor17storeSensorValuesEv>:

void LineSensor::storeSensorValues()
{
 800244c:	b480      	push	{r7}
 800244e:	b085      	sub	sp, #20
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
	static uint8_t cnt = 0;

	for(int i = 0; i < AD_DATA_SIZE; i++){
 8002454:	2300      	movs	r3, #0
 8002456:	60fb      	str	r3, [r7, #12]
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2b0d      	cmp	r3, #13
 800245c:	dc2f      	bgt.n	80024be <_ZN10LineSensor17storeSensorValuesEv+0x72>
		store_vals_[cnt][i] = sensor_coefficient_[i] * (analog_val_[i] - offset_values_[i]) ;
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	3392      	adds	r3, #146	; 0x92
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	4413      	add	r3, r2
 8002468:	3304      	adds	r3, #4
 800246a:	ed93 7a00 	vldr	s14, [r3]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	68fa      	ldr	r2, [r7, #12]
 8002472:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002476:	ee07 3a90 	vmov	s15, r3
 800247a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	33a0      	adds	r3, #160	; 0xa0
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	4413      	add	r3, r2
 8002488:	3304      	adds	r3, #4
 800248a:	edd3 7a00 	vldr	s15, [r3]
 800248e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002492:	4b14      	ldr	r3, [pc, #80]	; (80024e4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	4619      	mov	r1, r3
 8002498:	ee67 7a27 	vmul.f32	s15, s14, s15
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	460b      	mov	r3, r1
 80024a0:	00db      	lsls	r3, r3, #3
 80024a2:	1a5b      	subs	r3, r3, r1
 80024a4:	005b      	lsls	r3, r3, #1
 80024a6:	68f9      	ldr	r1, [r7, #12]
 80024a8:	440b      	add	r3, r1
 80024aa:	3306      	adds	r3, #6
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	4413      	add	r3, r2
 80024b0:	3304      	adds	r3, #4
 80024b2:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < AD_DATA_SIZE; i++){
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	3301      	adds	r3, #1
 80024ba:	60fb      	str	r3, [r7, #12]
 80024bc:	e7cc      	b.n	8002458 <_ZN10LineSensor17storeSensorValuesEv+0xc>
		//store_vals_[cnt][i] = float(analog_val_[i]) ;
	}

	cnt++;
 80024be:	4b09      	ldr	r3, [pc, #36]	; (80024e4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	3301      	adds	r3, #1
 80024c4:	b2da      	uxtb	r2, r3
 80024c6:	4b07      	ldr	r3, [pc, #28]	; (80024e4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80024c8:	701a      	strb	r2, [r3, #0]
	if(cnt >= 10) cnt = 0;
 80024ca:	4b06      	ldr	r3, [pc, #24]	; (80024e4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	2b09      	cmp	r3, #9
 80024d0:	d902      	bls.n	80024d8 <_ZN10LineSensor17storeSensorValuesEv+0x8c>
 80024d2:	4b04      	ldr	r3, [pc, #16]	; (80024e4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	701a      	strb	r2, [r3, #0]


}
 80024d8:	bf00      	nop
 80024da:	3714      	adds	r7, #20
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr
 80024e4:	2000021c 	.word	0x2000021c

080024e8 <_ZN10LineSensor18updateSensorValuesEv>:
void LineSensor::updateSensorValues()
{
 80024e8:	b5b0      	push	{r4, r5, r7, lr}
 80024ea:	b08e      	sub	sp, #56	; 0x38
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
	float temp_val[10];
	static float pre_sensor[AD_DATA_SIZE];

	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 80024f0:	2300      	movs	r3, #0
 80024f2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80024f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80024fa:	2b0d      	cmp	r3, #13
 80024fc:	f200 80b8 	bhi.w	8002670 <_ZN10LineSensor18updateSensorValuesEv+0x188>
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 8002500:	2300      	movs	r3, #0
 8002502:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002506:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800250a:	2b09      	cmp	r3, #9
 800250c:	d81c      	bhi.n	8002548 <_ZN10LineSensor18updateSensorValuesEv+0x60>
			temp_val[store_cnt] = store_vals_[store_cnt][ad_cnt];
 800250e:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8002512:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 8002516:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	4613      	mov	r3, r2
 800251e:	00db      	lsls	r3, r3, #3
 8002520:	1a9b      	subs	r3, r3, r2
 8002522:	005b      	lsls	r3, r3, #1
 8002524:	4423      	add	r3, r4
 8002526:	3306      	adds	r3, #6
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	4403      	add	r3, r0
 800252c:	3304      	adds	r3, #4
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	008b      	lsls	r3, r1, #2
 8002532:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002536:	440b      	add	r3, r1
 8002538:	3b30      	subs	r3, #48	; 0x30
 800253a:	601a      	str	r2, [r3, #0]
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 800253c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002540:	3301      	adds	r3, #1
 8002542:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002546:	e7de      	b.n	8002506 <_ZN10LineSensor18updateSensorValuesEv+0x1e>
		}

		// sort
		for(uint8_t i = 0; i < 10; i++){
 8002548:	2300      	movs	r3, #0
 800254a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800254e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002552:	2b09      	cmp	r3, #9
 8002554:	d84d      	bhi.n	80025f2 <_ZN10LineSensor18updateSensorValuesEv+0x10a>
			for (uint8_t j = i+1; j < 10; j++) {
 8002556:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800255a:	3301      	adds	r3, #1
 800255c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8002560:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002564:	2b09      	cmp	r3, #9
 8002566:	d83e      	bhi.n	80025e6 <_ZN10LineSensor18updateSensorValuesEv+0xfe>
				if(temp_val[i] < temp_val[j]){
 8002568:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002572:	4413      	add	r3, r2
 8002574:	3b30      	subs	r3, #48	; 0x30
 8002576:	ed93 7a00 	vldr	s14, [r3]
 800257a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002584:	4413      	add	r3, r2
 8002586:	3b30      	subs	r3, #48	; 0x30
 8002588:	edd3 7a00 	vldr	s15, [r3]
 800258c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002594:	d521      	bpl.n	80025da <_ZN10LineSensor18updateSensorValuesEv+0xf2>
					float tmp = temp_val[j];
 8002596:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80025a0:	4413      	add	r3, r2
 80025a2:	3b30      	subs	r3, #48	; 0x30
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	633b      	str	r3, [r7, #48]	; 0x30
					temp_val[j] = temp_val[i];
 80025a8:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80025ac:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80025b0:	0092      	lsls	r2, r2, #2
 80025b2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80025b6:	440a      	add	r2, r1
 80025b8:	3a30      	subs	r2, #48	; 0x30
 80025ba:	6812      	ldr	r2, [r2, #0]
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80025c2:	440b      	add	r3, r1
 80025c4:	3b30      	subs	r3, #48	; 0x30
 80025c6:	601a      	str	r2, [r3, #0]
					temp_val[i] = tmp;
 80025c8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80025d2:	4413      	add	r3, r2
 80025d4:	3b30      	subs	r3, #48	; 0x30
 80025d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025d8:	601a      	str	r2, [r3, #0]
			for (uint8_t j = i+1; j < 10; j++) {
 80025da:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80025de:	3301      	adds	r3, #1
 80025e0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80025e4:	e7bc      	b.n	8002560 <_ZN10LineSensor18updateSensorValuesEv+0x78>
		for(uint8_t i = 0; i < 10; i++){
 80025e6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80025ea:	3301      	adds	r3, #1
 80025ec:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80025f0:	e7ad      	b.n	800254e <_ZN10LineSensor18updateSensorValuesEv+0x66>
				}
			}
		}

		sensor[ad_cnt] = ((R_LINESENSE)*(temp_val[5]) + (1.0 - (R_LINESENSE))* (pre_sensor[ad_cnt]));
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7fd ffbf 	bl	8000578 <__aeabi_f2d>
 80025fa:	a32a      	add	r3, pc, #168	; (adr r3, 80026a4 <_ZN10LineSensor18updateSensorValuesEv+0x1bc>)
 80025fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002600:	f7fe f812 	bl	8000628 <__aeabi_dmul>
 8002604:	4603      	mov	r3, r0
 8002606:	460c      	mov	r4, r1
 8002608:	4625      	mov	r5, r4
 800260a:	461c      	mov	r4, r3
 800260c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002610:	4a21      	ldr	r2, [pc, #132]	; (8002698 <_ZN10LineSensor18updateSensorValuesEv+0x1b0>)
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	4413      	add	r3, r2
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4618      	mov	r0, r3
 800261a:	f7fd ffad 	bl	8000578 <__aeabi_f2d>
 800261e:	a31c      	add	r3, pc, #112	; (adr r3, 8002690 <_ZN10LineSensor18updateSensorValuesEv+0x1a8>)
 8002620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002624:	f7fe f800 	bl	8000628 <__aeabi_dmul>
 8002628:	4602      	mov	r2, r0
 800262a:	460b      	mov	r3, r1
 800262c:	4620      	mov	r0, r4
 800262e:	4629      	mov	r1, r5
 8002630:	f7fd fe44 	bl	80002bc <__adddf3>
 8002634:	4603      	mov	r3, r0
 8002636:	460c      	mov	r4, r1
 8002638:	461a      	mov	r2, r3
 800263a:	4623      	mov	r3, r4
 800263c:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 8002640:	4610      	mov	r0, r2
 8002642:	4619      	mov	r1, r3
 8002644:	f7fe fae8 	bl	8000c18 <__aeabi_d2f>
 8002648:	4601      	mov	r1, r0
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	f104 03b0 	add.w	r3, r4, #176	; 0xb0
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	4413      	add	r3, r2
 8002654:	6019      	str	r1, [r3, #0]
		pre_sensor[ad_cnt] = temp_val[5];
 8002656:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800265a:	69fa      	ldr	r2, [r7, #28]
 800265c:	490e      	ldr	r1, [pc, #56]	; (8002698 <_ZN10LineSensor18updateSensorValuesEv+0x1b0>)
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	440b      	add	r3, r1
 8002662:	601a      	str	r2, [r3, #0]
	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 8002664:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002668:	3301      	adds	r3, #1
 800266a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800266e:	e742      	b.n	80024f6 <_ZN10LineSensor18updateSensorValuesEv+0xe>
	}

	mon_sens = store_vals_[5][5];
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002676:	4a09      	ldr	r2, [pc, #36]	; (800269c <_ZN10LineSensor18updateSensorValuesEv+0x1b4>)
 8002678:	6013      	str	r3, [r2, #0]
	mon_sens_lpf = sensor[5];
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8002680:	4a07      	ldr	r2, [pc, #28]	; (80026a0 <_ZN10LineSensor18updateSensorValuesEv+0x1b8>)
 8002682:	6013      	str	r3, [r2, #0]
}
 8002684:	bf00      	nop
 8002686:	3738      	adds	r7, #56	; 0x38
 8002688:	46bd      	mov	sp, r7
 800268a:	bdb0      	pop	{r4, r5, r7, pc}
 800268c:	f3af 8000 	nop.w
 8002690:	66666666 	.word	0x66666666
 8002694:	3fee6666 	.word	0x3fee6666
 8002698:	20000220 	.word	0x20000220
 800269c:	20000214 	.word	0x20000214
 80026a0:	20000218 	.word	0x20000218
 80026a4:	9999999a 	.word	0x9999999a
 80026a8:	3fa99999 	.word	0x3fa99999

080026ac <_ZN10LineSensor11calibrationEv>:

void LineSensor::calibration()
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b0a0      	sub	sp, #128	; 0x80
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
	HAL_Delay(100);
 80026b4:	2064      	movs	r0, #100	; 0x64
 80026b6:	f006 ff09 	bl	80094cc <HAL_Delay>

	lcd_clear();
 80026ba:	f7fe fcf1 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 80026be:	2100      	movs	r1, #0
 80026c0:	2000      	movs	r0, #0
 80026c2:	f7fe fcfd 	bl	80010c0 <lcd_locate>
	lcd_printf("LineSens");
 80026c6:	4886      	ldr	r0, [pc, #536]	; (80028e0 <_ZN10LineSensor11calibrationEv+0x234>)
 80026c8:	f7fe fd24 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 80026cc:	2101      	movs	r1, #1
 80026ce:	2000      	movs	r0, #0
 80026d0:	f7fe fcf6 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 80026d4:	4883      	ldr	r0, [pc, #524]	; (80028e4 <_ZN10LineSensor11calibrationEv+0x238>)
 80026d6:	f7fe fd1d 	bl	8001114 <lcd_printf>


	float max_values[AD_DATA_SIZE];
	float min_values[AD_DATA_SIZE];

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80026da:	2300      	movs	r3, #0
 80026dc:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 80026e0:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80026e4:	2b0d      	cmp	r3, #13
 80026e6:	d823      	bhi.n	8002730 <_ZN10LineSensor11calibrationEv+0x84>
		max_values[i] = sensor[i];
 80026e8:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 80026ec:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80026f0:	6879      	ldr	r1, [r7, #4]
 80026f2:	32b0      	adds	r2, #176	; 0xb0
 80026f4:	0092      	lsls	r2, r2, #2
 80026f6:	440a      	add	r2, r1
 80026f8:	6812      	ldr	r2, [r2, #0]
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002700:	440b      	add	r3, r1
 8002702:	3b40      	subs	r3, #64	; 0x40
 8002704:	601a      	str	r2, [r3, #0]
		min_values[i] = sensor[i];
 8002706:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 800270a:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800270e:	6879      	ldr	r1, [r7, #4]
 8002710:	32b0      	adds	r2, #176	; 0xb0
 8002712:	0092      	lsls	r2, r2, #2
 8002714:	440a      	add	r2, r1
 8002716:	6812      	ldr	r2, [r2, #0]
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800271e:	440b      	add	r3, r1
 8002720:	3b78      	subs	r3, #120	; 0x78
 8002722:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002724:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002728:	3301      	adds	r3, #1
 800272a:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 800272e:	e7d7      	b.n	80026e0 <_ZN10LineSensor11calibrationEv+0x34>
	}

	while(joy_stick_.getValue() != JOY_C){
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 8002736:	4618      	mov	r0, r3
 8002738:	f7ff fcb8 	bl	80020ac <_ZN8JoyStick8getValueEv>
 800273c:	4603      	mov	r3, r0
 800273e:	2b02      	cmp	r3, #2
 8002740:	bf14      	ite	ne
 8002742:	2301      	movne	r3, #1
 8002744:	2300      	moveq	r3, #0
 8002746:	b2db      	uxtb	r3, r3
 8002748:	2b00      	cmp	r3, #0
 800274a:	d079      	beq.n	8002840 <_ZN10LineSensor11calibrationEv+0x194>

		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800274c:	2300      	movs	r3, #0
 800274e:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8002752:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002756:	2b0d      	cmp	r3, #13
 8002758:	d850      	bhi.n	80027fc <_ZN10LineSensor11calibrationEv+0x150>
			if(max_values[i] < sensor[i]){
 800275a:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002764:	4413      	add	r3, r2
 8002766:	3b40      	subs	r3, #64	; 0x40
 8002768:	ed93 7a00 	vldr	s14, [r3]
 800276c:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	33b0      	adds	r3, #176	; 0xb0
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	4413      	add	r3, r2
 8002778:	edd3 7a00 	vldr	s15, [r3]
 800277c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002784:	d50f      	bpl.n	80027a6 <_ZN10LineSensor11calibrationEv+0xfa>
				max_values[i] = sensor[i];
 8002786:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 800278a:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800278e:	6879      	ldr	r1, [r7, #4]
 8002790:	32b0      	adds	r2, #176	; 0xb0
 8002792:	0092      	lsls	r2, r2, #2
 8002794:	440a      	add	r2, r1
 8002796:	6812      	ldr	r2, [r2, #0]
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800279e:	440b      	add	r3, r1
 80027a0:	3b40      	subs	r3, #64	; 0x40
 80027a2:	601a      	str	r2, [r3, #0]
 80027a4:	e024      	b.n	80027f0 <_ZN10LineSensor11calibrationEv+0x144>
			}
			else if(min_values[i] > sensor[i]){
 80027a6:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80027b0:	4413      	add	r3, r2
 80027b2:	3b78      	subs	r3, #120	; 0x78
 80027b4:	ed93 7a00 	vldr	s14, [r3]
 80027b8:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	33b0      	adds	r3, #176	; 0xb0
 80027c0:	009b      	lsls	r3, r3, #2
 80027c2:	4413      	add	r3, r2
 80027c4:	edd3 7a00 	vldr	s15, [r3]
 80027c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027d0:	dd0e      	ble.n	80027f0 <_ZN10LineSensor11calibrationEv+0x144>
				min_values[i] = sensor[i];
 80027d2:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 80027d6:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80027da:	6879      	ldr	r1, [r7, #4]
 80027dc:	32b0      	adds	r2, #176	; 0xb0
 80027de:	0092      	lsls	r2, r2, #2
 80027e0:	440a      	add	r2, r1
 80027e2:	6812      	ldr	r2, [r2, #0]
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80027ea:	440b      	add	r3, r1
 80027ec:	3b78      	subs	r3, #120	; 0x78
 80027ee:	601a      	str	r2, [r3, #0]
		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80027f0:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80027f4:	3301      	adds	r3, #1
 80027f6:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 80027fa:	e7aa      	b.n	8002752 <_ZN10LineSensor11calibrationEv+0xa6>
			}
		}

		if(rotary_switch_.getValue() == 0){
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f203 23be 	addw	r3, r3, #702	; 0x2be
 8002802:	4618      	mov	r0, r3
 8002804:	f002 fd2e 	bl	8005264 <_ZN12RotarySwitch8getValueEv>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	bf0c      	ite	eq
 800280e:	2301      	moveq	r3, #1
 8002810:	2300      	movne	r3, #0
 8002812:	b2db      	uxtb	r3, r3
 8002814:	2b00      	cmp	r3, #0
 8002816:	d009      	beq.n	800282c <_ZN10LineSensor11calibrationEv+0x180>
			led_.LR(-1, 1);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 800281e:	2201      	movs	r2, #1
 8002820:	f04f 31ff 	mov.w	r1, #4294967295
 8002824:	4618      	mov	r0, r3
 8002826:	f7ff fd61 	bl	80022ec <_ZN3LED2LREaa>
 800282a:	e781      	b.n	8002730 <_ZN10LineSensor11calibrationEv+0x84>

		}
		else{
			led_.LR(-1, 0);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8002832:	2200      	movs	r2, #0
 8002834:	f04f 31ff 	mov.w	r1, #4294967295
 8002838:	4618      	mov	r0, r3
 800283a:	f7ff fd57 	bl	80022ec <_ZN3LED2LREaa>
	while(joy_stick_.getValue() != JOY_C){
 800283e:	e777      	b.n	8002730 <_ZN10LineSensor11calibrationEv+0x84>
		printf("%f, ", m);
	}
		printf("\n");
	*/

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002840:	2300      	movs	r3, #0
 8002842:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8002846:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800284a:	2b0d      	cmp	r3, #13
 800284c:	d826      	bhi.n	800289c <_ZN10LineSensor11calibrationEv+0x1f0>
		sensor_coefficient_[i] = 1000 / (max_values[i] - min_values[i]);
 800284e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002858:	4413      	add	r3, r2
 800285a:	3b40      	subs	r3, #64	; 0x40
 800285c:	ed93 7a00 	vldr	s14, [r3]
 8002860:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800286a:	4413      	add	r3, r2
 800286c:	3b78      	subs	r3, #120	; 0x78
 800286e:	edd3 7a00 	vldr	s15, [r3]
 8002872:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002876:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800287a:	eddf 6a1b 	vldr	s13, [pc, #108]	; 80028e8 <_ZN10LineSensor11calibrationEv+0x23c>
 800287e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	3392      	adds	r3, #146	; 0x92
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	4413      	add	r3, r2
 800288a:	3304      	adds	r3, #4
 800288c:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002890:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002894:	3301      	adds	r3, #1
 8002896:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 800289a:	e7d4      	b.n	8002846 <_ZN10LineSensor11calibrationEv+0x19a>
	}
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800289c:	2300      	movs	r3, #0
 800289e:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 80028a2:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80028a6:	2b0d      	cmp	r3, #13
 80028a8:	d815      	bhi.n	80028d6 <_ZN10LineSensor11calibrationEv+0x22a>
		offset_values_[i] = min_values[i];
 80028aa:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 80028ae:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80028b2:	0092      	lsls	r2, r2, #2
 80028b4:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80028b8:	440a      	add	r2, r1
 80028ba:	3a78      	subs	r2, #120	; 0x78
 80028bc:	6812      	ldr	r2, [r2, #0]
 80028be:	6879      	ldr	r1, [r7, #4]
 80028c0:	33a0      	adds	r3, #160	; 0xa0
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	440b      	add	r3, r1
 80028c6:	3304      	adds	r3, #4
 80028c8:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80028ca:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80028ce:	3301      	adds	r3, #1
 80028d0:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 80028d4:	e7e5      	b.n	80028a2 <_ZN10LineSensor11calibrationEv+0x1f6>
	}


}
 80028d6:	bf00      	nop
 80028d8:	3780      	adds	r7, #128	; 0x80
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	080193c4 	.word	0x080193c4
 80028e4:	080193d0 	.word	0x080193d0
 80028e8:	447a0000 	.word	0x447a0000

080028ec <_ZN10LineSensor13emergencyStopEv>:
{
	printf("%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n", sensor[0], sensor[1], sensor[2], sensor[3], sensor[4], sensor[5], sensor[6], sensor[7], sensor[8], sensor[9], sensor[10], sensor[11], sensor[12], sensor[13]);
}

bool LineSensor::emergencyStop()
{
 80028ec:	b480      	push	{r7}
 80028ee:	b089      	sub	sp, #36	; 0x24
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
	uint16_t out_cnt = 0;
 80028f4:	2300      	movs	r3, #0
 80028f6:	83fb      	strh	r3, [r7, #30]
	static uint16_t cnt = 0;
	static bool flag = false;

	for(const auto & s : sensor){
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 80028fe:	617b      	str	r3, [r7, #20]
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	61bb      	str	r3, [r7, #24]
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	3338      	adds	r3, #56	; 0x38
 8002908:	613b      	str	r3, [r7, #16]
 800290a:	69ba      	ldr	r2, [r7, #24]
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	429a      	cmp	r2, r3
 8002910:	d012      	beq.n	8002938 <_ZN10LineSensor13emergencyStopEv+0x4c>
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	60fb      	str	r3, [r7, #12]
		if(s >= 550) out_cnt++;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	edd3 7a00 	vldr	s15, [r3]
 800291c:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 800298c <_ZN10LineSensor13emergencyStopEv+0xa0>
 8002920:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002928:	db02      	blt.n	8002930 <_ZN10LineSensor13emergencyStopEv+0x44>
 800292a:	8bfb      	ldrh	r3, [r7, #30]
 800292c:	3301      	adds	r3, #1
 800292e:	83fb      	strh	r3, [r7, #30]
	for(const auto & s : sensor){
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	3304      	adds	r3, #4
 8002934:	61bb      	str	r3, [r7, #24]
 8002936:	e7e8      	b.n	800290a <_ZN10LineSensor13emergencyStopEv+0x1e>
	}

	if(out_cnt >= AD_DATA_SIZE){
 8002938:	8bfb      	ldrh	r3, [r7, #30]
 800293a:	2b0d      	cmp	r3, #13
 800293c:	d906      	bls.n	800294c <_ZN10LineSensor13emergencyStopEv+0x60>
		cnt++;
 800293e:	4b14      	ldr	r3, [pc, #80]	; (8002990 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 8002940:	881b      	ldrh	r3, [r3, #0]
 8002942:	3301      	adds	r3, #1
 8002944:	b29a      	uxth	r2, r3
 8002946:	4b12      	ldr	r3, [pc, #72]	; (8002990 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 8002948:	801a      	strh	r2, [r3, #0]
 800294a:	e002      	b.n	8002952 <_ZN10LineSensor13emergencyStopEv+0x66>
	}
	else{
		cnt = 0;
 800294c:	4b10      	ldr	r3, [pc, #64]	; (8002990 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 800294e:	2200      	movs	r2, #0
 8002950:	801a      	strh	r2, [r3, #0]
	}

	if(cnt >= 50){
 8002952:	4b0f      	ldr	r3, [pc, #60]	; (8002990 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 8002954:	881b      	ldrh	r3, [r3, #0]
 8002956:	2b31      	cmp	r3, #49	; 0x31
 8002958:	d903      	bls.n	8002962 <_ZN10LineSensor13emergencyStopEv+0x76>
		flag = true;
 800295a:	4b0e      	ldr	r3, [pc, #56]	; (8002994 <_ZN10LineSensor13emergencyStopEv+0xa8>)
 800295c:	2201      	movs	r2, #1
 800295e:	701a      	strb	r2, [r3, #0]
 8002960:	e002      	b.n	8002968 <_ZN10LineSensor13emergencyStopEv+0x7c>
	}
	else flag = false;
 8002962:	4b0c      	ldr	r3, [pc, #48]	; (8002994 <_ZN10LineSensor13emergencyStopEv+0xa8>)
 8002964:	2200      	movs	r2, #0
 8002966:	701a      	strb	r2, [r3, #0]

	if(cnt >= 10000) cnt = 10000;
 8002968:	4b09      	ldr	r3, [pc, #36]	; (8002990 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 800296a:	881b      	ldrh	r3, [r3, #0]
 800296c:	f242 720f 	movw	r2, #9999	; 0x270f
 8002970:	4293      	cmp	r3, r2
 8002972:	d903      	bls.n	800297c <_ZN10LineSensor13emergencyStopEv+0x90>
 8002974:	4b06      	ldr	r3, [pc, #24]	; (8002990 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 8002976:	f242 7210 	movw	r2, #10000	; 0x2710
 800297a:	801a      	strh	r2, [r3, #0]

	return flag;
 800297c:	4b05      	ldr	r3, [pc, #20]	; (8002994 <_ZN10LineSensor13emergencyStopEv+0xa8>)
 800297e:	781b      	ldrb	r3, [r3, #0]

}
 8002980:	4618      	mov	r0, r3
 8002982:	3724      	adds	r7, #36	; 0x24
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr
 800298c:	44098000 	.word	0x44098000
 8002990:	20000258 	.word	0x20000258
 8002994:	2000025a 	.word	0x2000025a

08002998 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	ed87 0a01 	vstr	s0, [r7, #4]
 80029a2:	edd7 7a01 	vldr	s15, [r7, #4]
 80029a6:	eef0 7ae7 	vabs.f32	s15, s15
 80029aa:	eeb0 0a67 	vmov.f32	s0, s15
 80029ae:	370c      	adds	r7, #12
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr

080029b8 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC>:
float mon_ref_dis, mon_current_dis;
uint16_t mon_vel_idx, mon_i;
float mon_tar_vel;


LineTrace::LineTrace(Motor *motor, LineSensor *line_sensor, VelocityCtrl *velocity_ctrl, SideSensor *side_sensor, Encoder *encoder, Odometry *odometry, Logger *logger, IMU *imu, ESC *esc) :
 80029b8:	b480      	push	{r7}
 80029ba:	b087      	sub	sp, #28
 80029bc:	af00      	add	r7, sp, #0
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	60b9      	str	r1, [r7, #8]
 80029c2:	607a      	str	r2, [r7, #4]
 80029c4:	603b      	str	r3, [r7, #0]
				kp_(0), kd_(0), ki_(0),
				excution_flag_(false), i_reset_flag_(false), normal_ratio_(0),
				target_velocity_(0), max_velocity_(0), max_velocity2_(0), min_velocity_(0), min_velocity2_(0), logging_flag_(false),
				ref_distance_(0), velocity_play_flag_(false), velocity_table_idx_(0), mode_selector_(0), crossline_idx_(0), sideline_idx_(0), all_sideline_idx_(0),
				ignore_crossline_flag_(false), stable_flag_(false), stable_cnt_reset_flag_(false), max_acc_(0), max_dec_(0), max_acc2_(0), max_dec2_(0), correction_check_cnt_(0), all_sideline_flag_(false)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	f04f 0200 	mov.w	r2, #0
 80029cc:	629a      	str	r2, [r3, #40]	; 0x28
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f04f 0200 	mov.w	r2, #0
 80029d4:	62da      	str	r2, [r3, #44]	; 0x2c
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	f04f 0200 	mov.w	r2, #0
 80029dc:	631a      	str	r2, [r3, #48]	; 0x30
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2200      	movs	r2, #0
 80029e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2200      	movs	r2, #0
 80029ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	f04f 0200 	mov.w	r2, #0
 80029f4:	639a      	str	r2, [r3, #56]	; 0x38
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	f04f 0200 	mov.w	r2, #0
 80029fc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f04f 0200 	mov.w	r2, #0
 8002a06:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	f04f 0200 	mov.w	r2, #0
 8002a10:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f04f 0200 	mov.w	r2, #0
 8002a1a:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	f04f 0200 	mov.w	r2, #0
 8002a24:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8002a36:	f04f 0200 	mov.w	r2, #0
 8002a3a:	601a      	str	r2, [r3, #0]
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002a42:	3344      	adds	r3, #68	; 0x44
 8002a44:	2200      	movs	r2, #0
 8002a46:	701a      	strb	r2, [r3, #0]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002a4e:	3346      	adds	r3, #70	; 0x46
 8002a50:	2200      	movs	r2, #0
 8002a52:	801a      	strh	r2, [r3, #0]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002a5a:	3348      	adds	r3, #72	; 0x48
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	801a      	strh	r2, [r3, #0]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002a66:	331c      	adds	r3, #28
 8002a68:	2200      	movs	r2, #0
 8002a6a:	801a      	strh	r2, [r3, #0]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002a72:	331e      	adds	r3, #30
 8002a74:	2200      	movs	r2, #0
 8002a76:	801a      	strh	r2, [r3, #0]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002a7e:	3320      	adds	r3, #32
 8002a80:	2200      	movs	r2, #0
 8002a82:	801a      	strh	r2, [r3, #0]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002a8a:	3322      	adds	r3, #34	; 0x22
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	701a      	strb	r2, [r3, #0]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002a96:	3323      	adds	r3, #35	; 0x23
 8002a98:	2200      	movs	r2, #0
 8002a9a:	701a      	strb	r2, [r3, #0]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002aa2:	3324      	adds	r3, #36	; 0x24
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	701a      	strb	r2, [r3, #0]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002aae:	3328      	adds	r3, #40	; 0x28
 8002ab0:	f04f 0200 	mov.w	r2, #0
 8002ab4:	601a      	str	r2, [r3, #0]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002abc:	332c      	adds	r3, #44	; 0x2c
 8002abe:	f04f 0200 	mov.w	r2, #0
 8002ac2:	601a      	str	r2, [r3, #0]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002aca:	3330      	adds	r3, #48	; 0x30
 8002acc:	f04f 0200 	mov.w	r2, #0
 8002ad0:	601a      	str	r2, [r3, #0]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002ad8:	3334      	adds	r3, #52	; 0x34
 8002ada:	f04f 0200 	mov.w	r2, #0
 8002ade:	601a      	str	r2, [r3, #0]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002ae6:	3338      	adds	r3, #56	; 0x38
 8002ae8:	2200      	movs	r2, #0
 8002aea:	801a      	strh	r2, [r3, #0]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002af2:	333a      	adds	r3, #58	; 0x3a
 8002af4:	2200      	movs	r2, #0
 8002af6:	701a      	strb	r2, [r3, #0]

{
	motor_ = motor;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	68ba      	ldr	r2, [r7, #8]
 8002afc:	601a      	str	r2, [r3, #0]
	line_sensor_ = line_sensor;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	683a      	ldr	r2, [r7, #0]
 8002b08:	609a      	str	r2, [r3, #8]
	side_sensor_ = side_sensor;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6a3a      	ldr	r2, [r7, #32]
 8002b0e:	611a      	str	r2, [r3, #16]
	encoder_ = encoder;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b14:	615a      	str	r2, [r3, #20]
	odometry_ = odometry;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b1a:	619a      	str	r2, [r3, #24]
	logger_ = logger;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b20:	61da      	str	r2, [r3, #28]
	imu_ = imu;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b26:	621a      	str	r2, [r3, #32]
	esc_ = esc;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b2c:	625a      	str	r2, [r3, #36]	; 0x24

	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002b2e:	2300      	movs	r3, #0
 8002b30:	82fb      	strh	r3, [r7, #22]
 8002b32:	8afb      	ldrh	r3, [r7, #22]
 8002b34:	f241 726f 	movw	r2, #5999	; 0x176f
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d80d      	bhi.n	8002b58 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1a0>
		velocity_table_[i] = 0;
 8002b3c:	8afb      	ldrh	r3, [r7, #22]
 8002b3e:	68fa      	ldr	r2, [r7, #12]
 8002b40:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	4413      	add	r3, r2
 8002b48:	3304      	adds	r3, #4
 8002b4a:	f04f 0200 	mov.w	r2, #0
 8002b4e:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002b50:	8afb      	ldrh	r3, [r7, #22]
 8002b52:	3301      	adds	r3, #1
 8002b54:	82fb      	strh	r3, [r7, #22]
 8002b56:	e7ec      	b.n	8002b32 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x17a>
	}
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002b58:	2300      	movs	r3, #0
 8002b5a:	82bb      	strh	r3, [r7, #20]
 8002b5c:	8abb      	ldrh	r3, [r7, #20]
 8002b5e:	2b63      	cmp	r3, #99	; 0x63
 8002b60:	d80e      	bhi.n	8002b80 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1c8>
		crossline_distance_[i] = 0;
 8002b62:	8abb      	ldrh	r3, [r7, #20]
 8002b64:	68fa      	ldr	r2, [r7, #12]
 8002b66:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8002b6a:	3312      	adds	r3, #18
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	4413      	add	r3, r2
 8002b70:	3304      	adds	r3, #4
 8002b72:	f04f 0200 	mov.w	r2, #0
 8002b76:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002b78:	8abb      	ldrh	r3, [r7, #20]
 8002b7a:	3301      	adds	r3, #1
 8002b7c:	82bb      	strh	r3, [r7, #20]
 8002b7e:	e7ed      	b.n	8002b5c <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1a4>
	}
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002b80:	2300      	movs	r3, #0
 8002b82:	827b      	strh	r3, [r7, #18]
 8002b84:	8a7b      	ldrh	r3, [r7, #18]
 8002b86:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002b8a:	d20e      	bcs.n	8002baa <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1f2>
		sideline_distance_[i] = 0;
 8002b8c:	8a7b      	ldrh	r3, [r7, #18]
 8002b8e:	68fa      	ldr	r2, [r7, #12]
 8002b90:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 8002b94:	3336      	adds	r3, #54	; 0x36
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	4413      	add	r3, r2
 8002b9a:	3304      	adds	r3, #4
 8002b9c:	f04f 0200 	mov.w	r2, #0
 8002ba0:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002ba2:	8a7b      	ldrh	r3, [r7, #18]
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	827b      	strh	r3, [r7, #18]
 8002ba8:	e7ec      	b.n	8002b84 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1cc>
	}
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002baa:	2300      	movs	r3, #0
 8002bac:	823b      	strh	r3, [r7, #16]
 8002bae:	8a3b      	ldrh	r3, [r7, #16]
 8002bb0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002bb4:	d20e      	bcs.n	8002bd4 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x21c>
		all_sideline_distance_[i] = 0;
 8002bb6:	8a3b      	ldrh	r3, [r7, #16]
 8002bb8:	68fa      	ldr	r2, [r7, #12]
 8002bba:	f503 534d 	add.w	r3, r3, #13120	; 0x3340
 8002bbe:	331e      	adds	r3, #30
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	4413      	add	r3, r2
 8002bc4:	3304      	adds	r3, #4
 8002bc6:	f04f 0200 	mov.w	r2, #0
 8002bca:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002bcc:	8a3b      	ldrh	r3, [r7, #16]
 8002bce:	3301      	adds	r3, #1
 8002bd0:	823b      	strh	r3, [r7, #16]
 8002bd2:	e7ec      	b.n	8002bae <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1f6>
	}
}
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	371c      	adds	r7, #28
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
 8002be2:	0000      	movs	r0, r0
 8002be4:	0000      	movs	r0, r0
	...

08002be8 <_ZN9LineTrace9calcErrorEv>:

// ---------------------------------------------------------------------------------------------------//
// -------------------------------------Sensor angle based line following --------------------------//
// ---------------------------------------------------------------------------------------------------//
float LineTrace::calcError()
{
 8002be8:	b5b0      	push	{r4, r5, r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
	static float pre_diff;
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	ed93 7ab0 	vldr	s14, [r3, #704]	; 0x2c0
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8002c00:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 8002c0c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	edd3 7ab3 	vldr	s15, [r3, #716]	; 0x2cc
 8002c18:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 8002c24:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	edd3 7ab5 	vldr	s15, [r3, #724]	; 0x2d4
 8002c30:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	edd3 7ab6 	vldr	s15, [r3, #728]	; 0x2d8
 8002c3c:	ee37 7a27 	vadd.f32	s14, s14, s15
			- (line_sensor_->sensor[7] + line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10] + line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	edd3 6ab7 	vldr	s13, [r3, #732]	; 0x2dc
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	edd3 7ab8 	vldr	s15, [r3, #736]	; 0x2e0
 8002c50:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	edd3 7ab9 	vldr	s15, [r3, #740]	; 0x2e4
 8002c5c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 8002c68:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	edd3 7abb 	vldr	s15, [r3, #748]	; 0x2ec
 8002c74:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	edd3 7abc 	vldr	s15, [r3, #752]	; 0x2f0
 8002c80:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	edd3 7abd 	vldr	s15, [r3, #756]	; 0x2f4
 8002c8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c90:	ee77 7a67 	vsub.f32	s15, s14, s15
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
 8002c94:	edc7 7a03 	vstr	s15, [r7, #12]
	mon_diff = diff;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	4a1d      	ldr	r2, [pc, #116]	; (8002d10 <_ZN9LineTrace9calcErrorEv+0x128>)
 8002c9c:	6013      	str	r3, [r2, #0]

	diff = ((R_DIFF)*(diff) + (1.0 - (R_DIFF))* (pre_diff));
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f7fd fc69 	bl	8000578 <__aeabi_f2d>
 8002ca6:	a316      	add	r3, pc, #88	; (adr r3, 8002d00 <_ZN9LineTrace9calcErrorEv+0x118>)
 8002ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cac:	f7fd fcbc 	bl	8000628 <__aeabi_dmul>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	460c      	mov	r4, r1
 8002cb4:	4625      	mov	r5, r4
 8002cb6:	461c      	mov	r4, r3
 8002cb8:	4b16      	ldr	r3, [pc, #88]	; (8002d14 <_ZN9LineTrace9calcErrorEv+0x12c>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7fd fc5b 	bl	8000578 <__aeabi_f2d>
 8002cc2:	a311      	add	r3, pc, #68	; (adr r3, 8002d08 <_ZN9LineTrace9calcErrorEv+0x120>)
 8002cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cc8:	f7fd fcae 	bl	8000628 <__aeabi_dmul>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	460b      	mov	r3, r1
 8002cd0:	4620      	mov	r0, r4
 8002cd2:	4629      	mov	r1, r5
 8002cd4:	f7fd faf2 	bl	80002bc <__adddf3>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	460c      	mov	r4, r1
 8002cdc:	4618      	mov	r0, r3
 8002cde:	4621      	mov	r1, r4
 8002ce0:	f7fd ff9a 	bl	8000c18 <__aeabi_d2f>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	60fb      	str	r3, [r7, #12]
	//mon_diff_lpf = diff;

	pre_diff = diff;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	4a0a      	ldr	r2, [pc, #40]	; (8002d14 <_ZN9LineTrace9calcErrorEv+0x12c>)
 8002cec:	6013      	str	r3, [r2, #0]

	return diff;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	ee07 3a90 	vmov	s15, r3

}
 8002cf4:	eeb0 0a67 	vmov.f32	s0, s15
 8002cf8:	3710      	adds	r7, #16
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bdb0      	pop	{r4, r5, r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	47ae147b 	.word	0x47ae147b
 8002d04:	3fb47ae1 	.word	0x3fb47ae1
 8002d08:	d70a3d71 	.word	0xd70a3d71
 8002d0c:	3fed70a3 	.word	0x3fed70a3
 8002d10:	2000025c 	.word	0x2000025c
 8002d14:	2000027c 	.word	0x2000027c

08002d18 <_ZN9LineTrace8pidTraceEv>:
}
// ---------------------------------------------------------------------------------------------------//
// ----------------------------------Standar line following ------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::pidTrace()
{
 8002d18:	b5b0      	push	{r4, r5, r7, lr}
 8002d1a:	b086      	sub	sp, #24
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
	float diff = calcError();
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f7ff ff61 	bl	8002be8 <_ZN9LineTrace9calcErrorEv>
 8002d26:	ed87 0a05 	vstr	s0, [r7, #20]
	static float pre_diff = 0;
	float p, d;
	static float i;

	if(i_reset_flag_ == true){
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d007      	beq.n	8002d44 <_ZN9LineTrace8pidTraceEv+0x2c>
		i = 0;
 8002d34:	4b3c      	ldr	r3, [pc, #240]	; (8002e28 <_ZN9LineTrace8pidTraceEv+0x110>)
 8002d36:	f04f 0200 	mov.w	r2, #0
 8002d3a:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	}

	p = kp_ * diff;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002d4a:	ed97 7a05 	vldr	s14, [r7, #20]
 8002d4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d52:	edc7 7a04 	vstr	s15, [r7, #16]
	d = kd_ * (diff - pre_diff) / DELTA_T;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8002d5c:	4b33      	ldr	r3, [pc, #204]	; (8002e2c <_ZN9LineTrace8pidTraceEv+0x114>)
 8002d5e:	edd3 7a00 	vldr	s15, [r3]
 8002d62:	edd7 6a05 	vldr	s13, [r7, #20]
 8002d66:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002d6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d6e:	ee17 0a90 	vmov	r0, s15
 8002d72:	f7fd fc01 	bl	8000578 <__aeabi_f2d>
 8002d76:	a32a      	add	r3, pc, #168	; (adr r3, 8002e20 <_ZN9LineTrace8pidTraceEv+0x108>)
 8002d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d7c:	f7fd fd7e 	bl	800087c <__aeabi_ddiv>
 8002d80:	4603      	mov	r3, r0
 8002d82:	460c      	mov	r4, r1
 8002d84:	4618      	mov	r0, r3
 8002d86:	4621      	mov	r1, r4
 8002d88:	f7fd ff46 	bl	8000c18 <__aeabi_d2f>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	60fb      	str	r3, [r7, #12]
	i += ki_ * diff * DELTA_T;
 8002d90:	4b25      	ldr	r3, [pc, #148]	; (8002e28 <_ZN9LineTrace8pidTraceEv+0x110>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4618      	mov	r0, r3
 8002d96:	f7fd fbef 	bl	8000578 <__aeabi_f2d>
 8002d9a:	4604      	mov	r4, r0
 8002d9c:	460d      	mov	r5, r1
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8002da4:	edd7 7a05 	vldr	s15, [r7, #20]
 8002da8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dac:	ee17 0a90 	vmov	r0, s15
 8002db0:	f7fd fbe2 	bl	8000578 <__aeabi_f2d>
 8002db4:	a31a      	add	r3, pc, #104	; (adr r3, 8002e20 <_ZN9LineTrace8pidTraceEv+0x108>)
 8002db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dba:	f7fd fc35 	bl	8000628 <__aeabi_dmul>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	460b      	mov	r3, r1
 8002dc2:	4620      	mov	r0, r4
 8002dc4:	4629      	mov	r1, r5
 8002dc6:	f7fd fa79 	bl	80002bc <__adddf3>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	460c      	mov	r4, r1
 8002dce:	4618      	mov	r0, r3
 8002dd0:	4621      	mov	r1, r4
 8002dd2:	f7fd ff21 	bl	8000c18 <__aeabi_d2f>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	4b13      	ldr	r3, [pc, #76]	; (8002e28 <_ZN9LineTrace8pidTraceEv+0x110>)
 8002dda:	601a      	str	r2, [r3, #0]

	float rotation_ratio = p + d + i;
 8002ddc:	ed97 7a04 	vldr	s14, [r7, #16]
 8002de0:	edd7 7a03 	vldr	s15, [r7, #12]
 8002de4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002de8:	4b0f      	ldr	r3, [pc, #60]	; (8002e28 <_ZN9LineTrace8pidTraceEv+0x110>)
 8002dea:	edd3 7a00 	vldr	s15, [r3]
 8002dee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002df2:	edc7 7a02 	vstr	s15, [r7, #8]

	//motor_->setRatio(left_ratio, right_ratio);
	velocity_ctrl_->setTranslationVelocityOnly(target_velocity_, rotation_ratio);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	689a      	ldr	r2, [r3, #8]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 8002e00:	edd7 0a02 	vldr	s1, [r7, #8]
 8002e04:	eeb0 0a67 	vmov.f32	s0, s15
 8002e08:	4610      	mov	r0, r2
 8002e0a:	f002 fda9 	bl	8005960 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>

	pre_diff = diff;
 8002e0e:	4a07      	ldr	r2, [pc, #28]	; (8002e2c <_ZN9LineTrace8pidTraceEv+0x114>)
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	6013      	str	r3, [r2, #0]

}
 8002e14:	bf00      	nop
 8002e16:	3718      	adds	r7, #24
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bdb0      	pop	{r4, r5, r7, pc}
 8002e1c:	f3af 8000 	nop.w
 8002e20:	d2f1a9fc 	.word	0xd2f1a9fc
 8002e24:	3f50624d 	.word	0x3f50624d
 8002e28:	20000284 	.word	0x20000284
 8002e2c:	20000280 	.word	0x20000280

08002e30 <_ZN9LineTrace11loggerStartEv>:

// ---------------------------------------------------------------------------------------//
// -------------------------------------Logging-------------------------------------------//
// ---------------------------------------------------------------------------------------//
void LineTrace::loggerStart()
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
	encoder_->clearDistance10mm();
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	695b      	ldr	r3, [r3, #20]
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7fe fc6f 	bl	8001720 <_ZN7Encoder17clearDistance10mmEv>
	odometry_->clearPotition();
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	699b      	ldr	r3, [r3, #24]
 8002e46:	4618      	mov	r0, r3
 8002e48:	f002 f8ce 	bl	8004fe8 <_ZN8Odometry13clearPotitionEv>
	logger_->resetLogs2();
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	69db      	ldr	r3, [r3, #28]
 8002e50:	4618      	mov	r0, r3
 8002e52:	f001 fdfb 	bl	8004a4c <_ZN6Logger10resetLogs2Ev>

	logging_flag_ = true;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2201      	movs	r2, #1
 8002e5a:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
}
 8002e5e:	bf00      	nop
 8002e60:	3708      	adds	r7, #8
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}

08002e66 <_ZN9LineTrace10loggerStopEv>:

void LineTrace::loggerStop()
{
 8002e66:	b580      	push	{r7, lr}
 8002e68:	b082      	sub	sp, #8
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]
	logger_->stop();
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	69db      	ldr	r3, [r3, #28]
 8002e72:	4618      	mov	r0, r3
 8002e74:	f001 fe5f 	bl	8004b36 <_ZN6Logger4stopEv>
	logging_flag_ = false;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
}
 8002e80:	bf00      	nop
 8002e82:	3708      	adds	r7, #8
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <_ZN9LineTrace22storeCrossLineDistanceEv>:

void LineTrace::storeCrossLineDistance()
{
 8002e88:	b590      	push	{r4, r7, lr}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
	crossline_distance_[crossline_idx_] = encoder_->getTotalDistance();
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	695a      	ldr	r2, [r3, #20]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002e9a:	331c      	adds	r3, #28
 8002e9c:	881b      	ldrh	r3, [r3, #0]
 8002e9e:	461c      	mov	r4, r3
 8002ea0:	4610      	mov	r0, r2
 8002ea2:	f7fe fc1f 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 8002ea6:	eef0 7a40 	vmov.f32	s15, s0
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	f504 533c 	add.w	r3, r4, #12032	; 0x2f00
 8002eb0:	3312      	adds	r3, #18
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	4413      	add	r3, r2
 8002eb6:	3304      	adds	r3, #4
 8002eb8:	edc3 7a00 	vstr	s15, [r3]
	crossline_idx_++;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002ec2:	331c      	adds	r3, #28
 8002ec4:	881b      	ldrh	r3, [r3, #0]
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	b29a      	uxth	r2, r3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002ed0:	331c      	adds	r3, #28
 8002ed2:	801a      	strh	r2, [r3, #0]

	if(crossline_idx_ >= CROSSLINE_SIZE) crossline_idx_ = CROSSLINE_SIZE - 1;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002eda:	331c      	adds	r3, #28
 8002edc:	881b      	ldrh	r3, [r3, #0]
 8002ede:	2b63      	cmp	r3, #99	; 0x63
 8002ee0:	d905      	bls.n	8002eee <_ZN9LineTrace22storeCrossLineDistanceEv+0x66>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002ee8:	331c      	adds	r3, #28
 8002eea:	2263      	movs	r2, #99	; 0x63
 8002eec:	801a      	strh	r2, [r3, #0]
}
 8002eee:	bf00      	nop
 8002ef0:	370c      	adds	r7, #12
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd90      	pop	{r4, r7, pc}

08002ef6 <_ZN9LineTrace21storeSideLineDistanceEv>:

void LineTrace::storeSideLineDistance()
{
 8002ef6:	b590      	push	{r4, r7, lr}
 8002ef8:	b083      	sub	sp, #12
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
	sideline_distance_[sideline_idx_] = encoder_->getTotalDistance();
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	695a      	ldr	r2, [r3, #20]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002f08:	331e      	adds	r3, #30
 8002f0a:	881b      	ldrh	r3, [r3, #0]
 8002f0c:	461c      	mov	r4, r3
 8002f0e:	4610      	mov	r0, r2
 8002f10:	f7fe fbe8 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 8002f14:	eef0 7a40 	vmov.f32	s15, s0
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	f504 533d 	add.w	r3, r4, #12096	; 0x2f40
 8002f1e:	3336      	adds	r3, #54	; 0x36
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	4413      	add	r3, r2
 8002f24:	3304      	adds	r3, #4
 8002f26:	edc3 7a00 	vstr	s15, [r3]
	sideline_idx_++;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002f30:	331e      	adds	r3, #30
 8002f32:	881b      	ldrh	r3, [r3, #0]
 8002f34:	3301      	adds	r3, #1
 8002f36:	b29a      	uxth	r2, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002f3e:	331e      	adds	r3, #30
 8002f40:	801a      	strh	r2, [r3, #0]

	if(sideline_idx_ >= SIDELINE_SIZE) sideline_idx_ = SIDELINE_SIZE - 1;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002f48:	331e      	adds	r3, #30
 8002f4a:	881b      	ldrh	r3, [r3, #0]
 8002f4c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f50:	d306      	bcc.n	8002f60 <_ZN9LineTrace21storeSideLineDistanceEv+0x6a>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8002f58:	331e      	adds	r3, #30
 8002f5a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002f5e:	801a      	strh	r2, [r3, #0]
}
 8002f60:	bf00      	nop
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd90      	pop	{r4, r7, pc}

08002f68 <_ZN9LineTrace9storeLogsEv>:

	if(all_sideline_idx_ >= SIDELINE_SIZE) all_sideline_idx_ = SIDELINE_SIZE - 1;
}

void LineTrace::storeLogs()
{
 8002f68:	b590      	push	{r4, r7, lr}
 8002f6a:	ed2d 8b02 	vpush	{d8}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
	if(logging_flag_ == true){
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d046      	beq.n	800300c <_ZN9LineTrace9storeLogsEv+0xa4>
		if(mode_selector_ == FIRST_RUNNING)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002f84:	3348      	adds	r3, #72	; 0x48
 8002f86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d11c      	bne.n	8002fc8 <_ZN9LineTrace9storeLogsEv+0x60>
			logger_->storeDistanceAndTheta(encoder_->getDistance10mm(), odometry_->getTheta());
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	69dc      	ldr	r4, [r3, #28]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	695b      	ldr	r3, [r3, #20]
 8002f96:	4618      	mov	r0, r3
 8002f98:	f7fe fb95 	bl	80016c6 <_ZN7Encoder15getDistance10mmEv>
 8002f9c:	eeb0 8a40 	vmov.f32	s16, s0
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	699b      	ldr	r3, [r3, #24]
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f002 f80e 	bl	8004fc6 <_ZN8Odometry8getThetaEv>
 8002faa:	ec53 2b10 	vmov	r2, r3, d0
 8002fae:	4610      	mov	r0, r2
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	f7fd fe31 	bl	8000c18 <__aeabi_d2f>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	ee00 3a90 	vmov	s1, r3
 8002fbc:	eeb0 0a48 	vmov.f32	s0, s16
 8002fc0:	4620      	mov	r0, r4
 8002fc2:	f001 fc09 	bl	80047d8 <_ZN6Logger21storeDistanceAndThetaEff>
 8002fc6:	e01b      	b.n	8003000 <_ZN9LineTrace9storeLogsEv+0x98>
		else
			//logger_->storeDistanceAndTheta2(encoder_->getDistance10mm(), odometry_->getTheta());
			//logger_->storeDistanceAndTheta2(encoder_->getTotalDistance(), odometry_->getTheta());
			logger_->storeDistanceAndTheta2(velocity_ctrl_->getCurrentVelocity(), odometry_->getTheta());
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	69dc      	ldr	r4, [r3, #28]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f002 fd4d 	bl	8005a70 <_ZN12VelocityCtrl18getCurrentVelocityEv>
 8002fd6:	eeb0 8a40 	vmov.f32	s16, s0
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	699b      	ldr	r3, [r3, #24]
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f001 fff1 	bl	8004fc6 <_ZN8Odometry8getThetaEv>
 8002fe4:	ec53 2b10 	vmov	r2, r3, d0
 8002fe8:	4610      	mov	r0, r2
 8002fea:	4619      	mov	r1, r3
 8002fec:	f7fd fe14 	bl	8000c18 <__aeabi_d2f>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	ee00 3a90 	vmov	s1, r3
 8002ff6:	eeb0 0a48 	vmov.f32	s0, s16
 8002ffa:	4620      	mov	r0, r4
 8002ffc:	f001 fc34 	bl	8004868 <_ZN6Logger22storeDistanceAndTheta2Eff>

		mon_store_cnt++;
 8003000:	4b05      	ldr	r3, [pc, #20]	; (8003018 <_ZN9LineTrace9storeLogsEv+0xb0>)
 8003002:	881b      	ldrh	r3, [r3, #0]
 8003004:	3301      	adds	r3, #1
 8003006:	b29a      	uxth	r2, r3
 8003008:	4b03      	ldr	r3, [pc, #12]	; (8003018 <_ZN9LineTrace9storeLogsEv+0xb0>)
 800300a:	801a      	strh	r2, [r3, #0]
	}
}
 800300c:	bf00      	nop
 800300e:	370c      	adds	r7, #12
 8003010:	46bd      	mov	sp, r7
 8003012:	ecbd 8b02 	vpop	{d8}
 8003016:	bd90      	pop	{r4, r7, pc}
 8003018:	20000260 	.word	0x20000260

0800301c <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv>:

// ---------------------------------------------------------------------------------------------------//
// ----------------------------------Position correction----------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::correctionTotalDistanceFromCrossLine()
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
	encoder_->setTotalDistance(crossline_distance_[crossline_idx_]);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6959      	ldr	r1, [r3, #20]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 800302e:	331c      	adds	r3, #28
 8003030:	881b      	ldrh	r3, [r3, #0]
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8003038:	3312      	adds	r3, #18
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	4413      	add	r3, r2
 800303e:	3304      	adds	r3, #4
 8003040:	edd3 7a00 	vldr	s15, [r3]
 8003044:	eeb0 0a67 	vmov.f32	s0, s15
 8003048:	4608      	mov	r0, r1
 800304a:	f7fe fb5a 	bl	8001702 <_ZN7Encoder16setTotalDistanceEf>
	crossline_idx_++;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003054:	331c      	adds	r3, #28
 8003056:	881b      	ldrh	r3, [r3, #0]
 8003058:	3301      	adds	r3, #1
 800305a:	b29a      	uxth	r2, r3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003062:	331c      	adds	r3, #28
 8003064:	801a      	strh	r2, [r3, #0]

	if(crossline_idx_ >= CROSSLINE_SIZE) crossline_idx_ = CROSSLINE_SIZE - 1;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 800306c:	331c      	adds	r3, #28
 800306e:	881b      	ldrh	r3, [r3, #0]
 8003070:	2b63      	cmp	r3, #99	; 0x63
 8003072:	d905      	bls.n	8003080 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0x64>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 800307a:	331c      	adds	r3, #28
 800307c:	2263      	movs	r2, #99	; 0x63
 800307e:	801a      	strh	r2, [r3, #0]

}
 8003080:	bf00      	nop
 8003082:	3708      	adds	r7, #8
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}

08003088 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv>:

void LineTrace::correctionTotalDistanceFromSideMarker()
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b086      	sub	sp, #24
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8003090:	2300      	movs	r3, #0
 8003092:	82fb      	strh	r3, [r7, #22]
 8003094:	8afb      	ldrh	r3, [r7, #22]
 8003096:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800309a:	d239      	bcs.n	8003110 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x88>
		float temp_sideline_distance = sideline_distance_[i];
 800309c:	8afb      	ldrh	r3, [r7, #22]
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 80030a4:	3336      	adds	r3, #54	; 0x36
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	4413      	add	r3, r2
 80030aa:	3304      	adds	r3, #4
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	613b      	str	r3, [r7, #16]
		float diff = abs(temp_sideline_distance - encoder_->getTotalDistance());
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	695b      	ldr	r3, [r3, #20]
 80030b4:	4618      	mov	r0, r3
 80030b6:	f7fe fb15 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 80030ba:	eeb0 7a40 	vmov.f32	s14, s0
 80030be:	edd7 7a04 	vldr	s15, [r7, #16]
 80030c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80030c6:	eeb0 0a67 	vmov.f32	s0, s15
 80030ca:	f7ff fc65 	bl	8002998 <_ZSt3absf>
 80030ce:	ed87 0a03 	vstr	s0, [r7, #12]
		if(diff <= 80){
 80030d2:	edd7 7a03 	vldr	s15, [r7, #12]
 80030d6:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8003138 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xb0>
 80030da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030e2:	d811      	bhi.n	8003108 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x80>
			encoder_->setTotalDistance(sideline_distance_[i]);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6959      	ldr	r1, [r3, #20]
 80030e8:	8afb      	ldrh	r3, [r7, #22]
 80030ea:	687a      	ldr	r2, [r7, #4]
 80030ec:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 80030f0:	3336      	adds	r3, #54	; 0x36
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	4413      	add	r3, r2
 80030f6:	3304      	adds	r3, #4
 80030f8:	edd3 7a00 	vldr	s15, [r3]
 80030fc:	eeb0 0a67 	vmov.f32	s0, s15
 8003100:	4608      	mov	r0, r1
 8003102:	f7fe fafe 	bl	8001702 <_ZN7Encoder16setTotalDistanceEf>
			break;
 8003106:	e003      	b.n	8003110 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x88>
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8003108:	8afb      	ldrh	r3, [r7, #22]
 800310a:	3301      	adds	r3, #1
 800310c:	82fb      	strh	r3, [r7, #22]
 800310e:	e7c1      	b.n	8003094 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xc>
		}
	}

	if(sideline_idx_ >= SIDELINE_SIZE) sideline_idx_ = SIDELINE_SIZE - 1;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003116:	331e      	adds	r3, #30
 8003118:	881b      	ldrh	r3, [r3, #0]
 800311a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800311e:	d306      	bcc.n	800312e <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xa6>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003126:	331e      	adds	r3, #30
 8003128:	f240 32e7 	movw	r2, #999	; 0x3e7
 800312c:	801a      	strh	r2, [r3, #0]

}
 800312e:	bf00      	nop
 8003130:	3718      	adds	r7, #24
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	42a00000 	.word	0x42a00000

0800313c <_ZN9LineTrace15radius2VelocityEf>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------ Acceleration / deceleration processing------------------------------------//
// ---------------------------------------------------------------------------------------------------//
float LineTrace::radius2Velocity(float radius)
{
 800313c:	b480      	push	{r7}
 800313e:	b085      	sub	sp, #20
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	ed87 0a00 	vstr	s0, [r7]
	float velocity;

	if(mode_selector_ == SECOND_RUNNING){
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800314e:	3348      	adds	r3, #72	; 0x48
 8003150:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003154:	2b01      	cmp	r3, #1
 8003156:	d143      	bne.n	80031e0 <_ZN9LineTrace15radius2VelocityEf+0xa4>
		if(radius < 300) velocity = min_velocity_;
 8003158:	edd7 7a00 	vldr	s15, [r7]
 800315c:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8003278 <_ZN9LineTrace15radius2VelocityEf+0x13c>
 8003160:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003168:	d504      	bpl.n	8003174 <_ZN9LineTrace15radius2VelocityEf+0x38>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003170:	60fb      	str	r3, [r7, #12]
 8003172:	e076      	b.n	8003262 <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 800) velocity = 1.7;
 8003174:	edd7 7a00 	vldr	s15, [r7]
 8003178:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800327c <_ZN9LineTrace15radius2VelocityEf+0x140>
 800317c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003184:	d502      	bpl.n	800318c <_ZN9LineTrace15radius2VelocityEf+0x50>
 8003186:	4b3e      	ldr	r3, [pc, #248]	; (8003280 <_ZN9LineTrace15radius2VelocityEf+0x144>)
 8003188:	60fb      	str	r3, [r7, #12]
 800318a:	e06a      	b.n	8003262 <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 1000) velocity = 2.0;
 800318c:	edd7 7a00 	vldr	s15, [r7]
 8003190:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8003284 <_ZN9LineTrace15radius2VelocityEf+0x148>
 8003194:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003198:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800319c:	d503      	bpl.n	80031a6 <_ZN9LineTrace15radius2VelocityEf+0x6a>
 800319e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80031a2:	60fb      	str	r3, [r7, #12]
 80031a4:	e05d      	b.n	8003262 <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 1500) velocity = 2.3;
 80031a6:	edd7 7a00 	vldr	s15, [r7]
 80031aa:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8003288 <_ZN9LineTrace15radius2VelocityEf+0x14c>
 80031ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031b6:	d502      	bpl.n	80031be <_ZN9LineTrace15radius2VelocityEf+0x82>
 80031b8:	4b34      	ldr	r3, [pc, #208]	; (800328c <_ZN9LineTrace15radius2VelocityEf+0x150>)
 80031ba:	60fb      	str	r3, [r7, #12]
 80031bc:	e051      	b.n	8003262 <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 2000) velocity = 2.5;
 80031be:	edd7 7a00 	vldr	s15, [r7]
 80031c2:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8003290 <_ZN9LineTrace15radius2VelocityEf+0x154>
 80031c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031ce:	d502      	bpl.n	80031d6 <_ZN9LineTrace15radius2VelocityEf+0x9a>
 80031d0:	4b30      	ldr	r3, [pc, #192]	; (8003294 <_ZN9LineTrace15radius2VelocityEf+0x158>)
 80031d2:	60fb      	str	r3, [r7, #12]
 80031d4:	e045      	b.n	8003262 <_ZN9LineTrace15radius2VelocityEf+0x126>
		else velocity = max_velocity_;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80031dc:	60fb      	str	r3, [r7, #12]
 80031de:	e040      	b.n	8003262 <_ZN9LineTrace15radius2VelocityEf+0x126>
	}

	else if(mode_selector_ == THIRD_RUNNING){
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80031e6:	3348      	adds	r3, #72	; 0x48
 80031e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	d136      	bne.n	800325e <_ZN9LineTrace15radius2VelocityEf+0x122>
		if(radius < 300) velocity = min_velocity2_;
 80031f0:	edd7 7a00 	vldr	s15, [r7]
 80031f4:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8003278 <_ZN9LineTrace15radius2VelocityEf+0x13c>
 80031f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003200:	d504      	bpl.n	800320c <_ZN9LineTrace15radius2VelocityEf+0xd0>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003208:	60fb      	str	r3, [r7, #12]
 800320a:	e02a      	b.n	8003262 <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 1500) velocity = 2.1;
 800320c:	edd7 7a00 	vldr	s15, [r7]
 8003210:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8003288 <_ZN9LineTrace15radius2VelocityEf+0x14c>
 8003214:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003218:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800321c:	d502      	bpl.n	8003224 <_ZN9LineTrace15radius2VelocityEf+0xe8>
 800321e:	4b1e      	ldr	r3, [pc, #120]	; (8003298 <_ZN9LineTrace15radius2VelocityEf+0x15c>)
 8003220:	60fb      	str	r3, [r7, #12]
 8003222:	e01e      	b.n	8003262 <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 2000) velocity = 2.5;
 8003224:	edd7 7a00 	vldr	s15, [r7]
 8003228:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8003290 <_ZN9LineTrace15radius2VelocityEf+0x154>
 800322c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003234:	d502      	bpl.n	800323c <_ZN9LineTrace15radius2VelocityEf+0x100>
 8003236:	4b17      	ldr	r3, [pc, #92]	; (8003294 <_ZN9LineTrace15radius2VelocityEf+0x158>)
 8003238:	60fb      	str	r3, [r7, #12]
 800323a:	e012      	b.n	8003262 <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 2500) velocity = 3.0;
 800323c:	edd7 7a00 	vldr	s15, [r7]
 8003240:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800329c <_ZN9LineTrace15radius2VelocityEf+0x160>
 8003244:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800324c:	d502      	bpl.n	8003254 <_ZN9LineTrace15radius2VelocityEf+0x118>
 800324e:	4b14      	ldr	r3, [pc, #80]	; (80032a0 <_ZN9LineTrace15radius2VelocityEf+0x164>)
 8003250:	60fb      	str	r3, [r7, #12]
 8003252:	e006      	b.n	8003262 <_ZN9LineTrace15radius2VelocityEf+0x126>
		else velocity = max_velocity2_;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800325a:	60fb      	str	r3, [r7, #12]
 800325c:	e001      	b.n	8003262 <_ZN9LineTrace15radius2VelocityEf+0x126>
	}
	else velocity = 1.3;
 800325e:	4b11      	ldr	r3, [pc, #68]	; (80032a4 <_ZN9LineTrace15radius2VelocityEf+0x168>)
 8003260:	60fb      	str	r3, [r7, #12]

	return velocity;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	ee07 3a90 	vmov	s15, r3
}
 8003268:	eeb0 0a67 	vmov.f32	s0, s15
 800326c:	3714      	adds	r7, #20
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr
 8003276:	bf00      	nop
 8003278:	43960000 	.word	0x43960000
 800327c:	44480000 	.word	0x44480000
 8003280:	3fd9999a 	.word	0x3fd9999a
 8003284:	447a0000 	.word	0x447a0000
 8003288:	44bb8000 	.word	0x44bb8000
 800328c:	40133333 	.word	0x40133333
 8003290:	44fa0000 	.word	0x44fa0000
 8003294:	40200000 	.word	0x40200000
 8003298:	40066666 	.word	0x40066666
 800329c:	451c4000 	.word	0x451c4000
 80032a0:	40400000 	.word	0x40400000
 80032a4:	3fa66666 	.word	0x3fa66666

080032a8 <_ZN9LineTrace20decelerateProcessingEfPKf>:

	return a * exp(b * radius) + c * exp(d * radius);
}

void LineTrace::decelerateProcessing(const float am, const float *p_distance)
{
 80032a8:	b5b0      	push	{r4, r5, r7, lr}
 80032aa:	b088      	sub	sp, #32
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	60f8      	str	r0, [r7, #12]
 80032b0:	ed87 0a02 	vstr	s0, [r7, #8]
 80032b4:	6079      	str	r1, [r7, #4]
	for(uint16_t i = LOG_DATA_SIZE_DIS - 1; i >= 1; i--){
 80032b6:	f241 736f 	movw	r3, #5999	; 0x176f
 80032ba:	83fb      	strh	r3, [r7, #30]
 80032bc:	8bfb      	ldrh	r3, [r7, #30]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	f000 808d 	beq.w	80033de <_ZN9LineTrace20decelerateProcessingEfPKf+0x136>
		float v_diff = velocity_table_[i-1] - velocity_table_[i];
 80032c4:	8bfb      	ldrh	r3, [r7, #30]
 80032c6:	3b01      	subs	r3, #1
 80032c8:	68fa      	ldr	r2, [r7, #12]
 80032ca:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	4413      	add	r3, r2
 80032d2:	3304      	adds	r3, #4
 80032d4:	ed93 7a00 	vldr	s14, [r3]
 80032d8:	8bfb      	ldrh	r3, [r7, #30]
 80032da:	68fa      	ldr	r2, [r7, #12]
 80032dc:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	4413      	add	r3, r2
 80032e4:	3304      	adds	r3, #4
 80032e6:	edd3 7a00 	vldr	s15, [r3]
 80032ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032ee:	edc7 7a06 	vstr	s15, [r7, #24]

		if(v_diff > 0){
 80032f2:	edd7 7a06 	vldr	s15, [r7, #24]
 80032f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80032fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032fe:	dd6a      	ble.n	80033d6 <_ZN9LineTrace20decelerateProcessingEfPKf+0x12e>
			float t = p_distance[i]*1e-3 / v_diff;
 8003300:	8bfb      	ldrh	r3, [r7, #30]
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	4413      	add	r3, r2
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4618      	mov	r0, r3
 800330c:	f7fd f934 	bl	8000578 <__aeabi_f2d>
 8003310:	a335      	add	r3, pc, #212	; (adr r3, 80033e8 <_ZN9LineTrace20decelerateProcessingEfPKf+0x140>)
 8003312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003316:	f7fd f987 	bl	8000628 <__aeabi_dmul>
 800331a:	4603      	mov	r3, r0
 800331c:	460c      	mov	r4, r1
 800331e:	4625      	mov	r5, r4
 8003320:	461c      	mov	r4, r3
 8003322:	69b8      	ldr	r0, [r7, #24]
 8003324:	f7fd f928 	bl	8000578 <__aeabi_f2d>
 8003328:	4602      	mov	r2, r0
 800332a:	460b      	mov	r3, r1
 800332c:	4620      	mov	r0, r4
 800332e:	4629      	mov	r1, r5
 8003330:	f7fd faa4 	bl	800087c <__aeabi_ddiv>
 8003334:	4603      	mov	r3, r0
 8003336:	460c      	mov	r4, r1
 8003338:	4618      	mov	r0, r3
 800333a:	4621      	mov	r1, r4
 800333c:	f7fd fc6c 	bl	8000c18 <__aeabi_d2f>
 8003340:	4603      	mov	r3, r0
 8003342:	617b      	str	r3, [r7, #20]
			float a = v_diff / t;
 8003344:	edd7 6a06 	vldr	s13, [r7, #24]
 8003348:	ed97 7a05 	vldr	s14, [r7, #20]
 800334c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003350:	edc7 7a04 	vstr	s15, [r7, #16]
			if(a > am){
 8003354:	ed97 7a04 	vldr	s14, [r7, #16]
 8003358:	edd7 7a02 	vldr	s15, [r7, #8]
 800335c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003364:	dd37      	ble.n	80033d6 <_ZN9LineTrace20decelerateProcessingEfPKf+0x12e>
				velocity_table_[i-1] = velocity_table_[i] + am * p_distance[i]*1e-3;
 8003366:	8bfb      	ldrh	r3, [r7, #30]
 8003368:	68fa      	ldr	r2, [r7, #12]
 800336a:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	4413      	add	r3, r2
 8003372:	3304      	adds	r3, #4
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4618      	mov	r0, r3
 8003378:	f7fd f8fe 	bl	8000578 <__aeabi_f2d>
 800337c:	4604      	mov	r4, r0
 800337e:	460d      	mov	r5, r1
 8003380:	8bfb      	ldrh	r3, [r7, #30]
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	4413      	add	r3, r2
 8003388:	ed93 7a00 	vldr	s14, [r3]
 800338c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003390:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003394:	ee17 0a90 	vmov	r0, s15
 8003398:	f7fd f8ee 	bl	8000578 <__aeabi_f2d>
 800339c:	a312      	add	r3, pc, #72	; (adr r3, 80033e8 <_ZN9LineTrace20decelerateProcessingEfPKf+0x140>)
 800339e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033a2:	f7fd f941 	bl	8000628 <__aeabi_dmul>
 80033a6:	4602      	mov	r2, r0
 80033a8:	460b      	mov	r3, r1
 80033aa:	4620      	mov	r0, r4
 80033ac:	4629      	mov	r1, r5
 80033ae:	f7fc ff85 	bl	80002bc <__adddf3>
 80033b2:	4603      	mov	r3, r0
 80033b4:	460c      	mov	r4, r1
 80033b6:	4619      	mov	r1, r3
 80033b8:	4622      	mov	r2, r4
 80033ba:	8bfb      	ldrh	r3, [r7, #30]
 80033bc:	1e5c      	subs	r4, r3, #1
 80033be:	4608      	mov	r0, r1
 80033c0:	4611      	mov	r1, r2
 80033c2:	f7fd fc29 	bl	8000c18 <__aeabi_d2f>
 80033c6:	4601      	mov	r1, r0
 80033c8:	68fa      	ldr	r2, [r7, #12]
 80033ca:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	4413      	add	r3, r2
 80033d2:	3304      	adds	r3, #4
 80033d4:	6019      	str	r1, [r3, #0]
	for(uint16_t i = LOG_DATA_SIZE_DIS - 1; i >= 1; i--){
 80033d6:	8bfb      	ldrh	r3, [r7, #30]
 80033d8:	3b01      	subs	r3, #1
 80033da:	83fb      	strh	r3, [r7, #30]
 80033dc:	e76e      	b.n	80032bc <_ZN9LineTrace20decelerateProcessingEfPKf+0x14>
			}

		}
	}

}
 80033de:	bf00      	nop
 80033e0:	3720      	adds	r7, #32
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bdb0      	pop	{r4, r5, r7, pc}
 80033e6:	bf00      	nop
 80033e8:	d2f1a9fc 	.word	0xd2f1a9fc
 80033ec:	3f50624d 	.word	0x3f50624d

080033f0 <_ZN9LineTrace20accelerateProcessingEfPKf>:

void LineTrace::accelerateProcessing(const float am, const float *p_distance)
{
 80033f0:	b5b0      	push	{r4, r5, r7, lr}
 80033f2:	b088      	sub	sp, #32
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	ed87 0a02 	vstr	s0, [r7, #8]
 80033fc:	6079      	str	r1, [r7, #4]
	for(uint16_t i = 0; i <= LOG_DATA_SIZE_DIS - 1; i++){
 80033fe:	2300      	movs	r3, #0
 8003400:	83fb      	strh	r3, [r7, #30]
 8003402:	8bfb      	ldrh	r3, [r7, #30]
 8003404:	f241 726f 	movw	r2, #5999	; 0x176f
 8003408:	4293      	cmp	r3, r2
 800340a:	f200 808d 	bhi.w	8003528 <_ZN9LineTrace20accelerateProcessingEfPKf+0x138>
		float v_diff = velocity_table_[i+1] - velocity_table_[i];
 800340e:	8bfb      	ldrh	r3, [r7, #30]
 8003410:	3301      	adds	r3, #1
 8003412:	68fa      	ldr	r2, [r7, #12]
 8003414:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	4413      	add	r3, r2
 800341c:	3304      	adds	r3, #4
 800341e:	ed93 7a00 	vldr	s14, [r3]
 8003422:	8bfb      	ldrh	r3, [r7, #30]
 8003424:	68fa      	ldr	r2, [r7, #12]
 8003426:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	4413      	add	r3, r2
 800342e:	3304      	adds	r3, #4
 8003430:	edd3 7a00 	vldr	s15, [r3]
 8003434:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003438:	edc7 7a06 	vstr	s15, [r7, #24]

		if(v_diff > 0){
 800343c:	edd7 7a06 	vldr	s15, [r7, #24]
 8003440:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003448:	dd6a      	ble.n	8003520 <_ZN9LineTrace20accelerateProcessingEfPKf+0x130>
			float t = p_distance[i]*1e-3 / v_diff;
 800344a:	8bfb      	ldrh	r3, [r7, #30]
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	687a      	ldr	r2, [r7, #4]
 8003450:	4413      	add	r3, r2
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4618      	mov	r0, r3
 8003456:	f7fd f88f 	bl	8000578 <__aeabi_f2d>
 800345a:	a335      	add	r3, pc, #212	; (adr r3, 8003530 <_ZN9LineTrace20accelerateProcessingEfPKf+0x140>)
 800345c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003460:	f7fd f8e2 	bl	8000628 <__aeabi_dmul>
 8003464:	4603      	mov	r3, r0
 8003466:	460c      	mov	r4, r1
 8003468:	4625      	mov	r5, r4
 800346a:	461c      	mov	r4, r3
 800346c:	69b8      	ldr	r0, [r7, #24]
 800346e:	f7fd f883 	bl	8000578 <__aeabi_f2d>
 8003472:	4602      	mov	r2, r0
 8003474:	460b      	mov	r3, r1
 8003476:	4620      	mov	r0, r4
 8003478:	4629      	mov	r1, r5
 800347a:	f7fd f9ff 	bl	800087c <__aeabi_ddiv>
 800347e:	4603      	mov	r3, r0
 8003480:	460c      	mov	r4, r1
 8003482:	4618      	mov	r0, r3
 8003484:	4621      	mov	r1, r4
 8003486:	f7fd fbc7 	bl	8000c18 <__aeabi_d2f>
 800348a:	4603      	mov	r3, r0
 800348c:	617b      	str	r3, [r7, #20]
			float a = v_diff / t;
 800348e:	edd7 6a06 	vldr	s13, [r7, #24]
 8003492:	ed97 7a05 	vldr	s14, [r7, #20]
 8003496:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800349a:	edc7 7a04 	vstr	s15, [r7, #16]
			if(a > am){
 800349e:	ed97 7a04 	vldr	s14, [r7, #16]
 80034a2:	edd7 7a02 	vldr	s15, [r7, #8]
 80034a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034ae:	dd37      	ble.n	8003520 <_ZN9LineTrace20accelerateProcessingEfPKf+0x130>
				velocity_table_[i+1] = velocity_table_[i] + am * p_distance[i]*1e-3;
 80034b0:	8bfb      	ldrh	r3, [r7, #30]
 80034b2:	68fa      	ldr	r2, [r7, #12]
 80034b4:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	4413      	add	r3, r2
 80034bc:	3304      	adds	r3, #4
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4618      	mov	r0, r3
 80034c2:	f7fd f859 	bl	8000578 <__aeabi_f2d>
 80034c6:	4604      	mov	r4, r0
 80034c8:	460d      	mov	r5, r1
 80034ca:	8bfb      	ldrh	r3, [r7, #30]
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	4413      	add	r3, r2
 80034d2:	ed93 7a00 	vldr	s14, [r3]
 80034d6:	edd7 7a02 	vldr	s15, [r7, #8]
 80034da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034de:	ee17 0a90 	vmov	r0, s15
 80034e2:	f7fd f849 	bl	8000578 <__aeabi_f2d>
 80034e6:	a312      	add	r3, pc, #72	; (adr r3, 8003530 <_ZN9LineTrace20accelerateProcessingEfPKf+0x140>)
 80034e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ec:	f7fd f89c 	bl	8000628 <__aeabi_dmul>
 80034f0:	4602      	mov	r2, r0
 80034f2:	460b      	mov	r3, r1
 80034f4:	4620      	mov	r0, r4
 80034f6:	4629      	mov	r1, r5
 80034f8:	f7fc fee0 	bl	80002bc <__adddf3>
 80034fc:	4603      	mov	r3, r0
 80034fe:	460c      	mov	r4, r1
 8003500:	4619      	mov	r1, r3
 8003502:	4622      	mov	r2, r4
 8003504:	8bfb      	ldrh	r3, [r7, #30]
 8003506:	1c5c      	adds	r4, r3, #1
 8003508:	4608      	mov	r0, r1
 800350a:	4611      	mov	r1, r2
 800350c:	f7fd fb84 	bl	8000c18 <__aeabi_d2f>
 8003510:	4601      	mov	r1, r0
 8003512:	68fa      	ldr	r2, [r7, #12]
 8003514:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	4413      	add	r3, r2
 800351c:	3304      	adds	r3, #4
 800351e:	6019      	str	r1, [r3, #0]
	for(uint16_t i = 0; i <= LOG_DATA_SIZE_DIS - 1; i++){
 8003520:	8bfb      	ldrh	r3, [r7, #30]
 8003522:	3301      	adds	r3, #1
 8003524:	83fb      	strh	r3, [r7, #30]
 8003526:	e76c      	b.n	8003402 <_ZN9LineTrace20accelerateProcessingEfPKf+0x12>
			}

		}
	}

}
 8003528:	bf00      	nop
 800352a:	3720      	adds	r7, #32
 800352c:	46bd      	mov	sp, r7
 800352e:	bdb0      	pop	{r4, r5, r7, pc}
 8003530:	d2f1a9fc 	.word	0xd2f1a9fc
 8003534:	3f50624d 	.word	0x3f50624d

08003538 <_ZN9LineTrace17startVelocityPlayEv>:

void LineTrace::startVelocityPlay()
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
	encoder_->clearTotalDistance();
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	695b      	ldr	r3, [r3, #20]
 8003544:	4618      	mov	r0, r3
 8003546:	f7fe f8f9 	bl	800173c <_ZN7Encoder18clearTotalDistanceEv>
	velocity_play_flag_ = true;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003550:	3344      	adds	r3, #68	; 0x44
 8003552:	2201      	movs	r2, #1
 8003554:	701a      	strb	r2, [r3, #0]
}
 8003556:	bf00      	nop
 8003558:	3708      	adds	r7, #8
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}

0800355e <_ZN9LineTrace16stopVelocityPlayEv>:

void LineTrace::stopVelocityPlay()
{
 800355e:	b480      	push	{r7}
 8003560:	b083      	sub	sp, #12
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
	velocity_play_flag_ = false;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800356c:	3344      	adds	r3, #68	; 0x44
 800356e:	2200      	movs	r2, #0
 8003570:	701a      	strb	r2, [r3, #0]
	velocity_table_idx_ = 0;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003578:	3346      	adds	r3, #70	; 0x46
 800357a:	2200      	movs	r2, #0
 800357c:	801a      	strh	r2, [r3, #0]
	ref_distance_ = 0;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8003584:	f04f 0200 	mov.w	r2, #0
 8003588:	601a      	str	r2, [r3, #0]
}
 800358a:	bf00      	nop
 800358c:	370c      	adds	r7, #12
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr
	...

08003598 <_ZN9LineTrace20updateTargetVelocityEv>:

void LineTrace::updateTargetVelocity()
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b082      	sub	sp, #8
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
	if(velocity_play_flag_ == true){
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80035a6:	3344      	adds	r3, #68	; 0x44
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	f000 8081 	beq.w	80036b2 <_ZN9LineTrace20updateTargetVelocityEv+0x11a>
		//if(encoder_->getTotalDistance() >= ref_distance_){
			while(encoder_->getTotalDistance() >= ref_distance_){
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	695b      	ldr	r3, [r3, #20]
 80035b4:	4618      	mov	r0, r3
 80035b6:	f7fe f895 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 80035ba:	eeb0 7a40 	vmov.f32	s14, s0
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80035c4:	edd3 7a00 	vldr	s15, [r3]
 80035c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80035cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035d0:	bfac      	ite	ge
 80035d2:	2301      	movge	r3, #1
 80035d4:	2300      	movlt	r3, #0
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d023      	beq.n	8003624 <_ZN9LineTrace20updateTargetVelocityEv+0x8c>
				ref_distance_ += ref_delta_distances_[velocity_table_idx_];
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80035e2:	ed93 7a00 	vldr	s14, [r3]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80035ec:	3346      	adds	r3, #70	; 0x46
 80035ee:	881b      	ldrh	r3, [r3, #0]
 80035f0:	687a      	ldr	r2, [r7, #4]
 80035f2:	3330      	adds	r3, #48	; 0x30
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	4413      	add	r3, r2
 80035f8:	edd3 7a00 	vldr	s15, [r3]
 80035fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8003606:	edc3 7a00 	vstr	s15, [r3]
				velocity_table_idx_++;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003610:	3346      	adds	r3, #70	; 0x46
 8003612:	881b      	ldrh	r3, [r3, #0]
 8003614:	3301      	adds	r3, #1
 8003616:	b29a      	uxth	r2, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800361e:	3346      	adds	r3, #70	; 0x46
 8003620:	801a      	strh	r2, [r3, #0]
			while(encoder_->getTotalDistance() >= ref_distance_){
 8003622:	e7c5      	b.n	80035b0 <_ZN9LineTrace20updateTargetVelocityEv+0x18>
			}
		//}

		if(velocity_table_idx_ >= LOG_DATA_SIZE_DIS) velocity_table_idx_ = LOG_DATA_SIZE_DIS - 1;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800362a:	3346      	adds	r3, #70	; 0x46
 800362c:	881b      	ldrh	r3, [r3, #0]
 800362e:	f241 726f 	movw	r2, #5999	; 0x176f
 8003632:	4293      	cmp	r3, r2
 8003634:	d906      	bls.n	8003644 <_ZN9LineTrace20updateTargetVelocityEv+0xac>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800363c:	3346      	adds	r3, #70	; 0x46
 800363e:	f241 726f 	movw	r2, #5999	; 0x176f
 8003642:	801a      	strh	r2, [r3, #0]

		mon_ref_dis = ref_distance_;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a1b      	ldr	r2, [pc, #108]	; (80036bc <_ZN9LineTrace20updateTargetVelocityEv+0x124>)
 800364e:	6013      	str	r3, [r2, #0]
		mon_current_dis = encoder_->getTotalDistance();
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	695b      	ldr	r3, [r3, #20]
 8003654:	4618      	mov	r0, r3
 8003656:	f7fe f845 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 800365a:	eef0 7a40 	vmov.f32	s15, s0
 800365e:	4b18      	ldr	r3, [pc, #96]	; (80036c0 <_ZN9LineTrace20updateTargetVelocityEv+0x128>)
 8003660:	edc3 7a00 	vstr	s15, [r3]
		mon_vel_idx = velocity_table_idx_;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800366a:	3346      	adds	r3, #70	; 0x46
 800366c:	881a      	ldrh	r2, [r3, #0]
 800366e:	4b15      	ldr	r3, [pc, #84]	; (80036c4 <_ZN9LineTrace20updateTargetVelocityEv+0x12c>)
 8003670:	801a      	strh	r2, [r3, #0]

		setTargetVelocity(velocity_table_[velocity_table_idx_]);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003678:	3346      	adds	r3, #70	; 0x46
 800367a:	881b      	ldrh	r3, [r3, #0]
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	4413      	add	r3, r2
 8003686:	3304      	adds	r3, #4
 8003688:	edd3 7a00 	vldr	s15, [r3]
 800368c:	eeb0 0a67 	vmov.f32	s0, s15
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f000 fa88 	bl	8003ba6 <_ZN9LineTrace17setTargetVelocityEf>

		mon_tar_vel = velocity_table_[velocity_table_idx_];
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800369c:	3346      	adds	r3, #70	; 0x46
 800369e:	881b      	ldrh	r3, [r3, #0]
 80036a0:	687a      	ldr	r2, [r7, #4]
 80036a2:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	4413      	add	r3, r2
 80036aa:	3304      	adds	r3, #4
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a06      	ldr	r2, [pc, #24]	; (80036c8 <_ZN9LineTrace20updateTargetVelocityEv+0x130>)
 80036b0:	6013      	str	r3, [r2, #0]

	}
}
 80036b2:	bf00      	nop
 80036b4:	3708      	adds	r7, #8
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	2000026c 	.word	0x2000026c
 80036c0:	20000270 	.word	0x20000270
 80036c4:	20000274 	.word	0x20000274
 80036c8:	20000278 	.word	0x20000278

080036cc <_ZN9LineTrace16isTargetDistanceEf>:

bool LineTrace::isTargetDistance(float target_distance)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	ed87 0a00 	vstr	s0, [r7]
	bool ret = false;
 80036d8:	2300      	movs	r3, #0
 80036da:	73fb      	strb	r3, [r7, #15]
	if(encoder_->getDistance10mm() >= target_distance){
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	695b      	ldr	r3, [r3, #20]
 80036e0:	4618      	mov	r0, r3
 80036e2:	f7fd fff0 	bl	80016c6 <_ZN7Encoder15getDistance10mmEv>
 80036e6:	eeb0 7a40 	vmov.f32	s14, s0
 80036ea:	edd7 7a00 	vldr	s15, [r7]
 80036ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036f6:	bf94      	ite	ls
 80036f8:	2301      	movls	r3, #1
 80036fa:	2300      	movhi	r3, #0
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d001      	beq.n	8003706 <_ZN9LineTrace16isTargetDistanceEf+0x3a>
		ret = true;
 8003702:	2301      	movs	r3, #1
 8003704:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 8003706:	7bfb      	ldrb	r3, [r7, #15]
}
 8003708:	4618      	mov	r0, r3
 800370a:	3710      	adds	r7, #16
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}

08003710 <_ZN9LineTrace11isCrossLineEv>:

bool LineTrace::isCrossLine()
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
	static uint16_t cnt = 0;
	float sensor_edge_val_l = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2]) / 3;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	ed93 7ab0 	vldr	s14, [r3, #704]	; 0x2c0
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8003728:	ee37 7a27 	vadd.f32	s14, s14, s15
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 8003734:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003738:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 800373c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003740:	edc7 7a03 	vstr	s15, [r7, #12]
	float sensor_edge_val_r = (line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]) / 3;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	ed93 7abb 	vldr	s14, [r3, #748]	; 0x2ec
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	edd3 7abc 	vldr	s15, [r3, #752]	; 0x2f0
 8003754:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	edd3 7abd 	vldr	s15, [r3, #756]	; 0x2f4
 8003760:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003764:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8003768:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800376c:	edc7 7a02 	vstr	s15, [r7, #8]
	static bool flag = false;
	static bool white_flag = false;
	mon_ave_l = sensor_edge_val_l;
 8003770:	4a40      	ldr	r2, [pc, #256]	; (8003874 <_ZN9LineTrace11isCrossLineEv+0x164>)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	6013      	str	r3, [r2, #0]
	mon_ave_r = sensor_edge_val_r;
 8003776:	4a40      	ldr	r2, [pc, #256]	; (8003878 <_ZN9LineTrace11isCrossLineEv+0x168>)
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	6013      	str	r3, [r2, #0]

	if(white_flag == false){
 800377c:	4b3f      	ldr	r3, [pc, #252]	; (800387c <_ZN9LineTrace11isCrossLineEv+0x16c>)
 800377e:	781b      	ldrb	r3, [r3, #0]
 8003780:	f083 0301 	eor.w	r3, r3, #1
 8003784:	b2db      	uxtb	r3, r3
 8003786:	2b00      	cmp	r3, #0
 8003788:	d044      	beq.n	8003814 <_ZN9LineTrace11isCrossLineEv+0x104>
		if(sensor_edge_val_l < 600 && sensor_edge_val_r < 600){
 800378a:	edd7 7a03 	vldr	s15, [r7, #12]
 800378e:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8003880 <_ZN9LineTrace11isCrossLineEv+0x170>
 8003792:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800379a:	d50f      	bpl.n	80037bc <_ZN9LineTrace11isCrossLineEv+0xac>
 800379c:	edd7 7a02 	vldr	s15, [r7, #8]
 80037a0:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8003880 <_ZN9LineTrace11isCrossLineEv+0x170>
 80037a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037ac:	d506      	bpl.n	80037bc <_ZN9LineTrace11isCrossLineEv+0xac>
			cnt++;
 80037ae:	4b35      	ldr	r3, [pc, #212]	; (8003884 <_ZN9LineTrace11isCrossLineEv+0x174>)
 80037b0:	881b      	ldrh	r3, [r3, #0]
 80037b2:	3301      	adds	r3, #1
 80037b4:	b29a      	uxth	r2, r3
 80037b6:	4b33      	ldr	r3, [pc, #204]	; (8003884 <_ZN9LineTrace11isCrossLineEv+0x174>)
 80037b8:	801a      	strh	r2, [r3, #0]
 80037ba:	e002      	b.n	80037c2 <_ZN9LineTrace11isCrossLineEv+0xb2>
		}
		else{
			cnt = 0;
 80037bc:	4b31      	ldr	r3, [pc, #196]	; (8003884 <_ZN9LineTrace11isCrossLineEv+0x174>)
 80037be:	2200      	movs	r2, #0
 80037c0:	801a      	strh	r2, [r3, #0]
		}

		if(cnt >= 3){
 80037c2:	4b30      	ldr	r3, [pc, #192]	; (8003884 <_ZN9LineTrace11isCrossLineEv+0x174>)
 80037c4:	881b      	ldrh	r3, [r3, #0]
 80037c6:	2b02      	cmp	r3, #2
 80037c8:	d94d      	bls.n	8003866 <_ZN9LineTrace11isCrossLineEv+0x156>
			flag = true;
 80037ca:	4b2f      	ldr	r3, [pc, #188]	; (8003888 <_ZN9LineTrace11isCrossLineEv+0x178>)
 80037cc:	2201      	movs	r2, #1
 80037ce:	701a      	strb	r2, [r3, #0]
			white_flag = true;
 80037d0:	4b2a      	ldr	r3, [pc, #168]	; (800387c <_ZN9LineTrace11isCrossLineEv+0x16c>)
 80037d2:	2201      	movs	r2, #1
 80037d4:	701a      	strb	r2, [r3, #0]
			cnt = 0;
 80037d6:	4b2b      	ldr	r3, [pc, #172]	; (8003884 <_ZN9LineTrace11isCrossLineEv+0x174>)
 80037d8:	2200      	movs	r2, #0
 80037da:	801a      	strh	r2, [r3, #0]

			stable_cnt_reset_flag_ = true; //Because the conditions do not differ between when you tremble and when you do not tremble
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80037e2:	3324      	adds	r3, #36	; 0x24
 80037e4:	2201      	movs	r2, #1
 80037e6:	701a      	strb	r2, [r3, #0]
			if(mode_selector_ == FIRST_RUNNING){
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80037ee:	3348      	adds	r3, #72	; 0x48
 80037f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d103      	bne.n	8003800 <_ZN9LineTrace11isCrossLineEv+0xf0>
				storeCrossLineDistance();
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f7ff fb45 	bl	8002e88 <_ZN9LineTrace22storeCrossLineDistanceEv>
 80037fe:	e032      	b.n	8003866 <_ZN9LineTrace11isCrossLineEv+0x156>
			}
			else{
				correctionTotalDistanceFromCrossLine();
 8003800:	6878      	ldr	r0, [r7, #4]
 8003802:	f7ff fc0b 	bl	800301c <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv>
				correction_check_cnt_ = 0;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 800380c:	3338      	adds	r3, #56	; 0x38
 800380e:	2200      	movs	r2, #0
 8003810:	801a      	strh	r2, [r3, #0]
 8003812:	e028      	b.n	8003866 <_ZN9LineTrace11isCrossLineEv+0x156>
			}
		}
	}
	else{
		if(sensor_edge_val_l > 500 && sensor_edge_val_r > 500){
 8003814:	edd7 7a03 	vldr	s15, [r7, #12]
 8003818:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800388c <_ZN9LineTrace11isCrossLineEv+0x17c>
 800381c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003824:	dd0f      	ble.n	8003846 <_ZN9LineTrace11isCrossLineEv+0x136>
 8003826:	edd7 7a02 	vldr	s15, [r7, #8]
 800382a:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800388c <_ZN9LineTrace11isCrossLineEv+0x17c>
 800382e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003836:	dd06      	ble.n	8003846 <_ZN9LineTrace11isCrossLineEv+0x136>
			cnt++;
 8003838:	4b12      	ldr	r3, [pc, #72]	; (8003884 <_ZN9LineTrace11isCrossLineEv+0x174>)
 800383a:	881b      	ldrh	r3, [r3, #0]
 800383c:	3301      	adds	r3, #1
 800383e:	b29a      	uxth	r2, r3
 8003840:	4b10      	ldr	r3, [pc, #64]	; (8003884 <_ZN9LineTrace11isCrossLineEv+0x174>)
 8003842:	801a      	strh	r2, [r3, #0]
 8003844:	e002      	b.n	800384c <_ZN9LineTrace11isCrossLineEv+0x13c>
		}
		else{
			cnt = 0;
 8003846:	4b0f      	ldr	r3, [pc, #60]	; (8003884 <_ZN9LineTrace11isCrossLineEv+0x174>)
 8003848:	2200      	movs	r2, #0
 800384a:	801a      	strh	r2, [r3, #0]
		}

		if(cnt >= 10){
 800384c:	4b0d      	ldr	r3, [pc, #52]	; (8003884 <_ZN9LineTrace11isCrossLineEv+0x174>)
 800384e:	881b      	ldrh	r3, [r3, #0]
 8003850:	2b09      	cmp	r3, #9
 8003852:	d908      	bls.n	8003866 <_ZN9LineTrace11isCrossLineEv+0x156>
			flag = false;
 8003854:	4b0c      	ldr	r3, [pc, #48]	; (8003888 <_ZN9LineTrace11isCrossLineEv+0x178>)
 8003856:	2200      	movs	r2, #0
 8003858:	701a      	strb	r2, [r3, #0]
			white_flag = false;
 800385a:	4b08      	ldr	r3, [pc, #32]	; (800387c <_ZN9LineTrace11isCrossLineEv+0x16c>)
 800385c:	2200      	movs	r2, #0
 800385e:	701a      	strb	r2, [r3, #0]
			cnt = 0;
 8003860:	4b08      	ldr	r3, [pc, #32]	; (8003884 <_ZN9LineTrace11isCrossLineEv+0x174>)
 8003862:	2200      	movs	r2, #0
 8003864:	801a      	strh	r2, [r3, #0]
		}

	}

	return flag;
 8003866:	4b08      	ldr	r3, [pc, #32]	; (8003888 <_ZN9LineTrace11isCrossLineEv+0x178>)
 8003868:	781b      	ldrb	r3, [r3, #0]
}
 800386a:	4618      	mov	r0, r3
 800386c:	3710      	adds	r7, #16
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	20000264 	.word	0x20000264
 8003878:	20000268 	.word	0x20000268
 800387c:	2000028b 	.word	0x2000028b
 8003880:	44160000 	.word	0x44160000
 8003884:	20000288 	.word	0x20000288
 8003888:	2000028a 	.word	0x2000028a
 800388c:	43fa0000 	.word	0x43fa0000

08003890 <_ZN9LineTrace8isStableEv>:

bool LineTrace::isStable()
{
 8003890:	b590      	push	{r4, r7, lr}
 8003892:	b087      	sub	sp, #28
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8003898:	2300      	movs	r3, #0
 800389a:	75fb      	strb	r3, [r7, #23]
	static uint16_t stable_cnt = 0;
	float temp_distance = encoder_->getDistance10mm();
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	695b      	ldr	r3, [r3, #20]
 80038a0:	4618      	mov	r0, r3
 80038a2:	f7fd ff10 	bl	80016c6 <_ZN7Encoder15getDistance10mmEv>
 80038a6:	ed87 0a02 	vstr	s0, [r7, #8]
	float temp_theta = odometry_->getTheta();;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	699b      	ldr	r3, [r3, #24]
 80038ae:	4618      	mov	r0, r3
 80038b0:	f001 fb89 	bl	8004fc6 <_ZN8Odometry8getThetaEv>
 80038b4:	ec54 3b10 	vmov	r3, r4, d0
 80038b8:	4618      	mov	r0, r3
 80038ba:	4621      	mov	r1, r4
 80038bc:	f7fd f9ac 	bl	8000c18 <__aeabi_d2f>
 80038c0:	4603      	mov	r3, r0
 80038c2:	613b      	str	r3, [r7, #16]

	if(temp_theta == 0) temp_theta = 0.00001;
 80038c4:	edd7 7a04 	vldr	s15, [r7, #16]
 80038c8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80038cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038d0:	d101      	bne.n	80038d6 <_ZN9LineTrace8isStableEv+0x46>
 80038d2:	4b23      	ldr	r3, [pc, #140]	; (8003960 <_ZN9LineTrace8isStableEv+0xd0>)
 80038d4:	613b      	str	r3, [r7, #16]
	float radius = abs(temp_distance / temp_theta);
 80038d6:	ed97 7a02 	vldr	s14, [r7, #8]
 80038da:	edd7 7a04 	vldr	s15, [r7, #16]
 80038de:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80038e2:	eeb0 0a66 	vmov.f32	s0, s13
 80038e6:	f7ff f857 	bl	8002998 <_ZSt3absf>
 80038ea:	ed87 0a03 	vstr	s0, [r7, #12]
	if(radius >= 5000) radius = 5000;
 80038ee:	edd7 7a03 	vldr	s15, [r7, #12]
 80038f2:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8003964 <_ZN9LineTrace8isStableEv+0xd4>
 80038f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038fe:	db01      	blt.n	8003904 <_ZN9LineTrace8isStableEv+0x74>
 8003900:	4b19      	ldr	r3, [pc, #100]	; (8003968 <_ZN9LineTrace8isStableEv+0xd8>)
 8003902:	60fb      	str	r3, [r7, #12]

	if(stable_cnt_reset_flag_ == true){
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 800390a:	3324      	adds	r3, #36	; 0x24
 800390c:	781b      	ldrb	r3, [r3, #0]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d008      	beq.n	8003924 <_ZN9LineTrace8isStableEv+0x94>
		stable_cnt = 0;
 8003912:	4b16      	ldr	r3, [pc, #88]	; (800396c <_ZN9LineTrace8isStableEv+0xdc>)
 8003914:	2200      	movs	r2, #0
 8003916:	801a      	strh	r2, [r3, #0]
		stable_cnt_reset_flag_ = false;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 800391e:	3324      	adds	r3, #36	; 0x24
 8003920:	2200      	movs	r2, #0
 8003922:	701a      	strb	r2, [r3, #0]
	}

	if(radius >= 2000){
 8003924:	edd7 7a03 	vldr	s15, [r7, #12]
 8003928:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8003970 <_ZN9LineTrace8isStableEv+0xe0>
 800392c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003934:	db06      	blt.n	8003944 <_ZN9LineTrace8isStableEv+0xb4>
		stable_cnt++;
 8003936:	4b0d      	ldr	r3, [pc, #52]	; (800396c <_ZN9LineTrace8isStableEv+0xdc>)
 8003938:	881b      	ldrh	r3, [r3, #0]
 800393a:	3301      	adds	r3, #1
 800393c:	b29a      	uxth	r2, r3
 800393e:	4b0b      	ldr	r3, [pc, #44]	; (800396c <_ZN9LineTrace8isStableEv+0xdc>)
 8003940:	801a      	strh	r2, [r3, #0]
 8003942:	e002      	b.n	800394a <_ZN9LineTrace8isStableEv+0xba>
	}
	else{
		stable_cnt = 0;
 8003944:	4b09      	ldr	r3, [pc, #36]	; (800396c <_ZN9LineTrace8isStableEv+0xdc>)
 8003946:	2200      	movs	r2, #0
 8003948:	801a      	strh	r2, [r3, #0]
	}

	if(stable_cnt >= 23){ //230mm
 800394a:	4b08      	ldr	r3, [pc, #32]	; (800396c <_ZN9LineTrace8isStableEv+0xdc>)
 800394c:	881b      	ldrh	r3, [r3, #0]
 800394e:	2b16      	cmp	r3, #22
 8003950:	d901      	bls.n	8003956 <_ZN9LineTrace8isStableEv+0xc6>
		ret = true;
 8003952:	2301      	movs	r3, #1
 8003954:	75fb      	strb	r3, [r7, #23]
	}

	return ret;
 8003956:	7dfb      	ldrb	r3, [r7, #23]
}
 8003958:	4618      	mov	r0, r3
 800395a:	371c      	adds	r7, #28
 800395c:	46bd      	mov	sp, r7
 800395e:	bd90      	pop	{r4, r7, pc}
 8003960:	3727c5ac 	.word	0x3727c5ac
 8003964:	459c4000 	.word	0x459c4000
 8003968:	459c4000 	.word	0x459c4000
 800396c:	2000028c 	.word	0x2000028c
 8003970:	44fa0000 	.word	0x44fa0000

08003974 <_ZN9LineTrace4initEv>:
// -------public---------- //
// ---------------------------------------------------------------------------------------------------//
// ------------------------------------ Initialize----------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::init()
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b08e      	sub	sp, #56	; 0x38
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
	float temp_kp, temp_ki, temp_kd;
	sd_read_array_float("PARAMS", "KP.TXT", 1, &temp_kp);
 800397c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003980:	2201      	movs	r2, #1
 8003982:	4951      	ldr	r1, [pc, #324]	; (8003ac8 <_ZN9LineTrace4initEv+0x154>)
 8003984:	4851      	ldr	r0, [pc, #324]	; (8003acc <_ZN9LineTrace4initEv+0x158>)
 8003986:	f7fd ffdf 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KI.TXT", 1, &temp_ki);
 800398a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800398e:	2201      	movs	r2, #1
 8003990:	494f      	ldr	r1, [pc, #316]	; (8003ad0 <_ZN9LineTrace4initEv+0x15c>)
 8003992:	484e      	ldr	r0, [pc, #312]	; (8003acc <_ZN9LineTrace4initEv+0x158>)
 8003994:	f7fd ffd8 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KD.TXT", 1, &temp_kd);
 8003998:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800399c:	2201      	movs	r2, #1
 800399e:	494d      	ldr	r1, [pc, #308]	; (8003ad4 <_ZN9LineTrace4initEv+0x160>)
 80039a0:	484a      	ldr	r0, [pc, #296]	; (8003acc <_ZN9LineTrace4initEv+0x158>)
 80039a2:	f7fd ffd1 	bl	8001948 <sd_read_array_float>
	setGain(temp_kp, temp_ki, temp_kd);
 80039a6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80039aa:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 80039ae:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 80039b2:	eeb0 1a66 	vmov.f32	s2, s13
 80039b6:	eef0 0a47 	vmov.f32	s1, s14
 80039ba:	eeb0 0a67 	vmov.f32	s0, s15
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f000 f89c 	bl	8003afc <_ZN9LineTrace7setGainEfff>

	float temp_velocity, temp_max_velocity, temp_max_velocity2, temp_min_velocity, temp_min_velocity2;
	sd_read_array_float("PARAMS", "TARVEL1.TXT", 1, &temp_velocity);
 80039c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80039c8:	2201      	movs	r2, #1
 80039ca:	4943      	ldr	r1, [pc, #268]	; (8003ad8 <_ZN9LineTrace4initEv+0x164>)
 80039cc:	483f      	ldr	r0, [pc, #252]	; (8003acc <_ZN9LineTrace4initEv+0x158>)
 80039ce:	f7fd ffbb 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL2.TXT", 1, &temp_max_velocity);
 80039d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80039d6:	2201      	movs	r2, #1
 80039d8:	4940      	ldr	r1, [pc, #256]	; (8003adc <_ZN9LineTrace4initEv+0x168>)
 80039da:	483c      	ldr	r0, [pc, #240]	; (8003acc <_ZN9LineTrace4initEv+0x158>)
 80039dc:	f7fd ffb4 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL3.TXT", 1, &temp_max_velocity2);
 80039e0:	f107 0320 	add.w	r3, r7, #32
 80039e4:	2201      	movs	r2, #1
 80039e6:	493e      	ldr	r1, [pc, #248]	; (8003ae0 <_ZN9LineTrace4initEv+0x16c>)
 80039e8:	4838      	ldr	r0, [pc, #224]	; (8003acc <_ZN9LineTrace4initEv+0x158>)
 80039ea:	f7fd ffad 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "MINVEL.TXT", 1, &temp_min_velocity);
 80039ee:	f107 031c 	add.w	r3, r7, #28
 80039f2:	2201      	movs	r2, #1
 80039f4:	493b      	ldr	r1, [pc, #236]	; (8003ae4 <_ZN9LineTrace4initEv+0x170>)
 80039f6:	4835      	ldr	r0, [pc, #212]	; (8003acc <_ZN9LineTrace4initEv+0x158>)
 80039f8:	f7fd ffa6 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "MINVEL2.TXT", 1, &temp_min_velocity2);
 80039fc:	f107 0318 	add.w	r3, r7, #24
 8003a00:	2201      	movs	r2, #1
 8003a02:	4939      	ldr	r1, [pc, #228]	; (8003ae8 <_ZN9LineTrace4initEv+0x174>)
 8003a04:	4831      	ldr	r0, [pc, #196]	; (8003acc <_ZN9LineTrace4initEv+0x158>)
 8003a06:	f7fd ff9f 	bl	8001948 <sd_read_array_float>
	setTargetVelocity(temp_velocity);
 8003a0a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003a0e:	eeb0 0a67 	vmov.f32	s0, s15
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f000 f8c7 	bl	8003ba6 <_ZN9LineTrace17setTargetVelocityEf>
	setMaxVelocity(temp_max_velocity);
 8003a18:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003a1c:	eeb0 0a67 	vmov.f32	s0, s15
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f000 f8d0 	bl	8003bc6 <_ZN9LineTrace14setMaxVelocityEf>
	setMaxVelocity2(temp_max_velocity2);
 8003a26:	edd7 7a08 	vldr	s15, [r7, #32]
 8003a2a:	eeb0 0a67 	vmov.f32	s0, s15
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f000 f8d9 	bl	8003be6 <_ZN9LineTrace15setMaxVelocity2Ef>
	setMinVelocity(temp_min_velocity);
 8003a34:	edd7 7a07 	vldr	s15, [r7, #28]
 8003a38:	eeb0 0a67 	vmov.f32	s0, s15
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f000 f8e2 	bl	8003c06 <_ZN9LineTrace14setMinVelocityEf>
	setMinVelocity2(temp_min_velocity2);
 8003a42:	edd7 7a06 	vldr	s15, [r7, #24]
 8003a46:	eeb0 0a67 	vmov.f32	s0, s15
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f000 f8eb 	bl	8003c26 <_ZN9LineTrace15setMinVelocity2Ef>

	float temp_acc, temp_dec;
	sd_read_array_float("PARAMS", "ACC.TXT", 1, &temp_acc);
 8003a50:	f107 0314 	add.w	r3, r7, #20
 8003a54:	2201      	movs	r2, #1
 8003a56:	4925      	ldr	r1, [pc, #148]	; (8003aec <_ZN9LineTrace4initEv+0x178>)
 8003a58:	481c      	ldr	r0, [pc, #112]	; (8003acc <_ZN9LineTrace4initEv+0x158>)
 8003a5a:	f7fd ff75 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "DEC.TXT", 1, &temp_dec);
 8003a5e:	f107 0310 	add.w	r3, r7, #16
 8003a62:	2201      	movs	r2, #1
 8003a64:	4922      	ldr	r1, [pc, #136]	; (8003af0 <_ZN9LineTrace4initEv+0x17c>)
 8003a66:	4819      	ldr	r0, [pc, #100]	; (8003acc <_ZN9LineTrace4initEv+0x158>)
 8003a68:	f7fd ff6e 	bl	8001948 <sd_read_array_float>
	setMaxAccDec(temp_acc, temp_dec);
 8003a6c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003a70:	ed97 7a04 	vldr	s14, [r7, #16]
 8003a74:	eef0 0a47 	vmov.f32	s1, s14
 8003a78:	eeb0 0a67 	vmov.f32	s0, s15
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f000 f932 	bl	8003ce6 <_ZN9LineTrace12setMaxAccDecEff>

	float temp_acc2 = 0, temp_dec2 = 0;
 8003a82:	f04f 0300 	mov.w	r3, #0
 8003a86:	60fb      	str	r3, [r7, #12]
 8003a88:	f04f 0300 	mov.w	r3, #0
 8003a8c:	60bb      	str	r3, [r7, #8]
	sd_read_array_float("PARAMS", "ACC2.TXT", 1, &temp_acc2);
 8003a8e:	f107 030c 	add.w	r3, r7, #12
 8003a92:	2201      	movs	r2, #1
 8003a94:	4917      	ldr	r1, [pc, #92]	; (8003af4 <_ZN9LineTrace4initEv+0x180>)
 8003a96:	480d      	ldr	r0, [pc, #52]	; (8003acc <_ZN9LineTrace4initEv+0x158>)
 8003a98:	f7fd ff56 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "DEC2.TXT", 1, &temp_dec2);
 8003a9c:	f107 0308 	add.w	r3, r7, #8
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	4915      	ldr	r1, [pc, #84]	; (8003af8 <_ZN9LineTrace4initEv+0x184>)
 8003aa4:	4809      	ldr	r0, [pc, #36]	; (8003acc <_ZN9LineTrace4initEv+0x158>)
 8003aa6:	f7fd ff4f 	bl	8001948 <sd_read_array_float>
	setMaxAccDec2(temp_acc2, temp_dec2);
 8003aaa:	edd7 7a03 	vldr	s15, [r7, #12]
 8003aae:	ed97 7a02 	vldr	s14, [r7, #8]
 8003ab2:	eef0 0a47 	vmov.f32	s1, s14
 8003ab6:	eeb0 0a67 	vmov.f32	s0, s15
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f000 f92d 	bl	8003d1a <_ZN9LineTrace13setMaxAccDec2Eff>
}
 8003ac0:	bf00      	nop
 8003ac2:	3738      	adds	r7, #56	; 0x38
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	08019448 	.word	0x08019448
 8003acc:	08019450 	.word	0x08019450
 8003ad0:	08019458 	.word	0x08019458
 8003ad4:	08019460 	.word	0x08019460
 8003ad8:	08019468 	.word	0x08019468
 8003adc:	08019474 	.word	0x08019474
 8003ae0:	08019480 	.word	0x08019480
 8003ae4:	0801948c 	.word	0x0801948c
 8003ae8:	08019498 	.word	0x08019498
 8003aec:	080194a4 	.word	0x080194a4
 8003af0:	080194ac 	.word	0x080194ac
 8003af4:	080194b4 	.word	0x080194b4
 8003af8:	080194c0 	.word	0x080194c0

08003afc <_ZN9LineTrace7setGainEfff>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------------- Line following gain------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::setGain(float kp, float ki, float kd)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b085      	sub	sp, #20
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	60f8      	str	r0, [r7, #12]
 8003b04:	ed87 0a02 	vstr	s0, [r7, #8]
 8003b08:	edc7 0a01 	vstr	s1, [r7, #4]
 8003b0c:	ed87 1a00 	vstr	s2, [r7]
	kp_ = kp;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	68ba      	ldr	r2, [r7, #8]
 8003b14:	629a      	str	r2, [r3, #40]	; 0x28
	ki_ = ki;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	631a      	str	r2, [r3, #48]	; 0x30
	kd_ = kd;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	683a      	ldr	r2, [r7, #0]
 8003b20:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003b22:	bf00      	nop
 8003b24:	3714      	adds	r7, #20
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr

08003b2e <_ZN9LineTrace5getKpEv>:

float LineTrace::getKp()
{
 8003b2e:	b480      	push	{r7}
 8003b30:	b083      	sub	sp, #12
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	6078      	str	r0, [r7, #4]
	return kp_;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b3a:	ee07 3a90 	vmov	s15, r3
}
 8003b3e:	eeb0 0a67 	vmov.f32	s0, s15
 8003b42:	370c      	adds	r7, #12
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr

08003b4c <_ZN9LineTrace5getKiEv>:

float LineTrace::getKi()
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
	return ki_;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b58:	ee07 3a90 	vmov	s15, r3
}
 8003b5c:	eeb0 0a67 	vmov.f32	s0, s15
 8003b60:	370c      	adds	r7, #12
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr

08003b6a <_ZN9LineTrace5getKdEv>:

float LineTrace::getKd()
{
 8003b6a:	b480      	push	{r7}
 8003b6c:	b083      	sub	sp, #12
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	6078      	str	r0, [r7, #4]
	return kd_;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b76:	ee07 3a90 	vmov	s15, r3
}
 8003b7a:	eeb0 0a67 	vmov.f32	s0, s15
 8003b7e:	370c      	adds	r7, #12
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr

08003b88 <_ZN9LineTrace14setNormalRatioEf>:
// ---------------------------------------------------------------------------------------------------//
// ------------------------------ Velocity setting----------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//

void LineTrace::setNormalRatio(float ratio)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	ed87 0a00 	vstr	s0, [r7]
	normal_ratio_ = ratio;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	683a      	ldr	r2, [r7, #0]
 8003b98:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003b9a:	bf00      	nop
 8003b9c:	370c      	adds	r7, #12
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr

08003ba6 <_ZN9LineTrace17setTargetVelocityEf>:

void LineTrace::setTargetVelocity(float velocity)
{
 8003ba6:	b480      	push	{r7}
 8003ba8:	b083      	sub	sp, #12
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]
 8003bae:	ed87 0a00 	vstr	s0, [r7]
	target_velocity_ = velocity;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	683a      	ldr	r2, [r7, #0]
 8003bb6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 8003bba:	bf00      	nop
 8003bbc:	370c      	adds	r7, #12
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr

08003bc6 <_ZN9LineTrace14setMaxVelocityEf>:

void LineTrace::setMaxVelocity(float velocity)
{
 8003bc6:	b480      	push	{r7}
 8003bc8:	b083      	sub	sp, #12
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	6078      	str	r0, [r7, #4]
 8003bce:	ed87 0a00 	vstr	s0, [r7]
	max_velocity_ = velocity;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	683a      	ldr	r2, [r7, #0]
 8003bd6:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
}
 8003bda:	bf00      	nop
 8003bdc:	370c      	adds	r7, #12
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr

08003be6 <_ZN9LineTrace15setMaxVelocity2Ef>:

void LineTrace::setMaxVelocity2(float velocity)
{
 8003be6:	b480      	push	{r7}
 8003be8:	b083      	sub	sp, #12
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	6078      	str	r0, [r7, #4]
 8003bee:	ed87 0a00 	vstr	s0, [r7]
	max_velocity2_ = velocity;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	683a      	ldr	r2, [r7, #0]
 8003bf6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8003bfa:	bf00      	nop
 8003bfc:	370c      	adds	r7, #12
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr

08003c06 <_ZN9LineTrace14setMinVelocityEf>:

void LineTrace::setMinVelocity(float velocity)
{
 8003c06:	b480      	push	{r7}
 8003c08:	b083      	sub	sp, #12
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	6078      	str	r0, [r7, #4]
 8003c0e:	ed87 0a00 	vstr	s0, [r7]
	min_velocity_ = velocity;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	683a      	ldr	r2, [r7, #0]
 8003c16:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
 8003c1a:	bf00      	nop
 8003c1c:	370c      	adds	r7, #12
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr

08003c26 <_ZN9LineTrace15setMinVelocity2Ef>:

void LineTrace::setMinVelocity2(float velocity)
{
 8003c26:	b480      	push	{r7}
 8003c28:	b083      	sub	sp, #12
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	6078      	str	r0, [r7, #4]
 8003c2e:	ed87 0a00 	vstr	s0, [r7]
	min_velocity2_ = velocity;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	683a      	ldr	r2, [r7, #0]
 8003c36:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
}
 8003c3a:	bf00      	nop
 8003c3c:	370c      	adds	r7, #12
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr

08003c46 <_ZN9LineTrace17getTargetVelocityEv>:

float LineTrace::getTargetVelocity()
{
 8003c46:	b480      	push	{r7}
 8003c48:	b083      	sub	sp, #12
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]
	return target_velocity_;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003c54:	ee07 3a90 	vmov	s15, r3
}
 8003c58:	eeb0 0a67 	vmov.f32	s0, s15
 8003c5c:	370c      	adds	r7, #12
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr

08003c66 <_ZN9LineTrace14getMaxVelocityEv>:

float LineTrace::getMaxVelocity()
{
 8003c66:	b480      	push	{r7}
 8003c68:	b083      	sub	sp, #12
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	6078      	str	r0, [r7, #4]
	return max_velocity_;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003c74:	ee07 3a90 	vmov	s15, r3
}
 8003c78:	eeb0 0a67 	vmov.f32	s0, s15
 8003c7c:	370c      	adds	r7, #12
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr

08003c86 <_ZN9LineTrace15getMaxVelocity2Ev>:

float LineTrace::getMaxVelocity2()
{
 8003c86:	b480      	push	{r7}
 8003c88:	b083      	sub	sp, #12
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]
	return max_velocity2_;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c94:	ee07 3a90 	vmov	s15, r3
}
 8003c98:	eeb0 0a67 	vmov.f32	s0, s15
 8003c9c:	370c      	adds	r7, #12
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr

08003ca6 <_ZN9LineTrace14getMinVelocityEv>:

float LineTrace::getMinVelocity()
{
 8003ca6:	b480      	push	{r7}
 8003ca8:	b083      	sub	sp, #12
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
	return min_velocity_;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003cb4:	ee07 3a90 	vmov	s15, r3
}
 8003cb8:	eeb0 0a67 	vmov.f32	s0, s15
 8003cbc:	370c      	adds	r7, #12
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr

08003cc6 <_ZN9LineTrace15getMinVelocity2Ev>:

float LineTrace::getMinVelocity2()
{
 8003cc6:	b480      	push	{r7}
 8003cc8:	b083      	sub	sp, #12
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
	return min_velocity2_;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003cd4:	ee07 3a90 	vmov	s15, r3
}
 8003cd8:	eeb0 0a67 	vmov.f32	s0, s15
 8003cdc:	370c      	adds	r7, #12
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr

08003ce6 <_ZN9LineTrace12setMaxAccDecEff>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------------ Acceleration setting------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::setMaxAccDec(const float acc, const float dec)
{
 8003ce6:	b480      	push	{r7}
 8003ce8:	b085      	sub	sp, #20
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	60f8      	str	r0, [r7, #12]
 8003cee:	ed87 0a02 	vstr	s0, [r7, #8]
 8003cf2:	edc7 0a01 	vstr	s1, [r7, #4]
	max_acc_ = acc;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003cfc:	3328      	adds	r3, #40	; 0x28
 8003cfe:	68ba      	ldr	r2, [r7, #8]
 8003d00:	601a      	str	r2, [r3, #0]
	max_dec_ = dec;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003d08:	332c      	adds	r3, #44	; 0x2c
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	601a      	str	r2, [r3, #0]
}
 8003d0e:	bf00      	nop
 8003d10:	3714      	adds	r7, #20
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr

08003d1a <_ZN9LineTrace13setMaxAccDec2Eff>:

void LineTrace::setMaxAccDec2(const float acc, const float dec)
{
 8003d1a:	b480      	push	{r7}
 8003d1c:	b085      	sub	sp, #20
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	60f8      	str	r0, [r7, #12]
 8003d22:	ed87 0a02 	vstr	s0, [r7, #8]
 8003d26:	edc7 0a01 	vstr	s1, [r7, #4]
	max_acc2_ = acc;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003d30:	3330      	adds	r3, #48	; 0x30
 8003d32:	68ba      	ldr	r2, [r7, #8]
 8003d34:	601a      	str	r2, [r3, #0]
	max_dec2_ = dec;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003d3c:	3334      	adds	r3, #52	; 0x34
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	601a      	str	r2, [r3, #0]
}
 8003d42:	bf00      	nop
 8003d44:	3714      	adds	r7, #20
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr

08003d4e <_ZN9LineTrace9getMaxAccEv>:

float LineTrace::getMaxAcc()
{
 8003d4e:	b480      	push	{r7}
 8003d50:	b083      	sub	sp, #12
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]
	return max_acc_;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003d5c:	3328      	adds	r3, #40	; 0x28
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	ee07 3a90 	vmov	s15, r3
}
 8003d64:	eeb0 0a67 	vmov.f32	s0, s15
 8003d68:	370c      	adds	r7, #12
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr

08003d72 <_ZN9LineTrace10getMaxDec2Ev>:

float LineTrace::getMaxDec2()
{
 8003d72:	b480      	push	{r7}
 8003d74:	b083      	sub	sp, #12
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
	return max_dec2_;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003d80:	3334      	adds	r3, #52	; 0x34
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	ee07 3a90 	vmov	s15, r3
}
 8003d88:	eeb0 0a67 	vmov.f32	s0, s15
 8003d8c:	370c      	adds	r7, #12
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr

08003d96 <_ZN9LineTrace10getMaxAcc2Ev>:

float LineTrace::getMaxAcc2()
{
 8003d96:	b480      	push	{r7}
 8003d98:	b083      	sub	sp, #12
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
	return max_acc2_;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003da4:	3330      	adds	r3, #48	; 0x30
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	ee07 3a90 	vmov	s15, r3
}
 8003dac:	eeb0 0a67 	vmov.f32	s0, s15
 8003db0:	370c      	adds	r7, #12
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr

08003dba <_ZN9LineTrace9getMaxDecEv>:

float LineTrace::getMaxDec()
{
 8003dba:	b480      	push	{r7}
 8003dbc:	b083      	sub	sp, #12
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	6078      	str	r0, [r7, #4]
	return max_dec_;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003dc8:	332c      	adds	r3, #44	; 0x2c
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	ee07 3a90 	vmov	s15, r3
}
 8003dd0:	eeb0 0a67 	vmov.f32	s0, s15
 8003dd4:	370c      	adds	r7, #12
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr
	...

08003de0 <_ZN9LineTrace4flipEv>:

// ---------------------------------------------------------------------------------------------------//
// ---------------------------------------- Flip -----------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::flip()
{
 8003de0:	b590      	push	{r4, r7, lr}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
	if(excution_flag_ == true){
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	f000 8118 	beq.w	8004024 <_ZN9LineTrace4flipEv+0x244>
		// ---- line following processing -----//
		pidTrace();
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f7fe ff8f 	bl	8002d18 <_ZN9LineTrace8pidTraceEv>
		//steeringAngleTrace();


		// ---- Target Velocity Updata ------//
		updateTargetVelocity();
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f7ff fbcc 	bl	8003598 <_ZN9LineTrace20updateTargetVelocityEv>


		// ----- Processing at regular distances -----//
		if(isTargetDistance(10) == true){
 8003e00:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f7ff fc61 	bl	80036cc <_ZN9LineTrace16isTargetDistanceEf>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d040      	beq.n	8003e92 <_ZN9LineTrace4flipEv+0xb2>
			// ---- Store Logs ------//
			storeLogs();
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f7ff f8a9 	bl	8002f68 <_ZN9LineTrace9storeLogsEv>
			logger_->storeLog(imu_->getOmega());
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	69dc      	ldr	r4, [r3, #28]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6a1b      	ldr	r3, [r3, #32]
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f7fd ffe6 	bl	8001df0 <_ZN3IMU8getOmegaEv>
 8003e24:	eef0 7a40 	vmov.f32	s15, s0
 8003e28:	eeb0 0a67 	vmov.f32	s0, s15
 8003e2c:	4620      	mov	r0, r4
 8003e2e:	f000 fc57 	bl	80046e0 <_ZN6Logger8storeLogEf>
			logger_->storeLog2(target_omega_);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	69da      	ldr	r2, [r3, #28]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	edd3 7a2a 	vldr	s15, [r3, #168]	; 0xa8
 8003e3c:	eeb0 0a67 	vmov.f32	s0, s15
 8003e40:	4610      	mov	r0, r2
 8003e42:	f000 fc8a 	bl	800475a <_ZN6Logger9storeLog2Ef>

			// -------- Detect Robot stabilization ------//
			if(isStable() == true && (~(side_sensor_->getStatus()) & 0x02) == 0x02){ // Stabilizing and side sensor is black
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f7ff fd22 	bl	8003890 <_ZN9LineTrace8isStableEv>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d00c      	beq.n	8003e6c <_ZN9LineTrace4flipEv+0x8c>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	691b      	ldr	r3, [r3, #16]
 8003e56:	4618      	mov	r0, r3
 8003e58:	f001 fb54 	bl	8005504 <_ZN10SideSensor9getStatusEv>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	43db      	mvns	r3, r3
 8003e60:	f003 0302 	and.w	r3, r3, #2
 8003e64:	2b02      	cmp	r3, #2
 8003e66:	d101      	bne.n	8003e6c <_ZN9LineTrace4flipEv+0x8c>
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e000      	b.n	8003e6e <_ZN9LineTrace4flipEv+0x8e>
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d005      	beq.n	8003e7e <_ZN9LineTrace4flipEv+0x9e>
				stable_flag_ = true;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003e78:	3323      	adds	r3, #35	; 0x23
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	701a      	strb	r2, [r3, #0]
			}

			// ---reset total cnt ---//
			encoder_->clearDistance10mm();
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	695b      	ldr	r3, [r3, #20]
 8003e82:	4618      	mov	r0, r3
 8003e84:	f7fd fc4c 	bl	8001720 <_ZN7Encoder17clearDistance10mmEv>
			odometry_->clearPotition();
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	699b      	ldr	r3, [r3, #24]
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f001 f8ab 	bl	8004fe8 <_ZN8Odometry13clearPotitionEv>
		}


		// ----- cross line ignore processing ------//
		if(isCrossLine() == true){ //detect cross line
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f7ff fc3c 	bl	8003710 <_ZN9LineTrace11isCrossLineEv>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d009      	beq.n	8003eb2 <_ZN9LineTrace4flipEv+0xd2>
			side_sensor_->enableIgnore();
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f001 fb56 	bl	8005554 <_ZN10SideSensor12enableIgnoreEv>
			encoder_->clearCrossLineIgnoreDistance();
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	695b      	ldr	r3, [r3, #20]
 8003eac:	4618      	mov	r0, r3
 8003eae:	f7fd fc62 	bl	8001776 <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
			// Note: Store cross line distance here.
		}

		if(side_sensor_->getIgnoreFlag() == true && encoder_->getCrossLineIgnoreDistance() >= 200){
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	691b      	ldr	r3, [r3, #16]
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f001 fb66 	bl	8005588 <_ZN10SideSensor13getIgnoreFlagEv>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d00f      	beq.n	8003ee2 <_ZN9LineTrace4flipEv+0x102>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	695b      	ldr	r3, [r3, #20]
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f7fd fc46 	bl	8001758 <_ZN7Encoder26getCrossLineIgnoreDistanceEv>
 8003ecc:	eeb0 7a40 	vmov.f32	s14, s0
 8003ed0:	eddf 7a56 	vldr	s15, [pc, #344]	; 800402c <_ZN9LineTrace4flipEv+0x24c>
 8003ed4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003edc:	db01      	blt.n	8003ee2 <_ZN9LineTrace4flipEv+0x102>
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e000      	b.n	8003ee4 <_ZN9LineTrace4flipEv+0x104>
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d004      	beq.n	8003ef2 <_ZN9LineTrace4flipEv+0x112>
			side_sensor_->disableIgnore();
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	691b      	ldr	r3, [r3, #16]
 8003eec:	4618      	mov	r0, r3
 8003eee:	f001 fb3e 	bl	800556e <_ZN10SideSensor13disableIgnoreEv>
		}

		// ------- Store side line distance or correction distance------//
		if(stable_flag_ == true && (side_sensor_->getStatus() & 0x02) == 0x02){ //stabilizing and side sensor is white
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003ef8:	3323      	adds	r3, #35	; 0x23
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d00b      	beq.n	8003f18 <_ZN9LineTrace4flipEv+0x138>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	691b      	ldr	r3, [r3, #16]
 8003f04:	4618      	mov	r0, r3
 8003f06:	f001 fafd 	bl	8005504 <_ZN10SideSensor9getStatusEv>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	f003 0302 	and.w	r3, r3, #2
 8003f10:	2b02      	cmp	r3, #2
 8003f12:	d101      	bne.n	8003f18 <_ZN9LineTrace4flipEv+0x138>
 8003f14:	2301      	movs	r3, #1
 8003f16:	e000      	b.n	8003f1a <_ZN9LineTrace4flipEv+0x13a>
 8003f18:	2300      	movs	r3, #0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d020      	beq.n	8003f60 <_ZN9LineTrace4flipEv+0x180>
			//storeSideLineDistance();
			if(mode_selector_ == FIRST_RUNNING){
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003f24:	3348      	adds	r3, #72	; 0x48
 8003f26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d103      	bne.n	8003f36 <_ZN9LineTrace4flipEv+0x156>
				storeSideLineDistance();
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f7fe ffe1 	bl	8002ef6 <_ZN9LineTrace21storeSideLineDistanceEv>
 8003f34:	e008      	b.n	8003f48 <_ZN9LineTrace4flipEv+0x168>
			}
			else{
				correctionTotalDistanceFromSideMarker();
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f7ff f8a6 	bl	8003088 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv>
				correction_check_cnt_ = 0;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003f42:	3338      	adds	r3, #56	; 0x38
 8003f44:	2200      	movs	r2, #0
 8003f46:	801a      	strh	r2, [r3, #0]
			}

			stable_flag_ = false;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003f4e:	3323      	adds	r3, #35	; 0x23
 8003f50:	2200      	movs	r2, #0
 8003f52:	701a      	strb	r2, [r3, #0]
			stable_cnt_reset_flag_ = true;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003f5a:	3324      	adds	r3, #36	; 0x24
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	701a      	strb	r2, [r3, #0]
		}

		if(stable_flag_ == true) led_.LR(-1, 1);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003f66:	3323      	adds	r3, #35	; 0x23
 8003f68:	781b      	ldrb	r3, [r3, #0]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d008      	beq.n	8003f80 <_ZN9LineTrace4flipEv+0x1a0>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	330c      	adds	r3, #12
 8003f72:	2201      	movs	r2, #1
 8003f74:	f04f 31ff 	mov.w	r1, #4294967295
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f7fe f9b7 	bl	80022ec <_ZN3LED2LREaa>
 8003f7e:	e007      	b.n	8003f90 <_ZN9LineTrace4flipEv+0x1b0>
		else led_.LR(-1, 0);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	330c      	adds	r3, #12
 8003f84:	2200      	movs	r2, #0
 8003f86:	f04f 31ff 	mov.w	r1, #4294967295
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f7fe f9ae 	bl	80022ec <_ZN3LED2LREaa>
			all_sideline_flag_ = false;
		}
		*/

		// ----- Emergency stop processing------//
		if(line_sensor_->emergencyStop() == true){
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	4618      	mov	r0, r3
 8003f96:	f7fe fca9 	bl	80028ec <_ZN10LineSensor13emergencyStopEv>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d00d      	beq.n	8003fbc <_ZN9LineTrace4flipEv+0x1dc>
			velocity_ctrl_->setTranslationVelocityOnly(0, 0);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	eddf 0a22 	vldr	s1, [pc, #136]	; 8004030 <_ZN9LineTrace4flipEv+0x250>
 8003fa8:	ed9f 0a21 	vldr	s0, [pc, #132]	; 8004030 <_ZN9LineTrace4flipEv+0x250>
 8003fac:	4618      	mov	r0, r3
 8003fae:	f001 fcd7 	bl	8005960 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>
			esc_->off();
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f7fd f9e4 	bl	8001384 <_ZN3ESC3offEv>
		else{
			//led_.LR(0, -1);
		}

		// ---------Confirmation when corrected ------------//
		correction_check_cnt_++;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003fc2:	3338      	adds	r3, #56	; 0x38
 8003fc4:	881b      	ldrh	r3, [r3, #0]
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	b29a      	uxth	r2, r3
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003fd0:	3338      	adds	r3, #56	; 0x38
 8003fd2:	801a      	strh	r2, [r3, #0]
		if(correction_check_cnt_ >= 10000) correction_check_cnt_ = 10000;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003fda:	3338      	adds	r3, #56	; 0x38
 8003fdc:	881b      	ldrh	r3, [r3, #0]
 8003fde:	f242 720f 	movw	r2, #9999	; 0x270f
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d906      	bls.n	8003ff4 <_ZN9LineTrace4flipEv+0x214>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003fec:	3338      	adds	r3, #56	; 0x38
 8003fee:	f242 7210 	movw	r2, #10000	; 0x2710
 8003ff2:	801a      	strh	r2, [r3, #0]

		if(correction_check_cnt_ <= 80) led_.LR(-1, 1);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8003ffa:	3338      	adds	r3, #56	; 0x38
 8003ffc:	881b      	ldrh	r3, [r3, #0]
 8003ffe:	2b50      	cmp	r3, #80	; 0x50
 8004000:	d808      	bhi.n	8004014 <_ZN9LineTrace4flipEv+0x234>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	330c      	adds	r3, #12
 8004006:	2201      	movs	r2, #1
 8004008:	f04f 31ff 	mov.w	r1, #4294967295
 800400c:	4618      	mov	r0, r3
 800400e:	f7fe f96d 	bl	80022ec <_ZN3LED2LREaa>
		else led_.LR(-1, 0);
	}
}
 8004012:	e007      	b.n	8004024 <_ZN9LineTrace4flipEv+0x244>
		else led_.LR(-1, 0);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	330c      	adds	r3, #12
 8004018:	2200      	movs	r2, #0
 800401a:	f04f 31ff 	mov.w	r1, #4294967295
 800401e:	4618      	mov	r0, r3
 8004020:	f7fe f964 	bl	80022ec <_ZN3LED2LREaa>
}
 8004024:	bf00      	nop
 8004026:	370c      	adds	r7, #12
 8004028:	46bd      	mov	sp, r7
 800402a:	bd90      	pop	{r4, r7, pc}
 800402c:	43480000 	.word	0x43480000
 8004030:	00000000 	.word	0x00000000

08004034 <_ZN9LineTrace7setModeEs>:

// ---------------------------------------------------------------------------------------------------//
// ---------------------------------- Mode set to stop------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::setMode(int16_t mode)
{
 8004034:	b480      	push	{r7}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	460b      	mov	r3, r1
 800403e:	807b      	strh	r3, [r7, #2]
	mode_selector_ = mode;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004046:	3348      	adds	r3, #72	; 0x48
 8004048:	887a      	ldrh	r2, [r7, #2]
 800404a:	801a      	strh	r2, [r3, #0]
}
 800404c:	bf00      	nop
 800404e:	370c      	adds	r7, #12
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr

08004058 <_ZN9LineTrace5startEv>:

void LineTrace::start()
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2201      	movs	r2, #1
 8004064:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	i_reset_flag_ = true;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	velocity_ctrl_->start();
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	4618      	mov	r0, r3
 8004076:	f001 fccc 	bl	8005a12 <_ZN12VelocityCtrl5startEv>
	side_sensor_->resetWhiteLineCnt();
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	691b      	ldr	r3, [r3, #16]
 800407e:	4618      	mov	r0, r3
 8004080:	f001 fa58 	bl	8005534 <_ZN10SideSensor17resetWhiteLineCntEv>
	crossline_idx_ = 0;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 800408a:	331c      	adds	r3, #28
 800408c:	2200      	movs	r2, #0
 800408e:	801a      	strh	r2, [r3, #0]
	sideline_idx_ = 0;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8004096:	331e      	adds	r3, #30
 8004098:	2200      	movs	r2, #0
 800409a:	801a      	strh	r2, [r3, #0]
	all_sideline_idx_ = 0;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80040a2:	3320      	adds	r3, #32
 80040a4:	2200      	movs	r2, #0
 80040a6:	801a      	strh	r2, [r3, #0]
}
 80040a8:	bf00      	nop
 80040aa:	3708      	adds	r7, #8
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <_ZN9LineTrace7runningEv>:


void LineTrace::running()
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b084      	sub	sp, #16
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
	uint16_t stage = 0;
 80040b8:	2300      	movs	r3, #0
 80040ba:	81fb      	strh	r3, [r7, #14]
	bool goal_flag = false;
 80040bc:	2300      	movs	r3, #0
 80040be:	737b      	strb	r3, [r7, #13]
	start();
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f7ff ffc9 	bl	8004058 <_ZN9LineTrace5startEv>

	while(goal_flag == false){
 80040c6:	7b7b      	ldrb	r3, [r7, #13]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d15b      	bne.n	8004184 <_ZN9LineTrace7runningEv+0xd4>
		switch(stage){
 80040cc:	89fb      	ldrh	r3, [r7, #14]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d002      	beq.n	80040d8 <_ZN9LineTrace7runningEv+0x28>
 80040d2:	2b0a      	cmp	r3, #10
 80040d4:	d030      	beq.n	8004138 <_ZN9LineTrace7runningEv+0x88>
 80040d6:	e054      	b.n	8004182 <_ZN9LineTrace7runningEv+0xd2>
		case 0:
			if(side_sensor_->getWhiteLineCntR() == 1){
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	691b      	ldr	r3, [r3, #16]
 80040dc:	4618      	mov	r0, r3
 80040de:	f001 fa1d 	bl	800551c <_ZN10SideSensor16getWhiteLineCntREv>
 80040e2:	4603      	mov	r3, r0
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	bf0c      	ite	eq
 80040e8:	2301      	moveq	r3, #1
 80040ea:	2300      	movne	r3, #0
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d044      	beq.n	800417c <_ZN9LineTrace7runningEv+0xcc>
				loggerStart();
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f7fe fe9c 	bl	8002e30 <_ZN9LineTrace11loggerStartEv>
				if(mode_selector_ != FIRST_RUNNING){ // Other than first running
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80040fe:	3348      	adds	r3, #72	; 0x48
 8004100:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d002      	beq.n	800410e <_ZN9LineTrace7runningEv+0x5e>
					startVelocityPlay();
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f7ff fa15 	bl	8003538 <_ZN9LineTrace17startVelocityPlayEv>
				}

				encoder_->clearCrossLineIgnoreDistance();
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	695b      	ldr	r3, [r3, #20]
 8004112:	4618      	mov	r0, r3
 8004114:	f7fd fb2f 	bl	8001776 <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
				encoder_->clearTotalDistance();
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	695b      	ldr	r3, [r3, #20]
 800411c:	4618      	mov	r0, r3
 800411e:	f7fd fb0d 	bl	800173c <_ZN7Encoder18clearTotalDistanceEv>
				led_.LR(0, -1);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	330c      	adds	r3, #12
 8004126:	f04f 32ff 	mov.w	r2, #4294967295
 800412a:	2100      	movs	r1, #0
 800412c:	4618      	mov	r0, r3
 800412e:	f7fe f8dd 	bl	80022ec <_ZN3LED2LREaa>
				stage = 10;
 8004132:	230a      	movs	r3, #10
 8004134:	81fb      	strh	r3, [r7, #14]
			}

			break;
 8004136:	e021      	b.n	800417c <_ZN9LineTrace7runningEv+0xcc>

		case 10:
			if(side_sensor_->getWhiteLineCntR() == 2){
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	691b      	ldr	r3, [r3, #16]
 800413c:	4618      	mov	r0, r3
 800413e:	f001 f9ed 	bl	800551c <_ZN10SideSensor16getWhiteLineCntREv>
 8004142:	4603      	mov	r3, r0
 8004144:	2b02      	cmp	r3, #2
 8004146:	bf0c      	ite	eq
 8004148:	2301      	moveq	r3, #1
 800414a:	2300      	movne	r3, #0
 800414c:	b2db      	uxtb	r3, r3
 800414e:	2b00      	cmp	r3, #0
 8004150:	d016      	beq.n	8004180 <_ZN9LineTrace7runningEv+0xd0>
				loggerStop();
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f7fe fe87 	bl	8002e66 <_ZN9LineTrace10loggerStopEv>
				stopVelocityPlay();
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f7ff fa00 	bl	800355e <_ZN9LineTrace16stopVelocityPlayEv>
				HAL_Delay(100); //Run through after the goal
 800415e:	2064      	movs	r0, #100	; 0x64
 8004160:	f005 f9b4 	bl	80094cc <HAL_Delay>

				setTargetVelocity(0);
 8004164:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8004194 <_ZN9LineTrace7runningEv+0xe4>
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f7ff fd1c 	bl	8003ba6 <_ZN9LineTrace17setTargetVelocityEf>
				HAL_Delay(500); //Stop for a while on the spot
 800416e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004172:	f005 f9ab 	bl	80094cc <HAL_Delay>

				goal_flag = true;
 8004176:	2301      	movs	r3, #1
 8004178:	737b      	strb	r3, [r7, #13]

			}

			break;
 800417a:	e001      	b.n	8004180 <_ZN9LineTrace7runningEv+0xd0>
			break;
 800417c:	bf00      	nop
 800417e:	e7a2      	b.n	80040c6 <_ZN9LineTrace7runningEv+0x16>
			break;
 8004180:	bf00      	nop
	while(goal_flag == false){
 8004182:	e7a0      	b.n	80040c6 <_ZN9LineTrace7runningEv+0x16>
		}
	}

	stop();
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f000 f807 	bl	8004198 <_ZN9LineTrace4stopEv>
}
 800418a:	bf00      	nop
 800418c:	3710      	adds	r7, #16
 800418e:	46bd      	mov	sp, r7
 8004190:	bd80      	pop	{r7, pc}
 8004192:	bf00      	nop
 8004194:	00000000 	.word	0x00000000

08004198 <_ZN9LineTrace4stopEv>:

void LineTrace::stop()
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af02      	add	r7, sp, #8
 800419e:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	velocity_ctrl_->stop();
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	4618      	mov	r0, r3
 80041ae:	f001 fc43 	bl	8005a38 <_ZN12VelocityCtrl4stopEv>

	led_.LR(-1, 1);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	330c      	adds	r3, #12
 80041b6:	2201      	movs	r2, #1
 80041b8:	f04f 31ff 	mov.w	r1, #4294967295
 80041bc:	4618      	mov	r0, r3
 80041be:	f7fe f895 	bl	80022ec <_ZN3LED2LREaa>
	if(mode_selector_ == FIRST_RUNNING){ //First running
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80041c8:	3348      	adds	r3, #72	; 0x48
 80041ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d107      	bne.n	80041e2 <_ZN9LineTrace4stopEv+0x4a>
		logger_->saveDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	69d8      	ldr	r0, [r3, #28]
 80041d6:	4b23      	ldr	r3, [pc, #140]	; (8004264 <_ZN9LineTrace4stopEv+0xcc>)
 80041d8:	4a23      	ldr	r2, [pc, #140]	; (8004268 <_ZN9LineTrace4stopEv+0xd0>)
 80041da:	4924      	ldr	r1, [pc, #144]	; (800426c <_ZN9LineTrace4stopEv+0xd4>)
 80041dc:	f000 fbd1 	bl	8004982 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>
 80041e0:	e006      	b.n	80041f0 <_ZN9LineTrace4stopEv+0x58>
	}
	else{//Secondary run
		logger_->saveDistanceAndTheta2("COURSLOG", "DISTANC2.TXT", "THETA2.TXT");
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	69d8      	ldr	r0, [r3, #28]
 80041e6:	4b22      	ldr	r3, [pc, #136]	; (8004270 <_ZN9LineTrace4stopEv+0xd8>)
 80041e8:	4a22      	ldr	r2, [pc, #136]	; (8004274 <_ZN9LineTrace4stopEv+0xdc>)
 80041ea:	4920      	ldr	r1, [pc, #128]	; (800426c <_ZN9LineTrace4stopEv+0xd4>)
 80041ec:	f000 fbec 	bl	80049c8 <_ZN6Logger21saveDistanceAndTheta2EPKcS1_S1_>
	}
	sd_write_array_float("COURSLOG", "CROSSDIS.TXT", CROSSLINE_SIZE, crossline_distance_, OVER_WRITE);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80041f6:	334c      	adds	r3, #76	; 0x4c
 80041f8:	2200      	movs	r2, #0
 80041fa:	9200      	str	r2, [sp, #0]
 80041fc:	2264      	movs	r2, #100	; 0x64
 80041fe:	491e      	ldr	r1, [pc, #120]	; (8004278 <_ZN9LineTrace4stopEv+0xe0>)
 8004200:	481a      	ldr	r0, [pc, #104]	; (800426c <_ZN9LineTrace4stopEv+0xd4>)
 8004202:	f7fd fb3b 	bl	800187c <sd_write_array_float>
	sd_write_array_float("COURSLOG", "SIDEDIS.TXT", SIDELINE_SIZE, sideline_distance_, OVER_WRITE);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f503 433d 	add.w	r3, r3, #48384	; 0xbd00
 800420c:	33dc      	adds	r3, #220	; 0xdc
 800420e:	2200      	movs	r2, #0
 8004210:	9200      	str	r2, [sp, #0]
 8004212:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004216:	4919      	ldr	r1, [pc, #100]	; (800427c <_ZN9LineTrace4stopEv+0xe4>)
 8004218:	4814      	ldr	r0, [pc, #80]	; (800426c <_ZN9LineTrace4stopEv+0xd4>)
 800421a:	f7fd fb2f 	bl	800187c <sd_write_array_float>
	sd_write_array_float("COURSLOG", "ASIDEDIS.TXT", SIDELINE_SIZE, all_sideline_distance_, OVER_WRITE);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8004224:	337c      	adds	r3, #124	; 0x7c
 8004226:	2200      	movs	r2, #0
 8004228:	9200      	str	r2, [sp, #0]
 800422a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800422e:	4914      	ldr	r1, [pc, #80]	; (8004280 <_ZN9LineTrace4stopEv+0xe8>)
 8004230:	480e      	ldr	r0, [pc, #56]	; (800426c <_ZN9LineTrace4stopEv+0xd4>)
 8004232:	f7fd fb23 	bl	800187c <sd_write_array_float>

	led_.LR(-1, 0);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	330c      	adds	r3, #12
 800423a:	2200      	movs	r2, #0
 800423c:	f04f 31ff 	mov.w	r1, #4294967295
 8004240:	4618      	mov	r0, r3
 8004242:	f7fe f853 	bl	80022ec <_ZN3LED2LREaa>

	logger_->resetIdx();
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	69db      	ldr	r3, [r3, #28]
 800424a:	4618      	mov	r0, r3
 800424c:	f000 fc4a 	bl	8004ae4 <_ZN6Logger8resetIdxEv>
	logger_->resetLogs2();
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	69db      	ldr	r3, [r3, #28]
 8004254:	4618      	mov	r0, r3
 8004256:	f000 fbf9 	bl	8004a4c <_ZN6Logger10resetLogs2Ev>
}
 800425a:	bf00      	nop
 800425c:	3708      	adds	r7, #8
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	080194cc 	.word	0x080194cc
 8004268:	080194d8 	.word	0x080194d8
 800426c:	080194e8 	.word	0x080194e8
 8004270:	080194f4 	.word	0x080194f4
 8004274:	08019500 	.word	0x08019500
 8004278:	08019510 	.word	0x08019510
 800427c:	08019520 	.word	0x08019520
 8004280:	0801952c 	.word	0x0801952c

08004284 <_ZN9LineTrace20createVelocityTabeleEv>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------------ Create velocity table-----------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::createVelocityTabele()
{
 8004284:	b590      	push	{r4, r7, lr}
 8004286:	b08b      	sub	sp, #44	; 0x2c
 8004288:	af02      	add	r7, sp, #8
 800428a:	6078      	str	r0, [r7, #4]
	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	69db      	ldr	r3, [r3, #28]
 8004290:	4618      	mov	r0, r3
 8004292:	f000 fb31 	bl	80048f8 <_ZN6Logger23getDistanceArrayPointerEv>
 8004296:	6138      	str	r0, [r7, #16]
	p_theta= logger_->getThetaArrayPointer();
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	69db      	ldr	r3, [r3, #28]
 800429c:	4618      	mov	r0, r3
 800429e:	f000 fb38 	bl	8004912 <_ZN6Logger20getThetaArrayPointerEv>
 80042a2:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 80042a4:	2300      	movs	r3, #0
 80042a6:	837b      	strh	r3, [r7, #26]
 80042a8:	8b7b      	ldrh	r3, [r7, #26]
 80042aa:	f241 726f 	movw	r2, #5999	; 0x176f
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d84a      	bhi.n	8004348 <_ZN9LineTrace20createVelocityTabeleEv+0xc4>
		temp_distance = p_distance[i];
 80042b2:	8b7b      	ldrh	r3, [r7, #26]
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	693a      	ldr	r2, [r7, #16]
 80042b8:	4413      	add	r3, r2
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 80042be:	8b7b      	ldrh	r3, [r7, #26]
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	68fa      	ldr	r2, [r7, #12]
 80042c4:	4413      	add	r3, r2
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	61fb      	str	r3, [r7, #28]

		if(temp_theta == 0) temp_theta = 0.00001;
 80042ca:	edd7 7a07 	vldr	s15, [r7, #28]
 80042ce:	eef5 7a40 	vcmp.f32	s15, #0.0
 80042d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042d6:	d101      	bne.n	80042dc <_ZN9LineTrace20createVelocityTabeleEv+0x58>
 80042d8:	4b4c      	ldr	r3, [pc, #304]	; (800440c <_ZN9LineTrace20createVelocityTabeleEv+0x188>)
 80042da:	61fb      	str	r3, [r7, #28]
		float radius = abs(temp_distance / temp_theta);
 80042dc:	ed97 7a02 	vldr	s14, [r7, #8]
 80042e0:	edd7 7a07 	vldr	s15, [r7, #28]
 80042e4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80042e8:	eeb0 0a66 	vmov.f32	s0, s13
 80042ec:	f7fe fb54 	bl	8002998 <_ZSt3absf>
 80042f0:	ed87 0a05 	vstr	s0, [r7, #20]
		if(radius >= 5000) radius = 5000;
 80042f4:	edd7 7a05 	vldr	s15, [r7, #20]
 80042f8:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8004410 <_ZN9LineTrace20createVelocityTabeleEv+0x18c>
 80042fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004304:	db01      	blt.n	800430a <_ZN9LineTrace20createVelocityTabeleEv+0x86>
 8004306:	4b43      	ldr	r3, [pc, #268]	; (8004414 <_ZN9LineTrace20createVelocityTabeleEv+0x190>)
 8004308:	617b      	str	r3, [r7, #20]

		velocity_table_[i] = radius2Velocity(radius);
 800430a:	8b7c      	ldrh	r4, [r7, #26]
 800430c:	ed97 0a05 	vldr	s0, [r7, #20]
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f7fe ff13 	bl	800313c <_ZN9LineTrace15radius2VelocityEf>
 8004316:	eef0 7a40 	vmov.f32	s15, s0
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 8004320:	009b      	lsls	r3, r3, #2
 8004322:	4413      	add	r3, r2
 8004324:	3304      	adds	r3, #4
 8004326:	edc3 7a00 	vstr	s15, [r3]

		ref_delta_distances_[i] = p_distance[i]; //copy
 800432a:	8b7b      	ldrh	r3, [r7, #26]
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	693a      	ldr	r2, [r7, #16]
 8004330:	441a      	add	r2, r3
 8004332:	8b7b      	ldrh	r3, [r7, #26]
 8004334:	6812      	ldr	r2, [r2, #0]
 8004336:	6879      	ldr	r1, [r7, #4]
 8004338:	3330      	adds	r3, #48	; 0x30
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	440b      	add	r3, r1
 800433e:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8004340:	8b7b      	ldrh	r3, [r7, #26]
 8004342:	3301      	adds	r3, #1
 8004344:	837b      	strh	r3, [r7, #26]
 8004346:	e7af      	b.n	80042a8 <_ZN9LineTrace20createVelocityTabeleEv+0x24>
	}


	if(mode_selector_ == SECOND_RUNNING){
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800434e:	3348      	adds	r3, #72	; 0x48
 8004350:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004354:	2b01      	cmp	r3, #1
 8004356:	d120      	bne.n	800439a <_ZN9LineTrace20createVelocityTabeleEv+0x116>
		velocity_table_[0] = min_velocity_;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004364:	3304      	adds	r3, #4
 8004366:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec_, p_distance);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 800436e:	332c      	adds	r3, #44	; 0x2c
 8004370:	edd3 7a00 	vldr	s15, [r3]
 8004374:	6939      	ldr	r1, [r7, #16]
 8004376:	eeb0 0a67 	vmov.f32	s0, s15
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f7fe ff94 	bl	80032a8 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc_, p_distance);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8004386:	3328      	adds	r3, #40	; 0x28
 8004388:	edd3 7a00 	vldr	s15, [r3]
 800438c:	6939      	ldr	r1, [r7, #16]
 800438e:	eeb0 0a67 	vmov.f32	s0, s15
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f7ff f82c 	bl	80033f0 <_ZN9LineTrace20accelerateProcessingEfPKf>
 8004398:	e027      	b.n	80043ea <_ZN9LineTrace20createVelocityTabeleEv+0x166>
	}
	else if(mode_selector_ == THIRD_RUNNING){
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80043a0:	3348      	adds	r3, #72	; 0x48
 80043a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80043a6:	2b02      	cmp	r3, #2
 80043a8:	d11f      	bne.n	80043ea <_ZN9LineTrace20createVelocityTabeleEv+0x166>
		velocity_table_[0] = min_velocity2_;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80043b6:	3304      	adds	r3, #4
 80043b8:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec2_, p_distance);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80043c0:	3334      	adds	r3, #52	; 0x34
 80043c2:	edd3 7a00 	vldr	s15, [r3]
 80043c6:	6939      	ldr	r1, [r7, #16]
 80043c8:	eeb0 0a67 	vmov.f32	s0, s15
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f7fe ff6b 	bl	80032a8 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc2_, p_distance);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80043d8:	3330      	adds	r3, #48	; 0x30
 80043da:	edd3 7a00 	vldr	s15, [r3]
 80043de:	6939      	ldr	r1, [r7, #16]
 80043e0:	eeb0 0a67 	vmov.f32	s0, s15
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f7ff f803 	bl	80033f0 <_ZN9LineTrace20accelerateProcessingEfPKf>
	}

	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80043f0:	3304      	adds	r3, #4
 80043f2:	2200      	movs	r2, #0
 80043f4:	9200      	str	r2, [sp, #0]
 80043f6:	f241 7270 	movw	r2, #6000	; 0x1770
 80043fa:	4907      	ldr	r1, [pc, #28]	; (8004418 <_ZN9LineTrace20createVelocityTabeleEv+0x194>)
 80043fc:	4807      	ldr	r0, [pc, #28]	; (800441c <_ZN9LineTrace20createVelocityTabeleEv+0x198>)
 80043fe:	f7fd fa3d 	bl	800187c <sd_write_array_float>

}
 8004402:	bf00      	nop
 8004404:	3724      	adds	r7, #36	; 0x24
 8004406:	46bd      	mov	sp, r7
 8004408:	bd90      	pop	{r4, r7, pc}
 800440a:	bf00      	nop
 800440c:	3727c5ac 	.word	0x3727c5ac
 8004410:	459c4000 	.word	0x459c4000
 8004414:	459c4000 	.word	0x459c4000
 8004418:	0801953c 	.word	0x0801953c
 800441c:	080194e8 	.word	0x080194e8

08004420 <_ZN9LineTrace26createVelocityTabeleFromSDEv>:

void LineTrace::createVelocityTabeleFromSD()
{
 8004420:	b590      	push	{r4, r7, lr}
 8004422:	b08b      	sub	sp, #44	; 0x2c
 8004424:	af02      	add	r7, sp, #8
 8004426:	6078      	str	r0, [r7, #4]
	logger_->importDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	69d8      	ldr	r0, [r3, #28]
 800442c:	4b6b      	ldr	r3, [pc, #428]	; (80045dc <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1bc>)
 800442e:	4a6c      	ldr	r2, [pc, #432]	; (80045e0 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c0>)
 8004430:	496c      	ldr	r1, [pc, #432]	; (80045e4 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 8004432:	f000 faed 	bl	8004a10 <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>
	sd_read_array_float("COURSLOG", "CROSSDIS.TXT", CROSSLINE_SIZE, crossline_distance_);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800443c:	334c      	adds	r3, #76	; 0x4c
 800443e:	2264      	movs	r2, #100	; 0x64
 8004440:	4969      	ldr	r1, [pc, #420]	; (80045e8 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c8>)
 8004442:	4868      	ldr	r0, [pc, #416]	; (80045e4 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 8004444:	f7fd fa80 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("COURSLOG", "SIDEDIS.TXT", SIDELINE_SIZE, sideline_distance_);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f503 433d 	add.w	r3, r3, #48384	; 0xbd00
 800444e:	33dc      	adds	r3, #220	; 0xdc
 8004450:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004454:	4965      	ldr	r1, [pc, #404]	; (80045ec <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1cc>)
 8004456:	4863      	ldr	r0, [pc, #396]	; (80045e4 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 8004458:	f7fd fa76 	bl	8001948 <sd_read_array_float>

	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	69db      	ldr	r3, [r3, #28]
 8004460:	4618      	mov	r0, r3
 8004462:	f000 fa49 	bl	80048f8 <_ZN6Logger23getDistanceArrayPointerEv>
 8004466:	6138      	str	r0, [r7, #16]
	p_theta= logger_->getThetaArrayPointer();
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	69db      	ldr	r3, [r3, #28]
 800446c:	4618      	mov	r0, r3
 800446e:	f000 fa50 	bl	8004912 <_ZN6Logger20getThetaArrayPointerEv>
 8004472:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	//float pre_radius = 0;;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8004474:	2300      	movs	r3, #0
 8004476:	837b      	strh	r3, [r7, #26]
 8004478:	8b7b      	ldrh	r3, [r7, #26]
 800447a:	f241 726f 	movw	r2, #5999	; 0x176f
 800447e:	4293      	cmp	r3, r2
 8004480:	d84a      	bhi.n	8004518 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xf8>

		temp_distance = p_distance[i];
 8004482:	8b7b      	ldrh	r3, [r7, #26]
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	693a      	ldr	r2, [r7, #16]
 8004488:	4413      	add	r3, r2
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 800448e:	8b7b      	ldrh	r3, [r7, #26]
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	68fa      	ldr	r2, [r7, #12]
 8004494:	4413      	add	r3, r2
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	61fb      	str	r3, [r7, #28]

		if(temp_theta == 0) temp_theta = 0.00001;
 800449a:	edd7 7a07 	vldr	s15, [r7, #28]
 800449e:	eef5 7a40 	vcmp.f32	s15, #0.0
 80044a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044a6:	d101      	bne.n	80044ac <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x8c>
 80044a8:	4b51      	ldr	r3, [pc, #324]	; (80045f0 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d0>)
 80044aa:	61fb      	str	r3, [r7, #28]
		float radius_origin = abs(temp_distance / temp_theta);
 80044ac:	ed97 7a02 	vldr	s14, [r7, #8]
 80044b0:	edd7 7a07 	vldr	s15, [r7, #28]
 80044b4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80044b8:	eeb0 0a66 	vmov.f32	s0, s13
 80044bc:	f7fe fa6c 	bl	8002998 <_ZSt3absf>
 80044c0:	ed87 0a05 	vstr	s0, [r7, #20]
		if(radius_origin >= 5000) radius_origin = 5000;
 80044c4:	edd7 7a05 	vldr	s15, [r7, #20]
 80044c8:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80045f4 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d4>
 80044cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044d4:	db01      	blt.n	80044da <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xba>
 80044d6:	4b48      	ldr	r3, [pc, #288]	; (80045f8 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d8>)
 80044d8:	617b      	str	r3, [r7, #20]

		//float radius_lpf = ((R_RADIUS)*(radius_origin) + (1.0 - (R_RADIUS))* (pre_radius));
		//velocity_table_[i] = radius_lpf;
		velocity_table_[i] = radius2Velocity(radius_origin);
 80044da:	8b7c      	ldrh	r4, [r7, #26]
 80044dc:	ed97 0a05 	vldr	s0, [r7, #20]
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f7fe fe2b 	bl	800313c <_ZN9LineTrace15radius2VelocityEf>
 80044e6:	eef0 7a40 	vmov.f32	s15, s0
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 80044f0:	009b      	lsls	r3, r3, #2
 80044f2:	4413      	add	r3, r2
 80044f4:	3304      	adds	r3, #4
 80044f6:	edc3 7a00 	vstr	s15, [r3]
		//pre_radius = radius_origin;

		ref_delta_distances_[i] = p_distance[i]; //copy
 80044fa:	8b7b      	ldrh	r3, [r7, #26]
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	693a      	ldr	r2, [r7, #16]
 8004500:	441a      	add	r2, r3
 8004502:	8b7b      	ldrh	r3, [r7, #26]
 8004504:	6812      	ldr	r2, [r2, #0]
 8004506:	6879      	ldr	r1, [r7, #4]
 8004508:	3330      	adds	r3, #48	; 0x30
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	440b      	add	r3, r1
 800450e:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8004510:	8b7b      	ldrh	r3, [r7, #26]
 8004512:	3301      	adds	r3, #1
 8004514:	837b      	strh	r3, [r7, #26]
 8004516:	e7af      	b.n	8004478 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x58>
	}

	if(mode_selector_ == SECOND_RUNNING){
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800451e:	3348      	adds	r3, #72	; 0x48
 8004520:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004524:	2b01      	cmp	r3, #1
 8004526:	d120      	bne.n	800456a <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x14a>
		velocity_table_[0] = min_velocity_;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004534:	3304      	adds	r3, #4
 8004536:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec_, p_distance);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 800453e:	332c      	adds	r3, #44	; 0x2c
 8004540:	edd3 7a00 	vldr	s15, [r3]
 8004544:	6939      	ldr	r1, [r7, #16]
 8004546:	eeb0 0a67 	vmov.f32	s0, s15
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f7fe feac 	bl	80032a8 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc_, p_distance);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8004556:	3328      	adds	r3, #40	; 0x28
 8004558:	edd3 7a00 	vldr	s15, [r3]
 800455c:	6939      	ldr	r1, [r7, #16]
 800455e:	eeb0 0a67 	vmov.f32	s0, s15
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f7fe ff44 	bl	80033f0 <_ZN9LineTrace20accelerateProcessingEfPKf>
 8004568:	e027      	b.n	80045ba <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x19a>
	}
	else if(mode_selector_ == THIRD_RUNNING){
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004570:	3348      	adds	r3, #72	; 0x48
 8004572:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004576:	2b02      	cmp	r3, #2
 8004578:	d11f      	bne.n	80045ba <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x19a>
		velocity_table_[0] = min_velocity2_;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004586:	3304      	adds	r3, #4
 8004588:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec2_, p_distance);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 8004590:	3334      	adds	r3, #52	; 0x34
 8004592:	edd3 7a00 	vldr	s15, [r3]
 8004596:	6939      	ldr	r1, [r7, #16]
 8004598:	eeb0 0a67 	vmov.f32	s0, s15
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f7fe fe83 	bl	80032a8 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc2_, p_distance);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f503 435d 	add.w	r3, r3, #56576	; 0xdd00
 80045a8:	3330      	adds	r3, #48	; 0x30
 80045aa:	edd3 7a00 	vldr	s15, [r3]
 80045ae:	6939      	ldr	r1, [r7, #16]
 80045b0:	eeb0 0a67 	vmov.f32	s0, s15
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f7fe ff1b 	bl	80033f0 <_ZN9LineTrace20accelerateProcessingEfPKf>
	}


	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80045c0:	3304      	adds	r3, #4
 80045c2:	2200      	movs	r2, #0
 80045c4:	9200      	str	r2, [sp, #0]
 80045c6:	f241 7270 	movw	r2, #6000	; 0x1770
 80045ca:	490c      	ldr	r1, [pc, #48]	; (80045fc <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1dc>)
 80045cc:	4805      	ldr	r0, [pc, #20]	; (80045e4 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 80045ce:	f7fd f955 	bl	800187c <sd_write_array_float>

}
 80045d2:	bf00      	nop
 80045d4:	3724      	adds	r7, #36	; 0x24
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd90      	pop	{r4, r7, pc}
 80045da:	bf00      	nop
 80045dc:	080194cc 	.word	0x080194cc
 80045e0:	080194d8 	.word	0x080194d8
 80045e4:	080194e8 	.word	0x080194e8
 80045e8:	08019510 	.word	0x08019510
 80045ec:	08019520 	.word	0x08019520
 80045f0:	3727c5ac 	.word	0x3727c5ac
 80045f4:	459c4000 	.word	0x459c4000
 80045f8:	459c4000 	.word	0x459c4000
 80045fc:	0801953c 	.word	0x0801953c

08004600 <_ZN6LoggerC1Ev>:
#include "HAL_SDcard_lib.h"
#include <stdio.h>
#include "Macro.h"
#include "AQM0802.h"

Logger::Logger() : recording_flag_(false), log_index_tim_(0), log_index_tim2_(0), log_index_dis_(0){}
 8004600:	b480      	push	{r7}
 8004602:	b083      	sub	sp, #12
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 800460e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004612:	2200      	movs	r2, #0
 8004614:	701a      	strb	r2, [r3, #0]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 800461c:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 8004620:	2200      	movs	r2, #0
 8004622:	801a      	strh	r2, [r3, #0]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 800462a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800462e:	2200      	movs	r2, #0
 8004630:	801a      	strh	r2, [r3, #0]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004638:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 800463c:	2200      	movs	r2, #0
 800463e:	801a      	strh	r2, [r3, #0]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	4618      	mov	r0, r3
 8004644:	370c      	adds	r7, #12
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr
	...

08004650 <_ZN6Logger10sdCardInitEv>:

bool Logger::sdCardInit()
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b084      	sub	sp, #16
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8004658:	2300      	movs	r3, #0
 800465a:	73fb      	strb	r3, [r7, #15]

	if(sd_mount() == 1){
 800465c:	f7fd fa00 	bl	8001a60 <sd_mount>
 8004660:	4603      	mov	r3, r0
 8004662:	2b01      	cmp	r3, #1
 8004664:	bf0c      	ite	eq
 8004666:	2301      	moveq	r3, #1
 8004668:	2300      	movne	r3, #0
 800466a:	b2db      	uxtb	r3, r3
 800466c:	2b00      	cmp	r3, #0
 800466e:	d016      	beq.n	800469e <_ZN6Logger10sdCardInitEv+0x4e>
	  //printf("mount success\r\n");

	  lcd_clear();
 8004670:	f7fc fd16 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 8004674:	2100      	movs	r1, #0
 8004676:	2000      	movs	r0, #0
 8004678:	f7fc fd22 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 800467c:	4815      	ldr	r0, [pc, #84]	; (80046d4 <_ZN6Logger10sdCardInitEv+0x84>)
 800467e:	f7fc fd49 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 8004682:	2101      	movs	r1, #1
 8004684:	2000      	movs	r0, #0
 8004686:	f7fc fd1b 	bl	80010c0 <lcd_locate>
	  lcd_printf("success");
 800468a:	4813      	ldr	r0, [pc, #76]	; (80046d8 <_ZN6Logger10sdCardInitEv+0x88>)
 800468c:	f7fc fd42 	bl	8001114 <lcd_printf>
	  HAL_Delay(500);
 8004690:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004694:	f004 ff1a 	bl	80094cc <HAL_Delay>

	  ret = true;
 8004698:	2301      	movs	r3, #1
 800469a:	73fb      	strb	r3, [r7, #15]
 800469c:	e015      	b.n	80046ca <_ZN6Logger10sdCardInitEv+0x7a>
	}
	else{
	  //printf("mount error\r\n");

	  lcd_clear();
 800469e:	f7fc fcff 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 80046a2:	2100      	movs	r1, #0
 80046a4:	2000      	movs	r0, #0
 80046a6:	f7fc fd0b 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 80046aa:	480a      	ldr	r0, [pc, #40]	; (80046d4 <_ZN6Logger10sdCardInitEv+0x84>)
 80046ac:	f7fc fd32 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 80046b0:	2101      	movs	r1, #1
 80046b2:	2000      	movs	r0, #0
 80046b4:	f7fc fd04 	bl	80010c0 <lcd_locate>
	  lcd_printf("fail");
 80046b8:	4808      	ldr	r0, [pc, #32]	; (80046dc <_ZN6Logger10sdCardInitEv+0x8c>)
 80046ba:	f7fc fd2b 	bl	8001114 <lcd_printf>
	  HAL_Delay(1000);
 80046be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80046c2:	f004 ff03 	bl	80094cc <HAL_Delay>

	  ret = false;
 80046c6:	2300      	movs	r3, #0
 80046c8:	73fb      	strb	r3, [r7, #15]
	//data[0] = 100;
	//sd_write_array_int("sdio", "write1.txt", DATA_SIZE, data, ADD_WRITE); //write
	//sd_read_array_int("sdio", "write1.txt", DATA_SIZE, temp); //read
	//sd_write_array_int("sdio", "write2.txt", DATA_SIZE, temp, ADD_WRITE); //write

	return ret;
 80046ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3710      	adds	r7, #16
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}
 80046d4:	0801954c 	.word	0x0801954c
 80046d8:	08019558 	.word	0x08019558
 80046dc:	08019560 	.word	0x08019560

080046e0 <_ZN6Logger8storeLogEf>:

	}

}
void Logger::storeLog(float data)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b083      	sub	sp, #12
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
 80046e8:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 80046f2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80046f6:	781b      	ldrb	r3, [r3, #0]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d028      	beq.n	800474e <_ZN6Logger8storeLogEf+0x6e>
		store_data_float_[log_index_tim_] = data;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004702:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 8004706:	881b      	ldrh	r3, [r3, #0]
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	4413      	add	r3, r2
 800470e:	683a      	ldr	r2, [r7, #0]
 8004710:	601a      	str	r2, [r3, #0]

		log_index_tim_++;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004718:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 800471c:	881b      	ldrh	r3, [r3, #0]
 800471e:	3301      	adds	r3, #1
 8004720:	b29a      	uxth	r2, r3
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004728:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 800472c:	801a      	strh	r2, [r3, #0]

		if(log_index_tim_ >= LOG_DATA_SIZE_TIM) log_index_tim_ = 0;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004734:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 8004738:	881b      	ldrh	r3, [r3, #0]
 800473a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800473e:	d306      	bcc.n	800474e <_ZN6Logger8storeLogEf+0x6e>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004746:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 800474a:	2200      	movs	r2, #0
 800474c:	801a      	strh	r2, [r3, #0]
	}
}
 800474e:	bf00      	nop
 8004750:	370c      	adds	r7, #12
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr

0800475a <_ZN6Logger9storeLog2Ef>:
void Logger::storeLog2(float data)
{
 800475a:	b480      	push	{r7}
 800475c:	b083      	sub	sp, #12
 800475e:	af00      	add	r7, sp, #0
 8004760:	6078      	str	r0, [r7, #4]
 8004762:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 800476c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004770:	781b      	ldrb	r3, [r3, #0]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d02a      	beq.n	80047cc <_ZN6Logger9storeLog2Ef+0x72>
		store_data_float2_[log_index_tim2_] = data;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 800477c:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8004780:	881b      	ldrh	r3, [r3, #0]
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	4413      	add	r3, r2
 800478c:	683a      	ldr	r2, [r7, #0]
 800478e:	601a      	str	r2, [r3, #0]

		log_index_tim2_++;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004796:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800479a:	881b      	ldrh	r3, [r3, #0]
 800479c:	3301      	adds	r3, #1
 800479e:	b29a      	uxth	r2, r3
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 80047a6:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80047aa:	801a      	strh	r2, [r3, #0]

		if(log_index_tim2_ >= LOG_DATA_SIZE_TIM2) log_index_tim2_ = 0;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 80047b2:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80047b6:	881b      	ldrh	r3, [r3, #0]
 80047b8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80047bc:	d306      	bcc.n	80047cc <_ZN6Logger9storeLog2Ef+0x72>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 80047c4:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80047c8:	2200      	movs	r2, #0
 80047ca:	801a      	strh	r2, [r3, #0]
	}
}
 80047cc:	bf00      	nop
 80047ce:	370c      	adds	r7, #12
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr

080047d8 <_ZN6Logger21storeDistanceAndThetaEff>:
{

}

void Logger::storeDistanceAndTheta(float distance, float theta)
{
 80047d8:	b480      	push	{r7}
 80047da:	b085      	sub	sp, #20
 80047dc:	af00      	add	r7, sp, #0
 80047de:	60f8      	str	r0, [r7, #12]
 80047e0:	ed87 0a02 	vstr	s0, [r7, #8]
 80047e4:	edc7 0a01 	vstr	s1, [r7, #4]
	//if(recording_flag_ == true){
		store_distance_[log_index_dis_] = distance;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 80047ee:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 80047f2:	881b      	ldrh	r3, [r3, #0]
 80047f4:	68fa      	ldr	r2, [r7, #12]
 80047f6:	f503 637a 	add.w	r3, r3, #4000	; 0xfa0
 80047fa:	009b      	lsls	r3, r3, #2
 80047fc:	4413      	add	r3, r2
 80047fe:	68ba      	ldr	r2, [r7, #8]
 8004800:	601a      	str	r2, [r3, #0]
		store_theta_[log_index_dis_] = theta;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004808:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 800480c:	881b      	ldrh	r3, [r3, #0]
 800480e:	68fa      	ldr	r2, [r7, #12]
 8004810:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8004814:	3310      	adds	r3, #16
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	4413      	add	r3, r2
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	601a      	str	r2, [r3, #0]

		log_index_dis_++;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004824:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 8004828:	881b      	ldrh	r3, [r3, #0]
 800482a:	3301      	adds	r3, #1
 800482c:	b29a      	uxth	r2, r3
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004834:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 8004838:	801a      	strh	r2, [r3, #0]

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004840:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 8004844:	881b      	ldrh	r3, [r3, #0]
 8004846:	f241 726f 	movw	r2, #5999	; 0x176f
 800484a:	4293      	cmp	r3, r2
 800484c:	d906      	bls.n	800485c <_ZN6Logger21storeDistanceAndThetaEff+0x84>
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004854:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 8004858:	2200      	movs	r2, #0
 800485a:	801a      	strh	r2, [r3, #0]
	//}
}
 800485c:	bf00      	nop
 800485e:	3714      	adds	r7, #20
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr

08004868 <_ZN6Logger22storeDistanceAndTheta2Eff>:

void Logger::storeDistanceAndTheta2(float distance, float theta)
{
 8004868:	b480      	push	{r7}
 800486a:	b085      	sub	sp, #20
 800486c:	af00      	add	r7, sp, #0
 800486e:	60f8      	str	r0, [r7, #12]
 8004870:	ed87 0a02 	vstr	s0, [r7, #8]
 8004874:	edc7 0a01 	vstr	s1, [r7, #4]
	//if(recording_flag_ == true){
		store_distance2_[log_index_dis_] = distance;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 800487e:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 8004882:	881b      	ldrh	r3, [r3, #0]
 8004884:	68fa      	ldr	r2, [r7, #12]
 8004886:	f503 537a 	add.w	r3, r3, #16000	; 0x3e80
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	4413      	add	r3, r2
 800488e:	68ba      	ldr	r2, [r7, #8]
 8004890:	601a      	str	r2, [r3, #0]
		store_theta2_[log_index_dis_] = theta;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004898:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 800489c:	881b      	ldrh	r3, [r3, #0]
 800489e:	68fa      	ldr	r2, [r7, #12]
 80048a0:	f503 43ab 	add.w	r3, r3, #21888	; 0x5580
 80048a4:	3370      	adds	r3, #112	; 0x70
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	4413      	add	r3, r2
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	601a      	str	r2, [r3, #0]

		log_index_dis_++;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 80048b4:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 80048b8:	881b      	ldrh	r3, [r3, #0]
 80048ba:	3301      	adds	r3, #1
 80048bc:	b29a      	uxth	r2, r3
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 80048c4:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 80048c8:	801a      	strh	r2, [r3, #0]

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 80048d0:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 80048d4:	881b      	ldrh	r3, [r3, #0]
 80048d6:	f241 726f 	movw	r2, #5999	; 0x176f
 80048da:	4293      	cmp	r3, r2
 80048dc:	d906      	bls.n	80048ec <_ZN6Logger22storeDistanceAndTheta2Eff+0x84>
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 80048e4:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 80048e8:	2200      	movs	r2, #0
 80048ea:	801a      	strh	r2, [r3, #0]
	//}
}
 80048ec:	bf00      	nop
 80048ee:	3714      	adds	r7, #20
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr

080048f8 <_ZN6Logger23getDistanceArrayPointerEv>:
const float *Logger::getDistanceArrayPointer()
{
 80048f8:	b480      	push	{r7}
 80048fa:	b083      	sub	sp, #12
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
	return store_distance_;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f503 537a 	add.w	r3, r3, #16000	; 0x3e80
}
 8004906:	4618      	mov	r0, r3
 8004908:	370c      	adds	r7, #12
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr

08004912 <_ZN6Logger20getThetaArrayPointerEv>:

const float *Logger::getThetaArrayPointer()
{
 8004912:	b480      	push	{r7}
 8004914:	b083      	sub	sp, #12
 8004916:	af00      	add	r7, sp, #0
 8004918:	6078      	str	r0, [r7, #4]
	return store_theta_;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 8004920:	3340      	adds	r3, #64	; 0x40
}
 8004922:	4618      	mov	r0, r3
 8004924:	370c      	adds	r7, #12
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr

0800492e <_ZN6Logger8saveLogsEPKcS1_>:

void Logger::saveLogs(const char *folder_name, const char *file_name)
{
 800492e:	b580      	push	{r7, lr}
 8004930:	b086      	sub	sp, #24
 8004932:	af02      	add	r7, sp, #8
 8004934:	60f8      	str	r0, [r7, #12]
 8004936:	60b9      	str	r1, [r7, #8]
 8004938:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM, store_data_float_, OVER_WRITE); //write
 800493a:	68fa      	ldr	r2, [r7, #12]
 800493c:	2300      	movs	r3, #0
 800493e:	9300      	str	r3, [sp, #0]
 8004940:	4613      	mov	r3, r2
 8004942:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004946:	6879      	ldr	r1, [r7, #4]
 8004948:	68b8      	ldr	r0, [r7, #8]
 800494a:	f7fc ff97 	bl	800187c <sd_write_array_float>
}
 800494e:	bf00      	nop
 8004950:	3710      	adds	r7, #16
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}

08004956 <_ZN6Logger9saveLogs2EPKcS1_>:
void Logger::saveLogs2(const char *folder_name, const char *file_name)
{
 8004956:	b580      	push	{r7, lr}
 8004958:	b086      	sub	sp, #24
 800495a:	af02      	add	r7, sp, #8
 800495c:	60f8      	str	r0, [r7, #12]
 800495e:	60b9      	str	r1, [r7, #8]
 8004960:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM2, store_data_float2_, OVER_WRITE); //write
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	f503 52fa 	add.w	r2, r3, #8000	; 0x1f40
 8004968:	2300      	movs	r3, #0
 800496a:	9300      	str	r3, [sp, #0]
 800496c:	4613      	mov	r3, r2
 800496e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004972:	6879      	ldr	r1, [r7, #4]
 8004974:	68b8      	ldr	r0, [r7, #8]
 8004976:	f7fc ff81 	bl	800187c <sd_write_array_float>
}
 800497a:	bf00      	nop
 800497c:	3710      	adds	r7, #16
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}

08004982 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>:

void Logger::saveDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8004982:	b580      	push	{r7, lr}
 8004984:	b086      	sub	sp, #24
 8004986:	af02      	add	r7, sp, #8
 8004988:	60f8      	str	r0, [r7, #12]
 800498a:	60b9      	str	r1, [r7, #8]
 800498c:	607a      	str	r2, [r7, #4]
 800498e:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_, OVER_WRITE); //write
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f503 527a 	add.w	r2, r3, #16000	; 0x3e80
 8004996:	2300      	movs	r3, #0
 8004998:	9300      	str	r3, [sp, #0]
 800499a:	4613      	mov	r3, r2
 800499c:	f241 7270 	movw	r2, #6000	; 0x1770
 80049a0:	6879      	ldr	r1, [r7, #4]
 80049a2:	68b8      	ldr	r0, [r7, #8]
 80049a4:	f7fc ff6a 	bl	800187c <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_, OVER_WRITE); //write
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 80049ae:	3340      	adds	r3, #64	; 0x40
 80049b0:	2200      	movs	r2, #0
 80049b2:	9200      	str	r2, [sp, #0]
 80049b4:	f241 7270 	movw	r2, #6000	; 0x1770
 80049b8:	6839      	ldr	r1, [r7, #0]
 80049ba:	68b8      	ldr	r0, [r7, #8]
 80049bc:	f7fc ff5e 	bl	800187c <sd_write_array_float>
}
 80049c0:	bf00      	nop
 80049c2:	3710      	adds	r7, #16
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}

080049c8 <_ZN6Logger21saveDistanceAndTheta2EPKcS1_S1_>:

void Logger::saveDistanceAndTheta2(const char *folder_name, const char *file_name1, const char *file_name2)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b086      	sub	sp, #24
 80049cc:	af02      	add	r7, sp, #8
 80049ce:	60f8      	str	r0, [r7, #12]
 80049d0:	60b9      	str	r1, [r7, #8]
 80049d2:	607a      	str	r2, [r7, #4]
 80049d4:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance2_, OVER_WRITE); //write
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	f503 427a 	add.w	r2, r3, #64000	; 0xfa00
 80049dc:	2300      	movs	r3, #0
 80049de:	9300      	str	r3, [sp, #0]
 80049e0:	4613      	mov	r3, r2
 80049e2:	f241 7270 	movw	r2, #6000	; 0x1770
 80049e6:	6879      	ldr	r1, [r7, #4]
 80049e8:	68b8      	ldr	r0, [r7, #8]
 80049ea:	f7fc ff47 	bl	800187c <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta2_, OVER_WRITE); //write
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 80049f4:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 80049f8:	2200      	movs	r2, #0
 80049fa:	9200      	str	r2, [sp, #0]
 80049fc:	f241 7270 	movw	r2, #6000	; 0x1770
 8004a00:	6839      	ldr	r1, [r7, #0]
 8004a02:	68b8      	ldr	r0, [r7, #8]
 8004a04:	f7fc ff3a 	bl	800187c <sd_write_array_float>
}
 8004a08:	bf00      	nop
 8004a0a:	3710      	adds	r7, #16
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}

08004a10 <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>:

void Logger::importDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b084      	sub	sp, #16
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	60f8      	str	r0, [r7, #12]
 8004a18:	60b9      	str	r1, [r7, #8]
 8004a1a:	607a      	str	r2, [r7, #4]
 8004a1c:	603b      	str	r3, [r7, #0]
	sd_read_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_); //read
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	f503 537a 	add.w	r3, r3, #16000	; 0x3e80
 8004a24:	f241 7270 	movw	r2, #6000	; 0x1770
 8004a28:	6879      	ldr	r1, [r7, #4]
 8004a2a:	68b8      	ldr	r0, [r7, #8]
 8004a2c:	f7fc ff8c 	bl	8001948 <sd_read_array_float>
	sd_read_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_); //read
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f503 431c 	add.w	r3, r3, #39936	; 0x9c00
 8004a36:	3340      	adds	r3, #64	; 0x40
 8004a38:	f241 7270 	movw	r2, #6000	; 0x1770
 8004a3c:	6839      	ldr	r1, [r7, #0]
 8004a3e:	68b8      	ldr	r0, [r7, #8]
 8004a40:	f7fc ff82 	bl	8001948 <sd_read_array_float>
}
 8004a44:	bf00      	nop
 8004a46:	3710      	adds	r7, #16
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}

08004a4c <_ZN6Logger10resetLogs2Ev>:
	log_index_tim_ = 0;
	log_index_dis_ = 0;
}

void Logger::resetLogs2()
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b08b      	sub	sp, #44	; 0x2c
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
	for(auto &log : store_distance2_){
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	f503 437a 	add.w	r3, r3, #64000	; 0xfa00
 8004a5a:	61fb      	str	r3, [r7, #28]
 8004a5c:	69fb      	ldr	r3, [r7, #28]
 8004a5e:	627b      	str	r3, [r7, #36]	; 0x24
 8004a60:	69fb      	ldr	r3, [r7, #28]
 8004a62:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004a66:	3340      	adds	r3, #64	; 0x40
 8004a68:	61bb      	str	r3, [r7, #24]
 8004a6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a6c:	69bb      	ldr	r3, [r7, #24]
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d009      	beq.n	8004a86 <_ZN6Logger10resetLogs2Ev+0x3a>
 8004a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a74:	617b      	str	r3, [r7, #20]
		log = 0;
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	f04f 0200 	mov.w	r2, #0
 8004a7c:	601a      	str	r2, [r3, #0]
	for(auto &log : store_distance2_){
 8004a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a80:	3304      	adds	r3, #4
 8004a82:	627b      	str	r3, [r7, #36]	; 0x24
 8004a84:	e7f1      	b.n	8004a6a <_ZN6Logger10resetLogs2Ev+0x1e>
	}
	for(auto &log : store_theta2_){
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f503 33ab 	add.w	r3, r3, #87552	; 0x15600
 8004a8c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 8004a90:	613b      	str	r3, [r7, #16]
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	623b      	str	r3, [r7, #32]
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004a9c:	3340      	adds	r3, #64	; 0x40
 8004a9e:	60fb      	str	r3, [r7, #12]
 8004aa0:	6a3a      	ldr	r2, [r7, #32]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d009      	beq.n	8004abc <_ZN6Logger10resetLogs2Ev+0x70>
 8004aa8:	6a3b      	ldr	r3, [r7, #32]
 8004aaa:	60bb      	str	r3, [r7, #8]
		log = 0;
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	f04f 0200 	mov.w	r2, #0
 8004ab2:	601a      	str	r2, [r3, #0]
	for(auto &log : store_theta2_){
 8004ab4:	6a3b      	ldr	r3, [r7, #32]
 8004ab6:	3304      	adds	r3, #4
 8004ab8:	623b      	str	r3, [r7, #32]
 8004aba:	e7f1      	b.n	8004aa0 <_ZN6Logger10resetLogs2Ev+0x54>
	}

	log_index_tim_ = 0;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004ac2:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	801a      	strh	r2, [r3, #0]
	log_index_dis_ = 0;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004ad0:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	801a      	strh	r2, [r3, #0]
}
 8004ad8:	bf00      	nop
 8004ada:	372c      	adds	r7, #44	; 0x2c
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr

08004ae4 <_ZN6Logger8resetIdxEv>:
void Logger::resetIdx()
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b083      	sub	sp, #12
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
	log_index_tim_ = 0;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004af2:	f503 73c1 	add.w	r3, r3, #386	; 0x182
 8004af6:	2200      	movs	r2, #0
 8004af8:	801a      	strh	r2, [r3, #0]
	log_index_dis_ = 0;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004b00:	f503 73c3 	add.w	r3, r3, #390	; 0x186
 8004b04:	2200      	movs	r2, #0
 8004b06:	801a      	strh	r2, [r3, #0]
}
 8004b08:	bf00      	nop
 8004b0a:	370c      	adds	r7, #12
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr

08004b14 <_ZN6Logger5startEv>:

void Logger::start()
{
 8004b14:	b480      	push	{r7}
 8004b16:	b083      	sub	sp, #12
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
	recording_flag_ = true;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004b22:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004b26:	2201      	movs	r2, #1
 8004b28:	701a      	strb	r2, [r3, #0]
}
 8004b2a:	bf00      	nop
 8004b2c:	370c      	adds	r7, #12
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr

08004b36 <_ZN6Logger4stopEv>:

void Logger::stop()
{
 8004b36:	b480      	push	{r7}
 8004b38:	b083      	sub	sp, #12
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	6078      	str	r0, [r7, #4]
	recording_flag_ = false;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8004b44:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004b48:	2200      	movs	r2, #0
 8004b4a:	701a      	strb	r2, [r3, #0]
}
 8004b4c:	bf00      	nop
 8004b4e:	370c      	adds	r7, #12
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr

08004b58 <_ZN5MotorC1Ev>:

#include "Motor.hpp"
#include "G_variables.h"


Motor::Motor() : temp_left_counter_period_(0), temp_right_counter_period_(0){}
 8004b58:	b480      	push	{r7}
 8004b5a:	b083      	sub	sp, #12
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2200      	movs	r2, #0
 8004b64:	801a      	strh	r2, [r3, #0]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	805a      	strh	r2, [r3, #2]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	4618      	mov	r0, r3
 8004b70:	370c      	adds	r7, #12
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr
	...

08004b7c <_ZN5Motor4initEv>:

void Motor::init()
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b082      	sub	sp, #8
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
	//PWM start
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8004b84:	2108      	movs	r1, #8
 8004b86:	4805      	ldr	r0, [pc, #20]	; (8004b9c <_ZN5Motor4initEv+0x20>)
 8004b88:	f009 fe50 	bl	800e82c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8004b8c:	210c      	movs	r1, #12
 8004b8e:	4803      	ldr	r0, [pc, #12]	; (8004b9c <_ZN5Motor4initEv+0x20>)
 8004b90:	f009 fe4c 	bl	800e82c <HAL_TIM_PWM_Start>

}
 8004b94:	bf00      	nop
 8004b96:	3708      	adds	r7, #8
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}
 8004b9c:	20043744 	.word	0x20043744

08004ba0 <_ZN5Motor9motorCtrlEv>:

void Motor::motorCtrl()
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b084      	sub	sp, #16
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
	uint16_t left_counter_period, right_counter_period;

	if(temp_left_counter_period_ < 0) {
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	da0d      	bge.n	8004bce <_ZN5Motor9motorCtrlEv+0x2e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004bb8:	481f      	ldr	r0, [pc, #124]	; (8004c38 <_ZN5Motor9motorCtrlEv+0x98>)
 8004bba:	f005 ff1d 	bl	800a9f8 <HAL_GPIO_WritePin>
		left_counter_period = -1 * temp_left_counter_period_;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	425b      	negs	r3, r3
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	81fb      	strh	r3, [r7, #14]
 8004bcc:	e00a      	b.n	8004be4 <_ZN5Motor9motorCtrlEv+0x44>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004bd4:	4818      	ldr	r0, [pc, #96]	; (8004c38 <_ZN5Motor9motorCtrlEv+0x98>)
 8004bd6:	f005 ff0f 	bl	800a9f8 <HAL_GPIO_WritePin>
		left_counter_period = temp_left_counter_period_;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	81fb      	strh	r3, [r7, #14]
	}

	if(temp_right_counter_period_ < 0) {
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	da0d      	bge.n	8004c0a <_ZN5Motor9motorCtrlEv+0x6a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 8004bee:	2201      	movs	r2, #1
 8004bf0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004bf4:	4810      	ldr	r0, [pc, #64]	; (8004c38 <_ZN5Motor9motorCtrlEv+0x98>)
 8004bf6:	f005 feff 	bl	800a9f8 <HAL_GPIO_WritePin>
		right_counter_period = -1 * temp_right_counter_period_;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	425b      	negs	r3, r3
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	81bb      	strh	r3, [r7, #12]
 8004c08:	e00a      	b.n	8004c20 <_ZN5Motor9motorCtrlEv+0x80>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004c10:	4809      	ldr	r0, [pc, #36]	; (8004c38 <_ZN5Motor9motorCtrlEv+0x98>)
 8004c12:	f005 fef1 	bl	800a9f8 <HAL_GPIO_WritePin>
		right_counter_period = temp_right_counter_period_;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	81bb      	strh	r3, [r7, #12]
	}

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, left_counter_period);
 8004c20:	89fa      	ldrh	r2, [r7, #14]
 8004c22:	4b06      	ldr	r3, [pc, #24]	; (8004c3c <_ZN5Motor9motorCtrlEv+0x9c>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, right_counter_period);
 8004c28:	89ba      	ldrh	r2, [r7, #12]
 8004c2a:	4b04      	ldr	r3, [pc, #16]	; (8004c3c <_ZN5Motor9motorCtrlEv+0x9c>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004c30:	bf00      	nop
 8004c32:	3710      	adds	r7, #16
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}
 8004c38:	40020c00 	.word	0x40020c00
 8004c3c:	20043744 	.word	0x20043744

08004c40 <_ZN5Motor8setRatioEdd>:

void Motor::setRatio(double left_ratio, double right_ratio)
{
 8004c40:	b590      	push	{r4, r7, lr}
 8004c42:	b087      	sub	sp, #28
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6178      	str	r0, [r7, #20]
 8004c48:	ed87 0b02 	vstr	d0, [r7, #8]
 8004c4c:	ed87 1b00 	vstr	d1, [r7]
	if(left_ratio > 1) left_ratio = 1;
 8004c50:	f04f 0200 	mov.w	r2, #0
 8004c54:	4b30      	ldr	r3, [pc, #192]	; (8004d18 <_ZN5Motor8setRatioEdd+0xd8>)
 8004c56:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004c5a:	f7fb ff75 	bl	8000b48 <__aeabi_dcmpgt>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d005      	beq.n	8004c70 <_ZN5Motor8setRatioEdd+0x30>
 8004c64:	f04f 0300 	mov.w	r3, #0
 8004c68:	4c2b      	ldr	r4, [pc, #172]	; (8004d18 <_ZN5Motor8setRatioEdd+0xd8>)
 8004c6a:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8004c6e:	e00e      	b.n	8004c8e <_ZN5Motor8setRatioEdd+0x4e>
	else if(left_ratio < -1) left_ratio = -1;
 8004c70:	f04f 0200 	mov.w	r2, #0
 8004c74:	4b29      	ldr	r3, [pc, #164]	; (8004d1c <_ZN5Motor8setRatioEdd+0xdc>)
 8004c76:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004c7a:	f7fb ff47 	bl	8000b0c <__aeabi_dcmplt>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d004      	beq.n	8004c8e <_ZN5Motor8setRatioEdd+0x4e>
 8004c84:	f04f 0300 	mov.w	r3, #0
 8004c88:	4c24      	ldr	r4, [pc, #144]	; (8004d1c <_ZN5Motor8setRatioEdd+0xdc>)
 8004c8a:	e9c7 3402 	strd	r3, r4, [r7, #8]
	if(right_ratio > 1) right_ratio = 1;
 8004c8e:	f04f 0200 	mov.w	r2, #0
 8004c92:	4b21      	ldr	r3, [pc, #132]	; (8004d18 <_ZN5Motor8setRatioEdd+0xd8>)
 8004c94:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004c98:	f7fb ff56 	bl	8000b48 <__aeabi_dcmpgt>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d005      	beq.n	8004cae <_ZN5Motor8setRatioEdd+0x6e>
 8004ca2:	f04f 0300 	mov.w	r3, #0
 8004ca6:	4c1c      	ldr	r4, [pc, #112]	; (8004d18 <_ZN5Motor8setRatioEdd+0xd8>)
 8004ca8:	e9c7 3400 	strd	r3, r4, [r7]
 8004cac:	e00e      	b.n	8004ccc <_ZN5Motor8setRatioEdd+0x8c>
	else if(right_ratio < -1) right_ratio = -1;
 8004cae:	f04f 0200 	mov.w	r2, #0
 8004cb2:	4b1a      	ldr	r3, [pc, #104]	; (8004d1c <_ZN5Motor8setRatioEdd+0xdc>)
 8004cb4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004cb8:	f7fb ff28 	bl	8000b0c <__aeabi_dcmplt>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d004      	beq.n	8004ccc <_ZN5Motor8setRatioEdd+0x8c>
 8004cc2:	f04f 0300 	mov.w	r3, #0
 8004cc6:	4c15      	ldr	r4, [pc, #84]	; (8004d1c <_ZN5Motor8setRatioEdd+0xdc>)
 8004cc8:	e9c7 3400 	strd	r3, r4, [r7]

	temp_left_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * left_ratio);
 8004ccc:	f04f 0200 	mov.w	r2, #0
 8004cd0:	4b13      	ldr	r3, [pc, #76]	; (8004d20 <_ZN5Motor8setRatioEdd+0xe0>)
 8004cd2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004cd6:	f7fb fca7 	bl	8000628 <__aeabi_dmul>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	460c      	mov	r4, r1
 8004cde:	4618      	mov	r0, r3
 8004ce0:	4621      	mov	r1, r4
 8004ce2:	f7fb ff51 	bl	8000b88 <__aeabi_d2iz>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	b21a      	sxth	r2, r3
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	801a      	strh	r2, [r3, #0]
	temp_right_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * right_ratio);
 8004cee:	f04f 0200 	mov.w	r2, #0
 8004cf2:	4b0b      	ldr	r3, [pc, #44]	; (8004d20 <_ZN5Motor8setRatioEdd+0xe0>)
 8004cf4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004cf8:	f7fb fc96 	bl	8000628 <__aeabi_dmul>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	460c      	mov	r4, r1
 8004d00:	4618      	mov	r0, r3
 8004d02:	4621      	mov	r1, r4
 8004d04:	f7fb ff40 	bl	8000b88 <__aeabi_d2iz>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	b21a      	sxth	r2, r3
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	805a      	strh	r2, [r3, #2]

}
 8004d10:	bf00      	nop
 8004d12:	371c      	adds	r7, #28
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd90      	pop	{r4, r7, pc}
 8004d18:	3ff00000 	.word	0x3ff00000
 8004d1c:	bff00000 	.word	0xbff00000
 8004d20:	409c2000 	.word	0x409c2000

08004d24 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>:

#define DELTA_T 0.001

float monitor_x, monitor_y, monitor_theta;

Odometry::Odometry(Encoder *encoder, IMU *imu, VelocityCtrl *velocity_ctrl) : x_robot_(0), y_robot_(0), theta_(0), x_sens_(0), y_sens_(0)
 8004d24:	b490      	push	{r4, r7}
 8004d26:	b084      	sub	sp, #16
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	60f8      	str	r0, [r7, #12]
 8004d2c:	60b9      	str	r1, [r7, #8]
 8004d2e:	607a      	str	r2, [r7, #4]
 8004d30:	603b      	str	r3, [r7, #0]
 8004d32:	68fa      	ldr	r2, [r7, #12]
 8004d34:	f04f 0300 	mov.w	r3, #0
 8004d38:	f04f 0400 	mov.w	r4, #0
 8004d3c:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8004d40:	68fa      	ldr	r2, [r7, #12]
 8004d42:	f04f 0300 	mov.w	r3, #0
 8004d46:	f04f 0400 	mov.w	r4, #0
 8004d4a:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8004d4e:	68fa      	ldr	r2, [r7, #12]
 8004d50:	f04f 0300 	mov.w	r3, #0
 8004d54:	f04f 0400 	mov.w	r4, #0
 8004d58:	e9c2 3408 	strd	r3, r4, [r2, #32]
 8004d5c:	68fa      	ldr	r2, [r7, #12]
 8004d5e:	f04f 0300 	mov.w	r3, #0
 8004d62:	f04f 0400 	mov.w	r4, #0
 8004d66:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
 8004d6a:	68fa      	ldr	r2, [r7, #12]
 8004d6c:	f04f 0300 	mov.w	r3, #0
 8004d70:	f04f 0400 	mov.w	r4, #0
 8004d74:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
{
	encoder_ = encoder;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	68ba      	ldr	r2, [r7, #8]
 8004d7c:	601a      	str	r2, [r3, #0]
	imu_ = imu;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	683a      	ldr	r2, [r7, #0]
 8004d88:	609a      	str	r2, [r3, #8]
}
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3710      	adds	r7, #16
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bc90      	pop	{r4, r7}
 8004d94:	4770      	bx	lr
	...

08004d98 <_ZN8Odometry12calcPotitionEv>:


void Odometry::calcPotition()
{
 8004d98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d9c:	b086      	sub	sp, #24
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]
	//float current_velocity = velocity_ctrl_->getCurrentVelocity();
	double current_omega = imu_->getOmega();
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	4618      	mov	r0, r3
 8004da8:	f7fd f822 	bl	8001df0 <_ZN3IMU8getOmegaEv>
 8004dac:	ee10 3a10 	vmov	r3, s0
 8004db0:	4618      	mov	r0, r3
 8004db2:	f7fb fbe1 	bl	8000578 <__aeabi_f2d>
 8004db6:	4603      	mov	r3, r0
 8004db8:	460c      	mov	r4, r1
 8004dba:	e9c7 3404 	strd	r3, r4, [r7, #16]
	float distance = encoder_->getDistance();
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f7fc fc70 	bl	80016a8 <_ZN7Encoder11getDistanceEv>
 8004dc8:	ed87 0a03 	vstr	s0, [r7, #12]

	delta_theta_ = current_omega * DELTA_T;
 8004dcc:	a376      	add	r3, pc, #472	; (adr r3, 8004fa8 <_ZN8Odometry12calcPotitionEv+0x210>)
 8004dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dd2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004dd6:	f7fb fc27 	bl	8000628 <__aeabi_dmul>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	460c      	mov	r4, r1
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38

	x_robot_ = x_robot_ + distance * cos(theta_ + delta_theta_ / 2);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8004dea:	68f8      	ldr	r0, [r7, #12]
 8004dec:	f7fb fbc4 	bl	8000578 <__aeabi_f2d>
 8004df0:	4682      	mov	sl, r0
 8004df2:	468b      	mov	fp, r1
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8004e00:	f04f 0200 	mov.w	r2, #0
 8004e04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004e08:	f7fb fd38 	bl	800087c <__aeabi_ddiv>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	460b      	mov	r3, r1
 8004e10:	4640      	mov	r0, r8
 8004e12:	4649      	mov	r1, r9
 8004e14:	f7fb fa52 	bl	80002bc <__adddf3>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	460b      	mov	r3, r1
 8004e1c:	ec43 2b17 	vmov	d7, r2, r3
 8004e20:	eeb0 0a47 	vmov.f32	s0, s14
 8004e24:	eef0 0a67 	vmov.f32	s1, s15
 8004e28:	f00f f846 	bl	8013eb8 <cos>
 8004e2c:	ec53 2b10 	vmov	r2, r3, d0
 8004e30:	4650      	mov	r0, sl
 8004e32:	4659      	mov	r1, fp
 8004e34:	f7fb fbf8 	bl	8000628 <__aeabi_dmul>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	460b      	mov	r3, r1
 8004e3c:	4620      	mov	r0, r4
 8004e3e:	4629      	mov	r1, r5
 8004e40:	f7fb fa3c 	bl	80002bc <__adddf3>
 8004e44:	4603      	mov	r3, r0
 8004e46:	460c      	mov	r4, r1
 8004e48:	687a      	ldr	r2, [r7, #4]
 8004e4a:	e9c2 3404 	strd	r3, r4, [r2, #16]
	y_robot_ = y_robot_ + distance * sin(theta_ + delta_theta_ / 2);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8004e54:	68f8      	ldr	r0, [r7, #12]
 8004e56:	f7fb fb8f 	bl	8000578 <__aeabi_f2d>
 8004e5a:	4682      	mov	sl, r0
 8004e5c:	468b      	mov	fp, r1
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8004e6a:	f04f 0200 	mov.w	r2, #0
 8004e6e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004e72:	f7fb fd03 	bl	800087c <__aeabi_ddiv>
 8004e76:	4602      	mov	r2, r0
 8004e78:	460b      	mov	r3, r1
 8004e7a:	4640      	mov	r0, r8
 8004e7c:	4649      	mov	r1, r9
 8004e7e:	f7fb fa1d 	bl	80002bc <__adddf3>
 8004e82:	4602      	mov	r2, r0
 8004e84:	460b      	mov	r3, r1
 8004e86:	ec43 2b17 	vmov	d7, r2, r3
 8004e8a:	eeb0 0a47 	vmov.f32	s0, s14
 8004e8e:	eef0 0a67 	vmov.f32	s1, s15
 8004e92:	f00f f855 	bl	8013f40 <sin>
 8004e96:	ec53 2b10 	vmov	r2, r3, d0
 8004e9a:	4650      	mov	r0, sl
 8004e9c:	4659      	mov	r1, fp
 8004e9e:	f7fb fbc3 	bl	8000628 <__aeabi_dmul>
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	460b      	mov	r3, r1
 8004ea6:	4620      	mov	r0, r4
 8004ea8:	4629      	mov	r1, r5
 8004eaa:	f7fb fa07 	bl	80002bc <__adddf3>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	460c      	mov	r4, r1
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	e9c2 3406 	strd	r3, r4, [r2, #24]
	theta_= theta_ + delta_theta_;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8004ec4:	461a      	mov	r2, r3
 8004ec6:	4623      	mov	r3, r4
 8004ec8:	f7fb f9f8 	bl	80002bc <__adddf3>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	460c      	mov	r4, r1
 8004ed0:	687a      	ldr	r2, [r7, #4]
 8004ed2:	e9c2 3408 	strd	r3, r4, [r2, #32]

	x_sens_ = x_robot_ + SENSOR_LENGTH * cos(theta_); //calculate a sensor position from robot's center position
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	ed93 7b08 	vldr	d7, [r3, #32]
 8004ee2:	eeb0 0a47 	vmov.f32	s0, s14
 8004ee6:	eef0 0a67 	vmov.f32	s1, s15
 8004eea:	f00e ffe5 	bl	8013eb8 <cos>
 8004eee:	ec51 0b10 	vmov	r0, r1, d0
 8004ef2:	f04f 0200 	mov.w	r2, #0
 8004ef6:	4b28      	ldr	r3, [pc, #160]	; (8004f98 <_ZN8Odometry12calcPotitionEv+0x200>)
 8004ef8:	f7fb fb96 	bl	8000628 <__aeabi_dmul>
 8004efc:	4602      	mov	r2, r0
 8004efe:	460b      	mov	r3, r1
 8004f00:	4620      	mov	r0, r4
 8004f02:	4629      	mov	r1, r5
 8004f04:	f7fb f9da 	bl	80002bc <__adddf3>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	460c      	mov	r4, r1
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	y_sens_ = y_robot_ + SENSOR_LENGTH * sin(theta_);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	ed93 7b08 	vldr	d7, [r3, #32]
 8004f1e:	eeb0 0a47 	vmov.f32	s0, s14
 8004f22:	eef0 0a67 	vmov.f32	s1, s15
 8004f26:	f00f f80b 	bl	8013f40 <sin>
 8004f2a:	ec51 0b10 	vmov	r0, r1, d0
 8004f2e:	f04f 0200 	mov.w	r2, #0
 8004f32:	4b19      	ldr	r3, [pc, #100]	; (8004f98 <_ZN8Odometry12calcPotitionEv+0x200>)
 8004f34:	f7fb fb78 	bl	8000628 <__aeabi_dmul>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	460b      	mov	r3, r1
 8004f3c:	4620      	mov	r0, r4
 8004f3e:	4629      	mov	r1, r5
 8004f40:	f7fb f9bc 	bl	80002bc <__adddf3>
 8004f44:	4603      	mov	r3, r0
 8004f46:	460c      	mov	r4, r1
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30

	monitor_x = x_sens_;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8004f54:	4618      	mov	r0, r3
 8004f56:	4621      	mov	r1, r4
 8004f58:	f7fb fe5e 	bl	8000c18 <__aeabi_d2f>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	4b0f      	ldr	r3, [pc, #60]	; (8004f9c <_ZN8Odometry12calcPotitionEv+0x204>)
 8004f60:	601a      	str	r2, [r3, #0]
	monitor_y = y_sens_;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8004f68:	4618      	mov	r0, r3
 8004f6a:	4621      	mov	r1, r4
 8004f6c:	f7fb fe54 	bl	8000c18 <__aeabi_d2f>
 8004f70:	4602      	mov	r2, r0
 8004f72:	4b0b      	ldr	r3, [pc, #44]	; (8004fa0 <_ZN8Odometry12calcPotitionEv+0x208>)
 8004f74:	601a      	str	r2, [r3, #0]
	monitor_theta = theta_;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	4621      	mov	r1, r4
 8004f80:	f7fb fe4a 	bl	8000c18 <__aeabi_d2f>
 8004f84:	4602      	mov	r2, r0
 8004f86:	4b07      	ldr	r3, [pc, #28]	; (8004fa4 <_ZN8Odometry12calcPotitionEv+0x20c>)
 8004f88:	601a      	str	r2, [r3, #0]
}
 8004f8a:	bf00      	nop
 8004f8c:	3718      	adds	r7, #24
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f94:	f3af 8000 	nop.w
 8004f98:	405b8000 	.word	0x405b8000
 8004f9c:	20000290 	.word	0x20000290
 8004fa0:	20000294 	.word	0x20000294
 8004fa4:	20000298 	.word	0x20000298
 8004fa8:	d2f1a9fc 	.word	0xd2f1a9fc
 8004fac:	3f50624d 	.word	0x3f50624d

08004fb0 <_ZN8Odometry4flipEv>:

void Odometry::flip()
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b082      	sub	sp, #8
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
	calcPotition();
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f7ff feed 	bl	8004d98 <_ZN8Odometry12calcPotitionEv>
}
 8004fbe:	bf00      	nop
 8004fc0:	3708      	adds	r7, #8
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}

08004fc6 <_ZN8Odometry8getThetaEv>:
{
	return y_sens_;
}

double Odometry::getTheta()
{
 8004fc6:	b490      	push	{r4, r7}
 8004fc8:	b082      	sub	sp, #8
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	6078      	str	r0, [r7, #4]
	return theta_;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8004fd4:	ec44 3b17 	vmov	d7, r3, r4
}
 8004fd8:	eeb0 0a47 	vmov.f32	s0, s14
 8004fdc:	eef0 0a67 	vmov.f32	s1, s15
 8004fe0:	3708      	adds	r7, #8
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bc90      	pop	{r4, r7}
 8004fe6:	4770      	bx	lr

08004fe8 <_ZN8Odometry13clearPotitionEv>:
{
	return delta_theta_;
}

void Odometry::clearPotition()
{
 8004fe8:	b490      	push	{r4, r7}
 8004fea:	b082      	sub	sp, #8
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
	x_sens_ = 0;
 8004ff0:	687a      	ldr	r2, [r7, #4]
 8004ff2:	f04f 0300 	mov.w	r3, #0
 8004ff6:	f04f 0400 	mov.w	r4, #0
 8004ffa:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	y_sens_ = 0;
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	f04f 0300 	mov.w	r3, #0
 8005004:	f04f 0400 	mov.w	r4, #0
 8005008:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	theta_ = 0;
 800500c:	687a      	ldr	r2, [r7, #4]
 800500e:	f04f 0300 	mov.w	r3, #0
 8005012:	f04f 0400 	mov.w	r4, #0
 8005016:	e9c2 3408 	strd	r3, r4, [r2, #32]
}
 800501a:	bf00      	nop
 800501c:	3708      	adds	r7, #8
 800501e:	46bd      	mov	sp, r7
 8005020:	bc90      	pop	{r4, r7}
 8005022:	4770      	bx	lr

08005024 <_ZN13PathFollowingC1Ev>:

uint16_t mon_ref_num;
double mon_x, mon_y, mon_th;
double mon_log_dis, mon_log_th;

PathFollowing::PathFollowing() : execute_flag_(false), x_tar_(0), y_tar_(0), th_tar_(0), ref_num(0)
 8005024:	b490      	push	{r4, r7}
 8005026:	b082      	sub	sp, #8
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2200      	movs	r2, #0
 8005030:	701a      	strb	r2, [r3, #0]
 8005032:	687a      	ldr	r2, [r7, #4]
 8005034:	f04f 0300 	mov.w	r3, #0
 8005038:	f04f 0400 	mov.w	r4, #0
 800503c:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	f04f 0300 	mov.w	r3, #0
 8005046:	f04f 0400 	mov.w	r4, #0
 800504a:	e9c2 3404 	strd	r3, r4, [r2, #16]
 800504e:	687a      	ldr	r2, [r7, #4]
 8005050:	f04f 0300 	mov.w	r3, #0
 8005054:	f04f 0400 	mov.w	r4, #0
 8005058:	e9c2 3406 	strd	r3, r4, [r2, #24]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8005062:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8005066:	2200      	movs	r2, #0
 8005068:	801a      	strh	r2, [r3, #0]
{
	rtParam.kx = 0;
 800506a:	4a29      	ldr	r2, [pc, #164]	; (8005110 <_ZN13PathFollowingC1Ev+0xec>)
 800506c:	f04f 0300 	mov.w	r3, #0
 8005070:	f04f 0400 	mov.w	r4, #0
 8005074:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = 0;
 8005078:	4a25      	ldr	r2, [pc, #148]	; (8005110 <_ZN13PathFollowingC1Ev+0xec>)
 800507a:	f04f 0300 	mov.w	r3, #0
 800507e:	f04f 0400 	mov.w	r4, #0
 8005082:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = 0;
 8005086:	4a22      	ldr	r2, [pc, #136]	; (8005110 <_ZN13PathFollowingC1Ev+0xec>)
 8005088:	f04f 0300 	mov.w	r3, #0
 800508c:	f04f 0400 	mov.w	r4, #0
 8005090:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.target_x = 0;
 8005094:	4a1f      	ldr	r2, [pc, #124]	; (8005114 <_ZN13PathFollowingC1Ev+0xf0>)
 8005096:	f04f 0300 	mov.w	r3, #0
 800509a:	f04f 0400 	mov.w	r4, #0
 800509e:	e9c2 3400 	strd	r3, r4, [r2]
	rtU.target_y = 0;
 80050a2:	4a1c      	ldr	r2, [pc, #112]	; (8005114 <_ZN13PathFollowingC1Ev+0xf0>)
 80050a4:	f04f 0300 	mov.w	r3, #0
 80050a8:	f04f 0400 	mov.w	r4, #0
 80050ac:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtU.th = 0;
 80050b0:	4a18      	ldr	r2, [pc, #96]	; (8005114 <_ZN13PathFollowingC1Ev+0xf0>)
 80050b2:	f04f 0300 	mov.w	r3, #0
 80050b6:	f04f 0400 	mov.w	r4, #0
 80050ba:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.x = 0;
 80050be:	4a15      	ldr	r2, [pc, #84]	; (8005114 <_ZN13PathFollowingC1Ev+0xf0>)
 80050c0:	f04f 0300 	mov.w	r3, #0
 80050c4:	f04f 0400 	mov.w	r4, #0
 80050c8:	e9c2 3406 	strd	r3, r4, [r2, #24]
	rtU.y = 0;
 80050cc:	4a11      	ldr	r2, [pc, #68]	; (8005114 <_ZN13PathFollowingC1Ev+0xf0>)
 80050ce:	f04f 0300 	mov.w	r3, #0
 80050d2:	f04f 0400 	mov.w	r4, #0
 80050d6:	e9c2 3408 	strd	r3, r4, [r2, #32]
	rtU.th_cur = 0;
 80050da:	4a0e      	ldr	r2, [pc, #56]	; (8005114 <_ZN13PathFollowingC1Ev+0xf0>)
 80050dc:	f04f 0300 	mov.w	r3, #0
 80050e0:	f04f 0400 	mov.w	r4, #0
 80050e4:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	rtY.V_tar = 0;
 80050e8:	4a0b      	ldr	r2, [pc, #44]	; (8005118 <_ZN13PathFollowingC1Ev+0xf4>)
 80050ea:	f04f 0300 	mov.w	r3, #0
 80050ee:	f04f 0400 	mov.w	r4, #0
 80050f2:	e9c2 3400 	strd	r3, r4, [r2]
	rtY.tar = 0;
 80050f6:	4a08      	ldr	r2, [pc, #32]	; (8005118 <_ZN13PathFollowingC1Ev+0xf4>)
 80050f8:	f04f 0300 	mov.w	r3, #0
 80050fc:	f04f 0400 	mov.w	r4, #0
 8005100:	e9c2 3402 	strd	r3, r4, [r2, #8]

}
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	4618      	mov	r0, r3
 8005108:	3708      	adds	r7, #8
 800510a:	46bd      	mov	sp, r7
 800510c:	bc90      	pop	{r4, r7}
 800510e:	4770      	bx	lr
 8005110:	20043c48 	.word	0x20043c48
 8005114:	20043bd8 	.word	0x20043bd8
 8005118:	20043c38 	.word	0x20043c38

0800511c <_ZN13PathFollowing4initEv>:
	}

}

void PathFollowing::init()
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b088      	sub	sp, #32
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
	path_following_initialize();
 8005124:	f001 fc2e 	bl	8006984 <path_following_initialize>

	double temp_kx, temp_ky, temp_kt;
	sd_read_array_double("PARAMS", "KX.TXT", 1, &temp_kx);
 8005128:	f107 0318 	add.w	r3, r7, #24
 800512c:	2201      	movs	r2, #1
 800512e:	4915      	ldr	r1, [pc, #84]	; (8005184 <_ZN13PathFollowing4initEv+0x68>)
 8005130:	4815      	ldr	r0, [pc, #84]	; (8005188 <_ZN13PathFollowing4initEv+0x6c>)
 8005132:	f7fc fc4f 	bl	80019d4 <sd_read_array_double>
	sd_read_array_double("PARAMS", "KY.TXT", 1, &temp_ky);
 8005136:	f107 0310 	add.w	r3, r7, #16
 800513a:	2201      	movs	r2, #1
 800513c:	4913      	ldr	r1, [pc, #76]	; (800518c <_ZN13PathFollowing4initEv+0x70>)
 800513e:	4812      	ldr	r0, [pc, #72]	; (8005188 <_ZN13PathFollowing4initEv+0x6c>)
 8005140:	f7fc fc48 	bl	80019d4 <sd_read_array_double>
	sd_read_array_double("PARAMS", "KT.TXT", 1, &temp_kt);
 8005144:	f107 0308 	add.w	r3, r7, #8
 8005148:	2201      	movs	r2, #1
 800514a:	4911      	ldr	r1, [pc, #68]	; (8005190 <_ZN13PathFollowing4initEv+0x74>)
 800514c:	480e      	ldr	r0, [pc, #56]	; (8005188 <_ZN13PathFollowing4initEv+0x6c>)
 800514e:	f7fc fc41 	bl	80019d4 <sd_read_array_double>
	setGain(temp_kx, temp_ky, temp_kt);
 8005152:	ed97 7b06 	vldr	d7, [r7, #24]
 8005156:	ed97 6b04 	vldr	d6, [r7, #16]
 800515a:	ed97 5b02 	vldr	d5, [r7, #8]
 800515e:	eeb0 2a45 	vmov.f32	s4, s10
 8005162:	eef0 2a65 	vmov.f32	s5, s11
 8005166:	eeb0 1a46 	vmov.f32	s2, s12
 800516a:	eef0 1a66 	vmov.f32	s3, s13
 800516e:	eeb0 0a47 	vmov.f32	s0, s14
 8005172:	eef0 0a67 	vmov.f32	s1, s15
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f000 f80c 	bl	8005194 <_ZN13PathFollowing7setGainEddd>
}
 800517c:	bf00      	nop
 800517e:	3720      	adds	r7, #32
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}
 8005184:	08019568 	.word	0x08019568
 8005188:	08019570 	.word	0x08019570
 800518c:	08019578 	.word	0x08019578
 8005190:	08019580 	.word	0x08019580

08005194 <_ZN13PathFollowing7setGainEddd>:

void PathFollowing::setGain(double kx, double ky, double kt)
{
 8005194:	b490      	push	{r4, r7}
 8005196:	b088      	sub	sp, #32
 8005198:	af00      	add	r7, sp, #0
 800519a:	61f8      	str	r0, [r7, #28]
 800519c:	ed87 0b04 	vstr	d0, [r7, #16]
 80051a0:	ed87 1b02 	vstr	d1, [r7, #8]
 80051a4:	ed87 2b00 	vstr	d2, [r7]
	rtParam.kx = kx;
 80051a8:	4a09      	ldr	r2, [pc, #36]	; (80051d0 <_ZN13PathFollowing7setGainEddd+0x3c>)
 80051aa:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80051ae:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = ky;
 80051b2:	4a07      	ldr	r2, [pc, #28]	; (80051d0 <_ZN13PathFollowing7setGainEddd+0x3c>)
 80051b4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80051b8:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = kt;
 80051bc:	4a04      	ldr	r2, [pc, #16]	; (80051d0 <_ZN13PathFollowing7setGainEddd+0x3c>)
 80051be:	e9d7 3400 	ldrd	r3, r4, [r7]
 80051c2:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 80051c6:	bf00      	nop
 80051c8:	3720      	adds	r7, #32
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bc90      	pop	{r4, r7}
 80051ce:	4770      	bx	lr
 80051d0:	20043c48 	.word	0x20043c48

080051d4 <_ZN11PowerSensor4initEv>:
#define LOW_VOLTAGE_THRESHOLD 7.4

float monitor_voltage;

void PowerSensor::init()
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b082      	sub	sp, #8
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT);
 80051dc:	2088      	movs	r0, #136	; 0x88
 80051de:	f7fc ff4a 	bl	8002076 <INA260_init>
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT);
 80051e2:	2080      	movs	r0, #128	; 0x80
 80051e4:	f7fc ff47 	bl	8002076 <INA260_init>
}
 80051e8:	bf00      	nop
 80051ea:	3708      	adds	r7, #8
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}

080051f0 <_ZN11PowerSensor12updateValuesEv>:

void PowerSensor::updateValues()
{
 80051f0:	b590      	push	{r4, r7, lr}
 80051f2:	b083      	sub	sp, #12
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
	//current_l_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
	//current_r_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT) * 0.00125;
	buttery_voltage_ = INA260_read(0x02, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
 80051f8:	2188      	movs	r1, #136	; 0x88
 80051fa:	2002      	movs	r0, #2
 80051fc:	f7fc fed8 	bl	8001fb0 <INA260_read>
 8005200:	4603      	mov	r3, r0
 8005202:	4618      	mov	r0, r3
 8005204:	f7fb f9a6 	bl	8000554 <__aeabi_i2d>
 8005208:	a30c      	add	r3, pc, #48	; (adr r3, 800523c <_ZN11PowerSensor12updateValuesEv+0x4c>)
 800520a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800520e:	f7fb fa0b 	bl	8000628 <__aeabi_dmul>
 8005212:	4603      	mov	r3, r0
 8005214:	460c      	mov	r4, r1
 8005216:	4618      	mov	r0, r3
 8005218:	4621      	mov	r1, r4
 800521a:	f7fb fcfd 	bl	8000c18 <__aeabi_d2f>
 800521e:	4602      	mov	r2, r0
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	609a      	str	r2, [r3, #8]

	monitor_voltage = buttery_voltage_;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	4a03      	ldr	r2, [pc, #12]	; (8005238 <_ZN11PowerSensor12updateValuesEv+0x48>)
 800522a:	6013      	str	r3, [r2, #0]
}
 800522c:	bf00      	nop
 800522e:	370c      	adds	r7, #12
 8005230:	46bd      	mov	sp, r7
 8005232:	bd90      	pop	{r4, r7, pc}
 8005234:	f3af 8000 	nop.w
 8005238:	2000029c 	.word	0x2000029c
 800523c:	47ae147b 	.word	0x47ae147b
 8005240:	3f547ae1 	.word	0x3f547ae1

08005244 <_ZN11PowerSensor17getButteryVoltageEv>:
	left = current_l_;
	right = current_r_;
}

float PowerSensor::getButteryVoltage()
{
 8005244:	b480      	push	{r7}
 8005246:	b083      	sub	sp, #12
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
	return buttery_voltage_;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	689b      	ldr	r3, [r3, #8]
 8005250:	ee07 3a90 	vmov	s15, r3

}
 8005254:	eeb0 0a67 	vmov.f32	s0, s15
 8005258:	370c      	adds	r7, #12
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr
	...

08005264 <_ZN12RotarySwitch8getValueEv>:

#include "RotarySwitch.hpp"


uint16_t RotarySwitch::getValue()
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b084      	sub	sp, #16
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 800526c:	2300      	movs	r3, #0
 800526e:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_1))	ret_value |= 0x01;
 8005270:	2102      	movs	r1, #2
 8005272:	4822      	ldr	r0, [pc, #136]	; (80052fc <_ZN12RotarySwitch8getValueEv+0x98>)
 8005274:	f005 fba8 	bl	800a9c8 <HAL_GPIO_ReadPin>
 8005278:	4603      	mov	r3, r0
 800527a:	2b00      	cmp	r3, #0
 800527c:	bf0c      	ite	eq
 800527e:	2301      	moveq	r3, #1
 8005280:	2300      	movne	r3, #0
 8005282:	b2db      	uxtb	r3, r3
 8005284:	2b00      	cmp	r3, #0
 8005286:	d003      	beq.n	8005290 <_ZN12RotarySwitch8getValueEv+0x2c>
 8005288:	89fb      	ldrh	r3, [r7, #14]
 800528a:	f043 0301 	orr.w	r3, r3, #1
 800528e:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_3))	ret_value |= 0x02;
 8005290:	2108      	movs	r1, #8
 8005292:	481a      	ldr	r0, [pc, #104]	; (80052fc <_ZN12RotarySwitch8getValueEv+0x98>)
 8005294:	f005 fb98 	bl	800a9c8 <HAL_GPIO_ReadPin>
 8005298:	4603      	mov	r3, r0
 800529a:	2b00      	cmp	r3, #0
 800529c:	bf0c      	ite	eq
 800529e:	2301      	moveq	r3, #1
 80052a0:	2300      	movne	r3, #0
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d003      	beq.n	80052b0 <_ZN12RotarySwitch8getValueEv+0x4c>
 80052a8:	89fb      	ldrh	r3, [r7, #14]
 80052aa:	f043 0302 	orr.w	r3, r3, #2
 80052ae:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_4))	ret_value |= 0x04;
 80052b0:	2110      	movs	r1, #16
 80052b2:	4812      	ldr	r0, [pc, #72]	; (80052fc <_ZN12RotarySwitch8getValueEv+0x98>)
 80052b4:	f005 fb88 	bl	800a9c8 <HAL_GPIO_ReadPin>
 80052b8:	4603      	mov	r3, r0
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	bf0c      	ite	eq
 80052be:	2301      	moveq	r3, #1
 80052c0:	2300      	movne	r3, #0
 80052c2:	b2db      	uxtb	r3, r3
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d003      	beq.n	80052d0 <_ZN12RotarySwitch8getValueEv+0x6c>
 80052c8:	89fb      	ldrh	r3, [r7, #14]
 80052ca:	f043 0304 	orr.w	r3, r3, #4
 80052ce:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_7))	ret_value |= 0x08;
 80052d0:	2180      	movs	r1, #128	; 0x80
 80052d2:	480a      	ldr	r0, [pc, #40]	; (80052fc <_ZN12RotarySwitch8getValueEv+0x98>)
 80052d4:	f005 fb78 	bl	800a9c8 <HAL_GPIO_ReadPin>
 80052d8:	4603      	mov	r3, r0
 80052da:	2b00      	cmp	r3, #0
 80052dc:	bf0c      	ite	eq
 80052de:	2301      	moveq	r3, #1
 80052e0:	2300      	movne	r3, #0
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d003      	beq.n	80052f0 <_ZN12RotarySwitch8getValueEv+0x8c>
 80052e8:	89fb      	ldrh	r3, [r7, #14]
 80052ea:	f043 0308 	orr.w	r3, r3, #8
 80052ee:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 80052f0:	89fb      	ldrh	r3, [r7, #14]

}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3710      	adds	r7, #16
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
 80052fa:	bf00      	nop
 80052fc:	40020c00 	.word	0x40020c00

08005300 <_ZN10SideSensorC1Ev>:
#include "SideSensor.hpp"

uint16_t mon_status;
uint16_t mon_cnt_l, mon_cnt_r;

SideSensor::SideSensor() : status_(0), white_line_cnt_l_(0), white_line_cnt_r_(0), ignore_flag_(false)
 8005300:	b480      	push	{r7}
 8005302:	b083      	sub	sp, #12
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2200      	movs	r2, #0
 800530c:	801a      	strh	r2, [r3, #0]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2200      	movs	r2, #0
 8005312:	805a      	strh	r2, [r3, #2]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2200      	movs	r2, #0
 8005318:	809a      	strh	r2, [r3, #4]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	719a      	strb	r2, [r3, #6]
{

}
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	4618      	mov	r0, r3
 8005324:	370c      	adds	r7, #12
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr
	...

08005330 <_ZN10SideSensor12updateStatusEv>:
	}

}

void SideSensor::updateStatus()
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b082      	sub	sp, #8
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
	static bool white_flag1 = false;
	static bool white_flag2 = false;
	static uint16_t cnt_l, cnt_r;

	if(ignore_flag_ == false){
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	799b      	ldrb	r3, [r3, #6]
 800533c:	f083 0301 	eor.w	r3, r3, #1
 8005340:	b2db      	uxtb	r3, r3
 8005342:	2b00      	cmp	r3, #0
 8005344:	f000 80c7 	beq.w	80054d6 <_ZN10SideSensor12updateStatusEv+0x1a6>

		if(white_flag1 == false){
 8005348:	4b65      	ldr	r3, [pc, #404]	; (80054e0 <_ZN10SideSensor12updateStatusEv+0x1b0>)
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	f083 0301 	eor.w	r3, r3, #1
 8005350:	b2db      	uxtb	r3, r3
 8005352:	2b00      	cmp	r3, #0
 8005354:	d027      	beq.n	80053a6 <_ZN10SideSensor12updateStatusEv+0x76>
			if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2)){
 8005356:	2104      	movs	r1, #4
 8005358:	4862      	ldr	r0, [pc, #392]	; (80054e4 <_ZN10SideSensor12updateStatusEv+0x1b4>)
 800535a:	f005 fb35 	bl	800a9c8 <HAL_GPIO_ReadPin>
 800535e:	4603      	mov	r3, r0
 8005360:	2b00      	cmp	r3, #0
 8005362:	bf0c      	ite	eq
 8005364:	2301      	moveq	r3, #1
 8005366:	2300      	movne	r3, #0
 8005368:	b2db      	uxtb	r3, r3
 800536a:	2b00      	cmp	r3, #0
 800536c:	d006      	beq.n	800537c <_ZN10SideSensor12updateStatusEv+0x4c>
				cnt_r++;
 800536e:	4b5e      	ldr	r3, [pc, #376]	; (80054e8 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8005370:	881b      	ldrh	r3, [r3, #0]
 8005372:	3301      	adds	r3, #1
 8005374:	b29a      	uxth	r2, r3
 8005376:	4b5c      	ldr	r3, [pc, #368]	; (80054e8 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8005378:	801a      	strh	r2, [r3, #0]
 800537a:	e002      	b.n	8005382 <_ZN10SideSensor12updateStatusEv+0x52>
			}
			else{
				cnt_r = 0;
 800537c:	4b5a      	ldr	r3, [pc, #360]	; (80054e8 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 800537e:	2200      	movs	r2, #0
 8005380:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_r >= 5){
 8005382:	4b59      	ldr	r3, [pc, #356]	; (80054e8 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8005384:	881b      	ldrh	r3, [r3, #0]
 8005386:	2b04      	cmp	r3, #4
 8005388:	d93f      	bls.n	800540a <_ZN10SideSensor12updateStatusEv+0xda>
				status_ |= 0x01;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	881b      	ldrh	r3, [r3, #0]
 800538e:	f043 0301 	orr.w	r3, r3, #1
 8005392:	b29a      	uxth	r2, r3
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	801a      	strh	r2, [r3, #0]
				white_flag1 = true;
 8005398:	4b51      	ldr	r3, [pc, #324]	; (80054e0 <_ZN10SideSensor12updateStatusEv+0x1b0>)
 800539a:	2201      	movs	r2, #1
 800539c:	701a      	strb	r2, [r3, #0]
				cnt_r = 0;
 800539e:	4b52      	ldr	r3, [pc, #328]	; (80054e8 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 80053a0:	2200      	movs	r2, #0
 80053a2:	801a      	strh	r2, [r3, #0]
 80053a4:	e031      	b.n	800540a <_ZN10SideSensor12updateStatusEv+0xda>
			}

		}
		else if(white_flag1 == true){
 80053a6:	4b4e      	ldr	r3, [pc, #312]	; (80054e0 <_ZN10SideSensor12updateStatusEv+0x1b0>)
 80053a8:	781b      	ldrb	r3, [r3, #0]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d02d      	beq.n	800540a <_ZN10SideSensor12updateStatusEv+0xda>
			if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2)){
 80053ae:	2104      	movs	r1, #4
 80053b0:	484c      	ldr	r0, [pc, #304]	; (80054e4 <_ZN10SideSensor12updateStatusEv+0x1b4>)
 80053b2:	f005 fb09 	bl	800a9c8 <HAL_GPIO_ReadPin>
 80053b6:	4603      	mov	r3, r0
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	bf14      	ite	ne
 80053bc:	2301      	movne	r3, #1
 80053be:	2300      	moveq	r3, #0
 80053c0:	b2db      	uxtb	r3, r3
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d006      	beq.n	80053d4 <_ZN10SideSensor12updateStatusEv+0xa4>
				cnt_r++;
 80053c6:	4b48      	ldr	r3, [pc, #288]	; (80054e8 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 80053c8:	881b      	ldrh	r3, [r3, #0]
 80053ca:	3301      	adds	r3, #1
 80053cc:	b29a      	uxth	r2, r3
 80053ce:	4b46      	ldr	r3, [pc, #280]	; (80054e8 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 80053d0:	801a      	strh	r2, [r3, #0]
 80053d2:	e002      	b.n	80053da <_ZN10SideSensor12updateStatusEv+0xaa>
			}
			else{
				cnt_r = 0;
 80053d4:	4b44      	ldr	r3, [pc, #272]	; (80054e8 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 80053d6:	2200      	movs	r2, #0
 80053d8:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_r >= 5){
 80053da:	4b43      	ldr	r3, [pc, #268]	; (80054e8 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 80053dc:	881b      	ldrh	r3, [r3, #0]
 80053de:	2b04      	cmp	r3, #4
 80053e0:	d913      	bls.n	800540a <_ZN10SideSensor12updateStatusEv+0xda>
				status_ ^= 0x01;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	881b      	ldrh	r3, [r3, #0]
 80053e6:	f083 0301 	eor.w	r3, r3, #1
 80053ea:	b29a      	uxth	r2, r3
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	801a      	strh	r2, [r3, #0]
				white_flag1 = false;
 80053f0:	4b3b      	ldr	r3, [pc, #236]	; (80054e0 <_ZN10SideSensor12updateStatusEv+0x1b0>)
 80053f2:	2200      	movs	r2, #0
 80053f4:	701a      	strb	r2, [r3, #0]

				white_line_cnt_r_++;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	889b      	ldrh	r3, [r3, #4]
 80053fa:	3301      	adds	r3, #1
 80053fc:	b29a      	uxth	r2, r3
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	809a      	strh	r2, [r3, #4]
				mon_cnt_r = white_line_cnt_r_;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	889a      	ldrh	r2, [r3, #4]
 8005406:	4b39      	ldr	r3, [pc, #228]	; (80054ec <_ZN10SideSensor12updateStatusEv+0x1bc>)
 8005408:	801a      	strh	r2, [r3, #0]
			}
		}


		if(white_flag2 == false){
 800540a:	4b39      	ldr	r3, [pc, #228]	; (80054f0 <_ZN10SideSensor12updateStatusEv+0x1c0>)
 800540c:	781b      	ldrb	r3, [r3, #0]
 800540e:	f083 0301 	eor.w	r3, r3, #1
 8005412:	b2db      	uxtb	r3, r3
 8005414:	2b00      	cmp	r3, #0
 8005416:	d027      	beq.n	8005468 <_ZN10SideSensor12updateStatusEv+0x138>
			if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_8)){
 8005418:	f44f 7180 	mov.w	r1, #256	; 0x100
 800541c:	4835      	ldr	r0, [pc, #212]	; (80054f4 <_ZN10SideSensor12updateStatusEv+0x1c4>)
 800541e:	f005 fad3 	bl	800a9c8 <HAL_GPIO_ReadPin>
 8005422:	4603      	mov	r3, r0
 8005424:	2b00      	cmp	r3, #0
 8005426:	bf0c      	ite	eq
 8005428:	2301      	moveq	r3, #1
 800542a:	2300      	movne	r3, #0
 800542c:	b2db      	uxtb	r3, r3
 800542e:	2b00      	cmp	r3, #0
 8005430:	d006      	beq.n	8005440 <_ZN10SideSensor12updateStatusEv+0x110>
				cnt_l++;
 8005432:	4b31      	ldr	r3, [pc, #196]	; (80054f8 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8005434:	881b      	ldrh	r3, [r3, #0]
 8005436:	3301      	adds	r3, #1
 8005438:	b29a      	uxth	r2, r3
 800543a:	4b2f      	ldr	r3, [pc, #188]	; (80054f8 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 800543c:	801a      	strh	r2, [r3, #0]
 800543e:	e002      	b.n	8005446 <_ZN10SideSensor12updateStatusEv+0x116>
			}
			else{
				cnt_l = 0;
 8005440:	4b2d      	ldr	r3, [pc, #180]	; (80054f8 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8005442:	2200      	movs	r2, #0
 8005444:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_l >= 5){
 8005446:	4b2c      	ldr	r3, [pc, #176]	; (80054f8 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8005448:	881b      	ldrh	r3, [r3, #0]
 800544a:	2b04      	cmp	r3, #4
 800544c:	d90c      	bls.n	8005468 <_ZN10SideSensor12updateStatusEv+0x138>
				status_ |= 0x02;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	881b      	ldrh	r3, [r3, #0]
 8005452:	f043 0302 	orr.w	r3, r3, #2
 8005456:	b29a      	uxth	r2, r3
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	801a      	strh	r2, [r3, #0]
				white_flag2 = true;
 800545c:	4b24      	ldr	r3, [pc, #144]	; (80054f0 <_ZN10SideSensor12updateStatusEv+0x1c0>)
 800545e:	2201      	movs	r2, #1
 8005460:	701a      	strb	r2, [r3, #0]
				cnt_l = 0;
 8005462:	4b25      	ldr	r3, [pc, #148]	; (80054f8 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8005464:	2200      	movs	r2, #0
 8005466:	801a      	strh	r2, [r3, #0]
			}

		}
		if(white_flag2 == true){
 8005468:	4b21      	ldr	r3, [pc, #132]	; (80054f0 <_ZN10SideSensor12updateStatusEv+0x1c0>)
 800546a:	781b      	ldrb	r3, [r3, #0]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d02e      	beq.n	80054ce <_ZN10SideSensor12updateStatusEv+0x19e>
			if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_8)){
 8005470:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005474:	481f      	ldr	r0, [pc, #124]	; (80054f4 <_ZN10SideSensor12updateStatusEv+0x1c4>)
 8005476:	f005 faa7 	bl	800a9c8 <HAL_GPIO_ReadPin>
 800547a:	4603      	mov	r3, r0
 800547c:	2b00      	cmp	r3, #0
 800547e:	bf14      	ite	ne
 8005480:	2301      	movne	r3, #1
 8005482:	2300      	moveq	r3, #0
 8005484:	b2db      	uxtb	r3, r3
 8005486:	2b00      	cmp	r3, #0
 8005488:	d006      	beq.n	8005498 <_ZN10SideSensor12updateStatusEv+0x168>
				cnt_l++;
 800548a:	4b1b      	ldr	r3, [pc, #108]	; (80054f8 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 800548c:	881b      	ldrh	r3, [r3, #0]
 800548e:	3301      	adds	r3, #1
 8005490:	b29a      	uxth	r2, r3
 8005492:	4b19      	ldr	r3, [pc, #100]	; (80054f8 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8005494:	801a      	strh	r2, [r3, #0]
 8005496:	e002      	b.n	800549e <_ZN10SideSensor12updateStatusEv+0x16e>
			}
			else{
				cnt_l = 0;
 8005498:	4b17      	ldr	r3, [pc, #92]	; (80054f8 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 800549a:	2200      	movs	r2, #0
 800549c:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_l >= 5){
 800549e:	4b16      	ldr	r3, [pc, #88]	; (80054f8 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 80054a0:	881b      	ldrh	r3, [r3, #0]
 80054a2:	2b04      	cmp	r3, #4
 80054a4:	d913      	bls.n	80054ce <_ZN10SideSensor12updateStatusEv+0x19e>
				status_ ^= 0x02;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	881b      	ldrh	r3, [r3, #0]
 80054aa:	f083 0302 	eor.w	r3, r3, #2
 80054ae:	b29a      	uxth	r2, r3
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	801a      	strh	r2, [r3, #0]
				white_flag2 = false;
 80054b4:	4b0e      	ldr	r3, [pc, #56]	; (80054f0 <_ZN10SideSensor12updateStatusEv+0x1c0>)
 80054b6:	2200      	movs	r2, #0
 80054b8:	701a      	strb	r2, [r3, #0]

				white_line_cnt_l_++;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	885b      	ldrh	r3, [r3, #2]
 80054be:	3301      	adds	r3, #1
 80054c0:	b29a      	uxth	r2, r3
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	805a      	strh	r2, [r3, #2]
				mon_cnt_l = white_line_cnt_l_;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	885a      	ldrh	r2, [r3, #2]
 80054ca:	4b0c      	ldr	r3, [pc, #48]	; (80054fc <_ZN10SideSensor12updateStatusEv+0x1cc>)
 80054cc:	801a      	strh	r2, [r3, #0]
			}

		}

		mon_status = status_;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	881a      	ldrh	r2, [r3, #0]
 80054d2:	4b0b      	ldr	r3, [pc, #44]	; (8005500 <_ZN10SideSensor12updateStatusEv+0x1d0>)
 80054d4:	801a      	strh	r2, [r3, #0]
	}

}
 80054d6:	bf00      	nop
 80054d8:	3708      	adds	r7, #8
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
 80054de:	bf00      	nop
 80054e0:	200002a6 	.word	0x200002a6
 80054e4:	40021000 	.word	0x40021000
 80054e8:	200002aa 	.word	0x200002aa
 80054ec:	200002a4 	.word	0x200002a4
 80054f0:	200002a7 	.word	0x200002a7
 80054f4:	40020c00 	.word	0x40020c00
 80054f8:	200002a8 	.word	0x200002a8
 80054fc:	200002a2 	.word	0x200002a2
 8005500:	200002a0 	.word	0x200002a0

08005504 <_ZN10SideSensor9getStatusEv>:
uint16_t SideSensor::getStatus()
{
 8005504:	b480      	push	{r7}
 8005506:	b083      	sub	sp, #12
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
	return status_;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	881b      	ldrh	r3, [r3, #0]
}
 8005510:	4618      	mov	r0, r3
 8005512:	370c      	adds	r7, #12
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr

0800551c <_ZN10SideSensor16getWhiteLineCntREv>:
{
	return white_line_cnt_l_;
}

uint16_t SideSensor::getWhiteLineCntR()
{
 800551c:	b480      	push	{r7}
 800551e:	b083      	sub	sp, #12
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
	return white_line_cnt_r_;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	889b      	ldrh	r3, [r3, #4]
}
 8005528:	4618      	mov	r0, r3
 800552a:	370c      	adds	r7, #12
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr

08005534 <_ZN10SideSensor17resetWhiteLineCntEv>:

void SideSensor::resetWhiteLineCnt()
{
 8005534:	b480      	push	{r7}
 8005536:	b083      	sub	sp, #12
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
	white_line_cnt_l_ = 0;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2200      	movs	r2, #0
 8005540:	805a      	strh	r2, [r3, #2]
	white_line_cnt_r_ = 0;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	809a      	strh	r2, [r3, #4]
}
 8005548:	bf00      	nop
 800554a:	370c      	adds	r7, #12
 800554c:	46bd      	mov	sp, r7
 800554e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005552:	4770      	bx	lr

08005554 <_ZN10SideSensor12enableIgnoreEv>:

void SideSensor::enableIgnore()
{
 8005554:	b480      	push	{r7}
 8005556:	b083      	sub	sp, #12
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
	ignore_flag_ = true;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2201      	movs	r2, #1
 8005560:	719a      	strb	r2, [r3, #6]
}
 8005562:	bf00      	nop
 8005564:	370c      	adds	r7, #12
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr

0800556e <_ZN10SideSensor13disableIgnoreEv>:

void SideSensor::disableIgnore()
{
 800556e:	b480      	push	{r7}
 8005570:	b083      	sub	sp, #12
 8005572:	af00      	add	r7, sp, #0
 8005574:	6078      	str	r0, [r7, #4]
	ignore_flag_ = false;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2200      	movs	r2, #0
 800557a:	719a      	strb	r2, [r3, #6]
}
 800557c:	bf00      	nop
 800557e:	370c      	adds	r7, #12
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr

08005588 <_ZN10SideSensor13getIgnoreFlagEv>:

bool SideSensor::getIgnoreFlag()
{
 8005588:	b480      	push	{r7}
 800558a:	b083      	sub	sp, #12
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
	return ignore_flag_;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	799b      	ldrb	r3, [r3, #6]
}
 8005594:	4618      	mov	r0, r3
 8005596:	370c      	adds	r7, #12
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr

080055a0 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>:

#include "SystemIdentification.hpp"

float mon_msig;

SystemIdentification::SystemIdentification(Logger *logger, Motor *motor) : msigArrayIdx_(0), inputVal_(0), processing_flag_(false)
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b084      	sub	sp, #16
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	60f8      	str	r0, [r7, #12]
 80055a8:	60b9      	str	r1, [r7, #8]
 80055aa:	607a      	str	r2, [r7, #4]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	4a10      	ldr	r2, [pc, #64]	; (80055f0 <_ZN20SystemIdentificationC1EP6LoggerP5Motor+0x50>)
 80055b0:	3308      	adds	r3, #8
 80055b2:	4611      	mov	r1, r2
 80055b4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80055b8:	4618      	mov	r0, r3
 80055ba:	f00f fcfd 	bl	8014fb8 <memcpy>
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2200      	movs	r2, #0
 80055c2:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	f04f 0200 	mov.w	r2, #0
 80055cc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2200      	movs	r2, #0
 80055d4:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
{
	logger_ = logger;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	68ba      	ldr	r2, [r7, #8]
 80055dc:	601a      	str	r2, [r3, #0]
	motor_ = motor;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	687a      	ldr	r2, [r7, #4]
 80055e2:	605a      	str	r2, [r3, #4]
	//msigItr_ = msigArray_.begin();
}
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	4618      	mov	r0, r3
 80055e8:	3710      	adds	r7, #16
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}
 80055ee:	bf00      	nop
 80055f0:	080195a4 	.word	0x080195a4

080055f4 <_ZN20SystemIdentification13inOutputStoreEf>:
{

}

void SystemIdentification::inOutputStore(float output)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b082      	sub	sp, #8
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
 80055fc:	ed87 0a00 	vstr	s0, [r7]
	if(processing_flag_ == true){
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8005606:	2b00      	cmp	r3, #0
 8005608:	d010      	beq.n	800562c <_ZN20SystemIdentification13inOutputStoreEf+0x38>
		logger_->storeLog(output);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	ed97 0a00 	vldr	s0, [r7]
 8005612:	4618      	mov	r0, r3
 8005614:	f7ff f864 	bl	80046e0 <_ZN6Logger8storeLogEf>
		logger_->storeLog2(inputVal_);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	edd3 7a80 	vldr	s15, [r3, #512]	; 0x200
 8005622:	eeb0 0a67 	vmov.f32	s0, s15
 8005626:	4610      	mov	r0, r2
 8005628:	f7ff f897 	bl	800475a <_ZN6Logger9storeLog2Ef>
	}

}
 800562c:	bf00      	nop
 800562e:	3708      	adds	r7, #8
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}

08005634 <_ZN20SystemIdentification10updateMsigEv>:
	logger_->saveLogs("sysident", "MSIGRES.txt");
	logger_->saveLogs2("sysident", "INPUT.txt");
}

void SystemIdentification::updateMsig()
{
 8005634:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005636:	b083      	sub	sp, #12
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
	if(processing_flag_ == true){
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8005642:	2b00      	cmp	r3, #0
 8005644:	d046      	beq.n	80056d4 <_ZN20SystemIdentification10updateMsigEv+0xa0>
		inputVal_ = inputRatio_ * msigArray_[msigArrayIdx_];
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	ed93 7a81 	vldr	s14, [r3, #516]	; 0x204
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 8005652:	461a      	mov	r2, r3
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	3204      	adds	r2, #4
 8005658:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 800565c:	ee07 3a90 	vmov	s15, r3
 8005660:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005664:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	edc3 7a80 	vstr	s15, [r3, #512]	; 0x200
		msigArrayIdx_++;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 8005674:	3301      	adds	r3, #1
 8005676:	b29a      	uxth	r2, r3
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
		mon_msig = inputVal_;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005684:	4a15      	ldr	r2, [pc, #84]	; (80056dc <_ZN20SystemIdentification10updateMsigEv+0xa8>)
 8005686:	6013      	str	r3, [r2, #0]

		if(msigArrayIdx_ >= MSIG_SIZE) msigArrayIdx_ = MSIG_SIZE;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 800568e:	2bf9      	cmp	r3, #249	; 0xf9
 8005690:	d903      	bls.n	800569a <_ZN20SystemIdentification10updateMsigEv+0x66>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	22fa      	movs	r2, #250	; 0xfa
 8005696:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc

		motor_->setRatio(inputVal_, -inputVal_);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	685c      	ldr	r4, [r3, #4]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80056a4:	4618      	mov	r0, r3
 80056a6:	f7fa ff67 	bl	8000578 <__aeabi_f2d>
 80056aa:	4605      	mov	r5, r0
 80056ac:	460e      	mov	r6, r1
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	edd3 7a80 	vldr	s15, [r3, #512]	; 0x200
 80056b4:	eef1 7a67 	vneg.f32	s15, s15
 80056b8:	ee17 3a90 	vmov	r3, s15
 80056bc:	4618      	mov	r0, r3
 80056be:	f7fa ff5b 	bl	8000578 <__aeabi_f2d>
 80056c2:	4602      	mov	r2, r0
 80056c4:	460b      	mov	r3, r1
 80056c6:	ec43 2b11 	vmov	d1, r2, r3
 80056ca:	ec46 5b10 	vmov	d0, r5, r6
 80056ce:	4620      	mov	r0, r4
 80056d0:	f7ff fab6 	bl	8004c40 <_ZN5Motor8setRatioEdd>

	}

}
 80056d4:	bf00      	nop
 80056d6:	370c      	adds	r7, #12
 80056d8:	46bd      	mov	sp, r7
 80056da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056dc:	200002ac 	.word	0x200002ac

080056e0 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>:

#include "VelocityCtrl.hpp"
//#include "ICM_20648.h"
#include <stdio.h>

VelocityCtrl::VelocityCtrl(Motor *motor, Encoder *encoder, IMU *imu) :
 80056e0:	b480      	push	{r7}
 80056e2:	b085      	sub	sp, #20
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	60f8      	str	r0, [r7, #12]
 80056e8:	60b9      	str	r1, [r7, #8]
 80056ea:	607a      	str	r2, [r7, #4]
 80056ec:	603b      	str	r3, [r7, #0]
target_velocity_(0), target_omega_(0), current_velocity_(0), current_omega_(0), v_kp_(0), v_kd_(0), v_ki_(0),
	o_kp_(0), o_kd_(0), o_ki_(0), excution_flag_(false), i_reset_flag_(false), rotation_ratio_(0)
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	f04f 0200 	mov.w	r2, #0
 80056f4:	601a      	str	r2, [r3, #0]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f04f 0200 	mov.w	r2, #0
 80056fc:	605a      	str	r2, [r3, #4]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	f04f 0200 	mov.w	r2, #0
 8005704:	609a      	str	r2, [r3, #8]
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	f04f 0200 	mov.w	r2, #0
 800570c:	60da      	str	r2, [r3, #12]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	f04f 0200 	mov.w	r2, #0
 8005714:	611a      	str	r2, [r3, #16]
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	f04f 0200 	mov.w	r2, #0
 800571c:	615a      	str	r2, [r3, #20]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	f04f 0200 	mov.w	r2, #0
 8005724:	619a      	str	r2, [r3, #24]
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f04f 0200 	mov.w	r2, #0
 800572c:	61da      	str	r2, [r3, #28]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	f04f 0200 	mov.w	r2, #0
 8005734:	621a      	str	r2, [r3, #32]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	f04f 0200 	mov.w	r2, #0
 800573c:	625a      	str	r2, [r3, #36]	; 0x24
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2200      	movs	r2, #0
 8005742:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2200      	movs	r2, #0
 800574a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	f04f 0200 	mov.w	r2, #0
 8005754:	62da      	str	r2, [r3, #44]	; 0x2c
{
	motor_ = motor;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	68ba      	ldr	r2, [r7, #8]
 800575a:	631a      	str	r2, [r3, #48]	; 0x30
	encoder_ = encoder;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	687a      	ldr	r2, [r7, #4]
 8005760:	635a      	str	r2, [r3, #52]	; 0x34
	imu_ = imu;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	683a      	ldr	r2, [r7, #0]
 8005766:	639a      	str	r2, [r3, #56]	; 0x38

}
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	4618      	mov	r0, r3
 800576c:	3714      	adds	r7, #20
 800576e:	46bd      	mov	sp, r7
 8005770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005774:	4770      	bx	lr
	...

08005778 <_ZN12VelocityCtrl12calcVelocityEv>:

// ---------private ---------//

float VelocityCtrl::calcVelocity()
{
 8005778:	b590      	push	{r4, r7, lr}
 800577a:	b087      	sub	sp, #28
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
	float enc_l, enc_r;
	encoder_->getCnt(enc_l, enc_r);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005784:	f107 020c 	add.w	r2, r7, #12
 8005788:	f107 0110 	add.w	r1, r7, #16
 800578c:	4618      	mov	r0, r3
 800578e:	f7fb ff77 	bl	8001680 <_ZN7Encoder6getCntERfS0_>
	float enc_cnt = (enc_l + enc_r) / 2;
 8005792:	ed97 7a04 	vldr	s14, [r7, #16]
 8005796:	edd7 7a03 	vldr	s15, [r7, #12]
 800579a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800579e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80057a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80057a6:	edc7 7a05 	vstr	s15, [r7, #20]

	current_velocity_ = VELOCITY_PER_CNT * enc_cnt;
 80057aa:	6978      	ldr	r0, [r7, #20]
 80057ac:	f7fa fee4 	bl	8000578 <__aeabi_f2d>
 80057b0:	a30b      	add	r3, pc, #44	; (adr r3, 80057e0 <_ZN12VelocityCtrl12calcVelocityEv+0x68>)
 80057b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057b6:	f7fa ff37 	bl	8000628 <__aeabi_dmul>
 80057ba:	4603      	mov	r3, r0
 80057bc:	460c      	mov	r4, r1
 80057be:	4618      	mov	r0, r3
 80057c0:	4621      	mov	r1, r4
 80057c2:	f7fb fa29 	bl	8000c18 <__aeabi_d2f>
 80057c6:	4602      	mov	r2, r0
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	609a      	str	r2, [r3, #8]

	return current_velocity_;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	ee07 3a90 	vmov	s15, r3
}
 80057d4:	eeb0 0a67 	vmov.f32	s0, s15
 80057d8:	371c      	adds	r7, #28
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd90      	pop	{r4, r7, pc}
 80057de:	bf00      	nop
 80057e0:	1ab1d998 	.word	0x1ab1d998
 80057e4:	3f7830b5 	.word	0x3f7830b5

080057e8 <_ZN12VelocityCtrl18pidTranslationOnlyEv>:
	v_pre_diff = v_diff;
	o_pre_diff = o_diff;
}

void VelocityCtrl::pidTranslationOnly()
{
 80057e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057ea:	b087      	sub	sp, #28
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
	float static v_pre_diff;
	float v_diff = target_velocity_ - current_velocity_;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	ed93 7a00 	vldr	s14, [r3]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	edd3 7a02 	vldr	s15, [r3, #8]
 80057fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005800:	edc7 7a05 	vstr	s15, [r7, #20]

	float v_p, v_d ;
	static float v_i;

	if(i_reset_flag_ == true){
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800580a:	2b00      	cmp	r3, #0
 800580c:	d007      	beq.n	800581e <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x36>
		v_i = 0;
 800580e:	4b48      	ldr	r3, [pc, #288]	; (8005930 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005810:	f04f 0200 	mov.w	r2, #0
 8005814:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2200      	movs	r2, #0
 800581a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	}

	v_p = v_kp_ * v_diff;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	edd3 7a04 	vldr	s15, [r3, #16]
 8005824:	ed97 7a05 	vldr	s14, [r7, #20]
 8005828:	ee67 7a27 	vmul.f32	s15, s14, s15
 800582c:	edc7 7a04 	vstr	s15, [r7, #16]
	v_i += v_ki_ * v_diff * DELTA_T;
 8005830:	4b3f      	ldr	r3, [pc, #252]	; (8005930 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4618      	mov	r0, r3
 8005836:	f7fa fe9f 	bl	8000578 <__aeabi_f2d>
 800583a:	4604      	mov	r4, r0
 800583c:	460d      	mov	r5, r1
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	ed93 7a06 	vldr	s14, [r3, #24]
 8005844:	edd7 7a05 	vldr	s15, [r7, #20]
 8005848:	ee67 7a27 	vmul.f32	s15, s14, s15
 800584c:	ee17 0a90 	vmov	r0, s15
 8005850:	f7fa fe92 	bl	8000578 <__aeabi_f2d>
 8005854:	a334      	add	r3, pc, #208	; (adr r3, 8005928 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 8005856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800585a:	f7fa fee5 	bl	8000628 <__aeabi_dmul>
 800585e:	4602      	mov	r2, r0
 8005860:	460b      	mov	r3, r1
 8005862:	4620      	mov	r0, r4
 8005864:	4629      	mov	r1, r5
 8005866:	f7fa fd29 	bl	80002bc <__adddf3>
 800586a:	4603      	mov	r3, r0
 800586c:	460c      	mov	r4, r1
 800586e:	4618      	mov	r0, r3
 8005870:	4621      	mov	r1, r4
 8005872:	f7fb f9d1 	bl	8000c18 <__aeabi_d2f>
 8005876:	4602      	mov	r2, r0
 8005878:	4b2d      	ldr	r3, [pc, #180]	; (8005930 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 800587a:	601a      	str	r2, [r3, #0]
	v_d = v_kd_ * (v_diff - v_pre_diff) / DELTA_T;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	ed93 7a05 	vldr	s14, [r3, #20]
 8005882:	4b2c      	ldr	r3, [pc, #176]	; (8005934 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 8005884:	edd3 7a00 	vldr	s15, [r3]
 8005888:	edd7 6a05 	vldr	s13, [r7, #20]
 800588c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005890:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005894:	ee17 0a90 	vmov	r0, s15
 8005898:	f7fa fe6e 	bl	8000578 <__aeabi_f2d>
 800589c:	a322      	add	r3, pc, #136	; (adr r3, 8005928 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 800589e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058a2:	f7fa ffeb 	bl	800087c <__aeabi_ddiv>
 80058a6:	4603      	mov	r3, r0
 80058a8:	460c      	mov	r4, r1
 80058aa:	4618      	mov	r0, r3
 80058ac:	4621      	mov	r1, r4
 80058ae:	f7fb f9b3 	bl	8000c18 <__aeabi_d2f>
 80058b2:	4603      	mov	r3, r0
 80058b4:	60fb      	str	r3, [r7, #12]

	float translation_ratio;

	translation_ratio =  v_p + v_d + v_i;
 80058b6:	ed97 7a04 	vldr	s14, [r7, #16]
 80058ba:	edd7 7a03 	vldr	s15, [r7, #12]
 80058be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80058c2:	4b1b      	ldr	r3, [pc, #108]	; (8005930 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 80058c4:	edd3 7a00 	vldr	s15, [r3]
 80058c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80058cc:	edc7 7a02 	vstr	s15, [r7, #8]

	motor_->setRatio(translation_ratio + rotation_ratio_, translation_ratio - rotation_ratio_);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80058da:	edd7 7a02 	vldr	s15, [r7, #8]
 80058de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80058e2:	ee17 0a90 	vmov	r0, s15
 80058e6:	f7fa fe47 	bl	8000578 <__aeabi_f2d>
 80058ea:	4605      	mov	r5, r0
 80058ec:	460e      	mov	r6, r1
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80058f4:	ed97 7a02 	vldr	s14, [r7, #8]
 80058f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80058fc:	ee17 0a90 	vmov	r0, s15
 8005900:	f7fa fe3a 	bl	8000578 <__aeabi_f2d>
 8005904:	4602      	mov	r2, r0
 8005906:	460b      	mov	r3, r1
 8005908:	ec43 2b11 	vmov	d1, r2, r3
 800590c:	ec46 5b10 	vmov	d0, r5, r6
 8005910:	4620      	mov	r0, r4
 8005912:	f7ff f995 	bl	8004c40 <_ZN5Motor8setRatioEdd>

	v_pre_diff = v_diff;
 8005916:	4a07      	ldr	r2, [pc, #28]	; (8005934 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	6013      	str	r3, [r2, #0]
}
 800591c:	bf00      	nop
 800591e:	371c      	adds	r7, #28
 8005920:	46bd      	mov	sp, r7
 8005922:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005924:	f3af 8000 	nop.w
 8005928:	d2f1a9fc 	.word	0xd2f1a9fc
 800592c:	3f50624d 	.word	0x3f50624d
 8005930:	200002b4 	.word	0x200002b4
 8005934:	200002b0 	.word	0x200002b0

08005938 <_ZN12VelocityCtrl11setVelocityEff>:
{

}

void VelocityCtrl::setVelocity(float velocity, float omega)
{
 8005938:	b480      	push	{r7}
 800593a:	b085      	sub	sp, #20
 800593c:	af00      	add	r7, sp, #0
 800593e:	60f8      	str	r0, [r7, #12]
 8005940:	ed87 0a02 	vstr	s0, [r7, #8]
 8005944:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	68ba      	ldr	r2, [r7, #8]
 800594c:	601a      	str	r2, [r3, #0]
	target_omega_= omega;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	687a      	ldr	r2, [r7, #4]
 8005952:	605a      	str	r2, [r3, #4]
}
 8005954:	bf00      	nop
 8005956:	3714      	adds	r7, #20
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr

08005960 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>:

void VelocityCtrl::setTranslationVelocityOnly(float velocity, float rotation_ratio)
{
 8005960:	b480      	push	{r7}
 8005962:	b085      	sub	sp, #20
 8005964:	af00      	add	r7, sp, #0
 8005966:	60f8      	str	r0, [r7, #12]
 8005968:	ed87 0a02 	vstr	s0, [r7, #8]
 800596c:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	68ba      	ldr	r2, [r7, #8]
 8005974:	601a      	str	r2, [r3, #0]
	rotation_ratio_ = rotation_ratio;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800597c:	bf00      	nop
 800597e:	3714      	adds	r7, #20
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr

08005988 <_ZN12VelocityCtrl15setVelocityGainEfff>:

void VelocityCtrl::setVelocityGain(float kp, float ki, float kd)
{
 8005988:	b480      	push	{r7}
 800598a:	b085      	sub	sp, #20
 800598c:	af00      	add	r7, sp, #0
 800598e:	60f8      	str	r0, [r7, #12]
 8005990:	ed87 0a02 	vstr	s0, [r7, #8]
 8005994:	edc7 0a01 	vstr	s1, [r7, #4]
 8005998:	ed87 1a00 	vstr	s2, [r7]
	v_kp_ = kp;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	68ba      	ldr	r2, [r7, #8]
 80059a0:	611a      	str	r2, [r3, #16]
	v_ki_ = ki;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	687a      	ldr	r2, [r7, #4]
 80059a6:	619a      	str	r2, [r3, #24]
	v_kd_ = kd;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	683a      	ldr	r2, [r7, #0]
 80059ac:	615a      	str	r2, [r3, #20]
}
 80059ae:	bf00      	nop
 80059b0:	3714      	adds	r7, #20
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr

080059ba <_ZN12VelocityCtrl12setOmegaGainEfff>:

void VelocityCtrl::setOmegaGain(float kp, float ki, float kd)
{
 80059ba:	b480      	push	{r7}
 80059bc:	b085      	sub	sp, #20
 80059be:	af00      	add	r7, sp, #0
 80059c0:	60f8      	str	r0, [r7, #12]
 80059c2:	ed87 0a02 	vstr	s0, [r7, #8]
 80059c6:	edc7 0a01 	vstr	s1, [r7, #4]
 80059ca:	ed87 1a00 	vstr	s2, [r7]
	o_kp_ = kp;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	68ba      	ldr	r2, [r7, #8]
 80059d2:	61da      	str	r2, [r3, #28]
	o_ki_ = ki;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	687a      	ldr	r2, [r7, #4]
 80059d8:	625a      	str	r2, [r3, #36]	; 0x24
	o_kd_ = kd;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	683a      	ldr	r2, [r7, #0]
 80059de:	621a      	str	r2, [r3, #32]
}
 80059e0:	bf00      	nop
 80059e2:	3714      	adds	r7, #20
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr

080059ec <_ZN12VelocityCtrl4flipEv>:

void VelocityCtrl::flip()
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b082      	sub	sp, #8
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
    calcVelocity();
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f7ff febf 	bl	8005778 <_ZN12VelocityCtrl12calcVelocityEv>
	//calcOmega();

	if(excution_flag_ == true){
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d002      	beq.n	8005a0a <_ZN12VelocityCtrl4flipEv+0x1e>
		//pid();
		pidTranslationOnly();
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f7ff feef 	bl	80057e8 <_ZN12VelocityCtrl18pidTranslationOnlyEv>
	}


}
 8005a0a:	bf00      	nop
 8005a0c:	3708      	adds	r7, #8
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}

08005a12 <_ZN12VelocityCtrl5startEv>:

void VelocityCtrl::start()
{
 8005a12:	b480      	push	{r7}
 8005a14:	b083      	sub	sp, #12
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	i_reset_flag_ = true;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2201      	movs	r2, #1
 8005a26:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	//calcOmega();
}
 8005a2a:	bf00      	nop
 8005a2c:	370c      	adds	r7, #12
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr
	...

08005a38 <_ZN12VelocityCtrl4stopEv>:

void VelocityCtrl::stop()
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b082      	sub	sp, #8
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2200      	movs	r2, #0
 8005a44:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	motor_->setRatio(0, 0);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a4c:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8005a68 <_ZN12VelocityCtrl4stopEv+0x30>
 8005a50:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8005a68 <_ZN12VelocityCtrl4stopEv+0x30>
 8005a54:	4618      	mov	r0, r3
 8005a56:	f7ff f8f3 	bl	8004c40 <_ZN5Motor8setRatioEdd>

}
 8005a5a:	bf00      	nop
 8005a5c:	3708      	adds	r7, #8
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}
 8005a62:	bf00      	nop
 8005a64:	f3af 8000 	nop.w
	...

08005a70 <_ZN12VelocityCtrl18getCurrentVelocityEv>:

float VelocityCtrl::getCurrentVelocity()
{
 8005a70:	b480      	push	{r7}
 8005a72:	b083      	sub	sp, #12
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
	return current_velocity_;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	ee07 3a90 	vmov	s15, r3
}
 8005a80:	eeb0 0a67 	vmov.f32	s0, s15
 8005a84:	370c      	adds	r7, #12
 8005a86:	46bd      	mov	sp, r7
 8005a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8c:	4770      	bx	lr
	...

08005a90 <HAL_TIM_PeriodElapsedCallback>:
	cppExit(GPIO_Pin);
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b082      	sub	sp, #8
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7){
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a1e      	ldr	r2, [pc, #120]	; (8005b18 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d10e      	bne.n	8005ac0 <HAL_TIM_PeriodElapsedCallback+0x30>
		cppFlip100ns();
 8005aa2:	f001 fe2b 	bl	80076fc <cppFlip100ns>

		tim7_timer++;
 8005aa6:	4b1d      	ldr	r3, [pc, #116]	; (8005b1c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	3301      	adds	r3, #1
 8005aac:	4a1b      	ldr	r2, [pc, #108]	; (8005b1c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005aae:	6013      	str	r3, [r2, #0]
		if(tim7_timer >= 100000) tim7_timer = 0;
 8005ab0:	4b1a      	ldr	r3, [pc, #104]	; (8005b1c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a1a      	ldr	r2, [pc, #104]	; (8005b20 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d902      	bls.n	8005ac0 <HAL_TIM_PeriodElapsedCallback+0x30>
 8005aba:	4b18      	ldr	r3, [pc, #96]	; (8005b1c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005abc:	2200      	movs	r2, #0
 8005abe:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM6){
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a17      	ldr	r2, [pc, #92]	; (8005b24 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d10e      	bne.n	8005ae8 <HAL_TIM_PeriodElapsedCallback+0x58>
		cppFlip1ms();
 8005aca:	f001 fdcd 	bl	8007668 <cppFlip1ms>

		tim6_timer++;
 8005ace:	4b16      	ldr	r3, [pc, #88]	; (8005b28 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	3301      	adds	r3, #1
 8005ad4:	4a14      	ldr	r2, [pc, #80]	; (8005b28 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005ad6:	6013      	str	r3, [r2, #0]
		if(tim6_timer >= 100000) tim6_timer = 0;
 8005ad8:	4b13      	ldr	r3, [pc, #76]	; (8005b28 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a10      	ldr	r2, [pc, #64]	; (8005b20 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d902      	bls.n	8005ae8 <HAL_TIM_PeriodElapsedCallback+0x58>
 8005ae2:	4b11      	ldr	r3, [pc, #68]	; (8005b28 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM13){
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a0f      	ldr	r2, [pc, #60]	; (8005b2c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d10e      	bne.n	8005b10 <HAL_TIM_PeriodElapsedCallback+0x80>
		cppFlip10ms();
 8005af2:	f001 fe0d 	bl	8007710 <cppFlip10ms>

		tim13_timer++;
 8005af6:	4b0e      	ldr	r3, [pc, #56]	; (8005b30 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	3301      	adds	r3, #1
 8005afc:	4a0c      	ldr	r2, [pc, #48]	; (8005b30 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005afe:	6013      	str	r3, [r2, #0]
		if(tim13_timer >= 100000) tim13_timer = 0;
 8005b00:	4b0b      	ldr	r3, [pc, #44]	; (8005b30 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a06      	ldr	r2, [pc, #24]	; (8005b20 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d902      	bls.n	8005b10 <HAL_TIM_PeriodElapsedCallback+0x80>
 8005b0a:	4b09      	ldr	r3, [pc, #36]	; (8005b30 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	601a      	str	r2, [r3, #0]
	}

}
 8005b10:	bf00      	nop
 8005b12:	3708      	adds	r7, #8
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}
 8005b18:	40001400 	.word	0x40001400
 8005b1c:	200438f8 	.word	0x200438f8
 8005b20:	0001869f 	.word	0x0001869f
 8005b24:	40001000 	.word	0x40001000
 8005b28:	200438b4 	.word	0x200438b4
 8005b2c:	40001c00 	.word	0x40001c00
 8005b30:	200438fc 	.word	0x200438fc

08005b34 <init>:

void init()
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	af00      	add	r7, sp, #0
	// ------initialize------//
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET); // sensor led ON
 8005b38:	2201      	movs	r2, #1
 8005b3a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005b3e:	4808      	ldr	r0, [pc, #32]	; (8005b60 <init+0x2c>)
 8005b40:	f004 ff5a 	bl	800a9f8 <HAL_GPIO_WritePin>

	// timer interrpt in start
	HAL_TIM_Base_Start_IT(&htim6);
 8005b44:	4807      	ldr	r0, [pc, #28]	; (8005b64 <init+0x30>)
 8005b46:	f008 fe22 	bl	800e78e <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8005b4a:	4807      	ldr	r0, [pc, #28]	; (8005b68 <init+0x34>)
 8005b4c:	f008 fe1f 	bl	800e78e <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim13);
 8005b50:	4806      	ldr	r0, [pc, #24]	; (8005b6c <init+0x38>)
 8005b52:	f008 fe1c 	bl	800e78e <HAL_TIM_Base_Start_IT>

	cppInit();
 8005b56:	f001 fce3 	bl	8007520 <cppInit>

	//path_following_initialize();

}
 8005b5a:	bf00      	nop
 8005b5c:	bd80      	pop	{r7, pc}
 8005b5e:	bf00      	nop
 8005b60:	40021000 	.word	0x40021000
 8005b64:	200439e0 	.word	0x200439e0
 8005b68:	20043b84 	.word	0x20043b84
 8005b6c:	20043900 	.word	0x20043900

08005b70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005b74:	f003 fc38 	bl	80093e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005b78:	f000 f82a 	bl	8005bd0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005b7c:	f000 fdbc 	bl	80066f8 <MX_GPIO_Init>
  MX_DMA_Init();
 8005b80:	f000 fd8a 	bl	8006698 <MX_DMA_Init>
  MX_I2C2_Init();
 8005b84:	f000 f9e8 	bl	8005f58 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8005b88:	f000 fa14 	bl	8005fb4 <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 8005b8c:	f000 fa32 	bl	8005ff4 <MX_SPI2_Init>
  MX_TIM1_Init();
 8005b90:	f000 fa66 	bl	8006060 <MX_TIM1_Init>
  MX_TIM4_Init();
 8005b94:	f000 fb70 	bl	8006278 <MX_TIM4_Init>
  MX_TIM8_Init();
 8005b98:	f000 fc3c 	bl	8006414 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 8005b9c:	f000 fd52 	bl	8006644 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8005ba0:	f00a fdc8 	bl	8010734 <MX_FATFS_Init>
  MX_TIM6_Init();
 8005ba4:	f000 fbcc 	bl	8006340 <MX_TIM6_Init>
  MX_I2C1_Init();
 8005ba8:	f000 f9a8 	bl	8005efc <MX_I2C1_Init>
  MX_TIM3_Init();
 8005bac:	f000 fb00 	bl	80061b0 <MX_TIM3_Init>
  MX_TIM10_Init();
 8005bb0:	f000 fc88 	bl	80064c4 <MX_TIM10_Init>
  MX_TIM11_Init();
 8005bb4:	f000 fcd4 	bl	8006560 <MX_TIM11_Init>
  MX_ADC2_Init();
 8005bb8:	f000 f898 	bl	8005cec <MX_ADC2_Init>
  MX_TIM7_Init();
 8005bbc:	f000 fbf6 	bl	80063ac <MX_TIM7_Init>
  MX_TIM13_Init();
 8005bc0:	f000 fd1c 	bl	80065fc <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  init();
 8005bc4:	f7ff ffb6 	bl	8005b34 <init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  cppLoop();
 8005bc8:	f001 fdba 	bl	8007740 <cppLoop>
 8005bcc:	e7fc      	b.n	8005bc8 <main+0x58>
	...

08005bd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b0a4      	sub	sp, #144	; 0x90
 8005bd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005bd6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005bda:	2234      	movs	r2, #52	; 0x34
 8005bdc:	2100      	movs	r1, #0
 8005bde:	4618      	mov	r0, r3
 8005be0:	f00f f9f5 	bl	8014fce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005be4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005be8:	2200      	movs	r2, #0
 8005bea:	601a      	str	r2, [r3, #0]
 8005bec:	605a      	str	r2, [r3, #4]
 8005bee:	609a      	str	r2, [r3, #8]
 8005bf0:	60da      	str	r2, [r3, #12]
 8005bf2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005bf4:	f107 030c 	add.w	r3, r7, #12
 8005bf8:	223c      	movs	r2, #60	; 0x3c
 8005bfa:	2100      	movs	r1, #0
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f00f f9e6 	bl	8014fce <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005c02:	2300      	movs	r3, #0
 8005c04:	60bb      	str	r3, [r7, #8]
 8005c06:	4b37      	ldr	r3, [pc, #220]	; (8005ce4 <SystemClock_Config+0x114>)
 8005c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c0a:	4a36      	ldr	r2, [pc, #216]	; (8005ce4 <SystemClock_Config+0x114>)
 8005c0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c10:	6413      	str	r3, [r2, #64]	; 0x40
 8005c12:	4b34      	ldr	r3, [pc, #208]	; (8005ce4 <SystemClock_Config+0x114>)
 8005c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c1a:	60bb      	str	r3, [r7, #8]
 8005c1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005c1e:	2300      	movs	r3, #0
 8005c20:	607b      	str	r3, [r7, #4]
 8005c22:	4b31      	ldr	r3, [pc, #196]	; (8005ce8 <SystemClock_Config+0x118>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a30      	ldr	r2, [pc, #192]	; (8005ce8 <SystemClock_Config+0x118>)
 8005c28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c2c:	6013      	str	r3, [r2, #0]
 8005c2e:	4b2e      	ldr	r3, [pc, #184]	; (8005ce8 <SystemClock_Config+0x118>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005c36:	607b      	str	r3, [r7, #4]
 8005c38:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005c3e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005c42:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005c44:	2302      	movs	r3, #2
 8005c46:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005c48:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005c4c:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 8;
 8005c4e:	2308      	movs	r3, #8
 8005c50:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8005c52:	23b4      	movs	r3, #180	; 0xb4
 8005c54:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005c58:	2302      	movs	r3, #2
 8005c5a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8005c5e:	2308      	movs	r3, #8
 8005c60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 2;
 8005c64:	2302      	movs	r3, #2
 8005c66:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005c6a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f006 fae4 	bl	800c23c <HAL_RCC_OscConfig>
 8005c74:	4603      	mov	r3, r0
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d001      	beq.n	8005c7e <SystemClock_Config+0xae>
  {
    Error_Handler();
 8005c7a:	f000 fe7f 	bl	800697c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8005c7e:	f005 fe5f 	bl	800b940 <HAL_PWREx_EnableOverDrive>
 8005c82:	4603      	mov	r3, r0
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d001      	beq.n	8005c8c <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8005c88:	f000 fe78 	bl	800697c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005c8c:	230f      	movs	r3, #15
 8005c8e:	64bb      	str	r3, [r7, #72]	; 0x48
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005c90:	2302      	movs	r3, #2
 8005c92:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005c94:	2300      	movs	r3, #0
 8005c96:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005c98:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005c9c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005c9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ca2:	65bb      	str	r3, [r7, #88]	; 0x58

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005ca4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005ca8:	2105      	movs	r1, #5
 8005caa:	4618      	mov	r0, r3
 8005cac:	f005 fe98 	bl	800b9e0 <HAL_RCC_ClockConfig>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d001      	beq.n	8005cba <SystemClock_Config+0xea>
  {
    Error_Handler();
 8005cb6:	f000 fe61 	bl	800697c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8005cba:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8005cbe:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005cc8:	f107 030c 	add.w	r3, r7, #12
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f006 f877 	bl	800bdc0 <HAL_RCCEx_PeriphCLKConfig>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d001      	beq.n	8005cdc <SystemClock_Config+0x10c>
  {
    Error_Handler();
 8005cd8:	f000 fe50 	bl	800697c <Error_Handler>
  }
}
 8005cdc:	bf00      	nop
 8005cde:	3790      	adds	r7, #144	; 0x90
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}
 8005ce4:	40023800 	.word	0x40023800
 8005ce8:	40007000 	.word	0x40007000

08005cec <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b084      	sub	sp, #16
 8005cf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8005cf2:	463b      	mov	r3, r7
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	601a      	str	r2, [r3, #0]
 8005cf8:	605a      	str	r2, [r3, #4]
 8005cfa:	609a      	str	r2, [r3, #8]
 8005cfc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8005cfe:	4b7c      	ldr	r3, [pc, #496]	; (8005ef0 <MX_ADC2_Init+0x204>)
 8005d00:	4a7c      	ldr	r2, [pc, #496]	; (8005ef4 <MX_ADC2_Init+0x208>)
 8005d02:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8005d04:	4b7a      	ldr	r3, [pc, #488]	; (8005ef0 <MX_ADC2_Init+0x204>)
 8005d06:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005d0a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8005d0c:	4b78      	ldr	r3, [pc, #480]	; (8005ef0 <MX_ADC2_Init+0x204>)
 8005d0e:	2200      	movs	r2, #0
 8005d10:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8005d12:	4b77      	ldr	r3, [pc, #476]	; (8005ef0 <MX_ADC2_Init+0x204>)
 8005d14:	2201      	movs	r2, #1
 8005d16:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8005d18:	4b75      	ldr	r3, [pc, #468]	; (8005ef0 <MX_ADC2_Init+0x204>)
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8005d1e:	4b74      	ldr	r3, [pc, #464]	; (8005ef0 <MX_ADC2_Init+0x204>)
 8005d20:	2200      	movs	r2, #0
 8005d22:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005d26:	4b72      	ldr	r3, [pc, #456]	; (8005ef0 <MX_ADC2_Init+0x204>)
 8005d28:	2200      	movs	r2, #0
 8005d2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005d2c:	4b70      	ldr	r3, [pc, #448]	; (8005ef0 <MX_ADC2_Init+0x204>)
 8005d2e:	4a72      	ldr	r2, [pc, #456]	; (8005ef8 <MX_ADC2_Init+0x20c>)
 8005d30:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005d32:	4b6f      	ldr	r3, [pc, #444]	; (8005ef0 <MX_ADC2_Init+0x204>)
 8005d34:	2200      	movs	r2, #0
 8005d36:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 14;
 8005d38:	4b6d      	ldr	r3, [pc, #436]	; (8005ef0 <MX_ADC2_Init+0x204>)
 8005d3a:	220e      	movs	r2, #14
 8005d3c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8005d3e:	4b6c      	ldr	r3, [pc, #432]	; (8005ef0 <MX_ADC2_Init+0x204>)
 8005d40:	2201      	movs	r2, #1
 8005d42:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005d46:	4b6a      	ldr	r3, [pc, #424]	; (8005ef0 <MX_ADC2_Init+0x204>)
 8005d48:	2201      	movs	r2, #1
 8005d4a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8005d4c:	4868      	ldr	r0, [pc, #416]	; (8005ef0 <MX_ADC2_Init+0x204>)
 8005d4e:	f003 fbdf 	bl	8009510 <HAL_ADC_Init>
 8005d52:	4603      	mov	r3, r0
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d001      	beq.n	8005d5c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8005d58:	f000 fe10 	bl	800697c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8005d5c:	230a      	movs	r3, #10
 8005d5e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8005d60:	2301      	movs	r3, #1
 8005d62:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8005d64:	2306      	movs	r3, #6
 8005d66:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005d68:	463b      	mov	r3, r7
 8005d6a:	4619      	mov	r1, r3
 8005d6c:	4860      	ldr	r0, [pc, #384]	; (8005ef0 <MX_ADC2_Init+0x204>)
 8005d6e:	f003 fd23 	bl	80097b8 <HAL_ADC_ConfigChannel>
 8005d72:	4603      	mov	r3, r0
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d001      	beq.n	8005d7c <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8005d78:	f000 fe00 	bl	800697c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8005d7c:	230b      	movs	r3, #11
 8005d7e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8005d80:	2302      	movs	r3, #2
 8005d82:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005d84:	463b      	mov	r3, r7
 8005d86:	4619      	mov	r1, r3
 8005d88:	4859      	ldr	r0, [pc, #356]	; (8005ef0 <MX_ADC2_Init+0x204>)
 8005d8a:	f003 fd15 	bl	80097b8 <HAL_ADC_ConfigChannel>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d001      	beq.n	8005d98 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8005d94:	f000 fdf2 	bl	800697c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8005d98:	230c      	movs	r3, #12
 8005d9a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8005d9c:	2303      	movs	r3, #3
 8005d9e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005da0:	463b      	mov	r3, r7
 8005da2:	4619      	mov	r1, r3
 8005da4:	4852      	ldr	r0, [pc, #328]	; (8005ef0 <MX_ADC2_Init+0x204>)
 8005da6:	f003 fd07 	bl	80097b8 <HAL_ADC_ConfigChannel>
 8005daa:	4603      	mov	r3, r0
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d001      	beq.n	8005db4 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8005db0:	f000 fde4 	bl	800697c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8005db4:	230d      	movs	r3, #13
 8005db6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8005db8:	2304      	movs	r3, #4
 8005dba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005dbc:	463b      	mov	r3, r7
 8005dbe:	4619      	mov	r1, r3
 8005dc0:	484b      	ldr	r0, [pc, #300]	; (8005ef0 <MX_ADC2_Init+0x204>)
 8005dc2:	f003 fcf9 	bl	80097b8 <HAL_ADC_ConfigChannel>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d001      	beq.n	8005dd0 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8005dcc:	f000 fdd6 	bl	800697c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8005dd4:	2305      	movs	r3, #5
 8005dd6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005dd8:	463b      	mov	r3, r7
 8005dda:	4619      	mov	r1, r3
 8005ddc:	4844      	ldr	r0, [pc, #272]	; (8005ef0 <MX_ADC2_Init+0x204>)
 8005dde:	f003 fceb 	bl	80097b8 <HAL_ADC_ConfigChannel>
 8005de2:	4603      	mov	r3, r0
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d001      	beq.n	8005dec <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8005de8:	f000 fdc8 	bl	800697c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8005dec:	2301      	movs	r3, #1
 8005dee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8005df0:	2306      	movs	r3, #6
 8005df2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005df4:	463b      	mov	r3, r7
 8005df6:	4619      	mov	r1, r3
 8005df8:	483d      	ldr	r0, [pc, #244]	; (8005ef0 <MX_ADC2_Init+0x204>)
 8005dfa:	f003 fcdd 	bl	80097b8 <HAL_ADC_ConfigChannel>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d001      	beq.n	8005e08 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 8005e04:	f000 fdba 	bl	800697c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8005e08:	2302      	movs	r3, #2
 8005e0a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8005e0c:	2307      	movs	r3, #7
 8005e0e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005e10:	463b      	mov	r3, r7
 8005e12:	4619      	mov	r1, r3
 8005e14:	4836      	ldr	r0, [pc, #216]	; (8005ef0 <MX_ADC2_Init+0x204>)
 8005e16:	f003 fccf 	bl	80097b8 <HAL_ADC_ConfigChannel>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d001      	beq.n	8005e24 <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 8005e20:	f000 fdac 	bl	800697c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8005e24:	2303      	movs	r3, #3
 8005e26:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8005e28:	2308      	movs	r3, #8
 8005e2a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005e2c:	463b      	mov	r3, r7
 8005e2e:	4619      	mov	r1, r3
 8005e30:	482f      	ldr	r0, [pc, #188]	; (8005ef0 <MX_ADC2_Init+0x204>)
 8005e32:	f003 fcc1 	bl	80097b8 <HAL_ADC_ConfigChannel>
 8005e36:	4603      	mov	r3, r0
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d001      	beq.n	8005e40 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 8005e3c:	f000 fd9e 	bl	800697c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8005e40:	2304      	movs	r3, #4
 8005e42:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8005e44:	2309      	movs	r3, #9
 8005e46:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005e48:	463b      	mov	r3, r7
 8005e4a:	4619      	mov	r1, r3
 8005e4c:	4828      	ldr	r0, [pc, #160]	; (8005ef0 <MX_ADC2_Init+0x204>)
 8005e4e:	f003 fcb3 	bl	80097b8 <HAL_ADC_ConfigChannel>
 8005e52:	4603      	mov	r3, r0
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d001      	beq.n	8005e5c <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 8005e58:	f000 fd90 	bl	800697c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8005e5c:	2305      	movs	r3, #5
 8005e5e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8005e60:	230a      	movs	r3, #10
 8005e62:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005e64:	463b      	mov	r3, r7
 8005e66:	4619      	mov	r1, r3
 8005e68:	4821      	ldr	r0, [pc, #132]	; (8005ef0 <MX_ADC2_Init+0x204>)
 8005e6a:	f003 fca5 	bl	80097b8 <HAL_ADC_ConfigChannel>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d001      	beq.n	8005e78 <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 8005e74:	f000 fd82 	bl	800697c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8005e78:	2306      	movs	r3, #6
 8005e7a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8005e7c:	230b      	movs	r3, #11
 8005e7e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005e80:	463b      	mov	r3, r7
 8005e82:	4619      	mov	r1, r3
 8005e84:	481a      	ldr	r0, [pc, #104]	; (8005ef0 <MX_ADC2_Init+0x204>)
 8005e86:	f003 fc97 	bl	80097b8 <HAL_ADC_ConfigChannel>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d001      	beq.n	8005e94 <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 8005e90:	f000 fd74 	bl	800697c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8005e94:	2307      	movs	r3, #7
 8005e96:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 8005e98:	230c      	movs	r3, #12
 8005e9a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005e9c:	463b      	mov	r3, r7
 8005e9e:	4619      	mov	r1, r3
 8005ea0:	4813      	ldr	r0, [pc, #76]	; (8005ef0 <MX_ADC2_Init+0x204>)
 8005ea2:	f003 fc89 	bl	80097b8 <HAL_ADC_ConfigChannel>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d001      	beq.n	8005eb0 <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 8005eac:	f000 fd66 	bl	800697c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8005eb0:	2308      	movs	r3, #8
 8005eb2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8005eb4:	230d      	movs	r3, #13
 8005eb6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005eb8:	463b      	mov	r3, r7
 8005eba:	4619      	mov	r1, r3
 8005ebc:	480c      	ldr	r0, [pc, #48]	; (8005ef0 <MX_ADC2_Init+0x204>)
 8005ebe:	f003 fc7b 	bl	80097b8 <HAL_ADC_ConfigChannel>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d001      	beq.n	8005ecc <MX_ADC2_Init+0x1e0>
  {
    Error_Handler();
 8005ec8:	f000 fd58 	bl	800697c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8005ecc:	2309      	movs	r3, #9
 8005ece:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8005ed0:	230e      	movs	r3, #14
 8005ed2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005ed4:	463b      	mov	r3, r7
 8005ed6:	4619      	mov	r1, r3
 8005ed8:	4805      	ldr	r0, [pc, #20]	; (8005ef0 <MX_ADC2_Init+0x204>)
 8005eda:	f003 fc6d 	bl	80097b8 <HAL_ADC_ConfigChannel>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d001      	beq.n	8005ee8 <MX_ADC2_Init+0x1fc>
  {
    Error_Handler();
 8005ee4:	f000 fd4a 	bl	800697c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8005ee8:	bf00      	nop
 8005eea:	3710      	adds	r7, #16
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}
 8005ef0:	20043784 	.word	0x20043784
 8005ef4:	40012100 	.word	0x40012100
 8005ef8:	0f000001 	.word	0x0f000001

08005efc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005f00:	4b12      	ldr	r3, [pc, #72]	; (8005f4c <MX_I2C1_Init+0x50>)
 8005f02:	4a13      	ldr	r2, [pc, #76]	; (8005f50 <MX_I2C1_Init+0x54>)
 8005f04:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8005f06:	4b11      	ldr	r3, [pc, #68]	; (8005f4c <MX_I2C1_Init+0x50>)
 8005f08:	4a12      	ldr	r2, [pc, #72]	; (8005f54 <MX_I2C1_Init+0x58>)
 8005f0a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005f0c:	4b0f      	ldr	r3, [pc, #60]	; (8005f4c <MX_I2C1_Init+0x50>)
 8005f0e:	2200      	movs	r2, #0
 8005f10:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8005f12:	4b0e      	ldr	r3, [pc, #56]	; (8005f4c <MX_I2C1_Init+0x50>)
 8005f14:	2200      	movs	r2, #0
 8005f16:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005f18:	4b0c      	ldr	r3, [pc, #48]	; (8005f4c <MX_I2C1_Init+0x50>)
 8005f1a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005f1e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005f20:	4b0a      	ldr	r3, [pc, #40]	; (8005f4c <MX_I2C1_Init+0x50>)
 8005f22:	2200      	movs	r2, #0
 8005f24:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8005f26:	4b09      	ldr	r3, [pc, #36]	; (8005f4c <MX_I2C1_Init+0x50>)
 8005f28:	2200      	movs	r2, #0
 8005f2a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005f2c:	4b07      	ldr	r3, [pc, #28]	; (8005f4c <MX_I2C1_Init+0x50>)
 8005f2e:	2200      	movs	r2, #0
 8005f30:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8005f32:	4b06      	ldr	r3, [pc, #24]	; (8005f4c <MX_I2C1_Init+0x50>)
 8005f34:	2280      	movs	r2, #128	; 0x80
 8005f36:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005f38:	4804      	ldr	r0, [pc, #16]	; (8005f4c <MX_I2C1_Init+0x50>)
 8005f3a:	f004 fd77 	bl	800aa2c <HAL_I2C_Init>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d001      	beq.n	8005f48 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8005f44:	f000 fd1a 	bl	800697c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005f48:	bf00      	nop
 8005f4a:	bd80      	pop	{r7, pc}
 8005f4c:	200437cc 	.word	0x200437cc
 8005f50:	40005400 	.word	0x40005400
 8005f54:	000186a0 	.word	0x000186a0

08005f58 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8005f5c:	4b12      	ldr	r3, [pc, #72]	; (8005fa8 <MX_I2C2_Init+0x50>)
 8005f5e:	4a13      	ldr	r2, [pc, #76]	; (8005fac <MX_I2C2_Init+0x54>)
 8005f60:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8005f62:	4b11      	ldr	r3, [pc, #68]	; (8005fa8 <MX_I2C2_Init+0x50>)
 8005f64:	4a12      	ldr	r2, [pc, #72]	; (8005fb0 <MX_I2C2_Init+0x58>)
 8005f66:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005f68:	4b0f      	ldr	r3, [pc, #60]	; (8005fa8 <MX_I2C2_Init+0x50>)
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8005f6e:	4b0e      	ldr	r3, [pc, #56]	; (8005fa8 <MX_I2C2_Init+0x50>)
 8005f70:	2200      	movs	r2, #0
 8005f72:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005f74:	4b0c      	ldr	r3, [pc, #48]	; (8005fa8 <MX_I2C2_Init+0x50>)
 8005f76:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005f7a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005f7c:	4b0a      	ldr	r3, [pc, #40]	; (8005fa8 <MX_I2C2_Init+0x50>)
 8005f7e:	2200      	movs	r2, #0
 8005f80:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8005f82:	4b09      	ldr	r3, [pc, #36]	; (8005fa8 <MX_I2C2_Init+0x50>)
 8005f84:	2200      	movs	r2, #0
 8005f86:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005f88:	4b07      	ldr	r3, [pc, #28]	; (8005fa8 <MX_I2C2_Init+0x50>)
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8005f8e:	4b06      	ldr	r3, [pc, #24]	; (8005fa8 <MX_I2C2_Init+0x50>)
 8005f90:	2280      	movs	r2, #128	; 0x80
 8005f92:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8005f94:	4804      	ldr	r0, [pc, #16]	; (8005fa8 <MX_I2C2_Init+0x50>)
 8005f96:	f004 fd49 	bl	800aa2c <HAL_I2C_Init>
 8005f9a:	4603      	mov	r3, r0
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d001      	beq.n	8005fa4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8005fa0:	f000 fcec 	bl	800697c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8005fa4:	bf00      	nop
 8005fa6:	bd80      	pop	{r7, pc}
 8005fa8:	20043860 	.word	0x20043860
 8005fac:	40005800 	.word	0x40005800
 8005fb0:	000186a0 	.word	0x000186a0

08005fb4 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8005fb8:	4b0c      	ldr	r3, [pc, #48]	; (8005fec <MX_SDIO_SD_Init+0x38>)
 8005fba:	4a0d      	ldr	r2, [pc, #52]	; (8005ff0 <MX_SDIO_SD_Init+0x3c>)
 8005fbc:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8005fbe:	4b0b      	ldr	r3, [pc, #44]	; (8005fec <MX_SDIO_SD_Init+0x38>)
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8005fc4:	4b09      	ldr	r3, [pc, #36]	; (8005fec <MX_SDIO_SD_Init+0x38>)
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8005fca:	4b08      	ldr	r3, [pc, #32]	; (8005fec <MX_SDIO_SD_Init+0x38>)
 8005fcc:	2200      	movs	r2, #0
 8005fce:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8005fd0:	4b06      	ldr	r3, [pc, #24]	; (8005fec <MX_SDIO_SD_Init+0x38>)
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8005fd6:	4b05      	ldr	r3, [pc, #20]	; (8005fec <MX_SDIO_SD_Init+0x38>)
 8005fd8:	2200      	movs	r2, #0
 8005fda:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 2;
 8005fdc:	4b03      	ldr	r3, [pc, #12]	; (8005fec <MX_SDIO_SD_Init+0x38>)
 8005fde:	2202      	movs	r2, #2
 8005fe0:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8005fe2:	bf00      	nop
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr
 8005fec:	20043a60 	.word	0x20043a60
 8005ff0:	40012c00 	.word	0x40012c00

08005ff4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8005ff8:	4b17      	ldr	r3, [pc, #92]	; (8006058 <MX_SPI2_Init+0x64>)
 8005ffa:	4a18      	ldr	r2, [pc, #96]	; (800605c <MX_SPI2_Init+0x68>)
 8005ffc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8005ffe:	4b16      	ldr	r3, [pc, #88]	; (8006058 <MX_SPI2_Init+0x64>)
 8006000:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006004:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8006006:	4b14      	ldr	r3, [pc, #80]	; (8006058 <MX_SPI2_Init+0x64>)
 8006008:	2200      	movs	r2, #0
 800600a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800600c:	4b12      	ldr	r3, [pc, #72]	; (8006058 <MX_SPI2_Init+0x64>)
 800600e:	2200      	movs	r2, #0
 8006010:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8006012:	4b11      	ldr	r3, [pc, #68]	; (8006058 <MX_SPI2_Init+0x64>)
 8006014:	2202      	movs	r2, #2
 8006016:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8006018:	4b0f      	ldr	r3, [pc, #60]	; (8006058 <MX_SPI2_Init+0x64>)
 800601a:	2201      	movs	r2, #1
 800601c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800601e:	4b0e      	ldr	r3, [pc, #56]	; (8006058 <MX_SPI2_Init+0x64>)
 8006020:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006024:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8006026:	4b0c      	ldr	r3, [pc, #48]	; (8006058 <MX_SPI2_Init+0x64>)
 8006028:	2228      	movs	r2, #40	; 0x28
 800602a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800602c:	4b0a      	ldr	r3, [pc, #40]	; (8006058 <MX_SPI2_Init+0x64>)
 800602e:	2200      	movs	r2, #0
 8006030:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8006032:	4b09      	ldr	r3, [pc, #36]	; (8006058 <MX_SPI2_Init+0x64>)
 8006034:	2200      	movs	r2, #0
 8006036:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006038:	4b07      	ldr	r3, [pc, #28]	; (8006058 <MX_SPI2_Init+0x64>)
 800603a:	2200      	movs	r2, #0
 800603c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800603e:	4b06      	ldr	r3, [pc, #24]	; (8006058 <MX_SPI2_Init+0x64>)
 8006040:	220a      	movs	r2, #10
 8006042:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8006044:	4804      	ldr	r0, [pc, #16]	; (8006058 <MX_SPI2_Init+0x64>)
 8006046:	f007 fe23 	bl	800dc90 <HAL_SPI_Init>
 800604a:	4603      	mov	r3, r0
 800604c:	2b00      	cmp	r3, #0
 800604e:	d001      	beq.n	8006054 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8006050:	f000 fc94 	bl	800697c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8006054:	bf00      	nop
 8006056:	bd80      	pop	{r7, pc}
 8006058:	200436ac 	.word	0x200436ac
 800605c:	40003800 	.word	0x40003800

08006060 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b09a      	sub	sp, #104	; 0x68
 8006064:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8006066:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800606a:	2224      	movs	r2, #36	; 0x24
 800606c:	2100      	movs	r1, #0
 800606e:	4618      	mov	r0, r3
 8006070:	f00e ffad 	bl	8014fce <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006074:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006078:	2200      	movs	r2, #0
 800607a:	601a      	str	r2, [r3, #0]
 800607c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800607e:	f107 0320 	add.w	r3, r7, #32
 8006082:	2200      	movs	r2, #0
 8006084:	601a      	str	r2, [r3, #0]
 8006086:	605a      	str	r2, [r3, #4]
 8006088:	609a      	str	r2, [r3, #8]
 800608a:	60da      	str	r2, [r3, #12]
 800608c:	611a      	str	r2, [r3, #16]
 800608e:	615a      	str	r2, [r3, #20]
 8006090:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8006092:	463b      	mov	r3, r7
 8006094:	2220      	movs	r2, #32
 8006096:	2100      	movs	r1, #0
 8006098:	4618      	mov	r0, r3
 800609a:	f00e ff98 	bl	8014fce <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800609e:	4b42      	ldr	r3, [pc, #264]	; (80061a8 <MX_TIM1_Init+0x148>)
 80060a0:	4a42      	ldr	r2, [pc, #264]	; (80061ac <MX_TIM1_Init+0x14c>)
 80060a2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80060a4:	4b40      	ldr	r3, [pc, #256]	; (80061a8 <MX_TIM1_Init+0x148>)
 80060a6:	2200      	movs	r2, #0
 80060a8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80060aa:	4b3f      	ldr	r3, [pc, #252]	; (80061a8 <MX_TIM1_Init+0x148>)
 80060ac:	2200      	movs	r2, #0
 80060ae:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80060b0:	4b3d      	ldr	r3, [pc, #244]	; (80061a8 <MX_TIM1_Init+0x148>)
 80060b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80060b6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80060b8:	4b3b      	ldr	r3, [pc, #236]	; (80061a8 <MX_TIM1_Init+0x148>)
 80060ba:	2200      	movs	r2, #0
 80060bc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80060be:	4b3a      	ldr	r3, [pc, #232]	; (80061a8 <MX_TIM1_Init+0x148>)
 80060c0:	2200      	movs	r2, #0
 80060c2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80060c4:	4b38      	ldr	r3, [pc, #224]	; (80061a8 <MX_TIM1_Init+0x148>)
 80060c6:	2200      	movs	r2, #0
 80060c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80060ca:	4837      	ldr	r0, [pc, #220]	; (80061a8 <MX_TIM1_Init+0x148>)
 80060cc:	f008 fb83 	bl	800e7d6 <HAL_TIM_PWM_Init>
 80060d0:	4603      	mov	r3, r0
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d001      	beq.n	80060da <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80060d6:	f000 fc51 	bl	800697c <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80060da:	2303      	movs	r3, #3
 80060dc:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80060de:	2300      	movs	r3, #0
 80060e0:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80060e2:	2301      	movs	r3, #1
 80060e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80060e6:	2300      	movs	r3, #0
 80060e8:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 80060ea:	2300      	movs	r3, #0
 80060ec:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80060ee:	2300      	movs	r3, #0
 80060f0:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80060f2:	2301      	movs	r3, #1
 80060f4:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80060f6:	2300      	movs	r3, #0
 80060f8:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 80060fa:	2300      	movs	r3, #0
 80060fc:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80060fe:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006102:	4619      	mov	r1, r3
 8006104:	4828      	ldr	r0, [pc, #160]	; (80061a8 <MX_TIM1_Init+0x148>)
 8006106:	f008 fbcf 	bl	800e8a8 <HAL_TIM_Encoder_Init>
 800610a:	4603      	mov	r3, r0
 800610c:	2b00      	cmp	r3, #0
 800610e:	d001      	beq.n	8006114 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8006110:	f000 fc34 	bl	800697c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006114:	2300      	movs	r3, #0
 8006116:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006118:	2300      	movs	r3, #0
 800611a:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800611c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006120:	4619      	mov	r1, r3
 8006122:	4821      	ldr	r0, [pc, #132]	; (80061a8 <MX_TIM1_Init+0x148>)
 8006124:	f009 f8f6 	bl	800f314 <HAL_TIMEx_MasterConfigSynchronization>
 8006128:	4603      	mov	r3, r0
 800612a:	2b00      	cmp	r3, #0
 800612c:	d001      	beq.n	8006132 <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 800612e:	f000 fc25 	bl	800697c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006132:	2360      	movs	r3, #96	; 0x60
 8006134:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 8006136:	2300      	movs	r3, #0
 8006138:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800613a:	2300      	movs	r3, #0
 800613c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800613e:	2300      	movs	r3, #0
 8006140:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006142:	2300      	movs	r3, #0
 8006144:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8006146:	2300      	movs	r3, #0
 8006148:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800614a:	2300      	movs	r3, #0
 800614c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800614e:	f107 0320 	add.w	r3, r7, #32
 8006152:	2208      	movs	r2, #8
 8006154:	4619      	mov	r1, r3
 8006156:	4814      	ldr	r0, [pc, #80]	; (80061a8 <MX_TIM1_Init+0x148>)
 8006158:	f008 fd78 	bl	800ec4c <HAL_TIM_PWM_ConfigChannel>
 800615c:	4603      	mov	r3, r0
 800615e:	2b00      	cmp	r3, #0
 8006160:	d001      	beq.n	8006166 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8006162:	f000 fc0b 	bl	800697c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8006166:	2300      	movs	r3, #0
 8006168:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800616a:	2300      	movs	r3, #0
 800616c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800616e:	2300      	movs	r3, #0
 8006170:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8006172:	2300      	movs	r3, #0
 8006174:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8006176:	2300      	movs	r3, #0
 8006178:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800617a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800617e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8006180:	2300      	movs	r3, #0
 8006182:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8006184:	463b      	mov	r3, r7
 8006186:	4619      	mov	r1, r3
 8006188:	4807      	ldr	r0, [pc, #28]	; (80061a8 <MX_TIM1_Init+0x148>)
 800618a:	f009 f93f 	bl	800f40c <HAL_TIMEx_ConfigBreakDeadTime>
 800618e:	4603      	mov	r3, r0
 8006190:	2b00      	cmp	r3, #0
 8006192:	d001      	beq.n	8006198 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8006194:	f000 fbf2 	bl	800697c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8006198:	4803      	ldr	r0, [pc, #12]	; (80061a8 <MX_TIM1_Init+0x148>)
 800619a:	f000 ffdf 	bl	800715c <HAL_TIM_MspPostInit>

}
 800619e:	bf00      	nop
 80061a0:	3768      	adds	r7, #104	; 0x68
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}
 80061a6:	bf00      	nop
 80061a8:	20043a20 	.word	0x20043a20
 80061ac:	40010000 	.word	0x40010000

080061b0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b08a      	sub	sp, #40	; 0x28
 80061b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80061b6:	f107 0320 	add.w	r3, r7, #32
 80061ba:	2200      	movs	r2, #0
 80061bc:	601a      	str	r2, [r3, #0]
 80061be:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80061c0:	1d3b      	adds	r3, r7, #4
 80061c2:	2200      	movs	r2, #0
 80061c4:	601a      	str	r2, [r3, #0]
 80061c6:	605a      	str	r2, [r3, #4]
 80061c8:	609a      	str	r2, [r3, #8]
 80061ca:	60da      	str	r2, [r3, #12]
 80061cc:	611a      	str	r2, [r3, #16]
 80061ce:	615a      	str	r2, [r3, #20]
 80061d0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80061d2:	4b27      	ldr	r3, [pc, #156]	; (8006270 <MX_TIM3_Init+0xc0>)
 80061d4:	4a27      	ldr	r2, [pc, #156]	; (8006274 <MX_TIM3_Init+0xc4>)
 80061d6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 80061d8:	4b25      	ldr	r3, [pc, #148]	; (8006270 <MX_TIM3_Init+0xc0>)
 80061da:	2201      	movs	r2, #1
 80061dc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80061de:	4b24      	ldr	r3, [pc, #144]	; (8006270 <MX_TIM3_Init+0xc0>)
 80061e0:	2200      	movs	r2, #0
 80061e2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4499;
 80061e4:	4b22      	ldr	r3, [pc, #136]	; (8006270 <MX_TIM3_Init+0xc0>)
 80061e6:	f241 1293 	movw	r2, #4499	; 0x1193
 80061ea:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80061ec:	4b20      	ldr	r3, [pc, #128]	; (8006270 <MX_TIM3_Init+0xc0>)
 80061ee:	2200      	movs	r2, #0
 80061f0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80061f2:	4b1f      	ldr	r3, [pc, #124]	; (8006270 <MX_TIM3_Init+0xc0>)
 80061f4:	2200      	movs	r2, #0
 80061f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80061f8:	481d      	ldr	r0, [pc, #116]	; (8006270 <MX_TIM3_Init+0xc0>)
 80061fa:	f008 faec 	bl	800e7d6 <HAL_TIM_PWM_Init>
 80061fe:	4603      	mov	r3, r0
 8006200:	2b00      	cmp	r3, #0
 8006202:	d001      	beq.n	8006208 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8006204:	f000 fbba 	bl	800697c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006208:	2300      	movs	r3, #0
 800620a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800620c:	2300      	movs	r3, #0
 800620e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8006210:	f107 0320 	add.w	r3, r7, #32
 8006214:	4619      	mov	r1, r3
 8006216:	4816      	ldr	r0, [pc, #88]	; (8006270 <MX_TIM3_Init+0xc0>)
 8006218:	f009 f87c 	bl	800f314 <HAL_TIMEx_MasterConfigSynchronization>
 800621c:	4603      	mov	r3, r0
 800621e:	2b00      	cmp	r3, #0
 8006220:	d001      	beq.n	8006226 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8006222:	f000 fbab 	bl	800697c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006226:	2360      	movs	r3, #96	; 0x60
 8006228:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800622a:	2300      	movs	r3, #0
 800622c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800622e:	2300      	movs	r3, #0
 8006230:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006232:	2300      	movs	r3, #0
 8006234:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006236:	1d3b      	adds	r3, r7, #4
 8006238:	2200      	movs	r2, #0
 800623a:	4619      	mov	r1, r3
 800623c:	480c      	ldr	r0, [pc, #48]	; (8006270 <MX_TIM3_Init+0xc0>)
 800623e:	f008 fd05 	bl	800ec4c <HAL_TIM_PWM_ConfigChannel>
 8006242:	4603      	mov	r3, r0
 8006244:	2b00      	cmp	r3, #0
 8006246:	d001      	beq.n	800624c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8006248:	f000 fb98 	bl	800697c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800624c:	1d3b      	adds	r3, r7, #4
 800624e:	2204      	movs	r2, #4
 8006250:	4619      	mov	r1, r3
 8006252:	4807      	ldr	r0, [pc, #28]	; (8006270 <MX_TIM3_Init+0xc0>)
 8006254:	f008 fcfa 	bl	800ec4c <HAL_TIM_PWM_ConfigChannel>
 8006258:	4603      	mov	r3, r0
 800625a:	2b00      	cmp	r3, #0
 800625c:	d001      	beq.n	8006262 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800625e:	f000 fb8d 	bl	800697c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8006262:	4803      	ldr	r0, [pc, #12]	; (8006270 <MX_TIM3_Init+0xc0>)
 8006264:	f000 ff7a 	bl	800715c <HAL_TIM_MspPostInit>

}
 8006268:	bf00      	nop
 800626a:	3728      	adds	r7, #40	; 0x28
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}
 8006270:	200438b8 	.word	0x200438b8
 8006274:	40000400 	.word	0x40000400

08006278 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b08a      	sub	sp, #40	; 0x28
 800627c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800627e:	f107 0320 	add.w	r3, r7, #32
 8006282:	2200      	movs	r2, #0
 8006284:	601a      	str	r2, [r3, #0]
 8006286:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8006288:	1d3b      	adds	r3, r7, #4
 800628a:	2200      	movs	r2, #0
 800628c:	601a      	str	r2, [r3, #0]
 800628e:	605a      	str	r2, [r3, #4]
 8006290:	609a      	str	r2, [r3, #8]
 8006292:	60da      	str	r2, [r3, #12]
 8006294:	611a      	str	r2, [r3, #16]
 8006296:	615a      	str	r2, [r3, #20]
 8006298:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800629a:	4b27      	ldr	r3, [pc, #156]	; (8006338 <MX_TIM4_Init+0xc0>)
 800629c:	4a27      	ldr	r2, [pc, #156]	; (800633c <MX_TIM4_Init+0xc4>)
 800629e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80062a0:	4b25      	ldr	r3, [pc, #148]	; (8006338 <MX_TIM4_Init+0xc0>)
 80062a2:	2200      	movs	r2, #0
 80062a4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80062a6:	4b24      	ldr	r3, [pc, #144]	; (8006338 <MX_TIM4_Init+0xc0>)
 80062a8:	2200      	movs	r2, #0
 80062aa:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1800;
 80062ac:	4b22      	ldr	r3, [pc, #136]	; (8006338 <MX_TIM4_Init+0xc0>)
 80062ae:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 80062b2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80062b4:	4b20      	ldr	r3, [pc, #128]	; (8006338 <MX_TIM4_Init+0xc0>)
 80062b6:	2200      	movs	r2, #0
 80062b8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80062ba:	4b1f      	ldr	r3, [pc, #124]	; (8006338 <MX_TIM4_Init+0xc0>)
 80062bc:	2200      	movs	r2, #0
 80062be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80062c0:	481d      	ldr	r0, [pc, #116]	; (8006338 <MX_TIM4_Init+0xc0>)
 80062c2:	f008 fa88 	bl	800e7d6 <HAL_TIM_PWM_Init>
 80062c6:	4603      	mov	r3, r0
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d001      	beq.n	80062d0 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80062cc:	f000 fb56 	bl	800697c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80062d0:	2300      	movs	r3, #0
 80062d2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80062d4:	2300      	movs	r3, #0
 80062d6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80062d8:	f107 0320 	add.w	r3, r7, #32
 80062dc:	4619      	mov	r1, r3
 80062de:	4816      	ldr	r0, [pc, #88]	; (8006338 <MX_TIM4_Init+0xc0>)
 80062e0:	f009 f818 	bl	800f314 <HAL_TIMEx_MasterConfigSynchronization>
 80062e4:	4603      	mov	r3, r0
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d001      	beq.n	80062ee <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80062ea:	f000 fb47 	bl	800697c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80062ee:	2360      	movs	r3, #96	; 0x60
 80062f0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80062f2:	2300      	movs	r3, #0
 80062f4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80062f6:	2300      	movs	r3, #0
 80062f8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80062fa:	2300      	movs	r3, #0
 80062fc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80062fe:	1d3b      	adds	r3, r7, #4
 8006300:	2208      	movs	r2, #8
 8006302:	4619      	mov	r1, r3
 8006304:	480c      	ldr	r0, [pc, #48]	; (8006338 <MX_TIM4_Init+0xc0>)
 8006306:	f008 fca1 	bl	800ec4c <HAL_TIM_PWM_ConfigChannel>
 800630a:	4603      	mov	r3, r0
 800630c:	2b00      	cmp	r3, #0
 800630e:	d001      	beq.n	8006314 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8006310:	f000 fb34 	bl	800697c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8006314:	1d3b      	adds	r3, r7, #4
 8006316:	220c      	movs	r2, #12
 8006318:	4619      	mov	r1, r3
 800631a:	4807      	ldr	r0, [pc, #28]	; (8006338 <MX_TIM4_Init+0xc0>)
 800631c:	f008 fc96 	bl	800ec4c <HAL_TIM_PWM_ConfigChannel>
 8006320:	4603      	mov	r3, r0
 8006322:	2b00      	cmp	r3, #0
 8006324:	d001      	beq.n	800632a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8006326:	f000 fb29 	bl	800697c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800632a:	4803      	ldr	r0, [pc, #12]	; (8006338 <MX_TIM4_Init+0xc0>)
 800632c:	f000 ff16 	bl	800715c <HAL_TIM_MspPostInit>

}
 8006330:	bf00      	nop
 8006332:	3728      	adds	r7, #40	; 0x28
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}
 8006338:	20043744 	.word	0x20043744
 800633c:	40000800 	.word	0x40000800

08006340 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b082      	sub	sp, #8
 8006344:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006346:	463b      	mov	r3, r7
 8006348:	2200      	movs	r2, #0
 800634a:	601a      	str	r2, [r3, #0]
 800634c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800634e:	4b15      	ldr	r3, [pc, #84]	; (80063a4 <MX_TIM6_Init+0x64>)
 8006350:	4a15      	ldr	r2, [pc, #84]	; (80063a8 <MX_TIM6_Init+0x68>)
 8006352:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 8006354:	4b13      	ldr	r3, [pc, #76]	; (80063a4 <MX_TIM6_Init+0x64>)
 8006356:	2259      	movs	r2, #89	; 0x59
 8006358:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800635a:	4b12      	ldr	r3, [pc, #72]	; (80063a4 <MX_TIM6_Init+0x64>)
 800635c:	2200      	movs	r2, #0
 800635e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8006360:	4b10      	ldr	r3, [pc, #64]	; (80063a4 <MX_TIM6_Init+0x64>)
 8006362:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006366:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006368:	4b0e      	ldr	r3, [pc, #56]	; (80063a4 <MX_TIM6_Init+0x64>)
 800636a:	2280      	movs	r2, #128	; 0x80
 800636c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800636e:	480d      	ldr	r0, [pc, #52]	; (80063a4 <MX_TIM6_Init+0x64>)
 8006370:	f008 f9e2 	bl	800e738 <HAL_TIM_Base_Init>
 8006374:	4603      	mov	r3, r0
 8006376:	2b00      	cmp	r3, #0
 8006378:	d001      	beq.n	800637e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800637a:	f000 faff 	bl	800697c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800637e:	2300      	movs	r3, #0
 8006380:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006382:	2300      	movs	r3, #0
 8006384:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8006386:	463b      	mov	r3, r7
 8006388:	4619      	mov	r1, r3
 800638a:	4806      	ldr	r0, [pc, #24]	; (80063a4 <MX_TIM6_Init+0x64>)
 800638c:	f008 ffc2 	bl	800f314 <HAL_TIMEx_MasterConfigSynchronization>
 8006390:	4603      	mov	r3, r0
 8006392:	2b00      	cmp	r3, #0
 8006394:	d001      	beq.n	800639a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8006396:	f000 faf1 	bl	800697c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800639a:	bf00      	nop
 800639c:	3708      	adds	r7, #8
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}
 80063a2:	bf00      	nop
 80063a4:	200439e0 	.word	0x200439e0
 80063a8:	40001000 	.word	0x40001000

080063ac <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80063ac:	b580      	push	{r7, lr}
 80063ae:	b082      	sub	sp, #8
 80063b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80063b2:	463b      	mov	r3, r7
 80063b4:	2200      	movs	r2, #0
 80063b6:	601a      	str	r2, [r3, #0]
 80063b8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80063ba:	4b14      	ldr	r3, [pc, #80]	; (800640c <MX_TIM7_Init+0x60>)
 80063bc:	4a14      	ldr	r2, [pc, #80]	; (8006410 <MX_TIM7_Init+0x64>)
 80063be:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 179;
 80063c0:	4b12      	ldr	r3, [pc, #72]	; (800640c <MX_TIM7_Init+0x60>)
 80063c2:	22b3      	movs	r2, #179	; 0xb3
 80063c4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80063c6:	4b11      	ldr	r3, [pc, #68]	; (800640c <MX_TIM7_Init+0x60>)
 80063c8:	2200      	movs	r2, #0
 80063ca:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 49;
 80063cc:	4b0f      	ldr	r3, [pc, #60]	; (800640c <MX_TIM7_Init+0x60>)
 80063ce:	2231      	movs	r2, #49	; 0x31
 80063d0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80063d2:	4b0e      	ldr	r3, [pc, #56]	; (800640c <MX_TIM7_Init+0x60>)
 80063d4:	2280      	movs	r2, #128	; 0x80
 80063d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80063d8:	480c      	ldr	r0, [pc, #48]	; (800640c <MX_TIM7_Init+0x60>)
 80063da:	f008 f9ad 	bl	800e738 <HAL_TIM_Base_Init>
 80063de:	4603      	mov	r3, r0
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d001      	beq.n	80063e8 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 80063e4:	f000 faca 	bl	800697c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80063e8:	2300      	movs	r3, #0
 80063ea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80063ec:	2300      	movs	r3, #0
 80063ee:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80063f0:	463b      	mov	r3, r7
 80063f2:	4619      	mov	r1, r3
 80063f4:	4805      	ldr	r0, [pc, #20]	; (800640c <MX_TIM7_Init+0x60>)
 80063f6:	f008 ff8d 	bl	800f314 <HAL_TIMEx_MasterConfigSynchronization>
 80063fa:	4603      	mov	r3, r0
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d001      	beq.n	8006404 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8006400:	f000 fabc 	bl	800697c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8006404:	bf00      	nop
 8006406:	3708      	adds	r7, #8
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}
 800640c:	20043b84 	.word	0x20043b84
 8006410:	40001400 	.word	0x40001400

08006414 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b08c      	sub	sp, #48	; 0x30
 8006418:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800641a:	f107 030c 	add.w	r3, r7, #12
 800641e:	2224      	movs	r2, #36	; 0x24
 8006420:	2100      	movs	r1, #0
 8006422:	4618      	mov	r0, r3
 8006424:	f00e fdd3 	bl	8014fce <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006428:	1d3b      	adds	r3, r7, #4
 800642a:	2200      	movs	r2, #0
 800642c:	601a      	str	r2, [r3, #0]
 800642e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8006430:	4b22      	ldr	r3, [pc, #136]	; (80064bc <MX_TIM8_Init+0xa8>)
 8006432:	4a23      	ldr	r2, [pc, #140]	; (80064c0 <MX_TIM8_Init+0xac>)
 8006434:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8006436:	4b21      	ldr	r3, [pc, #132]	; (80064bc <MX_TIM8_Init+0xa8>)
 8006438:	2200      	movs	r2, #0
 800643a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 800643c:	4b1f      	ldr	r3, [pc, #124]	; (80064bc <MX_TIM8_Init+0xa8>)
 800643e:	2210      	movs	r2, #16
 8006440:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8006442:	4b1e      	ldr	r3, [pc, #120]	; (80064bc <MX_TIM8_Init+0xa8>)
 8006444:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006448:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800644a:	4b1c      	ldr	r3, [pc, #112]	; (80064bc <MX_TIM8_Init+0xa8>)
 800644c:	2200      	movs	r2, #0
 800644e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8006450:	4b1a      	ldr	r3, [pc, #104]	; (80064bc <MX_TIM8_Init+0xa8>)
 8006452:	2200      	movs	r2, #0
 8006454:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006456:	4b19      	ldr	r3, [pc, #100]	; (80064bc <MX_TIM8_Init+0xa8>)
 8006458:	2200      	movs	r2, #0
 800645a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800645c:	2303      	movs	r3, #3
 800645e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8006460:	2300      	movs	r3, #0
 8006462:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8006464:	2301      	movs	r3, #1
 8006466:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8006468:	2300      	movs	r3, #0
 800646a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800646c:	2300      	movs	r3, #0
 800646e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8006470:	2300      	movs	r3, #0
 8006472:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8006474:	2301      	movs	r3, #1
 8006476:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8006478:	2300      	movs	r3, #0
 800647a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800647c:	2300      	movs	r3, #0
 800647e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8006480:	f107 030c 	add.w	r3, r7, #12
 8006484:	4619      	mov	r1, r3
 8006486:	480d      	ldr	r0, [pc, #52]	; (80064bc <MX_TIM8_Init+0xa8>)
 8006488:	f008 fa0e 	bl	800e8a8 <HAL_TIM_Encoder_Init>
 800648c:	4603      	mov	r3, r0
 800648e:	2b00      	cmp	r3, #0
 8006490:	d001      	beq.n	8006496 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8006492:	f000 fa73 	bl	800697c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006496:	2300      	movs	r3, #0
 8006498:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800649a:	2300      	movs	r3, #0
 800649c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800649e:	1d3b      	adds	r3, r7, #4
 80064a0:	4619      	mov	r1, r3
 80064a2:	4806      	ldr	r0, [pc, #24]	; (80064bc <MX_TIM8_Init+0xa8>)
 80064a4:	f008 ff36 	bl	800f314 <HAL_TIMEx_MasterConfigSynchronization>
 80064a8:	4603      	mov	r3, r0
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d001      	beq.n	80064b2 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 80064ae:	f000 fa65 	bl	800697c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80064b2:	bf00      	nop
 80064b4:	3730      	adds	r7, #48	; 0x30
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}
 80064ba:	bf00      	nop
 80064bc:	20043704 	.word	0x20043704
 80064c0:	40010400 	.word	0x40010400

080064c4 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b088      	sub	sp, #32
 80064c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80064ca:	1d3b      	adds	r3, r7, #4
 80064cc:	2200      	movs	r2, #0
 80064ce:	601a      	str	r2, [r3, #0]
 80064d0:	605a      	str	r2, [r3, #4]
 80064d2:	609a      	str	r2, [r3, #8]
 80064d4:	60da      	str	r2, [r3, #12]
 80064d6:	611a      	str	r2, [r3, #16]
 80064d8:	615a      	str	r2, [r3, #20]
 80064da:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80064dc:	4b1e      	ldr	r3, [pc, #120]	; (8006558 <MX_TIM10_Init+0x94>)
 80064de:	4a1f      	ldr	r2, [pc, #124]	; (800655c <MX_TIM10_Init+0x98>)
 80064e0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 1;
 80064e2:	4b1d      	ldr	r3, [pc, #116]	; (8006558 <MX_TIM10_Init+0x94>)
 80064e4:	2201      	movs	r2, #1
 80064e6:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80064e8:	4b1b      	ldr	r3, [pc, #108]	; (8006558 <MX_TIM10_Init+0x94>)
 80064ea:	2200      	movs	r2, #0
 80064ec:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 8999;
 80064ee:	4b1a      	ldr	r3, [pc, #104]	; (8006558 <MX_TIM10_Init+0x94>)
 80064f0:	f242 3227 	movw	r2, #8999	; 0x2327
 80064f4:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80064f6:	4b18      	ldr	r3, [pc, #96]	; (8006558 <MX_TIM10_Init+0x94>)
 80064f8:	2200      	movs	r2, #0
 80064fa:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80064fc:	4b16      	ldr	r3, [pc, #88]	; (8006558 <MX_TIM10_Init+0x94>)
 80064fe:	2200      	movs	r2, #0
 8006500:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8006502:	4815      	ldr	r0, [pc, #84]	; (8006558 <MX_TIM10_Init+0x94>)
 8006504:	f008 f918 	bl	800e738 <HAL_TIM_Base_Init>
 8006508:	4603      	mov	r3, r0
 800650a:	2b00      	cmp	r3, #0
 800650c:	d001      	beq.n	8006512 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 800650e:	f000 fa35 	bl	800697c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8006512:	4811      	ldr	r0, [pc, #68]	; (8006558 <MX_TIM10_Init+0x94>)
 8006514:	f008 f95f 	bl	800e7d6 <HAL_TIM_PWM_Init>
 8006518:	4603      	mov	r3, r0
 800651a:	2b00      	cmp	r3, #0
 800651c:	d001      	beq.n	8006522 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 800651e:	f000 fa2d 	bl	800697c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006522:	2360      	movs	r3, #96	; 0x60
 8006524:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006526:	2300      	movs	r3, #0
 8006528:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800652a:	2300      	movs	r3, #0
 800652c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800652e:	2300      	movs	r3, #0
 8006530:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006532:	1d3b      	adds	r3, r7, #4
 8006534:	2200      	movs	r2, #0
 8006536:	4619      	mov	r1, r3
 8006538:	4807      	ldr	r0, [pc, #28]	; (8006558 <MX_TIM10_Init+0x94>)
 800653a:	f008 fb87 	bl	800ec4c <HAL_TIM_PWM_ConfigChannel>
 800653e:	4603      	mov	r3, r0
 8006540:	2b00      	cmp	r3, #0
 8006542:	d001      	beq.n	8006548 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8006544:	f000 fa1a 	bl	800697c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8006548:	4803      	ldr	r0, [pc, #12]	; (8006558 <MX_TIM10_Init+0x94>)
 800654a:	f000 fe07 	bl	800715c <HAL_TIM_MspPostInit>

}
 800654e:	bf00      	nop
 8006550:	3720      	adds	r7, #32
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}
 8006556:	bf00      	nop
 8006558:	20043820 	.word	0x20043820
 800655c:	40014400 	.word	0x40014400

08006560 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b088      	sub	sp, #32
 8006564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8006566:	1d3b      	adds	r3, r7, #4
 8006568:	2200      	movs	r2, #0
 800656a:	601a      	str	r2, [r3, #0]
 800656c:	605a      	str	r2, [r3, #4]
 800656e:	609a      	str	r2, [r3, #8]
 8006570:	60da      	str	r2, [r3, #12]
 8006572:	611a      	str	r2, [r3, #16]
 8006574:	615a      	str	r2, [r3, #20]
 8006576:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8006578:	4b1e      	ldr	r3, [pc, #120]	; (80065f4 <MX_TIM11_Init+0x94>)
 800657a:	4a1f      	ldr	r2, [pc, #124]	; (80065f8 <MX_TIM11_Init+0x98>)
 800657c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 1;
 800657e:	4b1d      	ldr	r3, [pc, #116]	; (80065f4 <MX_TIM11_Init+0x94>)
 8006580:	2201      	movs	r2, #1
 8006582:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006584:	4b1b      	ldr	r3, [pc, #108]	; (80065f4 <MX_TIM11_Init+0x94>)
 8006586:	2200      	movs	r2, #0
 8006588:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 8999;
 800658a:	4b1a      	ldr	r3, [pc, #104]	; (80065f4 <MX_TIM11_Init+0x94>)
 800658c:	f242 3227 	movw	r2, #8999	; 0x2327
 8006590:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006592:	4b18      	ldr	r3, [pc, #96]	; (80065f4 <MX_TIM11_Init+0x94>)
 8006594:	2200      	movs	r2, #0
 8006596:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006598:	4b16      	ldr	r3, [pc, #88]	; (80065f4 <MX_TIM11_Init+0x94>)
 800659a:	2200      	movs	r2, #0
 800659c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800659e:	4815      	ldr	r0, [pc, #84]	; (80065f4 <MX_TIM11_Init+0x94>)
 80065a0:	f008 f8ca 	bl	800e738 <HAL_TIM_Base_Init>
 80065a4:	4603      	mov	r3, r0
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d001      	beq.n	80065ae <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 80065aa:	f000 f9e7 	bl	800697c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 80065ae:	4811      	ldr	r0, [pc, #68]	; (80065f4 <MX_TIM11_Init+0x94>)
 80065b0:	f008 f911 	bl	800e7d6 <HAL_TIM_PWM_Init>
 80065b4:	4603      	mov	r3, r0
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d001      	beq.n	80065be <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 80065ba:	f000 f9df 	bl	800697c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80065be:	2360      	movs	r3, #96	; 0x60
 80065c0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80065c2:	2300      	movs	r3, #0
 80065c4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80065c6:	2300      	movs	r3, #0
 80065c8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80065ca:	2300      	movs	r3, #0
 80065cc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80065ce:	1d3b      	adds	r3, r7, #4
 80065d0:	2200      	movs	r2, #0
 80065d2:	4619      	mov	r1, r3
 80065d4:	4807      	ldr	r0, [pc, #28]	; (80065f4 <MX_TIM11_Init+0x94>)
 80065d6:	f008 fb39 	bl	800ec4c <HAL_TIM_PWM_ConfigChannel>
 80065da:	4603      	mov	r3, r0
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d001      	beq.n	80065e4 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 80065e0:	f000 f9cc 	bl	800697c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 80065e4:	4803      	ldr	r0, [pc, #12]	; (80065f4 <MX_TIM11_Init+0x94>)
 80065e6:	f000 fdb9 	bl	800715c <HAL_TIM_MspPostInit>

}
 80065ea:	bf00      	nop
 80065ec:	3720      	adds	r7, #32
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}
 80065f2:	bf00      	nop
 80065f4:	20043940 	.word	0x20043940
 80065f8:	40014800 	.word	0x40014800

080065fc <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8006600:	4b0e      	ldr	r3, [pc, #56]	; (800663c <MX_TIM13_Init+0x40>)
 8006602:	4a0f      	ldr	r2, [pc, #60]	; (8006640 <MX_TIM13_Init+0x44>)
 8006604:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 89;
 8006606:	4b0d      	ldr	r3, [pc, #52]	; (800663c <MX_TIM13_Init+0x40>)
 8006608:	2259      	movs	r2, #89	; 0x59
 800660a:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800660c:	4b0b      	ldr	r3, [pc, #44]	; (800663c <MX_TIM13_Init+0x40>)
 800660e:	2200      	movs	r2, #0
 8006610:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 8006612:	4b0a      	ldr	r3, [pc, #40]	; (800663c <MX_TIM13_Init+0x40>)
 8006614:	f242 720f 	movw	r2, #9999	; 0x270f
 8006618:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800661a:	4b08      	ldr	r3, [pc, #32]	; (800663c <MX_TIM13_Init+0x40>)
 800661c:	2200      	movs	r2, #0
 800661e:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006620:	4b06      	ldr	r3, [pc, #24]	; (800663c <MX_TIM13_Init+0x40>)
 8006622:	2280      	movs	r2, #128	; 0x80
 8006624:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8006626:	4805      	ldr	r0, [pc, #20]	; (800663c <MX_TIM13_Init+0x40>)
 8006628:	f008 f886 	bl	800e738 <HAL_TIM_Base_Init>
 800662c:	4603      	mov	r3, r0
 800662e:	2b00      	cmp	r3, #0
 8006630:	d001      	beq.n	8006636 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8006632:	f000 f9a3 	bl	800697c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8006636:	bf00      	nop
 8006638:	bd80      	pop	{r7, pc}
 800663a:	bf00      	nop
 800663c:	20043900 	.word	0x20043900
 8006640:	40001c00 	.word	0x40001c00

08006644 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006648:	4b11      	ldr	r3, [pc, #68]	; (8006690 <MX_USART2_UART_Init+0x4c>)
 800664a:	4a12      	ldr	r2, [pc, #72]	; (8006694 <MX_USART2_UART_Init+0x50>)
 800664c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800664e:	4b10      	ldr	r3, [pc, #64]	; (8006690 <MX_USART2_UART_Init+0x4c>)
 8006650:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006654:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006656:	4b0e      	ldr	r3, [pc, #56]	; (8006690 <MX_USART2_UART_Init+0x4c>)
 8006658:	2200      	movs	r2, #0
 800665a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800665c:	4b0c      	ldr	r3, [pc, #48]	; (8006690 <MX_USART2_UART_Init+0x4c>)
 800665e:	2200      	movs	r2, #0
 8006660:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006662:	4b0b      	ldr	r3, [pc, #44]	; (8006690 <MX_USART2_UART_Init+0x4c>)
 8006664:	2200      	movs	r2, #0
 8006666:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006668:	4b09      	ldr	r3, [pc, #36]	; (8006690 <MX_USART2_UART_Init+0x4c>)
 800666a:	220c      	movs	r2, #12
 800666c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800666e:	4b08      	ldr	r3, [pc, #32]	; (8006690 <MX_USART2_UART_Init+0x4c>)
 8006670:	2200      	movs	r2, #0
 8006672:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006674:	4b06      	ldr	r3, [pc, #24]	; (8006690 <MX_USART2_UART_Init+0x4c>)
 8006676:	2200      	movs	r2, #0
 8006678:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800667a:	4805      	ldr	r0, [pc, #20]	; (8006690 <MX_USART2_UART_Init+0x4c>)
 800667c:	f008 ff2c 	bl	800f4d8 <HAL_UART_Init>
 8006680:	4603      	mov	r3, r0
 8006682:	2b00      	cmp	r3, #0
 8006684:	d001      	beq.n	800668a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8006686:	f000 f979 	bl	800697c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800668a:	bf00      	nop
 800668c:	bd80      	pop	{r7, pc}
 800668e:	bf00      	nop
 8006690:	20043ae4 	.word	0x20043ae4
 8006694:	40004400 	.word	0x40004400

08006698 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b082      	sub	sp, #8
 800669c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800669e:	2300      	movs	r3, #0
 80066a0:	607b      	str	r3, [r7, #4]
 80066a2:	4b14      	ldr	r3, [pc, #80]	; (80066f4 <MX_DMA_Init+0x5c>)
 80066a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066a6:	4a13      	ldr	r2, [pc, #76]	; (80066f4 <MX_DMA_Init+0x5c>)
 80066a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80066ac:	6313      	str	r3, [r2, #48]	; 0x30
 80066ae:	4b11      	ldr	r3, [pc, #68]	; (80066f4 <MX_DMA_Init+0x5c>)
 80066b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066b6:	607b      	str	r3, [r7, #4]
 80066b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80066ba:	2200      	movs	r2, #0
 80066bc:	2100      	movs	r1, #0
 80066be:	203a      	movs	r0, #58	; 0x3a
 80066c0:	f003 fc05 	bl	8009ece <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80066c4:	203a      	movs	r0, #58	; 0x3a
 80066c6:	f003 fc1e 	bl	8009f06 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80066ca:	2200      	movs	r2, #0
 80066cc:	2100      	movs	r1, #0
 80066ce:	203b      	movs	r0, #59	; 0x3b
 80066d0:	f003 fbfd 	bl	8009ece <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80066d4:	203b      	movs	r0, #59	; 0x3b
 80066d6:	f003 fc16 	bl	8009f06 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80066da:	2200      	movs	r2, #0
 80066dc:	2100      	movs	r1, #0
 80066de:	2045      	movs	r0, #69	; 0x45
 80066e0:	f003 fbf5 	bl	8009ece <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80066e4:	2045      	movs	r0, #69	; 0x45
 80066e6:	f003 fc0e 	bl	8009f06 <HAL_NVIC_EnableIRQ>

}
 80066ea:	bf00      	nop
 80066ec:	3708      	adds	r7, #8
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}
 80066f2:	bf00      	nop
 80066f4:	40023800 	.word	0x40023800

080066f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b08c      	sub	sp, #48	; 0x30
 80066fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80066fe:	f107 031c 	add.w	r3, r7, #28
 8006702:	2200      	movs	r2, #0
 8006704:	601a      	str	r2, [r3, #0]
 8006706:	605a      	str	r2, [r3, #4]
 8006708:	609a      	str	r2, [r3, #8]
 800670a:	60da      	str	r2, [r3, #12]
 800670c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800670e:	2300      	movs	r3, #0
 8006710:	61bb      	str	r3, [r7, #24]
 8006712:	4b94      	ldr	r3, [pc, #592]	; (8006964 <MX_GPIO_Init+0x26c>)
 8006714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006716:	4a93      	ldr	r2, [pc, #588]	; (8006964 <MX_GPIO_Init+0x26c>)
 8006718:	f043 0310 	orr.w	r3, r3, #16
 800671c:	6313      	str	r3, [r2, #48]	; 0x30
 800671e:	4b91      	ldr	r3, [pc, #580]	; (8006964 <MX_GPIO_Init+0x26c>)
 8006720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006722:	f003 0310 	and.w	r3, r3, #16
 8006726:	61bb      	str	r3, [r7, #24]
 8006728:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800672a:	2300      	movs	r3, #0
 800672c:	617b      	str	r3, [r7, #20]
 800672e:	4b8d      	ldr	r3, [pc, #564]	; (8006964 <MX_GPIO_Init+0x26c>)
 8006730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006732:	4a8c      	ldr	r2, [pc, #560]	; (8006964 <MX_GPIO_Init+0x26c>)
 8006734:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006738:	6313      	str	r3, [r2, #48]	; 0x30
 800673a:	4b8a      	ldr	r3, [pc, #552]	; (8006964 <MX_GPIO_Init+0x26c>)
 800673c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800673e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006742:	617b      	str	r3, [r7, #20]
 8006744:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006746:	2300      	movs	r3, #0
 8006748:	613b      	str	r3, [r7, #16]
 800674a:	4b86      	ldr	r3, [pc, #536]	; (8006964 <MX_GPIO_Init+0x26c>)
 800674c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800674e:	4a85      	ldr	r2, [pc, #532]	; (8006964 <MX_GPIO_Init+0x26c>)
 8006750:	f043 0304 	orr.w	r3, r3, #4
 8006754:	6313      	str	r3, [r2, #48]	; 0x30
 8006756:	4b83      	ldr	r3, [pc, #524]	; (8006964 <MX_GPIO_Init+0x26c>)
 8006758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800675a:	f003 0304 	and.w	r3, r3, #4
 800675e:	613b      	str	r3, [r7, #16]
 8006760:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006762:	2300      	movs	r3, #0
 8006764:	60fb      	str	r3, [r7, #12]
 8006766:	4b7f      	ldr	r3, [pc, #508]	; (8006964 <MX_GPIO_Init+0x26c>)
 8006768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800676a:	4a7e      	ldr	r2, [pc, #504]	; (8006964 <MX_GPIO_Init+0x26c>)
 800676c:	f043 0301 	orr.w	r3, r3, #1
 8006770:	6313      	str	r3, [r2, #48]	; 0x30
 8006772:	4b7c      	ldr	r3, [pc, #496]	; (8006964 <MX_GPIO_Init+0x26c>)
 8006774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006776:	f003 0301 	and.w	r3, r3, #1
 800677a:	60fb      	str	r3, [r7, #12]
 800677c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800677e:	2300      	movs	r3, #0
 8006780:	60bb      	str	r3, [r7, #8]
 8006782:	4b78      	ldr	r3, [pc, #480]	; (8006964 <MX_GPIO_Init+0x26c>)
 8006784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006786:	4a77      	ldr	r2, [pc, #476]	; (8006964 <MX_GPIO_Init+0x26c>)
 8006788:	f043 0302 	orr.w	r3, r3, #2
 800678c:	6313      	str	r3, [r2, #48]	; 0x30
 800678e:	4b75      	ldr	r3, [pc, #468]	; (8006964 <MX_GPIO_Init+0x26c>)
 8006790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006792:	f003 0302 	and.w	r3, r3, #2
 8006796:	60bb      	str	r3, [r7, #8]
 8006798:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800679a:	2300      	movs	r3, #0
 800679c:	607b      	str	r3, [r7, #4]
 800679e:	4b71      	ldr	r3, [pc, #452]	; (8006964 <MX_GPIO_Init+0x26c>)
 80067a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067a2:	4a70      	ldr	r2, [pc, #448]	; (8006964 <MX_GPIO_Init+0x26c>)
 80067a4:	f043 0308 	orr.w	r3, r3, #8
 80067a8:	6313      	str	r3, [r2, #48]	; 0x30
 80067aa:	4b6e      	ldr	r3, [pc, #440]	; (8006964 <MX_GPIO_Init+0x26c>)
 80067ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ae:	f003 0308 	and.w	r3, r3, #8
 80067b2:	607b      	str	r3, [r7, #4]
 80067b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 80067b6:	2200      	movs	r2, #0
 80067b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80067bc:	486a      	ldr	r0, [pc, #424]	; (8006968 <MX_GPIO_Init+0x270>)
 80067be:	f004 f91b 	bl	800a9f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80067c2:	2200      	movs	r2, #0
 80067c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80067c8:	4868      	ldr	r0, [pc, #416]	; (800696c <MX_GPIO_Init+0x274>)
 80067ca:	f004 f915 	bl	800a9f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 80067ce:	2200      	movs	r2, #0
 80067d0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80067d4:	4866      	ldr	r0, [pc, #408]	; (8006970 <MX_GPIO_Init+0x278>)
 80067d6:	f004 f90f 	bl	800a9f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80067da:	2200      	movs	r2, #0
 80067dc:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 80067e0:	4864      	ldr	r0, [pc, #400]	; (8006974 <MX_GPIO_Init+0x27c>)
 80067e2:	f004 f909 	bl	800a9f8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80067e6:	2304      	movs	r3, #4
 80067e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80067ea:	2300      	movs	r3, #0
 80067ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067ee:	2300      	movs	r3, #0
 80067f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80067f2:	f107 031c 	add.w	r3, r7, #28
 80067f6:	4619      	mov	r1, r3
 80067f8:	485b      	ldr	r0, [pc, #364]	; (8006968 <MX_GPIO_Init+0x270>)
 80067fa:	f003 ff3b 	bl	800a674 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80067fe:	230f      	movs	r3, #15
 8006800:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006802:	2303      	movs	r3, #3
 8006804:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006806:	2300      	movs	r3, #0
 8006808:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800680a:	f107 031c 	add.w	r3, r7, #28
 800680e:	4619      	mov	r1, r3
 8006810:	4859      	ldr	r0, [pc, #356]	; (8006978 <MX_GPIO_Init+0x280>)
 8006812:	f003 ff2f 	bl	800a674 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8006816:	23e1      	movs	r3, #225	; 0xe1
 8006818:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800681a:	2303      	movs	r3, #3
 800681c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800681e:	2300      	movs	r3, #0
 8006820:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006822:	f107 031c 	add.w	r3, r7, #28
 8006826:	4619      	mov	r1, r3
 8006828:	4852      	ldr	r0, [pc, #328]	; (8006974 <MX_GPIO_Init+0x27c>)
 800682a:	f003 ff23 	bl	800a674 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800682e:	2303      	movs	r3, #3
 8006830:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006832:	2303      	movs	r3, #3
 8006834:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006836:	2300      	movs	r3, #0
 8006838:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800683a:	f107 031c 	add.w	r3, r7, #28
 800683e:	4619      	mov	r1, r3
 8006840:	484a      	ldr	r0, [pc, #296]	; (800696c <MX_GPIO_Init+0x274>)
 8006842:	f003 ff17 	bl	800a674 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006846:	2304      	movs	r3, #4
 8006848:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800684a:	2300      	movs	r3, #0
 800684c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800684e:	2301      	movs	r3, #1
 8006850:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006852:	f107 031c 	add.w	r3, r7, #28
 8006856:	4619      	mov	r1, r3
 8006858:	4844      	ldr	r0, [pc, #272]	; (800696c <MX_GPIO_Init+0x274>)
 800685a:	f003 ff0b 	bl	800a674 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 800685e:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 8006862:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006864:	2300      	movs	r3, #0
 8006866:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006868:	2301      	movs	r3, #1
 800686a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800686c:	f107 031c 	add.w	r3, r7, #28
 8006870:	4619      	mov	r1, r3
 8006872:	483d      	ldr	r0, [pc, #244]	; (8006968 <MX_GPIO_Init+0x270>)
 8006874:	f003 fefe 	bl	800a674 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8006878:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800687c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800687e:	2301      	movs	r3, #1
 8006880:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006882:	2300      	movs	r3, #0
 8006884:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006886:	2300      	movs	r3, #0
 8006888:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800688a:	f107 031c 	add.w	r3, r7, #28
 800688e:	4619      	mov	r1, r3
 8006890:	4835      	ldr	r0, [pc, #212]	; (8006968 <MX_GPIO_Init+0x270>)
 8006892:	f003 feef 	bl	800a674 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8006896:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800689a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800689c:	2301      	movs	r3, #1
 800689e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068a0:	2300      	movs	r3, #0
 80068a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80068a4:	2300      	movs	r3, #0
 80068a6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80068a8:	f107 031c 	add.w	r3, r7, #28
 80068ac:	4619      	mov	r1, r3
 80068ae:	482f      	ldr	r0, [pc, #188]	; (800696c <MX_GPIO_Init+0x274>)
 80068b0:	f003 fee0 	bl	800a674 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80068b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80068b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80068ba:	2300      	movs	r3, #0
 80068bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068be:	2300      	movs	r3, #0
 80068c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80068c2:	f107 031c 	add.w	r3, r7, #28
 80068c6:	4619      	mov	r1, r3
 80068c8:	4829      	ldr	r0, [pc, #164]	; (8006970 <MX_GPIO_Init+0x278>)
 80068ca:	f003 fed3 	bl	800a674 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80068ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80068d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80068d4:	2301      	movs	r3, #1
 80068d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068d8:	2300      	movs	r3, #0
 80068da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80068dc:	2300      	movs	r3, #0
 80068de:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80068e0:	f107 031c 	add.w	r3, r7, #28
 80068e4:	4619      	mov	r1, r3
 80068e6:	4822      	ldr	r0, [pc, #136]	; (8006970 <MX_GPIO_Init+0x278>)
 80068e8:	f003 fec4 	bl	800a674 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80068ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80068f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80068f2:	2301      	movs	r3, #1
 80068f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80068f6:	2301      	movs	r3, #1
 80068f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80068fa:	2300      	movs	r3, #0
 80068fc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80068fe:	f107 031c 	add.w	r3, r7, #28
 8006902:	4619      	mov	r1, r3
 8006904:	481a      	ldr	r0, [pc, #104]	; (8006970 <MX_GPIO_Init+0x278>)
 8006906:	f003 feb5 	bl	800a674 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800690a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800690e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006910:	2301      	movs	r3, #1
 8006912:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006914:	2300      	movs	r3, #0
 8006916:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006918:	2300      	movs	r3, #0
 800691a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800691c:	f107 031c 	add.w	r3, r7, #28
 8006920:	4619      	mov	r1, r3
 8006922:	4814      	ldr	r0, [pc, #80]	; (8006974 <MX_GPIO_Init+0x27c>)
 8006924:	f003 fea6 	bl	800a674 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8006928:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800692c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800692e:	2300      	movs	r3, #0
 8006930:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006932:	2300      	movs	r3, #0
 8006934:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006936:	f107 031c 	add.w	r3, r7, #28
 800693a:	4619      	mov	r1, r3
 800693c:	480d      	ldr	r0, [pc, #52]	; (8006974 <MX_GPIO_Init+0x27c>)
 800693e:	f003 fe99 	bl	800a674 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8006942:	239b      	movs	r3, #155	; 0x9b
 8006944:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006946:	2300      	movs	r3, #0
 8006948:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800694a:	2301      	movs	r3, #1
 800694c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800694e:	f107 031c 	add.w	r3, r7, #28
 8006952:	4619      	mov	r1, r3
 8006954:	4806      	ldr	r0, [pc, #24]	; (8006970 <MX_GPIO_Init+0x278>)
 8006956:	f003 fe8d 	bl	800a674 <HAL_GPIO_Init>

}
 800695a:	bf00      	nop
 800695c:	3730      	adds	r7, #48	; 0x30
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}
 8006962:	bf00      	nop
 8006964:	40023800 	.word	0x40023800
 8006968:	40021000 	.word	0x40021000
 800696c:	40020400 	.word	0x40020400
 8006970:	40020c00 	.word	0x40020c00
 8006974:	40020000 	.word	0x40020000
 8006978:	40020800 	.word	0x40020800

0800697c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800697c:	b480      	push	{r7}
 800697e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006980:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006982:	e7fe      	b.n	8006982 <Error_Handler+0x6>

08006984 <path_following_initialize>:
  /* End of Outputs for SubSystem: '<Root>/path_following' */
}

/* Model initialize function */
void path_following_initialize(void)
{
 8006984:	b480      	push	{r7}
 8006986:	af00      	add	r7, sp, #0
  /* (no initialization code required) */
}
 8006988:	bf00      	nop
 800698a:	46bd      	mov	sp, r7
 800698c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006990:	4770      	bx	lr
	...

08006994 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006994:	b480      	push	{r7}
 8006996:	b083      	sub	sp, #12
 8006998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800699a:	2300      	movs	r3, #0
 800699c:	607b      	str	r3, [r7, #4]
 800699e:	4b10      	ldr	r3, [pc, #64]	; (80069e0 <HAL_MspInit+0x4c>)
 80069a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069a2:	4a0f      	ldr	r2, [pc, #60]	; (80069e0 <HAL_MspInit+0x4c>)
 80069a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80069a8:	6453      	str	r3, [r2, #68]	; 0x44
 80069aa:	4b0d      	ldr	r3, [pc, #52]	; (80069e0 <HAL_MspInit+0x4c>)
 80069ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80069b2:	607b      	str	r3, [r7, #4]
 80069b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80069b6:	2300      	movs	r3, #0
 80069b8:	603b      	str	r3, [r7, #0]
 80069ba:	4b09      	ldr	r3, [pc, #36]	; (80069e0 <HAL_MspInit+0x4c>)
 80069bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069be:	4a08      	ldr	r2, [pc, #32]	; (80069e0 <HAL_MspInit+0x4c>)
 80069c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069c4:	6413      	str	r3, [r2, #64]	; 0x40
 80069c6:	4b06      	ldr	r3, [pc, #24]	; (80069e0 <HAL_MspInit+0x4c>)
 80069c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069ce:	603b      	str	r3, [r7, #0]
 80069d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80069d2:	bf00      	nop
 80069d4:	370c      	adds	r7, #12
 80069d6:	46bd      	mov	sp, r7
 80069d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069dc:	4770      	bx	lr
 80069de:	bf00      	nop
 80069e0:	40023800 	.word	0x40023800

080069e4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b08c      	sub	sp, #48	; 0x30
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80069ec:	f107 031c 	add.w	r3, r7, #28
 80069f0:	2200      	movs	r2, #0
 80069f2:	601a      	str	r2, [r3, #0]
 80069f4:	605a      	str	r2, [r3, #4]
 80069f6:	609a      	str	r2, [r3, #8]
 80069f8:	60da      	str	r2, [r3, #12]
 80069fa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	4a4a      	ldr	r2, [pc, #296]	; (8006b2c <HAL_ADC_MspInit+0x148>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	f040 808e 	bne.w	8006b24 <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8006a08:	2300      	movs	r3, #0
 8006a0a:	61bb      	str	r3, [r7, #24]
 8006a0c:	4b48      	ldr	r3, [pc, #288]	; (8006b30 <HAL_ADC_MspInit+0x14c>)
 8006a0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a10:	4a47      	ldr	r2, [pc, #284]	; (8006b30 <HAL_ADC_MspInit+0x14c>)
 8006a12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006a16:	6453      	str	r3, [r2, #68]	; 0x44
 8006a18:	4b45      	ldr	r3, [pc, #276]	; (8006b30 <HAL_ADC_MspInit+0x14c>)
 8006a1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a20:	61bb      	str	r3, [r7, #24]
 8006a22:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006a24:	2300      	movs	r3, #0
 8006a26:	617b      	str	r3, [r7, #20]
 8006a28:	4b41      	ldr	r3, [pc, #260]	; (8006b30 <HAL_ADC_MspInit+0x14c>)
 8006a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a2c:	4a40      	ldr	r2, [pc, #256]	; (8006b30 <HAL_ADC_MspInit+0x14c>)
 8006a2e:	f043 0304 	orr.w	r3, r3, #4
 8006a32:	6313      	str	r3, [r2, #48]	; 0x30
 8006a34:	4b3e      	ldr	r3, [pc, #248]	; (8006b30 <HAL_ADC_MspInit+0x14c>)
 8006a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a38:	f003 0304 	and.w	r3, r3, #4
 8006a3c:	617b      	str	r3, [r7, #20]
 8006a3e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006a40:	2300      	movs	r3, #0
 8006a42:	613b      	str	r3, [r7, #16]
 8006a44:	4b3a      	ldr	r3, [pc, #232]	; (8006b30 <HAL_ADC_MspInit+0x14c>)
 8006a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a48:	4a39      	ldr	r2, [pc, #228]	; (8006b30 <HAL_ADC_MspInit+0x14c>)
 8006a4a:	f043 0301 	orr.w	r3, r3, #1
 8006a4e:	6313      	str	r3, [r2, #48]	; 0x30
 8006a50:	4b37      	ldr	r3, [pc, #220]	; (8006b30 <HAL_ADC_MspInit+0x14c>)
 8006a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a54:	f003 0301 	and.w	r3, r3, #1
 8006a58:	613b      	str	r3, [r7, #16]
 8006a5a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	60fb      	str	r3, [r7, #12]
 8006a60:	4b33      	ldr	r3, [pc, #204]	; (8006b30 <HAL_ADC_MspInit+0x14c>)
 8006a62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a64:	4a32      	ldr	r2, [pc, #200]	; (8006b30 <HAL_ADC_MspInit+0x14c>)
 8006a66:	f043 0302 	orr.w	r3, r3, #2
 8006a6a:	6313      	str	r3, [r2, #48]	; 0x30
 8006a6c:	4b30      	ldr	r3, [pc, #192]	; (8006b30 <HAL_ADC_MspInit+0x14c>)
 8006a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a70:	f003 0302 	and.w	r3, r3, #2
 8006a74:	60fb      	str	r3, [r7, #12]
 8006a76:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC2_IN6
    PA7     ------> ADC2_IN7
    PB0     ------> ADC2_IN8
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8006a78:	230f      	movs	r3, #15
 8006a7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006a7c:	2303      	movs	r3, #3
 8006a7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a80:	2300      	movs	r3, #0
 8006a82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006a84:	f107 031c 	add.w	r3, r7, #28
 8006a88:	4619      	mov	r1, r3
 8006a8a:	482a      	ldr	r0, [pc, #168]	; (8006b34 <HAL_ADC_MspInit+0x150>)
 8006a8c:	f003 fdf2 	bl	800a674 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8006a90:	23ff      	movs	r3, #255	; 0xff
 8006a92:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006a94:	2303      	movs	r3, #3
 8006a96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a9c:	f107 031c 	add.w	r3, r7, #28
 8006aa0:	4619      	mov	r1, r3
 8006aa2:	4825      	ldr	r0, [pc, #148]	; (8006b38 <HAL_ADC_MspInit+0x154>)
 8006aa4:	f003 fde6 	bl	800a674 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006aa8:	2303      	movs	r3, #3
 8006aaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006aac:	2303      	movs	r3, #3
 8006aae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006ab4:	f107 031c 	add.w	r3, r7, #28
 8006ab8:	4619      	mov	r1, r3
 8006aba:	4820      	ldr	r0, [pc, #128]	; (8006b3c <HAL_ADC_MspInit+0x158>)
 8006abc:	f003 fdda 	bl	800a674 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 8006ac0:	4b1f      	ldr	r3, [pc, #124]	; (8006b40 <HAL_ADC_MspInit+0x15c>)
 8006ac2:	4a20      	ldr	r2, [pc, #128]	; (8006b44 <HAL_ADC_MspInit+0x160>)
 8006ac4:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8006ac6:	4b1e      	ldr	r3, [pc, #120]	; (8006b40 <HAL_ADC_MspInit+0x15c>)
 8006ac8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006acc:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006ace:	4b1c      	ldr	r3, [pc, #112]	; (8006b40 <HAL_ADC_MspInit+0x15c>)
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8006ad4:	4b1a      	ldr	r3, [pc, #104]	; (8006b40 <HAL_ADC_MspInit+0x15c>)
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8006ada:	4b19      	ldr	r3, [pc, #100]	; (8006b40 <HAL_ADC_MspInit+0x15c>)
 8006adc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006ae0:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006ae2:	4b17      	ldr	r3, [pc, #92]	; (8006b40 <HAL_ADC_MspInit+0x15c>)
 8006ae4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ae8:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006aea:	4b15      	ldr	r3, [pc, #84]	; (8006b40 <HAL_ADC_MspInit+0x15c>)
 8006aec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006af0:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8006af2:	4b13      	ldr	r3, [pc, #76]	; (8006b40 <HAL_ADC_MspInit+0x15c>)
 8006af4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006af8:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006afa:	4b11      	ldr	r3, [pc, #68]	; (8006b40 <HAL_ADC_MspInit+0x15c>)
 8006afc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006b00:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006b02:	4b0f      	ldr	r3, [pc, #60]	; (8006b40 <HAL_ADC_MspInit+0x15c>)
 8006b04:	2200      	movs	r2, #0
 8006b06:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8006b08:	480d      	ldr	r0, [pc, #52]	; (8006b40 <HAL_ADC_MspInit+0x15c>)
 8006b0a:	f003 fa17 	bl	8009f3c <HAL_DMA_Init>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d001      	beq.n	8006b18 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8006b14:	f7ff ff32 	bl	800697c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	4a09      	ldr	r2, [pc, #36]	; (8006b40 <HAL_ADC_MspInit+0x15c>)
 8006b1c:	639a      	str	r2, [r3, #56]	; 0x38
 8006b1e:	4a08      	ldr	r2, [pc, #32]	; (8006b40 <HAL_ADC_MspInit+0x15c>)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8006b24:	bf00      	nop
 8006b26:	3730      	adds	r7, #48	; 0x30
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}
 8006b2c:	40012100 	.word	0x40012100
 8006b30:	40023800 	.word	0x40023800
 8006b34:	40020800 	.word	0x40020800
 8006b38:	40020000 	.word	0x40020000
 8006b3c:	40020400 	.word	0x40020400
 8006b40:	20043b24 	.word	0x20043b24
 8006b44:	40026440 	.word	0x40026440

08006b48 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b08c      	sub	sp, #48	; 0x30
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b50:	f107 031c 	add.w	r3, r7, #28
 8006b54:	2200      	movs	r2, #0
 8006b56:	601a      	str	r2, [r3, #0]
 8006b58:	605a      	str	r2, [r3, #4]
 8006b5a:	609a      	str	r2, [r3, #8]
 8006b5c:	60da      	str	r2, [r3, #12]
 8006b5e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a32      	ldr	r2, [pc, #200]	; (8006c30 <HAL_I2C_MspInit+0xe8>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d12c      	bne.n	8006bc4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	61bb      	str	r3, [r7, #24]
 8006b6e:	4b31      	ldr	r3, [pc, #196]	; (8006c34 <HAL_I2C_MspInit+0xec>)
 8006b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b72:	4a30      	ldr	r2, [pc, #192]	; (8006c34 <HAL_I2C_MspInit+0xec>)
 8006b74:	f043 0302 	orr.w	r3, r3, #2
 8006b78:	6313      	str	r3, [r2, #48]	; 0x30
 8006b7a:	4b2e      	ldr	r3, [pc, #184]	; (8006c34 <HAL_I2C_MspInit+0xec>)
 8006b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b7e:	f003 0302 	and.w	r3, r3, #2
 8006b82:	61bb      	str	r3, [r7, #24]
 8006b84:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006b86:	23c0      	movs	r3, #192	; 0xc0
 8006b88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006b8a:	2312      	movs	r3, #18
 8006b8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006b8e:	2301      	movs	r3, #1
 8006b90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b92:	2303      	movs	r3, #3
 8006b94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006b96:	2304      	movs	r3, #4
 8006b98:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006b9a:	f107 031c 	add.w	r3, r7, #28
 8006b9e:	4619      	mov	r1, r3
 8006ba0:	4825      	ldr	r0, [pc, #148]	; (8006c38 <HAL_I2C_MspInit+0xf0>)
 8006ba2:	f003 fd67 	bl	800a674 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	617b      	str	r3, [r7, #20]
 8006baa:	4b22      	ldr	r3, [pc, #136]	; (8006c34 <HAL_I2C_MspInit+0xec>)
 8006bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bae:	4a21      	ldr	r2, [pc, #132]	; (8006c34 <HAL_I2C_MspInit+0xec>)
 8006bb0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006bb4:	6413      	str	r3, [r2, #64]	; 0x40
 8006bb6:	4b1f      	ldr	r3, [pc, #124]	; (8006c34 <HAL_I2C_MspInit+0xec>)
 8006bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006bbe:	617b      	str	r3, [r7, #20]
 8006bc0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8006bc2:	e031      	b.n	8006c28 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a1c      	ldr	r2, [pc, #112]	; (8006c3c <HAL_I2C_MspInit+0xf4>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d12c      	bne.n	8006c28 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006bce:	2300      	movs	r3, #0
 8006bd0:	613b      	str	r3, [r7, #16]
 8006bd2:	4b18      	ldr	r3, [pc, #96]	; (8006c34 <HAL_I2C_MspInit+0xec>)
 8006bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bd6:	4a17      	ldr	r2, [pc, #92]	; (8006c34 <HAL_I2C_MspInit+0xec>)
 8006bd8:	f043 0302 	orr.w	r3, r3, #2
 8006bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8006bde:	4b15      	ldr	r3, [pc, #84]	; (8006c34 <HAL_I2C_MspInit+0xec>)
 8006be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006be2:	f003 0302 	and.w	r3, r3, #2
 8006be6:	613b      	str	r3, [r7, #16]
 8006be8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8006bea:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006bee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006bf0:	2312      	movs	r3, #18
 8006bf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006bf8:	2303      	movs	r3, #3
 8006bfa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8006bfc:	2304      	movs	r3, #4
 8006bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c00:	f107 031c 	add.w	r3, r7, #28
 8006c04:	4619      	mov	r1, r3
 8006c06:	480c      	ldr	r0, [pc, #48]	; (8006c38 <HAL_I2C_MspInit+0xf0>)
 8006c08:	f003 fd34 	bl	800a674 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	60fb      	str	r3, [r7, #12]
 8006c10:	4b08      	ldr	r3, [pc, #32]	; (8006c34 <HAL_I2C_MspInit+0xec>)
 8006c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c14:	4a07      	ldr	r2, [pc, #28]	; (8006c34 <HAL_I2C_MspInit+0xec>)
 8006c16:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006c1a:	6413      	str	r3, [r2, #64]	; 0x40
 8006c1c:	4b05      	ldr	r3, [pc, #20]	; (8006c34 <HAL_I2C_MspInit+0xec>)
 8006c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c24:	60fb      	str	r3, [r7, #12]
 8006c26:	68fb      	ldr	r3, [r7, #12]
}
 8006c28:	bf00      	nop
 8006c2a:	3730      	adds	r7, #48	; 0x30
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}
 8006c30:	40005400 	.word	0x40005400
 8006c34:	40023800 	.word	0x40023800
 8006c38:	40020400 	.word	0x40020400
 8006c3c:	40005800 	.word	0x40005800

08006c40 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b08a      	sub	sp, #40	; 0x28
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c48:	f107 0314 	add.w	r3, r7, #20
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	601a      	str	r2, [r3, #0]
 8006c50:	605a      	str	r2, [r3, #4]
 8006c52:	609a      	str	r2, [r3, #8]
 8006c54:	60da      	str	r2, [r3, #12]
 8006c56:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a69      	ldr	r2, [pc, #420]	; (8006e04 <HAL_SD_MspInit+0x1c4>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	f040 80cb 	bne.w	8006dfa <HAL_SD_MspInit+0x1ba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8006c64:	2300      	movs	r3, #0
 8006c66:	613b      	str	r3, [r7, #16]
 8006c68:	4b67      	ldr	r3, [pc, #412]	; (8006e08 <HAL_SD_MspInit+0x1c8>)
 8006c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c6c:	4a66      	ldr	r2, [pc, #408]	; (8006e08 <HAL_SD_MspInit+0x1c8>)
 8006c6e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006c72:	6453      	str	r3, [r2, #68]	; 0x44
 8006c74:	4b64      	ldr	r3, [pc, #400]	; (8006e08 <HAL_SD_MspInit+0x1c8>)
 8006c76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c7c:	613b      	str	r3, [r7, #16]
 8006c7e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006c80:	2300      	movs	r3, #0
 8006c82:	60fb      	str	r3, [r7, #12]
 8006c84:	4b60      	ldr	r3, [pc, #384]	; (8006e08 <HAL_SD_MspInit+0x1c8>)
 8006c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c88:	4a5f      	ldr	r2, [pc, #380]	; (8006e08 <HAL_SD_MspInit+0x1c8>)
 8006c8a:	f043 0304 	orr.w	r3, r3, #4
 8006c8e:	6313      	str	r3, [r2, #48]	; 0x30
 8006c90:	4b5d      	ldr	r3, [pc, #372]	; (8006e08 <HAL_SD_MspInit+0x1c8>)
 8006c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c94:	f003 0304 	and.w	r3, r3, #4
 8006c98:	60fb      	str	r3, [r7, #12]
 8006c9a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	60bb      	str	r3, [r7, #8]
 8006ca0:	4b59      	ldr	r3, [pc, #356]	; (8006e08 <HAL_SD_MspInit+0x1c8>)
 8006ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ca4:	4a58      	ldr	r2, [pc, #352]	; (8006e08 <HAL_SD_MspInit+0x1c8>)
 8006ca6:	f043 0308 	orr.w	r3, r3, #8
 8006caa:	6313      	str	r3, [r2, #48]	; 0x30
 8006cac:	4b56      	ldr	r3, [pc, #344]	; (8006e08 <HAL_SD_MspInit+0x1c8>)
 8006cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cb0:	f003 0308 	and.w	r3, r3, #8
 8006cb4:	60bb      	str	r3, [r7, #8]
 8006cb6:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8006cb8:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8006cbc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006cbe:	2302      	movs	r3, #2
 8006cc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006cc6:	2303      	movs	r3, #3
 8006cc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8006cca:	230c      	movs	r3, #12
 8006ccc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006cce:	f107 0314 	add.w	r3, r7, #20
 8006cd2:	4619      	mov	r1, r3
 8006cd4:	484d      	ldr	r0, [pc, #308]	; (8006e0c <HAL_SD_MspInit+0x1cc>)
 8006cd6:	f003 fccd 	bl	800a674 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006cda:	2304      	movs	r3, #4
 8006cdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006cde:	2302      	movs	r3, #2
 8006ce0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ce6:	2303      	movs	r3, #3
 8006ce8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8006cea:	230c      	movs	r3, #12
 8006cec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006cee:	f107 0314 	add.w	r3, r7, #20
 8006cf2:	4619      	mov	r1, r3
 8006cf4:	4846      	ldr	r0, [pc, #280]	; (8006e10 <HAL_SD_MspInit+0x1d0>)
 8006cf6:	f003 fcbd 	bl	800a674 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8006cfa:	4b46      	ldr	r3, [pc, #280]	; (8006e14 <HAL_SD_MspInit+0x1d4>)
 8006cfc:	4a46      	ldr	r2, [pc, #280]	; (8006e18 <HAL_SD_MspInit+0x1d8>)
 8006cfe:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8006d00:	4b44      	ldr	r3, [pc, #272]	; (8006e14 <HAL_SD_MspInit+0x1d4>)
 8006d02:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006d06:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006d08:	4b42      	ldr	r3, [pc, #264]	; (8006e14 <HAL_SD_MspInit+0x1d4>)
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006d0e:	4b41      	ldr	r3, [pc, #260]	; (8006e14 <HAL_SD_MspInit+0x1d4>)
 8006d10:	2200      	movs	r2, #0
 8006d12:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006d14:	4b3f      	ldr	r3, [pc, #252]	; (8006e14 <HAL_SD_MspInit+0x1d4>)
 8006d16:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006d1a:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006d1c:	4b3d      	ldr	r3, [pc, #244]	; (8006e14 <HAL_SD_MspInit+0x1d4>)
 8006d1e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006d22:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006d24:	4b3b      	ldr	r3, [pc, #236]	; (8006e14 <HAL_SD_MspInit+0x1d4>)
 8006d26:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006d2a:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8006d2c:	4b39      	ldr	r3, [pc, #228]	; (8006e14 <HAL_SD_MspInit+0x1d4>)
 8006d2e:	2220      	movs	r2, #32
 8006d30:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006d32:	4b38      	ldr	r3, [pc, #224]	; (8006e14 <HAL_SD_MspInit+0x1d4>)
 8006d34:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8006d38:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006d3a:	4b36      	ldr	r3, [pc, #216]	; (8006e14 <HAL_SD_MspInit+0x1d4>)
 8006d3c:	2204      	movs	r2, #4
 8006d3e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006d40:	4b34      	ldr	r3, [pc, #208]	; (8006e14 <HAL_SD_MspInit+0x1d4>)
 8006d42:	2203      	movs	r2, #3
 8006d44:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8006d46:	4b33      	ldr	r3, [pc, #204]	; (8006e14 <HAL_SD_MspInit+0x1d4>)
 8006d48:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006d4c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8006d4e:	4b31      	ldr	r3, [pc, #196]	; (8006e14 <HAL_SD_MspInit+0x1d4>)
 8006d50:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006d54:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8006d56:	482f      	ldr	r0, [pc, #188]	; (8006e14 <HAL_SD_MspInit+0x1d4>)
 8006d58:	f003 f8f0 	bl	8009f3c <HAL_DMA_Init>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d001      	beq.n	8006d66 <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 8006d62:	f7ff fe0b 	bl	800697c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	4a2a      	ldr	r2, [pc, #168]	; (8006e14 <HAL_SD_MspInit+0x1d4>)
 8006d6a:	641a      	str	r2, [r3, #64]	; 0x40
 8006d6c:	4a29      	ldr	r2, [pc, #164]	; (8006e14 <HAL_SD_MspInit+0x1d4>)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8006d72:	4b2a      	ldr	r3, [pc, #168]	; (8006e1c <HAL_SD_MspInit+0x1dc>)
 8006d74:	4a2a      	ldr	r2, [pc, #168]	; (8006e20 <HAL_SD_MspInit+0x1e0>)
 8006d76:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8006d78:	4b28      	ldr	r3, [pc, #160]	; (8006e1c <HAL_SD_MspInit+0x1dc>)
 8006d7a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006d7e:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006d80:	4b26      	ldr	r3, [pc, #152]	; (8006e1c <HAL_SD_MspInit+0x1dc>)
 8006d82:	2240      	movs	r2, #64	; 0x40
 8006d84:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006d86:	4b25      	ldr	r3, [pc, #148]	; (8006e1c <HAL_SD_MspInit+0x1dc>)
 8006d88:	2200      	movs	r2, #0
 8006d8a:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006d8c:	4b23      	ldr	r3, [pc, #140]	; (8006e1c <HAL_SD_MspInit+0x1dc>)
 8006d8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006d92:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006d94:	4b21      	ldr	r3, [pc, #132]	; (8006e1c <HAL_SD_MspInit+0x1dc>)
 8006d96:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006d9a:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006d9c:	4b1f      	ldr	r3, [pc, #124]	; (8006e1c <HAL_SD_MspInit+0x1dc>)
 8006d9e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006da2:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8006da4:	4b1d      	ldr	r3, [pc, #116]	; (8006e1c <HAL_SD_MspInit+0x1dc>)
 8006da6:	2220      	movs	r2, #32
 8006da8:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006daa:	4b1c      	ldr	r3, [pc, #112]	; (8006e1c <HAL_SD_MspInit+0x1dc>)
 8006dac:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8006db0:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006db2:	4b1a      	ldr	r3, [pc, #104]	; (8006e1c <HAL_SD_MspInit+0x1dc>)
 8006db4:	2204      	movs	r2, #4
 8006db6:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006db8:	4b18      	ldr	r3, [pc, #96]	; (8006e1c <HAL_SD_MspInit+0x1dc>)
 8006dba:	2203      	movs	r2, #3
 8006dbc:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8006dbe:	4b17      	ldr	r3, [pc, #92]	; (8006e1c <HAL_SD_MspInit+0x1dc>)
 8006dc0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006dc4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8006dc6:	4b15      	ldr	r3, [pc, #84]	; (8006e1c <HAL_SD_MspInit+0x1dc>)
 8006dc8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006dcc:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8006dce:	4813      	ldr	r0, [pc, #76]	; (8006e1c <HAL_SD_MspInit+0x1dc>)
 8006dd0:	f003 f8b4 	bl	8009f3c <HAL_DMA_Init>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d001      	beq.n	8006dde <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 8006dda:	f7ff fdcf 	bl	800697c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	4a0e      	ldr	r2, [pc, #56]	; (8006e1c <HAL_SD_MspInit+0x1dc>)
 8006de2:	63da      	str	r2, [r3, #60]	; 0x3c
 8006de4:	4a0d      	ldr	r2, [pc, #52]	; (8006e1c <HAL_SD_MspInit+0x1dc>)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8006dea:	2200      	movs	r2, #0
 8006dec:	2100      	movs	r1, #0
 8006dee:	2031      	movs	r0, #49	; 0x31
 8006df0:	f003 f86d 	bl	8009ece <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8006df4:	2031      	movs	r0, #49	; 0x31
 8006df6:	f003 f886 	bl	8009f06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8006dfa:	bf00      	nop
 8006dfc:	3728      	adds	r7, #40	; 0x28
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}
 8006e02:	bf00      	nop
 8006e04:	40012c00 	.word	0x40012c00
 8006e08:	40023800 	.word	0x40023800
 8006e0c:	40020800 	.word	0x40020800
 8006e10:	40020c00 	.word	0x40020c00
 8006e14:	2004364c 	.word	0x2004364c
 8006e18:	40026458 	.word	0x40026458
 8006e1c:	20043980 	.word	0x20043980
 8006e20:	400264a0 	.word	0x400264a0

08006e24 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b08a      	sub	sp, #40	; 0x28
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e2c:	f107 0314 	add.w	r3, r7, #20
 8006e30:	2200      	movs	r2, #0
 8006e32:	601a      	str	r2, [r3, #0]
 8006e34:	605a      	str	r2, [r3, #4]
 8006e36:	609a      	str	r2, [r3, #8]
 8006e38:	60da      	str	r2, [r3, #12]
 8006e3a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4a19      	ldr	r2, [pc, #100]	; (8006ea8 <HAL_SPI_MspInit+0x84>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d12c      	bne.n	8006ea0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8006e46:	2300      	movs	r3, #0
 8006e48:	613b      	str	r3, [r7, #16]
 8006e4a:	4b18      	ldr	r3, [pc, #96]	; (8006eac <HAL_SPI_MspInit+0x88>)
 8006e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e4e:	4a17      	ldr	r2, [pc, #92]	; (8006eac <HAL_SPI_MspInit+0x88>)
 8006e50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006e54:	6413      	str	r3, [r2, #64]	; 0x40
 8006e56:	4b15      	ldr	r3, [pc, #84]	; (8006eac <HAL_SPI_MspInit+0x88>)
 8006e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e5e:	613b      	str	r3, [r7, #16]
 8006e60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006e62:	2300      	movs	r3, #0
 8006e64:	60fb      	str	r3, [r7, #12]
 8006e66:	4b11      	ldr	r3, [pc, #68]	; (8006eac <HAL_SPI_MspInit+0x88>)
 8006e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e6a:	4a10      	ldr	r2, [pc, #64]	; (8006eac <HAL_SPI_MspInit+0x88>)
 8006e6c:	f043 0302 	orr.w	r3, r3, #2
 8006e70:	6313      	str	r3, [r2, #48]	; 0x30
 8006e72:	4b0e      	ldr	r3, [pc, #56]	; (8006eac <HAL_SPI_MspInit+0x88>)
 8006e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e76:	f003 0302 	and.w	r3, r3, #2
 8006e7a:	60fb      	str	r3, [r7, #12]
 8006e7c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8006e7e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8006e82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e84:	2302      	movs	r3, #2
 8006e86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e8c:	2303      	movs	r3, #3
 8006e8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006e90:	2305      	movs	r3, #5
 8006e92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006e94:	f107 0314 	add.w	r3, r7, #20
 8006e98:	4619      	mov	r1, r3
 8006e9a:	4805      	ldr	r0, [pc, #20]	; (8006eb0 <HAL_SPI_MspInit+0x8c>)
 8006e9c:	f003 fbea 	bl	800a674 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8006ea0:	bf00      	nop
 8006ea2:	3728      	adds	r7, #40	; 0x28
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}
 8006ea8:	40003800 	.word	0x40003800
 8006eac:	40023800 	.word	0x40023800
 8006eb0:	40020400 	.word	0x40020400

08006eb4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b08c      	sub	sp, #48	; 0x30
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ebc:	f107 031c 	add.w	r3, r7, #28
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	601a      	str	r2, [r3, #0]
 8006ec4:	605a      	str	r2, [r3, #4]
 8006ec6:	609a      	str	r2, [r3, #8]
 8006ec8:	60da      	str	r2, [r3, #12]
 8006eca:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4a2d      	ldr	r2, [pc, #180]	; (8006f88 <HAL_TIM_PWM_MspInit+0xd4>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d12d      	bne.n	8006f32 <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	61bb      	str	r3, [r7, #24]
 8006eda:	4b2c      	ldr	r3, [pc, #176]	; (8006f8c <HAL_TIM_PWM_MspInit+0xd8>)
 8006edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ede:	4a2b      	ldr	r2, [pc, #172]	; (8006f8c <HAL_TIM_PWM_MspInit+0xd8>)
 8006ee0:	f043 0301 	orr.w	r3, r3, #1
 8006ee4:	6453      	str	r3, [r2, #68]	; 0x44
 8006ee6:	4b29      	ldr	r3, [pc, #164]	; (8006f8c <HAL_TIM_PWM_MspInit+0xd8>)
 8006ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eea:	f003 0301 	and.w	r3, r3, #1
 8006eee:	61bb      	str	r3, [r7, #24]
 8006ef0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	617b      	str	r3, [r7, #20]
 8006ef6:	4b25      	ldr	r3, [pc, #148]	; (8006f8c <HAL_TIM_PWM_MspInit+0xd8>)
 8006ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006efa:	4a24      	ldr	r2, [pc, #144]	; (8006f8c <HAL_TIM_PWM_MspInit+0xd8>)
 8006efc:	f043 0310 	orr.w	r3, r3, #16
 8006f00:	6313      	str	r3, [r2, #48]	; 0x30
 8006f02:	4b22      	ldr	r3, [pc, #136]	; (8006f8c <HAL_TIM_PWM_MspInit+0xd8>)
 8006f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f06:	f003 0310 	and.w	r3, r3, #16
 8006f0a:	617b      	str	r3, [r7, #20]
 8006f0c:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8006f0e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8006f12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f14:	2302      	movs	r3, #2
 8006f16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f18:	2300      	movs	r3, #0
 8006f1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006f20:	2301      	movs	r3, #1
 8006f22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006f24:	f107 031c 	add.w	r3, r7, #28
 8006f28:	4619      	mov	r1, r3
 8006f2a:	4819      	ldr	r0, [pc, #100]	; (8006f90 <HAL_TIM_PWM_MspInit+0xdc>)
 8006f2c:	f003 fba2 	bl	800a674 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8006f30:	e026      	b.n	8006f80 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM3)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4a17      	ldr	r2, [pc, #92]	; (8006f94 <HAL_TIM_PWM_MspInit+0xe0>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d10e      	bne.n	8006f5a <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	613b      	str	r3, [r7, #16]
 8006f40:	4b12      	ldr	r3, [pc, #72]	; (8006f8c <HAL_TIM_PWM_MspInit+0xd8>)
 8006f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f44:	4a11      	ldr	r2, [pc, #68]	; (8006f8c <HAL_TIM_PWM_MspInit+0xd8>)
 8006f46:	f043 0302 	orr.w	r3, r3, #2
 8006f4a:	6413      	str	r3, [r2, #64]	; 0x40
 8006f4c:	4b0f      	ldr	r3, [pc, #60]	; (8006f8c <HAL_TIM_PWM_MspInit+0xd8>)
 8006f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f50:	f003 0302 	and.w	r3, r3, #2
 8006f54:	613b      	str	r3, [r7, #16]
 8006f56:	693b      	ldr	r3, [r7, #16]
}
 8006f58:	e012      	b.n	8006f80 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM4)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a0e      	ldr	r2, [pc, #56]	; (8006f98 <HAL_TIM_PWM_MspInit+0xe4>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d10d      	bne.n	8006f80 <HAL_TIM_PWM_MspInit+0xcc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8006f64:	2300      	movs	r3, #0
 8006f66:	60fb      	str	r3, [r7, #12]
 8006f68:	4b08      	ldr	r3, [pc, #32]	; (8006f8c <HAL_TIM_PWM_MspInit+0xd8>)
 8006f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f6c:	4a07      	ldr	r2, [pc, #28]	; (8006f8c <HAL_TIM_PWM_MspInit+0xd8>)
 8006f6e:	f043 0304 	orr.w	r3, r3, #4
 8006f72:	6413      	str	r3, [r2, #64]	; 0x40
 8006f74:	4b05      	ldr	r3, [pc, #20]	; (8006f8c <HAL_TIM_PWM_MspInit+0xd8>)
 8006f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f78:	f003 0304 	and.w	r3, r3, #4
 8006f7c:	60fb      	str	r3, [r7, #12]
 8006f7e:	68fb      	ldr	r3, [r7, #12]
}
 8006f80:	bf00      	nop
 8006f82:	3730      	adds	r7, #48	; 0x30
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}
 8006f88:	40010000 	.word	0x40010000
 8006f8c:	40023800 	.word	0x40023800
 8006f90:	40021000 	.word	0x40021000
 8006f94:	40000400 	.word	0x40000400
 8006f98:	40000800 	.word	0x40000800

08006f9c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b088      	sub	sp, #32
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	4a3e      	ldr	r2, [pc, #248]	; (80070a4 <HAL_TIM_Base_MspInit+0x108>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d116      	bne.n	8006fdc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8006fae:	2300      	movs	r3, #0
 8006fb0:	61fb      	str	r3, [r7, #28]
 8006fb2:	4b3d      	ldr	r3, [pc, #244]	; (80070a8 <HAL_TIM_Base_MspInit+0x10c>)
 8006fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fb6:	4a3c      	ldr	r2, [pc, #240]	; (80070a8 <HAL_TIM_Base_MspInit+0x10c>)
 8006fb8:	f043 0310 	orr.w	r3, r3, #16
 8006fbc:	6413      	str	r3, [r2, #64]	; 0x40
 8006fbe:	4b3a      	ldr	r3, [pc, #232]	; (80070a8 <HAL_TIM_Base_MspInit+0x10c>)
 8006fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fc2:	f003 0310 	and.w	r3, r3, #16
 8006fc6:	61fb      	str	r3, [r7, #28]
 8006fc8:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8006fca:	2200      	movs	r2, #0
 8006fcc:	2101      	movs	r1, #1
 8006fce:	2036      	movs	r0, #54	; 0x36
 8006fd0:	f002 ff7d 	bl	8009ece <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8006fd4:	2036      	movs	r0, #54	; 0x36
 8006fd6:	f002 ff96 	bl	8009f06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8006fda:	e05e      	b.n	800709a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM7)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a32      	ldr	r2, [pc, #200]	; (80070ac <HAL_TIM_Base_MspInit+0x110>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d116      	bne.n	8007014 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	61bb      	str	r3, [r7, #24]
 8006fea:	4b2f      	ldr	r3, [pc, #188]	; (80070a8 <HAL_TIM_Base_MspInit+0x10c>)
 8006fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fee:	4a2e      	ldr	r2, [pc, #184]	; (80070a8 <HAL_TIM_Base_MspInit+0x10c>)
 8006ff0:	f043 0320 	orr.w	r3, r3, #32
 8006ff4:	6413      	str	r3, [r2, #64]	; 0x40
 8006ff6:	4b2c      	ldr	r3, [pc, #176]	; (80070a8 <HAL_TIM_Base_MspInit+0x10c>)
 8006ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ffa:	f003 0320 	and.w	r3, r3, #32
 8006ffe:	61bb      	str	r3, [r7, #24]
 8007000:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8007002:	2200      	movs	r2, #0
 8007004:	2100      	movs	r1, #0
 8007006:	2037      	movs	r0, #55	; 0x37
 8007008:	f002 ff61 	bl	8009ece <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800700c:	2037      	movs	r0, #55	; 0x37
 800700e:	f002 ff7a 	bl	8009f06 <HAL_NVIC_EnableIRQ>
}
 8007012:	e042      	b.n	800709a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM10)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a25      	ldr	r2, [pc, #148]	; (80070b0 <HAL_TIM_Base_MspInit+0x114>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d10e      	bne.n	800703c <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800701e:	2300      	movs	r3, #0
 8007020:	617b      	str	r3, [r7, #20]
 8007022:	4b21      	ldr	r3, [pc, #132]	; (80070a8 <HAL_TIM_Base_MspInit+0x10c>)
 8007024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007026:	4a20      	ldr	r2, [pc, #128]	; (80070a8 <HAL_TIM_Base_MspInit+0x10c>)
 8007028:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800702c:	6453      	str	r3, [r2, #68]	; 0x44
 800702e:	4b1e      	ldr	r3, [pc, #120]	; (80070a8 <HAL_TIM_Base_MspInit+0x10c>)
 8007030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007036:	617b      	str	r3, [r7, #20]
 8007038:	697b      	ldr	r3, [r7, #20]
}
 800703a:	e02e      	b.n	800709a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM11)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4a1c      	ldr	r2, [pc, #112]	; (80070b4 <HAL_TIM_Base_MspInit+0x118>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d10e      	bne.n	8007064 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8007046:	2300      	movs	r3, #0
 8007048:	613b      	str	r3, [r7, #16]
 800704a:	4b17      	ldr	r3, [pc, #92]	; (80070a8 <HAL_TIM_Base_MspInit+0x10c>)
 800704c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800704e:	4a16      	ldr	r2, [pc, #88]	; (80070a8 <HAL_TIM_Base_MspInit+0x10c>)
 8007050:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007054:	6453      	str	r3, [r2, #68]	; 0x44
 8007056:	4b14      	ldr	r3, [pc, #80]	; (80070a8 <HAL_TIM_Base_MspInit+0x10c>)
 8007058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800705a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800705e:	613b      	str	r3, [r7, #16]
 8007060:	693b      	ldr	r3, [r7, #16]
}
 8007062:	e01a      	b.n	800709a <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM13)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a13      	ldr	r2, [pc, #76]	; (80070b8 <HAL_TIM_Base_MspInit+0x11c>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d115      	bne.n	800709a <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800706e:	2300      	movs	r3, #0
 8007070:	60fb      	str	r3, [r7, #12]
 8007072:	4b0d      	ldr	r3, [pc, #52]	; (80070a8 <HAL_TIM_Base_MspInit+0x10c>)
 8007074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007076:	4a0c      	ldr	r2, [pc, #48]	; (80070a8 <HAL_TIM_Base_MspInit+0x10c>)
 8007078:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800707c:	6413      	str	r3, [r2, #64]	; 0x40
 800707e:	4b0a      	ldr	r3, [pc, #40]	; (80070a8 <HAL_TIM_Base_MspInit+0x10c>)
 8007080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007082:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007086:	60fb      	str	r3, [r7, #12]
 8007088:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800708a:	2200      	movs	r2, #0
 800708c:	2100      	movs	r1, #0
 800708e:	202c      	movs	r0, #44	; 0x2c
 8007090:	f002 ff1d 	bl	8009ece <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8007094:	202c      	movs	r0, #44	; 0x2c
 8007096:	f002 ff36 	bl	8009f06 <HAL_NVIC_EnableIRQ>
}
 800709a:	bf00      	nop
 800709c:	3720      	adds	r7, #32
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}
 80070a2:	bf00      	nop
 80070a4:	40001000 	.word	0x40001000
 80070a8:	40023800 	.word	0x40023800
 80070ac:	40001400 	.word	0x40001400
 80070b0:	40014400 	.word	0x40014400
 80070b4:	40014800 	.word	0x40014800
 80070b8:	40001c00 	.word	0x40001c00

080070bc <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b08a      	sub	sp, #40	; 0x28
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80070c4:	f107 0314 	add.w	r3, r7, #20
 80070c8:	2200      	movs	r2, #0
 80070ca:	601a      	str	r2, [r3, #0]
 80070cc:	605a      	str	r2, [r3, #4]
 80070ce:	609a      	str	r2, [r3, #8]
 80070d0:	60da      	str	r2, [r3, #12]
 80070d2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a1d      	ldr	r2, [pc, #116]	; (8007150 <HAL_TIM_Encoder_MspInit+0x94>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d133      	bne.n	8007146 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80070de:	2300      	movs	r3, #0
 80070e0:	613b      	str	r3, [r7, #16]
 80070e2:	4b1c      	ldr	r3, [pc, #112]	; (8007154 <HAL_TIM_Encoder_MspInit+0x98>)
 80070e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070e6:	4a1b      	ldr	r2, [pc, #108]	; (8007154 <HAL_TIM_Encoder_MspInit+0x98>)
 80070e8:	f043 0302 	orr.w	r3, r3, #2
 80070ec:	6453      	str	r3, [r2, #68]	; 0x44
 80070ee:	4b19      	ldr	r3, [pc, #100]	; (8007154 <HAL_TIM_Encoder_MspInit+0x98>)
 80070f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070f2:	f003 0302 	and.w	r3, r3, #2
 80070f6:	613b      	str	r3, [r7, #16]
 80070f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80070fa:	2300      	movs	r3, #0
 80070fc:	60fb      	str	r3, [r7, #12]
 80070fe:	4b15      	ldr	r3, [pc, #84]	; (8007154 <HAL_TIM_Encoder_MspInit+0x98>)
 8007100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007102:	4a14      	ldr	r2, [pc, #80]	; (8007154 <HAL_TIM_Encoder_MspInit+0x98>)
 8007104:	f043 0304 	orr.w	r3, r3, #4
 8007108:	6313      	str	r3, [r2, #48]	; 0x30
 800710a:	4b12      	ldr	r3, [pc, #72]	; (8007154 <HAL_TIM_Encoder_MspInit+0x98>)
 800710c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800710e:	f003 0304 	and.w	r3, r3, #4
 8007112:	60fb      	str	r3, [r7, #12]
 8007114:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007116:	23c0      	movs	r3, #192	; 0xc0
 8007118:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800711a:	2302      	movs	r3, #2
 800711c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800711e:	2300      	movs	r3, #0
 8007120:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007122:	2300      	movs	r3, #0
 8007124:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8007126:	2303      	movs	r3, #3
 8007128:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800712a:	f107 0314 	add.w	r3, r7, #20
 800712e:	4619      	mov	r1, r3
 8007130:	4809      	ldr	r0, [pc, #36]	; (8007158 <HAL_TIM_Encoder_MspInit+0x9c>)
 8007132:	f003 fa9f 	bl	800a674 <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8007136:	2200      	movs	r2, #0
 8007138:	2100      	movs	r1, #0
 800713a:	202c      	movs	r0, #44	; 0x2c
 800713c:	f002 fec7 	bl	8009ece <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8007140:	202c      	movs	r0, #44	; 0x2c
 8007142:	f002 fee0 	bl	8009f06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8007146:	bf00      	nop
 8007148:	3728      	adds	r7, #40	; 0x28
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}
 800714e:	bf00      	nop
 8007150:	40010400 	.word	0x40010400
 8007154:	40023800 	.word	0x40023800
 8007158:	40020800 	.word	0x40020800

0800715c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b08c      	sub	sp, #48	; 0x30
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007164:	f107 031c 	add.w	r3, r7, #28
 8007168:	2200      	movs	r2, #0
 800716a:	601a      	str	r2, [r3, #0]
 800716c:	605a      	str	r2, [r3, #4]
 800716e:	609a      	str	r2, [r3, #8]
 8007170:	60da      	str	r2, [r3, #12]
 8007172:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4a5c      	ldr	r2, [pc, #368]	; (80072ec <HAL_TIM_MspPostInit+0x190>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d11f      	bne.n	80071be <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800717e:	2300      	movs	r3, #0
 8007180:	61bb      	str	r3, [r7, #24]
 8007182:	4b5b      	ldr	r3, [pc, #364]	; (80072f0 <HAL_TIM_MspPostInit+0x194>)
 8007184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007186:	4a5a      	ldr	r2, [pc, #360]	; (80072f0 <HAL_TIM_MspPostInit+0x194>)
 8007188:	f043 0310 	orr.w	r3, r3, #16
 800718c:	6313      	str	r3, [r2, #48]	; 0x30
 800718e:	4b58      	ldr	r3, [pc, #352]	; (80072f0 <HAL_TIM_MspPostInit+0x194>)
 8007190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007192:	f003 0310 	and.w	r3, r3, #16
 8007196:	61bb      	str	r3, [r7, #24]
 8007198:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800719a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800719e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071a0:	2302      	movs	r3, #2
 80071a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071a4:	2300      	movs	r3, #0
 80071a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80071a8:	2300      	movs	r3, #0
 80071aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80071ac:	2301      	movs	r3, #1
 80071ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80071b0:	f107 031c 	add.w	r3, r7, #28
 80071b4:	4619      	mov	r1, r3
 80071b6:	484f      	ldr	r0, [pc, #316]	; (80072f4 <HAL_TIM_MspPostInit+0x198>)
 80071b8:	f003 fa5c 	bl	800a674 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 80071bc:	e091      	b.n	80072e2 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM3)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a4d      	ldr	r2, [pc, #308]	; (80072f8 <HAL_TIM_MspPostInit+0x19c>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d11e      	bne.n	8007206 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80071c8:	2300      	movs	r3, #0
 80071ca:	617b      	str	r3, [r7, #20]
 80071cc:	4b48      	ldr	r3, [pc, #288]	; (80072f0 <HAL_TIM_MspPostInit+0x194>)
 80071ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071d0:	4a47      	ldr	r2, [pc, #284]	; (80072f0 <HAL_TIM_MspPostInit+0x194>)
 80071d2:	f043 0302 	orr.w	r3, r3, #2
 80071d6:	6313      	str	r3, [r2, #48]	; 0x30
 80071d8:	4b45      	ldr	r3, [pc, #276]	; (80072f0 <HAL_TIM_MspPostInit+0x194>)
 80071da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071dc:	f003 0302 	and.w	r3, r3, #2
 80071e0:	617b      	str	r3, [r7, #20]
 80071e2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80071e4:	2330      	movs	r3, #48	; 0x30
 80071e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80071e8:	2302      	movs	r3, #2
 80071ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071ec:	2300      	movs	r3, #0
 80071ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80071f0:	2300      	movs	r3, #0
 80071f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80071f4:	2302      	movs	r3, #2
 80071f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80071f8:	f107 031c 	add.w	r3, r7, #28
 80071fc:	4619      	mov	r1, r3
 80071fe:	483f      	ldr	r0, [pc, #252]	; (80072fc <HAL_TIM_MspPostInit+0x1a0>)
 8007200:	f003 fa38 	bl	800a674 <HAL_GPIO_Init>
}
 8007204:	e06d      	b.n	80072e2 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM4)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4a3d      	ldr	r2, [pc, #244]	; (8007300 <HAL_TIM_MspPostInit+0x1a4>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d11f      	bne.n	8007250 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007210:	2300      	movs	r3, #0
 8007212:	613b      	str	r3, [r7, #16]
 8007214:	4b36      	ldr	r3, [pc, #216]	; (80072f0 <HAL_TIM_MspPostInit+0x194>)
 8007216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007218:	4a35      	ldr	r2, [pc, #212]	; (80072f0 <HAL_TIM_MspPostInit+0x194>)
 800721a:	f043 0308 	orr.w	r3, r3, #8
 800721e:	6313      	str	r3, [r2, #48]	; 0x30
 8007220:	4b33      	ldr	r3, [pc, #204]	; (80072f0 <HAL_TIM_MspPostInit+0x194>)
 8007222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007224:	f003 0308 	and.w	r3, r3, #8
 8007228:	613b      	str	r3, [r7, #16]
 800722a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800722c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8007230:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007232:	2302      	movs	r3, #2
 8007234:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007236:	2300      	movs	r3, #0
 8007238:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800723a:	2300      	movs	r3, #0
 800723c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800723e:	2302      	movs	r3, #2
 8007240:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007242:	f107 031c 	add.w	r3, r7, #28
 8007246:	4619      	mov	r1, r3
 8007248:	482e      	ldr	r0, [pc, #184]	; (8007304 <HAL_TIM_MspPostInit+0x1a8>)
 800724a:	f003 fa13 	bl	800a674 <HAL_GPIO_Init>
}
 800724e:	e048      	b.n	80072e2 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM10)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	4a2c      	ldr	r2, [pc, #176]	; (8007308 <HAL_TIM_MspPostInit+0x1ac>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d11f      	bne.n	800729a <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800725a:	2300      	movs	r3, #0
 800725c:	60fb      	str	r3, [r7, #12]
 800725e:	4b24      	ldr	r3, [pc, #144]	; (80072f0 <HAL_TIM_MspPostInit+0x194>)
 8007260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007262:	4a23      	ldr	r2, [pc, #140]	; (80072f0 <HAL_TIM_MspPostInit+0x194>)
 8007264:	f043 0302 	orr.w	r3, r3, #2
 8007268:	6313      	str	r3, [r2, #48]	; 0x30
 800726a:	4b21      	ldr	r3, [pc, #132]	; (80072f0 <HAL_TIM_MspPostInit+0x194>)
 800726c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800726e:	f003 0302 	and.w	r3, r3, #2
 8007272:	60fb      	str	r3, [r7, #12]
 8007274:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8007276:	f44f 7380 	mov.w	r3, #256	; 0x100
 800727a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800727c:	2302      	movs	r3, #2
 800727e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007280:	2300      	movs	r3, #0
 8007282:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007284:	2300      	movs	r3, #0
 8007286:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8007288:	2303      	movs	r3, #3
 800728a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800728c:	f107 031c 	add.w	r3, r7, #28
 8007290:	4619      	mov	r1, r3
 8007292:	481a      	ldr	r0, [pc, #104]	; (80072fc <HAL_TIM_MspPostInit+0x1a0>)
 8007294:	f003 f9ee 	bl	800a674 <HAL_GPIO_Init>
}
 8007298:	e023      	b.n	80072e2 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM11)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a1b      	ldr	r2, [pc, #108]	; (800730c <HAL_TIM_MspPostInit+0x1b0>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d11e      	bne.n	80072e2 <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80072a4:	2300      	movs	r3, #0
 80072a6:	60bb      	str	r3, [r7, #8]
 80072a8:	4b11      	ldr	r3, [pc, #68]	; (80072f0 <HAL_TIM_MspPostInit+0x194>)
 80072aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072ac:	4a10      	ldr	r2, [pc, #64]	; (80072f0 <HAL_TIM_MspPostInit+0x194>)
 80072ae:	f043 0302 	orr.w	r3, r3, #2
 80072b2:	6313      	str	r3, [r2, #48]	; 0x30
 80072b4:	4b0e      	ldr	r3, [pc, #56]	; (80072f0 <HAL_TIM_MspPostInit+0x194>)
 80072b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072b8:	f003 0302 	and.w	r3, r3, #2
 80072bc:	60bb      	str	r3, [r7, #8]
 80072be:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80072c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80072c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80072c6:	2302      	movs	r3, #2
 80072c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072ca:	2300      	movs	r3, #0
 80072cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80072ce:	2300      	movs	r3, #0
 80072d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 80072d2:	2303      	movs	r3, #3
 80072d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80072d6:	f107 031c 	add.w	r3, r7, #28
 80072da:	4619      	mov	r1, r3
 80072dc:	4807      	ldr	r0, [pc, #28]	; (80072fc <HAL_TIM_MspPostInit+0x1a0>)
 80072de:	f003 f9c9 	bl	800a674 <HAL_GPIO_Init>
}
 80072e2:	bf00      	nop
 80072e4:	3730      	adds	r7, #48	; 0x30
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}
 80072ea:	bf00      	nop
 80072ec:	40010000 	.word	0x40010000
 80072f0:	40023800 	.word	0x40023800
 80072f4:	40021000 	.word	0x40021000
 80072f8:	40000400 	.word	0x40000400
 80072fc:	40020400 	.word	0x40020400
 8007300:	40000800 	.word	0x40000800
 8007304:	40020c00 	.word	0x40020c00
 8007308:	40014400 	.word	0x40014400
 800730c:	40014800 	.word	0x40014800

08007310 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b08a      	sub	sp, #40	; 0x28
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007318:	f107 0314 	add.w	r3, r7, #20
 800731c:	2200      	movs	r2, #0
 800731e:	601a      	str	r2, [r3, #0]
 8007320:	605a      	str	r2, [r3, #4]
 8007322:	609a      	str	r2, [r3, #8]
 8007324:	60da      	str	r2, [r3, #12]
 8007326:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a19      	ldr	r2, [pc, #100]	; (8007394 <HAL_UART_MspInit+0x84>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d12b      	bne.n	800738a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8007332:	2300      	movs	r3, #0
 8007334:	613b      	str	r3, [r7, #16]
 8007336:	4b18      	ldr	r3, [pc, #96]	; (8007398 <HAL_UART_MspInit+0x88>)
 8007338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800733a:	4a17      	ldr	r2, [pc, #92]	; (8007398 <HAL_UART_MspInit+0x88>)
 800733c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007340:	6413      	str	r3, [r2, #64]	; 0x40
 8007342:	4b15      	ldr	r3, [pc, #84]	; (8007398 <HAL_UART_MspInit+0x88>)
 8007344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800734a:	613b      	str	r3, [r7, #16]
 800734c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800734e:	2300      	movs	r3, #0
 8007350:	60fb      	str	r3, [r7, #12]
 8007352:	4b11      	ldr	r3, [pc, #68]	; (8007398 <HAL_UART_MspInit+0x88>)
 8007354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007356:	4a10      	ldr	r2, [pc, #64]	; (8007398 <HAL_UART_MspInit+0x88>)
 8007358:	f043 0308 	orr.w	r3, r3, #8
 800735c:	6313      	str	r3, [r2, #48]	; 0x30
 800735e:	4b0e      	ldr	r3, [pc, #56]	; (8007398 <HAL_UART_MspInit+0x88>)
 8007360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007362:	f003 0308 	and.w	r3, r3, #8
 8007366:	60fb      	str	r3, [r7, #12]
 8007368:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800736a:	2360      	movs	r3, #96	; 0x60
 800736c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800736e:	2302      	movs	r3, #2
 8007370:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007372:	2300      	movs	r3, #0
 8007374:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007376:	2303      	movs	r3, #3
 8007378:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800737a:	2307      	movs	r3, #7
 800737c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800737e:	f107 0314 	add.w	r3, r7, #20
 8007382:	4619      	mov	r1, r3
 8007384:	4805      	ldr	r0, [pc, #20]	; (800739c <HAL_UART_MspInit+0x8c>)
 8007386:	f003 f975 	bl	800a674 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800738a:	bf00      	nop
 800738c:	3728      	adds	r7, #40	; 0x28
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}
 8007392:	bf00      	nop
 8007394:	40004400 	.word	0x40004400
 8007398:	40023800 	.word	0x40023800
 800739c:	40020c00 	.word	0x40020c00

080073a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80073a0:	b480      	push	{r7}
 80073a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80073a4:	e7fe      	b.n	80073a4 <NMI_Handler+0x4>

080073a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80073a6:	b480      	push	{r7}
 80073a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80073aa:	e7fe      	b.n	80073aa <HardFault_Handler+0x4>

080073ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80073ac:	b480      	push	{r7}
 80073ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80073b0:	e7fe      	b.n	80073b0 <MemManage_Handler+0x4>

080073b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80073b2:	b480      	push	{r7}
 80073b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80073b6:	e7fe      	b.n	80073b6 <BusFault_Handler+0x4>

080073b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80073b8:	b480      	push	{r7}
 80073ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80073bc:	e7fe      	b.n	80073bc <UsageFault_Handler+0x4>

080073be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80073be:	b480      	push	{r7}
 80073c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80073c2:	bf00      	nop
 80073c4:	46bd      	mov	sp, r7
 80073c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ca:	4770      	bx	lr

080073cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80073cc:	b480      	push	{r7}
 80073ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80073d0:	bf00      	nop
 80073d2:	46bd      	mov	sp, r7
 80073d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d8:	4770      	bx	lr

080073da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80073da:	b480      	push	{r7}
 80073dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80073de:	bf00      	nop
 80073e0:	46bd      	mov	sp, r7
 80073e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e6:	4770      	bx	lr

080073e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80073ec:	f002 f84e 	bl	800948c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80073f0:	bf00      	nop
 80073f2:	bd80      	pop	{r7, pc}

080073f4 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80073f8:	4803      	ldr	r0, [pc, #12]	; (8007408 <TIM8_UP_TIM13_IRQHandler+0x14>)
 80073fa:	f007 fb1e 	bl	800ea3a <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 80073fe:	4803      	ldr	r0, [pc, #12]	; (800740c <TIM8_UP_TIM13_IRQHandler+0x18>)
 8007400:	f007 fb1b 	bl	800ea3a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8007404:	bf00      	nop
 8007406:	bd80      	pop	{r7, pc}
 8007408:	20043704 	.word	0x20043704
 800740c:	20043900 	.word	0x20043900

08007410 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8007414:	4802      	ldr	r0, [pc, #8]	; (8007420 <SDIO_IRQHandler+0x10>)
 8007416:	f005 fbb7 	bl	800cb88 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800741a:	bf00      	nop
 800741c:	bd80      	pop	{r7, pc}
 800741e:	bf00      	nop
 8007420:	20043a60 	.word	0x20043a60

08007424 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8007428:	4802      	ldr	r0, [pc, #8]	; (8007434 <TIM6_DAC_IRQHandler+0x10>)
 800742a:	f007 fb06 	bl	800ea3a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800742e:	bf00      	nop
 8007430:	bd80      	pop	{r7, pc}
 8007432:	bf00      	nop
 8007434:	200439e0 	.word	0x200439e0

08007438 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800743c:	4802      	ldr	r0, [pc, #8]	; (8007448 <TIM7_IRQHandler+0x10>)
 800743e:	f007 fafc 	bl	800ea3a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8007442:	bf00      	nop
 8007444:	bd80      	pop	{r7, pc}
 8007446:	bf00      	nop
 8007448:	20043b84 	.word	0x20043b84

0800744c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8007450:	4802      	ldr	r0, [pc, #8]	; (800745c <DMA2_Stream2_IRQHandler+0x10>)
 8007452:	f002 fe9b 	bl	800a18c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8007456:	bf00      	nop
 8007458:	bd80      	pop	{r7, pc}
 800745a:	bf00      	nop
 800745c:	20043b24 	.word	0x20043b24

08007460 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8007464:	4802      	ldr	r0, [pc, #8]	; (8007470 <DMA2_Stream3_IRQHandler+0x10>)
 8007466:	f002 fe91 	bl	800a18c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800746a:	bf00      	nop
 800746c:	bd80      	pop	{r7, pc}
 800746e:	bf00      	nop
 8007470:	2004364c 	.word	0x2004364c

08007474 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8007478:	4802      	ldr	r0, [pc, #8]	; (8007484 <DMA2_Stream6_IRQHandler+0x10>)
 800747a:	f002 fe87 	bl	800a18c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800747e:	bf00      	nop
 8007480:	bd80      	pop	{r7, pc}
 8007482:	bf00      	nop
 8007484:	20043980 	.word	0x20043980

08007488 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b086      	sub	sp, #24
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007490:	4a14      	ldr	r2, [pc, #80]	; (80074e4 <_sbrk+0x5c>)
 8007492:	4b15      	ldr	r3, [pc, #84]	; (80074e8 <_sbrk+0x60>)
 8007494:	1ad3      	subs	r3, r2, r3
 8007496:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800749c:	4b13      	ldr	r3, [pc, #76]	; (80074ec <_sbrk+0x64>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d102      	bne.n	80074aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80074a4:	4b11      	ldr	r3, [pc, #68]	; (80074ec <_sbrk+0x64>)
 80074a6:	4a12      	ldr	r2, [pc, #72]	; (80074f0 <_sbrk+0x68>)
 80074a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80074aa:	4b10      	ldr	r3, [pc, #64]	; (80074ec <_sbrk+0x64>)
 80074ac:	681a      	ldr	r2, [r3, #0]
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	4413      	add	r3, r2
 80074b2:	693a      	ldr	r2, [r7, #16]
 80074b4:	429a      	cmp	r2, r3
 80074b6:	d207      	bcs.n	80074c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80074b8:	f00d fd54 	bl	8014f64 <__errno>
 80074bc:	4602      	mov	r2, r0
 80074be:	230c      	movs	r3, #12
 80074c0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80074c2:	f04f 33ff 	mov.w	r3, #4294967295
 80074c6:	e009      	b.n	80074dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80074c8:	4b08      	ldr	r3, [pc, #32]	; (80074ec <_sbrk+0x64>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80074ce:	4b07      	ldr	r3, [pc, #28]	; (80074ec <_sbrk+0x64>)
 80074d0:	681a      	ldr	r2, [r3, #0]
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	4413      	add	r3, r2
 80074d6:	4a05      	ldr	r2, [pc, #20]	; (80074ec <_sbrk+0x64>)
 80074d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80074da:	68fb      	ldr	r3, [r7, #12]
}
 80074dc:	4618      	mov	r0, r3
 80074de:	3718      	adds	r7, #24
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}
 80074e4:	20050000 	.word	0x20050000
 80074e8:	00000800 	.word	0x00000800
 80074ec:	200002b8 	.word	0x200002b8
 80074f0:	20045cd8 	.word	0x20045cd8

080074f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80074f4:	b480      	push	{r7}
 80074f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80074f8:	4b08      	ldr	r3, [pc, #32]	; (800751c <SystemInit+0x28>)
 80074fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074fe:	4a07      	ldr	r2, [pc, #28]	; (800751c <SystemInit+0x28>)
 8007500:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007504:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007508:	4b04      	ldr	r3, [pc, #16]	; (800751c <SystemInit+0x28>)
 800750a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800750e:	609a      	str	r2, [r3, #8]
#endif
}
 8007510:	bf00      	nop
 8007512:	46bd      	mov	sp, r7
 8007514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007518:	4770      	bx	lr
 800751a:	bf00      	nop
 800751c:	e000ed00 	.word	0xe000ed00

08007520 <cppInit>:
		}
	}
}

void cppInit(void)
{
 8007520:	b598      	push	{r3, r4, r7, lr}
 8007522:	af00      	add	r7, sp, #0
	lcd_init();
 8007524:	f7f9 fd78 	bl	8001018 <lcd_init>

	//---------- Buttery Check ----------//
	power_sensor.init();
 8007528:	483b      	ldr	r0, [pc, #236]	; (8007618 <cppInit+0xf8>)
 800752a:	f7fd fe53 	bl	80051d4 <_ZN11PowerSensor4initEv>
	HAL_Delay(100);
 800752e:	2064      	movs	r0, #100	; 0x64
 8007530:	f001 ffcc 	bl	80094cc <HAL_Delay>
	power_sensor.updateValues();
 8007534:	4838      	ldr	r0, [pc, #224]	; (8007618 <cppInit+0xf8>)
 8007536:	f7fd fe5b 	bl	80051f0 <_ZN11PowerSensor12updateValuesEv>

	lcd_clear();
 800753a:	f7f9 fdb1 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 800753e:	2100      	movs	r1, #0
 8007540:	2000      	movs	r0, #0
 8007542:	f7f9 fdbd 	bl	80010c0 <lcd_locate>
	lcd_printf("Voltage");
 8007546:	4835      	ldr	r0, [pc, #212]	; (800761c <cppInit+0xfc>)
 8007548:	f7f9 fde4 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 800754c:	2101      	movs	r1, #1
 800754e:	2000      	movs	r0, #0
 8007550:	f7f9 fdb6 	bl	80010c0 <lcd_locate>
	lcd_printf("%f", power_sensor.getButteryVoltage());
 8007554:	4830      	ldr	r0, [pc, #192]	; (8007618 <cppInit+0xf8>)
 8007556:	f7fd fe75 	bl	8005244 <_ZN11PowerSensor17getButteryVoltageEv>
 800755a:	ee10 3a10 	vmov	r3, s0
 800755e:	4618      	mov	r0, r3
 8007560:	f7f9 f80a 	bl	8000578 <__aeabi_f2d>
 8007564:	4603      	mov	r3, r0
 8007566:	460c      	mov	r4, r1
 8007568:	461a      	mov	r2, r3
 800756a:	4623      	mov	r3, r4
 800756c:	482c      	ldr	r0, [pc, #176]	; (8007620 <cppInit+0x100>)
 800756e:	f7f9 fdd1 	bl	8001114 <lcd_printf>
	HAL_Delay(1000);
 8007572:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007576:	f001 ffa9 	bl	80094cc <HAL_Delay>

	//if(power_sensor.butteryCheck() == true) batteryLowMode(); //if battery low, informed

	// -----------initialize-------//
	if(logger.sdCardInit() == true){ //sd mount successfull
 800757a:	482a      	ldr	r0, [pc, #168]	; (8007624 <cppInit+0x104>)
 800757c:	f7fd f868 	bl	8004650 <_ZN6Logger10sdCardInitEv>
 8007580:	4603      	mov	r3, r0
 8007582:	2b00      	cmp	r3, #0
 8007584:	d007      	beq.n	8007596 <cppInit+0x76>
		led.fullColor('G');
 8007586:	2147      	movs	r1, #71	; 0x47
 8007588:	4827      	ldr	r0, [pc, #156]	; (8007628 <cppInit+0x108>)
 800758a:	f7fa fdf3 	bl	8002174 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 800758e:	2064      	movs	r0, #100	; 0x64
 8007590:	f001 ff9c 	bl	80094cc <HAL_Delay>
 8007594:	e006      	b.n	80075a4 <cppInit+0x84>
	}
	else{ //sd mount fali
		led.fullColor('R');
 8007596:	2152      	movs	r1, #82	; 0x52
 8007598:	4823      	ldr	r0, [pc, #140]	; (8007628 <cppInit+0x108>)
 800759a:	f7fa fdeb 	bl	8002174 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 800759e:	2064      	movs	r0, #100	; 0x64
 80075a0:	f001 ff94 	bl	80094cc <HAL_Delay>
	}

	line_sensor.ADCStart();
 80075a4:	4821      	ldr	r0, [pc, #132]	; (800762c <cppInit+0x10c>)
 80075a6:	f7fa ff41 	bl	800242c <_ZN10LineSensor8ADCStartEv>
	motor.init();
 80075aa:	4821      	ldr	r0, [pc, #132]	; (8007630 <cppInit+0x110>)
 80075ac:	f7fd fae6 	bl	8004b7c <_ZN5Motor4initEv>
	encoder.init();
 80075b0:	4820      	ldr	r0, [pc, #128]	; (8007634 <cppInit+0x114>)
 80075b2:	f7f9 ff37 	bl	8001424 <_ZN7Encoder4initEv>
	imu.init();
 80075b6:	4820      	ldr	r0, [pc, #128]	; (8007638 <cppInit+0x118>)
 80075b8:	f7fa fb9a 	bl	8001cf0 <_ZN3IMU4initEv>
	line_trace.init();
 80075bc:	481f      	ldr	r0, [pc, #124]	; (800763c <cppInit+0x11c>)
 80075be:	f7fc f9d9 	bl	8003974 <_ZN9LineTrace4initEv>

	line_sensor.calibration();
 80075c2:	481a      	ldr	r0, [pc, #104]	; (800762c <cppInit+0x10c>)
 80075c4:	f7fb f872 	bl	80026ac <_ZN10LineSensor11calibrationEv>
	HAL_Delay(1000);
 80075c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80075cc:	f001 ff7e 	bl	80094cc <HAL_Delay>

	led.fullColor('M');
 80075d0:	214d      	movs	r1, #77	; 0x4d
 80075d2:	4815      	ldr	r0, [pc, #84]	; (8007628 <cppInit+0x108>)
 80075d4:	f7fa fdce 	bl	8002174 <_ZN3LED9fullColorEc>
	imu.calibration();
 80075d8:	4817      	ldr	r0, [pc, #92]	; (8007638 <cppInit+0x118>)
 80075da:	f7fa fc53 	bl	8001e84 <_ZN3IMU11calibrationEv>

	//line_trace.setGain(0.0005, 0.000003, 0);
	//line_trace.setGain(0.0005, 0.000002, 0);

	//velocity_ctrl.setVelocityGain(1.5, 20, 0);
	velocity_ctrl.setVelocityGain(1.8295, 16.1174, 0.025243);
 80075de:	ed9f 1a18 	vldr	s2, [pc, #96]	; 8007640 <cppInit+0x120>
 80075e2:	eddf 0a18 	vldr	s1, [pc, #96]	; 8007644 <cppInit+0x124>
 80075e6:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8007648 <cppInit+0x128>
 80075ea:	4818      	ldr	r0, [pc, #96]	; (800764c <cppInit+0x12c>)
 80075ec:	f7fe f9cc 	bl	8005988 <_ZN12VelocityCtrl15setVelocityGainEfff>
	//velocity_ctrl.setVelocityGain(1.9842, 22.9078, 0.02079);
	//velocity_ctrl.setOmegaGain(0.5, 5, 0);
	//velocity_ctrl.setOmegaGain(0.05, 7, 0);
	//velocity_ctrl.setOmegaGain(0.069793, 0.86816, 0.0014027);
	velocity_ctrl.setOmegaGain(0.060, 0.86816, 0.000);
 80075f0:	ed9f 1a17 	vldr	s2, [pc, #92]	; 8007650 <cppInit+0x130>
 80075f4:	eddf 0a17 	vldr	s1, [pc, #92]	; 8007654 <cppInit+0x134>
 80075f8:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8007658 <cppInit+0x138>
 80075fc:	4813      	ldr	r0, [pc, #76]	; (800764c <cppInit+0x12c>)
 80075fe:	f7fe f9dc 	bl	80059ba <_ZN12VelocityCtrl12setOmegaGainEfff>
	//velocity_ctrl.setOmegaGain(0.12175, 1.0604, 0.002614);
	//velocity_ctrl.setOmegaGain(0.0, 0, 0);


	//encoder.clearDistance();
	odometry.clearPotition();
 8007602:	4816      	ldr	r0, [pc, #88]	; (800765c <cppInit+0x13c>)
 8007604:	f7fd fcf0 	bl	8004fe8 <_ZN8Odometry13clearPotitionEv>

	path_following.init();
 8007608:	4815      	ldr	r0, [pc, #84]	; (8007660 <cppInit+0x140>)
 800760a:	f7fd fd87 	bl	800511c <_ZN13PathFollowing4initEv>

	esc.init();
 800760e:	4815      	ldr	r0, [pc, #84]	; (8007664 <cppInit+0x144>)
 8007610:	f7f9 fdec 	bl	80011ec <_ZN3ESC4initEv>

}
 8007614:	bf00      	nop
 8007616:	bd98      	pop	{r3, r4, r7, pc}
 8007618:	200005cc 	.word	0x200005cc
 800761c:	080197c8 	.word	0x080197c8
 8007620:	080197d0 	.word	0x080197d0
 8007624:	200005ec 	.word	0x200005ec
 8007628:	200005c8 	.word	0x200005c8
 800762c:	200002bc 	.word	0x200002bc
 8007630:	200005c4 	.word	0x200005c4
 8007634:	2001bb74 	.word	0x2001bb74
 8007638:	200005d8 	.word	0x200005d8
 800763c:	2001bc14 	.word	0x2001bc14
 8007640:	3cceca68 	.word	0x3cceca68
 8007644:	4180f06f 	.word	0x4180f06f
 8007648:	3fea2d0e 	.word	0x3fea2d0e
 800764c:	2001bb94 	.word	0x2001bb94
 8007650:	00000000 	.word	0x00000000
 8007654:	3f5e3fbc 	.word	0x3f5e3fbc
 8007658:	3d75c28f 	.word	0x3d75c28f
 800765c:	2001bbd0 	.word	0x2001bbd0
 8007660:	20029b60 	.word	0x20029b60
 8007664:	2001bc10 	.word	0x2001bc10

08007668 <cppFlip1ms>:

void cppFlip1ms(void)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	af00      	add	r7, sp, #0
	line_sensor.updateSensorValues();
 800766c:	4819      	ldr	r0, [pc, #100]	; (80076d4 <cppFlip1ms+0x6c>)
 800766e:	f7fa ff3b 	bl	80024e8 <_ZN10LineSensor18updateSensorValuesEv>
	imu.updateValues();
 8007672:	4819      	ldr	r0, [pc, #100]	; (80076d8 <cppFlip1ms+0x70>)
 8007674:	f7fa fb64 	bl	8001d40 <_ZN3IMU12updateValuesEv>
	encoder.update();
 8007678:	4818      	ldr	r0, [pc, #96]	; (80076dc <cppFlip1ms+0x74>)
 800767a:	f7f9 fef5 	bl	8001468 <_ZN7Encoder6updateEv>
	line_trace.flip();
 800767e:	4818      	ldr	r0, [pc, #96]	; (80076e0 <cppFlip1ms+0x78>)
 8007680:	f7fc fbae 	bl	8003de0 <_ZN9LineTrace4flipEv>
	velocity_ctrl.flip();
 8007684:	4817      	ldr	r0, [pc, #92]	; (80076e4 <cppFlip1ms+0x7c>)
 8007686:	f7fe f9b1 	bl	80059ec <_ZN12VelocityCtrl4flipEv>
	odometry.flip();
 800768a:	4817      	ldr	r0, [pc, #92]	; (80076e8 <cppFlip1ms+0x80>)
 800768c:	f7fd fc90 	bl	8004fb0 <_ZN8Odometry4flipEv>
	side_sensor.updateStatus();
 8007690:	4816      	ldr	r0, [pc, #88]	; (80076ec <cppFlip1ms+0x84>)
 8007692:	f7fd fe4d 	bl	8005330 <_ZN10SideSensor12updateStatusEv>

	motor.motorCtrl();
 8007696:	4816      	ldr	r0, [pc, #88]	; (80076f0 <cppFlip1ms+0x88>)
 8007698:	f7fd fa82 	bl	8004ba0 <_ZN5Motor9motorCtrlEv>

	//logger.storeLog(velocity_ctrl.getCurrentVelocity());
	//logger.storeLog(imu.getOmega());

	static uint16_t twice_cnt;
	twice_cnt++;
 800769c:	4b15      	ldr	r3, [pc, #84]	; (80076f4 <cppFlip1ms+0x8c>)
 800769e:	881b      	ldrh	r3, [r3, #0]
 80076a0:	3301      	adds	r3, #1
 80076a2:	b29a      	uxth	r2, r3
 80076a4:	4b13      	ldr	r3, [pc, #76]	; (80076f4 <cppFlip1ms+0x8c>)
 80076a6:	801a      	strh	r2, [r3, #0]
	if(twice_cnt >= 2){ //2ms
 80076a8:	4b12      	ldr	r3, [pc, #72]	; (80076f4 <cppFlip1ms+0x8c>)
 80076aa:	881b      	ldrh	r3, [r3, #0]
 80076ac:	2b01      	cmp	r3, #1
 80076ae:	d90c      	bls.n	80076ca <cppFlip1ms+0x62>
		sys_ident.inOutputStore(imu.getOmega());
 80076b0:	4809      	ldr	r0, [pc, #36]	; (80076d8 <cppFlip1ms+0x70>)
 80076b2:	f7fa fb9d 	bl	8001df0 <_ZN3IMU8getOmegaEv>
 80076b6:	eef0 7a40 	vmov.f32	s15, s0
 80076ba:	eeb0 0a67 	vmov.f32	s0, s15
 80076be:	480e      	ldr	r0, [pc, #56]	; (80076f8 <cppFlip1ms+0x90>)
 80076c0:	f7fd ff98 	bl	80055f4 <_ZN20SystemIdentification13inOutputStoreEf>
		twice_cnt = 0;
 80076c4:	4b0b      	ldr	r3, [pc, #44]	; (80076f4 <cppFlip1ms+0x8c>)
 80076c6:	2200      	movs	r2, #0
 80076c8:	801a      	strh	r2, [r3, #0]

	//mon_cnt = twice_cnt;
	/*
	*/

	encoder.clear();
 80076ca:	4804      	ldr	r0, [pc, #16]	; (80076dc <cppFlip1ms+0x74>)
 80076cc:	f7f9 ffb6 	bl	800163c <_ZN7Encoder5clearEv>

	//Buttery Check
	//power_sensor.updateValues();
	//if(power_sensor.butteryCheck() == true) led.fullColor('R');

}
 80076d0:	bf00      	nop
 80076d2:	bd80      	pop	{r7, pc}
 80076d4:	200002bc 	.word	0x200002bc
 80076d8:	200005d8 	.word	0x200005d8
 80076dc:	2001bb74 	.word	0x2001bb74
 80076e0:	2001bc14 	.word	0x2001bc14
 80076e4:	2001bb94 	.word	0x2001bb94
 80076e8:	2001bbd0 	.word	0x2001bbd0
 80076ec:	200005b4 	.word	0x200005b4
 80076f0:	200005c4 	.word	0x200005c4
 80076f4:	20041288 	.word	0x20041288
 80076f8:	20029950 	.word	0x20029950

080076fc <cppFlip100ns>:

void cppFlip100ns(void)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	af00      	add	r7, sp, #0
	line_sensor.storeSensorValues();
 8007700:	4802      	ldr	r0, [pc, #8]	; (800770c <cppFlip100ns+0x10>)
 8007702:	f7fa fea3 	bl	800244c <_ZN10LineSensor17storeSensorValuesEv>
}
 8007706:	bf00      	nop
 8007708:	bd80      	pop	{r7, pc}
 800770a:	bf00      	nop
 800770c:	200002bc 	.word	0x200002bc

08007710 <cppFlip10ms>:

void cppFlip10ms(void)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	af00      	add	r7, sp, #0
	static uint16_t twice_cnt;
	twice_cnt++;
 8007714:	4b08      	ldr	r3, [pc, #32]	; (8007738 <cppFlip10ms+0x28>)
 8007716:	881b      	ldrh	r3, [r3, #0]
 8007718:	3301      	adds	r3, #1
 800771a:	b29a      	uxth	r2, r3
 800771c:	4b06      	ldr	r3, [pc, #24]	; (8007738 <cppFlip10ms+0x28>)
 800771e:	801a      	strh	r2, [r3, #0]
	if(twice_cnt >= 7){ //70ms
 8007720:	4b05      	ldr	r3, [pc, #20]	; (8007738 <cppFlip10ms+0x28>)
 8007722:	881b      	ldrh	r3, [r3, #0]
 8007724:	2b06      	cmp	r3, #6
 8007726:	d905      	bls.n	8007734 <cppFlip10ms+0x24>
		sys_ident.updateMsig();
 8007728:	4804      	ldr	r0, [pc, #16]	; (800773c <cppFlip10ms+0x2c>)
 800772a:	f7fd ff83 	bl	8005634 <_ZN20SystemIdentification10updateMsigEv>
		twice_cnt = 0;
 800772e:	4b02      	ldr	r3, [pc, #8]	; (8007738 <cppFlip10ms+0x28>)
 8007730:	2200      	movs	r2, #0
 8007732:	801a      	strh	r2, [r3, #0]
		path_following.flip();
	}
	velocity_ctrl.setVelocity(path_following.getV(), path_following.getW());
	*/

}
 8007734:	bf00      	nop
 8007736:	bd80      	pop	{r7, pc}
 8007738:	2004128a 	.word	0x2004128a
 800773c:	20029950 	.word	0x20029950

08007740 <cppLoop>:
{
	//side_sensor.updateStatus(gpio_pin);
}

void cppLoop(void)
{
 8007740:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007742:	b085      	sub	sp, #20
 8007744:	af02      	add	r7, sp, #8
	static int16_t selector;
	static int16_t selector_acc, selector_acc2;
	static int16_t selector_vel, selector_vel2;

	static float adj_kp = line_trace.getKp();
 8007746:	4baf      	ldr	r3, [pc, #700]	; (8007a04 <cppLoop+0x2c4>)
 8007748:	781b      	ldrb	r3, [r3, #0]
 800774a:	f3bf 8f5b 	dmb	ish
 800774e:	b2db      	uxtb	r3, r3
 8007750:	f003 0301 	and.w	r3, r3, #1
 8007754:	2b00      	cmp	r3, #0
 8007756:	bf0c      	ite	eq
 8007758:	2301      	moveq	r3, #1
 800775a:	2300      	movne	r3, #0
 800775c:	b2db      	uxtb	r3, r3
 800775e:	2b00      	cmp	r3, #0
 8007760:	d015      	beq.n	800778e <cppLoop+0x4e>
 8007762:	48a8      	ldr	r0, [pc, #672]	; (8007a04 <cppLoop+0x2c4>)
 8007764:	f00c fb97 	bl	8013e96 <__cxa_guard_acquire>
 8007768:	4603      	mov	r3, r0
 800776a:	2b00      	cmp	r3, #0
 800776c:	bf14      	ite	ne
 800776e:	2301      	movne	r3, #1
 8007770:	2300      	moveq	r3, #0
 8007772:	b2db      	uxtb	r3, r3
 8007774:	2b00      	cmp	r3, #0
 8007776:	d00a      	beq.n	800778e <cppLoop+0x4e>
 8007778:	48a3      	ldr	r0, [pc, #652]	; (8007a08 <cppLoop+0x2c8>)
 800777a:	f7fc f9d8 	bl	8003b2e <_ZN9LineTrace5getKpEv>
 800777e:	eef0 7a40 	vmov.f32	s15, s0
 8007782:	4ba2      	ldr	r3, [pc, #648]	; (8007a0c <cppLoop+0x2cc>)
 8007784:	edc3 7a00 	vstr	s15, [r3]
 8007788:	489e      	ldr	r0, [pc, #632]	; (8007a04 <cppLoop+0x2c4>)
 800778a:	f00c fb90 	bl	8013eae <__cxa_guard_release>
	static float adj_ki= line_trace.getKi();
 800778e:	4ba0      	ldr	r3, [pc, #640]	; (8007a10 <cppLoop+0x2d0>)
 8007790:	781b      	ldrb	r3, [r3, #0]
 8007792:	f3bf 8f5b 	dmb	ish
 8007796:	b2db      	uxtb	r3, r3
 8007798:	f003 0301 	and.w	r3, r3, #1
 800779c:	2b00      	cmp	r3, #0
 800779e:	bf0c      	ite	eq
 80077a0:	2301      	moveq	r3, #1
 80077a2:	2300      	movne	r3, #0
 80077a4:	b2db      	uxtb	r3, r3
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d015      	beq.n	80077d6 <cppLoop+0x96>
 80077aa:	4899      	ldr	r0, [pc, #612]	; (8007a10 <cppLoop+0x2d0>)
 80077ac:	f00c fb73 	bl	8013e96 <__cxa_guard_acquire>
 80077b0:	4603      	mov	r3, r0
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	bf14      	ite	ne
 80077b6:	2301      	movne	r3, #1
 80077b8:	2300      	moveq	r3, #0
 80077ba:	b2db      	uxtb	r3, r3
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d00a      	beq.n	80077d6 <cppLoop+0x96>
 80077c0:	4891      	ldr	r0, [pc, #580]	; (8007a08 <cppLoop+0x2c8>)
 80077c2:	f7fc f9c3 	bl	8003b4c <_ZN9LineTrace5getKiEv>
 80077c6:	eef0 7a40 	vmov.f32	s15, s0
 80077ca:	4b92      	ldr	r3, [pc, #584]	; (8007a14 <cppLoop+0x2d4>)
 80077cc:	edc3 7a00 	vstr	s15, [r3]
 80077d0:	488f      	ldr	r0, [pc, #572]	; (8007a10 <cppLoop+0x2d0>)
 80077d2:	f00c fb6c 	bl	8013eae <__cxa_guard_release>
	static float adj_kd = line_trace.getKd();
 80077d6:	4b90      	ldr	r3, [pc, #576]	; (8007a18 <cppLoop+0x2d8>)
 80077d8:	781b      	ldrb	r3, [r3, #0]
 80077da:	f3bf 8f5b 	dmb	ish
 80077de:	b2db      	uxtb	r3, r3
 80077e0:	f003 0301 	and.w	r3, r3, #1
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	bf0c      	ite	eq
 80077e8:	2301      	moveq	r3, #1
 80077ea:	2300      	movne	r3, #0
 80077ec:	b2db      	uxtb	r3, r3
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d015      	beq.n	800781e <cppLoop+0xde>
 80077f2:	4889      	ldr	r0, [pc, #548]	; (8007a18 <cppLoop+0x2d8>)
 80077f4:	f00c fb4f 	bl	8013e96 <__cxa_guard_acquire>
 80077f8:	4603      	mov	r3, r0
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	bf14      	ite	ne
 80077fe:	2301      	movne	r3, #1
 8007800:	2300      	moveq	r3, #0
 8007802:	b2db      	uxtb	r3, r3
 8007804:	2b00      	cmp	r3, #0
 8007806:	d00a      	beq.n	800781e <cppLoop+0xde>
 8007808:	487f      	ldr	r0, [pc, #508]	; (8007a08 <cppLoop+0x2c8>)
 800780a:	f7fc f9ae 	bl	8003b6a <_ZN9LineTrace5getKdEv>
 800780e:	eef0 7a40 	vmov.f32	s15, s0
 8007812:	4b82      	ldr	r3, [pc, #520]	; (8007a1c <cppLoop+0x2dc>)
 8007814:	edc3 7a00 	vstr	s15, [r3]
 8007818:	487f      	ldr	r0, [pc, #508]	; (8007a18 <cppLoop+0x2d8>)
 800781a:	f00c fb48 	bl	8013eae <__cxa_guard_release>

	static float adj_velocity = line_trace.getTargetVelocity();
 800781e:	4b80      	ldr	r3, [pc, #512]	; (8007a20 <cppLoop+0x2e0>)
 8007820:	781b      	ldrb	r3, [r3, #0]
 8007822:	f3bf 8f5b 	dmb	ish
 8007826:	b2db      	uxtb	r3, r3
 8007828:	f003 0301 	and.w	r3, r3, #1
 800782c:	2b00      	cmp	r3, #0
 800782e:	bf0c      	ite	eq
 8007830:	2301      	moveq	r3, #1
 8007832:	2300      	movne	r3, #0
 8007834:	b2db      	uxtb	r3, r3
 8007836:	2b00      	cmp	r3, #0
 8007838:	d015      	beq.n	8007866 <cppLoop+0x126>
 800783a:	4879      	ldr	r0, [pc, #484]	; (8007a20 <cppLoop+0x2e0>)
 800783c:	f00c fb2b 	bl	8013e96 <__cxa_guard_acquire>
 8007840:	4603      	mov	r3, r0
 8007842:	2b00      	cmp	r3, #0
 8007844:	bf14      	ite	ne
 8007846:	2301      	movne	r3, #1
 8007848:	2300      	moveq	r3, #0
 800784a:	b2db      	uxtb	r3, r3
 800784c:	2b00      	cmp	r3, #0
 800784e:	d00a      	beq.n	8007866 <cppLoop+0x126>
 8007850:	486d      	ldr	r0, [pc, #436]	; (8007a08 <cppLoop+0x2c8>)
 8007852:	f7fc f9f8 	bl	8003c46 <_ZN9LineTrace17getTargetVelocityEv>
 8007856:	eef0 7a40 	vmov.f32	s15, s0
 800785a:	4b72      	ldr	r3, [pc, #456]	; (8007a24 <cppLoop+0x2e4>)
 800785c:	edc3 7a00 	vstr	s15, [r3]
 8007860:	486f      	ldr	r0, [pc, #444]	; (8007a20 <cppLoop+0x2e0>)
 8007862:	f00c fb24 	bl	8013eae <__cxa_guard_release>
	static float adj_max_velocity = line_trace.getMaxVelocity();
 8007866:	4b70      	ldr	r3, [pc, #448]	; (8007a28 <cppLoop+0x2e8>)
 8007868:	781b      	ldrb	r3, [r3, #0]
 800786a:	f3bf 8f5b 	dmb	ish
 800786e:	b2db      	uxtb	r3, r3
 8007870:	f003 0301 	and.w	r3, r3, #1
 8007874:	2b00      	cmp	r3, #0
 8007876:	bf0c      	ite	eq
 8007878:	2301      	moveq	r3, #1
 800787a:	2300      	movne	r3, #0
 800787c:	b2db      	uxtb	r3, r3
 800787e:	2b00      	cmp	r3, #0
 8007880:	d015      	beq.n	80078ae <cppLoop+0x16e>
 8007882:	4869      	ldr	r0, [pc, #420]	; (8007a28 <cppLoop+0x2e8>)
 8007884:	f00c fb07 	bl	8013e96 <__cxa_guard_acquire>
 8007888:	4603      	mov	r3, r0
 800788a:	2b00      	cmp	r3, #0
 800788c:	bf14      	ite	ne
 800788e:	2301      	movne	r3, #1
 8007890:	2300      	moveq	r3, #0
 8007892:	b2db      	uxtb	r3, r3
 8007894:	2b00      	cmp	r3, #0
 8007896:	d00a      	beq.n	80078ae <cppLoop+0x16e>
 8007898:	485b      	ldr	r0, [pc, #364]	; (8007a08 <cppLoop+0x2c8>)
 800789a:	f7fc f9e4 	bl	8003c66 <_ZN9LineTrace14getMaxVelocityEv>
 800789e:	eef0 7a40 	vmov.f32	s15, s0
 80078a2:	4b62      	ldr	r3, [pc, #392]	; (8007a2c <cppLoop+0x2ec>)
 80078a4:	edc3 7a00 	vstr	s15, [r3]
 80078a8:	485f      	ldr	r0, [pc, #380]	; (8007a28 <cppLoop+0x2e8>)
 80078aa:	f00c fb00 	bl	8013eae <__cxa_guard_release>
	static float adj_max_velocity2 = line_trace.getMaxVelocity2();
 80078ae:	4b60      	ldr	r3, [pc, #384]	; (8007a30 <cppLoop+0x2f0>)
 80078b0:	781b      	ldrb	r3, [r3, #0]
 80078b2:	f3bf 8f5b 	dmb	ish
 80078b6:	b2db      	uxtb	r3, r3
 80078b8:	f003 0301 	and.w	r3, r3, #1
 80078bc:	2b00      	cmp	r3, #0
 80078be:	bf0c      	ite	eq
 80078c0:	2301      	moveq	r3, #1
 80078c2:	2300      	movne	r3, #0
 80078c4:	b2db      	uxtb	r3, r3
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d015      	beq.n	80078f6 <cppLoop+0x1b6>
 80078ca:	4859      	ldr	r0, [pc, #356]	; (8007a30 <cppLoop+0x2f0>)
 80078cc:	f00c fae3 	bl	8013e96 <__cxa_guard_acquire>
 80078d0:	4603      	mov	r3, r0
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	bf14      	ite	ne
 80078d6:	2301      	movne	r3, #1
 80078d8:	2300      	moveq	r3, #0
 80078da:	b2db      	uxtb	r3, r3
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d00a      	beq.n	80078f6 <cppLoop+0x1b6>
 80078e0:	4849      	ldr	r0, [pc, #292]	; (8007a08 <cppLoop+0x2c8>)
 80078e2:	f7fc f9d0 	bl	8003c86 <_ZN9LineTrace15getMaxVelocity2Ev>
 80078e6:	eef0 7a40 	vmov.f32	s15, s0
 80078ea:	4b52      	ldr	r3, [pc, #328]	; (8007a34 <cppLoop+0x2f4>)
 80078ec:	edc3 7a00 	vstr	s15, [r3]
 80078f0:	484f      	ldr	r0, [pc, #316]	; (8007a30 <cppLoop+0x2f0>)
 80078f2:	f00c fadc 	bl	8013eae <__cxa_guard_release>
	static float adj_min_velocity = line_trace.getMinVelocity();
 80078f6:	4b50      	ldr	r3, [pc, #320]	; (8007a38 <cppLoop+0x2f8>)
 80078f8:	781b      	ldrb	r3, [r3, #0]
 80078fa:	f3bf 8f5b 	dmb	ish
 80078fe:	b2db      	uxtb	r3, r3
 8007900:	f003 0301 	and.w	r3, r3, #1
 8007904:	2b00      	cmp	r3, #0
 8007906:	bf0c      	ite	eq
 8007908:	2301      	moveq	r3, #1
 800790a:	2300      	movne	r3, #0
 800790c:	b2db      	uxtb	r3, r3
 800790e:	2b00      	cmp	r3, #0
 8007910:	d015      	beq.n	800793e <cppLoop+0x1fe>
 8007912:	4849      	ldr	r0, [pc, #292]	; (8007a38 <cppLoop+0x2f8>)
 8007914:	f00c fabf 	bl	8013e96 <__cxa_guard_acquire>
 8007918:	4603      	mov	r3, r0
 800791a:	2b00      	cmp	r3, #0
 800791c:	bf14      	ite	ne
 800791e:	2301      	movne	r3, #1
 8007920:	2300      	moveq	r3, #0
 8007922:	b2db      	uxtb	r3, r3
 8007924:	2b00      	cmp	r3, #0
 8007926:	d00a      	beq.n	800793e <cppLoop+0x1fe>
 8007928:	4837      	ldr	r0, [pc, #220]	; (8007a08 <cppLoop+0x2c8>)
 800792a:	f7fc f9bc 	bl	8003ca6 <_ZN9LineTrace14getMinVelocityEv>
 800792e:	eef0 7a40 	vmov.f32	s15, s0
 8007932:	4b42      	ldr	r3, [pc, #264]	; (8007a3c <cppLoop+0x2fc>)
 8007934:	edc3 7a00 	vstr	s15, [r3]
 8007938:	483f      	ldr	r0, [pc, #252]	; (8007a38 <cppLoop+0x2f8>)
 800793a:	f00c fab8 	bl	8013eae <__cxa_guard_release>
	static float adj_min_velocity2 = line_trace.getMinVelocity2();
 800793e:	4b40      	ldr	r3, [pc, #256]	; (8007a40 <cppLoop+0x300>)
 8007940:	781b      	ldrb	r3, [r3, #0]
 8007942:	f3bf 8f5b 	dmb	ish
 8007946:	b2db      	uxtb	r3, r3
 8007948:	f003 0301 	and.w	r3, r3, #1
 800794c:	2b00      	cmp	r3, #0
 800794e:	bf0c      	ite	eq
 8007950:	2301      	moveq	r3, #1
 8007952:	2300      	movne	r3, #0
 8007954:	b2db      	uxtb	r3, r3
 8007956:	2b00      	cmp	r3, #0
 8007958:	d015      	beq.n	8007986 <cppLoop+0x246>
 800795a:	4839      	ldr	r0, [pc, #228]	; (8007a40 <cppLoop+0x300>)
 800795c:	f00c fa9b 	bl	8013e96 <__cxa_guard_acquire>
 8007960:	4603      	mov	r3, r0
 8007962:	2b00      	cmp	r3, #0
 8007964:	bf14      	ite	ne
 8007966:	2301      	movne	r3, #1
 8007968:	2300      	moveq	r3, #0
 800796a:	b2db      	uxtb	r3, r3
 800796c:	2b00      	cmp	r3, #0
 800796e:	d00a      	beq.n	8007986 <cppLoop+0x246>
 8007970:	4825      	ldr	r0, [pc, #148]	; (8007a08 <cppLoop+0x2c8>)
 8007972:	f7fc f9a8 	bl	8003cc6 <_ZN9LineTrace15getMinVelocity2Ev>
 8007976:	eef0 7a40 	vmov.f32	s15, s0
 800797a:	4b32      	ldr	r3, [pc, #200]	; (8007a44 <cppLoop+0x304>)
 800797c:	edc3 7a00 	vstr	s15, [r3]
 8007980:	482f      	ldr	r0, [pc, #188]	; (8007a40 <cppLoop+0x300>)
 8007982:	f00c fa94 	bl	8013eae <__cxa_guard_release>

	static float adj_acc = line_trace.getMaxAcc();
 8007986:	4b30      	ldr	r3, [pc, #192]	; (8007a48 <cppLoop+0x308>)
 8007988:	781b      	ldrb	r3, [r3, #0]
 800798a:	f3bf 8f5b 	dmb	ish
 800798e:	b2db      	uxtb	r3, r3
 8007990:	f003 0301 	and.w	r3, r3, #1
 8007994:	2b00      	cmp	r3, #0
 8007996:	bf0c      	ite	eq
 8007998:	2301      	moveq	r3, #1
 800799a:	2300      	movne	r3, #0
 800799c:	b2db      	uxtb	r3, r3
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d015      	beq.n	80079ce <cppLoop+0x28e>
 80079a2:	4829      	ldr	r0, [pc, #164]	; (8007a48 <cppLoop+0x308>)
 80079a4:	f00c fa77 	bl	8013e96 <__cxa_guard_acquire>
 80079a8:	4603      	mov	r3, r0
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	bf14      	ite	ne
 80079ae:	2301      	movne	r3, #1
 80079b0:	2300      	moveq	r3, #0
 80079b2:	b2db      	uxtb	r3, r3
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d00a      	beq.n	80079ce <cppLoop+0x28e>
 80079b8:	4813      	ldr	r0, [pc, #76]	; (8007a08 <cppLoop+0x2c8>)
 80079ba:	f7fc f9c8 	bl	8003d4e <_ZN9LineTrace9getMaxAccEv>
 80079be:	eef0 7a40 	vmov.f32	s15, s0
 80079c2:	4b22      	ldr	r3, [pc, #136]	; (8007a4c <cppLoop+0x30c>)
 80079c4:	edc3 7a00 	vstr	s15, [r3]
 80079c8:	481f      	ldr	r0, [pc, #124]	; (8007a48 <cppLoop+0x308>)
 80079ca:	f00c fa70 	bl	8013eae <__cxa_guard_release>
	static float adj_dec = line_trace.getMaxDec();
 80079ce:	4b20      	ldr	r3, [pc, #128]	; (8007a50 <cppLoop+0x310>)
 80079d0:	781b      	ldrb	r3, [r3, #0]
 80079d2:	f3bf 8f5b 	dmb	ish
 80079d6:	b2db      	uxtb	r3, r3
 80079d8:	f003 0301 	and.w	r3, r3, #1
 80079dc:	2b00      	cmp	r3, #0
 80079de:	bf0c      	ite	eq
 80079e0:	2301      	moveq	r3, #1
 80079e2:	2300      	movne	r3, #0
 80079e4:	b2db      	uxtb	r3, r3
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d03f      	beq.n	8007a6a <cppLoop+0x32a>
 80079ea:	4819      	ldr	r0, [pc, #100]	; (8007a50 <cppLoop+0x310>)
 80079ec:	f00c fa53 	bl	8013e96 <__cxa_guard_acquire>
 80079f0:	4603      	mov	r3, r0
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	bf14      	ite	ne
 80079f6:	2301      	movne	r3, #1
 80079f8:	2300      	moveq	r3, #0
 80079fa:	b2db      	uxtb	r3, r3
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d034      	beq.n	8007a6a <cppLoop+0x32a>
 8007a00:	e028      	b.n	8007a54 <cppLoop+0x314>
 8007a02:	bf00      	nop
 8007a04:	2004129c 	.word	0x2004129c
 8007a08:	2001bc14 	.word	0x2001bc14
 8007a0c:	20041298 	.word	0x20041298
 8007a10:	200412a4 	.word	0x200412a4
 8007a14:	200412a0 	.word	0x200412a0
 8007a18:	200412ac 	.word	0x200412ac
 8007a1c:	200412a8 	.word	0x200412a8
 8007a20:	200412b4 	.word	0x200412b4
 8007a24:	200412b0 	.word	0x200412b0
 8007a28:	200412bc 	.word	0x200412bc
 8007a2c:	200412b8 	.word	0x200412b8
 8007a30:	200412c4 	.word	0x200412c4
 8007a34:	200412c0 	.word	0x200412c0
 8007a38:	200412cc 	.word	0x200412cc
 8007a3c:	200412c8 	.word	0x200412c8
 8007a40:	200412d4 	.word	0x200412d4
 8007a44:	200412d0 	.word	0x200412d0
 8007a48:	200412dc 	.word	0x200412dc
 8007a4c:	200412d8 	.word	0x200412d8
 8007a50:	200412e4 	.word	0x200412e4
 8007a54:	48b2      	ldr	r0, [pc, #712]	; (8007d20 <cppLoop+0x5e0>)
 8007a56:	f7fc f9b0 	bl	8003dba <_ZN9LineTrace9getMaxDecEv>
 8007a5a:	eef0 7a40 	vmov.f32	s15, s0
 8007a5e:	4bb1      	ldr	r3, [pc, #708]	; (8007d24 <cppLoop+0x5e4>)
 8007a60:	edc3 7a00 	vstr	s15, [r3]
 8007a64:	48b0      	ldr	r0, [pc, #704]	; (8007d28 <cppLoop+0x5e8>)
 8007a66:	f00c fa22 	bl	8013eae <__cxa_guard_release>
	static float adj_acc2 = line_trace.getMaxAcc2();
 8007a6a:	4bb0      	ldr	r3, [pc, #704]	; (8007d2c <cppLoop+0x5ec>)
 8007a6c:	781b      	ldrb	r3, [r3, #0]
 8007a6e:	f3bf 8f5b 	dmb	ish
 8007a72:	b2db      	uxtb	r3, r3
 8007a74:	f003 0301 	and.w	r3, r3, #1
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	bf0c      	ite	eq
 8007a7c:	2301      	moveq	r3, #1
 8007a7e:	2300      	movne	r3, #0
 8007a80:	b2db      	uxtb	r3, r3
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d015      	beq.n	8007ab2 <cppLoop+0x372>
 8007a86:	48a9      	ldr	r0, [pc, #676]	; (8007d2c <cppLoop+0x5ec>)
 8007a88:	f00c fa05 	bl	8013e96 <__cxa_guard_acquire>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	bf14      	ite	ne
 8007a92:	2301      	movne	r3, #1
 8007a94:	2300      	moveq	r3, #0
 8007a96:	b2db      	uxtb	r3, r3
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d00a      	beq.n	8007ab2 <cppLoop+0x372>
 8007a9c:	48a0      	ldr	r0, [pc, #640]	; (8007d20 <cppLoop+0x5e0>)
 8007a9e:	f7fc f97a 	bl	8003d96 <_ZN9LineTrace10getMaxAcc2Ev>
 8007aa2:	eef0 7a40 	vmov.f32	s15, s0
 8007aa6:	4ba2      	ldr	r3, [pc, #648]	; (8007d30 <cppLoop+0x5f0>)
 8007aa8:	edc3 7a00 	vstr	s15, [r3]
 8007aac:	489f      	ldr	r0, [pc, #636]	; (8007d2c <cppLoop+0x5ec>)
 8007aae:	f00c f9fe 	bl	8013eae <__cxa_guard_release>
	static float adj_dec2 = line_trace.getMaxDec2();
 8007ab2:	4ba0      	ldr	r3, [pc, #640]	; (8007d34 <cppLoop+0x5f4>)
 8007ab4:	781b      	ldrb	r3, [r3, #0]
 8007ab6:	f3bf 8f5b 	dmb	ish
 8007aba:	b2db      	uxtb	r3, r3
 8007abc:	f003 0301 	and.w	r3, r3, #1
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	bf0c      	ite	eq
 8007ac4:	2301      	moveq	r3, #1
 8007ac6:	2300      	movne	r3, #0
 8007ac8:	b2db      	uxtb	r3, r3
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d015      	beq.n	8007afa <cppLoop+0x3ba>
 8007ace:	4899      	ldr	r0, [pc, #612]	; (8007d34 <cppLoop+0x5f4>)
 8007ad0:	f00c f9e1 	bl	8013e96 <__cxa_guard_acquire>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	bf14      	ite	ne
 8007ada:	2301      	movne	r3, #1
 8007adc:	2300      	moveq	r3, #0
 8007ade:	b2db      	uxtb	r3, r3
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d00a      	beq.n	8007afa <cppLoop+0x3ba>
 8007ae4:	488e      	ldr	r0, [pc, #568]	; (8007d20 <cppLoop+0x5e0>)
 8007ae6:	f7fc f944 	bl	8003d72 <_ZN9LineTrace10getMaxDec2Ev>
 8007aea:	eef0 7a40 	vmov.f32	s15, s0
 8007aee:	4b92      	ldr	r3, [pc, #584]	; (8007d38 <cppLoop+0x5f8>)
 8007af0:	edc3 7a00 	vstr	s15, [r3]
 8007af4:	488f      	ldr	r0, [pc, #572]	; (8007d34 <cppLoop+0x5f4>)
 8007af6:	f00c f9da 	bl	8013eae <__cxa_guard_release>

	switch(rotary_switch.getValue()){
 8007afa:	4890      	ldr	r0, [pc, #576]	; (8007d3c <cppLoop+0x5fc>)
 8007afc:	f7fd fbb2 	bl	8005264 <_ZN12RotarySwitch8getValueEv>
 8007b00:	4603      	mov	r3, r0
 8007b02:	2b0f      	cmp	r3, #15
 8007b04:	f201 8397 	bhi.w	8009236 <cppLoop+0x1af6>
 8007b08:	a201      	add	r2, pc, #4	; (adr r2, 8007b10 <cppLoop+0x3d0>)
 8007b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b0e:	bf00      	nop
 8007b10:	08007b51 	.word	0x08007b51
 8007b14:	08007f01 	.word	0x08007f01
 8007b18:	08007fb9 	.word	0x08007fb9
 8007b1c:	0800816b 	.word	0x0800816b
 8007b20:	08008237 	.word	0x08008237
 8007b24:	080084c5 	.word	0x080084c5
 8007b28:	08008591 	.word	0x08008591
 8007b2c:	08008827 	.word	0x08008827
 8007b30:	08008ab3 	.word	0x08008ab3
 8007b34:	08008d3d 	.word	0x08008d3d
 8007b38:	08008df9 	.word	0x08008df9
 8007b3c:	08008e99 	.word	0x08008e99
 8007b40:	08008f1f 	.word	0x08008f1f
 8007b44:	08008fb9 	.word	0x08008fb9
 8007b48:	080090c9 	.word	0x080090c9
 8007b4c:	08009181 	.word	0x08009181
	case 0:
		led.fullColor('W');
 8007b50:	2157      	movs	r1, #87	; 0x57
 8007b52:	487b      	ldr	r0, [pc, #492]	; (8007d40 <cppLoop+0x600>)
 8007b54:	f7fa fb0e 	bl	8002174 <_ZN3LED9fullColorEc>

		lcd_clear();
 8007b58:	f7f9 faa2 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007b5c:	2100      	movs	r1, #0
 8007b5e:	2000      	movs	r0, #0
 8007b60:	f7f9 faae 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf    ", line_trace.getKp()*1000);
 8007b64:	486e      	ldr	r0, [pc, #440]	; (8007d20 <cppLoop+0x5e0>)
 8007b66:	f7fb ffe2 	bl	8003b2e <_ZN9LineTrace5getKpEv>
 8007b6a:	eeb0 7a40 	vmov.f32	s14, s0
 8007b6e:	eddf 7a75 	vldr	s15, [pc, #468]	; 8007d44 <cppLoop+0x604>
 8007b72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b76:	ee17 0a90 	vmov	r0, s15
 8007b7a:	f7f8 fcfd 	bl	8000578 <__aeabi_f2d>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	460c      	mov	r4, r1
 8007b82:	461a      	mov	r2, r3
 8007b84:	4623      	mov	r3, r4
 8007b86:	4870      	ldr	r0, [pc, #448]	; (8007d48 <cppLoop+0x608>)
 8007b88:	f7f9 fac4 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007b8c:	2101      	movs	r1, #1
 8007b8e:	2000      	movs	r0, #0
 8007b90:	f7f9 fa96 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", line_trace.getKi()*100, line_trace.getKd()*10000);
 8007b94:	4862      	ldr	r0, [pc, #392]	; (8007d20 <cppLoop+0x5e0>)
 8007b96:	f7fb ffd9 	bl	8003b4c <_ZN9LineTrace5getKiEv>
 8007b9a:	eeb0 7a40 	vmov.f32	s14, s0
 8007b9e:	eddf 7a6b 	vldr	s15, [pc, #428]	; 8007d4c <cppLoop+0x60c>
 8007ba2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ba6:	ee17 0a90 	vmov	r0, s15
 8007baa:	f7f8 fce5 	bl	8000578 <__aeabi_f2d>
 8007bae:	4605      	mov	r5, r0
 8007bb0:	460e      	mov	r6, r1
 8007bb2:	485b      	ldr	r0, [pc, #364]	; (8007d20 <cppLoop+0x5e0>)
 8007bb4:	f7fb ffd9 	bl	8003b6a <_ZN9LineTrace5getKdEv>
 8007bb8:	eeb0 7a40 	vmov.f32	s14, s0
 8007bbc:	eddf 7a64 	vldr	s15, [pc, #400]	; 8007d50 <cppLoop+0x610>
 8007bc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bc4:	ee17 0a90 	vmov	r0, s15
 8007bc8:	f7f8 fcd6 	bl	8000578 <__aeabi_f2d>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	460c      	mov	r4, r1
 8007bd0:	e9cd 3400 	strd	r3, r4, [sp]
 8007bd4:	462a      	mov	r2, r5
 8007bd6:	4633      	mov	r3, r6
 8007bd8:	485e      	ldr	r0, [pc, #376]	; (8007d54 <cppLoop+0x614>)
 8007bda:	f7f9 fa9b 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8007bde:	485e      	ldr	r0, [pc, #376]	; (8007d58 <cppLoop+0x618>)
 8007be0:	f7fa fa64 	bl	80020ac <_ZN8JoyStick8getValueEv>
 8007be4:	4603      	mov	r3, r0
 8007be6:	2b08      	cmp	r3, #8
 8007be8:	bf0c      	ite	eq
 8007bea:	2301      	moveq	r3, #1
 8007bec:	2300      	movne	r3, #0
 8007bee:	b2db      	uxtb	r3, r3
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d022      	beq.n	8007c3a <cppLoop+0x4fa>
			led.LR(-1, 1);
 8007bf4:	2201      	movs	r2, #1
 8007bf6:	f04f 31ff 	mov.w	r1, #4294967295
 8007bfa:	4851      	ldr	r0, [pc, #324]	; (8007d40 <cppLoop+0x600>)
 8007bfc:	f7fa fb76 	bl	80022ec <_ZN3LED2LREaa>
			HAL_Delay(300);
 8007c00:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007c04:	f001 fc62 	bl	80094cc <HAL_Delay>

			selector++;
 8007c08:	4b54      	ldr	r3, [pc, #336]	; (8007d5c <cppLoop+0x61c>)
 8007c0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007c0e:	b29b      	uxth	r3, r3
 8007c10:	3301      	adds	r3, #1
 8007c12:	b29b      	uxth	r3, r3
 8007c14:	b21a      	sxth	r2, r3
 8007c16:	4b51      	ldr	r3, [pc, #324]	; (8007d5c <cppLoop+0x61c>)
 8007c18:	801a      	strh	r2, [r3, #0]
			if(selector >= 3) selector = 0;
 8007c1a:	4b50      	ldr	r3, [pc, #320]	; (8007d5c <cppLoop+0x61c>)
 8007c1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007c20:	2b02      	cmp	r3, #2
 8007c22:	dd02      	ble.n	8007c2a <cppLoop+0x4ea>
 8007c24:	4b4d      	ldr	r3, [pc, #308]	; (8007d5c <cppLoop+0x61c>)
 8007c26:	2200      	movs	r2, #0
 8007c28:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	f04f 31ff 	mov.w	r1, #4294967295
 8007c30:	4843      	ldr	r0, [pc, #268]	; (8007d40 <cppLoop+0x600>)
 8007c32:	f7fa fb5b 	bl	80022ec <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
			line_trace.setGain(adj_kp, adj_ki, adj_kd);

			led.LR(-1, 0);
		}
		break;
 8007c36:	f001 bb00 	b.w	800923a <cppLoop+0x1afa>
		else if(joy_stick.getValue() == JOY_R){
 8007c3a:	4847      	ldr	r0, [pc, #284]	; (8007d58 <cppLoop+0x618>)
 8007c3c:	f7fa fa36 	bl	80020ac <_ZN8JoyStick8getValueEv>
 8007c40:	4603      	mov	r3, r0
 8007c42:	2b10      	cmp	r3, #16
 8007c44:	bf0c      	ite	eq
 8007c46:	2301      	moveq	r3, #1
 8007c48:	2300      	movne	r3, #0
 8007c4a:	b2db      	uxtb	r3, r3
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	f000 808d 	beq.w	8007d6c <cppLoop+0x62c>
			led.LR(-1, 1);
 8007c52:	2201      	movs	r2, #1
 8007c54:	f04f 31ff 	mov.w	r1, #4294967295
 8007c58:	4839      	ldr	r0, [pc, #228]	; (8007d40 <cppLoop+0x600>)
 8007c5a:	f7fa fb47 	bl	80022ec <_ZN3LED2LREaa>
			HAL_Delay(100);
 8007c5e:	2064      	movs	r0, #100	; 0x64
 8007c60:	f001 fc34 	bl	80094cc <HAL_Delay>
			if(selector == 0){
 8007c64:	4b3d      	ldr	r3, [pc, #244]	; (8007d5c <cppLoop+0x61c>)
 8007c66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d113      	bne.n	8007c96 <cppLoop+0x556>
				adj_kp = adj_kp + 0.00001;
 8007c6e:	4b3c      	ldr	r3, [pc, #240]	; (8007d60 <cppLoop+0x620>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	4618      	mov	r0, r3
 8007c74:	f7f8 fc80 	bl	8000578 <__aeabi_f2d>
 8007c78:	a323      	add	r3, pc, #140	; (adr r3, 8007d08 <cppLoop+0x5c8>)
 8007c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c7e:	f7f8 fb1d 	bl	80002bc <__adddf3>
 8007c82:	4603      	mov	r3, r0
 8007c84:	460c      	mov	r4, r1
 8007c86:	4618      	mov	r0, r3
 8007c88:	4621      	mov	r1, r4
 8007c8a:	f7f8 ffc5 	bl	8000c18 <__aeabi_d2f>
 8007c8e:	4602      	mov	r2, r0
 8007c90:	4b33      	ldr	r3, [pc, #204]	; (8007d60 <cppLoop+0x620>)
 8007c92:	601a      	str	r2, [r3, #0]
 8007c94:	e02b      	b.n	8007cee <cppLoop+0x5ae>
			else if(selector == 1){
 8007c96:	4b31      	ldr	r3, [pc, #196]	; (8007d5c <cppLoop+0x61c>)
 8007c98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007c9c:	2b01      	cmp	r3, #1
 8007c9e:	d113      	bne.n	8007cc8 <cppLoop+0x588>
				adj_ki = adj_ki + 0.0001;
 8007ca0:	4b30      	ldr	r3, [pc, #192]	; (8007d64 <cppLoop+0x624>)
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	f7f8 fc67 	bl	8000578 <__aeabi_f2d>
 8007caa:	a319      	add	r3, pc, #100	; (adr r3, 8007d10 <cppLoop+0x5d0>)
 8007cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cb0:	f7f8 fb04 	bl	80002bc <__adddf3>
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	460c      	mov	r4, r1
 8007cb8:	4618      	mov	r0, r3
 8007cba:	4621      	mov	r1, r4
 8007cbc:	f7f8 ffac 	bl	8000c18 <__aeabi_d2f>
 8007cc0:	4602      	mov	r2, r0
 8007cc2:	4b28      	ldr	r3, [pc, #160]	; (8007d64 <cppLoop+0x624>)
 8007cc4:	601a      	str	r2, [r3, #0]
 8007cc6:	e012      	b.n	8007cee <cppLoop+0x5ae>
				adj_kd = adj_kd + 0.000001;
 8007cc8:	4b27      	ldr	r3, [pc, #156]	; (8007d68 <cppLoop+0x628>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	4618      	mov	r0, r3
 8007cce:	f7f8 fc53 	bl	8000578 <__aeabi_f2d>
 8007cd2:	a311      	add	r3, pc, #68	; (adr r3, 8007d18 <cppLoop+0x5d8>)
 8007cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cd8:	f7f8 faf0 	bl	80002bc <__adddf3>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	460c      	mov	r4, r1
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	4621      	mov	r1, r4
 8007ce4:	f7f8 ff98 	bl	8000c18 <__aeabi_d2f>
 8007ce8:	4602      	mov	r2, r0
 8007cea:	4b1f      	ldr	r3, [pc, #124]	; (8007d68 <cppLoop+0x628>)
 8007cec:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8007cee:	2152      	movs	r1, #82	; 0x52
 8007cf0:	4813      	ldr	r0, [pc, #76]	; (8007d40 <cppLoop+0x600>)
 8007cf2:	f7fa fa3f 	bl	8002174 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	f04f 31ff 	mov.w	r1, #4294967295
 8007cfc:	4810      	ldr	r0, [pc, #64]	; (8007d40 <cppLoop+0x600>)
 8007cfe:	f7fa faf5 	bl	80022ec <_ZN3LED2LREaa>
		break;
 8007d02:	f001 ba9a 	b.w	800923a <cppLoop+0x1afa>
 8007d06:	bf00      	nop
 8007d08:	88e368f1 	.word	0x88e368f1
 8007d0c:	3ee4f8b5 	.word	0x3ee4f8b5
 8007d10:	eb1c432d 	.word	0xeb1c432d
 8007d14:	3f1a36e2 	.word	0x3f1a36e2
 8007d18:	a0b5ed8d 	.word	0xa0b5ed8d
 8007d1c:	3eb0c6f7 	.word	0x3eb0c6f7
 8007d20:	2001bc14 	.word	0x2001bc14
 8007d24:	200412e0 	.word	0x200412e0
 8007d28:	200412e4 	.word	0x200412e4
 8007d2c:	200412ec 	.word	0x200412ec
 8007d30:	200412e8 	.word	0x200412e8
 8007d34:	200412f4 	.word	0x200412f4
 8007d38:	200412f0 	.word	0x200412f0
 8007d3c:	200005c0 	.word	0x200005c0
 8007d40:	200005c8 	.word	0x200005c8
 8007d44:	447a0000 	.word	0x447a0000
 8007d48:	080197d4 	.word	0x080197d4
 8007d4c:	42c80000 	.word	0x42c80000
 8007d50:	461c4000 	.word	0x461c4000
 8007d54:	080197e0 	.word	0x080197e0
 8007d58:	200005bc 	.word	0x200005bc
 8007d5c:	2004128c 	.word	0x2004128c
 8007d60:	20041298 	.word	0x20041298
 8007d64:	200412a0 	.word	0x200412a0
 8007d68:	200412a8 	.word	0x200412a8
		else if(joy_stick.getValue() == JOY_L){
 8007d6c:	48c0      	ldr	r0, [pc, #768]	; (8008070 <cppLoop+0x930>)
 8007d6e:	f7fa f99d 	bl	80020ac <_ZN8JoyStick8getValueEv>
 8007d72:	4603      	mov	r3, r0
 8007d74:	2b01      	cmp	r3, #1
 8007d76:	bf0c      	ite	eq
 8007d78:	2301      	moveq	r3, #1
 8007d7a:	2300      	movne	r3, #0
 8007d7c:	b2db      	uxtb	r3, r3
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d059      	beq.n	8007e36 <cppLoop+0x6f6>
			led.LR(-1, 1);
 8007d82:	2201      	movs	r2, #1
 8007d84:	f04f 31ff 	mov.w	r1, #4294967295
 8007d88:	48ba      	ldr	r0, [pc, #744]	; (8008074 <cppLoop+0x934>)
 8007d8a:	f7fa faaf 	bl	80022ec <_ZN3LED2LREaa>
			HAL_Delay(100);
 8007d8e:	2064      	movs	r0, #100	; 0x64
 8007d90:	f001 fb9c 	bl	80094cc <HAL_Delay>
			if(selector == 0){
 8007d94:	4bb8      	ldr	r3, [pc, #736]	; (8008078 <cppLoop+0x938>)
 8007d96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d113      	bne.n	8007dc6 <cppLoop+0x686>
				adj_kp = adj_kp - 0.00001;
 8007d9e:	4bb7      	ldr	r3, [pc, #732]	; (800807c <cppLoop+0x93c>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	4618      	mov	r0, r3
 8007da4:	f7f8 fbe8 	bl	8000578 <__aeabi_f2d>
 8007da8:	a3a9      	add	r3, pc, #676	; (adr r3, 8008050 <cppLoop+0x910>)
 8007daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dae:	f7f8 fa83 	bl	80002b8 <__aeabi_dsub>
 8007db2:	4603      	mov	r3, r0
 8007db4:	460c      	mov	r4, r1
 8007db6:	4618      	mov	r0, r3
 8007db8:	4621      	mov	r1, r4
 8007dba:	f7f8 ff2d 	bl	8000c18 <__aeabi_d2f>
 8007dbe:	4602      	mov	r2, r0
 8007dc0:	4bae      	ldr	r3, [pc, #696]	; (800807c <cppLoop+0x93c>)
 8007dc2:	601a      	str	r2, [r3, #0]
 8007dc4:	e02b      	b.n	8007e1e <cppLoop+0x6de>
			else if(selector == 1){
 8007dc6:	4bac      	ldr	r3, [pc, #688]	; (8008078 <cppLoop+0x938>)
 8007dc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	d113      	bne.n	8007df8 <cppLoop+0x6b8>
				adj_ki = adj_ki - 0.0001;
 8007dd0:	4bab      	ldr	r3, [pc, #684]	; (8008080 <cppLoop+0x940>)
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	f7f8 fbcf 	bl	8000578 <__aeabi_f2d>
 8007dda:	a39f      	add	r3, pc, #636	; (adr r3, 8008058 <cppLoop+0x918>)
 8007ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007de0:	f7f8 fa6a 	bl	80002b8 <__aeabi_dsub>
 8007de4:	4603      	mov	r3, r0
 8007de6:	460c      	mov	r4, r1
 8007de8:	4618      	mov	r0, r3
 8007dea:	4621      	mov	r1, r4
 8007dec:	f7f8 ff14 	bl	8000c18 <__aeabi_d2f>
 8007df0:	4602      	mov	r2, r0
 8007df2:	4ba3      	ldr	r3, [pc, #652]	; (8008080 <cppLoop+0x940>)
 8007df4:	601a      	str	r2, [r3, #0]
 8007df6:	e012      	b.n	8007e1e <cppLoop+0x6de>
				adj_kd = adj_kd - 0.000001;
 8007df8:	4ba2      	ldr	r3, [pc, #648]	; (8008084 <cppLoop+0x944>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	f7f8 fbbb 	bl	8000578 <__aeabi_f2d>
 8007e02:	a397      	add	r3, pc, #604	; (adr r3, 8008060 <cppLoop+0x920>)
 8007e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e08:	f7f8 fa56 	bl	80002b8 <__aeabi_dsub>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	460c      	mov	r4, r1
 8007e10:	4618      	mov	r0, r3
 8007e12:	4621      	mov	r1, r4
 8007e14:	f7f8 ff00 	bl	8000c18 <__aeabi_d2f>
 8007e18:	4602      	mov	r2, r0
 8007e1a:	4b9a      	ldr	r3, [pc, #616]	; (8008084 <cppLoop+0x944>)
 8007e1c:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8007e1e:	2152      	movs	r1, #82	; 0x52
 8007e20:	4894      	ldr	r0, [pc, #592]	; (8008074 <cppLoop+0x934>)
 8007e22:	f7fa f9a7 	bl	8002174 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8007e26:	2200      	movs	r2, #0
 8007e28:	f04f 31ff 	mov.w	r1, #4294967295
 8007e2c:	4891      	ldr	r0, [pc, #580]	; (8008074 <cppLoop+0x934>)
 8007e2e:	f7fa fa5d 	bl	80022ec <_ZN3LED2LREaa>
		break;
 8007e32:	f001 ba02 	b.w	800923a <cppLoop+0x1afa>
		else if(joy_stick.getValue() == JOY_D){
 8007e36:	488e      	ldr	r0, [pc, #568]	; (8008070 <cppLoop+0x930>)
 8007e38:	f7fa f938 	bl	80020ac <_ZN8JoyStick8getValueEv>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	2b04      	cmp	r3, #4
 8007e40:	bf0c      	ite	eq
 8007e42:	2301      	moveq	r3, #1
 8007e44:	2300      	movne	r3, #0
 8007e46:	b2db      	uxtb	r3, r3
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d011      	beq.n	8007e70 <cppLoop+0x730>
			led.LR(-1, 1);
 8007e4c:	2201      	movs	r2, #1
 8007e4e:	f04f 31ff 	mov.w	r1, #4294967295
 8007e52:	4888      	ldr	r0, [pc, #544]	; (8008074 <cppLoop+0x934>)
 8007e54:	f7fa fa4a 	bl	80022ec <_ZN3LED2LREaa>
			HAL_Delay(300);
 8007e58:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007e5c:	f001 fb36 	bl	80094cc <HAL_Delay>
			led.LR(-1, 0);
 8007e60:	2200      	movs	r2, #0
 8007e62:	f04f 31ff 	mov.w	r1, #4294967295
 8007e66:	4883      	ldr	r0, [pc, #524]	; (8008074 <cppLoop+0x934>)
 8007e68:	f7fa fa40 	bl	80022ec <_ZN3LED2LREaa>
		break;
 8007e6c:	f001 b9e5 	b.w	800923a <cppLoop+0x1afa>
		else if(joy_stick.getValue() == JOY_C){
 8007e70:	487f      	ldr	r0, [pc, #508]	; (8008070 <cppLoop+0x930>)
 8007e72:	f7fa f91b 	bl	80020ac <_ZN8JoyStick8getValueEv>
 8007e76:	4603      	mov	r3, r0
 8007e78:	2b02      	cmp	r3, #2
 8007e7a:	bf0c      	ite	eq
 8007e7c:	2301      	moveq	r3, #1
 8007e7e:	2300      	movne	r3, #0
 8007e80:	b2db      	uxtb	r3, r3
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	f001 81d9 	beq.w	800923a <cppLoop+0x1afa>
			led.LR(-1, 1);
 8007e88:	2201      	movs	r2, #1
 8007e8a:	f04f 31ff 	mov.w	r1, #4294967295
 8007e8e:	4879      	ldr	r0, [pc, #484]	; (8008074 <cppLoop+0x934>)
 8007e90:	f7fa fa2c 	bl	80022ec <_ZN3LED2LREaa>
			HAL_Delay(300);
 8007e94:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007e98:	f001 fb18 	bl	80094cc <HAL_Delay>
			sd_write_array_float("PARAMS", "KP.TXT", 1, &adj_kp, OVER_WRITE);
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	9300      	str	r3, [sp, #0]
 8007ea0:	4b76      	ldr	r3, [pc, #472]	; (800807c <cppLoop+0x93c>)
 8007ea2:	2201      	movs	r2, #1
 8007ea4:	4978      	ldr	r1, [pc, #480]	; (8008088 <cppLoop+0x948>)
 8007ea6:	4879      	ldr	r0, [pc, #484]	; (800808c <cppLoop+0x94c>)
 8007ea8:	f7f9 fce8 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KI.TXT", 1, &adj_ki, OVER_WRITE);
 8007eac:	2300      	movs	r3, #0
 8007eae:	9300      	str	r3, [sp, #0]
 8007eb0:	4b73      	ldr	r3, [pc, #460]	; (8008080 <cppLoop+0x940>)
 8007eb2:	2201      	movs	r2, #1
 8007eb4:	4976      	ldr	r1, [pc, #472]	; (8008090 <cppLoop+0x950>)
 8007eb6:	4875      	ldr	r0, [pc, #468]	; (800808c <cppLoop+0x94c>)
 8007eb8:	f7f9 fce0 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	9300      	str	r3, [sp, #0]
 8007ec0:	4b70      	ldr	r3, [pc, #448]	; (8008084 <cppLoop+0x944>)
 8007ec2:	2201      	movs	r2, #1
 8007ec4:	4973      	ldr	r1, [pc, #460]	; (8008094 <cppLoop+0x954>)
 8007ec6:	4871      	ldr	r0, [pc, #452]	; (800808c <cppLoop+0x94c>)
 8007ec8:	f7f9 fcd8 	bl	800187c <sd_write_array_float>
			line_trace.setGain(adj_kp, adj_ki, adj_kd);
 8007ecc:	4b6b      	ldr	r3, [pc, #428]	; (800807c <cppLoop+0x93c>)
 8007ece:	edd3 7a00 	vldr	s15, [r3]
 8007ed2:	4b6b      	ldr	r3, [pc, #428]	; (8008080 <cppLoop+0x940>)
 8007ed4:	ed93 7a00 	vldr	s14, [r3]
 8007ed8:	4b6a      	ldr	r3, [pc, #424]	; (8008084 <cppLoop+0x944>)
 8007eda:	edd3 6a00 	vldr	s13, [r3]
 8007ede:	eeb0 1a66 	vmov.f32	s2, s13
 8007ee2:	eef0 0a47 	vmov.f32	s1, s14
 8007ee6:	eeb0 0a67 	vmov.f32	s0, s15
 8007eea:	486b      	ldr	r0, [pc, #428]	; (8008098 <cppLoop+0x958>)
 8007eec:	f7fb fe06 	bl	8003afc <_ZN9LineTrace7setGainEfff>
			led.LR(-1, 0);
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	f04f 31ff 	mov.w	r1, #4294967295
 8007ef6:	485f      	ldr	r0, [pc, #380]	; (8008074 <cppLoop+0x934>)
 8007ef8:	f7fa f9f8 	bl	80022ec <_ZN3LED2LREaa>
		break;
 8007efc:	f001 b99d 	b.w	800923a <cppLoop+0x1afa>

	case 1:
		led.fullColor('C');
 8007f00:	2143      	movs	r1, #67	; 0x43
 8007f02:	485c      	ldr	r0, [pc, #368]	; (8008074 <cppLoop+0x934>)
 8007f04:	f7fa f936 	bl	8002174 <_ZN3LED9fullColorEc>

		lcd_clear();
 8007f08:	f7f9 f8ca 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007f0c:	2100      	movs	r1, #0
 8007f0e:	2000      	movs	r0, #0
 8007f10:	f7f9 f8d6 	bl	80010c0 <lcd_locate>
		lcd_printf("FirstRun");
 8007f14:	4861      	ldr	r0, [pc, #388]	; (800809c <cppLoop+0x95c>)
 8007f16:	f7f9 f8fd 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007f1a:	2101      	movs	r1, #1
 8007f1c:	2000      	movs	r0, #0
 8007f1e:	f7f9 f8cf 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_velocity);
 8007f22:	4b5f      	ldr	r3, [pc, #380]	; (80080a0 <cppLoop+0x960>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4618      	mov	r0, r3
 8007f28:	f7f8 fb26 	bl	8000578 <__aeabi_f2d>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	460c      	mov	r4, r1
 8007f30:	461a      	mov	r2, r3
 8007f32:	4623      	mov	r3, r4
 8007f34:	485b      	ldr	r0, [pc, #364]	; (80080a4 <cppLoop+0x964>)
 8007f36:	f7f9 f8ed 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8007f3a:	484d      	ldr	r0, [pc, #308]	; (8008070 <cppLoop+0x930>)
 8007f3c:	f7fa f8b6 	bl	80020ac <_ZN8JoyStick8getValueEv>
 8007f40:	4603      	mov	r3, r0
 8007f42:	2b02      	cmp	r3, #2
 8007f44:	bf0c      	ite	eq
 8007f46:	2301      	moveq	r3, #1
 8007f48:	2300      	movne	r3, #0
 8007f4a:	b2db      	uxtb	r3, r3
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	f001 8176 	beq.w	800923e <cppLoop+0x1afe>
			HAL_Delay(500);
 8007f52:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007f56:	f001 fab9 	bl	80094cc <HAL_Delay>

			line_trace.setTargetVelocity(adj_velocity);
 8007f5a:	4b51      	ldr	r3, [pc, #324]	; (80080a0 <cppLoop+0x960>)
 8007f5c:	edd3 7a00 	vldr	s15, [r3]
 8007f60:	eeb0 0a67 	vmov.f32	s0, s15
 8007f64:	484c      	ldr	r0, [pc, #304]	; (8008098 <cppLoop+0x958>)
 8007f66:	f7fb fe1e 	bl	8003ba6 <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(1, -1);
 8007f6a:	f04f 32ff 	mov.w	r2, #4294967295
 8007f6e:	2101      	movs	r1, #1
 8007f70:	4840      	ldr	r0, [pc, #256]	; (8008074 <cppLoop+0x934>)
 8007f72:	f7fa f9bb 	bl	80022ec <_ZN3LED2LREaa>

			line_trace.setMode(FIRST_RUNNING);
 8007f76:	2100      	movs	r1, #0
 8007f78:	4847      	ldr	r0, [pc, #284]	; (8008098 <cppLoop+0x958>)
 8007f7a:	f7fc f85b 	bl	8004034 <_ZN9LineTrace7setModeEs>
			esc.on(0.5, 0.5, 0.5, 0.5);
 8007f7e:	eef6 1a00 	vmov.f32	s3, #96	; 0x3f000000  0.5
 8007f82:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 8007f86:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8007f8a:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8007f8e:	4846      	ldr	r0, [pc, #280]	; (80080a8 <cppLoop+0x968>)
 8007f90:	f7f9 f95e 	bl	8001250 <_ZN3ESC2onEffff>
			HAL_Delay(3000);
 8007f94:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8007f98:	f001 fa98 	bl	80094cc <HAL_Delay>
			line_trace.running();
 8007f9c:	483e      	ldr	r0, [pc, #248]	; (8008098 <cppLoop+0x958>)
 8007f9e:	f7fc f887 	bl	80040b0 <_ZN9LineTrace7runningEv>
			esc.off();
 8007fa2:	4841      	ldr	r0, [pc, #260]	; (80080a8 <cppLoop+0x968>)
 8007fa4:	f7f9 f9ee 	bl	8001384 <_ZN3ESC3offEv>

			led.LR(0, -1);
 8007fa8:	f04f 32ff 	mov.w	r2, #4294967295
 8007fac:	2100      	movs	r1, #0
 8007fae:	4831      	ldr	r0, [pc, #196]	; (8008074 <cppLoop+0x934>)
 8007fb0:	f7fa f99c 	bl	80022ec <_ZN3LED2LREaa>
		}

		break;
 8007fb4:	f001 b943 	b.w	800923e <cppLoop+0x1afe>

	case 2:
		led.fullColor('B');
 8007fb8:	2142      	movs	r1, #66	; 0x42
 8007fba:	482e      	ldr	r0, [pc, #184]	; (8008074 <cppLoop+0x934>)
 8007fbc:	f7fa f8da 	bl	8002174 <_ZN3LED9fullColorEc>

		lcd_clear();
 8007fc0:	f7f9 f86e 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007fc4:	2100      	movs	r1, #0
 8007fc6:	2000      	movs	r0, #0
 8007fc8:	f7f9 f87a 	bl	80010c0 <lcd_locate>
		lcd_printf("FirstRun");
 8007fcc:	4833      	ldr	r0, [pc, #204]	; (800809c <cppLoop+0x95c>)
 8007fce:	f7f9 f8a1 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007fd2:	2101      	movs	r1, #1
 8007fd4:	2000      	movs	r0, #0
 8007fd6:	f7f9 f873 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", adj_velocity);
 8007fda:	4b31      	ldr	r3, [pc, #196]	; (80080a0 <cppLoop+0x960>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f7f8 faca 	bl	8000578 <__aeabi_f2d>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	460c      	mov	r4, r1
 8007fe8:	461a      	mov	r2, r3
 8007fea:	4623      	mov	r3, r4
 8007fec:	482f      	ldr	r0, [pc, #188]	; (80080ac <cppLoop+0x96c>)
 8007fee:	f7f9 f891 	bl	8001114 <lcd_printf>


		if(joy_stick.getValue() == JOY_R){
 8007ff2:	481f      	ldr	r0, [pc, #124]	; (8008070 <cppLoop+0x930>)
 8007ff4:	f7fa f85a 	bl	80020ac <_ZN8JoyStick8getValueEv>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	2b10      	cmp	r3, #16
 8007ffc:	bf0c      	ite	eq
 8007ffe:	2301      	moveq	r3, #1
 8008000:	2300      	movne	r3, #0
 8008002:	b2db      	uxtb	r3, r3
 8008004:	2b00      	cmp	r3, #0
 8008006:	d053      	beq.n	80080b0 <cppLoop+0x970>
			led.LR(-1, 1);
 8008008:	2201      	movs	r2, #1
 800800a:	f04f 31ff 	mov.w	r1, #4294967295
 800800e:	4819      	ldr	r0, [pc, #100]	; (8008074 <cppLoop+0x934>)
 8008010:	f7fa f96c 	bl	80022ec <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008014:	2064      	movs	r0, #100	; 0x64
 8008016:	f001 fa59 	bl	80094cc <HAL_Delay>

			adj_velocity = adj_velocity + 0.1;
 800801a:	4b21      	ldr	r3, [pc, #132]	; (80080a0 <cppLoop+0x960>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4618      	mov	r0, r3
 8008020:	f7f8 faaa 	bl	8000578 <__aeabi_f2d>
 8008024:	a310      	add	r3, pc, #64	; (adr r3, 8008068 <cppLoop+0x928>)
 8008026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800802a:	f7f8 f947 	bl	80002bc <__adddf3>
 800802e:	4603      	mov	r3, r0
 8008030:	460c      	mov	r4, r1
 8008032:	4618      	mov	r0, r3
 8008034:	4621      	mov	r1, r4
 8008036:	f7f8 fdef 	bl	8000c18 <__aeabi_d2f>
 800803a:	4602      	mov	r2, r0
 800803c:	4b18      	ldr	r3, [pc, #96]	; (80080a0 <cppLoop+0x960>)
 800803e:	601a      	str	r2, [r3, #0]

			led.LR(-1, 0);
 8008040:	2200      	movs	r2, #0
 8008042:	f04f 31ff 	mov.w	r1, #4294967295
 8008046:	480b      	ldr	r0, [pc, #44]	; (8008074 <cppLoop+0x934>)
 8008048:	f7fa f950 	bl	80022ec <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "TARVEL1.TXT", 1, &adj_velocity, OVER_WRITE);
			line_trace.setTargetVelocity(adj_velocity);

			led.LR(-1, 0);
		}
		break;
 800804c:	f001 b8f9 	b.w	8009242 <cppLoop+0x1b02>
 8008050:	88e368f1 	.word	0x88e368f1
 8008054:	3ee4f8b5 	.word	0x3ee4f8b5
 8008058:	eb1c432d 	.word	0xeb1c432d
 800805c:	3f1a36e2 	.word	0x3f1a36e2
 8008060:	a0b5ed8d 	.word	0xa0b5ed8d
 8008064:	3eb0c6f7 	.word	0x3eb0c6f7
 8008068:	9999999a 	.word	0x9999999a
 800806c:	3fb99999 	.word	0x3fb99999
 8008070:	200005bc 	.word	0x200005bc
 8008074:	200005c8 	.word	0x200005c8
 8008078:	2004128c 	.word	0x2004128c
 800807c:	20041298 	.word	0x20041298
 8008080:	200412a0 	.word	0x200412a0
 8008084:	200412a8 	.word	0x200412a8
 8008088:	080197f0 	.word	0x080197f0
 800808c:	080197f8 	.word	0x080197f8
 8008090:	08019800 	.word	0x08019800
 8008094:	08019808 	.word	0x08019808
 8008098:	2001bc14 	.word	0x2001bc14
 800809c:	08019810 	.word	0x08019810
 80080a0:	200412b0 	.word	0x200412b0
 80080a4:	0801981c 	.word	0x0801981c
 80080a8:	2001bc10 	.word	0x2001bc10
 80080ac:	08019828 	.word	0x08019828
		else if(joy_stick.getValue() == JOY_L){
 80080b0:	48b5      	ldr	r0, [pc, #724]	; (8008388 <cppLoop+0xc48>)
 80080b2:	f7f9 fffb 	bl	80020ac <_ZN8JoyStick8getValueEv>
 80080b6:	4603      	mov	r3, r0
 80080b8:	2b01      	cmp	r3, #1
 80080ba:	bf0c      	ite	eq
 80080bc:	2301      	moveq	r3, #1
 80080be:	2300      	movne	r3, #0
 80080c0:	b2db      	uxtb	r3, r3
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d023      	beq.n	800810e <cppLoop+0x9ce>
			led.LR(-1, 1);
 80080c6:	2201      	movs	r2, #1
 80080c8:	f04f 31ff 	mov.w	r1, #4294967295
 80080cc:	48af      	ldr	r0, [pc, #700]	; (800838c <cppLoop+0xc4c>)
 80080ce:	f7fa f90d 	bl	80022ec <_ZN3LED2LREaa>
			HAL_Delay(100);
 80080d2:	2064      	movs	r0, #100	; 0x64
 80080d4:	f001 f9fa 	bl	80094cc <HAL_Delay>
			adj_velocity = adj_velocity - 0.1;
 80080d8:	4bad      	ldr	r3, [pc, #692]	; (8008390 <cppLoop+0xc50>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	4618      	mov	r0, r3
 80080de:	f7f8 fa4b 	bl	8000578 <__aeabi_f2d>
 80080e2:	a3a7      	add	r3, pc, #668	; (adr r3, 8008380 <cppLoop+0xc40>)
 80080e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080e8:	f7f8 f8e6 	bl	80002b8 <__aeabi_dsub>
 80080ec:	4603      	mov	r3, r0
 80080ee:	460c      	mov	r4, r1
 80080f0:	4618      	mov	r0, r3
 80080f2:	4621      	mov	r1, r4
 80080f4:	f7f8 fd90 	bl	8000c18 <__aeabi_d2f>
 80080f8:	4602      	mov	r2, r0
 80080fa:	4ba5      	ldr	r3, [pc, #660]	; (8008390 <cppLoop+0xc50>)
 80080fc:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 80080fe:	2200      	movs	r2, #0
 8008100:	f04f 31ff 	mov.w	r1, #4294967295
 8008104:	48a1      	ldr	r0, [pc, #644]	; (800838c <cppLoop+0xc4c>)
 8008106:	f7fa f8f1 	bl	80022ec <_ZN3LED2LREaa>
		break;
 800810a:	f001 b89a 	b.w	8009242 <cppLoop+0x1b02>
		else if(joy_stick.getValue() == JOY_C){
 800810e:	489e      	ldr	r0, [pc, #632]	; (8008388 <cppLoop+0xc48>)
 8008110:	f7f9 ffcc 	bl	80020ac <_ZN8JoyStick8getValueEv>
 8008114:	4603      	mov	r3, r0
 8008116:	2b02      	cmp	r3, #2
 8008118:	bf0c      	ite	eq
 800811a:	2301      	moveq	r3, #1
 800811c:	2300      	movne	r3, #0
 800811e:	b2db      	uxtb	r3, r3
 8008120:	2b00      	cmp	r3, #0
 8008122:	f001 808e 	beq.w	8009242 <cppLoop+0x1b02>
			led.LR(-1, 1);
 8008126:	2201      	movs	r2, #1
 8008128:	f04f 31ff 	mov.w	r1, #4294967295
 800812c:	4897      	ldr	r0, [pc, #604]	; (800838c <cppLoop+0xc4c>)
 800812e:	f7fa f8dd 	bl	80022ec <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008132:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008136:	f001 f9c9 	bl	80094cc <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL1.TXT", 1, &adj_velocity, OVER_WRITE);
 800813a:	2300      	movs	r3, #0
 800813c:	9300      	str	r3, [sp, #0]
 800813e:	4b94      	ldr	r3, [pc, #592]	; (8008390 <cppLoop+0xc50>)
 8008140:	2201      	movs	r2, #1
 8008142:	4994      	ldr	r1, [pc, #592]	; (8008394 <cppLoop+0xc54>)
 8008144:	4894      	ldr	r0, [pc, #592]	; (8008398 <cppLoop+0xc58>)
 8008146:	f7f9 fb99 	bl	800187c <sd_write_array_float>
			line_trace.setTargetVelocity(adj_velocity);
 800814a:	4b91      	ldr	r3, [pc, #580]	; (8008390 <cppLoop+0xc50>)
 800814c:	edd3 7a00 	vldr	s15, [r3]
 8008150:	eeb0 0a67 	vmov.f32	s0, s15
 8008154:	4891      	ldr	r0, [pc, #580]	; (800839c <cppLoop+0xc5c>)
 8008156:	f7fb fd26 	bl	8003ba6 <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(-1, 0);
 800815a:	2200      	movs	r2, #0
 800815c:	f04f 31ff 	mov.w	r1, #4294967295
 8008160:	488a      	ldr	r0, [pc, #552]	; (800838c <cppLoop+0xc4c>)
 8008162:	f7fa f8c3 	bl	80022ec <_ZN3LED2LREaa>
		break;
 8008166:	f001 b86c 	b.w	8009242 <cppLoop+0x1b02>

	case 3:
		led.fullColor('Y');
 800816a:	2159      	movs	r1, #89	; 0x59
 800816c:	4887      	ldr	r0, [pc, #540]	; (800838c <cppLoop+0xc4c>)
 800816e:	f7fa f801 	bl	8002174 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008172:	f7f8 ff95 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008176:	2100      	movs	r1, #0
 8008178:	2000      	movs	r0, #0
 800817a:	f7f8 ffa1 	bl	80010c0 <lcd_locate>
		lcd_printf("2:   %3.1f", adj_max_velocity);
 800817e:	4b88      	ldr	r3, [pc, #544]	; (80083a0 <cppLoop+0xc60>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	4618      	mov	r0, r3
 8008184:	f7f8 f9f8 	bl	8000578 <__aeabi_f2d>
 8008188:	4603      	mov	r3, r0
 800818a:	460c      	mov	r4, r1
 800818c:	461a      	mov	r2, r3
 800818e:	4623      	mov	r3, r4
 8008190:	4884      	ldr	r0, [pc, #528]	; (80083a4 <cppLoop+0xc64>)
 8008192:	f7f8 ffbf 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008196:	2101      	movs	r1, #1
 8008198:	2000      	movs	r0, #0
 800819a:	f7f8 ff91 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_min_velocity);
 800819e:	4b82      	ldr	r3, [pc, #520]	; (80083a8 <cppLoop+0xc68>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	4618      	mov	r0, r3
 80081a4:	f7f8 f9e8 	bl	8000578 <__aeabi_f2d>
 80081a8:	4603      	mov	r3, r0
 80081aa:	460c      	mov	r4, r1
 80081ac:	461a      	mov	r2, r3
 80081ae:	4623      	mov	r3, r4
 80081b0:	487e      	ldr	r0, [pc, #504]	; (80083ac <cppLoop+0xc6c>)
 80081b2:	f7f8 ffaf 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80081b6:	4874      	ldr	r0, [pc, #464]	; (8008388 <cppLoop+0xc48>)
 80081b8:	f7f9 ff78 	bl	80020ac <_ZN8JoyStick8getValueEv>
 80081bc:	4603      	mov	r3, r0
 80081be:	2b02      	cmp	r3, #2
 80081c0:	bf0c      	ite	eq
 80081c2:	2301      	moveq	r3, #1
 80081c4:	2300      	movne	r3, #0
 80081c6:	b2db      	uxtb	r3, r3
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	f001 803c 	beq.w	8009246 <cppLoop+0x1b06>
			HAL_Delay(500);
 80081ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80081d2:	f001 f97b 	bl	80094cc <HAL_Delay>

			led.LR(1, -1);
 80081d6:	f04f 32ff 	mov.w	r2, #4294967295
 80081da:	2101      	movs	r1, #1
 80081dc:	486b      	ldr	r0, [pc, #428]	; (800838c <cppLoop+0xc4c>)
 80081de:	f7fa f885 	bl	80022ec <_ZN3LED2LREaa>
			line_trace.setMode(SECOND_RUNNING);
 80081e2:	2101      	movs	r1, #1
 80081e4:	486d      	ldr	r0, [pc, #436]	; (800839c <cppLoop+0xc5c>)
 80081e6:	f7fb ff25 	bl	8004034 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity);
 80081ea:	4b6f      	ldr	r3, [pc, #444]	; (80083a8 <cppLoop+0xc68>)
 80081ec:	edd3 7a00 	vldr	s15, [r3]
 80081f0:	eeb0 0a67 	vmov.f32	s0, s15
 80081f4:	4869      	ldr	r0, [pc, #420]	; (800839c <cppLoop+0xc5c>)
 80081f6:	f7fb fcd6 	bl	8003ba6 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity);
 80081fa:	4b69      	ldr	r3, [pc, #420]	; (80083a0 <cppLoop+0xc60>)
 80081fc:	edd3 7a00 	vldr	s15, [r3]
 8008200:	eeb0 0a67 	vmov.f32	s0, s15
 8008204:	4865      	ldr	r0, [pc, #404]	; (800839c <cppLoop+0xc5c>)
 8008206:	f7fb fcde 	bl	8003bc6 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 800820a:	4b67      	ldr	r3, [pc, #412]	; (80083a8 <cppLoop+0xc68>)
 800820c:	edd3 7a00 	vldr	s15, [r3]
 8008210:	eeb0 0a67 	vmov.f32	s0, s15
 8008214:	4861      	ldr	r0, [pc, #388]	; (800839c <cppLoop+0xc5c>)
 8008216:	f7fb fcf6 	bl	8003c06 <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabele();
 800821a:	4860      	ldr	r0, [pc, #384]	; (800839c <cppLoop+0xc5c>)
 800821c:	f7fc f832 	bl	8004284 <_ZN9LineTrace20createVelocityTabeleEv>

			line_trace.running();
 8008220:	485e      	ldr	r0, [pc, #376]	; (800839c <cppLoop+0xc5c>)
 8008222:	f7fb ff45 	bl	80040b0 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 8008226:	f04f 32ff 	mov.w	r2, #4294967295
 800822a:	2100      	movs	r1, #0
 800822c:	4857      	ldr	r0, [pc, #348]	; (800838c <cppLoop+0xc4c>)
 800822e:	f7fa f85d 	bl	80022ec <_ZN3LED2LREaa>
		}

		break;
 8008232:	f001 b808 	b.w	8009246 <cppLoop+0x1b06>

	case 4:
		led.fullColor('G');
 8008236:	2147      	movs	r1, #71	; 0x47
 8008238:	4854      	ldr	r0, [pc, #336]	; (800838c <cppLoop+0xc4c>)
 800823a:	f7f9 ff9b 	bl	8002174 <_ZN3LED9fullColorEc>

		lcd_clear();
 800823e:	f7f8 ff2f 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008242:	2100      	movs	r1, #0
 8008244:	2000      	movs	r0, #0
 8008246:	f7f8 ff3b 	bl	80010c0 <lcd_locate>
		lcd_printf("2:   %3.1f", line_trace.getMaxVelocity());
 800824a:	4854      	ldr	r0, [pc, #336]	; (800839c <cppLoop+0xc5c>)
 800824c:	f7fb fd0b 	bl	8003c66 <_ZN9LineTrace14getMaxVelocityEv>
 8008250:	ee10 3a10 	vmov	r3, s0
 8008254:	4618      	mov	r0, r3
 8008256:	f7f8 f98f 	bl	8000578 <__aeabi_f2d>
 800825a:	4603      	mov	r3, r0
 800825c:	460c      	mov	r4, r1
 800825e:	461a      	mov	r2, r3
 8008260:	4623      	mov	r3, r4
 8008262:	4850      	ldr	r0, [pc, #320]	; (80083a4 <cppLoop+0xc64>)
 8008264:	f7f8 ff56 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008268:	2101      	movs	r1, #1
 800826a:	2000      	movs	r0, #0
 800826c:	f7f8 ff28 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", line_trace.getMinVelocity());
 8008270:	484a      	ldr	r0, [pc, #296]	; (800839c <cppLoop+0xc5c>)
 8008272:	f7fb fd18 	bl	8003ca6 <_ZN9LineTrace14getMinVelocityEv>
 8008276:	ee10 3a10 	vmov	r3, s0
 800827a:	4618      	mov	r0, r3
 800827c:	f7f8 f97c 	bl	8000578 <__aeabi_f2d>
 8008280:	4603      	mov	r3, r0
 8008282:	460c      	mov	r4, r1
 8008284:	461a      	mov	r2, r3
 8008286:	4623      	mov	r3, r4
 8008288:	4849      	ldr	r0, [pc, #292]	; (80083b0 <cppLoop+0xc70>)
 800828a:	f7f8 ff43 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 800828e:	483e      	ldr	r0, [pc, #248]	; (8008388 <cppLoop+0xc48>)
 8008290:	f7f9 ff0c 	bl	80020ac <_ZN8JoyStick8getValueEv>
 8008294:	4603      	mov	r3, r0
 8008296:	2b08      	cmp	r3, #8
 8008298:	bf0c      	ite	eq
 800829a:	2301      	moveq	r3, #1
 800829c:	2300      	movne	r3, #0
 800829e:	b2db      	uxtb	r3, r3
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d022      	beq.n	80082ea <cppLoop+0xbaa>
			led.LR(-1, 1);
 80082a4:	2201      	movs	r2, #1
 80082a6:	f04f 31ff 	mov.w	r1, #4294967295
 80082aa:	4838      	ldr	r0, [pc, #224]	; (800838c <cppLoop+0xc4c>)
 80082ac:	f7fa f81e 	bl	80022ec <_ZN3LED2LREaa>
			HAL_Delay(300);
 80082b0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80082b4:	f001 f90a 	bl	80094cc <HAL_Delay>

			selector_vel++;
 80082b8:	4b3e      	ldr	r3, [pc, #248]	; (80083b4 <cppLoop+0xc74>)
 80082ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80082be:	b29b      	uxth	r3, r3
 80082c0:	3301      	adds	r3, #1
 80082c2:	b29b      	uxth	r3, r3
 80082c4:	b21a      	sxth	r2, r3
 80082c6:	4b3b      	ldr	r3, [pc, #236]	; (80083b4 <cppLoop+0xc74>)
 80082c8:	801a      	strh	r2, [r3, #0]
			if(selector_vel >= 2) selector_vel = 0;
 80082ca:	4b3a      	ldr	r3, [pc, #232]	; (80083b4 <cppLoop+0xc74>)
 80082cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80082d0:	2b01      	cmp	r3, #1
 80082d2:	dd02      	ble.n	80082da <cppLoop+0xb9a>
 80082d4:	4b37      	ldr	r3, [pc, #220]	; (80083b4 <cppLoop+0xc74>)
 80082d6:	2200      	movs	r2, #0
 80082d8:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 80082da:	2200      	movs	r2, #0
 80082dc:	f04f 31ff 	mov.w	r1, #4294967295
 80082e0:	482a      	ldr	r0, [pc, #168]	; (800838c <cppLoop+0xc4c>)
 80082e2:	f7fa f803 	bl	80022ec <_ZN3LED2LREaa>
			line_trace.setMaxVelocity(adj_max_velocity);
			line_trace.setMinVelocity(adj_min_velocity);

			led.LR(-1, 0);
		}
		break;
 80082e6:	f000 bfb0 	b.w	800924a <cppLoop+0x1b0a>
		else if(joy_stick.getValue() == JOY_R){
 80082ea:	4827      	ldr	r0, [pc, #156]	; (8008388 <cppLoop+0xc48>)
 80082ec:	f7f9 fede 	bl	80020ac <_ZN8JoyStick8getValueEv>
 80082f0:	4603      	mov	r3, r0
 80082f2:	2b10      	cmp	r3, #16
 80082f4:	bf0c      	ite	eq
 80082f6:	2301      	moveq	r3, #1
 80082f8:	2300      	movne	r3, #0
 80082fa:	b2db      	uxtb	r3, r3
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d05b      	beq.n	80083b8 <cppLoop+0xc78>
			led.LR(-1, 1);
 8008300:	2201      	movs	r2, #1
 8008302:	f04f 31ff 	mov.w	r1, #4294967295
 8008306:	4821      	ldr	r0, [pc, #132]	; (800838c <cppLoop+0xc4c>)
 8008308:	f7f9 fff0 	bl	80022ec <_ZN3LED2LREaa>
			HAL_Delay(100);
 800830c:	2064      	movs	r0, #100	; 0x64
 800830e:	f001 f8dd 	bl	80094cc <HAL_Delay>
			if(selector_vel == 0)
 8008312:	4b28      	ldr	r3, [pc, #160]	; (80083b4 <cppLoop+0xc74>)
 8008314:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d113      	bne.n	8008344 <cppLoop+0xc04>
				adj_max_velocity = adj_max_velocity + 0.1;
 800831c:	4b20      	ldr	r3, [pc, #128]	; (80083a0 <cppLoop+0xc60>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	4618      	mov	r0, r3
 8008322:	f7f8 f929 	bl	8000578 <__aeabi_f2d>
 8008326:	a316      	add	r3, pc, #88	; (adr r3, 8008380 <cppLoop+0xc40>)
 8008328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800832c:	f7f7 ffc6 	bl	80002bc <__adddf3>
 8008330:	4603      	mov	r3, r0
 8008332:	460c      	mov	r4, r1
 8008334:	4618      	mov	r0, r3
 8008336:	4621      	mov	r1, r4
 8008338:	f7f8 fc6e 	bl	8000c18 <__aeabi_d2f>
 800833c:	4602      	mov	r2, r0
 800833e:	4b18      	ldr	r3, [pc, #96]	; (80083a0 <cppLoop+0xc60>)
 8008340:	601a      	str	r2, [r3, #0]
 8008342:	e012      	b.n	800836a <cppLoop+0xc2a>
				adj_min_velocity = adj_min_velocity + 0.1;
 8008344:	4b18      	ldr	r3, [pc, #96]	; (80083a8 <cppLoop+0xc68>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	4618      	mov	r0, r3
 800834a:	f7f8 f915 	bl	8000578 <__aeabi_f2d>
 800834e:	a30c      	add	r3, pc, #48	; (adr r3, 8008380 <cppLoop+0xc40>)
 8008350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008354:	f7f7 ffb2 	bl	80002bc <__adddf3>
 8008358:	4603      	mov	r3, r0
 800835a:	460c      	mov	r4, r1
 800835c:	4618      	mov	r0, r3
 800835e:	4621      	mov	r1, r4
 8008360:	f7f8 fc5a 	bl	8000c18 <__aeabi_d2f>
 8008364:	4602      	mov	r2, r0
 8008366:	4b10      	ldr	r3, [pc, #64]	; (80083a8 <cppLoop+0xc68>)
 8008368:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 800836a:	2200      	movs	r2, #0
 800836c:	f04f 31ff 	mov.w	r1, #4294967295
 8008370:	4806      	ldr	r0, [pc, #24]	; (800838c <cppLoop+0xc4c>)
 8008372:	f7f9 ffbb 	bl	80022ec <_ZN3LED2LREaa>
		break;
 8008376:	f000 bf68 	b.w	800924a <cppLoop+0x1b0a>
 800837a:	bf00      	nop
 800837c:	f3af 8000 	nop.w
 8008380:	9999999a 	.word	0x9999999a
 8008384:	3fb99999 	.word	0x3fb99999
 8008388:	200005bc 	.word	0x200005bc
 800838c:	200005c8 	.word	0x200005c8
 8008390:	200412b0 	.word	0x200412b0
 8008394:	08019834 	.word	0x08019834
 8008398:	080197f8 	.word	0x080197f8
 800839c:	2001bc14 	.word	0x2001bc14
 80083a0:	200412b8 	.word	0x200412b8
 80083a4:	08019840 	.word	0x08019840
 80083a8:	200412c8 	.word	0x200412c8
 80083ac:	0801981c 	.word	0x0801981c
 80083b0:	08019828 	.word	0x08019828
 80083b4:	20041292 	.word	0x20041292
		else if(joy_stick.getValue() == JOY_L){
 80083b8:	48bb      	ldr	r0, [pc, #748]	; (80086a8 <cppLoop+0xf68>)
 80083ba:	f7f9 fe77 	bl	80020ac <_ZN8JoyStick8getValueEv>
 80083be:	4603      	mov	r3, r0
 80083c0:	2b01      	cmp	r3, #1
 80083c2:	bf0c      	ite	eq
 80083c4:	2301      	moveq	r3, #1
 80083c6:	2300      	movne	r3, #0
 80083c8:	b2db      	uxtb	r3, r3
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d03c      	beq.n	8008448 <cppLoop+0xd08>
			led.LR(-1, 1);
 80083ce:	2201      	movs	r2, #1
 80083d0:	f04f 31ff 	mov.w	r1, #4294967295
 80083d4:	48b5      	ldr	r0, [pc, #724]	; (80086ac <cppLoop+0xf6c>)
 80083d6:	f7f9 ff89 	bl	80022ec <_ZN3LED2LREaa>
			HAL_Delay(100);
 80083da:	2064      	movs	r0, #100	; 0x64
 80083dc:	f001 f876 	bl	80094cc <HAL_Delay>
			if(selector_vel == 0)
 80083e0:	4bb3      	ldr	r3, [pc, #716]	; (80086b0 <cppLoop+0xf70>)
 80083e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d113      	bne.n	8008412 <cppLoop+0xcd2>
				adj_max_velocity = adj_max_velocity - 0.1;
 80083ea:	4bb2      	ldr	r3, [pc, #712]	; (80086b4 <cppLoop+0xf74>)
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	4618      	mov	r0, r3
 80083f0:	f7f8 f8c2 	bl	8000578 <__aeabi_f2d>
 80083f4:	a3aa      	add	r3, pc, #680	; (adr r3, 80086a0 <cppLoop+0xf60>)
 80083f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083fa:	f7f7 ff5d 	bl	80002b8 <__aeabi_dsub>
 80083fe:	4603      	mov	r3, r0
 8008400:	460c      	mov	r4, r1
 8008402:	4618      	mov	r0, r3
 8008404:	4621      	mov	r1, r4
 8008406:	f7f8 fc07 	bl	8000c18 <__aeabi_d2f>
 800840a:	4602      	mov	r2, r0
 800840c:	4ba9      	ldr	r3, [pc, #676]	; (80086b4 <cppLoop+0xf74>)
 800840e:	601a      	str	r2, [r3, #0]
 8008410:	e012      	b.n	8008438 <cppLoop+0xcf8>
				adj_min_velocity = adj_min_velocity - 0.1;
 8008412:	4ba9      	ldr	r3, [pc, #676]	; (80086b8 <cppLoop+0xf78>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	4618      	mov	r0, r3
 8008418:	f7f8 f8ae 	bl	8000578 <__aeabi_f2d>
 800841c:	a3a0      	add	r3, pc, #640	; (adr r3, 80086a0 <cppLoop+0xf60>)
 800841e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008422:	f7f7 ff49 	bl	80002b8 <__aeabi_dsub>
 8008426:	4603      	mov	r3, r0
 8008428:	460c      	mov	r4, r1
 800842a:	4618      	mov	r0, r3
 800842c:	4621      	mov	r1, r4
 800842e:	f7f8 fbf3 	bl	8000c18 <__aeabi_d2f>
 8008432:	4602      	mov	r2, r0
 8008434:	4ba0      	ldr	r3, [pc, #640]	; (80086b8 <cppLoop+0xf78>)
 8008436:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008438:	2200      	movs	r2, #0
 800843a:	f04f 31ff 	mov.w	r1, #4294967295
 800843e:	489b      	ldr	r0, [pc, #620]	; (80086ac <cppLoop+0xf6c>)
 8008440:	f7f9 ff54 	bl	80022ec <_ZN3LED2LREaa>
		break;
 8008444:	f000 bf01 	b.w	800924a <cppLoop+0x1b0a>
		else if(joy_stick.getValue() == JOY_C){
 8008448:	4897      	ldr	r0, [pc, #604]	; (80086a8 <cppLoop+0xf68>)
 800844a:	f7f9 fe2f 	bl	80020ac <_ZN8JoyStick8getValueEv>
 800844e:	4603      	mov	r3, r0
 8008450:	2b02      	cmp	r3, #2
 8008452:	bf0c      	ite	eq
 8008454:	2301      	moveq	r3, #1
 8008456:	2300      	movne	r3, #0
 8008458:	b2db      	uxtb	r3, r3
 800845a:	2b00      	cmp	r3, #0
 800845c:	f000 86f5 	beq.w	800924a <cppLoop+0x1b0a>
			led.LR(-1, 1);
 8008460:	2201      	movs	r2, #1
 8008462:	f04f 31ff 	mov.w	r1, #4294967295
 8008466:	4891      	ldr	r0, [pc, #580]	; (80086ac <cppLoop+0xf6c>)
 8008468:	f7f9 ff40 	bl	80022ec <_ZN3LED2LREaa>
			HAL_Delay(300);
 800846c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008470:	f001 f82c 	bl	80094cc <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL2.TXT", 1, &adj_max_velocity, OVER_WRITE);
 8008474:	2300      	movs	r3, #0
 8008476:	9300      	str	r3, [sp, #0]
 8008478:	4b8e      	ldr	r3, [pc, #568]	; (80086b4 <cppLoop+0xf74>)
 800847a:	2201      	movs	r2, #1
 800847c:	498f      	ldr	r1, [pc, #572]	; (80086bc <cppLoop+0xf7c>)
 800847e:	4890      	ldr	r0, [pc, #576]	; (80086c0 <cppLoop+0xf80>)
 8008480:	f7f9 f9fc 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "MINVEL.TXT", 1, &adj_min_velocity, OVER_WRITE);
 8008484:	2300      	movs	r3, #0
 8008486:	9300      	str	r3, [sp, #0]
 8008488:	4b8b      	ldr	r3, [pc, #556]	; (80086b8 <cppLoop+0xf78>)
 800848a:	2201      	movs	r2, #1
 800848c:	498d      	ldr	r1, [pc, #564]	; (80086c4 <cppLoop+0xf84>)
 800848e:	488c      	ldr	r0, [pc, #560]	; (80086c0 <cppLoop+0xf80>)
 8008490:	f7f9 f9f4 	bl	800187c <sd_write_array_float>
			line_trace.setMaxVelocity(adj_max_velocity);
 8008494:	4b87      	ldr	r3, [pc, #540]	; (80086b4 <cppLoop+0xf74>)
 8008496:	edd3 7a00 	vldr	s15, [r3]
 800849a:	eeb0 0a67 	vmov.f32	s0, s15
 800849e:	488a      	ldr	r0, [pc, #552]	; (80086c8 <cppLoop+0xf88>)
 80084a0:	f7fb fb91 	bl	8003bc6 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 80084a4:	4b84      	ldr	r3, [pc, #528]	; (80086b8 <cppLoop+0xf78>)
 80084a6:	edd3 7a00 	vldr	s15, [r3]
 80084aa:	eeb0 0a67 	vmov.f32	s0, s15
 80084ae:	4886      	ldr	r0, [pc, #536]	; (80086c8 <cppLoop+0xf88>)
 80084b0:	f7fb fba9 	bl	8003c06 <_ZN9LineTrace14setMinVelocityEf>
			led.LR(-1, 0);
 80084b4:	2200      	movs	r2, #0
 80084b6:	f04f 31ff 	mov.w	r1, #4294967295
 80084ba:	487c      	ldr	r0, [pc, #496]	; (80086ac <cppLoop+0xf6c>)
 80084bc:	f7f9 ff16 	bl	80022ec <_ZN3LED2LREaa>
		break;
 80084c0:	f000 bec3 	b.w	800924a <cppLoop+0x1b0a>

	case 5:
		led.fullColor('M');
 80084c4:	214d      	movs	r1, #77	; 0x4d
 80084c6:	4879      	ldr	r0, [pc, #484]	; (80086ac <cppLoop+0xf6c>)
 80084c8:	f7f9 fe54 	bl	8002174 <_ZN3LED9fullColorEc>

		lcd_clear();
 80084cc:	f7f8 fde8 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80084d0:	2100      	movs	r1, #0
 80084d2:	2000      	movs	r0, #0
 80084d4:	f7f8 fdf4 	bl	80010c0 <lcd_locate>
		lcd_printf("3:   %3.1f", adj_max_velocity2);
 80084d8:	4b7c      	ldr	r3, [pc, #496]	; (80086cc <cppLoop+0xf8c>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	4618      	mov	r0, r3
 80084de:	f7f8 f84b 	bl	8000578 <__aeabi_f2d>
 80084e2:	4603      	mov	r3, r0
 80084e4:	460c      	mov	r4, r1
 80084e6:	461a      	mov	r2, r3
 80084e8:	4623      	mov	r3, r4
 80084ea:	4879      	ldr	r0, [pc, #484]	; (80086d0 <cppLoop+0xf90>)
 80084ec:	f7f8 fe12 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80084f0:	2101      	movs	r1, #1
 80084f2:	2000      	movs	r0, #0
 80084f4:	f7f8 fde4 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_min_velocity2);
 80084f8:	4b76      	ldr	r3, [pc, #472]	; (80086d4 <cppLoop+0xf94>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	4618      	mov	r0, r3
 80084fe:	f7f8 f83b 	bl	8000578 <__aeabi_f2d>
 8008502:	4603      	mov	r3, r0
 8008504:	460c      	mov	r4, r1
 8008506:	461a      	mov	r2, r3
 8008508:	4623      	mov	r3, r4
 800850a:	4873      	ldr	r0, [pc, #460]	; (80086d8 <cppLoop+0xf98>)
 800850c:	f7f8 fe02 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8008510:	4865      	ldr	r0, [pc, #404]	; (80086a8 <cppLoop+0xf68>)
 8008512:	f7f9 fdcb 	bl	80020ac <_ZN8JoyStick8getValueEv>
 8008516:	4603      	mov	r3, r0
 8008518:	2b02      	cmp	r3, #2
 800851a:	bf0c      	ite	eq
 800851c:	2301      	moveq	r3, #1
 800851e:	2300      	movne	r3, #0
 8008520:	b2db      	uxtb	r3, r3
 8008522:	2b00      	cmp	r3, #0
 8008524:	f000 8693 	beq.w	800924e <cppLoop+0x1b0e>
			HAL_Delay(500);
 8008528:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800852c:	f000 ffce 	bl	80094cc <HAL_Delay>

			led.LR(1, -1);
 8008530:	f04f 32ff 	mov.w	r2, #4294967295
 8008534:	2101      	movs	r1, #1
 8008536:	485d      	ldr	r0, [pc, #372]	; (80086ac <cppLoop+0xf6c>)
 8008538:	f7f9 fed8 	bl	80022ec <_ZN3LED2LREaa>
			line_trace.setMode(THIRD_RUNNING);
 800853c:	2102      	movs	r1, #2
 800853e:	4862      	ldr	r0, [pc, #392]	; (80086c8 <cppLoop+0xf88>)
 8008540:	f7fb fd78 	bl	8004034 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity2);
 8008544:	4b63      	ldr	r3, [pc, #396]	; (80086d4 <cppLoop+0xf94>)
 8008546:	edd3 7a00 	vldr	s15, [r3]
 800854a:	eeb0 0a67 	vmov.f32	s0, s15
 800854e:	485e      	ldr	r0, [pc, #376]	; (80086c8 <cppLoop+0xf88>)
 8008550:	f7fb fb29 	bl	8003ba6 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity2(adj_max_velocity2);
 8008554:	4b5d      	ldr	r3, [pc, #372]	; (80086cc <cppLoop+0xf8c>)
 8008556:	edd3 7a00 	vldr	s15, [r3]
 800855a:	eeb0 0a67 	vmov.f32	s0, s15
 800855e:	485a      	ldr	r0, [pc, #360]	; (80086c8 <cppLoop+0xf88>)
 8008560:	f7fb fb41 	bl	8003be6 <_ZN9LineTrace15setMaxVelocity2Ef>
			line_trace.setMinVelocity2(adj_min_velocity2);
 8008564:	4b5b      	ldr	r3, [pc, #364]	; (80086d4 <cppLoop+0xf94>)
 8008566:	edd3 7a00 	vldr	s15, [r3]
 800856a:	eeb0 0a67 	vmov.f32	s0, s15
 800856e:	4856      	ldr	r0, [pc, #344]	; (80086c8 <cppLoop+0xf88>)
 8008570:	f7fb fb59 	bl	8003c26 <_ZN9LineTrace15setMinVelocity2Ef>
			line_trace.createVelocityTabele();
 8008574:	4854      	ldr	r0, [pc, #336]	; (80086c8 <cppLoop+0xf88>)
 8008576:	f7fb fe85 	bl	8004284 <_ZN9LineTrace20createVelocityTabeleEv>

			line_trace.running();
 800857a:	4853      	ldr	r0, [pc, #332]	; (80086c8 <cppLoop+0xf88>)
 800857c:	f7fb fd98 	bl	80040b0 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 8008580:	f04f 32ff 	mov.w	r2, #4294967295
 8008584:	2100      	movs	r1, #0
 8008586:	4849      	ldr	r0, [pc, #292]	; (80086ac <cppLoop+0xf6c>)
 8008588:	f7f9 feb0 	bl	80022ec <_ZN3LED2LREaa>
		}

		break;
 800858c:	f000 be5f 	b.w	800924e <cppLoop+0x1b0e>

	case 6:
		led.fullColor('R');
 8008590:	2152      	movs	r1, #82	; 0x52
 8008592:	4846      	ldr	r0, [pc, #280]	; (80086ac <cppLoop+0xf6c>)
 8008594:	f7f9 fdee 	bl	8002174 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008598:	f7f8 fd82 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800859c:	2100      	movs	r1, #0
 800859e:	2000      	movs	r0, #0
 80085a0:	f7f8 fd8e 	bl	80010c0 <lcd_locate>
		lcd_printf("3:   %3.1f", line_trace.getMaxVelocity2());
 80085a4:	4848      	ldr	r0, [pc, #288]	; (80086c8 <cppLoop+0xf88>)
 80085a6:	f7fb fb6e 	bl	8003c86 <_ZN9LineTrace15getMaxVelocity2Ev>
 80085aa:	ee10 3a10 	vmov	r3, s0
 80085ae:	4618      	mov	r0, r3
 80085b0:	f7f7 ffe2 	bl	8000578 <__aeabi_f2d>
 80085b4:	4603      	mov	r3, r0
 80085b6:	460c      	mov	r4, r1
 80085b8:	461a      	mov	r2, r3
 80085ba:	4623      	mov	r3, r4
 80085bc:	4844      	ldr	r0, [pc, #272]	; (80086d0 <cppLoop+0xf90>)
 80085be:	f7f8 fda9 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80085c2:	2101      	movs	r1, #1
 80085c4:	2000      	movs	r0, #0
 80085c6:	f7f8 fd7b 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", line_trace.getMinVelocity2());
 80085ca:	483f      	ldr	r0, [pc, #252]	; (80086c8 <cppLoop+0xf88>)
 80085cc:	f7fb fb7b 	bl	8003cc6 <_ZN9LineTrace15getMinVelocity2Ev>
 80085d0:	ee10 3a10 	vmov	r3, s0
 80085d4:	4618      	mov	r0, r3
 80085d6:	f7f7 ffcf 	bl	8000578 <__aeabi_f2d>
 80085da:	4603      	mov	r3, r0
 80085dc:	460c      	mov	r4, r1
 80085de:	461a      	mov	r2, r3
 80085e0:	4623      	mov	r3, r4
 80085e2:	483e      	ldr	r0, [pc, #248]	; (80086dc <cppLoop+0xf9c>)
 80085e4:	f7f8 fd96 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 80085e8:	482f      	ldr	r0, [pc, #188]	; (80086a8 <cppLoop+0xf68>)
 80085ea:	f7f9 fd5f 	bl	80020ac <_ZN8JoyStick8getValueEv>
 80085ee:	4603      	mov	r3, r0
 80085f0:	2b08      	cmp	r3, #8
 80085f2:	bf0c      	ite	eq
 80085f4:	2301      	moveq	r3, #1
 80085f6:	2300      	movne	r3, #0
 80085f8:	b2db      	uxtb	r3, r3
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d022      	beq.n	8008644 <cppLoop+0xf04>
			led.LR(-1, 1);
 80085fe:	2201      	movs	r2, #1
 8008600:	f04f 31ff 	mov.w	r1, #4294967295
 8008604:	4829      	ldr	r0, [pc, #164]	; (80086ac <cppLoop+0xf6c>)
 8008606:	f7f9 fe71 	bl	80022ec <_ZN3LED2LREaa>
			HAL_Delay(300);
 800860a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800860e:	f000 ff5d 	bl	80094cc <HAL_Delay>

			selector_vel2++;
 8008612:	4b33      	ldr	r3, [pc, #204]	; (80086e0 <cppLoop+0xfa0>)
 8008614:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008618:	b29b      	uxth	r3, r3
 800861a:	3301      	adds	r3, #1
 800861c:	b29b      	uxth	r3, r3
 800861e:	b21a      	sxth	r2, r3
 8008620:	4b2f      	ldr	r3, [pc, #188]	; (80086e0 <cppLoop+0xfa0>)
 8008622:	801a      	strh	r2, [r3, #0]
			if(selector_vel2 >= 2) selector_vel2 = 0;
 8008624:	4b2e      	ldr	r3, [pc, #184]	; (80086e0 <cppLoop+0xfa0>)
 8008626:	f9b3 3000 	ldrsh.w	r3, [r3]
 800862a:	2b01      	cmp	r3, #1
 800862c:	dd02      	ble.n	8008634 <cppLoop+0xef4>
 800862e:	4b2c      	ldr	r3, [pc, #176]	; (80086e0 <cppLoop+0xfa0>)
 8008630:	2200      	movs	r2, #0
 8008632:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008634:	2200      	movs	r2, #0
 8008636:	f04f 31ff 	mov.w	r1, #4294967295
 800863a:	481c      	ldr	r0, [pc, #112]	; (80086ac <cppLoop+0xf6c>)
 800863c:	f7f9 fe56 	bl	80022ec <_ZN3LED2LREaa>
			line_trace.setMinVelocity2(adj_min_velocity2);

			led.LR(-1, 0);
		}

		break;
 8008640:	f000 be07 	b.w	8009252 <cppLoop+0x1b12>
		else if(joy_stick.getValue() == JOY_R){
 8008644:	4818      	ldr	r0, [pc, #96]	; (80086a8 <cppLoop+0xf68>)
 8008646:	f7f9 fd31 	bl	80020ac <_ZN8JoyStick8getValueEv>
 800864a:	4603      	mov	r3, r0
 800864c:	2b10      	cmp	r3, #16
 800864e:	bf0c      	ite	eq
 8008650:	2301      	moveq	r3, #1
 8008652:	2300      	movne	r3, #0
 8008654:	b2db      	uxtb	r3, r3
 8008656:	2b00      	cmp	r3, #0
 8008658:	d05f      	beq.n	800871a <cppLoop+0xfda>
			led.LR(-1, 1);
 800865a:	2201      	movs	r2, #1
 800865c:	f04f 31ff 	mov.w	r1, #4294967295
 8008660:	4812      	ldr	r0, [pc, #72]	; (80086ac <cppLoop+0xf6c>)
 8008662:	f7f9 fe43 	bl	80022ec <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008666:	2064      	movs	r0, #100	; 0x64
 8008668:	f000 ff30 	bl	80094cc <HAL_Delay>
			if(selector_vel2 == 0)
 800866c:	4b1c      	ldr	r3, [pc, #112]	; (80086e0 <cppLoop+0xfa0>)
 800866e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d136      	bne.n	80086e4 <cppLoop+0xfa4>
				adj_max_velocity2 = adj_max_velocity2 + 0.1;
 8008676:	4b15      	ldr	r3, [pc, #84]	; (80086cc <cppLoop+0xf8c>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	4618      	mov	r0, r3
 800867c:	f7f7 ff7c 	bl	8000578 <__aeabi_f2d>
 8008680:	a307      	add	r3, pc, #28	; (adr r3, 80086a0 <cppLoop+0xf60>)
 8008682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008686:	f7f7 fe19 	bl	80002bc <__adddf3>
 800868a:	4603      	mov	r3, r0
 800868c:	460c      	mov	r4, r1
 800868e:	4618      	mov	r0, r3
 8008690:	4621      	mov	r1, r4
 8008692:	f7f8 fac1 	bl	8000c18 <__aeabi_d2f>
 8008696:	4602      	mov	r2, r0
 8008698:	4b0c      	ldr	r3, [pc, #48]	; (80086cc <cppLoop+0xf8c>)
 800869a:	601a      	str	r2, [r3, #0]
 800869c:	e035      	b.n	800870a <cppLoop+0xfca>
 800869e:	bf00      	nop
 80086a0:	9999999a 	.word	0x9999999a
 80086a4:	3fb99999 	.word	0x3fb99999
 80086a8:	200005bc 	.word	0x200005bc
 80086ac:	200005c8 	.word	0x200005c8
 80086b0:	20041292 	.word	0x20041292
 80086b4:	200412b8 	.word	0x200412b8
 80086b8:	200412c8 	.word	0x200412c8
 80086bc:	0801984c 	.word	0x0801984c
 80086c0:	080197f8 	.word	0x080197f8
 80086c4:	08019858 	.word	0x08019858
 80086c8:	2001bc14 	.word	0x2001bc14
 80086cc:	200412c0 	.word	0x200412c0
 80086d0:	08019864 	.word	0x08019864
 80086d4:	200412d0 	.word	0x200412d0
 80086d8:	0801981c 	.word	0x0801981c
 80086dc:	08019828 	.word	0x08019828
 80086e0:	20041294 	.word	0x20041294
				adj_min_velocity2 = adj_min_velocity2 + 0.1;
 80086e4:	4bba      	ldr	r3, [pc, #744]	; (80089d0 <cppLoop+0x1290>)
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	4618      	mov	r0, r3
 80086ea:	f7f7 ff45 	bl	8000578 <__aeabi_f2d>
 80086ee:	a3b6      	add	r3, pc, #728	; (adr r3, 80089c8 <cppLoop+0x1288>)
 80086f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086f4:	f7f7 fde2 	bl	80002bc <__adddf3>
 80086f8:	4603      	mov	r3, r0
 80086fa:	460c      	mov	r4, r1
 80086fc:	4618      	mov	r0, r3
 80086fe:	4621      	mov	r1, r4
 8008700:	f7f8 fa8a 	bl	8000c18 <__aeabi_d2f>
 8008704:	4602      	mov	r2, r0
 8008706:	4bb2      	ldr	r3, [pc, #712]	; (80089d0 <cppLoop+0x1290>)
 8008708:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 800870a:	2200      	movs	r2, #0
 800870c:	f04f 31ff 	mov.w	r1, #4294967295
 8008710:	48b0      	ldr	r0, [pc, #704]	; (80089d4 <cppLoop+0x1294>)
 8008712:	f7f9 fdeb 	bl	80022ec <_ZN3LED2LREaa>
		break;
 8008716:	f000 bd9c 	b.w	8009252 <cppLoop+0x1b12>
		else if(joy_stick.getValue() == JOY_L){
 800871a:	48af      	ldr	r0, [pc, #700]	; (80089d8 <cppLoop+0x1298>)
 800871c:	f7f9 fcc6 	bl	80020ac <_ZN8JoyStick8getValueEv>
 8008720:	4603      	mov	r3, r0
 8008722:	2b01      	cmp	r3, #1
 8008724:	bf0c      	ite	eq
 8008726:	2301      	moveq	r3, #1
 8008728:	2300      	movne	r3, #0
 800872a:	b2db      	uxtb	r3, r3
 800872c:	2b00      	cmp	r3, #0
 800872e:	d03c      	beq.n	80087aa <cppLoop+0x106a>
			led.LR(-1, 1);
 8008730:	2201      	movs	r2, #1
 8008732:	f04f 31ff 	mov.w	r1, #4294967295
 8008736:	48a7      	ldr	r0, [pc, #668]	; (80089d4 <cppLoop+0x1294>)
 8008738:	f7f9 fdd8 	bl	80022ec <_ZN3LED2LREaa>
			HAL_Delay(100);
 800873c:	2064      	movs	r0, #100	; 0x64
 800873e:	f000 fec5 	bl	80094cc <HAL_Delay>
			if(selector_vel2 == 0)
 8008742:	4ba6      	ldr	r3, [pc, #664]	; (80089dc <cppLoop+0x129c>)
 8008744:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d113      	bne.n	8008774 <cppLoop+0x1034>
				adj_max_velocity2 = adj_max_velocity2 - 0.1;
 800874c:	4ba4      	ldr	r3, [pc, #656]	; (80089e0 <cppLoop+0x12a0>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	4618      	mov	r0, r3
 8008752:	f7f7 ff11 	bl	8000578 <__aeabi_f2d>
 8008756:	a39c      	add	r3, pc, #624	; (adr r3, 80089c8 <cppLoop+0x1288>)
 8008758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800875c:	f7f7 fdac 	bl	80002b8 <__aeabi_dsub>
 8008760:	4603      	mov	r3, r0
 8008762:	460c      	mov	r4, r1
 8008764:	4618      	mov	r0, r3
 8008766:	4621      	mov	r1, r4
 8008768:	f7f8 fa56 	bl	8000c18 <__aeabi_d2f>
 800876c:	4602      	mov	r2, r0
 800876e:	4b9c      	ldr	r3, [pc, #624]	; (80089e0 <cppLoop+0x12a0>)
 8008770:	601a      	str	r2, [r3, #0]
 8008772:	e012      	b.n	800879a <cppLoop+0x105a>
				adj_min_velocity2 = adj_min_velocity2 - 0.1;
 8008774:	4b96      	ldr	r3, [pc, #600]	; (80089d0 <cppLoop+0x1290>)
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	4618      	mov	r0, r3
 800877a:	f7f7 fefd 	bl	8000578 <__aeabi_f2d>
 800877e:	a392      	add	r3, pc, #584	; (adr r3, 80089c8 <cppLoop+0x1288>)
 8008780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008784:	f7f7 fd98 	bl	80002b8 <__aeabi_dsub>
 8008788:	4603      	mov	r3, r0
 800878a:	460c      	mov	r4, r1
 800878c:	4618      	mov	r0, r3
 800878e:	4621      	mov	r1, r4
 8008790:	f7f8 fa42 	bl	8000c18 <__aeabi_d2f>
 8008794:	4602      	mov	r2, r0
 8008796:	4b8e      	ldr	r3, [pc, #568]	; (80089d0 <cppLoop+0x1290>)
 8008798:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 800879a:	2200      	movs	r2, #0
 800879c:	f04f 31ff 	mov.w	r1, #4294967295
 80087a0:	488c      	ldr	r0, [pc, #560]	; (80089d4 <cppLoop+0x1294>)
 80087a2:	f7f9 fda3 	bl	80022ec <_ZN3LED2LREaa>
		break;
 80087a6:	f000 bd54 	b.w	8009252 <cppLoop+0x1b12>
		else if(joy_stick.getValue() == JOY_C){
 80087aa:	488b      	ldr	r0, [pc, #556]	; (80089d8 <cppLoop+0x1298>)
 80087ac:	f7f9 fc7e 	bl	80020ac <_ZN8JoyStick8getValueEv>
 80087b0:	4603      	mov	r3, r0
 80087b2:	2b02      	cmp	r3, #2
 80087b4:	bf0c      	ite	eq
 80087b6:	2301      	moveq	r3, #1
 80087b8:	2300      	movne	r3, #0
 80087ba:	b2db      	uxtb	r3, r3
 80087bc:	2b00      	cmp	r3, #0
 80087be:	f000 8548 	beq.w	8009252 <cppLoop+0x1b12>
			led.LR(-1, 1);
 80087c2:	2201      	movs	r2, #1
 80087c4:	f04f 31ff 	mov.w	r1, #4294967295
 80087c8:	4882      	ldr	r0, [pc, #520]	; (80089d4 <cppLoop+0x1294>)
 80087ca:	f7f9 fd8f 	bl	80022ec <_ZN3LED2LREaa>
			HAL_Delay(300);
 80087ce:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80087d2:	f000 fe7b 	bl	80094cc <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL3.TXT", 1, &adj_max_velocity2, OVER_WRITE);
 80087d6:	2300      	movs	r3, #0
 80087d8:	9300      	str	r3, [sp, #0]
 80087da:	4b81      	ldr	r3, [pc, #516]	; (80089e0 <cppLoop+0x12a0>)
 80087dc:	2201      	movs	r2, #1
 80087de:	4981      	ldr	r1, [pc, #516]	; (80089e4 <cppLoop+0x12a4>)
 80087e0:	4881      	ldr	r0, [pc, #516]	; (80089e8 <cppLoop+0x12a8>)
 80087e2:	f7f9 f84b 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "MINVEL2.TXT", 1, &adj_min_velocity2, OVER_WRITE);
 80087e6:	2300      	movs	r3, #0
 80087e8:	9300      	str	r3, [sp, #0]
 80087ea:	4b79      	ldr	r3, [pc, #484]	; (80089d0 <cppLoop+0x1290>)
 80087ec:	2201      	movs	r2, #1
 80087ee:	497f      	ldr	r1, [pc, #508]	; (80089ec <cppLoop+0x12ac>)
 80087f0:	487d      	ldr	r0, [pc, #500]	; (80089e8 <cppLoop+0x12a8>)
 80087f2:	f7f9 f843 	bl	800187c <sd_write_array_float>
			line_trace.setMaxVelocity2(adj_max_velocity2);
 80087f6:	4b7a      	ldr	r3, [pc, #488]	; (80089e0 <cppLoop+0x12a0>)
 80087f8:	edd3 7a00 	vldr	s15, [r3]
 80087fc:	eeb0 0a67 	vmov.f32	s0, s15
 8008800:	487b      	ldr	r0, [pc, #492]	; (80089f0 <cppLoop+0x12b0>)
 8008802:	f7fb f9f0 	bl	8003be6 <_ZN9LineTrace15setMaxVelocity2Ef>
			line_trace.setMinVelocity2(adj_min_velocity2);
 8008806:	4b72      	ldr	r3, [pc, #456]	; (80089d0 <cppLoop+0x1290>)
 8008808:	edd3 7a00 	vldr	s15, [r3]
 800880c:	eeb0 0a67 	vmov.f32	s0, s15
 8008810:	4877      	ldr	r0, [pc, #476]	; (80089f0 <cppLoop+0x12b0>)
 8008812:	f7fb fa08 	bl	8003c26 <_ZN9LineTrace15setMinVelocity2Ef>
			led.LR(-1, 0);
 8008816:	2200      	movs	r2, #0
 8008818:	f04f 31ff 	mov.w	r1, #4294967295
 800881c:	486d      	ldr	r0, [pc, #436]	; (80089d4 <cppLoop+0x1294>)
 800881e:	f7f9 fd65 	bl	80022ec <_ZN3LED2LREaa>
		break;
 8008822:	f000 bd16 	b.w	8009252 <cppLoop+0x1b12>

	case 7:
		led.fullColor('W');
 8008826:	2157      	movs	r1, #87	; 0x57
 8008828:	486a      	ldr	r0, [pc, #424]	; (80089d4 <cppLoop+0x1294>)
 800882a:	f7f9 fca3 	bl	8002174 <_ZN3LED9fullColorEc>

		lcd_clear();
 800882e:	f7f8 fc37 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008832:	2100      	movs	r1, #0
 8008834:	2000      	movs	r0, #0
 8008836:	f7f8 fc43 	bl	80010c0 <lcd_locate>
		lcd_printf("ACC:%4.1f", line_trace.getMaxAcc());
 800883a:	486d      	ldr	r0, [pc, #436]	; (80089f0 <cppLoop+0x12b0>)
 800883c:	f7fb fa87 	bl	8003d4e <_ZN9LineTrace9getMaxAccEv>
 8008840:	ee10 3a10 	vmov	r3, s0
 8008844:	4618      	mov	r0, r3
 8008846:	f7f7 fe97 	bl	8000578 <__aeabi_f2d>
 800884a:	4603      	mov	r3, r0
 800884c:	460c      	mov	r4, r1
 800884e:	461a      	mov	r2, r3
 8008850:	4623      	mov	r3, r4
 8008852:	4868      	ldr	r0, [pc, #416]	; (80089f4 <cppLoop+0x12b4>)
 8008854:	f7f8 fc5e 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008858:	2101      	movs	r1, #1
 800885a:	2000      	movs	r0, #0
 800885c:	f7f8 fc30 	bl	80010c0 <lcd_locate>
		lcd_printf("DEC:%4.1f", line_trace.getMaxDec());
 8008860:	4863      	ldr	r0, [pc, #396]	; (80089f0 <cppLoop+0x12b0>)
 8008862:	f7fb faaa 	bl	8003dba <_ZN9LineTrace9getMaxDecEv>
 8008866:	ee10 3a10 	vmov	r3, s0
 800886a:	4618      	mov	r0, r3
 800886c:	f7f7 fe84 	bl	8000578 <__aeabi_f2d>
 8008870:	4603      	mov	r3, r0
 8008872:	460c      	mov	r4, r1
 8008874:	461a      	mov	r2, r3
 8008876:	4623      	mov	r3, r4
 8008878:	485f      	ldr	r0, [pc, #380]	; (80089f8 <cppLoop+0x12b8>)
 800887a:	f7f8 fc4b 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 800887e:	4856      	ldr	r0, [pc, #344]	; (80089d8 <cppLoop+0x1298>)
 8008880:	f7f9 fc14 	bl	80020ac <_ZN8JoyStick8getValueEv>
 8008884:	4603      	mov	r3, r0
 8008886:	2b08      	cmp	r3, #8
 8008888:	bf0c      	ite	eq
 800888a:	2301      	moveq	r3, #1
 800888c:	2300      	movne	r3, #0
 800888e:	b2db      	uxtb	r3, r3
 8008890:	2b00      	cmp	r3, #0
 8008892:	d022      	beq.n	80088da <cppLoop+0x119a>
			led.LR(-1, 1);
 8008894:	2201      	movs	r2, #1
 8008896:	f04f 31ff 	mov.w	r1, #4294967295
 800889a:	484e      	ldr	r0, [pc, #312]	; (80089d4 <cppLoop+0x1294>)
 800889c:	f7f9 fd26 	bl	80022ec <_ZN3LED2LREaa>
			HAL_Delay(300);
 80088a0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80088a4:	f000 fe12 	bl	80094cc <HAL_Delay>

			selector_acc++;
 80088a8:	4b54      	ldr	r3, [pc, #336]	; (80089fc <cppLoop+0x12bc>)
 80088aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80088ae:	b29b      	uxth	r3, r3
 80088b0:	3301      	adds	r3, #1
 80088b2:	b29b      	uxth	r3, r3
 80088b4:	b21a      	sxth	r2, r3
 80088b6:	4b51      	ldr	r3, [pc, #324]	; (80089fc <cppLoop+0x12bc>)
 80088b8:	801a      	strh	r2, [r3, #0]
			if(selector_acc >= 2) selector_acc = 0;
 80088ba:	4b50      	ldr	r3, [pc, #320]	; (80089fc <cppLoop+0x12bc>)
 80088bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80088c0:	2b01      	cmp	r3, #1
 80088c2:	dd02      	ble.n	80088ca <cppLoop+0x118a>
 80088c4:	4b4d      	ldr	r3, [pc, #308]	; (80089fc <cppLoop+0x12bc>)
 80088c6:	2200      	movs	r2, #0
 80088c8:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 80088ca:	2200      	movs	r2, #0
 80088cc:	f04f 31ff 	mov.w	r1, #4294967295
 80088d0:	4840      	ldr	r0, [pc, #256]	; (80089d4 <cppLoop+0x1294>)
 80088d2:	f7f9 fd0b 	bl	80022ec <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "DEC.TXT", 1, &adj_dec, OVER_WRITE);
			line_trace.setMaxAccDec(adj_acc, adj_dec);

			led.LR(-1, 0);
		}
		break;
 80088d6:	f000 bcbe 	b.w	8009256 <cppLoop+0x1b16>
		else if(joy_stick.getValue() == JOY_R){
 80088da:	483f      	ldr	r0, [pc, #252]	; (80089d8 <cppLoop+0x1298>)
 80088dc:	f7f9 fbe6 	bl	80020ac <_ZN8JoyStick8getValueEv>
 80088e0:	4603      	mov	r3, r0
 80088e2:	2b10      	cmp	r3, #16
 80088e4:	bf0c      	ite	eq
 80088e6:	2301      	moveq	r3, #1
 80088e8:	2300      	movne	r3, #0
 80088ea:	b2db      	uxtb	r3, r3
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d03c      	beq.n	800896a <cppLoop+0x122a>
			led.LR(-1, 1);
 80088f0:	2201      	movs	r2, #1
 80088f2:	f04f 31ff 	mov.w	r1, #4294967295
 80088f6:	4837      	ldr	r0, [pc, #220]	; (80089d4 <cppLoop+0x1294>)
 80088f8:	f7f9 fcf8 	bl	80022ec <_ZN3LED2LREaa>
			HAL_Delay(100);
 80088fc:	2064      	movs	r0, #100	; 0x64
 80088fe:	f000 fde5 	bl	80094cc <HAL_Delay>
			if(selector_acc == 0){
 8008902:	4b3e      	ldr	r3, [pc, #248]	; (80089fc <cppLoop+0x12bc>)
 8008904:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d113      	bne.n	8008934 <cppLoop+0x11f4>
				adj_acc = adj_acc + 0.1;
 800890c:	4b3c      	ldr	r3, [pc, #240]	; (8008a00 <cppLoop+0x12c0>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	4618      	mov	r0, r3
 8008912:	f7f7 fe31 	bl	8000578 <__aeabi_f2d>
 8008916:	a32c      	add	r3, pc, #176	; (adr r3, 80089c8 <cppLoop+0x1288>)
 8008918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800891c:	f7f7 fcce 	bl	80002bc <__adddf3>
 8008920:	4603      	mov	r3, r0
 8008922:	460c      	mov	r4, r1
 8008924:	4618      	mov	r0, r3
 8008926:	4621      	mov	r1, r4
 8008928:	f7f8 f976 	bl	8000c18 <__aeabi_d2f>
 800892c:	4602      	mov	r2, r0
 800892e:	4b34      	ldr	r3, [pc, #208]	; (8008a00 <cppLoop+0x12c0>)
 8008930:	601a      	str	r2, [r3, #0]
 8008932:	e012      	b.n	800895a <cppLoop+0x121a>
				adj_dec = adj_dec + 0.1;
 8008934:	4b33      	ldr	r3, [pc, #204]	; (8008a04 <cppLoop+0x12c4>)
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	4618      	mov	r0, r3
 800893a:	f7f7 fe1d 	bl	8000578 <__aeabi_f2d>
 800893e:	a322      	add	r3, pc, #136	; (adr r3, 80089c8 <cppLoop+0x1288>)
 8008940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008944:	f7f7 fcba 	bl	80002bc <__adddf3>
 8008948:	4603      	mov	r3, r0
 800894a:	460c      	mov	r4, r1
 800894c:	4618      	mov	r0, r3
 800894e:	4621      	mov	r1, r4
 8008950:	f7f8 f962 	bl	8000c18 <__aeabi_d2f>
 8008954:	4602      	mov	r2, r0
 8008956:	4b2b      	ldr	r3, [pc, #172]	; (8008a04 <cppLoop+0x12c4>)
 8008958:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 800895a:	2200      	movs	r2, #0
 800895c:	f04f 31ff 	mov.w	r1, #4294967295
 8008960:	481c      	ldr	r0, [pc, #112]	; (80089d4 <cppLoop+0x1294>)
 8008962:	f7f9 fcc3 	bl	80022ec <_ZN3LED2LREaa>
		break;
 8008966:	f000 bc76 	b.w	8009256 <cppLoop+0x1b16>
		else if(joy_stick.getValue() == JOY_L){
 800896a:	481b      	ldr	r0, [pc, #108]	; (80089d8 <cppLoop+0x1298>)
 800896c:	f7f9 fb9e 	bl	80020ac <_ZN8JoyStick8getValueEv>
 8008970:	4603      	mov	r3, r0
 8008972:	2b01      	cmp	r3, #1
 8008974:	bf0c      	ite	eq
 8008976:	2301      	moveq	r3, #1
 8008978:	2300      	movne	r3, #0
 800897a:	b2db      	uxtb	r3, r3
 800897c:	2b00      	cmp	r3, #0
 800897e:	d05e      	beq.n	8008a3e <cppLoop+0x12fe>
			led.LR(-1, 1);
 8008980:	2201      	movs	r2, #1
 8008982:	f04f 31ff 	mov.w	r1, #4294967295
 8008986:	4813      	ldr	r0, [pc, #76]	; (80089d4 <cppLoop+0x1294>)
 8008988:	f7f9 fcb0 	bl	80022ec <_ZN3LED2LREaa>
			HAL_Delay(100);
 800898c:	2064      	movs	r0, #100	; 0x64
 800898e:	f000 fd9d 	bl	80094cc <HAL_Delay>
			if(selector_acc == 0){
 8008992:	4b1a      	ldr	r3, [pc, #104]	; (80089fc <cppLoop+0x12bc>)
 8008994:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d135      	bne.n	8008a08 <cppLoop+0x12c8>
				adj_acc = adj_acc - 0.1;
 800899c:	4b18      	ldr	r3, [pc, #96]	; (8008a00 <cppLoop+0x12c0>)
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	4618      	mov	r0, r3
 80089a2:	f7f7 fde9 	bl	8000578 <__aeabi_f2d>
 80089a6:	a308      	add	r3, pc, #32	; (adr r3, 80089c8 <cppLoop+0x1288>)
 80089a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ac:	f7f7 fc84 	bl	80002b8 <__aeabi_dsub>
 80089b0:	4603      	mov	r3, r0
 80089b2:	460c      	mov	r4, r1
 80089b4:	4618      	mov	r0, r3
 80089b6:	4621      	mov	r1, r4
 80089b8:	f7f8 f92e 	bl	8000c18 <__aeabi_d2f>
 80089bc:	4602      	mov	r2, r0
 80089be:	4b10      	ldr	r3, [pc, #64]	; (8008a00 <cppLoop+0x12c0>)
 80089c0:	601a      	str	r2, [r3, #0]
 80089c2:	e034      	b.n	8008a2e <cppLoop+0x12ee>
 80089c4:	f3af 8000 	nop.w
 80089c8:	9999999a 	.word	0x9999999a
 80089cc:	3fb99999 	.word	0x3fb99999
 80089d0:	200412d0 	.word	0x200412d0
 80089d4:	200005c8 	.word	0x200005c8
 80089d8:	200005bc 	.word	0x200005bc
 80089dc:	20041294 	.word	0x20041294
 80089e0:	200412c0 	.word	0x200412c0
 80089e4:	08019870 	.word	0x08019870
 80089e8:	080197f8 	.word	0x080197f8
 80089ec:	0801987c 	.word	0x0801987c
 80089f0:	2001bc14 	.word	0x2001bc14
 80089f4:	08019888 	.word	0x08019888
 80089f8:	08019894 	.word	0x08019894
 80089fc:	2004128e 	.word	0x2004128e
 8008a00:	200412d8 	.word	0x200412d8
 8008a04:	200412e0 	.word	0x200412e0
				adj_dec = adj_dec - 0.1;
 8008a08:	4bbd      	ldr	r3, [pc, #756]	; (8008d00 <cppLoop+0x15c0>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	f7f7 fdb3 	bl	8000578 <__aeabi_f2d>
 8008a12:	a3b9      	add	r3, pc, #740	; (adr r3, 8008cf8 <cppLoop+0x15b8>)
 8008a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a18:	f7f7 fc4e 	bl	80002b8 <__aeabi_dsub>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	460c      	mov	r4, r1
 8008a20:	4618      	mov	r0, r3
 8008a22:	4621      	mov	r1, r4
 8008a24:	f7f8 f8f8 	bl	8000c18 <__aeabi_d2f>
 8008a28:	4602      	mov	r2, r0
 8008a2a:	4bb5      	ldr	r3, [pc, #724]	; (8008d00 <cppLoop+0x15c0>)
 8008a2c:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008a2e:	2200      	movs	r2, #0
 8008a30:	f04f 31ff 	mov.w	r1, #4294967295
 8008a34:	48b3      	ldr	r0, [pc, #716]	; (8008d04 <cppLoop+0x15c4>)
 8008a36:	f7f9 fc59 	bl	80022ec <_ZN3LED2LREaa>
		break;
 8008a3a:	f000 bc0c 	b.w	8009256 <cppLoop+0x1b16>
		else if(joy_stick.getValue() == JOY_C){
 8008a3e:	48b2      	ldr	r0, [pc, #712]	; (8008d08 <cppLoop+0x15c8>)
 8008a40:	f7f9 fb34 	bl	80020ac <_ZN8JoyStick8getValueEv>
 8008a44:	4603      	mov	r3, r0
 8008a46:	2b02      	cmp	r3, #2
 8008a48:	bf0c      	ite	eq
 8008a4a:	2301      	moveq	r3, #1
 8008a4c:	2300      	movne	r3, #0
 8008a4e:	b2db      	uxtb	r3, r3
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	f000 8400 	beq.w	8009256 <cppLoop+0x1b16>
			led.LR(-1, 1);
 8008a56:	2201      	movs	r2, #1
 8008a58:	f04f 31ff 	mov.w	r1, #4294967295
 8008a5c:	48a9      	ldr	r0, [pc, #676]	; (8008d04 <cppLoop+0x15c4>)
 8008a5e:	f7f9 fc45 	bl	80022ec <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008a62:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008a66:	f000 fd31 	bl	80094cc <HAL_Delay>
			sd_write_array_float("PARAMS", "ACC.TXT", 1, &adj_acc, OVER_WRITE);
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	9300      	str	r3, [sp, #0]
 8008a6e:	4ba7      	ldr	r3, [pc, #668]	; (8008d0c <cppLoop+0x15cc>)
 8008a70:	2201      	movs	r2, #1
 8008a72:	49a7      	ldr	r1, [pc, #668]	; (8008d10 <cppLoop+0x15d0>)
 8008a74:	48a7      	ldr	r0, [pc, #668]	; (8008d14 <cppLoop+0x15d4>)
 8008a76:	f7f8 ff01 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "DEC.TXT", 1, &adj_dec, OVER_WRITE);
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	9300      	str	r3, [sp, #0]
 8008a7e:	4ba0      	ldr	r3, [pc, #640]	; (8008d00 <cppLoop+0x15c0>)
 8008a80:	2201      	movs	r2, #1
 8008a82:	49a5      	ldr	r1, [pc, #660]	; (8008d18 <cppLoop+0x15d8>)
 8008a84:	48a3      	ldr	r0, [pc, #652]	; (8008d14 <cppLoop+0x15d4>)
 8008a86:	f7f8 fef9 	bl	800187c <sd_write_array_float>
			line_trace.setMaxAccDec(adj_acc, adj_dec);
 8008a8a:	4ba0      	ldr	r3, [pc, #640]	; (8008d0c <cppLoop+0x15cc>)
 8008a8c:	edd3 7a00 	vldr	s15, [r3]
 8008a90:	4b9b      	ldr	r3, [pc, #620]	; (8008d00 <cppLoop+0x15c0>)
 8008a92:	ed93 7a00 	vldr	s14, [r3]
 8008a96:	eef0 0a47 	vmov.f32	s1, s14
 8008a9a:	eeb0 0a67 	vmov.f32	s0, s15
 8008a9e:	489f      	ldr	r0, [pc, #636]	; (8008d1c <cppLoop+0x15dc>)
 8008aa0:	f7fb f921 	bl	8003ce6 <_ZN9LineTrace12setMaxAccDecEff>
			led.LR(-1, 0);
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	f04f 31ff 	mov.w	r1, #4294967295
 8008aaa:	4896      	ldr	r0, [pc, #600]	; (8008d04 <cppLoop+0x15c4>)
 8008aac:	f7f9 fc1e 	bl	80022ec <_ZN3LED2LREaa>
		break;
 8008ab0:	e3d1      	b.n	8009256 <cppLoop+0x1b16>

	case 8:
		led.fullColor('W');
 8008ab2:	2157      	movs	r1, #87	; 0x57
 8008ab4:	4893      	ldr	r0, [pc, #588]	; (8008d04 <cppLoop+0x15c4>)
 8008ab6:	f7f9 fb5d 	bl	8002174 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008aba:	f7f8 faf1 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008abe:	2100      	movs	r1, #0
 8008ac0:	2000      	movs	r0, #0
 8008ac2:	f7f8 fafd 	bl	80010c0 <lcd_locate>
		lcd_printf("ACC2:%3.1f", line_trace.getMaxAcc2());
 8008ac6:	4895      	ldr	r0, [pc, #596]	; (8008d1c <cppLoop+0x15dc>)
 8008ac8:	f7fb f965 	bl	8003d96 <_ZN9LineTrace10getMaxAcc2Ev>
 8008acc:	ee10 3a10 	vmov	r3, s0
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	f7f7 fd51 	bl	8000578 <__aeabi_f2d>
 8008ad6:	4603      	mov	r3, r0
 8008ad8:	460c      	mov	r4, r1
 8008ada:	461a      	mov	r2, r3
 8008adc:	4623      	mov	r3, r4
 8008ade:	4890      	ldr	r0, [pc, #576]	; (8008d20 <cppLoop+0x15e0>)
 8008ae0:	f7f8 fb18 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008ae4:	2101      	movs	r1, #1
 8008ae6:	2000      	movs	r0, #0
 8008ae8:	f7f8 faea 	bl	80010c0 <lcd_locate>
		lcd_printf("DEC2:%3.1f", line_trace.getMaxDec2());
 8008aec:	488b      	ldr	r0, [pc, #556]	; (8008d1c <cppLoop+0x15dc>)
 8008aee:	f7fb f940 	bl	8003d72 <_ZN9LineTrace10getMaxDec2Ev>
 8008af2:	ee10 3a10 	vmov	r3, s0
 8008af6:	4618      	mov	r0, r3
 8008af8:	f7f7 fd3e 	bl	8000578 <__aeabi_f2d>
 8008afc:	4603      	mov	r3, r0
 8008afe:	460c      	mov	r4, r1
 8008b00:	461a      	mov	r2, r3
 8008b02:	4623      	mov	r3, r4
 8008b04:	4887      	ldr	r0, [pc, #540]	; (8008d24 <cppLoop+0x15e4>)
 8008b06:	f7f8 fb05 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8008b0a:	487f      	ldr	r0, [pc, #508]	; (8008d08 <cppLoop+0x15c8>)
 8008b0c:	f7f9 face 	bl	80020ac <_ZN8JoyStick8getValueEv>
 8008b10:	4603      	mov	r3, r0
 8008b12:	2b08      	cmp	r3, #8
 8008b14:	bf0c      	ite	eq
 8008b16:	2301      	moveq	r3, #1
 8008b18:	2300      	movne	r3, #0
 8008b1a:	b2db      	uxtb	r3, r3
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d021      	beq.n	8008b64 <cppLoop+0x1424>
			led.LR(-1, 1);
 8008b20:	2201      	movs	r2, #1
 8008b22:	f04f 31ff 	mov.w	r1, #4294967295
 8008b26:	4877      	ldr	r0, [pc, #476]	; (8008d04 <cppLoop+0x15c4>)
 8008b28:	f7f9 fbe0 	bl	80022ec <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008b2c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008b30:	f000 fccc 	bl	80094cc <HAL_Delay>

			selector_acc2++;
 8008b34:	4b7c      	ldr	r3, [pc, #496]	; (8008d28 <cppLoop+0x15e8>)
 8008b36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008b3a:	b29b      	uxth	r3, r3
 8008b3c:	3301      	adds	r3, #1
 8008b3e:	b29b      	uxth	r3, r3
 8008b40:	b21a      	sxth	r2, r3
 8008b42:	4b79      	ldr	r3, [pc, #484]	; (8008d28 <cppLoop+0x15e8>)
 8008b44:	801a      	strh	r2, [r3, #0]
			if(selector_acc2 >= 2) selector_acc2 = 0;
 8008b46:	4b78      	ldr	r3, [pc, #480]	; (8008d28 <cppLoop+0x15e8>)
 8008b48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008b4c:	2b01      	cmp	r3, #1
 8008b4e:	dd02      	ble.n	8008b56 <cppLoop+0x1416>
 8008b50:	4b75      	ldr	r3, [pc, #468]	; (8008d28 <cppLoop+0x15e8>)
 8008b52:	2200      	movs	r2, #0
 8008b54:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008b56:	2200      	movs	r2, #0
 8008b58:	f04f 31ff 	mov.w	r1, #4294967295
 8008b5c:	4869      	ldr	r0, [pc, #420]	; (8008d04 <cppLoop+0x15c4>)
 8008b5e:	f7f9 fbc5 	bl	80022ec <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "DEC2.TXT", 1, &adj_dec2, OVER_WRITE);
			line_trace.setMaxAccDec2(adj_acc2, adj_dec2);

			led.LR(-1, 0);
		}
		break;
 8008b62:	e37a      	b.n	800925a <cppLoop+0x1b1a>
		else if(joy_stick.getValue() == JOY_R){
 8008b64:	4868      	ldr	r0, [pc, #416]	; (8008d08 <cppLoop+0x15c8>)
 8008b66:	f7f9 faa1 	bl	80020ac <_ZN8JoyStick8getValueEv>
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	2b10      	cmp	r3, #16
 8008b6e:	bf0c      	ite	eq
 8008b70:	2301      	moveq	r3, #1
 8008b72:	2300      	movne	r3, #0
 8008b74:	b2db      	uxtb	r3, r3
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d03b      	beq.n	8008bf2 <cppLoop+0x14b2>
			led.LR(-1, 1);
 8008b7a:	2201      	movs	r2, #1
 8008b7c:	f04f 31ff 	mov.w	r1, #4294967295
 8008b80:	4860      	ldr	r0, [pc, #384]	; (8008d04 <cppLoop+0x15c4>)
 8008b82:	f7f9 fbb3 	bl	80022ec <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008b86:	2064      	movs	r0, #100	; 0x64
 8008b88:	f000 fca0 	bl	80094cc <HAL_Delay>
			if(selector_acc2 == 0){
 8008b8c:	4b66      	ldr	r3, [pc, #408]	; (8008d28 <cppLoop+0x15e8>)
 8008b8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d113      	bne.n	8008bbe <cppLoop+0x147e>
				adj_acc2 = adj_acc2 + 0.1;
 8008b96:	4b65      	ldr	r3, [pc, #404]	; (8008d2c <cppLoop+0x15ec>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f7f7 fcec 	bl	8000578 <__aeabi_f2d>
 8008ba0:	a355      	add	r3, pc, #340	; (adr r3, 8008cf8 <cppLoop+0x15b8>)
 8008ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ba6:	f7f7 fb89 	bl	80002bc <__adddf3>
 8008baa:	4603      	mov	r3, r0
 8008bac:	460c      	mov	r4, r1
 8008bae:	4618      	mov	r0, r3
 8008bb0:	4621      	mov	r1, r4
 8008bb2:	f7f8 f831 	bl	8000c18 <__aeabi_d2f>
 8008bb6:	4602      	mov	r2, r0
 8008bb8:	4b5c      	ldr	r3, [pc, #368]	; (8008d2c <cppLoop+0x15ec>)
 8008bba:	601a      	str	r2, [r3, #0]
 8008bbc:	e012      	b.n	8008be4 <cppLoop+0x14a4>
				adj_dec2 = adj_dec2 + 0.1;
 8008bbe:	4b5c      	ldr	r3, [pc, #368]	; (8008d30 <cppLoop+0x15f0>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f7f7 fcd8 	bl	8000578 <__aeabi_f2d>
 8008bc8:	a34b      	add	r3, pc, #300	; (adr r3, 8008cf8 <cppLoop+0x15b8>)
 8008bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bce:	f7f7 fb75 	bl	80002bc <__adddf3>
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	460c      	mov	r4, r1
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	4621      	mov	r1, r4
 8008bda:	f7f8 f81d 	bl	8000c18 <__aeabi_d2f>
 8008bde:	4602      	mov	r2, r0
 8008be0:	4b53      	ldr	r3, [pc, #332]	; (8008d30 <cppLoop+0x15f0>)
 8008be2:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008be4:	2200      	movs	r2, #0
 8008be6:	f04f 31ff 	mov.w	r1, #4294967295
 8008bea:	4846      	ldr	r0, [pc, #280]	; (8008d04 <cppLoop+0x15c4>)
 8008bec:	f7f9 fb7e 	bl	80022ec <_ZN3LED2LREaa>
		break;
 8008bf0:	e333      	b.n	800925a <cppLoop+0x1b1a>
		else if(joy_stick.getValue() == JOY_L){
 8008bf2:	4845      	ldr	r0, [pc, #276]	; (8008d08 <cppLoop+0x15c8>)
 8008bf4:	f7f9 fa5a 	bl	80020ac <_ZN8JoyStick8getValueEv>
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	2b01      	cmp	r3, #1
 8008bfc:	bf0c      	ite	eq
 8008bfe:	2301      	moveq	r3, #1
 8008c00:	2300      	movne	r3, #0
 8008c02:	b2db      	uxtb	r3, r3
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d03b      	beq.n	8008c80 <cppLoop+0x1540>
			led.LR(-1, 1);
 8008c08:	2201      	movs	r2, #1
 8008c0a:	f04f 31ff 	mov.w	r1, #4294967295
 8008c0e:	483d      	ldr	r0, [pc, #244]	; (8008d04 <cppLoop+0x15c4>)
 8008c10:	f7f9 fb6c 	bl	80022ec <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008c14:	2064      	movs	r0, #100	; 0x64
 8008c16:	f000 fc59 	bl	80094cc <HAL_Delay>
			if(selector_acc2 == 0){
 8008c1a:	4b43      	ldr	r3, [pc, #268]	; (8008d28 <cppLoop+0x15e8>)
 8008c1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d113      	bne.n	8008c4c <cppLoop+0x150c>
				adj_acc2 = adj_acc2 - 0.1;
 8008c24:	4b41      	ldr	r3, [pc, #260]	; (8008d2c <cppLoop+0x15ec>)
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	4618      	mov	r0, r3
 8008c2a:	f7f7 fca5 	bl	8000578 <__aeabi_f2d>
 8008c2e:	a332      	add	r3, pc, #200	; (adr r3, 8008cf8 <cppLoop+0x15b8>)
 8008c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c34:	f7f7 fb40 	bl	80002b8 <__aeabi_dsub>
 8008c38:	4603      	mov	r3, r0
 8008c3a:	460c      	mov	r4, r1
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	4621      	mov	r1, r4
 8008c40:	f7f7 ffea 	bl	8000c18 <__aeabi_d2f>
 8008c44:	4602      	mov	r2, r0
 8008c46:	4b39      	ldr	r3, [pc, #228]	; (8008d2c <cppLoop+0x15ec>)
 8008c48:	601a      	str	r2, [r3, #0]
 8008c4a:	e012      	b.n	8008c72 <cppLoop+0x1532>
				adj_dec2 = adj_dec2 - 0.1;
 8008c4c:	4b38      	ldr	r3, [pc, #224]	; (8008d30 <cppLoop+0x15f0>)
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	4618      	mov	r0, r3
 8008c52:	f7f7 fc91 	bl	8000578 <__aeabi_f2d>
 8008c56:	a328      	add	r3, pc, #160	; (adr r3, 8008cf8 <cppLoop+0x15b8>)
 8008c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c5c:	f7f7 fb2c 	bl	80002b8 <__aeabi_dsub>
 8008c60:	4603      	mov	r3, r0
 8008c62:	460c      	mov	r4, r1
 8008c64:	4618      	mov	r0, r3
 8008c66:	4621      	mov	r1, r4
 8008c68:	f7f7 ffd6 	bl	8000c18 <__aeabi_d2f>
 8008c6c:	4602      	mov	r2, r0
 8008c6e:	4b30      	ldr	r3, [pc, #192]	; (8008d30 <cppLoop+0x15f0>)
 8008c70:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008c72:	2200      	movs	r2, #0
 8008c74:	f04f 31ff 	mov.w	r1, #4294967295
 8008c78:	4822      	ldr	r0, [pc, #136]	; (8008d04 <cppLoop+0x15c4>)
 8008c7a:	f7f9 fb37 	bl	80022ec <_ZN3LED2LREaa>
		break;
 8008c7e:	e2ec      	b.n	800925a <cppLoop+0x1b1a>
		else if(joy_stick.getValue() == JOY_C){
 8008c80:	4821      	ldr	r0, [pc, #132]	; (8008d08 <cppLoop+0x15c8>)
 8008c82:	f7f9 fa13 	bl	80020ac <_ZN8JoyStick8getValueEv>
 8008c86:	4603      	mov	r3, r0
 8008c88:	2b02      	cmp	r3, #2
 8008c8a:	bf0c      	ite	eq
 8008c8c:	2301      	moveq	r3, #1
 8008c8e:	2300      	movne	r3, #0
 8008c90:	b2db      	uxtb	r3, r3
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	f000 82e1 	beq.w	800925a <cppLoop+0x1b1a>
			led.LR(-1, 1);
 8008c98:	2201      	movs	r2, #1
 8008c9a:	f04f 31ff 	mov.w	r1, #4294967295
 8008c9e:	4819      	ldr	r0, [pc, #100]	; (8008d04 <cppLoop+0x15c4>)
 8008ca0:	f7f9 fb24 	bl	80022ec <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008ca4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008ca8:	f000 fc10 	bl	80094cc <HAL_Delay>
			sd_write_array_float("PARAMS", "ACC2.TXT", 1, &adj_acc2, OVER_WRITE);
 8008cac:	2300      	movs	r3, #0
 8008cae:	9300      	str	r3, [sp, #0]
 8008cb0:	4b1e      	ldr	r3, [pc, #120]	; (8008d2c <cppLoop+0x15ec>)
 8008cb2:	2201      	movs	r2, #1
 8008cb4:	491f      	ldr	r1, [pc, #124]	; (8008d34 <cppLoop+0x15f4>)
 8008cb6:	4817      	ldr	r0, [pc, #92]	; (8008d14 <cppLoop+0x15d4>)
 8008cb8:	f7f8 fde0 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "DEC2.TXT", 1, &adj_dec2, OVER_WRITE);
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	9300      	str	r3, [sp, #0]
 8008cc0:	4b1b      	ldr	r3, [pc, #108]	; (8008d30 <cppLoop+0x15f0>)
 8008cc2:	2201      	movs	r2, #1
 8008cc4:	491c      	ldr	r1, [pc, #112]	; (8008d38 <cppLoop+0x15f8>)
 8008cc6:	4813      	ldr	r0, [pc, #76]	; (8008d14 <cppLoop+0x15d4>)
 8008cc8:	f7f8 fdd8 	bl	800187c <sd_write_array_float>
			line_trace.setMaxAccDec2(adj_acc2, adj_dec2);
 8008ccc:	4b17      	ldr	r3, [pc, #92]	; (8008d2c <cppLoop+0x15ec>)
 8008cce:	edd3 7a00 	vldr	s15, [r3]
 8008cd2:	4b17      	ldr	r3, [pc, #92]	; (8008d30 <cppLoop+0x15f0>)
 8008cd4:	ed93 7a00 	vldr	s14, [r3]
 8008cd8:	eef0 0a47 	vmov.f32	s1, s14
 8008cdc:	eeb0 0a67 	vmov.f32	s0, s15
 8008ce0:	480e      	ldr	r0, [pc, #56]	; (8008d1c <cppLoop+0x15dc>)
 8008ce2:	f7fb f81a 	bl	8003d1a <_ZN9LineTrace13setMaxAccDec2Eff>
			led.LR(-1, 0);
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	f04f 31ff 	mov.w	r1, #4294967295
 8008cec:	4805      	ldr	r0, [pc, #20]	; (8008d04 <cppLoop+0x15c4>)
 8008cee:	f7f9 fafd 	bl	80022ec <_ZN3LED2LREaa>
		break;
 8008cf2:	e2b2      	b.n	800925a <cppLoop+0x1b1a>
 8008cf4:	f3af 8000 	nop.w
 8008cf8:	9999999a 	.word	0x9999999a
 8008cfc:	3fb99999 	.word	0x3fb99999
 8008d00:	200412e0 	.word	0x200412e0
 8008d04:	200005c8 	.word	0x200005c8
 8008d08:	200005bc 	.word	0x200005bc
 8008d0c:	200412d8 	.word	0x200412d8
 8008d10:	080198a0 	.word	0x080198a0
 8008d14:	080197f8 	.word	0x080197f8
 8008d18:	080198a8 	.word	0x080198a8
 8008d1c:	2001bc14 	.word	0x2001bc14
 8008d20:	080198b0 	.word	0x080198b0
 8008d24:	080198bc 	.word	0x080198bc
 8008d28:	20041290 	.word	0x20041290
 8008d2c:	200412e8 	.word	0x200412e8
 8008d30:	200412f0 	.word	0x200412f0
 8008d34:	080198c8 	.word	0x080198c8
 8008d38:	080198d4 	.word	0x080198d4

	case 9:
		led.fullColor('~');
 8008d3c:	217e      	movs	r1, #126	; 0x7e
 8008d3e:	48c6      	ldr	r0, [pc, #792]	; (8009058 <cppLoop+0x1918>)
 8008d40:	f7f9 fa18 	bl	8002174 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008d44:	f7f8 f9ac 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008d48:	2100      	movs	r1, #0
 8008d4a:	2000      	movs	r0, #0
 8008d4c:	f7f8 f9b8 	bl	80010c0 <lcd_locate>
		lcd_printf("Teoshi");
 8008d50:	48c2      	ldr	r0, [pc, #776]	; (800905c <cppLoop+0x191c>)
 8008d52:	f7f8 f9df 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008d56:	2101      	movs	r1, #1
 8008d58:	2000      	movs	r0, #0
 8008d5a:	f7f8 f9b1 	bl	80010c0 <lcd_locate>
		lcd_printf("Following");
 8008d5e:	48c0      	ldr	r0, [pc, #768]	; (8009060 <cppLoop+0x1920>)
 8008d60:	f7f8 f9d8 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8008d64:	48bf      	ldr	r0, [pc, #764]	; (8009064 <cppLoop+0x1924>)
 8008d66:	f7f9 f9a1 	bl	80020ac <_ZN8JoyStick8getValueEv>
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	2b02      	cmp	r3, #2
 8008d6e:	bf0c      	ite	eq
 8008d70:	2301      	moveq	r3, #1
 8008d72:	2300      	movne	r3, #0
 8008d74:	b2db      	uxtb	r3, r3
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	f000 8271 	beq.w	800925e <cppLoop+0x1b1e>
			led.LR(-1, 1);
 8008d7c:	2201      	movs	r2, #1
 8008d7e:	f04f 31ff 	mov.w	r1, #4294967295
 8008d82:	48b5      	ldr	r0, [pc, #724]	; (8009058 <cppLoop+0x1918>)
 8008d84:	f7f9 fab2 	bl	80022ec <_ZN3LED2LREaa>
			HAL_Delay(500);
 8008d88:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008d8c:	f000 fb9e 	bl	80094cc <HAL_Delay>

			line_trace.setNormalRatio(0.0);
 8008d90:	ed9f 0ab5 	vldr	s0, [pc, #724]	; 8009068 <cppLoop+0x1928>
 8008d94:	48b5      	ldr	r0, [pc, #724]	; (800906c <cppLoop+0x192c>)
 8008d96:	f7fa fef7 	bl	8003b88 <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 8008d9a:	48b4      	ldr	r0, [pc, #720]	; (800906c <cppLoop+0x192c>)
 8008d9c:	f7fb f95c 	bl	8004058 <_ZN9LineTrace5startEv>
			HAL_Delay(500);
 8008da0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008da4:	f000 fb92 	bl	80094cc <HAL_Delay>

			led.fullColor('R');
 8008da8:	2152      	movs	r1, #82	; 0x52
 8008daa:	48ab      	ldr	r0, [pc, #684]	; (8009058 <cppLoop+0x1918>)
 8008dac:	f7f9 f9e2 	bl	8002174 <_ZN3LED9fullColorEc>
			encoder.clearDistance10mm();
 8008db0:	48af      	ldr	r0, [pc, #700]	; (8009070 <cppLoop+0x1930>)
 8008db2:	f7f8 fcb5 	bl	8001720 <_ZN7Encoder17clearDistance10mmEv>
			//encoder.clearDistance();

			HAL_Delay(10000);
 8008db6:	f242 7010 	movw	r0, #10000	; 0x2710
 8008dba:	f000 fb87 	bl	80094cc <HAL_Delay>

			line_trace.stop();
 8008dbe:	48ab      	ldr	r0, [pc, #684]	; (800906c <cppLoop+0x192c>)
 8008dc0:	f7fb f9ea 	bl	8004198 <_ZN9LineTrace4stopEv>
			//long total = encoder.getTotalCnt();

			//user_fopen("total_cnts", "cnts.txt");
			user_fopen("distance", "1m.txt");
 8008dc4:	49ab      	ldr	r1, [pc, #684]	; (8009074 <cppLoop+0x1934>)
 8008dc6:	48ac      	ldr	r0, [pc, #688]	; (8009078 <cppLoop+0x1938>)
 8008dc8:	f7f8 fce3 	bl	8001792 <user_fopen>
			float d = encoder.getDistance();
 8008dcc:	48a8      	ldr	r0, [pc, #672]	; (8009070 <cppLoop+0x1930>)
 8008dce:	f7f8 fc6b 	bl	80016a8 <_ZN7Encoder11getDistanceEv>
 8008dd2:	eef0 7a40 	vmov.f32	s15, s0
 8008dd6:	edc7 7a01 	vstr	s15, [r7, #4]
			sd_write_float(1, &d, ADD_WRITE);
 8008dda:	1d3b      	adds	r3, r7, #4
 8008ddc:	2201      	movs	r2, #1
 8008dde:	4619      	mov	r1, r3
 8008de0:	2001      	movs	r0, #1
 8008de2:	f7f8 fcf9 	bl	80017d8 <sd_write_float>
			user_fclose();
 8008de6:	f7f8 fce7 	bl	80017b8 <user_fclose>

			led.LR(-1, 0);
 8008dea:	2200      	movs	r2, #0
 8008dec:	f04f 31ff 	mov.w	r1, #4294967295
 8008df0:	4899      	ldr	r0, [pc, #612]	; (8009058 <cppLoop+0x1918>)
 8008df2:	f7f9 fa7b 	bl	80022ec <_ZN3LED2LREaa>
		}
		break;
 8008df6:	e232      	b.n	800925e <cppLoop+0x1b1e>

	case 10:
		led.fullColor('~');
 8008df8:	217e      	movs	r1, #126	; 0x7e
 8008dfa:	4897      	ldr	r0, [pc, #604]	; (8009058 <cppLoop+0x1918>)
 8008dfc:	f7f9 f9ba 	bl	8002174 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008e00:	f7f8 f94e 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008e04:	2100      	movs	r1, #0
 8008e06:	2000      	movs	r0, #0
 8008e08:	f7f8 f95a 	bl	80010c0 <lcd_locate>
		lcd_printf("Create  ");
 8008e0c:	489b      	ldr	r0, [pc, #620]	; (800907c <cppLoop+0x193c>)
 8008e0e:	f7f8 f981 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008e12:	2101      	movs	r1, #1
 8008e14:	2000      	movs	r0, #0
 8008e16:	f7f8 f953 	bl	80010c0 <lcd_locate>
		lcd_printf("VelTable");
 8008e1a:	4899      	ldr	r0, [pc, #612]	; (8009080 <cppLoop+0x1940>)
 8008e1c:	f7f8 f97a 	bl	8001114 <lcd_printf>
		if(joy_stick.getValue() == JOY_C){
 8008e20:	4890      	ldr	r0, [pc, #576]	; (8009064 <cppLoop+0x1924>)
 8008e22:	f7f9 f943 	bl	80020ac <_ZN8JoyStick8getValueEv>
 8008e26:	4603      	mov	r3, r0
 8008e28:	2b02      	cmp	r3, #2
 8008e2a:	bf0c      	ite	eq
 8008e2c:	2301      	moveq	r3, #1
 8008e2e:	2300      	movne	r3, #0
 8008e30:	b2db      	uxtb	r3, r3
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	f000 8215 	beq.w	8009262 <cppLoop+0x1b22>
			HAL_Delay(500);
 8008e38:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008e3c:	f000 fb46 	bl	80094cc <HAL_Delay>
			led.LR(-1, 1);
 8008e40:	2201      	movs	r2, #1
 8008e42:	f04f 31ff 	mov.w	r1, #4294967295
 8008e46:	4884      	ldr	r0, [pc, #528]	; (8009058 <cppLoop+0x1918>)
 8008e48:	f7f9 fa50 	bl	80022ec <_ZN3LED2LREaa>

			line_trace.setMode(THIRD_RUNNING);
 8008e4c:	2102      	movs	r1, #2
 8008e4e:	4887      	ldr	r0, [pc, #540]	; (800906c <cppLoop+0x192c>)
 8008e50:	f7fb f8f0 	bl	8004034 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_max_velocity2);
 8008e54:	4b8b      	ldr	r3, [pc, #556]	; (8009084 <cppLoop+0x1944>)
 8008e56:	edd3 7a00 	vldr	s15, [r3]
 8008e5a:	eeb0 0a67 	vmov.f32	s0, s15
 8008e5e:	4883      	ldr	r0, [pc, #524]	; (800906c <cppLoop+0x192c>)
 8008e60:	f7fa fea1 	bl	8003ba6 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity2);
 8008e64:	4b87      	ldr	r3, [pc, #540]	; (8009084 <cppLoop+0x1944>)
 8008e66:	edd3 7a00 	vldr	s15, [r3]
 8008e6a:	eeb0 0a67 	vmov.f32	s0, s15
 8008e6e:	487f      	ldr	r0, [pc, #508]	; (800906c <cppLoop+0x192c>)
 8008e70:	f7fa fea9 	bl	8003bc6 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_max_velocity2);
 8008e74:	4b83      	ldr	r3, [pc, #524]	; (8009084 <cppLoop+0x1944>)
 8008e76:	edd3 7a00 	vldr	s15, [r3]
 8008e7a:	eeb0 0a67 	vmov.f32	s0, s15
 8008e7e:	487b      	ldr	r0, [pc, #492]	; (800906c <cppLoop+0x192c>)
 8008e80:	f7fa fec1 	bl	8003c06 <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 8008e84:	4879      	ldr	r0, [pc, #484]	; (800906c <cppLoop+0x192c>)
 8008e86:	f7fb facb 	bl	8004420 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			led.LR(-1, 0);
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	f04f 31ff 	mov.w	r1, #4294967295
 8008e90:	4871      	ldr	r0, [pc, #452]	; (8009058 <cppLoop+0x1918>)
 8008e92:	f7f9 fa2b 	bl	80022ec <_ZN3LED2LREaa>
		}

		break;
 8008e96:	e1e4      	b.n	8009262 <cppLoop+0x1b22>

	case 11:
		led.fullColor('~');
 8008e98:	217e      	movs	r1, #126	; 0x7e
 8008e9a:	486f      	ldr	r0, [pc, #444]	; (8009058 <cppLoop+0x1918>)
 8008e9c:	f7f9 f96a 	bl	8002174 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008ea0:	f7f8 f8fe 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008ea4:	2100      	movs	r1, #0
 8008ea6:	2000      	movs	r0, #0
 8008ea8:	f7f8 f90a 	bl	80010c0 <lcd_locate>
		lcd_printf("ESC");
 8008eac:	4876      	ldr	r0, [pc, #472]	; (8009088 <cppLoop+0x1948>)
 8008eae:	f7f8 f931 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008eb2:	2101      	movs	r1, #1
 8008eb4:	2000      	movs	r0, #0
 8008eb6:	f7f8 f903 	bl	80010c0 <lcd_locate>
		lcd_printf("TEST");
 8008eba:	4874      	ldr	r0, [pc, #464]	; (800908c <cppLoop+0x194c>)
 8008ebc:	f7f8 f92a 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8008ec0:	4868      	ldr	r0, [pc, #416]	; (8009064 <cppLoop+0x1924>)
 8008ec2:	f7f9 f8f3 	bl	80020ac <_ZN8JoyStick8getValueEv>
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	2b02      	cmp	r3, #2
 8008eca:	bf0c      	ite	eq
 8008ecc:	2301      	moveq	r3, #1
 8008ece:	2300      	movne	r3, #0
 8008ed0:	b2db      	uxtb	r3, r3
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	f000 81c7 	beq.w	8009266 <cppLoop+0x1b26>
			HAL_Delay(1000);
 8008ed8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008edc:	f000 faf6 	bl	80094cc <HAL_Delay>
			led.LR(-1, 1);
 8008ee0:	2201      	movs	r2, #1
 8008ee2:	f04f 31ff 	mov.w	r1, #4294967295
 8008ee6:	485c      	ldr	r0, [pc, #368]	; (8009058 <cppLoop+0x1918>)
 8008ee8:	f7f9 fa00 	bl	80022ec <_ZN3LED2LREaa>

			esc.on(0.5, 0.5, 0.5, 0.5);
 8008eec:	eef6 1a00 	vmov.f32	s3, #96	; 0x3f000000  0.5
 8008ef0:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 8008ef4:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8008ef8:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8008efc:	4864      	ldr	r0, [pc, #400]	; (8009090 <cppLoop+0x1950>)
 8008efe:	f7f8 f9a7 	bl	8001250 <_ZN3ESC2onEffff>
			HAL_Delay(2000);
 8008f02:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8008f06:	f000 fae1 	bl	80094cc <HAL_Delay>
			esc.off();
 8008f0a:	4861      	ldr	r0, [pc, #388]	; (8009090 <cppLoop+0x1950>)
 8008f0c:	f7f8 fa3a 	bl	8001384 <_ZN3ESC3offEv>

			led.LR(-1, 0);
 8008f10:	2200      	movs	r2, #0
 8008f12:	f04f 31ff 	mov.w	r1, #4294967295
 8008f16:	4850      	ldr	r0, [pc, #320]	; (8009058 <cppLoop+0x1918>)
 8008f18:	f7f9 f9e8 	bl	80022ec <_ZN3LED2LREaa>
			logger.saveLogs("SYSIDENT", "STEPRES.txt");

			led.LR(-1, 0);
		}
		*/
		break;
 8008f1c:	e1a3      	b.n	8009266 <cppLoop+0x1b26>

	case 12:
		led.fullColor('~');
 8008f1e:	217e      	movs	r1, #126	; 0x7e
 8008f20:	484d      	ldr	r0, [pc, #308]	; (8009058 <cppLoop+0x1918>)
 8008f22:	f7f9 f927 	bl	8002174 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008f26:	f7f8 f8bb 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008f2a:	2100      	movs	r1, #0
 8008f2c:	2000      	movs	r0, #0
 8008f2e:	f7f8 f8c7 	bl	80010c0 <lcd_locate>
		lcd_printf("PID");
 8008f32:	4858      	ldr	r0, [pc, #352]	; (8009094 <cppLoop+0x1954>)
 8008f34:	f7f8 f8ee 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008f38:	2101      	movs	r1, #1
 8008f3a:	2000      	movs	r0, #0
 8008f3c:	f7f8 f8c0 	bl	80010c0 <lcd_locate>
		lcd_printf("Response");
 8008f40:	4855      	ldr	r0, [pc, #340]	; (8009098 <cppLoop+0x1958>)
 8008f42:	f7f8 f8e7 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8008f46:	4847      	ldr	r0, [pc, #284]	; (8009064 <cppLoop+0x1924>)
 8008f48:	f7f9 f8b0 	bl	80020ac <_ZN8JoyStick8getValueEv>
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	2b02      	cmp	r3, #2
 8008f50:	bf0c      	ite	eq
 8008f52:	2301      	moveq	r3, #1
 8008f54:	2300      	movne	r3, #0
 8008f56:	b2db      	uxtb	r3, r3
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	f000 8186 	beq.w	800926a <cppLoop+0x1b2a>
			HAL_Delay(1500);
 8008f5e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8008f62:	f000 fab3 	bl	80094cc <HAL_Delay>
			led.LR(-1, 1);
 8008f66:	2201      	movs	r2, #1
 8008f68:	f04f 31ff 	mov.w	r1, #4294967295
 8008f6c:	483a      	ldr	r0, [pc, #232]	; (8009058 <cppLoop+0x1918>)
 8008f6e:	f7f9 f9bd 	bl	80022ec <_ZN3LED2LREaa>

			logger.start();
 8008f72:	484a      	ldr	r0, [pc, #296]	; (800909c <cppLoop+0x195c>)
 8008f74:	f7fb fdce 	bl	8004b14 <_ZN6Logger5startEv>
			velocity_ctrl.start();
 8008f78:	4849      	ldr	r0, [pc, #292]	; (80090a0 <cppLoop+0x1960>)
 8008f7a:	f7fc fd4a 	bl	8005a12 <_ZN12VelocityCtrl5startEv>
			velocity_ctrl.setVelocity(0, 3.14);
 8008f7e:	eddf 0a49 	vldr	s1, [pc, #292]	; 80090a4 <cppLoop+0x1964>
 8008f82:	ed9f 0a39 	vldr	s0, [pc, #228]	; 8009068 <cppLoop+0x1928>
 8008f86:	4846      	ldr	r0, [pc, #280]	; (80090a0 <cppLoop+0x1960>)
 8008f88:	f7fc fcd6 	bl	8005938 <_ZN12VelocityCtrl11setVelocityEff>

			HAL_Delay(1000);
 8008f8c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008f90:	f000 fa9c 	bl	80094cc <HAL_Delay>

			logger.stop();
 8008f94:	4841      	ldr	r0, [pc, #260]	; (800909c <cppLoop+0x195c>)
 8008f96:	f7fb fdce 	bl	8004b36 <_ZN6Logger4stopEv>
			velocity_ctrl.stop();
 8008f9a:	4841      	ldr	r0, [pc, #260]	; (80090a0 <cppLoop+0x1960>)
 8008f9c:	f7fc fd4c 	bl	8005a38 <_ZN12VelocityCtrl4stopEv>

			logger.saveLogs("SYSIDENT", "PIDRES.txt");
 8008fa0:	4a41      	ldr	r2, [pc, #260]	; (80090a8 <cppLoop+0x1968>)
 8008fa2:	4942      	ldr	r1, [pc, #264]	; (80090ac <cppLoop+0x196c>)
 8008fa4:	483d      	ldr	r0, [pc, #244]	; (800909c <cppLoop+0x195c>)
 8008fa6:	f7fb fcc2 	bl	800492e <_ZN6Logger8saveLogsEPKcS1_>

			led.LR(-1, 0);
 8008faa:	2200      	movs	r2, #0
 8008fac:	f04f 31ff 	mov.w	r1, #4294967295
 8008fb0:	4829      	ldr	r0, [pc, #164]	; (8009058 <cppLoop+0x1918>)
 8008fb2:	f7f9 f99b 	bl	80022ec <_ZN3LED2LREaa>
		}
		break;
 8008fb6:	e158      	b.n	800926a <cppLoop+0x1b2a>

	case 13:

		led.fullColor('~');
 8008fb8:	217e      	movs	r1, #126	; 0x7e
 8008fba:	4827      	ldr	r0, [pc, #156]	; (8009058 <cppLoop+0x1918>)
 8008fbc:	f7f9 f8da 	bl	8002174 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008fc0:	f7f8 f86e 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008fc4:	2100      	movs	r1, #0
 8008fc6:	2000      	movs	r0, #0
 8008fc8:	f7f8 f87a 	bl	80010c0 <lcd_locate>
		lcd_printf("Steer");
 8008fcc:	4838      	ldr	r0, [pc, #224]	; (80090b0 <cppLoop+0x1970>)
 8008fce:	f7f8 f8a1 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008fd2:	2101      	movs	r1, #1
 8008fd4:	2000      	movs	r0, #0
 8008fd6:	f7f8 f873 	bl	80010c0 <lcd_locate>
		lcd_printf("Trace");
 8008fda:	4836      	ldr	r0, [pc, #216]	; (80090b4 <cppLoop+0x1974>)
 8008fdc:	f7f8 f89a 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8008fe0:	4820      	ldr	r0, [pc, #128]	; (8009064 <cppLoop+0x1924>)
 8008fe2:	f7f9 f863 	bl	80020ac <_ZN8JoyStick8getValueEv>
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	2b02      	cmp	r3, #2
 8008fea:	bf0c      	ite	eq
 8008fec:	2301      	moveq	r3, #1
 8008fee:	2300      	movne	r3, #0
 8008ff0:	b2db      	uxtb	r3, r3
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	f000 813b 	beq.w	800926e <cppLoop+0x1b2e>
			HAL_Delay(500);
 8008ff8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008ffc:	f000 fa66 	bl	80094cc <HAL_Delay>

			line_trace.setTargetVelocity(0.3);
 8009000:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 80090b8 <cppLoop+0x1978>
 8009004:	4819      	ldr	r0, [pc, #100]	; (800906c <cppLoop+0x192c>)
 8009006:	f7fa fdce 	bl	8003ba6 <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(1, -1);
 800900a:	f04f 32ff 	mov.w	r2, #4294967295
 800900e:	2101      	movs	r1, #1
 8009010:	4811      	ldr	r0, [pc, #68]	; (8009058 <cppLoop+0x1918>)
 8009012:	f7f9 f96b 	bl	80022ec <_ZN3LED2LREaa>

			logger.resetIdx();
 8009016:	4821      	ldr	r0, [pc, #132]	; (800909c <cppLoop+0x195c>)
 8009018:	f7fb fd64 	bl	8004ae4 <_ZN6Logger8resetIdxEv>
			line_trace.setMode(FIRST_RUNNING);
 800901c:	2100      	movs	r1, #0
 800901e:	4813      	ldr	r0, [pc, #76]	; (800906c <cppLoop+0x192c>)
 8009020:	f7fb f808 	bl	8004034 <_ZN9LineTrace7setModeEs>
			logger.start();
 8009024:	481d      	ldr	r0, [pc, #116]	; (800909c <cppLoop+0x195c>)
 8009026:	f7fb fd75 	bl	8004b14 <_ZN6Logger5startEv>
			line_trace.running();
 800902a:	4810      	ldr	r0, [pc, #64]	; (800906c <cppLoop+0x192c>)
 800902c:	f7fb f840 	bl	80040b0 <_ZN9LineTrace7runningEv>
			logger.stop();
 8009030:	481a      	ldr	r0, [pc, #104]	; (800909c <cppLoop+0x195c>)
 8009032:	f7fb fd80 	bl	8004b36 <_ZN6Logger4stopEv>

			logger.saveLogs("STATELOG", "COMEGA.TXT");
 8009036:	4a21      	ldr	r2, [pc, #132]	; (80090bc <cppLoop+0x197c>)
 8009038:	4921      	ldr	r1, [pc, #132]	; (80090c0 <cppLoop+0x1980>)
 800903a:	4818      	ldr	r0, [pc, #96]	; (800909c <cppLoop+0x195c>)
 800903c:	f7fb fc77 	bl	800492e <_ZN6Logger8saveLogsEPKcS1_>
			logger.saveLogs2("STATELOG", "TOMEGA.TXT");
 8009040:	4a20      	ldr	r2, [pc, #128]	; (80090c4 <cppLoop+0x1984>)
 8009042:	491f      	ldr	r1, [pc, #124]	; (80090c0 <cppLoop+0x1980>)
 8009044:	4815      	ldr	r0, [pc, #84]	; (800909c <cppLoop+0x195c>)
 8009046:	f7fb fc86 	bl	8004956 <_ZN6Logger9saveLogs2EPKcS1_>

			led.LR(0, -1);
 800904a:	f04f 32ff 	mov.w	r2, #4294967295
 800904e:	2100      	movs	r1, #0
 8009050:	4801      	ldr	r0, [pc, #4]	; (8009058 <cppLoop+0x1918>)
 8009052:	f7f9 f94b 	bl	80022ec <_ZN3LED2LREaa>
			sys_ident.inOutputSave();

			led.LR(-1, 0);
		}
		*/
		break;
 8009056:	e10a      	b.n	800926e <cppLoop+0x1b2e>
 8009058:	200005c8 	.word	0x200005c8
 800905c:	080198e0 	.word	0x080198e0
 8009060:	080198e8 	.word	0x080198e8
 8009064:	200005bc 	.word	0x200005bc
 8009068:	00000000 	.word	0x00000000
 800906c:	2001bc14 	.word	0x2001bc14
 8009070:	2001bb74 	.word	0x2001bb74
 8009074:	080198f4 	.word	0x080198f4
 8009078:	080198fc 	.word	0x080198fc
 800907c:	08019908 	.word	0x08019908
 8009080:	08019914 	.word	0x08019914
 8009084:	200412c0 	.word	0x200412c0
 8009088:	08019920 	.word	0x08019920
 800908c:	08019924 	.word	0x08019924
 8009090:	2001bc10 	.word	0x2001bc10
 8009094:	0801992c 	.word	0x0801992c
 8009098:	08019930 	.word	0x08019930
 800909c:	200005ec 	.word	0x200005ec
 80090a0:	2001bb94 	.word	0x2001bb94
 80090a4:	4048f5c3 	.word	0x4048f5c3
 80090a8:	0801993c 	.word	0x0801993c
 80090ac:	08019948 	.word	0x08019948
 80090b0:	08019954 	.word	0x08019954
 80090b4:	0801995c 	.word	0x0801995c
 80090b8:	3e99999a 	.word	0x3e99999a
 80090bc:	08019964 	.word	0x08019964
 80090c0:	08019970 	.word	0x08019970
 80090c4:	0801997c 	.word	0x0801997c

	case 14:
		led.fullColor('W');
 80090c8:	2157      	movs	r1, #87	; 0x57
 80090ca:	486f      	ldr	r0, [pc, #444]	; (8009288 <cppLoop+0x1b48>)
 80090cc:	f7f9 f852 	bl	8002174 <_ZN3LED9fullColorEc>

		lcd_clear();
 80090d0:	f7f7 ffe6 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80090d4:	2100      	movs	r1, #0
 80090d6:	2000      	movs	r0, #0
 80090d8:	f7f7 fff2 	bl	80010c0 <lcd_locate>
		lcd_printf("LogRun2    ");
 80090dc:	486b      	ldr	r0, [pc, #428]	; (800928c <cppLoop+0x1b4c>)
 80090de:	f7f8 f819 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80090e2:	2101      	movs	r1, #1
 80090e4:	2000      	movs	r0, #0
 80090e6:	f7f7 ffeb 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity2);
 80090ea:	4b69      	ldr	r3, [pc, #420]	; (8009290 <cppLoop+0x1b50>)
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	4618      	mov	r0, r3
 80090f0:	f7f7 fa42 	bl	8000578 <__aeabi_f2d>
 80090f4:	4603      	mov	r3, r0
 80090f6:	460c      	mov	r4, r1
 80090f8:	461a      	mov	r2, r3
 80090fa:	4623      	mov	r3, r4
 80090fc:	4865      	ldr	r0, [pc, #404]	; (8009294 <cppLoop+0x1b54>)
 80090fe:	f7f8 f809 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8009102:	4865      	ldr	r0, [pc, #404]	; (8009298 <cppLoop+0x1b58>)
 8009104:	f7f8 ffd2 	bl	80020ac <_ZN8JoyStick8getValueEv>
 8009108:	4603      	mov	r3, r0
 800910a:	2b02      	cmp	r3, #2
 800910c:	bf0c      	ite	eq
 800910e:	2301      	moveq	r3, #1
 8009110:	2300      	movne	r3, #0
 8009112:	b2db      	uxtb	r3, r3
 8009114:	2b00      	cmp	r3, #0
 8009116:	f000 80ac 	beq.w	8009272 <cppLoop+0x1b32>
			HAL_Delay(500);
 800911a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800911e:	f000 f9d5 	bl	80094cc <HAL_Delay>

			led.LR(1, -1);
 8009122:	f04f 32ff 	mov.w	r2, #4294967295
 8009126:	2101      	movs	r1, #1
 8009128:	4857      	ldr	r0, [pc, #348]	; (8009288 <cppLoop+0x1b48>)
 800912a:	f7f9 f8df 	bl	80022ec <_ZN3LED2LREaa>
			line_trace.setMode(THIRD_RUNNING);
 800912e:	2102      	movs	r1, #2
 8009130:	485a      	ldr	r0, [pc, #360]	; (800929c <cppLoop+0x1b5c>)
 8009132:	f7fa ff7f 	bl	8004034 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity2);
 8009136:	4b5a      	ldr	r3, [pc, #360]	; (80092a0 <cppLoop+0x1b60>)
 8009138:	edd3 7a00 	vldr	s15, [r3]
 800913c:	eeb0 0a67 	vmov.f32	s0, s15
 8009140:	4856      	ldr	r0, [pc, #344]	; (800929c <cppLoop+0x1b5c>)
 8009142:	f7fa fd30 	bl	8003ba6 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity2);
 8009146:	4b52      	ldr	r3, [pc, #328]	; (8009290 <cppLoop+0x1b50>)
 8009148:	edd3 7a00 	vldr	s15, [r3]
 800914c:	eeb0 0a67 	vmov.f32	s0, s15
 8009150:	4852      	ldr	r0, [pc, #328]	; (800929c <cppLoop+0x1b5c>)
 8009152:	f7fa fd38 	bl	8003bc6 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_max_velocity2);
 8009156:	4b4e      	ldr	r3, [pc, #312]	; (8009290 <cppLoop+0x1b50>)
 8009158:	edd3 7a00 	vldr	s15, [r3]
 800915c:	eeb0 0a67 	vmov.f32	s0, s15
 8009160:	484e      	ldr	r0, [pc, #312]	; (800929c <cppLoop+0x1b5c>)
 8009162:	f7fa fd50 	bl	8003c06 <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 8009166:	484d      	ldr	r0, [pc, #308]	; (800929c <cppLoop+0x1b5c>)
 8009168:	f7fb f95a 	bl	8004420 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			line_trace.running();
 800916c:	484b      	ldr	r0, [pc, #300]	; (800929c <cppLoop+0x1b5c>)
 800916e:	f7fa ff9f 	bl	80040b0 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 8009172:	f04f 32ff 	mov.w	r2, #4294967295
 8009176:	2100      	movs	r1, #0
 8009178:	4843      	ldr	r0, [pc, #268]	; (8009288 <cppLoop+0x1b48>)
 800917a:	f7f9 f8b7 	bl	80022ec <_ZN3LED2LREaa>
		}

		break;
 800917e:	e078      	b.n	8009272 <cppLoop+0x1b32>

	case 15:
		led.fullColor('W');
 8009180:	2157      	movs	r1, #87	; 0x57
 8009182:	4841      	ldr	r0, [pc, #260]	; (8009288 <cppLoop+0x1b48>)
 8009184:	f7f8 fff6 	bl	8002174 <_ZN3LED9fullColorEc>

		lcd_clear();
 8009188:	f7f7 ff8a 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800918c:	2100      	movs	r1, #0
 800918e:	2000      	movs	r0, #0
 8009190:	f7f7 ff96 	bl	80010c0 <lcd_locate>
		lcd_printf("LogRun1    ");
 8009194:	4843      	ldr	r0, [pc, #268]	; (80092a4 <cppLoop+0x1b64>)
 8009196:	f7f7 ffbd 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800919a:	2101      	movs	r1, #1
 800919c:	2000      	movs	r0, #0
 800919e:	f7f7 ff8f 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity);
 80091a2:	4b41      	ldr	r3, [pc, #260]	; (80092a8 <cppLoop+0x1b68>)
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	4618      	mov	r0, r3
 80091a8:	f7f7 f9e6 	bl	8000578 <__aeabi_f2d>
 80091ac:	4603      	mov	r3, r0
 80091ae:	460c      	mov	r4, r1
 80091b0:	461a      	mov	r2, r3
 80091b2:	4623      	mov	r3, r4
 80091b4:	4837      	ldr	r0, [pc, #220]	; (8009294 <cppLoop+0x1b54>)
 80091b6:	f7f7 ffad 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80091ba:	4837      	ldr	r0, [pc, #220]	; (8009298 <cppLoop+0x1b58>)
 80091bc:	f7f8 ff76 	bl	80020ac <_ZN8JoyStick8getValueEv>
 80091c0:	4603      	mov	r3, r0
 80091c2:	2b02      	cmp	r3, #2
 80091c4:	bf0c      	ite	eq
 80091c6:	2301      	moveq	r3, #1
 80091c8:	2300      	movne	r3, #0
 80091ca:	b2db      	uxtb	r3, r3
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d052      	beq.n	8009276 <cppLoop+0x1b36>
			HAL_Delay(500);
 80091d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80091d4:	f000 f97a 	bl	80094cc <HAL_Delay>

			led.LR(1, -1);
 80091d8:	f04f 32ff 	mov.w	r2, #4294967295
 80091dc:	2101      	movs	r1, #1
 80091de:	482a      	ldr	r0, [pc, #168]	; (8009288 <cppLoop+0x1b48>)
 80091e0:	f7f9 f884 	bl	80022ec <_ZN3LED2LREaa>
			line_trace.setMode(SECOND_RUNNING);
 80091e4:	2101      	movs	r1, #1
 80091e6:	482d      	ldr	r0, [pc, #180]	; (800929c <cppLoop+0x1b5c>)
 80091e8:	f7fa ff24 	bl	8004034 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity);
 80091ec:	4b2f      	ldr	r3, [pc, #188]	; (80092ac <cppLoop+0x1b6c>)
 80091ee:	edd3 7a00 	vldr	s15, [r3]
 80091f2:	eeb0 0a67 	vmov.f32	s0, s15
 80091f6:	4829      	ldr	r0, [pc, #164]	; (800929c <cppLoop+0x1b5c>)
 80091f8:	f7fa fcd5 	bl	8003ba6 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity);
 80091fc:	4b2a      	ldr	r3, [pc, #168]	; (80092a8 <cppLoop+0x1b68>)
 80091fe:	edd3 7a00 	vldr	s15, [r3]
 8009202:	eeb0 0a67 	vmov.f32	s0, s15
 8009206:	4825      	ldr	r0, [pc, #148]	; (800929c <cppLoop+0x1b5c>)
 8009208:	f7fa fcdd 	bl	8003bc6 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 800920c:	4b27      	ldr	r3, [pc, #156]	; (80092ac <cppLoop+0x1b6c>)
 800920e:	edd3 7a00 	vldr	s15, [r3]
 8009212:	eeb0 0a67 	vmov.f32	s0, s15
 8009216:	4821      	ldr	r0, [pc, #132]	; (800929c <cppLoop+0x1b5c>)
 8009218:	f7fa fcf5 	bl	8003c06 <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 800921c:	481f      	ldr	r0, [pc, #124]	; (800929c <cppLoop+0x1b5c>)
 800921e:	f7fb f8ff 	bl	8004420 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			line_trace.running();
 8009222:	481e      	ldr	r0, [pc, #120]	; (800929c <cppLoop+0x1b5c>)
 8009224:	f7fa ff44 	bl	80040b0 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 8009228:	f04f 32ff 	mov.w	r2, #4294967295
 800922c:	2100      	movs	r1, #0
 800922e:	4816      	ldr	r0, [pc, #88]	; (8009288 <cppLoop+0x1b48>)
 8009230:	f7f9 f85c 	bl	80022ec <_ZN3LED2LREaa>
		}
		break;
 8009234:	e01f      	b.n	8009276 <cppLoop+0x1b36>

	default:
		break;
 8009236:	bf00      	nop
 8009238:	e01e      	b.n	8009278 <cppLoop+0x1b38>
		break;
 800923a:	bf00      	nop
 800923c:	e01c      	b.n	8009278 <cppLoop+0x1b38>
		break;
 800923e:	bf00      	nop
 8009240:	e01a      	b.n	8009278 <cppLoop+0x1b38>
		break;
 8009242:	bf00      	nop
 8009244:	e018      	b.n	8009278 <cppLoop+0x1b38>
		break;
 8009246:	bf00      	nop
 8009248:	e016      	b.n	8009278 <cppLoop+0x1b38>
		break;
 800924a:	bf00      	nop
 800924c:	e014      	b.n	8009278 <cppLoop+0x1b38>
		break;
 800924e:	bf00      	nop
 8009250:	e012      	b.n	8009278 <cppLoop+0x1b38>
		break;
 8009252:	bf00      	nop
 8009254:	e010      	b.n	8009278 <cppLoop+0x1b38>
		break;
 8009256:	bf00      	nop
 8009258:	e00e      	b.n	8009278 <cppLoop+0x1b38>
		break;
 800925a:	bf00      	nop
 800925c:	e00c      	b.n	8009278 <cppLoop+0x1b38>
		break;
 800925e:	bf00      	nop
 8009260:	e00a      	b.n	8009278 <cppLoop+0x1b38>
		break;
 8009262:	bf00      	nop
 8009264:	e008      	b.n	8009278 <cppLoop+0x1b38>
		break;
 8009266:	bf00      	nop
 8009268:	e006      	b.n	8009278 <cppLoop+0x1b38>
		break;
 800926a:	bf00      	nop
 800926c:	e004      	b.n	8009278 <cppLoop+0x1b38>
		break;
 800926e:	bf00      	nop
 8009270:	e002      	b.n	8009278 <cppLoop+0x1b38>
		break;
 8009272:	bf00      	nop
 8009274:	e000      	b.n	8009278 <cppLoop+0x1b38>
		break;
 8009276:	bf00      	nop

	}

	HAL_Delay(30);
 8009278:	201e      	movs	r0, #30
 800927a:	f000 f927 	bl	80094cc <HAL_Delay>

}
 800927e:	bf00      	nop
 8009280:	370c      	adds	r7, #12
 8009282:	46bd      	mov	sp, r7
 8009284:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009286:	bf00      	nop
 8009288:	200005c8 	.word	0x200005c8
 800928c:	08019988 	.word	0x08019988
 8009290:	200412c0 	.word	0x200412c0
 8009294:	0801981c 	.word	0x0801981c
 8009298:	200005bc 	.word	0x200005bc
 800929c:	2001bc14 	.word	0x2001bc14
 80092a0:	200412d0 	.word	0x200412d0
 80092a4:	08019994 	.word	0x08019994
 80092a8:	200412b8 	.word	0x200412b8
 80092ac:	200412c8 	.word	0x200412c8

080092b0 <_Z41__static_initialization_and_destruction_0ii>:

void prameterSttingMode()
{

}
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b088      	sub	sp, #32
 80092b4:	af06      	add	r7, sp, #24
 80092b6:	6078      	str	r0, [r7, #4]
 80092b8:	6039      	str	r1, [r7, #0]
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2b01      	cmp	r3, #1
 80092be:	d142      	bne.n	8009346 <_Z41__static_initialization_and_destruction_0ii+0x96>
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80092c6:	4293      	cmp	r3, r2
 80092c8:	d13d      	bne.n	8009346 <_Z41__static_initialization_and_destruction_0ii+0x96>
LineSensor line_sensor;
 80092ca:	4821      	ldr	r0, [pc, #132]	; (8009350 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 80092cc:	f7f9 f846 	bl	800235c <_ZN10LineSensorC1Ev>
SideSensor side_sensor;
 80092d0:	4820      	ldr	r0, [pc, #128]	; (8009354 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 80092d2:	f7fc f815 	bl	8005300 <_ZN10SideSensorC1Ev>
JoyStick joy_stick;
 80092d6:	4820      	ldr	r0, [pc, #128]	; (8009358 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 80092d8:	f7f8 fedc 	bl	8002094 <_ZN8JoyStickC1Ev>
Motor motor;
 80092dc:	481f      	ldr	r0, [pc, #124]	; (800935c <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80092de:	f7fb fc3b 	bl	8004b58 <_ZN5MotorC1Ev>
IMU imu;
 80092e2:	481f      	ldr	r0, [pc, #124]	; (8009360 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80092e4:	f7f8 fce2 	bl	8001cac <_ZN3IMUC1Ev>
Logger logger;
 80092e8:	481e      	ldr	r0, [pc, #120]	; (8009364 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 80092ea:	f7fb f989 	bl	8004600 <_ZN6LoggerC1Ev>
Encoder encoder;
 80092ee:	481e      	ldr	r0, [pc, #120]	; (8009368 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 80092f0:	f7f8 f86c 	bl	80013cc <_ZN7EncoderC1Ev>
VelocityCtrl velocity_ctrl(&motor, &encoder, &imu);
 80092f4:	4b1a      	ldr	r3, [pc, #104]	; (8009360 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80092f6:	4a1c      	ldr	r2, [pc, #112]	; (8009368 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 80092f8:	4918      	ldr	r1, [pc, #96]	; (800935c <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80092fa:	481c      	ldr	r0, [pc, #112]	; (800936c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 80092fc:	f7fc f9f0 	bl	80056e0 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>
Odometry odometry(&encoder, &imu, &velocity_ctrl);
 8009300:	4b1a      	ldr	r3, [pc, #104]	; (800936c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8009302:	4a17      	ldr	r2, [pc, #92]	; (8009360 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009304:	4918      	ldr	r1, [pc, #96]	; (8009368 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009306:	481a      	ldr	r0, [pc, #104]	; (8009370 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8009308:	f7fb fd0c 	bl	8004d24 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>
ESC esc;
 800930c:	4819      	ldr	r0, [pc, #100]	; (8009374 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 800930e:	f7f7 ff61 	bl	80011d4 <_ZN3ESCC1Ev>
LineTrace line_trace(&motor, &line_sensor, &velocity_ctrl, &side_sensor, &encoder, &odometry, &logger, &imu, &esc);
 8009312:	4b18      	ldr	r3, [pc, #96]	; (8009374 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 8009314:	9305      	str	r3, [sp, #20]
 8009316:	4b12      	ldr	r3, [pc, #72]	; (8009360 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009318:	9304      	str	r3, [sp, #16]
 800931a:	4b12      	ldr	r3, [pc, #72]	; (8009364 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 800931c:	9303      	str	r3, [sp, #12]
 800931e:	4b14      	ldr	r3, [pc, #80]	; (8009370 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8009320:	9302      	str	r3, [sp, #8]
 8009322:	4b11      	ldr	r3, [pc, #68]	; (8009368 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8009324:	9301      	str	r3, [sp, #4]
 8009326:	4b0b      	ldr	r3, [pc, #44]	; (8009354 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8009328:	9300      	str	r3, [sp, #0]
 800932a:	4b10      	ldr	r3, [pc, #64]	; (800936c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 800932c:	4a08      	ldr	r2, [pc, #32]	; (8009350 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 800932e:	490b      	ldr	r1, [pc, #44]	; (800935c <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8009330:	4811      	ldr	r0, [pc, #68]	; (8009378 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 8009332:	f7f9 fb41 	bl	80029b8 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC>
SystemIdentification sys_ident(&logger, &motor);
 8009336:	4a09      	ldr	r2, [pc, #36]	; (800935c <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8009338:	490a      	ldr	r1, [pc, #40]	; (8009364 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 800933a:	4810      	ldr	r0, [pc, #64]	; (800937c <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 800933c:	f7fc f930 	bl	80055a0 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>
PathFollowing path_following;
 8009340:	480f      	ldr	r0, [pc, #60]	; (8009380 <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 8009342:	f7fb fe6f 	bl	8005024 <_ZN13PathFollowingC1Ev>
}
 8009346:	bf00      	nop
 8009348:	3708      	adds	r7, #8
 800934a:	46bd      	mov	sp, r7
 800934c:	bd80      	pop	{r7, pc}
 800934e:	bf00      	nop
 8009350:	200002bc 	.word	0x200002bc
 8009354:	200005b4 	.word	0x200005b4
 8009358:	200005bc 	.word	0x200005bc
 800935c:	200005c4 	.word	0x200005c4
 8009360:	200005d8 	.word	0x200005d8
 8009364:	200005ec 	.word	0x200005ec
 8009368:	2001bb74 	.word	0x2001bb74
 800936c:	2001bb94 	.word	0x2001bb94
 8009370:	2001bbd0 	.word	0x2001bbd0
 8009374:	2001bc10 	.word	0x2001bc10
 8009378:	2001bc14 	.word	0x2001bc14
 800937c:	20029950 	.word	0x20029950
 8009380:	20029b60 	.word	0x20029b60

08009384 <_GLOBAL__sub_I_line_sensor>:
 8009384:	b580      	push	{r7, lr}
 8009386:	af00      	add	r7, sp, #0
 8009388:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800938c:	2001      	movs	r0, #1
 800938e:	f7ff ff8f 	bl	80092b0 <_Z41__static_initialization_and_destruction_0ii>
 8009392:	bd80      	pop	{r7, pc}

08009394 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8009394:	f8df d034 	ldr.w	sp, [pc, #52]	; 80093cc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8009398:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800939a:	e003      	b.n	80093a4 <LoopCopyDataInit>

0800939c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800939c:	4b0c      	ldr	r3, [pc, #48]	; (80093d0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800939e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80093a0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80093a2:	3104      	adds	r1, #4

080093a4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80093a4:	480b      	ldr	r0, [pc, #44]	; (80093d4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80093a6:	4b0c      	ldr	r3, [pc, #48]	; (80093d8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80093a8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80093aa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80093ac:	d3f6      	bcc.n	800939c <CopyDataInit>
  ldr  r2, =_sbss
 80093ae:	4a0b      	ldr	r2, [pc, #44]	; (80093dc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80093b0:	e002      	b.n	80093b8 <LoopFillZerobss>

080093b2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80093b2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80093b4:	f842 3b04 	str.w	r3, [r2], #4

080093b8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80093b8:	4b09      	ldr	r3, [pc, #36]	; (80093e0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80093ba:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80093bc:	d3f9      	bcc.n	80093b2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80093be:	f7fe f899 	bl	80074f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80093c2:	f00b fdd5 	bl	8014f70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80093c6:	f7fc fbd3 	bl	8005b70 <main>
  bx  lr    
 80093ca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80093cc:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80093d0:	08019f90 	.word	0x08019f90
  ldr  r0, =_sdata
 80093d4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80093d8:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 80093dc:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 80093e0:	20045cd8 	.word	0x20045cd8

080093e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80093e4:	e7fe      	b.n	80093e4 <ADC_IRQHandler>
	...

080093e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80093ec:	4b0e      	ldr	r3, [pc, #56]	; (8009428 <HAL_Init+0x40>)
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	4a0d      	ldr	r2, [pc, #52]	; (8009428 <HAL_Init+0x40>)
 80093f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80093f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80093f8:	4b0b      	ldr	r3, [pc, #44]	; (8009428 <HAL_Init+0x40>)
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	4a0a      	ldr	r2, [pc, #40]	; (8009428 <HAL_Init+0x40>)
 80093fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009402:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009404:	4b08      	ldr	r3, [pc, #32]	; (8009428 <HAL_Init+0x40>)
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	4a07      	ldr	r2, [pc, #28]	; (8009428 <HAL_Init+0x40>)
 800940a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800940e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009410:	2003      	movs	r0, #3
 8009412:	f000 fd51 	bl	8009eb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8009416:	2000      	movs	r0, #0
 8009418:	f000 f808 	bl	800942c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800941c:	f7fd faba 	bl	8006994 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009420:	2300      	movs	r3, #0
}
 8009422:	4618      	mov	r0, r3
 8009424:	bd80      	pop	{r7, pc}
 8009426:	bf00      	nop
 8009428:	40023c00 	.word	0x40023c00

0800942c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b082      	sub	sp, #8
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009434:	4b12      	ldr	r3, [pc, #72]	; (8009480 <HAL_InitTick+0x54>)
 8009436:	681a      	ldr	r2, [r3, #0]
 8009438:	4b12      	ldr	r3, [pc, #72]	; (8009484 <HAL_InitTick+0x58>)
 800943a:	781b      	ldrb	r3, [r3, #0]
 800943c:	4619      	mov	r1, r3
 800943e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009442:	fbb3 f3f1 	udiv	r3, r3, r1
 8009446:	fbb2 f3f3 	udiv	r3, r2, r3
 800944a:	4618      	mov	r0, r3
 800944c:	f000 fd69 	bl	8009f22 <HAL_SYSTICK_Config>
 8009450:	4603      	mov	r3, r0
 8009452:	2b00      	cmp	r3, #0
 8009454:	d001      	beq.n	800945a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8009456:	2301      	movs	r3, #1
 8009458:	e00e      	b.n	8009478 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	2b0f      	cmp	r3, #15
 800945e:	d80a      	bhi.n	8009476 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009460:	2200      	movs	r2, #0
 8009462:	6879      	ldr	r1, [r7, #4]
 8009464:	f04f 30ff 	mov.w	r0, #4294967295
 8009468:	f000 fd31 	bl	8009ece <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800946c:	4a06      	ldr	r2, [pc, #24]	; (8009488 <HAL_InitTick+0x5c>)
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8009472:	2300      	movs	r3, #0
 8009474:	e000      	b.n	8009478 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8009476:	2301      	movs	r3, #1
}
 8009478:	4618      	mov	r0, r3
 800947a:	3708      	adds	r7, #8
 800947c:	46bd      	mov	sp, r7
 800947e:	bd80      	pop	{r7, pc}
 8009480:	20000000 	.word	0x20000000
 8009484:	20000008 	.word	0x20000008
 8009488:	20000004 	.word	0x20000004

0800948c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800948c:	b480      	push	{r7}
 800948e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009490:	4b06      	ldr	r3, [pc, #24]	; (80094ac <HAL_IncTick+0x20>)
 8009492:	781b      	ldrb	r3, [r3, #0]
 8009494:	461a      	mov	r2, r3
 8009496:	4b06      	ldr	r3, [pc, #24]	; (80094b0 <HAL_IncTick+0x24>)
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	4413      	add	r3, r2
 800949c:	4a04      	ldr	r2, [pc, #16]	; (80094b0 <HAL_IncTick+0x24>)
 800949e:	6013      	str	r3, [r2, #0]
}
 80094a0:	bf00      	nop
 80094a2:	46bd      	mov	sp, r7
 80094a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a8:	4770      	bx	lr
 80094aa:	bf00      	nop
 80094ac:	20000008 	.word	0x20000008
 80094b0:	20043c60 	.word	0x20043c60

080094b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80094b4:	b480      	push	{r7}
 80094b6:	af00      	add	r7, sp, #0
  return uwTick;
 80094b8:	4b03      	ldr	r3, [pc, #12]	; (80094c8 <HAL_GetTick+0x14>)
 80094ba:	681b      	ldr	r3, [r3, #0]
}
 80094bc:	4618      	mov	r0, r3
 80094be:	46bd      	mov	sp, r7
 80094c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c4:	4770      	bx	lr
 80094c6:	bf00      	nop
 80094c8:	20043c60 	.word	0x20043c60

080094cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b084      	sub	sp, #16
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80094d4:	f7ff ffee 	bl	80094b4 <HAL_GetTick>
 80094d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094e4:	d005      	beq.n	80094f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80094e6:	4b09      	ldr	r3, [pc, #36]	; (800950c <HAL_Delay+0x40>)
 80094e8:	781b      	ldrb	r3, [r3, #0]
 80094ea:	461a      	mov	r2, r3
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	4413      	add	r3, r2
 80094f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80094f2:	bf00      	nop
 80094f4:	f7ff ffde 	bl	80094b4 <HAL_GetTick>
 80094f8:	4602      	mov	r2, r0
 80094fa:	68bb      	ldr	r3, [r7, #8]
 80094fc:	1ad3      	subs	r3, r2, r3
 80094fe:	68fa      	ldr	r2, [r7, #12]
 8009500:	429a      	cmp	r2, r3
 8009502:	d8f7      	bhi.n	80094f4 <HAL_Delay+0x28>
  {
  }
}
 8009504:	bf00      	nop
 8009506:	3710      	adds	r7, #16
 8009508:	46bd      	mov	sp, r7
 800950a:	bd80      	pop	{r7, pc}
 800950c:	20000008 	.word	0x20000008

08009510 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b084      	sub	sp, #16
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009518:	2300      	movs	r3, #0
 800951a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d101      	bne.n	8009526 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8009522:	2301      	movs	r3, #1
 8009524:	e033      	b.n	800958e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800952a:	2b00      	cmp	r3, #0
 800952c:	d109      	bne.n	8009542 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	f7fd fa58 	bl	80069e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2200      	movs	r2, #0
 8009538:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	2200      	movs	r2, #0
 800953e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009546:	f003 0310 	and.w	r3, r3, #16
 800954a:	2b00      	cmp	r3, #0
 800954c:	d118      	bne.n	8009580 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009552:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8009556:	f023 0302 	bic.w	r3, r3, #2
 800955a:	f043 0202 	orr.w	r2, r3, #2
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	f000 fa5a 	bl	8009a1c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2200      	movs	r2, #0
 800956c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009572:	f023 0303 	bic.w	r3, r3, #3
 8009576:	f043 0201 	orr.w	r2, r3, #1
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	641a      	str	r2, [r3, #64]	; 0x40
 800957e:	e001      	b.n	8009584 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8009580:	2301      	movs	r3, #1
 8009582:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2200      	movs	r2, #0
 8009588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800958c:	7bfb      	ldrb	r3, [r7, #15]
}
 800958e:	4618      	mov	r0, r3
 8009590:	3710      	adds	r7, #16
 8009592:	46bd      	mov	sp, r7
 8009594:	bd80      	pop	{r7, pc}
	...

08009598 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b086      	sub	sp, #24
 800959c:	af00      	add	r7, sp, #0
 800959e:	60f8      	str	r0, [r7, #12]
 80095a0:	60b9      	str	r1, [r7, #8]
 80095a2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80095a4:	2300      	movs	r3, #0
 80095a6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80095ae:	2b01      	cmp	r3, #1
 80095b0:	d101      	bne.n	80095b6 <HAL_ADC_Start_DMA+0x1e>
 80095b2:	2302      	movs	r3, #2
 80095b4:	e0cc      	b.n	8009750 <HAL_ADC_Start_DMA+0x1b8>
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	2201      	movs	r2, #1
 80095ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	689b      	ldr	r3, [r3, #8]
 80095c4:	f003 0301 	and.w	r3, r3, #1
 80095c8:	2b01      	cmp	r3, #1
 80095ca:	d018      	beq.n	80095fe <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	689a      	ldr	r2, [r3, #8]
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f042 0201 	orr.w	r2, r2, #1
 80095da:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80095dc:	4b5e      	ldr	r3, [pc, #376]	; (8009758 <HAL_ADC_Start_DMA+0x1c0>)
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	4a5e      	ldr	r2, [pc, #376]	; (800975c <HAL_ADC_Start_DMA+0x1c4>)
 80095e2:	fba2 2303 	umull	r2, r3, r2, r3
 80095e6:	0c9a      	lsrs	r2, r3, #18
 80095e8:	4613      	mov	r3, r2
 80095ea:	005b      	lsls	r3, r3, #1
 80095ec:	4413      	add	r3, r2
 80095ee:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80095f0:	e002      	b.n	80095f8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80095f2:	693b      	ldr	r3, [r7, #16]
 80095f4:	3b01      	subs	r3, #1
 80095f6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80095f8:	693b      	ldr	r3, [r7, #16]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d1f9      	bne.n	80095f2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	689b      	ldr	r3, [r3, #8]
 8009604:	f003 0301 	and.w	r3, r3, #1
 8009608:	2b01      	cmp	r3, #1
 800960a:	f040 80a0 	bne.w	800974e <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009612:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8009616:	f023 0301 	bic.w	r3, r3, #1
 800961a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	685b      	ldr	r3, [r3, #4]
 8009628:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800962c:	2b00      	cmp	r3, #0
 800962e:	d007      	beq.n	8009640 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009634:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8009638:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009644:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009648:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800964c:	d106      	bne.n	800965c <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009652:	f023 0206 	bic.w	r2, r3, #6
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	645a      	str	r2, [r3, #68]	; 0x44
 800965a:	e002      	b.n	8009662 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	2200      	movs	r2, #0
 8009660:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	2200      	movs	r2, #0
 8009666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800966a:	4b3d      	ldr	r3, [pc, #244]	; (8009760 <HAL_ADC_Start_DMA+0x1c8>)
 800966c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009672:	4a3c      	ldr	r2, [pc, #240]	; (8009764 <HAL_ADC_Start_DMA+0x1cc>)
 8009674:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800967a:	4a3b      	ldr	r2, [pc, #236]	; (8009768 <HAL_ADC_Start_DMA+0x1d0>)
 800967c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009682:	4a3a      	ldr	r2, [pc, #232]	; (800976c <HAL_ADC_Start_DMA+0x1d4>)
 8009684:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800968e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	685a      	ldr	r2, [r3, #4]
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800969e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	689a      	ldr	r2, [r3, #8]
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80096ae:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	334c      	adds	r3, #76	; 0x4c
 80096ba:	4619      	mov	r1, r3
 80096bc:	68ba      	ldr	r2, [r7, #8]
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	f000 fcea 	bl	800a098 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80096c4:	697b      	ldr	r3, [r7, #20]
 80096c6:	685b      	ldr	r3, [r3, #4]
 80096c8:	f003 031f 	and.w	r3, r3, #31
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d12a      	bne.n	8009726 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	4a26      	ldr	r2, [pc, #152]	; (8009770 <HAL_ADC_Start_DMA+0x1d8>)
 80096d6:	4293      	cmp	r3, r2
 80096d8:	d015      	beq.n	8009706 <HAL_ADC_Start_DMA+0x16e>
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	4a25      	ldr	r2, [pc, #148]	; (8009774 <HAL_ADC_Start_DMA+0x1dc>)
 80096e0:	4293      	cmp	r3, r2
 80096e2:	d105      	bne.n	80096f0 <HAL_ADC_Start_DMA+0x158>
 80096e4:	4b1e      	ldr	r3, [pc, #120]	; (8009760 <HAL_ADC_Start_DMA+0x1c8>)
 80096e6:	685b      	ldr	r3, [r3, #4]
 80096e8:	f003 031f 	and.w	r3, r3, #31
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d00a      	beq.n	8009706 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	4a20      	ldr	r2, [pc, #128]	; (8009778 <HAL_ADC_Start_DMA+0x1e0>)
 80096f6:	4293      	cmp	r3, r2
 80096f8:	d129      	bne.n	800974e <HAL_ADC_Start_DMA+0x1b6>
 80096fa:	4b19      	ldr	r3, [pc, #100]	; (8009760 <HAL_ADC_Start_DMA+0x1c8>)
 80096fc:	685b      	ldr	r3, [r3, #4]
 80096fe:	f003 031f 	and.w	r3, r3, #31
 8009702:	2b0f      	cmp	r3, #15
 8009704:	d823      	bhi.n	800974e <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	689b      	ldr	r3, [r3, #8]
 800970c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009710:	2b00      	cmp	r3, #0
 8009712:	d11c      	bne.n	800974e <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	689a      	ldr	r2, [r3, #8]
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8009722:	609a      	str	r2, [r3, #8]
 8009724:	e013      	b.n	800974e <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	4a11      	ldr	r2, [pc, #68]	; (8009770 <HAL_ADC_Start_DMA+0x1d8>)
 800972c:	4293      	cmp	r3, r2
 800972e:	d10e      	bne.n	800974e <HAL_ADC_Start_DMA+0x1b6>
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	689b      	ldr	r3, [r3, #8]
 8009736:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800973a:	2b00      	cmp	r3, #0
 800973c:	d107      	bne.n	800974e <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	689a      	ldr	r2, [r3, #8]
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800974c:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800974e:	2300      	movs	r3, #0
}
 8009750:	4618      	mov	r0, r3
 8009752:	3718      	adds	r7, #24
 8009754:	46bd      	mov	sp, r7
 8009756:	bd80      	pop	{r7, pc}
 8009758:	20000000 	.word	0x20000000
 800975c:	431bde83 	.word	0x431bde83
 8009760:	40012300 	.word	0x40012300
 8009764:	08009c15 	.word	0x08009c15
 8009768:	08009ccf 	.word	0x08009ccf
 800976c:	08009ceb 	.word	0x08009ceb
 8009770:	40012000 	.word	0x40012000
 8009774:	40012100 	.word	0x40012100
 8009778:	40012200 	.word	0x40012200

0800977c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800977c:	b480      	push	{r7}
 800977e:	b083      	sub	sp, #12
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8009784:	bf00      	nop
 8009786:	370c      	adds	r7, #12
 8009788:	46bd      	mov	sp, r7
 800978a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978e:	4770      	bx	lr

08009790 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8009790:	b480      	push	{r7}
 8009792:	b083      	sub	sp, #12
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8009798:	bf00      	nop
 800979a:	370c      	adds	r7, #12
 800979c:	46bd      	mov	sp, r7
 800979e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a2:	4770      	bx	lr

080097a4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80097a4:	b480      	push	{r7}
 80097a6:	b083      	sub	sp, #12
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80097ac:	bf00      	nop
 80097ae:	370c      	adds	r7, #12
 80097b0:	46bd      	mov	sp, r7
 80097b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b6:	4770      	bx	lr

080097b8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80097b8:	b480      	push	{r7}
 80097ba:	b085      	sub	sp, #20
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
 80097c0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80097c2:	2300      	movs	r3, #0
 80097c4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80097cc:	2b01      	cmp	r3, #1
 80097ce:	d101      	bne.n	80097d4 <HAL_ADC_ConfigChannel+0x1c>
 80097d0:	2302      	movs	r3, #2
 80097d2:	e113      	b.n	80099fc <HAL_ADC_ConfigChannel+0x244>
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2201      	movs	r2, #1
 80097d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80097dc:	683b      	ldr	r3, [r7, #0]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	2b09      	cmp	r3, #9
 80097e2:	d925      	bls.n	8009830 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	68d9      	ldr	r1, [r3, #12]
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	b29b      	uxth	r3, r3
 80097f0:	461a      	mov	r2, r3
 80097f2:	4613      	mov	r3, r2
 80097f4:	005b      	lsls	r3, r3, #1
 80097f6:	4413      	add	r3, r2
 80097f8:	3b1e      	subs	r3, #30
 80097fa:	2207      	movs	r2, #7
 80097fc:	fa02 f303 	lsl.w	r3, r2, r3
 8009800:	43da      	mvns	r2, r3
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	400a      	ands	r2, r1
 8009808:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	68d9      	ldr	r1, [r3, #12]
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	689a      	ldr	r2, [r3, #8]
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	b29b      	uxth	r3, r3
 800981a:	4618      	mov	r0, r3
 800981c:	4603      	mov	r3, r0
 800981e:	005b      	lsls	r3, r3, #1
 8009820:	4403      	add	r3, r0
 8009822:	3b1e      	subs	r3, #30
 8009824:	409a      	lsls	r2, r3
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	430a      	orrs	r2, r1
 800982c:	60da      	str	r2, [r3, #12]
 800982e:	e022      	b.n	8009876 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	6919      	ldr	r1, [r3, #16]
 8009836:	683b      	ldr	r3, [r7, #0]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	b29b      	uxth	r3, r3
 800983c:	461a      	mov	r2, r3
 800983e:	4613      	mov	r3, r2
 8009840:	005b      	lsls	r3, r3, #1
 8009842:	4413      	add	r3, r2
 8009844:	2207      	movs	r2, #7
 8009846:	fa02 f303 	lsl.w	r3, r2, r3
 800984a:	43da      	mvns	r2, r3
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	400a      	ands	r2, r1
 8009852:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	6919      	ldr	r1, [r3, #16]
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	689a      	ldr	r2, [r3, #8]
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	b29b      	uxth	r3, r3
 8009864:	4618      	mov	r0, r3
 8009866:	4603      	mov	r3, r0
 8009868:	005b      	lsls	r3, r3, #1
 800986a:	4403      	add	r3, r0
 800986c:	409a      	lsls	r2, r3
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	430a      	orrs	r2, r1
 8009874:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	685b      	ldr	r3, [r3, #4]
 800987a:	2b06      	cmp	r3, #6
 800987c:	d824      	bhi.n	80098c8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	685a      	ldr	r2, [r3, #4]
 8009888:	4613      	mov	r3, r2
 800988a:	009b      	lsls	r3, r3, #2
 800988c:	4413      	add	r3, r2
 800988e:	3b05      	subs	r3, #5
 8009890:	221f      	movs	r2, #31
 8009892:	fa02 f303 	lsl.w	r3, r2, r3
 8009896:	43da      	mvns	r2, r3
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	400a      	ands	r2, r1
 800989e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	b29b      	uxth	r3, r3
 80098ac:	4618      	mov	r0, r3
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	685a      	ldr	r2, [r3, #4]
 80098b2:	4613      	mov	r3, r2
 80098b4:	009b      	lsls	r3, r3, #2
 80098b6:	4413      	add	r3, r2
 80098b8:	3b05      	subs	r3, #5
 80098ba:	fa00 f203 	lsl.w	r2, r0, r3
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	430a      	orrs	r2, r1
 80098c4:	635a      	str	r2, [r3, #52]	; 0x34
 80098c6:	e04c      	b.n	8009962 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	685b      	ldr	r3, [r3, #4]
 80098cc:	2b0c      	cmp	r3, #12
 80098ce:	d824      	bhi.n	800991a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	685a      	ldr	r2, [r3, #4]
 80098da:	4613      	mov	r3, r2
 80098dc:	009b      	lsls	r3, r3, #2
 80098de:	4413      	add	r3, r2
 80098e0:	3b23      	subs	r3, #35	; 0x23
 80098e2:	221f      	movs	r2, #31
 80098e4:	fa02 f303 	lsl.w	r3, r2, r3
 80098e8:	43da      	mvns	r2, r3
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	400a      	ands	r2, r1
 80098f0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	b29b      	uxth	r3, r3
 80098fe:	4618      	mov	r0, r3
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	685a      	ldr	r2, [r3, #4]
 8009904:	4613      	mov	r3, r2
 8009906:	009b      	lsls	r3, r3, #2
 8009908:	4413      	add	r3, r2
 800990a:	3b23      	subs	r3, #35	; 0x23
 800990c:	fa00 f203 	lsl.w	r2, r0, r3
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	430a      	orrs	r2, r1
 8009916:	631a      	str	r2, [r3, #48]	; 0x30
 8009918:	e023      	b.n	8009962 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009920:	683b      	ldr	r3, [r7, #0]
 8009922:	685a      	ldr	r2, [r3, #4]
 8009924:	4613      	mov	r3, r2
 8009926:	009b      	lsls	r3, r3, #2
 8009928:	4413      	add	r3, r2
 800992a:	3b41      	subs	r3, #65	; 0x41
 800992c:	221f      	movs	r2, #31
 800992e:	fa02 f303 	lsl.w	r3, r2, r3
 8009932:	43da      	mvns	r2, r3
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	400a      	ands	r2, r1
 800993a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	b29b      	uxth	r3, r3
 8009948:	4618      	mov	r0, r3
 800994a:	683b      	ldr	r3, [r7, #0]
 800994c:	685a      	ldr	r2, [r3, #4]
 800994e:	4613      	mov	r3, r2
 8009950:	009b      	lsls	r3, r3, #2
 8009952:	4413      	add	r3, r2
 8009954:	3b41      	subs	r3, #65	; 0x41
 8009956:	fa00 f203 	lsl.w	r2, r0, r3
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	430a      	orrs	r2, r1
 8009960:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009962:	4b29      	ldr	r3, [pc, #164]	; (8009a08 <HAL_ADC_ConfigChannel+0x250>)
 8009964:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	4a28      	ldr	r2, [pc, #160]	; (8009a0c <HAL_ADC_ConfigChannel+0x254>)
 800996c:	4293      	cmp	r3, r2
 800996e:	d10f      	bne.n	8009990 <HAL_ADC_ConfigChannel+0x1d8>
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	2b12      	cmp	r3, #18
 8009976:	d10b      	bne.n	8009990 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	685b      	ldr	r3, [r3, #4]
 800997c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	685b      	ldr	r3, [r3, #4]
 8009988:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	4a1d      	ldr	r2, [pc, #116]	; (8009a0c <HAL_ADC_ConfigChannel+0x254>)
 8009996:	4293      	cmp	r3, r2
 8009998:	d12b      	bne.n	80099f2 <HAL_ADC_ConfigChannel+0x23a>
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	4a1c      	ldr	r2, [pc, #112]	; (8009a10 <HAL_ADC_ConfigChannel+0x258>)
 80099a0:	4293      	cmp	r3, r2
 80099a2:	d003      	beq.n	80099ac <HAL_ADC_ConfigChannel+0x1f4>
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	2b11      	cmp	r3, #17
 80099aa:	d122      	bne.n	80099f2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	685b      	ldr	r3, [r3, #4]
 80099b0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	685b      	ldr	r3, [r3, #4]
 80099bc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	4a11      	ldr	r2, [pc, #68]	; (8009a10 <HAL_ADC_ConfigChannel+0x258>)
 80099ca:	4293      	cmp	r3, r2
 80099cc:	d111      	bne.n	80099f2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80099ce:	4b11      	ldr	r3, [pc, #68]	; (8009a14 <HAL_ADC_ConfigChannel+0x25c>)
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	4a11      	ldr	r2, [pc, #68]	; (8009a18 <HAL_ADC_ConfigChannel+0x260>)
 80099d4:	fba2 2303 	umull	r2, r3, r2, r3
 80099d8:	0c9a      	lsrs	r2, r3, #18
 80099da:	4613      	mov	r3, r2
 80099dc:	009b      	lsls	r3, r3, #2
 80099de:	4413      	add	r3, r2
 80099e0:	005b      	lsls	r3, r3, #1
 80099e2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80099e4:	e002      	b.n	80099ec <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80099e6:	68bb      	ldr	r3, [r7, #8]
 80099e8:	3b01      	subs	r3, #1
 80099ea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80099ec:	68bb      	ldr	r3, [r7, #8]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d1f9      	bne.n	80099e6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	2200      	movs	r2, #0
 80099f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80099fa:	2300      	movs	r3, #0
}
 80099fc:	4618      	mov	r0, r3
 80099fe:	3714      	adds	r7, #20
 8009a00:	46bd      	mov	sp, r7
 8009a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a06:	4770      	bx	lr
 8009a08:	40012300 	.word	0x40012300
 8009a0c:	40012000 	.word	0x40012000
 8009a10:	10000012 	.word	0x10000012
 8009a14:	20000000 	.word	0x20000000
 8009a18:	431bde83 	.word	0x431bde83

08009a1c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8009a1c:	b480      	push	{r7}
 8009a1e:	b085      	sub	sp, #20
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009a24:	4b79      	ldr	r3, [pc, #484]	; (8009c0c <ADC_Init+0x1f0>)
 8009a26:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	685b      	ldr	r3, [r3, #4]
 8009a2c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	685a      	ldr	r2, [r3, #4]
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	685b      	ldr	r3, [r3, #4]
 8009a3c:	431a      	orrs	r2, r3
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	685a      	ldr	r2, [r3, #4]
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009a50:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	6859      	ldr	r1, [r3, #4]
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	691b      	ldr	r3, [r3, #16]
 8009a5c:	021a      	lsls	r2, r3, #8
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	430a      	orrs	r2, r1
 8009a64:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	685a      	ldr	r2, [r3, #4]
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8009a74:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	6859      	ldr	r1, [r3, #4]
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	689a      	ldr	r2, [r3, #8]
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	430a      	orrs	r2, r1
 8009a86:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	689a      	ldr	r2, [r3, #8]
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009a96:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	6899      	ldr	r1, [r3, #8]
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	68da      	ldr	r2, [r3, #12]
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	430a      	orrs	r2, r1
 8009aa8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009aae:	4a58      	ldr	r2, [pc, #352]	; (8009c10 <ADC_Init+0x1f4>)
 8009ab0:	4293      	cmp	r3, r2
 8009ab2:	d022      	beq.n	8009afa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	689a      	ldr	r2, [r3, #8]
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009ac2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	6899      	ldr	r1, [r3, #8]
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	430a      	orrs	r2, r1
 8009ad4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	689a      	ldr	r2, [r3, #8]
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009ae4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	6899      	ldr	r1, [r3, #8]
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	430a      	orrs	r2, r1
 8009af6:	609a      	str	r2, [r3, #8]
 8009af8:	e00f      	b.n	8009b1a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	689a      	ldr	r2, [r3, #8]
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009b08:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	689a      	ldr	r2, [r3, #8]
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009b18:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	689a      	ldr	r2, [r3, #8]
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	f022 0202 	bic.w	r2, r2, #2
 8009b28:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	6899      	ldr	r1, [r3, #8]
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	7e1b      	ldrb	r3, [r3, #24]
 8009b34:	005a      	lsls	r2, r3, #1
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	430a      	orrs	r2, r1
 8009b3c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d01b      	beq.n	8009b80 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	685a      	ldr	r2, [r3, #4]
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009b56:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	685a      	ldr	r2, [r3, #4]
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8009b66:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	6859      	ldr	r1, [r3, #4]
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b72:	3b01      	subs	r3, #1
 8009b74:	035a      	lsls	r2, r3, #13
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	430a      	orrs	r2, r1
 8009b7c:	605a      	str	r2, [r3, #4]
 8009b7e:	e007      	b.n	8009b90 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	685a      	ldr	r2, [r3, #4]
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009b8e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8009b9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	69db      	ldr	r3, [r3, #28]
 8009baa:	3b01      	subs	r3, #1
 8009bac:	051a      	lsls	r2, r3, #20
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	430a      	orrs	r2, r1
 8009bb4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	689a      	ldr	r2, [r3, #8]
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8009bc4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	6899      	ldr	r1, [r3, #8]
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009bd2:	025a      	lsls	r2, r3, #9
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	430a      	orrs	r2, r1
 8009bda:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	689a      	ldr	r2, [r3, #8]
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009bea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	6899      	ldr	r1, [r3, #8]
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	695b      	ldr	r3, [r3, #20]
 8009bf6:	029a      	lsls	r2, r3, #10
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	430a      	orrs	r2, r1
 8009bfe:	609a      	str	r2, [r3, #8]
}
 8009c00:	bf00      	nop
 8009c02:	3714      	adds	r7, #20
 8009c04:	46bd      	mov	sp, r7
 8009c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0a:	4770      	bx	lr
 8009c0c:	40012300 	.word	0x40012300
 8009c10:	0f000001 	.word	0x0f000001

08009c14 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b084      	sub	sp, #16
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c20:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c26:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d13c      	bne.n	8009ca8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c32:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	689b      	ldr	r3, [r3, #8]
 8009c40:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d12b      	bne.n	8009ca0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d127      	bne.n	8009ca0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c56:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d006      	beq.n	8009c6c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	689b      	ldr	r3, [r3, #8]
 8009c64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d119      	bne.n	8009ca0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	685a      	ldr	r2, [r3, #4]
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	f022 0220 	bic.w	r2, r2, #32
 8009c7a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c80:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d105      	bne.n	8009ca0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c98:	f043 0201 	orr.w	r2, r3, #1
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8009ca0:	68f8      	ldr	r0, [r7, #12]
 8009ca2:	f7ff fd6b 	bl	800977c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8009ca6:	e00e      	b.n	8009cc6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cac:	f003 0310 	and.w	r3, r3, #16
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d003      	beq.n	8009cbc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8009cb4:	68f8      	ldr	r0, [r7, #12]
 8009cb6:	f7ff fd75 	bl	80097a4 <HAL_ADC_ErrorCallback>
}
 8009cba:	e004      	b.n	8009cc6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009cc2:	6878      	ldr	r0, [r7, #4]
 8009cc4:	4798      	blx	r3
}
 8009cc6:	bf00      	nop
 8009cc8:	3710      	adds	r7, #16
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}

08009cce <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8009cce:	b580      	push	{r7, lr}
 8009cd0:	b084      	sub	sp, #16
 8009cd2:	af00      	add	r7, sp, #0
 8009cd4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cda:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8009cdc:	68f8      	ldr	r0, [r7, #12]
 8009cde:	f7ff fd57 	bl	8009790 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8009ce2:	bf00      	nop
 8009ce4:	3710      	adds	r7, #16
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	bd80      	pop	{r7, pc}

08009cea <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8009cea:	b580      	push	{r7, lr}
 8009cec:	b084      	sub	sp, #16
 8009cee:	af00      	add	r7, sp, #0
 8009cf0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cf6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	2240      	movs	r2, #64	; 0x40
 8009cfc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d02:	f043 0204 	orr.w	r2, r3, #4
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8009d0a:	68f8      	ldr	r0, [r7, #12]
 8009d0c:	f7ff fd4a 	bl	80097a4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8009d10:	bf00      	nop
 8009d12:	3710      	adds	r7, #16
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bd80      	pop	{r7, pc}

08009d18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009d18:	b480      	push	{r7}
 8009d1a:	b085      	sub	sp, #20
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	f003 0307 	and.w	r3, r3, #7
 8009d26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009d28:	4b0c      	ldr	r3, [pc, #48]	; (8009d5c <__NVIC_SetPriorityGrouping+0x44>)
 8009d2a:	68db      	ldr	r3, [r3, #12]
 8009d2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009d2e:	68ba      	ldr	r2, [r7, #8]
 8009d30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009d34:	4013      	ands	r3, r2
 8009d36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009d3c:	68bb      	ldr	r3, [r7, #8]
 8009d3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009d40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009d44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009d48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009d4a:	4a04      	ldr	r2, [pc, #16]	; (8009d5c <__NVIC_SetPriorityGrouping+0x44>)
 8009d4c:	68bb      	ldr	r3, [r7, #8]
 8009d4e:	60d3      	str	r3, [r2, #12]
}
 8009d50:	bf00      	nop
 8009d52:	3714      	adds	r7, #20
 8009d54:	46bd      	mov	sp, r7
 8009d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5a:	4770      	bx	lr
 8009d5c:	e000ed00 	.word	0xe000ed00

08009d60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009d60:	b480      	push	{r7}
 8009d62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009d64:	4b04      	ldr	r3, [pc, #16]	; (8009d78 <__NVIC_GetPriorityGrouping+0x18>)
 8009d66:	68db      	ldr	r3, [r3, #12]
 8009d68:	0a1b      	lsrs	r3, r3, #8
 8009d6a:	f003 0307 	and.w	r3, r3, #7
}
 8009d6e:	4618      	mov	r0, r3
 8009d70:	46bd      	mov	sp, r7
 8009d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d76:	4770      	bx	lr
 8009d78:	e000ed00 	.word	0xe000ed00

08009d7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009d7c:	b480      	push	{r7}
 8009d7e:	b083      	sub	sp, #12
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	4603      	mov	r3, r0
 8009d84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	db0b      	blt.n	8009da6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009d8e:	79fb      	ldrb	r3, [r7, #7]
 8009d90:	f003 021f 	and.w	r2, r3, #31
 8009d94:	4907      	ldr	r1, [pc, #28]	; (8009db4 <__NVIC_EnableIRQ+0x38>)
 8009d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d9a:	095b      	lsrs	r3, r3, #5
 8009d9c:	2001      	movs	r0, #1
 8009d9e:	fa00 f202 	lsl.w	r2, r0, r2
 8009da2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8009da6:	bf00      	nop
 8009da8:	370c      	adds	r7, #12
 8009daa:	46bd      	mov	sp, r7
 8009dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db0:	4770      	bx	lr
 8009db2:	bf00      	nop
 8009db4:	e000e100 	.word	0xe000e100

08009db8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009db8:	b480      	push	{r7}
 8009dba:	b083      	sub	sp, #12
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	4603      	mov	r3, r0
 8009dc0:	6039      	str	r1, [r7, #0]
 8009dc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009dc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	db0a      	blt.n	8009de2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	b2da      	uxtb	r2, r3
 8009dd0:	490c      	ldr	r1, [pc, #48]	; (8009e04 <__NVIC_SetPriority+0x4c>)
 8009dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009dd6:	0112      	lsls	r2, r2, #4
 8009dd8:	b2d2      	uxtb	r2, r2
 8009dda:	440b      	add	r3, r1
 8009ddc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009de0:	e00a      	b.n	8009df8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	b2da      	uxtb	r2, r3
 8009de6:	4908      	ldr	r1, [pc, #32]	; (8009e08 <__NVIC_SetPriority+0x50>)
 8009de8:	79fb      	ldrb	r3, [r7, #7]
 8009dea:	f003 030f 	and.w	r3, r3, #15
 8009dee:	3b04      	subs	r3, #4
 8009df0:	0112      	lsls	r2, r2, #4
 8009df2:	b2d2      	uxtb	r2, r2
 8009df4:	440b      	add	r3, r1
 8009df6:	761a      	strb	r2, [r3, #24]
}
 8009df8:	bf00      	nop
 8009dfa:	370c      	adds	r7, #12
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e02:	4770      	bx	lr
 8009e04:	e000e100 	.word	0xe000e100
 8009e08:	e000ed00 	.word	0xe000ed00

08009e0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009e0c:	b480      	push	{r7}
 8009e0e:	b089      	sub	sp, #36	; 0x24
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	60f8      	str	r0, [r7, #12]
 8009e14:	60b9      	str	r1, [r7, #8]
 8009e16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	f003 0307 	and.w	r3, r3, #7
 8009e1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009e20:	69fb      	ldr	r3, [r7, #28]
 8009e22:	f1c3 0307 	rsb	r3, r3, #7
 8009e26:	2b04      	cmp	r3, #4
 8009e28:	bf28      	it	cs
 8009e2a:	2304      	movcs	r3, #4
 8009e2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009e2e:	69fb      	ldr	r3, [r7, #28]
 8009e30:	3304      	adds	r3, #4
 8009e32:	2b06      	cmp	r3, #6
 8009e34:	d902      	bls.n	8009e3c <NVIC_EncodePriority+0x30>
 8009e36:	69fb      	ldr	r3, [r7, #28]
 8009e38:	3b03      	subs	r3, #3
 8009e3a:	e000      	b.n	8009e3e <NVIC_EncodePriority+0x32>
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009e40:	f04f 32ff 	mov.w	r2, #4294967295
 8009e44:	69bb      	ldr	r3, [r7, #24]
 8009e46:	fa02 f303 	lsl.w	r3, r2, r3
 8009e4a:	43da      	mvns	r2, r3
 8009e4c:	68bb      	ldr	r3, [r7, #8]
 8009e4e:	401a      	ands	r2, r3
 8009e50:	697b      	ldr	r3, [r7, #20]
 8009e52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009e54:	f04f 31ff 	mov.w	r1, #4294967295
 8009e58:	697b      	ldr	r3, [r7, #20]
 8009e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8009e5e:	43d9      	mvns	r1, r3
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009e64:	4313      	orrs	r3, r2
         );
}
 8009e66:	4618      	mov	r0, r3
 8009e68:	3724      	adds	r7, #36	; 0x24
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e70:	4770      	bx	lr
	...

08009e74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	b082      	sub	sp, #8
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	3b01      	subs	r3, #1
 8009e80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009e84:	d301      	bcc.n	8009e8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009e86:	2301      	movs	r3, #1
 8009e88:	e00f      	b.n	8009eaa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009e8a:	4a0a      	ldr	r2, [pc, #40]	; (8009eb4 <SysTick_Config+0x40>)
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	3b01      	subs	r3, #1
 8009e90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009e92:	210f      	movs	r1, #15
 8009e94:	f04f 30ff 	mov.w	r0, #4294967295
 8009e98:	f7ff ff8e 	bl	8009db8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009e9c:	4b05      	ldr	r3, [pc, #20]	; (8009eb4 <SysTick_Config+0x40>)
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009ea2:	4b04      	ldr	r3, [pc, #16]	; (8009eb4 <SysTick_Config+0x40>)
 8009ea4:	2207      	movs	r2, #7
 8009ea6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009ea8:	2300      	movs	r3, #0
}
 8009eaa:	4618      	mov	r0, r3
 8009eac:	3708      	adds	r7, #8
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	bd80      	pop	{r7, pc}
 8009eb2:	bf00      	nop
 8009eb4:	e000e010 	.word	0xe000e010

08009eb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b082      	sub	sp, #8
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009ec0:	6878      	ldr	r0, [r7, #4]
 8009ec2:	f7ff ff29 	bl	8009d18 <__NVIC_SetPriorityGrouping>
}
 8009ec6:	bf00      	nop
 8009ec8:	3708      	adds	r7, #8
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bd80      	pop	{r7, pc}

08009ece <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009ece:	b580      	push	{r7, lr}
 8009ed0:	b086      	sub	sp, #24
 8009ed2:	af00      	add	r7, sp, #0
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	60b9      	str	r1, [r7, #8]
 8009ed8:	607a      	str	r2, [r7, #4]
 8009eda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009edc:	2300      	movs	r3, #0
 8009ede:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009ee0:	f7ff ff3e 	bl	8009d60 <__NVIC_GetPriorityGrouping>
 8009ee4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009ee6:	687a      	ldr	r2, [r7, #4]
 8009ee8:	68b9      	ldr	r1, [r7, #8]
 8009eea:	6978      	ldr	r0, [r7, #20]
 8009eec:	f7ff ff8e 	bl	8009e0c <NVIC_EncodePriority>
 8009ef0:	4602      	mov	r2, r0
 8009ef2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009ef6:	4611      	mov	r1, r2
 8009ef8:	4618      	mov	r0, r3
 8009efa:	f7ff ff5d 	bl	8009db8 <__NVIC_SetPriority>
}
 8009efe:	bf00      	nop
 8009f00:	3718      	adds	r7, #24
 8009f02:	46bd      	mov	sp, r7
 8009f04:	bd80      	pop	{r7, pc}

08009f06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009f06:	b580      	push	{r7, lr}
 8009f08:	b082      	sub	sp, #8
 8009f0a:	af00      	add	r7, sp, #0
 8009f0c:	4603      	mov	r3, r0
 8009f0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009f14:	4618      	mov	r0, r3
 8009f16:	f7ff ff31 	bl	8009d7c <__NVIC_EnableIRQ>
}
 8009f1a:	bf00      	nop
 8009f1c:	3708      	adds	r7, #8
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	bd80      	pop	{r7, pc}

08009f22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009f22:	b580      	push	{r7, lr}
 8009f24:	b082      	sub	sp, #8
 8009f26:	af00      	add	r7, sp, #0
 8009f28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009f2a:	6878      	ldr	r0, [r7, #4]
 8009f2c:	f7ff ffa2 	bl	8009e74 <SysTick_Config>
 8009f30:	4603      	mov	r3, r0
}
 8009f32:	4618      	mov	r0, r3
 8009f34:	3708      	adds	r7, #8
 8009f36:	46bd      	mov	sp, r7
 8009f38:	bd80      	pop	{r7, pc}
	...

08009f3c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b086      	sub	sp, #24
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8009f44:	2300      	movs	r3, #0
 8009f46:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8009f48:	f7ff fab4 	bl	80094b4 <HAL_GetTick>
 8009f4c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d101      	bne.n	8009f58 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8009f54:	2301      	movs	r3, #1
 8009f56:	e099      	b.n	800a08c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2202      	movs	r2, #2
 8009f64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	681a      	ldr	r2, [r3, #0]
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	f022 0201 	bic.w	r2, r2, #1
 8009f76:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009f78:	e00f      	b.n	8009f9a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009f7a:	f7ff fa9b 	bl	80094b4 <HAL_GetTick>
 8009f7e:	4602      	mov	r2, r0
 8009f80:	693b      	ldr	r3, [r7, #16]
 8009f82:	1ad3      	subs	r3, r2, r3
 8009f84:	2b05      	cmp	r3, #5
 8009f86:	d908      	bls.n	8009f9a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	2220      	movs	r2, #32
 8009f8c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	2203      	movs	r2, #3
 8009f92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8009f96:	2303      	movs	r3, #3
 8009f98:	e078      	b.n	800a08c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	f003 0301 	and.w	r3, r3, #1
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d1e8      	bne.n	8009f7a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8009fb0:	697a      	ldr	r2, [r7, #20]
 8009fb2:	4b38      	ldr	r3, [pc, #224]	; (800a094 <HAL_DMA_Init+0x158>)
 8009fb4:	4013      	ands	r3, r2
 8009fb6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	685a      	ldr	r2, [r3, #4]
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	689b      	ldr	r3, [r3, #8]
 8009fc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009fc6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	691b      	ldr	r3, [r3, #16]
 8009fcc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009fd2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	699b      	ldr	r3, [r3, #24]
 8009fd8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009fde:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	6a1b      	ldr	r3, [r3, #32]
 8009fe4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009fe6:	697a      	ldr	r2, [r7, #20]
 8009fe8:	4313      	orrs	r3, r2
 8009fea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ff0:	2b04      	cmp	r3, #4
 8009ff2:	d107      	bne.n	800a004 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ffc:	4313      	orrs	r3, r2
 8009ffe:	697a      	ldr	r2, [r7, #20]
 800a000:	4313      	orrs	r3, r2
 800a002:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	697a      	ldr	r2, [r7, #20]
 800a00a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	695b      	ldr	r3, [r3, #20]
 800a012:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800a014:	697b      	ldr	r3, [r7, #20]
 800a016:	f023 0307 	bic.w	r3, r3, #7
 800a01a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a020:	697a      	ldr	r2, [r7, #20]
 800a022:	4313      	orrs	r3, r2
 800a024:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a02a:	2b04      	cmp	r3, #4
 800a02c:	d117      	bne.n	800a05e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a032:	697a      	ldr	r2, [r7, #20]
 800a034:	4313      	orrs	r3, r2
 800a036:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d00e      	beq.n	800a05e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800a040:	6878      	ldr	r0, [r7, #4]
 800a042:	f000 fa9d 	bl	800a580 <DMA_CheckFifoParam>
 800a046:	4603      	mov	r3, r0
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d008      	beq.n	800a05e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2240      	movs	r2, #64	; 0x40
 800a050:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	2201      	movs	r2, #1
 800a056:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800a05a:	2301      	movs	r3, #1
 800a05c:	e016      	b.n	800a08c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	697a      	ldr	r2, [r7, #20]
 800a064:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800a066:	6878      	ldr	r0, [r7, #4]
 800a068:	f000 fa54 	bl	800a514 <DMA_CalcBaseAndBitshift>
 800a06c:	4603      	mov	r3, r0
 800a06e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a074:	223f      	movs	r2, #63	; 0x3f
 800a076:	409a      	lsls	r2, r3
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2200      	movs	r2, #0
 800a080:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	2201      	movs	r2, #1
 800a086:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800a08a:	2300      	movs	r3, #0
}
 800a08c:	4618      	mov	r0, r3
 800a08e:	3718      	adds	r7, #24
 800a090:	46bd      	mov	sp, r7
 800a092:	bd80      	pop	{r7, pc}
 800a094:	f010803f 	.word	0xf010803f

0800a098 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b086      	sub	sp, #24
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	60f8      	str	r0, [r7, #12]
 800a0a0:	60b9      	str	r1, [r7, #8]
 800a0a2:	607a      	str	r2, [r7, #4]
 800a0a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a0ae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a0b6:	2b01      	cmp	r3, #1
 800a0b8:	d101      	bne.n	800a0be <HAL_DMA_Start_IT+0x26>
 800a0ba:	2302      	movs	r3, #2
 800a0bc:	e040      	b.n	800a140 <HAL_DMA_Start_IT+0xa8>
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	2201      	movs	r2, #1
 800a0c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a0cc:	b2db      	uxtb	r3, r3
 800a0ce:	2b01      	cmp	r3, #1
 800a0d0:	d12f      	bne.n	800a132 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	2202      	movs	r2, #2
 800a0d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	2200      	movs	r2, #0
 800a0de:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a0e0:	683b      	ldr	r3, [r7, #0]
 800a0e2:	687a      	ldr	r2, [r7, #4]
 800a0e4:	68b9      	ldr	r1, [r7, #8]
 800a0e6:	68f8      	ldr	r0, [r7, #12]
 800a0e8:	f000 f9e6 	bl	800a4b8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a0f0:	223f      	movs	r2, #63	; 0x3f
 800a0f2:	409a      	lsls	r2, r3
 800a0f4:	693b      	ldr	r3, [r7, #16]
 800a0f6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	681a      	ldr	r2, [r3, #0]
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	f042 0216 	orr.w	r2, r2, #22
 800a106:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d007      	beq.n	800a120 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	681a      	ldr	r2, [r3, #0]
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	f042 0208 	orr.w	r2, r2, #8
 800a11e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	681a      	ldr	r2, [r3, #0]
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	f042 0201 	orr.w	r2, r2, #1
 800a12e:	601a      	str	r2, [r3, #0]
 800a130:	e005      	b.n	800a13e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	2200      	movs	r2, #0
 800a136:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800a13a:	2302      	movs	r3, #2
 800a13c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800a13e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a140:	4618      	mov	r0, r3
 800a142:	3718      	adds	r7, #24
 800a144:	46bd      	mov	sp, r7
 800a146:	bd80      	pop	{r7, pc}

0800a148 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a148:	b480      	push	{r7}
 800a14a:	b083      	sub	sp, #12
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a156:	b2db      	uxtb	r3, r3
 800a158:	2b02      	cmp	r3, #2
 800a15a:	d004      	beq.n	800a166 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2280      	movs	r2, #128	; 0x80
 800a160:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800a162:	2301      	movs	r3, #1
 800a164:	e00c      	b.n	800a180 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	2205      	movs	r2, #5
 800a16a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	681a      	ldr	r2, [r3, #0]
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	f022 0201 	bic.w	r2, r2, #1
 800a17c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800a17e:	2300      	movs	r3, #0
}
 800a180:	4618      	mov	r0, r3
 800a182:	370c      	adds	r7, #12
 800a184:	46bd      	mov	sp, r7
 800a186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18a:	4770      	bx	lr

0800a18c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b086      	sub	sp, #24
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800a194:	2300      	movs	r3, #0
 800a196:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800a198:	4b92      	ldr	r3, [pc, #584]	; (800a3e4 <HAL_DMA_IRQHandler+0x258>)
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	4a92      	ldr	r2, [pc, #584]	; (800a3e8 <HAL_DMA_IRQHandler+0x25c>)
 800a19e:	fba2 2303 	umull	r2, r3, r2, r3
 800a1a2:	0a9b      	lsrs	r3, r3, #10
 800a1a4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a1aa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800a1ac:	693b      	ldr	r3, [r7, #16]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1b6:	2208      	movs	r2, #8
 800a1b8:	409a      	lsls	r2, r3
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	4013      	ands	r3, r2
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d01a      	beq.n	800a1f8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	f003 0304 	and.w	r3, r3, #4
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d013      	beq.n	800a1f8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	681a      	ldr	r2, [r3, #0]
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	f022 0204 	bic.w	r2, r2, #4
 800a1de:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1e4:	2208      	movs	r2, #8
 800a1e6:	409a      	lsls	r2, r3
 800a1e8:	693b      	ldr	r3, [r7, #16]
 800a1ea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1f0:	f043 0201 	orr.w	r2, r3, #1
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1fc:	2201      	movs	r2, #1
 800a1fe:	409a      	lsls	r2, r3
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	4013      	ands	r3, r2
 800a204:	2b00      	cmp	r3, #0
 800a206:	d012      	beq.n	800a22e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	695b      	ldr	r3, [r3, #20]
 800a20e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a212:	2b00      	cmp	r3, #0
 800a214:	d00b      	beq.n	800a22e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a21a:	2201      	movs	r2, #1
 800a21c:	409a      	lsls	r2, r3
 800a21e:	693b      	ldr	r3, [r7, #16]
 800a220:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a226:	f043 0202 	orr.w	r2, r3, #2
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a232:	2204      	movs	r2, #4
 800a234:	409a      	lsls	r2, r3
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	4013      	ands	r3, r2
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d012      	beq.n	800a264 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	f003 0302 	and.w	r3, r3, #2
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d00b      	beq.n	800a264 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a250:	2204      	movs	r2, #4
 800a252:	409a      	lsls	r2, r3
 800a254:	693b      	ldr	r3, [r7, #16]
 800a256:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a25c:	f043 0204 	orr.w	r2, r3, #4
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a268:	2210      	movs	r2, #16
 800a26a:	409a      	lsls	r2, r3
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	4013      	ands	r3, r2
 800a270:	2b00      	cmp	r3, #0
 800a272:	d043      	beq.n	800a2fc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	f003 0308 	and.w	r3, r3, #8
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d03c      	beq.n	800a2fc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a286:	2210      	movs	r2, #16
 800a288:	409a      	lsls	r2, r3
 800a28a:	693b      	ldr	r3, [r7, #16]
 800a28c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d018      	beq.n	800a2ce <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d108      	bne.n	800a2bc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d024      	beq.n	800a2fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2b6:	6878      	ldr	r0, [r7, #4]
 800a2b8:	4798      	blx	r3
 800a2ba:	e01f      	b.n	800a2fc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d01b      	beq.n	800a2fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a2c8:	6878      	ldr	r0, [r7, #4]
 800a2ca:	4798      	blx	r3
 800a2cc:	e016      	b.n	800a2fc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d107      	bne.n	800a2ec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	681a      	ldr	r2, [r3, #0]
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	f022 0208 	bic.w	r2, r2, #8
 800a2ea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d003      	beq.n	800a2fc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2f8:	6878      	ldr	r0, [r7, #4]
 800a2fa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a300:	2220      	movs	r2, #32
 800a302:	409a      	lsls	r2, r3
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	4013      	ands	r3, r2
 800a308:	2b00      	cmp	r3, #0
 800a30a:	f000 808e 	beq.w	800a42a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	f003 0310 	and.w	r3, r3, #16
 800a318:	2b00      	cmp	r3, #0
 800a31a:	f000 8086 	beq.w	800a42a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a322:	2220      	movs	r2, #32
 800a324:	409a      	lsls	r2, r3
 800a326:	693b      	ldr	r3, [r7, #16]
 800a328:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a330:	b2db      	uxtb	r3, r3
 800a332:	2b05      	cmp	r3, #5
 800a334:	d136      	bne.n	800a3a4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	681a      	ldr	r2, [r3, #0]
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	f022 0216 	bic.w	r2, r2, #22
 800a344:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	695a      	ldr	r2, [r3, #20]
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a354:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d103      	bne.n	800a366 <HAL_DMA_IRQHandler+0x1da>
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a362:	2b00      	cmp	r3, #0
 800a364:	d007      	beq.n	800a376 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	681a      	ldr	r2, [r3, #0]
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	f022 0208 	bic.w	r2, r2, #8
 800a374:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a37a:	223f      	movs	r2, #63	; 0x3f
 800a37c:	409a      	lsls	r2, r3
 800a37e:	693b      	ldr	r3, [r7, #16]
 800a380:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	2200      	movs	r2, #0
 800a386:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	2201      	movs	r2, #1
 800a38e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a396:	2b00      	cmp	r3, #0
 800a398:	d07d      	beq.n	800a496 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a39e:	6878      	ldr	r0, [r7, #4]
 800a3a0:	4798      	blx	r3
        }
        return;
 800a3a2:	e078      	b.n	800a496 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d01c      	beq.n	800a3ec <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d108      	bne.n	800a3d2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d030      	beq.n	800a42a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3cc:	6878      	ldr	r0, [r7, #4]
 800a3ce:	4798      	blx	r3
 800a3d0:	e02b      	b.n	800a42a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d027      	beq.n	800a42a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3de:	6878      	ldr	r0, [r7, #4]
 800a3e0:	4798      	blx	r3
 800a3e2:	e022      	b.n	800a42a <HAL_DMA_IRQHandler+0x29e>
 800a3e4:	20000000 	.word	0x20000000
 800a3e8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d10f      	bne.n	800a41a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	681a      	ldr	r2, [r3, #0]
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	f022 0210 	bic.w	r2, r2, #16
 800a408:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	2200      	movs	r2, #0
 800a40e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	2201      	movs	r2, #1
 800a416:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d003      	beq.n	800a42a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a426:	6878      	ldr	r0, [r7, #4]
 800a428:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d032      	beq.n	800a498 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a436:	f003 0301 	and.w	r3, r3, #1
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d022      	beq.n	800a484 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	2205      	movs	r2, #5
 800a442:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	681a      	ldr	r2, [r3, #0]
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	f022 0201 	bic.w	r2, r2, #1
 800a454:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800a456:	68bb      	ldr	r3, [r7, #8]
 800a458:	3301      	adds	r3, #1
 800a45a:	60bb      	str	r3, [r7, #8]
 800a45c:	697a      	ldr	r2, [r7, #20]
 800a45e:	429a      	cmp	r2, r3
 800a460:	d307      	bcc.n	800a472 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	f003 0301 	and.w	r3, r3, #1
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d1f2      	bne.n	800a456 <HAL_DMA_IRQHandler+0x2ca>
 800a470:	e000      	b.n	800a474 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800a472:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	2200      	movs	r2, #0
 800a478:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2201      	movs	r2, #1
 800a480:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d005      	beq.n	800a498 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a490:	6878      	ldr	r0, [r7, #4]
 800a492:	4798      	blx	r3
 800a494:	e000      	b.n	800a498 <HAL_DMA_IRQHandler+0x30c>
        return;
 800a496:	bf00      	nop
    }
  }
}
 800a498:	3718      	adds	r7, #24
 800a49a:	46bd      	mov	sp, r7
 800a49c:	bd80      	pop	{r7, pc}
 800a49e:	bf00      	nop

0800a4a0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800a4a0:	b480      	push	{r7}
 800a4a2:	b083      	sub	sp, #12
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	370c      	adds	r7, #12
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b6:	4770      	bx	lr

0800a4b8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a4b8:	b480      	push	{r7}
 800a4ba:	b085      	sub	sp, #20
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	60f8      	str	r0, [r7, #12]
 800a4c0:	60b9      	str	r1, [r7, #8]
 800a4c2:	607a      	str	r2, [r7, #4]
 800a4c4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	681a      	ldr	r2, [r3, #0]
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a4d4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	683a      	ldr	r2, [r7, #0]
 800a4dc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	689b      	ldr	r3, [r3, #8]
 800a4e2:	2b40      	cmp	r3, #64	; 0x40
 800a4e4:	d108      	bne.n	800a4f8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	687a      	ldr	r2, [r7, #4]
 800a4ec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	68ba      	ldr	r2, [r7, #8]
 800a4f4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800a4f6:	e007      	b.n	800a508 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	68ba      	ldr	r2, [r7, #8]
 800a4fe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	687a      	ldr	r2, [r7, #4]
 800a506:	60da      	str	r2, [r3, #12]
}
 800a508:	bf00      	nop
 800a50a:	3714      	adds	r7, #20
 800a50c:	46bd      	mov	sp, r7
 800a50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a512:	4770      	bx	lr

0800a514 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800a514:	b480      	push	{r7}
 800a516:	b085      	sub	sp, #20
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	b2db      	uxtb	r3, r3
 800a522:	3b10      	subs	r3, #16
 800a524:	4a14      	ldr	r2, [pc, #80]	; (800a578 <DMA_CalcBaseAndBitshift+0x64>)
 800a526:	fba2 2303 	umull	r2, r3, r2, r3
 800a52a:	091b      	lsrs	r3, r3, #4
 800a52c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800a52e:	4a13      	ldr	r2, [pc, #76]	; (800a57c <DMA_CalcBaseAndBitshift+0x68>)
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	4413      	add	r3, r2
 800a534:	781b      	ldrb	r3, [r3, #0]
 800a536:	461a      	mov	r2, r3
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	2b03      	cmp	r3, #3
 800a540:	d909      	bls.n	800a556 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a54a:	f023 0303 	bic.w	r3, r3, #3
 800a54e:	1d1a      	adds	r2, r3, #4
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	659a      	str	r2, [r3, #88]	; 0x58
 800a554:	e007      	b.n	800a566 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a55e:	f023 0303 	bic.w	r3, r3, #3
 800a562:	687a      	ldr	r2, [r7, #4]
 800a564:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800a56a:	4618      	mov	r0, r3
 800a56c:	3714      	adds	r7, #20
 800a56e:	46bd      	mov	sp, r7
 800a570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a574:	4770      	bx	lr
 800a576:	bf00      	nop
 800a578:	aaaaaaab 	.word	0xaaaaaaab
 800a57c:	080199d4 	.word	0x080199d4

0800a580 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800a580:	b480      	push	{r7}
 800a582:	b085      	sub	sp, #20
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a588:	2300      	movs	r3, #0
 800a58a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a590:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	699b      	ldr	r3, [r3, #24]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d11f      	bne.n	800a5da <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800a59a:	68bb      	ldr	r3, [r7, #8]
 800a59c:	2b03      	cmp	r3, #3
 800a59e:	d855      	bhi.n	800a64c <DMA_CheckFifoParam+0xcc>
 800a5a0:	a201      	add	r2, pc, #4	; (adr r2, 800a5a8 <DMA_CheckFifoParam+0x28>)
 800a5a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5a6:	bf00      	nop
 800a5a8:	0800a5b9 	.word	0x0800a5b9
 800a5ac:	0800a5cb 	.word	0x0800a5cb
 800a5b0:	0800a5b9 	.word	0x0800a5b9
 800a5b4:	0800a64d 	.word	0x0800a64d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d045      	beq.n	800a650 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800a5c4:	2301      	movs	r3, #1
 800a5c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a5c8:	e042      	b.n	800a650 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5ce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a5d2:	d13f      	bne.n	800a654 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800a5d4:	2301      	movs	r3, #1
 800a5d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a5d8:	e03c      	b.n	800a654 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	699b      	ldr	r3, [r3, #24]
 800a5de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a5e2:	d121      	bne.n	800a628 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800a5e4:	68bb      	ldr	r3, [r7, #8]
 800a5e6:	2b03      	cmp	r3, #3
 800a5e8:	d836      	bhi.n	800a658 <DMA_CheckFifoParam+0xd8>
 800a5ea:	a201      	add	r2, pc, #4	; (adr r2, 800a5f0 <DMA_CheckFifoParam+0x70>)
 800a5ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5f0:	0800a601 	.word	0x0800a601
 800a5f4:	0800a607 	.word	0x0800a607
 800a5f8:	0800a601 	.word	0x0800a601
 800a5fc:	0800a619 	.word	0x0800a619
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800a600:	2301      	movs	r3, #1
 800a602:	73fb      	strb	r3, [r7, #15]
      break;
 800a604:	e02f      	b.n	800a666 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a60a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d024      	beq.n	800a65c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800a612:	2301      	movs	r3, #1
 800a614:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a616:	e021      	b.n	800a65c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a61c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a620:	d11e      	bne.n	800a660 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800a622:	2301      	movs	r3, #1
 800a624:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800a626:	e01b      	b.n	800a660 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800a628:	68bb      	ldr	r3, [r7, #8]
 800a62a:	2b02      	cmp	r3, #2
 800a62c:	d902      	bls.n	800a634 <DMA_CheckFifoParam+0xb4>
 800a62e:	2b03      	cmp	r3, #3
 800a630:	d003      	beq.n	800a63a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800a632:	e018      	b.n	800a666 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800a634:	2301      	movs	r3, #1
 800a636:	73fb      	strb	r3, [r7, #15]
      break;
 800a638:	e015      	b.n	800a666 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a63e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a642:	2b00      	cmp	r3, #0
 800a644:	d00e      	beq.n	800a664 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800a646:	2301      	movs	r3, #1
 800a648:	73fb      	strb	r3, [r7, #15]
      break;
 800a64a:	e00b      	b.n	800a664 <DMA_CheckFifoParam+0xe4>
      break;
 800a64c:	bf00      	nop
 800a64e:	e00a      	b.n	800a666 <DMA_CheckFifoParam+0xe6>
      break;
 800a650:	bf00      	nop
 800a652:	e008      	b.n	800a666 <DMA_CheckFifoParam+0xe6>
      break;
 800a654:	bf00      	nop
 800a656:	e006      	b.n	800a666 <DMA_CheckFifoParam+0xe6>
      break;
 800a658:	bf00      	nop
 800a65a:	e004      	b.n	800a666 <DMA_CheckFifoParam+0xe6>
      break;
 800a65c:	bf00      	nop
 800a65e:	e002      	b.n	800a666 <DMA_CheckFifoParam+0xe6>
      break;   
 800a660:	bf00      	nop
 800a662:	e000      	b.n	800a666 <DMA_CheckFifoParam+0xe6>
      break;
 800a664:	bf00      	nop
    }
  } 
  
  return status; 
 800a666:	7bfb      	ldrb	r3, [r7, #15]
}
 800a668:	4618      	mov	r0, r3
 800a66a:	3714      	adds	r7, #20
 800a66c:	46bd      	mov	sp, r7
 800a66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a672:	4770      	bx	lr

0800a674 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a674:	b480      	push	{r7}
 800a676:	b089      	sub	sp, #36	; 0x24
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
 800a67c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800a67e:	2300      	movs	r3, #0
 800a680:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800a682:	2300      	movs	r3, #0
 800a684:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800a686:	2300      	movs	r3, #0
 800a688:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a68a:	2300      	movs	r3, #0
 800a68c:	61fb      	str	r3, [r7, #28]
 800a68e:	e177      	b.n	800a980 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800a690:	2201      	movs	r2, #1
 800a692:	69fb      	ldr	r3, [r7, #28]
 800a694:	fa02 f303 	lsl.w	r3, r2, r3
 800a698:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a69a:	683b      	ldr	r3, [r7, #0]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	697a      	ldr	r2, [r7, #20]
 800a6a0:	4013      	ands	r3, r2
 800a6a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800a6a4:	693a      	ldr	r2, [r7, #16]
 800a6a6:	697b      	ldr	r3, [r7, #20]
 800a6a8:	429a      	cmp	r2, r3
 800a6aa:	f040 8166 	bne.w	800a97a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	685b      	ldr	r3, [r3, #4]
 800a6b2:	2b01      	cmp	r3, #1
 800a6b4:	d00b      	beq.n	800a6ce <HAL_GPIO_Init+0x5a>
 800a6b6:	683b      	ldr	r3, [r7, #0]
 800a6b8:	685b      	ldr	r3, [r3, #4]
 800a6ba:	2b02      	cmp	r3, #2
 800a6bc:	d007      	beq.n	800a6ce <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a6be:	683b      	ldr	r3, [r7, #0]
 800a6c0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a6c2:	2b11      	cmp	r3, #17
 800a6c4:	d003      	beq.n	800a6ce <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a6c6:	683b      	ldr	r3, [r7, #0]
 800a6c8:	685b      	ldr	r3, [r3, #4]
 800a6ca:	2b12      	cmp	r3, #18
 800a6cc:	d130      	bne.n	800a730 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	689b      	ldr	r3, [r3, #8]
 800a6d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800a6d4:	69fb      	ldr	r3, [r7, #28]
 800a6d6:	005b      	lsls	r3, r3, #1
 800a6d8:	2203      	movs	r2, #3
 800a6da:	fa02 f303 	lsl.w	r3, r2, r3
 800a6de:	43db      	mvns	r3, r3
 800a6e0:	69ba      	ldr	r2, [r7, #24]
 800a6e2:	4013      	ands	r3, r2
 800a6e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a6e6:	683b      	ldr	r3, [r7, #0]
 800a6e8:	68da      	ldr	r2, [r3, #12]
 800a6ea:	69fb      	ldr	r3, [r7, #28]
 800a6ec:	005b      	lsls	r3, r3, #1
 800a6ee:	fa02 f303 	lsl.w	r3, r2, r3
 800a6f2:	69ba      	ldr	r2, [r7, #24]
 800a6f4:	4313      	orrs	r3, r2
 800a6f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	69ba      	ldr	r2, [r7, #24]
 800a6fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	685b      	ldr	r3, [r3, #4]
 800a702:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a704:	2201      	movs	r2, #1
 800a706:	69fb      	ldr	r3, [r7, #28]
 800a708:	fa02 f303 	lsl.w	r3, r2, r3
 800a70c:	43db      	mvns	r3, r3
 800a70e:	69ba      	ldr	r2, [r7, #24]
 800a710:	4013      	ands	r3, r2
 800a712:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800a714:	683b      	ldr	r3, [r7, #0]
 800a716:	685b      	ldr	r3, [r3, #4]
 800a718:	091b      	lsrs	r3, r3, #4
 800a71a:	f003 0201 	and.w	r2, r3, #1
 800a71e:	69fb      	ldr	r3, [r7, #28]
 800a720:	fa02 f303 	lsl.w	r3, r2, r3
 800a724:	69ba      	ldr	r2, [r7, #24]
 800a726:	4313      	orrs	r3, r2
 800a728:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	69ba      	ldr	r2, [r7, #24]
 800a72e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	68db      	ldr	r3, [r3, #12]
 800a734:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800a736:	69fb      	ldr	r3, [r7, #28]
 800a738:	005b      	lsls	r3, r3, #1
 800a73a:	2203      	movs	r2, #3
 800a73c:	fa02 f303 	lsl.w	r3, r2, r3
 800a740:	43db      	mvns	r3, r3
 800a742:	69ba      	ldr	r2, [r7, #24]
 800a744:	4013      	ands	r3, r2
 800a746:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a748:	683b      	ldr	r3, [r7, #0]
 800a74a:	689a      	ldr	r2, [r3, #8]
 800a74c:	69fb      	ldr	r3, [r7, #28]
 800a74e:	005b      	lsls	r3, r3, #1
 800a750:	fa02 f303 	lsl.w	r3, r2, r3
 800a754:	69ba      	ldr	r2, [r7, #24]
 800a756:	4313      	orrs	r3, r2
 800a758:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	69ba      	ldr	r2, [r7, #24]
 800a75e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	685b      	ldr	r3, [r3, #4]
 800a764:	2b02      	cmp	r3, #2
 800a766:	d003      	beq.n	800a770 <HAL_GPIO_Init+0xfc>
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	685b      	ldr	r3, [r3, #4]
 800a76c:	2b12      	cmp	r3, #18
 800a76e:	d123      	bne.n	800a7b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a770:	69fb      	ldr	r3, [r7, #28]
 800a772:	08da      	lsrs	r2, r3, #3
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	3208      	adds	r2, #8
 800a778:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a77c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800a77e:	69fb      	ldr	r3, [r7, #28]
 800a780:	f003 0307 	and.w	r3, r3, #7
 800a784:	009b      	lsls	r3, r3, #2
 800a786:	220f      	movs	r2, #15
 800a788:	fa02 f303 	lsl.w	r3, r2, r3
 800a78c:	43db      	mvns	r3, r3
 800a78e:	69ba      	ldr	r2, [r7, #24]
 800a790:	4013      	ands	r3, r2
 800a792:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800a794:	683b      	ldr	r3, [r7, #0]
 800a796:	691a      	ldr	r2, [r3, #16]
 800a798:	69fb      	ldr	r3, [r7, #28]
 800a79a:	f003 0307 	and.w	r3, r3, #7
 800a79e:	009b      	lsls	r3, r3, #2
 800a7a0:	fa02 f303 	lsl.w	r3, r2, r3
 800a7a4:	69ba      	ldr	r2, [r7, #24]
 800a7a6:	4313      	orrs	r3, r2
 800a7a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a7aa:	69fb      	ldr	r3, [r7, #28]
 800a7ac:	08da      	lsrs	r2, r3, #3
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	3208      	adds	r2, #8
 800a7b2:	69b9      	ldr	r1, [r7, #24]
 800a7b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800a7be:	69fb      	ldr	r3, [r7, #28]
 800a7c0:	005b      	lsls	r3, r3, #1
 800a7c2:	2203      	movs	r2, #3
 800a7c4:	fa02 f303 	lsl.w	r3, r2, r3
 800a7c8:	43db      	mvns	r3, r3
 800a7ca:	69ba      	ldr	r2, [r7, #24]
 800a7cc:	4013      	ands	r3, r2
 800a7ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a7d0:	683b      	ldr	r3, [r7, #0]
 800a7d2:	685b      	ldr	r3, [r3, #4]
 800a7d4:	f003 0203 	and.w	r2, r3, #3
 800a7d8:	69fb      	ldr	r3, [r7, #28]
 800a7da:	005b      	lsls	r3, r3, #1
 800a7dc:	fa02 f303 	lsl.w	r3, r2, r3
 800a7e0:	69ba      	ldr	r2, [r7, #24]
 800a7e2:	4313      	orrs	r3, r2
 800a7e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	69ba      	ldr	r2, [r7, #24]
 800a7ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800a7ec:	683b      	ldr	r3, [r7, #0]
 800a7ee:	685b      	ldr	r3, [r3, #4]
 800a7f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	f000 80c0 	beq.w	800a97a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	60fb      	str	r3, [r7, #12]
 800a7fe:	4b65      	ldr	r3, [pc, #404]	; (800a994 <HAL_GPIO_Init+0x320>)
 800a800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a802:	4a64      	ldr	r2, [pc, #400]	; (800a994 <HAL_GPIO_Init+0x320>)
 800a804:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a808:	6453      	str	r3, [r2, #68]	; 0x44
 800a80a:	4b62      	ldr	r3, [pc, #392]	; (800a994 <HAL_GPIO_Init+0x320>)
 800a80c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a80e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a812:	60fb      	str	r3, [r7, #12]
 800a814:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a816:	4a60      	ldr	r2, [pc, #384]	; (800a998 <HAL_GPIO_Init+0x324>)
 800a818:	69fb      	ldr	r3, [r7, #28]
 800a81a:	089b      	lsrs	r3, r3, #2
 800a81c:	3302      	adds	r3, #2
 800a81e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a822:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800a824:	69fb      	ldr	r3, [r7, #28]
 800a826:	f003 0303 	and.w	r3, r3, #3
 800a82a:	009b      	lsls	r3, r3, #2
 800a82c:	220f      	movs	r2, #15
 800a82e:	fa02 f303 	lsl.w	r3, r2, r3
 800a832:	43db      	mvns	r3, r3
 800a834:	69ba      	ldr	r2, [r7, #24]
 800a836:	4013      	ands	r3, r2
 800a838:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	4a57      	ldr	r2, [pc, #348]	; (800a99c <HAL_GPIO_Init+0x328>)
 800a83e:	4293      	cmp	r3, r2
 800a840:	d037      	beq.n	800a8b2 <HAL_GPIO_Init+0x23e>
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	4a56      	ldr	r2, [pc, #344]	; (800a9a0 <HAL_GPIO_Init+0x32c>)
 800a846:	4293      	cmp	r3, r2
 800a848:	d031      	beq.n	800a8ae <HAL_GPIO_Init+0x23a>
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	4a55      	ldr	r2, [pc, #340]	; (800a9a4 <HAL_GPIO_Init+0x330>)
 800a84e:	4293      	cmp	r3, r2
 800a850:	d02b      	beq.n	800a8aa <HAL_GPIO_Init+0x236>
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	4a54      	ldr	r2, [pc, #336]	; (800a9a8 <HAL_GPIO_Init+0x334>)
 800a856:	4293      	cmp	r3, r2
 800a858:	d025      	beq.n	800a8a6 <HAL_GPIO_Init+0x232>
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	4a53      	ldr	r2, [pc, #332]	; (800a9ac <HAL_GPIO_Init+0x338>)
 800a85e:	4293      	cmp	r3, r2
 800a860:	d01f      	beq.n	800a8a2 <HAL_GPIO_Init+0x22e>
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	4a52      	ldr	r2, [pc, #328]	; (800a9b0 <HAL_GPIO_Init+0x33c>)
 800a866:	4293      	cmp	r3, r2
 800a868:	d019      	beq.n	800a89e <HAL_GPIO_Init+0x22a>
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	4a51      	ldr	r2, [pc, #324]	; (800a9b4 <HAL_GPIO_Init+0x340>)
 800a86e:	4293      	cmp	r3, r2
 800a870:	d013      	beq.n	800a89a <HAL_GPIO_Init+0x226>
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	4a50      	ldr	r2, [pc, #320]	; (800a9b8 <HAL_GPIO_Init+0x344>)
 800a876:	4293      	cmp	r3, r2
 800a878:	d00d      	beq.n	800a896 <HAL_GPIO_Init+0x222>
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	4a4f      	ldr	r2, [pc, #316]	; (800a9bc <HAL_GPIO_Init+0x348>)
 800a87e:	4293      	cmp	r3, r2
 800a880:	d007      	beq.n	800a892 <HAL_GPIO_Init+0x21e>
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	4a4e      	ldr	r2, [pc, #312]	; (800a9c0 <HAL_GPIO_Init+0x34c>)
 800a886:	4293      	cmp	r3, r2
 800a888:	d101      	bne.n	800a88e <HAL_GPIO_Init+0x21a>
 800a88a:	2309      	movs	r3, #9
 800a88c:	e012      	b.n	800a8b4 <HAL_GPIO_Init+0x240>
 800a88e:	230a      	movs	r3, #10
 800a890:	e010      	b.n	800a8b4 <HAL_GPIO_Init+0x240>
 800a892:	2308      	movs	r3, #8
 800a894:	e00e      	b.n	800a8b4 <HAL_GPIO_Init+0x240>
 800a896:	2307      	movs	r3, #7
 800a898:	e00c      	b.n	800a8b4 <HAL_GPIO_Init+0x240>
 800a89a:	2306      	movs	r3, #6
 800a89c:	e00a      	b.n	800a8b4 <HAL_GPIO_Init+0x240>
 800a89e:	2305      	movs	r3, #5
 800a8a0:	e008      	b.n	800a8b4 <HAL_GPIO_Init+0x240>
 800a8a2:	2304      	movs	r3, #4
 800a8a4:	e006      	b.n	800a8b4 <HAL_GPIO_Init+0x240>
 800a8a6:	2303      	movs	r3, #3
 800a8a8:	e004      	b.n	800a8b4 <HAL_GPIO_Init+0x240>
 800a8aa:	2302      	movs	r3, #2
 800a8ac:	e002      	b.n	800a8b4 <HAL_GPIO_Init+0x240>
 800a8ae:	2301      	movs	r3, #1
 800a8b0:	e000      	b.n	800a8b4 <HAL_GPIO_Init+0x240>
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	69fa      	ldr	r2, [r7, #28]
 800a8b6:	f002 0203 	and.w	r2, r2, #3
 800a8ba:	0092      	lsls	r2, r2, #2
 800a8bc:	4093      	lsls	r3, r2
 800a8be:	69ba      	ldr	r2, [r7, #24]
 800a8c0:	4313      	orrs	r3, r2
 800a8c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a8c4:	4934      	ldr	r1, [pc, #208]	; (800a998 <HAL_GPIO_Init+0x324>)
 800a8c6:	69fb      	ldr	r3, [r7, #28]
 800a8c8:	089b      	lsrs	r3, r3, #2
 800a8ca:	3302      	adds	r3, #2
 800a8cc:	69ba      	ldr	r2, [r7, #24]
 800a8ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800a8d2:	4b3c      	ldr	r3, [pc, #240]	; (800a9c4 <HAL_GPIO_Init+0x350>)
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a8d8:	693b      	ldr	r3, [r7, #16]
 800a8da:	43db      	mvns	r3, r3
 800a8dc:	69ba      	ldr	r2, [r7, #24]
 800a8de:	4013      	ands	r3, r2
 800a8e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800a8e2:	683b      	ldr	r3, [r7, #0]
 800a8e4:	685b      	ldr	r3, [r3, #4]
 800a8e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d003      	beq.n	800a8f6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800a8ee:	69ba      	ldr	r2, [r7, #24]
 800a8f0:	693b      	ldr	r3, [r7, #16]
 800a8f2:	4313      	orrs	r3, r2
 800a8f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800a8f6:	4a33      	ldr	r2, [pc, #204]	; (800a9c4 <HAL_GPIO_Init+0x350>)
 800a8f8:	69bb      	ldr	r3, [r7, #24]
 800a8fa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800a8fc:	4b31      	ldr	r3, [pc, #196]	; (800a9c4 <HAL_GPIO_Init+0x350>)
 800a8fe:	685b      	ldr	r3, [r3, #4]
 800a900:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a902:	693b      	ldr	r3, [r7, #16]
 800a904:	43db      	mvns	r3, r3
 800a906:	69ba      	ldr	r2, [r7, #24]
 800a908:	4013      	ands	r3, r2
 800a90a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800a90c:	683b      	ldr	r3, [r7, #0]
 800a90e:	685b      	ldr	r3, [r3, #4]
 800a910:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a914:	2b00      	cmp	r3, #0
 800a916:	d003      	beq.n	800a920 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800a918:	69ba      	ldr	r2, [r7, #24]
 800a91a:	693b      	ldr	r3, [r7, #16]
 800a91c:	4313      	orrs	r3, r2
 800a91e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800a920:	4a28      	ldr	r2, [pc, #160]	; (800a9c4 <HAL_GPIO_Init+0x350>)
 800a922:	69bb      	ldr	r3, [r7, #24]
 800a924:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800a926:	4b27      	ldr	r3, [pc, #156]	; (800a9c4 <HAL_GPIO_Init+0x350>)
 800a928:	689b      	ldr	r3, [r3, #8]
 800a92a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a92c:	693b      	ldr	r3, [r7, #16]
 800a92e:	43db      	mvns	r3, r3
 800a930:	69ba      	ldr	r2, [r7, #24]
 800a932:	4013      	ands	r3, r2
 800a934:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800a936:	683b      	ldr	r3, [r7, #0]
 800a938:	685b      	ldr	r3, [r3, #4]
 800a93a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d003      	beq.n	800a94a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800a942:	69ba      	ldr	r2, [r7, #24]
 800a944:	693b      	ldr	r3, [r7, #16]
 800a946:	4313      	orrs	r3, r2
 800a948:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800a94a:	4a1e      	ldr	r2, [pc, #120]	; (800a9c4 <HAL_GPIO_Init+0x350>)
 800a94c:	69bb      	ldr	r3, [r7, #24]
 800a94e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800a950:	4b1c      	ldr	r3, [pc, #112]	; (800a9c4 <HAL_GPIO_Init+0x350>)
 800a952:	68db      	ldr	r3, [r3, #12]
 800a954:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a956:	693b      	ldr	r3, [r7, #16]
 800a958:	43db      	mvns	r3, r3
 800a95a:	69ba      	ldr	r2, [r7, #24]
 800a95c:	4013      	ands	r3, r2
 800a95e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800a960:	683b      	ldr	r3, [r7, #0]
 800a962:	685b      	ldr	r3, [r3, #4]
 800a964:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d003      	beq.n	800a974 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800a96c:	69ba      	ldr	r2, [r7, #24]
 800a96e:	693b      	ldr	r3, [r7, #16]
 800a970:	4313      	orrs	r3, r2
 800a972:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800a974:	4a13      	ldr	r2, [pc, #76]	; (800a9c4 <HAL_GPIO_Init+0x350>)
 800a976:	69bb      	ldr	r3, [r7, #24]
 800a978:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a97a:	69fb      	ldr	r3, [r7, #28]
 800a97c:	3301      	adds	r3, #1
 800a97e:	61fb      	str	r3, [r7, #28]
 800a980:	69fb      	ldr	r3, [r7, #28]
 800a982:	2b0f      	cmp	r3, #15
 800a984:	f67f ae84 	bls.w	800a690 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800a988:	bf00      	nop
 800a98a:	3724      	adds	r7, #36	; 0x24
 800a98c:	46bd      	mov	sp, r7
 800a98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a992:	4770      	bx	lr
 800a994:	40023800 	.word	0x40023800
 800a998:	40013800 	.word	0x40013800
 800a99c:	40020000 	.word	0x40020000
 800a9a0:	40020400 	.word	0x40020400
 800a9a4:	40020800 	.word	0x40020800
 800a9a8:	40020c00 	.word	0x40020c00
 800a9ac:	40021000 	.word	0x40021000
 800a9b0:	40021400 	.word	0x40021400
 800a9b4:	40021800 	.word	0x40021800
 800a9b8:	40021c00 	.word	0x40021c00
 800a9bc:	40022000 	.word	0x40022000
 800a9c0:	40022400 	.word	0x40022400
 800a9c4:	40013c00 	.word	0x40013c00

0800a9c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800a9c8:	b480      	push	{r7}
 800a9ca:	b085      	sub	sp, #20
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
 800a9d0:	460b      	mov	r3, r1
 800a9d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	691a      	ldr	r2, [r3, #16]
 800a9d8:	887b      	ldrh	r3, [r7, #2]
 800a9da:	4013      	ands	r3, r2
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d002      	beq.n	800a9e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a9e0:	2301      	movs	r3, #1
 800a9e2:	73fb      	strb	r3, [r7, #15]
 800a9e4:	e001      	b.n	800a9ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a9ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	3714      	adds	r7, #20
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f6:	4770      	bx	lr

0800a9f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a9f8:	b480      	push	{r7}
 800a9fa:	b083      	sub	sp, #12
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]
 800aa00:	460b      	mov	r3, r1
 800aa02:	807b      	strh	r3, [r7, #2]
 800aa04:	4613      	mov	r3, r2
 800aa06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800aa08:	787b      	ldrb	r3, [r7, #1]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d003      	beq.n	800aa16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800aa0e:	887a      	ldrh	r2, [r7, #2]
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800aa14:	e003      	b.n	800aa1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800aa16:	887b      	ldrh	r3, [r7, #2]
 800aa18:	041a      	lsls	r2, r3, #16
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	619a      	str	r2, [r3, #24]
}
 800aa1e:	bf00      	nop
 800aa20:	370c      	adds	r7, #12
 800aa22:	46bd      	mov	sp, r7
 800aa24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa28:	4770      	bx	lr
	...

0800aa2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	b084      	sub	sp, #16
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d101      	bne.n	800aa3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800aa3a:	2301      	movs	r3, #1
 800aa3c:	e11f      	b.n	800ac7e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aa44:	b2db      	uxtb	r3, r3
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d106      	bne.n	800aa58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800aa52:	6878      	ldr	r0, [r7, #4]
 800aa54:	f7fc f878 	bl	8006b48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2224      	movs	r2, #36	; 0x24
 800aa5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	681a      	ldr	r2, [r3, #0]
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	f022 0201 	bic.w	r2, r2, #1
 800aa6e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	681a      	ldr	r2, [r3, #0]
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800aa7e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	681a      	ldr	r2, [r3, #0]
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800aa8e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800aa90:	f001 f96e 	bl	800bd70 <HAL_RCC_GetPCLK1Freq>
 800aa94:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	685b      	ldr	r3, [r3, #4]
 800aa9a:	4a7b      	ldr	r2, [pc, #492]	; (800ac88 <HAL_I2C_Init+0x25c>)
 800aa9c:	4293      	cmp	r3, r2
 800aa9e:	d807      	bhi.n	800aab0 <HAL_I2C_Init+0x84>
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	4a7a      	ldr	r2, [pc, #488]	; (800ac8c <HAL_I2C_Init+0x260>)
 800aaa4:	4293      	cmp	r3, r2
 800aaa6:	bf94      	ite	ls
 800aaa8:	2301      	movls	r3, #1
 800aaaa:	2300      	movhi	r3, #0
 800aaac:	b2db      	uxtb	r3, r3
 800aaae:	e006      	b.n	800aabe <HAL_I2C_Init+0x92>
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	4a77      	ldr	r2, [pc, #476]	; (800ac90 <HAL_I2C_Init+0x264>)
 800aab4:	4293      	cmp	r3, r2
 800aab6:	bf94      	ite	ls
 800aab8:	2301      	movls	r3, #1
 800aaba:	2300      	movhi	r3, #0
 800aabc:	b2db      	uxtb	r3, r3
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d001      	beq.n	800aac6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800aac2:	2301      	movs	r3, #1
 800aac4:	e0db      	b.n	800ac7e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	4a72      	ldr	r2, [pc, #456]	; (800ac94 <HAL_I2C_Init+0x268>)
 800aaca:	fba2 2303 	umull	r2, r3, r2, r3
 800aace:	0c9b      	lsrs	r3, r3, #18
 800aad0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	685b      	ldr	r3, [r3, #4]
 800aad8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	68ba      	ldr	r2, [r7, #8]
 800aae2:	430a      	orrs	r2, r1
 800aae4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	6a1b      	ldr	r3, [r3, #32]
 800aaec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	685b      	ldr	r3, [r3, #4]
 800aaf4:	4a64      	ldr	r2, [pc, #400]	; (800ac88 <HAL_I2C_Init+0x25c>)
 800aaf6:	4293      	cmp	r3, r2
 800aaf8:	d802      	bhi.n	800ab00 <HAL_I2C_Init+0xd4>
 800aafa:	68bb      	ldr	r3, [r7, #8]
 800aafc:	3301      	adds	r3, #1
 800aafe:	e009      	b.n	800ab14 <HAL_I2C_Init+0xe8>
 800ab00:	68bb      	ldr	r3, [r7, #8]
 800ab02:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800ab06:	fb02 f303 	mul.w	r3, r2, r3
 800ab0a:	4a63      	ldr	r2, [pc, #396]	; (800ac98 <HAL_I2C_Init+0x26c>)
 800ab0c:	fba2 2303 	umull	r2, r3, r2, r3
 800ab10:	099b      	lsrs	r3, r3, #6
 800ab12:	3301      	adds	r3, #1
 800ab14:	687a      	ldr	r2, [r7, #4]
 800ab16:	6812      	ldr	r2, [r2, #0]
 800ab18:	430b      	orrs	r3, r1
 800ab1a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	69db      	ldr	r3, [r3, #28]
 800ab22:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800ab26:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	685b      	ldr	r3, [r3, #4]
 800ab2e:	4956      	ldr	r1, [pc, #344]	; (800ac88 <HAL_I2C_Init+0x25c>)
 800ab30:	428b      	cmp	r3, r1
 800ab32:	d80d      	bhi.n	800ab50 <HAL_I2C_Init+0x124>
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	1e59      	subs	r1, r3, #1
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	685b      	ldr	r3, [r3, #4]
 800ab3c:	005b      	lsls	r3, r3, #1
 800ab3e:	fbb1 f3f3 	udiv	r3, r1, r3
 800ab42:	3301      	adds	r3, #1
 800ab44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ab48:	2b04      	cmp	r3, #4
 800ab4a:	bf38      	it	cc
 800ab4c:	2304      	movcc	r3, #4
 800ab4e:	e04f      	b.n	800abf0 <HAL_I2C_Init+0x1c4>
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	689b      	ldr	r3, [r3, #8]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d111      	bne.n	800ab7c <HAL_I2C_Init+0x150>
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	1e58      	subs	r0, r3, #1
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	6859      	ldr	r1, [r3, #4]
 800ab60:	460b      	mov	r3, r1
 800ab62:	005b      	lsls	r3, r3, #1
 800ab64:	440b      	add	r3, r1
 800ab66:	fbb0 f3f3 	udiv	r3, r0, r3
 800ab6a:	3301      	adds	r3, #1
 800ab6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	bf0c      	ite	eq
 800ab74:	2301      	moveq	r3, #1
 800ab76:	2300      	movne	r3, #0
 800ab78:	b2db      	uxtb	r3, r3
 800ab7a:	e012      	b.n	800aba2 <HAL_I2C_Init+0x176>
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	1e58      	subs	r0, r3, #1
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	6859      	ldr	r1, [r3, #4]
 800ab84:	460b      	mov	r3, r1
 800ab86:	009b      	lsls	r3, r3, #2
 800ab88:	440b      	add	r3, r1
 800ab8a:	0099      	lsls	r1, r3, #2
 800ab8c:	440b      	add	r3, r1
 800ab8e:	fbb0 f3f3 	udiv	r3, r0, r3
 800ab92:	3301      	adds	r3, #1
 800ab94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	bf0c      	ite	eq
 800ab9c:	2301      	moveq	r3, #1
 800ab9e:	2300      	movne	r3, #0
 800aba0:	b2db      	uxtb	r3, r3
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d001      	beq.n	800abaa <HAL_I2C_Init+0x17e>
 800aba6:	2301      	movs	r3, #1
 800aba8:	e022      	b.n	800abf0 <HAL_I2C_Init+0x1c4>
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	689b      	ldr	r3, [r3, #8]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d10e      	bne.n	800abd0 <HAL_I2C_Init+0x1a4>
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	1e58      	subs	r0, r3, #1
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	6859      	ldr	r1, [r3, #4]
 800abba:	460b      	mov	r3, r1
 800abbc:	005b      	lsls	r3, r3, #1
 800abbe:	440b      	add	r3, r1
 800abc0:	fbb0 f3f3 	udiv	r3, r0, r3
 800abc4:	3301      	adds	r3, #1
 800abc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800abca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800abce:	e00f      	b.n	800abf0 <HAL_I2C_Init+0x1c4>
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	1e58      	subs	r0, r3, #1
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	6859      	ldr	r1, [r3, #4]
 800abd8:	460b      	mov	r3, r1
 800abda:	009b      	lsls	r3, r3, #2
 800abdc:	440b      	add	r3, r1
 800abde:	0099      	lsls	r1, r3, #2
 800abe0:	440b      	add	r3, r1
 800abe2:	fbb0 f3f3 	udiv	r3, r0, r3
 800abe6:	3301      	adds	r3, #1
 800abe8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800abec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800abf0:	6879      	ldr	r1, [r7, #4]
 800abf2:	6809      	ldr	r1, [r1, #0]
 800abf4:	4313      	orrs	r3, r2
 800abf6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	69da      	ldr	r2, [r3, #28]
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	6a1b      	ldr	r3, [r3, #32]
 800ac0a:	431a      	orrs	r2, r3
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	430a      	orrs	r2, r1
 800ac12:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	689b      	ldr	r3, [r3, #8]
 800ac1a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800ac1e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ac22:	687a      	ldr	r2, [r7, #4]
 800ac24:	6911      	ldr	r1, [r2, #16]
 800ac26:	687a      	ldr	r2, [r7, #4]
 800ac28:	68d2      	ldr	r2, [r2, #12]
 800ac2a:	4311      	orrs	r1, r2
 800ac2c:	687a      	ldr	r2, [r7, #4]
 800ac2e:	6812      	ldr	r2, [r2, #0]
 800ac30:	430b      	orrs	r3, r1
 800ac32:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	68db      	ldr	r3, [r3, #12]
 800ac3a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	695a      	ldr	r2, [r3, #20]
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	699b      	ldr	r3, [r3, #24]
 800ac46:	431a      	orrs	r2, r3
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	430a      	orrs	r2, r1
 800ac4e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	681a      	ldr	r2, [r3, #0]
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	f042 0201 	orr.w	r2, r2, #1
 800ac5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	2200      	movs	r2, #0
 800ac64:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	2220      	movs	r2, #32
 800ac6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	2200      	movs	r2, #0
 800ac72:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	2200      	movs	r2, #0
 800ac78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800ac7c:	2300      	movs	r3, #0
}
 800ac7e:	4618      	mov	r0, r3
 800ac80:	3710      	adds	r7, #16
 800ac82:	46bd      	mov	sp, r7
 800ac84:	bd80      	pop	{r7, pc}
 800ac86:	bf00      	nop
 800ac88:	000186a0 	.word	0x000186a0
 800ac8c:	001e847f 	.word	0x001e847f
 800ac90:	003d08ff 	.word	0x003d08ff
 800ac94:	431bde83 	.word	0x431bde83
 800ac98:	10624dd3 	.word	0x10624dd3

0800ac9c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b088      	sub	sp, #32
 800aca0:	af02      	add	r7, sp, #8
 800aca2:	60f8      	str	r0, [r7, #12]
 800aca4:	607a      	str	r2, [r7, #4]
 800aca6:	461a      	mov	r2, r3
 800aca8:	460b      	mov	r3, r1
 800acaa:	817b      	strh	r3, [r7, #10]
 800acac:	4613      	mov	r3, r2
 800acae:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800acb0:	f7fe fc00 	bl	80094b4 <HAL_GetTick>
 800acb4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800acbc:	b2db      	uxtb	r3, r3
 800acbe:	2b20      	cmp	r3, #32
 800acc0:	f040 80e0 	bne.w	800ae84 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800acc4:	697b      	ldr	r3, [r7, #20]
 800acc6:	9300      	str	r3, [sp, #0]
 800acc8:	2319      	movs	r3, #25
 800acca:	2201      	movs	r2, #1
 800accc:	4970      	ldr	r1, [pc, #448]	; (800ae90 <HAL_I2C_Master_Transmit+0x1f4>)
 800acce:	68f8      	ldr	r0, [r7, #12]
 800acd0:	f000 fc58 	bl	800b584 <I2C_WaitOnFlagUntilTimeout>
 800acd4:	4603      	mov	r3, r0
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d001      	beq.n	800acde <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800acda:	2302      	movs	r3, #2
 800acdc:	e0d3      	b.n	800ae86 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ace4:	2b01      	cmp	r3, #1
 800ace6:	d101      	bne.n	800acec <HAL_I2C_Master_Transmit+0x50>
 800ace8:	2302      	movs	r3, #2
 800acea:	e0cc      	b.n	800ae86 <HAL_I2C_Master_Transmit+0x1ea>
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	2201      	movs	r2, #1
 800acf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	f003 0301 	and.w	r3, r3, #1
 800acfe:	2b01      	cmp	r3, #1
 800ad00:	d007      	beq.n	800ad12 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	681a      	ldr	r2, [r3, #0]
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	f042 0201 	orr.w	r2, r2, #1
 800ad10:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	681a      	ldr	r2, [r3, #0]
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ad20:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	2221      	movs	r2, #33	; 0x21
 800ad26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	2210      	movs	r2, #16
 800ad2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	2200      	movs	r2, #0
 800ad36:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	687a      	ldr	r2, [r7, #4]
 800ad3c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	893a      	ldrh	r2, [r7, #8]
 800ad42:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ad48:	b29a      	uxth	r2, r3
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	4a50      	ldr	r2, [pc, #320]	; (800ae94 <HAL_I2C_Master_Transmit+0x1f8>)
 800ad52:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800ad54:	8979      	ldrh	r1, [r7, #10]
 800ad56:	697b      	ldr	r3, [r7, #20]
 800ad58:	6a3a      	ldr	r2, [r7, #32]
 800ad5a:	68f8      	ldr	r0, [r7, #12]
 800ad5c:	f000 fac2 	bl	800b2e4 <I2C_MasterRequestWrite>
 800ad60:	4603      	mov	r3, r0
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d001      	beq.n	800ad6a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800ad66:	2301      	movs	r3, #1
 800ad68:	e08d      	b.n	800ae86 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	613b      	str	r3, [r7, #16]
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	695b      	ldr	r3, [r3, #20]
 800ad74:	613b      	str	r3, [r7, #16]
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	699b      	ldr	r3, [r3, #24]
 800ad7c:	613b      	str	r3, [r7, #16]
 800ad7e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800ad80:	e066      	b.n	800ae50 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ad82:	697a      	ldr	r2, [r7, #20]
 800ad84:	6a39      	ldr	r1, [r7, #32]
 800ad86:	68f8      	ldr	r0, [r7, #12]
 800ad88:	f000 fcd2 	bl	800b730 <I2C_WaitOnTXEFlagUntilTimeout>
 800ad8c:	4603      	mov	r3, r0
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d00d      	beq.n	800adae <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad96:	2b04      	cmp	r3, #4
 800ad98:	d107      	bne.n	800adaa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	681a      	ldr	r2, [r3, #0]
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ada8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800adaa:	2301      	movs	r3, #1
 800adac:	e06b      	b.n	800ae86 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adb2:	781a      	ldrb	r2, [r3, #0]
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adbe:	1c5a      	adds	r2, r3, #1
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800adc8:	b29b      	uxth	r3, r3
 800adca:	3b01      	subs	r3, #1
 800adcc:	b29a      	uxth	r2, r3
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800add6:	3b01      	subs	r3, #1
 800add8:	b29a      	uxth	r2, r3
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	695b      	ldr	r3, [r3, #20]
 800ade4:	f003 0304 	and.w	r3, r3, #4
 800ade8:	2b04      	cmp	r3, #4
 800adea:	d11b      	bne.n	800ae24 <HAL_I2C_Master_Transmit+0x188>
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d017      	beq.n	800ae24 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adf8:	781a      	ldrb	r2, [r3, #0]
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae04:	1c5a      	adds	r2, r3, #1
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ae0e:	b29b      	uxth	r3, r3
 800ae10:	3b01      	subs	r3, #1
 800ae12:	b29a      	uxth	r2, r3
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ae1c:	3b01      	subs	r3, #1
 800ae1e:	b29a      	uxth	r2, r3
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ae24:	697a      	ldr	r2, [r7, #20]
 800ae26:	6a39      	ldr	r1, [r7, #32]
 800ae28:	68f8      	ldr	r0, [r7, #12]
 800ae2a:	f000 fcc2 	bl	800b7b2 <I2C_WaitOnBTFFlagUntilTimeout>
 800ae2e:	4603      	mov	r3, r0
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d00d      	beq.n	800ae50 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae38:	2b04      	cmp	r3, #4
 800ae3a:	d107      	bne.n	800ae4c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	681a      	ldr	r2, [r3, #0]
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ae4a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800ae4c:	2301      	movs	r3, #1
 800ae4e:	e01a      	b.n	800ae86 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d194      	bne.n	800ad82 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	681a      	ldr	r2, [r3, #0]
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ae66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	2220      	movs	r2, #32
 800ae6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	2200      	movs	r2, #0
 800ae74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800ae80:	2300      	movs	r3, #0
 800ae82:	e000      	b.n	800ae86 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800ae84:	2302      	movs	r3, #2
  }
}
 800ae86:	4618      	mov	r0, r3
 800ae88:	3718      	adds	r7, #24
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	bd80      	pop	{r7, pc}
 800ae8e:	bf00      	nop
 800ae90:	00100002 	.word	0x00100002
 800ae94:	ffff0000 	.word	0xffff0000

0800ae98 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b08c      	sub	sp, #48	; 0x30
 800ae9c:	af02      	add	r7, sp, #8
 800ae9e:	60f8      	str	r0, [r7, #12]
 800aea0:	607a      	str	r2, [r7, #4]
 800aea2:	461a      	mov	r2, r3
 800aea4:	460b      	mov	r3, r1
 800aea6:	817b      	strh	r3, [r7, #10]
 800aea8:	4613      	mov	r3, r2
 800aeaa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800aeac:	f7fe fb02 	bl	80094b4 <HAL_GetTick>
 800aeb0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aeb8:	b2db      	uxtb	r3, r3
 800aeba:	2b20      	cmp	r3, #32
 800aebc:	f040 820b 	bne.w	800b2d6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800aec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aec2:	9300      	str	r3, [sp, #0]
 800aec4:	2319      	movs	r3, #25
 800aec6:	2201      	movs	r2, #1
 800aec8:	497c      	ldr	r1, [pc, #496]	; (800b0bc <HAL_I2C_Master_Receive+0x224>)
 800aeca:	68f8      	ldr	r0, [r7, #12]
 800aecc:	f000 fb5a 	bl	800b584 <I2C_WaitOnFlagUntilTimeout>
 800aed0:	4603      	mov	r3, r0
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d001      	beq.n	800aeda <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800aed6:	2302      	movs	r3, #2
 800aed8:	e1fe      	b.n	800b2d8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aee0:	2b01      	cmp	r3, #1
 800aee2:	d101      	bne.n	800aee8 <HAL_I2C_Master_Receive+0x50>
 800aee4:	2302      	movs	r3, #2
 800aee6:	e1f7      	b.n	800b2d8 <HAL_I2C_Master_Receive+0x440>
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	2201      	movs	r2, #1
 800aeec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	f003 0301 	and.w	r3, r3, #1
 800aefa:	2b01      	cmp	r3, #1
 800aefc:	d007      	beq.n	800af0e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	681a      	ldr	r2, [r3, #0]
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	f042 0201 	orr.w	r2, r2, #1
 800af0c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	681a      	ldr	r2, [r3, #0]
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800af1c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	2222      	movs	r2, #34	; 0x22
 800af22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	2210      	movs	r2, #16
 800af2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	2200      	movs	r2, #0
 800af32:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	687a      	ldr	r2, [r7, #4]
 800af38:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	893a      	ldrh	r2, [r7, #8]
 800af3e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800af44:	b29a      	uxth	r2, r3
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	4a5c      	ldr	r2, [pc, #368]	; (800b0c0 <HAL_I2C_Master_Receive+0x228>)
 800af4e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800af50:	8979      	ldrh	r1, [r7, #10]
 800af52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af56:	68f8      	ldr	r0, [r7, #12]
 800af58:	f000 fa46 	bl	800b3e8 <I2C_MasterRequestRead>
 800af5c:	4603      	mov	r3, r0
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d001      	beq.n	800af66 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800af62:	2301      	movs	r3, #1
 800af64:	e1b8      	b.n	800b2d8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d113      	bne.n	800af96 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800af6e:	2300      	movs	r3, #0
 800af70:	623b      	str	r3, [r7, #32]
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	695b      	ldr	r3, [r3, #20]
 800af78:	623b      	str	r3, [r7, #32]
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	699b      	ldr	r3, [r3, #24]
 800af80:	623b      	str	r3, [r7, #32]
 800af82:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	681a      	ldr	r2, [r3, #0]
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800af92:	601a      	str	r2, [r3, #0]
 800af94:	e18c      	b.n	800b2b0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800af9a:	2b01      	cmp	r3, #1
 800af9c:	d11b      	bne.n	800afd6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	681a      	ldr	r2, [r3, #0]
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800afac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800afae:	2300      	movs	r3, #0
 800afb0:	61fb      	str	r3, [r7, #28]
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	695b      	ldr	r3, [r3, #20]
 800afb8:	61fb      	str	r3, [r7, #28]
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	699b      	ldr	r3, [r3, #24]
 800afc0:	61fb      	str	r3, [r7, #28]
 800afc2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	681a      	ldr	r2, [r3, #0]
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800afd2:	601a      	str	r2, [r3, #0]
 800afd4:	e16c      	b.n	800b2b0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800afda:	2b02      	cmp	r3, #2
 800afdc:	d11b      	bne.n	800b016 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	681a      	ldr	r2, [r3, #0]
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800afec:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	681a      	ldr	r2, [r3, #0]
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800affc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800affe:	2300      	movs	r3, #0
 800b000:	61bb      	str	r3, [r7, #24]
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	695b      	ldr	r3, [r3, #20]
 800b008:	61bb      	str	r3, [r7, #24]
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	699b      	ldr	r3, [r3, #24]
 800b010:	61bb      	str	r3, [r7, #24]
 800b012:	69bb      	ldr	r3, [r7, #24]
 800b014:	e14c      	b.n	800b2b0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	681a      	ldr	r2, [r3, #0]
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b024:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b026:	2300      	movs	r3, #0
 800b028:	617b      	str	r3, [r7, #20]
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	695b      	ldr	r3, [r3, #20]
 800b030:	617b      	str	r3, [r7, #20]
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	699b      	ldr	r3, [r3, #24]
 800b038:	617b      	str	r3, [r7, #20]
 800b03a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800b03c:	e138      	b.n	800b2b0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b042:	2b03      	cmp	r3, #3
 800b044:	f200 80f1 	bhi.w	800b22a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b04c:	2b01      	cmp	r3, #1
 800b04e:	d123      	bne.n	800b098 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b050:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b052:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b054:	68f8      	ldr	r0, [r7, #12]
 800b056:	f000 fbed 	bl	800b834 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b05a:	4603      	mov	r3, r0
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d001      	beq.n	800b064 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800b060:	2301      	movs	r3, #1
 800b062:	e139      	b.n	800b2d8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	691a      	ldr	r2, [r3, #16]
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b06e:	b2d2      	uxtb	r2, r2
 800b070:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b076:	1c5a      	adds	r2, r3, #1
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b080:	3b01      	subs	r3, #1
 800b082:	b29a      	uxth	r2, r3
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b08c:	b29b      	uxth	r3, r3
 800b08e:	3b01      	subs	r3, #1
 800b090:	b29a      	uxth	r2, r3
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b096:	e10b      	b.n	800b2b0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b09c:	2b02      	cmp	r3, #2
 800b09e:	d14e      	bne.n	800b13e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b0a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0a2:	9300      	str	r3, [sp, #0]
 800b0a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0a6:	2200      	movs	r2, #0
 800b0a8:	4906      	ldr	r1, [pc, #24]	; (800b0c4 <HAL_I2C_Master_Receive+0x22c>)
 800b0aa:	68f8      	ldr	r0, [r7, #12]
 800b0ac:	f000 fa6a 	bl	800b584 <I2C_WaitOnFlagUntilTimeout>
 800b0b0:	4603      	mov	r3, r0
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d008      	beq.n	800b0c8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800b0b6:	2301      	movs	r3, #1
 800b0b8:	e10e      	b.n	800b2d8 <HAL_I2C_Master_Receive+0x440>
 800b0ba:	bf00      	nop
 800b0bc:	00100002 	.word	0x00100002
 800b0c0:	ffff0000 	.word	0xffff0000
 800b0c4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	681a      	ldr	r2, [r3, #0]
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b0d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	691a      	ldr	r2, [r3, #16]
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0e2:	b2d2      	uxtb	r2, r2
 800b0e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0ea:	1c5a      	adds	r2, r3, #1
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b0f4:	3b01      	subs	r3, #1
 800b0f6:	b29a      	uxth	r2, r3
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b100:	b29b      	uxth	r3, r3
 800b102:	3b01      	subs	r3, #1
 800b104:	b29a      	uxth	r2, r3
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	691a      	ldr	r2, [r3, #16]
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b114:	b2d2      	uxtb	r2, r2
 800b116:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b11c:	1c5a      	adds	r2, r3, #1
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b126:	3b01      	subs	r3, #1
 800b128:	b29a      	uxth	r2, r3
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b132:	b29b      	uxth	r3, r3
 800b134:	3b01      	subs	r3, #1
 800b136:	b29a      	uxth	r2, r3
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b13c:	e0b8      	b.n	800b2b0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b13e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b140:	9300      	str	r3, [sp, #0]
 800b142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b144:	2200      	movs	r2, #0
 800b146:	4966      	ldr	r1, [pc, #408]	; (800b2e0 <HAL_I2C_Master_Receive+0x448>)
 800b148:	68f8      	ldr	r0, [r7, #12]
 800b14a:	f000 fa1b 	bl	800b584 <I2C_WaitOnFlagUntilTimeout>
 800b14e:	4603      	mov	r3, r0
 800b150:	2b00      	cmp	r3, #0
 800b152:	d001      	beq.n	800b158 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800b154:	2301      	movs	r3, #1
 800b156:	e0bf      	b.n	800b2d8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	681a      	ldr	r2, [r3, #0]
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b166:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	691a      	ldr	r2, [r3, #16]
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b172:	b2d2      	uxtb	r2, r2
 800b174:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b17a:	1c5a      	adds	r2, r3, #1
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b184:	3b01      	subs	r3, #1
 800b186:	b29a      	uxth	r2, r3
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b190:	b29b      	uxth	r3, r3
 800b192:	3b01      	subs	r3, #1
 800b194:	b29a      	uxth	r2, r3
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b19a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b19c:	9300      	str	r3, [sp, #0]
 800b19e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1a0:	2200      	movs	r2, #0
 800b1a2:	494f      	ldr	r1, [pc, #316]	; (800b2e0 <HAL_I2C_Master_Receive+0x448>)
 800b1a4:	68f8      	ldr	r0, [r7, #12]
 800b1a6:	f000 f9ed 	bl	800b584 <I2C_WaitOnFlagUntilTimeout>
 800b1aa:	4603      	mov	r3, r0
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d001      	beq.n	800b1b4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800b1b0:	2301      	movs	r3, #1
 800b1b2:	e091      	b.n	800b2d8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	681a      	ldr	r2, [r3, #0]
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b1c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	691a      	ldr	r2, [r3, #16]
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1ce:	b2d2      	uxtb	r2, r2
 800b1d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1d6:	1c5a      	adds	r2, r3, #1
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b1e0:	3b01      	subs	r3, #1
 800b1e2:	b29a      	uxth	r2, r3
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b1ec:	b29b      	uxth	r3, r3
 800b1ee:	3b01      	subs	r3, #1
 800b1f0:	b29a      	uxth	r2, r3
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	691a      	ldr	r2, [r3, #16]
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b200:	b2d2      	uxtb	r2, r2
 800b202:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b208:	1c5a      	adds	r2, r3, #1
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b212:	3b01      	subs	r3, #1
 800b214:	b29a      	uxth	r2, r3
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b21e:	b29b      	uxth	r3, r3
 800b220:	3b01      	subs	r3, #1
 800b222:	b29a      	uxth	r2, r3
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b228:	e042      	b.n	800b2b0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b22a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b22c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b22e:	68f8      	ldr	r0, [r7, #12]
 800b230:	f000 fb00 	bl	800b834 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b234:	4603      	mov	r3, r0
 800b236:	2b00      	cmp	r3, #0
 800b238:	d001      	beq.n	800b23e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800b23a:	2301      	movs	r3, #1
 800b23c:	e04c      	b.n	800b2d8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	691a      	ldr	r2, [r3, #16]
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b248:	b2d2      	uxtb	r2, r2
 800b24a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b250:	1c5a      	adds	r2, r3, #1
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b25a:	3b01      	subs	r3, #1
 800b25c:	b29a      	uxth	r2, r3
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b266:	b29b      	uxth	r3, r3
 800b268:	3b01      	subs	r3, #1
 800b26a:	b29a      	uxth	r2, r3
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	695b      	ldr	r3, [r3, #20]
 800b276:	f003 0304 	and.w	r3, r3, #4
 800b27a:	2b04      	cmp	r3, #4
 800b27c:	d118      	bne.n	800b2b0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	691a      	ldr	r2, [r3, #16]
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b288:	b2d2      	uxtb	r2, r2
 800b28a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b290:	1c5a      	adds	r2, r3, #1
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b29a:	3b01      	subs	r3, #1
 800b29c:	b29a      	uxth	r2, r3
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b2a6:	b29b      	uxth	r3, r3
 800b2a8:	3b01      	subs	r3, #1
 800b2aa:	b29a      	uxth	r2, r3
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	f47f aec2 	bne.w	800b03e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	2220      	movs	r2, #32
 800b2be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	2200      	movs	r2, #0
 800b2ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	e000      	b.n	800b2d8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800b2d6:	2302      	movs	r3, #2
  }
}
 800b2d8:	4618      	mov	r0, r3
 800b2da:	3728      	adds	r7, #40	; 0x28
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	bd80      	pop	{r7, pc}
 800b2e0:	00010004 	.word	0x00010004

0800b2e4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800b2e4:	b580      	push	{r7, lr}
 800b2e6:	b088      	sub	sp, #32
 800b2e8:	af02      	add	r7, sp, #8
 800b2ea:	60f8      	str	r0, [r7, #12]
 800b2ec:	607a      	str	r2, [r7, #4]
 800b2ee:	603b      	str	r3, [r7, #0]
 800b2f0:	460b      	mov	r3, r1
 800b2f2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2f8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800b2fa:	697b      	ldr	r3, [r7, #20]
 800b2fc:	2b08      	cmp	r3, #8
 800b2fe:	d006      	beq.n	800b30e <I2C_MasterRequestWrite+0x2a>
 800b300:	697b      	ldr	r3, [r7, #20]
 800b302:	2b01      	cmp	r3, #1
 800b304:	d003      	beq.n	800b30e <I2C_MasterRequestWrite+0x2a>
 800b306:	697b      	ldr	r3, [r7, #20]
 800b308:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b30c:	d108      	bne.n	800b320 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	681a      	ldr	r2, [r3, #0]
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b31c:	601a      	str	r2, [r3, #0]
 800b31e:	e00b      	b.n	800b338 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b324:	2b12      	cmp	r3, #18
 800b326:	d107      	bne.n	800b338 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	681a      	ldr	r2, [r3, #0]
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b336:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b338:	683b      	ldr	r3, [r7, #0]
 800b33a:	9300      	str	r3, [sp, #0]
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	2200      	movs	r2, #0
 800b340:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b344:	68f8      	ldr	r0, [r7, #12]
 800b346:	f000 f91d 	bl	800b584 <I2C_WaitOnFlagUntilTimeout>
 800b34a:	4603      	mov	r3, r0
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d00d      	beq.n	800b36c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b35a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b35e:	d103      	bne.n	800b368 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b366:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800b368:	2303      	movs	r3, #3
 800b36a:	e035      	b.n	800b3d8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	691b      	ldr	r3, [r3, #16]
 800b370:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b374:	d108      	bne.n	800b388 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b376:	897b      	ldrh	r3, [r7, #10]
 800b378:	b2db      	uxtb	r3, r3
 800b37a:	461a      	mov	r2, r3
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800b384:	611a      	str	r2, [r3, #16]
 800b386:	e01b      	b.n	800b3c0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800b388:	897b      	ldrh	r3, [r7, #10]
 800b38a:	11db      	asrs	r3, r3, #7
 800b38c:	b2db      	uxtb	r3, r3
 800b38e:	f003 0306 	and.w	r3, r3, #6
 800b392:	b2db      	uxtb	r3, r3
 800b394:	f063 030f 	orn	r3, r3, #15
 800b398:	b2da      	uxtb	r2, r3
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800b3a0:	683b      	ldr	r3, [r7, #0]
 800b3a2:	687a      	ldr	r2, [r7, #4]
 800b3a4:	490e      	ldr	r1, [pc, #56]	; (800b3e0 <I2C_MasterRequestWrite+0xfc>)
 800b3a6:	68f8      	ldr	r0, [r7, #12]
 800b3a8:	f000 f943 	bl	800b632 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b3ac:	4603      	mov	r3, r0
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d001      	beq.n	800b3b6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800b3b2:	2301      	movs	r3, #1
 800b3b4:	e010      	b.n	800b3d8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800b3b6:	897b      	ldrh	r3, [r7, #10]
 800b3b8:	b2da      	uxtb	r2, r3
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b3c0:	683b      	ldr	r3, [r7, #0]
 800b3c2:	687a      	ldr	r2, [r7, #4]
 800b3c4:	4907      	ldr	r1, [pc, #28]	; (800b3e4 <I2C_MasterRequestWrite+0x100>)
 800b3c6:	68f8      	ldr	r0, [r7, #12]
 800b3c8:	f000 f933 	bl	800b632 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b3cc:	4603      	mov	r3, r0
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d001      	beq.n	800b3d6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800b3d2:	2301      	movs	r3, #1
 800b3d4:	e000      	b.n	800b3d8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800b3d6:	2300      	movs	r3, #0
}
 800b3d8:	4618      	mov	r0, r3
 800b3da:	3718      	adds	r7, #24
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	bd80      	pop	{r7, pc}
 800b3e0:	00010008 	.word	0x00010008
 800b3e4:	00010002 	.word	0x00010002

0800b3e8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b088      	sub	sp, #32
 800b3ec:	af02      	add	r7, sp, #8
 800b3ee:	60f8      	str	r0, [r7, #12]
 800b3f0:	607a      	str	r2, [r7, #4]
 800b3f2:	603b      	str	r3, [r7, #0]
 800b3f4:	460b      	mov	r3, r1
 800b3f6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3fc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	681a      	ldr	r2, [r3, #0]
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b40c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800b40e:	697b      	ldr	r3, [r7, #20]
 800b410:	2b08      	cmp	r3, #8
 800b412:	d006      	beq.n	800b422 <I2C_MasterRequestRead+0x3a>
 800b414:	697b      	ldr	r3, [r7, #20]
 800b416:	2b01      	cmp	r3, #1
 800b418:	d003      	beq.n	800b422 <I2C_MasterRequestRead+0x3a>
 800b41a:	697b      	ldr	r3, [r7, #20]
 800b41c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b420:	d108      	bne.n	800b434 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	681a      	ldr	r2, [r3, #0]
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b430:	601a      	str	r2, [r3, #0]
 800b432:	e00b      	b.n	800b44c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b438:	2b11      	cmp	r3, #17
 800b43a:	d107      	bne.n	800b44c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	681a      	ldr	r2, [r3, #0]
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b44a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b44c:	683b      	ldr	r3, [r7, #0]
 800b44e:	9300      	str	r3, [sp, #0]
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	2200      	movs	r2, #0
 800b454:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b458:	68f8      	ldr	r0, [r7, #12]
 800b45a:	f000 f893 	bl	800b584 <I2C_WaitOnFlagUntilTimeout>
 800b45e:	4603      	mov	r3, r0
 800b460:	2b00      	cmp	r3, #0
 800b462:	d00d      	beq.n	800b480 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b46e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b472:	d103      	bne.n	800b47c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b47a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800b47c:	2303      	movs	r3, #3
 800b47e:	e079      	b.n	800b574 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	691b      	ldr	r3, [r3, #16]
 800b484:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b488:	d108      	bne.n	800b49c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800b48a:	897b      	ldrh	r3, [r7, #10]
 800b48c:	b2db      	uxtb	r3, r3
 800b48e:	f043 0301 	orr.w	r3, r3, #1
 800b492:	b2da      	uxtb	r2, r3
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	611a      	str	r2, [r3, #16]
 800b49a:	e05f      	b.n	800b55c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800b49c:	897b      	ldrh	r3, [r7, #10]
 800b49e:	11db      	asrs	r3, r3, #7
 800b4a0:	b2db      	uxtb	r3, r3
 800b4a2:	f003 0306 	and.w	r3, r3, #6
 800b4a6:	b2db      	uxtb	r3, r3
 800b4a8:	f063 030f 	orn	r3, r3, #15
 800b4ac:	b2da      	uxtb	r2, r3
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800b4b4:	683b      	ldr	r3, [r7, #0]
 800b4b6:	687a      	ldr	r2, [r7, #4]
 800b4b8:	4930      	ldr	r1, [pc, #192]	; (800b57c <I2C_MasterRequestRead+0x194>)
 800b4ba:	68f8      	ldr	r0, [r7, #12]
 800b4bc:	f000 f8b9 	bl	800b632 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b4c0:	4603      	mov	r3, r0
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d001      	beq.n	800b4ca <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800b4c6:	2301      	movs	r3, #1
 800b4c8:	e054      	b.n	800b574 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800b4ca:	897b      	ldrh	r3, [r7, #10]
 800b4cc:	b2da      	uxtb	r2, r3
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	681b      	ldr	r3, [r3, #0]
 800b4d2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b4d4:	683b      	ldr	r3, [r7, #0]
 800b4d6:	687a      	ldr	r2, [r7, #4]
 800b4d8:	4929      	ldr	r1, [pc, #164]	; (800b580 <I2C_MasterRequestRead+0x198>)
 800b4da:	68f8      	ldr	r0, [r7, #12]
 800b4dc:	f000 f8a9 	bl	800b632 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b4e0:	4603      	mov	r3, r0
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d001      	beq.n	800b4ea <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800b4e6:	2301      	movs	r3, #1
 800b4e8:	e044      	b.n	800b574 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	613b      	str	r3, [r7, #16]
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	695b      	ldr	r3, [r3, #20]
 800b4f4:	613b      	str	r3, [r7, #16]
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	699b      	ldr	r3, [r3, #24]
 800b4fc:	613b      	str	r3, [r7, #16]
 800b4fe:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	681a      	ldr	r2, [r3, #0]
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b50e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b510:	683b      	ldr	r3, [r7, #0]
 800b512:	9300      	str	r3, [sp, #0]
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	2200      	movs	r2, #0
 800b518:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b51c:	68f8      	ldr	r0, [r7, #12]
 800b51e:	f000 f831 	bl	800b584 <I2C_WaitOnFlagUntilTimeout>
 800b522:	4603      	mov	r3, r0
 800b524:	2b00      	cmp	r3, #0
 800b526:	d00d      	beq.n	800b544 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b532:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b536:	d103      	bne.n	800b540 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b53e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800b540:	2303      	movs	r3, #3
 800b542:	e017      	b.n	800b574 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800b544:	897b      	ldrh	r3, [r7, #10]
 800b546:	11db      	asrs	r3, r3, #7
 800b548:	b2db      	uxtb	r3, r3
 800b54a:	f003 0306 	and.w	r3, r3, #6
 800b54e:	b2db      	uxtb	r3, r3
 800b550:	f063 030e 	orn	r3, r3, #14
 800b554:	b2da      	uxtb	r2, r3
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b55c:	683b      	ldr	r3, [r7, #0]
 800b55e:	687a      	ldr	r2, [r7, #4]
 800b560:	4907      	ldr	r1, [pc, #28]	; (800b580 <I2C_MasterRequestRead+0x198>)
 800b562:	68f8      	ldr	r0, [r7, #12]
 800b564:	f000 f865 	bl	800b632 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b568:	4603      	mov	r3, r0
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d001      	beq.n	800b572 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800b56e:	2301      	movs	r3, #1
 800b570:	e000      	b.n	800b574 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800b572:	2300      	movs	r3, #0
}
 800b574:	4618      	mov	r0, r3
 800b576:	3718      	adds	r7, #24
 800b578:	46bd      	mov	sp, r7
 800b57a:	bd80      	pop	{r7, pc}
 800b57c:	00010008 	.word	0x00010008
 800b580:	00010002 	.word	0x00010002

0800b584 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800b584:	b580      	push	{r7, lr}
 800b586:	b084      	sub	sp, #16
 800b588:	af00      	add	r7, sp, #0
 800b58a:	60f8      	str	r0, [r7, #12]
 800b58c:	60b9      	str	r1, [r7, #8]
 800b58e:	603b      	str	r3, [r7, #0]
 800b590:	4613      	mov	r3, r2
 800b592:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b594:	e025      	b.n	800b5e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b596:	683b      	ldr	r3, [r7, #0]
 800b598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b59c:	d021      	beq.n	800b5e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b59e:	f7fd ff89 	bl	80094b4 <HAL_GetTick>
 800b5a2:	4602      	mov	r2, r0
 800b5a4:	69bb      	ldr	r3, [r7, #24]
 800b5a6:	1ad3      	subs	r3, r2, r3
 800b5a8:	683a      	ldr	r2, [r7, #0]
 800b5aa:	429a      	cmp	r2, r3
 800b5ac:	d302      	bcc.n	800b5b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800b5ae:	683b      	ldr	r3, [r7, #0]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d116      	bne.n	800b5e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	2220      	movs	r2, #32
 800b5be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	2200      	movs	r2, #0
 800b5c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5ce:	f043 0220 	orr.w	r2, r3, #32
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	2200      	movs	r2, #0
 800b5da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b5de:	2301      	movs	r3, #1
 800b5e0:	e023      	b.n	800b62a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b5e2:	68bb      	ldr	r3, [r7, #8]
 800b5e4:	0c1b      	lsrs	r3, r3, #16
 800b5e6:	b2db      	uxtb	r3, r3
 800b5e8:	2b01      	cmp	r3, #1
 800b5ea:	d10d      	bne.n	800b608 <I2C_WaitOnFlagUntilTimeout+0x84>
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	695b      	ldr	r3, [r3, #20]
 800b5f2:	43da      	mvns	r2, r3
 800b5f4:	68bb      	ldr	r3, [r7, #8]
 800b5f6:	4013      	ands	r3, r2
 800b5f8:	b29b      	uxth	r3, r3
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	bf0c      	ite	eq
 800b5fe:	2301      	moveq	r3, #1
 800b600:	2300      	movne	r3, #0
 800b602:	b2db      	uxtb	r3, r3
 800b604:	461a      	mov	r2, r3
 800b606:	e00c      	b.n	800b622 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	699b      	ldr	r3, [r3, #24]
 800b60e:	43da      	mvns	r2, r3
 800b610:	68bb      	ldr	r3, [r7, #8]
 800b612:	4013      	ands	r3, r2
 800b614:	b29b      	uxth	r3, r3
 800b616:	2b00      	cmp	r3, #0
 800b618:	bf0c      	ite	eq
 800b61a:	2301      	moveq	r3, #1
 800b61c:	2300      	movne	r3, #0
 800b61e:	b2db      	uxtb	r3, r3
 800b620:	461a      	mov	r2, r3
 800b622:	79fb      	ldrb	r3, [r7, #7]
 800b624:	429a      	cmp	r2, r3
 800b626:	d0b6      	beq.n	800b596 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b628:	2300      	movs	r3, #0
}
 800b62a:	4618      	mov	r0, r3
 800b62c:	3710      	adds	r7, #16
 800b62e:	46bd      	mov	sp, r7
 800b630:	bd80      	pop	{r7, pc}

0800b632 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800b632:	b580      	push	{r7, lr}
 800b634:	b084      	sub	sp, #16
 800b636:	af00      	add	r7, sp, #0
 800b638:	60f8      	str	r0, [r7, #12]
 800b63a:	60b9      	str	r1, [r7, #8]
 800b63c:	607a      	str	r2, [r7, #4]
 800b63e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b640:	e051      	b.n	800b6e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	695b      	ldr	r3, [r3, #20]
 800b648:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b64c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b650:	d123      	bne.n	800b69a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	681a      	ldr	r2, [r3, #0]
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b660:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b66a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	2200      	movs	r2, #0
 800b670:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	2220      	movs	r2, #32
 800b676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	2200      	movs	r2, #0
 800b67e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b686:	f043 0204 	orr.w	r2, r3, #4
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	2200      	movs	r2, #0
 800b692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800b696:	2301      	movs	r3, #1
 800b698:	e046      	b.n	800b728 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6a0:	d021      	beq.n	800b6e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b6a2:	f7fd ff07 	bl	80094b4 <HAL_GetTick>
 800b6a6:	4602      	mov	r2, r0
 800b6a8:	683b      	ldr	r3, [r7, #0]
 800b6aa:	1ad3      	subs	r3, r2, r3
 800b6ac:	687a      	ldr	r2, [r7, #4]
 800b6ae:	429a      	cmp	r2, r3
 800b6b0:	d302      	bcc.n	800b6b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d116      	bne.n	800b6e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	2220      	movs	r2, #32
 800b6c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	2200      	movs	r2, #0
 800b6ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6d2:	f043 0220 	orr.w	r2, r3, #32
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	2200      	movs	r2, #0
 800b6de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b6e2:	2301      	movs	r3, #1
 800b6e4:	e020      	b.n	800b728 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b6e6:	68bb      	ldr	r3, [r7, #8]
 800b6e8:	0c1b      	lsrs	r3, r3, #16
 800b6ea:	b2db      	uxtb	r3, r3
 800b6ec:	2b01      	cmp	r3, #1
 800b6ee:	d10c      	bne.n	800b70a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	695b      	ldr	r3, [r3, #20]
 800b6f6:	43da      	mvns	r2, r3
 800b6f8:	68bb      	ldr	r3, [r7, #8]
 800b6fa:	4013      	ands	r3, r2
 800b6fc:	b29b      	uxth	r3, r3
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	bf14      	ite	ne
 800b702:	2301      	movne	r3, #1
 800b704:	2300      	moveq	r3, #0
 800b706:	b2db      	uxtb	r3, r3
 800b708:	e00b      	b.n	800b722 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	699b      	ldr	r3, [r3, #24]
 800b710:	43da      	mvns	r2, r3
 800b712:	68bb      	ldr	r3, [r7, #8]
 800b714:	4013      	ands	r3, r2
 800b716:	b29b      	uxth	r3, r3
 800b718:	2b00      	cmp	r3, #0
 800b71a:	bf14      	ite	ne
 800b71c:	2301      	movne	r3, #1
 800b71e:	2300      	moveq	r3, #0
 800b720:	b2db      	uxtb	r3, r3
 800b722:	2b00      	cmp	r3, #0
 800b724:	d18d      	bne.n	800b642 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800b726:	2300      	movs	r3, #0
}
 800b728:	4618      	mov	r0, r3
 800b72a:	3710      	adds	r7, #16
 800b72c:	46bd      	mov	sp, r7
 800b72e:	bd80      	pop	{r7, pc}

0800b730 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b730:	b580      	push	{r7, lr}
 800b732:	b084      	sub	sp, #16
 800b734:	af00      	add	r7, sp, #0
 800b736:	60f8      	str	r0, [r7, #12]
 800b738:	60b9      	str	r1, [r7, #8]
 800b73a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b73c:	e02d      	b.n	800b79a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b73e:	68f8      	ldr	r0, [r7, #12]
 800b740:	f000 f8ce 	bl	800b8e0 <I2C_IsAcknowledgeFailed>
 800b744:	4603      	mov	r3, r0
 800b746:	2b00      	cmp	r3, #0
 800b748:	d001      	beq.n	800b74e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b74a:	2301      	movs	r3, #1
 800b74c:	e02d      	b.n	800b7aa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b74e:	68bb      	ldr	r3, [r7, #8]
 800b750:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b754:	d021      	beq.n	800b79a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b756:	f7fd fead 	bl	80094b4 <HAL_GetTick>
 800b75a:	4602      	mov	r2, r0
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	1ad3      	subs	r3, r2, r3
 800b760:	68ba      	ldr	r2, [r7, #8]
 800b762:	429a      	cmp	r2, r3
 800b764:	d302      	bcc.n	800b76c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800b766:	68bb      	ldr	r3, [r7, #8]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d116      	bne.n	800b79a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	2200      	movs	r2, #0
 800b770:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	2220      	movs	r2, #32
 800b776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	2200      	movs	r2, #0
 800b77e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b786:	f043 0220 	orr.w	r2, r3, #32
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	2200      	movs	r2, #0
 800b792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b796:	2301      	movs	r3, #1
 800b798:	e007      	b.n	800b7aa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	695b      	ldr	r3, [r3, #20]
 800b7a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b7a4:	2b80      	cmp	r3, #128	; 0x80
 800b7a6:	d1ca      	bne.n	800b73e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b7a8:	2300      	movs	r3, #0
}
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	3710      	adds	r7, #16
 800b7ae:	46bd      	mov	sp, r7
 800b7b0:	bd80      	pop	{r7, pc}

0800b7b2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b7b2:	b580      	push	{r7, lr}
 800b7b4:	b084      	sub	sp, #16
 800b7b6:	af00      	add	r7, sp, #0
 800b7b8:	60f8      	str	r0, [r7, #12]
 800b7ba:	60b9      	str	r1, [r7, #8]
 800b7bc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b7be:	e02d      	b.n	800b81c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b7c0:	68f8      	ldr	r0, [r7, #12]
 800b7c2:	f000 f88d 	bl	800b8e0 <I2C_IsAcknowledgeFailed>
 800b7c6:	4603      	mov	r3, r0
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d001      	beq.n	800b7d0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b7cc:	2301      	movs	r3, #1
 800b7ce:	e02d      	b.n	800b82c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b7d0:	68bb      	ldr	r3, [r7, #8]
 800b7d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7d6:	d021      	beq.n	800b81c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b7d8:	f7fd fe6c 	bl	80094b4 <HAL_GetTick>
 800b7dc:	4602      	mov	r2, r0
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	1ad3      	subs	r3, r2, r3
 800b7e2:	68ba      	ldr	r2, [r7, #8]
 800b7e4:	429a      	cmp	r2, r3
 800b7e6:	d302      	bcc.n	800b7ee <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800b7e8:	68bb      	ldr	r3, [r7, #8]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d116      	bne.n	800b81c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	2200      	movs	r2, #0
 800b7f2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	2220      	movs	r2, #32
 800b7f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	2200      	movs	r2, #0
 800b800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b808:	f043 0220 	orr.w	r2, r3, #32
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	2200      	movs	r2, #0
 800b814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b818:	2301      	movs	r3, #1
 800b81a:	e007      	b.n	800b82c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	695b      	ldr	r3, [r3, #20]
 800b822:	f003 0304 	and.w	r3, r3, #4
 800b826:	2b04      	cmp	r3, #4
 800b828:	d1ca      	bne.n	800b7c0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b82a:	2300      	movs	r3, #0
}
 800b82c:	4618      	mov	r0, r3
 800b82e:	3710      	adds	r7, #16
 800b830:	46bd      	mov	sp, r7
 800b832:	bd80      	pop	{r7, pc}

0800b834 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b834:	b580      	push	{r7, lr}
 800b836:	b084      	sub	sp, #16
 800b838:	af00      	add	r7, sp, #0
 800b83a:	60f8      	str	r0, [r7, #12]
 800b83c:	60b9      	str	r1, [r7, #8]
 800b83e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b840:	e042      	b.n	800b8c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	695b      	ldr	r3, [r3, #20]
 800b848:	f003 0310 	and.w	r3, r3, #16
 800b84c:	2b10      	cmp	r3, #16
 800b84e:	d119      	bne.n	800b884 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	f06f 0210 	mvn.w	r2, #16
 800b858:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	2200      	movs	r2, #0
 800b85e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	2220      	movs	r2, #32
 800b864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	2200      	movs	r2, #0
 800b86c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	2200      	movs	r2, #0
 800b87c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800b880:	2301      	movs	r3, #1
 800b882:	e029      	b.n	800b8d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b884:	f7fd fe16 	bl	80094b4 <HAL_GetTick>
 800b888:	4602      	mov	r2, r0
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	1ad3      	subs	r3, r2, r3
 800b88e:	68ba      	ldr	r2, [r7, #8]
 800b890:	429a      	cmp	r2, r3
 800b892:	d302      	bcc.n	800b89a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800b894:	68bb      	ldr	r3, [r7, #8]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d116      	bne.n	800b8c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	2200      	movs	r2, #0
 800b89e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	2220      	movs	r2, #32
 800b8a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8b4:	f043 0220 	orr.w	r2, r3, #32
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	2200      	movs	r2, #0
 800b8c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800b8c4:	2301      	movs	r3, #1
 800b8c6:	e007      	b.n	800b8d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	695b      	ldr	r3, [r3, #20]
 800b8ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8d2:	2b40      	cmp	r3, #64	; 0x40
 800b8d4:	d1b5      	bne.n	800b842 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800b8d6:	2300      	movs	r3, #0
}
 800b8d8:	4618      	mov	r0, r3
 800b8da:	3710      	adds	r7, #16
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	bd80      	pop	{r7, pc}

0800b8e0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800b8e0:	b480      	push	{r7}
 800b8e2:	b083      	sub	sp, #12
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	695b      	ldr	r3, [r3, #20]
 800b8ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b8f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b8f6:	d11b      	bne.n	800b930 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b900:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	2200      	movs	r2, #0
 800b906:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	2220      	movs	r2, #32
 800b90c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	2200      	movs	r2, #0
 800b914:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b91c:	f043 0204 	orr.w	r2, r3, #4
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	2200      	movs	r2, #0
 800b928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800b92c:	2301      	movs	r3, #1
 800b92e:	e000      	b.n	800b932 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800b930:	2300      	movs	r3, #0
}
 800b932:	4618      	mov	r0, r3
 800b934:	370c      	adds	r7, #12
 800b936:	46bd      	mov	sp, r7
 800b938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93c:	4770      	bx	lr
	...

0800b940 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800b940:	b580      	push	{r7, lr}
 800b942:	b082      	sub	sp, #8
 800b944:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800b946:	2300      	movs	r3, #0
 800b948:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800b94a:	2300      	movs	r3, #0
 800b94c:	603b      	str	r3, [r7, #0]
 800b94e:	4b20      	ldr	r3, [pc, #128]	; (800b9d0 <HAL_PWREx_EnableOverDrive+0x90>)
 800b950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b952:	4a1f      	ldr	r2, [pc, #124]	; (800b9d0 <HAL_PWREx_EnableOverDrive+0x90>)
 800b954:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b958:	6413      	str	r3, [r2, #64]	; 0x40
 800b95a:	4b1d      	ldr	r3, [pc, #116]	; (800b9d0 <HAL_PWREx_EnableOverDrive+0x90>)
 800b95c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b95e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b962:	603b      	str	r3, [r7, #0]
 800b964:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800b966:	4b1b      	ldr	r3, [pc, #108]	; (800b9d4 <HAL_PWREx_EnableOverDrive+0x94>)
 800b968:	2201      	movs	r2, #1
 800b96a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b96c:	f7fd fda2 	bl	80094b4 <HAL_GetTick>
 800b970:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800b972:	e009      	b.n	800b988 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800b974:	f7fd fd9e 	bl	80094b4 <HAL_GetTick>
 800b978:	4602      	mov	r2, r0
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	1ad3      	subs	r3, r2, r3
 800b97e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b982:	d901      	bls.n	800b988 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800b984:	2303      	movs	r3, #3
 800b986:	e01f      	b.n	800b9c8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800b988:	4b13      	ldr	r3, [pc, #76]	; (800b9d8 <HAL_PWREx_EnableOverDrive+0x98>)
 800b98a:	685b      	ldr	r3, [r3, #4]
 800b98c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b990:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b994:	d1ee      	bne.n	800b974 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800b996:	4b11      	ldr	r3, [pc, #68]	; (800b9dc <HAL_PWREx_EnableOverDrive+0x9c>)
 800b998:	2201      	movs	r2, #1
 800b99a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b99c:	f7fd fd8a 	bl	80094b4 <HAL_GetTick>
 800b9a0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800b9a2:	e009      	b.n	800b9b8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800b9a4:	f7fd fd86 	bl	80094b4 <HAL_GetTick>
 800b9a8:	4602      	mov	r2, r0
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	1ad3      	subs	r3, r2, r3
 800b9ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b9b2:	d901      	bls.n	800b9b8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800b9b4:	2303      	movs	r3, #3
 800b9b6:	e007      	b.n	800b9c8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800b9b8:	4b07      	ldr	r3, [pc, #28]	; (800b9d8 <HAL_PWREx_EnableOverDrive+0x98>)
 800b9ba:	685b      	ldr	r3, [r3, #4]
 800b9bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b9c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b9c4:	d1ee      	bne.n	800b9a4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800b9c6:	2300      	movs	r3, #0
}
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	3708      	adds	r7, #8
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	bd80      	pop	{r7, pc}
 800b9d0:	40023800 	.word	0x40023800
 800b9d4:	420e0040 	.word	0x420e0040
 800b9d8:	40007000 	.word	0x40007000
 800b9dc:	420e0044 	.word	0x420e0044

0800b9e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b084      	sub	sp, #16
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	6078      	str	r0, [r7, #4]
 800b9e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d101      	bne.n	800b9f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b9f0:	2301      	movs	r3, #1
 800b9f2:	e0cc      	b.n	800bb8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b9f4:	4b68      	ldr	r3, [pc, #416]	; (800bb98 <HAL_RCC_ClockConfig+0x1b8>)
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	f003 030f 	and.w	r3, r3, #15
 800b9fc:	683a      	ldr	r2, [r7, #0]
 800b9fe:	429a      	cmp	r2, r3
 800ba00:	d90c      	bls.n	800ba1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ba02:	4b65      	ldr	r3, [pc, #404]	; (800bb98 <HAL_RCC_ClockConfig+0x1b8>)
 800ba04:	683a      	ldr	r2, [r7, #0]
 800ba06:	b2d2      	uxtb	r2, r2
 800ba08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ba0a:	4b63      	ldr	r3, [pc, #396]	; (800bb98 <HAL_RCC_ClockConfig+0x1b8>)
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	f003 030f 	and.w	r3, r3, #15
 800ba12:	683a      	ldr	r2, [r7, #0]
 800ba14:	429a      	cmp	r2, r3
 800ba16:	d001      	beq.n	800ba1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800ba18:	2301      	movs	r3, #1
 800ba1a:	e0b8      	b.n	800bb8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	f003 0302 	and.w	r3, r3, #2
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d020      	beq.n	800ba6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	f003 0304 	and.w	r3, r3, #4
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d005      	beq.n	800ba40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ba34:	4b59      	ldr	r3, [pc, #356]	; (800bb9c <HAL_RCC_ClockConfig+0x1bc>)
 800ba36:	689b      	ldr	r3, [r3, #8]
 800ba38:	4a58      	ldr	r2, [pc, #352]	; (800bb9c <HAL_RCC_ClockConfig+0x1bc>)
 800ba3a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800ba3e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	f003 0308 	and.w	r3, r3, #8
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d005      	beq.n	800ba58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ba4c:	4b53      	ldr	r3, [pc, #332]	; (800bb9c <HAL_RCC_ClockConfig+0x1bc>)
 800ba4e:	689b      	ldr	r3, [r3, #8]
 800ba50:	4a52      	ldr	r2, [pc, #328]	; (800bb9c <HAL_RCC_ClockConfig+0x1bc>)
 800ba52:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800ba56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ba58:	4b50      	ldr	r3, [pc, #320]	; (800bb9c <HAL_RCC_ClockConfig+0x1bc>)
 800ba5a:	689b      	ldr	r3, [r3, #8]
 800ba5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	689b      	ldr	r3, [r3, #8]
 800ba64:	494d      	ldr	r1, [pc, #308]	; (800bb9c <HAL_RCC_ClockConfig+0x1bc>)
 800ba66:	4313      	orrs	r3, r2
 800ba68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	f003 0301 	and.w	r3, r3, #1
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d044      	beq.n	800bb00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	685b      	ldr	r3, [r3, #4]
 800ba7a:	2b01      	cmp	r3, #1
 800ba7c:	d107      	bne.n	800ba8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ba7e:	4b47      	ldr	r3, [pc, #284]	; (800bb9c <HAL_RCC_ClockConfig+0x1bc>)
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ba86:	2b00      	cmp	r3, #0
 800ba88:	d119      	bne.n	800babe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ba8a:	2301      	movs	r3, #1
 800ba8c:	e07f      	b.n	800bb8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	685b      	ldr	r3, [r3, #4]
 800ba92:	2b02      	cmp	r3, #2
 800ba94:	d003      	beq.n	800ba9e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ba9a:	2b03      	cmp	r3, #3
 800ba9c:	d107      	bne.n	800baae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ba9e:	4b3f      	ldr	r3, [pc, #252]	; (800bb9c <HAL_RCC_ClockConfig+0x1bc>)
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d109      	bne.n	800babe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800baaa:	2301      	movs	r3, #1
 800baac:	e06f      	b.n	800bb8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800baae:	4b3b      	ldr	r3, [pc, #236]	; (800bb9c <HAL_RCC_ClockConfig+0x1bc>)
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	f003 0302 	and.w	r3, r3, #2
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d101      	bne.n	800babe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800baba:	2301      	movs	r3, #1
 800babc:	e067      	b.n	800bb8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800babe:	4b37      	ldr	r3, [pc, #220]	; (800bb9c <HAL_RCC_ClockConfig+0x1bc>)
 800bac0:	689b      	ldr	r3, [r3, #8]
 800bac2:	f023 0203 	bic.w	r2, r3, #3
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	685b      	ldr	r3, [r3, #4]
 800baca:	4934      	ldr	r1, [pc, #208]	; (800bb9c <HAL_RCC_ClockConfig+0x1bc>)
 800bacc:	4313      	orrs	r3, r2
 800bace:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800bad0:	f7fd fcf0 	bl	80094b4 <HAL_GetTick>
 800bad4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bad6:	e00a      	b.n	800baee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bad8:	f7fd fcec 	bl	80094b4 <HAL_GetTick>
 800badc:	4602      	mov	r2, r0
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	1ad3      	subs	r3, r2, r3
 800bae2:	f241 3288 	movw	r2, #5000	; 0x1388
 800bae6:	4293      	cmp	r3, r2
 800bae8:	d901      	bls.n	800baee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800baea:	2303      	movs	r3, #3
 800baec:	e04f      	b.n	800bb8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800baee:	4b2b      	ldr	r3, [pc, #172]	; (800bb9c <HAL_RCC_ClockConfig+0x1bc>)
 800baf0:	689b      	ldr	r3, [r3, #8]
 800baf2:	f003 020c 	and.w	r2, r3, #12
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	685b      	ldr	r3, [r3, #4]
 800bafa:	009b      	lsls	r3, r3, #2
 800bafc:	429a      	cmp	r2, r3
 800bafe:	d1eb      	bne.n	800bad8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800bb00:	4b25      	ldr	r3, [pc, #148]	; (800bb98 <HAL_RCC_ClockConfig+0x1b8>)
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	f003 030f 	and.w	r3, r3, #15
 800bb08:	683a      	ldr	r2, [r7, #0]
 800bb0a:	429a      	cmp	r2, r3
 800bb0c:	d20c      	bcs.n	800bb28 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bb0e:	4b22      	ldr	r3, [pc, #136]	; (800bb98 <HAL_RCC_ClockConfig+0x1b8>)
 800bb10:	683a      	ldr	r2, [r7, #0]
 800bb12:	b2d2      	uxtb	r2, r2
 800bb14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800bb16:	4b20      	ldr	r3, [pc, #128]	; (800bb98 <HAL_RCC_ClockConfig+0x1b8>)
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	f003 030f 	and.w	r3, r3, #15
 800bb1e:	683a      	ldr	r2, [r7, #0]
 800bb20:	429a      	cmp	r2, r3
 800bb22:	d001      	beq.n	800bb28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800bb24:	2301      	movs	r3, #1
 800bb26:	e032      	b.n	800bb8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	f003 0304 	and.w	r3, r3, #4
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d008      	beq.n	800bb46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800bb34:	4b19      	ldr	r3, [pc, #100]	; (800bb9c <HAL_RCC_ClockConfig+0x1bc>)
 800bb36:	689b      	ldr	r3, [r3, #8]
 800bb38:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	68db      	ldr	r3, [r3, #12]
 800bb40:	4916      	ldr	r1, [pc, #88]	; (800bb9c <HAL_RCC_ClockConfig+0x1bc>)
 800bb42:	4313      	orrs	r3, r2
 800bb44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	f003 0308 	and.w	r3, r3, #8
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d009      	beq.n	800bb66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800bb52:	4b12      	ldr	r3, [pc, #72]	; (800bb9c <HAL_RCC_ClockConfig+0x1bc>)
 800bb54:	689b      	ldr	r3, [r3, #8]
 800bb56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	691b      	ldr	r3, [r3, #16]
 800bb5e:	00db      	lsls	r3, r3, #3
 800bb60:	490e      	ldr	r1, [pc, #56]	; (800bb9c <HAL_RCC_ClockConfig+0x1bc>)
 800bb62:	4313      	orrs	r3, r2
 800bb64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800bb66:	f000 f821 	bl	800bbac <HAL_RCC_GetSysClockFreq>
 800bb6a:	4601      	mov	r1, r0
 800bb6c:	4b0b      	ldr	r3, [pc, #44]	; (800bb9c <HAL_RCC_ClockConfig+0x1bc>)
 800bb6e:	689b      	ldr	r3, [r3, #8]
 800bb70:	091b      	lsrs	r3, r3, #4
 800bb72:	f003 030f 	and.w	r3, r3, #15
 800bb76:	4a0a      	ldr	r2, [pc, #40]	; (800bba0 <HAL_RCC_ClockConfig+0x1c0>)
 800bb78:	5cd3      	ldrb	r3, [r2, r3]
 800bb7a:	fa21 f303 	lsr.w	r3, r1, r3
 800bb7e:	4a09      	ldr	r2, [pc, #36]	; (800bba4 <HAL_RCC_ClockConfig+0x1c4>)
 800bb80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800bb82:	4b09      	ldr	r3, [pc, #36]	; (800bba8 <HAL_RCC_ClockConfig+0x1c8>)
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	4618      	mov	r0, r3
 800bb88:	f7fd fc50 	bl	800942c <HAL_InitTick>

  return HAL_OK;
 800bb8c:	2300      	movs	r3, #0
}
 800bb8e:	4618      	mov	r0, r3
 800bb90:	3710      	adds	r7, #16
 800bb92:	46bd      	mov	sp, r7
 800bb94:	bd80      	pop	{r7, pc}
 800bb96:	bf00      	nop
 800bb98:	40023c00 	.word	0x40023c00
 800bb9c:	40023800 	.word	0x40023800
 800bba0:	080199bc 	.word	0x080199bc
 800bba4:	20000000 	.word	0x20000000
 800bba8:	20000004 	.word	0x20000004

0800bbac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800bbac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bbae:	b085      	sub	sp, #20
 800bbb0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	607b      	str	r3, [r7, #4]
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	60fb      	str	r3, [r7, #12]
 800bbba:	2300      	movs	r3, #0
 800bbbc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800bbc2:	4b63      	ldr	r3, [pc, #396]	; (800bd50 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800bbc4:	689b      	ldr	r3, [r3, #8]
 800bbc6:	f003 030c 	and.w	r3, r3, #12
 800bbca:	2b04      	cmp	r3, #4
 800bbcc:	d007      	beq.n	800bbde <HAL_RCC_GetSysClockFreq+0x32>
 800bbce:	2b08      	cmp	r3, #8
 800bbd0:	d008      	beq.n	800bbe4 <HAL_RCC_GetSysClockFreq+0x38>
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	f040 80b4 	bne.w	800bd40 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800bbd8:	4b5e      	ldr	r3, [pc, #376]	; (800bd54 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800bbda:	60bb      	str	r3, [r7, #8]
       break;
 800bbdc:	e0b3      	b.n	800bd46 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800bbde:	4b5d      	ldr	r3, [pc, #372]	; (800bd54 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800bbe0:	60bb      	str	r3, [r7, #8]
      break;
 800bbe2:	e0b0      	b.n	800bd46 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800bbe4:	4b5a      	ldr	r3, [pc, #360]	; (800bd50 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800bbe6:	685b      	ldr	r3, [r3, #4]
 800bbe8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bbec:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800bbee:	4b58      	ldr	r3, [pc, #352]	; (800bd50 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800bbf0:	685b      	ldr	r3, [r3, #4]
 800bbf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d04a      	beq.n	800bc90 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800bbfa:	4b55      	ldr	r3, [pc, #340]	; (800bd50 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800bbfc:	685b      	ldr	r3, [r3, #4]
 800bbfe:	099b      	lsrs	r3, r3, #6
 800bc00:	f04f 0400 	mov.w	r4, #0
 800bc04:	f240 11ff 	movw	r1, #511	; 0x1ff
 800bc08:	f04f 0200 	mov.w	r2, #0
 800bc0c:	ea03 0501 	and.w	r5, r3, r1
 800bc10:	ea04 0602 	and.w	r6, r4, r2
 800bc14:	4629      	mov	r1, r5
 800bc16:	4632      	mov	r2, r6
 800bc18:	f04f 0300 	mov.w	r3, #0
 800bc1c:	f04f 0400 	mov.w	r4, #0
 800bc20:	0154      	lsls	r4, r2, #5
 800bc22:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800bc26:	014b      	lsls	r3, r1, #5
 800bc28:	4619      	mov	r1, r3
 800bc2a:	4622      	mov	r2, r4
 800bc2c:	1b49      	subs	r1, r1, r5
 800bc2e:	eb62 0206 	sbc.w	r2, r2, r6
 800bc32:	f04f 0300 	mov.w	r3, #0
 800bc36:	f04f 0400 	mov.w	r4, #0
 800bc3a:	0194      	lsls	r4, r2, #6
 800bc3c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800bc40:	018b      	lsls	r3, r1, #6
 800bc42:	1a5b      	subs	r3, r3, r1
 800bc44:	eb64 0402 	sbc.w	r4, r4, r2
 800bc48:	f04f 0100 	mov.w	r1, #0
 800bc4c:	f04f 0200 	mov.w	r2, #0
 800bc50:	00e2      	lsls	r2, r4, #3
 800bc52:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800bc56:	00d9      	lsls	r1, r3, #3
 800bc58:	460b      	mov	r3, r1
 800bc5a:	4614      	mov	r4, r2
 800bc5c:	195b      	adds	r3, r3, r5
 800bc5e:	eb44 0406 	adc.w	r4, r4, r6
 800bc62:	f04f 0100 	mov.w	r1, #0
 800bc66:	f04f 0200 	mov.w	r2, #0
 800bc6a:	02a2      	lsls	r2, r4, #10
 800bc6c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800bc70:	0299      	lsls	r1, r3, #10
 800bc72:	460b      	mov	r3, r1
 800bc74:	4614      	mov	r4, r2
 800bc76:	4618      	mov	r0, r3
 800bc78:	4621      	mov	r1, r4
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	f04f 0400 	mov.w	r4, #0
 800bc80:	461a      	mov	r2, r3
 800bc82:	4623      	mov	r3, r4
 800bc84:	f7f5 f818 	bl	8000cb8 <__aeabi_uldivmod>
 800bc88:	4603      	mov	r3, r0
 800bc8a:	460c      	mov	r4, r1
 800bc8c:	60fb      	str	r3, [r7, #12]
 800bc8e:	e049      	b.n	800bd24 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800bc90:	4b2f      	ldr	r3, [pc, #188]	; (800bd50 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800bc92:	685b      	ldr	r3, [r3, #4]
 800bc94:	099b      	lsrs	r3, r3, #6
 800bc96:	f04f 0400 	mov.w	r4, #0
 800bc9a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800bc9e:	f04f 0200 	mov.w	r2, #0
 800bca2:	ea03 0501 	and.w	r5, r3, r1
 800bca6:	ea04 0602 	and.w	r6, r4, r2
 800bcaa:	4629      	mov	r1, r5
 800bcac:	4632      	mov	r2, r6
 800bcae:	f04f 0300 	mov.w	r3, #0
 800bcb2:	f04f 0400 	mov.w	r4, #0
 800bcb6:	0154      	lsls	r4, r2, #5
 800bcb8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800bcbc:	014b      	lsls	r3, r1, #5
 800bcbe:	4619      	mov	r1, r3
 800bcc0:	4622      	mov	r2, r4
 800bcc2:	1b49      	subs	r1, r1, r5
 800bcc4:	eb62 0206 	sbc.w	r2, r2, r6
 800bcc8:	f04f 0300 	mov.w	r3, #0
 800bccc:	f04f 0400 	mov.w	r4, #0
 800bcd0:	0194      	lsls	r4, r2, #6
 800bcd2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800bcd6:	018b      	lsls	r3, r1, #6
 800bcd8:	1a5b      	subs	r3, r3, r1
 800bcda:	eb64 0402 	sbc.w	r4, r4, r2
 800bcde:	f04f 0100 	mov.w	r1, #0
 800bce2:	f04f 0200 	mov.w	r2, #0
 800bce6:	00e2      	lsls	r2, r4, #3
 800bce8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800bcec:	00d9      	lsls	r1, r3, #3
 800bcee:	460b      	mov	r3, r1
 800bcf0:	4614      	mov	r4, r2
 800bcf2:	195b      	adds	r3, r3, r5
 800bcf4:	eb44 0406 	adc.w	r4, r4, r6
 800bcf8:	f04f 0100 	mov.w	r1, #0
 800bcfc:	f04f 0200 	mov.w	r2, #0
 800bd00:	02a2      	lsls	r2, r4, #10
 800bd02:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800bd06:	0299      	lsls	r1, r3, #10
 800bd08:	460b      	mov	r3, r1
 800bd0a:	4614      	mov	r4, r2
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	4621      	mov	r1, r4
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	f04f 0400 	mov.w	r4, #0
 800bd16:	461a      	mov	r2, r3
 800bd18:	4623      	mov	r3, r4
 800bd1a:	f7f4 ffcd 	bl	8000cb8 <__aeabi_uldivmod>
 800bd1e:	4603      	mov	r3, r0
 800bd20:	460c      	mov	r4, r1
 800bd22:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800bd24:	4b0a      	ldr	r3, [pc, #40]	; (800bd50 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800bd26:	685b      	ldr	r3, [r3, #4]
 800bd28:	0c1b      	lsrs	r3, r3, #16
 800bd2a:	f003 0303 	and.w	r3, r3, #3
 800bd2e:	3301      	adds	r3, #1
 800bd30:	005b      	lsls	r3, r3, #1
 800bd32:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800bd34:	68fa      	ldr	r2, [r7, #12]
 800bd36:	683b      	ldr	r3, [r7, #0]
 800bd38:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd3c:	60bb      	str	r3, [r7, #8]
      break;
 800bd3e:	e002      	b.n	800bd46 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800bd40:	4b04      	ldr	r3, [pc, #16]	; (800bd54 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800bd42:	60bb      	str	r3, [r7, #8]
      break;
 800bd44:	bf00      	nop
    }
  }
  return sysclockfreq;
 800bd46:	68bb      	ldr	r3, [r7, #8]
}
 800bd48:	4618      	mov	r0, r3
 800bd4a:	3714      	adds	r7, #20
 800bd4c:	46bd      	mov	sp, r7
 800bd4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd50:	40023800 	.word	0x40023800
 800bd54:	00f42400 	.word	0x00f42400

0800bd58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800bd58:	b480      	push	{r7}
 800bd5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800bd5c:	4b03      	ldr	r3, [pc, #12]	; (800bd6c <HAL_RCC_GetHCLKFreq+0x14>)
 800bd5e:	681b      	ldr	r3, [r3, #0]
}
 800bd60:	4618      	mov	r0, r3
 800bd62:	46bd      	mov	sp, r7
 800bd64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd68:	4770      	bx	lr
 800bd6a:	bf00      	nop
 800bd6c:	20000000 	.word	0x20000000

0800bd70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800bd70:	b580      	push	{r7, lr}
 800bd72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800bd74:	f7ff fff0 	bl	800bd58 <HAL_RCC_GetHCLKFreq>
 800bd78:	4601      	mov	r1, r0
 800bd7a:	4b05      	ldr	r3, [pc, #20]	; (800bd90 <HAL_RCC_GetPCLK1Freq+0x20>)
 800bd7c:	689b      	ldr	r3, [r3, #8]
 800bd7e:	0a9b      	lsrs	r3, r3, #10
 800bd80:	f003 0307 	and.w	r3, r3, #7
 800bd84:	4a03      	ldr	r2, [pc, #12]	; (800bd94 <HAL_RCC_GetPCLK1Freq+0x24>)
 800bd86:	5cd3      	ldrb	r3, [r2, r3]
 800bd88:	fa21 f303 	lsr.w	r3, r1, r3
}
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	bd80      	pop	{r7, pc}
 800bd90:	40023800 	.word	0x40023800
 800bd94:	080199cc 	.word	0x080199cc

0800bd98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800bd9c:	f7ff ffdc 	bl	800bd58 <HAL_RCC_GetHCLKFreq>
 800bda0:	4601      	mov	r1, r0
 800bda2:	4b05      	ldr	r3, [pc, #20]	; (800bdb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 800bda4:	689b      	ldr	r3, [r3, #8]
 800bda6:	0b5b      	lsrs	r3, r3, #13
 800bda8:	f003 0307 	and.w	r3, r3, #7
 800bdac:	4a03      	ldr	r2, [pc, #12]	; (800bdbc <HAL_RCC_GetPCLK2Freq+0x24>)
 800bdae:	5cd3      	ldrb	r3, [r2, r3]
 800bdb0:	fa21 f303 	lsr.w	r3, r1, r3
}
 800bdb4:	4618      	mov	r0, r3
 800bdb6:	bd80      	pop	{r7, pc}
 800bdb8:	40023800 	.word	0x40023800
 800bdbc:	080199cc 	.word	0x080199cc

0800bdc0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800bdc0:	b580      	push	{r7, lr}
 800bdc2:	b088      	sub	sp, #32
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800bdc8:	2300      	movs	r3, #0
 800bdca:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 800bdcc:	2300      	movs	r3, #0
 800bdce:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 800bdd0:	2300      	movs	r3, #0
 800bdd2:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 800bdd8:	2300      	movs	r3, #0
 800bdda:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d00a      	beq.n	800bdfe <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800bde8:	4b66      	ldr	r3, [pc, #408]	; (800bf84 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800bdea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bdee:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bdf6:	4963      	ldr	r1, [pc, #396]	; (800bf84 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800bdf8:	4313      	orrs	r3, r2
 800bdfa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be06:	2b00      	cmp	r3, #0
 800be08:	d00a      	beq.n	800be20 <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800be0a:	4b5e      	ldr	r3, [pc, #376]	; (800bf84 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800be0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800be10:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be18:	495a      	ldr	r1, [pc, #360]	; (800bf84 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800be1a:	4313      	orrs	r3, r2
 800be1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	f003 0301 	and.w	r3, r3, #1
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d10b      	bne.n	800be44 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800be34:	2b00      	cmp	r3, #0
 800be36:	d105      	bne.n	800be44 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800be40:	2b00      	cmp	r3, #0
 800be42:	d075      	beq.n	800bf30 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800be44:	4b50      	ldr	r3, [pc, #320]	; (800bf88 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800be46:	2200      	movs	r2, #0
 800be48:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800be4a:	f7fd fb33 	bl	80094b4 <HAL_GetTick>
 800be4e:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800be50:	e008      	b.n	800be64 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800be52:	f7fd fb2f 	bl	80094b4 <HAL_GetTick>
 800be56:	4602      	mov	r2, r0
 800be58:	69fb      	ldr	r3, [r7, #28]
 800be5a:	1ad3      	subs	r3, r2, r3
 800be5c:	2b02      	cmp	r3, #2
 800be5e:	d901      	bls.n	800be64 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800be60:	2303      	movs	r3, #3
 800be62:	e1dc      	b.n	800c21e <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800be64:	4b47      	ldr	r3, [pc, #284]	; (800bf84 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d1f0      	bne.n	800be52 <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	f003 0301 	and.w	r3, r3, #1
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d009      	beq.n	800be90 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	685b      	ldr	r3, [r3, #4]
 800be80:	019a      	lsls	r2, r3, #6
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	689b      	ldr	r3, [r3, #8]
 800be86:	071b      	lsls	r3, r3, #28
 800be88:	493e      	ldr	r1, [pc, #248]	; (800bf84 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800be8a:	4313      	orrs	r3, r2
 800be8c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	f003 0302 	and.w	r3, r3, #2
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d01f      	beq.n	800bedc <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800be9c:	4b39      	ldr	r3, [pc, #228]	; (800bf84 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800be9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bea2:	0f1b      	lsrs	r3, r3, #28
 800bea4:	f003 0307 	and.w	r3, r3, #7
 800bea8:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	685b      	ldr	r3, [r3, #4]
 800beae:	019a      	lsls	r2, r3, #6
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	68db      	ldr	r3, [r3, #12]
 800beb4:	061b      	lsls	r3, r3, #24
 800beb6:	431a      	orrs	r2, r3
 800beb8:	69bb      	ldr	r3, [r7, #24]
 800beba:	071b      	lsls	r3, r3, #28
 800bebc:	4931      	ldr	r1, [pc, #196]	; (800bf84 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800bebe:	4313      	orrs	r3, r2
 800bec0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800bec4:	4b2f      	ldr	r3, [pc, #188]	; (800bf84 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800bec6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800beca:	f023 021f 	bic.w	r2, r3, #31
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	6a1b      	ldr	r3, [r3, #32]
 800bed2:	3b01      	subs	r3, #1
 800bed4:	492b      	ldr	r1, [pc, #172]	; (800bf84 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800bed6:	4313      	orrs	r3, r2
 800bed8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d00d      	beq.n	800bf04 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	685b      	ldr	r3, [r3, #4]
 800beec:	019a      	lsls	r2, r3, #6
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	68db      	ldr	r3, [r3, #12]
 800bef2:	061b      	lsls	r3, r3, #24
 800bef4:	431a      	orrs	r2, r3
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	689b      	ldr	r3, [r3, #8]
 800befa:	071b      	lsls	r3, r3, #28
 800befc:	4921      	ldr	r1, [pc, #132]	; (800bf84 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800befe:	4313      	orrs	r3, r2
 800bf00:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800bf04:	4b20      	ldr	r3, [pc, #128]	; (800bf88 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800bf06:	2201      	movs	r2, #1
 800bf08:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800bf0a:	f7fd fad3 	bl	80094b4 <HAL_GetTick>
 800bf0e:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800bf10:	e008      	b.n	800bf24 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800bf12:	f7fd facf 	bl	80094b4 <HAL_GetTick>
 800bf16:	4602      	mov	r2, r0
 800bf18:	69fb      	ldr	r3, [r7, #28]
 800bf1a:	1ad3      	subs	r3, r2, r3
 800bf1c:	2b02      	cmp	r3, #2
 800bf1e:	d901      	bls.n	800bf24 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800bf20:	2303      	movs	r3, #3
 800bf22:	e17c      	b.n	800c21e <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800bf24:	4b17      	ldr	r3, [pc, #92]	; (800bf84 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d0f0      	beq.n	800bf12 <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	f003 0304 	and.w	r3, r3, #4
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d112      	bne.n	800bf62 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d10c      	bne.n	800bf62 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	f000 80ce 	beq.w	800c0f2 <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800bf5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bf5e:	f040 80c8 	bne.w	800c0f2 <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800bf62:	4b0a      	ldr	r3, [pc, #40]	; (800bf8c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800bf64:	2200      	movs	r2, #0
 800bf66:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800bf68:	f7fd faa4 	bl	80094b4 <HAL_GetTick>
 800bf6c:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800bf6e:	e00f      	b.n	800bf90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800bf70:	f7fd faa0 	bl	80094b4 <HAL_GetTick>
 800bf74:	4602      	mov	r2, r0
 800bf76:	69fb      	ldr	r3, [r7, #28]
 800bf78:	1ad3      	subs	r3, r2, r3
 800bf7a:	2b02      	cmp	r3, #2
 800bf7c:	d908      	bls.n	800bf90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800bf7e:	2303      	movs	r3, #3
 800bf80:	e14d      	b.n	800c21e <HAL_RCCEx_PeriphCLKConfig+0x45e>
 800bf82:	bf00      	nop
 800bf84:	40023800 	.word	0x40023800
 800bf88:	42470068 	.word	0x42470068
 800bf8c:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800bf90:	4ba5      	ldr	r3, [pc, #660]	; (800c228 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bf98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf9c:	d0e8      	beq.n	800bf70 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	f003 0304 	and.w	r3, r3, #4
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d02e      	beq.n	800c008 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800bfaa:	4b9f      	ldr	r3, [pc, #636]	; (800c228 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800bfac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bfb0:	0c1b      	lsrs	r3, r3, #16
 800bfb2:	f003 0303 	and.w	r3, r3, #3
 800bfb6:	3301      	adds	r3, #1
 800bfb8:	005b      	lsls	r3, r3, #1
 800bfba:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800bfbc:	4b9a      	ldr	r3, [pc, #616]	; (800c228 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800bfbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bfc2:	0f1b      	lsrs	r3, r3, #28
 800bfc4:	f003 0307 	and.w	r3, r3, #7
 800bfc8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	691b      	ldr	r3, [r3, #16]
 800bfce:	019a      	lsls	r2, r3, #6
 800bfd0:	697b      	ldr	r3, [r7, #20]
 800bfd2:	085b      	lsrs	r3, r3, #1
 800bfd4:	3b01      	subs	r3, #1
 800bfd6:	041b      	lsls	r3, r3, #16
 800bfd8:	431a      	orrs	r2, r3
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	699b      	ldr	r3, [r3, #24]
 800bfde:	061b      	lsls	r3, r3, #24
 800bfe0:	431a      	orrs	r2, r3
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	071b      	lsls	r3, r3, #28
 800bfe6:	4990      	ldr	r1, [pc, #576]	; (800c228 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800bfe8:	4313      	orrs	r3, r2
 800bfea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800bfee:	4b8e      	ldr	r3, [pc, #568]	; (800c228 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800bff0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bff4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bffc:	3b01      	subs	r3, #1
 800bffe:	021b      	lsls	r3, r3, #8
 800c000:	4989      	ldr	r1, [pc, #548]	; (800c228 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c002:	4313      	orrs	r3, r2
 800c004:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	f003 0308 	and.w	r3, r3, #8
 800c010:	2b00      	cmp	r3, #0
 800c012:	d02c      	beq.n	800c06e <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800c014:	4b84      	ldr	r3, [pc, #528]	; (800c228 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c016:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c01a:	0c1b      	lsrs	r3, r3, #16
 800c01c:	f003 0303 	and.w	r3, r3, #3
 800c020:	3301      	adds	r3, #1
 800c022:	005b      	lsls	r3, r3, #1
 800c024:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c026:	4b80      	ldr	r3, [pc, #512]	; (800c228 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c028:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c02c:	0e1b      	lsrs	r3, r3, #24
 800c02e:	f003 030f 	and.w	r3, r3, #15
 800c032:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	691b      	ldr	r3, [r3, #16]
 800c038:	019a      	lsls	r2, r3, #6
 800c03a:	697b      	ldr	r3, [r7, #20]
 800c03c:	085b      	lsrs	r3, r3, #1
 800c03e:	3b01      	subs	r3, #1
 800c040:	041b      	lsls	r3, r3, #16
 800c042:	431a      	orrs	r2, r3
 800c044:	693b      	ldr	r3, [r7, #16]
 800c046:	061b      	lsls	r3, r3, #24
 800c048:	431a      	orrs	r2, r3
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	69db      	ldr	r3, [r3, #28]
 800c04e:	071b      	lsls	r3, r3, #28
 800c050:	4975      	ldr	r1, [pc, #468]	; (800c228 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c052:	4313      	orrs	r3, r2
 800c054:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800c058:	4b73      	ldr	r3, [pc, #460]	; (800c228 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c05a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c05e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c066:	4970      	ldr	r1, [pc, #448]	; (800c228 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c068:	4313      	orrs	r3, r2
 800c06a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c076:	2b00      	cmp	r3, #0
 800c078:	d024      	beq.n	800c0c4 <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800c07e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c082:	d11f      	bne.n	800c0c4 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c084:	4b68      	ldr	r3, [pc, #416]	; (800c228 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c08a:	0e1b      	lsrs	r3, r3, #24
 800c08c:	f003 030f 	and.w	r3, r3, #15
 800c090:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c092:	4b65      	ldr	r3, [pc, #404]	; (800c228 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c094:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c098:	0f1b      	lsrs	r3, r3, #28
 800c09a:	f003 0307 	and.w	r3, r3, #7
 800c09e:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	691b      	ldr	r3, [r3, #16]
 800c0a4:	019a      	lsls	r2, r3, #6
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	695b      	ldr	r3, [r3, #20]
 800c0aa:	085b      	lsrs	r3, r3, #1
 800c0ac:	3b01      	subs	r3, #1
 800c0ae:	041b      	lsls	r3, r3, #16
 800c0b0:	431a      	orrs	r2, r3
 800c0b2:	693b      	ldr	r3, [r7, #16]
 800c0b4:	061b      	lsls	r3, r3, #24
 800c0b6:	431a      	orrs	r2, r3
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	071b      	lsls	r3, r3, #28
 800c0bc:	495a      	ldr	r1, [pc, #360]	; (800c228 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c0be:	4313      	orrs	r3, r2
 800c0c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800c0c4:	4b59      	ldr	r3, [pc, #356]	; (800c22c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800c0c6:	2201      	movs	r2, #1
 800c0c8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c0ca:	f7fd f9f3 	bl	80094b4 <HAL_GetTick>
 800c0ce:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c0d0:	e008      	b.n	800c0e4 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800c0d2:	f7fd f9ef 	bl	80094b4 <HAL_GetTick>
 800c0d6:	4602      	mov	r2, r0
 800c0d8:	69fb      	ldr	r3, [r7, #28]
 800c0da:	1ad3      	subs	r3, r2, r3
 800c0dc:	2b02      	cmp	r3, #2
 800c0de:	d901      	bls.n	800c0e4 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c0e0:	2303      	movs	r3, #3
 800c0e2:	e09c      	b.n	800c21e <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c0e4:	4b50      	ldr	r3, [pc, #320]	; (800c228 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c0ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c0f0:	d1ef      	bne.n	800c0d2 <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	f003 0320 	and.w	r3, r3, #32
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	f000 8083 	beq.w	800c206 <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800c100:	2300      	movs	r3, #0
 800c102:	60bb      	str	r3, [r7, #8]
 800c104:	4b48      	ldr	r3, [pc, #288]	; (800c228 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c108:	4a47      	ldr	r2, [pc, #284]	; (800c228 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c10a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c10e:	6413      	str	r3, [r2, #64]	; 0x40
 800c110:	4b45      	ldr	r3, [pc, #276]	; (800c228 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c114:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c118:	60bb      	str	r3, [r7, #8]
 800c11a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800c11c:	4b44      	ldr	r3, [pc, #272]	; (800c230 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	4a43      	ldr	r2, [pc, #268]	; (800c230 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800c122:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c126:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c128:	f7fd f9c4 	bl	80094b4 <HAL_GetTick>
 800c12c:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800c12e:	e008      	b.n	800c142 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800c130:	f7fd f9c0 	bl	80094b4 <HAL_GetTick>
 800c134:	4602      	mov	r2, r0
 800c136:	69fb      	ldr	r3, [r7, #28]
 800c138:	1ad3      	subs	r3, r2, r3
 800c13a:	2b02      	cmp	r3, #2
 800c13c:	d901      	bls.n	800c142 <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 800c13e:	2303      	movs	r3, #3
 800c140:	e06d      	b.n	800c21e <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800c142:	4b3b      	ldr	r3, [pc, #236]	; (800c230 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d0f0      	beq.n	800c130 <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800c14e:	4b36      	ldr	r3, [pc, #216]	; (800c228 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c152:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c156:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800c158:	69bb      	ldr	r3, [r7, #24]
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d02f      	beq.n	800c1be <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c162:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c166:	69ba      	ldr	r2, [r7, #24]
 800c168:	429a      	cmp	r2, r3
 800c16a:	d028      	beq.n	800c1be <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c16c:	4b2e      	ldr	r3, [pc, #184]	; (800c228 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c16e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c170:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c174:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800c176:	4b2f      	ldr	r3, [pc, #188]	; (800c234 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800c178:	2201      	movs	r2, #1
 800c17a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800c17c:	4b2d      	ldr	r3, [pc, #180]	; (800c234 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800c17e:	2200      	movs	r2, #0
 800c180:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800c182:	4a29      	ldr	r2, [pc, #164]	; (800c228 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c184:	69bb      	ldr	r3, [r7, #24]
 800c186:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800c188:	4b27      	ldr	r3, [pc, #156]	; (800c228 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c18a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c18c:	f003 0301 	and.w	r3, r3, #1
 800c190:	2b01      	cmp	r3, #1
 800c192:	d114      	bne.n	800c1be <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800c194:	f7fd f98e 	bl	80094b4 <HAL_GetTick>
 800c198:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c19a:	e00a      	b.n	800c1b2 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c19c:	f7fd f98a 	bl	80094b4 <HAL_GetTick>
 800c1a0:	4602      	mov	r2, r0
 800c1a2:	69fb      	ldr	r3, [r7, #28]
 800c1a4:	1ad3      	subs	r3, r2, r3
 800c1a6:	f241 3288 	movw	r2, #5000	; 0x1388
 800c1aa:	4293      	cmp	r3, r2
 800c1ac:	d901      	bls.n	800c1b2 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 800c1ae:	2303      	movs	r3, #3
 800c1b0:	e035      	b.n	800c21e <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c1b2:	4b1d      	ldr	r3, [pc, #116]	; (800c228 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c1b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c1b6:	f003 0302 	and.w	r3, r3, #2
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d0ee      	beq.n	800c19c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c1c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c1ca:	d10d      	bne.n	800c1e8 <HAL_RCCEx_PeriphCLKConfig+0x428>
 800c1cc:	4b16      	ldr	r3, [pc, #88]	; (800c228 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c1ce:	689b      	ldr	r3, [r3, #8]
 800c1d0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1d8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c1dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c1e0:	4911      	ldr	r1, [pc, #68]	; (800c228 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c1e2:	4313      	orrs	r3, r2
 800c1e4:	608b      	str	r3, [r1, #8]
 800c1e6:	e005      	b.n	800c1f4 <HAL_RCCEx_PeriphCLKConfig+0x434>
 800c1e8:	4b0f      	ldr	r3, [pc, #60]	; (800c228 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c1ea:	689b      	ldr	r3, [r3, #8]
 800c1ec:	4a0e      	ldr	r2, [pc, #56]	; (800c228 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c1ee:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800c1f2:	6093      	str	r3, [r2, #8]
 800c1f4:	4b0c      	ldr	r3, [pc, #48]	; (800c228 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c1f6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c200:	4909      	ldr	r1, [pc, #36]	; (800c228 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c202:	4313      	orrs	r3, r2
 800c204:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	f003 0310 	and.w	r3, r3, #16
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d004      	beq.n	800c21c <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800c218:	4b07      	ldr	r3, [pc, #28]	; (800c238 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 800c21a:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800c21c:	2300      	movs	r3, #0
}
 800c21e:	4618      	mov	r0, r3
 800c220:	3720      	adds	r7, #32
 800c222:	46bd      	mov	sp, r7
 800c224:	bd80      	pop	{r7, pc}
 800c226:	bf00      	nop
 800c228:	40023800 	.word	0x40023800
 800c22c:	42470070 	.word	0x42470070
 800c230:	40007000 	.word	0x40007000
 800c234:	42470e40 	.word	0x42470e40
 800c238:	424711e0 	.word	0x424711e0

0800c23c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c23c:	b580      	push	{r7, lr}
 800c23e:	b086      	sub	sp, #24
 800c240:	af00      	add	r7, sp, #0
 800c242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c244:	2300      	movs	r3, #0
 800c246:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	f003 0301 	and.w	r3, r3, #1
 800c250:	2b00      	cmp	r3, #0
 800c252:	d075      	beq.n	800c340 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800c254:	4ba2      	ldr	r3, [pc, #648]	; (800c4e0 <HAL_RCC_OscConfig+0x2a4>)
 800c256:	689b      	ldr	r3, [r3, #8]
 800c258:	f003 030c 	and.w	r3, r3, #12
 800c25c:	2b04      	cmp	r3, #4
 800c25e:	d00c      	beq.n	800c27a <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c260:	4b9f      	ldr	r3, [pc, #636]	; (800c4e0 <HAL_RCC_OscConfig+0x2a4>)
 800c262:	689b      	ldr	r3, [r3, #8]
 800c264:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800c268:	2b08      	cmp	r3, #8
 800c26a:	d112      	bne.n	800c292 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c26c:	4b9c      	ldr	r3, [pc, #624]	; (800c4e0 <HAL_RCC_OscConfig+0x2a4>)
 800c26e:	685b      	ldr	r3, [r3, #4]
 800c270:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c274:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c278:	d10b      	bne.n	800c292 <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c27a:	4b99      	ldr	r3, [pc, #612]	; (800c4e0 <HAL_RCC_OscConfig+0x2a4>)
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c282:	2b00      	cmp	r3, #0
 800c284:	d05b      	beq.n	800c33e <HAL_RCC_OscConfig+0x102>
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	685b      	ldr	r3, [r3, #4]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d157      	bne.n	800c33e <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 800c28e:	2301      	movs	r3, #1
 800c290:	e20b      	b.n	800c6aa <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	685b      	ldr	r3, [r3, #4]
 800c296:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c29a:	d106      	bne.n	800c2aa <HAL_RCC_OscConfig+0x6e>
 800c29c:	4b90      	ldr	r3, [pc, #576]	; (800c4e0 <HAL_RCC_OscConfig+0x2a4>)
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	4a8f      	ldr	r2, [pc, #572]	; (800c4e0 <HAL_RCC_OscConfig+0x2a4>)
 800c2a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c2a6:	6013      	str	r3, [r2, #0]
 800c2a8:	e01d      	b.n	800c2e6 <HAL_RCC_OscConfig+0xaa>
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	685b      	ldr	r3, [r3, #4]
 800c2ae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c2b2:	d10c      	bne.n	800c2ce <HAL_RCC_OscConfig+0x92>
 800c2b4:	4b8a      	ldr	r3, [pc, #552]	; (800c4e0 <HAL_RCC_OscConfig+0x2a4>)
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	4a89      	ldr	r2, [pc, #548]	; (800c4e0 <HAL_RCC_OscConfig+0x2a4>)
 800c2ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c2be:	6013      	str	r3, [r2, #0]
 800c2c0:	4b87      	ldr	r3, [pc, #540]	; (800c4e0 <HAL_RCC_OscConfig+0x2a4>)
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	4a86      	ldr	r2, [pc, #536]	; (800c4e0 <HAL_RCC_OscConfig+0x2a4>)
 800c2c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c2ca:	6013      	str	r3, [r2, #0]
 800c2cc:	e00b      	b.n	800c2e6 <HAL_RCC_OscConfig+0xaa>
 800c2ce:	4b84      	ldr	r3, [pc, #528]	; (800c4e0 <HAL_RCC_OscConfig+0x2a4>)
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	4a83      	ldr	r2, [pc, #524]	; (800c4e0 <HAL_RCC_OscConfig+0x2a4>)
 800c2d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c2d8:	6013      	str	r3, [r2, #0]
 800c2da:	4b81      	ldr	r3, [pc, #516]	; (800c4e0 <HAL_RCC_OscConfig+0x2a4>)
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	4a80      	ldr	r2, [pc, #512]	; (800c4e0 <HAL_RCC_OscConfig+0x2a4>)
 800c2e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c2e4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	685b      	ldr	r3, [r3, #4]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d013      	beq.n	800c316 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c2ee:	f7fd f8e1 	bl	80094b4 <HAL_GetTick>
 800c2f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c2f4:	e008      	b.n	800c308 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c2f6:	f7fd f8dd 	bl	80094b4 <HAL_GetTick>
 800c2fa:	4602      	mov	r2, r0
 800c2fc:	693b      	ldr	r3, [r7, #16]
 800c2fe:	1ad3      	subs	r3, r2, r3
 800c300:	2b64      	cmp	r3, #100	; 0x64
 800c302:	d901      	bls.n	800c308 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 800c304:	2303      	movs	r3, #3
 800c306:	e1d0      	b.n	800c6aa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c308:	4b75      	ldr	r3, [pc, #468]	; (800c4e0 <HAL_RCC_OscConfig+0x2a4>)
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c310:	2b00      	cmp	r3, #0
 800c312:	d0f0      	beq.n	800c2f6 <HAL_RCC_OscConfig+0xba>
 800c314:	e014      	b.n	800c340 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c316:	f7fd f8cd 	bl	80094b4 <HAL_GetTick>
 800c31a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c31c:	e008      	b.n	800c330 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c31e:	f7fd f8c9 	bl	80094b4 <HAL_GetTick>
 800c322:	4602      	mov	r2, r0
 800c324:	693b      	ldr	r3, [r7, #16]
 800c326:	1ad3      	subs	r3, r2, r3
 800c328:	2b64      	cmp	r3, #100	; 0x64
 800c32a:	d901      	bls.n	800c330 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 800c32c:	2303      	movs	r3, #3
 800c32e:	e1bc      	b.n	800c6aa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c330:	4b6b      	ldr	r3, [pc, #428]	; (800c4e0 <HAL_RCC_OscConfig+0x2a4>)
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d1f0      	bne.n	800c31e <HAL_RCC_OscConfig+0xe2>
 800c33c:	e000      	b.n	800c340 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c33e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	f003 0302 	and.w	r3, r3, #2
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d063      	beq.n	800c414 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800c34c:	4b64      	ldr	r3, [pc, #400]	; (800c4e0 <HAL_RCC_OscConfig+0x2a4>)
 800c34e:	689b      	ldr	r3, [r3, #8]
 800c350:	f003 030c 	and.w	r3, r3, #12
 800c354:	2b00      	cmp	r3, #0
 800c356:	d00b      	beq.n	800c370 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c358:	4b61      	ldr	r3, [pc, #388]	; (800c4e0 <HAL_RCC_OscConfig+0x2a4>)
 800c35a:	689b      	ldr	r3, [r3, #8]
 800c35c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800c360:	2b08      	cmp	r3, #8
 800c362:	d11c      	bne.n	800c39e <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c364:	4b5e      	ldr	r3, [pc, #376]	; (800c4e0 <HAL_RCC_OscConfig+0x2a4>)
 800c366:	685b      	ldr	r3, [r3, #4]
 800c368:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d116      	bne.n	800c39e <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c370:	4b5b      	ldr	r3, [pc, #364]	; (800c4e0 <HAL_RCC_OscConfig+0x2a4>)
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	f003 0302 	and.w	r3, r3, #2
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d005      	beq.n	800c388 <HAL_RCC_OscConfig+0x14c>
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	68db      	ldr	r3, [r3, #12]
 800c380:	2b01      	cmp	r3, #1
 800c382:	d001      	beq.n	800c388 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 800c384:	2301      	movs	r3, #1
 800c386:	e190      	b.n	800c6aa <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c388:	4b55      	ldr	r3, [pc, #340]	; (800c4e0 <HAL_RCC_OscConfig+0x2a4>)
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	691b      	ldr	r3, [r3, #16]
 800c394:	00db      	lsls	r3, r3, #3
 800c396:	4952      	ldr	r1, [pc, #328]	; (800c4e0 <HAL_RCC_OscConfig+0x2a4>)
 800c398:	4313      	orrs	r3, r2
 800c39a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c39c:	e03a      	b.n	800c414 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	68db      	ldr	r3, [r3, #12]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d020      	beq.n	800c3e8 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c3a6:	4b4f      	ldr	r3, [pc, #316]	; (800c4e4 <HAL_RCC_OscConfig+0x2a8>)
 800c3a8:	2201      	movs	r2, #1
 800c3aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c3ac:	f7fd f882 	bl	80094b4 <HAL_GetTick>
 800c3b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c3b2:	e008      	b.n	800c3c6 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c3b4:	f7fd f87e 	bl	80094b4 <HAL_GetTick>
 800c3b8:	4602      	mov	r2, r0
 800c3ba:	693b      	ldr	r3, [r7, #16]
 800c3bc:	1ad3      	subs	r3, r2, r3
 800c3be:	2b02      	cmp	r3, #2
 800c3c0:	d901      	bls.n	800c3c6 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800c3c2:	2303      	movs	r3, #3
 800c3c4:	e171      	b.n	800c6aa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c3c6:	4b46      	ldr	r3, [pc, #280]	; (800c4e0 <HAL_RCC_OscConfig+0x2a4>)
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	f003 0302 	and.w	r3, r3, #2
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d0f0      	beq.n	800c3b4 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c3d2:	4b43      	ldr	r3, [pc, #268]	; (800c4e0 <HAL_RCC_OscConfig+0x2a4>)
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	691b      	ldr	r3, [r3, #16]
 800c3de:	00db      	lsls	r3, r3, #3
 800c3e0:	493f      	ldr	r1, [pc, #252]	; (800c4e0 <HAL_RCC_OscConfig+0x2a4>)
 800c3e2:	4313      	orrs	r3, r2
 800c3e4:	600b      	str	r3, [r1, #0]
 800c3e6:	e015      	b.n	800c414 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c3e8:	4b3e      	ldr	r3, [pc, #248]	; (800c4e4 <HAL_RCC_OscConfig+0x2a8>)
 800c3ea:	2200      	movs	r2, #0
 800c3ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c3ee:	f7fd f861 	bl	80094b4 <HAL_GetTick>
 800c3f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c3f4:	e008      	b.n	800c408 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c3f6:	f7fd f85d 	bl	80094b4 <HAL_GetTick>
 800c3fa:	4602      	mov	r2, r0
 800c3fc:	693b      	ldr	r3, [r7, #16]
 800c3fe:	1ad3      	subs	r3, r2, r3
 800c400:	2b02      	cmp	r3, #2
 800c402:	d901      	bls.n	800c408 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800c404:	2303      	movs	r3, #3
 800c406:	e150      	b.n	800c6aa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c408:	4b35      	ldr	r3, [pc, #212]	; (800c4e0 <HAL_RCC_OscConfig+0x2a4>)
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	f003 0302 	and.w	r3, r3, #2
 800c410:	2b00      	cmp	r3, #0
 800c412:	d1f0      	bne.n	800c3f6 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	f003 0308 	and.w	r3, r3, #8
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d030      	beq.n	800c482 <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	695b      	ldr	r3, [r3, #20]
 800c424:	2b00      	cmp	r3, #0
 800c426:	d016      	beq.n	800c456 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c428:	4b2f      	ldr	r3, [pc, #188]	; (800c4e8 <HAL_RCC_OscConfig+0x2ac>)
 800c42a:	2201      	movs	r2, #1
 800c42c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c42e:	f7fd f841 	bl	80094b4 <HAL_GetTick>
 800c432:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c434:	e008      	b.n	800c448 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c436:	f7fd f83d 	bl	80094b4 <HAL_GetTick>
 800c43a:	4602      	mov	r2, r0
 800c43c:	693b      	ldr	r3, [r7, #16]
 800c43e:	1ad3      	subs	r3, r2, r3
 800c440:	2b02      	cmp	r3, #2
 800c442:	d901      	bls.n	800c448 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 800c444:	2303      	movs	r3, #3
 800c446:	e130      	b.n	800c6aa <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c448:	4b25      	ldr	r3, [pc, #148]	; (800c4e0 <HAL_RCC_OscConfig+0x2a4>)
 800c44a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c44c:	f003 0302 	and.w	r3, r3, #2
 800c450:	2b00      	cmp	r3, #0
 800c452:	d0f0      	beq.n	800c436 <HAL_RCC_OscConfig+0x1fa>
 800c454:	e015      	b.n	800c482 <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c456:	4b24      	ldr	r3, [pc, #144]	; (800c4e8 <HAL_RCC_OscConfig+0x2ac>)
 800c458:	2200      	movs	r2, #0
 800c45a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c45c:	f7fd f82a 	bl	80094b4 <HAL_GetTick>
 800c460:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c462:	e008      	b.n	800c476 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c464:	f7fd f826 	bl	80094b4 <HAL_GetTick>
 800c468:	4602      	mov	r2, r0
 800c46a:	693b      	ldr	r3, [r7, #16]
 800c46c:	1ad3      	subs	r3, r2, r3
 800c46e:	2b02      	cmp	r3, #2
 800c470:	d901      	bls.n	800c476 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 800c472:	2303      	movs	r3, #3
 800c474:	e119      	b.n	800c6aa <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c476:	4b1a      	ldr	r3, [pc, #104]	; (800c4e0 <HAL_RCC_OscConfig+0x2a4>)
 800c478:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c47a:	f003 0302 	and.w	r3, r3, #2
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d1f0      	bne.n	800c464 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	f003 0304 	and.w	r3, r3, #4
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	f000 809f 	beq.w	800c5ce <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c490:	2300      	movs	r3, #0
 800c492:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c494:	4b12      	ldr	r3, [pc, #72]	; (800c4e0 <HAL_RCC_OscConfig+0x2a4>)
 800c496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c498:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d10f      	bne.n	800c4c0 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	60fb      	str	r3, [r7, #12]
 800c4a4:	4b0e      	ldr	r3, [pc, #56]	; (800c4e0 <HAL_RCC_OscConfig+0x2a4>)
 800c4a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4a8:	4a0d      	ldr	r2, [pc, #52]	; (800c4e0 <HAL_RCC_OscConfig+0x2a4>)
 800c4aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c4ae:	6413      	str	r3, [r2, #64]	; 0x40
 800c4b0:	4b0b      	ldr	r3, [pc, #44]	; (800c4e0 <HAL_RCC_OscConfig+0x2a4>)
 800c4b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c4b8:	60fb      	str	r3, [r7, #12]
 800c4ba:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800c4bc:	2301      	movs	r3, #1
 800c4be:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c4c0:	4b0a      	ldr	r3, [pc, #40]	; (800c4ec <HAL_RCC_OscConfig+0x2b0>)
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d120      	bne.n	800c50e <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800c4cc:	4b07      	ldr	r3, [pc, #28]	; (800c4ec <HAL_RCC_OscConfig+0x2b0>)
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	4a06      	ldr	r2, [pc, #24]	; (800c4ec <HAL_RCC_OscConfig+0x2b0>)
 800c4d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c4d6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c4d8:	f7fc ffec 	bl	80094b4 <HAL_GetTick>
 800c4dc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c4de:	e010      	b.n	800c502 <HAL_RCC_OscConfig+0x2c6>
 800c4e0:	40023800 	.word	0x40023800
 800c4e4:	42470000 	.word	0x42470000
 800c4e8:	42470e80 	.word	0x42470e80
 800c4ec:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c4f0:	f7fc ffe0 	bl	80094b4 <HAL_GetTick>
 800c4f4:	4602      	mov	r2, r0
 800c4f6:	693b      	ldr	r3, [r7, #16]
 800c4f8:	1ad3      	subs	r3, r2, r3
 800c4fa:	2b02      	cmp	r3, #2
 800c4fc:	d901      	bls.n	800c502 <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 800c4fe:	2303      	movs	r3, #3
 800c500:	e0d3      	b.n	800c6aa <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c502:	4b6c      	ldr	r3, [pc, #432]	; (800c6b4 <HAL_RCC_OscConfig+0x478>)
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d0f0      	beq.n	800c4f0 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	689b      	ldr	r3, [r3, #8]
 800c512:	2b01      	cmp	r3, #1
 800c514:	d106      	bne.n	800c524 <HAL_RCC_OscConfig+0x2e8>
 800c516:	4b68      	ldr	r3, [pc, #416]	; (800c6b8 <HAL_RCC_OscConfig+0x47c>)
 800c518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c51a:	4a67      	ldr	r2, [pc, #412]	; (800c6b8 <HAL_RCC_OscConfig+0x47c>)
 800c51c:	f043 0301 	orr.w	r3, r3, #1
 800c520:	6713      	str	r3, [r2, #112]	; 0x70
 800c522:	e01c      	b.n	800c55e <HAL_RCC_OscConfig+0x322>
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	689b      	ldr	r3, [r3, #8]
 800c528:	2b05      	cmp	r3, #5
 800c52a:	d10c      	bne.n	800c546 <HAL_RCC_OscConfig+0x30a>
 800c52c:	4b62      	ldr	r3, [pc, #392]	; (800c6b8 <HAL_RCC_OscConfig+0x47c>)
 800c52e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c530:	4a61      	ldr	r2, [pc, #388]	; (800c6b8 <HAL_RCC_OscConfig+0x47c>)
 800c532:	f043 0304 	orr.w	r3, r3, #4
 800c536:	6713      	str	r3, [r2, #112]	; 0x70
 800c538:	4b5f      	ldr	r3, [pc, #380]	; (800c6b8 <HAL_RCC_OscConfig+0x47c>)
 800c53a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c53c:	4a5e      	ldr	r2, [pc, #376]	; (800c6b8 <HAL_RCC_OscConfig+0x47c>)
 800c53e:	f043 0301 	orr.w	r3, r3, #1
 800c542:	6713      	str	r3, [r2, #112]	; 0x70
 800c544:	e00b      	b.n	800c55e <HAL_RCC_OscConfig+0x322>
 800c546:	4b5c      	ldr	r3, [pc, #368]	; (800c6b8 <HAL_RCC_OscConfig+0x47c>)
 800c548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c54a:	4a5b      	ldr	r2, [pc, #364]	; (800c6b8 <HAL_RCC_OscConfig+0x47c>)
 800c54c:	f023 0301 	bic.w	r3, r3, #1
 800c550:	6713      	str	r3, [r2, #112]	; 0x70
 800c552:	4b59      	ldr	r3, [pc, #356]	; (800c6b8 <HAL_RCC_OscConfig+0x47c>)
 800c554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c556:	4a58      	ldr	r2, [pc, #352]	; (800c6b8 <HAL_RCC_OscConfig+0x47c>)
 800c558:	f023 0304 	bic.w	r3, r3, #4
 800c55c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	689b      	ldr	r3, [r3, #8]
 800c562:	2b00      	cmp	r3, #0
 800c564:	d015      	beq.n	800c592 <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c566:	f7fc ffa5 	bl	80094b4 <HAL_GetTick>
 800c56a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c56c:	e00a      	b.n	800c584 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c56e:	f7fc ffa1 	bl	80094b4 <HAL_GetTick>
 800c572:	4602      	mov	r2, r0
 800c574:	693b      	ldr	r3, [r7, #16]
 800c576:	1ad3      	subs	r3, r2, r3
 800c578:	f241 3288 	movw	r2, #5000	; 0x1388
 800c57c:	4293      	cmp	r3, r2
 800c57e:	d901      	bls.n	800c584 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 800c580:	2303      	movs	r3, #3
 800c582:	e092      	b.n	800c6aa <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c584:	4b4c      	ldr	r3, [pc, #304]	; (800c6b8 <HAL_RCC_OscConfig+0x47c>)
 800c586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c588:	f003 0302 	and.w	r3, r3, #2
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d0ee      	beq.n	800c56e <HAL_RCC_OscConfig+0x332>
 800c590:	e014      	b.n	800c5bc <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c592:	f7fc ff8f 	bl	80094b4 <HAL_GetTick>
 800c596:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c598:	e00a      	b.n	800c5b0 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c59a:	f7fc ff8b 	bl	80094b4 <HAL_GetTick>
 800c59e:	4602      	mov	r2, r0
 800c5a0:	693b      	ldr	r3, [r7, #16]
 800c5a2:	1ad3      	subs	r3, r2, r3
 800c5a4:	f241 3288 	movw	r2, #5000	; 0x1388
 800c5a8:	4293      	cmp	r3, r2
 800c5aa:	d901      	bls.n	800c5b0 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 800c5ac:	2303      	movs	r3, #3
 800c5ae:	e07c      	b.n	800c6aa <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c5b0:	4b41      	ldr	r3, [pc, #260]	; (800c6b8 <HAL_RCC_OscConfig+0x47c>)
 800c5b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5b4:	f003 0302 	and.w	r3, r3, #2
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d1ee      	bne.n	800c59a <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c5bc:	7dfb      	ldrb	r3, [r7, #23]
 800c5be:	2b01      	cmp	r3, #1
 800c5c0:	d105      	bne.n	800c5ce <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c5c2:	4b3d      	ldr	r3, [pc, #244]	; (800c6b8 <HAL_RCC_OscConfig+0x47c>)
 800c5c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5c6:	4a3c      	ldr	r2, [pc, #240]	; (800c6b8 <HAL_RCC_OscConfig+0x47c>)
 800c5c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c5cc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	699b      	ldr	r3, [r3, #24]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d068      	beq.n	800c6a8 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800c5d6:	4b38      	ldr	r3, [pc, #224]	; (800c6b8 <HAL_RCC_OscConfig+0x47c>)
 800c5d8:	689b      	ldr	r3, [r3, #8]
 800c5da:	f003 030c 	and.w	r3, r3, #12
 800c5de:	2b08      	cmp	r3, #8
 800c5e0:	d060      	beq.n	800c6a4 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	699b      	ldr	r3, [r3, #24]
 800c5e6:	2b02      	cmp	r3, #2
 800c5e8:	d145      	bne.n	800c676 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c5ea:	4b34      	ldr	r3, [pc, #208]	; (800c6bc <HAL_RCC_OscConfig+0x480>)
 800c5ec:	2200      	movs	r2, #0
 800c5ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c5f0:	f7fc ff60 	bl	80094b4 <HAL_GetTick>
 800c5f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c5f6:	e008      	b.n	800c60a <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c5f8:	f7fc ff5c 	bl	80094b4 <HAL_GetTick>
 800c5fc:	4602      	mov	r2, r0
 800c5fe:	693b      	ldr	r3, [r7, #16]
 800c600:	1ad3      	subs	r3, r2, r3
 800c602:	2b02      	cmp	r3, #2
 800c604:	d901      	bls.n	800c60a <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 800c606:	2303      	movs	r3, #3
 800c608:	e04f      	b.n	800c6aa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c60a:	4b2b      	ldr	r3, [pc, #172]	; (800c6b8 <HAL_RCC_OscConfig+0x47c>)
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c612:	2b00      	cmp	r3, #0
 800c614:	d1f0      	bne.n	800c5f8 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	69da      	ldr	r2, [r3, #28]
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	6a1b      	ldr	r3, [r3, #32]
 800c61e:	431a      	orrs	r2, r3
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c624:	019b      	lsls	r3, r3, #6
 800c626:	431a      	orrs	r2, r3
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c62c:	085b      	lsrs	r3, r3, #1
 800c62e:	3b01      	subs	r3, #1
 800c630:	041b      	lsls	r3, r3, #16
 800c632:	431a      	orrs	r2, r3
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c638:	061b      	lsls	r3, r3, #24
 800c63a:	431a      	orrs	r2, r3
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c640:	071b      	lsls	r3, r3, #28
 800c642:	491d      	ldr	r1, [pc, #116]	; (800c6b8 <HAL_RCC_OscConfig+0x47c>)
 800c644:	4313      	orrs	r3, r2
 800c646:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c648:	4b1c      	ldr	r3, [pc, #112]	; (800c6bc <HAL_RCC_OscConfig+0x480>)
 800c64a:	2201      	movs	r2, #1
 800c64c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c64e:	f7fc ff31 	bl	80094b4 <HAL_GetTick>
 800c652:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c654:	e008      	b.n	800c668 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c656:	f7fc ff2d 	bl	80094b4 <HAL_GetTick>
 800c65a:	4602      	mov	r2, r0
 800c65c:	693b      	ldr	r3, [r7, #16]
 800c65e:	1ad3      	subs	r3, r2, r3
 800c660:	2b02      	cmp	r3, #2
 800c662:	d901      	bls.n	800c668 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800c664:	2303      	movs	r3, #3
 800c666:	e020      	b.n	800c6aa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c668:	4b13      	ldr	r3, [pc, #76]	; (800c6b8 <HAL_RCC_OscConfig+0x47c>)
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c670:	2b00      	cmp	r3, #0
 800c672:	d0f0      	beq.n	800c656 <HAL_RCC_OscConfig+0x41a>
 800c674:	e018      	b.n	800c6a8 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c676:	4b11      	ldr	r3, [pc, #68]	; (800c6bc <HAL_RCC_OscConfig+0x480>)
 800c678:	2200      	movs	r2, #0
 800c67a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c67c:	f7fc ff1a 	bl	80094b4 <HAL_GetTick>
 800c680:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c682:	e008      	b.n	800c696 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c684:	f7fc ff16 	bl	80094b4 <HAL_GetTick>
 800c688:	4602      	mov	r2, r0
 800c68a:	693b      	ldr	r3, [r7, #16]
 800c68c:	1ad3      	subs	r3, r2, r3
 800c68e:	2b02      	cmp	r3, #2
 800c690:	d901      	bls.n	800c696 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800c692:	2303      	movs	r3, #3
 800c694:	e009      	b.n	800c6aa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c696:	4b08      	ldr	r3, [pc, #32]	; (800c6b8 <HAL_RCC_OscConfig+0x47c>)
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d1f0      	bne.n	800c684 <HAL_RCC_OscConfig+0x448>
 800c6a2:	e001      	b.n	800c6a8 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800c6a4:	2301      	movs	r3, #1
 800c6a6:	e000      	b.n	800c6aa <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800c6a8:	2300      	movs	r3, #0
}
 800c6aa:	4618      	mov	r0, r3
 800c6ac:	3718      	adds	r7, #24
 800c6ae:	46bd      	mov	sp, r7
 800c6b0:	bd80      	pop	{r7, pc}
 800c6b2:	bf00      	nop
 800c6b4:	40007000 	.word	0x40007000
 800c6b8:	40023800 	.word	0x40023800
 800c6bc:	42470060 	.word	0x42470060

0800c6c0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800c6c0:	b580      	push	{r7, lr}
 800c6c2:	b082      	sub	sp, #8
 800c6c4:	af00      	add	r7, sp, #0
 800c6c6:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d101      	bne.n	800c6d2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800c6ce:	2301      	movs	r3, #1
 800c6d0:	e022      	b.n	800c718 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c6d8:	b2db      	uxtb	r3, r3
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d105      	bne.n	800c6ea <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	2200      	movs	r2, #0
 800c6e2:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800c6e4:	6878      	ldr	r0, [r7, #4]
 800c6e6:	f7fa faab 	bl	8006c40 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	2203      	movs	r2, #3
 800c6ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800c6f2:	6878      	ldr	r0, [r7, #4]
 800c6f4:	f000 f814 	bl	800c720 <HAL_SD_InitCard>
 800c6f8:	4603      	mov	r3, r0
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d001      	beq.n	800c702 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800c6fe:	2301      	movs	r3, #1
 800c700:	e00a      	b.n	800c718 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	2200      	movs	r2, #0
 800c706:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	2200      	movs	r2, #0
 800c70c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	2201      	movs	r2, #1
 800c712:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800c716:	2300      	movs	r3, #0
}
 800c718:	4618      	mov	r0, r3
 800c71a:	3708      	adds	r7, #8
 800c71c:	46bd      	mov	sp, r7
 800c71e:	bd80      	pop	{r7, pc}

0800c720 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c720:	b5b0      	push	{r4, r5, r7, lr}
 800c722:	b08e      	sub	sp, #56	; 0x38
 800c724:	af04      	add	r7, sp, #16
 800c726:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800c728:	2300      	movs	r3, #0
 800c72a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800c72c:	2300      	movs	r3, #0
 800c72e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800c730:	2300      	movs	r3, #0
 800c732:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800c734:	2300      	movs	r3, #0
 800c736:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800c738:	2300      	movs	r3, #0
 800c73a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800c73c:	2376      	movs	r3, #118	; 0x76
 800c73e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	681d      	ldr	r5, [r3, #0]
 800c744:	466c      	mov	r4, sp
 800c746:	f107 0314 	add.w	r3, r7, #20
 800c74a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c74e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c752:	f107 0308 	add.w	r3, r7, #8
 800c756:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c758:	4628      	mov	r0, r5
 800c75a:	f003 fa87 	bl	800fc6c <SDIO_Init>
 800c75e:	4603      	mov	r3, r0
 800c760:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800c764:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d001      	beq.n	800c770 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800c76c:	2301      	movs	r3, #1
 800c76e:	e031      	b.n	800c7d4 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800c770:	4b1a      	ldr	r3, [pc, #104]	; (800c7dc <HAL_SD_InitCard+0xbc>)
 800c772:	2200      	movs	r2, #0
 800c774:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	4618      	mov	r0, r3
 800c77c:	f003 fabf 	bl	800fcfe <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800c780:	4b16      	ldr	r3, [pc, #88]	; (800c7dc <HAL_SD_InitCard+0xbc>)
 800c782:	2201      	movs	r2, #1
 800c784:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800c786:	6878      	ldr	r0, [r7, #4]
 800c788:	f000 ffc6 	bl	800d718 <SD_PowerON>
 800c78c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c78e:	6a3b      	ldr	r3, [r7, #32]
 800c790:	2b00      	cmp	r3, #0
 800c792:	d00b      	beq.n	800c7ac <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	2201      	movs	r2, #1
 800c798:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c7a0:	6a3b      	ldr	r3, [r7, #32]
 800c7a2:	431a      	orrs	r2, r3
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c7a8:	2301      	movs	r3, #1
 800c7aa:	e013      	b.n	800c7d4 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800c7ac:	6878      	ldr	r0, [r7, #4]
 800c7ae:	f000 fee5 	bl	800d57c <SD_InitCard>
 800c7b2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c7b4:	6a3b      	ldr	r3, [r7, #32]
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d00b      	beq.n	800c7d2 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	2201      	movs	r2, #1
 800c7be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c7c6:	6a3b      	ldr	r3, [r7, #32]
 800c7c8:	431a      	orrs	r2, r3
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c7ce:	2301      	movs	r3, #1
 800c7d0:	e000      	b.n	800c7d4 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800c7d2:	2300      	movs	r3, #0
}
 800c7d4:	4618      	mov	r0, r3
 800c7d6:	3728      	adds	r7, #40	; 0x28
 800c7d8:	46bd      	mov	sp, r7
 800c7da:	bdb0      	pop	{r4, r5, r7, pc}
 800c7dc:	422580a0 	.word	0x422580a0

0800c7e0 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800c7e0:	b580      	push	{r7, lr}
 800c7e2:	b08c      	sub	sp, #48	; 0x30
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	60f8      	str	r0, [r7, #12]
 800c7e8:	60b9      	str	r1, [r7, #8]
 800c7ea:	607a      	str	r2, [r7, #4]
 800c7ec:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800c7f2:	68bb      	ldr	r3, [r7, #8]
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d107      	bne.n	800c808 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c7fc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c804:	2301      	movs	r3, #1
 800c806:	e0c7      	b.n	800c998 <HAL_SD_ReadBlocks_DMA+0x1b8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c80e:	b2db      	uxtb	r3, r3
 800c810:	2b01      	cmp	r3, #1
 800c812:	f040 80c0 	bne.w	800c996 <HAL_SD_ReadBlocks_DMA+0x1b6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	2200      	movs	r2, #0
 800c81a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c81c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c81e:	683b      	ldr	r3, [r7, #0]
 800c820:	441a      	add	r2, r3
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c826:	429a      	cmp	r2, r3
 800c828:	d907      	bls.n	800c83a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c82e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800c836:	2301      	movs	r3, #1
 800c838:	e0ae      	b.n	800c998 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	2203      	movs	r2, #3
 800c83e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	2200      	movs	r2, #0
 800c848:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800c858:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c85e:	4a50      	ldr	r2, [pc, #320]	; (800c9a0 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800c860:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c866:	4a4f      	ldr	r2, [pc, #316]	; (800c9a4 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 800c868:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c86e:	2200      	movs	r2, #0
 800c870:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	3380      	adds	r3, #128	; 0x80
 800c87c:	4619      	mov	r1, r3
 800c87e:	68ba      	ldr	r2, [r7, #8]
 800c880:	683b      	ldr	r3, [r7, #0]
 800c882:	025b      	lsls	r3, r3, #9
 800c884:	089b      	lsrs	r3, r3, #2
 800c886:	f7fd fc07 	bl	800a098 <HAL_DMA_Start_IT>
 800c88a:	4603      	mov	r3, r0
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d017      	beq.n	800c8c0 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800c89e:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	4a40      	ldr	r2, [pc, #256]	; (800c9a8 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800c8a6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8ac:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c8b0:	68fb      	ldr	r3, [r7, #12]
 800c8b2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	2201      	movs	r2, #1
 800c8b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800c8bc:	2301      	movs	r3, #1
 800c8be:	e06b      	b.n	800c998 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800c8c0:	4b3a      	ldr	r3, [pc, #232]	; (800c9ac <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800c8c2:	2201      	movs	r2, #1
 800c8c4:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c8ca:	2b01      	cmp	r3, #1
 800c8cc:	d002      	beq.n	800c8d4 <HAL_SD_ReadBlocks_DMA+0xf4>
      {
        add *= 512U;
 800c8ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8d0:	025b      	lsls	r3, r3, #9
 800c8d2:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c8dc:	4618      	mov	r0, r3
 800c8de:	f003 faa1 	bl	800fe24 <SDMMC_CmdBlockLength>
 800c8e2:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 800c8e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d00f      	beq.n	800c90a <HAL_SD_ReadBlocks_DMA+0x12a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	4a2e      	ldr	r2, [pc, #184]	; (800c9a8 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800c8f0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c8f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8f8:	431a      	orrs	r2, r3
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	2201      	movs	r2, #1
 800c902:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800c906:	2301      	movs	r3, #1
 800c908:	e046      	b.n	800c998 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c90a:	f04f 33ff 	mov.w	r3, #4294967295
 800c90e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800c910:	683b      	ldr	r3, [r7, #0]
 800c912:	025b      	lsls	r3, r3, #9
 800c914:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800c916:	2390      	movs	r3, #144	; 0x90
 800c918:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800c91a:	2302      	movs	r3, #2
 800c91c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800c91e:	2300      	movs	r3, #0
 800c920:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800c922:	2301      	movs	r3, #1
 800c924:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	f107 0210 	add.w	r2, r7, #16
 800c92e:	4611      	mov	r1, r2
 800c930:	4618      	mov	r0, r3
 800c932:	f003 fa4b 	bl	800fdcc <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800c936:	683b      	ldr	r3, [r7, #0]
 800c938:	2b01      	cmp	r3, #1
 800c93a:	d90a      	bls.n	800c952 <HAL_SD_ReadBlocks_DMA+0x172>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	2282      	movs	r2, #130	; 0x82
 800c940:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c948:	4618      	mov	r0, r3
 800c94a:	f003 faaf 	bl	800feac <SDMMC_CmdReadMultiBlock>
 800c94e:	62f8      	str	r0, [r7, #44]	; 0x2c
 800c950:	e009      	b.n	800c966 <HAL_SD_ReadBlocks_DMA+0x186>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	2281      	movs	r2, #129	; 0x81
 800c956:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c95e:	4618      	mov	r0, r3
 800c960:	f003 fa82 	bl	800fe68 <SDMMC_CmdReadSingleBlock>
 800c964:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800c966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d012      	beq.n	800c992 <HAL_SD_ReadBlocks_DMA+0x1b2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	4a0d      	ldr	r2, [pc, #52]	; (800c9a8 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800c972:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c97a:	431a      	orrs	r2, r3
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	2201      	movs	r2, #1
 800c984:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	2200      	movs	r2, #0
 800c98c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800c98e:	2301      	movs	r3, #1
 800c990:	e002      	b.n	800c998 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      return HAL_OK;
 800c992:	2300      	movs	r3, #0
 800c994:	e000      	b.n	800c998 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
  }
  else
  {
    return HAL_BUSY;
 800c996:	2302      	movs	r3, #2
  }
}
 800c998:	4618      	mov	r0, r3
 800c99a:	3730      	adds	r7, #48	; 0x30
 800c99c:	46bd      	mov	sp, r7
 800c99e:	bd80      	pop	{r7, pc}
 800c9a0:	0800d38b 	.word	0x0800d38b
 800c9a4:	0800d3fd 	.word	0x0800d3fd
 800c9a8:	004005ff 	.word	0x004005ff
 800c9ac:	4225858c 	.word	0x4225858c

0800c9b0 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800c9b0:	b580      	push	{r7, lr}
 800c9b2:	b08c      	sub	sp, #48	; 0x30
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	60f8      	str	r0, [r7, #12]
 800c9b8:	60b9      	str	r1, [r7, #8]
 800c9ba:	607a      	str	r2, [r7, #4]
 800c9bc:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800c9c2:	68bb      	ldr	r3, [r7, #8]
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d107      	bne.n	800c9d8 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9cc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800c9d4:	2301      	movs	r3, #1
 800c9d6:	e0ca      	b.n	800cb6e <HAL_SD_WriteBlocks_DMA+0x1be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c9de:	b2db      	uxtb	r3, r3
 800c9e0:	2b01      	cmp	r3, #1
 800c9e2:	f040 80c3 	bne.w	800cb6c <HAL_SD_WriteBlocks_DMA+0x1bc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	2200      	movs	r2, #0
 800c9ea:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800c9ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c9ee:	683b      	ldr	r3, [r7, #0]
 800c9f0:	441a      	add	r2, r3
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c9f6:	429a      	cmp	r2, r3
 800c9f8:	d907      	bls.n	800ca0a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9fe:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800ca06:	2301      	movs	r3, #1
 800ca08:	e0b1      	b.n	800cb6e <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	2203      	movs	r2, #3
 800ca0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	2200      	movs	r2, #0
 800ca18:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	f042 021a 	orr.w	r2, r2, #26
 800ca28:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca2e:	4a52      	ldr	r2, [pc, #328]	; (800cb78 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800ca30:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca36:	4a51      	ldr	r2, [pc, #324]	; (800cb7c <HAL_SD_WriteBlocks_DMA+0x1cc>)
 800ca38:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca3e:	2200      	movs	r2, #0
 800ca40:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca46:	2b01      	cmp	r3, #1
 800ca48:	d002      	beq.n	800ca50 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800ca4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca4c:	025b      	lsls	r3, r3, #9
 800ca4e:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ca58:	4618      	mov	r0, r3
 800ca5a:	f003 f9e3 	bl	800fe24 <SDMMC_CmdBlockLength>
 800ca5e:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800ca60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d00f      	beq.n	800ca86 <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	4a45      	ldr	r2, [pc, #276]	; (800cb80 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800ca6c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ca72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca74:	431a      	orrs	r2, r3
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	2201      	movs	r2, #1
 800ca7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800ca82:	2301      	movs	r3, #1
 800ca84:	e073      	b.n	800cb6e <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800ca86:	683b      	ldr	r3, [r7, #0]
 800ca88:	2b01      	cmp	r3, #1
 800ca8a:	d90a      	bls.n	800caa2 <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	22a0      	movs	r2, #160	; 0xa0
 800ca90:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ca98:	4618      	mov	r0, r3
 800ca9a:	f003 fa4b 	bl	800ff34 <SDMMC_CmdWriteMultiBlock>
 800ca9e:	62f8      	str	r0, [r7, #44]	; 0x2c
 800caa0:	e009      	b.n	800cab6 <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	2290      	movs	r2, #144	; 0x90
 800caa6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800caae:	4618      	mov	r0, r3
 800cab0:	f003 fa1e 	bl	800fef0 <SDMMC_CmdWriteSingleBlock>
 800cab4:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800cab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d012      	beq.n	800cae2 <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	4a2f      	ldr	r2, [pc, #188]	; (800cb80 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800cac2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caca:	431a      	orrs	r2, r3
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	2201      	movs	r2, #1
 800cad4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	2200      	movs	r2, #0
 800cadc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800cade:	2301      	movs	r3, #1
 800cae0:	e045      	b.n	800cb6e <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800cae2:	4b28      	ldr	r3, [pc, #160]	; (800cb84 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800cae4:	2201      	movs	r2, #1
 800cae6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800caec:	68b9      	ldr	r1, [r7, #8]
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	3380      	adds	r3, #128	; 0x80
 800caf4:	461a      	mov	r2, r3
 800caf6:	683b      	ldr	r3, [r7, #0]
 800caf8:	025b      	lsls	r3, r3, #9
 800cafa:	089b      	lsrs	r3, r3, #2
 800cafc:	f7fd facc 	bl	800a098 <HAL_DMA_Start_IT>
 800cb00:	4603      	mov	r3, r0
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d01a      	beq.n	800cb3c <HAL_SD_WriteBlocks_DMA+0x18c>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	f022 021a 	bic.w	r2, r2, #26
 800cb14:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	4a19      	ldr	r2, [pc, #100]	; (800cb80 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800cb1c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb22:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	2201      	movs	r2, #1
 800cb2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	2200      	movs	r2, #0
 800cb36:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800cb38:	2301      	movs	r3, #1
 800cb3a:	e018      	b.n	800cb6e <HAL_SD_WriteBlocks_DMA+0x1be>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800cb3c:	f04f 33ff 	mov.w	r3, #4294967295
 800cb40:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800cb42:	683b      	ldr	r3, [r7, #0]
 800cb44:	025b      	lsls	r3, r3, #9
 800cb46:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800cb48:	2390      	movs	r3, #144	; 0x90
 800cb4a:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800cb4c:	2300      	movs	r3, #0
 800cb4e:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800cb50:	2300      	movs	r3, #0
 800cb52:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800cb54:	2301      	movs	r3, #1
 800cb56:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	f107 0210 	add.w	r2, r7, #16
 800cb60:	4611      	mov	r1, r2
 800cb62:	4618      	mov	r0, r3
 800cb64:	f003 f932 	bl	800fdcc <SDIO_ConfigData>

      return HAL_OK;
 800cb68:	2300      	movs	r3, #0
 800cb6a:	e000      	b.n	800cb6e <HAL_SD_WriteBlocks_DMA+0x1be>
    }
  }
  else
  {
    return HAL_BUSY;
 800cb6c:	2302      	movs	r3, #2
  }
}
 800cb6e:	4618      	mov	r0, r3
 800cb70:	3730      	adds	r7, #48	; 0x30
 800cb72:	46bd      	mov	sp, r7
 800cb74:	bd80      	pop	{r7, pc}
 800cb76:	bf00      	nop
 800cb78:	0800d361 	.word	0x0800d361
 800cb7c:	0800d3fd 	.word	0x0800d3fd
 800cb80:	004005ff 	.word	0x004005ff
 800cb84:	4225858c 	.word	0x4225858c

0800cb88 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800cb88:	b580      	push	{r7, lr}
 800cb8a:	b084      	sub	sp, #16
 800cb8c:	af00      	add	r7, sp, #0
 800cb8e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb94:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d008      	beq.n	800cbb6 <HAL_SD_IRQHandler+0x2e>
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	f003 0308 	and.w	r3, r3, #8
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d003      	beq.n	800cbb6 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800cbae:	6878      	ldr	r0, [r7, #4]
 800cbb0:	f000 ffc8 	bl	800db44 <SD_Read_IT>
 800cbb4:	e155      	b.n	800ce62 <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cbbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	f000 808f 	beq.w	800cce4 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cbce:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cbd6:	687a      	ldr	r2, [r7, #4]
 800cbd8:	6812      	ldr	r2, [r2, #0]
 800cbda:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800cbde:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800cbe2:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	f022 0201 	bic.w	r2, r2, #1
 800cbf2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	f003 0308 	and.w	r3, r3, #8
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d039      	beq.n	800cc72 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	f003 0302 	and.w	r3, r3, #2
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d104      	bne.n	800cc12 <HAL_SD_IRQHandler+0x8a>
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	f003 0320 	and.w	r3, r3, #32
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d011      	beq.n	800cc36 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	4618      	mov	r0, r3
 800cc18:	f003 f9ae 	bl	800ff78 <SDMMC_CmdStopTransfer>
 800cc1c:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800cc1e:	68bb      	ldr	r3, [r7, #8]
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d008      	beq.n	800cc36 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cc28:	68bb      	ldr	r3, [r7, #8]
 800cc2a:	431a      	orrs	r2, r3
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800cc30:	6878      	ldr	r0, [r7, #4]
 800cc32:	f000 f91f 	bl	800ce74 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	f240 523a 	movw	r2, #1338	; 0x53a
 800cc3e:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	2201      	movs	r2, #1
 800cc44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	2200      	movs	r2, #0
 800cc4c:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	f003 0301 	and.w	r3, r3, #1
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d104      	bne.n	800cc62 <HAL_SD_IRQHandler+0xda>
 800cc58:	68fb      	ldr	r3, [r7, #12]
 800cc5a:	f003 0302 	and.w	r3, r3, #2
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d003      	beq.n	800cc6a <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800cc62:	6878      	ldr	r0, [r7, #4]
 800cc64:	f003 fe04 	bl	8010870 <HAL_SD_RxCpltCallback>
 800cc68:	e0fb      	b.n	800ce62 <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800cc6a:	6878      	ldr	r0, [r7, #4]
 800cc6c:	f003 fdf6 	bl	801085c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800cc70:	e0f7      	b.n	800ce62 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	f000 80f2 	beq.w	800ce62 <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	f003 0320 	and.w	r3, r3, #32
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d011      	beq.n	800ccac <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	f003 f973 	bl	800ff78 <SDMMC_CmdStopTransfer>
 800cc92:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800cc94:	68bb      	ldr	r3, [r7, #8]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d008      	beq.n	800ccac <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cc9e:	68bb      	ldr	r3, [r7, #8]
 800cca0:	431a      	orrs	r2, r3
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800cca6:	6878      	ldr	r0, [r7, #4]
 800cca8:	f000 f8e4 	bl	800ce74 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800ccac:	68fb      	ldr	r3, [r7, #12]
 800ccae:	f003 0301 	and.w	r3, r3, #1
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	f040 80d5 	bne.w	800ce62 <HAL_SD_IRQHandler+0x2da>
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	f003 0302 	and.w	r3, r3, #2
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	f040 80cf 	bne.w	800ce62 <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	f022 0208 	bic.w	r2, r2, #8
 800ccd2:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	2201      	movs	r2, #1
 800ccd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800ccdc:	6878      	ldr	r0, [r7, #4]
 800ccde:	f003 fdbd 	bl	801085c <HAL_SD_TxCpltCallback>
}
 800cce2:	e0be      	b.n	800ce62 <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ccea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d008      	beq.n	800cd04 <HAL_SD_IRQHandler+0x17c>
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	f003 0308 	and.w	r3, r3, #8
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d003      	beq.n	800cd04 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800ccfc:	6878      	ldr	r0, [r7, #4]
 800ccfe:	f000 ff72 	bl	800dbe6 <SD_Write_IT>
 800cd02:	e0ae      	b.n	800ce62 <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd0a:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	f000 80a7 	beq.w	800ce62 <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd1a:	f003 0302 	and.w	r3, r3, #2
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d005      	beq.n	800cd2e <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd26:	f043 0202 	orr.w	r2, r3, #2
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd34:	f003 0308 	and.w	r3, r3, #8
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d005      	beq.n	800cd48 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd40:	f043 0208 	orr.w	r2, r3, #8
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd4e:	f003 0320 	and.w	r3, r3, #32
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d005      	beq.n	800cd62 <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd5a:	f043 0220 	orr.w	r2, r3, #32
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd68:	f003 0310 	and.w	r3, r3, #16
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d005      	beq.n	800cd7c <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd74:	f043 0210 	orr.w	r2, r3, #16
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	f240 523a 	movw	r2, #1338	; 0x53a
 800cd84:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800cd94:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	f003 f8ec 	bl	800ff78 <SDMMC_CmdStopTransfer>
 800cda0:	4602      	mov	r2, r0
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cda6:	431a      	orrs	r2, r3
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	f003 0308 	and.w	r3, r3, #8
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d00a      	beq.n	800cdcc <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	2201      	movs	r2, #1
 800cdba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	2200      	movs	r2, #0
 800cdc2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800cdc4:	6878      	ldr	r0, [r7, #4]
 800cdc6:	f000 f855 	bl	800ce74 <HAL_SD_ErrorCallback>
}
 800cdca:	e04a      	b.n	800ce62 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d045      	beq.n	800ce62 <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	f003 0310 	and.w	r3, r3, #16
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d104      	bne.n	800cdea <HAL_SD_IRQHandler+0x262>
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	f003 0320 	and.w	r3, r3, #32
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d011      	beq.n	800ce0e <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cdee:	4a1f      	ldr	r2, [pc, #124]	; (800ce6c <HAL_SD_IRQHandler+0x2e4>)
 800cdf0:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	f7fd f9a6 	bl	800a148 <HAL_DMA_Abort_IT>
 800cdfc:	4603      	mov	r3, r0
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d02f      	beq.n	800ce62 <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce06:	4618      	mov	r0, r3
 800ce08:	f000 fb4a 	bl	800d4a0 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800ce0c:	e029      	b.n	800ce62 <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	f003 0301 	and.w	r3, r3, #1
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d104      	bne.n	800ce22 <HAL_SD_IRQHandler+0x29a>
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	f003 0302 	and.w	r3, r3, #2
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d011      	beq.n	800ce46 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce26:	4a12      	ldr	r2, [pc, #72]	; (800ce70 <HAL_SD_IRQHandler+0x2e8>)
 800ce28:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce2e:	4618      	mov	r0, r3
 800ce30:	f7fd f98a 	bl	800a148 <HAL_DMA_Abort_IT>
 800ce34:	4603      	mov	r3, r0
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d013      	beq.n	800ce62 <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce3e:	4618      	mov	r0, r3
 800ce40:	f000 fb65 	bl	800d50e <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800ce44:	e00d      	b.n	800ce62 <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	2200      	movs	r2, #0
 800ce4a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	2201      	movs	r2, #1
 800ce50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	2200      	movs	r2, #0
 800ce58:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800ce5a:	6878      	ldr	r0, [r7, #4]
 800ce5c:	f003 fcf4 	bl	8010848 <HAL_SD_AbortCallback>
}
 800ce60:	e7ff      	b.n	800ce62 <HAL_SD_IRQHandler+0x2da>
 800ce62:	bf00      	nop
 800ce64:	3710      	adds	r7, #16
 800ce66:	46bd      	mov	sp, r7
 800ce68:	bd80      	pop	{r7, pc}
 800ce6a:	bf00      	nop
 800ce6c:	0800d4a1 	.word	0x0800d4a1
 800ce70:	0800d50f 	.word	0x0800d50f

0800ce74 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800ce74:	b480      	push	{r7}
 800ce76:	b083      	sub	sp, #12
 800ce78:	af00      	add	r7, sp, #0
 800ce7a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800ce7c:	bf00      	nop
 800ce7e:	370c      	adds	r7, #12
 800ce80:	46bd      	mov	sp, r7
 800ce82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce86:	4770      	bx	lr

0800ce88 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800ce88:	b480      	push	{r7}
 800ce8a:	b083      	sub	sp, #12
 800ce8c:	af00      	add	r7, sp, #0
 800ce8e:	6078      	str	r0, [r7, #4]
 800ce90:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ce96:	0f9b      	lsrs	r3, r3, #30
 800ce98:	b2da      	uxtb	r2, r3
 800ce9a:	683b      	ldr	r3, [r7, #0]
 800ce9c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cea2:	0e9b      	lsrs	r3, r3, #26
 800cea4:	b2db      	uxtb	r3, r3
 800cea6:	f003 030f 	and.w	r3, r3, #15
 800ceaa:	b2da      	uxtb	r2, r3
 800ceac:	683b      	ldr	r3, [r7, #0]
 800ceae:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ceb4:	0e1b      	lsrs	r3, r3, #24
 800ceb6:	b2db      	uxtb	r3, r3
 800ceb8:	f003 0303 	and.w	r3, r3, #3
 800cebc:	b2da      	uxtb	r2, r3
 800cebe:	683b      	ldr	r3, [r7, #0]
 800cec0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cec6:	0c1b      	lsrs	r3, r3, #16
 800cec8:	b2da      	uxtb	r2, r3
 800ceca:	683b      	ldr	r3, [r7, #0]
 800cecc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ced2:	0a1b      	lsrs	r3, r3, #8
 800ced4:	b2da      	uxtb	r2, r3
 800ced6:	683b      	ldr	r3, [r7, #0]
 800ced8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cede:	b2da      	uxtb	r2, r3
 800cee0:	683b      	ldr	r3, [r7, #0]
 800cee2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cee8:	0d1b      	lsrs	r3, r3, #20
 800ceea:	b29a      	uxth	r2, r3
 800ceec:	683b      	ldr	r3, [r7, #0]
 800ceee:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cef4:	0c1b      	lsrs	r3, r3, #16
 800cef6:	b2db      	uxtb	r3, r3
 800cef8:	f003 030f 	and.w	r3, r3, #15
 800cefc:	b2da      	uxtb	r2, r3
 800cefe:	683b      	ldr	r3, [r7, #0]
 800cf00:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cf06:	0bdb      	lsrs	r3, r3, #15
 800cf08:	b2db      	uxtb	r3, r3
 800cf0a:	f003 0301 	and.w	r3, r3, #1
 800cf0e:	b2da      	uxtb	r2, r3
 800cf10:	683b      	ldr	r3, [r7, #0]
 800cf12:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cf18:	0b9b      	lsrs	r3, r3, #14
 800cf1a:	b2db      	uxtb	r3, r3
 800cf1c:	f003 0301 	and.w	r3, r3, #1
 800cf20:	b2da      	uxtb	r2, r3
 800cf22:	683b      	ldr	r3, [r7, #0]
 800cf24:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cf2a:	0b5b      	lsrs	r3, r3, #13
 800cf2c:	b2db      	uxtb	r3, r3
 800cf2e:	f003 0301 	and.w	r3, r3, #1
 800cf32:	b2da      	uxtb	r2, r3
 800cf34:	683b      	ldr	r3, [r7, #0]
 800cf36:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cf3c:	0b1b      	lsrs	r3, r3, #12
 800cf3e:	b2db      	uxtb	r3, r3
 800cf40:	f003 0301 	and.w	r3, r3, #1
 800cf44:	b2da      	uxtb	r2, r3
 800cf46:	683b      	ldr	r3, [r7, #0]
 800cf48:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800cf4a:	683b      	ldr	r3, [r7, #0]
 800cf4c:	2200      	movs	r2, #0
 800cf4e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d163      	bne.n	800d020 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cf5c:	009a      	lsls	r2, r3, #2
 800cf5e:	f640 73fc 	movw	r3, #4092	; 0xffc
 800cf62:	4013      	ands	r3, r2
 800cf64:	687a      	ldr	r2, [r7, #4]
 800cf66:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800cf68:	0f92      	lsrs	r2, r2, #30
 800cf6a:	431a      	orrs	r2, r3
 800cf6c:	683b      	ldr	r3, [r7, #0]
 800cf6e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf74:	0edb      	lsrs	r3, r3, #27
 800cf76:	b2db      	uxtb	r3, r3
 800cf78:	f003 0307 	and.w	r3, r3, #7
 800cf7c:	b2da      	uxtb	r2, r3
 800cf7e:	683b      	ldr	r3, [r7, #0]
 800cf80:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf86:	0e1b      	lsrs	r3, r3, #24
 800cf88:	b2db      	uxtb	r3, r3
 800cf8a:	f003 0307 	and.w	r3, r3, #7
 800cf8e:	b2da      	uxtb	r2, r3
 800cf90:	683b      	ldr	r3, [r7, #0]
 800cf92:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf98:	0d5b      	lsrs	r3, r3, #21
 800cf9a:	b2db      	uxtb	r3, r3
 800cf9c:	f003 0307 	and.w	r3, r3, #7
 800cfa0:	b2da      	uxtb	r2, r3
 800cfa2:	683b      	ldr	r3, [r7, #0]
 800cfa4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cfaa:	0c9b      	lsrs	r3, r3, #18
 800cfac:	b2db      	uxtb	r3, r3
 800cfae:	f003 0307 	and.w	r3, r3, #7
 800cfb2:	b2da      	uxtb	r2, r3
 800cfb4:	683b      	ldr	r3, [r7, #0]
 800cfb6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cfbc:	0bdb      	lsrs	r3, r3, #15
 800cfbe:	b2db      	uxtb	r3, r3
 800cfc0:	f003 0307 	and.w	r3, r3, #7
 800cfc4:	b2da      	uxtb	r2, r3
 800cfc6:	683b      	ldr	r3, [r7, #0]
 800cfc8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800cfca:	683b      	ldr	r3, [r7, #0]
 800cfcc:	691b      	ldr	r3, [r3, #16]
 800cfce:	1c5a      	adds	r2, r3, #1
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800cfd4:	683b      	ldr	r3, [r7, #0]
 800cfd6:	7e1b      	ldrb	r3, [r3, #24]
 800cfd8:	b2db      	uxtb	r3, r3
 800cfda:	f003 0307 	and.w	r3, r3, #7
 800cfde:	3302      	adds	r3, #2
 800cfe0:	2201      	movs	r2, #1
 800cfe2:	fa02 f303 	lsl.w	r3, r2, r3
 800cfe6:	687a      	ldr	r2, [r7, #4]
 800cfe8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800cfea:	fb02 f203 	mul.w	r2, r2, r3
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800cff2:	683b      	ldr	r3, [r7, #0]
 800cff4:	7a1b      	ldrb	r3, [r3, #8]
 800cff6:	b2db      	uxtb	r3, r3
 800cff8:	f003 030f 	and.w	r3, r3, #15
 800cffc:	2201      	movs	r2, #1
 800cffe:	409a      	lsls	r2, r3
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d008:	687a      	ldr	r2, [r7, #4]
 800d00a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800d00c:	0a52      	lsrs	r2, r2, #9
 800d00e:	fb02 f203 	mul.w	r2, r2, r3
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d01c:	661a      	str	r2, [r3, #96]	; 0x60
 800d01e:	e031      	b.n	800d084 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d024:	2b01      	cmp	r3, #1
 800d026:	d11d      	bne.n	800d064 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d02c:	041b      	lsls	r3, r3, #16
 800d02e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d036:	0c1b      	lsrs	r3, r3, #16
 800d038:	431a      	orrs	r2, r3
 800d03a:	683b      	ldr	r3, [r7, #0]
 800d03c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800d03e:	683b      	ldr	r3, [r7, #0]
 800d040:	691b      	ldr	r3, [r3, #16]
 800d042:	3301      	adds	r3, #1
 800d044:	029a      	lsls	r2, r3, #10
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d058:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	661a      	str	r2, [r3, #96]	; 0x60
 800d062:	e00f      	b.n	800d084 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	4a58      	ldr	r2, [pc, #352]	; (800d1cc <HAL_SD_GetCardCSD+0x344>)
 800d06a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d070:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	2201      	movs	r2, #1
 800d07c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d080:	2301      	movs	r3, #1
 800d082:	e09d      	b.n	800d1c0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d088:	0b9b      	lsrs	r3, r3, #14
 800d08a:	b2db      	uxtb	r3, r3
 800d08c:	f003 0301 	and.w	r3, r3, #1
 800d090:	b2da      	uxtb	r2, r3
 800d092:	683b      	ldr	r3, [r7, #0]
 800d094:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d09a:	09db      	lsrs	r3, r3, #7
 800d09c:	b2db      	uxtb	r3, r3
 800d09e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d0a2:	b2da      	uxtb	r2, r3
 800d0a4:	683b      	ldr	r3, [r7, #0]
 800d0a6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d0ac:	b2db      	uxtb	r3, r3
 800d0ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d0b2:	b2da      	uxtb	r2, r3
 800d0b4:	683b      	ldr	r3, [r7, #0]
 800d0b6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d0bc:	0fdb      	lsrs	r3, r3, #31
 800d0be:	b2da      	uxtb	r2, r3
 800d0c0:	683b      	ldr	r3, [r7, #0]
 800d0c2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d0c8:	0f5b      	lsrs	r3, r3, #29
 800d0ca:	b2db      	uxtb	r3, r3
 800d0cc:	f003 0303 	and.w	r3, r3, #3
 800d0d0:	b2da      	uxtb	r2, r3
 800d0d2:	683b      	ldr	r3, [r7, #0]
 800d0d4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d0da:	0e9b      	lsrs	r3, r3, #26
 800d0dc:	b2db      	uxtb	r3, r3
 800d0de:	f003 0307 	and.w	r3, r3, #7
 800d0e2:	b2da      	uxtb	r2, r3
 800d0e4:	683b      	ldr	r3, [r7, #0]
 800d0e6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d0ec:	0d9b      	lsrs	r3, r3, #22
 800d0ee:	b2db      	uxtb	r3, r3
 800d0f0:	f003 030f 	and.w	r3, r3, #15
 800d0f4:	b2da      	uxtb	r2, r3
 800d0f6:	683b      	ldr	r3, [r7, #0]
 800d0f8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d0fe:	0d5b      	lsrs	r3, r3, #21
 800d100:	b2db      	uxtb	r3, r3
 800d102:	f003 0301 	and.w	r3, r3, #1
 800d106:	b2da      	uxtb	r2, r3
 800d108:	683b      	ldr	r3, [r7, #0]
 800d10a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800d10e:	683b      	ldr	r3, [r7, #0]
 800d110:	2200      	movs	r2, #0
 800d112:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d11a:	0c1b      	lsrs	r3, r3, #16
 800d11c:	b2db      	uxtb	r3, r3
 800d11e:	f003 0301 	and.w	r3, r3, #1
 800d122:	b2da      	uxtb	r2, r3
 800d124:	683b      	ldr	r3, [r7, #0]
 800d126:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d12e:	0bdb      	lsrs	r3, r3, #15
 800d130:	b2db      	uxtb	r3, r3
 800d132:	f003 0301 	and.w	r3, r3, #1
 800d136:	b2da      	uxtb	r2, r3
 800d138:	683b      	ldr	r3, [r7, #0]
 800d13a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d142:	0b9b      	lsrs	r3, r3, #14
 800d144:	b2db      	uxtb	r3, r3
 800d146:	f003 0301 	and.w	r3, r3, #1
 800d14a:	b2da      	uxtb	r2, r3
 800d14c:	683b      	ldr	r3, [r7, #0]
 800d14e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d156:	0b5b      	lsrs	r3, r3, #13
 800d158:	b2db      	uxtb	r3, r3
 800d15a:	f003 0301 	and.w	r3, r3, #1
 800d15e:	b2da      	uxtb	r2, r3
 800d160:	683b      	ldr	r3, [r7, #0]
 800d162:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d16a:	0b1b      	lsrs	r3, r3, #12
 800d16c:	b2db      	uxtb	r3, r3
 800d16e:	f003 0301 	and.w	r3, r3, #1
 800d172:	b2da      	uxtb	r2, r3
 800d174:	683b      	ldr	r3, [r7, #0]
 800d176:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d17e:	0a9b      	lsrs	r3, r3, #10
 800d180:	b2db      	uxtb	r3, r3
 800d182:	f003 0303 	and.w	r3, r3, #3
 800d186:	b2da      	uxtb	r2, r3
 800d188:	683b      	ldr	r3, [r7, #0]
 800d18a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d192:	0a1b      	lsrs	r3, r3, #8
 800d194:	b2db      	uxtb	r3, r3
 800d196:	f003 0303 	and.w	r3, r3, #3
 800d19a:	b2da      	uxtb	r2, r3
 800d19c:	683b      	ldr	r3, [r7, #0]
 800d19e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d1a6:	085b      	lsrs	r3, r3, #1
 800d1a8:	b2db      	uxtb	r3, r3
 800d1aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d1ae:	b2da      	uxtb	r2, r3
 800d1b0:	683b      	ldr	r3, [r7, #0]
 800d1b2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800d1b6:	683b      	ldr	r3, [r7, #0]
 800d1b8:	2201      	movs	r2, #1
 800d1ba:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800d1be:	2300      	movs	r3, #0
}
 800d1c0:	4618      	mov	r0, r3
 800d1c2:	370c      	adds	r7, #12
 800d1c4:	46bd      	mov	sp, r7
 800d1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ca:	4770      	bx	lr
 800d1cc:	004005ff 	.word	0x004005ff

0800d1d0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800d1d0:	b480      	push	{r7}
 800d1d2:	b083      	sub	sp, #12
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	6078      	str	r0, [r7, #4]
 800d1d8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d1de:	683b      	ldr	r3, [r7, #0]
 800d1e0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d1e6:	683b      	ldr	r3, [r7, #0]
 800d1e8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d1ee:	683b      	ldr	r3, [r7, #0]
 800d1f0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d1f6:	683b      	ldr	r3, [r7, #0]
 800d1f8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d1fe:	683b      	ldr	r3, [r7, #0]
 800d200:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d206:	683b      	ldr	r3, [r7, #0]
 800d208:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d20e:	683b      	ldr	r3, [r7, #0]
 800d210:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800d216:	683b      	ldr	r3, [r7, #0]
 800d218:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800d21a:	2300      	movs	r3, #0
}
 800d21c:	4618      	mov	r0, r3
 800d21e:	370c      	adds	r7, #12
 800d220:	46bd      	mov	sp, r7
 800d222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d226:	4770      	bx	lr

0800d228 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800d228:	b5b0      	push	{r4, r5, r7, lr}
 800d22a:	b08e      	sub	sp, #56	; 0x38
 800d22c:	af04      	add	r7, sp, #16
 800d22e:	6078      	str	r0, [r7, #4]
 800d230:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	2203      	movs	r2, #3
 800d236:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d23e:	2b03      	cmp	r3, #3
 800d240:	d02e      	beq.n	800d2a0 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800d242:	683b      	ldr	r3, [r7, #0]
 800d244:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d248:	d106      	bne.n	800d258 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d24e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	639a      	str	r2, [r3, #56]	; 0x38
 800d256:	e029      	b.n	800d2ac <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800d258:	683b      	ldr	r3, [r7, #0]
 800d25a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d25e:	d10a      	bne.n	800d276 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800d260:	6878      	ldr	r0, [r7, #4]
 800d262:	f000 fb0f 	bl	800d884 <SD_WideBus_Enable>
 800d266:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d26c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d26e:	431a      	orrs	r2, r3
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	639a      	str	r2, [r3, #56]	; 0x38
 800d274:	e01a      	b.n	800d2ac <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800d276:	683b      	ldr	r3, [r7, #0]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d10a      	bne.n	800d292 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800d27c:	6878      	ldr	r0, [r7, #4]
 800d27e:	f000 fb4c 	bl	800d91a <SD_WideBus_Disable>
 800d282:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d28a:	431a      	orrs	r2, r3
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	639a      	str	r2, [r3, #56]	; 0x38
 800d290:	e00c      	b.n	800d2ac <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d296:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	639a      	str	r2, [r3, #56]	; 0x38
 800d29e:	e005      	b.n	800d2ac <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2a4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d009      	beq.n	800d2c8 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	4a18      	ldr	r2, [pc, #96]	; (800d31c <HAL_SD_ConfigWideBusOperation+0xf4>)
 800d2ba:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	2201      	movs	r2, #1
 800d2c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d2c4:	2301      	movs	r3, #1
 800d2c6:	e024      	b.n	800d312 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	685b      	ldr	r3, [r3, #4]
 800d2cc:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	689b      	ldr	r3, [r3, #8]
 800d2d2:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	68db      	ldr	r3, [r3, #12]
 800d2d8:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800d2da:	683b      	ldr	r3, [r7, #0]
 800d2dc:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	695b      	ldr	r3, [r3, #20]
 800d2e2:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	699b      	ldr	r3, [r3, #24]
 800d2e8:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	681d      	ldr	r5, [r3, #0]
 800d2ee:	466c      	mov	r4, sp
 800d2f0:	f107 0318 	add.w	r3, r7, #24
 800d2f4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d2f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d2fc:	f107 030c 	add.w	r3, r7, #12
 800d300:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d302:	4628      	mov	r0, r5
 800d304:	f002 fcb2 	bl	800fc6c <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	2201      	movs	r2, #1
 800d30c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800d310:	2300      	movs	r3, #0
}
 800d312:	4618      	mov	r0, r3
 800d314:	3728      	adds	r7, #40	; 0x28
 800d316:	46bd      	mov	sp, r7
 800d318:	bdb0      	pop	{r4, r5, r7, pc}
 800d31a:	bf00      	nop
 800d31c:	004005ff 	.word	0x004005ff

0800d320 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800d320:	b580      	push	{r7, lr}
 800d322:	b086      	sub	sp, #24
 800d324:	af00      	add	r7, sp, #0
 800d326:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800d328:	2300      	movs	r3, #0
 800d32a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800d32c:	f107 030c 	add.w	r3, r7, #12
 800d330:	4619      	mov	r1, r3
 800d332:	6878      	ldr	r0, [r7, #4]
 800d334:	f000 fa7e 	bl	800d834 <SD_SendStatus>
 800d338:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d33a:	697b      	ldr	r3, [r7, #20]
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d005      	beq.n	800d34c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d344:	697b      	ldr	r3, [r7, #20]
 800d346:	431a      	orrs	r2, r3
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	0a5b      	lsrs	r3, r3, #9
 800d350:	f003 030f 	and.w	r3, r3, #15
 800d354:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800d356:	693b      	ldr	r3, [r7, #16]
}
 800d358:	4618      	mov	r0, r3
 800d35a:	3718      	adds	r7, #24
 800d35c:	46bd      	mov	sp, r7
 800d35e:	bd80      	pop	{r7, pc}

0800d360 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d360:	b480      	push	{r7}
 800d362:	b085      	sub	sp, #20
 800d364:	af00      	add	r7, sp, #0
 800d366:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d36c:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d374:	68fb      	ldr	r3, [r7, #12]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d37c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800d37e:	bf00      	nop
 800d380:	3714      	adds	r7, #20
 800d382:	46bd      	mov	sp, r7
 800d384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d388:	4770      	bx	lr

0800d38a <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d38a:	b580      	push	{r7, lr}
 800d38c:	b084      	sub	sp, #16
 800d38e:	af00      	add	r7, sp, #0
 800d390:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d396:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d39c:	2b82      	cmp	r3, #130	; 0x82
 800d39e:	d111      	bne.n	800d3c4 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	4618      	mov	r0, r3
 800d3a6:	f002 fde7 	bl	800ff78 <SDMMC_CmdStopTransfer>
 800d3aa:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d3ac:	68bb      	ldr	r3, [r7, #8]
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d008      	beq.n	800d3c4 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d3b6:	68bb      	ldr	r3, [r7, #8]
 800d3b8:	431a      	orrs	r2, r3
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800d3be:	68f8      	ldr	r0, [r7, #12]
 800d3c0:	f7ff fd58 	bl	800ce74 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	f022 0208 	bic.w	r2, r2, #8
 800d3d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	f240 523a 	movw	r2, #1338	; 0x53a
 800d3dc:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	2201      	movs	r2, #1
 800d3e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	2200      	movs	r2, #0
 800d3ea:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800d3ec:	68f8      	ldr	r0, [r7, #12]
 800d3ee:	f003 fa3f 	bl	8010870 <HAL_SD_RxCpltCallback>
#endif
}
 800d3f2:	bf00      	nop
 800d3f4:	3710      	adds	r7, #16
 800d3f6:	46bd      	mov	sp, r7
 800d3f8:	bd80      	pop	{r7, pc}
	...

0800d3fc <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800d3fc:	b580      	push	{r7, lr}
 800d3fe:	b086      	sub	sp, #24
 800d400:	af00      	add	r7, sp, #0
 800d402:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d408:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800d40a:	6878      	ldr	r0, [r7, #4]
 800d40c:	f7fd f848 	bl	800a4a0 <HAL_DMA_GetError>
 800d410:	4603      	mov	r3, r0
 800d412:	2b02      	cmp	r3, #2
 800d414:	d03e      	beq.n	800d494 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800d416:	697b      	ldr	r3, [r7, #20]
 800d418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d41a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d41c:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800d41e:	697b      	ldr	r3, [r7, #20]
 800d420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d422:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d424:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800d426:	693b      	ldr	r3, [r7, #16]
 800d428:	2b01      	cmp	r3, #1
 800d42a:	d002      	beq.n	800d432 <SD_DMAError+0x36>
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	2b01      	cmp	r3, #1
 800d430:	d12d      	bne.n	800d48e <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d432:	697b      	ldr	r3, [r7, #20]
 800d434:	681b      	ldr	r3, [r3, #0]
 800d436:	4a19      	ldr	r2, [pc, #100]	; (800d49c <SD_DMAError+0xa0>)
 800d438:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800d43a:	697b      	ldr	r3, [r7, #20]
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d440:	697b      	ldr	r3, [r7, #20]
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800d448:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800d44a:	697b      	ldr	r3, [r7, #20]
 800d44c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d44e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d452:	697b      	ldr	r3, [r7, #20]
 800d454:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800d456:	6978      	ldr	r0, [r7, #20]
 800d458:	f7ff ff62 	bl	800d320 <HAL_SD_GetCardState>
 800d45c:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800d45e:	68bb      	ldr	r3, [r7, #8]
 800d460:	2b06      	cmp	r3, #6
 800d462:	d002      	beq.n	800d46a <SD_DMAError+0x6e>
 800d464:	68bb      	ldr	r3, [r7, #8]
 800d466:	2b05      	cmp	r3, #5
 800d468:	d10a      	bne.n	800d480 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d46a:	697b      	ldr	r3, [r7, #20]
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	4618      	mov	r0, r3
 800d470:	f002 fd82 	bl	800ff78 <SDMMC_CmdStopTransfer>
 800d474:	4602      	mov	r2, r0
 800d476:	697b      	ldr	r3, [r7, #20]
 800d478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d47a:	431a      	orrs	r2, r3
 800d47c:	697b      	ldr	r3, [r7, #20]
 800d47e:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800d480:	697b      	ldr	r3, [r7, #20]
 800d482:	2201      	movs	r2, #1
 800d484:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d488:	697b      	ldr	r3, [r7, #20]
 800d48a:	2200      	movs	r2, #0
 800d48c:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800d48e:	6978      	ldr	r0, [r7, #20]
 800d490:	f7ff fcf0 	bl	800ce74 <HAL_SD_ErrorCallback>
#endif
  }
}
 800d494:	bf00      	nop
 800d496:	3718      	adds	r7, #24
 800d498:	46bd      	mov	sp, r7
 800d49a:	bd80      	pop	{r7, pc}
 800d49c:	004005ff 	.word	0x004005ff

0800d4a0 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800d4a0:	b580      	push	{r7, lr}
 800d4a2:	b084      	sub	sp, #16
 800d4a4:	af00      	add	r7, sp, #0
 800d4a6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4ac:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	f240 523a 	movw	r2, #1338	; 0x53a
 800d4b6:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800d4b8:	68f8      	ldr	r0, [r7, #12]
 800d4ba:	f7ff ff31 	bl	800d320 <HAL_SD_GetCardState>
 800d4be:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	2201      	movs	r2, #1
 800d4c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	2200      	movs	r2, #0
 800d4cc:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800d4ce:	68bb      	ldr	r3, [r7, #8]
 800d4d0:	2b06      	cmp	r3, #6
 800d4d2:	d002      	beq.n	800d4da <SD_DMATxAbort+0x3a>
 800d4d4:	68bb      	ldr	r3, [r7, #8]
 800d4d6:	2b05      	cmp	r3, #5
 800d4d8:	d10a      	bne.n	800d4f0 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	4618      	mov	r0, r3
 800d4e0:	f002 fd4a 	bl	800ff78 <SDMMC_CmdStopTransfer>
 800d4e4:	4602      	mov	r2, r0
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4ea:	431a      	orrs	r2, r3
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d103      	bne.n	800d500 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800d4f8:	68f8      	ldr	r0, [r7, #12]
 800d4fa:	f003 f9a5 	bl	8010848 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800d4fe:	e002      	b.n	800d506 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800d500:	68f8      	ldr	r0, [r7, #12]
 800d502:	f7ff fcb7 	bl	800ce74 <HAL_SD_ErrorCallback>
}
 800d506:	bf00      	nop
 800d508:	3710      	adds	r7, #16
 800d50a:	46bd      	mov	sp, r7
 800d50c:	bd80      	pop	{r7, pc}

0800d50e <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800d50e:	b580      	push	{r7, lr}
 800d510:	b084      	sub	sp, #16
 800d512:	af00      	add	r7, sp, #0
 800d514:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d51a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	f240 523a 	movw	r2, #1338	; 0x53a
 800d524:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800d526:	68f8      	ldr	r0, [r7, #12]
 800d528:	f7ff fefa 	bl	800d320 <HAL_SD_GetCardState>
 800d52c:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	2201      	movs	r2, #1
 800d532:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	2200      	movs	r2, #0
 800d53a:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800d53c:	68bb      	ldr	r3, [r7, #8]
 800d53e:	2b06      	cmp	r3, #6
 800d540:	d002      	beq.n	800d548 <SD_DMARxAbort+0x3a>
 800d542:	68bb      	ldr	r3, [r7, #8]
 800d544:	2b05      	cmp	r3, #5
 800d546:	d10a      	bne.n	800d55e <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	4618      	mov	r0, r3
 800d54e:	f002 fd13 	bl	800ff78 <SDMMC_CmdStopTransfer>
 800d552:	4602      	mov	r2, r0
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d558:	431a      	orrs	r2, r3
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d562:	2b00      	cmp	r3, #0
 800d564:	d103      	bne.n	800d56e <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800d566:	68f8      	ldr	r0, [r7, #12]
 800d568:	f003 f96e 	bl	8010848 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800d56c:	e002      	b.n	800d574 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800d56e:	68f8      	ldr	r0, [r7, #12]
 800d570:	f7ff fc80 	bl	800ce74 <HAL_SD_ErrorCallback>
}
 800d574:	bf00      	nop
 800d576:	3710      	adds	r7, #16
 800d578:	46bd      	mov	sp, r7
 800d57a:	bd80      	pop	{r7, pc}

0800d57c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d57c:	b5b0      	push	{r4, r5, r7, lr}
 800d57e:	b094      	sub	sp, #80	; 0x50
 800d580:	af04      	add	r7, sp, #16
 800d582:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800d584:	2301      	movs	r3, #1
 800d586:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	4618      	mov	r0, r3
 800d58e:	f002 fbc5 	bl	800fd1c <SDIO_GetPowerState>
 800d592:	4603      	mov	r3, r0
 800d594:	2b00      	cmp	r3, #0
 800d596:	d102      	bne.n	800d59e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d598:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800d59c:	e0b7      	b.n	800d70e <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d5a2:	2b03      	cmp	r3, #3
 800d5a4:	d02f      	beq.n	800d606 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	4618      	mov	r0, r3
 800d5ac:	f002 fdee 	bl	801018c <SDMMC_CmdSendCID>
 800d5b0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d5b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d001      	beq.n	800d5bc <SD_InitCard+0x40>
    {
      return errorstate;
 800d5b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d5ba:	e0a8      	b.n	800d70e <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	2100      	movs	r1, #0
 800d5c2:	4618      	mov	r0, r3
 800d5c4:	f002 fbef 	bl	800fda6 <SDIO_GetResponse>
 800d5c8:	4602      	mov	r2, r0
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	2104      	movs	r1, #4
 800d5d4:	4618      	mov	r0, r3
 800d5d6:	f002 fbe6 	bl	800fda6 <SDIO_GetResponse>
 800d5da:	4602      	mov	r2, r0
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	2108      	movs	r1, #8
 800d5e6:	4618      	mov	r0, r3
 800d5e8:	f002 fbdd 	bl	800fda6 <SDIO_GetResponse>
 800d5ec:	4602      	mov	r2, r0
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	210c      	movs	r1, #12
 800d5f8:	4618      	mov	r0, r3
 800d5fa:	f002 fbd4 	bl	800fda6 <SDIO_GetResponse>
 800d5fe:	4602      	mov	r2, r0
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d60a:	2b03      	cmp	r3, #3
 800d60c:	d00d      	beq.n	800d62a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	f107 020e 	add.w	r2, r7, #14
 800d616:	4611      	mov	r1, r2
 800d618:	4618      	mov	r0, r3
 800d61a:	f002 fdf4 	bl	8010206 <SDMMC_CmdSetRelAdd>
 800d61e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d620:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d622:	2b00      	cmp	r3, #0
 800d624:	d001      	beq.n	800d62a <SD_InitCard+0xae>
    {
      return errorstate;
 800d626:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d628:	e071      	b.n	800d70e <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d62e:	2b03      	cmp	r3, #3
 800d630:	d036      	beq.n	800d6a0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800d632:	89fb      	ldrh	r3, [r7, #14]
 800d634:	461a      	mov	r2, r3
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	681a      	ldr	r2, [r3, #0]
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d642:	041b      	lsls	r3, r3, #16
 800d644:	4619      	mov	r1, r3
 800d646:	4610      	mov	r0, r2
 800d648:	f002 fdbe 	bl	80101c8 <SDMMC_CmdSendCSD>
 800d64c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d64e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d650:	2b00      	cmp	r3, #0
 800d652:	d001      	beq.n	800d658 <SD_InitCard+0xdc>
    {
      return errorstate;
 800d654:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d656:	e05a      	b.n	800d70e <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	2100      	movs	r1, #0
 800d65e:	4618      	mov	r0, r3
 800d660:	f002 fba1 	bl	800fda6 <SDIO_GetResponse>
 800d664:	4602      	mov	r2, r0
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	2104      	movs	r1, #4
 800d670:	4618      	mov	r0, r3
 800d672:	f002 fb98 	bl	800fda6 <SDIO_GetResponse>
 800d676:	4602      	mov	r2, r0
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	2108      	movs	r1, #8
 800d682:	4618      	mov	r0, r3
 800d684:	f002 fb8f 	bl	800fda6 <SDIO_GetResponse>
 800d688:	4602      	mov	r2, r0
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	210c      	movs	r1, #12
 800d694:	4618      	mov	r0, r3
 800d696:	f002 fb86 	bl	800fda6 <SDIO_GetResponse>
 800d69a:	4602      	mov	r2, r0
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	2104      	movs	r1, #4
 800d6a6:	4618      	mov	r0, r3
 800d6a8:	f002 fb7d 	bl	800fda6 <SDIO_GetResponse>
 800d6ac:	4603      	mov	r3, r0
 800d6ae:	0d1a      	lsrs	r2, r3, #20
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800d6b4:	f107 0310 	add.w	r3, r7, #16
 800d6b8:	4619      	mov	r1, r3
 800d6ba:	6878      	ldr	r0, [r7, #4]
 800d6bc:	f7ff fbe4 	bl	800ce88 <HAL_SD_GetCardCSD>
 800d6c0:	4603      	mov	r3, r0
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	d002      	beq.n	800d6cc <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d6c6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d6ca:	e020      	b.n	800d70e <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	6819      	ldr	r1, [r3, #0]
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d6d4:	041b      	lsls	r3, r3, #16
 800d6d6:	f04f 0400 	mov.w	r4, #0
 800d6da:	461a      	mov	r2, r3
 800d6dc:	4623      	mov	r3, r4
 800d6de:	4608      	mov	r0, r1
 800d6e0:	f002 fc6c 	bl	800ffbc <SDMMC_CmdSelDesel>
 800d6e4:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800d6e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d001      	beq.n	800d6f0 <SD_InitCard+0x174>
  {
    return errorstate;
 800d6ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6ee:	e00e      	b.n	800d70e <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	681d      	ldr	r5, [r3, #0]
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	466c      	mov	r4, sp
 800d6f8:	f103 0210 	add.w	r2, r3, #16
 800d6fc:	ca07      	ldmia	r2, {r0, r1, r2}
 800d6fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d702:	3304      	adds	r3, #4
 800d704:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d706:	4628      	mov	r0, r5
 800d708:	f002 fab0 	bl	800fc6c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800d70c:	2300      	movs	r3, #0
}
 800d70e:	4618      	mov	r0, r3
 800d710:	3740      	adds	r7, #64	; 0x40
 800d712:	46bd      	mov	sp, r7
 800d714:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800d718 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800d718:	b580      	push	{r7, lr}
 800d71a:	b086      	sub	sp, #24
 800d71c:	af00      	add	r7, sp, #0
 800d71e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d720:	2300      	movs	r3, #0
 800d722:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800d724:	2300      	movs	r3, #0
 800d726:	617b      	str	r3, [r7, #20]
 800d728:	2300      	movs	r3, #0
 800d72a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	4618      	mov	r0, r3
 800d732:	f002 fc66 	bl	8010002 <SDMMC_CmdGoIdleState>
 800d736:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d001      	beq.n	800d742 <SD_PowerON+0x2a>
  {
    return errorstate;
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	e072      	b.n	800d828 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	4618      	mov	r0, r3
 800d748:	f002 fc79 	bl	801003e <SDMMC_CmdOperCond>
 800d74c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	2b00      	cmp	r3, #0
 800d752:	d00d      	beq.n	800d770 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	2200      	movs	r2, #0
 800d758:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	4618      	mov	r0, r3
 800d760:	f002 fc4f 	bl	8010002 <SDMMC_CmdGoIdleState>
 800d764:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d004      	beq.n	800d776 <SD_PowerON+0x5e>
    {
      return errorstate;
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	e05b      	b.n	800d828 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	2201      	movs	r2, #1
 800d774:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d77a:	2b01      	cmp	r3, #1
 800d77c:	d137      	bne.n	800d7ee <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	2100      	movs	r1, #0
 800d784:	4618      	mov	r0, r3
 800d786:	f002 fc79 	bl	801007c <SDMMC_CmdAppCommand>
 800d78a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d02d      	beq.n	800d7ee <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d792:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d796:	e047      	b.n	800d828 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	2100      	movs	r1, #0
 800d79e:	4618      	mov	r0, r3
 800d7a0:	f002 fc6c 	bl	801007c <SDMMC_CmdAppCommand>
 800d7a4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d001      	beq.n	800d7b0 <SD_PowerON+0x98>
    {
      return errorstate;
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	e03b      	b.n	800d828 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	491e      	ldr	r1, [pc, #120]	; (800d830 <SD_PowerON+0x118>)
 800d7b6:	4618      	mov	r0, r3
 800d7b8:	f002 fc82 	bl	80100c0 <SDMMC_CmdAppOperCommand>
 800d7bc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d002      	beq.n	800d7ca <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d7c4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d7c8:	e02e      	b.n	800d828 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	2100      	movs	r1, #0
 800d7d0:	4618      	mov	r0, r3
 800d7d2:	f002 fae8 	bl	800fda6 <SDIO_GetResponse>
 800d7d6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800d7d8:	697b      	ldr	r3, [r7, #20]
 800d7da:	0fdb      	lsrs	r3, r3, #31
 800d7dc:	2b01      	cmp	r3, #1
 800d7de:	d101      	bne.n	800d7e4 <SD_PowerON+0xcc>
 800d7e0:	2301      	movs	r3, #1
 800d7e2:	e000      	b.n	800d7e6 <SD_PowerON+0xce>
 800d7e4:	2300      	movs	r3, #0
 800d7e6:	613b      	str	r3, [r7, #16]

    count++;
 800d7e8:	68bb      	ldr	r3, [r7, #8]
 800d7ea:	3301      	adds	r3, #1
 800d7ec:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800d7ee:	68bb      	ldr	r3, [r7, #8]
 800d7f0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d7f4:	4293      	cmp	r3, r2
 800d7f6:	d802      	bhi.n	800d7fe <SD_PowerON+0xe6>
 800d7f8:	693b      	ldr	r3, [r7, #16]
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d0cc      	beq.n	800d798 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800d7fe:	68bb      	ldr	r3, [r7, #8]
 800d800:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d804:	4293      	cmp	r3, r2
 800d806:	d902      	bls.n	800d80e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800d808:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d80c:	e00c      	b.n	800d828 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800d80e:	697b      	ldr	r3, [r7, #20]
 800d810:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d814:	2b00      	cmp	r3, #0
 800d816:	d003      	beq.n	800d820 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	2201      	movs	r2, #1
 800d81c:	645a      	str	r2, [r3, #68]	; 0x44
 800d81e:	e002      	b.n	800d826 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	2200      	movs	r2, #0
 800d824:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800d826:	2300      	movs	r3, #0
}
 800d828:	4618      	mov	r0, r3
 800d82a:	3718      	adds	r7, #24
 800d82c:	46bd      	mov	sp, r7
 800d82e:	bd80      	pop	{r7, pc}
 800d830:	c1100000 	.word	0xc1100000

0800d834 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800d834:	b580      	push	{r7, lr}
 800d836:	b084      	sub	sp, #16
 800d838:	af00      	add	r7, sp, #0
 800d83a:	6078      	str	r0, [r7, #4]
 800d83c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800d83e:	683b      	ldr	r3, [r7, #0]
 800d840:	2b00      	cmp	r3, #0
 800d842:	d102      	bne.n	800d84a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800d844:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800d848:	e018      	b.n	800d87c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	681a      	ldr	r2, [r3, #0]
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d852:	041b      	lsls	r3, r3, #16
 800d854:	4619      	mov	r1, r3
 800d856:	4610      	mov	r0, r2
 800d858:	f002 fcf6 	bl	8010248 <SDMMC_CmdSendStatus>
 800d85c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	2b00      	cmp	r3, #0
 800d862:	d001      	beq.n	800d868 <SD_SendStatus+0x34>
  {
    return errorstate;
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	e009      	b.n	800d87c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	2100      	movs	r1, #0
 800d86e:	4618      	mov	r0, r3
 800d870:	f002 fa99 	bl	800fda6 <SDIO_GetResponse>
 800d874:	4602      	mov	r2, r0
 800d876:	683b      	ldr	r3, [r7, #0]
 800d878:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800d87a:	2300      	movs	r3, #0
}
 800d87c:	4618      	mov	r0, r3
 800d87e:	3710      	adds	r7, #16
 800d880:	46bd      	mov	sp, r7
 800d882:	bd80      	pop	{r7, pc}

0800d884 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800d884:	b580      	push	{r7, lr}
 800d886:	b086      	sub	sp, #24
 800d888:	af00      	add	r7, sp, #0
 800d88a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800d88c:	2300      	movs	r3, #0
 800d88e:	60fb      	str	r3, [r7, #12]
 800d890:	2300      	movs	r3, #0
 800d892:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	2100      	movs	r1, #0
 800d89a:	4618      	mov	r0, r3
 800d89c:	f002 fa83 	bl	800fda6 <SDIO_GetResponse>
 800d8a0:	4603      	mov	r3, r0
 800d8a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d8a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d8aa:	d102      	bne.n	800d8b2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d8ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d8b0:	e02f      	b.n	800d912 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800d8b2:	f107 030c 	add.w	r3, r7, #12
 800d8b6:	4619      	mov	r1, r3
 800d8b8:	6878      	ldr	r0, [r7, #4]
 800d8ba:	f000 f879 	bl	800d9b0 <SD_FindSCR>
 800d8be:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d8c0:	697b      	ldr	r3, [r7, #20]
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d001      	beq.n	800d8ca <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800d8c6:	697b      	ldr	r3, [r7, #20]
 800d8c8:	e023      	b.n	800d912 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800d8ca:	693b      	ldr	r3, [r7, #16]
 800d8cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d01c      	beq.n	800d90e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	681a      	ldr	r2, [r3, #0]
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d8dc:	041b      	lsls	r3, r3, #16
 800d8de:	4619      	mov	r1, r3
 800d8e0:	4610      	mov	r0, r2
 800d8e2:	f002 fbcb 	bl	801007c <SDMMC_CmdAppCommand>
 800d8e6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d8e8:	697b      	ldr	r3, [r7, #20]
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d001      	beq.n	800d8f2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800d8ee:	697b      	ldr	r3, [r7, #20]
 800d8f0:	e00f      	b.n	800d912 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	2102      	movs	r1, #2
 800d8f8:	4618      	mov	r0, r3
 800d8fa:	f002 fc04 	bl	8010106 <SDMMC_CmdBusWidth>
 800d8fe:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d900:	697b      	ldr	r3, [r7, #20]
 800d902:	2b00      	cmp	r3, #0
 800d904:	d001      	beq.n	800d90a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800d906:	697b      	ldr	r3, [r7, #20]
 800d908:	e003      	b.n	800d912 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800d90a:	2300      	movs	r3, #0
 800d90c:	e001      	b.n	800d912 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d90e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800d912:	4618      	mov	r0, r3
 800d914:	3718      	adds	r7, #24
 800d916:	46bd      	mov	sp, r7
 800d918:	bd80      	pop	{r7, pc}

0800d91a <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800d91a:	b580      	push	{r7, lr}
 800d91c:	b086      	sub	sp, #24
 800d91e:	af00      	add	r7, sp, #0
 800d920:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800d922:	2300      	movs	r3, #0
 800d924:	60fb      	str	r3, [r7, #12]
 800d926:	2300      	movs	r3, #0
 800d928:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	2100      	movs	r1, #0
 800d930:	4618      	mov	r0, r3
 800d932:	f002 fa38 	bl	800fda6 <SDIO_GetResponse>
 800d936:	4603      	mov	r3, r0
 800d938:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d93c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d940:	d102      	bne.n	800d948 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800d942:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d946:	e02f      	b.n	800d9a8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800d948:	f107 030c 	add.w	r3, r7, #12
 800d94c:	4619      	mov	r1, r3
 800d94e:	6878      	ldr	r0, [r7, #4]
 800d950:	f000 f82e 	bl	800d9b0 <SD_FindSCR>
 800d954:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d956:	697b      	ldr	r3, [r7, #20]
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d001      	beq.n	800d960 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800d95c:	697b      	ldr	r3, [r7, #20]
 800d95e:	e023      	b.n	800d9a8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800d960:	693b      	ldr	r3, [r7, #16]
 800d962:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d966:	2b00      	cmp	r3, #0
 800d968:	d01c      	beq.n	800d9a4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	681a      	ldr	r2, [r3, #0]
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d972:	041b      	lsls	r3, r3, #16
 800d974:	4619      	mov	r1, r3
 800d976:	4610      	mov	r0, r2
 800d978:	f002 fb80 	bl	801007c <SDMMC_CmdAppCommand>
 800d97c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d97e:	697b      	ldr	r3, [r7, #20]
 800d980:	2b00      	cmp	r3, #0
 800d982:	d001      	beq.n	800d988 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800d984:	697b      	ldr	r3, [r7, #20]
 800d986:	e00f      	b.n	800d9a8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	2100      	movs	r1, #0
 800d98e:	4618      	mov	r0, r3
 800d990:	f002 fbb9 	bl	8010106 <SDMMC_CmdBusWidth>
 800d994:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d996:	697b      	ldr	r3, [r7, #20]
 800d998:	2b00      	cmp	r3, #0
 800d99a:	d001      	beq.n	800d9a0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800d99c:	697b      	ldr	r3, [r7, #20]
 800d99e:	e003      	b.n	800d9a8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800d9a0:	2300      	movs	r3, #0
 800d9a2:	e001      	b.n	800d9a8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d9a4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800d9a8:	4618      	mov	r0, r3
 800d9aa:	3718      	adds	r7, #24
 800d9ac:	46bd      	mov	sp, r7
 800d9ae:	bd80      	pop	{r7, pc}

0800d9b0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800d9b0:	b590      	push	{r4, r7, lr}
 800d9b2:	b08f      	sub	sp, #60	; 0x3c
 800d9b4:	af00      	add	r7, sp, #0
 800d9b6:	6078      	str	r0, [r7, #4]
 800d9b8:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d9ba:	f7fb fd7b 	bl	80094b4 <HAL_GetTick>
 800d9be:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800d9c0:	2300      	movs	r3, #0
 800d9c2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800d9c4:	2300      	movs	r3, #0
 800d9c6:	60bb      	str	r3, [r7, #8]
 800d9c8:	2300      	movs	r3, #0
 800d9ca:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800d9cc:	683b      	ldr	r3, [r7, #0]
 800d9ce:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	2108      	movs	r1, #8
 800d9d6:	4618      	mov	r0, r3
 800d9d8:	f002 fa24 	bl	800fe24 <SDMMC_CmdBlockLength>
 800d9dc:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800d9de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d001      	beq.n	800d9e8 <SD_FindSCR+0x38>
  {
    return errorstate;
 800d9e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9e6:	e0a9      	b.n	800db3c <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	681a      	ldr	r2, [r3, #0]
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d9f0:	041b      	lsls	r3, r3, #16
 800d9f2:	4619      	mov	r1, r3
 800d9f4:	4610      	mov	r0, r2
 800d9f6:	f002 fb41 	bl	801007c <SDMMC_CmdAppCommand>
 800d9fa:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800d9fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d001      	beq.n	800da06 <SD_FindSCR+0x56>
  {
    return errorstate;
 800da02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da04:	e09a      	b.n	800db3c <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800da06:	f04f 33ff 	mov.w	r3, #4294967295
 800da0a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800da0c:	2308      	movs	r3, #8
 800da0e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800da10:	2330      	movs	r3, #48	; 0x30
 800da12:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800da14:	2302      	movs	r3, #2
 800da16:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800da18:	2300      	movs	r3, #0
 800da1a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800da1c:	2301      	movs	r3, #1
 800da1e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	f107 0210 	add.w	r2, r7, #16
 800da28:	4611      	mov	r1, r2
 800da2a:	4618      	mov	r0, r3
 800da2c:	f002 f9ce 	bl	800fdcc <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	4618      	mov	r0, r3
 800da36:	f002 fb88 	bl	801014a <SDMMC_CmdSendSCR>
 800da3a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800da3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d022      	beq.n	800da88 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800da42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da44:	e07a      	b.n	800db3c <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800da50:	2b00      	cmp	r3, #0
 800da52:	d00e      	beq.n	800da72 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	6819      	ldr	r1, [r3, #0]
 800da58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da5a:	009b      	lsls	r3, r3, #2
 800da5c:	f107 0208 	add.w	r2, r7, #8
 800da60:	18d4      	adds	r4, r2, r3
 800da62:	4608      	mov	r0, r1
 800da64:	f002 f92d 	bl	800fcc2 <SDIO_ReadFIFO>
 800da68:	4603      	mov	r3, r0
 800da6a:	6023      	str	r3, [r4, #0]
      index++;
 800da6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da6e:	3301      	adds	r3, #1
 800da70:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800da72:	f7fb fd1f 	bl	80094b4 <HAL_GetTick>
 800da76:	4602      	mov	r2, r0
 800da78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da7a:	1ad3      	subs	r3, r2, r3
 800da7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da80:	d102      	bne.n	800da88 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800da82:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800da86:	e059      	b.n	800db3c <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800da8e:	f240 432a 	movw	r3, #1066	; 0x42a
 800da92:	4013      	ands	r3, r2
 800da94:	2b00      	cmp	r3, #0
 800da96:	d0d6      	beq.n	800da46 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da9e:	f003 0308 	and.w	r3, r3, #8
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d005      	beq.n	800dab2 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	2208      	movs	r2, #8
 800daac:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800daae:	2308      	movs	r3, #8
 800dab0:	e044      	b.n	800db3c <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dab8:	f003 0302 	and.w	r3, r3, #2
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d005      	beq.n	800dacc <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	2202      	movs	r2, #2
 800dac6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800dac8:	2302      	movs	r3, #2
 800daca:	e037      	b.n	800db3c <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dad2:	f003 0320 	and.w	r3, r3, #32
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d005      	beq.n	800dae6 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	2220      	movs	r2, #32
 800dae0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800dae2:	2320      	movs	r3, #32
 800dae4:	e02a      	b.n	800db3c <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	f240 523a 	movw	r2, #1338	; 0x53a
 800daee:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	061a      	lsls	r2, r3, #24
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	021b      	lsls	r3, r3, #8
 800daf8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800dafc:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	0a1b      	lsrs	r3, r3, #8
 800db02:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800db06:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	0e1b      	lsrs	r3, r3, #24
 800db0c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800db0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db10:	601a      	str	r2, [r3, #0]
    scr++;
 800db12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db14:	3304      	adds	r3, #4
 800db16:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800db18:	68bb      	ldr	r3, [r7, #8]
 800db1a:	061a      	lsls	r2, r3, #24
 800db1c:	68bb      	ldr	r3, [r7, #8]
 800db1e:	021b      	lsls	r3, r3, #8
 800db20:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800db24:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800db26:	68bb      	ldr	r3, [r7, #8]
 800db28:	0a1b      	lsrs	r3, r3, #8
 800db2a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800db2e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800db30:	68bb      	ldr	r3, [r7, #8]
 800db32:	0e1b      	lsrs	r3, r3, #24
 800db34:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800db36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db38:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800db3a:	2300      	movs	r3, #0
}
 800db3c:	4618      	mov	r0, r3
 800db3e:	373c      	adds	r7, #60	; 0x3c
 800db40:	46bd      	mov	sp, r7
 800db42:	bd90      	pop	{r4, r7, pc}

0800db44 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800db44:	b580      	push	{r7, lr}
 800db46:	b086      	sub	sp, #24
 800db48:	af00      	add	r7, sp, #0
 800db4a:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db50:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db56:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800db58:	693b      	ldr	r3, [r7, #16]
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d03f      	beq.n	800dbde <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800db5e:	2300      	movs	r3, #0
 800db60:	617b      	str	r3, [r7, #20]
 800db62:	e033      	b.n	800dbcc <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	4618      	mov	r0, r3
 800db6a:	f002 f8aa 	bl	800fcc2 <SDIO_ReadFIFO>
 800db6e:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800db70:	68bb      	ldr	r3, [r7, #8]
 800db72:	b2da      	uxtb	r2, r3
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	701a      	strb	r2, [r3, #0]
      tmp++;
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	3301      	adds	r3, #1
 800db7c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800db7e:	693b      	ldr	r3, [r7, #16]
 800db80:	3b01      	subs	r3, #1
 800db82:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800db84:	68bb      	ldr	r3, [r7, #8]
 800db86:	0a1b      	lsrs	r3, r3, #8
 800db88:	b2da      	uxtb	r2, r3
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	3301      	adds	r3, #1
 800db92:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800db94:	693b      	ldr	r3, [r7, #16]
 800db96:	3b01      	subs	r3, #1
 800db98:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800db9a:	68bb      	ldr	r3, [r7, #8]
 800db9c:	0c1b      	lsrs	r3, r3, #16
 800db9e:	b2da      	uxtb	r2, r3
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	701a      	strb	r2, [r3, #0]
      tmp++;
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	3301      	adds	r3, #1
 800dba8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800dbaa:	693b      	ldr	r3, [r7, #16]
 800dbac:	3b01      	subs	r3, #1
 800dbae:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800dbb0:	68bb      	ldr	r3, [r7, #8]
 800dbb2:	0e1b      	lsrs	r3, r3, #24
 800dbb4:	b2da      	uxtb	r2, r3
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	701a      	strb	r2, [r3, #0]
      tmp++;
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	3301      	adds	r3, #1
 800dbbe:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800dbc0:	693b      	ldr	r3, [r7, #16]
 800dbc2:	3b01      	subs	r3, #1
 800dbc4:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800dbc6:	697b      	ldr	r3, [r7, #20]
 800dbc8:	3301      	adds	r3, #1
 800dbca:	617b      	str	r3, [r7, #20]
 800dbcc:	697b      	ldr	r3, [r7, #20]
 800dbce:	2b07      	cmp	r3, #7
 800dbd0:	d9c8      	bls.n	800db64 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	68fa      	ldr	r2, [r7, #12]
 800dbd6:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	693a      	ldr	r2, [r7, #16]
 800dbdc:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800dbde:	bf00      	nop
 800dbe0:	3718      	adds	r7, #24
 800dbe2:	46bd      	mov	sp, r7
 800dbe4:	bd80      	pop	{r7, pc}

0800dbe6 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800dbe6:	b580      	push	{r7, lr}
 800dbe8:	b086      	sub	sp, #24
 800dbea:	af00      	add	r7, sp, #0
 800dbec:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	6a1b      	ldr	r3, [r3, #32]
 800dbf2:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbf8:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800dbfa:	693b      	ldr	r3, [r7, #16]
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d043      	beq.n	800dc88 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800dc00:	2300      	movs	r3, #0
 800dc02:	617b      	str	r3, [r7, #20]
 800dc04:	e037      	b.n	800dc76 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	781b      	ldrb	r3, [r3, #0]
 800dc0a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	3301      	adds	r3, #1
 800dc10:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800dc12:	693b      	ldr	r3, [r7, #16]
 800dc14:	3b01      	subs	r3, #1
 800dc16:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	781b      	ldrb	r3, [r3, #0]
 800dc1c:	021a      	lsls	r2, r3, #8
 800dc1e:	68bb      	ldr	r3, [r7, #8]
 800dc20:	4313      	orrs	r3, r2
 800dc22:	60bb      	str	r3, [r7, #8]
      tmp++;
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	3301      	adds	r3, #1
 800dc28:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800dc2a:	693b      	ldr	r3, [r7, #16]
 800dc2c:	3b01      	subs	r3, #1
 800dc2e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	781b      	ldrb	r3, [r3, #0]
 800dc34:	041a      	lsls	r2, r3, #16
 800dc36:	68bb      	ldr	r3, [r7, #8]
 800dc38:	4313      	orrs	r3, r2
 800dc3a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	3301      	adds	r3, #1
 800dc40:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800dc42:	693b      	ldr	r3, [r7, #16]
 800dc44:	3b01      	subs	r3, #1
 800dc46:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	781b      	ldrb	r3, [r3, #0]
 800dc4c:	061a      	lsls	r2, r3, #24
 800dc4e:	68bb      	ldr	r3, [r7, #8]
 800dc50:	4313      	orrs	r3, r2
 800dc52:	60bb      	str	r3, [r7, #8]
      tmp++;
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	3301      	adds	r3, #1
 800dc58:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800dc5a:	693b      	ldr	r3, [r7, #16]
 800dc5c:	3b01      	subs	r3, #1
 800dc5e:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	f107 0208 	add.w	r2, r7, #8
 800dc68:	4611      	mov	r1, r2
 800dc6a:	4618      	mov	r0, r3
 800dc6c:	f002 f836 	bl	800fcdc <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800dc70:	697b      	ldr	r3, [r7, #20]
 800dc72:	3301      	adds	r3, #1
 800dc74:	617b      	str	r3, [r7, #20]
 800dc76:	697b      	ldr	r3, [r7, #20]
 800dc78:	2b07      	cmp	r3, #7
 800dc7a:	d9c4      	bls.n	800dc06 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	68fa      	ldr	r2, [r7, #12]
 800dc80:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	693a      	ldr	r2, [r7, #16]
 800dc86:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800dc88:	bf00      	nop
 800dc8a:	3718      	adds	r7, #24
 800dc8c:	46bd      	mov	sp, r7
 800dc8e:	bd80      	pop	{r7, pc}

0800dc90 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800dc90:	b580      	push	{r7, lr}
 800dc92:	b082      	sub	sp, #8
 800dc94:	af00      	add	r7, sp, #0
 800dc96:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d101      	bne.n	800dca2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800dc9e:	2301      	movs	r3, #1
 800dca0:	e056      	b.n	800dd50 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	2200      	movs	r2, #0
 800dca6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800dcae:	b2db      	uxtb	r3, r3
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d106      	bne.n	800dcc2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	2200      	movs	r2, #0
 800dcb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800dcbc:	6878      	ldr	r0, [r7, #4]
 800dcbe:	f7f9 f8b1 	bl	8006e24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	2202      	movs	r2, #2
 800dcc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	681a      	ldr	r2, [r3, #0]
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	681b      	ldr	r3, [r3, #0]
 800dcd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dcd8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	685a      	ldr	r2, [r3, #4]
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	689b      	ldr	r3, [r3, #8]
 800dce2:	431a      	orrs	r2, r3
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	68db      	ldr	r3, [r3, #12]
 800dce8:	431a      	orrs	r2, r3
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	691b      	ldr	r3, [r3, #16]
 800dcee:	431a      	orrs	r2, r3
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	695b      	ldr	r3, [r3, #20]
 800dcf4:	431a      	orrs	r2, r3
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	699b      	ldr	r3, [r3, #24]
 800dcfa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800dcfe:	431a      	orrs	r2, r3
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	69db      	ldr	r3, [r3, #28]
 800dd04:	431a      	orrs	r2, r3
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	6a1b      	ldr	r3, [r3, #32]
 800dd0a:	ea42 0103 	orr.w	r1, r2, r3
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	430a      	orrs	r2, r1
 800dd18:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	699b      	ldr	r3, [r3, #24]
 800dd1e:	0c1b      	lsrs	r3, r3, #16
 800dd20:	f003 0104 	and.w	r1, r3, #4
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	430a      	orrs	r2, r1
 800dd2e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	69da      	ldr	r2, [r3, #28]
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800dd3e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	2200      	movs	r2, #0
 800dd44:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	2201      	movs	r2, #1
 800dd4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800dd4e:	2300      	movs	r3, #0
}
 800dd50:	4618      	mov	r0, r3
 800dd52:	3708      	adds	r7, #8
 800dd54:	46bd      	mov	sp, r7
 800dd56:	bd80      	pop	{r7, pc}

0800dd58 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dd58:	b580      	push	{r7, lr}
 800dd5a:	b088      	sub	sp, #32
 800dd5c:	af00      	add	r7, sp, #0
 800dd5e:	60f8      	str	r0, [r7, #12]
 800dd60:	60b9      	str	r1, [r7, #8]
 800dd62:	603b      	str	r3, [r7, #0]
 800dd64:	4613      	mov	r3, r2
 800dd66:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800dd68:	2300      	movs	r3, #0
 800dd6a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800dd72:	2b01      	cmp	r3, #1
 800dd74:	d101      	bne.n	800dd7a <HAL_SPI_Transmit+0x22>
 800dd76:	2302      	movs	r3, #2
 800dd78:	e11e      	b.n	800dfb8 <HAL_SPI_Transmit+0x260>
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	2201      	movs	r2, #1
 800dd7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800dd82:	f7fb fb97 	bl	80094b4 <HAL_GetTick>
 800dd86:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800dd88:	88fb      	ldrh	r3, [r7, #6]
 800dd8a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800dd92:	b2db      	uxtb	r3, r3
 800dd94:	2b01      	cmp	r3, #1
 800dd96:	d002      	beq.n	800dd9e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800dd98:	2302      	movs	r3, #2
 800dd9a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800dd9c:	e103      	b.n	800dfa6 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800dd9e:	68bb      	ldr	r3, [r7, #8]
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d002      	beq.n	800ddaa <HAL_SPI_Transmit+0x52>
 800dda4:	88fb      	ldrh	r3, [r7, #6]
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d102      	bne.n	800ddb0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800ddaa:	2301      	movs	r3, #1
 800ddac:	77fb      	strb	r3, [r7, #31]
    goto error;
 800ddae:	e0fa      	b.n	800dfa6 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	2203      	movs	r2, #3
 800ddb4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	2200      	movs	r2, #0
 800ddbc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	68ba      	ldr	r2, [r7, #8]
 800ddc2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	88fa      	ldrh	r2, [r7, #6]
 800ddc8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	88fa      	ldrh	r2, [r7, #6]
 800ddce:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	2200      	movs	r2, #0
 800ddd4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	2200      	movs	r2, #0
 800ddda:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	2200      	movs	r2, #0
 800dde0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	2200      	movs	r2, #0
 800dde6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	2200      	movs	r2, #0
 800ddec:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	689b      	ldr	r3, [r3, #8]
 800ddf2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ddf6:	d107      	bne.n	800de08 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	681a      	ldr	r2, [r3, #0]
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800de06:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de12:	2b40      	cmp	r3, #64	; 0x40
 800de14:	d007      	beq.n	800de26 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	681a      	ldr	r2, [r3, #0]
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800de24:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	68db      	ldr	r3, [r3, #12]
 800de2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800de2e:	d14b      	bne.n	800dec8 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	685b      	ldr	r3, [r3, #4]
 800de34:	2b00      	cmp	r3, #0
 800de36:	d002      	beq.n	800de3e <HAL_SPI_Transmit+0xe6>
 800de38:	8afb      	ldrh	r3, [r7, #22]
 800de3a:	2b01      	cmp	r3, #1
 800de3c:	d13e      	bne.n	800debc <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de42:	881a      	ldrh	r2, [r3, #0]
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de4e:	1c9a      	adds	r2, r3, #2
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800de58:	b29b      	uxth	r3, r3
 800de5a:	3b01      	subs	r3, #1
 800de5c:	b29a      	uxth	r2, r3
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800de62:	e02b      	b.n	800debc <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	689b      	ldr	r3, [r3, #8]
 800de6a:	f003 0302 	and.w	r3, r3, #2
 800de6e:	2b02      	cmp	r3, #2
 800de70:	d112      	bne.n	800de98 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de76:	881a      	ldrh	r2, [r3, #0]
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de82:	1c9a      	adds	r2, r3, #2
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800de8c:	b29b      	uxth	r3, r3
 800de8e:	3b01      	subs	r3, #1
 800de90:	b29a      	uxth	r2, r3
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	86da      	strh	r2, [r3, #54]	; 0x36
 800de96:	e011      	b.n	800debc <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800de98:	f7fb fb0c 	bl	80094b4 <HAL_GetTick>
 800de9c:	4602      	mov	r2, r0
 800de9e:	69bb      	ldr	r3, [r7, #24]
 800dea0:	1ad3      	subs	r3, r2, r3
 800dea2:	683a      	ldr	r2, [r7, #0]
 800dea4:	429a      	cmp	r2, r3
 800dea6:	d803      	bhi.n	800deb0 <HAL_SPI_Transmit+0x158>
 800dea8:	683b      	ldr	r3, [r7, #0]
 800deaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800deae:	d102      	bne.n	800deb6 <HAL_SPI_Transmit+0x15e>
 800deb0:	683b      	ldr	r3, [r7, #0]
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d102      	bne.n	800debc <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800deb6:	2303      	movs	r3, #3
 800deb8:	77fb      	strb	r3, [r7, #31]
          goto error;
 800deba:	e074      	b.n	800dfa6 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800dec0:	b29b      	uxth	r3, r3
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d1ce      	bne.n	800de64 <HAL_SPI_Transmit+0x10c>
 800dec6:	e04c      	b.n	800df62 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	685b      	ldr	r3, [r3, #4]
 800decc:	2b00      	cmp	r3, #0
 800dece:	d002      	beq.n	800ded6 <HAL_SPI_Transmit+0x17e>
 800ded0:	8afb      	ldrh	r3, [r7, #22]
 800ded2:	2b01      	cmp	r3, #1
 800ded4:	d140      	bne.n	800df58 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	330c      	adds	r3, #12
 800dee0:	7812      	ldrb	r2, [r2, #0]
 800dee2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dee8:	1c5a      	adds	r2, r3, #1
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800def2:	b29b      	uxth	r3, r3
 800def4:	3b01      	subs	r3, #1
 800def6:	b29a      	uxth	r2, r3
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800defc:	e02c      	b.n	800df58 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	689b      	ldr	r3, [r3, #8]
 800df04:	f003 0302 	and.w	r3, r3, #2
 800df08:	2b02      	cmp	r3, #2
 800df0a:	d113      	bne.n	800df34 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	330c      	adds	r3, #12
 800df16:	7812      	ldrb	r2, [r2, #0]
 800df18:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df1e:	1c5a      	adds	r2, r3, #1
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800df28:	b29b      	uxth	r3, r3
 800df2a:	3b01      	subs	r3, #1
 800df2c:	b29a      	uxth	r2, r3
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	86da      	strh	r2, [r3, #54]	; 0x36
 800df32:	e011      	b.n	800df58 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800df34:	f7fb fabe 	bl	80094b4 <HAL_GetTick>
 800df38:	4602      	mov	r2, r0
 800df3a:	69bb      	ldr	r3, [r7, #24]
 800df3c:	1ad3      	subs	r3, r2, r3
 800df3e:	683a      	ldr	r2, [r7, #0]
 800df40:	429a      	cmp	r2, r3
 800df42:	d803      	bhi.n	800df4c <HAL_SPI_Transmit+0x1f4>
 800df44:	683b      	ldr	r3, [r7, #0]
 800df46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df4a:	d102      	bne.n	800df52 <HAL_SPI_Transmit+0x1fa>
 800df4c:	683b      	ldr	r3, [r7, #0]
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d102      	bne.n	800df58 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800df52:	2303      	movs	r3, #3
 800df54:	77fb      	strb	r3, [r7, #31]
          goto error;
 800df56:	e026      	b.n	800dfa6 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800df5c:	b29b      	uxth	r3, r3
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d1cd      	bne.n	800defe <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800df62:	69ba      	ldr	r2, [r7, #24]
 800df64:	6839      	ldr	r1, [r7, #0]
 800df66:	68f8      	ldr	r0, [r7, #12]
 800df68:	f000 fba4 	bl	800e6b4 <SPI_EndRxTxTransaction>
 800df6c:	4603      	mov	r3, r0
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d002      	beq.n	800df78 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	2220      	movs	r2, #32
 800df76:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	689b      	ldr	r3, [r3, #8]
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d10a      	bne.n	800df96 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800df80:	2300      	movs	r3, #0
 800df82:	613b      	str	r3, [r7, #16]
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	68db      	ldr	r3, [r3, #12]
 800df8a:	613b      	str	r3, [r7, #16]
 800df8c:	68fb      	ldr	r3, [r7, #12]
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	689b      	ldr	r3, [r3, #8]
 800df92:	613b      	str	r3, [r7, #16]
 800df94:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d002      	beq.n	800dfa4 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800df9e:	2301      	movs	r3, #1
 800dfa0:	77fb      	strb	r3, [r7, #31]
 800dfa2:	e000      	b.n	800dfa6 <HAL_SPI_Transmit+0x24e>
  }

error:
 800dfa4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	2201      	movs	r2, #1
 800dfaa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	2200      	movs	r2, #0
 800dfb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800dfb6:	7ffb      	ldrb	r3, [r7, #31]
}
 800dfb8:	4618      	mov	r0, r3
 800dfba:	3720      	adds	r7, #32
 800dfbc:	46bd      	mov	sp, r7
 800dfbe:	bd80      	pop	{r7, pc}

0800dfc0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dfc0:	b580      	push	{r7, lr}
 800dfc2:	b088      	sub	sp, #32
 800dfc4:	af02      	add	r7, sp, #8
 800dfc6:	60f8      	str	r0, [r7, #12]
 800dfc8:	60b9      	str	r1, [r7, #8]
 800dfca:	603b      	str	r3, [r7, #0]
 800dfcc:	4613      	mov	r3, r2
 800dfce:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800dfd0:	2300      	movs	r3, #0
 800dfd2:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	685b      	ldr	r3, [r3, #4]
 800dfd8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800dfdc:	d112      	bne.n	800e004 <HAL_SPI_Receive+0x44>
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	689b      	ldr	r3, [r3, #8]
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d10e      	bne.n	800e004 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	2204      	movs	r2, #4
 800dfea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800dfee:	88fa      	ldrh	r2, [r7, #6]
 800dff0:	683b      	ldr	r3, [r7, #0]
 800dff2:	9300      	str	r3, [sp, #0]
 800dff4:	4613      	mov	r3, r2
 800dff6:	68ba      	ldr	r2, [r7, #8]
 800dff8:	68b9      	ldr	r1, [r7, #8]
 800dffa:	68f8      	ldr	r0, [r7, #12]
 800dffc:	f000 f8e9 	bl	800e1d2 <HAL_SPI_TransmitReceive>
 800e000:	4603      	mov	r3, r0
 800e002:	e0e2      	b.n	800e1ca <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e00a:	2b01      	cmp	r3, #1
 800e00c:	d101      	bne.n	800e012 <HAL_SPI_Receive+0x52>
 800e00e:	2302      	movs	r3, #2
 800e010:	e0db      	b.n	800e1ca <HAL_SPI_Receive+0x20a>
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	2201      	movs	r2, #1
 800e016:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e01a:	f7fb fa4b 	bl	80094b4 <HAL_GetTick>
 800e01e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e026:	b2db      	uxtb	r3, r3
 800e028:	2b01      	cmp	r3, #1
 800e02a:	d002      	beq.n	800e032 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800e02c:	2302      	movs	r3, #2
 800e02e:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e030:	e0c2      	b.n	800e1b8 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800e032:	68bb      	ldr	r3, [r7, #8]
 800e034:	2b00      	cmp	r3, #0
 800e036:	d002      	beq.n	800e03e <HAL_SPI_Receive+0x7e>
 800e038:	88fb      	ldrh	r3, [r7, #6]
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d102      	bne.n	800e044 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800e03e:	2301      	movs	r3, #1
 800e040:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e042:	e0b9      	b.n	800e1b8 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	2204      	movs	r2, #4
 800e048:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	2200      	movs	r2, #0
 800e050:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	68ba      	ldr	r2, [r7, #8]
 800e056:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	88fa      	ldrh	r2, [r7, #6]
 800e05c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	88fa      	ldrh	r2, [r7, #6]
 800e062:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	2200      	movs	r2, #0
 800e068:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	2200      	movs	r2, #0
 800e06e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	2200      	movs	r2, #0
 800e074:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	2200      	movs	r2, #0
 800e07a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	2200      	movs	r2, #0
 800e080:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	689b      	ldr	r3, [r3, #8]
 800e086:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e08a:	d107      	bne.n	800e09c <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	681a      	ldr	r2, [r3, #0]
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800e09a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e0a6:	2b40      	cmp	r3, #64	; 0x40
 800e0a8:	d007      	beq.n	800e0ba <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	681a      	ldr	r2, [r3, #0]
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e0b8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	68db      	ldr	r3, [r3, #12]
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d162      	bne.n	800e188 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800e0c2:	e02e      	b.n	800e122 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	689b      	ldr	r3, [r3, #8]
 800e0ca:	f003 0301 	and.w	r3, r3, #1
 800e0ce:	2b01      	cmp	r3, #1
 800e0d0:	d115      	bne.n	800e0fe <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	f103 020c 	add.w	r2, r3, #12
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0de:	7812      	ldrb	r2, [r2, #0]
 800e0e0:	b2d2      	uxtb	r2, r2
 800e0e2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0e8:	1c5a      	adds	r2, r3, #1
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e0f2:	b29b      	uxth	r3, r3
 800e0f4:	3b01      	subs	r3, #1
 800e0f6:	b29a      	uxth	r2, r3
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e0fc:	e011      	b.n	800e122 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e0fe:	f7fb f9d9 	bl	80094b4 <HAL_GetTick>
 800e102:	4602      	mov	r2, r0
 800e104:	693b      	ldr	r3, [r7, #16]
 800e106:	1ad3      	subs	r3, r2, r3
 800e108:	683a      	ldr	r2, [r7, #0]
 800e10a:	429a      	cmp	r2, r3
 800e10c:	d803      	bhi.n	800e116 <HAL_SPI_Receive+0x156>
 800e10e:	683b      	ldr	r3, [r7, #0]
 800e110:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e114:	d102      	bne.n	800e11c <HAL_SPI_Receive+0x15c>
 800e116:	683b      	ldr	r3, [r7, #0]
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d102      	bne.n	800e122 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800e11c:	2303      	movs	r3, #3
 800e11e:	75fb      	strb	r3, [r7, #23]
          goto error;
 800e120:	e04a      	b.n	800e1b8 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e126:	b29b      	uxth	r3, r3
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d1cb      	bne.n	800e0c4 <HAL_SPI_Receive+0x104>
 800e12c:	e031      	b.n	800e192 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	689b      	ldr	r3, [r3, #8]
 800e134:	f003 0301 	and.w	r3, r3, #1
 800e138:	2b01      	cmp	r3, #1
 800e13a:	d113      	bne.n	800e164 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	68da      	ldr	r2, [r3, #12]
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e146:	b292      	uxth	r2, r2
 800e148:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e14e:	1c9a      	adds	r2, r3, #2
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e158:	b29b      	uxth	r3, r3
 800e15a:	3b01      	subs	r3, #1
 800e15c:	b29a      	uxth	r2, r3
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e162:	e011      	b.n	800e188 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e164:	f7fb f9a6 	bl	80094b4 <HAL_GetTick>
 800e168:	4602      	mov	r2, r0
 800e16a:	693b      	ldr	r3, [r7, #16]
 800e16c:	1ad3      	subs	r3, r2, r3
 800e16e:	683a      	ldr	r2, [r7, #0]
 800e170:	429a      	cmp	r2, r3
 800e172:	d803      	bhi.n	800e17c <HAL_SPI_Receive+0x1bc>
 800e174:	683b      	ldr	r3, [r7, #0]
 800e176:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e17a:	d102      	bne.n	800e182 <HAL_SPI_Receive+0x1c2>
 800e17c:	683b      	ldr	r3, [r7, #0]
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d102      	bne.n	800e188 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800e182:	2303      	movs	r3, #3
 800e184:	75fb      	strb	r3, [r7, #23]
          goto error;
 800e186:	e017      	b.n	800e1b8 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e18c:	b29b      	uxth	r3, r3
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d1cd      	bne.n	800e12e <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e192:	693a      	ldr	r2, [r7, #16]
 800e194:	6839      	ldr	r1, [r7, #0]
 800e196:	68f8      	ldr	r0, [r7, #12]
 800e198:	f000 fa27 	bl	800e5ea <SPI_EndRxTransaction>
 800e19c:	4603      	mov	r3, r0
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d002      	beq.n	800e1a8 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	2220      	movs	r2, #32
 800e1a6:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d002      	beq.n	800e1b6 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800e1b0:	2301      	movs	r3, #1
 800e1b2:	75fb      	strb	r3, [r7, #23]
 800e1b4:	e000      	b.n	800e1b8 <HAL_SPI_Receive+0x1f8>
  }

error :
 800e1b6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	2201      	movs	r2, #1
 800e1bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	2200      	movs	r2, #0
 800e1c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800e1c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800e1ca:	4618      	mov	r0, r3
 800e1cc:	3718      	adds	r7, #24
 800e1ce:	46bd      	mov	sp, r7
 800e1d0:	bd80      	pop	{r7, pc}

0800e1d2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800e1d2:	b580      	push	{r7, lr}
 800e1d4:	b08c      	sub	sp, #48	; 0x30
 800e1d6:	af00      	add	r7, sp, #0
 800e1d8:	60f8      	str	r0, [r7, #12]
 800e1da:	60b9      	str	r1, [r7, #8]
 800e1dc:	607a      	str	r2, [r7, #4]
 800e1de:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800e1e0:	2301      	movs	r3, #1
 800e1e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800e1e4:	2300      	movs	r3, #0
 800e1e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e1f0:	2b01      	cmp	r3, #1
 800e1f2:	d101      	bne.n	800e1f8 <HAL_SPI_TransmitReceive+0x26>
 800e1f4:	2302      	movs	r3, #2
 800e1f6:	e18a      	b.n	800e50e <HAL_SPI_TransmitReceive+0x33c>
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	2201      	movs	r2, #1
 800e1fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e200:	f7fb f958 	bl	80094b4 <HAL_GetTick>
 800e204:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800e206:	68fb      	ldr	r3, [r7, #12]
 800e208:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e20c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	685b      	ldr	r3, [r3, #4]
 800e214:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800e216:	887b      	ldrh	r3, [r7, #2]
 800e218:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800e21a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e21e:	2b01      	cmp	r3, #1
 800e220:	d00f      	beq.n	800e242 <HAL_SPI_TransmitReceive+0x70>
 800e222:	69fb      	ldr	r3, [r7, #28]
 800e224:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e228:	d107      	bne.n	800e23a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	689b      	ldr	r3, [r3, #8]
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d103      	bne.n	800e23a <HAL_SPI_TransmitReceive+0x68>
 800e232:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e236:	2b04      	cmp	r3, #4
 800e238:	d003      	beq.n	800e242 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800e23a:	2302      	movs	r3, #2
 800e23c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800e240:	e15b      	b.n	800e4fa <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800e242:	68bb      	ldr	r3, [r7, #8]
 800e244:	2b00      	cmp	r3, #0
 800e246:	d005      	beq.n	800e254 <HAL_SPI_TransmitReceive+0x82>
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d002      	beq.n	800e254 <HAL_SPI_TransmitReceive+0x82>
 800e24e:	887b      	ldrh	r3, [r7, #2]
 800e250:	2b00      	cmp	r3, #0
 800e252:	d103      	bne.n	800e25c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800e254:	2301      	movs	r3, #1
 800e256:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800e25a:	e14e      	b.n	800e4fa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e25c:	68fb      	ldr	r3, [r7, #12]
 800e25e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e262:	b2db      	uxtb	r3, r3
 800e264:	2b04      	cmp	r3, #4
 800e266:	d003      	beq.n	800e270 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	2205      	movs	r2, #5
 800e26c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	2200      	movs	r2, #0
 800e274:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	687a      	ldr	r2, [r7, #4]
 800e27a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	887a      	ldrh	r2, [r7, #2]
 800e280:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	887a      	ldrh	r2, [r7, #2]
 800e286:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	68ba      	ldr	r2, [r7, #8]
 800e28c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	887a      	ldrh	r2, [r7, #2]
 800e292:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	887a      	ldrh	r2, [r7, #2]
 800e298:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	2200      	movs	r2, #0
 800e29e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	2200      	movs	r2, #0
 800e2a4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e2b0:	2b40      	cmp	r3, #64	; 0x40
 800e2b2:	d007      	beq.n	800e2c4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	681a      	ldr	r2, [r3, #0]
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e2c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	68db      	ldr	r3, [r3, #12]
 800e2c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e2cc:	d178      	bne.n	800e3c0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	685b      	ldr	r3, [r3, #4]
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d002      	beq.n	800e2dc <HAL_SPI_TransmitReceive+0x10a>
 800e2d6:	8b7b      	ldrh	r3, [r7, #26]
 800e2d8:	2b01      	cmp	r3, #1
 800e2da:	d166      	bne.n	800e3aa <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2e0:	881a      	ldrh	r2, [r3, #0]
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e2ec:	1c9a      	adds	r2, r3, #2
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e2f6:	b29b      	uxth	r3, r3
 800e2f8:	3b01      	subs	r3, #1
 800e2fa:	b29a      	uxth	r2, r3
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e300:	e053      	b.n	800e3aa <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	689b      	ldr	r3, [r3, #8]
 800e308:	f003 0302 	and.w	r3, r3, #2
 800e30c:	2b02      	cmp	r3, #2
 800e30e:	d11b      	bne.n	800e348 <HAL_SPI_TransmitReceive+0x176>
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e314:	b29b      	uxth	r3, r3
 800e316:	2b00      	cmp	r3, #0
 800e318:	d016      	beq.n	800e348 <HAL_SPI_TransmitReceive+0x176>
 800e31a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e31c:	2b01      	cmp	r3, #1
 800e31e:	d113      	bne.n	800e348 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e324:	881a      	ldrh	r2, [r3, #0]
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e330:	1c9a      	adds	r2, r3, #2
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e33a:	b29b      	uxth	r3, r3
 800e33c:	3b01      	subs	r3, #1
 800e33e:	b29a      	uxth	r2, r3
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800e344:	2300      	movs	r3, #0
 800e346:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	689b      	ldr	r3, [r3, #8]
 800e34e:	f003 0301 	and.w	r3, r3, #1
 800e352:	2b01      	cmp	r3, #1
 800e354:	d119      	bne.n	800e38a <HAL_SPI_TransmitReceive+0x1b8>
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e35a:	b29b      	uxth	r3, r3
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d014      	beq.n	800e38a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	68da      	ldr	r2, [r3, #12]
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e36a:	b292      	uxth	r2, r2
 800e36c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e372:	1c9a      	adds	r2, r3, #2
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e37c:	b29b      	uxth	r3, r3
 800e37e:	3b01      	subs	r3, #1
 800e380:	b29a      	uxth	r2, r3
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800e386:	2301      	movs	r3, #1
 800e388:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800e38a:	f7fb f893 	bl	80094b4 <HAL_GetTick>
 800e38e:	4602      	mov	r2, r0
 800e390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e392:	1ad3      	subs	r3, r2, r3
 800e394:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e396:	429a      	cmp	r2, r3
 800e398:	d807      	bhi.n	800e3aa <HAL_SPI_TransmitReceive+0x1d8>
 800e39a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e39c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3a0:	d003      	beq.n	800e3aa <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800e3a2:	2303      	movs	r3, #3
 800e3a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800e3a8:	e0a7      	b.n	800e4fa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e3ae:	b29b      	uxth	r3, r3
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d1a6      	bne.n	800e302 <HAL_SPI_TransmitReceive+0x130>
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e3b8:	b29b      	uxth	r3, r3
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d1a1      	bne.n	800e302 <HAL_SPI_TransmitReceive+0x130>
 800e3be:	e07c      	b.n	800e4ba <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	685b      	ldr	r3, [r3, #4]
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d002      	beq.n	800e3ce <HAL_SPI_TransmitReceive+0x1fc>
 800e3c8:	8b7b      	ldrh	r3, [r7, #26]
 800e3ca:	2b01      	cmp	r3, #1
 800e3cc:	d16b      	bne.n	800e4a6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	330c      	adds	r3, #12
 800e3d8:	7812      	ldrb	r2, [r2, #0]
 800e3da:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e3e0:	1c5a      	adds	r2, r3, #1
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e3ea:	b29b      	uxth	r3, r3
 800e3ec:	3b01      	subs	r3, #1
 800e3ee:	b29a      	uxth	r2, r3
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e3f4:	e057      	b.n	800e4a6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	689b      	ldr	r3, [r3, #8]
 800e3fc:	f003 0302 	and.w	r3, r3, #2
 800e400:	2b02      	cmp	r3, #2
 800e402:	d11c      	bne.n	800e43e <HAL_SPI_TransmitReceive+0x26c>
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e408:	b29b      	uxth	r3, r3
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d017      	beq.n	800e43e <HAL_SPI_TransmitReceive+0x26c>
 800e40e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e410:	2b01      	cmp	r3, #1
 800e412:	d114      	bne.n	800e43e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800e414:	68fb      	ldr	r3, [r7, #12]
 800e416:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e418:	68fb      	ldr	r3, [r7, #12]
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	330c      	adds	r3, #12
 800e41e:	7812      	ldrb	r2, [r2, #0]
 800e420:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e426:	1c5a      	adds	r2, r3, #1
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e430:	b29b      	uxth	r3, r3
 800e432:	3b01      	subs	r3, #1
 800e434:	b29a      	uxth	r2, r3
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800e43a:	2300      	movs	r3, #0
 800e43c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	689b      	ldr	r3, [r3, #8]
 800e444:	f003 0301 	and.w	r3, r3, #1
 800e448:	2b01      	cmp	r3, #1
 800e44a:	d119      	bne.n	800e480 <HAL_SPI_TransmitReceive+0x2ae>
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e450:	b29b      	uxth	r3, r3
 800e452:	2b00      	cmp	r3, #0
 800e454:	d014      	beq.n	800e480 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800e456:	68fb      	ldr	r3, [r7, #12]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	68da      	ldr	r2, [r3, #12]
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e460:	b2d2      	uxtb	r2, r2
 800e462:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e468:	1c5a      	adds	r2, r3, #1
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e472:	b29b      	uxth	r3, r3
 800e474:	3b01      	subs	r3, #1
 800e476:	b29a      	uxth	r2, r3
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800e47c:	2301      	movs	r3, #1
 800e47e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800e480:	f7fb f818 	bl	80094b4 <HAL_GetTick>
 800e484:	4602      	mov	r2, r0
 800e486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e488:	1ad3      	subs	r3, r2, r3
 800e48a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e48c:	429a      	cmp	r2, r3
 800e48e:	d803      	bhi.n	800e498 <HAL_SPI_TransmitReceive+0x2c6>
 800e490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e492:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e496:	d102      	bne.n	800e49e <HAL_SPI_TransmitReceive+0x2cc>
 800e498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d103      	bne.n	800e4a6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800e49e:	2303      	movs	r3, #3
 800e4a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800e4a4:	e029      	b.n	800e4fa <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e4aa:	b29b      	uxth	r3, r3
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d1a2      	bne.n	800e3f6 <HAL_SPI_TransmitReceive+0x224>
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e4b4:	b29b      	uxth	r3, r3
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d19d      	bne.n	800e3f6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e4ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e4bc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e4be:	68f8      	ldr	r0, [r7, #12]
 800e4c0:	f000 f8f8 	bl	800e6b4 <SPI_EndRxTxTransaction>
 800e4c4:	4603      	mov	r3, r0
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d006      	beq.n	800e4d8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800e4ca:	2301      	movs	r3, #1
 800e4cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	2220      	movs	r2, #32
 800e4d4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800e4d6:	e010      	b.n	800e4fa <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	689b      	ldr	r3, [r3, #8]
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d10b      	bne.n	800e4f8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e4e0:	2300      	movs	r3, #0
 800e4e2:	617b      	str	r3, [r7, #20]
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	68db      	ldr	r3, [r3, #12]
 800e4ea:	617b      	str	r3, [r7, #20]
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	689b      	ldr	r3, [r3, #8]
 800e4f2:	617b      	str	r3, [r7, #20]
 800e4f4:	697b      	ldr	r3, [r7, #20]
 800e4f6:	e000      	b.n	800e4fa <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800e4f8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	2201      	movs	r2, #1
 800e4fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	2200      	movs	r2, #0
 800e506:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800e50a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800e50e:	4618      	mov	r0, r3
 800e510:	3730      	adds	r7, #48	; 0x30
 800e512:	46bd      	mov	sp, r7
 800e514:	bd80      	pop	{r7, pc}

0800e516 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800e516:	b580      	push	{r7, lr}
 800e518:	b084      	sub	sp, #16
 800e51a:	af00      	add	r7, sp, #0
 800e51c:	60f8      	str	r0, [r7, #12]
 800e51e:	60b9      	str	r1, [r7, #8]
 800e520:	603b      	str	r3, [r7, #0]
 800e522:	4613      	mov	r3, r2
 800e524:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e526:	e04c      	b.n	800e5c2 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800e528:	683b      	ldr	r3, [r7, #0]
 800e52a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e52e:	d048      	beq.n	800e5c2 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800e530:	f7fa ffc0 	bl	80094b4 <HAL_GetTick>
 800e534:	4602      	mov	r2, r0
 800e536:	69bb      	ldr	r3, [r7, #24]
 800e538:	1ad3      	subs	r3, r2, r3
 800e53a:	683a      	ldr	r2, [r7, #0]
 800e53c:	429a      	cmp	r2, r3
 800e53e:	d902      	bls.n	800e546 <SPI_WaitFlagStateUntilTimeout+0x30>
 800e540:	683b      	ldr	r3, [r7, #0]
 800e542:	2b00      	cmp	r3, #0
 800e544:	d13d      	bne.n	800e5c2 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	685a      	ldr	r2, [r3, #4]
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800e554:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	685b      	ldr	r3, [r3, #4]
 800e55a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e55e:	d111      	bne.n	800e584 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	689b      	ldr	r3, [r3, #8]
 800e564:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e568:	d004      	beq.n	800e574 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	689b      	ldr	r3, [r3, #8]
 800e56e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e572:	d107      	bne.n	800e584 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	681a      	ldr	r2, [r3, #0]
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e582:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e588:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e58c:	d10f      	bne.n	800e5ae <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	681a      	ldr	r2, [r3, #0]
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e59c:	601a      	str	r2, [r3, #0]
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	681a      	ldr	r2, [r3, #0]
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e5ac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	2201      	movs	r2, #1
 800e5b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	2200      	movs	r2, #0
 800e5ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800e5be:	2303      	movs	r3, #3
 800e5c0:	e00f      	b.n	800e5e2 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	689a      	ldr	r2, [r3, #8]
 800e5c8:	68bb      	ldr	r3, [r7, #8]
 800e5ca:	4013      	ands	r3, r2
 800e5cc:	68ba      	ldr	r2, [r7, #8]
 800e5ce:	429a      	cmp	r2, r3
 800e5d0:	bf0c      	ite	eq
 800e5d2:	2301      	moveq	r3, #1
 800e5d4:	2300      	movne	r3, #0
 800e5d6:	b2db      	uxtb	r3, r3
 800e5d8:	461a      	mov	r2, r3
 800e5da:	79fb      	ldrb	r3, [r7, #7]
 800e5dc:	429a      	cmp	r2, r3
 800e5de:	d1a3      	bne.n	800e528 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800e5e0:	2300      	movs	r3, #0
}
 800e5e2:	4618      	mov	r0, r3
 800e5e4:	3710      	adds	r7, #16
 800e5e6:	46bd      	mov	sp, r7
 800e5e8:	bd80      	pop	{r7, pc}

0800e5ea <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800e5ea:	b580      	push	{r7, lr}
 800e5ec:	b086      	sub	sp, #24
 800e5ee:	af02      	add	r7, sp, #8
 800e5f0:	60f8      	str	r0, [r7, #12]
 800e5f2:	60b9      	str	r1, [r7, #8]
 800e5f4:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	685b      	ldr	r3, [r3, #4]
 800e5fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e5fe:	d111      	bne.n	800e624 <SPI_EndRxTransaction+0x3a>
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	689b      	ldr	r3, [r3, #8]
 800e604:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e608:	d004      	beq.n	800e614 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	689b      	ldr	r3, [r3, #8]
 800e60e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e612:	d107      	bne.n	800e624 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	681a      	ldr	r2, [r3, #0]
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e622:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	685b      	ldr	r3, [r3, #4]
 800e628:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e62c:	d12a      	bne.n	800e684 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	689b      	ldr	r3, [r3, #8]
 800e632:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e636:	d012      	beq.n	800e65e <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	9300      	str	r3, [sp, #0]
 800e63c:	68bb      	ldr	r3, [r7, #8]
 800e63e:	2200      	movs	r2, #0
 800e640:	2180      	movs	r1, #128	; 0x80
 800e642:	68f8      	ldr	r0, [r7, #12]
 800e644:	f7ff ff67 	bl	800e516 <SPI_WaitFlagStateUntilTimeout>
 800e648:	4603      	mov	r3, r0
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d02d      	beq.n	800e6aa <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e652:	f043 0220 	orr.w	r2, r3, #32
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800e65a:	2303      	movs	r3, #3
 800e65c:	e026      	b.n	800e6ac <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	9300      	str	r3, [sp, #0]
 800e662:	68bb      	ldr	r3, [r7, #8]
 800e664:	2200      	movs	r2, #0
 800e666:	2101      	movs	r1, #1
 800e668:	68f8      	ldr	r0, [r7, #12]
 800e66a:	f7ff ff54 	bl	800e516 <SPI_WaitFlagStateUntilTimeout>
 800e66e:	4603      	mov	r3, r0
 800e670:	2b00      	cmp	r3, #0
 800e672:	d01a      	beq.n	800e6aa <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e678:	f043 0220 	orr.w	r2, r3, #32
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800e680:	2303      	movs	r3, #3
 800e682:	e013      	b.n	800e6ac <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	9300      	str	r3, [sp, #0]
 800e688:	68bb      	ldr	r3, [r7, #8]
 800e68a:	2200      	movs	r2, #0
 800e68c:	2101      	movs	r1, #1
 800e68e:	68f8      	ldr	r0, [r7, #12]
 800e690:	f7ff ff41 	bl	800e516 <SPI_WaitFlagStateUntilTimeout>
 800e694:	4603      	mov	r3, r0
 800e696:	2b00      	cmp	r3, #0
 800e698:	d007      	beq.n	800e6aa <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e69e:	f043 0220 	orr.w	r2, r3, #32
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800e6a6:	2303      	movs	r3, #3
 800e6a8:	e000      	b.n	800e6ac <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800e6aa:	2300      	movs	r3, #0
}
 800e6ac:	4618      	mov	r0, r3
 800e6ae:	3710      	adds	r7, #16
 800e6b0:	46bd      	mov	sp, r7
 800e6b2:	bd80      	pop	{r7, pc}

0800e6b4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800e6b4:	b580      	push	{r7, lr}
 800e6b6:	b088      	sub	sp, #32
 800e6b8:	af02      	add	r7, sp, #8
 800e6ba:	60f8      	str	r0, [r7, #12]
 800e6bc:	60b9      	str	r1, [r7, #8]
 800e6be:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800e6c0:	4b1b      	ldr	r3, [pc, #108]	; (800e730 <SPI_EndRxTxTransaction+0x7c>)
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	4a1b      	ldr	r2, [pc, #108]	; (800e734 <SPI_EndRxTxTransaction+0x80>)
 800e6c6:	fba2 2303 	umull	r2, r3, r2, r3
 800e6ca:	0d5b      	lsrs	r3, r3, #21
 800e6cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e6d0:	fb02 f303 	mul.w	r3, r2, r3
 800e6d4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	685b      	ldr	r3, [r3, #4]
 800e6da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e6de:	d112      	bne.n	800e706 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	9300      	str	r3, [sp, #0]
 800e6e4:	68bb      	ldr	r3, [r7, #8]
 800e6e6:	2200      	movs	r2, #0
 800e6e8:	2180      	movs	r1, #128	; 0x80
 800e6ea:	68f8      	ldr	r0, [r7, #12]
 800e6ec:	f7ff ff13 	bl	800e516 <SPI_WaitFlagStateUntilTimeout>
 800e6f0:	4603      	mov	r3, r0
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d016      	beq.n	800e724 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e6f6:	68fb      	ldr	r3, [r7, #12]
 800e6f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e6fa:	f043 0220 	orr.w	r2, r3, #32
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800e702:	2303      	movs	r3, #3
 800e704:	e00f      	b.n	800e726 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800e706:	697b      	ldr	r3, [r7, #20]
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d00a      	beq.n	800e722 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800e70c:	697b      	ldr	r3, [r7, #20]
 800e70e:	3b01      	subs	r3, #1
 800e710:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	689b      	ldr	r3, [r3, #8]
 800e718:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e71c:	2b80      	cmp	r3, #128	; 0x80
 800e71e:	d0f2      	beq.n	800e706 <SPI_EndRxTxTransaction+0x52>
 800e720:	e000      	b.n	800e724 <SPI_EndRxTxTransaction+0x70>
        break;
 800e722:	bf00      	nop
  }

  return HAL_OK;
 800e724:	2300      	movs	r3, #0
}
 800e726:	4618      	mov	r0, r3
 800e728:	3718      	adds	r7, #24
 800e72a:	46bd      	mov	sp, r7
 800e72c:	bd80      	pop	{r7, pc}
 800e72e:	bf00      	nop
 800e730:	20000000 	.word	0x20000000
 800e734:	165e9f81 	.word	0x165e9f81

0800e738 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e738:	b580      	push	{r7, lr}
 800e73a:	b082      	sub	sp, #8
 800e73c:	af00      	add	r7, sp, #0
 800e73e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	2b00      	cmp	r3, #0
 800e744:	d101      	bne.n	800e74a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e746:	2301      	movs	r3, #1
 800e748:	e01d      	b.n	800e786 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e750:	b2db      	uxtb	r3, r3
 800e752:	2b00      	cmp	r3, #0
 800e754:	d106      	bne.n	800e764 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	2200      	movs	r2, #0
 800e75a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e75e:	6878      	ldr	r0, [r7, #4]
 800e760:	f7f8 fc1c 	bl	8006f9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	2202      	movs	r2, #2
 800e768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	681a      	ldr	r2, [r3, #0]
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	3304      	adds	r3, #4
 800e774:	4619      	mov	r1, r3
 800e776:	4610      	mov	r0, r2
 800e778:	f000 fb56 	bl	800ee28 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	2201      	movs	r2, #1
 800e780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e784:	2300      	movs	r3, #0
}
 800e786:	4618      	mov	r0, r3
 800e788:	3708      	adds	r7, #8
 800e78a:	46bd      	mov	sp, r7
 800e78c:	bd80      	pop	{r7, pc}

0800e78e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e78e:	b480      	push	{r7}
 800e790:	b085      	sub	sp, #20
 800e792:	af00      	add	r7, sp, #0
 800e794:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	68da      	ldr	r2, [r3, #12]
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	f042 0201 	orr.w	r2, r2, #1
 800e7a4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	689b      	ldr	r3, [r3, #8]
 800e7ac:	f003 0307 	and.w	r3, r3, #7
 800e7b0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	2b06      	cmp	r3, #6
 800e7b6:	d007      	beq.n	800e7c8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	681a      	ldr	r2, [r3, #0]
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	f042 0201 	orr.w	r2, r2, #1
 800e7c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e7c8:	2300      	movs	r3, #0
}
 800e7ca:	4618      	mov	r0, r3
 800e7cc:	3714      	adds	r7, #20
 800e7ce:	46bd      	mov	sp, r7
 800e7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7d4:	4770      	bx	lr

0800e7d6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e7d6:	b580      	push	{r7, lr}
 800e7d8:	b082      	sub	sp, #8
 800e7da:	af00      	add	r7, sp, #0
 800e7dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	d101      	bne.n	800e7e8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e7e4:	2301      	movs	r3, #1
 800e7e6:	e01d      	b.n	800e824 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e7ee:	b2db      	uxtb	r3, r3
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d106      	bne.n	800e802 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	2200      	movs	r2, #0
 800e7f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e7fc:	6878      	ldr	r0, [r7, #4]
 800e7fe:	f7f8 fb59 	bl	8006eb4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	2202      	movs	r2, #2
 800e806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	681a      	ldr	r2, [r3, #0]
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	3304      	adds	r3, #4
 800e812:	4619      	mov	r1, r3
 800e814:	4610      	mov	r0, r2
 800e816:	f000 fb07 	bl	800ee28 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	2201      	movs	r2, #1
 800e81e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e822:	2300      	movs	r3, #0
}
 800e824:	4618      	mov	r0, r3
 800e826:	3708      	adds	r7, #8
 800e828:	46bd      	mov	sp, r7
 800e82a:	bd80      	pop	{r7, pc}

0800e82c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e82c:	b580      	push	{r7, lr}
 800e82e:	b084      	sub	sp, #16
 800e830:	af00      	add	r7, sp, #0
 800e832:	6078      	str	r0, [r7, #4]
 800e834:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	2201      	movs	r2, #1
 800e83c:	6839      	ldr	r1, [r7, #0]
 800e83e:	4618      	mov	r0, r3
 800e840:	f000 fd42 	bl	800f2c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	4a15      	ldr	r2, [pc, #84]	; (800e8a0 <HAL_TIM_PWM_Start+0x74>)
 800e84a:	4293      	cmp	r3, r2
 800e84c:	d004      	beq.n	800e858 <HAL_TIM_PWM_Start+0x2c>
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	4a14      	ldr	r2, [pc, #80]	; (800e8a4 <HAL_TIM_PWM_Start+0x78>)
 800e854:	4293      	cmp	r3, r2
 800e856:	d101      	bne.n	800e85c <HAL_TIM_PWM_Start+0x30>
 800e858:	2301      	movs	r3, #1
 800e85a:	e000      	b.n	800e85e <HAL_TIM_PWM_Start+0x32>
 800e85c:	2300      	movs	r3, #0
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d007      	beq.n	800e872 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	681b      	ldr	r3, [r3, #0]
 800e866:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e870:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	689b      	ldr	r3, [r3, #8]
 800e878:	f003 0307 	and.w	r3, r3, #7
 800e87c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e87e:	68fb      	ldr	r3, [r7, #12]
 800e880:	2b06      	cmp	r3, #6
 800e882:	d007      	beq.n	800e894 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	681a      	ldr	r2, [r3, #0]
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	f042 0201 	orr.w	r2, r2, #1
 800e892:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e894:	2300      	movs	r3, #0
}
 800e896:	4618      	mov	r0, r3
 800e898:	3710      	adds	r7, #16
 800e89a:	46bd      	mov	sp, r7
 800e89c:	bd80      	pop	{r7, pc}
 800e89e:	bf00      	nop
 800e8a0:	40010000 	.word	0x40010000
 800e8a4:	40010400 	.word	0x40010400

0800e8a8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800e8a8:	b580      	push	{r7, lr}
 800e8aa:	b086      	sub	sp, #24
 800e8ac:	af00      	add	r7, sp, #0
 800e8ae:	6078      	str	r0, [r7, #4]
 800e8b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d101      	bne.n	800e8bc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800e8b8:	2301      	movs	r3, #1
 800e8ba:	e083      	b.n	800e9c4 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e8c2:	b2db      	uxtb	r3, r3
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d106      	bne.n	800e8d6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	2200      	movs	r2, #0
 800e8cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800e8d0:	6878      	ldr	r0, [r7, #4]
 800e8d2:	f7f8 fbf3 	bl	80070bc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	2202      	movs	r2, #2
 800e8da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	689b      	ldr	r3, [r3, #8]
 800e8e4:	687a      	ldr	r2, [r7, #4]
 800e8e6:	6812      	ldr	r2, [r2, #0]
 800e8e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e8ec:	f023 0307 	bic.w	r3, r3, #7
 800e8f0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	681a      	ldr	r2, [r3, #0]
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	3304      	adds	r3, #4
 800e8fa:	4619      	mov	r1, r3
 800e8fc:	4610      	mov	r0, r2
 800e8fe:	f000 fa93 	bl	800ee28 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	689b      	ldr	r3, [r3, #8]
 800e908:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	699b      	ldr	r3, [r3, #24]
 800e910:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	6a1b      	ldr	r3, [r3, #32]
 800e918:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800e91a:	683b      	ldr	r3, [r7, #0]
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	697a      	ldr	r2, [r7, #20]
 800e920:	4313      	orrs	r3, r2
 800e922:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800e924:	693b      	ldr	r3, [r7, #16]
 800e926:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e92a:	f023 0303 	bic.w	r3, r3, #3
 800e92e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800e930:	683b      	ldr	r3, [r7, #0]
 800e932:	689a      	ldr	r2, [r3, #8]
 800e934:	683b      	ldr	r3, [r7, #0]
 800e936:	699b      	ldr	r3, [r3, #24]
 800e938:	021b      	lsls	r3, r3, #8
 800e93a:	4313      	orrs	r3, r2
 800e93c:	693a      	ldr	r2, [r7, #16]
 800e93e:	4313      	orrs	r3, r2
 800e940:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800e942:	693b      	ldr	r3, [r7, #16]
 800e944:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800e948:	f023 030c 	bic.w	r3, r3, #12
 800e94c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800e94e:	693b      	ldr	r3, [r7, #16]
 800e950:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e954:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e958:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800e95a:	683b      	ldr	r3, [r7, #0]
 800e95c:	68da      	ldr	r2, [r3, #12]
 800e95e:	683b      	ldr	r3, [r7, #0]
 800e960:	69db      	ldr	r3, [r3, #28]
 800e962:	021b      	lsls	r3, r3, #8
 800e964:	4313      	orrs	r3, r2
 800e966:	693a      	ldr	r2, [r7, #16]
 800e968:	4313      	orrs	r3, r2
 800e96a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800e96c:	683b      	ldr	r3, [r7, #0]
 800e96e:	691b      	ldr	r3, [r3, #16]
 800e970:	011a      	lsls	r2, r3, #4
 800e972:	683b      	ldr	r3, [r7, #0]
 800e974:	6a1b      	ldr	r3, [r3, #32]
 800e976:	031b      	lsls	r3, r3, #12
 800e978:	4313      	orrs	r3, r2
 800e97a:	693a      	ldr	r2, [r7, #16]
 800e97c:	4313      	orrs	r3, r2
 800e97e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800e986:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800e98e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800e990:	683b      	ldr	r3, [r7, #0]
 800e992:	685a      	ldr	r2, [r3, #4]
 800e994:	683b      	ldr	r3, [r7, #0]
 800e996:	695b      	ldr	r3, [r3, #20]
 800e998:	011b      	lsls	r3, r3, #4
 800e99a:	4313      	orrs	r3, r2
 800e99c:	68fa      	ldr	r2, [r7, #12]
 800e99e:	4313      	orrs	r3, r2
 800e9a0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	697a      	ldr	r2, [r7, #20]
 800e9a8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	693a      	ldr	r2, [r7, #16]
 800e9b0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	681b      	ldr	r3, [r3, #0]
 800e9b6:	68fa      	ldr	r2, [r7, #12]
 800e9b8:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	2201      	movs	r2, #1
 800e9be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e9c2:	2300      	movs	r3, #0
}
 800e9c4:	4618      	mov	r0, r3
 800e9c6:	3718      	adds	r7, #24
 800e9c8:	46bd      	mov	sp, r7
 800e9ca:	bd80      	pop	{r7, pc}

0800e9cc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e9cc:	b580      	push	{r7, lr}
 800e9ce:	b082      	sub	sp, #8
 800e9d0:	af00      	add	r7, sp, #0
 800e9d2:	6078      	str	r0, [r7, #4]
 800e9d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800e9d6:	683b      	ldr	r3, [r7, #0]
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d002      	beq.n	800e9e2 <HAL_TIM_Encoder_Start+0x16>
 800e9dc:	2b04      	cmp	r3, #4
 800e9de:	d008      	beq.n	800e9f2 <HAL_TIM_Encoder_Start+0x26>
 800e9e0:	e00f      	b.n	800ea02 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	2201      	movs	r2, #1
 800e9e8:	2100      	movs	r1, #0
 800e9ea:	4618      	mov	r0, r3
 800e9ec:	f000 fc6c 	bl	800f2c8 <TIM_CCxChannelCmd>
      break;
 800e9f0:	e016      	b.n	800ea20 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	2201      	movs	r2, #1
 800e9f8:	2104      	movs	r1, #4
 800e9fa:	4618      	mov	r0, r3
 800e9fc:	f000 fc64 	bl	800f2c8 <TIM_CCxChannelCmd>
      break;
 800ea00:	e00e      	b.n	800ea20 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	2201      	movs	r2, #1
 800ea08:	2100      	movs	r1, #0
 800ea0a:	4618      	mov	r0, r3
 800ea0c:	f000 fc5c 	bl	800f2c8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	2201      	movs	r2, #1
 800ea16:	2104      	movs	r1, #4
 800ea18:	4618      	mov	r0, r3
 800ea1a:	f000 fc55 	bl	800f2c8 <TIM_CCxChannelCmd>
      break;
 800ea1e:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	681a      	ldr	r2, [r3, #0]
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	f042 0201 	orr.w	r2, r2, #1
 800ea2e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800ea30:	2300      	movs	r3, #0
}
 800ea32:	4618      	mov	r0, r3
 800ea34:	3708      	adds	r7, #8
 800ea36:	46bd      	mov	sp, r7
 800ea38:	bd80      	pop	{r7, pc}

0800ea3a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ea3a:	b580      	push	{r7, lr}
 800ea3c:	b082      	sub	sp, #8
 800ea3e:	af00      	add	r7, sp, #0
 800ea40:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	691b      	ldr	r3, [r3, #16]
 800ea48:	f003 0302 	and.w	r3, r3, #2
 800ea4c:	2b02      	cmp	r3, #2
 800ea4e:	d122      	bne.n	800ea96 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	68db      	ldr	r3, [r3, #12]
 800ea56:	f003 0302 	and.w	r3, r3, #2
 800ea5a:	2b02      	cmp	r3, #2
 800ea5c:	d11b      	bne.n	800ea96 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	681b      	ldr	r3, [r3, #0]
 800ea62:	f06f 0202 	mvn.w	r2, #2
 800ea66:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	2201      	movs	r2, #1
 800ea6c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	699b      	ldr	r3, [r3, #24]
 800ea74:	f003 0303 	and.w	r3, r3, #3
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d003      	beq.n	800ea84 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ea7c:	6878      	ldr	r0, [r7, #4]
 800ea7e:	f000 f9b5 	bl	800edec <HAL_TIM_IC_CaptureCallback>
 800ea82:	e005      	b.n	800ea90 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ea84:	6878      	ldr	r0, [r7, #4]
 800ea86:	f000 f9a7 	bl	800edd8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ea8a:	6878      	ldr	r0, [r7, #4]
 800ea8c:	f000 f9b8 	bl	800ee00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	2200      	movs	r2, #0
 800ea94:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	691b      	ldr	r3, [r3, #16]
 800ea9c:	f003 0304 	and.w	r3, r3, #4
 800eaa0:	2b04      	cmp	r3, #4
 800eaa2:	d122      	bne.n	800eaea <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	68db      	ldr	r3, [r3, #12]
 800eaaa:	f003 0304 	and.w	r3, r3, #4
 800eaae:	2b04      	cmp	r3, #4
 800eab0:	d11b      	bne.n	800eaea <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	f06f 0204 	mvn.w	r2, #4
 800eaba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	2202      	movs	r2, #2
 800eac0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	699b      	ldr	r3, [r3, #24]
 800eac8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d003      	beq.n	800ead8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ead0:	6878      	ldr	r0, [r7, #4]
 800ead2:	f000 f98b 	bl	800edec <HAL_TIM_IC_CaptureCallback>
 800ead6:	e005      	b.n	800eae4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ead8:	6878      	ldr	r0, [r7, #4]
 800eada:	f000 f97d 	bl	800edd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800eade:	6878      	ldr	r0, [r7, #4]
 800eae0:	f000 f98e 	bl	800ee00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	2200      	movs	r2, #0
 800eae8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	691b      	ldr	r3, [r3, #16]
 800eaf0:	f003 0308 	and.w	r3, r3, #8
 800eaf4:	2b08      	cmp	r3, #8
 800eaf6:	d122      	bne.n	800eb3e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	68db      	ldr	r3, [r3, #12]
 800eafe:	f003 0308 	and.w	r3, r3, #8
 800eb02:	2b08      	cmp	r3, #8
 800eb04:	d11b      	bne.n	800eb3e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	f06f 0208 	mvn.w	r2, #8
 800eb0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	2204      	movs	r2, #4
 800eb14:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	69db      	ldr	r3, [r3, #28]
 800eb1c:	f003 0303 	and.w	r3, r3, #3
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d003      	beq.n	800eb2c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800eb24:	6878      	ldr	r0, [r7, #4]
 800eb26:	f000 f961 	bl	800edec <HAL_TIM_IC_CaptureCallback>
 800eb2a:	e005      	b.n	800eb38 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800eb2c:	6878      	ldr	r0, [r7, #4]
 800eb2e:	f000 f953 	bl	800edd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800eb32:	6878      	ldr	r0, [r7, #4]
 800eb34:	f000 f964 	bl	800ee00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	2200      	movs	r2, #0
 800eb3c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	691b      	ldr	r3, [r3, #16]
 800eb44:	f003 0310 	and.w	r3, r3, #16
 800eb48:	2b10      	cmp	r3, #16
 800eb4a:	d122      	bne.n	800eb92 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	68db      	ldr	r3, [r3, #12]
 800eb52:	f003 0310 	and.w	r3, r3, #16
 800eb56:	2b10      	cmp	r3, #16
 800eb58:	d11b      	bne.n	800eb92 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	f06f 0210 	mvn.w	r2, #16
 800eb62:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	2208      	movs	r2, #8
 800eb68:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	69db      	ldr	r3, [r3, #28]
 800eb70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	d003      	beq.n	800eb80 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800eb78:	6878      	ldr	r0, [r7, #4]
 800eb7a:	f000 f937 	bl	800edec <HAL_TIM_IC_CaptureCallback>
 800eb7e:	e005      	b.n	800eb8c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800eb80:	6878      	ldr	r0, [r7, #4]
 800eb82:	f000 f929 	bl	800edd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800eb86:	6878      	ldr	r0, [r7, #4]
 800eb88:	f000 f93a 	bl	800ee00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	2200      	movs	r2, #0
 800eb90:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	691b      	ldr	r3, [r3, #16]
 800eb98:	f003 0301 	and.w	r3, r3, #1
 800eb9c:	2b01      	cmp	r3, #1
 800eb9e:	d10e      	bne.n	800ebbe <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	68db      	ldr	r3, [r3, #12]
 800eba6:	f003 0301 	and.w	r3, r3, #1
 800ebaa:	2b01      	cmp	r3, #1
 800ebac:	d107      	bne.n	800ebbe <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	f06f 0201 	mvn.w	r2, #1
 800ebb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ebb8:	6878      	ldr	r0, [r7, #4]
 800ebba:	f7f6 ff69 	bl	8005a90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	691b      	ldr	r3, [r3, #16]
 800ebc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ebc8:	2b80      	cmp	r3, #128	; 0x80
 800ebca:	d10e      	bne.n	800ebea <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	68db      	ldr	r3, [r3, #12]
 800ebd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ebd6:	2b80      	cmp	r3, #128	; 0x80
 800ebd8:	d107      	bne.n	800ebea <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ebe2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ebe4:	6878      	ldr	r0, [r7, #4]
 800ebe6:	f000 fc6d 	bl	800f4c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	691b      	ldr	r3, [r3, #16]
 800ebf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ebf4:	2b40      	cmp	r3, #64	; 0x40
 800ebf6:	d10e      	bne.n	800ec16 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	68db      	ldr	r3, [r3, #12]
 800ebfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec02:	2b40      	cmp	r3, #64	; 0x40
 800ec04:	d107      	bne.n	800ec16 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ec0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ec10:	6878      	ldr	r0, [r7, #4]
 800ec12:	f000 f8ff 	bl	800ee14 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	691b      	ldr	r3, [r3, #16]
 800ec1c:	f003 0320 	and.w	r3, r3, #32
 800ec20:	2b20      	cmp	r3, #32
 800ec22:	d10e      	bne.n	800ec42 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	68db      	ldr	r3, [r3, #12]
 800ec2a:	f003 0320 	and.w	r3, r3, #32
 800ec2e:	2b20      	cmp	r3, #32
 800ec30:	d107      	bne.n	800ec42 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	f06f 0220 	mvn.w	r2, #32
 800ec3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ec3c:	6878      	ldr	r0, [r7, #4]
 800ec3e:	f000 fc37 	bl	800f4b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ec42:	bf00      	nop
 800ec44:	3708      	adds	r7, #8
 800ec46:	46bd      	mov	sp, r7
 800ec48:	bd80      	pop	{r7, pc}
	...

0800ec4c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ec4c:	b580      	push	{r7, lr}
 800ec4e:	b084      	sub	sp, #16
 800ec50:	af00      	add	r7, sp, #0
 800ec52:	60f8      	str	r0, [r7, #12]
 800ec54:	60b9      	str	r1, [r7, #8]
 800ec56:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ec5e:	2b01      	cmp	r3, #1
 800ec60:	d101      	bne.n	800ec66 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800ec62:	2302      	movs	r3, #2
 800ec64:	e0b4      	b.n	800edd0 <HAL_TIM_PWM_ConfigChannel+0x184>
 800ec66:	68fb      	ldr	r3, [r7, #12]
 800ec68:	2201      	movs	r2, #1
 800ec6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	2202      	movs	r2, #2
 800ec72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	2b0c      	cmp	r3, #12
 800ec7a:	f200 809f 	bhi.w	800edbc <HAL_TIM_PWM_ConfigChannel+0x170>
 800ec7e:	a201      	add	r2, pc, #4	; (adr r2, 800ec84 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800ec80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec84:	0800ecb9 	.word	0x0800ecb9
 800ec88:	0800edbd 	.word	0x0800edbd
 800ec8c:	0800edbd 	.word	0x0800edbd
 800ec90:	0800edbd 	.word	0x0800edbd
 800ec94:	0800ecf9 	.word	0x0800ecf9
 800ec98:	0800edbd 	.word	0x0800edbd
 800ec9c:	0800edbd 	.word	0x0800edbd
 800eca0:	0800edbd 	.word	0x0800edbd
 800eca4:	0800ed3b 	.word	0x0800ed3b
 800eca8:	0800edbd 	.word	0x0800edbd
 800ecac:	0800edbd 	.word	0x0800edbd
 800ecb0:	0800edbd 	.word	0x0800edbd
 800ecb4:	0800ed7b 	.word	0x0800ed7b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	68b9      	ldr	r1, [r7, #8]
 800ecbe:	4618      	mov	r0, r3
 800ecc0:	f000 f952 	bl	800ef68 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	699a      	ldr	r2, [r3, #24]
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	f042 0208 	orr.w	r2, r2, #8
 800ecd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	699a      	ldr	r2, [r3, #24]
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	f022 0204 	bic.w	r2, r2, #4
 800ece2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	6999      	ldr	r1, [r3, #24]
 800ecea:	68bb      	ldr	r3, [r7, #8]
 800ecec:	691a      	ldr	r2, [r3, #16]
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	430a      	orrs	r2, r1
 800ecf4:	619a      	str	r2, [r3, #24]
      break;
 800ecf6:	e062      	b.n	800edbe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	68b9      	ldr	r1, [r7, #8]
 800ecfe:	4618      	mov	r0, r3
 800ed00:	f000 f9a2 	bl	800f048 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	699a      	ldr	r2, [r3, #24]
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ed12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	699a      	ldr	r2, [r3, #24]
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ed22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ed24:	68fb      	ldr	r3, [r7, #12]
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	6999      	ldr	r1, [r3, #24]
 800ed2a:	68bb      	ldr	r3, [r7, #8]
 800ed2c:	691b      	ldr	r3, [r3, #16]
 800ed2e:	021a      	lsls	r2, r3, #8
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	430a      	orrs	r2, r1
 800ed36:	619a      	str	r2, [r3, #24]
      break;
 800ed38:	e041      	b.n	800edbe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ed3a:	68fb      	ldr	r3, [r7, #12]
 800ed3c:	681b      	ldr	r3, [r3, #0]
 800ed3e:	68b9      	ldr	r1, [r7, #8]
 800ed40:	4618      	mov	r0, r3
 800ed42:	f000 f9f7 	bl	800f134 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ed46:	68fb      	ldr	r3, [r7, #12]
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	69da      	ldr	r2, [r3, #28]
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	f042 0208 	orr.w	r2, r2, #8
 800ed54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	69da      	ldr	r2, [r3, #28]
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	f022 0204 	bic.w	r2, r2, #4
 800ed64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	69d9      	ldr	r1, [r3, #28]
 800ed6c:	68bb      	ldr	r3, [r7, #8]
 800ed6e:	691a      	ldr	r2, [r3, #16]
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	430a      	orrs	r2, r1
 800ed76:	61da      	str	r2, [r3, #28]
      break;
 800ed78:	e021      	b.n	800edbe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	68b9      	ldr	r1, [r7, #8]
 800ed80:	4618      	mov	r0, r3
 800ed82:	f000 fa4b 	bl	800f21c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ed86:	68fb      	ldr	r3, [r7, #12]
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	69da      	ldr	r2, [r3, #28]
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ed94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ed96:	68fb      	ldr	r3, [r7, #12]
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	69da      	ldr	r2, [r3, #28]
 800ed9c:	68fb      	ldr	r3, [r7, #12]
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800eda4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800eda6:	68fb      	ldr	r3, [r7, #12]
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	69d9      	ldr	r1, [r3, #28]
 800edac:	68bb      	ldr	r3, [r7, #8]
 800edae:	691b      	ldr	r3, [r3, #16]
 800edb0:	021a      	lsls	r2, r3, #8
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	430a      	orrs	r2, r1
 800edb8:	61da      	str	r2, [r3, #28]
      break;
 800edba:	e000      	b.n	800edbe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800edbc:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	2201      	movs	r2, #1
 800edc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	2200      	movs	r2, #0
 800edca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800edce:	2300      	movs	r3, #0
}
 800edd0:	4618      	mov	r0, r3
 800edd2:	3710      	adds	r7, #16
 800edd4:	46bd      	mov	sp, r7
 800edd6:	bd80      	pop	{r7, pc}

0800edd8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800edd8:	b480      	push	{r7}
 800edda:	b083      	sub	sp, #12
 800eddc:	af00      	add	r7, sp, #0
 800edde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ede0:	bf00      	nop
 800ede2:	370c      	adds	r7, #12
 800ede4:	46bd      	mov	sp, r7
 800ede6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edea:	4770      	bx	lr

0800edec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800edec:	b480      	push	{r7}
 800edee:	b083      	sub	sp, #12
 800edf0:	af00      	add	r7, sp, #0
 800edf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800edf4:	bf00      	nop
 800edf6:	370c      	adds	r7, #12
 800edf8:	46bd      	mov	sp, r7
 800edfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edfe:	4770      	bx	lr

0800ee00 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ee00:	b480      	push	{r7}
 800ee02:	b083      	sub	sp, #12
 800ee04:	af00      	add	r7, sp, #0
 800ee06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ee08:	bf00      	nop
 800ee0a:	370c      	adds	r7, #12
 800ee0c:	46bd      	mov	sp, r7
 800ee0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee12:	4770      	bx	lr

0800ee14 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ee14:	b480      	push	{r7}
 800ee16:	b083      	sub	sp, #12
 800ee18:	af00      	add	r7, sp, #0
 800ee1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ee1c:	bf00      	nop
 800ee1e:	370c      	adds	r7, #12
 800ee20:	46bd      	mov	sp, r7
 800ee22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee26:	4770      	bx	lr

0800ee28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ee28:	b480      	push	{r7}
 800ee2a:	b085      	sub	sp, #20
 800ee2c:	af00      	add	r7, sp, #0
 800ee2e:	6078      	str	r0, [r7, #4]
 800ee30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	4a40      	ldr	r2, [pc, #256]	; (800ef3c <TIM_Base_SetConfig+0x114>)
 800ee3c:	4293      	cmp	r3, r2
 800ee3e:	d013      	beq.n	800ee68 <TIM_Base_SetConfig+0x40>
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ee46:	d00f      	beq.n	800ee68 <TIM_Base_SetConfig+0x40>
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	4a3d      	ldr	r2, [pc, #244]	; (800ef40 <TIM_Base_SetConfig+0x118>)
 800ee4c:	4293      	cmp	r3, r2
 800ee4e:	d00b      	beq.n	800ee68 <TIM_Base_SetConfig+0x40>
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	4a3c      	ldr	r2, [pc, #240]	; (800ef44 <TIM_Base_SetConfig+0x11c>)
 800ee54:	4293      	cmp	r3, r2
 800ee56:	d007      	beq.n	800ee68 <TIM_Base_SetConfig+0x40>
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	4a3b      	ldr	r2, [pc, #236]	; (800ef48 <TIM_Base_SetConfig+0x120>)
 800ee5c:	4293      	cmp	r3, r2
 800ee5e:	d003      	beq.n	800ee68 <TIM_Base_SetConfig+0x40>
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	4a3a      	ldr	r2, [pc, #232]	; (800ef4c <TIM_Base_SetConfig+0x124>)
 800ee64:	4293      	cmp	r3, r2
 800ee66:	d108      	bne.n	800ee7a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ee6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ee70:	683b      	ldr	r3, [r7, #0]
 800ee72:	685b      	ldr	r3, [r3, #4]
 800ee74:	68fa      	ldr	r2, [r7, #12]
 800ee76:	4313      	orrs	r3, r2
 800ee78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	4a2f      	ldr	r2, [pc, #188]	; (800ef3c <TIM_Base_SetConfig+0x114>)
 800ee7e:	4293      	cmp	r3, r2
 800ee80:	d02b      	beq.n	800eeda <TIM_Base_SetConfig+0xb2>
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ee88:	d027      	beq.n	800eeda <TIM_Base_SetConfig+0xb2>
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	4a2c      	ldr	r2, [pc, #176]	; (800ef40 <TIM_Base_SetConfig+0x118>)
 800ee8e:	4293      	cmp	r3, r2
 800ee90:	d023      	beq.n	800eeda <TIM_Base_SetConfig+0xb2>
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	4a2b      	ldr	r2, [pc, #172]	; (800ef44 <TIM_Base_SetConfig+0x11c>)
 800ee96:	4293      	cmp	r3, r2
 800ee98:	d01f      	beq.n	800eeda <TIM_Base_SetConfig+0xb2>
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	4a2a      	ldr	r2, [pc, #168]	; (800ef48 <TIM_Base_SetConfig+0x120>)
 800ee9e:	4293      	cmp	r3, r2
 800eea0:	d01b      	beq.n	800eeda <TIM_Base_SetConfig+0xb2>
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	4a29      	ldr	r2, [pc, #164]	; (800ef4c <TIM_Base_SetConfig+0x124>)
 800eea6:	4293      	cmp	r3, r2
 800eea8:	d017      	beq.n	800eeda <TIM_Base_SetConfig+0xb2>
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	4a28      	ldr	r2, [pc, #160]	; (800ef50 <TIM_Base_SetConfig+0x128>)
 800eeae:	4293      	cmp	r3, r2
 800eeb0:	d013      	beq.n	800eeda <TIM_Base_SetConfig+0xb2>
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	4a27      	ldr	r2, [pc, #156]	; (800ef54 <TIM_Base_SetConfig+0x12c>)
 800eeb6:	4293      	cmp	r3, r2
 800eeb8:	d00f      	beq.n	800eeda <TIM_Base_SetConfig+0xb2>
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	4a26      	ldr	r2, [pc, #152]	; (800ef58 <TIM_Base_SetConfig+0x130>)
 800eebe:	4293      	cmp	r3, r2
 800eec0:	d00b      	beq.n	800eeda <TIM_Base_SetConfig+0xb2>
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	4a25      	ldr	r2, [pc, #148]	; (800ef5c <TIM_Base_SetConfig+0x134>)
 800eec6:	4293      	cmp	r3, r2
 800eec8:	d007      	beq.n	800eeda <TIM_Base_SetConfig+0xb2>
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	4a24      	ldr	r2, [pc, #144]	; (800ef60 <TIM_Base_SetConfig+0x138>)
 800eece:	4293      	cmp	r3, r2
 800eed0:	d003      	beq.n	800eeda <TIM_Base_SetConfig+0xb2>
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	4a23      	ldr	r2, [pc, #140]	; (800ef64 <TIM_Base_SetConfig+0x13c>)
 800eed6:	4293      	cmp	r3, r2
 800eed8:	d108      	bne.n	800eeec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800eee0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800eee2:	683b      	ldr	r3, [r7, #0]
 800eee4:	68db      	ldr	r3, [r3, #12]
 800eee6:	68fa      	ldr	r2, [r7, #12]
 800eee8:	4313      	orrs	r3, r2
 800eeea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800eef2:	683b      	ldr	r3, [r7, #0]
 800eef4:	695b      	ldr	r3, [r3, #20]
 800eef6:	4313      	orrs	r3, r2
 800eef8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	68fa      	ldr	r2, [r7, #12]
 800eefe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ef00:	683b      	ldr	r3, [r7, #0]
 800ef02:	689a      	ldr	r2, [r3, #8]
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ef08:	683b      	ldr	r3, [r7, #0]
 800ef0a:	681a      	ldr	r2, [r3, #0]
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	4a0a      	ldr	r2, [pc, #40]	; (800ef3c <TIM_Base_SetConfig+0x114>)
 800ef14:	4293      	cmp	r3, r2
 800ef16:	d003      	beq.n	800ef20 <TIM_Base_SetConfig+0xf8>
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	4a0c      	ldr	r2, [pc, #48]	; (800ef4c <TIM_Base_SetConfig+0x124>)
 800ef1c:	4293      	cmp	r3, r2
 800ef1e:	d103      	bne.n	800ef28 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ef20:	683b      	ldr	r3, [r7, #0]
 800ef22:	691a      	ldr	r2, [r3, #16]
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	2201      	movs	r2, #1
 800ef2c:	615a      	str	r2, [r3, #20]
}
 800ef2e:	bf00      	nop
 800ef30:	3714      	adds	r7, #20
 800ef32:	46bd      	mov	sp, r7
 800ef34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef38:	4770      	bx	lr
 800ef3a:	bf00      	nop
 800ef3c:	40010000 	.word	0x40010000
 800ef40:	40000400 	.word	0x40000400
 800ef44:	40000800 	.word	0x40000800
 800ef48:	40000c00 	.word	0x40000c00
 800ef4c:	40010400 	.word	0x40010400
 800ef50:	40014000 	.word	0x40014000
 800ef54:	40014400 	.word	0x40014400
 800ef58:	40014800 	.word	0x40014800
 800ef5c:	40001800 	.word	0x40001800
 800ef60:	40001c00 	.word	0x40001c00
 800ef64:	40002000 	.word	0x40002000

0800ef68 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ef68:	b480      	push	{r7}
 800ef6a:	b087      	sub	sp, #28
 800ef6c:	af00      	add	r7, sp, #0
 800ef6e:	6078      	str	r0, [r7, #4]
 800ef70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	6a1b      	ldr	r3, [r3, #32]
 800ef76:	f023 0201 	bic.w	r2, r3, #1
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	6a1b      	ldr	r3, [r3, #32]
 800ef82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	685b      	ldr	r3, [r3, #4]
 800ef88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	699b      	ldr	r3, [r3, #24]
 800ef8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ef96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	f023 0303 	bic.w	r3, r3, #3
 800ef9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800efa0:	683b      	ldr	r3, [r7, #0]
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	68fa      	ldr	r2, [r7, #12]
 800efa6:	4313      	orrs	r3, r2
 800efa8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800efaa:	697b      	ldr	r3, [r7, #20]
 800efac:	f023 0302 	bic.w	r3, r3, #2
 800efb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800efb2:	683b      	ldr	r3, [r7, #0]
 800efb4:	689b      	ldr	r3, [r3, #8]
 800efb6:	697a      	ldr	r2, [r7, #20]
 800efb8:	4313      	orrs	r3, r2
 800efba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	4a20      	ldr	r2, [pc, #128]	; (800f040 <TIM_OC1_SetConfig+0xd8>)
 800efc0:	4293      	cmp	r3, r2
 800efc2:	d003      	beq.n	800efcc <TIM_OC1_SetConfig+0x64>
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	4a1f      	ldr	r2, [pc, #124]	; (800f044 <TIM_OC1_SetConfig+0xdc>)
 800efc8:	4293      	cmp	r3, r2
 800efca:	d10c      	bne.n	800efe6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800efcc:	697b      	ldr	r3, [r7, #20]
 800efce:	f023 0308 	bic.w	r3, r3, #8
 800efd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800efd4:	683b      	ldr	r3, [r7, #0]
 800efd6:	68db      	ldr	r3, [r3, #12]
 800efd8:	697a      	ldr	r2, [r7, #20]
 800efda:	4313      	orrs	r3, r2
 800efdc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800efde:	697b      	ldr	r3, [r7, #20]
 800efe0:	f023 0304 	bic.w	r3, r3, #4
 800efe4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	4a15      	ldr	r2, [pc, #84]	; (800f040 <TIM_OC1_SetConfig+0xd8>)
 800efea:	4293      	cmp	r3, r2
 800efec:	d003      	beq.n	800eff6 <TIM_OC1_SetConfig+0x8e>
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	4a14      	ldr	r2, [pc, #80]	; (800f044 <TIM_OC1_SetConfig+0xdc>)
 800eff2:	4293      	cmp	r3, r2
 800eff4:	d111      	bne.n	800f01a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800eff6:	693b      	ldr	r3, [r7, #16]
 800eff8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800effc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800effe:	693b      	ldr	r3, [r7, #16]
 800f000:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f004:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f006:	683b      	ldr	r3, [r7, #0]
 800f008:	695b      	ldr	r3, [r3, #20]
 800f00a:	693a      	ldr	r2, [r7, #16]
 800f00c:	4313      	orrs	r3, r2
 800f00e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f010:	683b      	ldr	r3, [r7, #0]
 800f012:	699b      	ldr	r3, [r3, #24]
 800f014:	693a      	ldr	r2, [r7, #16]
 800f016:	4313      	orrs	r3, r2
 800f018:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	693a      	ldr	r2, [r7, #16]
 800f01e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	68fa      	ldr	r2, [r7, #12]
 800f024:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f026:	683b      	ldr	r3, [r7, #0]
 800f028:	685a      	ldr	r2, [r3, #4]
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	697a      	ldr	r2, [r7, #20]
 800f032:	621a      	str	r2, [r3, #32]
}
 800f034:	bf00      	nop
 800f036:	371c      	adds	r7, #28
 800f038:	46bd      	mov	sp, r7
 800f03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f03e:	4770      	bx	lr
 800f040:	40010000 	.word	0x40010000
 800f044:	40010400 	.word	0x40010400

0800f048 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f048:	b480      	push	{r7}
 800f04a:	b087      	sub	sp, #28
 800f04c:	af00      	add	r7, sp, #0
 800f04e:	6078      	str	r0, [r7, #4]
 800f050:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	6a1b      	ldr	r3, [r3, #32]
 800f056:	f023 0210 	bic.w	r2, r3, #16
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	6a1b      	ldr	r3, [r3, #32]
 800f062:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	685b      	ldr	r3, [r3, #4]
 800f068:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	699b      	ldr	r3, [r3, #24]
 800f06e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f076:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f07e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f080:	683b      	ldr	r3, [r7, #0]
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	021b      	lsls	r3, r3, #8
 800f086:	68fa      	ldr	r2, [r7, #12]
 800f088:	4313      	orrs	r3, r2
 800f08a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f08c:	697b      	ldr	r3, [r7, #20]
 800f08e:	f023 0320 	bic.w	r3, r3, #32
 800f092:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f094:	683b      	ldr	r3, [r7, #0]
 800f096:	689b      	ldr	r3, [r3, #8]
 800f098:	011b      	lsls	r3, r3, #4
 800f09a:	697a      	ldr	r2, [r7, #20]
 800f09c:	4313      	orrs	r3, r2
 800f09e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	4a22      	ldr	r2, [pc, #136]	; (800f12c <TIM_OC2_SetConfig+0xe4>)
 800f0a4:	4293      	cmp	r3, r2
 800f0a6:	d003      	beq.n	800f0b0 <TIM_OC2_SetConfig+0x68>
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	4a21      	ldr	r2, [pc, #132]	; (800f130 <TIM_OC2_SetConfig+0xe8>)
 800f0ac:	4293      	cmp	r3, r2
 800f0ae:	d10d      	bne.n	800f0cc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f0b0:	697b      	ldr	r3, [r7, #20]
 800f0b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f0b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f0b8:	683b      	ldr	r3, [r7, #0]
 800f0ba:	68db      	ldr	r3, [r3, #12]
 800f0bc:	011b      	lsls	r3, r3, #4
 800f0be:	697a      	ldr	r2, [r7, #20]
 800f0c0:	4313      	orrs	r3, r2
 800f0c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f0c4:	697b      	ldr	r3, [r7, #20]
 800f0c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f0ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	4a17      	ldr	r2, [pc, #92]	; (800f12c <TIM_OC2_SetConfig+0xe4>)
 800f0d0:	4293      	cmp	r3, r2
 800f0d2:	d003      	beq.n	800f0dc <TIM_OC2_SetConfig+0x94>
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	4a16      	ldr	r2, [pc, #88]	; (800f130 <TIM_OC2_SetConfig+0xe8>)
 800f0d8:	4293      	cmp	r3, r2
 800f0da:	d113      	bne.n	800f104 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f0dc:	693b      	ldr	r3, [r7, #16]
 800f0de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f0e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f0e4:	693b      	ldr	r3, [r7, #16]
 800f0e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f0ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f0ec:	683b      	ldr	r3, [r7, #0]
 800f0ee:	695b      	ldr	r3, [r3, #20]
 800f0f0:	009b      	lsls	r3, r3, #2
 800f0f2:	693a      	ldr	r2, [r7, #16]
 800f0f4:	4313      	orrs	r3, r2
 800f0f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f0f8:	683b      	ldr	r3, [r7, #0]
 800f0fa:	699b      	ldr	r3, [r3, #24]
 800f0fc:	009b      	lsls	r3, r3, #2
 800f0fe:	693a      	ldr	r2, [r7, #16]
 800f100:	4313      	orrs	r3, r2
 800f102:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	693a      	ldr	r2, [r7, #16]
 800f108:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	68fa      	ldr	r2, [r7, #12]
 800f10e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f110:	683b      	ldr	r3, [r7, #0]
 800f112:	685a      	ldr	r2, [r3, #4]
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	697a      	ldr	r2, [r7, #20]
 800f11c:	621a      	str	r2, [r3, #32]
}
 800f11e:	bf00      	nop
 800f120:	371c      	adds	r7, #28
 800f122:	46bd      	mov	sp, r7
 800f124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f128:	4770      	bx	lr
 800f12a:	bf00      	nop
 800f12c:	40010000 	.word	0x40010000
 800f130:	40010400 	.word	0x40010400

0800f134 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f134:	b480      	push	{r7}
 800f136:	b087      	sub	sp, #28
 800f138:	af00      	add	r7, sp, #0
 800f13a:	6078      	str	r0, [r7, #4]
 800f13c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	6a1b      	ldr	r3, [r3, #32]
 800f142:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	6a1b      	ldr	r3, [r3, #32]
 800f14e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	685b      	ldr	r3, [r3, #4]
 800f154:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	69db      	ldr	r3, [r3, #28]
 800f15a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f162:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	f023 0303 	bic.w	r3, r3, #3
 800f16a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f16c:	683b      	ldr	r3, [r7, #0]
 800f16e:	681b      	ldr	r3, [r3, #0]
 800f170:	68fa      	ldr	r2, [r7, #12]
 800f172:	4313      	orrs	r3, r2
 800f174:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f176:	697b      	ldr	r3, [r7, #20]
 800f178:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f17c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f17e:	683b      	ldr	r3, [r7, #0]
 800f180:	689b      	ldr	r3, [r3, #8]
 800f182:	021b      	lsls	r3, r3, #8
 800f184:	697a      	ldr	r2, [r7, #20]
 800f186:	4313      	orrs	r3, r2
 800f188:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	4a21      	ldr	r2, [pc, #132]	; (800f214 <TIM_OC3_SetConfig+0xe0>)
 800f18e:	4293      	cmp	r3, r2
 800f190:	d003      	beq.n	800f19a <TIM_OC3_SetConfig+0x66>
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	4a20      	ldr	r2, [pc, #128]	; (800f218 <TIM_OC3_SetConfig+0xe4>)
 800f196:	4293      	cmp	r3, r2
 800f198:	d10d      	bne.n	800f1b6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f19a:	697b      	ldr	r3, [r7, #20]
 800f19c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f1a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f1a2:	683b      	ldr	r3, [r7, #0]
 800f1a4:	68db      	ldr	r3, [r3, #12]
 800f1a6:	021b      	lsls	r3, r3, #8
 800f1a8:	697a      	ldr	r2, [r7, #20]
 800f1aa:	4313      	orrs	r3, r2
 800f1ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f1ae:	697b      	ldr	r3, [r7, #20]
 800f1b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f1b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	4a16      	ldr	r2, [pc, #88]	; (800f214 <TIM_OC3_SetConfig+0xe0>)
 800f1ba:	4293      	cmp	r3, r2
 800f1bc:	d003      	beq.n	800f1c6 <TIM_OC3_SetConfig+0x92>
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	4a15      	ldr	r2, [pc, #84]	; (800f218 <TIM_OC3_SetConfig+0xe4>)
 800f1c2:	4293      	cmp	r3, r2
 800f1c4:	d113      	bne.n	800f1ee <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f1c6:	693b      	ldr	r3, [r7, #16]
 800f1c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f1cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f1ce:	693b      	ldr	r3, [r7, #16]
 800f1d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f1d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f1d6:	683b      	ldr	r3, [r7, #0]
 800f1d8:	695b      	ldr	r3, [r3, #20]
 800f1da:	011b      	lsls	r3, r3, #4
 800f1dc:	693a      	ldr	r2, [r7, #16]
 800f1de:	4313      	orrs	r3, r2
 800f1e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f1e2:	683b      	ldr	r3, [r7, #0]
 800f1e4:	699b      	ldr	r3, [r3, #24]
 800f1e6:	011b      	lsls	r3, r3, #4
 800f1e8:	693a      	ldr	r2, [r7, #16]
 800f1ea:	4313      	orrs	r3, r2
 800f1ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	693a      	ldr	r2, [r7, #16]
 800f1f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	68fa      	ldr	r2, [r7, #12]
 800f1f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f1fa:	683b      	ldr	r3, [r7, #0]
 800f1fc:	685a      	ldr	r2, [r3, #4]
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	697a      	ldr	r2, [r7, #20]
 800f206:	621a      	str	r2, [r3, #32]
}
 800f208:	bf00      	nop
 800f20a:	371c      	adds	r7, #28
 800f20c:	46bd      	mov	sp, r7
 800f20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f212:	4770      	bx	lr
 800f214:	40010000 	.word	0x40010000
 800f218:	40010400 	.word	0x40010400

0800f21c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f21c:	b480      	push	{r7}
 800f21e:	b087      	sub	sp, #28
 800f220:	af00      	add	r7, sp, #0
 800f222:	6078      	str	r0, [r7, #4]
 800f224:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	6a1b      	ldr	r3, [r3, #32]
 800f22a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	6a1b      	ldr	r3, [r3, #32]
 800f236:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	685b      	ldr	r3, [r3, #4]
 800f23c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	69db      	ldr	r3, [r3, #28]
 800f242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f24a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f252:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f254:	683b      	ldr	r3, [r7, #0]
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	021b      	lsls	r3, r3, #8
 800f25a:	68fa      	ldr	r2, [r7, #12]
 800f25c:	4313      	orrs	r3, r2
 800f25e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f260:	693b      	ldr	r3, [r7, #16]
 800f262:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f266:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f268:	683b      	ldr	r3, [r7, #0]
 800f26a:	689b      	ldr	r3, [r3, #8]
 800f26c:	031b      	lsls	r3, r3, #12
 800f26e:	693a      	ldr	r2, [r7, #16]
 800f270:	4313      	orrs	r3, r2
 800f272:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	4a12      	ldr	r2, [pc, #72]	; (800f2c0 <TIM_OC4_SetConfig+0xa4>)
 800f278:	4293      	cmp	r3, r2
 800f27a:	d003      	beq.n	800f284 <TIM_OC4_SetConfig+0x68>
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	4a11      	ldr	r2, [pc, #68]	; (800f2c4 <TIM_OC4_SetConfig+0xa8>)
 800f280:	4293      	cmp	r3, r2
 800f282:	d109      	bne.n	800f298 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f284:	697b      	ldr	r3, [r7, #20]
 800f286:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f28a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f28c:	683b      	ldr	r3, [r7, #0]
 800f28e:	695b      	ldr	r3, [r3, #20]
 800f290:	019b      	lsls	r3, r3, #6
 800f292:	697a      	ldr	r2, [r7, #20]
 800f294:	4313      	orrs	r3, r2
 800f296:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	697a      	ldr	r2, [r7, #20]
 800f29c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	68fa      	ldr	r2, [r7, #12]
 800f2a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f2a4:	683b      	ldr	r3, [r7, #0]
 800f2a6:	685a      	ldr	r2, [r3, #4]
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	693a      	ldr	r2, [r7, #16]
 800f2b0:	621a      	str	r2, [r3, #32]
}
 800f2b2:	bf00      	nop
 800f2b4:	371c      	adds	r7, #28
 800f2b6:	46bd      	mov	sp, r7
 800f2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2bc:	4770      	bx	lr
 800f2be:	bf00      	nop
 800f2c0:	40010000 	.word	0x40010000
 800f2c4:	40010400 	.word	0x40010400

0800f2c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800f2c8:	b480      	push	{r7}
 800f2ca:	b087      	sub	sp, #28
 800f2cc:	af00      	add	r7, sp, #0
 800f2ce:	60f8      	str	r0, [r7, #12]
 800f2d0:	60b9      	str	r1, [r7, #8]
 800f2d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f2d4:	68bb      	ldr	r3, [r7, #8]
 800f2d6:	f003 031f 	and.w	r3, r3, #31
 800f2da:	2201      	movs	r2, #1
 800f2dc:	fa02 f303 	lsl.w	r3, r2, r3
 800f2e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	6a1a      	ldr	r2, [r3, #32]
 800f2e6:	697b      	ldr	r3, [r7, #20]
 800f2e8:	43db      	mvns	r3, r3
 800f2ea:	401a      	ands	r2, r3
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	6a1a      	ldr	r2, [r3, #32]
 800f2f4:	68bb      	ldr	r3, [r7, #8]
 800f2f6:	f003 031f 	and.w	r3, r3, #31
 800f2fa:	6879      	ldr	r1, [r7, #4]
 800f2fc:	fa01 f303 	lsl.w	r3, r1, r3
 800f300:	431a      	orrs	r2, r3
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	621a      	str	r2, [r3, #32]
}
 800f306:	bf00      	nop
 800f308:	371c      	adds	r7, #28
 800f30a:	46bd      	mov	sp, r7
 800f30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f310:	4770      	bx	lr
	...

0800f314 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f314:	b480      	push	{r7}
 800f316:	b085      	sub	sp, #20
 800f318:	af00      	add	r7, sp, #0
 800f31a:	6078      	str	r0, [r7, #4]
 800f31c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f324:	2b01      	cmp	r3, #1
 800f326:	d101      	bne.n	800f32c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f328:	2302      	movs	r3, #2
 800f32a:	e05a      	b.n	800f3e2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	2201      	movs	r2, #1
 800f330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	2202      	movs	r2, #2
 800f338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	685b      	ldr	r3, [r3, #4]
 800f342:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	689b      	ldr	r3, [r3, #8]
 800f34a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f352:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f354:	683b      	ldr	r3, [r7, #0]
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	68fa      	ldr	r2, [r7, #12]
 800f35a:	4313      	orrs	r3, r2
 800f35c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	68fa      	ldr	r2, [r7, #12]
 800f364:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	4a21      	ldr	r2, [pc, #132]	; (800f3f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800f36c:	4293      	cmp	r3, r2
 800f36e:	d022      	beq.n	800f3b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f378:	d01d      	beq.n	800f3b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	4a1d      	ldr	r2, [pc, #116]	; (800f3f4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800f380:	4293      	cmp	r3, r2
 800f382:	d018      	beq.n	800f3b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	4a1b      	ldr	r2, [pc, #108]	; (800f3f8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800f38a:	4293      	cmp	r3, r2
 800f38c:	d013      	beq.n	800f3b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	4a1a      	ldr	r2, [pc, #104]	; (800f3fc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800f394:	4293      	cmp	r3, r2
 800f396:	d00e      	beq.n	800f3b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	4a18      	ldr	r2, [pc, #96]	; (800f400 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800f39e:	4293      	cmp	r3, r2
 800f3a0:	d009      	beq.n	800f3b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	4a17      	ldr	r2, [pc, #92]	; (800f404 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800f3a8:	4293      	cmp	r3, r2
 800f3aa:	d004      	beq.n	800f3b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	4a15      	ldr	r2, [pc, #84]	; (800f408 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800f3b2:	4293      	cmp	r3, r2
 800f3b4:	d10c      	bne.n	800f3d0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f3b6:	68bb      	ldr	r3, [r7, #8]
 800f3b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f3bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f3be:	683b      	ldr	r3, [r7, #0]
 800f3c0:	685b      	ldr	r3, [r3, #4]
 800f3c2:	68ba      	ldr	r2, [r7, #8]
 800f3c4:	4313      	orrs	r3, r2
 800f3c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	68ba      	ldr	r2, [r7, #8]
 800f3ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	2201      	movs	r2, #1
 800f3d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	2200      	movs	r2, #0
 800f3dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f3e0:	2300      	movs	r3, #0
}
 800f3e2:	4618      	mov	r0, r3
 800f3e4:	3714      	adds	r7, #20
 800f3e6:	46bd      	mov	sp, r7
 800f3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ec:	4770      	bx	lr
 800f3ee:	bf00      	nop
 800f3f0:	40010000 	.word	0x40010000
 800f3f4:	40000400 	.word	0x40000400
 800f3f8:	40000800 	.word	0x40000800
 800f3fc:	40000c00 	.word	0x40000c00
 800f400:	40010400 	.word	0x40010400
 800f404:	40014000 	.word	0x40014000
 800f408:	40001800 	.word	0x40001800

0800f40c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800f40c:	b480      	push	{r7}
 800f40e:	b085      	sub	sp, #20
 800f410:	af00      	add	r7, sp, #0
 800f412:	6078      	str	r0, [r7, #4]
 800f414:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800f416:	2300      	movs	r3, #0
 800f418:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f420:	2b01      	cmp	r3, #1
 800f422:	d101      	bne.n	800f428 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800f424:	2302      	movs	r3, #2
 800f426:	e03d      	b.n	800f4a4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	2201      	movs	r2, #1
 800f42c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800f430:	68fb      	ldr	r3, [r7, #12]
 800f432:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800f436:	683b      	ldr	r3, [r7, #0]
 800f438:	68db      	ldr	r3, [r3, #12]
 800f43a:	4313      	orrs	r3, r2
 800f43c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800f43e:	68fb      	ldr	r3, [r7, #12]
 800f440:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800f444:	683b      	ldr	r3, [r7, #0]
 800f446:	689b      	ldr	r3, [r3, #8]
 800f448:	4313      	orrs	r3, r2
 800f44a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800f452:	683b      	ldr	r3, [r7, #0]
 800f454:	685b      	ldr	r3, [r3, #4]
 800f456:	4313      	orrs	r3, r2
 800f458:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800f45a:	68fb      	ldr	r3, [r7, #12]
 800f45c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800f460:	683b      	ldr	r3, [r7, #0]
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	4313      	orrs	r3, r2
 800f466:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800f468:	68fb      	ldr	r3, [r7, #12]
 800f46a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f46e:	683b      	ldr	r3, [r7, #0]
 800f470:	691b      	ldr	r3, [r3, #16]
 800f472:	4313      	orrs	r3, r2
 800f474:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800f476:	68fb      	ldr	r3, [r7, #12]
 800f478:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800f47c:	683b      	ldr	r3, [r7, #0]
 800f47e:	695b      	ldr	r3, [r3, #20]
 800f480:	4313      	orrs	r3, r2
 800f482:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800f484:	68fb      	ldr	r3, [r7, #12]
 800f486:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800f48a:	683b      	ldr	r3, [r7, #0]
 800f48c:	69db      	ldr	r3, [r3, #28]
 800f48e:	4313      	orrs	r3, r2
 800f490:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	681b      	ldr	r3, [r3, #0]
 800f496:	68fa      	ldr	r2, [r7, #12]
 800f498:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	2200      	movs	r2, #0
 800f49e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f4a2:	2300      	movs	r3, #0
}
 800f4a4:	4618      	mov	r0, r3
 800f4a6:	3714      	adds	r7, #20
 800f4a8:	46bd      	mov	sp, r7
 800f4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ae:	4770      	bx	lr

0800f4b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f4b0:	b480      	push	{r7}
 800f4b2:	b083      	sub	sp, #12
 800f4b4:	af00      	add	r7, sp, #0
 800f4b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f4b8:	bf00      	nop
 800f4ba:	370c      	adds	r7, #12
 800f4bc:	46bd      	mov	sp, r7
 800f4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4c2:	4770      	bx	lr

0800f4c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f4c4:	b480      	push	{r7}
 800f4c6:	b083      	sub	sp, #12
 800f4c8:	af00      	add	r7, sp, #0
 800f4ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f4cc:	bf00      	nop
 800f4ce:	370c      	adds	r7, #12
 800f4d0:	46bd      	mov	sp, r7
 800f4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4d6:	4770      	bx	lr

0800f4d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f4d8:	b580      	push	{r7, lr}
 800f4da:	b082      	sub	sp, #8
 800f4dc:	af00      	add	r7, sp, #0
 800f4de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d101      	bne.n	800f4ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f4e6:	2301      	movs	r3, #1
 800f4e8:	e03f      	b.n	800f56a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800f4f0:	b2db      	uxtb	r3, r3
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d106      	bne.n	800f504 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	2200      	movs	r2, #0
 800f4fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f4fe:	6878      	ldr	r0, [r7, #4]
 800f500:	f7f7 ff06 	bl	8007310 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	2224      	movs	r2, #36	; 0x24
 800f508:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	681b      	ldr	r3, [r3, #0]
 800f510:	68da      	ldr	r2, [r3, #12]
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	681b      	ldr	r3, [r3, #0]
 800f516:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f51a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800f51c:	6878      	ldr	r0, [r7, #4]
 800f51e:	f000 f829 	bl	800f574 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	691a      	ldr	r2, [r3, #16]
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	681b      	ldr	r3, [r3, #0]
 800f52c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f530:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	695a      	ldr	r2, [r3, #20]
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f540:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	68da      	ldr	r2, [r3, #12]
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f550:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	2200      	movs	r2, #0
 800f556:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	2220      	movs	r2, #32
 800f55c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	2220      	movs	r2, #32
 800f564:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800f568:	2300      	movs	r3, #0
}
 800f56a:	4618      	mov	r0, r3
 800f56c:	3708      	adds	r7, #8
 800f56e:	46bd      	mov	sp, r7
 800f570:	bd80      	pop	{r7, pc}
	...

0800f574 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f578:	b085      	sub	sp, #20
 800f57a:	af00      	add	r7, sp, #0
 800f57c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	681b      	ldr	r3, [r3, #0]
 800f582:	691b      	ldr	r3, [r3, #16]
 800f584:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	68da      	ldr	r2, [r3, #12]
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	681b      	ldr	r3, [r3, #0]
 800f590:	430a      	orrs	r2, r1
 800f592:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	689a      	ldr	r2, [r3, #8]
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	691b      	ldr	r3, [r3, #16]
 800f59c:	431a      	orrs	r2, r3
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	695b      	ldr	r3, [r3, #20]
 800f5a2:	431a      	orrs	r2, r3
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	69db      	ldr	r3, [r3, #28]
 800f5a8:	4313      	orrs	r3, r2
 800f5aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	68db      	ldr	r3, [r3, #12]
 800f5b2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800f5b6:	f023 030c 	bic.w	r3, r3, #12
 800f5ba:	687a      	ldr	r2, [r7, #4]
 800f5bc:	6812      	ldr	r2, [r2, #0]
 800f5be:	68f9      	ldr	r1, [r7, #12]
 800f5c0:	430b      	orrs	r3, r1
 800f5c2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	695b      	ldr	r3, [r3, #20]
 800f5ca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	699a      	ldr	r2, [r3, #24]
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	681b      	ldr	r3, [r3, #0]
 800f5d6:	430a      	orrs	r2, r1
 800f5d8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	69db      	ldr	r3, [r3, #28]
 800f5de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f5e2:	f040 818b 	bne.w	800f8fc <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	681b      	ldr	r3, [r3, #0]
 800f5ea:	4ac1      	ldr	r2, [pc, #772]	; (800f8f0 <UART_SetConfig+0x37c>)
 800f5ec:	4293      	cmp	r3, r2
 800f5ee:	d005      	beq.n	800f5fc <UART_SetConfig+0x88>
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	4abf      	ldr	r2, [pc, #764]	; (800f8f4 <UART_SetConfig+0x380>)
 800f5f6:	4293      	cmp	r3, r2
 800f5f8:	f040 80bd 	bne.w	800f776 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800f5fc:	f7fc fbcc 	bl	800bd98 <HAL_RCC_GetPCLK2Freq>
 800f600:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800f602:	68bb      	ldr	r3, [r7, #8]
 800f604:	461d      	mov	r5, r3
 800f606:	f04f 0600 	mov.w	r6, #0
 800f60a:	46a8      	mov	r8, r5
 800f60c:	46b1      	mov	r9, r6
 800f60e:	eb18 0308 	adds.w	r3, r8, r8
 800f612:	eb49 0409 	adc.w	r4, r9, r9
 800f616:	4698      	mov	r8, r3
 800f618:	46a1      	mov	r9, r4
 800f61a:	eb18 0805 	adds.w	r8, r8, r5
 800f61e:	eb49 0906 	adc.w	r9, r9, r6
 800f622:	f04f 0100 	mov.w	r1, #0
 800f626:	f04f 0200 	mov.w	r2, #0
 800f62a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800f62e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800f632:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800f636:	4688      	mov	r8, r1
 800f638:	4691      	mov	r9, r2
 800f63a:	eb18 0005 	adds.w	r0, r8, r5
 800f63e:	eb49 0106 	adc.w	r1, r9, r6
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	685b      	ldr	r3, [r3, #4]
 800f646:	461d      	mov	r5, r3
 800f648:	f04f 0600 	mov.w	r6, #0
 800f64c:	196b      	adds	r3, r5, r5
 800f64e:	eb46 0406 	adc.w	r4, r6, r6
 800f652:	461a      	mov	r2, r3
 800f654:	4623      	mov	r3, r4
 800f656:	f7f1 fb2f 	bl	8000cb8 <__aeabi_uldivmod>
 800f65a:	4603      	mov	r3, r0
 800f65c:	460c      	mov	r4, r1
 800f65e:	461a      	mov	r2, r3
 800f660:	4ba5      	ldr	r3, [pc, #660]	; (800f8f8 <UART_SetConfig+0x384>)
 800f662:	fba3 2302 	umull	r2, r3, r3, r2
 800f666:	095b      	lsrs	r3, r3, #5
 800f668:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800f66c:	68bb      	ldr	r3, [r7, #8]
 800f66e:	461d      	mov	r5, r3
 800f670:	f04f 0600 	mov.w	r6, #0
 800f674:	46a9      	mov	r9, r5
 800f676:	46b2      	mov	sl, r6
 800f678:	eb19 0309 	adds.w	r3, r9, r9
 800f67c:	eb4a 040a 	adc.w	r4, sl, sl
 800f680:	4699      	mov	r9, r3
 800f682:	46a2      	mov	sl, r4
 800f684:	eb19 0905 	adds.w	r9, r9, r5
 800f688:	eb4a 0a06 	adc.w	sl, sl, r6
 800f68c:	f04f 0100 	mov.w	r1, #0
 800f690:	f04f 0200 	mov.w	r2, #0
 800f694:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f698:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f69c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f6a0:	4689      	mov	r9, r1
 800f6a2:	4692      	mov	sl, r2
 800f6a4:	eb19 0005 	adds.w	r0, r9, r5
 800f6a8:	eb4a 0106 	adc.w	r1, sl, r6
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	685b      	ldr	r3, [r3, #4]
 800f6b0:	461d      	mov	r5, r3
 800f6b2:	f04f 0600 	mov.w	r6, #0
 800f6b6:	196b      	adds	r3, r5, r5
 800f6b8:	eb46 0406 	adc.w	r4, r6, r6
 800f6bc:	461a      	mov	r2, r3
 800f6be:	4623      	mov	r3, r4
 800f6c0:	f7f1 fafa 	bl	8000cb8 <__aeabi_uldivmod>
 800f6c4:	4603      	mov	r3, r0
 800f6c6:	460c      	mov	r4, r1
 800f6c8:	461a      	mov	r2, r3
 800f6ca:	4b8b      	ldr	r3, [pc, #556]	; (800f8f8 <UART_SetConfig+0x384>)
 800f6cc:	fba3 1302 	umull	r1, r3, r3, r2
 800f6d0:	095b      	lsrs	r3, r3, #5
 800f6d2:	2164      	movs	r1, #100	; 0x64
 800f6d4:	fb01 f303 	mul.w	r3, r1, r3
 800f6d8:	1ad3      	subs	r3, r2, r3
 800f6da:	00db      	lsls	r3, r3, #3
 800f6dc:	3332      	adds	r3, #50	; 0x32
 800f6de:	4a86      	ldr	r2, [pc, #536]	; (800f8f8 <UART_SetConfig+0x384>)
 800f6e0:	fba2 2303 	umull	r2, r3, r2, r3
 800f6e4:	095b      	lsrs	r3, r3, #5
 800f6e6:	005b      	lsls	r3, r3, #1
 800f6e8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800f6ec:	4498      	add	r8, r3
 800f6ee:	68bb      	ldr	r3, [r7, #8]
 800f6f0:	461d      	mov	r5, r3
 800f6f2:	f04f 0600 	mov.w	r6, #0
 800f6f6:	46a9      	mov	r9, r5
 800f6f8:	46b2      	mov	sl, r6
 800f6fa:	eb19 0309 	adds.w	r3, r9, r9
 800f6fe:	eb4a 040a 	adc.w	r4, sl, sl
 800f702:	4699      	mov	r9, r3
 800f704:	46a2      	mov	sl, r4
 800f706:	eb19 0905 	adds.w	r9, r9, r5
 800f70a:	eb4a 0a06 	adc.w	sl, sl, r6
 800f70e:	f04f 0100 	mov.w	r1, #0
 800f712:	f04f 0200 	mov.w	r2, #0
 800f716:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f71a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f71e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f722:	4689      	mov	r9, r1
 800f724:	4692      	mov	sl, r2
 800f726:	eb19 0005 	adds.w	r0, r9, r5
 800f72a:	eb4a 0106 	adc.w	r1, sl, r6
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	685b      	ldr	r3, [r3, #4]
 800f732:	461d      	mov	r5, r3
 800f734:	f04f 0600 	mov.w	r6, #0
 800f738:	196b      	adds	r3, r5, r5
 800f73a:	eb46 0406 	adc.w	r4, r6, r6
 800f73e:	461a      	mov	r2, r3
 800f740:	4623      	mov	r3, r4
 800f742:	f7f1 fab9 	bl	8000cb8 <__aeabi_uldivmod>
 800f746:	4603      	mov	r3, r0
 800f748:	460c      	mov	r4, r1
 800f74a:	461a      	mov	r2, r3
 800f74c:	4b6a      	ldr	r3, [pc, #424]	; (800f8f8 <UART_SetConfig+0x384>)
 800f74e:	fba3 1302 	umull	r1, r3, r3, r2
 800f752:	095b      	lsrs	r3, r3, #5
 800f754:	2164      	movs	r1, #100	; 0x64
 800f756:	fb01 f303 	mul.w	r3, r1, r3
 800f75a:	1ad3      	subs	r3, r2, r3
 800f75c:	00db      	lsls	r3, r3, #3
 800f75e:	3332      	adds	r3, #50	; 0x32
 800f760:	4a65      	ldr	r2, [pc, #404]	; (800f8f8 <UART_SetConfig+0x384>)
 800f762:	fba2 2303 	umull	r2, r3, r2, r3
 800f766:	095b      	lsrs	r3, r3, #5
 800f768:	f003 0207 	and.w	r2, r3, #7
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	681b      	ldr	r3, [r3, #0]
 800f770:	4442      	add	r2, r8
 800f772:	609a      	str	r2, [r3, #8]
 800f774:	e26f      	b.n	800fc56 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800f776:	f7fc fafb 	bl	800bd70 <HAL_RCC_GetPCLK1Freq>
 800f77a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800f77c:	68bb      	ldr	r3, [r7, #8]
 800f77e:	461d      	mov	r5, r3
 800f780:	f04f 0600 	mov.w	r6, #0
 800f784:	46a8      	mov	r8, r5
 800f786:	46b1      	mov	r9, r6
 800f788:	eb18 0308 	adds.w	r3, r8, r8
 800f78c:	eb49 0409 	adc.w	r4, r9, r9
 800f790:	4698      	mov	r8, r3
 800f792:	46a1      	mov	r9, r4
 800f794:	eb18 0805 	adds.w	r8, r8, r5
 800f798:	eb49 0906 	adc.w	r9, r9, r6
 800f79c:	f04f 0100 	mov.w	r1, #0
 800f7a0:	f04f 0200 	mov.w	r2, #0
 800f7a4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800f7a8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800f7ac:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800f7b0:	4688      	mov	r8, r1
 800f7b2:	4691      	mov	r9, r2
 800f7b4:	eb18 0005 	adds.w	r0, r8, r5
 800f7b8:	eb49 0106 	adc.w	r1, r9, r6
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	685b      	ldr	r3, [r3, #4]
 800f7c0:	461d      	mov	r5, r3
 800f7c2:	f04f 0600 	mov.w	r6, #0
 800f7c6:	196b      	adds	r3, r5, r5
 800f7c8:	eb46 0406 	adc.w	r4, r6, r6
 800f7cc:	461a      	mov	r2, r3
 800f7ce:	4623      	mov	r3, r4
 800f7d0:	f7f1 fa72 	bl	8000cb8 <__aeabi_uldivmod>
 800f7d4:	4603      	mov	r3, r0
 800f7d6:	460c      	mov	r4, r1
 800f7d8:	461a      	mov	r2, r3
 800f7da:	4b47      	ldr	r3, [pc, #284]	; (800f8f8 <UART_SetConfig+0x384>)
 800f7dc:	fba3 2302 	umull	r2, r3, r3, r2
 800f7e0:	095b      	lsrs	r3, r3, #5
 800f7e2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800f7e6:	68bb      	ldr	r3, [r7, #8]
 800f7e8:	461d      	mov	r5, r3
 800f7ea:	f04f 0600 	mov.w	r6, #0
 800f7ee:	46a9      	mov	r9, r5
 800f7f0:	46b2      	mov	sl, r6
 800f7f2:	eb19 0309 	adds.w	r3, r9, r9
 800f7f6:	eb4a 040a 	adc.w	r4, sl, sl
 800f7fa:	4699      	mov	r9, r3
 800f7fc:	46a2      	mov	sl, r4
 800f7fe:	eb19 0905 	adds.w	r9, r9, r5
 800f802:	eb4a 0a06 	adc.w	sl, sl, r6
 800f806:	f04f 0100 	mov.w	r1, #0
 800f80a:	f04f 0200 	mov.w	r2, #0
 800f80e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f812:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f816:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f81a:	4689      	mov	r9, r1
 800f81c:	4692      	mov	sl, r2
 800f81e:	eb19 0005 	adds.w	r0, r9, r5
 800f822:	eb4a 0106 	adc.w	r1, sl, r6
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	685b      	ldr	r3, [r3, #4]
 800f82a:	461d      	mov	r5, r3
 800f82c:	f04f 0600 	mov.w	r6, #0
 800f830:	196b      	adds	r3, r5, r5
 800f832:	eb46 0406 	adc.w	r4, r6, r6
 800f836:	461a      	mov	r2, r3
 800f838:	4623      	mov	r3, r4
 800f83a:	f7f1 fa3d 	bl	8000cb8 <__aeabi_uldivmod>
 800f83e:	4603      	mov	r3, r0
 800f840:	460c      	mov	r4, r1
 800f842:	461a      	mov	r2, r3
 800f844:	4b2c      	ldr	r3, [pc, #176]	; (800f8f8 <UART_SetConfig+0x384>)
 800f846:	fba3 1302 	umull	r1, r3, r3, r2
 800f84a:	095b      	lsrs	r3, r3, #5
 800f84c:	2164      	movs	r1, #100	; 0x64
 800f84e:	fb01 f303 	mul.w	r3, r1, r3
 800f852:	1ad3      	subs	r3, r2, r3
 800f854:	00db      	lsls	r3, r3, #3
 800f856:	3332      	adds	r3, #50	; 0x32
 800f858:	4a27      	ldr	r2, [pc, #156]	; (800f8f8 <UART_SetConfig+0x384>)
 800f85a:	fba2 2303 	umull	r2, r3, r2, r3
 800f85e:	095b      	lsrs	r3, r3, #5
 800f860:	005b      	lsls	r3, r3, #1
 800f862:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800f866:	4498      	add	r8, r3
 800f868:	68bb      	ldr	r3, [r7, #8]
 800f86a:	461d      	mov	r5, r3
 800f86c:	f04f 0600 	mov.w	r6, #0
 800f870:	46a9      	mov	r9, r5
 800f872:	46b2      	mov	sl, r6
 800f874:	eb19 0309 	adds.w	r3, r9, r9
 800f878:	eb4a 040a 	adc.w	r4, sl, sl
 800f87c:	4699      	mov	r9, r3
 800f87e:	46a2      	mov	sl, r4
 800f880:	eb19 0905 	adds.w	r9, r9, r5
 800f884:	eb4a 0a06 	adc.w	sl, sl, r6
 800f888:	f04f 0100 	mov.w	r1, #0
 800f88c:	f04f 0200 	mov.w	r2, #0
 800f890:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f894:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f898:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f89c:	4689      	mov	r9, r1
 800f89e:	4692      	mov	sl, r2
 800f8a0:	eb19 0005 	adds.w	r0, r9, r5
 800f8a4:	eb4a 0106 	adc.w	r1, sl, r6
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	685b      	ldr	r3, [r3, #4]
 800f8ac:	461d      	mov	r5, r3
 800f8ae:	f04f 0600 	mov.w	r6, #0
 800f8b2:	196b      	adds	r3, r5, r5
 800f8b4:	eb46 0406 	adc.w	r4, r6, r6
 800f8b8:	461a      	mov	r2, r3
 800f8ba:	4623      	mov	r3, r4
 800f8bc:	f7f1 f9fc 	bl	8000cb8 <__aeabi_uldivmod>
 800f8c0:	4603      	mov	r3, r0
 800f8c2:	460c      	mov	r4, r1
 800f8c4:	461a      	mov	r2, r3
 800f8c6:	4b0c      	ldr	r3, [pc, #48]	; (800f8f8 <UART_SetConfig+0x384>)
 800f8c8:	fba3 1302 	umull	r1, r3, r3, r2
 800f8cc:	095b      	lsrs	r3, r3, #5
 800f8ce:	2164      	movs	r1, #100	; 0x64
 800f8d0:	fb01 f303 	mul.w	r3, r1, r3
 800f8d4:	1ad3      	subs	r3, r2, r3
 800f8d6:	00db      	lsls	r3, r3, #3
 800f8d8:	3332      	adds	r3, #50	; 0x32
 800f8da:	4a07      	ldr	r2, [pc, #28]	; (800f8f8 <UART_SetConfig+0x384>)
 800f8dc:	fba2 2303 	umull	r2, r3, r2, r3
 800f8e0:	095b      	lsrs	r3, r3, #5
 800f8e2:	f003 0207 	and.w	r2, r3, #7
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	681b      	ldr	r3, [r3, #0]
 800f8ea:	4442      	add	r2, r8
 800f8ec:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800f8ee:	e1b2      	b.n	800fc56 <UART_SetConfig+0x6e2>
 800f8f0:	40011000 	.word	0x40011000
 800f8f4:	40011400 	.word	0x40011400
 800f8f8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	681b      	ldr	r3, [r3, #0]
 800f900:	4ad7      	ldr	r2, [pc, #860]	; (800fc60 <UART_SetConfig+0x6ec>)
 800f902:	4293      	cmp	r3, r2
 800f904:	d005      	beq.n	800f912 <UART_SetConfig+0x39e>
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	4ad6      	ldr	r2, [pc, #856]	; (800fc64 <UART_SetConfig+0x6f0>)
 800f90c:	4293      	cmp	r3, r2
 800f90e:	f040 80d1 	bne.w	800fab4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800f912:	f7fc fa41 	bl	800bd98 <HAL_RCC_GetPCLK2Freq>
 800f916:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800f918:	68bb      	ldr	r3, [r7, #8]
 800f91a:	469a      	mov	sl, r3
 800f91c:	f04f 0b00 	mov.w	fp, #0
 800f920:	46d0      	mov	r8, sl
 800f922:	46d9      	mov	r9, fp
 800f924:	eb18 0308 	adds.w	r3, r8, r8
 800f928:	eb49 0409 	adc.w	r4, r9, r9
 800f92c:	4698      	mov	r8, r3
 800f92e:	46a1      	mov	r9, r4
 800f930:	eb18 080a 	adds.w	r8, r8, sl
 800f934:	eb49 090b 	adc.w	r9, r9, fp
 800f938:	f04f 0100 	mov.w	r1, #0
 800f93c:	f04f 0200 	mov.w	r2, #0
 800f940:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800f944:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800f948:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800f94c:	4688      	mov	r8, r1
 800f94e:	4691      	mov	r9, r2
 800f950:	eb1a 0508 	adds.w	r5, sl, r8
 800f954:	eb4b 0609 	adc.w	r6, fp, r9
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	685b      	ldr	r3, [r3, #4]
 800f95c:	4619      	mov	r1, r3
 800f95e:	f04f 0200 	mov.w	r2, #0
 800f962:	f04f 0300 	mov.w	r3, #0
 800f966:	f04f 0400 	mov.w	r4, #0
 800f96a:	0094      	lsls	r4, r2, #2
 800f96c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f970:	008b      	lsls	r3, r1, #2
 800f972:	461a      	mov	r2, r3
 800f974:	4623      	mov	r3, r4
 800f976:	4628      	mov	r0, r5
 800f978:	4631      	mov	r1, r6
 800f97a:	f7f1 f99d 	bl	8000cb8 <__aeabi_uldivmod>
 800f97e:	4603      	mov	r3, r0
 800f980:	460c      	mov	r4, r1
 800f982:	461a      	mov	r2, r3
 800f984:	4bb8      	ldr	r3, [pc, #736]	; (800fc68 <UART_SetConfig+0x6f4>)
 800f986:	fba3 2302 	umull	r2, r3, r3, r2
 800f98a:	095b      	lsrs	r3, r3, #5
 800f98c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800f990:	68bb      	ldr	r3, [r7, #8]
 800f992:	469b      	mov	fp, r3
 800f994:	f04f 0c00 	mov.w	ip, #0
 800f998:	46d9      	mov	r9, fp
 800f99a:	46e2      	mov	sl, ip
 800f99c:	eb19 0309 	adds.w	r3, r9, r9
 800f9a0:	eb4a 040a 	adc.w	r4, sl, sl
 800f9a4:	4699      	mov	r9, r3
 800f9a6:	46a2      	mov	sl, r4
 800f9a8:	eb19 090b 	adds.w	r9, r9, fp
 800f9ac:	eb4a 0a0c 	adc.w	sl, sl, ip
 800f9b0:	f04f 0100 	mov.w	r1, #0
 800f9b4:	f04f 0200 	mov.w	r2, #0
 800f9b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f9bc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f9c0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f9c4:	4689      	mov	r9, r1
 800f9c6:	4692      	mov	sl, r2
 800f9c8:	eb1b 0509 	adds.w	r5, fp, r9
 800f9cc:	eb4c 060a 	adc.w	r6, ip, sl
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	685b      	ldr	r3, [r3, #4]
 800f9d4:	4619      	mov	r1, r3
 800f9d6:	f04f 0200 	mov.w	r2, #0
 800f9da:	f04f 0300 	mov.w	r3, #0
 800f9de:	f04f 0400 	mov.w	r4, #0
 800f9e2:	0094      	lsls	r4, r2, #2
 800f9e4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800f9e8:	008b      	lsls	r3, r1, #2
 800f9ea:	461a      	mov	r2, r3
 800f9ec:	4623      	mov	r3, r4
 800f9ee:	4628      	mov	r0, r5
 800f9f0:	4631      	mov	r1, r6
 800f9f2:	f7f1 f961 	bl	8000cb8 <__aeabi_uldivmod>
 800f9f6:	4603      	mov	r3, r0
 800f9f8:	460c      	mov	r4, r1
 800f9fa:	461a      	mov	r2, r3
 800f9fc:	4b9a      	ldr	r3, [pc, #616]	; (800fc68 <UART_SetConfig+0x6f4>)
 800f9fe:	fba3 1302 	umull	r1, r3, r3, r2
 800fa02:	095b      	lsrs	r3, r3, #5
 800fa04:	2164      	movs	r1, #100	; 0x64
 800fa06:	fb01 f303 	mul.w	r3, r1, r3
 800fa0a:	1ad3      	subs	r3, r2, r3
 800fa0c:	011b      	lsls	r3, r3, #4
 800fa0e:	3332      	adds	r3, #50	; 0x32
 800fa10:	4a95      	ldr	r2, [pc, #596]	; (800fc68 <UART_SetConfig+0x6f4>)
 800fa12:	fba2 2303 	umull	r2, r3, r2, r3
 800fa16:	095b      	lsrs	r3, r3, #5
 800fa18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fa1c:	4498      	add	r8, r3
 800fa1e:	68bb      	ldr	r3, [r7, #8]
 800fa20:	469b      	mov	fp, r3
 800fa22:	f04f 0c00 	mov.w	ip, #0
 800fa26:	46d9      	mov	r9, fp
 800fa28:	46e2      	mov	sl, ip
 800fa2a:	eb19 0309 	adds.w	r3, r9, r9
 800fa2e:	eb4a 040a 	adc.w	r4, sl, sl
 800fa32:	4699      	mov	r9, r3
 800fa34:	46a2      	mov	sl, r4
 800fa36:	eb19 090b 	adds.w	r9, r9, fp
 800fa3a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800fa3e:	f04f 0100 	mov.w	r1, #0
 800fa42:	f04f 0200 	mov.w	r2, #0
 800fa46:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800fa4a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800fa4e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800fa52:	4689      	mov	r9, r1
 800fa54:	4692      	mov	sl, r2
 800fa56:	eb1b 0509 	adds.w	r5, fp, r9
 800fa5a:	eb4c 060a 	adc.w	r6, ip, sl
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	685b      	ldr	r3, [r3, #4]
 800fa62:	4619      	mov	r1, r3
 800fa64:	f04f 0200 	mov.w	r2, #0
 800fa68:	f04f 0300 	mov.w	r3, #0
 800fa6c:	f04f 0400 	mov.w	r4, #0
 800fa70:	0094      	lsls	r4, r2, #2
 800fa72:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800fa76:	008b      	lsls	r3, r1, #2
 800fa78:	461a      	mov	r2, r3
 800fa7a:	4623      	mov	r3, r4
 800fa7c:	4628      	mov	r0, r5
 800fa7e:	4631      	mov	r1, r6
 800fa80:	f7f1 f91a 	bl	8000cb8 <__aeabi_uldivmod>
 800fa84:	4603      	mov	r3, r0
 800fa86:	460c      	mov	r4, r1
 800fa88:	461a      	mov	r2, r3
 800fa8a:	4b77      	ldr	r3, [pc, #476]	; (800fc68 <UART_SetConfig+0x6f4>)
 800fa8c:	fba3 1302 	umull	r1, r3, r3, r2
 800fa90:	095b      	lsrs	r3, r3, #5
 800fa92:	2164      	movs	r1, #100	; 0x64
 800fa94:	fb01 f303 	mul.w	r3, r1, r3
 800fa98:	1ad3      	subs	r3, r2, r3
 800fa9a:	011b      	lsls	r3, r3, #4
 800fa9c:	3332      	adds	r3, #50	; 0x32
 800fa9e:	4a72      	ldr	r2, [pc, #456]	; (800fc68 <UART_SetConfig+0x6f4>)
 800faa0:	fba2 2303 	umull	r2, r3, r2, r3
 800faa4:	095b      	lsrs	r3, r3, #5
 800faa6:	f003 020f 	and.w	r2, r3, #15
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	681b      	ldr	r3, [r3, #0]
 800faae:	4442      	add	r2, r8
 800fab0:	609a      	str	r2, [r3, #8]
 800fab2:	e0d0      	b.n	800fc56 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800fab4:	f7fc f95c 	bl	800bd70 <HAL_RCC_GetPCLK1Freq>
 800fab8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800faba:	68bb      	ldr	r3, [r7, #8]
 800fabc:	469a      	mov	sl, r3
 800fabe:	f04f 0b00 	mov.w	fp, #0
 800fac2:	46d0      	mov	r8, sl
 800fac4:	46d9      	mov	r9, fp
 800fac6:	eb18 0308 	adds.w	r3, r8, r8
 800faca:	eb49 0409 	adc.w	r4, r9, r9
 800face:	4698      	mov	r8, r3
 800fad0:	46a1      	mov	r9, r4
 800fad2:	eb18 080a 	adds.w	r8, r8, sl
 800fad6:	eb49 090b 	adc.w	r9, r9, fp
 800fada:	f04f 0100 	mov.w	r1, #0
 800fade:	f04f 0200 	mov.w	r2, #0
 800fae2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800fae6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800faea:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800faee:	4688      	mov	r8, r1
 800faf0:	4691      	mov	r9, r2
 800faf2:	eb1a 0508 	adds.w	r5, sl, r8
 800faf6:	eb4b 0609 	adc.w	r6, fp, r9
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	685b      	ldr	r3, [r3, #4]
 800fafe:	4619      	mov	r1, r3
 800fb00:	f04f 0200 	mov.w	r2, #0
 800fb04:	f04f 0300 	mov.w	r3, #0
 800fb08:	f04f 0400 	mov.w	r4, #0
 800fb0c:	0094      	lsls	r4, r2, #2
 800fb0e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800fb12:	008b      	lsls	r3, r1, #2
 800fb14:	461a      	mov	r2, r3
 800fb16:	4623      	mov	r3, r4
 800fb18:	4628      	mov	r0, r5
 800fb1a:	4631      	mov	r1, r6
 800fb1c:	f7f1 f8cc 	bl	8000cb8 <__aeabi_uldivmod>
 800fb20:	4603      	mov	r3, r0
 800fb22:	460c      	mov	r4, r1
 800fb24:	461a      	mov	r2, r3
 800fb26:	4b50      	ldr	r3, [pc, #320]	; (800fc68 <UART_SetConfig+0x6f4>)
 800fb28:	fba3 2302 	umull	r2, r3, r3, r2
 800fb2c:	095b      	lsrs	r3, r3, #5
 800fb2e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800fb32:	68bb      	ldr	r3, [r7, #8]
 800fb34:	469b      	mov	fp, r3
 800fb36:	f04f 0c00 	mov.w	ip, #0
 800fb3a:	46d9      	mov	r9, fp
 800fb3c:	46e2      	mov	sl, ip
 800fb3e:	eb19 0309 	adds.w	r3, r9, r9
 800fb42:	eb4a 040a 	adc.w	r4, sl, sl
 800fb46:	4699      	mov	r9, r3
 800fb48:	46a2      	mov	sl, r4
 800fb4a:	eb19 090b 	adds.w	r9, r9, fp
 800fb4e:	eb4a 0a0c 	adc.w	sl, sl, ip
 800fb52:	f04f 0100 	mov.w	r1, #0
 800fb56:	f04f 0200 	mov.w	r2, #0
 800fb5a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800fb5e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800fb62:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800fb66:	4689      	mov	r9, r1
 800fb68:	4692      	mov	sl, r2
 800fb6a:	eb1b 0509 	adds.w	r5, fp, r9
 800fb6e:	eb4c 060a 	adc.w	r6, ip, sl
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	685b      	ldr	r3, [r3, #4]
 800fb76:	4619      	mov	r1, r3
 800fb78:	f04f 0200 	mov.w	r2, #0
 800fb7c:	f04f 0300 	mov.w	r3, #0
 800fb80:	f04f 0400 	mov.w	r4, #0
 800fb84:	0094      	lsls	r4, r2, #2
 800fb86:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800fb8a:	008b      	lsls	r3, r1, #2
 800fb8c:	461a      	mov	r2, r3
 800fb8e:	4623      	mov	r3, r4
 800fb90:	4628      	mov	r0, r5
 800fb92:	4631      	mov	r1, r6
 800fb94:	f7f1 f890 	bl	8000cb8 <__aeabi_uldivmod>
 800fb98:	4603      	mov	r3, r0
 800fb9a:	460c      	mov	r4, r1
 800fb9c:	461a      	mov	r2, r3
 800fb9e:	4b32      	ldr	r3, [pc, #200]	; (800fc68 <UART_SetConfig+0x6f4>)
 800fba0:	fba3 1302 	umull	r1, r3, r3, r2
 800fba4:	095b      	lsrs	r3, r3, #5
 800fba6:	2164      	movs	r1, #100	; 0x64
 800fba8:	fb01 f303 	mul.w	r3, r1, r3
 800fbac:	1ad3      	subs	r3, r2, r3
 800fbae:	011b      	lsls	r3, r3, #4
 800fbb0:	3332      	adds	r3, #50	; 0x32
 800fbb2:	4a2d      	ldr	r2, [pc, #180]	; (800fc68 <UART_SetConfig+0x6f4>)
 800fbb4:	fba2 2303 	umull	r2, r3, r2, r3
 800fbb8:	095b      	lsrs	r3, r3, #5
 800fbba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fbbe:	4498      	add	r8, r3
 800fbc0:	68bb      	ldr	r3, [r7, #8]
 800fbc2:	469b      	mov	fp, r3
 800fbc4:	f04f 0c00 	mov.w	ip, #0
 800fbc8:	46d9      	mov	r9, fp
 800fbca:	46e2      	mov	sl, ip
 800fbcc:	eb19 0309 	adds.w	r3, r9, r9
 800fbd0:	eb4a 040a 	adc.w	r4, sl, sl
 800fbd4:	4699      	mov	r9, r3
 800fbd6:	46a2      	mov	sl, r4
 800fbd8:	eb19 090b 	adds.w	r9, r9, fp
 800fbdc:	eb4a 0a0c 	adc.w	sl, sl, ip
 800fbe0:	f04f 0100 	mov.w	r1, #0
 800fbe4:	f04f 0200 	mov.w	r2, #0
 800fbe8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800fbec:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800fbf0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800fbf4:	4689      	mov	r9, r1
 800fbf6:	4692      	mov	sl, r2
 800fbf8:	eb1b 0509 	adds.w	r5, fp, r9
 800fbfc:	eb4c 060a 	adc.w	r6, ip, sl
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	685b      	ldr	r3, [r3, #4]
 800fc04:	4619      	mov	r1, r3
 800fc06:	f04f 0200 	mov.w	r2, #0
 800fc0a:	f04f 0300 	mov.w	r3, #0
 800fc0e:	f04f 0400 	mov.w	r4, #0
 800fc12:	0094      	lsls	r4, r2, #2
 800fc14:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800fc18:	008b      	lsls	r3, r1, #2
 800fc1a:	461a      	mov	r2, r3
 800fc1c:	4623      	mov	r3, r4
 800fc1e:	4628      	mov	r0, r5
 800fc20:	4631      	mov	r1, r6
 800fc22:	f7f1 f849 	bl	8000cb8 <__aeabi_uldivmod>
 800fc26:	4603      	mov	r3, r0
 800fc28:	460c      	mov	r4, r1
 800fc2a:	461a      	mov	r2, r3
 800fc2c:	4b0e      	ldr	r3, [pc, #56]	; (800fc68 <UART_SetConfig+0x6f4>)
 800fc2e:	fba3 1302 	umull	r1, r3, r3, r2
 800fc32:	095b      	lsrs	r3, r3, #5
 800fc34:	2164      	movs	r1, #100	; 0x64
 800fc36:	fb01 f303 	mul.w	r3, r1, r3
 800fc3a:	1ad3      	subs	r3, r2, r3
 800fc3c:	011b      	lsls	r3, r3, #4
 800fc3e:	3332      	adds	r3, #50	; 0x32
 800fc40:	4a09      	ldr	r2, [pc, #36]	; (800fc68 <UART_SetConfig+0x6f4>)
 800fc42:	fba2 2303 	umull	r2, r3, r2, r3
 800fc46:	095b      	lsrs	r3, r3, #5
 800fc48:	f003 020f 	and.w	r2, r3, #15
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	681b      	ldr	r3, [r3, #0]
 800fc50:	4442      	add	r2, r8
 800fc52:	609a      	str	r2, [r3, #8]
}
 800fc54:	e7ff      	b.n	800fc56 <UART_SetConfig+0x6e2>
 800fc56:	bf00      	nop
 800fc58:	3714      	adds	r7, #20
 800fc5a:	46bd      	mov	sp, r7
 800fc5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc60:	40011000 	.word	0x40011000
 800fc64:	40011400 	.word	0x40011400
 800fc68:	51eb851f 	.word	0x51eb851f

0800fc6c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800fc6c:	b084      	sub	sp, #16
 800fc6e:	b480      	push	{r7}
 800fc70:	b085      	sub	sp, #20
 800fc72:	af00      	add	r7, sp, #0
 800fc74:	6078      	str	r0, [r7, #4]
 800fc76:	f107 001c 	add.w	r0, r7, #28
 800fc7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800fc7e:	2300      	movs	r3, #0
 800fc80:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800fc82:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800fc84:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800fc86:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800fc88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800fc8a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800fc8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800fc8e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800fc90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800fc92:	431a      	orrs	r2, r3
             Init.ClockDiv
 800fc94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800fc96:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800fc98:	68fa      	ldr	r2, [r7, #12]
 800fc9a:	4313      	orrs	r3, r2
 800fc9c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	685b      	ldr	r3, [r3, #4]
 800fca2:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800fca6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800fcaa:	68fa      	ldr	r2, [r7, #12]
 800fcac:	431a      	orrs	r2, r3
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800fcb2:	2300      	movs	r3, #0
}
 800fcb4:	4618      	mov	r0, r3
 800fcb6:	3714      	adds	r7, #20
 800fcb8:	46bd      	mov	sp, r7
 800fcba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcbe:	b004      	add	sp, #16
 800fcc0:	4770      	bx	lr

0800fcc2 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800fcc2:	b480      	push	{r7}
 800fcc4:	b083      	sub	sp, #12
 800fcc6:	af00      	add	r7, sp, #0
 800fcc8:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800fcd0:	4618      	mov	r0, r3
 800fcd2:	370c      	adds	r7, #12
 800fcd4:	46bd      	mov	sp, r7
 800fcd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcda:	4770      	bx	lr

0800fcdc <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800fcdc:	b480      	push	{r7}
 800fcde:	b083      	sub	sp, #12
 800fce0:	af00      	add	r7, sp, #0
 800fce2:	6078      	str	r0, [r7, #4]
 800fce4:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800fce6:	683b      	ldr	r3, [r7, #0]
 800fce8:	681a      	ldr	r2, [r3, #0]
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fcf0:	2300      	movs	r3, #0
}
 800fcf2:	4618      	mov	r0, r3
 800fcf4:	370c      	adds	r7, #12
 800fcf6:	46bd      	mov	sp, r7
 800fcf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcfc:	4770      	bx	lr

0800fcfe <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800fcfe:	b580      	push	{r7, lr}
 800fd00:	b082      	sub	sp, #8
 800fd02:	af00      	add	r7, sp, #0
 800fd04:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	2203      	movs	r2, #3
 800fd0a:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800fd0c:	2002      	movs	r0, #2
 800fd0e:	f7f9 fbdd 	bl	80094cc <HAL_Delay>
  
  return HAL_OK;
 800fd12:	2300      	movs	r3, #0
}
 800fd14:	4618      	mov	r0, r3
 800fd16:	3708      	adds	r7, #8
 800fd18:	46bd      	mov	sp, r7
 800fd1a:	bd80      	pop	{r7, pc}

0800fd1c <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800fd1c:	b480      	push	{r7}
 800fd1e:	b083      	sub	sp, #12
 800fd20:	af00      	add	r7, sp, #0
 800fd22:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	681b      	ldr	r3, [r3, #0]
 800fd28:	f003 0303 	and.w	r3, r3, #3
}
 800fd2c:	4618      	mov	r0, r3
 800fd2e:	370c      	adds	r7, #12
 800fd30:	46bd      	mov	sp, r7
 800fd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd36:	4770      	bx	lr

0800fd38 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800fd38:	b480      	push	{r7}
 800fd3a:	b085      	sub	sp, #20
 800fd3c:	af00      	add	r7, sp, #0
 800fd3e:	6078      	str	r0, [r7, #4]
 800fd40:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800fd42:	2300      	movs	r3, #0
 800fd44:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800fd46:	683b      	ldr	r3, [r7, #0]
 800fd48:	681a      	ldr	r2, [r3, #0]
 800fd4a:	687b      	ldr	r3, [r7, #4]
 800fd4c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800fd4e:	683b      	ldr	r3, [r7, #0]
 800fd50:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800fd52:	683b      	ldr	r3, [r7, #0]
 800fd54:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800fd56:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800fd58:	683b      	ldr	r3, [r7, #0]
 800fd5a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800fd5c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800fd5e:	683b      	ldr	r3, [r7, #0]
 800fd60:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800fd62:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800fd64:	68fa      	ldr	r2, [r7, #12]
 800fd66:	4313      	orrs	r3, r2
 800fd68:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	68db      	ldr	r3, [r3, #12]
 800fd6e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800fd72:	f023 030f 	bic.w	r3, r3, #15
 800fd76:	68fa      	ldr	r2, [r7, #12]
 800fd78:	431a      	orrs	r2, r3
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800fd7e:	2300      	movs	r3, #0
}
 800fd80:	4618      	mov	r0, r3
 800fd82:	3714      	adds	r7, #20
 800fd84:	46bd      	mov	sp, r7
 800fd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd8a:	4770      	bx	lr

0800fd8c <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800fd8c:	b480      	push	{r7}
 800fd8e:	b083      	sub	sp, #12
 800fd90:	af00      	add	r7, sp, #0
 800fd92:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	691b      	ldr	r3, [r3, #16]
 800fd98:	b2db      	uxtb	r3, r3
}
 800fd9a:	4618      	mov	r0, r3
 800fd9c:	370c      	adds	r7, #12
 800fd9e:	46bd      	mov	sp, r7
 800fda0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fda4:	4770      	bx	lr

0800fda6 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800fda6:	b480      	push	{r7}
 800fda8:	b085      	sub	sp, #20
 800fdaa:	af00      	add	r7, sp, #0
 800fdac:	6078      	str	r0, [r7, #4]
 800fdae:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	3314      	adds	r3, #20
 800fdb4:	461a      	mov	r2, r3
 800fdb6:	683b      	ldr	r3, [r7, #0]
 800fdb8:	4413      	add	r3, r2
 800fdba:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800fdbc:	68fb      	ldr	r3, [r7, #12]
 800fdbe:	681b      	ldr	r3, [r3, #0]
}  
 800fdc0:	4618      	mov	r0, r3
 800fdc2:	3714      	adds	r7, #20
 800fdc4:	46bd      	mov	sp, r7
 800fdc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdca:	4770      	bx	lr

0800fdcc <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800fdcc:	b480      	push	{r7}
 800fdce:	b085      	sub	sp, #20
 800fdd0:	af00      	add	r7, sp, #0
 800fdd2:	6078      	str	r0, [r7, #4]
 800fdd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800fdd6:	2300      	movs	r3, #0
 800fdd8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800fdda:	683b      	ldr	r3, [r7, #0]
 800fddc:	681a      	ldr	r2, [r3, #0]
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800fde2:	683b      	ldr	r3, [r7, #0]
 800fde4:	685a      	ldr	r2, [r3, #4]
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800fdea:	683b      	ldr	r3, [r7, #0]
 800fdec:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800fdee:	683b      	ldr	r3, [r7, #0]
 800fdf0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800fdf2:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800fdf4:	683b      	ldr	r3, [r7, #0]
 800fdf6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800fdf8:	431a      	orrs	r2, r3
                       Data->DPSM);
 800fdfa:	683b      	ldr	r3, [r7, #0]
 800fdfc:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800fdfe:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800fe00:	68fa      	ldr	r2, [r7, #12]
 800fe02:	4313      	orrs	r3, r2
 800fe04:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe0a:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800fe0e:	68fb      	ldr	r3, [r7, #12]
 800fe10:	431a      	orrs	r2, r3
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800fe16:	2300      	movs	r3, #0

}
 800fe18:	4618      	mov	r0, r3
 800fe1a:	3714      	adds	r7, #20
 800fe1c:	46bd      	mov	sp, r7
 800fe1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe22:	4770      	bx	lr

0800fe24 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800fe24:	b580      	push	{r7, lr}
 800fe26:	b088      	sub	sp, #32
 800fe28:	af00      	add	r7, sp, #0
 800fe2a:	6078      	str	r0, [r7, #4]
 800fe2c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800fe2e:	683b      	ldr	r3, [r7, #0]
 800fe30:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800fe32:	2310      	movs	r3, #16
 800fe34:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800fe36:	2340      	movs	r3, #64	; 0x40
 800fe38:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800fe3a:	2300      	movs	r3, #0
 800fe3c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800fe3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fe42:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800fe44:	f107 0308 	add.w	r3, r7, #8
 800fe48:	4619      	mov	r1, r3
 800fe4a:	6878      	ldr	r0, [r7, #4]
 800fe4c:	f7ff ff74 	bl	800fd38 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800fe50:	f241 3288 	movw	r2, #5000	; 0x1388
 800fe54:	2110      	movs	r1, #16
 800fe56:	6878      	ldr	r0, [r7, #4]
 800fe58:	f000 fa40 	bl	80102dc <SDMMC_GetCmdResp1>
 800fe5c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fe5e:	69fb      	ldr	r3, [r7, #28]
}
 800fe60:	4618      	mov	r0, r3
 800fe62:	3720      	adds	r7, #32
 800fe64:	46bd      	mov	sp, r7
 800fe66:	bd80      	pop	{r7, pc}

0800fe68 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800fe68:	b580      	push	{r7, lr}
 800fe6a:	b088      	sub	sp, #32
 800fe6c:	af00      	add	r7, sp, #0
 800fe6e:	6078      	str	r0, [r7, #4]
 800fe70:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800fe72:	683b      	ldr	r3, [r7, #0]
 800fe74:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800fe76:	2311      	movs	r3, #17
 800fe78:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800fe7a:	2340      	movs	r3, #64	; 0x40
 800fe7c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800fe7e:	2300      	movs	r3, #0
 800fe80:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800fe82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fe86:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800fe88:	f107 0308 	add.w	r3, r7, #8
 800fe8c:	4619      	mov	r1, r3
 800fe8e:	6878      	ldr	r0, [r7, #4]
 800fe90:	f7ff ff52 	bl	800fd38 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800fe94:	f241 3288 	movw	r2, #5000	; 0x1388
 800fe98:	2111      	movs	r1, #17
 800fe9a:	6878      	ldr	r0, [r7, #4]
 800fe9c:	f000 fa1e 	bl	80102dc <SDMMC_GetCmdResp1>
 800fea0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fea2:	69fb      	ldr	r3, [r7, #28]
}
 800fea4:	4618      	mov	r0, r3
 800fea6:	3720      	adds	r7, #32
 800fea8:	46bd      	mov	sp, r7
 800feaa:	bd80      	pop	{r7, pc}

0800feac <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800feac:	b580      	push	{r7, lr}
 800feae:	b088      	sub	sp, #32
 800feb0:	af00      	add	r7, sp, #0
 800feb2:	6078      	str	r0, [r7, #4]
 800feb4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800feb6:	683b      	ldr	r3, [r7, #0]
 800feb8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800feba:	2312      	movs	r3, #18
 800febc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800febe:	2340      	movs	r3, #64	; 0x40
 800fec0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800fec2:	2300      	movs	r3, #0
 800fec4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800fec6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800feca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800fecc:	f107 0308 	add.w	r3, r7, #8
 800fed0:	4619      	mov	r1, r3
 800fed2:	6878      	ldr	r0, [r7, #4]
 800fed4:	f7ff ff30 	bl	800fd38 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800fed8:	f241 3288 	movw	r2, #5000	; 0x1388
 800fedc:	2112      	movs	r1, #18
 800fede:	6878      	ldr	r0, [r7, #4]
 800fee0:	f000 f9fc 	bl	80102dc <SDMMC_GetCmdResp1>
 800fee4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800fee6:	69fb      	ldr	r3, [r7, #28]
}
 800fee8:	4618      	mov	r0, r3
 800feea:	3720      	adds	r7, #32
 800feec:	46bd      	mov	sp, r7
 800feee:	bd80      	pop	{r7, pc}

0800fef0 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800fef0:	b580      	push	{r7, lr}
 800fef2:	b088      	sub	sp, #32
 800fef4:	af00      	add	r7, sp, #0
 800fef6:	6078      	str	r0, [r7, #4]
 800fef8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800fefa:	683b      	ldr	r3, [r7, #0]
 800fefc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800fefe:	2318      	movs	r3, #24
 800ff00:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ff02:	2340      	movs	r3, #64	; 0x40
 800ff04:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ff06:	2300      	movs	r3, #0
 800ff08:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ff0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ff0e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ff10:	f107 0308 	add.w	r3, r7, #8
 800ff14:	4619      	mov	r1, r3
 800ff16:	6878      	ldr	r0, [r7, #4]
 800ff18:	f7ff ff0e 	bl	800fd38 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800ff1c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ff20:	2118      	movs	r1, #24
 800ff22:	6878      	ldr	r0, [r7, #4]
 800ff24:	f000 f9da 	bl	80102dc <SDMMC_GetCmdResp1>
 800ff28:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ff2a:	69fb      	ldr	r3, [r7, #28]
}
 800ff2c:	4618      	mov	r0, r3
 800ff2e:	3720      	adds	r7, #32
 800ff30:	46bd      	mov	sp, r7
 800ff32:	bd80      	pop	{r7, pc}

0800ff34 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800ff34:	b580      	push	{r7, lr}
 800ff36:	b088      	sub	sp, #32
 800ff38:	af00      	add	r7, sp, #0
 800ff3a:	6078      	str	r0, [r7, #4]
 800ff3c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ff3e:	683b      	ldr	r3, [r7, #0]
 800ff40:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800ff42:	2319      	movs	r3, #25
 800ff44:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ff46:	2340      	movs	r3, #64	; 0x40
 800ff48:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ff4a:	2300      	movs	r3, #0
 800ff4c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ff4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ff52:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ff54:	f107 0308 	add.w	r3, r7, #8
 800ff58:	4619      	mov	r1, r3
 800ff5a:	6878      	ldr	r0, [r7, #4]
 800ff5c:	f7ff feec 	bl	800fd38 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800ff60:	f241 3288 	movw	r2, #5000	; 0x1388
 800ff64:	2119      	movs	r1, #25
 800ff66:	6878      	ldr	r0, [r7, #4]
 800ff68:	f000 f9b8 	bl	80102dc <SDMMC_GetCmdResp1>
 800ff6c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ff6e:	69fb      	ldr	r3, [r7, #28]
}
 800ff70:	4618      	mov	r0, r3
 800ff72:	3720      	adds	r7, #32
 800ff74:	46bd      	mov	sp, r7
 800ff76:	bd80      	pop	{r7, pc}

0800ff78 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800ff78:	b580      	push	{r7, lr}
 800ff7a:	b088      	sub	sp, #32
 800ff7c:	af00      	add	r7, sp, #0
 800ff7e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800ff80:	2300      	movs	r3, #0
 800ff82:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800ff84:	230c      	movs	r3, #12
 800ff86:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ff88:	2340      	movs	r3, #64	; 0x40
 800ff8a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ff8c:	2300      	movs	r3, #0
 800ff8e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ff90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ff94:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ff96:	f107 0308 	add.w	r3, r7, #8
 800ff9a:	4619      	mov	r1, r3
 800ff9c:	6878      	ldr	r0, [r7, #4]
 800ff9e:	f7ff fecb 	bl	800fd38 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800ffa2:	4a05      	ldr	r2, [pc, #20]	; (800ffb8 <SDMMC_CmdStopTransfer+0x40>)
 800ffa4:	210c      	movs	r1, #12
 800ffa6:	6878      	ldr	r0, [r7, #4]
 800ffa8:	f000 f998 	bl	80102dc <SDMMC_GetCmdResp1>
 800ffac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ffae:	69fb      	ldr	r3, [r7, #28]
}
 800ffb0:	4618      	mov	r0, r3
 800ffb2:	3720      	adds	r7, #32
 800ffb4:	46bd      	mov	sp, r7
 800ffb6:	bd80      	pop	{r7, pc}
 800ffb8:	05f5e100 	.word	0x05f5e100

0800ffbc <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800ffbc:	b580      	push	{r7, lr}
 800ffbe:	b08a      	sub	sp, #40	; 0x28
 800ffc0:	af00      	add	r7, sp, #0
 800ffc2:	60f8      	str	r0, [r7, #12]
 800ffc4:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800ffc8:	683b      	ldr	r3, [r7, #0]
 800ffca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800ffcc:	2307      	movs	r3, #7
 800ffce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ffd0:	2340      	movs	r3, #64	; 0x40
 800ffd2:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ffd4:	2300      	movs	r3, #0
 800ffd6:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ffd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ffdc:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ffde:	f107 0310 	add.w	r3, r7, #16
 800ffe2:	4619      	mov	r1, r3
 800ffe4:	68f8      	ldr	r0, [r7, #12]
 800ffe6:	f7ff fea7 	bl	800fd38 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800ffea:	f241 3288 	movw	r2, #5000	; 0x1388
 800ffee:	2107      	movs	r1, #7
 800fff0:	68f8      	ldr	r0, [r7, #12]
 800fff2:	f000 f973 	bl	80102dc <SDMMC_GetCmdResp1>
 800fff6:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800fff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800fffa:	4618      	mov	r0, r3
 800fffc:	3728      	adds	r7, #40	; 0x28
 800fffe:	46bd      	mov	sp, r7
 8010000:	bd80      	pop	{r7, pc}

08010002 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8010002:	b580      	push	{r7, lr}
 8010004:	b088      	sub	sp, #32
 8010006:	af00      	add	r7, sp, #0
 8010008:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 801000a:	2300      	movs	r3, #0
 801000c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 801000e:	2300      	movs	r3, #0
 8010010:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8010012:	2300      	movs	r3, #0
 8010014:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010016:	2300      	movs	r3, #0
 8010018:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801001a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801001e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010020:	f107 0308 	add.w	r3, r7, #8
 8010024:	4619      	mov	r1, r3
 8010026:	6878      	ldr	r0, [r7, #4]
 8010028:	f7ff fe86 	bl	800fd38 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 801002c:	6878      	ldr	r0, [r7, #4]
 801002e:	f000 f92d 	bl	801028c <SDMMC_GetCmdError>
 8010032:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010034:	69fb      	ldr	r3, [r7, #28]
}
 8010036:	4618      	mov	r0, r3
 8010038:	3720      	adds	r7, #32
 801003a:	46bd      	mov	sp, r7
 801003c:	bd80      	pop	{r7, pc}

0801003e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 801003e:	b580      	push	{r7, lr}
 8010040:	b088      	sub	sp, #32
 8010042:	af00      	add	r7, sp, #0
 8010044:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8010046:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 801004a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 801004c:	2308      	movs	r3, #8
 801004e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010050:	2340      	movs	r3, #64	; 0x40
 8010052:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010054:	2300      	movs	r3, #0
 8010056:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010058:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801005c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801005e:	f107 0308 	add.w	r3, r7, #8
 8010062:	4619      	mov	r1, r3
 8010064:	6878      	ldr	r0, [r7, #4]
 8010066:	f7ff fe67 	bl	800fd38 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 801006a:	6878      	ldr	r0, [r7, #4]
 801006c:	f000 fb16 	bl	801069c <SDMMC_GetCmdResp7>
 8010070:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010072:	69fb      	ldr	r3, [r7, #28]
}
 8010074:	4618      	mov	r0, r3
 8010076:	3720      	adds	r7, #32
 8010078:	46bd      	mov	sp, r7
 801007a:	bd80      	pop	{r7, pc}

0801007c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 801007c:	b580      	push	{r7, lr}
 801007e:	b088      	sub	sp, #32
 8010080:	af00      	add	r7, sp, #0
 8010082:	6078      	str	r0, [r7, #4]
 8010084:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8010086:	683b      	ldr	r3, [r7, #0]
 8010088:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 801008a:	2337      	movs	r3, #55	; 0x37
 801008c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801008e:	2340      	movs	r3, #64	; 0x40
 8010090:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010092:	2300      	movs	r3, #0
 8010094:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010096:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801009a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801009c:	f107 0308 	add.w	r3, r7, #8
 80100a0:	4619      	mov	r1, r3
 80100a2:	6878      	ldr	r0, [r7, #4]
 80100a4:	f7ff fe48 	bl	800fd38 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80100a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80100ac:	2137      	movs	r1, #55	; 0x37
 80100ae:	6878      	ldr	r0, [r7, #4]
 80100b0:	f000 f914 	bl	80102dc <SDMMC_GetCmdResp1>
 80100b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80100b6:	69fb      	ldr	r3, [r7, #28]
}
 80100b8:	4618      	mov	r0, r3
 80100ba:	3720      	adds	r7, #32
 80100bc:	46bd      	mov	sp, r7
 80100be:	bd80      	pop	{r7, pc}

080100c0 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80100c0:	b580      	push	{r7, lr}
 80100c2:	b088      	sub	sp, #32
 80100c4:	af00      	add	r7, sp, #0
 80100c6:	6078      	str	r0, [r7, #4]
 80100c8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80100ca:	683b      	ldr	r3, [r7, #0]
 80100cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80100d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80100d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80100d6:	2329      	movs	r3, #41	; 0x29
 80100d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80100da:	2340      	movs	r3, #64	; 0x40
 80100dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80100de:	2300      	movs	r3, #0
 80100e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80100e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80100e6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80100e8:	f107 0308 	add.w	r3, r7, #8
 80100ec:	4619      	mov	r1, r3
 80100ee:	6878      	ldr	r0, [r7, #4]
 80100f0:	f7ff fe22 	bl	800fd38 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80100f4:	6878      	ldr	r0, [r7, #4]
 80100f6:	f000 fa23 	bl	8010540 <SDMMC_GetCmdResp3>
 80100fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80100fc:	69fb      	ldr	r3, [r7, #28]
}
 80100fe:	4618      	mov	r0, r3
 8010100:	3720      	adds	r7, #32
 8010102:	46bd      	mov	sp, r7
 8010104:	bd80      	pop	{r7, pc}

08010106 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8010106:	b580      	push	{r7, lr}
 8010108:	b088      	sub	sp, #32
 801010a:	af00      	add	r7, sp, #0
 801010c:	6078      	str	r0, [r7, #4]
 801010e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8010110:	683b      	ldr	r3, [r7, #0]
 8010112:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8010114:	2306      	movs	r3, #6
 8010116:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010118:	2340      	movs	r3, #64	; 0x40
 801011a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801011c:	2300      	movs	r3, #0
 801011e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010120:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010124:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010126:	f107 0308 	add.w	r3, r7, #8
 801012a:	4619      	mov	r1, r3
 801012c:	6878      	ldr	r0, [r7, #4]
 801012e:	f7ff fe03 	bl	800fd38 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8010132:	f241 3288 	movw	r2, #5000	; 0x1388
 8010136:	2106      	movs	r1, #6
 8010138:	6878      	ldr	r0, [r7, #4]
 801013a:	f000 f8cf 	bl	80102dc <SDMMC_GetCmdResp1>
 801013e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010140:	69fb      	ldr	r3, [r7, #28]
}
 8010142:	4618      	mov	r0, r3
 8010144:	3720      	adds	r7, #32
 8010146:	46bd      	mov	sp, r7
 8010148:	bd80      	pop	{r7, pc}

0801014a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 801014a:	b580      	push	{r7, lr}
 801014c:	b088      	sub	sp, #32
 801014e:	af00      	add	r7, sp, #0
 8010150:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8010152:	2300      	movs	r3, #0
 8010154:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8010156:	2333      	movs	r3, #51	; 0x33
 8010158:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801015a:	2340      	movs	r3, #64	; 0x40
 801015c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801015e:	2300      	movs	r3, #0
 8010160:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010162:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010166:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010168:	f107 0308 	add.w	r3, r7, #8
 801016c:	4619      	mov	r1, r3
 801016e:	6878      	ldr	r0, [r7, #4]
 8010170:	f7ff fde2 	bl	800fd38 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8010174:	f241 3288 	movw	r2, #5000	; 0x1388
 8010178:	2133      	movs	r1, #51	; 0x33
 801017a:	6878      	ldr	r0, [r7, #4]
 801017c:	f000 f8ae 	bl	80102dc <SDMMC_GetCmdResp1>
 8010180:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010182:	69fb      	ldr	r3, [r7, #28]
}
 8010184:	4618      	mov	r0, r3
 8010186:	3720      	adds	r7, #32
 8010188:	46bd      	mov	sp, r7
 801018a:	bd80      	pop	{r7, pc}

0801018c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 801018c:	b580      	push	{r7, lr}
 801018e:	b088      	sub	sp, #32
 8010190:	af00      	add	r7, sp, #0
 8010192:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8010194:	2300      	movs	r3, #0
 8010196:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8010198:	2302      	movs	r3, #2
 801019a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 801019c:	23c0      	movs	r3, #192	; 0xc0
 801019e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80101a0:	2300      	movs	r3, #0
 80101a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80101a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80101a8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80101aa:	f107 0308 	add.w	r3, r7, #8
 80101ae:	4619      	mov	r1, r3
 80101b0:	6878      	ldr	r0, [r7, #4]
 80101b2:	f7ff fdc1 	bl	800fd38 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80101b6:	6878      	ldr	r0, [r7, #4]
 80101b8:	f000 f97c 	bl	80104b4 <SDMMC_GetCmdResp2>
 80101bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80101be:	69fb      	ldr	r3, [r7, #28]
}
 80101c0:	4618      	mov	r0, r3
 80101c2:	3720      	adds	r7, #32
 80101c4:	46bd      	mov	sp, r7
 80101c6:	bd80      	pop	{r7, pc}

080101c8 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80101c8:	b580      	push	{r7, lr}
 80101ca:	b088      	sub	sp, #32
 80101cc:	af00      	add	r7, sp, #0
 80101ce:	6078      	str	r0, [r7, #4]
 80101d0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80101d2:	683b      	ldr	r3, [r7, #0]
 80101d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80101d6:	2309      	movs	r3, #9
 80101d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80101da:	23c0      	movs	r3, #192	; 0xc0
 80101dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80101de:	2300      	movs	r3, #0
 80101e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80101e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80101e6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80101e8:	f107 0308 	add.w	r3, r7, #8
 80101ec:	4619      	mov	r1, r3
 80101ee:	6878      	ldr	r0, [r7, #4]
 80101f0:	f7ff fda2 	bl	800fd38 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80101f4:	6878      	ldr	r0, [r7, #4]
 80101f6:	f000 f95d 	bl	80104b4 <SDMMC_GetCmdResp2>
 80101fa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80101fc:	69fb      	ldr	r3, [r7, #28]
}
 80101fe:	4618      	mov	r0, r3
 8010200:	3720      	adds	r7, #32
 8010202:	46bd      	mov	sp, r7
 8010204:	bd80      	pop	{r7, pc}

08010206 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8010206:	b580      	push	{r7, lr}
 8010208:	b088      	sub	sp, #32
 801020a:	af00      	add	r7, sp, #0
 801020c:	6078      	str	r0, [r7, #4]
 801020e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8010210:	2300      	movs	r3, #0
 8010212:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8010214:	2303      	movs	r3, #3
 8010216:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010218:	2340      	movs	r3, #64	; 0x40
 801021a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801021c:	2300      	movs	r3, #0
 801021e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010220:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010224:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010226:	f107 0308 	add.w	r3, r7, #8
 801022a:	4619      	mov	r1, r3
 801022c:	6878      	ldr	r0, [r7, #4]
 801022e:	f7ff fd83 	bl	800fd38 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8010232:	683a      	ldr	r2, [r7, #0]
 8010234:	2103      	movs	r1, #3
 8010236:	6878      	ldr	r0, [r7, #4]
 8010238:	f000 f9bc 	bl	80105b4 <SDMMC_GetCmdResp6>
 801023c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801023e:	69fb      	ldr	r3, [r7, #28]
}
 8010240:	4618      	mov	r0, r3
 8010242:	3720      	adds	r7, #32
 8010244:	46bd      	mov	sp, r7
 8010246:	bd80      	pop	{r7, pc}

08010248 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010248:	b580      	push	{r7, lr}
 801024a:	b088      	sub	sp, #32
 801024c:	af00      	add	r7, sp, #0
 801024e:	6078      	str	r0, [r7, #4]
 8010250:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8010252:	683b      	ldr	r3, [r7, #0]
 8010254:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8010256:	230d      	movs	r3, #13
 8010258:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801025a:	2340      	movs	r3, #64	; 0x40
 801025c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801025e:	2300      	movs	r3, #0
 8010260:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010262:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010266:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010268:	f107 0308 	add.w	r3, r7, #8
 801026c:	4619      	mov	r1, r3
 801026e:	6878      	ldr	r0, [r7, #4]
 8010270:	f7ff fd62 	bl	800fd38 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8010274:	f241 3288 	movw	r2, #5000	; 0x1388
 8010278:	210d      	movs	r1, #13
 801027a:	6878      	ldr	r0, [r7, #4]
 801027c:	f000 f82e 	bl	80102dc <SDMMC_GetCmdResp1>
 8010280:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010282:	69fb      	ldr	r3, [r7, #28]
}
 8010284:	4618      	mov	r0, r3
 8010286:	3720      	adds	r7, #32
 8010288:	46bd      	mov	sp, r7
 801028a:	bd80      	pop	{r7, pc}

0801028c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 801028c:	b490      	push	{r4, r7}
 801028e:	b082      	sub	sp, #8
 8010290:	af00      	add	r7, sp, #0
 8010292:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010294:	4b0f      	ldr	r3, [pc, #60]	; (80102d4 <SDMMC_GetCmdError+0x48>)
 8010296:	681b      	ldr	r3, [r3, #0]
 8010298:	4a0f      	ldr	r2, [pc, #60]	; (80102d8 <SDMMC_GetCmdError+0x4c>)
 801029a:	fba2 2303 	umull	r2, r3, r2, r3
 801029e:	0a5b      	lsrs	r3, r3, #9
 80102a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80102a4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80102a8:	4623      	mov	r3, r4
 80102aa:	1e5c      	subs	r4, r3, #1
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d102      	bne.n	80102b6 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80102b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80102b4:	e009      	b.n	80102ca <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80102ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d0f2      	beq.n	80102a8 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	22c5      	movs	r2, #197	; 0xc5
 80102c6:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80102c8:	2300      	movs	r3, #0
}
 80102ca:	4618      	mov	r0, r3
 80102cc:	3708      	adds	r7, #8
 80102ce:	46bd      	mov	sp, r7
 80102d0:	bc90      	pop	{r4, r7}
 80102d2:	4770      	bx	lr
 80102d4:	20000000 	.word	0x20000000
 80102d8:	10624dd3 	.word	0x10624dd3

080102dc <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80102dc:	b590      	push	{r4, r7, lr}
 80102de:	b087      	sub	sp, #28
 80102e0:	af00      	add	r7, sp, #0
 80102e2:	60f8      	str	r0, [r7, #12]
 80102e4:	460b      	mov	r3, r1
 80102e6:	607a      	str	r2, [r7, #4]
 80102e8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80102ea:	4b6f      	ldr	r3, [pc, #444]	; (80104a8 <SDMMC_GetCmdResp1+0x1cc>)
 80102ec:	681b      	ldr	r3, [r3, #0]
 80102ee:	4a6f      	ldr	r2, [pc, #444]	; (80104ac <SDMMC_GetCmdResp1+0x1d0>)
 80102f0:	fba2 2303 	umull	r2, r3, r2, r3
 80102f4:	0a5b      	lsrs	r3, r3, #9
 80102f6:	687a      	ldr	r2, [r7, #4]
 80102f8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80102fc:	4623      	mov	r3, r4
 80102fe:	1e5c      	subs	r4, r3, #1
 8010300:	2b00      	cmp	r3, #0
 8010302:	d102      	bne.n	801030a <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010304:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010308:	e0c9      	b.n	801049e <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 801030a:	68fb      	ldr	r3, [r7, #12]
 801030c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801030e:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010310:	697b      	ldr	r3, [r7, #20]
 8010312:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010316:	2b00      	cmp	r3, #0
 8010318:	d0f0      	beq.n	80102fc <SDMMC_GetCmdResp1+0x20>
 801031a:	697b      	ldr	r3, [r7, #20]
 801031c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010320:	2b00      	cmp	r3, #0
 8010322:	d1eb      	bne.n	80102fc <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010328:	f003 0304 	and.w	r3, r3, #4
 801032c:	2b00      	cmp	r3, #0
 801032e:	d004      	beq.n	801033a <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010330:	68fb      	ldr	r3, [r7, #12]
 8010332:	2204      	movs	r2, #4
 8010334:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010336:	2304      	movs	r3, #4
 8010338:	e0b1      	b.n	801049e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 801033a:	68fb      	ldr	r3, [r7, #12]
 801033c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801033e:	f003 0301 	and.w	r3, r3, #1
 8010342:	2b00      	cmp	r3, #0
 8010344:	d004      	beq.n	8010350 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8010346:	68fb      	ldr	r3, [r7, #12]
 8010348:	2201      	movs	r2, #1
 801034a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801034c:	2301      	movs	r3, #1
 801034e:	e0a6      	b.n	801049e <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010350:	68fb      	ldr	r3, [r7, #12]
 8010352:	22c5      	movs	r2, #197	; 0xc5
 8010354:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8010356:	68f8      	ldr	r0, [r7, #12]
 8010358:	f7ff fd18 	bl	800fd8c <SDIO_GetCommandResponse>
 801035c:	4603      	mov	r3, r0
 801035e:	461a      	mov	r2, r3
 8010360:	7afb      	ldrb	r3, [r7, #11]
 8010362:	4293      	cmp	r3, r2
 8010364:	d001      	beq.n	801036a <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010366:	2301      	movs	r3, #1
 8010368:	e099      	b.n	801049e <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 801036a:	2100      	movs	r1, #0
 801036c:	68f8      	ldr	r0, [r7, #12]
 801036e:	f7ff fd1a 	bl	800fda6 <SDIO_GetResponse>
 8010372:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8010374:	693a      	ldr	r2, [r7, #16]
 8010376:	4b4e      	ldr	r3, [pc, #312]	; (80104b0 <SDMMC_GetCmdResp1+0x1d4>)
 8010378:	4013      	ands	r3, r2
 801037a:	2b00      	cmp	r3, #0
 801037c:	d101      	bne.n	8010382 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 801037e:	2300      	movs	r3, #0
 8010380:	e08d      	b.n	801049e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8010382:	693b      	ldr	r3, [r7, #16]
 8010384:	2b00      	cmp	r3, #0
 8010386:	da02      	bge.n	801038e <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8010388:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801038c:	e087      	b.n	801049e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 801038e:	693b      	ldr	r3, [r7, #16]
 8010390:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8010394:	2b00      	cmp	r3, #0
 8010396:	d001      	beq.n	801039c <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8010398:	2340      	movs	r3, #64	; 0x40
 801039a:	e080      	b.n	801049e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 801039c:	693b      	ldr	r3, [r7, #16]
 801039e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	d001      	beq.n	80103aa <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80103a6:	2380      	movs	r3, #128	; 0x80
 80103a8:	e079      	b.n	801049e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80103aa:	693b      	ldr	r3, [r7, #16]
 80103ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	d002      	beq.n	80103ba <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80103b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80103b8:	e071      	b.n	801049e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80103ba:	693b      	ldr	r3, [r7, #16]
 80103bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	d002      	beq.n	80103ca <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80103c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80103c8:	e069      	b.n	801049e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80103ca:	693b      	ldr	r3, [r7, #16]
 80103cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d002      	beq.n	80103da <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80103d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80103d8:	e061      	b.n	801049e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80103da:	693b      	ldr	r3, [r7, #16]
 80103dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	d002      	beq.n	80103ea <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80103e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80103e8:	e059      	b.n	801049e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80103ea:	693b      	ldr	r3, [r7, #16]
 80103ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d002      	beq.n	80103fa <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80103f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80103f8:	e051      	b.n	801049e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80103fa:	693b      	ldr	r3, [r7, #16]
 80103fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010400:	2b00      	cmp	r3, #0
 8010402:	d002      	beq.n	801040a <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010404:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010408:	e049      	b.n	801049e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 801040a:	693b      	ldr	r3, [r7, #16]
 801040c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8010410:	2b00      	cmp	r3, #0
 8010412:	d002      	beq.n	801041a <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8010414:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010418:	e041      	b.n	801049e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 801041a:	693b      	ldr	r3, [r7, #16]
 801041c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010420:	2b00      	cmp	r3, #0
 8010422:	d002      	beq.n	801042a <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8010424:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010428:	e039      	b.n	801049e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 801042a:	693b      	ldr	r3, [r7, #16]
 801042c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010430:	2b00      	cmp	r3, #0
 8010432:	d002      	beq.n	801043a <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8010434:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8010438:	e031      	b.n	801049e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 801043a:	693b      	ldr	r3, [r7, #16]
 801043c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010440:	2b00      	cmp	r3, #0
 8010442:	d002      	beq.n	801044a <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8010444:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8010448:	e029      	b.n	801049e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 801044a:	693b      	ldr	r3, [r7, #16]
 801044c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010450:	2b00      	cmp	r3, #0
 8010452:	d002      	beq.n	801045a <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8010454:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8010458:	e021      	b.n	801049e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 801045a:	693b      	ldr	r3, [r7, #16]
 801045c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010460:	2b00      	cmp	r3, #0
 8010462:	d002      	beq.n	801046a <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8010464:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8010468:	e019      	b.n	801049e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 801046a:	693b      	ldr	r3, [r7, #16]
 801046c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010470:	2b00      	cmp	r3, #0
 8010472:	d002      	beq.n	801047a <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8010474:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8010478:	e011      	b.n	801049e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 801047a:	693b      	ldr	r3, [r7, #16]
 801047c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010480:	2b00      	cmp	r3, #0
 8010482:	d002      	beq.n	801048a <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8010484:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8010488:	e009      	b.n	801049e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 801048a:	693b      	ldr	r3, [r7, #16]
 801048c:	f003 0308 	and.w	r3, r3, #8
 8010490:	2b00      	cmp	r3, #0
 8010492:	d002      	beq.n	801049a <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8010494:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8010498:	e001      	b.n	801049e <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801049a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 801049e:	4618      	mov	r0, r3
 80104a0:	371c      	adds	r7, #28
 80104a2:	46bd      	mov	sp, r7
 80104a4:	bd90      	pop	{r4, r7, pc}
 80104a6:	bf00      	nop
 80104a8:	20000000 	.word	0x20000000
 80104ac:	10624dd3 	.word	0x10624dd3
 80104b0:	fdffe008 	.word	0xfdffe008

080104b4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80104b4:	b490      	push	{r4, r7}
 80104b6:	b084      	sub	sp, #16
 80104b8:	af00      	add	r7, sp, #0
 80104ba:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80104bc:	4b1e      	ldr	r3, [pc, #120]	; (8010538 <SDMMC_GetCmdResp2+0x84>)
 80104be:	681b      	ldr	r3, [r3, #0]
 80104c0:	4a1e      	ldr	r2, [pc, #120]	; (801053c <SDMMC_GetCmdResp2+0x88>)
 80104c2:	fba2 2303 	umull	r2, r3, r2, r3
 80104c6:	0a5b      	lsrs	r3, r3, #9
 80104c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80104cc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80104d0:	4623      	mov	r3, r4
 80104d2:	1e5c      	subs	r4, r3, #1
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	d102      	bne.n	80104de <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80104d8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80104dc:	e026      	b.n	801052c <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80104e2:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80104e4:	68fb      	ldr	r3, [r7, #12]
 80104e6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d0f0      	beq.n	80104d0 <SDMMC_GetCmdResp2+0x1c>
 80104ee:	68fb      	ldr	r3, [r7, #12]
 80104f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	d1eb      	bne.n	80104d0 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80104fc:	f003 0304 	and.w	r3, r3, #4
 8010500:	2b00      	cmp	r3, #0
 8010502:	d004      	beq.n	801050e <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	2204      	movs	r2, #4
 8010508:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801050a:	2304      	movs	r3, #4
 801050c:	e00e      	b.n	801052c <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010512:	f003 0301 	and.w	r3, r3, #1
 8010516:	2b00      	cmp	r3, #0
 8010518:	d004      	beq.n	8010524 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	2201      	movs	r2, #1
 801051e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010520:	2301      	movs	r3, #1
 8010522:	e003      	b.n	801052c <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	22c5      	movs	r2, #197	; 0xc5
 8010528:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 801052a:	2300      	movs	r3, #0
}
 801052c:	4618      	mov	r0, r3
 801052e:	3710      	adds	r7, #16
 8010530:	46bd      	mov	sp, r7
 8010532:	bc90      	pop	{r4, r7}
 8010534:	4770      	bx	lr
 8010536:	bf00      	nop
 8010538:	20000000 	.word	0x20000000
 801053c:	10624dd3 	.word	0x10624dd3

08010540 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8010540:	b490      	push	{r4, r7}
 8010542:	b084      	sub	sp, #16
 8010544:	af00      	add	r7, sp, #0
 8010546:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010548:	4b18      	ldr	r3, [pc, #96]	; (80105ac <SDMMC_GetCmdResp3+0x6c>)
 801054a:	681b      	ldr	r3, [r3, #0]
 801054c:	4a18      	ldr	r2, [pc, #96]	; (80105b0 <SDMMC_GetCmdResp3+0x70>)
 801054e:	fba2 2303 	umull	r2, r3, r2, r3
 8010552:	0a5b      	lsrs	r3, r3, #9
 8010554:	f241 3288 	movw	r2, #5000	; 0x1388
 8010558:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 801055c:	4623      	mov	r3, r4
 801055e:	1e5c      	subs	r4, r3, #1
 8010560:	2b00      	cmp	r3, #0
 8010562:	d102      	bne.n	801056a <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010564:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010568:	e01b      	b.n	80105a2 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801056e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010570:	68fb      	ldr	r3, [r7, #12]
 8010572:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010576:	2b00      	cmp	r3, #0
 8010578:	d0f0      	beq.n	801055c <SDMMC_GetCmdResp3+0x1c>
 801057a:	68fb      	ldr	r3, [r7, #12]
 801057c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010580:	2b00      	cmp	r3, #0
 8010582:	d1eb      	bne.n	801055c <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010588:	f003 0304 	and.w	r3, r3, #4
 801058c:	2b00      	cmp	r3, #0
 801058e:	d004      	beq.n	801059a <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	2204      	movs	r2, #4
 8010594:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010596:	2304      	movs	r3, #4
 8010598:	e003      	b.n	80105a2 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	22c5      	movs	r2, #197	; 0xc5
 801059e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80105a0:	2300      	movs	r3, #0
}
 80105a2:	4618      	mov	r0, r3
 80105a4:	3710      	adds	r7, #16
 80105a6:	46bd      	mov	sp, r7
 80105a8:	bc90      	pop	{r4, r7}
 80105aa:	4770      	bx	lr
 80105ac:	20000000 	.word	0x20000000
 80105b0:	10624dd3 	.word	0x10624dd3

080105b4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80105b4:	b590      	push	{r4, r7, lr}
 80105b6:	b087      	sub	sp, #28
 80105b8:	af00      	add	r7, sp, #0
 80105ba:	60f8      	str	r0, [r7, #12]
 80105bc:	460b      	mov	r3, r1
 80105be:	607a      	str	r2, [r7, #4]
 80105c0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80105c2:	4b34      	ldr	r3, [pc, #208]	; (8010694 <SDMMC_GetCmdResp6+0xe0>)
 80105c4:	681b      	ldr	r3, [r3, #0]
 80105c6:	4a34      	ldr	r2, [pc, #208]	; (8010698 <SDMMC_GetCmdResp6+0xe4>)
 80105c8:	fba2 2303 	umull	r2, r3, r2, r3
 80105cc:	0a5b      	lsrs	r3, r3, #9
 80105ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80105d2:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80105d6:	4623      	mov	r3, r4
 80105d8:	1e5c      	subs	r4, r3, #1
 80105da:	2b00      	cmp	r3, #0
 80105dc:	d102      	bne.n	80105e4 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 80105de:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80105e2:	e052      	b.n	801068a <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 80105e4:	68fb      	ldr	r3, [r7, #12]
 80105e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80105e8:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80105ea:	697b      	ldr	r3, [r7, #20]
 80105ec:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	d0f0      	beq.n	80105d6 <SDMMC_GetCmdResp6+0x22>
 80105f4:	697b      	ldr	r3, [r7, #20]
 80105f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	d1eb      	bne.n	80105d6 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80105fe:	68fb      	ldr	r3, [r7, #12]
 8010600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010602:	f003 0304 	and.w	r3, r3, #4
 8010606:	2b00      	cmp	r3, #0
 8010608:	d004      	beq.n	8010614 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 801060a:	68fb      	ldr	r3, [r7, #12]
 801060c:	2204      	movs	r2, #4
 801060e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010610:	2304      	movs	r3, #4
 8010612:	e03a      	b.n	801068a <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8010614:	68fb      	ldr	r3, [r7, #12]
 8010616:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010618:	f003 0301 	and.w	r3, r3, #1
 801061c:	2b00      	cmp	r3, #0
 801061e:	d004      	beq.n	801062a <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8010620:	68fb      	ldr	r3, [r7, #12]
 8010622:	2201      	movs	r2, #1
 8010624:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010626:	2301      	movs	r3, #1
 8010628:	e02f      	b.n	801068a <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 801062a:	68f8      	ldr	r0, [r7, #12]
 801062c:	f7ff fbae 	bl	800fd8c <SDIO_GetCommandResponse>
 8010630:	4603      	mov	r3, r0
 8010632:	461a      	mov	r2, r3
 8010634:	7afb      	ldrb	r3, [r7, #11]
 8010636:	4293      	cmp	r3, r2
 8010638:	d001      	beq.n	801063e <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801063a:	2301      	movs	r3, #1
 801063c:	e025      	b.n	801068a <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 801063e:	68fb      	ldr	r3, [r7, #12]
 8010640:	22c5      	movs	r2, #197	; 0xc5
 8010642:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8010644:	2100      	movs	r1, #0
 8010646:	68f8      	ldr	r0, [r7, #12]
 8010648:	f7ff fbad 	bl	800fda6 <SDIO_GetResponse>
 801064c:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 801064e:	693b      	ldr	r3, [r7, #16]
 8010650:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8010654:	2b00      	cmp	r3, #0
 8010656:	d106      	bne.n	8010666 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8010658:	693b      	ldr	r3, [r7, #16]
 801065a:	0c1b      	lsrs	r3, r3, #16
 801065c:	b29a      	uxth	r2, r3
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8010662:	2300      	movs	r3, #0
 8010664:	e011      	b.n	801068a <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8010666:	693b      	ldr	r3, [r7, #16]
 8010668:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801066c:	2b00      	cmp	r3, #0
 801066e:	d002      	beq.n	8010676 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010670:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010674:	e009      	b.n	801068a <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8010676:	693b      	ldr	r3, [r7, #16]
 8010678:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801067c:	2b00      	cmp	r3, #0
 801067e:	d002      	beq.n	8010686 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010680:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010684:	e001      	b.n	801068a <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010686:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 801068a:	4618      	mov	r0, r3
 801068c:	371c      	adds	r7, #28
 801068e:	46bd      	mov	sp, r7
 8010690:	bd90      	pop	{r4, r7, pc}
 8010692:	bf00      	nop
 8010694:	20000000 	.word	0x20000000
 8010698:	10624dd3 	.word	0x10624dd3

0801069c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 801069c:	b490      	push	{r4, r7}
 801069e:	b084      	sub	sp, #16
 80106a0:	af00      	add	r7, sp, #0
 80106a2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80106a4:	4b21      	ldr	r3, [pc, #132]	; (801072c <SDMMC_GetCmdResp7+0x90>)
 80106a6:	681b      	ldr	r3, [r3, #0]
 80106a8:	4a21      	ldr	r2, [pc, #132]	; (8010730 <SDMMC_GetCmdResp7+0x94>)
 80106aa:	fba2 2303 	umull	r2, r3, r2, r3
 80106ae:	0a5b      	lsrs	r3, r3, #9
 80106b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80106b4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80106b8:	4623      	mov	r3, r4
 80106ba:	1e5c      	subs	r4, r3, #1
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d102      	bne.n	80106c6 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80106c0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80106c4:	e02c      	b.n	8010720 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80106ca:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80106cc:	68fb      	ldr	r3, [r7, #12]
 80106ce:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	d0f0      	beq.n	80106b8 <SDMMC_GetCmdResp7+0x1c>
 80106d6:	68fb      	ldr	r3, [r7, #12]
 80106d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80106dc:	2b00      	cmp	r3, #0
 80106de:	d1eb      	bne.n	80106b8 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80106e4:	f003 0304 	and.w	r3, r3, #4
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d004      	beq.n	80106f6 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	2204      	movs	r2, #4
 80106f0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80106f2:	2304      	movs	r3, #4
 80106f4:	e014      	b.n	8010720 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80106fa:	f003 0301 	and.w	r3, r3, #1
 80106fe:	2b00      	cmp	r3, #0
 8010700:	d004      	beq.n	801070c <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	2201      	movs	r2, #1
 8010706:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010708:	2301      	movs	r3, #1
 801070a:	e009      	b.n	8010720 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010710:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010714:	2b00      	cmp	r3, #0
 8010716:	d002      	beq.n	801071e <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	2240      	movs	r2, #64	; 0x40
 801071c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 801071e:	2300      	movs	r3, #0
  
}
 8010720:	4618      	mov	r0, r3
 8010722:	3710      	adds	r7, #16
 8010724:	46bd      	mov	sp, r7
 8010726:	bc90      	pop	{r4, r7}
 8010728:	4770      	bx	lr
 801072a:	bf00      	nop
 801072c:	20000000 	.word	0x20000000
 8010730:	10624dd3 	.word	0x10624dd3

08010734 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8010734:	b580      	push	{r7, lr}
 8010736:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8010738:	4904      	ldr	r1, [pc, #16]	; (801074c <MX_FATFS_Init+0x18>)
 801073a:	4805      	ldr	r0, [pc, #20]	; (8010750 <MX_FATFS_Init+0x1c>)
 801073c:	f003 fb9c 	bl	8013e78 <FATFS_LinkDriver>
 8010740:	4603      	mov	r3, r0
 8010742:	461a      	mov	r2, r3
 8010744:	4b03      	ldr	r3, [pc, #12]	; (8010754 <MX_FATFS_Init+0x20>)
 8010746:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8010748:	bf00      	nop
 801074a:	bd80      	pop	{r7, pc}
 801074c:	20043c68 	.word	0x20043c68
 8010750:	080199dc 	.word	0x080199dc
 8010754:	20043c64 	.word	0x20043c64

08010758 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8010758:	b580      	push	{r7, lr}
 801075a:	b082      	sub	sp, #8
 801075c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 801075e:	2300      	movs	r3, #0
 8010760:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8010762:	f000 f896 	bl	8010892 <BSP_SD_IsDetected>
 8010766:	4603      	mov	r3, r0
 8010768:	2b01      	cmp	r3, #1
 801076a:	d001      	beq.n	8010770 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 801076c:	2301      	movs	r3, #1
 801076e:	e012      	b.n	8010796 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8010770:	480b      	ldr	r0, [pc, #44]	; (80107a0 <BSP_SD_Init+0x48>)
 8010772:	f7fb ffa5 	bl	800c6c0 <HAL_SD_Init>
 8010776:	4603      	mov	r3, r0
 8010778:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 801077a:	79fb      	ldrb	r3, [r7, #7]
 801077c:	2b00      	cmp	r3, #0
 801077e:	d109      	bne.n	8010794 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8010780:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8010784:	4806      	ldr	r0, [pc, #24]	; (80107a0 <BSP_SD_Init+0x48>)
 8010786:	f7fc fd4f 	bl	800d228 <HAL_SD_ConfigWideBusOperation>
 801078a:	4603      	mov	r3, r0
 801078c:	2b00      	cmp	r3, #0
 801078e:	d001      	beq.n	8010794 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8010790:	2301      	movs	r3, #1
 8010792:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8010794:	79fb      	ldrb	r3, [r7, #7]
}
 8010796:	4618      	mov	r0, r3
 8010798:	3708      	adds	r7, #8
 801079a:	46bd      	mov	sp, r7
 801079c:	bd80      	pop	{r7, pc}
 801079e:	bf00      	nop
 80107a0:	20043a60 	.word	0x20043a60

080107a4 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80107a4:	b580      	push	{r7, lr}
 80107a6:	b086      	sub	sp, #24
 80107a8:	af00      	add	r7, sp, #0
 80107aa:	60f8      	str	r0, [r7, #12]
 80107ac:	60b9      	str	r1, [r7, #8]
 80107ae:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80107b0:	2300      	movs	r3, #0
 80107b2:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	68ba      	ldr	r2, [r7, #8]
 80107b8:	68f9      	ldr	r1, [r7, #12]
 80107ba:	4806      	ldr	r0, [pc, #24]	; (80107d4 <BSP_SD_ReadBlocks_DMA+0x30>)
 80107bc:	f7fc f810 	bl	800c7e0 <HAL_SD_ReadBlocks_DMA>
 80107c0:	4603      	mov	r3, r0
 80107c2:	2b00      	cmp	r3, #0
 80107c4:	d001      	beq.n	80107ca <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80107c6:	2301      	movs	r3, #1
 80107c8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80107ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80107cc:	4618      	mov	r0, r3
 80107ce:	3718      	adds	r7, #24
 80107d0:	46bd      	mov	sp, r7
 80107d2:	bd80      	pop	{r7, pc}
 80107d4:	20043a60 	.word	0x20043a60

080107d8 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80107d8:	b580      	push	{r7, lr}
 80107da:	b086      	sub	sp, #24
 80107dc:	af00      	add	r7, sp, #0
 80107de:	60f8      	str	r0, [r7, #12]
 80107e0:	60b9      	str	r1, [r7, #8]
 80107e2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80107e4:	2300      	movs	r3, #0
 80107e6:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	68ba      	ldr	r2, [r7, #8]
 80107ec:	68f9      	ldr	r1, [r7, #12]
 80107ee:	4806      	ldr	r0, [pc, #24]	; (8010808 <BSP_SD_WriteBlocks_DMA+0x30>)
 80107f0:	f7fc f8de 	bl	800c9b0 <HAL_SD_WriteBlocks_DMA>
 80107f4:	4603      	mov	r3, r0
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d001      	beq.n	80107fe <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80107fa:	2301      	movs	r3, #1
 80107fc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80107fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8010800:	4618      	mov	r0, r3
 8010802:	3718      	adds	r7, #24
 8010804:	46bd      	mov	sp, r7
 8010806:	bd80      	pop	{r7, pc}
 8010808:	20043a60 	.word	0x20043a60

0801080c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 801080c:	b580      	push	{r7, lr}
 801080e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8010810:	4805      	ldr	r0, [pc, #20]	; (8010828 <BSP_SD_GetCardState+0x1c>)
 8010812:	f7fc fd85 	bl	800d320 <HAL_SD_GetCardState>
 8010816:	4603      	mov	r3, r0
 8010818:	2b04      	cmp	r3, #4
 801081a:	bf14      	ite	ne
 801081c:	2301      	movne	r3, #1
 801081e:	2300      	moveq	r3, #0
 8010820:	b2db      	uxtb	r3, r3
}
 8010822:	4618      	mov	r0, r3
 8010824:	bd80      	pop	{r7, pc}
 8010826:	bf00      	nop
 8010828:	20043a60 	.word	0x20043a60

0801082c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 801082c:	b580      	push	{r7, lr}
 801082e:	b082      	sub	sp, #8
 8010830:	af00      	add	r7, sp, #0
 8010832:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8010834:	6879      	ldr	r1, [r7, #4]
 8010836:	4803      	ldr	r0, [pc, #12]	; (8010844 <BSP_SD_GetCardInfo+0x18>)
 8010838:	f7fc fcca 	bl	800d1d0 <HAL_SD_GetCardInfo>
}
 801083c:	bf00      	nop
 801083e:	3708      	adds	r7, #8
 8010840:	46bd      	mov	sp, r7
 8010842:	bd80      	pop	{r7, pc}
 8010844:	20043a60 	.word	0x20043a60

08010848 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8010848:	b580      	push	{r7, lr}
 801084a:	b082      	sub	sp, #8
 801084c:	af00      	add	r7, sp, #0
 801084e:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8010850:	f000 f818 	bl	8010884 <BSP_SD_AbortCallback>
}
 8010854:	bf00      	nop
 8010856:	3708      	adds	r7, #8
 8010858:	46bd      	mov	sp, r7
 801085a:	bd80      	pop	{r7, pc}

0801085c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 801085c:	b580      	push	{r7, lr}
 801085e:	b082      	sub	sp, #8
 8010860:	af00      	add	r7, sp, #0
 8010862:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8010864:	f000 f9a8 	bl	8010bb8 <BSP_SD_WriteCpltCallback>
}
 8010868:	bf00      	nop
 801086a:	3708      	adds	r7, #8
 801086c:	46bd      	mov	sp, r7
 801086e:	bd80      	pop	{r7, pc}

08010870 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8010870:	b580      	push	{r7, lr}
 8010872:	b082      	sub	sp, #8
 8010874:	af00      	add	r7, sp, #0
 8010876:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8010878:	f000 f9aa 	bl	8010bd0 <BSP_SD_ReadCpltCallback>
}
 801087c:	bf00      	nop
 801087e:	3708      	adds	r7, #8
 8010880:	46bd      	mov	sp, r7
 8010882:	bd80      	pop	{r7, pc}

08010884 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8010884:	b480      	push	{r7}
 8010886:	af00      	add	r7, sp, #0

}
 8010888:	bf00      	nop
 801088a:	46bd      	mov	sp, r7
 801088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010890:	4770      	bx	lr

08010892 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8010892:	b580      	push	{r7, lr}
 8010894:	b082      	sub	sp, #8
 8010896:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8010898:	2301      	movs	r3, #1
 801089a:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 801089c:	f000 f80c 	bl	80108b8 <BSP_PlatformIsDetected>
 80108a0:	4603      	mov	r3, r0
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	d101      	bne.n	80108aa <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80108a6:	2300      	movs	r3, #0
 80108a8:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80108aa:	79fb      	ldrb	r3, [r7, #7]
 80108ac:	b2db      	uxtb	r3, r3
}
 80108ae:	4618      	mov	r0, r3
 80108b0:	3708      	adds	r7, #8
 80108b2:	46bd      	mov	sp, r7
 80108b4:	bd80      	pop	{r7, pc}
	...

080108b8 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80108b8:	b580      	push	{r7, lr}
 80108ba:	b082      	sub	sp, #8
 80108bc:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80108be:	2301      	movs	r3, #1
 80108c0:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80108c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80108c6:	4806      	ldr	r0, [pc, #24]	; (80108e0 <BSP_PlatformIsDetected+0x28>)
 80108c8:	f7fa f87e 	bl	800a9c8 <HAL_GPIO_ReadPin>
 80108cc:	4603      	mov	r3, r0
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d001      	beq.n	80108d6 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 80108d2:	2300      	movs	r3, #0
 80108d4:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80108d6:	79fb      	ldrb	r3, [r7, #7]
}
 80108d8:	4618      	mov	r0, r3
 80108da:	3708      	adds	r7, #8
 80108dc:	46bd      	mov	sp, r7
 80108de:	bd80      	pop	{r7, pc}
 80108e0:	40020000 	.word	0x40020000

080108e4 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80108e4:	b580      	push	{r7, lr}
 80108e6:	b084      	sub	sp, #16
 80108e8:	af00      	add	r7, sp, #0
 80108ea:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 80108ec:	f7f8 fde2 	bl	80094b4 <HAL_GetTick>
 80108f0:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 80108f2:	e006      	b.n	8010902 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80108f4:	f7ff ff8a 	bl	801080c <BSP_SD_GetCardState>
 80108f8:	4603      	mov	r3, r0
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	d101      	bne.n	8010902 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80108fe:	2300      	movs	r3, #0
 8010900:	e009      	b.n	8010916 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8010902:	f7f8 fdd7 	bl	80094b4 <HAL_GetTick>
 8010906:	4602      	mov	r2, r0
 8010908:	68fb      	ldr	r3, [r7, #12]
 801090a:	1ad3      	subs	r3, r2, r3
 801090c:	687a      	ldr	r2, [r7, #4]
 801090e:	429a      	cmp	r2, r3
 8010910:	d8f0      	bhi.n	80108f4 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8010912:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010916:	4618      	mov	r0, r3
 8010918:	3710      	adds	r7, #16
 801091a:	46bd      	mov	sp, r7
 801091c:	bd80      	pop	{r7, pc}
	...

08010920 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8010920:	b580      	push	{r7, lr}
 8010922:	b082      	sub	sp, #8
 8010924:	af00      	add	r7, sp, #0
 8010926:	4603      	mov	r3, r0
 8010928:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 801092a:	4b0b      	ldr	r3, [pc, #44]	; (8010958 <SD_CheckStatus+0x38>)
 801092c:	2201      	movs	r2, #1
 801092e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8010930:	f7ff ff6c 	bl	801080c <BSP_SD_GetCardState>
 8010934:	4603      	mov	r3, r0
 8010936:	2b00      	cmp	r3, #0
 8010938:	d107      	bne.n	801094a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 801093a:	4b07      	ldr	r3, [pc, #28]	; (8010958 <SD_CheckStatus+0x38>)
 801093c:	781b      	ldrb	r3, [r3, #0]
 801093e:	b2db      	uxtb	r3, r3
 8010940:	f023 0301 	bic.w	r3, r3, #1
 8010944:	b2da      	uxtb	r2, r3
 8010946:	4b04      	ldr	r3, [pc, #16]	; (8010958 <SD_CheckStatus+0x38>)
 8010948:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 801094a:	4b03      	ldr	r3, [pc, #12]	; (8010958 <SD_CheckStatus+0x38>)
 801094c:	781b      	ldrb	r3, [r3, #0]
 801094e:	b2db      	uxtb	r3, r3
}
 8010950:	4618      	mov	r0, r3
 8010952:	3708      	adds	r7, #8
 8010954:	46bd      	mov	sp, r7
 8010956:	bd80      	pop	{r7, pc}
 8010958:	20000009 	.word	0x20000009

0801095c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 801095c:	b580      	push	{r7, lr}
 801095e:	b082      	sub	sp, #8
 8010960:	af00      	add	r7, sp, #0
 8010962:	4603      	mov	r3, r0
 8010964:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8010966:	f7ff fef7 	bl	8010758 <BSP_SD_Init>
 801096a:	4603      	mov	r3, r0
 801096c:	2b00      	cmp	r3, #0
 801096e:	d107      	bne.n	8010980 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8010970:	79fb      	ldrb	r3, [r7, #7]
 8010972:	4618      	mov	r0, r3
 8010974:	f7ff ffd4 	bl	8010920 <SD_CheckStatus>
 8010978:	4603      	mov	r3, r0
 801097a:	461a      	mov	r2, r3
 801097c:	4b04      	ldr	r3, [pc, #16]	; (8010990 <SD_initialize+0x34>)
 801097e:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8010980:	4b03      	ldr	r3, [pc, #12]	; (8010990 <SD_initialize+0x34>)
 8010982:	781b      	ldrb	r3, [r3, #0]
 8010984:	b2db      	uxtb	r3, r3
}
 8010986:	4618      	mov	r0, r3
 8010988:	3708      	adds	r7, #8
 801098a:	46bd      	mov	sp, r7
 801098c:	bd80      	pop	{r7, pc}
 801098e:	bf00      	nop
 8010990:	20000009 	.word	0x20000009

08010994 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8010994:	b580      	push	{r7, lr}
 8010996:	b082      	sub	sp, #8
 8010998:	af00      	add	r7, sp, #0
 801099a:	4603      	mov	r3, r0
 801099c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 801099e:	79fb      	ldrb	r3, [r7, #7]
 80109a0:	4618      	mov	r0, r3
 80109a2:	f7ff ffbd 	bl	8010920 <SD_CheckStatus>
 80109a6:	4603      	mov	r3, r0
}
 80109a8:	4618      	mov	r0, r3
 80109aa:	3708      	adds	r7, #8
 80109ac:	46bd      	mov	sp, r7
 80109ae:	bd80      	pop	{r7, pc}

080109b0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80109b0:	b580      	push	{r7, lr}
 80109b2:	b086      	sub	sp, #24
 80109b4:	af00      	add	r7, sp, #0
 80109b6:	60b9      	str	r1, [r7, #8]
 80109b8:	607a      	str	r2, [r7, #4]
 80109ba:	603b      	str	r3, [r7, #0]
 80109bc:	4603      	mov	r3, r0
 80109be:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80109c0:	2301      	movs	r3, #1
 80109c2:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80109c4:	f247 5030 	movw	r0, #30000	; 0x7530
 80109c8:	f7ff ff8c 	bl	80108e4 <SD_CheckStatusWithTimeout>
 80109cc:	4603      	mov	r3, r0
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	da01      	bge.n	80109d6 <SD_read+0x26>
  {
    return res;
 80109d2:	7dfb      	ldrb	r3, [r7, #23]
 80109d4:	e03b      	b.n	8010a4e <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 80109d6:	683a      	ldr	r2, [r7, #0]
 80109d8:	6879      	ldr	r1, [r7, #4]
 80109da:	68b8      	ldr	r0, [r7, #8]
 80109dc:	f7ff fee2 	bl	80107a4 <BSP_SD_ReadBlocks_DMA>
 80109e0:	4603      	mov	r3, r0
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	d132      	bne.n	8010a4c <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 80109e6:	4b1c      	ldr	r3, [pc, #112]	; (8010a58 <SD_read+0xa8>)
 80109e8:	2200      	movs	r2, #0
 80109ea:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 80109ec:	f7f8 fd62 	bl	80094b4 <HAL_GetTick>
 80109f0:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80109f2:	bf00      	nop
 80109f4:	4b18      	ldr	r3, [pc, #96]	; (8010a58 <SD_read+0xa8>)
 80109f6:	681b      	ldr	r3, [r3, #0]
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	d108      	bne.n	8010a0e <SD_read+0x5e>
 80109fc:	f7f8 fd5a 	bl	80094b4 <HAL_GetTick>
 8010a00:	4602      	mov	r2, r0
 8010a02:	693b      	ldr	r3, [r7, #16]
 8010a04:	1ad3      	subs	r3, r2, r3
 8010a06:	f247 522f 	movw	r2, #29999	; 0x752f
 8010a0a:	4293      	cmp	r3, r2
 8010a0c:	d9f2      	bls.n	80109f4 <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 8010a0e:	4b12      	ldr	r3, [pc, #72]	; (8010a58 <SD_read+0xa8>)
 8010a10:	681b      	ldr	r3, [r3, #0]
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	d102      	bne.n	8010a1c <SD_read+0x6c>
      {
        res = RES_ERROR;
 8010a16:	2301      	movs	r3, #1
 8010a18:	75fb      	strb	r3, [r7, #23]
 8010a1a:	e017      	b.n	8010a4c <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8010a1c:	4b0e      	ldr	r3, [pc, #56]	; (8010a58 <SD_read+0xa8>)
 8010a1e:	2200      	movs	r2, #0
 8010a20:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8010a22:	f7f8 fd47 	bl	80094b4 <HAL_GetTick>
 8010a26:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010a28:	e007      	b.n	8010a3a <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010a2a:	f7ff feef 	bl	801080c <BSP_SD_GetCardState>
 8010a2e:	4603      	mov	r3, r0
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	d102      	bne.n	8010a3a <SD_read+0x8a>
          {
            res = RES_OK;
 8010a34:	2300      	movs	r3, #0
 8010a36:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8010a38:	e008      	b.n	8010a4c <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010a3a:	f7f8 fd3b 	bl	80094b4 <HAL_GetTick>
 8010a3e:	4602      	mov	r2, r0
 8010a40:	693b      	ldr	r3, [r7, #16]
 8010a42:	1ad3      	subs	r3, r2, r3
 8010a44:	f247 522f 	movw	r2, #29999	; 0x752f
 8010a48:	4293      	cmp	r3, r2
 8010a4a:	d9ee      	bls.n	8010a2a <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8010a4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8010a4e:	4618      	mov	r0, r3
 8010a50:	3718      	adds	r7, #24
 8010a52:	46bd      	mov	sp, r7
 8010a54:	bd80      	pop	{r7, pc}
 8010a56:	bf00      	nop
 8010a58:	200412fc 	.word	0x200412fc

08010a5c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8010a5c:	b580      	push	{r7, lr}
 8010a5e:	b086      	sub	sp, #24
 8010a60:	af00      	add	r7, sp, #0
 8010a62:	60b9      	str	r1, [r7, #8]
 8010a64:	607a      	str	r2, [r7, #4]
 8010a66:	603b      	str	r3, [r7, #0]
 8010a68:	4603      	mov	r3, r0
 8010a6a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010a6c:	2301      	movs	r3, #1
 8010a6e:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8010a70:	4b24      	ldr	r3, [pc, #144]	; (8010b04 <SD_write+0xa8>)
 8010a72:	2200      	movs	r2, #0
 8010a74:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8010a76:	f247 5030 	movw	r0, #30000	; 0x7530
 8010a7a:	f7ff ff33 	bl	80108e4 <SD_CheckStatusWithTimeout>
 8010a7e:	4603      	mov	r3, r0
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	da01      	bge.n	8010a88 <SD_write+0x2c>
  {
    return res;
 8010a84:	7dfb      	ldrb	r3, [r7, #23]
 8010a86:	e038      	b.n	8010afa <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8010a88:	683a      	ldr	r2, [r7, #0]
 8010a8a:	6879      	ldr	r1, [r7, #4]
 8010a8c:	68b8      	ldr	r0, [r7, #8]
 8010a8e:	f7ff fea3 	bl	80107d8 <BSP_SD_WriteBlocks_DMA>
 8010a92:	4603      	mov	r3, r0
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	d12f      	bne.n	8010af8 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8010a98:	f7f8 fd0c 	bl	80094b4 <HAL_GetTick>
 8010a9c:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8010a9e:	bf00      	nop
 8010aa0:	4b18      	ldr	r3, [pc, #96]	; (8010b04 <SD_write+0xa8>)
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	d108      	bne.n	8010aba <SD_write+0x5e>
 8010aa8:	f7f8 fd04 	bl	80094b4 <HAL_GetTick>
 8010aac:	4602      	mov	r2, r0
 8010aae:	693b      	ldr	r3, [r7, #16]
 8010ab0:	1ad3      	subs	r3, r2, r3
 8010ab2:	f247 522f 	movw	r2, #29999	; 0x752f
 8010ab6:	4293      	cmp	r3, r2
 8010ab8:	d9f2      	bls.n	8010aa0 <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 8010aba:	4b12      	ldr	r3, [pc, #72]	; (8010b04 <SD_write+0xa8>)
 8010abc:	681b      	ldr	r3, [r3, #0]
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	d102      	bne.n	8010ac8 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8010ac2:	2301      	movs	r3, #1
 8010ac4:	75fb      	strb	r3, [r7, #23]
 8010ac6:	e017      	b.n	8010af8 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8010ac8:	4b0e      	ldr	r3, [pc, #56]	; (8010b04 <SD_write+0xa8>)
 8010aca:	2200      	movs	r2, #0
 8010acc:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8010ace:	f7f8 fcf1 	bl	80094b4 <HAL_GetTick>
 8010ad2:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010ad4:	e007      	b.n	8010ae6 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010ad6:	f7ff fe99 	bl	801080c <BSP_SD_GetCardState>
 8010ada:	4603      	mov	r3, r0
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	d102      	bne.n	8010ae6 <SD_write+0x8a>
          {
            res = RES_OK;
 8010ae0:	2300      	movs	r3, #0
 8010ae2:	75fb      	strb	r3, [r7, #23]
            break;
 8010ae4:	e008      	b.n	8010af8 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010ae6:	f7f8 fce5 	bl	80094b4 <HAL_GetTick>
 8010aea:	4602      	mov	r2, r0
 8010aec:	693b      	ldr	r3, [r7, #16]
 8010aee:	1ad3      	subs	r3, r2, r3
 8010af0:	f247 522f 	movw	r2, #29999	; 0x752f
 8010af4:	4293      	cmp	r3, r2
 8010af6:	d9ee      	bls.n	8010ad6 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8010af8:	7dfb      	ldrb	r3, [r7, #23]
}
 8010afa:	4618      	mov	r0, r3
 8010afc:	3718      	adds	r7, #24
 8010afe:	46bd      	mov	sp, r7
 8010b00:	bd80      	pop	{r7, pc}
 8010b02:	bf00      	nop
 8010b04:	200412f8 	.word	0x200412f8

08010b08 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8010b08:	b580      	push	{r7, lr}
 8010b0a:	b08c      	sub	sp, #48	; 0x30
 8010b0c:	af00      	add	r7, sp, #0
 8010b0e:	4603      	mov	r3, r0
 8010b10:	603a      	str	r2, [r7, #0]
 8010b12:	71fb      	strb	r3, [r7, #7]
 8010b14:	460b      	mov	r3, r1
 8010b16:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8010b18:	2301      	movs	r3, #1
 8010b1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8010b1e:	4b25      	ldr	r3, [pc, #148]	; (8010bb4 <SD_ioctl+0xac>)
 8010b20:	781b      	ldrb	r3, [r3, #0]
 8010b22:	b2db      	uxtb	r3, r3
 8010b24:	f003 0301 	and.w	r3, r3, #1
 8010b28:	2b00      	cmp	r3, #0
 8010b2a:	d001      	beq.n	8010b30 <SD_ioctl+0x28>
 8010b2c:	2303      	movs	r3, #3
 8010b2e:	e03c      	b.n	8010baa <SD_ioctl+0xa2>

  switch (cmd)
 8010b30:	79bb      	ldrb	r3, [r7, #6]
 8010b32:	2b03      	cmp	r3, #3
 8010b34:	d834      	bhi.n	8010ba0 <SD_ioctl+0x98>
 8010b36:	a201      	add	r2, pc, #4	; (adr r2, 8010b3c <SD_ioctl+0x34>)
 8010b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b3c:	08010b4d 	.word	0x08010b4d
 8010b40:	08010b55 	.word	0x08010b55
 8010b44:	08010b6d 	.word	0x08010b6d
 8010b48:	08010b87 	.word	0x08010b87
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8010b4c:	2300      	movs	r3, #0
 8010b4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010b52:	e028      	b.n	8010ba6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8010b54:	f107 030c 	add.w	r3, r7, #12
 8010b58:	4618      	mov	r0, r3
 8010b5a:	f7ff fe67 	bl	801082c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8010b5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010b60:	683b      	ldr	r3, [r7, #0]
 8010b62:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010b64:	2300      	movs	r3, #0
 8010b66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010b6a:	e01c      	b.n	8010ba6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010b6c:	f107 030c 	add.w	r3, r7, #12
 8010b70:	4618      	mov	r0, r3
 8010b72:	f7ff fe5b 	bl	801082c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8010b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b78:	b29a      	uxth	r2, r3
 8010b7a:	683b      	ldr	r3, [r7, #0]
 8010b7c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8010b7e:	2300      	movs	r3, #0
 8010b80:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010b84:	e00f      	b.n	8010ba6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010b86:	f107 030c 	add.w	r3, r7, #12
 8010b8a:	4618      	mov	r0, r3
 8010b8c:	f7ff fe4e 	bl	801082c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8010b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b92:	0a5a      	lsrs	r2, r3, #9
 8010b94:	683b      	ldr	r3, [r7, #0]
 8010b96:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010b98:	2300      	movs	r3, #0
 8010b9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010b9e:	e002      	b.n	8010ba6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8010ba0:	2304      	movs	r3, #4
 8010ba2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8010ba6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8010baa:	4618      	mov	r0, r3
 8010bac:	3730      	adds	r7, #48	; 0x30
 8010bae:	46bd      	mov	sp, r7
 8010bb0:	bd80      	pop	{r7, pc}
 8010bb2:	bf00      	nop
 8010bb4:	20000009 	.word	0x20000009

08010bb8 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8010bb8:	b480      	push	{r7}
 8010bba:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8010bbc:	4b03      	ldr	r3, [pc, #12]	; (8010bcc <BSP_SD_WriteCpltCallback+0x14>)
 8010bbe:	2201      	movs	r2, #1
 8010bc0:	601a      	str	r2, [r3, #0]
}
 8010bc2:	bf00      	nop
 8010bc4:	46bd      	mov	sp, r7
 8010bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bca:	4770      	bx	lr
 8010bcc:	200412f8 	.word	0x200412f8

08010bd0 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8010bd0:	b480      	push	{r7}
 8010bd2:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8010bd4:	4b03      	ldr	r3, [pc, #12]	; (8010be4 <BSP_SD_ReadCpltCallback+0x14>)
 8010bd6:	2201      	movs	r2, #1
 8010bd8:	601a      	str	r2, [r3, #0]
}
 8010bda:	bf00      	nop
 8010bdc:	46bd      	mov	sp, r7
 8010bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010be2:	4770      	bx	lr
 8010be4:	200412fc 	.word	0x200412fc

08010be8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8010be8:	b580      	push	{r7, lr}
 8010bea:	b084      	sub	sp, #16
 8010bec:	af00      	add	r7, sp, #0
 8010bee:	4603      	mov	r3, r0
 8010bf0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8010bf2:	79fb      	ldrb	r3, [r7, #7]
 8010bf4:	4a08      	ldr	r2, [pc, #32]	; (8010c18 <disk_status+0x30>)
 8010bf6:	009b      	lsls	r3, r3, #2
 8010bf8:	4413      	add	r3, r2
 8010bfa:	685b      	ldr	r3, [r3, #4]
 8010bfc:	685b      	ldr	r3, [r3, #4]
 8010bfe:	79fa      	ldrb	r2, [r7, #7]
 8010c00:	4905      	ldr	r1, [pc, #20]	; (8010c18 <disk_status+0x30>)
 8010c02:	440a      	add	r2, r1
 8010c04:	7a12      	ldrb	r2, [r2, #8]
 8010c06:	4610      	mov	r0, r2
 8010c08:	4798      	blx	r3
 8010c0a:	4603      	mov	r3, r0
 8010c0c:	73fb      	strb	r3, [r7, #15]
  return stat;
 8010c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c10:	4618      	mov	r0, r3
 8010c12:	3710      	adds	r7, #16
 8010c14:	46bd      	mov	sp, r7
 8010c16:	bd80      	pop	{r7, pc}
 8010c18:	20041328 	.word	0x20041328

08010c1c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8010c1c:	b580      	push	{r7, lr}
 8010c1e:	b084      	sub	sp, #16
 8010c20:	af00      	add	r7, sp, #0
 8010c22:	4603      	mov	r3, r0
 8010c24:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8010c26:	2300      	movs	r3, #0
 8010c28:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8010c2a:	79fb      	ldrb	r3, [r7, #7]
 8010c2c:	4a0d      	ldr	r2, [pc, #52]	; (8010c64 <disk_initialize+0x48>)
 8010c2e:	5cd3      	ldrb	r3, [r2, r3]
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	d111      	bne.n	8010c58 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8010c34:	79fb      	ldrb	r3, [r7, #7]
 8010c36:	4a0b      	ldr	r2, [pc, #44]	; (8010c64 <disk_initialize+0x48>)
 8010c38:	2101      	movs	r1, #1
 8010c3a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8010c3c:	79fb      	ldrb	r3, [r7, #7]
 8010c3e:	4a09      	ldr	r2, [pc, #36]	; (8010c64 <disk_initialize+0x48>)
 8010c40:	009b      	lsls	r3, r3, #2
 8010c42:	4413      	add	r3, r2
 8010c44:	685b      	ldr	r3, [r3, #4]
 8010c46:	681b      	ldr	r3, [r3, #0]
 8010c48:	79fa      	ldrb	r2, [r7, #7]
 8010c4a:	4906      	ldr	r1, [pc, #24]	; (8010c64 <disk_initialize+0x48>)
 8010c4c:	440a      	add	r2, r1
 8010c4e:	7a12      	ldrb	r2, [r2, #8]
 8010c50:	4610      	mov	r0, r2
 8010c52:	4798      	blx	r3
 8010c54:	4603      	mov	r3, r0
 8010c56:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8010c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c5a:	4618      	mov	r0, r3
 8010c5c:	3710      	adds	r7, #16
 8010c5e:	46bd      	mov	sp, r7
 8010c60:	bd80      	pop	{r7, pc}
 8010c62:	bf00      	nop
 8010c64:	20041328 	.word	0x20041328

08010c68 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8010c68:	b590      	push	{r4, r7, lr}
 8010c6a:	b087      	sub	sp, #28
 8010c6c:	af00      	add	r7, sp, #0
 8010c6e:	60b9      	str	r1, [r7, #8]
 8010c70:	607a      	str	r2, [r7, #4]
 8010c72:	603b      	str	r3, [r7, #0]
 8010c74:	4603      	mov	r3, r0
 8010c76:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8010c78:	7bfb      	ldrb	r3, [r7, #15]
 8010c7a:	4a0a      	ldr	r2, [pc, #40]	; (8010ca4 <disk_read+0x3c>)
 8010c7c:	009b      	lsls	r3, r3, #2
 8010c7e:	4413      	add	r3, r2
 8010c80:	685b      	ldr	r3, [r3, #4]
 8010c82:	689c      	ldr	r4, [r3, #8]
 8010c84:	7bfb      	ldrb	r3, [r7, #15]
 8010c86:	4a07      	ldr	r2, [pc, #28]	; (8010ca4 <disk_read+0x3c>)
 8010c88:	4413      	add	r3, r2
 8010c8a:	7a18      	ldrb	r0, [r3, #8]
 8010c8c:	683b      	ldr	r3, [r7, #0]
 8010c8e:	687a      	ldr	r2, [r7, #4]
 8010c90:	68b9      	ldr	r1, [r7, #8]
 8010c92:	47a0      	blx	r4
 8010c94:	4603      	mov	r3, r0
 8010c96:	75fb      	strb	r3, [r7, #23]
  return res;
 8010c98:	7dfb      	ldrb	r3, [r7, #23]
}
 8010c9a:	4618      	mov	r0, r3
 8010c9c:	371c      	adds	r7, #28
 8010c9e:	46bd      	mov	sp, r7
 8010ca0:	bd90      	pop	{r4, r7, pc}
 8010ca2:	bf00      	nop
 8010ca4:	20041328 	.word	0x20041328

08010ca8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8010ca8:	b590      	push	{r4, r7, lr}
 8010caa:	b087      	sub	sp, #28
 8010cac:	af00      	add	r7, sp, #0
 8010cae:	60b9      	str	r1, [r7, #8]
 8010cb0:	607a      	str	r2, [r7, #4]
 8010cb2:	603b      	str	r3, [r7, #0]
 8010cb4:	4603      	mov	r3, r0
 8010cb6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8010cb8:	7bfb      	ldrb	r3, [r7, #15]
 8010cba:	4a0a      	ldr	r2, [pc, #40]	; (8010ce4 <disk_write+0x3c>)
 8010cbc:	009b      	lsls	r3, r3, #2
 8010cbe:	4413      	add	r3, r2
 8010cc0:	685b      	ldr	r3, [r3, #4]
 8010cc2:	68dc      	ldr	r4, [r3, #12]
 8010cc4:	7bfb      	ldrb	r3, [r7, #15]
 8010cc6:	4a07      	ldr	r2, [pc, #28]	; (8010ce4 <disk_write+0x3c>)
 8010cc8:	4413      	add	r3, r2
 8010cca:	7a18      	ldrb	r0, [r3, #8]
 8010ccc:	683b      	ldr	r3, [r7, #0]
 8010cce:	687a      	ldr	r2, [r7, #4]
 8010cd0:	68b9      	ldr	r1, [r7, #8]
 8010cd2:	47a0      	blx	r4
 8010cd4:	4603      	mov	r3, r0
 8010cd6:	75fb      	strb	r3, [r7, #23]
  return res;
 8010cd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8010cda:	4618      	mov	r0, r3
 8010cdc:	371c      	adds	r7, #28
 8010cde:	46bd      	mov	sp, r7
 8010ce0:	bd90      	pop	{r4, r7, pc}
 8010ce2:	bf00      	nop
 8010ce4:	20041328 	.word	0x20041328

08010ce8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8010ce8:	b580      	push	{r7, lr}
 8010cea:	b084      	sub	sp, #16
 8010cec:	af00      	add	r7, sp, #0
 8010cee:	4603      	mov	r3, r0
 8010cf0:	603a      	str	r2, [r7, #0]
 8010cf2:	71fb      	strb	r3, [r7, #7]
 8010cf4:	460b      	mov	r3, r1
 8010cf6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8010cf8:	79fb      	ldrb	r3, [r7, #7]
 8010cfa:	4a09      	ldr	r2, [pc, #36]	; (8010d20 <disk_ioctl+0x38>)
 8010cfc:	009b      	lsls	r3, r3, #2
 8010cfe:	4413      	add	r3, r2
 8010d00:	685b      	ldr	r3, [r3, #4]
 8010d02:	691b      	ldr	r3, [r3, #16]
 8010d04:	79fa      	ldrb	r2, [r7, #7]
 8010d06:	4906      	ldr	r1, [pc, #24]	; (8010d20 <disk_ioctl+0x38>)
 8010d08:	440a      	add	r2, r1
 8010d0a:	7a10      	ldrb	r0, [r2, #8]
 8010d0c:	79b9      	ldrb	r1, [r7, #6]
 8010d0e:	683a      	ldr	r2, [r7, #0]
 8010d10:	4798      	blx	r3
 8010d12:	4603      	mov	r3, r0
 8010d14:	73fb      	strb	r3, [r7, #15]
  return res;
 8010d16:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d18:	4618      	mov	r0, r3
 8010d1a:	3710      	adds	r7, #16
 8010d1c:	46bd      	mov	sp, r7
 8010d1e:	bd80      	pop	{r7, pc}
 8010d20:	20041328 	.word	0x20041328

08010d24 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8010d24:	b480      	push	{r7}
 8010d26:	b085      	sub	sp, #20
 8010d28:	af00      	add	r7, sp, #0
 8010d2a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	3301      	adds	r3, #1
 8010d30:	781b      	ldrb	r3, [r3, #0]
 8010d32:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8010d34:	89fb      	ldrh	r3, [r7, #14]
 8010d36:	021b      	lsls	r3, r3, #8
 8010d38:	b21a      	sxth	r2, r3
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	781b      	ldrb	r3, [r3, #0]
 8010d3e:	b21b      	sxth	r3, r3
 8010d40:	4313      	orrs	r3, r2
 8010d42:	b21b      	sxth	r3, r3
 8010d44:	81fb      	strh	r3, [r7, #14]
	return rv;
 8010d46:	89fb      	ldrh	r3, [r7, #14]
}
 8010d48:	4618      	mov	r0, r3
 8010d4a:	3714      	adds	r7, #20
 8010d4c:	46bd      	mov	sp, r7
 8010d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d52:	4770      	bx	lr

08010d54 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8010d54:	b480      	push	{r7}
 8010d56:	b085      	sub	sp, #20
 8010d58:	af00      	add	r7, sp, #0
 8010d5a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	3303      	adds	r3, #3
 8010d60:	781b      	ldrb	r3, [r3, #0]
 8010d62:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8010d64:	68fb      	ldr	r3, [r7, #12]
 8010d66:	021b      	lsls	r3, r3, #8
 8010d68:	687a      	ldr	r2, [r7, #4]
 8010d6a:	3202      	adds	r2, #2
 8010d6c:	7812      	ldrb	r2, [r2, #0]
 8010d6e:	4313      	orrs	r3, r2
 8010d70:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8010d72:	68fb      	ldr	r3, [r7, #12]
 8010d74:	021b      	lsls	r3, r3, #8
 8010d76:	687a      	ldr	r2, [r7, #4]
 8010d78:	3201      	adds	r2, #1
 8010d7a:	7812      	ldrb	r2, [r2, #0]
 8010d7c:	4313      	orrs	r3, r2
 8010d7e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8010d80:	68fb      	ldr	r3, [r7, #12]
 8010d82:	021b      	lsls	r3, r3, #8
 8010d84:	687a      	ldr	r2, [r7, #4]
 8010d86:	7812      	ldrb	r2, [r2, #0]
 8010d88:	4313      	orrs	r3, r2
 8010d8a:	60fb      	str	r3, [r7, #12]
	return rv;
 8010d8c:	68fb      	ldr	r3, [r7, #12]
}
 8010d8e:	4618      	mov	r0, r3
 8010d90:	3714      	adds	r7, #20
 8010d92:	46bd      	mov	sp, r7
 8010d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d98:	4770      	bx	lr

08010d9a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8010d9a:	b480      	push	{r7}
 8010d9c:	b083      	sub	sp, #12
 8010d9e:	af00      	add	r7, sp, #0
 8010da0:	6078      	str	r0, [r7, #4]
 8010da2:	460b      	mov	r3, r1
 8010da4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	1c5a      	adds	r2, r3, #1
 8010daa:	607a      	str	r2, [r7, #4]
 8010dac:	887a      	ldrh	r2, [r7, #2]
 8010dae:	b2d2      	uxtb	r2, r2
 8010db0:	701a      	strb	r2, [r3, #0]
 8010db2:	887b      	ldrh	r3, [r7, #2]
 8010db4:	0a1b      	lsrs	r3, r3, #8
 8010db6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	1c5a      	adds	r2, r3, #1
 8010dbc:	607a      	str	r2, [r7, #4]
 8010dbe:	887a      	ldrh	r2, [r7, #2]
 8010dc0:	b2d2      	uxtb	r2, r2
 8010dc2:	701a      	strb	r2, [r3, #0]
}
 8010dc4:	bf00      	nop
 8010dc6:	370c      	adds	r7, #12
 8010dc8:	46bd      	mov	sp, r7
 8010dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dce:	4770      	bx	lr

08010dd0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8010dd0:	b480      	push	{r7}
 8010dd2:	b083      	sub	sp, #12
 8010dd4:	af00      	add	r7, sp, #0
 8010dd6:	6078      	str	r0, [r7, #4]
 8010dd8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	1c5a      	adds	r2, r3, #1
 8010dde:	607a      	str	r2, [r7, #4]
 8010de0:	683a      	ldr	r2, [r7, #0]
 8010de2:	b2d2      	uxtb	r2, r2
 8010de4:	701a      	strb	r2, [r3, #0]
 8010de6:	683b      	ldr	r3, [r7, #0]
 8010de8:	0a1b      	lsrs	r3, r3, #8
 8010dea:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	1c5a      	adds	r2, r3, #1
 8010df0:	607a      	str	r2, [r7, #4]
 8010df2:	683a      	ldr	r2, [r7, #0]
 8010df4:	b2d2      	uxtb	r2, r2
 8010df6:	701a      	strb	r2, [r3, #0]
 8010df8:	683b      	ldr	r3, [r7, #0]
 8010dfa:	0a1b      	lsrs	r3, r3, #8
 8010dfc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	1c5a      	adds	r2, r3, #1
 8010e02:	607a      	str	r2, [r7, #4]
 8010e04:	683a      	ldr	r2, [r7, #0]
 8010e06:	b2d2      	uxtb	r2, r2
 8010e08:	701a      	strb	r2, [r3, #0]
 8010e0a:	683b      	ldr	r3, [r7, #0]
 8010e0c:	0a1b      	lsrs	r3, r3, #8
 8010e0e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	1c5a      	adds	r2, r3, #1
 8010e14:	607a      	str	r2, [r7, #4]
 8010e16:	683a      	ldr	r2, [r7, #0]
 8010e18:	b2d2      	uxtb	r2, r2
 8010e1a:	701a      	strb	r2, [r3, #0]
}
 8010e1c:	bf00      	nop
 8010e1e:	370c      	adds	r7, #12
 8010e20:	46bd      	mov	sp, r7
 8010e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e26:	4770      	bx	lr

08010e28 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8010e28:	b480      	push	{r7}
 8010e2a:	b087      	sub	sp, #28
 8010e2c:	af00      	add	r7, sp, #0
 8010e2e:	60f8      	str	r0, [r7, #12]
 8010e30:	60b9      	str	r1, [r7, #8]
 8010e32:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8010e34:	68fb      	ldr	r3, [r7, #12]
 8010e36:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8010e38:	68bb      	ldr	r3, [r7, #8]
 8010e3a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d00d      	beq.n	8010e5e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8010e42:	693a      	ldr	r2, [r7, #16]
 8010e44:	1c53      	adds	r3, r2, #1
 8010e46:	613b      	str	r3, [r7, #16]
 8010e48:	697b      	ldr	r3, [r7, #20]
 8010e4a:	1c59      	adds	r1, r3, #1
 8010e4c:	6179      	str	r1, [r7, #20]
 8010e4e:	7812      	ldrb	r2, [r2, #0]
 8010e50:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	3b01      	subs	r3, #1
 8010e56:	607b      	str	r3, [r7, #4]
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	d1f1      	bne.n	8010e42 <mem_cpy+0x1a>
	}
}
 8010e5e:	bf00      	nop
 8010e60:	371c      	adds	r7, #28
 8010e62:	46bd      	mov	sp, r7
 8010e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e68:	4770      	bx	lr

08010e6a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8010e6a:	b480      	push	{r7}
 8010e6c:	b087      	sub	sp, #28
 8010e6e:	af00      	add	r7, sp, #0
 8010e70:	60f8      	str	r0, [r7, #12]
 8010e72:	60b9      	str	r1, [r7, #8]
 8010e74:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8010e76:	68fb      	ldr	r3, [r7, #12]
 8010e78:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8010e7a:	697b      	ldr	r3, [r7, #20]
 8010e7c:	1c5a      	adds	r2, r3, #1
 8010e7e:	617a      	str	r2, [r7, #20]
 8010e80:	68ba      	ldr	r2, [r7, #8]
 8010e82:	b2d2      	uxtb	r2, r2
 8010e84:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	3b01      	subs	r3, #1
 8010e8a:	607b      	str	r3, [r7, #4]
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	d1f3      	bne.n	8010e7a <mem_set+0x10>
}
 8010e92:	bf00      	nop
 8010e94:	371c      	adds	r7, #28
 8010e96:	46bd      	mov	sp, r7
 8010e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e9c:	4770      	bx	lr

08010e9e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8010e9e:	b480      	push	{r7}
 8010ea0:	b089      	sub	sp, #36	; 0x24
 8010ea2:	af00      	add	r7, sp, #0
 8010ea4:	60f8      	str	r0, [r7, #12]
 8010ea6:	60b9      	str	r1, [r7, #8]
 8010ea8:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8010eaa:	68fb      	ldr	r3, [r7, #12]
 8010eac:	61fb      	str	r3, [r7, #28]
 8010eae:	68bb      	ldr	r3, [r7, #8]
 8010eb0:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8010eb2:	2300      	movs	r3, #0
 8010eb4:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8010eb6:	69fb      	ldr	r3, [r7, #28]
 8010eb8:	1c5a      	adds	r2, r3, #1
 8010eba:	61fa      	str	r2, [r7, #28]
 8010ebc:	781b      	ldrb	r3, [r3, #0]
 8010ebe:	4619      	mov	r1, r3
 8010ec0:	69bb      	ldr	r3, [r7, #24]
 8010ec2:	1c5a      	adds	r2, r3, #1
 8010ec4:	61ba      	str	r2, [r7, #24]
 8010ec6:	781b      	ldrb	r3, [r3, #0]
 8010ec8:	1acb      	subs	r3, r1, r3
 8010eca:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	3b01      	subs	r3, #1
 8010ed0:	607b      	str	r3, [r7, #4]
 8010ed2:	687b      	ldr	r3, [r7, #4]
 8010ed4:	2b00      	cmp	r3, #0
 8010ed6:	d002      	beq.n	8010ede <mem_cmp+0x40>
 8010ed8:	697b      	ldr	r3, [r7, #20]
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	d0eb      	beq.n	8010eb6 <mem_cmp+0x18>

	return r;
 8010ede:	697b      	ldr	r3, [r7, #20]
}
 8010ee0:	4618      	mov	r0, r3
 8010ee2:	3724      	adds	r7, #36	; 0x24
 8010ee4:	46bd      	mov	sp, r7
 8010ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eea:	4770      	bx	lr

08010eec <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8010eec:	b480      	push	{r7}
 8010eee:	b083      	sub	sp, #12
 8010ef0:	af00      	add	r7, sp, #0
 8010ef2:	6078      	str	r0, [r7, #4]
 8010ef4:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8010ef6:	e002      	b.n	8010efe <chk_chr+0x12>
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	3301      	adds	r3, #1
 8010efc:	607b      	str	r3, [r7, #4]
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	781b      	ldrb	r3, [r3, #0]
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	d005      	beq.n	8010f12 <chk_chr+0x26>
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	781b      	ldrb	r3, [r3, #0]
 8010f0a:	461a      	mov	r2, r3
 8010f0c:	683b      	ldr	r3, [r7, #0]
 8010f0e:	4293      	cmp	r3, r2
 8010f10:	d1f2      	bne.n	8010ef8 <chk_chr+0xc>
	return *str;
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	781b      	ldrb	r3, [r3, #0]
}
 8010f16:	4618      	mov	r0, r3
 8010f18:	370c      	adds	r7, #12
 8010f1a:	46bd      	mov	sp, r7
 8010f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f20:	4770      	bx	lr
	...

08010f24 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8010f24:	b480      	push	{r7}
 8010f26:	b085      	sub	sp, #20
 8010f28:	af00      	add	r7, sp, #0
 8010f2a:	6078      	str	r0, [r7, #4]
 8010f2c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8010f2e:	2300      	movs	r3, #0
 8010f30:	60bb      	str	r3, [r7, #8]
 8010f32:	68bb      	ldr	r3, [r7, #8]
 8010f34:	60fb      	str	r3, [r7, #12]
 8010f36:	e029      	b.n	8010f8c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8010f38:	4a27      	ldr	r2, [pc, #156]	; (8010fd8 <chk_lock+0xb4>)
 8010f3a:	68fb      	ldr	r3, [r7, #12]
 8010f3c:	011b      	lsls	r3, r3, #4
 8010f3e:	4413      	add	r3, r2
 8010f40:	681b      	ldr	r3, [r3, #0]
 8010f42:	2b00      	cmp	r3, #0
 8010f44:	d01d      	beq.n	8010f82 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8010f46:	4a24      	ldr	r2, [pc, #144]	; (8010fd8 <chk_lock+0xb4>)
 8010f48:	68fb      	ldr	r3, [r7, #12]
 8010f4a:	011b      	lsls	r3, r3, #4
 8010f4c:	4413      	add	r3, r2
 8010f4e:	681a      	ldr	r2, [r3, #0]
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	681b      	ldr	r3, [r3, #0]
 8010f54:	429a      	cmp	r2, r3
 8010f56:	d116      	bne.n	8010f86 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8010f58:	4a1f      	ldr	r2, [pc, #124]	; (8010fd8 <chk_lock+0xb4>)
 8010f5a:	68fb      	ldr	r3, [r7, #12]
 8010f5c:	011b      	lsls	r3, r3, #4
 8010f5e:	4413      	add	r3, r2
 8010f60:	3304      	adds	r3, #4
 8010f62:	681a      	ldr	r2, [r3, #0]
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8010f68:	429a      	cmp	r2, r3
 8010f6a:	d10c      	bne.n	8010f86 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8010f6c:	4a1a      	ldr	r2, [pc, #104]	; (8010fd8 <chk_lock+0xb4>)
 8010f6e:	68fb      	ldr	r3, [r7, #12]
 8010f70:	011b      	lsls	r3, r3, #4
 8010f72:	4413      	add	r3, r2
 8010f74:	3308      	adds	r3, #8
 8010f76:	681a      	ldr	r2, [r3, #0]
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8010f7c:	429a      	cmp	r2, r3
 8010f7e:	d102      	bne.n	8010f86 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8010f80:	e007      	b.n	8010f92 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8010f82:	2301      	movs	r3, #1
 8010f84:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8010f86:	68fb      	ldr	r3, [r7, #12]
 8010f88:	3301      	adds	r3, #1
 8010f8a:	60fb      	str	r3, [r7, #12]
 8010f8c:	68fb      	ldr	r3, [r7, #12]
 8010f8e:	2b01      	cmp	r3, #1
 8010f90:	d9d2      	bls.n	8010f38 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8010f92:	68fb      	ldr	r3, [r7, #12]
 8010f94:	2b02      	cmp	r3, #2
 8010f96:	d109      	bne.n	8010fac <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8010f98:	68bb      	ldr	r3, [r7, #8]
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	d102      	bne.n	8010fa4 <chk_lock+0x80>
 8010f9e:	683b      	ldr	r3, [r7, #0]
 8010fa0:	2b02      	cmp	r3, #2
 8010fa2:	d101      	bne.n	8010fa8 <chk_lock+0x84>
 8010fa4:	2300      	movs	r3, #0
 8010fa6:	e010      	b.n	8010fca <chk_lock+0xa6>
 8010fa8:	2312      	movs	r3, #18
 8010faa:	e00e      	b.n	8010fca <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8010fac:	683b      	ldr	r3, [r7, #0]
 8010fae:	2b00      	cmp	r3, #0
 8010fb0:	d108      	bne.n	8010fc4 <chk_lock+0xa0>
 8010fb2:	4a09      	ldr	r2, [pc, #36]	; (8010fd8 <chk_lock+0xb4>)
 8010fb4:	68fb      	ldr	r3, [r7, #12]
 8010fb6:	011b      	lsls	r3, r3, #4
 8010fb8:	4413      	add	r3, r2
 8010fba:	330c      	adds	r3, #12
 8010fbc:	881b      	ldrh	r3, [r3, #0]
 8010fbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010fc2:	d101      	bne.n	8010fc8 <chk_lock+0xa4>
 8010fc4:	2310      	movs	r3, #16
 8010fc6:	e000      	b.n	8010fca <chk_lock+0xa6>
 8010fc8:	2300      	movs	r3, #0
}
 8010fca:	4618      	mov	r0, r3
 8010fcc:	3714      	adds	r7, #20
 8010fce:	46bd      	mov	sp, r7
 8010fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fd4:	4770      	bx	lr
 8010fd6:	bf00      	nop
 8010fd8:	20041308 	.word	0x20041308

08010fdc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8010fdc:	b480      	push	{r7}
 8010fde:	b083      	sub	sp, #12
 8010fe0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8010fe2:	2300      	movs	r3, #0
 8010fe4:	607b      	str	r3, [r7, #4]
 8010fe6:	e002      	b.n	8010fee <enq_lock+0x12>
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	3301      	adds	r3, #1
 8010fec:	607b      	str	r3, [r7, #4]
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	2b01      	cmp	r3, #1
 8010ff2:	d806      	bhi.n	8011002 <enq_lock+0x26>
 8010ff4:	4a09      	ldr	r2, [pc, #36]	; (801101c <enq_lock+0x40>)
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	011b      	lsls	r3, r3, #4
 8010ffa:	4413      	add	r3, r2
 8010ffc:	681b      	ldr	r3, [r3, #0]
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	d1f2      	bne.n	8010fe8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	2b02      	cmp	r3, #2
 8011006:	bf14      	ite	ne
 8011008:	2301      	movne	r3, #1
 801100a:	2300      	moveq	r3, #0
 801100c:	b2db      	uxtb	r3, r3
}
 801100e:	4618      	mov	r0, r3
 8011010:	370c      	adds	r7, #12
 8011012:	46bd      	mov	sp, r7
 8011014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011018:	4770      	bx	lr
 801101a:	bf00      	nop
 801101c:	20041308 	.word	0x20041308

08011020 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011020:	b480      	push	{r7}
 8011022:	b085      	sub	sp, #20
 8011024:	af00      	add	r7, sp, #0
 8011026:	6078      	str	r0, [r7, #4]
 8011028:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801102a:	2300      	movs	r3, #0
 801102c:	60fb      	str	r3, [r7, #12]
 801102e:	e01f      	b.n	8011070 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8011030:	4a41      	ldr	r2, [pc, #260]	; (8011138 <inc_lock+0x118>)
 8011032:	68fb      	ldr	r3, [r7, #12]
 8011034:	011b      	lsls	r3, r3, #4
 8011036:	4413      	add	r3, r2
 8011038:	681a      	ldr	r2, [r3, #0]
 801103a:	687b      	ldr	r3, [r7, #4]
 801103c:	681b      	ldr	r3, [r3, #0]
 801103e:	429a      	cmp	r2, r3
 8011040:	d113      	bne.n	801106a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8011042:	4a3d      	ldr	r2, [pc, #244]	; (8011138 <inc_lock+0x118>)
 8011044:	68fb      	ldr	r3, [r7, #12]
 8011046:	011b      	lsls	r3, r3, #4
 8011048:	4413      	add	r3, r2
 801104a:	3304      	adds	r3, #4
 801104c:	681a      	ldr	r2, [r3, #0]
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8011052:	429a      	cmp	r2, r3
 8011054:	d109      	bne.n	801106a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8011056:	4a38      	ldr	r2, [pc, #224]	; (8011138 <inc_lock+0x118>)
 8011058:	68fb      	ldr	r3, [r7, #12]
 801105a:	011b      	lsls	r3, r3, #4
 801105c:	4413      	add	r3, r2
 801105e:	3308      	adds	r3, #8
 8011060:	681a      	ldr	r2, [r3, #0]
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8011066:	429a      	cmp	r2, r3
 8011068:	d006      	beq.n	8011078 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801106a:	68fb      	ldr	r3, [r7, #12]
 801106c:	3301      	adds	r3, #1
 801106e:	60fb      	str	r3, [r7, #12]
 8011070:	68fb      	ldr	r3, [r7, #12]
 8011072:	2b01      	cmp	r3, #1
 8011074:	d9dc      	bls.n	8011030 <inc_lock+0x10>
 8011076:	e000      	b.n	801107a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8011078:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801107a:	68fb      	ldr	r3, [r7, #12]
 801107c:	2b02      	cmp	r3, #2
 801107e:	d132      	bne.n	80110e6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8011080:	2300      	movs	r3, #0
 8011082:	60fb      	str	r3, [r7, #12]
 8011084:	e002      	b.n	801108c <inc_lock+0x6c>
 8011086:	68fb      	ldr	r3, [r7, #12]
 8011088:	3301      	adds	r3, #1
 801108a:	60fb      	str	r3, [r7, #12]
 801108c:	68fb      	ldr	r3, [r7, #12]
 801108e:	2b01      	cmp	r3, #1
 8011090:	d806      	bhi.n	80110a0 <inc_lock+0x80>
 8011092:	4a29      	ldr	r2, [pc, #164]	; (8011138 <inc_lock+0x118>)
 8011094:	68fb      	ldr	r3, [r7, #12]
 8011096:	011b      	lsls	r3, r3, #4
 8011098:	4413      	add	r3, r2
 801109a:	681b      	ldr	r3, [r3, #0]
 801109c:	2b00      	cmp	r3, #0
 801109e:	d1f2      	bne.n	8011086 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80110a0:	68fb      	ldr	r3, [r7, #12]
 80110a2:	2b02      	cmp	r3, #2
 80110a4:	d101      	bne.n	80110aa <inc_lock+0x8a>
 80110a6:	2300      	movs	r3, #0
 80110a8:	e040      	b.n	801112c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	681a      	ldr	r2, [r3, #0]
 80110ae:	4922      	ldr	r1, [pc, #136]	; (8011138 <inc_lock+0x118>)
 80110b0:	68fb      	ldr	r3, [r7, #12]
 80110b2:	011b      	lsls	r3, r3, #4
 80110b4:	440b      	add	r3, r1
 80110b6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	689a      	ldr	r2, [r3, #8]
 80110bc:	491e      	ldr	r1, [pc, #120]	; (8011138 <inc_lock+0x118>)
 80110be:	68fb      	ldr	r3, [r7, #12]
 80110c0:	011b      	lsls	r3, r3, #4
 80110c2:	440b      	add	r3, r1
 80110c4:	3304      	adds	r3, #4
 80110c6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	695a      	ldr	r2, [r3, #20]
 80110cc:	491a      	ldr	r1, [pc, #104]	; (8011138 <inc_lock+0x118>)
 80110ce:	68fb      	ldr	r3, [r7, #12]
 80110d0:	011b      	lsls	r3, r3, #4
 80110d2:	440b      	add	r3, r1
 80110d4:	3308      	adds	r3, #8
 80110d6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80110d8:	4a17      	ldr	r2, [pc, #92]	; (8011138 <inc_lock+0x118>)
 80110da:	68fb      	ldr	r3, [r7, #12]
 80110dc:	011b      	lsls	r3, r3, #4
 80110de:	4413      	add	r3, r2
 80110e0:	330c      	adds	r3, #12
 80110e2:	2200      	movs	r2, #0
 80110e4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80110e6:	683b      	ldr	r3, [r7, #0]
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	d009      	beq.n	8011100 <inc_lock+0xe0>
 80110ec:	4a12      	ldr	r2, [pc, #72]	; (8011138 <inc_lock+0x118>)
 80110ee:	68fb      	ldr	r3, [r7, #12]
 80110f0:	011b      	lsls	r3, r3, #4
 80110f2:	4413      	add	r3, r2
 80110f4:	330c      	adds	r3, #12
 80110f6:	881b      	ldrh	r3, [r3, #0]
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	d001      	beq.n	8011100 <inc_lock+0xe0>
 80110fc:	2300      	movs	r3, #0
 80110fe:	e015      	b.n	801112c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8011100:	683b      	ldr	r3, [r7, #0]
 8011102:	2b00      	cmp	r3, #0
 8011104:	d108      	bne.n	8011118 <inc_lock+0xf8>
 8011106:	4a0c      	ldr	r2, [pc, #48]	; (8011138 <inc_lock+0x118>)
 8011108:	68fb      	ldr	r3, [r7, #12]
 801110a:	011b      	lsls	r3, r3, #4
 801110c:	4413      	add	r3, r2
 801110e:	330c      	adds	r3, #12
 8011110:	881b      	ldrh	r3, [r3, #0]
 8011112:	3301      	adds	r3, #1
 8011114:	b29a      	uxth	r2, r3
 8011116:	e001      	b.n	801111c <inc_lock+0xfc>
 8011118:	f44f 7280 	mov.w	r2, #256	; 0x100
 801111c:	4906      	ldr	r1, [pc, #24]	; (8011138 <inc_lock+0x118>)
 801111e:	68fb      	ldr	r3, [r7, #12]
 8011120:	011b      	lsls	r3, r3, #4
 8011122:	440b      	add	r3, r1
 8011124:	330c      	adds	r3, #12
 8011126:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8011128:	68fb      	ldr	r3, [r7, #12]
 801112a:	3301      	adds	r3, #1
}
 801112c:	4618      	mov	r0, r3
 801112e:	3714      	adds	r7, #20
 8011130:	46bd      	mov	sp, r7
 8011132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011136:	4770      	bx	lr
 8011138:	20041308 	.word	0x20041308

0801113c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 801113c:	b480      	push	{r7}
 801113e:	b085      	sub	sp, #20
 8011140:	af00      	add	r7, sp, #0
 8011142:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	3b01      	subs	r3, #1
 8011148:	607b      	str	r3, [r7, #4]
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	2b01      	cmp	r3, #1
 801114e:	d825      	bhi.n	801119c <dec_lock+0x60>
		n = Files[i].ctr;
 8011150:	4a17      	ldr	r2, [pc, #92]	; (80111b0 <dec_lock+0x74>)
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	011b      	lsls	r3, r3, #4
 8011156:	4413      	add	r3, r2
 8011158:	330c      	adds	r3, #12
 801115a:	881b      	ldrh	r3, [r3, #0]
 801115c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 801115e:	89fb      	ldrh	r3, [r7, #14]
 8011160:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011164:	d101      	bne.n	801116a <dec_lock+0x2e>
 8011166:	2300      	movs	r3, #0
 8011168:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 801116a:	89fb      	ldrh	r3, [r7, #14]
 801116c:	2b00      	cmp	r3, #0
 801116e:	d002      	beq.n	8011176 <dec_lock+0x3a>
 8011170:	89fb      	ldrh	r3, [r7, #14]
 8011172:	3b01      	subs	r3, #1
 8011174:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8011176:	4a0e      	ldr	r2, [pc, #56]	; (80111b0 <dec_lock+0x74>)
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	011b      	lsls	r3, r3, #4
 801117c:	4413      	add	r3, r2
 801117e:	330c      	adds	r3, #12
 8011180:	89fa      	ldrh	r2, [r7, #14]
 8011182:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8011184:	89fb      	ldrh	r3, [r7, #14]
 8011186:	2b00      	cmp	r3, #0
 8011188:	d105      	bne.n	8011196 <dec_lock+0x5a>
 801118a:	4a09      	ldr	r2, [pc, #36]	; (80111b0 <dec_lock+0x74>)
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	011b      	lsls	r3, r3, #4
 8011190:	4413      	add	r3, r2
 8011192:	2200      	movs	r2, #0
 8011194:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8011196:	2300      	movs	r3, #0
 8011198:	737b      	strb	r3, [r7, #13]
 801119a:	e001      	b.n	80111a0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 801119c:	2302      	movs	r3, #2
 801119e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80111a0:	7b7b      	ldrb	r3, [r7, #13]
}
 80111a2:	4618      	mov	r0, r3
 80111a4:	3714      	adds	r7, #20
 80111a6:	46bd      	mov	sp, r7
 80111a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111ac:	4770      	bx	lr
 80111ae:	bf00      	nop
 80111b0:	20041308 	.word	0x20041308

080111b4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80111b4:	b480      	push	{r7}
 80111b6:	b085      	sub	sp, #20
 80111b8:	af00      	add	r7, sp, #0
 80111ba:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80111bc:	2300      	movs	r3, #0
 80111be:	60fb      	str	r3, [r7, #12]
 80111c0:	e010      	b.n	80111e4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80111c2:	4a0d      	ldr	r2, [pc, #52]	; (80111f8 <clear_lock+0x44>)
 80111c4:	68fb      	ldr	r3, [r7, #12]
 80111c6:	011b      	lsls	r3, r3, #4
 80111c8:	4413      	add	r3, r2
 80111ca:	681b      	ldr	r3, [r3, #0]
 80111cc:	687a      	ldr	r2, [r7, #4]
 80111ce:	429a      	cmp	r2, r3
 80111d0:	d105      	bne.n	80111de <clear_lock+0x2a>
 80111d2:	4a09      	ldr	r2, [pc, #36]	; (80111f8 <clear_lock+0x44>)
 80111d4:	68fb      	ldr	r3, [r7, #12]
 80111d6:	011b      	lsls	r3, r3, #4
 80111d8:	4413      	add	r3, r2
 80111da:	2200      	movs	r2, #0
 80111dc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80111de:	68fb      	ldr	r3, [r7, #12]
 80111e0:	3301      	adds	r3, #1
 80111e2:	60fb      	str	r3, [r7, #12]
 80111e4:	68fb      	ldr	r3, [r7, #12]
 80111e6:	2b01      	cmp	r3, #1
 80111e8:	d9eb      	bls.n	80111c2 <clear_lock+0xe>
	}
}
 80111ea:	bf00      	nop
 80111ec:	3714      	adds	r7, #20
 80111ee:	46bd      	mov	sp, r7
 80111f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111f4:	4770      	bx	lr
 80111f6:	bf00      	nop
 80111f8:	20041308 	.word	0x20041308

080111fc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80111fc:	b580      	push	{r7, lr}
 80111fe:	b086      	sub	sp, #24
 8011200:	af00      	add	r7, sp, #0
 8011202:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8011204:	2300      	movs	r3, #0
 8011206:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	78db      	ldrb	r3, [r3, #3]
 801120c:	2b00      	cmp	r3, #0
 801120e:	d034      	beq.n	801127a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011214:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	7858      	ldrb	r0, [r3, #1]
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011220:	2301      	movs	r3, #1
 8011222:	697a      	ldr	r2, [r7, #20]
 8011224:	f7ff fd40 	bl	8010ca8 <disk_write>
 8011228:	4603      	mov	r3, r0
 801122a:	2b00      	cmp	r3, #0
 801122c:	d002      	beq.n	8011234 <sync_window+0x38>
			res = FR_DISK_ERR;
 801122e:	2301      	movs	r3, #1
 8011230:	73fb      	strb	r3, [r7, #15]
 8011232:	e022      	b.n	801127a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	2200      	movs	r2, #0
 8011238:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801123e:	697a      	ldr	r2, [r7, #20]
 8011240:	1ad2      	subs	r2, r2, r3
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	6a1b      	ldr	r3, [r3, #32]
 8011246:	429a      	cmp	r2, r3
 8011248:	d217      	bcs.n	801127a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	789b      	ldrb	r3, [r3, #2]
 801124e:	613b      	str	r3, [r7, #16]
 8011250:	e010      	b.n	8011274 <sync_window+0x78>
					wsect += fs->fsize;
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	6a1b      	ldr	r3, [r3, #32]
 8011256:	697a      	ldr	r2, [r7, #20]
 8011258:	4413      	add	r3, r2
 801125a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	7858      	ldrb	r0, [r3, #1]
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011266:	2301      	movs	r3, #1
 8011268:	697a      	ldr	r2, [r7, #20]
 801126a:	f7ff fd1d 	bl	8010ca8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801126e:	693b      	ldr	r3, [r7, #16]
 8011270:	3b01      	subs	r3, #1
 8011272:	613b      	str	r3, [r7, #16]
 8011274:	693b      	ldr	r3, [r7, #16]
 8011276:	2b01      	cmp	r3, #1
 8011278:	d8eb      	bhi.n	8011252 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 801127a:	7bfb      	ldrb	r3, [r7, #15]
}
 801127c:	4618      	mov	r0, r3
 801127e:	3718      	adds	r7, #24
 8011280:	46bd      	mov	sp, r7
 8011282:	bd80      	pop	{r7, pc}

08011284 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8011284:	b580      	push	{r7, lr}
 8011286:	b084      	sub	sp, #16
 8011288:	af00      	add	r7, sp, #0
 801128a:	6078      	str	r0, [r7, #4]
 801128c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801128e:	2300      	movs	r3, #0
 8011290:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011296:	683a      	ldr	r2, [r7, #0]
 8011298:	429a      	cmp	r2, r3
 801129a:	d01b      	beq.n	80112d4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 801129c:	6878      	ldr	r0, [r7, #4]
 801129e:	f7ff ffad 	bl	80111fc <sync_window>
 80112a2:	4603      	mov	r3, r0
 80112a4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80112a6:	7bfb      	ldrb	r3, [r7, #15]
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	d113      	bne.n	80112d4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	7858      	ldrb	r0, [r3, #1]
 80112b0:	687b      	ldr	r3, [r7, #4]
 80112b2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80112b6:	2301      	movs	r3, #1
 80112b8:	683a      	ldr	r2, [r7, #0]
 80112ba:	f7ff fcd5 	bl	8010c68 <disk_read>
 80112be:	4603      	mov	r3, r0
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d004      	beq.n	80112ce <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80112c4:	f04f 33ff 	mov.w	r3, #4294967295
 80112c8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80112ca:	2301      	movs	r3, #1
 80112cc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	683a      	ldr	r2, [r7, #0]
 80112d2:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 80112d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80112d6:	4618      	mov	r0, r3
 80112d8:	3710      	adds	r7, #16
 80112da:	46bd      	mov	sp, r7
 80112dc:	bd80      	pop	{r7, pc}
	...

080112e0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80112e0:	b580      	push	{r7, lr}
 80112e2:	b084      	sub	sp, #16
 80112e4:	af00      	add	r7, sp, #0
 80112e6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80112e8:	6878      	ldr	r0, [r7, #4]
 80112ea:	f7ff ff87 	bl	80111fc <sync_window>
 80112ee:	4603      	mov	r3, r0
 80112f0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80112f2:	7bfb      	ldrb	r3, [r7, #15]
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	d159      	bne.n	80113ac <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	781b      	ldrb	r3, [r3, #0]
 80112fc:	2b03      	cmp	r3, #3
 80112fe:	d149      	bne.n	8011394 <sync_fs+0xb4>
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	791b      	ldrb	r3, [r3, #4]
 8011304:	2b01      	cmp	r3, #1
 8011306:	d145      	bne.n	8011394 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	899b      	ldrh	r3, [r3, #12]
 8011312:	461a      	mov	r2, r3
 8011314:	2100      	movs	r1, #0
 8011316:	f7ff fda8 	bl	8010e6a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	3338      	adds	r3, #56	; 0x38
 801131e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011322:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8011326:	4618      	mov	r0, r3
 8011328:	f7ff fd37 	bl	8010d9a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	3338      	adds	r3, #56	; 0x38
 8011330:	4921      	ldr	r1, [pc, #132]	; (80113b8 <sync_fs+0xd8>)
 8011332:	4618      	mov	r0, r3
 8011334:	f7ff fd4c 	bl	8010dd0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	3338      	adds	r3, #56	; 0x38
 801133c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8011340:	491e      	ldr	r1, [pc, #120]	; (80113bc <sync_fs+0xdc>)
 8011342:	4618      	mov	r0, r3
 8011344:	f7ff fd44 	bl	8010dd0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	3338      	adds	r3, #56	; 0x38
 801134c:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	695b      	ldr	r3, [r3, #20]
 8011354:	4619      	mov	r1, r3
 8011356:	4610      	mov	r0, r2
 8011358:	f7ff fd3a 	bl	8010dd0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 801135c:	687b      	ldr	r3, [r7, #4]
 801135e:	3338      	adds	r3, #56	; 0x38
 8011360:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	691b      	ldr	r3, [r3, #16]
 8011368:	4619      	mov	r1, r3
 801136a:	4610      	mov	r0, r2
 801136c:	f7ff fd30 	bl	8010dd0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011374:	1c5a      	adds	r2, r3, #1
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	7858      	ldrb	r0, [r3, #1]
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011388:	2301      	movs	r3, #1
 801138a:	f7ff fc8d 	bl	8010ca8 <disk_write>
			fs->fsi_flag = 0;
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	2200      	movs	r2, #0
 8011392:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	785b      	ldrb	r3, [r3, #1]
 8011398:	2200      	movs	r2, #0
 801139a:	2100      	movs	r1, #0
 801139c:	4618      	mov	r0, r3
 801139e:	f7ff fca3 	bl	8010ce8 <disk_ioctl>
 80113a2:	4603      	mov	r3, r0
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	d001      	beq.n	80113ac <sync_fs+0xcc>
 80113a8:	2301      	movs	r3, #1
 80113aa:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80113ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80113ae:	4618      	mov	r0, r3
 80113b0:	3710      	adds	r7, #16
 80113b2:	46bd      	mov	sp, r7
 80113b4:	bd80      	pop	{r7, pc}
 80113b6:	bf00      	nop
 80113b8:	41615252 	.word	0x41615252
 80113bc:	61417272 	.word	0x61417272

080113c0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80113c0:	b480      	push	{r7}
 80113c2:	b083      	sub	sp, #12
 80113c4:	af00      	add	r7, sp, #0
 80113c6:	6078      	str	r0, [r7, #4]
 80113c8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80113ca:	683b      	ldr	r3, [r7, #0]
 80113cc:	3b02      	subs	r3, #2
 80113ce:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80113d0:	687b      	ldr	r3, [r7, #4]
 80113d2:	69db      	ldr	r3, [r3, #28]
 80113d4:	3b02      	subs	r3, #2
 80113d6:	683a      	ldr	r2, [r7, #0]
 80113d8:	429a      	cmp	r2, r3
 80113da:	d301      	bcc.n	80113e0 <clust2sect+0x20>
 80113dc:	2300      	movs	r3, #0
 80113de:	e008      	b.n	80113f2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	895b      	ldrh	r3, [r3, #10]
 80113e4:	461a      	mov	r2, r3
 80113e6:	683b      	ldr	r3, [r7, #0]
 80113e8:	fb03 f202 	mul.w	r2, r3, r2
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80113f0:	4413      	add	r3, r2
}
 80113f2:	4618      	mov	r0, r3
 80113f4:	370c      	adds	r7, #12
 80113f6:	46bd      	mov	sp, r7
 80113f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113fc:	4770      	bx	lr

080113fe <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80113fe:	b580      	push	{r7, lr}
 8011400:	b086      	sub	sp, #24
 8011402:	af00      	add	r7, sp, #0
 8011404:	6078      	str	r0, [r7, #4]
 8011406:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	681b      	ldr	r3, [r3, #0]
 801140c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801140e:	683b      	ldr	r3, [r7, #0]
 8011410:	2b01      	cmp	r3, #1
 8011412:	d904      	bls.n	801141e <get_fat+0x20>
 8011414:	693b      	ldr	r3, [r7, #16]
 8011416:	69db      	ldr	r3, [r3, #28]
 8011418:	683a      	ldr	r2, [r7, #0]
 801141a:	429a      	cmp	r2, r3
 801141c:	d302      	bcc.n	8011424 <get_fat+0x26>
		val = 1;	/* Internal error */
 801141e:	2301      	movs	r3, #1
 8011420:	617b      	str	r3, [r7, #20]
 8011422:	e0b7      	b.n	8011594 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8011424:	f04f 33ff 	mov.w	r3, #4294967295
 8011428:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 801142a:	693b      	ldr	r3, [r7, #16]
 801142c:	781b      	ldrb	r3, [r3, #0]
 801142e:	2b02      	cmp	r3, #2
 8011430:	d05a      	beq.n	80114e8 <get_fat+0xea>
 8011432:	2b03      	cmp	r3, #3
 8011434:	d07d      	beq.n	8011532 <get_fat+0x134>
 8011436:	2b01      	cmp	r3, #1
 8011438:	f040 80a2 	bne.w	8011580 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 801143c:	683b      	ldr	r3, [r7, #0]
 801143e:	60fb      	str	r3, [r7, #12]
 8011440:	68fb      	ldr	r3, [r7, #12]
 8011442:	085b      	lsrs	r3, r3, #1
 8011444:	68fa      	ldr	r2, [r7, #12]
 8011446:	4413      	add	r3, r2
 8011448:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801144a:	693b      	ldr	r3, [r7, #16]
 801144c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801144e:	693b      	ldr	r3, [r7, #16]
 8011450:	899b      	ldrh	r3, [r3, #12]
 8011452:	4619      	mov	r1, r3
 8011454:	68fb      	ldr	r3, [r7, #12]
 8011456:	fbb3 f3f1 	udiv	r3, r3, r1
 801145a:	4413      	add	r3, r2
 801145c:	4619      	mov	r1, r3
 801145e:	6938      	ldr	r0, [r7, #16]
 8011460:	f7ff ff10 	bl	8011284 <move_window>
 8011464:	4603      	mov	r3, r0
 8011466:	2b00      	cmp	r3, #0
 8011468:	f040 808d 	bne.w	8011586 <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 801146c:	68fb      	ldr	r3, [r7, #12]
 801146e:	1c5a      	adds	r2, r3, #1
 8011470:	60fa      	str	r2, [r7, #12]
 8011472:	693a      	ldr	r2, [r7, #16]
 8011474:	8992      	ldrh	r2, [r2, #12]
 8011476:	fbb3 f1f2 	udiv	r1, r3, r2
 801147a:	fb02 f201 	mul.w	r2, r2, r1
 801147e:	1a9b      	subs	r3, r3, r2
 8011480:	693a      	ldr	r2, [r7, #16]
 8011482:	4413      	add	r3, r2
 8011484:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011488:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801148a:	693b      	ldr	r3, [r7, #16]
 801148c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801148e:	693b      	ldr	r3, [r7, #16]
 8011490:	899b      	ldrh	r3, [r3, #12]
 8011492:	4619      	mov	r1, r3
 8011494:	68fb      	ldr	r3, [r7, #12]
 8011496:	fbb3 f3f1 	udiv	r3, r3, r1
 801149a:	4413      	add	r3, r2
 801149c:	4619      	mov	r1, r3
 801149e:	6938      	ldr	r0, [r7, #16]
 80114a0:	f7ff fef0 	bl	8011284 <move_window>
 80114a4:	4603      	mov	r3, r0
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	d16f      	bne.n	801158a <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80114aa:	693b      	ldr	r3, [r7, #16]
 80114ac:	899b      	ldrh	r3, [r3, #12]
 80114ae:	461a      	mov	r2, r3
 80114b0:	68fb      	ldr	r3, [r7, #12]
 80114b2:	fbb3 f1f2 	udiv	r1, r3, r2
 80114b6:	fb02 f201 	mul.w	r2, r2, r1
 80114ba:	1a9b      	subs	r3, r3, r2
 80114bc:	693a      	ldr	r2, [r7, #16]
 80114be:	4413      	add	r3, r2
 80114c0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80114c4:	021b      	lsls	r3, r3, #8
 80114c6:	461a      	mov	r2, r3
 80114c8:	68bb      	ldr	r3, [r7, #8]
 80114ca:	4313      	orrs	r3, r2
 80114cc:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80114ce:	683b      	ldr	r3, [r7, #0]
 80114d0:	f003 0301 	and.w	r3, r3, #1
 80114d4:	2b00      	cmp	r3, #0
 80114d6:	d002      	beq.n	80114de <get_fat+0xe0>
 80114d8:	68bb      	ldr	r3, [r7, #8]
 80114da:	091b      	lsrs	r3, r3, #4
 80114dc:	e002      	b.n	80114e4 <get_fat+0xe6>
 80114de:	68bb      	ldr	r3, [r7, #8]
 80114e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80114e4:	617b      	str	r3, [r7, #20]
			break;
 80114e6:	e055      	b.n	8011594 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80114e8:	693b      	ldr	r3, [r7, #16]
 80114ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80114ec:	693b      	ldr	r3, [r7, #16]
 80114ee:	899b      	ldrh	r3, [r3, #12]
 80114f0:	085b      	lsrs	r3, r3, #1
 80114f2:	b29b      	uxth	r3, r3
 80114f4:	4619      	mov	r1, r3
 80114f6:	683b      	ldr	r3, [r7, #0]
 80114f8:	fbb3 f3f1 	udiv	r3, r3, r1
 80114fc:	4413      	add	r3, r2
 80114fe:	4619      	mov	r1, r3
 8011500:	6938      	ldr	r0, [r7, #16]
 8011502:	f7ff febf 	bl	8011284 <move_window>
 8011506:	4603      	mov	r3, r0
 8011508:	2b00      	cmp	r3, #0
 801150a:	d140      	bne.n	801158e <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 801150c:	693b      	ldr	r3, [r7, #16]
 801150e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011512:	683b      	ldr	r3, [r7, #0]
 8011514:	005b      	lsls	r3, r3, #1
 8011516:	693a      	ldr	r2, [r7, #16]
 8011518:	8992      	ldrh	r2, [r2, #12]
 801151a:	fbb3 f0f2 	udiv	r0, r3, r2
 801151e:	fb02 f200 	mul.w	r2, r2, r0
 8011522:	1a9b      	subs	r3, r3, r2
 8011524:	440b      	add	r3, r1
 8011526:	4618      	mov	r0, r3
 8011528:	f7ff fbfc 	bl	8010d24 <ld_word>
 801152c:	4603      	mov	r3, r0
 801152e:	617b      	str	r3, [r7, #20]
			break;
 8011530:	e030      	b.n	8011594 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011532:	693b      	ldr	r3, [r7, #16]
 8011534:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011536:	693b      	ldr	r3, [r7, #16]
 8011538:	899b      	ldrh	r3, [r3, #12]
 801153a:	089b      	lsrs	r3, r3, #2
 801153c:	b29b      	uxth	r3, r3
 801153e:	4619      	mov	r1, r3
 8011540:	683b      	ldr	r3, [r7, #0]
 8011542:	fbb3 f3f1 	udiv	r3, r3, r1
 8011546:	4413      	add	r3, r2
 8011548:	4619      	mov	r1, r3
 801154a:	6938      	ldr	r0, [r7, #16]
 801154c:	f7ff fe9a 	bl	8011284 <move_window>
 8011550:	4603      	mov	r3, r0
 8011552:	2b00      	cmp	r3, #0
 8011554:	d11d      	bne.n	8011592 <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8011556:	693b      	ldr	r3, [r7, #16]
 8011558:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801155c:	683b      	ldr	r3, [r7, #0]
 801155e:	009b      	lsls	r3, r3, #2
 8011560:	693a      	ldr	r2, [r7, #16]
 8011562:	8992      	ldrh	r2, [r2, #12]
 8011564:	fbb3 f0f2 	udiv	r0, r3, r2
 8011568:	fb02 f200 	mul.w	r2, r2, r0
 801156c:	1a9b      	subs	r3, r3, r2
 801156e:	440b      	add	r3, r1
 8011570:	4618      	mov	r0, r3
 8011572:	f7ff fbef 	bl	8010d54 <ld_dword>
 8011576:	4603      	mov	r3, r0
 8011578:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 801157c:	617b      	str	r3, [r7, #20]
			break;
 801157e:	e009      	b.n	8011594 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8011580:	2301      	movs	r3, #1
 8011582:	617b      	str	r3, [r7, #20]
 8011584:	e006      	b.n	8011594 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011586:	bf00      	nop
 8011588:	e004      	b.n	8011594 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801158a:	bf00      	nop
 801158c:	e002      	b.n	8011594 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801158e:	bf00      	nop
 8011590:	e000      	b.n	8011594 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011592:	bf00      	nop
		}
	}

	return val;
 8011594:	697b      	ldr	r3, [r7, #20]
}
 8011596:	4618      	mov	r0, r3
 8011598:	3718      	adds	r7, #24
 801159a:	46bd      	mov	sp, r7
 801159c:	bd80      	pop	{r7, pc}

0801159e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 801159e:	b590      	push	{r4, r7, lr}
 80115a0:	b089      	sub	sp, #36	; 0x24
 80115a2:	af00      	add	r7, sp, #0
 80115a4:	60f8      	str	r0, [r7, #12]
 80115a6:	60b9      	str	r1, [r7, #8]
 80115a8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80115aa:	2302      	movs	r3, #2
 80115ac:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80115ae:	68bb      	ldr	r3, [r7, #8]
 80115b0:	2b01      	cmp	r3, #1
 80115b2:	f240 8106 	bls.w	80117c2 <put_fat+0x224>
 80115b6:	68fb      	ldr	r3, [r7, #12]
 80115b8:	69db      	ldr	r3, [r3, #28]
 80115ba:	68ba      	ldr	r2, [r7, #8]
 80115bc:	429a      	cmp	r2, r3
 80115be:	f080 8100 	bcs.w	80117c2 <put_fat+0x224>
		switch (fs->fs_type) {
 80115c2:	68fb      	ldr	r3, [r7, #12]
 80115c4:	781b      	ldrb	r3, [r3, #0]
 80115c6:	2b02      	cmp	r3, #2
 80115c8:	f000 8088 	beq.w	80116dc <put_fat+0x13e>
 80115cc:	2b03      	cmp	r3, #3
 80115ce:	f000 80b0 	beq.w	8011732 <put_fat+0x194>
 80115d2:	2b01      	cmp	r3, #1
 80115d4:	f040 80f5 	bne.w	80117c2 <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80115d8:	68bb      	ldr	r3, [r7, #8]
 80115da:	61bb      	str	r3, [r7, #24]
 80115dc:	69bb      	ldr	r3, [r7, #24]
 80115de:	085b      	lsrs	r3, r3, #1
 80115e0:	69ba      	ldr	r2, [r7, #24]
 80115e2:	4413      	add	r3, r2
 80115e4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80115e6:	68fb      	ldr	r3, [r7, #12]
 80115e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80115ea:	68fb      	ldr	r3, [r7, #12]
 80115ec:	899b      	ldrh	r3, [r3, #12]
 80115ee:	4619      	mov	r1, r3
 80115f0:	69bb      	ldr	r3, [r7, #24]
 80115f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80115f6:	4413      	add	r3, r2
 80115f8:	4619      	mov	r1, r3
 80115fa:	68f8      	ldr	r0, [r7, #12]
 80115fc:	f7ff fe42 	bl	8011284 <move_window>
 8011600:	4603      	mov	r3, r0
 8011602:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011604:	7ffb      	ldrb	r3, [r7, #31]
 8011606:	2b00      	cmp	r3, #0
 8011608:	f040 80d4 	bne.w	80117b4 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 801160c:	68fb      	ldr	r3, [r7, #12]
 801160e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011612:	69bb      	ldr	r3, [r7, #24]
 8011614:	1c5a      	adds	r2, r3, #1
 8011616:	61ba      	str	r2, [r7, #24]
 8011618:	68fa      	ldr	r2, [r7, #12]
 801161a:	8992      	ldrh	r2, [r2, #12]
 801161c:	fbb3 f0f2 	udiv	r0, r3, r2
 8011620:	fb02 f200 	mul.w	r2, r2, r0
 8011624:	1a9b      	subs	r3, r3, r2
 8011626:	440b      	add	r3, r1
 8011628:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 801162a:	68bb      	ldr	r3, [r7, #8]
 801162c:	f003 0301 	and.w	r3, r3, #1
 8011630:	2b00      	cmp	r3, #0
 8011632:	d00d      	beq.n	8011650 <put_fat+0xb2>
 8011634:	697b      	ldr	r3, [r7, #20]
 8011636:	781b      	ldrb	r3, [r3, #0]
 8011638:	b25b      	sxtb	r3, r3
 801163a:	f003 030f 	and.w	r3, r3, #15
 801163e:	b25a      	sxtb	r2, r3
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	b2db      	uxtb	r3, r3
 8011644:	011b      	lsls	r3, r3, #4
 8011646:	b25b      	sxtb	r3, r3
 8011648:	4313      	orrs	r3, r2
 801164a:	b25b      	sxtb	r3, r3
 801164c:	b2db      	uxtb	r3, r3
 801164e:	e001      	b.n	8011654 <put_fat+0xb6>
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	b2db      	uxtb	r3, r3
 8011654:	697a      	ldr	r2, [r7, #20]
 8011656:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011658:	68fb      	ldr	r3, [r7, #12]
 801165a:	2201      	movs	r2, #1
 801165c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801165e:	68fb      	ldr	r3, [r7, #12]
 8011660:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011662:	68fb      	ldr	r3, [r7, #12]
 8011664:	899b      	ldrh	r3, [r3, #12]
 8011666:	4619      	mov	r1, r3
 8011668:	69bb      	ldr	r3, [r7, #24]
 801166a:	fbb3 f3f1 	udiv	r3, r3, r1
 801166e:	4413      	add	r3, r2
 8011670:	4619      	mov	r1, r3
 8011672:	68f8      	ldr	r0, [r7, #12]
 8011674:	f7ff fe06 	bl	8011284 <move_window>
 8011678:	4603      	mov	r3, r0
 801167a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801167c:	7ffb      	ldrb	r3, [r7, #31]
 801167e:	2b00      	cmp	r3, #0
 8011680:	f040 809a 	bne.w	80117b8 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 8011684:	68fb      	ldr	r3, [r7, #12]
 8011686:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801168a:	68fb      	ldr	r3, [r7, #12]
 801168c:	899b      	ldrh	r3, [r3, #12]
 801168e:	461a      	mov	r2, r3
 8011690:	69bb      	ldr	r3, [r7, #24]
 8011692:	fbb3 f0f2 	udiv	r0, r3, r2
 8011696:	fb02 f200 	mul.w	r2, r2, r0
 801169a:	1a9b      	subs	r3, r3, r2
 801169c:	440b      	add	r3, r1
 801169e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80116a0:	68bb      	ldr	r3, [r7, #8]
 80116a2:	f003 0301 	and.w	r3, r3, #1
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	d003      	beq.n	80116b2 <put_fat+0x114>
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	091b      	lsrs	r3, r3, #4
 80116ae:	b2db      	uxtb	r3, r3
 80116b0:	e00e      	b.n	80116d0 <put_fat+0x132>
 80116b2:	697b      	ldr	r3, [r7, #20]
 80116b4:	781b      	ldrb	r3, [r3, #0]
 80116b6:	b25b      	sxtb	r3, r3
 80116b8:	f023 030f 	bic.w	r3, r3, #15
 80116bc:	b25a      	sxtb	r2, r3
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	0a1b      	lsrs	r3, r3, #8
 80116c2:	b25b      	sxtb	r3, r3
 80116c4:	f003 030f 	and.w	r3, r3, #15
 80116c8:	b25b      	sxtb	r3, r3
 80116ca:	4313      	orrs	r3, r2
 80116cc:	b25b      	sxtb	r3, r3
 80116ce:	b2db      	uxtb	r3, r3
 80116d0:	697a      	ldr	r2, [r7, #20]
 80116d2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80116d4:	68fb      	ldr	r3, [r7, #12]
 80116d6:	2201      	movs	r2, #1
 80116d8:	70da      	strb	r2, [r3, #3]
			break;
 80116da:	e072      	b.n	80117c2 <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80116dc:	68fb      	ldr	r3, [r7, #12]
 80116de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80116e0:	68fb      	ldr	r3, [r7, #12]
 80116e2:	899b      	ldrh	r3, [r3, #12]
 80116e4:	085b      	lsrs	r3, r3, #1
 80116e6:	b29b      	uxth	r3, r3
 80116e8:	4619      	mov	r1, r3
 80116ea:	68bb      	ldr	r3, [r7, #8]
 80116ec:	fbb3 f3f1 	udiv	r3, r3, r1
 80116f0:	4413      	add	r3, r2
 80116f2:	4619      	mov	r1, r3
 80116f4:	68f8      	ldr	r0, [r7, #12]
 80116f6:	f7ff fdc5 	bl	8011284 <move_window>
 80116fa:	4603      	mov	r3, r0
 80116fc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80116fe:	7ffb      	ldrb	r3, [r7, #31]
 8011700:	2b00      	cmp	r3, #0
 8011702:	d15b      	bne.n	80117bc <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8011704:	68fb      	ldr	r3, [r7, #12]
 8011706:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801170a:	68bb      	ldr	r3, [r7, #8]
 801170c:	005b      	lsls	r3, r3, #1
 801170e:	68fa      	ldr	r2, [r7, #12]
 8011710:	8992      	ldrh	r2, [r2, #12]
 8011712:	fbb3 f0f2 	udiv	r0, r3, r2
 8011716:	fb02 f200 	mul.w	r2, r2, r0
 801171a:	1a9b      	subs	r3, r3, r2
 801171c:	440b      	add	r3, r1
 801171e:	687a      	ldr	r2, [r7, #4]
 8011720:	b292      	uxth	r2, r2
 8011722:	4611      	mov	r1, r2
 8011724:	4618      	mov	r0, r3
 8011726:	f7ff fb38 	bl	8010d9a <st_word>
			fs->wflag = 1;
 801172a:	68fb      	ldr	r3, [r7, #12]
 801172c:	2201      	movs	r2, #1
 801172e:	70da      	strb	r2, [r3, #3]
			break;
 8011730:	e047      	b.n	80117c2 <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8011732:	68fb      	ldr	r3, [r7, #12]
 8011734:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011736:	68fb      	ldr	r3, [r7, #12]
 8011738:	899b      	ldrh	r3, [r3, #12]
 801173a:	089b      	lsrs	r3, r3, #2
 801173c:	b29b      	uxth	r3, r3
 801173e:	4619      	mov	r1, r3
 8011740:	68bb      	ldr	r3, [r7, #8]
 8011742:	fbb3 f3f1 	udiv	r3, r3, r1
 8011746:	4413      	add	r3, r2
 8011748:	4619      	mov	r1, r3
 801174a:	68f8      	ldr	r0, [r7, #12]
 801174c:	f7ff fd9a 	bl	8011284 <move_window>
 8011750:	4603      	mov	r3, r0
 8011752:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011754:	7ffb      	ldrb	r3, [r7, #31]
 8011756:	2b00      	cmp	r3, #0
 8011758:	d132      	bne.n	80117c0 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8011760:	68fb      	ldr	r3, [r7, #12]
 8011762:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011766:	68bb      	ldr	r3, [r7, #8]
 8011768:	009b      	lsls	r3, r3, #2
 801176a:	68fa      	ldr	r2, [r7, #12]
 801176c:	8992      	ldrh	r2, [r2, #12]
 801176e:	fbb3 f0f2 	udiv	r0, r3, r2
 8011772:	fb02 f200 	mul.w	r2, r2, r0
 8011776:	1a9b      	subs	r3, r3, r2
 8011778:	440b      	add	r3, r1
 801177a:	4618      	mov	r0, r3
 801177c:	f7ff faea 	bl	8010d54 <ld_dword>
 8011780:	4603      	mov	r3, r0
 8011782:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8011786:	4323      	orrs	r3, r4
 8011788:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 801178a:	68fb      	ldr	r3, [r7, #12]
 801178c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011790:	68bb      	ldr	r3, [r7, #8]
 8011792:	009b      	lsls	r3, r3, #2
 8011794:	68fa      	ldr	r2, [r7, #12]
 8011796:	8992      	ldrh	r2, [r2, #12]
 8011798:	fbb3 f0f2 	udiv	r0, r3, r2
 801179c:	fb02 f200 	mul.w	r2, r2, r0
 80117a0:	1a9b      	subs	r3, r3, r2
 80117a2:	440b      	add	r3, r1
 80117a4:	6879      	ldr	r1, [r7, #4]
 80117a6:	4618      	mov	r0, r3
 80117a8:	f7ff fb12 	bl	8010dd0 <st_dword>
			fs->wflag = 1;
 80117ac:	68fb      	ldr	r3, [r7, #12]
 80117ae:	2201      	movs	r2, #1
 80117b0:	70da      	strb	r2, [r3, #3]
			break;
 80117b2:	e006      	b.n	80117c2 <put_fat+0x224>
			if (res != FR_OK) break;
 80117b4:	bf00      	nop
 80117b6:	e004      	b.n	80117c2 <put_fat+0x224>
			if (res != FR_OK) break;
 80117b8:	bf00      	nop
 80117ba:	e002      	b.n	80117c2 <put_fat+0x224>
			if (res != FR_OK) break;
 80117bc:	bf00      	nop
 80117be:	e000      	b.n	80117c2 <put_fat+0x224>
			if (res != FR_OK) break;
 80117c0:	bf00      	nop
		}
	}
	return res;
 80117c2:	7ffb      	ldrb	r3, [r7, #31]
}
 80117c4:	4618      	mov	r0, r3
 80117c6:	3724      	adds	r7, #36	; 0x24
 80117c8:	46bd      	mov	sp, r7
 80117ca:	bd90      	pop	{r4, r7, pc}

080117cc <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80117cc:	b580      	push	{r7, lr}
 80117ce:	b088      	sub	sp, #32
 80117d0:	af00      	add	r7, sp, #0
 80117d2:	60f8      	str	r0, [r7, #12]
 80117d4:	60b9      	str	r1, [r7, #8]
 80117d6:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80117d8:	2300      	movs	r3, #0
 80117da:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80117dc:	68fb      	ldr	r3, [r7, #12]
 80117de:	681b      	ldr	r3, [r3, #0]
 80117e0:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80117e2:	68bb      	ldr	r3, [r7, #8]
 80117e4:	2b01      	cmp	r3, #1
 80117e6:	d904      	bls.n	80117f2 <remove_chain+0x26>
 80117e8:	69bb      	ldr	r3, [r7, #24]
 80117ea:	69db      	ldr	r3, [r3, #28]
 80117ec:	68ba      	ldr	r2, [r7, #8]
 80117ee:	429a      	cmp	r2, r3
 80117f0:	d301      	bcc.n	80117f6 <remove_chain+0x2a>
 80117f2:	2302      	movs	r3, #2
 80117f4:	e04b      	b.n	801188e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	d00c      	beq.n	8011816 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80117fc:	f04f 32ff 	mov.w	r2, #4294967295
 8011800:	6879      	ldr	r1, [r7, #4]
 8011802:	69b8      	ldr	r0, [r7, #24]
 8011804:	f7ff fecb 	bl	801159e <put_fat>
 8011808:	4603      	mov	r3, r0
 801180a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 801180c:	7ffb      	ldrb	r3, [r7, #31]
 801180e:	2b00      	cmp	r3, #0
 8011810:	d001      	beq.n	8011816 <remove_chain+0x4a>
 8011812:	7ffb      	ldrb	r3, [r7, #31]
 8011814:	e03b      	b.n	801188e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8011816:	68b9      	ldr	r1, [r7, #8]
 8011818:	68f8      	ldr	r0, [r7, #12]
 801181a:	f7ff fdf0 	bl	80113fe <get_fat>
 801181e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8011820:	697b      	ldr	r3, [r7, #20]
 8011822:	2b00      	cmp	r3, #0
 8011824:	d031      	beq.n	801188a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8011826:	697b      	ldr	r3, [r7, #20]
 8011828:	2b01      	cmp	r3, #1
 801182a:	d101      	bne.n	8011830 <remove_chain+0x64>
 801182c:	2302      	movs	r3, #2
 801182e:	e02e      	b.n	801188e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8011830:	697b      	ldr	r3, [r7, #20]
 8011832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011836:	d101      	bne.n	801183c <remove_chain+0x70>
 8011838:	2301      	movs	r3, #1
 801183a:	e028      	b.n	801188e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 801183c:	2200      	movs	r2, #0
 801183e:	68b9      	ldr	r1, [r7, #8]
 8011840:	69b8      	ldr	r0, [r7, #24]
 8011842:	f7ff feac 	bl	801159e <put_fat>
 8011846:	4603      	mov	r3, r0
 8011848:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 801184a:	7ffb      	ldrb	r3, [r7, #31]
 801184c:	2b00      	cmp	r3, #0
 801184e:	d001      	beq.n	8011854 <remove_chain+0x88>
 8011850:	7ffb      	ldrb	r3, [r7, #31]
 8011852:	e01c      	b.n	801188e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8011854:	69bb      	ldr	r3, [r7, #24]
 8011856:	695a      	ldr	r2, [r3, #20]
 8011858:	69bb      	ldr	r3, [r7, #24]
 801185a:	69db      	ldr	r3, [r3, #28]
 801185c:	3b02      	subs	r3, #2
 801185e:	429a      	cmp	r2, r3
 8011860:	d20b      	bcs.n	801187a <remove_chain+0xae>
			fs->free_clst++;
 8011862:	69bb      	ldr	r3, [r7, #24]
 8011864:	695b      	ldr	r3, [r3, #20]
 8011866:	1c5a      	adds	r2, r3, #1
 8011868:	69bb      	ldr	r3, [r7, #24]
 801186a:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 801186c:	69bb      	ldr	r3, [r7, #24]
 801186e:	791b      	ldrb	r3, [r3, #4]
 8011870:	f043 0301 	orr.w	r3, r3, #1
 8011874:	b2da      	uxtb	r2, r3
 8011876:	69bb      	ldr	r3, [r7, #24]
 8011878:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 801187a:	697b      	ldr	r3, [r7, #20]
 801187c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 801187e:	69bb      	ldr	r3, [r7, #24]
 8011880:	69db      	ldr	r3, [r3, #28]
 8011882:	68ba      	ldr	r2, [r7, #8]
 8011884:	429a      	cmp	r2, r3
 8011886:	d3c6      	bcc.n	8011816 <remove_chain+0x4a>
 8011888:	e000      	b.n	801188c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 801188a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 801188c:	2300      	movs	r3, #0
}
 801188e:	4618      	mov	r0, r3
 8011890:	3720      	adds	r7, #32
 8011892:	46bd      	mov	sp, r7
 8011894:	bd80      	pop	{r7, pc}

08011896 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8011896:	b580      	push	{r7, lr}
 8011898:	b088      	sub	sp, #32
 801189a:	af00      	add	r7, sp, #0
 801189c:	6078      	str	r0, [r7, #4]
 801189e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	681b      	ldr	r3, [r3, #0]
 80118a4:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80118a6:	683b      	ldr	r3, [r7, #0]
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	d10d      	bne.n	80118c8 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80118ac:	693b      	ldr	r3, [r7, #16]
 80118ae:	691b      	ldr	r3, [r3, #16]
 80118b0:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80118b2:	69bb      	ldr	r3, [r7, #24]
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	d004      	beq.n	80118c2 <create_chain+0x2c>
 80118b8:	693b      	ldr	r3, [r7, #16]
 80118ba:	69db      	ldr	r3, [r3, #28]
 80118bc:	69ba      	ldr	r2, [r7, #24]
 80118be:	429a      	cmp	r2, r3
 80118c0:	d31b      	bcc.n	80118fa <create_chain+0x64>
 80118c2:	2301      	movs	r3, #1
 80118c4:	61bb      	str	r3, [r7, #24]
 80118c6:	e018      	b.n	80118fa <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80118c8:	6839      	ldr	r1, [r7, #0]
 80118ca:	6878      	ldr	r0, [r7, #4]
 80118cc:	f7ff fd97 	bl	80113fe <get_fat>
 80118d0:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80118d2:	68fb      	ldr	r3, [r7, #12]
 80118d4:	2b01      	cmp	r3, #1
 80118d6:	d801      	bhi.n	80118dc <create_chain+0x46>
 80118d8:	2301      	movs	r3, #1
 80118da:	e070      	b.n	80119be <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80118dc:	68fb      	ldr	r3, [r7, #12]
 80118de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80118e2:	d101      	bne.n	80118e8 <create_chain+0x52>
 80118e4:	68fb      	ldr	r3, [r7, #12]
 80118e6:	e06a      	b.n	80119be <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80118e8:	693b      	ldr	r3, [r7, #16]
 80118ea:	69db      	ldr	r3, [r3, #28]
 80118ec:	68fa      	ldr	r2, [r7, #12]
 80118ee:	429a      	cmp	r2, r3
 80118f0:	d201      	bcs.n	80118f6 <create_chain+0x60>
 80118f2:	68fb      	ldr	r3, [r7, #12]
 80118f4:	e063      	b.n	80119be <create_chain+0x128>
		scl = clst;
 80118f6:	683b      	ldr	r3, [r7, #0]
 80118f8:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80118fa:	69bb      	ldr	r3, [r7, #24]
 80118fc:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80118fe:	69fb      	ldr	r3, [r7, #28]
 8011900:	3301      	adds	r3, #1
 8011902:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8011904:	693b      	ldr	r3, [r7, #16]
 8011906:	69db      	ldr	r3, [r3, #28]
 8011908:	69fa      	ldr	r2, [r7, #28]
 801190a:	429a      	cmp	r2, r3
 801190c:	d307      	bcc.n	801191e <create_chain+0x88>
				ncl = 2;
 801190e:	2302      	movs	r3, #2
 8011910:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8011912:	69fa      	ldr	r2, [r7, #28]
 8011914:	69bb      	ldr	r3, [r7, #24]
 8011916:	429a      	cmp	r2, r3
 8011918:	d901      	bls.n	801191e <create_chain+0x88>
 801191a:	2300      	movs	r3, #0
 801191c:	e04f      	b.n	80119be <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 801191e:	69f9      	ldr	r1, [r7, #28]
 8011920:	6878      	ldr	r0, [r7, #4]
 8011922:	f7ff fd6c 	bl	80113fe <get_fat>
 8011926:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8011928:	68fb      	ldr	r3, [r7, #12]
 801192a:	2b00      	cmp	r3, #0
 801192c:	d00e      	beq.n	801194c <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 801192e:	68fb      	ldr	r3, [r7, #12]
 8011930:	2b01      	cmp	r3, #1
 8011932:	d003      	beq.n	801193c <create_chain+0xa6>
 8011934:	68fb      	ldr	r3, [r7, #12]
 8011936:	f1b3 3fff 	cmp.w	r3, #4294967295
 801193a:	d101      	bne.n	8011940 <create_chain+0xaa>
 801193c:	68fb      	ldr	r3, [r7, #12]
 801193e:	e03e      	b.n	80119be <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8011940:	69fa      	ldr	r2, [r7, #28]
 8011942:	69bb      	ldr	r3, [r7, #24]
 8011944:	429a      	cmp	r2, r3
 8011946:	d1da      	bne.n	80118fe <create_chain+0x68>
 8011948:	2300      	movs	r3, #0
 801194a:	e038      	b.n	80119be <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 801194c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 801194e:	f04f 32ff 	mov.w	r2, #4294967295
 8011952:	69f9      	ldr	r1, [r7, #28]
 8011954:	6938      	ldr	r0, [r7, #16]
 8011956:	f7ff fe22 	bl	801159e <put_fat>
 801195a:	4603      	mov	r3, r0
 801195c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 801195e:	7dfb      	ldrb	r3, [r7, #23]
 8011960:	2b00      	cmp	r3, #0
 8011962:	d109      	bne.n	8011978 <create_chain+0xe2>
 8011964:	683b      	ldr	r3, [r7, #0]
 8011966:	2b00      	cmp	r3, #0
 8011968:	d006      	beq.n	8011978 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 801196a:	69fa      	ldr	r2, [r7, #28]
 801196c:	6839      	ldr	r1, [r7, #0]
 801196e:	6938      	ldr	r0, [r7, #16]
 8011970:	f7ff fe15 	bl	801159e <put_fat>
 8011974:	4603      	mov	r3, r0
 8011976:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8011978:	7dfb      	ldrb	r3, [r7, #23]
 801197a:	2b00      	cmp	r3, #0
 801197c:	d116      	bne.n	80119ac <create_chain+0x116>
		fs->last_clst = ncl;
 801197e:	693b      	ldr	r3, [r7, #16]
 8011980:	69fa      	ldr	r2, [r7, #28]
 8011982:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8011984:	693b      	ldr	r3, [r7, #16]
 8011986:	695a      	ldr	r2, [r3, #20]
 8011988:	693b      	ldr	r3, [r7, #16]
 801198a:	69db      	ldr	r3, [r3, #28]
 801198c:	3b02      	subs	r3, #2
 801198e:	429a      	cmp	r2, r3
 8011990:	d804      	bhi.n	801199c <create_chain+0x106>
 8011992:	693b      	ldr	r3, [r7, #16]
 8011994:	695b      	ldr	r3, [r3, #20]
 8011996:	1e5a      	subs	r2, r3, #1
 8011998:	693b      	ldr	r3, [r7, #16]
 801199a:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 801199c:	693b      	ldr	r3, [r7, #16]
 801199e:	791b      	ldrb	r3, [r3, #4]
 80119a0:	f043 0301 	orr.w	r3, r3, #1
 80119a4:	b2da      	uxtb	r2, r3
 80119a6:	693b      	ldr	r3, [r7, #16]
 80119a8:	711a      	strb	r2, [r3, #4]
 80119aa:	e007      	b.n	80119bc <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80119ac:	7dfb      	ldrb	r3, [r7, #23]
 80119ae:	2b01      	cmp	r3, #1
 80119b0:	d102      	bne.n	80119b8 <create_chain+0x122>
 80119b2:	f04f 33ff 	mov.w	r3, #4294967295
 80119b6:	e000      	b.n	80119ba <create_chain+0x124>
 80119b8:	2301      	movs	r3, #1
 80119ba:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80119bc:	69fb      	ldr	r3, [r7, #28]
}
 80119be:	4618      	mov	r0, r3
 80119c0:	3720      	adds	r7, #32
 80119c2:	46bd      	mov	sp, r7
 80119c4:	bd80      	pop	{r7, pc}

080119c6 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80119c6:	b480      	push	{r7}
 80119c8:	b087      	sub	sp, #28
 80119ca:	af00      	add	r7, sp, #0
 80119cc:	6078      	str	r0, [r7, #4]
 80119ce:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	681b      	ldr	r3, [r3, #0]
 80119d4:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80119d6:	687b      	ldr	r3, [r7, #4]
 80119d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80119da:	3304      	adds	r3, #4
 80119dc:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80119de:	68fb      	ldr	r3, [r7, #12]
 80119e0:	899b      	ldrh	r3, [r3, #12]
 80119e2:	461a      	mov	r2, r3
 80119e4:	683b      	ldr	r3, [r7, #0]
 80119e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80119ea:	68fa      	ldr	r2, [r7, #12]
 80119ec:	8952      	ldrh	r2, [r2, #10]
 80119ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80119f2:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80119f4:	693b      	ldr	r3, [r7, #16]
 80119f6:	1d1a      	adds	r2, r3, #4
 80119f8:	613a      	str	r2, [r7, #16]
 80119fa:	681b      	ldr	r3, [r3, #0]
 80119fc:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80119fe:	68bb      	ldr	r3, [r7, #8]
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	d101      	bne.n	8011a08 <clmt_clust+0x42>
 8011a04:	2300      	movs	r3, #0
 8011a06:	e010      	b.n	8011a2a <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8011a08:	697a      	ldr	r2, [r7, #20]
 8011a0a:	68bb      	ldr	r3, [r7, #8]
 8011a0c:	429a      	cmp	r2, r3
 8011a0e:	d307      	bcc.n	8011a20 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8011a10:	697a      	ldr	r2, [r7, #20]
 8011a12:	68bb      	ldr	r3, [r7, #8]
 8011a14:	1ad3      	subs	r3, r2, r3
 8011a16:	617b      	str	r3, [r7, #20]
 8011a18:	693b      	ldr	r3, [r7, #16]
 8011a1a:	3304      	adds	r3, #4
 8011a1c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011a1e:	e7e9      	b.n	80119f4 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8011a20:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8011a22:	693b      	ldr	r3, [r7, #16]
 8011a24:	681a      	ldr	r2, [r3, #0]
 8011a26:	697b      	ldr	r3, [r7, #20]
 8011a28:	4413      	add	r3, r2
}
 8011a2a:	4618      	mov	r0, r3
 8011a2c:	371c      	adds	r7, #28
 8011a2e:	46bd      	mov	sp, r7
 8011a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a34:	4770      	bx	lr

08011a36 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8011a36:	b580      	push	{r7, lr}
 8011a38:	b086      	sub	sp, #24
 8011a3a:	af00      	add	r7, sp, #0
 8011a3c:	6078      	str	r0, [r7, #4]
 8011a3e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	681b      	ldr	r3, [r3, #0]
 8011a44:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8011a46:	683b      	ldr	r3, [r7, #0]
 8011a48:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011a4c:	d204      	bcs.n	8011a58 <dir_sdi+0x22>
 8011a4e:	683b      	ldr	r3, [r7, #0]
 8011a50:	f003 031f 	and.w	r3, r3, #31
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	d001      	beq.n	8011a5c <dir_sdi+0x26>
		return FR_INT_ERR;
 8011a58:	2302      	movs	r3, #2
 8011a5a:	e071      	b.n	8011b40 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	683a      	ldr	r2, [r7, #0]
 8011a60:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	689b      	ldr	r3, [r3, #8]
 8011a66:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8011a68:	697b      	ldr	r3, [r7, #20]
 8011a6a:	2b00      	cmp	r3, #0
 8011a6c:	d106      	bne.n	8011a7c <dir_sdi+0x46>
 8011a6e:	693b      	ldr	r3, [r7, #16]
 8011a70:	781b      	ldrb	r3, [r3, #0]
 8011a72:	2b02      	cmp	r3, #2
 8011a74:	d902      	bls.n	8011a7c <dir_sdi+0x46>
		clst = fs->dirbase;
 8011a76:	693b      	ldr	r3, [r7, #16]
 8011a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a7a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8011a7c:	697b      	ldr	r3, [r7, #20]
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	d10c      	bne.n	8011a9c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8011a82:	683b      	ldr	r3, [r7, #0]
 8011a84:	095b      	lsrs	r3, r3, #5
 8011a86:	693a      	ldr	r2, [r7, #16]
 8011a88:	8912      	ldrh	r2, [r2, #8]
 8011a8a:	4293      	cmp	r3, r2
 8011a8c:	d301      	bcc.n	8011a92 <dir_sdi+0x5c>
 8011a8e:	2302      	movs	r3, #2
 8011a90:	e056      	b.n	8011b40 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8011a92:	693b      	ldr	r3, [r7, #16]
 8011a94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	61da      	str	r2, [r3, #28]
 8011a9a:	e02d      	b.n	8011af8 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8011a9c:	693b      	ldr	r3, [r7, #16]
 8011a9e:	895b      	ldrh	r3, [r3, #10]
 8011aa0:	461a      	mov	r2, r3
 8011aa2:	693b      	ldr	r3, [r7, #16]
 8011aa4:	899b      	ldrh	r3, [r3, #12]
 8011aa6:	fb03 f302 	mul.w	r3, r3, r2
 8011aaa:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8011aac:	e019      	b.n	8011ae2 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	6979      	ldr	r1, [r7, #20]
 8011ab2:	4618      	mov	r0, r3
 8011ab4:	f7ff fca3 	bl	80113fe <get_fat>
 8011ab8:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8011aba:	697b      	ldr	r3, [r7, #20]
 8011abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ac0:	d101      	bne.n	8011ac6 <dir_sdi+0x90>
 8011ac2:	2301      	movs	r3, #1
 8011ac4:	e03c      	b.n	8011b40 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8011ac6:	697b      	ldr	r3, [r7, #20]
 8011ac8:	2b01      	cmp	r3, #1
 8011aca:	d904      	bls.n	8011ad6 <dir_sdi+0xa0>
 8011acc:	693b      	ldr	r3, [r7, #16]
 8011ace:	69db      	ldr	r3, [r3, #28]
 8011ad0:	697a      	ldr	r2, [r7, #20]
 8011ad2:	429a      	cmp	r2, r3
 8011ad4:	d301      	bcc.n	8011ada <dir_sdi+0xa4>
 8011ad6:	2302      	movs	r3, #2
 8011ad8:	e032      	b.n	8011b40 <dir_sdi+0x10a>
			ofs -= csz;
 8011ada:	683a      	ldr	r2, [r7, #0]
 8011adc:	68fb      	ldr	r3, [r7, #12]
 8011ade:	1ad3      	subs	r3, r2, r3
 8011ae0:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8011ae2:	683a      	ldr	r2, [r7, #0]
 8011ae4:	68fb      	ldr	r3, [r7, #12]
 8011ae6:	429a      	cmp	r2, r3
 8011ae8:	d2e1      	bcs.n	8011aae <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8011aea:	6979      	ldr	r1, [r7, #20]
 8011aec:	6938      	ldr	r0, [r7, #16]
 8011aee:	f7ff fc67 	bl	80113c0 <clust2sect>
 8011af2:	4602      	mov	r2, r0
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	697a      	ldr	r2, [r7, #20]
 8011afc:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	69db      	ldr	r3, [r3, #28]
 8011b02:	2b00      	cmp	r3, #0
 8011b04:	d101      	bne.n	8011b0a <dir_sdi+0xd4>
 8011b06:	2302      	movs	r3, #2
 8011b08:	e01a      	b.n	8011b40 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8011b0a:	687b      	ldr	r3, [r7, #4]
 8011b0c:	69da      	ldr	r2, [r3, #28]
 8011b0e:	693b      	ldr	r3, [r7, #16]
 8011b10:	899b      	ldrh	r3, [r3, #12]
 8011b12:	4619      	mov	r1, r3
 8011b14:	683b      	ldr	r3, [r7, #0]
 8011b16:	fbb3 f3f1 	udiv	r3, r3, r1
 8011b1a:	441a      	add	r2, r3
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8011b20:	693b      	ldr	r3, [r7, #16]
 8011b22:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011b26:	693b      	ldr	r3, [r7, #16]
 8011b28:	899b      	ldrh	r3, [r3, #12]
 8011b2a:	461a      	mov	r2, r3
 8011b2c:	683b      	ldr	r3, [r7, #0]
 8011b2e:	fbb3 f0f2 	udiv	r0, r3, r2
 8011b32:	fb02 f200 	mul.w	r2, r2, r0
 8011b36:	1a9b      	subs	r3, r3, r2
 8011b38:	18ca      	adds	r2, r1, r3
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8011b3e:	2300      	movs	r3, #0
}
 8011b40:	4618      	mov	r0, r3
 8011b42:	3718      	adds	r7, #24
 8011b44:	46bd      	mov	sp, r7
 8011b46:	bd80      	pop	{r7, pc}

08011b48 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8011b48:	b580      	push	{r7, lr}
 8011b4a:	b086      	sub	sp, #24
 8011b4c:	af00      	add	r7, sp, #0
 8011b4e:	6078      	str	r0, [r7, #4]
 8011b50:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8011b52:	687b      	ldr	r3, [r7, #4]
 8011b54:	681b      	ldr	r3, [r3, #0]
 8011b56:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	695b      	ldr	r3, [r3, #20]
 8011b5c:	3320      	adds	r3, #32
 8011b5e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	69db      	ldr	r3, [r3, #28]
 8011b64:	2b00      	cmp	r3, #0
 8011b66:	d003      	beq.n	8011b70 <dir_next+0x28>
 8011b68:	68bb      	ldr	r3, [r7, #8]
 8011b6a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011b6e:	d301      	bcc.n	8011b74 <dir_next+0x2c>
 8011b70:	2304      	movs	r3, #4
 8011b72:	e0bb      	b.n	8011cec <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8011b74:	68fb      	ldr	r3, [r7, #12]
 8011b76:	899b      	ldrh	r3, [r3, #12]
 8011b78:	461a      	mov	r2, r3
 8011b7a:	68bb      	ldr	r3, [r7, #8]
 8011b7c:	fbb3 f1f2 	udiv	r1, r3, r2
 8011b80:	fb02 f201 	mul.w	r2, r2, r1
 8011b84:	1a9b      	subs	r3, r3, r2
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	f040 809d 	bne.w	8011cc6 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	69db      	ldr	r3, [r3, #28]
 8011b90:	1c5a      	adds	r2, r3, #1
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	699b      	ldr	r3, [r3, #24]
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	d10b      	bne.n	8011bb6 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8011b9e:	68bb      	ldr	r3, [r7, #8]
 8011ba0:	095b      	lsrs	r3, r3, #5
 8011ba2:	68fa      	ldr	r2, [r7, #12]
 8011ba4:	8912      	ldrh	r2, [r2, #8]
 8011ba6:	4293      	cmp	r3, r2
 8011ba8:	f0c0 808d 	bcc.w	8011cc6 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	2200      	movs	r2, #0
 8011bb0:	61da      	str	r2, [r3, #28]
 8011bb2:	2304      	movs	r3, #4
 8011bb4:	e09a      	b.n	8011cec <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8011bb6:	68fb      	ldr	r3, [r7, #12]
 8011bb8:	899b      	ldrh	r3, [r3, #12]
 8011bba:	461a      	mov	r2, r3
 8011bbc:	68bb      	ldr	r3, [r7, #8]
 8011bbe:	fbb3 f3f2 	udiv	r3, r3, r2
 8011bc2:	68fa      	ldr	r2, [r7, #12]
 8011bc4:	8952      	ldrh	r2, [r2, #10]
 8011bc6:	3a01      	subs	r2, #1
 8011bc8:	4013      	ands	r3, r2
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	d17b      	bne.n	8011cc6 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8011bce:	687a      	ldr	r2, [r7, #4]
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	699b      	ldr	r3, [r3, #24]
 8011bd4:	4619      	mov	r1, r3
 8011bd6:	4610      	mov	r0, r2
 8011bd8:	f7ff fc11 	bl	80113fe <get_fat>
 8011bdc:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8011bde:	697b      	ldr	r3, [r7, #20]
 8011be0:	2b01      	cmp	r3, #1
 8011be2:	d801      	bhi.n	8011be8 <dir_next+0xa0>
 8011be4:	2302      	movs	r3, #2
 8011be6:	e081      	b.n	8011cec <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8011be8:	697b      	ldr	r3, [r7, #20]
 8011bea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011bee:	d101      	bne.n	8011bf4 <dir_next+0xac>
 8011bf0:	2301      	movs	r3, #1
 8011bf2:	e07b      	b.n	8011cec <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8011bf4:	68fb      	ldr	r3, [r7, #12]
 8011bf6:	69db      	ldr	r3, [r3, #28]
 8011bf8:	697a      	ldr	r2, [r7, #20]
 8011bfa:	429a      	cmp	r2, r3
 8011bfc:	d359      	bcc.n	8011cb2 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8011bfe:	683b      	ldr	r3, [r7, #0]
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	d104      	bne.n	8011c0e <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	2200      	movs	r2, #0
 8011c08:	61da      	str	r2, [r3, #28]
 8011c0a:	2304      	movs	r3, #4
 8011c0c:	e06e      	b.n	8011cec <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8011c0e:	687a      	ldr	r2, [r7, #4]
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	699b      	ldr	r3, [r3, #24]
 8011c14:	4619      	mov	r1, r3
 8011c16:	4610      	mov	r0, r2
 8011c18:	f7ff fe3d 	bl	8011896 <create_chain>
 8011c1c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8011c1e:	697b      	ldr	r3, [r7, #20]
 8011c20:	2b00      	cmp	r3, #0
 8011c22:	d101      	bne.n	8011c28 <dir_next+0xe0>
 8011c24:	2307      	movs	r3, #7
 8011c26:	e061      	b.n	8011cec <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8011c28:	697b      	ldr	r3, [r7, #20]
 8011c2a:	2b01      	cmp	r3, #1
 8011c2c:	d101      	bne.n	8011c32 <dir_next+0xea>
 8011c2e:	2302      	movs	r3, #2
 8011c30:	e05c      	b.n	8011cec <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8011c32:	697b      	ldr	r3, [r7, #20]
 8011c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c38:	d101      	bne.n	8011c3e <dir_next+0xf6>
 8011c3a:	2301      	movs	r3, #1
 8011c3c:	e056      	b.n	8011cec <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8011c3e:	68f8      	ldr	r0, [r7, #12]
 8011c40:	f7ff fadc 	bl	80111fc <sync_window>
 8011c44:	4603      	mov	r3, r0
 8011c46:	2b00      	cmp	r3, #0
 8011c48:	d001      	beq.n	8011c4e <dir_next+0x106>
 8011c4a:	2301      	movs	r3, #1
 8011c4c:	e04e      	b.n	8011cec <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8011c4e:	68fb      	ldr	r3, [r7, #12]
 8011c50:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8011c54:	68fb      	ldr	r3, [r7, #12]
 8011c56:	899b      	ldrh	r3, [r3, #12]
 8011c58:	461a      	mov	r2, r3
 8011c5a:	2100      	movs	r1, #0
 8011c5c:	f7ff f905 	bl	8010e6a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8011c60:	2300      	movs	r3, #0
 8011c62:	613b      	str	r3, [r7, #16]
 8011c64:	6979      	ldr	r1, [r7, #20]
 8011c66:	68f8      	ldr	r0, [r7, #12]
 8011c68:	f7ff fbaa 	bl	80113c0 <clust2sect>
 8011c6c:	4602      	mov	r2, r0
 8011c6e:	68fb      	ldr	r3, [r7, #12]
 8011c70:	635a      	str	r2, [r3, #52]	; 0x34
 8011c72:	e012      	b.n	8011c9a <dir_next+0x152>
						fs->wflag = 1;
 8011c74:	68fb      	ldr	r3, [r7, #12]
 8011c76:	2201      	movs	r2, #1
 8011c78:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8011c7a:	68f8      	ldr	r0, [r7, #12]
 8011c7c:	f7ff fabe 	bl	80111fc <sync_window>
 8011c80:	4603      	mov	r3, r0
 8011c82:	2b00      	cmp	r3, #0
 8011c84:	d001      	beq.n	8011c8a <dir_next+0x142>
 8011c86:	2301      	movs	r3, #1
 8011c88:	e030      	b.n	8011cec <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8011c8a:	693b      	ldr	r3, [r7, #16]
 8011c8c:	3301      	adds	r3, #1
 8011c8e:	613b      	str	r3, [r7, #16]
 8011c90:	68fb      	ldr	r3, [r7, #12]
 8011c92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011c94:	1c5a      	adds	r2, r3, #1
 8011c96:	68fb      	ldr	r3, [r7, #12]
 8011c98:	635a      	str	r2, [r3, #52]	; 0x34
 8011c9a:	68fb      	ldr	r3, [r7, #12]
 8011c9c:	895b      	ldrh	r3, [r3, #10]
 8011c9e:	461a      	mov	r2, r3
 8011ca0:	693b      	ldr	r3, [r7, #16]
 8011ca2:	4293      	cmp	r3, r2
 8011ca4:	d3e6      	bcc.n	8011c74 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8011ca6:	68fb      	ldr	r3, [r7, #12]
 8011ca8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011caa:	693b      	ldr	r3, [r7, #16]
 8011cac:	1ad2      	subs	r2, r2, r3
 8011cae:	68fb      	ldr	r3, [r7, #12]
 8011cb0:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	697a      	ldr	r2, [r7, #20]
 8011cb6:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8011cb8:	6979      	ldr	r1, [r7, #20]
 8011cba:	68f8      	ldr	r0, [r7, #12]
 8011cbc:	f7ff fb80 	bl	80113c0 <clust2sect>
 8011cc0:	4602      	mov	r2, r0
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	68ba      	ldr	r2, [r7, #8]
 8011cca:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8011ccc:	68fb      	ldr	r3, [r7, #12]
 8011cce:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011cd2:	68fb      	ldr	r3, [r7, #12]
 8011cd4:	899b      	ldrh	r3, [r3, #12]
 8011cd6:	461a      	mov	r2, r3
 8011cd8:	68bb      	ldr	r3, [r7, #8]
 8011cda:	fbb3 f0f2 	udiv	r0, r3, r2
 8011cde:	fb02 f200 	mul.w	r2, r2, r0
 8011ce2:	1a9b      	subs	r3, r3, r2
 8011ce4:	18ca      	adds	r2, r1, r3
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8011cea:	2300      	movs	r3, #0
}
 8011cec:	4618      	mov	r0, r3
 8011cee:	3718      	adds	r7, #24
 8011cf0:	46bd      	mov	sp, r7
 8011cf2:	bd80      	pop	{r7, pc}

08011cf4 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8011cf4:	b580      	push	{r7, lr}
 8011cf6:	b086      	sub	sp, #24
 8011cf8:	af00      	add	r7, sp, #0
 8011cfa:	6078      	str	r0, [r7, #4]
 8011cfc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	681b      	ldr	r3, [r3, #0]
 8011d02:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8011d04:	2100      	movs	r1, #0
 8011d06:	6878      	ldr	r0, [r7, #4]
 8011d08:	f7ff fe95 	bl	8011a36 <dir_sdi>
 8011d0c:	4603      	mov	r3, r0
 8011d0e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011d10:	7dfb      	ldrb	r3, [r7, #23]
 8011d12:	2b00      	cmp	r3, #0
 8011d14:	d12b      	bne.n	8011d6e <dir_alloc+0x7a>
		n = 0;
 8011d16:	2300      	movs	r3, #0
 8011d18:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	69db      	ldr	r3, [r3, #28]
 8011d1e:	4619      	mov	r1, r3
 8011d20:	68f8      	ldr	r0, [r7, #12]
 8011d22:	f7ff faaf 	bl	8011284 <move_window>
 8011d26:	4603      	mov	r3, r0
 8011d28:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8011d2a:	7dfb      	ldrb	r3, [r7, #23]
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	d11d      	bne.n	8011d6c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	6a1b      	ldr	r3, [r3, #32]
 8011d34:	781b      	ldrb	r3, [r3, #0]
 8011d36:	2be5      	cmp	r3, #229	; 0xe5
 8011d38:	d004      	beq.n	8011d44 <dir_alloc+0x50>
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	6a1b      	ldr	r3, [r3, #32]
 8011d3e:	781b      	ldrb	r3, [r3, #0]
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	d107      	bne.n	8011d54 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8011d44:	693b      	ldr	r3, [r7, #16]
 8011d46:	3301      	adds	r3, #1
 8011d48:	613b      	str	r3, [r7, #16]
 8011d4a:	693a      	ldr	r2, [r7, #16]
 8011d4c:	683b      	ldr	r3, [r7, #0]
 8011d4e:	429a      	cmp	r2, r3
 8011d50:	d102      	bne.n	8011d58 <dir_alloc+0x64>
 8011d52:	e00c      	b.n	8011d6e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8011d54:	2300      	movs	r3, #0
 8011d56:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8011d58:	2101      	movs	r1, #1
 8011d5a:	6878      	ldr	r0, [r7, #4]
 8011d5c:	f7ff fef4 	bl	8011b48 <dir_next>
 8011d60:	4603      	mov	r3, r0
 8011d62:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8011d64:	7dfb      	ldrb	r3, [r7, #23]
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	d0d7      	beq.n	8011d1a <dir_alloc+0x26>
 8011d6a:	e000      	b.n	8011d6e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8011d6c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8011d6e:	7dfb      	ldrb	r3, [r7, #23]
 8011d70:	2b04      	cmp	r3, #4
 8011d72:	d101      	bne.n	8011d78 <dir_alloc+0x84>
 8011d74:	2307      	movs	r3, #7
 8011d76:	75fb      	strb	r3, [r7, #23]
	return res;
 8011d78:	7dfb      	ldrb	r3, [r7, #23]
}
 8011d7a:	4618      	mov	r0, r3
 8011d7c:	3718      	adds	r7, #24
 8011d7e:	46bd      	mov	sp, r7
 8011d80:	bd80      	pop	{r7, pc}

08011d82 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8011d82:	b580      	push	{r7, lr}
 8011d84:	b084      	sub	sp, #16
 8011d86:	af00      	add	r7, sp, #0
 8011d88:	6078      	str	r0, [r7, #4]
 8011d8a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8011d8c:	683b      	ldr	r3, [r7, #0]
 8011d8e:	331a      	adds	r3, #26
 8011d90:	4618      	mov	r0, r3
 8011d92:	f7fe ffc7 	bl	8010d24 <ld_word>
 8011d96:	4603      	mov	r3, r0
 8011d98:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	781b      	ldrb	r3, [r3, #0]
 8011d9e:	2b03      	cmp	r3, #3
 8011da0:	d109      	bne.n	8011db6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8011da2:	683b      	ldr	r3, [r7, #0]
 8011da4:	3314      	adds	r3, #20
 8011da6:	4618      	mov	r0, r3
 8011da8:	f7fe ffbc 	bl	8010d24 <ld_word>
 8011dac:	4603      	mov	r3, r0
 8011dae:	041b      	lsls	r3, r3, #16
 8011db0:	68fa      	ldr	r2, [r7, #12]
 8011db2:	4313      	orrs	r3, r2
 8011db4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8011db6:	68fb      	ldr	r3, [r7, #12]
}
 8011db8:	4618      	mov	r0, r3
 8011dba:	3710      	adds	r7, #16
 8011dbc:	46bd      	mov	sp, r7
 8011dbe:	bd80      	pop	{r7, pc}

08011dc0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8011dc0:	b580      	push	{r7, lr}
 8011dc2:	b084      	sub	sp, #16
 8011dc4:	af00      	add	r7, sp, #0
 8011dc6:	60f8      	str	r0, [r7, #12]
 8011dc8:	60b9      	str	r1, [r7, #8]
 8011dca:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8011dcc:	68bb      	ldr	r3, [r7, #8]
 8011dce:	331a      	adds	r3, #26
 8011dd0:	687a      	ldr	r2, [r7, #4]
 8011dd2:	b292      	uxth	r2, r2
 8011dd4:	4611      	mov	r1, r2
 8011dd6:	4618      	mov	r0, r3
 8011dd8:	f7fe ffdf 	bl	8010d9a <st_word>
	if (fs->fs_type == FS_FAT32) {
 8011ddc:	68fb      	ldr	r3, [r7, #12]
 8011dde:	781b      	ldrb	r3, [r3, #0]
 8011de0:	2b03      	cmp	r3, #3
 8011de2:	d109      	bne.n	8011df8 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8011de4:	68bb      	ldr	r3, [r7, #8]
 8011de6:	f103 0214 	add.w	r2, r3, #20
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	0c1b      	lsrs	r3, r3, #16
 8011dee:	b29b      	uxth	r3, r3
 8011df0:	4619      	mov	r1, r3
 8011df2:	4610      	mov	r0, r2
 8011df4:	f7fe ffd1 	bl	8010d9a <st_word>
	}
}
 8011df8:	bf00      	nop
 8011dfa:	3710      	adds	r7, #16
 8011dfc:	46bd      	mov	sp, r7
 8011dfe:	bd80      	pop	{r7, pc}

08011e00 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8011e00:	b580      	push	{r7, lr}
 8011e02:	b086      	sub	sp, #24
 8011e04:	af00      	add	r7, sp, #0
 8011e06:	6078      	str	r0, [r7, #4]
 8011e08:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8011e0a:	2304      	movs	r3, #4
 8011e0c:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	681b      	ldr	r3, [r3, #0]
 8011e12:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8011e14:	e03c      	b.n	8011e90 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	69db      	ldr	r3, [r3, #28]
 8011e1a:	4619      	mov	r1, r3
 8011e1c:	6938      	ldr	r0, [r7, #16]
 8011e1e:	f7ff fa31 	bl	8011284 <move_window>
 8011e22:	4603      	mov	r3, r0
 8011e24:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8011e26:	7dfb      	ldrb	r3, [r7, #23]
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	d136      	bne.n	8011e9a <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	6a1b      	ldr	r3, [r3, #32]
 8011e30:	781b      	ldrb	r3, [r3, #0]
 8011e32:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8011e34:	7bfb      	ldrb	r3, [r7, #15]
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	d102      	bne.n	8011e40 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8011e3a:	2304      	movs	r3, #4
 8011e3c:	75fb      	strb	r3, [r7, #23]
 8011e3e:	e031      	b.n	8011ea4 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	6a1b      	ldr	r3, [r3, #32]
 8011e44:	330b      	adds	r3, #11
 8011e46:	781b      	ldrb	r3, [r3, #0]
 8011e48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011e4c:	73bb      	strb	r3, [r7, #14]
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	7bba      	ldrb	r2, [r7, #14]
 8011e52:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8011e54:	7bfb      	ldrb	r3, [r7, #15]
 8011e56:	2be5      	cmp	r3, #229	; 0xe5
 8011e58:	d011      	beq.n	8011e7e <dir_read+0x7e>
 8011e5a:	7bfb      	ldrb	r3, [r7, #15]
 8011e5c:	2b2e      	cmp	r3, #46	; 0x2e
 8011e5e:	d00e      	beq.n	8011e7e <dir_read+0x7e>
 8011e60:	7bbb      	ldrb	r3, [r7, #14]
 8011e62:	2b0f      	cmp	r3, #15
 8011e64:	d00b      	beq.n	8011e7e <dir_read+0x7e>
 8011e66:	7bbb      	ldrb	r3, [r7, #14]
 8011e68:	f023 0320 	bic.w	r3, r3, #32
 8011e6c:	2b08      	cmp	r3, #8
 8011e6e:	bf0c      	ite	eq
 8011e70:	2301      	moveq	r3, #1
 8011e72:	2300      	movne	r3, #0
 8011e74:	b2db      	uxtb	r3, r3
 8011e76:	461a      	mov	r2, r3
 8011e78:	683b      	ldr	r3, [r7, #0]
 8011e7a:	4293      	cmp	r3, r2
 8011e7c:	d00f      	beq.n	8011e9e <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8011e7e:	2100      	movs	r1, #0
 8011e80:	6878      	ldr	r0, [r7, #4]
 8011e82:	f7ff fe61 	bl	8011b48 <dir_next>
 8011e86:	4603      	mov	r3, r0
 8011e88:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8011e8a:	7dfb      	ldrb	r3, [r7, #23]
 8011e8c:	2b00      	cmp	r3, #0
 8011e8e:	d108      	bne.n	8011ea2 <dir_read+0xa2>
	while (dp->sect) {
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	69db      	ldr	r3, [r3, #28]
 8011e94:	2b00      	cmp	r3, #0
 8011e96:	d1be      	bne.n	8011e16 <dir_read+0x16>
 8011e98:	e004      	b.n	8011ea4 <dir_read+0xa4>
		if (res != FR_OK) break;
 8011e9a:	bf00      	nop
 8011e9c:	e002      	b.n	8011ea4 <dir_read+0xa4>
				break;
 8011e9e:	bf00      	nop
 8011ea0:	e000      	b.n	8011ea4 <dir_read+0xa4>
		if (res != FR_OK) break;
 8011ea2:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8011ea4:	7dfb      	ldrb	r3, [r7, #23]
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	d002      	beq.n	8011eb0 <dir_read+0xb0>
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	2200      	movs	r2, #0
 8011eae:	61da      	str	r2, [r3, #28]
	return res;
 8011eb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8011eb2:	4618      	mov	r0, r3
 8011eb4:	3718      	adds	r7, #24
 8011eb6:	46bd      	mov	sp, r7
 8011eb8:	bd80      	pop	{r7, pc}

08011eba <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8011eba:	b580      	push	{r7, lr}
 8011ebc:	b086      	sub	sp, #24
 8011ebe:	af00      	add	r7, sp, #0
 8011ec0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	681b      	ldr	r3, [r3, #0]
 8011ec6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8011ec8:	2100      	movs	r1, #0
 8011eca:	6878      	ldr	r0, [r7, #4]
 8011ecc:	f7ff fdb3 	bl	8011a36 <dir_sdi>
 8011ed0:	4603      	mov	r3, r0
 8011ed2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8011ed4:	7dfb      	ldrb	r3, [r7, #23]
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	d001      	beq.n	8011ede <dir_find+0x24>
 8011eda:	7dfb      	ldrb	r3, [r7, #23]
 8011edc:	e03e      	b.n	8011f5c <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	69db      	ldr	r3, [r3, #28]
 8011ee2:	4619      	mov	r1, r3
 8011ee4:	6938      	ldr	r0, [r7, #16]
 8011ee6:	f7ff f9cd 	bl	8011284 <move_window>
 8011eea:	4603      	mov	r3, r0
 8011eec:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8011eee:	7dfb      	ldrb	r3, [r7, #23]
 8011ef0:	2b00      	cmp	r3, #0
 8011ef2:	d12f      	bne.n	8011f54 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	6a1b      	ldr	r3, [r3, #32]
 8011ef8:	781b      	ldrb	r3, [r3, #0]
 8011efa:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8011efc:	7bfb      	ldrb	r3, [r7, #15]
 8011efe:	2b00      	cmp	r3, #0
 8011f00:	d102      	bne.n	8011f08 <dir_find+0x4e>
 8011f02:	2304      	movs	r3, #4
 8011f04:	75fb      	strb	r3, [r7, #23]
 8011f06:	e028      	b.n	8011f5a <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	6a1b      	ldr	r3, [r3, #32]
 8011f0c:	330b      	adds	r3, #11
 8011f0e:	781b      	ldrb	r3, [r3, #0]
 8011f10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011f14:	b2da      	uxtb	r2, r3
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	6a1b      	ldr	r3, [r3, #32]
 8011f1e:	330b      	adds	r3, #11
 8011f20:	781b      	ldrb	r3, [r3, #0]
 8011f22:	f003 0308 	and.w	r3, r3, #8
 8011f26:	2b00      	cmp	r3, #0
 8011f28:	d10a      	bne.n	8011f40 <dir_find+0x86>
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	6a18      	ldr	r0, [r3, #32]
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	3324      	adds	r3, #36	; 0x24
 8011f32:	220b      	movs	r2, #11
 8011f34:	4619      	mov	r1, r3
 8011f36:	f7fe ffb2 	bl	8010e9e <mem_cmp>
 8011f3a:	4603      	mov	r3, r0
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d00b      	beq.n	8011f58 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8011f40:	2100      	movs	r1, #0
 8011f42:	6878      	ldr	r0, [r7, #4]
 8011f44:	f7ff fe00 	bl	8011b48 <dir_next>
 8011f48:	4603      	mov	r3, r0
 8011f4a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8011f4c:	7dfb      	ldrb	r3, [r7, #23]
 8011f4e:	2b00      	cmp	r3, #0
 8011f50:	d0c5      	beq.n	8011ede <dir_find+0x24>
 8011f52:	e002      	b.n	8011f5a <dir_find+0xa0>
		if (res != FR_OK) break;
 8011f54:	bf00      	nop
 8011f56:	e000      	b.n	8011f5a <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8011f58:	bf00      	nop

	return res;
 8011f5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8011f5c:	4618      	mov	r0, r3
 8011f5e:	3718      	adds	r7, #24
 8011f60:	46bd      	mov	sp, r7
 8011f62:	bd80      	pop	{r7, pc}

08011f64 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8011f64:	b580      	push	{r7, lr}
 8011f66:	b084      	sub	sp, #16
 8011f68:	af00      	add	r7, sp, #0
 8011f6a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	681b      	ldr	r3, [r3, #0]
 8011f70:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8011f72:	2101      	movs	r1, #1
 8011f74:	6878      	ldr	r0, [r7, #4]
 8011f76:	f7ff febd 	bl	8011cf4 <dir_alloc>
 8011f7a:	4603      	mov	r3, r0
 8011f7c:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8011f7e:	7bfb      	ldrb	r3, [r7, #15]
 8011f80:	2b00      	cmp	r3, #0
 8011f82:	d11c      	bne.n	8011fbe <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	69db      	ldr	r3, [r3, #28]
 8011f88:	4619      	mov	r1, r3
 8011f8a:	68b8      	ldr	r0, [r7, #8]
 8011f8c:	f7ff f97a 	bl	8011284 <move_window>
 8011f90:	4603      	mov	r3, r0
 8011f92:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8011f94:	7bfb      	ldrb	r3, [r7, #15]
 8011f96:	2b00      	cmp	r3, #0
 8011f98:	d111      	bne.n	8011fbe <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	6a1b      	ldr	r3, [r3, #32]
 8011f9e:	2220      	movs	r2, #32
 8011fa0:	2100      	movs	r1, #0
 8011fa2:	4618      	mov	r0, r3
 8011fa4:	f7fe ff61 	bl	8010e6a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	6a18      	ldr	r0, [r3, #32]
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	3324      	adds	r3, #36	; 0x24
 8011fb0:	220b      	movs	r2, #11
 8011fb2:	4619      	mov	r1, r3
 8011fb4:	f7fe ff38 	bl	8010e28 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8011fb8:	68bb      	ldr	r3, [r7, #8]
 8011fba:	2201      	movs	r2, #1
 8011fbc:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8011fbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8011fc0:	4618      	mov	r0, r3
 8011fc2:	3710      	adds	r7, #16
 8011fc4:	46bd      	mov	sp, r7
 8011fc6:	bd80      	pop	{r7, pc}

08011fc8 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8011fc8:	b580      	push	{r7, lr}
 8011fca:	b084      	sub	sp, #16
 8011fcc:	af00      	add	r7, sp, #0
 8011fce:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	681b      	ldr	r3, [r3, #0]
 8011fd4:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	69db      	ldr	r3, [r3, #28]
 8011fda:	4619      	mov	r1, r3
 8011fdc:	68f8      	ldr	r0, [r7, #12]
 8011fde:	f7ff f951 	bl	8011284 <move_window>
 8011fe2:	4603      	mov	r3, r0
 8011fe4:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 8011fe6:	7afb      	ldrb	r3, [r7, #11]
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	d106      	bne.n	8011ffa <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	6a1b      	ldr	r3, [r3, #32]
 8011ff0:	22e5      	movs	r2, #229	; 0xe5
 8011ff2:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8011ff4:	68fb      	ldr	r3, [r7, #12]
 8011ff6:	2201      	movs	r2, #1
 8011ff8:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 8011ffa:	7afb      	ldrb	r3, [r7, #11]
}
 8011ffc:	4618      	mov	r0, r3
 8011ffe:	3710      	adds	r7, #16
 8012000:	46bd      	mov	sp, r7
 8012002:	bd80      	pop	{r7, pc}

08012004 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8012004:	b580      	push	{r7, lr}
 8012006:	b088      	sub	sp, #32
 8012008:	af00      	add	r7, sp, #0
 801200a:	6078      	str	r0, [r7, #4]
 801200c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 801200e:	683b      	ldr	r3, [r7, #0]
 8012010:	681b      	ldr	r3, [r3, #0]
 8012012:	60fb      	str	r3, [r7, #12]
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	3324      	adds	r3, #36	; 0x24
 8012018:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 801201a:	220b      	movs	r2, #11
 801201c:	2120      	movs	r1, #32
 801201e:	68b8      	ldr	r0, [r7, #8]
 8012020:	f7fe ff23 	bl	8010e6a <mem_set>
	si = i = 0; ni = 8;
 8012024:	2300      	movs	r3, #0
 8012026:	613b      	str	r3, [r7, #16]
 8012028:	693b      	ldr	r3, [r7, #16]
 801202a:	617b      	str	r3, [r7, #20]
 801202c:	2308      	movs	r3, #8
 801202e:	61bb      	str	r3, [r7, #24]
#if _FS_RPATH != 0
	if (p[si] == '.') { /* Is this a dot entry? */
 8012030:	68fa      	ldr	r2, [r7, #12]
 8012032:	697b      	ldr	r3, [r7, #20]
 8012034:	4413      	add	r3, r2
 8012036:	781b      	ldrb	r3, [r3, #0]
 8012038:	2b2e      	cmp	r3, #46	; 0x2e
 801203a:	d12f      	bne.n	801209c <create_name+0x98>
		for (;;) {
			c = (BYTE)p[si++];
 801203c:	697b      	ldr	r3, [r7, #20]
 801203e:	1c5a      	adds	r2, r3, #1
 8012040:	617a      	str	r2, [r7, #20]
 8012042:	68fa      	ldr	r2, [r7, #12]
 8012044:	4413      	add	r3, r2
 8012046:	781b      	ldrb	r3, [r3, #0]
 8012048:	77fb      	strb	r3, [r7, #31]
			if (c != '.' || si >= 3) break;
 801204a:	7ffb      	ldrb	r3, [r7, #31]
 801204c:	2b2e      	cmp	r3, #46	; 0x2e
 801204e:	d10a      	bne.n	8012066 <create_name+0x62>
 8012050:	697b      	ldr	r3, [r7, #20]
 8012052:	2b02      	cmp	r3, #2
 8012054:	d807      	bhi.n	8012066 <create_name+0x62>
			sfn[i++] = c;
 8012056:	693b      	ldr	r3, [r7, #16]
 8012058:	1c5a      	adds	r2, r3, #1
 801205a:	613a      	str	r2, [r7, #16]
 801205c:	68ba      	ldr	r2, [r7, #8]
 801205e:	4413      	add	r3, r2
 8012060:	7ffa      	ldrb	r2, [r7, #31]
 8012062:	701a      	strb	r2, [r3, #0]
			c = (BYTE)p[si++];
 8012064:	e7ea      	b.n	801203c <create_name+0x38>
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
 8012066:	7ffb      	ldrb	r3, [r7, #31]
 8012068:	2b2f      	cmp	r3, #47	; 0x2f
 801206a:	d007      	beq.n	801207c <create_name+0x78>
 801206c:	7ffb      	ldrb	r3, [r7, #31]
 801206e:	2b5c      	cmp	r3, #92	; 0x5c
 8012070:	d004      	beq.n	801207c <create_name+0x78>
 8012072:	7ffb      	ldrb	r3, [r7, #31]
 8012074:	2b20      	cmp	r3, #32
 8012076:	d901      	bls.n	801207c <create_name+0x78>
 8012078:	2306      	movs	r3, #6
 801207a:	e084      	b.n	8012186 <create_name+0x182>
		*path = p + si;								/* Return pointer to the next segment */
 801207c:	68fa      	ldr	r2, [r7, #12]
 801207e:	697b      	ldr	r3, [r7, #20]
 8012080:	441a      	add	r2, r3
 8012082:	683b      	ldr	r3, [r7, #0]
 8012084:	601a      	str	r2, [r3, #0]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
 8012086:	7ffb      	ldrb	r3, [r7, #31]
 8012088:	2b20      	cmp	r3, #32
 801208a:	d801      	bhi.n	8012090 <create_name+0x8c>
 801208c:	2224      	movs	r2, #36	; 0x24
 801208e:	e000      	b.n	8012092 <create_name+0x8e>
 8012090:	2220      	movs	r2, #32
 8012092:	68bb      	ldr	r3, [r7, #8]
 8012094:	330b      	adds	r3, #11
 8012096:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 8012098:	2300      	movs	r3, #0
 801209a:	e074      	b.n	8012186 <create_name+0x182>
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 801209c:	697b      	ldr	r3, [r7, #20]
 801209e:	1c5a      	adds	r2, r3, #1
 80120a0:	617a      	str	r2, [r7, #20]
 80120a2:	68fa      	ldr	r2, [r7, #12]
 80120a4:	4413      	add	r3, r2
 80120a6:	781b      	ldrb	r3, [r3, #0]
 80120a8:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80120aa:	7ffb      	ldrb	r3, [r7, #31]
 80120ac:	2b20      	cmp	r3, #32
 80120ae:	d94e      	bls.n	801214e <create_name+0x14a>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80120b0:	7ffb      	ldrb	r3, [r7, #31]
 80120b2:	2b2f      	cmp	r3, #47	; 0x2f
 80120b4:	d006      	beq.n	80120c4 <create_name+0xc0>
 80120b6:	7ffb      	ldrb	r3, [r7, #31]
 80120b8:	2b5c      	cmp	r3, #92	; 0x5c
 80120ba:	d110      	bne.n	80120de <create_name+0xda>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80120bc:	e002      	b.n	80120c4 <create_name+0xc0>
 80120be:	697b      	ldr	r3, [r7, #20]
 80120c0:	3301      	adds	r3, #1
 80120c2:	617b      	str	r3, [r7, #20]
 80120c4:	68fa      	ldr	r2, [r7, #12]
 80120c6:	697b      	ldr	r3, [r7, #20]
 80120c8:	4413      	add	r3, r2
 80120ca:	781b      	ldrb	r3, [r3, #0]
 80120cc:	2b2f      	cmp	r3, #47	; 0x2f
 80120ce:	d0f6      	beq.n	80120be <create_name+0xba>
 80120d0:	68fa      	ldr	r2, [r7, #12]
 80120d2:	697b      	ldr	r3, [r7, #20]
 80120d4:	4413      	add	r3, r2
 80120d6:	781b      	ldrb	r3, [r3, #0]
 80120d8:	2b5c      	cmp	r3, #92	; 0x5c
 80120da:	d0f0      	beq.n	80120be <create_name+0xba>
			break;
 80120dc:	e038      	b.n	8012150 <create_name+0x14c>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80120de:	7ffb      	ldrb	r3, [r7, #31]
 80120e0:	2b2e      	cmp	r3, #46	; 0x2e
 80120e2:	d003      	beq.n	80120ec <create_name+0xe8>
 80120e4:	693a      	ldr	r2, [r7, #16]
 80120e6:	69bb      	ldr	r3, [r7, #24]
 80120e8:	429a      	cmp	r2, r3
 80120ea:	d30c      	bcc.n	8012106 <create_name+0x102>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80120ec:	69bb      	ldr	r3, [r7, #24]
 80120ee:	2b0b      	cmp	r3, #11
 80120f0:	d002      	beq.n	80120f8 <create_name+0xf4>
 80120f2:	7ffb      	ldrb	r3, [r7, #31]
 80120f4:	2b2e      	cmp	r3, #46	; 0x2e
 80120f6:	d001      	beq.n	80120fc <create_name+0xf8>
 80120f8:	2306      	movs	r3, #6
 80120fa:	e044      	b.n	8012186 <create_name+0x182>
			i = 8; ni = 11;				/* Goto extension */
 80120fc:	2308      	movs	r3, #8
 80120fe:	613b      	str	r3, [r7, #16]
 8012100:	230b      	movs	r3, #11
 8012102:	61bb      	str	r3, [r7, #24]
			continue;
 8012104:	e022      	b.n	801214c <create_name+0x148>
		}
		if (c >= 0x80) {				/* Extended character? */
 8012106:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801210a:	2b00      	cmp	r3, #0
 801210c:	da04      	bge.n	8012118 <create_name+0x114>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 801210e:	7ffb      	ldrb	r3, [r7, #31]
 8012110:	3b80      	subs	r3, #128	; 0x80
 8012112:	4a1f      	ldr	r2, [pc, #124]	; (8012190 <create_name+0x18c>)
 8012114:	5cd3      	ldrb	r3, [r2, r3]
 8012116:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8012118:	7ffb      	ldrb	r3, [r7, #31]
 801211a:	4619      	mov	r1, r3
 801211c:	481d      	ldr	r0, [pc, #116]	; (8012194 <create_name+0x190>)
 801211e:	f7fe fee5 	bl	8010eec <chk_chr>
 8012122:	4603      	mov	r3, r0
 8012124:	2b00      	cmp	r3, #0
 8012126:	d001      	beq.n	801212c <create_name+0x128>
 8012128:	2306      	movs	r3, #6
 801212a:	e02c      	b.n	8012186 <create_name+0x182>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 801212c:	7ffb      	ldrb	r3, [r7, #31]
 801212e:	2b60      	cmp	r3, #96	; 0x60
 8012130:	d905      	bls.n	801213e <create_name+0x13a>
 8012132:	7ffb      	ldrb	r3, [r7, #31]
 8012134:	2b7a      	cmp	r3, #122	; 0x7a
 8012136:	d802      	bhi.n	801213e <create_name+0x13a>
 8012138:	7ffb      	ldrb	r3, [r7, #31]
 801213a:	3b20      	subs	r3, #32
 801213c:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 801213e:	693b      	ldr	r3, [r7, #16]
 8012140:	1c5a      	adds	r2, r3, #1
 8012142:	613a      	str	r2, [r7, #16]
 8012144:	68ba      	ldr	r2, [r7, #8]
 8012146:	4413      	add	r3, r2
 8012148:	7ffa      	ldrb	r2, [r7, #31]
 801214a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 801214c:	e7a6      	b.n	801209c <create_name+0x98>
		if (c <= ' ') break; 			/* Break if end of the path name */
 801214e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8012150:	68fa      	ldr	r2, [r7, #12]
 8012152:	697b      	ldr	r3, [r7, #20]
 8012154:	441a      	add	r2, r3
 8012156:	683b      	ldr	r3, [r7, #0]
 8012158:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 801215a:	693b      	ldr	r3, [r7, #16]
 801215c:	2b00      	cmp	r3, #0
 801215e:	d101      	bne.n	8012164 <create_name+0x160>
 8012160:	2306      	movs	r3, #6
 8012162:	e010      	b.n	8012186 <create_name+0x182>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8012164:	68bb      	ldr	r3, [r7, #8]
 8012166:	781b      	ldrb	r3, [r3, #0]
 8012168:	2be5      	cmp	r3, #229	; 0xe5
 801216a:	d102      	bne.n	8012172 <create_name+0x16e>
 801216c:	68bb      	ldr	r3, [r7, #8]
 801216e:	2205      	movs	r2, #5
 8012170:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8012172:	7ffb      	ldrb	r3, [r7, #31]
 8012174:	2b20      	cmp	r3, #32
 8012176:	d801      	bhi.n	801217c <create_name+0x178>
 8012178:	2204      	movs	r2, #4
 801217a:	e000      	b.n	801217e <create_name+0x17a>
 801217c:	2200      	movs	r2, #0
 801217e:	68bb      	ldr	r3, [r7, #8]
 8012180:	330b      	adds	r3, #11
 8012182:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8012184:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8012186:	4618      	mov	r0, r3
 8012188:	3720      	adds	r7, #32
 801218a:	46bd      	mov	sp, r7
 801218c:	bd80      	pop	{r7, pc}
 801218e:	bf00      	nop
 8012190:	080199f0 	.word	0x080199f0
 8012194:	080199a0 	.word	0x080199a0

08012198 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8012198:	b580      	push	{r7, lr}
 801219a:	b086      	sub	sp, #24
 801219c:	af00      	add	r7, sp, #0
 801219e:	6078      	str	r0, [r7, #4]
 80121a0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80121a6:	693b      	ldr	r3, [r7, #16]
 80121a8:	681b      	ldr	r3, [r3, #0]
 80121aa:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 80121ac:	683b      	ldr	r3, [r7, #0]
 80121ae:	781b      	ldrb	r3, [r3, #0]
 80121b0:	2b2f      	cmp	r3, #47	; 0x2f
 80121b2:	d00b      	beq.n	80121cc <follow_path+0x34>
 80121b4:	683b      	ldr	r3, [r7, #0]
 80121b6:	781b      	ldrb	r3, [r3, #0]
 80121b8:	2b5c      	cmp	r3, #92	; 0x5c
 80121ba:	d007      	beq.n	80121cc <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 80121bc:	68fb      	ldr	r3, [r7, #12]
 80121be:	699a      	ldr	r2, [r3, #24]
 80121c0:	693b      	ldr	r3, [r7, #16]
 80121c2:	609a      	str	r2, [r3, #8]
 80121c4:	e00d      	b.n	80121e2 <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80121c6:	683b      	ldr	r3, [r7, #0]
 80121c8:	3301      	adds	r3, #1
 80121ca:	603b      	str	r3, [r7, #0]
 80121cc:	683b      	ldr	r3, [r7, #0]
 80121ce:	781b      	ldrb	r3, [r3, #0]
 80121d0:	2b2f      	cmp	r3, #47	; 0x2f
 80121d2:	d0f8      	beq.n	80121c6 <follow_path+0x2e>
 80121d4:	683b      	ldr	r3, [r7, #0]
 80121d6:	781b      	ldrb	r3, [r3, #0]
 80121d8:	2b5c      	cmp	r3, #92	; 0x5c
 80121da:	d0f4      	beq.n	80121c6 <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 80121dc:	693b      	ldr	r3, [r7, #16]
 80121de:	2200      	movs	r2, #0
 80121e0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80121e2:	683b      	ldr	r3, [r7, #0]
 80121e4:	781b      	ldrb	r3, [r3, #0]
 80121e6:	2b1f      	cmp	r3, #31
 80121e8:	d80a      	bhi.n	8012200 <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	2280      	movs	r2, #128	; 0x80
 80121ee:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80121f2:	2100      	movs	r1, #0
 80121f4:	6878      	ldr	r0, [r7, #4]
 80121f6:	f7ff fc1e 	bl	8011a36 <dir_sdi>
 80121fa:	4603      	mov	r3, r0
 80121fc:	75fb      	strb	r3, [r7, #23]
 80121fe:	e05b      	b.n	80122b8 <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012200:	463b      	mov	r3, r7
 8012202:	4619      	mov	r1, r3
 8012204:	6878      	ldr	r0, [r7, #4]
 8012206:	f7ff fefd 	bl	8012004 <create_name>
 801220a:	4603      	mov	r3, r0
 801220c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801220e:	7dfb      	ldrb	r3, [r7, #23]
 8012210:	2b00      	cmp	r3, #0
 8012212:	d14c      	bne.n	80122ae <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 8012214:	6878      	ldr	r0, [r7, #4]
 8012216:	f7ff fe50 	bl	8011eba <dir_find>
 801221a:	4603      	mov	r3, r0
 801221c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801221e:	687b      	ldr	r3, [r7, #4]
 8012220:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012224:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8012226:	7dfb      	ldrb	r3, [r7, #23]
 8012228:	2b00      	cmp	r3, #0
 801222a:	d01b      	beq.n	8012264 <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 801222c:	7dfb      	ldrb	r3, [r7, #23]
 801222e:	2b04      	cmp	r3, #4
 8012230:	d13f      	bne.n	80122b2 <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 8012232:	7afb      	ldrb	r3, [r7, #11]
 8012234:	f003 0320 	and.w	r3, r3, #32
 8012238:	2b00      	cmp	r3, #0
 801223a:	d00b      	beq.n	8012254 <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 801223c:	7afb      	ldrb	r3, [r7, #11]
 801223e:	f003 0304 	and.w	r3, r3, #4
 8012242:	2b00      	cmp	r3, #0
 8012244:	d031      	beq.n	80122aa <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 8012246:	687b      	ldr	r3, [r7, #4]
 8012248:	2280      	movs	r2, #128	; 0x80
 801224a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 801224e:	2300      	movs	r3, #0
 8012250:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 8012252:	e02e      	b.n	80122b2 <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8012254:	7afb      	ldrb	r3, [r7, #11]
 8012256:	f003 0304 	and.w	r3, r3, #4
 801225a:	2b00      	cmp	r3, #0
 801225c:	d129      	bne.n	80122b2 <follow_path+0x11a>
 801225e:	2305      	movs	r3, #5
 8012260:	75fb      	strb	r3, [r7, #23]
				break;
 8012262:	e026      	b.n	80122b2 <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012264:	7afb      	ldrb	r3, [r7, #11]
 8012266:	f003 0304 	and.w	r3, r3, #4
 801226a:	2b00      	cmp	r3, #0
 801226c:	d123      	bne.n	80122b6 <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801226e:	693b      	ldr	r3, [r7, #16]
 8012270:	799b      	ldrb	r3, [r3, #6]
 8012272:	f003 0310 	and.w	r3, r3, #16
 8012276:	2b00      	cmp	r3, #0
 8012278:	d102      	bne.n	8012280 <follow_path+0xe8>
				res = FR_NO_PATH; break;
 801227a:	2305      	movs	r3, #5
 801227c:	75fb      	strb	r3, [r7, #23]
 801227e:	e01b      	b.n	80122b8 <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8012280:	68fb      	ldr	r3, [r7, #12]
 8012282:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	695b      	ldr	r3, [r3, #20]
 801228a:	68fa      	ldr	r2, [r7, #12]
 801228c:	8992      	ldrh	r2, [r2, #12]
 801228e:	fbb3 f0f2 	udiv	r0, r3, r2
 8012292:	fb02 f200 	mul.w	r2, r2, r0
 8012296:	1a9b      	subs	r3, r3, r2
 8012298:	440b      	add	r3, r1
 801229a:	4619      	mov	r1, r3
 801229c:	68f8      	ldr	r0, [r7, #12]
 801229e:	f7ff fd70 	bl	8011d82 <ld_clust>
 80122a2:	4602      	mov	r2, r0
 80122a4:	693b      	ldr	r3, [r7, #16]
 80122a6:	609a      	str	r2, [r3, #8]
 80122a8:	e7aa      	b.n	8012200 <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 80122aa:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80122ac:	e7a8      	b.n	8012200 <follow_path+0x68>
			if (res != FR_OK) break;
 80122ae:	bf00      	nop
 80122b0:	e002      	b.n	80122b8 <follow_path+0x120>
				break;
 80122b2:	bf00      	nop
 80122b4:	e000      	b.n	80122b8 <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80122b6:	bf00      	nop
			}
		}
	}

	return res;
 80122b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80122ba:	4618      	mov	r0, r3
 80122bc:	3718      	adds	r7, #24
 80122be:	46bd      	mov	sp, r7
 80122c0:	bd80      	pop	{r7, pc}

080122c2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80122c2:	b480      	push	{r7}
 80122c4:	b087      	sub	sp, #28
 80122c6:	af00      	add	r7, sp, #0
 80122c8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80122ca:	f04f 33ff 	mov.w	r3, #4294967295
 80122ce:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	681b      	ldr	r3, [r3, #0]
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	d031      	beq.n	801233c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	681b      	ldr	r3, [r3, #0]
 80122dc:	617b      	str	r3, [r7, #20]
 80122de:	e002      	b.n	80122e6 <get_ldnumber+0x24>
 80122e0:	697b      	ldr	r3, [r7, #20]
 80122e2:	3301      	adds	r3, #1
 80122e4:	617b      	str	r3, [r7, #20]
 80122e6:	697b      	ldr	r3, [r7, #20]
 80122e8:	781b      	ldrb	r3, [r3, #0]
 80122ea:	2b20      	cmp	r3, #32
 80122ec:	d903      	bls.n	80122f6 <get_ldnumber+0x34>
 80122ee:	697b      	ldr	r3, [r7, #20]
 80122f0:	781b      	ldrb	r3, [r3, #0]
 80122f2:	2b3a      	cmp	r3, #58	; 0x3a
 80122f4:	d1f4      	bne.n	80122e0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80122f6:	697b      	ldr	r3, [r7, #20]
 80122f8:	781b      	ldrb	r3, [r3, #0]
 80122fa:	2b3a      	cmp	r3, #58	; 0x3a
 80122fc:	d11c      	bne.n	8012338 <get_ldnumber+0x76>
			tp = *path;
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	681b      	ldr	r3, [r3, #0]
 8012302:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8012304:	68fb      	ldr	r3, [r7, #12]
 8012306:	1c5a      	adds	r2, r3, #1
 8012308:	60fa      	str	r2, [r7, #12]
 801230a:	781b      	ldrb	r3, [r3, #0]
 801230c:	3b30      	subs	r3, #48	; 0x30
 801230e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8012310:	68bb      	ldr	r3, [r7, #8]
 8012312:	2b09      	cmp	r3, #9
 8012314:	d80e      	bhi.n	8012334 <get_ldnumber+0x72>
 8012316:	68fa      	ldr	r2, [r7, #12]
 8012318:	697b      	ldr	r3, [r7, #20]
 801231a:	429a      	cmp	r2, r3
 801231c:	d10a      	bne.n	8012334 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801231e:	68bb      	ldr	r3, [r7, #8]
 8012320:	2b00      	cmp	r3, #0
 8012322:	d107      	bne.n	8012334 <get_ldnumber+0x72>
					vol = (int)i;
 8012324:	68bb      	ldr	r3, [r7, #8]
 8012326:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8012328:	697b      	ldr	r3, [r7, #20]
 801232a:	3301      	adds	r3, #1
 801232c:	617b      	str	r3, [r7, #20]
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	697a      	ldr	r2, [r7, #20]
 8012332:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8012334:	693b      	ldr	r3, [r7, #16]
 8012336:	e002      	b.n	801233e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8012338:	2300      	movs	r3, #0
 801233a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 801233c:	693b      	ldr	r3, [r7, #16]
}
 801233e:	4618      	mov	r0, r3
 8012340:	371c      	adds	r7, #28
 8012342:	46bd      	mov	sp, r7
 8012344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012348:	4770      	bx	lr
	...

0801234c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 801234c:	b580      	push	{r7, lr}
 801234e:	b082      	sub	sp, #8
 8012350:	af00      	add	r7, sp, #0
 8012352:	6078      	str	r0, [r7, #4]
 8012354:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	2200      	movs	r2, #0
 801235a:	70da      	strb	r2, [r3, #3]
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	f04f 32ff 	mov.w	r2, #4294967295
 8012362:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8012364:	6839      	ldr	r1, [r7, #0]
 8012366:	6878      	ldr	r0, [r7, #4]
 8012368:	f7fe ff8c 	bl	8011284 <move_window>
 801236c:	4603      	mov	r3, r0
 801236e:	2b00      	cmp	r3, #0
 8012370:	d001      	beq.n	8012376 <check_fs+0x2a>
 8012372:	2304      	movs	r3, #4
 8012374:	e038      	b.n	80123e8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	3338      	adds	r3, #56	; 0x38
 801237a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801237e:	4618      	mov	r0, r3
 8012380:	f7fe fcd0 	bl	8010d24 <ld_word>
 8012384:	4603      	mov	r3, r0
 8012386:	461a      	mov	r2, r3
 8012388:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801238c:	429a      	cmp	r2, r3
 801238e:	d001      	beq.n	8012394 <check_fs+0x48>
 8012390:	2303      	movs	r3, #3
 8012392:	e029      	b.n	80123e8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801239a:	2be9      	cmp	r3, #233	; 0xe9
 801239c:	d009      	beq.n	80123b2 <check_fs+0x66>
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80123a4:	2beb      	cmp	r3, #235	; 0xeb
 80123a6:	d11e      	bne.n	80123e6 <check_fs+0x9a>
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80123ae:	2b90      	cmp	r3, #144	; 0x90
 80123b0:	d119      	bne.n	80123e6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	3338      	adds	r3, #56	; 0x38
 80123b6:	3336      	adds	r3, #54	; 0x36
 80123b8:	4618      	mov	r0, r3
 80123ba:	f7fe fccb 	bl	8010d54 <ld_dword>
 80123be:	4603      	mov	r3, r0
 80123c0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80123c4:	4a0a      	ldr	r2, [pc, #40]	; (80123f0 <check_fs+0xa4>)
 80123c6:	4293      	cmp	r3, r2
 80123c8:	d101      	bne.n	80123ce <check_fs+0x82>
 80123ca:	2300      	movs	r3, #0
 80123cc:	e00c      	b.n	80123e8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	3338      	adds	r3, #56	; 0x38
 80123d2:	3352      	adds	r3, #82	; 0x52
 80123d4:	4618      	mov	r0, r3
 80123d6:	f7fe fcbd 	bl	8010d54 <ld_dword>
 80123da:	4602      	mov	r2, r0
 80123dc:	4b05      	ldr	r3, [pc, #20]	; (80123f4 <check_fs+0xa8>)
 80123de:	429a      	cmp	r2, r3
 80123e0:	d101      	bne.n	80123e6 <check_fs+0x9a>
 80123e2:	2300      	movs	r3, #0
 80123e4:	e000      	b.n	80123e8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80123e6:	2302      	movs	r3, #2
}
 80123e8:	4618      	mov	r0, r3
 80123ea:	3708      	adds	r7, #8
 80123ec:	46bd      	mov	sp, r7
 80123ee:	bd80      	pop	{r7, pc}
 80123f0:	00544146 	.word	0x00544146
 80123f4:	33544146 	.word	0x33544146

080123f8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80123f8:	b580      	push	{r7, lr}
 80123fa:	b096      	sub	sp, #88	; 0x58
 80123fc:	af00      	add	r7, sp, #0
 80123fe:	60f8      	str	r0, [r7, #12]
 8012400:	60b9      	str	r1, [r7, #8]
 8012402:	4613      	mov	r3, r2
 8012404:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8012406:	68bb      	ldr	r3, [r7, #8]
 8012408:	2200      	movs	r2, #0
 801240a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 801240c:	68f8      	ldr	r0, [r7, #12]
 801240e:	f7ff ff58 	bl	80122c2 <get_ldnumber>
 8012412:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8012414:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012416:	2b00      	cmp	r3, #0
 8012418:	da01      	bge.n	801241e <find_volume+0x26>
 801241a:	230b      	movs	r3, #11
 801241c:	e268      	b.n	80128f0 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801241e:	4ab0      	ldr	r2, [pc, #704]	; (80126e0 <find_volume+0x2e8>)
 8012420:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012422:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012426:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8012428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801242a:	2b00      	cmp	r3, #0
 801242c:	d101      	bne.n	8012432 <find_volume+0x3a>
 801242e:	230c      	movs	r3, #12
 8012430:	e25e      	b.n	80128f0 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8012432:	68bb      	ldr	r3, [r7, #8]
 8012434:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012436:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8012438:	79fb      	ldrb	r3, [r7, #7]
 801243a:	f023 0301 	bic.w	r3, r3, #1
 801243e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8012440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012442:	781b      	ldrb	r3, [r3, #0]
 8012444:	2b00      	cmp	r3, #0
 8012446:	d01a      	beq.n	801247e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8012448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801244a:	785b      	ldrb	r3, [r3, #1]
 801244c:	4618      	mov	r0, r3
 801244e:	f7fe fbcb 	bl	8010be8 <disk_status>
 8012452:	4603      	mov	r3, r0
 8012454:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8012458:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801245c:	f003 0301 	and.w	r3, r3, #1
 8012460:	2b00      	cmp	r3, #0
 8012462:	d10c      	bne.n	801247e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8012464:	79fb      	ldrb	r3, [r7, #7]
 8012466:	2b00      	cmp	r3, #0
 8012468:	d007      	beq.n	801247a <find_volume+0x82>
 801246a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801246e:	f003 0304 	and.w	r3, r3, #4
 8012472:	2b00      	cmp	r3, #0
 8012474:	d001      	beq.n	801247a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8012476:	230a      	movs	r3, #10
 8012478:	e23a      	b.n	80128f0 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 801247a:	2300      	movs	r3, #0
 801247c:	e238      	b.n	80128f0 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801247e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012480:	2200      	movs	r2, #0
 8012482:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8012484:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012486:	b2da      	uxtb	r2, r3
 8012488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801248a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 801248c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801248e:	785b      	ldrb	r3, [r3, #1]
 8012490:	4618      	mov	r0, r3
 8012492:	f7fe fbc3 	bl	8010c1c <disk_initialize>
 8012496:	4603      	mov	r3, r0
 8012498:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 801249c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80124a0:	f003 0301 	and.w	r3, r3, #1
 80124a4:	2b00      	cmp	r3, #0
 80124a6:	d001      	beq.n	80124ac <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80124a8:	2303      	movs	r3, #3
 80124aa:	e221      	b.n	80128f0 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80124ac:	79fb      	ldrb	r3, [r7, #7]
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	d007      	beq.n	80124c2 <find_volume+0xca>
 80124b2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80124b6:	f003 0304 	and.w	r3, r3, #4
 80124ba:	2b00      	cmp	r3, #0
 80124bc:	d001      	beq.n	80124c2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80124be:	230a      	movs	r3, #10
 80124c0:	e216      	b.n	80128f0 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80124c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124c4:	7858      	ldrb	r0, [r3, #1]
 80124c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124c8:	330c      	adds	r3, #12
 80124ca:	461a      	mov	r2, r3
 80124cc:	2102      	movs	r1, #2
 80124ce:	f7fe fc0b 	bl	8010ce8 <disk_ioctl>
 80124d2:	4603      	mov	r3, r0
 80124d4:	2b00      	cmp	r3, #0
 80124d6:	d001      	beq.n	80124dc <find_volume+0xe4>
 80124d8:	2301      	movs	r3, #1
 80124da:	e209      	b.n	80128f0 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80124dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124de:	899b      	ldrh	r3, [r3, #12]
 80124e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80124e4:	d80d      	bhi.n	8012502 <find_volume+0x10a>
 80124e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124e8:	899b      	ldrh	r3, [r3, #12]
 80124ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80124ee:	d308      	bcc.n	8012502 <find_volume+0x10a>
 80124f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124f2:	899b      	ldrh	r3, [r3, #12]
 80124f4:	461a      	mov	r2, r3
 80124f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124f8:	899b      	ldrh	r3, [r3, #12]
 80124fa:	3b01      	subs	r3, #1
 80124fc:	4013      	ands	r3, r2
 80124fe:	2b00      	cmp	r3, #0
 8012500:	d001      	beq.n	8012506 <find_volume+0x10e>
 8012502:	2301      	movs	r3, #1
 8012504:	e1f4      	b.n	80128f0 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8012506:	2300      	movs	r3, #0
 8012508:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801250a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801250c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801250e:	f7ff ff1d 	bl	801234c <check_fs>
 8012512:	4603      	mov	r3, r0
 8012514:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8012518:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801251c:	2b02      	cmp	r3, #2
 801251e:	d14b      	bne.n	80125b8 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012520:	2300      	movs	r3, #0
 8012522:	643b      	str	r3, [r7, #64]	; 0x40
 8012524:	e01f      	b.n	8012566 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8012526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012528:	f103 0238 	add.w	r2, r3, #56	; 0x38
 801252c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801252e:	011b      	lsls	r3, r3, #4
 8012530:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8012534:	4413      	add	r3, r2
 8012536:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8012538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801253a:	3304      	adds	r3, #4
 801253c:	781b      	ldrb	r3, [r3, #0]
 801253e:	2b00      	cmp	r3, #0
 8012540:	d006      	beq.n	8012550 <find_volume+0x158>
 8012542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012544:	3308      	adds	r3, #8
 8012546:	4618      	mov	r0, r3
 8012548:	f7fe fc04 	bl	8010d54 <ld_dword>
 801254c:	4602      	mov	r2, r0
 801254e:	e000      	b.n	8012552 <find_volume+0x15a>
 8012550:	2200      	movs	r2, #0
 8012552:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012554:	009b      	lsls	r3, r3, #2
 8012556:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801255a:	440b      	add	r3, r1
 801255c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8012560:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012562:	3301      	adds	r3, #1
 8012564:	643b      	str	r3, [r7, #64]	; 0x40
 8012566:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012568:	2b03      	cmp	r3, #3
 801256a:	d9dc      	bls.n	8012526 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801256c:	2300      	movs	r3, #0
 801256e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8012570:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012572:	2b00      	cmp	r3, #0
 8012574:	d002      	beq.n	801257c <find_volume+0x184>
 8012576:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012578:	3b01      	subs	r3, #1
 801257a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801257c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801257e:	009b      	lsls	r3, r3, #2
 8012580:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8012584:	4413      	add	r3, r2
 8012586:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801258a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801258c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801258e:	2b00      	cmp	r3, #0
 8012590:	d005      	beq.n	801259e <find_volume+0x1a6>
 8012592:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012594:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012596:	f7ff fed9 	bl	801234c <check_fs>
 801259a:	4603      	mov	r3, r0
 801259c:	e000      	b.n	80125a0 <find_volume+0x1a8>
 801259e:	2303      	movs	r3, #3
 80125a0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80125a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80125a8:	2b01      	cmp	r3, #1
 80125aa:	d905      	bls.n	80125b8 <find_volume+0x1c0>
 80125ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80125ae:	3301      	adds	r3, #1
 80125b0:	643b      	str	r3, [r7, #64]	; 0x40
 80125b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80125b4:	2b03      	cmp	r3, #3
 80125b6:	d9e1      	bls.n	801257c <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80125b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80125bc:	2b04      	cmp	r3, #4
 80125be:	d101      	bne.n	80125c4 <find_volume+0x1cc>
 80125c0:	2301      	movs	r3, #1
 80125c2:	e195      	b.n	80128f0 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80125c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80125c8:	2b01      	cmp	r3, #1
 80125ca:	d901      	bls.n	80125d0 <find_volume+0x1d8>
 80125cc:	230d      	movs	r3, #13
 80125ce:	e18f      	b.n	80128f0 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80125d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125d2:	3338      	adds	r3, #56	; 0x38
 80125d4:	330b      	adds	r3, #11
 80125d6:	4618      	mov	r0, r3
 80125d8:	f7fe fba4 	bl	8010d24 <ld_word>
 80125dc:	4603      	mov	r3, r0
 80125de:	461a      	mov	r2, r3
 80125e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125e2:	899b      	ldrh	r3, [r3, #12]
 80125e4:	429a      	cmp	r2, r3
 80125e6:	d001      	beq.n	80125ec <find_volume+0x1f4>
 80125e8:	230d      	movs	r3, #13
 80125ea:	e181      	b.n	80128f0 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80125ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125ee:	3338      	adds	r3, #56	; 0x38
 80125f0:	3316      	adds	r3, #22
 80125f2:	4618      	mov	r0, r3
 80125f4:	f7fe fb96 	bl	8010d24 <ld_word>
 80125f8:	4603      	mov	r3, r0
 80125fa:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80125fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80125fe:	2b00      	cmp	r3, #0
 8012600:	d106      	bne.n	8012610 <find_volume+0x218>
 8012602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012604:	3338      	adds	r3, #56	; 0x38
 8012606:	3324      	adds	r3, #36	; 0x24
 8012608:	4618      	mov	r0, r3
 801260a:	f7fe fba3 	bl	8010d54 <ld_dword>
 801260e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8012610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012612:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012614:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8012616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012618:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 801261c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801261e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8012620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012622:	789b      	ldrb	r3, [r3, #2]
 8012624:	2b01      	cmp	r3, #1
 8012626:	d005      	beq.n	8012634 <find_volume+0x23c>
 8012628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801262a:	789b      	ldrb	r3, [r3, #2]
 801262c:	2b02      	cmp	r3, #2
 801262e:	d001      	beq.n	8012634 <find_volume+0x23c>
 8012630:	230d      	movs	r3, #13
 8012632:	e15d      	b.n	80128f0 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8012634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012636:	789b      	ldrb	r3, [r3, #2]
 8012638:	461a      	mov	r2, r3
 801263a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801263c:	fb02 f303 	mul.w	r3, r2, r3
 8012640:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8012642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012644:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012648:	b29a      	uxth	r2, r3
 801264a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801264c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801264e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012650:	895b      	ldrh	r3, [r3, #10]
 8012652:	2b00      	cmp	r3, #0
 8012654:	d008      	beq.n	8012668 <find_volume+0x270>
 8012656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012658:	895b      	ldrh	r3, [r3, #10]
 801265a:	461a      	mov	r2, r3
 801265c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801265e:	895b      	ldrh	r3, [r3, #10]
 8012660:	3b01      	subs	r3, #1
 8012662:	4013      	ands	r3, r2
 8012664:	2b00      	cmp	r3, #0
 8012666:	d001      	beq.n	801266c <find_volume+0x274>
 8012668:	230d      	movs	r3, #13
 801266a:	e141      	b.n	80128f0 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 801266c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801266e:	3338      	adds	r3, #56	; 0x38
 8012670:	3311      	adds	r3, #17
 8012672:	4618      	mov	r0, r3
 8012674:	f7fe fb56 	bl	8010d24 <ld_word>
 8012678:	4603      	mov	r3, r0
 801267a:	461a      	mov	r2, r3
 801267c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801267e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8012680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012682:	891b      	ldrh	r3, [r3, #8]
 8012684:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012686:	8992      	ldrh	r2, [r2, #12]
 8012688:	0952      	lsrs	r2, r2, #5
 801268a:	b292      	uxth	r2, r2
 801268c:	fbb3 f1f2 	udiv	r1, r3, r2
 8012690:	fb02 f201 	mul.w	r2, r2, r1
 8012694:	1a9b      	subs	r3, r3, r2
 8012696:	b29b      	uxth	r3, r3
 8012698:	2b00      	cmp	r3, #0
 801269a:	d001      	beq.n	80126a0 <find_volume+0x2a8>
 801269c:	230d      	movs	r3, #13
 801269e:	e127      	b.n	80128f0 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80126a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126a2:	3338      	adds	r3, #56	; 0x38
 80126a4:	3313      	adds	r3, #19
 80126a6:	4618      	mov	r0, r3
 80126a8:	f7fe fb3c 	bl	8010d24 <ld_word>
 80126ac:	4603      	mov	r3, r0
 80126ae:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80126b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80126b2:	2b00      	cmp	r3, #0
 80126b4:	d106      	bne.n	80126c4 <find_volume+0x2cc>
 80126b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126b8:	3338      	adds	r3, #56	; 0x38
 80126ba:	3320      	adds	r3, #32
 80126bc:	4618      	mov	r0, r3
 80126be:	f7fe fb49 	bl	8010d54 <ld_dword>
 80126c2:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80126c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126c6:	3338      	adds	r3, #56	; 0x38
 80126c8:	330e      	adds	r3, #14
 80126ca:	4618      	mov	r0, r3
 80126cc:	f7fe fb2a 	bl	8010d24 <ld_word>
 80126d0:	4603      	mov	r3, r0
 80126d2:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80126d4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80126d6:	2b00      	cmp	r3, #0
 80126d8:	d104      	bne.n	80126e4 <find_volume+0x2ec>
 80126da:	230d      	movs	r3, #13
 80126dc:	e108      	b.n	80128f0 <find_volume+0x4f8>
 80126de:	bf00      	nop
 80126e0:	20041300 	.word	0x20041300

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80126e4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80126e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80126e8:	4413      	add	r3, r2
 80126ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80126ec:	8911      	ldrh	r1, [r2, #8]
 80126ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80126f0:	8992      	ldrh	r2, [r2, #12]
 80126f2:	0952      	lsrs	r2, r2, #5
 80126f4:	b292      	uxth	r2, r2
 80126f6:	fbb1 f2f2 	udiv	r2, r1, r2
 80126fa:	b292      	uxth	r2, r2
 80126fc:	4413      	add	r3, r2
 80126fe:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8012700:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012704:	429a      	cmp	r2, r3
 8012706:	d201      	bcs.n	801270c <find_volume+0x314>
 8012708:	230d      	movs	r3, #13
 801270a:	e0f1      	b.n	80128f0 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801270c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801270e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012710:	1ad3      	subs	r3, r2, r3
 8012712:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012714:	8952      	ldrh	r2, [r2, #10]
 8012716:	fbb3 f3f2 	udiv	r3, r3, r2
 801271a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801271c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801271e:	2b00      	cmp	r3, #0
 8012720:	d101      	bne.n	8012726 <find_volume+0x32e>
 8012722:	230d      	movs	r3, #13
 8012724:	e0e4      	b.n	80128f0 <find_volume+0x4f8>
		fmt = FS_FAT32;
 8012726:	2303      	movs	r3, #3
 8012728:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801272c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801272e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8012732:	4293      	cmp	r3, r2
 8012734:	d802      	bhi.n	801273c <find_volume+0x344>
 8012736:	2302      	movs	r3, #2
 8012738:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801273c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801273e:	f640 72f5 	movw	r2, #4085	; 0xff5
 8012742:	4293      	cmp	r3, r2
 8012744:	d802      	bhi.n	801274c <find_volume+0x354>
 8012746:	2301      	movs	r3, #1
 8012748:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801274c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801274e:	1c9a      	adds	r2, r3, #2
 8012750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012752:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8012754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012756:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012758:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801275a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801275c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801275e:	441a      	add	r2, r3
 8012760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012762:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8012764:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012768:	441a      	add	r2, r3
 801276a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801276c:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 801276e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012772:	2b03      	cmp	r3, #3
 8012774:	d11e      	bne.n	80127b4 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8012776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012778:	3338      	adds	r3, #56	; 0x38
 801277a:	332a      	adds	r3, #42	; 0x2a
 801277c:	4618      	mov	r0, r3
 801277e:	f7fe fad1 	bl	8010d24 <ld_word>
 8012782:	4603      	mov	r3, r0
 8012784:	2b00      	cmp	r3, #0
 8012786:	d001      	beq.n	801278c <find_volume+0x394>
 8012788:	230d      	movs	r3, #13
 801278a:	e0b1      	b.n	80128f0 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801278c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801278e:	891b      	ldrh	r3, [r3, #8]
 8012790:	2b00      	cmp	r3, #0
 8012792:	d001      	beq.n	8012798 <find_volume+0x3a0>
 8012794:	230d      	movs	r3, #13
 8012796:	e0ab      	b.n	80128f0 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8012798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801279a:	3338      	adds	r3, #56	; 0x38
 801279c:	332c      	adds	r3, #44	; 0x2c
 801279e:	4618      	mov	r0, r3
 80127a0:	f7fe fad8 	bl	8010d54 <ld_dword>
 80127a4:	4602      	mov	r2, r0
 80127a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127a8:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80127aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127ac:	69db      	ldr	r3, [r3, #28]
 80127ae:	009b      	lsls	r3, r3, #2
 80127b0:	647b      	str	r3, [r7, #68]	; 0x44
 80127b2:	e01f      	b.n	80127f4 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80127b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127b6:	891b      	ldrh	r3, [r3, #8]
 80127b8:	2b00      	cmp	r3, #0
 80127ba:	d101      	bne.n	80127c0 <find_volume+0x3c8>
 80127bc:	230d      	movs	r3, #13
 80127be:	e097      	b.n	80128f0 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80127c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80127c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80127c6:	441a      	add	r2, r3
 80127c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127ca:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80127cc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80127d0:	2b02      	cmp	r3, #2
 80127d2:	d103      	bne.n	80127dc <find_volume+0x3e4>
 80127d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127d6:	69db      	ldr	r3, [r3, #28]
 80127d8:	005b      	lsls	r3, r3, #1
 80127da:	e00a      	b.n	80127f2 <find_volume+0x3fa>
 80127dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127de:	69da      	ldr	r2, [r3, #28]
 80127e0:	4613      	mov	r3, r2
 80127e2:	005b      	lsls	r3, r3, #1
 80127e4:	4413      	add	r3, r2
 80127e6:	085a      	lsrs	r2, r3, #1
 80127e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127ea:	69db      	ldr	r3, [r3, #28]
 80127ec:	f003 0301 	and.w	r3, r3, #1
 80127f0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80127f2:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80127f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127f6:	6a1a      	ldr	r2, [r3, #32]
 80127f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127fa:	899b      	ldrh	r3, [r3, #12]
 80127fc:	4619      	mov	r1, r3
 80127fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012800:	440b      	add	r3, r1
 8012802:	3b01      	subs	r3, #1
 8012804:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012806:	8989      	ldrh	r1, [r1, #12]
 8012808:	fbb3 f3f1 	udiv	r3, r3, r1
 801280c:	429a      	cmp	r2, r3
 801280e:	d201      	bcs.n	8012814 <find_volume+0x41c>
 8012810:	230d      	movs	r3, #13
 8012812:	e06d      	b.n	80128f0 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8012814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012816:	f04f 32ff 	mov.w	r2, #4294967295
 801281a:	615a      	str	r2, [r3, #20]
 801281c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801281e:	695a      	ldr	r2, [r3, #20]
 8012820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012822:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8012824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012826:	2280      	movs	r2, #128	; 0x80
 8012828:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801282a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801282e:	2b03      	cmp	r3, #3
 8012830:	d149      	bne.n	80128c6 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8012832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012834:	3338      	adds	r3, #56	; 0x38
 8012836:	3330      	adds	r3, #48	; 0x30
 8012838:	4618      	mov	r0, r3
 801283a:	f7fe fa73 	bl	8010d24 <ld_word>
 801283e:	4603      	mov	r3, r0
 8012840:	2b01      	cmp	r3, #1
 8012842:	d140      	bne.n	80128c6 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8012844:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012846:	3301      	adds	r3, #1
 8012848:	4619      	mov	r1, r3
 801284a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801284c:	f7fe fd1a 	bl	8011284 <move_window>
 8012850:	4603      	mov	r3, r0
 8012852:	2b00      	cmp	r3, #0
 8012854:	d137      	bne.n	80128c6 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8012856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012858:	2200      	movs	r2, #0
 801285a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801285c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801285e:	3338      	adds	r3, #56	; 0x38
 8012860:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012864:	4618      	mov	r0, r3
 8012866:	f7fe fa5d 	bl	8010d24 <ld_word>
 801286a:	4603      	mov	r3, r0
 801286c:	461a      	mov	r2, r3
 801286e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8012872:	429a      	cmp	r2, r3
 8012874:	d127      	bne.n	80128c6 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8012876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012878:	3338      	adds	r3, #56	; 0x38
 801287a:	4618      	mov	r0, r3
 801287c:	f7fe fa6a 	bl	8010d54 <ld_dword>
 8012880:	4602      	mov	r2, r0
 8012882:	4b1d      	ldr	r3, [pc, #116]	; (80128f8 <find_volume+0x500>)
 8012884:	429a      	cmp	r2, r3
 8012886:	d11e      	bne.n	80128c6 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8012888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801288a:	3338      	adds	r3, #56	; 0x38
 801288c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8012890:	4618      	mov	r0, r3
 8012892:	f7fe fa5f 	bl	8010d54 <ld_dword>
 8012896:	4602      	mov	r2, r0
 8012898:	4b18      	ldr	r3, [pc, #96]	; (80128fc <find_volume+0x504>)
 801289a:	429a      	cmp	r2, r3
 801289c:	d113      	bne.n	80128c6 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801289e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128a0:	3338      	adds	r3, #56	; 0x38
 80128a2:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80128a6:	4618      	mov	r0, r3
 80128a8:	f7fe fa54 	bl	8010d54 <ld_dword>
 80128ac:	4602      	mov	r2, r0
 80128ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128b0:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80128b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128b4:	3338      	adds	r3, #56	; 0x38
 80128b6:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80128ba:	4618      	mov	r0, r3
 80128bc:	f7fe fa4a 	bl	8010d54 <ld_dword>
 80128c0:	4602      	mov	r2, r0
 80128c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128c4:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80128c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128c8:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80128cc:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80128ce:	4b0c      	ldr	r3, [pc, #48]	; (8012900 <find_volume+0x508>)
 80128d0:	881b      	ldrh	r3, [r3, #0]
 80128d2:	3301      	adds	r3, #1
 80128d4:	b29a      	uxth	r2, r3
 80128d6:	4b0a      	ldr	r3, [pc, #40]	; (8012900 <find_volume+0x508>)
 80128d8:	801a      	strh	r2, [r3, #0]
 80128da:	4b09      	ldr	r3, [pc, #36]	; (8012900 <find_volume+0x508>)
 80128dc:	881a      	ldrh	r2, [r3, #0]
 80128de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128e0:	80da      	strh	r2, [r3, #6]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 80128e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128e4:	2200      	movs	r2, #0
 80128e6:	619a      	str	r2, [r3, #24]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80128e8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80128ea:	f7fe fc63 	bl	80111b4 <clear_lock>
#endif
	return FR_OK;
 80128ee:	2300      	movs	r3, #0
}
 80128f0:	4618      	mov	r0, r3
 80128f2:	3758      	adds	r7, #88	; 0x58
 80128f4:	46bd      	mov	sp, r7
 80128f6:	bd80      	pop	{r7, pc}
 80128f8:	41615252 	.word	0x41615252
 80128fc:	61417272 	.word	0x61417272
 8012900:	20041304 	.word	0x20041304

08012904 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8012904:	b580      	push	{r7, lr}
 8012906:	b084      	sub	sp, #16
 8012908:	af00      	add	r7, sp, #0
 801290a:	6078      	str	r0, [r7, #4]
 801290c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801290e:	2309      	movs	r3, #9
 8012910:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	2b00      	cmp	r3, #0
 8012916:	d01c      	beq.n	8012952 <validate+0x4e>
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	681b      	ldr	r3, [r3, #0]
 801291c:	2b00      	cmp	r3, #0
 801291e:	d018      	beq.n	8012952 <validate+0x4e>
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	681b      	ldr	r3, [r3, #0]
 8012924:	781b      	ldrb	r3, [r3, #0]
 8012926:	2b00      	cmp	r3, #0
 8012928:	d013      	beq.n	8012952 <validate+0x4e>
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	889a      	ldrh	r2, [r3, #4]
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	681b      	ldr	r3, [r3, #0]
 8012932:	88db      	ldrh	r3, [r3, #6]
 8012934:	429a      	cmp	r2, r3
 8012936:	d10c      	bne.n	8012952 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	681b      	ldr	r3, [r3, #0]
 801293c:	785b      	ldrb	r3, [r3, #1]
 801293e:	4618      	mov	r0, r3
 8012940:	f7fe f952 	bl	8010be8 <disk_status>
 8012944:	4603      	mov	r3, r0
 8012946:	f003 0301 	and.w	r3, r3, #1
 801294a:	2b00      	cmp	r3, #0
 801294c:	d101      	bne.n	8012952 <validate+0x4e>
			res = FR_OK;
 801294e:	2300      	movs	r3, #0
 8012950:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8012952:	7bfb      	ldrb	r3, [r7, #15]
 8012954:	2b00      	cmp	r3, #0
 8012956:	d102      	bne.n	801295e <validate+0x5a>
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	681b      	ldr	r3, [r3, #0]
 801295c:	e000      	b.n	8012960 <validate+0x5c>
 801295e:	2300      	movs	r3, #0
 8012960:	683a      	ldr	r2, [r7, #0]
 8012962:	6013      	str	r3, [r2, #0]
	return res;
 8012964:	7bfb      	ldrb	r3, [r7, #15]
}
 8012966:	4618      	mov	r0, r3
 8012968:	3710      	adds	r7, #16
 801296a:	46bd      	mov	sp, r7
 801296c:	bd80      	pop	{r7, pc}
	...

08012970 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8012970:	b580      	push	{r7, lr}
 8012972:	b088      	sub	sp, #32
 8012974:	af00      	add	r7, sp, #0
 8012976:	60f8      	str	r0, [r7, #12]
 8012978:	60b9      	str	r1, [r7, #8]
 801297a:	4613      	mov	r3, r2
 801297c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801297e:	68bb      	ldr	r3, [r7, #8]
 8012980:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8012982:	f107 0310 	add.w	r3, r7, #16
 8012986:	4618      	mov	r0, r3
 8012988:	f7ff fc9b 	bl	80122c2 <get_ldnumber>
 801298c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801298e:	69fb      	ldr	r3, [r7, #28]
 8012990:	2b00      	cmp	r3, #0
 8012992:	da01      	bge.n	8012998 <f_mount+0x28>
 8012994:	230b      	movs	r3, #11
 8012996:	e02b      	b.n	80129f0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8012998:	4a17      	ldr	r2, [pc, #92]	; (80129f8 <f_mount+0x88>)
 801299a:	69fb      	ldr	r3, [r7, #28]
 801299c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80129a0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80129a2:	69bb      	ldr	r3, [r7, #24]
 80129a4:	2b00      	cmp	r3, #0
 80129a6:	d005      	beq.n	80129b4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80129a8:	69b8      	ldr	r0, [r7, #24]
 80129aa:	f7fe fc03 	bl	80111b4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80129ae:	69bb      	ldr	r3, [r7, #24]
 80129b0:	2200      	movs	r2, #0
 80129b2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80129b4:	68fb      	ldr	r3, [r7, #12]
 80129b6:	2b00      	cmp	r3, #0
 80129b8:	d002      	beq.n	80129c0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80129ba:	68fb      	ldr	r3, [r7, #12]
 80129bc:	2200      	movs	r2, #0
 80129be:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80129c0:	68fa      	ldr	r2, [r7, #12]
 80129c2:	490d      	ldr	r1, [pc, #52]	; (80129f8 <f_mount+0x88>)
 80129c4:	69fb      	ldr	r3, [r7, #28]
 80129c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80129ca:	68fb      	ldr	r3, [r7, #12]
 80129cc:	2b00      	cmp	r3, #0
 80129ce:	d002      	beq.n	80129d6 <f_mount+0x66>
 80129d0:	79fb      	ldrb	r3, [r7, #7]
 80129d2:	2b01      	cmp	r3, #1
 80129d4:	d001      	beq.n	80129da <f_mount+0x6a>
 80129d6:	2300      	movs	r3, #0
 80129d8:	e00a      	b.n	80129f0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80129da:	f107 010c 	add.w	r1, r7, #12
 80129de:	f107 0308 	add.w	r3, r7, #8
 80129e2:	2200      	movs	r2, #0
 80129e4:	4618      	mov	r0, r3
 80129e6:	f7ff fd07 	bl	80123f8 <find_volume>
 80129ea:	4603      	mov	r3, r0
 80129ec:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80129ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80129f0:	4618      	mov	r0, r3
 80129f2:	3720      	adds	r7, #32
 80129f4:	46bd      	mov	sp, r7
 80129f6:	bd80      	pop	{r7, pc}
 80129f8:	20041300 	.word	0x20041300

080129fc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80129fc:	b580      	push	{r7, lr}
 80129fe:	b098      	sub	sp, #96	; 0x60
 8012a00:	af00      	add	r7, sp, #0
 8012a02:	60f8      	str	r0, [r7, #12]
 8012a04:	60b9      	str	r1, [r7, #8]
 8012a06:	4613      	mov	r3, r2
 8012a08:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8012a0a:	68fb      	ldr	r3, [r7, #12]
 8012a0c:	2b00      	cmp	r3, #0
 8012a0e:	d101      	bne.n	8012a14 <f_open+0x18>
 8012a10:	2309      	movs	r3, #9
 8012a12:	e1ba      	b.n	8012d8a <f_open+0x38e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8012a14:	79fb      	ldrb	r3, [r7, #7]
 8012a16:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012a1a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8012a1c:	79fa      	ldrb	r2, [r7, #7]
 8012a1e:	f107 0110 	add.w	r1, r7, #16
 8012a22:	f107 0308 	add.w	r3, r7, #8
 8012a26:	4618      	mov	r0, r3
 8012a28:	f7ff fce6 	bl	80123f8 <find_volume>
 8012a2c:	4603      	mov	r3, r0
 8012a2e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8012a32:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012a36:	2b00      	cmp	r3, #0
 8012a38:	f040 819e 	bne.w	8012d78 <f_open+0x37c>
		dj.obj.fs = fs;
 8012a3c:	693b      	ldr	r3, [r7, #16]
 8012a3e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8012a40:	68ba      	ldr	r2, [r7, #8]
 8012a42:	f107 0314 	add.w	r3, r7, #20
 8012a46:	4611      	mov	r1, r2
 8012a48:	4618      	mov	r0, r3
 8012a4a:	f7ff fba5 	bl	8012198 <follow_path>
 8012a4e:	4603      	mov	r3, r0
 8012a50:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8012a54:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	d11a      	bne.n	8012a92 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8012a5c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8012a60:	b25b      	sxtb	r3, r3
 8012a62:	2b00      	cmp	r3, #0
 8012a64:	da03      	bge.n	8012a6e <f_open+0x72>
				res = FR_INVALID_NAME;
 8012a66:	2306      	movs	r3, #6
 8012a68:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012a6c:	e011      	b.n	8012a92 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8012a6e:	79fb      	ldrb	r3, [r7, #7]
 8012a70:	f023 0301 	bic.w	r3, r3, #1
 8012a74:	2b00      	cmp	r3, #0
 8012a76:	bf14      	ite	ne
 8012a78:	2301      	movne	r3, #1
 8012a7a:	2300      	moveq	r3, #0
 8012a7c:	b2db      	uxtb	r3, r3
 8012a7e:	461a      	mov	r2, r3
 8012a80:	f107 0314 	add.w	r3, r7, #20
 8012a84:	4611      	mov	r1, r2
 8012a86:	4618      	mov	r0, r3
 8012a88:	f7fe fa4c 	bl	8010f24 <chk_lock>
 8012a8c:	4603      	mov	r3, r0
 8012a8e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8012a92:	79fb      	ldrb	r3, [r7, #7]
 8012a94:	f003 031c 	and.w	r3, r3, #28
 8012a98:	2b00      	cmp	r3, #0
 8012a9a:	d07e      	beq.n	8012b9a <f_open+0x19e>
			if (res != FR_OK) {					/* No file, create new */
 8012a9c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012aa0:	2b00      	cmp	r3, #0
 8012aa2:	d017      	beq.n	8012ad4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8012aa4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012aa8:	2b04      	cmp	r3, #4
 8012aaa:	d10e      	bne.n	8012aca <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8012aac:	f7fe fa96 	bl	8010fdc <enq_lock>
 8012ab0:	4603      	mov	r3, r0
 8012ab2:	2b00      	cmp	r3, #0
 8012ab4:	d006      	beq.n	8012ac4 <f_open+0xc8>
 8012ab6:	f107 0314 	add.w	r3, r7, #20
 8012aba:	4618      	mov	r0, r3
 8012abc:	f7ff fa52 	bl	8011f64 <dir_register>
 8012ac0:	4603      	mov	r3, r0
 8012ac2:	e000      	b.n	8012ac6 <f_open+0xca>
 8012ac4:	2312      	movs	r3, #18
 8012ac6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8012aca:	79fb      	ldrb	r3, [r7, #7]
 8012acc:	f043 0308 	orr.w	r3, r3, #8
 8012ad0:	71fb      	strb	r3, [r7, #7]
 8012ad2:	e010      	b.n	8012af6 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8012ad4:	7ebb      	ldrb	r3, [r7, #26]
 8012ad6:	f003 0311 	and.w	r3, r3, #17
 8012ada:	2b00      	cmp	r3, #0
 8012adc:	d003      	beq.n	8012ae6 <f_open+0xea>
					res = FR_DENIED;
 8012ade:	2307      	movs	r3, #7
 8012ae0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012ae4:	e007      	b.n	8012af6 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8012ae6:	79fb      	ldrb	r3, [r7, #7]
 8012ae8:	f003 0304 	and.w	r3, r3, #4
 8012aec:	2b00      	cmp	r3, #0
 8012aee:	d002      	beq.n	8012af6 <f_open+0xfa>
 8012af0:	2308      	movs	r3, #8
 8012af2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8012af6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012afa:	2b00      	cmp	r3, #0
 8012afc:	d167      	bne.n	8012bce <f_open+0x1d2>
 8012afe:	79fb      	ldrb	r3, [r7, #7]
 8012b00:	f003 0308 	and.w	r3, r3, #8
 8012b04:	2b00      	cmp	r3, #0
 8012b06:	d062      	beq.n	8012bce <f_open+0x1d2>
				dw = GET_FATTIME();
 8012b08:	4ba2      	ldr	r3, [pc, #648]	; (8012d94 <f_open+0x398>)
 8012b0a:	653b      	str	r3, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8012b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b0e:	330e      	adds	r3, #14
 8012b10:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012b12:	4618      	mov	r0, r3
 8012b14:	f7fe f95c 	bl	8010dd0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8012b18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b1a:	3316      	adds	r3, #22
 8012b1c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012b1e:	4618      	mov	r0, r3
 8012b20:	f7fe f956 	bl	8010dd0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8012b24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b26:	330b      	adds	r3, #11
 8012b28:	2220      	movs	r2, #32
 8012b2a:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8012b2c:	693b      	ldr	r3, [r7, #16]
 8012b2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012b30:	4611      	mov	r1, r2
 8012b32:	4618      	mov	r0, r3
 8012b34:	f7ff f925 	bl	8011d82 <ld_clust>
 8012b38:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8012b3a:	693b      	ldr	r3, [r7, #16]
 8012b3c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8012b3e:	2200      	movs	r2, #0
 8012b40:	4618      	mov	r0, r3
 8012b42:	f7ff f93d 	bl	8011dc0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8012b46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b48:	331c      	adds	r3, #28
 8012b4a:	2100      	movs	r1, #0
 8012b4c:	4618      	mov	r0, r3
 8012b4e:	f7fe f93f 	bl	8010dd0 <st_dword>
					fs->wflag = 1;
 8012b52:	693b      	ldr	r3, [r7, #16]
 8012b54:	2201      	movs	r2, #1
 8012b56:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8012b58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012b5a:	2b00      	cmp	r3, #0
 8012b5c:	d037      	beq.n	8012bce <f_open+0x1d2>
						dw = fs->winsect;
 8012b5e:	693b      	ldr	r3, [r7, #16]
 8012b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012b62:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8012b64:	f107 0314 	add.w	r3, r7, #20
 8012b68:	2200      	movs	r2, #0
 8012b6a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8012b6c:	4618      	mov	r0, r3
 8012b6e:	f7fe fe2d 	bl	80117cc <remove_chain>
 8012b72:	4603      	mov	r3, r0
 8012b74:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8012b78:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012b7c:	2b00      	cmp	r3, #0
 8012b7e:	d126      	bne.n	8012bce <f_open+0x1d2>
							res = move_window(fs, dw);
 8012b80:	693b      	ldr	r3, [r7, #16]
 8012b82:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012b84:	4618      	mov	r0, r3
 8012b86:	f7fe fb7d 	bl	8011284 <move_window>
 8012b8a:	4603      	mov	r3, r0
 8012b8c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8012b90:	693b      	ldr	r3, [r7, #16]
 8012b92:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012b94:	3a01      	subs	r2, #1
 8012b96:	611a      	str	r2, [r3, #16]
 8012b98:	e019      	b.n	8012bce <f_open+0x1d2>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8012b9a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012b9e:	2b00      	cmp	r3, #0
 8012ba0:	d115      	bne.n	8012bce <f_open+0x1d2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8012ba2:	7ebb      	ldrb	r3, [r7, #26]
 8012ba4:	f003 0310 	and.w	r3, r3, #16
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	d003      	beq.n	8012bb4 <f_open+0x1b8>
					res = FR_NO_FILE;
 8012bac:	2304      	movs	r3, #4
 8012bae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012bb2:	e00c      	b.n	8012bce <f_open+0x1d2>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8012bb4:	79fb      	ldrb	r3, [r7, #7]
 8012bb6:	f003 0302 	and.w	r3, r3, #2
 8012bba:	2b00      	cmp	r3, #0
 8012bbc:	d007      	beq.n	8012bce <f_open+0x1d2>
 8012bbe:	7ebb      	ldrb	r3, [r7, #26]
 8012bc0:	f003 0301 	and.w	r3, r3, #1
 8012bc4:	2b00      	cmp	r3, #0
 8012bc6:	d002      	beq.n	8012bce <f_open+0x1d2>
						res = FR_DENIED;
 8012bc8:	2307      	movs	r3, #7
 8012bca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8012bce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012bd2:	2b00      	cmp	r3, #0
 8012bd4:	d128      	bne.n	8012c28 <f_open+0x22c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8012bd6:	79fb      	ldrb	r3, [r7, #7]
 8012bd8:	f003 0308 	and.w	r3, r3, #8
 8012bdc:	2b00      	cmp	r3, #0
 8012bde:	d003      	beq.n	8012be8 <f_open+0x1ec>
				mode |= FA_MODIFIED;
 8012be0:	79fb      	ldrb	r3, [r7, #7]
 8012be2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012be6:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8012be8:	693b      	ldr	r3, [r7, #16]
 8012bea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012bec:	68fb      	ldr	r3, [r7, #12]
 8012bee:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8012bf0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012bf2:	68fb      	ldr	r3, [r7, #12]
 8012bf4:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8012bf6:	79fb      	ldrb	r3, [r7, #7]
 8012bf8:	f023 0301 	bic.w	r3, r3, #1
 8012bfc:	2b00      	cmp	r3, #0
 8012bfe:	bf14      	ite	ne
 8012c00:	2301      	movne	r3, #1
 8012c02:	2300      	moveq	r3, #0
 8012c04:	b2db      	uxtb	r3, r3
 8012c06:	461a      	mov	r2, r3
 8012c08:	f107 0314 	add.w	r3, r7, #20
 8012c0c:	4611      	mov	r1, r2
 8012c0e:	4618      	mov	r0, r3
 8012c10:	f7fe fa06 	bl	8011020 <inc_lock>
 8012c14:	4602      	mov	r2, r0
 8012c16:	68fb      	ldr	r3, [r7, #12]
 8012c18:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8012c1a:	68fb      	ldr	r3, [r7, #12]
 8012c1c:	691b      	ldr	r3, [r3, #16]
 8012c1e:	2b00      	cmp	r3, #0
 8012c20:	d102      	bne.n	8012c28 <f_open+0x22c>
 8012c22:	2302      	movs	r3, #2
 8012c24:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8012c28:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012c2c:	2b00      	cmp	r3, #0
 8012c2e:	f040 80a3 	bne.w	8012d78 <f_open+0x37c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8012c32:	693b      	ldr	r3, [r7, #16]
 8012c34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012c36:	4611      	mov	r1, r2
 8012c38:	4618      	mov	r0, r3
 8012c3a:	f7ff f8a2 	bl	8011d82 <ld_clust>
 8012c3e:	4602      	mov	r2, r0
 8012c40:	68fb      	ldr	r3, [r7, #12]
 8012c42:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8012c44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012c46:	331c      	adds	r3, #28
 8012c48:	4618      	mov	r0, r3
 8012c4a:	f7fe f883 	bl	8010d54 <ld_dword>
 8012c4e:	4602      	mov	r2, r0
 8012c50:	68fb      	ldr	r3, [r7, #12]
 8012c52:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8012c54:	68fb      	ldr	r3, [r7, #12]
 8012c56:	2200      	movs	r2, #0
 8012c58:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8012c5a:	693a      	ldr	r2, [r7, #16]
 8012c5c:	68fb      	ldr	r3, [r7, #12]
 8012c5e:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8012c60:	693b      	ldr	r3, [r7, #16]
 8012c62:	88da      	ldrh	r2, [r3, #6]
 8012c64:	68fb      	ldr	r3, [r7, #12]
 8012c66:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8012c68:	68fb      	ldr	r3, [r7, #12]
 8012c6a:	79fa      	ldrb	r2, [r7, #7]
 8012c6c:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8012c6e:	68fb      	ldr	r3, [r7, #12]
 8012c70:	2200      	movs	r2, #0
 8012c72:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8012c74:	68fb      	ldr	r3, [r7, #12]
 8012c76:	2200      	movs	r2, #0
 8012c78:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8012c7a:	68fb      	ldr	r3, [r7, #12]
 8012c7c:	2200      	movs	r2, #0
 8012c7e:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8012c80:	68fb      	ldr	r3, [r7, #12]
 8012c82:	3330      	adds	r3, #48	; 0x30
 8012c84:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8012c88:	2100      	movs	r1, #0
 8012c8a:	4618      	mov	r0, r3
 8012c8c:	f7fe f8ed 	bl	8010e6a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8012c90:	79fb      	ldrb	r3, [r7, #7]
 8012c92:	f003 0320 	and.w	r3, r3, #32
 8012c96:	2b00      	cmp	r3, #0
 8012c98:	d06e      	beq.n	8012d78 <f_open+0x37c>
 8012c9a:	68fb      	ldr	r3, [r7, #12]
 8012c9c:	68db      	ldr	r3, [r3, #12]
 8012c9e:	2b00      	cmp	r3, #0
 8012ca0:	d06a      	beq.n	8012d78 <f_open+0x37c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8012ca2:	68fb      	ldr	r3, [r7, #12]
 8012ca4:	68da      	ldr	r2, [r3, #12]
 8012ca6:	68fb      	ldr	r3, [r7, #12]
 8012ca8:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8012caa:	693b      	ldr	r3, [r7, #16]
 8012cac:	895b      	ldrh	r3, [r3, #10]
 8012cae:	461a      	mov	r2, r3
 8012cb0:	693b      	ldr	r3, [r7, #16]
 8012cb2:	899b      	ldrh	r3, [r3, #12]
 8012cb4:	fb03 f302 	mul.w	r3, r3, r2
 8012cb8:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8012cba:	68fb      	ldr	r3, [r7, #12]
 8012cbc:	689b      	ldr	r3, [r3, #8]
 8012cbe:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8012cc0:	68fb      	ldr	r3, [r7, #12]
 8012cc2:	68db      	ldr	r3, [r3, #12]
 8012cc4:	657b      	str	r3, [r7, #84]	; 0x54
 8012cc6:	e016      	b.n	8012cf6 <f_open+0x2fa>
					clst = get_fat(&fp->obj, clst);
 8012cc8:	68fb      	ldr	r3, [r7, #12]
 8012cca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8012ccc:	4618      	mov	r0, r3
 8012cce:	f7fe fb96 	bl	80113fe <get_fat>
 8012cd2:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8012cd4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012cd6:	2b01      	cmp	r3, #1
 8012cd8:	d802      	bhi.n	8012ce0 <f_open+0x2e4>
 8012cda:	2302      	movs	r3, #2
 8012cdc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8012ce0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ce6:	d102      	bne.n	8012cee <f_open+0x2f2>
 8012ce8:	2301      	movs	r3, #1
 8012cea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8012cee:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012cf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012cf2:	1ad3      	subs	r3, r2, r3
 8012cf4:	657b      	str	r3, [r7, #84]	; 0x54
 8012cf6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012cfa:	2b00      	cmp	r3, #0
 8012cfc:	d103      	bne.n	8012d06 <f_open+0x30a>
 8012cfe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012d00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012d02:	429a      	cmp	r2, r3
 8012d04:	d8e0      	bhi.n	8012cc8 <f_open+0x2cc>
				}
				fp->clust = clst;
 8012d06:	68fb      	ldr	r3, [r7, #12]
 8012d08:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012d0a:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8012d0c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	d131      	bne.n	8012d78 <f_open+0x37c>
 8012d14:	693b      	ldr	r3, [r7, #16]
 8012d16:	899b      	ldrh	r3, [r3, #12]
 8012d18:	461a      	mov	r2, r3
 8012d1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012d1c:	fbb3 f1f2 	udiv	r1, r3, r2
 8012d20:	fb02 f201 	mul.w	r2, r2, r1
 8012d24:	1a9b      	subs	r3, r3, r2
 8012d26:	2b00      	cmp	r3, #0
 8012d28:	d026      	beq.n	8012d78 <f_open+0x37c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8012d2a:	693b      	ldr	r3, [r7, #16]
 8012d2c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8012d2e:	4618      	mov	r0, r3
 8012d30:	f7fe fb46 	bl	80113c0 <clust2sect>
 8012d34:	6478      	str	r0, [r7, #68]	; 0x44
 8012d36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012d38:	2b00      	cmp	r3, #0
 8012d3a:	d103      	bne.n	8012d44 <f_open+0x348>
						res = FR_INT_ERR;
 8012d3c:	2302      	movs	r3, #2
 8012d3e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012d42:	e019      	b.n	8012d78 <f_open+0x37c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8012d44:	693b      	ldr	r3, [r7, #16]
 8012d46:	899b      	ldrh	r3, [r3, #12]
 8012d48:	461a      	mov	r2, r3
 8012d4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012d4c:	fbb3 f2f2 	udiv	r2, r3, r2
 8012d50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012d52:	441a      	add	r2, r3
 8012d54:	68fb      	ldr	r3, [r7, #12]
 8012d56:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8012d58:	693b      	ldr	r3, [r7, #16]
 8012d5a:	7858      	ldrb	r0, [r3, #1]
 8012d5c:	68fb      	ldr	r3, [r7, #12]
 8012d5e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012d62:	68fb      	ldr	r3, [r7, #12]
 8012d64:	6a1a      	ldr	r2, [r3, #32]
 8012d66:	2301      	movs	r3, #1
 8012d68:	f7fd ff7e 	bl	8010c68 <disk_read>
 8012d6c:	4603      	mov	r3, r0
 8012d6e:	2b00      	cmp	r3, #0
 8012d70:	d002      	beq.n	8012d78 <f_open+0x37c>
 8012d72:	2301      	movs	r3, #1
 8012d74:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8012d78:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012d7c:	2b00      	cmp	r3, #0
 8012d7e:	d002      	beq.n	8012d86 <f_open+0x38a>
 8012d80:	68fb      	ldr	r3, [r7, #12]
 8012d82:	2200      	movs	r2, #0
 8012d84:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8012d86:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8012d8a:	4618      	mov	r0, r3
 8012d8c:	3760      	adds	r7, #96	; 0x60
 8012d8e:	46bd      	mov	sp, r7
 8012d90:	bd80      	pop	{r7, pc}
 8012d92:	bf00      	nop
 8012d94:	274a0000 	.word	0x274a0000

08012d98 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8012d98:	b580      	push	{r7, lr}
 8012d9a:	b08e      	sub	sp, #56	; 0x38
 8012d9c:	af00      	add	r7, sp, #0
 8012d9e:	60f8      	str	r0, [r7, #12]
 8012da0:	60b9      	str	r1, [r7, #8]
 8012da2:	607a      	str	r2, [r7, #4]
 8012da4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8012da6:	68bb      	ldr	r3, [r7, #8]
 8012da8:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8012daa:	683b      	ldr	r3, [r7, #0]
 8012dac:	2200      	movs	r2, #0
 8012dae:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8012db0:	68fb      	ldr	r3, [r7, #12]
 8012db2:	f107 0214 	add.w	r2, r7, #20
 8012db6:	4611      	mov	r1, r2
 8012db8:	4618      	mov	r0, r3
 8012dba:	f7ff fda3 	bl	8012904 <validate>
 8012dbe:	4603      	mov	r3, r0
 8012dc0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8012dc4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	d107      	bne.n	8012ddc <f_read+0x44>
 8012dcc:	68fb      	ldr	r3, [r7, #12]
 8012dce:	7d5b      	ldrb	r3, [r3, #21]
 8012dd0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012dd4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012dd8:	2b00      	cmp	r3, #0
 8012dda:	d002      	beq.n	8012de2 <f_read+0x4a>
 8012ddc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012de0:	e135      	b.n	801304e <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8012de2:	68fb      	ldr	r3, [r7, #12]
 8012de4:	7d1b      	ldrb	r3, [r3, #20]
 8012de6:	f003 0301 	and.w	r3, r3, #1
 8012dea:	2b00      	cmp	r3, #0
 8012dec:	d101      	bne.n	8012df2 <f_read+0x5a>
 8012dee:	2307      	movs	r3, #7
 8012df0:	e12d      	b.n	801304e <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8012df2:	68fb      	ldr	r3, [r7, #12]
 8012df4:	68da      	ldr	r2, [r3, #12]
 8012df6:	68fb      	ldr	r3, [r7, #12]
 8012df8:	699b      	ldr	r3, [r3, #24]
 8012dfa:	1ad3      	subs	r3, r2, r3
 8012dfc:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8012dfe:	687a      	ldr	r2, [r7, #4]
 8012e00:	6a3b      	ldr	r3, [r7, #32]
 8012e02:	429a      	cmp	r2, r3
 8012e04:	f240 811e 	bls.w	8013044 <f_read+0x2ac>
 8012e08:	6a3b      	ldr	r3, [r7, #32]
 8012e0a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8012e0c:	e11a      	b.n	8013044 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8012e0e:	68fb      	ldr	r3, [r7, #12]
 8012e10:	699b      	ldr	r3, [r3, #24]
 8012e12:	697a      	ldr	r2, [r7, #20]
 8012e14:	8992      	ldrh	r2, [r2, #12]
 8012e16:	fbb3 f1f2 	udiv	r1, r3, r2
 8012e1a:	fb02 f201 	mul.w	r2, r2, r1
 8012e1e:	1a9b      	subs	r3, r3, r2
 8012e20:	2b00      	cmp	r3, #0
 8012e22:	f040 80d5 	bne.w	8012fd0 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8012e26:	68fb      	ldr	r3, [r7, #12]
 8012e28:	699b      	ldr	r3, [r3, #24]
 8012e2a:	697a      	ldr	r2, [r7, #20]
 8012e2c:	8992      	ldrh	r2, [r2, #12]
 8012e2e:	fbb3 f3f2 	udiv	r3, r3, r2
 8012e32:	697a      	ldr	r2, [r7, #20]
 8012e34:	8952      	ldrh	r2, [r2, #10]
 8012e36:	3a01      	subs	r2, #1
 8012e38:	4013      	ands	r3, r2
 8012e3a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8012e3c:	69fb      	ldr	r3, [r7, #28]
 8012e3e:	2b00      	cmp	r3, #0
 8012e40:	d12f      	bne.n	8012ea2 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8012e42:	68fb      	ldr	r3, [r7, #12]
 8012e44:	699b      	ldr	r3, [r3, #24]
 8012e46:	2b00      	cmp	r3, #0
 8012e48:	d103      	bne.n	8012e52 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8012e4a:	68fb      	ldr	r3, [r7, #12]
 8012e4c:	689b      	ldr	r3, [r3, #8]
 8012e4e:	633b      	str	r3, [r7, #48]	; 0x30
 8012e50:	e013      	b.n	8012e7a <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8012e52:	68fb      	ldr	r3, [r7, #12]
 8012e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e56:	2b00      	cmp	r3, #0
 8012e58:	d007      	beq.n	8012e6a <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8012e5a:	68fb      	ldr	r3, [r7, #12]
 8012e5c:	699b      	ldr	r3, [r3, #24]
 8012e5e:	4619      	mov	r1, r3
 8012e60:	68f8      	ldr	r0, [r7, #12]
 8012e62:	f7fe fdb0 	bl	80119c6 <clmt_clust>
 8012e66:	6338      	str	r0, [r7, #48]	; 0x30
 8012e68:	e007      	b.n	8012e7a <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8012e6a:	68fa      	ldr	r2, [r7, #12]
 8012e6c:	68fb      	ldr	r3, [r7, #12]
 8012e6e:	69db      	ldr	r3, [r3, #28]
 8012e70:	4619      	mov	r1, r3
 8012e72:	4610      	mov	r0, r2
 8012e74:	f7fe fac3 	bl	80113fe <get_fat>
 8012e78:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8012e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e7c:	2b01      	cmp	r3, #1
 8012e7e:	d804      	bhi.n	8012e8a <f_read+0xf2>
 8012e80:	68fb      	ldr	r3, [r7, #12]
 8012e82:	2202      	movs	r2, #2
 8012e84:	755a      	strb	r2, [r3, #21]
 8012e86:	2302      	movs	r3, #2
 8012e88:	e0e1      	b.n	801304e <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8012e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012e90:	d104      	bne.n	8012e9c <f_read+0x104>
 8012e92:	68fb      	ldr	r3, [r7, #12]
 8012e94:	2201      	movs	r2, #1
 8012e96:	755a      	strb	r2, [r3, #21]
 8012e98:	2301      	movs	r3, #1
 8012e9a:	e0d8      	b.n	801304e <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8012e9c:	68fb      	ldr	r3, [r7, #12]
 8012e9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012ea0:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8012ea2:	697a      	ldr	r2, [r7, #20]
 8012ea4:	68fb      	ldr	r3, [r7, #12]
 8012ea6:	69db      	ldr	r3, [r3, #28]
 8012ea8:	4619      	mov	r1, r3
 8012eaa:	4610      	mov	r0, r2
 8012eac:	f7fe fa88 	bl	80113c0 <clust2sect>
 8012eb0:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8012eb2:	69bb      	ldr	r3, [r7, #24]
 8012eb4:	2b00      	cmp	r3, #0
 8012eb6:	d104      	bne.n	8012ec2 <f_read+0x12a>
 8012eb8:	68fb      	ldr	r3, [r7, #12]
 8012eba:	2202      	movs	r2, #2
 8012ebc:	755a      	strb	r2, [r3, #21]
 8012ebe:	2302      	movs	r3, #2
 8012ec0:	e0c5      	b.n	801304e <f_read+0x2b6>
			sect += csect;
 8012ec2:	69ba      	ldr	r2, [r7, #24]
 8012ec4:	69fb      	ldr	r3, [r7, #28]
 8012ec6:	4413      	add	r3, r2
 8012ec8:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8012eca:	697b      	ldr	r3, [r7, #20]
 8012ecc:	899b      	ldrh	r3, [r3, #12]
 8012ece:	461a      	mov	r2, r3
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	fbb3 f3f2 	udiv	r3, r3, r2
 8012ed6:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8012ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	d041      	beq.n	8012f62 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8012ede:	69fa      	ldr	r2, [r7, #28]
 8012ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ee2:	4413      	add	r3, r2
 8012ee4:	697a      	ldr	r2, [r7, #20]
 8012ee6:	8952      	ldrh	r2, [r2, #10]
 8012ee8:	4293      	cmp	r3, r2
 8012eea:	d905      	bls.n	8012ef8 <f_read+0x160>
					cc = fs->csize - csect;
 8012eec:	697b      	ldr	r3, [r7, #20]
 8012eee:	895b      	ldrh	r3, [r3, #10]
 8012ef0:	461a      	mov	r2, r3
 8012ef2:	69fb      	ldr	r3, [r7, #28]
 8012ef4:	1ad3      	subs	r3, r2, r3
 8012ef6:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012ef8:	697b      	ldr	r3, [r7, #20]
 8012efa:	7858      	ldrb	r0, [r3, #1]
 8012efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012efe:	69ba      	ldr	r2, [r7, #24]
 8012f00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012f02:	f7fd feb1 	bl	8010c68 <disk_read>
 8012f06:	4603      	mov	r3, r0
 8012f08:	2b00      	cmp	r3, #0
 8012f0a:	d004      	beq.n	8012f16 <f_read+0x17e>
 8012f0c:	68fb      	ldr	r3, [r7, #12]
 8012f0e:	2201      	movs	r2, #1
 8012f10:	755a      	strb	r2, [r3, #21]
 8012f12:	2301      	movs	r3, #1
 8012f14:	e09b      	b.n	801304e <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8012f16:	68fb      	ldr	r3, [r7, #12]
 8012f18:	7d1b      	ldrb	r3, [r3, #20]
 8012f1a:	b25b      	sxtb	r3, r3
 8012f1c:	2b00      	cmp	r3, #0
 8012f1e:	da18      	bge.n	8012f52 <f_read+0x1ba>
 8012f20:	68fb      	ldr	r3, [r7, #12]
 8012f22:	6a1a      	ldr	r2, [r3, #32]
 8012f24:	69bb      	ldr	r3, [r7, #24]
 8012f26:	1ad3      	subs	r3, r2, r3
 8012f28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012f2a:	429a      	cmp	r2, r3
 8012f2c:	d911      	bls.n	8012f52 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8012f2e:	68fb      	ldr	r3, [r7, #12]
 8012f30:	6a1a      	ldr	r2, [r3, #32]
 8012f32:	69bb      	ldr	r3, [r7, #24]
 8012f34:	1ad3      	subs	r3, r2, r3
 8012f36:	697a      	ldr	r2, [r7, #20]
 8012f38:	8992      	ldrh	r2, [r2, #12]
 8012f3a:	fb02 f303 	mul.w	r3, r2, r3
 8012f3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012f40:	18d0      	adds	r0, r2, r3
 8012f42:	68fb      	ldr	r3, [r7, #12]
 8012f44:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012f48:	697b      	ldr	r3, [r7, #20]
 8012f4a:	899b      	ldrh	r3, [r3, #12]
 8012f4c:	461a      	mov	r2, r3
 8012f4e:	f7fd ff6b 	bl	8010e28 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8012f52:	697b      	ldr	r3, [r7, #20]
 8012f54:	899b      	ldrh	r3, [r3, #12]
 8012f56:	461a      	mov	r2, r3
 8012f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f5a:	fb02 f303 	mul.w	r3, r2, r3
 8012f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8012f60:	e05c      	b.n	801301c <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8012f62:	68fb      	ldr	r3, [r7, #12]
 8012f64:	6a1b      	ldr	r3, [r3, #32]
 8012f66:	69ba      	ldr	r2, [r7, #24]
 8012f68:	429a      	cmp	r2, r3
 8012f6a:	d02e      	beq.n	8012fca <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8012f6c:	68fb      	ldr	r3, [r7, #12]
 8012f6e:	7d1b      	ldrb	r3, [r3, #20]
 8012f70:	b25b      	sxtb	r3, r3
 8012f72:	2b00      	cmp	r3, #0
 8012f74:	da18      	bge.n	8012fa8 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012f76:	697b      	ldr	r3, [r7, #20]
 8012f78:	7858      	ldrb	r0, [r3, #1]
 8012f7a:	68fb      	ldr	r3, [r7, #12]
 8012f7c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012f80:	68fb      	ldr	r3, [r7, #12]
 8012f82:	6a1a      	ldr	r2, [r3, #32]
 8012f84:	2301      	movs	r3, #1
 8012f86:	f7fd fe8f 	bl	8010ca8 <disk_write>
 8012f8a:	4603      	mov	r3, r0
 8012f8c:	2b00      	cmp	r3, #0
 8012f8e:	d004      	beq.n	8012f9a <f_read+0x202>
 8012f90:	68fb      	ldr	r3, [r7, #12]
 8012f92:	2201      	movs	r2, #1
 8012f94:	755a      	strb	r2, [r3, #21]
 8012f96:	2301      	movs	r3, #1
 8012f98:	e059      	b.n	801304e <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8012f9a:	68fb      	ldr	r3, [r7, #12]
 8012f9c:	7d1b      	ldrb	r3, [r3, #20]
 8012f9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012fa2:	b2da      	uxtb	r2, r3
 8012fa4:	68fb      	ldr	r3, [r7, #12]
 8012fa6:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8012fa8:	697b      	ldr	r3, [r7, #20]
 8012faa:	7858      	ldrb	r0, [r3, #1]
 8012fac:	68fb      	ldr	r3, [r7, #12]
 8012fae:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012fb2:	2301      	movs	r3, #1
 8012fb4:	69ba      	ldr	r2, [r7, #24]
 8012fb6:	f7fd fe57 	bl	8010c68 <disk_read>
 8012fba:	4603      	mov	r3, r0
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	d004      	beq.n	8012fca <f_read+0x232>
 8012fc0:	68fb      	ldr	r3, [r7, #12]
 8012fc2:	2201      	movs	r2, #1
 8012fc4:	755a      	strb	r2, [r3, #21]
 8012fc6:	2301      	movs	r3, #1
 8012fc8:	e041      	b.n	801304e <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8012fca:	68fb      	ldr	r3, [r7, #12]
 8012fcc:	69ba      	ldr	r2, [r7, #24]
 8012fce:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8012fd0:	697b      	ldr	r3, [r7, #20]
 8012fd2:	899b      	ldrh	r3, [r3, #12]
 8012fd4:	4618      	mov	r0, r3
 8012fd6:	68fb      	ldr	r3, [r7, #12]
 8012fd8:	699b      	ldr	r3, [r3, #24]
 8012fda:	697a      	ldr	r2, [r7, #20]
 8012fdc:	8992      	ldrh	r2, [r2, #12]
 8012fde:	fbb3 f1f2 	udiv	r1, r3, r2
 8012fe2:	fb02 f201 	mul.w	r2, r2, r1
 8012fe6:	1a9b      	subs	r3, r3, r2
 8012fe8:	1ac3      	subs	r3, r0, r3
 8012fea:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8012fec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012fee:	687b      	ldr	r3, [r7, #4]
 8012ff0:	429a      	cmp	r2, r3
 8012ff2:	d901      	bls.n	8012ff8 <f_read+0x260>
 8012ff4:	687b      	ldr	r3, [r7, #4]
 8012ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8012ff8:	68fb      	ldr	r3, [r7, #12]
 8012ffa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012ffe:	68fb      	ldr	r3, [r7, #12]
 8013000:	699b      	ldr	r3, [r3, #24]
 8013002:	697a      	ldr	r2, [r7, #20]
 8013004:	8992      	ldrh	r2, [r2, #12]
 8013006:	fbb3 f0f2 	udiv	r0, r3, r2
 801300a:	fb02 f200 	mul.w	r2, r2, r0
 801300e:	1a9b      	subs	r3, r3, r2
 8013010:	440b      	add	r3, r1
 8013012:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013014:	4619      	mov	r1, r3
 8013016:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013018:	f7fd ff06 	bl	8010e28 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 801301c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801301e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013020:	4413      	add	r3, r2
 8013022:	627b      	str	r3, [r7, #36]	; 0x24
 8013024:	68fb      	ldr	r3, [r7, #12]
 8013026:	699a      	ldr	r2, [r3, #24]
 8013028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801302a:	441a      	add	r2, r3
 801302c:	68fb      	ldr	r3, [r7, #12]
 801302e:	619a      	str	r2, [r3, #24]
 8013030:	683b      	ldr	r3, [r7, #0]
 8013032:	681a      	ldr	r2, [r3, #0]
 8013034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013036:	441a      	add	r2, r3
 8013038:	683b      	ldr	r3, [r7, #0]
 801303a:	601a      	str	r2, [r3, #0]
 801303c:	687a      	ldr	r2, [r7, #4]
 801303e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013040:	1ad3      	subs	r3, r2, r3
 8013042:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8013044:	687b      	ldr	r3, [r7, #4]
 8013046:	2b00      	cmp	r3, #0
 8013048:	f47f aee1 	bne.w	8012e0e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 801304c:	2300      	movs	r3, #0
}
 801304e:	4618      	mov	r0, r3
 8013050:	3738      	adds	r7, #56	; 0x38
 8013052:	46bd      	mov	sp, r7
 8013054:	bd80      	pop	{r7, pc}

08013056 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8013056:	b580      	push	{r7, lr}
 8013058:	b08c      	sub	sp, #48	; 0x30
 801305a:	af00      	add	r7, sp, #0
 801305c:	60f8      	str	r0, [r7, #12]
 801305e:	60b9      	str	r1, [r7, #8]
 8013060:	607a      	str	r2, [r7, #4]
 8013062:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8013064:	68bb      	ldr	r3, [r7, #8]
 8013066:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8013068:	683b      	ldr	r3, [r7, #0]
 801306a:	2200      	movs	r2, #0
 801306c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801306e:	68fb      	ldr	r3, [r7, #12]
 8013070:	f107 0210 	add.w	r2, r7, #16
 8013074:	4611      	mov	r1, r2
 8013076:	4618      	mov	r0, r3
 8013078:	f7ff fc44 	bl	8012904 <validate>
 801307c:	4603      	mov	r3, r0
 801307e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8013082:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013086:	2b00      	cmp	r3, #0
 8013088:	d107      	bne.n	801309a <f_write+0x44>
 801308a:	68fb      	ldr	r3, [r7, #12]
 801308c:	7d5b      	ldrb	r3, [r3, #21]
 801308e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8013092:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013096:	2b00      	cmp	r3, #0
 8013098:	d002      	beq.n	80130a0 <f_write+0x4a>
 801309a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801309e:	e16a      	b.n	8013376 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80130a0:	68fb      	ldr	r3, [r7, #12]
 80130a2:	7d1b      	ldrb	r3, [r3, #20]
 80130a4:	f003 0302 	and.w	r3, r3, #2
 80130a8:	2b00      	cmp	r3, #0
 80130aa:	d101      	bne.n	80130b0 <f_write+0x5a>
 80130ac:	2307      	movs	r3, #7
 80130ae:	e162      	b.n	8013376 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80130b0:	68fb      	ldr	r3, [r7, #12]
 80130b2:	699a      	ldr	r2, [r3, #24]
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	441a      	add	r2, r3
 80130b8:	68fb      	ldr	r3, [r7, #12]
 80130ba:	699b      	ldr	r3, [r3, #24]
 80130bc:	429a      	cmp	r2, r3
 80130be:	f080 814c 	bcs.w	801335a <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80130c2:	68fb      	ldr	r3, [r7, #12]
 80130c4:	699b      	ldr	r3, [r3, #24]
 80130c6:	43db      	mvns	r3, r3
 80130c8:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80130ca:	e146      	b.n	801335a <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80130cc:	68fb      	ldr	r3, [r7, #12]
 80130ce:	699b      	ldr	r3, [r3, #24]
 80130d0:	693a      	ldr	r2, [r7, #16]
 80130d2:	8992      	ldrh	r2, [r2, #12]
 80130d4:	fbb3 f1f2 	udiv	r1, r3, r2
 80130d8:	fb02 f201 	mul.w	r2, r2, r1
 80130dc:	1a9b      	subs	r3, r3, r2
 80130de:	2b00      	cmp	r3, #0
 80130e0:	f040 80f1 	bne.w	80132c6 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80130e4:	68fb      	ldr	r3, [r7, #12]
 80130e6:	699b      	ldr	r3, [r3, #24]
 80130e8:	693a      	ldr	r2, [r7, #16]
 80130ea:	8992      	ldrh	r2, [r2, #12]
 80130ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80130f0:	693a      	ldr	r2, [r7, #16]
 80130f2:	8952      	ldrh	r2, [r2, #10]
 80130f4:	3a01      	subs	r2, #1
 80130f6:	4013      	ands	r3, r2
 80130f8:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80130fa:	69bb      	ldr	r3, [r7, #24]
 80130fc:	2b00      	cmp	r3, #0
 80130fe:	d143      	bne.n	8013188 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8013100:	68fb      	ldr	r3, [r7, #12]
 8013102:	699b      	ldr	r3, [r3, #24]
 8013104:	2b00      	cmp	r3, #0
 8013106:	d10c      	bne.n	8013122 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8013108:	68fb      	ldr	r3, [r7, #12]
 801310a:	689b      	ldr	r3, [r3, #8]
 801310c:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801310e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013110:	2b00      	cmp	r3, #0
 8013112:	d11a      	bne.n	801314a <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8013114:	68fb      	ldr	r3, [r7, #12]
 8013116:	2100      	movs	r1, #0
 8013118:	4618      	mov	r0, r3
 801311a:	f7fe fbbc 	bl	8011896 <create_chain>
 801311e:	62b8      	str	r0, [r7, #40]	; 0x28
 8013120:	e013      	b.n	801314a <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8013122:	68fb      	ldr	r3, [r7, #12]
 8013124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013126:	2b00      	cmp	r3, #0
 8013128:	d007      	beq.n	801313a <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801312a:	68fb      	ldr	r3, [r7, #12]
 801312c:	699b      	ldr	r3, [r3, #24]
 801312e:	4619      	mov	r1, r3
 8013130:	68f8      	ldr	r0, [r7, #12]
 8013132:	f7fe fc48 	bl	80119c6 <clmt_clust>
 8013136:	62b8      	str	r0, [r7, #40]	; 0x28
 8013138:	e007      	b.n	801314a <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801313a:	68fa      	ldr	r2, [r7, #12]
 801313c:	68fb      	ldr	r3, [r7, #12]
 801313e:	69db      	ldr	r3, [r3, #28]
 8013140:	4619      	mov	r1, r3
 8013142:	4610      	mov	r0, r2
 8013144:	f7fe fba7 	bl	8011896 <create_chain>
 8013148:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801314a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801314c:	2b00      	cmp	r3, #0
 801314e:	f000 8109 	beq.w	8013364 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8013152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013154:	2b01      	cmp	r3, #1
 8013156:	d104      	bne.n	8013162 <f_write+0x10c>
 8013158:	68fb      	ldr	r3, [r7, #12]
 801315a:	2202      	movs	r2, #2
 801315c:	755a      	strb	r2, [r3, #21]
 801315e:	2302      	movs	r3, #2
 8013160:	e109      	b.n	8013376 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013168:	d104      	bne.n	8013174 <f_write+0x11e>
 801316a:	68fb      	ldr	r3, [r7, #12]
 801316c:	2201      	movs	r2, #1
 801316e:	755a      	strb	r2, [r3, #21]
 8013170:	2301      	movs	r3, #1
 8013172:	e100      	b.n	8013376 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8013174:	68fb      	ldr	r3, [r7, #12]
 8013176:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013178:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801317a:	68fb      	ldr	r3, [r7, #12]
 801317c:	689b      	ldr	r3, [r3, #8]
 801317e:	2b00      	cmp	r3, #0
 8013180:	d102      	bne.n	8013188 <f_write+0x132>
 8013182:	68fb      	ldr	r3, [r7, #12]
 8013184:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013186:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8013188:	68fb      	ldr	r3, [r7, #12]
 801318a:	7d1b      	ldrb	r3, [r3, #20]
 801318c:	b25b      	sxtb	r3, r3
 801318e:	2b00      	cmp	r3, #0
 8013190:	da18      	bge.n	80131c4 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013192:	693b      	ldr	r3, [r7, #16]
 8013194:	7858      	ldrb	r0, [r3, #1]
 8013196:	68fb      	ldr	r3, [r7, #12]
 8013198:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801319c:	68fb      	ldr	r3, [r7, #12]
 801319e:	6a1a      	ldr	r2, [r3, #32]
 80131a0:	2301      	movs	r3, #1
 80131a2:	f7fd fd81 	bl	8010ca8 <disk_write>
 80131a6:	4603      	mov	r3, r0
 80131a8:	2b00      	cmp	r3, #0
 80131aa:	d004      	beq.n	80131b6 <f_write+0x160>
 80131ac:	68fb      	ldr	r3, [r7, #12]
 80131ae:	2201      	movs	r2, #1
 80131b0:	755a      	strb	r2, [r3, #21]
 80131b2:	2301      	movs	r3, #1
 80131b4:	e0df      	b.n	8013376 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 80131b6:	68fb      	ldr	r3, [r7, #12]
 80131b8:	7d1b      	ldrb	r3, [r3, #20]
 80131ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80131be:	b2da      	uxtb	r2, r3
 80131c0:	68fb      	ldr	r3, [r7, #12]
 80131c2:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80131c4:	693a      	ldr	r2, [r7, #16]
 80131c6:	68fb      	ldr	r3, [r7, #12]
 80131c8:	69db      	ldr	r3, [r3, #28]
 80131ca:	4619      	mov	r1, r3
 80131cc:	4610      	mov	r0, r2
 80131ce:	f7fe f8f7 	bl	80113c0 <clust2sect>
 80131d2:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80131d4:	697b      	ldr	r3, [r7, #20]
 80131d6:	2b00      	cmp	r3, #0
 80131d8:	d104      	bne.n	80131e4 <f_write+0x18e>
 80131da:	68fb      	ldr	r3, [r7, #12]
 80131dc:	2202      	movs	r2, #2
 80131de:	755a      	strb	r2, [r3, #21]
 80131e0:	2302      	movs	r3, #2
 80131e2:	e0c8      	b.n	8013376 <f_write+0x320>
			sect += csect;
 80131e4:	697a      	ldr	r2, [r7, #20]
 80131e6:	69bb      	ldr	r3, [r7, #24]
 80131e8:	4413      	add	r3, r2
 80131ea:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80131ec:	693b      	ldr	r3, [r7, #16]
 80131ee:	899b      	ldrh	r3, [r3, #12]
 80131f0:	461a      	mov	r2, r3
 80131f2:	687b      	ldr	r3, [r7, #4]
 80131f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80131f8:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80131fa:	6a3b      	ldr	r3, [r7, #32]
 80131fc:	2b00      	cmp	r3, #0
 80131fe:	d043      	beq.n	8013288 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8013200:	69ba      	ldr	r2, [r7, #24]
 8013202:	6a3b      	ldr	r3, [r7, #32]
 8013204:	4413      	add	r3, r2
 8013206:	693a      	ldr	r2, [r7, #16]
 8013208:	8952      	ldrh	r2, [r2, #10]
 801320a:	4293      	cmp	r3, r2
 801320c:	d905      	bls.n	801321a <f_write+0x1c4>
					cc = fs->csize - csect;
 801320e:	693b      	ldr	r3, [r7, #16]
 8013210:	895b      	ldrh	r3, [r3, #10]
 8013212:	461a      	mov	r2, r3
 8013214:	69bb      	ldr	r3, [r7, #24]
 8013216:	1ad3      	subs	r3, r2, r3
 8013218:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801321a:	693b      	ldr	r3, [r7, #16]
 801321c:	7858      	ldrb	r0, [r3, #1]
 801321e:	6a3b      	ldr	r3, [r7, #32]
 8013220:	697a      	ldr	r2, [r7, #20]
 8013222:	69f9      	ldr	r1, [r7, #28]
 8013224:	f7fd fd40 	bl	8010ca8 <disk_write>
 8013228:	4603      	mov	r3, r0
 801322a:	2b00      	cmp	r3, #0
 801322c:	d004      	beq.n	8013238 <f_write+0x1e2>
 801322e:	68fb      	ldr	r3, [r7, #12]
 8013230:	2201      	movs	r2, #1
 8013232:	755a      	strb	r2, [r3, #21]
 8013234:	2301      	movs	r3, #1
 8013236:	e09e      	b.n	8013376 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8013238:	68fb      	ldr	r3, [r7, #12]
 801323a:	6a1a      	ldr	r2, [r3, #32]
 801323c:	697b      	ldr	r3, [r7, #20]
 801323e:	1ad3      	subs	r3, r2, r3
 8013240:	6a3a      	ldr	r2, [r7, #32]
 8013242:	429a      	cmp	r2, r3
 8013244:	d918      	bls.n	8013278 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8013246:	68fb      	ldr	r3, [r7, #12]
 8013248:	f103 0030 	add.w	r0, r3, #48	; 0x30
 801324c:	68fb      	ldr	r3, [r7, #12]
 801324e:	6a1a      	ldr	r2, [r3, #32]
 8013250:	697b      	ldr	r3, [r7, #20]
 8013252:	1ad3      	subs	r3, r2, r3
 8013254:	693a      	ldr	r2, [r7, #16]
 8013256:	8992      	ldrh	r2, [r2, #12]
 8013258:	fb02 f303 	mul.w	r3, r2, r3
 801325c:	69fa      	ldr	r2, [r7, #28]
 801325e:	18d1      	adds	r1, r2, r3
 8013260:	693b      	ldr	r3, [r7, #16]
 8013262:	899b      	ldrh	r3, [r3, #12]
 8013264:	461a      	mov	r2, r3
 8013266:	f7fd fddf 	bl	8010e28 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801326a:	68fb      	ldr	r3, [r7, #12]
 801326c:	7d1b      	ldrb	r3, [r3, #20]
 801326e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013272:	b2da      	uxtb	r2, r3
 8013274:	68fb      	ldr	r3, [r7, #12]
 8013276:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8013278:	693b      	ldr	r3, [r7, #16]
 801327a:	899b      	ldrh	r3, [r3, #12]
 801327c:	461a      	mov	r2, r3
 801327e:	6a3b      	ldr	r3, [r7, #32]
 8013280:	fb02 f303 	mul.w	r3, r2, r3
 8013284:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8013286:	e04b      	b.n	8013320 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013288:	68fb      	ldr	r3, [r7, #12]
 801328a:	6a1b      	ldr	r3, [r3, #32]
 801328c:	697a      	ldr	r2, [r7, #20]
 801328e:	429a      	cmp	r2, r3
 8013290:	d016      	beq.n	80132c0 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8013292:	68fb      	ldr	r3, [r7, #12]
 8013294:	699a      	ldr	r2, [r3, #24]
 8013296:	68fb      	ldr	r3, [r7, #12]
 8013298:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801329a:	429a      	cmp	r2, r3
 801329c:	d210      	bcs.n	80132c0 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801329e:	693b      	ldr	r3, [r7, #16]
 80132a0:	7858      	ldrb	r0, [r3, #1]
 80132a2:	68fb      	ldr	r3, [r7, #12]
 80132a4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80132a8:	2301      	movs	r3, #1
 80132aa:	697a      	ldr	r2, [r7, #20]
 80132ac:	f7fd fcdc 	bl	8010c68 <disk_read>
 80132b0:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80132b2:	2b00      	cmp	r3, #0
 80132b4:	d004      	beq.n	80132c0 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 80132b6:	68fb      	ldr	r3, [r7, #12]
 80132b8:	2201      	movs	r2, #1
 80132ba:	755a      	strb	r2, [r3, #21]
 80132bc:	2301      	movs	r3, #1
 80132be:	e05a      	b.n	8013376 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 80132c0:	68fb      	ldr	r3, [r7, #12]
 80132c2:	697a      	ldr	r2, [r7, #20]
 80132c4:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80132c6:	693b      	ldr	r3, [r7, #16]
 80132c8:	899b      	ldrh	r3, [r3, #12]
 80132ca:	4618      	mov	r0, r3
 80132cc:	68fb      	ldr	r3, [r7, #12]
 80132ce:	699b      	ldr	r3, [r3, #24]
 80132d0:	693a      	ldr	r2, [r7, #16]
 80132d2:	8992      	ldrh	r2, [r2, #12]
 80132d4:	fbb3 f1f2 	udiv	r1, r3, r2
 80132d8:	fb02 f201 	mul.w	r2, r2, r1
 80132dc:	1a9b      	subs	r3, r3, r2
 80132de:	1ac3      	subs	r3, r0, r3
 80132e0:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80132e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80132e4:	687b      	ldr	r3, [r7, #4]
 80132e6:	429a      	cmp	r2, r3
 80132e8:	d901      	bls.n	80132ee <f_write+0x298>
 80132ea:	687b      	ldr	r3, [r7, #4]
 80132ec:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80132ee:	68fb      	ldr	r3, [r7, #12]
 80132f0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80132f4:	68fb      	ldr	r3, [r7, #12]
 80132f6:	699b      	ldr	r3, [r3, #24]
 80132f8:	693a      	ldr	r2, [r7, #16]
 80132fa:	8992      	ldrh	r2, [r2, #12]
 80132fc:	fbb3 f0f2 	udiv	r0, r3, r2
 8013300:	fb02 f200 	mul.w	r2, r2, r0
 8013304:	1a9b      	subs	r3, r3, r2
 8013306:	440b      	add	r3, r1
 8013308:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801330a:	69f9      	ldr	r1, [r7, #28]
 801330c:	4618      	mov	r0, r3
 801330e:	f7fd fd8b 	bl	8010e28 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8013312:	68fb      	ldr	r3, [r7, #12]
 8013314:	7d1b      	ldrb	r3, [r3, #20]
 8013316:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801331a:	b2da      	uxtb	r2, r3
 801331c:	68fb      	ldr	r3, [r7, #12]
 801331e:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8013320:	69fa      	ldr	r2, [r7, #28]
 8013322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013324:	4413      	add	r3, r2
 8013326:	61fb      	str	r3, [r7, #28]
 8013328:	68fb      	ldr	r3, [r7, #12]
 801332a:	699a      	ldr	r2, [r3, #24]
 801332c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801332e:	441a      	add	r2, r3
 8013330:	68fb      	ldr	r3, [r7, #12]
 8013332:	619a      	str	r2, [r3, #24]
 8013334:	68fb      	ldr	r3, [r7, #12]
 8013336:	68da      	ldr	r2, [r3, #12]
 8013338:	68fb      	ldr	r3, [r7, #12]
 801333a:	699b      	ldr	r3, [r3, #24]
 801333c:	429a      	cmp	r2, r3
 801333e:	bf38      	it	cc
 8013340:	461a      	movcc	r2, r3
 8013342:	68fb      	ldr	r3, [r7, #12]
 8013344:	60da      	str	r2, [r3, #12]
 8013346:	683b      	ldr	r3, [r7, #0]
 8013348:	681a      	ldr	r2, [r3, #0]
 801334a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801334c:	441a      	add	r2, r3
 801334e:	683b      	ldr	r3, [r7, #0]
 8013350:	601a      	str	r2, [r3, #0]
 8013352:	687a      	ldr	r2, [r7, #4]
 8013354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013356:	1ad3      	subs	r3, r2, r3
 8013358:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801335a:	687b      	ldr	r3, [r7, #4]
 801335c:	2b00      	cmp	r3, #0
 801335e:	f47f aeb5 	bne.w	80130cc <f_write+0x76>
 8013362:	e000      	b.n	8013366 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013364:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8013366:	68fb      	ldr	r3, [r7, #12]
 8013368:	7d1b      	ldrb	r3, [r3, #20]
 801336a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801336e:	b2da      	uxtb	r2, r3
 8013370:	68fb      	ldr	r3, [r7, #12]
 8013372:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8013374:	2300      	movs	r3, #0
}
 8013376:	4618      	mov	r0, r3
 8013378:	3730      	adds	r7, #48	; 0x30
 801337a:	46bd      	mov	sp, r7
 801337c:	bd80      	pop	{r7, pc}
	...

08013380 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8013380:	b580      	push	{r7, lr}
 8013382:	b086      	sub	sp, #24
 8013384:	af00      	add	r7, sp, #0
 8013386:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	f107 0208 	add.w	r2, r7, #8
 801338e:	4611      	mov	r1, r2
 8013390:	4618      	mov	r0, r3
 8013392:	f7ff fab7 	bl	8012904 <validate>
 8013396:	4603      	mov	r3, r0
 8013398:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801339a:	7dfb      	ldrb	r3, [r7, #23]
 801339c:	2b00      	cmp	r3, #0
 801339e:	d167      	bne.n	8013470 <f_sync+0xf0>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	7d1b      	ldrb	r3, [r3, #20]
 80133a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80133a8:	2b00      	cmp	r3, #0
 80133aa:	d061      	beq.n	8013470 <f_sync+0xf0>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80133ac:	687b      	ldr	r3, [r7, #4]
 80133ae:	7d1b      	ldrb	r3, [r3, #20]
 80133b0:	b25b      	sxtb	r3, r3
 80133b2:	2b00      	cmp	r3, #0
 80133b4:	da15      	bge.n	80133e2 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80133b6:	68bb      	ldr	r3, [r7, #8]
 80133b8:	7858      	ldrb	r0, [r3, #1]
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	6a1a      	ldr	r2, [r3, #32]
 80133c4:	2301      	movs	r3, #1
 80133c6:	f7fd fc6f 	bl	8010ca8 <disk_write>
 80133ca:	4603      	mov	r3, r0
 80133cc:	2b00      	cmp	r3, #0
 80133ce:	d001      	beq.n	80133d4 <f_sync+0x54>
 80133d0:	2301      	movs	r3, #1
 80133d2:	e04e      	b.n	8013472 <f_sync+0xf2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80133d4:	687b      	ldr	r3, [r7, #4]
 80133d6:	7d1b      	ldrb	r3, [r3, #20]
 80133d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80133dc:	b2da      	uxtb	r2, r3
 80133de:	687b      	ldr	r3, [r7, #4]
 80133e0:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80133e2:	4b26      	ldr	r3, [pc, #152]	; (801347c <f_sync+0xfc>)
 80133e4:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80133e6:	68ba      	ldr	r2, [r7, #8]
 80133e8:	687b      	ldr	r3, [r7, #4]
 80133ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80133ec:	4619      	mov	r1, r3
 80133ee:	4610      	mov	r0, r2
 80133f0:	f7fd ff48 	bl	8011284 <move_window>
 80133f4:	4603      	mov	r3, r0
 80133f6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80133f8:	7dfb      	ldrb	r3, [r7, #23]
 80133fa:	2b00      	cmp	r3, #0
 80133fc:	d138      	bne.n	8013470 <f_sync+0xf0>
					dir = fp->dir_ptr;
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013402:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8013404:	68fb      	ldr	r3, [r7, #12]
 8013406:	330b      	adds	r3, #11
 8013408:	781a      	ldrb	r2, [r3, #0]
 801340a:	68fb      	ldr	r3, [r7, #12]
 801340c:	330b      	adds	r3, #11
 801340e:	f042 0220 	orr.w	r2, r2, #32
 8013412:	b2d2      	uxtb	r2, r2
 8013414:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	6818      	ldr	r0, [r3, #0]
 801341a:	687b      	ldr	r3, [r7, #4]
 801341c:	689b      	ldr	r3, [r3, #8]
 801341e:	461a      	mov	r2, r3
 8013420:	68f9      	ldr	r1, [r7, #12]
 8013422:	f7fe fccd 	bl	8011dc0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8013426:	68fb      	ldr	r3, [r7, #12]
 8013428:	f103 021c 	add.w	r2, r3, #28
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	68db      	ldr	r3, [r3, #12]
 8013430:	4619      	mov	r1, r3
 8013432:	4610      	mov	r0, r2
 8013434:	f7fd fccc 	bl	8010dd0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8013438:	68fb      	ldr	r3, [r7, #12]
 801343a:	3316      	adds	r3, #22
 801343c:	6939      	ldr	r1, [r7, #16]
 801343e:	4618      	mov	r0, r3
 8013440:	f7fd fcc6 	bl	8010dd0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8013444:	68fb      	ldr	r3, [r7, #12]
 8013446:	3312      	adds	r3, #18
 8013448:	2100      	movs	r1, #0
 801344a:	4618      	mov	r0, r3
 801344c:	f7fd fca5 	bl	8010d9a <st_word>
					fs->wflag = 1;
 8013450:	68bb      	ldr	r3, [r7, #8]
 8013452:	2201      	movs	r2, #1
 8013454:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8013456:	68bb      	ldr	r3, [r7, #8]
 8013458:	4618      	mov	r0, r3
 801345a:	f7fd ff41 	bl	80112e0 <sync_fs>
 801345e:	4603      	mov	r3, r0
 8013460:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8013462:	687b      	ldr	r3, [r7, #4]
 8013464:	7d1b      	ldrb	r3, [r3, #20]
 8013466:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801346a:	b2da      	uxtb	r2, r3
 801346c:	687b      	ldr	r3, [r7, #4]
 801346e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8013470:	7dfb      	ldrb	r3, [r7, #23]
}
 8013472:	4618      	mov	r0, r3
 8013474:	3718      	adds	r7, #24
 8013476:	46bd      	mov	sp, r7
 8013478:	bd80      	pop	{r7, pc}
 801347a:	bf00      	nop
 801347c:	274a0000 	.word	0x274a0000

08013480 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8013480:	b580      	push	{r7, lr}
 8013482:	b084      	sub	sp, #16
 8013484:	af00      	add	r7, sp, #0
 8013486:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8013488:	6878      	ldr	r0, [r7, #4]
 801348a:	f7ff ff79 	bl	8013380 <f_sync>
 801348e:	4603      	mov	r3, r0
 8013490:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8013492:	7bfb      	ldrb	r3, [r7, #15]
 8013494:	2b00      	cmp	r3, #0
 8013496:	d118      	bne.n	80134ca <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8013498:	687b      	ldr	r3, [r7, #4]
 801349a:	f107 0208 	add.w	r2, r7, #8
 801349e:	4611      	mov	r1, r2
 80134a0:	4618      	mov	r0, r3
 80134a2:	f7ff fa2f 	bl	8012904 <validate>
 80134a6:	4603      	mov	r3, r0
 80134a8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80134aa:	7bfb      	ldrb	r3, [r7, #15]
 80134ac:	2b00      	cmp	r3, #0
 80134ae:	d10c      	bne.n	80134ca <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	691b      	ldr	r3, [r3, #16]
 80134b4:	4618      	mov	r0, r3
 80134b6:	f7fd fe41 	bl	801113c <dec_lock>
 80134ba:	4603      	mov	r3, r0
 80134bc:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80134be:	7bfb      	ldrb	r3, [r7, #15]
 80134c0:	2b00      	cmp	r3, #0
 80134c2:	d102      	bne.n	80134ca <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80134c4:	687b      	ldr	r3, [r7, #4]
 80134c6:	2200      	movs	r2, #0
 80134c8:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80134ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80134cc:	4618      	mov	r0, r3
 80134ce:	3710      	adds	r7, #16
 80134d0:	46bd      	mov	sp, r7
 80134d2:	bd80      	pop	{r7, pc}

080134d4 <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 80134d4:	b590      	push	{r4, r7, lr}
 80134d6:	b091      	sub	sp, #68	; 0x44
 80134d8:	af00      	add	r7, sp, #0
 80134da:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 80134dc:	f107 0108 	add.w	r1, r7, #8
 80134e0:	1d3b      	adds	r3, r7, #4
 80134e2:	2200      	movs	r2, #0
 80134e4:	4618      	mov	r0, r3
 80134e6:	f7fe ff87 	bl	80123f8 <find_volume>
 80134ea:	4603      	mov	r3, r0
 80134ec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 80134f0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80134f4:	2b00      	cmp	r3, #0
 80134f6:	d131      	bne.n	801355c <f_chdir+0x88>
		dj.obj.fs = fs;
 80134f8:	68bb      	ldr	r3, [r7, #8]
 80134fa:	60fb      	str	r3, [r7, #12]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 80134fc:	687a      	ldr	r2, [r7, #4]
 80134fe:	f107 030c 	add.w	r3, r7, #12
 8013502:	4611      	mov	r1, r2
 8013504:	4618      	mov	r0, r3
 8013506:	f7fe fe47 	bl	8012198 <follow_path>
 801350a:	4603      	mov	r3, r0
 801350c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {					/* Follow completed */
 8013510:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013514:	2b00      	cmp	r3, #0
 8013516:	d11a      	bne.n	801354e <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8013518:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 801351c:	b25b      	sxtb	r3, r3
 801351e:	2b00      	cmp	r3, #0
 8013520:	da03      	bge.n	801352a <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 8013522:	68bb      	ldr	r3, [r7, #8]
 8013524:	697a      	ldr	r2, [r7, #20]
 8013526:	619a      	str	r2, [r3, #24]
 8013528:	e011      	b.n	801354e <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 801352a:	7cbb      	ldrb	r3, [r7, #18]
 801352c:	f003 0310 	and.w	r3, r3, #16
 8013530:	2b00      	cmp	r3, #0
 8013532:	d009      	beq.n	8013548 <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 8013534:	68bb      	ldr	r3, [r7, #8]
 8013536:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013538:	68bc      	ldr	r4, [r7, #8]
 801353a:	4611      	mov	r1, r2
 801353c:	4618      	mov	r0, r3
 801353e:	f7fe fc20 	bl	8011d82 <ld_clust>
 8013542:	4603      	mov	r3, r0
 8013544:	61a3      	str	r3, [r4, #24]
 8013546:	e002      	b.n	801354e <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 8013548:	2305      	movs	r3, #5
 801354a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 801354e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013552:	2b04      	cmp	r3, #4
 8013554:	d102      	bne.n	801355c <f_chdir+0x88>
 8013556:	2305      	movs	r3, #5
 8013558:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	LEAVE_FF(fs, res);
 801355c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8013560:	4618      	mov	r0, r3
 8013562:	3744      	adds	r7, #68	; 0x44
 8013564:	46bd      	mov	sp, r7
 8013566:	bd90      	pop	{r4, r7, pc}

08013568 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8013568:	b580      	push	{r7, lr}
 801356a:	b090      	sub	sp, #64	; 0x40
 801356c:	af00      	add	r7, sp, #0
 801356e:	6078      	str	r0, [r7, #4]
 8013570:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8013572:	687b      	ldr	r3, [r7, #4]
 8013574:	f107 0208 	add.w	r2, r7, #8
 8013578:	4611      	mov	r1, r2
 801357a:	4618      	mov	r0, r3
 801357c:	f7ff f9c2 	bl	8012904 <validate>
 8013580:	4603      	mov	r3, r0
 8013582:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8013586:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801358a:	2b00      	cmp	r3, #0
 801358c:	d103      	bne.n	8013596 <f_lseek+0x2e>
 801358e:	687b      	ldr	r3, [r7, #4]
 8013590:	7d5b      	ldrb	r3, [r3, #21]
 8013592:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8013596:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801359a:	2b00      	cmp	r3, #0
 801359c:	d002      	beq.n	80135a4 <f_lseek+0x3c>
 801359e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80135a2:	e201      	b.n	80139a8 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80135a4:	687b      	ldr	r3, [r7, #4]
 80135a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80135a8:	2b00      	cmp	r3, #0
 80135aa:	f000 80d9 	beq.w	8013760 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80135ae:	683b      	ldr	r3, [r7, #0]
 80135b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80135b4:	d15a      	bne.n	801366c <f_lseek+0x104>
			tbl = fp->cltbl;
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80135ba:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80135bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135be:	1d1a      	adds	r2, r3, #4
 80135c0:	627a      	str	r2, [r7, #36]	; 0x24
 80135c2:	681b      	ldr	r3, [r3, #0]
 80135c4:	617b      	str	r3, [r7, #20]
 80135c6:	2302      	movs	r3, #2
 80135c8:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	689b      	ldr	r3, [r3, #8]
 80135ce:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 80135d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135d2:	2b00      	cmp	r3, #0
 80135d4:	d03a      	beq.n	801364c <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 80135d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135d8:	613b      	str	r3, [r7, #16]
 80135da:	2300      	movs	r3, #0
 80135dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80135de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135e0:	3302      	adds	r3, #2
 80135e2:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 80135e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135e6:	60fb      	str	r3, [r7, #12]
 80135e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135ea:	3301      	adds	r3, #1
 80135ec:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80135f2:	4618      	mov	r0, r3
 80135f4:	f7fd ff03 	bl	80113fe <get_fat>
 80135f8:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 80135fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135fc:	2b01      	cmp	r3, #1
 80135fe:	d804      	bhi.n	801360a <f_lseek+0xa2>
 8013600:	687b      	ldr	r3, [r7, #4]
 8013602:	2202      	movs	r2, #2
 8013604:	755a      	strb	r2, [r3, #21]
 8013606:	2302      	movs	r3, #2
 8013608:	e1ce      	b.n	80139a8 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801360a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801360c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013610:	d104      	bne.n	801361c <f_lseek+0xb4>
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	2201      	movs	r2, #1
 8013616:	755a      	strb	r2, [r3, #21]
 8013618:	2301      	movs	r3, #1
 801361a:	e1c5      	b.n	80139a8 <f_lseek+0x440>
					} while (cl == pcl + 1);
 801361c:	68fb      	ldr	r3, [r7, #12]
 801361e:	3301      	adds	r3, #1
 8013620:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013622:	429a      	cmp	r2, r3
 8013624:	d0de      	beq.n	80135e4 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8013626:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013628:	697b      	ldr	r3, [r7, #20]
 801362a:	429a      	cmp	r2, r3
 801362c:	d809      	bhi.n	8013642 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 801362e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013630:	1d1a      	adds	r2, r3, #4
 8013632:	627a      	str	r2, [r7, #36]	; 0x24
 8013634:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013636:	601a      	str	r2, [r3, #0]
 8013638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801363a:	1d1a      	adds	r2, r3, #4
 801363c:	627a      	str	r2, [r7, #36]	; 0x24
 801363e:	693a      	ldr	r2, [r7, #16]
 8013640:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8013642:	68bb      	ldr	r3, [r7, #8]
 8013644:	69db      	ldr	r3, [r3, #28]
 8013646:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013648:	429a      	cmp	r2, r3
 801364a:	d3c4      	bcc.n	80135d6 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 801364c:	687b      	ldr	r3, [r7, #4]
 801364e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013650:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013652:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8013654:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013656:	697b      	ldr	r3, [r7, #20]
 8013658:	429a      	cmp	r2, r3
 801365a:	d803      	bhi.n	8013664 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 801365c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801365e:	2200      	movs	r2, #0
 8013660:	601a      	str	r2, [r3, #0]
 8013662:	e19f      	b.n	80139a4 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8013664:	2311      	movs	r3, #17
 8013666:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 801366a:	e19b      	b.n	80139a4 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	68db      	ldr	r3, [r3, #12]
 8013670:	683a      	ldr	r2, [r7, #0]
 8013672:	429a      	cmp	r2, r3
 8013674:	d902      	bls.n	801367c <f_lseek+0x114>
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	68db      	ldr	r3, [r3, #12]
 801367a:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 801367c:	687b      	ldr	r3, [r7, #4]
 801367e:	683a      	ldr	r2, [r7, #0]
 8013680:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8013682:	683b      	ldr	r3, [r7, #0]
 8013684:	2b00      	cmp	r3, #0
 8013686:	f000 818d 	beq.w	80139a4 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 801368a:	683b      	ldr	r3, [r7, #0]
 801368c:	3b01      	subs	r3, #1
 801368e:	4619      	mov	r1, r3
 8013690:	6878      	ldr	r0, [r7, #4]
 8013692:	f7fe f998 	bl	80119c6 <clmt_clust>
 8013696:	4602      	mov	r2, r0
 8013698:	687b      	ldr	r3, [r7, #4]
 801369a:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 801369c:	68ba      	ldr	r2, [r7, #8]
 801369e:	687b      	ldr	r3, [r7, #4]
 80136a0:	69db      	ldr	r3, [r3, #28]
 80136a2:	4619      	mov	r1, r3
 80136a4:	4610      	mov	r0, r2
 80136a6:	f7fd fe8b 	bl	80113c0 <clust2sect>
 80136aa:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80136ac:	69bb      	ldr	r3, [r7, #24]
 80136ae:	2b00      	cmp	r3, #0
 80136b0:	d104      	bne.n	80136bc <f_lseek+0x154>
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	2202      	movs	r2, #2
 80136b6:	755a      	strb	r2, [r3, #21]
 80136b8:	2302      	movs	r3, #2
 80136ba:	e175      	b.n	80139a8 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80136bc:	683b      	ldr	r3, [r7, #0]
 80136be:	3b01      	subs	r3, #1
 80136c0:	68ba      	ldr	r2, [r7, #8]
 80136c2:	8992      	ldrh	r2, [r2, #12]
 80136c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80136c8:	68ba      	ldr	r2, [r7, #8]
 80136ca:	8952      	ldrh	r2, [r2, #10]
 80136cc:	3a01      	subs	r2, #1
 80136ce:	4013      	ands	r3, r2
 80136d0:	69ba      	ldr	r2, [r7, #24]
 80136d2:	4413      	add	r3, r2
 80136d4:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 80136d6:	687b      	ldr	r3, [r7, #4]
 80136d8:	699b      	ldr	r3, [r3, #24]
 80136da:	68ba      	ldr	r2, [r7, #8]
 80136dc:	8992      	ldrh	r2, [r2, #12]
 80136de:	fbb3 f1f2 	udiv	r1, r3, r2
 80136e2:	fb02 f201 	mul.w	r2, r2, r1
 80136e6:	1a9b      	subs	r3, r3, r2
 80136e8:	2b00      	cmp	r3, #0
 80136ea:	f000 815b 	beq.w	80139a4 <f_lseek+0x43c>
 80136ee:	687b      	ldr	r3, [r7, #4]
 80136f0:	6a1b      	ldr	r3, [r3, #32]
 80136f2:	69ba      	ldr	r2, [r7, #24]
 80136f4:	429a      	cmp	r2, r3
 80136f6:	f000 8155 	beq.w	80139a4 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80136fa:	687b      	ldr	r3, [r7, #4]
 80136fc:	7d1b      	ldrb	r3, [r3, #20]
 80136fe:	b25b      	sxtb	r3, r3
 8013700:	2b00      	cmp	r3, #0
 8013702:	da18      	bge.n	8013736 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013704:	68bb      	ldr	r3, [r7, #8]
 8013706:	7858      	ldrb	r0, [r3, #1]
 8013708:	687b      	ldr	r3, [r7, #4]
 801370a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801370e:	687b      	ldr	r3, [r7, #4]
 8013710:	6a1a      	ldr	r2, [r3, #32]
 8013712:	2301      	movs	r3, #1
 8013714:	f7fd fac8 	bl	8010ca8 <disk_write>
 8013718:	4603      	mov	r3, r0
 801371a:	2b00      	cmp	r3, #0
 801371c:	d004      	beq.n	8013728 <f_lseek+0x1c0>
 801371e:	687b      	ldr	r3, [r7, #4]
 8013720:	2201      	movs	r2, #1
 8013722:	755a      	strb	r2, [r3, #21]
 8013724:	2301      	movs	r3, #1
 8013726:	e13f      	b.n	80139a8 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	7d1b      	ldrb	r3, [r3, #20]
 801372c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013730:	b2da      	uxtb	r2, r3
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8013736:	68bb      	ldr	r3, [r7, #8]
 8013738:	7858      	ldrb	r0, [r3, #1]
 801373a:	687b      	ldr	r3, [r7, #4]
 801373c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013740:	2301      	movs	r3, #1
 8013742:	69ba      	ldr	r2, [r7, #24]
 8013744:	f7fd fa90 	bl	8010c68 <disk_read>
 8013748:	4603      	mov	r3, r0
 801374a:	2b00      	cmp	r3, #0
 801374c:	d004      	beq.n	8013758 <f_lseek+0x1f0>
 801374e:	687b      	ldr	r3, [r7, #4]
 8013750:	2201      	movs	r2, #1
 8013752:	755a      	strb	r2, [r3, #21]
 8013754:	2301      	movs	r3, #1
 8013756:	e127      	b.n	80139a8 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8013758:	687b      	ldr	r3, [r7, #4]
 801375a:	69ba      	ldr	r2, [r7, #24]
 801375c:	621a      	str	r2, [r3, #32]
 801375e:	e121      	b.n	80139a4 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8013760:	687b      	ldr	r3, [r7, #4]
 8013762:	68db      	ldr	r3, [r3, #12]
 8013764:	683a      	ldr	r2, [r7, #0]
 8013766:	429a      	cmp	r2, r3
 8013768:	d908      	bls.n	801377c <f_lseek+0x214>
 801376a:	687b      	ldr	r3, [r7, #4]
 801376c:	7d1b      	ldrb	r3, [r3, #20]
 801376e:	f003 0302 	and.w	r3, r3, #2
 8013772:	2b00      	cmp	r3, #0
 8013774:	d102      	bne.n	801377c <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8013776:	687b      	ldr	r3, [r7, #4]
 8013778:	68db      	ldr	r3, [r3, #12]
 801377a:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 801377c:	687b      	ldr	r3, [r7, #4]
 801377e:	699b      	ldr	r3, [r3, #24]
 8013780:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8013782:	2300      	movs	r3, #0
 8013784:	637b      	str	r3, [r7, #52]	; 0x34
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801378a:	619a      	str	r2, [r3, #24]
		if (ofs) {
 801378c:	683b      	ldr	r3, [r7, #0]
 801378e:	2b00      	cmp	r3, #0
 8013790:	f000 80b5 	beq.w	80138fe <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8013794:	68bb      	ldr	r3, [r7, #8]
 8013796:	895b      	ldrh	r3, [r3, #10]
 8013798:	461a      	mov	r2, r3
 801379a:	68bb      	ldr	r3, [r7, #8]
 801379c:	899b      	ldrh	r3, [r3, #12]
 801379e:	fb03 f302 	mul.w	r3, r3, r2
 80137a2:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 80137a4:	6a3b      	ldr	r3, [r7, #32]
 80137a6:	2b00      	cmp	r3, #0
 80137a8:	d01b      	beq.n	80137e2 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80137aa:	683b      	ldr	r3, [r7, #0]
 80137ac:	1e5a      	subs	r2, r3, #1
 80137ae:	69fb      	ldr	r3, [r7, #28]
 80137b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80137b4:	6a3b      	ldr	r3, [r7, #32]
 80137b6:	1e59      	subs	r1, r3, #1
 80137b8:	69fb      	ldr	r3, [r7, #28]
 80137ba:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 80137be:	429a      	cmp	r2, r3
 80137c0:	d30f      	bcc.n	80137e2 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 80137c2:	6a3b      	ldr	r3, [r7, #32]
 80137c4:	1e5a      	subs	r2, r3, #1
 80137c6:	69fb      	ldr	r3, [r7, #28]
 80137c8:	425b      	negs	r3, r3
 80137ca:	401a      	ands	r2, r3
 80137cc:	687b      	ldr	r3, [r7, #4]
 80137ce:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 80137d0:	687b      	ldr	r3, [r7, #4]
 80137d2:	699b      	ldr	r3, [r3, #24]
 80137d4:	683a      	ldr	r2, [r7, #0]
 80137d6:	1ad3      	subs	r3, r2, r3
 80137d8:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 80137da:	687b      	ldr	r3, [r7, #4]
 80137dc:	69db      	ldr	r3, [r3, #28]
 80137de:	63bb      	str	r3, [r7, #56]	; 0x38
 80137e0:	e022      	b.n	8013828 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	689b      	ldr	r3, [r3, #8]
 80137e6:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80137e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137ea:	2b00      	cmp	r3, #0
 80137ec:	d119      	bne.n	8013822 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	2100      	movs	r1, #0
 80137f2:	4618      	mov	r0, r3
 80137f4:	f7fe f84f 	bl	8011896 <create_chain>
 80137f8:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 80137fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137fc:	2b01      	cmp	r3, #1
 80137fe:	d104      	bne.n	801380a <f_lseek+0x2a2>
 8013800:	687b      	ldr	r3, [r7, #4]
 8013802:	2202      	movs	r2, #2
 8013804:	755a      	strb	r2, [r3, #21]
 8013806:	2302      	movs	r3, #2
 8013808:	e0ce      	b.n	80139a8 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801380a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801380c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013810:	d104      	bne.n	801381c <f_lseek+0x2b4>
 8013812:	687b      	ldr	r3, [r7, #4]
 8013814:	2201      	movs	r2, #1
 8013816:	755a      	strb	r2, [r3, #21]
 8013818:	2301      	movs	r3, #1
 801381a:	e0c5      	b.n	80139a8 <f_lseek+0x440>
					fp->obj.sclust = clst;
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013820:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8013822:	687b      	ldr	r3, [r7, #4]
 8013824:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013826:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8013828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801382a:	2b00      	cmp	r3, #0
 801382c:	d067      	beq.n	80138fe <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 801382e:	e03a      	b.n	80138a6 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8013830:	683a      	ldr	r2, [r7, #0]
 8013832:	69fb      	ldr	r3, [r7, #28]
 8013834:	1ad3      	subs	r3, r2, r3
 8013836:	603b      	str	r3, [r7, #0]
 8013838:	687b      	ldr	r3, [r7, #4]
 801383a:	699a      	ldr	r2, [r3, #24]
 801383c:	69fb      	ldr	r3, [r7, #28]
 801383e:	441a      	add	r2, r3
 8013840:	687b      	ldr	r3, [r7, #4]
 8013842:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	7d1b      	ldrb	r3, [r3, #20]
 8013848:	f003 0302 	and.w	r3, r3, #2
 801384c:	2b00      	cmp	r3, #0
 801384e:	d00b      	beq.n	8013868 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8013850:	687b      	ldr	r3, [r7, #4]
 8013852:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013854:	4618      	mov	r0, r3
 8013856:	f7fe f81e 	bl	8011896 <create_chain>
 801385a:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 801385c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801385e:	2b00      	cmp	r3, #0
 8013860:	d108      	bne.n	8013874 <f_lseek+0x30c>
							ofs = 0; break;
 8013862:	2300      	movs	r3, #0
 8013864:	603b      	str	r3, [r7, #0]
 8013866:	e022      	b.n	80138ae <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8013868:	687b      	ldr	r3, [r7, #4]
 801386a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801386c:	4618      	mov	r0, r3
 801386e:	f7fd fdc6 	bl	80113fe <get_fat>
 8013872:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013876:	f1b3 3fff 	cmp.w	r3, #4294967295
 801387a:	d104      	bne.n	8013886 <f_lseek+0x31e>
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	2201      	movs	r2, #1
 8013880:	755a      	strb	r2, [r3, #21]
 8013882:	2301      	movs	r3, #1
 8013884:	e090      	b.n	80139a8 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8013886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013888:	2b01      	cmp	r3, #1
 801388a:	d904      	bls.n	8013896 <f_lseek+0x32e>
 801388c:	68bb      	ldr	r3, [r7, #8]
 801388e:	69db      	ldr	r3, [r3, #28]
 8013890:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013892:	429a      	cmp	r2, r3
 8013894:	d304      	bcc.n	80138a0 <f_lseek+0x338>
 8013896:	687b      	ldr	r3, [r7, #4]
 8013898:	2202      	movs	r2, #2
 801389a:	755a      	strb	r2, [r3, #21]
 801389c:	2302      	movs	r3, #2
 801389e:	e083      	b.n	80139a8 <f_lseek+0x440>
					fp->clust = clst;
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80138a4:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 80138a6:	683a      	ldr	r2, [r7, #0]
 80138a8:	69fb      	ldr	r3, [r7, #28]
 80138aa:	429a      	cmp	r2, r3
 80138ac:	d8c0      	bhi.n	8013830 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 80138ae:	687b      	ldr	r3, [r7, #4]
 80138b0:	699a      	ldr	r2, [r3, #24]
 80138b2:	683b      	ldr	r3, [r7, #0]
 80138b4:	441a      	add	r2, r3
 80138b6:	687b      	ldr	r3, [r7, #4]
 80138b8:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 80138ba:	68bb      	ldr	r3, [r7, #8]
 80138bc:	899b      	ldrh	r3, [r3, #12]
 80138be:	461a      	mov	r2, r3
 80138c0:	683b      	ldr	r3, [r7, #0]
 80138c2:	fbb3 f1f2 	udiv	r1, r3, r2
 80138c6:	fb02 f201 	mul.w	r2, r2, r1
 80138ca:	1a9b      	subs	r3, r3, r2
 80138cc:	2b00      	cmp	r3, #0
 80138ce:	d016      	beq.n	80138fe <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 80138d0:	68bb      	ldr	r3, [r7, #8]
 80138d2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80138d4:	4618      	mov	r0, r3
 80138d6:	f7fd fd73 	bl	80113c0 <clust2sect>
 80138da:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 80138dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80138de:	2b00      	cmp	r3, #0
 80138e0:	d104      	bne.n	80138ec <f_lseek+0x384>
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	2202      	movs	r2, #2
 80138e6:	755a      	strb	r2, [r3, #21]
 80138e8:	2302      	movs	r3, #2
 80138ea:	e05d      	b.n	80139a8 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 80138ec:	68bb      	ldr	r3, [r7, #8]
 80138ee:	899b      	ldrh	r3, [r3, #12]
 80138f0:	461a      	mov	r2, r3
 80138f2:	683b      	ldr	r3, [r7, #0]
 80138f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80138f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80138fa:	4413      	add	r3, r2
 80138fc:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 80138fe:	687b      	ldr	r3, [r7, #4]
 8013900:	699a      	ldr	r2, [r3, #24]
 8013902:	687b      	ldr	r3, [r7, #4]
 8013904:	68db      	ldr	r3, [r3, #12]
 8013906:	429a      	cmp	r2, r3
 8013908:	d90a      	bls.n	8013920 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 801390a:	687b      	ldr	r3, [r7, #4]
 801390c:	699a      	ldr	r2, [r3, #24]
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8013912:	687b      	ldr	r3, [r7, #4]
 8013914:	7d1b      	ldrb	r3, [r3, #20]
 8013916:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801391a:	b2da      	uxtb	r2, r3
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	699b      	ldr	r3, [r3, #24]
 8013924:	68ba      	ldr	r2, [r7, #8]
 8013926:	8992      	ldrh	r2, [r2, #12]
 8013928:	fbb3 f1f2 	udiv	r1, r3, r2
 801392c:	fb02 f201 	mul.w	r2, r2, r1
 8013930:	1a9b      	subs	r3, r3, r2
 8013932:	2b00      	cmp	r3, #0
 8013934:	d036      	beq.n	80139a4 <f_lseek+0x43c>
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	6a1b      	ldr	r3, [r3, #32]
 801393a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801393c:	429a      	cmp	r2, r3
 801393e:	d031      	beq.n	80139a4 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8013940:	687b      	ldr	r3, [r7, #4]
 8013942:	7d1b      	ldrb	r3, [r3, #20]
 8013944:	b25b      	sxtb	r3, r3
 8013946:	2b00      	cmp	r3, #0
 8013948:	da18      	bge.n	801397c <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801394a:	68bb      	ldr	r3, [r7, #8]
 801394c:	7858      	ldrb	r0, [r3, #1]
 801394e:	687b      	ldr	r3, [r7, #4]
 8013950:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013954:	687b      	ldr	r3, [r7, #4]
 8013956:	6a1a      	ldr	r2, [r3, #32]
 8013958:	2301      	movs	r3, #1
 801395a:	f7fd f9a5 	bl	8010ca8 <disk_write>
 801395e:	4603      	mov	r3, r0
 8013960:	2b00      	cmp	r3, #0
 8013962:	d004      	beq.n	801396e <f_lseek+0x406>
 8013964:	687b      	ldr	r3, [r7, #4]
 8013966:	2201      	movs	r2, #1
 8013968:	755a      	strb	r2, [r3, #21]
 801396a:	2301      	movs	r3, #1
 801396c:	e01c      	b.n	80139a8 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 801396e:	687b      	ldr	r3, [r7, #4]
 8013970:	7d1b      	ldrb	r3, [r3, #20]
 8013972:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013976:	b2da      	uxtb	r2, r3
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 801397c:	68bb      	ldr	r3, [r7, #8]
 801397e:	7858      	ldrb	r0, [r3, #1]
 8013980:	687b      	ldr	r3, [r7, #4]
 8013982:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013986:	2301      	movs	r3, #1
 8013988:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801398a:	f7fd f96d 	bl	8010c68 <disk_read>
 801398e:	4603      	mov	r3, r0
 8013990:	2b00      	cmp	r3, #0
 8013992:	d004      	beq.n	801399e <f_lseek+0x436>
 8013994:	687b      	ldr	r3, [r7, #4]
 8013996:	2201      	movs	r2, #1
 8013998:	755a      	strb	r2, [r3, #21]
 801399a:	2301      	movs	r3, #1
 801399c:	e004      	b.n	80139a8 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 801399e:	687b      	ldr	r3, [r7, #4]
 80139a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80139a2:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 80139a4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80139a8:	4618      	mov	r0, r3
 80139aa:	3740      	adds	r7, #64	; 0x40
 80139ac:	46bd      	mov	sp, r7
 80139ae:	bd80      	pop	{r7, pc}

080139b0 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 80139b0:	b580      	push	{r7, lr}
 80139b2:	b09e      	sub	sp, #120	; 0x78
 80139b4:	af00      	add	r7, sp, #0
 80139b6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 80139b8:	2300      	movs	r3, #0
 80139ba:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 80139bc:	f107 010c 	add.w	r1, r7, #12
 80139c0:	1d3b      	adds	r3, r7, #4
 80139c2:	2202      	movs	r2, #2
 80139c4:	4618      	mov	r0, r3
 80139c6:	f7fe fd17 	bl	80123f8 <find_volume>
 80139ca:	4603      	mov	r3, r0
 80139cc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 80139d0:	68fb      	ldr	r3, [r7, #12]
 80139d2:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 80139d4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80139d8:	2b00      	cmp	r3, #0
 80139da:	f040 80a4 	bne.w	8013b26 <f_unlink+0x176>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 80139de:	687a      	ldr	r2, [r7, #4]
 80139e0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80139e4:	4611      	mov	r1, r2
 80139e6:	4618      	mov	r0, r3
 80139e8:	f7fe fbd6 	bl	8012198 <follow_path>
 80139ec:	4603      	mov	r3, r0
 80139ee:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 80139f2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80139f6:	2b00      	cmp	r3, #0
 80139f8:	d108      	bne.n	8013a0c <f_unlink+0x5c>
 80139fa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80139fe:	f003 0320 	and.w	r3, r3, #32
 8013a02:	2b00      	cmp	r3, #0
 8013a04:	d002      	beq.n	8013a0c <f_unlink+0x5c>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 8013a06:	2306      	movs	r3, #6
 8013a08:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8013a0c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013a10:	2b00      	cmp	r3, #0
 8013a12:	d108      	bne.n	8013a26 <f_unlink+0x76>
 8013a14:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013a18:	2102      	movs	r1, #2
 8013a1a:	4618      	mov	r0, r3
 8013a1c:	f7fd fa82 	bl	8010f24 <chk_lock>
 8013a20:	4603      	mov	r3, r0
 8013a22:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8013a26:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013a2a:	2b00      	cmp	r3, #0
 8013a2c:	d17b      	bne.n	8013b26 <f_unlink+0x176>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8013a2e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8013a32:	b25b      	sxtb	r3, r3
 8013a34:	2b00      	cmp	r3, #0
 8013a36:	da03      	bge.n	8013a40 <f_unlink+0x90>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8013a38:	2306      	movs	r3, #6
 8013a3a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8013a3e:	e008      	b.n	8013a52 <f_unlink+0xa2>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8013a40:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8013a44:	f003 0301 	and.w	r3, r3, #1
 8013a48:	2b00      	cmp	r3, #0
 8013a4a:	d002      	beq.n	8013a52 <f_unlink+0xa2>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8013a4c:	2307      	movs	r3, #7
 8013a4e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 8013a52:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013a56:	2b00      	cmp	r3, #0
 8013a58:	d13d      	bne.n	8013ad6 <f_unlink+0x126>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8013a5a:	68fb      	ldr	r3, [r7, #12]
 8013a5c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8013a5e:	4611      	mov	r1, r2
 8013a60:	4618      	mov	r0, r3
 8013a62:	f7fe f98e 	bl	8011d82 <ld_clust>
 8013a66:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8013a68:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8013a6c:	f003 0310 	and.w	r3, r3, #16
 8013a70:	2b00      	cmp	r3, #0
 8013a72:	d030      	beq.n	8013ad6 <f_unlink+0x126>
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
 8013a74:	68fb      	ldr	r3, [r7, #12]
 8013a76:	699b      	ldr	r3, [r3, #24]
 8013a78:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8013a7a:	429a      	cmp	r2, r3
 8013a7c:	d103      	bne.n	8013a86 <f_unlink+0xd6>
						res = FR_DENIED;
 8013a7e:	2307      	movs	r3, #7
 8013a80:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8013a84:	e027      	b.n	8013ad6 <f_unlink+0x126>
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8013a86:	68fb      	ldr	r3, [r7, #12]
 8013a88:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 8013a8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013a8c:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8013a8e:	f107 0310 	add.w	r3, r7, #16
 8013a92:	2100      	movs	r1, #0
 8013a94:	4618      	mov	r0, r3
 8013a96:	f7fd ffce 	bl	8011a36 <dir_sdi>
 8013a9a:	4603      	mov	r3, r0
 8013a9c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 8013aa0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013aa4:	2b00      	cmp	r3, #0
 8013aa6:	d116      	bne.n	8013ad6 <f_unlink+0x126>
							res = dir_read(&sdj, 0);			/* Read an item */
 8013aa8:	f107 0310 	add.w	r3, r7, #16
 8013aac:	2100      	movs	r1, #0
 8013aae:	4618      	mov	r0, r3
 8013ab0:	f7fe f9a6 	bl	8011e00 <dir_read>
 8013ab4:	4603      	mov	r3, r0
 8013ab6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8013aba:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013abe:	2b00      	cmp	r3, #0
 8013ac0:	d102      	bne.n	8013ac8 <f_unlink+0x118>
 8013ac2:	2307      	movs	r3, #7
 8013ac4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8013ac8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013acc:	2b04      	cmp	r3, #4
 8013ace:	d102      	bne.n	8013ad6 <f_unlink+0x126>
 8013ad0:	2300      	movs	r3, #0
 8013ad2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 8013ad6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013ada:	2b00      	cmp	r3, #0
 8013adc:	d123      	bne.n	8013b26 <f_unlink+0x176>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8013ade:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013ae2:	4618      	mov	r0, r3
 8013ae4:	f7fe fa70 	bl	8011fc8 <dir_remove>
 8013ae8:	4603      	mov	r3, r0
 8013aea:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8013aee:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013af2:	2b00      	cmp	r3, #0
 8013af4:	d10c      	bne.n	8013b10 <f_unlink+0x160>
 8013af6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013af8:	2b00      	cmp	r3, #0
 8013afa:	d009      	beq.n	8013b10 <f_unlink+0x160>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8013afc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013b00:	2200      	movs	r2, #0
 8013b02:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8013b04:	4618      	mov	r0, r3
 8013b06:	f7fd fe61 	bl	80117cc <remove_chain>
 8013b0a:	4603      	mov	r3, r0
 8013b0c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8013b10:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013b14:	2b00      	cmp	r3, #0
 8013b16:	d106      	bne.n	8013b26 <f_unlink+0x176>
 8013b18:	68fb      	ldr	r3, [r7, #12]
 8013b1a:	4618      	mov	r0, r3
 8013b1c:	f7fd fbe0 	bl	80112e0 <sync_fs>
 8013b20:	4603      	mov	r3, r0
 8013b22:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8013b26:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8013b2a:	4618      	mov	r0, r3
 8013b2c:	3778      	adds	r7, #120	; 0x78
 8013b2e:	46bd      	mov	sp, r7
 8013b30:	bd80      	pop	{r7, pc}
	...

08013b34 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8013b34:	b580      	push	{r7, lr}
 8013b36:	b096      	sub	sp, #88	; 0x58
 8013b38:	af00      	add	r7, sp, #0
 8013b3a:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8013b3c:	f107 0108 	add.w	r1, r7, #8
 8013b40:	1d3b      	adds	r3, r7, #4
 8013b42:	2202      	movs	r2, #2
 8013b44:	4618      	mov	r0, r3
 8013b46:	f7fe fc57 	bl	80123f8 <find_volume>
 8013b4a:	4603      	mov	r3, r0
 8013b4c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 8013b50:	68bb      	ldr	r3, [r7, #8]
 8013b52:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 8013b54:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013b58:	2b00      	cmp	r3, #0
 8013b5a:	f040 80fe 	bne.w	8013d5a <f_mkdir+0x226>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8013b5e:	687a      	ldr	r2, [r7, #4]
 8013b60:	f107 030c 	add.w	r3, r7, #12
 8013b64:	4611      	mov	r1, r2
 8013b66:	4618      	mov	r0, r3
 8013b68:	f7fe fb16 	bl	8012198 <follow_path>
 8013b6c:	4603      	mov	r3, r0
 8013b6e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8013b72:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013b76:	2b00      	cmp	r3, #0
 8013b78:	d102      	bne.n	8013b80 <f_mkdir+0x4c>
 8013b7a:	2308      	movs	r3, #8
 8013b7c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 8013b80:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013b84:	2b04      	cmp	r3, #4
 8013b86:	d108      	bne.n	8013b9a <f_mkdir+0x66>
 8013b88:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8013b8c:	f003 0320 	and.w	r3, r3, #32
 8013b90:	2b00      	cmp	r3, #0
 8013b92:	d002      	beq.n	8013b9a <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 8013b94:	2306      	movs	r3, #6
 8013b96:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8013b9a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013b9e:	2b04      	cmp	r3, #4
 8013ba0:	f040 80db 	bne.w	8013d5a <f_mkdir+0x226>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8013ba4:	f107 030c 	add.w	r3, r7, #12
 8013ba8:	2100      	movs	r1, #0
 8013baa:	4618      	mov	r0, r3
 8013bac:	f7fd fe73 	bl	8011896 <create_chain>
 8013bb0:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8013bb2:	68bb      	ldr	r3, [r7, #8]
 8013bb4:	895b      	ldrh	r3, [r3, #10]
 8013bb6:	461a      	mov	r2, r3
 8013bb8:	68bb      	ldr	r3, [r7, #8]
 8013bba:	899b      	ldrh	r3, [r3, #12]
 8013bbc:	fb03 f302 	mul.w	r3, r3, r2
 8013bc0:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 8013bc2:	2300      	movs	r3, #0
 8013bc4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8013bc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013bca:	2b00      	cmp	r3, #0
 8013bcc:	d102      	bne.n	8013bd4 <f_mkdir+0xa0>
 8013bce:	2307      	movs	r3, #7
 8013bd0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 8013bd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013bd6:	2b01      	cmp	r3, #1
 8013bd8:	d102      	bne.n	8013be0 <f_mkdir+0xac>
 8013bda:	2302      	movs	r3, #2
 8013bdc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8013be0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013be2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013be6:	d102      	bne.n	8013bee <f_mkdir+0xba>
 8013be8:	2301      	movs	r3, #1
 8013bea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8013bee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013bf2:	2b00      	cmp	r3, #0
 8013bf4:	d106      	bne.n	8013c04 <f_mkdir+0xd0>
 8013bf6:	68bb      	ldr	r3, [r7, #8]
 8013bf8:	4618      	mov	r0, r3
 8013bfa:	f7fd faff 	bl	80111fc <sync_window>
 8013bfe:	4603      	mov	r3, r0
 8013c00:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 8013c04:	4b58      	ldr	r3, [pc, #352]	; (8013d68 <f_mkdir+0x234>)
 8013c06:	643b      	str	r3, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 8013c08:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013c0c:	2b00      	cmp	r3, #0
 8013c0e:	d16c      	bne.n	8013cea <f_mkdir+0x1b6>
				dsc = clust2sect(fs, dcl);
 8013c10:	68bb      	ldr	r3, [r7, #8]
 8013c12:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013c14:	4618      	mov	r0, r3
 8013c16:	f7fd fbd3 	bl	80113c0 <clust2sect>
 8013c1a:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 8013c1c:	68bb      	ldr	r3, [r7, #8]
 8013c1e:	3338      	adds	r3, #56	; 0x38
 8013c20:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 8013c22:	68bb      	ldr	r3, [r7, #8]
 8013c24:	899b      	ldrh	r3, [r3, #12]
 8013c26:	461a      	mov	r2, r3
 8013c28:	2100      	movs	r1, #0
 8013c2a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013c2c:	f7fd f91d 	bl	8010e6a <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8013c30:	220b      	movs	r2, #11
 8013c32:	2120      	movs	r1, #32
 8013c34:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013c36:	f7fd f918 	bl	8010e6a <mem_set>
					dir[DIR_Name] = '.';
 8013c3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013c3c:	222e      	movs	r2, #46	; 0x2e
 8013c3e:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8013c40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013c42:	330b      	adds	r3, #11
 8013c44:	2210      	movs	r2, #16
 8013c46:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8013c48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013c4a:	3316      	adds	r3, #22
 8013c4c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013c4e:	4618      	mov	r0, r3
 8013c50:	f7fd f8be 	bl	8010dd0 <st_dword>
					st_clust(fs, dir, dcl);
 8013c54:	68bb      	ldr	r3, [r7, #8]
 8013c56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013c58:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013c5a:	4618      	mov	r0, r3
 8013c5c:	f7fe f8b0 	bl	8011dc0 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8013c60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013c62:	3320      	adds	r3, #32
 8013c64:	2220      	movs	r2, #32
 8013c66:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013c68:	4618      	mov	r0, r3
 8013c6a:	f7fd f8dd 	bl	8010e28 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8013c6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013c70:	3321      	adds	r3, #33	; 0x21
 8013c72:	222e      	movs	r2, #46	; 0x2e
 8013c74:	701a      	strb	r2, [r3, #0]
 8013c76:	697b      	ldr	r3, [r7, #20]
 8013c78:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8013c7a:	68bb      	ldr	r3, [r7, #8]
 8013c7c:	781b      	ldrb	r3, [r3, #0]
 8013c7e:	2b03      	cmp	r3, #3
 8013c80:	d106      	bne.n	8013c90 <f_mkdir+0x15c>
 8013c82:	68bb      	ldr	r3, [r7, #8]
 8013c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013c88:	429a      	cmp	r2, r3
 8013c8a:	d101      	bne.n	8013c90 <f_mkdir+0x15c>
 8013c8c:	2300      	movs	r3, #0
 8013c8e:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 8013c90:	68b8      	ldr	r0, [r7, #8]
 8013c92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013c94:	3320      	adds	r3, #32
 8013c96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013c98:	4619      	mov	r1, r3
 8013c9a:	f7fe f891 	bl	8011dc0 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8013c9e:	68bb      	ldr	r3, [r7, #8]
 8013ca0:	895b      	ldrh	r3, [r3, #10]
 8013ca2:	653b      	str	r3, [r7, #80]	; 0x50
 8013ca4:	e01c      	b.n	8013ce0 <f_mkdir+0x1ac>
					fs->winsect = dsc++;
 8013ca6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013ca8:	1c5a      	adds	r2, r3, #1
 8013caa:	64fa      	str	r2, [r7, #76]	; 0x4c
 8013cac:	68ba      	ldr	r2, [r7, #8]
 8013cae:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 8013cb0:	68bb      	ldr	r3, [r7, #8]
 8013cb2:	2201      	movs	r2, #1
 8013cb4:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8013cb6:	68bb      	ldr	r3, [r7, #8]
 8013cb8:	4618      	mov	r0, r3
 8013cba:	f7fd fa9f 	bl	80111fc <sync_window>
 8013cbe:	4603      	mov	r3, r0
 8013cc0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 8013cc4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013cc8:	2b00      	cmp	r3, #0
 8013cca:	d10d      	bne.n	8013ce8 <f_mkdir+0x1b4>
					mem_set(dir, 0, SS(fs));
 8013ccc:	68bb      	ldr	r3, [r7, #8]
 8013cce:	899b      	ldrh	r3, [r3, #12]
 8013cd0:	461a      	mov	r2, r3
 8013cd2:	2100      	movs	r1, #0
 8013cd4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013cd6:	f7fd f8c8 	bl	8010e6a <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8013cda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013cdc:	3b01      	subs	r3, #1
 8013cde:	653b      	str	r3, [r7, #80]	; 0x50
 8013ce0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013ce2:	2b00      	cmp	r3, #0
 8013ce4:	d1df      	bne.n	8013ca6 <f_mkdir+0x172>
 8013ce6:	e000      	b.n	8013cea <f_mkdir+0x1b6>
					if (res != FR_OK) break;
 8013ce8:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8013cea:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013cee:	2b00      	cmp	r3, #0
 8013cf0:	d107      	bne.n	8013d02 <f_mkdir+0x1ce>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8013cf2:	f107 030c 	add.w	r3, r7, #12
 8013cf6:	4618      	mov	r0, r3
 8013cf8:	f7fe f934 	bl	8011f64 <dir_register>
 8013cfc:	4603      	mov	r3, r0
 8013cfe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 8013d02:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013d06:	2b00      	cmp	r3, #0
 8013d08:	d120      	bne.n	8013d4c <f_mkdir+0x218>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8013d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8013d0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013d10:	3316      	adds	r3, #22
 8013d12:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013d14:	4618      	mov	r0, r3
 8013d16:	f7fd f85b 	bl	8010dd0 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8013d1a:	68bb      	ldr	r3, [r7, #8]
 8013d1c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013d1e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013d20:	4618      	mov	r0, r3
 8013d22:	f7fe f84d 	bl	8011dc0 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8013d26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013d28:	330b      	adds	r3, #11
 8013d2a:	2210      	movs	r2, #16
 8013d2c:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8013d2e:	68bb      	ldr	r3, [r7, #8]
 8013d30:	2201      	movs	r2, #1
 8013d32:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8013d34:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013d38:	2b00      	cmp	r3, #0
 8013d3a:	d10e      	bne.n	8013d5a <f_mkdir+0x226>
					res = sync_fs(fs);
 8013d3c:	68bb      	ldr	r3, [r7, #8]
 8013d3e:	4618      	mov	r0, r3
 8013d40:	f7fd face 	bl	80112e0 <sync_fs>
 8013d44:	4603      	mov	r3, r0
 8013d46:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8013d4a:	e006      	b.n	8013d5a <f_mkdir+0x226>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8013d4c:	f107 030c 	add.w	r3, r7, #12
 8013d50:	2200      	movs	r2, #0
 8013d52:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013d54:	4618      	mov	r0, r3
 8013d56:	f7fd fd39 	bl	80117cc <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8013d5a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8013d5e:	4618      	mov	r0, r3
 8013d60:	3758      	adds	r7, #88	; 0x58
 8013d62:	46bd      	mov	sp, r7
 8013d64:	bd80      	pop	{r7, pc}
 8013d66:	bf00      	nop
 8013d68:	274a0000 	.word	0x274a0000

08013d6c <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8013d6c:	b580      	push	{r7, lr}
 8013d6e:	b088      	sub	sp, #32
 8013d70:	af00      	add	r7, sp, #0
 8013d72:	60f8      	str	r0, [r7, #12]
 8013d74:	60b9      	str	r1, [r7, #8]
 8013d76:	607a      	str	r2, [r7, #4]
	int n = 0;
 8013d78:	2300      	movs	r3, #0
 8013d7a:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8013d7c:	68fb      	ldr	r3, [r7, #12]
 8013d7e:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8013d80:	e017      	b.n	8013db2 <f_gets+0x46>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8013d82:	f107 0310 	add.w	r3, r7, #16
 8013d86:	f107 0114 	add.w	r1, r7, #20
 8013d8a:	2201      	movs	r2, #1
 8013d8c:	6878      	ldr	r0, [r7, #4]
 8013d8e:	f7ff f803 	bl	8012d98 <f_read>
		if (rc != 1) break;
 8013d92:	693b      	ldr	r3, [r7, #16]
 8013d94:	2b01      	cmp	r3, #1
 8013d96:	d112      	bne.n	8013dbe <f_gets+0x52>
		c = s[0];
 8013d98:	7d3b      	ldrb	r3, [r7, #20]
 8013d9a:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
		*p++ = c;
 8013d9c:	69bb      	ldr	r3, [r7, #24]
 8013d9e:	1c5a      	adds	r2, r3, #1
 8013da0:	61ba      	str	r2, [r7, #24]
 8013da2:	7dfa      	ldrb	r2, [r7, #23]
 8013da4:	701a      	strb	r2, [r3, #0]
		n++;
 8013da6:	69fb      	ldr	r3, [r7, #28]
 8013da8:	3301      	adds	r3, #1
 8013daa:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8013dac:	7dfb      	ldrb	r3, [r7, #23]
 8013dae:	2b0a      	cmp	r3, #10
 8013db0:	d007      	beq.n	8013dc2 <f_gets+0x56>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8013db2:	68bb      	ldr	r3, [r7, #8]
 8013db4:	3b01      	subs	r3, #1
 8013db6:	69fa      	ldr	r2, [r7, #28]
 8013db8:	429a      	cmp	r2, r3
 8013dba:	dbe2      	blt.n	8013d82 <f_gets+0x16>
 8013dbc:	e002      	b.n	8013dc4 <f_gets+0x58>
		if (rc != 1) break;
 8013dbe:	bf00      	nop
 8013dc0:	e000      	b.n	8013dc4 <f_gets+0x58>
		if (c == '\n') break;		/* Break on EOL */
 8013dc2:	bf00      	nop
	}
	*p = 0;
 8013dc4:	69bb      	ldr	r3, [r7, #24]
 8013dc6:	2200      	movs	r2, #0
 8013dc8:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8013dca:	69fb      	ldr	r3, [r7, #28]
 8013dcc:	2b00      	cmp	r3, #0
 8013dce:	d001      	beq.n	8013dd4 <f_gets+0x68>
 8013dd0:	68fb      	ldr	r3, [r7, #12]
 8013dd2:	e000      	b.n	8013dd6 <f_gets+0x6a>
 8013dd4:	2300      	movs	r3, #0
}
 8013dd6:	4618      	mov	r0, r3
 8013dd8:	3720      	adds	r7, #32
 8013dda:	46bd      	mov	sp, r7
 8013ddc:	bd80      	pop	{r7, pc}
	...

08013de0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8013de0:	b480      	push	{r7}
 8013de2:	b087      	sub	sp, #28
 8013de4:	af00      	add	r7, sp, #0
 8013de6:	60f8      	str	r0, [r7, #12]
 8013de8:	60b9      	str	r1, [r7, #8]
 8013dea:	4613      	mov	r3, r2
 8013dec:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8013dee:	2301      	movs	r3, #1
 8013df0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8013df2:	2300      	movs	r3, #0
 8013df4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8013df6:	4b1f      	ldr	r3, [pc, #124]	; (8013e74 <FATFS_LinkDriverEx+0x94>)
 8013df8:	7a5b      	ldrb	r3, [r3, #9]
 8013dfa:	b2db      	uxtb	r3, r3
 8013dfc:	2b00      	cmp	r3, #0
 8013dfe:	d131      	bne.n	8013e64 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8013e00:	4b1c      	ldr	r3, [pc, #112]	; (8013e74 <FATFS_LinkDriverEx+0x94>)
 8013e02:	7a5b      	ldrb	r3, [r3, #9]
 8013e04:	b2db      	uxtb	r3, r3
 8013e06:	461a      	mov	r2, r3
 8013e08:	4b1a      	ldr	r3, [pc, #104]	; (8013e74 <FATFS_LinkDriverEx+0x94>)
 8013e0a:	2100      	movs	r1, #0
 8013e0c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8013e0e:	4b19      	ldr	r3, [pc, #100]	; (8013e74 <FATFS_LinkDriverEx+0x94>)
 8013e10:	7a5b      	ldrb	r3, [r3, #9]
 8013e12:	b2db      	uxtb	r3, r3
 8013e14:	4a17      	ldr	r2, [pc, #92]	; (8013e74 <FATFS_LinkDriverEx+0x94>)
 8013e16:	009b      	lsls	r3, r3, #2
 8013e18:	4413      	add	r3, r2
 8013e1a:	68fa      	ldr	r2, [r7, #12]
 8013e1c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8013e1e:	4b15      	ldr	r3, [pc, #84]	; (8013e74 <FATFS_LinkDriverEx+0x94>)
 8013e20:	7a5b      	ldrb	r3, [r3, #9]
 8013e22:	b2db      	uxtb	r3, r3
 8013e24:	461a      	mov	r2, r3
 8013e26:	4b13      	ldr	r3, [pc, #76]	; (8013e74 <FATFS_LinkDriverEx+0x94>)
 8013e28:	4413      	add	r3, r2
 8013e2a:	79fa      	ldrb	r2, [r7, #7]
 8013e2c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8013e2e:	4b11      	ldr	r3, [pc, #68]	; (8013e74 <FATFS_LinkDriverEx+0x94>)
 8013e30:	7a5b      	ldrb	r3, [r3, #9]
 8013e32:	b2db      	uxtb	r3, r3
 8013e34:	1c5a      	adds	r2, r3, #1
 8013e36:	b2d1      	uxtb	r1, r2
 8013e38:	4a0e      	ldr	r2, [pc, #56]	; (8013e74 <FATFS_LinkDriverEx+0x94>)
 8013e3a:	7251      	strb	r1, [r2, #9]
 8013e3c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8013e3e:	7dbb      	ldrb	r3, [r7, #22]
 8013e40:	3330      	adds	r3, #48	; 0x30
 8013e42:	b2da      	uxtb	r2, r3
 8013e44:	68bb      	ldr	r3, [r7, #8]
 8013e46:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8013e48:	68bb      	ldr	r3, [r7, #8]
 8013e4a:	3301      	adds	r3, #1
 8013e4c:	223a      	movs	r2, #58	; 0x3a
 8013e4e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8013e50:	68bb      	ldr	r3, [r7, #8]
 8013e52:	3302      	adds	r3, #2
 8013e54:	222f      	movs	r2, #47	; 0x2f
 8013e56:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8013e58:	68bb      	ldr	r3, [r7, #8]
 8013e5a:	3303      	adds	r3, #3
 8013e5c:	2200      	movs	r2, #0
 8013e5e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8013e60:	2300      	movs	r3, #0
 8013e62:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8013e64:	7dfb      	ldrb	r3, [r7, #23]
}
 8013e66:	4618      	mov	r0, r3
 8013e68:	371c      	adds	r7, #28
 8013e6a:	46bd      	mov	sp, r7
 8013e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e70:	4770      	bx	lr
 8013e72:	bf00      	nop
 8013e74:	20041328 	.word	0x20041328

08013e78 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8013e78:	b580      	push	{r7, lr}
 8013e7a:	b082      	sub	sp, #8
 8013e7c:	af00      	add	r7, sp, #0
 8013e7e:	6078      	str	r0, [r7, #4]
 8013e80:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8013e82:	2200      	movs	r2, #0
 8013e84:	6839      	ldr	r1, [r7, #0]
 8013e86:	6878      	ldr	r0, [r7, #4]
 8013e88:	f7ff ffaa 	bl	8013de0 <FATFS_LinkDriverEx>
 8013e8c:	4603      	mov	r3, r0
}
 8013e8e:	4618      	mov	r0, r3
 8013e90:	3708      	adds	r7, #8
 8013e92:	46bd      	mov	sp, r7
 8013e94:	bd80      	pop	{r7, pc}

08013e96 <__cxa_guard_acquire>:
 8013e96:	6803      	ldr	r3, [r0, #0]
 8013e98:	07db      	lsls	r3, r3, #31
 8013e9a:	d406      	bmi.n	8013eaa <__cxa_guard_acquire+0x14>
 8013e9c:	7843      	ldrb	r3, [r0, #1]
 8013e9e:	b103      	cbz	r3, 8013ea2 <__cxa_guard_acquire+0xc>
 8013ea0:	deff      	udf	#255	; 0xff
 8013ea2:	2301      	movs	r3, #1
 8013ea4:	7043      	strb	r3, [r0, #1]
 8013ea6:	4618      	mov	r0, r3
 8013ea8:	4770      	bx	lr
 8013eaa:	2000      	movs	r0, #0
 8013eac:	4770      	bx	lr

08013eae <__cxa_guard_release>:
 8013eae:	2301      	movs	r3, #1
 8013eb0:	6003      	str	r3, [r0, #0]
 8013eb2:	4770      	bx	lr
 8013eb4:	0000      	movs	r0, r0
	...

08013eb8 <cos>:
 8013eb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013eba:	ec51 0b10 	vmov	r0, r1, d0
 8013ebe:	4a1e      	ldr	r2, [pc, #120]	; (8013f38 <cos+0x80>)
 8013ec0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8013ec4:	4293      	cmp	r3, r2
 8013ec6:	dc06      	bgt.n	8013ed6 <cos+0x1e>
 8013ec8:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8013f30 <cos+0x78>
 8013ecc:	f000 fa74 	bl	80143b8 <__kernel_cos>
 8013ed0:	ec51 0b10 	vmov	r0, r1, d0
 8013ed4:	e007      	b.n	8013ee6 <cos+0x2e>
 8013ed6:	4a19      	ldr	r2, [pc, #100]	; (8013f3c <cos+0x84>)
 8013ed8:	4293      	cmp	r3, r2
 8013eda:	dd09      	ble.n	8013ef0 <cos+0x38>
 8013edc:	ee10 2a10 	vmov	r2, s0
 8013ee0:	460b      	mov	r3, r1
 8013ee2:	f7ec f9e9 	bl	80002b8 <__aeabi_dsub>
 8013ee6:	ec41 0b10 	vmov	d0, r0, r1
 8013eea:	b005      	add	sp, #20
 8013eec:	f85d fb04 	ldr.w	pc, [sp], #4
 8013ef0:	4668      	mov	r0, sp
 8013ef2:	f000 f86d 	bl	8013fd0 <__ieee754_rem_pio2>
 8013ef6:	f000 0003 	and.w	r0, r0, #3
 8013efa:	2801      	cmp	r0, #1
 8013efc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013f00:	ed9d 0b00 	vldr	d0, [sp]
 8013f04:	d007      	beq.n	8013f16 <cos+0x5e>
 8013f06:	2802      	cmp	r0, #2
 8013f08:	d00e      	beq.n	8013f28 <cos+0x70>
 8013f0a:	2800      	cmp	r0, #0
 8013f0c:	d0de      	beq.n	8013ecc <cos+0x14>
 8013f0e:	2001      	movs	r0, #1
 8013f10:	f000 fe5a 	bl	8014bc8 <__kernel_sin>
 8013f14:	e7dc      	b.n	8013ed0 <cos+0x18>
 8013f16:	f000 fe57 	bl	8014bc8 <__kernel_sin>
 8013f1a:	ec53 2b10 	vmov	r2, r3, d0
 8013f1e:	ee10 0a10 	vmov	r0, s0
 8013f22:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8013f26:	e7de      	b.n	8013ee6 <cos+0x2e>
 8013f28:	f000 fa46 	bl	80143b8 <__kernel_cos>
 8013f2c:	e7f5      	b.n	8013f1a <cos+0x62>
 8013f2e:	bf00      	nop
	...
 8013f38:	3fe921fb 	.word	0x3fe921fb
 8013f3c:	7fefffff 	.word	0x7fefffff

08013f40 <sin>:
 8013f40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013f42:	ec51 0b10 	vmov	r0, r1, d0
 8013f46:	4a20      	ldr	r2, [pc, #128]	; (8013fc8 <sin+0x88>)
 8013f48:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8013f4c:	4293      	cmp	r3, r2
 8013f4e:	dc07      	bgt.n	8013f60 <sin+0x20>
 8013f50:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8013fc0 <sin+0x80>
 8013f54:	2000      	movs	r0, #0
 8013f56:	f000 fe37 	bl	8014bc8 <__kernel_sin>
 8013f5a:	ec51 0b10 	vmov	r0, r1, d0
 8013f5e:	e007      	b.n	8013f70 <sin+0x30>
 8013f60:	4a1a      	ldr	r2, [pc, #104]	; (8013fcc <sin+0x8c>)
 8013f62:	4293      	cmp	r3, r2
 8013f64:	dd09      	ble.n	8013f7a <sin+0x3a>
 8013f66:	ee10 2a10 	vmov	r2, s0
 8013f6a:	460b      	mov	r3, r1
 8013f6c:	f7ec f9a4 	bl	80002b8 <__aeabi_dsub>
 8013f70:	ec41 0b10 	vmov	d0, r0, r1
 8013f74:	b005      	add	sp, #20
 8013f76:	f85d fb04 	ldr.w	pc, [sp], #4
 8013f7a:	4668      	mov	r0, sp
 8013f7c:	f000 f828 	bl	8013fd0 <__ieee754_rem_pio2>
 8013f80:	f000 0003 	and.w	r0, r0, #3
 8013f84:	2801      	cmp	r0, #1
 8013f86:	ed9d 1b02 	vldr	d1, [sp, #8]
 8013f8a:	ed9d 0b00 	vldr	d0, [sp]
 8013f8e:	d004      	beq.n	8013f9a <sin+0x5a>
 8013f90:	2802      	cmp	r0, #2
 8013f92:	d005      	beq.n	8013fa0 <sin+0x60>
 8013f94:	b970      	cbnz	r0, 8013fb4 <sin+0x74>
 8013f96:	2001      	movs	r0, #1
 8013f98:	e7dd      	b.n	8013f56 <sin+0x16>
 8013f9a:	f000 fa0d 	bl	80143b8 <__kernel_cos>
 8013f9e:	e7dc      	b.n	8013f5a <sin+0x1a>
 8013fa0:	2001      	movs	r0, #1
 8013fa2:	f000 fe11 	bl	8014bc8 <__kernel_sin>
 8013fa6:	ec53 2b10 	vmov	r2, r3, d0
 8013faa:	ee10 0a10 	vmov	r0, s0
 8013fae:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8013fb2:	e7dd      	b.n	8013f70 <sin+0x30>
 8013fb4:	f000 fa00 	bl	80143b8 <__kernel_cos>
 8013fb8:	e7f5      	b.n	8013fa6 <sin+0x66>
 8013fba:	bf00      	nop
 8013fbc:	f3af 8000 	nop.w
	...
 8013fc8:	3fe921fb 	.word	0x3fe921fb
 8013fcc:	7fefffff 	.word	0x7fefffff

08013fd0 <__ieee754_rem_pio2>:
 8013fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013fd4:	ec57 6b10 	vmov	r6, r7, d0
 8013fd8:	4bc3      	ldr	r3, [pc, #780]	; (80142e8 <__ieee754_rem_pio2+0x318>)
 8013fda:	b08d      	sub	sp, #52	; 0x34
 8013fdc:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8013fe0:	4598      	cmp	r8, r3
 8013fe2:	4604      	mov	r4, r0
 8013fe4:	9704      	str	r7, [sp, #16]
 8013fe6:	dc07      	bgt.n	8013ff8 <__ieee754_rem_pio2+0x28>
 8013fe8:	2200      	movs	r2, #0
 8013fea:	2300      	movs	r3, #0
 8013fec:	ed84 0b00 	vstr	d0, [r4]
 8013ff0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8013ff4:	2500      	movs	r5, #0
 8013ff6:	e027      	b.n	8014048 <__ieee754_rem_pio2+0x78>
 8013ff8:	4bbc      	ldr	r3, [pc, #752]	; (80142ec <__ieee754_rem_pio2+0x31c>)
 8013ffa:	4598      	cmp	r8, r3
 8013ffc:	dc75      	bgt.n	80140ea <__ieee754_rem_pio2+0x11a>
 8013ffe:	9b04      	ldr	r3, [sp, #16]
 8014000:	4dbb      	ldr	r5, [pc, #748]	; (80142f0 <__ieee754_rem_pio2+0x320>)
 8014002:	2b00      	cmp	r3, #0
 8014004:	ee10 0a10 	vmov	r0, s0
 8014008:	a3a9      	add	r3, pc, #676	; (adr r3, 80142b0 <__ieee754_rem_pio2+0x2e0>)
 801400a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801400e:	4639      	mov	r1, r7
 8014010:	dd36      	ble.n	8014080 <__ieee754_rem_pio2+0xb0>
 8014012:	f7ec f951 	bl	80002b8 <__aeabi_dsub>
 8014016:	45a8      	cmp	r8, r5
 8014018:	4606      	mov	r6, r0
 801401a:	460f      	mov	r7, r1
 801401c:	d018      	beq.n	8014050 <__ieee754_rem_pio2+0x80>
 801401e:	a3a6      	add	r3, pc, #664	; (adr r3, 80142b8 <__ieee754_rem_pio2+0x2e8>)
 8014020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014024:	f7ec f948 	bl	80002b8 <__aeabi_dsub>
 8014028:	4602      	mov	r2, r0
 801402a:	460b      	mov	r3, r1
 801402c:	e9c4 2300 	strd	r2, r3, [r4]
 8014030:	4630      	mov	r0, r6
 8014032:	4639      	mov	r1, r7
 8014034:	f7ec f940 	bl	80002b8 <__aeabi_dsub>
 8014038:	a39f      	add	r3, pc, #636	; (adr r3, 80142b8 <__ieee754_rem_pio2+0x2e8>)
 801403a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801403e:	f7ec f93b 	bl	80002b8 <__aeabi_dsub>
 8014042:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8014046:	2501      	movs	r5, #1
 8014048:	4628      	mov	r0, r5
 801404a:	b00d      	add	sp, #52	; 0x34
 801404c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014050:	a39b      	add	r3, pc, #620	; (adr r3, 80142c0 <__ieee754_rem_pio2+0x2f0>)
 8014052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014056:	f7ec f92f 	bl	80002b8 <__aeabi_dsub>
 801405a:	a39b      	add	r3, pc, #620	; (adr r3, 80142c8 <__ieee754_rem_pio2+0x2f8>)
 801405c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014060:	4606      	mov	r6, r0
 8014062:	460f      	mov	r7, r1
 8014064:	f7ec f928 	bl	80002b8 <__aeabi_dsub>
 8014068:	4602      	mov	r2, r0
 801406a:	460b      	mov	r3, r1
 801406c:	e9c4 2300 	strd	r2, r3, [r4]
 8014070:	4630      	mov	r0, r6
 8014072:	4639      	mov	r1, r7
 8014074:	f7ec f920 	bl	80002b8 <__aeabi_dsub>
 8014078:	a393      	add	r3, pc, #588	; (adr r3, 80142c8 <__ieee754_rem_pio2+0x2f8>)
 801407a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801407e:	e7de      	b.n	801403e <__ieee754_rem_pio2+0x6e>
 8014080:	f7ec f91c 	bl	80002bc <__adddf3>
 8014084:	45a8      	cmp	r8, r5
 8014086:	4606      	mov	r6, r0
 8014088:	460f      	mov	r7, r1
 801408a:	d016      	beq.n	80140ba <__ieee754_rem_pio2+0xea>
 801408c:	a38a      	add	r3, pc, #552	; (adr r3, 80142b8 <__ieee754_rem_pio2+0x2e8>)
 801408e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014092:	f7ec f913 	bl	80002bc <__adddf3>
 8014096:	4602      	mov	r2, r0
 8014098:	460b      	mov	r3, r1
 801409a:	e9c4 2300 	strd	r2, r3, [r4]
 801409e:	4630      	mov	r0, r6
 80140a0:	4639      	mov	r1, r7
 80140a2:	f7ec f909 	bl	80002b8 <__aeabi_dsub>
 80140a6:	a384      	add	r3, pc, #528	; (adr r3, 80142b8 <__ieee754_rem_pio2+0x2e8>)
 80140a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140ac:	f7ec f906 	bl	80002bc <__adddf3>
 80140b0:	f04f 35ff 	mov.w	r5, #4294967295
 80140b4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80140b8:	e7c6      	b.n	8014048 <__ieee754_rem_pio2+0x78>
 80140ba:	a381      	add	r3, pc, #516	; (adr r3, 80142c0 <__ieee754_rem_pio2+0x2f0>)
 80140bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140c0:	f7ec f8fc 	bl	80002bc <__adddf3>
 80140c4:	a380      	add	r3, pc, #512	; (adr r3, 80142c8 <__ieee754_rem_pio2+0x2f8>)
 80140c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140ca:	4606      	mov	r6, r0
 80140cc:	460f      	mov	r7, r1
 80140ce:	f7ec f8f5 	bl	80002bc <__adddf3>
 80140d2:	4602      	mov	r2, r0
 80140d4:	460b      	mov	r3, r1
 80140d6:	e9c4 2300 	strd	r2, r3, [r4]
 80140da:	4630      	mov	r0, r6
 80140dc:	4639      	mov	r1, r7
 80140de:	f7ec f8eb 	bl	80002b8 <__aeabi_dsub>
 80140e2:	a379      	add	r3, pc, #484	; (adr r3, 80142c8 <__ieee754_rem_pio2+0x2f8>)
 80140e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140e8:	e7e0      	b.n	80140ac <__ieee754_rem_pio2+0xdc>
 80140ea:	4b82      	ldr	r3, [pc, #520]	; (80142f4 <__ieee754_rem_pio2+0x324>)
 80140ec:	4598      	cmp	r8, r3
 80140ee:	f300 80d0 	bgt.w	8014292 <__ieee754_rem_pio2+0x2c2>
 80140f2:	f000 fe23 	bl	8014d3c <fabs>
 80140f6:	ec57 6b10 	vmov	r6, r7, d0
 80140fa:	ee10 0a10 	vmov	r0, s0
 80140fe:	a374      	add	r3, pc, #464	; (adr r3, 80142d0 <__ieee754_rem_pio2+0x300>)
 8014100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014104:	4639      	mov	r1, r7
 8014106:	f7ec fa8f 	bl	8000628 <__aeabi_dmul>
 801410a:	2200      	movs	r2, #0
 801410c:	4b7a      	ldr	r3, [pc, #488]	; (80142f8 <__ieee754_rem_pio2+0x328>)
 801410e:	f7ec f8d5 	bl	80002bc <__adddf3>
 8014112:	f7ec fd39 	bl	8000b88 <__aeabi_d2iz>
 8014116:	4605      	mov	r5, r0
 8014118:	f7ec fa1c 	bl	8000554 <__aeabi_i2d>
 801411c:	a364      	add	r3, pc, #400	; (adr r3, 80142b0 <__ieee754_rem_pio2+0x2e0>)
 801411e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014122:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014126:	f7ec fa7f 	bl	8000628 <__aeabi_dmul>
 801412a:	4602      	mov	r2, r0
 801412c:	460b      	mov	r3, r1
 801412e:	4630      	mov	r0, r6
 8014130:	4639      	mov	r1, r7
 8014132:	f7ec f8c1 	bl	80002b8 <__aeabi_dsub>
 8014136:	a360      	add	r3, pc, #384	; (adr r3, 80142b8 <__ieee754_rem_pio2+0x2e8>)
 8014138:	e9d3 2300 	ldrd	r2, r3, [r3]
 801413c:	4682      	mov	sl, r0
 801413e:	468b      	mov	fp, r1
 8014140:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014144:	f7ec fa70 	bl	8000628 <__aeabi_dmul>
 8014148:	2d1f      	cmp	r5, #31
 801414a:	4606      	mov	r6, r0
 801414c:	460f      	mov	r7, r1
 801414e:	dc0c      	bgt.n	801416a <__ieee754_rem_pio2+0x19a>
 8014150:	1e6a      	subs	r2, r5, #1
 8014152:	4b6a      	ldr	r3, [pc, #424]	; (80142fc <__ieee754_rem_pio2+0x32c>)
 8014154:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014158:	4543      	cmp	r3, r8
 801415a:	d006      	beq.n	801416a <__ieee754_rem_pio2+0x19a>
 801415c:	4632      	mov	r2, r6
 801415e:	463b      	mov	r3, r7
 8014160:	4650      	mov	r0, sl
 8014162:	4659      	mov	r1, fp
 8014164:	f7ec f8a8 	bl	80002b8 <__aeabi_dsub>
 8014168:	e00e      	b.n	8014188 <__ieee754_rem_pio2+0x1b8>
 801416a:	4632      	mov	r2, r6
 801416c:	463b      	mov	r3, r7
 801416e:	4650      	mov	r0, sl
 8014170:	4659      	mov	r1, fp
 8014172:	f7ec f8a1 	bl	80002b8 <__aeabi_dsub>
 8014176:	ea4f 5328 	mov.w	r3, r8, asr #20
 801417a:	9305      	str	r3, [sp, #20]
 801417c:	9a05      	ldr	r2, [sp, #20]
 801417e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8014182:	1ad3      	subs	r3, r2, r3
 8014184:	2b10      	cmp	r3, #16
 8014186:	dc02      	bgt.n	801418e <__ieee754_rem_pio2+0x1be>
 8014188:	e9c4 0100 	strd	r0, r1, [r4]
 801418c:	e039      	b.n	8014202 <__ieee754_rem_pio2+0x232>
 801418e:	a34c      	add	r3, pc, #304	; (adr r3, 80142c0 <__ieee754_rem_pio2+0x2f0>)
 8014190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014194:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014198:	f7ec fa46 	bl	8000628 <__aeabi_dmul>
 801419c:	4606      	mov	r6, r0
 801419e:	460f      	mov	r7, r1
 80141a0:	4602      	mov	r2, r0
 80141a2:	460b      	mov	r3, r1
 80141a4:	4650      	mov	r0, sl
 80141a6:	4659      	mov	r1, fp
 80141a8:	f7ec f886 	bl	80002b8 <__aeabi_dsub>
 80141ac:	4602      	mov	r2, r0
 80141ae:	460b      	mov	r3, r1
 80141b0:	4680      	mov	r8, r0
 80141b2:	4689      	mov	r9, r1
 80141b4:	4650      	mov	r0, sl
 80141b6:	4659      	mov	r1, fp
 80141b8:	f7ec f87e 	bl	80002b8 <__aeabi_dsub>
 80141bc:	4632      	mov	r2, r6
 80141be:	463b      	mov	r3, r7
 80141c0:	f7ec f87a 	bl	80002b8 <__aeabi_dsub>
 80141c4:	a340      	add	r3, pc, #256	; (adr r3, 80142c8 <__ieee754_rem_pio2+0x2f8>)
 80141c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141ca:	4606      	mov	r6, r0
 80141cc:	460f      	mov	r7, r1
 80141ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80141d2:	f7ec fa29 	bl	8000628 <__aeabi_dmul>
 80141d6:	4632      	mov	r2, r6
 80141d8:	463b      	mov	r3, r7
 80141da:	f7ec f86d 	bl	80002b8 <__aeabi_dsub>
 80141de:	4602      	mov	r2, r0
 80141e0:	460b      	mov	r3, r1
 80141e2:	4606      	mov	r6, r0
 80141e4:	460f      	mov	r7, r1
 80141e6:	4640      	mov	r0, r8
 80141e8:	4649      	mov	r1, r9
 80141ea:	f7ec f865 	bl	80002b8 <__aeabi_dsub>
 80141ee:	9a05      	ldr	r2, [sp, #20]
 80141f0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80141f4:	1ad3      	subs	r3, r2, r3
 80141f6:	2b31      	cmp	r3, #49	; 0x31
 80141f8:	dc20      	bgt.n	801423c <__ieee754_rem_pio2+0x26c>
 80141fa:	e9c4 0100 	strd	r0, r1, [r4]
 80141fe:	46c2      	mov	sl, r8
 8014200:	46cb      	mov	fp, r9
 8014202:	e9d4 8900 	ldrd	r8, r9, [r4]
 8014206:	4650      	mov	r0, sl
 8014208:	4642      	mov	r2, r8
 801420a:	464b      	mov	r3, r9
 801420c:	4659      	mov	r1, fp
 801420e:	f7ec f853 	bl	80002b8 <__aeabi_dsub>
 8014212:	463b      	mov	r3, r7
 8014214:	4632      	mov	r2, r6
 8014216:	f7ec f84f 	bl	80002b8 <__aeabi_dsub>
 801421a:	9b04      	ldr	r3, [sp, #16]
 801421c:	2b00      	cmp	r3, #0
 801421e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8014222:	f6bf af11 	bge.w	8014048 <__ieee754_rem_pio2+0x78>
 8014226:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801422a:	6063      	str	r3, [r4, #4]
 801422c:	f8c4 8000 	str.w	r8, [r4]
 8014230:	60a0      	str	r0, [r4, #8]
 8014232:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014236:	60e3      	str	r3, [r4, #12]
 8014238:	426d      	negs	r5, r5
 801423a:	e705      	b.n	8014048 <__ieee754_rem_pio2+0x78>
 801423c:	a326      	add	r3, pc, #152	; (adr r3, 80142d8 <__ieee754_rem_pio2+0x308>)
 801423e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014242:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014246:	f7ec f9ef 	bl	8000628 <__aeabi_dmul>
 801424a:	4606      	mov	r6, r0
 801424c:	460f      	mov	r7, r1
 801424e:	4602      	mov	r2, r0
 8014250:	460b      	mov	r3, r1
 8014252:	4640      	mov	r0, r8
 8014254:	4649      	mov	r1, r9
 8014256:	f7ec f82f 	bl	80002b8 <__aeabi_dsub>
 801425a:	4602      	mov	r2, r0
 801425c:	460b      	mov	r3, r1
 801425e:	4682      	mov	sl, r0
 8014260:	468b      	mov	fp, r1
 8014262:	4640      	mov	r0, r8
 8014264:	4649      	mov	r1, r9
 8014266:	f7ec f827 	bl	80002b8 <__aeabi_dsub>
 801426a:	4632      	mov	r2, r6
 801426c:	463b      	mov	r3, r7
 801426e:	f7ec f823 	bl	80002b8 <__aeabi_dsub>
 8014272:	a31b      	add	r3, pc, #108	; (adr r3, 80142e0 <__ieee754_rem_pio2+0x310>)
 8014274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014278:	4606      	mov	r6, r0
 801427a:	460f      	mov	r7, r1
 801427c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014280:	f7ec f9d2 	bl	8000628 <__aeabi_dmul>
 8014284:	4632      	mov	r2, r6
 8014286:	463b      	mov	r3, r7
 8014288:	f7ec f816 	bl	80002b8 <__aeabi_dsub>
 801428c:	4606      	mov	r6, r0
 801428e:	460f      	mov	r7, r1
 8014290:	e764      	b.n	801415c <__ieee754_rem_pio2+0x18c>
 8014292:	4b1b      	ldr	r3, [pc, #108]	; (8014300 <__ieee754_rem_pio2+0x330>)
 8014294:	4598      	cmp	r8, r3
 8014296:	dd35      	ble.n	8014304 <__ieee754_rem_pio2+0x334>
 8014298:	ee10 2a10 	vmov	r2, s0
 801429c:	463b      	mov	r3, r7
 801429e:	4630      	mov	r0, r6
 80142a0:	4639      	mov	r1, r7
 80142a2:	f7ec f809 	bl	80002b8 <__aeabi_dsub>
 80142a6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80142aa:	e9c4 0100 	strd	r0, r1, [r4]
 80142ae:	e6a1      	b.n	8013ff4 <__ieee754_rem_pio2+0x24>
 80142b0:	54400000 	.word	0x54400000
 80142b4:	3ff921fb 	.word	0x3ff921fb
 80142b8:	1a626331 	.word	0x1a626331
 80142bc:	3dd0b461 	.word	0x3dd0b461
 80142c0:	1a600000 	.word	0x1a600000
 80142c4:	3dd0b461 	.word	0x3dd0b461
 80142c8:	2e037073 	.word	0x2e037073
 80142cc:	3ba3198a 	.word	0x3ba3198a
 80142d0:	6dc9c883 	.word	0x6dc9c883
 80142d4:	3fe45f30 	.word	0x3fe45f30
 80142d8:	2e000000 	.word	0x2e000000
 80142dc:	3ba3198a 	.word	0x3ba3198a
 80142e0:	252049c1 	.word	0x252049c1
 80142e4:	397b839a 	.word	0x397b839a
 80142e8:	3fe921fb 	.word	0x3fe921fb
 80142ec:	4002d97b 	.word	0x4002d97b
 80142f0:	3ff921fb 	.word	0x3ff921fb
 80142f4:	413921fb 	.word	0x413921fb
 80142f8:	3fe00000 	.word	0x3fe00000
 80142fc:	08019a70 	.word	0x08019a70
 8014300:	7fefffff 	.word	0x7fefffff
 8014304:	ea4f 5528 	mov.w	r5, r8, asr #20
 8014308:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 801430c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8014310:	4630      	mov	r0, r6
 8014312:	460f      	mov	r7, r1
 8014314:	f7ec fc38 	bl	8000b88 <__aeabi_d2iz>
 8014318:	f7ec f91c 	bl	8000554 <__aeabi_i2d>
 801431c:	4602      	mov	r2, r0
 801431e:	460b      	mov	r3, r1
 8014320:	4630      	mov	r0, r6
 8014322:	4639      	mov	r1, r7
 8014324:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8014328:	f7eb ffc6 	bl	80002b8 <__aeabi_dsub>
 801432c:	2200      	movs	r2, #0
 801432e:	4b1f      	ldr	r3, [pc, #124]	; (80143ac <__ieee754_rem_pio2+0x3dc>)
 8014330:	f7ec f97a 	bl	8000628 <__aeabi_dmul>
 8014334:	460f      	mov	r7, r1
 8014336:	4606      	mov	r6, r0
 8014338:	f7ec fc26 	bl	8000b88 <__aeabi_d2iz>
 801433c:	f7ec f90a 	bl	8000554 <__aeabi_i2d>
 8014340:	4602      	mov	r2, r0
 8014342:	460b      	mov	r3, r1
 8014344:	4630      	mov	r0, r6
 8014346:	4639      	mov	r1, r7
 8014348:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801434c:	f7eb ffb4 	bl	80002b8 <__aeabi_dsub>
 8014350:	2200      	movs	r2, #0
 8014352:	4b16      	ldr	r3, [pc, #88]	; (80143ac <__ieee754_rem_pio2+0x3dc>)
 8014354:	f7ec f968 	bl	8000628 <__aeabi_dmul>
 8014358:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801435c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8014360:	f04f 0803 	mov.w	r8, #3
 8014364:	2600      	movs	r6, #0
 8014366:	2700      	movs	r7, #0
 8014368:	4632      	mov	r2, r6
 801436a:	463b      	mov	r3, r7
 801436c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8014370:	f108 3aff 	add.w	sl, r8, #4294967295
 8014374:	f7ec fbc0 	bl	8000af8 <__aeabi_dcmpeq>
 8014378:	b9b0      	cbnz	r0, 80143a8 <__ieee754_rem_pio2+0x3d8>
 801437a:	4b0d      	ldr	r3, [pc, #52]	; (80143b0 <__ieee754_rem_pio2+0x3e0>)
 801437c:	9301      	str	r3, [sp, #4]
 801437e:	2302      	movs	r3, #2
 8014380:	9300      	str	r3, [sp, #0]
 8014382:	462a      	mov	r2, r5
 8014384:	4643      	mov	r3, r8
 8014386:	4621      	mov	r1, r4
 8014388:	a806      	add	r0, sp, #24
 801438a:	f000 f8dd 	bl	8014548 <__kernel_rem_pio2>
 801438e:	9b04      	ldr	r3, [sp, #16]
 8014390:	2b00      	cmp	r3, #0
 8014392:	4605      	mov	r5, r0
 8014394:	f6bf ae58 	bge.w	8014048 <__ieee754_rem_pio2+0x78>
 8014398:	6863      	ldr	r3, [r4, #4]
 801439a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801439e:	6063      	str	r3, [r4, #4]
 80143a0:	68e3      	ldr	r3, [r4, #12]
 80143a2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80143a6:	e746      	b.n	8014236 <__ieee754_rem_pio2+0x266>
 80143a8:	46d0      	mov	r8, sl
 80143aa:	e7dd      	b.n	8014368 <__ieee754_rem_pio2+0x398>
 80143ac:	41700000 	.word	0x41700000
 80143b0:	08019af0 	.word	0x08019af0
 80143b4:	00000000 	.word	0x00000000

080143b8 <__kernel_cos>:
 80143b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80143bc:	ec59 8b10 	vmov	r8, r9, d0
 80143c0:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 80143c4:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80143c8:	ed2d 8b02 	vpush	{d8}
 80143cc:	eeb0 8a41 	vmov.f32	s16, s2
 80143d0:	eef0 8a61 	vmov.f32	s17, s3
 80143d4:	da07      	bge.n	80143e6 <__kernel_cos+0x2e>
 80143d6:	ee10 0a10 	vmov	r0, s0
 80143da:	4649      	mov	r1, r9
 80143dc:	f7ec fbd4 	bl	8000b88 <__aeabi_d2iz>
 80143e0:	2800      	cmp	r0, #0
 80143e2:	f000 8089 	beq.w	80144f8 <__kernel_cos+0x140>
 80143e6:	4642      	mov	r2, r8
 80143e8:	464b      	mov	r3, r9
 80143ea:	4640      	mov	r0, r8
 80143ec:	4649      	mov	r1, r9
 80143ee:	f7ec f91b 	bl	8000628 <__aeabi_dmul>
 80143f2:	2200      	movs	r2, #0
 80143f4:	4b4e      	ldr	r3, [pc, #312]	; (8014530 <__kernel_cos+0x178>)
 80143f6:	4604      	mov	r4, r0
 80143f8:	460d      	mov	r5, r1
 80143fa:	f7ec f915 	bl	8000628 <__aeabi_dmul>
 80143fe:	a340      	add	r3, pc, #256	; (adr r3, 8014500 <__kernel_cos+0x148>)
 8014400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014404:	4682      	mov	sl, r0
 8014406:	468b      	mov	fp, r1
 8014408:	4620      	mov	r0, r4
 801440a:	4629      	mov	r1, r5
 801440c:	f7ec f90c 	bl	8000628 <__aeabi_dmul>
 8014410:	a33d      	add	r3, pc, #244	; (adr r3, 8014508 <__kernel_cos+0x150>)
 8014412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014416:	f7eb ff51 	bl	80002bc <__adddf3>
 801441a:	4622      	mov	r2, r4
 801441c:	462b      	mov	r3, r5
 801441e:	f7ec f903 	bl	8000628 <__aeabi_dmul>
 8014422:	a33b      	add	r3, pc, #236	; (adr r3, 8014510 <__kernel_cos+0x158>)
 8014424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014428:	f7eb ff46 	bl	80002b8 <__aeabi_dsub>
 801442c:	4622      	mov	r2, r4
 801442e:	462b      	mov	r3, r5
 8014430:	f7ec f8fa 	bl	8000628 <__aeabi_dmul>
 8014434:	a338      	add	r3, pc, #224	; (adr r3, 8014518 <__kernel_cos+0x160>)
 8014436:	e9d3 2300 	ldrd	r2, r3, [r3]
 801443a:	f7eb ff3f 	bl	80002bc <__adddf3>
 801443e:	4622      	mov	r2, r4
 8014440:	462b      	mov	r3, r5
 8014442:	f7ec f8f1 	bl	8000628 <__aeabi_dmul>
 8014446:	a336      	add	r3, pc, #216	; (adr r3, 8014520 <__kernel_cos+0x168>)
 8014448:	e9d3 2300 	ldrd	r2, r3, [r3]
 801444c:	f7eb ff34 	bl	80002b8 <__aeabi_dsub>
 8014450:	4622      	mov	r2, r4
 8014452:	462b      	mov	r3, r5
 8014454:	f7ec f8e8 	bl	8000628 <__aeabi_dmul>
 8014458:	a333      	add	r3, pc, #204	; (adr r3, 8014528 <__kernel_cos+0x170>)
 801445a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801445e:	f7eb ff2d 	bl	80002bc <__adddf3>
 8014462:	4622      	mov	r2, r4
 8014464:	462b      	mov	r3, r5
 8014466:	f7ec f8df 	bl	8000628 <__aeabi_dmul>
 801446a:	4622      	mov	r2, r4
 801446c:	462b      	mov	r3, r5
 801446e:	f7ec f8db 	bl	8000628 <__aeabi_dmul>
 8014472:	ec53 2b18 	vmov	r2, r3, d8
 8014476:	4604      	mov	r4, r0
 8014478:	460d      	mov	r5, r1
 801447a:	4640      	mov	r0, r8
 801447c:	4649      	mov	r1, r9
 801447e:	f7ec f8d3 	bl	8000628 <__aeabi_dmul>
 8014482:	460b      	mov	r3, r1
 8014484:	4602      	mov	r2, r0
 8014486:	4629      	mov	r1, r5
 8014488:	4620      	mov	r0, r4
 801448a:	f7eb ff15 	bl	80002b8 <__aeabi_dsub>
 801448e:	4b29      	ldr	r3, [pc, #164]	; (8014534 <__kernel_cos+0x17c>)
 8014490:	429e      	cmp	r6, r3
 8014492:	4680      	mov	r8, r0
 8014494:	4689      	mov	r9, r1
 8014496:	dc11      	bgt.n	80144bc <__kernel_cos+0x104>
 8014498:	4602      	mov	r2, r0
 801449a:	460b      	mov	r3, r1
 801449c:	4650      	mov	r0, sl
 801449e:	4659      	mov	r1, fp
 80144a0:	f7eb ff0a 	bl	80002b8 <__aeabi_dsub>
 80144a4:	460b      	mov	r3, r1
 80144a6:	4924      	ldr	r1, [pc, #144]	; (8014538 <__kernel_cos+0x180>)
 80144a8:	4602      	mov	r2, r0
 80144aa:	2000      	movs	r0, #0
 80144ac:	f7eb ff04 	bl	80002b8 <__aeabi_dsub>
 80144b0:	ecbd 8b02 	vpop	{d8}
 80144b4:	ec41 0b10 	vmov	d0, r0, r1
 80144b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80144bc:	4b1f      	ldr	r3, [pc, #124]	; (801453c <__kernel_cos+0x184>)
 80144be:	491e      	ldr	r1, [pc, #120]	; (8014538 <__kernel_cos+0x180>)
 80144c0:	429e      	cmp	r6, r3
 80144c2:	bfcc      	ite	gt
 80144c4:	4d1e      	ldrgt	r5, [pc, #120]	; (8014540 <__kernel_cos+0x188>)
 80144c6:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 80144ca:	2400      	movs	r4, #0
 80144cc:	4622      	mov	r2, r4
 80144ce:	462b      	mov	r3, r5
 80144d0:	2000      	movs	r0, #0
 80144d2:	f7eb fef1 	bl	80002b8 <__aeabi_dsub>
 80144d6:	4622      	mov	r2, r4
 80144d8:	4606      	mov	r6, r0
 80144da:	460f      	mov	r7, r1
 80144dc:	462b      	mov	r3, r5
 80144de:	4650      	mov	r0, sl
 80144e0:	4659      	mov	r1, fp
 80144e2:	f7eb fee9 	bl	80002b8 <__aeabi_dsub>
 80144e6:	4642      	mov	r2, r8
 80144e8:	464b      	mov	r3, r9
 80144ea:	f7eb fee5 	bl	80002b8 <__aeabi_dsub>
 80144ee:	4602      	mov	r2, r0
 80144f0:	460b      	mov	r3, r1
 80144f2:	4630      	mov	r0, r6
 80144f4:	4639      	mov	r1, r7
 80144f6:	e7d9      	b.n	80144ac <__kernel_cos+0xf4>
 80144f8:	2000      	movs	r0, #0
 80144fa:	490f      	ldr	r1, [pc, #60]	; (8014538 <__kernel_cos+0x180>)
 80144fc:	e7d8      	b.n	80144b0 <__kernel_cos+0xf8>
 80144fe:	bf00      	nop
 8014500:	be8838d4 	.word	0xbe8838d4
 8014504:	bda8fae9 	.word	0xbda8fae9
 8014508:	bdb4b1c4 	.word	0xbdb4b1c4
 801450c:	3e21ee9e 	.word	0x3e21ee9e
 8014510:	809c52ad 	.word	0x809c52ad
 8014514:	3e927e4f 	.word	0x3e927e4f
 8014518:	19cb1590 	.word	0x19cb1590
 801451c:	3efa01a0 	.word	0x3efa01a0
 8014520:	16c15177 	.word	0x16c15177
 8014524:	3f56c16c 	.word	0x3f56c16c
 8014528:	5555554c 	.word	0x5555554c
 801452c:	3fa55555 	.word	0x3fa55555
 8014530:	3fe00000 	.word	0x3fe00000
 8014534:	3fd33332 	.word	0x3fd33332
 8014538:	3ff00000 	.word	0x3ff00000
 801453c:	3fe90000 	.word	0x3fe90000
 8014540:	3fd20000 	.word	0x3fd20000
 8014544:	00000000 	.word	0x00000000

08014548 <__kernel_rem_pio2>:
 8014548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801454c:	ed2d 8b02 	vpush	{d8}
 8014550:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8014554:	1ed4      	subs	r4, r2, #3
 8014556:	9308      	str	r3, [sp, #32]
 8014558:	9101      	str	r1, [sp, #4]
 801455a:	4bc5      	ldr	r3, [pc, #788]	; (8014870 <__kernel_rem_pio2+0x328>)
 801455c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 801455e:	9009      	str	r0, [sp, #36]	; 0x24
 8014560:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014564:	9304      	str	r3, [sp, #16]
 8014566:	9b08      	ldr	r3, [sp, #32]
 8014568:	3b01      	subs	r3, #1
 801456a:	9307      	str	r3, [sp, #28]
 801456c:	2318      	movs	r3, #24
 801456e:	fb94 f4f3 	sdiv	r4, r4, r3
 8014572:	f06f 0317 	mvn.w	r3, #23
 8014576:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 801457a:	fb04 3303 	mla	r3, r4, r3, r3
 801457e:	eb03 0a02 	add.w	sl, r3, r2
 8014582:	9b04      	ldr	r3, [sp, #16]
 8014584:	9a07      	ldr	r2, [sp, #28]
 8014586:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8014860 <__kernel_rem_pio2+0x318>
 801458a:	eb03 0802 	add.w	r8, r3, r2
 801458e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8014590:	1aa7      	subs	r7, r4, r2
 8014592:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8014596:	ae22      	add	r6, sp, #136	; 0x88
 8014598:	2500      	movs	r5, #0
 801459a:	4545      	cmp	r5, r8
 801459c:	dd13      	ble.n	80145c6 <__kernel_rem_pio2+0x7e>
 801459e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8014860 <__kernel_rem_pio2+0x318>
 80145a2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80145a6:	2600      	movs	r6, #0
 80145a8:	9b04      	ldr	r3, [sp, #16]
 80145aa:	429e      	cmp	r6, r3
 80145ac:	dc32      	bgt.n	8014614 <__kernel_rem_pio2+0xcc>
 80145ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80145b0:	9302      	str	r3, [sp, #8]
 80145b2:	9b08      	ldr	r3, [sp, #32]
 80145b4:	199d      	adds	r5, r3, r6
 80145b6:	ab22      	add	r3, sp, #136	; 0x88
 80145b8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80145bc:	9306      	str	r3, [sp, #24]
 80145be:	ec59 8b18 	vmov	r8, r9, d8
 80145c2:	2700      	movs	r7, #0
 80145c4:	e01f      	b.n	8014606 <__kernel_rem_pio2+0xbe>
 80145c6:	42ef      	cmn	r7, r5
 80145c8:	d407      	bmi.n	80145da <__kernel_rem_pio2+0x92>
 80145ca:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80145ce:	f7eb ffc1 	bl	8000554 <__aeabi_i2d>
 80145d2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80145d6:	3501      	adds	r5, #1
 80145d8:	e7df      	b.n	801459a <__kernel_rem_pio2+0x52>
 80145da:	ec51 0b18 	vmov	r0, r1, d8
 80145de:	e7f8      	b.n	80145d2 <__kernel_rem_pio2+0x8a>
 80145e0:	9906      	ldr	r1, [sp, #24]
 80145e2:	9d02      	ldr	r5, [sp, #8]
 80145e4:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 80145e8:	9106      	str	r1, [sp, #24]
 80145ea:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 80145ee:	9502      	str	r5, [sp, #8]
 80145f0:	f7ec f81a 	bl	8000628 <__aeabi_dmul>
 80145f4:	4602      	mov	r2, r0
 80145f6:	460b      	mov	r3, r1
 80145f8:	4640      	mov	r0, r8
 80145fa:	4649      	mov	r1, r9
 80145fc:	f7eb fe5e 	bl	80002bc <__adddf3>
 8014600:	3701      	adds	r7, #1
 8014602:	4680      	mov	r8, r0
 8014604:	4689      	mov	r9, r1
 8014606:	9b07      	ldr	r3, [sp, #28]
 8014608:	429f      	cmp	r7, r3
 801460a:	dde9      	ble.n	80145e0 <__kernel_rem_pio2+0x98>
 801460c:	e8eb 8902 	strd	r8, r9, [fp], #8
 8014610:	3601      	adds	r6, #1
 8014612:	e7c9      	b.n	80145a8 <__kernel_rem_pio2+0x60>
 8014614:	9b04      	ldr	r3, [sp, #16]
 8014616:	aa0e      	add	r2, sp, #56	; 0x38
 8014618:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801461c:	930c      	str	r3, [sp, #48]	; 0x30
 801461e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8014620:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8014624:	9c04      	ldr	r4, [sp, #16]
 8014626:	930b      	str	r3, [sp, #44]	; 0x2c
 8014628:	ab9a      	add	r3, sp, #616	; 0x268
 801462a:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 801462e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8014632:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014636:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 801463a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 801463e:	ab9a      	add	r3, sp, #616	; 0x268
 8014640:	445b      	add	r3, fp
 8014642:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8014646:	2500      	movs	r5, #0
 8014648:	1b63      	subs	r3, r4, r5
 801464a:	2b00      	cmp	r3, #0
 801464c:	dc78      	bgt.n	8014740 <__kernel_rem_pio2+0x1f8>
 801464e:	4650      	mov	r0, sl
 8014650:	ec49 8b10 	vmov	d0, r8, r9
 8014654:	f000 fc00 	bl	8014e58 <scalbn>
 8014658:	ec57 6b10 	vmov	r6, r7, d0
 801465c:	2200      	movs	r2, #0
 801465e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8014662:	ee10 0a10 	vmov	r0, s0
 8014666:	4639      	mov	r1, r7
 8014668:	f7eb ffde 	bl	8000628 <__aeabi_dmul>
 801466c:	ec41 0b10 	vmov	d0, r0, r1
 8014670:	f000 fb6e 	bl	8014d50 <floor>
 8014674:	2200      	movs	r2, #0
 8014676:	ec51 0b10 	vmov	r0, r1, d0
 801467a:	4b7e      	ldr	r3, [pc, #504]	; (8014874 <__kernel_rem_pio2+0x32c>)
 801467c:	f7eb ffd4 	bl	8000628 <__aeabi_dmul>
 8014680:	4602      	mov	r2, r0
 8014682:	460b      	mov	r3, r1
 8014684:	4630      	mov	r0, r6
 8014686:	4639      	mov	r1, r7
 8014688:	f7eb fe16 	bl	80002b8 <__aeabi_dsub>
 801468c:	460f      	mov	r7, r1
 801468e:	4606      	mov	r6, r0
 8014690:	f7ec fa7a 	bl	8000b88 <__aeabi_d2iz>
 8014694:	9006      	str	r0, [sp, #24]
 8014696:	f7eb ff5d 	bl	8000554 <__aeabi_i2d>
 801469a:	4602      	mov	r2, r0
 801469c:	460b      	mov	r3, r1
 801469e:	4630      	mov	r0, r6
 80146a0:	4639      	mov	r1, r7
 80146a2:	f7eb fe09 	bl	80002b8 <__aeabi_dsub>
 80146a6:	f1ba 0f00 	cmp.w	sl, #0
 80146aa:	4606      	mov	r6, r0
 80146ac:	460f      	mov	r7, r1
 80146ae:	dd6c      	ble.n	801478a <__kernel_rem_pio2+0x242>
 80146b0:	1e62      	subs	r2, r4, #1
 80146b2:	ab0e      	add	r3, sp, #56	; 0x38
 80146b4:	f1ca 0118 	rsb	r1, sl, #24
 80146b8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80146bc:	9d06      	ldr	r5, [sp, #24]
 80146be:	fa40 f301 	asr.w	r3, r0, r1
 80146c2:	441d      	add	r5, r3
 80146c4:	408b      	lsls	r3, r1
 80146c6:	1ac0      	subs	r0, r0, r3
 80146c8:	ab0e      	add	r3, sp, #56	; 0x38
 80146ca:	9506      	str	r5, [sp, #24]
 80146cc:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80146d0:	f1ca 0317 	rsb	r3, sl, #23
 80146d4:	fa40 f303 	asr.w	r3, r0, r3
 80146d8:	9302      	str	r3, [sp, #8]
 80146da:	9b02      	ldr	r3, [sp, #8]
 80146dc:	2b00      	cmp	r3, #0
 80146de:	dd62      	ble.n	80147a6 <__kernel_rem_pio2+0x25e>
 80146e0:	9b06      	ldr	r3, [sp, #24]
 80146e2:	2200      	movs	r2, #0
 80146e4:	3301      	adds	r3, #1
 80146e6:	9306      	str	r3, [sp, #24]
 80146e8:	4615      	mov	r5, r2
 80146ea:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80146ee:	4294      	cmp	r4, r2
 80146f0:	f300 8095 	bgt.w	801481e <__kernel_rem_pio2+0x2d6>
 80146f4:	f1ba 0f00 	cmp.w	sl, #0
 80146f8:	dd07      	ble.n	801470a <__kernel_rem_pio2+0x1c2>
 80146fa:	f1ba 0f01 	cmp.w	sl, #1
 80146fe:	f000 80a2 	beq.w	8014846 <__kernel_rem_pio2+0x2fe>
 8014702:	f1ba 0f02 	cmp.w	sl, #2
 8014706:	f000 80c1 	beq.w	801488c <__kernel_rem_pio2+0x344>
 801470a:	9b02      	ldr	r3, [sp, #8]
 801470c:	2b02      	cmp	r3, #2
 801470e:	d14a      	bne.n	80147a6 <__kernel_rem_pio2+0x25e>
 8014710:	4632      	mov	r2, r6
 8014712:	463b      	mov	r3, r7
 8014714:	2000      	movs	r0, #0
 8014716:	4958      	ldr	r1, [pc, #352]	; (8014878 <__kernel_rem_pio2+0x330>)
 8014718:	f7eb fdce 	bl	80002b8 <__aeabi_dsub>
 801471c:	4606      	mov	r6, r0
 801471e:	460f      	mov	r7, r1
 8014720:	2d00      	cmp	r5, #0
 8014722:	d040      	beq.n	80147a6 <__kernel_rem_pio2+0x25e>
 8014724:	4650      	mov	r0, sl
 8014726:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8014868 <__kernel_rem_pio2+0x320>
 801472a:	f000 fb95 	bl	8014e58 <scalbn>
 801472e:	4630      	mov	r0, r6
 8014730:	4639      	mov	r1, r7
 8014732:	ec53 2b10 	vmov	r2, r3, d0
 8014736:	f7eb fdbf 	bl	80002b8 <__aeabi_dsub>
 801473a:	4606      	mov	r6, r0
 801473c:	460f      	mov	r7, r1
 801473e:	e032      	b.n	80147a6 <__kernel_rem_pio2+0x25e>
 8014740:	2200      	movs	r2, #0
 8014742:	4b4e      	ldr	r3, [pc, #312]	; (801487c <__kernel_rem_pio2+0x334>)
 8014744:	4640      	mov	r0, r8
 8014746:	4649      	mov	r1, r9
 8014748:	f7eb ff6e 	bl	8000628 <__aeabi_dmul>
 801474c:	f7ec fa1c 	bl	8000b88 <__aeabi_d2iz>
 8014750:	f7eb ff00 	bl	8000554 <__aeabi_i2d>
 8014754:	2200      	movs	r2, #0
 8014756:	4b4a      	ldr	r3, [pc, #296]	; (8014880 <__kernel_rem_pio2+0x338>)
 8014758:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801475c:	f7eb ff64 	bl	8000628 <__aeabi_dmul>
 8014760:	4602      	mov	r2, r0
 8014762:	460b      	mov	r3, r1
 8014764:	4640      	mov	r0, r8
 8014766:	4649      	mov	r1, r9
 8014768:	f7eb fda6 	bl	80002b8 <__aeabi_dsub>
 801476c:	f7ec fa0c 	bl	8000b88 <__aeabi_d2iz>
 8014770:	ab0e      	add	r3, sp, #56	; 0x38
 8014772:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8014776:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 801477a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801477e:	f7eb fd9d 	bl	80002bc <__adddf3>
 8014782:	3501      	adds	r5, #1
 8014784:	4680      	mov	r8, r0
 8014786:	4689      	mov	r9, r1
 8014788:	e75e      	b.n	8014648 <__kernel_rem_pio2+0x100>
 801478a:	d105      	bne.n	8014798 <__kernel_rem_pio2+0x250>
 801478c:	1e63      	subs	r3, r4, #1
 801478e:	aa0e      	add	r2, sp, #56	; 0x38
 8014790:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8014794:	15c3      	asrs	r3, r0, #23
 8014796:	e79f      	b.n	80146d8 <__kernel_rem_pio2+0x190>
 8014798:	2200      	movs	r2, #0
 801479a:	4b3a      	ldr	r3, [pc, #232]	; (8014884 <__kernel_rem_pio2+0x33c>)
 801479c:	f7ec f9ca 	bl	8000b34 <__aeabi_dcmpge>
 80147a0:	2800      	cmp	r0, #0
 80147a2:	d139      	bne.n	8014818 <__kernel_rem_pio2+0x2d0>
 80147a4:	9002      	str	r0, [sp, #8]
 80147a6:	2200      	movs	r2, #0
 80147a8:	2300      	movs	r3, #0
 80147aa:	4630      	mov	r0, r6
 80147ac:	4639      	mov	r1, r7
 80147ae:	f7ec f9a3 	bl	8000af8 <__aeabi_dcmpeq>
 80147b2:	2800      	cmp	r0, #0
 80147b4:	f000 80c7 	beq.w	8014946 <__kernel_rem_pio2+0x3fe>
 80147b8:	1e65      	subs	r5, r4, #1
 80147ba:	462b      	mov	r3, r5
 80147bc:	2200      	movs	r2, #0
 80147be:	9904      	ldr	r1, [sp, #16]
 80147c0:	428b      	cmp	r3, r1
 80147c2:	da6a      	bge.n	801489a <__kernel_rem_pio2+0x352>
 80147c4:	2a00      	cmp	r2, #0
 80147c6:	f000 8088 	beq.w	80148da <__kernel_rem_pio2+0x392>
 80147ca:	ab0e      	add	r3, sp, #56	; 0x38
 80147cc:	f1aa 0a18 	sub.w	sl, sl, #24
 80147d0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80147d4:	2b00      	cmp	r3, #0
 80147d6:	f000 80b4 	beq.w	8014942 <__kernel_rem_pio2+0x3fa>
 80147da:	4650      	mov	r0, sl
 80147dc:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8014868 <__kernel_rem_pio2+0x320>
 80147e0:	f000 fb3a 	bl	8014e58 <scalbn>
 80147e4:	00ec      	lsls	r4, r5, #3
 80147e6:	ab72      	add	r3, sp, #456	; 0x1c8
 80147e8:	191e      	adds	r6, r3, r4
 80147ea:	ec59 8b10 	vmov	r8, r9, d0
 80147ee:	f106 0a08 	add.w	sl, r6, #8
 80147f2:	462f      	mov	r7, r5
 80147f4:	2f00      	cmp	r7, #0
 80147f6:	f280 80df 	bge.w	80149b8 <__kernel_rem_pio2+0x470>
 80147fa:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8014860 <__kernel_rem_pio2+0x318>
 80147fe:	f04f 0a00 	mov.w	sl, #0
 8014802:	eba5 030a 	sub.w	r3, r5, sl
 8014806:	2b00      	cmp	r3, #0
 8014808:	f2c0 810a 	blt.w	8014a20 <__kernel_rem_pio2+0x4d8>
 801480c:	f8df b078 	ldr.w	fp, [pc, #120]	; 8014888 <__kernel_rem_pio2+0x340>
 8014810:	ec59 8b18 	vmov	r8, r9, d8
 8014814:	2700      	movs	r7, #0
 8014816:	e0f5      	b.n	8014a04 <__kernel_rem_pio2+0x4bc>
 8014818:	2302      	movs	r3, #2
 801481a:	9302      	str	r3, [sp, #8]
 801481c:	e760      	b.n	80146e0 <__kernel_rem_pio2+0x198>
 801481e:	ab0e      	add	r3, sp, #56	; 0x38
 8014820:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014824:	b94d      	cbnz	r5, 801483a <__kernel_rem_pio2+0x2f2>
 8014826:	b12b      	cbz	r3, 8014834 <__kernel_rem_pio2+0x2ec>
 8014828:	a80e      	add	r0, sp, #56	; 0x38
 801482a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801482e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8014832:	2301      	movs	r3, #1
 8014834:	3201      	adds	r2, #1
 8014836:	461d      	mov	r5, r3
 8014838:	e759      	b.n	80146ee <__kernel_rem_pio2+0x1a6>
 801483a:	a80e      	add	r0, sp, #56	; 0x38
 801483c:	1acb      	subs	r3, r1, r3
 801483e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8014842:	462b      	mov	r3, r5
 8014844:	e7f6      	b.n	8014834 <__kernel_rem_pio2+0x2ec>
 8014846:	1e62      	subs	r2, r4, #1
 8014848:	ab0e      	add	r3, sp, #56	; 0x38
 801484a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801484e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8014852:	a90e      	add	r1, sp, #56	; 0x38
 8014854:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8014858:	e757      	b.n	801470a <__kernel_rem_pio2+0x1c2>
 801485a:	bf00      	nop
 801485c:	f3af 8000 	nop.w
	...
 801486c:	3ff00000 	.word	0x3ff00000
 8014870:	08019c38 	.word	0x08019c38
 8014874:	40200000 	.word	0x40200000
 8014878:	3ff00000 	.word	0x3ff00000
 801487c:	3e700000 	.word	0x3e700000
 8014880:	41700000 	.word	0x41700000
 8014884:	3fe00000 	.word	0x3fe00000
 8014888:	08019bf8 	.word	0x08019bf8
 801488c:	1e62      	subs	r2, r4, #1
 801488e:	ab0e      	add	r3, sp, #56	; 0x38
 8014890:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014894:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8014898:	e7db      	b.n	8014852 <__kernel_rem_pio2+0x30a>
 801489a:	a90e      	add	r1, sp, #56	; 0x38
 801489c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80148a0:	3b01      	subs	r3, #1
 80148a2:	430a      	orrs	r2, r1
 80148a4:	e78b      	b.n	80147be <__kernel_rem_pio2+0x276>
 80148a6:	3301      	adds	r3, #1
 80148a8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80148ac:	2900      	cmp	r1, #0
 80148ae:	d0fa      	beq.n	80148a6 <__kernel_rem_pio2+0x35e>
 80148b0:	9a08      	ldr	r2, [sp, #32]
 80148b2:	4422      	add	r2, r4
 80148b4:	00d2      	lsls	r2, r2, #3
 80148b6:	a922      	add	r1, sp, #136	; 0x88
 80148b8:	18e3      	adds	r3, r4, r3
 80148ba:	9206      	str	r2, [sp, #24]
 80148bc:	440a      	add	r2, r1
 80148be:	9302      	str	r3, [sp, #8]
 80148c0:	f10b 0108 	add.w	r1, fp, #8
 80148c4:	f102 0308 	add.w	r3, r2, #8
 80148c8:	1c66      	adds	r6, r4, #1
 80148ca:	910a      	str	r1, [sp, #40]	; 0x28
 80148cc:	2500      	movs	r5, #0
 80148ce:	930d      	str	r3, [sp, #52]	; 0x34
 80148d0:	9b02      	ldr	r3, [sp, #8]
 80148d2:	42b3      	cmp	r3, r6
 80148d4:	da04      	bge.n	80148e0 <__kernel_rem_pio2+0x398>
 80148d6:	461c      	mov	r4, r3
 80148d8:	e6a6      	b.n	8014628 <__kernel_rem_pio2+0xe0>
 80148da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80148dc:	2301      	movs	r3, #1
 80148de:	e7e3      	b.n	80148a8 <__kernel_rem_pio2+0x360>
 80148e0:	9b06      	ldr	r3, [sp, #24]
 80148e2:	18ef      	adds	r7, r5, r3
 80148e4:	ab22      	add	r3, sp, #136	; 0x88
 80148e6:	441f      	add	r7, r3
 80148e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80148ea:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80148ee:	f7eb fe31 	bl	8000554 <__aeabi_i2d>
 80148f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80148f4:	461c      	mov	r4, r3
 80148f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80148f8:	e9c7 0100 	strd	r0, r1, [r7]
 80148fc:	eb03 0b05 	add.w	fp, r3, r5
 8014900:	2700      	movs	r7, #0
 8014902:	f04f 0800 	mov.w	r8, #0
 8014906:	f04f 0900 	mov.w	r9, #0
 801490a:	9b07      	ldr	r3, [sp, #28]
 801490c:	429f      	cmp	r7, r3
 801490e:	dd08      	ble.n	8014922 <__kernel_rem_pio2+0x3da>
 8014910:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014912:	aa72      	add	r2, sp, #456	; 0x1c8
 8014914:	18eb      	adds	r3, r5, r3
 8014916:	4413      	add	r3, r2
 8014918:	e9c3 8902 	strd	r8, r9, [r3, #8]
 801491c:	3601      	adds	r6, #1
 801491e:	3508      	adds	r5, #8
 8014920:	e7d6      	b.n	80148d0 <__kernel_rem_pio2+0x388>
 8014922:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8014926:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801492a:	f7eb fe7d 	bl	8000628 <__aeabi_dmul>
 801492e:	4602      	mov	r2, r0
 8014930:	460b      	mov	r3, r1
 8014932:	4640      	mov	r0, r8
 8014934:	4649      	mov	r1, r9
 8014936:	f7eb fcc1 	bl	80002bc <__adddf3>
 801493a:	3701      	adds	r7, #1
 801493c:	4680      	mov	r8, r0
 801493e:	4689      	mov	r9, r1
 8014940:	e7e3      	b.n	801490a <__kernel_rem_pio2+0x3c2>
 8014942:	3d01      	subs	r5, #1
 8014944:	e741      	b.n	80147ca <__kernel_rem_pio2+0x282>
 8014946:	f1ca 0000 	rsb	r0, sl, #0
 801494a:	ec47 6b10 	vmov	d0, r6, r7
 801494e:	f000 fa83 	bl	8014e58 <scalbn>
 8014952:	ec57 6b10 	vmov	r6, r7, d0
 8014956:	2200      	movs	r2, #0
 8014958:	4b99      	ldr	r3, [pc, #612]	; (8014bc0 <__kernel_rem_pio2+0x678>)
 801495a:	ee10 0a10 	vmov	r0, s0
 801495e:	4639      	mov	r1, r7
 8014960:	f7ec f8e8 	bl	8000b34 <__aeabi_dcmpge>
 8014964:	b1f8      	cbz	r0, 80149a6 <__kernel_rem_pio2+0x45e>
 8014966:	2200      	movs	r2, #0
 8014968:	4b96      	ldr	r3, [pc, #600]	; (8014bc4 <__kernel_rem_pio2+0x67c>)
 801496a:	4630      	mov	r0, r6
 801496c:	4639      	mov	r1, r7
 801496e:	f7eb fe5b 	bl	8000628 <__aeabi_dmul>
 8014972:	f7ec f909 	bl	8000b88 <__aeabi_d2iz>
 8014976:	4680      	mov	r8, r0
 8014978:	f7eb fdec 	bl	8000554 <__aeabi_i2d>
 801497c:	2200      	movs	r2, #0
 801497e:	4b90      	ldr	r3, [pc, #576]	; (8014bc0 <__kernel_rem_pio2+0x678>)
 8014980:	f7eb fe52 	bl	8000628 <__aeabi_dmul>
 8014984:	460b      	mov	r3, r1
 8014986:	4602      	mov	r2, r0
 8014988:	4639      	mov	r1, r7
 801498a:	4630      	mov	r0, r6
 801498c:	f7eb fc94 	bl	80002b8 <__aeabi_dsub>
 8014990:	f7ec f8fa 	bl	8000b88 <__aeabi_d2iz>
 8014994:	1c65      	adds	r5, r4, #1
 8014996:	ab0e      	add	r3, sp, #56	; 0x38
 8014998:	f10a 0a18 	add.w	sl, sl, #24
 801499c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80149a0:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80149a4:	e719      	b.n	80147da <__kernel_rem_pio2+0x292>
 80149a6:	4630      	mov	r0, r6
 80149a8:	4639      	mov	r1, r7
 80149aa:	f7ec f8ed 	bl	8000b88 <__aeabi_d2iz>
 80149ae:	ab0e      	add	r3, sp, #56	; 0x38
 80149b0:	4625      	mov	r5, r4
 80149b2:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80149b6:	e710      	b.n	80147da <__kernel_rem_pio2+0x292>
 80149b8:	ab0e      	add	r3, sp, #56	; 0x38
 80149ba:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80149be:	f7eb fdc9 	bl	8000554 <__aeabi_i2d>
 80149c2:	4642      	mov	r2, r8
 80149c4:	464b      	mov	r3, r9
 80149c6:	f7eb fe2f 	bl	8000628 <__aeabi_dmul>
 80149ca:	2200      	movs	r2, #0
 80149cc:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80149d0:	4b7c      	ldr	r3, [pc, #496]	; (8014bc4 <__kernel_rem_pio2+0x67c>)
 80149d2:	4640      	mov	r0, r8
 80149d4:	4649      	mov	r1, r9
 80149d6:	f7eb fe27 	bl	8000628 <__aeabi_dmul>
 80149da:	3f01      	subs	r7, #1
 80149dc:	4680      	mov	r8, r0
 80149de:	4689      	mov	r9, r1
 80149e0:	e708      	b.n	80147f4 <__kernel_rem_pio2+0x2ac>
 80149e2:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 80149e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149ea:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 80149ee:	f7eb fe1b 	bl	8000628 <__aeabi_dmul>
 80149f2:	4602      	mov	r2, r0
 80149f4:	460b      	mov	r3, r1
 80149f6:	4640      	mov	r0, r8
 80149f8:	4649      	mov	r1, r9
 80149fa:	f7eb fc5f 	bl	80002bc <__adddf3>
 80149fe:	3701      	adds	r7, #1
 8014a00:	4680      	mov	r8, r0
 8014a02:	4689      	mov	r9, r1
 8014a04:	9b04      	ldr	r3, [sp, #16]
 8014a06:	429f      	cmp	r7, r3
 8014a08:	dc01      	bgt.n	8014a0e <__kernel_rem_pio2+0x4c6>
 8014a0a:	45ba      	cmp	sl, r7
 8014a0c:	dae9      	bge.n	80149e2 <__kernel_rem_pio2+0x49a>
 8014a0e:	ab4a      	add	r3, sp, #296	; 0x128
 8014a10:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8014a14:	e9c3 8900 	strd	r8, r9, [r3]
 8014a18:	f10a 0a01 	add.w	sl, sl, #1
 8014a1c:	3e08      	subs	r6, #8
 8014a1e:	e6f0      	b.n	8014802 <__kernel_rem_pio2+0x2ba>
 8014a20:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8014a22:	2b03      	cmp	r3, #3
 8014a24:	d85b      	bhi.n	8014ade <__kernel_rem_pio2+0x596>
 8014a26:	e8df f003 	tbb	[pc, r3]
 8014a2a:	264a      	.short	0x264a
 8014a2c:	0226      	.short	0x0226
 8014a2e:	ab9a      	add	r3, sp, #616	; 0x268
 8014a30:	441c      	add	r4, r3
 8014a32:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8014a36:	46a2      	mov	sl, r4
 8014a38:	46ab      	mov	fp, r5
 8014a3a:	f1bb 0f00 	cmp.w	fp, #0
 8014a3e:	dc6c      	bgt.n	8014b1a <__kernel_rem_pio2+0x5d2>
 8014a40:	46a2      	mov	sl, r4
 8014a42:	46ab      	mov	fp, r5
 8014a44:	f1bb 0f01 	cmp.w	fp, #1
 8014a48:	f300 8086 	bgt.w	8014b58 <__kernel_rem_pio2+0x610>
 8014a4c:	2000      	movs	r0, #0
 8014a4e:	2100      	movs	r1, #0
 8014a50:	2d01      	cmp	r5, #1
 8014a52:	f300 80a0 	bgt.w	8014b96 <__kernel_rem_pio2+0x64e>
 8014a56:	9b02      	ldr	r3, [sp, #8]
 8014a58:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8014a5c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8014a60:	2b00      	cmp	r3, #0
 8014a62:	f040 809e 	bne.w	8014ba2 <__kernel_rem_pio2+0x65a>
 8014a66:	9b01      	ldr	r3, [sp, #4]
 8014a68:	e9c3 7800 	strd	r7, r8, [r3]
 8014a6c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8014a70:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8014a74:	e033      	b.n	8014ade <__kernel_rem_pio2+0x596>
 8014a76:	3408      	adds	r4, #8
 8014a78:	ab4a      	add	r3, sp, #296	; 0x128
 8014a7a:	441c      	add	r4, r3
 8014a7c:	462e      	mov	r6, r5
 8014a7e:	2000      	movs	r0, #0
 8014a80:	2100      	movs	r1, #0
 8014a82:	2e00      	cmp	r6, #0
 8014a84:	da3a      	bge.n	8014afc <__kernel_rem_pio2+0x5b4>
 8014a86:	9b02      	ldr	r3, [sp, #8]
 8014a88:	2b00      	cmp	r3, #0
 8014a8a:	d03d      	beq.n	8014b08 <__kernel_rem_pio2+0x5c0>
 8014a8c:	4602      	mov	r2, r0
 8014a8e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014a92:	9c01      	ldr	r4, [sp, #4]
 8014a94:	e9c4 2300 	strd	r2, r3, [r4]
 8014a98:	4602      	mov	r2, r0
 8014a9a:	460b      	mov	r3, r1
 8014a9c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8014aa0:	f7eb fc0a 	bl	80002b8 <__aeabi_dsub>
 8014aa4:	ae4c      	add	r6, sp, #304	; 0x130
 8014aa6:	2401      	movs	r4, #1
 8014aa8:	42a5      	cmp	r5, r4
 8014aaa:	da30      	bge.n	8014b0e <__kernel_rem_pio2+0x5c6>
 8014aac:	9b02      	ldr	r3, [sp, #8]
 8014aae:	b113      	cbz	r3, 8014ab6 <__kernel_rem_pio2+0x56e>
 8014ab0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014ab4:	4619      	mov	r1, r3
 8014ab6:	9b01      	ldr	r3, [sp, #4]
 8014ab8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8014abc:	e00f      	b.n	8014ade <__kernel_rem_pio2+0x596>
 8014abe:	ab9a      	add	r3, sp, #616	; 0x268
 8014ac0:	441c      	add	r4, r3
 8014ac2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8014ac6:	2000      	movs	r0, #0
 8014ac8:	2100      	movs	r1, #0
 8014aca:	2d00      	cmp	r5, #0
 8014acc:	da10      	bge.n	8014af0 <__kernel_rem_pio2+0x5a8>
 8014ace:	9b02      	ldr	r3, [sp, #8]
 8014ad0:	b113      	cbz	r3, 8014ad8 <__kernel_rem_pio2+0x590>
 8014ad2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014ad6:	4619      	mov	r1, r3
 8014ad8:	9b01      	ldr	r3, [sp, #4]
 8014ada:	e9c3 0100 	strd	r0, r1, [r3]
 8014ade:	9b06      	ldr	r3, [sp, #24]
 8014ae0:	f003 0007 	and.w	r0, r3, #7
 8014ae4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8014ae8:	ecbd 8b02 	vpop	{d8}
 8014aec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014af0:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8014af4:	f7eb fbe2 	bl	80002bc <__adddf3>
 8014af8:	3d01      	subs	r5, #1
 8014afa:	e7e6      	b.n	8014aca <__kernel_rem_pio2+0x582>
 8014afc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8014b00:	f7eb fbdc 	bl	80002bc <__adddf3>
 8014b04:	3e01      	subs	r6, #1
 8014b06:	e7bc      	b.n	8014a82 <__kernel_rem_pio2+0x53a>
 8014b08:	4602      	mov	r2, r0
 8014b0a:	460b      	mov	r3, r1
 8014b0c:	e7c1      	b.n	8014a92 <__kernel_rem_pio2+0x54a>
 8014b0e:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8014b12:	f7eb fbd3 	bl	80002bc <__adddf3>
 8014b16:	3401      	adds	r4, #1
 8014b18:	e7c6      	b.n	8014aa8 <__kernel_rem_pio2+0x560>
 8014b1a:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8014b1e:	ed3a 7b02 	vldmdb	sl!, {d7}
 8014b22:	4640      	mov	r0, r8
 8014b24:	ec53 2b17 	vmov	r2, r3, d7
 8014b28:	4649      	mov	r1, r9
 8014b2a:	ed8d 7b04 	vstr	d7, [sp, #16]
 8014b2e:	f7eb fbc5 	bl	80002bc <__adddf3>
 8014b32:	4602      	mov	r2, r0
 8014b34:	460b      	mov	r3, r1
 8014b36:	4606      	mov	r6, r0
 8014b38:	460f      	mov	r7, r1
 8014b3a:	4640      	mov	r0, r8
 8014b3c:	4649      	mov	r1, r9
 8014b3e:	f7eb fbbb 	bl	80002b8 <__aeabi_dsub>
 8014b42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014b46:	f7eb fbb9 	bl	80002bc <__adddf3>
 8014b4a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014b4e:	e9ca 0100 	strd	r0, r1, [sl]
 8014b52:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8014b56:	e770      	b.n	8014a3a <__kernel_rem_pio2+0x4f2>
 8014b58:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8014b5c:	ed3a 7b02 	vldmdb	sl!, {d7}
 8014b60:	4630      	mov	r0, r6
 8014b62:	ec53 2b17 	vmov	r2, r3, d7
 8014b66:	4639      	mov	r1, r7
 8014b68:	ed8d 7b04 	vstr	d7, [sp, #16]
 8014b6c:	f7eb fba6 	bl	80002bc <__adddf3>
 8014b70:	4602      	mov	r2, r0
 8014b72:	460b      	mov	r3, r1
 8014b74:	4680      	mov	r8, r0
 8014b76:	4689      	mov	r9, r1
 8014b78:	4630      	mov	r0, r6
 8014b7a:	4639      	mov	r1, r7
 8014b7c:	f7eb fb9c 	bl	80002b8 <__aeabi_dsub>
 8014b80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014b84:	f7eb fb9a 	bl	80002bc <__adddf3>
 8014b88:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014b8c:	e9ca 0100 	strd	r0, r1, [sl]
 8014b90:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8014b94:	e756      	b.n	8014a44 <__kernel_rem_pio2+0x4fc>
 8014b96:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8014b9a:	f7eb fb8f 	bl	80002bc <__adddf3>
 8014b9e:	3d01      	subs	r5, #1
 8014ba0:	e756      	b.n	8014a50 <__kernel_rem_pio2+0x508>
 8014ba2:	9b01      	ldr	r3, [sp, #4]
 8014ba4:	9a01      	ldr	r2, [sp, #4]
 8014ba6:	601f      	str	r7, [r3, #0]
 8014ba8:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8014bac:	605c      	str	r4, [r3, #4]
 8014bae:	609d      	str	r5, [r3, #8]
 8014bb0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8014bb4:	60d3      	str	r3, [r2, #12]
 8014bb6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014bba:	6110      	str	r0, [r2, #16]
 8014bbc:	6153      	str	r3, [r2, #20]
 8014bbe:	e78e      	b.n	8014ade <__kernel_rem_pio2+0x596>
 8014bc0:	41700000 	.word	0x41700000
 8014bc4:	3e700000 	.word	0x3e700000

08014bc8 <__kernel_sin>:
 8014bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014bcc:	ec55 4b10 	vmov	r4, r5, d0
 8014bd0:	b085      	sub	sp, #20
 8014bd2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8014bd6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8014bda:	ed8d 1b00 	vstr	d1, [sp]
 8014bde:	9002      	str	r0, [sp, #8]
 8014be0:	da06      	bge.n	8014bf0 <__kernel_sin+0x28>
 8014be2:	ee10 0a10 	vmov	r0, s0
 8014be6:	4629      	mov	r1, r5
 8014be8:	f7eb ffce 	bl	8000b88 <__aeabi_d2iz>
 8014bec:	2800      	cmp	r0, #0
 8014bee:	d051      	beq.n	8014c94 <__kernel_sin+0xcc>
 8014bf0:	4622      	mov	r2, r4
 8014bf2:	462b      	mov	r3, r5
 8014bf4:	4620      	mov	r0, r4
 8014bf6:	4629      	mov	r1, r5
 8014bf8:	f7eb fd16 	bl	8000628 <__aeabi_dmul>
 8014bfc:	4682      	mov	sl, r0
 8014bfe:	468b      	mov	fp, r1
 8014c00:	4602      	mov	r2, r0
 8014c02:	460b      	mov	r3, r1
 8014c04:	4620      	mov	r0, r4
 8014c06:	4629      	mov	r1, r5
 8014c08:	f7eb fd0e 	bl	8000628 <__aeabi_dmul>
 8014c0c:	a341      	add	r3, pc, #260	; (adr r3, 8014d14 <__kernel_sin+0x14c>)
 8014c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c12:	4680      	mov	r8, r0
 8014c14:	4689      	mov	r9, r1
 8014c16:	4650      	mov	r0, sl
 8014c18:	4659      	mov	r1, fp
 8014c1a:	f7eb fd05 	bl	8000628 <__aeabi_dmul>
 8014c1e:	a33f      	add	r3, pc, #252	; (adr r3, 8014d1c <__kernel_sin+0x154>)
 8014c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c24:	f7eb fb48 	bl	80002b8 <__aeabi_dsub>
 8014c28:	4652      	mov	r2, sl
 8014c2a:	465b      	mov	r3, fp
 8014c2c:	f7eb fcfc 	bl	8000628 <__aeabi_dmul>
 8014c30:	a33c      	add	r3, pc, #240	; (adr r3, 8014d24 <__kernel_sin+0x15c>)
 8014c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c36:	f7eb fb41 	bl	80002bc <__adddf3>
 8014c3a:	4652      	mov	r2, sl
 8014c3c:	465b      	mov	r3, fp
 8014c3e:	f7eb fcf3 	bl	8000628 <__aeabi_dmul>
 8014c42:	a33a      	add	r3, pc, #232	; (adr r3, 8014d2c <__kernel_sin+0x164>)
 8014c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c48:	f7eb fb36 	bl	80002b8 <__aeabi_dsub>
 8014c4c:	4652      	mov	r2, sl
 8014c4e:	465b      	mov	r3, fp
 8014c50:	f7eb fcea 	bl	8000628 <__aeabi_dmul>
 8014c54:	a337      	add	r3, pc, #220	; (adr r3, 8014d34 <__kernel_sin+0x16c>)
 8014c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c5a:	f7eb fb2f 	bl	80002bc <__adddf3>
 8014c5e:	9b02      	ldr	r3, [sp, #8]
 8014c60:	4606      	mov	r6, r0
 8014c62:	460f      	mov	r7, r1
 8014c64:	b9db      	cbnz	r3, 8014c9e <__kernel_sin+0xd6>
 8014c66:	4602      	mov	r2, r0
 8014c68:	460b      	mov	r3, r1
 8014c6a:	4650      	mov	r0, sl
 8014c6c:	4659      	mov	r1, fp
 8014c6e:	f7eb fcdb 	bl	8000628 <__aeabi_dmul>
 8014c72:	a325      	add	r3, pc, #148	; (adr r3, 8014d08 <__kernel_sin+0x140>)
 8014c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c78:	f7eb fb1e 	bl	80002b8 <__aeabi_dsub>
 8014c7c:	4642      	mov	r2, r8
 8014c7e:	464b      	mov	r3, r9
 8014c80:	f7eb fcd2 	bl	8000628 <__aeabi_dmul>
 8014c84:	4602      	mov	r2, r0
 8014c86:	460b      	mov	r3, r1
 8014c88:	4620      	mov	r0, r4
 8014c8a:	4629      	mov	r1, r5
 8014c8c:	f7eb fb16 	bl	80002bc <__adddf3>
 8014c90:	4604      	mov	r4, r0
 8014c92:	460d      	mov	r5, r1
 8014c94:	ec45 4b10 	vmov	d0, r4, r5
 8014c98:	b005      	add	sp, #20
 8014c9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c9e:	2200      	movs	r2, #0
 8014ca0:	4b1b      	ldr	r3, [pc, #108]	; (8014d10 <__kernel_sin+0x148>)
 8014ca2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014ca6:	f7eb fcbf 	bl	8000628 <__aeabi_dmul>
 8014caa:	4632      	mov	r2, r6
 8014cac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014cb0:	463b      	mov	r3, r7
 8014cb2:	4640      	mov	r0, r8
 8014cb4:	4649      	mov	r1, r9
 8014cb6:	f7eb fcb7 	bl	8000628 <__aeabi_dmul>
 8014cba:	4602      	mov	r2, r0
 8014cbc:	460b      	mov	r3, r1
 8014cbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014cc2:	f7eb faf9 	bl	80002b8 <__aeabi_dsub>
 8014cc6:	4652      	mov	r2, sl
 8014cc8:	465b      	mov	r3, fp
 8014cca:	f7eb fcad 	bl	8000628 <__aeabi_dmul>
 8014cce:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014cd2:	f7eb faf1 	bl	80002b8 <__aeabi_dsub>
 8014cd6:	a30c      	add	r3, pc, #48	; (adr r3, 8014d08 <__kernel_sin+0x140>)
 8014cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014cdc:	4606      	mov	r6, r0
 8014cde:	460f      	mov	r7, r1
 8014ce0:	4640      	mov	r0, r8
 8014ce2:	4649      	mov	r1, r9
 8014ce4:	f7eb fca0 	bl	8000628 <__aeabi_dmul>
 8014ce8:	4602      	mov	r2, r0
 8014cea:	460b      	mov	r3, r1
 8014cec:	4630      	mov	r0, r6
 8014cee:	4639      	mov	r1, r7
 8014cf0:	f7eb fae4 	bl	80002bc <__adddf3>
 8014cf4:	4602      	mov	r2, r0
 8014cf6:	460b      	mov	r3, r1
 8014cf8:	4620      	mov	r0, r4
 8014cfa:	4629      	mov	r1, r5
 8014cfc:	f7eb fadc 	bl	80002b8 <__aeabi_dsub>
 8014d00:	e7c6      	b.n	8014c90 <__kernel_sin+0xc8>
 8014d02:	bf00      	nop
 8014d04:	f3af 8000 	nop.w
 8014d08:	55555549 	.word	0x55555549
 8014d0c:	3fc55555 	.word	0x3fc55555
 8014d10:	3fe00000 	.word	0x3fe00000
 8014d14:	5acfd57c 	.word	0x5acfd57c
 8014d18:	3de5d93a 	.word	0x3de5d93a
 8014d1c:	8a2b9ceb 	.word	0x8a2b9ceb
 8014d20:	3e5ae5e6 	.word	0x3e5ae5e6
 8014d24:	57b1fe7d 	.word	0x57b1fe7d
 8014d28:	3ec71de3 	.word	0x3ec71de3
 8014d2c:	19c161d5 	.word	0x19c161d5
 8014d30:	3f2a01a0 	.word	0x3f2a01a0
 8014d34:	1110f8a6 	.word	0x1110f8a6
 8014d38:	3f811111 	.word	0x3f811111

08014d3c <fabs>:
 8014d3c:	ec51 0b10 	vmov	r0, r1, d0
 8014d40:	ee10 2a10 	vmov	r2, s0
 8014d44:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014d48:	ec43 2b10 	vmov	d0, r2, r3
 8014d4c:	4770      	bx	lr
	...

08014d50 <floor>:
 8014d50:	ec51 0b10 	vmov	r0, r1, d0
 8014d54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014d58:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8014d5c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8014d60:	2e13      	cmp	r6, #19
 8014d62:	460c      	mov	r4, r1
 8014d64:	ee10 5a10 	vmov	r5, s0
 8014d68:	4680      	mov	r8, r0
 8014d6a:	dc34      	bgt.n	8014dd6 <floor+0x86>
 8014d6c:	2e00      	cmp	r6, #0
 8014d6e:	da16      	bge.n	8014d9e <floor+0x4e>
 8014d70:	a335      	add	r3, pc, #212	; (adr r3, 8014e48 <floor+0xf8>)
 8014d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d76:	f7eb faa1 	bl	80002bc <__adddf3>
 8014d7a:	2200      	movs	r2, #0
 8014d7c:	2300      	movs	r3, #0
 8014d7e:	f7eb fee3 	bl	8000b48 <__aeabi_dcmpgt>
 8014d82:	b148      	cbz	r0, 8014d98 <floor+0x48>
 8014d84:	2c00      	cmp	r4, #0
 8014d86:	da59      	bge.n	8014e3c <floor+0xec>
 8014d88:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8014d8c:	4a30      	ldr	r2, [pc, #192]	; (8014e50 <floor+0x100>)
 8014d8e:	432b      	orrs	r3, r5
 8014d90:	2500      	movs	r5, #0
 8014d92:	42ab      	cmp	r3, r5
 8014d94:	bf18      	it	ne
 8014d96:	4614      	movne	r4, r2
 8014d98:	4621      	mov	r1, r4
 8014d9a:	4628      	mov	r0, r5
 8014d9c:	e025      	b.n	8014dea <floor+0x9a>
 8014d9e:	4f2d      	ldr	r7, [pc, #180]	; (8014e54 <floor+0x104>)
 8014da0:	4137      	asrs	r7, r6
 8014da2:	ea01 0307 	and.w	r3, r1, r7
 8014da6:	4303      	orrs	r3, r0
 8014da8:	d01f      	beq.n	8014dea <floor+0x9a>
 8014daa:	a327      	add	r3, pc, #156	; (adr r3, 8014e48 <floor+0xf8>)
 8014dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014db0:	f7eb fa84 	bl	80002bc <__adddf3>
 8014db4:	2200      	movs	r2, #0
 8014db6:	2300      	movs	r3, #0
 8014db8:	f7eb fec6 	bl	8000b48 <__aeabi_dcmpgt>
 8014dbc:	2800      	cmp	r0, #0
 8014dbe:	d0eb      	beq.n	8014d98 <floor+0x48>
 8014dc0:	2c00      	cmp	r4, #0
 8014dc2:	bfbe      	ittt	lt
 8014dc4:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8014dc8:	fa43 f606 	asrlt.w	r6, r3, r6
 8014dcc:	19a4      	addlt	r4, r4, r6
 8014dce:	ea24 0407 	bic.w	r4, r4, r7
 8014dd2:	2500      	movs	r5, #0
 8014dd4:	e7e0      	b.n	8014d98 <floor+0x48>
 8014dd6:	2e33      	cmp	r6, #51	; 0x33
 8014dd8:	dd0b      	ble.n	8014df2 <floor+0xa2>
 8014dda:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8014dde:	d104      	bne.n	8014dea <floor+0x9a>
 8014de0:	ee10 2a10 	vmov	r2, s0
 8014de4:	460b      	mov	r3, r1
 8014de6:	f7eb fa69 	bl	80002bc <__adddf3>
 8014dea:	ec41 0b10 	vmov	d0, r0, r1
 8014dee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014df2:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8014df6:	f04f 33ff 	mov.w	r3, #4294967295
 8014dfa:	fa23 f707 	lsr.w	r7, r3, r7
 8014dfe:	4207      	tst	r7, r0
 8014e00:	d0f3      	beq.n	8014dea <floor+0x9a>
 8014e02:	a311      	add	r3, pc, #68	; (adr r3, 8014e48 <floor+0xf8>)
 8014e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e08:	f7eb fa58 	bl	80002bc <__adddf3>
 8014e0c:	2200      	movs	r2, #0
 8014e0e:	2300      	movs	r3, #0
 8014e10:	f7eb fe9a 	bl	8000b48 <__aeabi_dcmpgt>
 8014e14:	2800      	cmp	r0, #0
 8014e16:	d0bf      	beq.n	8014d98 <floor+0x48>
 8014e18:	2c00      	cmp	r4, #0
 8014e1a:	da02      	bge.n	8014e22 <floor+0xd2>
 8014e1c:	2e14      	cmp	r6, #20
 8014e1e:	d103      	bne.n	8014e28 <floor+0xd8>
 8014e20:	3401      	adds	r4, #1
 8014e22:	ea25 0507 	bic.w	r5, r5, r7
 8014e26:	e7b7      	b.n	8014d98 <floor+0x48>
 8014e28:	2301      	movs	r3, #1
 8014e2a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8014e2e:	fa03 f606 	lsl.w	r6, r3, r6
 8014e32:	4435      	add	r5, r6
 8014e34:	4545      	cmp	r5, r8
 8014e36:	bf38      	it	cc
 8014e38:	18e4      	addcc	r4, r4, r3
 8014e3a:	e7f2      	b.n	8014e22 <floor+0xd2>
 8014e3c:	2500      	movs	r5, #0
 8014e3e:	462c      	mov	r4, r5
 8014e40:	e7aa      	b.n	8014d98 <floor+0x48>
 8014e42:	bf00      	nop
 8014e44:	f3af 8000 	nop.w
 8014e48:	8800759c 	.word	0x8800759c
 8014e4c:	7e37e43c 	.word	0x7e37e43c
 8014e50:	bff00000 	.word	0xbff00000
 8014e54:	000fffff 	.word	0x000fffff

08014e58 <scalbn>:
 8014e58:	b570      	push	{r4, r5, r6, lr}
 8014e5a:	ec55 4b10 	vmov	r4, r5, d0
 8014e5e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8014e62:	4606      	mov	r6, r0
 8014e64:	462b      	mov	r3, r5
 8014e66:	b9aa      	cbnz	r2, 8014e94 <scalbn+0x3c>
 8014e68:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8014e6c:	4323      	orrs	r3, r4
 8014e6e:	d03b      	beq.n	8014ee8 <scalbn+0x90>
 8014e70:	4b31      	ldr	r3, [pc, #196]	; (8014f38 <scalbn+0xe0>)
 8014e72:	4629      	mov	r1, r5
 8014e74:	2200      	movs	r2, #0
 8014e76:	ee10 0a10 	vmov	r0, s0
 8014e7a:	f7eb fbd5 	bl	8000628 <__aeabi_dmul>
 8014e7e:	4b2f      	ldr	r3, [pc, #188]	; (8014f3c <scalbn+0xe4>)
 8014e80:	429e      	cmp	r6, r3
 8014e82:	4604      	mov	r4, r0
 8014e84:	460d      	mov	r5, r1
 8014e86:	da12      	bge.n	8014eae <scalbn+0x56>
 8014e88:	a327      	add	r3, pc, #156	; (adr r3, 8014f28 <scalbn+0xd0>)
 8014e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e8e:	f7eb fbcb 	bl	8000628 <__aeabi_dmul>
 8014e92:	e009      	b.n	8014ea8 <scalbn+0x50>
 8014e94:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8014e98:	428a      	cmp	r2, r1
 8014e9a:	d10c      	bne.n	8014eb6 <scalbn+0x5e>
 8014e9c:	ee10 2a10 	vmov	r2, s0
 8014ea0:	4620      	mov	r0, r4
 8014ea2:	4629      	mov	r1, r5
 8014ea4:	f7eb fa0a 	bl	80002bc <__adddf3>
 8014ea8:	4604      	mov	r4, r0
 8014eaa:	460d      	mov	r5, r1
 8014eac:	e01c      	b.n	8014ee8 <scalbn+0x90>
 8014eae:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8014eb2:	460b      	mov	r3, r1
 8014eb4:	3a36      	subs	r2, #54	; 0x36
 8014eb6:	4432      	add	r2, r6
 8014eb8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8014ebc:	428a      	cmp	r2, r1
 8014ebe:	dd0b      	ble.n	8014ed8 <scalbn+0x80>
 8014ec0:	ec45 4b11 	vmov	d1, r4, r5
 8014ec4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8014f30 <scalbn+0xd8>
 8014ec8:	f000 f83c 	bl	8014f44 <copysign>
 8014ecc:	a318      	add	r3, pc, #96	; (adr r3, 8014f30 <scalbn+0xd8>)
 8014ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ed2:	ec51 0b10 	vmov	r0, r1, d0
 8014ed6:	e7da      	b.n	8014e8e <scalbn+0x36>
 8014ed8:	2a00      	cmp	r2, #0
 8014eda:	dd08      	ble.n	8014eee <scalbn+0x96>
 8014edc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014ee0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8014ee4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8014ee8:	ec45 4b10 	vmov	d0, r4, r5
 8014eec:	bd70      	pop	{r4, r5, r6, pc}
 8014eee:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8014ef2:	da0d      	bge.n	8014f10 <scalbn+0xb8>
 8014ef4:	f24c 3350 	movw	r3, #50000	; 0xc350
 8014ef8:	429e      	cmp	r6, r3
 8014efa:	ec45 4b11 	vmov	d1, r4, r5
 8014efe:	dce1      	bgt.n	8014ec4 <scalbn+0x6c>
 8014f00:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8014f28 <scalbn+0xd0>
 8014f04:	f000 f81e 	bl	8014f44 <copysign>
 8014f08:	a307      	add	r3, pc, #28	; (adr r3, 8014f28 <scalbn+0xd0>)
 8014f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f0e:	e7e0      	b.n	8014ed2 <scalbn+0x7a>
 8014f10:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014f14:	3236      	adds	r2, #54	; 0x36
 8014f16:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8014f1a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8014f1e:	4620      	mov	r0, r4
 8014f20:	4629      	mov	r1, r5
 8014f22:	2200      	movs	r2, #0
 8014f24:	4b06      	ldr	r3, [pc, #24]	; (8014f40 <scalbn+0xe8>)
 8014f26:	e7b2      	b.n	8014e8e <scalbn+0x36>
 8014f28:	c2f8f359 	.word	0xc2f8f359
 8014f2c:	01a56e1f 	.word	0x01a56e1f
 8014f30:	8800759c 	.word	0x8800759c
 8014f34:	7e37e43c 	.word	0x7e37e43c
 8014f38:	43500000 	.word	0x43500000
 8014f3c:	ffff3cb0 	.word	0xffff3cb0
 8014f40:	3c900000 	.word	0x3c900000

08014f44 <copysign>:
 8014f44:	ec51 0b10 	vmov	r0, r1, d0
 8014f48:	ee11 0a90 	vmov	r0, s3
 8014f4c:	ee10 2a10 	vmov	r2, s0
 8014f50:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8014f54:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8014f58:	ea41 0300 	orr.w	r3, r1, r0
 8014f5c:	ec43 2b10 	vmov	d0, r2, r3
 8014f60:	4770      	bx	lr
	...

08014f64 <__errno>:
 8014f64:	4b01      	ldr	r3, [pc, #4]	; (8014f6c <__errno+0x8>)
 8014f66:	6818      	ldr	r0, [r3, #0]
 8014f68:	4770      	bx	lr
 8014f6a:	bf00      	nop
 8014f6c:	2000000c 	.word	0x2000000c

08014f70 <__libc_init_array>:
 8014f70:	b570      	push	{r4, r5, r6, lr}
 8014f72:	4e0d      	ldr	r6, [pc, #52]	; (8014fa8 <__libc_init_array+0x38>)
 8014f74:	4c0d      	ldr	r4, [pc, #52]	; (8014fac <__libc_init_array+0x3c>)
 8014f76:	1ba4      	subs	r4, r4, r6
 8014f78:	10a4      	asrs	r4, r4, #2
 8014f7a:	2500      	movs	r5, #0
 8014f7c:	42a5      	cmp	r5, r4
 8014f7e:	d109      	bne.n	8014f94 <__libc_init_array+0x24>
 8014f80:	4e0b      	ldr	r6, [pc, #44]	; (8014fb0 <__libc_init_array+0x40>)
 8014f82:	4c0c      	ldr	r4, [pc, #48]	; (8014fb4 <__libc_init_array+0x44>)
 8014f84:	f004 f9e8 	bl	8019358 <_init>
 8014f88:	1ba4      	subs	r4, r4, r6
 8014f8a:	10a4      	asrs	r4, r4, #2
 8014f8c:	2500      	movs	r5, #0
 8014f8e:	42a5      	cmp	r5, r4
 8014f90:	d105      	bne.n	8014f9e <__libc_init_array+0x2e>
 8014f92:	bd70      	pop	{r4, r5, r6, pc}
 8014f94:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8014f98:	4798      	blx	r3
 8014f9a:	3501      	adds	r5, #1
 8014f9c:	e7ee      	b.n	8014f7c <__libc_init_array+0xc>
 8014f9e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8014fa2:	4798      	blx	r3
 8014fa4:	3501      	adds	r5, #1
 8014fa6:	e7f2      	b.n	8014f8e <__libc_init_array+0x1e>
 8014fa8:	08019f84 	.word	0x08019f84
 8014fac:	08019f84 	.word	0x08019f84
 8014fb0:	08019f84 	.word	0x08019f84
 8014fb4:	08019f8c 	.word	0x08019f8c

08014fb8 <memcpy>:
 8014fb8:	b510      	push	{r4, lr}
 8014fba:	1e43      	subs	r3, r0, #1
 8014fbc:	440a      	add	r2, r1
 8014fbe:	4291      	cmp	r1, r2
 8014fc0:	d100      	bne.n	8014fc4 <memcpy+0xc>
 8014fc2:	bd10      	pop	{r4, pc}
 8014fc4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014fc8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014fcc:	e7f7      	b.n	8014fbe <memcpy+0x6>

08014fce <memset>:
 8014fce:	4402      	add	r2, r0
 8014fd0:	4603      	mov	r3, r0
 8014fd2:	4293      	cmp	r3, r2
 8014fd4:	d100      	bne.n	8014fd8 <memset+0xa>
 8014fd6:	4770      	bx	lr
 8014fd8:	f803 1b01 	strb.w	r1, [r3], #1
 8014fdc:	e7f9      	b.n	8014fd2 <memset+0x4>

08014fde <__cvt>:
 8014fde:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014fe2:	ec55 4b10 	vmov	r4, r5, d0
 8014fe6:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8014fe8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8014fec:	2d00      	cmp	r5, #0
 8014fee:	460e      	mov	r6, r1
 8014ff0:	4691      	mov	r9, r2
 8014ff2:	4619      	mov	r1, r3
 8014ff4:	bfb8      	it	lt
 8014ff6:	4622      	movlt	r2, r4
 8014ff8:	462b      	mov	r3, r5
 8014ffa:	f027 0720 	bic.w	r7, r7, #32
 8014ffe:	bfbb      	ittet	lt
 8015000:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8015004:	461d      	movlt	r5, r3
 8015006:	2300      	movge	r3, #0
 8015008:	232d      	movlt	r3, #45	; 0x2d
 801500a:	bfb8      	it	lt
 801500c:	4614      	movlt	r4, r2
 801500e:	2f46      	cmp	r7, #70	; 0x46
 8015010:	700b      	strb	r3, [r1, #0]
 8015012:	d004      	beq.n	801501e <__cvt+0x40>
 8015014:	2f45      	cmp	r7, #69	; 0x45
 8015016:	d100      	bne.n	801501a <__cvt+0x3c>
 8015018:	3601      	adds	r6, #1
 801501a:	2102      	movs	r1, #2
 801501c:	e000      	b.n	8015020 <__cvt+0x42>
 801501e:	2103      	movs	r1, #3
 8015020:	ab03      	add	r3, sp, #12
 8015022:	9301      	str	r3, [sp, #4]
 8015024:	ab02      	add	r3, sp, #8
 8015026:	9300      	str	r3, [sp, #0]
 8015028:	4632      	mov	r2, r6
 801502a:	4653      	mov	r3, sl
 801502c:	ec45 4b10 	vmov	d0, r4, r5
 8015030:	f001 fdfe 	bl	8016c30 <_dtoa_r>
 8015034:	2f47      	cmp	r7, #71	; 0x47
 8015036:	4680      	mov	r8, r0
 8015038:	d102      	bne.n	8015040 <__cvt+0x62>
 801503a:	f019 0f01 	tst.w	r9, #1
 801503e:	d026      	beq.n	801508e <__cvt+0xb0>
 8015040:	2f46      	cmp	r7, #70	; 0x46
 8015042:	eb08 0906 	add.w	r9, r8, r6
 8015046:	d111      	bne.n	801506c <__cvt+0x8e>
 8015048:	f898 3000 	ldrb.w	r3, [r8]
 801504c:	2b30      	cmp	r3, #48	; 0x30
 801504e:	d10a      	bne.n	8015066 <__cvt+0x88>
 8015050:	2200      	movs	r2, #0
 8015052:	2300      	movs	r3, #0
 8015054:	4620      	mov	r0, r4
 8015056:	4629      	mov	r1, r5
 8015058:	f7eb fd4e 	bl	8000af8 <__aeabi_dcmpeq>
 801505c:	b918      	cbnz	r0, 8015066 <__cvt+0x88>
 801505e:	f1c6 0601 	rsb	r6, r6, #1
 8015062:	f8ca 6000 	str.w	r6, [sl]
 8015066:	f8da 3000 	ldr.w	r3, [sl]
 801506a:	4499      	add	r9, r3
 801506c:	2200      	movs	r2, #0
 801506e:	2300      	movs	r3, #0
 8015070:	4620      	mov	r0, r4
 8015072:	4629      	mov	r1, r5
 8015074:	f7eb fd40 	bl	8000af8 <__aeabi_dcmpeq>
 8015078:	b938      	cbnz	r0, 801508a <__cvt+0xac>
 801507a:	2230      	movs	r2, #48	; 0x30
 801507c:	9b03      	ldr	r3, [sp, #12]
 801507e:	454b      	cmp	r3, r9
 8015080:	d205      	bcs.n	801508e <__cvt+0xb0>
 8015082:	1c59      	adds	r1, r3, #1
 8015084:	9103      	str	r1, [sp, #12]
 8015086:	701a      	strb	r2, [r3, #0]
 8015088:	e7f8      	b.n	801507c <__cvt+0x9e>
 801508a:	f8cd 900c 	str.w	r9, [sp, #12]
 801508e:	9b03      	ldr	r3, [sp, #12]
 8015090:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015092:	eba3 0308 	sub.w	r3, r3, r8
 8015096:	4640      	mov	r0, r8
 8015098:	6013      	str	r3, [r2, #0]
 801509a:	b004      	add	sp, #16
 801509c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080150a0 <__exponent>:
 80150a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80150a2:	2900      	cmp	r1, #0
 80150a4:	4604      	mov	r4, r0
 80150a6:	bfba      	itte	lt
 80150a8:	4249      	neglt	r1, r1
 80150aa:	232d      	movlt	r3, #45	; 0x2d
 80150ac:	232b      	movge	r3, #43	; 0x2b
 80150ae:	2909      	cmp	r1, #9
 80150b0:	f804 2b02 	strb.w	r2, [r4], #2
 80150b4:	7043      	strb	r3, [r0, #1]
 80150b6:	dd20      	ble.n	80150fa <__exponent+0x5a>
 80150b8:	f10d 0307 	add.w	r3, sp, #7
 80150bc:	461f      	mov	r7, r3
 80150be:	260a      	movs	r6, #10
 80150c0:	fb91 f5f6 	sdiv	r5, r1, r6
 80150c4:	fb06 1115 	mls	r1, r6, r5, r1
 80150c8:	3130      	adds	r1, #48	; 0x30
 80150ca:	2d09      	cmp	r5, #9
 80150cc:	f803 1c01 	strb.w	r1, [r3, #-1]
 80150d0:	f103 32ff 	add.w	r2, r3, #4294967295
 80150d4:	4629      	mov	r1, r5
 80150d6:	dc09      	bgt.n	80150ec <__exponent+0x4c>
 80150d8:	3130      	adds	r1, #48	; 0x30
 80150da:	3b02      	subs	r3, #2
 80150dc:	f802 1c01 	strb.w	r1, [r2, #-1]
 80150e0:	42bb      	cmp	r3, r7
 80150e2:	4622      	mov	r2, r4
 80150e4:	d304      	bcc.n	80150f0 <__exponent+0x50>
 80150e6:	1a10      	subs	r0, r2, r0
 80150e8:	b003      	add	sp, #12
 80150ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80150ec:	4613      	mov	r3, r2
 80150ee:	e7e7      	b.n	80150c0 <__exponent+0x20>
 80150f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80150f4:	f804 2b01 	strb.w	r2, [r4], #1
 80150f8:	e7f2      	b.n	80150e0 <__exponent+0x40>
 80150fa:	2330      	movs	r3, #48	; 0x30
 80150fc:	4419      	add	r1, r3
 80150fe:	7083      	strb	r3, [r0, #2]
 8015100:	1d02      	adds	r2, r0, #4
 8015102:	70c1      	strb	r1, [r0, #3]
 8015104:	e7ef      	b.n	80150e6 <__exponent+0x46>
	...

08015108 <_printf_float>:
 8015108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801510c:	b08d      	sub	sp, #52	; 0x34
 801510e:	460c      	mov	r4, r1
 8015110:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8015114:	4616      	mov	r6, r2
 8015116:	461f      	mov	r7, r3
 8015118:	4605      	mov	r5, r0
 801511a:	f002 fe7b 	bl	8017e14 <_localeconv_r>
 801511e:	6803      	ldr	r3, [r0, #0]
 8015120:	9304      	str	r3, [sp, #16]
 8015122:	4618      	mov	r0, r3
 8015124:	f7eb f86c 	bl	8000200 <strlen>
 8015128:	2300      	movs	r3, #0
 801512a:	930a      	str	r3, [sp, #40]	; 0x28
 801512c:	f8d8 3000 	ldr.w	r3, [r8]
 8015130:	9005      	str	r0, [sp, #20]
 8015132:	3307      	adds	r3, #7
 8015134:	f023 0307 	bic.w	r3, r3, #7
 8015138:	f103 0208 	add.w	r2, r3, #8
 801513c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8015140:	f8d4 b000 	ldr.w	fp, [r4]
 8015144:	f8c8 2000 	str.w	r2, [r8]
 8015148:	e9d3 2300 	ldrd	r2, r3, [r3]
 801514c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8015150:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8015154:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8015158:	9307      	str	r3, [sp, #28]
 801515a:	f8cd 8018 	str.w	r8, [sp, #24]
 801515e:	f04f 32ff 	mov.w	r2, #4294967295
 8015162:	4ba7      	ldr	r3, [pc, #668]	; (8015400 <_printf_float+0x2f8>)
 8015164:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015168:	f7eb fcf8 	bl	8000b5c <__aeabi_dcmpun>
 801516c:	bb70      	cbnz	r0, 80151cc <_printf_float+0xc4>
 801516e:	f04f 32ff 	mov.w	r2, #4294967295
 8015172:	4ba3      	ldr	r3, [pc, #652]	; (8015400 <_printf_float+0x2f8>)
 8015174:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015178:	f7eb fcd2 	bl	8000b20 <__aeabi_dcmple>
 801517c:	bb30      	cbnz	r0, 80151cc <_printf_float+0xc4>
 801517e:	2200      	movs	r2, #0
 8015180:	2300      	movs	r3, #0
 8015182:	4640      	mov	r0, r8
 8015184:	4649      	mov	r1, r9
 8015186:	f7eb fcc1 	bl	8000b0c <__aeabi_dcmplt>
 801518a:	b110      	cbz	r0, 8015192 <_printf_float+0x8a>
 801518c:	232d      	movs	r3, #45	; 0x2d
 801518e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015192:	4a9c      	ldr	r2, [pc, #624]	; (8015404 <_printf_float+0x2fc>)
 8015194:	4b9c      	ldr	r3, [pc, #624]	; (8015408 <_printf_float+0x300>)
 8015196:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801519a:	bf8c      	ite	hi
 801519c:	4690      	movhi	r8, r2
 801519e:	4698      	movls	r8, r3
 80151a0:	2303      	movs	r3, #3
 80151a2:	f02b 0204 	bic.w	r2, fp, #4
 80151a6:	6123      	str	r3, [r4, #16]
 80151a8:	6022      	str	r2, [r4, #0]
 80151aa:	f04f 0900 	mov.w	r9, #0
 80151ae:	9700      	str	r7, [sp, #0]
 80151b0:	4633      	mov	r3, r6
 80151b2:	aa0b      	add	r2, sp, #44	; 0x2c
 80151b4:	4621      	mov	r1, r4
 80151b6:	4628      	mov	r0, r5
 80151b8:	f000 f9e6 	bl	8015588 <_printf_common>
 80151bc:	3001      	adds	r0, #1
 80151be:	f040 808d 	bne.w	80152dc <_printf_float+0x1d4>
 80151c2:	f04f 30ff 	mov.w	r0, #4294967295
 80151c6:	b00d      	add	sp, #52	; 0x34
 80151c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80151cc:	4642      	mov	r2, r8
 80151ce:	464b      	mov	r3, r9
 80151d0:	4640      	mov	r0, r8
 80151d2:	4649      	mov	r1, r9
 80151d4:	f7eb fcc2 	bl	8000b5c <__aeabi_dcmpun>
 80151d8:	b110      	cbz	r0, 80151e0 <_printf_float+0xd8>
 80151da:	4a8c      	ldr	r2, [pc, #560]	; (801540c <_printf_float+0x304>)
 80151dc:	4b8c      	ldr	r3, [pc, #560]	; (8015410 <_printf_float+0x308>)
 80151de:	e7da      	b.n	8015196 <_printf_float+0x8e>
 80151e0:	6861      	ldr	r1, [r4, #4]
 80151e2:	1c4b      	adds	r3, r1, #1
 80151e4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80151e8:	a80a      	add	r0, sp, #40	; 0x28
 80151ea:	d13e      	bne.n	801526a <_printf_float+0x162>
 80151ec:	2306      	movs	r3, #6
 80151ee:	6063      	str	r3, [r4, #4]
 80151f0:	2300      	movs	r3, #0
 80151f2:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80151f6:	ab09      	add	r3, sp, #36	; 0x24
 80151f8:	9300      	str	r3, [sp, #0]
 80151fa:	ec49 8b10 	vmov	d0, r8, r9
 80151fe:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8015202:	6022      	str	r2, [r4, #0]
 8015204:	f8cd a004 	str.w	sl, [sp, #4]
 8015208:	6861      	ldr	r1, [r4, #4]
 801520a:	4628      	mov	r0, r5
 801520c:	f7ff fee7 	bl	8014fde <__cvt>
 8015210:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8015214:	2b47      	cmp	r3, #71	; 0x47
 8015216:	4680      	mov	r8, r0
 8015218:	d109      	bne.n	801522e <_printf_float+0x126>
 801521a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801521c:	1cd8      	adds	r0, r3, #3
 801521e:	db02      	blt.n	8015226 <_printf_float+0x11e>
 8015220:	6862      	ldr	r2, [r4, #4]
 8015222:	4293      	cmp	r3, r2
 8015224:	dd47      	ble.n	80152b6 <_printf_float+0x1ae>
 8015226:	f1aa 0a02 	sub.w	sl, sl, #2
 801522a:	fa5f fa8a 	uxtb.w	sl, sl
 801522e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8015232:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015234:	d824      	bhi.n	8015280 <_printf_float+0x178>
 8015236:	3901      	subs	r1, #1
 8015238:	4652      	mov	r2, sl
 801523a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801523e:	9109      	str	r1, [sp, #36]	; 0x24
 8015240:	f7ff ff2e 	bl	80150a0 <__exponent>
 8015244:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015246:	1813      	adds	r3, r2, r0
 8015248:	2a01      	cmp	r2, #1
 801524a:	4681      	mov	r9, r0
 801524c:	6123      	str	r3, [r4, #16]
 801524e:	dc02      	bgt.n	8015256 <_printf_float+0x14e>
 8015250:	6822      	ldr	r2, [r4, #0]
 8015252:	07d1      	lsls	r1, r2, #31
 8015254:	d501      	bpl.n	801525a <_printf_float+0x152>
 8015256:	3301      	adds	r3, #1
 8015258:	6123      	str	r3, [r4, #16]
 801525a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801525e:	2b00      	cmp	r3, #0
 8015260:	d0a5      	beq.n	80151ae <_printf_float+0xa6>
 8015262:	232d      	movs	r3, #45	; 0x2d
 8015264:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015268:	e7a1      	b.n	80151ae <_printf_float+0xa6>
 801526a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 801526e:	f000 8177 	beq.w	8015560 <_printf_float+0x458>
 8015272:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8015276:	d1bb      	bne.n	80151f0 <_printf_float+0xe8>
 8015278:	2900      	cmp	r1, #0
 801527a:	d1b9      	bne.n	80151f0 <_printf_float+0xe8>
 801527c:	2301      	movs	r3, #1
 801527e:	e7b6      	b.n	80151ee <_printf_float+0xe6>
 8015280:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8015284:	d119      	bne.n	80152ba <_printf_float+0x1b2>
 8015286:	2900      	cmp	r1, #0
 8015288:	6863      	ldr	r3, [r4, #4]
 801528a:	dd0c      	ble.n	80152a6 <_printf_float+0x19e>
 801528c:	6121      	str	r1, [r4, #16]
 801528e:	b913      	cbnz	r3, 8015296 <_printf_float+0x18e>
 8015290:	6822      	ldr	r2, [r4, #0]
 8015292:	07d2      	lsls	r2, r2, #31
 8015294:	d502      	bpl.n	801529c <_printf_float+0x194>
 8015296:	3301      	adds	r3, #1
 8015298:	440b      	add	r3, r1
 801529a:	6123      	str	r3, [r4, #16]
 801529c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801529e:	65a3      	str	r3, [r4, #88]	; 0x58
 80152a0:	f04f 0900 	mov.w	r9, #0
 80152a4:	e7d9      	b.n	801525a <_printf_float+0x152>
 80152a6:	b913      	cbnz	r3, 80152ae <_printf_float+0x1a6>
 80152a8:	6822      	ldr	r2, [r4, #0]
 80152aa:	07d0      	lsls	r0, r2, #31
 80152ac:	d501      	bpl.n	80152b2 <_printf_float+0x1aa>
 80152ae:	3302      	adds	r3, #2
 80152b0:	e7f3      	b.n	801529a <_printf_float+0x192>
 80152b2:	2301      	movs	r3, #1
 80152b4:	e7f1      	b.n	801529a <_printf_float+0x192>
 80152b6:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80152ba:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80152be:	4293      	cmp	r3, r2
 80152c0:	db05      	blt.n	80152ce <_printf_float+0x1c6>
 80152c2:	6822      	ldr	r2, [r4, #0]
 80152c4:	6123      	str	r3, [r4, #16]
 80152c6:	07d1      	lsls	r1, r2, #31
 80152c8:	d5e8      	bpl.n	801529c <_printf_float+0x194>
 80152ca:	3301      	adds	r3, #1
 80152cc:	e7e5      	b.n	801529a <_printf_float+0x192>
 80152ce:	2b00      	cmp	r3, #0
 80152d0:	bfd4      	ite	le
 80152d2:	f1c3 0302 	rsble	r3, r3, #2
 80152d6:	2301      	movgt	r3, #1
 80152d8:	4413      	add	r3, r2
 80152da:	e7de      	b.n	801529a <_printf_float+0x192>
 80152dc:	6823      	ldr	r3, [r4, #0]
 80152de:	055a      	lsls	r2, r3, #21
 80152e0:	d407      	bmi.n	80152f2 <_printf_float+0x1ea>
 80152e2:	6923      	ldr	r3, [r4, #16]
 80152e4:	4642      	mov	r2, r8
 80152e6:	4631      	mov	r1, r6
 80152e8:	4628      	mov	r0, r5
 80152ea:	47b8      	blx	r7
 80152ec:	3001      	adds	r0, #1
 80152ee:	d12b      	bne.n	8015348 <_printf_float+0x240>
 80152f0:	e767      	b.n	80151c2 <_printf_float+0xba>
 80152f2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80152f6:	f240 80dc 	bls.w	80154b2 <_printf_float+0x3aa>
 80152fa:	2200      	movs	r2, #0
 80152fc:	2300      	movs	r3, #0
 80152fe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015302:	f7eb fbf9 	bl	8000af8 <__aeabi_dcmpeq>
 8015306:	2800      	cmp	r0, #0
 8015308:	d033      	beq.n	8015372 <_printf_float+0x26a>
 801530a:	2301      	movs	r3, #1
 801530c:	4a41      	ldr	r2, [pc, #260]	; (8015414 <_printf_float+0x30c>)
 801530e:	4631      	mov	r1, r6
 8015310:	4628      	mov	r0, r5
 8015312:	47b8      	blx	r7
 8015314:	3001      	adds	r0, #1
 8015316:	f43f af54 	beq.w	80151c2 <_printf_float+0xba>
 801531a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801531e:	429a      	cmp	r2, r3
 8015320:	db02      	blt.n	8015328 <_printf_float+0x220>
 8015322:	6823      	ldr	r3, [r4, #0]
 8015324:	07d8      	lsls	r0, r3, #31
 8015326:	d50f      	bpl.n	8015348 <_printf_float+0x240>
 8015328:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801532c:	4631      	mov	r1, r6
 801532e:	4628      	mov	r0, r5
 8015330:	47b8      	blx	r7
 8015332:	3001      	adds	r0, #1
 8015334:	f43f af45 	beq.w	80151c2 <_printf_float+0xba>
 8015338:	f04f 0800 	mov.w	r8, #0
 801533c:	f104 091a 	add.w	r9, r4, #26
 8015340:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015342:	3b01      	subs	r3, #1
 8015344:	4543      	cmp	r3, r8
 8015346:	dc09      	bgt.n	801535c <_printf_float+0x254>
 8015348:	6823      	ldr	r3, [r4, #0]
 801534a:	079b      	lsls	r3, r3, #30
 801534c:	f100 8103 	bmi.w	8015556 <_printf_float+0x44e>
 8015350:	68e0      	ldr	r0, [r4, #12]
 8015352:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015354:	4298      	cmp	r0, r3
 8015356:	bfb8      	it	lt
 8015358:	4618      	movlt	r0, r3
 801535a:	e734      	b.n	80151c6 <_printf_float+0xbe>
 801535c:	2301      	movs	r3, #1
 801535e:	464a      	mov	r2, r9
 8015360:	4631      	mov	r1, r6
 8015362:	4628      	mov	r0, r5
 8015364:	47b8      	blx	r7
 8015366:	3001      	adds	r0, #1
 8015368:	f43f af2b 	beq.w	80151c2 <_printf_float+0xba>
 801536c:	f108 0801 	add.w	r8, r8, #1
 8015370:	e7e6      	b.n	8015340 <_printf_float+0x238>
 8015372:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015374:	2b00      	cmp	r3, #0
 8015376:	dc2b      	bgt.n	80153d0 <_printf_float+0x2c8>
 8015378:	2301      	movs	r3, #1
 801537a:	4a26      	ldr	r2, [pc, #152]	; (8015414 <_printf_float+0x30c>)
 801537c:	4631      	mov	r1, r6
 801537e:	4628      	mov	r0, r5
 8015380:	47b8      	blx	r7
 8015382:	3001      	adds	r0, #1
 8015384:	f43f af1d 	beq.w	80151c2 <_printf_float+0xba>
 8015388:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801538a:	b923      	cbnz	r3, 8015396 <_printf_float+0x28e>
 801538c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801538e:	b913      	cbnz	r3, 8015396 <_printf_float+0x28e>
 8015390:	6823      	ldr	r3, [r4, #0]
 8015392:	07d9      	lsls	r1, r3, #31
 8015394:	d5d8      	bpl.n	8015348 <_printf_float+0x240>
 8015396:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801539a:	4631      	mov	r1, r6
 801539c:	4628      	mov	r0, r5
 801539e:	47b8      	blx	r7
 80153a0:	3001      	adds	r0, #1
 80153a2:	f43f af0e 	beq.w	80151c2 <_printf_float+0xba>
 80153a6:	f04f 0900 	mov.w	r9, #0
 80153aa:	f104 0a1a 	add.w	sl, r4, #26
 80153ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80153b0:	425b      	negs	r3, r3
 80153b2:	454b      	cmp	r3, r9
 80153b4:	dc01      	bgt.n	80153ba <_printf_float+0x2b2>
 80153b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80153b8:	e794      	b.n	80152e4 <_printf_float+0x1dc>
 80153ba:	2301      	movs	r3, #1
 80153bc:	4652      	mov	r2, sl
 80153be:	4631      	mov	r1, r6
 80153c0:	4628      	mov	r0, r5
 80153c2:	47b8      	blx	r7
 80153c4:	3001      	adds	r0, #1
 80153c6:	f43f aefc 	beq.w	80151c2 <_printf_float+0xba>
 80153ca:	f109 0901 	add.w	r9, r9, #1
 80153ce:	e7ee      	b.n	80153ae <_printf_float+0x2a6>
 80153d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80153d2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80153d4:	429a      	cmp	r2, r3
 80153d6:	bfa8      	it	ge
 80153d8:	461a      	movge	r2, r3
 80153da:	2a00      	cmp	r2, #0
 80153dc:	4691      	mov	r9, r2
 80153de:	dd07      	ble.n	80153f0 <_printf_float+0x2e8>
 80153e0:	4613      	mov	r3, r2
 80153e2:	4631      	mov	r1, r6
 80153e4:	4642      	mov	r2, r8
 80153e6:	4628      	mov	r0, r5
 80153e8:	47b8      	blx	r7
 80153ea:	3001      	adds	r0, #1
 80153ec:	f43f aee9 	beq.w	80151c2 <_printf_float+0xba>
 80153f0:	f104 031a 	add.w	r3, r4, #26
 80153f4:	f04f 0b00 	mov.w	fp, #0
 80153f8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80153fc:	9306      	str	r3, [sp, #24]
 80153fe:	e015      	b.n	801542c <_printf_float+0x324>
 8015400:	7fefffff 	.word	0x7fefffff
 8015404:	08019c4c 	.word	0x08019c4c
 8015408:	08019c48 	.word	0x08019c48
 801540c:	08019c54 	.word	0x08019c54
 8015410:	08019c50 	.word	0x08019c50
 8015414:	08019e73 	.word	0x08019e73
 8015418:	2301      	movs	r3, #1
 801541a:	9a06      	ldr	r2, [sp, #24]
 801541c:	4631      	mov	r1, r6
 801541e:	4628      	mov	r0, r5
 8015420:	47b8      	blx	r7
 8015422:	3001      	adds	r0, #1
 8015424:	f43f aecd 	beq.w	80151c2 <_printf_float+0xba>
 8015428:	f10b 0b01 	add.w	fp, fp, #1
 801542c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8015430:	ebaa 0309 	sub.w	r3, sl, r9
 8015434:	455b      	cmp	r3, fp
 8015436:	dcef      	bgt.n	8015418 <_printf_float+0x310>
 8015438:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801543c:	429a      	cmp	r2, r3
 801543e:	44d0      	add	r8, sl
 8015440:	db15      	blt.n	801546e <_printf_float+0x366>
 8015442:	6823      	ldr	r3, [r4, #0]
 8015444:	07da      	lsls	r2, r3, #31
 8015446:	d412      	bmi.n	801546e <_printf_float+0x366>
 8015448:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801544a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801544c:	eba3 020a 	sub.w	r2, r3, sl
 8015450:	eba3 0a01 	sub.w	sl, r3, r1
 8015454:	4592      	cmp	sl, r2
 8015456:	bfa8      	it	ge
 8015458:	4692      	movge	sl, r2
 801545a:	f1ba 0f00 	cmp.w	sl, #0
 801545e:	dc0e      	bgt.n	801547e <_printf_float+0x376>
 8015460:	f04f 0800 	mov.w	r8, #0
 8015464:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015468:	f104 091a 	add.w	r9, r4, #26
 801546c:	e019      	b.n	80154a2 <_printf_float+0x39a>
 801546e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015472:	4631      	mov	r1, r6
 8015474:	4628      	mov	r0, r5
 8015476:	47b8      	blx	r7
 8015478:	3001      	adds	r0, #1
 801547a:	d1e5      	bne.n	8015448 <_printf_float+0x340>
 801547c:	e6a1      	b.n	80151c2 <_printf_float+0xba>
 801547e:	4653      	mov	r3, sl
 8015480:	4642      	mov	r2, r8
 8015482:	4631      	mov	r1, r6
 8015484:	4628      	mov	r0, r5
 8015486:	47b8      	blx	r7
 8015488:	3001      	adds	r0, #1
 801548a:	d1e9      	bne.n	8015460 <_printf_float+0x358>
 801548c:	e699      	b.n	80151c2 <_printf_float+0xba>
 801548e:	2301      	movs	r3, #1
 8015490:	464a      	mov	r2, r9
 8015492:	4631      	mov	r1, r6
 8015494:	4628      	mov	r0, r5
 8015496:	47b8      	blx	r7
 8015498:	3001      	adds	r0, #1
 801549a:	f43f ae92 	beq.w	80151c2 <_printf_float+0xba>
 801549e:	f108 0801 	add.w	r8, r8, #1
 80154a2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80154a6:	1a9b      	subs	r3, r3, r2
 80154a8:	eba3 030a 	sub.w	r3, r3, sl
 80154ac:	4543      	cmp	r3, r8
 80154ae:	dcee      	bgt.n	801548e <_printf_float+0x386>
 80154b0:	e74a      	b.n	8015348 <_printf_float+0x240>
 80154b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80154b4:	2a01      	cmp	r2, #1
 80154b6:	dc01      	bgt.n	80154bc <_printf_float+0x3b4>
 80154b8:	07db      	lsls	r3, r3, #31
 80154ba:	d53a      	bpl.n	8015532 <_printf_float+0x42a>
 80154bc:	2301      	movs	r3, #1
 80154be:	4642      	mov	r2, r8
 80154c0:	4631      	mov	r1, r6
 80154c2:	4628      	mov	r0, r5
 80154c4:	47b8      	blx	r7
 80154c6:	3001      	adds	r0, #1
 80154c8:	f43f ae7b 	beq.w	80151c2 <_printf_float+0xba>
 80154cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80154d0:	4631      	mov	r1, r6
 80154d2:	4628      	mov	r0, r5
 80154d4:	47b8      	blx	r7
 80154d6:	3001      	adds	r0, #1
 80154d8:	f108 0801 	add.w	r8, r8, #1
 80154dc:	f43f ae71 	beq.w	80151c2 <_printf_float+0xba>
 80154e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80154e2:	2200      	movs	r2, #0
 80154e4:	f103 3aff 	add.w	sl, r3, #4294967295
 80154e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80154ec:	2300      	movs	r3, #0
 80154ee:	f7eb fb03 	bl	8000af8 <__aeabi_dcmpeq>
 80154f2:	b9c8      	cbnz	r0, 8015528 <_printf_float+0x420>
 80154f4:	4653      	mov	r3, sl
 80154f6:	4642      	mov	r2, r8
 80154f8:	4631      	mov	r1, r6
 80154fa:	4628      	mov	r0, r5
 80154fc:	47b8      	blx	r7
 80154fe:	3001      	adds	r0, #1
 8015500:	d10e      	bne.n	8015520 <_printf_float+0x418>
 8015502:	e65e      	b.n	80151c2 <_printf_float+0xba>
 8015504:	2301      	movs	r3, #1
 8015506:	4652      	mov	r2, sl
 8015508:	4631      	mov	r1, r6
 801550a:	4628      	mov	r0, r5
 801550c:	47b8      	blx	r7
 801550e:	3001      	adds	r0, #1
 8015510:	f43f ae57 	beq.w	80151c2 <_printf_float+0xba>
 8015514:	f108 0801 	add.w	r8, r8, #1
 8015518:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801551a:	3b01      	subs	r3, #1
 801551c:	4543      	cmp	r3, r8
 801551e:	dcf1      	bgt.n	8015504 <_printf_float+0x3fc>
 8015520:	464b      	mov	r3, r9
 8015522:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8015526:	e6de      	b.n	80152e6 <_printf_float+0x1de>
 8015528:	f04f 0800 	mov.w	r8, #0
 801552c:	f104 0a1a 	add.w	sl, r4, #26
 8015530:	e7f2      	b.n	8015518 <_printf_float+0x410>
 8015532:	2301      	movs	r3, #1
 8015534:	e7df      	b.n	80154f6 <_printf_float+0x3ee>
 8015536:	2301      	movs	r3, #1
 8015538:	464a      	mov	r2, r9
 801553a:	4631      	mov	r1, r6
 801553c:	4628      	mov	r0, r5
 801553e:	47b8      	blx	r7
 8015540:	3001      	adds	r0, #1
 8015542:	f43f ae3e 	beq.w	80151c2 <_printf_float+0xba>
 8015546:	f108 0801 	add.w	r8, r8, #1
 801554a:	68e3      	ldr	r3, [r4, #12]
 801554c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801554e:	1a9b      	subs	r3, r3, r2
 8015550:	4543      	cmp	r3, r8
 8015552:	dcf0      	bgt.n	8015536 <_printf_float+0x42e>
 8015554:	e6fc      	b.n	8015350 <_printf_float+0x248>
 8015556:	f04f 0800 	mov.w	r8, #0
 801555a:	f104 0919 	add.w	r9, r4, #25
 801555e:	e7f4      	b.n	801554a <_printf_float+0x442>
 8015560:	2900      	cmp	r1, #0
 8015562:	f43f ae8b 	beq.w	801527c <_printf_float+0x174>
 8015566:	2300      	movs	r3, #0
 8015568:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801556c:	ab09      	add	r3, sp, #36	; 0x24
 801556e:	9300      	str	r3, [sp, #0]
 8015570:	ec49 8b10 	vmov	d0, r8, r9
 8015574:	6022      	str	r2, [r4, #0]
 8015576:	f8cd a004 	str.w	sl, [sp, #4]
 801557a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801557e:	4628      	mov	r0, r5
 8015580:	f7ff fd2d 	bl	8014fde <__cvt>
 8015584:	4680      	mov	r8, r0
 8015586:	e648      	b.n	801521a <_printf_float+0x112>

08015588 <_printf_common>:
 8015588:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801558c:	4691      	mov	r9, r2
 801558e:	461f      	mov	r7, r3
 8015590:	688a      	ldr	r2, [r1, #8]
 8015592:	690b      	ldr	r3, [r1, #16]
 8015594:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015598:	4293      	cmp	r3, r2
 801559a:	bfb8      	it	lt
 801559c:	4613      	movlt	r3, r2
 801559e:	f8c9 3000 	str.w	r3, [r9]
 80155a2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80155a6:	4606      	mov	r6, r0
 80155a8:	460c      	mov	r4, r1
 80155aa:	b112      	cbz	r2, 80155b2 <_printf_common+0x2a>
 80155ac:	3301      	adds	r3, #1
 80155ae:	f8c9 3000 	str.w	r3, [r9]
 80155b2:	6823      	ldr	r3, [r4, #0]
 80155b4:	0699      	lsls	r1, r3, #26
 80155b6:	bf42      	ittt	mi
 80155b8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80155bc:	3302      	addmi	r3, #2
 80155be:	f8c9 3000 	strmi.w	r3, [r9]
 80155c2:	6825      	ldr	r5, [r4, #0]
 80155c4:	f015 0506 	ands.w	r5, r5, #6
 80155c8:	d107      	bne.n	80155da <_printf_common+0x52>
 80155ca:	f104 0a19 	add.w	sl, r4, #25
 80155ce:	68e3      	ldr	r3, [r4, #12]
 80155d0:	f8d9 2000 	ldr.w	r2, [r9]
 80155d4:	1a9b      	subs	r3, r3, r2
 80155d6:	42ab      	cmp	r3, r5
 80155d8:	dc28      	bgt.n	801562c <_printf_common+0xa4>
 80155da:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80155de:	6822      	ldr	r2, [r4, #0]
 80155e0:	3300      	adds	r3, #0
 80155e2:	bf18      	it	ne
 80155e4:	2301      	movne	r3, #1
 80155e6:	0692      	lsls	r2, r2, #26
 80155e8:	d42d      	bmi.n	8015646 <_printf_common+0xbe>
 80155ea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80155ee:	4639      	mov	r1, r7
 80155f0:	4630      	mov	r0, r6
 80155f2:	47c0      	blx	r8
 80155f4:	3001      	adds	r0, #1
 80155f6:	d020      	beq.n	801563a <_printf_common+0xb2>
 80155f8:	6823      	ldr	r3, [r4, #0]
 80155fa:	68e5      	ldr	r5, [r4, #12]
 80155fc:	f8d9 2000 	ldr.w	r2, [r9]
 8015600:	f003 0306 	and.w	r3, r3, #6
 8015604:	2b04      	cmp	r3, #4
 8015606:	bf08      	it	eq
 8015608:	1aad      	subeq	r5, r5, r2
 801560a:	68a3      	ldr	r3, [r4, #8]
 801560c:	6922      	ldr	r2, [r4, #16]
 801560e:	bf0c      	ite	eq
 8015610:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015614:	2500      	movne	r5, #0
 8015616:	4293      	cmp	r3, r2
 8015618:	bfc4      	itt	gt
 801561a:	1a9b      	subgt	r3, r3, r2
 801561c:	18ed      	addgt	r5, r5, r3
 801561e:	f04f 0900 	mov.w	r9, #0
 8015622:	341a      	adds	r4, #26
 8015624:	454d      	cmp	r5, r9
 8015626:	d11a      	bne.n	801565e <_printf_common+0xd6>
 8015628:	2000      	movs	r0, #0
 801562a:	e008      	b.n	801563e <_printf_common+0xb6>
 801562c:	2301      	movs	r3, #1
 801562e:	4652      	mov	r2, sl
 8015630:	4639      	mov	r1, r7
 8015632:	4630      	mov	r0, r6
 8015634:	47c0      	blx	r8
 8015636:	3001      	adds	r0, #1
 8015638:	d103      	bne.n	8015642 <_printf_common+0xba>
 801563a:	f04f 30ff 	mov.w	r0, #4294967295
 801563e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015642:	3501      	adds	r5, #1
 8015644:	e7c3      	b.n	80155ce <_printf_common+0x46>
 8015646:	18e1      	adds	r1, r4, r3
 8015648:	1c5a      	adds	r2, r3, #1
 801564a:	2030      	movs	r0, #48	; 0x30
 801564c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015650:	4422      	add	r2, r4
 8015652:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015656:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801565a:	3302      	adds	r3, #2
 801565c:	e7c5      	b.n	80155ea <_printf_common+0x62>
 801565e:	2301      	movs	r3, #1
 8015660:	4622      	mov	r2, r4
 8015662:	4639      	mov	r1, r7
 8015664:	4630      	mov	r0, r6
 8015666:	47c0      	blx	r8
 8015668:	3001      	adds	r0, #1
 801566a:	d0e6      	beq.n	801563a <_printf_common+0xb2>
 801566c:	f109 0901 	add.w	r9, r9, #1
 8015670:	e7d8      	b.n	8015624 <_printf_common+0x9c>
	...

08015674 <_printf_i>:
 8015674:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015678:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801567c:	460c      	mov	r4, r1
 801567e:	7e09      	ldrb	r1, [r1, #24]
 8015680:	b085      	sub	sp, #20
 8015682:	296e      	cmp	r1, #110	; 0x6e
 8015684:	4617      	mov	r7, r2
 8015686:	4606      	mov	r6, r0
 8015688:	4698      	mov	r8, r3
 801568a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801568c:	f000 80b3 	beq.w	80157f6 <_printf_i+0x182>
 8015690:	d822      	bhi.n	80156d8 <_printf_i+0x64>
 8015692:	2963      	cmp	r1, #99	; 0x63
 8015694:	d036      	beq.n	8015704 <_printf_i+0x90>
 8015696:	d80a      	bhi.n	80156ae <_printf_i+0x3a>
 8015698:	2900      	cmp	r1, #0
 801569a:	f000 80b9 	beq.w	8015810 <_printf_i+0x19c>
 801569e:	2958      	cmp	r1, #88	; 0x58
 80156a0:	f000 8083 	beq.w	80157aa <_printf_i+0x136>
 80156a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80156a8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80156ac:	e032      	b.n	8015714 <_printf_i+0xa0>
 80156ae:	2964      	cmp	r1, #100	; 0x64
 80156b0:	d001      	beq.n	80156b6 <_printf_i+0x42>
 80156b2:	2969      	cmp	r1, #105	; 0x69
 80156b4:	d1f6      	bne.n	80156a4 <_printf_i+0x30>
 80156b6:	6820      	ldr	r0, [r4, #0]
 80156b8:	6813      	ldr	r3, [r2, #0]
 80156ba:	0605      	lsls	r5, r0, #24
 80156bc:	f103 0104 	add.w	r1, r3, #4
 80156c0:	d52a      	bpl.n	8015718 <_printf_i+0xa4>
 80156c2:	681b      	ldr	r3, [r3, #0]
 80156c4:	6011      	str	r1, [r2, #0]
 80156c6:	2b00      	cmp	r3, #0
 80156c8:	da03      	bge.n	80156d2 <_printf_i+0x5e>
 80156ca:	222d      	movs	r2, #45	; 0x2d
 80156cc:	425b      	negs	r3, r3
 80156ce:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80156d2:	486f      	ldr	r0, [pc, #444]	; (8015890 <_printf_i+0x21c>)
 80156d4:	220a      	movs	r2, #10
 80156d6:	e039      	b.n	801574c <_printf_i+0xd8>
 80156d8:	2973      	cmp	r1, #115	; 0x73
 80156da:	f000 809d 	beq.w	8015818 <_printf_i+0x1a4>
 80156de:	d808      	bhi.n	80156f2 <_printf_i+0x7e>
 80156e0:	296f      	cmp	r1, #111	; 0x6f
 80156e2:	d020      	beq.n	8015726 <_printf_i+0xb2>
 80156e4:	2970      	cmp	r1, #112	; 0x70
 80156e6:	d1dd      	bne.n	80156a4 <_printf_i+0x30>
 80156e8:	6823      	ldr	r3, [r4, #0]
 80156ea:	f043 0320 	orr.w	r3, r3, #32
 80156ee:	6023      	str	r3, [r4, #0]
 80156f0:	e003      	b.n	80156fa <_printf_i+0x86>
 80156f2:	2975      	cmp	r1, #117	; 0x75
 80156f4:	d017      	beq.n	8015726 <_printf_i+0xb2>
 80156f6:	2978      	cmp	r1, #120	; 0x78
 80156f8:	d1d4      	bne.n	80156a4 <_printf_i+0x30>
 80156fa:	2378      	movs	r3, #120	; 0x78
 80156fc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8015700:	4864      	ldr	r0, [pc, #400]	; (8015894 <_printf_i+0x220>)
 8015702:	e055      	b.n	80157b0 <_printf_i+0x13c>
 8015704:	6813      	ldr	r3, [r2, #0]
 8015706:	1d19      	adds	r1, r3, #4
 8015708:	681b      	ldr	r3, [r3, #0]
 801570a:	6011      	str	r1, [r2, #0]
 801570c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015710:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015714:	2301      	movs	r3, #1
 8015716:	e08c      	b.n	8015832 <_printf_i+0x1be>
 8015718:	681b      	ldr	r3, [r3, #0]
 801571a:	6011      	str	r1, [r2, #0]
 801571c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8015720:	bf18      	it	ne
 8015722:	b21b      	sxthne	r3, r3
 8015724:	e7cf      	b.n	80156c6 <_printf_i+0x52>
 8015726:	6813      	ldr	r3, [r2, #0]
 8015728:	6825      	ldr	r5, [r4, #0]
 801572a:	1d18      	adds	r0, r3, #4
 801572c:	6010      	str	r0, [r2, #0]
 801572e:	0628      	lsls	r0, r5, #24
 8015730:	d501      	bpl.n	8015736 <_printf_i+0xc2>
 8015732:	681b      	ldr	r3, [r3, #0]
 8015734:	e002      	b.n	801573c <_printf_i+0xc8>
 8015736:	0668      	lsls	r0, r5, #25
 8015738:	d5fb      	bpl.n	8015732 <_printf_i+0xbe>
 801573a:	881b      	ldrh	r3, [r3, #0]
 801573c:	4854      	ldr	r0, [pc, #336]	; (8015890 <_printf_i+0x21c>)
 801573e:	296f      	cmp	r1, #111	; 0x6f
 8015740:	bf14      	ite	ne
 8015742:	220a      	movne	r2, #10
 8015744:	2208      	moveq	r2, #8
 8015746:	2100      	movs	r1, #0
 8015748:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801574c:	6865      	ldr	r5, [r4, #4]
 801574e:	60a5      	str	r5, [r4, #8]
 8015750:	2d00      	cmp	r5, #0
 8015752:	f2c0 8095 	blt.w	8015880 <_printf_i+0x20c>
 8015756:	6821      	ldr	r1, [r4, #0]
 8015758:	f021 0104 	bic.w	r1, r1, #4
 801575c:	6021      	str	r1, [r4, #0]
 801575e:	2b00      	cmp	r3, #0
 8015760:	d13d      	bne.n	80157de <_printf_i+0x16a>
 8015762:	2d00      	cmp	r5, #0
 8015764:	f040 808e 	bne.w	8015884 <_printf_i+0x210>
 8015768:	4665      	mov	r5, ip
 801576a:	2a08      	cmp	r2, #8
 801576c:	d10b      	bne.n	8015786 <_printf_i+0x112>
 801576e:	6823      	ldr	r3, [r4, #0]
 8015770:	07db      	lsls	r3, r3, #31
 8015772:	d508      	bpl.n	8015786 <_printf_i+0x112>
 8015774:	6923      	ldr	r3, [r4, #16]
 8015776:	6862      	ldr	r2, [r4, #4]
 8015778:	429a      	cmp	r2, r3
 801577a:	bfde      	ittt	le
 801577c:	2330      	movle	r3, #48	; 0x30
 801577e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8015782:	f105 35ff 	addle.w	r5, r5, #4294967295
 8015786:	ebac 0305 	sub.w	r3, ip, r5
 801578a:	6123      	str	r3, [r4, #16]
 801578c:	f8cd 8000 	str.w	r8, [sp]
 8015790:	463b      	mov	r3, r7
 8015792:	aa03      	add	r2, sp, #12
 8015794:	4621      	mov	r1, r4
 8015796:	4630      	mov	r0, r6
 8015798:	f7ff fef6 	bl	8015588 <_printf_common>
 801579c:	3001      	adds	r0, #1
 801579e:	d14d      	bne.n	801583c <_printf_i+0x1c8>
 80157a0:	f04f 30ff 	mov.w	r0, #4294967295
 80157a4:	b005      	add	sp, #20
 80157a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80157aa:	4839      	ldr	r0, [pc, #228]	; (8015890 <_printf_i+0x21c>)
 80157ac:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80157b0:	6813      	ldr	r3, [r2, #0]
 80157b2:	6821      	ldr	r1, [r4, #0]
 80157b4:	1d1d      	adds	r5, r3, #4
 80157b6:	681b      	ldr	r3, [r3, #0]
 80157b8:	6015      	str	r5, [r2, #0]
 80157ba:	060a      	lsls	r2, r1, #24
 80157bc:	d50b      	bpl.n	80157d6 <_printf_i+0x162>
 80157be:	07ca      	lsls	r2, r1, #31
 80157c0:	bf44      	itt	mi
 80157c2:	f041 0120 	orrmi.w	r1, r1, #32
 80157c6:	6021      	strmi	r1, [r4, #0]
 80157c8:	b91b      	cbnz	r3, 80157d2 <_printf_i+0x15e>
 80157ca:	6822      	ldr	r2, [r4, #0]
 80157cc:	f022 0220 	bic.w	r2, r2, #32
 80157d0:	6022      	str	r2, [r4, #0]
 80157d2:	2210      	movs	r2, #16
 80157d4:	e7b7      	b.n	8015746 <_printf_i+0xd2>
 80157d6:	064d      	lsls	r5, r1, #25
 80157d8:	bf48      	it	mi
 80157da:	b29b      	uxthmi	r3, r3
 80157dc:	e7ef      	b.n	80157be <_printf_i+0x14a>
 80157de:	4665      	mov	r5, ip
 80157e0:	fbb3 f1f2 	udiv	r1, r3, r2
 80157e4:	fb02 3311 	mls	r3, r2, r1, r3
 80157e8:	5cc3      	ldrb	r3, [r0, r3]
 80157ea:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80157ee:	460b      	mov	r3, r1
 80157f0:	2900      	cmp	r1, #0
 80157f2:	d1f5      	bne.n	80157e0 <_printf_i+0x16c>
 80157f4:	e7b9      	b.n	801576a <_printf_i+0xf6>
 80157f6:	6813      	ldr	r3, [r2, #0]
 80157f8:	6825      	ldr	r5, [r4, #0]
 80157fa:	6961      	ldr	r1, [r4, #20]
 80157fc:	1d18      	adds	r0, r3, #4
 80157fe:	6010      	str	r0, [r2, #0]
 8015800:	0628      	lsls	r0, r5, #24
 8015802:	681b      	ldr	r3, [r3, #0]
 8015804:	d501      	bpl.n	801580a <_printf_i+0x196>
 8015806:	6019      	str	r1, [r3, #0]
 8015808:	e002      	b.n	8015810 <_printf_i+0x19c>
 801580a:	066a      	lsls	r2, r5, #25
 801580c:	d5fb      	bpl.n	8015806 <_printf_i+0x192>
 801580e:	8019      	strh	r1, [r3, #0]
 8015810:	2300      	movs	r3, #0
 8015812:	6123      	str	r3, [r4, #16]
 8015814:	4665      	mov	r5, ip
 8015816:	e7b9      	b.n	801578c <_printf_i+0x118>
 8015818:	6813      	ldr	r3, [r2, #0]
 801581a:	1d19      	adds	r1, r3, #4
 801581c:	6011      	str	r1, [r2, #0]
 801581e:	681d      	ldr	r5, [r3, #0]
 8015820:	6862      	ldr	r2, [r4, #4]
 8015822:	2100      	movs	r1, #0
 8015824:	4628      	mov	r0, r5
 8015826:	f7ea fcf3 	bl	8000210 <memchr>
 801582a:	b108      	cbz	r0, 8015830 <_printf_i+0x1bc>
 801582c:	1b40      	subs	r0, r0, r5
 801582e:	6060      	str	r0, [r4, #4]
 8015830:	6863      	ldr	r3, [r4, #4]
 8015832:	6123      	str	r3, [r4, #16]
 8015834:	2300      	movs	r3, #0
 8015836:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801583a:	e7a7      	b.n	801578c <_printf_i+0x118>
 801583c:	6923      	ldr	r3, [r4, #16]
 801583e:	462a      	mov	r2, r5
 8015840:	4639      	mov	r1, r7
 8015842:	4630      	mov	r0, r6
 8015844:	47c0      	blx	r8
 8015846:	3001      	adds	r0, #1
 8015848:	d0aa      	beq.n	80157a0 <_printf_i+0x12c>
 801584a:	6823      	ldr	r3, [r4, #0]
 801584c:	079b      	lsls	r3, r3, #30
 801584e:	d413      	bmi.n	8015878 <_printf_i+0x204>
 8015850:	68e0      	ldr	r0, [r4, #12]
 8015852:	9b03      	ldr	r3, [sp, #12]
 8015854:	4298      	cmp	r0, r3
 8015856:	bfb8      	it	lt
 8015858:	4618      	movlt	r0, r3
 801585a:	e7a3      	b.n	80157a4 <_printf_i+0x130>
 801585c:	2301      	movs	r3, #1
 801585e:	464a      	mov	r2, r9
 8015860:	4639      	mov	r1, r7
 8015862:	4630      	mov	r0, r6
 8015864:	47c0      	blx	r8
 8015866:	3001      	adds	r0, #1
 8015868:	d09a      	beq.n	80157a0 <_printf_i+0x12c>
 801586a:	3501      	adds	r5, #1
 801586c:	68e3      	ldr	r3, [r4, #12]
 801586e:	9a03      	ldr	r2, [sp, #12]
 8015870:	1a9b      	subs	r3, r3, r2
 8015872:	42ab      	cmp	r3, r5
 8015874:	dcf2      	bgt.n	801585c <_printf_i+0x1e8>
 8015876:	e7eb      	b.n	8015850 <_printf_i+0x1dc>
 8015878:	2500      	movs	r5, #0
 801587a:	f104 0919 	add.w	r9, r4, #25
 801587e:	e7f5      	b.n	801586c <_printf_i+0x1f8>
 8015880:	2b00      	cmp	r3, #0
 8015882:	d1ac      	bne.n	80157de <_printf_i+0x16a>
 8015884:	7803      	ldrb	r3, [r0, #0]
 8015886:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801588a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801588e:	e76c      	b.n	801576a <_printf_i+0xf6>
 8015890:	08019c58 	.word	0x08019c58
 8015894:	08019c69 	.word	0x08019c69

08015898 <_scanf_float>:
 8015898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801589c:	469a      	mov	sl, r3
 801589e:	688b      	ldr	r3, [r1, #8]
 80158a0:	4616      	mov	r6, r2
 80158a2:	1e5a      	subs	r2, r3, #1
 80158a4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80158a8:	b087      	sub	sp, #28
 80158aa:	bf83      	ittte	hi
 80158ac:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 80158b0:	189b      	addhi	r3, r3, r2
 80158b2:	9301      	strhi	r3, [sp, #4]
 80158b4:	2300      	movls	r3, #0
 80158b6:	bf86      	itte	hi
 80158b8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80158bc:	608b      	strhi	r3, [r1, #8]
 80158be:	9301      	strls	r3, [sp, #4]
 80158c0:	680b      	ldr	r3, [r1, #0]
 80158c2:	4688      	mov	r8, r1
 80158c4:	f04f 0b00 	mov.w	fp, #0
 80158c8:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80158cc:	f848 3b1c 	str.w	r3, [r8], #28
 80158d0:	e9cd bb03 	strd	fp, fp, [sp, #12]
 80158d4:	4607      	mov	r7, r0
 80158d6:	460c      	mov	r4, r1
 80158d8:	4645      	mov	r5, r8
 80158da:	465a      	mov	r2, fp
 80158dc:	46d9      	mov	r9, fp
 80158de:	f8cd b008 	str.w	fp, [sp, #8]
 80158e2:	68a1      	ldr	r1, [r4, #8]
 80158e4:	b181      	cbz	r1, 8015908 <_scanf_float+0x70>
 80158e6:	6833      	ldr	r3, [r6, #0]
 80158e8:	781b      	ldrb	r3, [r3, #0]
 80158ea:	2b49      	cmp	r3, #73	; 0x49
 80158ec:	d071      	beq.n	80159d2 <_scanf_float+0x13a>
 80158ee:	d84d      	bhi.n	801598c <_scanf_float+0xf4>
 80158f0:	2b39      	cmp	r3, #57	; 0x39
 80158f2:	d840      	bhi.n	8015976 <_scanf_float+0xde>
 80158f4:	2b31      	cmp	r3, #49	; 0x31
 80158f6:	f080 8088 	bcs.w	8015a0a <_scanf_float+0x172>
 80158fa:	2b2d      	cmp	r3, #45	; 0x2d
 80158fc:	f000 8090 	beq.w	8015a20 <_scanf_float+0x188>
 8015900:	d815      	bhi.n	801592e <_scanf_float+0x96>
 8015902:	2b2b      	cmp	r3, #43	; 0x2b
 8015904:	f000 808c 	beq.w	8015a20 <_scanf_float+0x188>
 8015908:	f1b9 0f00 	cmp.w	r9, #0
 801590c:	d003      	beq.n	8015916 <_scanf_float+0x7e>
 801590e:	6823      	ldr	r3, [r4, #0]
 8015910:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8015914:	6023      	str	r3, [r4, #0]
 8015916:	3a01      	subs	r2, #1
 8015918:	2a01      	cmp	r2, #1
 801591a:	f200 80ea 	bhi.w	8015af2 <_scanf_float+0x25a>
 801591e:	4545      	cmp	r5, r8
 8015920:	f200 80dc 	bhi.w	8015adc <_scanf_float+0x244>
 8015924:	2601      	movs	r6, #1
 8015926:	4630      	mov	r0, r6
 8015928:	b007      	add	sp, #28
 801592a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801592e:	2b2e      	cmp	r3, #46	; 0x2e
 8015930:	f000 809f 	beq.w	8015a72 <_scanf_float+0x1da>
 8015934:	2b30      	cmp	r3, #48	; 0x30
 8015936:	d1e7      	bne.n	8015908 <_scanf_float+0x70>
 8015938:	6820      	ldr	r0, [r4, #0]
 801593a:	f410 7f80 	tst.w	r0, #256	; 0x100
 801593e:	d064      	beq.n	8015a0a <_scanf_float+0x172>
 8015940:	9b01      	ldr	r3, [sp, #4]
 8015942:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8015946:	6020      	str	r0, [r4, #0]
 8015948:	f109 0901 	add.w	r9, r9, #1
 801594c:	b11b      	cbz	r3, 8015956 <_scanf_float+0xbe>
 801594e:	3b01      	subs	r3, #1
 8015950:	3101      	adds	r1, #1
 8015952:	9301      	str	r3, [sp, #4]
 8015954:	60a1      	str	r1, [r4, #8]
 8015956:	68a3      	ldr	r3, [r4, #8]
 8015958:	3b01      	subs	r3, #1
 801595a:	60a3      	str	r3, [r4, #8]
 801595c:	6923      	ldr	r3, [r4, #16]
 801595e:	3301      	adds	r3, #1
 8015960:	6123      	str	r3, [r4, #16]
 8015962:	6873      	ldr	r3, [r6, #4]
 8015964:	3b01      	subs	r3, #1
 8015966:	2b00      	cmp	r3, #0
 8015968:	6073      	str	r3, [r6, #4]
 801596a:	f340 80ac 	ble.w	8015ac6 <_scanf_float+0x22e>
 801596e:	6833      	ldr	r3, [r6, #0]
 8015970:	3301      	adds	r3, #1
 8015972:	6033      	str	r3, [r6, #0]
 8015974:	e7b5      	b.n	80158e2 <_scanf_float+0x4a>
 8015976:	2b45      	cmp	r3, #69	; 0x45
 8015978:	f000 8085 	beq.w	8015a86 <_scanf_float+0x1ee>
 801597c:	2b46      	cmp	r3, #70	; 0x46
 801597e:	d06a      	beq.n	8015a56 <_scanf_float+0x1be>
 8015980:	2b41      	cmp	r3, #65	; 0x41
 8015982:	d1c1      	bne.n	8015908 <_scanf_float+0x70>
 8015984:	2a01      	cmp	r2, #1
 8015986:	d1bf      	bne.n	8015908 <_scanf_float+0x70>
 8015988:	2202      	movs	r2, #2
 801598a:	e046      	b.n	8015a1a <_scanf_float+0x182>
 801598c:	2b65      	cmp	r3, #101	; 0x65
 801598e:	d07a      	beq.n	8015a86 <_scanf_float+0x1ee>
 8015990:	d818      	bhi.n	80159c4 <_scanf_float+0x12c>
 8015992:	2b54      	cmp	r3, #84	; 0x54
 8015994:	d066      	beq.n	8015a64 <_scanf_float+0x1cc>
 8015996:	d811      	bhi.n	80159bc <_scanf_float+0x124>
 8015998:	2b4e      	cmp	r3, #78	; 0x4e
 801599a:	d1b5      	bne.n	8015908 <_scanf_float+0x70>
 801599c:	2a00      	cmp	r2, #0
 801599e:	d146      	bne.n	8015a2e <_scanf_float+0x196>
 80159a0:	f1b9 0f00 	cmp.w	r9, #0
 80159a4:	d145      	bne.n	8015a32 <_scanf_float+0x19a>
 80159a6:	6821      	ldr	r1, [r4, #0]
 80159a8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80159ac:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80159b0:	d13f      	bne.n	8015a32 <_scanf_float+0x19a>
 80159b2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80159b6:	6021      	str	r1, [r4, #0]
 80159b8:	2201      	movs	r2, #1
 80159ba:	e02e      	b.n	8015a1a <_scanf_float+0x182>
 80159bc:	2b59      	cmp	r3, #89	; 0x59
 80159be:	d01e      	beq.n	80159fe <_scanf_float+0x166>
 80159c0:	2b61      	cmp	r3, #97	; 0x61
 80159c2:	e7de      	b.n	8015982 <_scanf_float+0xea>
 80159c4:	2b6e      	cmp	r3, #110	; 0x6e
 80159c6:	d0e9      	beq.n	801599c <_scanf_float+0x104>
 80159c8:	d815      	bhi.n	80159f6 <_scanf_float+0x15e>
 80159ca:	2b66      	cmp	r3, #102	; 0x66
 80159cc:	d043      	beq.n	8015a56 <_scanf_float+0x1be>
 80159ce:	2b69      	cmp	r3, #105	; 0x69
 80159d0:	d19a      	bne.n	8015908 <_scanf_float+0x70>
 80159d2:	f1bb 0f00 	cmp.w	fp, #0
 80159d6:	d138      	bne.n	8015a4a <_scanf_float+0x1b2>
 80159d8:	f1b9 0f00 	cmp.w	r9, #0
 80159dc:	d197      	bne.n	801590e <_scanf_float+0x76>
 80159de:	6821      	ldr	r1, [r4, #0]
 80159e0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80159e4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80159e8:	d195      	bne.n	8015916 <_scanf_float+0x7e>
 80159ea:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80159ee:	6021      	str	r1, [r4, #0]
 80159f0:	f04f 0b01 	mov.w	fp, #1
 80159f4:	e011      	b.n	8015a1a <_scanf_float+0x182>
 80159f6:	2b74      	cmp	r3, #116	; 0x74
 80159f8:	d034      	beq.n	8015a64 <_scanf_float+0x1cc>
 80159fa:	2b79      	cmp	r3, #121	; 0x79
 80159fc:	d184      	bne.n	8015908 <_scanf_float+0x70>
 80159fe:	f1bb 0f07 	cmp.w	fp, #7
 8015a02:	d181      	bne.n	8015908 <_scanf_float+0x70>
 8015a04:	f04f 0b08 	mov.w	fp, #8
 8015a08:	e007      	b.n	8015a1a <_scanf_float+0x182>
 8015a0a:	eb12 0f0b 	cmn.w	r2, fp
 8015a0e:	f47f af7b 	bne.w	8015908 <_scanf_float+0x70>
 8015a12:	6821      	ldr	r1, [r4, #0]
 8015a14:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8015a18:	6021      	str	r1, [r4, #0]
 8015a1a:	702b      	strb	r3, [r5, #0]
 8015a1c:	3501      	adds	r5, #1
 8015a1e:	e79a      	b.n	8015956 <_scanf_float+0xbe>
 8015a20:	6821      	ldr	r1, [r4, #0]
 8015a22:	0608      	lsls	r0, r1, #24
 8015a24:	f57f af70 	bpl.w	8015908 <_scanf_float+0x70>
 8015a28:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8015a2c:	e7f4      	b.n	8015a18 <_scanf_float+0x180>
 8015a2e:	2a02      	cmp	r2, #2
 8015a30:	d047      	beq.n	8015ac2 <_scanf_float+0x22a>
 8015a32:	f1bb 0f01 	cmp.w	fp, #1
 8015a36:	d003      	beq.n	8015a40 <_scanf_float+0x1a8>
 8015a38:	f1bb 0f04 	cmp.w	fp, #4
 8015a3c:	f47f af64 	bne.w	8015908 <_scanf_float+0x70>
 8015a40:	f10b 0b01 	add.w	fp, fp, #1
 8015a44:	fa5f fb8b 	uxtb.w	fp, fp
 8015a48:	e7e7      	b.n	8015a1a <_scanf_float+0x182>
 8015a4a:	f1bb 0f03 	cmp.w	fp, #3
 8015a4e:	d0f7      	beq.n	8015a40 <_scanf_float+0x1a8>
 8015a50:	f1bb 0f05 	cmp.w	fp, #5
 8015a54:	e7f2      	b.n	8015a3c <_scanf_float+0x1a4>
 8015a56:	f1bb 0f02 	cmp.w	fp, #2
 8015a5a:	f47f af55 	bne.w	8015908 <_scanf_float+0x70>
 8015a5e:	f04f 0b03 	mov.w	fp, #3
 8015a62:	e7da      	b.n	8015a1a <_scanf_float+0x182>
 8015a64:	f1bb 0f06 	cmp.w	fp, #6
 8015a68:	f47f af4e 	bne.w	8015908 <_scanf_float+0x70>
 8015a6c:	f04f 0b07 	mov.w	fp, #7
 8015a70:	e7d3      	b.n	8015a1a <_scanf_float+0x182>
 8015a72:	6821      	ldr	r1, [r4, #0]
 8015a74:	0588      	lsls	r0, r1, #22
 8015a76:	f57f af47 	bpl.w	8015908 <_scanf_float+0x70>
 8015a7a:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8015a7e:	6021      	str	r1, [r4, #0]
 8015a80:	f8cd 9008 	str.w	r9, [sp, #8]
 8015a84:	e7c9      	b.n	8015a1a <_scanf_float+0x182>
 8015a86:	6821      	ldr	r1, [r4, #0]
 8015a88:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8015a8c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8015a90:	d006      	beq.n	8015aa0 <_scanf_float+0x208>
 8015a92:	0548      	lsls	r0, r1, #21
 8015a94:	f57f af38 	bpl.w	8015908 <_scanf_float+0x70>
 8015a98:	f1b9 0f00 	cmp.w	r9, #0
 8015a9c:	f43f af3b 	beq.w	8015916 <_scanf_float+0x7e>
 8015aa0:	0588      	lsls	r0, r1, #22
 8015aa2:	bf58      	it	pl
 8015aa4:	9802      	ldrpl	r0, [sp, #8]
 8015aa6:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8015aaa:	bf58      	it	pl
 8015aac:	eba9 0000 	subpl.w	r0, r9, r0
 8015ab0:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8015ab4:	bf58      	it	pl
 8015ab6:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8015aba:	6021      	str	r1, [r4, #0]
 8015abc:	f04f 0900 	mov.w	r9, #0
 8015ac0:	e7ab      	b.n	8015a1a <_scanf_float+0x182>
 8015ac2:	2203      	movs	r2, #3
 8015ac4:	e7a9      	b.n	8015a1a <_scanf_float+0x182>
 8015ac6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8015aca:	9205      	str	r2, [sp, #20]
 8015acc:	4631      	mov	r1, r6
 8015ace:	4638      	mov	r0, r7
 8015ad0:	4798      	blx	r3
 8015ad2:	9a05      	ldr	r2, [sp, #20]
 8015ad4:	2800      	cmp	r0, #0
 8015ad6:	f43f af04 	beq.w	80158e2 <_scanf_float+0x4a>
 8015ada:	e715      	b.n	8015908 <_scanf_float+0x70>
 8015adc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015ae0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8015ae4:	4632      	mov	r2, r6
 8015ae6:	4638      	mov	r0, r7
 8015ae8:	4798      	blx	r3
 8015aea:	6923      	ldr	r3, [r4, #16]
 8015aec:	3b01      	subs	r3, #1
 8015aee:	6123      	str	r3, [r4, #16]
 8015af0:	e715      	b.n	801591e <_scanf_float+0x86>
 8015af2:	f10b 33ff 	add.w	r3, fp, #4294967295
 8015af6:	2b06      	cmp	r3, #6
 8015af8:	d80a      	bhi.n	8015b10 <_scanf_float+0x278>
 8015afa:	f1bb 0f02 	cmp.w	fp, #2
 8015afe:	d968      	bls.n	8015bd2 <_scanf_float+0x33a>
 8015b00:	f1ab 0b03 	sub.w	fp, fp, #3
 8015b04:	fa5f fb8b 	uxtb.w	fp, fp
 8015b08:	eba5 0b0b 	sub.w	fp, r5, fp
 8015b0c:	455d      	cmp	r5, fp
 8015b0e:	d14b      	bne.n	8015ba8 <_scanf_float+0x310>
 8015b10:	6823      	ldr	r3, [r4, #0]
 8015b12:	05da      	lsls	r2, r3, #23
 8015b14:	d51f      	bpl.n	8015b56 <_scanf_float+0x2be>
 8015b16:	055b      	lsls	r3, r3, #21
 8015b18:	d468      	bmi.n	8015bec <_scanf_float+0x354>
 8015b1a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8015b1e:	6923      	ldr	r3, [r4, #16]
 8015b20:	2965      	cmp	r1, #101	; 0x65
 8015b22:	f103 33ff 	add.w	r3, r3, #4294967295
 8015b26:	f105 3bff 	add.w	fp, r5, #4294967295
 8015b2a:	6123      	str	r3, [r4, #16]
 8015b2c:	d00d      	beq.n	8015b4a <_scanf_float+0x2b2>
 8015b2e:	2945      	cmp	r1, #69	; 0x45
 8015b30:	d00b      	beq.n	8015b4a <_scanf_float+0x2b2>
 8015b32:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015b36:	4632      	mov	r2, r6
 8015b38:	4638      	mov	r0, r7
 8015b3a:	4798      	blx	r3
 8015b3c:	6923      	ldr	r3, [r4, #16]
 8015b3e:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8015b42:	3b01      	subs	r3, #1
 8015b44:	f1a5 0b02 	sub.w	fp, r5, #2
 8015b48:	6123      	str	r3, [r4, #16]
 8015b4a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015b4e:	4632      	mov	r2, r6
 8015b50:	4638      	mov	r0, r7
 8015b52:	4798      	blx	r3
 8015b54:	465d      	mov	r5, fp
 8015b56:	6826      	ldr	r6, [r4, #0]
 8015b58:	f016 0610 	ands.w	r6, r6, #16
 8015b5c:	d17a      	bne.n	8015c54 <_scanf_float+0x3bc>
 8015b5e:	702e      	strb	r6, [r5, #0]
 8015b60:	6823      	ldr	r3, [r4, #0]
 8015b62:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8015b66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015b6a:	d142      	bne.n	8015bf2 <_scanf_float+0x35a>
 8015b6c:	9b02      	ldr	r3, [sp, #8]
 8015b6e:	eba9 0303 	sub.w	r3, r9, r3
 8015b72:	425a      	negs	r2, r3
 8015b74:	2b00      	cmp	r3, #0
 8015b76:	d149      	bne.n	8015c0c <_scanf_float+0x374>
 8015b78:	2200      	movs	r2, #0
 8015b7a:	4641      	mov	r1, r8
 8015b7c:	4638      	mov	r0, r7
 8015b7e:	f000 ff0b 	bl	8016998 <_strtod_r>
 8015b82:	6825      	ldr	r5, [r4, #0]
 8015b84:	f8da 3000 	ldr.w	r3, [sl]
 8015b88:	f015 0f02 	tst.w	r5, #2
 8015b8c:	f103 0204 	add.w	r2, r3, #4
 8015b90:	ec59 8b10 	vmov	r8, r9, d0
 8015b94:	f8ca 2000 	str.w	r2, [sl]
 8015b98:	d043      	beq.n	8015c22 <_scanf_float+0x38a>
 8015b9a:	681b      	ldr	r3, [r3, #0]
 8015b9c:	e9c3 8900 	strd	r8, r9, [r3]
 8015ba0:	68e3      	ldr	r3, [r4, #12]
 8015ba2:	3301      	adds	r3, #1
 8015ba4:	60e3      	str	r3, [r4, #12]
 8015ba6:	e6be      	b.n	8015926 <_scanf_float+0x8e>
 8015ba8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015bac:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8015bb0:	4632      	mov	r2, r6
 8015bb2:	4638      	mov	r0, r7
 8015bb4:	4798      	blx	r3
 8015bb6:	6923      	ldr	r3, [r4, #16]
 8015bb8:	3b01      	subs	r3, #1
 8015bba:	6123      	str	r3, [r4, #16]
 8015bbc:	e7a6      	b.n	8015b0c <_scanf_float+0x274>
 8015bbe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015bc2:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8015bc6:	4632      	mov	r2, r6
 8015bc8:	4638      	mov	r0, r7
 8015bca:	4798      	blx	r3
 8015bcc:	6923      	ldr	r3, [r4, #16]
 8015bce:	3b01      	subs	r3, #1
 8015bd0:	6123      	str	r3, [r4, #16]
 8015bd2:	4545      	cmp	r5, r8
 8015bd4:	d8f3      	bhi.n	8015bbe <_scanf_float+0x326>
 8015bd6:	e6a5      	b.n	8015924 <_scanf_float+0x8c>
 8015bd8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015bdc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8015be0:	4632      	mov	r2, r6
 8015be2:	4638      	mov	r0, r7
 8015be4:	4798      	blx	r3
 8015be6:	6923      	ldr	r3, [r4, #16]
 8015be8:	3b01      	subs	r3, #1
 8015bea:	6123      	str	r3, [r4, #16]
 8015bec:	4545      	cmp	r5, r8
 8015bee:	d8f3      	bhi.n	8015bd8 <_scanf_float+0x340>
 8015bf0:	e698      	b.n	8015924 <_scanf_float+0x8c>
 8015bf2:	9b03      	ldr	r3, [sp, #12]
 8015bf4:	2b00      	cmp	r3, #0
 8015bf6:	d0bf      	beq.n	8015b78 <_scanf_float+0x2e0>
 8015bf8:	9904      	ldr	r1, [sp, #16]
 8015bfa:	230a      	movs	r3, #10
 8015bfc:	4632      	mov	r2, r6
 8015bfe:	3101      	adds	r1, #1
 8015c00:	4638      	mov	r0, r7
 8015c02:	f000 ff55 	bl	8016ab0 <_strtol_r>
 8015c06:	9b03      	ldr	r3, [sp, #12]
 8015c08:	9d04      	ldr	r5, [sp, #16]
 8015c0a:	1ac2      	subs	r2, r0, r3
 8015c0c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8015c10:	429d      	cmp	r5, r3
 8015c12:	bf28      	it	cs
 8015c14:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8015c18:	490f      	ldr	r1, [pc, #60]	; (8015c58 <_scanf_float+0x3c0>)
 8015c1a:	4628      	mov	r0, r5
 8015c1c:	f000 f858 	bl	8015cd0 <siprintf>
 8015c20:	e7aa      	b.n	8015b78 <_scanf_float+0x2e0>
 8015c22:	f015 0504 	ands.w	r5, r5, #4
 8015c26:	d1b8      	bne.n	8015b9a <_scanf_float+0x302>
 8015c28:	681f      	ldr	r7, [r3, #0]
 8015c2a:	ee10 2a10 	vmov	r2, s0
 8015c2e:	464b      	mov	r3, r9
 8015c30:	ee10 0a10 	vmov	r0, s0
 8015c34:	4649      	mov	r1, r9
 8015c36:	f7ea ff91 	bl	8000b5c <__aeabi_dcmpun>
 8015c3a:	b128      	cbz	r0, 8015c48 <_scanf_float+0x3b0>
 8015c3c:	4628      	mov	r0, r5
 8015c3e:	f000 f80d 	bl	8015c5c <nanf>
 8015c42:	ed87 0a00 	vstr	s0, [r7]
 8015c46:	e7ab      	b.n	8015ba0 <_scanf_float+0x308>
 8015c48:	4640      	mov	r0, r8
 8015c4a:	4649      	mov	r1, r9
 8015c4c:	f7ea ffe4 	bl	8000c18 <__aeabi_d2f>
 8015c50:	6038      	str	r0, [r7, #0]
 8015c52:	e7a5      	b.n	8015ba0 <_scanf_float+0x308>
 8015c54:	2600      	movs	r6, #0
 8015c56:	e666      	b.n	8015926 <_scanf_float+0x8e>
 8015c58:	08019c7a 	.word	0x08019c7a

08015c5c <nanf>:
 8015c5c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8015c64 <nanf+0x8>
 8015c60:	4770      	bx	lr
 8015c62:	bf00      	nop
 8015c64:	7fc00000 	.word	0x7fc00000

08015c68 <sniprintf>:
 8015c68:	b40c      	push	{r2, r3}
 8015c6a:	b530      	push	{r4, r5, lr}
 8015c6c:	4b17      	ldr	r3, [pc, #92]	; (8015ccc <sniprintf+0x64>)
 8015c6e:	1e0c      	subs	r4, r1, #0
 8015c70:	b09d      	sub	sp, #116	; 0x74
 8015c72:	681d      	ldr	r5, [r3, #0]
 8015c74:	da08      	bge.n	8015c88 <sniprintf+0x20>
 8015c76:	238b      	movs	r3, #139	; 0x8b
 8015c78:	602b      	str	r3, [r5, #0]
 8015c7a:	f04f 30ff 	mov.w	r0, #4294967295
 8015c7e:	b01d      	add	sp, #116	; 0x74
 8015c80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015c84:	b002      	add	sp, #8
 8015c86:	4770      	bx	lr
 8015c88:	f44f 7302 	mov.w	r3, #520	; 0x208
 8015c8c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8015c90:	bf14      	ite	ne
 8015c92:	f104 33ff 	addne.w	r3, r4, #4294967295
 8015c96:	4623      	moveq	r3, r4
 8015c98:	9304      	str	r3, [sp, #16]
 8015c9a:	9307      	str	r3, [sp, #28]
 8015c9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015ca0:	9002      	str	r0, [sp, #8]
 8015ca2:	9006      	str	r0, [sp, #24]
 8015ca4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015ca8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8015caa:	ab21      	add	r3, sp, #132	; 0x84
 8015cac:	a902      	add	r1, sp, #8
 8015cae:	4628      	mov	r0, r5
 8015cb0:	9301      	str	r3, [sp, #4]
 8015cb2:	f002 fde7 	bl	8018884 <_svfiprintf_r>
 8015cb6:	1c43      	adds	r3, r0, #1
 8015cb8:	bfbc      	itt	lt
 8015cba:	238b      	movlt	r3, #139	; 0x8b
 8015cbc:	602b      	strlt	r3, [r5, #0]
 8015cbe:	2c00      	cmp	r4, #0
 8015cc0:	d0dd      	beq.n	8015c7e <sniprintf+0x16>
 8015cc2:	9b02      	ldr	r3, [sp, #8]
 8015cc4:	2200      	movs	r2, #0
 8015cc6:	701a      	strb	r2, [r3, #0]
 8015cc8:	e7d9      	b.n	8015c7e <sniprintf+0x16>
 8015cca:	bf00      	nop
 8015ccc:	2000000c 	.word	0x2000000c

08015cd0 <siprintf>:
 8015cd0:	b40e      	push	{r1, r2, r3}
 8015cd2:	b500      	push	{lr}
 8015cd4:	b09c      	sub	sp, #112	; 0x70
 8015cd6:	ab1d      	add	r3, sp, #116	; 0x74
 8015cd8:	9002      	str	r0, [sp, #8]
 8015cda:	9006      	str	r0, [sp, #24]
 8015cdc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015ce0:	4809      	ldr	r0, [pc, #36]	; (8015d08 <siprintf+0x38>)
 8015ce2:	9107      	str	r1, [sp, #28]
 8015ce4:	9104      	str	r1, [sp, #16]
 8015ce6:	4909      	ldr	r1, [pc, #36]	; (8015d0c <siprintf+0x3c>)
 8015ce8:	f853 2b04 	ldr.w	r2, [r3], #4
 8015cec:	9105      	str	r1, [sp, #20]
 8015cee:	6800      	ldr	r0, [r0, #0]
 8015cf0:	9301      	str	r3, [sp, #4]
 8015cf2:	a902      	add	r1, sp, #8
 8015cf4:	f002 fdc6 	bl	8018884 <_svfiprintf_r>
 8015cf8:	9b02      	ldr	r3, [sp, #8]
 8015cfa:	2200      	movs	r2, #0
 8015cfc:	701a      	strb	r2, [r3, #0]
 8015cfe:	b01c      	add	sp, #112	; 0x70
 8015d00:	f85d eb04 	ldr.w	lr, [sp], #4
 8015d04:	b003      	add	sp, #12
 8015d06:	4770      	bx	lr
 8015d08:	2000000c 	.word	0x2000000c
 8015d0c:	ffff0208 	.word	0xffff0208

08015d10 <siscanf>:
 8015d10:	b40e      	push	{r1, r2, r3}
 8015d12:	b530      	push	{r4, r5, lr}
 8015d14:	b09c      	sub	sp, #112	; 0x70
 8015d16:	ac1f      	add	r4, sp, #124	; 0x7c
 8015d18:	f44f 7201 	mov.w	r2, #516	; 0x204
 8015d1c:	f854 5b04 	ldr.w	r5, [r4], #4
 8015d20:	f8ad 2014 	strh.w	r2, [sp, #20]
 8015d24:	9002      	str	r0, [sp, #8]
 8015d26:	9006      	str	r0, [sp, #24]
 8015d28:	f7ea fa6a 	bl	8000200 <strlen>
 8015d2c:	4b0b      	ldr	r3, [pc, #44]	; (8015d5c <siscanf+0x4c>)
 8015d2e:	9003      	str	r0, [sp, #12]
 8015d30:	9007      	str	r0, [sp, #28]
 8015d32:	930b      	str	r3, [sp, #44]	; 0x2c
 8015d34:	480a      	ldr	r0, [pc, #40]	; (8015d60 <siscanf+0x50>)
 8015d36:	9401      	str	r4, [sp, #4]
 8015d38:	2300      	movs	r3, #0
 8015d3a:	930f      	str	r3, [sp, #60]	; 0x3c
 8015d3c:	9314      	str	r3, [sp, #80]	; 0x50
 8015d3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015d42:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015d46:	462a      	mov	r2, r5
 8015d48:	4623      	mov	r3, r4
 8015d4a:	a902      	add	r1, sp, #8
 8015d4c:	6800      	ldr	r0, [r0, #0]
 8015d4e:	f002 feeb 	bl	8018b28 <__ssvfiscanf_r>
 8015d52:	b01c      	add	sp, #112	; 0x70
 8015d54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015d58:	b003      	add	sp, #12
 8015d5a:	4770      	bx	lr
 8015d5c:	08015d65 	.word	0x08015d65
 8015d60:	2000000c 	.word	0x2000000c

08015d64 <__seofread>:
 8015d64:	2000      	movs	r0, #0
 8015d66:	4770      	bx	lr

08015d68 <strcpy>:
 8015d68:	4603      	mov	r3, r0
 8015d6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015d6e:	f803 2b01 	strb.w	r2, [r3], #1
 8015d72:	2a00      	cmp	r2, #0
 8015d74:	d1f9      	bne.n	8015d6a <strcpy+0x2>
 8015d76:	4770      	bx	lr

08015d78 <sulp>:
 8015d78:	b570      	push	{r4, r5, r6, lr}
 8015d7a:	4604      	mov	r4, r0
 8015d7c:	460d      	mov	r5, r1
 8015d7e:	ec45 4b10 	vmov	d0, r4, r5
 8015d82:	4616      	mov	r6, r2
 8015d84:	f002 fb3a 	bl	80183fc <__ulp>
 8015d88:	ec51 0b10 	vmov	r0, r1, d0
 8015d8c:	b17e      	cbz	r6, 8015dae <sulp+0x36>
 8015d8e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8015d92:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8015d96:	2b00      	cmp	r3, #0
 8015d98:	dd09      	ble.n	8015dae <sulp+0x36>
 8015d9a:	051b      	lsls	r3, r3, #20
 8015d9c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8015da0:	2400      	movs	r4, #0
 8015da2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8015da6:	4622      	mov	r2, r4
 8015da8:	462b      	mov	r3, r5
 8015daa:	f7ea fc3d 	bl	8000628 <__aeabi_dmul>
 8015dae:	bd70      	pop	{r4, r5, r6, pc}

08015db0 <_strtod_l>:
 8015db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015db4:	461f      	mov	r7, r3
 8015db6:	b0a1      	sub	sp, #132	; 0x84
 8015db8:	2300      	movs	r3, #0
 8015dba:	4681      	mov	r9, r0
 8015dbc:	4638      	mov	r0, r7
 8015dbe:	460e      	mov	r6, r1
 8015dc0:	9217      	str	r2, [sp, #92]	; 0x5c
 8015dc2:	931c      	str	r3, [sp, #112]	; 0x70
 8015dc4:	f002 f824 	bl	8017e10 <__localeconv_l>
 8015dc8:	4680      	mov	r8, r0
 8015dca:	6800      	ldr	r0, [r0, #0]
 8015dcc:	f7ea fa18 	bl	8000200 <strlen>
 8015dd0:	f04f 0a00 	mov.w	sl, #0
 8015dd4:	4604      	mov	r4, r0
 8015dd6:	f04f 0b00 	mov.w	fp, #0
 8015dda:	961b      	str	r6, [sp, #108]	; 0x6c
 8015ddc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015dde:	781a      	ldrb	r2, [r3, #0]
 8015de0:	2a0d      	cmp	r2, #13
 8015de2:	d832      	bhi.n	8015e4a <_strtod_l+0x9a>
 8015de4:	2a09      	cmp	r2, #9
 8015de6:	d236      	bcs.n	8015e56 <_strtod_l+0xa6>
 8015de8:	2a00      	cmp	r2, #0
 8015dea:	d03e      	beq.n	8015e6a <_strtod_l+0xba>
 8015dec:	2300      	movs	r3, #0
 8015dee:	930d      	str	r3, [sp, #52]	; 0x34
 8015df0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8015df2:	782b      	ldrb	r3, [r5, #0]
 8015df4:	2b30      	cmp	r3, #48	; 0x30
 8015df6:	f040 80ac 	bne.w	8015f52 <_strtod_l+0x1a2>
 8015dfa:	786b      	ldrb	r3, [r5, #1]
 8015dfc:	2b58      	cmp	r3, #88	; 0x58
 8015dfe:	d001      	beq.n	8015e04 <_strtod_l+0x54>
 8015e00:	2b78      	cmp	r3, #120	; 0x78
 8015e02:	d167      	bne.n	8015ed4 <_strtod_l+0x124>
 8015e04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015e06:	9301      	str	r3, [sp, #4]
 8015e08:	ab1c      	add	r3, sp, #112	; 0x70
 8015e0a:	9300      	str	r3, [sp, #0]
 8015e0c:	9702      	str	r7, [sp, #8]
 8015e0e:	ab1d      	add	r3, sp, #116	; 0x74
 8015e10:	4a88      	ldr	r2, [pc, #544]	; (8016034 <_strtod_l+0x284>)
 8015e12:	a91b      	add	r1, sp, #108	; 0x6c
 8015e14:	4648      	mov	r0, r9
 8015e16:	f001 fd12 	bl	801783e <__gethex>
 8015e1a:	f010 0407 	ands.w	r4, r0, #7
 8015e1e:	4606      	mov	r6, r0
 8015e20:	d005      	beq.n	8015e2e <_strtod_l+0x7e>
 8015e22:	2c06      	cmp	r4, #6
 8015e24:	d12b      	bne.n	8015e7e <_strtod_l+0xce>
 8015e26:	3501      	adds	r5, #1
 8015e28:	2300      	movs	r3, #0
 8015e2a:	951b      	str	r5, [sp, #108]	; 0x6c
 8015e2c:	930d      	str	r3, [sp, #52]	; 0x34
 8015e2e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015e30:	2b00      	cmp	r3, #0
 8015e32:	f040 859a 	bne.w	801696a <_strtod_l+0xbba>
 8015e36:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015e38:	b1e3      	cbz	r3, 8015e74 <_strtod_l+0xc4>
 8015e3a:	4652      	mov	r2, sl
 8015e3c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8015e40:	ec43 2b10 	vmov	d0, r2, r3
 8015e44:	b021      	add	sp, #132	; 0x84
 8015e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015e4a:	2a2b      	cmp	r2, #43	; 0x2b
 8015e4c:	d015      	beq.n	8015e7a <_strtod_l+0xca>
 8015e4e:	2a2d      	cmp	r2, #45	; 0x2d
 8015e50:	d004      	beq.n	8015e5c <_strtod_l+0xac>
 8015e52:	2a20      	cmp	r2, #32
 8015e54:	d1ca      	bne.n	8015dec <_strtod_l+0x3c>
 8015e56:	3301      	adds	r3, #1
 8015e58:	931b      	str	r3, [sp, #108]	; 0x6c
 8015e5a:	e7bf      	b.n	8015ddc <_strtod_l+0x2c>
 8015e5c:	2201      	movs	r2, #1
 8015e5e:	920d      	str	r2, [sp, #52]	; 0x34
 8015e60:	1c5a      	adds	r2, r3, #1
 8015e62:	921b      	str	r2, [sp, #108]	; 0x6c
 8015e64:	785b      	ldrb	r3, [r3, #1]
 8015e66:	2b00      	cmp	r3, #0
 8015e68:	d1c2      	bne.n	8015df0 <_strtod_l+0x40>
 8015e6a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8015e6c:	961b      	str	r6, [sp, #108]	; 0x6c
 8015e6e:	2b00      	cmp	r3, #0
 8015e70:	f040 8579 	bne.w	8016966 <_strtod_l+0xbb6>
 8015e74:	4652      	mov	r2, sl
 8015e76:	465b      	mov	r3, fp
 8015e78:	e7e2      	b.n	8015e40 <_strtod_l+0x90>
 8015e7a:	2200      	movs	r2, #0
 8015e7c:	e7ef      	b.n	8015e5e <_strtod_l+0xae>
 8015e7e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8015e80:	b13a      	cbz	r2, 8015e92 <_strtod_l+0xe2>
 8015e82:	2135      	movs	r1, #53	; 0x35
 8015e84:	a81e      	add	r0, sp, #120	; 0x78
 8015e86:	f002 fbb1 	bl	80185ec <__copybits>
 8015e8a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015e8c:	4648      	mov	r0, r9
 8015e8e:	f002 f81d 	bl	8017ecc <_Bfree>
 8015e92:	3c01      	subs	r4, #1
 8015e94:	2c04      	cmp	r4, #4
 8015e96:	d806      	bhi.n	8015ea6 <_strtod_l+0xf6>
 8015e98:	e8df f004 	tbb	[pc, r4]
 8015e9c:	1714030a 	.word	0x1714030a
 8015ea0:	0a          	.byte	0x0a
 8015ea1:	00          	.byte	0x00
 8015ea2:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8015ea6:	0730      	lsls	r0, r6, #28
 8015ea8:	d5c1      	bpl.n	8015e2e <_strtod_l+0x7e>
 8015eaa:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8015eae:	e7be      	b.n	8015e2e <_strtod_l+0x7e>
 8015eb0:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8015eb4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8015eb6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8015eba:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8015ebe:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8015ec2:	e7f0      	b.n	8015ea6 <_strtod_l+0xf6>
 8015ec4:	f8df b170 	ldr.w	fp, [pc, #368]	; 8016038 <_strtod_l+0x288>
 8015ec8:	e7ed      	b.n	8015ea6 <_strtod_l+0xf6>
 8015eca:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8015ece:	f04f 3aff 	mov.w	sl, #4294967295
 8015ed2:	e7e8      	b.n	8015ea6 <_strtod_l+0xf6>
 8015ed4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015ed6:	1c5a      	adds	r2, r3, #1
 8015ed8:	921b      	str	r2, [sp, #108]	; 0x6c
 8015eda:	785b      	ldrb	r3, [r3, #1]
 8015edc:	2b30      	cmp	r3, #48	; 0x30
 8015ede:	d0f9      	beq.n	8015ed4 <_strtod_l+0x124>
 8015ee0:	2b00      	cmp	r3, #0
 8015ee2:	d0a4      	beq.n	8015e2e <_strtod_l+0x7e>
 8015ee4:	2301      	movs	r3, #1
 8015ee6:	2500      	movs	r5, #0
 8015ee8:	9306      	str	r3, [sp, #24]
 8015eea:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015eec:	9308      	str	r3, [sp, #32]
 8015eee:	9507      	str	r5, [sp, #28]
 8015ef0:	9505      	str	r5, [sp, #20]
 8015ef2:	220a      	movs	r2, #10
 8015ef4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8015ef6:	7807      	ldrb	r7, [r0, #0]
 8015ef8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8015efc:	b2d9      	uxtb	r1, r3
 8015efe:	2909      	cmp	r1, #9
 8015f00:	d929      	bls.n	8015f56 <_strtod_l+0x1a6>
 8015f02:	4622      	mov	r2, r4
 8015f04:	f8d8 1000 	ldr.w	r1, [r8]
 8015f08:	f003 f8f8 	bl	80190fc <strncmp>
 8015f0c:	2800      	cmp	r0, #0
 8015f0e:	d031      	beq.n	8015f74 <_strtod_l+0x1c4>
 8015f10:	2000      	movs	r0, #0
 8015f12:	9c05      	ldr	r4, [sp, #20]
 8015f14:	9004      	str	r0, [sp, #16]
 8015f16:	463b      	mov	r3, r7
 8015f18:	4602      	mov	r2, r0
 8015f1a:	2b65      	cmp	r3, #101	; 0x65
 8015f1c:	d001      	beq.n	8015f22 <_strtod_l+0x172>
 8015f1e:	2b45      	cmp	r3, #69	; 0x45
 8015f20:	d114      	bne.n	8015f4c <_strtod_l+0x19c>
 8015f22:	b924      	cbnz	r4, 8015f2e <_strtod_l+0x17e>
 8015f24:	b910      	cbnz	r0, 8015f2c <_strtod_l+0x17c>
 8015f26:	9b06      	ldr	r3, [sp, #24]
 8015f28:	2b00      	cmp	r3, #0
 8015f2a:	d09e      	beq.n	8015e6a <_strtod_l+0xba>
 8015f2c:	2400      	movs	r4, #0
 8015f2e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8015f30:	1c73      	adds	r3, r6, #1
 8015f32:	931b      	str	r3, [sp, #108]	; 0x6c
 8015f34:	7873      	ldrb	r3, [r6, #1]
 8015f36:	2b2b      	cmp	r3, #43	; 0x2b
 8015f38:	d078      	beq.n	801602c <_strtod_l+0x27c>
 8015f3a:	2b2d      	cmp	r3, #45	; 0x2d
 8015f3c:	d070      	beq.n	8016020 <_strtod_l+0x270>
 8015f3e:	f04f 0c00 	mov.w	ip, #0
 8015f42:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8015f46:	2f09      	cmp	r7, #9
 8015f48:	d97c      	bls.n	8016044 <_strtod_l+0x294>
 8015f4a:	961b      	str	r6, [sp, #108]	; 0x6c
 8015f4c:	f04f 0e00 	mov.w	lr, #0
 8015f50:	e09a      	b.n	8016088 <_strtod_l+0x2d8>
 8015f52:	2300      	movs	r3, #0
 8015f54:	e7c7      	b.n	8015ee6 <_strtod_l+0x136>
 8015f56:	9905      	ldr	r1, [sp, #20]
 8015f58:	2908      	cmp	r1, #8
 8015f5a:	bfdd      	ittte	le
 8015f5c:	9907      	ldrle	r1, [sp, #28]
 8015f5e:	fb02 3301 	mlale	r3, r2, r1, r3
 8015f62:	9307      	strle	r3, [sp, #28]
 8015f64:	fb02 3505 	mlagt	r5, r2, r5, r3
 8015f68:	9b05      	ldr	r3, [sp, #20]
 8015f6a:	3001      	adds	r0, #1
 8015f6c:	3301      	adds	r3, #1
 8015f6e:	9305      	str	r3, [sp, #20]
 8015f70:	901b      	str	r0, [sp, #108]	; 0x6c
 8015f72:	e7bf      	b.n	8015ef4 <_strtod_l+0x144>
 8015f74:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015f76:	191a      	adds	r2, r3, r4
 8015f78:	921b      	str	r2, [sp, #108]	; 0x6c
 8015f7a:	9a05      	ldr	r2, [sp, #20]
 8015f7c:	5d1b      	ldrb	r3, [r3, r4]
 8015f7e:	2a00      	cmp	r2, #0
 8015f80:	d037      	beq.n	8015ff2 <_strtod_l+0x242>
 8015f82:	9c05      	ldr	r4, [sp, #20]
 8015f84:	4602      	mov	r2, r0
 8015f86:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8015f8a:	2909      	cmp	r1, #9
 8015f8c:	d913      	bls.n	8015fb6 <_strtod_l+0x206>
 8015f8e:	2101      	movs	r1, #1
 8015f90:	9104      	str	r1, [sp, #16]
 8015f92:	e7c2      	b.n	8015f1a <_strtod_l+0x16a>
 8015f94:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015f96:	1c5a      	adds	r2, r3, #1
 8015f98:	921b      	str	r2, [sp, #108]	; 0x6c
 8015f9a:	785b      	ldrb	r3, [r3, #1]
 8015f9c:	3001      	adds	r0, #1
 8015f9e:	2b30      	cmp	r3, #48	; 0x30
 8015fa0:	d0f8      	beq.n	8015f94 <_strtod_l+0x1e4>
 8015fa2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8015fa6:	2a08      	cmp	r2, #8
 8015fa8:	f200 84e4 	bhi.w	8016974 <_strtod_l+0xbc4>
 8015fac:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8015fae:	9208      	str	r2, [sp, #32]
 8015fb0:	4602      	mov	r2, r0
 8015fb2:	2000      	movs	r0, #0
 8015fb4:	4604      	mov	r4, r0
 8015fb6:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8015fba:	f100 0101 	add.w	r1, r0, #1
 8015fbe:	d012      	beq.n	8015fe6 <_strtod_l+0x236>
 8015fc0:	440a      	add	r2, r1
 8015fc2:	eb00 0c04 	add.w	ip, r0, r4
 8015fc6:	4621      	mov	r1, r4
 8015fc8:	270a      	movs	r7, #10
 8015fca:	458c      	cmp	ip, r1
 8015fcc:	d113      	bne.n	8015ff6 <_strtod_l+0x246>
 8015fce:	1821      	adds	r1, r4, r0
 8015fd0:	2908      	cmp	r1, #8
 8015fd2:	f104 0401 	add.w	r4, r4, #1
 8015fd6:	4404      	add	r4, r0
 8015fd8:	dc19      	bgt.n	801600e <_strtod_l+0x25e>
 8015fda:	9b07      	ldr	r3, [sp, #28]
 8015fdc:	210a      	movs	r1, #10
 8015fde:	fb01 e303 	mla	r3, r1, r3, lr
 8015fe2:	9307      	str	r3, [sp, #28]
 8015fe4:	2100      	movs	r1, #0
 8015fe6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8015fe8:	1c58      	adds	r0, r3, #1
 8015fea:	901b      	str	r0, [sp, #108]	; 0x6c
 8015fec:	785b      	ldrb	r3, [r3, #1]
 8015fee:	4608      	mov	r0, r1
 8015ff0:	e7c9      	b.n	8015f86 <_strtod_l+0x1d6>
 8015ff2:	9805      	ldr	r0, [sp, #20]
 8015ff4:	e7d3      	b.n	8015f9e <_strtod_l+0x1ee>
 8015ff6:	2908      	cmp	r1, #8
 8015ff8:	f101 0101 	add.w	r1, r1, #1
 8015ffc:	dc03      	bgt.n	8016006 <_strtod_l+0x256>
 8015ffe:	9b07      	ldr	r3, [sp, #28]
 8016000:	437b      	muls	r3, r7
 8016002:	9307      	str	r3, [sp, #28]
 8016004:	e7e1      	b.n	8015fca <_strtod_l+0x21a>
 8016006:	2910      	cmp	r1, #16
 8016008:	bfd8      	it	le
 801600a:	437d      	mulle	r5, r7
 801600c:	e7dd      	b.n	8015fca <_strtod_l+0x21a>
 801600e:	2c10      	cmp	r4, #16
 8016010:	bfdc      	itt	le
 8016012:	210a      	movle	r1, #10
 8016014:	fb01 e505 	mlale	r5, r1, r5, lr
 8016018:	e7e4      	b.n	8015fe4 <_strtod_l+0x234>
 801601a:	2301      	movs	r3, #1
 801601c:	9304      	str	r3, [sp, #16]
 801601e:	e781      	b.n	8015f24 <_strtod_l+0x174>
 8016020:	f04f 0c01 	mov.w	ip, #1
 8016024:	1cb3      	adds	r3, r6, #2
 8016026:	931b      	str	r3, [sp, #108]	; 0x6c
 8016028:	78b3      	ldrb	r3, [r6, #2]
 801602a:	e78a      	b.n	8015f42 <_strtod_l+0x192>
 801602c:	f04f 0c00 	mov.w	ip, #0
 8016030:	e7f8      	b.n	8016024 <_strtod_l+0x274>
 8016032:	bf00      	nop
 8016034:	08019c80 	.word	0x08019c80
 8016038:	7ff00000 	.word	0x7ff00000
 801603c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801603e:	1c5f      	adds	r7, r3, #1
 8016040:	971b      	str	r7, [sp, #108]	; 0x6c
 8016042:	785b      	ldrb	r3, [r3, #1]
 8016044:	2b30      	cmp	r3, #48	; 0x30
 8016046:	d0f9      	beq.n	801603c <_strtod_l+0x28c>
 8016048:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 801604c:	2f08      	cmp	r7, #8
 801604e:	f63f af7d 	bhi.w	8015f4c <_strtod_l+0x19c>
 8016052:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8016056:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016058:	930a      	str	r3, [sp, #40]	; 0x28
 801605a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801605c:	1c5f      	adds	r7, r3, #1
 801605e:	971b      	str	r7, [sp, #108]	; 0x6c
 8016060:	785b      	ldrb	r3, [r3, #1]
 8016062:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8016066:	f1b8 0f09 	cmp.w	r8, #9
 801606a:	d937      	bls.n	80160dc <_strtod_l+0x32c>
 801606c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801606e:	1a7f      	subs	r7, r7, r1
 8016070:	2f08      	cmp	r7, #8
 8016072:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8016076:	dc37      	bgt.n	80160e8 <_strtod_l+0x338>
 8016078:	45be      	cmp	lr, r7
 801607a:	bfa8      	it	ge
 801607c:	46be      	movge	lr, r7
 801607e:	f1bc 0f00 	cmp.w	ip, #0
 8016082:	d001      	beq.n	8016088 <_strtod_l+0x2d8>
 8016084:	f1ce 0e00 	rsb	lr, lr, #0
 8016088:	2c00      	cmp	r4, #0
 801608a:	d151      	bne.n	8016130 <_strtod_l+0x380>
 801608c:	2800      	cmp	r0, #0
 801608e:	f47f aece 	bne.w	8015e2e <_strtod_l+0x7e>
 8016092:	9a06      	ldr	r2, [sp, #24]
 8016094:	2a00      	cmp	r2, #0
 8016096:	f47f aeca 	bne.w	8015e2e <_strtod_l+0x7e>
 801609a:	9a04      	ldr	r2, [sp, #16]
 801609c:	2a00      	cmp	r2, #0
 801609e:	f47f aee4 	bne.w	8015e6a <_strtod_l+0xba>
 80160a2:	2b4e      	cmp	r3, #78	; 0x4e
 80160a4:	d027      	beq.n	80160f6 <_strtod_l+0x346>
 80160a6:	dc21      	bgt.n	80160ec <_strtod_l+0x33c>
 80160a8:	2b49      	cmp	r3, #73	; 0x49
 80160aa:	f47f aede 	bne.w	8015e6a <_strtod_l+0xba>
 80160ae:	49a0      	ldr	r1, [pc, #640]	; (8016330 <_strtod_l+0x580>)
 80160b0:	a81b      	add	r0, sp, #108	; 0x6c
 80160b2:	f001 fdf7 	bl	8017ca4 <__match>
 80160b6:	2800      	cmp	r0, #0
 80160b8:	f43f aed7 	beq.w	8015e6a <_strtod_l+0xba>
 80160bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80160be:	499d      	ldr	r1, [pc, #628]	; (8016334 <_strtod_l+0x584>)
 80160c0:	3b01      	subs	r3, #1
 80160c2:	a81b      	add	r0, sp, #108	; 0x6c
 80160c4:	931b      	str	r3, [sp, #108]	; 0x6c
 80160c6:	f001 fded 	bl	8017ca4 <__match>
 80160ca:	b910      	cbnz	r0, 80160d2 <_strtod_l+0x322>
 80160cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80160ce:	3301      	adds	r3, #1
 80160d0:	931b      	str	r3, [sp, #108]	; 0x6c
 80160d2:	f8df b274 	ldr.w	fp, [pc, #628]	; 8016348 <_strtod_l+0x598>
 80160d6:	f04f 0a00 	mov.w	sl, #0
 80160da:	e6a8      	b.n	8015e2e <_strtod_l+0x7e>
 80160dc:	210a      	movs	r1, #10
 80160de:	fb01 3e0e 	mla	lr, r1, lr, r3
 80160e2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80160e6:	e7b8      	b.n	801605a <_strtod_l+0x2aa>
 80160e8:	46be      	mov	lr, r7
 80160ea:	e7c8      	b.n	801607e <_strtod_l+0x2ce>
 80160ec:	2b69      	cmp	r3, #105	; 0x69
 80160ee:	d0de      	beq.n	80160ae <_strtod_l+0x2fe>
 80160f0:	2b6e      	cmp	r3, #110	; 0x6e
 80160f2:	f47f aeba 	bne.w	8015e6a <_strtod_l+0xba>
 80160f6:	4990      	ldr	r1, [pc, #576]	; (8016338 <_strtod_l+0x588>)
 80160f8:	a81b      	add	r0, sp, #108	; 0x6c
 80160fa:	f001 fdd3 	bl	8017ca4 <__match>
 80160fe:	2800      	cmp	r0, #0
 8016100:	f43f aeb3 	beq.w	8015e6a <_strtod_l+0xba>
 8016104:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016106:	781b      	ldrb	r3, [r3, #0]
 8016108:	2b28      	cmp	r3, #40	; 0x28
 801610a:	d10e      	bne.n	801612a <_strtod_l+0x37a>
 801610c:	aa1e      	add	r2, sp, #120	; 0x78
 801610e:	498b      	ldr	r1, [pc, #556]	; (801633c <_strtod_l+0x58c>)
 8016110:	a81b      	add	r0, sp, #108	; 0x6c
 8016112:	f001 fddb 	bl	8017ccc <__hexnan>
 8016116:	2805      	cmp	r0, #5
 8016118:	d107      	bne.n	801612a <_strtod_l+0x37a>
 801611a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801611c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8016120:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8016124:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8016128:	e681      	b.n	8015e2e <_strtod_l+0x7e>
 801612a:	f8df b224 	ldr.w	fp, [pc, #548]	; 8016350 <_strtod_l+0x5a0>
 801612e:	e7d2      	b.n	80160d6 <_strtod_l+0x326>
 8016130:	ebae 0302 	sub.w	r3, lr, r2
 8016134:	9306      	str	r3, [sp, #24]
 8016136:	9b05      	ldr	r3, [sp, #20]
 8016138:	9807      	ldr	r0, [sp, #28]
 801613a:	2b00      	cmp	r3, #0
 801613c:	bf08      	it	eq
 801613e:	4623      	moveq	r3, r4
 8016140:	2c10      	cmp	r4, #16
 8016142:	9305      	str	r3, [sp, #20]
 8016144:	46a0      	mov	r8, r4
 8016146:	bfa8      	it	ge
 8016148:	f04f 0810 	movge.w	r8, #16
 801614c:	f7ea f9f2 	bl	8000534 <__aeabi_ui2d>
 8016150:	2c09      	cmp	r4, #9
 8016152:	4682      	mov	sl, r0
 8016154:	468b      	mov	fp, r1
 8016156:	dc13      	bgt.n	8016180 <_strtod_l+0x3d0>
 8016158:	9b06      	ldr	r3, [sp, #24]
 801615a:	2b00      	cmp	r3, #0
 801615c:	f43f ae67 	beq.w	8015e2e <_strtod_l+0x7e>
 8016160:	9b06      	ldr	r3, [sp, #24]
 8016162:	dd7a      	ble.n	801625a <_strtod_l+0x4aa>
 8016164:	2b16      	cmp	r3, #22
 8016166:	dc61      	bgt.n	801622c <_strtod_l+0x47c>
 8016168:	4a75      	ldr	r2, [pc, #468]	; (8016340 <_strtod_l+0x590>)
 801616a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 801616e:	e9de 0100 	ldrd	r0, r1, [lr]
 8016172:	4652      	mov	r2, sl
 8016174:	465b      	mov	r3, fp
 8016176:	f7ea fa57 	bl	8000628 <__aeabi_dmul>
 801617a:	4682      	mov	sl, r0
 801617c:	468b      	mov	fp, r1
 801617e:	e656      	b.n	8015e2e <_strtod_l+0x7e>
 8016180:	4b6f      	ldr	r3, [pc, #444]	; (8016340 <_strtod_l+0x590>)
 8016182:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8016186:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801618a:	f7ea fa4d 	bl	8000628 <__aeabi_dmul>
 801618e:	4606      	mov	r6, r0
 8016190:	4628      	mov	r0, r5
 8016192:	460f      	mov	r7, r1
 8016194:	f7ea f9ce 	bl	8000534 <__aeabi_ui2d>
 8016198:	4602      	mov	r2, r0
 801619a:	460b      	mov	r3, r1
 801619c:	4630      	mov	r0, r6
 801619e:	4639      	mov	r1, r7
 80161a0:	f7ea f88c 	bl	80002bc <__adddf3>
 80161a4:	2c0f      	cmp	r4, #15
 80161a6:	4682      	mov	sl, r0
 80161a8:	468b      	mov	fp, r1
 80161aa:	ddd5      	ble.n	8016158 <_strtod_l+0x3a8>
 80161ac:	9b06      	ldr	r3, [sp, #24]
 80161ae:	eba4 0808 	sub.w	r8, r4, r8
 80161b2:	4498      	add	r8, r3
 80161b4:	f1b8 0f00 	cmp.w	r8, #0
 80161b8:	f340 8096 	ble.w	80162e8 <_strtod_l+0x538>
 80161bc:	f018 030f 	ands.w	r3, r8, #15
 80161c0:	d00a      	beq.n	80161d8 <_strtod_l+0x428>
 80161c2:	495f      	ldr	r1, [pc, #380]	; (8016340 <_strtod_l+0x590>)
 80161c4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80161c8:	4652      	mov	r2, sl
 80161ca:	465b      	mov	r3, fp
 80161cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80161d0:	f7ea fa2a 	bl	8000628 <__aeabi_dmul>
 80161d4:	4682      	mov	sl, r0
 80161d6:	468b      	mov	fp, r1
 80161d8:	f038 080f 	bics.w	r8, r8, #15
 80161dc:	d073      	beq.n	80162c6 <_strtod_l+0x516>
 80161de:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80161e2:	dd47      	ble.n	8016274 <_strtod_l+0x4c4>
 80161e4:	2400      	movs	r4, #0
 80161e6:	46a0      	mov	r8, r4
 80161e8:	9407      	str	r4, [sp, #28]
 80161ea:	9405      	str	r4, [sp, #20]
 80161ec:	2322      	movs	r3, #34	; 0x22
 80161ee:	f8df b158 	ldr.w	fp, [pc, #344]	; 8016348 <_strtod_l+0x598>
 80161f2:	f8c9 3000 	str.w	r3, [r9]
 80161f6:	f04f 0a00 	mov.w	sl, #0
 80161fa:	9b07      	ldr	r3, [sp, #28]
 80161fc:	2b00      	cmp	r3, #0
 80161fe:	f43f ae16 	beq.w	8015e2e <_strtod_l+0x7e>
 8016202:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016204:	4648      	mov	r0, r9
 8016206:	f001 fe61 	bl	8017ecc <_Bfree>
 801620a:	9905      	ldr	r1, [sp, #20]
 801620c:	4648      	mov	r0, r9
 801620e:	f001 fe5d 	bl	8017ecc <_Bfree>
 8016212:	4641      	mov	r1, r8
 8016214:	4648      	mov	r0, r9
 8016216:	f001 fe59 	bl	8017ecc <_Bfree>
 801621a:	9907      	ldr	r1, [sp, #28]
 801621c:	4648      	mov	r0, r9
 801621e:	f001 fe55 	bl	8017ecc <_Bfree>
 8016222:	4621      	mov	r1, r4
 8016224:	4648      	mov	r0, r9
 8016226:	f001 fe51 	bl	8017ecc <_Bfree>
 801622a:	e600      	b.n	8015e2e <_strtod_l+0x7e>
 801622c:	9a06      	ldr	r2, [sp, #24]
 801622e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8016232:	4293      	cmp	r3, r2
 8016234:	dbba      	blt.n	80161ac <_strtod_l+0x3fc>
 8016236:	4d42      	ldr	r5, [pc, #264]	; (8016340 <_strtod_l+0x590>)
 8016238:	f1c4 040f 	rsb	r4, r4, #15
 801623c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8016240:	4652      	mov	r2, sl
 8016242:	465b      	mov	r3, fp
 8016244:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016248:	f7ea f9ee 	bl	8000628 <__aeabi_dmul>
 801624c:	9b06      	ldr	r3, [sp, #24]
 801624e:	1b1c      	subs	r4, r3, r4
 8016250:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8016254:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016258:	e78d      	b.n	8016176 <_strtod_l+0x3c6>
 801625a:	f113 0f16 	cmn.w	r3, #22
 801625e:	dba5      	blt.n	80161ac <_strtod_l+0x3fc>
 8016260:	4a37      	ldr	r2, [pc, #220]	; (8016340 <_strtod_l+0x590>)
 8016262:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8016266:	e9d2 2300 	ldrd	r2, r3, [r2]
 801626a:	4650      	mov	r0, sl
 801626c:	4659      	mov	r1, fp
 801626e:	f7ea fb05 	bl	800087c <__aeabi_ddiv>
 8016272:	e782      	b.n	801617a <_strtod_l+0x3ca>
 8016274:	2300      	movs	r3, #0
 8016276:	4e33      	ldr	r6, [pc, #204]	; (8016344 <_strtod_l+0x594>)
 8016278:	ea4f 1828 	mov.w	r8, r8, asr #4
 801627c:	4650      	mov	r0, sl
 801627e:	4659      	mov	r1, fp
 8016280:	461d      	mov	r5, r3
 8016282:	f1b8 0f01 	cmp.w	r8, #1
 8016286:	dc21      	bgt.n	80162cc <_strtod_l+0x51c>
 8016288:	b10b      	cbz	r3, 801628e <_strtod_l+0x4de>
 801628a:	4682      	mov	sl, r0
 801628c:	468b      	mov	fp, r1
 801628e:	4b2d      	ldr	r3, [pc, #180]	; (8016344 <_strtod_l+0x594>)
 8016290:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8016294:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8016298:	4652      	mov	r2, sl
 801629a:	465b      	mov	r3, fp
 801629c:	e9d5 0100 	ldrd	r0, r1, [r5]
 80162a0:	f7ea f9c2 	bl	8000628 <__aeabi_dmul>
 80162a4:	4b28      	ldr	r3, [pc, #160]	; (8016348 <_strtod_l+0x598>)
 80162a6:	460a      	mov	r2, r1
 80162a8:	400b      	ands	r3, r1
 80162aa:	4928      	ldr	r1, [pc, #160]	; (801634c <_strtod_l+0x59c>)
 80162ac:	428b      	cmp	r3, r1
 80162ae:	4682      	mov	sl, r0
 80162b0:	d898      	bhi.n	80161e4 <_strtod_l+0x434>
 80162b2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80162b6:	428b      	cmp	r3, r1
 80162b8:	bf86      	itte	hi
 80162ba:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8016354 <_strtod_l+0x5a4>
 80162be:	f04f 3aff 	movhi.w	sl, #4294967295
 80162c2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80162c6:	2300      	movs	r3, #0
 80162c8:	9304      	str	r3, [sp, #16]
 80162ca:	e077      	b.n	80163bc <_strtod_l+0x60c>
 80162cc:	f018 0f01 	tst.w	r8, #1
 80162d0:	d006      	beq.n	80162e0 <_strtod_l+0x530>
 80162d2:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 80162d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80162da:	f7ea f9a5 	bl	8000628 <__aeabi_dmul>
 80162de:	2301      	movs	r3, #1
 80162e0:	3501      	adds	r5, #1
 80162e2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80162e6:	e7cc      	b.n	8016282 <_strtod_l+0x4d2>
 80162e8:	d0ed      	beq.n	80162c6 <_strtod_l+0x516>
 80162ea:	f1c8 0800 	rsb	r8, r8, #0
 80162ee:	f018 020f 	ands.w	r2, r8, #15
 80162f2:	d00a      	beq.n	801630a <_strtod_l+0x55a>
 80162f4:	4b12      	ldr	r3, [pc, #72]	; (8016340 <_strtod_l+0x590>)
 80162f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80162fa:	4650      	mov	r0, sl
 80162fc:	4659      	mov	r1, fp
 80162fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016302:	f7ea fabb 	bl	800087c <__aeabi_ddiv>
 8016306:	4682      	mov	sl, r0
 8016308:	468b      	mov	fp, r1
 801630a:	ea5f 1828 	movs.w	r8, r8, asr #4
 801630e:	d0da      	beq.n	80162c6 <_strtod_l+0x516>
 8016310:	f1b8 0f1f 	cmp.w	r8, #31
 8016314:	dd20      	ble.n	8016358 <_strtod_l+0x5a8>
 8016316:	2400      	movs	r4, #0
 8016318:	46a0      	mov	r8, r4
 801631a:	9407      	str	r4, [sp, #28]
 801631c:	9405      	str	r4, [sp, #20]
 801631e:	2322      	movs	r3, #34	; 0x22
 8016320:	f04f 0a00 	mov.w	sl, #0
 8016324:	f04f 0b00 	mov.w	fp, #0
 8016328:	f8c9 3000 	str.w	r3, [r9]
 801632c:	e765      	b.n	80161fa <_strtod_l+0x44a>
 801632e:	bf00      	nop
 8016330:	08019c4d 	.word	0x08019c4d
 8016334:	08019cd3 	.word	0x08019cd3
 8016338:	08019c55 	.word	0x08019c55
 801633c:	08019c94 	.word	0x08019c94
 8016340:	08019d78 	.word	0x08019d78
 8016344:	08019d50 	.word	0x08019d50
 8016348:	7ff00000 	.word	0x7ff00000
 801634c:	7ca00000 	.word	0x7ca00000
 8016350:	fff80000 	.word	0xfff80000
 8016354:	7fefffff 	.word	0x7fefffff
 8016358:	f018 0310 	ands.w	r3, r8, #16
 801635c:	bf18      	it	ne
 801635e:	236a      	movne	r3, #106	; 0x6a
 8016360:	4da0      	ldr	r5, [pc, #640]	; (80165e4 <_strtod_l+0x834>)
 8016362:	9304      	str	r3, [sp, #16]
 8016364:	4650      	mov	r0, sl
 8016366:	4659      	mov	r1, fp
 8016368:	2300      	movs	r3, #0
 801636a:	f1b8 0f00 	cmp.w	r8, #0
 801636e:	f300 810a 	bgt.w	8016586 <_strtod_l+0x7d6>
 8016372:	b10b      	cbz	r3, 8016378 <_strtod_l+0x5c8>
 8016374:	4682      	mov	sl, r0
 8016376:	468b      	mov	fp, r1
 8016378:	9b04      	ldr	r3, [sp, #16]
 801637a:	b1bb      	cbz	r3, 80163ac <_strtod_l+0x5fc>
 801637c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8016380:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8016384:	2b00      	cmp	r3, #0
 8016386:	4659      	mov	r1, fp
 8016388:	dd10      	ble.n	80163ac <_strtod_l+0x5fc>
 801638a:	2b1f      	cmp	r3, #31
 801638c:	f340 8107 	ble.w	801659e <_strtod_l+0x7ee>
 8016390:	2b34      	cmp	r3, #52	; 0x34
 8016392:	bfde      	ittt	le
 8016394:	3b20      	suble	r3, #32
 8016396:	f04f 32ff 	movle.w	r2, #4294967295
 801639a:	fa02 f303 	lslle.w	r3, r2, r3
 801639e:	f04f 0a00 	mov.w	sl, #0
 80163a2:	bfcc      	ite	gt
 80163a4:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80163a8:	ea03 0b01 	andle.w	fp, r3, r1
 80163ac:	2200      	movs	r2, #0
 80163ae:	2300      	movs	r3, #0
 80163b0:	4650      	mov	r0, sl
 80163b2:	4659      	mov	r1, fp
 80163b4:	f7ea fba0 	bl	8000af8 <__aeabi_dcmpeq>
 80163b8:	2800      	cmp	r0, #0
 80163ba:	d1ac      	bne.n	8016316 <_strtod_l+0x566>
 80163bc:	9b07      	ldr	r3, [sp, #28]
 80163be:	9300      	str	r3, [sp, #0]
 80163c0:	9a05      	ldr	r2, [sp, #20]
 80163c2:	9908      	ldr	r1, [sp, #32]
 80163c4:	4623      	mov	r3, r4
 80163c6:	4648      	mov	r0, r9
 80163c8:	f001 fdd2 	bl	8017f70 <__s2b>
 80163cc:	9007      	str	r0, [sp, #28]
 80163ce:	2800      	cmp	r0, #0
 80163d0:	f43f af08 	beq.w	80161e4 <_strtod_l+0x434>
 80163d4:	9a06      	ldr	r2, [sp, #24]
 80163d6:	9b06      	ldr	r3, [sp, #24]
 80163d8:	2a00      	cmp	r2, #0
 80163da:	f1c3 0300 	rsb	r3, r3, #0
 80163de:	bfa8      	it	ge
 80163e0:	2300      	movge	r3, #0
 80163e2:	930e      	str	r3, [sp, #56]	; 0x38
 80163e4:	2400      	movs	r4, #0
 80163e6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80163ea:	9316      	str	r3, [sp, #88]	; 0x58
 80163ec:	46a0      	mov	r8, r4
 80163ee:	9b07      	ldr	r3, [sp, #28]
 80163f0:	4648      	mov	r0, r9
 80163f2:	6859      	ldr	r1, [r3, #4]
 80163f4:	f001 fd36 	bl	8017e64 <_Balloc>
 80163f8:	9005      	str	r0, [sp, #20]
 80163fa:	2800      	cmp	r0, #0
 80163fc:	f43f aef6 	beq.w	80161ec <_strtod_l+0x43c>
 8016400:	9b07      	ldr	r3, [sp, #28]
 8016402:	691a      	ldr	r2, [r3, #16]
 8016404:	3202      	adds	r2, #2
 8016406:	f103 010c 	add.w	r1, r3, #12
 801640a:	0092      	lsls	r2, r2, #2
 801640c:	300c      	adds	r0, #12
 801640e:	f7fe fdd3 	bl	8014fb8 <memcpy>
 8016412:	aa1e      	add	r2, sp, #120	; 0x78
 8016414:	a91d      	add	r1, sp, #116	; 0x74
 8016416:	ec4b ab10 	vmov	d0, sl, fp
 801641a:	4648      	mov	r0, r9
 801641c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8016420:	f002 f862 	bl	80184e8 <__d2b>
 8016424:	901c      	str	r0, [sp, #112]	; 0x70
 8016426:	2800      	cmp	r0, #0
 8016428:	f43f aee0 	beq.w	80161ec <_strtod_l+0x43c>
 801642c:	2101      	movs	r1, #1
 801642e:	4648      	mov	r0, r9
 8016430:	f001 fe2a 	bl	8018088 <__i2b>
 8016434:	4680      	mov	r8, r0
 8016436:	2800      	cmp	r0, #0
 8016438:	f43f aed8 	beq.w	80161ec <_strtod_l+0x43c>
 801643c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801643e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8016440:	2e00      	cmp	r6, #0
 8016442:	bfab      	itete	ge
 8016444:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8016446:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8016448:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 801644a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 801644c:	bfac      	ite	ge
 801644e:	18f7      	addge	r7, r6, r3
 8016450:	1b9d      	sublt	r5, r3, r6
 8016452:	9b04      	ldr	r3, [sp, #16]
 8016454:	1af6      	subs	r6, r6, r3
 8016456:	4416      	add	r6, r2
 8016458:	4b63      	ldr	r3, [pc, #396]	; (80165e8 <_strtod_l+0x838>)
 801645a:	3e01      	subs	r6, #1
 801645c:	429e      	cmp	r6, r3
 801645e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8016462:	f280 80af 	bge.w	80165c4 <_strtod_l+0x814>
 8016466:	1b9b      	subs	r3, r3, r6
 8016468:	2b1f      	cmp	r3, #31
 801646a:	eba2 0203 	sub.w	r2, r2, r3
 801646e:	f04f 0101 	mov.w	r1, #1
 8016472:	f300 809b 	bgt.w	80165ac <_strtod_l+0x7fc>
 8016476:	fa01 f303 	lsl.w	r3, r1, r3
 801647a:	930f      	str	r3, [sp, #60]	; 0x3c
 801647c:	2300      	movs	r3, #0
 801647e:	930a      	str	r3, [sp, #40]	; 0x28
 8016480:	18be      	adds	r6, r7, r2
 8016482:	9b04      	ldr	r3, [sp, #16]
 8016484:	42b7      	cmp	r7, r6
 8016486:	4415      	add	r5, r2
 8016488:	441d      	add	r5, r3
 801648a:	463b      	mov	r3, r7
 801648c:	bfa8      	it	ge
 801648e:	4633      	movge	r3, r6
 8016490:	42ab      	cmp	r3, r5
 8016492:	bfa8      	it	ge
 8016494:	462b      	movge	r3, r5
 8016496:	2b00      	cmp	r3, #0
 8016498:	bfc2      	ittt	gt
 801649a:	1af6      	subgt	r6, r6, r3
 801649c:	1aed      	subgt	r5, r5, r3
 801649e:	1aff      	subgt	r7, r7, r3
 80164a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80164a2:	b1bb      	cbz	r3, 80164d4 <_strtod_l+0x724>
 80164a4:	4641      	mov	r1, r8
 80164a6:	461a      	mov	r2, r3
 80164a8:	4648      	mov	r0, r9
 80164aa:	f001 fe8d 	bl	80181c8 <__pow5mult>
 80164ae:	4680      	mov	r8, r0
 80164b0:	2800      	cmp	r0, #0
 80164b2:	f43f ae9b 	beq.w	80161ec <_strtod_l+0x43c>
 80164b6:	4601      	mov	r1, r0
 80164b8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80164ba:	4648      	mov	r0, r9
 80164bc:	f001 fded 	bl	801809a <__multiply>
 80164c0:	900c      	str	r0, [sp, #48]	; 0x30
 80164c2:	2800      	cmp	r0, #0
 80164c4:	f43f ae92 	beq.w	80161ec <_strtod_l+0x43c>
 80164c8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80164ca:	4648      	mov	r0, r9
 80164cc:	f001 fcfe 	bl	8017ecc <_Bfree>
 80164d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80164d2:	931c      	str	r3, [sp, #112]	; 0x70
 80164d4:	2e00      	cmp	r6, #0
 80164d6:	dc7a      	bgt.n	80165ce <_strtod_l+0x81e>
 80164d8:	9b06      	ldr	r3, [sp, #24]
 80164da:	2b00      	cmp	r3, #0
 80164dc:	dd08      	ble.n	80164f0 <_strtod_l+0x740>
 80164de:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80164e0:	9905      	ldr	r1, [sp, #20]
 80164e2:	4648      	mov	r0, r9
 80164e4:	f001 fe70 	bl	80181c8 <__pow5mult>
 80164e8:	9005      	str	r0, [sp, #20]
 80164ea:	2800      	cmp	r0, #0
 80164ec:	f43f ae7e 	beq.w	80161ec <_strtod_l+0x43c>
 80164f0:	2d00      	cmp	r5, #0
 80164f2:	dd08      	ble.n	8016506 <_strtod_l+0x756>
 80164f4:	462a      	mov	r2, r5
 80164f6:	9905      	ldr	r1, [sp, #20]
 80164f8:	4648      	mov	r0, r9
 80164fa:	f001 feb3 	bl	8018264 <__lshift>
 80164fe:	9005      	str	r0, [sp, #20]
 8016500:	2800      	cmp	r0, #0
 8016502:	f43f ae73 	beq.w	80161ec <_strtod_l+0x43c>
 8016506:	2f00      	cmp	r7, #0
 8016508:	dd08      	ble.n	801651c <_strtod_l+0x76c>
 801650a:	4641      	mov	r1, r8
 801650c:	463a      	mov	r2, r7
 801650e:	4648      	mov	r0, r9
 8016510:	f001 fea8 	bl	8018264 <__lshift>
 8016514:	4680      	mov	r8, r0
 8016516:	2800      	cmp	r0, #0
 8016518:	f43f ae68 	beq.w	80161ec <_strtod_l+0x43c>
 801651c:	9a05      	ldr	r2, [sp, #20]
 801651e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016520:	4648      	mov	r0, r9
 8016522:	f001 ff0d 	bl	8018340 <__mdiff>
 8016526:	4604      	mov	r4, r0
 8016528:	2800      	cmp	r0, #0
 801652a:	f43f ae5f 	beq.w	80161ec <_strtod_l+0x43c>
 801652e:	68c3      	ldr	r3, [r0, #12]
 8016530:	930c      	str	r3, [sp, #48]	; 0x30
 8016532:	2300      	movs	r3, #0
 8016534:	60c3      	str	r3, [r0, #12]
 8016536:	4641      	mov	r1, r8
 8016538:	f001 fee8 	bl	801830c <__mcmp>
 801653c:	2800      	cmp	r0, #0
 801653e:	da55      	bge.n	80165ec <_strtod_l+0x83c>
 8016540:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016542:	b9e3      	cbnz	r3, 801657e <_strtod_l+0x7ce>
 8016544:	f1ba 0f00 	cmp.w	sl, #0
 8016548:	d119      	bne.n	801657e <_strtod_l+0x7ce>
 801654a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801654e:	b9b3      	cbnz	r3, 801657e <_strtod_l+0x7ce>
 8016550:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8016554:	0d1b      	lsrs	r3, r3, #20
 8016556:	051b      	lsls	r3, r3, #20
 8016558:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801655c:	d90f      	bls.n	801657e <_strtod_l+0x7ce>
 801655e:	6963      	ldr	r3, [r4, #20]
 8016560:	b913      	cbnz	r3, 8016568 <_strtod_l+0x7b8>
 8016562:	6923      	ldr	r3, [r4, #16]
 8016564:	2b01      	cmp	r3, #1
 8016566:	dd0a      	ble.n	801657e <_strtod_l+0x7ce>
 8016568:	4621      	mov	r1, r4
 801656a:	2201      	movs	r2, #1
 801656c:	4648      	mov	r0, r9
 801656e:	f001 fe79 	bl	8018264 <__lshift>
 8016572:	4641      	mov	r1, r8
 8016574:	4604      	mov	r4, r0
 8016576:	f001 fec9 	bl	801830c <__mcmp>
 801657a:	2800      	cmp	r0, #0
 801657c:	dc67      	bgt.n	801664e <_strtod_l+0x89e>
 801657e:	9b04      	ldr	r3, [sp, #16]
 8016580:	2b00      	cmp	r3, #0
 8016582:	d171      	bne.n	8016668 <_strtod_l+0x8b8>
 8016584:	e63d      	b.n	8016202 <_strtod_l+0x452>
 8016586:	f018 0f01 	tst.w	r8, #1
 801658a:	d004      	beq.n	8016596 <_strtod_l+0x7e6>
 801658c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016590:	f7ea f84a 	bl	8000628 <__aeabi_dmul>
 8016594:	2301      	movs	r3, #1
 8016596:	ea4f 0868 	mov.w	r8, r8, asr #1
 801659a:	3508      	adds	r5, #8
 801659c:	e6e5      	b.n	801636a <_strtod_l+0x5ba>
 801659e:	f04f 32ff 	mov.w	r2, #4294967295
 80165a2:	fa02 f303 	lsl.w	r3, r2, r3
 80165a6:	ea03 0a0a 	and.w	sl, r3, sl
 80165aa:	e6ff      	b.n	80163ac <_strtod_l+0x5fc>
 80165ac:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80165b0:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80165b4:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80165b8:	36e2      	adds	r6, #226	; 0xe2
 80165ba:	fa01 f306 	lsl.w	r3, r1, r6
 80165be:	930a      	str	r3, [sp, #40]	; 0x28
 80165c0:	910f      	str	r1, [sp, #60]	; 0x3c
 80165c2:	e75d      	b.n	8016480 <_strtod_l+0x6d0>
 80165c4:	2300      	movs	r3, #0
 80165c6:	930a      	str	r3, [sp, #40]	; 0x28
 80165c8:	2301      	movs	r3, #1
 80165ca:	930f      	str	r3, [sp, #60]	; 0x3c
 80165cc:	e758      	b.n	8016480 <_strtod_l+0x6d0>
 80165ce:	4632      	mov	r2, r6
 80165d0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80165d2:	4648      	mov	r0, r9
 80165d4:	f001 fe46 	bl	8018264 <__lshift>
 80165d8:	901c      	str	r0, [sp, #112]	; 0x70
 80165da:	2800      	cmp	r0, #0
 80165dc:	f47f af7c 	bne.w	80164d8 <_strtod_l+0x728>
 80165e0:	e604      	b.n	80161ec <_strtod_l+0x43c>
 80165e2:	bf00      	nop
 80165e4:	08019ca8 	.word	0x08019ca8
 80165e8:	fffffc02 	.word	0xfffffc02
 80165ec:	465d      	mov	r5, fp
 80165ee:	f040 8086 	bne.w	80166fe <_strtod_l+0x94e>
 80165f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80165f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80165f8:	b32a      	cbz	r2, 8016646 <_strtod_l+0x896>
 80165fa:	4aaf      	ldr	r2, [pc, #700]	; (80168b8 <_strtod_l+0xb08>)
 80165fc:	4293      	cmp	r3, r2
 80165fe:	d153      	bne.n	80166a8 <_strtod_l+0x8f8>
 8016600:	9b04      	ldr	r3, [sp, #16]
 8016602:	4650      	mov	r0, sl
 8016604:	b1d3      	cbz	r3, 801663c <_strtod_l+0x88c>
 8016606:	4aad      	ldr	r2, [pc, #692]	; (80168bc <_strtod_l+0xb0c>)
 8016608:	402a      	ands	r2, r5
 801660a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801660e:	f04f 31ff 	mov.w	r1, #4294967295
 8016612:	d816      	bhi.n	8016642 <_strtod_l+0x892>
 8016614:	0d12      	lsrs	r2, r2, #20
 8016616:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801661a:	fa01 f303 	lsl.w	r3, r1, r3
 801661e:	4298      	cmp	r0, r3
 8016620:	d142      	bne.n	80166a8 <_strtod_l+0x8f8>
 8016622:	4ba7      	ldr	r3, [pc, #668]	; (80168c0 <_strtod_l+0xb10>)
 8016624:	429d      	cmp	r5, r3
 8016626:	d102      	bne.n	801662e <_strtod_l+0x87e>
 8016628:	3001      	adds	r0, #1
 801662a:	f43f addf 	beq.w	80161ec <_strtod_l+0x43c>
 801662e:	4ba3      	ldr	r3, [pc, #652]	; (80168bc <_strtod_l+0xb0c>)
 8016630:	402b      	ands	r3, r5
 8016632:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8016636:	f04f 0a00 	mov.w	sl, #0
 801663a:	e7a0      	b.n	801657e <_strtod_l+0x7ce>
 801663c:	f04f 33ff 	mov.w	r3, #4294967295
 8016640:	e7ed      	b.n	801661e <_strtod_l+0x86e>
 8016642:	460b      	mov	r3, r1
 8016644:	e7eb      	b.n	801661e <_strtod_l+0x86e>
 8016646:	bb7b      	cbnz	r3, 80166a8 <_strtod_l+0x8f8>
 8016648:	f1ba 0f00 	cmp.w	sl, #0
 801664c:	d12c      	bne.n	80166a8 <_strtod_l+0x8f8>
 801664e:	9904      	ldr	r1, [sp, #16]
 8016650:	4a9a      	ldr	r2, [pc, #616]	; (80168bc <_strtod_l+0xb0c>)
 8016652:	465b      	mov	r3, fp
 8016654:	b1f1      	cbz	r1, 8016694 <_strtod_l+0x8e4>
 8016656:	ea02 010b 	and.w	r1, r2, fp
 801665a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801665e:	dc19      	bgt.n	8016694 <_strtod_l+0x8e4>
 8016660:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8016664:	f77f ae5b 	ble.w	801631e <_strtod_l+0x56e>
 8016668:	4a96      	ldr	r2, [pc, #600]	; (80168c4 <_strtod_l+0xb14>)
 801666a:	2300      	movs	r3, #0
 801666c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8016670:	4650      	mov	r0, sl
 8016672:	4659      	mov	r1, fp
 8016674:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8016678:	f7e9 ffd6 	bl	8000628 <__aeabi_dmul>
 801667c:	4682      	mov	sl, r0
 801667e:	468b      	mov	fp, r1
 8016680:	2900      	cmp	r1, #0
 8016682:	f47f adbe 	bne.w	8016202 <_strtod_l+0x452>
 8016686:	2800      	cmp	r0, #0
 8016688:	f47f adbb 	bne.w	8016202 <_strtod_l+0x452>
 801668c:	2322      	movs	r3, #34	; 0x22
 801668e:	f8c9 3000 	str.w	r3, [r9]
 8016692:	e5b6      	b.n	8016202 <_strtod_l+0x452>
 8016694:	4013      	ands	r3, r2
 8016696:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801669a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801669e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80166a2:	f04f 3aff 	mov.w	sl, #4294967295
 80166a6:	e76a      	b.n	801657e <_strtod_l+0x7ce>
 80166a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80166aa:	b193      	cbz	r3, 80166d2 <_strtod_l+0x922>
 80166ac:	422b      	tst	r3, r5
 80166ae:	f43f af66 	beq.w	801657e <_strtod_l+0x7ce>
 80166b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80166b4:	9a04      	ldr	r2, [sp, #16]
 80166b6:	4650      	mov	r0, sl
 80166b8:	4659      	mov	r1, fp
 80166ba:	b173      	cbz	r3, 80166da <_strtod_l+0x92a>
 80166bc:	f7ff fb5c 	bl	8015d78 <sulp>
 80166c0:	4602      	mov	r2, r0
 80166c2:	460b      	mov	r3, r1
 80166c4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80166c8:	f7e9 fdf8 	bl	80002bc <__adddf3>
 80166cc:	4682      	mov	sl, r0
 80166ce:	468b      	mov	fp, r1
 80166d0:	e755      	b.n	801657e <_strtod_l+0x7ce>
 80166d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80166d4:	ea13 0f0a 	tst.w	r3, sl
 80166d8:	e7e9      	b.n	80166ae <_strtod_l+0x8fe>
 80166da:	f7ff fb4d 	bl	8015d78 <sulp>
 80166de:	4602      	mov	r2, r0
 80166e0:	460b      	mov	r3, r1
 80166e2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80166e6:	f7e9 fde7 	bl	80002b8 <__aeabi_dsub>
 80166ea:	2200      	movs	r2, #0
 80166ec:	2300      	movs	r3, #0
 80166ee:	4682      	mov	sl, r0
 80166f0:	468b      	mov	fp, r1
 80166f2:	f7ea fa01 	bl	8000af8 <__aeabi_dcmpeq>
 80166f6:	2800      	cmp	r0, #0
 80166f8:	f47f ae11 	bne.w	801631e <_strtod_l+0x56e>
 80166fc:	e73f      	b.n	801657e <_strtod_l+0x7ce>
 80166fe:	4641      	mov	r1, r8
 8016700:	4620      	mov	r0, r4
 8016702:	f001 ff40 	bl	8018586 <__ratio>
 8016706:	ec57 6b10 	vmov	r6, r7, d0
 801670a:	2200      	movs	r2, #0
 801670c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8016710:	ee10 0a10 	vmov	r0, s0
 8016714:	4639      	mov	r1, r7
 8016716:	f7ea fa03 	bl	8000b20 <__aeabi_dcmple>
 801671a:	2800      	cmp	r0, #0
 801671c:	d077      	beq.n	801680e <_strtod_l+0xa5e>
 801671e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016720:	2b00      	cmp	r3, #0
 8016722:	d04a      	beq.n	80167ba <_strtod_l+0xa0a>
 8016724:	4b68      	ldr	r3, [pc, #416]	; (80168c8 <_strtod_l+0xb18>)
 8016726:	2200      	movs	r2, #0
 8016728:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801672c:	4f66      	ldr	r7, [pc, #408]	; (80168c8 <_strtod_l+0xb18>)
 801672e:	2600      	movs	r6, #0
 8016730:	4b62      	ldr	r3, [pc, #392]	; (80168bc <_strtod_l+0xb0c>)
 8016732:	402b      	ands	r3, r5
 8016734:	930f      	str	r3, [sp, #60]	; 0x3c
 8016736:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016738:	4b64      	ldr	r3, [pc, #400]	; (80168cc <_strtod_l+0xb1c>)
 801673a:	429a      	cmp	r2, r3
 801673c:	f040 80ce 	bne.w	80168dc <_strtod_l+0xb2c>
 8016740:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8016744:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8016748:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 801674c:	ec4b ab10 	vmov	d0, sl, fp
 8016750:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8016754:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8016758:	f001 fe50 	bl	80183fc <__ulp>
 801675c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8016760:	ec53 2b10 	vmov	r2, r3, d0
 8016764:	f7e9 ff60 	bl	8000628 <__aeabi_dmul>
 8016768:	4652      	mov	r2, sl
 801676a:	465b      	mov	r3, fp
 801676c:	f7e9 fda6 	bl	80002bc <__adddf3>
 8016770:	460b      	mov	r3, r1
 8016772:	4952      	ldr	r1, [pc, #328]	; (80168bc <_strtod_l+0xb0c>)
 8016774:	4a56      	ldr	r2, [pc, #344]	; (80168d0 <_strtod_l+0xb20>)
 8016776:	4019      	ands	r1, r3
 8016778:	4291      	cmp	r1, r2
 801677a:	4682      	mov	sl, r0
 801677c:	d95b      	bls.n	8016836 <_strtod_l+0xa86>
 801677e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016780:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8016784:	4293      	cmp	r3, r2
 8016786:	d103      	bne.n	8016790 <_strtod_l+0x9e0>
 8016788:	9b08      	ldr	r3, [sp, #32]
 801678a:	3301      	adds	r3, #1
 801678c:	f43f ad2e 	beq.w	80161ec <_strtod_l+0x43c>
 8016790:	f8df b12c 	ldr.w	fp, [pc, #300]	; 80168c0 <_strtod_l+0xb10>
 8016794:	f04f 3aff 	mov.w	sl, #4294967295
 8016798:	991c      	ldr	r1, [sp, #112]	; 0x70
 801679a:	4648      	mov	r0, r9
 801679c:	f001 fb96 	bl	8017ecc <_Bfree>
 80167a0:	9905      	ldr	r1, [sp, #20]
 80167a2:	4648      	mov	r0, r9
 80167a4:	f001 fb92 	bl	8017ecc <_Bfree>
 80167a8:	4641      	mov	r1, r8
 80167aa:	4648      	mov	r0, r9
 80167ac:	f001 fb8e 	bl	8017ecc <_Bfree>
 80167b0:	4621      	mov	r1, r4
 80167b2:	4648      	mov	r0, r9
 80167b4:	f001 fb8a 	bl	8017ecc <_Bfree>
 80167b8:	e619      	b.n	80163ee <_strtod_l+0x63e>
 80167ba:	f1ba 0f00 	cmp.w	sl, #0
 80167be:	d11a      	bne.n	80167f6 <_strtod_l+0xa46>
 80167c0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80167c4:	b9eb      	cbnz	r3, 8016802 <_strtod_l+0xa52>
 80167c6:	2200      	movs	r2, #0
 80167c8:	4b3f      	ldr	r3, [pc, #252]	; (80168c8 <_strtod_l+0xb18>)
 80167ca:	4630      	mov	r0, r6
 80167cc:	4639      	mov	r1, r7
 80167ce:	f7ea f99d 	bl	8000b0c <__aeabi_dcmplt>
 80167d2:	b9c8      	cbnz	r0, 8016808 <_strtod_l+0xa58>
 80167d4:	4630      	mov	r0, r6
 80167d6:	4639      	mov	r1, r7
 80167d8:	2200      	movs	r2, #0
 80167da:	4b3e      	ldr	r3, [pc, #248]	; (80168d4 <_strtod_l+0xb24>)
 80167dc:	f7e9 ff24 	bl	8000628 <__aeabi_dmul>
 80167e0:	4606      	mov	r6, r0
 80167e2:	460f      	mov	r7, r1
 80167e4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80167e8:	9618      	str	r6, [sp, #96]	; 0x60
 80167ea:	9319      	str	r3, [sp, #100]	; 0x64
 80167ec:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 80167f0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80167f4:	e79c      	b.n	8016730 <_strtod_l+0x980>
 80167f6:	f1ba 0f01 	cmp.w	sl, #1
 80167fa:	d102      	bne.n	8016802 <_strtod_l+0xa52>
 80167fc:	2d00      	cmp	r5, #0
 80167fe:	f43f ad8e 	beq.w	801631e <_strtod_l+0x56e>
 8016802:	2200      	movs	r2, #0
 8016804:	4b34      	ldr	r3, [pc, #208]	; (80168d8 <_strtod_l+0xb28>)
 8016806:	e78f      	b.n	8016728 <_strtod_l+0x978>
 8016808:	2600      	movs	r6, #0
 801680a:	4f32      	ldr	r7, [pc, #200]	; (80168d4 <_strtod_l+0xb24>)
 801680c:	e7ea      	b.n	80167e4 <_strtod_l+0xa34>
 801680e:	4b31      	ldr	r3, [pc, #196]	; (80168d4 <_strtod_l+0xb24>)
 8016810:	4630      	mov	r0, r6
 8016812:	4639      	mov	r1, r7
 8016814:	2200      	movs	r2, #0
 8016816:	f7e9 ff07 	bl	8000628 <__aeabi_dmul>
 801681a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801681c:	4606      	mov	r6, r0
 801681e:	460f      	mov	r7, r1
 8016820:	b933      	cbnz	r3, 8016830 <_strtod_l+0xa80>
 8016822:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016826:	9010      	str	r0, [sp, #64]	; 0x40
 8016828:	9311      	str	r3, [sp, #68]	; 0x44
 801682a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801682e:	e7df      	b.n	80167f0 <_strtod_l+0xa40>
 8016830:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8016834:	e7f9      	b.n	801682a <_strtod_l+0xa7a>
 8016836:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801683a:	9b04      	ldr	r3, [sp, #16]
 801683c:	2b00      	cmp	r3, #0
 801683e:	d1ab      	bne.n	8016798 <_strtod_l+0x9e8>
 8016840:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8016844:	0d1b      	lsrs	r3, r3, #20
 8016846:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016848:	051b      	lsls	r3, r3, #20
 801684a:	429a      	cmp	r2, r3
 801684c:	465d      	mov	r5, fp
 801684e:	d1a3      	bne.n	8016798 <_strtod_l+0x9e8>
 8016850:	4639      	mov	r1, r7
 8016852:	4630      	mov	r0, r6
 8016854:	f7ea f998 	bl	8000b88 <__aeabi_d2iz>
 8016858:	f7e9 fe7c 	bl	8000554 <__aeabi_i2d>
 801685c:	460b      	mov	r3, r1
 801685e:	4602      	mov	r2, r0
 8016860:	4639      	mov	r1, r7
 8016862:	4630      	mov	r0, r6
 8016864:	f7e9 fd28 	bl	80002b8 <__aeabi_dsub>
 8016868:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801686a:	4606      	mov	r6, r0
 801686c:	460f      	mov	r7, r1
 801686e:	b933      	cbnz	r3, 801687e <_strtod_l+0xace>
 8016870:	f1ba 0f00 	cmp.w	sl, #0
 8016874:	d103      	bne.n	801687e <_strtod_l+0xace>
 8016876:	f3cb 0513 	ubfx	r5, fp, #0, #20
 801687a:	2d00      	cmp	r5, #0
 801687c:	d06d      	beq.n	801695a <_strtod_l+0xbaa>
 801687e:	a30a      	add	r3, pc, #40	; (adr r3, 80168a8 <_strtod_l+0xaf8>)
 8016880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016884:	4630      	mov	r0, r6
 8016886:	4639      	mov	r1, r7
 8016888:	f7ea f940 	bl	8000b0c <__aeabi_dcmplt>
 801688c:	2800      	cmp	r0, #0
 801688e:	f47f acb8 	bne.w	8016202 <_strtod_l+0x452>
 8016892:	a307      	add	r3, pc, #28	; (adr r3, 80168b0 <_strtod_l+0xb00>)
 8016894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016898:	4630      	mov	r0, r6
 801689a:	4639      	mov	r1, r7
 801689c:	f7ea f954 	bl	8000b48 <__aeabi_dcmpgt>
 80168a0:	2800      	cmp	r0, #0
 80168a2:	f43f af79 	beq.w	8016798 <_strtod_l+0x9e8>
 80168a6:	e4ac      	b.n	8016202 <_strtod_l+0x452>
 80168a8:	94a03595 	.word	0x94a03595
 80168ac:	3fdfffff 	.word	0x3fdfffff
 80168b0:	35afe535 	.word	0x35afe535
 80168b4:	3fe00000 	.word	0x3fe00000
 80168b8:	000fffff 	.word	0x000fffff
 80168bc:	7ff00000 	.word	0x7ff00000
 80168c0:	7fefffff 	.word	0x7fefffff
 80168c4:	39500000 	.word	0x39500000
 80168c8:	3ff00000 	.word	0x3ff00000
 80168cc:	7fe00000 	.word	0x7fe00000
 80168d0:	7c9fffff 	.word	0x7c9fffff
 80168d4:	3fe00000 	.word	0x3fe00000
 80168d8:	bff00000 	.word	0xbff00000
 80168dc:	9b04      	ldr	r3, [sp, #16]
 80168de:	b333      	cbz	r3, 801692e <_strtod_l+0xb7e>
 80168e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80168e2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80168e6:	d822      	bhi.n	801692e <_strtod_l+0xb7e>
 80168e8:	a327      	add	r3, pc, #156	; (adr r3, 8016988 <_strtod_l+0xbd8>)
 80168ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80168ee:	4630      	mov	r0, r6
 80168f0:	4639      	mov	r1, r7
 80168f2:	f7ea f915 	bl	8000b20 <__aeabi_dcmple>
 80168f6:	b1a0      	cbz	r0, 8016922 <_strtod_l+0xb72>
 80168f8:	4639      	mov	r1, r7
 80168fa:	4630      	mov	r0, r6
 80168fc:	f7ea f96c 	bl	8000bd8 <__aeabi_d2uiz>
 8016900:	2800      	cmp	r0, #0
 8016902:	bf08      	it	eq
 8016904:	2001      	moveq	r0, #1
 8016906:	f7e9 fe15 	bl	8000534 <__aeabi_ui2d>
 801690a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801690c:	4606      	mov	r6, r0
 801690e:	460f      	mov	r7, r1
 8016910:	bb03      	cbnz	r3, 8016954 <_strtod_l+0xba4>
 8016912:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016916:	9012      	str	r0, [sp, #72]	; 0x48
 8016918:	9313      	str	r3, [sp, #76]	; 0x4c
 801691a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801691e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8016922:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016924:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016926:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801692a:	1a9b      	subs	r3, r3, r2
 801692c:	930b      	str	r3, [sp, #44]	; 0x2c
 801692e:	ed9d 0b08 	vldr	d0, [sp, #32]
 8016932:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8016936:	f001 fd61 	bl	80183fc <__ulp>
 801693a:	4650      	mov	r0, sl
 801693c:	ec53 2b10 	vmov	r2, r3, d0
 8016940:	4659      	mov	r1, fp
 8016942:	f7e9 fe71 	bl	8000628 <__aeabi_dmul>
 8016946:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801694a:	f7e9 fcb7 	bl	80002bc <__adddf3>
 801694e:	4682      	mov	sl, r0
 8016950:	468b      	mov	fp, r1
 8016952:	e772      	b.n	801683a <_strtod_l+0xa8a>
 8016954:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8016958:	e7df      	b.n	801691a <_strtod_l+0xb6a>
 801695a:	a30d      	add	r3, pc, #52	; (adr r3, 8016990 <_strtod_l+0xbe0>)
 801695c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016960:	f7ea f8d4 	bl	8000b0c <__aeabi_dcmplt>
 8016964:	e79c      	b.n	80168a0 <_strtod_l+0xaf0>
 8016966:	2300      	movs	r3, #0
 8016968:	930d      	str	r3, [sp, #52]	; 0x34
 801696a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801696c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801696e:	6013      	str	r3, [r2, #0]
 8016970:	f7ff ba61 	b.w	8015e36 <_strtod_l+0x86>
 8016974:	2b65      	cmp	r3, #101	; 0x65
 8016976:	f04f 0200 	mov.w	r2, #0
 801697a:	f43f ab4e 	beq.w	801601a <_strtod_l+0x26a>
 801697e:	2101      	movs	r1, #1
 8016980:	4614      	mov	r4, r2
 8016982:	9104      	str	r1, [sp, #16]
 8016984:	f7ff bacb 	b.w	8015f1e <_strtod_l+0x16e>
 8016988:	ffc00000 	.word	0xffc00000
 801698c:	41dfffff 	.word	0x41dfffff
 8016990:	94a03595 	.word	0x94a03595
 8016994:	3fcfffff 	.word	0x3fcfffff

08016998 <_strtod_r>:
 8016998:	4b05      	ldr	r3, [pc, #20]	; (80169b0 <_strtod_r+0x18>)
 801699a:	681b      	ldr	r3, [r3, #0]
 801699c:	b410      	push	{r4}
 801699e:	6a1b      	ldr	r3, [r3, #32]
 80169a0:	4c04      	ldr	r4, [pc, #16]	; (80169b4 <_strtod_r+0x1c>)
 80169a2:	2b00      	cmp	r3, #0
 80169a4:	bf08      	it	eq
 80169a6:	4623      	moveq	r3, r4
 80169a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80169ac:	f7ff ba00 	b.w	8015db0 <_strtod_l>
 80169b0:	2000000c 	.word	0x2000000c
 80169b4:	20000070 	.word	0x20000070

080169b8 <_strtol_l.isra.0>:
 80169b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80169bc:	4680      	mov	r8, r0
 80169be:	4689      	mov	r9, r1
 80169c0:	4692      	mov	sl, r2
 80169c2:	461e      	mov	r6, r3
 80169c4:	460f      	mov	r7, r1
 80169c6:	463d      	mov	r5, r7
 80169c8:	9808      	ldr	r0, [sp, #32]
 80169ca:	f815 4b01 	ldrb.w	r4, [r5], #1
 80169ce:	f001 fa0d 	bl	8017dec <__locale_ctype_ptr_l>
 80169d2:	4420      	add	r0, r4
 80169d4:	7843      	ldrb	r3, [r0, #1]
 80169d6:	f013 0308 	ands.w	r3, r3, #8
 80169da:	d132      	bne.n	8016a42 <_strtol_l.isra.0+0x8a>
 80169dc:	2c2d      	cmp	r4, #45	; 0x2d
 80169de:	d132      	bne.n	8016a46 <_strtol_l.isra.0+0x8e>
 80169e0:	787c      	ldrb	r4, [r7, #1]
 80169e2:	1cbd      	adds	r5, r7, #2
 80169e4:	2201      	movs	r2, #1
 80169e6:	2e00      	cmp	r6, #0
 80169e8:	d05d      	beq.n	8016aa6 <_strtol_l.isra.0+0xee>
 80169ea:	2e10      	cmp	r6, #16
 80169ec:	d109      	bne.n	8016a02 <_strtol_l.isra.0+0x4a>
 80169ee:	2c30      	cmp	r4, #48	; 0x30
 80169f0:	d107      	bne.n	8016a02 <_strtol_l.isra.0+0x4a>
 80169f2:	782b      	ldrb	r3, [r5, #0]
 80169f4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80169f8:	2b58      	cmp	r3, #88	; 0x58
 80169fa:	d14f      	bne.n	8016a9c <_strtol_l.isra.0+0xe4>
 80169fc:	786c      	ldrb	r4, [r5, #1]
 80169fe:	2610      	movs	r6, #16
 8016a00:	3502      	adds	r5, #2
 8016a02:	2a00      	cmp	r2, #0
 8016a04:	bf14      	ite	ne
 8016a06:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8016a0a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8016a0e:	2700      	movs	r7, #0
 8016a10:	fbb1 fcf6 	udiv	ip, r1, r6
 8016a14:	4638      	mov	r0, r7
 8016a16:	fb06 1e1c 	mls	lr, r6, ip, r1
 8016a1a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8016a1e:	2b09      	cmp	r3, #9
 8016a20:	d817      	bhi.n	8016a52 <_strtol_l.isra.0+0x9a>
 8016a22:	461c      	mov	r4, r3
 8016a24:	42a6      	cmp	r6, r4
 8016a26:	dd23      	ble.n	8016a70 <_strtol_l.isra.0+0xb8>
 8016a28:	1c7b      	adds	r3, r7, #1
 8016a2a:	d007      	beq.n	8016a3c <_strtol_l.isra.0+0x84>
 8016a2c:	4584      	cmp	ip, r0
 8016a2e:	d31c      	bcc.n	8016a6a <_strtol_l.isra.0+0xb2>
 8016a30:	d101      	bne.n	8016a36 <_strtol_l.isra.0+0x7e>
 8016a32:	45a6      	cmp	lr, r4
 8016a34:	db19      	blt.n	8016a6a <_strtol_l.isra.0+0xb2>
 8016a36:	fb00 4006 	mla	r0, r0, r6, r4
 8016a3a:	2701      	movs	r7, #1
 8016a3c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016a40:	e7eb      	b.n	8016a1a <_strtol_l.isra.0+0x62>
 8016a42:	462f      	mov	r7, r5
 8016a44:	e7bf      	b.n	80169c6 <_strtol_l.isra.0+0xe>
 8016a46:	2c2b      	cmp	r4, #43	; 0x2b
 8016a48:	bf04      	itt	eq
 8016a4a:	1cbd      	addeq	r5, r7, #2
 8016a4c:	787c      	ldrbeq	r4, [r7, #1]
 8016a4e:	461a      	mov	r2, r3
 8016a50:	e7c9      	b.n	80169e6 <_strtol_l.isra.0+0x2e>
 8016a52:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8016a56:	2b19      	cmp	r3, #25
 8016a58:	d801      	bhi.n	8016a5e <_strtol_l.isra.0+0xa6>
 8016a5a:	3c37      	subs	r4, #55	; 0x37
 8016a5c:	e7e2      	b.n	8016a24 <_strtol_l.isra.0+0x6c>
 8016a5e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8016a62:	2b19      	cmp	r3, #25
 8016a64:	d804      	bhi.n	8016a70 <_strtol_l.isra.0+0xb8>
 8016a66:	3c57      	subs	r4, #87	; 0x57
 8016a68:	e7dc      	b.n	8016a24 <_strtol_l.isra.0+0x6c>
 8016a6a:	f04f 37ff 	mov.w	r7, #4294967295
 8016a6e:	e7e5      	b.n	8016a3c <_strtol_l.isra.0+0x84>
 8016a70:	1c7b      	adds	r3, r7, #1
 8016a72:	d108      	bne.n	8016a86 <_strtol_l.isra.0+0xce>
 8016a74:	2322      	movs	r3, #34	; 0x22
 8016a76:	f8c8 3000 	str.w	r3, [r8]
 8016a7a:	4608      	mov	r0, r1
 8016a7c:	f1ba 0f00 	cmp.w	sl, #0
 8016a80:	d107      	bne.n	8016a92 <_strtol_l.isra.0+0xda>
 8016a82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016a86:	b102      	cbz	r2, 8016a8a <_strtol_l.isra.0+0xd2>
 8016a88:	4240      	negs	r0, r0
 8016a8a:	f1ba 0f00 	cmp.w	sl, #0
 8016a8e:	d0f8      	beq.n	8016a82 <_strtol_l.isra.0+0xca>
 8016a90:	b10f      	cbz	r7, 8016a96 <_strtol_l.isra.0+0xde>
 8016a92:	f105 39ff 	add.w	r9, r5, #4294967295
 8016a96:	f8ca 9000 	str.w	r9, [sl]
 8016a9a:	e7f2      	b.n	8016a82 <_strtol_l.isra.0+0xca>
 8016a9c:	2430      	movs	r4, #48	; 0x30
 8016a9e:	2e00      	cmp	r6, #0
 8016aa0:	d1af      	bne.n	8016a02 <_strtol_l.isra.0+0x4a>
 8016aa2:	2608      	movs	r6, #8
 8016aa4:	e7ad      	b.n	8016a02 <_strtol_l.isra.0+0x4a>
 8016aa6:	2c30      	cmp	r4, #48	; 0x30
 8016aa8:	d0a3      	beq.n	80169f2 <_strtol_l.isra.0+0x3a>
 8016aaa:	260a      	movs	r6, #10
 8016aac:	e7a9      	b.n	8016a02 <_strtol_l.isra.0+0x4a>
	...

08016ab0 <_strtol_r>:
 8016ab0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016ab2:	4c06      	ldr	r4, [pc, #24]	; (8016acc <_strtol_r+0x1c>)
 8016ab4:	4d06      	ldr	r5, [pc, #24]	; (8016ad0 <_strtol_r+0x20>)
 8016ab6:	6824      	ldr	r4, [r4, #0]
 8016ab8:	6a24      	ldr	r4, [r4, #32]
 8016aba:	2c00      	cmp	r4, #0
 8016abc:	bf08      	it	eq
 8016abe:	462c      	moveq	r4, r5
 8016ac0:	9400      	str	r4, [sp, #0]
 8016ac2:	f7ff ff79 	bl	80169b8 <_strtol_l.isra.0>
 8016ac6:	b003      	add	sp, #12
 8016ac8:	bd30      	pop	{r4, r5, pc}
 8016aca:	bf00      	nop
 8016acc:	2000000c 	.word	0x2000000c
 8016ad0:	20000070 	.word	0x20000070

08016ad4 <_vsiprintf_r>:
 8016ad4:	b500      	push	{lr}
 8016ad6:	b09b      	sub	sp, #108	; 0x6c
 8016ad8:	9100      	str	r1, [sp, #0]
 8016ada:	9104      	str	r1, [sp, #16]
 8016adc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016ae0:	9105      	str	r1, [sp, #20]
 8016ae2:	9102      	str	r1, [sp, #8]
 8016ae4:	4905      	ldr	r1, [pc, #20]	; (8016afc <_vsiprintf_r+0x28>)
 8016ae6:	9103      	str	r1, [sp, #12]
 8016ae8:	4669      	mov	r1, sp
 8016aea:	f001 fecb 	bl	8018884 <_svfiprintf_r>
 8016aee:	9b00      	ldr	r3, [sp, #0]
 8016af0:	2200      	movs	r2, #0
 8016af2:	701a      	strb	r2, [r3, #0]
 8016af4:	b01b      	add	sp, #108	; 0x6c
 8016af6:	f85d fb04 	ldr.w	pc, [sp], #4
 8016afa:	bf00      	nop
 8016afc:	ffff0208 	.word	0xffff0208

08016b00 <vsiprintf>:
 8016b00:	4613      	mov	r3, r2
 8016b02:	460a      	mov	r2, r1
 8016b04:	4601      	mov	r1, r0
 8016b06:	4802      	ldr	r0, [pc, #8]	; (8016b10 <vsiprintf+0x10>)
 8016b08:	6800      	ldr	r0, [r0, #0]
 8016b0a:	f7ff bfe3 	b.w	8016ad4 <_vsiprintf_r>
 8016b0e:	bf00      	nop
 8016b10:	2000000c 	.word	0x2000000c

08016b14 <quorem>:
 8016b14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b18:	6903      	ldr	r3, [r0, #16]
 8016b1a:	690c      	ldr	r4, [r1, #16]
 8016b1c:	42a3      	cmp	r3, r4
 8016b1e:	4680      	mov	r8, r0
 8016b20:	f2c0 8082 	blt.w	8016c28 <quorem+0x114>
 8016b24:	3c01      	subs	r4, #1
 8016b26:	f101 0714 	add.w	r7, r1, #20
 8016b2a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8016b2e:	f100 0614 	add.w	r6, r0, #20
 8016b32:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8016b36:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8016b3a:	eb06 030c 	add.w	r3, r6, ip
 8016b3e:	3501      	adds	r5, #1
 8016b40:	eb07 090c 	add.w	r9, r7, ip
 8016b44:	9301      	str	r3, [sp, #4]
 8016b46:	fbb0 f5f5 	udiv	r5, r0, r5
 8016b4a:	b395      	cbz	r5, 8016bb2 <quorem+0x9e>
 8016b4c:	f04f 0a00 	mov.w	sl, #0
 8016b50:	4638      	mov	r0, r7
 8016b52:	46b6      	mov	lr, r6
 8016b54:	46d3      	mov	fp, sl
 8016b56:	f850 2b04 	ldr.w	r2, [r0], #4
 8016b5a:	b293      	uxth	r3, r2
 8016b5c:	fb05 a303 	mla	r3, r5, r3, sl
 8016b60:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8016b64:	b29b      	uxth	r3, r3
 8016b66:	ebab 0303 	sub.w	r3, fp, r3
 8016b6a:	0c12      	lsrs	r2, r2, #16
 8016b6c:	f8de b000 	ldr.w	fp, [lr]
 8016b70:	fb05 a202 	mla	r2, r5, r2, sl
 8016b74:	fa13 f38b 	uxtah	r3, r3, fp
 8016b78:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8016b7c:	fa1f fb82 	uxth.w	fp, r2
 8016b80:	f8de 2000 	ldr.w	r2, [lr]
 8016b84:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8016b88:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016b8c:	b29b      	uxth	r3, r3
 8016b8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016b92:	4581      	cmp	r9, r0
 8016b94:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8016b98:	f84e 3b04 	str.w	r3, [lr], #4
 8016b9c:	d2db      	bcs.n	8016b56 <quorem+0x42>
 8016b9e:	f856 300c 	ldr.w	r3, [r6, ip]
 8016ba2:	b933      	cbnz	r3, 8016bb2 <quorem+0x9e>
 8016ba4:	9b01      	ldr	r3, [sp, #4]
 8016ba6:	3b04      	subs	r3, #4
 8016ba8:	429e      	cmp	r6, r3
 8016baa:	461a      	mov	r2, r3
 8016bac:	d330      	bcc.n	8016c10 <quorem+0xfc>
 8016bae:	f8c8 4010 	str.w	r4, [r8, #16]
 8016bb2:	4640      	mov	r0, r8
 8016bb4:	f001 fbaa 	bl	801830c <__mcmp>
 8016bb8:	2800      	cmp	r0, #0
 8016bba:	db25      	blt.n	8016c08 <quorem+0xf4>
 8016bbc:	3501      	adds	r5, #1
 8016bbe:	4630      	mov	r0, r6
 8016bc0:	f04f 0c00 	mov.w	ip, #0
 8016bc4:	f857 2b04 	ldr.w	r2, [r7], #4
 8016bc8:	f8d0 e000 	ldr.w	lr, [r0]
 8016bcc:	b293      	uxth	r3, r2
 8016bce:	ebac 0303 	sub.w	r3, ip, r3
 8016bd2:	0c12      	lsrs	r2, r2, #16
 8016bd4:	fa13 f38e 	uxtah	r3, r3, lr
 8016bd8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8016bdc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016be0:	b29b      	uxth	r3, r3
 8016be2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016be6:	45b9      	cmp	r9, r7
 8016be8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8016bec:	f840 3b04 	str.w	r3, [r0], #4
 8016bf0:	d2e8      	bcs.n	8016bc4 <quorem+0xb0>
 8016bf2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8016bf6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8016bfa:	b92a      	cbnz	r2, 8016c08 <quorem+0xf4>
 8016bfc:	3b04      	subs	r3, #4
 8016bfe:	429e      	cmp	r6, r3
 8016c00:	461a      	mov	r2, r3
 8016c02:	d30b      	bcc.n	8016c1c <quorem+0x108>
 8016c04:	f8c8 4010 	str.w	r4, [r8, #16]
 8016c08:	4628      	mov	r0, r5
 8016c0a:	b003      	add	sp, #12
 8016c0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c10:	6812      	ldr	r2, [r2, #0]
 8016c12:	3b04      	subs	r3, #4
 8016c14:	2a00      	cmp	r2, #0
 8016c16:	d1ca      	bne.n	8016bae <quorem+0x9a>
 8016c18:	3c01      	subs	r4, #1
 8016c1a:	e7c5      	b.n	8016ba8 <quorem+0x94>
 8016c1c:	6812      	ldr	r2, [r2, #0]
 8016c1e:	3b04      	subs	r3, #4
 8016c20:	2a00      	cmp	r2, #0
 8016c22:	d1ef      	bne.n	8016c04 <quorem+0xf0>
 8016c24:	3c01      	subs	r4, #1
 8016c26:	e7ea      	b.n	8016bfe <quorem+0xea>
 8016c28:	2000      	movs	r0, #0
 8016c2a:	e7ee      	b.n	8016c0a <quorem+0xf6>
 8016c2c:	0000      	movs	r0, r0
	...

08016c30 <_dtoa_r>:
 8016c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c34:	ec57 6b10 	vmov	r6, r7, d0
 8016c38:	b097      	sub	sp, #92	; 0x5c
 8016c3a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8016c3c:	9106      	str	r1, [sp, #24]
 8016c3e:	4604      	mov	r4, r0
 8016c40:	920b      	str	r2, [sp, #44]	; 0x2c
 8016c42:	9312      	str	r3, [sp, #72]	; 0x48
 8016c44:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8016c48:	e9cd 6700 	strd	r6, r7, [sp]
 8016c4c:	b93d      	cbnz	r5, 8016c5e <_dtoa_r+0x2e>
 8016c4e:	2010      	movs	r0, #16
 8016c50:	f001 f8ee 	bl	8017e30 <malloc>
 8016c54:	6260      	str	r0, [r4, #36]	; 0x24
 8016c56:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8016c5a:	6005      	str	r5, [r0, #0]
 8016c5c:	60c5      	str	r5, [r0, #12]
 8016c5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016c60:	6819      	ldr	r1, [r3, #0]
 8016c62:	b151      	cbz	r1, 8016c7a <_dtoa_r+0x4a>
 8016c64:	685a      	ldr	r2, [r3, #4]
 8016c66:	604a      	str	r2, [r1, #4]
 8016c68:	2301      	movs	r3, #1
 8016c6a:	4093      	lsls	r3, r2
 8016c6c:	608b      	str	r3, [r1, #8]
 8016c6e:	4620      	mov	r0, r4
 8016c70:	f001 f92c 	bl	8017ecc <_Bfree>
 8016c74:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016c76:	2200      	movs	r2, #0
 8016c78:	601a      	str	r2, [r3, #0]
 8016c7a:	1e3b      	subs	r3, r7, #0
 8016c7c:	bfbb      	ittet	lt
 8016c7e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8016c82:	9301      	strlt	r3, [sp, #4]
 8016c84:	2300      	movge	r3, #0
 8016c86:	2201      	movlt	r2, #1
 8016c88:	bfac      	ite	ge
 8016c8a:	f8c8 3000 	strge.w	r3, [r8]
 8016c8e:	f8c8 2000 	strlt.w	r2, [r8]
 8016c92:	4baf      	ldr	r3, [pc, #700]	; (8016f50 <_dtoa_r+0x320>)
 8016c94:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8016c98:	ea33 0308 	bics.w	r3, r3, r8
 8016c9c:	d114      	bne.n	8016cc8 <_dtoa_r+0x98>
 8016c9e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016ca0:	f242 730f 	movw	r3, #9999	; 0x270f
 8016ca4:	6013      	str	r3, [r2, #0]
 8016ca6:	9b00      	ldr	r3, [sp, #0]
 8016ca8:	b923      	cbnz	r3, 8016cb4 <_dtoa_r+0x84>
 8016caa:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8016cae:	2800      	cmp	r0, #0
 8016cb0:	f000 8542 	beq.w	8017738 <_dtoa_r+0xb08>
 8016cb4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016cb6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8016f64 <_dtoa_r+0x334>
 8016cba:	2b00      	cmp	r3, #0
 8016cbc:	f000 8544 	beq.w	8017748 <_dtoa_r+0xb18>
 8016cc0:	f10b 0303 	add.w	r3, fp, #3
 8016cc4:	f000 bd3e 	b.w	8017744 <_dtoa_r+0xb14>
 8016cc8:	e9dd 6700 	ldrd	r6, r7, [sp]
 8016ccc:	2200      	movs	r2, #0
 8016cce:	2300      	movs	r3, #0
 8016cd0:	4630      	mov	r0, r6
 8016cd2:	4639      	mov	r1, r7
 8016cd4:	f7e9 ff10 	bl	8000af8 <__aeabi_dcmpeq>
 8016cd8:	4681      	mov	r9, r0
 8016cda:	b168      	cbz	r0, 8016cf8 <_dtoa_r+0xc8>
 8016cdc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016cde:	2301      	movs	r3, #1
 8016ce0:	6013      	str	r3, [r2, #0]
 8016ce2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016ce4:	2b00      	cmp	r3, #0
 8016ce6:	f000 8524 	beq.w	8017732 <_dtoa_r+0xb02>
 8016cea:	4b9a      	ldr	r3, [pc, #616]	; (8016f54 <_dtoa_r+0x324>)
 8016cec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8016cee:	f103 3bff 	add.w	fp, r3, #4294967295
 8016cf2:	6013      	str	r3, [r2, #0]
 8016cf4:	f000 bd28 	b.w	8017748 <_dtoa_r+0xb18>
 8016cf8:	aa14      	add	r2, sp, #80	; 0x50
 8016cfa:	a915      	add	r1, sp, #84	; 0x54
 8016cfc:	ec47 6b10 	vmov	d0, r6, r7
 8016d00:	4620      	mov	r0, r4
 8016d02:	f001 fbf1 	bl	80184e8 <__d2b>
 8016d06:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8016d0a:	9004      	str	r0, [sp, #16]
 8016d0c:	2d00      	cmp	r5, #0
 8016d0e:	d07c      	beq.n	8016e0a <_dtoa_r+0x1da>
 8016d10:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8016d14:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8016d18:	46b2      	mov	sl, r6
 8016d1a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8016d1e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8016d22:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8016d26:	2200      	movs	r2, #0
 8016d28:	4b8b      	ldr	r3, [pc, #556]	; (8016f58 <_dtoa_r+0x328>)
 8016d2a:	4650      	mov	r0, sl
 8016d2c:	4659      	mov	r1, fp
 8016d2e:	f7e9 fac3 	bl	80002b8 <__aeabi_dsub>
 8016d32:	a381      	add	r3, pc, #516	; (adr r3, 8016f38 <_dtoa_r+0x308>)
 8016d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d38:	f7e9 fc76 	bl	8000628 <__aeabi_dmul>
 8016d3c:	a380      	add	r3, pc, #512	; (adr r3, 8016f40 <_dtoa_r+0x310>)
 8016d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d42:	f7e9 fabb 	bl	80002bc <__adddf3>
 8016d46:	4606      	mov	r6, r0
 8016d48:	4628      	mov	r0, r5
 8016d4a:	460f      	mov	r7, r1
 8016d4c:	f7e9 fc02 	bl	8000554 <__aeabi_i2d>
 8016d50:	a37d      	add	r3, pc, #500	; (adr r3, 8016f48 <_dtoa_r+0x318>)
 8016d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016d56:	f7e9 fc67 	bl	8000628 <__aeabi_dmul>
 8016d5a:	4602      	mov	r2, r0
 8016d5c:	460b      	mov	r3, r1
 8016d5e:	4630      	mov	r0, r6
 8016d60:	4639      	mov	r1, r7
 8016d62:	f7e9 faab 	bl	80002bc <__adddf3>
 8016d66:	4606      	mov	r6, r0
 8016d68:	460f      	mov	r7, r1
 8016d6a:	f7e9 ff0d 	bl	8000b88 <__aeabi_d2iz>
 8016d6e:	2200      	movs	r2, #0
 8016d70:	4682      	mov	sl, r0
 8016d72:	2300      	movs	r3, #0
 8016d74:	4630      	mov	r0, r6
 8016d76:	4639      	mov	r1, r7
 8016d78:	f7e9 fec8 	bl	8000b0c <__aeabi_dcmplt>
 8016d7c:	b148      	cbz	r0, 8016d92 <_dtoa_r+0x162>
 8016d7e:	4650      	mov	r0, sl
 8016d80:	f7e9 fbe8 	bl	8000554 <__aeabi_i2d>
 8016d84:	4632      	mov	r2, r6
 8016d86:	463b      	mov	r3, r7
 8016d88:	f7e9 feb6 	bl	8000af8 <__aeabi_dcmpeq>
 8016d8c:	b908      	cbnz	r0, 8016d92 <_dtoa_r+0x162>
 8016d8e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016d92:	f1ba 0f16 	cmp.w	sl, #22
 8016d96:	d859      	bhi.n	8016e4c <_dtoa_r+0x21c>
 8016d98:	4970      	ldr	r1, [pc, #448]	; (8016f5c <_dtoa_r+0x32c>)
 8016d9a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8016d9e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8016da2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016da6:	f7e9 fecf 	bl	8000b48 <__aeabi_dcmpgt>
 8016daa:	2800      	cmp	r0, #0
 8016dac:	d050      	beq.n	8016e50 <_dtoa_r+0x220>
 8016dae:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016db2:	2300      	movs	r3, #0
 8016db4:	930f      	str	r3, [sp, #60]	; 0x3c
 8016db6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016db8:	1b5d      	subs	r5, r3, r5
 8016dba:	f1b5 0801 	subs.w	r8, r5, #1
 8016dbe:	bf49      	itett	mi
 8016dc0:	f1c5 0301 	rsbmi	r3, r5, #1
 8016dc4:	2300      	movpl	r3, #0
 8016dc6:	9305      	strmi	r3, [sp, #20]
 8016dc8:	f04f 0800 	movmi.w	r8, #0
 8016dcc:	bf58      	it	pl
 8016dce:	9305      	strpl	r3, [sp, #20]
 8016dd0:	f1ba 0f00 	cmp.w	sl, #0
 8016dd4:	db3e      	blt.n	8016e54 <_dtoa_r+0x224>
 8016dd6:	2300      	movs	r3, #0
 8016dd8:	44d0      	add	r8, sl
 8016dda:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8016dde:	9307      	str	r3, [sp, #28]
 8016de0:	9b06      	ldr	r3, [sp, #24]
 8016de2:	2b09      	cmp	r3, #9
 8016de4:	f200 8090 	bhi.w	8016f08 <_dtoa_r+0x2d8>
 8016de8:	2b05      	cmp	r3, #5
 8016dea:	bfc4      	itt	gt
 8016dec:	3b04      	subgt	r3, #4
 8016dee:	9306      	strgt	r3, [sp, #24]
 8016df0:	9b06      	ldr	r3, [sp, #24]
 8016df2:	f1a3 0302 	sub.w	r3, r3, #2
 8016df6:	bfcc      	ite	gt
 8016df8:	2500      	movgt	r5, #0
 8016dfa:	2501      	movle	r5, #1
 8016dfc:	2b03      	cmp	r3, #3
 8016dfe:	f200 808f 	bhi.w	8016f20 <_dtoa_r+0x2f0>
 8016e02:	e8df f003 	tbb	[pc, r3]
 8016e06:	7f7d      	.short	0x7f7d
 8016e08:	7131      	.short	0x7131
 8016e0a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8016e0e:	441d      	add	r5, r3
 8016e10:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8016e14:	2820      	cmp	r0, #32
 8016e16:	dd13      	ble.n	8016e40 <_dtoa_r+0x210>
 8016e18:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8016e1c:	9b00      	ldr	r3, [sp, #0]
 8016e1e:	fa08 f800 	lsl.w	r8, r8, r0
 8016e22:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8016e26:	fa23 f000 	lsr.w	r0, r3, r0
 8016e2a:	ea48 0000 	orr.w	r0, r8, r0
 8016e2e:	f7e9 fb81 	bl	8000534 <__aeabi_ui2d>
 8016e32:	2301      	movs	r3, #1
 8016e34:	4682      	mov	sl, r0
 8016e36:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8016e3a:	3d01      	subs	r5, #1
 8016e3c:	9313      	str	r3, [sp, #76]	; 0x4c
 8016e3e:	e772      	b.n	8016d26 <_dtoa_r+0xf6>
 8016e40:	9b00      	ldr	r3, [sp, #0]
 8016e42:	f1c0 0020 	rsb	r0, r0, #32
 8016e46:	fa03 f000 	lsl.w	r0, r3, r0
 8016e4a:	e7f0      	b.n	8016e2e <_dtoa_r+0x1fe>
 8016e4c:	2301      	movs	r3, #1
 8016e4e:	e7b1      	b.n	8016db4 <_dtoa_r+0x184>
 8016e50:	900f      	str	r0, [sp, #60]	; 0x3c
 8016e52:	e7b0      	b.n	8016db6 <_dtoa_r+0x186>
 8016e54:	9b05      	ldr	r3, [sp, #20]
 8016e56:	eba3 030a 	sub.w	r3, r3, sl
 8016e5a:	9305      	str	r3, [sp, #20]
 8016e5c:	f1ca 0300 	rsb	r3, sl, #0
 8016e60:	9307      	str	r3, [sp, #28]
 8016e62:	2300      	movs	r3, #0
 8016e64:	930e      	str	r3, [sp, #56]	; 0x38
 8016e66:	e7bb      	b.n	8016de0 <_dtoa_r+0x1b0>
 8016e68:	2301      	movs	r3, #1
 8016e6a:	930a      	str	r3, [sp, #40]	; 0x28
 8016e6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016e6e:	2b00      	cmp	r3, #0
 8016e70:	dd59      	ble.n	8016f26 <_dtoa_r+0x2f6>
 8016e72:	9302      	str	r3, [sp, #8]
 8016e74:	4699      	mov	r9, r3
 8016e76:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8016e78:	2200      	movs	r2, #0
 8016e7a:	6072      	str	r2, [r6, #4]
 8016e7c:	2204      	movs	r2, #4
 8016e7e:	f102 0014 	add.w	r0, r2, #20
 8016e82:	4298      	cmp	r0, r3
 8016e84:	6871      	ldr	r1, [r6, #4]
 8016e86:	d953      	bls.n	8016f30 <_dtoa_r+0x300>
 8016e88:	4620      	mov	r0, r4
 8016e8a:	f000 ffeb 	bl	8017e64 <_Balloc>
 8016e8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016e90:	6030      	str	r0, [r6, #0]
 8016e92:	f1b9 0f0e 	cmp.w	r9, #14
 8016e96:	f8d3 b000 	ldr.w	fp, [r3]
 8016e9a:	f200 80e6 	bhi.w	801706a <_dtoa_r+0x43a>
 8016e9e:	2d00      	cmp	r5, #0
 8016ea0:	f000 80e3 	beq.w	801706a <_dtoa_r+0x43a>
 8016ea4:	ed9d 7b00 	vldr	d7, [sp]
 8016ea8:	f1ba 0f00 	cmp.w	sl, #0
 8016eac:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8016eb0:	dd74      	ble.n	8016f9c <_dtoa_r+0x36c>
 8016eb2:	4a2a      	ldr	r2, [pc, #168]	; (8016f5c <_dtoa_r+0x32c>)
 8016eb4:	f00a 030f 	and.w	r3, sl, #15
 8016eb8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8016ebc:	ed93 7b00 	vldr	d7, [r3]
 8016ec0:	ea4f 162a 	mov.w	r6, sl, asr #4
 8016ec4:	06f0      	lsls	r0, r6, #27
 8016ec6:	ed8d 7b08 	vstr	d7, [sp, #32]
 8016eca:	d565      	bpl.n	8016f98 <_dtoa_r+0x368>
 8016ecc:	4b24      	ldr	r3, [pc, #144]	; (8016f60 <_dtoa_r+0x330>)
 8016ece:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8016ed2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8016ed6:	f7e9 fcd1 	bl	800087c <__aeabi_ddiv>
 8016eda:	e9cd 0100 	strd	r0, r1, [sp]
 8016ede:	f006 060f 	and.w	r6, r6, #15
 8016ee2:	2503      	movs	r5, #3
 8016ee4:	4f1e      	ldr	r7, [pc, #120]	; (8016f60 <_dtoa_r+0x330>)
 8016ee6:	e04c      	b.n	8016f82 <_dtoa_r+0x352>
 8016ee8:	2301      	movs	r3, #1
 8016eea:	930a      	str	r3, [sp, #40]	; 0x28
 8016eec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016eee:	4453      	add	r3, sl
 8016ef0:	f103 0901 	add.w	r9, r3, #1
 8016ef4:	9302      	str	r3, [sp, #8]
 8016ef6:	464b      	mov	r3, r9
 8016ef8:	2b01      	cmp	r3, #1
 8016efa:	bfb8      	it	lt
 8016efc:	2301      	movlt	r3, #1
 8016efe:	e7ba      	b.n	8016e76 <_dtoa_r+0x246>
 8016f00:	2300      	movs	r3, #0
 8016f02:	e7b2      	b.n	8016e6a <_dtoa_r+0x23a>
 8016f04:	2300      	movs	r3, #0
 8016f06:	e7f0      	b.n	8016eea <_dtoa_r+0x2ba>
 8016f08:	2501      	movs	r5, #1
 8016f0a:	2300      	movs	r3, #0
 8016f0c:	9306      	str	r3, [sp, #24]
 8016f0e:	950a      	str	r5, [sp, #40]	; 0x28
 8016f10:	f04f 33ff 	mov.w	r3, #4294967295
 8016f14:	9302      	str	r3, [sp, #8]
 8016f16:	4699      	mov	r9, r3
 8016f18:	2200      	movs	r2, #0
 8016f1a:	2312      	movs	r3, #18
 8016f1c:	920b      	str	r2, [sp, #44]	; 0x2c
 8016f1e:	e7aa      	b.n	8016e76 <_dtoa_r+0x246>
 8016f20:	2301      	movs	r3, #1
 8016f22:	930a      	str	r3, [sp, #40]	; 0x28
 8016f24:	e7f4      	b.n	8016f10 <_dtoa_r+0x2e0>
 8016f26:	2301      	movs	r3, #1
 8016f28:	9302      	str	r3, [sp, #8]
 8016f2a:	4699      	mov	r9, r3
 8016f2c:	461a      	mov	r2, r3
 8016f2e:	e7f5      	b.n	8016f1c <_dtoa_r+0x2ec>
 8016f30:	3101      	adds	r1, #1
 8016f32:	6071      	str	r1, [r6, #4]
 8016f34:	0052      	lsls	r2, r2, #1
 8016f36:	e7a2      	b.n	8016e7e <_dtoa_r+0x24e>
 8016f38:	636f4361 	.word	0x636f4361
 8016f3c:	3fd287a7 	.word	0x3fd287a7
 8016f40:	8b60c8b3 	.word	0x8b60c8b3
 8016f44:	3fc68a28 	.word	0x3fc68a28
 8016f48:	509f79fb 	.word	0x509f79fb
 8016f4c:	3fd34413 	.word	0x3fd34413
 8016f50:	7ff00000 	.word	0x7ff00000
 8016f54:	08019e74 	.word	0x08019e74
 8016f58:	3ff80000 	.word	0x3ff80000
 8016f5c:	08019d78 	.word	0x08019d78
 8016f60:	08019d50 	.word	0x08019d50
 8016f64:	08019cd9 	.word	0x08019cd9
 8016f68:	07f1      	lsls	r1, r6, #31
 8016f6a:	d508      	bpl.n	8016f7e <_dtoa_r+0x34e>
 8016f6c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8016f70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016f74:	f7e9 fb58 	bl	8000628 <__aeabi_dmul>
 8016f78:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8016f7c:	3501      	adds	r5, #1
 8016f7e:	1076      	asrs	r6, r6, #1
 8016f80:	3708      	adds	r7, #8
 8016f82:	2e00      	cmp	r6, #0
 8016f84:	d1f0      	bne.n	8016f68 <_dtoa_r+0x338>
 8016f86:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8016f8a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016f8e:	f7e9 fc75 	bl	800087c <__aeabi_ddiv>
 8016f92:	e9cd 0100 	strd	r0, r1, [sp]
 8016f96:	e01a      	b.n	8016fce <_dtoa_r+0x39e>
 8016f98:	2502      	movs	r5, #2
 8016f9a:	e7a3      	b.n	8016ee4 <_dtoa_r+0x2b4>
 8016f9c:	f000 80a0 	beq.w	80170e0 <_dtoa_r+0x4b0>
 8016fa0:	f1ca 0600 	rsb	r6, sl, #0
 8016fa4:	4b9f      	ldr	r3, [pc, #636]	; (8017224 <_dtoa_r+0x5f4>)
 8016fa6:	4fa0      	ldr	r7, [pc, #640]	; (8017228 <_dtoa_r+0x5f8>)
 8016fa8:	f006 020f 	and.w	r2, r6, #15
 8016fac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016fb4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8016fb8:	f7e9 fb36 	bl	8000628 <__aeabi_dmul>
 8016fbc:	e9cd 0100 	strd	r0, r1, [sp]
 8016fc0:	1136      	asrs	r6, r6, #4
 8016fc2:	2300      	movs	r3, #0
 8016fc4:	2502      	movs	r5, #2
 8016fc6:	2e00      	cmp	r6, #0
 8016fc8:	d17f      	bne.n	80170ca <_dtoa_r+0x49a>
 8016fca:	2b00      	cmp	r3, #0
 8016fcc:	d1e1      	bne.n	8016f92 <_dtoa_r+0x362>
 8016fce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016fd0:	2b00      	cmp	r3, #0
 8016fd2:	f000 8087 	beq.w	80170e4 <_dtoa_r+0x4b4>
 8016fd6:	e9dd 6700 	ldrd	r6, r7, [sp]
 8016fda:	2200      	movs	r2, #0
 8016fdc:	4b93      	ldr	r3, [pc, #588]	; (801722c <_dtoa_r+0x5fc>)
 8016fde:	4630      	mov	r0, r6
 8016fe0:	4639      	mov	r1, r7
 8016fe2:	f7e9 fd93 	bl	8000b0c <__aeabi_dcmplt>
 8016fe6:	2800      	cmp	r0, #0
 8016fe8:	d07c      	beq.n	80170e4 <_dtoa_r+0x4b4>
 8016fea:	f1b9 0f00 	cmp.w	r9, #0
 8016fee:	d079      	beq.n	80170e4 <_dtoa_r+0x4b4>
 8016ff0:	9b02      	ldr	r3, [sp, #8]
 8016ff2:	2b00      	cmp	r3, #0
 8016ff4:	dd35      	ble.n	8017062 <_dtoa_r+0x432>
 8016ff6:	f10a 33ff 	add.w	r3, sl, #4294967295
 8016ffa:	9308      	str	r3, [sp, #32]
 8016ffc:	4639      	mov	r1, r7
 8016ffe:	2200      	movs	r2, #0
 8017000:	4b8b      	ldr	r3, [pc, #556]	; (8017230 <_dtoa_r+0x600>)
 8017002:	4630      	mov	r0, r6
 8017004:	f7e9 fb10 	bl	8000628 <__aeabi_dmul>
 8017008:	e9cd 0100 	strd	r0, r1, [sp]
 801700c:	9f02      	ldr	r7, [sp, #8]
 801700e:	3501      	adds	r5, #1
 8017010:	4628      	mov	r0, r5
 8017012:	f7e9 fa9f 	bl	8000554 <__aeabi_i2d>
 8017016:	e9dd 2300 	ldrd	r2, r3, [sp]
 801701a:	f7e9 fb05 	bl	8000628 <__aeabi_dmul>
 801701e:	2200      	movs	r2, #0
 8017020:	4b84      	ldr	r3, [pc, #528]	; (8017234 <_dtoa_r+0x604>)
 8017022:	f7e9 f94b 	bl	80002bc <__adddf3>
 8017026:	4605      	mov	r5, r0
 8017028:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 801702c:	2f00      	cmp	r7, #0
 801702e:	d15d      	bne.n	80170ec <_dtoa_r+0x4bc>
 8017030:	2200      	movs	r2, #0
 8017032:	4b81      	ldr	r3, [pc, #516]	; (8017238 <_dtoa_r+0x608>)
 8017034:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017038:	f7e9 f93e 	bl	80002b8 <__aeabi_dsub>
 801703c:	462a      	mov	r2, r5
 801703e:	4633      	mov	r3, r6
 8017040:	e9cd 0100 	strd	r0, r1, [sp]
 8017044:	f7e9 fd80 	bl	8000b48 <__aeabi_dcmpgt>
 8017048:	2800      	cmp	r0, #0
 801704a:	f040 8288 	bne.w	801755e <_dtoa_r+0x92e>
 801704e:	462a      	mov	r2, r5
 8017050:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8017054:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017058:	f7e9 fd58 	bl	8000b0c <__aeabi_dcmplt>
 801705c:	2800      	cmp	r0, #0
 801705e:	f040 827c 	bne.w	801755a <_dtoa_r+0x92a>
 8017062:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8017066:	e9cd 2300 	strd	r2, r3, [sp]
 801706a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801706c:	2b00      	cmp	r3, #0
 801706e:	f2c0 8150 	blt.w	8017312 <_dtoa_r+0x6e2>
 8017072:	f1ba 0f0e 	cmp.w	sl, #14
 8017076:	f300 814c 	bgt.w	8017312 <_dtoa_r+0x6e2>
 801707a:	4b6a      	ldr	r3, [pc, #424]	; (8017224 <_dtoa_r+0x5f4>)
 801707c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8017080:	ed93 7b00 	vldr	d7, [r3]
 8017084:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017086:	2b00      	cmp	r3, #0
 8017088:	ed8d 7b02 	vstr	d7, [sp, #8]
 801708c:	f280 80d8 	bge.w	8017240 <_dtoa_r+0x610>
 8017090:	f1b9 0f00 	cmp.w	r9, #0
 8017094:	f300 80d4 	bgt.w	8017240 <_dtoa_r+0x610>
 8017098:	f040 825e 	bne.w	8017558 <_dtoa_r+0x928>
 801709c:	2200      	movs	r2, #0
 801709e:	4b66      	ldr	r3, [pc, #408]	; (8017238 <_dtoa_r+0x608>)
 80170a0:	ec51 0b17 	vmov	r0, r1, d7
 80170a4:	f7e9 fac0 	bl	8000628 <__aeabi_dmul>
 80170a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80170ac:	f7e9 fd42 	bl	8000b34 <__aeabi_dcmpge>
 80170b0:	464f      	mov	r7, r9
 80170b2:	464e      	mov	r6, r9
 80170b4:	2800      	cmp	r0, #0
 80170b6:	f040 8234 	bne.w	8017522 <_dtoa_r+0x8f2>
 80170ba:	2331      	movs	r3, #49	; 0x31
 80170bc:	f10b 0501 	add.w	r5, fp, #1
 80170c0:	f88b 3000 	strb.w	r3, [fp]
 80170c4:	f10a 0a01 	add.w	sl, sl, #1
 80170c8:	e22f      	b.n	801752a <_dtoa_r+0x8fa>
 80170ca:	07f2      	lsls	r2, r6, #31
 80170cc:	d505      	bpl.n	80170da <_dtoa_r+0x4aa>
 80170ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80170d2:	f7e9 faa9 	bl	8000628 <__aeabi_dmul>
 80170d6:	3501      	adds	r5, #1
 80170d8:	2301      	movs	r3, #1
 80170da:	1076      	asrs	r6, r6, #1
 80170dc:	3708      	adds	r7, #8
 80170de:	e772      	b.n	8016fc6 <_dtoa_r+0x396>
 80170e0:	2502      	movs	r5, #2
 80170e2:	e774      	b.n	8016fce <_dtoa_r+0x39e>
 80170e4:	f8cd a020 	str.w	sl, [sp, #32]
 80170e8:	464f      	mov	r7, r9
 80170ea:	e791      	b.n	8017010 <_dtoa_r+0x3e0>
 80170ec:	4b4d      	ldr	r3, [pc, #308]	; (8017224 <_dtoa_r+0x5f4>)
 80170ee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80170f2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80170f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80170f8:	2b00      	cmp	r3, #0
 80170fa:	d047      	beq.n	801718c <_dtoa_r+0x55c>
 80170fc:	4602      	mov	r2, r0
 80170fe:	460b      	mov	r3, r1
 8017100:	2000      	movs	r0, #0
 8017102:	494e      	ldr	r1, [pc, #312]	; (801723c <_dtoa_r+0x60c>)
 8017104:	f7e9 fbba 	bl	800087c <__aeabi_ddiv>
 8017108:	462a      	mov	r2, r5
 801710a:	4633      	mov	r3, r6
 801710c:	f7e9 f8d4 	bl	80002b8 <__aeabi_dsub>
 8017110:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017114:	465d      	mov	r5, fp
 8017116:	e9dd 0100 	ldrd	r0, r1, [sp]
 801711a:	f7e9 fd35 	bl	8000b88 <__aeabi_d2iz>
 801711e:	4606      	mov	r6, r0
 8017120:	f7e9 fa18 	bl	8000554 <__aeabi_i2d>
 8017124:	4602      	mov	r2, r0
 8017126:	460b      	mov	r3, r1
 8017128:	e9dd 0100 	ldrd	r0, r1, [sp]
 801712c:	f7e9 f8c4 	bl	80002b8 <__aeabi_dsub>
 8017130:	3630      	adds	r6, #48	; 0x30
 8017132:	f805 6b01 	strb.w	r6, [r5], #1
 8017136:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801713a:	e9cd 0100 	strd	r0, r1, [sp]
 801713e:	f7e9 fce5 	bl	8000b0c <__aeabi_dcmplt>
 8017142:	2800      	cmp	r0, #0
 8017144:	d163      	bne.n	801720e <_dtoa_r+0x5de>
 8017146:	e9dd 2300 	ldrd	r2, r3, [sp]
 801714a:	2000      	movs	r0, #0
 801714c:	4937      	ldr	r1, [pc, #220]	; (801722c <_dtoa_r+0x5fc>)
 801714e:	f7e9 f8b3 	bl	80002b8 <__aeabi_dsub>
 8017152:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8017156:	f7e9 fcd9 	bl	8000b0c <__aeabi_dcmplt>
 801715a:	2800      	cmp	r0, #0
 801715c:	f040 80b7 	bne.w	80172ce <_dtoa_r+0x69e>
 8017160:	eba5 030b 	sub.w	r3, r5, fp
 8017164:	429f      	cmp	r7, r3
 8017166:	f77f af7c 	ble.w	8017062 <_dtoa_r+0x432>
 801716a:	2200      	movs	r2, #0
 801716c:	4b30      	ldr	r3, [pc, #192]	; (8017230 <_dtoa_r+0x600>)
 801716e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017172:	f7e9 fa59 	bl	8000628 <__aeabi_dmul>
 8017176:	2200      	movs	r2, #0
 8017178:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801717c:	4b2c      	ldr	r3, [pc, #176]	; (8017230 <_dtoa_r+0x600>)
 801717e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017182:	f7e9 fa51 	bl	8000628 <__aeabi_dmul>
 8017186:	e9cd 0100 	strd	r0, r1, [sp]
 801718a:	e7c4      	b.n	8017116 <_dtoa_r+0x4e6>
 801718c:	462a      	mov	r2, r5
 801718e:	4633      	mov	r3, r6
 8017190:	f7e9 fa4a 	bl	8000628 <__aeabi_dmul>
 8017194:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017198:	eb0b 0507 	add.w	r5, fp, r7
 801719c:	465e      	mov	r6, fp
 801719e:	e9dd 0100 	ldrd	r0, r1, [sp]
 80171a2:	f7e9 fcf1 	bl	8000b88 <__aeabi_d2iz>
 80171a6:	4607      	mov	r7, r0
 80171a8:	f7e9 f9d4 	bl	8000554 <__aeabi_i2d>
 80171ac:	3730      	adds	r7, #48	; 0x30
 80171ae:	4602      	mov	r2, r0
 80171b0:	460b      	mov	r3, r1
 80171b2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80171b6:	f7e9 f87f 	bl	80002b8 <__aeabi_dsub>
 80171ba:	f806 7b01 	strb.w	r7, [r6], #1
 80171be:	42ae      	cmp	r6, r5
 80171c0:	e9cd 0100 	strd	r0, r1, [sp]
 80171c4:	f04f 0200 	mov.w	r2, #0
 80171c8:	d126      	bne.n	8017218 <_dtoa_r+0x5e8>
 80171ca:	4b1c      	ldr	r3, [pc, #112]	; (801723c <_dtoa_r+0x60c>)
 80171cc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80171d0:	f7e9 f874 	bl	80002bc <__adddf3>
 80171d4:	4602      	mov	r2, r0
 80171d6:	460b      	mov	r3, r1
 80171d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80171dc:	f7e9 fcb4 	bl	8000b48 <__aeabi_dcmpgt>
 80171e0:	2800      	cmp	r0, #0
 80171e2:	d174      	bne.n	80172ce <_dtoa_r+0x69e>
 80171e4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80171e8:	2000      	movs	r0, #0
 80171ea:	4914      	ldr	r1, [pc, #80]	; (801723c <_dtoa_r+0x60c>)
 80171ec:	f7e9 f864 	bl	80002b8 <__aeabi_dsub>
 80171f0:	4602      	mov	r2, r0
 80171f2:	460b      	mov	r3, r1
 80171f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80171f8:	f7e9 fc88 	bl	8000b0c <__aeabi_dcmplt>
 80171fc:	2800      	cmp	r0, #0
 80171fe:	f43f af30 	beq.w	8017062 <_dtoa_r+0x432>
 8017202:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017206:	2b30      	cmp	r3, #48	; 0x30
 8017208:	f105 32ff 	add.w	r2, r5, #4294967295
 801720c:	d002      	beq.n	8017214 <_dtoa_r+0x5e4>
 801720e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8017212:	e04a      	b.n	80172aa <_dtoa_r+0x67a>
 8017214:	4615      	mov	r5, r2
 8017216:	e7f4      	b.n	8017202 <_dtoa_r+0x5d2>
 8017218:	4b05      	ldr	r3, [pc, #20]	; (8017230 <_dtoa_r+0x600>)
 801721a:	f7e9 fa05 	bl	8000628 <__aeabi_dmul>
 801721e:	e9cd 0100 	strd	r0, r1, [sp]
 8017222:	e7bc      	b.n	801719e <_dtoa_r+0x56e>
 8017224:	08019d78 	.word	0x08019d78
 8017228:	08019d50 	.word	0x08019d50
 801722c:	3ff00000 	.word	0x3ff00000
 8017230:	40240000 	.word	0x40240000
 8017234:	401c0000 	.word	0x401c0000
 8017238:	40140000 	.word	0x40140000
 801723c:	3fe00000 	.word	0x3fe00000
 8017240:	e9dd 6700 	ldrd	r6, r7, [sp]
 8017244:	465d      	mov	r5, fp
 8017246:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801724a:	4630      	mov	r0, r6
 801724c:	4639      	mov	r1, r7
 801724e:	f7e9 fb15 	bl	800087c <__aeabi_ddiv>
 8017252:	f7e9 fc99 	bl	8000b88 <__aeabi_d2iz>
 8017256:	4680      	mov	r8, r0
 8017258:	f7e9 f97c 	bl	8000554 <__aeabi_i2d>
 801725c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017260:	f7e9 f9e2 	bl	8000628 <__aeabi_dmul>
 8017264:	4602      	mov	r2, r0
 8017266:	460b      	mov	r3, r1
 8017268:	4630      	mov	r0, r6
 801726a:	4639      	mov	r1, r7
 801726c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8017270:	f7e9 f822 	bl	80002b8 <__aeabi_dsub>
 8017274:	f805 6b01 	strb.w	r6, [r5], #1
 8017278:	eba5 060b 	sub.w	r6, r5, fp
 801727c:	45b1      	cmp	r9, r6
 801727e:	4602      	mov	r2, r0
 8017280:	460b      	mov	r3, r1
 8017282:	d139      	bne.n	80172f8 <_dtoa_r+0x6c8>
 8017284:	f7e9 f81a 	bl	80002bc <__adddf3>
 8017288:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801728c:	4606      	mov	r6, r0
 801728e:	460f      	mov	r7, r1
 8017290:	f7e9 fc5a 	bl	8000b48 <__aeabi_dcmpgt>
 8017294:	b9c8      	cbnz	r0, 80172ca <_dtoa_r+0x69a>
 8017296:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801729a:	4630      	mov	r0, r6
 801729c:	4639      	mov	r1, r7
 801729e:	f7e9 fc2b 	bl	8000af8 <__aeabi_dcmpeq>
 80172a2:	b110      	cbz	r0, 80172aa <_dtoa_r+0x67a>
 80172a4:	f018 0f01 	tst.w	r8, #1
 80172a8:	d10f      	bne.n	80172ca <_dtoa_r+0x69a>
 80172aa:	9904      	ldr	r1, [sp, #16]
 80172ac:	4620      	mov	r0, r4
 80172ae:	f000 fe0d 	bl	8017ecc <_Bfree>
 80172b2:	2300      	movs	r3, #0
 80172b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80172b6:	702b      	strb	r3, [r5, #0]
 80172b8:	f10a 0301 	add.w	r3, sl, #1
 80172bc:	6013      	str	r3, [r2, #0]
 80172be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80172c0:	2b00      	cmp	r3, #0
 80172c2:	f000 8241 	beq.w	8017748 <_dtoa_r+0xb18>
 80172c6:	601d      	str	r5, [r3, #0]
 80172c8:	e23e      	b.n	8017748 <_dtoa_r+0xb18>
 80172ca:	f8cd a020 	str.w	sl, [sp, #32]
 80172ce:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80172d2:	2a39      	cmp	r2, #57	; 0x39
 80172d4:	f105 33ff 	add.w	r3, r5, #4294967295
 80172d8:	d108      	bne.n	80172ec <_dtoa_r+0x6bc>
 80172da:	459b      	cmp	fp, r3
 80172dc:	d10a      	bne.n	80172f4 <_dtoa_r+0x6c4>
 80172de:	9b08      	ldr	r3, [sp, #32]
 80172e0:	3301      	adds	r3, #1
 80172e2:	9308      	str	r3, [sp, #32]
 80172e4:	2330      	movs	r3, #48	; 0x30
 80172e6:	f88b 3000 	strb.w	r3, [fp]
 80172ea:	465b      	mov	r3, fp
 80172ec:	781a      	ldrb	r2, [r3, #0]
 80172ee:	3201      	adds	r2, #1
 80172f0:	701a      	strb	r2, [r3, #0]
 80172f2:	e78c      	b.n	801720e <_dtoa_r+0x5de>
 80172f4:	461d      	mov	r5, r3
 80172f6:	e7ea      	b.n	80172ce <_dtoa_r+0x69e>
 80172f8:	2200      	movs	r2, #0
 80172fa:	4b9b      	ldr	r3, [pc, #620]	; (8017568 <_dtoa_r+0x938>)
 80172fc:	f7e9 f994 	bl	8000628 <__aeabi_dmul>
 8017300:	2200      	movs	r2, #0
 8017302:	2300      	movs	r3, #0
 8017304:	4606      	mov	r6, r0
 8017306:	460f      	mov	r7, r1
 8017308:	f7e9 fbf6 	bl	8000af8 <__aeabi_dcmpeq>
 801730c:	2800      	cmp	r0, #0
 801730e:	d09a      	beq.n	8017246 <_dtoa_r+0x616>
 8017310:	e7cb      	b.n	80172aa <_dtoa_r+0x67a>
 8017312:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017314:	2a00      	cmp	r2, #0
 8017316:	f000 808b 	beq.w	8017430 <_dtoa_r+0x800>
 801731a:	9a06      	ldr	r2, [sp, #24]
 801731c:	2a01      	cmp	r2, #1
 801731e:	dc6e      	bgt.n	80173fe <_dtoa_r+0x7ce>
 8017320:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017322:	2a00      	cmp	r2, #0
 8017324:	d067      	beq.n	80173f6 <_dtoa_r+0x7c6>
 8017326:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801732a:	9f07      	ldr	r7, [sp, #28]
 801732c:	9d05      	ldr	r5, [sp, #20]
 801732e:	9a05      	ldr	r2, [sp, #20]
 8017330:	2101      	movs	r1, #1
 8017332:	441a      	add	r2, r3
 8017334:	4620      	mov	r0, r4
 8017336:	9205      	str	r2, [sp, #20]
 8017338:	4498      	add	r8, r3
 801733a:	f000 fea5 	bl	8018088 <__i2b>
 801733e:	4606      	mov	r6, r0
 8017340:	2d00      	cmp	r5, #0
 8017342:	dd0c      	ble.n	801735e <_dtoa_r+0x72e>
 8017344:	f1b8 0f00 	cmp.w	r8, #0
 8017348:	dd09      	ble.n	801735e <_dtoa_r+0x72e>
 801734a:	4545      	cmp	r5, r8
 801734c:	9a05      	ldr	r2, [sp, #20]
 801734e:	462b      	mov	r3, r5
 8017350:	bfa8      	it	ge
 8017352:	4643      	movge	r3, r8
 8017354:	1ad2      	subs	r2, r2, r3
 8017356:	9205      	str	r2, [sp, #20]
 8017358:	1aed      	subs	r5, r5, r3
 801735a:	eba8 0803 	sub.w	r8, r8, r3
 801735e:	9b07      	ldr	r3, [sp, #28]
 8017360:	b1eb      	cbz	r3, 801739e <_dtoa_r+0x76e>
 8017362:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017364:	2b00      	cmp	r3, #0
 8017366:	d067      	beq.n	8017438 <_dtoa_r+0x808>
 8017368:	b18f      	cbz	r7, 801738e <_dtoa_r+0x75e>
 801736a:	4631      	mov	r1, r6
 801736c:	463a      	mov	r2, r7
 801736e:	4620      	mov	r0, r4
 8017370:	f000 ff2a 	bl	80181c8 <__pow5mult>
 8017374:	9a04      	ldr	r2, [sp, #16]
 8017376:	4601      	mov	r1, r0
 8017378:	4606      	mov	r6, r0
 801737a:	4620      	mov	r0, r4
 801737c:	f000 fe8d 	bl	801809a <__multiply>
 8017380:	9904      	ldr	r1, [sp, #16]
 8017382:	9008      	str	r0, [sp, #32]
 8017384:	4620      	mov	r0, r4
 8017386:	f000 fda1 	bl	8017ecc <_Bfree>
 801738a:	9b08      	ldr	r3, [sp, #32]
 801738c:	9304      	str	r3, [sp, #16]
 801738e:	9b07      	ldr	r3, [sp, #28]
 8017390:	1bda      	subs	r2, r3, r7
 8017392:	d004      	beq.n	801739e <_dtoa_r+0x76e>
 8017394:	9904      	ldr	r1, [sp, #16]
 8017396:	4620      	mov	r0, r4
 8017398:	f000 ff16 	bl	80181c8 <__pow5mult>
 801739c:	9004      	str	r0, [sp, #16]
 801739e:	2101      	movs	r1, #1
 80173a0:	4620      	mov	r0, r4
 80173a2:	f000 fe71 	bl	8018088 <__i2b>
 80173a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80173a8:	4607      	mov	r7, r0
 80173aa:	2b00      	cmp	r3, #0
 80173ac:	f000 81d0 	beq.w	8017750 <_dtoa_r+0xb20>
 80173b0:	461a      	mov	r2, r3
 80173b2:	4601      	mov	r1, r0
 80173b4:	4620      	mov	r0, r4
 80173b6:	f000 ff07 	bl	80181c8 <__pow5mult>
 80173ba:	9b06      	ldr	r3, [sp, #24]
 80173bc:	2b01      	cmp	r3, #1
 80173be:	4607      	mov	r7, r0
 80173c0:	dc40      	bgt.n	8017444 <_dtoa_r+0x814>
 80173c2:	9b00      	ldr	r3, [sp, #0]
 80173c4:	2b00      	cmp	r3, #0
 80173c6:	d139      	bne.n	801743c <_dtoa_r+0x80c>
 80173c8:	9b01      	ldr	r3, [sp, #4]
 80173ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80173ce:	2b00      	cmp	r3, #0
 80173d0:	d136      	bne.n	8017440 <_dtoa_r+0x810>
 80173d2:	9b01      	ldr	r3, [sp, #4]
 80173d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80173d8:	0d1b      	lsrs	r3, r3, #20
 80173da:	051b      	lsls	r3, r3, #20
 80173dc:	b12b      	cbz	r3, 80173ea <_dtoa_r+0x7ba>
 80173de:	9b05      	ldr	r3, [sp, #20]
 80173e0:	3301      	adds	r3, #1
 80173e2:	9305      	str	r3, [sp, #20]
 80173e4:	f108 0801 	add.w	r8, r8, #1
 80173e8:	2301      	movs	r3, #1
 80173ea:	9307      	str	r3, [sp, #28]
 80173ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80173ee:	2b00      	cmp	r3, #0
 80173f0:	d12a      	bne.n	8017448 <_dtoa_r+0x818>
 80173f2:	2001      	movs	r0, #1
 80173f4:	e030      	b.n	8017458 <_dtoa_r+0x828>
 80173f6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80173f8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80173fc:	e795      	b.n	801732a <_dtoa_r+0x6fa>
 80173fe:	9b07      	ldr	r3, [sp, #28]
 8017400:	f109 37ff 	add.w	r7, r9, #4294967295
 8017404:	42bb      	cmp	r3, r7
 8017406:	bfbf      	itttt	lt
 8017408:	9b07      	ldrlt	r3, [sp, #28]
 801740a:	9707      	strlt	r7, [sp, #28]
 801740c:	1afa      	sublt	r2, r7, r3
 801740e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8017410:	bfbb      	ittet	lt
 8017412:	189b      	addlt	r3, r3, r2
 8017414:	930e      	strlt	r3, [sp, #56]	; 0x38
 8017416:	1bdf      	subge	r7, r3, r7
 8017418:	2700      	movlt	r7, #0
 801741a:	f1b9 0f00 	cmp.w	r9, #0
 801741e:	bfb5      	itete	lt
 8017420:	9b05      	ldrlt	r3, [sp, #20]
 8017422:	9d05      	ldrge	r5, [sp, #20]
 8017424:	eba3 0509 	sublt.w	r5, r3, r9
 8017428:	464b      	movge	r3, r9
 801742a:	bfb8      	it	lt
 801742c:	2300      	movlt	r3, #0
 801742e:	e77e      	b.n	801732e <_dtoa_r+0x6fe>
 8017430:	9f07      	ldr	r7, [sp, #28]
 8017432:	9d05      	ldr	r5, [sp, #20]
 8017434:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8017436:	e783      	b.n	8017340 <_dtoa_r+0x710>
 8017438:	9a07      	ldr	r2, [sp, #28]
 801743a:	e7ab      	b.n	8017394 <_dtoa_r+0x764>
 801743c:	2300      	movs	r3, #0
 801743e:	e7d4      	b.n	80173ea <_dtoa_r+0x7ba>
 8017440:	9b00      	ldr	r3, [sp, #0]
 8017442:	e7d2      	b.n	80173ea <_dtoa_r+0x7ba>
 8017444:	2300      	movs	r3, #0
 8017446:	9307      	str	r3, [sp, #28]
 8017448:	693b      	ldr	r3, [r7, #16]
 801744a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 801744e:	6918      	ldr	r0, [r3, #16]
 8017450:	f000 fdcc 	bl	8017fec <__hi0bits>
 8017454:	f1c0 0020 	rsb	r0, r0, #32
 8017458:	4440      	add	r0, r8
 801745a:	f010 001f 	ands.w	r0, r0, #31
 801745e:	d047      	beq.n	80174f0 <_dtoa_r+0x8c0>
 8017460:	f1c0 0320 	rsb	r3, r0, #32
 8017464:	2b04      	cmp	r3, #4
 8017466:	dd3b      	ble.n	80174e0 <_dtoa_r+0x8b0>
 8017468:	9b05      	ldr	r3, [sp, #20]
 801746a:	f1c0 001c 	rsb	r0, r0, #28
 801746e:	4403      	add	r3, r0
 8017470:	9305      	str	r3, [sp, #20]
 8017472:	4405      	add	r5, r0
 8017474:	4480      	add	r8, r0
 8017476:	9b05      	ldr	r3, [sp, #20]
 8017478:	2b00      	cmp	r3, #0
 801747a:	dd05      	ble.n	8017488 <_dtoa_r+0x858>
 801747c:	461a      	mov	r2, r3
 801747e:	9904      	ldr	r1, [sp, #16]
 8017480:	4620      	mov	r0, r4
 8017482:	f000 feef 	bl	8018264 <__lshift>
 8017486:	9004      	str	r0, [sp, #16]
 8017488:	f1b8 0f00 	cmp.w	r8, #0
 801748c:	dd05      	ble.n	801749a <_dtoa_r+0x86a>
 801748e:	4639      	mov	r1, r7
 8017490:	4642      	mov	r2, r8
 8017492:	4620      	mov	r0, r4
 8017494:	f000 fee6 	bl	8018264 <__lshift>
 8017498:	4607      	mov	r7, r0
 801749a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801749c:	b353      	cbz	r3, 80174f4 <_dtoa_r+0x8c4>
 801749e:	4639      	mov	r1, r7
 80174a0:	9804      	ldr	r0, [sp, #16]
 80174a2:	f000 ff33 	bl	801830c <__mcmp>
 80174a6:	2800      	cmp	r0, #0
 80174a8:	da24      	bge.n	80174f4 <_dtoa_r+0x8c4>
 80174aa:	2300      	movs	r3, #0
 80174ac:	220a      	movs	r2, #10
 80174ae:	9904      	ldr	r1, [sp, #16]
 80174b0:	4620      	mov	r0, r4
 80174b2:	f000 fd22 	bl	8017efa <__multadd>
 80174b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80174b8:	9004      	str	r0, [sp, #16]
 80174ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 80174be:	2b00      	cmp	r3, #0
 80174c0:	f000 814d 	beq.w	801775e <_dtoa_r+0xb2e>
 80174c4:	2300      	movs	r3, #0
 80174c6:	4631      	mov	r1, r6
 80174c8:	220a      	movs	r2, #10
 80174ca:	4620      	mov	r0, r4
 80174cc:	f000 fd15 	bl	8017efa <__multadd>
 80174d0:	9b02      	ldr	r3, [sp, #8]
 80174d2:	2b00      	cmp	r3, #0
 80174d4:	4606      	mov	r6, r0
 80174d6:	dc4f      	bgt.n	8017578 <_dtoa_r+0x948>
 80174d8:	9b06      	ldr	r3, [sp, #24]
 80174da:	2b02      	cmp	r3, #2
 80174dc:	dd4c      	ble.n	8017578 <_dtoa_r+0x948>
 80174de:	e011      	b.n	8017504 <_dtoa_r+0x8d4>
 80174e0:	d0c9      	beq.n	8017476 <_dtoa_r+0x846>
 80174e2:	9a05      	ldr	r2, [sp, #20]
 80174e4:	331c      	adds	r3, #28
 80174e6:	441a      	add	r2, r3
 80174e8:	9205      	str	r2, [sp, #20]
 80174ea:	441d      	add	r5, r3
 80174ec:	4498      	add	r8, r3
 80174ee:	e7c2      	b.n	8017476 <_dtoa_r+0x846>
 80174f0:	4603      	mov	r3, r0
 80174f2:	e7f6      	b.n	80174e2 <_dtoa_r+0x8b2>
 80174f4:	f1b9 0f00 	cmp.w	r9, #0
 80174f8:	dc38      	bgt.n	801756c <_dtoa_r+0x93c>
 80174fa:	9b06      	ldr	r3, [sp, #24]
 80174fc:	2b02      	cmp	r3, #2
 80174fe:	dd35      	ble.n	801756c <_dtoa_r+0x93c>
 8017500:	f8cd 9008 	str.w	r9, [sp, #8]
 8017504:	9b02      	ldr	r3, [sp, #8]
 8017506:	b963      	cbnz	r3, 8017522 <_dtoa_r+0x8f2>
 8017508:	4639      	mov	r1, r7
 801750a:	2205      	movs	r2, #5
 801750c:	4620      	mov	r0, r4
 801750e:	f000 fcf4 	bl	8017efa <__multadd>
 8017512:	4601      	mov	r1, r0
 8017514:	4607      	mov	r7, r0
 8017516:	9804      	ldr	r0, [sp, #16]
 8017518:	f000 fef8 	bl	801830c <__mcmp>
 801751c:	2800      	cmp	r0, #0
 801751e:	f73f adcc 	bgt.w	80170ba <_dtoa_r+0x48a>
 8017522:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017524:	465d      	mov	r5, fp
 8017526:	ea6f 0a03 	mvn.w	sl, r3
 801752a:	f04f 0900 	mov.w	r9, #0
 801752e:	4639      	mov	r1, r7
 8017530:	4620      	mov	r0, r4
 8017532:	f000 fccb 	bl	8017ecc <_Bfree>
 8017536:	2e00      	cmp	r6, #0
 8017538:	f43f aeb7 	beq.w	80172aa <_dtoa_r+0x67a>
 801753c:	f1b9 0f00 	cmp.w	r9, #0
 8017540:	d005      	beq.n	801754e <_dtoa_r+0x91e>
 8017542:	45b1      	cmp	r9, r6
 8017544:	d003      	beq.n	801754e <_dtoa_r+0x91e>
 8017546:	4649      	mov	r1, r9
 8017548:	4620      	mov	r0, r4
 801754a:	f000 fcbf 	bl	8017ecc <_Bfree>
 801754e:	4631      	mov	r1, r6
 8017550:	4620      	mov	r0, r4
 8017552:	f000 fcbb 	bl	8017ecc <_Bfree>
 8017556:	e6a8      	b.n	80172aa <_dtoa_r+0x67a>
 8017558:	2700      	movs	r7, #0
 801755a:	463e      	mov	r6, r7
 801755c:	e7e1      	b.n	8017522 <_dtoa_r+0x8f2>
 801755e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8017562:	463e      	mov	r6, r7
 8017564:	e5a9      	b.n	80170ba <_dtoa_r+0x48a>
 8017566:	bf00      	nop
 8017568:	40240000 	.word	0x40240000
 801756c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801756e:	f8cd 9008 	str.w	r9, [sp, #8]
 8017572:	2b00      	cmp	r3, #0
 8017574:	f000 80fa 	beq.w	801776c <_dtoa_r+0xb3c>
 8017578:	2d00      	cmp	r5, #0
 801757a:	dd05      	ble.n	8017588 <_dtoa_r+0x958>
 801757c:	4631      	mov	r1, r6
 801757e:	462a      	mov	r2, r5
 8017580:	4620      	mov	r0, r4
 8017582:	f000 fe6f 	bl	8018264 <__lshift>
 8017586:	4606      	mov	r6, r0
 8017588:	9b07      	ldr	r3, [sp, #28]
 801758a:	2b00      	cmp	r3, #0
 801758c:	d04c      	beq.n	8017628 <_dtoa_r+0x9f8>
 801758e:	6871      	ldr	r1, [r6, #4]
 8017590:	4620      	mov	r0, r4
 8017592:	f000 fc67 	bl	8017e64 <_Balloc>
 8017596:	6932      	ldr	r2, [r6, #16]
 8017598:	3202      	adds	r2, #2
 801759a:	4605      	mov	r5, r0
 801759c:	0092      	lsls	r2, r2, #2
 801759e:	f106 010c 	add.w	r1, r6, #12
 80175a2:	300c      	adds	r0, #12
 80175a4:	f7fd fd08 	bl	8014fb8 <memcpy>
 80175a8:	2201      	movs	r2, #1
 80175aa:	4629      	mov	r1, r5
 80175ac:	4620      	mov	r0, r4
 80175ae:	f000 fe59 	bl	8018264 <__lshift>
 80175b2:	9b00      	ldr	r3, [sp, #0]
 80175b4:	f8cd b014 	str.w	fp, [sp, #20]
 80175b8:	f003 0301 	and.w	r3, r3, #1
 80175bc:	46b1      	mov	r9, r6
 80175be:	9307      	str	r3, [sp, #28]
 80175c0:	4606      	mov	r6, r0
 80175c2:	4639      	mov	r1, r7
 80175c4:	9804      	ldr	r0, [sp, #16]
 80175c6:	f7ff faa5 	bl	8016b14 <quorem>
 80175ca:	4649      	mov	r1, r9
 80175cc:	4605      	mov	r5, r0
 80175ce:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80175d2:	9804      	ldr	r0, [sp, #16]
 80175d4:	f000 fe9a 	bl	801830c <__mcmp>
 80175d8:	4632      	mov	r2, r6
 80175da:	9000      	str	r0, [sp, #0]
 80175dc:	4639      	mov	r1, r7
 80175de:	4620      	mov	r0, r4
 80175e0:	f000 feae 	bl	8018340 <__mdiff>
 80175e4:	68c3      	ldr	r3, [r0, #12]
 80175e6:	4602      	mov	r2, r0
 80175e8:	bb03      	cbnz	r3, 801762c <_dtoa_r+0x9fc>
 80175ea:	4601      	mov	r1, r0
 80175ec:	9008      	str	r0, [sp, #32]
 80175ee:	9804      	ldr	r0, [sp, #16]
 80175f0:	f000 fe8c 	bl	801830c <__mcmp>
 80175f4:	9a08      	ldr	r2, [sp, #32]
 80175f6:	4603      	mov	r3, r0
 80175f8:	4611      	mov	r1, r2
 80175fa:	4620      	mov	r0, r4
 80175fc:	9308      	str	r3, [sp, #32]
 80175fe:	f000 fc65 	bl	8017ecc <_Bfree>
 8017602:	9b08      	ldr	r3, [sp, #32]
 8017604:	b9a3      	cbnz	r3, 8017630 <_dtoa_r+0xa00>
 8017606:	9a06      	ldr	r2, [sp, #24]
 8017608:	b992      	cbnz	r2, 8017630 <_dtoa_r+0xa00>
 801760a:	9a07      	ldr	r2, [sp, #28]
 801760c:	b982      	cbnz	r2, 8017630 <_dtoa_r+0xa00>
 801760e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8017612:	d029      	beq.n	8017668 <_dtoa_r+0xa38>
 8017614:	9b00      	ldr	r3, [sp, #0]
 8017616:	2b00      	cmp	r3, #0
 8017618:	dd01      	ble.n	801761e <_dtoa_r+0x9ee>
 801761a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 801761e:	9b05      	ldr	r3, [sp, #20]
 8017620:	1c5d      	adds	r5, r3, #1
 8017622:	f883 8000 	strb.w	r8, [r3]
 8017626:	e782      	b.n	801752e <_dtoa_r+0x8fe>
 8017628:	4630      	mov	r0, r6
 801762a:	e7c2      	b.n	80175b2 <_dtoa_r+0x982>
 801762c:	2301      	movs	r3, #1
 801762e:	e7e3      	b.n	80175f8 <_dtoa_r+0x9c8>
 8017630:	9a00      	ldr	r2, [sp, #0]
 8017632:	2a00      	cmp	r2, #0
 8017634:	db04      	blt.n	8017640 <_dtoa_r+0xa10>
 8017636:	d125      	bne.n	8017684 <_dtoa_r+0xa54>
 8017638:	9a06      	ldr	r2, [sp, #24]
 801763a:	bb1a      	cbnz	r2, 8017684 <_dtoa_r+0xa54>
 801763c:	9a07      	ldr	r2, [sp, #28]
 801763e:	bb0a      	cbnz	r2, 8017684 <_dtoa_r+0xa54>
 8017640:	2b00      	cmp	r3, #0
 8017642:	ddec      	ble.n	801761e <_dtoa_r+0x9ee>
 8017644:	2201      	movs	r2, #1
 8017646:	9904      	ldr	r1, [sp, #16]
 8017648:	4620      	mov	r0, r4
 801764a:	f000 fe0b 	bl	8018264 <__lshift>
 801764e:	4639      	mov	r1, r7
 8017650:	9004      	str	r0, [sp, #16]
 8017652:	f000 fe5b 	bl	801830c <__mcmp>
 8017656:	2800      	cmp	r0, #0
 8017658:	dc03      	bgt.n	8017662 <_dtoa_r+0xa32>
 801765a:	d1e0      	bne.n	801761e <_dtoa_r+0x9ee>
 801765c:	f018 0f01 	tst.w	r8, #1
 8017660:	d0dd      	beq.n	801761e <_dtoa_r+0x9ee>
 8017662:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8017666:	d1d8      	bne.n	801761a <_dtoa_r+0x9ea>
 8017668:	9b05      	ldr	r3, [sp, #20]
 801766a:	9a05      	ldr	r2, [sp, #20]
 801766c:	1c5d      	adds	r5, r3, #1
 801766e:	2339      	movs	r3, #57	; 0x39
 8017670:	7013      	strb	r3, [r2, #0]
 8017672:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017676:	2b39      	cmp	r3, #57	; 0x39
 8017678:	f105 32ff 	add.w	r2, r5, #4294967295
 801767c:	d04f      	beq.n	801771e <_dtoa_r+0xaee>
 801767e:	3301      	adds	r3, #1
 8017680:	7013      	strb	r3, [r2, #0]
 8017682:	e754      	b.n	801752e <_dtoa_r+0x8fe>
 8017684:	9a05      	ldr	r2, [sp, #20]
 8017686:	2b00      	cmp	r3, #0
 8017688:	f102 0501 	add.w	r5, r2, #1
 801768c:	dd06      	ble.n	801769c <_dtoa_r+0xa6c>
 801768e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8017692:	d0e9      	beq.n	8017668 <_dtoa_r+0xa38>
 8017694:	f108 0801 	add.w	r8, r8, #1
 8017698:	9b05      	ldr	r3, [sp, #20]
 801769a:	e7c2      	b.n	8017622 <_dtoa_r+0x9f2>
 801769c:	9a02      	ldr	r2, [sp, #8]
 801769e:	f805 8c01 	strb.w	r8, [r5, #-1]
 80176a2:	eba5 030b 	sub.w	r3, r5, fp
 80176a6:	4293      	cmp	r3, r2
 80176a8:	d021      	beq.n	80176ee <_dtoa_r+0xabe>
 80176aa:	2300      	movs	r3, #0
 80176ac:	220a      	movs	r2, #10
 80176ae:	9904      	ldr	r1, [sp, #16]
 80176b0:	4620      	mov	r0, r4
 80176b2:	f000 fc22 	bl	8017efa <__multadd>
 80176b6:	45b1      	cmp	r9, r6
 80176b8:	9004      	str	r0, [sp, #16]
 80176ba:	f04f 0300 	mov.w	r3, #0
 80176be:	f04f 020a 	mov.w	r2, #10
 80176c2:	4649      	mov	r1, r9
 80176c4:	4620      	mov	r0, r4
 80176c6:	d105      	bne.n	80176d4 <_dtoa_r+0xaa4>
 80176c8:	f000 fc17 	bl	8017efa <__multadd>
 80176cc:	4681      	mov	r9, r0
 80176ce:	4606      	mov	r6, r0
 80176d0:	9505      	str	r5, [sp, #20]
 80176d2:	e776      	b.n	80175c2 <_dtoa_r+0x992>
 80176d4:	f000 fc11 	bl	8017efa <__multadd>
 80176d8:	4631      	mov	r1, r6
 80176da:	4681      	mov	r9, r0
 80176dc:	2300      	movs	r3, #0
 80176de:	220a      	movs	r2, #10
 80176e0:	4620      	mov	r0, r4
 80176e2:	f000 fc0a 	bl	8017efa <__multadd>
 80176e6:	4606      	mov	r6, r0
 80176e8:	e7f2      	b.n	80176d0 <_dtoa_r+0xaa0>
 80176ea:	f04f 0900 	mov.w	r9, #0
 80176ee:	2201      	movs	r2, #1
 80176f0:	9904      	ldr	r1, [sp, #16]
 80176f2:	4620      	mov	r0, r4
 80176f4:	f000 fdb6 	bl	8018264 <__lshift>
 80176f8:	4639      	mov	r1, r7
 80176fa:	9004      	str	r0, [sp, #16]
 80176fc:	f000 fe06 	bl	801830c <__mcmp>
 8017700:	2800      	cmp	r0, #0
 8017702:	dcb6      	bgt.n	8017672 <_dtoa_r+0xa42>
 8017704:	d102      	bne.n	801770c <_dtoa_r+0xadc>
 8017706:	f018 0f01 	tst.w	r8, #1
 801770a:	d1b2      	bne.n	8017672 <_dtoa_r+0xa42>
 801770c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017710:	2b30      	cmp	r3, #48	; 0x30
 8017712:	f105 32ff 	add.w	r2, r5, #4294967295
 8017716:	f47f af0a 	bne.w	801752e <_dtoa_r+0x8fe>
 801771a:	4615      	mov	r5, r2
 801771c:	e7f6      	b.n	801770c <_dtoa_r+0xadc>
 801771e:	4593      	cmp	fp, r2
 8017720:	d105      	bne.n	801772e <_dtoa_r+0xafe>
 8017722:	2331      	movs	r3, #49	; 0x31
 8017724:	f10a 0a01 	add.w	sl, sl, #1
 8017728:	f88b 3000 	strb.w	r3, [fp]
 801772c:	e6ff      	b.n	801752e <_dtoa_r+0x8fe>
 801772e:	4615      	mov	r5, r2
 8017730:	e79f      	b.n	8017672 <_dtoa_r+0xa42>
 8017732:	f8df b064 	ldr.w	fp, [pc, #100]	; 8017798 <_dtoa_r+0xb68>
 8017736:	e007      	b.n	8017748 <_dtoa_r+0xb18>
 8017738:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801773a:	f8df b060 	ldr.w	fp, [pc, #96]	; 801779c <_dtoa_r+0xb6c>
 801773e:	b11b      	cbz	r3, 8017748 <_dtoa_r+0xb18>
 8017740:	f10b 0308 	add.w	r3, fp, #8
 8017744:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017746:	6013      	str	r3, [r2, #0]
 8017748:	4658      	mov	r0, fp
 801774a:	b017      	add	sp, #92	; 0x5c
 801774c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017750:	9b06      	ldr	r3, [sp, #24]
 8017752:	2b01      	cmp	r3, #1
 8017754:	f77f ae35 	ble.w	80173c2 <_dtoa_r+0x792>
 8017758:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801775a:	9307      	str	r3, [sp, #28]
 801775c:	e649      	b.n	80173f2 <_dtoa_r+0x7c2>
 801775e:	9b02      	ldr	r3, [sp, #8]
 8017760:	2b00      	cmp	r3, #0
 8017762:	dc03      	bgt.n	801776c <_dtoa_r+0xb3c>
 8017764:	9b06      	ldr	r3, [sp, #24]
 8017766:	2b02      	cmp	r3, #2
 8017768:	f73f aecc 	bgt.w	8017504 <_dtoa_r+0x8d4>
 801776c:	465d      	mov	r5, fp
 801776e:	4639      	mov	r1, r7
 8017770:	9804      	ldr	r0, [sp, #16]
 8017772:	f7ff f9cf 	bl	8016b14 <quorem>
 8017776:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801777a:	f805 8b01 	strb.w	r8, [r5], #1
 801777e:	9a02      	ldr	r2, [sp, #8]
 8017780:	eba5 030b 	sub.w	r3, r5, fp
 8017784:	429a      	cmp	r2, r3
 8017786:	ddb0      	ble.n	80176ea <_dtoa_r+0xaba>
 8017788:	2300      	movs	r3, #0
 801778a:	220a      	movs	r2, #10
 801778c:	9904      	ldr	r1, [sp, #16]
 801778e:	4620      	mov	r0, r4
 8017790:	f000 fbb3 	bl	8017efa <__multadd>
 8017794:	9004      	str	r0, [sp, #16]
 8017796:	e7ea      	b.n	801776e <_dtoa_r+0xb3e>
 8017798:	08019e73 	.word	0x08019e73
 801779c:	08019cd0 	.word	0x08019cd0

080177a0 <rshift>:
 80177a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80177a2:	6906      	ldr	r6, [r0, #16]
 80177a4:	114b      	asrs	r3, r1, #5
 80177a6:	429e      	cmp	r6, r3
 80177a8:	f100 0414 	add.w	r4, r0, #20
 80177ac:	dd30      	ble.n	8017810 <rshift+0x70>
 80177ae:	f011 011f 	ands.w	r1, r1, #31
 80177b2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80177b6:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80177ba:	d108      	bne.n	80177ce <rshift+0x2e>
 80177bc:	4621      	mov	r1, r4
 80177be:	42b2      	cmp	r2, r6
 80177c0:	460b      	mov	r3, r1
 80177c2:	d211      	bcs.n	80177e8 <rshift+0x48>
 80177c4:	f852 3b04 	ldr.w	r3, [r2], #4
 80177c8:	f841 3b04 	str.w	r3, [r1], #4
 80177cc:	e7f7      	b.n	80177be <rshift+0x1e>
 80177ce:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 80177d2:	f1c1 0c20 	rsb	ip, r1, #32
 80177d6:	40cd      	lsrs	r5, r1
 80177d8:	3204      	adds	r2, #4
 80177da:	4623      	mov	r3, r4
 80177dc:	42b2      	cmp	r2, r6
 80177de:	4617      	mov	r7, r2
 80177e0:	d30c      	bcc.n	80177fc <rshift+0x5c>
 80177e2:	601d      	str	r5, [r3, #0]
 80177e4:	b105      	cbz	r5, 80177e8 <rshift+0x48>
 80177e6:	3304      	adds	r3, #4
 80177e8:	1b1a      	subs	r2, r3, r4
 80177ea:	42a3      	cmp	r3, r4
 80177ec:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80177f0:	bf08      	it	eq
 80177f2:	2300      	moveq	r3, #0
 80177f4:	6102      	str	r2, [r0, #16]
 80177f6:	bf08      	it	eq
 80177f8:	6143      	streq	r3, [r0, #20]
 80177fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80177fc:	683f      	ldr	r7, [r7, #0]
 80177fe:	fa07 f70c 	lsl.w	r7, r7, ip
 8017802:	433d      	orrs	r5, r7
 8017804:	f843 5b04 	str.w	r5, [r3], #4
 8017808:	f852 5b04 	ldr.w	r5, [r2], #4
 801780c:	40cd      	lsrs	r5, r1
 801780e:	e7e5      	b.n	80177dc <rshift+0x3c>
 8017810:	4623      	mov	r3, r4
 8017812:	e7e9      	b.n	80177e8 <rshift+0x48>

08017814 <__hexdig_fun>:
 8017814:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8017818:	2b09      	cmp	r3, #9
 801781a:	d802      	bhi.n	8017822 <__hexdig_fun+0xe>
 801781c:	3820      	subs	r0, #32
 801781e:	b2c0      	uxtb	r0, r0
 8017820:	4770      	bx	lr
 8017822:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8017826:	2b05      	cmp	r3, #5
 8017828:	d801      	bhi.n	801782e <__hexdig_fun+0x1a>
 801782a:	3847      	subs	r0, #71	; 0x47
 801782c:	e7f7      	b.n	801781e <__hexdig_fun+0xa>
 801782e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8017832:	2b05      	cmp	r3, #5
 8017834:	d801      	bhi.n	801783a <__hexdig_fun+0x26>
 8017836:	3827      	subs	r0, #39	; 0x27
 8017838:	e7f1      	b.n	801781e <__hexdig_fun+0xa>
 801783a:	2000      	movs	r0, #0
 801783c:	4770      	bx	lr

0801783e <__gethex>:
 801783e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017842:	b08b      	sub	sp, #44	; 0x2c
 8017844:	468a      	mov	sl, r1
 8017846:	9002      	str	r0, [sp, #8]
 8017848:	9816      	ldr	r0, [sp, #88]	; 0x58
 801784a:	9306      	str	r3, [sp, #24]
 801784c:	4690      	mov	r8, r2
 801784e:	f000 fadf 	bl	8017e10 <__localeconv_l>
 8017852:	6803      	ldr	r3, [r0, #0]
 8017854:	9303      	str	r3, [sp, #12]
 8017856:	4618      	mov	r0, r3
 8017858:	f7e8 fcd2 	bl	8000200 <strlen>
 801785c:	9b03      	ldr	r3, [sp, #12]
 801785e:	9001      	str	r0, [sp, #4]
 8017860:	4403      	add	r3, r0
 8017862:	f04f 0b00 	mov.w	fp, #0
 8017866:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801786a:	9307      	str	r3, [sp, #28]
 801786c:	f8da 3000 	ldr.w	r3, [sl]
 8017870:	3302      	adds	r3, #2
 8017872:	461f      	mov	r7, r3
 8017874:	f813 0b01 	ldrb.w	r0, [r3], #1
 8017878:	2830      	cmp	r0, #48	; 0x30
 801787a:	d06c      	beq.n	8017956 <__gethex+0x118>
 801787c:	f7ff ffca 	bl	8017814 <__hexdig_fun>
 8017880:	4604      	mov	r4, r0
 8017882:	2800      	cmp	r0, #0
 8017884:	d16a      	bne.n	801795c <__gethex+0x11e>
 8017886:	9a01      	ldr	r2, [sp, #4]
 8017888:	9903      	ldr	r1, [sp, #12]
 801788a:	4638      	mov	r0, r7
 801788c:	f001 fc36 	bl	80190fc <strncmp>
 8017890:	2800      	cmp	r0, #0
 8017892:	d166      	bne.n	8017962 <__gethex+0x124>
 8017894:	9b01      	ldr	r3, [sp, #4]
 8017896:	5cf8      	ldrb	r0, [r7, r3]
 8017898:	18fe      	adds	r6, r7, r3
 801789a:	f7ff ffbb 	bl	8017814 <__hexdig_fun>
 801789e:	2800      	cmp	r0, #0
 80178a0:	d062      	beq.n	8017968 <__gethex+0x12a>
 80178a2:	4633      	mov	r3, r6
 80178a4:	7818      	ldrb	r0, [r3, #0]
 80178a6:	2830      	cmp	r0, #48	; 0x30
 80178a8:	461f      	mov	r7, r3
 80178aa:	f103 0301 	add.w	r3, r3, #1
 80178ae:	d0f9      	beq.n	80178a4 <__gethex+0x66>
 80178b0:	f7ff ffb0 	bl	8017814 <__hexdig_fun>
 80178b4:	fab0 f580 	clz	r5, r0
 80178b8:	096d      	lsrs	r5, r5, #5
 80178ba:	4634      	mov	r4, r6
 80178bc:	f04f 0b01 	mov.w	fp, #1
 80178c0:	463a      	mov	r2, r7
 80178c2:	4616      	mov	r6, r2
 80178c4:	3201      	adds	r2, #1
 80178c6:	7830      	ldrb	r0, [r6, #0]
 80178c8:	f7ff ffa4 	bl	8017814 <__hexdig_fun>
 80178cc:	2800      	cmp	r0, #0
 80178ce:	d1f8      	bne.n	80178c2 <__gethex+0x84>
 80178d0:	9a01      	ldr	r2, [sp, #4]
 80178d2:	9903      	ldr	r1, [sp, #12]
 80178d4:	4630      	mov	r0, r6
 80178d6:	f001 fc11 	bl	80190fc <strncmp>
 80178da:	b950      	cbnz	r0, 80178f2 <__gethex+0xb4>
 80178dc:	b954      	cbnz	r4, 80178f4 <__gethex+0xb6>
 80178de:	9b01      	ldr	r3, [sp, #4]
 80178e0:	18f4      	adds	r4, r6, r3
 80178e2:	4622      	mov	r2, r4
 80178e4:	4616      	mov	r6, r2
 80178e6:	3201      	adds	r2, #1
 80178e8:	7830      	ldrb	r0, [r6, #0]
 80178ea:	f7ff ff93 	bl	8017814 <__hexdig_fun>
 80178ee:	2800      	cmp	r0, #0
 80178f0:	d1f8      	bne.n	80178e4 <__gethex+0xa6>
 80178f2:	b10c      	cbz	r4, 80178f8 <__gethex+0xba>
 80178f4:	1ba4      	subs	r4, r4, r6
 80178f6:	00a4      	lsls	r4, r4, #2
 80178f8:	7833      	ldrb	r3, [r6, #0]
 80178fa:	2b50      	cmp	r3, #80	; 0x50
 80178fc:	d001      	beq.n	8017902 <__gethex+0xc4>
 80178fe:	2b70      	cmp	r3, #112	; 0x70
 8017900:	d140      	bne.n	8017984 <__gethex+0x146>
 8017902:	7873      	ldrb	r3, [r6, #1]
 8017904:	2b2b      	cmp	r3, #43	; 0x2b
 8017906:	d031      	beq.n	801796c <__gethex+0x12e>
 8017908:	2b2d      	cmp	r3, #45	; 0x2d
 801790a:	d033      	beq.n	8017974 <__gethex+0x136>
 801790c:	1c71      	adds	r1, r6, #1
 801790e:	f04f 0900 	mov.w	r9, #0
 8017912:	7808      	ldrb	r0, [r1, #0]
 8017914:	f7ff ff7e 	bl	8017814 <__hexdig_fun>
 8017918:	1e43      	subs	r3, r0, #1
 801791a:	b2db      	uxtb	r3, r3
 801791c:	2b18      	cmp	r3, #24
 801791e:	d831      	bhi.n	8017984 <__gethex+0x146>
 8017920:	f1a0 0210 	sub.w	r2, r0, #16
 8017924:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8017928:	f7ff ff74 	bl	8017814 <__hexdig_fun>
 801792c:	1e43      	subs	r3, r0, #1
 801792e:	b2db      	uxtb	r3, r3
 8017930:	2b18      	cmp	r3, #24
 8017932:	d922      	bls.n	801797a <__gethex+0x13c>
 8017934:	f1b9 0f00 	cmp.w	r9, #0
 8017938:	d000      	beq.n	801793c <__gethex+0xfe>
 801793a:	4252      	negs	r2, r2
 801793c:	4414      	add	r4, r2
 801793e:	f8ca 1000 	str.w	r1, [sl]
 8017942:	b30d      	cbz	r5, 8017988 <__gethex+0x14a>
 8017944:	f1bb 0f00 	cmp.w	fp, #0
 8017948:	bf0c      	ite	eq
 801794a:	2706      	moveq	r7, #6
 801794c:	2700      	movne	r7, #0
 801794e:	4638      	mov	r0, r7
 8017950:	b00b      	add	sp, #44	; 0x2c
 8017952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017956:	f10b 0b01 	add.w	fp, fp, #1
 801795a:	e78a      	b.n	8017872 <__gethex+0x34>
 801795c:	2500      	movs	r5, #0
 801795e:	462c      	mov	r4, r5
 8017960:	e7ae      	b.n	80178c0 <__gethex+0x82>
 8017962:	463e      	mov	r6, r7
 8017964:	2501      	movs	r5, #1
 8017966:	e7c7      	b.n	80178f8 <__gethex+0xba>
 8017968:	4604      	mov	r4, r0
 801796a:	e7fb      	b.n	8017964 <__gethex+0x126>
 801796c:	f04f 0900 	mov.w	r9, #0
 8017970:	1cb1      	adds	r1, r6, #2
 8017972:	e7ce      	b.n	8017912 <__gethex+0xd4>
 8017974:	f04f 0901 	mov.w	r9, #1
 8017978:	e7fa      	b.n	8017970 <__gethex+0x132>
 801797a:	230a      	movs	r3, #10
 801797c:	fb03 0202 	mla	r2, r3, r2, r0
 8017980:	3a10      	subs	r2, #16
 8017982:	e7cf      	b.n	8017924 <__gethex+0xe6>
 8017984:	4631      	mov	r1, r6
 8017986:	e7da      	b.n	801793e <__gethex+0x100>
 8017988:	1bf3      	subs	r3, r6, r7
 801798a:	3b01      	subs	r3, #1
 801798c:	4629      	mov	r1, r5
 801798e:	2b07      	cmp	r3, #7
 8017990:	dc49      	bgt.n	8017a26 <__gethex+0x1e8>
 8017992:	9802      	ldr	r0, [sp, #8]
 8017994:	f000 fa66 	bl	8017e64 <_Balloc>
 8017998:	9b01      	ldr	r3, [sp, #4]
 801799a:	f100 0914 	add.w	r9, r0, #20
 801799e:	f04f 0b00 	mov.w	fp, #0
 80179a2:	f1c3 0301 	rsb	r3, r3, #1
 80179a6:	4605      	mov	r5, r0
 80179a8:	f8cd 9010 	str.w	r9, [sp, #16]
 80179ac:	46da      	mov	sl, fp
 80179ae:	9308      	str	r3, [sp, #32]
 80179b0:	42b7      	cmp	r7, r6
 80179b2:	d33b      	bcc.n	8017a2c <__gethex+0x1ee>
 80179b4:	9804      	ldr	r0, [sp, #16]
 80179b6:	f840 ab04 	str.w	sl, [r0], #4
 80179ba:	eba0 0009 	sub.w	r0, r0, r9
 80179be:	1080      	asrs	r0, r0, #2
 80179c0:	6128      	str	r0, [r5, #16]
 80179c2:	0147      	lsls	r7, r0, #5
 80179c4:	4650      	mov	r0, sl
 80179c6:	f000 fb11 	bl	8017fec <__hi0bits>
 80179ca:	f8d8 6000 	ldr.w	r6, [r8]
 80179ce:	1a3f      	subs	r7, r7, r0
 80179d0:	42b7      	cmp	r7, r6
 80179d2:	dd64      	ble.n	8017a9e <__gethex+0x260>
 80179d4:	1bbf      	subs	r7, r7, r6
 80179d6:	4639      	mov	r1, r7
 80179d8:	4628      	mov	r0, r5
 80179da:	f000 fe21 	bl	8018620 <__any_on>
 80179de:	4682      	mov	sl, r0
 80179e0:	b178      	cbz	r0, 8017a02 <__gethex+0x1c4>
 80179e2:	1e7b      	subs	r3, r7, #1
 80179e4:	1159      	asrs	r1, r3, #5
 80179e6:	f003 021f 	and.w	r2, r3, #31
 80179ea:	f04f 0a01 	mov.w	sl, #1
 80179ee:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80179f2:	fa0a f202 	lsl.w	r2, sl, r2
 80179f6:	420a      	tst	r2, r1
 80179f8:	d003      	beq.n	8017a02 <__gethex+0x1c4>
 80179fa:	4553      	cmp	r3, sl
 80179fc:	dc46      	bgt.n	8017a8c <__gethex+0x24e>
 80179fe:	f04f 0a02 	mov.w	sl, #2
 8017a02:	4639      	mov	r1, r7
 8017a04:	4628      	mov	r0, r5
 8017a06:	f7ff fecb 	bl	80177a0 <rshift>
 8017a0a:	443c      	add	r4, r7
 8017a0c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017a10:	42a3      	cmp	r3, r4
 8017a12:	da52      	bge.n	8017aba <__gethex+0x27c>
 8017a14:	4629      	mov	r1, r5
 8017a16:	9802      	ldr	r0, [sp, #8]
 8017a18:	f000 fa58 	bl	8017ecc <_Bfree>
 8017a1c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017a1e:	2300      	movs	r3, #0
 8017a20:	6013      	str	r3, [r2, #0]
 8017a22:	27a3      	movs	r7, #163	; 0xa3
 8017a24:	e793      	b.n	801794e <__gethex+0x110>
 8017a26:	3101      	adds	r1, #1
 8017a28:	105b      	asrs	r3, r3, #1
 8017a2a:	e7b0      	b.n	801798e <__gethex+0x150>
 8017a2c:	1e73      	subs	r3, r6, #1
 8017a2e:	9305      	str	r3, [sp, #20]
 8017a30:	9a07      	ldr	r2, [sp, #28]
 8017a32:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8017a36:	4293      	cmp	r3, r2
 8017a38:	d018      	beq.n	8017a6c <__gethex+0x22e>
 8017a3a:	f1bb 0f20 	cmp.w	fp, #32
 8017a3e:	d107      	bne.n	8017a50 <__gethex+0x212>
 8017a40:	9b04      	ldr	r3, [sp, #16]
 8017a42:	f8c3 a000 	str.w	sl, [r3]
 8017a46:	3304      	adds	r3, #4
 8017a48:	f04f 0a00 	mov.w	sl, #0
 8017a4c:	9304      	str	r3, [sp, #16]
 8017a4e:	46d3      	mov	fp, sl
 8017a50:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8017a54:	f7ff fede 	bl	8017814 <__hexdig_fun>
 8017a58:	f000 000f 	and.w	r0, r0, #15
 8017a5c:	fa00 f00b 	lsl.w	r0, r0, fp
 8017a60:	ea4a 0a00 	orr.w	sl, sl, r0
 8017a64:	f10b 0b04 	add.w	fp, fp, #4
 8017a68:	9b05      	ldr	r3, [sp, #20]
 8017a6a:	e00d      	b.n	8017a88 <__gethex+0x24a>
 8017a6c:	9b05      	ldr	r3, [sp, #20]
 8017a6e:	9a08      	ldr	r2, [sp, #32]
 8017a70:	4413      	add	r3, r2
 8017a72:	42bb      	cmp	r3, r7
 8017a74:	d3e1      	bcc.n	8017a3a <__gethex+0x1fc>
 8017a76:	4618      	mov	r0, r3
 8017a78:	9a01      	ldr	r2, [sp, #4]
 8017a7a:	9903      	ldr	r1, [sp, #12]
 8017a7c:	9309      	str	r3, [sp, #36]	; 0x24
 8017a7e:	f001 fb3d 	bl	80190fc <strncmp>
 8017a82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017a84:	2800      	cmp	r0, #0
 8017a86:	d1d8      	bne.n	8017a3a <__gethex+0x1fc>
 8017a88:	461e      	mov	r6, r3
 8017a8a:	e791      	b.n	80179b0 <__gethex+0x172>
 8017a8c:	1eb9      	subs	r1, r7, #2
 8017a8e:	4628      	mov	r0, r5
 8017a90:	f000 fdc6 	bl	8018620 <__any_on>
 8017a94:	2800      	cmp	r0, #0
 8017a96:	d0b2      	beq.n	80179fe <__gethex+0x1c0>
 8017a98:	f04f 0a03 	mov.w	sl, #3
 8017a9c:	e7b1      	b.n	8017a02 <__gethex+0x1c4>
 8017a9e:	da09      	bge.n	8017ab4 <__gethex+0x276>
 8017aa0:	1bf7      	subs	r7, r6, r7
 8017aa2:	4629      	mov	r1, r5
 8017aa4:	463a      	mov	r2, r7
 8017aa6:	9802      	ldr	r0, [sp, #8]
 8017aa8:	f000 fbdc 	bl	8018264 <__lshift>
 8017aac:	1be4      	subs	r4, r4, r7
 8017aae:	4605      	mov	r5, r0
 8017ab0:	f100 0914 	add.w	r9, r0, #20
 8017ab4:	f04f 0a00 	mov.w	sl, #0
 8017ab8:	e7a8      	b.n	8017a0c <__gethex+0x1ce>
 8017aba:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8017abe:	42a0      	cmp	r0, r4
 8017ac0:	dd6a      	ble.n	8017b98 <__gethex+0x35a>
 8017ac2:	1b04      	subs	r4, r0, r4
 8017ac4:	42a6      	cmp	r6, r4
 8017ac6:	dc2e      	bgt.n	8017b26 <__gethex+0x2e8>
 8017ac8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017acc:	2b02      	cmp	r3, #2
 8017ace:	d022      	beq.n	8017b16 <__gethex+0x2d8>
 8017ad0:	2b03      	cmp	r3, #3
 8017ad2:	d024      	beq.n	8017b1e <__gethex+0x2e0>
 8017ad4:	2b01      	cmp	r3, #1
 8017ad6:	d115      	bne.n	8017b04 <__gethex+0x2c6>
 8017ad8:	42a6      	cmp	r6, r4
 8017ada:	d113      	bne.n	8017b04 <__gethex+0x2c6>
 8017adc:	2e01      	cmp	r6, #1
 8017ade:	dc0b      	bgt.n	8017af8 <__gethex+0x2ba>
 8017ae0:	9a06      	ldr	r2, [sp, #24]
 8017ae2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8017ae6:	6013      	str	r3, [r2, #0]
 8017ae8:	2301      	movs	r3, #1
 8017aea:	612b      	str	r3, [r5, #16]
 8017aec:	f8c9 3000 	str.w	r3, [r9]
 8017af0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017af2:	2762      	movs	r7, #98	; 0x62
 8017af4:	601d      	str	r5, [r3, #0]
 8017af6:	e72a      	b.n	801794e <__gethex+0x110>
 8017af8:	1e71      	subs	r1, r6, #1
 8017afa:	4628      	mov	r0, r5
 8017afc:	f000 fd90 	bl	8018620 <__any_on>
 8017b00:	2800      	cmp	r0, #0
 8017b02:	d1ed      	bne.n	8017ae0 <__gethex+0x2a2>
 8017b04:	4629      	mov	r1, r5
 8017b06:	9802      	ldr	r0, [sp, #8]
 8017b08:	f000 f9e0 	bl	8017ecc <_Bfree>
 8017b0c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017b0e:	2300      	movs	r3, #0
 8017b10:	6013      	str	r3, [r2, #0]
 8017b12:	2750      	movs	r7, #80	; 0x50
 8017b14:	e71b      	b.n	801794e <__gethex+0x110>
 8017b16:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017b18:	2b00      	cmp	r3, #0
 8017b1a:	d0e1      	beq.n	8017ae0 <__gethex+0x2a2>
 8017b1c:	e7f2      	b.n	8017b04 <__gethex+0x2c6>
 8017b1e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017b20:	2b00      	cmp	r3, #0
 8017b22:	d1dd      	bne.n	8017ae0 <__gethex+0x2a2>
 8017b24:	e7ee      	b.n	8017b04 <__gethex+0x2c6>
 8017b26:	1e67      	subs	r7, r4, #1
 8017b28:	f1ba 0f00 	cmp.w	sl, #0
 8017b2c:	d131      	bne.n	8017b92 <__gethex+0x354>
 8017b2e:	b127      	cbz	r7, 8017b3a <__gethex+0x2fc>
 8017b30:	4639      	mov	r1, r7
 8017b32:	4628      	mov	r0, r5
 8017b34:	f000 fd74 	bl	8018620 <__any_on>
 8017b38:	4682      	mov	sl, r0
 8017b3a:	117a      	asrs	r2, r7, #5
 8017b3c:	2301      	movs	r3, #1
 8017b3e:	f007 071f 	and.w	r7, r7, #31
 8017b42:	fa03 f707 	lsl.w	r7, r3, r7
 8017b46:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8017b4a:	4621      	mov	r1, r4
 8017b4c:	421f      	tst	r7, r3
 8017b4e:	4628      	mov	r0, r5
 8017b50:	bf18      	it	ne
 8017b52:	f04a 0a02 	orrne.w	sl, sl, #2
 8017b56:	1b36      	subs	r6, r6, r4
 8017b58:	f7ff fe22 	bl	80177a0 <rshift>
 8017b5c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8017b60:	2702      	movs	r7, #2
 8017b62:	f1ba 0f00 	cmp.w	sl, #0
 8017b66:	d048      	beq.n	8017bfa <__gethex+0x3bc>
 8017b68:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017b6c:	2b02      	cmp	r3, #2
 8017b6e:	d015      	beq.n	8017b9c <__gethex+0x35e>
 8017b70:	2b03      	cmp	r3, #3
 8017b72:	d017      	beq.n	8017ba4 <__gethex+0x366>
 8017b74:	2b01      	cmp	r3, #1
 8017b76:	d109      	bne.n	8017b8c <__gethex+0x34e>
 8017b78:	f01a 0f02 	tst.w	sl, #2
 8017b7c:	d006      	beq.n	8017b8c <__gethex+0x34e>
 8017b7e:	f8d9 3000 	ldr.w	r3, [r9]
 8017b82:	ea4a 0a03 	orr.w	sl, sl, r3
 8017b86:	f01a 0f01 	tst.w	sl, #1
 8017b8a:	d10e      	bne.n	8017baa <__gethex+0x36c>
 8017b8c:	f047 0710 	orr.w	r7, r7, #16
 8017b90:	e033      	b.n	8017bfa <__gethex+0x3bc>
 8017b92:	f04f 0a01 	mov.w	sl, #1
 8017b96:	e7d0      	b.n	8017b3a <__gethex+0x2fc>
 8017b98:	2701      	movs	r7, #1
 8017b9a:	e7e2      	b.n	8017b62 <__gethex+0x324>
 8017b9c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017b9e:	f1c3 0301 	rsb	r3, r3, #1
 8017ba2:	9315      	str	r3, [sp, #84]	; 0x54
 8017ba4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017ba6:	2b00      	cmp	r3, #0
 8017ba8:	d0f0      	beq.n	8017b8c <__gethex+0x34e>
 8017baa:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8017bae:	f105 0314 	add.w	r3, r5, #20
 8017bb2:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8017bb6:	eb03 010a 	add.w	r1, r3, sl
 8017bba:	f04f 0c00 	mov.w	ip, #0
 8017bbe:	4618      	mov	r0, r3
 8017bc0:	f853 2b04 	ldr.w	r2, [r3], #4
 8017bc4:	f1b2 3fff 	cmp.w	r2, #4294967295
 8017bc8:	d01c      	beq.n	8017c04 <__gethex+0x3c6>
 8017bca:	3201      	adds	r2, #1
 8017bcc:	6002      	str	r2, [r0, #0]
 8017bce:	2f02      	cmp	r7, #2
 8017bd0:	f105 0314 	add.w	r3, r5, #20
 8017bd4:	d138      	bne.n	8017c48 <__gethex+0x40a>
 8017bd6:	f8d8 2000 	ldr.w	r2, [r8]
 8017bda:	3a01      	subs	r2, #1
 8017bdc:	42b2      	cmp	r2, r6
 8017bde:	d10a      	bne.n	8017bf6 <__gethex+0x3b8>
 8017be0:	1171      	asrs	r1, r6, #5
 8017be2:	2201      	movs	r2, #1
 8017be4:	f006 061f 	and.w	r6, r6, #31
 8017be8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8017bec:	fa02 f606 	lsl.w	r6, r2, r6
 8017bf0:	421e      	tst	r6, r3
 8017bf2:	bf18      	it	ne
 8017bf4:	4617      	movne	r7, r2
 8017bf6:	f047 0720 	orr.w	r7, r7, #32
 8017bfa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017bfc:	601d      	str	r5, [r3, #0]
 8017bfe:	9b06      	ldr	r3, [sp, #24]
 8017c00:	601c      	str	r4, [r3, #0]
 8017c02:	e6a4      	b.n	801794e <__gethex+0x110>
 8017c04:	4299      	cmp	r1, r3
 8017c06:	f843 cc04 	str.w	ip, [r3, #-4]
 8017c0a:	d8d8      	bhi.n	8017bbe <__gethex+0x380>
 8017c0c:	68ab      	ldr	r3, [r5, #8]
 8017c0e:	4599      	cmp	r9, r3
 8017c10:	db12      	blt.n	8017c38 <__gethex+0x3fa>
 8017c12:	6869      	ldr	r1, [r5, #4]
 8017c14:	9802      	ldr	r0, [sp, #8]
 8017c16:	3101      	adds	r1, #1
 8017c18:	f000 f924 	bl	8017e64 <_Balloc>
 8017c1c:	692a      	ldr	r2, [r5, #16]
 8017c1e:	3202      	adds	r2, #2
 8017c20:	f105 010c 	add.w	r1, r5, #12
 8017c24:	4683      	mov	fp, r0
 8017c26:	0092      	lsls	r2, r2, #2
 8017c28:	300c      	adds	r0, #12
 8017c2a:	f7fd f9c5 	bl	8014fb8 <memcpy>
 8017c2e:	4629      	mov	r1, r5
 8017c30:	9802      	ldr	r0, [sp, #8]
 8017c32:	f000 f94b 	bl	8017ecc <_Bfree>
 8017c36:	465d      	mov	r5, fp
 8017c38:	692b      	ldr	r3, [r5, #16]
 8017c3a:	1c5a      	adds	r2, r3, #1
 8017c3c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8017c40:	612a      	str	r2, [r5, #16]
 8017c42:	2201      	movs	r2, #1
 8017c44:	615a      	str	r2, [r3, #20]
 8017c46:	e7c2      	b.n	8017bce <__gethex+0x390>
 8017c48:	692a      	ldr	r2, [r5, #16]
 8017c4a:	454a      	cmp	r2, r9
 8017c4c:	dd0b      	ble.n	8017c66 <__gethex+0x428>
 8017c4e:	2101      	movs	r1, #1
 8017c50:	4628      	mov	r0, r5
 8017c52:	f7ff fda5 	bl	80177a0 <rshift>
 8017c56:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017c5a:	3401      	adds	r4, #1
 8017c5c:	42a3      	cmp	r3, r4
 8017c5e:	f6ff aed9 	blt.w	8017a14 <__gethex+0x1d6>
 8017c62:	2701      	movs	r7, #1
 8017c64:	e7c7      	b.n	8017bf6 <__gethex+0x3b8>
 8017c66:	f016 061f 	ands.w	r6, r6, #31
 8017c6a:	d0fa      	beq.n	8017c62 <__gethex+0x424>
 8017c6c:	449a      	add	sl, r3
 8017c6e:	f1c6 0620 	rsb	r6, r6, #32
 8017c72:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8017c76:	f000 f9b9 	bl	8017fec <__hi0bits>
 8017c7a:	42b0      	cmp	r0, r6
 8017c7c:	dbe7      	blt.n	8017c4e <__gethex+0x410>
 8017c7e:	e7f0      	b.n	8017c62 <__gethex+0x424>

08017c80 <L_shift>:
 8017c80:	f1c2 0208 	rsb	r2, r2, #8
 8017c84:	0092      	lsls	r2, r2, #2
 8017c86:	b570      	push	{r4, r5, r6, lr}
 8017c88:	f1c2 0620 	rsb	r6, r2, #32
 8017c8c:	6843      	ldr	r3, [r0, #4]
 8017c8e:	6804      	ldr	r4, [r0, #0]
 8017c90:	fa03 f506 	lsl.w	r5, r3, r6
 8017c94:	432c      	orrs	r4, r5
 8017c96:	40d3      	lsrs	r3, r2
 8017c98:	6004      	str	r4, [r0, #0]
 8017c9a:	f840 3f04 	str.w	r3, [r0, #4]!
 8017c9e:	4288      	cmp	r0, r1
 8017ca0:	d3f4      	bcc.n	8017c8c <L_shift+0xc>
 8017ca2:	bd70      	pop	{r4, r5, r6, pc}

08017ca4 <__match>:
 8017ca4:	b530      	push	{r4, r5, lr}
 8017ca6:	6803      	ldr	r3, [r0, #0]
 8017ca8:	3301      	adds	r3, #1
 8017caa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017cae:	b914      	cbnz	r4, 8017cb6 <__match+0x12>
 8017cb0:	6003      	str	r3, [r0, #0]
 8017cb2:	2001      	movs	r0, #1
 8017cb4:	bd30      	pop	{r4, r5, pc}
 8017cb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017cba:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8017cbe:	2d19      	cmp	r5, #25
 8017cc0:	bf98      	it	ls
 8017cc2:	3220      	addls	r2, #32
 8017cc4:	42a2      	cmp	r2, r4
 8017cc6:	d0f0      	beq.n	8017caa <__match+0x6>
 8017cc8:	2000      	movs	r0, #0
 8017cca:	e7f3      	b.n	8017cb4 <__match+0x10>

08017ccc <__hexnan>:
 8017ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017cd0:	680b      	ldr	r3, [r1, #0]
 8017cd2:	6801      	ldr	r1, [r0, #0]
 8017cd4:	115f      	asrs	r7, r3, #5
 8017cd6:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8017cda:	f013 031f 	ands.w	r3, r3, #31
 8017cde:	b087      	sub	sp, #28
 8017ce0:	bf18      	it	ne
 8017ce2:	3704      	addne	r7, #4
 8017ce4:	2500      	movs	r5, #0
 8017ce6:	1f3e      	subs	r6, r7, #4
 8017ce8:	4682      	mov	sl, r0
 8017cea:	4690      	mov	r8, r2
 8017cec:	9301      	str	r3, [sp, #4]
 8017cee:	f847 5c04 	str.w	r5, [r7, #-4]
 8017cf2:	46b1      	mov	r9, r6
 8017cf4:	4634      	mov	r4, r6
 8017cf6:	9502      	str	r5, [sp, #8]
 8017cf8:	46ab      	mov	fp, r5
 8017cfa:	784a      	ldrb	r2, [r1, #1]
 8017cfc:	1c4b      	adds	r3, r1, #1
 8017cfe:	9303      	str	r3, [sp, #12]
 8017d00:	b342      	cbz	r2, 8017d54 <__hexnan+0x88>
 8017d02:	4610      	mov	r0, r2
 8017d04:	9105      	str	r1, [sp, #20]
 8017d06:	9204      	str	r2, [sp, #16]
 8017d08:	f7ff fd84 	bl	8017814 <__hexdig_fun>
 8017d0c:	2800      	cmp	r0, #0
 8017d0e:	d143      	bne.n	8017d98 <__hexnan+0xcc>
 8017d10:	9a04      	ldr	r2, [sp, #16]
 8017d12:	9905      	ldr	r1, [sp, #20]
 8017d14:	2a20      	cmp	r2, #32
 8017d16:	d818      	bhi.n	8017d4a <__hexnan+0x7e>
 8017d18:	9b02      	ldr	r3, [sp, #8]
 8017d1a:	459b      	cmp	fp, r3
 8017d1c:	dd13      	ble.n	8017d46 <__hexnan+0x7a>
 8017d1e:	454c      	cmp	r4, r9
 8017d20:	d206      	bcs.n	8017d30 <__hexnan+0x64>
 8017d22:	2d07      	cmp	r5, #7
 8017d24:	dc04      	bgt.n	8017d30 <__hexnan+0x64>
 8017d26:	462a      	mov	r2, r5
 8017d28:	4649      	mov	r1, r9
 8017d2a:	4620      	mov	r0, r4
 8017d2c:	f7ff ffa8 	bl	8017c80 <L_shift>
 8017d30:	4544      	cmp	r4, r8
 8017d32:	d944      	bls.n	8017dbe <__hexnan+0xf2>
 8017d34:	2300      	movs	r3, #0
 8017d36:	f1a4 0904 	sub.w	r9, r4, #4
 8017d3a:	f844 3c04 	str.w	r3, [r4, #-4]
 8017d3e:	f8cd b008 	str.w	fp, [sp, #8]
 8017d42:	464c      	mov	r4, r9
 8017d44:	461d      	mov	r5, r3
 8017d46:	9903      	ldr	r1, [sp, #12]
 8017d48:	e7d7      	b.n	8017cfa <__hexnan+0x2e>
 8017d4a:	2a29      	cmp	r2, #41	; 0x29
 8017d4c:	d14a      	bne.n	8017de4 <__hexnan+0x118>
 8017d4e:	3102      	adds	r1, #2
 8017d50:	f8ca 1000 	str.w	r1, [sl]
 8017d54:	f1bb 0f00 	cmp.w	fp, #0
 8017d58:	d044      	beq.n	8017de4 <__hexnan+0x118>
 8017d5a:	454c      	cmp	r4, r9
 8017d5c:	d206      	bcs.n	8017d6c <__hexnan+0xa0>
 8017d5e:	2d07      	cmp	r5, #7
 8017d60:	dc04      	bgt.n	8017d6c <__hexnan+0xa0>
 8017d62:	462a      	mov	r2, r5
 8017d64:	4649      	mov	r1, r9
 8017d66:	4620      	mov	r0, r4
 8017d68:	f7ff ff8a 	bl	8017c80 <L_shift>
 8017d6c:	4544      	cmp	r4, r8
 8017d6e:	d928      	bls.n	8017dc2 <__hexnan+0xf6>
 8017d70:	4643      	mov	r3, r8
 8017d72:	f854 2b04 	ldr.w	r2, [r4], #4
 8017d76:	f843 2b04 	str.w	r2, [r3], #4
 8017d7a:	42a6      	cmp	r6, r4
 8017d7c:	d2f9      	bcs.n	8017d72 <__hexnan+0xa6>
 8017d7e:	2200      	movs	r2, #0
 8017d80:	f843 2b04 	str.w	r2, [r3], #4
 8017d84:	429e      	cmp	r6, r3
 8017d86:	d2fb      	bcs.n	8017d80 <__hexnan+0xb4>
 8017d88:	6833      	ldr	r3, [r6, #0]
 8017d8a:	b91b      	cbnz	r3, 8017d94 <__hexnan+0xc8>
 8017d8c:	4546      	cmp	r6, r8
 8017d8e:	d127      	bne.n	8017de0 <__hexnan+0x114>
 8017d90:	2301      	movs	r3, #1
 8017d92:	6033      	str	r3, [r6, #0]
 8017d94:	2005      	movs	r0, #5
 8017d96:	e026      	b.n	8017de6 <__hexnan+0x11a>
 8017d98:	3501      	adds	r5, #1
 8017d9a:	2d08      	cmp	r5, #8
 8017d9c:	f10b 0b01 	add.w	fp, fp, #1
 8017da0:	dd06      	ble.n	8017db0 <__hexnan+0xe4>
 8017da2:	4544      	cmp	r4, r8
 8017da4:	d9cf      	bls.n	8017d46 <__hexnan+0x7a>
 8017da6:	2300      	movs	r3, #0
 8017da8:	f844 3c04 	str.w	r3, [r4, #-4]
 8017dac:	2501      	movs	r5, #1
 8017dae:	3c04      	subs	r4, #4
 8017db0:	6822      	ldr	r2, [r4, #0]
 8017db2:	f000 000f 	and.w	r0, r0, #15
 8017db6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8017dba:	6020      	str	r0, [r4, #0]
 8017dbc:	e7c3      	b.n	8017d46 <__hexnan+0x7a>
 8017dbe:	2508      	movs	r5, #8
 8017dc0:	e7c1      	b.n	8017d46 <__hexnan+0x7a>
 8017dc2:	9b01      	ldr	r3, [sp, #4]
 8017dc4:	2b00      	cmp	r3, #0
 8017dc6:	d0df      	beq.n	8017d88 <__hexnan+0xbc>
 8017dc8:	f04f 32ff 	mov.w	r2, #4294967295
 8017dcc:	f1c3 0320 	rsb	r3, r3, #32
 8017dd0:	fa22 f303 	lsr.w	r3, r2, r3
 8017dd4:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8017dd8:	401a      	ands	r2, r3
 8017dda:	f847 2c04 	str.w	r2, [r7, #-4]
 8017dde:	e7d3      	b.n	8017d88 <__hexnan+0xbc>
 8017de0:	3e04      	subs	r6, #4
 8017de2:	e7d1      	b.n	8017d88 <__hexnan+0xbc>
 8017de4:	2004      	movs	r0, #4
 8017de6:	b007      	add	sp, #28
 8017de8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017dec <__locale_ctype_ptr_l>:
 8017dec:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8017df0:	4770      	bx	lr
	...

08017df4 <__locale_ctype_ptr>:
 8017df4:	4b04      	ldr	r3, [pc, #16]	; (8017e08 <__locale_ctype_ptr+0x14>)
 8017df6:	4a05      	ldr	r2, [pc, #20]	; (8017e0c <__locale_ctype_ptr+0x18>)
 8017df8:	681b      	ldr	r3, [r3, #0]
 8017dfa:	6a1b      	ldr	r3, [r3, #32]
 8017dfc:	2b00      	cmp	r3, #0
 8017dfe:	bf08      	it	eq
 8017e00:	4613      	moveq	r3, r2
 8017e02:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8017e06:	4770      	bx	lr
 8017e08:	2000000c 	.word	0x2000000c
 8017e0c:	20000070 	.word	0x20000070

08017e10 <__localeconv_l>:
 8017e10:	30f0      	adds	r0, #240	; 0xf0
 8017e12:	4770      	bx	lr

08017e14 <_localeconv_r>:
 8017e14:	4b04      	ldr	r3, [pc, #16]	; (8017e28 <_localeconv_r+0x14>)
 8017e16:	681b      	ldr	r3, [r3, #0]
 8017e18:	6a18      	ldr	r0, [r3, #32]
 8017e1a:	4b04      	ldr	r3, [pc, #16]	; (8017e2c <_localeconv_r+0x18>)
 8017e1c:	2800      	cmp	r0, #0
 8017e1e:	bf08      	it	eq
 8017e20:	4618      	moveq	r0, r3
 8017e22:	30f0      	adds	r0, #240	; 0xf0
 8017e24:	4770      	bx	lr
 8017e26:	bf00      	nop
 8017e28:	2000000c 	.word	0x2000000c
 8017e2c:	20000070 	.word	0x20000070

08017e30 <malloc>:
 8017e30:	4b02      	ldr	r3, [pc, #8]	; (8017e3c <malloc+0xc>)
 8017e32:	4601      	mov	r1, r0
 8017e34:	6818      	ldr	r0, [r3, #0]
 8017e36:	f000 bc71 	b.w	801871c <_malloc_r>
 8017e3a:	bf00      	nop
 8017e3c:	2000000c 	.word	0x2000000c

08017e40 <__ascii_mbtowc>:
 8017e40:	b082      	sub	sp, #8
 8017e42:	b901      	cbnz	r1, 8017e46 <__ascii_mbtowc+0x6>
 8017e44:	a901      	add	r1, sp, #4
 8017e46:	b142      	cbz	r2, 8017e5a <__ascii_mbtowc+0x1a>
 8017e48:	b14b      	cbz	r3, 8017e5e <__ascii_mbtowc+0x1e>
 8017e4a:	7813      	ldrb	r3, [r2, #0]
 8017e4c:	600b      	str	r3, [r1, #0]
 8017e4e:	7812      	ldrb	r2, [r2, #0]
 8017e50:	1c10      	adds	r0, r2, #0
 8017e52:	bf18      	it	ne
 8017e54:	2001      	movne	r0, #1
 8017e56:	b002      	add	sp, #8
 8017e58:	4770      	bx	lr
 8017e5a:	4610      	mov	r0, r2
 8017e5c:	e7fb      	b.n	8017e56 <__ascii_mbtowc+0x16>
 8017e5e:	f06f 0001 	mvn.w	r0, #1
 8017e62:	e7f8      	b.n	8017e56 <__ascii_mbtowc+0x16>

08017e64 <_Balloc>:
 8017e64:	b570      	push	{r4, r5, r6, lr}
 8017e66:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8017e68:	4604      	mov	r4, r0
 8017e6a:	460e      	mov	r6, r1
 8017e6c:	b93d      	cbnz	r5, 8017e7e <_Balloc+0x1a>
 8017e6e:	2010      	movs	r0, #16
 8017e70:	f7ff ffde 	bl	8017e30 <malloc>
 8017e74:	6260      	str	r0, [r4, #36]	; 0x24
 8017e76:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8017e7a:	6005      	str	r5, [r0, #0]
 8017e7c:	60c5      	str	r5, [r0, #12]
 8017e7e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8017e80:	68eb      	ldr	r3, [r5, #12]
 8017e82:	b183      	cbz	r3, 8017ea6 <_Balloc+0x42>
 8017e84:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017e86:	68db      	ldr	r3, [r3, #12]
 8017e88:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8017e8c:	b9b8      	cbnz	r0, 8017ebe <_Balloc+0x5a>
 8017e8e:	2101      	movs	r1, #1
 8017e90:	fa01 f506 	lsl.w	r5, r1, r6
 8017e94:	1d6a      	adds	r2, r5, #5
 8017e96:	0092      	lsls	r2, r2, #2
 8017e98:	4620      	mov	r0, r4
 8017e9a:	f000 fbe2 	bl	8018662 <_calloc_r>
 8017e9e:	b160      	cbz	r0, 8017eba <_Balloc+0x56>
 8017ea0:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8017ea4:	e00e      	b.n	8017ec4 <_Balloc+0x60>
 8017ea6:	2221      	movs	r2, #33	; 0x21
 8017ea8:	2104      	movs	r1, #4
 8017eaa:	4620      	mov	r0, r4
 8017eac:	f000 fbd9 	bl	8018662 <_calloc_r>
 8017eb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017eb2:	60e8      	str	r0, [r5, #12]
 8017eb4:	68db      	ldr	r3, [r3, #12]
 8017eb6:	2b00      	cmp	r3, #0
 8017eb8:	d1e4      	bne.n	8017e84 <_Balloc+0x20>
 8017eba:	2000      	movs	r0, #0
 8017ebc:	bd70      	pop	{r4, r5, r6, pc}
 8017ebe:	6802      	ldr	r2, [r0, #0]
 8017ec0:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8017ec4:	2300      	movs	r3, #0
 8017ec6:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8017eca:	e7f7      	b.n	8017ebc <_Balloc+0x58>

08017ecc <_Bfree>:
 8017ecc:	b570      	push	{r4, r5, r6, lr}
 8017ece:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8017ed0:	4606      	mov	r6, r0
 8017ed2:	460d      	mov	r5, r1
 8017ed4:	b93c      	cbnz	r4, 8017ee6 <_Bfree+0x1a>
 8017ed6:	2010      	movs	r0, #16
 8017ed8:	f7ff ffaa 	bl	8017e30 <malloc>
 8017edc:	6270      	str	r0, [r6, #36]	; 0x24
 8017ede:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8017ee2:	6004      	str	r4, [r0, #0]
 8017ee4:	60c4      	str	r4, [r0, #12]
 8017ee6:	b13d      	cbz	r5, 8017ef8 <_Bfree+0x2c>
 8017ee8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8017eea:	686a      	ldr	r2, [r5, #4]
 8017eec:	68db      	ldr	r3, [r3, #12]
 8017eee:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8017ef2:	6029      	str	r1, [r5, #0]
 8017ef4:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8017ef8:	bd70      	pop	{r4, r5, r6, pc}

08017efa <__multadd>:
 8017efa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017efe:	690d      	ldr	r5, [r1, #16]
 8017f00:	461f      	mov	r7, r3
 8017f02:	4606      	mov	r6, r0
 8017f04:	460c      	mov	r4, r1
 8017f06:	f101 0c14 	add.w	ip, r1, #20
 8017f0a:	2300      	movs	r3, #0
 8017f0c:	f8dc 0000 	ldr.w	r0, [ip]
 8017f10:	b281      	uxth	r1, r0
 8017f12:	fb02 7101 	mla	r1, r2, r1, r7
 8017f16:	0c0f      	lsrs	r7, r1, #16
 8017f18:	0c00      	lsrs	r0, r0, #16
 8017f1a:	fb02 7000 	mla	r0, r2, r0, r7
 8017f1e:	b289      	uxth	r1, r1
 8017f20:	3301      	adds	r3, #1
 8017f22:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8017f26:	429d      	cmp	r5, r3
 8017f28:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8017f2c:	f84c 1b04 	str.w	r1, [ip], #4
 8017f30:	dcec      	bgt.n	8017f0c <__multadd+0x12>
 8017f32:	b1d7      	cbz	r7, 8017f6a <__multadd+0x70>
 8017f34:	68a3      	ldr	r3, [r4, #8]
 8017f36:	42ab      	cmp	r3, r5
 8017f38:	dc12      	bgt.n	8017f60 <__multadd+0x66>
 8017f3a:	6861      	ldr	r1, [r4, #4]
 8017f3c:	4630      	mov	r0, r6
 8017f3e:	3101      	adds	r1, #1
 8017f40:	f7ff ff90 	bl	8017e64 <_Balloc>
 8017f44:	6922      	ldr	r2, [r4, #16]
 8017f46:	3202      	adds	r2, #2
 8017f48:	f104 010c 	add.w	r1, r4, #12
 8017f4c:	4680      	mov	r8, r0
 8017f4e:	0092      	lsls	r2, r2, #2
 8017f50:	300c      	adds	r0, #12
 8017f52:	f7fd f831 	bl	8014fb8 <memcpy>
 8017f56:	4621      	mov	r1, r4
 8017f58:	4630      	mov	r0, r6
 8017f5a:	f7ff ffb7 	bl	8017ecc <_Bfree>
 8017f5e:	4644      	mov	r4, r8
 8017f60:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8017f64:	3501      	adds	r5, #1
 8017f66:	615f      	str	r7, [r3, #20]
 8017f68:	6125      	str	r5, [r4, #16]
 8017f6a:	4620      	mov	r0, r4
 8017f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017f70 <__s2b>:
 8017f70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017f74:	460c      	mov	r4, r1
 8017f76:	4615      	mov	r5, r2
 8017f78:	461f      	mov	r7, r3
 8017f7a:	2209      	movs	r2, #9
 8017f7c:	3308      	adds	r3, #8
 8017f7e:	4606      	mov	r6, r0
 8017f80:	fb93 f3f2 	sdiv	r3, r3, r2
 8017f84:	2100      	movs	r1, #0
 8017f86:	2201      	movs	r2, #1
 8017f88:	429a      	cmp	r2, r3
 8017f8a:	db20      	blt.n	8017fce <__s2b+0x5e>
 8017f8c:	4630      	mov	r0, r6
 8017f8e:	f7ff ff69 	bl	8017e64 <_Balloc>
 8017f92:	9b08      	ldr	r3, [sp, #32]
 8017f94:	6143      	str	r3, [r0, #20]
 8017f96:	2d09      	cmp	r5, #9
 8017f98:	f04f 0301 	mov.w	r3, #1
 8017f9c:	6103      	str	r3, [r0, #16]
 8017f9e:	dd19      	ble.n	8017fd4 <__s2b+0x64>
 8017fa0:	f104 0809 	add.w	r8, r4, #9
 8017fa4:	46c1      	mov	r9, r8
 8017fa6:	442c      	add	r4, r5
 8017fa8:	f819 3b01 	ldrb.w	r3, [r9], #1
 8017fac:	4601      	mov	r1, r0
 8017fae:	3b30      	subs	r3, #48	; 0x30
 8017fb0:	220a      	movs	r2, #10
 8017fb2:	4630      	mov	r0, r6
 8017fb4:	f7ff ffa1 	bl	8017efa <__multadd>
 8017fb8:	45a1      	cmp	r9, r4
 8017fba:	d1f5      	bne.n	8017fa8 <__s2b+0x38>
 8017fbc:	eb08 0405 	add.w	r4, r8, r5
 8017fc0:	3c08      	subs	r4, #8
 8017fc2:	1b2d      	subs	r5, r5, r4
 8017fc4:	1963      	adds	r3, r4, r5
 8017fc6:	42bb      	cmp	r3, r7
 8017fc8:	db07      	blt.n	8017fda <__s2b+0x6a>
 8017fca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017fce:	0052      	lsls	r2, r2, #1
 8017fd0:	3101      	adds	r1, #1
 8017fd2:	e7d9      	b.n	8017f88 <__s2b+0x18>
 8017fd4:	340a      	adds	r4, #10
 8017fd6:	2509      	movs	r5, #9
 8017fd8:	e7f3      	b.n	8017fc2 <__s2b+0x52>
 8017fda:	f814 3b01 	ldrb.w	r3, [r4], #1
 8017fde:	4601      	mov	r1, r0
 8017fe0:	3b30      	subs	r3, #48	; 0x30
 8017fe2:	220a      	movs	r2, #10
 8017fe4:	4630      	mov	r0, r6
 8017fe6:	f7ff ff88 	bl	8017efa <__multadd>
 8017fea:	e7eb      	b.n	8017fc4 <__s2b+0x54>

08017fec <__hi0bits>:
 8017fec:	0c02      	lsrs	r2, r0, #16
 8017fee:	0412      	lsls	r2, r2, #16
 8017ff0:	4603      	mov	r3, r0
 8017ff2:	b9b2      	cbnz	r2, 8018022 <__hi0bits+0x36>
 8017ff4:	0403      	lsls	r3, r0, #16
 8017ff6:	2010      	movs	r0, #16
 8017ff8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8017ffc:	bf04      	itt	eq
 8017ffe:	021b      	lsleq	r3, r3, #8
 8018000:	3008      	addeq	r0, #8
 8018002:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8018006:	bf04      	itt	eq
 8018008:	011b      	lsleq	r3, r3, #4
 801800a:	3004      	addeq	r0, #4
 801800c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8018010:	bf04      	itt	eq
 8018012:	009b      	lsleq	r3, r3, #2
 8018014:	3002      	addeq	r0, #2
 8018016:	2b00      	cmp	r3, #0
 8018018:	db06      	blt.n	8018028 <__hi0bits+0x3c>
 801801a:	005b      	lsls	r3, r3, #1
 801801c:	d503      	bpl.n	8018026 <__hi0bits+0x3a>
 801801e:	3001      	adds	r0, #1
 8018020:	4770      	bx	lr
 8018022:	2000      	movs	r0, #0
 8018024:	e7e8      	b.n	8017ff8 <__hi0bits+0xc>
 8018026:	2020      	movs	r0, #32
 8018028:	4770      	bx	lr

0801802a <__lo0bits>:
 801802a:	6803      	ldr	r3, [r0, #0]
 801802c:	f013 0207 	ands.w	r2, r3, #7
 8018030:	4601      	mov	r1, r0
 8018032:	d00b      	beq.n	801804c <__lo0bits+0x22>
 8018034:	07da      	lsls	r2, r3, #31
 8018036:	d423      	bmi.n	8018080 <__lo0bits+0x56>
 8018038:	0798      	lsls	r0, r3, #30
 801803a:	bf49      	itett	mi
 801803c:	085b      	lsrmi	r3, r3, #1
 801803e:	089b      	lsrpl	r3, r3, #2
 8018040:	2001      	movmi	r0, #1
 8018042:	600b      	strmi	r3, [r1, #0]
 8018044:	bf5c      	itt	pl
 8018046:	600b      	strpl	r3, [r1, #0]
 8018048:	2002      	movpl	r0, #2
 801804a:	4770      	bx	lr
 801804c:	b298      	uxth	r0, r3
 801804e:	b9a8      	cbnz	r0, 801807c <__lo0bits+0x52>
 8018050:	0c1b      	lsrs	r3, r3, #16
 8018052:	2010      	movs	r0, #16
 8018054:	f013 0fff 	tst.w	r3, #255	; 0xff
 8018058:	bf04      	itt	eq
 801805a:	0a1b      	lsreq	r3, r3, #8
 801805c:	3008      	addeq	r0, #8
 801805e:	071a      	lsls	r2, r3, #28
 8018060:	bf04      	itt	eq
 8018062:	091b      	lsreq	r3, r3, #4
 8018064:	3004      	addeq	r0, #4
 8018066:	079a      	lsls	r2, r3, #30
 8018068:	bf04      	itt	eq
 801806a:	089b      	lsreq	r3, r3, #2
 801806c:	3002      	addeq	r0, #2
 801806e:	07da      	lsls	r2, r3, #31
 8018070:	d402      	bmi.n	8018078 <__lo0bits+0x4e>
 8018072:	085b      	lsrs	r3, r3, #1
 8018074:	d006      	beq.n	8018084 <__lo0bits+0x5a>
 8018076:	3001      	adds	r0, #1
 8018078:	600b      	str	r3, [r1, #0]
 801807a:	4770      	bx	lr
 801807c:	4610      	mov	r0, r2
 801807e:	e7e9      	b.n	8018054 <__lo0bits+0x2a>
 8018080:	2000      	movs	r0, #0
 8018082:	4770      	bx	lr
 8018084:	2020      	movs	r0, #32
 8018086:	4770      	bx	lr

08018088 <__i2b>:
 8018088:	b510      	push	{r4, lr}
 801808a:	460c      	mov	r4, r1
 801808c:	2101      	movs	r1, #1
 801808e:	f7ff fee9 	bl	8017e64 <_Balloc>
 8018092:	2201      	movs	r2, #1
 8018094:	6144      	str	r4, [r0, #20]
 8018096:	6102      	str	r2, [r0, #16]
 8018098:	bd10      	pop	{r4, pc}

0801809a <__multiply>:
 801809a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801809e:	4614      	mov	r4, r2
 80180a0:	690a      	ldr	r2, [r1, #16]
 80180a2:	6923      	ldr	r3, [r4, #16]
 80180a4:	429a      	cmp	r2, r3
 80180a6:	bfb8      	it	lt
 80180a8:	460b      	movlt	r3, r1
 80180aa:	4688      	mov	r8, r1
 80180ac:	bfbc      	itt	lt
 80180ae:	46a0      	movlt	r8, r4
 80180b0:	461c      	movlt	r4, r3
 80180b2:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80180b6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80180ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80180be:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80180c2:	eb07 0609 	add.w	r6, r7, r9
 80180c6:	42b3      	cmp	r3, r6
 80180c8:	bfb8      	it	lt
 80180ca:	3101      	addlt	r1, #1
 80180cc:	f7ff feca 	bl	8017e64 <_Balloc>
 80180d0:	f100 0514 	add.w	r5, r0, #20
 80180d4:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80180d8:	462b      	mov	r3, r5
 80180da:	2200      	movs	r2, #0
 80180dc:	4573      	cmp	r3, lr
 80180de:	d316      	bcc.n	801810e <__multiply+0x74>
 80180e0:	f104 0214 	add.w	r2, r4, #20
 80180e4:	f108 0114 	add.w	r1, r8, #20
 80180e8:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80180ec:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80180f0:	9300      	str	r3, [sp, #0]
 80180f2:	9b00      	ldr	r3, [sp, #0]
 80180f4:	9201      	str	r2, [sp, #4]
 80180f6:	4293      	cmp	r3, r2
 80180f8:	d80c      	bhi.n	8018114 <__multiply+0x7a>
 80180fa:	2e00      	cmp	r6, #0
 80180fc:	dd03      	ble.n	8018106 <__multiply+0x6c>
 80180fe:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8018102:	2b00      	cmp	r3, #0
 8018104:	d05d      	beq.n	80181c2 <__multiply+0x128>
 8018106:	6106      	str	r6, [r0, #16]
 8018108:	b003      	add	sp, #12
 801810a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801810e:	f843 2b04 	str.w	r2, [r3], #4
 8018112:	e7e3      	b.n	80180dc <__multiply+0x42>
 8018114:	f8b2 b000 	ldrh.w	fp, [r2]
 8018118:	f1bb 0f00 	cmp.w	fp, #0
 801811c:	d023      	beq.n	8018166 <__multiply+0xcc>
 801811e:	4689      	mov	r9, r1
 8018120:	46ac      	mov	ip, r5
 8018122:	f04f 0800 	mov.w	r8, #0
 8018126:	f859 4b04 	ldr.w	r4, [r9], #4
 801812a:	f8dc a000 	ldr.w	sl, [ip]
 801812e:	b2a3      	uxth	r3, r4
 8018130:	fa1f fa8a 	uxth.w	sl, sl
 8018134:	fb0b a303 	mla	r3, fp, r3, sl
 8018138:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801813c:	f8dc 4000 	ldr.w	r4, [ip]
 8018140:	4443      	add	r3, r8
 8018142:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8018146:	fb0b 840a 	mla	r4, fp, sl, r8
 801814a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 801814e:	46e2      	mov	sl, ip
 8018150:	b29b      	uxth	r3, r3
 8018152:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8018156:	454f      	cmp	r7, r9
 8018158:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801815c:	f84a 3b04 	str.w	r3, [sl], #4
 8018160:	d82b      	bhi.n	80181ba <__multiply+0x120>
 8018162:	f8cc 8004 	str.w	r8, [ip, #4]
 8018166:	9b01      	ldr	r3, [sp, #4]
 8018168:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 801816c:	3204      	adds	r2, #4
 801816e:	f1ba 0f00 	cmp.w	sl, #0
 8018172:	d020      	beq.n	80181b6 <__multiply+0x11c>
 8018174:	682b      	ldr	r3, [r5, #0]
 8018176:	4689      	mov	r9, r1
 8018178:	46a8      	mov	r8, r5
 801817a:	f04f 0b00 	mov.w	fp, #0
 801817e:	f8b9 c000 	ldrh.w	ip, [r9]
 8018182:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8018186:	fb0a 440c 	mla	r4, sl, ip, r4
 801818a:	445c      	add	r4, fp
 801818c:	46c4      	mov	ip, r8
 801818e:	b29b      	uxth	r3, r3
 8018190:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8018194:	f84c 3b04 	str.w	r3, [ip], #4
 8018198:	f859 3b04 	ldr.w	r3, [r9], #4
 801819c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80181a0:	0c1b      	lsrs	r3, r3, #16
 80181a2:	fb0a b303 	mla	r3, sl, r3, fp
 80181a6:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80181aa:	454f      	cmp	r7, r9
 80181ac:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80181b0:	d805      	bhi.n	80181be <__multiply+0x124>
 80181b2:	f8c8 3004 	str.w	r3, [r8, #4]
 80181b6:	3504      	adds	r5, #4
 80181b8:	e79b      	b.n	80180f2 <__multiply+0x58>
 80181ba:	46d4      	mov	ip, sl
 80181bc:	e7b3      	b.n	8018126 <__multiply+0x8c>
 80181be:	46e0      	mov	r8, ip
 80181c0:	e7dd      	b.n	801817e <__multiply+0xe4>
 80181c2:	3e01      	subs	r6, #1
 80181c4:	e799      	b.n	80180fa <__multiply+0x60>
	...

080181c8 <__pow5mult>:
 80181c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80181cc:	4615      	mov	r5, r2
 80181ce:	f012 0203 	ands.w	r2, r2, #3
 80181d2:	4606      	mov	r6, r0
 80181d4:	460f      	mov	r7, r1
 80181d6:	d007      	beq.n	80181e8 <__pow5mult+0x20>
 80181d8:	3a01      	subs	r2, #1
 80181da:	4c21      	ldr	r4, [pc, #132]	; (8018260 <__pow5mult+0x98>)
 80181dc:	2300      	movs	r3, #0
 80181de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80181e2:	f7ff fe8a 	bl	8017efa <__multadd>
 80181e6:	4607      	mov	r7, r0
 80181e8:	10ad      	asrs	r5, r5, #2
 80181ea:	d035      	beq.n	8018258 <__pow5mult+0x90>
 80181ec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80181ee:	b93c      	cbnz	r4, 8018200 <__pow5mult+0x38>
 80181f0:	2010      	movs	r0, #16
 80181f2:	f7ff fe1d 	bl	8017e30 <malloc>
 80181f6:	6270      	str	r0, [r6, #36]	; 0x24
 80181f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80181fc:	6004      	str	r4, [r0, #0]
 80181fe:	60c4      	str	r4, [r0, #12]
 8018200:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8018204:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8018208:	b94c      	cbnz	r4, 801821e <__pow5mult+0x56>
 801820a:	f240 2171 	movw	r1, #625	; 0x271
 801820e:	4630      	mov	r0, r6
 8018210:	f7ff ff3a 	bl	8018088 <__i2b>
 8018214:	2300      	movs	r3, #0
 8018216:	f8c8 0008 	str.w	r0, [r8, #8]
 801821a:	4604      	mov	r4, r0
 801821c:	6003      	str	r3, [r0, #0]
 801821e:	f04f 0800 	mov.w	r8, #0
 8018222:	07eb      	lsls	r3, r5, #31
 8018224:	d50a      	bpl.n	801823c <__pow5mult+0x74>
 8018226:	4639      	mov	r1, r7
 8018228:	4622      	mov	r2, r4
 801822a:	4630      	mov	r0, r6
 801822c:	f7ff ff35 	bl	801809a <__multiply>
 8018230:	4639      	mov	r1, r7
 8018232:	4681      	mov	r9, r0
 8018234:	4630      	mov	r0, r6
 8018236:	f7ff fe49 	bl	8017ecc <_Bfree>
 801823a:	464f      	mov	r7, r9
 801823c:	106d      	asrs	r5, r5, #1
 801823e:	d00b      	beq.n	8018258 <__pow5mult+0x90>
 8018240:	6820      	ldr	r0, [r4, #0]
 8018242:	b938      	cbnz	r0, 8018254 <__pow5mult+0x8c>
 8018244:	4622      	mov	r2, r4
 8018246:	4621      	mov	r1, r4
 8018248:	4630      	mov	r0, r6
 801824a:	f7ff ff26 	bl	801809a <__multiply>
 801824e:	6020      	str	r0, [r4, #0]
 8018250:	f8c0 8000 	str.w	r8, [r0]
 8018254:	4604      	mov	r4, r0
 8018256:	e7e4      	b.n	8018222 <__pow5mult+0x5a>
 8018258:	4638      	mov	r0, r7
 801825a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801825e:	bf00      	nop
 8018260:	08019e40 	.word	0x08019e40

08018264 <__lshift>:
 8018264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018268:	460c      	mov	r4, r1
 801826a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801826e:	6923      	ldr	r3, [r4, #16]
 8018270:	6849      	ldr	r1, [r1, #4]
 8018272:	eb0a 0903 	add.w	r9, sl, r3
 8018276:	68a3      	ldr	r3, [r4, #8]
 8018278:	4607      	mov	r7, r0
 801827a:	4616      	mov	r6, r2
 801827c:	f109 0501 	add.w	r5, r9, #1
 8018280:	42ab      	cmp	r3, r5
 8018282:	db32      	blt.n	80182ea <__lshift+0x86>
 8018284:	4638      	mov	r0, r7
 8018286:	f7ff fded 	bl	8017e64 <_Balloc>
 801828a:	2300      	movs	r3, #0
 801828c:	4680      	mov	r8, r0
 801828e:	f100 0114 	add.w	r1, r0, #20
 8018292:	461a      	mov	r2, r3
 8018294:	4553      	cmp	r3, sl
 8018296:	db2b      	blt.n	80182f0 <__lshift+0x8c>
 8018298:	6920      	ldr	r0, [r4, #16]
 801829a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801829e:	f104 0314 	add.w	r3, r4, #20
 80182a2:	f016 021f 	ands.w	r2, r6, #31
 80182a6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80182aa:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80182ae:	d025      	beq.n	80182fc <__lshift+0x98>
 80182b0:	f1c2 0e20 	rsb	lr, r2, #32
 80182b4:	2000      	movs	r0, #0
 80182b6:	681e      	ldr	r6, [r3, #0]
 80182b8:	468a      	mov	sl, r1
 80182ba:	4096      	lsls	r6, r2
 80182bc:	4330      	orrs	r0, r6
 80182be:	f84a 0b04 	str.w	r0, [sl], #4
 80182c2:	f853 0b04 	ldr.w	r0, [r3], #4
 80182c6:	459c      	cmp	ip, r3
 80182c8:	fa20 f00e 	lsr.w	r0, r0, lr
 80182cc:	d814      	bhi.n	80182f8 <__lshift+0x94>
 80182ce:	6048      	str	r0, [r1, #4]
 80182d0:	b108      	cbz	r0, 80182d6 <__lshift+0x72>
 80182d2:	f109 0502 	add.w	r5, r9, #2
 80182d6:	3d01      	subs	r5, #1
 80182d8:	4638      	mov	r0, r7
 80182da:	f8c8 5010 	str.w	r5, [r8, #16]
 80182de:	4621      	mov	r1, r4
 80182e0:	f7ff fdf4 	bl	8017ecc <_Bfree>
 80182e4:	4640      	mov	r0, r8
 80182e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80182ea:	3101      	adds	r1, #1
 80182ec:	005b      	lsls	r3, r3, #1
 80182ee:	e7c7      	b.n	8018280 <__lshift+0x1c>
 80182f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80182f4:	3301      	adds	r3, #1
 80182f6:	e7cd      	b.n	8018294 <__lshift+0x30>
 80182f8:	4651      	mov	r1, sl
 80182fa:	e7dc      	b.n	80182b6 <__lshift+0x52>
 80182fc:	3904      	subs	r1, #4
 80182fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8018302:	f841 2f04 	str.w	r2, [r1, #4]!
 8018306:	459c      	cmp	ip, r3
 8018308:	d8f9      	bhi.n	80182fe <__lshift+0x9a>
 801830a:	e7e4      	b.n	80182d6 <__lshift+0x72>

0801830c <__mcmp>:
 801830c:	6903      	ldr	r3, [r0, #16]
 801830e:	690a      	ldr	r2, [r1, #16]
 8018310:	1a9b      	subs	r3, r3, r2
 8018312:	b530      	push	{r4, r5, lr}
 8018314:	d10c      	bne.n	8018330 <__mcmp+0x24>
 8018316:	0092      	lsls	r2, r2, #2
 8018318:	3014      	adds	r0, #20
 801831a:	3114      	adds	r1, #20
 801831c:	1884      	adds	r4, r0, r2
 801831e:	4411      	add	r1, r2
 8018320:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8018324:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8018328:	4295      	cmp	r5, r2
 801832a:	d003      	beq.n	8018334 <__mcmp+0x28>
 801832c:	d305      	bcc.n	801833a <__mcmp+0x2e>
 801832e:	2301      	movs	r3, #1
 8018330:	4618      	mov	r0, r3
 8018332:	bd30      	pop	{r4, r5, pc}
 8018334:	42a0      	cmp	r0, r4
 8018336:	d3f3      	bcc.n	8018320 <__mcmp+0x14>
 8018338:	e7fa      	b.n	8018330 <__mcmp+0x24>
 801833a:	f04f 33ff 	mov.w	r3, #4294967295
 801833e:	e7f7      	b.n	8018330 <__mcmp+0x24>

08018340 <__mdiff>:
 8018340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018344:	460d      	mov	r5, r1
 8018346:	4607      	mov	r7, r0
 8018348:	4611      	mov	r1, r2
 801834a:	4628      	mov	r0, r5
 801834c:	4614      	mov	r4, r2
 801834e:	f7ff ffdd 	bl	801830c <__mcmp>
 8018352:	1e06      	subs	r6, r0, #0
 8018354:	d108      	bne.n	8018368 <__mdiff+0x28>
 8018356:	4631      	mov	r1, r6
 8018358:	4638      	mov	r0, r7
 801835a:	f7ff fd83 	bl	8017e64 <_Balloc>
 801835e:	2301      	movs	r3, #1
 8018360:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8018364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018368:	bfa4      	itt	ge
 801836a:	4623      	movge	r3, r4
 801836c:	462c      	movge	r4, r5
 801836e:	4638      	mov	r0, r7
 8018370:	6861      	ldr	r1, [r4, #4]
 8018372:	bfa6      	itte	ge
 8018374:	461d      	movge	r5, r3
 8018376:	2600      	movge	r6, #0
 8018378:	2601      	movlt	r6, #1
 801837a:	f7ff fd73 	bl	8017e64 <_Balloc>
 801837e:	692b      	ldr	r3, [r5, #16]
 8018380:	60c6      	str	r6, [r0, #12]
 8018382:	6926      	ldr	r6, [r4, #16]
 8018384:	f105 0914 	add.w	r9, r5, #20
 8018388:	f104 0214 	add.w	r2, r4, #20
 801838c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8018390:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8018394:	f100 0514 	add.w	r5, r0, #20
 8018398:	f04f 0e00 	mov.w	lr, #0
 801839c:	f852 ab04 	ldr.w	sl, [r2], #4
 80183a0:	f859 4b04 	ldr.w	r4, [r9], #4
 80183a4:	fa1e f18a 	uxtah	r1, lr, sl
 80183a8:	b2a3      	uxth	r3, r4
 80183aa:	1ac9      	subs	r1, r1, r3
 80183ac:	0c23      	lsrs	r3, r4, #16
 80183ae:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80183b2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80183b6:	b289      	uxth	r1, r1
 80183b8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80183bc:	45c8      	cmp	r8, r9
 80183be:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80183c2:	4694      	mov	ip, r2
 80183c4:	f845 3b04 	str.w	r3, [r5], #4
 80183c8:	d8e8      	bhi.n	801839c <__mdiff+0x5c>
 80183ca:	45bc      	cmp	ip, r7
 80183cc:	d304      	bcc.n	80183d8 <__mdiff+0x98>
 80183ce:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80183d2:	b183      	cbz	r3, 80183f6 <__mdiff+0xb6>
 80183d4:	6106      	str	r6, [r0, #16]
 80183d6:	e7c5      	b.n	8018364 <__mdiff+0x24>
 80183d8:	f85c 1b04 	ldr.w	r1, [ip], #4
 80183dc:	fa1e f381 	uxtah	r3, lr, r1
 80183e0:	141a      	asrs	r2, r3, #16
 80183e2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80183e6:	b29b      	uxth	r3, r3
 80183e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80183ec:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80183f0:	f845 3b04 	str.w	r3, [r5], #4
 80183f4:	e7e9      	b.n	80183ca <__mdiff+0x8a>
 80183f6:	3e01      	subs	r6, #1
 80183f8:	e7e9      	b.n	80183ce <__mdiff+0x8e>
	...

080183fc <__ulp>:
 80183fc:	4b12      	ldr	r3, [pc, #72]	; (8018448 <__ulp+0x4c>)
 80183fe:	ee10 2a90 	vmov	r2, s1
 8018402:	401a      	ands	r2, r3
 8018404:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8018408:	2b00      	cmp	r3, #0
 801840a:	dd04      	ble.n	8018416 <__ulp+0x1a>
 801840c:	2000      	movs	r0, #0
 801840e:	4619      	mov	r1, r3
 8018410:	ec41 0b10 	vmov	d0, r0, r1
 8018414:	4770      	bx	lr
 8018416:	425b      	negs	r3, r3
 8018418:	151b      	asrs	r3, r3, #20
 801841a:	2b13      	cmp	r3, #19
 801841c:	f04f 0000 	mov.w	r0, #0
 8018420:	f04f 0100 	mov.w	r1, #0
 8018424:	dc04      	bgt.n	8018430 <__ulp+0x34>
 8018426:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 801842a:	fa42 f103 	asr.w	r1, r2, r3
 801842e:	e7ef      	b.n	8018410 <__ulp+0x14>
 8018430:	3b14      	subs	r3, #20
 8018432:	2b1e      	cmp	r3, #30
 8018434:	f04f 0201 	mov.w	r2, #1
 8018438:	bfda      	itte	le
 801843a:	f1c3 031f 	rsble	r3, r3, #31
 801843e:	fa02 f303 	lslle.w	r3, r2, r3
 8018442:	4613      	movgt	r3, r2
 8018444:	4618      	mov	r0, r3
 8018446:	e7e3      	b.n	8018410 <__ulp+0x14>
 8018448:	7ff00000 	.word	0x7ff00000

0801844c <__b2d>:
 801844c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801844e:	6905      	ldr	r5, [r0, #16]
 8018450:	f100 0714 	add.w	r7, r0, #20
 8018454:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8018458:	1f2e      	subs	r6, r5, #4
 801845a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801845e:	4620      	mov	r0, r4
 8018460:	f7ff fdc4 	bl	8017fec <__hi0bits>
 8018464:	f1c0 0320 	rsb	r3, r0, #32
 8018468:	280a      	cmp	r0, #10
 801846a:	600b      	str	r3, [r1, #0]
 801846c:	f8df c074 	ldr.w	ip, [pc, #116]	; 80184e4 <__b2d+0x98>
 8018470:	dc14      	bgt.n	801849c <__b2d+0x50>
 8018472:	f1c0 0e0b 	rsb	lr, r0, #11
 8018476:	fa24 f10e 	lsr.w	r1, r4, lr
 801847a:	42b7      	cmp	r7, r6
 801847c:	ea41 030c 	orr.w	r3, r1, ip
 8018480:	bf34      	ite	cc
 8018482:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8018486:	2100      	movcs	r1, #0
 8018488:	3015      	adds	r0, #21
 801848a:	fa04 f000 	lsl.w	r0, r4, r0
 801848e:	fa21 f10e 	lsr.w	r1, r1, lr
 8018492:	ea40 0201 	orr.w	r2, r0, r1
 8018496:	ec43 2b10 	vmov	d0, r2, r3
 801849a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801849c:	42b7      	cmp	r7, r6
 801849e:	bf3a      	itte	cc
 80184a0:	f1a5 0608 	subcc.w	r6, r5, #8
 80184a4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80184a8:	2100      	movcs	r1, #0
 80184aa:	380b      	subs	r0, #11
 80184ac:	d015      	beq.n	80184da <__b2d+0x8e>
 80184ae:	4084      	lsls	r4, r0
 80184b0:	f1c0 0520 	rsb	r5, r0, #32
 80184b4:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 80184b8:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 80184bc:	42be      	cmp	r6, r7
 80184be:	fa21 fc05 	lsr.w	ip, r1, r5
 80184c2:	ea44 030c 	orr.w	r3, r4, ip
 80184c6:	bf8c      	ite	hi
 80184c8:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80184cc:	2400      	movls	r4, #0
 80184ce:	fa01 f000 	lsl.w	r0, r1, r0
 80184d2:	40ec      	lsrs	r4, r5
 80184d4:	ea40 0204 	orr.w	r2, r0, r4
 80184d8:	e7dd      	b.n	8018496 <__b2d+0x4a>
 80184da:	ea44 030c 	orr.w	r3, r4, ip
 80184de:	460a      	mov	r2, r1
 80184e0:	e7d9      	b.n	8018496 <__b2d+0x4a>
 80184e2:	bf00      	nop
 80184e4:	3ff00000 	.word	0x3ff00000

080184e8 <__d2b>:
 80184e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80184ec:	460e      	mov	r6, r1
 80184ee:	2101      	movs	r1, #1
 80184f0:	ec59 8b10 	vmov	r8, r9, d0
 80184f4:	4615      	mov	r5, r2
 80184f6:	f7ff fcb5 	bl	8017e64 <_Balloc>
 80184fa:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80184fe:	4607      	mov	r7, r0
 8018500:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018504:	bb34      	cbnz	r4, 8018554 <__d2b+0x6c>
 8018506:	9301      	str	r3, [sp, #4]
 8018508:	f1b8 0300 	subs.w	r3, r8, #0
 801850c:	d027      	beq.n	801855e <__d2b+0x76>
 801850e:	a802      	add	r0, sp, #8
 8018510:	f840 3d08 	str.w	r3, [r0, #-8]!
 8018514:	f7ff fd89 	bl	801802a <__lo0bits>
 8018518:	9900      	ldr	r1, [sp, #0]
 801851a:	b1f0      	cbz	r0, 801855a <__d2b+0x72>
 801851c:	9a01      	ldr	r2, [sp, #4]
 801851e:	f1c0 0320 	rsb	r3, r0, #32
 8018522:	fa02 f303 	lsl.w	r3, r2, r3
 8018526:	430b      	orrs	r3, r1
 8018528:	40c2      	lsrs	r2, r0
 801852a:	617b      	str	r3, [r7, #20]
 801852c:	9201      	str	r2, [sp, #4]
 801852e:	9b01      	ldr	r3, [sp, #4]
 8018530:	61bb      	str	r3, [r7, #24]
 8018532:	2b00      	cmp	r3, #0
 8018534:	bf14      	ite	ne
 8018536:	2102      	movne	r1, #2
 8018538:	2101      	moveq	r1, #1
 801853a:	6139      	str	r1, [r7, #16]
 801853c:	b1c4      	cbz	r4, 8018570 <__d2b+0x88>
 801853e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8018542:	4404      	add	r4, r0
 8018544:	6034      	str	r4, [r6, #0]
 8018546:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801854a:	6028      	str	r0, [r5, #0]
 801854c:	4638      	mov	r0, r7
 801854e:	b003      	add	sp, #12
 8018550:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018554:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8018558:	e7d5      	b.n	8018506 <__d2b+0x1e>
 801855a:	6179      	str	r1, [r7, #20]
 801855c:	e7e7      	b.n	801852e <__d2b+0x46>
 801855e:	a801      	add	r0, sp, #4
 8018560:	f7ff fd63 	bl	801802a <__lo0bits>
 8018564:	9b01      	ldr	r3, [sp, #4]
 8018566:	617b      	str	r3, [r7, #20]
 8018568:	2101      	movs	r1, #1
 801856a:	6139      	str	r1, [r7, #16]
 801856c:	3020      	adds	r0, #32
 801856e:	e7e5      	b.n	801853c <__d2b+0x54>
 8018570:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8018574:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8018578:	6030      	str	r0, [r6, #0]
 801857a:	6918      	ldr	r0, [r3, #16]
 801857c:	f7ff fd36 	bl	8017fec <__hi0bits>
 8018580:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8018584:	e7e1      	b.n	801854a <__d2b+0x62>

08018586 <__ratio>:
 8018586:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801858a:	4688      	mov	r8, r1
 801858c:	4669      	mov	r1, sp
 801858e:	4681      	mov	r9, r0
 8018590:	f7ff ff5c 	bl	801844c <__b2d>
 8018594:	a901      	add	r1, sp, #4
 8018596:	4640      	mov	r0, r8
 8018598:	ec57 6b10 	vmov	r6, r7, d0
 801859c:	f7ff ff56 	bl	801844c <__b2d>
 80185a0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80185a4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80185a8:	eba3 0c02 	sub.w	ip, r3, r2
 80185ac:	e9dd 3200 	ldrd	r3, r2, [sp]
 80185b0:	1a9b      	subs	r3, r3, r2
 80185b2:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80185b6:	ec5b ab10 	vmov	sl, fp, d0
 80185ba:	2b00      	cmp	r3, #0
 80185bc:	bfce      	itee	gt
 80185be:	463a      	movgt	r2, r7
 80185c0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80185c4:	465a      	movle	r2, fp
 80185c6:	4659      	mov	r1, fp
 80185c8:	463d      	mov	r5, r7
 80185ca:	bfd4      	ite	le
 80185cc:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 80185d0:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 80185d4:	4630      	mov	r0, r6
 80185d6:	ee10 2a10 	vmov	r2, s0
 80185da:	460b      	mov	r3, r1
 80185dc:	4629      	mov	r1, r5
 80185de:	f7e8 f94d 	bl	800087c <__aeabi_ddiv>
 80185e2:	ec41 0b10 	vmov	d0, r0, r1
 80185e6:	b003      	add	sp, #12
 80185e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080185ec <__copybits>:
 80185ec:	3901      	subs	r1, #1
 80185ee:	b510      	push	{r4, lr}
 80185f0:	1149      	asrs	r1, r1, #5
 80185f2:	6914      	ldr	r4, [r2, #16]
 80185f4:	3101      	adds	r1, #1
 80185f6:	f102 0314 	add.w	r3, r2, #20
 80185fa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80185fe:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8018602:	42a3      	cmp	r3, r4
 8018604:	4602      	mov	r2, r0
 8018606:	d303      	bcc.n	8018610 <__copybits+0x24>
 8018608:	2300      	movs	r3, #0
 801860a:	428a      	cmp	r2, r1
 801860c:	d305      	bcc.n	801861a <__copybits+0x2e>
 801860e:	bd10      	pop	{r4, pc}
 8018610:	f853 2b04 	ldr.w	r2, [r3], #4
 8018614:	f840 2b04 	str.w	r2, [r0], #4
 8018618:	e7f3      	b.n	8018602 <__copybits+0x16>
 801861a:	f842 3b04 	str.w	r3, [r2], #4
 801861e:	e7f4      	b.n	801860a <__copybits+0x1e>

08018620 <__any_on>:
 8018620:	f100 0214 	add.w	r2, r0, #20
 8018624:	6900      	ldr	r0, [r0, #16]
 8018626:	114b      	asrs	r3, r1, #5
 8018628:	4298      	cmp	r0, r3
 801862a:	b510      	push	{r4, lr}
 801862c:	db11      	blt.n	8018652 <__any_on+0x32>
 801862e:	dd0a      	ble.n	8018646 <__any_on+0x26>
 8018630:	f011 011f 	ands.w	r1, r1, #31
 8018634:	d007      	beq.n	8018646 <__any_on+0x26>
 8018636:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801863a:	fa24 f001 	lsr.w	r0, r4, r1
 801863e:	fa00 f101 	lsl.w	r1, r0, r1
 8018642:	428c      	cmp	r4, r1
 8018644:	d10b      	bne.n	801865e <__any_on+0x3e>
 8018646:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801864a:	4293      	cmp	r3, r2
 801864c:	d803      	bhi.n	8018656 <__any_on+0x36>
 801864e:	2000      	movs	r0, #0
 8018650:	bd10      	pop	{r4, pc}
 8018652:	4603      	mov	r3, r0
 8018654:	e7f7      	b.n	8018646 <__any_on+0x26>
 8018656:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801865a:	2900      	cmp	r1, #0
 801865c:	d0f5      	beq.n	801864a <__any_on+0x2a>
 801865e:	2001      	movs	r0, #1
 8018660:	e7f6      	b.n	8018650 <__any_on+0x30>

08018662 <_calloc_r>:
 8018662:	b538      	push	{r3, r4, r5, lr}
 8018664:	fb02 f401 	mul.w	r4, r2, r1
 8018668:	4621      	mov	r1, r4
 801866a:	f000 f857 	bl	801871c <_malloc_r>
 801866e:	4605      	mov	r5, r0
 8018670:	b118      	cbz	r0, 801867a <_calloc_r+0x18>
 8018672:	4622      	mov	r2, r4
 8018674:	2100      	movs	r1, #0
 8018676:	f7fc fcaa 	bl	8014fce <memset>
 801867a:	4628      	mov	r0, r5
 801867c:	bd38      	pop	{r3, r4, r5, pc}
	...

08018680 <_free_r>:
 8018680:	b538      	push	{r3, r4, r5, lr}
 8018682:	4605      	mov	r5, r0
 8018684:	2900      	cmp	r1, #0
 8018686:	d045      	beq.n	8018714 <_free_r+0x94>
 8018688:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801868c:	1f0c      	subs	r4, r1, #4
 801868e:	2b00      	cmp	r3, #0
 8018690:	bfb8      	it	lt
 8018692:	18e4      	addlt	r4, r4, r3
 8018694:	f000 fe30 	bl	80192f8 <__malloc_lock>
 8018698:	4a1f      	ldr	r2, [pc, #124]	; (8018718 <_free_r+0x98>)
 801869a:	6813      	ldr	r3, [r2, #0]
 801869c:	4610      	mov	r0, r2
 801869e:	b933      	cbnz	r3, 80186ae <_free_r+0x2e>
 80186a0:	6063      	str	r3, [r4, #4]
 80186a2:	6014      	str	r4, [r2, #0]
 80186a4:	4628      	mov	r0, r5
 80186a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80186aa:	f000 be26 	b.w	80192fa <__malloc_unlock>
 80186ae:	42a3      	cmp	r3, r4
 80186b0:	d90c      	bls.n	80186cc <_free_r+0x4c>
 80186b2:	6821      	ldr	r1, [r4, #0]
 80186b4:	1862      	adds	r2, r4, r1
 80186b6:	4293      	cmp	r3, r2
 80186b8:	bf04      	itt	eq
 80186ba:	681a      	ldreq	r2, [r3, #0]
 80186bc:	685b      	ldreq	r3, [r3, #4]
 80186be:	6063      	str	r3, [r4, #4]
 80186c0:	bf04      	itt	eq
 80186c2:	1852      	addeq	r2, r2, r1
 80186c4:	6022      	streq	r2, [r4, #0]
 80186c6:	6004      	str	r4, [r0, #0]
 80186c8:	e7ec      	b.n	80186a4 <_free_r+0x24>
 80186ca:	4613      	mov	r3, r2
 80186cc:	685a      	ldr	r2, [r3, #4]
 80186ce:	b10a      	cbz	r2, 80186d4 <_free_r+0x54>
 80186d0:	42a2      	cmp	r2, r4
 80186d2:	d9fa      	bls.n	80186ca <_free_r+0x4a>
 80186d4:	6819      	ldr	r1, [r3, #0]
 80186d6:	1858      	adds	r0, r3, r1
 80186d8:	42a0      	cmp	r0, r4
 80186da:	d10b      	bne.n	80186f4 <_free_r+0x74>
 80186dc:	6820      	ldr	r0, [r4, #0]
 80186de:	4401      	add	r1, r0
 80186e0:	1858      	adds	r0, r3, r1
 80186e2:	4282      	cmp	r2, r0
 80186e4:	6019      	str	r1, [r3, #0]
 80186e6:	d1dd      	bne.n	80186a4 <_free_r+0x24>
 80186e8:	6810      	ldr	r0, [r2, #0]
 80186ea:	6852      	ldr	r2, [r2, #4]
 80186ec:	605a      	str	r2, [r3, #4]
 80186ee:	4401      	add	r1, r0
 80186f0:	6019      	str	r1, [r3, #0]
 80186f2:	e7d7      	b.n	80186a4 <_free_r+0x24>
 80186f4:	d902      	bls.n	80186fc <_free_r+0x7c>
 80186f6:	230c      	movs	r3, #12
 80186f8:	602b      	str	r3, [r5, #0]
 80186fa:	e7d3      	b.n	80186a4 <_free_r+0x24>
 80186fc:	6820      	ldr	r0, [r4, #0]
 80186fe:	1821      	adds	r1, r4, r0
 8018700:	428a      	cmp	r2, r1
 8018702:	bf04      	itt	eq
 8018704:	6811      	ldreq	r1, [r2, #0]
 8018706:	6852      	ldreq	r2, [r2, #4]
 8018708:	6062      	str	r2, [r4, #4]
 801870a:	bf04      	itt	eq
 801870c:	1809      	addeq	r1, r1, r0
 801870e:	6021      	streq	r1, [r4, #0]
 8018710:	605c      	str	r4, [r3, #4]
 8018712:	e7c7      	b.n	80186a4 <_free_r+0x24>
 8018714:	bd38      	pop	{r3, r4, r5, pc}
 8018716:	bf00      	nop
 8018718:	20041334 	.word	0x20041334

0801871c <_malloc_r>:
 801871c:	b570      	push	{r4, r5, r6, lr}
 801871e:	1ccd      	adds	r5, r1, #3
 8018720:	f025 0503 	bic.w	r5, r5, #3
 8018724:	3508      	adds	r5, #8
 8018726:	2d0c      	cmp	r5, #12
 8018728:	bf38      	it	cc
 801872a:	250c      	movcc	r5, #12
 801872c:	2d00      	cmp	r5, #0
 801872e:	4606      	mov	r6, r0
 8018730:	db01      	blt.n	8018736 <_malloc_r+0x1a>
 8018732:	42a9      	cmp	r1, r5
 8018734:	d903      	bls.n	801873e <_malloc_r+0x22>
 8018736:	230c      	movs	r3, #12
 8018738:	6033      	str	r3, [r6, #0]
 801873a:	2000      	movs	r0, #0
 801873c:	bd70      	pop	{r4, r5, r6, pc}
 801873e:	f000 fddb 	bl	80192f8 <__malloc_lock>
 8018742:	4a21      	ldr	r2, [pc, #132]	; (80187c8 <_malloc_r+0xac>)
 8018744:	6814      	ldr	r4, [r2, #0]
 8018746:	4621      	mov	r1, r4
 8018748:	b991      	cbnz	r1, 8018770 <_malloc_r+0x54>
 801874a:	4c20      	ldr	r4, [pc, #128]	; (80187cc <_malloc_r+0xb0>)
 801874c:	6823      	ldr	r3, [r4, #0]
 801874e:	b91b      	cbnz	r3, 8018758 <_malloc_r+0x3c>
 8018750:	4630      	mov	r0, r6
 8018752:	f000 fc91 	bl	8019078 <_sbrk_r>
 8018756:	6020      	str	r0, [r4, #0]
 8018758:	4629      	mov	r1, r5
 801875a:	4630      	mov	r0, r6
 801875c:	f000 fc8c 	bl	8019078 <_sbrk_r>
 8018760:	1c43      	adds	r3, r0, #1
 8018762:	d124      	bne.n	80187ae <_malloc_r+0x92>
 8018764:	230c      	movs	r3, #12
 8018766:	6033      	str	r3, [r6, #0]
 8018768:	4630      	mov	r0, r6
 801876a:	f000 fdc6 	bl	80192fa <__malloc_unlock>
 801876e:	e7e4      	b.n	801873a <_malloc_r+0x1e>
 8018770:	680b      	ldr	r3, [r1, #0]
 8018772:	1b5b      	subs	r3, r3, r5
 8018774:	d418      	bmi.n	80187a8 <_malloc_r+0x8c>
 8018776:	2b0b      	cmp	r3, #11
 8018778:	d90f      	bls.n	801879a <_malloc_r+0x7e>
 801877a:	600b      	str	r3, [r1, #0]
 801877c:	50cd      	str	r5, [r1, r3]
 801877e:	18cc      	adds	r4, r1, r3
 8018780:	4630      	mov	r0, r6
 8018782:	f000 fdba 	bl	80192fa <__malloc_unlock>
 8018786:	f104 000b 	add.w	r0, r4, #11
 801878a:	1d23      	adds	r3, r4, #4
 801878c:	f020 0007 	bic.w	r0, r0, #7
 8018790:	1ac3      	subs	r3, r0, r3
 8018792:	d0d3      	beq.n	801873c <_malloc_r+0x20>
 8018794:	425a      	negs	r2, r3
 8018796:	50e2      	str	r2, [r4, r3]
 8018798:	e7d0      	b.n	801873c <_malloc_r+0x20>
 801879a:	428c      	cmp	r4, r1
 801879c:	684b      	ldr	r3, [r1, #4]
 801879e:	bf16      	itet	ne
 80187a0:	6063      	strne	r3, [r4, #4]
 80187a2:	6013      	streq	r3, [r2, #0]
 80187a4:	460c      	movne	r4, r1
 80187a6:	e7eb      	b.n	8018780 <_malloc_r+0x64>
 80187a8:	460c      	mov	r4, r1
 80187aa:	6849      	ldr	r1, [r1, #4]
 80187ac:	e7cc      	b.n	8018748 <_malloc_r+0x2c>
 80187ae:	1cc4      	adds	r4, r0, #3
 80187b0:	f024 0403 	bic.w	r4, r4, #3
 80187b4:	42a0      	cmp	r0, r4
 80187b6:	d005      	beq.n	80187c4 <_malloc_r+0xa8>
 80187b8:	1a21      	subs	r1, r4, r0
 80187ba:	4630      	mov	r0, r6
 80187bc:	f000 fc5c 	bl	8019078 <_sbrk_r>
 80187c0:	3001      	adds	r0, #1
 80187c2:	d0cf      	beq.n	8018764 <_malloc_r+0x48>
 80187c4:	6025      	str	r5, [r4, #0]
 80187c6:	e7db      	b.n	8018780 <_malloc_r+0x64>
 80187c8:	20041334 	.word	0x20041334
 80187cc:	20041338 	.word	0x20041338

080187d0 <__ssputs_r>:
 80187d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80187d4:	688e      	ldr	r6, [r1, #8]
 80187d6:	429e      	cmp	r6, r3
 80187d8:	4682      	mov	sl, r0
 80187da:	460c      	mov	r4, r1
 80187dc:	4690      	mov	r8, r2
 80187de:	4699      	mov	r9, r3
 80187e0:	d837      	bhi.n	8018852 <__ssputs_r+0x82>
 80187e2:	898a      	ldrh	r2, [r1, #12]
 80187e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80187e8:	d031      	beq.n	801884e <__ssputs_r+0x7e>
 80187ea:	6825      	ldr	r5, [r4, #0]
 80187ec:	6909      	ldr	r1, [r1, #16]
 80187ee:	1a6f      	subs	r7, r5, r1
 80187f0:	6965      	ldr	r5, [r4, #20]
 80187f2:	2302      	movs	r3, #2
 80187f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80187f8:	fb95 f5f3 	sdiv	r5, r5, r3
 80187fc:	f109 0301 	add.w	r3, r9, #1
 8018800:	443b      	add	r3, r7
 8018802:	429d      	cmp	r5, r3
 8018804:	bf38      	it	cc
 8018806:	461d      	movcc	r5, r3
 8018808:	0553      	lsls	r3, r2, #21
 801880a:	d530      	bpl.n	801886e <__ssputs_r+0x9e>
 801880c:	4629      	mov	r1, r5
 801880e:	f7ff ff85 	bl	801871c <_malloc_r>
 8018812:	4606      	mov	r6, r0
 8018814:	b950      	cbnz	r0, 801882c <__ssputs_r+0x5c>
 8018816:	230c      	movs	r3, #12
 8018818:	f8ca 3000 	str.w	r3, [sl]
 801881c:	89a3      	ldrh	r3, [r4, #12]
 801881e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018822:	81a3      	strh	r3, [r4, #12]
 8018824:	f04f 30ff 	mov.w	r0, #4294967295
 8018828:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801882c:	463a      	mov	r2, r7
 801882e:	6921      	ldr	r1, [r4, #16]
 8018830:	f7fc fbc2 	bl	8014fb8 <memcpy>
 8018834:	89a3      	ldrh	r3, [r4, #12]
 8018836:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801883a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801883e:	81a3      	strh	r3, [r4, #12]
 8018840:	6126      	str	r6, [r4, #16]
 8018842:	6165      	str	r5, [r4, #20]
 8018844:	443e      	add	r6, r7
 8018846:	1bed      	subs	r5, r5, r7
 8018848:	6026      	str	r6, [r4, #0]
 801884a:	60a5      	str	r5, [r4, #8]
 801884c:	464e      	mov	r6, r9
 801884e:	454e      	cmp	r6, r9
 8018850:	d900      	bls.n	8018854 <__ssputs_r+0x84>
 8018852:	464e      	mov	r6, r9
 8018854:	4632      	mov	r2, r6
 8018856:	4641      	mov	r1, r8
 8018858:	6820      	ldr	r0, [r4, #0]
 801885a:	f000 fd34 	bl	80192c6 <memmove>
 801885e:	68a3      	ldr	r3, [r4, #8]
 8018860:	1b9b      	subs	r3, r3, r6
 8018862:	60a3      	str	r3, [r4, #8]
 8018864:	6823      	ldr	r3, [r4, #0]
 8018866:	441e      	add	r6, r3
 8018868:	6026      	str	r6, [r4, #0]
 801886a:	2000      	movs	r0, #0
 801886c:	e7dc      	b.n	8018828 <__ssputs_r+0x58>
 801886e:	462a      	mov	r2, r5
 8018870:	f000 fd44 	bl	80192fc <_realloc_r>
 8018874:	4606      	mov	r6, r0
 8018876:	2800      	cmp	r0, #0
 8018878:	d1e2      	bne.n	8018840 <__ssputs_r+0x70>
 801887a:	6921      	ldr	r1, [r4, #16]
 801887c:	4650      	mov	r0, sl
 801887e:	f7ff feff 	bl	8018680 <_free_r>
 8018882:	e7c8      	b.n	8018816 <__ssputs_r+0x46>

08018884 <_svfiprintf_r>:
 8018884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018888:	461d      	mov	r5, r3
 801888a:	898b      	ldrh	r3, [r1, #12]
 801888c:	061f      	lsls	r7, r3, #24
 801888e:	b09d      	sub	sp, #116	; 0x74
 8018890:	4680      	mov	r8, r0
 8018892:	460c      	mov	r4, r1
 8018894:	4616      	mov	r6, r2
 8018896:	d50f      	bpl.n	80188b8 <_svfiprintf_r+0x34>
 8018898:	690b      	ldr	r3, [r1, #16]
 801889a:	b96b      	cbnz	r3, 80188b8 <_svfiprintf_r+0x34>
 801889c:	2140      	movs	r1, #64	; 0x40
 801889e:	f7ff ff3d 	bl	801871c <_malloc_r>
 80188a2:	6020      	str	r0, [r4, #0]
 80188a4:	6120      	str	r0, [r4, #16]
 80188a6:	b928      	cbnz	r0, 80188b4 <_svfiprintf_r+0x30>
 80188a8:	230c      	movs	r3, #12
 80188aa:	f8c8 3000 	str.w	r3, [r8]
 80188ae:	f04f 30ff 	mov.w	r0, #4294967295
 80188b2:	e0c8      	b.n	8018a46 <_svfiprintf_r+0x1c2>
 80188b4:	2340      	movs	r3, #64	; 0x40
 80188b6:	6163      	str	r3, [r4, #20]
 80188b8:	2300      	movs	r3, #0
 80188ba:	9309      	str	r3, [sp, #36]	; 0x24
 80188bc:	2320      	movs	r3, #32
 80188be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80188c2:	2330      	movs	r3, #48	; 0x30
 80188c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80188c8:	9503      	str	r5, [sp, #12]
 80188ca:	f04f 0b01 	mov.w	fp, #1
 80188ce:	4637      	mov	r7, r6
 80188d0:	463d      	mov	r5, r7
 80188d2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80188d6:	b10b      	cbz	r3, 80188dc <_svfiprintf_r+0x58>
 80188d8:	2b25      	cmp	r3, #37	; 0x25
 80188da:	d13e      	bne.n	801895a <_svfiprintf_r+0xd6>
 80188dc:	ebb7 0a06 	subs.w	sl, r7, r6
 80188e0:	d00b      	beq.n	80188fa <_svfiprintf_r+0x76>
 80188e2:	4653      	mov	r3, sl
 80188e4:	4632      	mov	r2, r6
 80188e6:	4621      	mov	r1, r4
 80188e8:	4640      	mov	r0, r8
 80188ea:	f7ff ff71 	bl	80187d0 <__ssputs_r>
 80188ee:	3001      	adds	r0, #1
 80188f0:	f000 80a4 	beq.w	8018a3c <_svfiprintf_r+0x1b8>
 80188f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80188f6:	4453      	add	r3, sl
 80188f8:	9309      	str	r3, [sp, #36]	; 0x24
 80188fa:	783b      	ldrb	r3, [r7, #0]
 80188fc:	2b00      	cmp	r3, #0
 80188fe:	f000 809d 	beq.w	8018a3c <_svfiprintf_r+0x1b8>
 8018902:	2300      	movs	r3, #0
 8018904:	f04f 32ff 	mov.w	r2, #4294967295
 8018908:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801890c:	9304      	str	r3, [sp, #16]
 801890e:	9307      	str	r3, [sp, #28]
 8018910:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018914:	931a      	str	r3, [sp, #104]	; 0x68
 8018916:	462f      	mov	r7, r5
 8018918:	2205      	movs	r2, #5
 801891a:	f817 1b01 	ldrb.w	r1, [r7], #1
 801891e:	4850      	ldr	r0, [pc, #320]	; (8018a60 <_svfiprintf_r+0x1dc>)
 8018920:	f7e7 fc76 	bl	8000210 <memchr>
 8018924:	9b04      	ldr	r3, [sp, #16]
 8018926:	b9d0      	cbnz	r0, 801895e <_svfiprintf_r+0xda>
 8018928:	06d9      	lsls	r1, r3, #27
 801892a:	bf44      	itt	mi
 801892c:	2220      	movmi	r2, #32
 801892e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8018932:	071a      	lsls	r2, r3, #28
 8018934:	bf44      	itt	mi
 8018936:	222b      	movmi	r2, #43	; 0x2b
 8018938:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801893c:	782a      	ldrb	r2, [r5, #0]
 801893e:	2a2a      	cmp	r2, #42	; 0x2a
 8018940:	d015      	beq.n	801896e <_svfiprintf_r+0xea>
 8018942:	9a07      	ldr	r2, [sp, #28]
 8018944:	462f      	mov	r7, r5
 8018946:	2000      	movs	r0, #0
 8018948:	250a      	movs	r5, #10
 801894a:	4639      	mov	r1, r7
 801894c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018950:	3b30      	subs	r3, #48	; 0x30
 8018952:	2b09      	cmp	r3, #9
 8018954:	d94d      	bls.n	80189f2 <_svfiprintf_r+0x16e>
 8018956:	b1b8      	cbz	r0, 8018988 <_svfiprintf_r+0x104>
 8018958:	e00f      	b.n	801897a <_svfiprintf_r+0xf6>
 801895a:	462f      	mov	r7, r5
 801895c:	e7b8      	b.n	80188d0 <_svfiprintf_r+0x4c>
 801895e:	4a40      	ldr	r2, [pc, #256]	; (8018a60 <_svfiprintf_r+0x1dc>)
 8018960:	1a80      	subs	r0, r0, r2
 8018962:	fa0b f000 	lsl.w	r0, fp, r0
 8018966:	4318      	orrs	r0, r3
 8018968:	9004      	str	r0, [sp, #16]
 801896a:	463d      	mov	r5, r7
 801896c:	e7d3      	b.n	8018916 <_svfiprintf_r+0x92>
 801896e:	9a03      	ldr	r2, [sp, #12]
 8018970:	1d11      	adds	r1, r2, #4
 8018972:	6812      	ldr	r2, [r2, #0]
 8018974:	9103      	str	r1, [sp, #12]
 8018976:	2a00      	cmp	r2, #0
 8018978:	db01      	blt.n	801897e <_svfiprintf_r+0xfa>
 801897a:	9207      	str	r2, [sp, #28]
 801897c:	e004      	b.n	8018988 <_svfiprintf_r+0x104>
 801897e:	4252      	negs	r2, r2
 8018980:	f043 0302 	orr.w	r3, r3, #2
 8018984:	9207      	str	r2, [sp, #28]
 8018986:	9304      	str	r3, [sp, #16]
 8018988:	783b      	ldrb	r3, [r7, #0]
 801898a:	2b2e      	cmp	r3, #46	; 0x2e
 801898c:	d10c      	bne.n	80189a8 <_svfiprintf_r+0x124>
 801898e:	787b      	ldrb	r3, [r7, #1]
 8018990:	2b2a      	cmp	r3, #42	; 0x2a
 8018992:	d133      	bne.n	80189fc <_svfiprintf_r+0x178>
 8018994:	9b03      	ldr	r3, [sp, #12]
 8018996:	1d1a      	adds	r2, r3, #4
 8018998:	681b      	ldr	r3, [r3, #0]
 801899a:	9203      	str	r2, [sp, #12]
 801899c:	2b00      	cmp	r3, #0
 801899e:	bfb8      	it	lt
 80189a0:	f04f 33ff 	movlt.w	r3, #4294967295
 80189a4:	3702      	adds	r7, #2
 80189a6:	9305      	str	r3, [sp, #20]
 80189a8:	4d2e      	ldr	r5, [pc, #184]	; (8018a64 <_svfiprintf_r+0x1e0>)
 80189aa:	7839      	ldrb	r1, [r7, #0]
 80189ac:	2203      	movs	r2, #3
 80189ae:	4628      	mov	r0, r5
 80189b0:	f7e7 fc2e 	bl	8000210 <memchr>
 80189b4:	b138      	cbz	r0, 80189c6 <_svfiprintf_r+0x142>
 80189b6:	2340      	movs	r3, #64	; 0x40
 80189b8:	1b40      	subs	r0, r0, r5
 80189ba:	fa03 f000 	lsl.w	r0, r3, r0
 80189be:	9b04      	ldr	r3, [sp, #16]
 80189c0:	4303      	orrs	r3, r0
 80189c2:	3701      	adds	r7, #1
 80189c4:	9304      	str	r3, [sp, #16]
 80189c6:	7839      	ldrb	r1, [r7, #0]
 80189c8:	4827      	ldr	r0, [pc, #156]	; (8018a68 <_svfiprintf_r+0x1e4>)
 80189ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80189ce:	2206      	movs	r2, #6
 80189d0:	1c7e      	adds	r6, r7, #1
 80189d2:	f7e7 fc1d 	bl	8000210 <memchr>
 80189d6:	2800      	cmp	r0, #0
 80189d8:	d038      	beq.n	8018a4c <_svfiprintf_r+0x1c8>
 80189da:	4b24      	ldr	r3, [pc, #144]	; (8018a6c <_svfiprintf_r+0x1e8>)
 80189dc:	bb13      	cbnz	r3, 8018a24 <_svfiprintf_r+0x1a0>
 80189de:	9b03      	ldr	r3, [sp, #12]
 80189e0:	3307      	adds	r3, #7
 80189e2:	f023 0307 	bic.w	r3, r3, #7
 80189e6:	3308      	adds	r3, #8
 80189e8:	9303      	str	r3, [sp, #12]
 80189ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80189ec:	444b      	add	r3, r9
 80189ee:	9309      	str	r3, [sp, #36]	; 0x24
 80189f0:	e76d      	b.n	80188ce <_svfiprintf_r+0x4a>
 80189f2:	fb05 3202 	mla	r2, r5, r2, r3
 80189f6:	2001      	movs	r0, #1
 80189f8:	460f      	mov	r7, r1
 80189fa:	e7a6      	b.n	801894a <_svfiprintf_r+0xc6>
 80189fc:	2300      	movs	r3, #0
 80189fe:	3701      	adds	r7, #1
 8018a00:	9305      	str	r3, [sp, #20]
 8018a02:	4619      	mov	r1, r3
 8018a04:	250a      	movs	r5, #10
 8018a06:	4638      	mov	r0, r7
 8018a08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018a0c:	3a30      	subs	r2, #48	; 0x30
 8018a0e:	2a09      	cmp	r2, #9
 8018a10:	d903      	bls.n	8018a1a <_svfiprintf_r+0x196>
 8018a12:	2b00      	cmp	r3, #0
 8018a14:	d0c8      	beq.n	80189a8 <_svfiprintf_r+0x124>
 8018a16:	9105      	str	r1, [sp, #20]
 8018a18:	e7c6      	b.n	80189a8 <_svfiprintf_r+0x124>
 8018a1a:	fb05 2101 	mla	r1, r5, r1, r2
 8018a1e:	2301      	movs	r3, #1
 8018a20:	4607      	mov	r7, r0
 8018a22:	e7f0      	b.n	8018a06 <_svfiprintf_r+0x182>
 8018a24:	ab03      	add	r3, sp, #12
 8018a26:	9300      	str	r3, [sp, #0]
 8018a28:	4622      	mov	r2, r4
 8018a2a:	4b11      	ldr	r3, [pc, #68]	; (8018a70 <_svfiprintf_r+0x1ec>)
 8018a2c:	a904      	add	r1, sp, #16
 8018a2e:	4640      	mov	r0, r8
 8018a30:	f7fc fb6a 	bl	8015108 <_printf_float>
 8018a34:	f1b0 3fff 	cmp.w	r0, #4294967295
 8018a38:	4681      	mov	r9, r0
 8018a3a:	d1d6      	bne.n	80189ea <_svfiprintf_r+0x166>
 8018a3c:	89a3      	ldrh	r3, [r4, #12]
 8018a3e:	065b      	lsls	r3, r3, #25
 8018a40:	f53f af35 	bmi.w	80188ae <_svfiprintf_r+0x2a>
 8018a44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018a46:	b01d      	add	sp, #116	; 0x74
 8018a48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018a4c:	ab03      	add	r3, sp, #12
 8018a4e:	9300      	str	r3, [sp, #0]
 8018a50:	4622      	mov	r2, r4
 8018a52:	4b07      	ldr	r3, [pc, #28]	; (8018a70 <_svfiprintf_r+0x1ec>)
 8018a54:	a904      	add	r1, sp, #16
 8018a56:	4640      	mov	r0, r8
 8018a58:	f7fc fe0c 	bl	8015674 <_printf_i>
 8018a5c:	e7ea      	b.n	8018a34 <_svfiprintf_r+0x1b0>
 8018a5e:	bf00      	nop
 8018a60:	08019e4c 	.word	0x08019e4c
 8018a64:	08019e52 	.word	0x08019e52
 8018a68:	08019e56 	.word	0x08019e56
 8018a6c:	08015109 	.word	0x08015109
 8018a70:	080187d1 	.word	0x080187d1

08018a74 <_sungetc_r>:
 8018a74:	b538      	push	{r3, r4, r5, lr}
 8018a76:	1c4b      	adds	r3, r1, #1
 8018a78:	4614      	mov	r4, r2
 8018a7a:	d103      	bne.n	8018a84 <_sungetc_r+0x10>
 8018a7c:	f04f 35ff 	mov.w	r5, #4294967295
 8018a80:	4628      	mov	r0, r5
 8018a82:	bd38      	pop	{r3, r4, r5, pc}
 8018a84:	8993      	ldrh	r3, [r2, #12]
 8018a86:	f023 0320 	bic.w	r3, r3, #32
 8018a8a:	8193      	strh	r3, [r2, #12]
 8018a8c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018a8e:	6852      	ldr	r2, [r2, #4]
 8018a90:	b2cd      	uxtb	r5, r1
 8018a92:	b18b      	cbz	r3, 8018ab8 <_sungetc_r+0x44>
 8018a94:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8018a96:	4293      	cmp	r3, r2
 8018a98:	dd08      	ble.n	8018aac <_sungetc_r+0x38>
 8018a9a:	6823      	ldr	r3, [r4, #0]
 8018a9c:	1e5a      	subs	r2, r3, #1
 8018a9e:	6022      	str	r2, [r4, #0]
 8018aa0:	f803 5c01 	strb.w	r5, [r3, #-1]
 8018aa4:	6863      	ldr	r3, [r4, #4]
 8018aa6:	3301      	adds	r3, #1
 8018aa8:	6063      	str	r3, [r4, #4]
 8018aaa:	e7e9      	b.n	8018a80 <_sungetc_r+0xc>
 8018aac:	4621      	mov	r1, r4
 8018aae:	f000 fbc3 	bl	8019238 <__submore>
 8018ab2:	2800      	cmp	r0, #0
 8018ab4:	d0f1      	beq.n	8018a9a <_sungetc_r+0x26>
 8018ab6:	e7e1      	b.n	8018a7c <_sungetc_r+0x8>
 8018ab8:	6921      	ldr	r1, [r4, #16]
 8018aba:	6823      	ldr	r3, [r4, #0]
 8018abc:	b151      	cbz	r1, 8018ad4 <_sungetc_r+0x60>
 8018abe:	4299      	cmp	r1, r3
 8018ac0:	d208      	bcs.n	8018ad4 <_sungetc_r+0x60>
 8018ac2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8018ac6:	42a9      	cmp	r1, r5
 8018ac8:	d104      	bne.n	8018ad4 <_sungetc_r+0x60>
 8018aca:	3b01      	subs	r3, #1
 8018acc:	3201      	adds	r2, #1
 8018ace:	6023      	str	r3, [r4, #0]
 8018ad0:	6062      	str	r2, [r4, #4]
 8018ad2:	e7d5      	b.n	8018a80 <_sungetc_r+0xc>
 8018ad4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8018ad8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018adc:	6363      	str	r3, [r4, #52]	; 0x34
 8018ade:	2303      	movs	r3, #3
 8018ae0:	63a3      	str	r3, [r4, #56]	; 0x38
 8018ae2:	4623      	mov	r3, r4
 8018ae4:	f803 5f46 	strb.w	r5, [r3, #70]!
 8018ae8:	6023      	str	r3, [r4, #0]
 8018aea:	2301      	movs	r3, #1
 8018aec:	e7dc      	b.n	8018aa8 <_sungetc_r+0x34>

08018aee <__ssrefill_r>:
 8018aee:	b510      	push	{r4, lr}
 8018af0:	460c      	mov	r4, r1
 8018af2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8018af4:	b169      	cbz	r1, 8018b12 <__ssrefill_r+0x24>
 8018af6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018afa:	4299      	cmp	r1, r3
 8018afc:	d001      	beq.n	8018b02 <__ssrefill_r+0x14>
 8018afe:	f7ff fdbf 	bl	8018680 <_free_r>
 8018b02:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8018b04:	6063      	str	r3, [r4, #4]
 8018b06:	2000      	movs	r0, #0
 8018b08:	6360      	str	r0, [r4, #52]	; 0x34
 8018b0a:	b113      	cbz	r3, 8018b12 <__ssrefill_r+0x24>
 8018b0c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8018b0e:	6023      	str	r3, [r4, #0]
 8018b10:	bd10      	pop	{r4, pc}
 8018b12:	6923      	ldr	r3, [r4, #16]
 8018b14:	6023      	str	r3, [r4, #0]
 8018b16:	2300      	movs	r3, #0
 8018b18:	6063      	str	r3, [r4, #4]
 8018b1a:	89a3      	ldrh	r3, [r4, #12]
 8018b1c:	f043 0320 	orr.w	r3, r3, #32
 8018b20:	81a3      	strh	r3, [r4, #12]
 8018b22:	f04f 30ff 	mov.w	r0, #4294967295
 8018b26:	e7f3      	b.n	8018b10 <__ssrefill_r+0x22>

08018b28 <__ssvfiscanf_r>:
 8018b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b2c:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8018b30:	460c      	mov	r4, r1
 8018b32:	2100      	movs	r1, #0
 8018b34:	9144      	str	r1, [sp, #272]	; 0x110
 8018b36:	9145      	str	r1, [sp, #276]	; 0x114
 8018b38:	499f      	ldr	r1, [pc, #636]	; (8018db8 <__ssvfiscanf_r+0x290>)
 8018b3a:	91a0      	str	r1, [sp, #640]	; 0x280
 8018b3c:	f10d 0804 	add.w	r8, sp, #4
 8018b40:	499e      	ldr	r1, [pc, #632]	; (8018dbc <__ssvfiscanf_r+0x294>)
 8018b42:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8018dc0 <__ssvfiscanf_r+0x298>
 8018b46:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8018b4a:	4606      	mov	r6, r0
 8018b4c:	4692      	mov	sl, r2
 8018b4e:	91a1      	str	r1, [sp, #644]	; 0x284
 8018b50:	9300      	str	r3, [sp, #0]
 8018b52:	270a      	movs	r7, #10
 8018b54:	f89a 3000 	ldrb.w	r3, [sl]
 8018b58:	2b00      	cmp	r3, #0
 8018b5a:	f000 812a 	beq.w	8018db2 <__ssvfiscanf_r+0x28a>
 8018b5e:	4655      	mov	r5, sl
 8018b60:	f7ff f948 	bl	8017df4 <__locale_ctype_ptr>
 8018b64:	f815 bb01 	ldrb.w	fp, [r5], #1
 8018b68:	4458      	add	r0, fp
 8018b6a:	7843      	ldrb	r3, [r0, #1]
 8018b6c:	f013 0308 	ands.w	r3, r3, #8
 8018b70:	d01c      	beq.n	8018bac <__ssvfiscanf_r+0x84>
 8018b72:	6863      	ldr	r3, [r4, #4]
 8018b74:	2b00      	cmp	r3, #0
 8018b76:	dd12      	ble.n	8018b9e <__ssvfiscanf_r+0x76>
 8018b78:	f7ff f93c 	bl	8017df4 <__locale_ctype_ptr>
 8018b7c:	6823      	ldr	r3, [r4, #0]
 8018b7e:	781a      	ldrb	r2, [r3, #0]
 8018b80:	4410      	add	r0, r2
 8018b82:	7842      	ldrb	r2, [r0, #1]
 8018b84:	0712      	lsls	r2, r2, #28
 8018b86:	d401      	bmi.n	8018b8c <__ssvfiscanf_r+0x64>
 8018b88:	46aa      	mov	sl, r5
 8018b8a:	e7e3      	b.n	8018b54 <__ssvfiscanf_r+0x2c>
 8018b8c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8018b8e:	3201      	adds	r2, #1
 8018b90:	9245      	str	r2, [sp, #276]	; 0x114
 8018b92:	6862      	ldr	r2, [r4, #4]
 8018b94:	3301      	adds	r3, #1
 8018b96:	3a01      	subs	r2, #1
 8018b98:	6062      	str	r2, [r4, #4]
 8018b9a:	6023      	str	r3, [r4, #0]
 8018b9c:	e7e9      	b.n	8018b72 <__ssvfiscanf_r+0x4a>
 8018b9e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8018ba0:	4621      	mov	r1, r4
 8018ba2:	4630      	mov	r0, r6
 8018ba4:	4798      	blx	r3
 8018ba6:	2800      	cmp	r0, #0
 8018ba8:	d0e6      	beq.n	8018b78 <__ssvfiscanf_r+0x50>
 8018baa:	e7ed      	b.n	8018b88 <__ssvfiscanf_r+0x60>
 8018bac:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8018bb0:	f040 8082 	bne.w	8018cb8 <__ssvfiscanf_r+0x190>
 8018bb4:	9343      	str	r3, [sp, #268]	; 0x10c
 8018bb6:	9341      	str	r3, [sp, #260]	; 0x104
 8018bb8:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8018bbc:	2b2a      	cmp	r3, #42	; 0x2a
 8018bbe:	d103      	bne.n	8018bc8 <__ssvfiscanf_r+0xa0>
 8018bc0:	2310      	movs	r3, #16
 8018bc2:	9341      	str	r3, [sp, #260]	; 0x104
 8018bc4:	f10a 0502 	add.w	r5, sl, #2
 8018bc8:	46aa      	mov	sl, r5
 8018bca:	f815 1b01 	ldrb.w	r1, [r5], #1
 8018bce:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8018bd2:	2a09      	cmp	r2, #9
 8018bd4:	d922      	bls.n	8018c1c <__ssvfiscanf_r+0xf4>
 8018bd6:	2203      	movs	r2, #3
 8018bd8:	4879      	ldr	r0, [pc, #484]	; (8018dc0 <__ssvfiscanf_r+0x298>)
 8018bda:	f7e7 fb19 	bl	8000210 <memchr>
 8018bde:	b138      	cbz	r0, 8018bf0 <__ssvfiscanf_r+0xc8>
 8018be0:	eba0 0309 	sub.w	r3, r0, r9
 8018be4:	2001      	movs	r0, #1
 8018be6:	4098      	lsls	r0, r3
 8018be8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8018bea:	4318      	orrs	r0, r3
 8018bec:	9041      	str	r0, [sp, #260]	; 0x104
 8018bee:	46aa      	mov	sl, r5
 8018bf0:	f89a 3000 	ldrb.w	r3, [sl]
 8018bf4:	2b67      	cmp	r3, #103	; 0x67
 8018bf6:	f10a 0501 	add.w	r5, sl, #1
 8018bfa:	d82b      	bhi.n	8018c54 <__ssvfiscanf_r+0x12c>
 8018bfc:	2b65      	cmp	r3, #101	; 0x65
 8018bfe:	f080 809f 	bcs.w	8018d40 <__ssvfiscanf_r+0x218>
 8018c02:	2b47      	cmp	r3, #71	; 0x47
 8018c04:	d810      	bhi.n	8018c28 <__ssvfiscanf_r+0x100>
 8018c06:	2b45      	cmp	r3, #69	; 0x45
 8018c08:	f080 809a 	bcs.w	8018d40 <__ssvfiscanf_r+0x218>
 8018c0c:	2b00      	cmp	r3, #0
 8018c0e:	d06c      	beq.n	8018cea <__ssvfiscanf_r+0x1c2>
 8018c10:	2b25      	cmp	r3, #37	; 0x25
 8018c12:	d051      	beq.n	8018cb8 <__ssvfiscanf_r+0x190>
 8018c14:	2303      	movs	r3, #3
 8018c16:	9347      	str	r3, [sp, #284]	; 0x11c
 8018c18:	9742      	str	r7, [sp, #264]	; 0x108
 8018c1a:	e027      	b.n	8018c6c <__ssvfiscanf_r+0x144>
 8018c1c:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8018c1e:	fb07 1303 	mla	r3, r7, r3, r1
 8018c22:	3b30      	subs	r3, #48	; 0x30
 8018c24:	9343      	str	r3, [sp, #268]	; 0x10c
 8018c26:	e7cf      	b.n	8018bc8 <__ssvfiscanf_r+0xa0>
 8018c28:	2b5b      	cmp	r3, #91	; 0x5b
 8018c2a:	d06a      	beq.n	8018d02 <__ssvfiscanf_r+0x1da>
 8018c2c:	d80c      	bhi.n	8018c48 <__ssvfiscanf_r+0x120>
 8018c2e:	2b58      	cmp	r3, #88	; 0x58
 8018c30:	d1f0      	bne.n	8018c14 <__ssvfiscanf_r+0xec>
 8018c32:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8018c34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8018c38:	9241      	str	r2, [sp, #260]	; 0x104
 8018c3a:	2210      	movs	r2, #16
 8018c3c:	9242      	str	r2, [sp, #264]	; 0x108
 8018c3e:	2b6e      	cmp	r3, #110	; 0x6e
 8018c40:	bf8c      	ite	hi
 8018c42:	2304      	movhi	r3, #4
 8018c44:	2303      	movls	r3, #3
 8018c46:	e010      	b.n	8018c6a <__ssvfiscanf_r+0x142>
 8018c48:	2b63      	cmp	r3, #99	; 0x63
 8018c4a:	d065      	beq.n	8018d18 <__ssvfiscanf_r+0x1f0>
 8018c4c:	2b64      	cmp	r3, #100	; 0x64
 8018c4e:	d1e1      	bne.n	8018c14 <__ssvfiscanf_r+0xec>
 8018c50:	9742      	str	r7, [sp, #264]	; 0x108
 8018c52:	e7f4      	b.n	8018c3e <__ssvfiscanf_r+0x116>
 8018c54:	2b70      	cmp	r3, #112	; 0x70
 8018c56:	d04b      	beq.n	8018cf0 <__ssvfiscanf_r+0x1c8>
 8018c58:	d826      	bhi.n	8018ca8 <__ssvfiscanf_r+0x180>
 8018c5a:	2b6e      	cmp	r3, #110	; 0x6e
 8018c5c:	d062      	beq.n	8018d24 <__ssvfiscanf_r+0x1fc>
 8018c5e:	d84c      	bhi.n	8018cfa <__ssvfiscanf_r+0x1d2>
 8018c60:	2b69      	cmp	r3, #105	; 0x69
 8018c62:	d1d7      	bne.n	8018c14 <__ssvfiscanf_r+0xec>
 8018c64:	2300      	movs	r3, #0
 8018c66:	9342      	str	r3, [sp, #264]	; 0x108
 8018c68:	2303      	movs	r3, #3
 8018c6a:	9347      	str	r3, [sp, #284]	; 0x11c
 8018c6c:	6863      	ldr	r3, [r4, #4]
 8018c6e:	2b00      	cmp	r3, #0
 8018c70:	dd68      	ble.n	8018d44 <__ssvfiscanf_r+0x21c>
 8018c72:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8018c74:	0659      	lsls	r1, r3, #25
 8018c76:	d407      	bmi.n	8018c88 <__ssvfiscanf_r+0x160>
 8018c78:	f7ff f8bc 	bl	8017df4 <__locale_ctype_ptr>
 8018c7c:	6823      	ldr	r3, [r4, #0]
 8018c7e:	781a      	ldrb	r2, [r3, #0]
 8018c80:	4410      	add	r0, r2
 8018c82:	7842      	ldrb	r2, [r0, #1]
 8018c84:	0712      	lsls	r2, r2, #28
 8018c86:	d464      	bmi.n	8018d52 <__ssvfiscanf_r+0x22a>
 8018c88:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8018c8a:	2b02      	cmp	r3, #2
 8018c8c:	dc73      	bgt.n	8018d76 <__ssvfiscanf_r+0x24e>
 8018c8e:	466b      	mov	r3, sp
 8018c90:	4622      	mov	r2, r4
 8018c92:	a941      	add	r1, sp, #260	; 0x104
 8018c94:	4630      	mov	r0, r6
 8018c96:	f000 f897 	bl	8018dc8 <_scanf_chars>
 8018c9a:	2801      	cmp	r0, #1
 8018c9c:	f000 8089 	beq.w	8018db2 <__ssvfiscanf_r+0x28a>
 8018ca0:	2802      	cmp	r0, #2
 8018ca2:	f47f af71 	bne.w	8018b88 <__ssvfiscanf_r+0x60>
 8018ca6:	e01d      	b.n	8018ce4 <__ssvfiscanf_r+0x1bc>
 8018ca8:	2b75      	cmp	r3, #117	; 0x75
 8018caa:	d0d1      	beq.n	8018c50 <__ssvfiscanf_r+0x128>
 8018cac:	2b78      	cmp	r3, #120	; 0x78
 8018cae:	d0c0      	beq.n	8018c32 <__ssvfiscanf_r+0x10a>
 8018cb0:	2b73      	cmp	r3, #115	; 0x73
 8018cb2:	d1af      	bne.n	8018c14 <__ssvfiscanf_r+0xec>
 8018cb4:	2302      	movs	r3, #2
 8018cb6:	e7d8      	b.n	8018c6a <__ssvfiscanf_r+0x142>
 8018cb8:	6863      	ldr	r3, [r4, #4]
 8018cba:	2b00      	cmp	r3, #0
 8018cbc:	dd0c      	ble.n	8018cd8 <__ssvfiscanf_r+0x1b0>
 8018cbe:	6823      	ldr	r3, [r4, #0]
 8018cc0:	781a      	ldrb	r2, [r3, #0]
 8018cc2:	455a      	cmp	r2, fp
 8018cc4:	d175      	bne.n	8018db2 <__ssvfiscanf_r+0x28a>
 8018cc6:	3301      	adds	r3, #1
 8018cc8:	6862      	ldr	r2, [r4, #4]
 8018cca:	6023      	str	r3, [r4, #0]
 8018ccc:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8018cce:	3a01      	subs	r2, #1
 8018cd0:	3301      	adds	r3, #1
 8018cd2:	6062      	str	r2, [r4, #4]
 8018cd4:	9345      	str	r3, [sp, #276]	; 0x114
 8018cd6:	e757      	b.n	8018b88 <__ssvfiscanf_r+0x60>
 8018cd8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8018cda:	4621      	mov	r1, r4
 8018cdc:	4630      	mov	r0, r6
 8018cde:	4798      	blx	r3
 8018ce0:	2800      	cmp	r0, #0
 8018ce2:	d0ec      	beq.n	8018cbe <__ssvfiscanf_r+0x196>
 8018ce4:	9844      	ldr	r0, [sp, #272]	; 0x110
 8018ce6:	2800      	cmp	r0, #0
 8018ce8:	d159      	bne.n	8018d9e <__ssvfiscanf_r+0x276>
 8018cea:	f04f 30ff 	mov.w	r0, #4294967295
 8018cee:	e05c      	b.n	8018daa <__ssvfiscanf_r+0x282>
 8018cf0:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8018cf2:	f042 0220 	orr.w	r2, r2, #32
 8018cf6:	9241      	str	r2, [sp, #260]	; 0x104
 8018cf8:	e79b      	b.n	8018c32 <__ssvfiscanf_r+0x10a>
 8018cfa:	2308      	movs	r3, #8
 8018cfc:	9342      	str	r3, [sp, #264]	; 0x108
 8018cfe:	2304      	movs	r3, #4
 8018d00:	e7b3      	b.n	8018c6a <__ssvfiscanf_r+0x142>
 8018d02:	4629      	mov	r1, r5
 8018d04:	4640      	mov	r0, r8
 8018d06:	f000 f9c7 	bl	8019098 <__sccl>
 8018d0a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8018d0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018d10:	9341      	str	r3, [sp, #260]	; 0x104
 8018d12:	4605      	mov	r5, r0
 8018d14:	2301      	movs	r3, #1
 8018d16:	e7a8      	b.n	8018c6a <__ssvfiscanf_r+0x142>
 8018d18:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8018d1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018d1e:	9341      	str	r3, [sp, #260]	; 0x104
 8018d20:	2300      	movs	r3, #0
 8018d22:	e7a2      	b.n	8018c6a <__ssvfiscanf_r+0x142>
 8018d24:	9841      	ldr	r0, [sp, #260]	; 0x104
 8018d26:	06c3      	lsls	r3, r0, #27
 8018d28:	f53f af2e 	bmi.w	8018b88 <__ssvfiscanf_r+0x60>
 8018d2c:	9b00      	ldr	r3, [sp, #0]
 8018d2e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8018d30:	1d19      	adds	r1, r3, #4
 8018d32:	9100      	str	r1, [sp, #0]
 8018d34:	681b      	ldr	r3, [r3, #0]
 8018d36:	07c0      	lsls	r0, r0, #31
 8018d38:	bf4c      	ite	mi
 8018d3a:	801a      	strhmi	r2, [r3, #0]
 8018d3c:	601a      	strpl	r2, [r3, #0]
 8018d3e:	e723      	b.n	8018b88 <__ssvfiscanf_r+0x60>
 8018d40:	2305      	movs	r3, #5
 8018d42:	e792      	b.n	8018c6a <__ssvfiscanf_r+0x142>
 8018d44:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8018d46:	4621      	mov	r1, r4
 8018d48:	4630      	mov	r0, r6
 8018d4a:	4798      	blx	r3
 8018d4c:	2800      	cmp	r0, #0
 8018d4e:	d090      	beq.n	8018c72 <__ssvfiscanf_r+0x14a>
 8018d50:	e7c8      	b.n	8018ce4 <__ssvfiscanf_r+0x1bc>
 8018d52:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8018d54:	3201      	adds	r2, #1
 8018d56:	9245      	str	r2, [sp, #276]	; 0x114
 8018d58:	6862      	ldr	r2, [r4, #4]
 8018d5a:	3a01      	subs	r2, #1
 8018d5c:	2a00      	cmp	r2, #0
 8018d5e:	6062      	str	r2, [r4, #4]
 8018d60:	dd02      	ble.n	8018d68 <__ssvfiscanf_r+0x240>
 8018d62:	3301      	adds	r3, #1
 8018d64:	6023      	str	r3, [r4, #0]
 8018d66:	e787      	b.n	8018c78 <__ssvfiscanf_r+0x150>
 8018d68:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8018d6a:	4621      	mov	r1, r4
 8018d6c:	4630      	mov	r0, r6
 8018d6e:	4798      	blx	r3
 8018d70:	2800      	cmp	r0, #0
 8018d72:	d081      	beq.n	8018c78 <__ssvfiscanf_r+0x150>
 8018d74:	e7b6      	b.n	8018ce4 <__ssvfiscanf_r+0x1bc>
 8018d76:	2b04      	cmp	r3, #4
 8018d78:	dc06      	bgt.n	8018d88 <__ssvfiscanf_r+0x260>
 8018d7a:	466b      	mov	r3, sp
 8018d7c:	4622      	mov	r2, r4
 8018d7e:	a941      	add	r1, sp, #260	; 0x104
 8018d80:	4630      	mov	r0, r6
 8018d82:	f000 f885 	bl	8018e90 <_scanf_i>
 8018d86:	e788      	b.n	8018c9a <__ssvfiscanf_r+0x172>
 8018d88:	4b0e      	ldr	r3, [pc, #56]	; (8018dc4 <__ssvfiscanf_r+0x29c>)
 8018d8a:	2b00      	cmp	r3, #0
 8018d8c:	f43f aefc 	beq.w	8018b88 <__ssvfiscanf_r+0x60>
 8018d90:	466b      	mov	r3, sp
 8018d92:	4622      	mov	r2, r4
 8018d94:	a941      	add	r1, sp, #260	; 0x104
 8018d96:	4630      	mov	r0, r6
 8018d98:	f7fc fd7e 	bl	8015898 <_scanf_float>
 8018d9c:	e77d      	b.n	8018c9a <__ssvfiscanf_r+0x172>
 8018d9e:	89a3      	ldrh	r3, [r4, #12]
 8018da0:	f013 0f40 	tst.w	r3, #64	; 0x40
 8018da4:	bf18      	it	ne
 8018da6:	f04f 30ff 	movne.w	r0, #4294967295
 8018daa:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8018dae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018db2:	9844      	ldr	r0, [sp, #272]	; 0x110
 8018db4:	e7f9      	b.n	8018daa <__ssvfiscanf_r+0x282>
 8018db6:	bf00      	nop
 8018db8:	08018a75 	.word	0x08018a75
 8018dbc:	08018aef 	.word	0x08018aef
 8018dc0:	08019e52 	.word	0x08019e52
 8018dc4:	08015899 	.word	0x08015899

08018dc8 <_scanf_chars>:
 8018dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018dcc:	4615      	mov	r5, r2
 8018dce:	688a      	ldr	r2, [r1, #8]
 8018dd0:	4680      	mov	r8, r0
 8018dd2:	460c      	mov	r4, r1
 8018dd4:	b932      	cbnz	r2, 8018de4 <_scanf_chars+0x1c>
 8018dd6:	698a      	ldr	r2, [r1, #24]
 8018dd8:	2a00      	cmp	r2, #0
 8018dda:	bf14      	ite	ne
 8018ddc:	f04f 32ff 	movne.w	r2, #4294967295
 8018de0:	2201      	moveq	r2, #1
 8018de2:	608a      	str	r2, [r1, #8]
 8018de4:	6822      	ldr	r2, [r4, #0]
 8018de6:	06d1      	lsls	r1, r2, #27
 8018de8:	bf5f      	itttt	pl
 8018dea:	681a      	ldrpl	r2, [r3, #0]
 8018dec:	1d11      	addpl	r1, r2, #4
 8018dee:	6019      	strpl	r1, [r3, #0]
 8018df0:	6817      	ldrpl	r7, [r2, #0]
 8018df2:	2600      	movs	r6, #0
 8018df4:	69a3      	ldr	r3, [r4, #24]
 8018df6:	b1db      	cbz	r3, 8018e30 <_scanf_chars+0x68>
 8018df8:	2b01      	cmp	r3, #1
 8018dfa:	d107      	bne.n	8018e0c <_scanf_chars+0x44>
 8018dfc:	682b      	ldr	r3, [r5, #0]
 8018dfe:	6962      	ldr	r2, [r4, #20]
 8018e00:	781b      	ldrb	r3, [r3, #0]
 8018e02:	5cd3      	ldrb	r3, [r2, r3]
 8018e04:	b9a3      	cbnz	r3, 8018e30 <_scanf_chars+0x68>
 8018e06:	2e00      	cmp	r6, #0
 8018e08:	d132      	bne.n	8018e70 <_scanf_chars+0xa8>
 8018e0a:	e006      	b.n	8018e1a <_scanf_chars+0x52>
 8018e0c:	2b02      	cmp	r3, #2
 8018e0e:	d007      	beq.n	8018e20 <_scanf_chars+0x58>
 8018e10:	2e00      	cmp	r6, #0
 8018e12:	d12d      	bne.n	8018e70 <_scanf_chars+0xa8>
 8018e14:	69a3      	ldr	r3, [r4, #24]
 8018e16:	2b01      	cmp	r3, #1
 8018e18:	d12a      	bne.n	8018e70 <_scanf_chars+0xa8>
 8018e1a:	2001      	movs	r0, #1
 8018e1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018e20:	f7fe ffe8 	bl	8017df4 <__locale_ctype_ptr>
 8018e24:	682b      	ldr	r3, [r5, #0]
 8018e26:	781b      	ldrb	r3, [r3, #0]
 8018e28:	4418      	add	r0, r3
 8018e2a:	7843      	ldrb	r3, [r0, #1]
 8018e2c:	071b      	lsls	r3, r3, #28
 8018e2e:	d4ef      	bmi.n	8018e10 <_scanf_chars+0x48>
 8018e30:	6823      	ldr	r3, [r4, #0]
 8018e32:	06da      	lsls	r2, r3, #27
 8018e34:	bf5e      	ittt	pl
 8018e36:	682b      	ldrpl	r3, [r5, #0]
 8018e38:	781b      	ldrbpl	r3, [r3, #0]
 8018e3a:	703b      	strbpl	r3, [r7, #0]
 8018e3c:	682a      	ldr	r2, [r5, #0]
 8018e3e:	686b      	ldr	r3, [r5, #4]
 8018e40:	f102 0201 	add.w	r2, r2, #1
 8018e44:	602a      	str	r2, [r5, #0]
 8018e46:	68a2      	ldr	r2, [r4, #8]
 8018e48:	f103 33ff 	add.w	r3, r3, #4294967295
 8018e4c:	f102 32ff 	add.w	r2, r2, #4294967295
 8018e50:	606b      	str	r3, [r5, #4]
 8018e52:	f106 0601 	add.w	r6, r6, #1
 8018e56:	bf58      	it	pl
 8018e58:	3701      	addpl	r7, #1
 8018e5a:	60a2      	str	r2, [r4, #8]
 8018e5c:	b142      	cbz	r2, 8018e70 <_scanf_chars+0xa8>
 8018e5e:	2b00      	cmp	r3, #0
 8018e60:	dcc8      	bgt.n	8018df4 <_scanf_chars+0x2c>
 8018e62:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8018e66:	4629      	mov	r1, r5
 8018e68:	4640      	mov	r0, r8
 8018e6a:	4798      	blx	r3
 8018e6c:	2800      	cmp	r0, #0
 8018e6e:	d0c1      	beq.n	8018df4 <_scanf_chars+0x2c>
 8018e70:	6823      	ldr	r3, [r4, #0]
 8018e72:	f013 0310 	ands.w	r3, r3, #16
 8018e76:	d105      	bne.n	8018e84 <_scanf_chars+0xbc>
 8018e78:	68e2      	ldr	r2, [r4, #12]
 8018e7a:	3201      	adds	r2, #1
 8018e7c:	60e2      	str	r2, [r4, #12]
 8018e7e:	69a2      	ldr	r2, [r4, #24]
 8018e80:	b102      	cbz	r2, 8018e84 <_scanf_chars+0xbc>
 8018e82:	703b      	strb	r3, [r7, #0]
 8018e84:	6923      	ldr	r3, [r4, #16]
 8018e86:	441e      	add	r6, r3
 8018e88:	6126      	str	r6, [r4, #16]
 8018e8a:	2000      	movs	r0, #0
 8018e8c:	e7c6      	b.n	8018e1c <_scanf_chars+0x54>
	...

08018e90 <_scanf_i>:
 8018e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e94:	469a      	mov	sl, r3
 8018e96:	4b74      	ldr	r3, [pc, #464]	; (8019068 <_scanf_i+0x1d8>)
 8018e98:	460c      	mov	r4, r1
 8018e9a:	4683      	mov	fp, r0
 8018e9c:	4616      	mov	r6, r2
 8018e9e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8018ea2:	b087      	sub	sp, #28
 8018ea4:	ab03      	add	r3, sp, #12
 8018ea6:	68a7      	ldr	r7, [r4, #8]
 8018ea8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8018eac:	4b6f      	ldr	r3, [pc, #444]	; (801906c <_scanf_i+0x1dc>)
 8018eae:	69a1      	ldr	r1, [r4, #24]
 8018eb0:	4a6f      	ldr	r2, [pc, #444]	; (8019070 <_scanf_i+0x1e0>)
 8018eb2:	2903      	cmp	r1, #3
 8018eb4:	bf08      	it	eq
 8018eb6:	461a      	moveq	r2, r3
 8018eb8:	1e7b      	subs	r3, r7, #1
 8018eba:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8018ebe:	bf84      	itt	hi
 8018ec0:	f240 135d 	movwhi	r3, #349	; 0x15d
 8018ec4:	60a3      	strhi	r3, [r4, #8]
 8018ec6:	6823      	ldr	r3, [r4, #0]
 8018ec8:	9200      	str	r2, [sp, #0]
 8018eca:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8018ece:	bf88      	it	hi
 8018ed0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8018ed4:	f104 091c 	add.w	r9, r4, #28
 8018ed8:	6023      	str	r3, [r4, #0]
 8018eda:	bf8c      	ite	hi
 8018edc:	197f      	addhi	r7, r7, r5
 8018ede:	2700      	movls	r7, #0
 8018ee0:	464b      	mov	r3, r9
 8018ee2:	f04f 0800 	mov.w	r8, #0
 8018ee6:	9301      	str	r3, [sp, #4]
 8018ee8:	6831      	ldr	r1, [r6, #0]
 8018eea:	ab03      	add	r3, sp, #12
 8018eec:	2202      	movs	r2, #2
 8018eee:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8018ef2:	7809      	ldrb	r1, [r1, #0]
 8018ef4:	f7e7 f98c 	bl	8000210 <memchr>
 8018ef8:	9b01      	ldr	r3, [sp, #4]
 8018efa:	b330      	cbz	r0, 8018f4a <_scanf_i+0xba>
 8018efc:	f1b8 0f01 	cmp.w	r8, #1
 8018f00:	d15a      	bne.n	8018fb8 <_scanf_i+0x128>
 8018f02:	6862      	ldr	r2, [r4, #4]
 8018f04:	b92a      	cbnz	r2, 8018f12 <_scanf_i+0x82>
 8018f06:	6822      	ldr	r2, [r4, #0]
 8018f08:	2108      	movs	r1, #8
 8018f0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8018f0e:	6061      	str	r1, [r4, #4]
 8018f10:	6022      	str	r2, [r4, #0]
 8018f12:	6822      	ldr	r2, [r4, #0]
 8018f14:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8018f18:	6022      	str	r2, [r4, #0]
 8018f1a:	68a2      	ldr	r2, [r4, #8]
 8018f1c:	1e51      	subs	r1, r2, #1
 8018f1e:	60a1      	str	r1, [r4, #8]
 8018f20:	b19a      	cbz	r2, 8018f4a <_scanf_i+0xba>
 8018f22:	6832      	ldr	r2, [r6, #0]
 8018f24:	1c51      	adds	r1, r2, #1
 8018f26:	6031      	str	r1, [r6, #0]
 8018f28:	7812      	ldrb	r2, [r2, #0]
 8018f2a:	701a      	strb	r2, [r3, #0]
 8018f2c:	1c5d      	adds	r5, r3, #1
 8018f2e:	6873      	ldr	r3, [r6, #4]
 8018f30:	3b01      	subs	r3, #1
 8018f32:	2b00      	cmp	r3, #0
 8018f34:	6073      	str	r3, [r6, #4]
 8018f36:	dc07      	bgt.n	8018f48 <_scanf_i+0xb8>
 8018f38:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8018f3c:	4631      	mov	r1, r6
 8018f3e:	4658      	mov	r0, fp
 8018f40:	4798      	blx	r3
 8018f42:	2800      	cmp	r0, #0
 8018f44:	f040 8086 	bne.w	8019054 <_scanf_i+0x1c4>
 8018f48:	462b      	mov	r3, r5
 8018f4a:	f108 0801 	add.w	r8, r8, #1
 8018f4e:	f1b8 0f03 	cmp.w	r8, #3
 8018f52:	d1c8      	bne.n	8018ee6 <_scanf_i+0x56>
 8018f54:	6862      	ldr	r2, [r4, #4]
 8018f56:	b90a      	cbnz	r2, 8018f5c <_scanf_i+0xcc>
 8018f58:	220a      	movs	r2, #10
 8018f5a:	6062      	str	r2, [r4, #4]
 8018f5c:	6862      	ldr	r2, [r4, #4]
 8018f5e:	4945      	ldr	r1, [pc, #276]	; (8019074 <_scanf_i+0x1e4>)
 8018f60:	6960      	ldr	r0, [r4, #20]
 8018f62:	9301      	str	r3, [sp, #4]
 8018f64:	1a89      	subs	r1, r1, r2
 8018f66:	f000 f897 	bl	8019098 <__sccl>
 8018f6a:	9b01      	ldr	r3, [sp, #4]
 8018f6c:	f04f 0800 	mov.w	r8, #0
 8018f70:	461d      	mov	r5, r3
 8018f72:	68a3      	ldr	r3, [r4, #8]
 8018f74:	6822      	ldr	r2, [r4, #0]
 8018f76:	2b00      	cmp	r3, #0
 8018f78:	d03a      	beq.n	8018ff0 <_scanf_i+0x160>
 8018f7a:	6831      	ldr	r1, [r6, #0]
 8018f7c:	6960      	ldr	r0, [r4, #20]
 8018f7e:	f891 c000 	ldrb.w	ip, [r1]
 8018f82:	f810 000c 	ldrb.w	r0, [r0, ip]
 8018f86:	2800      	cmp	r0, #0
 8018f88:	d032      	beq.n	8018ff0 <_scanf_i+0x160>
 8018f8a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8018f8e:	d121      	bne.n	8018fd4 <_scanf_i+0x144>
 8018f90:	0510      	lsls	r0, r2, #20
 8018f92:	d51f      	bpl.n	8018fd4 <_scanf_i+0x144>
 8018f94:	f108 0801 	add.w	r8, r8, #1
 8018f98:	b117      	cbz	r7, 8018fa0 <_scanf_i+0x110>
 8018f9a:	3301      	adds	r3, #1
 8018f9c:	3f01      	subs	r7, #1
 8018f9e:	60a3      	str	r3, [r4, #8]
 8018fa0:	6873      	ldr	r3, [r6, #4]
 8018fa2:	3b01      	subs	r3, #1
 8018fa4:	2b00      	cmp	r3, #0
 8018fa6:	6073      	str	r3, [r6, #4]
 8018fa8:	dd1b      	ble.n	8018fe2 <_scanf_i+0x152>
 8018faa:	6833      	ldr	r3, [r6, #0]
 8018fac:	3301      	adds	r3, #1
 8018fae:	6033      	str	r3, [r6, #0]
 8018fb0:	68a3      	ldr	r3, [r4, #8]
 8018fb2:	3b01      	subs	r3, #1
 8018fb4:	60a3      	str	r3, [r4, #8]
 8018fb6:	e7dc      	b.n	8018f72 <_scanf_i+0xe2>
 8018fb8:	f1b8 0f02 	cmp.w	r8, #2
 8018fbc:	d1ad      	bne.n	8018f1a <_scanf_i+0x8a>
 8018fbe:	6822      	ldr	r2, [r4, #0]
 8018fc0:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8018fc4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8018fc8:	d1bf      	bne.n	8018f4a <_scanf_i+0xba>
 8018fca:	2110      	movs	r1, #16
 8018fcc:	6061      	str	r1, [r4, #4]
 8018fce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8018fd2:	e7a1      	b.n	8018f18 <_scanf_i+0x88>
 8018fd4:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8018fd8:	6022      	str	r2, [r4, #0]
 8018fda:	780b      	ldrb	r3, [r1, #0]
 8018fdc:	702b      	strb	r3, [r5, #0]
 8018fde:	3501      	adds	r5, #1
 8018fe0:	e7de      	b.n	8018fa0 <_scanf_i+0x110>
 8018fe2:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8018fe6:	4631      	mov	r1, r6
 8018fe8:	4658      	mov	r0, fp
 8018fea:	4798      	blx	r3
 8018fec:	2800      	cmp	r0, #0
 8018fee:	d0df      	beq.n	8018fb0 <_scanf_i+0x120>
 8018ff0:	6823      	ldr	r3, [r4, #0]
 8018ff2:	05d9      	lsls	r1, r3, #23
 8018ff4:	d50c      	bpl.n	8019010 <_scanf_i+0x180>
 8018ff6:	454d      	cmp	r5, r9
 8018ff8:	d908      	bls.n	801900c <_scanf_i+0x17c>
 8018ffa:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8018ffe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8019002:	4632      	mov	r2, r6
 8019004:	4658      	mov	r0, fp
 8019006:	4798      	blx	r3
 8019008:	1e6f      	subs	r7, r5, #1
 801900a:	463d      	mov	r5, r7
 801900c:	454d      	cmp	r5, r9
 801900e:	d029      	beq.n	8019064 <_scanf_i+0x1d4>
 8019010:	6822      	ldr	r2, [r4, #0]
 8019012:	f012 0210 	ands.w	r2, r2, #16
 8019016:	d113      	bne.n	8019040 <_scanf_i+0x1b0>
 8019018:	702a      	strb	r2, [r5, #0]
 801901a:	6863      	ldr	r3, [r4, #4]
 801901c:	9e00      	ldr	r6, [sp, #0]
 801901e:	4649      	mov	r1, r9
 8019020:	4658      	mov	r0, fp
 8019022:	47b0      	blx	r6
 8019024:	f8da 3000 	ldr.w	r3, [sl]
 8019028:	6821      	ldr	r1, [r4, #0]
 801902a:	1d1a      	adds	r2, r3, #4
 801902c:	f8ca 2000 	str.w	r2, [sl]
 8019030:	f011 0f20 	tst.w	r1, #32
 8019034:	681b      	ldr	r3, [r3, #0]
 8019036:	d010      	beq.n	801905a <_scanf_i+0x1ca>
 8019038:	6018      	str	r0, [r3, #0]
 801903a:	68e3      	ldr	r3, [r4, #12]
 801903c:	3301      	adds	r3, #1
 801903e:	60e3      	str	r3, [r4, #12]
 8019040:	eba5 0509 	sub.w	r5, r5, r9
 8019044:	44a8      	add	r8, r5
 8019046:	6925      	ldr	r5, [r4, #16]
 8019048:	4445      	add	r5, r8
 801904a:	6125      	str	r5, [r4, #16]
 801904c:	2000      	movs	r0, #0
 801904e:	b007      	add	sp, #28
 8019050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019054:	f04f 0800 	mov.w	r8, #0
 8019058:	e7ca      	b.n	8018ff0 <_scanf_i+0x160>
 801905a:	07ca      	lsls	r2, r1, #31
 801905c:	bf4c      	ite	mi
 801905e:	8018      	strhmi	r0, [r3, #0]
 8019060:	6018      	strpl	r0, [r3, #0]
 8019062:	e7ea      	b.n	801903a <_scanf_i+0x1aa>
 8019064:	2001      	movs	r0, #1
 8019066:	e7f2      	b.n	801904e <_scanf_i+0x1be>
 8019068:	080199b0 	.word	0x080199b0
 801906c:	08016ab1 	.word	0x08016ab1
 8019070:	08019215 	.word	0x08019215
 8019074:	08019e6d 	.word	0x08019e6d

08019078 <_sbrk_r>:
 8019078:	b538      	push	{r3, r4, r5, lr}
 801907a:	4c06      	ldr	r4, [pc, #24]	; (8019094 <_sbrk_r+0x1c>)
 801907c:	2300      	movs	r3, #0
 801907e:	4605      	mov	r5, r0
 8019080:	4608      	mov	r0, r1
 8019082:	6023      	str	r3, [r4, #0]
 8019084:	f7ee fa00 	bl	8007488 <_sbrk>
 8019088:	1c43      	adds	r3, r0, #1
 801908a:	d102      	bne.n	8019092 <_sbrk_r+0x1a>
 801908c:	6823      	ldr	r3, [r4, #0]
 801908e:	b103      	cbz	r3, 8019092 <_sbrk_r+0x1a>
 8019090:	602b      	str	r3, [r5, #0]
 8019092:	bd38      	pop	{r3, r4, r5, pc}
 8019094:	20045cd4 	.word	0x20045cd4

08019098 <__sccl>:
 8019098:	b570      	push	{r4, r5, r6, lr}
 801909a:	780b      	ldrb	r3, [r1, #0]
 801909c:	2b5e      	cmp	r3, #94	; 0x5e
 801909e:	bf13      	iteet	ne
 80190a0:	1c4a      	addne	r2, r1, #1
 80190a2:	1c8a      	addeq	r2, r1, #2
 80190a4:	784b      	ldrbeq	r3, [r1, #1]
 80190a6:	2100      	movne	r1, #0
 80190a8:	bf08      	it	eq
 80190aa:	2101      	moveq	r1, #1
 80190ac:	1e44      	subs	r4, r0, #1
 80190ae:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 80190b2:	f804 1f01 	strb.w	r1, [r4, #1]!
 80190b6:	42ac      	cmp	r4, r5
 80190b8:	d1fb      	bne.n	80190b2 <__sccl+0x1a>
 80190ba:	b913      	cbnz	r3, 80190c2 <__sccl+0x2a>
 80190bc:	3a01      	subs	r2, #1
 80190be:	4610      	mov	r0, r2
 80190c0:	bd70      	pop	{r4, r5, r6, pc}
 80190c2:	f081 0401 	eor.w	r4, r1, #1
 80190c6:	54c4      	strb	r4, [r0, r3]
 80190c8:	1c51      	adds	r1, r2, #1
 80190ca:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 80190ce:	2d2d      	cmp	r5, #45	; 0x2d
 80190d0:	f101 36ff 	add.w	r6, r1, #4294967295
 80190d4:	460a      	mov	r2, r1
 80190d6:	d006      	beq.n	80190e6 <__sccl+0x4e>
 80190d8:	2d5d      	cmp	r5, #93	; 0x5d
 80190da:	d0f0      	beq.n	80190be <__sccl+0x26>
 80190dc:	b90d      	cbnz	r5, 80190e2 <__sccl+0x4a>
 80190de:	4632      	mov	r2, r6
 80190e0:	e7ed      	b.n	80190be <__sccl+0x26>
 80190e2:	462b      	mov	r3, r5
 80190e4:	e7ef      	b.n	80190c6 <__sccl+0x2e>
 80190e6:	780e      	ldrb	r6, [r1, #0]
 80190e8:	2e5d      	cmp	r6, #93	; 0x5d
 80190ea:	d0fa      	beq.n	80190e2 <__sccl+0x4a>
 80190ec:	42b3      	cmp	r3, r6
 80190ee:	dcf8      	bgt.n	80190e2 <__sccl+0x4a>
 80190f0:	3301      	adds	r3, #1
 80190f2:	429e      	cmp	r6, r3
 80190f4:	54c4      	strb	r4, [r0, r3]
 80190f6:	dcfb      	bgt.n	80190f0 <__sccl+0x58>
 80190f8:	3102      	adds	r1, #2
 80190fa:	e7e6      	b.n	80190ca <__sccl+0x32>

080190fc <strncmp>:
 80190fc:	b510      	push	{r4, lr}
 80190fe:	b16a      	cbz	r2, 801911c <strncmp+0x20>
 8019100:	3901      	subs	r1, #1
 8019102:	1884      	adds	r4, r0, r2
 8019104:	f810 3b01 	ldrb.w	r3, [r0], #1
 8019108:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801910c:	4293      	cmp	r3, r2
 801910e:	d103      	bne.n	8019118 <strncmp+0x1c>
 8019110:	42a0      	cmp	r0, r4
 8019112:	d001      	beq.n	8019118 <strncmp+0x1c>
 8019114:	2b00      	cmp	r3, #0
 8019116:	d1f5      	bne.n	8019104 <strncmp+0x8>
 8019118:	1a98      	subs	r0, r3, r2
 801911a:	bd10      	pop	{r4, pc}
 801911c:	4610      	mov	r0, r2
 801911e:	e7fc      	b.n	801911a <strncmp+0x1e>

08019120 <_strtoul_l.isra.0>:
 8019120:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019124:	4680      	mov	r8, r0
 8019126:	4689      	mov	r9, r1
 8019128:	4692      	mov	sl, r2
 801912a:	461e      	mov	r6, r3
 801912c:	460f      	mov	r7, r1
 801912e:	463d      	mov	r5, r7
 8019130:	9808      	ldr	r0, [sp, #32]
 8019132:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019136:	f7fe fe59 	bl	8017dec <__locale_ctype_ptr_l>
 801913a:	4420      	add	r0, r4
 801913c:	7843      	ldrb	r3, [r0, #1]
 801913e:	f013 0308 	ands.w	r3, r3, #8
 8019142:	d130      	bne.n	80191a6 <_strtoul_l.isra.0+0x86>
 8019144:	2c2d      	cmp	r4, #45	; 0x2d
 8019146:	d130      	bne.n	80191aa <_strtoul_l.isra.0+0x8a>
 8019148:	787c      	ldrb	r4, [r7, #1]
 801914a:	1cbd      	adds	r5, r7, #2
 801914c:	2101      	movs	r1, #1
 801914e:	2e00      	cmp	r6, #0
 8019150:	d05c      	beq.n	801920c <_strtoul_l.isra.0+0xec>
 8019152:	2e10      	cmp	r6, #16
 8019154:	d109      	bne.n	801916a <_strtoul_l.isra.0+0x4a>
 8019156:	2c30      	cmp	r4, #48	; 0x30
 8019158:	d107      	bne.n	801916a <_strtoul_l.isra.0+0x4a>
 801915a:	782b      	ldrb	r3, [r5, #0]
 801915c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8019160:	2b58      	cmp	r3, #88	; 0x58
 8019162:	d14e      	bne.n	8019202 <_strtoul_l.isra.0+0xe2>
 8019164:	786c      	ldrb	r4, [r5, #1]
 8019166:	2610      	movs	r6, #16
 8019168:	3502      	adds	r5, #2
 801916a:	f04f 32ff 	mov.w	r2, #4294967295
 801916e:	2300      	movs	r3, #0
 8019170:	fbb2 f2f6 	udiv	r2, r2, r6
 8019174:	fb06 fc02 	mul.w	ip, r6, r2
 8019178:	ea6f 0c0c 	mvn.w	ip, ip
 801917c:	4618      	mov	r0, r3
 801917e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8019182:	2f09      	cmp	r7, #9
 8019184:	d817      	bhi.n	80191b6 <_strtoul_l.isra.0+0x96>
 8019186:	463c      	mov	r4, r7
 8019188:	42a6      	cmp	r6, r4
 801918a:	dd23      	ble.n	80191d4 <_strtoul_l.isra.0+0xb4>
 801918c:	2b00      	cmp	r3, #0
 801918e:	db1e      	blt.n	80191ce <_strtoul_l.isra.0+0xae>
 8019190:	4282      	cmp	r2, r0
 8019192:	d31c      	bcc.n	80191ce <_strtoul_l.isra.0+0xae>
 8019194:	d101      	bne.n	801919a <_strtoul_l.isra.0+0x7a>
 8019196:	45a4      	cmp	ip, r4
 8019198:	db19      	blt.n	80191ce <_strtoul_l.isra.0+0xae>
 801919a:	fb00 4006 	mla	r0, r0, r6, r4
 801919e:	2301      	movs	r3, #1
 80191a0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80191a4:	e7eb      	b.n	801917e <_strtoul_l.isra.0+0x5e>
 80191a6:	462f      	mov	r7, r5
 80191a8:	e7c1      	b.n	801912e <_strtoul_l.isra.0+0xe>
 80191aa:	2c2b      	cmp	r4, #43	; 0x2b
 80191ac:	bf04      	itt	eq
 80191ae:	1cbd      	addeq	r5, r7, #2
 80191b0:	787c      	ldrbeq	r4, [r7, #1]
 80191b2:	4619      	mov	r1, r3
 80191b4:	e7cb      	b.n	801914e <_strtoul_l.isra.0+0x2e>
 80191b6:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80191ba:	2f19      	cmp	r7, #25
 80191bc:	d801      	bhi.n	80191c2 <_strtoul_l.isra.0+0xa2>
 80191be:	3c37      	subs	r4, #55	; 0x37
 80191c0:	e7e2      	b.n	8019188 <_strtoul_l.isra.0+0x68>
 80191c2:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80191c6:	2f19      	cmp	r7, #25
 80191c8:	d804      	bhi.n	80191d4 <_strtoul_l.isra.0+0xb4>
 80191ca:	3c57      	subs	r4, #87	; 0x57
 80191cc:	e7dc      	b.n	8019188 <_strtoul_l.isra.0+0x68>
 80191ce:	f04f 33ff 	mov.w	r3, #4294967295
 80191d2:	e7e5      	b.n	80191a0 <_strtoul_l.isra.0+0x80>
 80191d4:	2b00      	cmp	r3, #0
 80191d6:	da09      	bge.n	80191ec <_strtoul_l.isra.0+0xcc>
 80191d8:	2322      	movs	r3, #34	; 0x22
 80191da:	f8c8 3000 	str.w	r3, [r8]
 80191de:	f04f 30ff 	mov.w	r0, #4294967295
 80191e2:	f1ba 0f00 	cmp.w	sl, #0
 80191e6:	d107      	bne.n	80191f8 <_strtoul_l.isra.0+0xd8>
 80191e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80191ec:	b101      	cbz	r1, 80191f0 <_strtoul_l.isra.0+0xd0>
 80191ee:	4240      	negs	r0, r0
 80191f0:	f1ba 0f00 	cmp.w	sl, #0
 80191f4:	d0f8      	beq.n	80191e8 <_strtoul_l.isra.0+0xc8>
 80191f6:	b10b      	cbz	r3, 80191fc <_strtoul_l.isra.0+0xdc>
 80191f8:	f105 39ff 	add.w	r9, r5, #4294967295
 80191fc:	f8ca 9000 	str.w	r9, [sl]
 8019200:	e7f2      	b.n	80191e8 <_strtoul_l.isra.0+0xc8>
 8019202:	2430      	movs	r4, #48	; 0x30
 8019204:	2e00      	cmp	r6, #0
 8019206:	d1b0      	bne.n	801916a <_strtoul_l.isra.0+0x4a>
 8019208:	2608      	movs	r6, #8
 801920a:	e7ae      	b.n	801916a <_strtoul_l.isra.0+0x4a>
 801920c:	2c30      	cmp	r4, #48	; 0x30
 801920e:	d0a4      	beq.n	801915a <_strtoul_l.isra.0+0x3a>
 8019210:	260a      	movs	r6, #10
 8019212:	e7aa      	b.n	801916a <_strtoul_l.isra.0+0x4a>

08019214 <_strtoul_r>:
 8019214:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019216:	4c06      	ldr	r4, [pc, #24]	; (8019230 <_strtoul_r+0x1c>)
 8019218:	4d06      	ldr	r5, [pc, #24]	; (8019234 <_strtoul_r+0x20>)
 801921a:	6824      	ldr	r4, [r4, #0]
 801921c:	6a24      	ldr	r4, [r4, #32]
 801921e:	2c00      	cmp	r4, #0
 8019220:	bf08      	it	eq
 8019222:	462c      	moveq	r4, r5
 8019224:	9400      	str	r4, [sp, #0]
 8019226:	f7ff ff7b 	bl	8019120 <_strtoul_l.isra.0>
 801922a:	b003      	add	sp, #12
 801922c:	bd30      	pop	{r4, r5, pc}
 801922e:	bf00      	nop
 8019230:	2000000c 	.word	0x2000000c
 8019234:	20000070 	.word	0x20000070

08019238 <__submore>:
 8019238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801923c:	460c      	mov	r4, r1
 801923e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8019240:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019244:	4299      	cmp	r1, r3
 8019246:	d11d      	bne.n	8019284 <__submore+0x4c>
 8019248:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801924c:	f7ff fa66 	bl	801871c <_malloc_r>
 8019250:	b918      	cbnz	r0, 801925a <__submore+0x22>
 8019252:	f04f 30ff 	mov.w	r0, #4294967295
 8019256:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801925a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801925e:	63a3      	str	r3, [r4, #56]	; 0x38
 8019260:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8019264:	6360      	str	r0, [r4, #52]	; 0x34
 8019266:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801926a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801926e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8019272:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8019276:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801927a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801927e:	6020      	str	r0, [r4, #0]
 8019280:	2000      	movs	r0, #0
 8019282:	e7e8      	b.n	8019256 <__submore+0x1e>
 8019284:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8019286:	0077      	lsls	r7, r6, #1
 8019288:	463a      	mov	r2, r7
 801928a:	f000 f837 	bl	80192fc <_realloc_r>
 801928e:	4605      	mov	r5, r0
 8019290:	2800      	cmp	r0, #0
 8019292:	d0de      	beq.n	8019252 <__submore+0x1a>
 8019294:	eb00 0806 	add.w	r8, r0, r6
 8019298:	4601      	mov	r1, r0
 801929a:	4632      	mov	r2, r6
 801929c:	4640      	mov	r0, r8
 801929e:	f7fb fe8b 	bl	8014fb8 <memcpy>
 80192a2:	f8c4 8000 	str.w	r8, [r4]
 80192a6:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80192aa:	e7e9      	b.n	8019280 <__submore+0x48>

080192ac <__ascii_wctomb>:
 80192ac:	b149      	cbz	r1, 80192c2 <__ascii_wctomb+0x16>
 80192ae:	2aff      	cmp	r2, #255	; 0xff
 80192b0:	bf85      	ittet	hi
 80192b2:	238a      	movhi	r3, #138	; 0x8a
 80192b4:	6003      	strhi	r3, [r0, #0]
 80192b6:	700a      	strbls	r2, [r1, #0]
 80192b8:	f04f 30ff 	movhi.w	r0, #4294967295
 80192bc:	bf98      	it	ls
 80192be:	2001      	movls	r0, #1
 80192c0:	4770      	bx	lr
 80192c2:	4608      	mov	r0, r1
 80192c4:	4770      	bx	lr

080192c6 <memmove>:
 80192c6:	4288      	cmp	r0, r1
 80192c8:	b510      	push	{r4, lr}
 80192ca:	eb01 0302 	add.w	r3, r1, r2
 80192ce:	d807      	bhi.n	80192e0 <memmove+0x1a>
 80192d0:	1e42      	subs	r2, r0, #1
 80192d2:	4299      	cmp	r1, r3
 80192d4:	d00a      	beq.n	80192ec <memmove+0x26>
 80192d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80192da:	f802 4f01 	strb.w	r4, [r2, #1]!
 80192de:	e7f8      	b.n	80192d2 <memmove+0xc>
 80192e0:	4283      	cmp	r3, r0
 80192e2:	d9f5      	bls.n	80192d0 <memmove+0xa>
 80192e4:	1881      	adds	r1, r0, r2
 80192e6:	1ad2      	subs	r2, r2, r3
 80192e8:	42d3      	cmn	r3, r2
 80192ea:	d100      	bne.n	80192ee <memmove+0x28>
 80192ec:	bd10      	pop	{r4, pc}
 80192ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80192f2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80192f6:	e7f7      	b.n	80192e8 <memmove+0x22>

080192f8 <__malloc_lock>:
 80192f8:	4770      	bx	lr

080192fa <__malloc_unlock>:
 80192fa:	4770      	bx	lr

080192fc <_realloc_r>:
 80192fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80192fe:	4607      	mov	r7, r0
 8019300:	4614      	mov	r4, r2
 8019302:	460e      	mov	r6, r1
 8019304:	b921      	cbnz	r1, 8019310 <_realloc_r+0x14>
 8019306:	4611      	mov	r1, r2
 8019308:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801930c:	f7ff ba06 	b.w	801871c <_malloc_r>
 8019310:	b922      	cbnz	r2, 801931c <_realloc_r+0x20>
 8019312:	f7ff f9b5 	bl	8018680 <_free_r>
 8019316:	4625      	mov	r5, r4
 8019318:	4628      	mov	r0, r5
 801931a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801931c:	f000 f814 	bl	8019348 <_malloc_usable_size_r>
 8019320:	42a0      	cmp	r0, r4
 8019322:	d20f      	bcs.n	8019344 <_realloc_r+0x48>
 8019324:	4621      	mov	r1, r4
 8019326:	4638      	mov	r0, r7
 8019328:	f7ff f9f8 	bl	801871c <_malloc_r>
 801932c:	4605      	mov	r5, r0
 801932e:	2800      	cmp	r0, #0
 8019330:	d0f2      	beq.n	8019318 <_realloc_r+0x1c>
 8019332:	4631      	mov	r1, r6
 8019334:	4622      	mov	r2, r4
 8019336:	f7fb fe3f 	bl	8014fb8 <memcpy>
 801933a:	4631      	mov	r1, r6
 801933c:	4638      	mov	r0, r7
 801933e:	f7ff f99f 	bl	8018680 <_free_r>
 8019342:	e7e9      	b.n	8019318 <_realloc_r+0x1c>
 8019344:	4635      	mov	r5, r6
 8019346:	e7e7      	b.n	8019318 <_realloc_r+0x1c>

08019348 <_malloc_usable_size_r>:
 8019348:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801934c:	1f18      	subs	r0, r3, #4
 801934e:	2b00      	cmp	r3, #0
 8019350:	bfbc      	itt	lt
 8019352:	580b      	ldrlt	r3, [r1, r0]
 8019354:	18c0      	addlt	r0, r0, r3
 8019356:	4770      	bx	lr

08019358 <_init>:
 8019358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801935a:	bf00      	nop
 801935c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801935e:	bc08      	pop	{r3}
 8019360:	469e      	mov	lr, r3
 8019362:	4770      	bx	lr

08019364 <_fini>:
 8019364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019366:	bf00      	nop
 8019368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801936a:	bc08      	pop	{r3}
 801936c:	469e      	mov	lr, r3
 801936e:	4770      	bx	lr
