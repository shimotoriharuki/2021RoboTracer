
2021RoboTrace_1.5.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018070  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b24  08018230  08018230  00028230  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018d54  08018d54  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  08018d54  08018d54  00028d54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018d5c  08018d5c  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08018d5c  08018d5c  00028d5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018d64  08018d64  00028d64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08018d68  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00040c58  200001e0  08018f44  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  20040e38  08018f44  00030e38  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00038b13  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000795e  00000000  00000000  00068d1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002268  00000000  00000000  00070680  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001fa8  00000000  00000000  000728e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00036f6d  00000000  00000000  00074890  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000259ff  00000000  00000000  000ab7fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001108c6  00000000  00000000  000d11fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001e1ac2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a3a0  00000000  00000000  001e1b40  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08018218 	.word	0x08018218

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	08018218 	.word	0x08018218

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b972 	b.w	8000fb4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14b      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4615      	mov	r5, r2
 8000cfa:	d967      	bls.n	8000dcc <__udivmoddi4+0xe4>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0720 	rsb	r7, r2, #32
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	ea47 0803 	orr.w	r8, r7, r3
 8000d14:	4094      	lsls	r4, r2
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d20:	fa1f fc85 	uxth.w	ip, r5
 8000d24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x60>
 8000d34:	18eb      	adds	r3, r5, r3
 8000d36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d3a:	f080 811b 	bcs.w	8000f74 <__udivmoddi4+0x28c>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 8118 	bls.w	8000f74 <__udivmoddi4+0x28c>
 8000d44:	3f02      	subs	r7, #2
 8000d46:	442b      	add	r3, r5
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x8c>
 8000d60:	192c      	adds	r4, r5, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d78:	eba4 040c 	sub.w	r4, r4, ip
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa0>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xbe>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80eb 	beq.w	8000f6e <__udivmoddi4+0x286>
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d9e:	4638      	mov	r0, r7
 8000da0:	4639      	mov	r1, r7
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f783 	clz	r7, r3
 8000daa:	2f00      	cmp	r7, #0
 8000dac:	d147      	bne.n	8000e3e <__udivmoddi4+0x156>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd0>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80fa 	bhi.w	8000fac <__udivmoddi4+0x2c4>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa0>
 8000dc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xe8>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 808f 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dda:	1b49      	subs	r1, r1, r5
 8000ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de0:	fa1f f885 	uxth.w	r8, r5
 8000de4:	2701      	movs	r7, #1
 8000de6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dea:	0c23      	lsrs	r3, r4, #16
 8000dec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb08 f10c 	mul.w	r1, r8, ip
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfc:	18eb      	adds	r3, r5, r3
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	f200 80cd 	bhi.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1a59      	subs	r1, r3, r1
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x14c>
 8000e24:	192c      	adds	r4, r5, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x14a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80b6 	bhi.w	8000f9e <__udivmoddi4+0x2b6>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e79f      	b.n	8000d7e <__udivmoddi4+0x96>
 8000e3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e42:	40bb      	lsls	r3, r7
 8000e44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e5c:	4325      	orrs	r5, r4
 8000e5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e62:	0c2c      	lsrs	r4, r5, #16
 8000e64:	fb08 3319 	mls	r3, r8, r9, r3
 8000e68:	fa1f fa8e 	uxth.w	sl, lr
 8000e6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e70:	fb09 f40a 	mul.w	r4, r9, sl
 8000e74:	429c      	cmp	r4, r3
 8000e76:	fa02 f207 	lsl.w	r2, r2, r7
 8000e7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1e 0303 	adds.w	r3, lr, r3
 8000e84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e88:	f080 8087 	bcs.w	8000f9a <__udivmoddi4+0x2b2>
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	f240 8084 	bls.w	8000f9a <__udivmoddi4+0x2b2>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4473      	add	r3, lr
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	b2ad      	uxth	r5, r5
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ea8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eac:	45a2      	cmp	sl, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1e 0404 	adds.w	r4, lr, r4
 8000eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eb8:	d26b      	bcs.n	8000f92 <__udivmoddi4+0x2aa>
 8000eba:	45a2      	cmp	sl, r4
 8000ebc:	d969      	bls.n	8000f92 <__udivmoddi4+0x2aa>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4474      	add	r4, lr
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eca:	eba4 040a 	sub.w	r4, r4, sl
 8000ece:	454c      	cmp	r4, r9
 8000ed0:	46c2      	mov	sl, r8
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	d354      	bcc.n	8000f80 <__udivmoddi4+0x298>
 8000ed6:	d051      	beq.n	8000f7c <__udivmoddi4+0x294>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d069      	beq.n	8000fb0 <__udivmoddi4+0x2c8>
 8000edc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ee0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ee4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	40fc      	lsrs	r4, r7
 8000eec:	ea4c 0505 	orr.w	r5, ip, r5
 8000ef0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ef4:	2700      	movs	r7, #0
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f703 	lsr.w	r7, r0, r3
 8000f00:	4095      	lsls	r5, r2
 8000f02:	fa01 f002 	lsl.w	r0, r1, r2
 8000f06:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f0e:	4338      	orrs	r0, r7
 8000f10:	0c01      	lsrs	r1, r0, #16
 8000f12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f16:	fa1f f885 	uxth.w	r8, r5
 8000f1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb07 f308 	mul.w	r3, r7, r8
 8000f26:	428b      	cmp	r3, r1
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x256>
 8000f2e:	1869      	adds	r1, r5, r1
 8000f30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f34:	d22f      	bcs.n	8000f96 <__udivmoddi4+0x2ae>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d92d      	bls.n	8000f96 <__udivmoddi4+0x2ae>
 8000f3a:	3f02      	subs	r7, #2
 8000f3c:	4429      	add	r1, r5
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	b281      	uxth	r1, r0
 8000f42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f4e:	fb00 f308 	mul.w	r3, r0, r8
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x27e>
 8000f56:	1869      	adds	r1, r5, r1
 8000f58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f5c:	d217      	bcs.n	8000f8e <__udivmoddi4+0x2a6>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d915      	bls.n	8000f8e <__udivmoddi4+0x2a6>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4429      	add	r1, r5
 8000f66:	1ac9      	subs	r1, r1, r3
 8000f68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f6c:	e73b      	b.n	8000de6 <__udivmoddi4+0xfe>
 8000f6e:	4637      	mov	r7, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e709      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000f74:	4607      	mov	r7, r0
 8000f76:	e6e7      	b.n	8000d48 <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x8c>
 8000f7c:	4541      	cmp	r1, r8
 8000f7e:	d2ab      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f84:	eb69 020e 	sbc.w	r2, r9, lr
 8000f88:	3801      	subs	r0, #1
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	e7a4      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f8e:	4660      	mov	r0, ip
 8000f90:	e7e9      	b.n	8000f66 <__udivmoddi4+0x27e>
 8000f92:	4618      	mov	r0, r3
 8000f94:	e795      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f96:	4667      	mov	r7, ip
 8000f98:	e7d1      	b.n	8000f3e <__udivmoddi4+0x256>
 8000f9a:	4681      	mov	r9, r0
 8000f9c:	e77c      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	442c      	add	r4, r5
 8000fa2:	e747      	b.n	8000e34 <__udivmoddi4+0x14c>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	442b      	add	r3, r5
 8000faa:	e72f      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fac:	4638      	mov	r0, r7
 8000fae:	e708      	b.n	8000dc2 <__udivmoddi4+0xda>
 8000fb0:	4637      	mov	r7, r6
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0xa0>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <lcd_cmd>:

extern I2C_HandleTypeDef hi2c1;

#define SLAVEADRESS (0x3E<<1)

void lcd_cmd(uint8_t cmd) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txcmd[2] = { 0x00 , cmd };
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	733b      	strb	r3, [r7, #12]
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txcmd,2,100);
 8000fca:	f107 020c 	add.w	r2, r7, #12
 8000fce:	2364      	movs	r3, #100	; 0x64
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	217c      	movs	r1, #124	; 0x7c
 8000fd6:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <lcd_cmd+0x2c>)
 8000fd8:	f008 fdc0 	bl	8009b5c <HAL_I2C_Master_Transmit>
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	2003e92c 	.word	0x2003e92c

08000fe8 <lcd_data>:

void lcd_data(uint8_t data) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txdata[2] = { 0x40 , data };
 8000ff2:	2340      	movs	r3, #64	; 0x40
 8000ff4:	733b      	strb	r3, [r7, #12]
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txdata,2,100);
 8000ffa:	f107 020c 	add.w	r2, r7, #12
 8000ffe:	2364      	movs	r3, #100	; 0x64
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2302      	movs	r3, #2
 8001004:	217c      	movs	r1, #124	; 0x7c
 8001006:	4803      	ldr	r0, [pc, #12]	; (8001014 <lcd_data+0x2c>)
 8001008:	f008 fda8 	bl	8009b5c <HAL_I2C_Master_Transmit>
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	2003e92c 	.word	0x2003e92c

08001018 <lcd_init>:

void lcd_init(){
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);//lcd_reset_pin
 800101c:	2201      	movs	r2, #1
 800101e:	2110      	movs	r1, #16
 8001020:	481e      	ldr	r0, [pc, #120]	; (800109c <lcd_init+0x84>)
 8001022:	f008 fc49 	bl	80098b8 <HAL_GPIO_WritePin>
	HAL_Delay(40);
 8001026:	2028      	movs	r0, #40	; 0x28
 8001028:	f007 f9b0 	bl	800838c <HAL_Delay>
	lcd_cmd(0x38);
 800102c:	2038      	movs	r0, #56	; 0x38
 800102e:	f7ff ffc3 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f007 f9aa 	bl	800838c <HAL_Delay>
	lcd_cmd(0x39);
 8001038:	2039      	movs	r0, #57	; 0x39
 800103a:	f7ff ffbd 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800103e:	2001      	movs	r0, #1
 8001040:	f007 f9a4 	bl	800838c <HAL_Delay>
	lcd_cmd(0x14);
 8001044:	2014      	movs	r0, #20
 8001046:	f7ff ffb7 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800104a:	2001      	movs	r0, #1
 800104c:	f007 f99e 	bl	800838c <HAL_Delay>
	lcd_cmd(0x70);
 8001050:	2070      	movs	r0, #112	; 0x70
 8001052:	f7ff ffb1 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001056:	2001      	movs	r0, #1
 8001058:	f007 f998 	bl	800838c <HAL_Delay>
	lcd_cmd(0x56);
 800105c:	2056      	movs	r0, #86	; 0x56
 800105e:	f7ff ffab 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f007 f992 	bl	800838c <HAL_Delay>
	lcd_cmd(0x6C);
 8001068:	206c      	movs	r0, #108	; 0x6c
 800106a:	f7ff ffa5 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(200);
 800106e:	20c8      	movs	r0, #200	; 0xc8
 8001070:	f007 f98c 	bl	800838c <HAL_Delay>
	lcd_cmd(0x38);
 8001074:	2038      	movs	r0, #56	; 0x38
 8001076:	f7ff ff9f 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800107a:	2001      	movs	r0, #1
 800107c:	f007 f986 	bl	800838c <HAL_Delay>
	lcd_cmd(0x0C);
 8001080:	200c      	movs	r0, #12
 8001082:	f7ff ff99 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001086:	2001      	movs	r0, #1
 8001088:	f007 f980 	bl	800838c <HAL_Delay>
	lcd_cmd(0x01);
 800108c:	2001      	movs	r0, #1
 800108e:	f7ff ff93 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001092:	2001      	movs	r0, #1
 8001094:	f007 f97a 	bl	800838c <HAL_Delay>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40020000 	.word	0x40020000

080010a0 <lcd_clear>:

void lcd_clear(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	lcd_cmd(0x01);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff ff87 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010aa:	2001      	movs	r0, #1
 80010ac:	f007 f96e 	bl	800838c <HAL_Delay>
	lcd_cmd(0x02);
 80010b0:	2002      	movs	r0, #2
 80010b2:	f7ff ff81 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f007 f968 	bl	800838c <HAL_Delay>
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <lcd_locate>:

void lcd_locate(int x, int y) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
	lcd_cmd(0x80 + y*0x40 + x);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	3302      	adds	r3, #2
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	019b      	lsls	r3, r3, #6
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	4413      	add	r3, r2
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff6b 	bl	8000fb8 <lcd_cmd>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <lcd_print>:

void lcd_print(const char *str) {
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
	while(*str != '\0')
 80010f2:	e007      	b.n	8001104 <lcd_print+0x1a>
	{
			lcd_data(*str);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff75 	bl	8000fe8 <lcd_data>
			str++;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3301      	adds	r3, #1
 8001102:	607b      	str	r3, [r7, #4]
	while(*str != '\0')
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f3      	bne.n	80010f4 <lcd_print+0xa>
	}
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <lcd_printf>:

short lcd_printf(const char *format, ...) {
 8001114:	b40f      	push	{r0, r1, r2, r3}
 8001116:	b580      	push	{r7, lr}
 8001118:	b088      	sub	sp, #32
 800111a:	af00      	add	r7, sp, #0
	va_list argptr;
	char lcd_bff[20];
	short ret;

  va_start(argptr, format);
 800111c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001120:	61bb      	str	r3, [r7, #24]
  ret = vsprintf(lcd_bff, format, argptr);
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001128:	4618      	mov	r0, r3
 800112a:	f014 fc49 	bl	80159c0 <vsiprintf>
 800112e:	4603      	mov	r3, r0
 8001130:	83fb      	strh	r3, [r7, #30]
	va_end(argptr);

	if(ret>0) {
 8001132:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001136:	2b00      	cmp	r3, #0
 8001138:	dd03      	ble.n	8001142 <lcd_printf+0x2e>
		lcd_print(lcd_bff);
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ffd4 	bl	80010ea <lcd_print>
	}

	return ret;
 8001142:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001150:	b004      	add	sp, #16
 8001152:	4770      	bx	lr

08001154 <_ZN7EncoderC1Ev>:

float monitor_distance;
float monitor_cnt_l;
float monitor_cnt_l_lpf;

Encoder::Encoder() : cnt_l_(0), cnt_r_(0), distance_(0), total_cnt_l_(0), total_cnt_r_(0), distance_10mm_(0), total_distance_(0), cross_line_ignore_distance_(0){}
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f04f 0200 	mov.w	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f04f 0200 	mov.w	r2, #0
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f04f 0200 	mov.w	r2, #0
 8001172:	609a      	str	r2, [r3, #8]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	f04f 0200 	mov.w	r2, #0
 800117a:	60da      	str	r2, [r3, #12]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f04f 0200 	mov.w	r2, #0
 8001182:	611a      	str	r2, [r3, #16]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f04f 0200 	mov.w	r2, #0
 800118a:	615a      	str	r2, [r3, #20]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f04f 0200 	mov.w	r2, #0
 8001192:	619a      	str	r2, [r3, #24]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f04f 0200 	mov.w	r2, #0
 800119a:	61da      	str	r2, [r3, #28]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	4618      	mov	r0, r3
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
	...

080011ac <_ZN7Encoder4initEv>:

void Encoder::init()
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 80011b4:	213c      	movs	r1, #60	; 0x3c
 80011b6:	4809      	ldr	r0, [pc, #36]	; (80011dc <_ZN7Encoder4initEv+0x30>)
 80011b8:	f00c fb68 	bl	800d88c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 80011bc:	213c      	movs	r1, #60	; 0x3c
 80011be:	4808      	ldr	r0, [pc, #32]	; (80011e0 <_ZN7Encoder4initEv+0x34>)
 80011c0:	f00c fb64 	bl	800d88c <HAL_TIM_Encoder_Start>
	TIM1 -> CNT = CNT_OFFSET;
 80011c4:	4b07      	ldr	r3, [pc, #28]	; (80011e4 <_ZN7Encoder4initEv+0x38>)
 80011c6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011ca:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 80011cc:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <_ZN7Encoder4initEv+0x3c>)
 80011ce:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011d2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80011d4:	bf00      	nop
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	2003eb80 	.word	0x2003eb80
 80011e0:	2003e864 	.word	0x2003e864
 80011e4:	40010000 	.word	0x40010000
 80011e8:	40010400 	.word	0x40010400
 80011ec:	00000000 	.word	0x00000000

080011f0 <_ZN7Encoder6updateEv>:

void Encoder::update()
{
 80011f0:	b5b0      	push	{r4, r5, r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
	static float pre_cnt_l, pre_cnt_r;
	float cnt_l = (float(CNT_OFFSET) - float(TIM1 -> CNT)) * CORRECTION_COEFFICIENT;
 80011f8:	4b69      	ldr	r3, [pc, #420]	; (80013a0 <_ZN7Encoder6updateEv+0x1b0>)
 80011fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011fc:	ee07 3a90 	vmov	s15, r3
 8001200:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001204:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80013a4 <_ZN7Encoder6updateEv+0x1b4>
 8001208:	ee77 7a67 	vsub.f32	s15, s14, s15
 800120c:	ed9f 7a66 	vldr	s14, [pc, #408]	; 80013a8 <_ZN7Encoder6updateEv+0x1b8>
 8001210:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001214:	edc7 7a03 	vstr	s15, [r7, #12]
	float cnt_r = (float(TIM8 -> CNT) - float(CNT_OFFSET)) * CORRECTION_COEFFICIENT;
 8001218:	4b64      	ldr	r3, [pc, #400]	; (80013ac <_ZN7Encoder6updateEv+0x1bc>)
 800121a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800121c:	ee07 3a90 	vmov	s15, r3
 8001220:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001224:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 80013a4 <_ZN7Encoder6updateEv+0x1b4>
 8001228:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800122c:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 80013a8 <_ZN7Encoder6updateEv+0x1b8>
 8001230:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001234:	edc7 7a02 	vstr	s15, [r7, #8]
	monitor_cnt_l = cnt_l;
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	4a5d      	ldr	r2, [pc, #372]	; (80013b0 <_ZN7Encoder6updateEv+0x1c0>)
 800123c:	6013      	str	r3, [r2, #0]

	cnt_l_ = ((R_ENC)*(cnt_l) + (1.0 - (R_ENC))* (pre_cnt_l)); // lowpath filter
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff f999 	bl	8000578 <__aeabi_f2d>
 8001246:	a350      	add	r3, pc, #320	; (adr r3, 8001388 <_ZN7Encoder6updateEv+0x198>)
 8001248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800124c:	f7ff f9ec 	bl	8000628 <__aeabi_dmul>
 8001250:	4603      	mov	r3, r0
 8001252:	460c      	mov	r4, r1
 8001254:	4625      	mov	r5, r4
 8001256:	461c      	mov	r4, r3
 8001258:	4b56      	ldr	r3, [pc, #344]	; (80013b4 <_ZN7Encoder6updateEv+0x1c4>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4618      	mov	r0, r3
 800125e:	f7ff f98b 	bl	8000578 <__aeabi_f2d>
 8001262:	a34b      	add	r3, pc, #300	; (adr r3, 8001390 <_ZN7Encoder6updateEv+0x1a0>)
 8001264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001268:	f7ff f9de 	bl	8000628 <__aeabi_dmul>
 800126c:	4602      	mov	r2, r0
 800126e:	460b      	mov	r3, r1
 8001270:	4620      	mov	r0, r4
 8001272:	4629      	mov	r1, r5
 8001274:	f7ff f822 	bl	80002bc <__adddf3>
 8001278:	4603      	mov	r3, r0
 800127a:	460c      	mov	r4, r1
 800127c:	4618      	mov	r0, r3
 800127e:	4621      	mov	r1, r4
 8001280:	f7ff fcca 	bl	8000c18 <__aeabi_d2f>
 8001284:	4602      	mov	r2, r0
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	601a      	str	r2, [r3, #0]
	cnt_r_ = ((R_ENC)*(cnt_r) + (1.0 - (R_ENC))* (pre_cnt_r)); // lowpath filter
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff f973 	bl	8000578 <__aeabi_f2d>
 8001292:	a33d      	add	r3, pc, #244	; (adr r3, 8001388 <_ZN7Encoder6updateEv+0x198>)
 8001294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001298:	f7ff f9c6 	bl	8000628 <__aeabi_dmul>
 800129c:	4603      	mov	r3, r0
 800129e:	460c      	mov	r4, r1
 80012a0:	4625      	mov	r5, r4
 80012a2:	461c      	mov	r4, r3
 80012a4:	4b44      	ldr	r3, [pc, #272]	; (80013b8 <_ZN7Encoder6updateEv+0x1c8>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff f965 	bl	8000578 <__aeabi_f2d>
 80012ae:	a338      	add	r3, pc, #224	; (adr r3, 8001390 <_ZN7Encoder6updateEv+0x1a0>)
 80012b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b4:	f7ff f9b8 	bl	8000628 <__aeabi_dmul>
 80012b8:	4602      	mov	r2, r0
 80012ba:	460b      	mov	r3, r1
 80012bc:	4620      	mov	r0, r4
 80012be:	4629      	mov	r1, r5
 80012c0:	f7fe fffc 	bl	80002bc <__adddf3>
 80012c4:	4603      	mov	r3, r0
 80012c6:	460c      	mov	r4, r1
 80012c8:	4618      	mov	r0, r3
 80012ca:	4621      	mov	r1, r4
 80012cc:	f7ff fca4 	bl	8000c18 <__aeabi_d2f>
 80012d0:	4602      	mov	r2, r0
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	605a      	str	r2, [r3, #4]
	monitor_cnt_l_lpf = cnt_l_;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a38      	ldr	r2, [pc, #224]	; (80013bc <_ZN7Encoder6updateEv+0x1cc>)
 80012dc:	6013      	str	r3, [r2, #0]

	pre_cnt_l = cnt_l_;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a34      	ldr	r2, [pc, #208]	; (80013b4 <_ZN7Encoder6updateEv+0x1c4>)
 80012e4:	6013      	str	r3, [r2, #0]
	pre_cnt_r = cnt_r_;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	4a33      	ldr	r2, [pc, #204]	; (80013b8 <_ZN7Encoder6updateEv+0x1c8>)
 80012ec:	6013      	str	r3, [r2, #0]

	//total_cnt_l_ += cnt_l_;
	//total_cnt_r_ += cnt_r_;

	//distance_ = distance_ + DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
	distance_ = DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	ed93 7a00 	vldr	s14, [r3]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	edd3 7a01 	vldr	s15, [r3, #4]
 80012fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012fe:	ee17 0a90 	vmov	r0, s15
 8001302:	f7ff f939 	bl	8000578 <__aeabi_f2d>
 8001306:	a324      	add	r3, pc, #144	; (adr r3, 8001398 <_ZN7Encoder6updateEv+0x1a8>)
 8001308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800130c:	f7ff f98c 	bl	8000628 <__aeabi_dmul>
 8001310:	4603      	mov	r3, r0
 8001312:	460c      	mov	r4, r1
 8001314:	4618      	mov	r0, r3
 8001316:	4621      	mov	r1, r4
 8001318:	f04f 0200 	mov.w	r2, #0
 800131c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001320:	f7ff faac 	bl	800087c <__aeabi_ddiv>
 8001324:	4603      	mov	r3, r0
 8001326:	460c      	mov	r4, r1
 8001328:	4618      	mov	r0, r3
 800132a:	4621      	mov	r1, r4
 800132c:	f7ff fc74 	bl	8000c18 <__aeabi_d2f>
 8001330:	4602      	mov	r2, r0
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	609a      	str	r2, [r3, #8]
	distance_10mm_ += distance_;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	ed93 7a05 	vldr	s14, [r3, #20]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001342:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	edc3 7a05 	vstr	s15, [r3, #20]
	total_distance_ += distance_;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	ed93 7a06 	vldr	s14, [r3, #24]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	edd3 7a02 	vldr	s15, [r3, #8]
 8001358:	ee77 7a27 	vadd.f32	s15, s14, s15
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	edc3 7a06 	vstr	s15, [r3, #24]
	cross_line_ignore_distance_ += distance_;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	ed93 7a07 	vldr	s14, [r3, #28]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	edd3 7a02 	vldr	s15, [r3, #8]
 800136e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	edc3 7a07 	vstr	s15, [r3, #28]
	monitor_distance = distance_10mm_;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	695b      	ldr	r3, [r3, #20]
 800137c:	4a10      	ldr	r2, [pc, #64]	; (80013c0 <_ZN7Encoder6updateEv+0x1d0>)
 800137e:	6013      	str	r3, [r2, #0]
}
 8001380:	bf00      	nop
 8001382:	3710      	adds	r7, #16
 8001384:	46bd      	mov	sp, r7
 8001386:	bdb0      	pop	{r4, r5, r7, pc}
 8001388:	9999999a 	.word	0x9999999a
 800138c:	3fa99999 	.word	0x3fa99999
 8001390:	66666666 	.word	0x66666666
 8001394:	3fee6666 	.word	0x3fee6666
 8001398:	ce73a049 	.word	0xce73a049
 800139c:	3f77a3f6 	.word	0x3f77a3f6
 80013a0:	40010000 	.word	0x40010000
 80013a4:	47000000 	.word	0x47000000
 80013a8:	3f912547 	.word	0x3f912547
 80013ac:	40010400 	.word	0x40010400
 80013b0:	20000200 	.word	0x20000200
 80013b4:	20000208 	.word	0x20000208
 80013b8:	2000020c 	.word	0x2000020c
 80013bc:	20000204 	.word	0x20000204
 80013c0:	200001fc 	.word	0x200001fc

080013c4 <_ZN7Encoder5clearEv>:

void Encoder::clear()
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
	cnt_l_ = 0;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f04f 0200 	mov.w	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
	cnt_r_ = 0;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	605a      	str	r2, [r3, #4]
	TIM1 -> CNT = CNT_OFFSET;
 80013dc:	4b08      	ldr	r3, [pc, #32]	; (8001400 <_ZN7Encoder5clearEv+0x3c>)
 80013de:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013e2:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 80013e4:	4b07      	ldr	r3, [pc, #28]	; (8001404 <_ZN7Encoder5clearEv+0x40>)
 80013e6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013ea:	625a      	str	r2, [r3, #36]	; 0x24
	distance_ = 0;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f04f 0200 	mov.w	r2, #0
 80013f2:	609a      	str	r2, [r3, #8]
}
 80013f4:	bf00      	nop
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr
 8001400:	40010000 	.word	0x40010000
 8001404:	40010400 	.word	0x40010400

08001408 <_ZN7Encoder6getCntERfS0_>:

void Encoder::getCnt(float &cnt_l, float &cnt_r)
{
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	60f8      	str	r0, [r7, #12]
 8001410:	60b9      	str	r1, [r7, #8]
 8001412:	607a      	str	r2, [r7, #4]
	cnt_l = cnt_l_;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	601a      	str	r2, [r3, #0]
	cnt_r = cnt_r_;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	685a      	ldr	r2, [r3, #4]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	601a      	str	r2, [r3, #0]
}
 8001424:	bf00      	nop
 8001426:	3714      	adds	r7, #20
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <_ZN7Encoder11getDistanceEv>:

float Encoder::getDistance()
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
	return distance_;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	ee07 3a90 	vmov	s15, r3
}
 8001440:	eeb0 0a67 	vmov.f32	s0, s15
 8001444:	370c      	adds	r7, #12
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr

0800144e <_ZN7Encoder15getDistance10mmEv>:

float Encoder::getDistance10mm()
{
 800144e:	b480      	push	{r7}
 8001450:	b083      	sub	sp, #12
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
	return distance_10mm_;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	695b      	ldr	r3, [r3, #20]
 800145a:	ee07 3a90 	vmov	s15, r3
}
 800145e:	eeb0 0a67 	vmov.f32	s0, s15
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <_ZN7Encoder16getTotalDistanceEv>:

float Encoder::getTotalDistance()
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
	return total_distance_;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	699b      	ldr	r3, [r3, #24]
 8001478:	ee07 3a90 	vmov	s15, r3
}
 800147c:	eeb0 0a67 	vmov.f32	s0, s15
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr

0800148a <_ZN7Encoder16setTotalDistanceEf>:

void Encoder::setTotalDistance(float true_distance){
 800148a:	b480      	push	{r7}
 800148c:	b083      	sub	sp, #12
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
 8001492:	ed87 0a00 	vstr	s0, [r7]
	total_distance_ = true_distance;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	683a      	ldr	r2, [r7, #0]
 800149a:	619a      	str	r2, [r3, #24]
}
 800149c:	bf00      	nop
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr

080014a8 <_ZN7Encoder17clearDistance10mmEv>:
	return (total_cnt_l_ + total_cnt_r_) / 2;
}
*/

void Encoder::clearDistance10mm()
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
	//total_cnt_l_ = 0;
	//total_cnt_r_ = 0;
	distance_10mm_ = 0;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f04f 0200 	mov.w	r2, #0
 80014b6:	615a      	str	r2, [r3, #20]
}
 80014b8:	bf00      	nop
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <_ZN7Encoder18clearTotalDistanceEv>:

void Encoder::clearTotalDistance()
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
	total_distance_ = 0;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f04f 0200 	mov.w	r2, #0
 80014d2:	619a      	str	r2, [r3, #24]
}
 80014d4:	bf00      	nop
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <_ZN7Encoder26getCrossLineIgnoreDistanceEv>:

float Encoder::getCrossLineIgnoreDistance()
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
	return cross_line_ignore_distance_;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	69db      	ldr	r3, [r3, #28]
 80014ec:	ee07 3a90 	vmov	s15, r3
}
 80014f0:	eeb0 0a67 	vmov.f32	s0, s15
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr

080014fe <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>:

void Encoder::clearCrossLineIgnoreDistance()
{
 80014fe:	b480      	push	{r7}
 8001500:	b083      	sub	sp, #12
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
	cross_line_ignore_distance_ = 0;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	f04f 0200 	mov.w	r2, #0
 800150c:	61da      	str	r2, [r3, #28]
}
 800150e:	bf00      	nop
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr

0800151a <user_fopen>:
//* 役割　：　fopenする
//* 引数　：　char, float *: short　: フォルダ名、ファイル名
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fopen(const char *p_folder_name, const char *p_file_name){
 800151a:	b580      	push	{r7, lr}
 800151c:	b084      	sub	sp, #16
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
 8001522:	6039      	str	r1, [r7, #0]

	FRESULT ret = 0;
 8001524:	2300      	movs	r3, #0
 8001526:	73fb      	strb	r3, [r7, #15]

	create_path(p_folder_name, p_file_name);
 8001528:	6839      	ldr	r1, [r7, #0]
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f000 f978 	bl	8001820 <create_path>

	fopen_folder_and_file();	//書き込むファイルを選択
 8001530:	f000 f98c 	bl	800184c <fopen_folder_and_file>

	return ret;
 8001534:	7bfb      	ldrb	r3, [r7, #15]
}
 8001536:	4618      	mov	r0, r3
 8001538:	3710      	adds	r7, #16
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
	...

08001540 <user_fclose>:
//* 役割　：　fcloseする
//* 引数　：　void
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fclose(){
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 8001546:	2300      	movs	r3, #0
 8001548:	71fb      	strb	r3, [r7, #7]

	f_close(&fil);	//ファイル閉じる
 800154a:	4804      	ldr	r0, [pc, #16]	; (800155c <user_fclose+0x1c>)
 800154c:	f010 fef8 	bl	8012340 <f_close>

	return ret;
 8001550:	79fb      	ldrb	r3, [r7, #7]
}
 8001552:	4618      	mov	r0, r3
 8001554:	3708      	adds	r7, #8
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	2003d770 	.word	0x2003d770

08001560 <sd_write_float>:
//* 役割　：　SDに書き込む
//* 引数　：　short, float *, char : 変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_float(short size, float *data, char state){
 8001560:	b590      	push	{r4, r7, lr}
 8001562:	b087      	sub	sp, #28
 8001564:	af02      	add	r7, sp, #8
 8001566:	4603      	mov	r3, r0
 8001568:	6039      	str	r1, [r7, #0]
 800156a:	80fb      	strh	r3, [r7, #6]
 800156c:	4613      	mov	r3, r2
 800156e:	717b      	strb	r3, [r7, #5]
	FRESULT ret = 0;
 8001570:	2300      	movs	r3, #0
 8001572:	737b      	strb	r3, [r7, #13]

	for(short i = 0 ; i < size; i++){
 8001574:	2300      	movs	r3, #0
 8001576:	81fb      	strh	r3, [r7, #14]
 8001578:	e030      	b.n	80015dc <sd_write_float+0x7c>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 800157a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	683a      	ldr	r2, [r7, #0]
 8001582:	4413      	add	r3, r2
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4618      	mov	r0, r3
 8001588:	f7fe fff6 	bl	8000578 <__aeabi_f2d>
 800158c:	4603      	mov	r3, r0
 800158e:	460c      	mov	r4, r1
 8001590:	e9cd 3400 	strd	r3, r4, [sp]
 8001594:	4a17      	ldr	r2, [pc, #92]	; (80015f4 <sd_write_float+0x94>)
 8001596:	2180      	movs	r1, #128	; 0x80
 8001598:	4817      	ldr	r0, [pc, #92]	; (80015f8 <sd_write_float+0x98>)
 800159a:	f013 fac5 	bl	8014b28 <sniprintf>

		if(state == ADD_WRITE){
 800159e:	797b      	ldrb	r3, [r7, #5]
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d106      	bne.n	80015b2 <sd_write_float+0x52>
			f_lseek(&fil, f_size(&fil));	//ファイルの最後に移動
 80015a4:	4b15      	ldr	r3, [pc, #84]	; (80015fc <sd_write_float+0x9c>)
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	4619      	mov	r1, r3
 80015aa:	4814      	ldr	r0, [pc, #80]	; (80015fc <sd_write_float+0x9c>)
 80015ac:	f010 ff3c 	bl	8012428 <f_lseek>
 80015b0:	e003      	b.n	80015ba <sd_write_float+0x5a>
		}
		else{
			f_lseek(&fil, 0);	//ファイルの最初に移動
 80015b2:	2100      	movs	r1, #0
 80015b4:	4811      	ldr	r0, [pc, #68]	; (80015fc <sd_write_float+0x9c>)
 80015b6:	f010 ff37 	bl	8012428 <f_lseek>
		}

		f_write(&fil, buffer, strlen(buffer), &bw);	//書き込む
 80015ba:	480f      	ldr	r0, [pc, #60]	; (80015f8 <sd_write_float+0x98>)
 80015bc:	f7fe fe20 	bl	8000200 <strlen>
 80015c0:	4602      	mov	r2, r0
 80015c2:	4b0f      	ldr	r3, [pc, #60]	; (8001600 <sd_write_float+0xa0>)
 80015c4:	490c      	ldr	r1, [pc, #48]	; (80015f8 <sd_write_float+0x98>)
 80015c6:	480d      	ldr	r0, [pc, #52]	; (80015fc <sd_write_float+0x9c>)
 80015c8:	f010 fca5 	bl	8011f16 <f_write>

		bufclear();	//書き込み用のバッファをクリア
 80015cc:	f000 f958 	bl	8001880 <bufclear>
	for(short i = 0 ; i < size; i++){
 80015d0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	3301      	adds	r3, #1
 80015d8:	b29b      	uxth	r3, r3
 80015da:	81fb      	strh	r3, [r7, #14]
 80015dc:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80015e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	dbc8      	blt.n	800157a <sd_write_float+0x1a>
	}
	return ret;
 80015e8:	7b7b      	ldrb	r3, [r7, #13]
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3714      	adds	r7, #20
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd90      	pop	{r4, r7, pc}
 80015f2:	bf00      	nop
 80015f4:	08018230 	.word	0x08018230
 80015f8:	2003d6e0 	.word	0x2003d6e0
 80015fc:	2003d770 	.word	0x2003d770
 8001600:	2003d760 	.word	0x2003d760

08001604 <sd_write_array_float>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data, char state){
 8001604:	b590      	push	{r4, r7, lr}
 8001606:	b089      	sub	sp, #36	; 0x24
 8001608:	af02      	add	r7, sp, #8
 800160a:	60f8      	str	r0, [r7, #12]
 800160c:	60b9      	str	r1, [r7, #8]
 800160e:	603b      	str	r3, [r7, #0]
 8001610:	4613      	mov	r3, r2
 8001612:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001614:	2300      	movs	r3, #0
 8001616:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 8001618:	68b9      	ldr	r1, [r7, #8]
 800161a:	68f8      	ldr	r0, [r7, #12]
 800161c:	f000 f900 	bl	8001820 <create_path>

	if(state == OVER_WRITE){
 8001620:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001624:	2b00      	cmp	r3, #0
 8001626:	d108      	bne.n	800163a <sd_write_array_float+0x36>
		f_chdir(dirpath);
 8001628:	4822      	ldr	r0, [pc, #136]	; (80016b4 <sd_write_array_float+0xb0>)
 800162a:	f010 feb3 	bl	8012394 <f_chdir>
		f_unlink(filepath);	//	一回消す
 800162e:	4822      	ldr	r0, [pc, #136]	; (80016b8 <sd_write_array_float+0xb4>)
 8001630:	f011 f91e 	bl	8012870 <f_unlink>
		f_chdir("..");
 8001634:	4821      	ldr	r0, [pc, #132]	; (80016bc <sd_write_array_float+0xb8>)
 8001636:	f010 fead 	bl	8012394 <f_chdir>
	}

	fopen_folder_and_file();	//	書き込むファイルを選択
 800163a:	f000 f907 	bl	800184c <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 800163e:	2300      	movs	r3, #0
 8001640:	82fb      	strh	r3, [r7, #22]
 8001642:	e028      	b.n	8001696 <sd_write_array_float+0x92>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 8001644:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	683a      	ldr	r2, [r7, #0]
 800164c:	4413      	add	r3, r2
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4618      	mov	r0, r3
 8001652:	f7fe ff91 	bl	8000578 <__aeabi_f2d>
 8001656:	4603      	mov	r3, r0
 8001658:	460c      	mov	r4, r1
 800165a:	e9cd 3400 	strd	r3, r4, [sp]
 800165e:	4a18      	ldr	r2, [pc, #96]	; (80016c0 <sd_write_array_float+0xbc>)
 8001660:	2180      	movs	r1, #128	; 0x80
 8001662:	4818      	ldr	r0, [pc, #96]	; (80016c4 <sd_write_array_float+0xc0>)
 8001664:	f013 fa60 	bl	8014b28 <sniprintf>

		f_lseek(&fil, f_size(&fil));	//	ファイルの最後に移動
 8001668:	4b17      	ldr	r3, [pc, #92]	; (80016c8 <sd_write_array_float+0xc4>)
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	4619      	mov	r1, r3
 800166e:	4816      	ldr	r0, [pc, #88]	; (80016c8 <sd_write_array_float+0xc4>)
 8001670:	f010 feda 	bl	8012428 <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//	書き込む
 8001674:	4813      	ldr	r0, [pc, #76]	; (80016c4 <sd_write_array_float+0xc0>)
 8001676:	f7fe fdc3 	bl	8000200 <strlen>
 800167a:	4602      	mov	r2, r0
 800167c:	4b13      	ldr	r3, [pc, #76]	; (80016cc <sd_write_array_float+0xc8>)
 800167e:	4911      	ldr	r1, [pc, #68]	; (80016c4 <sd_write_array_float+0xc0>)
 8001680:	4811      	ldr	r0, [pc, #68]	; (80016c8 <sd_write_array_float+0xc4>)
 8001682:	f010 fc48 	bl	8011f16 <f_write>

		bufclear();	//	書き込み用のバッファをクリア
 8001686:	f000 f8fb 	bl	8001880 <bufclear>
	for(short i = 0 ; i < size; i++){
 800168a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800168e:	b29b      	uxth	r3, r3
 8001690:	3301      	adds	r3, #1
 8001692:	b29b      	uxth	r3, r3
 8001694:	82fb      	strh	r3, [r7, #22]
 8001696:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800169a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800169e:	429a      	cmp	r2, r3
 80016a0:	dbd0      	blt.n	8001644 <sd_write_array_float+0x40>
	}

	f_close(&fil);	//	ファイル閉じる
 80016a2:	4809      	ldr	r0, [pc, #36]	; (80016c8 <sd_write_array_float+0xc4>)
 80016a4:	f010 fe4c 	bl	8012340 <f_close>

	return ret;
 80016a8:	7d7b      	ldrb	r3, [r7, #21]
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	371c      	adds	r7, #28
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd90      	pop	{r4, r7, pc}
 80016b2:	bf00      	nop
 80016b4:	2003d5e0 	.word	0x2003d5e0
 80016b8:	2003c4a0 	.word	0x2003c4a0
 80016bc:	0801824c 	.word	0x0801824c
 80016c0:	08018230 	.word	0x08018230
 80016c4:	2003d6e0 	.word	0x2003d6e0
 80016c8:	2003d770 	.word	0x2003d770
 80016cc:	2003d760 	.word	0x2003d760

080016d0 <sd_read_array_float>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, float *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data){
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b086      	sub	sp, #24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	60b9      	str	r1, [r7, #8]
 80016da:	603b      	str	r3, [r7, #0]
 80016dc:	4613      	mov	r3, r2
 80016de:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 80016e0:	2300      	movs	r3, #0
 80016e2:	757b      	strb	r3, [r7, #21]
	short i = 0;
 80016e4:	2300      	movs	r3, #0
 80016e6:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 80016e8:	68b9      	ldr	r1, [r7, #8]
 80016ea:	68f8      	ldr	r0, [r7, #12]
 80016ec:	f000 f898 	bl	8001820 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 80016f0:	f000 f8ac 	bl	800184c <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80016f4:	e019      	b.n	800172a <sd_read_array_float+0x5a>
		sscanf(buffer, "%f", data + i);
 80016f6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	683a      	ldr	r2, [r7, #0]
 80016fe:	4413      	add	r3, r2
 8001700:	461a      	mov	r2, r3
 8001702:	4913      	ldr	r1, [pc, #76]	; (8001750 <sd_read_array_float+0x80>)
 8001704:	4813      	ldr	r0, [pc, #76]	; (8001754 <sd_read_array_float+0x84>)
 8001706:	f013 fa63 	bl	8014bd0 <siscanf>
		i++;
 800170a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800170e:	b29b      	uxth	r3, r3
 8001710:	3301      	adds	r3, #1
 8001712:	b29b      	uxth	r3, r3
 8001714:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 8001716:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800171a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800171e:	429a      	cmp	r2, r3
 8001720:	db03      	blt.n	800172a <sd_read_array_float+0x5a>
 8001722:	88fb      	ldrh	r3, [r7, #6]
 8001724:	3b01      	subs	r3, #1
 8001726:	b29b      	uxth	r3, r3
 8001728:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 800172a:	4a0b      	ldr	r2, [pc, #44]	; (8001758 <sd_read_array_float+0x88>)
 800172c:	2180      	movs	r1, #128	; 0x80
 800172e:	4809      	ldr	r0, [pc, #36]	; (8001754 <sd_read_array_float+0x84>)
 8001730:	f011 fa7c 	bl	8012c2c <f_gets>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d1dd      	bne.n	80016f6 <sd_read_array_float+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 800173a:	f000 f8a1 	bl	8001880 <bufclear>

	f_close(&fil);	//ファイル閉じる
 800173e:	4806      	ldr	r0, [pc, #24]	; (8001758 <sd_read_array_float+0x88>)
 8001740:	f010 fdfe 	bl	8012340 <f_close>

	return ret;
 8001744:	7d7b      	ldrb	r3, [r7, #21]
}
 8001746:	4618      	mov	r0, r3
 8001748:	3718      	adds	r7, #24
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	0801823c 	.word	0x0801823c
 8001754:	2003d6e0 	.word	0x2003d6e0
 8001758:	2003d770 	.word	0x2003d770

0800175c <sd_read_array_double>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, double *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_double(const char *p_folder_name, const char *p_file_name, short size, double *data){
 800175c:	b580      	push	{r7, lr}
 800175e:	b086      	sub	sp, #24
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	60b9      	str	r1, [r7, #8]
 8001766:	603b      	str	r3, [r7, #0]
 8001768:	4613      	mov	r3, r2
 800176a:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 800176c:	2300      	movs	r3, #0
 800176e:	757b      	strb	r3, [r7, #21]
	short i = 0;
 8001770:	2300      	movs	r3, #0
 8001772:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 8001774:	68b9      	ldr	r1, [r7, #8]
 8001776:	68f8      	ldr	r0, [r7, #12]
 8001778:	f000 f852 	bl	8001820 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 800177c:	f000 f866 	bl	800184c <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001780:	e019      	b.n	80017b6 <sd_read_array_double+0x5a>
		sscanf(buffer, "%lf", data + i);
 8001782:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001786:	00db      	lsls	r3, r3, #3
 8001788:	683a      	ldr	r2, [r7, #0]
 800178a:	4413      	add	r3, r2
 800178c:	461a      	mov	r2, r3
 800178e:	4913      	ldr	r1, [pc, #76]	; (80017dc <sd_read_array_double+0x80>)
 8001790:	4813      	ldr	r0, [pc, #76]	; (80017e0 <sd_read_array_double+0x84>)
 8001792:	f013 fa1d 	bl	8014bd0 <siscanf>
		i++;
 8001796:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800179a:	b29b      	uxth	r3, r3
 800179c:	3301      	adds	r3, #1
 800179e:	b29b      	uxth	r3, r3
 80017a0:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 80017a2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80017a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017aa:	429a      	cmp	r2, r3
 80017ac:	db03      	blt.n	80017b6 <sd_read_array_double+0x5a>
 80017ae:	88fb      	ldrh	r3, [r7, #6]
 80017b0:	3b01      	subs	r3, #1
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80017b6:	4a0b      	ldr	r2, [pc, #44]	; (80017e4 <sd_read_array_double+0x88>)
 80017b8:	2180      	movs	r1, #128	; 0x80
 80017ba:	4809      	ldr	r0, [pc, #36]	; (80017e0 <sd_read_array_double+0x84>)
 80017bc:	f011 fa36 	bl	8012c2c <f_gets>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d1dd      	bne.n	8001782 <sd_read_array_double+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 80017c6:	f000 f85b 	bl	8001880 <bufclear>

	f_close(&fil);	//ファイル閉じる
 80017ca:	4806      	ldr	r0, [pc, #24]	; (80017e4 <sd_read_array_double+0x88>)
 80017cc:	f010 fdb8 	bl	8012340 <f_close>

	return ret;
 80017d0:	7d7b      	ldrb	r3, [r7, #21]
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3718      	adds	r7, #24
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	08018248 	.word	0x08018248
 80017e0:	2003d6e0 	.word	0x2003d6e0
 80017e4:	2003d770 	.word	0x2003d770

080017e8 <sd_mount>:
//* 役割　：　SDカードをマウント
//* 引数　：　void:
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_mount(){
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 80017ee:	2300      	movs	r3, #0
 80017f0:	71fb      	strb	r3, [r7, #7]

	if(f_mount(&fs, "", 1) == FR_OK) ret = 1;
 80017f2:	2201      	movs	r2, #1
 80017f4:	4908      	ldr	r1, [pc, #32]	; (8001818 <sd_mount+0x30>)
 80017f6:	4809      	ldr	r0, [pc, #36]	; (800181c <sd_mount+0x34>)
 80017f8:	f010 f81a 	bl	8011830 <f_mount>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d102      	bne.n	8001808 <sd_mount+0x20>
 8001802:	2301      	movs	r3, #1
 8001804:	71fb      	strb	r3, [r7, #7]
 8001806:	e001      	b.n	800180c <sd_mount+0x24>
	else ret = 0;
 8001808:	2300      	movs	r3, #0
 800180a:	71fb      	strb	r3, [r7, #7]

	return ret;
 800180c:	79fb      	ldrb	r3, [r7, #7]
}
 800180e:	4618      	mov	r0, r3
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	08018258 	.word	0x08018258
 800181c:	2003c5a0 	.word	0x2003c5a0

08001820 <create_path>:
//* 役割　：　操作するパスの文字列を作る
//* 引数　：　char, char: フォルダ名, ファイル名
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void create_path(char const *p_folder_name, char const *p_file_name){
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]

	sprintf(dirpath, "%s", p_folder_name);
 800182a:	6879      	ldr	r1, [r7, #4]
 800182c:	4805      	ldr	r0, [pc, #20]	; (8001844 <create_path+0x24>)
 800182e:	f013 f9fb 	bl	8014c28 <strcpy>

	sprintf(filepath, "%s", p_file_name);
 8001832:	6839      	ldr	r1, [r7, #0]
 8001834:	4804      	ldr	r0, [pc, #16]	; (8001848 <create_path+0x28>)
 8001836:	f013 f9f7 	bl	8014c28 <strcpy>

}
 800183a:	bf00      	nop
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	2003d5e0 	.word	0x2003d5e0
 8001848:	2003c4a0 	.word	0x2003c4a0

0800184c <fopen_folder_and_file>:
//* 役割　：　操作するファイルを選択する_
//* 引数　：　char: ファイル選択
//* 戻り値：　char: 状態チェック	0(マウント失敗) or 1(成功)
//* 備考 : なし
//************************************************************************/
void fopen_folder_and_file(){	//mkdir
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0

	f_mkdir(dirpath);
 8001850:	4807      	ldr	r0, [pc, #28]	; (8001870 <fopen_folder_and_file+0x24>)
 8001852:	f011 f8cf 	bl	80129f4 <f_mkdir>

	f_chdir(dirpath);
 8001856:	4806      	ldr	r0, [pc, #24]	; (8001870 <fopen_folder_and_file+0x24>)
 8001858:	f010 fd9c 	bl	8012394 <f_chdir>

	f_open(&fil, filepath, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 800185c:	2213      	movs	r2, #19
 800185e:	4905      	ldr	r1, [pc, #20]	; (8001874 <fopen_folder_and_file+0x28>)
 8001860:	4805      	ldr	r0, [pc, #20]	; (8001878 <fopen_folder_and_file+0x2c>)
 8001862:	f010 f82b 	bl	80118bc <f_open>

	f_chdir("..");
 8001866:	4805      	ldr	r0, [pc, #20]	; (800187c <fopen_folder_and_file+0x30>)
 8001868:	f010 fd94 	bl	8012394 <f_chdir>


}
 800186c:	bf00      	nop
 800186e:	bd80      	pop	{r7, pc}
 8001870:	2003d5e0 	.word	0x2003d5e0
 8001874:	2003c4a0 	.word	0x2003c4a0
 8001878:	2003d770 	.word	0x2003d770
 800187c:	0801824c 	.word	0x0801824c

08001880 <bufclear>:
//* 役割　：　バッファをクリア
//* 引数　：　void:
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void bufclear(void){
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
	for(int i = 0; i < BUFF_SIZE; i++){
 8001886:	2300      	movs	r3, #0
 8001888:	607b      	str	r3, [r7, #4]
 800188a:	e007      	b.n	800189c <bufclear+0x1c>
		buffer[i] = '\0';
 800188c:	4a08      	ldr	r2, [pc, #32]	; (80018b0 <bufclear+0x30>)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4413      	add	r3, r2
 8001892:	2200      	movs	r2, #0
 8001894:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFF_SIZE; i++){
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	3301      	adds	r3, #1
 800189a:	607b      	str	r3, [r7, #4]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2b7f      	cmp	r3, #127	; 0x7f
 80018a0:	ddf4      	ble.n	800188c <bufclear+0xc>
	}
}
 80018a2:	bf00      	nop
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	2003d6e0 	.word	0x2003d6e0

080018b4 <read_byte>:
#include "ICM_20648.h"

volatile int16_t xa, ya, za; // 加速度(16bitデータ)
volatile int16_t xg, yg, zg;	// 角加速度(16bitデータ)

uint8_t read_byte( uint8_t reg ) {
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	4603      	mov	r3, r0
 80018bc:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 80018be:	79fb      	ldrb	r3, [r7, #7]
 80018c0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 80018c8:	2200      	movs	r2, #0
 80018ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018ce:	480e      	ldr	r0, [pc, #56]	; (8001908 <read_byte+0x54>)
 80018d0:	f007 fff2 	bl	80098b8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 80018d4:	f107 010f 	add.w	r1, r7, #15
 80018d8:	2364      	movs	r3, #100	; 0x64
 80018da:	2201      	movs	r2, #1
 80018dc:	480b      	ldr	r0, [pc, #44]	; (800190c <read_byte+0x58>)
 80018de:	f00b f99b 	bl	800cc18 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2,&val,1,100);
 80018e2:	f107 010e 	add.w	r1, r7, #14
 80018e6:	2364      	movs	r3, #100	; 0x64
 80018e8:	2201      	movs	r2, #1
 80018ea:	4808      	ldr	r0, [pc, #32]	; (800190c <read_byte+0x58>)
 80018ec:	f00b fac8 	bl	800ce80 <HAL_SPI_Receive>
	CS_SET;
 80018f0:	2201      	movs	r2, #1
 80018f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018f6:	4804      	ldr	r0, [pc, #16]	; (8001908 <read_byte+0x54>)
 80018f8:	f007 ffde 	bl	80098b8 <HAL_GPIO_WritePin>

	return val;
 80018fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3710      	adds	r7, #16
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	40020400 	.word	0x40020400
 800190c:	2003e80c 	.word	0x2003e80c

08001910 <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	4603      	mov	r3, r0
 8001918:	460a      	mov	r2, r1
 800191a:	71fb      	strb	r3, [r7, #7]
 800191c:	4613      	mov	r3, r2
 800191e:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8001920:	79fb      	ldrb	r3, [r7, #7]
 8001922:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001926:	b2db      	uxtb	r3, r3
 8001928:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 800192a:	2200      	movs	r2, #0
 800192c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001930:	480c      	ldr	r0, [pc, #48]	; (8001964 <write_byte+0x54>)
 8001932:	f007 ffc1 	bl	80098b8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001936:	f107 010f 	add.w	r1, r7, #15
 800193a:	2364      	movs	r3, #100	; 0x64
 800193c:	2201      	movs	r2, #1
 800193e:	480a      	ldr	r0, [pc, #40]	; (8001968 <write_byte+0x58>)
 8001940:	f00b f96a 	bl	800cc18 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2,&val,1,100);
 8001944:	1db9      	adds	r1, r7, #6
 8001946:	2364      	movs	r3, #100	; 0x64
 8001948:	2201      	movs	r2, #1
 800194a:	4807      	ldr	r0, [pc, #28]	; (8001968 <write_byte+0x58>)
 800194c:	f00b f964 	bl	800cc18 <HAL_SPI_Transmit>
	CS_SET;
 8001950:	2201      	movs	r2, #1
 8001952:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001956:	4803      	ldr	r0, [pc, #12]	; (8001964 <write_byte+0x54>)
 8001958:	f007 ffae 	bl	80098b8 <HAL_GPIO_WritePin>
}
 800195c:	bf00      	nop
 800195e:	3710      	adds	r7, #16
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	40020400 	.word	0x40020400
 8001968:	2003e80c 	.word	0x2003e80c

0800196c <IMU_init>:

uint16_t IMU_init() {
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
	uint8_t who_am_i;
	uint16_t ret = 0;
 8001972:	2300      	movs	r3, #0
 8001974:	80fb      	strh	r3, [r7, #6]

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 8001976:	2000      	movs	r0, #0
 8001978:	f7ff ff9c 	bl	80018b4 <read_byte>
 800197c:	4603      	mov	r3, r0
 800197e:	717b      	strb	r3, [r7, #5]
	if ( who_am_i == 0xE0 ) {
 8001980:	797b      	ldrb	r3, [r7, #5]
 8001982:	2be0      	cmp	r3, #224	; 0xe0
 8001984:	d119      	bne.n	80019ba <IMU_init+0x4e>
		ret = 1;
 8001986:	2301      	movs	r3, #1
 8001988:	80fb      	strh	r3, [r7, #6]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 800198a:	2101      	movs	r1, #1
 800198c:	2006      	movs	r0, #6
 800198e:	f7ff ffbf 	bl	8001910 <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 8001992:	2110      	movs	r1, #16
 8001994:	2003      	movs	r0, #3
 8001996:	f7ff ffbb 	bl	8001910 <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 800199a:	2120      	movs	r1, #32
 800199c:	207f      	movs	r0, #127	; 0x7f
 800199e:	f7ff ffb7 	bl	8001910 <write_byte>
		write_byte(0x01,0x06);	//レンジ±2000dps
 80019a2:	2106      	movs	r1, #6
 80019a4:	2001      	movs	r0, #1
 80019a6:	f7ff ffb3 	bl	8001910 <write_byte>
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		write_byte(0x14,0x06);	//レンジ±16g
 80019aa:	2106      	movs	r1, #6
 80019ac:	2014      	movs	r0, #20
 80019ae:	f7ff ffaf 	bl	8001910 <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(0x7F,0x00);	//USER_BANK0
 80019b2:	2100      	movs	r1, #0
 80019b4:	207f      	movs	r0, #127	; 0x7f
 80019b6:	f7ff ffab 	bl	8001910 <write_byte>
	}
	return ret;
 80019ba:	88fb      	ldrh	r3, [r7, #6]
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3708      	adds	r7, #8
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}

080019c4 <read_gyro_data>:

void read_gyro_data() {
 80019c4:	b598      	push	{r3, r4, r7, lr}
 80019c6:	af00      	add	r7, sp, #0
	xg = ((uint16_t)read_byte(0x33) << 8) | ((uint16_t)read_byte(0x34));
 80019c8:	2033      	movs	r0, #51	; 0x33
 80019ca:	f7ff ff73 	bl	80018b4 <read_byte>
 80019ce:	4603      	mov	r3, r0
 80019d0:	021b      	lsls	r3, r3, #8
 80019d2:	b21c      	sxth	r4, r3
 80019d4:	2034      	movs	r0, #52	; 0x34
 80019d6:	f7ff ff6d 	bl	80018b4 <read_byte>
 80019da:	4603      	mov	r3, r0
 80019dc:	b21b      	sxth	r3, r3
 80019de:	4323      	orrs	r3, r4
 80019e0:	b21a      	sxth	r2, r3
 80019e2:	4b11      	ldr	r3, [pc, #68]	; (8001a28 <read_gyro_data+0x64>)
 80019e4:	801a      	strh	r2, [r3, #0]
	yg = ((uint16_t)read_byte(0x35) << 8) | ((uint16_t)read_byte(0x36));
 80019e6:	2035      	movs	r0, #53	; 0x35
 80019e8:	f7ff ff64 	bl	80018b4 <read_byte>
 80019ec:	4603      	mov	r3, r0
 80019ee:	021b      	lsls	r3, r3, #8
 80019f0:	b21c      	sxth	r4, r3
 80019f2:	2036      	movs	r0, #54	; 0x36
 80019f4:	f7ff ff5e 	bl	80018b4 <read_byte>
 80019f8:	4603      	mov	r3, r0
 80019fa:	b21b      	sxth	r3, r3
 80019fc:	4323      	orrs	r3, r4
 80019fe:	b21a      	sxth	r2, r3
 8001a00:	4b0a      	ldr	r3, [pc, #40]	; (8001a2c <read_gyro_data+0x68>)
 8001a02:	801a      	strh	r2, [r3, #0]
	zg = ((uint16_t)read_byte(0x37) << 8) | ((uint16_t)read_byte(0x38));
 8001a04:	2037      	movs	r0, #55	; 0x37
 8001a06:	f7ff ff55 	bl	80018b4 <read_byte>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	021b      	lsls	r3, r3, #8
 8001a0e:	b21c      	sxth	r4, r3
 8001a10:	2038      	movs	r0, #56	; 0x38
 8001a12:	f7ff ff4f 	bl	80018b4 <read_byte>
 8001a16:	4603      	mov	r3, r0
 8001a18:	b21b      	sxth	r3, r3
 8001a1a:	4323      	orrs	r3, r4
 8001a1c:	b21a      	sxth	r2, r3
 8001a1e:	4b04      	ldr	r3, [pc, #16]	; (8001a30 <read_gyro_data+0x6c>)
 8001a20:	801a      	strh	r2, [r3, #0]
}
 8001a22:	bf00      	nop
 8001a24:	bd98      	pop	{r3, r4, r7, pc}
 8001a26:	bf00      	nop
 8001a28:	2003e7a8 	.word	0x2003e7a8
 8001a2c:	2003e7a6 	.word	0x2003e7a6
 8001a30:	2003e7a0 	.word	0x2003e7a0

08001a34 <_ZN3IMUC1Ev>:

#define PI 3.1415926535

//int16_t mon_zg_;

IMU::IMU() : xa_(0), ya_(0), za_(0), xg_(0), yg_(0), zg_(0), offset_(0)
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	801a      	strh	r2, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2200      	movs	r2, #0
 8001a46:	805a      	strh	r2, [r3, #2]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	809a      	strh	r2, [r3, #4]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2200      	movs	r2, #0
 8001a52:	80da      	strh	r2, [r3, #6]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2200      	movs	r2, #0
 8001a58:	811a      	strh	r2, [r3, #8]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	815a      	strh	r2, [r3, #10]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	f04f 0200 	mov.w	r2, #0
 8001a66:	60da      	str	r2, [r3, #12]
{

}
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	370c      	adds	r7, #12
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
	...

08001a78 <_ZN3IMU4initEv>:

void IMU::init()
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
	uint16_t who_i_am;
	who_i_am = IMU_init();
 8001a80:	f7ff ff74 	bl	800196c <IMU_init>
 8001a84:	4603      	mov	r3, r0
 8001a86:	81fb      	strh	r3, [r7, #14]
	//printf("who i am: %d\n", who_i_am);

	lcd_clear();
 8001a88:	f7ff fb0a 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	2000      	movs	r0, #0
 8001a90:	f7ff fb16 	bl	80010c0 <lcd_locate>
	lcd_printf("IMUstatus");
 8001a94:	4809      	ldr	r0, [pc, #36]	; (8001abc <_ZN3IMU4initEv+0x44>)
 8001a96:	f7ff fb3d 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001a9a:	2101      	movs	r1, #1
 8001a9c:	2000      	movs	r0, #0
 8001a9e:	f7ff fb0f 	bl	80010c0 <lcd_locate>
	lcd_printf("%d", who_i_am);
 8001aa2:	89fb      	ldrh	r3, [r7, #14]
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4806      	ldr	r0, [pc, #24]	; (8001ac0 <_ZN3IMU4initEv+0x48>)
 8001aa8:	f7ff fb34 	bl	8001114 <lcd_printf>

	HAL_Delay(500);
 8001aac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ab0:	f006 fc6c 	bl	800838c <HAL_Delay>

}
 8001ab4:	bf00      	nop
 8001ab6:	3710      	adds	r7, #16
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	0801825c 	.word	0x0801825c
 8001ac0:	08018268 	.word	0x08018268
 8001ac4:	00000000 	.word	0x00000000

08001ac8 <_ZN3IMU12updateValuesEv>:
	if(array_idx >= STORE_NUM) array_idx = 0;

}
*/
void IMU::updateValues()
{
 8001ac8:	b5b0      	push	{r4, r5, r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
	read_gyro_data();
 8001ad0:	f7ff ff78 	bl	80019c4 <read_gyro_data>
	//read_accel_data();

	//xa_ = xa;
	//ya_ = ya;
	//za_ = za;
	xg_ = xg;
 8001ad4:	4b24      	ldr	r3, [pc, #144]	; (8001b68 <_ZN3IMU12updateValuesEv+0xa0>)
 8001ad6:	881b      	ldrh	r3, [r3, #0]
 8001ad8:	b21a      	sxth	r2, r3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	80da      	strh	r2, [r3, #6]
	yg_ = yg;
 8001ade:	4b23      	ldr	r3, [pc, #140]	; (8001b6c <_ZN3IMU12updateValuesEv+0xa4>)
 8001ae0:	881b      	ldrh	r3, [r3, #0]
 8001ae2:	b21a      	sxth	r2, r3
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	811a      	strh	r2, [r3, #8]
	zg_ = zg;
 8001ae8:	4b21      	ldr	r3, [pc, #132]	; (8001b70 <_ZN3IMU12updateValuesEv+0xa8>)
 8001aea:	881b      	ldrh	r3, [r3, #0]
 8001aec:	b21a      	sxth	r2, r3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	815a      	strh	r2, [r3, #10]

	static int16_t pre_zg;
	zg_ = ((R_IMU)*(zg_) + (1.0 - (R_IMU))* (pre_zg)); // lowpath filter
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7fe fd2b 	bl	8000554 <__aeabi_i2d>
 8001afe:	a316      	add	r3, pc, #88	; (adr r3, 8001b58 <_ZN3IMU12updateValuesEv+0x90>)
 8001b00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b04:	f7fe fd90 	bl	8000628 <__aeabi_dmul>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	460c      	mov	r4, r1
 8001b0c:	4625      	mov	r5, r4
 8001b0e:	461c      	mov	r4, r3
 8001b10:	4b18      	ldr	r3, [pc, #96]	; (8001b74 <_ZN3IMU12updateValuesEv+0xac>)
 8001b12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7fe fd1c 	bl	8000554 <__aeabi_i2d>
 8001b1c:	a310      	add	r3, pc, #64	; (adr r3, 8001b60 <_ZN3IMU12updateValuesEv+0x98>)
 8001b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b22:	f7fe fd81 	bl	8000628 <__aeabi_dmul>
 8001b26:	4602      	mov	r2, r0
 8001b28:	460b      	mov	r3, r1
 8001b2a:	4620      	mov	r0, r4
 8001b2c:	4629      	mov	r1, r5
 8001b2e:	f7fe fbc5 	bl	80002bc <__adddf3>
 8001b32:	4603      	mov	r3, r0
 8001b34:	460c      	mov	r4, r1
 8001b36:	4618      	mov	r0, r3
 8001b38:	4621      	mov	r1, r4
 8001b3a:	f7ff f825 	bl	8000b88 <__aeabi_d2iz>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	b21a      	sxth	r2, r3
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	815a      	strh	r2, [r3, #10]

	pre_zg = zg_;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001b4c:	4b09      	ldr	r3, [pc, #36]	; (8001b74 <_ZN3IMU12updateValuesEv+0xac>)
 8001b4e:	801a      	strh	r2, [r3, #0]
	zg_ = temp_val[2];
	mon_zg_ = zg_;
	*/


}
 8001b50:	bf00      	nop
 8001b52:	3708      	adds	r7, #8
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bdb0      	pop	{r4, r5, r7, pc}
 8001b58:	eb851eb8 	.word	0xeb851eb8
 8001b5c:	3f9eb851 	.word	0x3f9eb851
 8001b60:	70a3d70a 	.word	0x70a3d70a
 8001b64:	3fef0a3d 	.word	0x3fef0a3d
 8001b68:	2003e7a8 	.word	0x2003e7a8
 8001b6c:	2003e7a6 	.word	0x2003e7a6
 8001b70:	2003e7a0 	.word	0x2003e7a0
 8001b74:	20000210 	.word	0x20000210

08001b78 <_ZN3IMU8getOmegaEv>:

float IMU::getOmega()
{
 8001b78:	b5b0      	push	{r4, r5, r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
	float corrected_zg = float(zg_) - offset_;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001b86:	ee07 3a90 	vmov	s15, r3
 8001b8a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	edd3 7a03 	vldr	s15, [r3, #12]
 8001b94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b98:	edc7 7a03 	vstr	s15, [r7, #12]
	return -(corrected_zg / 16.4) * PI / 180;
 8001b9c:	68f8      	ldr	r0, [r7, #12]
 8001b9e:	f7fe fceb 	bl	8000578 <__aeabi_f2d>
 8001ba2:	a316      	add	r3, pc, #88	; (adr r3, 8001bfc <_ZN3IMU8getOmegaEv+0x84>)
 8001ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba8:	f7fe fe68 	bl	800087c <__aeabi_ddiv>
 8001bac:	4602      	mov	r2, r0
 8001bae:	460b      	mov	r3, r1
 8001bb0:	4614      	mov	r4, r2
 8001bb2:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001bb6:	a313      	add	r3, pc, #76	; (adr r3, 8001c04 <_ZN3IMU8getOmegaEv+0x8c>)
 8001bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bbc:	4620      	mov	r0, r4
 8001bbe:	4629      	mov	r1, r5
 8001bc0:	f7fe fd32 	bl	8000628 <__aeabi_dmul>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	460c      	mov	r4, r1
 8001bc8:	4618      	mov	r0, r3
 8001bca:	4621      	mov	r1, r4
 8001bcc:	f04f 0200 	mov.w	r2, #0
 8001bd0:	4b09      	ldr	r3, [pc, #36]	; (8001bf8 <_ZN3IMU8getOmegaEv+0x80>)
 8001bd2:	f7fe fe53 	bl	800087c <__aeabi_ddiv>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	460c      	mov	r4, r1
 8001bda:	4618      	mov	r0, r3
 8001bdc:	4621      	mov	r1, r4
 8001bde:	f7ff f81b 	bl	8000c18 <__aeabi_d2f>
 8001be2:	4603      	mov	r3, r0
 8001be4:	ee07 3a90 	vmov	s15, r3
}
 8001be8:	eeb0 0a67 	vmov.f32	s0, s15
 8001bec:	3710      	adds	r7, #16
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bdb0      	pop	{r4, r5, r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	f3af 8000 	nop.w
 8001bf8:	40668000 	.word	0x40668000
 8001bfc:	66666666 	.word	0x66666666
 8001c00:	40306666 	.word	0x40306666
 8001c04:	54411744 	.word	0x54411744
 8001c08:	400921fb 	.word	0x400921fb

08001c0c <_ZN3IMU11calibrationEv>:

void IMU::calibration()
{
 8001c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c0e:	b08b      	sub	sp, #44	; 0x2c
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
	float sum;
	for(const auto &v : zg_vals){
		sum += v;
	}

	offset_ = sum / num;
 8001c14:	466b      	mov	r3, sp
 8001c16:	461e      	mov	r6, r3
	HAL_Delay(1000);
 8001c18:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c1c:	f006 fbb6 	bl	800838c <HAL_Delay>
	lcd_clear();
 8001c20:	f7ff fa3e 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001c24:	2100      	movs	r1, #0
 8001c26:	2000      	movs	r0, #0
 8001c28:	f7ff fa4a 	bl	80010c0 <lcd_locate>
	lcd_printf("IMU     ");
 8001c2c:	4840      	ldr	r0, [pc, #256]	; (8001d30 <_ZN3IMU11calibrationEv+0x124>)
 8001c2e:	f7ff fa71 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001c32:	2101      	movs	r1, #1
 8001c34:	2000      	movs	r0, #0
 8001c36:	f7ff fa43 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 8001c3a:	483e      	ldr	r0, [pc, #248]	; (8001d34 <_ZN3IMU11calibrationEv+0x128>)
 8001c3c:	f7ff fa6a 	bl	8001114 <lcd_printf>
	int16_t num = 2000;
 8001c40:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001c44:	83bb      	strh	r3, [r7, #28]
	float zg_vals[num];
 8001c46:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001c4a:	1e5d      	subs	r5, r3, #1
 8001c4c:	61bd      	str	r5, [r7, #24]
 8001c4e:	462b      	mov	r3, r5
 8001c50:	3301      	adds	r3, #1
 8001c52:	4619      	mov	r1, r3
 8001c54:	f04f 0200 	mov.w	r2, #0
 8001c58:	f04f 0300 	mov.w	r3, #0
 8001c5c:	f04f 0400 	mov.w	r4, #0
 8001c60:	0154      	lsls	r4, r2, #5
 8001c62:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001c66:	014b      	lsls	r3, r1, #5
 8001c68:	462b      	mov	r3, r5
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	f04f 0200 	mov.w	r2, #0
 8001c72:	f04f 0300 	mov.w	r3, #0
 8001c76:	f04f 0400 	mov.w	r4, #0
 8001c7a:	0154      	lsls	r4, r2, #5
 8001c7c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001c80:	014b      	lsls	r3, r1, #5
 8001c82:	462b      	mov	r3, r5
 8001c84:	3301      	adds	r3, #1
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	3303      	adds	r3, #3
 8001c8a:	3307      	adds	r3, #7
 8001c8c:	08db      	lsrs	r3, r3, #3
 8001c8e:	00db      	lsls	r3, r3, #3
 8001c90:	ebad 0d03 	sub.w	sp, sp, r3
 8001c94:	466b      	mov	r3, sp
 8001c96:	3303      	adds	r3, #3
 8001c98:	089b      	lsrs	r3, r3, #2
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	617b      	str	r3, [r7, #20]
	for(uint16_t i = 0; i < num; i++){
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	83fb      	strh	r3, [r7, #30]
 8001ca2:	8bfa      	ldrh	r2, [r7, #30]
 8001ca4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	da13      	bge.n	8001cd4 <_ZN3IMU11calibrationEv+0xc8>
		zg_vals[i] = float(zg_);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001cb2:	8bfb      	ldrh	r3, [r7, #30]
 8001cb4:	ee07 2a90 	vmov	s15, r2
 8001cb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cbc:	697a      	ldr	r2, [r7, #20]
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	4413      	add	r3, r2
 8001cc2:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(2);
 8001cc6:	2002      	movs	r0, #2
 8001cc8:	f006 fb60 	bl	800838c <HAL_Delay>
	for(uint16_t i = 0; i < num; i++){
 8001ccc:	8bfb      	ldrh	r3, [r7, #30]
 8001cce:	3301      	adds	r3, #1
 8001cd0:	83fb      	strh	r3, [r7, #30]
 8001cd2:	e7e6      	b.n	8001ca2 <_ZN3IMU11calibrationEv+0x96>
	for(const auto &v : zg_vals){
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	627b      	str	r3, [r7, #36]	; 0x24
 8001cd8:	697a      	ldr	r2, [r7, #20]
 8001cda:	462b      	mov	r3, r5
 8001cdc:	3301      	adds	r3, #1
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	4413      	add	r3, r2
 8001ce2:	613b      	str	r3, [r7, #16]
 8001ce4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d00e      	beq.n	8001d0a <_ZN3IMU11calibrationEv+0xfe>
 8001cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cee:	60fb      	str	r3, [r7, #12]
		sum += v;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	edd3 7a00 	vldr	s15, [r3]
 8001cf6:	ed97 7a08 	vldr	s14, [r7, #32]
 8001cfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cfe:	edc7 7a08 	vstr	s15, [r7, #32]
	for(const auto &v : zg_vals){
 8001d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d04:	3304      	adds	r3, #4
 8001d06:	627b      	str	r3, [r7, #36]	; 0x24
 8001d08:	e7ec      	b.n	8001ce4 <_ZN3IMU11calibrationEv+0xd8>
	offset_ = sum / num;
 8001d0a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001d0e:	ee07 3a90 	vmov	s15, r3
 8001d12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d16:	edd7 6a08 	vldr	s13, [r7, #32]
 8001d1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	edc3 7a03 	vstr	s15, [r3, #12]
 8001d24:	46b5      	mov	sp, r6
}
 8001d26:	bf00      	nop
 8001d28:	372c      	adds	r7, #44	; 0x2c
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	0801826c 	.word	0x0801826c
 8001d34:	08018278 	.word	0x08018278

08001d38 <INA260_read>:

#include "INA260.h"

//#define SLAVEADRESS1 (0x44<<1)

unsigned short INA260_read(uint8_t pointer_byte, uint8_t slave_adress) {
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b086      	sub	sp, #24
 8001d3c:	af02      	add	r7, sp, #8
 8001d3e:	4603      	mov	r3, r0
 8001d40:	460a      	mov	r2, r1
 8001d42:	71fb      	strb	r3, [r7, #7]
 8001d44:	4613      	mov	r3, r2
 8001d46:	71bb      	strb	r3, [r7, #6]
	uint8_t Rxdata[2];
	unsigned short val;
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, &pointer_byte, 1, 100);
 8001d48:	79bb      	ldrb	r3, [r7, #6]
 8001d4a:	b299      	uxth	r1, r3
 8001d4c:	1dfa      	adds	r2, r7, #7
 8001d4e:	2364      	movs	r3, #100	; 0x64
 8001d50:	9300      	str	r3, [sp, #0]
 8001d52:	2301      	movs	r3, #1
 8001d54:	480c      	ldr	r0, [pc, #48]	; (8001d88 <INA260_read+0x50>)
 8001d56:	f007 ff01 	bl	8009b5c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, slave_adress, Rxdata, 2, 100);
 8001d5a:	79bb      	ldrb	r3, [r7, #6]
 8001d5c:	b299      	uxth	r1, r3
 8001d5e:	f107 020c 	add.w	r2, r7, #12
 8001d62:	2364      	movs	r3, #100	; 0x64
 8001d64:	9300      	str	r3, [sp, #0]
 8001d66:	2302      	movs	r3, #2
 8001d68:	4807      	ldr	r0, [pc, #28]	; (8001d88 <INA260_read+0x50>)
 8001d6a:	f007 fff5 	bl	8009d58 <HAL_I2C_Master_Receive>
	val = ((unsigned short)Rxdata[0] << 8) | (unsigned short)Rxdata[1];
 8001d6e:	7b3b      	ldrb	r3, [r7, #12]
 8001d70:	021b      	lsls	r3, r3, #8
 8001d72:	b21a      	sxth	r2, r3
 8001d74:	7b7b      	ldrb	r3, [r7, #13]
 8001d76:	b21b      	sxth	r3, r3
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	b21b      	sxth	r3, r3
 8001d7c:	81fb      	strh	r3, [r7, #14]
	return val;
 8001d7e:	89fb      	ldrh	r3, [r7, #14]
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3710      	adds	r7, #16
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	2003e9c0 	.word	0x2003e9c0

08001d8c <INA260_write>:

void INA260_write(uint8_t pointer_byte , uint8_t data_msbyte , uint8_t data_lsbyte, uint8_t slave_adress) {
 8001d8c:	b590      	push	{r4, r7, lr}
 8001d8e:	b087      	sub	sp, #28
 8001d90:	af02      	add	r7, sp, #8
 8001d92:	4604      	mov	r4, r0
 8001d94:	4608      	mov	r0, r1
 8001d96:	4611      	mov	r1, r2
 8001d98:	461a      	mov	r2, r3
 8001d9a:	4623      	mov	r3, r4
 8001d9c:	71fb      	strb	r3, [r7, #7]
 8001d9e:	4603      	mov	r3, r0
 8001da0:	71bb      	strb	r3, [r7, #6]
 8001da2:	460b      	mov	r3, r1
 8001da4:	717b      	strb	r3, [r7, #5]
 8001da6:	4613      	mov	r3, r2
 8001da8:	713b      	strb	r3, [r7, #4]
	uint8_t Txcmd[3] = { pointer_byte , data_msbyte , data_lsbyte };
 8001daa:	79fb      	ldrb	r3, [r7, #7]
 8001dac:	733b      	strb	r3, [r7, #12]
 8001dae:	79bb      	ldrb	r3, [r7, #6]
 8001db0:	737b      	strb	r3, [r7, #13]
 8001db2:	797b      	ldrb	r3, [r7, #5]
 8001db4:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, Txcmd, 3, 100);
 8001db6:	793b      	ldrb	r3, [r7, #4]
 8001db8:	b299      	uxth	r1, r3
 8001dba:	f107 020c 	add.w	r2, r7, #12
 8001dbe:	2364      	movs	r3, #100	; 0x64
 8001dc0:	9300      	str	r3, [sp, #0]
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	4803      	ldr	r0, [pc, #12]	; (8001dd4 <INA260_write+0x48>)
 8001dc6:	f007 fec9 	bl	8009b5c <HAL_I2C_Master_Transmit>
}
 8001dca:	bf00      	nop
 8001dcc:	3714      	adds	r7, #20
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd90      	pop	{r4, r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	2003e9c0 	.word	0x2003e9c0

08001dd8 <setConfig>:

void setConfig(uint8_t msbyte , uint8_t lsbyte, uint8_t slave_adress) {
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	4603      	mov	r3, r0
 8001de0:	71fb      	strb	r3, [r7, #7]
 8001de2:	460b      	mov	r3, r1
 8001de4:	71bb      	strb	r3, [r7, #6]
 8001de6:	4613      	mov	r3, r2
 8001de8:	717b      	strb	r3, [r7, #5]
	INA260_write(0x00 , msbyte , lsbyte, slave_adress);
 8001dea:	797b      	ldrb	r3, [r7, #5]
 8001dec:	79ba      	ldrb	r2, [r7, #6]
 8001dee:	79f9      	ldrb	r1, [r7, #7]
 8001df0:	2000      	movs	r0, #0
 8001df2:	f7ff ffcb 	bl	8001d8c <INA260_write>
}
 8001df6:	bf00      	nop
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <INA260_init>:

void INA260_init(uint8_t slave_adress) {
 8001dfe:	b580      	push	{r7, lr}
 8001e00:	b082      	sub	sp, #8
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	4603      	mov	r3, r0
 8001e06:	71fb      	strb	r3, [r7, #7]
	setConfig(0x00,0xDF, slave_adress);//AVG=1,BusVoltageConversionTime=588u,ShuntCurrentConversionTime=588u,mode=BusVoltageContinuous
 8001e08:	79fb      	ldrb	r3, [r7, #7]
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	21df      	movs	r1, #223	; 0xdf
 8001e0e:	2000      	movs	r0, #0
 8001e10:	f7ff ffe2 	bl	8001dd8 <setConfig>
}
 8001e14:	bf00      	nop
 8001e16:	3708      	adds	r7, #8
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <_ZN8JoyStickC1Ev>:
 */

#include "Joystick.hpp"
//#include "stm32f4xx_hal.h"

JoyStick::JoyStick()
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
{

}
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	4618      	mov	r0, r3
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr
	...

08001e34 <_ZN8JoyStick8getValueEv>:

uint16_t JoyStick::getValue()
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10)) ret_value |= 0x01;
 8001e40:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e44:	482a      	ldr	r0, [pc, #168]	; (8001ef0 <_ZN8JoyStick8getValueEv+0xbc>)
 8001e46:	f007 fd1f 	bl	8009888 <HAL_GPIO_ReadPin>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	bf0c      	ite	eq
 8001e50:	2301      	moveq	r3, #1
 8001e52:	2300      	movne	r3, #0
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d003      	beq.n	8001e62 <_ZN8JoyStick8getValueEv+0x2e>
 8001e5a:	89fb      	ldrh	r3, [r7, #14]
 8001e5c:	f043 0301 	orr.w	r3, r3, #1
 8001e60:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_0)) ret_value |= 0x02;
 8001e62:	2101      	movs	r1, #1
 8001e64:	4823      	ldr	r0, [pc, #140]	; (8001ef4 <_ZN8JoyStick8getValueEv+0xc0>)
 8001e66:	f007 fd0f 	bl	8009888 <HAL_GPIO_ReadPin>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	bf0c      	ite	eq
 8001e70:	2301      	moveq	r3, #1
 8001e72:	2300      	movne	r3, #0
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d003      	beq.n	8001e82 <_ZN8JoyStick8getValueEv+0x4e>
 8001e7a:	89fb      	ldrh	r3, [r7, #14]
 8001e7c:	f043 0302 	orr.w	r3, r3, #2
 8001e80:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_8)) ret_value |= 0x04;
 8001e82:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e86:	481a      	ldr	r0, [pc, #104]	; (8001ef0 <_ZN8JoyStick8getValueEv+0xbc>)
 8001e88:	f007 fcfe 	bl	8009888 <HAL_GPIO_ReadPin>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	bf0c      	ite	eq
 8001e92:	2301      	moveq	r3, #1
 8001e94:	2300      	movne	r3, #0
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d003      	beq.n	8001ea4 <_ZN8JoyStick8getValueEv+0x70>
 8001e9c:	89fb      	ldrh	r3, [r7, #14]
 8001e9e:	f043 0304 	orr.w	r3, r3, #4
 8001ea2:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)) ret_value |= 0x08;
 8001ea4:	2104      	movs	r1, #4
 8001ea6:	4814      	ldr	r0, [pc, #80]	; (8001ef8 <_ZN8JoyStick8getValueEv+0xc4>)
 8001ea8:	f007 fcee 	bl	8009888 <HAL_GPIO_ReadPin>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	bf0c      	ite	eq
 8001eb2:	2301      	moveq	r3, #1
 8001eb4:	2300      	movne	r3, #0
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d003      	beq.n	8001ec4 <_ZN8JoyStick8getValueEv+0x90>
 8001ebc:	89fb      	ldrh	r3, [r7, #14]
 8001ebe:	f043 0308 	orr.w	r3, r3, #8
 8001ec2:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_7)) ret_value |= 0x10;
 8001ec4:	2180      	movs	r1, #128	; 0x80
 8001ec6:	480a      	ldr	r0, [pc, #40]	; (8001ef0 <_ZN8JoyStick8getValueEv+0xbc>)
 8001ec8:	f007 fcde 	bl	8009888 <HAL_GPIO_ReadPin>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	bf0c      	ite	eq
 8001ed2:	2301      	moveq	r3, #1
 8001ed4:	2300      	movne	r3, #0
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d003      	beq.n	8001ee4 <_ZN8JoyStick8getValueEv+0xb0>
 8001edc:	89fb      	ldrh	r3, [r7, #14]
 8001ede:	f043 0310 	orr.w	r3, r3, #16
 8001ee2:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8001ee4:	89fb      	ldrh	r3, [r7, #14]
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	40021000 	.word	0x40021000
 8001ef4:	40020c00 	.word	0x40020c00
 8001ef8:	40020400 	.word	0x40020400

08001efc <_ZN3LED9fullColorEc>:
 */

#include "LED.hpp"

void LED::fullColor(char color)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	460b      	mov	r3, r1
 8001f06:	70fb      	strb	r3, [r7, #3]
	if(color == 'R'){
 8001f08:	78fb      	ldrb	r3, [r7, #3]
 8001f0a:	2b52      	cmp	r3, #82	; 0x52
 8001f0c:	d112      	bne.n	8001f34 <_ZN3LED9fullColorEc+0x38>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f14:	4856      	ldr	r0, [pc, #344]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001f16:	f007 fccf 	bl	80098b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f20:	4853      	ldr	r0, [pc, #332]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001f22:	f007 fcc9 	bl	80098b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001f26:	2201      	movs	r2, #1
 8001f28:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f2c:	4850      	ldr	r0, [pc, #320]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001f2e:	f007 fcc3 	bl	80098b8 <HAL_GPIO_WritePin>
	else if(color == '~'){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
	}
}
 8001f32:	e098      	b.n	8002066 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'G'){
 8001f34:	78fb      	ldrb	r3, [r7, #3]
 8001f36:	2b47      	cmp	r3, #71	; 0x47
 8001f38:	d112      	bne.n	8001f60 <_ZN3LED9fullColorEc+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f40:	484b      	ldr	r0, [pc, #300]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001f42:	f007 fcb9 	bl	80098b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001f46:	2200      	movs	r2, #0
 8001f48:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f4c:	4848      	ldr	r0, [pc, #288]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001f4e:	f007 fcb3 	bl	80098b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001f52:	2201      	movs	r2, #1
 8001f54:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f58:	4845      	ldr	r0, [pc, #276]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001f5a:	f007 fcad 	bl	80098b8 <HAL_GPIO_WritePin>
}
 8001f5e:	e082      	b.n	8002066 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'B'){
 8001f60:	78fb      	ldrb	r3, [r7, #3]
 8001f62:	2b42      	cmp	r3, #66	; 0x42
 8001f64:	d112      	bne.n	8001f8c <_ZN3LED9fullColorEc+0x90>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001f66:	2201      	movs	r2, #1
 8001f68:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f6c:	4840      	ldr	r0, [pc, #256]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001f6e:	f007 fca3 	bl	80098b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001f72:	2201      	movs	r2, #1
 8001f74:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f78:	483d      	ldr	r0, [pc, #244]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001f7a:	f007 fc9d 	bl	80098b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001f7e:	2200      	movs	r2, #0
 8001f80:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f84:	483a      	ldr	r0, [pc, #232]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001f86:	f007 fc97 	bl	80098b8 <HAL_GPIO_WritePin>
}
 8001f8a:	e06c      	b.n	8002066 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'C'){
 8001f8c:	78fb      	ldrb	r3, [r7, #3]
 8001f8e:	2b43      	cmp	r3, #67	; 0x43
 8001f90:	d112      	bne.n	8001fb8 <_ZN3LED9fullColorEc+0xbc>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001f92:	2201      	movs	r2, #1
 8001f94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f98:	4835      	ldr	r0, [pc, #212]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001f9a:	f007 fc8d 	bl	80098b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fa4:	4832      	ldr	r0, [pc, #200]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001fa6:	f007 fc87 	bl	80098b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001faa:	2200      	movs	r2, #0
 8001fac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fb0:	482f      	ldr	r0, [pc, #188]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001fb2:	f007 fc81 	bl	80098b8 <HAL_GPIO_WritePin>
}
 8001fb6:	e056      	b.n	8002066 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'M'){
 8001fb8:	78fb      	ldrb	r3, [r7, #3]
 8001fba:	2b4d      	cmp	r3, #77	; 0x4d
 8001fbc:	d112      	bne.n	8001fe4 <_ZN3LED9fullColorEc+0xe8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fc4:	482a      	ldr	r0, [pc, #168]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001fc6:	f007 fc77 	bl	80098b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fd0:	4827      	ldr	r0, [pc, #156]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001fd2:	f007 fc71 	bl	80098b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fdc:	4824      	ldr	r0, [pc, #144]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001fde:	f007 fc6b 	bl	80098b8 <HAL_GPIO_WritePin>
}
 8001fe2:	e040      	b.n	8002066 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'Y'){
 8001fe4:	78fb      	ldrb	r3, [r7, #3]
 8001fe6:	2b59      	cmp	r3, #89	; 0x59
 8001fe8:	d112      	bne.n	8002010 <_ZN3LED9fullColorEc+0x114>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001fea:	2200      	movs	r2, #0
 8001fec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ff0:	481f      	ldr	r0, [pc, #124]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001ff2:	f007 fc61 	bl	80098b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ffc:	481c      	ldr	r0, [pc, #112]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8001ffe:	f007 fc5b 	bl	80098b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8002002:	2201      	movs	r2, #1
 8002004:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002008:	4819      	ldr	r0, [pc, #100]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 800200a:	f007 fc55 	bl	80098b8 <HAL_GPIO_WritePin>
}
 800200e:	e02a      	b.n	8002066 <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'W'){
 8002010:	78fb      	ldrb	r3, [r7, #3]
 8002012:	2b57      	cmp	r3, #87	; 0x57
 8002014:	d112      	bne.n	800203c <_ZN3LED9fullColorEc+0x140>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002016:	2200      	movs	r2, #0
 8002018:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800201c:	4814      	ldr	r0, [pc, #80]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 800201e:	f007 fc4b 	bl	80098b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8002022:	2200      	movs	r2, #0
 8002024:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002028:	4811      	ldr	r0, [pc, #68]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 800202a:	f007 fc45 	bl	80098b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800202e:	2200      	movs	r2, #0
 8002030:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002034:	480e      	ldr	r0, [pc, #56]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8002036:	f007 fc3f 	bl	80098b8 <HAL_GPIO_WritePin>
}
 800203a:	e014      	b.n	8002066 <_ZN3LED9fullColorEc+0x16a>
	else if(color == '~'){
 800203c:	78fb      	ldrb	r3, [r7, #3]
 800203e:	2b7e      	cmp	r3, #126	; 0x7e
 8002040:	d111      	bne.n	8002066 <_ZN3LED9fullColorEc+0x16a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8002042:	2201      	movs	r2, #1
 8002044:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002048:	4809      	ldr	r0, [pc, #36]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 800204a:	f007 fc35 	bl	80098b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 800204e:	2201      	movs	r2, #1
 8002050:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002054:	4806      	ldr	r0, [pc, #24]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8002056:	f007 fc2f 	bl	80098b8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800205a:	2201      	movs	r2, #1
 800205c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002060:	4803      	ldr	r0, [pc, #12]	; (8002070 <_ZN3LED9fullColorEc+0x174>)
 8002062:	f007 fc29 	bl	80098b8 <HAL_GPIO_WritePin>
}
 8002066:	bf00      	nop
 8002068:	3708      	adds	r7, #8
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	40020000 	.word	0x40020000

08002074 <_ZN3LED2LREaa>:

void LED::LR(int8_t l_status, int8_t r_status)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	460b      	mov	r3, r1
 800207e:	70fb      	strb	r3, [r7, #3]
 8002080:	4613      	mov	r3, r2
 8002082:	70bb      	strb	r3, [r7, #2]
	if(l_status == 1)
 8002084:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002088:	2b01      	cmp	r3, #1
 800208a:	d106      	bne.n	800209a <_ZN3LED2LREaa+0x26>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 800208c:	2201      	movs	r2, #1
 800208e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002092:	4813      	ldr	r0, [pc, #76]	; (80020e0 <_ZN3LED2LREaa+0x6c>)
 8002094:	f007 fc10 	bl	80098b8 <HAL_GPIO_WritePin>
 8002098:	e009      	b.n	80020ae <_ZN3LED2LREaa+0x3a>
	else if(l_status == 0)
 800209a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d105      	bne.n	80020ae <_ZN3LED2LREaa+0x3a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80020a2:	2200      	movs	r2, #0
 80020a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020a8:	480d      	ldr	r0, [pc, #52]	; (80020e0 <_ZN3LED2LREaa+0x6c>)
 80020aa:	f007 fc05 	bl	80098b8 <HAL_GPIO_WritePin>

	if(r_status == 1)
 80020ae:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d106      	bne.n	80020c4 <_ZN3LED2LREaa+0x50>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 80020b6:	2201      	movs	r2, #1
 80020b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020bc:	4808      	ldr	r0, [pc, #32]	; (80020e0 <_ZN3LED2LREaa+0x6c>)
 80020be:	f007 fbfb 	bl	80098b8 <HAL_GPIO_WritePin>
	else if(r_status == 0)
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);

}
 80020c2:	e009      	b.n	80020d8 <_ZN3LED2LREaa+0x64>
	else if(r_status == 0)
 80020c4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d105      	bne.n	80020d8 <_ZN3LED2LREaa+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80020cc:	2200      	movs	r2, #0
 80020ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80020d2:	4803      	ldr	r0, [pc, #12]	; (80020e0 <_ZN3LED2LREaa+0x6c>)
 80020d4:	f007 fbf0 	bl	80098b8 <HAL_GPIO_WritePin>
}
 80020d8:	bf00      	nop
 80020da:	3708      	adds	r7, #8
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	40020000 	.word	0x40020000

080020e4 <_ZN10LineSensorC1Ev>:
#include "Macro.h"
#include "AQM0802.h"

float mon_sens, mon_sens_lpf;

LineSensor::LineSensor()
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b092      	sub	sp, #72	; 0x48
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7ff fe92 	bl	8001e1c <_ZN8JoyStickC1Ev>
{
	for(auto &av : analog_val_){
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	637b      	str	r3, [r7, #52]	; 0x34
 80020fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020fe:	647b      	str	r3, [r7, #68]	; 0x44
 8002100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002102:	331c      	adds	r3, #28
 8002104:	633b      	str	r3, [r7, #48]	; 0x30
 8002106:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800210a:	429a      	cmp	r2, r3
 800210c:	d008      	beq.n	8002120 <_ZN10LineSensorC1Ev+0x3c>
 800210e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002110:	62fb      	str	r3, [r7, #44]	; 0x2c
		av = 0;
 8002112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002114:	2200      	movs	r2, #0
 8002116:	801a      	strh	r2, [r3, #0]
	for(auto &av : analog_val_){
 8002118:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800211a:	3302      	adds	r3, #2
 800211c:	647b      	str	r3, [r7, #68]	; 0x44
 800211e:	e7f2      	b.n	8002106 <_ZN10LineSensorC1Ev+0x22>
	}

	for(auto &s : sensor){
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8002126:	62bb      	str	r3, [r7, #40]	; 0x28
 8002128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800212a:	643b      	str	r3, [r7, #64]	; 0x40
 800212c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800212e:	3338      	adds	r3, #56	; 0x38
 8002130:	627b      	str	r3, [r7, #36]	; 0x24
 8002132:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002136:	429a      	cmp	r2, r3
 8002138:	d009      	beq.n	800214e <_ZN10LineSensorC1Ev+0x6a>
 800213a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800213c:	623b      	str	r3, [r7, #32]
		s = 0;
 800213e:	6a3b      	ldr	r3, [r7, #32]
 8002140:	f04f 0200 	mov.w	r2, #0
 8002144:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor){
 8002146:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002148:	3304      	adds	r3, #4
 800214a:	643b      	str	r3, [r7, #64]	; 0x40
 800214c:	e7f1      	b.n	8002132 <_ZN10LineSensorC1Ev+0x4e>
	}

	for(auto &m : offset_values_){
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8002154:	61fb      	str	r3, [r7, #28]
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	63fb      	str	r3, [r7, #60]	; 0x3c
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	3338      	adds	r3, #56	; 0x38
 800215e:	61bb      	str	r3, [r7, #24]
 8002160:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	429a      	cmp	r2, r3
 8002166:	d009      	beq.n	800217c <_ZN10LineSensorC1Ev+0x98>
 8002168:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800216a:	617b      	str	r3, [r7, #20]
		m = 0;
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	f04f 0200 	mov.w	r2, #0
 8002172:	601a      	str	r2, [r3, #0]
	for(auto &m : offset_values_){
 8002174:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002176:	3304      	adds	r3, #4
 8002178:	63fb      	str	r3, [r7, #60]	; 0x3c
 800217a:	e7f1      	b.n	8002160 <_ZN10LineSensorC1Ev+0x7c>
	}
	for(auto &s : sensor_coefficient_){
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8002182:	613b      	str	r3, [r7, #16]
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	63bb      	str	r3, [r7, #56]	; 0x38
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	3338      	adds	r3, #56	; 0x38
 800218c:	60fb      	str	r3, [r7, #12]
 800218e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	429a      	cmp	r2, r3
 8002194:	d009      	beq.n	80021aa <_ZN10LineSensorC1Ev+0xc6>
 8002196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002198:	60bb      	str	r3, [r7, #8]
		s = 1;
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80021a0:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor_coefficient_){
 80021a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021a4:	3304      	adds	r3, #4
 80021a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80021a8:	e7f1      	b.n	800218e <_ZN10LineSensorC1Ev+0xaa>
	}

}
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4618      	mov	r0, r3
 80021ae:	3748      	adds	r7, #72	; 0x48
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <_ZN10LineSensor8ADCStartEv>:

void LineSensor::ADCStart()
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) analog_val_, 14);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	220e      	movs	r2, #14
 80021c0:	4619      	mov	r1, r3
 80021c2:	4803      	ldr	r0, [pc, #12]	; (80021d0 <_ZN10LineSensor8ADCStartEv+0x1c>)
 80021c4:	f006 f948 	bl	8008458 <HAL_ADC_Start_DMA>
}
 80021c8:	bf00      	nop
 80021ca:	3708      	adds	r7, #8
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	2003e8e4 	.word	0x2003e8e4

080021d4 <_ZN10LineSensor17storeSensorValuesEv>:

void LineSensor::storeSensorValues()
{
 80021d4:	b480      	push	{r7}
 80021d6:	b085      	sub	sp, #20
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
	static uint8_t cnt = 0;

	for(int i = 0; i < AD_DATA_SIZE; i++){
 80021dc:	2300      	movs	r3, #0
 80021de:	60fb      	str	r3, [r7, #12]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2b0d      	cmp	r3, #13
 80021e4:	dc2f      	bgt.n	8002246 <_ZN10LineSensor17storeSensorValuesEv+0x72>
		store_vals_[cnt][i] = sensor_coefficient_[i] * (analog_val_[i] - offset_values_[i]) ;
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	3392      	adds	r3, #146	; 0x92
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	4413      	add	r3, r2
 80021f0:	3304      	adds	r3, #4
 80021f2:	ed93 7a00 	vldr	s14, [r3]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	68fa      	ldr	r2, [r7, #12]
 80021fa:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80021fe:	ee07 3a90 	vmov	s15, r3
 8002202:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	33a0      	adds	r3, #160	; 0xa0
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	4413      	add	r3, r2
 8002210:	3304      	adds	r3, #4
 8002212:	edd3 7a00 	vldr	s15, [r3]
 8002216:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800221a:	4b14      	ldr	r3, [pc, #80]	; (800226c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	4619      	mov	r1, r3
 8002220:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	460b      	mov	r3, r1
 8002228:	00db      	lsls	r3, r3, #3
 800222a:	1a5b      	subs	r3, r3, r1
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	68f9      	ldr	r1, [r7, #12]
 8002230:	440b      	add	r3, r1
 8002232:	3306      	adds	r3, #6
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	4413      	add	r3, r2
 8002238:	3304      	adds	r3, #4
 800223a:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < AD_DATA_SIZE; i++){
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	3301      	adds	r3, #1
 8002242:	60fb      	str	r3, [r7, #12]
 8002244:	e7cc      	b.n	80021e0 <_ZN10LineSensor17storeSensorValuesEv+0xc>
		//store_vals_[cnt][i] = float(analog_val_[i]) ;
	}

	cnt++;
 8002246:	4b09      	ldr	r3, [pc, #36]	; (800226c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	3301      	adds	r3, #1
 800224c:	b2da      	uxtb	r2, r3
 800224e:	4b07      	ldr	r3, [pc, #28]	; (800226c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002250:	701a      	strb	r2, [r3, #0]
	if(cnt >= 10) cnt = 0;
 8002252:	4b06      	ldr	r3, [pc, #24]	; (800226c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	2b09      	cmp	r3, #9
 8002258:	d902      	bls.n	8002260 <_ZN10LineSensor17storeSensorValuesEv+0x8c>
 800225a:	4b04      	ldr	r3, [pc, #16]	; (800226c <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 800225c:	2200      	movs	r2, #0
 800225e:	701a      	strb	r2, [r3, #0]


}
 8002260:	bf00      	nop
 8002262:	3714      	adds	r7, #20
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr
 800226c:	2000021c 	.word	0x2000021c

08002270 <_ZN10LineSensor18updateSensorValuesEv>:
void LineSensor::updateSensorValues()
{
 8002270:	b5b0      	push	{r4, r5, r7, lr}
 8002272:	b08e      	sub	sp, #56	; 0x38
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
	float temp_val[10];
	static float pre_sensor[AD_DATA_SIZE];

	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 8002278:	2300      	movs	r3, #0
 800227a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800227e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002282:	2b0d      	cmp	r3, #13
 8002284:	f200 80b8 	bhi.w	80023f8 <_ZN10LineSensor18updateSensorValuesEv+0x188>
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 8002288:	2300      	movs	r3, #0
 800228a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 800228e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002292:	2b09      	cmp	r3, #9
 8002294:	d81c      	bhi.n	80022d0 <_ZN10LineSensor18updateSensorValuesEv+0x60>
			temp_val[store_cnt] = store_vals_[store_cnt][ad_cnt];
 8002296:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800229a:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 800229e:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	4613      	mov	r3, r2
 80022a6:	00db      	lsls	r3, r3, #3
 80022a8:	1a9b      	subs	r3, r3, r2
 80022aa:	005b      	lsls	r3, r3, #1
 80022ac:	4423      	add	r3, r4
 80022ae:	3306      	adds	r3, #6
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	4403      	add	r3, r0
 80022b4:	3304      	adds	r3, #4
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	008b      	lsls	r3, r1, #2
 80022ba:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80022be:	440b      	add	r3, r1
 80022c0:	3b30      	subs	r3, #48	; 0x30
 80022c2:	601a      	str	r2, [r3, #0]
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 80022c4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80022c8:	3301      	adds	r3, #1
 80022ca:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80022ce:	e7de      	b.n	800228e <_ZN10LineSensor18updateSensorValuesEv+0x1e>
		}

		// sort
		for(uint8_t i = 0; i < 10; i++){
 80022d0:	2300      	movs	r3, #0
 80022d2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80022d6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80022da:	2b09      	cmp	r3, #9
 80022dc:	d84d      	bhi.n	800237a <_ZN10LineSensor18updateSensorValuesEv+0x10a>
			for (uint8_t j = i+1; j < 10; j++) {
 80022de:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80022e2:	3301      	adds	r3, #1
 80022e4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80022e8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80022ec:	2b09      	cmp	r3, #9
 80022ee:	d83e      	bhi.n	800236e <_ZN10LineSensor18updateSensorValuesEv+0xfe>
				if(temp_val[i] < temp_val[j]){
 80022f0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80022fa:	4413      	add	r3, r2
 80022fc:	3b30      	subs	r3, #48	; 0x30
 80022fe:	ed93 7a00 	vldr	s14, [r3]
 8002302:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800230c:	4413      	add	r3, r2
 800230e:	3b30      	subs	r3, #48	; 0x30
 8002310:	edd3 7a00 	vldr	s15, [r3]
 8002314:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800231c:	d521      	bpl.n	8002362 <_ZN10LineSensor18updateSensorValuesEv+0xf2>
					float tmp = temp_val[j];
 800231e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002328:	4413      	add	r3, r2
 800232a:	3b30      	subs	r3, #48	; 0x30
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	633b      	str	r3, [r7, #48]	; 0x30
					temp_val[j] = temp_val[i];
 8002330:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8002334:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002338:	0092      	lsls	r2, r2, #2
 800233a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800233e:	440a      	add	r2, r1
 8002340:	3a30      	subs	r2, #48	; 0x30
 8002342:	6812      	ldr	r2, [r2, #0]
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800234a:	440b      	add	r3, r1
 800234c:	3b30      	subs	r3, #48	; 0x30
 800234e:	601a      	str	r2, [r3, #0]
					temp_val[i] = tmp;
 8002350:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800235a:	4413      	add	r3, r2
 800235c:	3b30      	subs	r3, #48	; 0x30
 800235e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002360:	601a      	str	r2, [r3, #0]
			for (uint8_t j = i+1; j < 10; j++) {
 8002362:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002366:	3301      	adds	r3, #1
 8002368:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 800236c:	e7bc      	b.n	80022e8 <_ZN10LineSensor18updateSensorValuesEv+0x78>
		for(uint8_t i = 0; i < 10; i++){
 800236e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002372:	3301      	adds	r3, #1
 8002374:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8002378:	e7ad      	b.n	80022d6 <_ZN10LineSensor18updateSensorValuesEv+0x66>
				}
			}
		}

		sensor[ad_cnt] = ((R_LINESENSE)*(temp_val[5]) + (1.0 - (R_LINESENSE))* (pre_sensor[ad_cnt]));
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	4618      	mov	r0, r3
 800237e:	f7fe f8fb 	bl	8000578 <__aeabi_f2d>
 8002382:	a32a      	add	r3, pc, #168	; (adr r3, 800242c <_ZN10LineSensor18updateSensorValuesEv+0x1bc>)
 8002384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002388:	f7fe f94e 	bl	8000628 <__aeabi_dmul>
 800238c:	4603      	mov	r3, r0
 800238e:	460c      	mov	r4, r1
 8002390:	4625      	mov	r5, r4
 8002392:	461c      	mov	r4, r3
 8002394:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002398:	4a21      	ldr	r2, [pc, #132]	; (8002420 <_ZN10LineSensor18updateSensorValuesEv+0x1b0>)
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	4413      	add	r3, r2
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7fe f8e9 	bl	8000578 <__aeabi_f2d>
 80023a6:	a31c      	add	r3, pc, #112	; (adr r3, 8002418 <_ZN10LineSensor18updateSensorValuesEv+0x1a8>)
 80023a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ac:	f7fe f93c 	bl	8000628 <__aeabi_dmul>
 80023b0:	4602      	mov	r2, r0
 80023b2:	460b      	mov	r3, r1
 80023b4:	4620      	mov	r0, r4
 80023b6:	4629      	mov	r1, r5
 80023b8:	f7fd ff80 	bl	80002bc <__adddf3>
 80023bc:	4603      	mov	r3, r0
 80023be:	460c      	mov	r4, r1
 80023c0:	461a      	mov	r2, r3
 80023c2:	4623      	mov	r3, r4
 80023c4:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 80023c8:	4610      	mov	r0, r2
 80023ca:	4619      	mov	r1, r3
 80023cc:	f7fe fc24 	bl	8000c18 <__aeabi_d2f>
 80023d0:	4601      	mov	r1, r0
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	f104 03b0 	add.w	r3, r4, #176	; 0xb0
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	4413      	add	r3, r2
 80023dc:	6019      	str	r1, [r3, #0]
		pre_sensor[ad_cnt] = temp_val[5];
 80023de:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80023e2:	69fa      	ldr	r2, [r7, #28]
 80023e4:	490e      	ldr	r1, [pc, #56]	; (8002420 <_ZN10LineSensor18updateSensorValuesEv+0x1b0>)
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	440b      	add	r3, r1
 80023ea:	601a      	str	r2, [r3, #0]
	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 80023ec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80023f0:	3301      	adds	r3, #1
 80023f2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80023f6:	e742      	b.n	800227e <_ZN10LineSensor18updateSensorValuesEv+0xe>
	}

	mon_sens = store_vals_[5][5];
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80023fe:	4a09      	ldr	r2, [pc, #36]	; (8002424 <_ZN10LineSensor18updateSensorValuesEv+0x1b4>)
 8002400:	6013      	str	r3, [r2, #0]
	mon_sens_lpf = sensor[5];
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8002408:	4a07      	ldr	r2, [pc, #28]	; (8002428 <_ZN10LineSensor18updateSensorValuesEv+0x1b8>)
 800240a:	6013      	str	r3, [r2, #0]
}
 800240c:	bf00      	nop
 800240e:	3738      	adds	r7, #56	; 0x38
 8002410:	46bd      	mov	sp, r7
 8002412:	bdb0      	pop	{r4, r5, r7, pc}
 8002414:	f3af 8000 	nop.w
 8002418:	66666666 	.word	0x66666666
 800241c:	3fee6666 	.word	0x3fee6666
 8002420:	20000220 	.word	0x20000220
 8002424:	20000214 	.word	0x20000214
 8002428:	20000218 	.word	0x20000218
 800242c:	9999999a 	.word	0x9999999a
 8002430:	3fa99999 	.word	0x3fa99999

08002434 <_ZN10LineSensor11calibrationEv>:

void LineSensor::calibration()
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b0a0      	sub	sp, #128	; 0x80
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
	HAL_Delay(100);
 800243c:	2064      	movs	r0, #100	; 0x64
 800243e:	f005 ffa5 	bl	800838c <HAL_Delay>

	lcd_clear();
 8002442:	f7fe fe2d 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8002446:	2100      	movs	r1, #0
 8002448:	2000      	movs	r0, #0
 800244a:	f7fe fe39 	bl	80010c0 <lcd_locate>
	lcd_printf("LineSens");
 800244e:	4886      	ldr	r0, [pc, #536]	; (8002668 <_ZN10LineSensor11calibrationEv+0x234>)
 8002450:	f7fe fe60 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8002454:	2101      	movs	r1, #1
 8002456:	2000      	movs	r0, #0
 8002458:	f7fe fe32 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 800245c:	4883      	ldr	r0, [pc, #524]	; (800266c <_ZN10LineSensor11calibrationEv+0x238>)
 800245e:	f7fe fe59 	bl	8001114 <lcd_printf>


	float max_values[AD_DATA_SIZE];
	float min_values[AD_DATA_SIZE];

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002462:	2300      	movs	r3, #0
 8002464:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 8002468:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800246c:	2b0d      	cmp	r3, #13
 800246e:	d823      	bhi.n	80024b8 <_ZN10LineSensor11calibrationEv+0x84>
		max_values[i] = sensor[i];
 8002470:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8002474:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002478:	6879      	ldr	r1, [r7, #4]
 800247a:	32b0      	adds	r2, #176	; 0xb0
 800247c:	0092      	lsls	r2, r2, #2
 800247e:	440a      	add	r2, r1
 8002480:	6812      	ldr	r2, [r2, #0]
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002488:	440b      	add	r3, r1
 800248a:	3b40      	subs	r3, #64	; 0x40
 800248c:	601a      	str	r2, [r3, #0]
		min_values[i] = sensor[i];
 800248e:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 8002492:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002496:	6879      	ldr	r1, [r7, #4]
 8002498:	32b0      	adds	r2, #176	; 0xb0
 800249a:	0092      	lsls	r2, r2, #2
 800249c:	440a      	add	r2, r1
 800249e:	6812      	ldr	r2, [r2, #0]
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80024a6:	440b      	add	r3, r1
 80024a8:	3b78      	subs	r3, #120	; 0x78
 80024aa:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80024ac:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80024b0:	3301      	adds	r3, #1
 80024b2:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 80024b6:	e7d7      	b.n	8002468 <_ZN10LineSensor11calibrationEv+0x34>
	}

	while(joy_stick_.getValue() != JOY_C){
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 80024be:	4618      	mov	r0, r3
 80024c0:	f7ff fcb8 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	bf14      	ite	ne
 80024ca:	2301      	movne	r3, #1
 80024cc:	2300      	moveq	r3, #0
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d079      	beq.n	80025c8 <_ZN10LineSensor11calibrationEv+0x194>

		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80024d4:	2300      	movs	r3, #0
 80024d6:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 80024da:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80024de:	2b0d      	cmp	r3, #13
 80024e0:	d850      	bhi.n	8002584 <_ZN10LineSensor11calibrationEv+0x150>
			if(max_values[i] < sensor[i]){
 80024e2:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80024ec:	4413      	add	r3, r2
 80024ee:	3b40      	subs	r3, #64	; 0x40
 80024f0:	ed93 7a00 	vldr	s14, [r3]
 80024f4:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	33b0      	adds	r3, #176	; 0xb0
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	4413      	add	r3, r2
 8002500:	edd3 7a00 	vldr	s15, [r3]
 8002504:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002508:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800250c:	d50f      	bpl.n	800252e <_ZN10LineSensor11calibrationEv+0xfa>
				max_values[i] = sensor[i];
 800250e:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 8002512:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002516:	6879      	ldr	r1, [r7, #4]
 8002518:	32b0      	adds	r2, #176	; 0xb0
 800251a:	0092      	lsls	r2, r2, #2
 800251c:	440a      	add	r2, r1
 800251e:	6812      	ldr	r2, [r2, #0]
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002526:	440b      	add	r3, r1
 8002528:	3b40      	subs	r3, #64	; 0x40
 800252a:	601a      	str	r2, [r3, #0]
 800252c:	e024      	b.n	8002578 <_ZN10LineSensor11calibrationEv+0x144>
			}
			else if(min_values[i] > sensor[i]){
 800252e:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002538:	4413      	add	r3, r2
 800253a:	3b78      	subs	r3, #120	; 0x78
 800253c:	ed93 7a00 	vldr	s14, [r3]
 8002540:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	33b0      	adds	r3, #176	; 0xb0
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	4413      	add	r3, r2
 800254c:	edd3 7a00 	vldr	s15, [r3]
 8002550:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002558:	dd0e      	ble.n	8002578 <_ZN10LineSensor11calibrationEv+0x144>
				min_values[i] = sensor[i];
 800255a:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 800255e:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002562:	6879      	ldr	r1, [r7, #4]
 8002564:	32b0      	adds	r2, #176	; 0xb0
 8002566:	0092      	lsls	r2, r2, #2
 8002568:	440a      	add	r2, r1
 800256a:	6812      	ldr	r2, [r2, #0]
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002572:	440b      	add	r3, r1
 8002574:	3b78      	subs	r3, #120	; 0x78
 8002576:	601a      	str	r2, [r3, #0]
		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002578:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800257c:	3301      	adds	r3, #1
 800257e:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8002582:	e7aa      	b.n	80024da <_ZN10LineSensor11calibrationEv+0xa6>
			}
		}

		if(rotary_switch_.getValue() == 0){
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f203 23be 	addw	r3, r3, #702	; 0x2be
 800258a:	4618      	mov	r0, r3
 800258c:	f002 fa22 	bl	80049d4 <_ZN12RotarySwitch8getValueEv>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	bf0c      	ite	eq
 8002596:	2301      	moveq	r3, #1
 8002598:	2300      	movne	r3, #0
 800259a:	b2db      	uxtb	r3, r3
 800259c:	2b00      	cmp	r3, #0
 800259e:	d009      	beq.n	80025b4 <_ZN10LineSensor11calibrationEv+0x180>
			led_.LR(-1, 1);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 80025a6:	2201      	movs	r2, #1
 80025a8:	f04f 31ff 	mov.w	r1, #4294967295
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7ff fd61 	bl	8002074 <_ZN3LED2LREaa>
 80025b2:	e781      	b.n	80024b8 <_ZN10LineSensor11calibrationEv+0x84>

		}
		else{
			led_.LR(-1, 0);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 80025ba:	2200      	movs	r2, #0
 80025bc:	f04f 31ff 	mov.w	r1, #4294967295
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7ff fd57 	bl	8002074 <_ZN3LED2LREaa>
	while(joy_stick_.getValue() != JOY_C){
 80025c6:	e777      	b.n	80024b8 <_ZN10LineSensor11calibrationEv+0x84>
		printf("%f, ", m);
	}
		printf("\n");
	*/

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80025c8:	2300      	movs	r3, #0
 80025ca:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 80025ce:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80025d2:	2b0d      	cmp	r3, #13
 80025d4:	d826      	bhi.n	8002624 <_ZN10LineSensor11calibrationEv+0x1f0>
		sensor_coefficient_[i] = 1000 / (max_values[i] - min_values[i]);
 80025d6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80025e0:	4413      	add	r3, r2
 80025e2:	3b40      	subs	r3, #64	; 0x40
 80025e4:	ed93 7a00 	vldr	s14, [r3]
 80025e8:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80025f2:	4413      	add	r3, r2
 80025f4:	3b78      	subs	r3, #120	; 0x78
 80025f6:	edd3 7a00 	vldr	s15, [r3]
 80025fa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80025fe:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002602:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8002670 <_ZN10LineSensor11calibrationEv+0x23c>
 8002606:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	3392      	adds	r3, #146	; 0x92
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	4413      	add	r3, r2
 8002612:	3304      	adds	r3, #4
 8002614:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002618:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800261c:	3301      	adds	r3, #1
 800261e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8002622:	e7d4      	b.n	80025ce <_ZN10LineSensor11calibrationEv+0x19a>
	}
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002624:	2300      	movs	r3, #0
 8002626:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 800262a:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800262e:	2b0d      	cmp	r3, #13
 8002630:	d815      	bhi.n	800265e <_ZN10LineSensor11calibrationEv+0x22a>
		offset_values_[i] = min_values[i];
 8002632:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 8002636:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 800263a:	0092      	lsls	r2, r2, #2
 800263c:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002640:	440a      	add	r2, r1
 8002642:	3a78      	subs	r2, #120	; 0x78
 8002644:	6812      	ldr	r2, [r2, #0]
 8002646:	6879      	ldr	r1, [r7, #4]
 8002648:	33a0      	adds	r3, #160	; 0xa0
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	440b      	add	r3, r1
 800264e:	3304      	adds	r3, #4
 8002650:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002652:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 8002656:	3301      	adds	r3, #1
 8002658:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 800265c:	e7e5      	b.n	800262a <_ZN10LineSensor11calibrationEv+0x1f6>
	}


}
 800265e:	bf00      	nop
 8002660:	3780      	adds	r7, #128	; 0x80
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	08018284 	.word	0x08018284
 800266c:	08018290 	.word	0x08018290
 8002670:	447a0000 	.word	0x447a0000

08002674 <_ZN10LineSensor13emergencyStopEv>:
{
	printf("%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n", sensor[0], sensor[1], sensor[2], sensor[3], sensor[4], sensor[5], sensor[6], sensor[7], sensor[8], sensor[9], sensor[10], sensor[11], sensor[12], sensor[13]);
}

bool LineSensor::emergencyStop()
{
 8002674:	b480      	push	{r7}
 8002676:	b089      	sub	sp, #36	; 0x24
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
	uint16_t out_cnt = 0;
 800267c:	2300      	movs	r3, #0
 800267e:	83fb      	strh	r3, [r7, #30]
	static uint16_t cnt = 0;
	static bool flag = false;

	for(const auto & s : sensor){
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8002686:	617b      	str	r3, [r7, #20]
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	61bb      	str	r3, [r7, #24]
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	3338      	adds	r3, #56	; 0x38
 8002690:	613b      	str	r3, [r7, #16]
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	429a      	cmp	r2, r3
 8002698:	d012      	beq.n	80026c0 <_ZN10LineSensor13emergencyStopEv+0x4c>
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	60fb      	str	r3, [r7, #12]
		if(s >= 700) out_cnt++;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	edd3 7a00 	vldr	s15, [r3]
 80026a4:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8002714 <_ZN10LineSensor13emergencyStopEv+0xa0>
 80026a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026b0:	db02      	blt.n	80026b8 <_ZN10LineSensor13emergencyStopEv+0x44>
 80026b2:	8bfb      	ldrh	r3, [r7, #30]
 80026b4:	3301      	adds	r3, #1
 80026b6:	83fb      	strh	r3, [r7, #30]
	for(const auto & s : sensor){
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	3304      	adds	r3, #4
 80026bc:	61bb      	str	r3, [r7, #24]
 80026be:	e7e8      	b.n	8002692 <_ZN10LineSensor13emergencyStopEv+0x1e>
	}

	if(out_cnt >= AD_DATA_SIZE){
 80026c0:	8bfb      	ldrh	r3, [r7, #30]
 80026c2:	2b0d      	cmp	r3, #13
 80026c4:	d906      	bls.n	80026d4 <_ZN10LineSensor13emergencyStopEv+0x60>
		cnt++;
 80026c6:	4b14      	ldr	r3, [pc, #80]	; (8002718 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 80026c8:	881b      	ldrh	r3, [r3, #0]
 80026ca:	3301      	adds	r3, #1
 80026cc:	b29a      	uxth	r2, r3
 80026ce:	4b12      	ldr	r3, [pc, #72]	; (8002718 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 80026d0:	801a      	strh	r2, [r3, #0]
 80026d2:	e002      	b.n	80026da <_ZN10LineSensor13emergencyStopEv+0x66>
	}
	else{
		cnt = 0;
 80026d4:	4b10      	ldr	r3, [pc, #64]	; (8002718 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	801a      	strh	r2, [r3, #0]
	}

	if(cnt >= 50){
 80026da:	4b0f      	ldr	r3, [pc, #60]	; (8002718 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 80026dc:	881b      	ldrh	r3, [r3, #0]
 80026de:	2b31      	cmp	r3, #49	; 0x31
 80026e0:	d903      	bls.n	80026ea <_ZN10LineSensor13emergencyStopEv+0x76>
		flag = true;
 80026e2:	4b0e      	ldr	r3, [pc, #56]	; (800271c <_ZN10LineSensor13emergencyStopEv+0xa8>)
 80026e4:	2201      	movs	r2, #1
 80026e6:	701a      	strb	r2, [r3, #0]
 80026e8:	e002      	b.n	80026f0 <_ZN10LineSensor13emergencyStopEv+0x7c>
	}
	else flag = false;
 80026ea:	4b0c      	ldr	r3, [pc, #48]	; (800271c <_ZN10LineSensor13emergencyStopEv+0xa8>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	701a      	strb	r2, [r3, #0]

	if(cnt >= 10000) cnt = 10000;
 80026f0:	4b09      	ldr	r3, [pc, #36]	; (8002718 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 80026f2:	881b      	ldrh	r3, [r3, #0]
 80026f4:	f242 720f 	movw	r2, #9999	; 0x270f
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d903      	bls.n	8002704 <_ZN10LineSensor13emergencyStopEv+0x90>
 80026fc:	4b06      	ldr	r3, [pc, #24]	; (8002718 <_ZN10LineSensor13emergencyStopEv+0xa4>)
 80026fe:	f242 7210 	movw	r2, #10000	; 0x2710
 8002702:	801a      	strh	r2, [r3, #0]

	return flag;
 8002704:	4b05      	ldr	r3, [pc, #20]	; (800271c <_ZN10LineSensor13emergencyStopEv+0xa8>)
 8002706:	781b      	ldrb	r3, [r3, #0]

}
 8002708:	4618      	mov	r0, r3
 800270a:	3724      	adds	r7, #36	; 0x24
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr
 8002714:	442f0000 	.word	0x442f0000
 8002718:	20000258 	.word	0x20000258
 800271c:	2000025a 	.word	0x2000025a

08002720 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	ed87 0a01 	vstr	s0, [r7, #4]
 800272a:	edd7 7a01 	vldr	s15, [r7, #4]
 800272e:	eef0 7ae7 	vabs.f32	s15, s15
 8002732:	eeb0 0a67 	vmov.f32	s0, s15
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU>:
float mon_ave_l, mon_ave_r;
float mon_ref_dis, mon_current_dis;
uint16_t mon_vel_idx, mon_i;
float mon_tar_vel;

LineTrace::LineTrace(Motor *motor, LineSensor *line_sensor, VelocityCtrl *velocity_ctrl, SideSensor *side_sensor, Encoder *encoder, Odometry *odometry, Logger *logger, IMU *imu) :
 8002740:	b480      	push	{r7}
 8002742:	b087      	sub	sp, #28
 8002744:	af00      	add	r7, sp, #0
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	60b9      	str	r1, [r7, #8]
 800274a:	607a      	str	r2, [r7, #4]
 800274c:	603b      	str	r3, [r7, #0]
				kp_(0), kd_(0), ki_(0), kp_velo_(0), kd_velo_(0), ki_velo_(0),
				excution_flag_(false), i_reset_flag_(false), normal_ratio_(0),
				target_velocity_(0), max_velocity_(0), max_velocity2_(0), logging_flag_(false),
				ref_distance_(0), velocity_play_flag_(false), velocity_table_idx_(0), mode_selector_(0), crossline_idx_(0), sideline_idx_(0),
				ignore_crossline_flag_(false), stable_flag_(false), stable_cnt_reset_flag_(false)
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	f04f 0200 	mov.w	r2, #0
 8002754:	625a      	str	r2, [r3, #36]	; 0x24
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	f04f 0200 	mov.w	r2, #0
 800275c:	629a      	str	r2, [r3, #40]	; 0x28
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	f04f 0200 	mov.w	r2, #0
 8002764:	62da      	str	r2, [r3, #44]	; 0x2c
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	f04f 0200 	mov.w	r2, #0
 800276c:	631a      	str	r2, [r3, #48]	; 0x30
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	f04f 0200 	mov.w	r2, #0
 8002774:	635a      	str	r2, [r3, #52]	; 0x34
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	f04f 0200 	mov.w	r2, #0
 800277c:	639a      	str	r2, [r3, #56]	; 0x38
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2200      	movs	r2, #0
 800278a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	f04f 0200 	mov.w	r2, #0
 8002794:	641a      	str	r2, [r3, #64]	; 0x40
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	f04f 0200 	mov.w	r2, #0
 800279c:	679a      	str	r2, [r3, #120]	; 0x78
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	f04f 0200 	mov.w	r2, #0
 80027a4:	67da      	str	r2, [r3, #124]	; 0x7c
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	f04f 0200 	mov.w	r2, #0
 80027ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 80027be:	3348      	adds	r3, #72	; 0x48
 80027c0:	f04f 0200 	mov.w	r2, #0
 80027c4:	601a      	str	r2, [r3, #0]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80027cc:	330c      	adds	r3, #12
 80027ce:	2200      	movs	r2, #0
 80027d0:	701a      	strb	r2, [r3, #0]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80027d8:	330e      	adds	r3, #14
 80027da:	2200      	movs	r2, #0
 80027dc:	801a      	strh	r2, [r3, #0]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80027e4:	3310      	adds	r3, #16
 80027e6:	2200      	movs	r2, #0
 80027e8:	801a      	strh	r2, [r3, #0]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80027f0:	3344      	adds	r3, #68	; 0x44
 80027f2:	2200      	movs	r2, #0
 80027f4:	801a      	strh	r2, [r3, #0]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80027fc:	3346      	adds	r3, #70	; 0x46
 80027fe:	2200      	movs	r2, #0
 8002800:	801a      	strh	r2, [r3, #0]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002808:	3348      	adds	r3, #72	; 0x48
 800280a:	2200      	movs	r2, #0
 800280c:	701a      	strb	r2, [r3, #0]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002814:	3349      	adds	r3, #73	; 0x49
 8002816:	2200      	movs	r2, #0
 8002818:	701a      	strb	r2, [r3, #0]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002820:	334a      	adds	r3, #74	; 0x4a
 8002822:	2200      	movs	r2, #0
 8002824:	701a      	strb	r2, [r3, #0]
{
	motor_ = motor;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	68ba      	ldr	r2, [r7, #8]
 800282a:	601a      	str	r2, [r3, #0]
	line_sensor_ = line_sensor;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	683a      	ldr	r2, [r7, #0]
 8002836:	609a      	str	r2, [r3, #8]
	side_sensor_ = side_sensor;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	6a3a      	ldr	r2, [r7, #32]
 800283c:	611a      	str	r2, [r3, #16]
	encoder_ = encoder;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002842:	615a      	str	r2, [r3, #20]
	odometry_ = odometry;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002848:	619a      	str	r2, [r3, #24]
	logger_ = logger;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800284e:	61da      	str	r2, [r3, #28]
	imu_ = imu;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002854:	621a      	str	r2, [r3, #32]

	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002856:	2300      	movs	r3, #0
 8002858:	82fb      	strh	r3, [r7, #22]
 800285a:	8afb      	ldrh	r3, [r7, #22]
 800285c:	f241 726f 	movw	r2, #5999	; 0x176f
 8002860:	4293      	cmp	r3, r2
 8002862:	d80e      	bhi.n	8002882 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x142>
		velocity_table_[i] = 0;
 8002864:	8afb      	ldrh	r3, [r7, #22]
 8002866:	68fa      	ldr	r2, [r7, #12]
 8002868:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 800286c:	3312      	adds	r3, #18
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	4413      	add	r3, r2
 8002872:	3304      	adds	r3, #4
 8002874:	f04f 0200 	mov.w	r2, #0
 8002878:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 800287a:	8afb      	ldrh	r3, [r7, #22]
 800287c:	3301      	adds	r3, #1
 800287e:	82fb      	strh	r3, [r7, #22]
 8002880:	e7eb      	b.n	800285a <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x11a>
	}
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002882:	2300      	movs	r3, #0
 8002884:	82bb      	strh	r3, [r7, #20]
 8002886:	8abb      	ldrh	r3, [r7, #20]
 8002888:	2b63      	cmp	r3, #99	; 0x63
 800288a:	d80e      	bhi.n	80028aa <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x16a>
		crossline_distance_[i] = 0;
 800288c:	8abb      	ldrh	r3, [r7, #20]
 800288e:	68fa      	ldr	r2, [r7, #12]
 8002890:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8002894:	3304      	adds	r3, #4
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	4413      	add	r3, r2
 800289a:	3304      	adds	r3, #4
 800289c:	f04f 0200 	mov.w	r2, #0
 80028a0:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 80028a2:	8abb      	ldrh	r3, [r7, #20]
 80028a4:	3301      	adds	r3, #1
 80028a6:	82bb      	strh	r3, [r7, #20]
 80028a8:	e7ed      	b.n	8002886 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x146>
	}
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 80028aa:	2300      	movs	r3, #0
 80028ac:	827b      	strh	r3, [r7, #18]
 80028ae:	8a7b      	ldrh	r3, [r7, #18]
 80028b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028b4:	d20e      	bcs.n	80028d4 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x194>
		sideline_distance_[i] = 0;
 80028b6:	8a7b      	ldrh	r3, [r7, #18]
 80028b8:	68fa      	ldr	r2, [r7, #12]
 80028ba:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 80028be:	3328      	adds	r3, #40	; 0x28
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	4413      	add	r3, r2
 80028c4:	3304      	adds	r3, #4
 80028c6:	f04f 0200 	mov.w	r2, #0
 80028ca:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 80028cc:	8a7b      	ldrh	r3, [r7, #18]
 80028ce:	3301      	adds	r3, #1
 80028d0:	827b      	strh	r3, [r7, #18]
 80028d2:	e7ec      	b.n	80028ae <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU+0x16e>
	}
}
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	4618      	mov	r0, r3
 80028d8:	371c      	adds	r7, #28
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
 80028e2:	0000      	movs	r0, r0
 80028e4:	0000      	movs	r0, r0
	...

080028e8 <_ZN9LineTrace9calcErrorEv>:

// --------private--------- //
float LineTrace::calcError()
{
 80028e8:	b5b0      	push	{r4, r5, r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
	static float pre_diff;
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	ed93 7ab0 	vldr	s14, [r3, #704]	; 0x2c0
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8002900:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 800290c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	edd3 7ab3 	vldr	s15, [r3, #716]	; 0x2cc
 8002918:	ee37 7a27 	vadd.f32	s14, s14, s15
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 8002924:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	edd3 7ab5 	vldr	s15, [r3, #724]	; 0x2d4
 8002930:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	edd3 7ab6 	vldr	s15, [r3, #728]	; 0x2d8
 800293c:	ee37 7a27 	vadd.f32	s14, s14, s15
			- (line_sensor_->sensor[7] + line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10] + line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	edd3 6ab7 	vldr	s13, [r3, #732]	; 0x2dc
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	edd3 7ab8 	vldr	s15, [r3, #736]	; 0x2e0
 8002950:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	edd3 7ab9 	vldr	s15, [r3, #740]	; 0x2e4
 800295c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 8002968:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	edd3 7abb 	vldr	s15, [r3, #748]	; 0x2ec
 8002974:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	edd3 7abc 	vldr	s15, [r3, #752]	; 0x2f0
 8002980:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	edd3 7abd 	vldr	s15, [r3, #756]	; 0x2f4
 800298c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002990:	ee77 7a67 	vsub.f32	s15, s14, s15
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
 8002994:	edc7 7a03 	vstr	s15, [r7, #12]
	mon_diff = diff;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	4a1f      	ldr	r2, [pc, #124]	; (8002a18 <_ZN9LineTrace9calcErrorEv+0x130>)
 800299c:	6013      	str	r3, [r2, #0]

	diff = ((R_DIFF)*(diff) + (1.0 - (R_DIFF))* (pre_diff));
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	4618      	mov	r0, r3
 80029a2:	f7fd fde9 	bl	8000578 <__aeabi_f2d>
 80029a6:	a318      	add	r3, pc, #96	; (adr r3, 8002a08 <_ZN9LineTrace9calcErrorEv+0x120>)
 80029a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ac:	f7fd fe3c 	bl	8000628 <__aeabi_dmul>
 80029b0:	4603      	mov	r3, r0
 80029b2:	460c      	mov	r4, r1
 80029b4:	4625      	mov	r5, r4
 80029b6:	461c      	mov	r4, r3
 80029b8:	4b18      	ldr	r3, [pc, #96]	; (8002a1c <_ZN9LineTrace9calcErrorEv+0x134>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4618      	mov	r0, r3
 80029be:	f7fd fddb 	bl	8000578 <__aeabi_f2d>
 80029c2:	a313      	add	r3, pc, #76	; (adr r3, 8002a10 <_ZN9LineTrace9calcErrorEv+0x128>)
 80029c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029c8:	f7fd fe2e 	bl	8000628 <__aeabi_dmul>
 80029cc:	4602      	mov	r2, r0
 80029ce:	460b      	mov	r3, r1
 80029d0:	4620      	mov	r0, r4
 80029d2:	4629      	mov	r1, r5
 80029d4:	f7fd fc72 	bl	80002bc <__adddf3>
 80029d8:	4603      	mov	r3, r0
 80029da:	460c      	mov	r4, r1
 80029dc:	4618      	mov	r0, r3
 80029de:	4621      	mov	r1, r4
 80029e0:	f7fe f91a 	bl	8000c18 <__aeabi_d2f>
 80029e4:	4603      	mov	r3, r0
 80029e6:	60fb      	str	r3, [r7, #12]
	mon_diff_lpf = diff;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	4a0d      	ldr	r2, [pc, #52]	; (8002a20 <_ZN9LineTrace9calcErrorEv+0x138>)
 80029ec:	6013      	str	r3, [r2, #0]

	pre_diff = diff;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	4a0a      	ldr	r2, [pc, #40]	; (8002a1c <_ZN9LineTrace9calcErrorEv+0x134>)
 80029f2:	6013      	str	r3, [r2, #0]

	return diff;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	ee07 3a90 	vmov	s15, r3

}
 80029fa:	eeb0 0a67 	vmov.f32	s0, s15
 80029fe:	3710      	adds	r7, #16
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bdb0      	pop	{r4, r5, r7, pc}
 8002a04:	f3af 8000 	nop.w
 8002a08:	47ae147b 	.word	0x47ae147b
 8002a0c:	3fb47ae1 	.word	0x3fb47ae1
 8002a10:	d70a3d71 	.word	0xd70a3d71
 8002a14:	3fed70a3 	.word	0x3fed70a3
 8002a18:	2000025c 	.word	0x2000025c
 8002a1c:	20000280 	.word	0x20000280
 8002a20:	20000260 	.word	0x20000260
 8002a24:	00000000 	.word	0x00000000

08002a28 <_ZN9LineTrace8pidTraceEv>:
	float phi = atan2(norm_l - norm_r, 1.0);
	delta_theta = (phi * ANGLE_BETWEEN_SENSORS/2) / (PI / 4);
}

void LineTrace::pidTrace()
{
 8002a28:	b5b0      	push	{r4, r5, r7, lr}
 8002a2a:	b086      	sub	sp, #24
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
	float diff = calcError();
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f7ff ff59 	bl	80028e8 <_ZN9LineTrace9calcErrorEv>
 8002a36:	ed87 0a05 	vstr	s0, [r7, #20]
	static float pre_diff = 0;
	float p, d;
	static float i;

	if(i_reset_flag_ == true){
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d007      	beq.n	8002a54 <_ZN9LineTrace8pidTraceEv+0x2c>
		i = 0;
 8002a44:	4b3c      	ldr	r3, [pc, #240]	; (8002b38 <_ZN9LineTrace8pidTraceEv+0x110>)
 8002a46:	f04f 0200 	mov.w	r2, #0
 8002a4a:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	}

	p = kp_ * diff;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002a5a:	ed97 7a05 	vldr	s14, [r7, #20]
 8002a5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a62:	edc7 7a04 	vstr	s15, [r7, #16]
	d = kd_ * (diff - pre_diff) / DELTA_T;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8002a6c:	4b33      	ldr	r3, [pc, #204]	; (8002b3c <_ZN9LineTrace8pidTraceEv+0x114>)
 8002a6e:	edd3 7a00 	vldr	s15, [r3]
 8002a72:	edd7 6a05 	vldr	s13, [r7, #20]
 8002a76:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002a7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a7e:	ee17 0a90 	vmov	r0, s15
 8002a82:	f7fd fd79 	bl	8000578 <__aeabi_f2d>
 8002a86:	a32a      	add	r3, pc, #168	; (adr r3, 8002b30 <_ZN9LineTrace8pidTraceEv+0x108>)
 8002a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a8c:	f7fd fef6 	bl	800087c <__aeabi_ddiv>
 8002a90:	4603      	mov	r3, r0
 8002a92:	460c      	mov	r4, r1
 8002a94:	4618      	mov	r0, r3
 8002a96:	4621      	mov	r1, r4
 8002a98:	f7fe f8be 	bl	8000c18 <__aeabi_d2f>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	60fb      	str	r3, [r7, #12]
	i += ki_ * diff * DELTA_T;
 8002aa0:	4b25      	ldr	r3, [pc, #148]	; (8002b38 <_ZN9LineTrace8pidTraceEv+0x110>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7fd fd67 	bl	8000578 <__aeabi_f2d>
 8002aaa:	4604      	mov	r4, r0
 8002aac:	460d      	mov	r5, r1
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8002ab4:	edd7 7a05 	vldr	s15, [r7, #20]
 8002ab8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002abc:	ee17 0a90 	vmov	r0, s15
 8002ac0:	f7fd fd5a 	bl	8000578 <__aeabi_f2d>
 8002ac4:	a31a      	add	r3, pc, #104	; (adr r3, 8002b30 <_ZN9LineTrace8pidTraceEv+0x108>)
 8002ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aca:	f7fd fdad 	bl	8000628 <__aeabi_dmul>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	4620      	mov	r0, r4
 8002ad4:	4629      	mov	r1, r5
 8002ad6:	f7fd fbf1 	bl	80002bc <__adddf3>
 8002ada:	4603      	mov	r3, r0
 8002adc:	460c      	mov	r4, r1
 8002ade:	4618      	mov	r0, r3
 8002ae0:	4621      	mov	r1, r4
 8002ae2:	f7fe f899 	bl	8000c18 <__aeabi_d2f>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	4b13      	ldr	r3, [pc, #76]	; (8002b38 <_ZN9LineTrace8pidTraceEv+0x110>)
 8002aea:	601a      	str	r2, [r3, #0]

	float rotation_ratio = p + d + i;
 8002aec:	ed97 7a04 	vldr	s14, [r7, #16]
 8002af0:	edd7 7a03 	vldr	s15, [r7, #12]
 8002af4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002af8:	4b0f      	ldr	r3, [pc, #60]	; (8002b38 <_ZN9LineTrace8pidTraceEv+0x110>)
 8002afa:	edd3 7a00 	vldr	s15, [r3]
 8002afe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b02:	edc7 7a02 	vstr	s15, [r7, #8]

	//motor_->setRatio(left_ratio, right_ratio);
	velocity_ctrl_->setTranslationVelocityOnly(target_velocity_, rotation_ratio);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	689a      	ldr	r2, [r3, #8]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8002b10:	edd7 0a02 	vldr	s1, [r7, #8]
 8002b14:	eeb0 0a67 	vmov.f32	s0, s15
 8002b18:	4610      	mov	r0, r2
 8002b1a:	f002 fb3d 	bl	8005198 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>

	pre_diff = diff;
 8002b1e:	4a07      	ldr	r2, [pc, #28]	; (8002b3c <_ZN9LineTrace8pidTraceEv+0x114>)
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	6013      	str	r3, [r2, #0]

}
 8002b24:	bf00      	nop
 8002b26:	3718      	adds	r7, #24
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bdb0      	pop	{r4, r5, r7, pc}
 8002b2c:	f3af 8000 	nop.w
 8002b30:	d2f1a9fc 	.word	0xd2f1a9fc
 8002b34:	3f50624d 	.word	0x3f50624d
 8002b38:	20000288 	.word	0x20000288
 8002b3c:	20000284 	.word	0x20000284

08002b40 <_ZN9LineTrace11loggerStartEv>:
	monitor_target_omega = target_omega;
	monitor_r = r;
}

void LineTrace::loggerStart()
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
	encoder_->clearDistance10mm();
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	695b      	ldr	r3, [r3, #20]
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7fe fcab 	bl	80014a8 <_ZN7Encoder17clearDistance10mmEv>
	odometry_->clearPotition();
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	699b      	ldr	r3, [r3, #24]
 8002b56:	4618      	mov	r0, r3
 8002b58:	f001 fdfe 	bl	8004758 <_ZN8Odometry13clearPotitionEv>
	logger_->resetLogs2();
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	69db      	ldr	r3, [r3, #28]
 8002b60:	4618      	mov	r0, r3
 8002b62:	f001 fb29 	bl	80041b8 <_ZN6Logger10resetLogs2Ev>

	logging_flag_ = true;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2201      	movs	r2, #1
 8002b6a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
}
 8002b6e:	bf00      	nop
 8002b70:	3708      	adds	r7, #8
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}

08002b76 <_ZN9LineTrace10loggerStopEv>:

void LineTrace::loggerStop()
{
 8002b76:	b580      	push	{r7, lr}
 8002b78:	b082      	sub	sp, #8
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	6078      	str	r0, [r7, #4]
	logger_->stop();
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	69db      	ldr	r3, [r3, #28]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f001 fb8e 	bl	80042a4 <_ZN6Logger4stopEv>
	logging_flag_ = false;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
}
 8002b90:	bf00      	nop
 8002b92:	3708      	adds	r7, #8
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <_ZN9LineTrace11isCrossLineEv>:

bool LineTrace::isCrossLine()
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
	static uint16_t cnt = 0;
	float sensor_edge_val_l = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2]) / 3;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	ed93 7ab0 	vldr	s14, [r3, #704]	; 0x2c0
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 8002bb0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 8002bbc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bc0:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8002bc4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002bc8:	edc7 7a03 	vstr	s15, [r7, #12]
	float sensor_edge_val_r = (line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]) / 3;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	ed93 7abb 	vldr	s14, [r3, #748]	; 0x2ec
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	edd3 7abc 	vldr	s15, [r3, #752]	; 0x2f0
 8002bdc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	edd3 7abd 	vldr	s15, [r3, #756]	; 0x2f4
 8002be8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bec:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8002bf0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002bf4:	edc7 7a02 	vstr	s15, [r7, #8]
	static bool flag = false;
	static bool white_flag = false;
	mon_ave_l = sensor_edge_val_l;
 8002bf8:	4a3d      	ldr	r2, [pc, #244]	; (8002cf0 <_ZN9LineTrace11isCrossLineEv+0x158>)
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	6013      	str	r3, [r2, #0]
	mon_ave_r = sensor_edge_val_r;
 8002bfe:	4a3d      	ldr	r2, [pc, #244]	; (8002cf4 <_ZN9LineTrace11isCrossLineEv+0x15c>)
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	6013      	str	r3, [r2, #0]

	if(white_flag == false){
 8002c04:	4b3c      	ldr	r3, [pc, #240]	; (8002cf8 <_ZN9LineTrace11isCrossLineEv+0x160>)
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	f083 0301 	eor.w	r3, r3, #1
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d03e      	beq.n	8002c90 <_ZN9LineTrace11isCrossLineEv+0xf8>
		if(sensor_edge_val_l < 600 && sensor_edge_val_r < 600){
 8002c12:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c16:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8002cfc <_ZN9LineTrace11isCrossLineEv+0x164>
 8002c1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c22:	d50f      	bpl.n	8002c44 <_ZN9LineTrace11isCrossLineEv+0xac>
 8002c24:	edd7 7a02 	vldr	s15, [r7, #8]
 8002c28:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8002cfc <_ZN9LineTrace11isCrossLineEv+0x164>
 8002c2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c34:	d506      	bpl.n	8002c44 <_ZN9LineTrace11isCrossLineEv+0xac>
			cnt++;
 8002c36:	4b32      	ldr	r3, [pc, #200]	; (8002d00 <_ZN9LineTrace11isCrossLineEv+0x168>)
 8002c38:	881b      	ldrh	r3, [r3, #0]
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	b29a      	uxth	r2, r3
 8002c3e:	4b30      	ldr	r3, [pc, #192]	; (8002d00 <_ZN9LineTrace11isCrossLineEv+0x168>)
 8002c40:	801a      	strh	r2, [r3, #0]
 8002c42:	e002      	b.n	8002c4a <_ZN9LineTrace11isCrossLineEv+0xb2>
		}
		else{
			cnt = 0;
 8002c44:	4b2e      	ldr	r3, [pc, #184]	; (8002d00 <_ZN9LineTrace11isCrossLineEv+0x168>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	801a      	strh	r2, [r3, #0]
		}

		if(cnt >= 3){
 8002c4a:	4b2d      	ldr	r3, [pc, #180]	; (8002d00 <_ZN9LineTrace11isCrossLineEv+0x168>)
 8002c4c:	881b      	ldrh	r3, [r3, #0]
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d947      	bls.n	8002ce2 <_ZN9LineTrace11isCrossLineEv+0x14a>
			flag = true;
 8002c52:	4b2c      	ldr	r3, [pc, #176]	; (8002d04 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 8002c54:	2201      	movs	r2, #1
 8002c56:	701a      	strb	r2, [r3, #0]
			white_flag = true;
 8002c58:	4b27      	ldr	r3, [pc, #156]	; (8002cf8 <_ZN9LineTrace11isCrossLineEv+0x160>)
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	701a      	strb	r2, [r3, #0]
			cnt = 0;
 8002c5e:	4b28      	ldr	r3, [pc, #160]	; (8002d00 <_ZN9LineTrace11isCrossLineEv+0x168>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	801a      	strh	r2, [r3, #0]

			stable_cnt_reset_flag_ = true; //Because the conditions do not differ between when you tremble and when you do not tremble
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002c6a:	334a      	adds	r3, #74	; 0x4a
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	701a      	strb	r2, [r3, #0]
			if(mode_selector_ == FIRST_RUNNING){
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002c76:	3310      	adds	r3, #16
 8002c78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d103      	bne.n	8002c88 <_ZN9LineTrace11isCrossLineEv+0xf0>
				storeCrossLineDistance();
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f000 ff7b 	bl	8003b7c <_ZN9LineTrace22storeCrossLineDistanceEv>
 8002c86:	e02c      	b.n	8002ce2 <_ZN9LineTrace11isCrossLineEv+0x14a>
			}
			else{
				correctionTotalDistanceFromCrossLine();
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f000 ffe7 	bl	8003c5c <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv>
 8002c8e:	e028      	b.n	8002ce2 <_ZN9LineTrace11isCrossLineEv+0x14a>

			//led_.LR(-1, 1);
		}
	}
	else{
		if(sensor_edge_val_l > 500 && sensor_edge_val_r > 500){
 8002c90:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c94:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8002d08 <_ZN9LineTrace11isCrossLineEv+0x170>
 8002c98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ca0:	dd0f      	ble.n	8002cc2 <_ZN9LineTrace11isCrossLineEv+0x12a>
 8002ca2:	edd7 7a02 	vldr	s15, [r7, #8]
 8002ca6:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8002d08 <_ZN9LineTrace11isCrossLineEv+0x170>
 8002caa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002cae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cb2:	dd06      	ble.n	8002cc2 <_ZN9LineTrace11isCrossLineEv+0x12a>
			cnt++;
 8002cb4:	4b12      	ldr	r3, [pc, #72]	; (8002d00 <_ZN9LineTrace11isCrossLineEv+0x168>)
 8002cb6:	881b      	ldrh	r3, [r3, #0]
 8002cb8:	3301      	adds	r3, #1
 8002cba:	b29a      	uxth	r2, r3
 8002cbc:	4b10      	ldr	r3, [pc, #64]	; (8002d00 <_ZN9LineTrace11isCrossLineEv+0x168>)
 8002cbe:	801a      	strh	r2, [r3, #0]
 8002cc0:	e002      	b.n	8002cc8 <_ZN9LineTrace11isCrossLineEv+0x130>
		}
		else{
			cnt = 0;
 8002cc2:	4b0f      	ldr	r3, [pc, #60]	; (8002d00 <_ZN9LineTrace11isCrossLineEv+0x168>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	801a      	strh	r2, [r3, #0]
		}

		if(cnt >= 10){
 8002cc8:	4b0d      	ldr	r3, [pc, #52]	; (8002d00 <_ZN9LineTrace11isCrossLineEv+0x168>)
 8002cca:	881b      	ldrh	r3, [r3, #0]
 8002ccc:	2b09      	cmp	r3, #9
 8002cce:	d908      	bls.n	8002ce2 <_ZN9LineTrace11isCrossLineEv+0x14a>
			flag = false;
 8002cd0:	4b0c      	ldr	r3, [pc, #48]	; (8002d04 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	701a      	strb	r2, [r3, #0]
			white_flag = false;
 8002cd6:	4b08      	ldr	r3, [pc, #32]	; (8002cf8 <_ZN9LineTrace11isCrossLineEv+0x160>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	701a      	strb	r2, [r3, #0]
			cnt = 0;
 8002cdc:	4b08      	ldr	r3, [pc, #32]	; (8002d00 <_ZN9LineTrace11isCrossLineEv+0x168>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	801a      	strh	r2, [r3, #0]
			//led_.LR(-1, 0);
		}

	}

	return flag;
 8002ce2:	4b08      	ldr	r3, [pc, #32]	; (8002d04 <_ZN9LineTrace11isCrossLineEv+0x16c>)
 8002ce4:	781b      	ldrb	r3, [r3, #0]
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3710      	adds	r7, #16
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	20000268 	.word	0x20000268
 8002cf4:	2000026c 	.word	0x2000026c
 8002cf8:	2000028f 	.word	0x2000028f
 8002cfc:	44160000 	.word	0x44160000
 8002d00:	2000028c 	.word	0x2000028c
 8002d04:	2000028e 	.word	0x2000028e
 8002d08:	43fa0000 	.word	0x43fa0000

08002d0c <_ZN9LineTrace15radius2VelocityEf>:
	if(theta == 0) theta = 0.000001;
	return distance / theta;
}

float LineTrace::radius2Velocity(float radius)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b085      	sub	sp, #20
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	ed87 0a00 	vstr	s0, [r7]
	float velocity;

	if(mode_selector_ == SECOND_RUNNING){
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002d1e:	3310      	adds	r3, #16
 8002d20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d11b      	bne.n	8002d60 <_ZN9LineTrace15radius2VelocityEf+0x54>
		if(radius < 130) velocity = 1.3;
 8002d28:	edd7 7a00 	vldr	s15, [r7]
 8002d2c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8002dc8 <_ZN9LineTrace15radius2VelocityEf+0xbc>
 8002d30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d38:	d502      	bpl.n	8002d40 <_ZN9LineTrace15radius2VelocityEf+0x34>
 8002d3a:	4b24      	ldr	r3, [pc, #144]	; (8002dcc <_ZN9LineTrace15radius2VelocityEf+0xc0>)
 8002d3c:	60fb      	str	r3, [r7, #12]
 8002d3e:	e038      	b.n	8002db2 <_ZN9LineTrace15radius2VelocityEf+0xa6>
		else if(radius < 500) velocity = 1.3;
 8002d40:	edd7 7a00 	vldr	s15, [r7]
 8002d44:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8002dd0 <_ZN9LineTrace15radius2VelocityEf+0xc4>
 8002d48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d50:	d502      	bpl.n	8002d58 <_ZN9LineTrace15radius2VelocityEf+0x4c>
 8002d52:	4b1e      	ldr	r3, [pc, #120]	; (8002dcc <_ZN9LineTrace15radius2VelocityEf+0xc0>)
 8002d54:	60fb      	str	r3, [r7, #12]
 8002d56:	e02c      	b.n	8002db2 <_ZN9LineTrace15radius2VelocityEf+0xa6>
		else velocity = max_velocity_;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d5c:	60fb      	str	r3, [r7, #12]
 8002d5e:	e028      	b.n	8002db2 <_ZN9LineTrace15radius2VelocityEf+0xa6>
	}
	else if(mode_selector_ == THIRD_RUNNING){
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002d66:	3310      	adds	r3, #16
 8002d68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d11e      	bne.n	8002dae <_ZN9LineTrace15radius2VelocityEf+0xa2>
		if(radius < 130) velocity = 1.5;
 8002d70:	edd7 7a00 	vldr	s15, [r7]
 8002d74:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8002dc8 <_ZN9LineTrace15radius2VelocityEf+0xbc>
 8002d78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d80:	d503      	bpl.n	8002d8a <_ZN9LineTrace15radius2VelocityEf+0x7e>
 8002d82:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002d86:	60fb      	str	r3, [r7, #12]
 8002d88:	e013      	b.n	8002db2 <_ZN9LineTrace15radius2VelocityEf+0xa6>
		else if(radius < 500) velocity = 1.5;
 8002d8a:	edd7 7a00 	vldr	s15, [r7]
 8002d8e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8002dd0 <_ZN9LineTrace15radius2VelocityEf+0xc4>
 8002d92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d9a:	d503      	bpl.n	8002da4 <_ZN9LineTrace15radius2VelocityEf+0x98>
 8002d9c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002da0:	60fb      	str	r3, [r7, #12]
 8002da2:	e006      	b.n	8002db2 <_ZN9LineTrace15radius2VelocityEf+0xa6>
		else velocity = max_velocity2_;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002daa:	60fb      	str	r3, [r7, #12]
 8002dac:	e001      	b.n	8002db2 <_ZN9LineTrace15radius2VelocityEf+0xa6>
	}
	else velocity = 1.3;
 8002dae:	4b07      	ldr	r3, [pc, #28]	; (8002dcc <_ZN9LineTrace15radius2VelocityEf+0xc0>)
 8002db0:	60fb      	str	r3, [r7, #12]

	return velocity;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	ee07 3a90 	vmov	s15, r3
}
 8002db8:	eeb0 0a67 	vmov.f32	s0, s15
 8002dbc:	3714      	adds	r7, #20
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop
 8002dc8:	43020000 	.word	0x43020000
 8002dcc:	3fa66666 	.word	0x3fa66666
 8002dd0:	43fa0000 	.word	0x43fa0000
 8002dd4:	00000000 	.word	0x00000000

08002dd8 <_ZN9LineTrace20createVelocityTabeleEv>:

void LineTrace::createVelocityTabele()
{
 8002dd8:	b5b0      	push	{r4, r5, r7, lr}
 8002dda:	b090      	sub	sp, #64	; 0x40
 8002ddc:	af02      	add	r7, sp, #8
 8002dde:	6078      	str	r0, [r7, #4]
	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	69db      	ldr	r3, [r3, #28]
 8002de4:	4618      	mov	r0, r3
 8002de6:	f001 f942 	bl	800406e <_ZN6Logger23getDistanceArrayPointerEv>
 8002dea:	6278      	str	r0, [r7, #36]	; 0x24
	p_theta= logger_->getThetaArrayPointer();
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	69db      	ldr	r3, [r3, #28]
 8002df0:	4618      	mov	r0, r3
 8002df2:	f001 f948 	bl	8004086 <_ZN6Logger20getThetaArrayPointerEv>
 8002df6:	6238      	str	r0, [r7, #32]

	float temp_distance, temp_theta;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002df8:	2300      	movs	r3, #0
 8002dfa:	867b      	strh	r3, [r7, #50]	; 0x32
 8002dfc:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8002dfe:	f241 726f 	movw	r2, #5999	; 0x176f
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d84b      	bhi.n	8002e9e <_ZN9LineTrace20createVelocityTabeleEv+0xc6>
		temp_distance = p_distance[i];
 8002e06:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e0c:	4413      	add	r3, r2
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	61fb      	str	r3, [r7, #28]
		temp_theta = p_theta[i];
 8002e12:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	6a3a      	ldr	r2, [r7, #32]
 8002e18:	4413      	add	r3, r2
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	637b      	str	r3, [r7, #52]	; 0x34

		if(temp_theta == 0) temp_theta = 0.00001;
 8002e1e:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002e22:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002e26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e2a:	d101      	bne.n	8002e30 <_ZN9LineTrace20createVelocityTabeleEv+0x58>
 8002e2c:	4b64      	ldr	r3, [pc, #400]	; (8002fc0 <_ZN9LineTrace20createVelocityTabeleEv+0x1e8>)
 8002e2e:	637b      	str	r3, [r7, #52]	; 0x34
		float radius = abs(temp_distance / temp_theta);
 8002e30:	ed97 7a07 	vldr	s14, [r7, #28]
 8002e34:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002e38:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002e3c:	eeb0 0a66 	vmov.f32	s0, s13
 8002e40:	f7ff fc6e 	bl	8002720 <_ZSt3absf>
 8002e44:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
		if(radius >= 5000) radius = 5000;
 8002e48:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002e4c:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8002fc4 <_ZN9LineTrace20createVelocityTabeleEv+0x1ec>
 8002e50:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e58:	db01      	blt.n	8002e5e <_ZN9LineTrace20createVelocityTabeleEv+0x86>
 8002e5a:	4b5b      	ldr	r3, [pc, #364]	; (8002fc8 <_ZN9LineTrace20createVelocityTabeleEv+0x1f0>)
 8002e5c:	62fb      	str	r3, [r7, #44]	; 0x2c

		velocity_table_[i] = radius2Velocity(radius);
 8002e5e:	8e7c      	ldrh	r4, [r7, #50]	; 0x32
 8002e60:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f7ff ff51 	bl	8002d0c <_ZN9LineTrace15radius2VelocityEf>
 8002e6a:	eef0 7a40 	vmov.f32	s15, s0
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	f504 53bc 	add.w	r3, r4, #6016	; 0x1780
 8002e74:	3312      	adds	r3, #18
 8002e76:	009b      	lsls	r3, r3, #2
 8002e78:	4413      	add	r3, r2
 8002e7a:	3304      	adds	r3, #4
 8002e7c:	edc3 7a00 	vstr	s15, [r3]
		//velocity_table_[i] = radius;

		ref_delta_distances_[i] = p_distance[i]; //copy
 8002e80:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e86:	441a      	add	r2, r3
 8002e88:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8002e8a:	6812      	ldr	r2, [r2, #0]
 8002e8c:	6879      	ldr	r1, [r7, #4]
 8002e8e:	3322      	adds	r3, #34	; 0x22
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	440b      	add	r3, r1
 8002e94:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002e96:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8002e98:	3301      	adds	r3, #1
 8002e9a:	867b      	strh	r3, [r7, #50]	; 0x32
 8002e9c:	e7ae      	b.n	8002dfc <_ZN9LineTrace20createVelocityTabeleEv+0x24>
	}

	// ----- Decelerate processing -----//
	float am = 0.005;
 8002e9e:	4b4b      	ldr	r3, [pc, #300]	; (8002fcc <_ZN9LineTrace20createVelocityTabeleEv+0x1f4>)
 8002ea0:	61bb      	str	r3, [r7, #24]
	for(uint16_t i = LOG_DATA_SIZE_DIS - 1; i >= 1; i--){
 8002ea2:	f241 736f 	movw	r3, #5999	; 0x176f
 8002ea6:	857b      	strh	r3, [r7, #42]	; 0x2a
 8002ea8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d073      	beq.n	8002f96 <_ZN9LineTrace20createVelocityTabeleEv+0x1be>
		float v_diff = velocity_table_[i-1] - velocity_table_[i];
 8002eae:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002eb0:	3b01      	subs	r3, #1
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 8002eb8:	3312      	adds	r3, #18
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	4413      	add	r3, r2
 8002ebe:	3304      	adds	r3, #4
 8002ec0:	ed93 7a00 	vldr	s14, [r3]
 8002ec4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 8002ecc:	3312      	adds	r3, #18
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	4413      	add	r3, r2
 8002ed2:	3304      	adds	r3, #4
 8002ed4:	edd3 7a00 	vldr	s15, [r3]
 8002ed8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002edc:	edc7 7a05 	vstr	s15, [r7, #20]
		if(v_diff > 0){
 8002ee0:	edd7 7a05 	vldr	s15, [r7, #20]
 8002ee4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002ee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eec:	dd4f      	ble.n	8002f8e <_ZN9LineTrace20createVelocityTabeleEv+0x1b6>
			float t = p_distance[i]*10e-3 / v_diff;
 8002eee:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ef4:	4413      	add	r3, r2
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f7fd fb3d 	bl	8000578 <__aeabi_f2d>
 8002efe:	a32e      	add	r3, pc, #184	; (adr r3, 8002fb8 <_ZN9LineTrace20createVelocityTabeleEv+0x1e0>)
 8002f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f04:	f7fd fb90 	bl	8000628 <__aeabi_dmul>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	460c      	mov	r4, r1
 8002f0c:	4625      	mov	r5, r4
 8002f0e:	461c      	mov	r4, r3
 8002f10:	6978      	ldr	r0, [r7, #20]
 8002f12:	f7fd fb31 	bl	8000578 <__aeabi_f2d>
 8002f16:	4602      	mov	r2, r0
 8002f18:	460b      	mov	r3, r1
 8002f1a:	4620      	mov	r0, r4
 8002f1c:	4629      	mov	r1, r5
 8002f1e:	f7fd fcad 	bl	800087c <__aeabi_ddiv>
 8002f22:	4603      	mov	r3, r0
 8002f24:	460c      	mov	r4, r1
 8002f26:	4618      	mov	r0, r3
 8002f28:	4621      	mov	r1, r4
 8002f2a:	f7fd fe75 	bl	8000c18 <__aeabi_d2f>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	613b      	str	r3, [r7, #16]
			float a = v_diff / t;
 8002f32:	edd7 6a05 	vldr	s13, [r7, #20]
 8002f36:	ed97 7a04 	vldr	s14, [r7, #16]
 8002f3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f3e:	edc7 7a03 	vstr	s15, [r7, #12]
			if(a > am){
 8002f42:	ed97 7a03 	vldr	s14, [r7, #12]
 8002f46:	edd7 7a06 	vldr	s15, [r7, #24]
 8002f4a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f52:	dd1c      	ble.n	8002f8e <_ZN9LineTrace20createVelocityTabeleEv+0x1b6>
				velocity_table_[i-1] = velocity_table_[i] + am * t;
 8002f54:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 8002f5c:	3312      	adds	r3, #18
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	4413      	add	r3, r2
 8002f62:	3304      	adds	r3, #4
 8002f64:	ed93 7a00 	vldr	s14, [r3]
 8002f68:	edd7 6a06 	vldr	s13, [r7, #24]
 8002f6c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002f70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f74:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002f76:	3b01      	subs	r3, #1
 8002f78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 8002f82:	3312      	adds	r3, #18
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	4413      	add	r3, r2
 8002f88:	3304      	adds	r3, #4
 8002f8a:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = LOG_DATA_SIZE_DIS - 1; i >= 1; i--){
 8002f8e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002f90:	3b01      	subs	r3, #1
 8002f92:	857b      	strh	r3, [r7, #42]	; 0x2a
 8002f94:	e788      	b.n	8002ea8 <_ZN9LineTrace20createVelocityTabeleEv+0xd0>





	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 8002f9c:	334c      	adds	r3, #76	; 0x4c
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	9200      	str	r2, [sp, #0]
 8002fa2:	f241 7270 	movw	r2, #6000	; 0x1770
 8002fa6:	490a      	ldr	r1, [pc, #40]	; (8002fd0 <_ZN9LineTrace20createVelocityTabeleEv+0x1f8>)
 8002fa8:	480a      	ldr	r0, [pc, #40]	; (8002fd4 <_ZN9LineTrace20createVelocityTabeleEv+0x1fc>)
 8002faa:	f7fe fb2b 	bl	8001604 <sd_write_array_float>

}
 8002fae:	bf00      	nop
 8002fb0:	3738      	adds	r7, #56	; 0x38
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bdb0      	pop	{r4, r5, r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	47ae147b 	.word	0x47ae147b
 8002fbc:	3f847ae1 	.word	0x3f847ae1
 8002fc0:	3727c5ac 	.word	0x3727c5ac
 8002fc4:	459c4000 	.word	0x459c4000
 8002fc8:	459c4000 	.word	0x459c4000
 8002fcc:	3ba3d70a 	.word	0x3ba3d70a
 8002fd0:	080182d4 	.word	0x080182d4
 8002fd4:	080182e4 	.word	0x080182e4

08002fd8 <_ZN9LineTrace26createVelocityTabeleFromSDEv>:

float mon_a;
void LineTrace::createVelocityTabeleFromSD()
{
 8002fd8:	b5b0      	push	{r4, r5, r7, lr}
 8002fda:	b090      	sub	sp, #64	; 0x40
 8002fdc:	af02      	add	r7, sp, #8
 8002fde:	6078      	str	r0, [r7, #4]
	logger_->importDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	69d8      	ldr	r0, [r3, #28]
 8002fe4:	4b7e      	ldr	r3, [pc, #504]	; (80031e0 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x208>)
 8002fe6:	4a7f      	ldr	r2, [pc, #508]	; (80031e4 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x20c>)
 8002fe8:	497f      	ldr	r1, [pc, #508]	; (80031e8 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x210>)
 8002fea:	f001 f8c8 	bl	800417e <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>
	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	69db      	ldr	r3, [r3, #28]
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f001 f83b 	bl	800406e <_ZN6Logger23getDistanceArrayPointerEv>
 8002ff8:	6278      	str	r0, [r7, #36]	; 0x24
	p_theta= logger_->getThetaArrayPointer();
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	69db      	ldr	r3, [r3, #28]
 8002ffe:	4618      	mov	r0, r3
 8003000:	f001 f841 	bl	8004086 <_ZN6Logger20getThetaArrayPointerEv>
 8003004:	6238      	str	r0, [r7, #32]

	float temp_distance, temp_theta;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8003006:	2300      	movs	r3, #0
 8003008:	867b      	strh	r3, [r7, #50]	; 0x32
 800300a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800300c:	f241 726f 	movw	r2, #5999	; 0x176f
 8003010:	4293      	cmp	r3, r2
 8003012:	d84b      	bhi.n	80030ac <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xd4>
		temp_distance = p_distance[i];
 8003014:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800301a:	4413      	add	r3, r2
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	61fb      	str	r3, [r7, #28]
		temp_theta = p_theta[i];
 8003020:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	6a3a      	ldr	r2, [r7, #32]
 8003026:	4413      	add	r3, r2
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	637b      	str	r3, [r7, #52]	; 0x34

		if(temp_theta == 0) temp_theta = 0.00001;
 800302c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003030:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003038:	d101      	bne.n	800303e <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x66>
 800303a:	4b6c      	ldr	r3, [pc, #432]	; (80031ec <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x214>)
 800303c:	637b      	str	r3, [r7, #52]	; 0x34
		float radius = abs(temp_distance / temp_theta);
 800303e:	ed97 7a07 	vldr	s14, [r7, #28]
 8003042:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003046:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800304a:	eeb0 0a66 	vmov.f32	s0, s13
 800304e:	f7ff fb67 	bl	8002720 <_ZSt3absf>
 8003052:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
		if(radius >= 5000) radius = 5000;
 8003056:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800305a:	ed9f 7a65 	vldr	s14, [pc, #404]	; 80031f0 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x218>
 800305e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003066:	db01      	blt.n	800306c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x94>
 8003068:	4b62      	ldr	r3, [pc, #392]	; (80031f4 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x21c>)
 800306a:	62fb      	str	r3, [r7, #44]	; 0x2c

		velocity_table_[i] = radius2Velocity(radius);
 800306c:	8e7c      	ldrh	r4, [r7, #50]	; 0x32
 800306e:	ed97 0a0b 	vldr	s0, [r7, #44]	; 0x2c
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f7ff fe4a 	bl	8002d0c <_ZN9LineTrace15radius2VelocityEf>
 8003078:	eef0 7a40 	vmov.f32	s15, s0
 800307c:	687a      	ldr	r2, [r7, #4]
 800307e:	f504 53bc 	add.w	r3, r4, #6016	; 0x1780
 8003082:	3312      	adds	r3, #18
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	4413      	add	r3, r2
 8003088:	3304      	adds	r3, #4
 800308a:	edc3 7a00 	vstr	s15, [r3]
		//velocity_table_[i] = radius;

		ref_delta_distances_[i] = p_distance[i]; //copy
 800308e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003094:	441a      	add	r2, r3
 8003096:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003098:	6812      	ldr	r2, [r2, #0]
 800309a:	6879      	ldr	r1, [r7, #4]
 800309c:	3322      	adds	r3, #34	; 0x22
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	440b      	add	r3, r1
 80030a2:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 80030a4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80030a6:	3301      	adds	r3, #1
 80030a8:	867b      	strh	r3, [r7, #50]	; 0x32
 80030aa:	e7ae      	b.n	800300a <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x32>
	}

	// ----- Decelerate processing -----//
	float am = 0.005;
 80030ac:	4b52      	ldr	r3, [pc, #328]	; (80031f8 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x220>)
 80030ae:	61bb      	str	r3, [r7, #24]
	for(uint16_t i = LOG_DATA_SIZE_DIS - 1; i >= 1; i--){
 80030b0:	f241 736f 	movw	r3, #5999	; 0x176f
 80030b4:	857b      	strh	r3, [r7, #42]	; 0x2a
 80030b6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d07d      	beq.n	80031b8 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1e0>
		float v_diff = velocity_table_[i-1] - velocity_table_[i];
 80030bc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80030be:	3b01      	subs	r3, #1
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 80030c6:	3312      	adds	r3, #18
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	4413      	add	r3, r2
 80030cc:	3304      	adds	r3, #4
 80030ce:	ed93 7a00 	vldr	s14, [r3]
 80030d2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 80030da:	3312      	adds	r3, #18
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	4413      	add	r3, r2
 80030e0:	3304      	adds	r3, #4
 80030e2:	edd3 7a00 	vldr	s15, [r3]
 80030e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030ea:	edc7 7a05 	vstr	s15, [r7, #20]

		if(v_diff > 0){
 80030ee:	edd7 7a05 	vldr	s15, [r7, #20]
 80030f2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80030f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030fa:	dd56      	ble.n	80031aa <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d2>
			float t = p_distance[i]*10e-3 / v_diff;
 80030fc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003102:	4413      	add	r3, r2
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4618      	mov	r0, r3
 8003108:	f7fd fa36 	bl	8000578 <__aeabi_f2d>
 800310c:	a332      	add	r3, pc, #200	; (adr r3, 80031d8 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x200>)
 800310e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003112:	f7fd fa89 	bl	8000628 <__aeabi_dmul>
 8003116:	4603      	mov	r3, r0
 8003118:	460c      	mov	r4, r1
 800311a:	4625      	mov	r5, r4
 800311c:	461c      	mov	r4, r3
 800311e:	6978      	ldr	r0, [r7, #20]
 8003120:	f7fd fa2a 	bl	8000578 <__aeabi_f2d>
 8003124:	4602      	mov	r2, r0
 8003126:	460b      	mov	r3, r1
 8003128:	4620      	mov	r0, r4
 800312a:	4629      	mov	r1, r5
 800312c:	f7fd fba6 	bl	800087c <__aeabi_ddiv>
 8003130:	4603      	mov	r3, r0
 8003132:	460c      	mov	r4, r1
 8003134:	4618      	mov	r0, r3
 8003136:	4621      	mov	r1, r4
 8003138:	f7fd fd6e 	bl	8000c18 <__aeabi_d2f>
 800313c:	4603      	mov	r3, r0
 800313e:	613b      	str	r3, [r7, #16]
			float a = v_diff / t;
 8003140:	edd7 6a05 	vldr	s13, [r7, #20]
 8003144:	ed97 7a04 	vldr	s14, [r7, #16]
 8003148:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800314c:	edc7 7a03 	vstr	s15, [r7, #12]
			mon_a = a;
 8003150:	4a2a      	ldr	r2, [pc, #168]	; (80031fc <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x224>)
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	6013      	str	r3, [r2, #0]
			if(a > am){
 8003156:	ed97 7a03 	vldr	s14, [r7, #12]
 800315a:	edd7 7a06 	vldr	s15, [r7, #24]
 800315e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003166:	dd1c      	ble.n	80031a2 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1ca>
				velocity_table_[i-1] = velocity_table_[i] + am * t;
 8003168:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 8003170:	3312      	adds	r3, #18
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	4413      	add	r3, r2
 8003176:	3304      	adds	r3, #4
 8003178:	ed93 7a00 	vldr	s14, [r3]
 800317c:	edd7 6a06 	vldr	s13, [r7, #24]
 8003180:	edd7 7a04 	vldr	s15, [r7, #16]
 8003184:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003188:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800318a:	3b01      	subs	r3, #1
 800318c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 8003196:	3312      	adds	r3, #18
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	4413      	add	r3, r2
 800319c:	3304      	adds	r3, #4
 800319e:	edc3 7a00 	vstr	s15, [r3]
			}
			mon_a = 0;
 80031a2:	4b16      	ldr	r3, [pc, #88]	; (80031fc <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x224>)
 80031a4:	f04f 0200 	mov.w	r2, #0
 80031a8:	601a      	str	r2, [r3, #0]

		}
		HAL_Delay(0.5);
 80031aa:	2000      	movs	r0, #0
 80031ac:	f005 f8ee 	bl	800838c <HAL_Delay>
	for(uint16_t i = LOG_DATA_SIZE_DIS - 1; i >= 1; i--){
 80031b0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80031b2:	3b01      	subs	r3, #1
 80031b4:	857b      	strh	r3, [r7, #42]	; 0x2a
 80031b6:	e77e      	b.n	80030b6 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xde>

	}
	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 80031be:	334c      	adds	r3, #76	; 0x4c
 80031c0:	2200      	movs	r2, #0
 80031c2:	9200      	str	r2, [sp, #0]
 80031c4:	f241 7270 	movw	r2, #6000	; 0x1770
 80031c8:	490d      	ldr	r1, [pc, #52]	; (8003200 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x228>)
 80031ca:	4807      	ldr	r0, [pc, #28]	; (80031e8 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x210>)
 80031cc:	f7fe fa1a 	bl	8001604 <sd_write_array_float>

}
 80031d0:	bf00      	nop
 80031d2:	3738      	adds	r7, #56	; 0x38
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bdb0      	pop	{r4, r5, r7, pc}
 80031d8:	47ae147b 	.word	0x47ae147b
 80031dc:	3f847ae1 	.word	0x3f847ae1
 80031e0:	080182f0 	.word	0x080182f0
 80031e4:	080182fc 	.word	0x080182fc
 80031e8:	080182e4 	.word	0x080182e4
 80031ec:	3727c5ac 	.word	0x3727c5ac
 80031f0:	459c4000 	.word	0x459c4000
 80031f4:	459c4000 	.word	0x459c4000
 80031f8:	3ba3d70a 	.word	0x3ba3d70a
 80031fc:	20000290 	.word	0x20000290
 8003200:	080182d4 	.word	0x080182d4

08003204 <_ZN9LineTrace20updateTargetVelocityEv>:

void LineTrace::updateTargetVelocity()
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b082      	sub	sp, #8
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
	if(velocity_play_flag_ == true){
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003212:	330c      	adds	r3, #12
 8003214:	781b      	ldrb	r3, [r3, #0]
 8003216:	2b00      	cmp	r3, #0
 8003218:	f000 8087 	beq.w	800332a <_ZN9LineTrace20updateTargetVelocityEv+0x126>
		//if(encoder_->getTotalDistance() >= ref_distance_){
			while(encoder_->getTotalDistance() >= ref_distance_){
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	695b      	ldr	r3, [r3, #20]
 8003220:	4618      	mov	r0, r3
 8003222:	f7fe f923 	bl	800146c <_ZN7Encoder16getTotalDistanceEv>
 8003226:	eeb0 7a40 	vmov.f32	s14, s0
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 8003230:	3348      	adds	r3, #72	; 0x48
 8003232:	edd3 7a00 	vldr	s15, [r3]
 8003236:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800323a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800323e:	bfac      	ite	ge
 8003240:	2301      	movge	r3, #1
 8003242:	2300      	movlt	r3, #0
 8003244:	b2db      	uxtb	r3, r3
 8003246:	2b00      	cmp	r3, #0
 8003248:	d025      	beq.n	8003296 <_ZN9LineTrace20updateTargetVelocityEv+0x92>
				ref_distance_ += ref_delta_distances_[velocity_table_idx_];
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 8003250:	3348      	adds	r3, #72	; 0x48
 8003252:	ed93 7a00 	vldr	s14, [r3]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800325c:	330e      	adds	r3, #14
 800325e:	881b      	ldrh	r3, [r3, #0]
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	3322      	adds	r3, #34	; 0x22
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	4413      	add	r3, r2
 8003268:	edd3 7a00 	vldr	s15, [r3]
 800326c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 8003276:	3348      	adds	r3, #72	; 0x48
 8003278:	edc3 7a00 	vstr	s15, [r3]
				velocity_table_idx_++;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003282:	330e      	adds	r3, #14
 8003284:	881b      	ldrh	r3, [r3, #0]
 8003286:	3301      	adds	r3, #1
 8003288:	b29a      	uxth	r2, r3
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003290:	330e      	adds	r3, #14
 8003292:	801a      	strh	r2, [r3, #0]
			while(encoder_->getTotalDistance() >= ref_distance_){
 8003294:	e7c2      	b.n	800321c <_ZN9LineTrace20updateTargetVelocityEv+0x18>
			}
		//}

		if(velocity_table_idx_ >= LOG_DATA_SIZE_DIS) velocity_table_idx_ = LOG_DATA_SIZE_DIS - 1;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800329c:	330e      	adds	r3, #14
 800329e:	881b      	ldrh	r3, [r3, #0]
 80032a0:	f241 726f 	movw	r2, #5999	; 0x176f
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d906      	bls.n	80032b6 <_ZN9LineTrace20updateTargetVelocityEv+0xb2>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80032ae:	330e      	adds	r3, #14
 80032b0:	f241 726f 	movw	r2, #5999	; 0x176f
 80032b4:	801a      	strh	r2, [r3, #0]

		mon_ref_dis = ref_distance_;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 80032bc:	3348      	adds	r3, #72	; 0x48
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a1c      	ldr	r2, [pc, #112]	; (8003334 <_ZN9LineTrace20updateTargetVelocityEv+0x130>)
 80032c2:	6013      	str	r3, [r2, #0]
		mon_current_dis = encoder_->getTotalDistance();
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	695b      	ldr	r3, [r3, #20]
 80032c8:	4618      	mov	r0, r3
 80032ca:	f7fe f8cf 	bl	800146c <_ZN7Encoder16getTotalDistanceEv>
 80032ce:	eef0 7a40 	vmov.f32	s15, s0
 80032d2:	4b19      	ldr	r3, [pc, #100]	; (8003338 <_ZN9LineTrace20updateTargetVelocityEv+0x134>)
 80032d4:	edc3 7a00 	vstr	s15, [r3]
		mon_vel_idx = velocity_table_idx_;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80032de:	330e      	adds	r3, #14
 80032e0:	881a      	ldrh	r2, [r3, #0]
 80032e2:	4b16      	ldr	r3, [pc, #88]	; (800333c <_ZN9LineTrace20updateTargetVelocityEv+0x138>)
 80032e4:	801a      	strh	r2, [r3, #0]

		setTargetVelocity(velocity_table_[velocity_table_idx_]);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80032ec:	330e      	adds	r3, #14
 80032ee:	881b      	ldrh	r3, [r3, #0]
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 80032f6:	3312      	adds	r3, #18
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	4413      	add	r3, r2
 80032fc:	3304      	adds	r3, #4
 80032fe:	edd3 7a00 	vldr	s15, [r3]
 8003302:	eeb0 0a67 	vmov.f32	s0, s15
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f000 f947 	bl	800359a <_ZN9LineTrace17setTargetVelocityEf>

		mon_tar_vel = velocity_table_[velocity_table_idx_];
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003312:	330e      	adds	r3, #14
 8003314:	881b      	ldrh	r3, [r3, #0]
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	f503 53bc 	add.w	r3, r3, #6016	; 0x1780
 800331c:	3312      	adds	r3, #18
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	4413      	add	r3, r2
 8003322:	3304      	adds	r3, #4
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a06      	ldr	r2, [pc, #24]	; (8003340 <_ZN9LineTrace20updateTargetVelocityEv+0x13c>)
 8003328:	6013      	str	r3, [r2, #0]

	}
}
 800332a:	bf00      	nop
 800332c:	3708      	adds	r7, #8
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	20000270 	.word	0x20000270
 8003338:	20000274 	.word	0x20000274
 800333c:	20000278 	.word	0x20000278
 8003340:	2000027c 	.word	0x2000027c

08003344 <_ZN9LineTrace8isStableEv>:

bool LineTrace::isStable()
{
 8003344:	b590      	push	{r4, r7, lr}
 8003346:	b087      	sub	sp, #28
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
	bool ret = false;
 800334c:	2300      	movs	r3, #0
 800334e:	75fb      	strb	r3, [r7, #23]
	static uint16_t stable_cnt = 0;
	float temp_distance = encoder_->getDistance10mm();
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	695b      	ldr	r3, [r3, #20]
 8003354:	4618      	mov	r0, r3
 8003356:	f7fe f87a 	bl	800144e <_ZN7Encoder15getDistance10mmEv>
 800335a:	ed87 0a02 	vstr	s0, [r7, #8]
	float temp_theta = odometry_->getTheta();;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	699b      	ldr	r3, [r3, #24]
 8003362:	4618      	mov	r0, r3
 8003364:	f001 f9e7 	bl	8004736 <_ZN8Odometry8getThetaEv>
 8003368:	ec54 3b10 	vmov	r3, r4, d0
 800336c:	4618      	mov	r0, r3
 800336e:	4621      	mov	r1, r4
 8003370:	f7fd fc52 	bl	8000c18 <__aeabi_d2f>
 8003374:	4603      	mov	r3, r0
 8003376:	613b      	str	r3, [r7, #16]

	if(temp_theta == 0) temp_theta = 0.00001;
 8003378:	edd7 7a04 	vldr	s15, [r7, #16]
 800337c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003384:	d101      	bne.n	800338a <_ZN9LineTrace8isStableEv+0x46>
 8003386:	4b23      	ldr	r3, [pc, #140]	; (8003414 <_ZN9LineTrace8isStableEv+0xd0>)
 8003388:	613b      	str	r3, [r7, #16]
	float radius = abs(temp_distance / temp_theta);
 800338a:	ed97 7a02 	vldr	s14, [r7, #8]
 800338e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003392:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003396:	eeb0 0a66 	vmov.f32	s0, s13
 800339a:	f7ff f9c1 	bl	8002720 <_ZSt3absf>
 800339e:	ed87 0a03 	vstr	s0, [r7, #12]
	if(radius >= 5000) radius = 5000;
 80033a2:	edd7 7a03 	vldr	s15, [r7, #12]
 80033a6:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8003418 <_ZN9LineTrace8isStableEv+0xd4>
 80033aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033b2:	db01      	blt.n	80033b8 <_ZN9LineTrace8isStableEv+0x74>
 80033b4:	4b19      	ldr	r3, [pc, #100]	; (800341c <_ZN9LineTrace8isStableEv+0xd8>)
 80033b6:	60fb      	str	r3, [r7, #12]

	if(stable_cnt_reset_flag_ == true){
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80033be:	334a      	adds	r3, #74	; 0x4a
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d008      	beq.n	80033d8 <_ZN9LineTrace8isStableEv+0x94>
		stable_cnt = 0;
 80033c6:	4b16      	ldr	r3, [pc, #88]	; (8003420 <_ZN9LineTrace8isStableEv+0xdc>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	801a      	strh	r2, [r3, #0]
		stable_cnt_reset_flag_ = false;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80033d2:	334a      	adds	r3, #74	; 0x4a
 80033d4:	2200      	movs	r2, #0
 80033d6:	701a      	strb	r2, [r3, #0]
	}

	if(radius >= 2000){ //150
 80033d8:	edd7 7a03 	vldr	s15, [r7, #12]
 80033dc:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8003424 <_ZN9LineTrace8isStableEv+0xe0>
 80033e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033e8:	db06      	blt.n	80033f8 <_ZN9LineTrace8isStableEv+0xb4>
		stable_cnt++;
 80033ea:	4b0d      	ldr	r3, [pc, #52]	; (8003420 <_ZN9LineTrace8isStableEv+0xdc>)
 80033ec:	881b      	ldrh	r3, [r3, #0]
 80033ee:	3301      	adds	r3, #1
 80033f0:	b29a      	uxth	r2, r3
 80033f2:	4b0b      	ldr	r3, [pc, #44]	; (8003420 <_ZN9LineTrace8isStableEv+0xdc>)
 80033f4:	801a      	strh	r2, [r3, #0]
 80033f6:	e002      	b.n	80033fe <_ZN9LineTrace8isStableEv+0xba>
	}
	else{
		stable_cnt = 0;
 80033f8:	4b09      	ldr	r3, [pc, #36]	; (8003420 <_ZN9LineTrace8isStableEv+0xdc>)
 80033fa:	2200      	movs	r2, #0
 80033fc:	801a      	strh	r2, [r3, #0]
	}

	if(stable_cnt >= 23){ //230mm
 80033fe:	4b08      	ldr	r3, [pc, #32]	; (8003420 <_ZN9LineTrace8isStableEv+0xdc>)
 8003400:	881b      	ldrh	r3, [r3, #0]
 8003402:	2b16      	cmp	r3, #22
 8003404:	d901      	bls.n	800340a <_ZN9LineTrace8isStableEv+0xc6>
		ret = true;
 8003406:	2301      	movs	r3, #1
 8003408:	75fb      	strb	r3, [r7, #23]
	}

	return ret;
 800340a:	7dfb      	ldrb	r3, [r7, #23]
}
 800340c:	4618      	mov	r0, r3
 800340e:	371c      	adds	r7, #28
 8003410:	46bd      	mov	sp, r7
 8003412:	bd90      	pop	{r4, r7, pc}
 8003414:	3727c5ac 	.word	0x3727c5ac
 8003418:	459c4000 	.word	0x459c4000
 800341c:	459c4000 	.word	0x459c4000
 8003420:	20000294 	.word	0x20000294
 8003424:	44fa0000 	.word	0x44fa0000

08003428 <_ZN9LineTrace4initEv>:

// -------public---------- //
void LineTrace::init()
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b088      	sub	sp, #32
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
	float temp_kp, temp_ki, temp_kd;
	sd_read_array_float("PARAMS", "KP.TXT", 1, &temp_kp);
 8003430:	f107 031c 	add.w	r3, r7, #28
 8003434:	2201      	movs	r2, #1
 8003436:	4927      	ldr	r1, [pc, #156]	; (80034d4 <_ZN9LineTrace4initEv+0xac>)
 8003438:	4827      	ldr	r0, [pc, #156]	; (80034d8 <_ZN9LineTrace4initEv+0xb0>)
 800343a:	f7fe f949 	bl	80016d0 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KI.TXT", 1, &temp_ki);
 800343e:	f107 0318 	add.w	r3, r7, #24
 8003442:	2201      	movs	r2, #1
 8003444:	4925      	ldr	r1, [pc, #148]	; (80034dc <_ZN9LineTrace4initEv+0xb4>)
 8003446:	4824      	ldr	r0, [pc, #144]	; (80034d8 <_ZN9LineTrace4initEv+0xb0>)
 8003448:	f7fe f942 	bl	80016d0 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KD.TXT", 1, &temp_kd);
 800344c:	f107 0314 	add.w	r3, r7, #20
 8003450:	2201      	movs	r2, #1
 8003452:	4923      	ldr	r1, [pc, #140]	; (80034e0 <_ZN9LineTrace4initEv+0xb8>)
 8003454:	4820      	ldr	r0, [pc, #128]	; (80034d8 <_ZN9LineTrace4initEv+0xb0>)
 8003456:	f7fe f93b 	bl	80016d0 <sd_read_array_float>
	setGain(temp_kp, temp_ki, temp_kd);
 800345a:	edd7 7a07 	vldr	s15, [r7, #28]
 800345e:	ed97 7a06 	vldr	s14, [r7, #24]
 8003462:	edd7 6a05 	vldr	s13, [r7, #20]
 8003466:	eeb0 1a66 	vmov.f32	s2, s13
 800346a:	eef0 0a47 	vmov.f32	s1, s14
 800346e:	eeb0 0a67 	vmov.f32	s0, s15
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f000 f83c 	bl	80034f0 <_ZN9LineTrace7setGainEfff>

	float temp_velocity, temp_max_velocity, temp_max_velocity2;
	sd_read_array_float("PARAMS", "TARVEL1.TXT", 1, &temp_velocity);
 8003478:	f107 0310 	add.w	r3, r7, #16
 800347c:	2201      	movs	r2, #1
 800347e:	4919      	ldr	r1, [pc, #100]	; (80034e4 <_ZN9LineTrace4initEv+0xbc>)
 8003480:	4815      	ldr	r0, [pc, #84]	; (80034d8 <_ZN9LineTrace4initEv+0xb0>)
 8003482:	f7fe f925 	bl	80016d0 <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL2.TXT", 1, &temp_max_velocity);
 8003486:	f107 030c 	add.w	r3, r7, #12
 800348a:	2201      	movs	r2, #1
 800348c:	4916      	ldr	r1, [pc, #88]	; (80034e8 <_ZN9LineTrace4initEv+0xc0>)
 800348e:	4812      	ldr	r0, [pc, #72]	; (80034d8 <_ZN9LineTrace4initEv+0xb0>)
 8003490:	f7fe f91e 	bl	80016d0 <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL3.TXT", 1, &temp_max_velocity2);
 8003494:	f107 0308 	add.w	r3, r7, #8
 8003498:	2201      	movs	r2, #1
 800349a:	4914      	ldr	r1, [pc, #80]	; (80034ec <_ZN9LineTrace4initEv+0xc4>)
 800349c:	480e      	ldr	r0, [pc, #56]	; (80034d8 <_ZN9LineTrace4initEv+0xb0>)
 800349e:	f7fe f917 	bl	80016d0 <sd_read_array_float>
	setTargetVelocity(temp_velocity);
 80034a2:	edd7 7a04 	vldr	s15, [r7, #16]
 80034a6:	eeb0 0a67 	vmov.f32	s0, s15
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f000 f875 	bl	800359a <_ZN9LineTrace17setTargetVelocityEf>
	setMaxVelocity(temp_max_velocity);
 80034b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80034b4:	eeb0 0a67 	vmov.f32	s0, s15
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f000 f87d 	bl	80035b8 <_ZN9LineTrace14setMaxVelocityEf>
	setMaxVelocity2(temp_max_velocity2);
 80034be:	edd7 7a02 	vldr	s15, [r7, #8]
 80034c2:	eeb0 0a67 	vmov.f32	s0, s15
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f000 f885 	bl	80035d6 <_ZN9LineTrace15setMaxVelocity2Ef>
}
 80034cc:	bf00      	nop
 80034ce:	3720      	adds	r7, #32
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	0801830c 	.word	0x0801830c
 80034d8:	08018314 	.word	0x08018314
 80034dc:	0801831c 	.word	0x0801831c
 80034e0:	08018324 	.word	0x08018324
 80034e4:	0801832c 	.word	0x0801832c
 80034e8:	08018338 	.word	0x08018338
 80034ec:	08018344 	.word	0x08018344

080034f0 <_ZN9LineTrace7setGainEfff>:

void LineTrace::setGain(float kp, float ki, float kd)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b085      	sub	sp, #20
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	ed87 0a02 	vstr	s0, [r7, #8]
 80034fc:	edc7 0a01 	vstr	s1, [r7, #4]
 8003500:	ed87 1a00 	vstr	s2, [r7]
	kp_ = kp;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	68ba      	ldr	r2, [r7, #8]
 8003508:	625a      	str	r2, [r3, #36]	; 0x24
	ki_ = ki;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	62da      	str	r2, [r3, #44]	; 0x2c
	kd_ = kd;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	683a      	ldr	r2, [r7, #0]
 8003514:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003516:	bf00      	nop
 8003518:	3714      	adds	r7, #20
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr

08003522 <_ZN9LineTrace5getKpEv>:
	ki_velo_ = ki;
	kd_velo_ = kd;
}

float LineTrace::getKp()
{
 8003522:	b480      	push	{r7}
 8003524:	b083      	sub	sp, #12
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
	return kp_;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352e:	ee07 3a90 	vmov	s15, r3
}
 8003532:	eeb0 0a67 	vmov.f32	s0, s15
 8003536:	370c      	adds	r7, #12
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr

08003540 <_ZN9LineTrace5getKiEv>:

float LineTrace::getKi()
{
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
	return ki_;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800354c:	ee07 3a90 	vmov	s15, r3
}
 8003550:	eeb0 0a67 	vmov.f32	s0, s15
 8003554:	370c      	adds	r7, #12
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr

0800355e <_ZN9LineTrace5getKdEv>:

float LineTrace::getKd()
{
 800355e:	b480      	push	{r7}
 8003560:	b083      	sub	sp, #12
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
	return kd_;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800356a:	ee07 3a90 	vmov	s15, r3
}
 800356e:	eeb0 0a67 	vmov.f32	s0, s15
 8003572:	370c      	adds	r7, #12
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr

0800357c <_ZN9LineTrace14setNormalRatioEf>:
{
	return kd_velo_;
}

void LineTrace::setNormalRatio(float ratio)
{
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	ed87 0a00 	vstr	s0, [r7]
	normal_ratio_ = ratio;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	683a      	ldr	r2, [r7, #0]
 800358c:	641a      	str	r2, [r3, #64]	; 0x40
}
 800358e:	bf00      	nop
 8003590:	370c      	adds	r7, #12
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr

0800359a <_ZN9LineTrace17setTargetVelocityEf>:

void LineTrace::setTargetVelocity(float velocity)
{
 800359a:	b480      	push	{r7}
 800359c:	b083      	sub	sp, #12
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
 80035a2:	ed87 0a00 	vstr	s0, [r7]
	target_velocity_ = velocity;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	683a      	ldr	r2, [r7, #0]
 80035aa:	679a      	str	r2, [r3, #120]	; 0x78
}
 80035ac:	bf00      	nop
 80035ae:	370c      	adds	r7, #12
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr

080035b8 <_ZN9LineTrace14setMaxVelocityEf>:

void LineTrace::setMaxVelocity(float velocity)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b083      	sub	sp, #12
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	ed87 0a00 	vstr	s0, [r7]
	max_velocity_ = velocity;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	683a      	ldr	r2, [r7, #0]
 80035c8:	67da      	str	r2, [r3, #124]	; 0x7c
}
 80035ca:	bf00      	nop
 80035cc:	370c      	adds	r7, #12
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr

080035d6 <_ZN9LineTrace15setMaxVelocity2Ef>:

void LineTrace::setMaxVelocity2(float velocity)
{
 80035d6:	b480      	push	{r7}
 80035d8:	b083      	sub	sp, #12
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
 80035de:	ed87 0a00 	vstr	s0, [r7]
	max_velocity2_ = velocity;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	683a      	ldr	r2, [r7, #0]
 80035e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 80035ea:	bf00      	nop
 80035ec:	370c      	adds	r7, #12
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr

080035f6 <_ZN9LineTrace17getTargetVelocityEv>:

float LineTrace::getTargetVelocity()
{
 80035f6:	b480      	push	{r7}
 80035f8:	b083      	sub	sp, #12
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	6078      	str	r0, [r7, #4]
	return target_velocity_;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003602:	ee07 3a90 	vmov	s15, r3
}
 8003606:	eeb0 0a67 	vmov.f32	s0, s15
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <_ZN9LineTrace14getMaxVelocityEv>:

float LineTrace::getMaxVelocity()
{
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
	return max_velocity_;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003620:	ee07 3a90 	vmov	s15, r3
}
 8003624:	eeb0 0a67 	vmov.f32	s0, s15
 8003628:	370c      	adds	r7, #12
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr

08003632 <_ZN9LineTrace15getMaxVelocity2Ev>:

float LineTrace::getMaxVelocity2()
{
 8003632:	b480      	push	{r7}
 8003634:	b083      	sub	sp, #12
 8003636:	af00      	add	r7, sp, #0
 8003638:	6078      	str	r0, [r7, #4]
	return max_velocity2_;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003640:	ee07 3a90 	vmov	s15, r3
}
 8003644:	eeb0 0a67 	vmov.f32	s0, s15
 8003648:	370c      	adds	r7, #12
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr
	...

08003654 <_ZN9LineTrace4flipEv>:

void LineTrace::flip()
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
	if(excution_flag_ == true){
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003662:	2b00      	cmp	r3, #0
 8003664:	f000 80c1 	beq.w	80037ea <_ZN9LineTrace4flipEv+0x196>
		// ---- line following processing -----//
		pidTrace();
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f7ff f9dd 	bl	8002a28 <_ZN9LineTrace8pidTraceEv>
		//pidAngularVelocityTrace();
		//steeringAngleTrace();


		if(isTargetDistance(10) == true){
 800366e:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f000 fa60 	bl	8003b38 <_ZN9LineTrace16isTargetDistanceEf>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d028      	beq.n	80036d0 <_ZN9LineTrace4flipEv+0x7c>
			// ---- Store Logs ------//
			storeLogs();
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f000 f9be 	bl	8003a00 <_ZN9LineTrace9storeLogsEv>

			// -------- Detect Robot stabilization ------//
			if(isStable() == true && (~(side_sensor_->getStatus()) & 0x02) == 0x02){ // Stabilizing and side sensor is black
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f7ff fe5d 	bl	8003344 <_ZN9LineTrace8isStableEv>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d00c      	beq.n	80036aa <_ZN9LineTrace4flipEv+0x56>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	691b      	ldr	r3, [r3, #16]
 8003694:	4618      	mov	r0, r3
 8003696:	f001 faed 	bl	8004c74 <_ZN10SideSensor9getStatusEv>
 800369a:	4603      	mov	r3, r0
 800369c:	43db      	mvns	r3, r3
 800369e:	f003 0302 	and.w	r3, r3, #2
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d101      	bne.n	80036aa <_ZN9LineTrace4flipEv+0x56>
 80036a6:	2301      	movs	r3, #1
 80036a8:	e000      	b.n	80036ac <_ZN9LineTrace4flipEv+0x58>
 80036aa:	2300      	movs	r3, #0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d005      	beq.n	80036bc <_ZN9LineTrace4flipEv+0x68>
				stable_flag_ = true;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80036b6:	3349      	adds	r3, #73	; 0x49
 80036b8:	2201      	movs	r2, #1
 80036ba:	701a      	strb	r2, [r3, #0]
			}

			// ---reset total cnt ---//
			encoder_->clearDistance10mm();
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	695b      	ldr	r3, [r3, #20]
 80036c0:	4618      	mov	r0, r3
 80036c2:	f7fd fef1 	bl	80014a8 <_ZN7Encoder17clearDistance10mmEv>
			odometry_->clearPotition();
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	699b      	ldr	r3, [r3, #24]
 80036ca:	4618      	mov	r0, r3
 80036cc:	f001 f844 	bl	8004758 <_ZN8Odometry13clearPotitionEv>
		}

		// ---- Target Velocity Updata ------//
		updateTargetVelocity();
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f7ff fd97 	bl	8003204 <_ZN9LineTrace20updateTargetVelocityEv>

		// ----- cross line ignore processing ------//
		if(isCrossLine() == true){ //detect cross line
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f7ff fa5e 	bl	8002b98 <_ZN9LineTrace11isCrossLineEv>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d009      	beq.n	80036f6 <_ZN9LineTrace4flipEv+0xa2>
			side_sensor_->enableIgnore();
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	691b      	ldr	r3, [r3, #16]
 80036e6:	4618      	mov	r0, r3
 80036e8:	f001 faec 	bl	8004cc4 <_ZN10SideSensor12enableIgnoreEv>
			encoder_->clearCrossLineIgnoreDistance();
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	695b      	ldr	r3, [r3, #20]
 80036f0:	4618      	mov	r0, r3
 80036f2:	f7fd ff04 	bl	80014fe <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
		}

		if(side_sensor_->getIgnoreFlag() == true && encoder_->getCrossLineIgnoreDistance() >= 200){
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	691b      	ldr	r3, [r3, #16]
 80036fa:	4618      	mov	r0, r3
 80036fc:	f001 fafc 	bl	8004cf8 <_ZN10SideSensor13getIgnoreFlagEv>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d00f      	beq.n	8003726 <_ZN9LineTrace4flipEv+0xd2>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	695b      	ldr	r3, [r3, #20]
 800370a:	4618      	mov	r0, r3
 800370c:	f7fd fee8 	bl	80014e0 <_ZN7Encoder26getCrossLineIgnoreDistanceEv>
 8003710:	eeb0 7a40 	vmov.f32	s14, s0
 8003714:	eddf 7a37 	vldr	s15, [pc, #220]	; 80037f4 <_ZN9LineTrace4flipEv+0x1a0>
 8003718:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800371c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003720:	db01      	blt.n	8003726 <_ZN9LineTrace4flipEv+0xd2>
 8003722:	2301      	movs	r3, #1
 8003724:	e000      	b.n	8003728 <_ZN9LineTrace4flipEv+0xd4>
 8003726:	2300      	movs	r3, #0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d004      	beq.n	8003736 <_ZN9LineTrace4flipEv+0xe2>
			side_sensor_->disableIgnore();
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	691b      	ldr	r3, [r3, #16]
 8003730:	4618      	mov	r0, r3
 8003732:	f001 fad4 	bl	8004cde <_ZN10SideSensor13disableIgnoreEv>

		}

		// ------- Store side line distance ------//
		if(stable_flag_ == true && (side_sensor_->getStatus() & 0x02) == 0x02){ //stabilizing and side sensor is white
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800373c:	3349      	adds	r3, #73	; 0x49
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d00b      	beq.n	800375c <_ZN9LineTrace4flipEv+0x108>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	691b      	ldr	r3, [r3, #16]
 8003748:	4618      	mov	r0, r3
 800374a:	f001 fa93 	bl	8004c74 <_ZN10SideSensor9getStatusEv>
 800374e:	4603      	mov	r3, r0
 8003750:	f003 0302 	and.w	r3, r3, #2
 8003754:	2b02      	cmp	r3, #2
 8003756:	d101      	bne.n	800375c <_ZN9LineTrace4flipEv+0x108>
 8003758:	2301      	movs	r3, #1
 800375a:	e000      	b.n	800375e <_ZN9LineTrace4flipEv+0x10a>
 800375c:	2300      	movs	r3, #0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d01a      	beq.n	8003798 <_ZN9LineTrace4flipEv+0x144>
			//storeSideLineDistance();
			if(mode_selector_ == FIRST_RUNNING){
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003768:	3310      	adds	r3, #16
 800376a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d103      	bne.n	800377a <_ZN9LineTrace4flipEv+0x126>
				storeSideLineDistance();
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f000 fa39 	bl	8003bea <_ZN9LineTrace21storeSideLineDistanceEv>
 8003778:	e002      	b.n	8003780 <_ZN9LineTrace4flipEv+0x12c>
			}
			else{
				correctionTotalDistanceFromSideMarker();
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f000 faa4 	bl	8003cc8 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv>
			}

			stable_flag_ = false;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003786:	3349      	adds	r3, #73	; 0x49
 8003788:	2200      	movs	r2, #0
 800378a:	701a      	strb	r2, [r3, #0]
			stable_cnt_reset_flag_ = true;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003792:	334a      	adds	r3, #74	; 0x4a
 8003794:	2201      	movs	r2, #1
 8003796:	701a      	strb	r2, [r3, #0]
		}

		if(stable_flag_ == true) led_.LR(-1, 1);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800379e:	3349      	adds	r3, #73	; 0x49
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d008      	beq.n	80037b8 <_ZN9LineTrace4flipEv+0x164>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	330c      	adds	r3, #12
 80037aa:	2201      	movs	r2, #1
 80037ac:	f04f 31ff 	mov.w	r1, #4294967295
 80037b0:	4618      	mov	r0, r3
 80037b2:	f7fe fc5f 	bl	8002074 <_ZN3LED2LREaa>
 80037b6:	e007      	b.n	80037c8 <_ZN9LineTrace4flipEv+0x174>
		else led_.LR(-1, 0);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	330c      	adds	r3, #12
 80037bc:	2200      	movs	r2, #0
 80037be:	f04f 31ff 	mov.w	r1, #4294967295
 80037c2:	4618      	mov	r0, r3
 80037c4:	f7fe fc56 	bl	8002074 <_ZN3LED2LREaa>

		// ----- emergency stop processing------//
		if(line_sensor_->emergencyStop() == true){
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	4618      	mov	r0, r3
 80037ce:	f7fe ff51 	bl	8002674 <_ZN10LineSensor13emergencyStopEv>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d008      	beq.n	80037ea <_ZN9LineTrace4flipEv+0x196>
			velocity_ctrl_->setTranslationVelocityOnly(0, 0);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	eddf 0a06 	vldr	s1, [pc, #24]	; 80037f8 <_ZN9LineTrace4flipEv+0x1a4>
 80037e0:	ed9f 0a05 	vldr	s0, [pc, #20]	; 80037f8 <_ZN9LineTrace4flipEv+0x1a4>
 80037e4:	4618      	mov	r0, r3
 80037e6:	f001 fcd7 	bl	8005198 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>
		}
		else{
			//led_.LR(0, -1);
		}
	}
}
 80037ea:	bf00      	nop
 80037ec:	3708      	adds	r7, #8
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	43480000 	.word	0x43480000
 80037f8:	00000000 	.word	0x00000000

080037fc <_ZN9LineTrace5startEv>:
		odometry_->clearPotition();
	}
}

void LineTrace::start()
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2201      	movs	r2, #1
 8003808:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	i_reset_flag_ = true;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
	velocity_ctrl_->start();
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	4618      	mov	r0, r3
 800381a:	f001 fd16 	bl	800524a <_ZN12VelocityCtrl5startEv>
	side_sensor_->resetWhiteLineCnt();
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	4618      	mov	r0, r3
 8003824:	f001 fa3e 	bl	8004ca4 <_ZN10SideSensor17resetWhiteLineCntEv>
	crossline_idx_ = 0;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800382e:	3344      	adds	r3, #68	; 0x44
 8003830:	2200      	movs	r2, #0
 8003832:	801a      	strh	r2, [r3, #0]
	sideline_idx_ = 0;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800383a:	3346      	adds	r3, #70	; 0x46
 800383c:	2200      	movs	r2, #0
 800383e:	801a      	strh	r2, [r3, #0]
}
 8003840:	bf00      	nop
 8003842:	3708      	adds	r7, #8
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}

08003848 <_ZN9LineTrace4stopEv>:

void LineTrace::stop()
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af02      	add	r7, sp, #8
 800384e:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	velocity_ctrl_->stop();
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	4618      	mov	r0, r3
 800385e:	f001 fd07 	bl	8005270 <_ZN12VelocityCtrl4stopEv>

	led_.LR(-1, 1);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	330c      	adds	r3, #12
 8003866:	2201      	movs	r2, #1
 8003868:	f04f 31ff 	mov.w	r1, #4294967295
 800386c:	4618      	mov	r0, r3
 800386e:	f7fe fc01 	bl	8002074 <_ZN3LED2LREaa>
	if(mode_selector_ == FIRST_RUNNING){ //First running
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003878:	3310      	adds	r3, #16
 800387a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d107      	bne.n	8003892 <_ZN9LineTrace4stopEv+0x4a>
		logger_->saveDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	69d8      	ldr	r0, [r3, #28]
 8003886:	4b1d      	ldr	r3, [pc, #116]	; (80038fc <_ZN9LineTrace4stopEv+0xb4>)
 8003888:	4a1d      	ldr	r2, [pc, #116]	; (8003900 <_ZN9LineTrace4stopEv+0xb8>)
 800388a:	491e      	ldr	r1, [pc, #120]	; (8003904 <_ZN9LineTrace4stopEv+0xbc>)
 800388c:	f000 fc30 	bl	80040f0 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>
 8003890:	e006      	b.n	80038a0 <_ZN9LineTrace4stopEv+0x58>
	}
	else{//Secondary run
		logger_->saveDistanceAndTheta2("COURSLOG", "DISTANC2.TXT", "THETA2.TXT");
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	69d8      	ldr	r0, [r3, #28]
 8003896:	4b1c      	ldr	r3, [pc, #112]	; (8003908 <_ZN9LineTrace4stopEv+0xc0>)
 8003898:	4a1c      	ldr	r2, [pc, #112]	; (800390c <_ZN9LineTrace4stopEv+0xc4>)
 800389a:	491a      	ldr	r1, [pc, #104]	; (8003904 <_ZN9LineTrace4stopEv+0xbc>)
 800389c:	f000 fc4b 	bl	8004136 <_ZN6Logger21saveDistanceAndTheta2EPKcS1_S1_>
	}
	sd_write_array_float("COURSLOG", "CROSSDIS.TXT", CROSSLINE_SIZE, crossline_distance_, OVER_WRITE);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80038a6:	3314      	adds	r3, #20
 80038a8:	2200      	movs	r2, #0
 80038aa:	9200      	str	r2, [sp, #0]
 80038ac:	2264      	movs	r2, #100	; 0x64
 80038ae:	4918      	ldr	r1, [pc, #96]	; (8003910 <_ZN9LineTrace4stopEv+0xc8>)
 80038b0:	4814      	ldr	r0, [pc, #80]	; (8003904 <_ZN9LineTrace4stopEv+0xbc>)
 80038b2:	f7fd fea7 	bl	8001604 <sd_write_array_float>
	sd_write_array_float("COURSLOG", "SIDEDIS.TXT", SIDELINE_SIZE, sideline_distance_, OVER_WRITE);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f503 433d 	add.w	r3, r3, #48384	; 0xbd00
 80038bc:	33a4      	adds	r3, #164	; 0xa4
 80038be:	2200      	movs	r2, #0
 80038c0:	9200      	str	r2, [sp, #0]
 80038c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80038c6:	4913      	ldr	r1, [pc, #76]	; (8003914 <_ZN9LineTrace4stopEv+0xcc>)
 80038c8:	480e      	ldr	r0, [pc, #56]	; (8003904 <_ZN9LineTrace4stopEv+0xbc>)
 80038ca:	f7fd fe9b 	bl	8001604 <sd_write_array_float>

	led_.LR(-1, 0);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	330c      	adds	r3, #12
 80038d2:	2200      	movs	r2, #0
 80038d4:	f04f 31ff 	mov.w	r1, #4294967295
 80038d8:	4618      	mov	r0, r3
 80038da:	f7fe fbcb 	bl	8002074 <_ZN3LED2LREaa>

	logger_->resetIdx();
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	69db      	ldr	r3, [r3, #28]
 80038e2:	4618      	mov	r0, r3
 80038e4:	f000 fcb5 	bl	8004252 <_ZN6Logger8resetIdxEv>
	logger_->resetLogs2();
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	69db      	ldr	r3, [r3, #28]
 80038ec:	4618      	mov	r0, r3
 80038ee:	f000 fc63 	bl	80041b8 <_ZN6Logger10resetLogs2Ev>
}
 80038f2:	bf00      	nop
 80038f4:	3708      	adds	r7, #8
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	080182f0 	.word	0x080182f0
 8003900:	080182fc 	.word	0x080182fc
 8003904:	080182e4 	.word	0x080182e4
 8003908:	08018350 	.word	0x08018350
 800390c:	0801835c 	.word	0x0801835c
 8003910:	0801836c 	.word	0x0801836c
 8003914:	0801837c 	.word	0x0801837c

08003918 <_ZN9LineTrace7runningEv>:

void LineTrace::running()
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b084      	sub	sp, #16
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
	uint16_t stage = 0;
 8003920:	2300      	movs	r3, #0
 8003922:	81fb      	strh	r3, [r7, #14]
	bool goal_flag = false;
 8003924:	2300      	movs	r3, #0
 8003926:	737b      	strb	r3, [r7, #13]
	start();
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f7ff ff67 	bl	80037fc <_ZN9LineTrace5startEv>

	while(goal_flag == false){
 800392e:	7b7b      	ldrb	r3, [r7, #13]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d15b      	bne.n	80039ec <_ZN9LineTrace7runningEv+0xd4>
		switch(stage){
 8003934:	89fb      	ldrh	r3, [r7, #14]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d002      	beq.n	8003940 <_ZN9LineTrace7runningEv+0x28>
 800393a:	2b0a      	cmp	r3, #10
 800393c:	d030      	beq.n	80039a0 <_ZN9LineTrace7runningEv+0x88>
 800393e:	e054      	b.n	80039ea <_ZN9LineTrace7runningEv+0xd2>
		case 0:
			if(side_sensor_->getWhiteLineCntR() == 1){
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	691b      	ldr	r3, [r3, #16]
 8003944:	4618      	mov	r0, r3
 8003946:	f001 f9a1 	bl	8004c8c <_ZN10SideSensor16getWhiteLineCntREv>
 800394a:	4603      	mov	r3, r0
 800394c:	2b01      	cmp	r3, #1
 800394e:	bf0c      	ite	eq
 8003950:	2301      	moveq	r3, #1
 8003952:	2300      	movne	r3, #0
 8003954:	b2db      	uxtb	r3, r3
 8003956:	2b00      	cmp	r3, #0
 8003958:	d044      	beq.n	80039e4 <_ZN9LineTrace7runningEv+0xcc>
				}
				else{ // Other than first running
					startVelocityPlay();
				}
				*/
				loggerStart();
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f7ff f8f0 	bl	8002b40 <_ZN9LineTrace11loggerStartEv>
				if(mode_selector_ != FIRST_RUNNING){ // Other than first running
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003966:	3310      	adds	r3, #16
 8003968:	f9b3 3000 	ldrsh.w	r3, [r3]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d002      	beq.n	8003976 <_ZN9LineTrace7runningEv+0x5e>
					startVelocityPlay();
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f000 f89f 	bl	8003ab4 <_ZN9LineTrace17startVelocityPlayEv>
				}

				encoder_->clearCrossLineIgnoreDistance();
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	695b      	ldr	r3, [r3, #20]
 800397a:	4618      	mov	r0, r3
 800397c:	f7fd fdbf 	bl	80014fe <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
				encoder_->clearTotalDistance();
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	695b      	ldr	r3, [r3, #20]
 8003984:	4618      	mov	r0, r3
 8003986:	f7fd fd9d 	bl	80014c4 <_ZN7Encoder18clearTotalDistanceEv>
				led_.LR(0, -1);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	330c      	adds	r3, #12
 800398e:	f04f 32ff 	mov.w	r2, #4294967295
 8003992:	2100      	movs	r1, #0
 8003994:	4618      	mov	r0, r3
 8003996:	f7fe fb6d 	bl	8002074 <_ZN3LED2LREaa>
				stage = 10;
 800399a:	230a      	movs	r3, #10
 800399c:	81fb      	strh	r3, [r7, #14]
			}

			break;
 800399e:	e021      	b.n	80039e4 <_ZN9LineTrace7runningEv+0xcc>

		case 10:
			if(side_sensor_->getWhiteLineCntR() == 2){
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	691b      	ldr	r3, [r3, #16]
 80039a4:	4618      	mov	r0, r3
 80039a6:	f001 f971 	bl	8004c8c <_ZN10SideSensor16getWhiteLineCntREv>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b02      	cmp	r3, #2
 80039ae:	bf0c      	ite	eq
 80039b0:	2301      	moveq	r3, #1
 80039b2:	2300      	movne	r3, #0
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d016      	beq.n	80039e8 <_ZN9LineTrace7runningEv+0xd0>
				loggerStop();
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f7ff f8db 	bl	8002b76 <_ZN9LineTrace10loggerStopEv>
				stopVelocityPlay();
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f000 f88a 	bl	8003ada <_ZN9LineTrace16stopVelocityPlayEv>
				HAL_Delay(100); //Run through after the goal
 80039c6:	2064      	movs	r0, #100	; 0x64
 80039c8:	f004 fce0 	bl	800838c <HAL_Delay>

				setTargetVelocity(0);
 80039cc:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 80039fc <_ZN9LineTrace7runningEv+0xe4>
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f7ff fde2 	bl	800359a <_ZN9LineTrace17setTargetVelocityEf>
				HAL_Delay(500); //Stop for a while on the spot
 80039d6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80039da:	f004 fcd7 	bl	800838c <HAL_Delay>

				goal_flag = true;
 80039de:	2301      	movs	r3, #1
 80039e0:	737b      	strb	r3, [r7, #13]

			}

			break;
 80039e2:	e001      	b.n	80039e8 <_ZN9LineTrace7runningEv+0xd0>
			break;
 80039e4:	bf00      	nop
 80039e6:	e7a2      	b.n	800392e <_ZN9LineTrace7runningEv+0x16>
			break;
 80039e8:	bf00      	nop
	while(goal_flag == false){
 80039ea:	e7a0      	b.n	800392e <_ZN9LineTrace7runningEv+0x16>
		}
	}

	stop();
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f7ff ff2b 	bl	8003848 <_ZN9LineTrace4stopEv>
}
 80039f2:	bf00      	nop
 80039f4:	3710      	adds	r7, #16
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	00000000 	.word	0x00000000

08003a00 <_ZN9LineTrace9storeLogsEv>:

void LineTrace::storeLogs()
{
 8003a00:	b590      	push	{r4, r7, lr}
 8003a02:	ed2d 8b02 	vpush	{d8}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
	if(logging_flag_ == true){
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d046      	beq.n	8003aa4 <_ZN9LineTrace9storeLogsEv+0xa4>
		if(mode_selector_ == FIRST_RUNNING)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003a1c:	3310      	adds	r3, #16
 8003a1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d11c      	bne.n	8003a60 <_ZN9LineTrace9storeLogsEv+0x60>
			logger_->storeDistanceAndTheta(encoder_->getDistance10mm(), odometry_->getTheta());
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	69dc      	ldr	r4, [r3, #28]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	695b      	ldr	r3, [r3, #20]
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f7fd fd0d 	bl	800144e <_ZN7Encoder15getDistance10mmEv>
 8003a34:	eeb0 8a40 	vmov.f32	s16, s0
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	699b      	ldr	r3, [r3, #24]
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f000 fe7a 	bl	8004736 <_ZN8Odometry8getThetaEv>
 8003a42:	ec53 2b10 	vmov	r2, r3, d0
 8003a46:	4610      	mov	r0, r2
 8003a48:	4619      	mov	r1, r3
 8003a4a:	f7fd f8e5 	bl	8000c18 <__aeabi_d2f>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	ee00 3a90 	vmov	s1, r3
 8003a54:	eeb0 0a48 	vmov.f32	s0, s16
 8003a58:	4620      	mov	r0, r4
 8003a5a:	f000 fa78 	bl	8003f4e <_ZN6Logger21storeDistanceAndThetaEff>
 8003a5e:	e01b      	b.n	8003a98 <_ZN9LineTrace9storeLogsEv+0x98>
		else
			//logger_->storeDistanceAndTheta2(encoder_->getDistance10mm(), odometry_->getTheta());
			logger_->storeDistanceAndTheta2(encoder_->getTotalDistance(), odometry_->getTheta());
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	69dc      	ldr	r4, [r3, #28]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	695b      	ldr	r3, [r3, #20]
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f7fd fcff 	bl	800146c <_ZN7Encoder16getTotalDistanceEv>
 8003a6e:	eeb0 8a40 	vmov.f32	s16, s0
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	699b      	ldr	r3, [r3, #24]
 8003a76:	4618      	mov	r0, r3
 8003a78:	f000 fe5d 	bl	8004736 <_ZN8Odometry8getThetaEv>
 8003a7c:	ec53 2b10 	vmov	r2, r3, d0
 8003a80:	4610      	mov	r0, r2
 8003a82:	4619      	mov	r1, r3
 8003a84:	f7fd f8c8 	bl	8000c18 <__aeabi_d2f>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	ee00 3a90 	vmov	s1, r3
 8003a8e:	eeb0 0a48 	vmov.f32	s0, s16
 8003a92:	4620      	mov	r0, r4
 8003a94:	f000 faa2 	bl	8003fdc <_ZN6Logger22storeDistanceAndTheta2Eff>
			//logger_->storeDistanceAndTheta2(getTargetVelocity(), odometry_->getTheta());

		mon_store_cnt++;
 8003a98:	4b05      	ldr	r3, [pc, #20]	; (8003ab0 <_ZN9LineTrace9storeLogsEv+0xb0>)
 8003a9a:	881b      	ldrh	r3, [r3, #0]
 8003a9c:	3301      	adds	r3, #1
 8003a9e:	b29a      	uxth	r2, r3
 8003aa0:	4b03      	ldr	r3, [pc, #12]	; (8003ab0 <_ZN9LineTrace9storeLogsEv+0xb0>)
 8003aa2:	801a      	strh	r2, [r3, #0]
	}
}
 8003aa4:	bf00      	nop
 8003aa6:	370c      	adds	r7, #12
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	ecbd 8b02 	vpop	{d8}
 8003aae:	bd90      	pop	{r4, r7, pc}
 8003ab0:	20000264 	.word	0x20000264

08003ab4 <_ZN9LineTrace17startVelocityPlayEv>:

void LineTrace::startVelocityPlay()
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b082      	sub	sp, #8
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
	encoder_->clearTotalDistance();
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	695b      	ldr	r3, [r3, #20]
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f7fd fcff 	bl	80014c4 <_ZN7Encoder18clearTotalDistanceEv>
	velocity_play_flag_ = true;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003acc:	330c      	adds	r3, #12
 8003ace:	2201      	movs	r2, #1
 8003ad0:	701a      	strb	r2, [r3, #0]
}
 8003ad2:	bf00      	nop
 8003ad4:	3708      	adds	r7, #8
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}

08003ada <_ZN9LineTrace16stopVelocityPlayEv>:

void LineTrace::stopVelocityPlay()
{
 8003ada:	b480      	push	{r7}
 8003adc:	b083      	sub	sp, #12
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]
	velocity_play_flag_ = false;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003ae8:	330c      	adds	r3, #12
 8003aea:	2200      	movs	r2, #0
 8003aec:	701a      	strb	r2, [r3, #0]
	velocity_table_idx_ = 0;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003af4:	330e      	adds	r3, #14
 8003af6:	2200      	movs	r2, #0
 8003af8:	801a      	strh	r2, [r3, #0]
	ref_distance_ = 0;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f503 43bc 	add.w	r3, r3, #24064	; 0x5e00
 8003b00:	3348      	adds	r3, #72	; 0x48
 8003b02:	f04f 0200 	mov.w	r2, #0
 8003b06:	601a      	str	r2, [r3, #0]
}
 8003b08:	bf00      	nop
 8003b0a:	370c      	adds	r7, #12
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr

08003b14 <_ZN9LineTrace7setModeEs>:

void LineTrace::setMode(int16_t mode)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	460b      	mov	r3, r1
 8003b1e:	807b      	strh	r3, [r7, #2]
	mode_selector_ = mode;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003b26:	3310      	adds	r3, #16
 8003b28:	887a      	ldrh	r2, [r7, #2]
 8003b2a:	801a      	strh	r2, [r3, #0]
}
 8003b2c:	bf00      	nop
 8003b2e:	370c      	adds	r7, #12
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <_ZN9LineTrace16isTargetDistanceEf>:

bool LineTrace::isTargetDistance(float target_distance)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	ed87 0a00 	vstr	s0, [r7]
	bool ret = false;
 8003b44:	2300      	movs	r3, #0
 8003b46:	73fb      	strb	r3, [r7, #15]
	if(encoder_->getDistance10mm() >= target_distance){
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	695b      	ldr	r3, [r3, #20]
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f7fd fc7e 	bl	800144e <_ZN7Encoder15getDistance10mmEv>
 8003b52:	eeb0 7a40 	vmov.f32	s14, s0
 8003b56:	edd7 7a00 	vldr	s15, [r7]
 8003b5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b62:	bf94      	ite	ls
 8003b64:	2301      	movls	r3, #1
 8003b66:	2300      	movhi	r3, #0
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d001      	beq.n	8003b72 <_ZN9LineTrace16isTargetDistanceEf+0x3a>
		ret = true;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 8003b72:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3710      	adds	r7, #16
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}

08003b7c <_ZN9LineTrace22storeCrossLineDistanceEv>:

void LineTrace::storeCrossLineDistance()
{
 8003b7c:	b590      	push	{r4, r7, lr}
 8003b7e:	b083      	sub	sp, #12
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
	crossline_distance_[crossline_idx_] = encoder_->getTotalDistance();
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	695a      	ldr	r2, [r3, #20]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003b8e:	3344      	adds	r3, #68	; 0x44
 8003b90:	881b      	ldrh	r3, [r3, #0]
 8003b92:	461c      	mov	r4, r3
 8003b94:	4610      	mov	r0, r2
 8003b96:	f7fd fc69 	bl	800146c <_ZN7Encoder16getTotalDistanceEv>
 8003b9a:	eef0 7a40 	vmov.f32	s15, s0
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	f504 533c 	add.w	r3, r4, #12032	; 0x2f00
 8003ba4:	3304      	adds	r3, #4
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	4413      	add	r3, r2
 8003baa:	3304      	adds	r3, #4
 8003bac:	edc3 7a00 	vstr	s15, [r3]
	crossline_idx_++;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003bb6:	3344      	adds	r3, #68	; 0x44
 8003bb8:	881b      	ldrh	r3, [r3, #0]
 8003bba:	3301      	adds	r3, #1
 8003bbc:	b29a      	uxth	r2, r3
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003bc4:	3344      	adds	r3, #68	; 0x44
 8003bc6:	801a      	strh	r2, [r3, #0]

	if(crossline_idx_ >= CROSSLINE_SIZE) crossline_idx_ = CROSSLINE_SIZE - 1;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003bce:	3344      	adds	r3, #68	; 0x44
 8003bd0:	881b      	ldrh	r3, [r3, #0]
 8003bd2:	2b63      	cmp	r3, #99	; 0x63
 8003bd4:	d905      	bls.n	8003be2 <_ZN9LineTrace22storeCrossLineDistanceEv+0x66>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003bdc:	3344      	adds	r3, #68	; 0x44
 8003bde:	2263      	movs	r2, #99	; 0x63
 8003be0:	801a      	strh	r2, [r3, #0]
}
 8003be2:	bf00      	nop
 8003be4:	370c      	adds	r7, #12
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd90      	pop	{r4, r7, pc}

08003bea <_ZN9LineTrace21storeSideLineDistanceEv>:

void LineTrace::storeSideLineDistance()
{
 8003bea:	b590      	push	{r4, r7, lr}
 8003bec:	b083      	sub	sp, #12
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	6078      	str	r0, [r7, #4]
	sideline_distance_[sideline_idx_] = encoder_->getTotalDistance();
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	695a      	ldr	r2, [r3, #20]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003bfc:	3346      	adds	r3, #70	; 0x46
 8003bfe:	881b      	ldrh	r3, [r3, #0]
 8003c00:	461c      	mov	r4, r3
 8003c02:	4610      	mov	r0, r2
 8003c04:	f7fd fc32 	bl	800146c <_ZN7Encoder16getTotalDistanceEv>
 8003c08:	eef0 7a40 	vmov.f32	s15, s0
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	f504 533d 	add.w	r3, r4, #12096	; 0x2f40
 8003c12:	3328      	adds	r3, #40	; 0x28
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	4413      	add	r3, r2
 8003c18:	3304      	adds	r3, #4
 8003c1a:	edc3 7a00 	vstr	s15, [r3]
	sideline_idx_++;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003c24:	3346      	adds	r3, #70	; 0x46
 8003c26:	881b      	ldrh	r3, [r3, #0]
 8003c28:	3301      	adds	r3, #1
 8003c2a:	b29a      	uxth	r2, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003c32:	3346      	adds	r3, #70	; 0x46
 8003c34:	801a      	strh	r2, [r3, #0]

	if(sideline_idx_ >= SIDELINE_SIZE) sideline_idx_ = SIDELINE_SIZE - 1;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003c3c:	3346      	adds	r3, #70	; 0x46
 8003c3e:	881b      	ldrh	r3, [r3, #0]
 8003c40:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c44:	d306      	bcc.n	8003c54 <_ZN9LineTrace21storeSideLineDistanceEv+0x6a>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003c4c:	3346      	adds	r3, #70	; 0x46
 8003c4e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003c52:	801a      	strh	r2, [r3, #0]
}
 8003c54:	bf00      	nop
 8003c56:	370c      	adds	r7, #12
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd90      	pop	{r4, r7, pc}

08003c5c <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv>:
void LineTrace::correctionTotalDistanceFromCrossLine()
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b082      	sub	sp, #8
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
	encoder_->setTotalDistance(crossline_distance_[crossline_idx_]);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6959      	ldr	r1, [r3, #20]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003c6e:	3344      	adds	r3, #68	; 0x44
 8003c70:	881b      	ldrh	r3, [r3, #0]
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8003c78:	3304      	adds	r3, #4
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	4413      	add	r3, r2
 8003c7e:	3304      	adds	r3, #4
 8003c80:	edd3 7a00 	vldr	s15, [r3]
 8003c84:	eeb0 0a67 	vmov.f32	s0, s15
 8003c88:	4608      	mov	r0, r1
 8003c8a:	f7fd fbfe 	bl	800148a <_ZN7Encoder16setTotalDistanceEf>
	crossline_idx_++;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003c94:	3344      	adds	r3, #68	; 0x44
 8003c96:	881b      	ldrh	r3, [r3, #0]
 8003c98:	3301      	adds	r3, #1
 8003c9a:	b29a      	uxth	r2, r3
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003ca2:	3344      	adds	r3, #68	; 0x44
 8003ca4:	801a      	strh	r2, [r3, #0]

	if(crossline_idx_ >= CROSSLINE_SIZE) crossline_idx_ = CROSSLINE_SIZE - 1;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003cac:	3344      	adds	r3, #68	; 0x44
 8003cae:	881b      	ldrh	r3, [r3, #0]
 8003cb0:	2b63      	cmp	r3, #99	; 0x63
 8003cb2:	d905      	bls.n	8003cc0 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0x64>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003cba:	3344      	adds	r3, #68	; 0x44
 8003cbc:	2263      	movs	r2, #99	; 0x63
 8003cbe:	801a      	strh	r2, [r3, #0]

}
 8003cc0:	bf00      	nop
 8003cc2:	3708      	adds	r7, #8
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv>:

void LineTrace::correctionTotalDistanceFromSideMarker()
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b086      	sub	sp, #24
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	82fb      	strh	r3, [r7, #22]
 8003cd4:	8afb      	ldrh	r3, [r7, #22]
 8003cd6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003cda:	d239      	bcs.n	8003d50 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x88>
		float temp_sideline_distance = sideline_distance_[i];
 8003cdc:	8afb      	ldrh	r3, [r7, #22]
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 8003ce4:	3328      	adds	r3, #40	; 0x28
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	4413      	add	r3, r2
 8003cea:	3304      	adds	r3, #4
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	613b      	str	r3, [r7, #16]
		float diff = abs(temp_sideline_distance - encoder_->getTotalDistance());
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	695b      	ldr	r3, [r3, #20]
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f7fd fbb9 	bl	800146c <_ZN7Encoder16getTotalDistanceEv>
 8003cfa:	eeb0 7a40 	vmov.f32	s14, s0
 8003cfe:	edd7 7a04 	vldr	s15, [r7, #16]
 8003d02:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003d06:	eeb0 0a67 	vmov.f32	s0, s15
 8003d0a:	f7fe fd09 	bl	8002720 <_ZSt3absf>
 8003d0e:	ed87 0a03 	vstr	s0, [r7, #12]
		if(diff <= 80){
 8003d12:	edd7 7a03 	vldr	s15, [r7, #12]
 8003d16:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8003d78 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xb0>
 8003d1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003d1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d22:	d811      	bhi.n	8003d48 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x80>
			encoder_->setTotalDistance(sideline_distance_[i]);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6959      	ldr	r1, [r3, #20]
 8003d28:	8afb      	ldrh	r3, [r7, #22]
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 8003d30:	3328      	adds	r3, #40	; 0x28
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	4413      	add	r3, r2
 8003d36:	3304      	adds	r3, #4
 8003d38:	edd3 7a00 	vldr	s15, [r3]
 8003d3c:	eeb0 0a67 	vmov.f32	s0, s15
 8003d40:	4608      	mov	r0, r1
 8003d42:	f7fd fba2 	bl	800148a <_ZN7Encoder16setTotalDistanceEf>
			break;
 8003d46:	e003      	b.n	8003d50 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x88>
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8003d48:	8afb      	ldrh	r3, [r7, #22]
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	82fb      	strh	r3, [r7, #22]
 8003d4e:	e7c1      	b.n	8003cd4 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xc>
		}
	}

		//sideline_idx_++;

	if(sideline_idx_ >= SIDELINE_SIZE) sideline_idx_ = SIDELINE_SIZE - 1;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003d56:	3346      	adds	r3, #70	; 0x46
 8003d58:	881b      	ldrh	r3, [r3, #0]
 8003d5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d5e:	d306      	bcc.n	8003d6e <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xa6>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003d66:	3346      	adds	r3, #70	; 0x46
 8003d68:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003d6c:	801a      	strh	r2, [r3, #0]

}
 8003d6e:	bf00      	nop
 8003d70:	3718      	adds	r7, #24
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	42a00000 	.word	0x42a00000

08003d7c <_ZN6LoggerC1Ev>:
#include "HAL_SDcard_lib.h"
#include <stdio.h>
#include "Macro.h"
#include "AQM0802.h"

Logger::Logger() : recording_flag_(false), log_index_tim_(0), log_index_tim2_(0), log_index_dis_(0){}
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003d8a:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8003d8e:	2200      	movs	r2, #0
 8003d90:	701a      	strb	r2, [r3, #0]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003d98:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	801a      	strh	r2, [r3, #0]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003da6:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8003daa:	2200      	movs	r2, #0
 8003dac:	801a      	strh	r2, [r3, #0]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003db4:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8003db8:	2200      	movs	r2, #0
 8003dba:	801a      	strh	r2, [r3, #0]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	370c      	adds	r7, #12
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr
	...

08003dcc <_ZN6Logger10sdCardInitEv>:

bool Logger::sdCardInit()
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b084      	sub	sp, #16
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	73fb      	strb	r3, [r7, #15]

	if(sd_mount() == 1){
 8003dd8:	f7fd fd06 	bl	80017e8 <sd_mount>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	bf0c      	ite	eq
 8003de2:	2301      	moveq	r3, #1
 8003de4:	2300      	movne	r3, #0
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d016      	beq.n	8003e1a <_ZN6Logger10sdCardInitEv+0x4e>
	  //printf("mount success\r\n");

	  lcd_clear();
 8003dec:	f7fd f958 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 8003df0:	2100      	movs	r1, #0
 8003df2:	2000      	movs	r0, #0
 8003df4:	f7fd f964 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 8003df8:	4815      	ldr	r0, [pc, #84]	; (8003e50 <_ZN6Logger10sdCardInitEv+0x84>)
 8003dfa:	f7fd f98b 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 8003dfe:	2101      	movs	r1, #1
 8003e00:	2000      	movs	r0, #0
 8003e02:	f7fd f95d 	bl	80010c0 <lcd_locate>
	  lcd_printf("success");
 8003e06:	4813      	ldr	r0, [pc, #76]	; (8003e54 <_ZN6Logger10sdCardInitEv+0x88>)
 8003e08:	f7fd f984 	bl	8001114 <lcd_printf>
	  HAL_Delay(500);
 8003e0c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003e10:	f004 fabc 	bl	800838c <HAL_Delay>

	  ret = true;
 8003e14:	2301      	movs	r3, #1
 8003e16:	73fb      	strb	r3, [r7, #15]
 8003e18:	e015      	b.n	8003e46 <_ZN6Logger10sdCardInitEv+0x7a>
	}
	else{
	  //printf("mount error\r\n");

	  lcd_clear();
 8003e1a:	f7fd f941 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 8003e1e:	2100      	movs	r1, #0
 8003e20:	2000      	movs	r0, #0
 8003e22:	f7fd f94d 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 8003e26:	480a      	ldr	r0, [pc, #40]	; (8003e50 <_ZN6Logger10sdCardInitEv+0x84>)
 8003e28:	f7fd f974 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 8003e2c:	2101      	movs	r1, #1
 8003e2e:	2000      	movs	r0, #0
 8003e30:	f7fd f946 	bl	80010c0 <lcd_locate>
	  lcd_printf("fail");
 8003e34:	4808      	ldr	r0, [pc, #32]	; (8003e58 <_ZN6Logger10sdCardInitEv+0x8c>)
 8003e36:	f7fd f96d 	bl	8001114 <lcd_printf>
	  HAL_Delay(1000);
 8003e3a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003e3e:	f004 faa5 	bl	800838c <HAL_Delay>

	  ret = false;
 8003e42:	2300      	movs	r3, #0
 8003e44:	73fb      	strb	r3, [r7, #15]
	//data[0] = 100;
	//sd_write_array_int("sdio", "write1.txt", DATA_SIZE, data, ADD_WRITE); //write
	//sd_read_array_int("sdio", "write1.txt", DATA_SIZE, temp); //read
	//sd_write_array_int("sdio", "write2.txt", DATA_SIZE, temp, ADD_WRITE); //write

	return ret;
 8003e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3710      	adds	r7, #16
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}
 8003e50:	08018388 	.word	0x08018388
 8003e54:	08018394 	.word	0x08018394
 8003e58:	0801839c 	.word	0x0801839c

08003e5c <_ZN6Logger8storeLogEf>:

	}

}
void Logger::storeLog(float data)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b083      	sub	sp, #12
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003e6e:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d027      	beq.n	8003ec8 <_ZN6Logger8storeLogEf+0x6c>
		store_data_float_[log_index_tim_] = data;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003e7e:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8003e82:	881b      	ldrh	r3, [r3, #0]
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	4413      	add	r3, r2
 8003e8a:	683a      	ldr	r2, [r7, #0]
 8003e8c:	601a      	str	r2, [r3, #0]

		log_index_tim_++;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003e94:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8003e98:	881b      	ldrh	r3, [r3, #0]
 8003e9a:	3301      	adds	r3, #1
 8003e9c:	b29a      	uxth	r2, r3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003ea4:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8003ea8:	801a      	strh	r2, [r3, #0]

		if(log_index_tim_ >= LOG_DATA_SIZE_TIM) log_index_tim_ = 0;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003eb0:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8003eb4:	881b      	ldrh	r3, [r3, #0]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d006      	beq.n	8003ec8 <_ZN6Logger8storeLogEf+0x6c>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003ec0:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	801a      	strh	r2, [r3, #0]
	}
}
 8003ec8:	bf00      	nop
 8003eca:	370c      	adds	r7, #12
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr

08003ed4 <_ZN6Logger9storeLog2Ef>:
void Logger::storeLog2(float data)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003ee6:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8003eea:	781b      	ldrb	r3, [r3, #0]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d028      	beq.n	8003f42 <_ZN6Logger9storeLog2Ef+0x6e>
		store_data_float2_[log_index_tim2_] = data;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003ef6:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8003efa:	881b      	ldrh	r3, [r3, #0]
 8003efc:	687a      	ldr	r2, [r7, #4]
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	4413      	add	r3, r2
 8003f02:	3304      	adds	r3, #4
 8003f04:	683a      	ldr	r2, [r7, #0]
 8003f06:	601a      	str	r2, [r3, #0]

		log_index_tim2_++;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003f0e:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8003f12:	881b      	ldrh	r3, [r3, #0]
 8003f14:	3301      	adds	r3, #1
 8003f16:	b29a      	uxth	r2, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003f1e:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8003f22:	801a      	strh	r2, [r3, #0]

		if(log_index_tim2_ >= LOG_DATA_SIZE_TIM2) log_index_tim2_ = 0;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003f2a:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8003f2e:	881b      	ldrh	r3, [r3, #0]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d006      	beq.n	8003f42 <_ZN6Logger9storeLog2Ef+0x6e>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003f3a:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8003f3e:	2200      	movs	r2, #0
 8003f40:	801a      	strh	r2, [r3, #0]
	}
}
 8003f42:	bf00      	nop
 8003f44:	370c      	adds	r7, #12
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr

08003f4e <_ZN6Logger21storeDistanceAndThetaEff>:
{

}

void Logger::storeDistanceAndTheta(float distance, float theta)
{
 8003f4e:	b480      	push	{r7}
 8003f50:	b085      	sub	sp, #20
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	60f8      	str	r0, [r7, #12]
 8003f56:	ed87 0a02 	vstr	s0, [r7, #8]
 8003f5a:	edc7 0a01 	vstr	s1, [r7, #4]
	//if(recording_flag_ == true){
		store_distance_[log_index_dis_] = distance;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003f64:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8003f68:	881b      	ldrh	r3, [r3, #0]
 8003f6a:	68fa      	ldr	r2, [r7, #12]
 8003f6c:	3302      	adds	r3, #2
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	4413      	add	r3, r2
 8003f72:	68ba      	ldr	r2, [r7, #8]
 8003f74:	601a      	str	r2, [r3, #0]
		store_theta_[log_index_dis_] = theta;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003f7c:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8003f80:	881b      	ldrh	r3, [r3, #0]
 8003f82:	68fa      	ldr	r2, [r7, #12]
 8003f84:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 8003f88:	3312      	adds	r3, #18
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	4413      	add	r3, r2
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	601a      	str	r2, [r3, #0]

		log_index_dis_++;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003f98:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8003f9c:	881b      	ldrh	r3, [r3, #0]
 8003f9e:	3301      	adds	r3, #1
 8003fa0:	b29a      	uxth	r2, r3
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003fa8:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8003fac:	801a      	strh	r2, [r3, #0]

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003fb4:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8003fb8:	881b      	ldrh	r3, [r3, #0]
 8003fba:	f241 726f 	movw	r2, #5999	; 0x176f
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d906      	bls.n	8003fd0 <_ZN6Logger21storeDistanceAndThetaEff+0x82>
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003fc8:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8003fcc:	2200      	movs	r2, #0
 8003fce:	801a      	strh	r2, [r3, #0]
	//}
}
 8003fd0:	bf00      	nop
 8003fd2:	3714      	adds	r7, #20
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr

08003fdc <_ZN6Logger22storeDistanceAndTheta2Eff>:

void Logger::storeDistanceAndTheta2(float distance, float theta)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b085      	sub	sp, #20
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	ed87 0a02 	vstr	s0, [r7, #8]
 8003fe8:	edc7 0a01 	vstr	s1, [r7, #4]
	//if(recording_flag_ == true){
		store_distance2_[log_index_dis_] = distance;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8003ff2:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8003ff6:	881b      	ldrh	r3, [r3, #0]
 8003ff8:	68fa      	ldr	r2, [r7, #12]
 8003ffa:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 8003ffe:	3322      	adds	r3, #34	; 0x22
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	4413      	add	r3, r2
 8004004:	68ba      	ldr	r2, [r7, #8]
 8004006:	601a      	str	r2, [r3, #0]
		store_theta2_[log_index_dis_] = theta;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800400e:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8004012:	881b      	ldrh	r3, [r3, #0]
 8004014:	68fa      	ldr	r2, [r7, #12]
 8004016:	f503 438c 	add.w	r3, r3, #17920	; 0x4600
 800401a:	3352      	adds	r3, #82	; 0x52
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	4413      	add	r3, r2
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	601a      	str	r2, [r3, #0]

		log_index_dis_++;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800402a:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 800402e:	881b      	ldrh	r3, [r3, #0]
 8004030:	3301      	adds	r3, #1
 8004032:	b29a      	uxth	r2, r3
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800403a:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 800403e:	801a      	strh	r2, [r3, #0]

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004046:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 800404a:	881b      	ldrh	r3, [r3, #0]
 800404c:	f241 726f 	movw	r2, #5999	; 0x176f
 8004050:	4293      	cmp	r3, r2
 8004052:	d906      	bls.n	8004062 <_ZN6Logger22storeDistanceAndTheta2Eff+0x86>
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800405a:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 800405e:	2200      	movs	r2, #0
 8004060:	801a      	strh	r2, [r3, #0]
	//}
}
 8004062:	bf00      	nop
 8004064:	3714      	adds	r7, #20
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr

0800406e <_ZN6Logger23getDistanceArrayPointerEv>:
const float *Logger::getDistanceArrayPointer()
{
 800406e:	b480      	push	{r7}
 8004070:	b083      	sub	sp, #12
 8004072:	af00      	add	r7, sp, #0
 8004074:	6078      	str	r0, [r7, #4]
	return store_distance_;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	3308      	adds	r3, #8
}
 800407a:	4618      	mov	r0, r3
 800407c:	370c      	adds	r7, #12
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr

08004086 <_ZN6Logger20getThetaArrayPointerEv>:

const float *Logger::getThetaArrayPointer()
{
 8004086:	b480      	push	{r7}
 8004088:	b083      	sub	sp, #12
 800408a:	af00      	add	r7, sp, #0
 800408c:	6078      	str	r0, [r7, #4]
	return store_theta_;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004094:	3348      	adds	r3, #72	; 0x48
}
 8004096:	4618      	mov	r0, r3
 8004098:	370c      	adds	r7, #12
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr

080040a2 <_ZN6Logger8saveLogsEPKcS1_>:

void Logger::saveLogs(const char *folder_name, const char *file_name)
{
 80040a2:	b580      	push	{r7, lr}
 80040a4:	b086      	sub	sp, #24
 80040a6:	af02      	add	r7, sp, #8
 80040a8:	60f8      	str	r0, [r7, #12]
 80040aa:	60b9      	str	r1, [r7, #8]
 80040ac:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM, store_data_float_, OVER_WRITE); //write
 80040ae:	68fa      	ldr	r2, [r7, #12]
 80040b0:	2300      	movs	r3, #0
 80040b2:	9300      	str	r3, [sp, #0]
 80040b4:	4613      	mov	r3, r2
 80040b6:	2201      	movs	r2, #1
 80040b8:	6879      	ldr	r1, [r7, #4]
 80040ba:	68b8      	ldr	r0, [r7, #8]
 80040bc:	f7fd faa2 	bl	8001604 <sd_write_array_float>
}
 80040c0:	bf00      	nop
 80040c2:	3710      	adds	r7, #16
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <_ZN6Logger9saveLogs2EPKcS1_>:
void Logger::saveLogs2(const char *folder_name, const char *file_name)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b086      	sub	sp, #24
 80040cc:	af02      	add	r7, sp, #8
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM2, store_data_float2_, OVER_WRITE); //write
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	1d1a      	adds	r2, r3, #4
 80040d8:	2300      	movs	r3, #0
 80040da:	9300      	str	r3, [sp, #0]
 80040dc:	4613      	mov	r3, r2
 80040de:	2201      	movs	r2, #1
 80040e0:	6879      	ldr	r1, [r7, #4]
 80040e2:	68b8      	ldr	r0, [r7, #8]
 80040e4:	f7fd fa8e 	bl	8001604 <sd_write_array_float>
}
 80040e8:	bf00      	nop
 80040ea:	3710      	adds	r7, #16
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}

080040f0 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>:

void Logger::saveDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b086      	sub	sp, #24
 80040f4:	af02      	add	r7, sp, #8
 80040f6:	60f8      	str	r0, [r7, #12]
 80040f8:	60b9      	str	r1, [r7, #8]
 80040fa:	607a      	str	r2, [r7, #4]
 80040fc:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_, OVER_WRITE); //write
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	f103 0208 	add.w	r2, r3, #8
 8004104:	2300      	movs	r3, #0
 8004106:	9300      	str	r3, [sp, #0]
 8004108:	4613      	mov	r3, r2
 800410a:	f241 7270 	movw	r2, #6000	; 0x1770
 800410e:	6879      	ldr	r1, [r7, #4]
 8004110:	68b8      	ldr	r0, [r7, #8]
 8004112:	f7fd fa77 	bl	8001604 <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_, OVER_WRITE); //write
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 800411c:	3348      	adds	r3, #72	; 0x48
 800411e:	2200      	movs	r2, #0
 8004120:	9200      	str	r2, [sp, #0]
 8004122:	f241 7270 	movw	r2, #6000	; 0x1770
 8004126:	6839      	ldr	r1, [r7, #0]
 8004128:	68b8      	ldr	r0, [r7, #8]
 800412a:	f7fd fa6b 	bl	8001604 <sd_write_array_float>
}
 800412e:	bf00      	nop
 8004130:	3710      	adds	r7, #16
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}

08004136 <_ZN6Logger21saveDistanceAndTheta2EPKcS1_S1_>:

void Logger::saveDistanceAndTheta2(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8004136:	b580      	push	{r7, lr}
 8004138:	b086      	sub	sp, #24
 800413a:	af02      	add	r7, sp, #8
 800413c:	60f8      	str	r0, [r7, #12]
 800413e:	60b9      	str	r1, [r7, #8]
 8004140:	607a      	str	r2, [r7, #4]
 8004142:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance2_, OVER_WRITE); //write
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 800414a:	3388      	adds	r3, #136	; 0x88
 800414c:	2200      	movs	r2, #0
 800414e:	9200      	str	r2, [sp, #0]
 8004150:	f241 7270 	movw	r2, #6000	; 0x1770
 8004154:	6879      	ldr	r1, [r7, #4]
 8004156:	68b8      	ldr	r0, [r7, #8]
 8004158:	f7fd fa54 	bl	8001604 <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta2_, OVER_WRITE); //write
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8004162:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8004166:	2200      	movs	r2, #0
 8004168:	9200      	str	r2, [sp, #0]
 800416a:	f241 7270 	movw	r2, #6000	; 0x1770
 800416e:	6839      	ldr	r1, [r7, #0]
 8004170:	68b8      	ldr	r0, [r7, #8]
 8004172:	f7fd fa47 	bl	8001604 <sd_write_array_float>
}
 8004176:	bf00      	nop
 8004178:	3710      	adds	r7, #16
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}

0800417e <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>:

void Logger::importDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 800417e:	b580      	push	{r7, lr}
 8004180:	b084      	sub	sp, #16
 8004182:	af00      	add	r7, sp, #0
 8004184:	60f8      	str	r0, [r7, #12]
 8004186:	60b9      	str	r1, [r7, #8]
 8004188:	607a      	str	r2, [r7, #4]
 800418a:	603b      	str	r3, [r7, #0]
	sd_read_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_); //read
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	3308      	adds	r3, #8
 8004190:	f241 7270 	movw	r2, #6000	; 0x1770
 8004194:	6879      	ldr	r1, [r7, #4]
 8004196:	68b8      	ldr	r0, [r7, #8]
 8004198:	f7fd fa9a 	bl	80016d0 <sd_read_array_float>
	sd_read_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_); //read
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 80041a2:	3348      	adds	r3, #72	; 0x48
 80041a4:	f241 7270 	movw	r2, #6000	; 0x1770
 80041a8:	6839      	ldr	r1, [r7, #0]
 80041aa:	68b8      	ldr	r0, [r7, #8]
 80041ac:	f7fd fa90 	bl	80016d0 <sd_read_array_float>
}
 80041b0:	bf00      	nop
 80041b2:	3710      	adds	r7, #16
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <_ZN6Logger10resetLogs2Ev>:
	log_index_tim_ = 0;
	log_index_dis_ = 0;
}

void Logger::resetLogs2()
{
 80041b8:	b480      	push	{r7}
 80041ba:	b08b      	sub	sp, #44	; 0x2c
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
	for(auto &log : store_distance2_){
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 80041c6:	3388      	adds	r3, #136	; 0x88
 80041c8:	61fb      	str	r3, [r7, #28]
 80041ca:	69fb      	ldr	r3, [r7, #28]
 80041cc:	627b      	str	r3, [r7, #36]	; 0x24
 80041ce:	69fb      	ldr	r3, [r7, #28]
 80041d0:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 80041d4:	3340      	adds	r3, #64	; 0x40
 80041d6:	61bb      	str	r3, [r7, #24]
 80041d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041da:	69bb      	ldr	r3, [r7, #24]
 80041dc:	429a      	cmp	r2, r3
 80041de:	d009      	beq.n	80041f4 <_ZN6Logger10resetLogs2Ev+0x3c>
 80041e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e2:	617b      	str	r3, [r7, #20]
		log = 0;
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	f04f 0200 	mov.w	r2, #0
 80041ea:	601a      	str	r2, [r3, #0]
	for(auto &log : store_distance2_){
 80041ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ee:	3304      	adds	r3, #4
 80041f0:	627b      	str	r3, [r7, #36]	; 0x24
 80041f2:	e7f1      	b.n	80041d8 <_ZN6Logger10resetLogs2Ev+0x20>
	}
	for(auto &log : store_theta2_){
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 80041fa:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 80041fe:	613b      	str	r3, [r7, #16]
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	623b      	str	r3, [r7, #32]
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 800420a:	3340      	adds	r3, #64	; 0x40
 800420c:	60fb      	str	r3, [r7, #12]
 800420e:	6a3a      	ldr	r2, [r7, #32]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	429a      	cmp	r2, r3
 8004214:	d009      	beq.n	800422a <_ZN6Logger10resetLogs2Ev+0x72>
 8004216:	6a3b      	ldr	r3, [r7, #32]
 8004218:	60bb      	str	r3, [r7, #8]
		log = 0;
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	f04f 0200 	mov.w	r2, #0
 8004220:	601a      	str	r2, [r3, #0]
	for(auto &log : store_theta2_){
 8004222:	6a3b      	ldr	r3, [r7, #32]
 8004224:	3304      	adds	r3, #4
 8004226:	623b      	str	r3, [r7, #32]
 8004228:	e7f1      	b.n	800420e <_ZN6Logger10resetLogs2Ev+0x56>
	}

	log_index_tim_ = 0;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004230:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8004234:	2200      	movs	r2, #0
 8004236:	801a      	strh	r2, [r3, #0]
	log_index_dis_ = 0;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800423e:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8004242:	2200      	movs	r2, #0
 8004244:	801a      	strh	r2, [r3, #0]
}
 8004246:	bf00      	nop
 8004248:	372c      	adds	r7, #44	; 0x2c
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr

08004252 <_ZN6Logger8resetIdxEv>:
void Logger::resetIdx()
{
 8004252:	b480      	push	{r7}
 8004254:	b083      	sub	sp, #12
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]
	log_index_tim_ = 0;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004260:	f503 7385 	add.w	r3, r3, #266	; 0x10a
 8004264:	2200      	movs	r2, #0
 8004266:	801a      	strh	r2, [r3, #0]
	log_index_dis_ = 0;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 800426e:	f503 7387 	add.w	r3, r3, #270	; 0x10e
 8004272:	2200      	movs	r2, #0
 8004274:	801a      	strh	r2, [r3, #0]
}
 8004276:	bf00      	nop
 8004278:	370c      	adds	r7, #12
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr

08004282 <_ZN6Logger5startEv>:

void Logger::start()
{
 8004282:	b480      	push	{r7}
 8004284:	b083      	sub	sp, #12
 8004286:	af00      	add	r7, sp, #0
 8004288:	6078      	str	r0, [r7, #4]
	recording_flag_ = true;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004290:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8004294:	2201      	movs	r2, #1
 8004296:	701a      	strb	r2, [r3, #0]
}
 8004298:	bf00      	nop
 800429a:	370c      	adds	r7, #12
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr

080042a4 <_ZN6Logger4stopEv>:

void Logger::stop()
{
 80042a4:	b480      	push	{r7}
 80042a6:	b083      	sub	sp, #12
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
	recording_flag_ = false;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80042b2:	f503 7384 	add.w	r3, r3, #264	; 0x108
 80042b6:	2200      	movs	r2, #0
 80042b8:	701a      	strb	r2, [r3, #0]
}
 80042ba:	bf00      	nop
 80042bc:	370c      	adds	r7, #12
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr

080042c6 <_ZN5MotorC1Ev>:

#include "Motor.hpp"
#include "G_variables.h"


Motor::Motor() : temp_left_counter_period_(0), temp_right_counter_period_(0){}
 80042c6:	b480      	push	{r7}
 80042c8:	b083      	sub	sp, #12
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	6078      	str	r0, [r7, #4]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2200      	movs	r2, #0
 80042d2:	801a      	strh	r2, [r3, #0]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2200      	movs	r2, #0
 80042d8:	805a      	strh	r2, [r3, #2]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	4618      	mov	r0, r3
 80042de:	370c      	adds	r7, #12
 80042e0:	46bd      	mov	sp, r7
 80042e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e6:	4770      	bx	lr

080042e8 <_ZN5Motor4initEv>:

void Motor::init()
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b082      	sub	sp, #8
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
	//PWM start
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80042f0:	2108      	movs	r1, #8
 80042f2:	4805      	ldr	r0, [pc, #20]	; (8004308 <_ZN5Motor4initEv+0x20>)
 80042f4:	f009 f9fa 	bl	800d6ec <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80042f8:	210c      	movs	r1, #12
 80042fa:	4803      	ldr	r0, [pc, #12]	; (8004308 <_ZN5Motor4initEv+0x20>)
 80042fc:	f009 f9f6 	bl	800d6ec <HAL_TIM_PWM_Start>

}
 8004300:	bf00      	nop
 8004302:	3708      	adds	r7, #8
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}
 8004308:	2003e8a4 	.word	0x2003e8a4

0800430c <_ZN5Motor9motorCtrlEv>:

void Motor::motorCtrl()
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
	uint16_t left_counter_period, right_counter_period;

	if(temp_left_counter_period_ < 0) {
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	f9b3 3000 	ldrsh.w	r3, [r3]
 800431a:	2b00      	cmp	r3, #0
 800431c:	da0d      	bge.n	800433a <_ZN5Motor9motorCtrlEv+0x2e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 800431e:	2200      	movs	r2, #0
 8004320:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004324:	481f      	ldr	r0, [pc, #124]	; (80043a4 <_ZN5Motor9motorCtrlEv+0x98>)
 8004326:	f005 fac7 	bl	80098b8 <HAL_GPIO_WritePin>
		left_counter_period = -1 * temp_left_counter_period_;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004330:	b29b      	uxth	r3, r3
 8004332:	425b      	negs	r3, r3
 8004334:	b29b      	uxth	r3, r3
 8004336:	81fb      	strh	r3, [r7, #14]
 8004338:	e00a      	b.n	8004350 <_ZN5Motor9motorCtrlEv+0x44>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 800433a:	2201      	movs	r2, #1
 800433c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004340:	4818      	ldr	r0, [pc, #96]	; (80043a4 <_ZN5Motor9motorCtrlEv+0x98>)
 8004342:	f005 fab9 	bl	80098b8 <HAL_GPIO_WritePin>
		left_counter_period = temp_left_counter_period_;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f9b3 3000 	ldrsh.w	r3, [r3]
 800434c:	b29b      	uxth	r3, r3
 800434e:	81fb      	strh	r3, [r7, #14]
	}

	if(temp_right_counter_period_ < 0) {
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004356:	2b00      	cmp	r3, #0
 8004358:	da0d      	bge.n	8004376 <_ZN5Motor9motorCtrlEv+0x6a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 800435a:	2201      	movs	r2, #1
 800435c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004360:	4810      	ldr	r0, [pc, #64]	; (80043a4 <_ZN5Motor9motorCtrlEv+0x98>)
 8004362:	f005 faa9 	bl	80098b8 <HAL_GPIO_WritePin>
		right_counter_period = -1 * temp_right_counter_period_;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800436c:	b29b      	uxth	r3, r3
 800436e:	425b      	negs	r3, r3
 8004370:	b29b      	uxth	r3, r3
 8004372:	81bb      	strh	r3, [r7, #12]
 8004374:	e00a      	b.n	800438c <_ZN5Motor9motorCtrlEv+0x80>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 8004376:	2200      	movs	r2, #0
 8004378:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800437c:	4809      	ldr	r0, [pc, #36]	; (80043a4 <_ZN5Motor9motorCtrlEv+0x98>)
 800437e:	f005 fa9b 	bl	80098b8 <HAL_GPIO_WritePin>
		right_counter_period = temp_right_counter_period_;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004388:	b29b      	uxth	r3, r3
 800438a:	81bb      	strh	r3, [r7, #12]
	}

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, left_counter_period);
 800438c:	89fa      	ldrh	r2, [r7, #14]
 800438e:	4b06      	ldr	r3, [pc, #24]	; (80043a8 <_ZN5Motor9motorCtrlEv+0x9c>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, right_counter_period);
 8004394:	89ba      	ldrh	r2, [r7, #12]
 8004396:	4b04      	ldr	r3, [pc, #16]	; (80043a8 <_ZN5Motor9motorCtrlEv+0x9c>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800439c:	bf00      	nop
 800439e:	3710      	adds	r7, #16
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}
 80043a4:	40020c00 	.word	0x40020c00
 80043a8:	2003e8a4 	.word	0x2003e8a4

080043ac <_ZN5Motor8setRatioEdd>:

void Motor::setRatio(double left_ratio, double right_ratio)
{
 80043ac:	b590      	push	{r4, r7, lr}
 80043ae:	b087      	sub	sp, #28
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6178      	str	r0, [r7, #20]
 80043b4:	ed87 0b02 	vstr	d0, [r7, #8]
 80043b8:	ed87 1b00 	vstr	d1, [r7]
	if(left_ratio > 1) left_ratio = 1;
 80043bc:	f04f 0200 	mov.w	r2, #0
 80043c0:	4b30      	ldr	r3, [pc, #192]	; (8004484 <_ZN5Motor8setRatioEdd+0xd8>)
 80043c2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80043c6:	f7fc fbbf 	bl	8000b48 <__aeabi_dcmpgt>
 80043ca:	4603      	mov	r3, r0
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d005      	beq.n	80043dc <_ZN5Motor8setRatioEdd+0x30>
 80043d0:	f04f 0300 	mov.w	r3, #0
 80043d4:	4c2b      	ldr	r4, [pc, #172]	; (8004484 <_ZN5Motor8setRatioEdd+0xd8>)
 80043d6:	e9c7 3402 	strd	r3, r4, [r7, #8]
 80043da:	e00e      	b.n	80043fa <_ZN5Motor8setRatioEdd+0x4e>
	else if(left_ratio < -1) left_ratio = -1;
 80043dc:	f04f 0200 	mov.w	r2, #0
 80043e0:	4b29      	ldr	r3, [pc, #164]	; (8004488 <_ZN5Motor8setRatioEdd+0xdc>)
 80043e2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80043e6:	f7fc fb91 	bl	8000b0c <__aeabi_dcmplt>
 80043ea:	4603      	mov	r3, r0
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d004      	beq.n	80043fa <_ZN5Motor8setRatioEdd+0x4e>
 80043f0:	f04f 0300 	mov.w	r3, #0
 80043f4:	4c24      	ldr	r4, [pc, #144]	; (8004488 <_ZN5Motor8setRatioEdd+0xdc>)
 80043f6:	e9c7 3402 	strd	r3, r4, [r7, #8]
	if(right_ratio > 1) right_ratio = 1;
 80043fa:	f04f 0200 	mov.w	r2, #0
 80043fe:	4b21      	ldr	r3, [pc, #132]	; (8004484 <_ZN5Motor8setRatioEdd+0xd8>)
 8004400:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004404:	f7fc fba0 	bl	8000b48 <__aeabi_dcmpgt>
 8004408:	4603      	mov	r3, r0
 800440a:	2b00      	cmp	r3, #0
 800440c:	d005      	beq.n	800441a <_ZN5Motor8setRatioEdd+0x6e>
 800440e:	f04f 0300 	mov.w	r3, #0
 8004412:	4c1c      	ldr	r4, [pc, #112]	; (8004484 <_ZN5Motor8setRatioEdd+0xd8>)
 8004414:	e9c7 3400 	strd	r3, r4, [r7]
 8004418:	e00e      	b.n	8004438 <_ZN5Motor8setRatioEdd+0x8c>
	else if(right_ratio < -1) right_ratio = -1;
 800441a:	f04f 0200 	mov.w	r2, #0
 800441e:	4b1a      	ldr	r3, [pc, #104]	; (8004488 <_ZN5Motor8setRatioEdd+0xdc>)
 8004420:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004424:	f7fc fb72 	bl	8000b0c <__aeabi_dcmplt>
 8004428:	4603      	mov	r3, r0
 800442a:	2b00      	cmp	r3, #0
 800442c:	d004      	beq.n	8004438 <_ZN5Motor8setRatioEdd+0x8c>
 800442e:	f04f 0300 	mov.w	r3, #0
 8004432:	4c15      	ldr	r4, [pc, #84]	; (8004488 <_ZN5Motor8setRatioEdd+0xdc>)
 8004434:	e9c7 3400 	strd	r3, r4, [r7]

	temp_left_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * left_ratio);
 8004438:	f04f 0200 	mov.w	r2, #0
 800443c:	4b13      	ldr	r3, [pc, #76]	; (800448c <_ZN5Motor8setRatioEdd+0xe0>)
 800443e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004442:	f7fc f8f1 	bl	8000628 <__aeabi_dmul>
 8004446:	4603      	mov	r3, r0
 8004448:	460c      	mov	r4, r1
 800444a:	4618      	mov	r0, r3
 800444c:	4621      	mov	r1, r4
 800444e:	f7fc fb9b 	bl	8000b88 <__aeabi_d2iz>
 8004452:	4603      	mov	r3, r0
 8004454:	b21a      	sxth	r2, r3
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	801a      	strh	r2, [r3, #0]
	temp_right_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * right_ratio);
 800445a:	f04f 0200 	mov.w	r2, #0
 800445e:	4b0b      	ldr	r3, [pc, #44]	; (800448c <_ZN5Motor8setRatioEdd+0xe0>)
 8004460:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004464:	f7fc f8e0 	bl	8000628 <__aeabi_dmul>
 8004468:	4603      	mov	r3, r0
 800446a:	460c      	mov	r4, r1
 800446c:	4618      	mov	r0, r3
 800446e:	4621      	mov	r1, r4
 8004470:	f7fc fb8a 	bl	8000b88 <__aeabi_d2iz>
 8004474:	4603      	mov	r3, r0
 8004476:	b21a      	sxth	r2, r3
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	805a      	strh	r2, [r3, #2]

}
 800447c:	bf00      	nop
 800447e:	371c      	adds	r7, #28
 8004480:	46bd      	mov	sp, r7
 8004482:	bd90      	pop	{r4, r7, pc}
 8004484:	3ff00000 	.word	0x3ff00000
 8004488:	bff00000 	.word	0xbff00000
 800448c:	409c2000 	.word	0x409c2000

08004490 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>:

#define DELTA_T 0.001

float monitor_x, monitor_y, monitor_theta;

Odometry::Odometry(Encoder *encoder, IMU *imu, VelocityCtrl *velocity_ctrl) : x_robot_(0), y_robot_(0), theta_(0), x_sens_(0), y_sens_(0)
 8004490:	b490      	push	{r4, r7}
 8004492:	b084      	sub	sp, #16
 8004494:	af00      	add	r7, sp, #0
 8004496:	60f8      	str	r0, [r7, #12]
 8004498:	60b9      	str	r1, [r7, #8]
 800449a:	607a      	str	r2, [r7, #4]
 800449c:	603b      	str	r3, [r7, #0]
 800449e:	68fa      	ldr	r2, [r7, #12]
 80044a0:	f04f 0300 	mov.w	r3, #0
 80044a4:	f04f 0400 	mov.w	r4, #0
 80044a8:	e9c2 3404 	strd	r3, r4, [r2, #16]
 80044ac:	68fa      	ldr	r2, [r7, #12]
 80044ae:	f04f 0300 	mov.w	r3, #0
 80044b2:	f04f 0400 	mov.w	r4, #0
 80044b6:	e9c2 3406 	strd	r3, r4, [r2, #24]
 80044ba:	68fa      	ldr	r2, [r7, #12]
 80044bc:	f04f 0300 	mov.w	r3, #0
 80044c0:	f04f 0400 	mov.w	r4, #0
 80044c4:	e9c2 3408 	strd	r3, r4, [r2, #32]
 80044c8:	68fa      	ldr	r2, [r7, #12]
 80044ca:	f04f 0300 	mov.w	r3, #0
 80044ce:	f04f 0400 	mov.w	r4, #0
 80044d2:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
 80044d6:	68fa      	ldr	r2, [r7, #12]
 80044d8:	f04f 0300 	mov.w	r3, #0
 80044dc:	f04f 0400 	mov.w	r4, #0
 80044e0:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
{
	encoder_ = encoder;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	68ba      	ldr	r2, [r7, #8]
 80044e8:	601a      	str	r2, [r3, #0]
	imu_ = imu;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	683a      	ldr	r2, [r7, #0]
 80044f4:	609a      	str	r2, [r3, #8]
}
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	4618      	mov	r0, r3
 80044fa:	3710      	adds	r7, #16
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bc90      	pop	{r4, r7}
 8004500:	4770      	bx	lr
 8004502:	0000      	movs	r0, r0
 8004504:	0000      	movs	r0, r0
	...

08004508 <_ZN8Odometry12calcPotitionEv>:


void Odometry::calcPotition()
{
 8004508:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800450c:	b086      	sub	sp, #24
 800450e:	af00      	add	r7, sp, #0
 8004510:	6078      	str	r0, [r7, #4]
	//float current_velocity = velocity_ctrl_->getCurrentVelocity();
	double current_omega = imu_->getOmega();
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	4618      	mov	r0, r3
 8004518:	f7fd fb2e 	bl	8001b78 <_ZN3IMU8getOmegaEv>
 800451c:	ee10 3a10 	vmov	r3, s0
 8004520:	4618      	mov	r0, r3
 8004522:	f7fc f829 	bl	8000578 <__aeabi_f2d>
 8004526:	4603      	mov	r3, r0
 8004528:	460c      	mov	r4, r1
 800452a:	e9c7 3404 	strd	r3, r4, [r7, #16]
	float distance = encoder_->getDistance();
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4618      	mov	r0, r3
 8004534:	f7fc ff7c 	bl	8001430 <_ZN7Encoder11getDistanceEv>
 8004538:	ed87 0a03 	vstr	s0, [r7, #12]

	delta_theta_ = current_omega * DELTA_T;
 800453c:	a376      	add	r3, pc, #472	; (adr r3, 8004718 <_ZN8Odometry12calcPotitionEv+0x210>)
 800453e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004542:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004546:	f7fc f86f 	bl	8000628 <__aeabi_dmul>
 800454a:	4603      	mov	r3, r0
 800454c:	460c      	mov	r4, r1
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38

	x_robot_ = x_robot_ + distance * cos(theta_ + delta_theta_ / 2);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800455a:	68f8      	ldr	r0, [r7, #12]
 800455c:	f7fc f80c 	bl	8000578 <__aeabi_f2d>
 8004560:	4682      	mov	sl, r0
 8004562:	468b      	mov	fp, r1
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8004570:	f04f 0200 	mov.w	r2, #0
 8004574:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004578:	f7fc f980 	bl	800087c <__aeabi_ddiv>
 800457c:	4602      	mov	r2, r0
 800457e:	460b      	mov	r3, r1
 8004580:	4640      	mov	r0, r8
 8004582:	4649      	mov	r1, r9
 8004584:	f7fb fe9a 	bl	80002bc <__adddf3>
 8004588:	4602      	mov	r2, r0
 800458a:	460b      	mov	r3, r1
 800458c:	ec43 2b17 	vmov	d7, r2, r3
 8004590:	eeb0 0a47 	vmov.f32	s0, s14
 8004594:	eef0 0a67 	vmov.f32	s1, s15
 8004598:	f00e fbee 	bl	8012d78 <cos>
 800459c:	ec53 2b10 	vmov	r2, r3, d0
 80045a0:	4650      	mov	r0, sl
 80045a2:	4659      	mov	r1, fp
 80045a4:	f7fc f840 	bl	8000628 <__aeabi_dmul>
 80045a8:	4602      	mov	r2, r0
 80045aa:	460b      	mov	r3, r1
 80045ac:	4620      	mov	r0, r4
 80045ae:	4629      	mov	r1, r5
 80045b0:	f7fb fe84 	bl	80002bc <__adddf3>
 80045b4:	4603      	mov	r3, r0
 80045b6:	460c      	mov	r4, r1
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	e9c2 3404 	strd	r3, r4, [r2, #16]
	y_robot_ = y_robot_ + distance * sin(theta_ + delta_theta_ / 2);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80045c4:	68f8      	ldr	r0, [r7, #12]
 80045c6:	f7fb ffd7 	bl	8000578 <__aeabi_f2d>
 80045ca:	4682      	mov	sl, r0
 80045cc:	468b      	mov	fp, r1
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80045da:	f04f 0200 	mov.w	r2, #0
 80045de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80045e2:	f7fc f94b 	bl	800087c <__aeabi_ddiv>
 80045e6:	4602      	mov	r2, r0
 80045e8:	460b      	mov	r3, r1
 80045ea:	4640      	mov	r0, r8
 80045ec:	4649      	mov	r1, r9
 80045ee:	f7fb fe65 	bl	80002bc <__adddf3>
 80045f2:	4602      	mov	r2, r0
 80045f4:	460b      	mov	r3, r1
 80045f6:	ec43 2b17 	vmov	d7, r2, r3
 80045fa:	eeb0 0a47 	vmov.f32	s0, s14
 80045fe:	eef0 0a67 	vmov.f32	s1, s15
 8004602:	f00e fbfd 	bl	8012e00 <sin>
 8004606:	ec53 2b10 	vmov	r2, r3, d0
 800460a:	4650      	mov	r0, sl
 800460c:	4659      	mov	r1, fp
 800460e:	f7fc f80b 	bl	8000628 <__aeabi_dmul>
 8004612:	4602      	mov	r2, r0
 8004614:	460b      	mov	r3, r1
 8004616:	4620      	mov	r0, r4
 8004618:	4629      	mov	r1, r5
 800461a:	f7fb fe4f 	bl	80002bc <__adddf3>
 800461e:	4603      	mov	r3, r0
 8004620:	460c      	mov	r4, r1
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	e9c2 3406 	strd	r3, r4, [r2, #24]
	theta_= theta_ + delta_theta_;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8004634:	461a      	mov	r2, r3
 8004636:	4623      	mov	r3, r4
 8004638:	f7fb fe40 	bl	80002bc <__adddf3>
 800463c:	4603      	mov	r3, r0
 800463e:	460c      	mov	r4, r1
 8004640:	687a      	ldr	r2, [r7, #4]
 8004642:	e9c2 3408 	strd	r3, r4, [r2, #32]

	x_sens_ = x_robot_ + SENSOR_LENGTH * cos(theta_); //calculate a sensor position from robot's center position
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	ed93 7b08 	vldr	d7, [r3, #32]
 8004652:	eeb0 0a47 	vmov.f32	s0, s14
 8004656:	eef0 0a67 	vmov.f32	s1, s15
 800465a:	f00e fb8d 	bl	8012d78 <cos>
 800465e:	ec51 0b10 	vmov	r0, r1, d0
 8004662:	f04f 0200 	mov.w	r2, #0
 8004666:	4b28      	ldr	r3, [pc, #160]	; (8004708 <_ZN8Odometry12calcPotitionEv+0x200>)
 8004668:	f7fb ffde 	bl	8000628 <__aeabi_dmul>
 800466c:	4602      	mov	r2, r0
 800466e:	460b      	mov	r3, r1
 8004670:	4620      	mov	r0, r4
 8004672:	4629      	mov	r1, r5
 8004674:	f7fb fe22 	bl	80002bc <__adddf3>
 8004678:	4603      	mov	r3, r0
 800467a:	460c      	mov	r4, r1
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	y_sens_ = y_robot_ + SENSOR_LENGTH * sin(theta_);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	ed93 7b08 	vldr	d7, [r3, #32]
 800468e:	eeb0 0a47 	vmov.f32	s0, s14
 8004692:	eef0 0a67 	vmov.f32	s1, s15
 8004696:	f00e fbb3 	bl	8012e00 <sin>
 800469a:	ec51 0b10 	vmov	r0, r1, d0
 800469e:	f04f 0200 	mov.w	r2, #0
 80046a2:	4b19      	ldr	r3, [pc, #100]	; (8004708 <_ZN8Odometry12calcPotitionEv+0x200>)
 80046a4:	f7fb ffc0 	bl	8000628 <__aeabi_dmul>
 80046a8:	4602      	mov	r2, r0
 80046aa:	460b      	mov	r3, r1
 80046ac:	4620      	mov	r0, r4
 80046ae:	4629      	mov	r1, r5
 80046b0:	f7fb fe04 	bl	80002bc <__adddf3>
 80046b4:	4603      	mov	r3, r0
 80046b6:	460c      	mov	r4, r1
 80046b8:	687a      	ldr	r2, [r7, #4]
 80046ba:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30

	monitor_x = x_sens_;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 80046c4:	4618      	mov	r0, r3
 80046c6:	4621      	mov	r1, r4
 80046c8:	f7fc faa6 	bl	8000c18 <__aeabi_d2f>
 80046cc:	4602      	mov	r2, r0
 80046ce:	4b0f      	ldr	r3, [pc, #60]	; (800470c <_ZN8Odometry12calcPotitionEv+0x204>)
 80046d0:	601a      	str	r2, [r3, #0]
	monitor_y = y_sens_;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 80046d8:	4618      	mov	r0, r3
 80046da:	4621      	mov	r1, r4
 80046dc:	f7fc fa9c 	bl	8000c18 <__aeabi_d2f>
 80046e0:	4602      	mov	r2, r0
 80046e2:	4b0b      	ldr	r3, [pc, #44]	; (8004710 <_ZN8Odometry12calcPotitionEv+0x208>)
 80046e4:	601a      	str	r2, [r3, #0]
	monitor_theta = theta_;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 80046ec:	4618      	mov	r0, r3
 80046ee:	4621      	mov	r1, r4
 80046f0:	f7fc fa92 	bl	8000c18 <__aeabi_d2f>
 80046f4:	4602      	mov	r2, r0
 80046f6:	4b07      	ldr	r3, [pc, #28]	; (8004714 <_ZN8Odometry12calcPotitionEv+0x20c>)
 80046f8:	601a      	str	r2, [r3, #0]
}
 80046fa:	bf00      	nop
 80046fc:	3718      	adds	r7, #24
 80046fe:	46bd      	mov	sp, r7
 8004700:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004704:	f3af 8000 	nop.w
 8004708:	405b8000 	.word	0x405b8000
 800470c:	20000298 	.word	0x20000298
 8004710:	2000029c 	.word	0x2000029c
 8004714:	200002a0 	.word	0x200002a0
 8004718:	d2f1a9fc 	.word	0xd2f1a9fc
 800471c:	3f50624d 	.word	0x3f50624d

08004720 <_ZN8Odometry4flipEv>:

void Odometry::flip()
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b082      	sub	sp, #8
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
	calcPotition();
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f7ff feed 	bl	8004508 <_ZN8Odometry12calcPotitionEv>
}
 800472e:	bf00      	nop
 8004730:	3708      	adds	r7, #8
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}

08004736 <_ZN8Odometry8getThetaEv>:
{
	return y_sens_;
}

double Odometry::getTheta()
{
 8004736:	b490      	push	{r4, r7}
 8004738:	b082      	sub	sp, #8
 800473a:	af00      	add	r7, sp, #0
 800473c:	6078      	str	r0, [r7, #4]
	return theta_;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8004744:	ec44 3b17 	vmov	d7, r3, r4
}
 8004748:	eeb0 0a47 	vmov.f32	s0, s14
 800474c:	eef0 0a67 	vmov.f32	s1, s15
 8004750:	3708      	adds	r7, #8
 8004752:	46bd      	mov	sp, r7
 8004754:	bc90      	pop	{r4, r7}
 8004756:	4770      	bx	lr

08004758 <_ZN8Odometry13clearPotitionEv>:
{
	return delta_theta_;
}

void Odometry::clearPotition()
{
 8004758:	b490      	push	{r4, r7}
 800475a:	b082      	sub	sp, #8
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
	x_sens_ = 0;
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	f04f 0300 	mov.w	r3, #0
 8004766:	f04f 0400 	mov.w	r4, #0
 800476a:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	y_sens_ = 0;
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	f04f 0300 	mov.w	r3, #0
 8004774:	f04f 0400 	mov.w	r4, #0
 8004778:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	theta_ = 0;
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	f04f 0300 	mov.w	r3, #0
 8004782:	f04f 0400 	mov.w	r4, #0
 8004786:	e9c2 3408 	strd	r3, r4, [r2, #32]
}
 800478a:	bf00      	nop
 800478c:	3708      	adds	r7, #8
 800478e:	46bd      	mov	sp, r7
 8004790:	bc90      	pop	{r4, r7}
 8004792:	4770      	bx	lr

08004794 <_ZN13PathFollowingC1Ev>:

uint16_t mon_ref_num;
double mon_x, mon_y, mon_th;
double mon_log_dis, mon_log_th;

PathFollowing::PathFollowing() : execute_flag_(false), x_tar_(0), y_tar_(0), th_tar_(0), ref_num(0)
 8004794:	b490      	push	{r4, r7}
 8004796:	b082      	sub	sp, #8
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	701a      	strb	r2, [r3, #0]
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	f04f 0300 	mov.w	r3, #0
 80047a8:	f04f 0400 	mov.w	r4, #0
 80047ac:	e9c2 3402 	strd	r3, r4, [r2, #8]
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	f04f 0300 	mov.w	r3, #0
 80047b6:	f04f 0400 	mov.w	r4, #0
 80047ba:	e9c2 3404 	strd	r3, r4, [r2, #16]
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	f04f 0300 	mov.w	r3, #0
 80047c4:	f04f 0400 	mov.w	r4, #0
 80047c8:	e9c2 3406 	strd	r3, r4, [r2, #24]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 80047d2:	f503 7390 	add.w	r3, r3, #288	; 0x120
 80047d6:	2200      	movs	r2, #0
 80047d8:	801a      	strh	r2, [r3, #0]
{
	rtParam.kx = 0;
 80047da:	4a29      	ldr	r2, [pc, #164]	; (8004880 <_ZN13PathFollowingC1Ev+0xec>)
 80047dc:	f04f 0300 	mov.w	r3, #0
 80047e0:	f04f 0400 	mov.w	r4, #0
 80047e4:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = 0;
 80047e8:	4a25      	ldr	r2, [pc, #148]	; (8004880 <_ZN13PathFollowingC1Ev+0xec>)
 80047ea:	f04f 0300 	mov.w	r3, #0
 80047ee:	f04f 0400 	mov.w	r4, #0
 80047f2:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = 0;
 80047f6:	4a22      	ldr	r2, [pc, #136]	; (8004880 <_ZN13PathFollowingC1Ev+0xec>)
 80047f8:	f04f 0300 	mov.w	r3, #0
 80047fc:	f04f 0400 	mov.w	r4, #0
 8004800:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.target_x = 0;
 8004804:	4a1f      	ldr	r2, [pc, #124]	; (8004884 <_ZN13PathFollowingC1Ev+0xf0>)
 8004806:	f04f 0300 	mov.w	r3, #0
 800480a:	f04f 0400 	mov.w	r4, #0
 800480e:	e9c2 3400 	strd	r3, r4, [r2]
	rtU.target_y = 0;
 8004812:	4a1c      	ldr	r2, [pc, #112]	; (8004884 <_ZN13PathFollowingC1Ev+0xf0>)
 8004814:	f04f 0300 	mov.w	r3, #0
 8004818:	f04f 0400 	mov.w	r4, #0
 800481c:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtU.th = 0;
 8004820:	4a18      	ldr	r2, [pc, #96]	; (8004884 <_ZN13PathFollowingC1Ev+0xf0>)
 8004822:	f04f 0300 	mov.w	r3, #0
 8004826:	f04f 0400 	mov.w	r4, #0
 800482a:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.x = 0;
 800482e:	4a15      	ldr	r2, [pc, #84]	; (8004884 <_ZN13PathFollowingC1Ev+0xf0>)
 8004830:	f04f 0300 	mov.w	r3, #0
 8004834:	f04f 0400 	mov.w	r4, #0
 8004838:	e9c2 3406 	strd	r3, r4, [r2, #24]
	rtU.y = 0;
 800483c:	4a11      	ldr	r2, [pc, #68]	; (8004884 <_ZN13PathFollowingC1Ev+0xf0>)
 800483e:	f04f 0300 	mov.w	r3, #0
 8004842:	f04f 0400 	mov.w	r4, #0
 8004846:	e9c2 3408 	strd	r3, r4, [r2, #32]
	rtU.th_cur = 0;
 800484a:	4a0e      	ldr	r2, [pc, #56]	; (8004884 <_ZN13PathFollowingC1Ev+0xf0>)
 800484c:	f04f 0300 	mov.w	r3, #0
 8004850:	f04f 0400 	mov.w	r4, #0
 8004854:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	rtY.V_tar = 0;
 8004858:	4a0b      	ldr	r2, [pc, #44]	; (8004888 <_ZN13PathFollowingC1Ev+0xf4>)
 800485a:	f04f 0300 	mov.w	r3, #0
 800485e:	f04f 0400 	mov.w	r4, #0
 8004862:	e9c2 3400 	strd	r3, r4, [r2]
	rtY.tar = 0;
 8004866:	4a08      	ldr	r2, [pc, #32]	; (8004888 <_ZN13PathFollowingC1Ev+0xf4>)
 8004868:	f04f 0300 	mov.w	r3, #0
 800486c:	f04f 0400 	mov.w	r4, #0
 8004870:	e9c2 3402 	strd	r3, r4, [r2, #8]

}
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	4618      	mov	r0, r3
 8004878:	3708      	adds	r7, #8
 800487a:	46bd      	mov	sp, r7
 800487c:	bc90      	pop	{r4, r7}
 800487e:	4770      	bx	lr
 8004880:	2003eda8 	.word	0x2003eda8
 8004884:	2003ed38 	.word	0x2003ed38
 8004888:	2003ed98 	.word	0x2003ed98

0800488c <_ZN13PathFollowing4initEv>:
	}

}

void PathFollowing::init()
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b088      	sub	sp, #32
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
	path_following_initialize();
 8004894:	f001 fc82 	bl	800619c <path_following_initialize>

	double temp_kx, temp_ky, temp_kt;
	sd_read_array_double("PARAMS", "KX.TXT", 1, &temp_kx);
 8004898:	f107 0318 	add.w	r3, r7, #24
 800489c:	2201      	movs	r2, #1
 800489e:	4915      	ldr	r1, [pc, #84]	; (80048f4 <_ZN13PathFollowing4initEv+0x68>)
 80048a0:	4815      	ldr	r0, [pc, #84]	; (80048f8 <_ZN13PathFollowing4initEv+0x6c>)
 80048a2:	f7fc ff5b 	bl	800175c <sd_read_array_double>
	sd_read_array_double("PARAMS", "KY.TXT", 1, &temp_ky);
 80048a6:	f107 0310 	add.w	r3, r7, #16
 80048aa:	2201      	movs	r2, #1
 80048ac:	4913      	ldr	r1, [pc, #76]	; (80048fc <_ZN13PathFollowing4initEv+0x70>)
 80048ae:	4812      	ldr	r0, [pc, #72]	; (80048f8 <_ZN13PathFollowing4initEv+0x6c>)
 80048b0:	f7fc ff54 	bl	800175c <sd_read_array_double>
	sd_read_array_double("PARAMS", "KT.TXT", 1, &temp_kt);
 80048b4:	f107 0308 	add.w	r3, r7, #8
 80048b8:	2201      	movs	r2, #1
 80048ba:	4911      	ldr	r1, [pc, #68]	; (8004900 <_ZN13PathFollowing4initEv+0x74>)
 80048bc:	480e      	ldr	r0, [pc, #56]	; (80048f8 <_ZN13PathFollowing4initEv+0x6c>)
 80048be:	f7fc ff4d 	bl	800175c <sd_read_array_double>
	setGain(temp_kx, temp_ky, temp_kt);
 80048c2:	ed97 7b06 	vldr	d7, [r7, #24]
 80048c6:	ed97 6b04 	vldr	d6, [r7, #16]
 80048ca:	ed97 5b02 	vldr	d5, [r7, #8]
 80048ce:	eeb0 2a45 	vmov.f32	s4, s10
 80048d2:	eef0 2a65 	vmov.f32	s5, s11
 80048d6:	eeb0 1a46 	vmov.f32	s2, s12
 80048da:	eef0 1a66 	vmov.f32	s3, s13
 80048de:	eeb0 0a47 	vmov.f32	s0, s14
 80048e2:	eef0 0a67 	vmov.f32	s1, s15
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f000 f80c 	bl	8004904 <_ZN13PathFollowing7setGainEddd>
}
 80048ec:	bf00      	nop
 80048ee:	3720      	adds	r7, #32
 80048f0:	46bd      	mov	sp, r7
 80048f2:	bd80      	pop	{r7, pc}
 80048f4:	080183a4 	.word	0x080183a4
 80048f8:	080183ac 	.word	0x080183ac
 80048fc:	080183b4 	.word	0x080183b4
 8004900:	080183bc 	.word	0x080183bc

08004904 <_ZN13PathFollowing7setGainEddd>:

void PathFollowing::setGain(double kx, double ky, double kt)
{
 8004904:	b490      	push	{r4, r7}
 8004906:	b088      	sub	sp, #32
 8004908:	af00      	add	r7, sp, #0
 800490a:	61f8      	str	r0, [r7, #28]
 800490c:	ed87 0b04 	vstr	d0, [r7, #16]
 8004910:	ed87 1b02 	vstr	d1, [r7, #8]
 8004914:	ed87 2b00 	vstr	d2, [r7]
	rtParam.kx = kx;
 8004918:	4a09      	ldr	r2, [pc, #36]	; (8004940 <_ZN13PathFollowing7setGainEddd+0x3c>)
 800491a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800491e:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = ky;
 8004922:	4a07      	ldr	r2, [pc, #28]	; (8004940 <_ZN13PathFollowing7setGainEddd+0x3c>)
 8004924:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8004928:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = kt;
 800492c:	4a04      	ldr	r2, [pc, #16]	; (8004940 <_ZN13PathFollowing7setGainEddd+0x3c>)
 800492e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8004932:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 8004936:	bf00      	nop
 8004938:	3720      	adds	r7, #32
 800493a:	46bd      	mov	sp, r7
 800493c:	bc90      	pop	{r4, r7}
 800493e:	4770      	bx	lr
 8004940:	2003eda8 	.word	0x2003eda8

08004944 <_ZN11PowerSensor4initEv>:
#define LOW_VOLTAGE_THRESHOLD 7.4

float monitor_voltage;

void PowerSensor::init()
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b082      	sub	sp, #8
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT);
 800494c:	2088      	movs	r0, #136	; 0x88
 800494e:	f7fd fa56 	bl	8001dfe <INA260_init>
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT);
 8004952:	2080      	movs	r0, #128	; 0x80
 8004954:	f7fd fa53 	bl	8001dfe <INA260_init>
}
 8004958:	bf00      	nop
 800495a:	3708      	adds	r7, #8
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}

08004960 <_ZN11PowerSensor12updateValuesEv>:

void PowerSensor::updateValues()
{
 8004960:	b590      	push	{r4, r7, lr}
 8004962:	b083      	sub	sp, #12
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
	//current_l_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
	//current_r_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT) * 0.00125;
	buttery_voltage_ = INA260_read(0x02, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
 8004968:	2188      	movs	r1, #136	; 0x88
 800496a:	2002      	movs	r0, #2
 800496c:	f7fd f9e4 	bl	8001d38 <INA260_read>
 8004970:	4603      	mov	r3, r0
 8004972:	4618      	mov	r0, r3
 8004974:	f7fb fdee 	bl	8000554 <__aeabi_i2d>
 8004978:	a30c      	add	r3, pc, #48	; (adr r3, 80049ac <_ZN11PowerSensor12updateValuesEv+0x4c>)
 800497a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800497e:	f7fb fe53 	bl	8000628 <__aeabi_dmul>
 8004982:	4603      	mov	r3, r0
 8004984:	460c      	mov	r4, r1
 8004986:	4618      	mov	r0, r3
 8004988:	4621      	mov	r1, r4
 800498a:	f7fc f945 	bl	8000c18 <__aeabi_d2f>
 800498e:	4602      	mov	r2, r0
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	609a      	str	r2, [r3, #8]

	monitor_voltage = buttery_voltage_;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	4a03      	ldr	r2, [pc, #12]	; (80049a8 <_ZN11PowerSensor12updateValuesEv+0x48>)
 800499a:	6013      	str	r3, [r2, #0]
}
 800499c:	bf00      	nop
 800499e:	370c      	adds	r7, #12
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd90      	pop	{r4, r7, pc}
 80049a4:	f3af 8000 	nop.w
 80049a8:	200002a4 	.word	0x200002a4
 80049ac:	47ae147b 	.word	0x47ae147b
 80049b0:	3f547ae1 	.word	0x3f547ae1

080049b4 <_ZN11PowerSensor17getButteryVoltageEv>:
	left = current_l_;
	right = current_r_;
}

float PowerSensor::getButteryVoltage()
{
 80049b4:	b480      	push	{r7}
 80049b6:	b083      	sub	sp, #12
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
	return buttery_voltage_;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	ee07 3a90 	vmov	s15, r3

}
 80049c4:	eeb0 0a67 	vmov.f32	s0, s15
 80049c8:	370c      	adds	r7, #12
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr
	...

080049d4 <_ZN12RotarySwitch8getValueEv>:

#include "RotarySwitch.hpp"


uint16_t RotarySwitch::getValue()
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b084      	sub	sp, #16
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 80049dc:	2300      	movs	r3, #0
 80049de:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_1))	ret_value |= 0x01;
 80049e0:	2102      	movs	r1, #2
 80049e2:	4822      	ldr	r0, [pc, #136]	; (8004a6c <_ZN12RotarySwitch8getValueEv+0x98>)
 80049e4:	f004 ff50 	bl	8009888 <HAL_GPIO_ReadPin>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	bf0c      	ite	eq
 80049ee:	2301      	moveq	r3, #1
 80049f0:	2300      	movne	r3, #0
 80049f2:	b2db      	uxtb	r3, r3
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d003      	beq.n	8004a00 <_ZN12RotarySwitch8getValueEv+0x2c>
 80049f8:	89fb      	ldrh	r3, [r7, #14]
 80049fa:	f043 0301 	orr.w	r3, r3, #1
 80049fe:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_3))	ret_value |= 0x02;
 8004a00:	2108      	movs	r1, #8
 8004a02:	481a      	ldr	r0, [pc, #104]	; (8004a6c <_ZN12RotarySwitch8getValueEv+0x98>)
 8004a04:	f004 ff40 	bl	8009888 <HAL_GPIO_ReadPin>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	bf0c      	ite	eq
 8004a0e:	2301      	moveq	r3, #1
 8004a10:	2300      	movne	r3, #0
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d003      	beq.n	8004a20 <_ZN12RotarySwitch8getValueEv+0x4c>
 8004a18:	89fb      	ldrh	r3, [r7, #14]
 8004a1a:	f043 0302 	orr.w	r3, r3, #2
 8004a1e:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_4))	ret_value |= 0x04;
 8004a20:	2110      	movs	r1, #16
 8004a22:	4812      	ldr	r0, [pc, #72]	; (8004a6c <_ZN12RotarySwitch8getValueEv+0x98>)
 8004a24:	f004 ff30 	bl	8009888 <HAL_GPIO_ReadPin>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	bf0c      	ite	eq
 8004a2e:	2301      	moveq	r3, #1
 8004a30:	2300      	movne	r3, #0
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d003      	beq.n	8004a40 <_ZN12RotarySwitch8getValueEv+0x6c>
 8004a38:	89fb      	ldrh	r3, [r7, #14]
 8004a3a:	f043 0304 	orr.w	r3, r3, #4
 8004a3e:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_7))	ret_value |= 0x08;
 8004a40:	2180      	movs	r1, #128	; 0x80
 8004a42:	480a      	ldr	r0, [pc, #40]	; (8004a6c <_ZN12RotarySwitch8getValueEv+0x98>)
 8004a44:	f004 ff20 	bl	8009888 <HAL_GPIO_ReadPin>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	bf0c      	ite	eq
 8004a4e:	2301      	moveq	r3, #1
 8004a50:	2300      	movne	r3, #0
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d003      	beq.n	8004a60 <_ZN12RotarySwitch8getValueEv+0x8c>
 8004a58:	89fb      	ldrh	r3, [r7, #14]
 8004a5a:	f043 0308 	orr.w	r3, r3, #8
 8004a5e:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8004a60:	89fb      	ldrh	r3, [r7, #14]

}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3710      	adds	r7, #16
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}
 8004a6a:	bf00      	nop
 8004a6c:	40020c00 	.word	0x40020c00

08004a70 <_ZN10SideSensorC1Ev>:
#include "SideSensor.hpp"

uint16_t mon_status;
uint16_t mon_cnt_l, mon_cnt_r;

SideSensor::SideSensor() : status_(0), white_line_cnt_l_(0), white_line_cnt_r_(0), ignore_flag_(false)
 8004a70:	b480      	push	{r7}
 8004a72:	b083      	sub	sp, #12
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	801a      	strh	r2, [r3, #0]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	805a      	strh	r2, [r3, #2]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2200      	movs	r2, #0
 8004a88:	809a      	strh	r2, [r3, #4]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	719a      	strb	r2, [r3, #6]
{

}
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	4618      	mov	r0, r3
 8004a94:	370c      	adds	r7, #12
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr
	...

08004aa0 <_ZN10SideSensor12updateStatusEv>:
	}

}

void SideSensor::updateStatus()
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b082      	sub	sp, #8
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
	static bool white_flag1 = false;
	static bool white_flag2 = false;
	static uint16_t cnt_l, cnt_r;

	if(ignore_flag_ == false){
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	799b      	ldrb	r3, [r3, #6]
 8004aac:	f083 0301 	eor.w	r3, r3, #1
 8004ab0:	b2db      	uxtb	r3, r3
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	f000 80c7 	beq.w	8004c46 <_ZN10SideSensor12updateStatusEv+0x1a6>

		if(white_flag1 == false){
 8004ab8:	4b65      	ldr	r3, [pc, #404]	; (8004c50 <_ZN10SideSensor12updateStatusEv+0x1b0>)
 8004aba:	781b      	ldrb	r3, [r3, #0]
 8004abc:	f083 0301 	eor.w	r3, r3, #1
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d027      	beq.n	8004b16 <_ZN10SideSensor12updateStatusEv+0x76>
			if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2)){
 8004ac6:	2104      	movs	r1, #4
 8004ac8:	4862      	ldr	r0, [pc, #392]	; (8004c54 <_ZN10SideSensor12updateStatusEv+0x1b4>)
 8004aca:	f004 fedd 	bl	8009888 <HAL_GPIO_ReadPin>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	bf0c      	ite	eq
 8004ad4:	2301      	moveq	r3, #1
 8004ad6:	2300      	movne	r3, #0
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d006      	beq.n	8004aec <_ZN10SideSensor12updateStatusEv+0x4c>
				cnt_r++;
 8004ade:	4b5e      	ldr	r3, [pc, #376]	; (8004c58 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8004ae0:	881b      	ldrh	r3, [r3, #0]
 8004ae2:	3301      	adds	r3, #1
 8004ae4:	b29a      	uxth	r2, r3
 8004ae6:	4b5c      	ldr	r3, [pc, #368]	; (8004c58 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8004ae8:	801a      	strh	r2, [r3, #0]
 8004aea:	e002      	b.n	8004af2 <_ZN10SideSensor12updateStatusEv+0x52>
			}
			else{
				cnt_r = 0;
 8004aec:	4b5a      	ldr	r3, [pc, #360]	; (8004c58 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8004aee:	2200      	movs	r2, #0
 8004af0:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_r >= 5){
 8004af2:	4b59      	ldr	r3, [pc, #356]	; (8004c58 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8004af4:	881b      	ldrh	r3, [r3, #0]
 8004af6:	2b04      	cmp	r3, #4
 8004af8:	d93f      	bls.n	8004b7a <_ZN10SideSensor12updateStatusEv+0xda>
				status_ |= 0x01;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	881b      	ldrh	r3, [r3, #0]
 8004afe:	f043 0301 	orr.w	r3, r3, #1
 8004b02:	b29a      	uxth	r2, r3
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	801a      	strh	r2, [r3, #0]
				white_flag1 = true;
 8004b08:	4b51      	ldr	r3, [pc, #324]	; (8004c50 <_ZN10SideSensor12updateStatusEv+0x1b0>)
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	701a      	strb	r2, [r3, #0]
				cnt_r = 0;
 8004b0e:	4b52      	ldr	r3, [pc, #328]	; (8004c58 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8004b10:	2200      	movs	r2, #0
 8004b12:	801a      	strh	r2, [r3, #0]
 8004b14:	e031      	b.n	8004b7a <_ZN10SideSensor12updateStatusEv+0xda>
			}

		}
		else if(white_flag1 == true){
 8004b16:	4b4e      	ldr	r3, [pc, #312]	; (8004c50 <_ZN10SideSensor12updateStatusEv+0x1b0>)
 8004b18:	781b      	ldrb	r3, [r3, #0]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d02d      	beq.n	8004b7a <_ZN10SideSensor12updateStatusEv+0xda>
			if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2)){
 8004b1e:	2104      	movs	r1, #4
 8004b20:	484c      	ldr	r0, [pc, #304]	; (8004c54 <_ZN10SideSensor12updateStatusEv+0x1b4>)
 8004b22:	f004 feb1 	bl	8009888 <HAL_GPIO_ReadPin>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	bf14      	ite	ne
 8004b2c:	2301      	movne	r3, #1
 8004b2e:	2300      	moveq	r3, #0
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d006      	beq.n	8004b44 <_ZN10SideSensor12updateStatusEv+0xa4>
				cnt_r++;
 8004b36:	4b48      	ldr	r3, [pc, #288]	; (8004c58 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8004b38:	881b      	ldrh	r3, [r3, #0]
 8004b3a:	3301      	adds	r3, #1
 8004b3c:	b29a      	uxth	r2, r3
 8004b3e:	4b46      	ldr	r3, [pc, #280]	; (8004c58 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8004b40:	801a      	strh	r2, [r3, #0]
 8004b42:	e002      	b.n	8004b4a <_ZN10SideSensor12updateStatusEv+0xaa>
			}
			else{
				cnt_r = 0;
 8004b44:	4b44      	ldr	r3, [pc, #272]	; (8004c58 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8004b46:	2200      	movs	r2, #0
 8004b48:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_r >= 5){
 8004b4a:	4b43      	ldr	r3, [pc, #268]	; (8004c58 <_ZN10SideSensor12updateStatusEv+0x1b8>)
 8004b4c:	881b      	ldrh	r3, [r3, #0]
 8004b4e:	2b04      	cmp	r3, #4
 8004b50:	d913      	bls.n	8004b7a <_ZN10SideSensor12updateStatusEv+0xda>
				status_ ^= 0x01;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	881b      	ldrh	r3, [r3, #0]
 8004b56:	f083 0301 	eor.w	r3, r3, #1
 8004b5a:	b29a      	uxth	r2, r3
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	801a      	strh	r2, [r3, #0]
				white_flag1 = false;
 8004b60:	4b3b      	ldr	r3, [pc, #236]	; (8004c50 <_ZN10SideSensor12updateStatusEv+0x1b0>)
 8004b62:	2200      	movs	r2, #0
 8004b64:	701a      	strb	r2, [r3, #0]

				white_line_cnt_r_++;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	889b      	ldrh	r3, [r3, #4]
 8004b6a:	3301      	adds	r3, #1
 8004b6c:	b29a      	uxth	r2, r3
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	809a      	strh	r2, [r3, #4]
				mon_cnt_r = white_line_cnt_r_;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	889a      	ldrh	r2, [r3, #4]
 8004b76:	4b39      	ldr	r3, [pc, #228]	; (8004c5c <_ZN10SideSensor12updateStatusEv+0x1bc>)
 8004b78:	801a      	strh	r2, [r3, #0]
			}
		}


		if(white_flag2 == false){
 8004b7a:	4b39      	ldr	r3, [pc, #228]	; (8004c60 <_ZN10SideSensor12updateStatusEv+0x1c0>)
 8004b7c:	781b      	ldrb	r3, [r3, #0]
 8004b7e:	f083 0301 	eor.w	r3, r3, #1
 8004b82:	b2db      	uxtb	r3, r3
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d027      	beq.n	8004bd8 <_ZN10SideSensor12updateStatusEv+0x138>
			if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_8)){
 8004b88:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004b8c:	4835      	ldr	r0, [pc, #212]	; (8004c64 <_ZN10SideSensor12updateStatusEv+0x1c4>)
 8004b8e:	f004 fe7b 	bl	8009888 <HAL_GPIO_ReadPin>
 8004b92:	4603      	mov	r3, r0
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	bf0c      	ite	eq
 8004b98:	2301      	moveq	r3, #1
 8004b9a:	2300      	movne	r3, #0
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d006      	beq.n	8004bb0 <_ZN10SideSensor12updateStatusEv+0x110>
				cnt_l++;
 8004ba2:	4b31      	ldr	r3, [pc, #196]	; (8004c68 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8004ba4:	881b      	ldrh	r3, [r3, #0]
 8004ba6:	3301      	adds	r3, #1
 8004ba8:	b29a      	uxth	r2, r3
 8004baa:	4b2f      	ldr	r3, [pc, #188]	; (8004c68 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8004bac:	801a      	strh	r2, [r3, #0]
 8004bae:	e002      	b.n	8004bb6 <_ZN10SideSensor12updateStatusEv+0x116>
			}
			else{
				cnt_l = 0;
 8004bb0:	4b2d      	ldr	r3, [pc, #180]	; (8004c68 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_l >= 5){
 8004bb6:	4b2c      	ldr	r3, [pc, #176]	; (8004c68 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8004bb8:	881b      	ldrh	r3, [r3, #0]
 8004bba:	2b04      	cmp	r3, #4
 8004bbc:	d90c      	bls.n	8004bd8 <_ZN10SideSensor12updateStatusEv+0x138>
				status_ |= 0x02;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	881b      	ldrh	r3, [r3, #0]
 8004bc2:	f043 0302 	orr.w	r3, r3, #2
 8004bc6:	b29a      	uxth	r2, r3
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	801a      	strh	r2, [r3, #0]
				white_flag2 = true;
 8004bcc:	4b24      	ldr	r3, [pc, #144]	; (8004c60 <_ZN10SideSensor12updateStatusEv+0x1c0>)
 8004bce:	2201      	movs	r2, #1
 8004bd0:	701a      	strb	r2, [r3, #0]
				cnt_l = 0;
 8004bd2:	4b25      	ldr	r3, [pc, #148]	; (8004c68 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	801a      	strh	r2, [r3, #0]
			}

		}
		if(white_flag2 == true){
 8004bd8:	4b21      	ldr	r3, [pc, #132]	; (8004c60 <_ZN10SideSensor12updateStatusEv+0x1c0>)
 8004bda:	781b      	ldrb	r3, [r3, #0]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d02e      	beq.n	8004c3e <_ZN10SideSensor12updateStatusEv+0x19e>
			if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_8)){
 8004be0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004be4:	481f      	ldr	r0, [pc, #124]	; (8004c64 <_ZN10SideSensor12updateStatusEv+0x1c4>)
 8004be6:	f004 fe4f 	bl	8009888 <HAL_GPIO_ReadPin>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	bf14      	ite	ne
 8004bf0:	2301      	movne	r3, #1
 8004bf2:	2300      	moveq	r3, #0
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d006      	beq.n	8004c08 <_ZN10SideSensor12updateStatusEv+0x168>
				cnt_l++;
 8004bfa:	4b1b      	ldr	r3, [pc, #108]	; (8004c68 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8004bfc:	881b      	ldrh	r3, [r3, #0]
 8004bfe:	3301      	adds	r3, #1
 8004c00:	b29a      	uxth	r2, r3
 8004c02:	4b19      	ldr	r3, [pc, #100]	; (8004c68 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8004c04:	801a      	strh	r2, [r3, #0]
 8004c06:	e002      	b.n	8004c0e <_ZN10SideSensor12updateStatusEv+0x16e>
			}
			else{
				cnt_l = 0;
 8004c08:	4b17      	ldr	r3, [pc, #92]	; (8004c68 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_l >= 5){
 8004c0e:	4b16      	ldr	r3, [pc, #88]	; (8004c68 <_ZN10SideSensor12updateStatusEv+0x1c8>)
 8004c10:	881b      	ldrh	r3, [r3, #0]
 8004c12:	2b04      	cmp	r3, #4
 8004c14:	d913      	bls.n	8004c3e <_ZN10SideSensor12updateStatusEv+0x19e>
				status_ ^= 0x02;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	881b      	ldrh	r3, [r3, #0]
 8004c1a:	f083 0302 	eor.w	r3, r3, #2
 8004c1e:	b29a      	uxth	r2, r3
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	801a      	strh	r2, [r3, #0]
				white_flag2 = false;
 8004c24:	4b0e      	ldr	r3, [pc, #56]	; (8004c60 <_ZN10SideSensor12updateStatusEv+0x1c0>)
 8004c26:	2200      	movs	r2, #0
 8004c28:	701a      	strb	r2, [r3, #0]

				white_line_cnt_l_++;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	885b      	ldrh	r3, [r3, #2]
 8004c2e:	3301      	adds	r3, #1
 8004c30:	b29a      	uxth	r2, r3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	805a      	strh	r2, [r3, #2]
				mon_cnt_l = white_line_cnt_l_;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	885a      	ldrh	r2, [r3, #2]
 8004c3a:	4b0c      	ldr	r3, [pc, #48]	; (8004c6c <_ZN10SideSensor12updateStatusEv+0x1cc>)
 8004c3c:	801a      	strh	r2, [r3, #0]
			}

		}

		mon_status = status_;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	881a      	ldrh	r2, [r3, #0]
 8004c42:	4b0b      	ldr	r3, [pc, #44]	; (8004c70 <_ZN10SideSensor12updateStatusEv+0x1d0>)
 8004c44:	801a      	strh	r2, [r3, #0]
	}

}
 8004c46:	bf00      	nop
 8004c48:	3708      	adds	r7, #8
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	bf00      	nop
 8004c50:	200002ae 	.word	0x200002ae
 8004c54:	40021000 	.word	0x40021000
 8004c58:	200002b2 	.word	0x200002b2
 8004c5c:	200002ac 	.word	0x200002ac
 8004c60:	200002af 	.word	0x200002af
 8004c64:	40020c00 	.word	0x40020c00
 8004c68:	200002b0 	.word	0x200002b0
 8004c6c:	200002aa 	.word	0x200002aa
 8004c70:	200002a8 	.word	0x200002a8

08004c74 <_ZN10SideSensor9getStatusEv>:
uint16_t SideSensor::getStatus()
{
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
	return status_;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	881b      	ldrh	r3, [r3, #0]
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	370c      	adds	r7, #12
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr

08004c8c <_ZN10SideSensor16getWhiteLineCntREv>:
{
	return white_line_cnt_l_;
}

uint16_t SideSensor::getWhiteLineCntR()
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b083      	sub	sp, #12
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
	return white_line_cnt_r_;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	889b      	ldrh	r3, [r3, #4]
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	370c      	adds	r7, #12
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr

08004ca4 <_ZN10SideSensor17resetWhiteLineCntEv>:

void SideSensor::resetWhiteLineCnt()
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b083      	sub	sp, #12
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
	white_line_cnt_l_ = 0;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	805a      	strh	r2, [r3, #2]
	white_line_cnt_r_ = 0;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	809a      	strh	r2, [r3, #4]
}
 8004cb8:	bf00      	nop
 8004cba:	370c      	adds	r7, #12
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc2:	4770      	bx	lr

08004cc4 <_ZN10SideSensor12enableIgnoreEv>:

void SideSensor::enableIgnore()
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b083      	sub	sp, #12
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
	ignore_flag_ = true;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	719a      	strb	r2, [r3, #6]
}
 8004cd2:	bf00      	nop
 8004cd4:	370c      	adds	r7, #12
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr

08004cde <_ZN10SideSensor13disableIgnoreEv>:

void SideSensor::disableIgnore()
{
 8004cde:	b480      	push	{r7}
 8004ce0:	b083      	sub	sp, #12
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	6078      	str	r0, [r7, #4]
	ignore_flag_ = false;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	719a      	strb	r2, [r3, #6]
}
 8004cec:	bf00      	nop
 8004cee:	370c      	adds	r7, #12
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr

08004cf8 <_ZN10SideSensor13getIgnoreFlagEv>:

bool SideSensor::getIgnoreFlag()
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b083      	sub	sp, #12
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
	return ignore_flag_;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	799b      	ldrb	r3, [r3, #6]
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	370c      	adds	r7, #12
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr

08004d10 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>:

#include "SystemIdentification.hpp"

float mon_msig;

SystemIdentification::SystemIdentification(Logger *logger, Motor *motor) : msigArrayIdx_(0), inputVal_(0), processing_flag_(false)
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b084      	sub	sp, #16
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	60f8      	str	r0, [r7, #12]
 8004d18:	60b9      	str	r1, [r7, #8]
 8004d1a:	607a      	str	r2, [r7, #4]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	4a10      	ldr	r2, [pc, #64]	; (8004d60 <_ZN20SystemIdentificationC1EP6LoggerP5Motor+0x50>)
 8004d20:	3308      	adds	r3, #8
 8004d22:	4611      	mov	r1, r2
 8004d24:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f00f f8a5 	bl	8013e78 <memcpy>
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2200      	movs	r2, #0
 8004d32:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	f04f 0200 	mov.w	r2, #0
 8004d3c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2200      	movs	r2, #0
 8004d44:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
{
	logger_ = logger;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	68ba      	ldr	r2, [r7, #8]
 8004d4c:	601a      	str	r2, [r3, #0]
	motor_ = motor;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	687a      	ldr	r2, [r7, #4]
 8004d52:	605a      	str	r2, [r3, #4]
	//msigItr_ = msigArray_.begin();
}
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	4618      	mov	r0, r3
 8004d58:	3710      	adds	r7, #16
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}
 8004d5e:	bf00      	nop
 8004d60:	080183e0 	.word	0x080183e0

08004d64 <_ZN20SystemIdentification13inOutputStoreEf>:
{

}

void SystemIdentification::inOutputStore(float output)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b082      	sub	sp, #8
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
 8004d6c:	ed87 0a00 	vstr	s0, [r7]
	if(processing_flag_ == true){
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d010      	beq.n	8004d9c <_ZN20SystemIdentification13inOutputStoreEf+0x38>
		logger_->storeLog(output);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	ed97 0a00 	vldr	s0, [r7]
 8004d82:	4618      	mov	r0, r3
 8004d84:	f7ff f86a 	bl	8003e5c <_ZN6Logger8storeLogEf>
		logger_->storeLog2(inputVal_);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	edd3 7a80 	vldr	s15, [r3, #512]	; 0x200
 8004d92:	eeb0 0a67 	vmov.f32	s0, s15
 8004d96:	4610      	mov	r0, r2
 8004d98:	f7ff f89c 	bl	8003ed4 <_ZN6Logger9storeLog2Ef>
	}

}
 8004d9c:	bf00      	nop
 8004d9e:	3708      	adds	r7, #8
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}

08004da4 <_ZN20SystemIdentification12inOutputSaveEv>:

void SystemIdentification::inOutputSave()
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b082      	sub	sp, #8
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
	logger_->saveLogs("sysident", "MSIGRES.txt");
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a07      	ldr	r2, [pc, #28]	; (8004dd0 <_ZN20SystemIdentification12inOutputSaveEv+0x2c>)
 8004db2:	4908      	ldr	r1, [pc, #32]	; (8004dd4 <_ZN20SystemIdentification12inOutputSaveEv+0x30>)
 8004db4:	4618      	mov	r0, r3
 8004db6:	f7ff f974 	bl	80040a2 <_ZN6Logger8saveLogsEPKcS1_>
	logger_->saveLogs2("sysident", "INPUT.txt");
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a06      	ldr	r2, [pc, #24]	; (8004dd8 <_ZN20SystemIdentification12inOutputSaveEv+0x34>)
 8004dc0:	4904      	ldr	r1, [pc, #16]	; (8004dd4 <_ZN20SystemIdentification12inOutputSaveEv+0x30>)
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f7ff f980 	bl	80040c8 <_ZN6Logger9saveLogs2EPKcS1_>
}
 8004dc8:	bf00      	nop
 8004dca:	3708      	adds	r7, #8
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}
 8004dd0:	080185d4 	.word	0x080185d4
 8004dd4:	080185e0 	.word	0x080185e0
 8004dd8:	080185ec 	.word	0x080185ec

08004ddc <_ZN20SystemIdentification10updateMsigEv>:

void SystemIdentification::updateMsig()
{
 8004ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004dde:	b083      	sub	sp, #12
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
	if(processing_flag_ == true){
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d046      	beq.n	8004e7c <_ZN20SystemIdentification10updateMsigEv+0xa0>
		inputVal_ = inputRatio_ * msigArray_[msigArrayIdx_];
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	ed93 7a81 	vldr	s14, [r3, #516]	; 0x204
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	3204      	adds	r2, #4
 8004e00:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8004e04:	ee07 3a90 	vmov	s15, r3
 8004e08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	edc3 7a80 	vstr	s15, [r3, #512]	; 0x200
		msigArrayIdx_++;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 8004e1c:	3301      	adds	r3, #1
 8004e1e:	b29a      	uxth	r2, r3
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
		mon_msig = inputVal_;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004e2c:	4a15      	ldr	r2, [pc, #84]	; (8004e84 <_ZN20SystemIdentification10updateMsigEv+0xa8>)
 8004e2e:	6013      	str	r3, [r2, #0]

		if(msigArrayIdx_ >= MSIG_SIZE) msigArrayIdx_ = MSIG_SIZE;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 8004e36:	2bf9      	cmp	r3, #249	; 0xf9
 8004e38:	d903      	bls.n	8004e42 <_ZN20SystemIdentification10updateMsigEv+0x66>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	22fa      	movs	r2, #250	; 0xfa
 8004e3e:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc

		motor_->setRatio(inputVal_, -inputVal_);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	685c      	ldr	r4, [r3, #4]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f7fb fb93 	bl	8000578 <__aeabi_f2d>
 8004e52:	4605      	mov	r5, r0
 8004e54:	460e      	mov	r6, r1
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	edd3 7a80 	vldr	s15, [r3, #512]	; 0x200
 8004e5c:	eef1 7a67 	vneg.f32	s15, s15
 8004e60:	ee17 3a90 	vmov	r3, s15
 8004e64:	4618      	mov	r0, r3
 8004e66:	f7fb fb87 	bl	8000578 <__aeabi_f2d>
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	460b      	mov	r3, r1
 8004e6e:	ec43 2b11 	vmov	d1, r2, r3
 8004e72:	ec46 5b10 	vmov	d0, r5, r6
 8004e76:	4620      	mov	r0, r4
 8004e78:	f7ff fa98 	bl	80043ac <_ZN5Motor8setRatioEdd>

	}

}
 8004e7c:	bf00      	nop
 8004e7e:	370c      	adds	r7, #12
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e84:	200002b4 	.word	0x200002b4

08004e88 <_ZN20SystemIdentification13setInputRatioEf>:
void SystemIdentification::setInputRatio(float ratio)
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b083      	sub	sp, #12
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
 8004e90:	ed87 0a00 	vstr	s0, [r7]
	inputRatio_ = ratio;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	683a      	ldr	r2, [r7, #0]
 8004e98:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
}
 8004e9c:	bf00      	nop
 8004e9e:	370c      	adds	r7, #12
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr

08004ea8 <_ZN20SystemIdentification5startEv>:

void SystemIdentification::start()
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b082      	sub	sp, #8
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
	//logger_->resetLogs();
	logger_->start();
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f7ff f9e4 	bl	8004282 <_ZN6Logger5startEv>
	processing_flag_ = true;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
}
 8004ec2:	bf00      	nop
 8004ec4:	3708      	adds	r7, #8
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}
 8004eca:	0000      	movs	r0, r0
 8004ecc:	0000      	movs	r0, r0
	...

08004ed0 <_ZN20SystemIdentification4stopEv>:

void SystemIdentification::stop()
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b082      	sub	sp, #8
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
	logger_->stop();
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4618      	mov	r0, r3
 8004ede:	f7ff f9e1 	bl	80042a4 <_ZN6Logger4stopEv>
	processing_flag_ = false;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
	msigArrayIdx_ = 0;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2200      	movs	r2, #0
 8004eee:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
	motor_->setRatio(0, 0);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8004f10 <_ZN20SystemIdentification4stopEv+0x40>
 8004efa:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8004f10 <_ZN20SystemIdentification4stopEv+0x40>
 8004efe:	4618      	mov	r0, r3
 8004f00:	f7ff fa54 	bl	80043ac <_ZN5Motor8setRatioEdd>
}
 8004f04:	bf00      	nop
 8004f06:	3708      	adds	r7, #8
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}
 8004f0c:	f3af 8000 	nop.w
	...

08004f18 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>:

#include "VelocityCtrl.hpp"
//#include "ICM_20648.h"
#include <stdio.h>

VelocityCtrl::VelocityCtrl(Motor *motor, Encoder *encoder, IMU *imu) :
 8004f18:	b480      	push	{r7}
 8004f1a:	b085      	sub	sp, #20
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	60f8      	str	r0, [r7, #12]
 8004f20:	60b9      	str	r1, [r7, #8]
 8004f22:	607a      	str	r2, [r7, #4]
 8004f24:	603b      	str	r3, [r7, #0]
target_velocity_(0), target_omega_(0), current_velocity_(0), current_omega_(0), v_kp_(0), v_kd_(0), v_ki_(0),
	o_kp_(0), o_kd_(0), o_ki_(0), excution_flag_(false), i_reset_flag_(false), rotation_ratio_(0)
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	f04f 0200 	mov.w	r2, #0
 8004f2c:	601a      	str	r2, [r3, #0]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f04f 0200 	mov.w	r2, #0
 8004f34:	605a      	str	r2, [r3, #4]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	f04f 0200 	mov.w	r2, #0
 8004f3c:	609a      	str	r2, [r3, #8]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	f04f 0200 	mov.w	r2, #0
 8004f44:	60da      	str	r2, [r3, #12]
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	f04f 0200 	mov.w	r2, #0
 8004f4c:	611a      	str	r2, [r3, #16]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	f04f 0200 	mov.w	r2, #0
 8004f54:	615a      	str	r2, [r3, #20]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	f04f 0200 	mov.w	r2, #0
 8004f5c:	619a      	str	r2, [r3, #24]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	f04f 0200 	mov.w	r2, #0
 8004f64:	61da      	str	r2, [r3, #28]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	f04f 0200 	mov.w	r2, #0
 8004f6c:	621a      	str	r2, [r3, #32]
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	f04f 0200 	mov.w	r2, #0
 8004f74:	625a      	str	r2, [r3, #36]	; 0x24
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2200      	movs	r2, #0
 8004f82:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	f04f 0200 	mov.w	r2, #0
 8004f8c:	62da      	str	r2, [r3, #44]	; 0x2c
{
	motor_ = motor;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	68ba      	ldr	r2, [r7, #8]
 8004f92:	631a      	str	r2, [r3, #48]	; 0x30
	encoder_ = encoder;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	635a      	str	r2, [r3, #52]	; 0x34
	imu_ = imu;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	683a      	ldr	r2, [r7, #0]
 8004f9e:	639a      	str	r2, [r3, #56]	; 0x38

}
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3714      	adds	r7, #20
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fac:	4770      	bx	lr
	...

08004fb0 <_ZN12VelocityCtrl12calcVelocityEv>:

// ---------private ---------//

float VelocityCtrl::calcVelocity()
{
 8004fb0:	b590      	push	{r4, r7, lr}
 8004fb2:	b087      	sub	sp, #28
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
	float enc_l, enc_r;
	encoder_->getCnt(enc_l, enc_r);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fbc:	f107 020c 	add.w	r2, r7, #12
 8004fc0:	f107 0110 	add.w	r1, r7, #16
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f7fc fa1f 	bl	8001408 <_ZN7Encoder6getCntERfS0_>
	float enc_cnt = (enc_l + enc_r) / 2;
 8004fca:	ed97 7a04 	vldr	s14, [r7, #16]
 8004fce:	edd7 7a03 	vldr	s15, [r7, #12]
 8004fd2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004fd6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8004fda:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004fde:	edc7 7a05 	vstr	s15, [r7, #20]

	current_velocity_ = VELOCITY_PER_CNT * enc_cnt;
 8004fe2:	6978      	ldr	r0, [r7, #20]
 8004fe4:	f7fb fac8 	bl	8000578 <__aeabi_f2d>
 8004fe8:	a30b      	add	r3, pc, #44	; (adr r3, 8005018 <_ZN12VelocityCtrl12calcVelocityEv+0x68>)
 8004fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fee:	f7fb fb1b 	bl	8000628 <__aeabi_dmul>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	460c      	mov	r4, r1
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	4621      	mov	r1, r4
 8004ffa:	f7fb fe0d 	bl	8000c18 <__aeabi_d2f>
 8004ffe:	4602      	mov	r2, r0
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	609a      	str	r2, [r3, #8]

	return current_velocity_;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	ee07 3a90 	vmov	s15, r3
}
 800500c:	eeb0 0a67 	vmov.f32	s0, s15
 8005010:	371c      	adds	r7, #28
 8005012:	46bd      	mov	sp, r7
 8005014:	bd90      	pop	{r4, r7, pc}
 8005016:	bf00      	nop
 8005018:	1ab1d998 	.word	0x1ab1d998
 800501c:	3f7830b5 	.word	0x3f7830b5

08005020 <_ZN12VelocityCtrl18pidTranslationOnlyEv>:
	v_pre_diff = v_diff;
	o_pre_diff = o_diff;
}

void VelocityCtrl::pidTranslationOnly()
{
 8005020:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005022:	b087      	sub	sp, #28
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
	float static v_pre_diff;
	float v_diff = target_velocity_ - current_velocity_;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	ed93 7a00 	vldr	s14, [r3]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	edd3 7a02 	vldr	s15, [r3, #8]
 8005034:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005038:	edc7 7a05 	vstr	s15, [r7, #20]

	float v_p, v_d ;
	static float v_i;

	if(i_reset_flag_ == true){
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005042:	2b00      	cmp	r3, #0
 8005044:	d007      	beq.n	8005056 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x36>
		v_i = 0;
 8005046:	4b48      	ldr	r3, [pc, #288]	; (8005168 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005048:	f04f 0200 	mov.w	r2, #0
 800504c:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	}

	v_p = v_kp_ * v_diff;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	edd3 7a04 	vldr	s15, [r3, #16]
 800505c:	ed97 7a05 	vldr	s14, [r7, #20]
 8005060:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005064:	edc7 7a04 	vstr	s15, [r7, #16]
	v_i += v_ki_ * v_diff * DELTA_T;
 8005068:	4b3f      	ldr	r3, [pc, #252]	; (8005168 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4618      	mov	r0, r3
 800506e:	f7fb fa83 	bl	8000578 <__aeabi_f2d>
 8005072:	4604      	mov	r4, r0
 8005074:	460d      	mov	r5, r1
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	ed93 7a06 	vldr	s14, [r3, #24]
 800507c:	edd7 7a05 	vldr	s15, [r7, #20]
 8005080:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005084:	ee17 0a90 	vmov	r0, s15
 8005088:	f7fb fa76 	bl	8000578 <__aeabi_f2d>
 800508c:	a334      	add	r3, pc, #208	; (adr r3, 8005160 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 800508e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005092:	f7fb fac9 	bl	8000628 <__aeabi_dmul>
 8005096:	4602      	mov	r2, r0
 8005098:	460b      	mov	r3, r1
 800509a:	4620      	mov	r0, r4
 800509c:	4629      	mov	r1, r5
 800509e:	f7fb f90d 	bl	80002bc <__adddf3>
 80050a2:	4603      	mov	r3, r0
 80050a4:	460c      	mov	r4, r1
 80050a6:	4618      	mov	r0, r3
 80050a8:	4621      	mov	r1, r4
 80050aa:	f7fb fdb5 	bl	8000c18 <__aeabi_d2f>
 80050ae:	4602      	mov	r2, r0
 80050b0:	4b2d      	ldr	r3, [pc, #180]	; (8005168 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 80050b2:	601a      	str	r2, [r3, #0]
	v_d = v_kd_ * (v_diff - v_pre_diff) / DELTA_T;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	ed93 7a05 	vldr	s14, [r3, #20]
 80050ba:	4b2c      	ldr	r3, [pc, #176]	; (800516c <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 80050bc:	edd3 7a00 	vldr	s15, [r3]
 80050c0:	edd7 6a05 	vldr	s13, [r7, #20]
 80050c4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80050c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050cc:	ee17 0a90 	vmov	r0, s15
 80050d0:	f7fb fa52 	bl	8000578 <__aeabi_f2d>
 80050d4:	a322      	add	r3, pc, #136	; (adr r3, 8005160 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 80050d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050da:	f7fb fbcf 	bl	800087c <__aeabi_ddiv>
 80050de:	4603      	mov	r3, r0
 80050e0:	460c      	mov	r4, r1
 80050e2:	4618      	mov	r0, r3
 80050e4:	4621      	mov	r1, r4
 80050e6:	f7fb fd97 	bl	8000c18 <__aeabi_d2f>
 80050ea:	4603      	mov	r3, r0
 80050ec:	60fb      	str	r3, [r7, #12]

	float translation_ratio;

	translation_ratio =  v_p + v_d + v_i;
 80050ee:	ed97 7a04 	vldr	s14, [r7, #16]
 80050f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80050f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80050fa:	4b1b      	ldr	r3, [pc, #108]	; (8005168 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 80050fc:	edd3 7a00 	vldr	s15, [r3]
 8005100:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005104:	edc7 7a02 	vstr	s15, [r7, #8]

	motor_->setRatio(translation_ratio + rotation_ratio_, translation_ratio - rotation_ratio_);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8005112:	edd7 7a02 	vldr	s15, [r7, #8]
 8005116:	ee77 7a27 	vadd.f32	s15, s14, s15
 800511a:	ee17 0a90 	vmov	r0, s15
 800511e:	f7fb fa2b 	bl	8000578 <__aeabi_f2d>
 8005122:	4605      	mov	r5, r0
 8005124:	460e      	mov	r6, r1
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800512c:	ed97 7a02 	vldr	s14, [r7, #8]
 8005130:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005134:	ee17 0a90 	vmov	r0, s15
 8005138:	f7fb fa1e 	bl	8000578 <__aeabi_f2d>
 800513c:	4602      	mov	r2, r0
 800513e:	460b      	mov	r3, r1
 8005140:	ec43 2b11 	vmov	d1, r2, r3
 8005144:	ec46 5b10 	vmov	d0, r5, r6
 8005148:	4620      	mov	r0, r4
 800514a:	f7ff f92f 	bl	80043ac <_ZN5Motor8setRatioEdd>

	v_pre_diff = v_diff;
 800514e:	4a07      	ldr	r2, [pc, #28]	; (800516c <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	6013      	str	r3, [r2, #0]
}
 8005154:	bf00      	nop
 8005156:	371c      	adds	r7, #28
 8005158:	46bd      	mov	sp, r7
 800515a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800515c:	f3af 8000 	nop.w
 8005160:	d2f1a9fc 	.word	0xd2f1a9fc
 8005164:	3f50624d 	.word	0x3f50624d
 8005168:	200002bc 	.word	0x200002bc
 800516c:	200002b8 	.word	0x200002b8

08005170 <_ZN12VelocityCtrl11setVelocityEff>:
{

}

void VelocityCtrl::setVelocity(float velocity, float omega)
{
 8005170:	b480      	push	{r7}
 8005172:	b085      	sub	sp, #20
 8005174:	af00      	add	r7, sp, #0
 8005176:	60f8      	str	r0, [r7, #12]
 8005178:	ed87 0a02 	vstr	s0, [r7, #8]
 800517c:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	68ba      	ldr	r2, [r7, #8]
 8005184:	601a      	str	r2, [r3, #0]
	target_omega_= omega;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	687a      	ldr	r2, [r7, #4]
 800518a:	605a      	str	r2, [r3, #4]
}
 800518c:	bf00      	nop
 800518e:	3714      	adds	r7, #20
 8005190:	46bd      	mov	sp, r7
 8005192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005196:	4770      	bx	lr

08005198 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>:

void VelocityCtrl::setTranslationVelocityOnly(float velocity, float rotation_ratio)
{
 8005198:	b480      	push	{r7}
 800519a:	b085      	sub	sp, #20
 800519c:	af00      	add	r7, sp, #0
 800519e:	60f8      	str	r0, [r7, #12]
 80051a0:	ed87 0a02 	vstr	s0, [r7, #8]
 80051a4:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	68ba      	ldr	r2, [r7, #8]
 80051ac:	601a      	str	r2, [r3, #0]
	rotation_ratio_ = rotation_ratio;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	687a      	ldr	r2, [r7, #4]
 80051b2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80051b4:	bf00      	nop
 80051b6:	3714      	adds	r7, #20
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr

080051c0 <_ZN12VelocityCtrl15setVelocityGainEfff>:

void VelocityCtrl::setVelocityGain(float kp, float ki, float kd)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b085      	sub	sp, #20
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	60f8      	str	r0, [r7, #12]
 80051c8:	ed87 0a02 	vstr	s0, [r7, #8]
 80051cc:	edc7 0a01 	vstr	s1, [r7, #4]
 80051d0:	ed87 1a00 	vstr	s2, [r7]
	v_kp_ = kp;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	68ba      	ldr	r2, [r7, #8]
 80051d8:	611a      	str	r2, [r3, #16]
	v_ki_ = ki;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	687a      	ldr	r2, [r7, #4]
 80051de:	619a      	str	r2, [r3, #24]
	v_kd_ = kd;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	683a      	ldr	r2, [r7, #0]
 80051e4:	615a      	str	r2, [r3, #20]
}
 80051e6:	bf00      	nop
 80051e8:	3714      	adds	r7, #20
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr

080051f2 <_ZN12VelocityCtrl12setOmegaGainEfff>:

void VelocityCtrl::setOmegaGain(float kp, float ki, float kd)
{
 80051f2:	b480      	push	{r7}
 80051f4:	b085      	sub	sp, #20
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	60f8      	str	r0, [r7, #12]
 80051fa:	ed87 0a02 	vstr	s0, [r7, #8]
 80051fe:	edc7 0a01 	vstr	s1, [r7, #4]
 8005202:	ed87 1a00 	vstr	s2, [r7]
	o_kp_ = kp;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	68ba      	ldr	r2, [r7, #8]
 800520a:	61da      	str	r2, [r3, #28]
	o_ki_ = ki;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	625a      	str	r2, [r3, #36]	; 0x24
	o_kd_ = kd;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	683a      	ldr	r2, [r7, #0]
 8005216:	621a      	str	r2, [r3, #32]
}
 8005218:	bf00      	nop
 800521a:	3714      	adds	r7, #20
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr

08005224 <_ZN12VelocityCtrl4flipEv>:

void VelocityCtrl::flip()
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b082      	sub	sp, #8
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
    calcVelocity();
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f7ff febf 	bl	8004fb0 <_ZN12VelocityCtrl12calcVelocityEv>
	//calcOmega();

	if(excution_flag_ == true){
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005238:	2b00      	cmp	r3, #0
 800523a:	d002      	beq.n	8005242 <_ZN12VelocityCtrl4flipEv+0x1e>
		//pid();
		pidTranslationOnly();
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f7ff feef 	bl	8005020 <_ZN12VelocityCtrl18pidTranslationOnlyEv>
	}


}
 8005242:	bf00      	nop
 8005244:	3708      	adds	r7, #8
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}

0800524a <_ZN12VelocityCtrl5startEv>:

void VelocityCtrl::start()
{
 800524a:	b480      	push	{r7}
 800524c:	b083      	sub	sp, #12
 800524e:	af00      	add	r7, sp, #0
 8005250:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2201      	movs	r2, #1
 8005256:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	i_reset_flag_ = true;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2201      	movs	r2, #1
 800525e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	//calcOmega();
}
 8005262:	bf00      	nop
 8005264:	370c      	adds	r7, #12
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr
	...

08005270 <_ZN12VelocityCtrl4stopEv>:

void VelocityCtrl::stop()
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b082      	sub	sp, #8
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2200      	movs	r2, #0
 800527c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	motor_->setRatio(0, 0);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005284:	ed9f 1b06 	vldr	d1, [pc, #24]	; 80052a0 <_ZN12VelocityCtrl4stopEv+0x30>
 8005288:	ed9f 0b05 	vldr	d0, [pc, #20]	; 80052a0 <_ZN12VelocityCtrl4stopEv+0x30>
 800528c:	4618      	mov	r0, r3
 800528e:	f7ff f88d 	bl	80043ac <_ZN5Motor8setRatioEdd>

}
 8005292:	bf00      	nop
 8005294:	3708      	adds	r7, #8
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
 800529a:	bf00      	nop
 800529c:	f3af 8000 	nop.w
	...

080052a8 <HAL_TIM_PeriodElapsedCallback>:
	cppExit(GPIO_Pin);
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b082      	sub	sp, #8
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7){
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a1e      	ldr	r2, [pc, #120]	; (8005330 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d10e      	bne.n	80052d8 <HAL_TIM_PeriodElapsedCallback+0x30>
		cppFlip100ns();
 80052ba:	f001 fe27 	bl	8006f0c <cppFlip100ns>

		tim7_timer++;
 80052be:	4b1d      	ldr	r3, [pc, #116]	; (8005334 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	3301      	adds	r3, #1
 80052c4:	4a1b      	ldr	r2, [pc, #108]	; (8005334 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80052c6:	6013      	str	r3, [r2, #0]
		if(tim7_timer >= 100000) tim7_timer = 0;
 80052c8:	4b1a      	ldr	r3, [pc, #104]	; (8005334 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a1a      	ldr	r2, [pc, #104]	; (8005338 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d902      	bls.n	80052d8 <HAL_TIM_PeriodElapsedCallback+0x30>
 80052d2:	4b18      	ldr	r3, [pc, #96]	; (8005334 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80052d4:	2200      	movs	r2, #0
 80052d6:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM6){
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a17      	ldr	r2, [pc, #92]	; (800533c <HAL_TIM_PeriodElapsedCallback+0x94>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d10e      	bne.n	8005300 <HAL_TIM_PeriodElapsedCallback+0x58>
		cppFlip1ms();
 80052e2:	f001 fdc9 	bl	8006e78 <cppFlip1ms>

		tim6_timer++;
 80052e6:	4b16      	ldr	r3, [pc, #88]	; (8005340 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	3301      	adds	r3, #1
 80052ec:	4a14      	ldr	r2, [pc, #80]	; (8005340 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80052ee:	6013      	str	r3, [r2, #0]
		if(tim6_timer >= 100000) tim6_timer = 0;
 80052f0:	4b13      	ldr	r3, [pc, #76]	; (8005340 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a10      	ldr	r2, [pc, #64]	; (8005338 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d902      	bls.n	8005300 <HAL_TIM_PeriodElapsedCallback+0x58>
 80052fa:	4b11      	ldr	r3, [pc, #68]	; (8005340 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80052fc:	2200      	movs	r2, #0
 80052fe:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM13){
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a0f      	ldr	r2, [pc, #60]	; (8005344 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d10e      	bne.n	8005328 <HAL_TIM_PeriodElapsedCallback+0x80>
		cppFlip10ms();
 800530a:	f001 fe09 	bl	8006f20 <cppFlip10ms>

		tim13_timer++;
 800530e:	4b0e      	ldr	r3, [pc, #56]	; (8005348 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	3301      	adds	r3, #1
 8005314:	4a0c      	ldr	r2, [pc, #48]	; (8005348 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005316:	6013      	str	r3, [r2, #0]
		if(tim13_timer >= 100000) tim13_timer = 0;
 8005318:	4b0b      	ldr	r3, [pc, #44]	; (8005348 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a06      	ldr	r2, [pc, #24]	; (8005338 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d902      	bls.n	8005328 <HAL_TIM_PeriodElapsedCallback+0x80>
 8005322:	4b09      	ldr	r3, [pc, #36]	; (8005348 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005324:	2200      	movs	r2, #0
 8005326:	601a      	str	r2, [r3, #0]
	}

}
 8005328:	bf00      	nop
 800532a:	3708      	adds	r7, #8
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}
 8005330:	40001400 	.word	0x40001400
 8005334:	2003ea58 	.word	0x2003ea58
 8005338:	0001869f 	.word	0x0001869f
 800533c:	40001000 	.word	0x40001000
 8005340:	2003ea14 	.word	0x2003ea14
 8005344:	40001c00 	.word	0x40001c00
 8005348:	2003ea5c 	.word	0x2003ea5c

0800534c <init>:

void init()
{
 800534c:	b580      	push	{r7, lr}
 800534e:	af00      	add	r7, sp, #0
	// ------initialize------//
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET); // sensor led ON
 8005350:	2201      	movs	r2, #1
 8005352:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005356:	4808      	ldr	r0, [pc, #32]	; (8005378 <init+0x2c>)
 8005358:	f004 faae 	bl	80098b8 <HAL_GPIO_WritePin>

	// timer interrpt in start
	HAL_TIM_Base_Start_IT(&htim6);
 800535c:	4807      	ldr	r0, [pc, #28]	; (800537c <init+0x30>)
 800535e:	f008 f976 	bl	800d64e <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8005362:	4807      	ldr	r0, [pc, #28]	; (8005380 <init+0x34>)
 8005364:	f008 f973 	bl	800d64e <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim13);
 8005368:	4806      	ldr	r0, [pc, #24]	; (8005384 <init+0x38>)
 800536a:	f008 f970 	bl	800d64e <HAL_TIM_Base_Start_IT>

	cppInit();
 800536e:	f001 fce3 	bl	8006d38 <cppInit>

	//path_following_initialize();

}
 8005372:	bf00      	nop
 8005374:	bd80      	pop	{r7, pc}
 8005376:	bf00      	nop
 8005378:	40021000 	.word	0x40021000
 800537c:	2003eb40 	.word	0x2003eb40
 8005380:	2003ece4 	.word	0x2003ece4
 8005384:	2003ea60 	.word	0x2003ea60

08005388 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800538c:	f002 ff8c 	bl	80082a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005390:	f000 f82a 	bl	80053e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005394:	f000 fdbc 	bl	8005f10 <MX_GPIO_Init>
  MX_DMA_Init();
 8005398:	f000 fd8a 	bl	8005eb0 <MX_DMA_Init>
  MX_I2C2_Init();
 800539c:	f000 f9e8 	bl	8005770 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 80053a0:	f000 fa14 	bl	80057cc <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 80053a4:	f000 fa32 	bl	800580c <MX_SPI2_Init>
  MX_TIM1_Init();
 80053a8:	f000 fa66 	bl	8005878 <MX_TIM1_Init>
  MX_TIM4_Init();
 80053ac:	f000 fb70 	bl	8005a90 <MX_TIM4_Init>
  MX_TIM8_Init();
 80053b0:	f000 fc3c 	bl	8005c2c <MX_TIM8_Init>
  MX_USART2_UART_Init();
 80053b4:	f000 fd52 	bl	8005e5c <MX_USART2_UART_Init>
  MX_FATFS_Init();
 80053b8:	f00a f91c 	bl	800f5f4 <MX_FATFS_Init>
  MX_TIM6_Init();
 80053bc:	f000 fbcc 	bl	8005b58 <MX_TIM6_Init>
  MX_I2C1_Init();
 80053c0:	f000 f9a8 	bl	8005714 <MX_I2C1_Init>
  MX_TIM3_Init();
 80053c4:	f000 fb00 	bl	80059c8 <MX_TIM3_Init>
  MX_TIM10_Init();
 80053c8:	f000 fc88 	bl	8005cdc <MX_TIM10_Init>
  MX_TIM11_Init();
 80053cc:	f000 fcd4 	bl	8005d78 <MX_TIM11_Init>
  MX_ADC2_Init();
 80053d0:	f000 f898 	bl	8005504 <MX_ADC2_Init>
  MX_TIM7_Init();
 80053d4:	f000 fbf6 	bl	8005bc4 <MX_TIM7_Init>
  MX_TIM13_Init();
 80053d8:	f000 fd1c 	bl	8005e14 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  init();
 80053dc:	f7ff ffb6 	bl	800534c <init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  cppLoop();
 80053e0:	f001 fdbe 	bl	8006f60 <cppLoop>
 80053e4:	e7fc      	b.n	80053e0 <main+0x58>
	...

080053e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b0a4      	sub	sp, #144	; 0x90
 80053ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80053ee:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80053f2:	2234      	movs	r2, #52	; 0x34
 80053f4:	2100      	movs	r1, #0
 80053f6:	4618      	mov	r0, r3
 80053f8:	f00e fd49 	bl	8013e8e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80053fc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005400:	2200      	movs	r2, #0
 8005402:	601a      	str	r2, [r3, #0]
 8005404:	605a      	str	r2, [r3, #4]
 8005406:	609a      	str	r2, [r3, #8]
 8005408:	60da      	str	r2, [r3, #12]
 800540a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800540c:	f107 030c 	add.w	r3, r7, #12
 8005410:	223c      	movs	r2, #60	; 0x3c
 8005412:	2100      	movs	r1, #0
 8005414:	4618      	mov	r0, r3
 8005416:	f00e fd3a 	bl	8013e8e <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800541a:	2300      	movs	r3, #0
 800541c:	60bb      	str	r3, [r7, #8]
 800541e:	4b37      	ldr	r3, [pc, #220]	; (80054fc <SystemClock_Config+0x114>)
 8005420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005422:	4a36      	ldr	r2, [pc, #216]	; (80054fc <SystemClock_Config+0x114>)
 8005424:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005428:	6413      	str	r3, [r2, #64]	; 0x40
 800542a:	4b34      	ldr	r3, [pc, #208]	; (80054fc <SystemClock_Config+0x114>)
 800542c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800542e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005432:	60bb      	str	r3, [r7, #8]
 8005434:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005436:	2300      	movs	r3, #0
 8005438:	607b      	str	r3, [r7, #4]
 800543a:	4b31      	ldr	r3, [pc, #196]	; (8005500 <SystemClock_Config+0x118>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	4a30      	ldr	r2, [pc, #192]	; (8005500 <SystemClock_Config+0x118>)
 8005440:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005444:	6013      	str	r3, [r2, #0]
 8005446:	4b2e      	ldr	r3, [pc, #184]	; (8005500 <SystemClock_Config+0x118>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800544e:	607b      	str	r3, [r7, #4]
 8005450:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005452:	2301      	movs	r3, #1
 8005454:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005456:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800545a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800545c:	2302      	movs	r3, #2
 800545e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005460:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005464:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 8;
 8005466:	2308      	movs	r3, #8
 8005468:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800546a:	23b4      	movs	r3, #180	; 0xb4
 800546c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005470:	2302      	movs	r3, #2
 8005472:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8005476:	2308      	movs	r3, #8
 8005478:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 2;
 800547c:	2302      	movs	r3, #2
 800547e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005482:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005486:	4618      	mov	r0, r3
 8005488:	f005 fe38 	bl	800b0fc <HAL_RCC_OscConfig>
 800548c:	4603      	mov	r3, r0
 800548e:	2b00      	cmp	r3, #0
 8005490:	d001      	beq.n	8005496 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8005492:	f000 fe7f 	bl	8006194 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8005496:	f005 f9b3 	bl	800a800 <HAL_PWREx_EnableOverDrive>
 800549a:	4603      	mov	r3, r0
 800549c:	2b00      	cmp	r3, #0
 800549e:	d001      	beq.n	80054a4 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80054a0:	f000 fe78 	bl	8006194 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80054a4:	230f      	movs	r3, #15
 80054a6:	64bb      	str	r3, [r7, #72]	; 0x48
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80054a8:	2302      	movs	r3, #2
 80054aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80054ac:	2300      	movs	r3, #0
 80054ae:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80054b0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80054b4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80054b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80054ba:	65bb      	str	r3, [r7, #88]	; 0x58

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80054bc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80054c0:	2105      	movs	r1, #5
 80054c2:	4618      	mov	r0, r3
 80054c4:	f005 f9ec 	bl	800a8a0 <HAL_RCC_ClockConfig>
 80054c8:	4603      	mov	r3, r0
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d001      	beq.n	80054d2 <SystemClock_Config+0xea>
  {
    Error_Handler();
 80054ce:	f000 fe61 	bl	8006194 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 80054d2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80054d6:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80054d8:	2300      	movs	r3, #0
 80054da:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 80054dc:	2300      	movs	r3, #0
 80054de:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80054e0:	f107 030c 	add.w	r3, r7, #12
 80054e4:	4618      	mov	r0, r3
 80054e6:	f005 fbcb 	bl	800ac80 <HAL_RCCEx_PeriphCLKConfig>
 80054ea:	4603      	mov	r3, r0
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d001      	beq.n	80054f4 <SystemClock_Config+0x10c>
  {
    Error_Handler();
 80054f0:	f000 fe50 	bl	8006194 <Error_Handler>
  }
}
 80054f4:	bf00      	nop
 80054f6:	3790      	adds	r7, #144	; 0x90
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}
 80054fc:	40023800 	.word	0x40023800
 8005500:	40007000 	.word	0x40007000

08005504 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b084      	sub	sp, #16
 8005508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800550a:	463b      	mov	r3, r7
 800550c:	2200      	movs	r2, #0
 800550e:	601a      	str	r2, [r3, #0]
 8005510:	605a      	str	r2, [r3, #4]
 8005512:	609a      	str	r2, [r3, #8]
 8005514:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8005516:	4b7c      	ldr	r3, [pc, #496]	; (8005708 <MX_ADC2_Init+0x204>)
 8005518:	4a7c      	ldr	r2, [pc, #496]	; (800570c <MX_ADC2_Init+0x208>)
 800551a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800551c:	4b7a      	ldr	r3, [pc, #488]	; (8005708 <MX_ADC2_Init+0x204>)
 800551e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005522:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8005524:	4b78      	ldr	r3, [pc, #480]	; (8005708 <MX_ADC2_Init+0x204>)
 8005526:	2200      	movs	r2, #0
 8005528:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 800552a:	4b77      	ldr	r3, [pc, #476]	; (8005708 <MX_ADC2_Init+0x204>)
 800552c:	2201      	movs	r2, #1
 800552e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8005530:	4b75      	ldr	r3, [pc, #468]	; (8005708 <MX_ADC2_Init+0x204>)
 8005532:	2201      	movs	r2, #1
 8005534:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8005536:	4b74      	ldr	r3, [pc, #464]	; (8005708 <MX_ADC2_Init+0x204>)
 8005538:	2200      	movs	r2, #0
 800553a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800553e:	4b72      	ldr	r3, [pc, #456]	; (8005708 <MX_ADC2_Init+0x204>)
 8005540:	2200      	movs	r2, #0
 8005542:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005544:	4b70      	ldr	r3, [pc, #448]	; (8005708 <MX_ADC2_Init+0x204>)
 8005546:	4a72      	ldr	r2, [pc, #456]	; (8005710 <MX_ADC2_Init+0x20c>)
 8005548:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800554a:	4b6f      	ldr	r3, [pc, #444]	; (8005708 <MX_ADC2_Init+0x204>)
 800554c:	2200      	movs	r2, #0
 800554e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 14;
 8005550:	4b6d      	ldr	r3, [pc, #436]	; (8005708 <MX_ADC2_Init+0x204>)
 8005552:	220e      	movs	r2, #14
 8005554:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8005556:	4b6c      	ldr	r3, [pc, #432]	; (8005708 <MX_ADC2_Init+0x204>)
 8005558:	2201      	movs	r2, #1
 800555a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800555e:	4b6a      	ldr	r3, [pc, #424]	; (8005708 <MX_ADC2_Init+0x204>)
 8005560:	2201      	movs	r2, #1
 8005562:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8005564:	4868      	ldr	r0, [pc, #416]	; (8005708 <MX_ADC2_Init+0x204>)
 8005566:	f002 ff33 	bl	80083d0 <HAL_ADC_Init>
 800556a:	4603      	mov	r3, r0
 800556c:	2b00      	cmp	r3, #0
 800556e:	d001      	beq.n	8005574 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8005570:	f000 fe10 	bl	8006194 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8005574:	230a      	movs	r3, #10
 8005576:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8005578:	2301      	movs	r3, #1
 800557a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 800557c:	2306      	movs	r3, #6
 800557e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005580:	463b      	mov	r3, r7
 8005582:	4619      	mov	r1, r3
 8005584:	4860      	ldr	r0, [pc, #384]	; (8005708 <MX_ADC2_Init+0x204>)
 8005586:	f003 f877 	bl	8008678 <HAL_ADC_ConfigChannel>
 800558a:	4603      	mov	r3, r0
 800558c:	2b00      	cmp	r3, #0
 800558e:	d001      	beq.n	8005594 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8005590:	f000 fe00 	bl	8006194 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8005594:	230b      	movs	r3, #11
 8005596:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8005598:	2302      	movs	r3, #2
 800559a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800559c:	463b      	mov	r3, r7
 800559e:	4619      	mov	r1, r3
 80055a0:	4859      	ldr	r0, [pc, #356]	; (8005708 <MX_ADC2_Init+0x204>)
 80055a2:	f003 f869 	bl	8008678 <HAL_ADC_ConfigChannel>
 80055a6:	4603      	mov	r3, r0
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d001      	beq.n	80055b0 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 80055ac:	f000 fdf2 	bl	8006194 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80055b0:	230c      	movs	r3, #12
 80055b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80055b4:	2303      	movs	r3, #3
 80055b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80055b8:	463b      	mov	r3, r7
 80055ba:	4619      	mov	r1, r3
 80055bc:	4852      	ldr	r0, [pc, #328]	; (8005708 <MX_ADC2_Init+0x204>)
 80055be:	f003 f85b 	bl	8008678 <HAL_ADC_ConfigChannel>
 80055c2:	4603      	mov	r3, r0
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d001      	beq.n	80055cc <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 80055c8:	f000 fde4 	bl	8006194 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80055cc:	230d      	movs	r3, #13
 80055ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80055d0:	2304      	movs	r3, #4
 80055d2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80055d4:	463b      	mov	r3, r7
 80055d6:	4619      	mov	r1, r3
 80055d8:	484b      	ldr	r0, [pc, #300]	; (8005708 <MX_ADC2_Init+0x204>)
 80055da:	f003 f84d 	bl	8008678 <HAL_ADC_ConfigChannel>
 80055de:	4603      	mov	r3, r0
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d001      	beq.n	80055e8 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 80055e4:	f000 fdd6 	bl	8006194 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80055e8:	2300      	movs	r3, #0
 80055ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80055ec:	2305      	movs	r3, #5
 80055ee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80055f0:	463b      	mov	r3, r7
 80055f2:	4619      	mov	r1, r3
 80055f4:	4844      	ldr	r0, [pc, #272]	; (8005708 <MX_ADC2_Init+0x204>)
 80055f6:	f003 f83f 	bl	8008678 <HAL_ADC_ConfigChannel>
 80055fa:	4603      	mov	r3, r0
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d001      	beq.n	8005604 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8005600:	f000 fdc8 	bl	8006194 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8005604:	2301      	movs	r3, #1
 8005606:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8005608:	2306      	movs	r3, #6
 800560a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800560c:	463b      	mov	r3, r7
 800560e:	4619      	mov	r1, r3
 8005610:	483d      	ldr	r0, [pc, #244]	; (8005708 <MX_ADC2_Init+0x204>)
 8005612:	f003 f831 	bl	8008678 <HAL_ADC_ConfigChannel>
 8005616:	4603      	mov	r3, r0
 8005618:	2b00      	cmp	r3, #0
 800561a:	d001      	beq.n	8005620 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 800561c:	f000 fdba 	bl	8006194 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8005620:	2302      	movs	r3, #2
 8005622:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8005624:	2307      	movs	r3, #7
 8005626:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005628:	463b      	mov	r3, r7
 800562a:	4619      	mov	r1, r3
 800562c:	4836      	ldr	r0, [pc, #216]	; (8005708 <MX_ADC2_Init+0x204>)
 800562e:	f003 f823 	bl	8008678 <HAL_ADC_ConfigChannel>
 8005632:	4603      	mov	r3, r0
 8005634:	2b00      	cmp	r3, #0
 8005636:	d001      	beq.n	800563c <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 8005638:	f000 fdac 	bl	8006194 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800563c:	2303      	movs	r3, #3
 800563e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8005640:	2308      	movs	r3, #8
 8005642:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005644:	463b      	mov	r3, r7
 8005646:	4619      	mov	r1, r3
 8005648:	482f      	ldr	r0, [pc, #188]	; (8005708 <MX_ADC2_Init+0x204>)
 800564a:	f003 f815 	bl	8008678 <HAL_ADC_ConfigChannel>
 800564e:	4603      	mov	r3, r0
 8005650:	2b00      	cmp	r3, #0
 8005652:	d001      	beq.n	8005658 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 8005654:	f000 fd9e 	bl	8006194 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8005658:	2304      	movs	r3, #4
 800565a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 800565c:	2309      	movs	r3, #9
 800565e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005660:	463b      	mov	r3, r7
 8005662:	4619      	mov	r1, r3
 8005664:	4828      	ldr	r0, [pc, #160]	; (8005708 <MX_ADC2_Init+0x204>)
 8005666:	f003 f807 	bl	8008678 <HAL_ADC_ConfigChannel>
 800566a:	4603      	mov	r3, r0
 800566c:	2b00      	cmp	r3, #0
 800566e:	d001      	beq.n	8005674 <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 8005670:	f000 fd90 	bl	8006194 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8005674:	2305      	movs	r3, #5
 8005676:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8005678:	230a      	movs	r3, #10
 800567a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800567c:	463b      	mov	r3, r7
 800567e:	4619      	mov	r1, r3
 8005680:	4821      	ldr	r0, [pc, #132]	; (8005708 <MX_ADC2_Init+0x204>)
 8005682:	f002 fff9 	bl	8008678 <HAL_ADC_ConfigChannel>
 8005686:	4603      	mov	r3, r0
 8005688:	2b00      	cmp	r3, #0
 800568a:	d001      	beq.n	8005690 <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 800568c:	f000 fd82 	bl	8006194 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8005690:	2306      	movs	r3, #6
 8005692:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8005694:	230b      	movs	r3, #11
 8005696:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005698:	463b      	mov	r3, r7
 800569a:	4619      	mov	r1, r3
 800569c:	481a      	ldr	r0, [pc, #104]	; (8005708 <MX_ADC2_Init+0x204>)
 800569e:	f002 ffeb 	bl	8008678 <HAL_ADC_ConfigChannel>
 80056a2:	4603      	mov	r3, r0
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d001      	beq.n	80056ac <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 80056a8:	f000 fd74 	bl	8006194 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80056ac:	2307      	movs	r3, #7
 80056ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 80056b0:	230c      	movs	r3, #12
 80056b2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80056b4:	463b      	mov	r3, r7
 80056b6:	4619      	mov	r1, r3
 80056b8:	4813      	ldr	r0, [pc, #76]	; (8005708 <MX_ADC2_Init+0x204>)
 80056ba:	f002 ffdd 	bl	8008678 <HAL_ADC_ConfigChannel>
 80056be:	4603      	mov	r3, r0
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d001      	beq.n	80056c8 <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 80056c4:	f000 fd66 	bl	8006194 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80056c8:	2308      	movs	r3, #8
 80056ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 80056cc:	230d      	movs	r3, #13
 80056ce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80056d0:	463b      	mov	r3, r7
 80056d2:	4619      	mov	r1, r3
 80056d4:	480c      	ldr	r0, [pc, #48]	; (8005708 <MX_ADC2_Init+0x204>)
 80056d6:	f002 ffcf 	bl	8008678 <HAL_ADC_ConfigChannel>
 80056da:	4603      	mov	r3, r0
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d001      	beq.n	80056e4 <MX_ADC2_Init+0x1e0>
  {
    Error_Handler();
 80056e0:	f000 fd58 	bl	8006194 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80056e4:	2309      	movs	r3, #9
 80056e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 80056e8:	230e      	movs	r3, #14
 80056ea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80056ec:	463b      	mov	r3, r7
 80056ee:	4619      	mov	r1, r3
 80056f0:	4805      	ldr	r0, [pc, #20]	; (8005708 <MX_ADC2_Init+0x204>)
 80056f2:	f002 ffc1 	bl	8008678 <HAL_ADC_ConfigChannel>
 80056f6:	4603      	mov	r3, r0
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d001      	beq.n	8005700 <MX_ADC2_Init+0x1fc>
  {
    Error_Handler();
 80056fc:	f000 fd4a 	bl	8006194 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8005700:	bf00      	nop
 8005702:	3710      	adds	r7, #16
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}
 8005708:	2003e8e4 	.word	0x2003e8e4
 800570c:	40012100 	.word	0x40012100
 8005710:	0f000001 	.word	0x0f000001

08005714 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005718:	4b12      	ldr	r3, [pc, #72]	; (8005764 <MX_I2C1_Init+0x50>)
 800571a:	4a13      	ldr	r2, [pc, #76]	; (8005768 <MX_I2C1_Init+0x54>)
 800571c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800571e:	4b11      	ldr	r3, [pc, #68]	; (8005764 <MX_I2C1_Init+0x50>)
 8005720:	4a12      	ldr	r2, [pc, #72]	; (800576c <MX_I2C1_Init+0x58>)
 8005722:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005724:	4b0f      	ldr	r3, [pc, #60]	; (8005764 <MX_I2C1_Init+0x50>)
 8005726:	2200      	movs	r2, #0
 8005728:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800572a:	4b0e      	ldr	r3, [pc, #56]	; (8005764 <MX_I2C1_Init+0x50>)
 800572c:	2200      	movs	r2, #0
 800572e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005730:	4b0c      	ldr	r3, [pc, #48]	; (8005764 <MX_I2C1_Init+0x50>)
 8005732:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005736:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005738:	4b0a      	ldr	r3, [pc, #40]	; (8005764 <MX_I2C1_Init+0x50>)
 800573a:	2200      	movs	r2, #0
 800573c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800573e:	4b09      	ldr	r3, [pc, #36]	; (8005764 <MX_I2C1_Init+0x50>)
 8005740:	2200      	movs	r2, #0
 8005742:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8005744:	4b07      	ldr	r3, [pc, #28]	; (8005764 <MX_I2C1_Init+0x50>)
 8005746:	2200      	movs	r2, #0
 8005748:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 800574a:	4b06      	ldr	r3, [pc, #24]	; (8005764 <MX_I2C1_Init+0x50>)
 800574c:	2280      	movs	r2, #128	; 0x80
 800574e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005750:	4804      	ldr	r0, [pc, #16]	; (8005764 <MX_I2C1_Init+0x50>)
 8005752:	f004 f8cb 	bl	80098ec <HAL_I2C_Init>
 8005756:	4603      	mov	r3, r0
 8005758:	2b00      	cmp	r3, #0
 800575a:	d001      	beq.n	8005760 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800575c:	f000 fd1a 	bl	8006194 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005760:	bf00      	nop
 8005762:	bd80      	pop	{r7, pc}
 8005764:	2003e92c 	.word	0x2003e92c
 8005768:	40005400 	.word	0x40005400
 800576c:	000186a0 	.word	0x000186a0

08005770 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8005774:	4b12      	ldr	r3, [pc, #72]	; (80057c0 <MX_I2C2_Init+0x50>)
 8005776:	4a13      	ldr	r2, [pc, #76]	; (80057c4 <MX_I2C2_Init+0x54>)
 8005778:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800577a:	4b11      	ldr	r3, [pc, #68]	; (80057c0 <MX_I2C2_Init+0x50>)
 800577c:	4a12      	ldr	r2, [pc, #72]	; (80057c8 <MX_I2C2_Init+0x58>)
 800577e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005780:	4b0f      	ldr	r3, [pc, #60]	; (80057c0 <MX_I2C2_Init+0x50>)
 8005782:	2200      	movs	r2, #0
 8005784:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8005786:	4b0e      	ldr	r3, [pc, #56]	; (80057c0 <MX_I2C2_Init+0x50>)
 8005788:	2200      	movs	r2, #0
 800578a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800578c:	4b0c      	ldr	r3, [pc, #48]	; (80057c0 <MX_I2C2_Init+0x50>)
 800578e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005792:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005794:	4b0a      	ldr	r3, [pc, #40]	; (80057c0 <MX_I2C2_Init+0x50>)
 8005796:	2200      	movs	r2, #0
 8005798:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800579a:	4b09      	ldr	r3, [pc, #36]	; (80057c0 <MX_I2C2_Init+0x50>)
 800579c:	2200      	movs	r2, #0
 800579e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80057a0:	4b07      	ldr	r3, [pc, #28]	; (80057c0 <MX_I2C2_Init+0x50>)
 80057a2:	2200      	movs	r2, #0
 80057a4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 80057a6:	4b06      	ldr	r3, [pc, #24]	; (80057c0 <MX_I2C2_Init+0x50>)
 80057a8:	2280      	movs	r2, #128	; 0x80
 80057aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80057ac:	4804      	ldr	r0, [pc, #16]	; (80057c0 <MX_I2C2_Init+0x50>)
 80057ae:	f004 f89d 	bl	80098ec <HAL_I2C_Init>
 80057b2:	4603      	mov	r3, r0
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d001      	beq.n	80057bc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80057b8:	f000 fcec 	bl	8006194 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80057bc:	bf00      	nop
 80057be:	bd80      	pop	{r7, pc}
 80057c0:	2003e9c0 	.word	0x2003e9c0
 80057c4:	40005800 	.word	0x40005800
 80057c8:	000186a0 	.word	0x000186a0

080057cc <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80057cc:	b480      	push	{r7}
 80057ce:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80057d0:	4b0c      	ldr	r3, [pc, #48]	; (8005804 <MX_SDIO_SD_Init+0x38>)
 80057d2:	4a0d      	ldr	r2, [pc, #52]	; (8005808 <MX_SDIO_SD_Init+0x3c>)
 80057d4:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80057d6:	4b0b      	ldr	r3, [pc, #44]	; (8005804 <MX_SDIO_SD_Init+0x38>)
 80057d8:	2200      	movs	r2, #0
 80057da:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80057dc:	4b09      	ldr	r3, [pc, #36]	; (8005804 <MX_SDIO_SD_Init+0x38>)
 80057de:	2200      	movs	r2, #0
 80057e0:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80057e2:	4b08      	ldr	r3, [pc, #32]	; (8005804 <MX_SDIO_SD_Init+0x38>)
 80057e4:	2200      	movs	r2, #0
 80057e6:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80057e8:	4b06      	ldr	r3, [pc, #24]	; (8005804 <MX_SDIO_SD_Init+0x38>)
 80057ea:	2200      	movs	r2, #0
 80057ec:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80057ee:	4b05      	ldr	r3, [pc, #20]	; (8005804 <MX_SDIO_SD_Init+0x38>)
 80057f0:	2200      	movs	r2, #0
 80057f2:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 2;
 80057f4:	4b03      	ldr	r3, [pc, #12]	; (8005804 <MX_SDIO_SD_Init+0x38>)
 80057f6:	2202      	movs	r2, #2
 80057f8:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80057fa:	bf00      	nop
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr
 8005804:	2003ebc0 	.word	0x2003ebc0
 8005808:	40012c00 	.word	0x40012c00

0800580c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8005810:	4b17      	ldr	r3, [pc, #92]	; (8005870 <MX_SPI2_Init+0x64>)
 8005812:	4a18      	ldr	r2, [pc, #96]	; (8005874 <MX_SPI2_Init+0x68>)
 8005814:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8005816:	4b16      	ldr	r3, [pc, #88]	; (8005870 <MX_SPI2_Init+0x64>)
 8005818:	f44f 7282 	mov.w	r2, #260	; 0x104
 800581c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800581e:	4b14      	ldr	r3, [pc, #80]	; (8005870 <MX_SPI2_Init+0x64>)
 8005820:	2200      	movs	r2, #0
 8005822:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8005824:	4b12      	ldr	r3, [pc, #72]	; (8005870 <MX_SPI2_Init+0x64>)
 8005826:	2200      	movs	r2, #0
 8005828:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800582a:	4b11      	ldr	r3, [pc, #68]	; (8005870 <MX_SPI2_Init+0x64>)
 800582c:	2202      	movs	r2, #2
 800582e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8005830:	4b0f      	ldr	r3, [pc, #60]	; (8005870 <MX_SPI2_Init+0x64>)
 8005832:	2201      	movs	r2, #1
 8005834:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8005836:	4b0e      	ldr	r3, [pc, #56]	; (8005870 <MX_SPI2_Init+0x64>)
 8005838:	f44f 7200 	mov.w	r2, #512	; 0x200
 800583c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800583e:	4b0c      	ldr	r3, [pc, #48]	; (8005870 <MX_SPI2_Init+0x64>)
 8005840:	2228      	movs	r2, #40	; 0x28
 8005842:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005844:	4b0a      	ldr	r3, [pc, #40]	; (8005870 <MX_SPI2_Init+0x64>)
 8005846:	2200      	movs	r2, #0
 8005848:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800584a:	4b09      	ldr	r3, [pc, #36]	; (8005870 <MX_SPI2_Init+0x64>)
 800584c:	2200      	movs	r2, #0
 800584e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005850:	4b07      	ldr	r3, [pc, #28]	; (8005870 <MX_SPI2_Init+0x64>)
 8005852:	2200      	movs	r2, #0
 8005854:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8005856:	4b06      	ldr	r3, [pc, #24]	; (8005870 <MX_SPI2_Init+0x64>)
 8005858:	220a      	movs	r2, #10
 800585a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800585c:	4804      	ldr	r0, [pc, #16]	; (8005870 <MX_SPI2_Init+0x64>)
 800585e:	f007 f977 	bl	800cb50 <HAL_SPI_Init>
 8005862:	4603      	mov	r3, r0
 8005864:	2b00      	cmp	r3, #0
 8005866:	d001      	beq.n	800586c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8005868:	f000 fc94 	bl	8006194 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800586c:	bf00      	nop
 800586e:	bd80      	pop	{r7, pc}
 8005870:	2003e80c 	.word	0x2003e80c
 8005874:	40003800 	.word	0x40003800

08005878 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b09a      	sub	sp, #104	; 0x68
 800587c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800587e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005882:	2224      	movs	r2, #36	; 0x24
 8005884:	2100      	movs	r1, #0
 8005886:	4618      	mov	r0, r3
 8005888:	f00e fb01 	bl	8013e8e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800588c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005890:	2200      	movs	r2, #0
 8005892:	601a      	str	r2, [r3, #0]
 8005894:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005896:	f107 0320 	add.w	r3, r7, #32
 800589a:	2200      	movs	r2, #0
 800589c:	601a      	str	r2, [r3, #0]
 800589e:	605a      	str	r2, [r3, #4]
 80058a0:	609a      	str	r2, [r3, #8]
 80058a2:	60da      	str	r2, [r3, #12]
 80058a4:	611a      	str	r2, [r3, #16]
 80058a6:	615a      	str	r2, [r3, #20]
 80058a8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80058aa:	463b      	mov	r3, r7
 80058ac:	2220      	movs	r2, #32
 80058ae:	2100      	movs	r1, #0
 80058b0:	4618      	mov	r0, r3
 80058b2:	f00e faec 	bl	8013e8e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80058b6:	4b42      	ldr	r3, [pc, #264]	; (80059c0 <MX_TIM1_Init+0x148>)
 80058b8:	4a42      	ldr	r2, [pc, #264]	; (80059c4 <MX_TIM1_Init+0x14c>)
 80058ba:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80058bc:	4b40      	ldr	r3, [pc, #256]	; (80059c0 <MX_TIM1_Init+0x148>)
 80058be:	2200      	movs	r2, #0
 80058c0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80058c2:	4b3f      	ldr	r3, [pc, #252]	; (80059c0 <MX_TIM1_Init+0x148>)
 80058c4:	2200      	movs	r2, #0
 80058c6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80058c8:	4b3d      	ldr	r3, [pc, #244]	; (80059c0 <MX_TIM1_Init+0x148>)
 80058ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058ce:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80058d0:	4b3b      	ldr	r3, [pc, #236]	; (80059c0 <MX_TIM1_Init+0x148>)
 80058d2:	2200      	movs	r2, #0
 80058d4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80058d6:	4b3a      	ldr	r3, [pc, #232]	; (80059c0 <MX_TIM1_Init+0x148>)
 80058d8:	2200      	movs	r2, #0
 80058da:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80058dc:	4b38      	ldr	r3, [pc, #224]	; (80059c0 <MX_TIM1_Init+0x148>)
 80058de:	2200      	movs	r2, #0
 80058e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80058e2:	4837      	ldr	r0, [pc, #220]	; (80059c0 <MX_TIM1_Init+0x148>)
 80058e4:	f007 fed7 	bl	800d696 <HAL_TIM_PWM_Init>
 80058e8:	4603      	mov	r3, r0
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d001      	beq.n	80058f2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80058ee:	f000 fc51 	bl	8006194 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80058f2:	2303      	movs	r3, #3
 80058f4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80058f6:	2300      	movs	r3, #0
 80058f8:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80058fa:	2301      	movs	r3, #1
 80058fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80058fe:	2300      	movs	r3, #0
 8005900:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 8005902:	2300      	movs	r3, #0
 8005904:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005906:	2300      	movs	r3, #0
 8005908:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800590a:	2301      	movs	r3, #1
 800590c:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800590e:	2300      	movs	r3, #0
 8005910:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 8005912:	2300      	movs	r3, #0
 8005914:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8005916:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800591a:	4619      	mov	r1, r3
 800591c:	4828      	ldr	r0, [pc, #160]	; (80059c0 <MX_TIM1_Init+0x148>)
 800591e:	f007 ff23 	bl	800d768 <HAL_TIM_Encoder_Init>
 8005922:	4603      	mov	r3, r0
 8005924:	2b00      	cmp	r3, #0
 8005926:	d001      	beq.n	800592c <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8005928:	f000 fc34 	bl	8006194 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800592c:	2300      	movs	r3, #0
 800592e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005930:	2300      	movs	r3, #0
 8005932:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005934:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8005938:	4619      	mov	r1, r3
 800593a:	4821      	ldr	r0, [pc, #132]	; (80059c0 <MX_TIM1_Init+0x148>)
 800593c:	f008 fc4a 	bl	800e1d4 <HAL_TIMEx_MasterConfigSynchronization>
 8005940:	4603      	mov	r3, r0
 8005942:	2b00      	cmp	r3, #0
 8005944:	d001      	beq.n	800594a <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 8005946:	f000 fc25 	bl	8006194 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800594a:	2360      	movs	r3, #96	; 0x60
 800594c:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 800594e:	2300      	movs	r3, #0
 8005950:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005952:	2300      	movs	r3, #0
 8005954:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005956:	2300      	movs	r3, #0
 8005958:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800595a:	2300      	movs	r3, #0
 800595c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800595e:	2300      	movs	r3, #0
 8005960:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005962:	2300      	movs	r3, #0
 8005964:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005966:	f107 0320 	add.w	r3, r7, #32
 800596a:	2208      	movs	r2, #8
 800596c:	4619      	mov	r1, r3
 800596e:	4814      	ldr	r0, [pc, #80]	; (80059c0 <MX_TIM1_Init+0x148>)
 8005970:	f008 f8cc 	bl	800db0c <HAL_TIM_PWM_ConfigChannel>
 8005974:	4603      	mov	r3, r0
 8005976:	2b00      	cmp	r3, #0
 8005978:	d001      	beq.n	800597e <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 800597a:	f000 fc0b 	bl	8006194 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800597e:	2300      	movs	r3, #0
 8005980:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005982:	2300      	movs	r3, #0
 8005984:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005986:	2300      	movs	r3, #0
 8005988:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800598a:	2300      	movs	r3, #0
 800598c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800598e:	2300      	movs	r3, #0
 8005990:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005992:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005996:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005998:	2300      	movs	r3, #0
 800599a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800599c:	463b      	mov	r3, r7
 800599e:	4619      	mov	r1, r3
 80059a0:	4807      	ldr	r0, [pc, #28]	; (80059c0 <MX_TIM1_Init+0x148>)
 80059a2:	f008 fc93 	bl	800e2cc <HAL_TIMEx_ConfigBreakDeadTime>
 80059a6:	4603      	mov	r3, r0
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d001      	beq.n	80059b0 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 80059ac:	f000 fbf2 	bl	8006194 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80059b0:	4803      	ldr	r0, [pc, #12]	; (80059c0 <MX_TIM1_Init+0x148>)
 80059b2:	f000 ffdf 	bl	8006974 <HAL_TIM_MspPostInit>

}
 80059b6:	bf00      	nop
 80059b8:	3768      	adds	r7, #104	; 0x68
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}
 80059be:	bf00      	nop
 80059c0:	2003eb80 	.word	0x2003eb80
 80059c4:	40010000 	.word	0x40010000

080059c8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b08a      	sub	sp, #40	; 0x28
 80059cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80059ce:	f107 0320 	add.w	r3, r7, #32
 80059d2:	2200      	movs	r2, #0
 80059d4:	601a      	str	r2, [r3, #0]
 80059d6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80059d8:	1d3b      	adds	r3, r7, #4
 80059da:	2200      	movs	r2, #0
 80059dc:	601a      	str	r2, [r3, #0]
 80059de:	605a      	str	r2, [r3, #4]
 80059e0:	609a      	str	r2, [r3, #8]
 80059e2:	60da      	str	r2, [r3, #12]
 80059e4:	611a      	str	r2, [r3, #16]
 80059e6:	615a      	str	r2, [r3, #20]
 80059e8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80059ea:	4b27      	ldr	r3, [pc, #156]	; (8005a88 <MX_TIM3_Init+0xc0>)
 80059ec:	4a27      	ldr	r2, [pc, #156]	; (8005a8c <MX_TIM3_Init+0xc4>)
 80059ee:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80059f0:	4b25      	ldr	r3, [pc, #148]	; (8005a88 <MX_TIM3_Init+0xc0>)
 80059f2:	2200      	movs	r2, #0
 80059f4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80059f6:	4b24      	ldr	r3, [pc, #144]	; (8005a88 <MX_TIM3_Init+0xc0>)
 80059f8:	2200      	movs	r2, #0
 80059fa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80059fc:	4b22      	ldr	r3, [pc, #136]	; (8005a88 <MX_TIM3_Init+0xc0>)
 80059fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a02:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005a04:	4b20      	ldr	r3, [pc, #128]	; (8005a88 <MX_TIM3_Init+0xc0>)
 8005a06:	2200      	movs	r2, #0
 8005a08:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005a0a:	4b1f      	ldr	r3, [pc, #124]	; (8005a88 <MX_TIM3_Init+0xc0>)
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005a10:	481d      	ldr	r0, [pc, #116]	; (8005a88 <MX_TIM3_Init+0xc0>)
 8005a12:	f007 fe40 	bl	800d696 <HAL_TIM_PWM_Init>
 8005a16:	4603      	mov	r3, r0
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d001      	beq.n	8005a20 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8005a1c:	f000 fbba 	bl	8006194 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005a20:	2300      	movs	r3, #0
 8005a22:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005a24:	2300      	movs	r3, #0
 8005a26:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005a28:	f107 0320 	add.w	r3, r7, #32
 8005a2c:	4619      	mov	r1, r3
 8005a2e:	4816      	ldr	r0, [pc, #88]	; (8005a88 <MX_TIM3_Init+0xc0>)
 8005a30:	f008 fbd0 	bl	800e1d4 <HAL_TIMEx_MasterConfigSynchronization>
 8005a34:	4603      	mov	r3, r0
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d001      	beq.n	8005a3e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8005a3a:	f000 fbab 	bl	8006194 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005a3e:	2360      	movs	r3, #96	; 0x60
 8005a40:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005a42:	2300      	movs	r3, #0
 8005a44:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005a46:	2300      	movs	r3, #0
 8005a48:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005a4e:	1d3b      	adds	r3, r7, #4
 8005a50:	2200      	movs	r2, #0
 8005a52:	4619      	mov	r1, r3
 8005a54:	480c      	ldr	r0, [pc, #48]	; (8005a88 <MX_TIM3_Init+0xc0>)
 8005a56:	f008 f859 	bl	800db0c <HAL_TIM_PWM_ConfigChannel>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d001      	beq.n	8005a64 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8005a60:	f000 fb98 	bl	8006194 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005a64:	1d3b      	adds	r3, r7, #4
 8005a66:	2204      	movs	r2, #4
 8005a68:	4619      	mov	r1, r3
 8005a6a:	4807      	ldr	r0, [pc, #28]	; (8005a88 <MX_TIM3_Init+0xc0>)
 8005a6c:	f008 f84e 	bl	800db0c <HAL_TIM_PWM_ConfigChannel>
 8005a70:	4603      	mov	r3, r0
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d001      	beq.n	8005a7a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8005a76:	f000 fb8d 	bl	8006194 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8005a7a:	4803      	ldr	r0, [pc, #12]	; (8005a88 <MX_TIM3_Init+0xc0>)
 8005a7c:	f000 ff7a 	bl	8006974 <HAL_TIM_MspPostInit>

}
 8005a80:	bf00      	nop
 8005a82:	3728      	adds	r7, #40	; 0x28
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}
 8005a88:	2003ea18 	.word	0x2003ea18
 8005a8c:	40000400 	.word	0x40000400

08005a90 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b08a      	sub	sp, #40	; 0x28
 8005a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005a96:	f107 0320 	add.w	r3, r7, #32
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	601a      	str	r2, [r3, #0]
 8005a9e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005aa0:	1d3b      	adds	r3, r7, #4
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	601a      	str	r2, [r3, #0]
 8005aa6:	605a      	str	r2, [r3, #4]
 8005aa8:	609a      	str	r2, [r3, #8]
 8005aaa:	60da      	str	r2, [r3, #12]
 8005aac:	611a      	str	r2, [r3, #16]
 8005aae:	615a      	str	r2, [r3, #20]
 8005ab0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8005ab2:	4b27      	ldr	r3, [pc, #156]	; (8005b50 <MX_TIM4_Init+0xc0>)
 8005ab4:	4a27      	ldr	r2, [pc, #156]	; (8005b54 <MX_TIM4_Init+0xc4>)
 8005ab6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8005ab8:	4b25      	ldr	r3, [pc, #148]	; (8005b50 <MX_TIM4_Init+0xc0>)
 8005aba:	2200      	movs	r2, #0
 8005abc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005abe:	4b24      	ldr	r3, [pc, #144]	; (8005b50 <MX_TIM4_Init+0xc0>)
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1800;
 8005ac4:	4b22      	ldr	r3, [pc, #136]	; (8005b50 <MX_TIM4_Init+0xc0>)
 8005ac6:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8005aca:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005acc:	4b20      	ldr	r3, [pc, #128]	; (8005b50 <MX_TIM4_Init+0xc0>)
 8005ace:	2200      	movs	r2, #0
 8005ad0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005ad2:	4b1f      	ldr	r3, [pc, #124]	; (8005b50 <MX_TIM4_Init+0xc0>)
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8005ad8:	481d      	ldr	r0, [pc, #116]	; (8005b50 <MX_TIM4_Init+0xc0>)
 8005ada:	f007 fddc 	bl	800d696 <HAL_TIM_PWM_Init>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d001      	beq.n	8005ae8 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8005ae4:	f000 fb56 	bl	8006194 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005aec:	2300      	movs	r3, #0
 8005aee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8005af0:	f107 0320 	add.w	r3, r7, #32
 8005af4:	4619      	mov	r1, r3
 8005af6:	4816      	ldr	r0, [pc, #88]	; (8005b50 <MX_TIM4_Init+0xc0>)
 8005af8:	f008 fb6c 	bl	800e1d4 <HAL_TIMEx_MasterConfigSynchronization>
 8005afc:	4603      	mov	r3, r0
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d001      	beq.n	8005b06 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8005b02:	f000 fb47 	bl	8006194 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005b06:	2360      	movs	r3, #96	; 0x60
 8005b08:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005b12:	2300      	movs	r3, #0
 8005b14:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8005b16:	1d3b      	adds	r3, r7, #4
 8005b18:	2208      	movs	r2, #8
 8005b1a:	4619      	mov	r1, r3
 8005b1c:	480c      	ldr	r0, [pc, #48]	; (8005b50 <MX_TIM4_Init+0xc0>)
 8005b1e:	f007 fff5 	bl	800db0c <HAL_TIM_PWM_ConfigChannel>
 8005b22:	4603      	mov	r3, r0
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d001      	beq.n	8005b2c <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8005b28:	f000 fb34 	bl	8006194 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8005b2c:	1d3b      	adds	r3, r7, #4
 8005b2e:	220c      	movs	r2, #12
 8005b30:	4619      	mov	r1, r3
 8005b32:	4807      	ldr	r0, [pc, #28]	; (8005b50 <MX_TIM4_Init+0xc0>)
 8005b34:	f007 ffea 	bl	800db0c <HAL_TIM_PWM_ConfigChannel>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d001      	beq.n	8005b42 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8005b3e:	f000 fb29 	bl	8006194 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8005b42:	4803      	ldr	r0, [pc, #12]	; (8005b50 <MX_TIM4_Init+0xc0>)
 8005b44:	f000 ff16 	bl	8006974 <HAL_TIM_MspPostInit>

}
 8005b48:	bf00      	nop
 8005b4a:	3728      	adds	r7, #40	; 0x28
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}
 8005b50:	2003e8a4 	.word	0x2003e8a4
 8005b54:	40000800 	.word	0x40000800

08005b58 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b082      	sub	sp, #8
 8005b5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005b5e:	463b      	mov	r3, r7
 8005b60:	2200      	movs	r2, #0
 8005b62:	601a      	str	r2, [r3, #0]
 8005b64:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8005b66:	4b15      	ldr	r3, [pc, #84]	; (8005bbc <MX_TIM6_Init+0x64>)
 8005b68:	4a15      	ldr	r2, [pc, #84]	; (8005bc0 <MX_TIM6_Init+0x68>)
 8005b6a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 8005b6c:	4b13      	ldr	r3, [pc, #76]	; (8005bbc <MX_TIM6_Init+0x64>)
 8005b6e:	2259      	movs	r2, #89	; 0x59
 8005b70:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005b72:	4b12      	ldr	r3, [pc, #72]	; (8005bbc <MX_TIM6_Init+0x64>)
 8005b74:	2200      	movs	r2, #0
 8005b76:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8005b78:	4b10      	ldr	r3, [pc, #64]	; (8005bbc <MX_TIM6_Init+0x64>)
 8005b7a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005b7e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005b80:	4b0e      	ldr	r3, [pc, #56]	; (8005bbc <MX_TIM6_Init+0x64>)
 8005b82:	2280      	movs	r2, #128	; 0x80
 8005b84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8005b86:	480d      	ldr	r0, [pc, #52]	; (8005bbc <MX_TIM6_Init+0x64>)
 8005b88:	f007 fd36 	bl	800d5f8 <HAL_TIM_Base_Init>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d001      	beq.n	8005b96 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8005b92:	f000 faff 	bl	8006194 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005b96:	2300      	movs	r3, #0
 8005b98:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8005b9e:	463b      	mov	r3, r7
 8005ba0:	4619      	mov	r1, r3
 8005ba2:	4806      	ldr	r0, [pc, #24]	; (8005bbc <MX_TIM6_Init+0x64>)
 8005ba4:	f008 fb16 	bl	800e1d4 <HAL_TIMEx_MasterConfigSynchronization>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d001      	beq.n	8005bb2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8005bae:	f000 faf1 	bl	8006194 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8005bb2:	bf00      	nop
 8005bb4:	3708      	adds	r7, #8
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}
 8005bba:	bf00      	nop
 8005bbc:	2003eb40 	.word	0x2003eb40
 8005bc0:	40001000 	.word	0x40001000

08005bc4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b082      	sub	sp, #8
 8005bc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005bca:	463b      	mov	r3, r7
 8005bcc:	2200      	movs	r2, #0
 8005bce:	601a      	str	r2, [r3, #0]
 8005bd0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8005bd2:	4b14      	ldr	r3, [pc, #80]	; (8005c24 <MX_TIM7_Init+0x60>)
 8005bd4:	4a14      	ldr	r2, [pc, #80]	; (8005c28 <MX_TIM7_Init+0x64>)
 8005bd6:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 179;
 8005bd8:	4b12      	ldr	r3, [pc, #72]	; (8005c24 <MX_TIM7_Init+0x60>)
 8005bda:	22b3      	movs	r2, #179	; 0xb3
 8005bdc:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005bde:	4b11      	ldr	r3, [pc, #68]	; (8005c24 <MX_TIM7_Init+0x60>)
 8005be0:	2200      	movs	r2, #0
 8005be2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 49;
 8005be4:	4b0f      	ldr	r3, [pc, #60]	; (8005c24 <MX_TIM7_Init+0x60>)
 8005be6:	2231      	movs	r2, #49	; 0x31
 8005be8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005bea:	4b0e      	ldr	r3, [pc, #56]	; (8005c24 <MX_TIM7_Init+0x60>)
 8005bec:	2280      	movs	r2, #128	; 0x80
 8005bee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8005bf0:	480c      	ldr	r0, [pc, #48]	; (8005c24 <MX_TIM7_Init+0x60>)
 8005bf2:	f007 fd01 	bl	800d5f8 <HAL_TIM_Base_Init>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d001      	beq.n	8005c00 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8005bfc:	f000 faca 	bl	8006194 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005c00:	2300      	movs	r3, #0
 8005c02:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005c04:	2300      	movs	r3, #0
 8005c06:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8005c08:	463b      	mov	r3, r7
 8005c0a:	4619      	mov	r1, r3
 8005c0c:	4805      	ldr	r0, [pc, #20]	; (8005c24 <MX_TIM7_Init+0x60>)
 8005c0e:	f008 fae1 	bl	800e1d4 <HAL_TIMEx_MasterConfigSynchronization>
 8005c12:	4603      	mov	r3, r0
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d001      	beq.n	8005c1c <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8005c18:	f000 fabc 	bl	8006194 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8005c1c:	bf00      	nop
 8005c1e:	3708      	adds	r7, #8
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}
 8005c24:	2003ece4 	.word	0x2003ece4
 8005c28:	40001400 	.word	0x40001400

08005c2c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b08c      	sub	sp, #48	; 0x30
 8005c30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8005c32:	f107 030c 	add.w	r3, r7, #12
 8005c36:	2224      	movs	r2, #36	; 0x24
 8005c38:	2100      	movs	r1, #0
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	f00e f927 	bl	8013e8e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005c40:	1d3b      	adds	r3, r7, #4
 8005c42:	2200      	movs	r2, #0
 8005c44:	601a      	str	r2, [r3, #0]
 8005c46:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8005c48:	4b22      	ldr	r3, [pc, #136]	; (8005cd4 <MX_TIM8_Init+0xa8>)
 8005c4a:	4a23      	ldr	r2, [pc, #140]	; (8005cd8 <MX_TIM8_Init+0xac>)
 8005c4c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8005c4e:	4b21      	ldr	r3, [pc, #132]	; (8005cd4 <MX_TIM8_Init+0xa8>)
 8005c50:	2200      	movs	r2, #0
 8005c52:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8005c54:	4b1f      	ldr	r3, [pc, #124]	; (8005cd4 <MX_TIM8_Init+0xa8>)
 8005c56:	2210      	movs	r2, #16
 8005c58:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8005c5a:	4b1e      	ldr	r3, [pc, #120]	; (8005cd4 <MX_TIM8_Init+0xa8>)
 8005c5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005c60:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005c62:	4b1c      	ldr	r3, [pc, #112]	; (8005cd4 <MX_TIM8_Init+0xa8>)
 8005c64:	2200      	movs	r2, #0
 8005c66:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8005c68:	4b1a      	ldr	r3, [pc, #104]	; (8005cd4 <MX_TIM8_Init+0xa8>)
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005c6e:	4b19      	ldr	r3, [pc, #100]	; (8005cd4 <MX_TIM8_Init+0xa8>)
 8005c70:	2200      	movs	r2, #0
 8005c72:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005c74:	2303      	movs	r3, #3
 8005c76:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005c80:	2300      	movs	r3, #0
 8005c82:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8005c84:	2300      	movs	r3, #0
 8005c86:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005c90:	2300      	movs	r3, #0
 8005c92:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8005c94:	2300      	movs	r3, #0
 8005c96:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8005c98:	f107 030c 	add.w	r3, r7, #12
 8005c9c:	4619      	mov	r1, r3
 8005c9e:	480d      	ldr	r0, [pc, #52]	; (8005cd4 <MX_TIM8_Init+0xa8>)
 8005ca0:	f007 fd62 	bl	800d768 <HAL_TIM_Encoder_Init>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d001      	beq.n	8005cae <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8005caa:	f000 fa73 	bl	8006194 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8005cb6:	1d3b      	adds	r3, r7, #4
 8005cb8:	4619      	mov	r1, r3
 8005cba:	4806      	ldr	r0, [pc, #24]	; (8005cd4 <MX_TIM8_Init+0xa8>)
 8005cbc:	f008 fa8a 	bl	800e1d4 <HAL_TIMEx_MasterConfigSynchronization>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d001      	beq.n	8005cca <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8005cc6:	f000 fa65 	bl	8006194 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8005cca:	bf00      	nop
 8005ccc:	3730      	adds	r7, #48	; 0x30
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}
 8005cd2:	bf00      	nop
 8005cd4:	2003e864 	.word	0x2003e864
 8005cd8:	40010400 	.word	0x40010400

08005cdc <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b088      	sub	sp, #32
 8005ce0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8005ce2:	1d3b      	adds	r3, r7, #4
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	601a      	str	r2, [r3, #0]
 8005ce8:	605a      	str	r2, [r3, #4]
 8005cea:	609a      	str	r2, [r3, #8]
 8005cec:	60da      	str	r2, [r3, #12]
 8005cee:	611a      	str	r2, [r3, #16]
 8005cf0:	615a      	str	r2, [r3, #20]
 8005cf2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8005cf4:	4b1e      	ldr	r3, [pc, #120]	; (8005d70 <MX_TIM10_Init+0x94>)
 8005cf6:	4a1f      	ldr	r2, [pc, #124]	; (8005d74 <MX_TIM10_Init+0x98>)
 8005cf8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8005cfa:	4b1d      	ldr	r3, [pc, #116]	; (8005d70 <MX_TIM10_Init+0x94>)
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005d00:	4b1b      	ldr	r3, [pc, #108]	; (8005d70 <MX_TIM10_Init+0x94>)
 8005d02:	2200      	movs	r2, #0
 8005d04:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8005d06:	4b1a      	ldr	r3, [pc, #104]	; (8005d70 <MX_TIM10_Init+0x94>)
 8005d08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005d0c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005d0e:	4b18      	ldr	r3, [pc, #96]	; (8005d70 <MX_TIM10_Init+0x94>)
 8005d10:	2200      	movs	r2, #0
 8005d12:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005d14:	4b16      	ldr	r3, [pc, #88]	; (8005d70 <MX_TIM10_Init+0x94>)
 8005d16:	2200      	movs	r2, #0
 8005d18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8005d1a:	4815      	ldr	r0, [pc, #84]	; (8005d70 <MX_TIM10_Init+0x94>)
 8005d1c:	f007 fc6c 	bl	800d5f8 <HAL_TIM_Base_Init>
 8005d20:	4603      	mov	r3, r0
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d001      	beq.n	8005d2a <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8005d26:	f000 fa35 	bl	8006194 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8005d2a:	4811      	ldr	r0, [pc, #68]	; (8005d70 <MX_TIM10_Init+0x94>)
 8005d2c:	f007 fcb3 	bl	800d696 <HAL_TIM_PWM_Init>
 8005d30:	4603      	mov	r3, r0
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d001      	beq.n	8005d3a <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8005d36:	f000 fa2d 	bl	8006194 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005d3a:	2360      	movs	r3, #96	; 0x60
 8005d3c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005d42:	2300      	movs	r3, #0
 8005d44:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005d46:	2300      	movs	r3, #0
 8005d48:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005d4a:	1d3b      	adds	r3, r7, #4
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	4619      	mov	r1, r3
 8005d50:	4807      	ldr	r0, [pc, #28]	; (8005d70 <MX_TIM10_Init+0x94>)
 8005d52:	f007 fedb 	bl	800db0c <HAL_TIM_PWM_ConfigChannel>
 8005d56:	4603      	mov	r3, r0
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d001      	beq.n	8005d60 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8005d5c:	f000 fa1a 	bl	8006194 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8005d60:	4803      	ldr	r0, [pc, #12]	; (8005d70 <MX_TIM10_Init+0x94>)
 8005d62:	f000 fe07 	bl	8006974 <HAL_TIM_MspPostInit>

}
 8005d66:	bf00      	nop
 8005d68:	3720      	adds	r7, #32
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}
 8005d6e:	bf00      	nop
 8005d70:	2003e980 	.word	0x2003e980
 8005d74:	40014400 	.word	0x40014400

08005d78 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b088      	sub	sp, #32
 8005d7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8005d7e:	1d3b      	adds	r3, r7, #4
 8005d80:	2200      	movs	r2, #0
 8005d82:	601a      	str	r2, [r3, #0]
 8005d84:	605a      	str	r2, [r3, #4]
 8005d86:	609a      	str	r2, [r3, #8]
 8005d88:	60da      	str	r2, [r3, #12]
 8005d8a:	611a      	str	r2, [r3, #16]
 8005d8c:	615a      	str	r2, [r3, #20]
 8005d8e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8005d90:	4b1e      	ldr	r3, [pc, #120]	; (8005e0c <MX_TIM11_Init+0x94>)
 8005d92:	4a1f      	ldr	r2, [pc, #124]	; (8005e10 <MX_TIM11_Init+0x98>)
 8005d94:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8005d96:	4b1d      	ldr	r3, [pc, #116]	; (8005e0c <MX_TIM11_Init+0x94>)
 8005d98:	2200      	movs	r2, #0
 8005d9a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005d9c:	4b1b      	ldr	r3, [pc, #108]	; (8005e0c <MX_TIM11_Init+0x94>)
 8005d9e:	2200      	movs	r2, #0
 8005da0:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8005da2:	4b1a      	ldr	r3, [pc, #104]	; (8005e0c <MX_TIM11_Init+0x94>)
 8005da4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005da8:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005daa:	4b18      	ldr	r3, [pc, #96]	; (8005e0c <MX_TIM11_Init+0x94>)
 8005dac:	2200      	movs	r2, #0
 8005dae:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005db0:	4b16      	ldr	r3, [pc, #88]	; (8005e0c <MX_TIM11_Init+0x94>)
 8005db2:	2200      	movs	r2, #0
 8005db4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8005db6:	4815      	ldr	r0, [pc, #84]	; (8005e0c <MX_TIM11_Init+0x94>)
 8005db8:	f007 fc1e 	bl	800d5f8 <HAL_TIM_Base_Init>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d001      	beq.n	8005dc6 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8005dc2:	f000 f9e7 	bl	8006194 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8005dc6:	4811      	ldr	r0, [pc, #68]	; (8005e0c <MX_TIM11_Init+0x94>)
 8005dc8:	f007 fc65 	bl	800d696 <HAL_TIM_PWM_Init>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d001      	beq.n	8005dd6 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8005dd2:	f000 f9df 	bl	8006194 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005dd6:	2360      	movs	r3, #96	; 0x60
 8005dd8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005dde:	2300      	movs	r3, #0
 8005de0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005de2:	2300      	movs	r3, #0
 8005de4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8005de6:	1d3b      	adds	r3, r7, #4
 8005de8:	2200      	movs	r2, #0
 8005dea:	4619      	mov	r1, r3
 8005dec:	4807      	ldr	r0, [pc, #28]	; (8005e0c <MX_TIM11_Init+0x94>)
 8005dee:	f007 fe8d 	bl	800db0c <HAL_TIM_PWM_ConfigChannel>
 8005df2:	4603      	mov	r3, r0
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d001      	beq.n	8005dfc <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8005df8:	f000 f9cc 	bl	8006194 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8005dfc:	4803      	ldr	r0, [pc, #12]	; (8005e0c <MX_TIM11_Init+0x94>)
 8005dfe:	f000 fdb9 	bl	8006974 <HAL_TIM_MspPostInit>

}
 8005e02:	bf00      	nop
 8005e04:	3720      	adds	r7, #32
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}
 8005e0a:	bf00      	nop
 8005e0c:	2003eaa0 	.word	0x2003eaa0
 8005e10:	40014800 	.word	0x40014800

08005e14 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8005e18:	4b0e      	ldr	r3, [pc, #56]	; (8005e54 <MX_TIM13_Init+0x40>)
 8005e1a:	4a0f      	ldr	r2, [pc, #60]	; (8005e58 <MX_TIM13_Init+0x44>)
 8005e1c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 89;
 8005e1e:	4b0d      	ldr	r3, [pc, #52]	; (8005e54 <MX_TIM13_Init+0x40>)
 8005e20:	2259      	movs	r2, #89	; 0x59
 8005e22:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005e24:	4b0b      	ldr	r3, [pc, #44]	; (8005e54 <MX_TIM13_Init+0x40>)
 8005e26:	2200      	movs	r2, #0
 8005e28:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 8005e2a:	4b0a      	ldr	r3, [pc, #40]	; (8005e54 <MX_TIM13_Init+0x40>)
 8005e2c:	f242 720f 	movw	r2, #9999	; 0x270f
 8005e30:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005e32:	4b08      	ldr	r3, [pc, #32]	; (8005e54 <MX_TIM13_Init+0x40>)
 8005e34:	2200      	movs	r2, #0
 8005e36:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005e38:	4b06      	ldr	r3, [pc, #24]	; (8005e54 <MX_TIM13_Init+0x40>)
 8005e3a:	2280      	movs	r2, #128	; 0x80
 8005e3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8005e3e:	4805      	ldr	r0, [pc, #20]	; (8005e54 <MX_TIM13_Init+0x40>)
 8005e40:	f007 fbda 	bl	800d5f8 <HAL_TIM_Base_Init>
 8005e44:	4603      	mov	r3, r0
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d001      	beq.n	8005e4e <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8005e4a:	f000 f9a3 	bl	8006194 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8005e4e:	bf00      	nop
 8005e50:	bd80      	pop	{r7, pc}
 8005e52:	bf00      	nop
 8005e54:	2003ea60 	.word	0x2003ea60
 8005e58:	40001c00 	.word	0x40001c00

08005e5c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005e60:	4b11      	ldr	r3, [pc, #68]	; (8005ea8 <MX_USART2_UART_Init+0x4c>)
 8005e62:	4a12      	ldr	r2, [pc, #72]	; (8005eac <MX_USART2_UART_Init+0x50>)
 8005e64:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005e66:	4b10      	ldr	r3, [pc, #64]	; (8005ea8 <MX_USART2_UART_Init+0x4c>)
 8005e68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005e6c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005e6e:	4b0e      	ldr	r3, [pc, #56]	; (8005ea8 <MX_USART2_UART_Init+0x4c>)
 8005e70:	2200      	movs	r2, #0
 8005e72:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005e74:	4b0c      	ldr	r3, [pc, #48]	; (8005ea8 <MX_USART2_UART_Init+0x4c>)
 8005e76:	2200      	movs	r2, #0
 8005e78:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005e7a:	4b0b      	ldr	r3, [pc, #44]	; (8005ea8 <MX_USART2_UART_Init+0x4c>)
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005e80:	4b09      	ldr	r3, [pc, #36]	; (8005ea8 <MX_USART2_UART_Init+0x4c>)
 8005e82:	220c      	movs	r2, #12
 8005e84:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005e86:	4b08      	ldr	r3, [pc, #32]	; (8005ea8 <MX_USART2_UART_Init+0x4c>)
 8005e88:	2200      	movs	r2, #0
 8005e8a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005e8c:	4b06      	ldr	r3, [pc, #24]	; (8005ea8 <MX_USART2_UART_Init+0x4c>)
 8005e8e:	2200      	movs	r2, #0
 8005e90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005e92:	4805      	ldr	r0, [pc, #20]	; (8005ea8 <MX_USART2_UART_Init+0x4c>)
 8005e94:	f008 fa80 	bl	800e398 <HAL_UART_Init>
 8005e98:	4603      	mov	r3, r0
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d001      	beq.n	8005ea2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8005e9e:	f000 f979 	bl	8006194 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005ea2:	bf00      	nop
 8005ea4:	bd80      	pop	{r7, pc}
 8005ea6:	bf00      	nop
 8005ea8:	2003ec44 	.word	0x2003ec44
 8005eac:	40004400 	.word	0x40004400

08005eb0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b082      	sub	sp, #8
 8005eb4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	607b      	str	r3, [r7, #4]
 8005eba:	4b14      	ldr	r3, [pc, #80]	; (8005f0c <MX_DMA_Init+0x5c>)
 8005ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ebe:	4a13      	ldr	r2, [pc, #76]	; (8005f0c <MX_DMA_Init+0x5c>)
 8005ec0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8005ec6:	4b11      	ldr	r3, [pc, #68]	; (8005f0c <MX_DMA_Init+0x5c>)
 8005ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ece:	607b      	str	r3, [r7, #4]
 8005ed0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	2100      	movs	r1, #0
 8005ed6:	203a      	movs	r0, #58	; 0x3a
 8005ed8:	f002 ff59 	bl	8008d8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8005edc:	203a      	movs	r0, #58	; 0x3a
 8005ede:	f002 ff72 	bl	8008dc6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	2100      	movs	r1, #0
 8005ee6:	203b      	movs	r0, #59	; 0x3b
 8005ee8:	f002 ff51 	bl	8008d8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8005eec:	203b      	movs	r0, #59	; 0x3b
 8005eee:	f002 ff6a 	bl	8008dc6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	2100      	movs	r1, #0
 8005ef6:	2045      	movs	r0, #69	; 0x45
 8005ef8:	f002 ff49 	bl	8008d8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8005efc:	2045      	movs	r0, #69	; 0x45
 8005efe:	f002 ff62 	bl	8008dc6 <HAL_NVIC_EnableIRQ>

}
 8005f02:	bf00      	nop
 8005f04:	3708      	adds	r7, #8
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}
 8005f0a:	bf00      	nop
 8005f0c:	40023800 	.word	0x40023800

08005f10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b08c      	sub	sp, #48	; 0x30
 8005f14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f16:	f107 031c 	add.w	r3, r7, #28
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	601a      	str	r2, [r3, #0]
 8005f1e:	605a      	str	r2, [r3, #4]
 8005f20:	609a      	str	r2, [r3, #8]
 8005f22:	60da      	str	r2, [r3, #12]
 8005f24:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005f26:	2300      	movs	r3, #0
 8005f28:	61bb      	str	r3, [r7, #24]
 8005f2a:	4b94      	ldr	r3, [pc, #592]	; (800617c <MX_GPIO_Init+0x26c>)
 8005f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f2e:	4a93      	ldr	r2, [pc, #588]	; (800617c <MX_GPIO_Init+0x26c>)
 8005f30:	f043 0310 	orr.w	r3, r3, #16
 8005f34:	6313      	str	r3, [r2, #48]	; 0x30
 8005f36:	4b91      	ldr	r3, [pc, #580]	; (800617c <MX_GPIO_Init+0x26c>)
 8005f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f3a:	f003 0310 	and.w	r3, r3, #16
 8005f3e:	61bb      	str	r3, [r7, #24]
 8005f40:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005f42:	2300      	movs	r3, #0
 8005f44:	617b      	str	r3, [r7, #20]
 8005f46:	4b8d      	ldr	r3, [pc, #564]	; (800617c <MX_GPIO_Init+0x26c>)
 8005f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f4a:	4a8c      	ldr	r2, [pc, #560]	; (800617c <MX_GPIO_Init+0x26c>)
 8005f4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f50:	6313      	str	r3, [r2, #48]	; 0x30
 8005f52:	4b8a      	ldr	r3, [pc, #552]	; (800617c <MX_GPIO_Init+0x26c>)
 8005f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f5a:	617b      	str	r3, [r7, #20]
 8005f5c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005f5e:	2300      	movs	r3, #0
 8005f60:	613b      	str	r3, [r7, #16]
 8005f62:	4b86      	ldr	r3, [pc, #536]	; (800617c <MX_GPIO_Init+0x26c>)
 8005f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f66:	4a85      	ldr	r2, [pc, #532]	; (800617c <MX_GPIO_Init+0x26c>)
 8005f68:	f043 0304 	orr.w	r3, r3, #4
 8005f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8005f6e:	4b83      	ldr	r3, [pc, #524]	; (800617c <MX_GPIO_Init+0x26c>)
 8005f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f72:	f003 0304 	and.w	r3, r3, #4
 8005f76:	613b      	str	r3, [r7, #16]
 8005f78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	60fb      	str	r3, [r7, #12]
 8005f7e:	4b7f      	ldr	r3, [pc, #508]	; (800617c <MX_GPIO_Init+0x26c>)
 8005f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f82:	4a7e      	ldr	r2, [pc, #504]	; (800617c <MX_GPIO_Init+0x26c>)
 8005f84:	f043 0301 	orr.w	r3, r3, #1
 8005f88:	6313      	str	r3, [r2, #48]	; 0x30
 8005f8a:	4b7c      	ldr	r3, [pc, #496]	; (800617c <MX_GPIO_Init+0x26c>)
 8005f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f8e:	f003 0301 	and.w	r3, r3, #1
 8005f92:	60fb      	str	r3, [r7, #12]
 8005f94:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f96:	2300      	movs	r3, #0
 8005f98:	60bb      	str	r3, [r7, #8]
 8005f9a:	4b78      	ldr	r3, [pc, #480]	; (800617c <MX_GPIO_Init+0x26c>)
 8005f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f9e:	4a77      	ldr	r2, [pc, #476]	; (800617c <MX_GPIO_Init+0x26c>)
 8005fa0:	f043 0302 	orr.w	r3, r3, #2
 8005fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8005fa6:	4b75      	ldr	r3, [pc, #468]	; (800617c <MX_GPIO_Init+0x26c>)
 8005fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005faa:	f003 0302 	and.w	r3, r3, #2
 8005fae:	60bb      	str	r3, [r7, #8]
 8005fb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	607b      	str	r3, [r7, #4]
 8005fb6:	4b71      	ldr	r3, [pc, #452]	; (800617c <MX_GPIO_Init+0x26c>)
 8005fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fba:	4a70      	ldr	r2, [pc, #448]	; (800617c <MX_GPIO_Init+0x26c>)
 8005fbc:	f043 0308 	orr.w	r3, r3, #8
 8005fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8005fc2:	4b6e      	ldr	r3, [pc, #440]	; (800617c <MX_GPIO_Init+0x26c>)
 8005fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fc6:	f003 0308 	and.w	r3, r3, #8
 8005fca:	607b      	str	r3, [r7, #4]
 8005fcc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 8005fce:	2200      	movs	r2, #0
 8005fd0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005fd4:	486a      	ldr	r0, [pc, #424]	; (8006180 <MX_GPIO_Init+0x270>)
 8005fd6:	f003 fc6f 	bl	80098b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8005fda:	2200      	movs	r2, #0
 8005fdc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005fe0:	4868      	ldr	r0, [pc, #416]	; (8006184 <MX_GPIO_Init+0x274>)
 8005fe2:	f003 fc69 	bl	80098b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005fec:	4866      	ldr	r0, [pc, #408]	; (8006188 <MX_GPIO_Init+0x278>)
 8005fee:	f003 fc63 	bl	80098b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8005ff8:	4864      	ldr	r0, [pc, #400]	; (800618c <MX_GPIO_Init+0x27c>)
 8005ffa:	f003 fc5d 	bl	80098b8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005ffe:	2304      	movs	r3, #4
 8006000:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006002:	2300      	movs	r3, #0
 8006004:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006006:	2300      	movs	r3, #0
 8006008:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800600a:	f107 031c 	add.w	r3, r7, #28
 800600e:	4619      	mov	r1, r3
 8006010:	485b      	ldr	r0, [pc, #364]	; (8006180 <MX_GPIO_Init+0x270>)
 8006012:	f003 fa8f 	bl	8009534 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8006016:	230f      	movs	r3, #15
 8006018:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800601a:	2303      	movs	r3, #3
 800601c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800601e:	2300      	movs	r3, #0
 8006020:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006022:	f107 031c 	add.w	r3, r7, #28
 8006026:	4619      	mov	r1, r3
 8006028:	4859      	ldr	r0, [pc, #356]	; (8006190 <MX_GPIO_Init+0x280>)
 800602a:	f003 fa83 	bl	8009534 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800602e:	23e1      	movs	r3, #225	; 0xe1
 8006030:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006032:	2303      	movs	r3, #3
 8006034:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006036:	2300      	movs	r3, #0
 8006038:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800603a:	f107 031c 	add.w	r3, r7, #28
 800603e:	4619      	mov	r1, r3
 8006040:	4852      	ldr	r0, [pc, #328]	; (800618c <MX_GPIO_Init+0x27c>)
 8006042:	f003 fa77 	bl	8009534 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006046:	2303      	movs	r3, #3
 8006048:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800604a:	2303      	movs	r3, #3
 800604c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800604e:	2300      	movs	r3, #0
 8006050:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006052:	f107 031c 	add.w	r3, r7, #28
 8006056:	4619      	mov	r1, r3
 8006058:	484a      	ldr	r0, [pc, #296]	; (8006184 <MX_GPIO_Init+0x274>)
 800605a:	f003 fa6b 	bl	8009534 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800605e:	2304      	movs	r3, #4
 8006060:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006062:	2300      	movs	r3, #0
 8006064:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006066:	2301      	movs	r3, #1
 8006068:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800606a:	f107 031c 	add.w	r3, r7, #28
 800606e:	4619      	mov	r1, r3
 8006070:	4844      	ldr	r0, [pc, #272]	; (8006184 <MX_GPIO_Init+0x274>)
 8006072:	f003 fa5f 	bl	8009534 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 8006076:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 800607a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800607c:	2300      	movs	r3, #0
 800607e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006080:	2301      	movs	r3, #1
 8006082:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006084:	f107 031c 	add.w	r3, r7, #28
 8006088:	4619      	mov	r1, r3
 800608a:	483d      	ldr	r0, [pc, #244]	; (8006180 <MX_GPIO_Init+0x270>)
 800608c:	f003 fa52 	bl	8009534 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8006090:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006094:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006096:	2301      	movs	r3, #1
 8006098:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800609a:	2300      	movs	r3, #0
 800609c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800609e:	2300      	movs	r3, #0
 80060a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80060a2:	f107 031c 	add.w	r3, r7, #28
 80060a6:	4619      	mov	r1, r3
 80060a8:	4835      	ldr	r0, [pc, #212]	; (8006180 <MX_GPIO_Init+0x270>)
 80060aa:	f003 fa43 	bl	8009534 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80060ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80060b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80060b4:	2301      	movs	r3, #1
 80060b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060b8:	2300      	movs	r3, #0
 80060ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80060bc:	2300      	movs	r3, #0
 80060be:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80060c0:	f107 031c 	add.w	r3, r7, #28
 80060c4:	4619      	mov	r1, r3
 80060c6:	482f      	ldr	r0, [pc, #188]	; (8006184 <MX_GPIO_Init+0x274>)
 80060c8:	f003 fa34 	bl	8009534 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80060cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80060d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80060d2:	2300      	movs	r3, #0
 80060d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060d6:	2300      	movs	r3, #0
 80060d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80060da:	f107 031c 	add.w	r3, r7, #28
 80060de:	4619      	mov	r1, r3
 80060e0:	4829      	ldr	r0, [pc, #164]	; (8006188 <MX_GPIO_Init+0x278>)
 80060e2:	f003 fa27 	bl	8009534 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80060e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80060ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80060ec:	2301      	movs	r3, #1
 80060ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060f0:	2300      	movs	r3, #0
 80060f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80060f4:	2300      	movs	r3, #0
 80060f6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80060f8:	f107 031c 	add.w	r3, r7, #28
 80060fc:	4619      	mov	r1, r3
 80060fe:	4822      	ldr	r0, [pc, #136]	; (8006188 <MX_GPIO_Init+0x278>)
 8006100:	f003 fa18 	bl	8009534 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006104:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006108:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800610a:	2301      	movs	r3, #1
 800610c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800610e:	2301      	movs	r3, #1
 8006110:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006112:	2300      	movs	r3, #0
 8006114:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006116:	f107 031c 	add.w	r3, r7, #28
 800611a:	4619      	mov	r1, r3
 800611c:	481a      	ldr	r0, [pc, #104]	; (8006188 <MX_GPIO_Init+0x278>)
 800611e:	f003 fa09 	bl	8009534 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8006122:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8006126:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006128:	2301      	movs	r3, #1
 800612a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800612c:	2300      	movs	r3, #0
 800612e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006130:	2300      	movs	r3, #0
 8006132:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006134:	f107 031c 	add.w	r3, r7, #28
 8006138:	4619      	mov	r1, r3
 800613a:	4814      	ldr	r0, [pc, #80]	; (800618c <MX_GPIO_Init+0x27c>)
 800613c:	f003 f9fa 	bl	8009534 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8006140:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006144:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006146:	2300      	movs	r3, #0
 8006148:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800614a:	2300      	movs	r3, #0
 800614c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800614e:	f107 031c 	add.w	r3, r7, #28
 8006152:	4619      	mov	r1, r3
 8006154:	480d      	ldr	r0, [pc, #52]	; (800618c <MX_GPIO_Init+0x27c>)
 8006156:	f003 f9ed 	bl	8009534 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 800615a:	239b      	movs	r3, #155	; 0x9b
 800615c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800615e:	2300      	movs	r3, #0
 8006160:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006162:	2301      	movs	r3, #1
 8006164:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006166:	f107 031c 	add.w	r3, r7, #28
 800616a:	4619      	mov	r1, r3
 800616c:	4806      	ldr	r0, [pc, #24]	; (8006188 <MX_GPIO_Init+0x278>)
 800616e:	f003 f9e1 	bl	8009534 <HAL_GPIO_Init>

}
 8006172:	bf00      	nop
 8006174:	3730      	adds	r7, #48	; 0x30
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}
 800617a:	bf00      	nop
 800617c:	40023800 	.word	0x40023800
 8006180:	40021000 	.word	0x40021000
 8006184:	40020400 	.word	0x40020400
 8006188:	40020c00 	.word	0x40020c00
 800618c:	40020000 	.word	0x40020000
 8006190:	40020800 	.word	0x40020800

08006194 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006194:	b480      	push	{r7}
 8006196:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006198:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800619a:	e7fe      	b.n	800619a <Error_Handler+0x6>

0800619c <path_following_initialize>:
  /* End of Outputs for SubSystem: '<Root>/path_following' */
}

/* Model initialize function */
void path_following_initialize(void)
{
 800619c:	b480      	push	{r7}
 800619e:	af00      	add	r7, sp, #0
  /* (no initialization code required) */
}
 80061a0:	bf00      	nop
 80061a2:	46bd      	mov	sp, r7
 80061a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a8:	4770      	bx	lr
	...

080061ac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b083      	sub	sp, #12
 80061b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80061b2:	2300      	movs	r3, #0
 80061b4:	607b      	str	r3, [r7, #4]
 80061b6:	4b10      	ldr	r3, [pc, #64]	; (80061f8 <HAL_MspInit+0x4c>)
 80061b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061ba:	4a0f      	ldr	r2, [pc, #60]	; (80061f8 <HAL_MspInit+0x4c>)
 80061bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80061c0:	6453      	str	r3, [r2, #68]	; 0x44
 80061c2:	4b0d      	ldr	r3, [pc, #52]	; (80061f8 <HAL_MspInit+0x4c>)
 80061c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061ca:	607b      	str	r3, [r7, #4]
 80061cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80061ce:	2300      	movs	r3, #0
 80061d0:	603b      	str	r3, [r7, #0]
 80061d2:	4b09      	ldr	r3, [pc, #36]	; (80061f8 <HAL_MspInit+0x4c>)
 80061d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d6:	4a08      	ldr	r2, [pc, #32]	; (80061f8 <HAL_MspInit+0x4c>)
 80061d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061dc:	6413      	str	r3, [r2, #64]	; 0x40
 80061de:	4b06      	ldr	r3, [pc, #24]	; (80061f8 <HAL_MspInit+0x4c>)
 80061e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061e6:	603b      	str	r3, [r7, #0]
 80061e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80061ea:	bf00      	nop
 80061ec:	370c      	adds	r7, #12
 80061ee:	46bd      	mov	sp, r7
 80061f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f4:	4770      	bx	lr
 80061f6:	bf00      	nop
 80061f8:	40023800 	.word	0x40023800

080061fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b08c      	sub	sp, #48	; 0x30
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006204:	f107 031c 	add.w	r3, r7, #28
 8006208:	2200      	movs	r2, #0
 800620a:	601a      	str	r2, [r3, #0]
 800620c:	605a      	str	r2, [r3, #4]
 800620e:	609a      	str	r2, [r3, #8]
 8006210:	60da      	str	r2, [r3, #12]
 8006212:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a4a      	ldr	r2, [pc, #296]	; (8006344 <HAL_ADC_MspInit+0x148>)
 800621a:	4293      	cmp	r3, r2
 800621c:	f040 808e 	bne.w	800633c <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8006220:	2300      	movs	r3, #0
 8006222:	61bb      	str	r3, [r7, #24]
 8006224:	4b48      	ldr	r3, [pc, #288]	; (8006348 <HAL_ADC_MspInit+0x14c>)
 8006226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006228:	4a47      	ldr	r2, [pc, #284]	; (8006348 <HAL_ADC_MspInit+0x14c>)
 800622a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800622e:	6453      	str	r3, [r2, #68]	; 0x44
 8006230:	4b45      	ldr	r3, [pc, #276]	; (8006348 <HAL_ADC_MspInit+0x14c>)
 8006232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006234:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006238:	61bb      	str	r3, [r7, #24]
 800623a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800623c:	2300      	movs	r3, #0
 800623e:	617b      	str	r3, [r7, #20]
 8006240:	4b41      	ldr	r3, [pc, #260]	; (8006348 <HAL_ADC_MspInit+0x14c>)
 8006242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006244:	4a40      	ldr	r2, [pc, #256]	; (8006348 <HAL_ADC_MspInit+0x14c>)
 8006246:	f043 0304 	orr.w	r3, r3, #4
 800624a:	6313      	str	r3, [r2, #48]	; 0x30
 800624c:	4b3e      	ldr	r3, [pc, #248]	; (8006348 <HAL_ADC_MspInit+0x14c>)
 800624e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006250:	f003 0304 	and.w	r3, r3, #4
 8006254:	617b      	str	r3, [r7, #20]
 8006256:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006258:	2300      	movs	r3, #0
 800625a:	613b      	str	r3, [r7, #16]
 800625c:	4b3a      	ldr	r3, [pc, #232]	; (8006348 <HAL_ADC_MspInit+0x14c>)
 800625e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006260:	4a39      	ldr	r2, [pc, #228]	; (8006348 <HAL_ADC_MspInit+0x14c>)
 8006262:	f043 0301 	orr.w	r3, r3, #1
 8006266:	6313      	str	r3, [r2, #48]	; 0x30
 8006268:	4b37      	ldr	r3, [pc, #220]	; (8006348 <HAL_ADC_MspInit+0x14c>)
 800626a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800626c:	f003 0301 	and.w	r3, r3, #1
 8006270:	613b      	str	r3, [r7, #16]
 8006272:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006274:	2300      	movs	r3, #0
 8006276:	60fb      	str	r3, [r7, #12]
 8006278:	4b33      	ldr	r3, [pc, #204]	; (8006348 <HAL_ADC_MspInit+0x14c>)
 800627a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800627c:	4a32      	ldr	r2, [pc, #200]	; (8006348 <HAL_ADC_MspInit+0x14c>)
 800627e:	f043 0302 	orr.w	r3, r3, #2
 8006282:	6313      	str	r3, [r2, #48]	; 0x30
 8006284:	4b30      	ldr	r3, [pc, #192]	; (8006348 <HAL_ADC_MspInit+0x14c>)
 8006286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006288:	f003 0302 	and.w	r3, r3, #2
 800628c:	60fb      	str	r3, [r7, #12]
 800628e:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC2_IN6
    PA7     ------> ADC2_IN7
    PB0     ------> ADC2_IN8
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8006290:	230f      	movs	r3, #15
 8006292:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006294:	2303      	movs	r3, #3
 8006296:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006298:	2300      	movs	r3, #0
 800629a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800629c:	f107 031c 	add.w	r3, r7, #28
 80062a0:	4619      	mov	r1, r3
 80062a2:	482a      	ldr	r0, [pc, #168]	; (800634c <HAL_ADC_MspInit+0x150>)
 80062a4:	f003 f946 	bl	8009534 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80062a8:	23ff      	movs	r3, #255	; 0xff
 80062aa:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80062ac:	2303      	movs	r3, #3
 80062ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062b0:	2300      	movs	r3, #0
 80062b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80062b4:	f107 031c 	add.w	r3, r7, #28
 80062b8:	4619      	mov	r1, r3
 80062ba:	4825      	ldr	r0, [pc, #148]	; (8006350 <HAL_ADC_MspInit+0x154>)
 80062bc:	f003 f93a 	bl	8009534 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80062c0:	2303      	movs	r3, #3
 80062c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80062c4:	2303      	movs	r3, #3
 80062c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062c8:	2300      	movs	r3, #0
 80062ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80062cc:	f107 031c 	add.w	r3, r7, #28
 80062d0:	4619      	mov	r1, r3
 80062d2:	4820      	ldr	r0, [pc, #128]	; (8006354 <HAL_ADC_MspInit+0x158>)
 80062d4:	f003 f92e 	bl	8009534 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 80062d8:	4b1f      	ldr	r3, [pc, #124]	; (8006358 <HAL_ADC_MspInit+0x15c>)
 80062da:	4a20      	ldr	r2, [pc, #128]	; (800635c <HAL_ADC_MspInit+0x160>)
 80062dc:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 80062de:	4b1e      	ldr	r3, [pc, #120]	; (8006358 <HAL_ADC_MspInit+0x15c>)
 80062e0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80062e4:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80062e6:	4b1c      	ldr	r3, [pc, #112]	; (8006358 <HAL_ADC_MspInit+0x15c>)
 80062e8:	2200      	movs	r2, #0
 80062ea:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80062ec:	4b1a      	ldr	r3, [pc, #104]	; (8006358 <HAL_ADC_MspInit+0x15c>)
 80062ee:	2200      	movs	r2, #0
 80062f0:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80062f2:	4b19      	ldr	r3, [pc, #100]	; (8006358 <HAL_ADC_MspInit+0x15c>)
 80062f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80062f8:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80062fa:	4b17      	ldr	r3, [pc, #92]	; (8006358 <HAL_ADC_MspInit+0x15c>)
 80062fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006300:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006302:	4b15      	ldr	r3, [pc, #84]	; (8006358 <HAL_ADC_MspInit+0x15c>)
 8006304:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006308:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800630a:	4b13      	ldr	r3, [pc, #76]	; (8006358 <HAL_ADC_MspInit+0x15c>)
 800630c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006310:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006312:	4b11      	ldr	r3, [pc, #68]	; (8006358 <HAL_ADC_MspInit+0x15c>)
 8006314:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006318:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800631a:	4b0f      	ldr	r3, [pc, #60]	; (8006358 <HAL_ADC_MspInit+0x15c>)
 800631c:	2200      	movs	r2, #0
 800631e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8006320:	480d      	ldr	r0, [pc, #52]	; (8006358 <HAL_ADC_MspInit+0x15c>)
 8006322:	f002 fd6b 	bl	8008dfc <HAL_DMA_Init>
 8006326:	4603      	mov	r3, r0
 8006328:	2b00      	cmp	r3, #0
 800632a:	d001      	beq.n	8006330 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 800632c:	f7ff ff32 	bl	8006194 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	4a09      	ldr	r2, [pc, #36]	; (8006358 <HAL_ADC_MspInit+0x15c>)
 8006334:	639a      	str	r2, [r3, #56]	; 0x38
 8006336:	4a08      	ldr	r2, [pc, #32]	; (8006358 <HAL_ADC_MspInit+0x15c>)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800633c:	bf00      	nop
 800633e:	3730      	adds	r7, #48	; 0x30
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}
 8006344:	40012100 	.word	0x40012100
 8006348:	40023800 	.word	0x40023800
 800634c:	40020800 	.word	0x40020800
 8006350:	40020000 	.word	0x40020000
 8006354:	40020400 	.word	0x40020400
 8006358:	2003ec84 	.word	0x2003ec84
 800635c:	40026440 	.word	0x40026440

08006360 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b08c      	sub	sp, #48	; 0x30
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006368:	f107 031c 	add.w	r3, r7, #28
 800636c:	2200      	movs	r2, #0
 800636e:	601a      	str	r2, [r3, #0]
 8006370:	605a      	str	r2, [r3, #4]
 8006372:	609a      	str	r2, [r3, #8]
 8006374:	60da      	str	r2, [r3, #12]
 8006376:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a32      	ldr	r2, [pc, #200]	; (8006448 <HAL_I2C_MspInit+0xe8>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d12c      	bne.n	80063dc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006382:	2300      	movs	r3, #0
 8006384:	61bb      	str	r3, [r7, #24]
 8006386:	4b31      	ldr	r3, [pc, #196]	; (800644c <HAL_I2C_MspInit+0xec>)
 8006388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800638a:	4a30      	ldr	r2, [pc, #192]	; (800644c <HAL_I2C_MspInit+0xec>)
 800638c:	f043 0302 	orr.w	r3, r3, #2
 8006390:	6313      	str	r3, [r2, #48]	; 0x30
 8006392:	4b2e      	ldr	r3, [pc, #184]	; (800644c <HAL_I2C_MspInit+0xec>)
 8006394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006396:	f003 0302 	and.w	r3, r3, #2
 800639a:	61bb      	str	r3, [r7, #24]
 800639c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800639e:	23c0      	movs	r3, #192	; 0xc0
 80063a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80063a2:	2312      	movs	r3, #18
 80063a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80063a6:	2301      	movs	r3, #1
 80063a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80063aa:	2303      	movs	r3, #3
 80063ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80063ae:	2304      	movs	r3, #4
 80063b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80063b2:	f107 031c 	add.w	r3, r7, #28
 80063b6:	4619      	mov	r1, r3
 80063b8:	4825      	ldr	r0, [pc, #148]	; (8006450 <HAL_I2C_MspInit+0xf0>)
 80063ba:	f003 f8bb 	bl	8009534 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80063be:	2300      	movs	r3, #0
 80063c0:	617b      	str	r3, [r7, #20]
 80063c2:	4b22      	ldr	r3, [pc, #136]	; (800644c <HAL_I2C_MspInit+0xec>)
 80063c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063c6:	4a21      	ldr	r2, [pc, #132]	; (800644c <HAL_I2C_MspInit+0xec>)
 80063c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80063cc:	6413      	str	r3, [r2, #64]	; 0x40
 80063ce:	4b1f      	ldr	r3, [pc, #124]	; (800644c <HAL_I2C_MspInit+0xec>)
 80063d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80063d6:	617b      	str	r3, [r7, #20]
 80063d8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80063da:	e031      	b.n	8006440 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a1c      	ldr	r2, [pc, #112]	; (8006454 <HAL_I2C_MspInit+0xf4>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d12c      	bne.n	8006440 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80063e6:	2300      	movs	r3, #0
 80063e8:	613b      	str	r3, [r7, #16]
 80063ea:	4b18      	ldr	r3, [pc, #96]	; (800644c <HAL_I2C_MspInit+0xec>)
 80063ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ee:	4a17      	ldr	r2, [pc, #92]	; (800644c <HAL_I2C_MspInit+0xec>)
 80063f0:	f043 0302 	orr.w	r3, r3, #2
 80063f4:	6313      	str	r3, [r2, #48]	; 0x30
 80063f6:	4b15      	ldr	r3, [pc, #84]	; (800644c <HAL_I2C_MspInit+0xec>)
 80063f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063fa:	f003 0302 	and.w	r3, r3, #2
 80063fe:	613b      	str	r3, [r7, #16]
 8006400:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8006402:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006406:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006408:	2312      	movs	r3, #18
 800640a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800640c:	2301      	movs	r3, #1
 800640e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006410:	2303      	movs	r3, #3
 8006412:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8006414:	2304      	movs	r3, #4
 8006416:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006418:	f107 031c 	add.w	r3, r7, #28
 800641c:	4619      	mov	r1, r3
 800641e:	480c      	ldr	r0, [pc, #48]	; (8006450 <HAL_I2C_MspInit+0xf0>)
 8006420:	f003 f888 	bl	8009534 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8006424:	2300      	movs	r3, #0
 8006426:	60fb      	str	r3, [r7, #12]
 8006428:	4b08      	ldr	r3, [pc, #32]	; (800644c <HAL_I2C_MspInit+0xec>)
 800642a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800642c:	4a07      	ldr	r2, [pc, #28]	; (800644c <HAL_I2C_MspInit+0xec>)
 800642e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006432:	6413      	str	r3, [r2, #64]	; 0x40
 8006434:	4b05      	ldr	r3, [pc, #20]	; (800644c <HAL_I2C_MspInit+0xec>)
 8006436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006438:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800643c:	60fb      	str	r3, [r7, #12]
 800643e:	68fb      	ldr	r3, [r7, #12]
}
 8006440:	bf00      	nop
 8006442:	3730      	adds	r7, #48	; 0x30
 8006444:	46bd      	mov	sp, r7
 8006446:	bd80      	pop	{r7, pc}
 8006448:	40005400 	.word	0x40005400
 800644c:	40023800 	.word	0x40023800
 8006450:	40020400 	.word	0x40020400
 8006454:	40005800 	.word	0x40005800

08006458 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b08a      	sub	sp, #40	; 0x28
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006460:	f107 0314 	add.w	r3, r7, #20
 8006464:	2200      	movs	r2, #0
 8006466:	601a      	str	r2, [r3, #0]
 8006468:	605a      	str	r2, [r3, #4]
 800646a:	609a      	str	r2, [r3, #8]
 800646c:	60da      	str	r2, [r3, #12]
 800646e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a69      	ldr	r2, [pc, #420]	; (800661c <HAL_SD_MspInit+0x1c4>)
 8006476:	4293      	cmp	r3, r2
 8006478:	f040 80cb 	bne.w	8006612 <HAL_SD_MspInit+0x1ba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800647c:	2300      	movs	r3, #0
 800647e:	613b      	str	r3, [r7, #16]
 8006480:	4b67      	ldr	r3, [pc, #412]	; (8006620 <HAL_SD_MspInit+0x1c8>)
 8006482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006484:	4a66      	ldr	r2, [pc, #408]	; (8006620 <HAL_SD_MspInit+0x1c8>)
 8006486:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800648a:	6453      	str	r3, [r2, #68]	; 0x44
 800648c:	4b64      	ldr	r3, [pc, #400]	; (8006620 <HAL_SD_MspInit+0x1c8>)
 800648e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006490:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006494:	613b      	str	r3, [r7, #16]
 8006496:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006498:	2300      	movs	r3, #0
 800649a:	60fb      	str	r3, [r7, #12]
 800649c:	4b60      	ldr	r3, [pc, #384]	; (8006620 <HAL_SD_MspInit+0x1c8>)
 800649e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064a0:	4a5f      	ldr	r2, [pc, #380]	; (8006620 <HAL_SD_MspInit+0x1c8>)
 80064a2:	f043 0304 	orr.w	r3, r3, #4
 80064a6:	6313      	str	r3, [r2, #48]	; 0x30
 80064a8:	4b5d      	ldr	r3, [pc, #372]	; (8006620 <HAL_SD_MspInit+0x1c8>)
 80064aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ac:	f003 0304 	and.w	r3, r3, #4
 80064b0:	60fb      	str	r3, [r7, #12]
 80064b2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80064b4:	2300      	movs	r3, #0
 80064b6:	60bb      	str	r3, [r7, #8]
 80064b8:	4b59      	ldr	r3, [pc, #356]	; (8006620 <HAL_SD_MspInit+0x1c8>)
 80064ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064bc:	4a58      	ldr	r2, [pc, #352]	; (8006620 <HAL_SD_MspInit+0x1c8>)
 80064be:	f043 0308 	orr.w	r3, r3, #8
 80064c2:	6313      	str	r3, [r2, #48]	; 0x30
 80064c4:	4b56      	ldr	r3, [pc, #344]	; (8006620 <HAL_SD_MspInit+0x1c8>)
 80064c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064c8:	f003 0308 	and.w	r3, r3, #8
 80064cc:	60bb      	str	r3, [r7, #8]
 80064ce:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80064d0:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80064d4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064d6:	2302      	movs	r3, #2
 80064d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064da:	2300      	movs	r3, #0
 80064dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80064de:	2303      	movs	r3, #3
 80064e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80064e2:	230c      	movs	r3, #12
 80064e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80064e6:	f107 0314 	add.w	r3, r7, #20
 80064ea:	4619      	mov	r1, r3
 80064ec:	484d      	ldr	r0, [pc, #308]	; (8006624 <HAL_SD_MspInit+0x1cc>)
 80064ee:	f003 f821 	bl	8009534 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80064f2:	2304      	movs	r3, #4
 80064f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064f6:	2302      	movs	r3, #2
 80064f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80064fa:	2300      	movs	r3, #0
 80064fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80064fe:	2303      	movs	r3, #3
 8006500:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8006502:	230c      	movs	r3, #12
 8006504:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006506:	f107 0314 	add.w	r3, r7, #20
 800650a:	4619      	mov	r1, r3
 800650c:	4846      	ldr	r0, [pc, #280]	; (8006628 <HAL_SD_MspInit+0x1d0>)
 800650e:	f003 f811 	bl	8009534 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8006512:	4b46      	ldr	r3, [pc, #280]	; (800662c <HAL_SD_MspInit+0x1d4>)
 8006514:	4a46      	ldr	r2, [pc, #280]	; (8006630 <HAL_SD_MspInit+0x1d8>)
 8006516:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8006518:	4b44      	ldr	r3, [pc, #272]	; (800662c <HAL_SD_MspInit+0x1d4>)
 800651a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800651e:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006520:	4b42      	ldr	r3, [pc, #264]	; (800662c <HAL_SD_MspInit+0x1d4>)
 8006522:	2200      	movs	r2, #0
 8006524:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006526:	4b41      	ldr	r3, [pc, #260]	; (800662c <HAL_SD_MspInit+0x1d4>)
 8006528:	2200      	movs	r2, #0
 800652a:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 800652c:	4b3f      	ldr	r3, [pc, #252]	; (800662c <HAL_SD_MspInit+0x1d4>)
 800652e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006532:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006534:	4b3d      	ldr	r3, [pc, #244]	; (800662c <HAL_SD_MspInit+0x1d4>)
 8006536:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800653a:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800653c:	4b3b      	ldr	r3, [pc, #236]	; (800662c <HAL_SD_MspInit+0x1d4>)
 800653e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006542:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8006544:	4b39      	ldr	r3, [pc, #228]	; (800662c <HAL_SD_MspInit+0x1d4>)
 8006546:	2220      	movs	r2, #32
 8006548:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800654a:	4b38      	ldr	r3, [pc, #224]	; (800662c <HAL_SD_MspInit+0x1d4>)
 800654c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8006550:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006552:	4b36      	ldr	r3, [pc, #216]	; (800662c <HAL_SD_MspInit+0x1d4>)
 8006554:	2204      	movs	r2, #4
 8006556:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006558:	4b34      	ldr	r3, [pc, #208]	; (800662c <HAL_SD_MspInit+0x1d4>)
 800655a:	2203      	movs	r2, #3
 800655c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 800655e:	4b33      	ldr	r3, [pc, #204]	; (800662c <HAL_SD_MspInit+0x1d4>)
 8006560:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006564:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8006566:	4b31      	ldr	r3, [pc, #196]	; (800662c <HAL_SD_MspInit+0x1d4>)
 8006568:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800656c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 800656e:	482f      	ldr	r0, [pc, #188]	; (800662c <HAL_SD_MspInit+0x1d4>)
 8006570:	f002 fc44 	bl	8008dfc <HAL_DMA_Init>
 8006574:	4603      	mov	r3, r0
 8006576:	2b00      	cmp	r3, #0
 8006578:	d001      	beq.n	800657e <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 800657a:	f7ff fe0b 	bl	8006194 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	4a2a      	ldr	r2, [pc, #168]	; (800662c <HAL_SD_MspInit+0x1d4>)
 8006582:	641a      	str	r2, [r3, #64]	; 0x40
 8006584:	4a29      	ldr	r2, [pc, #164]	; (800662c <HAL_SD_MspInit+0x1d4>)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 800658a:	4b2a      	ldr	r3, [pc, #168]	; (8006634 <HAL_SD_MspInit+0x1dc>)
 800658c:	4a2a      	ldr	r2, [pc, #168]	; (8006638 <HAL_SD_MspInit+0x1e0>)
 800658e:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8006590:	4b28      	ldr	r3, [pc, #160]	; (8006634 <HAL_SD_MspInit+0x1dc>)
 8006592:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006596:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006598:	4b26      	ldr	r3, [pc, #152]	; (8006634 <HAL_SD_MspInit+0x1dc>)
 800659a:	2240      	movs	r2, #64	; 0x40
 800659c:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800659e:	4b25      	ldr	r3, [pc, #148]	; (8006634 <HAL_SD_MspInit+0x1dc>)
 80065a0:	2200      	movs	r2, #0
 80065a2:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80065a4:	4b23      	ldr	r3, [pc, #140]	; (8006634 <HAL_SD_MspInit+0x1dc>)
 80065a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80065aa:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80065ac:	4b21      	ldr	r3, [pc, #132]	; (8006634 <HAL_SD_MspInit+0x1dc>)
 80065ae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80065b2:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80065b4:	4b1f      	ldr	r3, [pc, #124]	; (8006634 <HAL_SD_MspInit+0x1dc>)
 80065b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80065ba:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 80065bc:	4b1d      	ldr	r3, [pc, #116]	; (8006634 <HAL_SD_MspInit+0x1dc>)
 80065be:	2220      	movs	r2, #32
 80065c0:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80065c2:	4b1c      	ldr	r3, [pc, #112]	; (8006634 <HAL_SD_MspInit+0x1dc>)
 80065c4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80065c8:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80065ca:	4b1a      	ldr	r3, [pc, #104]	; (8006634 <HAL_SD_MspInit+0x1dc>)
 80065cc:	2204      	movs	r2, #4
 80065ce:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80065d0:	4b18      	ldr	r3, [pc, #96]	; (8006634 <HAL_SD_MspInit+0x1dc>)
 80065d2:	2203      	movs	r2, #3
 80065d4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 80065d6:	4b17      	ldr	r3, [pc, #92]	; (8006634 <HAL_SD_MspInit+0x1dc>)
 80065d8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80065dc:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80065de:	4b15      	ldr	r3, [pc, #84]	; (8006634 <HAL_SD_MspInit+0x1dc>)
 80065e0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80065e4:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 80065e6:	4813      	ldr	r0, [pc, #76]	; (8006634 <HAL_SD_MspInit+0x1dc>)
 80065e8:	f002 fc08 	bl	8008dfc <HAL_DMA_Init>
 80065ec:	4603      	mov	r3, r0
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d001      	beq.n	80065f6 <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 80065f2:	f7ff fdcf 	bl	8006194 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	4a0e      	ldr	r2, [pc, #56]	; (8006634 <HAL_SD_MspInit+0x1dc>)
 80065fa:	63da      	str	r2, [r3, #60]	; 0x3c
 80065fc:	4a0d      	ldr	r2, [pc, #52]	; (8006634 <HAL_SD_MspInit+0x1dc>)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8006602:	2200      	movs	r2, #0
 8006604:	2100      	movs	r1, #0
 8006606:	2031      	movs	r0, #49	; 0x31
 8006608:	f002 fbc1 	bl	8008d8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 800660c:	2031      	movs	r0, #49	; 0x31
 800660e:	f002 fbda 	bl	8008dc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8006612:	bf00      	nop
 8006614:	3728      	adds	r7, #40	; 0x28
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}
 800661a:	bf00      	nop
 800661c:	40012c00 	.word	0x40012c00
 8006620:	40023800 	.word	0x40023800
 8006624:	40020800 	.word	0x40020800
 8006628:	40020c00 	.word	0x40020c00
 800662c:	2003e7ac 	.word	0x2003e7ac
 8006630:	40026458 	.word	0x40026458
 8006634:	2003eae0 	.word	0x2003eae0
 8006638:	400264a0 	.word	0x400264a0

0800663c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b08a      	sub	sp, #40	; 0x28
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006644:	f107 0314 	add.w	r3, r7, #20
 8006648:	2200      	movs	r2, #0
 800664a:	601a      	str	r2, [r3, #0]
 800664c:	605a      	str	r2, [r3, #4]
 800664e:	609a      	str	r2, [r3, #8]
 8006650:	60da      	str	r2, [r3, #12]
 8006652:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a19      	ldr	r2, [pc, #100]	; (80066c0 <HAL_SPI_MspInit+0x84>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d12c      	bne.n	80066b8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800665e:	2300      	movs	r3, #0
 8006660:	613b      	str	r3, [r7, #16]
 8006662:	4b18      	ldr	r3, [pc, #96]	; (80066c4 <HAL_SPI_MspInit+0x88>)
 8006664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006666:	4a17      	ldr	r2, [pc, #92]	; (80066c4 <HAL_SPI_MspInit+0x88>)
 8006668:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800666c:	6413      	str	r3, [r2, #64]	; 0x40
 800666e:	4b15      	ldr	r3, [pc, #84]	; (80066c4 <HAL_SPI_MspInit+0x88>)
 8006670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006672:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006676:	613b      	str	r3, [r7, #16]
 8006678:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800667a:	2300      	movs	r3, #0
 800667c:	60fb      	str	r3, [r7, #12]
 800667e:	4b11      	ldr	r3, [pc, #68]	; (80066c4 <HAL_SPI_MspInit+0x88>)
 8006680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006682:	4a10      	ldr	r2, [pc, #64]	; (80066c4 <HAL_SPI_MspInit+0x88>)
 8006684:	f043 0302 	orr.w	r3, r3, #2
 8006688:	6313      	str	r3, [r2, #48]	; 0x30
 800668a:	4b0e      	ldr	r3, [pc, #56]	; (80066c4 <HAL_SPI_MspInit+0x88>)
 800668c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800668e:	f003 0302 	and.w	r3, r3, #2
 8006692:	60fb      	str	r3, [r7, #12]
 8006694:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8006696:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800669a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800669c:	2302      	movs	r3, #2
 800669e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066a0:	2300      	movs	r3, #0
 80066a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80066a4:	2303      	movs	r3, #3
 80066a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80066a8:	2305      	movs	r3, #5
 80066aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80066ac:	f107 0314 	add.w	r3, r7, #20
 80066b0:	4619      	mov	r1, r3
 80066b2:	4805      	ldr	r0, [pc, #20]	; (80066c8 <HAL_SPI_MspInit+0x8c>)
 80066b4:	f002 ff3e 	bl	8009534 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80066b8:	bf00      	nop
 80066ba:	3728      	adds	r7, #40	; 0x28
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}
 80066c0:	40003800 	.word	0x40003800
 80066c4:	40023800 	.word	0x40023800
 80066c8:	40020400 	.word	0x40020400

080066cc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b08c      	sub	sp, #48	; 0x30
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80066d4:	f107 031c 	add.w	r3, r7, #28
 80066d8:	2200      	movs	r2, #0
 80066da:	601a      	str	r2, [r3, #0]
 80066dc:	605a      	str	r2, [r3, #4]
 80066de:	609a      	str	r2, [r3, #8]
 80066e0:	60da      	str	r2, [r3, #12]
 80066e2:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a2d      	ldr	r2, [pc, #180]	; (80067a0 <HAL_TIM_PWM_MspInit+0xd4>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d12d      	bne.n	800674a <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80066ee:	2300      	movs	r3, #0
 80066f0:	61bb      	str	r3, [r7, #24]
 80066f2:	4b2c      	ldr	r3, [pc, #176]	; (80067a4 <HAL_TIM_PWM_MspInit+0xd8>)
 80066f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066f6:	4a2b      	ldr	r2, [pc, #172]	; (80067a4 <HAL_TIM_PWM_MspInit+0xd8>)
 80066f8:	f043 0301 	orr.w	r3, r3, #1
 80066fc:	6453      	str	r3, [r2, #68]	; 0x44
 80066fe:	4b29      	ldr	r3, [pc, #164]	; (80067a4 <HAL_TIM_PWM_MspInit+0xd8>)
 8006700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006702:	f003 0301 	and.w	r3, r3, #1
 8006706:	61bb      	str	r3, [r7, #24]
 8006708:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800670a:	2300      	movs	r3, #0
 800670c:	617b      	str	r3, [r7, #20]
 800670e:	4b25      	ldr	r3, [pc, #148]	; (80067a4 <HAL_TIM_PWM_MspInit+0xd8>)
 8006710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006712:	4a24      	ldr	r2, [pc, #144]	; (80067a4 <HAL_TIM_PWM_MspInit+0xd8>)
 8006714:	f043 0310 	orr.w	r3, r3, #16
 8006718:	6313      	str	r3, [r2, #48]	; 0x30
 800671a:	4b22      	ldr	r3, [pc, #136]	; (80067a4 <HAL_TIM_PWM_MspInit+0xd8>)
 800671c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800671e:	f003 0310 	and.w	r3, r3, #16
 8006722:	617b      	str	r3, [r7, #20]
 8006724:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8006726:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 800672a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800672c:	2302      	movs	r3, #2
 800672e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006730:	2300      	movs	r3, #0
 8006732:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006734:	2300      	movs	r3, #0
 8006736:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8006738:	2301      	movs	r3, #1
 800673a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800673c:	f107 031c 	add.w	r3, r7, #28
 8006740:	4619      	mov	r1, r3
 8006742:	4819      	ldr	r0, [pc, #100]	; (80067a8 <HAL_TIM_PWM_MspInit+0xdc>)
 8006744:	f002 fef6 	bl	8009534 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8006748:	e026      	b.n	8006798 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM3)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a17      	ldr	r2, [pc, #92]	; (80067ac <HAL_TIM_PWM_MspInit+0xe0>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d10e      	bne.n	8006772 <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006754:	2300      	movs	r3, #0
 8006756:	613b      	str	r3, [r7, #16]
 8006758:	4b12      	ldr	r3, [pc, #72]	; (80067a4 <HAL_TIM_PWM_MspInit+0xd8>)
 800675a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800675c:	4a11      	ldr	r2, [pc, #68]	; (80067a4 <HAL_TIM_PWM_MspInit+0xd8>)
 800675e:	f043 0302 	orr.w	r3, r3, #2
 8006762:	6413      	str	r3, [r2, #64]	; 0x40
 8006764:	4b0f      	ldr	r3, [pc, #60]	; (80067a4 <HAL_TIM_PWM_MspInit+0xd8>)
 8006766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006768:	f003 0302 	and.w	r3, r3, #2
 800676c:	613b      	str	r3, [r7, #16]
 800676e:	693b      	ldr	r3, [r7, #16]
}
 8006770:	e012      	b.n	8006798 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM4)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a0e      	ldr	r2, [pc, #56]	; (80067b0 <HAL_TIM_PWM_MspInit+0xe4>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d10d      	bne.n	8006798 <HAL_TIM_PWM_MspInit+0xcc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800677c:	2300      	movs	r3, #0
 800677e:	60fb      	str	r3, [r7, #12]
 8006780:	4b08      	ldr	r3, [pc, #32]	; (80067a4 <HAL_TIM_PWM_MspInit+0xd8>)
 8006782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006784:	4a07      	ldr	r2, [pc, #28]	; (80067a4 <HAL_TIM_PWM_MspInit+0xd8>)
 8006786:	f043 0304 	orr.w	r3, r3, #4
 800678a:	6413      	str	r3, [r2, #64]	; 0x40
 800678c:	4b05      	ldr	r3, [pc, #20]	; (80067a4 <HAL_TIM_PWM_MspInit+0xd8>)
 800678e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006790:	f003 0304 	and.w	r3, r3, #4
 8006794:	60fb      	str	r3, [r7, #12]
 8006796:	68fb      	ldr	r3, [r7, #12]
}
 8006798:	bf00      	nop
 800679a:	3730      	adds	r7, #48	; 0x30
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}
 80067a0:	40010000 	.word	0x40010000
 80067a4:	40023800 	.word	0x40023800
 80067a8:	40021000 	.word	0x40021000
 80067ac:	40000400 	.word	0x40000400
 80067b0:	40000800 	.word	0x40000800

080067b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b088      	sub	sp, #32
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a3e      	ldr	r2, [pc, #248]	; (80068bc <HAL_TIM_Base_MspInit+0x108>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d116      	bne.n	80067f4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80067c6:	2300      	movs	r3, #0
 80067c8:	61fb      	str	r3, [r7, #28]
 80067ca:	4b3d      	ldr	r3, [pc, #244]	; (80068c0 <HAL_TIM_Base_MspInit+0x10c>)
 80067cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ce:	4a3c      	ldr	r2, [pc, #240]	; (80068c0 <HAL_TIM_Base_MspInit+0x10c>)
 80067d0:	f043 0310 	orr.w	r3, r3, #16
 80067d4:	6413      	str	r3, [r2, #64]	; 0x40
 80067d6:	4b3a      	ldr	r3, [pc, #232]	; (80068c0 <HAL_TIM_Base_MspInit+0x10c>)
 80067d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067da:	f003 0310 	and.w	r3, r3, #16
 80067de:	61fb      	str	r3, [r7, #28]
 80067e0:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 80067e2:	2200      	movs	r2, #0
 80067e4:	2101      	movs	r1, #1
 80067e6:	2036      	movs	r0, #54	; 0x36
 80067e8:	f002 fad1 	bl	8008d8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80067ec:	2036      	movs	r0, #54	; 0x36
 80067ee:	f002 faea 	bl	8008dc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 80067f2:	e05e      	b.n	80068b2 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM7)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a32      	ldr	r2, [pc, #200]	; (80068c4 <HAL_TIM_Base_MspInit+0x110>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d116      	bne.n	800682c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80067fe:	2300      	movs	r3, #0
 8006800:	61bb      	str	r3, [r7, #24]
 8006802:	4b2f      	ldr	r3, [pc, #188]	; (80068c0 <HAL_TIM_Base_MspInit+0x10c>)
 8006804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006806:	4a2e      	ldr	r2, [pc, #184]	; (80068c0 <HAL_TIM_Base_MspInit+0x10c>)
 8006808:	f043 0320 	orr.w	r3, r3, #32
 800680c:	6413      	str	r3, [r2, #64]	; 0x40
 800680e:	4b2c      	ldr	r3, [pc, #176]	; (80068c0 <HAL_TIM_Base_MspInit+0x10c>)
 8006810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006812:	f003 0320 	and.w	r3, r3, #32
 8006816:	61bb      	str	r3, [r7, #24]
 8006818:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800681a:	2200      	movs	r2, #0
 800681c:	2100      	movs	r1, #0
 800681e:	2037      	movs	r0, #55	; 0x37
 8006820:	f002 fab5 	bl	8008d8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8006824:	2037      	movs	r0, #55	; 0x37
 8006826:	f002 face 	bl	8008dc6 <HAL_NVIC_EnableIRQ>
}
 800682a:	e042      	b.n	80068b2 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM10)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a25      	ldr	r2, [pc, #148]	; (80068c8 <HAL_TIM_Base_MspInit+0x114>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d10e      	bne.n	8006854 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8006836:	2300      	movs	r3, #0
 8006838:	617b      	str	r3, [r7, #20]
 800683a:	4b21      	ldr	r3, [pc, #132]	; (80068c0 <HAL_TIM_Base_MspInit+0x10c>)
 800683c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800683e:	4a20      	ldr	r2, [pc, #128]	; (80068c0 <HAL_TIM_Base_MspInit+0x10c>)
 8006840:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006844:	6453      	str	r3, [r2, #68]	; 0x44
 8006846:	4b1e      	ldr	r3, [pc, #120]	; (80068c0 <HAL_TIM_Base_MspInit+0x10c>)
 8006848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800684a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800684e:	617b      	str	r3, [r7, #20]
 8006850:	697b      	ldr	r3, [r7, #20]
}
 8006852:	e02e      	b.n	80068b2 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM11)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a1c      	ldr	r2, [pc, #112]	; (80068cc <HAL_TIM_Base_MspInit+0x118>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d10e      	bne.n	800687c <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800685e:	2300      	movs	r3, #0
 8006860:	613b      	str	r3, [r7, #16]
 8006862:	4b17      	ldr	r3, [pc, #92]	; (80068c0 <HAL_TIM_Base_MspInit+0x10c>)
 8006864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006866:	4a16      	ldr	r2, [pc, #88]	; (80068c0 <HAL_TIM_Base_MspInit+0x10c>)
 8006868:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800686c:	6453      	str	r3, [r2, #68]	; 0x44
 800686e:	4b14      	ldr	r3, [pc, #80]	; (80068c0 <HAL_TIM_Base_MspInit+0x10c>)
 8006870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006872:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006876:	613b      	str	r3, [r7, #16]
 8006878:	693b      	ldr	r3, [r7, #16]
}
 800687a:	e01a      	b.n	80068b2 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM13)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a13      	ldr	r2, [pc, #76]	; (80068d0 <HAL_TIM_Base_MspInit+0x11c>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d115      	bne.n	80068b2 <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8006886:	2300      	movs	r3, #0
 8006888:	60fb      	str	r3, [r7, #12]
 800688a:	4b0d      	ldr	r3, [pc, #52]	; (80068c0 <HAL_TIM_Base_MspInit+0x10c>)
 800688c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800688e:	4a0c      	ldr	r2, [pc, #48]	; (80068c0 <HAL_TIM_Base_MspInit+0x10c>)
 8006890:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006894:	6413      	str	r3, [r2, #64]	; 0x40
 8006896:	4b0a      	ldr	r3, [pc, #40]	; (80068c0 <HAL_TIM_Base_MspInit+0x10c>)
 8006898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800689a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800689e:	60fb      	str	r3, [r7, #12]
 80068a0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80068a2:	2200      	movs	r2, #0
 80068a4:	2100      	movs	r1, #0
 80068a6:	202c      	movs	r0, #44	; 0x2c
 80068a8:	f002 fa71 	bl	8008d8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80068ac:	202c      	movs	r0, #44	; 0x2c
 80068ae:	f002 fa8a 	bl	8008dc6 <HAL_NVIC_EnableIRQ>
}
 80068b2:	bf00      	nop
 80068b4:	3720      	adds	r7, #32
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}
 80068ba:	bf00      	nop
 80068bc:	40001000 	.word	0x40001000
 80068c0:	40023800 	.word	0x40023800
 80068c4:	40001400 	.word	0x40001400
 80068c8:	40014400 	.word	0x40014400
 80068cc:	40014800 	.word	0x40014800
 80068d0:	40001c00 	.word	0x40001c00

080068d4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b08a      	sub	sp, #40	; 0x28
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80068dc:	f107 0314 	add.w	r3, r7, #20
 80068e0:	2200      	movs	r2, #0
 80068e2:	601a      	str	r2, [r3, #0]
 80068e4:	605a      	str	r2, [r3, #4]
 80068e6:	609a      	str	r2, [r3, #8]
 80068e8:	60da      	str	r2, [r3, #12]
 80068ea:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a1d      	ldr	r2, [pc, #116]	; (8006968 <HAL_TIM_Encoder_MspInit+0x94>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d133      	bne.n	800695e <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80068f6:	2300      	movs	r3, #0
 80068f8:	613b      	str	r3, [r7, #16]
 80068fa:	4b1c      	ldr	r3, [pc, #112]	; (800696c <HAL_TIM_Encoder_MspInit+0x98>)
 80068fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068fe:	4a1b      	ldr	r2, [pc, #108]	; (800696c <HAL_TIM_Encoder_MspInit+0x98>)
 8006900:	f043 0302 	orr.w	r3, r3, #2
 8006904:	6453      	str	r3, [r2, #68]	; 0x44
 8006906:	4b19      	ldr	r3, [pc, #100]	; (800696c <HAL_TIM_Encoder_MspInit+0x98>)
 8006908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800690a:	f003 0302 	and.w	r3, r3, #2
 800690e:	613b      	str	r3, [r7, #16]
 8006910:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006912:	2300      	movs	r3, #0
 8006914:	60fb      	str	r3, [r7, #12]
 8006916:	4b15      	ldr	r3, [pc, #84]	; (800696c <HAL_TIM_Encoder_MspInit+0x98>)
 8006918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800691a:	4a14      	ldr	r2, [pc, #80]	; (800696c <HAL_TIM_Encoder_MspInit+0x98>)
 800691c:	f043 0304 	orr.w	r3, r3, #4
 8006920:	6313      	str	r3, [r2, #48]	; 0x30
 8006922:	4b12      	ldr	r3, [pc, #72]	; (800696c <HAL_TIM_Encoder_MspInit+0x98>)
 8006924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006926:	f003 0304 	and.w	r3, r3, #4
 800692a:	60fb      	str	r3, [r7, #12]
 800692c:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800692e:	23c0      	movs	r3, #192	; 0xc0
 8006930:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006932:	2302      	movs	r3, #2
 8006934:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006936:	2300      	movs	r3, #0
 8006938:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800693a:	2300      	movs	r3, #0
 800693c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800693e:	2303      	movs	r3, #3
 8006940:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006942:	f107 0314 	add.w	r3, r7, #20
 8006946:	4619      	mov	r1, r3
 8006948:	4809      	ldr	r0, [pc, #36]	; (8006970 <HAL_TIM_Encoder_MspInit+0x9c>)
 800694a:	f002 fdf3 	bl	8009534 <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800694e:	2200      	movs	r2, #0
 8006950:	2100      	movs	r1, #0
 8006952:	202c      	movs	r0, #44	; 0x2c
 8006954:	f002 fa1b 	bl	8008d8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8006958:	202c      	movs	r0, #44	; 0x2c
 800695a:	f002 fa34 	bl	8008dc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800695e:	bf00      	nop
 8006960:	3728      	adds	r7, #40	; 0x28
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}
 8006966:	bf00      	nop
 8006968:	40010400 	.word	0x40010400
 800696c:	40023800 	.word	0x40023800
 8006970:	40020800 	.word	0x40020800

08006974 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b08c      	sub	sp, #48	; 0x30
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800697c:	f107 031c 	add.w	r3, r7, #28
 8006980:	2200      	movs	r2, #0
 8006982:	601a      	str	r2, [r3, #0]
 8006984:	605a      	str	r2, [r3, #4]
 8006986:	609a      	str	r2, [r3, #8]
 8006988:	60da      	str	r2, [r3, #12]
 800698a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a5c      	ldr	r2, [pc, #368]	; (8006b04 <HAL_TIM_MspPostInit+0x190>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d11f      	bne.n	80069d6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006996:	2300      	movs	r3, #0
 8006998:	61bb      	str	r3, [r7, #24]
 800699a:	4b5b      	ldr	r3, [pc, #364]	; (8006b08 <HAL_TIM_MspPostInit+0x194>)
 800699c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800699e:	4a5a      	ldr	r2, [pc, #360]	; (8006b08 <HAL_TIM_MspPostInit+0x194>)
 80069a0:	f043 0310 	orr.w	r3, r3, #16
 80069a4:	6313      	str	r3, [r2, #48]	; 0x30
 80069a6:	4b58      	ldr	r3, [pc, #352]	; (8006b08 <HAL_TIM_MspPostInit+0x194>)
 80069a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069aa:	f003 0310 	and.w	r3, r3, #16
 80069ae:	61bb      	str	r3, [r7, #24]
 80069b0:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80069b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80069b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069b8:	2302      	movs	r3, #2
 80069ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069bc:	2300      	movs	r3, #0
 80069be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80069c0:	2300      	movs	r3, #0
 80069c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80069c4:	2301      	movs	r3, #1
 80069c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80069c8:	f107 031c 	add.w	r3, r7, #28
 80069cc:	4619      	mov	r1, r3
 80069ce:	484f      	ldr	r0, [pc, #316]	; (8006b0c <HAL_TIM_MspPostInit+0x198>)
 80069d0:	f002 fdb0 	bl	8009534 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 80069d4:	e091      	b.n	8006afa <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM3)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a4d      	ldr	r2, [pc, #308]	; (8006b10 <HAL_TIM_MspPostInit+0x19c>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d11e      	bne.n	8006a1e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80069e0:	2300      	movs	r3, #0
 80069e2:	617b      	str	r3, [r7, #20]
 80069e4:	4b48      	ldr	r3, [pc, #288]	; (8006b08 <HAL_TIM_MspPostInit+0x194>)
 80069e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069e8:	4a47      	ldr	r2, [pc, #284]	; (8006b08 <HAL_TIM_MspPostInit+0x194>)
 80069ea:	f043 0302 	orr.w	r3, r3, #2
 80069ee:	6313      	str	r3, [r2, #48]	; 0x30
 80069f0:	4b45      	ldr	r3, [pc, #276]	; (8006b08 <HAL_TIM_MspPostInit+0x194>)
 80069f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069f4:	f003 0302 	and.w	r3, r3, #2
 80069f8:	617b      	str	r3, [r7, #20]
 80069fa:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80069fc:	2330      	movs	r3, #48	; 0x30
 80069fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a00:	2302      	movs	r3, #2
 8006a02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a04:	2300      	movs	r3, #0
 8006a06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006a0c:	2302      	movs	r3, #2
 8006a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006a10:	f107 031c 	add.w	r3, r7, #28
 8006a14:	4619      	mov	r1, r3
 8006a16:	483f      	ldr	r0, [pc, #252]	; (8006b14 <HAL_TIM_MspPostInit+0x1a0>)
 8006a18:	f002 fd8c 	bl	8009534 <HAL_GPIO_Init>
}
 8006a1c:	e06d      	b.n	8006afa <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM4)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a3d      	ldr	r2, [pc, #244]	; (8006b18 <HAL_TIM_MspPostInit+0x1a4>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d11f      	bne.n	8006a68 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006a28:	2300      	movs	r3, #0
 8006a2a:	613b      	str	r3, [r7, #16]
 8006a2c:	4b36      	ldr	r3, [pc, #216]	; (8006b08 <HAL_TIM_MspPostInit+0x194>)
 8006a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a30:	4a35      	ldr	r2, [pc, #212]	; (8006b08 <HAL_TIM_MspPostInit+0x194>)
 8006a32:	f043 0308 	orr.w	r3, r3, #8
 8006a36:	6313      	str	r3, [r2, #48]	; 0x30
 8006a38:	4b33      	ldr	r3, [pc, #204]	; (8006b08 <HAL_TIM_MspPostInit+0x194>)
 8006a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a3c:	f003 0308 	and.w	r3, r3, #8
 8006a40:	613b      	str	r3, [r7, #16]
 8006a42:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8006a44:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8006a48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a4a:	2302      	movs	r3, #2
 8006a4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a52:	2300      	movs	r3, #0
 8006a54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8006a56:	2302      	movs	r3, #2
 8006a58:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006a5a:	f107 031c 	add.w	r3, r7, #28
 8006a5e:	4619      	mov	r1, r3
 8006a60:	482e      	ldr	r0, [pc, #184]	; (8006b1c <HAL_TIM_MspPostInit+0x1a8>)
 8006a62:	f002 fd67 	bl	8009534 <HAL_GPIO_Init>
}
 8006a66:	e048      	b.n	8006afa <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM10)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a2c      	ldr	r2, [pc, #176]	; (8006b20 <HAL_TIM_MspPostInit+0x1ac>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d11f      	bne.n	8006ab2 <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006a72:	2300      	movs	r3, #0
 8006a74:	60fb      	str	r3, [r7, #12]
 8006a76:	4b24      	ldr	r3, [pc, #144]	; (8006b08 <HAL_TIM_MspPostInit+0x194>)
 8006a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a7a:	4a23      	ldr	r2, [pc, #140]	; (8006b08 <HAL_TIM_MspPostInit+0x194>)
 8006a7c:	f043 0302 	orr.w	r3, r3, #2
 8006a80:	6313      	str	r3, [r2, #48]	; 0x30
 8006a82:	4b21      	ldr	r3, [pc, #132]	; (8006b08 <HAL_TIM_MspPostInit+0x194>)
 8006a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a86:	f003 0302 	and.w	r3, r3, #2
 8006a8a:	60fb      	str	r3, [r7, #12]
 8006a8c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006a8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006a92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a94:	2302      	movs	r3, #2
 8006a96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8006aa0:	2303      	movs	r3, #3
 8006aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006aa4:	f107 031c 	add.w	r3, r7, #28
 8006aa8:	4619      	mov	r1, r3
 8006aaa:	481a      	ldr	r0, [pc, #104]	; (8006b14 <HAL_TIM_MspPostInit+0x1a0>)
 8006aac:	f002 fd42 	bl	8009534 <HAL_GPIO_Init>
}
 8006ab0:	e023      	b.n	8006afa <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM11)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a1b      	ldr	r2, [pc, #108]	; (8006b24 <HAL_TIM_MspPostInit+0x1b0>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d11e      	bne.n	8006afa <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006abc:	2300      	movs	r3, #0
 8006abe:	60bb      	str	r3, [r7, #8]
 8006ac0:	4b11      	ldr	r3, [pc, #68]	; (8006b08 <HAL_TIM_MspPostInit+0x194>)
 8006ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ac4:	4a10      	ldr	r2, [pc, #64]	; (8006b08 <HAL_TIM_MspPostInit+0x194>)
 8006ac6:	f043 0302 	orr.w	r3, r3, #2
 8006aca:	6313      	str	r3, [r2, #48]	; 0x30
 8006acc:	4b0e      	ldr	r3, [pc, #56]	; (8006b08 <HAL_TIM_MspPostInit+0x194>)
 8006ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ad0:	f003 0302 	and.w	r3, r3, #2
 8006ad4:	60bb      	str	r3, [r7, #8]
 8006ad6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006ad8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006adc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ade:	2302      	movs	r3, #2
 8006ae0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8006aea:	2303      	movs	r3, #3
 8006aec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006aee:	f107 031c 	add.w	r3, r7, #28
 8006af2:	4619      	mov	r1, r3
 8006af4:	4807      	ldr	r0, [pc, #28]	; (8006b14 <HAL_TIM_MspPostInit+0x1a0>)
 8006af6:	f002 fd1d 	bl	8009534 <HAL_GPIO_Init>
}
 8006afa:	bf00      	nop
 8006afc:	3730      	adds	r7, #48	; 0x30
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}
 8006b02:	bf00      	nop
 8006b04:	40010000 	.word	0x40010000
 8006b08:	40023800 	.word	0x40023800
 8006b0c:	40021000 	.word	0x40021000
 8006b10:	40000400 	.word	0x40000400
 8006b14:	40020400 	.word	0x40020400
 8006b18:	40000800 	.word	0x40000800
 8006b1c:	40020c00 	.word	0x40020c00
 8006b20:	40014400 	.word	0x40014400
 8006b24:	40014800 	.word	0x40014800

08006b28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b08a      	sub	sp, #40	; 0x28
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b30:	f107 0314 	add.w	r3, r7, #20
 8006b34:	2200      	movs	r2, #0
 8006b36:	601a      	str	r2, [r3, #0]
 8006b38:	605a      	str	r2, [r3, #4]
 8006b3a:	609a      	str	r2, [r3, #8]
 8006b3c:	60da      	str	r2, [r3, #12]
 8006b3e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a19      	ldr	r2, [pc, #100]	; (8006bac <HAL_UART_MspInit+0x84>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d12b      	bne.n	8006ba2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	613b      	str	r3, [r7, #16]
 8006b4e:	4b18      	ldr	r3, [pc, #96]	; (8006bb0 <HAL_UART_MspInit+0x88>)
 8006b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b52:	4a17      	ldr	r2, [pc, #92]	; (8006bb0 <HAL_UART_MspInit+0x88>)
 8006b54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b58:	6413      	str	r3, [r2, #64]	; 0x40
 8006b5a:	4b15      	ldr	r3, [pc, #84]	; (8006bb0 <HAL_UART_MspInit+0x88>)
 8006b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b62:	613b      	str	r3, [r7, #16]
 8006b64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006b66:	2300      	movs	r3, #0
 8006b68:	60fb      	str	r3, [r7, #12]
 8006b6a:	4b11      	ldr	r3, [pc, #68]	; (8006bb0 <HAL_UART_MspInit+0x88>)
 8006b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b6e:	4a10      	ldr	r2, [pc, #64]	; (8006bb0 <HAL_UART_MspInit+0x88>)
 8006b70:	f043 0308 	orr.w	r3, r3, #8
 8006b74:	6313      	str	r3, [r2, #48]	; 0x30
 8006b76:	4b0e      	ldr	r3, [pc, #56]	; (8006bb0 <HAL_UART_MspInit+0x88>)
 8006b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b7a:	f003 0308 	and.w	r3, r3, #8
 8006b7e:	60fb      	str	r3, [r7, #12]
 8006b80:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8006b82:	2360      	movs	r3, #96	; 0x60
 8006b84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b86:	2302      	movs	r3, #2
 8006b88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b8e:	2303      	movs	r3, #3
 8006b90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006b92:	2307      	movs	r3, #7
 8006b94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006b96:	f107 0314 	add.w	r3, r7, #20
 8006b9a:	4619      	mov	r1, r3
 8006b9c:	4805      	ldr	r0, [pc, #20]	; (8006bb4 <HAL_UART_MspInit+0x8c>)
 8006b9e:	f002 fcc9 	bl	8009534 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8006ba2:	bf00      	nop
 8006ba4:	3728      	adds	r7, #40	; 0x28
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}
 8006baa:	bf00      	nop
 8006bac:	40004400 	.word	0x40004400
 8006bb0:	40023800 	.word	0x40023800
 8006bb4:	40020c00 	.word	0x40020c00

08006bb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006bbc:	e7fe      	b.n	8006bbc <NMI_Handler+0x4>

08006bbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006bbe:	b480      	push	{r7}
 8006bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006bc2:	e7fe      	b.n	8006bc2 <HardFault_Handler+0x4>

08006bc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006bc8:	e7fe      	b.n	8006bc8 <MemManage_Handler+0x4>

08006bca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006bca:	b480      	push	{r7}
 8006bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006bce:	e7fe      	b.n	8006bce <BusFault_Handler+0x4>

08006bd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006bd4:	e7fe      	b.n	8006bd4 <UsageFault_Handler+0x4>

08006bd6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006bd6:	b480      	push	{r7}
 8006bd8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006bda:	bf00      	nop
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr

08006be4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006be4:	b480      	push	{r7}
 8006be6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006be8:	bf00      	nop
 8006bea:	46bd      	mov	sp, r7
 8006bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf0:	4770      	bx	lr

08006bf2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006bf2:	b480      	push	{r7}
 8006bf4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006bf6:	bf00      	nop
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfe:	4770      	bx	lr

08006c00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006c04:	f001 fba2 	bl	800834c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006c08:	bf00      	nop
 8006c0a:	bd80      	pop	{r7, pc}

08006c0c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8006c10:	4803      	ldr	r0, [pc, #12]	; (8006c20 <TIM8_UP_TIM13_IRQHandler+0x14>)
 8006c12:	f006 fe72 	bl	800d8fa <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 8006c16:	4803      	ldr	r0, [pc, #12]	; (8006c24 <TIM8_UP_TIM13_IRQHandler+0x18>)
 8006c18:	f006 fe6f 	bl	800d8fa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8006c1c:	bf00      	nop
 8006c1e:	bd80      	pop	{r7, pc}
 8006c20:	2003e864 	.word	0x2003e864
 8006c24:	2003ea60 	.word	0x2003ea60

08006c28 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8006c28:	b580      	push	{r7, lr}
 8006c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8006c2c:	4802      	ldr	r0, [pc, #8]	; (8006c38 <SDIO_IRQHandler+0x10>)
 8006c2e:	f004 ff0b 	bl	800ba48 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8006c32:	bf00      	nop
 8006c34:	bd80      	pop	{r7, pc}
 8006c36:	bf00      	nop
 8006c38:	2003ebc0 	.word	0x2003ebc0

08006c3c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8006c40:	4802      	ldr	r0, [pc, #8]	; (8006c4c <TIM6_DAC_IRQHandler+0x10>)
 8006c42:	f006 fe5a 	bl	800d8fa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8006c46:	bf00      	nop
 8006c48:	bd80      	pop	{r7, pc}
 8006c4a:	bf00      	nop
 8006c4c:	2003eb40 	.word	0x2003eb40

08006c50 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8006c54:	4802      	ldr	r0, [pc, #8]	; (8006c60 <TIM7_IRQHandler+0x10>)
 8006c56:	f006 fe50 	bl	800d8fa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8006c5a:	bf00      	nop
 8006c5c:	bd80      	pop	{r7, pc}
 8006c5e:	bf00      	nop
 8006c60:	2003ece4 	.word	0x2003ece4

08006c64 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8006c68:	4802      	ldr	r0, [pc, #8]	; (8006c74 <DMA2_Stream2_IRQHandler+0x10>)
 8006c6a:	f002 f9ef 	bl	800904c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8006c6e:	bf00      	nop
 8006c70:	bd80      	pop	{r7, pc}
 8006c72:	bf00      	nop
 8006c74:	2003ec84 	.word	0x2003ec84

08006c78 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8006c7c:	4802      	ldr	r0, [pc, #8]	; (8006c88 <DMA2_Stream3_IRQHandler+0x10>)
 8006c7e:	f002 f9e5 	bl	800904c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8006c82:	bf00      	nop
 8006c84:	bd80      	pop	{r7, pc}
 8006c86:	bf00      	nop
 8006c88:	2003e7ac 	.word	0x2003e7ac

08006c8c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8006c90:	4802      	ldr	r0, [pc, #8]	; (8006c9c <DMA2_Stream6_IRQHandler+0x10>)
 8006c92:	f002 f9db 	bl	800904c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8006c96:	bf00      	nop
 8006c98:	bd80      	pop	{r7, pc}
 8006c9a:	bf00      	nop
 8006c9c:	2003eae0 	.word	0x2003eae0

08006ca0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b086      	sub	sp, #24
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006ca8:	4a14      	ldr	r2, [pc, #80]	; (8006cfc <_sbrk+0x5c>)
 8006caa:	4b15      	ldr	r3, [pc, #84]	; (8006d00 <_sbrk+0x60>)
 8006cac:	1ad3      	subs	r3, r2, r3
 8006cae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006cb4:	4b13      	ldr	r3, [pc, #76]	; (8006d04 <_sbrk+0x64>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d102      	bne.n	8006cc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006cbc:	4b11      	ldr	r3, [pc, #68]	; (8006d04 <_sbrk+0x64>)
 8006cbe:	4a12      	ldr	r2, [pc, #72]	; (8006d08 <_sbrk+0x68>)
 8006cc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006cc2:	4b10      	ldr	r3, [pc, #64]	; (8006d04 <_sbrk+0x64>)
 8006cc4:	681a      	ldr	r2, [r3, #0]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	4413      	add	r3, r2
 8006cca:	693a      	ldr	r2, [r7, #16]
 8006ccc:	429a      	cmp	r2, r3
 8006cce:	d207      	bcs.n	8006ce0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006cd0:	f00d f8a8 	bl	8013e24 <__errno>
 8006cd4:	4602      	mov	r2, r0
 8006cd6:	230c      	movs	r3, #12
 8006cd8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8006cda:	f04f 33ff 	mov.w	r3, #4294967295
 8006cde:	e009      	b.n	8006cf4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006ce0:	4b08      	ldr	r3, [pc, #32]	; (8006d04 <_sbrk+0x64>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006ce6:	4b07      	ldr	r3, [pc, #28]	; (8006d04 <_sbrk+0x64>)
 8006ce8:	681a      	ldr	r2, [r3, #0]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	4413      	add	r3, r2
 8006cee:	4a05      	ldr	r2, [pc, #20]	; (8006d04 <_sbrk+0x64>)
 8006cf0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	3718      	adds	r7, #24
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	bd80      	pop	{r7, pc}
 8006cfc:	20050000 	.word	0x20050000
 8006d00:	00000800 	.word	0x00000800
 8006d04:	200002c0 	.word	0x200002c0
 8006d08:	20040e38 	.word	0x20040e38

08006d0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006d10:	4b08      	ldr	r3, [pc, #32]	; (8006d34 <SystemInit+0x28>)
 8006d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d16:	4a07      	ldr	r2, [pc, #28]	; (8006d34 <SystemInit+0x28>)
 8006d18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006d1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006d20:	4b04      	ldr	r3, [pc, #16]	; (8006d34 <SystemInit+0x28>)
 8006d22:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006d26:	609a      	str	r2, [r3, #8]
#endif
}
 8006d28:	bf00      	nop
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d30:	4770      	bx	lr
 8006d32:	bf00      	nop
 8006d34:	e000ed00 	.word	0xe000ed00

08006d38 <cppInit>:
		}
	}
}

void cppInit(void)
{
 8006d38:	b598      	push	{r3, r4, r7, lr}
 8006d3a:	af00      	add	r7, sp, #0
	lcd_init();
 8006d3c:	f7fa f96c 	bl	8001018 <lcd_init>

	//---------- Buttery Check ----------//
	power_sensor.init();
 8006d40:	483a      	ldr	r0, [pc, #232]	; (8006e2c <cppInit+0xf4>)
 8006d42:	f7fd fdff 	bl	8004944 <_ZN11PowerSensor4initEv>
	HAL_Delay(100);
 8006d46:	2064      	movs	r0, #100	; 0x64
 8006d48:	f001 fb20 	bl	800838c <HAL_Delay>
	power_sensor.updateValues();
 8006d4c:	4837      	ldr	r0, [pc, #220]	; (8006e2c <cppInit+0xf4>)
 8006d4e:	f7fd fe07 	bl	8004960 <_ZN11PowerSensor12updateValuesEv>

	lcd_clear();
 8006d52:	f7fa f9a5 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8006d56:	2100      	movs	r1, #0
 8006d58:	2000      	movs	r0, #0
 8006d5a:	f7fa f9b1 	bl	80010c0 <lcd_locate>
	lcd_printf("Voltage");
 8006d5e:	4834      	ldr	r0, [pc, #208]	; (8006e30 <cppInit+0xf8>)
 8006d60:	f7fa f9d8 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8006d64:	2101      	movs	r1, #1
 8006d66:	2000      	movs	r0, #0
 8006d68:	f7fa f9aa 	bl	80010c0 <lcd_locate>
	lcd_printf("%f", power_sensor.getButteryVoltage());
 8006d6c:	482f      	ldr	r0, [pc, #188]	; (8006e2c <cppInit+0xf4>)
 8006d6e:	f7fd fe21 	bl	80049b4 <_ZN11PowerSensor17getButteryVoltageEv>
 8006d72:	ee10 3a10 	vmov	r3, s0
 8006d76:	4618      	mov	r0, r3
 8006d78:	f7f9 fbfe 	bl	8000578 <__aeabi_f2d>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	460c      	mov	r4, r1
 8006d80:	461a      	mov	r2, r3
 8006d82:	4623      	mov	r3, r4
 8006d84:	482b      	ldr	r0, [pc, #172]	; (8006e34 <cppInit+0xfc>)
 8006d86:	f7fa f9c5 	bl	8001114 <lcd_printf>
	HAL_Delay(1000);
 8006d8a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006d8e:	f001 fafd 	bl	800838c <HAL_Delay>

	//if(power_sensor.butteryCheck() == true) batteryLowMode(); //if battery low, informed

	// -----------initialize-------//
	if(logger.sdCardInit() == true){ //sd mount successfull
 8006d92:	4829      	ldr	r0, [pc, #164]	; (8006e38 <cppInit+0x100>)
 8006d94:	f7fd f81a 	bl	8003dcc <_ZN6Logger10sdCardInitEv>
 8006d98:	4603      	mov	r3, r0
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d007      	beq.n	8006dae <cppInit+0x76>
		led.fullColor('G');
 8006d9e:	2147      	movs	r1, #71	; 0x47
 8006da0:	4826      	ldr	r0, [pc, #152]	; (8006e3c <cppInit+0x104>)
 8006da2:	f7fb f8ab 	bl	8001efc <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8006da6:	2064      	movs	r0, #100	; 0x64
 8006da8:	f001 faf0 	bl	800838c <HAL_Delay>
 8006dac:	e006      	b.n	8006dbc <cppInit+0x84>
	}
	else{ //sd mount fali
		led.fullColor('R');
 8006dae:	2152      	movs	r1, #82	; 0x52
 8006db0:	4822      	ldr	r0, [pc, #136]	; (8006e3c <cppInit+0x104>)
 8006db2:	f7fb f8a3 	bl	8001efc <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 8006db6:	2064      	movs	r0, #100	; 0x64
 8006db8:	f001 fae8 	bl	800838c <HAL_Delay>
	}

	line_sensor.ADCStart();
 8006dbc:	4820      	ldr	r0, [pc, #128]	; (8006e40 <cppInit+0x108>)
 8006dbe:	f7fb f9f9 	bl	80021b4 <_ZN10LineSensor8ADCStartEv>
	motor.init();
 8006dc2:	4820      	ldr	r0, [pc, #128]	; (8006e44 <cppInit+0x10c>)
 8006dc4:	f7fd fa90 	bl	80042e8 <_ZN5Motor4initEv>
	encoder.init();
 8006dc8:	481f      	ldr	r0, [pc, #124]	; (8006e48 <cppInit+0x110>)
 8006dca:	f7fa f9ef 	bl	80011ac <_ZN7Encoder4initEv>
	imu.init();
 8006dce:	481f      	ldr	r0, [pc, #124]	; (8006e4c <cppInit+0x114>)
 8006dd0:	f7fa fe52 	bl	8001a78 <_ZN3IMU4initEv>
	line_trace.init();
 8006dd4:	481e      	ldr	r0, [pc, #120]	; (8006e50 <cppInit+0x118>)
 8006dd6:	f7fc fb27 	bl	8003428 <_ZN9LineTrace4initEv>

	line_sensor.calibration();
 8006dda:	4819      	ldr	r0, [pc, #100]	; (8006e40 <cppInit+0x108>)
 8006ddc:	f7fb fb2a 	bl	8002434 <_ZN10LineSensor11calibrationEv>
	HAL_Delay(1000);
 8006de0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006de4:	f001 fad2 	bl	800838c <HAL_Delay>

	led.fullColor('M');
 8006de8:	214d      	movs	r1, #77	; 0x4d
 8006dea:	4814      	ldr	r0, [pc, #80]	; (8006e3c <cppInit+0x104>)
 8006dec:	f7fb f886 	bl	8001efc <_ZN3LED9fullColorEc>
	imu.calibration();
 8006df0:	4816      	ldr	r0, [pc, #88]	; (8006e4c <cppInit+0x114>)
 8006df2:	f7fa ff0b 	bl	8001c0c <_ZN3IMU11calibrationEv>

	//line_trace.setGain(0.0005, 0.000003, 0);
	//line_trace.setGain(0.0005, 0.000002, 0);

	//velocity_ctrl.setVelocityGain(1.5, 20, 0);
	velocity_ctrl.setVelocityGain(1.8295, 16.1174, 0.025243);
 8006df6:	ed9f 1a17 	vldr	s2, [pc, #92]	; 8006e54 <cppInit+0x11c>
 8006dfa:	eddf 0a17 	vldr	s1, [pc, #92]	; 8006e58 <cppInit+0x120>
 8006dfe:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8006e5c <cppInit+0x124>
 8006e02:	4817      	ldr	r0, [pc, #92]	; (8006e60 <cppInit+0x128>)
 8006e04:	f7fe f9dc 	bl	80051c0 <_ZN12VelocityCtrl15setVelocityGainEfff>
	//velocity_ctrl.setVelocityGain(1.9842, 22.9078, 0.02079);
	//velocity_ctrl.setOmegaGain(0.5, 5, 0);
	//velocity_ctrl.setOmegaGain(0.05, 7, 0);
	velocity_ctrl.setOmegaGain(0.069793, 0.86816, 0.0014027);
 8006e08:	ed9f 1a16 	vldr	s2, [pc, #88]	; 8006e64 <cppInit+0x12c>
 8006e0c:	eddf 0a16 	vldr	s1, [pc, #88]	; 8006e68 <cppInit+0x130>
 8006e10:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8006e6c <cppInit+0x134>
 8006e14:	4812      	ldr	r0, [pc, #72]	; (8006e60 <cppInit+0x128>)
 8006e16:	f7fe f9ec 	bl	80051f2 <_ZN12VelocityCtrl12setOmegaGainEfff>
	//velocity_ctrl.setOmegaGain(0.12175, 1.0604, 0.002614);
	//velocity_ctrl.setOmegaGain(0.0, 0, 0);


	//encoder.clearDistance();
	odometry.clearPotition();
 8006e1a:	4815      	ldr	r0, [pc, #84]	; (8006e70 <cppInit+0x138>)
 8006e1c:	f7fd fc9c 	bl	8004758 <_ZN8Odometry13clearPotitionEv>

	path_following.init();
 8006e20:	4814      	ldr	r0, [pc, #80]	; (8006e74 <cppInit+0x13c>)
 8006e22:	f7fd fd33 	bl	800488c <_ZN13PathFollowing4initEv>

}
 8006e26:	bf00      	nop
 8006e28:	bd98      	pop	{r3, r4, r7, pc}
 8006e2a:	bf00      	nop
 8006e2c:	200005d4 	.word	0x200005d4
 8006e30:	08018604 	.word	0x08018604
 8006e34:	0801860c 	.word	0x0801860c
 8006e38:	200005f4 	.word	0x200005f4
 8006e3c:	200005d0 	.word	0x200005d0
 8006e40:	200002c4 	.word	0x200002c4
 8006e44:	200005cc 	.word	0x200005cc
 8006e48:	20017d04 	.word	0x20017d04
 8006e4c:	200005e0 	.word	0x200005e0
 8006e50:	20017da0 	.word	0x20017da0
 8006e54:	3cceca68 	.word	0x3cceca68
 8006e58:	4180f06f 	.word	0x4180f06f
 8006e5c:	3fea2d0e 	.word	0x3fea2d0e
 8006e60:	20017d24 	.word	0x20017d24
 8006e64:	3ab7dacd 	.word	0x3ab7dacd
 8006e68:	3f5e3fbc 	.word	0x3f5e3fbc
 8006e6c:	3d8eefa2 	.word	0x3d8eefa2
 8006e70:	20017d60 	.word	0x20017d60
 8006e74:	20024cf8 	.word	0x20024cf8

08006e78 <cppFlip1ms>:

void cppFlip1ms(void)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	af00      	add	r7, sp, #0
	line_sensor.updateSensorValues();
 8006e7c:	4819      	ldr	r0, [pc, #100]	; (8006ee4 <cppFlip1ms+0x6c>)
 8006e7e:	f7fb f9f7 	bl	8002270 <_ZN10LineSensor18updateSensorValuesEv>
	imu.updateValues();
 8006e82:	4819      	ldr	r0, [pc, #100]	; (8006ee8 <cppFlip1ms+0x70>)
 8006e84:	f7fa fe20 	bl	8001ac8 <_ZN3IMU12updateValuesEv>
	encoder.update();
 8006e88:	4818      	ldr	r0, [pc, #96]	; (8006eec <cppFlip1ms+0x74>)
 8006e8a:	f7fa f9b1 	bl	80011f0 <_ZN7Encoder6updateEv>

	line_trace.flip();
 8006e8e:	4818      	ldr	r0, [pc, #96]	; (8006ef0 <cppFlip1ms+0x78>)
 8006e90:	f7fc fbe0 	bl	8003654 <_ZN9LineTrace4flipEv>
	velocity_ctrl.flip();
 8006e94:	4817      	ldr	r0, [pc, #92]	; (8006ef4 <cppFlip1ms+0x7c>)
 8006e96:	f7fe f9c5 	bl	8005224 <_ZN12VelocityCtrl4flipEv>
	odometry.flip();
 8006e9a:	4817      	ldr	r0, [pc, #92]	; (8006ef8 <cppFlip1ms+0x80>)
 8006e9c:	f7fd fc40 	bl	8004720 <_ZN8Odometry4flipEv>
	side_sensor.updateStatus();
 8006ea0:	4816      	ldr	r0, [pc, #88]	; (8006efc <cppFlip1ms+0x84>)
 8006ea2:	f7fd fdfd 	bl	8004aa0 <_ZN10SideSensor12updateStatusEv>

	motor.motorCtrl();
 8006ea6:	4816      	ldr	r0, [pc, #88]	; (8006f00 <cppFlip1ms+0x88>)
 8006ea8:	f7fd fa30 	bl	800430c <_ZN5Motor9motorCtrlEv>

	//logger.storeLog(velocity_ctrl.getCurrentVelocity());
	//logger.storeLog(imu.getOmega());

	static uint16_t twice_cnt;
	twice_cnt++;
 8006eac:	4b15      	ldr	r3, [pc, #84]	; (8006f04 <cppFlip1ms+0x8c>)
 8006eae:	881b      	ldrh	r3, [r3, #0]
 8006eb0:	3301      	adds	r3, #1
 8006eb2:	b29a      	uxth	r2, r3
 8006eb4:	4b13      	ldr	r3, [pc, #76]	; (8006f04 <cppFlip1ms+0x8c>)
 8006eb6:	801a      	strh	r2, [r3, #0]
	if(twice_cnt >= 2){ //2ms
 8006eb8:	4b12      	ldr	r3, [pc, #72]	; (8006f04 <cppFlip1ms+0x8c>)
 8006eba:	881b      	ldrh	r3, [r3, #0]
 8006ebc:	2b01      	cmp	r3, #1
 8006ebe:	d90c      	bls.n	8006eda <cppFlip1ms+0x62>
		sys_ident.inOutputStore(imu.getOmega());
 8006ec0:	4809      	ldr	r0, [pc, #36]	; (8006ee8 <cppFlip1ms+0x70>)
 8006ec2:	f7fa fe59 	bl	8001b78 <_ZN3IMU8getOmegaEv>
 8006ec6:	eef0 7a40 	vmov.f32	s15, s0
 8006eca:	eeb0 0a67 	vmov.f32	s0, s15
 8006ece:	480e      	ldr	r0, [pc, #56]	; (8006f08 <cppFlip1ms+0x90>)
 8006ed0:	f7fd ff48 	bl	8004d64 <_ZN20SystemIdentification13inOutputStoreEf>
		twice_cnt = 0;
 8006ed4:	4b0b      	ldr	r3, [pc, #44]	; (8006f04 <cppFlip1ms+0x8c>)
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	801a      	strh	r2, [r3, #0]

	//mon_cnt = twice_cnt;
	/*
	*/

	encoder.clear();
 8006eda:	4804      	ldr	r0, [pc, #16]	; (8006eec <cppFlip1ms+0x74>)
 8006edc:	f7fa fa72 	bl	80013c4 <_ZN7Encoder5clearEv>

	//Buttery Check
	//power_sensor.updateValues();
	//if(power_sensor.butteryCheck() == true) led.fullColor('R');

}
 8006ee0:	bf00      	nop
 8006ee2:	bd80      	pop	{r7, pc}
 8006ee4:	200002c4 	.word	0x200002c4
 8006ee8:	200005e0 	.word	0x200005e0
 8006eec:	20017d04 	.word	0x20017d04
 8006ef0:	20017da0 	.word	0x20017da0
 8006ef4:	20017d24 	.word	0x20017d24
 8006ef8:	20017d60 	.word	0x20017d60
 8006efc:	200005bc 	.word	0x200005bc
 8006f00:	200005cc 	.word	0x200005cc
 8006f04:	2003c422 	.word	0x2003c422
 8006f08:	20024aec 	.word	0x20024aec

08006f0c <cppFlip100ns>:

void cppFlip100ns(void)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	af00      	add	r7, sp, #0
	line_sensor.storeSensorValues();
 8006f10:	4802      	ldr	r0, [pc, #8]	; (8006f1c <cppFlip100ns+0x10>)
 8006f12:	f7fb f95f 	bl	80021d4 <_ZN10LineSensor17storeSensorValuesEv>
	//line_trace.flip100ns();
}
 8006f16:	bf00      	nop
 8006f18:	bd80      	pop	{r7, pc}
 8006f1a:	bf00      	nop
 8006f1c:	200002c4 	.word	0x200002c4

08006f20 <cppFlip10ms>:

void cppFlip10ms(void)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	af00      	add	r7, sp, #0
	static uint16_t twice_cnt;
	twice_cnt++;
 8006f24:	4b0a      	ldr	r3, [pc, #40]	; (8006f50 <cppFlip10ms+0x30>)
 8006f26:	881b      	ldrh	r3, [r3, #0]
 8006f28:	3301      	adds	r3, #1
 8006f2a:	b29a      	uxth	r2, r3
 8006f2c:	4b08      	ldr	r3, [pc, #32]	; (8006f50 <cppFlip10ms+0x30>)
 8006f2e:	801a      	strh	r2, [r3, #0]
	if(twice_cnt >= 7){ //70ms
 8006f30:	4b07      	ldr	r3, [pc, #28]	; (8006f50 <cppFlip10ms+0x30>)
 8006f32:	881b      	ldrh	r3, [r3, #0]
 8006f34:	2b06      	cmp	r3, #6
 8006f36:	d905      	bls.n	8006f44 <cppFlip10ms+0x24>
		sys_ident.updateMsig();
 8006f38:	4806      	ldr	r0, [pc, #24]	; (8006f54 <cppFlip10ms+0x34>)
 8006f3a:	f7fd ff4f 	bl	8004ddc <_ZN20SystemIdentification10updateMsigEv>
		twice_cnt = 0;
 8006f3e:	4b04      	ldr	r3, [pc, #16]	; (8006f50 <cppFlip10ms+0x30>)
 8006f40:	2200      	movs	r2, #0
 8006f42:	801a      	strh	r2, [r3, #0]
	}

	mon_cnt = twice_cnt;
 8006f44:	4b02      	ldr	r3, [pc, #8]	; (8006f50 <cppFlip10ms+0x30>)
 8006f46:	881a      	ldrh	r2, [r3, #0]
 8006f48:	4b03      	ldr	r3, [pc, #12]	; (8006f58 <cppFlip10ms+0x38>)
 8006f4a:	801a      	strh	r2, [r3, #0]
		path_following.flip();
	}
	velocity_ctrl.setVelocity(path_following.getV(), path_following.getW());
	*/

}
 8006f4c:	bf00      	nop
 8006f4e:	bd80      	pop	{r7, pc}
 8006f50:	2003c424 	.word	0x2003c424
 8006f54:	20024aec 	.word	0x20024aec
 8006f58:	2003c420 	.word	0x2003c420
 8006f5c:	00000000 	.word	0x00000000

08006f60 <cppLoop>:
{
	//side_sensor.updateStatus(gpio_pin);
}

void cppLoop(void)
{
 8006f60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f62:	b087      	sub	sp, #28
 8006f64:	af02      	add	r7, sp, #8
	static int16_t selector;

	static float adj_kp = line_trace.getKp();
 8006f66:	4bbc      	ldr	r3, [pc, #752]	; (8007258 <cppLoop+0x2f8>)
 8006f68:	781b      	ldrb	r3, [r3, #0]
 8006f6a:	f3bf 8f5b 	dmb	ish
 8006f6e:	b2db      	uxtb	r3, r3
 8006f70:	f003 0301 	and.w	r3, r3, #1
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	bf0c      	ite	eq
 8006f78:	2301      	moveq	r3, #1
 8006f7a:	2300      	movne	r3, #0
 8006f7c:	b2db      	uxtb	r3, r3
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d015      	beq.n	8006fae <cppLoop+0x4e>
 8006f82:	48b5      	ldr	r0, [pc, #724]	; (8007258 <cppLoop+0x2f8>)
 8006f84:	f00b fee7 	bl	8012d56 <__cxa_guard_acquire>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	bf14      	ite	ne
 8006f8e:	2301      	movne	r3, #1
 8006f90:	2300      	moveq	r3, #0
 8006f92:	b2db      	uxtb	r3, r3
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d00a      	beq.n	8006fae <cppLoop+0x4e>
 8006f98:	48b0      	ldr	r0, [pc, #704]	; (800725c <cppLoop+0x2fc>)
 8006f9a:	f7fc fac2 	bl	8003522 <_ZN9LineTrace5getKpEv>
 8006f9e:	eef0 7a40 	vmov.f32	s15, s0
 8006fa2:	4baf      	ldr	r3, [pc, #700]	; (8007260 <cppLoop+0x300>)
 8006fa4:	edc3 7a00 	vstr	s15, [r3]
 8006fa8:	48ab      	ldr	r0, [pc, #684]	; (8007258 <cppLoop+0x2f8>)
 8006faa:	f00b fee0 	bl	8012d6e <__cxa_guard_release>
	static float adj_ki= line_trace.getKi();
 8006fae:	4bad      	ldr	r3, [pc, #692]	; (8007264 <cppLoop+0x304>)
 8006fb0:	781b      	ldrb	r3, [r3, #0]
 8006fb2:	f3bf 8f5b 	dmb	ish
 8006fb6:	b2db      	uxtb	r3, r3
 8006fb8:	f003 0301 	and.w	r3, r3, #1
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	bf0c      	ite	eq
 8006fc0:	2301      	moveq	r3, #1
 8006fc2:	2300      	movne	r3, #0
 8006fc4:	b2db      	uxtb	r3, r3
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d015      	beq.n	8006ff6 <cppLoop+0x96>
 8006fca:	48a6      	ldr	r0, [pc, #664]	; (8007264 <cppLoop+0x304>)
 8006fcc:	f00b fec3 	bl	8012d56 <__cxa_guard_acquire>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	bf14      	ite	ne
 8006fd6:	2301      	movne	r3, #1
 8006fd8:	2300      	moveq	r3, #0
 8006fda:	b2db      	uxtb	r3, r3
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d00a      	beq.n	8006ff6 <cppLoop+0x96>
 8006fe0:	489e      	ldr	r0, [pc, #632]	; (800725c <cppLoop+0x2fc>)
 8006fe2:	f7fc faad 	bl	8003540 <_ZN9LineTrace5getKiEv>
 8006fe6:	eef0 7a40 	vmov.f32	s15, s0
 8006fea:	4b9f      	ldr	r3, [pc, #636]	; (8007268 <cppLoop+0x308>)
 8006fec:	edc3 7a00 	vstr	s15, [r3]
 8006ff0:	489c      	ldr	r0, [pc, #624]	; (8007264 <cppLoop+0x304>)
 8006ff2:	f00b febc 	bl	8012d6e <__cxa_guard_release>
	static float adj_kd = line_trace.getKd();
 8006ff6:	4b9d      	ldr	r3, [pc, #628]	; (800726c <cppLoop+0x30c>)
 8006ff8:	781b      	ldrb	r3, [r3, #0]
 8006ffa:	f3bf 8f5b 	dmb	ish
 8006ffe:	b2db      	uxtb	r3, r3
 8007000:	f003 0301 	and.w	r3, r3, #1
 8007004:	2b00      	cmp	r3, #0
 8007006:	bf0c      	ite	eq
 8007008:	2301      	moveq	r3, #1
 800700a:	2300      	movne	r3, #0
 800700c:	b2db      	uxtb	r3, r3
 800700e:	2b00      	cmp	r3, #0
 8007010:	d015      	beq.n	800703e <cppLoop+0xde>
 8007012:	4896      	ldr	r0, [pc, #600]	; (800726c <cppLoop+0x30c>)
 8007014:	f00b fe9f 	bl	8012d56 <__cxa_guard_acquire>
 8007018:	4603      	mov	r3, r0
 800701a:	2b00      	cmp	r3, #0
 800701c:	bf14      	ite	ne
 800701e:	2301      	movne	r3, #1
 8007020:	2300      	moveq	r3, #0
 8007022:	b2db      	uxtb	r3, r3
 8007024:	2b00      	cmp	r3, #0
 8007026:	d00a      	beq.n	800703e <cppLoop+0xde>
 8007028:	488c      	ldr	r0, [pc, #560]	; (800725c <cppLoop+0x2fc>)
 800702a:	f7fc fa98 	bl	800355e <_ZN9LineTrace5getKdEv>
 800702e:	eef0 7a40 	vmov.f32	s15, s0
 8007032:	4b8f      	ldr	r3, [pc, #572]	; (8007270 <cppLoop+0x310>)
 8007034:	edc3 7a00 	vstr	s15, [r3]
 8007038:	488c      	ldr	r0, [pc, #560]	; (800726c <cppLoop+0x30c>)
 800703a:	f00b fe98 	bl	8012d6e <__cxa_guard_release>

	static float adj_velocity = line_trace.getTargetVelocity();
 800703e:	4b8d      	ldr	r3, [pc, #564]	; (8007274 <cppLoop+0x314>)
 8007040:	781b      	ldrb	r3, [r3, #0]
 8007042:	f3bf 8f5b 	dmb	ish
 8007046:	b2db      	uxtb	r3, r3
 8007048:	f003 0301 	and.w	r3, r3, #1
 800704c:	2b00      	cmp	r3, #0
 800704e:	bf0c      	ite	eq
 8007050:	2301      	moveq	r3, #1
 8007052:	2300      	movne	r3, #0
 8007054:	b2db      	uxtb	r3, r3
 8007056:	2b00      	cmp	r3, #0
 8007058:	d015      	beq.n	8007086 <cppLoop+0x126>
 800705a:	4886      	ldr	r0, [pc, #536]	; (8007274 <cppLoop+0x314>)
 800705c:	f00b fe7b 	bl	8012d56 <__cxa_guard_acquire>
 8007060:	4603      	mov	r3, r0
 8007062:	2b00      	cmp	r3, #0
 8007064:	bf14      	ite	ne
 8007066:	2301      	movne	r3, #1
 8007068:	2300      	moveq	r3, #0
 800706a:	b2db      	uxtb	r3, r3
 800706c:	2b00      	cmp	r3, #0
 800706e:	d00a      	beq.n	8007086 <cppLoop+0x126>
 8007070:	487a      	ldr	r0, [pc, #488]	; (800725c <cppLoop+0x2fc>)
 8007072:	f7fc fac0 	bl	80035f6 <_ZN9LineTrace17getTargetVelocityEv>
 8007076:	eef0 7a40 	vmov.f32	s15, s0
 800707a:	4b7f      	ldr	r3, [pc, #508]	; (8007278 <cppLoop+0x318>)
 800707c:	edc3 7a00 	vstr	s15, [r3]
 8007080:	487c      	ldr	r0, [pc, #496]	; (8007274 <cppLoop+0x314>)
 8007082:	f00b fe74 	bl	8012d6e <__cxa_guard_release>
	static float adj_max_velocity = line_trace.getMaxVelocity();
 8007086:	4b7d      	ldr	r3, [pc, #500]	; (800727c <cppLoop+0x31c>)
 8007088:	781b      	ldrb	r3, [r3, #0]
 800708a:	f3bf 8f5b 	dmb	ish
 800708e:	b2db      	uxtb	r3, r3
 8007090:	f003 0301 	and.w	r3, r3, #1
 8007094:	2b00      	cmp	r3, #0
 8007096:	bf0c      	ite	eq
 8007098:	2301      	moveq	r3, #1
 800709a:	2300      	movne	r3, #0
 800709c:	b2db      	uxtb	r3, r3
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d015      	beq.n	80070ce <cppLoop+0x16e>
 80070a2:	4876      	ldr	r0, [pc, #472]	; (800727c <cppLoop+0x31c>)
 80070a4:	f00b fe57 	bl	8012d56 <__cxa_guard_acquire>
 80070a8:	4603      	mov	r3, r0
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	bf14      	ite	ne
 80070ae:	2301      	movne	r3, #1
 80070b0:	2300      	moveq	r3, #0
 80070b2:	b2db      	uxtb	r3, r3
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d00a      	beq.n	80070ce <cppLoop+0x16e>
 80070b8:	4868      	ldr	r0, [pc, #416]	; (800725c <cppLoop+0x2fc>)
 80070ba:	f7fc faab 	bl	8003614 <_ZN9LineTrace14getMaxVelocityEv>
 80070be:	eef0 7a40 	vmov.f32	s15, s0
 80070c2:	4b6f      	ldr	r3, [pc, #444]	; (8007280 <cppLoop+0x320>)
 80070c4:	edc3 7a00 	vstr	s15, [r3]
 80070c8:	486c      	ldr	r0, [pc, #432]	; (800727c <cppLoop+0x31c>)
 80070ca:	f00b fe50 	bl	8012d6e <__cxa_guard_release>
	static float adj_max_velocity2 = line_trace.getMaxVelocity2();
 80070ce:	4b6d      	ldr	r3, [pc, #436]	; (8007284 <cppLoop+0x324>)
 80070d0:	781b      	ldrb	r3, [r3, #0]
 80070d2:	f3bf 8f5b 	dmb	ish
 80070d6:	b2db      	uxtb	r3, r3
 80070d8:	f003 0301 	and.w	r3, r3, #1
 80070dc:	2b00      	cmp	r3, #0
 80070de:	bf0c      	ite	eq
 80070e0:	2301      	moveq	r3, #1
 80070e2:	2300      	movne	r3, #0
 80070e4:	b2db      	uxtb	r3, r3
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d015      	beq.n	8007116 <cppLoop+0x1b6>
 80070ea:	4866      	ldr	r0, [pc, #408]	; (8007284 <cppLoop+0x324>)
 80070ec:	f00b fe33 	bl	8012d56 <__cxa_guard_acquire>
 80070f0:	4603      	mov	r3, r0
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	bf14      	ite	ne
 80070f6:	2301      	movne	r3, #1
 80070f8:	2300      	moveq	r3, #0
 80070fa:	b2db      	uxtb	r3, r3
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d00a      	beq.n	8007116 <cppLoop+0x1b6>
 8007100:	4856      	ldr	r0, [pc, #344]	; (800725c <cppLoop+0x2fc>)
 8007102:	f7fc fa96 	bl	8003632 <_ZN9LineTrace15getMaxVelocity2Ev>
 8007106:	eef0 7a40 	vmov.f32	s15, s0
 800710a:	4b5f      	ldr	r3, [pc, #380]	; (8007288 <cppLoop+0x328>)
 800710c:	edc3 7a00 	vstr	s15, [r3]
 8007110:	485c      	ldr	r0, [pc, #368]	; (8007284 <cppLoop+0x324>)
 8007112:	f00b fe2c 	bl	8012d6e <__cxa_guard_release>

	switch(rotary_switch.getValue()){
 8007116:	485d      	ldr	r0, [pc, #372]	; (800728c <cppLoop+0x32c>)
 8007118:	f7fd fc5c 	bl	80049d4 <_ZN12RotarySwitch8getValueEv>
 800711c:	4603      	mov	r3, r0
 800711e:	2b0f      	cmp	r3, #15
 8007120:	f200 87f2 	bhi.w	8008108 <cppLoop+0x11a8>
 8007124:	a201      	add	r2, pc, #4	; (adr r2, 800712c <cppLoop+0x1cc>)
 8007126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800712a:	bf00      	nop
 800712c:	0800716d 	.word	0x0800716d
 8007130:	080075ad 	.word	0x080075ad
 8007134:	08007641 	.word	0x08007641
 8007138:	08007793 	.word	0x08007793
 800713c:	08007875 	.word	0x08007875
 8007140:	080079c9 	.word	0x080079c9
 8007144:	08007a71 	.word	0x08007a71
 8007148:	08007bf7 	.word	0x08007bf7
 800714c:	08007c21 	.word	0x08007c21
 8007150:	08007c4b 	.word	0x08007c4b
 8007154:	08007d07 	.word	0x08007d07
 8007158:	08007d77 	.word	0x08007d77
 800715c:	08007e13 	.word	0x08007e13
 8007160:	08007f35 	.word	0x08007f35
 8007164:	08007fbb 	.word	0x08007fbb
 8007168:	08008063 	.word	0x08008063
	case 0:
		led.fullColor('W');
 800716c:	2157      	movs	r1, #87	; 0x57
 800716e:	4848      	ldr	r0, [pc, #288]	; (8007290 <cppLoop+0x330>)
 8007170:	f7fa fec4 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 8007174:	f7f9 ff94 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007178:	2100      	movs	r1, #0
 800717a:	2000      	movs	r0, #0
 800717c:	f7f9 ffa0 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf    ", line_trace.getKp()*1000);
 8007180:	4836      	ldr	r0, [pc, #216]	; (800725c <cppLoop+0x2fc>)
 8007182:	f7fc f9ce 	bl	8003522 <_ZN9LineTrace5getKpEv>
 8007186:	eeb0 7a40 	vmov.f32	s14, s0
 800718a:	eddf 7a42 	vldr	s15, [pc, #264]	; 8007294 <cppLoop+0x334>
 800718e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007192:	ee17 0a90 	vmov	r0, s15
 8007196:	f7f9 f9ef 	bl	8000578 <__aeabi_f2d>
 800719a:	4603      	mov	r3, r0
 800719c:	460c      	mov	r4, r1
 800719e:	461a      	mov	r2, r3
 80071a0:	4623      	mov	r3, r4
 80071a2:	483d      	ldr	r0, [pc, #244]	; (8007298 <cppLoop+0x338>)
 80071a4:	f7f9 ffb6 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80071a8:	2101      	movs	r1, #1
 80071aa:	2000      	movs	r0, #0
 80071ac:	f7f9 ff88 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", line_trace.getKi()*100, line_trace.getKd()*10000);
 80071b0:	482a      	ldr	r0, [pc, #168]	; (800725c <cppLoop+0x2fc>)
 80071b2:	f7fc f9c5 	bl	8003540 <_ZN9LineTrace5getKiEv>
 80071b6:	eeb0 7a40 	vmov.f32	s14, s0
 80071ba:	eddf 7a38 	vldr	s15, [pc, #224]	; 800729c <cppLoop+0x33c>
 80071be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071c2:	ee17 0a90 	vmov	r0, s15
 80071c6:	f7f9 f9d7 	bl	8000578 <__aeabi_f2d>
 80071ca:	4605      	mov	r5, r0
 80071cc:	460e      	mov	r6, r1
 80071ce:	4823      	ldr	r0, [pc, #140]	; (800725c <cppLoop+0x2fc>)
 80071d0:	f7fc f9c5 	bl	800355e <_ZN9LineTrace5getKdEv>
 80071d4:	eeb0 7a40 	vmov.f32	s14, s0
 80071d8:	eddf 7a31 	vldr	s15, [pc, #196]	; 80072a0 <cppLoop+0x340>
 80071dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071e0:	ee17 0a90 	vmov	r0, s15
 80071e4:	f7f9 f9c8 	bl	8000578 <__aeabi_f2d>
 80071e8:	4603      	mov	r3, r0
 80071ea:	460c      	mov	r4, r1
 80071ec:	e9cd 3400 	strd	r3, r4, [sp]
 80071f0:	462a      	mov	r2, r5
 80071f2:	4633      	mov	r3, r6
 80071f4:	482b      	ldr	r0, [pc, #172]	; (80072a4 <cppLoop+0x344>)
 80071f6:	f7f9 ff8d 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 80071fa:	482b      	ldr	r0, [pc, #172]	; (80072a8 <cppLoop+0x348>)
 80071fc:	f7fa fe1a 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007200:	4603      	mov	r3, r0
 8007202:	2b08      	cmp	r3, #8
 8007204:	bf0c      	ite	eq
 8007206:	2301      	moveq	r3, #1
 8007208:	2300      	movne	r3, #0
 800720a:	b2db      	uxtb	r3, r3
 800720c:	2b00      	cmp	r3, #0
 800720e:	d04f      	beq.n	80072b0 <cppLoop+0x350>
			led.LR(-1, 1);
 8007210:	2201      	movs	r2, #1
 8007212:	f04f 31ff 	mov.w	r1, #4294967295
 8007216:	481e      	ldr	r0, [pc, #120]	; (8007290 <cppLoop+0x330>)
 8007218:	f7fa ff2c 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(300);
 800721c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007220:	f001 f8b4 	bl	800838c <HAL_Delay>

			selector++;
 8007224:	4b21      	ldr	r3, [pc, #132]	; (80072ac <cppLoop+0x34c>)
 8007226:	f9b3 3000 	ldrsh.w	r3, [r3]
 800722a:	b29b      	uxth	r3, r3
 800722c:	3301      	adds	r3, #1
 800722e:	b29b      	uxth	r3, r3
 8007230:	b21a      	sxth	r2, r3
 8007232:	4b1e      	ldr	r3, [pc, #120]	; (80072ac <cppLoop+0x34c>)
 8007234:	801a      	strh	r2, [r3, #0]
			if(selector >= 3) selector = 0;
 8007236:	4b1d      	ldr	r3, [pc, #116]	; (80072ac <cppLoop+0x34c>)
 8007238:	f9b3 3000 	ldrsh.w	r3, [r3]
 800723c:	2b02      	cmp	r3, #2
 800723e:	dd02      	ble.n	8007246 <cppLoop+0x2e6>
 8007240:	4b1a      	ldr	r3, [pc, #104]	; (80072ac <cppLoop+0x34c>)
 8007242:	2200      	movs	r2, #0
 8007244:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8007246:	2200      	movs	r2, #0
 8007248:	f04f 31ff 	mov.w	r1, #4294967295
 800724c:	4810      	ldr	r0, [pc, #64]	; (8007290 <cppLoop+0x330>)
 800724e:	f7fa ff11 	bl	8002074 <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
			line_trace.setGain(adj_kp, adj_ki, adj_kd);

			led.LR(-1, 0);
		}
		break;
 8007252:	f000 bf5b 	b.w	800810c <cppLoop+0x11ac>
 8007256:	bf00      	nop
 8007258:	2003c42c 	.word	0x2003c42c
 800725c:	20017da0 	.word	0x20017da0
 8007260:	2003c428 	.word	0x2003c428
 8007264:	2003c434 	.word	0x2003c434
 8007268:	2003c430 	.word	0x2003c430
 800726c:	2003c43c 	.word	0x2003c43c
 8007270:	2003c438 	.word	0x2003c438
 8007274:	2003c444 	.word	0x2003c444
 8007278:	2003c440 	.word	0x2003c440
 800727c:	2003c44c 	.word	0x2003c44c
 8007280:	2003c448 	.word	0x2003c448
 8007284:	2003c454 	.word	0x2003c454
 8007288:	2003c450 	.word	0x2003c450
 800728c:	200005c8 	.word	0x200005c8
 8007290:	200005d0 	.word	0x200005d0
 8007294:	447a0000 	.word	0x447a0000
 8007298:	08018610 	.word	0x08018610
 800729c:	42c80000 	.word	0x42c80000
 80072a0:	461c4000 	.word	0x461c4000
 80072a4:	0801861c 	.word	0x0801861c
 80072a8:	200005c4 	.word	0x200005c4
 80072ac:	2003c426 	.word	0x2003c426
		else if(joy_stick.getValue() == JOY_R){
 80072b0:	48b3      	ldr	r0, [pc, #716]	; (8007580 <cppLoop+0x620>)
 80072b2:	f7fa fdbf 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 80072b6:	4603      	mov	r3, r0
 80072b8:	2b10      	cmp	r3, #16
 80072ba:	bf0c      	ite	eq
 80072bc:	2301      	moveq	r3, #1
 80072be:	2300      	movne	r3, #0
 80072c0:	b2db      	uxtb	r3, r3
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d059      	beq.n	800737a <cppLoop+0x41a>
			led.LR(-1, 1);
 80072c6:	2201      	movs	r2, #1
 80072c8:	f04f 31ff 	mov.w	r1, #4294967295
 80072cc:	48ad      	ldr	r0, [pc, #692]	; (8007584 <cppLoop+0x624>)
 80072ce:	f7fa fed1 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(100);
 80072d2:	2064      	movs	r0, #100	; 0x64
 80072d4:	f001 f85a 	bl	800838c <HAL_Delay>
			if(selector == 0){
 80072d8:	4bab      	ldr	r3, [pc, #684]	; (8007588 <cppLoop+0x628>)
 80072da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d113      	bne.n	800730a <cppLoop+0x3aa>
				adj_kp = adj_kp + 0.00001;
 80072e2:	4baa      	ldr	r3, [pc, #680]	; (800758c <cppLoop+0x62c>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4618      	mov	r0, r3
 80072e8:	f7f9 f946 	bl	8000578 <__aeabi_f2d>
 80072ec:	a39e      	add	r3, pc, #632	; (adr r3, 8007568 <cppLoop+0x608>)
 80072ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072f2:	f7f8 ffe3 	bl	80002bc <__adddf3>
 80072f6:	4603      	mov	r3, r0
 80072f8:	460c      	mov	r4, r1
 80072fa:	4618      	mov	r0, r3
 80072fc:	4621      	mov	r1, r4
 80072fe:	f7f9 fc8b 	bl	8000c18 <__aeabi_d2f>
 8007302:	4602      	mov	r2, r0
 8007304:	4ba1      	ldr	r3, [pc, #644]	; (800758c <cppLoop+0x62c>)
 8007306:	601a      	str	r2, [r3, #0]
 8007308:	e02b      	b.n	8007362 <cppLoop+0x402>
			else if(selector == 1){
 800730a:	4b9f      	ldr	r3, [pc, #636]	; (8007588 <cppLoop+0x628>)
 800730c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007310:	2b01      	cmp	r3, #1
 8007312:	d113      	bne.n	800733c <cppLoop+0x3dc>
				adj_ki = adj_ki + 0.0001;
 8007314:	4b9e      	ldr	r3, [pc, #632]	; (8007590 <cppLoop+0x630>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4618      	mov	r0, r3
 800731a:	f7f9 f92d 	bl	8000578 <__aeabi_f2d>
 800731e:	a394      	add	r3, pc, #592	; (adr r3, 8007570 <cppLoop+0x610>)
 8007320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007324:	f7f8 ffca 	bl	80002bc <__adddf3>
 8007328:	4603      	mov	r3, r0
 800732a:	460c      	mov	r4, r1
 800732c:	4618      	mov	r0, r3
 800732e:	4621      	mov	r1, r4
 8007330:	f7f9 fc72 	bl	8000c18 <__aeabi_d2f>
 8007334:	4602      	mov	r2, r0
 8007336:	4b96      	ldr	r3, [pc, #600]	; (8007590 <cppLoop+0x630>)
 8007338:	601a      	str	r2, [r3, #0]
 800733a:	e012      	b.n	8007362 <cppLoop+0x402>
				adj_kd = adj_kd + 0.000001;
 800733c:	4b95      	ldr	r3, [pc, #596]	; (8007594 <cppLoop+0x634>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4618      	mov	r0, r3
 8007342:	f7f9 f919 	bl	8000578 <__aeabi_f2d>
 8007346:	a38c      	add	r3, pc, #560	; (adr r3, 8007578 <cppLoop+0x618>)
 8007348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800734c:	f7f8 ffb6 	bl	80002bc <__adddf3>
 8007350:	4603      	mov	r3, r0
 8007352:	460c      	mov	r4, r1
 8007354:	4618      	mov	r0, r3
 8007356:	4621      	mov	r1, r4
 8007358:	f7f9 fc5e 	bl	8000c18 <__aeabi_d2f>
 800735c:	4602      	mov	r2, r0
 800735e:	4b8d      	ldr	r3, [pc, #564]	; (8007594 <cppLoop+0x634>)
 8007360:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8007362:	2152      	movs	r1, #82	; 0x52
 8007364:	4887      	ldr	r0, [pc, #540]	; (8007584 <cppLoop+0x624>)
 8007366:	f7fa fdc9 	bl	8001efc <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 800736a:	2200      	movs	r2, #0
 800736c:	f04f 31ff 	mov.w	r1, #4294967295
 8007370:	4884      	ldr	r0, [pc, #528]	; (8007584 <cppLoop+0x624>)
 8007372:	f7fa fe7f 	bl	8002074 <_ZN3LED2LREaa>
		break;
 8007376:	f000 bec9 	b.w	800810c <cppLoop+0x11ac>
		else if(joy_stick.getValue() == JOY_L){
 800737a:	4881      	ldr	r0, [pc, #516]	; (8007580 <cppLoop+0x620>)
 800737c:	f7fa fd5a 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007380:	4603      	mov	r3, r0
 8007382:	2b01      	cmp	r3, #1
 8007384:	bf0c      	ite	eq
 8007386:	2301      	moveq	r3, #1
 8007388:	2300      	movne	r3, #0
 800738a:	b2db      	uxtb	r3, r3
 800738c:	2b00      	cmp	r3, #0
 800738e:	d059      	beq.n	8007444 <cppLoop+0x4e4>
			led.LR(-1, 1);
 8007390:	2201      	movs	r2, #1
 8007392:	f04f 31ff 	mov.w	r1, #4294967295
 8007396:	487b      	ldr	r0, [pc, #492]	; (8007584 <cppLoop+0x624>)
 8007398:	f7fa fe6c 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(100);
 800739c:	2064      	movs	r0, #100	; 0x64
 800739e:	f000 fff5 	bl	800838c <HAL_Delay>
			if(selector == 0){
 80073a2:	4b79      	ldr	r3, [pc, #484]	; (8007588 <cppLoop+0x628>)
 80073a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d113      	bne.n	80073d4 <cppLoop+0x474>
				adj_kp = adj_kp - 0.00001;
 80073ac:	4b77      	ldr	r3, [pc, #476]	; (800758c <cppLoop+0x62c>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4618      	mov	r0, r3
 80073b2:	f7f9 f8e1 	bl	8000578 <__aeabi_f2d>
 80073b6:	a36c      	add	r3, pc, #432	; (adr r3, 8007568 <cppLoop+0x608>)
 80073b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073bc:	f7f8 ff7c 	bl	80002b8 <__aeabi_dsub>
 80073c0:	4603      	mov	r3, r0
 80073c2:	460c      	mov	r4, r1
 80073c4:	4618      	mov	r0, r3
 80073c6:	4621      	mov	r1, r4
 80073c8:	f7f9 fc26 	bl	8000c18 <__aeabi_d2f>
 80073cc:	4602      	mov	r2, r0
 80073ce:	4b6f      	ldr	r3, [pc, #444]	; (800758c <cppLoop+0x62c>)
 80073d0:	601a      	str	r2, [r3, #0]
 80073d2:	e02b      	b.n	800742c <cppLoop+0x4cc>
			else if(selector == 1){
 80073d4:	4b6c      	ldr	r3, [pc, #432]	; (8007588 <cppLoop+0x628>)
 80073d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80073da:	2b01      	cmp	r3, #1
 80073dc:	d113      	bne.n	8007406 <cppLoop+0x4a6>
				adj_ki = adj_ki - 0.0001;
 80073de:	4b6c      	ldr	r3, [pc, #432]	; (8007590 <cppLoop+0x630>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4618      	mov	r0, r3
 80073e4:	f7f9 f8c8 	bl	8000578 <__aeabi_f2d>
 80073e8:	a361      	add	r3, pc, #388	; (adr r3, 8007570 <cppLoop+0x610>)
 80073ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ee:	f7f8 ff63 	bl	80002b8 <__aeabi_dsub>
 80073f2:	4603      	mov	r3, r0
 80073f4:	460c      	mov	r4, r1
 80073f6:	4618      	mov	r0, r3
 80073f8:	4621      	mov	r1, r4
 80073fa:	f7f9 fc0d 	bl	8000c18 <__aeabi_d2f>
 80073fe:	4602      	mov	r2, r0
 8007400:	4b63      	ldr	r3, [pc, #396]	; (8007590 <cppLoop+0x630>)
 8007402:	601a      	str	r2, [r3, #0]
 8007404:	e012      	b.n	800742c <cppLoop+0x4cc>
				adj_kd = adj_kd - 0.000001;
 8007406:	4b63      	ldr	r3, [pc, #396]	; (8007594 <cppLoop+0x634>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	4618      	mov	r0, r3
 800740c:	f7f9 f8b4 	bl	8000578 <__aeabi_f2d>
 8007410:	a359      	add	r3, pc, #356	; (adr r3, 8007578 <cppLoop+0x618>)
 8007412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007416:	f7f8 ff4f 	bl	80002b8 <__aeabi_dsub>
 800741a:	4603      	mov	r3, r0
 800741c:	460c      	mov	r4, r1
 800741e:	4618      	mov	r0, r3
 8007420:	4621      	mov	r1, r4
 8007422:	f7f9 fbf9 	bl	8000c18 <__aeabi_d2f>
 8007426:	4602      	mov	r2, r0
 8007428:	4b5a      	ldr	r3, [pc, #360]	; (8007594 <cppLoop+0x634>)
 800742a:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 800742c:	2152      	movs	r1, #82	; 0x52
 800742e:	4855      	ldr	r0, [pc, #340]	; (8007584 <cppLoop+0x624>)
 8007430:	f7fa fd64 	bl	8001efc <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8007434:	2200      	movs	r2, #0
 8007436:	f04f 31ff 	mov.w	r1, #4294967295
 800743a:	4852      	ldr	r0, [pc, #328]	; (8007584 <cppLoop+0x624>)
 800743c:	f7fa fe1a 	bl	8002074 <_ZN3LED2LREaa>
		break;
 8007440:	f000 be64 	b.w	800810c <cppLoop+0x11ac>
		else if(joy_stick.getValue() == JOY_D){
 8007444:	484e      	ldr	r0, [pc, #312]	; (8007580 <cppLoop+0x620>)
 8007446:	f7fa fcf5 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 800744a:	4603      	mov	r3, r0
 800744c:	2b04      	cmp	r3, #4
 800744e:	bf0c      	ite	eq
 8007450:	2301      	moveq	r3, #1
 8007452:	2300      	movne	r3, #0
 8007454:	b2db      	uxtb	r3, r3
 8007456:	2b00      	cmp	r3, #0
 8007458:	d03d      	beq.n	80074d6 <cppLoop+0x576>
			led.LR(-1, 1);
 800745a:	2201      	movs	r2, #1
 800745c:	f04f 31ff 	mov.w	r1, #4294967295
 8007460:	4848      	ldr	r0, [pc, #288]	; (8007584 <cppLoop+0x624>)
 8007462:	f7fa fe07 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8007466:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800746a:	f000 ff8f 	bl	800838c <HAL_Delay>
			sd_read_array_float("PARAMS", "KP.TXT", 1, &temp_kp);
 800746e:	f107 030c 	add.w	r3, r7, #12
 8007472:	2201      	movs	r2, #1
 8007474:	4948      	ldr	r1, [pc, #288]	; (8007598 <cppLoop+0x638>)
 8007476:	4849      	ldr	r0, [pc, #292]	; (800759c <cppLoop+0x63c>)
 8007478:	f7fa f92a 	bl	80016d0 <sd_read_array_float>
			sd_read_array_float("PARAMS", "KI.TXT", 1, &temp_ki);
 800747c:	f107 0308 	add.w	r3, r7, #8
 8007480:	2201      	movs	r2, #1
 8007482:	4947      	ldr	r1, [pc, #284]	; (80075a0 <cppLoop+0x640>)
 8007484:	4845      	ldr	r0, [pc, #276]	; (800759c <cppLoop+0x63c>)
 8007486:	f7fa f923 	bl	80016d0 <sd_read_array_float>
			sd_read_array_float("PARAMS", "KD.TXT", 1, &temp_kd);
 800748a:	1d3b      	adds	r3, r7, #4
 800748c:	2201      	movs	r2, #1
 800748e:	4945      	ldr	r1, [pc, #276]	; (80075a4 <cppLoop+0x644>)
 8007490:	4842      	ldr	r0, [pc, #264]	; (800759c <cppLoop+0x63c>)
 8007492:	f7fa f91d 	bl	80016d0 <sd_read_array_float>
			line_trace.setGain(temp_kp, temp_ki, temp_kd);
 8007496:	edd7 7a03 	vldr	s15, [r7, #12]
 800749a:	ed97 7a02 	vldr	s14, [r7, #8]
 800749e:	edd7 6a01 	vldr	s13, [r7, #4]
 80074a2:	eeb0 1a66 	vmov.f32	s2, s13
 80074a6:	eef0 0a47 	vmov.f32	s1, s14
 80074aa:	eeb0 0a67 	vmov.f32	s0, s15
 80074ae:	483e      	ldr	r0, [pc, #248]	; (80075a8 <cppLoop+0x648>)
 80074b0:	f7fc f81e 	bl	80034f0 <_ZN9LineTrace7setGainEfff>
			adj_kp = temp_kp;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	4a35      	ldr	r2, [pc, #212]	; (800758c <cppLoop+0x62c>)
 80074b8:	6013      	str	r3, [r2, #0]
			adj_ki = temp_kp;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	4a34      	ldr	r2, [pc, #208]	; (8007590 <cppLoop+0x630>)
 80074be:	6013      	str	r3, [r2, #0]
			adj_kd = temp_kp;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	4a34      	ldr	r2, [pc, #208]	; (8007594 <cppLoop+0x634>)
 80074c4:	6013      	str	r3, [r2, #0]
			led.LR(-1, 0);
 80074c6:	2200      	movs	r2, #0
 80074c8:	f04f 31ff 	mov.w	r1, #4294967295
 80074cc:	482d      	ldr	r0, [pc, #180]	; (8007584 <cppLoop+0x624>)
 80074ce:	f7fa fdd1 	bl	8002074 <_ZN3LED2LREaa>
		break;
 80074d2:	f000 be1b 	b.w	800810c <cppLoop+0x11ac>
		else if(joy_stick.getValue() == JOY_C){
 80074d6:	482a      	ldr	r0, [pc, #168]	; (8007580 <cppLoop+0x620>)
 80074d8:	f7fa fcac 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 80074dc:	4603      	mov	r3, r0
 80074de:	2b02      	cmp	r3, #2
 80074e0:	bf0c      	ite	eq
 80074e2:	2301      	moveq	r3, #1
 80074e4:	2300      	movne	r3, #0
 80074e6:	b2db      	uxtb	r3, r3
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	f000 860f 	beq.w	800810c <cppLoop+0x11ac>
			led.LR(-1, 1);
 80074ee:	2201      	movs	r2, #1
 80074f0:	f04f 31ff 	mov.w	r1, #4294967295
 80074f4:	4823      	ldr	r0, [pc, #140]	; (8007584 <cppLoop+0x624>)
 80074f6:	f7fa fdbd 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(300);
 80074fa:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80074fe:	f000 ff45 	bl	800838c <HAL_Delay>
			sd_write_array_float("PARAMS", "KP.TXT", 1, &adj_kp, OVER_WRITE);
 8007502:	2300      	movs	r3, #0
 8007504:	9300      	str	r3, [sp, #0]
 8007506:	4b21      	ldr	r3, [pc, #132]	; (800758c <cppLoop+0x62c>)
 8007508:	2201      	movs	r2, #1
 800750a:	4923      	ldr	r1, [pc, #140]	; (8007598 <cppLoop+0x638>)
 800750c:	4823      	ldr	r0, [pc, #140]	; (800759c <cppLoop+0x63c>)
 800750e:	f7fa f879 	bl	8001604 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KI.TXT", 1, &adj_ki, OVER_WRITE);
 8007512:	2300      	movs	r3, #0
 8007514:	9300      	str	r3, [sp, #0]
 8007516:	4b1e      	ldr	r3, [pc, #120]	; (8007590 <cppLoop+0x630>)
 8007518:	2201      	movs	r2, #1
 800751a:	4921      	ldr	r1, [pc, #132]	; (80075a0 <cppLoop+0x640>)
 800751c:	481f      	ldr	r0, [pc, #124]	; (800759c <cppLoop+0x63c>)
 800751e:	f7fa f871 	bl	8001604 <sd_write_array_float>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
 8007522:	2300      	movs	r3, #0
 8007524:	9300      	str	r3, [sp, #0]
 8007526:	4b1b      	ldr	r3, [pc, #108]	; (8007594 <cppLoop+0x634>)
 8007528:	2201      	movs	r2, #1
 800752a:	491e      	ldr	r1, [pc, #120]	; (80075a4 <cppLoop+0x644>)
 800752c:	481b      	ldr	r0, [pc, #108]	; (800759c <cppLoop+0x63c>)
 800752e:	f7fa f869 	bl	8001604 <sd_write_array_float>
			line_trace.setGain(adj_kp, adj_ki, adj_kd);
 8007532:	4b16      	ldr	r3, [pc, #88]	; (800758c <cppLoop+0x62c>)
 8007534:	edd3 7a00 	vldr	s15, [r3]
 8007538:	4b15      	ldr	r3, [pc, #84]	; (8007590 <cppLoop+0x630>)
 800753a:	ed93 7a00 	vldr	s14, [r3]
 800753e:	4b15      	ldr	r3, [pc, #84]	; (8007594 <cppLoop+0x634>)
 8007540:	edd3 6a00 	vldr	s13, [r3]
 8007544:	eeb0 1a66 	vmov.f32	s2, s13
 8007548:	eef0 0a47 	vmov.f32	s1, s14
 800754c:	eeb0 0a67 	vmov.f32	s0, s15
 8007550:	4815      	ldr	r0, [pc, #84]	; (80075a8 <cppLoop+0x648>)
 8007552:	f7fb ffcd 	bl	80034f0 <_ZN9LineTrace7setGainEfff>
			led.LR(-1, 0);
 8007556:	2200      	movs	r2, #0
 8007558:	f04f 31ff 	mov.w	r1, #4294967295
 800755c:	4809      	ldr	r0, [pc, #36]	; (8007584 <cppLoop+0x624>)
 800755e:	f7fa fd89 	bl	8002074 <_ZN3LED2LREaa>
		break;
 8007562:	f000 bdd3 	b.w	800810c <cppLoop+0x11ac>
 8007566:	bf00      	nop
 8007568:	88e368f1 	.word	0x88e368f1
 800756c:	3ee4f8b5 	.word	0x3ee4f8b5
 8007570:	eb1c432d 	.word	0xeb1c432d
 8007574:	3f1a36e2 	.word	0x3f1a36e2
 8007578:	a0b5ed8d 	.word	0xa0b5ed8d
 800757c:	3eb0c6f7 	.word	0x3eb0c6f7
 8007580:	200005c4 	.word	0x200005c4
 8007584:	200005d0 	.word	0x200005d0
 8007588:	2003c426 	.word	0x2003c426
 800758c:	2003c428 	.word	0x2003c428
 8007590:	2003c430 	.word	0x2003c430
 8007594:	2003c438 	.word	0x2003c438
 8007598:	0801862c 	.word	0x0801862c
 800759c:	08018634 	.word	0x08018634
 80075a0:	0801863c 	.word	0x0801863c
 80075a4:	08018644 	.word	0x08018644
 80075a8:	20017da0 	.word	0x20017da0

	case 1:
		led.fullColor('C');
 80075ac:	2143      	movs	r1, #67	; 0x43
 80075ae:	48a6      	ldr	r0, [pc, #664]	; (8007848 <cppLoop+0x8e8>)
 80075b0:	f7fa fca4 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 80075b4:	f7f9 fd74 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80075b8:	2100      	movs	r1, #0
 80075ba:	2000      	movs	r0, #0
 80075bc:	f7f9 fd80 	bl	80010c0 <lcd_locate>
		lcd_printf("FirstRun");
 80075c0:	48a2      	ldr	r0, [pc, #648]	; (800784c <cppLoop+0x8ec>)
 80075c2:	f7f9 fda7 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80075c6:	2101      	movs	r1, #1
 80075c8:	2000      	movs	r0, #0
 80075ca:	f7f9 fd79 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_velocity);
 80075ce:	4ba0      	ldr	r3, [pc, #640]	; (8007850 <cppLoop+0x8f0>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4618      	mov	r0, r3
 80075d4:	f7f8 ffd0 	bl	8000578 <__aeabi_f2d>
 80075d8:	4603      	mov	r3, r0
 80075da:	460c      	mov	r4, r1
 80075dc:	461a      	mov	r2, r3
 80075de:	4623      	mov	r3, r4
 80075e0:	489c      	ldr	r0, [pc, #624]	; (8007854 <cppLoop+0x8f4>)
 80075e2:	f7f9 fd97 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80075e6:	489c      	ldr	r0, [pc, #624]	; (8007858 <cppLoop+0x8f8>)
 80075e8:	f7fa fc24 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 80075ec:	4603      	mov	r3, r0
 80075ee:	2b02      	cmp	r3, #2
 80075f0:	bf0c      	ite	eq
 80075f2:	2301      	moveq	r3, #1
 80075f4:	2300      	movne	r3, #0
 80075f6:	b2db      	uxtb	r3, r3
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	f000 8589 	beq.w	8008110 <cppLoop+0x11b0>
			HAL_Delay(500);
 80075fe:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007602:	f000 fec3 	bl	800838c <HAL_Delay>

			line_trace.setTargetVelocity(adj_velocity);
 8007606:	4b92      	ldr	r3, [pc, #584]	; (8007850 <cppLoop+0x8f0>)
 8007608:	edd3 7a00 	vldr	s15, [r3]
 800760c:	eeb0 0a67 	vmov.f32	s0, s15
 8007610:	4892      	ldr	r0, [pc, #584]	; (800785c <cppLoop+0x8fc>)
 8007612:	f7fb ffc2 	bl	800359a <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(1, -1);
 8007616:	f04f 32ff 	mov.w	r2, #4294967295
 800761a:	2101      	movs	r1, #1
 800761c:	488a      	ldr	r0, [pc, #552]	; (8007848 <cppLoop+0x8e8>)
 800761e:	f7fa fd29 	bl	8002074 <_ZN3LED2LREaa>

			line_trace.setMode(FIRST_RUNNING);
 8007622:	2100      	movs	r1, #0
 8007624:	488d      	ldr	r0, [pc, #564]	; (800785c <cppLoop+0x8fc>)
 8007626:	f7fc fa75 	bl	8003b14 <_ZN9LineTrace7setModeEs>
			line_trace.running();
 800762a:	488c      	ldr	r0, [pc, #560]	; (800785c <cppLoop+0x8fc>)
 800762c:	f7fc f974 	bl	8003918 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 8007630:	f04f 32ff 	mov.w	r2, #4294967295
 8007634:	2100      	movs	r1, #0
 8007636:	4884      	ldr	r0, [pc, #528]	; (8007848 <cppLoop+0x8e8>)
 8007638:	f7fa fd1c 	bl	8002074 <_ZN3LED2LREaa>
		}

		break;
 800763c:	f000 bd68 	b.w	8008110 <cppLoop+0x11b0>

	case 2:
		led.fullColor('B');
 8007640:	2142      	movs	r1, #66	; 0x42
 8007642:	4881      	ldr	r0, [pc, #516]	; (8007848 <cppLoop+0x8e8>)
 8007644:	f7fa fc5a 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 8007648:	f7f9 fd2a 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800764c:	2100      	movs	r1, #0
 800764e:	2000      	movs	r0, #0
 8007650:	f7f9 fd36 	bl	80010c0 <lcd_locate>
		lcd_printf("FirstRun");
 8007654:	487d      	ldr	r0, [pc, #500]	; (800784c <cppLoop+0x8ec>)
 8007656:	f7f9 fd5d 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800765a:	2101      	movs	r1, #1
 800765c:	2000      	movs	r0, #0
 800765e:	f7f9 fd2f 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", adj_velocity);
 8007662:	4b7b      	ldr	r3, [pc, #492]	; (8007850 <cppLoop+0x8f0>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4618      	mov	r0, r3
 8007668:	f7f8 ff86 	bl	8000578 <__aeabi_f2d>
 800766c:	4603      	mov	r3, r0
 800766e:	460c      	mov	r4, r1
 8007670:	461a      	mov	r2, r3
 8007672:	4623      	mov	r3, r4
 8007674:	487a      	ldr	r0, [pc, #488]	; (8007860 <cppLoop+0x900>)
 8007676:	f7f9 fd4d 	bl	8001114 <lcd_printf>


		if(joy_stick.getValue() == JOY_R){
 800767a:	4877      	ldr	r0, [pc, #476]	; (8007858 <cppLoop+0x8f8>)
 800767c:	f7fa fbda 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007680:	4603      	mov	r3, r0
 8007682:	2b10      	cmp	r3, #16
 8007684:	bf0c      	ite	eq
 8007686:	2301      	moveq	r3, #1
 8007688:	2300      	movne	r3, #0
 800768a:	b2db      	uxtb	r3, r3
 800768c:	2b00      	cmp	r3, #0
 800768e:	d023      	beq.n	80076d8 <cppLoop+0x778>
			led.LR(-1, 1);
 8007690:	2201      	movs	r2, #1
 8007692:	f04f 31ff 	mov.w	r1, #4294967295
 8007696:	486c      	ldr	r0, [pc, #432]	; (8007848 <cppLoop+0x8e8>)
 8007698:	f7fa fcec 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(100);
 800769c:	2064      	movs	r0, #100	; 0x64
 800769e:	f000 fe75 	bl	800838c <HAL_Delay>

			adj_velocity = adj_velocity + 0.1;
 80076a2:	4b6b      	ldr	r3, [pc, #428]	; (8007850 <cppLoop+0x8f0>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4618      	mov	r0, r3
 80076a8:	f7f8 ff66 	bl	8000578 <__aeabi_f2d>
 80076ac:	a364      	add	r3, pc, #400	; (adr r3, 8007840 <cppLoop+0x8e0>)
 80076ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076b2:	f7f8 fe03 	bl	80002bc <__adddf3>
 80076b6:	4603      	mov	r3, r0
 80076b8:	460c      	mov	r4, r1
 80076ba:	4618      	mov	r0, r3
 80076bc:	4621      	mov	r1, r4
 80076be:	f7f9 faab 	bl	8000c18 <__aeabi_d2f>
 80076c2:	4602      	mov	r2, r0
 80076c4:	4b62      	ldr	r3, [pc, #392]	; (8007850 <cppLoop+0x8f0>)
 80076c6:	601a      	str	r2, [r3, #0]

			led.LR(-1, 0);
 80076c8:	2200      	movs	r2, #0
 80076ca:	f04f 31ff 	mov.w	r1, #4294967295
 80076ce:	485e      	ldr	r0, [pc, #376]	; (8007848 <cppLoop+0x8e8>)
 80076d0:	f7fa fcd0 	bl	8002074 <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "TARVEL1.TXT", 1, &adj_velocity, OVER_WRITE);
			line_trace.setTargetVelocity(adj_velocity);

			led.LR(-1, 0);
		}
		break;
 80076d4:	f000 bd1e 	b.w	8008114 <cppLoop+0x11b4>
		else if(joy_stick.getValue() == JOY_L){
 80076d8:	485f      	ldr	r0, [pc, #380]	; (8007858 <cppLoop+0x8f8>)
 80076da:	f7fa fbab 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 80076de:	4603      	mov	r3, r0
 80076e0:	2b01      	cmp	r3, #1
 80076e2:	bf0c      	ite	eq
 80076e4:	2301      	moveq	r3, #1
 80076e6:	2300      	movne	r3, #0
 80076e8:	b2db      	uxtb	r3, r3
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d023      	beq.n	8007736 <cppLoop+0x7d6>
			led.LR(-1, 1);
 80076ee:	2201      	movs	r2, #1
 80076f0:	f04f 31ff 	mov.w	r1, #4294967295
 80076f4:	4854      	ldr	r0, [pc, #336]	; (8007848 <cppLoop+0x8e8>)
 80076f6:	f7fa fcbd 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(100);
 80076fa:	2064      	movs	r0, #100	; 0x64
 80076fc:	f000 fe46 	bl	800838c <HAL_Delay>
			adj_velocity = adj_velocity - 0.1;
 8007700:	4b53      	ldr	r3, [pc, #332]	; (8007850 <cppLoop+0x8f0>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	4618      	mov	r0, r3
 8007706:	f7f8 ff37 	bl	8000578 <__aeabi_f2d>
 800770a:	a34d      	add	r3, pc, #308	; (adr r3, 8007840 <cppLoop+0x8e0>)
 800770c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007710:	f7f8 fdd2 	bl	80002b8 <__aeabi_dsub>
 8007714:	4603      	mov	r3, r0
 8007716:	460c      	mov	r4, r1
 8007718:	4618      	mov	r0, r3
 800771a:	4621      	mov	r1, r4
 800771c:	f7f9 fa7c 	bl	8000c18 <__aeabi_d2f>
 8007720:	4602      	mov	r2, r0
 8007722:	4b4b      	ldr	r3, [pc, #300]	; (8007850 <cppLoop+0x8f0>)
 8007724:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8007726:	2200      	movs	r2, #0
 8007728:	f04f 31ff 	mov.w	r1, #4294967295
 800772c:	4846      	ldr	r0, [pc, #280]	; (8007848 <cppLoop+0x8e8>)
 800772e:	f7fa fca1 	bl	8002074 <_ZN3LED2LREaa>
		break;
 8007732:	f000 bcef 	b.w	8008114 <cppLoop+0x11b4>
		else if(joy_stick.getValue() == JOY_C){
 8007736:	4848      	ldr	r0, [pc, #288]	; (8007858 <cppLoop+0x8f8>)
 8007738:	f7fa fb7c 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 800773c:	4603      	mov	r3, r0
 800773e:	2b02      	cmp	r3, #2
 8007740:	bf0c      	ite	eq
 8007742:	2301      	moveq	r3, #1
 8007744:	2300      	movne	r3, #0
 8007746:	b2db      	uxtb	r3, r3
 8007748:	2b00      	cmp	r3, #0
 800774a:	f000 84e3 	beq.w	8008114 <cppLoop+0x11b4>
			led.LR(-1, 1);
 800774e:	2201      	movs	r2, #1
 8007750:	f04f 31ff 	mov.w	r1, #4294967295
 8007754:	483c      	ldr	r0, [pc, #240]	; (8007848 <cppLoop+0x8e8>)
 8007756:	f7fa fc8d 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(300);
 800775a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800775e:	f000 fe15 	bl	800838c <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL1.TXT", 1, &adj_velocity, OVER_WRITE);
 8007762:	2300      	movs	r3, #0
 8007764:	9300      	str	r3, [sp, #0]
 8007766:	4b3a      	ldr	r3, [pc, #232]	; (8007850 <cppLoop+0x8f0>)
 8007768:	2201      	movs	r2, #1
 800776a:	493e      	ldr	r1, [pc, #248]	; (8007864 <cppLoop+0x904>)
 800776c:	483e      	ldr	r0, [pc, #248]	; (8007868 <cppLoop+0x908>)
 800776e:	f7f9 ff49 	bl	8001604 <sd_write_array_float>
			line_trace.setTargetVelocity(adj_velocity);
 8007772:	4b37      	ldr	r3, [pc, #220]	; (8007850 <cppLoop+0x8f0>)
 8007774:	edd3 7a00 	vldr	s15, [r3]
 8007778:	eeb0 0a67 	vmov.f32	s0, s15
 800777c:	4837      	ldr	r0, [pc, #220]	; (800785c <cppLoop+0x8fc>)
 800777e:	f7fb ff0c 	bl	800359a <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(-1, 0);
 8007782:	2200      	movs	r2, #0
 8007784:	f04f 31ff 	mov.w	r1, #4294967295
 8007788:	482f      	ldr	r0, [pc, #188]	; (8007848 <cppLoop+0x8e8>)
 800778a:	f7fa fc73 	bl	8002074 <_ZN3LED2LREaa>
		break;
 800778e:	f000 bcc1 	b.w	8008114 <cppLoop+0x11b4>

	case 3:
		led.fullColor('Y');
 8007792:	2159      	movs	r1, #89	; 0x59
 8007794:	482c      	ldr	r0, [pc, #176]	; (8007848 <cppLoop+0x8e8>)
 8007796:	f7fa fbb1 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 800779a:	f7f9 fc81 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800779e:	2100      	movs	r1, #0
 80077a0:	2000      	movs	r0, #0
 80077a2:	f7f9 fc8d 	bl	80010c0 <lcd_locate>
		lcd_printf("SeconRun");
 80077a6:	4831      	ldr	r0, [pc, #196]	; (800786c <cppLoop+0x90c>)
 80077a8:	f7f9 fcb4 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80077ac:	2101      	movs	r1, #1
 80077ae:	2000      	movs	r0, #0
 80077b0:	f7f9 fc86 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity);
 80077b4:	4b2e      	ldr	r3, [pc, #184]	; (8007870 <cppLoop+0x910>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4618      	mov	r0, r3
 80077ba:	f7f8 fedd 	bl	8000578 <__aeabi_f2d>
 80077be:	4603      	mov	r3, r0
 80077c0:	460c      	mov	r4, r1
 80077c2:	461a      	mov	r2, r3
 80077c4:	4623      	mov	r3, r4
 80077c6:	4823      	ldr	r0, [pc, #140]	; (8007854 <cppLoop+0x8f4>)
 80077c8:	f7f9 fca4 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80077cc:	4822      	ldr	r0, [pc, #136]	; (8007858 <cppLoop+0x8f8>)
 80077ce:	f7fa fb31 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 80077d2:	4603      	mov	r3, r0
 80077d4:	2b02      	cmp	r3, #2
 80077d6:	bf0c      	ite	eq
 80077d8:	2301      	moveq	r3, #1
 80077da:	2300      	movne	r3, #0
 80077dc:	b2db      	uxtb	r3, r3
 80077de:	2b00      	cmp	r3, #0
 80077e0:	f000 849a 	beq.w	8008118 <cppLoop+0x11b8>
			HAL_Delay(500);
 80077e4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80077e8:	f000 fdd0 	bl	800838c <HAL_Delay>

			led.LR(1, -1);
 80077ec:	f04f 32ff 	mov.w	r2, #4294967295
 80077f0:	2101      	movs	r1, #1
 80077f2:	4815      	ldr	r0, [pc, #84]	; (8007848 <cppLoop+0x8e8>)
 80077f4:	f7fa fc3e 	bl	8002074 <_ZN3LED2LREaa>
			line_trace.setMode(SECOND_RUNNING);
 80077f8:	2101      	movs	r1, #1
 80077fa:	4818      	ldr	r0, [pc, #96]	; (800785c <cppLoop+0x8fc>)
 80077fc:	f7fc f98a 	bl	8003b14 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_max_velocity);
 8007800:	4b1b      	ldr	r3, [pc, #108]	; (8007870 <cppLoop+0x910>)
 8007802:	edd3 7a00 	vldr	s15, [r3]
 8007806:	eeb0 0a67 	vmov.f32	s0, s15
 800780a:	4814      	ldr	r0, [pc, #80]	; (800785c <cppLoop+0x8fc>)
 800780c:	f7fb fec5 	bl	800359a <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity);
 8007810:	4b17      	ldr	r3, [pc, #92]	; (8007870 <cppLoop+0x910>)
 8007812:	edd3 7a00 	vldr	s15, [r3]
 8007816:	eeb0 0a67 	vmov.f32	s0, s15
 800781a:	4810      	ldr	r0, [pc, #64]	; (800785c <cppLoop+0x8fc>)
 800781c:	f7fb fecc 	bl	80035b8 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.createVelocityTabele();
 8007820:	480e      	ldr	r0, [pc, #56]	; (800785c <cppLoop+0x8fc>)
 8007822:	f7fb fad9 	bl	8002dd8 <_ZN9LineTrace20createVelocityTabeleEv>

			line_trace.running();
 8007826:	480d      	ldr	r0, [pc, #52]	; (800785c <cppLoop+0x8fc>)
 8007828:	f7fc f876 	bl	8003918 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 800782c:	f04f 32ff 	mov.w	r2, #4294967295
 8007830:	2100      	movs	r1, #0
 8007832:	4805      	ldr	r0, [pc, #20]	; (8007848 <cppLoop+0x8e8>)
 8007834:	f7fa fc1e 	bl	8002074 <_ZN3LED2LREaa>
		}

		break;
 8007838:	f000 bc6e 	b.w	8008118 <cppLoop+0x11b8>
 800783c:	f3af 8000 	nop.w
 8007840:	9999999a 	.word	0x9999999a
 8007844:	3fb99999 	.word	0x3fb99999
 8007848:	200005d0 	.word	0x200005d0
 800784c:	0801864c 	.word	0x0801864c
 8007850:	2003c440 	.word	0x2003c440
 8007854:	08018658 	.word	0x08018658
 8007858:	200005c4 	.word	0x200005c4
 800785c:	20017da0 	.word	0x20017da0
 8007860:	08018664 	.word	0x08018664
 8007864:	08018670 	.word	0x08018670
 8007868:	08018634 	.word	0x08018634
 800786c:	0801867c 	.word	0x0801867c
 8007870:	2003c448 	.word	0x2003c448

	case 4:
		led.fullColor('G');
 8007874:	2147      	movs	r1, #71	; 0x47
 8007876:	48be      	ldr	r0, [pc, #760]	; (8007b70 <cppLoop+0xc10>)
 8007878:	f7fa fb40 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 800787c:	f7f9 fc10 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007880:	2100      	movs	r1, #0
 8007882:	2000      	movs	r0, #0
 8007884:	f7f9 fc1c 	bl	80010c0 <lcd_locate>
		lcd_printf("SeconRun");
 8007888:	48ba      	ldr	r0, [pc, #744]	; (8007b74 <cppLoop+0xc14>)
 800788a:	f7f9 fc43 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800788e:	2101      	movs	r1, #1
 8007890:	2000      	movs	r0, #0
 8007892:	f7f9 fc15 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", line_trace.getMaxVelocity());
 8007896:	48b8      	ldr	r0, [pc, #736]	; (8007b78 <cppLoop+0xc18>)
 8007898:	f7fb febc 	bl	8003614 <_ZN9LineTrace14getMaxVelocityEv>
 800789c:	ee10 3a10 	vmov	r3, s0
 80078a0:	4618      	mov	r0, r3
 80078a2:	f7f8 fe69 	bl	8000578 <__aeabi_f2d>
 80078a6:	4603      	mov	r3, r0
 80078a8:	460c      	mov	r4, r1
 80078aa:	461a      	mov	r2, r3
 80078ac:	4623      	mov	r3, r4
 80078ae:	48b3      	ldr	r0, [pc, #716]	; (8007b7c <cppLoop+0xc1c>)
 80078b0:	f7f9 fc30 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_R){
 80078b4:	48b2      	ldr	r0, [pc, #712]	; (8007b80 <cppLoop+0xc20>)
 80078b6:	f7fa fabd 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 80078ba:	4603      	mov	r3, r0
 80078bc:	2b10      	cmp	r3, #16
 80078be:	bf0c      	ite	eq
 80078c0:	2301      	moveq	r3, #1
 80078c2:	2300      	movne	r3, #0
 80078c4:	b2db      	uxtb	r3, r3
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d023      	beq.n	8007912 <cppLoop+0x9b2>
			led.LR(-1, 1);
 80078ca:	2201      	movs	r2, #1
 80078cc:	f04f 31ff 	mov.w	r1, #4294967295
 80078d0:	48a7      	ldr	r0, [pc, #668]	; (8007b70 <cppLoop+0xc10>)
 80078d2:	f7fa fbcf 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(100);
 80078d6:	2064      	movs	r0, #100	; 0x64
 80078d8:	f000 fd58 	bl	800838c <HAL_Delay>

			adj_max_velocity = adj_max_velocity + 0.1;
 80078dc:	4ba9      	ldr	r3, [pc, #676]	; (8007b84 <cppLoop+0xc24>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4618      	mov	r0, r3
 80078e2:	f7f8 fe49 	bl	8000578 <__aeabi_f2d>
 80078e6:	a3a0      	add	r3, pc, #640	; (adr r3, 8007b68 <cppLoop+0xc08>)
 80078e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ec:	f7f8 fce6 	bl	80002bc <__adddf3>
 80078f0:	4603      	mov	r3, r0
 80078f2:	460c      	mov	r4, r1
 80078f4:	4618      	mov	r0, r3
 80078f6:	4621      	mov	r1, r4
 80078f8:	f7f9 f98e 	bl	8000c18 <__aeabi_d2f>
 80078fc:	4602      	mov	r2, r0
 80078fe:	4ba1      	ldr	r3, [pc, #644]	; (8007b84 <cppLoop+0xc24>)
 8007900:	601a      	str	r2, [r3, #0]

			led.LR(-1, 0);
 8007902:	2200      	movs	r2, #0
 8007904:	f04f 31ff 	mov.w	r1, #4294967295
 8007908:	4899      	ldr	r0, [pc, #612]	; (8007b70 <cppLoop+0xc10>)
 800790a:	f7fa fbb3 	bl	8002074 <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "TARVEL2.TXT", 1, &adj_max_velocity, OVER_WRITE);
			line_trace.setMaxVelocity(adj_max_velocity);

			led.LR(-1, 0);
		}
		break;
 800790e:	f000 bc05 	b.w	800811c <cppLoop+0x11bc>
		else if(joy_stick.getValue() == JOY_L){
 8007912:	489b      	ldr	r0, [pc, #620]	; (8007b80 <cppLoop+0xc20>)
 8007914:	f7fa fa8e 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007918:	4603      	mov	r3, r0
 800791a:	2b01      	cmp	r3, #1
 800791c:	bf0c      	ite	eq
 800791e:	2301      	moveq	r3, #1
 8007920:	2300      	movne	r3, #0
 8007922:	b2db      	uxtb	r3, r3
 8007924:	2b00      	cmp	r3, #0
 8007926:	d022      	beq.n	800796e <cppLoop+0xa0e>
			led.LR(-1, 1);
 8007928:	2201      	movs	r2, #1
 800792a:	f04f 31ff 	mov.w	r1, #4294967295
 800792e:	4890      	ldr	r0, [pc, #576]	; (8007b70 <cppLoop+0xc10>)
 8007930:	f7fa fba0 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8007934:	2064      	movs	r0, #100	; 0x64
 8007936:	f000 fd29 	bl	800838c <HAL_Delay>
			adj_max_velocity = adj_max_velocity - 0.1;
 800793a:	4b92      	ldr	r3, [pc, #584]	; (8007b84 <cppLoop+0xc24>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4618      	mov	r0, r3
 8007940:	f7f8 fe1a 	bl	8000578 <__aeabi_f2d>
 8007944:	a388      	add	r3, pc, #544	; (adr r3, 8007b68 <cppLoop+0xc08>)
 8007946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800794a:	f7f8 fcb5 	bl	80002b8 <__aeabi_dsub>
 800794e:	4603      	mov	r3, r0
 8007950:	460c      	mov	r4, r1
 8007952:	4618      	mov	r0, r3
 8007954:	4621      	mov	r1, r4
 8007956:	f7f9 f95f 	bl	8000c18 <__aeabi_d2f>
 800795a:	4602      	mov	r2, r0
 800795c:	4b89      	ldr	r3, [pc, #548]	; (8007b84 <cppLoop+0xc24>)
 800795e:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8007960:	2200      	movs	r2, #0
 8007962:	f04f 31ff 	mov.w	r1, #4294967295
 8007966:	4882      	ldr	r0, [pc, #520]	; (8007b70 <cppLoop+0xc10>)
 8007968:	f7fa fb84 	bl	8002074 <_ZN3LED2LREaa>
		break;
 800796c:	e3d6      	b.n	800811c <cppLoop+0x11bc>
		else if(joy_stick.getValue() == JOY_C){
 800796e:	4884      	ldr	r0, [pc, #528]	; (8007b80 <cppLoop+0xc20>)
 8007970:	f7fa fa60 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007974:	4603      	mov	r3, r0
 8007976:	2b02      	cmp	r3, #2
 8007978:	bf0c      	ite	eq
 800797a:	2301      	moveq	r3, #1
 800797c:	2300      	movne	r3, #0
 800797e:	b2db      	uxtb	r3, r3
 8007980:	2b00      	cmp	r3, #0
 8007982:	f000 83cb 	beq.w	800811c <cppLoop+0x11bc>
			led.LR(-1, 1);
 8007986:	2201      	movs	r2, #1
 8007988:	f04f 31ff 	mov.w	r1, #4294967295
 800798c:	4878      	ldr	r0, [pc, #480]	; (8007b70 <cppLoop+0xc10>)
 800798e:	f7fa fb71 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8007992:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007996:	f000 fcf9 	bl	800838c <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL2.TXT", 1, &adj_max_velocity, OVER_WRITE);
 800799a:	2300      	movs	r3, #0
 800799c:	9300      	str	r3, [sp, #0]
 800799e:	4b79      	ldr	r3, [pc, #484]	; (8007b84 <cppLoop+0xc24>)
 80079a0:	2201      	movs	r2, #1
 80079a2:	4979      	ldr	r1, [pc, #484]	; (8007b88 <cppLoop+0xc28>)
 80079a4:	4879      	ldr	r0, [pc, #484]	; (8007b8c <cppLoop+0xc2c>)
 80079a6:	f7f9 fe2d 	bl	8001604 <sd_write_array_float>
			line_trace.setMaxVelocity(adj_max_velocity);
 80079aa:	4b76      	ldr	r3, [pc, #472]	; (8007b84 <cppLoop+0xc24>)
 80079ac:	edd3 7a00 	vldr	s15, [r3]
 80079b0:	eeb0 0a67 	vmov.f32	s0, s15
 80079b4:	4870      	ldr	r0, [pc, #448]	; (8007b78 <cppLoop+0xc18>)
 80079b6:	f7fb fdff 	bl	80035b8 <_ZN9LineTrace14setMaxVelocityEf>
			led.LR(-1, 0);
 80079ba:	2200      	movs	r2, #0
 80079bc:	f04f 31ff 	mov.w	r1, #4294967295
 80079c0:	486b      	ldr	r0, [pc, #428]	; (8007b70 <cppLoop+0xc10>)
 80079c2:	f7fa fb57 	bl	8002074 <_ZN3LED2LREaa>
		break;
 80079c6:	e3a9      	b.n	800811c <cppLoop+0x11bc>

	case 5:
		led.fullColor('M');
 80079c8:	214d      	movs	r1, #77	; 0x4d
 80079ca:	4869      	ldr	r0, [pc, #420]	; (8007b70 <cppLoop+0xc10>)
 80079cc:	f7fa fa96 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 80079d0:	f7f9 fb66 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80079d4:	2100      	movs	r1, #0
 80079d6:	2000      	movs	r0, #0
 80079d8:	f7f9 fb72 	bl	80010c0 <lcd_locate>
		lcd_printf("ThirdRun");
 80079dc:	486c      	ldr	r0, [pc, #432]	; (8007b90 <cppLoop+0xc30>)
 80079de:	f7f9 fb99 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80079e2:	2101      	movs	r1, #1
 80079e4:	2000      	movs	r0, #0
 80079e6:	f7f9 fb6b 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity2);
 80079ea:	4b6a      	ldr	r3, [pc, #424]	; (8007b94 <cppLoop+0xc34>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4618      	mov	r0, r3
 80079f0:	f7f8 fdc2 	bl	8000578 <__aeabi_f2d>
 80079f4:	4603      	mov	r3, r0
 80079f6:	460c      	mov	r4, r1
 80079f8:	461a      	mov	r2, r3
 80079fa:	4623      	mov	r3, r4
 80079fc:	4866      	ldr	r0, [pc, #408]	; (8007b98 <cppLoop+0xc38>)
 80079fe:	f7f9 fb89 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8007a02:	485f      	ldr	r0, [pc, #380]	; (8007b80 <cppLoop+0xc20>)
 8007a04:	f7fa fa16 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	2b02      	cmp	r3, #2
 8007a0c:	bf0c      	ite	eq
 8007a0e:	2301      	moveq	r3, #1
 8007a10:	2300      	movne	r3, #0
 8007a12:	b2db      	uxtb	r3, r3
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	f000 8383 	beq.w	8008120 <cppLoop+0x11c0>
			HAL_Delay(500);
 8007a1a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007a1e:	f000 fcb5 	bl	800838c <HAL_Delay>

			led.LR(1, -1);
 8007a22:	f04f 32ff 	mov.w	r2, #4294967295
 8007a26:	2101      	movs	r1, #1
 8007a28:	4851      	ldr	r0, [pc, #324]	; (8007b70 <cppLoop+0xc10>)
 8007a2a:	f7fa fb23 	bl	8002074 <_ZN3LED2LREaa>
			line_trace.setMode(THIRD_RUNNING);
 8007a2e:	2102      	movs	r1, #2
 8007a30:	4851      	ldr	r0, [pc, #324]	; (8007b78 <cppLoop+0xc18>)
 8007a32:	f7fc f86f 	bl	8003b14 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_max_velocity2);
 8007a36:	4b57      	ldr	r3, [pc, #348]	; (8007b94 <cppLoop+0xc34>)
 8007a38:	edd3 7a00 	vldr	s15, [r3]
 8007a3c:	eeb0 0a67 	vmov.f32	s0, s15
 8007a40:	484d      	ldr	r0, [pc, #308]	; (8007b78 <cppLoop+0xc18>)
 8007a42:	f7fb fdaa 	bl	800359a <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity2(adj_max_velocity2);
 8007a46:	4b53      	ldr	r3, [pc, #332]	; (8007b94 <cppLoop+0xc34>)
 8007a48:	edd3 7a00 	vldr	s15, [r3]
 8007a4c:	eeb0 0a67 	vmov.f32	s0, s15
 8007a50:	4849      	ldr	r0, [pc, #292]	; (8007b78 <cppLoop+0xc18>)
 8007a52:	f7fb fdc0 	bl	80035d6 <_ZN9LineTrace15setMaxVelocity2Ef>
			line_trace.createVelocityTabele();
 8007a56:	4848      	ldr	r0, [pc, #288]	; (8007b78 <cppLoop+0xc18>)
 8007a58:	f7fb f9be 	bl	8002dd8 <_ZN9LineTrace20createVelocityTabeleEv>

			line_trace.running();
 8007a5c:	4846      	ldr	r0, [pc, #280]	; (8007b78 <cppLoop+0xc18>)
 8007a5e:	f7fb ff5b 	bl	8003918 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 8007a62:	f04f 32ff 	mov.w	r2, #4294967295
 8007a66:	2100      	movs	r1, #0
 8007a68:	4841      	ldr	r0, [pc, #260]	; (8007b70 <cppLoop+0xc10>)
 8007a6a:	f7fa fb03 	bl	8002074 <_ZN3LED2LREaa>
		}

		break;
 8007a6e:	e357      	b.n	8008120 <cppLoop+0x11c0>

	case 6:
		led.fullColor('R');
 8007a70:	2152      	movs	r1, #82	; 0x52
 8007a72:	483f      	ldr	r0, [pc, #252]	; (8007b70 <cppLoop+0xc10>)
 8007a74:	f7fa fa42 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 8007a78:	f7f9 fb12 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007a7c:	2100      	movs	r1, #0
 8007a7e:	2000      	movs	r0, #0
 8007a80:	f7f9 fb1e 	bl	80010c0 <lcd_locate>
		lcd_printf("ThirdRun");
 8007a84:	4842      	ldr	r0, [pc, #264]	; (8007b90 <cppLoop+0xc30>)
 8007a86:	f7f9 fb45 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007a8a:	2101      	movs	r1, #1
 8007a8c:	2000      	movs	r0, #0
 8007a8e:	f7f9 fb17 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", line_trace.getMaxVelocity2());
 8007a92:	4839      	ldr	r0, [pc, #228]	; (8007b78 <cppLoop+0xc18>)
 8007a94:	f7fb fdcd 	bl	8003632 <_ZN9LineTrace15getMaxVelocity2Ev>
 8007a98:	ee10 3a10 	vmov	r3, s0
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	f7f8 fd6b 	bl	8000578 <__aeabi_f2d>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	460c      	mov	r4, r1
 8007aa6:	461a      	mov	r2, r3
 8007aa8:	4623      	mov	r3, r4
 8007aaa:	4834      	ldr	r0, [pc, #208]	; (8007b7c <cppLoop+0xc1c>)
 8007aac:	f7f9 fb32 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_R){
 8007ab0:	4833      	ldr	r0, [pc, #204]	; (8007b80 <cppLoop+0xc20>)
 8007ab2:	f7fa f9bf 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	2b10      	cmp	r3, #16
 8007aba:	bf0c      	ite	eq
 8007abc:	2301      	moveq	r3, #1
 8007abe:	2300      	movne	r3, #0
 8007ac0:	b2db      	uxtb	r3, r3
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d022      	beq.n	8007b0c <cppLoop+0xbac>
			led.LR(-1, 1);
 8007ac6:	2201      	movs	r2, #1
 8007ac8:	f04f 31ff 	mov.w	r1, #4294967295
 8007acc:	4828      	ldr	r0, [pc, #160]	; (8007b70 <cppLoop+0xc10>)
 8007ace:	f7fa fad1 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8007ad2:	2064      	movs	r0, #100	; 0x64
 8007ad4:	f000 fc5a 	bl	800838c <HAL_Delay>

			adj_max_velocity2 = adj_max_velocity2 + 0.1;
 8007ad8:	4b2e      	ldr	r3, [pc, #184]	; (8007b94 <cppLoop+0xc34>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4618      	mov	r0, r3
 8007ade:	f7f8 fd4b 	bl	8000578 <__aeabi_f2d>
 8007ae2:	a321      	add	r3, pc, #132	; (adr r3, 8007b68 <cppLoop+0xc08>)
 8007ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ae8:	f7f8 fbe8 	bl	80002bc <__adddf3>
 8007aec:	4603      	mov	r3, r0
 8007aee:	460c      	mov	r4, r1
 8007af0:	4618      	mov	r0, r3
 8007af2:	4621      	mov	r1, r4
 8007af4:	f7f9 f890 	bl	8000c18 <__aeabi_d2f>
 8007af8:	4602      	mov	r2, r0
 8007afa:	4b26      	ldr	r3, [pc, #152]	; (8007b94 <cppLoop+0xc34>)
 8007afc:	601a      	str	r2, [r3, #0]

			led.LR(-1, 0);
 8007afe:	2200      	movs	r2, #0
 8007b00:	f04f 31ff 	mov.w	r1, #4294967295
 8007b04:	481a      	ldr	r0, [pc, #104]	; (8007b70 <cppLoop+0xc10>)
 8007b06:	f7fa fab5 	bl	8002074 <_ZN3LED2LREaa>
			line_trace.setMaxVelocity2(adj_max_velocity2);

			led.LR(-1, 0);
		}

		break;
 8007b0a:	e30b      	b.n	8008124 <cppLoop+0x11c4>
		else if(joy_stick.getValue() == JOY_L){
 8007b0c:	481c      	ldr	r0, [pc, #112]	; (8007b80 <cppLoop+0xc20>)
 8007b0e:	f7fa f991 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007b12:	4603      	mov	r3, r0
 8007b14:	2b01      	cmp	r3, #1
 8007b16:	bf0c      	ite	eq
 8007b18:	2301      	moveq	r3, #1
 8007b1a:	2300      	movne	r3, #0
 8007b1c:	b2db      	uxtb	r3, r3
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d03c      	beq.n	8007b9c <cppLoop+0xc3c>
			led.LR(-1, 1);
 8007b22:	2201      	movs	r2, #1
 8007b24:	f04f 31ff 	mov.w	r1, #4294967295
 8007b28:	4811      	ldr	r0, [pc, #68]	; (8007b70 <cppLoop+0xc10>)
 8007b2a:	f7fa faa3 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(100);
 8007b2e:	2064      	movs	r0, #100	; 0x64
 8007b30:	f000 fc2c 	bl	800838c <HAL_Delay>
			adj_max_velocity2 = adj_max_velocity2 - 0.1;
 8007b34:	4b17      	ldr	r3, [pc, #92]	; (8007b94 <cppLoop+0xc34>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	4618      	mov	r0, r3
 8007b3a:	f7f8 fd1d 	bl	8000578 <__aeabi_f2d>
 8007b3e:	a30a      	add	r3, pc, #40	; (adr r3, 8007b68 <cppLoop+0xc08>)
 8007b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b44:	f7f8 fbb8 	bl	80002b8 <__aeabi_dsub>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	460c      	mov	r4, r1
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	4621      	mov	r1, r4
 8007b50:	f7f9 f862 	bl	8000c18 <__aeabi_d2f>
 8007b54:	4602      	mov	r2, r0
 8007b56:	4b0f      	ldr	r3, [pc, #60]	; (8007b94 <cppLoop+0xc34>)
 8007b58:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	f04f 31ff 	mov.w	r1, #4294967295
 8007b60:	4803      	ldr	r0, [pc, #12]	; (8007b70 <cppLoop+0xc10>)
 8007b62:	f7fa fa87 	bl	8002074 <_ZN3LED2LREaa>
		break;
 8007b66:	e2dd      	b.n	8008124 <cppLoop+0x11c4>
 8007b68:	9999999a 	.word	0x9999999a
 8007b6c:	3fb99999 	.word	0x3fb99999
 8007b70:	200005d0 	.word	0x200005d0
 8007b74:	0801867c 	.word	0x0801867c
 8007b78:	20017da0 	.word	0x20017da0
 8007b7c:	08018664 	.word	0x08018664
 8007b80:	200005c4 	.word	0x200005c4
 8007b84:	2003c448 	.word	0x2003c448
 8007b88:	08018688 	.word	0x08018688
 8007b8c:	08018634 	.word	0x08018634
 8007b90:	08018694 	.word	0x08018694
 8007b94:	2003c450 	.word	0x2003c450
 8007b98:	08018658 	.word	0x08018658
		else if(joy_stick.getValue() == JOY_C){
 8007b9c:	48ca      	ldr	r0, [pc, #808]	; (8007ec8 <cppLoop+0xf68>)
 8007b9e:	f7fa f949 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	2b02      	cmp	r3, #2
 8007ba6:	bf0c      	ite	eq
 8007ba8:	2301      	moveq	r3, #1
 8007baa:	2300      	movne	r3, #0
 8007bac:	b2db      	uxtb	r3, r3
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	f000 82b8 	beq.w	8008124 <cppLoop+0x11c4>
			led.LR(-1, 1);
 8007bb4:	2201      	movs	r2, #1
 8007bb6:	f04f 31ff 	mov.w	r1, #4294967295
 8007bba:	48c4      	ldr	r0, [pc, #784]	; (8007ecc <cppLoop+0xf6c>)
 8007bbc:	f7fa fa5a 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(300);
 8007bc0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007bc4:	f000 fbe2 	bl	800838c <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL3.TXT", 1, &adj_max_velocity2, OVER_WRITE);
 8007bc8:	2300      	movs	r3, #0
 8007bca:	9300      	str	r3, [sp, #0]
 8007bcc:	4bc0      	ldr	r3, [pc, #768]	; (8007ed0 <cppLoop+0xf70>)
 8007bce:	2201      	movs	r2, #1
 8007bd0:	49c0      	ldr	r1, [pc, #768]	; (8007ed4 <cppLoop+0xf74>)
 8007bd2:	48c1      	ldr	r0, [pc, #772]	; (8007ed8 <cppLoop+0xf78>)
 8007bd4:	f7f9 fd16 	bl	8001604 <sd_write_array_float>
			line_trace.setMaxVelocity2(adj_max_velocity2);
 8007bd8:	4bbd      	ldr	r3, [pc, #756]	; (8007ed0 <cppLoop+0xf70>)
 8007bda:	edd3 7a00 	vldr	s15, [r3]
 8007bde:	eeb0 0a67 	vmov.f32	s0, s15
 8007be2:	48be      	ldr	r0, [pc, #760]	; (8007edc <cppLoop+0xf7c>)
 8007be4:	f7fb fcf7 	bl	80035d6 <_ZN9LineTrace15setMaxVelocity2Ef>
			led.LR(-1, 0);
 8007be8:	2200      	movs	r2, #0
 8007bea:	f04f 31ff 	mov.w	r1, #4294967295
 8007bee:	48b7      	ldr	r0, [pc, #732]	; (8007ecc <cppLoop+0xf6c>)
 8007bf0:	f7fa fa40 	bl	8002074 <_ZN3LED2LREaa>
		break;
 8007bf4:	e296      	b.n	8008124 <cppLoop+0x11c4>

	case 7:
		led.fullColor('~');
 8007bf6:	217e      	movs	r1, #126	; 0x7e
 8007bf8:	48b4      	ldr	r0, [pc, #720]	; (8007ecc <cppLoop+0xf6c>)
 8007bfa:	f7fa f97f 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 8007bfe:	f7f9 fa4f 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007c02:	2100      	movs	r1, #0
 8007c04:	2000      	movs	r0, #0
 8007c06:	f7f9 fa5b 	bl	80010c0 <lcd_locate>
		lcd_printf("07      ");
 8007c0a:	48b5      	ldr	r0, [pc, #724]	; (8007ee0 <cppLoop+0xf80>)
 8007c0c:	f7f9 fa82 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007c10:	2101      	movs	r1, #1
 8007c12:	2000      	movs	r0, #0
 8007c14:	f7f9 fa54 	bl	80010c0 <lcd_locate>
		lcd_printf("        ");
 8007c18:	48b2      	ldr	r0, [pc, #712]	; (8007ee4 <cppLoop+0xf84>)
 8007c1a:	f7f9 fa7b 	bl	8001114 <lcd_printf>
		break;
 8007c1e:	e290      	b.n	8008142 <cppLoop+0x11e2>

	case 8:
		led.fullColor('~');
 8007c20:	217e      	movs	r1, #126	; 0x7e
 8007c22:	48aa      	ldr	r0, [pc, #680]	; (8007ecc <cppLoop+0xf6c>)
 8007c24:	f7fa f96a 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 8007c28:	f7f9 fa3a 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007c2c:	2100      	movs	r1, #0
 8007c2e:	2000      	movs	r0, #0
 8007c30:	f7f9 fa46 	bl	80010c0 <lcd_locate>
		lcd_printf("08      ");
 8007c34:	48ac      	ldr	r0, [pc, #688]	; (8007ee8 <cppLoop+0xf88>)
 8007c36:	f7f9 fa6d 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007c3a:	2101      	movs	r1, #1
 8007c3c:	2000      	movs	r0, #0
 8007c3e:	f7f9 fa3f 	bl	80010c0 <lcd_locate>
		lcd_printf("        ");
 8007c42:	48a8      	ldr	r0, [pc, #672]	; (8007ee4 <cppLoop+0xf84>)
 8007c44:	f7f9 fa66 	bl	8001114 <lcd_printf>

		break;
 8007c48:	e27b      	b.n	8008142 <cppLoop+0x11e2>

	case 9:
		led.fullColor('~');
 8007c4a:	217e      	movs	r1, #126	; 0x7e
 8007c4c:	489f      	ldr	r0, [pc, #636]	; (8007ecc <cppLoop+0xf6c>)
 8007c4e:	f7fa f955 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 8007c52:	f7f9 fa25 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007c56:	2100      	movs	r1, #0
 8007c58:	2000      	movs	r0, #0
 8007c5a:	f7f9 fa31 	bl	80010c0 <lcd_locate>
		lcd_printf("Teoshi");
 8007c5e:	48a3      	ldr	r0, [pc, #652]	; (8007eec <cppLoop+0xf8c>)
 8007c60:	f7f9 fa58 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007c64:	2101      	movs	r1, #1
 8007c66:	2000      	movs	r0, #0
 8007c68:	f7f9 fa2a 	bl	80010c0 <lcd_locate>
		lcd_printf("Following");
 8007c6c:	48a0      	ldr	r0, [pc, #640]	; (8007ef0 <cppLoop+0xf90>)
 8007c6e:	f7f9 fa51 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8007c72:	4895      	ldr	r0, [pc, #596]	; (8007ec8 <cppLoop+0xf68>)
 8007c74:	f7fa f8de 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007c78:	4603      	mov	r3, r0
 8007c7a:	2b02      	cmp	r3, #2
 8007c7c:	bf0c      	ite	eq
 8007c7e:	2301      	moveq	r3, #1
 8007c80:	2300      	movne	r3, #0
 8007c82:	b2db      	uxtb	r3, r3
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	f000 824f 	beq.w	8008128 <cppLoop+0x11c8>
			led.LR(-1, 1);
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	f04f 31ff 	mov.w	r1, #4294967295
 8007c90:	488e      	ldr	r0, [pc, #568]	; (8007ecc <cppLoop+0xf6c>)
 8007c92:	f7fa f9ef 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(500);
 8007c96:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007c9a:	f000 fb77 	bl	800838c <HAL_Delay>

			line_trace.setNormalRatio(0.0);
 8007c9e:	ed9f 0a95 	vldr	s0, [pc, #596]	; 8007ef4 <cppLoop+0xf94>
 8007ca2:	488e      	ldr	r0, [pc, #568]	; (8007edc <cppLoop+0xf7c>)
 8007ca4:	f7fb fc6a 	bl	800357c <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 8007ca8:	488c      	ldr	r0, [pc, #560]	; (8007edc <cppLoop+0xf7c>)
 8007caa:	f7fb fda7 	bl	80037fc <_ZN9LineTrace5startEv>
			HAL_Delay(500);
 8007cae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007cb2:	f000 fb6b 	bl	800838c <HAL_Delay>

			led.fullColor('R');
 8007cb6:	2152      	movs	r1, #82	; 0x52
 8007cb8:	4884      	ldr	r0, [pc, #528]	; (8007ecc <cppLoop+0xf6c>)
 8007cba:	f7fa f91f 	bl	8001efc <_ZN3LED9fullColorEc>
			encoder.clearDistance10mm();
 8007cbe:	488e      	ldr	r0, [pc, #568]	; (8007ef8 <cppLoop+0xf98>)
 8007cc0:	f7f9 fbf2 	bl	80014a8 <_ZN7Encoder17clearDistance10mmEv>
			//encoder.clearDistance();

			HAL_Delay(10000);
 8007cc4:	f242 7010 	movw	r0, #10000	; 0x2710
 8007cc8:	f000 fb60 	bl	800838c <HAL_Delay>

			line_trace.stop();
 8007ccc:	4883      	ldr	r0, [pc, #524]	; (8007edc <cppLoop+0xf7c>)
 8007cce:	f7fb fdbb 	bl	8003848 <_ZN9LineTrace4stopEv>
			//long total = encoder.getTotalCnt();

			//user_fopen("total_cnts", "cnts.txt");
			user_fopen("distance", "1m.txt");
 8007cd2:	498a      	ldr	r1, [pc, #552]	; (8007efc <cppLoop+0xf9c>)
 8007cd4:	488a      	ldr	r0, [pc, #552]	; (8007f00 <cppLoop+0xfa0>)
 8007cd6:	f7f9 fc20 	bl	800151a <user_fopen>
			float d = encoder.getDistance();
 8007cda:	4887      	ldr	r0, [pc, #540]	; (8007ef8 <cppLoop+0xf98>)
 8007cdc:	f7f9 fba8 	bl	8001430 <_ZN7Encoder11getDistanceEv>
 8007ce0:	eef0 7a40 	vmov.f32	s15, s0
 8007ce4:	edc7 7a00 	vstr	s15, [r7]
			sd_write_float(1, &d, ADD_WRITE);
 8007ce8:	463b      	mov	r3, r7
 8007cea:	2201      	movs	r2, #1
 8007cec:	4619      	mov	r1, r3
 8007cee:	2001      	movs	r0, #1
 8007cf0:	f7f9 fc36 	bl	8001560 <sd_write_float>
			user_fclose();
 8007cf4:	f7f9 fc24 	bl	8001540 <user_fclose>

			led.LR(-1, 0);
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	f04f 31ff 	mov.w	r1, #4294967295
 8007cfe:	4873      	ldr	r0, [pc, #460]	; (8007ecc <cppLoop+0xf6c>)
 8007d00:	f7fa f9b8 	bl	8002074 <_ZN3LED2LREaa>
		}
		break;
 8007d04:	e210      	b.n	8008128 <cppLoop+0x11c8>

	case 10:
		led.fullColor('~');
 8007d06:	217e      	movs	r1, #126	; 0x7e
 8007d08:	4870      	ldr	r0, [pc, #448]	; (8007ecc <cppLoop+0xf6c>)
 8007d0a:	f7fa f8f7 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 8007d0e:	f7f9 f9c7 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007d12:	2100      	movs	r1, #0
 8007d14:	2000      	movs	r0, #0
 8007d16:	f7f9 f9d3 	bl	80010c0 <lcd_locate>
		lcd_printf("Create  ");
 8007d1a:	487a      	ldr	r0, [pc, #488]	; (8007f04 <cppLoop+0xfa4>)
 8007d1c:	f7f9 f9fa 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007d20:	2101      	movs	r1, #1
 8007d22:	2000      	movs	r0, #0
 8007d24:	f7f9 f9cc 	bl	80010c0 <lcd_locate>
		lcd_printf("VelTable");
 8007d28:	4877      	ldr	r0, [pc, #476]	; (8007f08 <cppLoop+0xfa8>)
 8007d2a:	f7f9 f9f3 	bl	8001114 <lcd_printf>
		if(joy_stick.getValue() == JOY_C){
 8007d2e:	4866      	ldr	r0, [pc, #408]	; (8007ec8 <cppLoop+0xf68>)
 8007d30:	f7fa f880 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007d34:	4603      	mov	r3, r0
 8007d36:	2b02      	cmp	r3, #2
 8007d38:	bf0c      	ite	eq
 8007d3a:	2301      	moveq	r3, #1
 8007d3c:	2300      	movne	r3, #0
 8007d3e:	b2db      	uxtb	r3, r3
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	f000 81f3 	beq.w	800812c <cppLoop+0x11cc>
			HAL_Delay(500);
 8007d46:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007d4a:	f000 fb1f 	bl	800838c <HAL_Delay>
			led.LR(-1, 1);
 8007d4e:	2201      	movs	r2, #1
 8007d50:	f04f 31ff 	mov.w	r1, #4294967295
 8007d54:	485d      	ldr	r0, [pc, #372]	; (8007ecc <cppLoop+0xf6c>)
 8007d56:	f7fa f98d 	bl	8002074 <_ZN3LED2LREaa>

			line_trace.setMode(SECOND_RUNNING);
 8007d5a:	2101      	movs	r1, #1
 8007d5c:	485f      	ldr	r0, [pc, #380]	; (8007edc <cppLoop+0xf7c>)
 8007d5e:	f7fb fed9 	bl	8003b14 <_ZN9LineTrace7setModeEs>
			line_trace.createVelocityTabeleFromSD();
 8007d62:	485e      	ldr	r0, [pc, #376]	; (8007edc <cppLoop+0xf7c>)
 8007d64:	f7fb f938 	bl	8002fd8 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			led.LR(-1, 0);
 8007d68:	2200      	movs	r2, #0
 8007d6a:	f04f 31ff 	mov.w	r1, #4294967295
 8007d6e:	4857      	ldr	r0, [pc, #348]	; (8007ecc <cppLoop+0xf6c>)
 8007d70:	f7fa f980 	bl	8002074 <_ZN3LED2LREaa>
		}

		break;
 8007d74:	e1da      	b.n	800812c <cppLoop+0x11cc>

	case 11:
		led.fullColor('~');
 8007d76:	217e      	movs	r1, #126	; 0x7e
 8007d78:	4854      	ldr	r0, [pc, #336]	; (8007ecc <cppLoop+0xf6c>)
 8007d7a:	f7fa f8bf 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 8007d7e:	f7f9 f98f 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007d82:	2100      	movs	r1, #0
 8007d84:	2000      	movs	r0, #0
 8007d86:	f7f9 f99b 	bl	80010c0 <lcd_locate>
		lcd_printf("Step");
 8007d8a:	4860      	ldr	r0, [pc, #384]	; (8007f0c <cppLoop+0xfac>)
 8007d8c:	f7f9 f9c2 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007d90:	2101      	movs	r1, #1
 8007d92:	2000      	movs	r0, #0
 8007d94:	f7f9 f994 	bl	80010c0 <lcd_locate>
		lcd_printf("Record");
 8007d98:	485d      	ldr	r0, [pc, #372]	; (8007f10 <cppLoop+0xfb0>)
 8007d9a:	f7f9 f9bb 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8007d9e:	484a      	ldr	r0, [pc, #296]	; (8007ec8 <cppLoop+0xf68>)
 8007da0:	f7fa f848 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007da4:	4603      	mov	r3, r0
 8007da6:	2b02      	cmp	r3, #2
 8007da8:	bf0c      	ite	eq
 8007daa:	2301      	moveq	r3, #1
 8007dac:	2300      	movne	r3, #0
 8007dae:	b2db      	uxtb	r3, r3
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	f000 81bd 	beq.w	8008130 <cppLoop+0x11d0>
			HAL_Delay(1500);
 8007db6:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8007dba:	f000 fae7 	bl	800838c <HAL_Delay>
			led.LR(-1, 1);
 8007dbe:	2201      	movs	r2, #1
 8007dc0:	f04f 31ff 	mov.w	r1, #4294967295
 8007dc4:	4841      	ldr	r0, [pc, #260]	; (8007ecc <cppLoop+0xf6c>)
 8007dc6:	f7fa f955 	bl	8002074 <_ZN3LED2LREaa>

			logger.start();
 8007dca:	4852      	ldr	r0, [pc, #328]	; (8007f14 <cppLoop+0xfb4>)
 8007dcc:	f7fc fa59 	bl	8004282 <_ZN6Logger5startEv>
			motor.setRatio(0.3, -0.3);
 8007dd0:	ed9f 1b37 	vldr	d1, [pc, #220]	; 8007eb0 <cppLoop+0xf50>
 8007dd4:	ed9f 0b38 	vldr	d0, [pc, #224]	; 8007eb8 <cppLoop+0xf58>
 8007dd8:	484f      	ldr	r0, [pc, #316]	; (8007f18 <cppLoop+0xfb8>)
 8007dda:	f7fc fae7 	bl	80043ac <_ZN5Motor8setRatioEdd>

			HAL_Delay(1000);
 8007dde:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007de2:	f000 fad3 	bl	800838c <HAL_Delay>

			logger.stop();
 8007de6:	484b      	ldr	r0, [pc, #300]	; (8007f14 <cppLoop+0xfb4>)
 8007de8:	f7fc fa5c 	bl	80042a4 <_ZN6Logger4stopEv>
			motor.setRatio(0.0, 0.0);
 8007dec:	ed9f 1b34 	vldr	d1, [pc, #208]	; 8007ec0 <cppLoop+0xf60>
 8007df0:	ed9f 0b33 	vldr	d0, [pc, #204]	; 8007ec0 <cppLoop+0xf60>
 8007df4:	4848      	ldr	r0, [pc, #288]	; (8007f18 <cppLoop+0xfb8>)
 8007df6:	f7fc fad9 	bl	80043ac <_ZN5Motor8setRatioEdd>

			logger.saveLogs("SYSIDENT", "STEPRES.txt");
 8007dfa:	4a48      	ldr	r2, [pc, #288]	; (8007f1c <cppLoop+0xfbc>)
 8007dfc:	4948      	ldr	r1, [pc, #288]	; (8007f20 <cppLoop+0xfc0>)
 8007dfe:	4845      	ldr	r0, [pc, #276]	; (8007f14 <cppLoop+0xfb4>)
 8007e00:	f7fc f94f 	bl	80040a2 <_ZN6Logger8saveLogsEPKcS1_>

			led.LR(-1, 0);
 8007e04:	2200      	movs	r2, #0
 8007e06:	f04f 31ff 	mov.w	r1, #4294967295
 8007e0a:	4830      	ldr	r0, [pc, #192]	; (8007ecc <cppLoop+0xf6c>)
 8007e0c:	f7fa f932 	bl	8002074 <_ZN3LED2LREaa>
		}
		break;
 8007e10:	e18e      	b.n	8008130 <cppLoop+0x11d0>

	case 12:
		led.fullColor('~');
 8007e12:	217e      	movs	r1, #126	; 0x7e
 8007e14:	482d      	ldr	r0, [pc, #180]	; (8007ecc <cppLoop+0xf6c>)
 8007e16:	f7fa f871 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 8007e1a:	f7f9 f941 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007e1e:	2100      	movs	r1, #0
 8007e20:	2000      	movs	r0, #0
 8007e22:	f7f9 f94d 	bl	80010c0 <lcd_locate>
		lcd_printf("PID");
 8007e26:	483f      	ldr	r0, [pc, #252]	; (8007f24 <cppLoop+0xfc4>)
 8007e28:	f7f9 f974 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007e2c:	2101      	movs	r1, #1
 8007e2e:	2000      	movs	r0, #0
 8007e30:	f7f9 f946 	bl	80010c0 <lcd_locate>
		lcd_printf("Response");
 8007e34:	483c      	ldr	r0, [pc, #240]	; (8007f28 <cppLoop+0xfc8>)
 8007e36:	f7f9 f96d 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8007e3a:	4823      	ldr	r0, [pc, #140]	; (8007ec8 <cppLoop+0xf68>)
 8007e3c:	f7f9 fffa 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007e40:	4603      	mov	r3, r0
 8007e42:	2b02      	cmp	r3, #2
 8007e44:	bf0c      	ite	eq
 8007e46:	2301      	moveq	r3, #1
 8007e48:	2300      	movne	r3, #0
 8007e4a:	b2db      	uxtb	r3, r3
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	f000 8171 	beq.w	8008134 <cppLoop+0x11d4>
			HAL_Delay(1500);
 8007e52:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8007e56:	f000 fa99 	bl	800838c <HAL_Delay>
			led.LR(-1, 1);
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	f04f 31ff 	mov.w	r1, #4294967295
 8007e60:	481a      	ldr	r0, [pc, #104]	; (8007ecc <cppLoop+0xf6c>)
 8007e62:	f7fa f907 	bl	8002074 <_ZN3LED2LREaa>

			logger.start();
 8007e66:	482b      	ldr	r0, [pc, #172]	; (8007f14 <cppLoop+0xfb4>)
 8007e68:	f7fc fa0b 	bl	8004282 <_ZN6Logger5startEv>
			velocity_ctrl.start();
 8007e6c:	482f      	ldr	r0, [pc, #188]	; (8007f2c <cppLoop+0xfcc>)
 8007e6e:	f7fd f9ec 	bl	800524a <_ZN12VelocityCtrl5startEv>
			velocity_ctrl.setVelocity(1, 0);
 8007e72:	eddf 0a20 	vldr	s1, [pc, #128]	; 8007ef4 <cppLoop+0xf94>
 8007e76:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007e7a:	482c      	ldr	r0, [pc, #176]	; (8007f2c <cppLoop+0xfcc>)
 8007e7c:	f7fd f978 	bl	8005170 <_ZN12VelocityCtrl11setVelocityEff>

			HAL_Delay(1000);
 8007e80:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007e84:	f000 fa82 	bl	800838c <HAL_Delay>

			logger.stop();
 8007e88:	4822      	ldr	r0, [pc, #136]	; (8007f14 <cppLoop+0xfb4>)
 8007e8a:	f7fc fa0b 	bl	80042a4 <_ZN6Logger4stopEv>
			velocity_ctrl.stop();
 8007e8e:	4827      	ldr	r0, [pc, #156]	; (8007f2c <cppLoop+0xfcc>)
 8007e90:	f7fd f9ee 	bl	8005270 <_ZN12VelocityCtrl4stopEv>

			logger.saveLogs("SYSIDENT", "PIDRES.txt");
 8007e94:	4a26      	ldr	r2, [pc, #152]	; (8007f30 <cppLoop+0xfd0>)
 8007e96:	4922      	ldr	r1, [pc, #136]	; (8007f20 <cppLoop+0xfc0>)
 8007e98:	481e      	ldr	r0, [pc, #120]	; (8007f14 <cppLoop+0xfb4>)
 8007e9a:	f7fc f902 	bl	80040a2 <_ZN6Logger8saveLogsEPKcS1_>

			led.LR(-1, 0);
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	f04f 31ff 	mov.w	r1, #4294967295
 8007ea4:	4809      	ldr	r0, [pc, #36]	; (8007ecc <cppLoop+0xf6c>)
 8007ea6:	f7fa f8e5 	bl	8002074 <_ZN3LED2LREaa>
		}
		break;
 8007eaa:	e143      	b.n	8008134 <cppLoop+0x11d4>
 8007eac:	f3af 8000 	nop.w
 8007eb0:	33333333 	.word	0x33333333
 8007eb4:	bfd33333 	.word	0xbfd33333
 8007eb8:	33333333 	.word	0x33333333
 8007ebc:	3fd33333 	.word	0x3fd33333
	...
 8007ec8:	200005c4 	.word	0x200005c4
 8007ecc:	200005d0 	.word	0x200005d0
 8007ed0:	2003c450 	.word	0x2003c450
 8007ed4:	080186a0 	.word	0x080186a0
 8007ed8:	08018634 	.word	0x08018634
 8007edc:	20017da0 	.word	0x20017da0
 8007ee0:	080186ac 	.word	0x080186ac
 8007ee4:	080186b8 	.word	0x080186b8
 8007ee8:	080186c4 	.word	0x080186c4
 8007eec:	080186d0 	.word	0x080186d0
 8007ef0:	080186d8 	.word	0x080186d8
 8007ef4:	00000000 	.word	0x00000000
 8007ef8:	20017d04 	.word	0x20017d04
 8007efc:	080186e4 	.word	0x080186e4
 8007f00:	080186ec 	.word	0x080186ec
 8007f04:	080186f8 	.word	0x080186f8
 8007f08:	08018704 	.word	0x08018704
 8007f0c:	08018710 	.word	0x08018710
 8007f10:	08018718 	.word	0x08018718
 8007f14:	200005f4 	.word	0x200005f4
 8007f18:	200005cc 	.word	0x200005cc
 8007f1c:	08018720 	.word	0x08018720
 8007f20:	0801872c 	.word	0x0801872c
 8007f24:	08018738 	.word	0x08018738
 8007f28:	0801873c 	.word	0x0801873c
 8007f2c:	20017d24 	.word	0x20017d24
 8007f30:	08018748 	.word	0x08018748

	case 13:
		led.fullColor('~');
 8007f34:	217e      	movs	r1, #126	; 0x7e
 8007f36:	4886      	ldr	r0, [pc, #536]	; (8008150 <cppLoop+0x11f0>)
 8007f38:	f7f9 ffe0 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 8007f3c:	f7f9 f8b0 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007f40:	2100      	movs	r1, #0
 8007f42:	2000      	movs	r0, #0
 8007f44:	f7f9 f8bc 	bl	80010c0 <lcd_locate>
		lcd_printf("Msig");
 8007f48:	4882      	ldr	r0, [pc, #520]	; (8008154 <cppLoop+0x11f4>)
 8007f4a:	f7f9 f8e3 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007f4e:	2101      	movs	r1, #1
 8007f50:	2000      	movs	r0, #0
 8007f52:	f7f9 f8b5 	bl	80010c0 <lcd_locate>
		lcd_printf("Record");
 8007f56:	4880      	ldr	r0, [pc, #512]	; (8008158 <cppLoop+0x11f8>)
 8007f58:	f7f9 f8dc 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8007f5c:	487f      	ldr	r0, [pc, #508]	; (800815c <cppLoop+0x11fc>)
 8007f5e:	f7f9 ff69 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007f62:	4603      	mov	r3, r0
 8007f64:	2b02      	cmp	r3, #2
 8007f66:	bf0c      	ite	eq
 8007f68:	2301      	moveq	r3, #1
 8007f6a:	2300      	movne	r3, #0
 8007f6c:	b2db      	uxtb	r3, r3
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	f000 80e2 	beq.w	8008138 <cppLoop+0x11d8>
			led.LR(-1, 1);
 8007f74:	2201      	movs	r2, #1
 8007f76:	f04f 31ff 	mov.w	r1, #4294967295
 8007f7a:	4875      	ldr	r0, [pc, #468]	; (8008150 <cppLoop+0x11f0>)
 8007f7c:	f7fa f87a 	bl	8002074 <_ZN3LED2LREaa>
			HAL_Delay(1500);
 8007f80:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8007f84:	f000 fa02 	bl	800838c <HAL_Delay>

			sys_ident.setInputRatio(0.3);
 8007f88:	ed9f 0a75 	vldr	s0, [pc, #468]	; 8008160 <cppLoop+0x1200>
 8007f8c:	4875      	ldr	r0, [pc, #468]	; (8008164 <cppLoop+0x1204>)
 8007f8e:	f7fc ff7b 	bl	8004e88 <_ZN20SystemIdentification13setInputRatioEf>
			sys_ident.start();
 8007f92:	4874      	ldr	r0, [pc, #464]	; (8008164 <cppLoop+0x1204>)
 8007f94:	f7fc ff88 	bl	8004ea8 <_ZN20SystemIdentification5startEv>
			HAL_Delay(17500);
 8007f98:	f244 405c 	movw	r0, #17500	; 0x445c
 8007f9c:	f000 f9f6 	bl	800838c <HAL_Delay>
			sys_ident.stop();
 8007fa0:	4870      	ldr	r0, [pc, #448]	; (8008164 <cppLoop+0x1204>)
 8007fa2:	f7fc ff95 	bl	8004ed0 <_ZN20SystemIdentification4stopEv>
			sys_ident.inOutputSave();
 8007fa6:	486f      	ldr	r0, [pc, #444]	; (8008164 <cppLoop+0x1204>)
 8007fa8:	f7fc fefc 	bl	8004da4 <_ZN20SystemIdentification12inOutputSaveEv>

			led.LR(-1, 0);
 8007fac:	2200      	movs	r2, #0
 8007fae:	f04f 31ff 	mov.w	r1, #4294967295
 8007fb2:	4867      	ldr	r0, [pc, #412]	; (8008150 <cppLoop+0x11f0>)
 8007fb4:	f7fa f85e 	bl	8002074 <_ZN3LED2LREaa>
		}
		break;
 8007fb8:	e0be      	b.n	8008138 <cppLoop+0x11d8>

	case 14:
		led.fullColor('W');
 8007fba:	2157      	movs	r1, #87	; 0x57
 8007fbc:	4864      	ldr	r0, [pc, #400]	; (8008150 <cppLoop+0x11f0>)
 8007fbe:	f7f9 ff9d 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 8007fc2:	f7f9 f86d 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007fc6:	2100      	movs	r1, #0
 8007fc8:	2000      	movs	r0, #0
 8007fca:	f7f9 f879 	bl	80010c0 <lcd_locate>
		lcd_printf("LogRun2    ");
 8007fce:	4866      	ldr	r0, [pc, #408]	; (8008168 <cppLoop+0x1208>)
 8007fd0:	f7f9 f8a0 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007fd4:	2101      	movs	r1, #1
 8007fd6:	2000      	movs	r0, #0
 8007fd8:	f7f9 f872 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity2);
 8007fdc:	4b63      	ldr	r3, [pc, #396]	; (800816c <cppLoop+0x120c>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	f7f8 fac9 	bl	8000578 <__aeabi_f2d>
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	460c      	mov	r4, r1
 8007fea:	461a      	mov	r2, r3
 8007fec:	4623      	mov	r3, r4
 8007fee:	4860      	ldr	r0, [pc, #384]	; (8008170 <cppLoop+0x1210>)
 8007ff0:	f7f9 f890 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8007ff4:	4859      	ldr	r0, [pc, #356]	; (800815c <cppLoop+0x11fc>)
 8007ff6:	f7f9 ff1d 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	2b02      	cmp	r3, #2
 8007ffe:	bf0c      	ite	eq
 8008000:	2301      	moveq	r3, #1
 8008002:	2300      	movne	r3, #0
 8008004:	b2db      	uxtb	r3, r3
 8008006:	2b00      	cmp	r3, #0
 8008008:	f000 8098 	beq.w	800813c <cppLoop+0x11dc>
			HAL_Delay(500);
 800800c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008010:	f000 f9bc 	bl	800838c <HAL_Delay>

			led.LR(1, -1);
 8008014:	f04f 32ff 	mov.w	r2, #4294967295
 8008018:	2101      	movs	r1, #1
 800801a:	484d      	ldr	r0, [pc, #308]	; (8008150 <cppLoop+0x11f0>)
 800801c:	f7fa f82a 	bl	8002074 <_ZN3LED2LREaa>
			line_trace.setMode(THIRD_RUNNING);
 8008020:	2102      	movs	r1, #2
 8008022:	4854      	ldr	r0, [pc, #336]	; (8008174 <cppLoop+0x1214>)
 8008024:	f7fb fd76 	bl	8003b14 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_max_velocity2);
 8008028:	4b50      	ldr	r3, [pc, #320]	; (800816c <cppLoop+0x120c>)
 800802a:	edd3 7a00 	vldr	s15, [r3]
 800802e:	eeb0 0a67 	vmov.f32	s0, s15
 8008032:	4850      	ldr	r0, [pc, #320]	; (8008174 <cppLoop+0x1214>)
 8008034:	f7fb fab1 	bl	800359a <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity2);
 8008038:	4b4c      	ldr	r3, [pc, #304]	; (800816c <cppLoop+0x120c>)
 800803a:	edd3 7a00 	vldr	s15, [r3]
 800803e:	eeb0 0a67 	vmov.f32	s0, s15
 8008042:	484c      	ldr	r0, [pc, #304]	; (8008174 <cppLoop+0x1214>)
 8008044:	f7fb fab8 	bl	80035b8 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 8008048:	484a      	ldr	r0, [pc, #296]	; (8008174 <cppLoop+0x1214>)
 800804a:	f7fa ffc5 	bl	8002fd8 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			line_trace.running();
 800804e:	4849      	ldr	r0, [pc, #292]	; (8008174 <cppLoop+0x1214>)
 8008050:	f7fb fc62 	bl	8003918 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 8008054:	f04f 32ff 	mov.w	r2, #4294967295
 8008058:	2100      	movs	r1, #0
 800805a:	483d      	ldr	r0, [pc, #244]	; (8008150 <cppLoop+0x11f0>)
 800805c:	f7fa f80a 	bl	8002074 <_ZN3LED2LREaa>
		}

		break;
 8008060:	e06c      	b.n	800813c <cppLoop+0x11dc>

	case 15:
		led.fullColor('W');
 8008062:	2157      	movs	r1, #87	; 0x57
 8008064:	483a      	ldr	r0, [pc, #232]	; (8008150 <cppLoop+0x11f0>)
 8008066:	f7f9 ff49 	bl	8001efc <_ZN3LED9fullColorEc>

		lcd_clear();
 800806a:	f7f9 f819 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800806e:	2100      	movs	r1, #0
 8008070:	2000      	movs	r0, #0
 8008072:	f7f9 f825 	bl	80010c0 <lcd_locate>
		lcd_printf("LogRun1    ");
 8008076:	4840      	ldr	r0, [pc, #256]	; (8008178 <cppLoop+0x1218>)
 8008078:	f7f9 f84c 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800807c:	2101      	movs	r1, #1
 800807e:	2000      	movs	r0, #0
 8008080:	f7f9 f81e 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity);
 8008084:	4b3d      	ldr	r3, [pc, #244]	; (800817c <cppLoop+0x121c>)
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	4618      	mov	r0, r3
 800808a:	f7f8 fa75 	bl	8000578 <__aeabi_f2d>
 800808e:	4603      	mov	r3, r0
 8008090:	460c      	mov	r4, r1
 8008092:	461a      	mov	r2, r3
 8008094:	4623      	mov	r3, r4
 8008096:	4836      	ldr	r0, [pc, #216]	; (8008170 <cppLoop+0x1210>)
 8008098:	f7f9 f83c 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800809c:	482f      	ldr	r0, [pc, #188]	; (800815c <cppLoop+0x11fc>)
 800809e:	f7f9 fec9 	bl	8001e34 <_ZN8JoyStick8getValueEv>
 80080a2:	4603      	mov	r3, r0
 80080a4:	2b02      	cmp	r3, #2
 80080a6:	bf0c      	ite	eq
 80080a8:	2301      	moveq	r3, #1
 80080aa:	2300      	movne	r3, #0
 80080ac:	b2db      	uxtb	r3, r3
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d046      	beq.n	8008140 <cppLoop+0x11e0>
			HAL_Delay(500);
 80080b2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80080b6:	f000 f969 	bl	800838c <HAL_Delay>

			led.LR(1, -1);
 80080ba:	f04f 32ff 	mov.w	r2, #4294967295
 80080be:	2101      	movs	r1, #1
 80080c0:	4823      	ldr	r0, [pc, #140]	; (8008150 <cppLoop+0x11f0>)
 80080c2:	f7f9 ffd7 	bl	8002074 <_ZN3LED2LREaa>
			line_trace.setMode(SECOND_RUNNING);
 80080c6:	2101      	movs	r1, #1
 80080c8:	482a      	ldr	r0, [pc, #168]	; (8008174 <cppLoop+0x1214>)
 80080ca:	f7fb fd23 	bl	8003b14 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_max_velocity);
 80080ce:	4b2b      	ldr	r3, [pc, #172]	; (800817c <cppLoop+0x121c>)
 80080d0:	edd3 7a00 	vldr	s15, [r3]
 80080d4:	eeb0 0a67 	vmov.f32	s0, s15
 80080d8:	4826      	ldr	r0, [pc, #152]	; (8008174 <cppLoop+0x1214>)
 80080da:	f7fb fa5e 	bl	800359a <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity);
 80080de:	4b27      	ldr	r3, [pc, #156]	; (800817c <cppLoop+0x121c>)
 80080e0:	edd3 7a00 	vldr	s15, [r3]
 80080e4:	eeb0 0a67 	vmov.f32	s0, s15
 80080e8:	4822      	ldr	r0, [pc, #136]	; (8008174 <cppLoop+0x1214>)
 80080ea:	f7fb fa65 	bl	80035b8 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 80080ee:	4821      	ldr	r0, [pc, #132]	; (8008174 <cppLoop+0x1214>)
 80080f0:	f7fa ff72 	bl	8002fd8 <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			line_trace.running();
 80080f4:	481f      	ldr	r0, [pc, #124]	; (8008174 <cppLoop+0x1214>)
 80080f6:	f7fb fc0f 	bl	8003918 <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 80080fa:	f04f 32ff 	mov.w	r2, #4294967295
 80080fe:	2100      	movs	r1, #0
 8008100:	4813      	ldr	r0, [pc, #76]	; (8008150 <cppLoop+0x11f0>)
 8008102:	f7f9 ffb7 	bl	8002074 <_ZN3LED2LREaa>
		}
		break;
 8008106:	e01b      	b.n	8008140 <cppLoop+0x11e0>

	default:
		break;
 8008108:	bf00      	nop
 800810a:	e01a      	b.n	8008142 <cppLoop+0x11e2>
		break;
 800810c:	bf00      	nop
 800810e:	e018      	b.n	8008142 <cppLoop+0x11e2>
		break;
 8008110:	bf00      	nop
 8008112:	e016      	b.n	8008142 <cppLoop+0x11e2>
		break;
 8008114:	bf00      	nop
 8008116:	e014      	b.n	8008142 <cppLoop+0x11e2>
		break;
 8008118:	bf00      	nop
 800811a:	e012      	b.n	8008142 <cppLoop+0x11e2>
		break;
 800811c:	bf00      	nop
 800811e:	e010      	b.n	8008142 <cppLoop+0x11e2>
		break;
 8008120:	bf00      	nop
 8008122:	e00e      	b.n	8008142 <cppLoop+0x11e2>
		break;
 8008124:	bf00      	nop
 8008126:	e00c      	b.n	8008142 <cppLoop+0x11e2>
		break;
 8008128:	bf00      	nop
 800812a:	e00a      	b.n	8008142 <cppLoop+0x11e2>
		break;
 800812c:	bf00      	nop
 800812e:	e008      	b.n	8008142 <cppLoop+0x11e2>
		break;
 8008130:	bf00      	nop
 8008132:	e006      	b.n	8008142 <cppLoop+0x11e2>
		break;
 8008134:	bf00      	nop
 8008136:	e004      	b.n	8008142 <cppLoop+0x11e2>
		break;
 8008138:	bf00      	nop
 800813a:	e002      	b.n	8008142 <cppLoop+0x11e2>
		break;
 800813c:	bf00      	nop
 800813e:	e000      	b.n	8008142 <cppLoop+0x11e2>
		break;
 8008140:	bf00      	nop

	}

	HAL_Delay(30);
 8008142:	201e      	movs	r0, #30
 8008144:	f000 f922 	bl	800838c <HAL_Delay>

}
 8008148:	bf00      	nop
 800814a:	3714      	adds	r7, #20
 800814c:	46bd      	mov	sp, r7
 800814e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008150:	200005d0 	.word	0x200005d0
 8008154:	08018754 	.word	0x08018754
 8008158:	08018718 	.word	0x08018718
 800815c:	200005c4 	.word	0x200005c4
 8008160:	3e99999a 	.word	0x3e99999a
 8008164:	20024aec 	.word	0x20024aec
 8008168:	0801875c 	.word	0x0801875c
 800816c:	2003c450 	.word	0x2003c450
 8008170:	08018658 	.word	0x08018658
 8008174:	20017da0 	.word	0x20017da0
 8008178:	08018768 	.word	0x08018768
 800817c:	2003c448 	.word	0x2003c448

08008180 <_Z41__static_initialization_and_destruction_0ii>:

void prameterSttingMode()
{

}
 8008180:	b580      	push	{r7, lr}
 8008182:	b088      	sub	sp, #32
 8008184:	af06      	add	r7, sp, #24
 8008186:	6078      	str	r0, [r7, #4]
 8008188:	6039      	str	r1, [r7, #0]
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2b01      	cmp	r3, #1
 800818e:	d13d      	bne.n	800820c <_Z41__static_initialization_and_destruction_0ii+0x8c>
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008196:	4293      	cmp	r3, r2
 8008198:	d138      	bne.n	800820c <_Z41__static_initialization_and_destruction_0ii+0x8c>
LineSensor line_sensor;
 800819a:	481e      	ldr	r0, [pc, #120]	; (8008214 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 800819c:	f7f9 ffa2 	bl	80020e4 <_ZN10LineSensorC1Ev>
SideSensor side_sensor;
 80081a0:	481d      	ldr	r0, [pc, #116]	; (8008218 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 80081a2:	f7fc fc65 	bl	8004a70 <_ZN10SideSensorC1Ev>
JoyStick joy_stick;
 80081a6:	481d      	ldr	r0, [pc, #116]	; (800821c <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 80081a8:	f7f9 fe38 	bl	8001e1c <_ZN8JoyStickC1Ev>
Motor motor;
 80081ac:	481c      	ldr	r0, [pc, #112]	; (8008220 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 80081ae:	f7fc f88a 	bl	80042c6 <_ZN5MotorC1Ev>
IMU imu;
 80081b2:	481c      	ldr	r0, [pc, #112]	; (8008224 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 80081b4:	f7f9 fc3e 	bl	8001a34 <_ZN3IMUC1Ev>
Logger logger;
 80081b8:	481b      	ldr	r0, [pc, #108]	; (8008228 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 80081ba:	f7fb fddf 	bl	8003d7c <_ZN6LoggerC1Ev>
Encoder encoder;
 80081be:	481b      	ldr	r0, [pc, #108]	; (800822c <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80081c0:	f7f8 ffc8 	bl	8001154 <_ZN7EncoderC1Ev>
VelocityCtrl velocity_ctrl(&motor, &encoder, &imu);
 80081c4:	4b17      	ldr	r3, [pc, #92]	; (8008224 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 80081c6:	4a19      	ldr	r2, [pc, #100]	; (800822c <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80081c8:	4915      	ldr	r1, [pc, #84]	; (8008220 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 80081ca:	4819      	ldr	r0, [pc, #100]	; (8008230 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80081cc:	f7fc fea4 	bl	8004f18 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>
Odometry odometry(&encoder, &imu, &velocity_ctrl);
 80081d0:	4b17      	ldr	r3, [pc, #92]	; (8008230 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80081d2:	4a14      	ldr	r2, [pc, #80]	; (8008224 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 80081d4:	4915      	ldr	r1, [pc, #84]	; (800822c <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80081d6:	4817      	ldr	r0, [pc, #92]	; (8008234 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 80081d8:	f7fc f95a 	bl	8004490 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>
LineTrace line_trace(&motor, &line_sensor, &velocity_ctrl, &side_sensor, &encoder, &odometry, &logger, &imu);
 80081dc:	4b11      	ldr	r3, [pc, #68]	; (8008224 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 80081de:	9304      	str	r3, [sp, #16]
 80081e0:	4b11      	ldr	r3, [pc, #68]	; (8008228 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 80081e2:	9303      	str	r3, [sp, #12]
 80081e4:	4b13      	ldr	r3, [pc, #76]	; (8008234 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 80081e6:	9302      	str	r3, [sp, #8]
 80081e8:	4b10      	ldr	r3, [pc, #64]	; (800822c <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80081ea:	9301      	str	r3, [sp, #4]
 80081ec:	4b0a      	ldr	r3, [pc, #40]	; (8008218 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 80081ee:	9300      	str	r3, [sp, #0]
 80081f0:	4b0f      	ldr	r3, [pc, #60]	; (8008230 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80081f2:	4a08      	ldr	r2, [pc, #32]	; (8008214 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 80081f4:	490a      	ldr	r1, [pc, #40]	; (8008220 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 80081f6:	4810      	ldr	r0, [pc, #64]	; (8008238 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 80081f8:	f7fa faa2 	bl	8002740 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMU>
SystemIdentification sys_ident(&logger, &motor);
 80081fc:	4a08      	ldr	r2, [pc, #32]	; (8008220 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 80081fe:	490a      	ldr	r1, [pc, #40]	; (8008228 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8008200:	480e      	ldr	r0, [pc, #56]	; (800823c <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 8008202:	f7fc fd85 	bl	8004d10 <_ZN20SystemIdentificationC1EP6LoggerP5Motor>
PathFollowing path_following;
 8008206:	480e      	ldr	r0, [pc, #56]	; (8008240 <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 8008208:	f7fc fac4 	bl	8004794 <_ZN13PathFollowingC1Ev>
}
 800820c:	bf00      	nop
 800820e:	3708      	adds	r7, #8
 8008210:	46bd      	mov	sp, r7
 8008212:	bd80      	pop	{r7, pc}
 8008214:	200002c4 	.word	0x200002c4
 8008218:	200005bc 	.word	0x200005bc
 800821c:	200005c4 	.word	0x200005c4
 8008220:	200005cc 	.word	0x200005cc
 8008224:	200005e0 	.word	0x200005e0
 8008228:	200005f4 	.word	0x200005f4
 800822c:	20017d04 	.word	0x20017d04
 8008230:	20017d24 	.word	0x20017d24
 8008234:	20017d60 	.word	0x20017d60
 8008238:	20017da0 	.word	0x20017da0
 800823c:	20024aec 	.word	0x20024aec
 8008240:	20024cf8 	.word	0x20024cf8

08008244 <_GLOBAL__sub_I_line_sensor>:
 8008244:	b580      	push	{r7, lr}
 8008246:	af00      	add	r7, sp, #0
 8008248:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800824c:	2001      	movs	r0, #1
 800824e:	f7ff ff97 	bl	8008180 <_Z41__static_initialization_and_destruction_0ii>
 8008252:	bd80      	pop	{r7, pc}

08008254 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8008254:	f8df d034 	ldr.w	sp, [pc, #52]	; 800828c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8008258:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800825a:	e003      	b.n	8008264 <LoopCopyDataInit>

0800825c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800825c:	4b0c      	ldr	r3, [pc, #48]	; (8008290 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800825e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8008260:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8008262:	3104      	adds	r1, #4

08008264 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8008264:	480b      	ldr	r0, [pc, #44]	; (8008294 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8008266:	4b0c      	ldr	r3, [pc, #48]	; (8008298 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8008268:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800826a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800826c:	d3f6      	bcc.n	800825c <CopyDataInit>
  ldr  r2, =_sbss
 800826e:	4a0b      	ldr	r2, [pc, #44]	; (800829c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8008270:	e002      	b.n	8008278 <LoopFillZerobss>

08008272 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8008272:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8008274:	f842 3b04 	str.w	r3, [r2], #4

08008278 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8008278:	4b09      	ldr	r3, [pc, #36]	; (80082a0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800827a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800827c:	d3f9      	bcc.n	8008272 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800827e:	f7fe fd45 	bl	8006d0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008282:	f00b fdd5 	bl	8013e30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008286:	f7fd f87f 	bl	8005388 <main>
  bx  lr    
 800828a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800828c:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8008290:	08018d68 	.word	0x08018d68
  ldr  r0, =_sdata
 8008294:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8008298:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 800829c:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 80082a0:	20040e38 	.word	0x20040e38

080082a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80082a4:	e7fe      	b.n	80082a4 <ADC_IRQHandler>
	...

080082a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80082ac:	4b0e      	ldr	r3, [pc, #56]	; (80082e8 <HAL_Init+0x40>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	4a0d      	ldr	r2, [pc, #52]	; (80082e8 <HAL_Init+0x40>)
 80082b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80082b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80082b8:	4b0b      	ldr	r3, [pc, #44]	; (80082e8 <HAL_Init+0x40>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	4a0a      	ldr	r2, [pc, #40]	; (80082e8 <HAL_Init+0x40>)
 80082be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80082c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80082c4:	4b08      	ldr	r3, [pc, #32]	; (80082e8 <HAL_Init+0x40>)
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	4a07      	ldr	r2, [pc, #28]	; (80082e8 <HAL_Init+0x40>)
 80082ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80082ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80082d0:	2003      	movs	r0, #3
 80082d2:	f000 fd51 	bl	8008d78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80082d6:	2000      	movs	r0, #0
 80082d8:	f000 f808 	bl	80082ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80082dc:	f7fd ff66 	bl	80061ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80082e0:	2300      	movs	r3, #0
}
 80082e2:	4618      	mov	r0, r3
 80082e4:	bd80      	pop	{r7, pc}
 80082e6:	bf00      	nop
 80082e8:	40023c00 	.word	0x40023c00

080082ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b082      	sub	sp, #8
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80082f4:	4b12      	ldr	r3, [pc, #72]	; (8008340 <HAL_InitTick+0x54>)
 80082f6:	681a      	ldr	r2, [r3, #0]
 80082f8:	4b12      	ldr	r3, [pc, #72]	; (8008344 <HAL_InitTick+0x58>)
 80082fa:	781b      	ldrb	r3, [r3, #0]
 80082fc:	4619      	mov	r1, r3
 80082fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008302:	fbb3 f3f1 	udiv	r3, r3, r1
 8008306:	fbb2 f3f3 	udiv	r3, r2, r3
 800830a:	4618      	mov	r0, r3
 800830c:	f000 fd69 	bl	8008de2 <HAL_SYSTICK_Config>
 8008310:	4603      	mov	r3, r0
 8008312:	2b00      	cmp	r3, #0
 8008314:	d001      	beq.n	800831a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008316:	2301      	movs	r3, #1
 8008318:	e00e      	b.n	8008338 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2b0f      	cmp	r3, #15
 800831e:	d80a      	bhi.n	8008336 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008320:	2200      	movs	r2, #0
 8008322:	6879      	ldr	r1, [r7, #4]
 8008324:	f04f 30ff 	mov.w	r0, #4294967295
 8008328:	f000 fd31 	bl	8008d8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800832c:	4a06      	ldr	r2, [pc, #24]	; (8008348 <HAL_InitTick+0x5c>)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008332:	2300      	movs	r3, #0
 8008334:	e000      	b.n	8008338 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008336:	2301      	movs	r3, #1
}
 8008338:	4618      	mov	r0, r3
 800833a:	3708      	adds	r7, #8
 800833c:	46bd      	mov	sp, r7
 800833e:	bd80      	pop	{r7, pc}
 8008340:	20000000 	.word	0x20000000
 8008344:	20000008 	.word	0x20000008
 8008348:	20000004 	.word	0x20000004

0800834c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800834c:	b480      	push	{r7}
 800834e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008350:	4b06      	ldr	r3, [pc, #24]	; (800836c <HAL_IncTick+0x20>)
 8008352:	781b      	ldrb	r3, [r3, #0]
 8008354:	461a      	mov	r2, r3
 8008356:	4b06      	ldr	r3, [pc, #24]	; (8008370 <HAL_IncTick+0x24>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	4413      	add	r3, r2
 800835c:	4a04      	ldr	r2, [pc, #16]	; (8008370 <HAL_IncTick+0x24>)
 800835e:	6013      	str	r3, [r2, #0]
}
 8008360:	bf00      	nop
 8008362:	46bd      	mov	sp, r7
 8008364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008368:	4770      	bx	lr
 800836a:	bf00      	nop
 800836c:	20000008 	.word	0x20000008
 8008370:	2003edc0 	.word	0x2003edc0

08008374 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008374:	b480      	push	{r7}
 8008376:	af00      	add	r7, sp, #0
  return uwTick;
 8008378:	4b03      	ldr	r3, [pc, #12]	; (8008388 <HAL_GetTick+0x14>)
 800837a:	681b      	ldr	r3, [r3, #0]
}
 800837c:	4618      	mov	r0, r3
 800837e:	46bd      	mov	sp, r7
 8008380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008384:	4770      	bx	lr
 8008386:	bf00      	nop
 8008388:	2003edc0 	.word	0x2003edc0

0800838c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b084      	sub	sp, #16
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008394:	f7ff ffee 	bl	8008374 <HAL_GetTick>
 8008398:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083a4:	d005      	beq.n	80083b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80083a6:	4b09      	ldr	r3, [pc, #36]	; (80083cc <HAL_Delay+0x40>)
 80083a8:	781b      	ldrb	r3, [r3, #0]
 80083aa:	461a      	mov	r2, r3
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	4413      	add	r3, r2
 80083b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80083b2:	bf00      	nop
 80083b4:	f7ff ffde 	bl	8008374 <HAL_GetTick>
 80083b8:	4602      	mov	r2, r0
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	1ad3      	subs	r3, r2, r3
 80083be:	68fa      	ldr	r2, [r7, #12]
 80083c0:	429a      	cmp	r2, r3
 80083c2:	d8f7      	bhi.n	80083b4 <HAL_Delay+0x28>
  {
  }
}
 80083c4:	bf00      	nop
 80083c6:	3710      	adds	r7, #16
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bd80      	pop	{r7, pc}
 80083cc:	20000008 	.word	0x20000008

080083d0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b084      	sub	sp, #16
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80083d8:	2300      	movs	r3, #0
 80083da:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d101      	bne.n	80083e6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80083e2:	2301      	movs	r3, #1
 80083e4:	e033      	b.n	800844e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d109      	bne.n	8008402 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f7fd ff04 	bl	80061fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2200      	movs	r2, #0
 80083f8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2200      	movs	r2, #0
 80083fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008406:	f003 0310 	and.w	r3, r3, #16
 800840a:	2b00      	cmp	r3, #0
 800840c:	d118      	bne.n	8008440 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008412:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8008416:	f023 0302 	bic.w	r3, r3, #2
 800841a:	f043 0202 	orr.w	r2, r3, #2
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f000 fa5a 	bl	80088dc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2200      	movs	r2, #0
 800842c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008432:	f023 0303 	bic.w	r3, r3, #3
 8008436:	f043 0201 	orr.w	r2, r3, #1
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	641a      	str	r2, [r3, #64]	; 0x40
 800843e:	e001      	b.n	8008444 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8008440:	2301      	movs	r3, #1
 8008442:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2200      	movs	r2, #0
 8008448:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800844c:	7bfb      	ldrb	r3, [r7, #15]
}
 800844e:	4618      	mov	r0, r3
 8008450:	3710      	adds	r7, #16
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}
	...

08008458 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b086      	sub	sp, #24
 800845c:	af00      	add	r7, sp, #0
 800845e:	60f8      	str	r0, [r7, #12]
 8008460:	60b9      	str	r1, [r7, #8]
 8008462:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8008464:	2300      	movs	r3, #0
 8008466:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800846e:	2b01      	cmp	r3, #1
 8008470:	d101      	bne.n	8008476 <HAL_ADC_Start_DMA+0x1e>
 8008472:	2302      	movs	r3, #2
 8008474:	e0cc      	b.n	8008610 <HAL_ADC_Start_DMA+0x1b8>
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	2201      	movs	r2, #1
 800847a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	689b      	ldr	r3, [r3, #8]
 8008484:	f003 0301 	and.w	r3, r3, #1
 8008488:	2b01      	cmp	r3, #1
 800848a:	d018      	beq.n	80084be <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	689a      	ldr	r2, [r3, #8]
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f042 0201 	orr.w	r2, r2, #1
 800849a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800849c:	4b5e      	ldr	r3, [pc, #376]	; (8008618 <HAL_ADC_Start_DMA+0x1c0>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4a5e      	ldr	r2, [pc, #376]	; (800861c <HAL_ADC_Start_DMA+0x1c4>)
 80084a2:	fba2 2303 	umull	r2, r3, r2, r3
 80084a6:	0c9a      	lsrs	r2, r3, #18
 80084a8:	4613      	mov	r3, r2
 80084aa:	005b      	lsls	r3, r3, #1
 80084ac:	4413      	add	r3, r2
 80084ae:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80084b0:	e002      	b.n	80084b8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80084b2:	693b      	ldr	r3, [r7, #16]
 80084b4:	3b01      	subs	r3, #1
 80084b6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d1f9      	bne.n	80084b2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	689b      	ldr	r3, [r3, #8]
 80084c4:	f003 0301 	and.w	r3, r3, #1
 80084c8:	2b01      	cmp	r3, #1
 80084ca:	f040 80a0 	bne.w	800860e <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084d2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80084d6:	f023 0301 	bic.w	r3, r3, #1
 80084da:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	685b      	ldr	r3, [r3, #4]
 80084e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d007      	beq.n	8008500 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084f4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80084f8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008504:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008508:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800850c:	d106      	bne.n	800851c <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008512:	f023 0206 	bic.w	r2, r3, #6
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	645a      	str	r2, [r3, #68]	; 0x44
 800851a:	e002      	b.n	8008522 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	2200      	movs	r2, #0
 8008520:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	2200      	movs	r2, #0
 8008526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800852a:	4b3d      	ldr	r3, [pc, #244]	; (8008620 <HAL_ADC_Start_DMA+0x1c8>)
 800852c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008532:	4a3c      	ldr	r2, [pc, #240]	; (8008624 <HAL_ADC_Start_DMA+0x1cc>)
 8008534:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800853a:	4a3b      	ldr	r2, [pc, #236]	; (8008628 <HAL_ADC_Start_DMA+0x1d0>)
 800853c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008542:	4a3a      	ldr	r2, [pc, #232]	; (800862c <HAL_ADC_Start_DMA+0x1d4>)
 8008544:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800854e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	685a      	ldr	r2, [r3, #4]
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800855e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	689a      	ldr	r2, [r3, #8]
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800856e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	334c      	adds	r3, #76	; 0x4c
 800857a:	4619      	mov	r1, r3
 800857c:	68ba      	ldr	r2, [r7, #8]
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	f000 fcea 	bl	8008f58 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8008584:	697b      	ldr	r3, [r7, #20]
 8008586:	685b      	ldr	r3, [r3, #4]
 8008588:	f003 031f 	and.w	r3, r3, #31
 800858c:	2b00      	cmp	r3, #0
 800858e:	d12a      	bne.n	80085e6 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	4a26      	ldr	r2, [pc, #152]	; (8008630 <HAL_ADC_Start_DMA+0x1d8>)
 8008596:	4293      	cmp	r3, r2
 8008598:	d015      	beq.n	80085c6 <HAL_ADC_Start_DMA+0x16e>
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	4a25      	ldr	r2, [pc, #148]	; (8008634 <HAL_ADC_Start_DMA+0x1dc>)
 80085a0:	4293      	cmp	r3, r2
 80085a2:	d105      	bne.n	80085b0 <HAL_ADC_Start_DMA+0x158>
 80085a4:	4b1e      	ldr	r3, [pc, #120]	; (8008620 <HAL_ADC_Start_DMA+0x1c8>)
 80085a6:	685b      	ldr	r3, [r3, #4]
 80085a8:	f003 031f 	and.w	r3, r3, #31
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d00a      	beq.n	80085c6 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4a20      	ldr	r2, [pc, #128]	; (8008638 <HAL_ADC_Start_DMA+0x1e0>)
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d129      	bne.n	800860e <HAL_ADC_Start_DMA+0x1b6>
 80085ba:	4b19      	ldr	r3, [pc, #100]	; (8008620 <HAL_ADC_Start_DMA+0x1c8>)
 80085bc:	685b      	ldr	r3, [r3, #4]
 80085be:	f003 031f 	and.w	r3, r3, #31
 80085c2:	2b0f      	cmp	r3, #15
 80085c4:	d823      	bhi.n	800860e <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	689b      	ldr	r3, [r3, #8]
 80085cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d11c      	bne.n	800860e <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	689a      	ldr	r2, [r3, #8]
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80085e2:	609a      	str	r2, [r3, #8]
 80085e4:	e013      	b.n	800860e <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	4a11      	ldr	r2, [pc, #68]	; (8008630 <HAL_ADC_Start_DMA+0x1d8>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d10e      	bne.n	800860e <HAL_ADC_Start_DMA+0x1b6>
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	689b      	ldr	r3, [r3, #8]
 80085f6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d107      	bne.n	800860e <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	689a      	ldr	r2, [r3, #8]
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800860c:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800860e:	2300      	movs	r3, #0
}
 8008610:	4618      	mov	r0, r3
 8008612:	3718      	adds	r7, #24
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}
 8008618:	20000000 	.word	0x20000000
 800861c:	431bde83 	.word	0x431bde83
 8008620:	40012300 	.word	0x40012300
 8008624:	08008ad5 	.word	0x08008ad5
 8008628:	08008b8f 	.word	0x08008b8f
 800862c:	08008bab 	.word	0x08008bab
 8008630:	40012000 	.word	0x40012000
 8008634:	40012100 	.word	0x40012100
 8008638:	40012200 	.word	0x40012200

0800863c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800863c:	b480      	push	{r7}
 800863e:	b083      	sub	sp, #12
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8008644:	bf00      	nop
 8008646:	370c      	adds	r7, #12
 8008648:	46bd      	mov	sp, r7
 800864a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864e:	4770      	bx	lr

08008650 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8008650:	b480      	push	{r7}
 8008652:	b083      	sub	sp, #12
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8008658:	bf00      	nop
 800865a:	370c      	adds	r7, #12
 800865c:	46bd      	mov	sp, r7
 800865e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008662:	4770      	bx	lr

08008664 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8008664:	b480      	push	{r7}
 8008666:	b083      	sub	sp, #12
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800866c:	bf00      	nop
 800866e:	370c      	adds	r7, #12
 8008670:	46bd      	mov	sp, r7
 8008672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008676:	4770      	bx	lr

08008678 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8008678:	b480      	push	{r7}
 800867a:	b085      	sub	sp, #20
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
 8008680:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8008682:	2300      	movs	r3, #0
 8008684:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800868c:	2b01      	cmp	r3, #1
 800868e:	d101      	bne.n	8008694 <HAL_ADC_ConfigChannel+0x1c>
 8008690:	2302      	movs	r3, #2
 8008692:	e113      	b.n	80088bc <HAL_ADC_ConfigChannel+0x244>
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2201      	movs	r2, #1
 8008698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	2b09      	cmp	r3, #9
 80086a2:	d925      	bls.n	80086f0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	68d9      	ldr	r1, [r3, #12]
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	b29b      	uxth	r3, r3
 80086b0:	461a      	mov	r2, r3
 80086b2:	4613      	mov	r3, r2
 80086b4:	005b      	lsls	r3, r3, #1
 80086b6:	4413      	add	r3, r2
 80086b8:	3b1e      	subs	r3, #30
 80086ba:	2207      	movs	r2, #7
 80086bc:	fa02 f303 	lsl.w	r3, r2, r3
 80086c0:	43da      	mvns	r2, r3
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	400a      	ands	r2, r1
 80086c8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	68d9      	ldr	r1, [r3, #12]
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	689a      	ldr	r2, [r3, #8]
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	b29b      	uxth	r3, r3
 80086da:	4618      	mov	r0, r3
 80086dc:	4603      	mov	r3, r0
 80086de:	005b      	lsls	r3, r3, #1
 80086e0:	4403      	add	r3, r0
 80086e2:	3b1e      	subs	r3, #30
 80086e4:	409a      	lsls	r2, r3
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	430a      	orrs	r2, r1
 80086ec:	60da      	str	r2, [r3, #12]
 80086ee:	e022      	b.n	8008736 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	6919      	ldr	r1, [r3, #16]
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	b29b      	uxth	r3, r3
 80086fc:	461a      	mov	r2, r3
 80086fe:	4613      	mov	r3, r2
 8008700:	005b      	lsls	r3, r3, #1
 8008702:	4413      	add	r3, r2
 8008704:	2207      	movs	r2, #7
 8008706:	fa02 f303 	lsl.w	r3, r2, r3
 800870a:	43da      	mvns	r2, r3
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	400a      	ands	r2, r1
 8008712:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	6919      	ldr	r1, [r3, #16]
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	689a      	ldr	r2, [r3, #8]
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	b29b      	uxth	r3, r3
 8008724:	4618      	mov	r0, r3
 8008726:	4603      	mov	r3, r0
 8008728:	005b      	lsls	r3, r3, #1
 800872a:	4403      	add	r3, r0
 800872c:	409a      	lsls	r2, r3
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	430a      	orrs	r2, r1
 8008734:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	685b      	ldr	r3, [r3, #4]
 800873a:	2b06      	cmp	r3, #6
 800873c:	d824      	bhi.n	8008788 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	685a      	ldr	r2, [r3, #4]
 8008748:	4613      	mov	r3, r2
 800874a:	009b      	lsls	r3, r3, #2
 800874c:	4413      	add	r3, r2
 800874e:	3b05      	subs	r3, #5
 8008750:	221f      	movs	r2, #31
 8008752:	fa02 f303 	lsl.w	r3, r2, r3
 8008756:	43da      	mvns	r2, r3
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	400a      	ands	r2, r1
 800875e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	b29b      	uxth	r3, r3
 800876c:	4618      	mov	r0, r3
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	685a      	ldr	r2, [r3, #4]
 8008772:	4613      	mov	r3, r2
 8008774:	009b      	lsls	r3, r3, #2
 8008776:	4413      	add	r3, r2
 8008778:	3b05      	subs	r3, #5
 800877a:	fa00 f203 	lsl.w	r2, r0, r3
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	430a      	orrs	r2, r1
 8008784:	635a      	str	r2, [r3, #52]	; 0x34
 8008786:	e04c      	b.n	8008822 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	685b      	ldr	r3, [r3, #4]
 800878c:	2b0c      	cmp	r3, #12
 800878e:	d824      	bhi.n	80087da <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	685a      	ldr	r2, [r3, #4]
 800879a:	4613      	mov	r3, r2
 800879c:	009b      	lsls	r3, r3, #2
 800879e:	4413      	add	r3, r2
 80087a0:	3b23      	subs	r3, #35	; 0x23
 80087a2:	221f      	movs	r2, #31
 80087a4:	fa02 f303 	lsl.w	r3, r2, r3
 80087a8:	43da      	mvns	r2, r3
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	400a      	ands	r2, r1
 80087b0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	b29b      	uxth	r3, r3
 80087be:	4618      	mov	r0, r3
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	685a      	ldr	r2, [r3, #4]
 80087c4:	4613      	mov	r3, r2
 80087c6:	009b      	lsls	r3, r3, #2
 80087c8:	4413      	add	r3, r2
 80087ca:	3b23      	subs	r3, #35	; 0x23
 80087cc:	fa00 f203 	lsl.w	r2, r0, r3
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	430a      	orrs	r2, r1
 80087d6:	631a      	str	r2, [r3, #48]	; 0x30
 80087d8:	e023      	b.n	8008822 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	685a      	ldr	r2, [r3, #4]
 80087e4:	4613      	mov	r3, r2
 80087e6:	009b      	lsls	r3, r3, #2
 80087e8:	4413      	add	r3, r2
 80087ea:	3b41      	subs	r3, #65	; 0x41
 80087ec:	221f      	movs	r2, #31
 80087ee:	fa02 f303 	lsl.w	r3, r2, r3
 80087f2:	43da      	mvns	r2, r3
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	400a      	ands	r2, r1
 80087fa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	b29b      	uxth	r3, r3
 8008808:	4618      	mov	r0, r3
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	685a      	ldr	r2, [r3, #4]
 800880e:	4613      	mov	r3, r2
 8008810:	009b      	lsls	r3, r3, #2
 8008812:	4413      	add	r3, r2
 8008814:	3b41      	subs	r3, #65	; 0x41
 8008816:	fa00 f203 	lsl.w	r2, r0, r3
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	430a      	orrs	r2, r1
 8008820:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008822:	4b29      	ldr	r3, [pc, #164]	; (80088c8 <HAL_ADC_ConfigChannel+0x250>)
 8008824:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	4a28      	ldr	r2, [pc, #160]	; (80088cc <HAL_ADC_ConfigChannel+0x254>)
 800882c:	4293      	cmp	r3, r2
 800882e:	d10f      	bne.n	8008850 <HAL_ADC_ConfigChannel+0x1d8>
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	2b12      	cmp	r3, #18
 8008836:	d10b      	bne.n	8008850 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	685b      	ldr	r3, [r3, #4]
 800883c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	685b      	ldr	r3, [r3, #4]
 8008848:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	4a1d      	ldr	r2, [pc, #116]	; (80088cc <HAL_ADC_ConfigChannel+0x254>)
 8008856:	4293      	cmp	r3, r2
 8008858:	d12b      	bne.n	80088b2 <HAL_ADC_ConfigChannel+0x23a>
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	4a1c      	ldr	r2, [pc, #112]	; (80088d0 <HAL_ADC_ConfigChannel+0x258>)
 8008860:	4293      	cmp	r3, r2
 8008862:	d003      	beq.n	800886c <HAL_ADC_ConfigChannel+0x1f4>
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	2b11      	cmp	r3, #17
 800886a:	d122      	bne.n	80088b2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	685b      	ldr	r3, [r3, #4]
 8008870:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	685b      	ldr	r3, [r3, #4]
 800887c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	4a11      	ldr	r2, [pc, #68]	; (80088d0 <HAL_ADC_ConfigChannel+0x258>)
 800888a:	4293      	cmp	r3, r2
 800888c:	d111      	bne.n	80088b2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800888e:	4b11      	ldr	r3, [pc, #68]	; (80088d4 <HAL_ADC_ConfigChannel+0x25c>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	4a11      	ldr	r2, [pc, #68]	; (80088d8 <HAL_ADC_ConfigChannel+0x260>)
 8008894:	fba2 2303 	umull	r2, r3, r2, r3
 8008898:	0c9a      	lsrs	r2, r3, #18
 800889a:	4613      	mov	r3, r2
 800889c:	009b      	lsls	r3, r3, #2
 800889e:	4413      	add	r3, r2
 80088a0:	005b      	lsls	r3, r3, #1
 80088a2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80088a4:	e002      	b.n	80088ac <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	3b01      	subs	r3, #1
 80088aa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d1f9      	bne.n	80088a6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2200      	movs	r2, #0
 80088b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80088ba:	2300      	movs	r3, #0
}
 80088bc:	4618      	mov	r0, r3
 80088be:	3714      	adds	r7, #20
 80088c0:	46bd      	mov	sp, r7
 80088c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c6:	4770      	bx	lr
 80088c8:	40012300 	.word	0x40012300
 80088cc:	40012000 	.word	0x40012000
 80088d0:	10000012 	.word	0x10000012
 80088d4:	20000000 	.word	0x20000000
 80088d8:	431bde83 	.word	0x431bde83

080088dc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80088dc:	b480      	push	{r7}
 80088de:	b085      	sub	sp, #20
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80088e4:	4b79      	ldr	r3, [pc, #484]	; (8008acc <ADC_Init+0x1f0>)
 80088e6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	685b      	ldr	r3, [r3, #4]
 80088ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	685a      	ldr	r2, [r3, #4]
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	685b      	ldr	r3, [r3, #4]
 80088fc:	431a      	orrs	r2, r3
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	685a      	ldr	r2, [r3, #4]
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008910:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	6859      	ldr	r1, [r3, #4]
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	691b      	ldr	r3, [r3, #16]
 800891c:	021a      	lsls	r2, r3, #8
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	430a      	orrs	r2, r1
 8008924:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	685a      	ldr	r2, [r3, #4]
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8008934:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	6859      	ldr	r1, [r3, #4]
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	689a      	ldr	r2, [r3, #8]
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	430a      	orrs	r2, r1
 8008946:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	689a      	ldr	r2, [r3, #8]
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008956:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	6899      	ldr	r1, [r3, #8]
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	68da      	ldr	r2, [r3, #12]
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	430a      	orrs	r2, r1
 8008968:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800896e:	4a58      	ldr	r2, [pc, #352]	; (8008ad0 <ADC_Init+0x1f4>)
 8008970:	4293      	cmp	r3, r2
 8008972:	d022      	beq.n	80089ba <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	689a      	ldr	r2, [r3, #8]
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008982:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	6899      	ldr	r1, [r3, #8]
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	430a      	orrs	r2, r1
 8008994:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	689a      	ldr	r2, [r3, #8]
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80089a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	6899      	ldr	r1, [r3, #8]
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	430a      	orrs	r2, r1
 80089b6:	609a      	str	r2, [r3, #8]
 80089b8:	e00f      	b.n	80089da <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	689a      	ldr	r2, [r3, #8]
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80089c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	689a      	ldr	r2, [r3, #8]
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80089d8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	689a      	ldr	r2, [r3, #8]
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f022 0202 	bic.w	r2, r2, #2
 80089e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	6899      	ldr	r1, [r3, #8]
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	7e1b      	ldrb	r3, [r3, #24]
 80089f4:	005a      	lsls	r2, r3, #1
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	430a      	orrs	r2, r1
 80089fc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d01b      	beq.n	8008a40 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	685a      	ldr	r2, [r3, #4]
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008a16:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	685a      	ldr	r2, [r3, #4]
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8008a26:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	6859      	ldr	r1, [r3, #4]
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a32:	3b01      	subs	r3, #1
 8008a34:	035a      	lsls	r2, r3, #13
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	430a      	orrs	r2, r1
 8008a3c:	605a      	str	r2, [r3, #4]
 8008a3e:	e007      	b.n	8008a50 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	685a      	ldr	r2, [r3, #4]
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008a4e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8008a5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	69db      	ldr	r3, [r3, #28]
 8008a6a:	3b01      	subs	r3, #1
 8008a6c:	051a      	lsls	r2, r3, #20
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	430a      	orrs	r2, r1
 8008a74:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	689a      	ldr	r2, [r3, #8]
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008a84:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	6899      	ldr	r1, [r3, #8]
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008a92:	025a      	lsls	r2, r3, #9
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	430a      	orrs	r2, r1
 8008a9a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	689a      	ldr	r2, [r3, #8]
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008aaa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	6899      	ldr	r1, [r3, #8]
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	695b      	ldr	r3, [r3, #20]
 8008ab6:	029a      	lsls	r2, r3, #10
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	430a      	orrs	r2, r1
 8008abe:	609a      	str	r2, [r3, #8]
}
 8008ac0:	bf00      	nop
 8008ac2:	3714      	adds	r7, #20
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aca:	4770      	bx	lr
 8008acc:	40012300 	.word	0x40012300
 8008ad0:	0f000001 	.word	0x0f000001

08008ad4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b084      	sub	sp, #16
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ae0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ae6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d13c      	bne.n	8008b68 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008af2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	689b      	ldr	r3, [r3, #8]
 8008b00:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d12b      	bne.n	8008b60 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d127      	bne.n	8008b60 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b16:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d006      	beq.n	8008b2c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	689b      	ldr	r3, [r3, #8]
 8008b24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d119      	bne.n	8008b60 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	685a      	ldr	r2, [r3, #4]
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f022 0220 	bic.w	r2, r2, #32
 8008b3a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b40:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d105      	bne.n	8008b60 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b58:	f043 0201 	orr.w	r2, r3, #1
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8008b60:	68f8      	ldr	r0, [r7, #12]
 8008b62:	f7ff fd6b 	bl	800863c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8008b66:	e00e      	b.n	8008b86 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b6c:	f003 0310 	and.w	r3, r3, #16
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d003      	beq.n	8008b7c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8008b74:	68f8      	ldr	r0, [r7, #12]
 8008b76:	f7ff fd75 	bl	8008664 <HAL_ADC_ErrorCallback>
}
 8008b7a:	e004      	b.n	8008b86 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	4798      	blx	r3
}
 8008b86:	bf00      	nop
 8008b88:	3710      	adds	r7, #16
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bd80      	pop	{r7, pc}

08008b8e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8008b8e:	b580      	push	{r7, lr}
 8008b90:	b084      	sub	sp, #16
 8008b92:	af00      	add	r7, sp, #0
 8008b94:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b9a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8008b9c:	68f8      	ldr	r0, [r7, #12]
 8008b9e:	f7ff fd57 	bl	8008650 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008ba2:	bf00      	nop
 8008ba4:	3710      	adds	r7, #16
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}

08008baa <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8008baa:	b580      	push	{r7, lr}
 8008bac:	b084      	sub	sp, #16
 8008bae:	af00      	add	r7, sp, #0
 8008bb0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bb6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	2240      	movs	r2, #64	; 0x40
 8008bbc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bc2:	f043 0204 	orr.w	r2, r3, #4
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8008bca:	68f8      	ldr	r0, [r7, #12]
 8008bcc:	f7ff fd4a 	bl	8008664 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8008bd0:	bf00      	nop
 8008bd2:	3710      	adds	r7, #16
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bd80      	pop	{r7, pc}

08008bd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008bd8:	b480      	push	{r7}
 8008bda:	b085      	sub	sp, #20
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	f003 0307 	and.w	r3, r3, #7
 8008be6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008be8:	4b0c      	ldr	r3, [pc, #48]	; (8008c1c <__NVIC_SetPriorityGrouping+0x44>)
 8008bea:	68db      	ldr	r3, [r3, #12]
 8008bec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008bee:	68ba      	ldr	r2, [r7, #8]
 8008bf0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008bf4:	4013      	ands	r3, r2
 8008bf6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008bfc:	68bb      	ldr	r3, [r7, #8]
 8008bfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008c00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008c04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008c0a:	4a04      	ldr	r2, [pc, #16]	; (8008c1c <__NVIC_SetPriorityGrouping+0x44>)
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	60d3      	str	r3, [r2, #12]
}
 8008c10:	bf00      	nop
 8008c12:	3714      	adds	r7, #20
 8008c14:	46bd      	mov	sp, r7
 8008c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1a:	4770      	bx	lr
 8008c1c:	e000ed00 	.word	0xe000ed00

08008c20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008c20:	b480      	push	{r7}
 8008c22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008c24:	4b04      	ldr	r3, [pc, #16]	; (8008c38 <__NVIC_GetPriorityGrouping+0x18>)
 8008c26:	68db      	ldr	r3, [r3, #12]
 8008c28:	0a1b      	lsrs	r3, r3, #8
 8008c2a:	f003 0307 	and.w	r3, r3, #7
}
 8008c2e:	4618      	mov	r0, r3
 8008c30:	46bd      	mov	sp, r7
 8008c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c36:	4770      	bx	lr
 8008c38:	e000ed00 	.word	0xe000ed00

08008c3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	b083      	sub	sp, #12
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	4603      	mov	r3, r0
 8008c44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	db0b      	blt.n	8008c66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008c4e:	79fb      	ldrb	r3, [r7, #7]
 8008c50:	f003 021f 	and.w	r2, r3, #31
 8008c54:	4907      	ldr	r1, [pc, #28]	; (8008c74 <__NVIC_EnableIRQ+0x38>)
 8008c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c5a:	095b      	lsrs	r3, r3, #5
 8008c5c:	2001      	movs	r0, #1
 8008c5e:	fa00 f202 	lsl.w	r2, r0, r2
 8008c62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8008c66:	bf00      	nop
 8008c68:	370c      	adds	r7, #12
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c70:	4770      	bx	lr
 8008c72:	bf00      	nop
 8008c74:	e000e100 	.word	0xe000e100

08008c78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008c78:	b480      	push	{r7}
 8008c7a:	b083      	sub	sp, #12
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	4603      	mov	r3, r0
 8008c80:	6039      	str	r1, [r7, #0]
 8008c82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008c84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	db0a      	blt.n	8008ca2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	b2da      	uxtb	r2, r3
 8008c90:	490c      	ldr	r1, [pc, #48]	; (8008cc4 <__NVIC_SetPriority+0x4c>)
 8008c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c96:	0112      	lsls	r2, r2, #4
 8008c98:	b2d2      	uxtb	r2, r2
 8008c9a:	440b      	add	r3, r1
 8008c9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008ca0:	e00a      	b.n	8008cb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	b2da      	uxtb	r2, r3
 8008ca6:	4908      	ldr	r1, [pc, #32]	; (8008cc8 <__NVIC_SetPriority+0x50>)
 8008ca8:	79fb      	ldrb	r3, [r7, #7]
 8008caa:	f003 030f 	and.w	r3, r3, #15
 8008cae:	3b04      	subs	r3, #4
 8008cb0:	0112      	lsls	r2, r2, #4
 8008cb2:	b2d2      	uxtb	r2, r2
 8008cb4:	440b      	add	r3, r1
 8008cb6:	761a      	strb	r2, [r3, #24]
}
 8008cb8:	bf00      	nop
 8008cba:	370c      	adds	r7, #12
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc2:	4770      	bx	lr
 8008cc4:	e000e100 	.word	0xe000e100
 8008cc8:	e000ed00 	.word	0xe000ed00

08008ccc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008ccc:	b480      	push	{r7}
 8008cce:	b089      	sub	sp, #36	; 0x24
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	60f8      	str	r0, [r7, #12]
 8008cd4:	60b9      	str	r1, [r7, #8]
 8008cd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	f003 0307 	and.w	r3, r3, #7
 8008cde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008ce0:	69fb      	ldr	r3, [r7, #28]
 8008ce2:	f1c3 0307 	rsb	r3, r3, #7
 8008ce6:	2b04      	cmp	r3, #4
 8008ce8:	bf28      	it	cs
 8008cea:	2304      	movcs	r3, #4
 8008cec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008cee:	69fb      	ldr	r3, [r7, #28]
 8008cf0:	3304      	adds	r3, #4
 8008cf2:	2b06      	cmp	r3, #6
 8008cf4:	d902      	bls.n	8008cfc <NVIC_EncodePriority+0x30>
 8008cf6:	69fb      	ldr	r3, [r7, #28]
 8008cf8:	3b03      	subs	r3, #3
 8008cfa:	e000      	b.n	8008cfe <NVIC_EncodePriority+0x32>
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008d00:	f04f 32ff 	mov.w	r2, #4294967295
 8008d04:	69bb      	ldr	r3, [r7, #24]
 8008d06:	fa02 f303 	lsl.w	r3, r2, r3
 8008d0a:	43da      	mvns	r2, r3
 8008d0c:	68bb      	ldr	r3, [r7, #8]
 8008d0e:	401a      	ands	r2, r3
 8008d10:	697b      	ldr	r3, [r7, #20]
 8008d12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008d14:	f04f 31ff 	mov.w	r1, #4294967295
 8008d18:	697b      	ldr	r3, [r7, #20]
 8008d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8008d1e:	43d9      	mvns	r1, r3
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008d24:	4313      	orrs	r3, r2
         );
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	3724      	adds	r7, #36	; 0x24
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d30:	4770      	bx	lr
	...

08008d34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b082      	sub	sp, #8
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	3b01      	subs	r3, #1
 8008d40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008d44:	d301      	bcc.n	8008d4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008d46:	2301      	movs	r3, #1
 8008d48:	e00f      	b.n	8008d6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008d4a:	4a0a      	ldr	r2, [pc, #40]	; (8008d74 <SysTick_Config+0x40>)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	3b01      	subs	r3, #1
 8008d50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008d52:	210f      	movs	r1, #15
 8008d54:	f04f 30ff 	mov.w	r0, #4294967295
 8008d58:	f7ff ff8e 	bl	8008c78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008d5c:	4b05      	ldr	r3, [pc, #20]	; (8008d74 <SysTick_Config+0x40>)
 8008d5e:	2200      	movs	r2, #0
 8008d60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008d62:	4b04      	ldr	r3, [pc, #16]	; (8008d74 <SysTick_Config+0x40>)
 8008d64:	2207      	movs	r2, #7
 8008d66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008d68:	2300      	movs	r3, #0
}
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	3708      	adds	r7, #8
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	bd80      	pop	{r7, pc}
 8008d72:	bf00      	nop
 8008d74:	e000e010 	.word	0xe000e010

08008d78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b082      	sub	sp, #8
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008d80:	6878      	ldr	r0, [r7, #4]
 8008d82:	f7ff ff29 	bl	8008bd8 <__NVIC_SetPriorityGrouping>
}
 8008d86:	bf00      	nop
 8008d88:	3708      	adds	r7, #8
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	bd80      	pop	{r7, pc}

08008d8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008d8e:	b580      	push	{r7, lr}
 8008d90:	b086      	sub	sp, #24
 8008d92:	af00      	add	r7, sp, #0
 8008d94:	4603      	mov	r3, r0
 8008d96:	60b9      	str	r1, [r7, #8]
 8008d98:	607a      	str	r2, [r7, #4]
 8008d9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008da0:	f7ff ff3e 	bl	8008c20 <__NVIC_GetPriorityGrouping>
 8008da4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008da6:	687a      	ldr	r2, [r7, #4]
 8008da8:	68b9      	ldr	r1, [r7, #8]
 8008daa:	6978      	ldr	r0, [r7, #20]
 8008dac:	f7ff ff8e 	bl	8008ccc <NVIC_EncodePriority>
 8008db0:	4602      	mov	r2, r0
 8008db2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008db6:	4611      	mov	r1, r2
 8008db8:	4618      	mov	r0, r3
 8008dba:	f7ff ff5d 	bl	8008c78 <__NVIC_SetPriority>
}
 8008dbe:	bf00      	nop
 8008dc0:	3718      	adds	r7, #24
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd80      	pop	{r7, pc}

08008dc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008dc6:	b580      	push	{r7, lr}
 8008dc8:	b082      	sub	sp, #8
 8008dca:	af00      	add	r7, sp, #0
 8008dcc:	4603      	mov	r3, r0
 8008dce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008dd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	f7ff ff31 	bl	8008c3c <__NVIC_EnableIRQ>
}
 8008dda:	bf00      	nop
 8008ddc:	3708      	adds	r7, #8
 8008dde:	46bd      	mov	sp, r7
 8008de0:	bd80      	pop	{r7, pc}

08008de2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008de2:	b580      	push	{r7, lr}
 8008de4:	b082      	sub	sp, #8
 8008de6:	af00      	add	r7, sp, #0
 8008de8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f7ff ffa2 	bl	8008d34 <SysTick_Config>
 8008df0:	4603      	mov	r3, r0
}
 8008df2:	4618      	mov	r0, r3
 8008df4:	3708      	adds	r7, #8
 8008df6:	46bd      	mov	sp, r7
 8008df8:	bd80      	pop	{r7, pc}
	...

08008dfc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b086      	sub	sp, #24
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8008e04:	2300      	movs	r3, #0
 8008e06:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8008e08:	f7ff fab4 	bl	8008374 <HAL_GetTick>
 8008e0c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d101      	bne.n	8008e18 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8008e14:	2301      	movs	r3, #1
 8008e16:	e099      	b.n	8008f4c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2202      	movs	r2, #2
 8008e24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	681a      	ldr	r2, [r3, #0]
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f022 0201 	bic.w	r2, r2, #1
 8008e36:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008e38:	e00f      	b.n	8008e5a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008e3a:	f7ff fa9b 	bl	8008374 <HAL_GetTick>
 8008e3e:	4602      	mov	r2, r0
 8008e40:	693b      	ldr	r3, [r7, #16]
 8008e42:	1ad3      	subs	r3, r2, r3
 8008e44:	2b05      	cmp	r3, #5
 8008e46:	d908      	bls.n	8008e5a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2220      	movs	r2, #32
 8008e4c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2203      	movs	r2, #3
 8008e52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8008e56:	2303      	movs	r3, #3
 8008e58:	e078      	b.n	8008f4c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f003 0301 	and.w	r3, r3, #1
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d1e8      	bne.n	8008e3a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8008e70:	697a      	ldr	r2, [r7, #20]
 8008e72:	4b38      	ldr	r3, [pc, #224]	; (8008f54 <HAL_DMA_Init+0x158>)
 8008e74:	4013      	ands	r3, r2
 8008e76:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	685a      	ldr	r2, [r3, #4]
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	689b      	ldr	r3, [r3, #8]
 8008e80:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008e86:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	691b      	ldr	r3, [r3, #16]
 8008e8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008e92:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	699b      	ldr	r3, [r3, #24]
 8008e98:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008e9e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	6a1b      	ldr	r3, [r3, #32]
 8008ea4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008ea6:	697a      	ldr	r2, [r7, #20]
 8008ea8:	4313      	orrs	r3, r2
 8008eaa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eb0:	2b04      	cmp	r3, #4
 8008eb2:	d107      	bne.n	8008ec4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ebc:	4313      	orrs	r3, r2
 8008ebe:	697a      	ldr	r2, [r7, #20]
 8008ec0:	4313      	orrs	r3, r2
 8008ec2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	697a      	ldr	r2, [r7, #20]
 8008eca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	695b      	ldr	r3, [r3, #20]
 8008ed2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008ed4:	697b      	ldr	r3, [r7, #20]
 8008ed6:	f023 0307 	bic.w	r3, r3, #7
 8008eda:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ee0:	697a      	ldr	r2, [r7, #20]
 8008ee2:	4313      	orrs	r3, r2
 8008ee4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eea:	2b04      	cmp	r3, #4
 8008eec:	d117      	bne.n	8008f1e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ef2:	697a      	ldr	r2, [r7, #20]
 8008ef4:	4313      	orrs	r3, r2
 8008ef6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d00e      	beq.n	8008f1e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8008f00:	6878      	ldr	r0, [r7, #4]
 8008f02:	f000 fa9d 	bl	8009440 <DMA_CheckFifoParam>
 8008f06:	4603      	mov	r3, r0
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d008      	beq.n	8008f1e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2240      	movs	r2, #64	; 0x40
 8008f10:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2201      	movs	r2, #1
 8008f16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8008f1a:	2301      	movs	r3, #1
 8008f1c:	e016      	b.n	8008f4c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	697a      	ldr	r2, [r7, #20]
 8008f24:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f000 fa54 	bl	80093d4 <DMA_CalcBaseAndBitshift>
 8008f2c:	4603      	mov	r3, r0
 8008f2e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f34:	223f      	movs	r2, #63	; 0x3f
 8008f36:	409a      	lsls	r2, r3
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2201      	movs	r2, #1
 8008f46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8008f4a:	2300      	movs	r3, #0
}
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	3718      	adds	r7, #24
 8008f50:	46bd      	mov	sp, r7
 8008f52:	bd80      	pop	{r7, pc}
 8008f54:	f010803f 	.word	0xf010803f

08008f58 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b086      	sub	sp, #24
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	60f8      	str	r0, [r7, #12]
 8008f60:	60b9      	str	r1, [r7, #8]
 8008f62:	607a      	str	r2, [r7, #4]
 8008f64:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008f66:	2300      	movs	r3, #0
 8008f68:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f6e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008f76:	2b01      	cmp	r3, #1
 8008f78:	d101      	bne.n	8008f7e <HAL_DMA_Start_IT+0x26>
 8008f7a:	2302      	movs	r3, #2
 8008f7c:	e040      	b.n	8009000 <HAL_DMA_Start_IT+0xa8>
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	2201      	movs	r2, #1
 8008f82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008f8c:	b2db      	uxtb	r3, r3
 8008f8e:	2b01      	cmp	r3, #1
 8008f90:	d12f      	bne.n	8008ff2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	2202      	movs	r2, #2
 8008f96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	687a      	ldr	r2, [r7, #4]
 8008fa4:	68b9      	ldr	r1, [r7, #8]
 8008fa6:	68f8      	ldr	r0, [r7, #12]
 8008fa8:	f000 f9e6 	bl	8009378 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fb0:	223f      	movs	r2, #63	; 0x3f
 8008fb2:	409a      	lsls	r2, r3
 8008fb4:	693b      	ldr	r3, [r7, #16]
 8008fb6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	681a      	ldr	r2, [r3, #0]
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	f042 0216 	orr.w	r2, r2, #22
 8008fc6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d007      	beq.n	8008fe0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	681a      	ldr	r2, [r3, #0]
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f042 0208 	orr.w	r2, r2, #8
 8008fde:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	681a      	ldr	r2, [r3, #0]
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f042 0201 	orr.w	r2, r2, #1
 8008fee:	601a      	str	r2, [r3, #0]
 8008ff0:	e005      	b.n	8008ffe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8008ffa:	2302      	movs	r3, #2
 8008ffc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8008ffe:	7dfb      	ldrb	r3, [r7, #23]
}
 8009000:	4618      	mov	r0, r3
 8009002:	3718      	adds	r7, #24
 8009004:	46bd      	mov	sp, r7
 8009006:	bd80      	pop	{r7, pc}

08009008 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009008:	b480      	push	{r7}
 800900a:	b083      	sub	sp, #12
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009016:	b2db      	uxtb	r3, r3
 8009018:	2b02      	cmp	r3, #2
 800901a:	d004      	beq.n	8009026 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2280      	movs	r2, #128	; 0x80
 8009020:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8009022:	2301      	movs	r3, #1
 8009024:	e00c      	b.n	8009040 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2205      	movs	r2, #5
 800902a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	681a      	ldr	r2, [r3, #0]
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f022 0201 	bic.w	r2, r2, #1
 800903c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800903e:	2300      	movs	r3, #0
}
 8009040:	4618      	mov	r0, r3
 8009042:	370c      	adds	r7, #12
 8009044:	46bd      	mov	sp, r7
 8009046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904a:	4770      	bx	lr

0800904c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b086      	sub	sp, #24
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8009054:	2300      	movs	r3, #0
 8009056:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8009058:	4b92      	ldr	r3, [pc, #584]	; (80092a4 <HAL_DMA_IRQHandler+0x258>)
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	4a92      	ldr	r2, [pc, #584]	; (80092a8 <HAL_DMA_IRQHandler+0x25c>)
 800905e:	fba2 2303 	umull	r2, r3, r2, r3
 8009062:	0a9b      	lsrs	r3, r3, #10
 8009064:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800906a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800906c:	693b      	ldr	r3, [r7, #16]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009076:	2208      	movs	r2, #8
 8009078:	409a      	lsls	r2, r3
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	4013      	ands	r3, r2
 800907e:	2b00      	cmp	r3, #0
 8009080:	d01a      	beq.n	80090b8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	f003 0304 	and.w	r3, r3, #4
 800908c:	2b00      	cmp	r3, #0
 800908e:	d013      	beq.n	80090b8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	681a      	ldr	r2, [r3, #0]
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	f022 0204 	bic.w	r2, r2, #4
 800909e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80090a4:	2208      	movs	r2, #8
 80090a6:	409a      	lsls	r2, r3
 80090a8:	693b      	ldr	r3, [r7, #16]
 80090aa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090b0:	f043 0201 	orr.w	r2, r3, #1
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80090bc:	2201      	movs	r2, #1
 80090be:	409a      	lsls	r2, r3
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	4013      	ands	r3, r2
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d012      	beq.n	80090ee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	695b      	ldr	r3, [r3, #20]
 80090ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d00b      	beq.n	80090ee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80090da:	2201      	movs	r2, #1
 80090dc:	409a      	lsls	r2, r3
 80090de:	693b      	ldr	r3, [r7, #16]
 80090e0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090e6:	f043 0202 	orr.w	r2, r3, #2
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80090f2:	2204      	movs	r2, #4
 80090f4:	409a      	lsls	r2, r3
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	4013      	ands	r3, r2
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d012      	beq.n	8009124 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f003 0302 	and.w	r3, r3, #2
 8009108:	2b00      	cmp	r3, #0
 800910a:	d00b      	beq.n	8009124 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009110:	2204      	movs	r2, #4
 8009112:	409a      	lsls	r2, r3
 8009114:	693b      	ldr	r3, [r7, #16]
 8009116:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800911c:	f043 0204 	orr.w	r2, r3, #4
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009128:	2210      	movs	r2, #16
 800912a:	409a      	lsls	r2, r3
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	4013      	ands	r3, r2
 8009130:	2b00      	cmp	r3, #0
 8009132:	d043      	beq.n	80091bc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	f003 0308 	and.w	r3, r3, #8
 800913e:	2b00      	cmp	r3, #0
 8009140:	d03c      	beq.n	80091bc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009146:	2210      	movs	r2, #16
 8009148:	409a      	lsls	r2, r3
 800914a:	693b      	ldr	r3, [r7, #16]
 800914c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009158:	2b00      	cmp	r3, #0
 800915a:	d018      	beq.n	800918e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009166:	2b00      	cmp	r3, #0
 8009168:	d108      	bne.n	800917c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800916e:	2b00      	cmp	r3, #0
 8009170:	d024      	beq.n	80091bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	4798      	blx	r3
 800917a:	e01f      	b.n	80091bc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009180:	2b00      	cmp	r3, #0
 8009182:	d01b      	beq.n	80091bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	4798      	blx	r3
 800918c:	e016      	b.n	80091bc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009198:	2b00      	cmp	r3, #0
 800919a:	d107      	bne.n	80091ac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	681a      	ldr	r2, [r3, #0]
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f022 0208 	bic.w	r2, r2, #8
 80091aa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d003      	beq.n	80091bc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091b8:	6878      	ldr	r0, [r7, #4]
 80091ba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091c0:	2220      	movs	r2, #32
 80091c2:	409a      	lsls	r2, r3
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	4013      	ands	r3, r2
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	f000 808e 	beq.w	80092ea <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f003 0310 	and.w	r3, r3, #16
 80091d8:	2b00      	cmp	r3, #0
 80091da:	f000 8086 	beq.w	80092ea <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091e2:	2220      	movs	r2, #32
 80091e4:	409a      	lsls	r2, r3
 80091e6:	693b      	ldr	r3, [r7, #16]
 80091e8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80091f0:	b2db      	uxtb	r3, r3
 80091f2:	2b05      	cmp	r3, #5
 80091f4:	d136      	bne.n	8009264 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	681a      	ldr	r2, [r3, #0]
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f022 0216 	bic.w	r2, r2, #22
 8009204:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	695a      	ldr	r2, [r3, #20]
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009214:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800921a:	2b00      	cmp	r3, #0
 800921c:	d103      	bne.n	8009226 <HAL_DMA_IRQHandler+0x1da>
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009222:	2b00      	cmp	r3, #0
 8009224:	d007      	beq.n	8009236 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	681a      	ldr	r2, [r3, #0]
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f022 0208 	bic.w	r2, r2, #8
 8009234:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800923a:	223f      	movs	r2, #63	; 0x3f
 800923c:	409a      	lsls	r2, r3
 800923e:	693b      	ldr	r3, [r7, #16]
 8009240:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2200      	movs	r2, #0
 8009246:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2201      	movs	r2, #1
 800924e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009256:	2b00      	cmp	r3, #0
 8009258:	d07d      	beq.n	8009356 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800925e:	6878      	ldr	r0, [r7, #4]
 8009260:	4798      	blx	r3
        }
        return;
 8009262:	e078      	b.n	8009356 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800926e:	2b00      	cmp	r3, #0
 8009270:	d01c      	beq.n	80092ac <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800927c:	2b00      	cmp	r3, #0
 800927e:	d108      	bne.n	8009292 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009284:	2b00      	cmp	r3, #0
 8009286:	d030      	beq.n	80092ea <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800928c:	6878      	ldr	r0, [r7, #4]
 800928e:	4798      	blx	r3
 8009290:	e02b      	b.n	80092ea <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009296:	2b00      	cmp	r3, #0
 8009298:	d027      	beq.n	80092ea <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	4798      	blx	r3
 80092a2:	e022      	b.n	80092ea <HAL_DMA_IRQHandler+0x29e>
 80092a4:	20000000 	.word	0x20000000
 80092a8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d10f      	bne.n	80092da <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	681a      	ldr	r2, [r3, #0]
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	f022 0210 	bic.w	r2, r2, #16
 80092c8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2200      	movs	r2, #0
 80092ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	2201      	movs	r2, #1
 80092d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d003      	beq.n	80092ea <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d032      	beq.n	8009358 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092f6:	f003 0301 	and.w	r3, r3, #1
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d022      	beq.n	8009344 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2205      	movs	r2, #5
 8009302:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	681a      	ldr	r2, [r3, #0]
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f022 0201 	bic.w	r2, r2, #1
 8009314:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	3301      	adds	r3, #1
 800931a:	60bb      	str	r3, [r7, #8]
 800931c:	697a      	ldr	r2, [r7, #20]
 800931e:	429a      	cmp	r2, r3
 8009320:	d307      	bcc.n	8009332 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	f003 0301 	and.w	r3, r3, #1
 800932c:	2b00      	cmp	r3, #0
 800932e:	d1f2      	bne.n	8009316 <HAL_DMA_IRQHandler+0x2ca>
 8009330:	e000      	b.n	8009334 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8009332:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2200      	movs	r2, #0
 8009338:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2201      	movs	r2, #1
 8009340:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009348:	2b00      	cmp	r3, #0
 800934a:	d005      	beq.n	8009358 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	4798      	blx	r3
 8009354:	e000      	b.n	8009358 <HAL_DMA_IRQHandler+0x30c>
        return;
 8009356:	bf00      	nop
    }
  }
}
 8009358:	3718      	adds	r7, #24
 800935a:	46bd      	mov	sp, r7
 800935c:	bd80      	pop	{r7, pc}
 800935e:	bf00      	nop

08009360 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8009360:	b480      	push	{r7}
 8009362:	b083      	sub	sp, #12
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800936c:	4618      	mov	r0, r3
 800936e:	370c      	adds	r7, #12
 8009370:	46bd      	mov	sp, r7
 8009372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009376:	4770      	bx	lr

08009378 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009378:	b480      	push	{r7}
 800937a:	b085      	sub	sp, #20
 800937c:	af00      	add	r7, sp, #0
 800937e:	60f8      	str	r0, [r7, #12]
 8009380:	60b9      	str	r1, [r7, #8]
 8009382:	607a      	str	r2, [r7, #4]
 8009384:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	681a      	ldr	r2, [r3, #0]
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009394:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	683a      	ldr	r2, [r7, #0]
 800939c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	689b      	ldr	r3, [r3, #8]
 80093a2:	2b40      	cmp	r3, #64	; 0x40
 80093a4:	d108      	bne.n	80093b8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	687a      	ldr	r2, [r7, #4]
 80093ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	68ba      	ldr	r2, [r7, #8]
 80093b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80093b6:	e007      	b.n	80093c8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	68ba      	ldr	r2, [r7, #8]
 80093be:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	687a      	ldr	r2, [r7, #4]
 80093c6:	60da      	str	r2, [r3, #12]
}
 80093c8:	bf00      	nop
 80093ca:	3714      	adds	r7, #20
 80093cc:	46bd      	mov	sp, r7
 80093ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d2:	4770      	bx	lr

080093d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80093d4:	b480      	push	{r7}
 80093d6:	b085      	sub	sp, #20
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	b2db      	uxtb	r3, r3
 80093e2:	3b10      	subs	r3, #16
 80093e4:	4a14      	ldr	r2, [pc, #80]	; (8009438 <DMA_CalcBaseAndBitshift+0x64>)
 80093e6:	fba2 2303 	umull	r2, r3, r2, r3
 80093ea:	091b      	lsrs	r3, r3, #4
 80093ec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80093ee:	4a13      	ldr	r2, [pc, #76]	; (800943c <DMA_CalcBaseAndBitshift+0x68>)
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	4413      	add	r3, r2
 80093f4:	781b      	ldrb	r3, [r3, #0]
 80093f6:	461a      	mov	r2, r3
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	2b03      	cmp	r3, #3
 8009400:	d909      	bls.n	8009416 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800940a:	f023 0303 	bic.w	r3, r3, #3
 800940e:	1d1a      	adds	r2, r3, #4
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	659a      	str	r2, [r3, #88]	; 0x58
 8009414:	e007      	b.n	8009426 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800941e:	f023 0303 	bic.w	r3, r3, #3
 8009422:	687a      	ldr	r2, [r7, #4]
 8009424:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800942a:	4618      	mov	r0, r3
 800942c:	3714      	adds	r7, #20
 800942e:	46bd      	mov	sp, r7
 8009430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009434:	4770      	bx	lr
 8009436:	bf00      	nop
 8009438:	aaaaaaab 	.word	0xaaaaaaab
 800943c:	080187a8 	.word	0x080187a8

08009440 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8009440:	b480      	push	{r7}
 8009442:	b085      	sub	sp, #20
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009448:	2300      	movs	r3, #0
 800944a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009450:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	699b      	ldr	r3, [r3, #24]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d11f      	bne.n	800949a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800945a:	68bb      	ldr	r3, [r7, #8]
 800945c:	2b03      	cmp	r3, #3
 800945e:	d855      	bhi.n	800950c <DMA_CheckFifoParam+0xcc>
 8009460:	a201      	add	r2, pc, #4	; (adr r2, 8009468 <DMA_CheckFifoParam+0x28>)
 8009462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009466:	bf00      	nop
 8009468:	08009479 	.word	0x08009479
 800946c:	0800948b 	.word	0x0800948b
 8009470:	08009479 	.word	0x08009479
 8009474:	0800950d 	.word	0x0800950d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800947c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009480:	2b00      	cmp	r3, #0
 8009482:	d045      	beq.n	8009510 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8009484:	2301      	movs	r3, #1
 8009486:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009488:	e042      	b.n	8009510 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800948e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009492:	d13f      	bne.n	8009514 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8009494:	2301      	movs	r3, #1
 8009496:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009498:	e03c      	b.n	8009514 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	699b      	ldr	r3, [r3, #24]
 800949e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80094a2:	d121      	bne.n	80094e8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	2b03      	cmp	r3, #3
 80094a8:	d836      	bhi.n	8009518 <DMA_CheckFifoParam+0xd8>
 80094aa:	a201      	add	r2, pc, #4	; (adr r2, 80094b0 <DMA_CheckFifoParam+0x70>)
 80094ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094b0:	080094c1 	.word	0x080094c1
 80094b4:	080094c7 	.word	0x080094c7
 80094b8:	080094c1 	.word	0x080094c1
 80094bc:	080094d9 	.word	0x080094d9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80094c0:	2301      	movs	r3, #1
 80094c2:	73fb      	strb	r3, [r7, #15]
      break;
 80094c4:	e02f      	b.n	8009526 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d024      	beq.n	800951c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80094d2:	2301      	movs	r3, #1
 80094d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80094d6:	e021      	b.n	800951c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094dc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80094e0:	d11e      	bne.n	8009520 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80094e2:	2301      	movs	r3, #1
 80094e4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80094e6:	e01b      	b.n	8009520 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	2b02      	cmp	r3, #2
 80094ec:	d902      	bls.n	80094f4 <DMA_CheckFifoParam+0xb4>
 80094ee:	2b03      	cmp	r3, #3
 80094f0:	d003      	beq.n	80094fa <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80094f2:	e018      	b.n	8009526 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80094f4:	2301      	movs	r3, #1
 80094f6:	73fb      	strb	r3, [r7, #15]
      break;
 80094f8:	e015      	b.n	8009526 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009502:	2b00      	cmp	r3, #0
 8009504:	d00e      	beq.n	8009524 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8009506:	2301      	movs	r3, #1
 8009508:	73fb      	strb	r3, [r7, #15]
      break;
 800950a:	e00b      	b.n	8009524 <DMA_CheckFifoParam+0xe4>
      break;
 800950c:	bf00      	nop
 800950e:	e00a      	b.n	8009526 <DMA_CheckFifoParam+0xe6>
      break;
 8009510:	bf00      	nop
 8009512:	e008      	b.n	8009526 <DMA_CheckFifoParam+0xe6>
      break;
 8009514:	bf00      	nop
 8009516:	e006      	b.n	8009526 <DMA_CheckFifoParam+0xe6>
      break;
 8009518:	bf00      	nop
 800951a:	e004      	b.n	8009526 <DMA_CheckFifoParam+0xe6>
      break;
 800951c:	bf00      	nop
 800951e:	e002      	b.n	8009526 <DMA_CheckFifoParam+0xe6>
      break;   
 8009520:	bf00      	nop
 8009522:	e000      	b.n	8009526 <DMA_CheckFifoParam+0xe6>
      break;
 8009524:	bf00      	nop
    }
  } 
  
  return status; 
 8009526:	7bfb      	ldrb	r3, [r7, #15]
}
 8009528:	4618      	mov	r0, r3
 800952a:	3714      	adds	r7, #20
 800952c:	46bd      	mov	sp, r7
 800952e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009532:	4770      	bx	lr

08009534 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009534:	b480      	push	{r7}
 8009536:	b089      	sub	sp, #36	; 0x24
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
 800953c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800953e:	2300      	movs	r3, #0
 8009540:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8009542:	2300      	movs	r3, #0
 8009544:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8009546:	2300      	movs	r3, #0
 8009548:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800954a:	2300      	movs	r3, #0
 800954c:	61fb      	str	r3, [r7, #28]
 800954e:	e177      	b.n	8009840 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8009550:	2201      	movs	r2, #1
 8009552:	69fb      	ldr	r3, [r7, #28]
 8009554:	fa02 f303 	lsl.w	r3, r2, r3
 8009558:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	697a      	ldr	r2, [r7, #20]
 8009560:	4013      	ands	r3, r2
 8009562:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8009564:	693a      	ldr	r2, [r7, #16]
 8009566:	697b      	ldr	r3, [r7, #20]
 8009568:	429a      	cmp	r2, r3
 800956a:	f040 8166 	bne.w	800983a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	685b      	ldr	r3, [r3, #4]
 8009572:	2b01      	cmp	r3, #1
 8009574:	d00b      	beq.n	800958e <HAL_GPIO_Init+0x5a>
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	685b      	ldr	r3, [r3, #4]
 800957a:	2b02      	cmp	r3, #2
 800957c:	d007      	beq.n	800958e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009582:	2b11      	cmp	r3, #17
 8009584:	d003      	beq.n	800958e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	685b      	ldr	r3, [r3, #4]
 800958a:	2b12      	cmp	r3, #18
 800958c:	d130      	bne.n	80095f0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	689b      	ldr	r3, [r3, #8]
 8009592:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8009594:	69fb      	ldr	r3, [r7, #28]
 8009596:	005b      	lsls	r3, r3, #1
 8009598:	2203      	movs	r2, #3
 800959a:	fa02 f303 	lsl.w	r3, r2, r3
 800959e:	43db      	mvns	r3, r3
 80095a0:	69ba      	ldr	r2, [r7, #24]
 80095a2:	4013      	ands	r3, r2
 80095a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	68da      	ldr	r2, [r3, #12]
 80095aa:	69fb      	ldr	r3, [r7, #28]
 80095ac:	005b      	lsls	r3, r3, #1
 80095ae:	fa02 f303 	lsl.w	r3, r2, r3
 80095b2:	69ba      	ldr	r2, [r7, #24]
 80095b4:	4313      	orrs	r3, r2
 80095b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	69ba      	ldr	r2, [r7, #24]
 80095bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	685b      	ldr	r3, [r3, #4]
 80095c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80095c4:	2201      	movs	r2, #1
 80095c6:	69fb      	ldr	r3, [r7, #28]
 80095c8:	fa02 f303 	lsl.w	r3, r2, r3
 80095cc:	43db      	mvns	r3, r3
 80095ce:	69ba      	ldr	r2, [r7, #24]
 80095d0:	4013      	ands	r3, r2
 80095d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	685b      	ldr	r3, [r3, #4]
 80095d8:	091b      	lsrs	r3, r3, #4
 80095da:	f003 0201 	and.w	r2, r3, #1
 80095de:	69fb      	ldr	r3, [r7, #28]
 80095e0:	fa02 f303 	lsl.w	r3, r2, r3
 80095e4:	69ba      	ldr	r2, [r7, #24]
 80095e6:	4313      	orrs	r3, r2
 80095e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	69ba      	ldr	r2, [r7, #24]
 80095ee:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	68db      	ldr	r3, [r3, #12]
 80095f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80095f6:	69fb      	ldr	r3, [r7, #28]
 80095f8:	005b      	lsls	r3, r3, #1
 80095fa:	2203      	movs	r2, #3
 80095fc:	fa02 f303 	lsl.w	r3, r2, r3
 8009600:	43db      	mvns	r3, r3
 8009602:	69ba      	ldr	r2, [r7, #24]
 8009604:	4013      	ands	r3, r2
 8009606:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	689a      	ldr	r2, [r3, #8]
 800960c:	69fb      	ldr	r3, [r7, #28]
 800960e:	005b      	lsls	r3, r3, #1
 8009610:	fa02 f303 	lsl.w	r3, r2, r3
 8009614:	69ba      	ldr	r2, [r7, #24]
 8009616:	4313      	orrs	r3, r2
 8009618:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	69ba      	ldr	r2, [r7, #24]
 800961e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	685b      	ldr	r3, [r3, #4]
 8009624:	2b02      	cmp	r3, #2
 8009626:	d003      	beq.n	8009630 <HAL_GPIO_Init+0xfc>
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	685b      	ldr	r3, [r3, #4]
 800962c:	2b12      	cmp	r3, #18
 800962e:	d123      	bne.n	8009678 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009630:	69fb      	ldr	r3, [r7, #28]
 8009632:	08da      	lsrs	r2, r3, #3
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	3208      	adds	r2, #8
 8009638:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800963c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800963e:	69fb      	ldr	r3, [r7, #28]
 8009640:	f003 0307 	and.w	r3, r3, #7
 8009644:	009b      	lsls	r3, r3, #2
 8009646:	220f      	movs	r2, #15
 8009648:	fa02 f303 	lsl.w	r3, r2, r3
 800964c:	43db      	mvns	r3, r3
 800964e:	69ba      	ldr	r2, [r7, #24]
 8009650:	4013      	ands	r3, r2
 8009652:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8009654:	683b      	ldr	r3, [r7, #0]
 8009656:	691a      	ldr	r2, [r3, #16]
 8009658:	69fb      	ldr	r3, [r7, #28]
 800965a:	f003 0307 	and.w	r3, r3, #7
 800965e:	009b      	lsls	r3, r3, #2
 8009660:	fa02 f303 	lsl.w	r3, r2, r3
 8009664:	69ba      	ldr	r2, [r7, #24]
 8009666:	4313      	orrs	r3, r2
 8009668:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800966a:	69fb      	ldr	r3, [r7, #28]
 800966c:	08da      	lsrs	r2, r3, #3
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	3208      	adds	r2, #8
 8009672:	69b9      	ldr	r1, [r7, #24]
 8009674:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800967e:	69fb      	ldr	r3, [r7, #28]
 8009680:	005b      	lsls	r3, r3, #1
 8009682:	2203      	movs	r2, #3
 8009684:	fa02 f303 	lsl.w	r3, r2, r3
 8009688:	43db      	mvns	r3, r3
 800968a:	69ba      	ldr	r2, [r7, #24]
 800968c:	4013      	ands	r3, r2
 800968e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	685b      	ldr	r3, [r3, #4]
 8009694:	f003 0203 	and.w	r2, r3, #3
 8009698:	69fb      	ldr	r3, [r7, #28]
 800969a:	005b      	lsls	r3, r3, #1
 800969c:	fa02 f303 	lsl.w	r3, r2, r3
 80096a0:	69ba      	ldr	r2, [r7, #24]
 80096a2:	4313      	orrs	r3, r2
 80096a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	69ba      	ldr	r2, [r7, #24]
 80096aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80096ac:	683b      	ldr	r3, [r7, #0]
 80096ae:	685b      	ldr	r3, [r3, #4]
 80096b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	f000 80c0 	beq.w	800983a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80096ba:	2300      	movs	r3, #0
 80096bc:	60fb      	str	r3, [r7, #12]
 80096be:	4b65      	ldr	r3, [pc, #404]	; (8009854 <HAL_GPIO_Init+0x320>)
 80096c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096c2:	4a64      	ldr	r2, [pc, #400]	; (8009854 <HAL_GPIO_Init+0x320>)
 80096c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80096c8:	6453      	str	r3, [r2, #68]	; 0x44
 80096ca:	4b62      	ldr	r3, [pc, #392]	; (8009854 <HAL_GPIO_Init+0x320>)
 80096cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80096d2:	60fb      	str	r3, [r7, #12]
 80096d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80096d6:	4a60      	ldr	r2, [pc, #384]	; (8009858 <HAL_GPIO_Init+0x324>)
 80096d8:	69fb      	ldr	r3, [r7, #28]
 80096da:	089b      	lsrs	r3, r3, #2
 80096dc:	3302      	adds	r3, #2
 80096de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80096e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80096e4:	69fb      	ldr	r3, [r7, #28]
 80096e6:	f003 0303 	and.w	r3, r3, #3
 80096ea:	009b      	lsls	r3, r3, #2
 80096ec:	220f      	movs	r2, #15
 80096ee:	fa02 f303 	lsl.w	r3, r2, r3
 80096f2:	43db      	mvns	r3, r3
 80096f4:	69ba      	ldr	r2, [r7, #24]
 80096f6:	4013      	ands	r3, r2
 80096f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	4a57      	ldr	r2, [pc, #348]	; (800985c <HAL_GPIO_Init+0x328>)
 80096fe:	4293      	cmp	r3, r2
 8009700:	d037      	beq.n	8009772 <HAL_GPIO_Init+0x23e>
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	4a56      	ldr	r2, [pc, #344]	; (8009860 <HAL_GPIO_Init+0x32c>)
 8009706:	4293      	cmp	r3, r2
 8009708:	d031      	beq.n	800976e <HAL_GPIO_Init+0x23a>
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	4a55      	ldr	r2, [pc, #340]	; (8009864 <HAL_GPIO_Init+0x330>)
 800970e:	4293      	cmp	r3, r2
 8009710:	d02b      	beq.n	800976a <HAL_GPIO_Init+0x236>
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	4a54      	ldr	r2, [pc, #336]	; (8009868 <HAL_GPIO_Init+0x334>)
 8009716:	4293      	cmp	r3, r2
 8009718:	d025      	beq.n	8009766 <HAL_GPIO_Init+0x232>
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	4a53      	ldr	r2, [pc, #332]	; (800986c <HAL_GPIO_Init+0x338>)
 800971e:	4293      	cmp	r3, r2
 8009720:	d01f      	beq.n	8009762 <HAL_GPIO_Init+0x22e>
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	4a52      	ldr	r2, [pc, #328]	; (8009870 <HAL_GPIO_Init+0x33c>)
 8009726:	4293      	cmp	r3, r2
 8009728:	d019      	beq.n	800975e <HAL_GPIO_Init+0x22a>
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	4a51      	ldr	r2, [pc, #324]	; (8009874 <HAL_GPIO_Init+0x340>)
 800972e:	4293      	cmp	r3, r2
 8009730:	d013      	beq.n	800975a <HAL_GPIO_Init+0x226>
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	4a50      	ldr	r2, [pc, #320]	; (8009878 <HAL_GPIO_Init+0x344>)
 8009736:	4293      	cmp	r3, r2
 8009738:	d00d      	beq.n	8009756 <HAL_GPIO_Init+0x222>
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	4a4f      	ldr	r2, [pc, #316]	; (800987c <HAL_GPIO_Init+0x348>)
 800973e:	4293      	cmp	r3, r2
 8009740:	d007      	beq.n	8009752 <HAL_GPIO_Init+0x21e>
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	4a4e      	ldr	r2, [pc, #312]	; (8009880 <HAL_GPIO_Init+0x34c>)
 8009746:	4293      	cmp	r3, r2
 8009748:	d101      	bne.n	800974e <HAL_GPIO_Init+0x21a>
 800974a:	2309      	movs	r3, #9
 800974c:	e012      	b.n	8009774 <HAL_GPIO_Init+0x240>
 800974e:	230a      	movs	r3, #10
 8009750:	e010      	b.n	8009774 <HAL_GPIO_Init+0x240>
 8009752:	2308      	movs	r3, #8
 8009754:	e00e      	b.n	8009774 <HAL_GPIO_Init+0x240>
 8009756:	2307      	movs	r3, #7
 8009758:	e00c      	b.n	8009774 <HAL_GPIO_Init+0x240>
 800975a:	2306      	movs	r3, #6
 800975c:	e00a      	b.n	8009774 <HAL_GPIO_Init+0x240>
 800975e:	2305      	movs	r3, #5
 8009760:	e008      	b.n	8009774 <HAL_GPIO_Init+0x240>
 8009762:	2304      	movs	r3, #4
 8009764:	e006      	b.n	8009774 <HAL_GPIO_Init+0x240>
 8009766:	2303      	movs	r3, #3
 8009768:	e004      	b.n	8009774 <HAL_GPIO_Init+0x240>
 800976a:	2302      	movs	r3, #2
 800976c:	e002      	b.n	8009774 <HAL_GPIO_Init+0x240>
 800976e:	2301      	movs	r3, #1
 8009770:	e000      	b.n	8009774 <HAL_GPIO_Init+0x240>
 8009772:	2300      	movs	r3, #0
 8009774:	69fa      	ldr	r2, [r7, #28]
 8009776:	f002 0203 	and.w	r2, r2, #3
 800977a:	0092      	lsls	r2, r2, #2
 800977c:	4093      	lsls	r3, r2
 800977e:	69ba      	ldr	r2, [r7, #24]
 8009780:	4313      	orrs	r3, r2
 8009782:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009784:	4934      	ldr	r1, [pc, #208]	; (8009858 <HAL_GPIO_Init+0x324>)
 8009786:	69fb      	ldr	r3, [r7, #28]
 8009788:	089b      	lsrs	r3, r3, #2
 800978a:	3302      	adds	r3, #2
 800978c:	69ba      	ldr	r2, [r7, #24]
 800978e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009792:	4b3c      	ldr	r3, [pc, #240]	; (8009884 <HAL_GPIO_Init+0x350>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009798:	693b      	ldr	r3, [r7, #16]
 800979a:	43db      	mvns	r3, r3
 800979c:	69ba      	ldr	r2, [r7, #24]
 800979e:	4013      	ands	r3, r2
 80097a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	685b      	ldr	r3, [r3, #4]
 80097a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d003      	beq.n	80097b6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80097ae:	69ba      	ldr	r2, [r7, #24]
 80097b0:	693b      	ldr	r3, [r7, #16]
 80097b2:	4313      	orrs	r3, r2
 80097b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80097b6:	4a33      	ldr	r2, [pc, #204]	; (8009884 <HAL_GPIO_Init+0x350>)
 80097b8:	69bb      	ldr	r3, [r7, #24]
 80097ba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80097bc:	4b31      	ldr	r3, [pc, #196]	; (8009884 <HAL_GPIO_Init+0x350>)
 80097be:	685b      	ldr	r3, [r3, #4]
 80097c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80097c2:	693b      	ldr	r3, [r7, #16]
 80097c4:	43db      	mvns	r3, r3
 80097c6:	69ba      	ldr	r2, [r7, #24]
 80097c8:	4013      	ands	r3, r2
 80097ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	685b      	ldr	r3, [r3, #4]
 80097d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d003      	beq.n	80097e0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80097d8:	69ba      	ldr	r2, [r7, #24]
 80097da:	693b      	ldr	r3, [r7, #16]
 80097dc:	4313      	orrs	r3, r2
 80097de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80097e0:	4a28      	ldr	r2, [pc, #160]	; (8009884 <HAL_GPIO_Init+0x350>)
 80097e2:	69bb      	ldr	r3, [r7, #24]
 80097e4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80097e6:	4b27      	ldr	r3, [pc, #156]	; (8009884 <HAL_GPIO_Init+0x350>)
 80097e8:	689b      	ldr	r3, [r3, #8]
 80097ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80097ec:	693b      	ldr	r3, [r7, #16]
 80097ee:	43db      	mvns	r3, r3
 80097f0:	69ba      	ldr	r2, [r7, #24]
 80097f2:	4013      	ands	r3, r2
 80097f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	685b      	ldr	r3, [r3, #4]
 80097fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d003      	beq.n	800980a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8009802:	69ba      	ldr	r2, [r7, #24]
 8009804:	693b      	ldr	r3, [r7, #16]
 8009806:	4313      	orrs	r3, r2
 8009808:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800980a:	4a1e      	ldr	r2, [pc, #120]	; (8009884 <HAL_GPIO_Init+0x350>)
 800980c:	69bb      	ldr	r3, [r7, #24]
 800980e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009810:	4b1c      	ldr	r3, [pc, #112]	; (8009884 <HAL_GPIO_Init+0x350>)
 8009812:	68db      	ldr	r3, [r3, #12]
 8009814:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009816:	693b      	ldr	r3, [r7, #16]
 8009818:	43db      	mvns	r3, r3
 800981a:	69ba      	ldr	r2, [r7, #24]
 800981c:	4013      	ands	r3, r2
 800981e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	685b      	ldr	r3, [r3, #4]
 8009824:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009828:	2b00      	cmp	r3, #0
 800982a:	d003      	beq.n	8009834 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800982c:	69ba      	ldr	r2, [r7, #24]
 800982e:	693b      	ldr	r3, [r7, #16]
 8009830:	4313      	orrs	r3, r2
 8009832:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8009834:	4a13      	ldr	r2, [pc, #76]	; (8009884 <HAL_GPIO_Init+0x350>)
 8009836:	69bb      	ldr	r3, [r7, #24]
 8009838:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800983a:	69fb      	ldr	r3, [r7, #28]
 800983c:	3301      	adds	r3, #1
 800983e:	61fb      	str	r3, [r7, #28]
 8009840:	69fb      	ldr	r3, [r7, #28]
 8009842:	2b0f      	cmp	r3, #15
 8009844:	f67f ae84 	bls.w	8009550 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8009848:	bf00      	nop
 800984a:	3724      	adds	r7, #36	; 0x24
 800984c:	46bd      	mov	sp, r7
 800984e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009852:	4770      	bx	lr
 8009854:	40023800 	.word	0x40023800
 8009858:	40013800 	.word	0x40013800
 800985c:	40020000 	.word	0x40020000
 8009860:	40020400 	.word	0x40020400
 8009864:	40020800 	.word	0x40020800
 8009868:	40020c00 	.word	0x40020c00
 800986c:	40021000 	.word	0x40021000
 8009870:	40021400 	.word	0x40021400
 8009874:	40021800 	.word	0x40021800
 8009878:	40021c00 	.word	0x40021c00
 800987c:	40022000 	.word	0x40022000
 8009880:	40022400 	.word	0x40022400
 8009884:	40013c00 	.word	0x40013c00

08009888 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009888:	b480      	push	{r7}
 800988a:	b085      	sub	sp, #20
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
 8009890:	460b      	mov	r3, r1
 8009892:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	691a      	ldr	r2, [r3, #16]
 8009898:	887b      	ldrh	r3, [r7, #2]
 800989a:	4013      	ands	r3, r2
 800989c:	2b00      	cmp	r3, #0
 800989e:	d002      	beq.n	80098a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80098a0:	2301      	movs	r3, #1
 80098a2:	73fb      	strb	r3, [r7, #15]
 80098a4:	e001      	b.n	80098aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80098a6:	2300      	movs	r3, #0
 80098a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80098aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80098ac:	4618      	mov	r0, r3
 80098ae:	3714      	adds	r7, #20
 80098b0:	46bd      	mov	sp, r7
 80098b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b6:	4770      	bx	lr

080098b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80098b8:	b480      	push	{r7}
 80098ba:	b083      	sub	sp, #12
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
 80098c0:	460b      	mov	r3, r1
 80098c2:	807b      	strh	r3, [r7, #2]
 80098c4:	4613      	mov	r3, r2
 80098c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80098c8:	787b      	ldrb	r3, [r7, #1]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d003      	beq.n	80098d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80098ce:	887a      	ldrh	r2, [r7, #2]
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80098d4:	e003      	b.n	80098de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80098d6:	887b      	ldrh	r3, [r7, #2]
 80098d8:	041a      	lsls	r2, r3, #16
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	619a      	str	r2, [r3, #24]
}
 80098de:	bf00      	nop
 80098e0:	370c      	adds	r7, #12
 80098e2:	46bd      	mov	sp, r7
 80098e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e8:	4770      	bx	lr
	...

080098ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b084      	sub	sp, #16
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d101      	bne.n	80098fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80098fa:	2301      	movs	r3, #1
 80098fc:	e11f      	b.n	8009b3e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009904:	b2db      	uxtb	r3, r3
 8009906:	2b00      	cmp	r3, #0
 8009908:	d106      	bne.n	8009918 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	2200      	movs	r2, #0
 800990e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8009912:	6878      	ldr	r0, [r7, #4]
 8009914:	f7fc fd24 	bl	8006360 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2224      	movs	r2, #36	; 0x24
 800991c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	681a      	ldr	r2, [r3, #0]
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	f022 0201 	bic.w	r2, r2, #1
 800992e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	681a      	ldr	r2, [r3, #0]
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800993e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	681a      	ldr	r2, [r3, #0]
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800994e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009950:	f001 f96e 	bl	800ac30 <HAL_RCC_GetPCLK1Freq>
 8009954:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	685b      	ldr	r3, [r3, #4]
 800995a:	4a7b      	ldr	r2, [pc, #492]	; (8009b48 <HAL_I2C_Init+0x25c>)
 800995c:	4293      	cmp	r3, r2
 800995e:	d807      	bhi.n	8009970 <HAL_I2C_Init+0x84>
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	4a7a      	ldr	r2, [pc, #488]	; (8009b4c <HAL_I2C_Init+0x260>)
 8009964:	4293      	cmp	r3, r2
 8009966:	bf94      	ite	ls
 8009968:	2301      	movls	r3, #1
 800996a:	2300      	movhi	r3, #0
 800996c:	b2db      	uxtb	r3, r3
 800996e:	e006      	b.n	800997e <HAL_I2C_Init+0x92>
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	4a77      	ldr	r2, [pc, #476]	; (8009b50 <HAL_I2C_Init+0x264>)
 8009974:	4293      	cmp	r3, r2
 8009976:	bf94      	ite	ls
 8009978:	2301      	movls	r3, #1
 800997a:	2300      	movhi	r3, #0
 800997c:	b2db      	uxtb	r3, r3
 800997e:	2b00      	cmp	r3, #0
 8009980:	d001      	beq.n	8009986 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8009982:	2301      	movs	r3, #1
 8009984:	e0db      	b.n	8009b3e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	4a72      	ldr	r2, [pc, #456]	; (8009b54 <HAL_I2C_Init+0x268>)
 800998a:	fba2 2303 	umull	r2, r3, r2, r3
 800998e:	0c9b      	lsrs	r3, r3, #18
 8009990:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	685b      	ldr	r3, [r3, #4]
 8009998:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	68ba      	ldr	r2, [r7, #8]
 80099a2:	430a      	orrs	r2, r1
 80099a4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	6a1b      	ldr	r3, [r3, #32]
 80099ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	685b      	ldr	r3, [r3, #4]
 80099b4:	4a64      	ldr	r2, [pc, #400]	; (8009b48 <HAL_I2C_Init+0x25c>)
 80099b6:	4293      	cmp	r3, r2
 80099b8:	d802      	bhi.n	80099c0 <HAL_I2C_Init+0xd4>
 80099ba:	68bb      	ldr	r3, [r7, #8]
 80099bc:	3301      	adds	r3, #1
 80099be:	e009      	b.n	80099d4 <HAL_I2C_Init+0xe8>
 80099c0:	68bb      	ldr	r3, [r7, #8]
 80099c2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80099c6:	fb02 f303 	mul.w	r3, r2, r3
 80099ca:	4a63      	ldr	r2, [pc, #396]	; (8009b58 <HAL_I2C_Init+0x26c>)
 80099cc:	fba2 2303 	umull	r2, r3, r2, r3
 80099d0:	099b      	lsrs	r3, r3, #6
 80099d2:	3301      	adds	r3, #1
 80099d4:	687a      	ldr	r2, [r7, #4]
 80099d6:	6812      	ldr	r2, [r2, #0]
 80099d8:	430b      	orrs	r3, r1
 80099da:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	69db      	ldr	r3, [r3, #28]
 80099e2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80099e6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	685b      	ldr	r3, [r3, #4]
 80099ee:	4956      	ldr	r1, [pc, #344]	; (8009b48 <HAL_I2C_Init+0x25c>)
 80099f0:	428b      	cmp	r3, r1
 80099f2:	d80d      	bhi.n	8009a10 <HAL_I2C_Init+0x124>
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	1e59      	subs	r1, r3, #1
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	685b      	ldr	r3, [r3, #4]
 80099fc:	005b      	lsls	r3, r3, #1
 80099fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8009a02:	3301      	adds	r3, #1
 8009a04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009a08:	2b04      	cmp	r3, #4
 8009a0a:	bf38      	it	cc
 8009a0c:	2304      	movcc	r3, #4
 8009a0e:	e04f      	b.n	8009ab0 <HAL_I2C_Init+0x1c4>
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	689b      	ldr	r3, [r3, #8]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d111      	bne.n	8009a3c <HAL_I2C_Init+0x150>
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	1e58      	subs	r0, r3, #1
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	6859      	ldr	r1, [r3, #4]
 8009a20:	460b      	mov	r3, r1
 8009a22:	005b      	lsls	r3, r3, #1
 8009a24:	440b      	add	r3, r1
 8009a26:	fbb0 f3f3 	udiv	r3, r0, r3
 8009a2a:	3301      	adds	r3, #1
 8009a2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	bf0c      	ite	eq
 8009a34:	2301      	moveq	r3, #1
 8009a36:	2300      	movne	r3, #0
 8009a38:	b2db      	uxtb	r3, r3
 8009a3a:	e012      	b.n	8009a62 <HAL_I2C_Init+0x176>
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	1e58      	subs	r0, r3, #1
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	6859      	ldr	r1, [r3, #4]
 8009a44:	460b      	mov	r3, r1
 8009a46:	009b      	lsls	r3, r3, #2
 8009a48:	440b      	add	r3, r1
 8009a4a:	0099      	lsls	r1, r3, #2
 8009a4c:	440b      	add	r3, r1
 8009a4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8009a52:	3301      	adds	r3, #1
 8009a54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	bf0c      	ite	eq
 8009a5c:	2301      	moveq	r3, #1
 8009a5e:	2300      	movne	r3, #0
 8009a60:	b2db      	uxtb	r3, r3
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d001      	beq.n	8009a6a <HAL_I2C_Init+0x17e>
 8009a66:	2301      	movs	r3, #1
 8009a68:	e022      	b.n	8009ab0 <HAL_I2C_Init+0x1c4>
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	689b      	ldr	r3, [r3, #8]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d10e      	bne.n	8009a90 <HAL_I2C_Init+0x1a4>
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	1e58      	subs	r0, r3, #1
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	6859      	ldr	r1, [r3, #4]
 8009a7a:	460b      	mov	r3, r1
 8009a7c:	005b      	lsls	r3, r3, #1
 8009a7e:	440b      	add	r3, r1
 8009a80:	fbb0 f3f3 	udiv	r3, r0, r3
 8009a84:	3301      	adds	r3, #1
 8009a86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009a8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a8e:	e00f      	b.n	8009ab0 <HAL_I2C_Init+0x1c4>
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	1e58      	subs	r0, r3, #1
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	6859      	ldr	r1, [r3, #4]
 8009a98:	460b      	mov	r3, r1
 8009a9a:	009b      	lsls	r3, r3, #2
 8009a9c:	440b      	add	r3, r1
 8009a9e:	0099      	lsls	r1, r3, #2
 8009aa0:	440b      	add	r3, r1
 8009aa2:	fbb0 f3f3 	udiv	r3, r0, r3
 8009aa6:	3301      	adds	r3, #1
 8009aa8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009aac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009ab0:	6879      	ldr	r1, [r7, #4]
 8009ab2:	6809      	ldr	r1, [r1, #0]
 8009ab4:	4313      	orrs	r3, r2
 8009ab6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	69da      	ldr	r2, [r3, #28]
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	6a1b      	ldr	r3, [r3, #32]
 8009aca:	431a      	orrs	r2, r3
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	430a      	orrs	r2, r1
 8009ad2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	689b      	ldr	r3, [r3, #8]
 8009ada:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8009ade:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009ae2:	687a      	ldr	r2, [r7, #4]
 8009ae4:	6911      	ldr	r1, [r2, #16]
 8009ae6:	687a      	ldr	r2, [r7, #4]
 8009ae8:	68d2      	ldr	r2, [r2, #12]
 8009aea:	4311      	orrs	r1, r2
 8009aec:	687a      	ldr	r2, [r7, #4]
 8009aee:	6812      	ldr	r2, [r2, #0]
 8009af0:	430b      	orrs	r3, r1
 8009af2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	68db      	ldr	r3, [r3, #12]
 8009afa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	695a      	ldr	r2, [r3, #20]
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	699b      	ldr	r3, [r3, #24]
 8009b06:	431a      	orrs	r2, r3
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	430a      	orrs	r2, r1
 8009b0e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	681a      	ldr	r2, [r3, #0]
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	f042 0201 	orr.w	r2, r2, #1
 8009b1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2200      	movs	r2, #0
 8009b24:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	2220      	movs	r2, #32
 8009b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2200      	movs	r2, #0
 8009b32:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2200      	movs	r2, #0
 8009b38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009b3c:	2300      	movs	r3, #0
}
 8009b3e:	4618      	mov	r0, r3
 8009b40:	3710      	adds	r7, #16
 8009b42:	46bd      	mov	sp, r7
 8009b44:	bd80      	pop	{r7, pc}
 8009b46:	bf00      	nop
 8009b48:	000186a0 	.word	0x000186a0
 8009b4c:	001e847f 	.word	0x001e847f
 8009b50:	003d08ff 	.word	0x003d08ff
 8009b54:	431bde83 	.word	0x431bde83
 8009b58:	10624dd3 	.word	0x10624dd3

08009b5c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b088      	sub	sp, #32
 8009b60:	af02      	add	r7, sp, #8
 8009b62:	60f8      	str	r0, [r7, #12]
 8009b64:	607a      	str	r2, [r7, #4]
 8009b66:	461a      	mov	r2, r3
 8009b68:	460b      	mov	r3, r1
 8009b6a:	817b      	strh	r3, [r7, #10]
 8009b6c:	4613      	mov	r3, r2
 8009b6e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009b70:	f7fe fc00 	bl	8008374 <HAL_GetTick>
 8009b74:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b7c:	b2db      	uxtb	r3, r3
 8009b7e:	2b20      	cmp	r3, #32
 8009b80:	f040 80e0 	bne.w	8009d44 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009b84:	697b      	ldr	r3, [r7, #20]
 8009b86:	9300      	str	r3, [sp, #0]
 8009b88:	2319      	movs	r3, #25
 8009b8a:	2201      	movs	r2, #1
 8009b8c:	4970      	ldr	r1, [pc, #448]	; (8009d50 <HAL_I2C_Master_Transmit+0x1f4>)
 8009b8e:	68f8      	ldr	r0, [r7, #12]
 8009b90:	f000 fc58 	bl	800a444 <I2C_WaitOnFlagUntilTimeout>
 8009b94:	4603      	mov	r3, r0
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d001      	beq.n	8009b9e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8009b9a:	2302      	movs	r3, #2
 8009b9c:	e0d3      	b.n	8009d46 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ba4:	2b01      	cmp	r3, #1
 8009ba6:	d101      	bne.n	8009bac <HAL_I2C_Master_Transmit+0x50>
 8009ba8:	2302      	movs	r3, #2
 8009baa:	e0cc      	b.n	8009d46 <HAL_I2C_Master_Transmit+0x1ea>
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	2201      	movs	r2, #1
 8009bb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	f003 0301 	and.w	r3, r3, #1
 8009bbe:	2b01      	cmp	r3, #1
 8009bc0:	d007      	beq.n	8009bd2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	681a      	ldr	r2, [r3, #0]
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	f042 0201 	orr.w	r2, r2, #1
 8009bd0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	681a      	ldr	r2, [r3, #0]
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009be0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	2221      	movs	r2, #33	; 0x21
 8009be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	2210      	movs	r2, #16
 8009bee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	687a      	ldr	r2, [r7, #4]
 8009bfc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	893a      	ldrh	r2, [r7, #8]
 8009c02:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c08:	b29a      	uxth	r2, r3
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	4a50      	ldr	r2, [pc, #320]	; (8009d54 <HAL_I2C_Master_Transmit+0x1f8>)
 8009c12:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009c14:	8979      	ldrh	r1, [r7, #10]
 8009c16:	697b      	ldr	r3, [r7, #20]
 8009c18:	6a3a      	ldr	r2, [r7, #32]
 8009c1a:	68f8      	ldr	r0, [r7, #12]
 8009c1c:	f000 fac2 	bl	800a1a4 <I2C_MasterRequestWrite>
 8009c20:	4603      	mov	r3, r0
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d001      	beq.n	8009c2a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8009c26:	2301      	movs	r3, #1
 8009c28:	e08d      	b.n	8009d46 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	613b      	str	r3, [r7, #16]
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	695b      	ldr	r3, [r3, #20]
 8009c34:	613b      	str	r3, [r7, #16]
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	699b      	ldr	r3, [r3, #24]
 8009c3c:	613b      	str	r3, [r7, #16]
 8009c3e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8009c40:	e066      	b.n	8009d10 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009c42:	697a      	ldr	r2, [r7, #20]
 8009c44:	6a39      	ldr	r1, [r7, #32]
 8009c46:	68f8      	ldr	r0, [r7, #12]
 8009c48:	f000 fcd2 	bl	800a5f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8009c4c:	4603      	mov	r3, r0
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d00d      	beq.n	8009c6e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c56:	2b04      	cmp	r3, #4
 8009c58:	d107      	bne.n	8009c6a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	681a      	ldr	r2, [r3, #0]
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009c68:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009c6a:	2301      	movs	r3, #1
 8009c6c:	e06b      	b.n	8009d46 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c72:	781a      	ldrb	r2, [r3, #0]
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c7e:	1c5a      	adds	r2, r3, #1
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c88:	b29b      	uxth	r3, r3
 8009c8a:	3b01      	subs	r3, #1
 8009c8c:	b29a      	uxth	r2, r3
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c96:	3b01      	subs	r3, #1
 8009c98:	b29a      	uxth	r2, r3
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	695b      	ldr	r3, [r3, #20]
 8009ca4:	f003 0304 	and.w	r3, r3, #4
 8009ca8:	2b04      	cmp	r3, #4
 8009caa:	d11b      	bne.n	8009ce4 <HAL_I2C_Master_Transmit+0x188>
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d017      	beq.n	8009ce4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cb8:	781a      	ldrb	r2, [r3, #0]
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cc4:	1c5a      	adds	r2, r3, #1
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009cce:	b29b      	uxth	r3, r3
 8009cd0:	3b01      	subs	r3, #1
 8009cd2:	b29a      	uxth	r2, r3
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009cdc:	3b01      	subs	r3, #1
 8009cde:	b29a      	uxth	r2, r3
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009ce4:	697a      	ldr	r2, [r7, #20]
 8009ce6:	6a39      	ldr	r1, [r7, #32]
 8009ce8:	68f8      	ldr	r0, [r7, #12]
 8009cea:	f000 fcc2 	bl	800a672 <I2C_WaitOnBTFFlagUntilTimeout>
 8009cee:	4603      	mov	r3, r0
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d00d      	beq.n	8009d10 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cf8:	2b04      	cmp	r3, #4
 8009cfa:	d107      	bne.n	8009d0c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	681a      	ldr	r2, [r3, #0]
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009d0a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009d0c:	2301      	movs	r3, #1
 8009d0e:	e01a      	b.n	8009d46 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d194      	bne.n	8009c42 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	681a      	ldr	r2, [r3, #0]
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009d26:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	2220      	movs	r2, #32
 8009d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	2200      	movs	r2, #0
 8009d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009d40:	2300      	movs	r3, #0
 8009d42:	e000      	b.n	8009d46 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8009d44:	2302      	movs	r3, #2
  }
}
 8009d46:	4618      	mov	r0, r3
 8009d48:	3718      	adds	r7, #24
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	bd80      	pop	{r7, pc}
 8009d4e:	bf00      	nop
 8009d50:	00100002 	.word	0x00100002
 8009d54:	ffff0000 	.word	0xffff0000

08009d58 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b08c      	sub	sp, #48	; 0x30
 8009d5c:	af02      	add	r7, sp, #8
 8009d5e:	60f8      	str	r0, [r7, #12]
 8009d60:	607a      	str	r2, [r7, #4]
 8009d62:	461a      	mov	r2, r3
 8009d64:	460b      	mov	r3, r1
 8009d66:	817b      	strh	r3, [r7, #10]
 8009d68:	4613      	mov	r3, r2
 8009d6a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009d6c:	f7fe fb02 	bl	8008374 <HAL_GetTick>
 8009d70:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d78:	b2db      	uxtb	r3, r3
 8009d7a:	2b20      	cmp	r3, #32
 8009d7c:	f040 820b 	bne.w	800a196 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d82:	9300      	str	r3, [sp, #0]
 8009d84:	2319      	movs	r3, #25
 8009d86:	2201      	movs	r2, #1
 8009d88:	497c      	ldr	r1, [pc, #496]	; (8009f7c <HAL_I2C_Master_Receive+0x224>)
 8009d8a:	68f8      	ldr	r0, [r7, #12]
 8009d8c:	f000 fb5a 	bl	800a444 <I2C_WaitOnFlagUntilTimeout>
 8009d90:	4603      	mov	r3, r0
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d001      	beq.n	8009d9a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8009d96:	2302      	movs	r3, #2
 8009d98:	e1fe      	b.n	800a198 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009da0:	2b01      	cmp	r3, #1
 8009da2:	d101      	bne.n	8009da8 <HAL_I2C_Master_Receive+0x50>
 8009da4:	2302      	movs	r3, #2
 8009da6:	e1f7      	b.n	800a198 <HAL_I2C_Master_Receive+0x440>
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	2201      	movs	r2, #1
 8009dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	f003 0301 	and.w	r3, r3, #1
 8009dba:	2b01      	cmp	r3, #1
 8009dbc:	d007      	beq.n	8009dce <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	681a      	ldr	r2, [r3, #0]
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	f042 0201 	orr.w	r2, r2, #1
 8009dcc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	681a      	ldr	r2, [r3, #0]
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009ddc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	2222      	movs	r2, #34	; 0x22
 8009de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	2210      	movs	r2, #16
 8009dea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	2200      	movs	r2, #0
 8009df2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	687a      	ldr	r2, [r7, #4]
 8009df8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	893a      	ldrh	r2, [r7, #8]
 8009dfe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e04:	b29a      	uxth	r2, r3
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	4a5c      	ldr	r2, [pc, #368]	; (8009f80 <HAL_I2C_Master_Receive+0x228>)
 8009e0e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009e10:	8979      	ldrh	r1, [r7, #10]
 8009e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009e16:	68f8      	ldr	r0, [r7, #12]
 8009e18:	f000 fa46 	bl	800a2a8 <I2C_MasterRequestRead>
 8009e1c:	4603      	mov	r3, r0
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d001      	beq.n	8009e26 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8009e22:	2301      	movs	r3, #1
 8009e24:	e1b8      	b.n	800a198 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d113      	bne.n	8009e56 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009e2e:	2300      	movs	r3, #0
 8009e30:	623b      	str	r3, [r7, #32]
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	695b      	ldr	r3, [r3, #20]
 8009e38:	623b      	str	r3, [r7, #32]
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	699b      	ldr	r3, [r3, #24]
 8009e40:	623b      	str	r3, [r7, #32]
 8009e42:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	681a      	ldr	r2, [r3, #0]
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009e52:	601a      	str	r2, [r3, #0]
 8009e54:	e18c      	b.n	800a170 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e5a:	2b01      	cmp	r3, #1
 8009e5c:	d11b      	bne.n	8009e96 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	681a      	ldr	r2, [r3, #0]
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009e6c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009e6e:	2300      	movs	r3, #0
 8009e70:	61fb      	str	r3, [r7, #28]
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	695b      	ldr	r3, [r3, #20]
 8009e78:	61fb      	str	r3, [r7, #28]
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	699b      	ldr	r3, [r3, #24]
 8009e80:	61fb      	str	r3, [r7, #28]
 8009e82:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	681a      	ldr	r2, [r3, #0]
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009e92:	601a      	str	r2, [r3, #0]
 8009e94:	e16c      	b.n	800a170 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e9a:	2b02      	cmp	r3, #2
 8009e9c:	d11b      	bne.n	8009ed6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	681a      	ldr	r2, [r3, #0]
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009eac:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	681a      	ldr	r2, [r3, #0]
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009ebc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	61bb      	str	r3, [r7, #24]
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	695b      	ldr	r3, [r3, #20]
 8009ec8:	61bb      	str	r3, [r7, #24]
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	699b      	ldr	r3, [r3, #24]
 8009ed0:	61bb      	str	r3, [r7, #24]
 8009ed2:	69bb      	ldr	r3, [r7, #24]
 8009ed4:	e14c      	b.n	800a170 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	681a      	ldr	r2, [r3, #0]
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009ee4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	617b      	str	r3, [r7, #20]
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	695b      	ldr	r3, [r3, #20]
 8009ef0:	617b      	str	r3, [r7, #20]
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	699b      	ldr	r3, [r3, #24]
 8009ef8:	617b      	str	r3, [r7, #20]
 8009efa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8009efc:	e138      	b.n	800a170 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f02:	2b03      	cmp	r3, #3
 8009f04:	f200 80f1 	bhi.w	800a0ea <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f0c:	2b01      	cmp	r3, #1
 8009f0e:	d123      	bne.n	8009f58 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009f10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f12:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009f14:	68f8      	ldr	r0, [r7, #12]
 8009f16:	f000 fbed 	bl	800a6f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8009f1a:	4603      	mov	r3, r0
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d001      	beq.n	8009f24 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8009f20:	2301      	movs	r3, #1
 8009f22:	e139      	b.n	800a198 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	691a      	ldr	r2, [r3, #16]
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f2e:	b2d2      	uxtb	r2, r2
 8009f30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f36:	1c5a      	adds	r2, r3, #1
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f40:	3b01      	subs	r3, #1
 8009f42:	b29a      	uxth	r2, r3
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f4c:	b29b      	uxth	r3, r3
 8009f4e:	3b01      	subs	r3, #1
 8009f50:	b29a      	uxth	r2, r3
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009f56:	e10b      	b.n	800a170 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f5c:	2b02      	cmp	r3, #2
 8009f5e:	d14e      	bne.n	8009ffe <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f62:	9300      	str	r3, [sp, #0]
 8009f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f66:	2200      	movs	r2, #0
 8009f68:	4906      	ldr	r1, [pc, #24]	; (8009f84 <HAL_I2C_Master_Receive+0x22c>)
 8009f6a:	68f8      	ldr	r0, [r7, #12]
 8009f6c:	f000 fa6a 	bl	800a444 <I2C_WaitOnFlagUntilTimeout>
 8009f70:	4603      	mov	r3, r0
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d008      	beq.n	8009f88 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8009f76:	2301      	movs	r3, #1
 8009f78:	e10e      	b.n	800a198 <HAL_I2C_Master_Receive+0x440>
 8009f7a:	bf00      	nop
 8009f7c:	00100002 	.word	0x00100002
 8009f80:	ffff0000 	.word	0xffff0000
 8009f84:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	681a      	ldr	r2, [r3, #0]
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009f96:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	691a      	ldr	r2, [r3, #16]
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fa2:	b2d2      	uxtb	r2, r2
 8009fa4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009faa:	1c5a      	adds	r2, r3, #1
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009fb4:	3b01      	subs	r3, #1
 8009fb6:	b29a      	uxth	r2, r3
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009fc0:	b29b      	uxth	r3, r3
 8009fc2:	3b01      	subs	r3, #1
 8009fc4:	b29a      	uxth	r2, r3
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	691a      	ldr	r2, [r3, #16]
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fd4:	b2d2      	uxtb	r2, r2
 8009fd6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fdc:	1c5a      	adds	r2, r3, #1
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009fe6:	3b01      	subs	r3, #1
 8009fe8:	b29a      	uxth	r2, r3
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ff2:	b29b      	uxth	r3, r3
 8009ff4:	3b01      	subs	r3, #1
 8009ff6:	b29a      	uxth	r2, r3
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009ffc:	e0b8      	b.n	800a170 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a000:	9300      	str	r3, [sp, #0]
 800a002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a004:	2200      	movs	r2, #0
 800a006:	4966      	ldr	r1, [pc, #408]	; (800a1a0 <HAL_I2C_Master_Receive+0x448>)
 800a008:	68f8      	ldr	r0, [r7, #12]
 800a00a:	f000 fa1b 	bl	800a444 <I2C_WaitOnFlagUntilTimeout>
 800a00e:	4603      	mov	r3, r0
 800a010:	2b00      	cmp	r3, #0
 800a012:	d001      	beq.n	800a018 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800a014:	2301      	movs	r3, #1
 800a016:	e0bf      	b.n	800a198 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	681a      	ldr	r2, [r3, #0]
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a026:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	691a      	ldr	r2, [r3, #16]
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a032:	b2d2      	uxtb	r2, r2
 800a034:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a03a:	1c5a      	adds	r2, r3, #1
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a044:	3b01      	subs	r3, #1
 800a046:	b29a      	uxth	r2, r3
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a050:	b29b      	uxth	r3, r3
 800a052:	3b01      	subs	r3, #1
 800a054:	b29a      	uxth	r2, r3
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a05a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a05c:	9300      	str	r3, [sp, #0]
 800a05e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a060:	2200      	movs	r2, #0
 800a062:	494f      	ldr	r1, [pc, #316]	; (800a1a0 <HAL_I2C_Master_Receive+0x448>)
 800a064:	68f8      	ldr	r0, [r7, #12]
 800a066:	f000 f9ed 	bl	800a444 <I2C_WaitOnFlagUntilTimeout>
 800a06a:	4603      	mov	r3, r0
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d001      	beq.n	800a074 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800a070:	2301      	movs	r3, #1
 800a072:	e091      	b.n	800a198 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	681a      	ldr	r2, [r3, #0]
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a082:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	691a      	ldr	r2, [r3, #16]
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a08e:	b2d2      	uxtb	r2, r2
 800a090:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a096:	1c5a      	adds	r2, r3, #1
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a0a0:	3b01      	subs	r3, #1
 800a0a2:	b29a      	uxth	r2, r3
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a0ac:	b29b      	uxth	r3, r3
 800a0ae:	3b01      	subs	r3, #1
 800a0b0:	b29a      	uxth	r2, r3
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	691a      	ldr	r2, [r3, #16]
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0c0:	b2d2      	uxtb	r2, r2
 800a0c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0c8:	1c5a      	adds	r2, r3, #1
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a0d2:	3b01      	subs	r3, #1
 800a0d4:	b29a      	uxth	r2, r3
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a0de:	b29b      	uxth	r3, r3
 800a0e0:	3b01      	subs	r3, #1
 800a0e2:	b29a      	uxth	r2, r3
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a0e8:	e042      	b.n	800a170 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a0ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a0ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a0ee:	68f8      	ldr	r0, [r7, #12]
 800a0f0:	f000 fb00 	bl	800a6f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a0f4:	4603      	mov	r3, r0
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d001      	beq.n	800a0fe <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800a0fa:	2301      	movs	r3, #1
 800a0fc:	e04c      	b.n	800a198 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	691a      	ldr	r2, [r3, #16]
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a108:	b2d2      	uxtb	r2, r2
 800a10a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a110:	1c5a      	adds	r2, r3, #1
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a11a:	3b01      	subs	r3, #1
 800a11c:	b29a      	uxth	r2, r3
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a126:	b29b      	uxth	r3, r3
 800a128:	3b01      	subs	r3, #1
 800a12a:	b29a      	uxth	r2, r3
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	695b      	ldr	r3, [r3, #20]
 800a136:	f003 0304 	and.w	r3, r3, #4
 800a13a:	2b04      	cmp	r3, #4
 800a13c:	d118      	bne.n	800a170 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	691a      	ldr	r2, [r3, #16]
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a148:	b2d2      	uxtb	r2, r2
 800a14a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a150:	1c5a      	adds	r2, r3, #1
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a15a:	3b01      	subs	r3, #1
 800a15c:	b29a      	uxth	r2, r3
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a166:	b29b      	uxth	r3, r3
 800a168:	3b01      	subs	r3, #1
 800a16a:	b29a      	uxth	r2, r3
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a174:	2b00      	cmp	r3, #0
 800a176:	f47f aec2 	bne.w	8009efe <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	2220      	movs	r2, #32
 800a17e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	2200      	movs	r2, #0
 800a186:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	2200      	movs	r2, #0
 800a18e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a192:	2300      	movs	r3, #0
 800a194:	e000      	b.n	800a198 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800a196:	2302      	movs	r3, #2
  }
}
 800a198:	4618      	mov	r0, r3
 800a19a:	3728      	adds	r7, #40	; 0x28
 800a19c:	46bd      	mov	sp, r7
 800a19e:	bd80      	pop	{r7, pc}
 800a1a0:	00010004 	.word	0x00010004

0800a1a4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b088      	sub	sp, #32
 800a1a8:	af02      	add	r7, sp, #8
 800a1aa:	60f8      	str	r0, [r7, #12]
 800a1ac:	607a      	str	r2, [r7, #4]
 800a1ae:	603b      	str	r3, [r7, #0]
 800a1b0:	460b      	mov	r3, r1
 800a1b2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1b8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800a1ba:	697b      	ldr	r3, [r7, #20]
 800a1bc:	2b08      	cmp	r3, #8
 800a1be:	d006      	beq.n	800a1ce <I2C_MasterRequestWrite+0x2a>
 800a1c0:	697b      	ldr	r3, [r7, #20]
 800a1c2:	2b01      	cmp	r3, #1
 800a1c4:	d003      	beq.n	800a1ce <I2C_MasterRequestWrite+0x2a>
 800a1c6:	697b      	ldr	r3, [r7, #20]
 800a1c8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a1cc:	d108      	bne.n	800a1e0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	681a      	ldr	r2, [r3, #0]
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a1dc:	601a      	str	r2, [r3, #0]
 800a1de:	e00b      	b.n	800a1f8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1e4:	2b12      	cmp	r3, #18
 800a1e6:	d107      	bne.n	800a1f8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	681a      	ldr	r2, [r3, #0]
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a1f6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	9300      	str	r3, [sp, #0]
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	2200      	movs	r2, #0
 800a200:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a204:	68f8      	ldr	r0, [r7, #12]
 800a206:	f000 f91d 	bl	800a444 <I2C_WaitOnFlagUntilTimeout>
 800a20a:	4603      	mov	r3, r0
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d00d      	beq.n	800a22c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a21a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a21e:	d103      	bne.n	800a228 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a226:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a228:	2303      	movs	r3, #3
 800a22a:	e035      	b.n	800a298 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	691b      	ldr	r3, [r3, #16]
 800a230:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a234:	d108      	bne.n	800a248 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a236:	897b      	ldrh	r3, [r7, #10]
 800a238:	b2db      	uxtb	r3, r3
 800a23a:	461a      	mov	r2, r3
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a244:	611a      	str	r2, [r3, #16]
 800a246:	e01b      	b.n	800a280 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800a248:	897b      	ldrh	r3, [r7, #10]
 800a24a:	11db      	asrs	r3, r3, #7
 800a24c:	b2db      	uxtb	r3, r3
 800a24e:	f003 0306 	and.w	r3, r3, #6
 800a252:	b2db      	uxtb	r3, r3
 800a254:	f063 030f 	orn	r3, r3, #15
 800a258:	b2da      	uxtb	r2, r3
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a260:	683b      	ldr	r3, [r7, #0]
 800a262:	687a      	ldr	r2, [r7, #4]
 800a264:	490e      	ldr	r1, [pc, #56]	; (800a2a0 <I2C_MasterRequestWrite+0xfc>)
 800a266:	68f8      	ldr	r0, [r7, #12]
 800a268:	f000 f943 	bl	800a4f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a26c:	4603      	mov	r3, r0
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d001      	beq.n	800a276 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800a272:	2301      	movs	r3, #1
 800a274:	e010      	b.n	800a298 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a276:	897b      	ldrh	r3, [r7, #10]
 800a278:	b2da      	uxtb	r2, r3
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	687a      	ldr	r2, [r7, #4]
 800a284:	4907      	ldr	r1, [pc, #28]	; (800a2a4 <I2C_MasterRequestWrite+0x100>)
 800a286:	68f8      	ldr	r0, [r7, #12]
 800a288:	f000 f933 	bl	800a4f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a28c:	4603      	mov	r3, r0
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d001      	beq.n	800a296 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800a292:	2301      	movs	r3, #1
 800a294:	e000      	b.n	800a298 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800a296:	2300      	movs	r3, #0
}
 800a298:	4618      	mov	r0, r3
 800a29a:	3718      	adds	r7, #24
 800a29c:	46bd      	mov	sp, r7
 800a29e:	bd80      	pop	{r7, pc}
 800a2a0:	00010008 	.word	0x00010008
 800a2a4:	00010002 	.word	0x00010002

0800a2a8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b088      	sub	sp, #32
 800a2ac:	af02      	add	r7, sp, #8
 800a2ae:	60f8      	str	r0, [r7, #12]
 800a2b0:	607a      	str	r2, [r7, #4]
 800a2b2:	603b      	str	r3, [r7, #0]
 800a2b4:	460b      	mov	r3, r1
 800a2b6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2bc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	681a      	ldr	r2, [r3, #0]
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a2cc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800a2ce:	697b      	ldr	r3, [r7, #20]
 800a2d0:	2b08      	cmp	r3, #8
 800a2d2:	d006      	beq.n	800a2e2 <I2C_MasterRequestRead+0x3a>
 800a2d4:	697b      	ldr	r3, [r7, #20]
 800a2d6:	2b01      	cmp	r3, #1
 800a2d8:	d003      	beq.n	800a2e2 <I2C_MasterRequestRead+0x3a>
 800a2da:	697b      	ldr	r3, [r7, #20]
 800a2dc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a2e0:	d108      	bne.n	800a2f4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	681a      	ldr	r2, [r3, #0]
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a2f0:	601a      	str	r2, [r3, #0]
 800a2f2:	e00b      	b.n	800a30c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2f8:	2b11      	cmp	r3, #17
 800a2fa:	d107      	bne.n	800a30c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	681a      	ldr	r2, [r3, #0]
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a30a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	9300      	str	r3, [sp, #0]
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2200      	movs	r2, #0
 800a314:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a318:	68f8      	ldr	r0, [r7, #12]
 800a31a:	f000 f893 	bl	800a444 <I2C_WaitOnFlagUntilTimeout>
 800a31e:	4603      	mov	r3, r0
 800a320:	2b00      	cmp	r3, #0
 800a322:	d00d      	beq.n	800a340 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a32e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a332:	d103      	bne.n	800a33c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a33a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a33c:	2303      	movs	r3, #3
 800a33e:	e079      	b.n	800a434 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	691b      	ldr	r3, [r3, #16]
 800a344:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a348:	d108      	bne.n	800a35c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800a34a:	897b      	ldrh	r3, [r7, #10]
 800a34c:	b2db      	uxtb	r3, r3
 800a34e:	f043 0301 	orr.w	r3, r3, #1
 800a352:	b2da      	uxtb	r2, r3
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	611a      	str	r2, [r3, #16]
 800a35a:	e05f      	b.n	800a41c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800a35c:	897b      	ldrh	r3, [r7, #10]
 800a35e:	11db      	asrs	r3, r3, #7
 800a360:	b2db      	uxtb	r3, r3
 800a362:	f003 0306 	and.w	r3, r3, #6
 800a366:	b2db      	uxtb	r3, r3
 800a368:	f063 030f 	orn	r3, r3, #15
 800a36c:	b2da      	uxtb	r2, r3
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	687a      	ldr	r2, [r7, #4]
 800a378:	4930      	ldr	r1, [pc, #192]	; (800a43c <I2C_MasterRequestRead+0x194>)
 800a37a:	68f8      	ldr	r0, [r7, #12]
 800a37c:	f000 f8b9 	bl	800a4f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a380:	4603      	mov	r3, r0
 800a382:	2b00      	cmp	r3, #0
 800a384:	d001      	beq.n	800a38a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800a386:	2301      	movs	r3, #1
 800a388:	e054      	b.n	800a434 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a38a:	897b      	ldrh	r3, [r7, #10]
 800a38c:	b2da      	uxtb	r2, r3
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	687a      	ldr	r2, [r7, #4]
 800a398:	4929      	ldr	r1, [pc, #164]	; (800a440 <I2C_MasterRequestRead+0x198>)
 800a39a:	68f8      	ldr	r0, [r7, #12]
 800a39c:	f000 f8a9 	bl	800a4f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a3a0:	4603      	mov	r3, r0
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d001      	beq.n	800a3aa <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800a3a6:	2301      	movs	r3, #1
 800a3a8:	e044      	b.n	800a434 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	613b      	str	r3, [r7, #16]
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	695b      	ldr	r3, [r3, #20]
 800a3b4:	613b      	str	r3, [r7, #16]
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	699b      	ldr	r3, [r3, #24]
 800a3bc:	613b      	str	r3, [r7, #16]
 800a3be:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	681a      	ldr	r2, [r3, #0]
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a3ce:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a3d0:	683b      	ldr	r3, [r7, #0]
 800a3d2:	9300      	str	r3, [sp, #0]
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a3dc:	68f8      	ldr	r0, [r7, #12]
 800a3de:	f000 f831 	bl	800a444 <I2C_WaitOnFlagUntilTimeout>
 800a3e2:	4603      	mov	r3, r0
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d00d      	beq.n	800a404 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a3f6:	d103      	bne.n	800a400 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a3fe:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800a400:	2303      	movs	r3, #3
 800a402:	e017      	b.n	800a434 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800a404:	897b      	ldrh	r3, [r7, #10]
 800a406:	11db      	asrs	r3, r3, #7
 800a408:	b2db      	uxtb	r3, r3
 800a40a:	f003 0306 	and.w	r3, r3, #6
 800a40e:	b2db      	uxtb	r3, r3
 800a410:	f063 030e 	orn	r3, r3, #14
 800a414:	b2da      	uxtb	r2, r3
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	687a      	ldr	r2, [r7, #4]
 800a420:	4907      	ldr	r1, [pc, #28]	; (800a440 <I2C_MasterRequestRead+0x198>)
 800a422:	68f8      	ldr	r0, [r7, #12]
 800a424:	f000 f865 	bl	800a4f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a428:	4603      	mov	r3, r0
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d001      	beq.n	800a432 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800a42e:	2301      	movs	r3, #1
 800a430:	e000      	b.n	800a434 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800a432:	2300      	movs	r3, #0
}
 800a434:	4618      	mov	r0, r3
 800a436:	3718      	adds	r7, #24
 800a438:	46bd      	mov	sp, r7
 800a43a:	bd80      	pop	{r7, pc}
 800a43c:	00010008 	.word	0x00010008
 800a440:	00010002 	.word	0x00010002

0800a444 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b084      	sub	sp, #16
 800a448:	af00      	add	r7, sp, #0
 800a44a:	60f8      	str	r0, [r7, #12]
 800a44c:	60b9      	str	r1, [r7, #8]
 800a44e:	603b      	str	r3, [r7, #0]
 800a450:	4613      	mov	r3, r2
 800a452:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a454:	e025      	b.n	800a4a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a456:	683b      	ldr	r3, [r7, #0]
 800a458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a45c:	d021      	beq.n	800a4a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a45e:	f7fd ff89 	bl	8008374 <HAL_GetTick>
 800a462:	4602      	mov	r2, r0
 800a464:	69bb      	ldr	r3, [r7, #24]
 800a466:	1ad3      	subs	r3, r2, r3
 800a468:	683a      	ldr	r2, [r7, #0]
 800a46a:	429a      	cmp	r2, r3
 800a46c:	d302      	bcc.n	800a474 <I2C_WaitOnFlagUntilTimeout+0x30>
 800a46e:	683b      	ldr	r3, [r7, #0]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d116      	bne.n	800a4a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	2200      	movs	r2, #0
 800a478:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	2220      	movs	r2, #32
 800a47e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	2200      	movs	r2, #0
 800a486:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a48e:	f043 0220 	orr.w	r2, r3, #32
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	2200      	movs	r2, #0
 800a49a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a49e:	2301      	movs	r3, #1
 800a4a0:	e023      	b.n	800a4ea <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a4a2:	68bb      	ldr	r3, [r7, #8]
 800a4a4:	0c1b      	lsrs	r3, r3, #16
 800a4a6:	b2db      	uxtb	r3, r3
 800a4a8:	2b01      	cmp	r3, #1
 800a4aa:	d10d      	bne.n	800a4c8 <I2C_WaitOnFlagUntilTimeout+0x84>
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	695b      	ldr	r3, [r3, #20]
 800a4b2:	43da      	mvns	r2, r3
 800a4b4:	68bb      	ldr	r3, [r7, #8]
 800a4b6:	4013      	ands	r3, r2
 800a4b8:	b29b      	uxth	r3, r3
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	bf0c      	ite	eq
 800a4be:	2301      	moveq	r3, #1
 800a4c0:	2300      	movne	r3, #0
 800a4c2:	b2db      	uxtb	r3, r3
 800a4c4:	461a      	mov	r2, r3
 800a4c6:	e00c      	b.n	800a4e2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	699b      	ldr	r3, [r3, #24]
 800a4ce:	43da      	mvns	r2, r3
 800a4d0:	68bb      	ldr	r3, [r7, #8]
 800a4d2:	4013      	ands	r3, r2
 800a4d4:	b29b      	uxth	r3, r3
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	bf0c      	ite	eq
 800a4da:	2301      	moveq	r3, #1
 800a4dc:	2300      	movne	r3, #0
 800a4de:	b2db      	uxtb	r3, r3
 800a4e0:	461a      	mov	r2, r3
 800a4e2:	79fb      	ldrb	r3, [r7, #7]
 800a4e4:	429a      	cmp	r2, r3
 800a4e6:	d0b6      	beq.n	800a456 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a4e8:	2300      	movs	r3, #0
}
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	3710      	adds	r7, #16
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	bd80      	pop	{r7, pc}

0800a4f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800a4f2:	b580      	push	{r7, lr}
 800a4f4:	b084      	sub	sp, #16
 800a4f6:	af00      	add	r7, sp, #0
 800a4f8:	60f8      	str	r0, [r7, #12]
 800a4fa:	60b9      	str	r1, [r7, #8]
 800a4fc:	607a      	str	r2, [r7, #4]
 800a4fe:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a500:	e051      	b.n	800a5a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	695b      	ldr	r3, [r3, #20]
 800a508:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a50c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a510:	d123      	bne.n	800a55a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	681a      	ldr	r2, [r3, #0]
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a520:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a52a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	2200      	movs	r2, #0
 800a530:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	2220      	movs	r2, #32
 800a536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	2200      	movs	r2, #0
 800a53e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a546:	f043 0204 	orr.w	r2, r3, #4
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	2200      	movs	r2, #0
 800a552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a556:	2301      	movs	r3, #1
 800a558:	e046      	b.n	800a5e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a560:	d021      	beq.n	800a5a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a562:	f7fd ff07 	bl	8008374 <HAL_GetTick>
 800a566:	4602      	mov	r2, r0
 800a568:	683b      	ldr	r3, [r7, #0]
 800a56a:	1ad3      	subs	r3, r2, r3
 800a56c:	687a      	ldr	r2, [r7, #4]
 800a56e:	429a      	cmp	r2, r3
 800a570:	d302      	bcc.n	800a578 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d116      	bne.n	800a5a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	2200      	movs	r2, #0
 800a57c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	2220      	movs	r2, #32
 800a582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	2200      	movs	r2, #0
 800a58a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a592:	f043 0220 	orr.w	r2, r3, #32
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	2200      	movs	r2, #0
 800a59e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a5a2:	2301      	movs	r3, #1
 800a5a4:	e020      	b.n	800a5e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800a5a6:	68bb      	ldr	r3, [r7, #8]
 800a5a8:	0c1b      	lsrs	r3, r3, #16
 800a5aa:	b2db      	uxtb	r3, r3
 800a5ac:	2b01      	cmp	r3, #1
 800a5ae:	d10c      	bne.n	800a5ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	695b      	ldr	r3, [r3, #20]
 800a5b6:	43da      	mvns	r2, r3
 800a5b8:	68bb      	ldr	r3, [r7, #8]
 800a5ba:	4013      	ands	r3, r2
 800a5bc:	b29b      	uxth	r3, r3
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	bf14      	ite	ne
 800a5c2:	2301      	movne	r3, #1
 800a5c4:	2300      	moveq	r3, #0
 800a5c6:	b2db      	uxtb	r3, r3
 800a5c8:	e00b      	b.n	800a5e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	699b      	ldr	r3, [r3, #24]
 800a5d0:	43da      	mvns	r2, r3
 800a5d2:	68bb      	ldr	r3, [r7, #8]
 800a5d4:	4013      	ands	r3, r2
 800a5d6:	b29b      	uxth	r3, r3
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	bf14      	ite	ne
 800a5dc:	2301      	movne	r3, #1
 800a5de:	2300      	moveq	r3, #0
 800a5e0:	b2db      	uxtb	r3, r3
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d18d      	bne.n	800a502 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800a5e6:	2300      	movs	r3, #0
}
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	3710      	adds	r7, #16
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	bd80      	pop	{r7, pc}

0800a5f0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b084      	sub	sp, #16
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	60f8      	str	r0, [r7, #12]
 800a5f8:	60b9      	str	r1, [r7, #8]
 800a5fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a5fc:	e02d      	b.n	800a65a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a5fe:	68f8      	ldr	r0, [r7, #12]
 800a600:	f000 f8ce 	bl	800a7a0 <I2C_IsAcknowledgeFailed>
 800a604:	4603      	mov	r3, r0
 800a606:	2b00      	cmp	r3, #0
 800a608:	d001      	beq.n	800a60e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a60a:	2301      	movs	r3, #1
 800a60c:	e02d      	b.n	800a66a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a60e:	68bb      	ldr	r3, [r7, #8]
 800a610:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a614:	d021      	beq.n	800a65a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a616:	f7fd fead 	bl	8008374 <HAL_GetTick>
 800a61a:	4602      	mov	r2, r0
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	1ad3      	subs	r3, r2, r3
 800a620:	68ba      	ldr	r2, [r7, #8]
 800a622:	429a      	cmp	r2, r3
 800a624:	d302      	bcc.n	800a62c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800a626:	68bb      	ldr	r3, [r7, #8]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d116      	bne.n	800a65a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	2200      	movs	r2, #0
 800a630:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	2220      	movs	r2, #32
 800a636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	2200      	movs	r2, #0
 800a63e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a646:	f043 0220 	orr.w	r2, r3, #32
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	2200      	movs	r2, #0
 800a652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a656:	2301      	movs	r3, #1
 800a658:	e007      	b.n	800a66a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	695b      	ldr	r3, [r3, #20]
 800a660:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a664:	2b80      	cmp	r3, #128	; 0x80
 800a666:	d1ca      	bne.n	800a5fe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a668:	2300      	movs	r3, #0
}
 800a66a:	4618      	mov	r0, r3
 800a66c:	3710      	adds	r7, #16
 800a66e:	46bd      	mov	sp, r7
 800a670:	bd80      	pop	{r7, pc}

0800a672 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a672:	b580      	push	{r7, lr}
 800a674:	b084      	sub	sp, #16
 800a676:	af00      	add	r7, sp, #0
 800a678:	60f8      	str	r0, [r7, #12]
 800a67a:	60b9      	str	r1, [r7, #8]
 800a67c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a67e:	e02d      	b.n	800a6dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800a680:	68f8      	ldr	r0, [r7, #12]
 800a682:	f000 f88d 	bl	800a7a0 <I2C_IsAcknowledgeFailed>
 800a686:	4603      	mov	r3, r0
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d001      	beq.n	800a690 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800a68c:	2301      	movs	r3, #1
 800a68e:	e02d      	b.n	800a6ec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a690:	68bb      	ldr	r3, [r7, #8]
 800a692:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a696:	d021      	beq.n	800a6dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a698:	f7fd fe6c 	bl	8008374 <HAL_GetTick>
 800a69c:	4602      	mov	r2, r0
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	1ad3      	subs	r3, r2, r3
 800a6a2:	68ba      	ldr	r2, [r7, #8]
 800a6a4:	429a      	cmp	r2, r3
 800a6a6:	d302      	bcc.n	800a6ae <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800a6a8:	68bb      	ldr	r3, [r7, #8]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d116      	bne.n	800a6dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	2220      	movs	r2, #32
 800a6b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	2200      	movs	r2, #0
 800a6c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6c8:	f043 0220 	orr.w	r2, r3, #32
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800a6d8:	2301      	movs	r3, #1
 800a6da:	e007      	b.n	800a6ec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	695b      	ldr	r3, [r3, #20]
 800a6e2:	f003 0304 	and.w	r3, r3, #4
 800a6e6:	2b04      	cmp	r3, #4
 800a6e8:	d1ca      	bne.n	800a680 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a6ea:	2300      	movs	r3, #0
}
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	3710      	adds	r7, #16
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	bd80      	pop	{r7, pc}

0800a6f4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b084      	sub	sp, #16
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	60f8      	str	r0, [r7, #12]
 800a6fc:	60b9      	str	r1, [r7, #8]
 800a6fe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a700:	e042      	b.n	800a788 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	695b      	ldr	r3, [r3, #20]
 800a708:	f003 0310 	and.w	r3, r3, #16
 800a70c:	2b10      	cmp	r3, #16
 800a70e:	d119      	bne.n	800a744 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	f06f 0210 	mvn.w	r2, #16
 800a718:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	2200      	movs	r2, #0
 800a71e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	2220      	movs	r2, #32
 800a724:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	2200      	movs	r2, #0
 800a72c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	2200      	movs	r2, #0
 800a73c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a740:	2301      	movs	r3, #1
 800a742:	e029      	b.n	800a798 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a744:	f7fd fe16 	bl	8008374 <HAL_GetTick>
 800a748:	4602      	mov	r2, r0
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	1ad3      	subs	r3, r2, r3
 800a74e:	68ba      	ldr	r2, [r7, #8]
 800a750:	429a      	cmp	r2, r3
 800a752:	d302      	bcc.n	800a75a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800a754:	68bb      	ldr	r3, [r7, #8]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d116      	bne.n	800a788 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	2200      	movs	r2, #0
 800a75e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	2220      	movs	r2, #32
 800a764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	2200      	movs	r2, #0
 800a76c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a774:	f043 0220 	orr.w	r2, r3, #32
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	2200      	movs	r2, #0
 800a780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800a784:	2301      	movs	r3, #1
 800a786:	e007      	b.n	800a798 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	695b      	ldr	r3, [r3, #20]
 800a78e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a792:	2b40      	cmp	r3, #64	; 0x40
 800a794:	d1b5      	bne.n	800a702 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a796:	2300      	movs	r3, #0
}
 800a798:	4618      	mov	r0, r3
 800a79a:	3710      	adds	r7, #16
 800a79c:	46bd      	mov	sp, r7
 800a79e:	bd80      	pop	{r7, pc}

0800a7a0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800a7a0:	b480      	push	{r7}
 800a7a2:	b083      	sub	sp, #12
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	695b      	ldr	r3, [r3, #20]
 800a7ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a7b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a7b6:	d11b      	bne.n	800a7f0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a7c0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	2220      	movs	r2, #32
 800a7cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2200      	movs	r2, #0
 800a7d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7dc:	f043 0204 	orr.w	r2, r3, #4
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800a7ec:	2301      	movs	r3, #1
 800a7ee:	e000      	b.n	800a7f2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800a7f0:	2300      	movs	r3, #0
}
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	370c      	adds	r7, #12
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fc:	4770      	bx	lr
	...

0800a800 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800a800:	b580      	push	{r7, lr}
 800a802:	b082      	sub	sp, #8
 800a804:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800a806:	2300      	movs	r3, #0
 800a808:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800a80a:	2300      	movs	r3, #0
 800a80c:	603b      	str	r3, [r7, #0]
 800a80e:	4b20      	ldr	r3, [pc, #128]	; (800a890 <HAL_PWREx_EnableOverDrive+0x90>)
 800a810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a812:	4a1f      	ldr	r2, [pc, #124]	; (800a890 <HAL_PWREx_EnableOverDrive+0x90>)
 800a814:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a818:	6413      	str	r3, [r2, #64]	; 0x40
 800a81a:	4b1d      	ldr	r3, [pc, #116]	; (800a890 <HAL_PWREx_EnableOverDrive+0x90>)
 800a81c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a81e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a822:	603b      	str	r3, [r7, #0]
 800a824:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800a826:	4b1b      	ldr	r3, [pc, #108]	; (800a894 <HAL_PWREx_EnableOverDrive+0x94>)
 800a828:	2201      	movs	r2, #1
 800a82a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a82c:	f7fd fda2 	bl	8008374 <HAL_GetTick>
 800a830:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800a832:	e009      	b.n	800a848 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800a834:	f7fd fd9e 	bl	8008374 <HAL_GetTick>
 800a838:	4602      	mov	r2, r0
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	1ad3      	subs	r3, r2, r3
 800a83e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a842:	d901      	bls.n	800a848 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800a844:	2303      	movs	r3, #3
 800a846:	e01f      	b.n	800a888 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800a848:	4b13      	ldr	r3, [pc, #76]	; (800a898 <HAL_PWREx_EnableOverDrive+0x98>)
 800a84a:	685b      	ldr	r3, [r3, #4]
 800a84c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a850:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a854:	d1ee      	bne.n	800a834 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800a856:	4b11      	ldr	r3, [pc, #68]	; (800a89c <HAL_PWREx_EnableOverDrive+0x9c>)
 800a858:	2201      	movs	r2, #1
 800a85a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a85c:	f7fd fd8a 	bl	8008374 <HAL_GetTick>
 800a860:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800a862:	e009      	b.n	800a878 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800a864:	f7fd fd86 	bl	8008374 <HAL_GetTick>
 800a868:	4602      	mov	r2, r0
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	1ad3      	subs	r3, r2, r3
 800a86e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a872:	d901      	bls.n	800a878 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800a874:	2303      	movs	r3, #3
 800a876:	e007      	b.n	800a888 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800a878:	4b07      	ldr	r3, [pc, #28]	; (800a898 <HAL_PWREx_EnableOverDrive+0x98>)
 800a87a:	685b      	ldr	r3, [r3, #4]
 800a87c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a880:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a884:	d1ee      	bne.n	800a864 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800a886:	2300      	movs	r3, #0
}
 800a888:	4618      	mov	r0, r3
 800a88a:	3708      	adds	r7, #8
 800a88c:	46bd      	mov	sp, r7
 800a88e:	bd80      	pop	{r7, pc}
 800a890:	40023800 	.word	0x40023800
 800a894:	420e0040 	.word	0x420e0040
 800a898:	40007000 	.word	0x40007000
 800a89c:	420e0044 	.word	0x420e0044

0800a8a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b084      	sub	sp, #16
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
 800a8a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d101      	bne.n	800a8b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a8b0:	2301      	movs	r3, #1
 800a8b2:	e0cc      	b.n	800aa4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a8b4:	4b68      	ldr	r3, [pc, #416]	; (800aa58 <HAL_RCC_ClockConfig+0x1b8>)
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	f003 030f 	and.w	r3, r3, #15
 800a8bc:	683a      	ldr	r2, [r7, #0]
 800a8be:	429a      	cmp	r2, r3
 800a8c0:	d90c      	bls.n	800a8dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a8c2:	4b65      	ldr	r3, [pc, #404]	; (800aa58 <HAL_RCC_ClockConfig+0x1b8>)
 800a8c4:	683a      	ldr	r2, [r7, #0]
 800a8c6:	b2d2      	uxtb	r2, r2
 800a8c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a8ca:	4b63      	ldr	r3, [pc, #396]	; (800aa58 <HAL_RCC_ClockConfig+0x1b8>)
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	f003 030f 	and.w	r3, r3, #15
 800a8d2:	683a      	ldr	r2, [r7, #0]
 800a8d4:	429a      	cmp	r2, r3
 800a8d6:	d001      	beq.n	800a8dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a8d8:	2301      	movs	r3, #1
 800a8da:	e0b8      	b.n	800aa4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	f003 0302 	and.w	r3, r3, #2
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d020      	beq.n	800a92a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	f003 0304 	and.w	r3, r3, #4
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d005      	beq.n	800a900 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a8f4:	4b59      	ldr	r3, [pc, #356]	; (800aa5c <HAL_RCC_ClockConfig+0x1bc>)
 800a8f6:	689b      	ldr	r3, [r3, #8]
 800a8f8:	4a58      	ldr	r2, [pc, #352]	; (800aa5c <HAL_RCC_ClockConfig+0x1bc>)
 800a8fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800a8fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	f003 0308 	and.w	r3, r3, #8
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d005      	beq.n	800a918 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a90c:	4b53      	ldr	r3, [pc, #332]	; (800aa5c <HAL_RCC_ClockConfig+0x1bc>)
 800a90e:	689b      	ldr	r3, [r3, #8]
 800a910:	4a52      	ldr	r2, [pc, #328]	; (800aa5c <HAL_RCC_ClockConfig+0x1bc>)
 800a912:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800a916:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a918:	4b50      	ldr	r3, [pc, #320]	; (800aa5c <HAL_RCC_ClockConfig+0x1bc>)
 800a91a:	689b      	ldr	r3, [r3, #8]
 800a91c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	689b      	ldr	r3, [r3, #8]
 800a924:	494d      	ldr	r1, [pc, #308]	; (800aa5c <HAL_RCC_ClockConfig+0x1bc>)
 800a926:	4313      	orrs	r3, r2
 800a928:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	681b      	ldr	r3, [r3, #0]
 800a92e:	f003 0301 	and.w	r3, r3, #1
 800a932:	2b00      	cmp	r3, #0
 800a934:	d044      	beq.n	800a9c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	685b      	ldr	r3, [r3, #4]
 800a93a:	2b01      	cmp	r3, #1
 800a93c:	d107      	bne.n	800a94e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a93e:	4b47      	ldr	r3, [pc, #284]	; (800aa5c <HAL_RCC_ClockConfig+0x1bc>)
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a946:	2b00      	cmp	r3, #0
 800a948:	d119      	bne.n	800a97e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a94a:	2301      	movs	r3, #1
 800a94c:	e07f      	b.n	800aa4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	685b      	ldr	r3, [r3, #4]
 800a952:	2b02      	cmp	r3, #2
 800a954:	d003      	beq.n	800a95e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a95a:	2b03      	cmp	r3, #3
 800a95c:	d107      	bne.n	800a96e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a95e:	4b3f      	ldr	r3, [pc, #252]	; (800aa5c <HAL_RCC_ClockConfig+0x1bc>)
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a966:	2b00      	cmp	r3, #0
 800a968:	d109      	bne.n	800a97e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a96a:	2301      	movs	r3, #1
 800a96c:	e06f      	b.n	800aa4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a96e:	4b3b      	ldr	r3, [pc, #236]	; (800aa5c <HAL_RCC_ClockConfig+0x1bc>)
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	f003 0302 	and.w	r3, r3, #2
 800a976:	2b00      	cmp	r3, #0
 800a978:	d101      	bne.n	800a97e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a97a:	2301      	movs	r3, #1
 800a97c:	e067      	b.n	800aa4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a97e:	4b37      	ldr	r3, [pc, #220]	; (800aa5c <HAL_RCC_ClockConfig+0x1bc>)
 800a980:	689b      	ldr	r3, [r3, #8]
 800a982:	f023 0203 	bic.w	r2, r3, #3
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	685b      	ldr	r3, [r3, #4]
 800a98a:	4934      	ldr	r1, [pc, #208]	; (800aa5c <HAL_RCC_ClockConfig+0x1bc>)
 800a98c:	4313      	orrs	r3, r2
 800a98e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a990:	f7fd fcf0 	bl	8008374 <HAL_GetTick>
 800a994:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a996:	e00a      	b.n	800a9ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a998:	f7fd fcec 	bl	8008374 <HAL_GetTick>
 800a99c:	4602      	mov	r2, r0
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	1ad3      	subs	r3, r2, r3
 800a9a2:	f241 3288 	movw	r2, #5000	; 0x1388
 800a9a6:	4293      	cmp	r3, r2
 800a9a8:	d901      	bls.n	800a9ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a9aa:	2303      	movs	r3, #3
 800a9ac:	e04f      	b.n	800aa4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a9ae:	4b2b      	ldr	r3, [pc, #172]	; (800aa5c <HAL_RCC_ClockConfig+0x1bc>)
 800a9b0:	689b      	ldr	r3, [r3, #8]
 800a9b2:	f003 020c 	and.w	r2, r3, #12
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	685b      	ldr	r3, [r3, #4]
 800a9ba:	009b      	lsls	r3, r3, #2
 800a9bc:	429a      	cmp	r2, r3
 800a9be:	d1eb      	bne.n	800a998 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a9c0:	4b25      	ldr	r3, [pc, #148]	; (800aa58 <HAL_RCC_ClockConfig+0x1b8>)
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	f003 030f 	and.w	r3, r3, #15
 800a9c8:	683a      	ldr	r2, [r7, #0]
 800a9ca:	429a      	cmp	r2, r3
 800a9cc:	d20c      	bcs.n	800a9e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a9ce:	4b22      	ldr	r3, [pc, #136]	; (800aa58 <HAL_RCC_ClockConfig+0x1b8>)
 800a9d0:	683a      	ldr	r2, [r7, #0]
 800a9d2:	b2d2      	uxtb	r2, r2
 800a9d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a9d6:	4b20      	ldr	r3, [pc, #128]	; (800aa58 <HAL_RCC_ClockConfig+0x1b8>)
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	f003 030f 	and.w	r3, r3, #15
 800a9de:	683a      	ldr	r2, [r7, #0]
 800a9e0:	429a      	cmp	r2, r3
 800a9e2:	d001      	beq.n	800a9e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a9e4:	2301      	movs	r3, #1
 800a9e6:	e032      	b.n	800aa4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	f003 0304 	and.w	r3, r3, #4
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d008      	beq.n	800aa06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a9f4:	4b19      	ldr	r3, [pc, #100]	; (800aa5c <HAL_RCC_ClockConfig+0x1bc>)
 800a9f6:	689b      	ldr	r3, [r3, #8]
 800a9f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	68db      	ldr	r3, [r3, #12]
 800aa00:	4916      	ldr	r1, [pc, #88]	; (800aa5c <HAL_RCC_ClockConfig+0x1bc>)
 800aa02:	4313      	orrs	r3, r2
 800aa04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	f003 0308 	and.w	r3, r3, #8
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d009      	beq.n	800aa26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800aa12:	4b12      	ldr	r3, [pc, #72]	; (800aa5c <HAL_RCC_ClockConfig+0x1bc>)
 800aa14:	689b      	ldr	r3, [r3, #8]
 800aa16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	691b      	ldr	r3, [r3, #16]
 800aa1e:	00db      	lsls	r3, r3, #3
 800aa20:	490e      	ldr	r1, [pc, #56]	; (800aa5c <HAL_RCC_ClockConfig+0x1bc>)
 800aa22:	4313      	orrs	r3, r2
 800aa24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800aa26:	f000 f821 	bl	800aa6c <HAL_RCC_GetSysClockFreq>
 800aa2a:	4601      	mov	r1, r0
 800aa2c:	4b0b      	ldr	r3, [pc, #44]	; (800aa5c <HAL_RCC_ClockConfig+0x1bc>)
 800aa2e:	689b      	ldr	r3, [r3, #8]
 800aa30:	091b      	lsrs	r3, r3, #4
 800aa32:	f003 030f 	and.w	r3, r3, #15
 800aa36:	4a0a      	ldr	r2, [pc, #40]	; (800aa60 <HAL_RCC_ClockConfig+0x1c0>)
 800aa38:	5cd3      	ldrb	r3, [r2, r3]
 800aa3a:	fa21 f303 	lsr.w	r3, r1, r3
 800aa3e:	4a09      	ldr	r2, [pc, #36]	; (800aa64 <HAL_RCC_ClockConfig+0x1c4>)
 800aa40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800aa42:	4b09      	ldr	r3, [pc, #36]	; (800aa68 <HAL_RCC_ClockConfig+0x1c8>)
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	4618      	mov	r0, r3
 800aa48:	f7fd fc50 	bl	80082ec <HAL_InitTick>

  return HAL_OK;
 800aa4c:	2300      	movs	r3, #0
}
 800aa4e:	4618      	mov	r0, r3
 800aa50:	3710      	adds	r7, #16
 800aa52:	46bd      	mov	sp, r7
 800aa54:	bd80      	pop	{r7, pc}
 800aa56:	bf00      	nop
 800aa58:	40023c00 	.word	0x40023c00
 800aa5c:	40023800 	.word	0x40023800
 800aa60:	08018790 	.word	0x08018790
 800aa64:	20000000 	.word	0x20000000
 800aa68:	20000004 	.word	0x20000004

0800aa6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800aa6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa6e:	b085      	sub	sp, #20
 800aa70:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800aa72:	2300      	movs	r3, #0
 800aa74:	607b      	str	r3, [r7, #4]
 800aa76:	2300      	movs	r3, #0
 800aa78:	60fb      	str	r3, [r7, #12]
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800aa7e:	2300      	movs	r3, #0
 800aa80:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800aa82:	4b63      	ldr	r3, [pc, #396]	; (800ac10 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800aa84:	689b      	ldr	r3, [r3, #8]
 800aa86:	f003 030c 	and.w	r3, r3, #12
 800aa8a:	2b04      	cmp	r3, #4
 800aa8c:	d007      	beq.n	800aa9e <HAL_RCC_GetSysClockFreq+0x32>
 800aa8e:	2b08      	cmp	r3, #8
 800aa90:	d008      	beq.n	800aaa4 <HAL_RCC_GetSysClockFreq+0x38>
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	f040 80b4 	bne.w	800ac00 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800aa98:	4b5e      	ldr	r3, [pc, #376]	; (800ac14 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800aa9a:	60bb      	str	r3, [r7, #8]
       break;
 800aa9c:	e0b3      	b.n	800ac06 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800aa9e:	4b5d      	ldr	r3, [pc, #372]	; (800ac14 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800aaa0:	60bb      	str	r3, [r7, #8]
      break;
 800aaa2:	e0b0      	b.n	800ac06 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800aaa4:	4b5a      	ldr	r3, [pc, #360]	; (800ac10 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800aaa6:	685b      	ldr	r3, [r3, #4]
 800aaa8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aaac:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800aaae:	4b58      	ldr	r3, [pc, #352]	; (800ac10 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800aab0:	685b      	ldr	r3, [r3, #4]
 800aab2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d04a      	beq.n	800ab50 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800aaba:	4b55      	ldr	r3, [pc, #340]	; (800ac10 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800aabc:	685b      	ldr	r3, [r3, #4]
 800aabe:	099b      	lsrs	r3, r3, #6
 800aac0:	f04f 0400 	mov.w	r4, #0
 800aac4:	f240 11ff 	movw	r1, #511	; 0x1ff
 800aac8:	f04f 0200 	mov.w	r2, #0
 800aacc:	ea03 0501 	and.w	r5, r3, r1
 800aad0:	ea04 0602 	and.w	r6, r4, r2
 800aad4:	4629      	mov	r1, r5
 800aad6:	4632      	mov	r2, r6
 800aad8:	f04f 0300 	mov.w	r3, #0
 800aadc:	f04f 0400 	mov.w	r4, #0
 800aae0:	0154      	lsls	r4, r2, #5
 800aae2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800aae6:	014b      	lsls	r3, r1, #5
 800aae8:	4619      	mov	r1, r3
 800aaea:	4622      	mov	r2, r4
 800aaec:	1b49      	subs	r1, r1, r5
 800aaee:	eb62 0206 	sbc.w	r2, r2, r6
 800aaf2:	f04f 0300 	mov.w	r3, #0
 800aaf6:	f04f 0400 	mov.w	r4, #0
 800aafa:	0194      	lsls	r4, r2, #6
 800aafc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800ab00:	018b      	lsls	r3, r1, #6
 800ab02:	1a5b      	subs	r3, r3, r1
 800ab04:	eb64 0402 	sbc.w	r4, r4, r2
 800ab08:	f04f 0100 	mov.w	r1, #0
 800ab0c:	f04f 0200 	mov.w	r2, #0
 800ab10:	00e2      	lsls	r2, r4, #3
 800ab12:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800ab16:	00d9      	lsls	r1, r3, #3
 800ab18:	460b      	mov	r3, r1
 800ab1a:	4614      	mov	r4, r2
 800ab1c:	195b      	adds	r3, r3, r5
 800ab1e:	eb44 0406 	adc.w	r4, r4, r6
 800ab22:	f04f 0100 	mov.w	r1, #0
 800ab26:	f04f 0200 	mov.w	r2, #0
 800ab2a:	02a2      	lsls	r2, r4, #10
 800ab2c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800ab30:	0299      	lsls	r1, r3, #10
 800ab32:	460b      	mov	r3, r1
 800ab34:	4614      	mov	r4, r2
 800ab36:	4618      	mov	r0, r3
 800ab38:	4621      	mov	r1, r4
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	f04f 0400 	mov.w	r4, #0
 800ab40:	461a      	mov	r2, r3
 800ab42:	4623      	mov	r3, r4
 800ab44:	f7f6 f8b8 	bl	8000cb8 <__aeabi_uldivmod>
 800ab48:	4603      	mov	r3, r0
 800ab4a:	460c      	mov	r4, r1
 800ab4c:	60fb      	str	r3, [r7, #12]
 800ab4e:	e049      	b.n	800abe4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ab50:	4b2f      	ldr	r3, [pc, #188]	; (800ac10 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800ab52:	685b      	ldr	r3, [r3, #4]
 800ab54:	099b      	lsrs	r3, r3, #6
 800ab56:	f04f 0400 	mov.w	r4, #0
 800ab5a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800ab5e:	f04f 0200 	mov.w	r2, #0
 800ab62:	ea03 0501 	and.w	r5, r3, r1
 800ab66:	ea04 0602 	and.w	r6, r4, r2
 800ab6a:	4629      	mov	r1, r5
 800ab6c:	4632      	mov	r2, r6
 800ab6e:	f04f 0300 	mov.w	r3, #0
 800ab72:	f04f 0400 	mov.w	r4, #0
 800ab76:	0154      	lsls	r4, r2, #5
 800ab78:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800ab7c:	014b      	lsls	r3, r1, #5
 800ab7e:	4619      	mov	r1, r3
 800ab80:	4622      	mov	r2, r4
 800ab82:	1b49      	subs	r1, r1, r5
 800ab84:	eb62 0206 	sbc.w	r2, r2, r6
 800ab88:	f04f 0300 	mov.w	r3, #0
 800ab8c:	f04f 0400 	mov.w	r4, #0
 800ab90:	0194      	lsls	r4, r2, #6
 800ab92:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800ab96:	018b      	lsls	r3, r1, #6
 800ab98:	1a5b      	subs	r3, r3, r1
 800ab9a:	eb64 0402 	sbc.w	r4, r4, r2
 800ab9e:	f04f 0100 	mov.w	r1, #0
 800aba2:	f04f 0200 	mov.w	r2, #0
 800aba6:	00e2      	lsls	r2, r4, #3
 800aba8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800abac:	00d9      	lsls	r1, r3, #3
 800abae:	460b      	mov	r3, r1
 800abb0:	4614      	mov	r4, r2
 800abb2:	195b      	adds	r3, r3, r5
 800abb4:	eb44 0406 	adc.w	r4, r4, r6
 800abb8:	f04f 0100 	mov.w	r1, #0
 800abbc:	f04f 0200 	mov.w	r2, #0
 800abc0:	02a2      	lsls	r2, r4, #10
 800abc2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800abc6:	0299      	lsls	r1, r3, #10
 800abc8:	460b      	mov	r3, r1
 800abca:	4614      	mov	r4, r2
 800abcc:	4618      	mov	r0, r3
 800abce:	4621      	mov	r1, r4
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	f04f 0400 	mov.w	r4, #0
 800abd6:	461a      	mov	r2, r3
 800abd8:	4623      	mov	r3, r4
 800abda:	f7f6 f86d 	bl	8000cb8 <__aeabi_uldivmod>
 800abde:	4603      	mov	r3, r0
 800abe0:	460c      	mov	r4, r1
 800abe2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800abe4:	4b0a      	ldr	r3, [pc, #40]	; (800ac10 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800abe6:	685b      	ldr	r3, [r3, #4]
 800abe8:	0c1b      	lsrs	r3, r3, #16
 800abea:	f003 0303 	and.w	r3, r3, #3
 800abee:	3301      	adds	r3, #1
 800abf0:	005b      	lsls	r3, r3, #1
 800abf2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800abf4:	68fa      	ldr	r2, [r7, #12]
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	fbb2 f3f3 	udiv	r3, r2, r3
 800abfc:	60bb      	str	r3, [r7, #8]
      break;
 800abfe:	e002      	b.n	800ac06 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800ac00:	4b04      	ldr	r3, [pc, #16]	; (800ac14 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800ac02:	60bb      	str	r3, [r7, #8]
      break;
 800ac04:	bf00      	nop
    }
  }
  return sysclockfreq;
 800ac06:	68bb      	ldr	r3, [r7, #8]
}
 800ac08:	4618      	mov	r0, r3
 800ac0a:	3714      	adds	r7, #20
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac10:	40023800 	.word	0x40023800
 800ac14:	00f42400 	.word	0x00f42400

0800ac18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ac18:	b480      	push	{r7}
 800ac1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ac1c:	4b03      	ldr	r3, [pc, #12]	; (800ac2c <HAL_RCC_GetHCLKFreq+0x14>)
 800ac1e:	681b      	ldr	r3, [r3, #0]
}
 800ac20:	4618      	mov	r0, r3
 800ac22:	46bd      	mov	sp, r7
 800ac24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac28:	4770      	bx	lr
 800ac2a:	bf00      	nop
 800ac2c:	20000000 	.word	0x20000000

0800ac30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800ac34:	f7ff fff0 	bl	800ac18 <HAL_RCC_GetHCLKFreq>
 800ac38:	4601      	mov	r1, r0
 800ac3a:	4b05      	ldr	r3, [pc, #20]	; (800ac50 <HAL_RCC_GetPCLK1Freq+0x20>)
 800ac3c:	689b      	ldr	r3, [r3, #8]
 800ac3e:	0a9b      	lsrs	r3, r3, #10
 800ac40:	f003 0307 	and.w	r3, r3, #7
 800ac44:	4a03      	ldr	r2, [pc, #12]	; (800ac54 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ac46:	5cd3      	ldrb	r3, [r2, r3]
 800ac48:	fa21 f303 	lsr.w	r3, r1, r3
}
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	bd80      	pop	{r7, pc}
 800ac50:	40023800 	.word	0x40023800
 800ac54:	080187a0 	.word	0x080187a0

0800ac58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800ac5c:	f7ff ffdc 	bl	800ac18 <HAL_RCC_GetHCLKFreq>
 800ac60:	4601      	mov	r1, r0
 800ac62:	4b05      	ldr	r3, [pc, #20]	; (800ac78 <HAL_RCC_GetPCLK2Freq+0x20>)
 800ac64:	689b      	ldr	r3, [r3, #8]
 800ac66:	0b5b      	lsrs	r3, r3, #13
 800ac68:	f003 0307 	and.w	r3, r3, #7
 800ac6c:	4a03      	ldr	r2, [pc, #12]	; (800ac7c <HAL_RCC_GetPCLK2Freq+0x24>)
 800ac6e:	5cd3      	ldrb	r3, [r2, r3]
 800ac70:	fa21 f303 	lsr.w	r3, r1, r3
}
 800ac74:	4618      	mov	r0, r3
 800ac76:	bd80      	pop	{r7, pc}
 800ac78:	40023800 	.word	0x40023800
 800ac7c:	080187a0 	.word	0x080187a0

0800ac80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b088      	sub	sp, #32
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800ac88:	2300      	movs	r3, #0
 800ac8a:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 800ac90:	2300      	movs	r3, #0
 800ac92:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 800ac94:	2300      	movs	r3, #0
 800ac96:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 800ac98:	2300      	movs	r3, #0
 800ac9a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d00a      	beq.n	800acbe <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800aca8:	4b66      	ldr	r3, [pc, #408]	; (800ae44 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800acaa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800acae:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800acb6:	4963      	ldr	r1, [pc, #396]	; (800ae44 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800acb8:	4313      	orrs	r3, r2
 800acba:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d00a      	beq.n	800ace0 <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800acca:	4b5e      	ldr	r3, [pc, #376]	; (800ae44 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800accc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800acd0:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acd8:	495a      	ldr	r1, [pc, #360]	; (800ae44 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800acda:	4313      	orrs	r3, r2
 800acdc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	f003 0301 	and.w	r3, r3, #1
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d10b      	bne.n	800ad04 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d105      	bne.n	800ad04 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d075      	beq.n	800adf0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800ad04:	4b50      	ldr	r3, [pc, #320]	; (800ae48 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800ad06:	2200      	movs	r2, #0
 800ad08:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800ad0a:	f7fd fb33 	bl	8008374 <HAL_GetTick>
 800ad0e:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800ad10:	e008      	b.n	800ad24 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800ad12:	f7fd fb2f 	bl	8008374 <HAL_GetTick>
 800ad16:	4602      	mov	r2, r0
 800ad18:	69fb      	ldr	r3, [r7, #28]
 800ad1a:	1ad3      	subs	r3, r2, r3
 800ad1c:	2b02      	cmp	r3, #2
 800ad1e:	d901      	bls.n	800ad24 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ad20:	2303      	movs	r3, #3
 800ad22:	e1dc      	b.n	800b0de <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800ad24:	4b47      	ldr	r3, [pc, #284]	; (800ae44 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d1f0      	bne.n	800ad12 <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	f003 0301 	and.w	r3, r3, #1
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d009      	beq.n	800ad50 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	685b      	ldr	r3, [r3, #4]
 800ad40:	019a      	lsls	r2, r3, #6
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	689b      	ldr	r3, [r3, #8]
 800ad46:	071b      	lsls	r3, r3, #28
 800ad48:	493e      	ldr	r1, [pc, #248]	; (800ae44 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800ad4a:	4313      	orrs	r3, r2
 800ad4c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	f003 0302 	and.w	r3, r3, #2
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d01f      	beq.n	800ad9c <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800ad5c:	4b39      	ldr	r3, [pc, #228]	; (800ae44 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800ad5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ad62:	0f1b      	lsrs	r3, r3, #28
 800ad64:	f003 0307 	and.w	r3, r3, #7
 800ad68:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	685b      	ldr	r3, [r3, #4]
 800ad6e:	019a      	lsls	r2, r3, #6
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	68db      	ldr	r3, [r3, #12]
 800ad74:	061b      	lsls	r3, r3, #24
 800ad76:	431a      	orrs	r2, r3
 800ad78:	69bb      	ldr	r3, [r7, #24]
 800ad7a:	071b      	lsls	r3, r3, #28
 800ad7c:	4931      	ldr	r1, [pc, #196]	; (800ae44 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800ad7e:	4313      	orrs	r3, r2
 800ad80:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800ad84:	4b2f      	ldr	r3, [pc, #188]	; (800ae44 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800ad86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ad8a:	f023 021f 	bic.w	r2, r3, #31
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	6a1b      	ldr	r3, [r3, #32]
 800ad92:	3b01      	subs	r3, #1
 800ad94:	492b      	ldr	r1, [pc, #172]	; (800ae44 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800ad96:	4313      	orrs	r3, r2
 800ad98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d00d      	beq.n	800adc4 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	685b      	ldr	r3, [r3, #4]
 800adac:	019a      	lsls	r2, r3, #6
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	68db      	ldr	r3, [r3, #12]
 800adb2:	061b      	lsls	r3, r3, #24
 800adb4:	431a      	orrs	r2, r3
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	689b      	ldr	r3, [r3, #8]
 800adba:	071b      	lsls	r3, r3, #28
 800adbc:	4921      	ldr	r1, [pc, #132]	; (800ae44 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800adbe:	4313      	orrs	r3, r2
 800adc0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800adc4:	4b20      	ldr	r3, [pc, #128]	; (800ae48 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800adc6:	2201      	movs	r2, #1
 800adc8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800adca:	f7fd fad3 	bl	8008374 <HAL_GetTick>
 800adce:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800add0:	e008      	b.n	800ade4 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800add2:	f7fd facf 	bl	8008374 <HAL_GetTick>
 800add6:	4602      	mov	r2, r0
 800add8:	69fb      	ldr	r3, [r7, #28]
 800adda:	1ad3      	subs	r3, r2, r3
 800addc:	2b02      	cmp	r3, #2
 800adde:	d901      	bls.n	800ade4 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ade0:	2303      	movs	r3, #3
 800ade2:	e17c      	b.n	800b0de <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800ade4:	4b17      	ldr	r3, [pc, #92]	; (800ae44 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800adec:	2b00      	cmp	r3, #0
 800adee:	d0f0      	beq.n	800add2 <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	f003 0304 	and.w	r3, r3, #4
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d112      	bne.n	800ae22 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d10c      	bne.n	800ae22 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	f000 80ce 	beq.w	800afb2 <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800ae1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ae1e:	f040 80c8 	bne.w	800afb2 <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800ae22:	4b0a      	ldr	r3, [pc, #40]	; (800ae4c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800ae24:	2200      	movs	r2, #0
 800ae26:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800ae28:	f7fd faa4 	bl	8008374 <HAL_GetTick>
 800ae2c:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800ae2e:	e00f      	b.n	800ae50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800ae30:	f7fd faa0 	bl	8008374 <HAL_GetTick>
 800ae34:	4602      	mov	r2, r0
 800ae36:	69fb      	ldr	r3, [r7, #28]
 800ae38:	1ad3      	subs	r3, r2, r3
 800ae3a:	2b02      	cmp	r3, #2
 800ae3c:	d908      	bls.n	800ae50 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ae3e:	2303      	movs	r3, #3
 800ae40:	e14d      	b.n	800b0de <HAL_RCCEx_PeriphCLKConfig+0x45e>
 800ae42:	bf00      	nop
 800ae44:	40023800 	.word	0x40023800
 800ae48:	42470068 	.word	0x42470068
 800ae4c:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800ae50:	4ba5      	ldr	r3, [pc, #660]	; (800b0e8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ae58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae5c:	d0e8      	beq.n	800ae30 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	f003 0304 	and.w	r3, r3, #4
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d02e      	beq.n	800aec8 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800ae6a:	4b9f      	ldr	r3, [pc, #636]	; (800b0e8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ae6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae70:	0c1b      	lsrs	r3, r3, #16
 800ae72:	f003 0303 	and.w	r3, r3, #3
 800ae76:	3301      	adds	r3, #1
 800ae78:	005b      	lsls	r3, r3, #1
 800ae7a:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800ae7c:	4b9a      	ldr	r3, [pc, #616]	; (800b0e8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800ae7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae82:	0f1b      	lsrs	r3, r3, #28
 800ae84:	f003 0307 	and.w	r3, r3, #7
 800ae88:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	691b      	ldr	r3, [r3, #16]
 800ae8e:	019a      	lsls	r2, r3, #6
 800ae90:	697b      	ldr	r3, [r7, #20]
 800ae92:	085b      	lsrs	r3, r3, #1
 800ae94:	3b01      	subs	r3, #1
 800ae96:	041b      	lsls	r3, r3, #16
 800ae98:	431a      	orrs	r2, r3
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	699b      	ldr	r3, [r3, #24]
 800ae9e:	061b      	lsls	r3, r3, #24
 800aea0:	431a      	orrs	r2, r3
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	071b      	lsls	r3, r3, #28
 800aea6:	4990      	ldr	r1, [pc, #576]	; (800b0e8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800aea8:	4313      	orrs	r3, r2
 800aeaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800aeae:	4b8e      	ldr	r3, [pc, #568]	; (800b0e8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800aeb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aeb4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aebc:	3b01      	subs	r3, #1
 800aebe:	021b      	lsls	r3, r3, #8
 800aec0:	4989      	ldr	r1, [pc, #548]	; (800b0e8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800aec2:	4313      	orrs	r3, r2
 800aec4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	f003 0308 	and.w	r3, r3, #8
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d02c      	beq.n	800af2e <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800aed4:	4b84      	ldr	r3, [pc, #528]	; (800b0e8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800aed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aeda:	0c1b      	lsrs	r3, r3, #16
 800aedc:	f003 0303 	and.w	r3, r3, #3
 800aee0:	3301      	adds	r3, #1
 800aee2:	005b      	lsls	r3, r3, #1
 800aee4:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800aee6:	4b80      	ldr	r3, [pc, #512]	; (800b0e8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800aee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aeec:	0e1b      	lsrs	r3, r3, #24
 800aeee:	f003 030f 	and.w	r3, r3, #15
 800aef2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	691b      	ldr	r3, [r3, #16]
 800aef8:	019a      	lsls	r2, r3, #6
 800aefa:	697b      	ldr	r3, [r7, #20]
 800aefc:	085b      	lsrs	r3, r3, #1
 800aefe:	3b01      	subs	r3, #1
 800af00:	041b      	lsls	r3, r3, #16
 800af02:	431a      	orrs	r2, r3
 800af04:	693b      	ldr	r3, [r7, #16]
 800af06:	061b      	lsls	r3, r3, #24
 800af08:	431a      	orrs	r2, r3
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	69db      	ldr	r3, [r3, #28]
 800af0e:	071b      	lsls	r3, r3, #28
 800af10:	4975      	ldr	r1, [pc, #468]	; (800b0e8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800af12:	4313      	orrs	r3, r2
 800af14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800af18:	4b73      	ldr	r3, [pc, #460]	; (800b0e8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800af1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800af1e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af26:	4970      	ldr	r1, [pc, #448]	; (800b0e8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800af28:	4313      	orrs	r3, r2
 800af2a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af36:	2b00      	cmp	r3, #0
 800af38:	d024      	beq.n	800af84 <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800af3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800af42:	d11f      	bne.n	800af84 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800af44:	4b68      	ldr	r3, [pc, #416]	; (800b0e8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800af46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af4a:	0e1b      	lsrs	r3, r3, #24
 800af4c:	f003 030f 	and.w	r3, r3, #15
 800af50:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800af52:	4b65      	ldr	r3, [pc, #404]	; (800b0e8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800af54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af58:	0f1b      	lsrs	r3, r3, #28
 800af5a:	f003 0307 	and.w	r3, r3, #7
 800af5e:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	691b      	ldr	r3, [r3, #16]
 800af64:	019a      	lsls	r2, r3, #6
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	695b      	ldr	r3, [r3, #20]
 800af6a:	085b      	lsrs	r3, r3, #1
 800af6c:	3b01      	subs	r3, #1
 800af6e:	041b      	lsls	r3, r3, #16
 800af70:	431a      	orrs	r2, r3
 800af72:	693b      	ldr	r3, [r7, #16]
 800af74:	061b      	lsls	r3, r3, #24
 800af76:	431a      	orrs	r2, r3
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	071b      	lsls	r3, r3, #28
 800af7c:	495a      	ldr	r1, [pc, #360]	; (800b0e8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800af7e:	4313      	orrs	r3, r2
 800af80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800af84:	4b59      	ldr	r3, [pc, #356]	; (800b0ec <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800af86:	2201      	movs	r2, #1
 800af88:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800af8a:	f7fd f9f3 	bl	8008374 <HAL_GetTick>
 800af8e:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800af90:	e008      	b.n	800afa4 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800af92:	f7fd f9ef 	bl	8008374 <HAL_GetTick>
 800af96:	4602      	mov	r2, r0
 800af98:	69fb      	ldr	r3, [r7, #28]
 800af9a:	1ad3      	subs	r3, r2, r3
 800af9c:	2b02      	cmp	r3, #2
 800af9e:	d901      	bls.n	800afa4 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800afa0:	2303      	movs	r3, #3
 800afa2:	e09c      	b.n	800b0de <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800afa4:	4b50      	ldr	r3, [pc, #320]	; (800b0e8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800afac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800afb0:	d1ef      	bne.n	800af92 <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	f003 0320 	and.w	r3, r3, #32
 800afba:	2b00      	cmp	r3, #0
 800afbc:	f000 8083 	beq.w	800b0c6 <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800afc0:	2300      	movs	r3, #0
 800afc2:	60bb      	str	r3, [r7, #8]
 800afc4:	4b48      	ldr	r3, [pc, #288]	; (800b0e8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800afc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afc8:	4a47      	ldr	r2, [pc, #284]	; (800b0e8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800afca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800afce:	6413      	str	r3, [r2, #64]	; 0x40
 800afd0:	4b45      	ldr	r3, [pc, #276]	; (800b0e8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800afd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800afd8:	60bb      	str	r3, [r7, #8]
 800afda:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800afdc:	4b44      	ldr	r3, [pc, #272]	; (800b0f0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	4a43      	ldr	r2, [pc, #268]	; (800b0f0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800afe2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800afe6:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800afe8:	f7fd f9c4 	bl	8008374 <HAL_GetTick>
 800afec:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800afee:	e008      	b.n	800b002 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800aff0:	f7fd f9c0 	bl	8008374 <HAL_GetTick>
 800aff4:	4602      	mov	r2, r0
 800aff6:	69fb      	ldr	r3, [r7, #28]
 800aff8:	1ad3      	subs	r3, r2, r3
 800affa:	2b02      	cmp	r3, #2
 800affc:	d901      	bls.n	800b002 <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 800affe:	2303      	movs	r3, #3
 800b000:	e06d      	b.n	800b0de <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800b002:	4b3b      	ldr	r3, [pc, #236]	; (800b0f0 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d0f0      	beq.n	800aff0 <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800b00e:	4b36      	ldr	r3, [pc, #216]	; (800b0e8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b012:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b016:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800b018:	69bb      	ldr	r3, [r7, #24]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d02f      	beq.n	800b07e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b022:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b026:	69ba      	ldr	r2, [r7, #24]
 800b028:	429a      	cmp	r2, r3
 800b02a:	d028      	beq.n	800b07e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b02c:	4b2e      	ldr	r3, [pc, #184]	; (800b0e8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b02e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b030:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b034:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800b036:	4b2f      	ldr	r3, [pc, #188]	; (800b0f4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800b038:	2201      	movs	r2, #1
 800b03a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800b03c:	4b2d      	ldr	r3, [pc, #180]	; (800b0f4 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800b03e:	2200      	movs	r2, #0
 800b040:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800b042:	4a29      	ldr	r2, [pc, #164]	; (800b0e8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b044:	69bb      	ldr	r3, [r7, #24]
 800b046:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800b048:	4b27      	ldr	r3, [pc, #156]	; (800b0e8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b04a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b04c:	f003 0301 	and.w	r3, r3, #1
 800b050:	2b01      	cmp	r3, #1
 800b052:	d114      	bne.n	800b07e <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800b054:	f7fd f98e 	bl	8008374 <HAL_GetTick>
 800b058:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b05a:	e00a      	b.n	800b072 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b05c:	f7fd f98a 	bl	8008374 <HAL_GetTick>
 800b060:	4602      	mov	r2, r0
 800b062:	69fb      	ldr	r3, [r7, #28]
 800b064:	1ad3      	subs	r3, r2, r3
 800b066:	f241 3288 	movw	r2, #5000	; 0x1388
 800b06a:	4293      	cmp	r3, r2
 800b06c:	d901      	bls.n	800b072 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 800b06e:	2303      	movs	r3, #3
 800b070:	e035      	b.n	800b0de <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b072:	4b1d      	ldr	r3, [pc, #116]	; (800b0e8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b076:	f003 0302 	and.w	r3, r3, #2
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d0ee      	beq.n	800b05c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b082:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b086:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b08a:	d10d      	bne.n	800b0a8 <HAL_RCCEx_PeriphCLKConfig+0x428>
 800b08c:	4b16      	ldr	r3, [pc, #88]	; (800b0e8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b08e:	689b      	ldr	r3, [r3, #8]
 800b090:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b098:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b09c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b0a0:	4911      	ldr	r1, [pc, #68]	; (800b0e8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b0a2:	4313      	orrs	r3, r2
 800b0a4:	608b      	str	r3, [r1, #8]
 800b0a6:	e005      	b.n	800b0b4 <HAL_RCCEx_PeriphCLKConfig+0x434>
 800b0a8:	4b0f      	ldr	r3, [pc, #60]	; (800b0e8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b0aa:	689b      	ldr	r3, [r3, #8]
 800b0ac:	4a0e      	ldr	r2, [pc, #56]	; (800b0e8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b0ae:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800b0b2:	6093      	str	r3, [r2, #8]
 800b0b4:	4b0c      	ldr	r3, [pc, #48]	; (800b0e8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b0b6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b0c0:	4909      	ldr	r1, [pc, #36]	; (800b0e8 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800b0c2:	4313      	orrs	r3, r2
 800b0c4:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	f003 0310 	and.w	r3, r3, #16
 800b0ce:	2b00      	cmp	r3, #0
 800b0d0:	d004      	beq.n	800b0dc <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800b0d8:	4b07      	ldr	r3, [pc, #28]	; (800b0f8 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 800b0da:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800b0dc:	2300      	movs	r3, #0
}
 800b0de:	4618      	mov	r0, r3
 800b0e0:	3720      	adds	r7, #32
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	bd80      	pop	{r7, pc}
 800b0e6:	bf00      	nop
 800b0e8:	40023800 	.word	0x40023800
 800b0ec:	42470070 	.word	0x42470070
 800b0f0:	40007000 	.word	0x40007000
 800b0f4:	42470e40 	.word	0x42470e40
 800b0f8:	424711e0 	.word	0x424711e0

0800b0fc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b0fc:	b580      	push	{r7, lr}
 800b0fe:	b086      	sub	sp, #24
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b104:	2300      	movs	r3, #0
 800b106:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	f003 0301 	and.w	r3, r3, #1
 800b110:	2b00      	cmp	r3, #0
 800b112:	d075      	beq.n	800b200 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800b114:	4ba2      	ldr	r3, [pc, #648]	; (800b3a0 <HAL_RCC_OscConfig+0x2a4>)
 800b116:	689b      	ldr	r3, [r3, #8]
 800b118:	f003 030c 	and.w	r3, r3, #12
 800b11c:	2b04      	cmp	r3, #4
 800b11e:	d00c      	beq.n	800b13a <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b120:	4b9f      	ldr	r3, [pc, #636]	; (800b3a0 <HAL_RCC_OscConfig+0x2a4>)
 800b122:	689b      	ldr	r3, [r3, #8]
 800b124:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800b128:	2b08      	cmp	r3, #8
 800b12a:	d112      	bne.n	800b152 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b12c:	4b9c      	ldr	r3, [pc, #624]	; (800b3a0 <HAL_RCC_OscConfig+0x2a4>)
 800b12e:	685b      	ldr	r3, [r3, #4]
 800b130:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b134:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b138:	d10b      	bne.n	800b152 <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b13a:	4b99      	ldr	r3, [pc, #612]	; (800b3a0 <HAL_RCC_OscConfig+0x2a4>)
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b142:	2b00      	cmp	r3, #0
 800b144:	d05b      	beq.n	800b1fe <HAL_RCC_OscConfig+0x102>
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	685b      	ldr	r3, [r3, #4]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d157      	bne.n	800b1fe <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 800b14e:	2301      	movs	r3, #1
 800b150:	e20b      	b.n	800b56a <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	685b      	ldr	r3, [r3, #4]
 800b156:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b15a:	d106      	bne.n	800b16a <HAL_RCC_OscConfig+0x6e>
 800b15c:	4b90      	ldr	r3, [pc, #576]	; (800b3a0 <HAL_RCC_OscConfig+0x2a4>)
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	4a8f      	ldr	r2, [pc, #572]	; (800b3a0 <HAL_RCC_OscConfig+0x2a4>)
 800b162:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b166:	6013      	str	r3, [r2, #0]
 800b168:	e01d      	b.n	800b1a6 <HAL_RCC_OscConfig+0xaa>
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	685b      	ldr	r3, [r3, #4]
 800b16e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b172:	d10c      	bne.n	800b18e <HAL_RCC_OscConfig+0x92>
 800b174:	4b8a      	ldr	r3, [pc, #552]	; (800b3a0 <HAL_RCC_OscConfig+0x2a4>)
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	4a89      	ldr	r2, [pc, #548]	; (800b3a0 <HAL_RCC_OscConfig+0x2a4>)
 800b17a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b17e:	6013      	str	r3, [r2, #0]
 800b180:	4b87      	ldr	r3, [pc, #540]	; (800b3a0 <HAL_RCC_OscConfig+0x2a4>)
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	4a86      	ldr	r2, [pc, #536]	; (800b3a0 <HAL_RCC_OscConfig+0x2a4>)
 800b186:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b18a:	6013      	str	r3, [r2, #0]
 800b18c:	e00b      	b.n	800b1a6 <HAL_RCC_OscConfig+0xaa>
 800b18e:	4b84      	ldr	r3, [pc, #528]	; (800b3a0 <HAL_RCC_OscConfig+0x2a4>)
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	4a83      	ldr	r2, [pc, #524]	; (800b3a0 <HAL_RCC_OscConfig+0x2a4>)
 800b194:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b198:	6013      	str	r3, [r2, #0]
 800b19a:	4b81      	ldr	r3, [pc, #516]	; (800b3a0 <HAL_RCC_OscConfig+0x2a4>)
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	4a80      	ldr	r2, [pc, #512]	; (800b3a0 <HAL_RCC_OscConfig+0x2a4>)
 800b1a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b1a4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	685b      	ldr	r3, [r3, #4]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d013      	beq.n	800b1d6 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b1ae:	f7fd f8e1 	bl	8008374 <HAL_GetTick>
 800b1b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b1b4:	e008      	b.n	800b1c8 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b1b6:	f7fd f8dd 	bl	8008374 <HAL_GetTick>
 800b1ba:	4602      	mov	r2, r0
 800b1bc:	693b      	ldr	r3, [r7, #16]
 800b1be:	1ad3      	subs	r3, r2, r3
 800b1c0:	2b64      	cmp	r3, #100	; 0x64
 800b1c2:	d901      	bls.n	800b1c8 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 800b1c4:	2303      	movs	r3, #3
 800b1c6:	e1d0      	b.n	800b56a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b1c8:	4b75      	ldr	r3, [pc, #468]	; (800b3a0 <HAL_RCC_OscConfig+0x2a4>)
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d0f0      	beq.n	800b1b6 <HAL_RCC_OscConfig+0xba>
 800b1d4:	e014      	b.n	800b200 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b1d6:	f7fd f8cd 	bl	8008374 <HAL_GetTick>
 800b1da:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b1dc:	e008      	b.n	800b1f0 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b1de:	f7fd f8c9 	bl	8008374 <HAL_GetTick>
 800b1e2:	4602      	mov	r2, r0
 800b1e4:	693b      	ldr	r3, [r7, #16]
 800b1e6:	1ad3      	subs	r3, r2, r3
 800b1e8:	2b64      	cmp	r3, #100	; 0x64
 800b1ea:	d901      	bls.n	800b1f0 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 800b1ec:	2303      	movs	r3, #3
 800b1ee:	e1bc      	b.n	800b56a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b1f0:	4b6b      	ldr	r3, [pc, #428]	; (800b3a0 <HAL_RCC_OscConfig+0x2a4>)
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d1f0      	bne.n	800b1de <HAL_RCC_OscConfig+0xe2>
 800b1fc:	e000      	b.n	800b200 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b1fe:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	f003 0302 	and.w	r3, r3, #2
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d063      	beq.n	800b2d4 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800b20c:	4b64      	ldr	r3, [pc, #400]	; (800b3a0 <HAL_RCC_OscConfig+0x2a4>)
 800b20e:	689b      	ldr	r3, [r3, #8]
 800b210:	f003 030c 	and.w	r3, r3, #12
 800b214:	2b00      	cmp	r3, #0
 800b216:	d00b      	beq.n	800b230 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b218:	4b61      	ldr	r3, [pc, #388]	; (800b3a0 <HAL_RCC_OscConfig+0x2a4>)
 800b21a:	689b      	ldr	r3, [r3, #8]
 800b21c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800b220:	2b08      	cmp	r3, #8
 800b222:	d11c      	bne.n	800b25e <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b224:	4b5e      	ldr	r3, [pc, #376]	; (800b3a0 <HAL_RCC_OscConfig+0x2a4>)
 800b226:	685b      	ldr	r3, [r3, #4]
 800b228:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d116      	bne.n	800b25e <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b230:	4b5b      	ldr	r3, [pc, #364]	; (800b3a0 <HAL_RCC_OscConfig+0x2a4>)
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	f003 0302 	and.w	r3, r3, #2
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d005      	beq.n	800b248 <HAL_RCC_OscConfig+0x14c>
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	68db      	ldr	r3, [r3, #12]
 800b240:	2b01      	cmp	r3, #1
 800b242:	d001      	beq.n	800b248 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 800b244:	2301      	movs	r3, #1
 800b246:	e190      	b.n	800b56a <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b248:	4b55      	ldr	r3, [pc, #340]	; (800b3a0 <HAL_RCC_OscConfig+0x2a4>)
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	691b      	ldr	r3, [r3, #16]
 800b254:	00db      	lsls	r3, r3, #3
 800b256:	4952      	ldr	r1, [pc, #328]	; (800b3a0 <HAL_RCC_OscConfig+0x2a4>)
 800b258:	4313      	orrs	r3, r2
 800b25a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b25c:	e03a      	b.n	800b2d4 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	68db      	ldr	r3, [r3, #12]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d020      	beq.n	800b2a8 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b266:	4b4f      	ldr	r3, [pc, #316]	; (800b3a4 <HAL_RCC_OscConfig+0x2a8>)
 800b268:	2201      	movs	r2, #1
 800b26a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b26c:	f7fd f882 	bl	8008374 <HAL_GetTick>
 800b270:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b272:	e008      	b.n	800b286 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b274:	f7fd f87e 	bl	8008374 <HAL_GetTick>
 800b278:	4602      	mov	r2, r0
 800b27a:	693b      	ldr	r3, [r7, #16]
 800b27c:	1ad3      	subs	r3, r2, r3
 800b27e:	2b02      	cmp	r3, #2
 800b280:	d901      	bls.n	800b286 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800b282:	2303      	movs	r3, #3
 800b284:	e171      	b.n	800b56a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b286:	4b46      	ldr	r3, [pc, #280]	; (800b3a0 <HAL_RCC_OscConfig+0x2a4>)
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	f003 0302 	and.w	r3, r3, #2
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d0f0      	beq.n	800b274 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b292:	4b43      	ldr	r3, [pc, #268]	; (800b3a0 <HAL_RCC_OscConfig+0x2a4>)
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	691b      	ldr	r3, [r3, #16]
 800b29e:	00db      	lsls	r3, r3, #3
 800b2a0:	493f      	ldr	r1, [pc, #252]	; (800b3a0 <HAL_RCC_OscConfig+0x2a4>)
 800b2a2:	4313      	orrs	r3, r2
 800b2a4:	600b      	str	r3, [r1, #0]
 800b2a6:	e015      	b.n	800b2d4 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b2a8:	4b3e      	ldr	r3, [pc, #248]	; (800b3a4 <HAL_RCC_OscConfig+0x2a8>)
 800b2aa:	2200      	movs	r2, #0
 800b2ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b2ae:	f7fd f861 	bl	8008374 <HAL_GetTick>
 800b2b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b2b4:	e008      	b.n	800b2c8 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b2b6:	f7fd f85d 	bl	8008374 <HAL_GetTick>
 800b2ba:	4602      	mov	r2, r0
 800b2bc:	693b      	ldr	r3, [r7, #16]
 800b2be:	1ad3      	subs	r3, r2, r3
 800b2c0:	2b02      	cmp	r3, #2
 800b2c2:	d901      	bls.n	800b2c8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800b2c4:	2303      	movs	r3, #3
 800b2c6:	e150      	b.n	800b56a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b2c8:	4b35      	ldr	r3, [pc, #212]	; (800b3a0 <HAL_RCC_OscConfig+0x2a4>)
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	f003 0302 	and.w	r3, r3, #2
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d1f0      	bne.n	800b2b6 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	f003 0308 	and.w	r3, r3, #8
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d030      	beq.n	800b342 <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	695b      	ldr	r3, [r3, #20]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d016      	beq.n	800b316 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b2e8:	4b2f      	ldr	r3, [pc, #188]	; (800b3a8 <HAL_RCC_OscConfig+0x2ac>)
 800b2ea:	2201      	movs	r2, #1
 800b2ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b2ee:	f7fd f841 	bl	8008374 <HAL_GetTick>
 800b2f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b2f4:	e008      	b.n	800b308 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b2f6:	f7fd f83d 	bl	8008374 <HAL_GetTick>
 800b2fa:	4602      	mov	r2, r0
 800b2fc:	693b      	ldr	r3, [r7, #16]
 800b2fe:	1ad3      	subs	r3, r2, r3
 800b300:	2b02      	cmp	r3, #2
 800b302:	d901      	bls.n	800b308 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 800b304:	2303      	movs	r3, #3
 800b306:	e130      	b.n	800b56a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b308:	4b25      	ldr	r3, [pc, #148]	; (800b3a0 <HAL_RCC_OscConfig+0x2a4>)
 800b30a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b30c:	f003 0302 	and.w	r3, r3, #2
 800b310:	2b00      	cmp	r3, #0
 800b312:	d0f0      	beq.n	800b2f6 <HAL_RCC_OscConfig+0x1fa>
 800b314:	e015      	b.n	800b342 <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b316:	4b24      	ldr	r3, [pc, #144]	; (800b3a8 <HAL_RCC_OscConfig+0x2ac>)
 800b318:	2200      	movs	r2, #0
 800b31a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b31c:	f7fd f82a 	bl	8008374 <HAL_GetTick>
 800b320:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b322:	e008      	b.n	800b336 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b324:	f7fd f826 	bl	8008374 <HAL_GetTick>
 800b328:	4602      	mov	r2, r0
 800b32a:	693b      	ldr	r3, [r7, #16]
 800b32c:	1ad3      	subs	r3, r2, r3
 800b32e:	2b02      	cmp	r3, #2
 800b330:	d901      	bls.n	800b336 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 800b332:	2303      	movs	r3, #3
 800b334:	e119      	b.n	800b56a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b336:	4b1a      	ldr	r3, [pc, #104]	; (800b3a0 <HAL_RCC_OscConfig+0x2a4>)
 800b338:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b33a:	f003 0302 	and.w	r3, r3, #2
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d1f0      	bne.n	800b324 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	f003 0304 	and.w	r3, r3, #4
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	f000 809f 	beq.w	800b48e <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b350:	2300      	movs	r3, #0
 800b352:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b354:	4b12      	ldr	r3, [pc, #72]	; (800b3a0 <HAL_RCC_OscConfig+0x2a4>)
 800b356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b358:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d10f      	bne.n	800b380 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b360:	2300      	movs	r3, #0
 800b362:	60fb      	str	r3, [r7, #12]
 800b364:	4b0e      	ldr	r3, [pc, #56]	; (800b3a0 <HAL_RCC_OscConfig+0x2a4>)
 800b366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b368:	4a0d      	ldr	r2, [pc, #52]	; (800b3a0 <HAL_RCC_OscConfig+0x2a4>)
 800b36a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b36e:	6413      	str	r3, [r2, #64]	; 0x40
 800b370:	4b0b      	ldr	r3, [pc, #44]	; (800b3a0 <HAL_RCC_OscConfig+0x2a4>)
 800b372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b374:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b378:	60fb      	str	r3, [r7, #12]
 800b37a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800b37c:	2301      	movs	r3, #1
 800b37e:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b380:	4b0a      	ldr	r3, [pc, #40]	; (800b3ac <HAL_RCC_OscConfig+0x2b0>)
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d120      	bne.n	800b3ce <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b38c:	4b07      	ldr	r3, [pc, #28]	; (800b3ac <HAL_RCC_OscConfig+0x2b0>)
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	4a06      	ldr	r2, [pc, #24]	; (800b3ac <HAL_RCC_OscConfig+0x2b0>)
 800b392:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b396:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b398:	f7fc ffec 	bl	8008374 <HAL_GetTick>
 800b39c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b39e:	e010      	b.n	800b3c2 <HAL_RCC_OscConfig+0x2c6>
 800b3a0:	40023800 	.word	0x40023800
 800b3a4:	42470000 	.word	0x42470000
 800b3a8:	42470e80 	.word	0x42470e80
 800b3ac:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b3b0:	f7fc ffe0 	bl	8008374 <HAL_GetTick>
 800b3b4:	4602      	mov	r2, r0
 800b3b6:	693b      	ldr	r3, [r7, #16]
 800b3b8:	1ad3      	subs	r3, r2, r3
 800b3ba:	2b02      	cmp	r3, #2
 800b3bc:	d901      	bls.n	800b3c2 <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 800b3be:	2303      	movs	r3, #3
 800b3c0:	e0d3      	b.n	800b56a <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b3c2:	4b6c      	ldr	r3, [pc, #432]	; (800b574 <HAL_RCC_OscConfig+0x478>)
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d0f0      	beq.n	800b3b0 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	689b      	ldr	r3, [r3, #8]
 800b3d2:	2b01      	cmp	r3, #1
 800b3d4:	d106      	bne.n	800b3e4 <HAL_RCC_OscConfig+0x2e8>
 800b3d6:	4b68      	ldr	r3, [pc, #416]	; (800b578 <HAL_RCC_OscConfig+0x47c>)
 800b3d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3da:	4a67      	ldr	r2, [pc, #412]	; (800b578 <HAL_RCC_OscConfig+0x47c>)
 800b3dc:	f043 0301 	orr.w	r3, r3, #1
 800b3e0:	6713      	str	r3, [r2, #112]	; 0x70
 800b3e2:	e01c      	b.n	800b41e <HAL_RCC_OscConfig+0x322>
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	689b      	ldr	r3, [r3, #8]
 800b3e8:	2b05      	cmp	r3, #5
 800b3ea:	d10c      	bne.n	800b406 <HAL_RCC_OscConfig+0x30a>
 800b3ec:	4b62      	ldr	r3, [pc, #392]	; (800b578 <HAL_RCC_OscConfig+0x47c>)
 800b3ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3f0:	4a61      	ldr	r2, [pc, #388]	; (800b578 <HAL_RCC_OscConfig+0x47c>)
 800b3f2:	f043 0304 	orr.w	r3, r3, #4
 800b3f6:	6713      	str	r3, [r2, #112]	; 0x70
 800b3f8:	4b5f      	ldr	r3, [pc, #380]	; (800b578 <HAL_RCC_OscConfig+0x47c>)
 800b3fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3fc:	4a5e      	ldr	r2, [pc, #376]	; (800b578 <HAL_RCC_OscConfig+0x47c>)
 800b3fe:	f043 0301 	orr.w	r3, r3, #1
 800b402:	6713      	str	r3, [r2, #112]	; 0x70
 800b404:	e00b      	b.n	800b41e <HAL_RCC_OscConfig+0x322>
 800b406:	4b5c      	ldr	r3, [pc, #368]	; (800b578 <HAL_RCC_OscConfig+0x47c>)
 800b408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b40a:	4a5b      	ldr	r2, [pc, #364]	; (800b578 <HAL_RCC_OscConfig+0x47c>)
 800b40c:	f023 0301 	bic.w	r3, r3, #1
 800b410:	6713      	str	r3, [r2, #112]	; 0x70
 800b412:	4b59      	ldr	r3, [pc, #356]	; (800b578 <HAL_RCC_OscConfig+0x47c>)
 800b414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b416:	4a58      	ldr	r2, [pc, #352]	; (800b578 <HAL_RCC_OscConfig+0x47c>)
 800b418:	f023 0304 	bic.w	r3, r3, #4
 800b41c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	689b      	ldr	r3, [r3, #8]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d015      	beq.n	800b452 <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b426:	f7fc ffa5 	bl	8008374 <HAL_GetTick>
 800b42a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b42c:	e00a      	b.n	800b444 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b42e:	f7fc ffa1 	bl	8008374 <HAL_GetTick>
 800b432:	4602      	mov	r2, r0
 800b434:	693b      	ldr	r3, [r7, #16]
 800b436:	1ad3      	subs	r3, r2, r3
 800b438:	f241 3288 	movw	r2, #5000	; 0x1388
 800b43c:	4293      	cmp	r3, r2
 800b43e:	d901      	bls.n	800b444 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 800b440:	2303      	movs	r3, #3
 800b442:	e092      	b.n	800b56a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b444:	4b4c      	ldr	r3, [pc, #304]	; (800b578 <HAL_RCC_OscConfig+0x47c>)
 800b446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b448:	f003 0302 	and.w	r3, r3, #2
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d0ee      	beq.n	800b42e <HAL_RCC_OscConfig+0x332>
 800b450:	e014      	b.n	800b47c <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b452:	f7fc ff8f 	bl	8008374 <HAL_GetTick>
 800b456:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b458:	e00a      	b.n	800b470 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b45a:	f7fc ff8b 	bl	8008374 <HAL_GetTick>
 800b45e:	4602      	mov	r2, r0
 800b460:	693b      	ldr	r3, [r7, #16]
 800b462:	1ad3      	subs	r3, r2, r3
 800b464:	f241 3288 	movw	r2, #5000	; 0x1388
 800b468:	4293      	cmp	r3, r2
 800b46a:	d901      	bls.n	800b470 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 800b46c:	2303      	movs	r3, #3
 800b46e:	e07c      	b.n	800b56a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b470:	4b41      	ldr	r3, [pc, #260]	; (800b578 <HAL_RCC_OscConfig+0x47c>)
 800b472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b474:	f003 0302 	and.w	r3, r3, #2
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d1ee      	bne.n	800b45a <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b47c:	7dfb      	ldrb	r3, [r7, #23]
 800b47e:	2b01      	cmp	r3, #1
 800b480:	d105      	bne.n	800b48e <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b482:	4b3d      	ldr	r3, [pc, #244]	; (800b578 <HAL_RCC_OscConfig+0x47c>)
 800b484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b486:	4a3c      	ldr	r2, [pc, #240]	; (800b578 <HAL_RCC_OscConfig+0x47c>)
 800b488:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b48c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	699b      	ldr	r3, [r3, #24]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d068      	beq.n	800b568 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b496:	4b38      	ldr	r3, [pc, #224]	; (800b578 <HAL_RCC_OscConfig+0x47c>)
 800b498:	689b      	ldr	r3, [r3, #8]
 800b49a:	f003 030c 	and.w	r3, r3, #12
 800b49e:	2b08      	cmp	r3, #8
 800b4a0:	d060      	beq.n	800b564 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	699b      	ldr	r3, [r3, #24]
 800b4a6:	2b02      	cmp	r3, #2
 800b4a8:	d145      	bne.n	800b536 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b4aa:	4b34      	ldr	r3, [pc, #208]	; (800b57c <HAL_RCC_OscConfig+0x480>)
 800b4ac:	2200      	movs	r2, #0
 800b4ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b4b0:	f7fc ff60 	bl	8008374 <HAL_GetTick>
 800b4b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b4b6:	e008      	b.n	800b4ca <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b4b8:	f7fc ff5c 	bl	8008374 <HAL_GetTick>
 800b4bc:	4602      	mov	r2, r0
 800b4be:	693b      	ldr	r3, [r7, #16]
 800b4c0:	1ad3      	subs	r3, r2, r3
 800b4c2:	2b02      	cmp	r3, #2
 800b4c4:	d901      	bls.n	800b4ca <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 800b4c6:	2303      	movs	r3, #3
 800b4c8:	e04f      	b.n	800b56a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b4ca:	4b2b      	ldr	r3, [pc, #172]	; (800b578 <HAL_RCC_OscConfig+0x47c>)
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d1f0      	bne.n	800b4b8 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	69da      	ldr	r2, [r3, #28]
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	6a1b      	ldr	r3, [r3, #32]
 800b4de:	431a      	orrs	r2, r3
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4e4:	019b      	lsls	r3, r3, #6
 800b4e6:	431a      	orrs	r2, r3
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4ec:	085b      	lsrs	r3, r3, #1
 800b4ee:	3b01      	subs	r3, #1
 800b4f0:	041b      	lsls	r3, r3, #16
 800b4f2:	431a      	orrs	r2, r3
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4f8:	061b      	lsls	r3, r3, #24
 800b4fa:	431a      	orrs	r2, r3
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b500:	071b      	lsls	r3, r3, #28
 800b502:	491d      	ldr	r1, [pc, #116]	; (800b578 <HAL_RCC_OscConfig+0x47c>)
 800b504:	4313      	orrs	r3, r2
 800b506:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b508:	4b1c      	ldr	r3, [pc, #112]	; (800b57c <HAL_RCC_OscConfig+0x480>)
 800b50a:	2201      	movs	r2, #1
 800b50c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b50e:	f7fc ff31 	bl	8008374 <HAL_GetTick>
 800b512:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b514:	e008      	b.n	800b528 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b516:	f7fc ff2d 	bl	8008374 <HAL_GetTick>
 800b51a:	4602      	mov	r2, r0
 800b51c:	693b      	ldr	r3, [r7, #16]
 800b51e:	1ad3      	subs	r3, r2, r3
 800b520:	2b02      	cmp	r3, #2
 800b522:	d901      	bls.n	800b528 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800b524:	2303      	movs	r3, #3
 800b526:	e020      	b.n	800b56a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b528:	4b13      	ldr	r3, [pc, #76]	; (800b578 <HAL_RCC_OscConfig+0x47c>)
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b530:	2b00      	cmp	r3, #0
 800b532:	d0f0      	beq.n	800b516 <HAL_RCC_OscConfig+0x41a>
 800b534:	e018      	b.n	800b568 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b536:	4b11      	ldr	r3, [pc, #68]	; (800b57c <HAL_RCC_OscConfig+0x480>)
 800b538:	2200      	movs	r2, #0
 800b53a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b53c:	f7fc ff1a 	bl	8008374 <HAL_GetTick>
 800b540:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b542:	e008      	b.n	800b556 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b544:	f7fc ff16 	bl	8008374 <HAL_GetTick>
 800b548:	4602      	mov	r2, r0
 800b54a:	693b      	ldr	r3, [r7, #16]
 800b54c:	1ad3      	subs	r3, r2, r3
 800b54e:	2b02      	cmp	r3, #2
 800b550:	d901      	bls.n	800b556 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800b552:	2303      	movs	r3, #3
 800b554:	e009      	b.n	800b56a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b556:	4b08      	ldr	r3, [pc, #32]	; (800b578 <HAL_RCC_OscConfig+0x47c>)
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d1f0      	bne.n	800b544 <HAL_RCC_OscConfig+0x448>
 800b562:	e001      	b.n	800b568 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800b564:	2301      	movs	r3, #1
 800b566:	e000      	b.n	800b56a <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800b568:	2300      	movs	r3, #0
}
 800b56a:	4618      	mov	r0, r3
 800b56c:	3718      	adds	r7, #24
 800b56e:	46bd      	mov	sp, r7
 800b570:	bd80      	pop	{r7, pc}
 800b572:	bf00      	nop
 800b574:	40007000 	.word	0x40007000
 800b578:	40023800 	.word	0x40023800
 800b57c:	42470060 	.word	0x42470060

0800b580 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800b580:	b580      	push	{r7, lr}
 800b582:	b082      	sub	sp, #8
 800b584:	af00      	add	r7, sp, #0
 800b586:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d101      	bne.n	800b592 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800b58e:	2301      	movs	r3, #1
 800b590:	e022      	b.n	800b5d8 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b598:	b2db      	uxtb	r3, r3
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d105      	bne.n	800b5aa <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800b5a4:	6878      	ldr	r0, [r7, #4]
 800b5a6:	f7fa ff57 	bl	8006458 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	2203      	movs	r2, #3
 800b5ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800b5b2:	6878      	ldr	r0, [r7, #4]
 800b5b4:	f000 f814 	bl	800b5e0 <HAL_SD_InitCard>
 800b5b8:	4603      	mov	r3, r0
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d001      	beq.n	800b5c2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800b5be:	2301      	movs	r3, #1
 800b5c0:	e00a      	b.n	800b5d8 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	2200      	movs	r2, #0
 800b5c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	2201      	movs	r2, #1
 800b5d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b5d6:	2300      	movs	r3, #0
}
 800b5d8:	4618      	mov	r0, r3
 800b5da:	3708      	adds	r7, #8
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	bd80      	pop	{r7, pc}

0800b5e0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b5e0:	b5b0      	push	{r4, r5, r7, lr}
 800b5e2:	b08e      	sub	sp, #56	; 0x38
 800b5e4:	af04      	add	r7, sp, #16
 800b5e6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800b5fc:	2376      	movs	r3, #118	; 0x76
 800b5fe:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681d      	ldr	r5, [r3, #0]
 800b604:	466c      	mov	r4, sp
 800b606:	f107 0314 	add.w	r3, r7, #20
 800b60a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b60e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b612:	f107 0308 	add.w	r3, r7, #8
 800b616:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b618:	4628      	mov	r0, r5
 800b61a:	f003 fa87 	bl	800eb2c <SDIO_Init>
 800b61e:	4603      	mov	r3, r0
 800b620:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800b624:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d001      	beq.n	800b630 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800b62c:	2301      	movs	r3, #1
 800b62e:	e031      	b.n	800b694 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800b630:	4b1a      	ldr	r3, [pc, #104]	; (800b69c <HAL_SD_InitCard+0xbc>)
 800b632:	2200      	movs	r2, #0
 800b634:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	4618      	mov	r0, r3
 800b63c:	f003 fabf 	bl	800ebbe <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800b640:	4b16      	ldr	r3, [pc, #88]	; (800b69c <HAL_SD_InitCard+0xbc>)
 800b642:	2201      	movs	r2, #1
 800b644:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800b646:	6878      	ldr	r0, [r7, #4]
 800b648:	f000 ffc6 	bl	800c5d8 <SD_PowerON>
 800b64c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b64e:	6a3b      	ldr	r3, [r7, #32]
 800b650:	2b00      	cmp	r3, #0
 800b652:	d00b      	beq.n	800b66c <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	2201      	movs	r2, #1
 800b658:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b660:	6a3b      	ldr	r3, [r7, #32]
 800b662:	431a      	orrs	r2, r3
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b668:	2301      	movs	r3, #1
 800b66a:	e013      	b.n	800b694 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800b66c:	6878      	ldr	r0, [r7, #4]
 800b66e:	f000 fee5 	bl	800c43c <SD_InitCard>
 800b672:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b674:	6a3b      	ldr	r3, [r7, #32]
 800b676:	2b00      	cmp	r3, #0
 800b678:	d00b      	beq.n	800b692 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	2201      	movs	r2, #1
 800b67e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b686:	6a3b      	ldr	r3, [r7, #32]
 800b688:	431a      	orrs	r2, r3
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b68e:	2301      	movs	r3, #1
 800b690:	e000      	b.n	800b694 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800b692:	2300      	movs	r3, #0
}
 800b694:	4618      	mov	r0, r3
 800b696:	3728      	adds	r7, #40	; 0x28
 800b698:	46bd      	mov	sp, r7
 800b69a:	bdb0      	pop	{r4, r5, r7, pc}
 800b69c:	422580a0 	.word	0x422580a0

0800b6a0 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	b08c      	sub	sp, #48	; 0x30
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	60f8      	str	r0, [r7, #12]
 800b6a8:	60b9      	str	r1, [r7, #8]
 800b6aa:	607a      	str	r2, [r7, #4]
 800b6ac:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800b6b2:	68bb      	ldr	r3, [r7, #8]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d107      	bne.n	800b6c8 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6bc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b6c4:	2301      	movs	r3, #1
 800b6c6:	e0c7      	b.n	800b858 <HAL_SD_ReadBlocks_DMA+0x1b8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b6ce:	b2db      	uxtb	r3, r3
 800b6d0:	2b01      	cmp	r3, #1
 800b6d2:	f040 80c0 	bne.w	800b856 <HAL_SD_ReadBlocks_DMA+0x1b6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	2200      	movs	r2, #0
 800b6da:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b6dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b6de:	683b      	ldr	r3, [r7, #0]
 800b6e0:	441a      	add	r2, r3
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b6e6:	429a      	cmp	r2, r3
 800b6e8:	d907      	bls.n	800b6fa <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6ee:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800b6f6:	2301      	movs	r3, #1
 800b6f8:	e0ae      	b.n	800b858 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	2203      	movs	r2, #3
 800b6fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	2200      	movs	r2, #0
 800b708:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800b718:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b71e:	4a50      	ldr	r2, [pc, #320]	; (800b860 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800b720:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b726:	4a4f      	ldr	r2, [pc, #316]	; (800b864 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 800b728:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b72e:	2200      	movs	r2, #0
 800b730:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	3380      	adds	r3, #128	; 0x80
 800b73c:	4619      	mov	r1, r3
 800b73e:	68ba      	ldr	r2, [r7, #8]
 800b740:	683b      	ldr	r3, [r7, #0]
 800b742:	025b      	lsls	r3, r3, #9
 800b744:	089b      	lsrs	r3, r3, #2
 800b746:	f7fd fc07 	bl	8008f58 <HAL_DMA_Start_IT>
 800b74a:	4603      	mov	r3, r0
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d017      	beq.n	800b780 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800b75e:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	4a40      	ldr	r2, [pc, #256]	; (800b868 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800b766:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b76c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	2201      	movs	r2, #1
 800b778:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800b77c:	2301      	movs	r3, #1
 800b77e:	e06b      	b.n	800b858 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800b780:	4b3a      	ldr	r3, [pc, #232]	; (800b86c <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800b782:	2201      	movs	r2, #1
 800b784:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b78a:	2b01      	cmp	r3, #1
 800b78c:	d002      	beq.n	800b794 <HAL_SD_ReadBlocks_DMA+0xf4>
      {
        add *= 512U;
 800b78e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b790:	025b      	lsls	r3, r3, #9
 800b792:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b79c:	4618      	mov	r0, r3
 800b79e:	f003 faa1 	bl	800ece4 <SDMMC_CmdBlockLength>
 800b7a2:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 800b7a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d00f      	beq.n	800b7ca <HAL_SD_ReadBlocks_DMA+0x12a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	4a2e      	ldr	r2, [pc, #184]	; (800b868 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800b7b0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b7b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7b8:	431a      	orrs	r2, r3
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800b7be:	68fb      	ldr	r3, [r7, #12]
 800b7c0:	2201      	movs	r2, #1
 800b7c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800b7c6:	2301      	movs	r3, #1
 800b7c8:	e046      	b.n	800b858 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b7ca:	f04f 33ff 	mov.w	r3, #4294967295
 800b7ce:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800b7d0:	683b      	ldr	r3, [r7, #0]
 800b7d2:	025b      	lsls	r3, r3, #9
 800b7d4:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800b7d6:	2390      	movs	r3, #144	; 0x90
 800b7d8:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800b7da:	2302      	movs	r3, #2
 800b7dc:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800b7de:	2300      	movs	r3, #0
 800b7e0:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800b7e2:	2301      	movs	r3, #1
 800b7e4:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	f107 0210 	add.w	r2, r7, #16
 800b7ee:	4611      	mov	r1, r2
 800b7f0:	4618      	mov	r0, r3
 800b7f2:	f003 fa4b 	bl	800ec8c <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800b7f6:	683b      	ldr	r3, [r7, #0]
 800b7f8:	2b01      	cmp	r3, #1
 800b7fa:	d90a      	bls.n	800b812 <HAL_SD_ReadBlocks_DMA+0x172>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	2282      	movs	r2, #130	; 0x82
 800b800:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b808:	4618      	mov	r0, r3
 800b80a:	f003 faaf 	bl	800ed6c <SDMMC_CmdReadMultiBlock>
 800b80e:	62f8      	str	r0, [r7, #44]	; 0x2c
 800b810:	e009      	b.n	800b826 <HAL_SD_ReadBlocks_DMA+0x186>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	2281      	movs	r2, #129	; 0x81
 800b816:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b81e:	4618      	mov	r0, r3
 800b820:	f003 fa82 	bl	800ed28 <SDMMC_CmdReadSingleBlock>
 800b824:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800b826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d012      	beq.n	800b852 <HAL_SD_ReadBlocks_DMA+0x1b2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	4a0d      	ldr	r2, [pc, #52]	; (800b868 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800b832:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b83a:	431a      	orrs	r2, r3
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	2201      	movs	r2, #1
 800b844:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	2200      	movs	r2, #0
 800b84c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800b84e:	2301      	movs	r3, #1
 800b850:	e002      	b.n	800b858 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      return HAL_OK;
 800b852:	2300      	movs	r3, #0
 800b854:	e000      	b.n	800b858 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
  }
  else
  {
    return HAL_BUSY;
 800b856:	2302      	movs	r3, #2
  }
}
 800b858:	4618      	mov	r0, r3
 800b85a:	3730      	adds	r7, #48	; 0x30
 800b85c:	46bd      	mov	sp, r7
 800b85e:	bd80      	pop	{r7, pc}
 800b860:	0800c24b 	.word	0x0800c24b
 800b864:	0800c2bd 	.word	0x0800c2bd
 800b868:	004005ff 	.word	0x004005ff
 800b86c:	4225858c 	.word	0x4225858c

0800b870 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800b870:	b580      	push	{r7, lr}
 800b872:	b08c      	sub	sp, #48	; 0x30
 800b874:	af00      	add	r7, sp, #0
 800b876:	60f8      	str	r0, [r7, #12]
 800b878:	60b9      	str	r1, [r7, #8]
 800b87a:	607a      	str	r2, [r7, #4]
 800b87c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800b882:	68bb      	ldr	r3, [r7, #8]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d107      	bne.n	800b898 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b88c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b894:	2301      	movs	r3, #1
 800b896:	e0ca      	b.n	800ba2e <HAL_SD_WriteBlocks_DMA+0x1be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b89e:	b2db      	uxtb	r3, r3
 800b8a0:	2b01      	cmp	r3, #1
 800b8a2:	f040 80c3 	bne.w	800ba2c <HAL_SD_WriteBlocks_DMA+0x1bc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	2200      	movs	r2, #0
 800b8aa:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b8ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b8ae:	683b      	ldr	r3, [r7, #0]
 800b8b0:	441a      	add	r2, r3
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b8b6:	429a      	cmp	r2, r3
 800b8b8:	d907      	bls.n	800b8ca <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8be:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800b8c6:	2301      	movs	r3, #1
 800b8c8:	e0b1      	b.n	800ba2e <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	2203      	movs	r2, #3
 800b8ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	2200      	movs	r2, #0
 800b8d8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	f042 021a 	orr.w	r2, r2, #26
 800b8e8:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8ee:	4a52      	ldr	r2, [pc, #328]	; (800ba38 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800b8f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8f6:	4a51      	ldr	r2, [pc, #324]	; (800ba3c <HAL_SD_WriteBlocks_DMA+0x1cc>)
 800b8f8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8fe:	2200      	movs	r2, #0
 800b900:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b906:	2b01      	cmp	r3, #1
 800b908:	d002      	beq.n	800b910 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800b90a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b90c:	025b      	lsls	r3, r3, #9
 800b90e:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b918:	4618      	mov	r0, r3
 800b91a:	f003 f9e3 	bl	800ece4 <SDMMC_CmdBlockLength>
 800b91e:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b922:	2b00      	cmp	r3, #0
 800b924:	d00f      	beq.n	800b946 <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	4a45      	ldr	r2, [pc, #276]	; (800ba40 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800b92c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b934:	431a      	orrs	r2, r3
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	2201      	movs	r2, #1
 800b93e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800b942:	2301      	movs	r3, #1
 800b944:	e073      	b.n	800ba2e <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800b946:	683b      	ldr	r3, [r7, #0]
 800b948:	2b01      	cmp	r3, #1
 800b94a:	d90a      	bls.n	800b962 <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	22a0      	movs	r2, #160	; 0xa0
 800b950:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b958:	4618      	mov	r0, r3
 800b95a:	f003 fa4b 	bl	800edf4 <SDMMC_CmdWriteMultiBlock>
 800b95e:	62f8      	str	r0, [r7, #44]	; 0x2c
 800b960:	e009      	b.n	800b976 <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	2290      	movs	r2, #144	; 0x90
 800b966:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b96e:	4618      	mov	r0, r3
 800b970:	f003 fa1e 	bl	800edb0 <SDMMC_CmdWriteSingleBlock>
 800b974:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800b976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d012      	beq.n	800b9a2 <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	4a2f      	ldr	r2, [pc, #188]	; (800ba40 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800b982:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b98a:	431a      	orrs	r2, r3
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	2201      	movs	r2, #1
 800b994:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	2200      	movs	r2, #0
 800b99c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b99e:	2301      	movs	r3, #1
 800b9a0:	e045      	b.n	800ba2e <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800b9a2:	4b28      	ldr	r3, [pc, #160]	; (800ba44 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800b9a4:	2201      	movs	r2, #1
 800b9a6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800b9ac:	68b9      	ldr	r1, [r7, #8]
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	3380      	adds	r3, #128	; 0x80
 800b9b4:	461a      	mov	r2, r3
 800b9b6:	683b      	ldr	r3, [r7, #0]
 800b9b8:	025b      	lsls	r3, r3, #9
 800b9ba:	089b      	lsrs	r3, r3, #2
 800b9bc:	f7fd facc 	bl	8008f58 <HAL_DMA_Start_IT>
 800b9c0:	4603      	mov	r3, r0
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d01a      	beq.n	800b9fc <HAL_SD_WriteBlocks_DMA+0x18c>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	f022 021a 	bic.w	r2, r2, #26
 800b9d4:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	4a19      	ldr	r2, [pc, #100]	; (800ba40 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800b9dc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9e2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	2201      	movs	r2, #1
 800b9ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	2200      	movs	r2, #0
 800b9f6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b9f8:	2301      	movs	r3, #1
 800b9fa:	e018      	b.n	800ba2e <HAL_SD_WriteBlocks_DMA+0x1be>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b9fc:	f04f 33ff 	mov.w	r3, #4294967295
 800ba00:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800ba02:	683b      	ldr	r3, [r7, #0]
 800ba04:	025b      	lsls	r3, r3, #9
 800ba06:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800ba08:	2390      	movs	r3, #144	; 0x90
 800ba0a:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800ba10:	2300      	movs	r3, #0
 800ba12:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800ba14:	2301      	movs	r3, #1
 800ba16:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	f107 0210 	add.w	r2, r7, #16
 800ba20:	4611      	mov	r1, r2
 800ba22:	4618      	mov	r0, r3
 800ba24:	f003 f932 	bl	800ec8c <SDIO_ConfigData>

      return HAL_OK;
 800ba28:	2300      	movs	r3, #0
 800ba2a:	e000      	b.n	800ba2e <HAL_SD_WriteBlocks_DMA+0x1be>
    }
  }
  else
  {
    return HAL_BUSY;
 800ba2c:	2302      	movs	r3, #2
  }
}
 800ba2e:	4618      	mov	r0, r3
 800ba30:	3730      	adds	r7, #48	; 0x30
 800ba32:	46bd      	mov	sp, r7
 800ba34:	bd80      	pop	{r7, pc}
 800ba36:	bf00      	nop
 800ba38:	0800c221 	.word	0x0800c221
 800ba3c:	0800c2bd 	.word	0x0800c2bd
 800ba40:	004005ff 	.word	0x004005ff
 800ba44:	4225858c 	.word	0x4225858c

0800ba48 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800ba48:	b580      	push	{r7, lr}
 800ba4a:	b084      	sub	sp, #16
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba54:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d008      	beq.n	800ba76 <HAL_SD_IRQHandler+0x2e>
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	f003 0308 	and.w	r3, r3, #8
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d003      	beq.n	800ba76 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800ba6e:	6878      	ldr	r0, [r7, #4]
 800ba70:	f000 ffc8 	bl	800ca04 <SD_Read_IT>
 800ba74:	e155      	b.n	800bd22 <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	f000 808f 	beq.w	800bba4 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ba8e:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba96:	687a      	ldr	r2, [r7, #4]
 800ba98:	6812      	ldr	r2, [r2, #0]
 800ba9a:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800ba9e:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800baa2:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	f022 0201 	bic.w	r2, r2, #1
 800bab2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	f003 0308 	and.w	r3, r3, #8
 800baba:	2b00      	cmp	r3, #0
 800babc:	d039      	beq.n	800bb32 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	f003 0302 	and.w	r3, r3, #2
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d104      	bne.n	800bad2 <HAL_SD_IRQHandler+0x8a>
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	f003 0320 	and.w	r3, r3, #32
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d011      	beq.n	800baf6 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	4618      	mov	r0, r3
 800bad8:	f003 f9ae 	bl	800ee38 <SDMMC_CmdStopTransfer>
 800badc:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800bade:	68bb      	ldr	r3, [r7, #8]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d008      	beq.n	800baf6 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bae8:	68bb      	ldr	r3, [r7, #8]
 800baea:	431a      	orrs	r2, r3
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800baf0:	6878      	ldr	r0, [r7, #4]
 800baf2:	f000 f91f 	bl	800bd34 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	f240 523a 	movw	r2, #1338	; 0x53a
 800bafe:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	2201      	movs	r2, #1
 800bb04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	2200      	movs	r2, #0
 800bb0c:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	f003 0301 	and.w	r3, r3, #1
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d104      	bne.n	800bb22 <HAL_SD_IRQHandler+0xda>
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	f003 0302 	and.w	r3, r3, #2
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d003      	beq.n	800bb2a <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800bb22:	6878      	ldr	r0, [r7, #4]
 800bb24:	f003 fe04 	bl	800f730 <HAL_SD_RxCpltCallback>
 800bb28:	e0fb      	b.n	800bd22 <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800bb2a:	6878      	ldr	r0, [r7, #4]
 800bb2c:	f003 fdf6 	bl	800f71c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800bb30:	e0f7      	b.n	800bd22 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	f000 80f2 	beq.w	800bd22 <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	f003 0320 	and.w	r3, r3, #32
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d011      	beq.n	800bb6c <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	f003 f973 	bl	800ee38 <SDMMC_CmdStopTransfer>
 800bb52:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800bb54:	68bb      	ldr	r3, [r7, #8]
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d008      	beq.n	800bb6c <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bb5e:	68bb      	ldr	r3, [r7, #8]
 800bb60:	431a      	orrs	r2, r3
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800bb66:	6878      	ldr	r0, [r7, #4]
 800bb68:	f000 f8e4 	bl	800bd34 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	f003 0301 	and.w	r3, r3, #1
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	f040 80d5 	bne.w	800bd22 <HAL_SD_IRQHandler+0x2da>
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	f003 0302 	and.w	r3, r3, #2
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	f040 80cf 	bne.w	800bd22 <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	f022 0208 	bic.w	r2, r2, #8
 800bb92:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	2201      	movs	r2, #1
 800bb98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800bb9c:	6878      	ldr	r0, [r7, #4]
 800bb9e:	f003 fdbd 	bl	800f71c <HAL_SD_TxCpltCallback>
}
 800bba2:	e0be      	b.n	800bd22 <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d008      	beq.n	800bbc4 <HAL_SD_IRQHandler+0x17c>
 800bbb2:	68fb      	ldr	r3, [r7, #12]
 800bbb4:	f003 0308 	and.w	r3, r3, #8
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d003      	beq.n	800bbc4 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800bbbc:	6878      	ldr	r0, [r7, #4]
 800bbbe:	f000 ff72 	bl	800caa6 <SD_Write_IT>
 800bbc2:	e0ae      	b.n	800bd22 <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbca:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	f000 80a7 	beq.w	800bd22 <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbda:	f003 0302 	and.w	r3, r3, #2
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d005      	beq.n	800bbee <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbe6:	f043 0202 	orr.w	r2, r3, #2
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbf4:	f003 0308 	and.w	r3, r3, #8
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d005      	beq.n	800bc08 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc00:	f043 0208 	orr.w	r2, r3, #8
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc0e:	f003 0320 	and.w	r3, r3, #32
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d005      	beq.n	800bc22 <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc1a:	f043 0220 	orr.w	r2, r3, #32
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc28:	f003 0310 	and.w	r3, r3, #16
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d005      	beq.n	800bc3c <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc34:	f043 0210 	orr.w	r2, r3, #16
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	f240 523a 	movw	r2, #1338	; 0x53a
 800bc44:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800bc54:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	f003 f8ec 	bl	800ee38 <SDMMC_CmdStopTransfer>
 800bc60:	4602      	mov	r2, r0
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc66:	431a      	orrs	r2, r3
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	f003 0308 	and.w	r3, r3, #8
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d00a      	beq.n	800bc8c <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	2201      	movs	r2, #1
 800bc7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	2200      	movs	r2, #0
 800bc82:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800bc84:	6878      	ldr	r0, [r7, #4]
 800bc86:	f000 f855 	bl	800bd34 <HAL_SD_ErrorCallback>
}
 800bc8a:	e04a      	b.n	800bd22 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d045      	beq.n	800bd22 <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	f003 0310 	and.w	r3, r3, #16
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d104      	bne.n	800bcaa <HAL_SD_IRQHandler+0x262>
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	f003 0320 	and.w	r3, r3, #32
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d011      	beq.n	800bcce <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bcae:	4a1f      	ldr	r2, [pc, #124]	; (800bd2c <HAL_SD_IRQHandler+0x2e4>)
 800bcb0:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	f7fd f9a6 	bl	8009008 <HAL_DMA_Abort_IT>
 800bcbc:	4603      	mov	r3, r0
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d02f      	beq.n	800bd22 <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	f000 fb4a 	bl	800c360 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800bccc:	e029      	b.n	800bd22 <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	f003 0301 	and.w	r3, r3, #1
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d104      	bne.n	800bce2 <HAL_SD_IRQHandler+0x29a>
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	f003 0302 	and.w	r3, r3, #2
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d011      	beq.n	800bd06 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bce6:	4a12      	ldr	r2, [pc, #72]	; (800bd30 <HAL_SD_IRQHandler+0x2e8>)
 800bce8:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcee:	4618      	mov	r0, r3
 800bcf0:	f7fd f98a 	bl	8009008 <HAL_DMA_Abort_IT>
 800bcf4:	4603      	mov	r3, r0
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d013      	beq.n	800bd22 <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcfe:	4618      	mov	r0, r3
 800bd00:	f000 fb65 	bl	800c3ce <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800bd04:	e00d      	b.n	800bd22 <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	2200      	movs	r2, #0
 800bd0a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	2201      	movs	r2, #1
 800bd10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	2200      	movs	r2, #0
 800bd18:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800bd1a:	6878      	ldr	r0, [r7, #4]
 800bd1c:	f003 fcf4 	bl	800f708 <HAL_SD_AbortCallback>
}
 800bd20:	e7ff      	b.n	800bd22 <HAL_SD_IRQHandler+0x2da>
 800bd22:	bf00      	nop
 800bd24:	3710      	adds	r7, #16
 800bd26:	46bd      	mov	sp, r7
 800bd28:	bd80      	pop	{r7, pc}
 800bd2a:	bf00      	nop
 800bd2c:	0800c361 	.word	0x0800c361
 800bd30:	0800c3cf 	.word	0x0800c3cf

0800bd34 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800bd34:	b480      	push	{r7}
 800bd36:	b083      	sub	sp, #12
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800bd3c:	bf00      	nop
 800bd3e:	370c      	adds	r7, #12
 800bd40:	46bd      	mov	sp, r7
 800bd42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd46:	4770      	bx	lr

0800bd48 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800bd48:	b480      	push	{r7}
 800bd4a:	b083      	sub	sp, #12
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	6078      	str	r0, [r7, #4]
 800bd50:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bd56:	0f9b      	lsrs	r3, r3, #30
 800bd58:	b2da      	uxtb	r2, r3
 800bd5a:	683b      	ldr	r3, [r7, #0]
 800bd5c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bd62:	0e9b      	lsrs	r3, r3, #26
 800bd64:	b2db      	uxtb	r3, r3
 800bd66:	f003 030f 	and.w	r3, r3, #15
 800bd6a:	b2da      	uxtb	r2, r3
 800bd6c:	683b      	ldr	r3, [r7, #0]
 800bd6e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bd74:	0e1b      	lsrs	r3, r3, #24
 800bd76:	b2db      	uxtb	r3, r3
 800bd78:	f003 0303 	and.w	r3, r3, #3
 800bd7c:	b2da      	uxtb	r2, r3
 800bd7e:	683b      	ldr	r3, [r7, #0]
 800bd80:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bd86:	0c1b      	lsrs	r3, r3, #16
 800bd88:	b2da      	uxtb	r2, r3
 800bd8a:	683b      	ldr	r3, [r7, #0]
 800bd8c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bd92:	0a1b      	lsrs	r3, r3, #8
 800bd94:	b2da      	uxtb	r2, r3
 800bd96:	683b      	ldr	r3, [r7, #0]
 800bd98:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bd9e:	b2da      	uxtb	r2, r3
 800bda0:	683b      	ldr	r3, [r7, #0]
 800bda2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bda8:	0d1b      	lsrs	r3, r3, #20
 800bdaa:	b29a      	uxth	r2, r3
 800bdac:	683b      	ldr	r3, [r7, #0]
 800bdae:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bdb4:	0c1b      	lsrs	r3, r3, #16
 800bdb6:	b2db      	uxtb	r3, r3
 800bdb8:	f003 030f 	and.w	r3, r3, #15
 800bdbc:	b2da      	uxtb	r2, r3
 800bdbe:	683b      	ldr	r3, [r7, #0]
 800bdc0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bdc6:	0bdb      	lsrs	r3, r3, #15
 800bdc8:	b2db      	uxtb	r3, r3
 800bdca:	f003 0301 	and.w	r3, r3, #1
 800bdce:	b2da      	uxtb	r2, r3
 800bdd0:	683b      	ldr	r3, [r7, #0]
 800bdd2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bdd8:	0b9b      	lsrs	r3, r3, #14
 800bdda:	b2db      	uxtb	r3, r3
 800bddc:	f003 0301 	and.w	r3, r3, #1
 800bde0:	b2da      	uxtb	r2, r3
 800bde2:	683b      	ldr	r3, [r7, #0]
 800bde4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bdea:	0b5b      	lsrs	r3, r3, #13
 800bdec:	b2db      	uxtb	r3, r3
 800bdee:	f003 0301 	and.w	r3, r3, #1
 800bdf2:	b2da      	uxtb	r2, r3
 800bdf4:	683b      	ldr	r3, [r7, #0]
 800bdf6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bdfc:	0b1b      	lsrs	r3, r3, #12
 800bdfe:	b2db      	uxtb	r3, r3
 800be00:	f003 0301 	and.w	r3, r3, #1
 800be04:	b2da      	uxtb	r2, r3
 800be06:	683b      	ldr	r3, [r7, #0]
 800be08:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800be0a:	683b      	ldr	r3, [r7, #0]
 800be0c:	2200      	movs	r2, #0
 800be0e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be14:	2b00      	cmp	r3, #0
 800be16:	d163      	bne.n	800bee0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800be1c:	009a      	lsls	r2, r3, #2
 800be1e:	f640 73fc 	movw	r3, #4092	; 0xffc
 800be22:	4013      	ands	r3, r2
 800be24:	687a      	ldr	r2, [r7, #4]
 800be26:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800be28:	0f92      	lsrs	r2, r2, #30
 800be2a:	431a      	orrs	r2, r3
 800be2c:	683b      	ldr	r3, [r7, #0]
 800be2e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be34:	0edb      	lsrs	r3, r3, #27
 800be36:	b2db      	uxtb	r3, r3
 800be38:	f003 0307 	and.w	r3, r3, #7
 800be3c:	b2da      	uxtb	r2, r3
 800be3e:	683b      	ldr	r3, [r7, #0]
 800be40:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be46:	0e1b      	lsrs	r3, r3, #24
 800be48:	b2db      	uxtb	r3, r3
 800be4a:	f003 0307 	and.w	r3, r3, #7
 800be4e:	b2da      	uxtb	r2, r3
 800be50:	683b      	ldr	r3, [r7, #0]
 800be52:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be58:	0d5b      	lsrs	r3, r3, #21
 800be5a:	b2db      	uxtb	r3, r3
 800be5c:	f003 0307 	and.w	r3, r3, #7
 800be60:	b2da      	uxtb	r2, r3
 800be62:	683b      	ldr	r3, [r7, #0]
 800be64:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be6a:	0c9b      	lsrs	r3, r3, #18
 800be6c:	b2db      	uxtb	r3, r3
 800be6e:	f003 0307 	and.w	r3, r3, #7
 800be72:	b2da      	uxtb	r2, r3
 800be74:	683b      	ldr	r3, [r7, #0]
 800be76:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800be7c:	0bdb      	lsrs	r3, r3, #15
 800be7e:	b2db      	uxtb	r3, r3
 800be80:	f003 0307 	and.w	r3, r3, #7
 800be84:	b2da      	uxtb	r2, r3
 800be86:	683b      	ldr	r3, [r7, #0]
 800be88:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800be8a:	683b      	ldr	r3, [r7, #0]
 800be8c:	691b      	ldr	r3, [r3, #16]
 800be8e:	1c5a      	adds	r2, r3, #1
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800be94:	683b      	ldr	r3, [r7, #0]
 800be96:	7e1b      	ldrb	r3, [r3, #24]
 800be98:	b2db      	uxtb	r3, r3
 800be9a:	f003 0307 	and.w	r3, r3, #7
 800be9e:	3302      	adds	r3, #2
 800bea0:	2201      	movs	r2, #1
 800bea2:	fa02 f303 	lsl.w	r3, r2, r3
 800bea6:	687a      	ldr	r2, [r7, #4]
 800bea8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800beaa:	fb02 f203 	mul.w	r2, r2, r3
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800beb2:	683b      	ldr	r3, [r7, #0]
 800beb4:	7a1b      	ldrb	r3, [r3, #8]
 800beb6:	b2db      	uxtb	r3, r3
 800beb8:	f003 030f 	and.w	r3, r3, #15
 800bebc:	2201      	movs	r2, #1
 800bebe:	409a      	lsls	r2, r3
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bec8:	687a      	ldr	r2, [r7, #4]
 800beca:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800becc:	0a52      	lsrs	r2, r2, #9
 800bece:	fb02 f203 	mul.w	r2, r2, r3
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bedc:	661a      	str	r2, [r3, #96]	; 0x60
 800bede:	e031      	b.n	800bf44 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bee4:	2b01      	cmp	r3, #1
 800bee6:	d11d      	bne.n	800bf24 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800beec:	041b      	lsls	r3, r3, #16
 800beee:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bef6:	0c1b      	lsrs	r3, r3, #16
 800bef8:	431a      	orrs	r2, r3
 800befa:	683b      	ldr	r3, [r7, #0]
 800befc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800befe:	683b      	ldr	r3, [r7, #0]
 800bf00:	691b      	ldr	r3, [r3, #16]
 800bf02:	3301      	adds	r3, #1
 800bf04:	029a      	lsls	r2, r3, #10
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bf18:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	661a      	str	r2, [r3, #96]	; 0x60
 800bf22:	e00f      	b.n	800bf44 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	4a58      	ldr	r2, [pc, #352]	; (800c08c <HAL_SD_GetCardCSD+0x344>)
 800bf2a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf30:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	2201      	movs	r2, #1
 800bf3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800bf40:	2301      	movs	r3, #1
 800bf42:	e09d      	b.n	800c080 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bf48:	0b9b      	lsrs	r3, r3, #14
 800bf4a:	b2db      	uxtb	r3, r3
 800bf4c:	f003 0301 	and.w	r3, r3, #1
 800bf50:	b2da      	uxtb	r2, r3
 800bf52:	683b      	ldr	r3, [r7, #0]
 800bf54:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bf5a:	09db      	lsrs	r3, r3, #7
 800bf5c:	b2db      	uxtb	r3, r3
 800bf5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf62:	b2da      	uxtb	r2, r3
 800bf64:	683b      	ldr	r3, [r7, #0]
 800bf66:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bf6c:	b2db      	uxtb	r3, r3
 800bf6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf72:	b2da      	uxtb	r2, r3
 800bf74:	683b      	ldr	r3, [r7, #0]
 800bf76:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf7c:	0fdb      	lsrs	r3, r3, #31
 800bf7e:	b2da      	uxtb	r2, r3
 800bf80:	683b      	ldr	r3, [r7, #0]
 800bf82:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf88:	0f5b      	lsrs	r3, r3, #29
 800bf8a:	b2db      	uxtb	r3, r3
 800bf8c:	f003 0303 	and.w	r3, r3, #3
 800bf90:	b2da      	uxtb	r2, r3
 800bf92:	683b      	ldr	r3, [r7, #0]
 800bf94:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf9a:	0e9b      	lsrs	r3, r3, #26
 800bf9c:	b2db      	uxtb	r3, r3
 800bf9e:	f003 0307 	and.w	r3, r3, #7
 800bfa2:	b2da      	uxtb	r2, r3
 800bfa4:	683b      	ldr	r3, [r7, #0]
 800bfa6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bfac:	0d9b      	lsrs	r3, r3, #22
 800bfae:	b2db      	uxtb	r3, r3
 800bfb0:	f003 030f 	and.w	r3, r3, #15
 800bfb4:	b2da      	uxtb	r2, r3
 800bfb6:	683b      	ldr	r3, [r7, #0]
 800bfb8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bfbe:	0d5b      	lsrs	r3, r3, #21
 800bfc0:	b2db      	uxtb	r3, r3
 800bfc2:	f003 0301 	and.w	r3, r3, #1
 800bfc6:	b2da      	uxtb	r2, r3
 800bfc8:	683b      	ldr	r3, [r7, #0]
 800bfca:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800bfce:	683b      	ldr	r3, [r7, #0]
 800bfd0:	2200      	movs	r2, #0
 800bfd2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bfda:	0c1b      	lsrs	r3, r3, #16
 800bfdc:	b2db      	uxtb	r3, r3
 800bfde:	f003 0301 	and.w	r3, r3, #1
 800bfe2:	b2da      	uxtb	r2, r3
 800bfe4:	683b      	ldr	r3, [r7, #0]
 800bfe6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bfee:	0bdb      	lsrs	r3, r3, #15
 800bff0:	b2db      	uxtb	r3, r3
 800bff2:	f003 0301 	and.w	r3, r3, #1
 800bff6:	b2da      	uxtb	r2, r3
 800bff8:	683b      	ldr	r3, [r7, #0]
 800bffa:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c002:	0b9b      	lsrs	r3, r3, #14
 800c004:	b2db      	uxtb	r3, r3
 800c006:	f003 0301 	and.w	r3, r3, #1
 800c00a:	b2da      	uxtb	r2, r3
 800c00c:	683b      	ldr	r3, [r7, #0]
 800c00e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c016:	0b5b      	lsrs	r3, r3, #13
 800c018:	b2db      	uxtb	r3, r3
 800c01a:	f003 0301 	and.w	r3, r3, #1
 800c01e:	b2da      	uxtb	r2, r3
 800c020:	683b      	ldr	r3, [r7, #0]
 800c022:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c02a:	0b1b      	lsrs	r3, r3, #12
 800c02c:	b2db      	uxtb	r3, r3
 800c02e:	f003 0301 	and.w	r3, r3, #1
 800c032:	b2da      	uxtb	r2, r3
 800c034:	683b      	ldr	r3, [r7, #0]
 800c036:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c03e:	0a9b      	lsrs	r3, r3, #10
 800c040:	b2db      	uxtb	r3, r3
 800c042:	f003 0303 	and.w	r3, r3, #3
 800c046:	b2da      	uxtb	r2, r3
 800c048:	683b      	ldr	r3, [r7, #0]
 800c04a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c052:	0a1b      	lsrs	r3, r3, #8
 800c054:	b2db      	uxtb	r3, r3
 800c056:	f003 0303 	and.w	r3, r3, #3
 800c05a:	b2da      	uxtb	r2, r3
 800c05c:	683b      	ldr	r3, [r7, #0]
 800c05e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c066:	085b      	lsrs	r3, r3, #1
 800c068:	b2db      	uxtb	r3, r3
 800c06a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c06e:	b2da      	uxtb	r2, r3
 800c070:	683b      	ldr	r3, [r7, #0]
 800c072:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800c076:	683b      	ldr	r3, [r7, #0]
 800c078:	2201      	movs	r2, #1
 800c07a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800c07e:	2300      	movs	r3, #0
}
 800c080:	4618      	mov	r0, r3
 800c082:	370c      	adds	r7, #12
 800c084:	46bd      	mov	sp, r7
 800c086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c08a:	4770      	bx	lr
 800c08c:	004005ff 	.word	0x004005ff

0800c090 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800c090:	b480      	push	{r7}
 800c092:	b083      	sub	sp, #12
 800c094:	af00      	add	r7, sp, #0
 800c096:	6078      	str	r0, [r7, #4]
 800c098:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c09e:	683b      	ldr	r3, [r7, #0]
 800c0a0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c0a6:	683b      	ldr	r3, [r7, #0]
 800c0a8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c0ae:	683b      	ldr	r3, [r7, #0]
 800c0b0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c0b6:	683b      	ldr	r3, [r7, #0]
 800c0b8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c0be:	683b      	ldr	r3, [r7, #0]
 800c0c0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c0c6:	683b      	ldr	r3, [r7, #0]
 800c0c8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c0ce:	683b      	ldr	r3, [r7, #0]
 800c0d0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800c0d6:	683b      	ldr	r3, [r7, #0]
 800c0d8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800c0da:	2300      	movs	r3, #0
}
 800c0dc:	4618      	mov	r0, r3
 800c0de:	370c      	adds	r7, #12
 800c0e0:	46bd      	mov	sp, r7
 800c0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e6:	4770      	bx	lr

0800c0e8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800c0e8:	b5b0      	push	{r4, r5, r7, lr}
 800c0ea:	b08e      	sub	sp, #56	; 0x38
 800c0ec:	af04      	add	r7, sp, #16
 800c0ee:	6078      	str	r0, [r7, #4]
 800c0f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	2203      	movs	r2, #3
 800c0f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c0fe:	2b03      	cmp	r3, #3
 800c100:	d02e      	beq.n	800c160 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800c102:	683b      	ldr	r3, [r7, #0]
 800c104:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c108:	d106      	bne.n	800c118 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c10e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	639a      	str	r2, [r3, #56]	; 0x38
 800c116:	e029      	b.n	800c16c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800c118:	683b      	ldr	r3, [r7, #0]
 800c11a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c11e:	d10a      	bne.n	800c136 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800c120:	6878      	ldr	r0, [r7, #4]
 800c122:	f000 fb0f 	bl	800c744 <SD_WideBus_Enable>
 800c126:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c12c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c12e:	431a      	orrs	r2, r3
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	639a      	str	r2, [r3, #56]	; 0x38
 800c134:	e01a      	b.n	800c16c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800c136:	683b      	ldr	r3, [r7, #0]
 800c138:	2b00      	cmp	r3, #0
 800c13a:	d10a      	bne.n	800c152 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800c13c:	6878      	ldr	r0, [r7, #4]
 800c13e:	f000 fb4c 	bl	800c7da <SD_WideBus_Disable>
 800c142:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c14a:	431a      	orrs	r2, r3
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	639a      	str	r2, [r3, #56]	; 0x38
 800c150:	e00c      	b.n	800c16c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c156:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	639a      	str	r2, [r3, #56]	; 0x38
 800c15e:	e005      	b.n	800c16c <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c164:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c170:	2b00      	cmp	r3, #0
 800c172:	d009      	beq.n	800c188 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	4a18      	ldr	r2, [pc, #96]	; (800c1dc <HAL_SD_ConfigWideBusOperation+0xf4>)
 800c17a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	2201      	movs	r2, #1
 800c180:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800c184:	2301      	movs	r3, #1
 800c186:	e024      	b.n	800c1d2 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	685b      	ldr	r3, [r3, #4]
 800c18c:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	689b      	ldr	r3, [r3, #8]
 800c192:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	68db      	ldr	r3, [r3, #12]
 800c198:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800c19a:	683b      	ldr	r3, [r7, #0]
 800c19c:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	695b      	ldr	r3, [r3, #20]
 800c1a2:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	699b      	ldr	r3, [r3, #24]
 800c1a8:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	681d      	ldr	r5, [r3, #0]
 800c1ae:	466c      	mov	r4, sp
 800c1b0:	f107 0318 	add.w	r3, r7, #24
 800c1b4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c1b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c1bc:	f107 030c 	add.w	r3, r7, #12
 800c1c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c1c2:	4628      	mov	r0, r5
 800c1c4:	f002 fcb2 	bl	800eb2c <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	2201      	movs	r2, #1
 800c1cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800c1d0:	2300      	movs	r3, #0
}
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	3728      	adds	r7, #40	; 0x28
 800c1d6:	46bd      	mov	sp, r7
 800c1d8:	bdb0      	pop	{r4, r5, r7, pc}
 800c1da:	bf00      	nop
 800c1dc:	004005ff 	.word	0x004005ff

0800c1e0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800c1e0:	b580      	push	{r7, lr}
 800c1e2:	b086      	sub	sp, #24
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800c1e8:	2300      	movs	r3, #0
 800c1ea:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800c1ec:	f107 030c 	add.w	r3, r7, #12
 800c1f0:	4619      	mov	r1, r3
 800c1f2:	6878      	ldr	r0, [r7, #4]
 800c1f4:	f000 fa7e 	bl	800c6f4 <SD_SendStatus>
 800c1f8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c1fa:	697b      	ldr	r3, [r7, #20]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d005      	beq.n	800c20c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c204:	697b      	ldr	r3, [r7, #20]
 800c206:	431a      	orrs	r2, r3
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	0a5b      	lsrs	r3, r3, #9
 800c210:	f003 030f 	and.w	r3, r3, #15
 800c214:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800c216:	693b      	ldr	r3, [r7, #16]
}
 800c218:	4618      	mov	r0, r3
 800c21a:	3718      	adds	r7, #24
 800c21c:	46bd      	mov	sp, r7
 800c21e:	bd80      	pop	{r7, pc}

0800c220 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c220:	b480      	push	{r7}
 800c222:	b085      	sub	sp, #20
 800c224:	af00      	add	r7, sp, #0
 800c226:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c22c:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c23c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800c23e:	bf00      	nop
 800c240:	3714      	adds	r7, #20
 800c242:	46bd      	mov	sp, r7
 800c244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c248:	4770      	bx	lr

0800c24a <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c24a:	b580      	push	{r7, lr}
 800c24c:	b084      	sub	sp, #16
 800c24e:	af00      	add	r7, sp, #0
 800c250:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c256:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c25c:	2b82      	cmp	r3, #130	; 0x82
 800c25e:	d111      	bne.n	800c284 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	4618      	mov	r0, r3
 800c266:	f002 fde7 	bl	800ee38 <SDMMC_CmdStopTransfer>
 800c26a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c26c:	68bb      	ldr	r3, [r7, #8]
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d008      	beq.n	800c284 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c276:	68bb      	ldr	r3, [r7, #8]
 800c278:	431a      	orrs	r2, r3
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800c27e:	68f8      	ldr	r0, [r7, #12]
 800c280:	f7ff fd58 	bl	800bd34 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	f022 0208 	bic.w	r2, r2, #8
 800c292:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	f240 523a 	movw	r2, #1338	; 0x53a
 800c29c:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	2201      	movs	r2, #1
 800c2a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	2200      	movs	r2, #0
 800c2aa:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800c2ac:	68f8      	ldr	r0, [r7, #12]
 800c2ae:	f003 fa3f 	bl	800f730 <HAL_SD_RxCpltCallback>
#endif
}
 800c2b2:	bf00      	nop
 800c2b4:	3710      	adds	r7, #16
 800c2b6:	46bd      	mov	sp, r7
 800c2b8:	bd80      	pop	{r7, pc}
	...

0800c2bc <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800c2bc:	b580      	push	{r7, lr}
 800c2be:	b086      	sub	sp, #24
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2c8:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800c2ca:	6878      	ldr	r0, [r7, #4]
 800c2cc:	f7fd f848 	bl	8009360 <HAL_DMA_GetError>
 800c2d0:	4603      	mov	r3, r0
 800c2d2:	2b02      	cmp	r3, #2
 800c2d4:	d03e      	beq.n	800c354 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800c2d6:	697b      	ldr	r3, [r7, #20]
 800c2d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2dc:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800c2de:	697b      	ldr	r3, [r7, #20]
 800c2e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c2e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c2e4:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800c2e6:	693b      	ldr	r3, [r7, #16]
 800c2e8:	2b01      	cmp	r3, #1
 800c2ea:	d002      	beq.n	800c2f2 <SD_DMAError+0x36>
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	2b01      	cmp	r3, #1
 800c2f0:	d12d      	bne.n	800c34e <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800c2f2:	697b      	ldr	r3, [r7, #20]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	4a19      	ldr	r2, [pc, #100]	; (800c35c <SD_DMAError+0xa0>)
 800c2f8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800c2fa:	697b      	ldr	r3, [r7, #20]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c300:	697b      	ldr	r3, [r7, #20]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800c308:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800c30a:	697b      	ldr	r3, [r7, #20]
 800c30c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c30e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c312:	697b      	ldr	r3, [r7, #20]
 800c314:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800c316:	6978      	ldr	r0, [r7, #20]
 800c318:	f7ff ff62 	bl	800c1e0 <HAL_SD_GetCardState>
 800c31c:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800c31e:	68bb      	ldr	r3, [r7, #8]
 800c320:	2b06      	cmp	r3, #6
 800c322:	d002      	beq.n	800c32a <SD_DMAError+0x6e>
 800c324:	68bb      	ldr	r3, [r7, #8]
 800c326:	2b05      	cmp	r3, #5
 800c328:	d10a      	bne.n	800c340 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800c32a:	697b      	ldr	r3, [r7, #20]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	4618      	mov	r0, r3
 800c330:	f002 fd82 	bl	800ee38 <SDMMC_CmdStopTransfer>
 800c334:	4602      	mov	r2, r0
 800c336:	697b      	ldr	r3, [r7, #20]
 800c338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c33a:	431a      	orrs	r2, r3
 800c33c:	697b      	ldr	r3, [r7, #20]
 800c33e:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800c340:	697b      	ldr	r3, [r7, #20]
 800c342:	2201      	movs	r2, #1
 800c344:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c348:	697b      	ldr	r3, [r7, #20]
 800c34a:	2200      	movs	r2, #0
 800c34c:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800c34e:	6978      	ldr	r0, [r7, #20]
 800c350:	f7ff fcf0 	bl	800bd34 <HAL_SD_ErrorCallback>
#endif
  }
}
 800c354:	bf00      	nop
 800c356:	3718      	adds	r7, #24
 800c358:	46bd      	mov	sp, r7
 800c35a:	bd80      	pop	{r7, pc}
 800c35c:	004005ff 	.word	0x004005ff

0800c360 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800c360:	b580      	push	{r7, lr}
 800c362:	b084      	sub	sp, #16
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c36c:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	f240 523a 	movw	r2, #1338	; 0x53a
 800c376:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800c378:	68f8      	ldr	r0, [r7, #12]
 800c37a:	f7ff ff31 	bl	800c1e0 <HAL_SD_GetCardState>
 800c37e:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	2201      	movs	r2, #1
 800c384:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	2200      	movs	r2, #0
 800c38c:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800c38e:	68bb      	ldr	r3, [r7, #8]
 800c390:	2b06      	cmp	r3, #6
 800c392:	d002      	beq.n	800c39a <SD_DMATxAbort+0x3a>
 800c394:	68bb      	ldr	r3, [r7, #8]
 800c396:	2b05      	cmp	r3, #5
 800c398:	d10a      	bne.n	800c3b0 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	4618      	mov	r0, r3
 800c3a0:	f002 fd4a 	bl	800ee38 <SDMMC_CmdStopTransfer>
 800c3a4:	4602      	mov	r2, r0
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3aa:	431a      	orrs	r2, r3
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d103      	bne.n	800c3c0 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800c3b8:	68f8      	ldr	r0, [r7, #12]
 800c3ba:	f003 f9a5 	bl	800f708 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800c3be:	e002      	b.n	800c3c6 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800c3c0:	68f8      	ldr	r0, [r7, #12]
 800c3c2:	f7ff fcb7 	bl	800bd34 <HAL_SD_ErrorCallback>
}
 800c3c6:	bf00      	nop
 800c3c8:	3710      	adds	r7, #16
 800c3ca:	46bd      	mov	sp, r7
 800c3cc:	bd80      	pop	{r7, pc}

0800c3ce <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800c3ce:	b580      	push	{r7, lr}
 800c3d0:	b084      	sub	sp, #16
 800c3d2:	af00      	add	r7, sp, #0
 800c3d4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3da:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	f240 523a 	movw	r2, #1338	; 0x53a
 800c3e4:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800c3e6:	68f8      	ldr	r0, [r7, #12]
 800c3e8:	f7ff fefa 	bl	800c1e0 <HAL_SD_GetCardState>
 800c3ec:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	2201      	movs	r2, #1
 800c3f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	2200      	movs	r2, #0
 800c3fa:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800c3fc:	68bb      	ldr	r3, [r7, #8]
 800c3fe:	2b06      	cmp	r3, #6
 800c400:	d002      	beq.n	800c408 <SD_DMARxAbort+0x3a>
 800c402:	68bb      	ldr	r3, [r7, #8]
 800c404:	2b05      	cmp	r3, #5
 800c406:	d10a      	bne.n	800c41e <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	4618      	mov	r0, r3
 800c40e:	f002 fd13 	bl	800ee38 <SDMMC_CmdStopTransfer>
 800c412:	4602      	mov	r2, r0
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c418:	431a      	orrs	r2, r3
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c422:	2b00      	cmp	r3, #0
 800c424:	d103      	bne.n	800c42e <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800c426:	68f8      	ldr	r0, [r7, #12]
 800c428:	f003 f96e 	bl	800f708 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800c42c:	e002      	b.n	800c434 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800c42e:	68f8      	ldr	r0, [r7, #12]
 800c430:	f7ff fc80 	bl	800bd34 <HAL_SD_ErrorCallback>
}
 800c434:	bf00      	nop
 800c436:	3710      	adds	r7, #16
 800c438:	46bd      	mov	sp, r7
 800c43a:	bd80      	pop	{r7, pc}

0800c43c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c43c:	b5b0      	push	{r4, r5, r7, lr}
 800c43e:	b094      	sub	sp, #80	; 0x50
 800c440:	af04      	add	r7, sp, #16
 800c442:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800c444:	2301      	movs	r3, #1
 800c446:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	4618      	mov	r0, r3
 800c44e:	f002 fbc5 	bl	800ebdc <SDIO_GetPowerState>
 800c452:	4603      	mov	r3, r0
 800c454:	2b00      	cmp	r3, #0
 800c456:	d102      	bne.n	800c45e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800c458:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800c45c:	e0b7      	b.n	800c5ce <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c462:	2b03      	cmp	r3, #3
 800c464:	d02f      	beq.n	800c4c6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	4618      	mov	r0, r3
 800c46c:	f002 fdee 	bl	800f04c <SDMMC_CmdSendCID>
 800c470:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800c472:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c474:	2b00      	cmp	r3, #0
 800c476:	d001      	beq.n	800c47c <SD_InitCard+0x40>
    {
      return errorstate;
 800c478:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c47a:	e0a8      	b.n	800c5ce <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	2100      	movs	r1, #0
 800c482:	4618      	mov	r0, r3
 800c484:	f002 fbef 	bl	800ec66 <SDIO_GetResponse>
 800c488:	4602      	mov	r2, r0
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	2104      	movs	r1, #4
 800c494:	4618      	mov	r0, r3
 800c496:	f002 fbe6 	bl	800ec66 <SDIO_GetResponse>
 800c49a:	4602      	mov	r2, r0
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	2108      	movs	r1, #8
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	f002 fbdd 	bl	800ec66 <SDIO_GetResponse>
 800c4ac:	4602      	mov	r2, r0
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	210c      	movs	r1, #12
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	f002 fbd4 	bl	800ec66 <SDIO_GetResponse>
 800c4be:	4602      	mov	r2, r0
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c4ca:	2b03      	cmp	r3, #3
 800c4cc:	d00d      	beq.n	800c4ea <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	f107 020e 	add.w	r2, r7, #14
 800c4d6:	4611      	mov	r1, r2
 800c4d8:	4618      	mov	r0, r3
 800c4da:	f002 fdf4 	bl	800f0c6 <SDMMC_CmdSetRelAdd>
 800c4de:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800c4e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d001      	beq.n	800c4ea <SD_InitCard+0xae>
    {
      return errorstate;
 800c4e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c4e8:	e071      	b.n	800c5ce <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c4ee:	2b03      	cmp	r3, #3
 800c4f0:	d036      	beq.n	800c560 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800c4f2:	89fb      	ldrh	r3, [r7, #14]
 800c4f4:	461a      	mov	r2, r3
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	681a      	ldr	r2, [r3, #0]
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c502:	041b      	lsls	r3, r3, #16
 800c504:	4619      	mov	r1, r3
 800c506:	4610      	mov	r0, r2
 800c508:	f002 fdbe 	bl	800f088 <SDMMC_CmdSendCSD>
 800c50c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800c50e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c510:	2b00      	cmp	r3, #0
 800c512:	d001      	beq.n	800c518 <SD_InitCard+0xdc>
    {
      return errorstate;
 800c514:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c516:	e05a      	b.n	800c5ce <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	2100      	movs	r1, #0
 800c51e:	4618      	mov	r0, r3
 800c520:	f002 fba1 	bl	800ec66 <SDIO_GetResponse>
 800c524:	4602      	mov	r2, r0
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	2104      	movs	r1, #4
 800c530:	4618      	mov	r0, r3
 800c532:	f002 fb98 	bl	800ec66 <SDIO_GetResponse>
 800c536:	4602      	mov	r2, r0
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	2108      	movs	r1, #8
 800c542:	4618      	mov	r0, r3
 800c544:	f002 fb8f 	bl	800ec66 <SDIO_GetResponse>
 800c548:	4602      	mov	r2, r0
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	210c      	movs	r1, #12
 800c554:	4618      	mov	r0, r3
 800c556:	f002 fb86 	bl	800ec66 <SDIO_GetResponse>
 800c55a:	4602      	mov	r2, r0
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	2104      	movs	r1, #4
 800c566:	4618      	mov	r0, r3
 800c568:	f002 fb7d 	bl	800ec66 <SDIO_GetResponse>
 800c56c:	4603      	mov	r3, r0
 800c56e:	0d1a      	lsrs	r2, r3, #20
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800c574:	f107 0310 	add.w	r3, r7, #16
 800c578:	4619      	mov	r1, r3
 800c57a:	6878      	ldr	r0, [r7, #4]
 800c57c:	f7ff fbe4 	bl	800bd48 <HAL_SD_GetCardCSD>
 800c580:	4603      	mov	r3, r0
 800c582:	2b00      	cmp	r3, #0
 800c584:	d002      	beq.n	800c58c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c586:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c58a:	e020      	b.n	800c5ce <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	6819      	ldr	r1, [r3, #0]
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c594:	041b      	lsls	r3, r3, #16
 800c596:	f04f 0400 	mov.w	r4, #0
 800c59a:	461a      	mov	r2, r3
 800c59c:	4623      	mov	r3, r4
 800c59e:	4608      	mov	r0, r1
 800c5a0:	f002 fc6c 	bl	800ee7c <SDMMC_CmdSelDesel>
 800c5a4:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800c5a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d001      	beq.n	800c5b0 <SD_InitCard+0x174>
  {
    return errorstate;
 800c5ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5ae:	e00e      	b.n	800c5ce <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	681d      	ldr	r5, [r3, #0]
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	466c      	mov	r4, sp
 800c5b8:	f103 0210 	add.w	r2, r3, #16
 800c5bc:	ca07      	ldmia	r2, {r0, r1, r2}
 800c5be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c5c2:	3304      	adds	r3, #4
 800c5c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c5c6:	4628      	mov	r0, r5
 800c5c8:	f002 fab0 	bl	800eb2c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800c5cc:	2300      	movs	r3, #0
}
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	3740      	adds	r7, #64	; 0x40
 800c5d2:	46bd      	mov	sp, r7
 800c5d4:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800c5d8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800c5d8:	b580      	push	{r7, lr}
 800c5da:	b086      	sub	sp, #24
 800c5dc:	af00      	add	r7, sp, #0
 800c5de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c5e0:	2300      	movs	r3, #0
 800c5e2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800c5e4:	2300      	movs	r3, #0
 800c5e6:	617b      	str	r3, [r7, #20]
 800c5e8:	2300      	movs	r3, #0
 800c5ea:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	4618      	mov	r0, r3
 800c5f2:	f002 fc66 	bl	800eec2 <SDMMC_CmdGoIdleState>
 800c5f6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d001      	beq.n	800c602 <SD_PowerON+0x2a>
  {
    return errorstate;
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	e072      	b.n	800c6e8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	4618      	mov	r0, r3
 800c608:	f002 fc79 	bl	800eefe <SDMMC_CmdOperCond>
 800c60c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	2b00      	cmp	r3, #0
 800c612:	d00d      	beq.n	800c630 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	2200      	movs	r2, #0
 800c618:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	4618      	mov	r0, r3
 800c620:	f002 fc4f 	bl	800eec2 <SDMMC_CmdGoIdleState>
 800c624:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d004      	beq.n	800c636 <SD_PowerON+0x5e>
    {
      return errorstate;
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	e05b      	b.n	800c6e8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	2201      	movs	r2, #1
 800c634:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c63a:	2b01      	cmp	r3, #1
 800c63c:	d137      	bne.n	800c6ae <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	2100      	movs	r1, #0
 800c644:	4618      	mov	r0, r3
 800c646:	f002 fc79 	bl	800ef3c <SDMMC_CmdAppCommand>
 800c64a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d02d      	beq.n	800c6ae <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c652:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c656:	e047      	b.n	800c6e8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	2100      	movs	r1, #0
 800c65e:	4618      	mov	r0, r3
 800c660:	f002 fc6c 	bl	800ef3c <SDMMC_CmdAppCommand>
 800c664:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d001      	beq.n	800c670 <SD_PowerON+0x98>
    {
      return errorstate;
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	e03b      	b.n	800c6e8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	491e      	ldr	r1, [pc, #120]	; (800c6f0 <SD_PowerON+0x118>)
 800c676:	4618      	mov	r0, r3
 800c678:	f002 fc82 	bl	800ef80 <SDMMC_CmdAppOperCommand>
 800c67c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	2b00      	cmp	r3, #0
 800c682:	d002      	beq.n	800c68a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c684:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c688:	e02e      	b.n	800c6e8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	2100      	movs	r1, #0
 800c690:	4618      	mov	r0, r3
 800c692:	f002 fae8 	bl	800ec66 <SDIO_GetResponse>
 800c696:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800c698:	697b      	ldr	r3, [r7, #20]
 800c69a:	0fdb      	lsrs	r3, r3, #31
 800c69c:	2b01      	cmp	r3, #1
 800c69e:	d101      	bne.n	800c6a4 <SD_PowerON+0xcc>
 800c6a0:	2301      	movs	r3, #1
 800c6a2:	e000      	b.n	800c6a6 <SD_PowerON+0xce>
 800c6a4:	2300      	movs	r3, #0
 800c6a6:	613b      	str	r3, [r7, #16]

    count++;
 800c6a8:	68bb      	ldr	r3, [r7, #8]
 800c6aa:	3301      	adds	r3, #1
 800c6ac:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800c6ae:	68bb      	ldr	r3, [r7, #8]
 800c6b0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c6b4:	4293      	cmp	r3, r2
 800c6b6:	d802      	bhi.n	800c6be <SD_PowerON+0xe6>
 800c6b8:	693b      	ldr	r3, [r7, #16]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d0cc      	beq.n	800c658 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800c6be:	68bb      	ldr	r3, [r7, #8]
 800c6c0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c6c4:	4293      	cmp	r3, r2
 800c6c6:	d902      	bls.n	800c6ce <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800c6c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c6cc:	e00c      	b.n	800c6e8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800c6ce:	697b      	ldr	r3, [r7, #20]
 800c6d0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d003      	beq.n	800c6e0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	2201      	movs	r2, #1
 800c6dc:	645a      	str	r2, [r3, #68]	; 0x44
 800c6de:	e002      	b.n	800c6e6 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	2200      	movs	r2, #0
 800c6e4:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800c6e6:	2300      	movs	r3, #0
}
 800c6e8:	4618      	mov	r0, r3
 800c6ea:	3718      	adds	r7, #24
 800c6ec:	46bd      	mov	sp, r7
 800c6ee:	bd80      	pop	{r7, pc}
 800c6f0:	c1100000 	.word	0xc1100000

0800c6f4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800c6f4:	b580      	push	{r7, lr}
 800c6f6:	b084      	sub	sp, #16
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	6078      	str	r0, [r7, #4]
 800c6fc:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800c6fe:	683b      	ldr	r3, [r7, #0]
 800c700:	2b00      	cmp	r3, #0
 800c702:	d102      	bne.n	800c70a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800c704:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c708:	e018      	b.n	800c73c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	681a      	ldr	r2, [r3, #0]
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c712:	041b      	lsls	r3, r3, #16
 800c714:	4619      	mov	r1, r3
 800c716:	4610      	mov	r0, r2
 800c718:	f002 fcf6 	bl	800f108 <SDMMC_CmdSendStatus>
 800c71c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	2b00      	cmp	r3, #0
 800c722:	d001      	beq.n	800c728 <SD_SendStatus+0x34>
  {
    return errorstate;
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	e009      	b.n	800c73c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	2100      	movs	r1, #0
 800c72e:	4618      	mov	r0, r3
 800c730:	f002 fa99 	bl	800ec66 <SDIO_GetResponse>
 800c734:	4602      	mov	r2, r0
 800c736:	683b      	ldr	r3, [r7, #0]
 800c738:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800c73a:	2300      	movs	r3, #0
}
 800c73c:	4618      	mov	r0, r3
 800c73e:	3710      	adds	r7, #16
 800c740:	46bd      	mov	sp, r7
 800c742:	bd80      	pop	{r7, pc}

0800c744 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800c744:	b580      	push	{r7, lr}
 800c746:	b086      	sub	sp, #24
 800c748:	af00      	add	r7, sp, #0
 800c74a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800c74c:	2300      	movs	r3, #0
 800c74e:	60fb      	str	r3, [r7, #12]
 800c750:	2300      	movs	r3, #0
 800c752:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	2100      	movs	r1, #0
 800c75a:	4618      	mov	r0, r3
 800c75c:	f002 fa83 	bl	800ec66 <SDIO_GetResponse>
 800c760:	4603      	mov	r3, r0
 800c762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c766:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c76a:	d102      	bne.n	800c772 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800c76c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c770:	e02f      	b.n	800c7d2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800c772:	f107 030c 	add.w	r3, r7, #12
 800c776:	4619      	mov	r1, r3
 800c778:	6878      	ldr	r0, [r7, #4]
 800c77a:	f000 f879 	bl	800c870 <SD_FindSCR>
 800c77e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c780:	697b      	ldr	r3, [r7, #20]
 800c782:	2b00      	cmp	r3, #0
 800c784:	d001      	beq.n	800c78a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800c786:	697b      	ldr	r3, [r7, #20]
 800c788:	e023      	b.n	800c7d2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800c78a:	693b      	ldr	r3, [r7, #16]
 800c78c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c790:	2b00      	cmp	r3, #0
 800c792:	d01c      	beq.n	800c7ce <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	681a      	ldr	r2, [r3, #0]
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c79c:	041b      	lsls	r3, r3, #16
 800c79e:	4619      	mov	r1, r3
 800c7a0:	4610      	mov	r0, r2
 800c7a2:	f002 fbcb 	bl	800ef3c <SDMMC_CmdAppCommand>
 800c7a6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c7a8:	697b      	ldr	r3, [r7, #20]
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d001      	beq.n	800c7b2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800c7ae:	697b      	ldr	r3, [r7, #20]
 800c7b0:	e00f      	b.n	800c7d2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	2102      	movs	r1, #2
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	f002 fc04 	bl	800efc6 <SDMMC_CmdBusWidth>
 800c7be:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c7c0:	697b      	ldr	r3, [r7, #20]
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d001      	beq.n	800c7ca <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800c7c6:	697b      	ldr	r3, [r7, #20]
 800c7c8:	e003      	b.n	800c7d2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800c7ca:	2300      	movs	r3, #0
 800c7cc:	e001      	b.n	800c7d2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800c7ce:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800c7d2:	4618      	mov	r0, r3
 800c7d4:	3718      	adds	r7, #24
 800c7d6:	46bd      	mov	sp, r7
 800c7d8:	bd80      	pop	{r7, pc}

0800c7da <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800c7da:	b580      	push	{r7, lr}
 800c7dc:	b086      	sub	sp, #24
 800c7de:	af00      	add	r7, sp, #0
 800c7e0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	60fb      	str	r3, [r7, #12]
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	2100      	movs	r1, #0
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	f002 fa38 	bl	800ec66 <SDIO_GetResponse>
 800c7f6:	4603      	mov	r3, r0
 800c7f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c7fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c800:	d102      	bne.n	800c808 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800c802:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c806:	e02f      	b.n	800c868 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800c808:	f107 030c 	add.w	r3, r7, #12
 800c80c:	4619      	mov	r1, r3
 800c80e:	6878      	ldr	r0, [r7, #4]
 800c810:	f000 f82e 	bl	800c870 <SD_FindSCR>
 800c814:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c816:	697b      	ldr	r3, [r7, #20]
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d001      	beq.n	800c820 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800c81c:	697b      	ldr	r3, [r7, #20]
 800c81e:	e023      	b.n	800c868 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800c820:	693b      	ldr	r3, [r7, #16]
 800c822:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c826:	2b00      	cmp	r3, #0
 800c828:	d01c      	beq.n	800c864 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	681a      	ldr	r2, [r3, #0]
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c832:	041b      	lsls	r3, r3, #16
 800c834:	4619      	mov	r1, r3
 800c836:	4610      	mov	r0, r2
 800c838:	f002 fb80 	bl	800ef3c <SDMMC_CmdAppCommand>
 800c83c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c83e:	697b      	ldr	r3, [r7, #20]
 800c840:	2b00      	cmp	r3, #0
 800c842:	d001      	beq.n	800c848 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800c844:	697b      	ldr	r3, [r7, #20]
 800c846:	e00f      	b.n	800c868 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	2100      	movs	r1, #0
 800c84e:	4618      	mov	r0, r3
 800c850:	f002 fbb9 	bl	800efc6 <SDMMC_CmdBusWidth>
 800c854:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c856:	697b      	ldr	r3, [r7, #20]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d001      	beq.n	800c860 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800c85c:	697b      	ldr	r3, [r7, #20]
 800c85e:	e003      	b.n	800c868 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800c860:	2300      	movs	r3, #0
 800c862:	e001      	b.n	800c868 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800c864:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800c868:	4618      	mov	r0, r3
 800c86a:	3718      	adds	r7, #24
 800c86c:	46bd      	mov	sp, r7
 800c86e:	bd80      	pop	{r7, pc}

0800c870 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800c870:	b590      	push	{r4, r7, lr}
 800c872:	b08f      	sub	sp, #60	; 0x3c
 800c874:	af00      	add	r7, sp, #0
 800c876:	6078      	str	r0, [r7, #4]
 800c878:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800c87a:	f7fb fd7b 	bl	8008374 <HAL_GetTick>
 800c87e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800c880:	2300      	movs	r3, #0
 800c882:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800c884:	2300      	movs	r3, #0
 800c886:	60bb      	str	r3, [r7, #8]
 800c888:	2300      	movs	r3, #0
 800c88a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800c88c:	683b      	ldr	r3, [r7, #0]
 800c88e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	2108      	movs	r1, #8
 800c896:	4618      	mov	r0, r3
 800c898:	f002 fa24 	bl	800ece4 <SDMMC_CmdBlockLength>
 800c89c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800c89e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d001      	beq.n	800c8a8 <SD_FindSCR+0x38>
  {
    return errorstate;
 800c8a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8a6:	e0a9      	b.n	800c9fc <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	681a      	ldr	r2, [r3, #0]
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c8b0:	041b      	lsls	r3, r3, #16
 800c8b2:	4619      	mov	r1, r3
 800c8b4:	4610      	mov	r0, r2
 800c8b6:	f002 fb41 	bl	800ef3c <SDMMC_CmdAppCommand>
 800c8ba:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800c8bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d001      	beq.n	800c8c6 <SD_FindSCR+0x56>
  {
    return errorstate;
 800c8c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8c4:	e09a      	b.n	800c9fc <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c8c6:	f04f 33ff 	mov.w	r3, #4294967295
 800c8ca:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800c8cc:	2308      	movs	r3, #8
 800c8ce:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800c8d0:	2330      	movs	r3, #48	; 0x30
 800c8d2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800c8d4:	2302      	movs	r3, #2
 800c8d6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800c8d8:	2300      	movs	r3, #0
 800c8da:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800c8dc:	2301      	movs	r3, #1
 800c8de:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	f107 0210 	add.w	r2, r7, #16
 800c8e8:	4611      	mov	r1, r2
 800c8ea:	4618      	mov	r0, r3
 800c8ec:	f002 f9ce 	bl	800ec8c <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	f002 fb88 	bl	800f00a <SDMMC_CmdSendSCR>
 800c8fa:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800c8fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d022      	beq.n	800c948 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800c902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c904:	e07a      	b.n	800c9fc <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c90c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c910:	2b00      	cmp	r3, #0
 800c912:	d00e      	beq.n	800c932 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	6819      	ldr	r1, [r3, #0]
 800c918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c91a:	009b      	lsls	r3, r3, #2
 800c91c:	f107 0208 	add.w	r2, r7, #8
 800c920:	18d4      	adds	r4, r2, r3
 800c922:	4608      	mov	r0, r1
 800c924:	f002 f92d 	bl	800eb82 <SDIO_ReadFIFO>
 800c928:	4603      	mov	r3, r0
 800c92a:	6023      	str	r3, [r4, #0]
      index++;
 800c92c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c92e:	3301      	adds	r3, #1
 800c930:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800c932:	f7fb fd1f 	bl	8008374 <HAL_GetTick>
 800c936:	4602      	mov	r2, r0
 800c938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c93a:	1ad3      	subs	r3, r2, r3
 800c93c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c940:	d102      	bne.n	800c948 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800c942:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c946:	e059      	b.n	800c9fc <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c94e:	f240 432a 	movw	r3, #1066	; 0x42a
 800c952:	4013      	ands	r3, r2
 800c954:	2b00      	cmp	r3, #0
 800c956:	d0d6      	beq.n	800c906 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c95e:	f003 0308 	and.w	r3, r3, #8
 800c962:	2b00      	cmp	r3, #0
 800c964:	d005      	beq.n	800c972 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	2208      	movs	r2, #8
 800c96c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800c96e:	2308      	movs	r3, #8
 800c970:	e044      	b.n	800c9fc <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c978:	f003 0302 	and.w	r3, r3, #2
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d005      	beq.n	800c98c <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	2202      	movs	r2, #2
 800c986:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800c988:	2302      	movs	r3, #2
 800c98a:	e037      	b.n	800c9fc <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c992:	f003 0320 	and.w	r3, r3, #32
 800c996:	2b00      	cmp	r3, #0
 800c998:	d005      	beq.n	800c9a6 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	2220      	movs	r2, #32
 800c9a0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800c9a2:	2320      	movs	r3, #32
 800c9a4:	e02a      	b.n	800c9fc <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	f240 523a 	movw	r2, #1338	; 0x53a
 800c9ae:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	061a      	lsls	r2, r3, #24
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	021b      	lsls	r3, r3, #8
 800c9b8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c9bc:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	0a1b      	lsrs	r3, r3, #8
 800c9c2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800c9c6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	0e1b      	lsrs	r3, r3, #24
 800c9cc:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800c9ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9d0:	601a      	str	r2, [r3, #0]
    scr++;
 800c9d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9d4:	3304      	adds	r3, #4
 800c9d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800c9d8:	68bb      	ldr	r3, [r7, #8]
 800c9da:	061a      	lsls	r2, r3, #24
 800c9dc:	68bb      	ldr	r3, [r7, #8]
 800c9de:	021b      	lsls	r3, r3, #8
 800c9e0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c9e4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800c9e6:	68bb      	ldr	r3, [r7, #8]
 800c9e8:	0a1b      	lsrs	r3, r3, #8
 800c9ea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800c9ee:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800c9f0:	68bb      	ldr	r3, [r7, #8]
 800c9f2:	0e1b      	lsrs	r3, r3, #24
 800c9f4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800c9f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9f8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800c9fa:	2300      	movs	r3, #0
}
 800c9fc:	4618      	mov	r0, r3
 800c9fe:	373c      	adds	r7, #60	; 0x3c
 800ca00:	46bd      	mov	sp, r7
 800ca02:	bd90      	pop	{r4, r7, pc}

0800ca04 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800ca04:	b580      	push	{r7, lr}
 800ca06:	b086      	sub	sp, #24
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca10:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca16:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800ca18:	693b      	ldr	r3, [r7, #16]
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d03f      	beq.n	800ca9e <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800ca1e:	2300      	movs	r3, #0
 800ca20:	617b      	str	r3, [r7, #20]
 800ca22:	e033      	b.n	800ca8c <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	4618      	mov	r0, r3
 800ca2a:	f002 f8aa 	bl	800eb82 <SDIO_ReadFIFO>
 800ca2e:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800ca30:	68bb      	ldr	r3, [r7, #8]
 800ca32:	b2da      	uxtb	r2, r3
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	3301      	adds	r3, #1
 800ca3c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ca3e:	693b      	ldr	r3, [r7, #16]
 800ca40:	3b01      	subs	r3, #1
 800ca42:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800ca44:	68bb      	ldr	r3, [r7, #8]
 800ca46:	0a1b      	lsrs	r3, r3, #8
 800ca48:	b2da      	uxtb	r2, r3
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	3301      	adds	r3, #1
 800ca52:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ca54:	693b      	ldr	r3, [r7, #16]
 800ca56:	3b01      	subs	r3, #1
 800ca58:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800ca5a:	68bb      	ldr	r3, [r7, #8]
 800ca5c:	0c1b      	lsrs	r3, r3, #16
 800ca5e:	b2da      	uxtb	r2, r3
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	3301      	adds	r3, #1
 800ca68:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ca6a:	693b      	ldr	r3, [r7, #16]
 800ca6c:	3b01      	subs	r3, #1
 800ca6e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800ca70:	68bb      	ldr	r3, [r7, #8]
 800ca72:	0e1b      	lsrs	r3, r3, #24
 800ca74:	b2da      	uxtb	r2, r3
 800ca76:	68fb      	ldr	r3, [r7, #12]
 800ca78:	701a      	strb	r2, [r3, #0]
      tmp++;
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	3301      	adds	r3, #1
 800ca7e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ca80:	693b      	ldr	r3, [r7, #16]
 800ca82:	3b01      	subs	r3, #1
 800ca84:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800ca86:	697b      	ldr	r3, [r7, #20]
 800ca88:	3301      	adds	r3, #1
 800ca8a:	617b      	str	r3, [r7, #20]
 800ca8c:	697b      	ldr	r3, [r7, #20]
 800ca8e:	2b07      	cmp	r3, #7
 800ca90:	d9c8      	bls.n	800ca24 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	68fa      	ldr	r2, [r7, #12]
 800ca96:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	693a      	ldr	r2, [r7, #16]
 800ca9c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800ca9e:	bf00      	nop
 800caa0:	3718      	adds	r7, #24
 800caa2:	46bd      	mov	sp, r7
 800caa4:	bd80      	pop	{r7, pc}

0800caa6 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800caa6:	b580      	push	{r7, lr}
 800caa8:	b086      	sub	sp, #24
 800caaa:	af00      	add	r7, sp, #0
 800caac:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	6a1b      	ldr	r3, [r3, #32]
 800cab2:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cab8:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800caba:	693b      	ldr	r3, [r7, #16]
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d043      	beq.n	800cb48 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800cac0:	2300      	movs	r3, #0
 800cac2:	617b      	str	r3, [r7, #20]
 800cac4:	e037      	b.n	800cb36 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	781b      	ldrb	r3, [r3, #0]
 800caca:	60bb      	str	r3, [r7, #8]
      tmp++;
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	3301      	adds	r3, #1
 800cad0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800cad2:	693b      	ldr	r3, [r7, #16]
 800cad4:	3b01      	subs	r3, #1
 800cad6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	781b      	ldrb	r3, [r3, #0]
 800cadc:	021a      	lsls	r2, r3, #8
 800cade:	68bb      	ldr	r3, [r7, #8]
 800cae0:	4313      	orrs	r3, r2
 800cae2:	60bb      	str	r3, [r7, #8]
      tmp++;
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	3301      	adds	r3, #1
 800cae8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800caea:	693b      	ldr	r3, [r7, #16]
 800caec:	3b01      	subs	r3, #1
 800caee:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	781b      	ldrb	r3, [r3, #0]
 800caf4:	041a      	lsls	r2, r3, #16
 800caf6:	68bb      	ldr	r3, [r7, #8]
 800caf8:	4313      	orrs	r3, r2
 800cafa:	60bb      	str	r3, [r7, #8]
      tmp++;
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	3301      	adds	r3, #1
 800cb00:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800cb02:	693b      	ldr	r3, [r7, #16]
 800cb04:	3b01      	subs	r3, #1
 800cb06:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	781b      	ldrb	r3, [r3, #0]
 800cb0c:	061a      	lsls	r2, r3, #24
 800cb0e:	68bb      	ldr	r3, [r7, #8]
 800cb10:	4313      	orrs	r3, r2
 800cb12:	60bb      	str	r3, [r7, #8]
      tmp++;
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	3301      	adds	r3, #1
 800cb18:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800cb1a:	693b      	ldr	r3, [r7, #16]
 800cb1c:	3b01      	subs	r3, #1
 800cb1e:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	f107 0208 	add.w	r2, r7, #8
 800cb28:	4611      	mov	r1, r2
 800cb2a:	4618      	mov	r0, r3
 800cb2c:	f002 f836 	bl	800eb9c <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800cb30:	697b      	ldr	r3, [r7, #20]
 800cb32:	3301      	adds	r3, #1
 800cb34:	617b      	str	r3, [r7, #20]
 800cb36:	697b      	ldr	r3, [r7, #20]
 800cb38:	2b07      	cmp	r3, #7
 800cb3a:	d9c4      	bls.n	800cac6 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	68fa      	ldr	r2, [r7, #12]
 800cb40:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	693a      	ldr	r2, [r7, #16]
 800cb46:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800cb48:	bf00      	nop
 800cb4a:	3718      	adds	r7, #24
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	bd80      	pop	{r7, pc}

0800cb50 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800cb50:	b580      	push	{r7, lr}
 800cb52:	b082      	sub	sp, #8
 800cb54:	af00      	add	r7, sp, #0
 800cb56:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d101      	bne.n	800cb62 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800cb5e:	2301      	movs	r3, #1
 800cb60:	e056      	b.n	800cc10 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	2200      	movs	r2, #0
 800cb66:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800cb6e:	b2db      	uxtb	r3, r3
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d106      	bne.n	800cb82 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	2200      	movs	r2, #0
 800cb78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800cb7c:	6878      	ldr	r0, [r7, #4]
 800cb7e:	f7f9 fd5d 	bl	800663c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	2202      	movs	r2, #2
 800cb86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	681a      	ldr	r2, [r3, #0]
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cb98:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	685a      	ldr	r2, [r3, #4]
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	689b      	ldr	r3, [r3, #8]
 800cba2:	431a      	orrs	r2, r3
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	68db      	ldr	r3, [r3, #12]
 800cba8:	431a      	orrs	r2, r3
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	691b      	ldr	r3, [r3, #16]
 800cbae:	431a      	orrs	r2, r3
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	695b      	ldr	r3, [r3, #20]
 800cbb4:	431a      	orrs	r2, r3
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	699b      	ldr	r3, [r3, #24]
 800cbba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cbbe:	431a      	orrs	r2, r3
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	69db      	ldr	r3, [r3, #28]
 800cbc4:	431a      	orrs	r2, r3
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	6a1b      	ldr	r3, [r3, #32]
 800cbca:	ea42 0103 	orr.w	r1, r2, r3
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	430a      	orrs	r2, r1
 800cbd8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	699b      	ldr	r3, [r3, #24]
 800cbde:	0c1b      	lsrs	r3, r3, #16
 800cbe0:	f003 0104 	and.w	r1, r3, #4
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	430a      	orrs	r2, r1
 800cbee:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	69da      	ldr	r2, [r3, #28]
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800cbfe:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	2200      	movs	r2, #0
 800cc04:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	2201      	movs	r2, #1
 800cc0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800cc0e:	2300      	movs	r3, #0
}
 800cc10:	4618      	mov	r0, r3
 800cc12:	3708      	adds	r7, #8
 800cc14:	46bd      	mov	sp, r7
 800cc16:	bd80      	pop	{r7, pc}

0800cc18 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cc18:	b580      	push	{r7, lr}
 800cc1a:	b088      	sub	sp, #32
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	60f8      	str	r0, [r7, #12]
 800cc20:	60b9      	str	r1, [r7, #8]
 800cc22:	603b      	str	r3, [r7, #0]
 800cc24:	4613      	mov	r3, r2
 800cc26:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800cc28:	2300      	movs	r3, #0
 800cc2a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800cc32:	2b01      	cmp	r3, #1
 800cc34:	d101      	bne.n	800cc3a <HAL_SPI_Transmit+0x22>
 800cc36:	2302      	movs	r3, #2
 800cc38:	e11e      	b.n	800ce78 <HAL_SPI_Transmit+0x260>
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	2201      	movs	r2, #1
 800cc3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800cc42:	f7fb fb97 	bl	8008374 <HAL_GetTick>
 800cc46:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800cc48:	88fb      	ldrh	r3, [r7, #6]
 800cc4a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800cc52:	b2db      	uxtb	r3, r3
 800cc54:	2b01      	cmp	r3, #1
 800cc56:	d002      	beq.n	800cc5e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800cc58:	2302      	movs	r3, #2
 800cc5a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800cc5c:	e103      	b.n	800ce66 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800cc5e:	68bb      	ldr	r3, [r7, #8]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d002      	beq.n	800cc6a <HAL_SPI_Transmit+0x52>
 800cc64:	88fb      	ldrh	r3, [r7, #6]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d102      	bne.n	800cc70 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800cc6a:	2301      	movs	r3, #1
 800cc6c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800cc6e:	e0fa      	b.n	800ce66 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	2203      	movs	r2, #3
 800cc74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	2200      	movs	r2, #0
 800cc7c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	68ba      	ldr	r2, [r7, #8]
 800cc82:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	88fa      	ldrh	r2, [r7, #6]
 800cc88:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	88fa      	ldrh	r2, [r7, #6]
 800cc8e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	2200      	movs	r2, #0
 800cc94:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	2200      	movs	r2, #0
 800cc9a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	2200      	movs	r2, #0
 800cca0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	2200      	movs	r2, #0
 800cca6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	2200      	movs	r2, #0
 800ccac:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	689b      	ldr	r3, [r3, #8]
 800ccb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ccb6:	d107      	bne.n	800ccc8 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	681a      	ldr	r2, [r3, #0]
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ccc6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ccd2:	2b40      	cmp	r3, #64	; 0x40
 800ccd4:	d007      	beq.n	800cce6 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	681a      	ldr	r2, [r3, #0]
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cce4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	68db      	ldr	r3, [r3, #12]
 800ccea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ccee:	d14b      	bne.n	800cd88 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	685b      	ldr	r3, [r3, #4]
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d002      	beq.n	800ccfe <HAL_SPI_Transmit+0xe6>
 800ccf8:	8afb      	ldrh	r3, [r7, #22]
 800ccfa:	2b01      	cmp	r3, #1
 800ccfc:	d13e      	bne.n	800cd7c <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd02:	881a      	ldrh	r2, [r3, #0]
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd0e:	1c9a      	adds	r2, r3, #2
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cd18:	b29b      	uxth	r3, r3
 800cd1a:	3b01      	subs	r3, #1
 800cd1c:	b29a      	uxth	r2, r3
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800cd22:	e02b      	b.n	800cd7c <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	689b      	ldr	r3, [r3, #8]
 800cd2a:	f003 0302 	and.w	r3, r3, #2
 800cd2e:	2b02      	cmp	r3, #2
 800cd30:	d112      	bne.n	800cd58 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd36:	881a      	ldrh	r2, [r3, #0]
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd42:	1c9a      	adds	r2, r3, #2
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cd4c:	b29b      	uxth	r3, r3
 800cd4e:	3b01      	subs	r3, #1
 800cd50:	b29a      	uxth	r2, r3
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	86da      	strh	r2, [r3, #54]	; 0x36
 800cd56:	e011      	b.n	800cd7c <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cd58:	f7fb fb0c 	bl	8008374 <HAL_GetTick>
 800cd5c:	4602      	mov	r2, r0
 800cd5e:	69bb      	ldr	r3, [r7, #24]
 800cd60:	1ad3      	subs	r3, r2, r3
 800cd62:	683a      	ldr	r2, [r7, #0]
 800cd64:	429a      	cmp	r2, r3
 800cd66:	d803      	bhi.n	800cd70 <HAL_SPI_Transmit+0x158>
 800cd68:	683b      	ldr	r3, [r7, #0]
 800cd6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd6e:	d102      	bne.n	800cd76 <HAL_SPI_Transmit+0x15e>
 800cd70:	683b      	ldr	r3, [r7, #0]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d102      	bne.n	800cd7c <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800cd76:	2303      	movs	r3, #3
 800cd78:	77fb      	strb	r3, [r7, #31]
          goto error;
 800cd7a:	e074      	b.n	800ce66 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cd80:	b29b      	uxth	r3, r3
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d1ce      	bne.n	800cd24 <HAL_SPI_Transmit+0x10c>
 800cd86:	e04c      	b.n	800ce22 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	685b      	ldr	r3, [r3, #4]
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d002      	beq.n	800cd96 <HAL_SPI_Transmit+0x17e>
 800cd90:	8afb      	ldrh	r3, [r7, #22]
 800cd92:	2b01      	cmp	r3, #1
 800cd94:	d140      	bne.n	800ce18 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	330c      	adds	r3, #12
 800cda0:	7812      	ldrb	r2, [r2, #0]
 800cda2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cda8:	1c5a      	adds	r2, r3, #1
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cdb2:	b29b      	uxth	r3, r3
 800cdb4:	3b01      	subs	r3, #1
 800cdb6:	b29a      	uxth	r2, r3
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800cdbc:	e02c      	b.n	800ce18 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	689b      	ldr	r3, [r3, #8]
 800cdc4:	f003 0302 	and.w	r3, r3, #2
 800cdc8:	2b02      	cmp	r3, #2
 800cdca:	d113      	bne.n	800cdf4 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	330c      	adds	r3, #12
 800cdd6:	7812      	ldrb	r2, [r2, #0]
 800cdd8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cdde:	1c5a      	adds	r2, r3, #1
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cde8:	b29b      	uxth	r3, r3
 800cdea:	3b01      	subs	r3, #1
 800cdec:	b29a      	uxth	r2, r3
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	86da      	strh	r2, [r3, #54]	; 0x36
 800cdf2:	e011      	b.n	800ce18 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cdf4:	f7fb fabe 	bl	8008374 <HAL_GetTick>
 800cdf8:	4602      	mov	r2, r0
 800cdfa:	69bb      	ldr	r3, [r7, #24]
 800cdfc:	1ad3      	subs	r3, r2, r3
 800cdfe:	683a      	ldr	r2, [r7, #0]
 800ce00:	429a      	cmp	r2, r3
 800ce02:	d803      	bhi.n	800ce0c <HAL_SPI_Transmit+0x1f4>
 800ce04:	683b      	ldr	r3, [r7, #0]
 800ce06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce0a:	d102      	bne.n	800ce12 <HAL_SPI_Transmit+0x1fa>
 800ce0c:	683b      	ldr	r3, [r7, #0]
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d102      	bne.n	800ce18 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800ce12:	2303      	movs	r3, #3
 800ce14:	77fb      	strb	r3, [r7, #31]
          goto error;
 800ce16:	e026      	b.n	800ce66 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ce1c:	b29b      	uxth	r3, r3
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d1cd      	bne.n	800cdbe <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ce22:	69ba      	ldr	r2, [r7, #24]
 800ce24:	6839      	ldr	r1, [r7, #0]
 800ce26:	68f8      	ldr	r0, [r7, #12]
 800ce28:	f000 fba4 	bl	800d574 <SPI_EndRxTxTransaction>
 800ce2c:	4603      	mov	r3, r0
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d002      	beq.n	800ce38 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	2220      	movs	r2, #32
 800ce36:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	689b      	ldr	r3, [r3, #8]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d10a      	bne.n	800ce56 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ce40:	2300      	movs	r3, #0
 800ce42:	613b      	str	r3, [r7, #16]
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	68db      	ldr	r3, [r3, #12]
 800ce4a:	613b      	str	r3, [r7, #16]
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	689b      	ldr	r3, [r3, #8]
 800ce52:	613b      	str	r3, [r7, #16]
 800ce54:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d002      	beq.n	800ce64 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800ce5e:	2301      	movs	r3, #1
 800ce60:	77fb      	strb	r3, [r7, #31]
 800ce62:	e000      	b.n	800ce66 <HAL_SPI_Transmit+0x24e>
  }

error:
 800ce64:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	2201      	movs	r2, #1
 800ce6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	2200      	movs	r2, #0
 800ce72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ce76:	7ffb      	ldrb	r3, [r7, #31]
}
 800ce78:	4618      	mov	r0, r3
 800ce7a:	3720      	adds	r7, #32
 800ce7c:	46bd      	mov	sp, r7
 800ce7e:	bd80      	pop	{r7, pc}

0800ce80 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ce80:	b580      	push	{r7, lr}
 800ce82:	b088      	sub	sp, #32
 800ce84:	af02      	add	r7, sp, #8
 800ce86:	60f8      	str	r0, [r7, #12]
 800ce88:	60b9      	str	r1, [r7, #8]
 800ce8a:	603b      	str	r3, [r7, #0]
 800ce8c:	4613      	mov	r3, r2
 800ce8e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ce90:	2300      	movs	r3, #0
 800ce92:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	685b      	ldr	r3, [r3, #4]
 800ce98:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ce9c:	d112      	bne.n	800cec4 <HAL_SPI_Receive+0x44>
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	689b      	ldr	r3, [r3, #8]
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d10e      	bne.n	800cec4 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	2204      	movs	r2, #4
 800ceaa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800ceae:	88fa      	ldrh	r2, [r7, #6]
 800ceb0:	683b      	ldr	r3, [r7, #0]
 800ceb2:	9300      	str	r3, [sp, #0]
 800ceb4:	4613      	mov	r3, r2
 800ceb6:	68ba      	ldr	r2, [r7, #8]
 800ceb8:	68b9      	ldr	r1, [r7, #8]
 800ceba:	68f8      	ldr	r0, [r7, #12]
 800cebc:	f000 f8e9 	bl	800d092 <HAL_SPI_TransmitReceive>
 800cec0:	4603      	mov	r3, r0
 800cec2:	e0e2      	b.n	800d08a <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ceca:	2b01      	cmp	r3, #1
 800cecc:	d101      	bne.n	800ced2 <HAL_SPI_Receive+0x52>
 800cece:	2302      	movs	r3, #2
 800ced0:	e0db      	b.n	800d08a <HAL_SPI_Receive+0x20a>
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	2201      	movs	r2, #1
 800ced6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ceda:	f7fb fa4b 	bl	8008374 <HAL_GetTick>
 800cede:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800cee6:	b2db      	uxtb	r3, r3
 800cee8:	2b01      	cmp	r3, #1
 800ceea:	d002      	beq.n	800cef2 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800ceec:	2302      	movs	r3, #2
 800ceee:	75fb      	strb	r3, [r7, #23]
    goto error;
 800cef0:	e0c2      	b.n	800d078 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800cef2:	68bb      	ldr	r3, [r7, #8]
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d002      	beq.n	800cefe <HAL_SPI_Receive+0x7e>
 800cef8:	88fb      	ldrh	r3, [r7, #6]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d102      	bne.n	800cf04 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800cefe:	2301      	movs	r3, #1
 800cf00:	75fb      	strb	r3, [r7, #23]
    goto error;
 800cf02:	e0b9      	b.n	800d078 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	2204      	movs	r2, #4
 800cf08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	2200      	movs	r2, #0
 800cf10:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	68ba      	ldr	r2, [r7, #8]
 800cf16:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	88fa      	ldrh	r2, [r7, #6]
 800cf1c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	88fa      	ldrh	r2, [r7, #6]
 800cf22:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	2200      	movs	r2, #0
 800cf28:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	2200      	movs	r2, #0
 800cf2e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	2200      	movs	r2, #0
 800cf34:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	2200      	movs	r2, #0
 800cf3a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	2200      	movs	r2, #0
 800cf40:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	689b      	ldr	r3, [r3, #8]
 800cf46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cf4a:	d107      	bne.n	800cf5c <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	681a      	ldr	r2, [r3, #0]
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800cf5a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf66:	2b40      	cmp	r3, #64	; 0x40
 800cf68:	d007      	beq.n	800cf7a <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	681a      	ldr	r2, [r3, #0]
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cf78:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	68db      	ldr	r3, [r3, #12]
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d162      	bne.n	800d048 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800cf82:	e02e      	b.n	800cfe2 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	689b      	ldr	r3, [r3, #8]
 800cf8a:	f003 0301 	and.w	r3, r3, #1
 800cf8e:	2b01      	cmp	r3, #1
 800cf90:	d115      	bne.n	800cfbe <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	f103 020c 	add.w	r2, r3, #12
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf9e:	7812      	ldrb	r2, [r2, #0]
 800cfa0:	b2d2      	uxtb	r2, r2
 800cfa2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfa8:	1c5a      	adds	r2, r3, #1
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cfb2:	b29b      	uxth	r3, r3
 800cfb4:	3b01      	subs	r3, #1
 800cfb6:	b29a      	uxth	r2, r3
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	87da      	strh	r2, [r3, #62]	; 0x3e
 800cfbc:	e011      	b.n	800cfe2 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800cfbe:	f7fb f9d9 	bl	8008374 <HAL_GetTick>
 800cfc2:	4602      	mov	r2, r0
 800cfc4:	693b      	ldr	r3, [r7, #16]
 800cfc6:	1ad3      	subs	r3, r2, r3
 800cfc8:	683a      	ldr	r2, [r7, #0]
 800cfca:	429a      	cmp	r2, r3
 800cfcc:	d803      	bhi.n	800cfd6 <HAL_SPI_Receive+0x156>
 800cfce:	683b      	ldr	r3, [r7, #0]
 800cfd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfd4:	d102      	bne.n	800cfdc <HAL_SPI_Receive+0x15c>
 800cfd6:	683b      	ldr	r3, [r7, #0]
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d102      	bne.n	800cfe2 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800cfdc:	2303      	movs	r3, #3
 800cfde:	75fb      	strb	r3, [r7, #23]
          goto error;
 800cfe0:	e04a      	b.n	800d078 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cfe6:	b29b      	uxth	r3, r3
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d1cb      	bne.n	800cf84 <HAL_SPI_Receive+0x104>
 800cfec:	e031      	b.n	800d052 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	689b      	ldr	r3, [r3, #8]
 800cff4:	f003 0301 	and.w	r3, r3, #1
 800cff8:	2b01      	cmp	r3, #1
 800cffa:	d113      	bne.n	800d024 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	68da      	ldr	r2, [r3, #12]
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d006:	b292      	uxth	r2, r2
 800d008:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d00e:	1c9a      	adds	r2, r3, #2
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800d014:	68fb      	ldr	r3, [r7, #12]
 800d016:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d018:	b29b      	uxth	r3, r3
 800d01a:	3b01      	subs	r3, #1
 800d01c:	b29a      	uxth	r2, r3
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	87da      	strh	r2, [r3, #62]	; 0x3e
 800d022:	e011      	b.n	800d048 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d024:	f7fb f9a6 	bl	8008374 <HAL_GetTick>
 800d028:	4602      	mov	r2, r0
 800d02a:	693b      	ldr	r3, [r7, #16]
 800d02c:	1ad3      	subs	r3, r2, r3
 800d02e:	683a      	ldr	r2, [r7, #0]
 800d030:	429a      	cmp	r2, r3
 800d032:	d803      	bhi.n	800d03c <HAL_SPI_Receive+0x1bc>
 800d034:	683b      	ldr	r3, [r7, #0]
 800d036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d03a:	d102      	bne.n	800d042 <HAL_SPI_Receive+0x1c2>
 800d03c:	683b      	ldr	r3, [r7, #0]
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d102      	bne.n	800d048 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800d042:	2303      	movs	r3, #3
 800d044:	75fb      	strb	r3, [r7, #23]
          goto error;
 800d046:	e017      	b.n	800d078 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d04c:	b29b      	uxth	r3, r3
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d1cd      	bne.n	800cfee <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d052:	693a      	ldr	r2, [r7, #16]
 800d054:	6839      	ldr	r1, [r7, #0]
 800d056:	68f8      	ldr	r0, [r7, #12]
 800d058:	f000 fa27 	bl	800d4aa <SPI_EndRxTransaction>
 800d05c:	4603      	mov	r3, r0
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d002      	beq.n	800d068 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	2220      	movs	r2, #32
 800d066:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d002      	beq.n	800d076 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800d070:	2301      	movs	r3, #1
 800d072:	75fb      	strb	r3, [r7, #23]
 800d074:	e000      	b.n	800d078 <HAL_SPI_Receive+0x1f8>
  }

error :
 800d076:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	2201      	movs	r2, #1
 800d07c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	2200      	movs	r2, #0
 800d084:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800d088:	7dfb      	ldrb	r3, [r7, #23]
}
 800d08a:	4618      	mov	r0, r3
 800d08c:	3718      	adds	r7, #24
 800d08e:	46bd      	mov	sp, r7
 800d090:	bd80      	pop	{r7, pc}

0800d092 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800d092:	b580      	push	{r7, lr}
 800d094:	b08c      	sub	sp, #48	; 0x30
 800d096:	af00      	add	r7, sp, #0
 800d098:	60f8      	str	r0, [r7, #12]
 800d09a:	60b9      	str	r1, [r7, #8]
 800d09c:	607a      	str	r2, [r7, #4]
 800d09e:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800d0a0:	2301      	movs	r3, #1
 800d0a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800d0a4:	2300      	movs	r3, #0
 800d0a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800d0b0:	2b01      	cmp	r3, #1
 800d0b2:	d101      	bne.n	800d0b8 <HAL_SPI_TransmitReceive+0x26>
 800d0b4:	2302      	movs	r3, #2
 800d0b6:	e18a      	b.n	800d3ce <HAL_SPI_TransmitReceive+0x33c>
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	2201      	movs	r2, #1
 800d0bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d0c0:	f7fb f958 	bl	8008374 <HAL_GetTick>
 800d0c4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800d0c6:	68fb      	ldr	r3, [r7, #12]
 800d0c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d0cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	685b      	ldr	r3, [r3, #4]
 800d0d4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800d0d6:	887b      	ldrh	r3, [r7, #2]
 800d0d8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800d0da:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d0de:	2b01      	cmp	r3, #1
 800d0e0:	d00f      	beq.n	800d102 <HAL_SPI_TransmitReceive+0x70>
 800d0e2:	69fb      	ldr	r3, [r7, #28]
 800d0e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d0e8:	d107      	bne.n	800d0fa <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	689b      	ldr	r3, [r3, #8]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d103      	bne.n	800d0fa <HAL_SPI_TransmitReceive+0x68>
 800d0f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d0f6:	2b04      	cmp	r3, #4
 800d0f8:	d003      	beq.n	800d102 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800d0fa:	2302      	movs	r3, #2
 800d0fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800d100:	e15b      	b.n	800d3ba <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800d102:	68bb      	ldr	r3, [r7, #8]
 800d104:	2b00      	cmp	r3, #0
 800d106:	d005      	beq.n	800d114 <HAL_SPI_TransmitReceive+0x82>
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d002      	beq.n	800d114 <HAL_SPI_TransmitReceive+0x82>
 800d10e:	887b      	ldrh	r3, [r7, #2]
 800d110:	2b00      	cmp	r3, #0
 800d112:	d103      	bne.n	800d11c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800d114:	2301      	movs	r3, #1
 800d116:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800d11a:	e14e      	b.n	800d3ba <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d122:	b2db      	uxtb	r3, r3
 800d124:	2b04      	cmp	r3, #4
 800d126:	d003      	beq.n	800d130 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	2205      	movs	r2, #5
 800d12c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	2200      	movs	r2, #0
 800d134:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	687a      	ldr	r2, [r7, #4]
 800d13a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	887a      	ldrh	r2, [r7, #2]
 800d140:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	887a      	ldrh	r2, [r7, #2]
 800d146:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	68ba      	ldr	r2, [r7, #8]
 800d14c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	887a      	ldrh	r2, [r7, #2]
 800d152:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	887a      	ldrh	r2, [r7, #2]
 800d158:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	2200      	movs	r2, #0
 800d15e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	2200      	movs	r2, #0
 800d164:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d170:	2b40      	cmp	r3, #64	; 0x40
 800d172:	d007      	beq.n	800d184 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	681a      	ldr	r2, [r3, #0]
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d182:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	68db      	ldr	r3, [r3, #12]
 800d188:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d18c:	d178      	bne.n	800d280 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	685b      	ldr	r3, [r3, #4]
 800d192:	2b00      	cmp	r3, #0
 800d194:	d002      	beq.n	800d19c <HAL_SPI_TransmitReceive+0x10a>
 800d196:	8b7b      	ldrh	r3, [r7, #26]
 800d198:	2b01      	cmp	r3, #1
 800d19a:	d166      	bne.n	800d26a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1a0:	881a      	ldrh	r2, [r3, #0]
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1ac:	1c9a      	adds	r2, r3, #2
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d1b6:	b29b      	uxth	r3, r3
 800d1b8:	3b01      	subs	r3, #1
 800d1ba:	b29a      	uxth	r2, r3
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d1c0:	e053      	b.n	800d26a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	689b      	ldr	r3, [r3, #8]
 800d1c8:	f003 0302 	and.w	r3, r3, #2
 800d1cc:	2b02      	cmp	r3, #2
 800d1ce:	d11b      	bne.n	800d208 <HAL_SPI_TransmitReceive+0x176>
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d1d4:	b29b      	uxth	r3, r3
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d016      	beq.n	800d208 <HAL_SPI_TransmitReceive+0x176>
 800d1da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1dc:	2b01      	cmp	r3, #1
 800d1de:	d113      	bne.n	800d208 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1e4:	881a      	ldrh	r2, [r3, #0]
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1f0:	1c9a      	adds	r2, r3, #2
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d1fa:	b29b      	uxth	r3, r3
 800d1fc:	3b01      	subs	r3, #1
 800d1fe:	b29a      	uxth	r2, r3
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800d204:	2300      	movs	r3, #0
 800d206:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	689b      	ldr	r3, [r3, #8]
 800d20e:	f003 0301 	and.w	r3, r3, #1
 800d212:	2b01      	cmp	r3, #1
 800d214:	d119      	bne.n	800d24a <HAL_SPI_TransmitReceive+0x1b8>
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d21a:	b29b      	uxth	r3, r3
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d014      	beq.n	800d24a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	68da      	ldr	r2, [r3, #12]
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d22a:	b292      	uxth	r2, r2
 800d22c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d232:	1c9a      	adds	r2, r3, #2
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d23c:	b29b      	uxth	r3, r3
 800d23e:	3b01      	subs	r3, #1
 800d240:	b29a      	uxth	r2, r3
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800d246:	2301      	movs	r3, #1
 800d248:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800d24a:	f7fb f893 	bl	8008374 <HAL_GetTick>
 800d24e:	4602      	mov	r2, r0
 800d250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d252:	1ad3      	subs	r3, r2, r3
 800d254:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d256:	429a      	cmp	r2, r3
 800d258:	d807      	bhi.n	800d26a <HAL_SPI_TransmitReceive+0x1d8>
 800d25a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d25c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d260:	d003      	beq.n	800d26a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800d262:	2303      	movs	r3, #3
 800d264:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800d268:	e0a7      	b.n	800d3ba <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d26e:	b29b      	uxth	r3, r3
 800d270:	2b00      	cmp	r3, #0
 800d272:	d1a6      	bne.n	800d1c2 <HAL_SPI_TransmitReceive+0x130>
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d278:	b29b      	uxth	r3, r3
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d1a1      	bne.n	800d1c2 <HAL_SPI_TransmitReceive+0x130>
 800d27e:	e07c      	b.n	800d37a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	685b      	ldr	r3, [r3, #4]
 800d284:	2b00      	cmp	r3, #0
 800d286:	d002      	beq.n	800d28e <HAL_SPI_TransmitReceive+0x1fc>
 800d288:	8b7b      	ldrh	r3, [r7, #26]
 800d28a:	2b01      	cmp	r3, #1
 800d28c:	d16b      	bne.n	800d366 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	330c      	adds	r3, #12
 800d298:	7812      	ldrb	r2, [r2, #0]
 800d29a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d2a0:	1c5a      	adds	r2, r3, #1
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d2aa:	b29b      	uxth	r3, r3
 800d2ac:	3b01      	subs	r3, #1
 800d2ae:	b29a      	uxth	r2, r3
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d2b4:	e057      	b.n	800d366 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	689b      	ldr	r3, [r3, #8]
 800d2bc:	f003 0302 	and.w	r3, r3, #2
 800d2c0:	2b02      	cmp	r3, #2
 800d2c2:	d11c      	bne.n	800d2fe <HAL_SPI_TransmitReceive+0x26c>
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d2c8:	b29b      	uxth	r3, r3
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d017      	beq.n	800d2fe <HAL_SPI_TransmitReceive+0x26c>
 800d2ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2d0:	2b01      	cmp	r3, #1
 800d2d2:	d114      	bne.n	800d2fe <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	681b      	ldr	r3, [r3, #0]
 800d2dc:	330c      	adds	r3, #12
 800d2de:	7812      	ldrb	r2, [r2, #0]
 800d2e0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d2e6:	1c5a      	adds	r2, r3, #1
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d2f0:	b29b      	uxth	r3, r3
 800d2f2:	3b01      	subs	r3, #1
 800d2f4:	b29a      	uxth	r2, r3
 800d2f6:	68fb      	ldr	r3, [r7, #12]
 800d2f8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800d2fa:	2300      	movs	r3, #0
 800d2fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	689b      	ldr	r3, [r3, #8]
 800d304:	f003 0301 	and.w	r3, r3, #1
 800d308:	2b01      	cmp	r3, #1
 800d30a:	d119      	bne.n	800d340 <HAL_SPI_TransmitReceive+0x2ae>
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d310:	b29b      	uxth	r3, r3
 800d312:	2b00      	cmp	r3, #0
 800d314:	d014      	beq.n	800d340 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	68da      	ldr	r2, [r3, #12]
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d320:	b2d2      	uxtb	r2, r2
 800d322:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d328:	1c5a      	adds	r2, r3, #1
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d332:	b29b      	uxth	r3, r3
 800d334:	3b01      	subs	r3, #1
 800d336:	b29a      	uxth	r2, r3
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800d33c:	2301      	movs	r3, #1
 800d33e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800d340:	f7fb f818 	bl	8008374 <HAL_GetTick>
 800d344:	4602      	mov	r2, r0
 800d346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d348:	1ad3      	subs	r3, r2, r3
 800d34a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d34c:	429a      	cmp	r2, r3
 800d34e:	d803      	bhi.n	800d358 <HAL_SPI_TransmitReceive+0x2c6>
 800d350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d352:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d356:	d102      	bne.n	800d35e <HAL_SPI_TransmitReceive+0x2cc>
 800d358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d103      	bne.n	800d366 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800d35e:	2303      	movs	r3, #3
 800d360:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800d364:	e029      	b.n	800d3ba <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800d36a:	b29b      	uxth	r3, r3
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d1a2      	bne.n	800d2b6 <HAL_SPI_TransmitReceive+0x224>
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800d374:	b29b      	uxth	r3, r3
 800d376:	2b00      	cmp	r3, #0
 800d378:	d19d      	bne.n	800d2b6 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d37a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d37c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d37e:	68f8      	ldr	r0, [r7, #12]
 800d380:	f000 f8f8 	bl	800d574 <SPI_EndRxTxTransaction>
 800d384:	4603      	mov	r3, r0
 800d386:	2b00      	cmp	r3, #0
 800d388:	d006      	beq.n	800d398 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800d38a:	2301      	movs	r3, #1
 800d38c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	2220      	movs	r2, #32
 800d394:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800d396:	e010      	b.n	800d3ba <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	689b      	ldr	r3, [r3, #8]
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d10b      	bne.n	800d3b8 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d3a0:	2300      	movs	r3, #0
 800d3a2:	617b      	str	r3, [r7, #20]
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	68db      	ldr	r3, [r3, #12]
 800d3aa:	617b      	str	r3, [r7, #20]
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	689b      	ldr	r3, [r3, #8]
 800d3b2:	617b      	str	r3, [r7, #20]
 800d3b4:	697b      	ldr	r3, [r7, #20]
 800d3b6:	e000      	b.n	800d3ba <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800d3b8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	2201      	movs	r2, #1
 800d3be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	2200      	movs	r2, #0
 800d3c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800d3ca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800d3ce:	4618      	mov	r0, r3
 800d3d0:	3730      	adds	r7, #48	; 0x30
 800d3d2:	46bd      	mov	sp, r7
 800d3d4:	bd80      	pop	{r7, pc}

0800d3d6 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800d3d6:	b580      	push	{r7, lr}
 800d3d8:	b084      	sub	sp, #16
 800d3da:	af00      	add	r7, sp, #0
 800d3dc:	60f8      	str	r0, [r7, #12]
 800d3de:	60b9      	str	r1, [r7, #8]
 800d3e0:	603b      	str	r3, [r7, #0]
 800d3e2:	4613      	mov	r3, r2
 800d3e4:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d3e6:	e04c      	b.n	800d482 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800d3e8:	683b      	ldr	r3, [r7, #0]
 800d3ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3ee:	d048      	beq.n	800d482 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800d3f0:	f7fa ffc0 	bl	8008374 <HAL_GetTick>
 800d3f4:	4602      	mov	r2, r0
 800d3f6:	69bb      	ldr	r3, [r7, #24]
 800d3f8:	1ad3      	subs	r3, r2, r3
 800d3fa:	683a      	ldr	r2, [r7, #0]
 800d3fc:	429a      	cmp	r2, r3
 800d3fe:	d902      	bls.n	800d406 <SPI_WaitFlagStateUntilTimeout+0x30>
 800d400:	683b      	ldr	r3, [r7, #0]
 800d402:	2b00      	cmp	r3, #0
 800d404:	d13d      	bne.n	800d482 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	681b      	ldr	r3, [r3, #0]
 800d40a:	685a      	ldr	r2, [r3, #4]
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800d414:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	685b      	ldr	r3, [r3, #4]
 800d41a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d41e:	d111      	bne.n	800d444 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	689b      	ldr	r3, [r3, #8]
 800d424:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d428:	d004      	beq.n	800d434 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	689b      	ldr	r3, [r3, #8]
 800d42e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d432:	d107      	bne.n	800d444 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	681a      	ldr	r2, [r3, #0]
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d442:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d448:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d44c:	d10f      	bne.n	800d46e <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	681a      	ldr	r2, [r3, #0]
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d45c:	601a      	str	r2, [r3, #0]
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	681b      	ldr	r3, [r3, #0]
 800d462:	681a      	ldr	r2, [r3, #0]
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d46c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	2201      	movs	r2, #1
 800d472:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	2200      	movs	r2, #0
 800d47a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800d47e:	2303      	movs	r3, #3
 800d480:	e00f      	b.n	800d4a2 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	689a      	ldr	r2, [r3, #8]
 800d488:	68bb      	ldr	r3, [r7, #8]
 800d48a:	4013      	ands	r3, r2
 800d48c:	68ba      	ldr	r2, [r7, #8]
 800d48e:	429a      	cmp	r2, r3
 800d490:	bf0c      	ite	eq
 800d492:	2301      	moveq	r3, #1
 800d494:	2300      	movne	r3, #0
 800d496:	b2db      	uxtb	r3, r3
 800d498:	461a      	mov	r2, r3
 800d49a:	79fb      	ldrb	r3, [r7, #7]
 800d49c:	429a      	cmp	r2, r3
 800d49e:	d1a3      	bne.n	800d3e8 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800d4a0:	2300      	movs	r3, #0
}
 800d4a2:	4618      	mov	r0, r3
 800d4a4:	3710      	adds	r7, #16
 800d4a6:	46bd      	mov	sp, r7
 800d4a8:	bd80      	pop	{r7, pc}

0800d4aa <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800d4aa:	b580      	push	{r7, lr}
 800d4ac:	b086      	sub	sp, #24
 800d4ae:	af02      	add	r7, sp, #8
 800d4b0:	60f8      	str	r0, [r7, #12]
 800d4b2:	60b9      	str	r1, [r7, #8]
 800d4b4:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	685b      	ldr	r3, [r3, #4]
 800d4ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d4be:	d111      	bne.n	800d4e4 <SPI_EndRxTransaction+0x3a>
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	689b      	ldr	r3, [r3, #8]
 800d4c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d4c8:	d004      	beq.n	800d4d4 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	689b      	ldr	r3, [r3, #8]
 800d4ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d4d2:	d107      	bne.n	800d4e4 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	681a      	ldr	r2, [r3, #0]
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d4e2:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	685b      	ldr	r3, [r3, #4]
 800d4e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d4ec:	d12a      	bne.n	800d544 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	689b      	ldr	r3, [r3, #8]
 800d4f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d4f6:	d012      	beq.n	800d51e <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	9300      	str	r3, [sp, #0]
 800d4fc:	68bb      	ldr	r3, [r7, #8]
 800d4fe:	2200      	movs	r2, #0
 800d500:	2180      	movs	r1, #128	; 0x80
 800d502:	68f8      	ldr	r0, [r7, #12]
 800d504:	f7ff ff67 	bl	800d3d6 <SPI_WaitFlagStateUntilTimeout>
 800d508:	4603      	mov	r3, r0
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	d02d      	beq.n	800d56a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d512:	f043 0220 	orr.w	r2, r3, #32
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800d51a:	2303      	movs	r3, #3
 800d51c:	e026      	b.n	800d56c <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	9300      	str	r3, [sp, #0]
 800d522:	68bb      	ldr	r3, [r7, #8]
 800d524:	2200      	movs	r2, #0
 800d526:	2101      	movs	r1, #1
 800d528:	68f8      	ldr	r0, [r7, #12]
 800d52a:	f7ff ff54 	bl	800d3d6 <SPI_WaitFlagStateUntilTimeout>
 800d52e:	4603      	mov	r3, r0
 800d530:	2b00      	cmp	r3, #0
 800d532:	d01a      	beq.n	800d56a <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d538:	f043 0220 	orr.w	r2, r3, #32
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800d540:	2303      	movs	r3, #3
 800d542:	e013      	b.n	800d56c <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	9300      	str	r3, [sp, #0]
 800d548:	68bb      	ldr	r3, [r7, #8]
 800d54a:	2200      	movs	r2, #0
 800d54c:	2101      	movs	r1, #1
 800d54e:	68f8      	ldr	r0, [r7, #12]
 800d550:	f7ff ff41 	bl	800d3d6 <SPI_WaitFlagStateUntilTimeout>
 800d554:	4603      	mov	r3, r0
 800d556:	2b00      	cmp	r3, #0
 800d558:	d007      	beq.n	800d56a <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d55e:	f043 0220 	orr.w	r2, r3, #32
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800d566:	2303      	movs	r3, #3
 800d568:	e000      	b.n	800d56c <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800d56a:	2300      	movs	r3, #0
}
 800d56c:	4618      	mov	r0, r3
 800d56e:	3710      	adds	r7, #16
 800d570:	46bd      	mov	sp, r7
 800d572:	bd80      	pop	{r7, pc}

0800d574 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800d574:	b580      	push	{r7, lr}
 800d576:	b088      	sub	sp, #32
 800d578:	af02      	add	r7, sp, #8
 800d57a:	60f8      	str	r0, [r7, #12]
 800d57c:	60b9      	str	r1, [r7, #8]
 800d57e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800d580:	4b1b      	ldr	r3, [pc, #108]	; (800d5f0 <SPI_EndRxTxTransaction+0x7c>)
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	4a1b      	ldr	r2, [pc, #108]	; (800d5f4 <SPI_EndRxTxTransaction+0x80>)
 800d586:	fba2 2303 	umull	r2, r3, r2, r3
 800d58a:	0d5b      	lsrs	r3, r3, #21
 800d58c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d590:	fb02 f303 	mul.w	r3, r2, r3
 800d594:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	685b      	ldr	r3, [r3, #4]
 800d59a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d59e:	d112      	bne.n	800d5c6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	9300      	str	r3, [sp, #0]
 800d5a4:	68bb      	ldr	r3, [r7, #8]
 800d5a6:	2200      	movs	r2, #0
 800d5a8:	2180      	movs	r1, #128	; 0x80
 800d5aa:	68f8      	ldr	r0, [r7, #12]
 800d5ac:	f7ff ff13 	bl	800d3d6 <SPI_WaitFlagStateUntilTimeout>
 800d5b0:	4603      	mov	r3, r0
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d016      	beq.n	800d5e4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d5ba:	f043 0220 	orr.w	r2, r3, #32
 800d5be:	68fb      	ldr	r3, [r7, #12]
 800d5c0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800d5c2:	2303      	movs	r3, #3
 800d5c4:	e00f      	b.n	800d5e6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800d5c6:	697b      	ldr	r3, [r7, #20]
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d00a      	beq.n	800d5e2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800d5cc:	697b      	ldr	r3, [r7, #20]
 800d5ce:	3b01      	subs	r3, #1
 800d5d0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	689b      	ldr	r3, [r3, #8]
 800d5d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d5dc:	2b80      	cmp	r3, #128	; 0x80
 800d5de:	d0f2      	beq.n	800d5c6 <SPI_EndRxTxTransaction+0x52>
 800d5e0:	e000      	b.n	800d5e4 <SPI_EndRxTxTransaction+0x70>
        break;
 800d5e2:	bf00      	nop
  }

  return HAL_OK;
 800d5e4:	2300      	movs	r3, #0
}
 800d5e6:	4618      	mov	r0, r3
 800d5e8:	3718      	adds	r7, #24
 800d5ea:	46bd      	mov	sp, r7
 800d5ec:	bd80      	pop	{r7, pc}
 800d5ee:	bf00      	nop
 800d5f0:	20000000 	.word	0x20000000
 800d5f4:	165e9f81 	.word	0x165e9f81

0800d5f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d5f8:	b580      	push	{r7, lr}
 800d5fa:	b082      	sub	sp, #8
 800d5fc:	af00      	add	r7, sp, #0
 800d5fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	2b00      	cmp	r3, #0
 800d604:	d101      	bne.n	800d60a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d606:	2301      	movs	r3, #1
 800d608:	e01d      	b.n	800d646 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d610:	b2db      	uxtb	r3, r3
 800d612:	2b00      	cmp	r3, #0
 800d614:	d106      	bne.n	800d624 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	2200      	movs	r2, #0
 800d61a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d61e:	6878      	ldr	r0, [r7, #4]
 800d620:	f7f9 f8c8 	bl	80067b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	2202      	movs	r2, #2
 800d628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	681a      	ldr	r2, [r3, #0]
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	3304      	adds	r3, #4
 800d634:	4619      	mov	r1, r3
 800d636:	4610      	mov	r0, r2
 800d638:	f000 fb56 	bl	800dce8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	2201      	movs	r2, #1
 800d640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d644:	2300      	movs	r3, #0
}
 800d646:	4618      	mov	r0, r3
 800d648:	3708      	adds	r7, #8
 800d64a:	46bd      	mov	sp, r7
 800d64c:	bd80      	pop	{r7, pc}

0800d64e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d64e:	b480      	push	{r7}
 800d650:	b085      	sub	sp, #20
 800d652:	af00      	add	r7, sp, #0
 800d654:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	68da      	ldr	r2, [r3, #12]
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	f042 0201 	orr.w	r2, r2, #1
 800d664:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	689b      	ldr	r3, [r3, #8]
 800d66c:	f003 0307 	and.w	r3, r3, #7
 800d670:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	2b06      	cmp	r3, #6
 800d676:	d007      	beq.n	800d688 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	681a      	ldr	r2, [r3, #0]
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	f042 0201 	orr.w	r2, r2, #1
 800d686:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d688:	2300      	movs	r3, #0
}
 800d68a:	4618      	mov	r0, r3
 800d68c:	3714      	adds	r7, #20
 800d68e:	46bd      	mov	sp, r7
 800d690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d694:	4770      	bx	lr

0800d696 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d696:	b580      	push	{r7, lr}
 800d698:	b082      	sub	sp, #8
 800d69a:	af00      	add	r7, sp, #0
 800d69c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d101      	bne.n	800d6a8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d6a4:	2301      	movs	r3, #1
 800d6a6:	e01d      	b.n	800d6e4 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d6ae:	b2db      	uxtb	r3, r3
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d106      	bne.n	800d6c2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	2200      	movs	r2, #0
 800d6b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d6bc:	6878      	ldr	r0, [r7, #4]
 800d6be:	f7f9 f805 	bl	80066cc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	2202      	movs	r2, #2
 800d6c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	681a      	ldr	r2, [r3, #0]
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	3304      	adds	r3, #4
 800d6d2:	4619      	mov	r1, r3
 800d6d4:	4610      	mov	r0, r2
 800d6d6:	f000 fb07 	bl	800dce8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	2201      	movs	r2, #1
 800d6de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d6e2:	2300      	movs	r3, #0
}
 800d6e4:	4618      	mov	r0, r3
 800d6e6:	3708      	adds	r7, #8
 800d6e8:	46bd      	mov	sp, r7
 800d6ea:	bd80      	pop	{r7, pc}

0800d6ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d6ec:	b580      	push	{r7, lr}
 800d6ee:	b084      	sub	sp, #16
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	6078      	str	r0, [r7, #4]
 800d6f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	2201      	movs	r2, #1
 800d6fc:	6839      	ldr	r1, [r7, #0]
 800d6fe:	4618      	mov	r0, r3
 800d700:	f000 fd42 	bl	800e188 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	4a15      	ldr	r2, [pc, #84]	; (800d760 <HAL_TIM_PWM_Start+0x74>)
 800d70a:	4293      	cmp	r3, r2
 800d70c:	d004      	beq.n	800d718 <HAL_TIM_PWM_Start+0x2c>
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	4a14      	ldr	r2, [pc, #80]	; (800d764 <HAL_TIM_PWM_Start+0x78>)
 800d714:	4293      	cmp	r3, r2
 800d716:	d101      	bne.n	800d71c <HAL_TIM_PWM_Start+0x30>
 800d718:	2301      	movs	r3, #1
 800d71a:	e000      	b.n	800d71e <HAL_TIM_PWM_Start+0x32>
 800d71c:	2300      	movs	r3, #0
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d007      	beq.n	800d732 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d730:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	689b      	ldr	r3, [r3, #8]
 800d738:	f003 0307 	and.w	r3, r3, #7
 800d73c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	2b06      	cmp	r3, #6
 800d742:	d007      	beq.n	800d754 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	681a      	ldr	r2, [r3, #0]
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	f042 0201 	orr.w	r2, r2, #1
 800d752:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d754:	2300      	movs	r3, #0
}
 800d756:	4618      	mov	r0, r3
 800d758:	3710      	adds	r7, #16
 800d75a:	46bd      	mov	sp, r7
 800d75c:	bd80      	pop	{r7, pc}
 800d75e:	bf00      	nop
 800d760:	40010000 	.word	0x40010000
 800d764:	40010400 	.word	0x40010400

0800d768 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800d768:	b580      	push	{r7, lr}
 800d76a:	b086      	sub	sp, #24
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	6078      	str	r0, [r7, #4]
 800d770:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	2b00      	cmp	r3, #0
 800d776:	d101      	bne.n	800d77c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800d778:	2301      	movs	r3, #1
 800d77a:	e083      	b.n	800d884 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d782:	b2db      	uxtb	r3, r3
 800d784:	2b00      	cmp	r3, #0
 800d786:	d106      	bne.n	800d796 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	2200      	movs	r2, #0
 800d78c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800d790:	6878      	ldr	r0, [r7, #4]
 800d792:	f7f9 f89f 	bl	80068d4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	2202      	movs	r2, #2
 800d79a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	689b      	ldr	r3, [r3, #8]
 800d7a4:	687a      	ldr	r2, [r7, #4]
 800d7a6:	6812      	ldr	r2, [r2, #0]
 800d7a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d7ac:	f023 0307 	bic.w	r3, r3, #7
 800d7b0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	681a      	ldr	r2, [r3, #0]
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	3304      	adds	r3, #4
 800d7ba:	4619      	mov	r1, r3
 800d7bc:	4610      	mov	r0, r2
 800d7be:	f000 fa93 	bl	800dce8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	689b      	ldr	r3, [r3, #8]
 800d7c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	699b      	ldr	r3, [r3, #24]
 800d7d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	6a1b      	ldr	r3, [r3, #32]
 800d7d8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800d7da:	683b      	ldr	r3, [r7, #0]
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	697a      	ldr	r2, [r7, #20]
 800d7e0:	4313      	orrs	r3, r2
 800d7e2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800d7e4:	693b      	ldr	r3, [r7, #16]
 800d7e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d7ea:	f023 0303 	bic.w	r3, r3, #3
 800d7ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800d7f0:	683b      	ldr	r3, [r7, #0]
 800d7f2:	689a      	ldr	r2, [r3, #8]
 800d7f4:	683b      	ldr	r3, [r7, #0]
 800d7f6:	699b      	ldr	r3, [r3, #24]
 800d7f8:	021b      	lsls	r3, r3, #8
 800d7fa:	4313      	orrs	r3, r2
 800d7fc:	693a      	ldr	r2, [r7, #16]
 800d7fe:	4313      	orrs	r3, r2
 800d800:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800d802:	693b      	ldr	r3, [r7, #16]
 800d804:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800d808:	f023 030c 	bic.w	r3, r3, #12
 800d80c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800d80e:	693b      	ldr	r3, [r7, #16]
 800d810:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d814:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d818:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800d81a:	683b      	ldr	r3, [r7, #0]
 800d81c:	68da      	ldr	r2, [r3, #12]
 800d81e:	683b      	ldr	r3, [r7, #0]
 800d820:	69db      	ldr	r3, [r3, #28]
 800d822:	021b      	lsls	r3, r3, #8
 800d824:	4313      	orrs	r3, r2
 800d826:	693a      	ldr	r2, [r7, #16]
 800d828:	4313      	orrs	r3, r2
 800d82a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800d82c:	683b      	ldr	r3, [r7, #0]
 800d82e:	691b      	ldr	r3, [r3, #16]
 800d830:	011a      	lsls	r2, r3, #4
 800d832:	683b      	ldr	r3, [r7, #0]
 800d834:	6a1b      	ldr	r3, [r3, #32]
 800d836:	031b      	lsls	r3, r3, #12
 800d838:	4313      	orrs	r3, r2
 800d83a:	693a      	ldr	r2, [r7, #16]
 800d83c:	4313      	orrs	r3, r2
 800d83e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800d840:	68fb      	ldr	r3, [r7, #12]
 800d842:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800d846:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800d84e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800d850:	683b      	ldr	r3, [r7, #0]
 800d852:	685a      	ldr	r2, [r3, #4]
 800d854:	683b      	ldr	r3, [r7, #0]
 800d856:	695b      	ldr	r3, [r3, #20]
 800d858:	011b      	lsls	r3, r3, #4
 800d85a:	4313      	orrs	r3, r2
 800d85c:	68fa      	ldr	r2, [r7, #12]
 800d85e:	4313      	orrs	r3, r2
 800d860:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	697a      	ldr	r2, [r7, #20]
 800d868:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	693a      	ldr	r2, [r7, #16]
 800d870:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	681b      	ldr	r3, [r3, #0]
 800d876:	68fa      	ldr	r2, [r7, #12]
 800d878:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	2201      	movs	r2, #1
 800d87e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d882:	2300      	movs	r3, #0
}
 800d884:	4618      	mov	r0, r3
 800d886:	3718      	adds	r7, #24
 800d888:	46bd      	mov	sp, r7
 800d88a:	bd80      	pop	{r7, pc}

0800d88c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d88c:	b580      	push	{r7, lr}
 800d88e:	b082      	sub	sp, #8
 800d890:	af00      	add	r7, sp, #0
 800d892:	6078      	str	r0, [r7, #4]
 800d894:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800d896:	683b      	ldr	r3, [r7, #0]
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d002      	beq.n	800d8a2 <HAL_TIM_Encoder_Start+0x16>
 800d89c:	2b04      	cmp	r3, #4
 800d89e:	d008      	beq.n	800d8b2 <HAL_TIM_Encoder_Start+0x26>
 800d8a0:	e00f      	b.n	800d8c2 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	2201      	movs	r2, #1
 800d8a8:	2100      	movs	r1, #0
 800d8aa:	4618      	mov	r0, r3
 800d8ac:	f000 fc6c 	bl	800e188 <TIM_CCxChannelCmd>
      break;
 800d8b0:	e016      	b.n	800d8e0 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	2201      	movs	r2, #1
 800d8b8:	2104      	movs	r1, #4
 800d8ba:	4618      	mov	r0, r3
 800d8bc:	f000 fc64 	bl	800e188 <TIM_CCxChannelCmd>
      break;
 800d8c0:	e00e      	b.n	800d8e0 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	2201      	movs	r2, #1
 800d8c8:	2100      	movs	r1, #0
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	f000 fc5c 	bl	800e188 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	2201      	movs	r2, #1
 800d8d6:	2104      	movs	r1, #4
 800d8d8:	4618      	mov	r0, r3
 800d8da:	f000 fc55 	bl	800e188 <TIM_CCxChannelCmd>
      break;
 800d8de:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	681a      	ldr	r2, [r3, #0]
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	f042 0201 	orr.w	r2, r2, #1
 800d8ee:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800d8f0:	2300      	movs	r3, #0
}
 800d8f2:	4618      	mov	r0, r3
 800d8f4:	3708      	adds	r7, #8
 800d8f6:	46bd      	mov	sp, r7
 800d8f8:	bd80      	pop	{r7, pc}

0800d8fa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d8fa:	b580      	push	{r7, lr}
 800d8fc:	b082      	sub	sp, #8
 800d8fe:	af00      	add	r7, sp, #0
 800d900:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	691b      	ldr	r3, [r3, #16]
 800d908:	f003 0302 	and.w	r3, r3, #2
 800d90c:	2b02      	cmp	r3, #2
 800d90e:	d122      	bne.n	800d956 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	68db      	ldr	r3, [r3, #12]
 800d916:	f003 0302 	and.w	r3, r3, #2
 800d91a:	2b02      	cmp	r3, #2
 800d91c:	d11b      	bne.n	800d956 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	f06f 0202 	mvn.w	r2, #2
 800d926:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	2201      	movs	r2, #1
 800d92c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	699b      	ldr	r3, [r3, #24]
 800d934:	f003 0303 	and.w	r3, r3, #3
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d003      	beq.n	800d944 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d93c:	6878      	ldr	r0, [r7, #4]
 800d93e:	f000 f9b5 	bl	800dcac <HAL_TIM_IC_CaptureCallback>
 800d942:	e005      	b.n	800d950 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d944:	6878      	ldr	r0, [r7, #4]
 800d946:	f000 f9a7 	bl	800dc98 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d94a:	6878      	ldr	r0, [r7, #4]
 800d94c:	f000 f9b8 	bl	800dcc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	2200      	movs	r2, #0
 800d954:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	691b      	ldr	r3, [r3, #16]
 800d95c:	f003 0304 	and.w	r3, r3, #4
 800d960:	2b04      	cmp	r3, #4
 800d962:	d122      	bne.n	800d9aa <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	68db      	ldr	r3, [r3, #12]
 800d96a:	f003 0304 	and.w	r3, r3, #4
 800d96e:	2b04      	cmp	r3, #4
 800d970:	d11b      	bne.n	800d9aa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	f06f 0204 	mvn.w	r2, #4
 800d97a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	2202      	movs	r2, #2
 800d980:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	699b      	ldr	r3, [r3, #24]
 800d988:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d003      	beq.n	800d998 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d990:	6878      	ldr	r0, [r7, #4]
 800d992:	f000 f98b 	bl	800dcac <HAL_TIM_IC_CaptureCallback>
 800d996:	e005      	b.n	800d9a4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d998:	6878      	ldr	r0, [r7, #4]
 800d99a:	f000 f97d 	bl	800dc98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d99e:	6878      	ldr	r0, [r7, #4]
 800d9a0:	f000 f98e 	bl	800dcc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	2200      	movs	r2, #0
 800d9a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	691b      	ldr	r3, [r3, #16]
 800d9b0:	f003 0308 	and.w	r3, r3, #8
 800d9b4:	2b08      	cmp	r3, #8
 800d9b6:	d122      	bne.n	800d9fe <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	68db      	ldr	r3, [r3, #12]
 800d9be:	f003 0308 	and.w	r3, r3, #8
 800d9c2:	2b08      	cmp	r3, #8
 800d9c4:	d11b      	bne.n	800d9fe <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	f06f 0208 	mvn.w	r2, #8
 800d9ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	2204      	movs	r2, #4
 800d9d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	69db      	ldr	r3, [r3, #28]
 800d9dc:	f003 0303 	and.w	r3, r3, #3
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d003      	beq.n	800d9ec <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d9e4:	6878      	ldr	r0, [r7, #4]
 800d9e6:	f000 f961 	bl	800dcac <HAL_TIM_IC_CaptureCallback>
 800d9ea:	e005      	b.n	800d9f8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d9ec:	6878      	ldr	r0, [r7, #4]
 800d9ee:	f000 f953 	bl	800dc98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d9f2:	6878      	ldr	r0, [r7, #4]
 800d9f4:	f000 f964 	bl	800dcc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	2200      	movs	r2, #0
 800d9fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	691b      	ldr	r3, [r3, #16]
 800da04:	f003 0310 	and.w	r3, r3, #16
 800da08:	2b10      	cmp	r3, #16
 800da0a:	d122      	bne.n	800da52 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	68db      	ldr	r3, [r3, #12]
 800da12:	f003 0310 	and.w	r3, r3, #16
 800da16:	2b10      	cmp	r3, #16
 800da18:	d11b      	bne.n	800da52 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	f06f 0210 	mvn.w	r2, #16
 800da22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	2208      	movs	r2, #8
 800da28:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	69db      	ldr	r3, [r3, #28]
 800da30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800da34:	2b00      	cmp	r3, #0
 800da36:	d003      	beq.n	800da40 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800da38:	6878      	ldr	r0, [r7, #4]
 800da3a:	f000 f937 	bl	800dcac <HAL_TIM_IC_CaptureCallback>
 800da3e:	e005      	b.n	800da4c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800da40:	6878      	ldr	r0, [r7, #4]
 800da42:	f000 f929 	bl	800dc98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800da46:	6878      	ldr	r0, [r7, #4]
 800da48:	f000 f93a 	bl	800dcc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	2200      	movs	r2, #0
 800da50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	691b      	ldr	r3, [r3, #16]
 800da58:	f003 0301 	and.w	r3, r3, #1
 800da5c:	2b01      	cmp	r3, #1
 800da5e:	d10e      	bne.n	800da7e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	68db      	ldr	r3, [r3, #12]
 800da66:	f003 0301 	and.w	r3, r3, #1
 800da6a:	2b01      	cmp	r3, #1
 800da6c:	d107      	bne.n	800da7e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	f06f 0201 	mvn.w	r2, #1
 800da76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800da78:	6878      	ldr	r0, [r7, #4]
 800da7a:	f7f7 fc15 	bl	80052a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	691b      	ldr	r3, [r3, #16]
 800da84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800da88:	2b80      	cmp	r3, #128	; 0x80
 800da8a:	d10e      	bne.n	800daaa <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	68db      	ldr	r3, [r3, #12]
 800da92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800da96:	2b80      	cmp	r3, #128	; 0x80
 800da98:	d107      	bne.n	800daaa <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800daa2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800daa4:	6878      	ldr	r0, [r7, #4]
 800daa6:	f000 fc6d 	bl	800e384 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	691b      	ldr	r3, [r3, #16]
 800dab0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dab4:	2b40      	cmp	r3, #64	; 0x40
 800dab6:	d10e      	bne.n	800dad6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	68db      	ldr	r3, [r3, #12]
 800dabe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dac2:	2b40      	cmp	r3, #64	; 0x40
 800dac4:	d107      	bne.n	800dad6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800dace:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800dad0:	6878      	ldr	r0, [r7, #4]
 800dad2:	f000 f8ff 	bl	800dcd4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	691b      	ldr	r3, [r3, #16]
 800dadc:	f003 0320 	and.w	r3, r3, #32
 800dae0:	2b20      	cmp	r3, #32
 800dae2:	d10e      	bne.n	800db02 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	68db      	ldr	r3, [r3, #12]
 800daea:	f003 0320 	and.w	r3, r3, #32
 800daee:	2b20      	cmp	r3, #32
 800daf0:	d107      	bne.n	800db02 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	681b      	ldr	r3, [r3, #0]
 800daf6:	f06f 0220 	mvn.w	r2, #32
 800dafa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800dafc:	6878      	ldr	r0, [r7, #4]
 800dafe:	f000 fc37 	bl	800e370 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800db02:	bf00      	nop
 800db04:	3708      	adds	r7, #8
 800db06:	46bd      	mov	sp, r7
 800db08:	bd80      	pop	{r7, pc}
	...

0800db0c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800db0c:	b580      	push	{r7, lr}
 800db0e:	b084      	sub	sp, #16
 800db10:	af00      	add	r7, sp, #0
 800db12:	60f8      	str	r0, [r7, #12]
 800db14:	60b9      	str	r1, [r7, #8]
 800db16:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800db1e:	2b01      	cmp	r3, #1
 800db20:	d101      	bne.n	800db26 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800db22:	2302      	movs	r3, #2
 800db24:	e0b4      	b.n	800dc90 <HAL_TIM_PWM_ConfigChannel+0x184>
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	2201      	movs	r2, #1
 800db2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	2202      	movs	r2, #2
 800db32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	2b0c      	cmp	r3, #12
 800db3a:	f200 809f 	bhi.w	800dc7c <HAL_TIM_PWM_ConfigChannel+0x170>
 800db3e:	a201      	add	r2, pc, #4	; (adr r2, 800db44 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800db40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db44:	0800db79 	.word	0x0800db79
 800db48:	0800dc7d 	.word	0x0800dc7d
 800db4c:	0800dc7d 	.word	0x0800dc7d
 800db50:	0800dc7d 	.word	0x0800dc7d
 800db54:	0800dbb9 	.word	0x0800dbb9
 800db58:	0800dc7d 	.word	0x0800dc7d
 800db5c:	0800dc7d 	.word	0x0800dc7d
 800db60:	0800dc7d 	.word	0x0800dc7d
 800db64:	0800dbfb 	.word	0x0800dbfb
 800db68:	0800dc7d 	.word	0x0800dc7d
 800db6c:	0800dc7d 	.word	0x0800dc7d
 800db70:	0800dc7d 	.word	0x0800dc7d
 800db74:	0800dc3b 	.word	0x0800dc3b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	68b9      	ldr	r1, [r7, #8]
 800db7e:	4618      	mov	r0, r3
 800db80:	f000 f952 	bl	800de28 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	699a      	ldr	r2, [r3, #24]
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	f042 0208 	orr.w	r2, r2, #8
 800db92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	699a      	ldr	r2, [r3, #24]
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	f022 0204 	bic.w	r2, r2, #4
 800dba2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	6999      	ldr	r1, [r3, #24]
 800dbaa:	68bb      	ldr	r3, [r7, #8]
 800dbac:	691a      	ldr	r2, [r3, #16]
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	430a      	orrs	r2, r1
 800dbb4:	619a      	str	r2, [r3, #24]
      break;
 800dbb6:	e062      	b.n	800dc7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	68b9      	ldr	r1, [r7, #8]
 800dbbe:	4618      	mov	r0, r3
 800dbc0:	f000 f9a2 	bl	800df08 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	699a      	ldr	r2, [r3, #24]
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dbd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	699a      	ldr	r2, [r3, #24]
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dbe2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	6999      	ldr	r1, [r3, #24]
 800dbea:	68bb      	ldr	r3, [r7, #8]
 800dbec:	691b      	ldr	r3, [r3, #16]
 800dbee:	021a      	lsls	r2, r3, #8
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	430a      	orrs	r2, r1
 800dbf6:	619a      	str	r2, [r3, #24]
      break;
 800dbf8:	e041      	b.n	800dc7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	68b9      	ldr	r1, [r7, #8]
 800dc00:	4618      	mov	r0, r3
 800dc02:	f000 f9f7 	bl	800dff4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	69da      	ldr	r2, [r3, #28]
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	f042 0208 	orr.w	r2, r2, #8
 800dc14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	69da      	ldr	r2, [r3, #28]
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	f022 0204 	bic.w	r2, r2, #4
 800dc24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	69d9      	ldr	r1, [r3, #28]
 800dc2c:	68bb      	ldr	r3, [r7, #8]
 800dc2e:	691a      	ldr	r2, [r3, #16]
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	430a      	orrs	r2, r1
 800dc36:	61da      	str	r2, [r3, #28]
      break;
 800dc38:	e021      	b.n	800dc7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	68b9      	ldr	r1, [r7, #8]
 800dc40:	4618      	mov	r0, r3
 800dc42:	f000 fa4b 	bl	800e0dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	69da      	ldr	r2, [r3, #28]
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dc54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	69da      	ldr	r2, [r3, #28]
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dc64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	69d9      	ldr	r1, [r3, #28]
 800dc6c:	68bb      	ldr	r3, [r7, #8]
 800dc6e:	691b      	ldr	r3, [r3, #16]
 800dc70:	021a      	lsls	r2, r3, #8
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	430a      	orrs	r2, r1
 800dc78:	61da      	str	r2, [r3, #28]
      break;
 800dc7a:	e000      	b.n	800dc7e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800dc7c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	2201      	movs	r2, #1
 800dc82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	2200      	movs	r2, #0
 800dc8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800dc8e:	2300      	movs	r3, #0
}
 800dc90:	4618      	mov	r0, r3
 800dc92:	3710      	adds	r7, #16
 800dc94:	46bd      	mov	sp, r7
 800dc96:	bd80      	pop	{r7, pc}

0800dc98 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800dc98:	b480      	push	{r7}
 800dc9a:	b083      	sub	sp, #12
 800dc9c:	af00      	add	r7, sp, #0
 800dc9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800dca0:	bf00      	nop
 800dca2:	370c      	adds	r7, #12
 800dca4:	46bd      	mov	sp, r7
 800dca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcaa:	4770      	bx	lr

0800dcac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800dcac:	b480      	push	{r7}
 800dcae:	b083      	sub	sp, #12
 800dcb0:	af00      	add	r7, sp, #0
 800dcb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800dcb4:	bf00      	nop
 800dcb6:	370c      	adds	r7, #12
 800dcb8:	46bd      	mov	sp, r7
 800dcba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcbe:	4770      	bx	lr

0800dcc0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800dcc0:	b480      	push	{r7}
 800dcc2:	b083      	sub	sp, #12
 800dcc4:	af00      	add	r7, sp, #0
 800dcc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800dcc8:	bf00      	nop
 800dcca:	370c      	adds	r7, #12
 800dccc:	46bd      	mov	sp, r7
 800dcce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd2:	4770      	bx	lr

0800dcd4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800dcd4:	b480      	push	{r7}
 800dcd6:	b083      	sub	sp, #12
 800dcd8:	af00      	add	r7, sp, #0
 800dcda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800dcdc:	bf00      	nop
 800dcde:	370c      	adds	r7, #12
 800dce0:	46bd      	mov	sp, r7
 800dce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dce6:	4770      	bx	lr

0800dce8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800dce8:	b480      	push	{r7}
 800dcea:	b085      	sub	sp, #20
 800dcec:	af00      	add	r7, sp, #0
 800dcee:	6078      	str	r0, [r7, #4]
 800dcf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	4a40      	ldr	r2, [pc, #256]	; (800ddfc <TIM_Base_SetConfig+0x114>)
 800dcfc:	4293      	cmp	r3, r2
 800dcfe:	d013      	beq.n	800dd28 <TIM_Base_SetConfig+0x40>
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dd06:	d00f      	beq.n	800dd28 <TIM_Base_SetConfig+0x40>
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	4a3d      	ldr	r2, [pc, #244]	; (800de00 <TIM_Base_SetConfig+0x118>)
 800dd0c:	4293      	cmp	r3, r2
 800dd0e:	d00b      	beq.n	800dd28 <TIM_Base_SetConfig+0x40>
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	4a3c      	ldr	r2, [pc, #240]	; (800de04 <TIM_Base_SetConfig+0x11c>)
 800dd14:	4293      	cmp	r3, r2
 800dd16:	d007      	beq.n	800dd28 <TIM_Base_SetConfig+0x40>
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	4a3b      	ldr	r2, [pc, #236]	; (800de08 <TIM_Base_SetConfig+0x120>)
 800dd1c:	4293      	cmp	r3, r2
 800dd1e:	d003      	beq.n	800dd28 <TIM_Base_SetConfig+0x40>
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	4a3a      	ldr	r2, [pc, #232]	; (800de0c <TIM_Base_SetConfig+0x124>)
 800dd24:	4293      	cmp	r3, r2
 800dd26:	d108      	bne.n	800dd3a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dd2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800dd30:	683b      	ldr	r3, [r7, #0]
 800dd32:	685b      	ldr	r3, [r3, #4]
 800dd34:	68fa      	ldr	r2, [r7, #12]
 800dd36:	4313      	orrs	r3, r2
 800dd38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	4a2f      	ldr	r2, [pc, #188]	; (800ddfc <TIM_Base_SetConfig+0x114>)
 800dd3e:	4293      	cmp	r3, r2
 800dd40:	d02b      	beq.n	800dd9a <TIM_Base_SetConfig+0xb2>
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dd48:	d027      	beq.n	800dd9a <TIM_Base_SetConfig+0xb2>
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	4a2c      	ldr	r2, [pc, #176]	; (800de00 <TIM_Base_SetConfig+0x118>)
 800dd4e:	4293      	cmp	r3, r2
 800dd50:	d023      	beq.n	800dd9a <TIM_Base_SetConfig+0xb2>
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	4a2b      	ldr	r2, [pc, #172]	; (800de04 <TIM_Base_SetConfig+0x11c>)
 800dd56:	4293      	cmp	r3, r2
 800dd58:	d01f      	beq.n	800dd9a <TIM_Base_SetConfig+0xb2>
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	4a2a      	ldr	r2, [pc, #168]	; (800de08 <TIM_Base_SetConfig+0x120>)
 800dd5e:	4293      	cmp	r3, r2
 800dd60:	d01b      	beq.n	800dd9a <TIM_Base_SetConfig+0xb2>
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	4a29      	ldr	r2, [pc, #164]	; (800de0c <TIM_Base_SetConfig+0x124>)
 800dd66:	4293      	cmp	r3, r2
 800dd68:	d017      	beq.n	800dd9a <TIM_Base_SetConfig+0xb2>
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	4a28      	ldr	r2, [pc, #160]	; (800de10 <TIM_Base_SetConfig+0x128>)
 800dd6e:	4293      	cmp	r3, r2
 800dd70:	d013      	beq.n	800dd9a <TIM_Base_SetConfig+0xb2>
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	4a27      	ldr	r2, [pc, #156]	; (800de14 <TIM_Base_SetConfig+0x12c>)
 800dd76:	4293      	cmp	r3, r2
 800dd78:	d00f      	beq.n	800dd9a <TIM_Base_SetConfig+0xb2>
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	4a26      	ldr	r2, [pc, #152]	; (800de18 <TIM_Base_SetConfig+0x130>)
 800dd7e:	4293      	cmp	r3, r2
 800dd80:	d00b      	beq.n	800dd9a <TIM_Base_SetConfig+0xb2>
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	4a25      	ldr	r2, [pc, #148]	; (800de1c <TIM_Base_SetConfig+0x134>)
 800dd86:	4293      	cmp	r3, r2
 800dd88:	d007      	beq.n	800dd9a <TIM_Base_SetConfig+0xb2>
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	4a24      	ldr	r2, [pc, #144]	; (800de20 <TIM_Base_SetConfig+0x138>)
 800dd8e:	4293      	cmp	r3, r2
 800dd90:	d003      	beq.n	800dd9a <TIM_Base_SetConfig+0xb2>
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	4a23      	ldr	r2, [pc, #140]	; (800de24 <TIM_Base_SetConfig+0x13c>)
 800dd96:	4293      	cmp	r3, r2
 800dd98:	d108      	bne.n	800ddac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dda0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800dda2:	683b      	ldr	r3, [r7, #0]
 800dda4:	68db      	ldr	r3, [r3, #12]
 800dda6:	68fa      	ldr	r2, [r7, #12]
 800dda8:	4313      	orrs	r3, r2
 800ddaa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ddb2:	683b      	ldr	r3, [r7, #0]
 800ddb4:	695b      	ldr	r3, [r3, #20]
 800ddb6:	4313      	orrs	r3, r2
 800ddb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	68fa      	ldr	r2, [r7, #12]
 800ddbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ddc0:	683b      	ldr	r3, [r7, #0]
 800ddc2:	689a      	ldr	r2, [r3, #8]
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ddc8:	683b      	ldr	r3, [r7, #0]
 800ddca:	681a      	ldr	r2, [r3, #0]
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	4a0a      	ldr	r2, [pc, #40]	; (800ddfc <TIM_Base_SetConfig+0x114>)
 800ddd4:	4293      	cmp	r3, r2
 800ddd6:	d003      	beq.n	800dde0 <TIM_Base_SetConfig+0xf8>
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	4a0c      	ldr	r2, [pc, #48]	; (800de0c <TIM_Base_SetConfig+0x124>)
 800dddc:	4293      	cmp	r3, r2
 800ddde:	d103      	bne.n	800dde8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800dde0:	683b      	ldr	r3, [r7, #0]
 800dde2:	691a      	ldr	r2, [r3, #16]
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	2201      	movs	r2, #1
 800ddec:	615a      	str	r2, [r3, #20]
}
 800ddee:	bf00      	nop
 800ddf0:	3714      	adds	r7, #20
 800ddf2:	46bd      	mov	sp, r7
 800ddf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf8:	4770      	bx	lr
 800ddfa:	bf00      	nop
 800ddfc:	40010000 	.word	0x40010000
 800de00:	40000400 	.word	0x40000400
 800de04:	40000800 	.word	0x40000800
 800de08:	40000c00 	.word	0x40000c00
 800de0c:	40010400 	.word	0x40010400
 800de10:	40014000 	.word	0x40014000
 800de14:	40014400 	.word	0x40014400
 800de18:	40014800 	.word	0x40014800
 800de1c:	40001800 	.word	0x40001800
 800de20:	40001c00 	.word	0x40001c00
 800de24:	40002000 	.word	0x40002000

0800de28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800de28:	b480      	push	{r7}
 800de2a:	b087      	sub	sp, #28
 800de2c:	af00      	add	r7, sp, #0
 800de2e:	6078      	str	r0, [r7, #4]
 800de30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	6a1b      	ldr	r3, [r3, #32]
 800de36:	f023 0201 	bic.w	r2, r3, #1
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	6a1b      	ldr	r3, [r3, #32]
 800de42:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	685b      	ldr	r3, [r3, #4]
 800de48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	699b      	ldr	r3, [r3, #24]
 800de4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800de56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	f023 0303 	bic.w	r3, r3, #3
 800de5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800de60:	683b      	ldr	r3, [r7, #0]
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	68fa      	ldr	r2, [r7, #12]
 800de66:	4313      	orrs	r3, r2
 800de68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800de6a:	697b      	ldr	r3, [r7, #20]
 800de6c:	f023 0302 	bic.w	r3, r3, #2
 800de70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800de72:	683b      	ldr	r3, [r7, #0]
 800de74:	689b      	ldr	r3, [r3, #8]
 800de76:	697a      	ldr	r2, [r7, #20]
 800de78:	4313      	orrs	r3, r2
 800de7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	4a20      	ldr	r2, [pc, #128]	; (800df00 <TIM_OC1_SetConfig+0xd8>)
 800de80:	4293      	cmp	r3, r2
 800de82:	d003      	beq.n	800de8c <TIM_OC1_SetConfig+0x64>
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	4a1f      	ldr	r2, [pc, #124]	; (800df04 <TIM_OC1_SetConfig+0xdc>)
 800de88:	4293      	cmp	r3, r2
 800de8a:	d10c      	bne.n	800dea6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800de8c:	697b      	ldr	r3, [r7, #20]
 800de8e:	f023 0308 	bic.w	r3, r3, #8
 800de92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800de94:	683b      	ldr	r3, [r7, #0]
 800de96:	68db      	ldr	r3, [r3, #12]
 800de98:	697a      	ldr	r2, [r7, #20]
 800de9a:	4313      	orrs	r3, r2
 800de9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800de9e:	697b      	ldr	r3, [r7, #20]
 800dea0:	f023 0304 	bic.w	r3, r3, #4
 800dea4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	4a15      	ldr	r2, [pc, #84]	; (800df00 <TIM_OC1_SetConfig+0xd8>)
 800deaa:	4293      	cmp	r3, r2
 800deac:	d003      	beq.n	800deb6 <TIM_OC1_SetConfig+0x8e>
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	4a14      	ldr	r2, [pc, #80]	; (800df04 <TIM_OC1_SetConfig+0xdc>)
 800deb2:	4293      	cmp	r3, r2
 800deb4:	d111      	bne.n	800deda <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800deb6:	693b      	ldr	r3, [r7, #16]
 800deb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800debc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800debe:	693b      	ldr	r3, [r7, #16]
 800dec0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800dec4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800dec6:	683b      	ldr	r3, [r7, #0]
 800dec8:	695b      	ldr	r3, [r3, #20]
 800deca:	693a      	ldr	r2, [r7, #16]
 800decc:	4313      	orrs	r3, r2
 800dece:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ded0:	683b      	ldr	r3, [r7, #0]
 800ded2:	699b      	ldr	r3, [r3, #24]
 800ded4:	693a      	ldr	r2, [r7, #16]
 800ded6:	4313      	orrs	r3, r2
 800ded8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	693a      	ldr	r2, [r7, #16]
 800dede:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	68fa      	ldr	r2, [r7, #12]
 800dee4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800dee6:	683b      	ldr	r3, [r7, #0]
 800dee8:	685a      	ldr	r2, [r3, #4]
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	697a      	ldr	r2, [r7, #20]
 800def2:	621a      	str	r2, [r3, #32]
}
 800def4:	bf00      	nop
 800def6:	371c      	adds	r7, #28
 800def8:	46bd      	mov	sp, r7
 800defa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800defe:	4770      	bx	lr
 800df00:	40010000 	.word	0x40010000
 800df04:	40010400 	.word	0x40010400

0800df08 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800df08:	b480      	push	{r7}
 800df0a:	b087      	sub	sp, #28
 800df0c:	af00      	add	r7, sp, #0
 800df0e:	6078      	str	r0, [r7, #4]
 800df10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	6a1b      	ldr	r3, [r3, #32]
 800df16:	f023 0210 	bic.w	r2, r3, #16
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	6a1b      	ldr	r3, [r3, #32]
 800df22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	685b      	ldr	r3, [r3, #4]
 800df28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	699b      	ldr	r3, [r3, #24]
 800df2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800df30:	68fb      	ldr	r3, [r7, #12]
 800df32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800df36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800df3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800df40:	683b      	ldr	r3, [r7, #0]
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	021b      	lsls	r3, r3, #8
 800df46:	68fa      	ldr	r2, [r7, #12]
 800df48:	4313      	orrs	r3, r2
 800df4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800df4c:	697b      	ldr	r3, [r7, #20]
 800df4e:	f023 0320 	bic.w	r3, r3, #32
 800df52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800df54:	683b      	ldr	r3, [r7, #0]
 800df56:	689b      	ldr	r3, [r3, #8]
 800df58:	011b      	lsls	r3, r3, #4
 800df5a:	697a      	ldr	r2, [r7, #20]
 800df5c:	4313      	orrs	r3, r2
 800df5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	4a22      	ldr	r2, [pc, #136]	; (800dfec <TIM_OC2_SetConfig+0xe4>)
 800df64:	4293      	cmp	r3, r2
 800df66:	d003      	beq.n	800df70 <TIM_OC2_SetConfig+0x68>
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	4a21      	ldr	r2, [pc, #132]	; (800dff0 <TIM_OC2_SetConfig+0xe8>)
 800df6c:	4293      	cmp	r3, r2
 800df6e:	d10d      	bne.n	800df8c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800df70:	697b      	ldr	r3, [r7, #20]
 800df72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800df76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800df78:	683b      	ldr	r3, [r7, #0]
 800df7a:	68db      	ldr	r3, [r3, #12]
 800df7c:	011b      	lsls	r3, r3, #4
 800df7e:	697a      	ldr	r2, [r7, #20]
 800df80:	4313      	orrs	r3, r2
 800df82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800df84:	697b      	ldr	r3, [r7, #20]
 800df86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800df8a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	4a17      	ldr	r2, [pc, #92]	; (800dfec <TIM_OC2_SetConfig+0xe4>)
 800df90:	4293      	cmp	r3, r2
 800df92:	d003      	beq.n	800df9c <TIM_OC2_SetConfig+0x94>
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	4a16      	ldr	r2, [pc, #88]	; (800dff0 <TIM_OC2_SetConfig+0xe8>)
 800df98:	4293      	cmp	r3, r2
 800df9a:	d113      	bne.n	800dfc4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800df9c:	693b      	ldr	r3, [r7, #16]
 800df9e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800dfa2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800dfa4:	693b      	ldr	r3, [r7, #16]
 800dfa6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800dfaa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800dfac:	683b      	ldr	r3, [r7, #0]
 800dfae:	695b      	ldr	r3, [r3, #20]
 800dfb0:	009b      	lsls	r3, r3, #2
 800dfb2:	693a      	ldr	r2, [r7, #16]
 800dfb4:	4313      	orrs	r3, r2
 800dfb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800dfb8:	683b      	ldr	r3, [r7, #0]
 800dfba:	699b      	ldr	r3, [r3, #24]
 800dfbc:	009b      	lsls	r3, r3, #2
 800dfbe:	693a      	ldr	r2, [r7, #16]
 800dfc0:	4313      	orrs	r3, r2
 800dfc2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	693a      	ldr	r2, [r7, #16]
 800dfc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	68fa      	ldr	r2, [r7, #12]
 800dfce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800dfd0:	683b      	ldr	r3, [r7, #0]
 800dfd2:	685a      	ldr	r2, [r3, #4]
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	697a      	ldr	r2, [r7, #20]
 800dfdc:	621a      	str	r2, [r3, #32]
}
 800dfde:	bf00      	nop
 800dfe0:	371c      	adds	r7, #28
 800dfe2:	46bd      	mov	sp, r7
 800dfe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfe8:	4770      	bx	lr
 800dfea:	bf00      	nop
 800dfec:	40010000 	.word	0x40010000
 800dff0:	40010400 	.word	0x40010400

0800dff4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800dff4:	b480      	push	{r7}
 800dff6:	b087      	sub	sp, #28
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	6078      	str	r0, [r7, #4]
 800dffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	6a1b      	ldr	r3, [r3, #32]
 800e002:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	6a1b      	ldr	r3, [r3, #32]
 800e00e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	685b      	ldr	r3, [r3, #4]
 800e014:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	69db      	ldr	r3, [r3, #28]
 800e01a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e01c:	68fb      	ldr	r3, [r7, #12]
 800e01e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e022:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	f023 0303 	bic.w	r3, r3, #3
 800e02a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e02c:	683b      	ldr	r3, [r7, #0]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	68fa      	ldr	r2, [r7, #12]
 800e032:	4313      	orrs	r3, r2
 800e034:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e036:	697b      	ldr	r3, [r7, #20]
 800e038:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e03c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e03e:	683b      	ldr	r3, [r7, #0]
 800e040:	689b      	ldr	r3, [r3, #8]
 800e042:	021b      	lsls	r3, r3, #8
 800e044:	697a      	ldr	r2, [r7, #20]
 800e046:	4313      	orrs	r3, r2
 800e048:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	4a21      	ldr	r2, [pc, #132]	; (800e0d4 <TIM_OC3_SetConfig+0xe0>)
 800e04e:	4293      	cmp	r3, r2
 800e050:	d003      	beq.n	800e05a <TIM_OC3_SetConfig+0x66>
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	4a20      	ldr	r2, [pc, #128]	; (800e0d8 <TIM_OC3_SetConfig+0xe4>)
 800e056:	4293      	cmp	r3, r2
 800e058:	d10d      	bne.n	800e076 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e05a:	697b      	ldr	r3, [r7, #20]
 800e05c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e060:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e062:	683b      	ldr	r3, [r7, #0]
 800e064:	68db      	ldr	r3, [r3, #12]
 800e066:	021b      	lsls	r3, r3, #8
 800e068:	697a      	ldr	r2, [r7, #20]
 800e06a:	4313      	orrs	r3, r2
 800e06c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e06e:	697b      	ldr	r3, [r7, #20]
 800e070:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e074:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	4a16      	ldr	r2, [pc, #88]	; (800e0d4 <TIM_OC3_SetConfig+0xe0>)
 800e07a:	4293      	cmp	r3, r2
 800e07c:	d003      	beq.n	800e086 <TIM_OC3_SetConfig+0x92>
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	4a15      	ldr	r2, [pc, #84]	; (800e0d8 <TIM_OC3_SetConfig+0xe4>)
 800e082:	4293      	cmp	r3, r2
 800e084:	d113      	bne.n	800e0ae <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e086:	693b      	ldr	r3, [r7, #16]
 800e088:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e08c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e08e:	693b      	ldr	r3, [r7, #16]
 800e090:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e094:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e096:	683b      	ldr	r3, [r7, #0]
 800e098:	695b      	ldr	r3, [r3, #20]
 800e09a:	011b      	lsls	r3, r3, #4
 800e09c:	693a      	ldr	r2, [r7, #16]
 800e09e:	4313      	orrs	r3, r2
 800e0a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e0a2:	683b      	ldr	r3, [r7, #0]
 800e0a4:	699b      	ldr	r3, [r3, #24]
 800e0a6:	011b      	lsls	r3, r3, #4
 800e0a8:	693a      	ldr	r2, [r7, #16]
 800e0aa:	4313      	orrs	r3, r2
 800e0ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	693a      	ldr	r2, [r7, #16]
 800e0b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	68fa      	ldr	r2, [r7, #12]
 800e0b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e0ba:	683b      	ldr	r3, [r7, #0]
 800e0bc:	685a      	ldr	r2, [r3, #4]
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	697a      	ldr	r2, [r7, #20]
 800e0c6:	621a      	str	r2, [r3, #32]
}
 800e0c8:	bf00      	nop
 800e0ca:	371c      	adds	r7, #28
 800e0cc:	46bd      	mov	sp, r7
 800e0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0d2:	4770      	bx	lr
 800e0d4:	40010000 	.word	0x40010000
 800e0d8:	40010400 	.word	0x40010400

0800e0dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800e0dc:	b480      	push	{r7}
 800e0de:	b087      	sub	sp, #28
 800e0e0:	af00      	add	r7, sp, #0
 800e0e2:	6078      	str	r0, [r7, #4]
 800e0e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	6a1b      	ldr	r3, [r3, #32]
 800e0ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	6a1b      	ldr	r3, [r3, #32]
 800e0f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	685b      	ldr	r3, [r3, #4]
 800e0fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	69db      	ldr	r3, [r3, #28]
 800e102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e10a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e112:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e114:	683b      	ldr	r3, [r7, #0]
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	021b      	lsls	r3, r3, #8
 800e11a:	68fa      	ldr	r2, [r7, #12]
 800e11c:	4313      	orrs	r3, r2
 800e11e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e120:	693b      	ldr	r3, [r7, #16]
 800e122:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e126:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e128:	683b      	ldr	r3, [r7, #0]
 800e12a:	689b      	ldr	r3, [r3, #8]
 800e12c:	031b      	lsls	r3, r3, #12
 800e12e:	693a      	ldr	r2, [r7, #16]
 800e130:	4313      	orrs	r3, r2
 800e132:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	4a12      	ldr	r2, [pc, #72]	; (800e180 <TIM_OC4_SetConfig+0xa4>)
 800e138:	4293      	cmp	r3, r2
 800e13a:	d003      	beq.n	800e144 <TIM_OC4_SetConfig+0x68>
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	4a11      	ldr	r2, [pc, #68]	; (800e184 <TIM_OC4_SetConfig+0xa8>)
 800e140:	4293      	cmp	r3, r2
 800e142:	d109      	bne.n	800e158 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e144:	697b      	ldr	r3, [r7, #20]
 800e146:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e14a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e14c:	683b      	ldr	r3, [r7, #0]
 800e14e:	695b      	ldr	r3, [r3, #20]
 800e150:	019b      	lsls	r3, r3, #6
 800e152:	697a      	ldr	r2, [r7, #20]
 800e154:	4313      	orrs	r3, r2
 800e156:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	697a      	ldr	r2, [r7, #20]
 800e15c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	68fa      	ldr	r2, [r7, #12]
 800e162:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e164:	683b      	ldr	r3, [r7, #0]
 800e166:	685a      	ldr	r2, [r3, #4]
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	693a      	ldr	r2, [r7, #16]
 800e170:	621a      	str	r2, [r3, #32]
}
 800e172:	bf00      	nop
 800e174:	371c      	adds	r7, #28
 800e176:	46bd      	mov	sp, r7
 800e178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e17c:	4770      	bx	lr
 800e17e:	bf00      	nop
 800e180:	40010000 	.word	0x40010000
 800e184:	40010400 	.word	0x40010400

0800e188 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800e188:	b480      	push	{r7}
 800e18a:	b087      	sub	sp, #28
 800e18c:	af00      	add	r7, sp, #0
 800e18e:	60f8      	str	r0, [r7, #12]
 800e190:	60b9      	str	r1, [r7, #8]
 800e192:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800e194:	68bb      	ldr	r3, [r7, #8]
 800e196:	f003 031f 	and.w	r3, r3, #31
 800e19a:	2201      	movs	r2, #1
 800e19c:	fa02 f303 	lsl.w	r3, r2, r3
 800e1a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	6a1a      	ldr	r2, [r3, #32]
 800e1a6:	697b      	ldr	r3, [r7, #20]
 800e1a8:	43db      	mvns	r3, r3
 800e1aa:	401a      	ands	r2, r3
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	6a1a      	ldr	r2, [r3, #32]
 800e1b4:	68bb      	ldr	r3, [r7, #8]
 800e1b6:	f003 031f 	and.w	r3, r3, #31
 800e1ba:	6879      	ldr	r1, [r7, #4]
 800e1bc:	fa01 f303 	lsl.w	r3, r1, r3
 800e1c0:	431a      	orrs	r2, r3
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	621a      	str	r2, [r3, #32]
}
 800e1c6:	bf00      	nop
 800e1c8:	371c      	adds	r7, #28
 800e1ca:	46bd      	mov	sp, r7
 800e1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d0:	4770      	bx	lr
	...

0800e1d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e1d4:	b480      	push	{r7}
 800e1d6:	b085      	sub	sp, #20
 800e1d8:	af00      	add	r7, sp, #0
 800e1da:	6078      	str	r0, [r7, #4]
 800e1dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e1e4:	2b01      	cmp	r3, #1
 800e1e6:	d101      	bne.n	800e1ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e1e8:	2302      	movs	r3, #2
 800e1ea:	e05a      	b.n	800e2a2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	2201      	movs	r2, #1
 800e1f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	2202      	movs	r2, #2
 800e1f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	685b      	ldr	r3, [r3, #4]
 800e202:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	681b      	ldr	r3, [r3, #0]
 800e208:	689b      	ldr	r3, [r3, #8]
 800e20a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e212:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e214:	683b      	ldr	r3, [r7, #0]
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	68fa      	ldr	r2, [r7, #12]
 800e21a:	4313      	orrs	r3, r2
 800e21c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	68fa      	ldr	r2, [r7, #12]
 800e224:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	4a21      	ldr	r2, [pc, #132]	; (800e2b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800e22c:	4293      	cmp	r3, r2
 800e22e:	d022      	beq.n	800e276 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e238:	d01d      	beq.n	800e276 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	4a1d      	ldr	r2, [pc, #116]	; (800e2b4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800e240:	4293      	cmp	r3, r2
 800e242:	d018      	beq.n	800e276 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	4a1b      	ldr	r2, [pc, #108]	; (800e2b8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800e24a:	4293      	cmp	r3, r2
 800e24c:	d013      	beq.n	800e276 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	4a1a      	ldr	r2, [pc, #104]	; (800e2bc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800e254:	4293      	cmp	r3, r2
 800e256:	d00e      	beq.n	800e276 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	4a18      	ldr	r2, [pc, #96]	; (800e2c0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800e25e:	4293      	cmp	r3, r2
 800e260:	d009      	beq.n	800e276 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	4a17      	ldr	r2, [pc, #92]	; (800e2c4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800e268:	4293      	cmp	r3, r2
 800e26a:	d004      	beq.n	800e276 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	4a15      	ldr	r2, [pc, #84]	; (800e2c8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800e272:	4293      	cmp	r3, r2
 800e274:	d10c      	bne.n	800e290 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e276:	68bb      	ldr	r3, [r7, #8]
 800e278:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e27c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e27e:	683b      	ldr	r3, [r7, #0]
 800e280:	685b      	ldr	r3, [r3, #4]
 800e282:	68ba      	ldr	r2, [r7, #8]
 800e284:	4313      	orrs	r3, r2
 800e286:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	68ba      	ldr	r2, [r7, #8]
 800e28e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	2201      	movs	r2, #1
 800e294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	2200      	movs	r2, #0
 800e29c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e2a0:	2300      	movs	r3, #0
}
 800e2a2:	4618      	mov	r0, r3
 800e2a4:	3714      	adds	r7, #20
 800e2a6:	46bd      	mov	sp, r7
 800e2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ac:	4770      	bx	lr
 800e2ae:	bf00      	nop
 800e2b0:	40010000 	.word	0x40010000
 800e2b4:	40000400 	.word	0x40000400
 800e2b8:	40000800 	.word	0x40000800
 800e2bc:	40000c00 	.word	0x40000c00
 800e2c0:	40010400 	.word	0x40010400
 800e2c4:	40014000 	.word	0x40014000
 800e2c8:	40001800 	.word	0x40001800

0800e2cc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800e2cc:	b480      	push	{r7}
 800e2ce:	b085      	sub	sp, #20
 800e2d0:	af00      	add	r7, sp, #0
 800e2d2:	6078      	str	r0, [r7, #4]
 800e2d4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800e2d6:	2300      	movs	r3, #0
 800e2d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e2e0:	2b01      	cmp	r3, #1
 800e2e2:	d101      	bne.n	800e2e8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800e2e4:	2302      	movs	r3, #2
 800e2e6:	e03d      	b.n	800e364 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	2201      	movs	r2, #1
 800e2ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800e2f6:	683b      	ldr	r3, [r7, #0]
 800e2f8:	68db      	ldr	r3, [r3, #12]
 800e2fa:	4313      	orrs	r3, r2
 800e2fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800e304:	683b      	ldr	r3, [r7, #0]
 800e306:	689b      	ldr	r3, [r3, #8]
 800e308:	4313      	orrs	r3, r2
 800e30a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800e312:	683b      	ldr	r3, [r7, #0]
 800e314:	685b      	ldr	r3, [r3, #4]
 800e316:	4313      	orrs	r3, r2
 800e318:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800e320:	683b      	ldr	r3, [r7, #0]
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	4313      	orrs	r3, r2
 800e326:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e32e:	683b      	ldr	r3, [r7, #0]
 800e330:	691b      	ldr	r3, [r3, #16]
 800e332:	4313      	orrs	r3, r2
 800e334:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800e33c:	683b      	ldr	r3, [r7, #0]
 800e33e:	695b      	ldr	r3, [r3, #20]
 800e340:	4313      	orrs	r3, r2
 800e342:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800e34a:	683b      	ldr	r3, [r7, #0]
 800e34c:	69db      	ldr	r3, [r3, #28]
 800e34e:	4313      	orrs	r3, r2
 800e350:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	68fa      	ldr	r2, [r7, #12]
 800e358:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	2200      	movs	r2, #0
 800e35e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e362:	2300      	movs	r3, #0
}
 800e364:	4618      	mov	r0, r3
 800e366:	3714      	adds	r7, #20
 800e368:	46bd      	mov	sp, r7
 800e36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e36e:	4770      	bx	lr

0800e370 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e370:	b480      	push	{r7}
 800e372:	b083      	sub	sp, #12
 800e374:	af00      	add	r7, sp, #0
 800e376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e378:	bf00      	nop
 800e37a:	370c      	adds	r7, #12
 800e37c:	46bd      	mov	sp, r7
 800e37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e382:	4770      	bx	lr

0800e384 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e384:	b480      	push	{r7}
 800e386:	b083      	sub	sp, #12
 800e388:	af00      	add	r7, sp, #0
 800e38a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e38c:	bf00      	nop
 800e38e:	370c      	adds	r7, #12
 800e390:	46bd      	mov	sp, r7
 800e392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e396:	4770      	bx	lr

0800e398 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e398:	b580      	push	{r7, lr}
 800e39a:	b082      	sub	sp, #8
 800e39c:	af00      	add	r7, sp, #0
 800e39e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d101      	bne.n	800e3aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e3a6:	2301      	movs	r3, #1
 800e3a8:	e03f      	b.n	800e42a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800e3b0:	b2db      	uxtb	r3, r3
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d106      	bne.n	800e3c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	2200      	movs	r2, #0
 800e3ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e3be:	6878      	ldr	r0, [r7, #4]
 800e3c0:	f7f8 fbb2 	bl	8006b28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	2224      	movs	r2, #36	; 0x24
 800e3c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	68da      	ldr	r2, [r3, #12]
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e3da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800e3dc:	6878      	ldr	r0, [r7, #4]
 800e3de:	f000 f829 	bl	800e434 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	691a      	ldr	r2, [r3, #16]
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e3f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	695a      	ldr	r2, [r3, #20]
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e400:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	68da      	ldr	r2, [r3, #12]
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e410:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	2200      	movs	r2, #0
 800e416:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	2220      	movs	r2, #32
 800e41c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	2220      	movs	r2, #32
 800e424:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800e428:	2300      	movs	r3, #0
}
 800e42a:	4618      	mov	r0, r3
 800e42c:	3708      	adds	r7, #8
 800e42e:	46bd      	mov	sp, r7
 800e430:	bd80      	pop	{r7, pc}
	...

0800e434 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e438:	b085      	sub	sp, #20
 800e43a:	af00      	add	r7, sp, #0
 800e43c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	691b      	ldr	r3, [r3, #16]
 800e444:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	68da      	ldr	r2, [r3, #12]
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	430a      	orrs	r2, r1
 800e452:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	689a      	ldr	r2, [r3, #8]
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	691b      	ldr	r3, [r3, #16]
 800e45c:	431a      	orrs	r2, r3
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	695b      	ldr	r3, [r3, #20]
 800e462:	431a      	orrs	r2, r3
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	69db      	ldr	r3, [r3, #28]
 800e468:	4313      	orrs	r3, r2
 800e46a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	68db      	ldr	r3, [r3, #12]
 800e472:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800e476:	f023 030c 	bic.w	r3, r3, #12
 800e47a:	687a      	ldr	r2, [r7, #4]
 800e47c:	6812      	ldr	r2, [r2, #0]
 800e47e:	68f9      	ldr	r1, [r7, #12]
 800e480:	430b      	orrs	r3, r1
 800e482:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	695b      	ldr	r3, [r3, #20]
 800e48a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	699a      	ldr	r2, [r3, #24]
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	430a      	orrs	r2, r1
 800e498:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	69db      	ldr	r3, [r3, #28]
 800e49e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e4a2:	f040 818b 	bne.w	800e7bc <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	4ac1      	ldr	r2, [pc, #772]	; (800e7b0 <UART_SetConfig+0x37c>)
 800e4ac:	4293      	cmp	r3, r2
 800e4ae:	d005      	beq.n	800e4bc <UART_SetConfig+0x88>
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	4abf      	ldr	r2, [pc, #764]	; (800e7b4 <UART_SetConfig+0x380>)
 800e4b6:	4293      	cmp	r3, r2
 800e4b8:	f040 80bd 	bne.w	800e636 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800e4bc:	f7fc fbcc 	bl	800ac58 <HAL_RCC_GetPCLK2Freq>
 800e4c0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800e4c2:	68bb      	ldr	r3, [r7, #8]
 800e4c4:	461d      	mov	r5, r3
 800e4c6:	f04f 0600 	mov.w	r6, #0
 800e4ca:	46a8      	mov	r8, r5
 800e4cc:	46b1      	mov	r9, r6
 800e4ce:	eb18 0308 	adds.w	r3, r8, r8
 800e4d2:	eb49 0409 	adc.w	r4, r9, r9
 800e4d6:	4698      	mov	r8, r3
 800e4d8:	46a1      	mov	r9, r4
 800e4da:	eb18 0805 	adds.w	r8, r8, r5
 800e4de:	eb49 0906 	adc.w	r9, r9, r6
 800e4e2:	f04f 0100 	mov.w	r1, #0
 800e4e6:	f04f 0200 	mov.w	r2, #0
 800e4ea:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800e4ee:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800e4f2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800e4f6:	4688      	mov	r8, r1
 800e4f8:	4691      	mov	r9, r2
 800e4fa:	eb18 0005 	adds.w	r0, r8, r5
 800e4fe:	eb49 0106 	adc.w	r1, r9, r6
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	685b      	ldr	r3, [r3, #4]
 800e506:	461d      	mov	r5, r3
 800e508:	f04f 0600 	mov.w	r6, #0
 800e50c:	196b      	adds	r3, r5, r5
 800e50e:	eb46 0406 	adc.w	r4, r6, r6
 800e512:	461a      	mov	r2, r3
 800e514:	4623      	mov	r3, r4
 800e516:	f7f2 fbcf 	bl	8000cb8 <__aeabi_uldivmod>
 800e51a:	4603      	mov	r3, r0
 800e51c:	460c      	mov	r4, r1
 800e51e:	461a      	mov	r2, r3
 800e520:	4ba5      	ldr	r3, [pc, #660]	; (800e7b8 <UART_SetConfig+0x384>)
 800e522:	fba3 2302 	umull	r2, r3, r3, r2
 800e526:	095b      	lsrs	r3, r3, #5
 800e528:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800e52c:	68bb      	ldr	r3, [r7, #8]
 800e52e:	461d      	mov	r5, r3
 800e530:	f04f 0600 	mov.w	r6, #0
 800e534:	46a9      	mov	r9, r5
 800e536:	46b2      	mov	sl, r6
 800e538:	eb19 0309 	adds.w	r3, r9, r9
 800e53c:	eb4a 040a 	adc.w	r4, sl, sl
 800e540:	4699      	mov	r9, r3
 800e542:	46a2      	mov	sl, r4
 800e544:	eb19 0905 	adds.w	r9, r9, r5
 800e548:	eb4a 0a06 	adc.w	sl, sl, r6
 800e54c:	f04f 0100 	mov.w	r1, #0
 800e550:	f04f 0200 	mov.w	r2, #0
 800e554:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e558:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800e55c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800e560:	4689      	mov	r9, r1
 800e562:	4692      	mov	sl, r2
 800e564:	eb19 0005 	adds.w	r0, r9, r5
 800e568:	eb4a 0106 	adc.w	r1, sl, r6
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	685b      	ldr	r3, [r3, #4]
 800e570:	461d      	mov	r5, r3
 800e572:	f04f 0600 	mov.w	r6, #0
 800e576:	196b      	adds	r3, r5, r5
 800e578:	eb46 0406 	adc.w	r4, r6, r6
 800e57c:	461a      	mov	r2, r3
 800e57e:	4623      	mov	r3, r4
 800e580:	f7f2 fb9a 	bl	8000cb8 <__aeabi_uldivmod>
 800e584:	4603      	mov	r3, r0
 800e586:	460c      	mov	r4, r1
 800e588:	461a      	mov	r2, r3
 800e58a:	4b8b      	ldr	r3, [pc, #556]	; (800e7b8 <UART_SetConfig+0x384>)
 800e58c:	fba3 1302 	umull	r1, r3, r3, r2
 800e590:	095b      	lsrs	r3, r3, #5
 800e592:	2164      	movs	r1, #100	; 0x64
 800e594:	fb01 f303 	mul.w	r3, r1, r3
 800e598:	1ad3      	subs	r3, r2, r3
 800e59a:	00db      	lsls	r3, r3, #3
 800e59c:	3332      	adds	r3, #50	; 0x32
 800e59e:	4a86      	ldr	r2, [pc, #536]	; (800e7b8 <UART_SetConfig+0x384>)
 800e5a0:	fba2 2303 	umull	r2, r3, r2, r3
 800e5a4:	095b      	lsrs	r3, r3, #5
 800e5a6:	005b      	lsls	r3, r3, #1
 800e5a8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800e5ac:	4498      	add	r8, r3
 800e5ae:	68bb      	ldr	r3, [r7, #8]
 800e5b0:	461d      	mov	r5, r3
 800e5b2:	f04f 0600 	mov.w	r6, #0
 800e5b6:	46a9      	mov	r9, r5
 800e5b8:	46b2      	mov	sl, r6
 800e5ba:	eb19 0309 	adds.w	r3, r9, r9
 800e5be:	eb4a 040a 	adc.w	r4, sl, sl
 800e5c2:	4699      	mov	r9, r3
 800e5c4:	46a2      	mov	sl, r4
 800e5c6:	eb19 0905 	adds.w	r9, r9, r5
 800e5ca:	eb4a 0a06 	adc.w	sl, sl, r6
 800e5ce:	f04f 0100 	mov.w	r1, #0
 800e5d2:	f04f 0200 	mov.w	r2, #0
 800e5d6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e5da:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800e5de:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800e5e2:	4689      	mov	r9, r1
 800e5e4:	4692      	mov	sl, r2
 800e5e6:	eb19 0005 	adds.w	r0, r9, r5
 800e5ea:	eb4a 0106 	adc.w	r1, sl, r6
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	685b      	ldr	r3, [r3, #4]
 800e5f2:	461d      	mov	r5, r3
 800e5f4:	f04f 0600 	mov.w	r6, #0
 800e5f8:	196b      	adds	r3, r5, r5
 800e5fa:	eb46 0406 	adc.w	r4, r6, r6
 800e5fe:	461a      	mov	r2, r3
 800e600:	4623      	mov	r3, r4
 800e602:	f7f2 fb59 	bl	8000cb8 <__aeabi_uldivmod>
 800e606:	4603      	mov	r3, r0
 800e608:	460c      	mov	r4, r1
 800e60a:	461a      	mov	r2, r3
 800e60c:	4b6a      	ldr	r3, [pc, #424]	; (800e7b8 <UART_SetConfig+0x384>)
 800e60e:	fba3 1302 	umull	r1, r3, r3, r2
 800e612:	095b      	lsrs	r3, r3, #5
 800e614:	2164      	movs	r1, #100	; 0x64
 800e616:	fb01 f303 	mul.w	r3, r1, r3
 800e61a:	1ad3      	subs	r3, r2, r3
 800e61c:	00db      	lsls	r3, r3, #3
 800e61e:	3332      	adds	r3, #50	; 0x32
 800e620:	4a65      	ldr	r2, [pc, #404]	; (800e7b8 <UART_SetConfig+0x384>)
 800e622:	fba2 2303 	umull	r2, r3, r2, r3
 800e626:	095b      	lsrs	r3, r3, #5
 800e628:	f003 0207 	and.w	r2, r3, #7
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	681b      	ldr	r3, [r3, #0]
 800e630:	4442      	add	r2, r8
 800e632:	609a      	str	r2, [r3, #8]
 800e634:	e26f      	b.n	800eb16 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800e636:	f7fc fafb 	bl	800ac30 <HAL_RCC_GetPCLK1Freq>
 800e63a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800e63c:	68bb      	ldr	r3, [r7, #8]
 800e63e:	461d      	mov	r5, r3
 800e640:	f04f 0600 	mov.w	r6, #0
 800e644:	46a8      	mov	r8, r5
 800e646:	46b1      	mov	r9, r6
 800e648:	eb18 0308 	adds.w	r3, r8, r8
 800e64c:	eb49 0409 	adc.w	r4, r9, r9
 800e650:	4698      	mov	r8, r3
 800e652:	46a1      	mov	r9, r4
 800e654:	eb18 0805 	adds.w	r8, r8, r5
 800e658:	eb49 0906 	adc.w	r9, r9, r6
 800e65c:	f04f 0100 	mov.w	r1, #0
 800e660:	f04f 0200 	mov.w	r2, #0
 800e664:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800e668:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800e66c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800e670:	4688      	mov	r8, r1
 800e672:	4691      	mov	r9, r2
 800e674:	eb18 0005 	adds.w	r0, r8, r5
 800e678:	eb49 0106 	adc.w	r1, r9, r6
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	685b      	ldr	r3, [r3, #4]
 800e680:	461d      	mov	r5, r3
 800e682:	f04f 0600 	mov.w	r6, #0
 800e686:	196b      	adds	r3, r5, r5
 800e688:	eb46 0406 	adc.w	r4, r6, r6
 800e68c:	461a      	mov	r2, r3
 800e68e:	4623      	mov	r3, r4
 800e690:	f7f2 fb12 	bl	8000cb8 <__aeabi_uldivmod>
 800e694:	4603      	mov	r3, r0
 800e696:	460c      	mov	r4, r1
 800e698:	461a      	mov	r2, r3
 800e69a:	4b47      	ldr	r3, [pc, #284]	; (800e7b8 <UART_SetConfig+0x384>)
 800e69c:	fba3 2302 	umull	r2, r3, r3, r2
 800e6a0:	095b      	lsrs	r3, r3, #5
 800e6a2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800e6a6:	68bb      	ldr	r3, [r7, #8]
 800e6a8:	461d      	mov	r5, r3
 800e6aa:	f04f 0600 	mov.w	r6, #0
 800e6ae:	46a9      	mov	r9, r5
 800e6b0:	46b2      	mov	sl, r6
 800e6b2:	eb19 0309 	adds.w	r3, r9, r9
 800e6b6:	eb4a 040a 	adc.w	r4, sl, sl
 800e6ba:	4699      	mov	r9, r3
 800e6bc:	46a2      	mov	sl, r4
 800e6be:	eb19 0905 	adds.w	r9, r9, r5
 800e6c2:	eb4a 0a06 	adc.w	sl, sl, r6
 800e6c6:	f04f 0100 	mov.w	r1, #0
 800e6ca:	f04f 0200 	mov.w	r2, #0
 800e6ce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e6d2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800e6d6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800e6da:	4689      	mov	r9, r1
 800e6dc:	4692      	mov	sl, r2
 800e6de:	eb19 0005 	adds.w	r0, r9, r5
 800e6e2:	eb4a 0106 	adc.w	r1, sl, r6
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	685b      	ldr	r3, [r3, #4]
 800e6ea:	461d      	mov	r5, r3
 800e6ec:	f04f 0600 	mov.w	r6, #0
 800e6f0:	196b      	adds	r3, r5, r5
 800e6f2:	eb46 0406 	adc.w	r4, r6, r6
 800e6f6:	461a      	mov	r2, r3
 800e6f8:	4623      	mov	r3, r4
 800e6fa:	f7f2 fadd 	bl	8000cb8 <__aeabi_uldivmod>
 800e6fe:	4603      	mov	r3, r0
 800e700:	460c      	mov	r4, r1
 800e702:	461a      	mov	r2, r3
 800e704:	4b2c      	ldr	r3, [pc, #176]	; (800e7b8 <UART_SetConfig+0x384>)
 800e706:	fba3 1302 	umull	r1, r3, r3, r2
 800e70a:	095b      	lsrs	r3, r3, #5
 800e70c:	2164      	movs	r1, #100	; 0x64
 800e70e:	fb01 f303 	mul.w	r3, r1, r3
 800e712:	1ad3      	subs	r3, r2, r3
 800e714:	00db      	lsls	r3, r3, #3
 800e716:	3332      	adds	r3, #50	; 0x32
 800e718:	4a27      	ldr	r2, [pc, #156]	; (800e7b8 <UART_SetConfig+0x384>)
 800e71a:	fba2 2303 	umull	r2, r3, r2, r3
 800e71e:	095b      	lsrs	r3, r3, #5
 800e720:	005b      	lsls	r3, r3, #1
 800e722:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800e726:	4498      	add	r8, r3
 800e728:	68bb      	ldr	r3, [r7, #8]
 800e72a:	461d      	mov	r5, r3
 800e72c:	f04f 0600 	mov.w	r6, #0
 800e730:	46a9      	mov	r9, r5
 800e732:	46b2      	mov	sl, r6
 800e734:	eb19 0309 	adds.w	r3, r9, r9
 800e738:	eb4a 040a 	adc.w	r4, sl, sl
 800e73c:	4699      	mov	r9, r3
 800e73e:	46a2      	mov	sl, r4
 800e740:	eb19 0905 	adds.w	r9, r9, r5
 800e744:	eb4a 0a06 	adc.w	sl, sl, r6
 800e748:	f04f 0100 	mov.w	r1, #0
 800e74c:	f04f 0200 	mov.w	r2, #0
 800e750:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e754:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800e758:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800e75c:	4689      	mov	r9, r1
 800e75e:	4692      	mov	sl, r2
 800e760:	eb19 0005 	adds.w	r0, r9, r5
 800e764:	eb4a 0106 	adc.w	r1, sl, r6
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	685b      	ldr	r3, [r3, #4]
 800e76c:	461d      	mov	r5, r3
 800e76e:	f04f 0600 	mov.w	r6, #0
 800e772:	196b      	adds	r3, r5, r5
 800e774:	eb46 0406 	adc.w	r4, r6, r6
 800e778:	461a      	mov	r2, r3
 800e77a:	4623      	mov	r3, r4
 800e77c:	f7f2 fa9c 	bl	8000cb8 <__aeabi_uldivmod>
 800e780:	4603      	mov	r3, r0
 800e782:	460c      	mov	r4, r1
 800e784:	461a      	mov	r2, r3
 800e786:	4b0c      	ldr	r3, [pc, #48]	; (800e7b8 <UART_SetConfig+0x384>)
 800e788:	fba3 1302 	umull	r1, r3, r3, r2
 800e78c:	095b      	lsrs	r3, r3, #5
 800e78e:	2164      	movs	r1, #100	; 0x64
 800e790:	fb01 f303 	mul.w	r3, r1, r3
 800e794:	1ad3      	subs	r3, r2, r3
 800e796:	00db      	lsls	r3, r3, #3
 800e798:	3332      	adds	r3, #50	; 0x32
 800e79a:	4a07      	ldr	r2, [pc, #28]	; (800e7b8 <UART_SetConfig+0x384>)
 800e79c:	fba2 2303 	umull	r2, r3, r2, r3
 800e7a0:	095b      	lsrs	r3, r3, #5
 800e7a2:	f003 0207 	and.w	r2, r3, #7
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	4442      	add	r2, r8
 800e7ac:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800e7ae:	e1b2      	b.n	800eb16 <UART_SetConfig+0x6e2>
 800e7b0:	40011000 	.word	0x40011000
 800e7b4:	40011400 	.word	0x40011400
 800e7b8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	4ad7      	ldr	r2, [pc, #860]	; (800eb20 <UART_SetConfig+0x6ec>)
 800e7c2:	4293      	cmp	r3, r2
 800e7c4:	d005      	beq.n	800e7d2 <UART_SetConfig+0x39e>
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	4ad6      	ldr	r2, [pc, #856]	; (800eb24 <UART_SetConfig+0x6f0>)
 800e7cc:	4293      	cmp	r3, r2
 800e7ce:	f040 80d1 	bne.w	800e974 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800e7d2:	f7fc fa41 	bl	800ac58 <HAL_RCC_GetPCLK2Freq>
 800e7d6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800e7d8:	68bb      	ldr	r3, [r7, #8]
 800e7da:	469a      	mov	sl, r3
 800e7dc:	f04f 0b00 	mov.w	fp, #0
 800e7e0:	46d0      	mov	r8, sl
 800e7e2:	46d9      	mov	r9, fp
 800e7e4:	eb18 0308 	adds.w	r3, r8, r8
 800e7e8:	eb49 0409 	adc.w	r4, r9, r9
 800e7ec:	4698      	mov	r8, r3
 800e7ee:	46a1      	mov	r9, r4
 800e7f0:	eb18 080a 	adds.w	r8, r8, sl
 800e7f4:	eb49 090b 	adc.w	r9, r9, fp
 800e7f8:	f04f 0100 	mov.w	r1, #0
 800e7fc:	f04f 0200 	mov.w	r2, #0
 800e800:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800e804:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800e808:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800e80c:	4688      	mov	r8, r1
 800e80e:	4691      	mov	r9, r2
 800e810:	eb1a 0508 	adds.w	r5, sl, r8
 800e814:	eb4b 0609 	adc.w	r6, fp, r9
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	685b      	ldr	r3, [r3, #4]
 800e81c:	4619      	mov	r1, r3
 800e81e:	f04f 0200 	mov.w	r2, #0
 800e822:	f04f 0300 	mov.w	r3, #0
 800e826:	f04f 0400 	mov.w	r4, #0
 800e82a:	0094      	lsls	r4, r2, #2
 800e82c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800e830:	008b      	lsls	r3, r1, #2
 800e832:	461a      	mov	r2, r3
 800e834:	4623      	mov	r3, r4
 800e836:	4628      	mov	r0, r5
 800e838:	4631      	mov	r1, r6
 800e83a:	f7f2 fa3d 	bl	8000cb8 <__aeabi_uldivmod>
 800e83e:	4603      	mov	r3, r0
 800e840:	460c      	mov	r4, r1
 800e842:	461a      	mov	r2, r3
 800e844:	4bb8      	ldr	r3, [pc, #736]	; (800eb28 <UART_SetConfig+0x6f4>)
 800e846:	fba3 2302 	umull	r2, r3, r3, r2
 800e84a:	095b      	lsrs	r3, r3, #5
 800e84c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800e850:	68bb      	ldr	r3, [r7, #8]
 800e852:	469b      	mov	fp, r3
 800e854:	f04f 0c00 	mov.w	ip, #0
 800e858:	46d9      	mov	r9, fp
 800e85a:	46e2      	mov	sl, ip
 800e85c:	eb19 0309 	adds.w	r3, r9, r9
 800e860:	eb4a 040a 	adc.w	r4, sl, sl
 800e864:	4699      	mov	r9, r3
 800e866:	46a2      	mov	sl, r4
 800e868:	eb19 090b 	adds.w	r9, r9, fp
 800e86c:	eb4a 0a0c 	adc.w	sl, sl, ip
 800e870:	f04f 0100 	mov.w	r1, #0
 800e874:	f04f 0200 	mov.w	r2, #0
 800e878:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e87c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800e880:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800e884:	4689      	mov	r9, r1
 800e886:	4692      	mov	sl, r2
 800e888:	eb1b 0509 	adds.w	r5, fp, r9
 800e88c:	eb4c 060a 	adc.w	r6, ip, sl
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	685b      	ldr	r3, [r3, #4]
 800e894:	4619      	mov	r1, r3
 800e896:	f04f 0200 	mov.w	r2, #0
 800e89a:	f04f 0300 	mov.w	r3, #0
 800e89e:	f04f 0400 	mov.w	r4, #0
 800e8a2:	0094      	lsls	r4, r2, #2
 800e8a4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800e8a8:	008b      	lsls	r3, r1, #2
 800e8aa:	461a      	mov	r2, r3
 800e8ac:	4623      	mov	r3, r4
 800e8ae:	4628      	mov	r0, r5
 800e8b0:	4631      	mov	r1, r6
 800e8b2:	f7f2 fa01 	bl	8000cb8 <__aeabi_uldivmod>
 800e8b6:	4603      	mov	r3, r0
 800e8b8:	460c      	mov	r4, r1
 800e8ba:	461a      	mov	r2, r3
 800e8bc:	4b9a      	ldr	r3, [pc, #616]	; (800eb28 <UART_SetConfig+0x6f4>)
 800e8be:	fba3 1302 	umull	r1, r3, r3, r2
 800e8c2:	095b      	lsrs	r3, r3, #5
 800e8c4:	2164      	movs	r1, #100	; 0x64
 800e8c6:	fb01 f303 	mul.w	r3, r1, r3
 800e8ca:	1ad3      	subs	r3, r2, r3
 800e8cc:	011b      	lsls	r3, r3, #4
 800e8ce:	3332      	adds	r3, #50	; 0x32
 800e8d0:	4a95      	ldr	r2, [pc, #596]	; (800eb28 <UART_SetConfig+0x6f4>)
 800e8d2:	fba2 2303 	umull	r2, r3, r2, r3
 800e8d6:	095b      	lsrs	r3, r3, #5
 800e8d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e8dc:	4498      	add	r8, r3
 800e8de:	68bb      	ldr	r3, [r7, #8]
 800e8e0:	469b      	mov	fp, r3
 800e8e2:	f04f 0c00 	mov.w	ip, #0
 800e8e6:	46d9      	mov	r9, fp
 800e8e8:	46e2      	mov	sl, ip
 800e8ea:	eb19 0309 	adds.w	r3, r9, r9
 800e8ee:	eb4a 040a 	adc.w	r4, sl, sl
 800e8f2:	4699      	mov	r9, r3
 800e8f4:	46a2      	mov	sl, r4
 800e8f6:	eb19 090b 	adds.w	r9, r9, fp
 800e8fa:	eb4a 0a0c 	adc.w	sl, sl, ip
 800e8fe:	f04f 0100 	mov.w	r1, #0
 800e902:	f04f 0200 	mov.w	r2, #0
 800e906:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e90a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800e90e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800e912:	4689      	mov	r9, r1
 800e914:	4692      	mov	sl, r2
 800e916:	eb1b 0509 	adds.w	r5, fp, r9
 800e91a:	eb4c 060a 	adc.w	r6, ip, sl
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	685b      	ldr	r3, [r3, #4]
 800e922:	4619      	mov	r1, r3
 800e924:	f04f 0200 	mov.w	r2, #0
 800e928:	f04f 0300 	mov.w	r3, #0
 800e92c:	f04f 0400 	mov.w	r4, #0
 800e930:	0094      	lsls	r4, r2, #2
 800e932:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800e936:	008b      	lsls	r3, r1, #2
 800e938:	461a      	mov	r2, r3
 800e93a:	4623      	mov	r3, r4
 800e93c:	4628      	mov	r0, r5
 800e93e:	4631      	mov	r1, r6
 800e940:	f7f2 f9ba 	bl	8000cb8 <__aeabi_uldivmod>
 800e944:	4603      	mov	r3, r0
 800e946:	460c      	mov	r4, r1
 800e948:	461a      	mov	r2, r3
 800e94a:	4b77      	ldr	r3, [pc, #476]	; (800eb28 <UART_SetConfig+0x6f4>)
 800e94c:	fba3 1302 	umull	r1, r3, r3, r2
 800e950:	095b      	lsrs	r3, r3, #5
 800e952:	2164      	movs	r1, #100	; 0x64
 800e954:	fb01 f303 	mul.w	r3, r1, r3
 800e958:	1ad3      	subs	r3, r2, r3
 800e95a:	011b      	lsls	r3, r3, #4
 800e95c:	3332      	adds	r3, #50	; 0x32
 800e95e:	4a72      	ldr	r2, [pc, #456]	; (800eb28 <UART_SetConfig+0x6f4>)
 800e960:	fba2 2303 	umull	r2, r3, r2, r3
 800e964:	095b      	lsrs	r3, r3, #5
 800e966:	f003 020f 	and.w	r2, r3, #15
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	4442      	add	r2, r8
 800e970:	609a      	str	r2, [r3, #8]
 800e972:	e0d0      	b.n	800eb16 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800e974:	f7fc f95c 	bl	800ac30 <HAL_RCC_GetPCLK1Freq>
 800e978:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800e97a:	68bb      	ldr	r3, [r7, #8]
 800e97c:	469a      	mov	sl, r3
 800e97e:	f04f 0b00 	mov.w	fp, #0
 800e982:	46d0      	mov	r8, sl
 800e984:	46d9      	mov	r9, fp
 800e986:	eb18 0308 	adds.w	r3, r8, r8
 800e98a:	eb49 0409 	adc.w	r4, r9, r9
 800e98e:	4698      	mov	r8, r3
 800e990:	46a1      	mov	r9, r4
 800e992:	eb18 080a 	adds.w	r8, r8, sl
 800e996:	eb49 090b 	adc.w	r9, r9, fp
 800e99a:	f04f 0100 	mov.w	r1, #0
 800e99e:	f04f 0200 	mov.w	r2, #0
 800e9a2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800e9a6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800e9aa:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800e9ae:	4688      	mov	r8, r1
 800e9b0:	4691      	mov	r9, r2
 800e9b2:	eb1a 0508 	adds.w	r5, sl, r8
 800e9b6:	eb4b 0609 	adc.w	r6, fp, r9
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	685b      	ldr	r3, [r3, #4]
 800e9be:	4619      	mov	r1, r3
 800e9c0:	f04f 0200 	mov.w	r2, #0
 800e9c4:	f04f 0300 	mov.w	r3, #0
 800e9c8:	f04f 0400 	mov.w	r4, #0
 800e9cc:	0094      	lsls	r4, r2, #2
 800e9ce:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800e9d2:	008b      	lsls	r3, r1, #2
 800e9d4:	461a      	mov	r2, r3
 800e9d6:	4623      	mov	r3, r4
 800e9d8:	4628      	mov	r0, r5
 800e9da:	4631      	mov	r1, r6
 800e9dc:	f7f2 f96c 	bl	8000cb8 <__aeabi_uldivmod>
 800e9e0:	4603      	mov	r3, r0
 800e9e2:	460c      	mov	r4, r1
 800e9e4:	461a      	mov	r2, r3
 800e9e6:	4b50      	ldr	r3, [pc, #320]	; (800eb28 <UART_SetConfig+0x6f4>)
 800e9e8:	fba3 2302 	umull	r2, r3, r3, r2
 800e9ec:	095b      	lsrs	r3, r3, #5
 800e9ee:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800e9f2:	68bb      	ldr	r3, [r7, #8]
 800e9f4:	469b      	mov	fp, r3
 800e9f6:	f04f 0c00 	mov.w	ip, #0
 800e9fa:	46d9      	mov	r9, fp
 800e9fc:	46e2      	mov	sl, ip
 800e9fe:	eb19 0309 	adds.w	r3, r9, r9
 800ea02:	eb4a 040a 	adc.w	r4, sl, sl
 800ea06:	4699      	mov	r9, r3
 800ea08:	46a2      	mov	sl, r4
 800ea0a:	eb19 090b 	adds.w	r9, r9, fp
 800ea0e:	eb4a 0a0c 	adc.w	sl, sl, ip
 800ea12:	f04f 0100 	mov.w	r1, #0
 800ea16:	f04f 0200 	mov.w	r2, #0
 800ea1a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ea1e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ea22:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ea26:	4689      	mov	r9, r1
 800ea28:	4692      	mov	sl, r2
 800ea2a:	eb1b 0509 	adds.w	r5, fp, r9
 800ea2e:	eb4c 060a 	adc.w	r6, ip, sl
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	685b      	ldr	r3, [r3, #4]
 800ea36:	4619      	mov	r1, r3
 800ea38:	f04f 0200 	mov.w	r2, #0
 800ea3c:	f04f 0300 	mov.w	r3, #0
 800ea40:	f04f 0400 	mov.w	r4, #0
 800ea44:	0094      	lsls	r4, r2, #2
 800ea46:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ea4a:	008b      	lsls	r3, r1, #2
 800ea4c:	461a      	mov	r2, r3
 800ea4e:	4623      	mov	r3, r4
 800ea50:	4628      	mov	r0, r5
 800ea52:	4631      	mov	r1, r6
 800ea54:	f7f2 f930 	bl	8000cb8 <__aeabi_uldivmod>
 800ea58:	4603      	mov	r3, r0
 800ea5a:	460c      	mov	r4, r1
 800ea5c:	461a      	mov	r2, r3
 800ea5e:	4b32      	ldr	r3, [pc, #200]	; (800eb28 <UART_SetConfig+0x6f4>)
 800ea60:	fba3 1302 	umull	r1, r3, r3, r2
 800ea64:	095b      	lsrs	r3, r3, #5
 800ea66:	2164      	movs	r1, #100	; 0x64
 800ea68:	fb01 f303 	mul.w	r3, r1, r3
 800ea6c:	1ad3      	subs	r3, r2, r3
 800ea6e:	011b      	lsls	r3, r3, #4
 800ea70:	3332      	adds	r3, #50	; 0x32
 800ea72:	4a2d      	ldr	r2, [pc, #180]	; (800eb28 <UART_SetConfig+0x6f4>)
 800ea74:	fba2 2303 	umull	r2, r3, r2, r3
 800ea78:	095b      	lsrs	r3, r3, #5
 800ea7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ea7e:	4498      	add	r8, r3
 800ea80:	68bb      	ldr	r3, [r7, #8]
 800ea82:	469b      	mov	fp, r3
 800ea84:	f04f 0c00 	mov.w	ip, #0
 800ea88:	46d9      	mov	r9, fp
 800ea8a:	46e2      	mov	sl, ip
 800ea8c:	eb19 0309 	adds.w	r3, r9, r9
 800ea90:	eb4a 040a 	adc.w	r4, sl, sl
 800ea94:	4699      	mov	r9, r3
 800ea96:	46a2      	mov	sl, r4
 800ea98:	eb19 090b 	adds.w	r9, r9, fp
 800ea9c:	eb4a 0a0c 	adc.w	sl, sl, ip
 800eaa0:	f04f 0100 	mov.w	r1, #0
 800eaa4:	f04f 0200 	mov.w	r2, #0
 800eaa8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800eaac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800eab0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800eab4:	4689      	mov	r9, r1
 800eab6:	4692      	mov	sl, r2
 800eab8:	eb1b 0509 	adds.w	r5, fp, r9
 800eabc:	eb4c 060a 	adc.w	r6, ip, sl
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	685b      	ldr	r3, [r3, #4]
 800eac4:	4619      	mov	r1, r3
 800eac6:	f04f 0200 	mov.w	r2, #0
 800eaca:	f04f 0300 	mov.w	r3, #0
 800eace:	f04f 0400 	mov.w	r4, #0
 800ead2:	0094      	lsls	r4, r2, #2
 800ead4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ead8:	008b      	lsls	r3, r1, #2
 800eada:	461a      	mov	r2, r3
 800eadc:	4623      	mov	r3, r4
 800eade:	4628      	mov	r0, r5
 800eae0:	4631      	mov	r1, r6
 800eae2:	f7f2 f8e9 	bl	8000cb8 <__aeabi_uldivmod>
 800eae6:	4603      	mov	r3, r0
 800eae8:	460c      	mov	r4, r1
 800eaea:	461a      	mov	r2, r3
 800eaec:	4b0e      	ldr	r3, [pc, #56]	; (800eb28 <UART_SetConfig+0x6f4>)
 800eaee:	fba3 1302 	umull	r1, r3, r3, r2
 800eaf2:	095b      	lsrs	r3, r3, #5
 800eaf4:	2164      	movs	r1, #100	; 0x64
 800eaf6:	fb01 f303 	mul.w	r3, r1, r3
 800eafa:	1ad3      	subs	r3, r2, r3
 800eafc:	011b      	lsls	r3, r3, #4
 800eafe:	3332      	adds	r3, #50	; 0x32
 800eb00:	4a09      	ldr	r2, [pc, #36]	; (800eb28 <UART_SetConfig+0x6f4>)
 800eb02:	fba2 2303 	umull	r2, r3, r2, r3
 800eb06:	095b      	lsrs	r3, r3, #5
 800eb08:	f003 020f 	and.w	r2, r3, #15
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	4442      	add	r2, r8
 800eb12:	609a      	str	r2, [r3, #8]
}
 800eb14:	e7ff      	b.n	800eb16 <UART_SetConfig+0x6e2>
 800eb16:	bf00      	nop
 800eb18:	3714      	adds	r7, #20
 800eb1a:	46bd      	mov	sp, r7
 800eb1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb20:	40011000 	.word	0x40011000
 800eb24:	40011400 	.word	0x40011400
 800eb28:	51eb851f 	.word	0x51eb851f

0800eb2c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800eb2c:	b084      	sub	sp, #16
 800eb2e:	b480      	push	{r7}
 800eb30:	b085      	sub	sp, #20
 800eb32:	af00      	add	r7, sp, #0
 800eb34:	6078      	str	r0, [r7, #4]
 800eb36:	f107 001c 	add.w	r0, r7, #28
 800eb3a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800eb3e:	2300      	movs	r3, #0
 800eb40:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800eb42:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800eb44:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800eb46:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800eb48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800eb4a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800eb4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800eb4e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800eb50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800eb52:	431a      	orrs	r2, r3
             Init.ClockDiv
 800eb54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800eb56:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800eb58:	68fa      	ldr	r2, [r7, #12]
 800eb5a:	4313      	orrs	r3, r2
 800eb5c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	685b      	ldr	r3, [r3, #4]
 800eb62:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800eb66:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800eb6a:	68fa      	ldr	r2, [r7, #12]
 800eb6c:	431a      	orrs	r2, r3
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800eb72:	2300      	movs	r3, #0
}
 800eb74:	4618      	mov	r0, r3
 800eb76:	3714      	adds	r7, #20
 800eb78:	46bd      	mov	sp, r7
 800eb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb7e:	b004      	add	sp, #16
 800eb80:	4770      	bx	lr

0800eb82 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800eb82:	b480      	push	{r7}
 800eb84:	b083      	sub	sp, #12
 800eb86:	af00      	add	r7, sp, #0
 800eb88:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800eb90:	4618      	mov	r0, r3
 800eb92:	370c      	adds	r7, #12
 800eb94:	46bd      	mov	sp, r7
 800eb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb9a:	4770      	bx	lr

0800eb9c <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800eb9c:	b480      	push	{r7}
 800eb9e:	b083      	sub	sp, #12
 800eba0:	af00      	add	r7, sp, #0
 800eba2:	6078      	str	r0, [r7, #4]
 800eba4:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800eba6:	683b      	ldr	r3, [r7, #0]
 800eba8:	681a      	ldr	r2, [r3, #0]
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ebb0:	2300      	movs	r3, #0
}
 800ebb2:	4618      	mov	r0, r3
 800ebb4:	370c      	adds	r7, #12
 800ebb6:	46bd      	mov	sp, r7
 800ebb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebbc:	4770      	bx	lr

0800ebbe <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800ebbe:	b580      	push	{r7, lr}
 800ebc0:	b082      	sub	sp, #8
 800ebc2:	af00      	add	r7, sp, #0
 800ebc4:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	2203      	movs	r2, #3
 800ebca:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800ebcc:	2002      	movs	r0, #2
 800ebce:	f7f9 fbdd 	bl	800838c <HAL_Delay>
  
  return HAL_OK;
 800ebd2:	2300      	movs	r3, #0
}
 800ebd4:	4618      	mov	r0, r3
 800ebd6:	3708      	adds	r7, #8
 800ebd8:	46bd      	mov	sp, r7
 800ebda:	bd80      	pop	{r7, pc}

0800ebdc <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800ebdc:	b480      	push	{r7}
 800ebde:	b083      	sub	sp, #12
 800ebe0:	af00      	add	r7, sp, #0
 800ebe2:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	f003 0303 	and.w	r3, r3, #3
}
 800ebec:	4618      	mov	r0, r3
 800ebee:	370c      	adds	r7, #12
 800ebf0:	46bd      	mov	sp, r7
 800ebf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebf6:	4770      	bx	lr

0800ebf8 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800ebf8:	b480      	push	{r7}
 800ebfa:	b085      	sub	sp, #20
 800ebfc:	af00      	add	r7, sp, #0
 800ebfe:	6078      	str	r0, [r7, #4]
 800ec00:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ec02:	2300      	movs	r3, #0
 800ec04:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800ec06:	683b      	ldr	r3, [r7, #0]
 800ec08:	681a      	ldr	r2, [r3, #0]
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ec0e:	683b      	ldr	r3, [r7, #0]
 800ec10:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800ec12:	683b      	ldr	r3, [r7, #0]
 800ec14:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ec16:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800ec18:	683b      	ldr	r3, [r7, #0]
 800ec1a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800ec1c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800ec1e:	683b      	ldr	r3, [r7, #0]
 800ec20:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800ec22:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ec24:	68fa      	ldr	r2, [r7, #12]
 800ec26:	4313      	orrs	r3, r2
 800ec28:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	68db      	ldr	r3, [r3, #12]
 800ec2e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800ec32:	f023 030f 	bic.w	r3, r3, #15
 800ec36:	68fa      	ldr	r2, [r7, #12]
 800ec38:	431a      	orrs	r2, r3
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800ec3e:	2300      	movs	r3, #0
}
 800ec40:	4618      	mov	r0, r3
 800ec42:	3714      	adds	r7, #20
 800ec44:	46bd      	mov	sp, r7
 800ec46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec4a:	4770      	bx	lr

0800ec4c <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800ec4c:	b480      	push	{r7}
 800ec4e:	b083      	sub	sp, #12
 800ec50:	af00      	add	r7, sp, #0
 800ec52:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	691b      	ldr	r3, [r3, #16]
 800ec58:	b2db      	uxtb	r3, r3
}
 800ec5a:	4618      	mov	r0, r3
 800ec5c:	370c      	adds	r7, #12
 800ec5e:	46bd      	mov	sp, r7
 800ec60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec64:	4770      	bx	lr

0800ec66 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800ec66:	b480      	push	{r7}
 800ec68:	b085      	sub	sp, #20
 800ec6a:	af00      	add	r7, sp, #0
 800ec6c:	6078      	str	r0, [r7, #4]
 800ec6e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	3314      	adds	r3, #20
 800ec74:	461a      	mov	r2, r3
 800ec76:	683b      	ldr	r3, [r7, #0]
 800ec78:	4413      	add	r3, r2
 800ec7a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	681b      	ldr	r3, [r3, #0]
}  
 800ec80:	4618      	mov	r0, r3
 800ec82:	3714      	adds	r7, #20
 800ec84:	46bd      	mov	sp, r7
 800ec86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec8a:	4770      	bx	lr

0800ec8c <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800ec8c:	b480      	push	{r7}
 800ec8e:	b085      	sub	sp, #20
 800ec90:	af00      	add	r7, sp, #0
 800ec92:	6078      	str	r0, [r7, #4]
 800ec94:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ec96:	2300      	movs	r3, #0
 800ec98:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800ec9a:	683b      	ldr	r3, [r7, #0]
 800ec9c:	681a      	ldr	r2, [r3, #0]
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800eca2:	683b      	ldr	r3, [r7, #0]
 800eca4:	685a      	ldr	r2, [r3, #4]
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ecaa:	683b      	ldr	r3, [r7, #0]
 800ecac:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800ecae:	683b      	ldr	r3, [r7, #0]
 800ecb0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ecb2:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800ecb4:	683b      	ldr	r3, [r7, #0]
 800ecb6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800ecb8:	431a      	orrs	r2, r3
                       Data->DPSM);
 800ecba:	683b      	ldr	r3, [r7, #0]
 800ecbc:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800ecbe:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ecc0:	68fa      	ldr	r2, [r7, #12]
 800ecc2:	4313      	orrs	r3, r2
 800ecc4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecca:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	431a      	orrs	r2, r3
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800ecd6:	2300      	movs	r3, #0

}
 800ecd8:	4618      	mov	r0, r3
 800ecda:	3714      	adds	r7, #20
 800ecdc:	46bd      	mov	sp, r7
 800ecde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ece2:	4770      	bx	lr

0800ece4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800ece4:	b580      	push	{r7, lr}
 800ece6:	b088      	sub	sp, #32
 800ece8:	af00      	add	r7, sp, #0
 800ecea:	6078      	str	r0, [r7, #4]
 800ecec:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800ecee:	683b      	ldr	r3, [r7, #0]
 800ecf0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800ecf2:	2310      	movs	r3, #16
 800ecf4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ecf6:	2340      	movs	r3, #64	; 0x40
 800ecf8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ecfa:	2300      	movs	r3, #0
 800ecfc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ecfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ed02:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ed04:	f107 0308 	add.w	r3, r7, #8
 800ed08:	4619      	mov	r1, r3
 800ed0a:	6878      	ldr	r0, [r7, #4]
 800ed0c:	f7ff ff74 	bl	800ebf8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800ed10:	f241 3288 	movw	r2, #5000	; 0x1388
 800ed14:	2110      	movs	r1, #16
 800ed16:	6878      	ldr	r0, [r7, #4]
 800ed18:	f000 fa40 	bl	800f19c <SDMMC_GetCmdResp1>
 800ed1c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ed1e:	69fb      	ldr	r3, [r7, #28]
}
 800ed20:	4618      	mov	r0, r3
 800ed22:	3720      	adds	r7, #32
 800ed24:	46bd      	mov	sp, r7
 800ed26:	bd80      	pop	{r7, pc}

0800ed28 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800ed28:	b580      	push	{r7, lr}
 800ed2a:	b088      	sub	sp, #32
 800ed2c:	af00      	add	r7, sp, #0
 800ed2e:	6078      	str	r0, [r7, #4]
 800ed30:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ed32:	683b      	ldr	r3, [r7, #0]
 800ed34:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800ed36:	2311      	movs	r3, #17
 800ed38:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ed3a:	2340      	movs	r3, #64	; 0x40
 800ed3c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ed3e:	2300      	movs	r3, #0
 800ed40:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ed42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ed46:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ed48:	f107 0308 	add.w	r3, r7, #8
 800ed4c:	4619      	mov	r1, r3
 800ed4e:	6878      	ldr	r0, [r7, #4]
 800ed50:	f7ff ff52 	bl	800ebf8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800ed54:	f241 3288 	movw	r2, #5000	; 0x1388
 800ed58:	2111      	movs	r1, #17
 800ed5a:	6878      	ldr	r0, [r7, #4]
 800ed5c:	f000 fa1e 	bl	800f19c <SDMMC_GetCmdResp1>
 800ed60:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ed62:	69fb      	ldr	r3, [r7, #28]
}
 800ed64:	4618      	mov	r0, r3
 800ed66:	3720      	adds	r7, #32
 800ed68:	46bd      	mov	sp, r7
 800ed6a:	bd80      	pop	{r7, pc}

0800ed6c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800ed6c:	b580      	push	{r7, lr}
 800ed6e:	b088      	sub	sp, #32
 800ed70:	af00      	add	r7, sp, #0
 800ed72:	6078      	str	r0, [r7, #4]
 800ed74:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ed76:	683b      	ldr	r3, [r7, #0]
 800ed78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800ed7a:	2312      	movs	r3, #18
 800ed7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ed7e:	2340      	movs	r3, #64	; 0x40
 800ed80:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ed82:	2300      	movs	r3, #0
 800ed84:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ed86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ed8a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ed8c:	f107 0308 	add.w	r3, r7, #8
 800ed90:	4619      	mov	r1, r3
 800ed92:	6878      	ldr	r0, [r7, #4]
 800ed94:	f7ff ff30 	bl	800ebf8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800ed98:	f241 3288 	movw	r2, #5000	; 0x1388
 800ed9c:	2112      	movs	r1, #18
 800ed9e:	6878      	ldr	r0, [r7, #4]
 800eda0:	f000 f9fc 	bl	800f19c <SDMMC_GetCmdResp1>
 800eda4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800eda6:	69fb      	ldr	r3, [r7, #28]
}
 800eda8:	4618      	mov	r0, r3
 800edaa:	3720      	adds	r7, #32
 800edac:	46bd      	mov	sp, r7
 800edae:	bd80      	pop	{r7, pc}

0800edb0 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800edb0:	b580      	push	{r7, lr}
 800edb2:	b088      	sub	sp, #32
 800edb4:	af00      	add	r7, sp, #0
 800edb6:	6078      	str	r0, [r7, #4]
 800edb8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800edba:	683b      	ldr	r3, [r7, #0]
 800edbc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800edbe:	2318      	movs	r3, #24
 800edc0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800edc2:	2340      	movs	r3, #64	; 0x40
 800edc4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800edc6:	2300      	movs	r3, #0
 800edc8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800edca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800edce:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800edd0:	f107 0308 	add.w	r3, r7, #8
 800edd4:	4619      	mov	r1, r3
 800edd6:	6878      	ldr	r0, [r7, #4]
 800edd8:	f7ff ff0e 	bl	800ebf8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800eddc:	f241 3288 	movw	r2, #5000	; 0x1388
 800ede0:	2118      	movs	r1, #24
 800ede2:	6878      	ldr	r0, [r7, #4]
 800ede4:	f000 f9da 	bl	800f19c <SDMMC_GetCmdResp1>
 800ede8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800edea:	69fb      	ldr	r3, [r7, #28]
}
 800edec:	4618      	mov	r0, r3
 800edee:	3720      	adds	r7, #32
 800edf0:	46bd      	mov	sp, r7
 800edf2:	bd80      	pop	{r7, pc}

0800edf4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800edf4:	b580      	push	{r7, lr}
 800edf6:	b088      	sub	sp, #32
 800edf8:	af00      	add	r7, sp, #0
 800edfa:	6078      	str	r0, [r7, #4]
 800edfc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800edfe:	683b      	ldr	r3, [r7, #0]
 800ee00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800ee02:	2319      	movs	r3, #25
 800ee04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ee06:	2340      	movs	r3, #64	; 0x40
 800ee08:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ee0a:	2300      	movs	r3, #0
 800ee0c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ee0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ee12:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ee14:	f107 0308 	add.w	r3, r7, #8
 800ee18:	4619      	mov	r1, r3
 800ee1a:	6878      	ldr	r0, [r7, #4]
 800ee1c:	f7ff feec 	bl	800ebf8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800ee20:	f241 3288 	movw	r2, #5000	; 0x1388
 800ee24:	2119      	movs	r1, #25
 800ee26:	6878      	ldr	r0, [r7, #4]
 800ee28:	f000 f9b8 	bl	800f19c <SDMMC_GetCmdResp1>
 800ee2c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ee2e:	69fb      	ldr	r3, [r7, #28]
}
 800ee30:	4618      	mov	r0, r3
 800ee32:	3720      	adds	r7, #32
 800ee34:	46bd      	mov	sp, r7
 800ee36:	bd80      	pop	{r7, pc}

0800ee38 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800ee38:	b580      	push	{r7, lr}
 800ee3a:	b088      	sub	sp, #32
 800ee3c:	af00      	add	r7, sp, #0
 800ee3e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800ee40:	2300      	movs	r3, #0
 800ee42:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800ee44:	230c      	movs	r3, #12
 800ee46:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ee48:	2340      	movs	r3, #64	; 0x40
 800ee4a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ee4c:	2300      	movs	r3, #0
 800ee4e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ee50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ee54:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ee56:	f107 0308 	add.w	r3, r7, #8
 800ee5a:	4619      	mov	r1, r3
 800ee5c:	6878      	ldr	r0, [r7, #4]
 800ee5e:	f7ff fecb 	bl	800ebf8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800ee62:	4a05      	ldr	r2, [pc, #20]	; (800ee78 <SDMMC_CmdStopTransfer+0x40>)
 800ee64:	210c      	movs	r1, #12
 800ee66:	6878      	ldr	r0, [r7, #4]
 800ee68:	f000 f998 	bl	800f19c <SDMMC_GetCmdResp1>
 800ee6c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ee6e:	69fb      	ldr	r3, [r7, #28]
}
 800ee70:	4618      	mov	r0, r3
 800ee72:	3720      	adds	r7, #32
 800ee74:	46bd      	mov	sp, r7
 800ee76:	bd80      	pop	{r7, pc}
 800ee78:	05f5e100 	.word	0x05f5e100

0800ee7c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800ee7c:	b580      	push	{r7, lr}
 800ee7e:	b08a      	sub	sp, #40	; 0x28
 800ee80:	af00      	add	r7, sp, #0
 800ee82:	60f8      	str	r0, [r7, #12]
 800ee84:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800ee88:	683b      	ldr	r3, [r7, #0]
 800ee8a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800ee8c:	2307      	movs	r3, #7
 800ee8e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ee90:	2340      	movs	r3, #64	; 0x40
 800ee92:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ee94:	2300      	movs	r3, #0
 800ee96:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ee98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ee9c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ee9e:	f107 0310 	add.w	r3, r7, #16
 800eea2:	4619      	mov	r1, r3
 800eea4:	68f8      	ldr	r0, [r7, #12]
 800eea6:	f7ff fea7 	bl	800ebf8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800eeaa:	f241 3288 	movw	r2, #5000	; 0x1388
 800eeae:	2107      	movs	r1, #7
 800eeb0:	68f8      	ldr	r0, [r7, #12]
 800eeb2:	f000 f973 	bl	800f19c <SDMMC_GetCmdResp1>
 800eeb6:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800eeb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800eeba:	4618      	mov	r0, r3
 800eebc:	3728      	adds	r7, #40	; 0x28
 800eebe:	46bd      	mov	sp, r7
 800eec0:	bd80      	pop	{r7, pc}

0800eec2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800eec2:	b580      	push	{r7, lr}
 800eec4:	b088      	sub	sp, #32
 800eec6:	af00      	add	r7, sp, #0
 800eec8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800eeca:	2300      	movs	r3, #0
 800eecc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800eece:	2300      	movs	r3, #0
 800eed0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800eed2:	2300      	movs	r3, #0
 800eed4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800eed6:	2300      	movs	r3, #0
 800eed8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800eeda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eede:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800eee0:	f107 0308 	add.w	r3, r7, #8
 800eee4:	4619      	mov	r1, r3
 800eee6:	6878      	ldr	r0, [r7, #4]
 800eee8:	f7ff fe86 	bl	800ebf8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800eeec:	6878      	ldr	r0, [r7, #4]
 800eeee:	f000 f92d 	bl	800f14c <SDMMC_GetCmdError>
 800eef2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800eef4:	69fb      	ldr	r3, [r7, #28]
}
 800eef6:	4618      	mov	r0, r3
 800eef8:	3720      	adds	r7, #32
 800eefa:	46bd      	mov	sp, r7
 800eefc:	bd80      	pop	{r7, pc}

0800eefe <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800eefe:	b580      	push	{r7, lr}
 800ef00:	b088      	sub	sp, #32
 800ef02:	af00      	add	r7, sp, #0
 800ef04:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800ef06:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800ef0a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800ef0c:	2308      	movs	r3, #8
 800ef0e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ef10:	2340      	movs	r3, #64	; 0x40
 800ef12:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ef14:	2300      	movs	r3, #0
 800ef16:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ef18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ef1c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ef1e:	f107 0308 	add.w	r3, r7, #8
 800ef22:	4619      	mov	r1, r3
 800ef24:	6878      	ldr	r0, [r7, #4]
 800ef26:	f7ff fe67 	bl	800ebf8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800ef2a:	6878      	ldr	r0, [r7, #4]
 800ef2c:	f000 fb16 	bl	800f55c <SDMMC_GetCmdResp7>
 800ef30:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ef32:	69fb      	ldr	r3, [r7, #28]
}
 800ef34:	4618      	mov	r0, r3
 800ef36:	3720      	adds	r7, #32
 800ef38:	46bd      	mov	sp, r7
 800ef3a:	bd80      	pop	{r7, pc}

0800ef3c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800ef3c:	b580      	push	{r7, lr}
 800ef3e:	b088      	sub	sp, #32
 800ef40:	af00      	add	r7, sp, #0
 800ef42:	6078      	str	r0, [r7, #4]
 800ef44:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800ef46:	683b      	ldr	r3, [r7, #0]
 800ef48:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800ef4a:	2337      	movs	r3, #55	; 0x37
 800ef4c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ef4e:	2340      	movs	r3, #64	; 0x40
 800ef50:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ef52:	2300      	movs	r3, #0
 800ef54:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ef56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ef5a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ef5c:	f107 0308 	add.w	r3, r7, #8
 800ef60:	4619      	mov	r1, r3
 800ef62:	6878      	ldr	r0, [r7, #4]
 800ef64:	f7ff fe48 	bl	800ebf8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800ef68:	f241 3288 	movw	r2, #5000	; 0x1388
 800ef6c:	2137      	movs	r1, #55	; 0x37
 800ef6e:	6878      	ldr	r0, [r7, #4]
 800ef70:	f000 f914 	bl	800f19c <SDMMC_GetCmdResp1>
 800ef74:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ef76:	69fb      	ldr	r3, [r7, #28]
}
 800ef78:	4618      	mov	r0, r3
 800ef7a:	3720      	adds	r7, #32
 800ef7c:	46bd      	mov	sp, r7
 800ef7e:	bd80      	pop	{r7, pc}

0800ef80 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800ef80:	b580      	push	{r7, lr}
 800ef82:	b088      	sub	sp, #32
 800ef84:	af00      	add	r7, sp, #0
 800ef86:	6078      	str	r0, [r7, #4]
 800ef88:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800ef8a:	683b      	ldr	r3, [r7, #0]
 800ef8c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ef90:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ef94:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800ef96:	2329      	movs	r3, #41	; 0x29
 800ef98:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ef9a:	2340      	movs	r3, #64	; 0x40
 800ef9c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ef9e:	2300      	movs	r3, #0
 800efa0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800efa2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800efa6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800efa8:	f107 0308 	add.w	r3, r7, #8
 800efac:	4619      	mov	r1, r3
 800efae:	6878      	ldr	r0, [r7, #4]
 800efb0:	f7ff fe22 	bl	800ebf8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800efb4:	6878      	ldr	r0, [r7, #4]
 800efb6:	f000 fa23 	bl	800f400 <SDMMC_GetCmdResp3>
 800efba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800efbc:	69fb      	ldr	r3, [r7, #28]
}
 800efbe:	4618      	mov	r0, r3
 800efc0:	3720      	adds	r7, #32
 800efc2:	46bd      	mov	sp, r7
 800efc4:	bd80      	pop	{r7, pc}

0800efc6 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800efc6:	b580      	push	{r7, lr}
 800efc8:	b088      	sub	sp, #32
 800efca:	af00      	add	r7, sp, #0
 800efcc:	6078      	str	r0, [r7, #4]
 800efce:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800efd0:	683b      	ldr	r3, [r7, #0]
 800efd2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800efd4:	2306      	movs	r3, #6
 800efd6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800efd8:	2340      	movs	r3, #64	; 0x40
 800efda:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800efdc:	2300      	movs	r3, #0
 800efde:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800efe0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800efe4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800efe6:	f107 0308 	add.w	r3, r7, #8
 800efea:	4619      	mov	r1, r3
 800efec:	6878      	ldr	r0, [r7, #4]
 800efee:	f7ff fe03 	bl	800ebf8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800eff2:	f241 3288 	movw	r2, #5000	; 0x1388
 800eff6:	2106      	movs	r1, #6
 800eff8:	6878      	ldr	r0, [r7, #4]
 800effa:	f000 f8cf 	bl	800f19c <SDMMC_GetCmdResp1>
 800effe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f000:	69fb      	ldr	r3, [r7, #28]
}
 800f002:	4618      	mov	r0, r3
 800f004:	3720      	adds	r7, #32
 800f006:	46bd      	mov	sp, r7
 800f008:	bd80      	pop	{r7, pc}

0800f00a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800f00a:	b580      	push	{r7, lr}
 800f00c:	b088      	sub	sp, #32
 800f00e:	af00      	add	r7, sp, #0
 800f010:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800f012:	2300      	movs	r3, #0
 800f014:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800f016:	2333      	movs	r3, #51	; 0x33
 800f018:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f01a:	2340      	movs	r3, #64	; 0x40
 800f01c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f01e:	2300      	movs	r3, #0
 800f020:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f022:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f026:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f028:	f107 0308 	add.w	r3, r7, #8
 800f02c:	4619      	mov	r1, r3
 800f02e:	6878      	ldr	r0, [r7, #4]
 800f030:	f7ff fde2 	bl	800ebf8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800f034:	f241 3288 	movw	r2, #5000	; 0x1388
 800f038:	2133      	movs	r1, #51	; 0x33
 800f03a:	6878      	ldr	r0, [r7, #4]
 800f03c:	f000 f8ae 	bl	800f19c <SDMMC_GetCmdResp1>
 800f040:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f042:	69fb      	ldr	r3, [r7, #28]
}
 800f044:	4618      	mov	r0, r3
 800f046:	3720      	adds	r7, #32
 800f048:	46bd      	mov	sp, r7
 800f04a:	bd80      	pop	{r7, pc}

0800f04c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800f04c:	b580      	push	{r7, lr}
 800f04e:	b088      	sub	sp, #32
 800f050:	af00      	add	r7, sp, #0
 800f052:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800f054:	2300      	movs	r3, #0
 800f056:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800f058:	2302      	movs	r3, #2
 800f05a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800f05c:	23c0      	movs	r3, #192	; 0xc0
 800f05e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f060:	2300      	movs	r3, #0
 800f062:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f064:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f068:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f06a:	f107 0308 	add.w	r3, r7, #8
 800f06e:	4619      	mov	r1, r3
 800f070:	6878      	ldr	r0, [r7, #4]
 800f072:	f7ff fdc1 	bl	800ebf8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800f076:	6878      	ldr	r0, [r7, #4]
 800f078:	f000 f97c 	bl	800f374 <SDMMC_GetCmdResp2>
 800f07c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f07e:	69fb      	ldr	r3, [r7, #28]
}
 800f080:	4618      	mov	r0, r3
 800f082:	3720      	adds	r7, #32
 800f084:	46bd      	mov	sp, r7
 800f086:	bd80      	pop	{r7, pc}

0800f088 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800f088:	b580      	push	{r7, lr}
 800f08a:	b088      	sub	sp, #32
 800f08c:	af00      	add	r7, sp, #0
 800f08e:	6078      	str	r0, [r7, #4]
 800f090:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800f092:	683b      	ldr	r3, [r7, #0]
 800f094:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800f096:	2309      	movs	r3, #9
 800f098:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800f09a:	23c0      	movs	r3, #192	; 0xc0
 800f09c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f09e:	2300      	movs	r3, #0
 800f0a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f0a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f0a6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f0a8:	f107 0308 	add.w	r3, r7, #8
 800f0ac:	4619      	mov	r1, r3
 800f0ae:	6878      	ldr	r0, [r7, #4]
 800f0b0:	f7ff fda2 	bl	800ebf8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800f0b4:	6878      	ldr	r0, [r7, #4]
 800f0b6:	f000 f95d 	bl	800f374 <SDMMC_GetCmdResp2>
 800f0ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f0bc:	69fb      	ldr	r3, [r7, #28]
}
 800f0be:	4618      	mov	r0, r3
 800f0c0:	3720      	adds	r7, #32
 800f0c2:	46bd      	mov	sp, r7
 800f0c4:	bd80      	pop	{r7, pc}

0800f0c6 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800f0c6:	b580      	push	{r7, lr}
 800f0c8:	b088      	sub	sp, #32
 800f0ca:	af00      	add	r7, sp, #0
 800f0cc:	6078      	str	r0, [r7, #4]
 800f0ce:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800f0d0:	2300      	movs	r3, #0
 800f0d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800f0d4:	2303      	movs	r3, #3
 800f0d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f0d8:	2340      	movs	r3, #64	; 0x40
 800f0da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f0dc:	2300      	movs	r3, #0
 800f0de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f0e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f0e4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f0e6:	f107 0308 	add.w	r3, r7, #8
 800f0ea:	4619      	mov	r1, r3
 800f0ec:	6878      	ldr	r0, [r7, #4]
 800f0ee:	f7ff fd83 	bl	800ebf8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800f0f2:	683a      	ldr	r2, [r7, #0]
 800f0f4:	2103      	movs	r1, #3
 800f0f6:	6878      	ldr	r0, [r7, #4]
 800f0f8:	f000 f9bc 	bl	800f474 <SDMMC_GetCmdResp6>
 800f0fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f0fe:	69fb      	ldr	r3, [r7, #28]
}
 800f100:	4618      	mov	r0, r3
 800f102:	3720      	adds	r7, #32
 800f104:	46bd      	mov	sp, r7
 800f106:	bd80      	pop	{r7, pc}

0800f108 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800f108:	b580      	push	{r7, lr}
 800f10a:	b088      	sub	sp, #32
 800f10c:	af00      	add	r7, sp, #0
 800f10e:	6078      	str	r0, [r7, #4]
 800f110:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800f112:	683b      	ldr	r3, [r7, #0]
 800f114:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800f116:	230d      	movs	r3, #13
 800f118:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800f11a:	2340      	movs	r3, #64	; 0x40
 800f11c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800f11e:	2300      	movs	r3, #0
 800f120:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800f122:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f126:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800f128:	f107 0308 	add.w	r3, r7, #8
 800f12c:	4619      	mov	r1, r3
 800f12e:	6878      	ldr	r0, [r7, #4]
 800f130:	f7ff fd62 	bl	800ebf8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800f134:	f241 3288 	movw	r2, #5000	; 0x1388
 800f138:	210d      	movs	r1, #13
 800f13a:	6878      	ldr	r0, [r7, #4]
 800f13c:	f000 f82e 	bl	800f19c <SDMMC_GetCmdResp1>
 800f140:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f142:	69fb      	ldr	r3, [r7, #28]
}
 800f144:	4618      	mov	r0, r3
 800f146:	3720      	adds	r7, #32
 800f148:	46bd      	mov	sp, r7
 800f14a:	bd80      	pop	{r7, pc}

0800f14c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800f14c:	b490      	push	{r4, r7}
 800f14e:	b082      	sub	sp, #8
 800f150:	af00      	add	r7, sp, #0
 800f152:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f154:	4b0f      	ldr	r3, [pc, #60]	; (800f194 <SDMMC_GetCmdError+0x48>)
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	4a0f      	ldr	r2, [pc, #60]	; (800f198 <SDMMC_GetCmdError+0x4c>)
 800f15a:	fba2 2303 	umull	r2, r3, r2, r3
 800f15e:	0a5b      	lsrs	r3, r3, #9
 800f160:	f241 3288 	movw	r2, #5000	; 0x1388
 800f164:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800f168:	4623      	mov	r3, r4
 800f16a:	1e5c      	subs	r4, r3, #1
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d102      	bne.n	800f176 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f170:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f174:	e009      	b.n	800f18a <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f17a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d0f2      	beq.n	800f168 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	22c5      	movs	r2, #197	; 0xc5
 800f186:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800f188:	2300      	movs	r3, #0
}
 800f18a:	4618      	mov	r0, r3
 800f18c:	3708      	adds	r7, #8
 800f18e:	46bd      	mov	sp, r7
 800f190:	bc90      	pop	{r4, r7}
 800f192:	4770      	bx	lr
 800f194:	20000000 	.word	0x20000000
 800f198:	10624dd3 	.word	0x10624dd3

0800f19c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800f19c:	b590      	push	{r4, r7, lr}
 800f19e:	b087      	sub	sp, #28
 800f1a0:	af00      	add	r7, sp, #0
 800f1a2:	60f8      	str	r0, [r7, #12]
 800f1a4:	460b      	mov	r3, r1
 800f1a6:	607a      	str	r2, [r7, #4]
 800f1a8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800f1aa:	4b6f      	ldr	r3, [pc, #444]	; (800f368 <SDMMC_GetCmdResp1+0x1cc>)
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	4a6f      	ldr	r2, [pc, #444]	; (800f36c <SDMMC_GetCmdResp1+0x1d0>)
 800f1b0:	fba2 2303 	umull	r2, r3, r2, r3
 800f1b4:	0a5b      	lsrs	r3, r3, #9
 800f1b6:	687a      	ldr	r2, [r7, #4]
 800f1b8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800f1bc:	4623      	mov	r3, r4
 800f1be:	1e5c      	subs	r4, r3, #1
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d102      	bne.n	800f1ca <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f1c4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f1c8:	e0c9      	b.n	800f35e <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f1ce:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f1d0:	697b      	ldr	r3, [r7, #20]
 800f1d2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d0f0      	beq.n	800f1bc <SDMMC_GetCmdResp1+0x20>
 800f1da:	697b      	ldr	r3, [r7, #20]
 800f1dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d1eb      	bne.n	800f1bc <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f1e8:	f003 0304 	and.w	r3, r3, #4
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d004      	beq.n	800f1fa <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	2204      	movs	r2, #4
 800f1f4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f1f6:	2304      	movs	r3, #4
 800f1f8:	e0b1      	b.n	800f35e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800f1fa:	68fb      	ldr	r3, [r7, #12]
 800f1fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f1fe:	f003 0301 	and.w	r3, r3, #1
 800f202:	2b00      	cmp	r3, #0
 800f204:	d004      	beq.n	800f210 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	2201      	movs	r2, #1
 800f20a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f20c:	2301      	movs	r3, #1
 800f20e:	e0a6      	b.n	800f35e <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	22c5      	movs	r2, #197	; 0xc5
 800f214:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800f216:	68f8      	ldr	r0, [r7, #12]
 800f218:	f7ff fd18 	bl	800ec4c <SDIO_GetCommandResponse>
 800f21c:	4603      	mov	r3, r0
 800f21e:	461a      	mov	r2, r3
 800f220:	7afb      	ldrb	r3, [r7, #11]
 800f222:	4293      	cmp	r3, r2
 800f224:	d001      	beq.n	800f22a <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f226:	2301      	movs	r3, #1
 800f228:	e099      	b.n	800f35e <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800f22a:	2100      	movs	r1, #0
 800f22c:	68f8      	ldr	r0, [r7, #12]
 800f22e:	f7ff fd1a 	bl	800ec66 <SDIO_GetResponse>
 800f232:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800f234:	693a      	ldr	r2, [r7, #16]
 800f236:	4b4e      	ldr	r3, [pc, #312]	; (800f370 <SDMMC_GetCmdResp1+0x1d4>)
 800f238:	4013      	ands	r3, r2
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d101      	bne.n	800f242 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800f23e:	2300      	movs	r3, #0
 800f240:	e08d      	b.n	800f35e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800f242:	693b      	ldr	r3, [r7, #16]
 800f244:	2b00      	cmp	r3, #0
 800f246:	da02      	bge.n	800f24e <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800f248:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800f24c:	e087      	b.n	800f35e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800f24e:	693b      	ldr	r3, [r7, #16]
 800f250:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f254:	2b00      	cmp	r3, #0
 800f256:	d001      	beq.n	800f25c <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800f258:	2340      	movs	r3, #64	; 0x40
 800f25a:	e080      	b.n	800f35e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800f25c:	693b      	ldr	r3, [r7, #16]
 800f25e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f262:	2b00      	cmp	r3, #0
 800f264:	d001      	beq.n	800f26a <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800f266:	2380      	movs	r3, #128	; 0x80
 800f268:	e079      	b.n	800f35e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800f26a:	693b      	ldr	r3, [r7, #16]
 800f26c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f270:	2b00      	cmp	r3, #0
 800f272:	d002      	beq.n	800f27a <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800f274:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f278:	e071      	b.n	800f35e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800f27a:	693b      	ldr	r3, [r7, #16]
 800f27c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f280:	2b00      	cmp	r3, #0
 800f282:	d002      	beq.n	800f28a <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800f284:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f288:	e069      	b.n	800f35e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800f28a:	693b      	ldr	r3, [r7, #16]
 800f28c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800f290:	2b00      	cmp	r3, #0
 800f292:	d002      	beq.n	800f29a <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800f294:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f298:	e061      	b.n	800f35e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800f29a:	693b      	ldr	r3, [r7, #16]
 800f29c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d002      	beq.n	800f2aa <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800f2a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f2a8:	e059      	b.n	800f35e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800f2aa:	693b      	ldr	r3, [r7, #16]
 800f2ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	d002      	beq.n	800f2ba <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800f2b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f2b8:	e051      	b.n	800f35e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800f2ba:	693b      	ldr	r3, [r7, #16]
 800f2bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d002      	beq.n	800f2ca <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800f2c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f2c8:	e049      	b.n	800f35e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800f2ca:	693b      	ldr	r3, [r7, #16]
 800f2cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d002      	beq.n	800f2da <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800f2d4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f2d8:	e041      	b.n	800f35e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800f2da:	693b      	ldr	r3, [r7, #16]
 800f2dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d002      	beq.n	800f2ea <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800f2e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f2e8:	e039      	b.n	800f35e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800f2ea:	693b      	ldr	r3, [r7, #16]
 800f2ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d002      	beq.n	800f2fa <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800f2f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800f2f8:	e031      	b.n	800f35e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800f2fa:	693b      	ldr	r3, [r7, #16]
 800f2fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f300:	2b00      	cmp	r3, #0
 800f302:	d002      	beq.n	800f30a <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800f304:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800f308:	e029      	b.n	800f35e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800f30a:	693b      	ldr	r3, [r7, #16]
 800f30c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f310:	2b00      	cmp	r3, #0
 800f312:	d002      	beq.n	800f31a <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800f314:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800f318:	e021      	b.n	800f35e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800f31a:	693b      	ldr	r3, [r7, #16]
 800f31c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f320:	2b00      	cmp	r3, #0
 800f322:	d002      	beq.n	800f32a <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800f324:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800f328:	e019      	b.n	800f35e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800f32a:	693b      	ldr	r3, [r7, #16]
 800f32c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f330:	2b00      	cmp	r3, #0
 800f332:	d002      	beq.n	800f33a <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800f334:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800f338:	e011      	b.n	800f35e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800f33a:	693b      	ldr	r3, [r7, #16]
 800f33c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f340:	2b00      	cmp	r3, #0
 800f342:	d002      	beq.n	800f34a <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800f344:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800f348:	e009      	b.n	800f35e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800f34a:	693b      	ldr	r3, [r7, #16]
 800f34c:	f003 0308 	and.w	r3, r3, #8
 800f350:	2b00      	cmp	r3, #0
 800f352:	d002      	beq.n	800f35a <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800f354:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800f358:	e001      	b.n	800f35e <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800f35a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800f35e:	4618      	mov	r0, r3
 800f360:	371c      	adds	r7, #28
 800f362:	46bd      	mov	sp, r7
 800f364:	bd90      	pop	{r4, r7, pc}
 800f366:	bf00      	nop
 800f368:	20000000 	.word	0x20000000
 800f36c:	10624dd3 	.word	0x10624dd3
 800f370:	fdffe008 	.word	0xfdffe008

0800f374 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800f374:	b490      	push	{r4, r7}
 800f376:	b084      	sub	sp, #16
 800f378:	af00      	add	r7, sp, #0
 800f37a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f37c:	4b1e      	ldr	r3, [pc, #120]	; (800f3f8 <SDMMC_GetCmdResp2+0x84>)
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	4a1e      	ldr	r2, [pc, #120]	; (800f3fc <SDMMC_GetCmdResp2+0x88>)
 800f382:	fba2 2303 	umull	r2, r3, r2, r3
 800f386:	0a5b      	lsrs	r3, r3, #9
 800f388:	f241 3288 	movw	r2, #5000	; 0x1388
 800f38c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800f390:	4623      	mov	r3, r4
 800f392:	1e5c      	subs	r4, r3, #1
 800f394:	2b00      	cmp	r3, #0
 800f396:	d102      	bne.n	800f39e <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f398:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f39c:	e026      	b.n	800f3ec <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f3a2:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d0f0      	beq.n	800f390 <SDMMC_GetCmdResp2+0x1c>
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d1eb      	bne.n	800f390 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f3bc:	f003 0304 	and.w	r3, r3, #4
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d004      	beq.n	800f3ce <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	2204      	movs	r2, #4
 800f3c8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f3ca:	2304      	movs	r3, #4
 800f3cc:	e00e      	b.n	800f3ec <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f3d2:	f003 0301 	and.w	r3, r3, #1
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d004      	beq.n	800f3e4 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	2201      	movs	r2, #1
 800f3de:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f3e0:	2301      	movs	r3, #1
 800f3e2:	e003      	b.n	800f3ec <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	22c5      	movs	r2, #197	; 0xc5
 800f3e8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800f3ea:	2300      	movs	r3, #0
}
 800f3ec:	4618      	mov	r0, r3
 800f3ee:	3710      	adds	r7, #16
 800f3f0:	46bd      	mov	sp, r7
 800f3f2:	bc90      	pop	{r4, r7}
 800f3f4:	4770      	bx	lr
 800f3f6:	bf00      	nop
 800f3f8:	20000000 	.word	0x20000000
 800f3fc:	10624dd3 	.word	0x10624dd3

0800f400 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800f400:	b490      	push	{r4, r7}
 800f402:	b084      	sub	sp, #16
 800f404:	af00      	add	r7, sp, #0
 800f406:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f408:	4b18      	ldr	r3, [pc, #96]	; (800f46c <SDMMC_GetCmdResp3+0x6c>)
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	4a18      	ldr	r2, [pc, #96]	; (800f470 <SDMMC_GetCmdResp3+0x70>)
 800f40e:	fba2 2303 	umull	r2, r3, r2, r3
 800f412:	0a5b      	lsrs	r3, r3, #9
 800f414:	f241 3288 	movw	r2, #5000	; 0x1388
 800f418:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800f41c:	4623      	mov	r3, r4
 800f41e:	1e5c      	subs	r4, r3, #1
 800f420:	2b00      	cmp	r3, #0
 800f422:	d102      	bne.n	800f42a <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f424:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f428:	e01b      	b.n	800f462 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f42e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f430:	68fb      	ldr	r3, [r7, #12]
 800f432:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800f436:	2b00      	cmp	r3, #0
 800f438:	d0f0      	beq.n	800f41c <SDMMC_GetCmdResp3+0x1c>
 800f43a:	68fb      	ldr	r3, [r7, #12]
 800f43c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f440:	2b00      	cmp	r3, #0
 800f442:	d1eb      	bne.n	800f41c <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f448:	f003 0304 	and.w	r3, r3, #4
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d004      	beq.n	800f45a <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	2204      	movs	r2, #4
 800f454:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f456:	2304      	movs	r3, #4
 800f458:	e003      	b.n	800f462 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	22c5      	movs	r2, #197	; 0xc5
 800f45e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800f460:	2300      	movs	r3, #0
}
 800f462:	4618      	mov	r0, r3
 800f464:	3710      	adds	r7, #16
 800f466:	46bd      	mov	sp, r7
 800f468:	bc90      	pop	{r4, r7}
 800f46a:	4770      	bx	lr
 800f46c:	20000000 	.word	0x20000000
 800f470:	10624dd3 	.word	0x10624dd3

0800f474 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800f474:	b590      	push	{r4, r7, lr}
 800f476:	b087      	sub	sp, #28
 800f478:	af00      	add	r7, sp, #0
 800f47a:	60f8      	str	r0, [r7, #12]
 800f47c:	460b      	mov	r3, r1
 800f47e:	607a      	str	r2, [r7, #4]
 800f480:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f482:	4b34      	ldr	r3, [pc, #208]	; (800f554 <SDMMC_GetCmdResp6+0xe0>)
 800f484:	681b      	ldr	r3, [r3, #0]
 800f486:	4a34      	ldr	r2, [pc, #208]	; (800f558 <SDMMC_GetCmdResp6+0xe4>)
 800f488:	fba2 2303 	umull	r2, r3, r2, r3
 800f48c:	0a5b      	lsrs	r3, r3, #9
 800f48e:	f241 3288 	movw	r2, #5000	; 0x1388
 800f492:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800f496:	4623      	mov	r3, r4
 800f498:	1e5c      	subs	r4, r3, #1
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d102      	bne.n	800f4a4 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f49e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f4a2:	e052      	b.n	800f54a <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 800f4a4:	68fb      	ldr	r3, [r7, #12]
 800f4a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f4a8:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f4aa:	697b      	ldr	r3, [r7, #20]
 800f4ac:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d0f0      	beq.n	800f496 <SDMMC_GetCmdResp6+0x22>
 800f4b4:	697b      	ldr	r3, [r7, #20]
 800f4b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d1eb      	bne.n	800f496 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800f4be:	68fb      	ldr	r3, [r7, #12]
 800f4c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f4c2:	f003 0304 	and.w	r3, r3, #4
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d004      	beq.n	800f4d4 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	2204      	movs	r2, #4
 800f4ce:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f4d0:	2304      	movs	r3, #4
 800f4d2:	e03a      	b.n	800f54a <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800f4d4:	68fb      	ldr	r3, [r7, #12]
 800f4d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f4d8:	f003 0301 	and.w	r3, r3, #1
 800f4dc:	2b00      	cmp	r3, #0
 800f4de:	d004      	beq.n	800f4ea <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	2201      	movs	r2, #1
 800f4e4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f4e6:	2301      	movs	r3, #1
 800f4e8:	e02f      	b.n	800f54a <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800f4ea:	68f8      	ldr	r0, [r7, #12]
 800f4ec:	f7ff fbae 	bl	800ec4c <SDIO_GetCommandResponse>
 800f4f0:	4603      	mov	r3, r0
 800f4f2:	461a      	mov	r2, r3
 800f4f4:	7afb      	ldrb	r3, [r7, #11]
 800f4f6:	4293      	cmp	r3, r2
 800f4f8:	d001      	beq.n	800f4fe <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f4fa:	2301      	movs	r3, #1
 800f4fc:	e025      	b.n	800f54a <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	22c5      	movs	r2, #197	; 0xc5
 800f502:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800f504:	2100      	movs	r1, #0
 800f506:	68f8      	ldr	r0, [r7, #12]
 800f508:	f7ff fbad 	bl	800ec66 <SDIO_GetResponse>
 800f50c:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800f50e:	693b      	ldr	r3, [r7, #16]
 800f510:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800f514:	2b00      	cmp	r3, #0
 800f516:	d106      	bne.n	800f526 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800f518:	693b      	ldr	r3, [r7, #16]
 800f51a:	0c1b      	lsrs	r3, r3, #16
 800f51c:	b29a      	uxth	r2, r3
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800f522:	2300      	movs	r3, #0
 800f524:	e011      	b.n	800f54a <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800f526:	693b      	ldr	r3, [r7, #16]
 800f528:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d002      	beq.n	800f536 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800f530:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f534:	e009      	b.n	800f54a <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800f536:	693b      	ldr	r3, [r7, #16]
 800f538:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d002      	beq.n	800f546 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800f540:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f544:	e001      	b.n	800f54a <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800f546:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800f54a:	4618      	mov	r0, r3
 800f54c:	371c      	adds	r7, #28
 800f54e:	46bd      	mov	sp, r7
 800f550:	bd90      	pop	{r4, r7, pc}
 800f552:	bf00      	nop
 800f554:	20000000 	.word	0x20000000
 800f558:	10624dd3 	.word	0x10624dd3

0800f55c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800f55c:	b490      	push	{r4, r7}
 800f55e:	b084      	sub	sp, #16
 800f560:	af00      	add	r7, sp, #0
 800f562:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f564:	4b21      	ldr	r3, [pc, #132]	; (800f5ec <SDMMC_GetCmdResp7+0x90>)
 800f566:	681b      	ldr	r3, [r3, #0]
 800f568:	4a21      	ldr	r2, [pc, #132]	; (800f5f0 <SDMMC_GetCmdResp7+0x94>)
 800f56a:	fba2 2303 	umull	r2, r3, r2, r3
 800f56e:	0a5b      	lsrs	r3, r3, #9
 800f570:	f241 3288 	movw	r2, #5000	; 0x1388
 800f574:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800f578:	4623      	mov	r3, r4
 800f57a:	1e5c      	subs	r4, r3, #1
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d102      	bne.n	800f586 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f580:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f584:	e02c      	b.n	800f5e0 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f58a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f58c:	68fb      	ldr	r3, [r7, #12]
 800f58e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800f592:	2b00      	cmp	r3, #0
 800f594:	d0f0      	beq.n	800f578 <SDMMC_GetCmdResp7+0x1c>
 800f596:	68fb      	ldr	r3, [r7, #12]
 800f598:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d1eb      	bne.n	800f578 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f5a4:	f003 0304 	and.w	r3, r3, #4
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d004      	beq.n	800f5b6 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	2204      	movs	r2, #4
 800f5b0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f5b2:	2304      	movs	r3, #4
 800f5b4:	e014      	b.n	800f5e0 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f5ba:	f003 0301 	and.w	r3, r3, #1
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	d004      	beq.n	800f5cc <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	2201      	movs	r2, #1
 800f5c6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f5c8:	2301      	movs	r3, #1
 800f5ca:	e009      	b.n	800f5e0 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f5d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d002      	beq.n	800f5de <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	2240      	movs	r2, #64	; 0x40
 800f5dc:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800f5de:	2300      	movs	r3, #0
  
}
 800f5e0:	4618      	mov	r0, r3
 800f5e2:	3710      	adds	r7, #16
 800f5e4:	46bd      	mov	sp, r7
 800f5e6:	bc90      	pop	{r4, r7}
 800f5e8:	4770      	bx	lr
 800f5ea:	bf00      	nop
 800f5ec:	20000000 	.word	0x20000000
 800f5f0:	10624dd3 	.word	0x10624dd3

0800f5f4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800f5f4:	b580      	push	{r7, lr}
 800f5f6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800f5f8:	4904      	ldr	r1, [pc, #16]	; (800f60c <MX_FATFS_Init+0x18>)
 800f5fa:	4805      	ldr	r0, [pc, #20]	; (800f610 <MX_FATFS_Init+0x1c>)
 800f5fc:	f003 fb9c 	bl	8012d38 <FATFS_LinkDriver>
 800f600:	4603      	mov	r3, r0
 800f602:	461a      	mov	r2, r3
 800f604:	4b03      	ldr	r3, [pc, #12]	; (800f614 <MX_FATFS_Init+0x20>)
 800f606:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800f608:	bf00      	nop
 800f60a:	bd80      	pop	{r7, pc}
 800f60c:	2003edc8 	.word	0x2003edc8
 800f610:	080187b0 	.word	0x080187b0
 800f614:	2003edc4 	.word	0x2003edc4

0800f618 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800f618:	b580      	push	{r7, lr}
 800f61a:	b082      	sub	sp, #8
 800f61c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800f61e:	2300      	movs	r3, #0
 800f620:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800f622:	f000 f896 	bl	800f752 <BSP_SD_IsDetected>
 800f626:	4603      	mov	r3, r0
 800f628:	2b01      	cmp	r3, #1
 800f62a:	d001      	beq.n	800f630 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800f62c:	2301      	movs	r3, #1
 800f62e:	e012      	b.n	800f656 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800f630:	480b      	ldr	r0, [pc, #44]	; (800f660 <BSP_SD_Init+0x48>)
 800f632:	f7fb ffa5 	bl	800b580 <HAL_SD_Init>
 800f636:	4603      	mov	r3, r0
 800f638:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800f63a:	79fb      	ldrb	r3, [r7, #7]
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d109      	bne.n	800f654 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800f640:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800f644:	4806      	ldr	r0, [pc, #24]	; (800f660 <BSP_SD_Init+0x48>)
 800f646:	f7fc fd4f 	bl	800c0e8 <HAL_SD_ConfigWideBusOperation>
 800f64a:	4603      	mov	r3, r0
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d001      	beq.n	800f654 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800f650:	2301      	movs	r3, #1
 800f652:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800f654:	79fb      	ldrb	r3, [r7, #7]
}
 800f656:	4618      	mov	r0, r3
 800f658:	3708      	adds	r7, #8
 800f65a:	46bd      	mov	sp, r7
 800f65c:	bd80      	pop	{r7, pc}
 800f65e:	bf00      	nop
 800f660:	2003ebc0 	.word	0x2003ebc0

0800f664 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800f664:	b580      	push	{r7, lr}
 800f666:	b086      	sub	sp, #24
 800f668:	af00      	add	r7, sp, #0
 800f66a:	60f8      	str	r0, [r7, #12]
 800f66c:	60b9      	str	r1, [r7, #8]
 800f66e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800f670:	2300      	movs	r3, #0
 800f672:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	68ba      	ldr	r2, [r7, #8]
 800f678:	68f9      	ldr	r1, [r7, #12]
 800f67a:	4806      	ldr	r0, [pc, #24]	; (800f694 <BSP_SD_ReadBlocks_DMA+0x30>)
 800f67c:	f7fc f810 	bl	800b6a0 <HAL_SD_ReadBlocks_DMA>
 800f680:	4603      	mov	r3, r0
 800f682:	2b00      	cmp	r3, #0
 800f684:	d001      	beq.n	800f68a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800f686:	2301      	movs	r3, #1
 800f688:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800f68a:	7dfb      	ldrb	r3, [r7, #23]
}
 800f68c:	4618      	mov	r0, r3
 800f68e:	3718      	adds	r7, #24
 800f690:	46bd      	mov	sp, r7
 800f692:	bd80      	pop	{r7, pc}
 800f694:	2003ebc0 	.word	0x2003ebc0

0800f698 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800f698:	b580      	push	{r7, lr}
 800f69a:	b086      	sub	sp, #24
 800f69c:	af00      	add	r7, sp, #0
 800f69e:	60f8      	str	r0, [r7, #12]
 800f6a0:	60b9      	str	r1, [r7, #8]
 800f6a2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800f6a4:	2300      	movs	r3, #0
 800f6a6:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	68ba      	ldr	r2, [r7, #8]
 800f6ac:	68f9      	ldr	r1, [r7, #12]
 800f6ae:	4806      	ldr	r0, [pc, #24]	; (800f6c8 <BSP_SD_WriteBlocks_DMA+0x30>)
 800f6b0:	f7fc f8de 	bl	800b870 <HAL_SD_WriteBlocks_DMA>
 800f6b4:	4603      	mov	r3, r0
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d001      	beq.n	800f6be <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800f6ba:	2301      	movs	r3, #1
 800f6bc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800f6be:	7dfb      	ldrb	r3, [r7, #23]
}
 800f6c0:	4618      	mov	r0, r3
 800f6c2:	3718      	adds	r7, #24
 800f6c4:	46bd      	mov	sp, r7
 800f6c6:	bd80      	pop	{r7, pc}
 800f6c8:	2003ebc0 	.word	0x2003ebc0

0800f6cc <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800f6cc:	b580      	push	{r7, lr}
 800f6ce:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800f6d0:	4805      	ldr	r0, [pc, #20]	; (800f6e8 <BSP_SD_GetCardState+0x1c>)
 800f6d2:	f7fc fd85 	bl	800c1e0 <HAL_SD_GetCardState>
 800f6d6:	4603      	mov	r3, r0
 800f6d8:	2b04      	cmp	r3, #4
 800f6da:	bf14      	ite	ne
 800f6dc:	2301      	movne	r3, #1
 800f6de:	2300      	moveq	r3, #0
 800f6e0:	b2db      	uxtb	r3, r3
}
 800f6e2:	4618      	mov	r0, r3
 800f6e4:	bd80      	pop	{r7, pc}
 800f6e6:	bf00      	nop
 800f6e8:	2003ebc0 	.word	0x2003ebc0

0800f6ec <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800f6ec:	b580      	push	{r7, lr}
 800f6ee:	b082      	sub	sp, #8
 800f6f0:	af00      	add	r7, sp, #0
 800f6f2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800f6f4:	6879      	ldr	r1, [r7, #4]
 800f6f6:	4803      	ldr	r0, [pc, #12]	; (800f704 <BSP_SD_GetCardInfo+0x18>)
 800f6f8:	f7fc fcca 	bl	800c090 <HAL_SD_GetCardInfo>
}
 800f6fc:	bf00      	nop
 800f6fe:	3708      	adds	r7, #8
 800f700:	46bd      	mov	sp, r7
 800f702:	bd80      	pop	{r7, pc}
 800f704:	2003ebc0 	.word	0x2003ebc0

0800f708 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800f708:	b580      	push	{r7, lr}
 800f70a:	b082      	sub	sp, #8
 800f70c:	af00      	add	r7, sp, #0
 800f70e:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800f710:	f000 f818 	bl	800f744 <BSP_SD_AbortCallback>
}
 800f714:	bf00      	nop
 800f716:	3708      	adds	r7, #8
 800f718:	46bd      	mov	sp, r7
 800f71a:	bd80      	pop	{r7, pc}

0800f71c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800f71c:	b580      	push	{r7, lr}
 800f71e:	b082      	sub	sp, #8
 800f720:	af00      	add	r7, sp, #0
 800f722:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800f724:	f000 f9a8 	bl	800fa78 <BSP_SD_WriteCpltCallback>
}
 800f728:	bf00      	nop
 800f72a:	3708      	adds	r7, #8
 800f72c:	46bd      	mov	sp, r7
 800f72e:	bd80      	pop	{r7, pc}

0800f730 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800f730:	b580      	push	{r7, lr}
 800f732:	b082      	sub	sp, #8
 800f734:	af00      	add	r7, sp, #0
 800f736:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800f738:	f000 f9aa 	bl	800fa90 <BSP_SD_ReadCpltCallback>
}
 800f73c:	bf00      	nop
 800f73e:	3708      	adds	r7, #8
 800f740:	46bd      	mov	sp, r7
 800f742:	bd80      	pop	{r7, pc}

0800f744 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800f744:	b480      	push	{r7}
 800f746:	af00      	add	r7, sp, #0

}
 800f748:	bf00      	nop
 800f74a:	46bd      	mov	sp, r7
 800f74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f750:	4770      	bx	lr

0800f752 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800f752:	b580      	push	{r7, lr}
 800f754:	b082      	sub	sp, #8
 800f756:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800f758:	2301      	movs	r3, #1
 800f75a:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800f75c:	f000 f80c 	bl	800f778 <BSP_PlatformIsDetected>
 800f760:	4603      	mov	r3, r0
 800f762:	2b00      	cmp	r3, #0
 800f764:	d101      	bne.n	800f76a <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800f766:	2300      	movs	r3, #0
 800f768:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800f76a:	79fb      	ldrb	r3, [r7, #7]
 800f76c:	b2db      	uxtb	r3, r3
}
 800f76e:	4618      	mov	r0, r3
 800f770:	3708      	adds	r7, #8
 800f772:	46bd      	mov	sp, r7
 800f774:	bd80      	pop	{r7, pc}
	...

0800f778 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800f778:	b580      	push	{r7, lr}
 800f77a:	b082      	sub	sp, #8
 800f77c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800f77e:	2301      	movs	r3, #1
 800f780:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800f782:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800f786:	4806      	ldr	r0, [pc, #24]	; (800f7a0 <BSP_PlatformIsDetected+0x28>)
 800f788:	f7fa f87e 	bl	8009888 <HAL_GPIO_ReadPin>
 800f78c:	4603      	mov	r3, r0
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d001      	beq.n	800f796 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800f792:	2300      	movs	r3, #0
 800f794:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800f796:	79fb      	ldrb	r3, [r7, #7]
}
 800f798:	4618      	mov	r0, r3
 800f79a:	3708      	adds	r7, #8
 800f79c:	46bd      	mov	sp, r7
 800f79e:	bd80      	pop	{r7, pc}
 800f7a0:	40020000 	.word	0x40020000

0800f7a4 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800f7a4:	b580      	push	{r7, lr}
 800f7a6:	b084      	sub	sp, #16
 800f7a8:	af00      	add	r7, sp, #0
 800f7aa:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800f7ac:	f7f8 fde2 	bl	8008374 <HAL_GetTick>
 800f7b0:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800f7b2:	e006      	b.n	800f7c2 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800f7b4:	f7ff ff8a 	bl	800f6cc <BSP_SD_GetCardState>
 800f7b8:	4603      	mov	r3, r0
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d101      	bne.n	800f7c2 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800f7be:	2300      	movs	r3, #0
 800f7c0:	e009      	b.n	800f7d6 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800f7c2:	f7f8 fdd7 	bl	8008374 <HAL_GetTick>
 800f7c6:	4602      	mov	r2, r0
 800f7c8:	68fb      	ldr	r3, [r7, #12]
 800f7ca:	1ad3      	subs	r3, r2, r3
 800f7cc:	687a      	ldr	r2, [r7, #4]
 800f7ce:	429a      	cmp	r2, r3
 800f7d0:	d8f0      	bhi.n	800f7b4 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800f7d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f7d6:	4618      	mov	r0, r3
 800f7d8:	3710      	adds	r7, #16
 800f7da:	46bd      	mov	sp, r7
 800f7dc:	bd80      	pop	{r7, pc}
	...

0800f7e0 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800f7e0:	b580      	push	{r7, lr}
 800f7e2:	b082      	sub	sp, #8
 800f7e4:	af00      	add	r7, sp, #0
 800f7e6:	4603      	mov	r3, r0
 800f7e8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800f7ea:	4b0b      	ldr	r3, [pc, #44]	; (800f818 <SD_CheckStatus+0x38>)
 800f7ec:	2201      	movs	r2, #1
 800f7ee:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800f7f0:	f7ff ff6c 	bl	800f6cc <BSP_SD_GetCardState>
 800f7f4:	4603      	mov	r3, r0
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d107      	bne.n	800f80a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800f7fa:	4b07      	ldr	r3, [pc, #28]	; (800f818 <SD_CheckStatus+0x38>)
 800f7fc:	781b      	ldrb	r3, [r3, #0]
 800f7fe:	b2db      	uxtb	r3, r3
 800f800:	f023 0301 	bic.w	r3, r3, #1
 800f804:	b2da      	uxtb	r2, r3
 800f806:	4b04      	ldr	r3, [pc, #16]	; (800f818 <SD_CheckStatus+0x38>)
 800f808:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800f80a:	4b03      	ldr	r3, [pc, #12]	; (800f818 <SD_CheckStatus+0x38>)
 800f80c:	781b      	ldrb	r3, [r3, #0]
 800f80e:	b2db      	uxtb	r3, r3
}
 800f810:	4618      	mov	r0, r3
 800f812:	3708      	adds	r7, #8
 800f814:	46bd      	mov	sp, r7
 800f816:	bd80      	pop	{r7, pc}
 800f818:	20000009 	.word	0x20000009

0800f81c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800f81c:	b580      	push	{r7, lr}
 800f81e:	b082      	sub	sp, #8
 800f820:	af00      	add	r7, sp, #0
 800f822:	4603      	mov	r3, r0
 800f824:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800f826:	f7ff fef7 	bl	800f618 <BSP_SD_Init>
 800f82a:	4603      	mov	r3, r0
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d107      	bne.n	800f840 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800f830:	79fb      	ldrb	r3, [r7, #7]
 800f832:	4618      	mov	r0, r3
 800f834:	f7ff ffd4 	bl	800f7e0 <SD_CheckStatus>
 800f838:	4603      	mov	r3, r0
 800f83a:	461a      	mov	r2, r3
 800f83c:	4b04      	ldr	r3, [pc, #16]	; (800f850 <SD_initialize+0x34>)
 800f83e:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800f840:	4b03      	ldr	r3, [pc, #12]	; (800f850 <SD_initialize+0x34>)
 800f842:	781b      	ldrb	r3, [r3, #0]
 800f844:	b2db      	uxtb	r3, r3
}
 800f846:	4618      	mov	r0, r3
 800f848:	3708      	adds	r7, #8
 800f84a:	46bd      	mov	sp, r7
 800f84c:	bd80      	pop	{r7, pc}
 800f84e:	bf00      	nop
 800f850:	20000009 	.word	0x20000009

0800f854 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800f854:	b580      	push	{r7, lr}
 800f856:	b082      	sub	sp, #8
 800f858:	af00      	add	r7, sp, #0
 800f85a:	4603      	mov	r3, r0
 800f85c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800f85e:	79fb      	ldrb	r3, [r7, #7]
 800f860:	4618      	mov	r0, r3
 800f862:	f7ff ffbd 	bl	800f7e0 <SD_CheckStatus>
 800f866:	4603      	mov	r3, r0
}
 800f868:	4618      	mov	r0, r3
 800f86a:	3708      	adds	r7, #8
 800f86c:	46bd      	mov	sp, r7
 800f86e:	bd80      	pop	{r7, pc}

0800f870 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800f870:	b580      	push	{r7, lr}
 800f872:	b086      	sub	sp, #24
 800f874:	af00      	add	r7, sp, #0
 800f876:	60b9      	str	r1, [r7, #8]
 800f878:	607a      	str	r2, [r7, #4]
 800f87a:	603b      	str	r3, [r7, #0]
 800f87c:	4603      	mov	r3, r0
 800f87e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800f880:	2301      	movs	r3, #1
 800f882:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800f884:	f247 5030 	movw	r0, #30000	; 0x7530
 800f888:	f7ff ff8c 	bl	800f7a4 <SD_CheckStatusWithTimeout>
 800f88c:	4603      	mov	r3, r0
 800f88e:	2b00      	cmp	r3, #0
 800f890:	da01      	bge.n	800f896 <SD_read+0x26>
  {
    return res;
 800f892:	7dfb      	ldrb	r3, [r7, #23]
 800f894:	e03b      	b.n	800f90e <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800f896:	683a      	ldr	r2, [r7, #0]
 800f898:	6879      	ldr	r1, [r7, #4]
 800f89a:	68b8      	ldr	r0, [r7, #8]
 800f89c:	f7ff fee2 	bl	800f664 <BSP_SD_ReadBlocks_DMA>
 800f8a0:	4603      	mov	r3, r0
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d132      	bne.n	800f90c <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800f8a6:	4b1c      	ldr	r3, [pc, #112]	; (800f918 <SD_read+0xa8>)
 800f8a8:	2200      	movs	r2, #0
 800f8aa:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800f8ac:	f7f8 fd62 	bl	8008374 <HAL_GetTick>
 800f8b0:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800f8b2:	bf00      	nop
 800f8b4:	4b18      	ldr	r3, [pc, #96]	; (800f918 <SD_read+0xa8>)
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	d108      	bne.n	800f8ce <SD_read+0x5e>
 800f8bc:	f7f8 fd5a 	bl	8008374 <HAL_GetTick>
 800f8c0:	4602      	mov	r2, r0
 800f8c2:	693b      	ldr	r3, [r7, #16]
 800f8c4:	1ad3      	subs	r3, r2, r3
 800f8c6:	f247 522f 	movw	r2, #29999	; 0x752f
 800f8ca:	4293      	cmp	r3, r2
 800f8cc:	d9f2      	bls.n	800f8b4 <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 800f8ce:	4b12      	ldr	r3, [pc, #72]	; (800f918 <SD_read+0xa8>)
 800f8d0:	681b      	ldr	r3, [r3, #0]
 800f8d2:	2b00      	cmp	r3, #0
 800f8d4:	d102      	bne.n	800f8dc <SD_read+0x6c>
      {
        res = RES_ERROR;
 800f8d6:	2301      	movs	r3, #1
 800f8d8:	75fb      	strb	r3, [r7, #23]
 800f8da:	e017      	b.n	800f90c <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800f8dc:	4b0e      	ldr	r3, [pc, #56]	; (800f918 <SD_read+0xa8>)
 800f8de:	2200      	movs	r2, #0
 800f8e0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800f8e2:	f7f8 fd47 	bl	8008374 <HAL_GetTick>
 800f8e6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800f8e8:	e007      	b.n	800f8fa <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800f8ea:	f7ff feef 	bl	800f6cc <BSP_SD_GetCardState>
 800f8ee:	4603      	mov	r3, r0
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	d102      	bne.n	800f8fa <SD_read+0x8a>
          {
            res = RES_OK;
 800f8f4:	2300      	movs	r3, #0
 800f8f6:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800f8f8:	e008      	b.n	800f90c <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800f8fa:	f7f8 fd3b 	bl	8008374 <HAL_GetTick>
 800f8fe:	4602      	mov	r2, r0
 800f900:	693b      	ldr	r3, [r7, #16]
 800f902:	1ad3      	subs	r3, r2, r3
 800f904:	f247 522f 	movw	r2, #29999	; 0x752f
 800f908:	4293      	cmp	r3, r2
 800f90a:	d9ee      	bls.n	800f8ea <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800f90c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f90e:	4618      	mov	r0, r3
 800f910:	3718      	adds	r7, #24
 800f912:	46bd      	mov	sp, r7
 800f914:	bd80      	pop	{r7, pc}
 800f916:	bf00      	nop
 800f918:	2003c45c 	.word	0x2003c45c

0800f91c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800f91c:	b580      	push	{r7, lr}
 800f91e:	b086      	sub	sp, #24
 800f920:	af00      	add	r7, sp, #0
 800f922:	60b9      	str	r1, [r7, #8]
 800f924:	607a      	str	r2, [r7, #4]
 800f926:	603b      	str	r3, [r7, #0]
 800f928:	4603      	mov	r3, r0
 800f92a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800f92c:	2301      	movs	r3, #1
 800f92e:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800f930:	4b24      	ldr	r3, [pc, #144]	; (800f9c4 <SD_write+0xa8>)
 800f932:	2200      	movs	r2, #0
 800f934:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800f936:	f247 5030 	movw	r0, #30000	; 0x7530
 800f93a:	f7ff ff33 	bl	800f7a4 <SD_CheckStatusWithTimeout>
 800f93e:	4603      	mov	r3, r0
 800f940:	2b00      	cmp	r3, #0
 800f942:	da01      	bge.n	800f948 <SD_write+0x2c>
  {
    return res;
 800f944:	7dfb      	ldrb	r3, [r7, #23]
 800f946:	e038      	b.n	800f9ba <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800f948:	683a      	ldr	r2, [r7, #0]
 800f94a:	6879      	ldr	r1, [r7, #4]
 800f94c:	68b8      	ldr	r0, [r7, #8]
 800f94e:	f7ff fea3 	bl	800f698 <BSP_SD_WriteBlocks_DMA>
 800f952:	4603      	mov	r3, r0
 800f954:	2b00      	cmp	r3, #0
 800f956:	d12f      	bne.n	800f9b8 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800f958:	f7f8 fd0c 	bl	8008374 <HAL_GetTick>
 800f95c:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800f95e:	bf00      	nop
 800f960:	4b18      	ldr	r3, [pc, #96]	; (800f9c4 <SD_write+0xa8>)
 800f962:	681b      	ldr	r3, [r3, #0]
 800f964:	2b00      	cmp	r3, #0
 800f966:	d108      	bne.n	800f97a <SD_write+0x5e>
 800f968:	f7f8 fd04 	bl	8008374 <HAL_GetTick>
 800f96c:	4602      	mov	r2, r0
 800f96e:	693b      	ldr	r3, [r7, #16]
 800f970:	1ad3      	subs	r3, r2, r3
 800f972:	f247 522f 	movw	r2, #29999	; 0x752f
 800f976:	4293      	cmp	r3, r2
 800f978:	d9f2      	bls.n	800f960 <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 800f97a:	4b12      	ldr	r3, [pc, #72]	; (800f9c4 <SD_write+0xa8>)
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d102      	bne.n	800f988 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800f982:	2301      	movs	r3, #1
 800f984:	75fb      	strb	r3, [r7, #23]
 800f986:	e017      	b.n	800f9b8 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800f988:	4b0e      	ldr	r3, [pc, #56]	; (800f9c4 <SD_write+0xa8>)
 800f98a:	2200      	movs	r2, #0
 800f98c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800f98e:	f7f8 fcf1 	bl	8008374 <HAL_GetTick>
 800f992:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800f994:	e007      	b.n	800f9a6 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800f996:	f7ff fe99 	bl	800f6cc <BSP_SD_GetCardState>
 800f99a:	4603      	mov	r3, r0
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	d102      	bne.n	800f9a6 <SD_write+0x8a>
          {
            res = RES_OK;
 800f9a0:	2300      	movs	r3, #0
 800f9a2:	75fb      	strb	r3, [r7, #23]
            break;
 800f9a4:	e008      	b.n	800f9b8 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800f9a6:	f7f8 fce5 	bl	8008374 <HAL_GetTick>
 800f9aa:	4602      	mov	r2, r0
 800f9ac:	693b      	ldr	r3, [r7, #16]
 800f9ae:	1ad3      	subs	r3, r2, r3
 800f9b0:	f247 522f 	movw	r2, #29999	; 0x752f
 800f9b4:	4293      	cmp	r3, r2
 800f9b6:	d9ee      	bls.n	800f996 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800f9b8:	7dfb      	ldrb	r3, [r7, #23]
}
 800f9ba:	4618      	mov	r0, r3
 800f9bc:	3718      	adds	r7, #24
 800f9be:	46bd      	mov	sp, r7
 800f9c0:	bd80      	pop	{r7, pc}
 800f9c2:	bf00      	nop
 800f9c4:	2003c458 	.word	0x2003c458

0800f9c8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800f9c8:	b580      	push	{r7, lr}
 800f9ca:	b08c      	sub	sp, #48	; 0x30
 800f9cc:	af00      	add	r7, sp, #0
 800f9ce:	4603      	mov	r3, r0
 800f9d0:	603a      	str	r2, [r7, #0]
 800f9d2:	71fb      	strb	r3, [r7, #7]
 800f9d4:	460b      	mov	r3, r1
 800f9d6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800f9d8:	2301      	movs	r3, #1
 800f9da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800f9de:	4b25      	ldr	r3, [pc, #148]	; (800fa74 <SD_ioctl+0xac>)
 800f9e0:	781b      	ldrb	r3, [r3, #0]
 800f9e2:	b2db      	uxtb	r3, r3
 800f9e4:	f003 0301 	and.w	r3, r3, #1
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d001      	beq.n	800f9f0 <SD_ioctl+0x28>
 800f9ec:	2303      	movs	r3, #3
 800f9ee:	e03c      	b.n	800fa6a <SD_ioctl+0xa2>

  switch (cmd)
 800f9f0:	79bb      	ldrb	r3, [r7, #6]
 800f9f2:	2b03      	cmp	r3, #3
 800f9f4:	d834      	bhi.n	800fa60 <SD_ioctl+0x98>
 800f9f6:	a201      	add	r2, pc, #4	; (adr r2, 800f9fc <SD_ioctl+0x34>)
 800f9f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9fc:	0800fa0d 	.word	0x0800fa0d
 800fa00:	0800fa15 	.word	0x0800fa15
 800fa04:	0800fa2d 	.word	0x0800fa2d
 800fa08:	0800fa47 	.word	0x0800fa47
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800fa0c:	2300      	movs	r3, #0
 800fa0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800fa12:	e028      	b.n	800fa66 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800fa14:	f107 030c 	add.w	r3, r7, #12
 800fa18:	4618      	mov	r0, r3
 800fa1a:	f7ff fe67 	bl	800f6ec <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800fa1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fa20:	683b      	ldr	r3, [r7, #0]
 800fa22:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800fa24:	2300      	movs	r3, #0
 800fa26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800fa2a:	e01c      	b.n	800fa66 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800fa2c:	f107 030c 	add.w	r3, r7, #12
 800fa30:	4618      	mov	r0, r3
 800fa32:	f7ff fe5b 	bl	800f6ec <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800fa36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa38:	b29a      	uxth	r2, r3
 800fa3a:	683b      	ldr	r3, [r7, #0]
 800fa3c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800fa3e:	2300      	movs	r3, #0
 800fa40:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800fa44:	e00f      	b.n	800fa66 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800fa46:	f107 030c 	add.w	r3, r7, #12
 800fa4a:	4618      	mov	r0, r3
 800fa4c:	f7ff fe4e 	bl	800f6ec <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800fa50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa52:	0a5a      	lsrs	r2, r3, #9
 800fa54:	683b      	ldr	r3, [r7, #0]
 800fa56:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800fa58:	2300      	movs	r3, #0
 800fa5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800fa5e:	e002      	b.n	800fa66 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800fa60:	2304      	movs	r3, #4
 800fa62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800fa66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800fa6a:	4618      	mov	r0, r3
 800fa6c:	3730      	adds	r7, #48	; 0x30
 800fa6e:	46bd      	mov	sp, r7
 800fa70:	bd80      	pop	{r7, pc}
 800fa72:	bf00      	nop
 800fa74:	20000009 	.word	0x20000009

0800fa78 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800fa78:	b480      	push	{r7}
 800fa7a:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800fa7c:	4b03      	ldr	r3, [pc, #12]	; (800fa8c <BSP_SD_WriteCpltCallback+0x14>)
 800fa7e:	2201      	movs	r2, #1
 800fa80:	601a      	str	r2, [r3, #0]
}
 800fa82:	bf00      	nop
 800fa84:	46bd      	mov	sp, r7
 800fa86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa8a:	4770      	bx	lr
 800fa8c:	2003c458 	.word	0x2003c458

0800fa90 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800fa90:	b480      	push	{r7}
 800fa92:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800fa94:	4b03      	ldr	r3, [pc, #12]	; (800faa4 <BSP_SD_ReadCpltCallback+0x14>)
 800fa96:	2201      	movs	r2, #1
 800fa98:	601a      	str	r2, [r3, #0]
}
 800fa9a:	bf00      	nop
 800fa9c:	46bd      	mov	sp, r7
 800fa9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faa2:	4770      	bx	lr
 800faa4:	2003c45c 	.word	0x2003c45c

0800faa8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800faa8:	b580      	push	{r7, lr}
 800faaa:	b084      	sub	sp, #16
 800faac:	af00      	add	r7, sp, #0
 800faae:	4603      	mov	r3, r0
 800fab0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800fab2:	79fb      	ldrb	r3, [r7, #7]
 800fab4:	4a08      	ldr	r2, [pc, #32]	; (800fad8 <disk_status+0x30>)
 800fab6:	009b      	lsls	r3, r3, #2
 800fab8:	4413      	add	r3, r2
 800faba:	685b      	ldr	r3, [r3, #4]
 800fabc:	685b      	ldr	r3, [r3, #4]
 800fabe:	79fa      	ldrb	r2, [r7, #7]
 800fac0:	4905      	ldr	r1, [pc, #20]	; (800fad8 <disk_status+0x30>)
 800fac2:	440a      	add	r2, r1
 800fac4:	7a12      	ldrb	r2, [r2, #8]
 800fac6:	4610      	mov	r0, r2
 800fac8:	4798      	blx	r3
 800faca:	4603      	mov	r3, r0
 800facc:	73fb      	strb	r3, [r7, #15]
  return stat;
 800face:	7bfb      	ldrb	r3, [r7, #15]
}
 800fad0:	4618      	mov	r0, r3
 800fad2:	3710      	adds	r7, #16
 800fad4:	46bd      	mov	sp, r7
 800fad6:	bd80      	pop	{r7, pc}
 800fad8:	2003c488 	.word	0x2003c488

0800fadc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800fadc:	b580      	push	{r7, lr}
 800fade:	b084      	sub	sp, #16
 800fae0:	af00      	add	r7, sp, #0
 800fae2:	4603      	mov	r3, r0
 800fae4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800fae6:	2300      	movs	r3, #0
 800fae8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800faea:	79fb      	ldrb	r3, [r7, #7]
 800faec:	4a0d      	ldr	r2, [pc, #52]	; (800fb24 <disk_initialize+0x48>)
 800faee:	5cd3      	ldrb	r3, [r2, r3]
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	d111      	bne.n	800fb18 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800faf4:	79fb      	ldrb	r3, [r7, #7]
 800faf6:	4a0b      	ldr	r2, [pc, #44]	; (800fb24 <disk_initialize+0x48>)
 800faf8:	2101      	movs	r1, #1
 800fafa:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800fafc:	79fb      	ldrb	r3, [r7, #7]
 800fafe:	4a09      	ldr	r2, [pc, #36]	; (800fb24 <disk_initialize+0x48>)
 800fb00:	009b      	lsls	r3, r3, #2
 800fb02:	4413      	add	r3, r2
 800fb04:	685b      	ldr	r3, [r3, #4]
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	79fa      	ldrb	r2, [r7, #7]
 800fb0a:	4906      	ldr	r1, [pc, #24]	; (800fb24 <disk_initialize+0x48>)
 800fb0c:	440a      	add	r2, r1
 800fb0e:	7a12      	ldrb	r2, [r2, #8]
 800fb10:	4610      	mov	r0, r2
 800fb12:	4798      	blx	r3
 800fb14:	4603      	mov	r3, r0
 800fb16:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800fb18:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb1a:	4618      	mov	r0, r3
 800fb1c:	3710      	adds	r7, #16
 800fb1e:	46bd      	mov	sp, r7
 800fb20:	bd80      	pop	{r7, pc}
 800fb22:	bf00      	nop
 800fb24:	2003c488 	.word	0x2003c488

0800fb28 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800fb28:	b590      	push	{r4, r7, lr}
 800fb2a:	b087      	sub	sp, #28
 800fb2c:	af00      	add	r7, sp, #0
 800fb2e:	60b9      	str	r1, [r7, #8]
 800fb30:	607a      	str	r2, [r7, #4]
 800fb32:	603b      	str	r3, [r7, #0]
 800fb34:	4603      	mov	r3, r0
 800fb36:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800fb38:	7bfb      	ldrb	r3, [r7, #15]
 800fb3a:	4a0a      	ldr	r2, [pc, #40]	; (800fb64 <disk_read+0x3c>)
 800fb3c:	009b      	lsls	r3, r3, #2
 800fb3e:	4413      	add	r3, r2
 800fb40:	685b      	ldr	r3, [r3, #4]
 800fb42:	689c      	ldr	r4, [r3, #8]
 800fb44:	7bfb      	ldrb	r3, [r7, #15]
 800fb46:	4a07      	ldr	r2, [pc, #28]	; (800fb64 <disk_read+0x3c>)
 800fb48:	4413      	add	r3, r2
 800fb4a:	7a18      	ldrb	r0, [r3, #8]
 800fb4c:	683b      	ldr	r3, [r7, #0]
 800fb4e:	687a      	ldr	r2, [r7, #4]
 800fb50:	68b9      	ldr	r1, [r7, #8]
 800fb52:	47a0      	blx	r4
 800fb54:	4603      	mov	r3, r0
 800fb56:	75fb      	strb	r3, [r7, #23]
  return res;
 800fb58:	7dfb      	ldrb	r3, [r7, #23]
}
 800fb5a:	4618      	mov	r0, r3
 800fb5c:	371c      	adds	r7, #28
 800fb5e:	46bd      	mov	sp, r7
 800fb60:	bd90      	pop	{r4, r7, pc}
 800fb62:	bf00      	nop
 800fb64:	2003c488 	.word	0x2003c488

0800fb68 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800fb68:	b590      	push	{r4, r7, lr}
 800fb6a:	b087      	sub	sp, #28
 800fb6c:	af00      	add	r7, sp, #0
 800fb6e:	60b9      	str	r1, [r7, #8]
 800fb70:	607a      	str	r2, [r7, #4]
 800fb72:	603b      	str	r3, [r7, #0]
 800fb74:	4603      	mov	r3, r0
 800fb76:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800fb78:	7bfb      	ldrb	r3, [r7, #15]
 800fb7a:	4a0a      	ldr	r2, [pc, #40]	; (800fba4 <disk_write+0x3c>)
 800fb7c:	009b      	lsls	r3, r3, #2
 800fb7e:	4413      	add	r3, r2
 800fb80:	685b      	ldr	r3, [r3, #4]
 800fb82:	68dc      	ldr	r4, [r3, #12]
 800fb84:	7bfb      	ldrb	r3, [r7, #15]
 800fb86:	4a07      	ldr	r2, [pc, #28]	; (800fba4 <disk_write+0x3c>)
 800fb88:	4413      	add	r3, r2
 800fb8a:	7a18      	ldrb	r0, [r3, #8]
 800fb8c:	683b      	ldr	r3, [r7, #0]
 800fb8e:	687a      	ldr	r2, [r7, #4]
 800fb90:	68b9      	ldr	r1, [r7, #8]
 800fb92:	47a0      	blx	r4
 800fb94:	4603      	mov	r3, r0
 800fb96:	75fb      	strb	r3, [r7, #23]
  return res;
 800fb98:	7dfb      	ldrb	r3, [r7, #23]
}
 800fb9a:	4618      	mov	r0, r3
 800fb9c:	371c      	adds	r7, #28
 800fb9e:	46bd      	mov	sp, r7
 800fba0:	bd90      	pop	{r4, r7, pc}
 800fba2:	bf00      	nop
 800fba4:	2003c488 	.word	0x2003c488

0800fba8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800fba8:	b580      	push	{r7, lr}
 800fbaa:	b084      	sub	sp, #16
 800fbac:	af00      	add	r7, sp, #0
 800fbae:	4603      	mov	r3, r0
 800fbb0:	603a      	str	r2, [r7, #0]
 800fbb2:	71fb      	strb	r3, [r7, #7]
 800fbb4:	460b      	mov	r3, r1
 800fbb6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800fbb8:	79fb      	ldrb	r3, [r7, #7]
 800fbba:	4a09      	ldr	r2, [pc, #36]	; (800fbe0 <disk_ioctl+0x38>)
 800fbbc:	009b      	lsls	r3, r3, #2
 800fbbe:	4413      	add	r3, r2
 800fbc0:	685b      	ldr	r3, [r3, #4]
 800fbc2:	691b      	ldr	r3, [r3, #16]
 800fbc4:	79fa      	ldrb	r2, [r7, #7]
 800fbc6:	4906      	ldr	r1, [pc, #24]	; (800fbe0 <disk_ioctl+0x38>)
 800fbc8:	440a      	add	r2, r1
 800fbca:	7a10      	ldrb	r0, [r2, #8]
 800fbcc:	79b9      	ldrb	r1, [r7, #6]
 800fbce:	683a      	ldr	r2, [r7, #0]
 800fbd0:	4798      	blx	r3
 800fbd2:	4603      	mov	r3, r0
 800fbd4:	73fb      	strb	r3, [r7, #15]
  return res;
 800fbd6:	7bfb      	ldrb	r3, [r7, #15]
}
 800fbd8:	4618      	mov	r0, r3
 800fbda:	3710      	adds	r7, #16
 800fbdc:	46bd      	mov	sp, r7
 800fbde:	bd80      	pop	{r7, pc}
 800fbe0:	2003c488 	.word	0x2003c488

0800fbe4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800fbe4:	b480      	push	{r7}
 800fbe6:	b085      	sub	sp, #20
 800fbe8:	af00      	add	r7, sp, #0
 800fbea:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	3301      	adds	r3, #1
 800fbf0:	781b      	ldrb	r3, [r3, #0]
 800fbf2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800fbf4:	89fb      	ldrh	r3, [r7, #14]
 800fbf6:	021b      	lsls	r3, r3, #8
 800fbf8:	b21a      	sxth	r2, r3
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	781b      	ldrb	r3, [r3, #0]
 800fbfe:	b21b      	sxth	r3, r3
 800fc00:	4313      	orrs	r3, r2
 800fc02:	b21b      	sxth	r3, r3
 800fc04:	81fb      	strh	r3, [r7, #14]
	return rv;
 800fc06:	89fb      	ldrh	r3, [r7, #14]
}
 800fc08:	4618      	mov	r0, r3
 800fc0a:	3714      	adds	r7, #20
 800fc0c:	46bd      	mov	sp, r7
 800fc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc12:	4770      	bx	lr

0800fc14 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800fc14:	b480      	push	{r7}
 800fc16:	b085      	sub	sp, #20
 800fc18:	af00      	add	r7, sp, #0
 800fc1a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	3303      	adds	r3, #3
 800fc20:	781b      	ldrb	r3, [r3, #0]
 800fc22:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800fc24:	68fb      	ldr	r3, [r7, #12]
 800fc26:	021b      	lsls	r3, r3, #8
 800fc28:	687a      	ldr	r2, [r7, #4]
 800fc2a:	3202      	adds	r2, #2
 800fc2c:	7812      	ldrb	r2, [r2, #0]
 800fc2e:	4313      	orrs	r3, r2
 800fc30:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800fc32:	68fb      	ldr	r3, [r7, #12]
 800fc34:	021b      	lsls	r3, r3, #8
 800fc36:	687a      	ldr	r2, [r7, #4]
 800fc38:	3201      	adds	r2, #1
 800fc3a:	7812      	ldrb	r2, [r2, #0]
 800fc3c:	4313      	orrs	r3, r2
 800fc3e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800fc40:	68fb      	ldr	r3, [r7, #12]
 800fc42:	021b      	lsls	r3, r3, #8
 800fc44:	687a      	ldr	r2, [r7, #4]
 800fc46:	7812      	ldrb	r2, [r2, #0]
 800fc48:	4313      	orrs	r3, r2
 800fc4a:	60fb      	str	r3, [r7, #12]
	return rv;
 800fc4c:	68fb      	ldr	r3, [r7, #12]
}
 800fc4e:	4618      	mov	r0, r3
 800fc50:	3714      	adds	r7, #20
 800fc52:	46bd      	mov	sp, r7
 800fc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc58:	4770      	bx	lr

0800fc5a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800fc5a:	b480      	push	{r7}
 800fc5c:	b083      	sub	sp, #12
 800fc5e:	af00      	add	r7, sp, #0
 800fc60:	6078      	str	r0, [r7, #4]
 800fc62:	460b      	mov	r3, r1
 800fc64:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	1c5a      	adds	r2, r3, #1
 800fc6a:	607a      	str	r2, [r7, #4]
 800fc6c:	887a      	ldrh	r2, [r7, #2]
 800fc6e:	b2d2      	uxtb	r2, r2
 800fc70:	701a      	strb	r2, [r3, #0]
 800fc72:	887b      	ldrh	r3, [r7, #2]
 800fc74:	0a1b      	lsrs	r3, r3, #8
 800fc76:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	1c5a      	adds	r2, r3, #1
 800fc7c:	607a      	str	r2, [r7, #4]
 800fc7e:	887a      	ldrh	r2, [r7, #2]
 800fc80:	b2d2      	uxtb	r2, r2
 800fc82:	701a      	strb	r2, [r3, #0]
}
 800fc84:	bf00      	nop
 800fc86:	370c      	adds	r7, #12
 800fc88:	46bd      	mov	sp, r7
 800fc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc8e:	4770      	bx	lr

0800fc90 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800fc90:	b480      	push	{r7}
 800fc92:	b083      	sub	sp, #12
 800fc94:	af00      	add	r7, sp, #0
 800fc96:	6078      	str	r0, [r7, #4]
 800fc98:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	1c5a      	adds	r2, r3, #1
 800fc9e:	607a      	str	r2, [r7, #4]
 800fca0:	683a      	ldr	r2, [r7, #0]
 800fca2:	b2d2      	uxtb	r2, r2
 800fca4:	701a      	strb	r2, [r3, #0]
 800fca6:	683b      	ldr	r3, [r7, #0]
 800fca8:	0a1b      	lsrs	r3, r3, #8
 800fcaa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	1c5a      	adds	r2, r3, #1
 800fcb0:	607a      	str	r2, [r7, #4]
 800fcb2:	683a      	ldr	r2, [r7, #0]
 800fcb4:	b2d2      	uxtb	r2, r2
 800fcb6:	701a      	strb	r2, [r3, #0]
 800fcb8:	683b      	ldr	r3, [r7, #0]
 800fcba:	0a1b      	lsrs	r3, r3, #8
 800fcbc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	1c5a      	adds	r2, r3, #1
 800fcc2:	607a      	str	r2, [r7, #4]
 800fcc4:	683a      	ldr	r2, [r7, #0]
 800fcc6:	b2d2      	uxtb	r2, r2
 800fcc8:	701a      	strb	r2, [r3, #0]
 800fcca:	683b      	ldr	r3, [r7, #0]
 800fccc:	0a1b      	lsrs	r3, r3, #8
 800fcce:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	1c5a      	adds	r2, r3, #1
 800fcd4:	607a      	str	r2, [r7, #4]
 800fcd6:	683a      	ldr	r2, [r7, #0]
 800fcd8:	b2d2      	uxtb	r2, r2
 800fcda:	701a      	strb	r2, [r3, #0]
}
 800fcdc:	bf00      	nop
 800fcde:	370c      	adds	r7, #12
 800fce0:	46bd      	mov	sp, r7
 800fce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fce6:	4770      	bx	lr

0800fce8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800fce8:	b480      	push	{r7}
 800fcea:	b087      	sub	sp, #28
 800fcec:	af00      	add	r7, sp, #0
 800fcee:	60f8      	str	r0, [r7, #12]
 800fcf0:	60b9      	str	r1, [r7, #8]
 800fcf2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800fcf4:	68fb      	ldr	r3, [r7, #12]
 800fcf6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800fcf8:	68bb      	ldr	r3, [r7, #8]
 800fcfa:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d00d      	beq.n	800fd1e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800fd02:	693a      	ldr	r2, [r7, #16]
 800fd04:	1c53      	adds	r3, r2, #1
 800fd06:	613b      	str	r3, [r7, #16]
 800fd08:	697b      	ldr	r3, [r7, #20]
 800fd0a:	1c59      	adds	r1, r3, #1
 800fd0c:	6179      	str	r1, [r7, #20]
 800fd0e:	7812      	ldrb	r2, [r2, #0]
 800fd10:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	3b01      	subs	r3, #1
 800fd16:	607b      	str	r3, [r7, #4]
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	d1f1      	bne.n	800fd02 <mem_cpy+0x1a>
	}
}
 800fd1e:	bf00      	nop
 800fd20:	371c      	adds	r7, #28
 800fd22:	46bd      	mov	sp, r7
 800fd24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd28:	4770      	bx	lr

0800fd2a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800fd2a:	b480      	push	{r7}
 800fd2c:	b087      	sub	sp, #28
 800fd2e:	af00      	add	r7, sp, #0
 800fd30:	60f8      	str	r0, [r7, #12]
 800fd32:	60b9      	str	r1, [r7, #8]
 800fd34:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800fd36:	68fb      	ldr	r3, [r7, #12]
 800fd38:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800fd3a:	697b      	ldr	r3, [r7, #20]
 800fd3c:	1c5a      	adds	r2, r3, #1
 800fd3e:	617a      	str	r2, [r7, #20]
 800fd40:	68ba      	ldr	r2, [r7, #8]
 800fd42:	b2d2      	uxtb	r2, r2
 800fd44:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	3b01      	subs	r3, #1
 800fd4a:	607b      	str	r3, [r7, #4]
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d1f3      	bne.n	800fd3a <mem_set+0x10>
}
 800fd52:	bf00      	nop
 800fd54:	371c      	adds	r7, #28
 800fd56:	46bd      	mov	sp, r7
 800fd58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd5c:	4770      	bx	lr

0800fd5e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800fd5e:	b480      	push	{r7}
 800fd60:	b089      	sub	sp, #36	; 0x24
 800fd62:	af00      	add	r7, sp, #0
 800fd64:	60f8      	str	r0, [r7, #12]
 800fd66:	60b9      	str	r1, [r7, #8]
 800fd68:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800fd6a:	68fb      	ldr	r3, [r7, #12]
 800fd6c:	61fb      	str	r3, [r7, #28]
 800fd6e:	68bb      	ldr	r3, [r7, #8]
 800fd70:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800fd72:	2300      	movs	r3, #0
 800fd74:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800fd76:	69fb      	ldr	r3, [r7, #28]
 800fd78:	1c5a      	adds	r2, r3, #1
 800fd7a:	61fa      	str	r2, [r7, #28]
 800fd7c:	781b      	ldrb	r3, [r3, #0]
 800fd7e:	4619      	mov	r1, r3
 800fd80:	69bb      	ldr	r3, [r7, #24]
 800fd82:	1c5a      	adds	r2, r3, #1
 800fd84:	61ba      	str	r2, [r7, #24]
 800fd86:	781b      	ldrb	r3, [r3, #0]
 800fd88:	1acb      	subs	r3, r1, r3
 800fd8a:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	3b01      	subs	r3, #1
 800fd90:	607b      	str	r3, [r7, #4]
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	2b00      	cmp	r3, #0
 800fd96:	d002      	beq.n	800fd9e <mem_cmp+0x40>
 800fd98:	697b      	ldr	r3, [r7, #20]
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d0eb      	beq.n	800fd76 <mem_cmp+0x18>

	return r;
 800fd9e:	697b      	ldr	r3, [r7, #20]
}
 800fda0:	4618      	mov	r0, r3
 800fda2:	3724      	adds	r7, #36	; 0x24
 800fda4:	46bd      	mov	sp, r7
 800fda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdaa:	4770      	bx	lr

0800fdac <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800fdac:	b480      	push	{r7}
 800fdae:	b083      	sub	sp, #12
 800fdb0:	af00      	add	r7, sp, #0
 800fdb2:	6078      	str	r0, [r7, #4]
 800fdb4:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800fdb6:	e002      	b.n	800fdbe <chk_chr+0x12>
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	3301      	adds	r3, #1
 800fdbc:	607b      	str	r3, [r7, #4]
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	781b      	ldrb	r3, [r3, #0]
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d005      	beq.n	800fdd2 <chk_chr+0x26>
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	781b      	ldrb	r3, [r3, #0]
 800fdca:	461a      	mov	r2, r3
 800fdcc:	683b      	ldr	r3, [r7, #0]
 800fdce:	4293      	cmp	r3, r2
 800fdd0:	d1f2      	bne.n	800fdb8 <chk_chr+0xc>
	return *str;
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	781b      	ldrb	r3, [r3, #0]
}
 800fdd6:	4618      	mov	r0, r3
 800fdd8:	370c      	adds	r7, #12
 800fdda:	46bd      	mov	sp, r7
 800fddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fde0:	4770      	bx	lr
	...

0800fde4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800fde4:	b480      	push	{r7}
 800fde6:	b085      	sub	sp, #20
 800fde8:	af00      	add	r7, sp, #0
 800fdea:	6078      	str	r0, [r7, #4]
 800fdec:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800fdee:	2300      	movs	r3, #0
 800fdf0:	60bb      	str	r3, [r7, #8]
 800fdf2:	68bb      	ldr	r3, [r7, #8]
 800fdf4:	60fb      	str	r3, [r7, #12]
 800fdf6:	e029      	b.n	800fe4c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800fdf8:	4a27      	ldr	r2, [pc, #156]	; (800fe98 <chk_lock+0xb4>)
 800fdfa:	68fb      	ldr	r3, [r7, #12]
 800fdfc:	011b      	lsls	r3, r3, #4
 800fdfe:	4413      	add	r3, r2
 800fe00:	681b      	ldr	r3, [r3, #0]
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d01d      	beq.n	800fe42 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800fe06:	4a24      	ldr	r2, [pc, #144]	; (800fe98 <chk_lock+0xb4>)
 800fe08:	68fb      	ldr	r3, [r7, #12]
 800fe0a:	011b      	lsls	r3, r3, #4
 800fe0c:	4413      	add	r3, r2
 800fe0e:	681a      	ldr	r2, [r3, #0]
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	681b      	ldr	r3, [r3, #0]
 800fe14:	429a      	cmp	r2, r3
 800fe16:	d116      	bne.n	800fe46 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800fe18:	4a1f      	ldr	r2, [pc, #124]	; (800fe98 <chk_lock+0xb4>)
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	011b      	lsls	r3, r3, #4
 800fe1e:	4413      	add	r3, r2
 800fe20:	3304      	adds	r3, #4
 800fe22:	681a      	ldr	r2, [r3, #0]
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800fe28:	429a      	cmp	r2, r3
 800fe2a:	d10c      	bne.n	800fe46 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800fe2c:	4a1a      	ldr	r2, [pc, #104]	; (800fe98 <chk_lock+0xb4>)
 800fe2e:	68fb      	ldr	r3, [r7, #12]
 800fe30:	011b      	lsls	r3, r3, #4
 800fe32:	4413      	add	r3, r2
 800fe34:	3308      	adds	r3, #8
 800fe36:	681a      	ldr	r2, [r3, #0]
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800fe3c:	429a      	cmp	r2, r3
 800fe3e:	d102      	bne.n	800fe46 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800fe40:	e007      	b.n	800fe52 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800fe42:	2301      	movs	r3, #1
 800fe44:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800fe46:	68fb      	ldr	r3, [r7, #12]
 800fe48:	3301      	adds	r3, #1
 800fe4a:	60fb      	str	r3, [r7, #12]
 800fe4c:	68fb      	ldr	r3, [r7, #12]
 800fe4e:	2b01      	cmp	r3, #1
 800fe50:	d9d2      	bls.n	800fdf8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800fe52:	68fb      	ldr	r3, [r7, #12]
 800fe54:	2b02      	cmp	r3, #2
 800fe56:	d109      	bne.n	800fe6c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800fe58:	68bb      	ldr	r3, [r7, #8]
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d102      	bne.n	800fe64 <chk_lock+0x80>
 800fe5e:	683b      	ldr	r3, [r7, #0]
 800fe60:	2b02      	cmp	r3, #2
 800fe62:	d101      	bne.n	800fe68 <chk_lock+0x84>
 800fe64:	2300      	movs	r3, #0
 800fe66:	e010      	b.n	800fe8a <chk_lock+0xa6>
 800fe68:	2312      	movs	r3, #18
 800fe6a:	e00e      	b.n	800fe8a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800fe6c:	683b      	ldr	r3, [r7, #0]
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d108      	bne.n	800fe84 <chk_lock+0xa0>
 800fe72:	4a09      	ldr	r2, [pc, #36]	; (800fe98 <chk_lock+0xb4>)
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	011b      	lsls	r3, r3, #4
 800fe78:	4413      	add	r3, r2
 800fe7a:	330c      	adds	r3, #12
 800fe7c:	881b      	ldrh	r3, [r3, #0]
 800fe7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fe82:	d101      	bne.n	800fe88 <chk_lock+0xa4>
 800fe84:	2310      	movs	r3, #16
 800fe86:	e000      	b.n	800fe8a <chk_lock+0xa6>
 800fe88:	2300      	movs	r3, #0
}
 800fe8a:	4618      	mov	r0, r3
 800fe8c:	3714      	adds	r7, #20
 800fe8e:	46bd      	mov	sp, r7
 800fe90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe94:	4770      	bx	lr
 800fe96:	bf00      	nop
 800fe98:	2003c468 	.word	0x2003c468

0800fe9c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800fe9c:	b480      	push	{r7}
 800fe9e:	b083      	sub	sp, #12
 800fea0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800fea2:	2300      	movs	r3, #0
 800fea4:	607b      	str	r3, [r7, #4]
 800fea6:	e002      	b.n	800feae <enq_lock+0x12>
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	3301      	adds	r3, #1
 800feac:	607b      	str	r3, [r7, #4]
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	2b01      	cmp	r3, #1
 800feb2:	d806      	bhi.n	800fec2 <enq_lock+0x26>
 800feb4:	4a09      	ldr	r2, [pc, #36]	; (800fedc <enq_lock+0x40>)
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	011b      	lsls	r3, r3, #4
 800feba:	4413      	add	r3, r2
 800febc:	681b      	ldr	r3, [r3, #0]
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d1f2      	bne.n	800fea8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	2b02      	cmp	r3, #2
 800fec6:	bf14      	ite	ne
 800fec8:	2301      	movne	r3, #1
 800feca:	2300      	moveq	r3, #0
 800fecc:	b2db      	uxtb	r3, r3
}
 800fece:	4618      	mov	r0, r3
 800fed0:	370c      	adds	r7, #12
 800fed2:	46bd      	mov	sp, r7
 800fed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fed8:	4770      	bx	lr
 800feda:	bf00      	nop
 800fedc:	2003c468 	.word	0x2003c468

0800fee0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800fee0:	b480      	push	{r7}
 800fee2:	b085      	sub	sp, #20
 800fee4:	af00      	add	r7, sp, #0
 800fee6:	6078      	str	r0, [r7, #4]
 800fee8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800feea:	2300      	movs	r3, #0
 800feec:	60fb      	str	r3, [r7, #12]
 800feee:	e01f      	b.n	800ff30 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800fef0:	4a41      	ldr	r2, [pc, #260]	; (800fff8 <inc_lock+0x118>)
 800fef2:	68fb      	ldr	r3, [r7, #12]
 800fef4:	011b      	lsls	r3, r3, #4
 800fef6:	4413      	add	r3, r2
 800fef8:	681a      	ldr	r2, [r3, #0]
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	681b      	ldr	r3, [r3, #0]
 800fefe:	429a      	cmp	r2, r3
 800ff00:	d113      	bne.n	800ff2a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800ff02:	4a3d      	ldr	r2, [pc, #244]	; (800fff8 <inc_lock+0x118>)
 800ff04:	68fb      	ldr	r3, [r7, #12]
 800ff06:	011b      	lsls	r3, r3, #4
 800ff08:	4413      	add	r3, r2
 800ff0a:	3304      	adds	r3, #4
 800ff0c:	681a      	ldr	r2, [r3, #0]
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800ff12:	429a      	cmp	r2, r3
 800ff14:	d109      	bne.n	800ff2a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800ff16:	4a38      	ldr	r2, [pc, #224]	; (800fff8 <inc_lock+0x118>)
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	011b      	lsls	r3, r3, #4
 800ff1c:	4413      	add	r3, r2
 800ff1e:	3308      	adds	r3, #8
 800ff20:	681a      	ldr	r2, [r3, #0]
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800ff26:	429a      	cmp	r2, r3
 800ff28:	d006      	beq.n	800ff38 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ff2a:	68fb      	ldr	r3, [r7, #12]
 800ff2c:	3301      	adds	r3, #1
 800ff2e:	60fb      	str	r3, [r7, #12]
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	2b01      	cmp	r3, #1
 800ff34:	d9dc      	bls.n	800fef0 <inc_lock+0x10>
 800ff36:	e000      	b.n	800ff3a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800ff38:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800ff3a:	68fb      	ldr	r3, [r7, #12]
 800ff3c:	2b02      	cmp	r3, #2
 800ff3e:	d132      	bne.n	800ffa6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ff40:	2300      	movs	r3, #0
 800ff42:	60fb      	str	r3, [r7, #12]
 800ff44:	e002      	b.n	800ff4c <inc_lock+0x6c>
 800ff46:	68fb      	ldr	r3, [r7, #12]
 800ff48:	3301      	adds	r3, #1
 800ff4a:	60fb      	str	r3, [r7, #12]
 800ff4c:	68fb      	ldr	r3, [r7, #12]
 800ff4e:	2b01      	cmp	r3, #1
 800ff50:	d806      	bhi.n	800ff60 <inc_lock+0x80>
 800ff52:	4a29      	ldr	r2, [pc, #164]	; (800fff8 <inc_lock+0x118>)
 800ff54:	68fb      	ldr	r3, [r7, #12]
 800ff56:	011b      	lsls	r3, r3, #4
 800ff58:	4413      	add	r3, r2
 800ff5a:	681b      	ldr	r3, [r3, #0]
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	d1f2      	bne.n	800ff46 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800ff60:	68fb      	ldr	r3, [r7, #12]
 800ff62:	2b02      	cmp	r3, #2
 800ff64:	d101      	bne.n	800ff6a <inc_lock+0x8a>
 800ff66:	2300      	movs	r3, #0
 800ff68:	e040      	b.n	800ffec <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	681a      	ldr	r2, [r3, #0]
 800ff6e:	4922      	ldr	r1, [pc, #136]	; (800fff8 <inc_lock+0x118>)
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	011b      	lsls	r3, r3, #4
 800ff74:	440b      	add	r3, r1
 800ff76:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	689a      	ldr	r2, [r3, #8]
 800ff7c:	491e      	ldr	r1, [pc, #120]	; (800fff8 <inc_lock+0x118>)
 800ff7e:	68fb      	ldr	r3, [r7, #12]
 800ff80:	011b      	lsls	r3, r3, #4
 800ff82:	440b      	add	r3, r1
 800ff84:	3304      	adds	r3, #4
 800ff86:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	695a      	ldr	r2, [r3, #20]
 800ff8c:	491a      	ldr	r1, [pc, #104]	; (800fff8 <inc_lock+0x118>)
 800ff8e:	68fb      	ldr	r3, [r7, #12]
 800ff90:	011b      	lsls	r3, r3, #4
 800ff92:	440b      	add	r3, r1
 800ff94:	3308      	adds	r3, #8
 800ff96:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800ff98:	4a17      	ldr	r2, [pc, #92]	; (800fff8 <inc_lock+0x118>)
 800ff9a:	68fb      	ldr	r3, [r7, #12]
 800ff9c:	011b      	lsls	r3, r3, #4
 800ff9e:	4413      	add	r3, r2
 800ffa0:	330c      	adds	r3, #12
 800ffa2:	2200      	movs	r2, #0
 800ffa4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800ffa6:	683b      	ldr	r3, [r7, #0]
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	d009      	beq.n	800ffc0 <inc_lock+0xe0>
 800ffac:	4a12      	ldr	r2, [pc, #72]	; (800fff8 <inc_lock+0x118>)
 800ffae:	68fb      	ldr	r3, [r7, #12]
 800ffb0:	011b      	lsls	r3, r3, #4
 800ffb2:	4413      	add	r3, r2
 800ffb4:	330c      	adds	r3, #12
 800ffb6:	881b      	ldrh	r3, [r3, #0]
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d001      	beq.n	800ffc0 <inc_lock+0xe0>
 800ffbc:	2300      	movs	r3, #0
 800ffbe:	e015      	b.n	800ffec <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800ffc0:	683b      	ldr	r3, [r7, #0]
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	d108      	bne.n	800ffd8 <inc_lock+0xf8>
 800ffc6:	4a0c      	ldr	r2, [pc, #48]	; (800fff8 <inc_lock+0x118>)
 800ffc8:	68fb      	ldr	r3, [r7, #12]
 800ffca:	011b      	lsls	r3, r3, #4
 800ffcc:	4413      	add	r3, r2
 800ffce:	330c      	adds	r3, #12
 800ffd0:	881b      	ldrh	r3, [r3, #0]
 800ffd2:	3301      	adds	r3, #1
 800ffd4:	b29a      	uxth	r2, r3
 800ffd6:	e001      	b.n	800ffdc <inc_lock+0xfc>
 800ffd8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ffdc:	4906      	ldr	r1, [pc, #24]	; (800fff8 <inc_lock+0x118>)
 800ffde:	68fb      	ldr	r3, [r7, #12]
 800ffe0:	011b      	lsls	r3, r3, #4
 800ffe2:	440b      	add	r3, r1
 800ffe4:	330c      	adds	r3, #12
 800ffe6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800ffe8:	68fb      	ldr	r3, [r7, #12]
 800ffea:	3301      	adds	r3, #1
}
 800ffec:	4618      	mov	r0, r3
 800ffee:	3714      	adds	r7, #20
 800fff0:	46bd      	mov	sp, r7
 800fff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fff6:	4770      	bx	lr
 800fff8:	2003c468 	.word	0x2003c468

0800fffc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800fffc:	b480      	push	{r7}
 800fffe:	b085      	sub	sp, #20
 8010000:	af00      	add	r7, sp, #0
 8010002:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	3b01      	subs	r3, #1
 8010008:	607b      	str	r3, [r7, #4]
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	2b01      	cmp	r3, #1
 801000e:	d825      	bhi.n	801005c <dec_lock+0x60>
		n = Files[i].ctr;
 8010010:	4a17      	ldr	r2, [pc, #92]	; (8010070 <dec_lock+0x74>)
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	011b      	lsls	r3, r3, #4
 8010016:	4413      	add	r3, r2
 8010018:	330c      	adds	r3, #12
 801001a:	881b      	ldrh	r3, [r3, #0]
 801001c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 801001e:	89fb      	ldrh	r3, [r7, #14]
 8010020:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010024:	d101      	bne.n	801002a <dec_lock+0x2e>
 8010026:	2300      	movs	r3, #0
 8010028:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 801002a:	89fb      	ldrh	r3, [r7, #14]
 801002c:	2b00      	cmp	r3, #0
 801002e:	d002      	beq.n	8010036 <dec_lock+0x3a>
 8010030:	89fb      	ldrh	r3, [r7, #14]
 8010032:	3b01      	subs	r3, #1
 8010034:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8010036:	4a0e      	ldr	r2, [pc, #56]	; (8010070 <dec_lock+0x74>)
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	011b      	lsls	r3, r3, #4
 801003c:	4413      	add	r3, r2
 801003e:	330c      	adds	r3, #12
 8010040:	89fa      	ldrh	r2, [r7, #14]
 8010042:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8010044:	89fb      	ldrh	r3, [r7, #14]
 8010046:	2b00      	cmp	r3, #0
 8010048:	d105      	bne.n	8010056 <dec_lock+0x5a>
 801004a:	4a09      	ldr	r2, [pc, #36]	; (8010070 <dec_lock+0x74>)
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	011b      	lsls	r3, r3, #4
 8010050:	4413      	add	r3, r2
 8010052:	2200      	movs	r2, #0
 8010054:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8010056:	2300      	movs	r3, #0
 8010058:	737b      	strb	r3, [r7, #13]
 801005a:	e001      	b.n	8010060 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 801005c:	2302      	movs	r3, #2
 801005e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8010060:	7b7b      	ldrb	r3, [r7, #13]
}
 8010062:	4618      	mov	r0, r3
 8010064:	3714      	adds	r7, #20
 8010066:	46bd      	mov	sp, r7
 8010068:	f85d 7b04 	ldr.w	r7, [sp], #4
 801006c:	4770      	bx	lr
 801006e:	bf00      	nop
 8010070:	2003c468 	.word	0x2003c468

08010074 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8010074:	b480      	push	{r7}
 8010076:	b085      	sub	sp, #20
 8010078:	af00      	add	r7, sp, #0
 801007a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 801007c:	2300      	movs	r3, #0
 801007e:	60fb      	str	r3, [r7, #12]
 8010080:	e010      	b.n	80100a4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8010082:	4a0d      	ldr	r2, [pc, #52]	; (80100b8 <clear_lock+0x44>)
 8010084:	68fb      	ldr	r3, [r7, #12]
 8010086:	011b      	lsls	r3, r3, #4
 8010088:	4413      	add	r3, r2
 801008a:	681b      	ldr	r3, [r3, #0]
 801008c:	687a      	ldr	r2, [r7, #4]
 801008e:	429a      	cmp	r2, r3
 8010090:	d105      	bne.n	801009e <clear_lock+0x2a>
 8010092:	4a09      	ldr	r2, [pc, #36]	; (80100b8 <clear_lock+0x44>)
 8010094:	68fb      	ldr	r3, [r7, #12]
 8010096:	011b      	lsls	r3, r3, #4
 8010098:	4413      	add	r3, r2
 801009a:	2200      	movs	r2, #0
 801009c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801009e:	68fb      	ldr	r3, [r7, #12]
 80100a0:	3301      	adds	r3, #1
 80100a2:	60fb      	str	r3, [r7, #12]
 80100a4:	68fb      	ldr	r3, [r7, #12]
 80100a6:	2b01      	cmp	r3, #1
 80100a8:	d9eb      	bls.n	8010082 <clear_lock+0xe>
	}
}
 80100aa:	bf00      	nop
 80100ac:	3714      	adds	r7, #20
 80100ae:	46bd      	mov	sp, r7
 80100b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100b4:	4770      	bx	lr
 80100b6:	bf00      	nop
 80100b8:	2003c468 	.word	0x2003c468

080100bc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80100bc:	b580      	push	{r7, lr}
 80100be:	b086      	sub	sp, #24
 80100c0:	af00      	add	r7, sp, #0
 80100c2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80100c4:	2300      	movs	r3, #0
 80100c6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	78db      	ldrb	r3, [r3, #3]
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d034      	beq.n	801013a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80100d4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	7858      	ldrb	r0, [r3, #1]
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80100e0:	2301      	movs	r3, #1
 80100e2:	697a      	ldr	r2, [r7, #20]
 80100e4:	f7ff fd40 	bl	800fb68 <disk_write>
 80100e8:	4603      	mov	r3, r0
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	d002      	beq.n	80100f4 <sync_window+0x38>
			res = FR_DISK_ERR;
 80100ee:	2301      	movs	r3, #1
 80100f0:	73fb      	strb	r3, [r7, #15]
 80100f2:	e022      	b.n	801013a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	2200      	movs	r2, #0
 80100f8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80100fe:	697a      	ldr	r2, [r7, #20]
 8010100:	1ad2      	subs	r2, r2, r3
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	6a1b      	ldr	r3, [r3, #32]
 8010106:	429a      	cmp	r2, r3
 8010108:	d217      	bcs.n	801013a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	789b      	ldrb	r3, [r3, #2]
 801010e:	613b      	str	r3, [r7, #16]
 8010110:	e010      	b.n	8010134 <sync_window+0x78>
					wsect += fs->fsize;
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	6a1b      	ldr	r3, [r3, #32]
 8010116:	697a      	ldr	r2, [r7, #20]
 8010118:	4413      	add	r3, r2
 801011a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	7858      	ldrb	r0, [r3, #1]
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010126:	2301      	movs	r3, #1
 8010128:	697a      	ldr	r2, [r7, #20]
 801012a:	f7ff fd1d 	bl	800fb68 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801012e:	693b      	ldr	r3, [r7, #16]
 8010130:	3b01      	subs	r3, #1
 8010132:	613b      	str	r3, [r7, #16]
 8010134:	693b      	ldr	r3, [r7, #16]
 8010136:	2b01      	cmp	r3, #1
 8010138:	d8eb      	bhi.n	8010112 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 801013a:	7bfb      	ldrb	r3, [r7, #15]
}
 801013c:	4618      	mov	r0, r3
 801013e:	3718      	adds	r7, #24
 8010140:	46bd      	mov	sp, r7
 8010142:	bd80      	pop	{r7, pc}

08010144 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8010144:	b580      	push	{r7, lr}
 8010146:	b084      	sub	sp, #16
 8010148:	af00      	add	r7, sp, #0
 801014a:	6078      	str	r0, [r7, #4]
 801014c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801014e:	2300      	movs	r3, #0
 8010150:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010156:	683a      	ldr	r2, [r7, #0]
 8010158:	429a      	cmp	r2, r3
 801015a:	d01b      	beq.n	8010194 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 801015c:	6878      	ldr	r0, [r7, #4]
 801015e:	f7ff ffad 	bl	80100bc <sync_window>
 8010162:	4603      	mov	r3, r0
 8010164:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8010166:	7bfb      	ldrb	r3, [r7, #15]
 8010168:	2b00      	cmp	r3, #0
 801016a:	d113      	bne.n	8010194 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	7858      	ldrb	r0, [r3, #1]
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010176:	2301      	movs	r3, #1
 8010178:	683a      	ldr	r2, [r7, #0]
 801017a:	f7ff fcd5 	bl	800fb28 <disk_read>
 801017e:	4603      	mov	r3, r0
 8010180:	2b00      	cmp	r3, #0
 8010182:	d004      	beq.n	801018e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8010184:	f04f 33ff 	mov.w	r3, #4294967295
 8010188:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 801018a:	2301      	movs	r3, #1
 801018c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	683a      	ldr	r2, [r7, #0]
 8010192:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8010194:	7bfb      	ldrb	r3, [r7, #15]
}
 8010196:	4618      	mov	r0, r3
 8010198:	3710      	adds	r7, #16
 801019a:	46bd      	mov	sp, r7
 801019c:	bd80      	pop	{r7, pc}
	...

080101a0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80101a0:	b580      	push	{r7, lr}
 80101a2:	b084      	sub	sp, #16
 80101a4:	af00      	add	r7, sp, #0
 80101a6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80101a8:	6878      	ldr	r0, [r7, #4]
 80101aa:	f7ff ff87 	bl	80100bc <sync_window>
 80101ae:	4603      	mov	r3, r0
 80101b0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80101b2:	7bfb      	ldrb	r3, [r7, #15]
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d159      	bne.n	801026c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	781b      	ldrb	r3, [r3, #0]
 80101bc:	2b03      	cmp	r3, #3
 80101be:	d149      	bne.n	8010254 <sync_fs+0xb4>
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	791b      	ldrb	r3, [r3, #4]
 80101c4:	2b01      	cmp	r3, #1
 80101c6:	d145      	bne.n	8010254 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	899b      	ldrh	r3, [r3, #12]
 80101d2:	461a      	mov	r2, r3
 80101d4:	2100      	movs	r1, #0
 80101d6:	f7ff fda8 	bl	800fd2a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	3338      	adds	r3, #56	; 0x38
 80101de:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80101e2:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80101e6:	4618      	mov	r0, r3
 80101e8:	f7ff fd37 	bl	800fc5a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	3338      	adds	r3, #56	; 0x38
 80101f0:	4921      	ldr	r1, [pc, #132]	; (8010278 <sync_fs+0xd8>)
 80101f2:	4618      	mov	r0, r3
 80101f4:	f7ff fd4c 	bl	800fc90 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	3338      	adds	r3, #56	; 0x38
 80101fc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8010200:	491e      	ldr	r1, [pc, #120]	; (801027c <sync_fs+0xdc>)
 8010202:	4618      	mov	r0, r3
 8010204:	f7ff fd44 	bl	800fc90 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	3338      	adds	r3, #56	; 0x38
 801020c:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	695b      	ldr	r3, [r3, #20]
 8010214:	4619      	mov	r1, r3
 8010216:	4610      	mov	r0, r2
 8010218:	f7ff fd3a 	bl	800fc90 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	3338      	adds	r3, #56	; 0x38
 8010220:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	691b      	ldr	r3, [r3, #16]
 8010228:	4619      	mov	r1, r3
 801022a:	4610      	mov	r0, r2
 801022c:	f7ff fd30 	bl	800fc90 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010234:	1c5a      	adds	r2, r3, #1
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	7858      	ldrb	r0, [r3, #1]
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010248:	2301      	movs	r3, #1
 801024a:	f7ff fc8d 	bl	800fb68 <disk_write>
			fs->fsi_flag = 0;
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	2200      	movs	r2, #0
 8010252:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	785b      	ldrb	r3, [r3, #1]
 8010258:	2200      	movs	r2, #0
 801025a:	2100      	movs	r1, #0
 801025c:	4618      	mov	r0, r3
 801025e:	f7ff fca3 	bl	800fba8 <disk_ioctl>
 8010262:	4603      	mov	r3, r0
 8010264:	2b00      	cmp	r3, #0
 8010266:	d001      	beq.n	801026c <sync_fs+0xcc>
 8010268:	2301      	movs	r3, #1
 801026a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 801026c:	7bfb      	ldrb	r3, [r7, #15]
}
 801026e:	4618      	mov	r0, r3
 8010270:	3710      	adds	r7, #16
 8010272:	46bd      	mov	sp, r7
 8010274:	bd80      	pop	{r7, pc}
 8010276:	bf00      	nop
 8010278:	41615252 	.word	0x41615252
 801027c:	61417272 	.word	0x61417272

08010280 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8010280:	b480      	push	{r7}
 8010282:	b083      	sub	sp, #12
 8010284:	af00      	add	r7, sp, #0
 8010286:	6078      	str	r0, [r7, #4]
 8010288:	6039      	str	r1, [r7, #0]
	clst -= 2;
 801028a:	683b      	ldr	r3, [r7, #0]
 801028c:	3b02      	subs	r3, #2
 801028e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	69db      	ldr	r3, [r3, #28]
 8010294:	3b02      	subs	r3, #2
 8010296:	683a      	ldr	r2, [r7, #0]
 8010298:	429a      	cmp	r2, r3
 801029a:	d301      	bcc.n	80102a0 <clust2sect+0x20>
 801029c:	2300      	movs	r3, #0
 801029e:	e008      	b.n	80102b2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	895b      	ldrh	r3, [r3, #10]
 80102a4:	461a      	mov	r2, r3
 80102a6:	683b      	ldr	r3, [r7, #0]
 80102a8:	fb03 f202 	mul.w	r2, r3, r2
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80102b0:	4413      	add	r3, r2
}
 80102b2:	4618      	mov	r0, r3
 80102b4:	370c      	adds	r7, #12
 80102b6:	46bd      	mov	sp, r7
 80102b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102bc:	4770      	bx	lr

080102be <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80102be:	b580      	push	{r7, lr}
 80102c0:	b086      	sub	sp, #24
 80102c2:	af00      	add	r7, sp, #0
 80102c4:	6078      	str	r0, [r7, #4]
 80102c6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	681b      	ldr	r3, [r3, #0]
 80102cc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80102ce:	683b      	ldr	r3, [r7, #0]
 80102d0:	2b01      	cmp	r3, #1
 80102d2:	d904      	bls.n	80102de <get_fat+0x20>
 80102d4:	693b      	ldr	r3, [r7, #16]
 80102d6:	69db      	ldr	r3, [r3, #28]
 80102d8:	683a      	ldr	r2, [r7, #0]
 80102da:	429a      	cmp	r2, r3
 80102dc:	d302      	bcc.n	80102e4 <get_fat+0x26>
		val = 1;	/* Internal error */
 80102de:	2301      	movs	r3, #1
 80102e0:	617b      	str	r3, [r7, #20]
 80102e2:	e0b7      	b.n	8010454 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80102e4:	f04f 33ff 	mov.w	r3, #4294967295
 80102e8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80102ea:	693b      	ldr	r3, [r7, #16]
 80102ec:	781b      	ldrb	r3, [r3, #0]
 80102ee:	2b02      	cmp	r3, #2
 80102f0:	d05a      	beq.n	80103a8 <get_fat+0xea>
 80102f2:	2b03      	cmp	r3, #3
 80102f4:	d07d      	beq.n	80103f2 <get_fat+0x134>
 80102f6:	2b01      	cmp	r3, #1
 80102f8:	f040 80a2 	bne.w	8010440 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80102fc:	683b      	ldr	r3, [r7, #0]
 80102fe:	60fb      	str	r3, [r7, #12]
 8010300:	68fb      	ldr	r3, [r7, #12]
 8010302:	085b      	lsrs	r3, r3, #1
 8010304:	68fa      	ldr	r2, [r7, #12]
 8010306:	4413      	add	r3, r2
 8010308:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801030a:	693b      	ldr	r3, [r7, #16]
 801030c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801030e:	693b      	ldr	r3, [r7, #16]
 8010310:	899b      	ldrh	r3, [r3, #12]
 8010312:	4619      	mov	r1, r3
 8010314:	68fb      	ldr	r3, [r7, #12]
 8010316:	fbb3 f3f1 	udiv	r3, r3, r1
 801031a:	4413      	add	r3, r2
 801031c:	4619      	mov	r1, r3
 801031e:	6938      	ldr	r0, [r7, #16]
 8010320:	f7ff ff10 	bl	8010144 <move_window>
 8010324:	4603      	mov	r3, r0
 8010326:	2b00      	cmp	r3, #0
 8010328:	f040 808d 	bne.w	8010446 <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 801032c:	68fb      	ldr	r3, [r7, #12]
 801032e:	1c5a      	adds	r2, r3, #1
 8010330:	60fa      	str	r2, [r7, #12]
 8010332:	693a      	ldr	r2, [r7, #16]
 8010334:	8992      	ldrh	r2, [r2, #12]
 8010336:	fbb3 f1f2 	udiv	r1, r3, r2
 801033a:	fb02 f201 	mul.w	r2, r2, r1
 801033e:	1a9b      	subs	r3, r3, r2
 8010340:	693a      	ldr	r2, [r7, #16]
 8010342:	4413      	add	r3, r2
 8010344:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010348:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801034a:	693b      	ldr	r3, [r7, #16]
 801034c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801034e:	693b      	ldr	r3, [r7, #16]
 8010350:	899b      	ldrh	r3, [r3, #12]
 8010352:	4619      	mov	r1, r3
 8010354:	68fb      	ldr	r3, [r7, #12]
 8010356:	fbb3 f3f1 	udiv	r3, r3, r1
 801035a:	4413      	add	r3, r2
 801035c:	4619      	mov	r1, r3
 801035e:	6938      	ldr	r0, [r7, #16]
 8010360:	f7ff fef0 	bl	8010144 <move_window>
 8010364:	4603      	mov	r3, r0
 8010366:	2b00      	cmp	r3, #0
 8010368:	d16f      	bne.n	801044a <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 801036a:	693b      	ldr	r3, [r7, #16]
 801036c:	899b      	ldrh	r3, [r3, #12]
 801036e:	461a      	mov	r2, r3
 8010370:	68fb      	ldr	r3, [r7, #12]
 8010372:	fbb3 f1f2 	udiv	r1, r3, r2
 8010376:	fb02 f201 	mul.w	r2, r2, r1
 801037a:	1a9b      	subs	r3, r3, r2
 801037c:	693a      	ldr	r2, [r7, #16]
 801037e:	4413      	add	r3, r2
 8010380:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8010384:	021b      	lsls	r3, r3, #8
 8010386:	461a      	mov	r2, r3
 8010388:	68bb      	ldr	r3, [r7, #8]
 801038a:	4313      	orrs	r3, r2
 801038c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801038e:	683b      	ldr	r3, [r7, #0]
 8010390:	f003 0301 	and.w	r3, r3, #1
 8010394:	2b00      	cmp	r3, #0
 8010396:	d002      	beq.n	801039e <get_fat+0xe0>
 8010398:	68bb      	ldr	r3, [r7, #8]
 801039a:	091b      	lsrs	r3, r3, #4
 801039c:	e002      	b.n	80103a4 <get_fat+0xe6>
 801039e:	68bb      	ldr	r3, [r7, #8]
 80103a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80103a4:	617b      	str	r3, [r7, #20]
			break;
 80103a6:	e055      	b.n	8010454 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80103a8:	693b      	ldr	r3, [r7, #16]
 80103aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80103ac:	693b      	ldr	r3, [r7, #16]
 80103ae:	899b      	ldrh	r3, [r3, #12]
 80103b0:	085b      	lsrs	r3, r3, #1
 80103b2:	b29b      	uxth	r3, r3
 80103b4:	4619      	mov	r1, r3
 80103b6:	683b      	ldr	r3, [r7, #0]
 80103b8:	fbb3 f3f1 	udiv	r3, r3, r1
 80103bc:	4413      	add	r3, r2
 80103be:	4619      	mov	r1, r3
 80103c0:	6938      	ldr	r0, [r7, #16]
 80103c2:	f7ff febf 	bl	8010144 <move_window>
 80103c6:	4603      	mov	r3, r0
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	d140      	bne.n	801044e <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80103cc:	693b      	ldr	r3, [r7, #16]
 80103ce:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80103d2:	683b      	ldr	r3, [r7, #0]
 80103d4:	005b      	lsls	r3, r3, #1
 80103d6:	693a      	ldr	r2, [r7, #16]
 80103d8:	8992      	ldrh	r2, [r2, #12]
 80103da:	fbb3 f0f2 	udiv	r0, r3, r2
 80103de:	fb02 f200 	mul.w	r2, r2, r0
 80103e2:	1a9b      	subs	r3, r3, r2
 80103e4:	440b      	add	r3, r1
 80103e6:	4618      	mov	r0, r3
 80103e8:	f7ff fbfc 	bl	800fbe4 <ld_word>
 80103ec:	4603      	mov	r3, r0
 80103ee:	617b      	str	r3, [r7, #20]
			break;
 80103f0:	e030      	b.n	8010454 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80103f2:	693b      	ldr	r3, [r7, #16]
 80103f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80103f6:	693b      	ldr	r3, [r7, #16]
 80103f8:	899b      	ldrh	r3, [r3, #12]
 80103fa:	089b      	lsrs	r3, r3, #2
 80103fc:	b29b      	uxth	r3, r3
 80103fe:	4619      	mov	r1, r3
 8010400:	683b      	ldr	r3, [r7, #0]
 8010402:	fbb3 f3f1 	udiv	r3, r3, r1
 8010406:	4413      	add	r3, r2
 8010408:	4619      	mov	r1, r3
 801040a:	6938      	ldr	r0, [r7, #16]
 801040c:	f7ff fe9a 	bl	8010144 <move_window>
 8010410:	4603      	mov	r3, r0
 8010412:	2b00      	cmp	r3, #0
 8010414:	d11d      	bne.n	8010452 <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8010416:	693b      	ldr	r3, [r7, #16]
 8010418:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801041c:	683b      	ldr	r3, [r7, #0]
 801041e:	009b      	lsls	r3, r3, #2
 8010420:	693a      	ldr	r2, [r7, #16]
 8010422:	8992      	ldrh	r2, [r2, #12]
 8010424:	fbb3 f0f2 	udiv	r0, r3, r2
 8010428:	fb02 f200 	mul.w	r2, r2, r0
 801042c:	1a9b      	subs	r3, r3, r2
 801042e:	440b      	add	r3, r1
 8010430:	4618      	mov	r0, r3
 8010432:	f7ff fbef 	bl	800fc14 <ld_dword>
 8010436:	4603      	mov	r3, r0
 8010438:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 801043c:	617b      	str	r3, [r7, #20]
			break;
 801043e:	e009      	b.n	8010454 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8010440:	2301      	movs	r3, #1
 8010442:	617b      	str	r3, [r7, #20]
 8010444:	e006      	b.n	8010454 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010446:	bf00      	nop
 8010448:	e004      	b.n	8010454 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801044a:	bf00      	nop
 801044c:	e002      	b.n	8010454 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801044e:	bf00      	nop
 8010450:	e000      	b.n	8010454 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010452:	bf00      	nop
		}
	}

	return val;
 8010454:	697b      	ldr	r3, [r7, #20]
}
 8010456:	4618      	mov	r0, r3
 8010458:	3718      	adds	r7, #24
 801045a:	46bd      	mov	sp, r7
 801045c:	bd80      	pop	{r7, pc}

0801045e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 801045e:	b590      	push	{r4, r7, lr}
 8010460:	b089      	sub	sp, #36	; 0x24
 8010462:	af00      	add	r7, sp, #0
 8010464:	60f8      	str	r0, [r7, #12]
 8010466:	60b9      	str	r1, [r7, #8]
 8010468:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 801046a:	2302      	movs	r3, #2
 801046c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 801046e:	68bb      	ldr	r3, [r7, #8]
 8010470:	2b01      	cmp	r3, #1
 8010472:	f240 8106 	bls.w	8010682 <put_fat+0x224>
 8010476:	68fb      	ldr	r3, [r7, #12]
 8010478:	69db      	ldr	r3, [r3, #28]
 801047a:	68ba      	ldr	r2, [r7, #8]
 801047c:	429a      	cmp	r2, r3
 801047e:	f080 8100 	bcs.w	8010682 <put_fat+0x224>
		switch (fs->fs_type) {
 8010482:	68fb      	ldr	r3, [r7, #12]
 8010484:	781b      	ldrb	r3, [r3, #0]
 8010486:	2b02      	cmp	r3, #2
 8010488:	f000 8088 	beq.w	801059c <put_fat+0x13e>
 801048c:	2b03      	cmp	r3, #3
 801048e:	f000 80b0 	beq.w	80105f2 <put_fat+0x194>
 8010492:	2b01      	cmp	r3, #1
 8010494:	f040 80f5 	bne.w	8010682 <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8010498:	68bb      	ldr	r3, [r7, #8]
 801049a:	61bb      	str	r3, [r7, #24]
 801049c:	69bb      	ldr	r3, [r7, #24]
 801049e:	085b      	lsrs	r3, r3, #1
 80104a0:	69ba      	ldr	r2, [r7, #24]
 80104a2:	4413      	add	r3, r2
 80104a4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80104a6:	68fb      	ldr	r3, [r7, #12]
 80104a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80104aa:	68fb      	ldr	r3, [r7, #12]
 80104ac:	899b      	ldrh	r3, [r3, #12]
 80104ae:	4619      	mov	r1, r3
 80104b0:	69bb      	ldr	r3, [r7, #24]
 80104b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80104b6:	4413      	add	r3, r2
 80104b8:	4619      	mov	r1, r3
 80104ba:	68f8      	ldr	r0, [r7, #12]
 80104bc:	f7ff fe42 	bl	8010144 <move_window>
 80104c0:	4603      	mov	r3, r0
 80104c2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80104c4:	7ffb      	ldrb	r3, [r7, #31]
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	f040 80d4 	bne.w	8010674 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 80104cc:	68fb      	ldr	r3, [r7, #12]
 80104ce:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80104d2:	69bb      	ldr	r3, [r7, #24]
 80104d4:	1c5a      	adds	r2, r3, #1
 80104d6:	61ba      	str	r2, [r7, #24]
 80104d8:	68fa      	ldr	r2, [r7, #12]
 80104da:	8992      	ldrh	r2, [r2, #12]
 80104dc:	fbb3 f0f2 	udiv	r0, r3, r2
 80104e0:	fb02 f200 	mul.w	r2, r2, r0
 80104e4:	1a9b      	subs	r3, r3, r2
 80104e6:	440b      	add	r3, r1
 80104e8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80104ea:	68bb      	ldr	r3, [r7, #8]
 80104ec:	f003 0301 	and.w	r3, r3, #1
 80104f0:	2b00      	cmp	r3, #0
 80104f2:	d00d      	beq.n	8010510 <put_fat+0xb2>
 80104f4:	697b      	ldr	r3, [r7, #20]
 80104f6:	781b      	ldrb	r3, [r3, #0]
 80104f8:	b25b      	sxtb	r3, r3
 80104fa:	f003 030f 	and.w	r3, r3, #15
 80104fe:	b25a      	sxtb	r2, r3
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	b2db      	uxtb	r3, r3
 8010504:	011b      	lsls	r3, r3, #4
 8010506:	b25b      	sxtb	r3, r3
 8010508:	4313      	orrs	r3, r2
 801050a:	b25b      	sxtb	r3, r3
 801050c:	b2db      	uxtb	r3, r3
 801050e:	e001      	b.n	8010514 <put_fat+0xb6>
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	b2db      	uxtb	r3, r3
 8010514:	697a      	ldr	r2, [r7, #20]
 8010516:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8010518:	68fb      	ldr	r3, [r7, #12]
 801051a:	2201      	movs	r2, #1
 801051c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801051e:	68fb      	ldr	r3, [r7, #12]
 8010520:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010522:	68fb      	ldr	r3, [r7, #12]
 8010524:	899b      	ldrh	r3, [r3, #12]
 8010526:	4619      	mov	r1, r3
 8010528:	69bb      	ldr	r3, [r7, #24]
 801052a:	fbb3 f3f1 	udiv	r3, r3, r1
 801052e:	4413      	add	r3, r2
 8010530:	4619      	mov	r1, r3
 8010532:	68f8      	ldr	r0, [r7, #12]
 8010534:	f7ff fe06 	bl	8010144 <move_window>
 8010538:	4603      	mov	r3, r0
 801053a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801053c:	7ffb      	ldrb	r3, [r7, #31]
 801053e:	2b00      	cmp	r3, #0
 8010540:	f040 809a 	bne.w	8010678 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 8010544:	68fb      	ldr	r3, [r7, #12]
 8010546:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801054a:	68fb      	ldr	r3, [r7, #12]
 801054c:	899b      	ldrh	r3, [r3, #12]
 801054e:	461a      	mov	r2, r3
 8010550:	69bb      	ldr	r3, [r7, #24]
 8010552:	fbb3 f0f2 	udiv	r0, r3, r2
 8010556:	fb02 f200 	mul.w	r2, r2, r0
 801055a:	1a9b      	subs	r3, r3, r2
 801055c:	440b      	add	r3, r1
 801055e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8010560:	68bb      	ldr	r3, [r7, #8]
 8010562:	f003 0301 	and.w	r3, r3, #1
 8010566:	2b00      	cmp	r3, #0
 8010568:	d003      	beq.n	8010572 <put_fat+0x114>
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	091b      	lsrs	r3, r3, #4
 801056e:	b2db      	uxtb	r3, r3
 8010570:	e00e      	b.n	8010590 <put_fat+0x132>
 8010572:	697b      	ldr	r3, [r7, #20]
 8010574:	781b      	ldrb	r3, [r3, #0]
 8010576:	b25b      	sxtb	r3, r3
 8010578:	f023 030f 	bic.w	r3, r3, #15
 801057c:	b25a      	sxtb	r2, r3
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	0a1b      	lsrs	r3, r3, #8
 8010582:	b25b      	sxtb	r3, r3
 8010584:	f003 030f 	and.w	r3, r3, #15
 8010588:	b25b      	sxtb	r3, r3
 801058a:	4313      	orrs	r3, r2
 801058c:	b25b      	sxtb	r3, r3
 801058e:	b2db      	uxtb	r3, r3
 8010590:	697a      	ldr	r2, [r7, #20]
 8010592:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8010594:	68fb      	ldr	r3, [r7, #12]
 8010596:	2201      	movs	r2, #1
 8010598:	70da      	strb	r2, [r3, #3]
			break;
 801059a:	e072      	b.n	8010682 <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 801059c:	68fb      	ldr	r3, [r7, #12]
 801059e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80105a0:	68fb      	ldr	r3, [r7, #12]
 80105a2:	899b      	ldrh	r3, [r3, #12]
 80105a4:	085b      	lsrs	r3, r3, #1
 80105a6:	b29b      	uxth	r3, r3
 80105a8:	4619      	mov	r1, r3
 80105aa:	68bb      	ldr	r3, [r7, #8]
 80105ac:	fbb3 f3f1 	udiv	r3, r3, r1
 80105b0:	4413      	add	r3, r2
 80105b2:	4619      	mov	r1, r3
 80105b4:	68f8      	ldr	r0, [r7, #12]
 80105b6:	f7ff fdc5 	bl	8010144 <move_window>
 80105ba:	4603      	mov	r3, r0
 80105bc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80105be:	7ffb      	ldrb	r3, [r7, #31]
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d15b      	bne.n	801067c <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80105c4:	68fb      	ldr	r3, [r7, #12]
 80105c6:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80105ca:	68bb      	ldr	r3, [r7, #8]
 80105cc:	005b      	lsls	r3, r3, #1
 80105ce:	68fa      	ldr	r2, [r7, #12]
 80105d0:	8992      	ldrh	r2, [r2, #12]
 80105d2:	fbb3 f0f2 	udiv	r0, r3, r2
 80105d6:	fb02 f200 	mul.w	r2, r2, r0
 80105da:	1a9b      	subs	r3, r3, r2
 80105dc:	440b      	add	r3, r1
 80105de:	687a      	ldr	r2, [r7, #4]
 80105e0:	b292      	uxth	r2, r2
 80105e2:	4611      	mov	r1, r2
 80105e4:	4618      	mov	r0, r3
 80105e6:	f7ff fb38 	bl	800fc5a <st_word>
			fs->wflag = 1;
 80105ea:	68fb      	ldr	r3, [r7, #12]
 80105ec:	2201      	movs	r2, #1
 80105ee:	70da      	strb	r2, [r3, #3]
			break;
 80105f0:	e047      	b.n	8010682 <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80105f2:	68fb      	ldr	r3, [r7, #12]
 80105f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80105f6:	68fb      	ldr	r3, [r7, #12]
 80105f8:	899b      	ldrh	r3, [r3, #12]
 80105fa:	089b      	lsrs	r3, r3, #2
 80105fc:	b29b      	uxth	r3, r3
 80105fe:	4619      	mov	r1, r3
 8010600:	68bb      	ldr	r3, [r7, #8]
 8010602:	fbb3 f3f1 	udiv	r3, r3, r1
 8010606:	4413      	add	r3, r2
 8010608:	4619      	mov	r1, r3
 801060a:	68f8      	ldr	r0, [r7, #12]
 801060c:	f7ff fd9a 	bl	8010144 <move_window>
 8010610:	4603      	mov	r3, r0
 8010612:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010614:	7ffb      	ldrb	r3, [r7, #31]
 8010616:	2b00      	cmp	r3, #0
 8010618:	d132      	bne.n	8010680 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8010620:	68fb      	ldr	r3, [r7, #12]
 8010622:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010626:	68bb      	ldr	r3, [r7, #8]
 8010628:	009b      	lsls	r3, r3, #2
 801062a:	68fa      	ldr	r2, [r7, #12]
 801062c:	8992      	ldrh	r2, [r2, #12]
 801062e:	fbb3 f0f2 	udiv	r0, r3, r2
 8010632:	fb02 f200 	mul.w	r2, r2, r0
 8010636:	1a9b      	subs	r3, r3, r2
 8010638:	440b      	add	r3, r1
 801063a:	4618      	mov	r0, r3
 801063c:	f7ff faea 	bl	800fc14 <ld_dword>
 8010640:	4603      	mov	r3, r0
 8010642:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8010646:	4323      	orrs	r3, r4
 8010648:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 801064a:	68fb      	ldr	r3, [r7, #12]
 801064c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010650:	68bb      	ldr	r3, [r7, #8]
 8010652:	009b      	lsls	r3, r3, #2
 8010654:	68fa      	ldr	r2, [r7, #12]
 8010656:	8992      	ldrh	r2, [r2, #12]
 8010658:	fbb3 f0f2 	udiv	r0, r3, r2
 801065c:	fb02 f200 	mul.w	r2, r2, r0
 8010660:	1a9b      	subs	r3, r3, r2
 8010662:	440b      	add	r3, r1
 8010664:	6879      	ldr	r1, [r7, #4]
 8010666:	4618      	mov	r0, r3
 8010668:	f7ff fb12 	bl	800fc90 <st_dword>
			fs->wflag = 1;
 801066c:	68fb      	ldr	r3, [r7, #12]
 801066e:	2201      	movs	r2, #1
 8010670:	70da      	strb	r2, [r3, #3]
			break;
 8010672:	e006      	b.n	8010682 <put_fat+0x224>
			if (res != FR_OK) break;
 8010674:	bf00      	nop
 8010676:	e004      	b.n	8010682 <put_fat+0x224>
			if (res != FR_OK) break;
 8010678:	bf00      	nop
 801067a:	e002      	b.n	8010682 <put_fat+0x224>
			if (res != FR_OK) break;
 801067c:	bf00      	nop
 801067e:	e000      	b.n	8010682 <put_fat+0x224>
			if (res != FR_OK) break;
 8010680:	bf00      	nop
		}
	}
	return res;
 8010682:	7ffb      	ldrb	r3, [r7, #31]
}
 8010684:	4618      	mov	r0, r3
 8010686:	3724      	adds	r7, #36	; 0x24
 8010688:	46bd      	mov	sp, r7
 801068a:	bd90      	pop	{r4, r7, pc}

0801068c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 801068c:	b580      	push	{r7, lr}
 801068e:	b088      	sub	sp, #32
 8010690:	af00      	add	r7, sp, #0
 8010692:	60f8      	str	r0, [r7, #12]
 8010694:	60b9      	str	r1, [r7, #8]
 8010696:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8010698:	2300      	movs	r3, #0
 801069a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 801069c:	68fb      	ldr	r3, [r7, #12]
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80106a2:	68bb      	ldr	r3, [r7, #8]
 80106a4:	2b01      	cmp	r3, #1
 80106a6:	d904      	bls.n	80106b2 <remove_chain+0x26>
 80106a8:	69bb      	ldr	r3, [r7, #24]
 80106aa:	69db      	ldr	r3, [r3, #28]
 80106ac:	68ba      	ldr	r2, [r7, #8]
 80106ae:	429a      	cmp	r2, r3
 80106b0:	d301      	bcc.n	80106b6 <remove_chain+0x2a>
 80106b2:	2302      	movs	r3, #2
 80106b4:	e04b      	b.n	801074e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d00c      	beq.n	80106d6 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80106bc:	f04f 32ff 	mov.w	r2, #4294967295
 80106c0:	6879      	ldr	r1, [r7, #4]
 80106c2:	69b8      	ldr	r0, [r7, #24]
 80106c4:	f7ff fecb 	bl	801045e <put_fat>
 80106c8:	4603      	mov	r3, r0
 80106ca:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80106cc:	7ffb      	ldrb	r3, [r7, #31]
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d001      	beq.n	80106d6 <remove_chain+0x4a>
 80106d2:	7ffb      	ldrb	r3, [r7, #31]
 80106d4:	e03b      	b.n	801074e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80106d6:	68b9      	ldr	r1, [r7, #8]
 80106d8:	68f8      	ldr	r0, [r7, #12]
 80106da:	f7ff fdf0 	bl	80102be <get_fat>
 80106de:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80106e0:	697b      	ldr	r3, [r7, #20]
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d031      	beq.n	801074a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80106e6:	697b      	ldr	r3, [r7, #20]
 80106e8:	2b01      	cmp	r3, #1
 80106ea:	d101      	bne.n	80106f0 <remove_chain+0x64>
 80106ec:	2302      	movs	r3, #2
 80106ee:	e02e      	b.n	801074e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80106f0:	697b      	ldr	r3, [r7, #20]
 80106f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80106f6:	d101      	bne.n	80106fc <remove_chain+0x70>
 80106f8:	2301      	movs	r3, #1
 80106fa:	e028      	b.n	801074e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80106fc:	2200      	movs	r2, #0
 80106fe:	68b9      	ldr	r1, [r7, #8]
 8010700:	69b8      	ldr	r0, [r7, #24]
 8010702:	f7ff feac 	bl	801045e <put_fat>
 8010706:	4603      	mov	r3, r0
 8010708:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 801070a:	7ffb      	ldrb	r3, [r7, #31]
 801070c:	2b00      	cmp	r3, #0
 801070e:	d001      	beq.n	8010714 <remove_chain+0x88>
 8010710:	7ffb      	ldrb	r3, [r7, #31]
 8010712:	e01c      	b.n	801074e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8010714:	69bb      	ldr	r3, [r7, #24]
 8010716:	695a      	ldr	r2, [r3, #20]
 8010718:	69bb      	ldr	r3, [r7, #24]
 801071a:	69db      	ldr	r3, [r3, #28]
 801071c:	3b02      	subs	r3, #2
 801071e:	429a      	cmp	r2, r3
 8010720:	d20b      	bcs.n	801073a <remove_chain+0xae>
			fs->free_clst++;
 8010722:	69bb      	ldr	r3, [r7, #24]
 8010724:	695b      	ldr	r3, [r3, #20]
 8010726:	1c5a      	adds	r2, r3, #1
 8010728:	69bb      	ldr	r3, [r7, #24]
 801072a:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 801072c:	69bb      	ldr	r3, [r7, #24]
 801072e:	791b      	ldrb	r3, [r3, #4]
 8010730:	f043 0301 	orr.w	r3, r3, #1
 8010734:	b2da      	uxtb	r2, r3
 8010736:	69bb      	ldr	r3, [r7, #24]
 8010738:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 801073a:	697b      	ldr	r3, [r7, #20]
 801073c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 801073e:	69bb      	ldr	r3, [r7, #24]
 8010740:	69db      	ldr	r3, [r3, #28]
 8010742:	68ba      	ldr	r2, [r7, #8]
 8010744:	429a      	cmp	r2, r3
 8010746:	d3c6      	bcc.n	80106d6 <remove_chain+0x4a>
 8010748:	e000      	b.n	801074c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 801074a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 801074c:	2300      	movs	r3, #0
}
 801074e:	4618      	mov	r0, r3
 8010750:	3720      	adds	r7, #32
 8010752:	46bd      	mov	sp, r7
 8010754:	bd80      	pop	{r7, pc}

08010756 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8010756:	b580      	push	{r7, lr}
 8010758:	b088      	sub	sp, #32
 801075a:	af00      	add	r7, sp, #0
 801075c:	6078      	str	r0, [r7, #4]
 801075e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	681b      	ldr	r3, [r3, #0]
 8010764:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8010766:	683b      	ldr	r3, [r7, #0]
 8010768:	2b00      	cmp	r3, #0
 801076a:	d10d      	bne.n	8010788 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 801076c:	693b      	ldr	r3, [r7, #16]
 801076e:	691b      	ldr	r3, [r3, #16]
 8010770:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8010772:	69bb      	ldr	r3, [r7, #24]
 8010774:	2b00      	cmp	r3, #0
 8010776:	d004      	beq.n	8010782 <create_chain+0x2c>
 8010778:	693b      	ldr	r3, [r7, #16]
 801077a:	69db      	ldr	r3, [r3, #28]
 801077c:	69ba      	ldr	r2, [r7, #24]
 801077e:	429a      	cmp	r2, r3
 8010780:	d31b      	bcc.n	80107ba <create_chain+0x64>
 8010782:	2301      	movs	r3, #1
 8010784:	61bb      	str	r3, [r7, #24]
 8010786:	e018      	b.n	80107ba <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8010788:	6839      	ldr	r1, [r7, #0]
 801078a:	6878      	ldr	r0, [r7, #4]
 801078c:	f7ff fd97 	bl	80102be <get_fat>
 8010790:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8010792:	68fb      	ldr	r3, [r7, #12]
 8010794:	2b01      	cmp	r3, #1
 8010796:	d801      	bhi.n	801079c <create_chain+0x46>
 8010798:	2301      	movs	r3, #1
 801079a:	e070      	b.n	801087e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 801079c:	68fb      	ldr	r3, [r7, #12]
 801079e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80107a2:	d101      	bne.n	80107a8 <create_chain+0x52>
 80107a4:	68fb      	ldr	r3, [r7, #12]
 80107a6:	e06a      	b.n	801087e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80107a8:	693b      	ldr	r3, [r7, #16]
 80107aa:	69db      	ldr	r3, [r3, #28]
 80107ac:	68fa      	ldr	r2, [r7, #12]
 80107ae:	429a      	cmp	r2, r3
 80107b0:	d201      	bcs.n	80107b6 <create_chain+0x60>
 80107b2:	68fb      	ldr	r3, [r7, #12]
 80107b4:	e063      	b.n	801087e <create_chain+0x128>
		scl = clst;
 80107b6:	683b      	ldr	r3, [r7, #0]
 80107b8:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80107ba:	69bb      	ldr	r3, [r7, #24]
 80107bc:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80107be:	69fb      	ldr	r3, [r7, #28]
 80107c0:	3301      	adds	r3, #1
 80107c2:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80107c4:	693b      	ldr	r3, [r7, #16]
 80107c6:	69db      	ldr	r3, [r3, #28]
 80107c8:	69fa      	ldr	r2, [r7, #28]
 80107ca:	429a      	cmp	r2, r3
 80107cc:	d307      	bcc.n	80107de <create_chain+0x88>
				ncl = 2;
 80107ce:	2302      	movs	r3, #2
 80107d0:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80107d2:	69fa      	ldr	r2, [r7, #28]
 80107d4:	69bb      	ldr	r3, [r7, #24]
 80107d6:	429a      	cmp	r2, r3
 80107d8:	d901      	bls.n	80107de <create_chain+0x88>
 80107da:	2300      	movs	r3, #0
 80107dc:	e04f      	b.n	801087e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80107de:	69f9      	ldr	r1, [r7, #28]
 80107e0:	6878      	ldr	r0, [r7, #4]
 80107e2:	f7ff fd6c 	bl	80102be <get_fat>
 80107e6:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80107e8:	68fb      	ldr	r3, [r7, #12]
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d00e      	beq.n	801080c <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80107ee:	68fb      	ldr	r3, [r7, #12]
 80107f0:	2b01      	cmp	r3, #1
 80107f2:	d003      	beq.n	80107fc <create_chain+0xa6>
 80107f4:	68fb      	ldr	r3, [r7, #12]
 80107f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80107fa:	d101      	bne.n	8010800 <create_chain+0xaa>
 80107fc:	68fb      	ldr	r3, [r7, #12]
 80107fe:	e03e      	b.n	801087e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8010800:	69fa      	ldr	r2, [r7, #28]
 8010802:	69bb      	ldr	r3, [r7, #24]
 8010804:	429a      	cmp	r2, r3
 8010806:	d1da      	bne.n	80107be <create_chain+0x68>
 8010808:	2300      	movs	r3, #0
 801080a:	e038      	b.n	801087e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 801080c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 801080e:	f04f 32ff 	mov.w	r2, #4294967295
 8010812:	69f9      	ldr	r1, [r7, #28]
 8010814:	6938      	ldr	r0, [r7, #16]
 8010816:	f7ff fe22 	bl	801045e <put_fat>
 801081a:	4603      	mov	r3, r0
 801081c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 801081e:	7dfb      	ldrb	r3, [r7, #23]
 8010820:	2b00      	cmp	r3, #0
 8010822:	d109      	bne.n	8010838 <create_chain+0xe2>
 8010824:	683b      	ldr	r3, [r7, #0]
 8010826:	2b00      	cmp	r3, #0
 8010828:	d006      	beq.n	8010838 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 801082a:	69fa      	ldr	r2, [r7, #28]
 801082c:	6839      	ldr	r1, [r7, #0]
 801082e:	6938      	ldr	r0, [r7, #16]
 8010830:	f7ff fe15 	bl	801045e <put_fat>
 8010834:	4603      	mov	r3, r0
 8010836:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8010838:	7dfb      	ldrb	r3, [r7, #23]
 801083a:	2b00      	cmp	r3, #0
 801083c:	d116      	bne.n	801086c <create_chain+0x116>
		fs->last_clst = ncl;
 801083e:	693b      	ldr	r3, [r7, #16]
 8010840:	69fa      	ldr	r2, [r7, #28]
 8010842:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8010844:	693b      	ldr	r3, [r7, #16]
 8010846:	695a      	ldr	r2, [r3, #20]
 8010848:	693b      	ldr	r3, [r7, #16]
 801084a:	69db      	ldr	r3, [r3, #28]
 801084c:	3b02      	subs	r3, #2
 801084e:	429a      	cmp	r2, r3
 8010850:	d804      	bhi.n	801085c <create_chain+0x106>
 8010852:	693b      	ldr	r3, [r7, #16]
 8010854:	695b      	ldr	r3, [r3, #20]
 8010856:	1e5a      	subs	r2, r3, #1
 8010858:	693b      	ldr	r3, [r7, #16]
 801085a:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 801085c:	693b      	ldr	r3, [r7, #16]
 801085e:	791b      	ldrb	r3, [r3, #4]
 8010860:	f043 0301 	orr.w	r3, r3, #1
 8010864:	b2da      	uxtb	r2, r3
 8010866:	693b      	ldr	r3, [r7, #16]
 8010868:	711a      	strb	r2, [r3, #4]
 801086a:	e007      	b.n	801087c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801086c:	7dfb      	ldrb	r3, [r7, #23]
 801086e:	2b01      	cmp	r3, #1
 8010870:	d102      	bne.n	8010878 <create_chain+0x122>
 8010872:	f04f 33ff 	mov.w	r3, #4294967295
 8010876:	e000      	b.n	801087a <create_chain+0x124>
 8010878:	2301      	movs	r3, #1
 801087a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 801087c:	69fb      	ldr	r3, [r7, #28]
}
 801087e:	4618      	mov	r0, r3
 8010880:	3720      	adds	r7, #32
 8010882:	46bd      	mov	sp, r7
 8010884:	bd80      	pop	{r7, pc}

08010886 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8010886:	b480      	push	{r7}
 8010888:	b087      	sub	sp, #28
 801088a:	af00      	add	r7, sp, #0
 801088c:	6078      	str	r0, [r7, #4]
 801088e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801089a:	3304      	adds	r3, #4
 801089c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 801089e:	68fb      	ldr	r3, [r7, #12]
 80108a0:	899b      	ldrh	r3, [r3, #12]
 80108a2:	461a      	mov	r2, r3
 80108a4:	683b      	ldr	r3, [r7, #0]
 80108a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80108aa:	68fa      	ldr	r2, [r7, #12]
 80108ac:	8952      	ldrh	r2, [r2, #10]
 80108ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80108b2:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80108b4:	693b      	ldr	r3, [r7, #16]
 80108b6:	1d1a      	adds	r2, r3, #4
 80108b8:	613a      	str	r2, [r7, #16]
 80108ba:	681b      	ldr	r3, [r3, #0]
 80108bc:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80108be:	68bb      	ldr	r3, [r7, #8]
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	d101      	bne.n	80108c8 <clmt_clust+0x42>
 80108c4:	2300      	movs	r3, #0
 80108c6:	e010      	b.n	80108ea <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80108c8:	697a      	ldr	r2, [r7, #20]
 80108ca:	68bb      	ldr	r3, [r7, #8]
 80108cc:	429a      	cmp	r2, r3
 80108ce:	d307      	bcc.n	80108e0 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80108d0:	697a      	ldr	r2, [r7, #20]
 80108d2:	68bb      	ldr	r3, [r7, #8]
 80108d4:	1ad3      	subs	r3, r2, r3
 80108d6:	617b      	str	r3, [r7, #20]
 80108d8:	693b      	ldr	r3, [r7, #16]
 80108da:	3304      	adds	r3, #4
 80108dc:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80108de:	e7e9      	b.n	80108b4 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80108e0:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80108e2:	693b      	ldr	r3, [r7, #16]
 80108e4:	681a      	ldr	r2, [r3, #0]
 80108e6:	697b      	ldr	r3, [r7, #20]
 80108e8:	4413      	add	r3, r2
}
 80108ea:	4618      	mov	r0, r3
 80108ec:	371c      	adds	r7, #28
 80108ee:	46bd      	mov	sp, r7
 80108f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108f4:	4770      	bx	lr

080108f6 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80108f6:	b580      	push	{r7, lr}
 80108f8:	b086      	sub	sp, #24
 80108fa:	af00      	add	r7, sp, #0
 80108fc:	6078      	str	r0, [r7, #4]
 80108fe:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	681b      	ldr	r3, [r3, #0]
 8010904:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8010906:	683b      	ldr	r3, [r7, #0]
 8010908:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801090c:	d204      	bcs.n	8010918 <dir_sdi+0x22>
 801090e:	683b      	ldr	r3, [r7, #0]
 8010910:	f003 031f 	and.w	r3, r3, #31
 8010914:	2b00      	cmp	r3, #0
 8010916:	d001      	beq.n	801091c <dir_sdi+0x26>
		return FR_INT_ERR;
 8010918:	2302      	movs	r3, #2
 801091a:	e071      	b.n	8010a00 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	683a      	ldr	r2, [r7, #0]
 8010920:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	689b      	ldr	r3, [r3, #8]
 8010926:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8010928:	697b      	ldr	r3, [r7, #20]
 801092a:	2b00      	cmp	r3, #0
 801092c:	d106      	bne.n	801093c <dir_sdi+0x46>
 801092e:	693b      	ldr	r3, [r7, #16]
 8010930:	781b      	ldrb	r3, [r3, #0]
 8010932:	2b02      	cmp	r3, #2
 8010934:	d902      	bls.n	801093c <dir_sdi+0x46>
		clst = fs->dirbase;
 8010936:	693b      	ldr	r3, [r7, #16]
 8010938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801093a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 801093c:	697b      	ldr	r3, [r7, #20]
 801093e:	2b00      	cmp	r3, #0
 8010940:	d10c      	bne.n	801095c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8010942:	683b      	ldr	r3, [r7, #0]
 8010944:	095b      	lsrs	r3, r3, #5
 8010946:	693a      	ldr	r2, [r7, #16]
 8010948:	8912      	ldrh	r2, [r2, #8]
 801094a:	4293      	cmp	r3, r2
 801094c:	d301      	bcc.n	8010952 <dir_sdi+0x5c>
 801094e:	2302      	movs	r3, #2
 8010950:	e056      	b.n	8010a00 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8010952:	693b      	ldr	r3, [r7, #16]
 8010954:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	61da      	str	r2, [r3, #28]
 801095a:	e02d      	b.n	80109b8 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801095c:	693b      	ldr	r3, [r7, #16]
 801095e:	895b      	ldrh	r3, [r3, #10]
 8010960:	461a      	mov	r2, r3
 8010962:	693b      	ldr	r3, [r7, #16]
 8010964:	899b      	ldrh	r3, [r3, #12]
 8010966:	fb03 f302 	mul.w	r3, r3, r2
 801096a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 801096c:	e019      	b.n	80109a2 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	6979      	ldr	r1, [r7, #20]
 8010972:	4618      	mov	r0, r3
 8010974:	f7ff fca3 	bl	80102be <get_fat>
 8010978:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801097a:	697b      	ldr	r3, [r7, #20]
 801097c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010980:	d101      	bne.n	8010986 <dir_sdi+0x90>
 8010982:	2301      	movs	r3, #1
 8010984:	e03c      	b.n	8010a00 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8010986:	697b      	ldr	r3, [r7, #20]
 8010988:	2b01      	cmp	r3, #1
 801098a:	d904      	bls.n	8010996 <dir_sdi+0xa0>
 801098c:	693b      	ldr	r3, [r7, #16]
 801098e:	69db      	ldr	r3, [r3, #28]
 8010990:	697a      	ldr	r2, [r7, #20]
 8010992:	429a      	cmp	r2, r3
 8010994:	d301      	bcc.n	801099a <dir_sdi+0xa4>
 8010996:	2302      	movs	r3, #2
 8010998:	e032      	b.n	8010a00 <dir_sdi+0x10a>
			ofs -= csz;
 801099a:	683a      	ldr	r2, [r7, #0]
 801099c:	68fb      	ldr	r3, [r7, #12]
 801099e:	1ad3      	subs	r3, r2, r3
 80109a0:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80109a2:	683a      	ldr	r2, [r7, #0]
 80109a4:	68fb      	ldr	r3, [r7, #12]
 80109a6:	429a      	cmp	r2, r3
 80109a8:	d2e1      	bcs.n	801096e <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80109aa:	6979      	ldr	r1, [r7, #20]
 80109ac:	6938      	ldr	r0, [r7, #16]
 80109ae:	f7ff fc67 	bl	8010280 <clust2sect>
 80109b2:	4602      	mov	r2, r0
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	697a      	ldr	r2, [r7, #20]
 80109bc:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	69db      	ldr	r3, [r3, #28]
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	d101      	bne.n	80109ca <dir_sdi+0xd4>
 80109c6:	2302      	movs	r3, #2
 80109c8:	e01a      	b.n	8010a00 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	69da      	ldr	r2, [r3, #28]
 80109ce:	693b      	ldr	r3, [r7, #16]
 80109d0:	899b      	ldrh	r3, [r3, #12]
 80109d2:	4619      	mov	r1, r3
 80109d4:	683b      	ldr	r3, [r7, #0]
 80109d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80109da:	441a      	add	r2, r3
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80109e0:	693b      	ldr	r3, [r7, #16]
 80109e2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80109e6:	693b      	ldr	r3, [r7, #16]
 80109e8:	899b      	ldrh	r3, [r3, #12]
 80109ea:	461a      	mov	r2, r3
 80109ec:	683b      	ldr	r3, [r7, #0]
 80109ee:	fbb3 f0f2 	udiv	r0, r3, r2
 80109f2:	fb02 f200 	mul.w	r2, r2, r0
 80109f6:	1a9b      	subs	r3, r3, r2
 80109f8:	18ca      	adds	r2, r1, r3
 80109fa:	687b      	ldr	r3, [r7, #4]
 80109fc:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80109fe:	2300      	movs	r3, #0
}
 8010a00:	4618      	mov	r0, r3
 8010a02:	3718      	adds	r7, #24
 8010a04:	46bd      	mov	sp, r7
 8010a06:	bd80      	pop	{r7, pc}

08010a08 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8010a08:	b580      	push	{r7, lr}
 8010a0a:	b086      	sub	sp, #24
 8010a0c:	af00      	add	r7, sp, #0
 8010a0e:	6078      	str	r0, [r7, #4]
 8010a10:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	681b      	ldr	r3, [r3, #0]
 8010a16:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8010a18:	687b      	ldr	r3, [r7, #4]
 8010a1a:	695b      	ldr	r3, [r3, #20]
 8010a1c:	3320      	adds	r3, #32
 8010a1e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	69db      	ldr	r3, [r3, #28]
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d003      	beq.n	8010a30 <dir_next+0x28>
 8010a28:	68bb      	ldr	r3, [r7, #8]
 8010a2a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010a2e:	d301      	bcc.n	8010a34 <dir_next+0x2c>
 8010a30:	2304      	movs	r3, #4
 8010a32:	e0bb      	b.n	8010bac <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8010a34:	68fb      	ldr	r3, [r7, #12]
 8010a36:	899b      	ldrh	r3, [r3, #12]
 8010a38:	461a      	mov	r2, r3
 8010a3a:	68bb      	ldr	r3, [r7, #8]
 8010a3c:	fbb3 f1f2 	udiv	r1, r3, r2
 8010a40:	fb02 f201 	mul.w	r2, r2, r1
 8010a44:	1a9b      	subs	r3, r3, r2
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	f040 809d 	bne.w	8010b86 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	69db      	ldr	r3, [r3, #28]
 8010a50:	1c5a      	adds	r2, r3, #1
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	699b      	ldr	r3, [r3, #24]
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	d10b      	bne.n	8010a76 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8010a5e:	68bb      	ldr	r3, [r7, #8]
 8010a60:	095b      	lsrs	r3, r3, #5
 8010a62:	68fa      	ldr	r2, [r7, #12]
 8010a64:	8912      	ldrh	r2, [r2, #8]
 8010a66:	4293      	cmp	r3, r2
 8010a68:	f0c0 808d 	bcc.w	8010b86 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	2200      	movs	r2, #0
 8010a70:	61da      	str	r2, [r3, #28]
 8010a72:	2304      	movs	r3, #4
 8010a74:	e09a      	b.n	8010bac <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8010a76:	68fb      	ldr	r3, [r7, #12]
 8010a78:	899b      	ldrh	r3, [r3, #12]
 8010a7a:	461a      	mov	r2, r3
 8010a7c:	68bb      	ldr	r3, [r7, #8]
 8010a7e:	fbb3 f3f2 	udiv	r3, r3, r2
 8010a82:	68fa      	ldr	r2, [r7, #12]
 8010a84:	8952      	ldrh	r2, [r2, #10]
 8010a86:	3a01      	subs	r2, #1
 8010a88:	4013      	ands	r3, r2
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	d17b      	bne.n	8010b86 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8010a8e:	687a      	ldr	r2, [r7, #4]
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	699b      	ldr	r3, [r3, #24]
 8010a94:	4619      	mov	r1, r3
 8010a96:	4610      	mov	r0, r2
 8010a98:	f7ff fc11 	bl	80102be <get_fat>
 8010a9c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8010a9e:	697b      	ldr	r3, [r7, #20]
 8010aa0:	2b01      	cmp	r3, #1
 8010aa2:	d801      	bhi.n	8010aa8 <dir_next+0xa0>
 8010aa4:	2302      	movs	r3, #2
 8010aa6:	e081      	b.n	8010bac <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8010aa8:	697b      	ldr	r3, [r7, #20]
 8010aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010aae:	d101      	bne.n	8010ab4 <dir_next+0xac>
 8010ab0:	2301      	movs	r3, #1
 8010ab2:	e07b      	b.n	8010bac <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8010ab4:	68fb      	ldr	r3, [r7, #12]
 8010ab6:	69db      	ldr	r3, [r3, #28]
 8010ab8:	697a      	ldr	r2, [r7, #20]
 8010aba:	429a      	cmp	r2, r3
 8010abc:	d359      	bcc.n	8010b72 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8010abe:	683b      	ldr	r3, [r7, #0]
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	d104      	bne.n	8010ace <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	2200      	movs	r2, #0
 8010ac8:	61da      	str	r2, [r3, #28]
 8010aca:	2304      	movs	r3, #4
 8010acc:	e06e      	b.n	8010bac <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8010ace:	687a      	ldr	r2, [r7, #4]
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	699b      	ldr	r3, [r3, #24]
 8010ad4:	4619      	mov	r1, r3
 8010ad6:	4610      	mov	r0, r2
 8010ad8:	f7ff fe3d 	bl	8010756 <create_chain>
 8010adc:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8010ade:	697b      	ldr	r3, [r7, #20]
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	d101      	bne.n	8010ae8 <dir_next+0xe0>
 8010ae4:	2307      	movs	r3, #7
 8010ae6:	e061      	b.n	8010bac <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8010ae8:	697b      	ldr	r3, [r7, #20]
 8010aea:	2b01      	cmp	r3, #1
 8010aec:	d101      	bne.n	8010af2 <dir_next+0xea>
 8010aee:	2302      	movs	r3, #2
 8010af0:	e05c      	b.n	8010bac <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8010af2:	697b      	ldr	r3, [r7, #20]
 8010af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010af8:	d101      	bne.n	8010afe <dir_next+0xf6>
 8010afa:	2301      	movs	r3, #1
 8010afc:	e056      	b.n	8010bac <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8010afe:	68f8      	ldr	r0, [r7, #12]
 8010b00:	f7ff fadc 	bl	80100bc <sync_window>
 8010b04:	4603      	mov	r3, r0
 8010b06:	2b00      	cmp	r3, #0
 8010b08:	d001      	beq.n	8010b0e <dir_next+0x106>
 8010b0a:	2301      	movs	r3, #1
 8010b0c:	e04e      	b.n	8010bac <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8010b0e:	68fb      	ldr	r3, [r7, #12]
 8010b10:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8010b14:	68fb      	ldr	r3, [r7, #12]
 8010b16:	899b      	ldrh	r3, [r3, #12]
 8010b18:	461a      	mov	r2, r3
 8010b1a:	2100      	movs	r1, #0
 8010b1c:	f7ff f905 	bl	800fd2a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8010b20:	2300      	movs	r3, #0
 8010b22:	613b      	str	r3, [r7, #16]
 8010b24:	6979      	ldr	r1, [r7, #20]
 8010b26:	68f8      	ldr	r0, [r7, #12]
 8010b28:	f7ff fbaa 	bl	8010280 <clust2sect>
 8010b2c:	4602      	mov	r2, r0
 8010b2e:	68fb      	ldr	r3, [r7, #12]
 8010b30:	635a      	str	r2, [r3, #52]	; 0x34
 8010b32:	e012      	b.n	8010b5a <dir_next+0x152>
						fs->wflag = 1;
 8010b34:	68fb      	ldr	r3, [r7, #12]
 8010b36:	2201      	movs	r2, #1
 8010b38:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8010b3a:	68f8      	ldr	r0, [r7, #12]
 8010b3c:	f7ff fabe 	bl	80100bc <sync_window>
 8010b40:	4603      	mov	r3, r0
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	d001      	beq.n	8010b4a <dir_next+0x142>
 8010b46:	2301      	movs	r3, #1
 8010b48:	e030      	b.n	8010bac <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8010b4a:	693b      	ldr	r3, [r7, #16]
 8010b4c:	3301      	adds	r3, #1
 8010b4e:	613b      	str	r3, [r7, #16]
 8010b50:	68fb      	ldr	r3, [r7, #12]
 8010b52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b54:	1c5a      	adds	r2, r3, #1
 8010b56:	68fb      	ldr	r3, [r7, #12]
 8010b58:	635a      	str	r2, [r3, #52]	; 0x34
 8010b5a:	68fb      	ldr	r3, [r7, #12]
 8010b5c:	895b      	ldrh	r3, [r3, #10]
 8010b5e:	461a      	mov	r2, r3
 8010b60:	693b      	ldr	r3, [r7, #16]
 8010b62:	4293      	cmp	r3, r2
 8010b64:	d3e6      	bcc.n	8010b34 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8010b66:	68fb      	ldr	r3, [r7, #12]
 8010b68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010b6a:	693b      	ldr	r3, [r7, #16]
 8010b6c:	1ad2      	subs	r2, r2, r3
 8010b6e:	68fb      	ldr	r3, [r7, #12]
 8010b70:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	697a      	ldr	r2, [r7, #20]
 8010b76:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8010b78:	6979      	ldr	r1, [r7, #20]
 8010b7a:	68f8      	ldr	r0, [r7, #12]
 8010b7c:	f7ff fb80 	bl	8010280 <clust2sect>
 8010b80:	4602      	mov	r2, r0
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	68ba      	ldr	r2, [r7, #8]
 8010b8a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8010b8c:	68fb      	ldr	r3, [r7, #12]
 8010b8e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010b92:	68fb      	ldr	r3, [r7, #12]
 8010b94:	899b      	ldrh	r3, [r3, #12]
 8010b96:	461a      	mov	r2, r3
 8010b98:	68bb      	ldr	r3, [r7, #8]
 8010b9a:	fbb3 f0f2 	udiv	r0, r3, r2
 8010b9e:	fb02 f200 	mul.w	r2, r2, r0
 8010ba2:	1a9b      	subs	r3, r3, r2
 8010ba4:	18ca      	adds	r2, r1, r3
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8010baa:	2300      	movs	r3, #0
}
 8010bac:	4618      	mov	r0, r3
 8010bae:	3718      	adds	r7, #24
 8010bb0:	46bd      	mov	sp, r7
 8010bb2:	bd80      	pop	{r7, pc}

08010bb4 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8010bb4:	b580      	push	{r7, lr}
 8010bb6:	b086      	sub	sp, #24
 8010bb8:	af00      	add	r7, sp, #0
 8010bba:	6078      	str	r0, [r7, #4]
 8010bbc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	681b      	ldr	r3, [r3, #0]
 8010bc2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8010bc4:	2100      	movs	r1, #0
 8010bc6:	6878      	ldr	r0, [r7, #4]
 8010bc8:	f7ff fe95 	bl	80108f6 <dir_sdi>
 8010bcc:	4603      	mov	r3, r0
 8010bce:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010bd0:	7dfb      	ldrb	r3, [r7, #23]
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	d12b      	bne.n	8010c2e <dir_alloc+0x7a>
		n = 0;
 8010bd6:	2300      	movs	r3, #0
 8010bd8:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	69db      	ldr	r3, [r3, #28]
 8010bde:	4619      	mov	r1, r3
 8010be0:	68f8      	ldr	r0, [r7, #12]
 8010be2:	f7ff faaf 	bl	8010144 <move_window>
 8010be6:	4603      	mov	r3, r0
 8010be8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8010bea:	7dfb      	ldrb	r3, [r7, #23]
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	d11d      	bne.n	8010c2c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	6a1b      	ldr	r3, [r3, #32]
 8010bf4:	781b      	ldrb	r3, [r3, #0]
 8010bf6:	2be5      	cmp	r3, #229	; 0xe5
 8010bf8:	d004      	beq.n	8010c04 <dir_alloc+0x50>
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	6a1b      	ldr	r3, [r3, #32]
 8010bfe:	781b      	ldrb	r3, [r3, #0]
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	d107      	bne.n	8010c14 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8010c04:	693b      	ldr	r3, [r7, #16]
 8010c06:	3301      	adds	r3, #1
 8010c08:	613b      	str	r3, [r7, #16]
 8010c0a:	693a      	ldr	r2, [r7, #16]
 8010c0c:	683b      	ldr	r3, [r7, #0]
 8010c0e:	429a      	cmp	r2, r3
 8010c10:	d102      	bne.n	8010c18 <dir_alloc+0x64>
 8010c12:	e00c      	b.n	8010c2e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8010c14:	2300      	movs	r3, #0
 8010c16:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8010c18:	2101      	movs	r1, #1
 8010c1a:	6878      	ldr	r0, [r7, #4]
 8010c1c:	f7ff fef4 	bl	8010a08 <dir_next>
 8010c20:	4603      	mov	r3, r0
 8010c22:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8010c24:	7dfb      	ldrb	r3, [r7, #23]
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	d0d7      	beq.n	8010bda <dir_alloc+0x26>
 8010c2a:	e000      	b.n	8010c2e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8010c2c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8010c2e:	7dfb      	ldrb	r3, [r7, #23]
 8010c30:	2b04      	cmp	r3, #4
 8010c32:	d101      	bne.n	8010c38 <dir_alloc+0x84>
 8010c34:	2307      	movs	r3, #7
 8010c36:	75fb      	strb	r3, [r7, #23]
	return res;
 8010c38:	7dfb      	ldrb	r3, [r7, #23]
}
 8010c3a:	4618      	mov	r0, r3
 8010c3c:	3718      	adds	r7, #24
 8010c3e:	46bd      	mov	sp, r7
 8010c40:	bd80      	pop	{r7, pc}

08010c42 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8010c42:	b580      	push	{r7, lr}
 8010c44:	b084      	sub	sp, #16
 8010c46:	af00      	add	r7, sp, #0
 8010c48:	6078      	str	r0, [r7, #4]
 8010c4a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8010c4c:	683b      	ldr	r3, [r7, #0]
 8010c4e:	331a      	adds	r3, #26
 8010c50:	4618      	mov	r0, r3
 8010c52:	f7fe ffc7 	bl	800fbe4 <ld_word>
 8010c56:	4603      	mov	r3, r0
 8010c58:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	781b      	ldrb	r3, [r3, #0]
 8010c5e:	2b03      	cmp	r3, #3
 8010c60:	d109      	bne.n	8010c76 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8010c62:	683b      	ldr	r3, [r7, #0]
 8010c64:	3314      	adds	r3, #20
 8010c66:	4618      	mov	r0, r3
 8010c68:	f7fe ffbc 	bl	800fbe4 <ld_word>
 8010c6c:	4603      	mov	r3, r0
 8010c6e:	041b      	lsls	r3, r3, #16
 8010c70:	68fa      	ldr	r2, [r7, #12]
 8010c72:	4313      	orrs	r3, r2
 8010c74:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8010c76:	68fb      	ldr	r3, [r7, #12]
}
 8010c78:	4618      	mov	r0, r3
 8010c7a:	3710      	adds	r7, #16
 8010c7c:	46bd      	mov	sp, r7
 8010c7e:	bd80      	pop	{r7, pc}

08010c80 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8010c80:	b580      	push	{r7, lr}
 8010c82:	b084      	sub	sp, #16
 8010c84:	af00      	add	r7, sp, #0
 8010c86:	60f8      	str	r0, [r7, #12]
 8010c88:	60b9      	str	r1, [r7, #8]
 8010c8a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8010c8c:	68bb      	ldr	r3, [r7, #8]
 8010c8e:	331a      	adds	r3, #26
 8010c90:	687a      	ldr	r2, [r7, #4]
 8010c92:	b292      	uxth	r2, r2
 8010c94:	4611      	mov	r1, r2
 8010c96:	4618      	mov	r0, r3
 8010c98:	f7fe ffdf 	bl	800fc5a <st_word>
	if (fs->fs_type == FS_FAT32) {
 8010c9c:	68fb      	ldr	r3, [r7, #12]
 8010c9e:	781b      	ldrb	r3, [r3, #0]
 8010ca0:	2b03      	cmp	r3, #3
 8010ca2:	d109      	bne.n	8010cb8 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8010ca4:	68bb      	ldr	r3, [r7, #8]
 8010ca6:	f103 0214 	add.w	r2, r3, #20
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	0c1b      	lsrs	r3, r3, #16
 8010cae:	b29b      	uxth	r3, r3
 8010cb0:	4619      	mov	r1, r3
 8010cb2:	4610      	mov	r0, r2
 8010cb4:	f7fe ffd1 	bl	800fc5a <st_word>
	}
}
 8010cb8:	bf00      	nop
 8010cba:	3710      	adds	r7, #16
 8010cbc:	46bd      	mov	sp, r7
 8010cbe:	bd80      	pop	{r7, pc}

08010cc0 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8010cc0:	b580      	push	{r7, lr}
 8010cc2:	b086      	sub	sp, #24
 8010cc4:	af00      	add	r7, sp, #0
 8010cc6:	6078      	str	r0, [r7, #4]
 8010cc8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8010cca:	2304      	movs	r3, #4
 8010ccc:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	681b      	ldr	r3, [r3, #0]
 8010cd2:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8010cd4:	e03c      	b.n	8010d50 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	69db      	ldr	r3, [r3, #28]
 8010cda:	4619      	mov	r1, r3
 8010cdc:	6938      	ldr	r0, [r7, #16]
 8010cde:	f7ff fa31 	bl	8010144 <move_window>
 8010ce2:	4603      	mov	r3, r0
 8010ce4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8010ce6:	7dfb      	ldrb	r3, [r7, #23]
 8010ce8:	2b00      	cmp	r3, #0
 8010cea:	d136      	bne.n	8010d5a <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	6a1b      	ldr	r3, [r3, #32]
 8010cf0:	781b      	ldrb	r3, [r3, #0]
 8010cf2:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8010cf4:	7bfb      	ldrb	r3, [r7, #15]
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	d102      	bne.n	8010d00 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8010cfa:	2304      	movs	r3, #4
 8010cfc:	75fb      	strb	r3, [r7, #23]
 8010cfe:	e031      	b.n	8010d64 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	6a1b      	ldr	r3, [r3, #32]
 8010d04:	330b      	adds	r3, #11
 8010d06:	781b      	ldrb	r3, [r3, #0]
 8010d08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010d0c:	73bb      	strb	r3, [r7, #14]
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	7bba      	ldrb	r2, [r7, #14]
 8010d12:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8010d14:	7bfb      	ldrb	r3, [r7, #15]
 8010d16:	2be5      	cmp	r3, #229	; 0xe5
 8010d18:	d011      	beq.n	8010d3e <dir_read+0x7e>
 8010d1a:	7bfb      	ldrb	r3, [r7, #15]
 8010d1c:	2b2e      	cmp	r3, #46	; 0x2e
 8010d1e:	d00e      	beq.n	8010d3e <dir_read+0x7e>
 8010d20:	7bbb      	ldrb	r3, [r7, #14]
 8010d22:	2b0f      	cmp	r3, #15
 8010d24:	d00b      	beq.n	8010d3e <dir_read+0x7e>
 8010d26:	7bbb      	ldrb	r3, [r7, #14]
 8010d28:	f023 0320 	bic.w	r3, r3, #32
 8010d2c:	2b08      	cmp	r3, #8
 8010d2e:	bf0c      	ite	eq
 8010d30:	2301      	moveq	r3, #1
 8010d32:	2300      	movne	r3, #0
 8010d34:	b2db      	uxtb	r3, r3
 8010d36:	461a      	mov	r2, r3
 8010d38:	683b      	ldr	r3, [r7, #0]
 8010d3a:	4293      	cmp	r3, r2
 8010d3c:	d00f      	beq.n	8010d5e <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8010d3e:	2100      	movs	r1, #0
 8010d40:	6878      	ldr	r0, [r7, #4]
 8010d42:	f7ff fe61 	bl	8010a08 <dir_next>
 8010d46:	4603      	mov	r3, r0
 8010d48:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8010d4a:	7dfb      	ldrb	r3, [r7, #23]
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	d108      	bne.n	8010d62 <dir_read+0xa2>
	while (dp->sect) {
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	69db      	ldr	r3, [r3, #28]
 8010d54:	2b00      	cmp	r3, #0
 8010d56:	d1be      	bne.n	8010cd6 <dir_read+0x16>
 8010d58:	e004      	b.n	8010d64 <dir_read+0xa4>
		if (res != FR_OK) break;
 8010d5a:	bf00      	nop
 8010d5c:	e002      	b.n	8010d64 <dir_read+0xa4>
				break;
 8010d5e:	bf00      	nop
 8010d60:	e000      	b.n	8010d64 <dir_read+0xa4>
		if (res != FR_OK) break;
 8010d62:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8010d64:	7dfb      	ldrb	r3, [r7, #23]
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d002      	beq.n	8010d70 <dir_read+0xb0>
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	2200      	movs	r2, #0
 8010d6e:	61da      	str	r2, [r3, #28]
	return res;
 8010d70:	7dfb      	ldrb	r3, [r7, #23]
}
 8010d72:	4618      	mov	r0, r3
 8010d74:	3718      	adds	r7, #24
 8010d76:	46bd      	mov	sp, r7
 8010d78:	bd80      	pop	{r7, pc}

08010d7a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8010d7a:	b580      	push	{r7, lr}
 8010d7c:	b086      	sub	sp, #24
 8010d7e:	af00      	add	r7, sp, #0
 8010d80:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	681b      	ldr	r3, [r3, #0]
 8010d86:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8010d88:	2100      	movs	r1, #0
 8010d8a:	6878      	ldr	r0, [r7, #4]
 8010d8c:	f7ff fdb3 	bl	80108f6 <dir_sdi>
 8010d90:	4603      	mov	r3, r0
 8010d92:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8010d94:	7dfb      	ldrb	r3, [r7, #23]
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d001      	beq.n	8010d9e <dir_find+0x24>
 8010d9a:	7dfb      	ldrb	r3, [r7, #23]
 8010d9c:	e03e      	b.n	8010e1c <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	69db      	ldr	r3, [r3, #28]
 8010da2:	4619      	mov	r1, r3
 8010da4:	6938      	ldr	r0, [r7, #16]
 8010da6:	f7ff f9cd 	bl	8010144 <move_window>
 8010daa:	4603      	mov	r3, r0
 8010dac:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8010dae:	7dfb      	ldrb	r3, [r7, #23]
 8010db0:	2b00      	cmp	r3, #0
 8010db2:	d12f      	bne.n	8010e14 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	6a1b      	ldr	r3, [r3, #32]
 8010db8:	781b      	ldrb	r3, [r3, #0]
 8010dba:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8010dbc:	7bfb      	ldrb	r3, [r7, #15]
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	d102      	bne.n	8010dc8 <dir_find+0x4e>
 8010dc2:	2304      	movs	r3, #4
 8010dc4:	75fb      	strb	r3, [r7, #23]
 8010dc6:	e028      	b.n	8010e1a <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	6a1b      	ldr	r3, [r3, #32]
 8010dcc:	330b      	adds	r3, #11
 8010dce:	781b      	ldrb	r3, [r3, #0]
 8010dd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010dd4:	b2da      	uxtb	r2, r3
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	6a1b      	ldr	r3, [r3, #32]
 8010dde:	330b      	adds	r3, #11
 8010de0:	781b      	ldrb	r3, [r3, #0]
 8010de2:	f003 0308 	and.w	r3, r3, #8
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	d10a      	bne.n	8010e00 <dir_find+0x86>
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	6a18      	ldr	r0, [r3, #32]
 8010dee:	687b      	ldr	r3, [r7, #4]
 8010df0:	3324      	adds	r3, #36	; 0x24
 8010df2:	220b      	movs	r2, #11
 8010df4:	4619      	mov	r1, r3
 8010df6:	f7fe ffb2 	bl	800fd5e <mem_cmp>
 8010dfa:	4603      	mov	r3, r0
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	d00b      	beq.n	8010e18 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8010e00:	2100      	movs	r1, #0
 8010e02:	6878      	ldr	r0, [r7, #4]
 8010e04:	f7ff fe00 	bl	8010a08 <dir_next>
 8010e08:	4603      	mov	r3, r0
 8010e0a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8010e0c:	7dfb      	ldrb	r3, [r7, #23]
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	d0c5      	beq.n	8010d9e <dir_find+0x24>
 8010e12:	e002      	b.n	8010e1a <dir_find+0xa0>
		if (res != FR_OK) break;
 8010e14:	bf00      	nop
 8010e16:	e000      	b.n	8010e1a <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8010e18:	bf00      	nop

	return res;
 8010e1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8010e1c:	4618      	mov	r0, r3
 8010e1e:	3718      	adds	r7, #24
 8010e20:	46bd      	mov	sp, r7
 8010e22:	bd80      	pop	{r7, pc}

08010e24 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8010e24:	b580      	push	{r7, lr}
 8010e26:	b084      	sub	sp, #16
 8010e28:	af00      	add	r7, sp, #0
 8010e2a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	681b      	ldr	r3, [r3, #0]
 8010e30:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8010e32:	2101      	movs	r1, #1
 8010e34:	6878      	ldr	r0, [r7, #4]
 8010e36:	f7ff febd 	bl	8010bb4 <dir_alloc>
 8010e3a:	4603      	mov	r3, r0
 8010e3c:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8010e3e:	7bfb      	ldrb	r3, [r7, #15]
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	d11c      	bne.n	8010e7e <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	69db      	ldr	r3, [r3, #28]
 8010e48:	4619      	mov	r1, r3
 8010e4a:	68b8      	ldr	r0, [r7, #8]
 8010e4c:	f7ff f97a 	bl	8010144 <move_window>
 8010e50:	4603      	mov	r3, r0
 8010e52:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010e54:	7bfb      	ldrb	r3, [r7, #15]
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	d111      	bne.n	8010e7e <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	6a1b      	ldr	r3, [r3, #32]
 8010e5e:	2220      	movs	r2, #32
 8010e60:	2100      	movs	r1, #0
 8010e62:	4618      	mov	r0, r3
 8010e64:	f7fe ff61 	bl	800fd2a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	6a18      	ldr	r0, [r3, #32]
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	3324      	adds	r3, #36	; 0x24
 8010e70:	220b      	movs	r2, #11
 8010e72:	4619      	mov	r1, r3
 8010e74:	f7fe ff38 	bl	800fce8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8010e78:	68bb      	ldr	r3, [r7, #8]
 8010e7a:	2201      	movs	r2, #1
 8010e7c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8010e7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e80:	4618      	mov	r0, r3
 8010e82:	3710      	adds	r7, #16
 8010e84:	46bd      	mov	sp, r7
 8010e86:	bd80      	pop	{r7, pc}

08010e88 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8010e88:	b580      	push	{r7, lr}
 8010e8a:	b084      	sub	sp, #16
 8010e8c:	af00      	add	r7, sp, #0
 8010e8e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	681b      	ldr	r3, [r3, #0]
 8010e94:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	69db      	ldr	r3, [r3, #28]
 8010e9a:	4619      	mov	r1, r3
 8010e9c:	68f8      	ldr	r0, [r7, #12]
 8010e9e:	f7ff f951 	bl	8010144 <move_window>
 8010ea2:	4603      	mov	r3, r0
 8010ea4:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 8010ea6:	7afb      	ldrb	r3, [r7, #11]
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	d106      	bne.n	8010eba <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	6a1b      	ldr	r3, [r3, #32]
 8010eb0:	22e5      	movs	r2, #229	; 0xe5
 8010eb2:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8010eb4:	68fb      	ldr	r3, [r7, #12]
 8010eb6:	2201      	movs	r2, #1
 8010eb8:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 8010eba:	7afb      	ldrb	r3, [r7, #11]
}
 8010ebc:	4618      	mov	r0, r3
 8010ebe:	3710      	adds	r7, #16
 8010ec0:	46bd      	mov	sp, r7
 8010ec2:	bd80      	pop	{r7, pc}

08010ec4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8010ec4:	b580      	push	{r7, lr}
 8010ec6:	b088      	sub	sp, #32
 8010ec8:	af00      	add	r7, sp, #0
 8010eca:	6078      	str	r0, [r7, #4]
 8010ecc:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8010ece:	683b      	ldr	r3, [r7, #0]
 8010ed0:	681b      	ldr	r3, [r3, #0]
 8010ed2:	60fb      	str	r3, [r7, #12]
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	3324      	adds	r3, #36	; 0x24
 8010ed8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8010eda:	220b      	movs	r2, #11
 8010edc:	2120      	movs	r1, #32
 8010ede:	68b8      	ldr	r0, [r7, #8]
 8010ee0:	f7fe ff23 	bl	800fd2a <mem_set>
	si = i = 0; ni = 8;
 8010ee4:	2300      	movs	r3, #0
 8010ee6:	613b      	str	r3, [r7, #16]
 8010ee8:	693b      	ldr	r3, [r7, #16]
 8010eea:	617b      	str	r3, [r7, #20]
 8010eec:	2308      	movs	r3, #8
 8010eee:	61bb      	str	r3, [r7, #24]
#if _FS_RPATH != 0
	if (p[si] == '.') { /* Is this a dot entry? */
 8010ef0:	68fa      	ldr	r2, [r7, #12]
 8010ef2:	697b      	ldr	r3, [r7, #20]
 8010ef4:	4413      	add	r3, r2
 8010ef6:	781b      	ldrb	r3, [r3, #0]
 8010ef8:	2b2e      	cmp	r3, #46	; 0x2e
 8010efa:	d12f      	bne.n	8010f5c <create_name+0x98>
		for (;;) {
			c = (BYTE)p[si++];
 8010efc:	697b      	ldr	r3, [r7, #20]
 8010efe:	1c5a      	adds	r2, r3, #1
 8010f00:	617a      	str	r2, [r7, #20]
 8010f02:	68fa      	ldr	r2, [r7, #12]
 8010f04:	4413      	add	r3, r2
 8010f06:	781b      	ldrb	r3, [r3, #0]
 8010f08:	77fb      	strb	r3, [r7, #31]
			if (c != '.' || si >= 3) break;
 8010f0a:	7ffb      	ldrb	r3, [r7, #31]
 8010f0c:	2b2e      	cmp	r3, #46	; 0x2e
 8010f0e:	d10a      	bne.n	8010f26 <create_name+0x62>
 8010f10:	697b      	ldr	r3, [r7, #20]
 8010f12:	2b02      	cmp	r3, #2
 8010f14:	d807      	bhi.n	8010f26 <create_name+0x62>
			sfn[i++] = c;
 8010f16:	693b      	ldr	r3, [r7, #16]
 8010f18:	1c5a      	adds	r2, r3, #1
 8010f1a:	613a      	str	r2, [r7, #16]
 8010f1c:	68ba      	ldr	r2, [r7, #8]
 8010f1e:	4413      	add	r3, r2
 8010f20:	7ffa      	ldrb	r2, [r7, #31]
 8010f22:	701a      	strb	r2, [r3, #0]
			c = (BYTE)p[si++];
 8010f24:	e7ea      	b.n	8010efc <create_name+0x38>
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
 8010f26:	7ffb      	ldrb	r3, [r7, #31]
 8010f28:	2b2f      	cmp	r3, #47	; 0x2f
 8010f2a:	d007      	beq.n	8010f3c <create_name+0x78>
 8010f2c:	7ffb      	ldrb	r3, [r7, #31]
 8010f2e:	2b5c      	cmp	r3, #92	; 0x5c
 8010f30:	d004      	beq.n	8010f3c <create_name+0x78>
 8010f32:	7ffb      	ldrb	r3, [r7, #31]
 8010f34:	2b20      	cmp	r3, #32
 8010f36:	d901      	bls.n	8010f3c <create_name+0x78>
 8010f38:	2306      	movs	r3, #6
 8010f3a:	e084      	b.n	8011046 <create_name+0x182>
		*path = p + si;								/* Return pointer to the next segment */
 8010f3c:	68fa      	ldr	r2, [r7, #12]
 8010f3e:	697b      	ldr	r3, [r7, #20]
 8010f40:	441a      	add	r2, r3
 8010f42:	683b      	ldr	r3, [r7, #0]
 8010f44:	601a      	str	r2, [r3, #0]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
 8010f46:	7ffb      	ldrb	r3, [r7, #31]
 8010f48:	2b20      	cmp	r3, #32
 8010f4a:	d801      	bhi.n	8010f50 <create_name+0x8c>
 8010f4c:	2224      	movs	r2, #36	; 0x24
 8010f4e:	e000      	b.n	8010f52 <create_name+0x8e>
 8010f50:	2220      	movs	r2, #32
 8010f52:	68bb      	ldr	r3, [r7, #8]
 8010f54:	330b      	adds	r3, #11
 8010f56:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 8010f58:	2300      	movs	r3, #0
 8010f5a:	e074      	b.n	8011046 <create_name+0x182>
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8010f5c:	697b      	ldr	r3, [r7, #20]
 8010f5e:	1c5a      	adds	r2, r3, #1
 8010f60:	617a      	str	r2, [r7, #20]
 8010f62:	68fa      	ldr	r2, [r7, #12]
 8010f64:	4413      	add	r3, r2
 8010f66:	781b      	ldrb	r3, [r3, #0]
 8010f68:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8010f6a:	7ffb      	ldrb	r3, [r7, #31]
 8010f6c:	2b20      	cmp	r3, #32
 8010f6e:	d94e      	bls.n	801100e <create_name+0x14a>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8010f70:	7ffb      	ldrb	r3, [r7, #31]
 8010f72:	2b2f      	cmp	r3, #47	; 0x2f
 8010f74:	d006      	beq.n	8010f84 <create_name+0xc0>
 8010f76:	7ffb      	ldrb	r3, [r7, #31]
 8010f78:	2b5c      	cmp	r3, #92	; 0x5c
 8010f7a:	d110      	bne.n	8010f9e <create_name+0xda>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8010f7c:	e002      	b.n	8010f84 <create_name+0xc0>
 8010f7e:	697b      	ldr	r3, [r7, #20]
 8010f80:	3301      	adds	r3, #1
 8010f82:	617b      	str	r3, [r7, #20]
 8010f84:	68fa      	ldr	r2, [r7, #12]
 8010f86:	697b      	ldr	r3, [r7, #20]
 8010f88:	4413      	add	r3, r2
 8010f8a:	781b      	ldrb	r3, [r3, #0]
 8010f8c:	2b2f      	cmp	r3, #47	; 0x2f
 8010f8e:	d0f6      	beq.n	8010f7e <create_name+0xba>
 8010f90:	68fa      	ldr	r2, [r7, #12]
 8010f92:	697b      	ldr	r3, [r7, #20]
 8010f94:	4413      	add	r3, r2
 8010f96:	781b      	ldrb	r3, [r3, #0]
 8010f98:	2b5c      	cmp	r3, #92	; 0x5c
 8010f9a:	d0f0      	beq.n	8010f7e <create_name+0xba>
			break;
 8010f9c:	e038      	b.n	8011010 <create_name+0x14c>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8010f9e:	7ffb      	ldrb	r3, [r7, #31]
 8010fa0:	2b2e      	cmp	r3, #46	; 0x2e
 8010fa2:	d003      	beq.n	8010fac <create_name+0xe8>
 8010fa4:	693a      	ldr	r2, [r7, #16]
 8010fa6:	69bb      	ldr	r3, [r7, #24]
 8010fa8:	429a      	cmp	r2, r3
 8010faa:	d30c      	bcc.n	8010fc6 <create_name+0x102>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8010fac:	69bb      	ldr	r3, [r7, #24]
 8010fae:	2b0b      	cmp	r3, #11
 8010fb0:	d002      	beq.n	8010fb8 <create_name+0xf4>
 8010fb2:	7ffb      	ldrb	r3, [r7, #31]
 8010fb4:	2b2e      	cmp	r3, #46	; 0x2e
 8010fb6:	d001      	beq.n	8010fbc <create_name+0xf8>
 8010fb8:	2306      	movs	r3, #6
 8010fba:	e044      	b.n	8011046 <create_name+0x182>
			i = 8; ni = 11;				/* Goto extension */
 8010fbc:	2308      	movs	r3, #8
 8010fbe:	613b      	str	r3, [r7, #16]
 8010fc0:	230b      	movs	r3, #11
 8010fc2:	61bb      	str	r3, [r7, #24]
			continue;
 8010fc4:	e022      	b.n	801100c <create_name+0x148>
		}
		if (c >= 0x80) {				/* Extended character? */
 8010fc6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	da04      	bge.n	8010fd8 <create_name+0x114>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8010fce:	7ffb      	ldrb	r3, [r7, #31]
 8010fd0:	3b80      	subs	r3, #128	; 0x80
 8010fd2:	4a1f      	ldr	r2, [pc, #124]	; (8011050 <create_name+0x18c>)
 8010fd4:	5cd3      	ldrb	r3, [r2, r3]
 8010fd6:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8010fd8:	7ffb      	ldrb	r3, [r7, #31]
 8010fda:	4619      	mov	r1, r3
 8010fdc:	481d      	ldr	r0, [pc, #116]	; (8011054 <create_name+0x190>)
 8010fde:	f7fe fee5 	bl	800fdac <chk_chr>
 8010fe2:	4603      	mov	r3, r0
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	d001      	beq.n	8010fec <create_name+0x128>
 8010fe8:	2306      	movs	r3, #6
 8010fea:	e02c      	b.n	8011046 <create_name+0x182>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8010fec:	7ffb      	ldrb	r3, [r7, #31]
 8010fee:	2b60      	cmp	r3, #96	; 0x60
 8010ff0:	d905      	bls.n	8010ffe <create_name+0x13a>
 8010ff2:	7ffb      	ldrb	r3, [r7, #31]
 8010ff4:	2b7a      	cmp	r3, #122	; 0x7a
 8010ff6:	d802      	bhi.n	8010ffe <create_name+0x13a>
 8010ff8:	7ffb      	ldrb	r3, [r7, #31]
 8010ffa:	3b20      	subs	r3, #32
 8010ffc:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8010ffe:	693b      	ldr	r3, [r7, #16]
 8011000:	1c5a      	adds	r2, r3, #1
 8011002:	613a      	str	r2, [r7, #16]
 8011004:	68ba      	ldr	r2, [r7, #8]
 8011006:	4413      	add	r3, r2
 8011008:	7ffa      	ldrb	r2, [r7, #31]
 801100a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 801100c:	e7a6      	b.n	8010f5c <create_name+0x98>
		if (c <= ' ') break; 			/* Break if end of the path name */
 801100e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8011010:	68fa      	ldr	r2, [r7, #12]
 8011012:	697b      	ldr	r3, [r7, #20]
 8011014:	441a      	add	r2, r3
 8011016:	683b      	ldr	r3, [r7, #0]
 8011018:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 801101a:	693b      	ldr	r3, [r7, #16]
 801101c:	2b00      	cmp	r3, #0
 801101e:	d101      	bne.n	8011024 <create_name+0x160>
 8011020:	2306      	movs	r3, #6
 8011022:	e010      	b.n	8011046 <create_name+0x182>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8011024:	68bb      	ldr	r3, [r7, #8]
 8011026:	781b      	ldrb	r3, [r3, #0]
 8011028:	2be5      	cmp	r3, #229	; 0xe5
 801102a:	d102      	bne.n	8011032 <create_name+0x16e>
 801102c:	68bb      	ldr	r3, [r7, #8]
 801102e:	2205      	movs	r2, #5
 8011030:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8011032:	7ffb      	ldrb	r3, [r7, #31]
 8011034:	2b20      	cmp	r3, #32
 8011036:	d801      	bhi.n	801103c <create_name+0x178>
 8011038:	2204      	movs	r2, #4
 801103a:	e000      	b.n	801103e <create_name+0x17a>
 801103c:	2200      	movs	r2, #0
 801103e:	68bb      	ldr	r3, [r7, #8]
 8011040:	330b      	adds	r3, #11
 8011042:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8011044:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8011046:	4618      	mov	r0, r3
 8011048:	3720      	adds	r7, #32
 801104a:	46bd      	mov	sp, r7
 801104c:	bd80      	pop	{r7, pc}
 801104e:	bf00      	nop
 8011050:	080187c4 	.word	0x080187c4
 8011054:	08018774 	.word	0x08018774

08011058 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8011058:	b580      	push	{r7, lr}
 801105a:	b086      	sub	sp, #24
 801105c:	af00      	add	r7, sp, #0
 801105e:	6078      	str	r0, [r7, #4]
 8011060:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8011066:	693b      	ldr	r3, [r7, #16]
 8011068:	681b      	ldr	r3, [r3, #0]
 801106a:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 801106c:	683b      	ldr	r3, [r7, #0]
 801106e:	781b      	ldrb	r3, [r3, #0]
 8011070:	2b2f      	cmp	r3, #47	; 0x2f
 8011072:	d00b      	beq.n	801108c <follow_path+0x34>
 8011074:	683b      	ldr	r3, [r7, #0]
 8011076:	781b      	ldrb	r3, [r3, #0]
 8011078:	2b5c      	cmp	r3, #92	; 0x5c
 801107a:	d007      	beq.n	801108c <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 801107c:	68fb      	ldr	r3, [r7, #12]
 801107e:	699a      	ldr	r2, [r3, #24]
 8011080:	693b      	ldr	r3, [r7, #16]
 8011082:	609a      	str	r2, [r3, #8]
 8011084:	e00d      	b.n	80110a2 <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8011086:	683b      	ldr	r3, [r7, #0]
 8011088:	3301      	adds	r3, #1
 801108a:	603b      	str	r3, [r7, #0]
 801108c:	683b      	ldr	r3, [r7, #0]
 801108e:	781b      	ldrb	r3, [r3, #0]
 8011090:	2b2f      	cmp	r3, #47	; 0x2f
 8011092:	d0f8      	beq.n	8011086 <follow_path+0x2e>
 8011094:	683b      	ldr	r3, [r7, #0]
 8011096:	781b      	ldrb	r3, [r3, #0]
 8011098:	2b5c      	cmp	r3, #92	; 0x5c
 801109a:	d0f4      	beq.n	8011086 <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 801109c:	693b      	ldr	r3, [r7, #16]
 801109e:	2200      	movs	r2, #0
 80110a0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80110a2:	683b      	ldr	r3, [r7, #0]
 80110a4:	781b      	ldrb	r3, [r3, #0]
 80110a6:	2b1f      	cmp	r3, #31
 80110a8:	d80a      	bhi.n	80110c0 <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	2280      	movs	r2, #128	; 0x80
 80110ae:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80110b2:	2100      	movs	r1, #0
 80110b4:	6878      	ldr	r0, [r7, #4]
 80110b6:	f7ff fc1e 	bl	80108f6 <dir_sdi>
 80110ba:	4603      	mov	r3, r0
 80110bc:	75fb      	strb	r3, [r7, #23]
 80110be:	e05b      	b.n	8011178 <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80110c0:	463b      	mov	r3, r7
 80110c2:	4619      	mov	r1, r3
 80110c4:	6878      	ldr	r0, [r7, #4]
 80110c6:	f7ff fefd 	bl	8010ec4 <create_name>
 80110ca:	4603      	mov	r3, r0
 80110cc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80110ce:	7dfb      	ldrb	r3, [r7, #23]
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	d14c      	bne.n	801116e <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 80110d4:	6878      	ldr	r0, [r7, #4]
 80110d6:	f7ff fe50 	bl	8010d7a <dir_find>
 80110da:	4603      	mov	r3, r0
 80110dc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80110e4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80110e6:	7dfb      	ldrb	r3, [r7, #23]
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	d01b      	beq.n	8011124 <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80110ec:	7dfb      	ldrb	r3, [r7, #23]
 80110ee:	2b04      	cmp	r3, #4
 80110f0:	d13f      	bne.n	8011172 <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 80110f2:	7afb      	ldrb	r3, [r7, #11]
 80110f4:	f003 0320 	and.w	r3, r3, #32
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	d00b      	beq.n	8011114 <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 80110fc:	7afb      	ldrb	r3, [r7, #11]
 80110fe:	f003 0304 	and.w	r3, r3, #4
 8011102:	2b00      	cmp	r3, #0
 8011104:	d031      	beq.n	801116a <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	2280      	movs	r2, #128	; 0x80
 801110a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 801110e:	2300      	movs	r3, #0
 8011110:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 8011112:	e02e      	b.n	8011172 <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8011114:	7afb      	ldrb	r3, [r7, #11]
 8011116:	f003 0304 	and.w	r3, r3, #4
 801111a:	2b00      	cmp	r3, #0
 801111c:	d129      	bne.n	8011172 <follow_path+0x11a>
 801111e:	2305      	movs	r3, #5
 8011120:	75fb      	strb	r3, [r7, #23]
				break;
 8011122:	e026      	b.n	8011172 <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8011124:	7afb      	ldrb	r3, [r7, #11]
 8011126:	f003 0304 	and.w	r3, r3, #4
 801112a:	2b00      	cmp	r3, #0
 801112c:	d123      	bne.n	8011176 <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801112e:	693b      	ldr	r3, [r7, #16]
 8011130:	799b      	ldrb	r3, [r3, #6]
 8011132:	f003 0310 	and.w	r3, r3, #16
 8011136:	2b00      	cmp	r3, #0
 8011138:	d102      	bne.n	8011140 <follow_path+0xe8>
				res = FR_NO_PATH; break;
 801113a:	2305      	movs	r3, #5
 801113c:	75fb      	strb	r3, [r7, #23]
 801113e:	e01b      	b.n	8011178 <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8011140:	68fb      	ldr	r3, [r7, #12]
 8011142:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	695b      	ldr	r3, [r3, #20]
 801114a:	68fa      	ldr	r2, [r7, #12]
 801114c:	8992      	ldrh	r2, [r2, #12]
 801114e:	fbb3 f0f2 	udiv	r0, r3, r2
 8011152:	fb02 f200 	mul.w	r2, r2, r0
 8011156:	1a9b      	subs	r3, r3, r2
 8011158:	440b      	add	r3, r1
 801115a:	4619      	mov	r1, r3
 801115c:	68f8      	ldr	r0, [r7, #12]
 801115e:	f7ff fd70 	bl	8010c42 <ld_clust>
 8011162:	4602      	mov	r2, r0
 8011164:	693b      	ldr	r3, [r7, #16]
 8011166:	609a      	str	r2, [r3, #8]
 8011168:	e7aa      	b.n	80110c0 <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 801116a:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801116c:	e7a8      	b.n	80110c0 <follow_path+0x68>
			if (res != FR_OK) break;
 801116e:	bf00      	nop
 8011170:	e002      	b.n	8011178 <follow_path+0x120>
				break;
 8011172:	bf00      	nop
 8011174:	e000      	b.n	8011178 <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8011176:	bf00      	nop
			}
		}
	}

	return res;
 8011178:	7dfb      	ldrb	r3, [r7, #23]
}
 801117a:	4618      	mov	r0, r3
 801117c:	3718      	adds	r7, #24
 801117e:	46bd      	mov	sp, r7
 8011180:	bd80      	pop	{r7, pc}

08011182 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8011182:	b480      	push	{r7}
 8011184:	b087      	sub	sp, #28
 8011186:	af00      	add	r7, sp, #0
 8011188:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801118a:	f04f 33ff 	mov.w	r3, #4294967295
 801118e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	681b      	ldr	r3, [r3, #0]
 8011194:	2b00      	cmp	r3, #0
 8011196:	d031      	beq.n	80111fc <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	681b      	ldr	r3, [r3, #0]
 801119c:	617b      	str	r3, [r7, #20]
 801119e:	e002      	b.n	80111a6 <get_ldnumber+0x24>
 80111a0:	697b      	ldr	r3, [r7, #20]
 80111a2:	3301      	adds	r3, #1
 80111a4:	617b      	str	r3, [r7, #20]
 80111a6:	697b      	ldr	r3, [r7, #20]
 80111a8:	781b      	ldrb	r3, [r3, #0]
 80111aa:	2b20      	cmp	r3, #32
 80111ac:	d903      	bls.n	80111b6 <get_ldnumber+0x34>
 80111ae:	697b      	ldr	r3, [r7, #20]
 80111b0:	781b      	ldrb	r3, [r3, #0]
 80111b2:	2b3a      	cmp	r3, #58	; 0x3a
 80111b4:	d1f4      	bne.n	80111a0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80111b6:	697b      	ldr	r3, [r7, #20]
 80111b8:	781b      	ldrb	r3, [r3, #0]
 80111ba:	2b3a      	cmp	r3, #58	; 0x3a
 80111bc:	d11c      	bne.n	80111f8 <get_ldnumber+0x76>
			tp = *path;
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	681b      	ldr	r3, [r3, #0]
 80111c2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80111c4:	68fb      	ldr	r3, [r7, #12]
 80111c6:	1c5a      	adds	r2, r3, #1
 80111c8:	60fa      	str	r2, [r7, #12]
 80111ca:	781b      	ldrb	r3, [r3, #0]
 80111cc:	3b30      	subs	r3, #48	; 0x30
 80111ce:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80111d0:	68bb      	ldr	r3, [r7, #8]
 80111d2:	2b09      	cmp	r3, #9
 80111d4:	d80e      	bhi.n	80111f4 <get_ldnumber+0x72>
 80111d6:	68fa      	ldr	r2, [r7, #12]
 80111d8:	697b      	ldr	r3, [r7, #20]
 80111da:	429a      	cmp	r2, r3
 80111dc:	d10a      	bne.n	80111f4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80111de:	68bb      	ldr	r3, [r7, #8]
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	d107      	bne.n	80111f4 <get_ldnumber+0x72>
					vol = (int)i;
 80111e4:	68bb      	ldr	r3, [r7, #8]
 80111e6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80111e8:	697b      	ldr	r3, [r7, #20]
 80111ea:	3301      	adds	r3, #1
 80111ec:	617b      	str	r3, [r7, #20]
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	697a      	ldr	r2, [r7, #20]
 80111f2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80111f4:	693b      	ldr	r3, [r7, #16]
 80111f6:	e002      	b.n	80111fe <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80111f8:	2300      	movs	r3, #0
 80111fa:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80111fc:	693b      	ldr	r3, [r7, #16]
}
 80111fe:	4618      	mov	r0, r3
 8011200:	371c      	adds	r7, #28
 8011202:	46bd      	mov	sp, r7
 8011204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011208:	4770      	bx	lr
	...

0801120c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 801120c:	b580      	push	{r7, lr}
 801120e:	b082      	sub	sp, #8
 8011210:	af00      	add	r7, sp, #0
 8011212:	6078      	str	r0, [r7, #4]
 8011214:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	2200      	movs	r2, #0
 801121a:	70da      	strb	r2, [r3, #3]
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	f04f 32ff 	mov.w	r2, #4294967295
 8011222:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8011224:	6839      	ldr	r1, [r7, #0]
 8011226:	6878      	ldr	r0, [r7, #4]
 8011228:	f7fe ff8c 	bl	8010144 <move_window>
 801122c:	4603      	mov	r3, r0
 801122e:	2b00      	cmp	r3, #0
 8011230:	d001      	beq.n	8011236 <check_fs+0x2a>
 8011232:	2304      	movs	r3, #4
 8011234:	e038      	b.n	80112a8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	3338      	adds	r3, #56	; 0x38
 801123a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801123e:	4618      	mov	r0, r3
 8011240:	f7fe fcd0 	bl	800fbe4 <ld_word>
 8011244:	4603      	mov	r3, r0
 8011246:	461a      	mov	r2, r3
 8011248:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801124c:	429a      	cmp	r2, r3
 801124e:	d001      	beq.n	8011254 <check_fs+0x48>
 8011250:	2303      	movs	r3, #3
 8011252:	e029      	b.n	80112a8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801125a:	2be9      	cmp	r3, #233	; 0xe9
 801125c:	d009      	beq.n	8011272 <check_fs+0x66>
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011264:	2beb      	cmp	r3, #235	; 0xeb
 8011266:	d11e      	bne.n	80112a6 <check_fs+0x9a>
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 801126e:	2b90      	cmp	r3, #144	; 0x90
 8011270:	d119      	bne.n	80112a6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	3338      	adds	r3, #56	; 0x38
 8011276:	3336      	adds	r3, #54	; 0x36
 8011278:	4618      	mov	r0, r3
 801127a:	f7fe fccb 	bl	800fc14 <ld_dword>
 801127e:	4603      	mov	r3, r0
 8011280:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8011284:	4a0a      	ldr	r2, [pc, #40]	; (80112b0 <check_fs+0xa4>)
 8011286:	4293      	cmp	r3, r2
 8011288:	d101      	bne.n	801128e <check_fs+0x82>
 801128a:	2300      	movs	r3, #0
 801128c:	e00c      	b.n	80112a8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	3338      	adds	r3, #56	; 0x38
 8011292:	3352      	adds	r3, #82	; 0x52
 8011294:	4618      	mov	r0, r3
 8011296:	f7fe fcbd 	bl	800fc14 <ld_dword>
 801129a:	4602      	mov	r2, r0
 801129c:	4b05      	ldr	r3, [pc, #20]	; (80112b4 <check_fs+0xa8>)
 801129e:	429a      	cmp	r2, r3
 80112a0:	d101      	bne.n	80112a6 <check_fs+0x9a>
 80112a2:	2300      	movs	r3, #0
 80112a4:	e000      	b.n	80112a8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80112a6:	2302      	movs	r3, #2
}
 80112a8:	4618      	mov	r0, r3
 80112aa:	3708      	adds	r7, #8
 80112ac:	46bd      	mov	sp, r7
 80112ae:	bd80      	pop	{r7, pc}
 80112b0:	00544146 	.word	0x00544146
 80112b4:	33544146 	.word	0x33544146

080112b8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80112b8:	b580      	push	{r7, lr}
 80112ba:	b096      	sub	sp, #88	; 0x58
 80112bc:	af00      	add	r7, sp, #0
 80112be:	60f8      	str	r0, [r7, #12]
 80112c0:	60b9      	str	r1, [r7, #8]
 80112c2:	4613      	mov	r3, r2
 80112c4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80112c6:	68bb      	ldr	r3, [r7, #8]
 80112c8:	2200      	movs	r2, #0
 80112ca:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80112cc:	68f8      	ldr	r0, [r7, #12]
 80112ce:	f7ff ff58 	bl	8011182 <get_ldnumber>
 80112d2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80112d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	da01      	bge.n	80112de <find_volume+0x26>
 80112da:	230b      	movs	r3, #11
 80112dc:	e268      	b.n	80117b0 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80112de:	4ab0      	ldr	r2, [pc, #704]	; (80115a0 <find_volume+0x2e8>)
 80112e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80112e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80112e6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80112e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	d101      	bne.n	80112f2 <find_volume+0x3a>
 80112ee:	230c      	movs	r3, #12
 80112f0:	e25e      	b.n	80117b0 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80112f2:	68bb      	ldr	r3, [r7, #8]
 80112f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80112f6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80112f8:	79fb      	ldrb	r3, [r7, #7]
 80112fa:	f023 0301 	bic.w	r3, r3, #1
 80112fe:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8011300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011302:	781b      	ldrb	r3, [r3, #0]
 8011304:	2b00      	cmp	r3, #0
 8011306:	d01a      	beq.n	801133e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8011308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801130a:	785b      	ldrb	r3, [r3, #1]
 801130c:	4618      	mov	r0, r3
 801130e:	f7fe fbcb 	bl	800faa8 <disk_status>
 8011312:	4603      	mov	r3, r0
 8011314:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8011318:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801131c:	f003 0301 	and.w	r3, r3, #1
 8011320:	2b00      	cmp	r3, #0
 8011322:	d10c      	bne.n	801133e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8011324:	79fb      	ldrb	r3, [r7, #7]
 8011326:	2b00      	cmp	r3, #0
 8011328:	d007      	beq.n	801133a <find_volume+0x82>
 801132a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801132e:	f003 0304 	and.w	r3, r3, #4
 8011332:	2b00      	cmp	r3, #0
 8011334:	d001      	beq.n	801133a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8011336:	230a      	movs	r3, #10
 8011338:	e23a      	b.n	80117b0 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 801133a:	2300      	movs	r3, #0
 801133c:	e238      	b.n	80117b0 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801133e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011340:	2200      	movs	r2, #0
 8011342:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8011344:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011346:	b2da      	uxtb	r2, r3
 8011348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801134a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 801134c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801134e:	785b      	ldrb	r3, [r3, #1]
 8011350:	4618      	mov	r0, r3
 8011352:	f7fe fbc3 	bl	800fadc <disk_initialize>
 8011356:	4603      	mov	r3, r0
 8011358:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 801135c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011360:	f003 0301 	and.w	r3, r3, #1
 8011364:	2b00      	cmp	r3, #0
 8011366:	d001      	beq.n	801136c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8011368:	2303      	movs	r3, #3
 801136a:	e221      	b.n	80117b0 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 801136c:	79fb      	ldrb	r3, [r7, #7]
 801136e:	2b00      	cmp	r3, #0
 8011370:	d007      	beq.n	8011382 <find_volume+0xca>
 8011372:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011376:	f003 0304 	and.w	r3, r3, #4
 801137a:	2b00      	cmp	r3, #0
 801137c:	d001      	beq.n	8011382 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 801137e:	230a      	movs	r3, #10
 8011380:	e216      	b.n	80117b0 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8011382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011384:	7858      	ldrb	r0, [r3, #1]
 8011386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011388:	330c      	adds	r3, #12
 801138a:	461a      	mov	r2, r3
 801138c:	2102      	movs	r1, #2
 801138e:	f7fe fc0b 	bl	800fba8 <disk_ioctl>
 8011392:	4603      	mov	r3, r0
 8011394:	2b00      	cmp	r3, #0
 8011396:	d001      	beq.n	801139c <find_volume+0xe4>
 8011398:	2301      	movs	r3, #1
 801139a:	e209      	b.n	80117b0 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 801139c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801139e:	899b      	ldrh	r3, [r3, #12]
 80113a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80113a4:	d80d      	bhi.n	80113c2 <find_volume+0x10a>
 80113a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113a8:	899b      	ldrh	r3, [r3, #12]
 80113aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80113ae:	d308      	bcc.n	80113c2 <find_volume+0x10a>
 80113b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113b2:	899b      	ldrh	r3, [r3, #12]
 80113b4:	461a      	mov	r2, r3
 80113b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113b8:	899b      	ldrh	r3, [r3, #12]
 80113ba:	3b01      	subs	r3, #1
 80113bc:	4013      	ands	r3, r2
 80113be:	2b00      	cmp	r3, #0
 80113c0:	d001      	beq.n	80113c6 <find_volume+0x10e>
 80113c2:	2301      	movs	r3, #1
 80113c4:	e1f4      	b.n	80117b0 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80113c6:	2300      	movs	r3, #0
 80113c8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80113ca:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80113cc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80113ce:	f7ff ff1d 	bl	801120c <check_fs>
 80113d2:	4603      	mov	r3, r0
 80113d4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80113d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80113dc:	2b02      	cmp	r3, #2
 80113de:	d14b      	bne.n	8011478 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80113e0:	2300      	movs	r3, #0
 80113e2:	643b      	str	r3, [r7, #64]	; 0x40
 80113e4:	e01f      	b.n	8011426 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80113e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113e8:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80113ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80113ee:	011b      	lsls	r3, r3, #4
 80113f0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80113f4:	4413      	add	r3, r2
 80113f6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80113f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113fa:	3304      	adds	r3, #4
 80113fc:	781b      	ldrb	r3, [r3, #0]
 80113fe:	2b00      	cmp	r3, #0
 8011400:	d006      	beq.n	8011410 <find_volume+0x158>
 8011402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011404:	3308      	adds	r3, #8
 8011406:	4618      	mov	r0, r3
 8011408:	f7fe fc04 	bl	800fc14 <ld_dword>
 801140c:	4602      	mov	r2, r0
 801140e:	e000      	b.n	8011412 <find_volume+0x15a>
 8011410:	2200      	movs	r2, #0
 8011412:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011414:	009b      	lsls	r3, r3, #2
 8011416:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801141a:	440b      	add	r3, r1
 801141c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8011420:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011422:	3301      	adds	r3, #1
 8011424:	643b      	str	r3, [r7, #64]	; 0x40
 8011426:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011428:	2b03      	cmp	r3, #3
 801142a:	d9dc      	bls.n	80113e6 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801142c:	2300      	movs	r3, #0
 801142e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8011430:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011432:	2b00      	cmp	r3, #0
 8011434:	d002      	beq.n	801143c <find_volume+0x184>
 8011436:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011438:	3b01      	subs	r3, #1
 801143a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801143c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801143e:	009b      	lsls	r3, r3, #2
 8011440:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8011444:	4413      	add	r3, r2
 8011446:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801144a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801144c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801144e:	2b00      	cmp	r3, #0
 8011450:	d005      	beq.n	801145e <find_volume+0x1a6>
 8011452:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011454:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011456:	f7ff fed9 	bl	801120c <check_fs>
 801145a:	4603      	mov	r3, r0
 801145c:	e000      	b.n	8011460 <find_volume+0x1a8>
 801145e:	2303      	movs	r3, #3
 8011460:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8011464:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011468:	2b01      	cmp	r3, #1
 801146a:	d905      	bls.n	8011478 <find_volume+0x1c0>
 801146c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801146e:	3301      	adds	r3, #1
 8011470:	643b      	str	r3, [r7, #64]	; 0x40
 8011472:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011474:	2b03      	cmp	r3, #3
 8011476:	d9e1      	bls.n	801143c <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8011478:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801147c:	2b04      	cmp	r3, #4
 801147e:	d101      	bne.n	8011484 <find_volume+0x1cc>
 8011480:	2301      	movs	r3, #1
 8011482:	e195      	b.n	80117b0 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8011484:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011488:	2b01      	cmp	r3, #1
 801148a:	d901      	bls.n	8011490 <find_volume+0x1d8>
 801148c:	230d      	movs	r3, #13
 801148e:	e18f      	b.n	80117b0 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8011490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011492:	3338      	adds	r3, #56	; 0x38
 8011494:	330b      	adds	r3, #11
 8011496:	4618      	mov	r0, r3
 8011498:	f7fe fba4 	bl	800fbe4 <ld_word>
 801149c:	4603      	mov	r3, r0
 801149e:	461a      	mov	r2, r3
 80114a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114a2:	899b      	ldrh	r3, [r3, #12]
 80114a4:	429a      	cmp	r2, r3
 80114a6:	d001      	beq.n	80114ac <find_volume+0x1f4>
 80114a8:	230d      	movs	r3, #13
 80114aa:	e181      	b.n	80117b0 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80114ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114ae:	3338      	adds	r3, #56	; 0x38
 80114b0:	3316      	adds	r3, #22
 80114b2:	4618      	mov	r0, r3
 80114b4:	f7fe fb96 	bl	800fbe4 <ld_word>
 80114b8:	4603      	mov	r3, r0
 80114ba:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80114bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80114be:	2b00      	cmp	r3, #0
 80114c0:	d106      	bne.n	80114d0 <find_volume+0x218>
 80114c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114c4:	3338      	adds	r3, #56	; 0x38
 80114c6:	3324      	adds	r3, #36	; 0x24
 80114c8:	4618      	mov	r0, r3
 80114ca:	f7fe fba3 	bl	800fc14 <ld_dword>
 80114ce:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80114d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114d2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80114d4:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80114d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114d8:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80114dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114de:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80114e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114e2:	789b      	ldrb	r3, [r3, #2]
 80114e4:	2b01      	cmp	r3, #1
 80114e6:	d005      	beq.n	80114f4 <find_volume+0x23c>
 80114e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114ea:	789b      	ldrb	r3, [r3, #2]
 80114ec:	2b02      	cmp	r3, #2
 80114ee:	d001      	beq.n	80114f4 <find_volume+0x23c>
 80114f0:	230d      	movs	r3, #13
 80114f2:	e15d      	b.n	80117b0 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80114f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114f6:	789b      	ldrb	r3, [r3, #2]
 80114f8:	461a      	mov	r2, r3
 80114fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80114fc:	fb02 f303 	mul.w	r3, r2, r3
 8011500:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8011502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011504:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011508:	b29a      	uxth	r2, r3
 801150a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801150c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801150e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011510:	895b      	ldrh	r3, [r3, #10]
 8011512:	2b00      	cmp	r3, #0
 8011514:	d008      	beq.n	8011528 <find_volume+0x270>
 8011516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011518:	895b      	ldrh	r3, [r3, #10]
 801151a:	461a      	mov	r2, r3
 801151c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801151e:	895b      	ldrh	r3, [r3, #10]
 8011520:	3b01      	subs	r3, #1
 8011522:	4013      	ands	r3, r2
 8011524:	2b00      	cmp	r3, #0
 8011526:	d001      	beq.n	801152c <find_volume+0x274>
 8011528:	230d      	movs	r3, #13
 801152a:	e141      	b.n	80117b0 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 801152c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801152e:	3338      	adds	r3, #56	; 0x38
 8011530:	3311      	adds	r3, #17
 8011532:	4618      	mov	r0, r3
 8011534:	f7fe fb56 	bl	800fbe4 <ld_word>
 8011538:	4603      	mov	r3, r0
 801153a:	461a      	mov	r2, r3
 801153c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801153e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8011540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011542:	891b      	ldrh	r3, [r3, #8]
 8011544:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011546:	8992      	ldrh	r2, [r2, #12]
 8011548:	0952      	lsrs	r2, r2, #5
 801154a:	b292      	uxth	r2, r2
 801154c:	fbb3 f1f2 	udiv	r1, r3, r2
 8011550:	fb02 f201 	mul.w	r2, r2, r1
 8011554:	1a9b      	subs	r3, r3, r2
 8011556:	b29b      	uxth	r3, r3
 8011558:	2b00      	cmp	r3, #0
 801155a:	d001      	beq.n	8011560 <find_volume+0x2a8>
 801155c:	230d      	movs	r3, #13
 801155e:	e127      	b.n	80117b0 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8011560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011562:	3338      	adds	r3, #56	; 0x38
 8011564:	3313      	adds	r3, #19
 8011566:	4618      	mov	r0, r3
 8011568:	f7fe fb3c 	bl	800fbe4 <ld_word>
 801156c:	4603      	mov	r3, r0
 801156e:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8011570:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011572:	2b00      	cmp	r3, #0
 8011574:	d106      	bne.n	8011584 <find_volume+0x2cc>
 8011576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011578:	3338      	adds	r3, #56	; 0x38
 801157a:	3320      	adds	r3, #32
 801157c:	4618      	mov	r0, r3
 801157e:	f7fe fb49 	bl	800fc14 <ld_dword>
 8011582:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8011584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011586:	3338      	adds	r3, #56	; 0x38
 8011588:	330e      	adds	r3, #14
 801158a:	4618      	mov	r0, r3
 801158c:	f7fe fb2a 	bl	800fbe4 <ld_word>
 8011590:	4603      	mov	r3, r0
 8011592:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8011594:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011596:	2b00      	cmp	r3, #0
 8011598:	d104      	bne.n	80115a4 <find_volume+0x2ec>
 801159a:	230d      	movs	r3, #13
 801159c:	e108      	b.n	80117b0 <find_volume+0x4f8>
 801159e:	bf00      	nop
 80115a0:	2003c460 	.word	0x2003c460

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80115a4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80115a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80115a8:	4413      	add	r3, r2
 80115aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80115ac:	8911      	ldrh	r1, [r2, #8]
 80115ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80115b0:	8992      	ldrh	r2, [r2, #12]
 80115b2:	0952      	lsrs	r2, r2, #5
 80115b4:	b292      	uxth	r2, r2
 80115b6:	fbb1 f2f2 	udiv	r2, r1, r2
 80115ba:	b292      	uxth	r2, r2
 80115bc:	4413      	add	r3, r2
 80115be:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80115c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80115c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115c4:	429a      	cmp	r2, r3
 80115c6:	d201      	bcs.n	80115cc <find_volume+0x314>
 80115c8:	230d      	movs	r3, #13
 80115ca:	e0f1      	b.n	80117b0 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80115cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80115ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115d0:	1ad3      	subs	r3, r2, r3
 80115d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80115d4:	8952      	ldrh	r2, [r2, #10]
 80115d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80115da:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80115dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115de:	2b00      	cmp	r3, #0
 80115e0:	d101      	bne.n	80115e6 <find_volume+0x32e>
 80115e2:	230d      	movs	r3, #13
 80115e4:	e0e4      	b.n	80117b0 <find_volume+0x4f8>
		fmt = FS_FAT32;
 80115e6:	2303      	movs	r3, #3
 80115e8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80115ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115ee:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80115f2:	4293      	cmp	r3, r2
 80115f4:	d802      	bhi.n	80115fc <find_volume+0x344>
 80115f6:	2302      	movs	r3, #2
 80115f8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80115fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115fe:	f640 72f5 	movw	r2, #4085	; 0xff5
 8011602:	4293      	cmp	r3, r2
 8011604:	d802      	bhi.n	801160c <find_volume+0x354>
 8011606:	2301      	movs	r3, #1
 8011608:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801160c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801160e:	1c9a      	adds	r2, r3, #2
 8011610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011612:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8011614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011616:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011618:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801161a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801161c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801161e:	441a      	add	r2, r3
 8011620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011622:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8011624:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011628:	441a      	add	r2, r3
 801162a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801162c:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 801162e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011632:	2b03      	cmp	r3, #3
 8011634:	d11e      	bne.n	8011674 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8011636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011638:	3338      	adds	r3, #56	; 0x38
 801163a:	332a      	adds	r3, #42	; 0x2a
 801163c:	4618      	mov	r0, r3
 801163e:	f7fe fad1 	bl	800fbe4 <ld_word>
 8011642:	4603      	mov	r3, r0
 8011644:	2b00      	cmp	r3, #0
 8011646:	d001      	beq.n	801164c <find_volume+0x394>
 8011648:	230d      	movs	r3, #13
 801164a:	e0b1      	b.n	80117b0 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801164c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801164e:	891b      	ldrh	r3, [r3, #8]
 8011650:	2b00      	cmp	r3, #0
 8011652:	d001      	beq.n	8011658 <find_volume+0x3a0>
 8011654:	230d      	movs	r3, #13
 8011656:	e0ab      	b.n	80117b0 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8011658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801165a:	3338      	adds	r3, #56	; 0x38
 801165c:	332c      	adds	r3, #44	; 0x2c
 801165e:	4618      	mov	r0, r3
 8011660:	f7fe fad8 	bl	800fc14 <ld_dword>
 8011664:	4602      	mov	r2, r0
 8011666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011668:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801166a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801166c:	69db      	ldr	r3, [r3, #28]
 801166e:	009b      	lsls	r3, r3, #2
 8011670:	647b      	str	r3, [r7, #68]	; 0x44
 8011672:	e01f      	b.n	80116b4 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8011674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011676:	891b      	ldrh	r3, [r3, #8]
 8011678:	2b00      	cmp	r3, #0
 801167a:	d101      	bne.n	8011680 <find_volume+0x3c8>
 801167c:	230d      	movs	r3, #13
 801167e:	e097      	b.n	80117b0 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8011680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011682:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011684:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011686:	441a      	add	r2, r3
 8011688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801168a:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801168c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011690:	2b02      	cmp	r3, #2
 8011692:	d103      	bne.n	801169c <find_volume+0x3e4>
 8011694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011696:	69db      	ldr	r3, [r3, #28]
 8011698:	005b      	lsls	r3, r3, #1
 801169a:	e00a      	b.n	80116b2 <find_volume+0x3fa>
 801169c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801169e:	69da      	ldr	r2, [r3, #28]
 80116a0:	4613      	mov	r3, r2
 80116a2:	005b      	lsls	r3, r3, #1
 80116a4:	4413      	add	r3, r2
 80116a6:	085a      	lsrs	r2, r3, #1
 80116a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116aa:	69db      	ldr	r3, [r3, #28]
 80116ac:	f003 0301 	and.w	r3, r3, #1
 80116b0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80116b2:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80116b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116b6:	6a1a      	ldr	r2, [r3, #32]
 80116b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116ba:	899b      	ldrh	r3, [r3, #12]
 80116bc:	4619      	mov	r1, r3
 80116be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80116c0:	440b      	add	r3, r1
 80116c2:	3b01      	subs	r3, #1
 80116c4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80116c6:	8989      	ldrh	r1, [r1, #12]
 80116c8:	fbb3 f3f1 	udiv	r3, r3, r1
 80116cc:	429a      	cmp	r2, r3
 80116ce:	d201      	bcs.n	80116d4 <find_volume+0x41c>
 80116d0:	230d      	movs	r3, #13
 80116d2:	e06d      	b.n	80117b0 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80116d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116d6:	f04f 32ff 	mov.w	r2, #4294967295
 80116da:	615a      	str	r2, [r3, #20]
 80116dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116de:	695a      	ldr	r2, [r3, #20]
 80116e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116e2:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 80116e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116e6:	2280      	movs	r2, #128	; 0x80
 80116e8:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80116ea:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80116ee:	2b03      	cmp	r3, #3
 80116f0:	d149      	bne.n	8011786 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80116f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116f4:	3338      	adds	r3, #56	; 0x38
 80116f6:	3330      	adds	r3, #48	; 0x30
 80116f8:	4618      	mov	r0, r3
 80116fa:	f7fe fa73 	bl	800fbe4 <ld_word>
 80116fe:	4603      	mov	r3, r0
 8011700:	2b01      	cmp	r3, #1
 8011702:	d140      	bne.n	8011786 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8011704:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011706:	3301      	adds	r3, #1
 8011708:	4619      	mov	r1, r3
 801170a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801170c:	f7fe fd1a 	bl	8010144 <move_window>
 8011710:	4603      	mov	r3, r0
 8011712:	2b00      	cmp	r3, #0
 8011714:	d137      	bne.n	8011786 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8011716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011718:	2200      	movs	r2, #0
 801171a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801171c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801171e:	3338      	adds	r3, #56	; 0x38
 8011720:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011724:	4618      	mov	r0, r3
 8011726:	f7fe fa5d 	bl	800fbe4 <ld_word>
 801172a:	4603      	mov	r3, r0
 801172c:	461a      	mov	r2, r3
 801172e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8011732:	429a      	cmp	r2, r3
 8011734:	d127      	bne.n	8011786 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8011736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011738:	3338      	adds	r3, #56	; 0x38
 801173a:	4618      	mov	r0, r3
 801173c:	f7fe fa6a 	bl	800fc14 <ld_dword>
 8011740:	4602      	mov	r2, r0
 8011742:	4b1d      	ldr	r3, [pc, #116]	; (80117b8 <find_volume+0x500>)
 8011744:	429a      	cmp	r2, r3
 8011746:	d11e      	bne.n	8011786 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8011748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801174a:	3338      	adds	r3, #56	; 0x38
 801174c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8011750:	4618      	mov	r0, r3
 8011752:	f7fe fa5f 	bl	800fc14 <ld_dword>
 8011756:	4602      	mov	r2, r0
 8011758:	4b18      	ldr	r3, [pc, #96]	; (80117bc <find_volume+0x504>)
 801175a:	429a      	cmp	r2, r3
 801175c:	d113      	bne.n	8011786 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801175e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011760:	3338      	adds	r3, #56	; 0x38
 8011762:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8011766:	4618      	mov	r0, r3
 8011768:	f7fe fa54 	bl	800fc14 <ld_dword>
 801176c:	4602      	mov	r2, r0
 801176e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011770:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8011772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011774:	3338      	adds	r3, #56	; 0x38
 8011776:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 801177a:	4618      	mov	r0, r3
 801177c:	f7fe fa4a 	bl	800fc14 <ld_dword>
 8011780:	4602      	mov	r2, r0
 8011782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011784:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8011786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011788:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 801178c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801178e:	4b0c      	ldr	r3, [pc, #48]	; (80117c0 <find_volume+0x508>)
 8011790:	881b      	ldrh	r3, [r3, #0]
 8011792:	3301      	adds	r3, #1
 8011794:	b29a      	uxth	r2, r3
 8011796:	4b0a      	ldr	r3, [pc, #40]	; (80117c0 <find_volume+0x508>)
 8011798:	801a      	strh	r2, [r3, #0]
 801179a:	4b09      	ldr	r3, [pc, #36]	; (80117c0 <find_volume+0x508>)
 801179c:	881a      	ldrh	r2, [r3, #0]
 801179e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117a0:	80da      	strh	r2, [r3, #6]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 80117a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117a4:	2200      	movs	r2, #0
 80117a6:	619a      	str	r2, [r3, #24]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80117a8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80117aa:	f7fe fc63 	bl	8010074 <clear_lock>
#endif
	return FR_OK;
 80117ae:	2300      	movs	r3, #0
}
 80117b0:	4618      	mov	r0, r3
 80117b2:	3758      	adds	r7, #88	; 0x58
 80117b4:	46bd      	mov	sp, r7
 80117b6:	bd80      	pop	{r7, pc}
 80117b8:	41615252 	.word	0x41615252
 80117bc:	61417272 	.word	0x61417272
 80117c0:	2003c464 	.word	0x2003c464

080117c4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80117c4:	b580      	push	{r7, lr}
 80117c6:	b084      	sub	sp, #16
 80117c8:	af00      	add	r7, sp, #0
 80117ca:	6078      	str	r0, [r7, #4]
 80117cc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80117ce:	2309      	movs	r3, #9
 80117d0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	d01c      	beq.n	8011812 <validate+0x4e>
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	681b      	ldr	r3, [r3, #0]
 80117dc:	2b00      	cmp	r3, #0
 80117de:	d018      	beq.n	8011812 <validate+0x4e>
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	681b      	ldr	r3, [r3, #0]
 80117e4:	781b      	ldrb	r3, [r3, #0]
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	d013      	beq.n	8011812 <validate+0x4e>
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	889a      	ldrh	r2, [r3, #4]
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	681b      	ldr	r3, [r3, #0]
 80117f2:	88db      	ldrh	r3, [r3, #6]
 80117f4:	429a      	cmp	r2, r3
 80117f6:	d10c      	bne.n	8011812 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	681b      	ldr	r3, [r3, #0]
 80117fc:	785b      	ldrb	r3, [r3, #1]
 80117fe:	4618      	mov	r0, r3
 8011800:	f7fe f952 	bl	800faa8 <disk_status>
 8011804:	4603      	mov	r3, r0
 8011806:	f003 0301 	and.w	r3, r3, #1
 801180a:	2b00      	cmp	r3, #0
 801180c:	d101      	bne.n	8011812 <validate+0x4e>
			res = FR_OK;
 801180e:	2300      	movs	r3, #0
 8011810:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8011812:	7bfb      	ldrb	r3, [r7, #15]
 8011814:	2b00      	cmp	r3, #0
 8011816:	d102      	bne.n	801181e <validate+0x5a>
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	681b      	ldr	r3, [r3, #0]
 801181c:	e000      	b.n	8011820 <validate+0x5c>
 801181e:	2300      	movs	r3, #0
 8011820:	683a      	ldr	r2, [r7, #0]
 8011822:	6013      	str	r3, [r2, #0]
	return res;
 8011824:	7bfb      	ldrb	r3, [r7, #15]
}
 8011826:	4618      	mov	r0, r3
 8011828:	3710      	adds	r7, #16
 801182a:	46bd      	mov	sp, r7
 801182c:	bd80      	pop	{r7, pc}
	...

08011830 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8011830:	b580      	push	{r7, lr}
 8011832:	b088      	sub	sp, #32
 8011834:	af00      	add	r7, sp, #0
 8011836:	60f8      	str	r0, [r7, #12]
 8011838:	60b9      	str	r1, [r7, #8]
 801183a:	4613      	mov	r3, r2
 801183c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801183e:	68bb      	ldr	r3, [r7, #8]
 8011840:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8011842:	f107 0310 	add.w	r3, r7, #16
 8011846:	4618      	mov	r0, r3
 8011848:	f7ff fc9b 	bl	8011182 <get_ldnumber>
 801184c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801184e:	69fb      	ldr	r3, [r7, #28]
 8011850:	2b00      	cmp	r3, #0
 8011852:	da01      	bge.n	8011858 <f_mount+0x28>
 8011854:	230b      	movs	r3, #11
 8011856:	e02b      	b.n	80118b0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8011858:	4a17      	ldr	r2, [pc, #92]	; (80118b8 <f_mount+0x88>)
 801185a:	69fb      	ldr	r3, [r7, #28]
 801185c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011860:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8011862:	69bb      	ldr	r3, [r7, #24]
 8011864:	2b00      	cmp	r3, #0
 8011866:	d005      	beq.n	8011874 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8011868:	69b8      	ldr	r0, [r7, #24]
 801186a:	f7fe fc03 	bl	8010074 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801186e:	69bb      	ldr	r3, [r7, #24]
 8011870:	2200      	movs	r2, #0
 8011872:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8011874:	68fb      	ldr	r3, [r7, #12]
 8011876:	2b00      	cmp	r3, #0
 8011878:	d002      	beq.n	8011880 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801187a:	68fb      	ldr	r3, [r7, #12]
 801187c:	2200      	movs	r2, #0
 801187e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8011880:	68fa      	ldr	r2, [r7, #12]
 8011882:	490d      	ldr	r1, [pc, #52]	; (80118b8 <f_mount+0x88>)
 8011884:	69fb      	ldr	r3, [r7, #28]
 8011886:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801188a:	68fb      	ldr	r3, [r7, #12]
 801188c:	2b00      	cmp	r3, #0
 801188e:	d002      	beq.n	8011896 <f_mount+0x66>
 8011890:	79fb      	ldrb	r3, [r7, #7]
 8011892:	2b01      	cmp	r3, #1
 8011894:	d001      	beq.n	801189a <f_mount+0x6a>
 8011896:	2300      	movs	r3, #0
 8011898:	e00a      	b.n	80118b0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801189a:	f107 010c 	add.w	r1, r7, #12
 801189e:	f107 0308 	add.w	r3, r7, #8
 80118a2:	2200      	movs	r2, #0
 80118a4:	4618      	mov	r0, r3
 80118a6:	f7ff fd07 	bl	80112b8 <find_volume>
 80118aa:	4603      	mov	r3, r0
 80118ac:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80118ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80118b0:	4618      	mov	r0, r3
 80118b2:	3720      	adds	r7, #32
 80118b4:	46bd      	mov	sp, r7
 80118b6:	bd80      	pop	{r7, pc}
 80118b8:	2003c460 	.word	0x2003c460

080118bc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80118bc:	b580      	push	{r7, lr}
 80118be:	b098      	sub	sp, #96	; 0x60
 80118c0:	af00      	add	r7, sp, #0
 80118c2:	60f8      	str	r0, [r7, #12]
 80118c4:	60b9      	str	r1, [r7, #8]
 80118c6:	4613      	mov	r3, r2
 80118c8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80118ca:	68fb      	ldr	r3, [r7, #12]
 80118cc:	2b00      	cmp	r3, #0
 80118ce:	d101      	bne.n	80118d4 <f_open+0x18>
 80118d0:	2309      	movs	r3, #9
 80118d2:	e1ba      	b.n	8011c4a <f_open+0x38e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80118d4:	79fb      	ldrb	r3, [r7, #7]
 80118d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80118da:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80118dc:	79fa      	ldrb	r2, [r7, #7]
 80118de:	f107 0110 	add.w	r1, r7, #16
 80118e2:	f107 0308 	add.w	r3, r7, #8
 80118e6:	4618      	mov	r0, r3
 80118e8:	f7ff fce6 	bl	80112b8 <find_volume>
 80118ec:	4603      	mov	r3, r0
 80118ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80118f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80118f6:	2b00      	cmp	r3, #0
 80118f8:	f040 819e 	bne.w	8011c38 <f_open+0x37c>
		dj.obj.fs = fs;
 80118fc:	693b      	ldr	r3, [r7, #16]
 80118fe:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8011900:	68ba      	ldr	r2, [r7, #8]
 8011902:	f107 0314 	add.w	r3, r7, #20
 8011906:	4611      	mov	r1, r2
 8011908:	4618      	mov	r0, r3
 801190a:	f7ff fba5 	bl	8011058 <follow_path>
 801190e:	4603      	mov	r3, r0
 8011910:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8011914:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011918:	2b00      	cmp	r3, #0
 801191a:	d11a      	bne.n	8011952 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801191c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011920:	b25b      	sxtb	r3, r3
 8011922:	2b00      	cmp	r3, #0
 8011924:	da03      	bge.n	801192e <f_open+0x72>
				res = FR_INVALID_NAME;
 8011926:	2306      	movs	r3, #6
 8011928:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801192c:	e011      	b.n	8011952 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801192e:	79fb      	ldrb	r3, [r7, #7]
 8011930:	f023 0301 	bic.w	r3, r3, #1
 8011934:	2b00      	cmp	r3, #0
 8011936:	bf14      	ite	ne
 8011938:	2301      	movne	r3, #1
 801193a:	2300      	moveq	r3, #0
 801193c:	b2db      	uxtb	r3, r3
 801193e:	461a      	mov	r2, r3
 8011940:	f107 0314 	add.w	r3, r7, #20
 8011944:	4611      	mov	r1, r2
 8011946:	4618      	mov	r0, r3
 8011948:	f7fe fa4c 	bl	800fde4 <chk_lock>
 801194c:	4603      	mov	r3, r0
 801194e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8011952:	79fb      	ldrb	r3, [r7, #7]
 8011954:	f003 031c 	and.w	r3, r3, #28
 8011958:	2b00      	cmp	r3, #0
 801195a:	d07e      	beq.n	8011a5a <f_open+0x19e>
			if (res != FR_OK) {					/* No file, create new */
 801195c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011960:	2b00      	cmp	r3, #0
 8011962:	d017      	beq.n	8011994 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8011964:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011968:	2b04      	cmp	r3, #4
 801196a:	d10e      	bne.n	801198a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801196c:	f7fe fa96 	bl	800fe9c <enq_lock>
 8011970:	4603      	mov	r3, r0
 8011972:	2b00      	cmp	r3, #0
 8011974:	d006      	beq.n	8011984 <f_open+0xc8>
 8011976:	f107 0314 	add.w	r3, r7, #20
 801197a:	4618      	mov	r0, r3
 801197c:	f7ff fa52 	bl	8010e24 <dir_register>
 8011980:	4603      	mov	r3, r0
 8011982:	e000      	b.n	8011986 <f_open+0xca>
 8011984:	2312      	movs	r3, #18
 8011986:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801198a:	79fb      	ldrb	r3, [r7, #7]
 801198c:	f043 0308 	orr.w	r3, r3, #8
 8011990:	71fb      	strb	r3, [r7, #7]
 8011992:	e010      	b.n	80119b6 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8011994:	7ebb      	ldrb	r3, [r7, #26]
 8011996:	f003 0311 	and.w	r3, r3, #17
 801199a:	2b00      	cmp	r3, #0
 801199c:	d003      	beq.n	80119a6 <f_open+0xea>
					res = FR_DENIED;
 801199e:	2307      	movs	r3, #7
 80119a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80119a4:	e007      	b.n	80119b6 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80119a6:	79fb      	ldrb	r3, [r7, #7]
 80119a8:	f003 0304 	and.w	r3, r3, #4
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	d002      	beq.n	80119b6 <f_open+0xfa>
 80119b0:	2308      	movs	r3, #8
 80119b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80119b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	d167      	bne.n	8011a8e <f_open+0x1d2>
 80119be:	79fb      	ldrb	r3, [r7, #7]
 80119c0:	f003 0308 	and.w	r3, r3, #8
 80119c4:	2b00      	cmp	r3, #0
 80119c6:	d062      	beq.n	8011a8e <f_open+0x1d2>
				dw = GET_FATTIME();
 80119c8:	4ba2      	ldr	r3, [pc, #648]	; (8011c54 <f_open+0x398>)
 80119ca:	653b      	str	r3, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80119cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80119ce:	330e      	adds	r3, #14
 80119d0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80119d2:	4618      	mov	r0, r3
 80119d4:	f7fe f95c 	bl	800fc90 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80119d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80119da:	3316      	adds	r3, #22
 80119dc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80119de:	4618      	mov	r0, r3
 80119e0:	f7fe f956 	bl	800fc90 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80119e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80119e6:	330b      	adds	r3, #11
 80119e8:	2220      	movs	r2, #32
 80119ea:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80119ec:	693b      	ldr	r3, [r7, #16]
 80119ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80119f0:	4611      	mov	r1, r2
 80119f2:	4618      	mov	r0, r3
 80119f4:	f7ff f925 	bl	8010c42 <ld_clust>
 80119f8:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80119fa:	693b      	ldr	r3, [r7, #16]
 80119fc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80119fe:	2200      	movs	r2, #0
 8011a00:	4618      	mov	r0, r3
 8011a02:	f7ff f93d 	bl	8010c80 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8011a06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a08:	331c      	adds	r3, #28
 8011a0a:	2100      	movs	r1, #0
 8011a0c:	4618      	mov	r0, r3
 8011a0e:	f7fe f93f 	bl	800fc90 <st_dword>
					fs->wflag = 1;
 8011a12:	693b      	ldr	r3, [r7, #16]
 8011a14:	2201      	movs	r2, #1
 8011a16:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8011a18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011a1a:	2b00      	cmp	r3, #0
 8011a1c:	d037      	beq.n	8011a8e <f_open+0x1d2>
						dw = fs->winsect;
 8011a1e:	693b      	ldr	r3, [r7, #16]
 8011a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011a22:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8011a24:	f107 0314 	add.w	r3, r7, #20
 8011a28:	2200      	movs	r2, #0
 8011a2a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8011a2c:	4618      	mov	r0, r3
 8011a2e:	f7fe fe2d 	bl	801068c <remove_chain>
 8011a32:	4603      	mov	r3, r0
 8011a34:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8011a38:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	d126      	bne.n	8011a8e <f_open+0x1d2>
							res = move_window(fs, dw);
 8011a40:	693b      	ldr	r3, [r7, #16]
 8011a42:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011a44:	4618      	mov	r0, r3
 8011a46:	f7fe fb7d 	bl	8010144 <move_window>
 8011a4a:	4603      	mov	r3, r0
 8011a4c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8011a50:	693b      	ldr	r3, [r7, #16]
 8011a52:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011a54:	3a01      	subs	r2, #1
 8011a56:	611a      	str	r2, [r3, #16]
 8011a58:	e019      	b.n	8011a8e <f_open+0x1d2>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8011a5a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	d115      	bne.n	8011a8e <f_open+0x1d2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8011a62:	7ebb      	ldrb	r3, [r7, #26]
 8011a64:	f003 0310 	and.w	r3, r3, #16
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	d003      	beq.n	8011a74 <f_open+0x1b8>
					res = FR_NO_FILE;
 8011a6c:	2304      	movs	r3, #4
 8011a6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8011a72:	e00c      	b.n	8011a8e <f_open+0x1d2>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8011a74:	79fb      	ldrb	r3, [r7, #7]
 8011a76:	f003 0302 	and.w	r3, r3, #2
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	d007      	beq.n	8011a8e <f_open+0x1d2>
 8011a7e:	7ebb      	ldrb	r3, [r7, #26]
 8011a80:	f003 0301 	and.w	r3, r3, #1
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	d002      	beq.n	8011a8e <f_open+0x1d2>
						res = FR_DENIED;
 8011a88:	2307      	movs	r3, #7
 8011a8a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8011a8e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	d128      	bne.n	8011ae8 <f_open+0x22c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8011a96:	79fb      	ldrb	r3, [r7, #7]
 8011a98:	f003 0308 	and.w	r3, r3, #8
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	d003      	beq.n	8011aa8 <f_open+0x1ec>
				mode |= FA_MODIFIED;
 8011aa0:	79fb      	ldrb	r3, [r7, #7]
 8011aa2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011aa6:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8011aa8:	693b      	ldr	r3, [r7, #16]
 8011aaa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011aac:	68fb      	ldr	r3, [r7, #12]
 8011aae:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8011ab0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011ab2:	68fb      	ldr	r3, [r7, #12]
 8011ab4:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8011ab6:	79fb      	ldrb	r3, [r7, #7]
 8011ab8:	f023 0301 	bic.w	r3, r3, #1
 8011abc:	2b00      	cmp	r3, #0
 8011abe:	bf14      	ite	ne
 8011ac0:	2301      	movne	r3, #1
 8011ac2:	2300      	moveq	r3, #0
 8011ac4:	b2db      	uxtb	r3, r3
 8011ac6:	461a      	mov	r2, r3
 8011ac8:	f107 0314 	add.w	r3, r7, #20
 8011acc:	4611      	mov	r1, r2
 8011ace:	4618      	mov	r0, r3
 8011ad0:	f7fe fa06 	bl	800fee0 <inc_lock>
 8011ad4:	4602      	mov	r2, r0
 8011ad6:	68fb      	ldr	r3, [r7, #12]
 8011ad8:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8011ada:	68fb      	ldr	r3, [r7, #12]
 8011adc:	691b      	ldr	r3, [r3, #16]
 8011ade:	2b00      	cmp	r3, #0
 8011ae0:	d102      	bne.n	8011ae8 <f_open+0x22c>
 8011ae2:	2302      	movs	r3, #2
 8011ae4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8011ae8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	f040 80a3 	bne.w	8011c38 <f_open+0x37c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8011af2:	693b      	ldr	r3, [r7, #16]
 8011af4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011af6:	4611      	mov	r1, r2
 8011af8:	4618      	mov	r0, r3
 8011afa:	f7ff f8a2 	bl	8010c42 <ld_clust>
 8011afe:	4602      	mov	r2, r0
 8011b00:	68fb      	ldr	r3, [r7, #12]
 8011b02:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8011b04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b06:	331c      	adds	r3, #28
 8011b08:	4618      	mov	r0, r3
 8011b0a:	f7fe f883 	bl	800fc14 <ld_dword>
 8011b0e:	4602      	mov	r2, r0
 8011b10:	68fb      	ldr	r3, [r7, #12]
 8011b12:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8011b14:	68fb      	ldr	r3, [r7, #12]
 8011b16:	2200      	movs	r2, #0
 8011b18:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8011b1a:	693a      	ldr	r2, [r7, #16]
 8011b1c:	68fb      	ldr	r3, [r7, #12]
 8011b1e:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8011b20:	693b      	ldr	r3, [r7, #16]
 8011b22:	88da      	ldrh	r2, [r3, #6]
 8011b24:	68fb      	ldr	r3, [r7, #12]
 8011b26:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8011b28:	68fb      	ldr	r3, [r7, #12]
 8011b2a:	79fa      	ldrb	r2, [r7, #7]
 8011b2c:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8011b2e:	68fb      	ldr	r3, [r7, #12]
 8011b30:	2200      	movs	r2, #0
 8011b32:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8011b34:	68fb      	ldr	r3, [r7, #12]
 8011b36:	2200      	movs	r2, #0
 8011b38:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8011b3a:	68fb      	ldr	r3, [r7, #12]
 8011b3c:	2200      	movs	r2, #0
 8011b3e:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8011b40:	68fb      	ldr	r3, [r7, #12]
 8011b42:	3330      	adds	r3, #48	; 0x30
 8011b44:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8011b48:	2100      	movs	r1, #0
 8011b4a:	4618      	mov	r0, r3
 8011b4c:	f7fe f8ed 	bl	800fd2a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8011b50:	79fb      	ldrb	r3, [r7, #7]
 8011b52:	f003 0320 	and.w	r3, r3, #32
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	d06e      	beq.n	8011c38 <f_open+0x37c>
 8011b5a:	68fb      	ldr	r3, [r7, #12]
 8011b5c:	68db      	ldr	r3, [r3, #12]
 8011b5e:	2b00      	cmp	r3, #0
 8011b60:	d06a      	beq.n	8011c38 <f_open+0x37c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8011b62:	68fb      	ldr	r3, [r7, #12]
 8011b64:	68da      	ldr	r2, [r3, #12]
 8011b66:	68fb      	ldr	r3, [r7, #12]
 8011b68:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8011b6a:	693b      	ldr	r3, [r7, #16]
 8011b6c:	895b      	ldrh	r3, [r3, #10]
 8011b6e:	461a      	mov	r2, r3
 8011b70:	693b      	ldr	r3, [r7, #16]
 8011b72:	899b      	ldrh	r3, [r3, #12]
 8011b74:	fb03 f302 	mul.w	r3, r3, r2
 8011b78:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8011b7a:	68fb      	ldr	r3, [r7, #12]
 8011b7c:	689b      	ldr	r3, [r3, #8]
 8011b7e:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8011b80:	68fb      	ldr	r3, [r7, #12]
 8011b82:	68db      	ldr	r3, [r3, #12]
 8011b84:	657b      	str	r3, [r7, #84]	; 0x54
 8011b86:	e016      	b.n	8011bb6 <f_open+0x2fa>
					clst = get_fat(&fp->obj, clst);
 8011b88:	68fb      	ldr	r3, [r7, #12]
 8011b8a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8011b8c:	4618      	mov	r0, r3
 8011b8e:	f7fe fb96 	bl	80102be <get_fat>
 8011b92:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8011b94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011b96:	2b01      	cmp	r3, #1
 8011b98:	d802      	bhi.n	8011ba0 <f_open+0x2e4>
 8011b9a:	2302      	movs	r3, #2
 8011b9c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8011ba0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011ba2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ba6:	d102      	bne.n	8011bae <f_open+0x2f2>
 8011ba8:	2301      	movs	r3, #1
 8011baa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8011bae:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011bb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011bb2:	1ad3      	subs	r3, r2, r3
 8011bb4:	657b      	str	r3, [r7, #84]	; 0x54
 8011bb6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011bba:	2b00      	cmp	r3, #0
 8011bbc:	d103      	bne.n	8011bc6 <f_open+0x30a>
 8011bbe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011bc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011bc2:	429a      	cmp	r2, r3
 8011bc4:	d8e0      	bhi.n	8011b88 <f_open+0x2cc>
				}
				fp->clust = clst;
 8011bc6:	68fb      	ldr	r3, [r7, #12]
 8011bc8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011bca:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8011bcc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011bd0:	2b00      	cmp	r3, #0
 8011bd2:	d131      	bne.n	8011c38 <f_open+0x37c>
 8011bd4:	693b      	ldr	r3, [r7, #16]
 8011bd6:	899b      	ldrh	r3, [r3, #12]
 8011bd8:	461a      	mov	r2, r3
 8011bda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011bdc:	fbb3 f1f2 	udiv	r1, r3, r2
 8011be0:	fb02 f201 	mul.w	r2, r2, r1
 8011be4:	1a9b      	subs	r3, r3, r2
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	d026      	beq.n	8011c38 <f_open+0x37c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8011bea:	693b      	ldr	r3, [r7, #16]
 8011bec:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8011bee:	4618      	mov	r0, r3
 8011bf0:	f7fe fb46 	bl	8010280 <clust2sect>
 8011bf4:	6478      	str	r0, [r7, #68]	; 0x44
 8011bf6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	d103      	bne.n	8011c04 <f_open+0x348>
						res = FR_INT_ERR;
 8011bfc:	2302      	movs	r3, #2
 8011bfe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8011c02:	e019      	b.n	8011c38 <f_open+0x37c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8011c04:	693b      	ldr	r3, [r7, #16]
 8011c06:	899b      	ldrh	r3, [r3, #12]
 8011c08:	461a      	mov	r2, r3
 8011c0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011c0c:	fbb3 f2f2 	udiv	r2, r3, r2
 8011c10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011c12:	441a      	add	r2, r3
 8011c14:	68fb      	ldr	r3, [r7, #12]
 8011c16:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8011c18:	693b      	ldr	r3, [r7, #16]
 8011c1a:	7858      	ldrb	r0, [r3, #1]
 8011c1c:	68fb      	ldr	r3, [r7, #12]
 8011c1e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011c22:	68fb      	ldr	r3, [r7, #12]
 8011c24:	6a1a      	ldr	r2, [r3, #32]
 8011c26:	2301      	movs	r3, #1
 8011c28:	f7fd ff7e 	bl	800fb28 <disk_read>
 8011c2c:	4603      	mov	r3, r0
 8011c2e:	2b00      	cmp	r3, #0
 8011c30:	d002      	beq.n	8011c38 <f_open+0x37c>
 8011c32:	2301      	movs	r3, #1
 8011c34:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8011c38:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	d002      	beq.n	8011c46 <f_open+0x38a>
 8011c40:	68fb      	ldr	r3, [r7, #12]
 8011c42:	2200      	movs	r2, #0
 8011c44:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8011c46:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8011c4a:	4618      	mov	r0, r3
 8011c4c:	3760      	adds	r7, #96	; 0x60
 8011c4e:	46bd      	mov	sp, r7
 8011c50:	bd80      	pop	{r7, pc}
 8011c52:	bf00      	nop
 8011c54:	274a0000 	.word	0x274a0000

08011c58 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8011c58:	b580      	push	{r7, lr}
 8011c5a:	b08e      	sub	sp, #56	; 0x38
 8011c5c:	af00      	add	r7, sp, #0
 8011c5e:	60f8      	str	r0, [r7, #12]
 8011c60:	60b9      	str	r1, [r7, #8]
 8011c62:	607a      	str	r2, [r7, #4]
 8011c64:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8011c66:	68bb      	ldr	r3, [r7, #8]
 8011c68:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8011c6a:	683b      	ldr	r3, [r7, #0]
 8011c6c:	2200      	movs	r2, #0
 8011c6e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8011c70:	68fb      	ldr	r3, [r7, #12]
 8011c72:	f107 0214 	add.w	r2, r7, #20
 8011c76:	4611      	mov	r1, r2
 8011c78:	4618      	mov	r0, r3
 8011c7a:	f7ff fda3 	bl	80117c4 <validate>
 8011c7e:	4603      	mov	r3, r0
 8011c80:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8011c84:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	d107      	bne.n	8011c9c <f_read+0x44>
 8011c8c:	68fb      	ldr	r3, [r7, #12]
 8011c8e:	7d5b      	ldrb	r3, [r3, #21]
 8011c90:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011c94:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011c98:	2b00      	cmp	r3, #0
 8011c9a:	d002      	beq.n	8011ca2 <f_read+0x4a>
 8011c9c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011ca0:	e135      	b.n	8011f0e <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8011ca2:	68fb      	ldr	r3, [r7, #12]
 8011ca4:	7d1b      	ldrb	r3, [r3, #20]
 8011ca6:	f003 0301 	and.w	r3, r3, #1
 8011caa:	2b00      	cmp	r3, #0
 8011cac:	d101      	bne.n	8011cb2 <f_read+0x5a>
 8011cae:	2307      	movs	r3, #7
 8011cb0:	e12d      	b.n	8011f0e <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8011cb2:	68fb      	ldr	r3, [r7, #12]
 8011cb4:	68da      	ldr	r2, [r3, #12]
 8011cb6:	68fb      	ldr	r3, [r7, #12]
 8011cb8:	699b      	ldr	r3, [r3, #24]
 8011cba:	1ad3      	subs	r3, r2, r3
 8011cbc:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8011cbe:	687a      	ldr	r2, [r7, #4]
 8011cc0:	6a3b      	ldr	r3, [r7, #32]
 8011cc2:	429a      	cmp	r2, r3
 8011cc4:	f240 811e 	bls.w	8011f04 <f_read+0x2ac>
 8011cc8:	6a3b      	ldr	r3, [r7, #32]
 8011cca:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8011ccc:	e11a      	b.n	8011f04 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8011cce:	68fb      	ldr	r3, [r7, #12]
 8011cd0:	699b      	ldr	r3, [r3, #24]
 8011cd2:	697a      	ldr	r2, [r7, #20]
 8011cd4:	8992      	ldrh	r2, [r2, #12]
 8011cd6:	fbb3 f1f2 	udiv	r1, r3, r2
 8011cda:	fb02 f201 	mul.w	r2, r2, r1
 8011cde:	1a9b      	subs	r3, r3, r2
 8011ce0:	2b00      	cmp	r3, #0
 8011ce2:	f040 80d5 	bne.w	8011e90 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8011ce6:	68fb      	ldr	r3, [r7, #12]
 8011ce8:	699b      	ldr	r3, [r3, #24]
 8011cea:	697a      	ldr	r2, [r7, #20]
 8011cec:	8992      	ldrh	r2, [r2, #12]
 8011cee:	fbb3 f3f2 	udiv	r3, r3, r2
 8011cf2:	697a      	ldr	r2, [r7, #20]
 8011cf4:	8952      	ldrh	r2, [r2, #10]
 8011cf6:	3a01      	subs	r2, #1
 8011cf8:	4013      	ands	r3, r2
 8011cfa:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8011cfc:	69fb      	ldr	r3, [r7, #28]
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	d12f      	bne.n	8011d62 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8011d02:	68fb      	ldr	r3, [r7, #12]
 8011d04:	699b      	ldr	r3, [r3, #24]
 8011d06:	2b00      	cmp	r3, #0
 8011d08:	d103      	bne.n	8011d12 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8011d0a:	68fb      	ldr	r3, [r7, #12]
 8011d0c:	689b      	ldr	r3, [r3, #8]
 8011d0e:	633b      	str	r3, [r7, #48]	; 0x30
 8011d10:	e013      	b.n	8011d3a <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8011d12:	68fb      	ldr	r3, [r7, #12]
 8011d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d16:	2b00      	cmp	r3, #0
 8011d18:	d007      	beq.n	8011d2a <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8011d1a:	68fb      	ldr	r3, [r7, #12]
 8011d1c:	699b      	ldr	r3, [r3, #24]
 8011d1e:	4619      	mov	r1, r3
 8011d20:	68f8      	ldr	r0, [r7, #12]
 8011d22:	f7fe fdb0 	bl	8010886 <clmt_clust>
 8011d26:	6338      	str	r0, [r7, #48]	; 0x30
 8011d28:	e007      	b.n	8011d3a <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8011d2a:	68fa      	ldr	r2, [r7, #12]
 8011d2c:	68fb      	ldr	r3, [r7, #12]
 8011d2e:	69db      	ldr	r3, [r3, #28]
 8011d30:	4619      	mov	r1, r3
 8011d32:	4610      	mov	r0, r2
 8011d34:	f7fe fac3 	bl	80102be <get_fat>
 8011d38:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8011d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d3c:	2b01      	cmp	r3, #1
 8011d3e:	d804      	bhi.n	8011d4a <f_read+0xf2>
 8011d40:	68fb      	ldr	r3, [r7, #12]
 8011d42:	2202      	movs	r2, #2
 8011d44:	755a      	strb	r2, [r3, #21]
 8011d46:	2302      	movs	r3, #2
 8011d48:	e0e1      	b.n	8011f0e <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d50:	d104      	bne.n	8011d5c <f_read+0x104>
 8011d52:	68fb      	ldr	r3, [r7, #12]
 8011d54:	2201      	movs	r2, #1
 8011d56:	755a      	strb	r2, [r3, #21]
 8011d58:	2301      	movs	r3, #1
 8011d5a:	e0d8      	b.n	8011f0e <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8011d5c:	68fb      	ldr	r3, [r7, #12]
 8011d5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011d60:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8011d62:	697a      	ldr	r2, [r7, #20]
 8011d64:	68fb      	ldr	r3, [r7, #12]
 8011d66:	69db      	ldr	r3, [r3, #28]
 8011d68:	4619      	mov	r1, r3
 8011d6a:	4610      	mov	r0, r2
 8011d6c:	f7fe fa88 	bl	8010280 <clust2sect>
 8011d70:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8011d72:	69bb      	ldr	r3, [r7, #24]
 8011d74:	2b00      	cmp	r3, #0
 8011d76:	d104      	bne.n	8011d82 <f_read+0x12a>
 8011d78:	68fb      	ldr	r3, [r7, #12]
 8011d7a:	2202      	movs	r2, #2
 8011d7c:	755a      	strb	r2, [r3, #21]
 8011d7e:	2302      	movs	r3, #2
 8011d80:	e0c5      	b.n	8011f0e <f_read+0x2b6>
			sect += csect;
 8011d82:	69ba      	ldr	r2, [r7, #24]
 8011d84:	69fb      	ldr	r3, [r7, #28]
 8011d86:	4413      	add	r3, r2
 8011d88:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8011d8a:	697b      	ldr	r3, [r7, #20]
 8011d8c:	899b      	ldrh	r3, [r3, #12]
 8011d8e:	461a      	mov	r2, r3
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	fbb3 f3f2 	udiv	r3, r3, r2
 8011d96:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8011d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d9a:	2b00      	cmp	r3, #0
 8011d9c:	d041      	beq.n	8011e22 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8011d9e:	69fa      	ldr	r2, [r7, #28]
 8011da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011da2:	4413      	add	r3, r2
 8011da4:	697a      	ldr	r2, [r7, #20]
 8011da6:	8952      	ldrh	r2, [r2, #10]
 8011da8:	4293      	cmp	r3, r2
 8011daa:	d905      	bls.n	8011db8 <f_read+0x160>
					cc = fs->csize - csect;
 8011dac:	697b      	ldr	r3, [r7, #20]
 8011dae:	895b      	ldrh	r3, [r3, #10]
 8011db0:	461a      	mov	r2, r3
 8011db2:	69fb      	ldr	r3, [r7, #28]
 8011db4:	1ad3      	subs	r3, r2, r3
 8011db6:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011db8:	697b      	ldr	r3, [r7, #20]
 8011dba:	7858      	ldrb	r0, [r3, #1]
 8011dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011dbe:	69ba      	ldr	r2, [r7, #24]
 8011dc0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011dc2:	f7fd feb1 	bl	800fb28 <disk_read>
 8011dc6:	4603      	mov	r3, r0
 8011dc8:	2b00      	cmp	r3, #0
 8011dca:	d004      	beq.n	8011dd6 <f_read+0x17e>
 8011dcc:	68fb      	ldr	r3, [r7, #12]
 8011dce:	2201      	movs	r2, #1
 8011dd0:	755a      	strb	r2, [r3, #21]
 8011dd2:	2301      	movs	r3, #1
 8011dd4:	e09b      	b.n	8011f0e <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8011dd6:	68fb      	ldr	r3, [r7, #12]
 8011dd8:	7d1b      	ldrb	r3, [r3, #20]
 8011dda:	b25b      	sxtb	r3, r3
 8011ddc:	2b00      	cmp	r3, #0
 8011dde:	da18      	bge.n	8011e12 <f_read+0x1ba>
 8011de0:	68fb      	ldr	r3, [r7, #12]
 8011de2:	6a1a      	ldr	r2, [r3, #32]
 8011de4:	69bb      	ldr	r3, [r7, #24]
 8011de6:	1ad3      	subs	r3, r2, r3
 8011de8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011dea:	429a      	cmp	r2, r3
 8011dec:	d911      	bls.n	8011e12 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8011dee:	68fb      	ldr	r3, [r7, #12]
 8011df0:	6a1a      	ldr	r2, [r3, #32]
 8011df2:	69bb      	ldr	r3, [r7, #24]
 8011df4:	1ad3      	subs	r3, r2, r3
 8011df6:	697a      	ldr	r2, [r7, #20]
 8011df8:	8992      	ldrh	r2, [r2, #12]
 8011dfa:	fb02 f303 	mul.w	r3, r2, r3
 8011dfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011e00:	18d0      	adds	r0, r2, r3
 8011e02:	68fb      	ldr	r3, [r7, #12]
 8011e04:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011e08:	697b      	ldr	r3, [r7, #20]
 8011e0a:	899b      	ldrh	r3, [r3, #12]
 8011e0c:	461a      	mov	r2, r3
 8011e0e:	f7fd ff6b 	bl	800fce8 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8011e12:	697b      	ldr	r3, [r7, #20]
 8011e14:	899b      	ldrh	r3, [r3, #12]
 8011e16:	461a      	mov	r2, r3
 8011e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e1a:	fb02 f303 	mul.w	r3, r2, r3
 8011e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8011e20:	e05c      	b.n	8011edc <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8011e22:	68fb      	ldr	r3, [r7, #12]
 8011e24:	6a1b      	ldr	r3, [r3, #32]
 8011e26:	69ba      	ldr	r2, [r7, #24]
 8011e28:	429a      	cmp	r2, r3
 8011e2a:	d02e      	beq.n	8011e8a <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8011e2c:	68fb      	ldr	r3, [r7, #12]
 8011e2e:	7d1b      	ldrb	r3, [r3, #20]
 8011e30:	b25b      	sxtb	r3, r3
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	da18      	bge.n	8011e68 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011e36:	697b      	ldr	r3, [r7, #20]
 8011e38:	7858      	ldrb	r0, [r3, #1]
 8011e3a:	68fb      	ldr	r3, [r7, #12]
 8011e3c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011e40:	68fb      	ldr	r3, [r7, #12]
 8011e42:	6a1a      	ldr	r2, [r3, #32]
 8011e44:	2301      	movs	r3, #1
 8011e46:	f7fd fe8f 	bl	800fb68 <disk_write>
 8011e4a:	4603      	mov	r3, r0
 8011e4c:	2b00      	cmp	r3, #0
 8011e4e:	d004      	beq.n	8011e5a <f_read+0x202>
 8011e50:	68fb      	ldr	r3, [r7, #12]
 8011e52:	2201      	movs	r2, #1
 8011e54:	755a      	strb	r2, [r3, #21]
 8011e56:	2301      	movs	r3, #1
 8011e58:	e059      	b.n	8011f0e <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8011e5a:	68fb      	ldr	r3, [r7, #12]
 8011e5c:	7d1b      	ldrb	r3, [r3, #20]
 8011e5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011e62:	b2da      	uxtb	r2, r3
 8011e64:	68fb      	ldr	r3, [r7, #12]
 8011e66:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8011e68:	697b      	ldr	r3, [r7, #20]
 8011e6a:	7858      	ldrb	r0, [r3, #1]
 8011e6c:	68fb      	ldr	r3, [r7, #12]
 8011e6e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011e72:	2301      	movs	r3, #1
 8011e74:	69ba      	ldr	r2, [r7, #24]
 8011e76:	f7fd fe57 	bl	800fb28 <disk_read>
 8011e7a:	4603      	mov	r3, r0
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	d004      	beq.n	8011e8a <f_read+0x232>
 8011e80:	68fb      	ldr	r3, [r7, #12]
 8011e82:	2201      	movs	r2, #1
 8011e84:	755a      	strb	r2, [r3, #21]
 8011e86:	2301      	movs	r3, #1
 8011e88:	e041      	b.n	8011f0e <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8011e8a:	68fb      	ldr	r3, [r7, #12]
 8011e8c:	69ba      	ldr	r2, [r7, #24]
 8011e8e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8011e90:	697b      	ldr	r3, [r7, #20]
 8011e92:	899b      	ldrh	r3, [r3, #12]
 8011e94:	4618      	mov	r0, r3
 8011e96:	68fb      	ldr	r3, [r7, #12]
 8011e98:	699b      	ldr	r3, [r3, #24]
 8011e9a:	697a      	ldr	r2, [r7, #20]
 8011e9c:	8992      	ldrh	r2, [r2, #12]
 8011e9e:	fbb3 f1f2 	udiv	r1, r3, r2
 8011ea2:	fb02 f201 	mul.w	r2, r2, r1
 8011ea6:	1a9b      	subs	r3, r3, r2
 8011ea8:	1ac3      	subs	r3, r0, r3
 8011eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8011eac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011eae:	687b      	ldr	r3, [r7, #4]
 8011eb0:	429a      	cmp	r2, r3
 8011eb2:	d901      	bls.n	8011eb8 <f_read+0x260>
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8011eb8:	68fb      	ldr	r3, [r7, #12]
 8011eba:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011ebe:	68fb      	ldr	r3, [r7, #12]
 8011ec0:	699b      	ldr	r3, [r3, #24]
 8011ec2:	697a      	ldr	r2, [r7, #20]
 8011ec4:	8992      	ldrh	r2, [r2, #12]
 8011ec6:	fbb3 f0f2 	udiv	r0, r3, r2
 8011eca:	fb02 f200 	mul.w	r2, r2, r0
 8011ece:	1a9b      	subs	r3, r3, r2
 8011ed0:	440b      	add	r3, r1
 8011ed2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011ed4:	4619      	mov	r1, r3
 8011ed6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011ed8:	f7fd ff06 	bl	800fce8 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8011edc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ee0:	4413      	add	r3, r2
 8011ee2:	627b      	str	r3, [r7, #36]	; 0x24
 8011ee4:	68fb      	ldr	r3, [r7, #12]
 8011ee6:	699a      	ldr	r2, [r3, #24]
 8011ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011eea:	441a      	add	r2, r3
 8011eec:	68fb      	ldr	r3, [r7, #12]
 8011eee:	619a      	str	r2, [r3, #24]
 8011ef0:	683b      	ldr	r3, [r7, #0]
 8011ef2:	681a      	ldr	r2, [r3, #0]
 8011ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ef6:	441a      	add	r2, r3
 8011ef8:	683b      	ldr	r3, [r7, #0]
 8011efa:	601a      	str	r2, [r3, #0]
 8011efc:	687a      	ldr	r2, [r7, #4]
 8011efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f00:	1ad3      	subs	r3, r2, r3
 8011f02:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	2b00      	cmp	r3, #0
 8011f08:	f47f aee1 	bne.w	8011cce <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8011f0c:	2300      	movs	r3, #0
}
 8011f0e:	4618      	mov	r0, r3
 8011f10:	3738      	adds	r7, #56	; 0x38
 8011f12:	46bd      	mov	sp, r7
 8011f14:	bd80      	pop	{r7, pc}

08011f16 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8011f16:	b580      	push	{r7, lr}
 8011f18:	b08c      	sub	sp, #48	; 0x30
 8011f1a:	af00      	add	r7, sp, #0
 8011f1c:	60f8      	str	r0, [r7, #12]
 8011f1e:	60b9      	str	r1, [r7, #8]
 8011f20:	607a      	str	r2, [r7, #4]
 8011f22:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8011f24:	68bb      	ldr	r3, [r7, #8]
 8011f26:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8011f28:	683b      	ldr	r3, [r7, #0]
 8011f2a:	2200      	movs	r2, #0
 8011f2c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8011f2e:	68fb      	ldr	r3, [r7, #12]
 8011f30:	f107 0210 	add.w	r2, r7, #16
 8011f34:	4611      	mov	r1, r2
 8011f36:	4618      	mov	r0, r3
 8011f38:	f7ff fc44 	bl	80117c4 <validate>
 8011f3c:	4603      	mov	r3, r0
 8011f3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8011f42:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011f46:	2b00      	cmp	r3, #0
 8011f48:	d107      	bne.n	8011f5a <f_write+0x44>
 8011f4a:	68fb      	ldr	r3, [r7, #12]
 8011f4c:	7d5b      	ldrb	r3, [r3, #21]
 8011f4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8011f52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011f56:	2b00      	cmp	r3, #0
 8011f58:	d002      	beq.n	8011f60 <f_write+0x4a>
 8011f5a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011f5e:	e16a      	b.n	8012236 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8011f60:	68fb      	ldr	r3, [r7, #12]
 8011f62:	7d1b      	ldrb	r3, [r3, #20]
 8011f64:	f003 0302 	and.w	r3, r3, #2
 8011f68:	2b00      	cmp	r3, #0
 8011f6a:	d101      	bne.n	8011f70 <f_write+0x5a>
 8011f6c:	2307      	movs	r3, #7
 8011f6e:	e162      	b.n	8012236 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8011f70:	68fb      	ldr	r3, [r7, #12]
 8011f72:	699a      	ldr	r2, [r3, #24]
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	441a      	add	r2, r3
 8011f78:	68fb      	ldr	r3, [r7, #12]
 8011f7a:	699b      	ldr	r3, [r3, #24]
 8011f7c:	429a      	cmp	r2, r3
 8011f7e:	f080 814c 	bcs.w	801221a <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8011f82:	68fb      	ldr	r3, [r7, #12]
 8011f84:	699b      	ldr	r3, [r3, #24]
 8011f86:	43db      	mvns	r3, r3
 8011f88:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8011f8a:	e146      	b.n	801221a <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8011f8c:	68fb      	ldr	r3, [r7, #12]
 8011f8e:	699b      	ldr	r3, [r3, #24]
 8011f90:	693a      	ldr	r2, [r7, #16]
 8011f92:	8992      	ldrh	r2, [r2, #12]
 8011f94:	fbb3 f1f2 	udiv	r1, r3, r2
 8011f98:	fb02 f201 	mul.w	r2, r2, r1
 8011f9c:	1a9b      	subs	r3, r3, r2
 8011f9e:	2b00      	cmp	r3, #0
 8011fa0:	f040 80f1 	bne.w	8012186 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8011fa4:	68fb      	ldr	r3, [r7, #12]
 8011fa6:	699b      	ldr	r3, [r3, #24]
 8011fa8:	693a      	ldr	r2, [r7, #16]
 8011faa:	8992      	ldrh	r2, [r2, #12]
 8011fac:	fbb3 f3f2 	udiv	r3, r3, r2
 8011fb0:	693a      	ldr	r2, [r7, #16]
 8011fb2:	8952      	ldrh	r2, [r2, #10]
 8011fb4:	3a01      	subs	r2, #1
 8011fb6:	4013      	ands	r3, r2
 8011fb8:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8011fba:	69bb      	ldr	r3, [r7, #24]
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	d143      	bne.n	8012048 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8011fc0:	68fb      	ldr	r3, [r7, #12]
 8011fc2:	699b      	ldr	r3, [r3, #24]
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	d10c      	bne.n	8011fe2 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8011fc8:	68fb      	ldr	r3, [r7, #12]
 8011fca:	689b      	ldr	r3, [r3, #8]
 8011fcc:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8011fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	d11a      	bne.n	801200a <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8011fd4:	68fb      	ldr	r3, [r7, #12]
 8011fd6:	2100      	movs	r1, #0
 8011fd8:	4618      	mov	r0, r3
 8011fda:	f7fe fbbc 	bl	8010756 <create_chain>
 8011fde:	62b8      	str	r0, [r7, #40]	; 0x28
 8011fe0:	e013      	b.n	801200a <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8011fe2:	68fb      	ldr	r3, [r7, #12]
 8011fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011fe6:	2b00      	cmp	r3, #0
 8011fe8:	d007      	beq.n	8011ffa <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8011fea:	68fb      	ldr	r3, [r7, #12]
 8011fec:	699b      	ldr	r3, [r3, #24]
 8011fee:	4619      	mov	r1, r3
 8011ff0:	68f8      	ldr	r0, [r7, #12]
 8011ff2:	f7fe fc48 	bl	8010886 <clmt_clust>
 8011ff6:	62b8      	str	r0, [r7, #40]	; 0x28
 8011ff8:	e007      	b.n	801200a <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8011ffa:	68fa      	ldr	r2, [r7, #12]
 8011ffc:	68fb      	ldr	r3, [r7, #12]
 8011ffe:	69db      	ldr	r3, [r3, #28]
 8012000:	4619      	mov	r1, r3
 8012002:	4610      	mov	r0, r2
 8012004:	f7fe fba7 	bl	8010756 <create_chain>
 8012008:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801200a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801200c:	2b00      	cmp	r3, #0
 801200e:	f000 8109 	beq.w	8012224 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8012012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012014:	2b01      	cmp	r3, #1
 8012016:	d104      	bne.n	8012022 <f_write+0x10c>
 8012018:	68fb      	ldr	r3, [r7, #12]
 801201a:	2202      	movs	r2, #2
 801201c:	755a      	strb	r2, [r3, #21]
 801201e:	2302      	movs	r3, #2
 8012020:	e109      	b.n	8012236 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8012022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012028:	d104      	bne.n	8012034 <f_write+0x11e>
 801202a:	68fb      	ldr	r3, [r7, #12]
 801202c:	2201      	movs	r2, #1
 801202e:	755a      	strb	r2, [r3, #21]
 8012030:	2301      	movs	r3, #1
 8012032:	e100      	b.n	8012236 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8012034:	68fb      	ldr	r3, [r7, #12]
 8012036:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012038:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801203a:	68fb      	ldr	r3, [r7, #12]
 801203c:	689b      	ldr	r3, [r3, #8]
 801203e:	2b00      	cmp	r3, #0
 8012040:	d102      	bne.n	8012048 <f_write+0x132>
 8012042:	68fb      	ldr	r3, [r7, #12]
 8012044:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012046:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8012048:	68fb      	ldr	r3, [r7, #12]
 801204a:	7d1b      	ldrb	r3, [r3, #20]
 801204c:	b25b      	sxtb	r3, r3
 801204e:	2b00      	cmp	r3, #0
 8012050:	da18      	bge.n	8012084 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012052:	693b      	ldr	r3, [r7, #16]
 8012054:	7858      	ldrb	r0, [r3, #1]
 8012056:	68fb      	ldr	r3, [r7, #12]
 8012058:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801205c:	68fb      	ldr	r3, [r7, #12]
 801205e:	6a1a      	ldr	r2, [r3, #32]
 8012060:	2301      	movs	r3, #1
 8012062:	f7fd fd81 	bl	800fb68 <disk_write>
 8012066:	4603      	mov	r3, r0
 8012068:	2b00      	cmp	r3, #0
 801206a:	d004      	beq.n	8012076 <f_write+0x160>
 801206c:	68fb      	ldr	r3, [r7, #12]
 801206e:	2201      	movs	r2, #1
 8012070:	755a      	strb	r2, [r3, #21]
 8012072:	2301      	movs	r3, #1
 8012074:	e0df      	b.n	8012236 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8012076:	68fb      	ldr	r3, [r7, #12]
 8012078:	7d1b      	ldrb	r3, [r3, #20]
 801207a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801207e:	b2da      	uxtb	r2, r3
 8012080:	68fb      	ldr	r3, [r7, #12]
 8012082:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8012084:	693a      	ldr	r2, [r7, #16]
 8012086:	68fb      	ldr	r3, [r7, #12]
 8012088:	69db      	ldr	r3, [r3, #28]
 801208a:	4619      	mov	r1, r3
 801208c:	4610      	mov	r0, r2
 801208e:	f7fe f8f7 	bl	8010280 <clust2sect>
 8012092:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8012094:	697b      	ldr	r3, [r7, #20]
 8012096:	2b00      	cmp	r3, #0
 8012098:	d104      	bne.n	80120a4 <f_write+0x18e>
 801209a:	68fb      	ldr	r3, [r7, #12]
 801209c:	2202      	movs	r2, #2
 801209e:	755a      	strb	r2, [r3, #21]
 80120a0:	2302      	movs	r3, #2
 80120a2:	e0c8      	b.n	8012236 <f_write+0x320>
			sect += csect;
 80120a4:	697a      	ldr	r2, [r7, #20]
 80120a6:	69bb      	ldr	r3, [r7, #24]
 80120a8:	4413      	add	r3, r2
 80120aa:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80120ac:	693b      	ldr	r3, [r7, #16]
 80120ae:	899b      	ldrh	r3, [r3, #12]
 80120b0:	461a      	mov	r2, r3
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80120b8:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80120ba:	6a3b      	ldr	r3, [r7, #32]
 80120bc:	2b00      	cmp	r3, #0
 80120be:	d043      	beq.n	8012148 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80120c0:	69ba      	ldr	r2, [r7, #24]
 80120c2:	6a3b      	ldr	r3, [r7, #32]
 80120c4:	4413      	add	r3, r2
 80120c6:	693a      	ldr	r2, [r7, #16]
 80120c8:	8952      	ldrh	r2, [r2, #10]
 80120ca:	4293      	cmp	r3, r2
 80120cc:	d905      	bls.n	80120da <f_write+0x1c4>
					cc = fs->csize - csect;
 80120ce:	693b      	ldr	r3, [r7, #16]
 80120d0:	895b      	ldrh	r3, [r3, #10]
 80120d2:	461a      	mov	r2, r3
 80120d4:	69bb      	ldr	r3, [r7, #24]
 80120d6:	1ad3      	subs	r3, r2, r3
 80120d8:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80120da:	693b      	ldr	r3, [r7, #16]
 80120dc:	7858      	ldrb	r0, [r3, #1]
 80120de:	6a3b      	ldr	r3, [r7, #32]
 80120e0:	697a      	ldr	r2, [r7, #20]
 80120e2:	69f9      	ldr	r1, [r7, #28]
 80120e4:	f7fd fd40 	bl	800fb68 <disk_write>
 80120e8:	4603      	mov	r3, r0
 80120ea:	2b00      	cmp	r3, #0
 80120ec:	d004      	beq.n	80120f8 <f_write+0x1e2>
 80120ee:	68fb      	ldr	r3, [r7, #12]
 80120f0:	2201      	movs	r2, #1
 80120f2:	755a      	strb	r2, [r3, #21]
 80120f4:	2301      	movs	r3, #1
 80120f6:	e09e      	b.n	8012236 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80120f8:	68fb      	ldr	r3, [r7, #12]
 80120fa:	6a1a      	ldr	r2, [r3, #32]
 80120fc:	697b      	ldr	r3, [r7, #20]
 80120fe:	1ad3      	subs	r3, r2, r3
 8012100:	6a3a      	ldr	r2, [r7, #32]
 8012102:	429a      	cmp	r2, r3
 8012104:	d918      	bls.n	8012138 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8012106:	68fb      	ldr	r3, [r7, #12]
 8012108:	f103 0030 	add.w	r0, r3, #48	; 0x30
 801210c:	68fb      	ldr	r3, [r7, #12]
 801210e:	6a1a      	ldr	r2, [r3, #32]
 8012110:	697b      	ldr	r3, [r7, #20]
 8012112:	1ad3      	subs	r3, r2, r3
 8012114:	693a      	ldr	r2, [r7, #16]
 8012116:	8992      	ldrh	r2, [r2, #12]
 8012118:	fb02 f303 	mul.w	r3, r2, r3
 801211c:	69fa      	ldr	r2, [r7, #28]
 801211e:	18d1      	adds	r1, r2, r3
 8012120:	693b      	ldr	r3, [r7, #16]
 8012122:	899b      	ldrh	r3, [r3, #12]
 8012124:	461a      	mov	r2, r3
 8012126:	f7fd fddf 	bl	800fce8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801212a:	68fb      	ldr	r3, [r7, #12]
 801212c:	7d1b      	ldrb	r3, [r3, #20]
 801212e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012132:	b2da      	uxtb	r2, r3
 8012134:	68fb      	ldr	r3, [r7, #12]
 8012136:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8012138:	693b      	ldr	r3, [r7, #16]
 801213a:	899b      	ldrh	r3, [r3, #12]
 801213c:	461a      	mov	r2, r3
 801213e:	6a3b      	ldr	r3, [r7, #32]
 8012140:	fb02 f303 	mul.w	r3, r2, r3
 8012144:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8012146:	e04b      	b.n	80121e0 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8012148:	68fb      	ldr	r3, [r7, #12]
 801214a:	6a1b      	ldr	r3, [r3, #32]
 801214c:	697a      	ldr	r2, [r7, #20]
 801214e:	429a      	cmp	r2, r3
 8012150:	d016      	beq.n	8012180 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8012152:	68fb      	ldr	r3, [r7, #12]
 8012154:	699a      	ldr	r2, [r3, #24]
 8012156:	68fb      	ldr	r3, [r7, #12]
 8012158:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801215a:	429a      	cmp	r2, r3
 801215c:	d210      	bcs.n	8012180 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801215e:	693b      	ldr	r3, [r7, #16]
 8012160:	7858      	ldrb	r0, [r3, #1]
 8012162:	68fb      	ldr	r3, [r7, #12]
 8012164:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012168:	2301      	movs	r3, #1
 801216a:	697a      	ldr	r2, [r7, #20]
 801216c:	f7fd fcdc 	bl	800fb28 <disk_read>
 8012170:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8012172:	2b00      	cmp	r3, #0
 8012174:	d004      	beq.n	8012180 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8012176:	68fb      	ldr	r3, [r7, #12]
 8012178:	2201      	movs	r2, #1
 801217a:	755a      	strb	r2, [r3, #21]
 801217c:	2301      	movs	r3, #1
 801217e:	e05a      	b.n	8012236 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8012180:	68fb      	ldr	r3, [r7, #12]
 8012182:	697a      	ldr	r2, [r7, #20]
 8012184:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8012186:	693b      	ldr	r3, [r7, #16]
 8012188:	899b      	ldrh	r3, [r3, #12]
 801218a:	4618      	mov	r0, r3
 801218c:	68fb      	ldr	r3, [r7, #12]
 801218e:	699b      	ldr	r3, [r3, #24]
 8012190:	693a      	ldr	r2, [r7, #16]
 8012192:	8992      	ldrh	r2, [r2, #12]
 8012194:	fbb3 f1f2 	udiv	r1, r3, r2
 8012198:	fb02 f201 	mul.w	r2, r2, r1
 801219c:	1a9b      	subs	r3, r3, r2
 801219e:	1ac3      	subs	r3, r0, r3
 80121a0:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80121a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	429a      	cmp	r2, r3
 80121a8:	d901      	bls.n	80121ae <f_write+0x298>
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80121ae:	68fb      	ldr	r3, [r7, #12]
 80121b0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80121b4:	68fb      	ldr	r3, [r7, #12]
 80121b6:	699b      	ldr	r3, [r3, #24]
 80121b8:	693a      	ldr	r2, [r7, #16]
 80121ba:	8992      	ldrh	r2, [r2, #12]
 80121bc:	fbb3 f0f2 	udiv	r0, r3, r2
 80121c0:	fb02 f200 	mul.w	r2, r2, r0
 80121c4:	1a9b      	subs	r3, r3, r2
 80121c6:	440b      	add	r3, r1
 80121c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80121ca:	69f9      	ldr	r1, [r7, #28]
 80121cc:	4618      	mov	r0, r3
 80121ce:	f7fd fd8b 	bl	800fce8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80121d2:	68fb      	ldr	r3, [r7, #12]
 80121d4:	7d1b      	ldrb	r3, [r3, #20]
 80121d6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80121da:	b2da      	uxtb	r2, r3
 80121dc:	68fb      	ldr	r3, [r7, #12]
 80121de:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80121e0:	69fa      	ldr	r2, [r7, #28]
 80121e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121e4:	4413      	add	r3, r2
 80121e6:	61fb      	str	r3, [r7, #28]
 80121e8:	68fb      	ldr	r3, [r7, #12]
 80121ea:	699a      	ldr	r2, [r3, #24]
 80121ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121ee:	441a      	add	r2, r3
 80121f0:	68fb      	ldr	r3, [r7, #12]
 80121f2:	619a      	str	r2, [r3, #24]
 80121f4:	68fb      	ldr	r3, [r7, #12]
 80121f6:	68da      	ldr	r2, [r3, #12]
 80121f8:	68fb      	ldr	r3, [r7, #12]
 80121fa:	699b      	ldr	r3, [r3, #24]
 80121fc:	429a      	cmp	r2, r3
 80121fe:	bf38      	it	cc
 8012200:	461a      	movcc	r2, r3
 8012202:	68fb      	ldr	r3, [r7, #12]
 8012204:	60da      	str	r2, [r3, #12]
 8012206:	683b      	ldr	r3, [r7, #0]
 8012208:	681a      	ldr	r2, [r3, #0]
 801220a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801220c:	441a      	add	r2, r3
 801220e:	683b      	ldr	r3, [r7, #0]
 8012210:	601a      	str	r2, [r3, #0]
 8012212:	687a      	ldr	r2, [r7, #4]
 8012214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012216:	1ad3      	subs	r3, r2, r3
 8012218:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	2b00      	cmp	r3, #0
 801221e:	f47f aeb5 	bne.w	8011f8c <f_write+0x76>
 8012222:	e000      	b.n	8012226 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8012224:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8012226:	68fb      	ldr	r3, [r7, #12]
 8012228:	7d1b      	ldrb	r3, [r3, #20]
 801222a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801222e:	b2da      	uxtb	r2, r3
 8012230:	68fb      	ldr	r3, [r7, #12]
 8012232:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8012234:	2300      	movs	r3, #0
}
 8012236:	4618      	mov	r0, r3
 8012238:	3730      	adds	r7, #48	; 0x30
 801223a:	46bd      	mov	sp, r7
 801223c:	bd80      	pop	{r7, pc}
	...

08012240 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8012240:	b580      	push	{r7, lr}
 8012242:	b086      	sub	sp, #24
 8012244:	af00      	add	r7, sp, #0
 8012246:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	f107 0208 	add.w	r2, r7, #8
 801224e:	4611      	mov	r1, r2
 8012250:	4618      	mov	r0, r3
 8012252:	f7ff fab7 	bl	80117c4 <validate>
 8012256:	4603      	mov	r3, r0
 8012258:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801225a:	7dfb      	ldrb	r3, [r7, #23]
 801225c:	2b00      	cmp	r3, #0
 801225e:	d167      	bne.n	8012330 <f_sync+0xf0>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	7d1b      	ldrb	r3, [r3, #20]
 8012264:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012268:	2b00      	cmp	r3, #0
 801226a:	d061      	beq.n	8012330 <f_sync+0xf0>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801226c:	687b      	ldr	r3, [r7, #4]
 801226e:	7d1b      	ldrb	r3, [r3, #20]
 8012270:	b25b      	sxtb	r3, r3
 8012272:	2b00      	cmp	r3, #0
 8012274:	da15      	bge.n	80122a2 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8012276:	68bb      	ldr	r3, [r7, #8]
 8012278:	7858      	ldrb	r0, [r3, #1]
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	6a1a      	ldr	r2, [r3, #32]
 8012284:	2301      	movs	r3, #1
 8012286:	f7fd fc6f 	bl	800fb68 <disk_write>
 801228a:	4603      	mov	r3, r0
 801228c:	2b00      	cmp	r3, #0
 801228e:	d001      	beq.n	8012294 <f_sync+0x54>
 8012290:	2301      	movs	r3, #1
 8012292:	e04e      	b.n	8012332 <f_sync+0xf2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	7d1b      	ldrb	r3, [r3, #20]
 8012298:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801229c:	b2da      	uxtb	r2, r3
 801229e:	687b      	ldr	r3, [r7, #4]
 80122a0:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80122a2:	4b26      	ldr	r3, [pc, #152]	; (801233c <f_sync+0xfc>)
 80122a4:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80122a6:	68ba      	ldr	r2, [r7, #8]
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80122ac:	4619      	mov	r1, r3
 80122ae:	4610      	mov	r0, r2
 80122b0:	f7fd ff48 	bl	8010144 <move_window>
 80122b4:	4603      	mov	r3, r0
 80122b6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80122b8:	7dfb      	ldrb	r3, [r7, #23]
 80122ba:	2b00      	cmp	r3, #0
 80122bc:	d138      	bne.n	8012330 <f_sync+0xf0>
					dir = fp->dir_ptr;
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80122c2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80122c4:	68fb      	ldr	r3, [r7, #12]
 80122c6:	330b      	adds	r3, #11
 80122c8:	781a      	ldrb	r2, [r3, #0]
 80122ca:	68fb      	ldr	r3, [r7, #12]
 80122cc:	330b      	adds	r3, #11
 80122ce:	f042 0220 	orr.w	r2, r2, #32
 80122d2:	b2d2      	uxtb	r2, r2
 80122d4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	6818      	ldr	r0, [r3, #0]
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	689b      	ldr	r3, [r3, #8]
 80122de:	461a      	mov	r2, r3
 80122e0:	68f9      	ldr	r1, [r7, #12]
 80122e2:	f7fe fccd 	bl	8010c80 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80122e6:	68fb      	ldr	r3, [r7, #12]
 80122e8:	f103 021c 	add.w	r2, r3, #28
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	68db      	ldr	r3, [r3, #12]
 80122f0:	4619      	mov	r1, r3
 80122f2:	4610      	mov	r0, r2
 80122f4:	f7fd fccc 	bl	800fc90 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80122f8:	68fb      	ldr	r3, [r7, #12]
 80122fa:	3316      	adds	r3, #22
 80122fc:	6939      	ldr	r1, [r7, #16]
 80122fe:	4618      	mov	r0, r3
 8012300:	f7fd fcc6 	bl	800fc90 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8012304:	68fb      	ldr	r3, [r7, #12]
 8012306:	3312      	adds	r3, #18
 8012308:	2100      	movs	r1, #0
 801230a:	4618      	mov	r0, r3
 801230c:	f7fd fca5 	bl	800fc5a <st_word>
					fs->wflag = 1;
 8012310:	68bb      	ldr	r3, [r7, #8]
 8012312:	2201      	movs	r2, #1
 8012314:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8012316:	68bb      	ldr	r3, [r7, #8]
 8012318:	4618      	mov	r0, r3
 801231a:	f7fd ff41 	bl	80101a0 <sync_fs>
 801231e:	4603      	mov	r3, r0
 8012320:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	7d1b      	ldrb	r3, [r3, #20]
 8012326:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801232a:	b2da      	uxtb	r2, r3
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8012330:	7dfb      	ldrb	r3, [r7, #23]
}
 8012332:	4618      	mov	r0, r3
 8012334:	3718      	adds	r7, #24
 8012336:	46bd      	mov	sp, r7
 8012338:	bd80      	pop	{r7, pc}
 801233a:	bf00      	nop
 801233c:	274a0000 	.word	0x274a0000

08012340 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8012340:	b580      	push	{r7, lr}
 8012342:	b084      	sub	sp, #16
 8012344:	af00      	add	r7, sp, #0
 8012346:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8012348:	6878      	ldr	r0, [r7, #4]
 801234a:	f7ff ff79 	bl	8012240 <f_sync>
 801234e:	4603      	mov	r3, r0
 8012350:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8012352:	7bfb      	ldrb	r3, [r7, #15]
 8012354:	2b00      	cmp	r3, #0
 8012356:	d118      	bne.n	801238a <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	f107 0208 	add.w	r2, r7, #8
 801235e:	4611      	mov	r1, r2
 8012360:	4618      	mov	r0, r3
 8012362:	f7ff fa2f 	bl	80117c4 <validate>
 8012366:	4603      	mov	r3, r0
 8012368:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801236a:	7bfb      	ldrb	r3, [r7, #15]
 801236c:	2b00      	cmp	r3, #0
 801236e:	d10c      	bne.n	801238a <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8012370:	687b      	ldr	r3, [r7, #4]
 8012372:	691b      	ldr	r3, [r3, #16]
 8012374:	4618      	mov	r0, r3
 8012376:	f7fd fe41 	bl	800fffc <dec_lock>
 801237a:	4603      	mov	r3, r0
 801237c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801237e:	7bfb      	ldrb	r3, [r7, #15]
 8012380:	2b00      	cmp	r3, #0
 8012382:	d102      	bne.n	801238a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	2200      	movs	r2, #0
 8012388:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801238a:	7bfb      	ldrb	r3, [r7, #15]
}
 801238c:	4618      	mov	r0, r3
 801238e:	3710      	adds	r7, #16
 8012390:	46bd      	mov	sp, r7
 8012392:	bd80      	pop	{r7, pc}

08012394 <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8012394:	b590      	push	{r4, r7, lr}
 8012396:	b091      	sub	sp, #68	; 0x44
 8012398:	af00      	add	r7, sp, #0
 801239a:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 801239c:	f107 0108 	add.w	r1, r7, #8
 80123a0:	1d3b      	adds	r3, r7, #4
 80123a2:	2200      	movs	r2, #0
 80123a4:	4618      	mov	r0, r3
 80123a6:	f7fe ff87 	bl	80112b8 <find_volume>
 80123aa:	4603      	mov	r3, r0
 80123ac:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 80123b0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80123b4:	2b00      	cmp	r3, #0
 80123b6:	d131      	bne.n	801241c <f_chdir+0x88>
		dj.obj.fs = fs;
 80123b8:	68bb      	ldr	r3, [r7, #8]
 80123ba:	60fb      	str	r3, [r7, #12]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 80123bc:	687a      	ldr	r2, [r7, #4]
 80123be:	f107 030c 	add.w	r3, r7, #12
 80123c2:	4611      	mov	r1, r2
 80123c4:	4618      	mov	r0, r3
 80123c6:	f7fe fe47 	bl	8011058 <follow_path>
 80123ca:	4603      	mov	r3, r0
 80123cc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {					/* Follow completed */
 80123d0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	d11a      	bne.n	801240e <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 80123d8:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80123dc:	b25b      	sxtb	r3, r3
 80123de:	2b00      	cmp	r3, #0
 80123e0:	da03      	bge.n	80123ea <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 80123e2:	68bb      	ldr	r3, [r7, #8]
 80123e4:	697a      	ldr	r2, [r7, #20]
 80123e6:	619a      	str	r2, [r3, #24]
 80123e8:	e011      	b.n	801240e <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 80123ea:	7cbb      	ldrb	r3, [r7, #18]
 80123ec:	f003 0310 	and.w	r3, r3, #16
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	d009      	beq.n	8012408 <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 80123f4:	68bb      	ldr	r3, [r7, #8]
 80123f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80123f8:	68bc      	ldr	r4, [r7, #8]
 80123fa:	4611      	mov	r1, r2
 80123fc:	4618      	mov	r0, r3
 80123fe:	f7fe fc20 	bl	8010c42 <ld_clust>
 8012402:	4603      	mov	r3, r0
 8012404:	61a3      	str	r3, [r4, #24]
 8012406:	e002      	b.n	801240e <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 8012408:	2305      	movs	r3, #5
 801240a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 801240e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012412:	2b04      	cmp	r3, #4
 8012414:	d102      	bne.n	801241c <f_chdir+0x88>
 8012416:	2305      	movs	r3, #5
 8012418:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	LEAVE_FF(fs, res);
 801241c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8012420:	4618      	mov	r0, r3
 8012422:	3744      	adds	r7, #68	; 0x44
 8012424:	46bd      	mov	sp, r7
 8012426:	bd90      	pop	{r4, r7, pc}

08012428 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8012428:	b580      	push	{r7, lr}
 801242a:	b090      	sub	sp, #64	; 0x40
 801242c:	af00      	add	r7, sp, #0
 801242e:	6078      	str	r0, [r7, #4]
 8012430:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	f107 0208 	add.w	r2, r7, #8
 8012438:	4611      	mov	r1, r2
 801243a:	4618      	mov	r0, r3
 801243c:	f7ff f9c2 	bl	80117c4 <validate>
 8012440:	4603      	mov	r3, r0
 8012442:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8012446:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801244a:	2b00      	cmp	r3, #0
 801244c:	d103      	bne.n	8012456 <f_lseek+0x2e>
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	7d5b      	ldrb	r3, [r3, #21]
 8012452:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8012456:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801245a:	2b00      	cmp	r3, #0
 801245c:	d002      	beq.n	8012464 <f_lseek+0x3c>
 801245e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8012462:	e201      	b.n	8012868 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012468:	2b00      	cmp	r3, #0
 801246a:	f000 80d9 	beq.w	8012620 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 801246e:	683b      	ldr	r3, [r7, #0]
 8012470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012474:	d15a      	bne.n	801252c <f_lseek+0x104>
			tbl = fp->cltbl;
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801247a:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 801247c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801247e:	1d1a      	adds	r2, r3, #4
 8012480:	627a      	str	r2, [r7, #36]	; 0x24
 8012482:	681b      	ldr	r3, [r3, #0]
 8012484:	617b      	str	r3, [r7, #20]
 8012486:	2302      	movs	r3, #2
 8012488:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 801248a:	687b      	ldr	r3, [r7, #4]
 801248c:	689b      	ldr	r3, [r3, #8]
 801248e:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8012490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012492:	2b00      	cmp	r3, #0
 8012494:	d03a      	beq.n	801250c <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8012496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012498:	613b      	str	r3, [r7, #16]
 801249a:	2300      	movs	r3, #0
 801249c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801249e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124a0:	3302      	adds	r3, #2
 80124a2:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 80124a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124a6:	60fb      	str	r3, [r7, #12]
 80124a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80124aa:	3301      	adds	r3, #1
 80124ac:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80124b2:	4618      	mov	r0, r3
 80124b4:	f7fd ff03 	bl	80102be <get_fat>
 80124b8:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 80124ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124bc:	2b01      	cmp	r3, #1
 80124be:	d804      	bhi.n	80124ca <f_lseek+0xa2>
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	2202      	movs	r2, #2
 80124c4:	755a      	strb	r2, [r3, #21]
 80124c6:	2302      	movs	r3, #2
 80124c8:	e1ce      	b.n	8012868 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80124ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80124d0:	d104      	bne.n	80124dc <f_lseek+0xb4>
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	2201      	movs	r2, #1
 80124d6:	755a      	strb	r2, [r3, #21]
 80124d8:	2301      	movs	r3, #1
 80124da:	e1c5      	b.n	8012868 <f_lseek+0x440>
					} while (cl == pcl + 1);
 80124dc:	68fb      	ldr	r3, [r7, #12]
 80124de:	3301      	adds	r3, #1
 80124e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80124e2:	429a      	cmp	r2, r3
 80124e4:	d0de      	beq.n	80124a4 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80124e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80124e8:	697b      	ldr	r3, [r7, #20]
 80124ea:	429a      	cmp	r2, r3
 80124ec:	d809      	bhi.n	8012502 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 80124ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124f0:	1d1a      	adds	r2, r3, #4
 80124f2:	627a      	str	r2, [r7, #36]	; 0x24
 80124f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80124f6:	601a      	str	r2, [r3, #0]
 80124f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124fa:	1d1a      	adds	r2, r3, #4
 80124fc:	627a      	str	r2, [r7, #36]	; 0x24
 80124fe:	693a      	ldr	r2, [r7, #16]
 8012500:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8012502:	68bb      	ldr	r3, [r7, #8]
 8012504:	69db      	ldr	r3, [r3, #28]
 8012506:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012508:	429a      	cmp	r2, r3
 801250a:	d3c4      	bcc.n	8012496 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012510:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012512:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8012514:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012516:	697b      	ldr	r3, [r7, #20]
 8012518:	429a      	cmp	r2, r3
 801251a:	d803      	bhi.n	8012524 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 801251c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801251e:	2200      	movs	r2, #0
 8012520:	601a      	str	r2, [r3, #0]
 8012522:	e19f      	b.n	8012864 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8012524:	2311      	movs	r3, #17
 8012526:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 801252a:	e19b      	b.n	8012864 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	68db      	ldr	r3, [r3, #12]
 8012530:	683a      	ldr	r2, [r7, #0]
 8012532:	429a      	cmp	r2, r3
 8012534:	d902      	bls.n	801253c <f_lseek+0x114>
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	68db      	ldr	r3, [r3, #12]
 801253a:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	683a      	ldr	r2, [r7, #0]
 8012540:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8012542:	683b      	ldr	r3, [r7, #0]
 8012544:	2b00      	cmp	r3, #0
 8012546:	f000 818d 	beq.w	8012864 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 801254a:	683b      	ldr	r3, [r7, #0]
 801254c:	3b01      	subs	r3, #1
 801254e:	4619      	mov	r1, r3
 8012550:	6878      	ldr	r0, [r7, #4]
 8012552:	f7fe f998 	bl	8010886 <clmt_clust>
 8012556:	4602      	mov	r2, r0
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 801255c:	68ba      	ldr	r2, [r7, #8]
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	69db      	ldr	r3, [r3, #28]
 8012562:	4619      	mov	r1, r3
 8012564:	4610      	mov	r0, r2
 8012566:	f7fd fe8b 	bl	8010280 <clust2sect>
 801256a:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 801256c:	69bb      	ldr	r3, [r7, #24]
 801256e:	2b00      	cmp	r3, #0
 8012570:	d104      	bne.n	801257c <f_lseek+0x154>
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	2202      	movs	r2, #2
 8012576:	755a      	strb	r2, [r3, #21]
 8012578:	2302      	movs	r3, #2
 801257a:	e175      	b.n	8012868 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 801257c:	683b      	ldr	r3, [r7, #0]
 801257e:	3b01      	subs	r3, #1
 8012580:	68ba      	ldr	r2, [r7, #8]
 8012582:	8992      	ldrh	r2, [r2, #12]
 8012584:	fbb3 f3f2 	udiv	r3, r3, r2
 8012588:	68ba      	ldr	r2, [r7, #8]
 801258a:	8952      	ldrh	r2, [r2, #10]
 801258c:	3a01      	subs	r2, #1
 801258e:	4013      	ands	r3, r2
 8012590:	69ba      	ldr	r2, [r7, #24]
 8012592:	4413      	add	r3, r2
 8012594:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	699b      	ldr	r3, [r3, #24]
 801259a:	68ba      	ldr	r2, [r7, #8]
 801259c:	8992      	ldrh	r2, [r2, #12]
 801259e:	fbb3 f1f2 	udiv	r1, r3, r2
 80125a2:	fb02 f201 	mul.w	r2, r2, r1
 80125a6:	1a9b      	subs	r3, r3, r2
 80125a8:	2b00      	cmp	r3, #0
 80125aa:	f000 815b 	beq.w	8012864 <f_lseek+0x43c>
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	6a1b      	ldr	r3, [r3, #32]
 80125b2:	69ba      	ldr	r2, [r7, #24]
 80125b4:	429a      	cmp	r2, r3
 80125b6:	f000 8155 	beq.w	8012864 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	7d1b      	ldrb	r3, [r3, #20]
 80125be:	b25b      	sxtb	r3, r3
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	da18      	bge.n	80125f6 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80125c4:	68bb      	ldr	r3, [r7, #8]
 80125c6:	7858      	ldrb	r0, [r3, #1]
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	6a1a      	ldr	r2, [r3, #32]
 80125d2:	2301      	movs	r3, #1
 80125d4:	f7fd fac8 	bl	800fb68 <disk_write>
 80125d8:	4603      	mov	r3, r0
 80125da:	2b00      	cmp	r3, #0
 80125dc:	d004      	beq.n	80125e8 <f_lseek+0x1c0>
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	2201      	movs	r2, #1
 80125e2:	755a      	strb	r2, [r3, #21]
 80125e4:	2301      	movs	r3, #1
 80125e6:	e13f      	b.n	8012868 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	7d1b      	ldrb	r3, [r3, #20]
 80125ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80125f0:	b2da      	uxtb	r2, r3
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80125f6:	68bb      	ldr	r3, [r7, #8]
 80125f8:	7858      	ldrb	r0, [r3, #1]
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012600:	2301      	movs	r3, #1
 8012602:	69ba      	ldr	r2, [r7, #24]
 8012604:	f7fd fa90 	bl	800fb28 <disk_read>
 8012608:	4603      	mov	r3, r0
 801260a:	2b00      	cmp	r3, #0
 801260c:	d004      	beq.n	8012618 <f_lseek+0x1f0>
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	2201      	movs	r2, #1
 8012612:	755a      	strb	r2, [r3, #21]
 8012614:	2301      	movs	r3, #1
 8012616:	e127      	b.n	8012868 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	69ba      	ldr	r2, [r7, #24]
 801261c:	621a      	str	r2, [r3, #32]
 801261e:	e121      	b.n	8012864 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	68db      	ldr	r3, [r3, #12]
 8012624:	683a      	ldr	r2, [r7, #0]
 8012626:	429a      	cmp	r2, r3
 8012628:	d908      	bls.n	801263c <f_lseek+0x214>
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	7d1b      	ldrb	r3, [r3, #20]
 801262e:	f003 0302 	and.w	r3, r3, #2
 8012632:	2b00      	cmp	r3, #0
 8012634:	d102      	bne.n	801263c <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	68db      	ldr	r3, [r3, #12]
 801263a:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	699b      	ldr	r3, [r3, #24]
 8012640:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8012642:	2300      	movs	r3, #0
 8012644:	637b      	str	r3, [r7, #52]	; 0x34
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801264a:	619a      	str	r2, [r3, #24]
		if (ofs) {
 801264c:	683b      	ldr	r3, [r7, #0]
 801264e:	2b00      	cmp	r3, #0
 8012650:	f000 80b5 	beq.w	80127be <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8012654:	68bb      	ldr	r3, [r7, #8]
 8012656:	895b      	ldrh	r3, [r3, #10]
 8012658:	461a      	mov	r2, r3
 801265a:	68bb      	ldr	r3, [r7, #8]
 801265c:	899b      	ldrh	r3, [r3, #12]
 801265e:	fb03 f302 	mul.w	r3, r3, r2
 8012662:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8012664:	6a3b      	ldr	r3, [r7, #32]
 8012666:	2b00      	cmp	r3, #0
 8012668:	d01b      	beq.n	80126a2 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 801266a:	683b      	ldr	r3, [r7, #0]
 801266c:	1e5a      	subs	r2, r3, #1
 801266e:	69fb      	ldr	r3, [r7, #28]
 8012670:	fbb2 f2f3 	udiv	r2, r2, r3
 8012674:	6a3b      	ldr	r3, [r7, #32]
 8012676:	1e59      	subs	r1, r3, #1
 8012678:	69fb      	ldr	r3, [r7, #28]
 801267a:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 801267e:	429a      	cmp	r2, r3
 8012680:	d30f      	bcc.n	80126a2 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8012682:	6a3b      	ldr	r3, [r7, #32]
 8012684:	1e5a      	subs	r2, r3, #1
 8012686:	69fb      	ldr	r3, [r7, #28]
 8012688:	425b      	negs	r3, r3
 801268a:	401a      	ands	r2, r3
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8012690:	687b      	ldr	r3, [r7, #4]
 8012692:	699b      	ldr	r3, [r3, #24]
 8012694:	683a      	ldr	r2, [r7, #0]
 8012696:	1ad3      	subs	r3, r2, r3
 8012698:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	69db      	ldr	r3, [r3, #28]
 801269e:	63bb      	str	r3, [r7, #56]	; 0x38
 80126a0:	e022      	b.n	80126e8 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 80126a2:	687b      	ldr	r3, [r7, #4]
 80126a4:	689b      	ldr	r3, [r3, #8]
 80126a6:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80126a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	d119      	bne.n	80126e2 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	2100      	movs	r1, #0
 80126b2:	4618      	mov	r0, r3
 80126b4:	f7fe f84f 	bl	8010756 <create_chain>
 80126b8:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 80126ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126bc:	2b01      	cmp	r3, #1
 80126be:	d104      	bne.n	80126ca <f_lseek+0x2a2>
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	2202      	movs	r2, #2
 80126c4:	755a      	strb	r2, [r3, #21]
 80126c6:	2302      	movs	r3, #2
 80126c8:	e0ce      	b.n	8012868 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80126ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80126d0:	d104      	bne.n	80126dc <f_lseek+0x2b4>
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	2201      	movs	r2, #1
 80126d6:	755a      	strb	r2, [r3, #21]
 80126d8:	2301      	movs	r3, #1
 80126da:	e0c5      	b.n	8012868 <f_lseek+0x440>
					fp->obj.sclust = clst;
 80126dc:	687b      	ldr	r3, [r7, #4]
 80126de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80126e0:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80126e6:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 80126e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126ea:	2b00      	cmp	r3, #0
 80126ec:	d067      	beq.n	80127be <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 80126ee:	e03a      	b.n	8012766 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 80126f0:	683a      	ldr	r2, [r7, #0]
 80126f2:	69fb      	ldr	r3, [r7, #28]
 80126f4:	1ad3      	subs	r3, r2, r3
 80126f6:	603b      	str	r3, [r7, #0]
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	699a      	ldr	r2, [r3, #24]
 80126fc:	69fb      	ldr	r3, [r7, #28]
 80126fe:	441a      	add	r2, r3
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8012704:	687b      	ldr	r3, [r7, #4]
 8012706:	7d1b      	ldrb	r3, [r3, #20]
 8012708:	f003 0302 	and.w	r3, r3, #2
 801270c:	2b00      	cmp	r3, #0
 801270e:	d00b      	beq.n	8012728 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012714:	4618      	mov	r0, r3
 8012716:	f7fe f81e 	bl	8010756 <create_chain>
 801271a:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 801271c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801271e:	2b00      	cmp	r3, #0
 8012720:	d108      	bne.n	8012734 <f_lseek+0x30c>
							ofs = 0; break;
 8012722:	2300      	movs	r3, #0
 8012724:	603b      	str	r3, [r7, #0]
 8012726:	e022      	b.n	801276e <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801272c:	4618      	mov	r0, r3
 801272e:	f7fd fdc6 	bl	80102be <get_fat>
 8012732:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8012734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012736:	f1b3 3fff 	cmp.w	r3, #4294967295
 801273a:	d104      	bne.n	8012746 <f_lseek+0x31e>
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	2201      	movs	r2, #1
 8012740:	755a      	strb	r2, [r3, #21]
 8012742:	2301      	movs	r3, #1
 8012744:	e090      	b.n	8012868 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8012746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012748:	2b01      	cmp	r3, #1
 801274a:	d904      	bls.n	8012756 <f_lseek+0x32e>
 801274c:	68bb      	ldr	r3, [r7, #8]
 801274e:	69db      	ldr	r3, [r3, #28]
 8012750:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012752:	429a      	cmp	r2, r3
 8012754:	d304      	bcc.n	8012760 <f_lseek+0x338>
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	2202      	movs	r2, #2
 801275a:	755a      	strb	r2, [r3, #21]
 801275c:	2302      	movs	r3, #2
 801275e:	e083      	b.n	8012868 <f_lseek+0x440>
					fp->clust = clst;
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012764:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8012766:	683a      	ldr	r2, [r7, #0]
 8012768:	69fb      	ldr	r3, [r7, #28]
 801276a:	429a      	cmp	r2, r3
 801276c:	d8c0      	bhi.n	80126f0 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	699a      	ldr	r2, [r3, #24]
 8012772:	683b      	ldr	r3, [r7, #0]
 8012774:	441a      	add	r2, r3
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 801277a:	68bb      	ldr	r3, [r7, #8]
 801277c:	899b      	ldrh	r3, [r3, #12]
 801277e:	461a      	mov	r2, r3
 8012780:	683b      	ldr	r3, [r7, #0]
 8012782:	fbb3 f1f2 	udiv	r1, r3, r2
 8012786:	fb02 f201 	mul.w	r2, r2, r1
 801278a:	1a9b      	subs	r3, r3, r2
 801278c:	2b00      	cmp	r3, #0
 801278e:	d016      	beq.n	80127be <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8012790:	68bb      	ldr	r3, [r7, #8]
 8012792:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012794:	4618      	mov	r0, r3
 8012796:	f7fd fd73 	bl	8010280 <clust2sect>
 801279a:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 801279c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801279e:	2b00      	cmp	r3, #0
 80127a0:	d104      	bne.n	80127ac <f_lseek+0x384>
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	2202      	movs	r2, #2
 80127a6:	755a      	strb	r2, [r3, #21]
 80127a8:	2302      	movs	r3, #2
 80127aa:	e05d      	b.n	8012868 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 80127ac:	68bb      	ldr	r3, [r7, #8]
 80127ae:	899b      	ldrh	r3, [r3, #12]
 80127b0:	461a      	mov	r2, r3
 80127b2:	683b      	ldr	r3, [r7, #0]
 80127b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80127b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80127ba:	4413      	add	r3, r2
 80127bc:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 80127be:	687b      	ldr	r3, [r7, #4]
 80127c0:	699a      	ldr	r2, [r3, #24]
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	68db      	ldr	r3, [r3, #12]
 80127c6:	429a      	cmp	r2, r3
 80127c8:	d90a      	bls.n	80127e0 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 80127ca:	687b      	ldr	r3, [r7, #4]
 80127cc:	699a      	ldr	r2, [r3, #24]
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 80127d2:	687b      	ldr	r3, [r7, #4]
 80127d4:	7d1b      	ldrb	r3, [r3, #20]
 80127d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80127da:	b2da      	uxtb	r2, r3
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	699b      	ldr	r3, [r3, #24]
 80127e4:	68ba      	ldr	r2, [r7, #8]
 80127e6:	8992      	ldrh	r2, [r2, #12]
 80127e8:	fbb3 f1f2 	udiv	r1, r3, r2
 80127ec:	fb02 f201 	mul.w	r2, r2, r1
 80127f0:	1a9b      	subs	r3, r3, r2
 80127f2:	2b00      	cmp	r3, #0
 80127f4:	d036      	beq.n	8012864 <f_lseek+0x43c>
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	6a1b      	ldr	r3, [r3, #32]
 80127fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80127fc:	429a      	cmp	r2, r3
 80127fe:	d031      	beq.n	8012864 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	7d1b      	ldrb	r3, [r3, #20]
 8012804:	b25b      	sxtb	r3, r3
 8012806:	2b00      	cmp	r3, #0
 8012808:	da18      	bge.n	801283c <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801280a:	68bb      	ldr	r3, [r7, #8]
 801280c:	7858      	ldrb	r0, [r3, #1]
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	6a1a      	ldr	r2, [r3, #32]
 8012818:	2301      	movs	r3, #1
 801281a:	f7fd f9a5 	bl	800fb68 <disk_write>
 801281e:	4603      	mov	r3, r0
 8012820:	2b00      	cmp	r3, #0
 8012822:	d004      	beq.n	801282e <f_lseek+0x406>
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	2201      	movs	r2, #1
 8012828:	755a      	strb	r2, [r3, #21]
 801282a:	2301      	movs	r3, #1
 801282c:	e01c      	b.n	8012868 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	7d1b      	ldrb	r3, [r3, #20]
 8012832:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012836:	b2da      	uxtb	r2, r3
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 801283c:	68bb      	ldr	r3, [r7, #8]
 801283e:	7858      	ldrb	r0, [r3, #1]
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012846:	2301      	movs	r3, #1
 8012848:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801284a:	f7fd f96d 	bl	800fb28 <disk_read>
 801284e:	4603      	mov	r3, r0
 8012850:	2b00      	cmp	r3, #0
 8012852:	d004      	beq.n	801285e <f_lseek+0x436>
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	2201      	movs	r2, #1
 8012858:	755a      	strb	r2, [r3, #21]
 801285a:	2301      	movs	r3, #1
 801285c:	e004      	b.n	8012868 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012862:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8012864:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8012868:	4618      	mov	r0, r3
 801286a:	3740      	adds	r7, #64	; 0x40
 801286c:	46bd      	mov	sp, r7
 801286e:	bd80      	pop	{r7, pc}

08012870 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8012870:	b580      	push	{r7, lr}
 8012872:	b09e      	sub	sp, #120	; 0x78
 8012874:	af00      	add	r7, sp, #0
 8012876:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8012878:	2300      	movs	r3, #0
 801287a:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 801287c:	f107 010c 	add.w	r1, r7, #12
 8012880:	1d3b      	adds	r3, r7, #4
 8012882:	2202      	movs	r2, #2
 8012884:	4618      	mov	r0, r3
 8012886:	f7fe fd17 	bl	80112b8 <find_volume>
 801288a:	4603      	mov	r3, r0
 801288c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 8012890:	68fb      	ldr	r3, [r7, #12]
 8012892:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 8012894:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8012898:	2b00      	cmp	r3, #0
 801289a:	f040 80a4 	bne.w	80129e6 <f_unlink+0x176>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 801289e:	687a      	ldr	r2, [r7, #4]
 80128a0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80128a4:	4611      	mov	r1, r2
 80128a6:	4618      	mov	r0, r3
 80128a8:	f7fe fbd6 	bl	8011058 <follow_path>
 80128ac:	4603      	mov	r3, r0
 80128ae:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 80128b2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80128b6:	2b00      	cmp	r3, #0
 80128b8:	d108      	bne.n	80128cc <f_unlink+0x5c>
 80128ba:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80128be:	f003 0320 	and.w	r3, r3, #32
 80128c2:	2b00      	cmp	r3, #0
 80128c4:	d002      	beq.n	80128cc <f_unlink+0x5c>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 80128c6:	2306      	movs	r3, #6
 80128c8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 80128cc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80128d0:	2b00      	cmp	r3, #0
 80128d2:	d108      	bne.n	80128e6 <f_unlink+0x76>
 80128d4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80128d8:	2102      	movs	r1, #2
 80128da:	4618      	mov	r0, r3
 80128dc:	f7fd fa82 	bl	800fde4 <chk_lock>
 80128e0:	4603      	mov	r3, r0
 80128e2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 80128e6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80128ea:	2b00      	cmp	r3, #0
 80128ec:	d17b      	bne.n	80129e6 <f_unlink+0x176>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 80128ee:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80128f2:	b25b      	sxtb	r3, r3
 80128f4:	2b00      	cmp	r3, #0
 80128f6:	da03      	bge.n	8012900 <f_unlink+0x90>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 80128f8:	2306      	movs	r3, #6
 80128fa:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80128fe:	e008      	b.n	8012912 <f_unlink+0xa2>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8012900:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8012904:	f003 0301 	and.w	r3, r3, #1
 8012908:	2b00      	cmp	r3, #0
 801290a:	d002      	beq.n	8012912 <f_unlink+0xa2>
					res = FR_DENIED;		/* Cannot remove R/O object */
 801290c:	2307      	movs	r3, #7
 801290e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 8012912:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8012916:	2b00      	cmp	r3, #0
 8012918:	d13d      	bne.n	8012996 <f_unlink+0x126>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 801291a:	68fb      	ldr	r3, [r7, #12]
 801291c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801291e:	4611      	mov	r1, r2
 8012920:	4618      	mov	r0, r3
 8012922:	f7fe f98e 	bl	8010c42 <ld_clust>
 8012926:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8012928:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 801292c:	f003 0310 	and.w	r3, r3, #16
 8012930:	2b00      	cmp	r3, #0
 8012932:	d030      	beq.n	8012996 <f_unlink+0x126>
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
 8012934:	68fb      	ldr	r3, [r7, #12]
 8012936:	699b      	ldr	r3, [r3, #24]
 8012938:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801293a:	429a      	cmp	r2, r3
 801293c:	d103      	bne.n	8012946 <f_unlink+0xd6>
						res = FR_DENIED;
 801293e:	2307      	movs	r3, #7
 8012940:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8012944:	e027      	b.n	8012996 <f_unlink+0x126>
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8012946:	68fb      	ldr	r3, [r7, #12]
 8012948:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 801294a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801294c:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 801294e:	f107 0310 	add.w	r3, r7, #16
 8012952:	2100      	movs	r1, #0
 8012954:	4618      	mov	r0, r3
 8012956:	f7fd ffce 	bl	80108f6 <dir_sdi>
 801295a:	4603      	mov	r3, r0
 801295c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 8012960:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8012964:	2b00      	cmp	r3, #0
 8012966:	d116      	bne.n	8012996 <f_unlink+0x126>
							res = dir_read(&sdj, 0);			/* Read an item */
 8012968:	f107 0310 	add.w	r3, r7, #16
 801296c:	2100      	movs	r1, #0
 801296e:	4618      	mov	r0, r3
 8012970:	f7fe f9a6 	bl	8010cc0 <dir_read>
 8012974:	4603      	mov	r3, r0
 8012976:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 801297a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801297e:	2b00      	cmp	r3, #0
 8012980:	d102      	bne.n	8012988 <f_unlink+0x118>
 8012982:	2307      	movs	r3, #7
 8012984:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8012988:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801298c:	2b04      	cmp	r3, #4
 801298e:	d102      	bne.n	8012996 <f_unlink+0x126>
 8012990:	2300      	movs	r3, #0
 8012992:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 8012996:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 801299a:	2b00      	cmp	r3, #0
 801299c:	d123      	bne.n	80129e6 <f_unlink+0x176>
				res = dir_remove(&dj);			/* Remove the directory entry */
 801299e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80129a2:	4618      	mov	r0, r3
 80129a4:	f7fe fa70 	bl	8010e88 <dir_remove>
 80129a8:	4603      	mov	r3, r0
 80129aa:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 80129ae:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80129b2:	2b00      	cmp	r3, #0
 80129b4:	d10c      	bne.n	80129d0 <f_unlink+0x160>
 80129b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80129b8:	2b00      	cmp	r3, #0
 80129ba:	d009      	beq.n	80129d0 <f_unlink+0x160>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 80129bc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80129c0:	2200      	movs	r2, #0
 80129c2:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80129c4:	4618      	mov	r0, r3
 80129c6:	f7fd fe61 	bl	801068c <remove_chain>
 80129ca:	4603      	mov	r3, r0
 80129cc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 80129d0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80129d4:	2b00      	cmp	r3, #0
 80129d6:	d106      	bne.n	80129e6 <f_unlink+0x176>
 80129d8:	68fb      	ldr	r3, [r7, #12]
 80129da:	4618      	mov	r0, r3
 80129dc:	f7fd fbe0 	bl	80101a0 <sync_fs>
 80129e0:	4603      	mov	r3, r0
 80129e2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 80129e6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80129ea:	4618      	mov	r0, r3
 80129ec:	3778      	adds	r7, #120	; 0x78
 80129ee:	46bd      	mov	sp, r7
 80129f0:	bd80      	pop	{r7, pc}
	...

080129f4 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 80129f4:	b580      	push	{r7, lr}
 80129f6:	b096      	sub	sp, #88	; 0x58
 80129f8:	af00      	add	r7, sp, #0
 80129fa:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 80129fc:	f107 0108 	add.w	r1, r7, #8
 8012a00:	1d3b      	adds	r3, r7, #4
 8012a02:	2202      	movs	r2, #2
 8012a04:	4618      	mov	r0, r3
 8012a06:	f7fe fc57 	bl	80112b8 <find_volume>
 8012a0a:	4603      	mov	r3, r0
 8012a0c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 8012a10:	68bb      	ldr	r3, [r7, #8]
 8012a12:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 8012a14:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012a18:	2b00      	cmp	r3, #0
 8012a1a:	f040 80fe 	bne.w	8012c1a <f_mkdir+0x226>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8012a1e:	687a      	ldr	r2, [r7, #4]
 8012a20:	f107 030c 	add.w	r3, r7, #12
 8012a24:	4611      	mov	r1, r2
 8012a26:	4618      	mov	r0, r3
 8012a28:	f7fe fb16 	bl	8011058 <follow_path>
 8012a2c:	4603      	mov	r3, r0
 8012a2e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8012a32:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012a36:	2b00      	cmp	r3, #0
 8012a38:	d102      	bne.n	8012a40 <f_mkdir+0x4c>
 8012a3a:	2308      	movs	r3, #8
 8012a3c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 8012a40:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012a44:	2b04      	cmp	r3, #4
 8012a46:	d108      	bne.n	8012a5a <f_mkdir+0x66>
 8012a48:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8012a4c:	f003 0320 	and.w	r3, r3, #32
 8012a50:	2b00      	cmp	r3, #0
 8012a52:	d002      	beq.n	8012a5a <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 8012a54:	2306      	movs	r3, #6
 8012a56:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8012a5a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012a5e:	2b04      	cmp	r3, #4
 8012a60:	f040 80db 	bne.w	8012c1a <f_mkdir+0x226>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8012a64:	f107 030c 	add.w	r3, r7, #12
 8012a68:	2100      	movs	r1, #0
 8012a6a:	4618      	mov	r0, r3
 8012a6c:	f7fd fe73 	bl	8010756 <create_chain>
 8012a70:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8012a72:	68bb      	ldr	r3, [r7, #8]
 8012a74:	895b      	ldrh	r3, [r3, #10]
 8012a76:	461a      	mov	r2, r3
 8012a78:	68bb      	ldr	r3, [r7, #8]
 8012a7a:	899b      	ldrh	r3, [r3, #12]
 8012a7c:	fb03 f302 	mul.w	r3, r3, r2
 8012a80:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 8012a82:	2300      	movs	r3, #0
 8012a84:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8012a88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012a8a:	2b00      	cmp	r3, #0
 8012a8c:	d102      	bne.n	8012a94 <f_mkdir+0xa0>
 8012a8e:	2307      	movs	r3, #7
 8012a90:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 8012a94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012a96:	2b01      	cmp	r3, #1
 8012a98:	d102      	bne.n	8012aa0 <f_mkdir+0xac>
 8012a9a:	2302      	movs	r3, #2
 8012a9c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8012aa0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012aa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012aa6:	d102      	bne.n	8012aae <f_mkdir+0xba>
 8012aa8:	2301      	movs	r3, #1
 8012aaa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8012aae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012ab2:	2b00      	cmp	r3, #0
 8012ab4:	d106      	bne.n	8012ac4 <f_mkdir+0xd0>
 8012ab6:	68bb      	ldr	r3, [r7, #8]
 8012ab8:	4618      	mov	r0, r3
 8012aba:	f7fd faff 	bl	80100bc <sync_window>
 8012abe:	4603      	mov	r3, r0
 8012ac0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 8012ac4:	4b58      	ldr	r3, [pc, #352]	; (8012c28 <f_mkdir+0x234>)
 8012ac6:	643b      	str	r3, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 8012ac8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012acc:	2b00      	cmp	r3, #0
 8012ace:	d16c      	bne.n	8012baa <f_mkdir+0x1b6>
				dsc = clust2sect(fs, dcl);
 8012ad0:	68bb      	ldr	r3, [r7, #8]
 8012ad2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8012ad4:	4618      	mov	r0, r3
 8012ad6:	f7fd fbd3 	bl	8010280 <clust2sect>
 8012ada:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 8012adc:	68bb      	ldr	r3, [r7, #8]
 8012ade:	3338      	adds	r3, #56	; 0x38
 8012ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 8012ae2:	68bb      	ldr	r3, [r7, #8]
 8012ae4:	899b      	ldrh	r3, [r3, #12]
 8012ae6:	461a      	mov	r2, r3
 8012ae8:	2100      	movs	r1, #0
 8012aea:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8012aec:	f7fd f91d 	bl	800fd2a <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8012af0:	220b      	movs	r2, #11
 8012af2:	2120      	movs	r1, #32
 8012af4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8012af6:	f7fd f918 	bl	800fd2a <mem_set>
					dir[DIR_Name] = '.';
 8012afa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012afc:	222e      	movs	r2, #46	; 0x2e
 8012afe:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8012b00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b02:	330b      	adds	r3, #11
 8012b04:	2210      	movs	r2, #16
 8012b06:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8012b08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b0a:	3316      	adds	r3, #22
 8012b0c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012b0e:	4618      	mov	r0, r3
 8012b10:	f7fd f8be 	bl	800fc90 <st_dword>
					st_clust(fs, dir, dcl);
 8012b14:	68bb      	ldr	r3, [r7, #8]
 8012b16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012b18:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012b1a:	4618      	mov	r0, r3
 8012b1c:	f7fe f8b0 	bl	8010c80 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8012b20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b22:	3320      	adds	r3, #32
 8012b24:	2220      	movs	r2, #32
 8012b26:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012b28:	4618      	mov	r0, r3
 8012b2a:	f7fd f8dd 	bl	800fce8 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8012b2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b30:	3321      	adds	r3, #33	; 0x21
 8012b32:	222e      	movs	r2, #46	; 0x2e
 8012b34:	701a      	strb	r2, [r3, #0]
 8012b36:	697b      	ldr	r3, [r7, #20]
 8012b38:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8012b3a:	68bb      	ldr	r3, [r7, #8]
 8012b3c:	781b      	ldrb	r3, [r3, #0]
 8012b3e:	2b03      	cmp	r3, #3
 8012b40:	d106      	bne.n	8012b50 <f_mkdir+0x15c>
 8012b42:	68bb      	ldr	r3, [r7, #8]
 8012b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b46:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012b48:	429a      	cmp	r2, r3
 8012b4a:	d101      	bne.n	8012b50 <f_mkdir+0x15c>
 8012b4c:	2300      	movs	r3, #0
 8012b4e:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 8012b50:	68b8      	ldr	r0, [r7, #8]
 8012b52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012b54:	3320      	adds	r3, #32
 8012b56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012b58:	4619      	mov	r1, r3
 8012b5a:	f7fe f891 	bl	8010c80 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8012b5e:	68bb      	ldr	r3, [r7, #8]
 8012b60:	895b      	ldrh	r3, [r3, #10]
 8012b62:	653b      	str	r3, [r7, #80]	; 0x50
 8012b64:	e01c      	b.n	8012ba0 <f_mkdir+0x1ac>
					fs->winsect = dsc++;
 8012b66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012b68:	1c5a      	adds	r2, r3, #1
 8012b6a:	64fa      	str	r2, [r7, #76]	; 0x4c
 8012b6c:	68ba      	ldr	r2, [r7, #8]
 8012b6e:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 8012b70:	68bb      	ldr	r3, [r7, #8]
 8012b72:	2201      	movs	r2, #1
 8012b74:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8012b76:	68bb      	ldr	r3, [r7, #8]
 8012b78:	4618      	mov	r0, r3
 8012b7a:	f7fd fa9f 	bl	80100bc <sync_window>
 8012b7e:	4603      	mov	r3, r0
 8012b80:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 8012b84:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	d10d      	bne.n	8012ba8 <f_mkdir+0x1b4>
					mem_set(dir, 0, SS(fs));
 8012b8c:	68bb      	ldr	r3, [r7, #8]
 8012b8e:	899b      	ldrh	r3, [r3, #12]
 8012b90:	461a      	mov	r2, r3
 8012b92:	2100      	movs	r1, #0
 8012b94:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8012b96:	f7fd f8c8 	bl	800fd2a <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8012b9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012b9c:	3b01      	subs	r3, #1
 8012b9e:	653b      	str	r3, [r7, #80]	; 0x50
 8012ba0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012ba2:	2b00      	cmp	r3, #0
 8012ba4:	d1df      	bne.n	8012b66 <f_mkdir+0x172>
 8012ba6:	e000      	b.n	8012baa <f_mkdir+0x1b6>
					if (res != FR_OK) break;
 8012ba8:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8012baa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012bae:	2b00      	cmp	r3, #0
 8012bb0:	d107      	bne.n	8012bc2 <f_mkdir+0x1ce>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8012bb2:	f107 030c 	add.w	r3, r7, #12
 8012bb6:	4618      	mov	r0, r3
 8012bb8:	f7fe f934 	bl	8010e24 <dir_register>
 8012bbc:	4603      	mov	r3, r0
 8012bbe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 8012bc2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012bc6:	2b00      	cmp	r3, #0
 8012bc8:	d120      	bne.n	8012c0c <f_mkdir+0x218>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8012bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8012bce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012bd0:	3316      	adds	r3, #22
 8012bd2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8012bd4:	4618      	mov	r0, r3
 8012bd6:	f7fd f85b 	bl	800fc90 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8012bda:	68bb      	ldr	r3, [r7, #8]
 8012bdc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012bde:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012be0:	4618      	mov	r0, r3
 8012be2:	f7fe f84d 	bl	8010c80 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8012be6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012be8:	330b      	adds	r3, #11
 8012bea:	2210      	movs	r2, #16
 8012bec:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8012bee:	68bb      	ldr	r3, [r7, #8]
 8012bf0:	2201      	movs	r2, #1
 8012bf2:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8012bf4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012bf8:	2b00      	cmp	r3, #0
 8012bfa:	d10e      	bne.n	8012c1a <f_mkdir+0x226>
					res = sync_fs(fs);
 8012bfc:	68bb      	ldr	r3, [r7, #8]
 8012bfe:	4618      	mov	r0, r3
 8012c00:	f7fd face 	bl	80101a0 <sync_fs>
 8012c04:	4603      	mov	r3, r0
 8012c06:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8012c0a:	e006      	b.n	8012c1a <f_mkdir+0x226>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8012c0c:	f107 030c 	add.w	r3, r7, #12
 8012c10:	2200      	movs	r2, #0
 8012c12:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8012c14:	4618      	mov	r0, r3
 8012c16:	f7fd fd39 	bl	801068c <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8012c1a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 8012c1e:	4618      	mov	r0, r3
 8012c20:	3758      	adds	r7, #88	; 0x58
 8012c22:	46bd      	mov	sp, r7
 8012c24:	bd80      	pop	{r7, pc}
 8012c26:	bf00      	nop
 8012c28:	274a0000 	.word	0x274a0000

08012c2c <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8012c2c:	b580      	push	{r7, lr}
 8012c2e:	b088      	sub	sp, #32
 8012c30:	af00      	add	r7, sp, #0
 8012c32:	60f8      	str	r0, [r7, #12]
 8012c34:	60b9      	str	r1, [r7, #8]
 8012c36:	607a      	str	r2, [r7, #4]
	int n = 0;
 8012c38:	2300      	movs	r3, #0
 8012c3a:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8012c3c:	68fb      	ldr	r3, [r7, #12]
 8012c3e:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8012c40:	e017      	b.n	8012c72 <f_gets+0x46>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8012c42:	f107 0310 	add.w	r3, r7, #16
 8012c46:	f107 0114 	add.w	r1, r7, #20
 8012c4a:	2201      	movs	r2, #1
 8012c4c:	6878      	ldr	r0, [r7, #4]
 8012c4e:	f7ff f803 	bl	8011c58 <f_read>
		if (rc != 1) break;
 8012c52:	693b      	ldr	r3, [r7, #16]
 8012c54:	2b01      	cmp	r3, #1
 8012c56:	d112      	bne.n	8012c7e <f_gets+0x52>
		c = s[0];
 8012c58:	7d3b      	ldrb	r3, [r7, #20]
 8012c5a:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
		*p++ = c;
 8012c5c:	69bb      	ldr	r3, [r7, #24]
 8012c5e:	1c5a      	adds	r2, r3, #1
 8012c60:	61ba      	str	r2, [r7, #24]
 8012c62:	7dfa      	ldrb	r2, [r7, #23]
 8012c64:	701a      	strb	r2, [r3, #0]
		n++;
 8012c66:	69fb      	ldr	r3, [r7, #28]
 8012c68:	3301      	adds	r3, #1
 8012c6a:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8012c6c:	7dfb      	ldrb	r3, [r7, #23]
 8012c6e:	2b0a      	cmp	r3, #10
 8012c70:	d007      	beq.n	8012c82 <f_gets+0x56>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8012c72:	68bb      	ldr	r3, [r7, #8]
 8012c74:	3b01      	subs	r3, #1
 8012c76:	69fa      	ldr	r2, [r7, #28]
 8012c78:	429a      	cmp	r2, r3
 8012c7a:	dbe2      	blt.n	8012c42 <f_gets+0x16>
 8012c7c:	e002      	b.n	8012c84 <f_gets+0x58>
		if (rc != 1) break;
 8012c7e:	bf00      	nop
 8012c80:	e000      	b.n	8012c84 <f_gets+0x58>
		if (c == '\n') break;		/* Break on EOL */
 8012c82:	bf00      	nop
	}
	*p = 0;
 8012c84:	69bb      	ldr	r3, [r7, #24]
 8012c86:	2200      	movs	r2, #0
 8012c88:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8012c8a:	69fb      	ldr	r3, [r7, #28]
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	d001      	beq.n	8012c94 <f_gets+0x68>
 8012c90:	68fb      	ldr	r3, [r7, #12]
 8012c92:	e000      	b.n	8012c96 <f_gets+0x6a>
 8012c94:	2300      	movs	r3, #0
}
 8012c96:	4618      	mov	r0, r3
 8012c98:	3720      	adds	r7, #32
 8012c9a:	46bd      	mov	sp, r7
 8012c9c:	bd80      	pop	{r7, pc}
	...

08012ca0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8012ca0:	b480      	push	{r7}
 8012ca2:	b087      	sub	sp, #28
 8012ca4:	af00      	add	r7, sp, #0
 8012ca6:	60f8      	str	r0, [r7, #12]
 8012ca8:	60b9      	str	r1, [r7, #8]
 8012caa:	4613      	mov	r3, r2
 8012cac:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8012cae:	2301      	movs	r3, #1
 8012cb0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8012cb2:	2300      	movs	r3, #0
 8012cb4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8012cb6:	4b1f      	ldr	r3, [pc, #124]	; (8012d34 <FATFS_LinkDriverEx+0x94>)
 8012cb8:	7a5b      	ldrb	r3, [r3, #9]
 8012cba:	b2db      	uxtb	r3, r3
 8012cbc:	2b00      	cmp	r3, #0
 8012cbe:	d131      	bne.n	8012d24 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8012cc0:	4b1c      	ldr	r3, [pc, #112]	; (8012d34 <FATFS_LinkDriverEx+0x94>)
 8012cc2:	7a5b      	ldrb	r3, [r3, #9]
 8012cc4:	b2db      	uxtb	r3, r3
 8012cc6:	461a      	mov	r2, r3
 8012cc8:	4b1a      	ldr	r3, [pc, #104]	; (8012d34 <FATFS_LinkDriverEx+0x94>)
 8012cca:	2100      	movs	r1, #0
 8012ccc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8012cce:	4b19      	ldr	r3, [pc, #100]	; (8012d34 <FATFS_LinkDriverEx+0x94>)
 8012cd0:	7a5b      	ldrb	r3, [r3, #9]
 8012cd2:	b2db      	uxtb	r3, r3
 8012cd4:	4a17      	ldr	r2, [pc, #92]	; (8012d34 <FATFS_LinkDriverEx+0x94>)
 8012cd6:	009b      	lsls	r3, r3, #2
 8012cd8:	4413      	add	r3, r2
 8012cda:	68fa      	ldr	r2, [r7, #12]
 8012cdc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8012cde:	4b15      	ldr	r3, [pc, #84]	; (8012d34 <FATFS_LinkDriverEx+0x94>)
 8012ce0:	7a5b      	ldrb	r3, [r3, #9]
 8012ce2:	b2db      	uxtb	r3, r3
 8012ce4:	461a      	mov	r2, r3
 8012ce6:	4b13      	ldr	r3, [pc, #76]	; (8012d34 <FATFS_LinkDriverEx+0x94>)
 8012ce8:	4413      	add	r3, r2
 8012cea:	79fa      	ldrb	r2, [r7, #7]
 8012cec:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8012cee:	4b11      	ldr	r3, [pc, #68]	; (8012d34 <FATFS_LinkDriverEx+0x94>)
 8012cf0:	7a5b      	ldrb	r3, [r3, #9]
 8012cf2:	b2db      	uxtb	r3, r3
 8012cf4:	1c5a      	adds	r2, r3, #1
 8012cf6:	b2d1      	uxtb	r1, r2
 8012cf8:	4a0e      	ldr	r2, [pc, #56]	; (8012d34 <FATFS_LinkDriverEx+0x94>)
 8012cfa:	7251      	strb	r1, [r2, #9]
 8012cfc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8012cfe:	7dbb      	ldrb	r3, [r7, #22]
 8012d00:	3330      	adds	r3, #48	; 0x30
 8012d02:	b2da      	uxtb	r2, r3
 8012d04:	68bb      	ldr	r3, [r7, #8]
 8012d06:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8012d08:	68bb      	ldr	r3, [r7, #8]
 8012d0a:	3301      	adds	r3, #1
 8012d0c:	223a      	movs	r2, #58	; 0x3a
 8012d0e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8012d10:	68bb      	ldr	r3, [r7, #8]
 8012d12:	3302      	adds	r3, #2
 8012d14:	222f      	movs	r2, #47	; 0x2f
 8012d16:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8012d18:	68bb      	ldr	r3, [r7, #8]
 8012d1a:	3303      	adds	r3, #3
 8012d1c:	2200      	movs	r2, #0
 8012d1e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8012d20:	2300      	movs	r3, #0
 8012d22:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8012d24:	7dfb      	ldrb	r3, [r7, #23]
}
 8012d26:	4618      	mov	r0, r3
 8012d28:	371c      	adds	r7, #28
 8012d2a:	46bd      	mov	sp, r7
 8012d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d30:	4770      	bx	lr
 8012d32:	bf00      	nop
 8012d34:	2003c488 	.word	0x2003c488

08012d38 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8012d38:	b580      	push	{r7, lr}
 8012d3a:	b082      	sub	sp, #8
 8012d3c:	af00      	add	r7, sp, #0
 8012d3e:	6078      	str	r0, [r7, #4]
 8012d40:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8012d42:	2200      	movs	r2, #0
 8012d44:	6839      	ldr	r1, [r7, #0]
 8012d46:	6878      	ldr	r0, [r7, #4]
 8012d48:	f7ff ffaa 	bl	8012ca0 <FATFS_LinkDriverEx>
 8012d4c:	4603      	mov	r3, r0
}
 8012d4e:	4618      	mov	r0, r3
 8012d50:	3708      	adds	r7, #8
 8012d52:	46bd      	mov	sp, r7
 8012d54:	bd80      	pop	{r7, pc}

08012d56 <__cxa_guard_acquire>:
 8012d56:	6803      	ldr	r3, [r0, #0]
 8012d58:	07db      	lsls	r3, r3, #31
 8012d5a:	d406      	bmi.n	8012d6a <__cxa_guard_acquire+0x14>
 8012d5c:	7843      	ldrb	r3, [r0, #1]
 8012d5e:	b103      	cbz	r3, 8012d62 <__cxa_guard_acquire+0xc>
 8012d60:	deff      	udf	#255	; 0xff
 8012d62:	2301      	movs	r3, #1
 8012d64:	7043      	strb	r3, [r0, #1]
 8012d66:	4618      	mov	r0, r3
 8012d68:	4770      	bx	lr
 8012d6a:	2000      	movs	r0, #0
 8012d6c:	4770      	bx	lr

08012d6e <__cxa_guard_release>:
 8012d6e:	2301      	movs	r3, #1
 8012d70:	6003      	str	r3, [r0, #0]
 8012d72:	4770      	bx	lr
 8012d74:	0000      	movs	r0, r0
	...

08012d78 <cos>:
 8012d78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012d7a:	ec51 0b10 	vmov	r0, r1, d0
 8012d7e:	4a1e      	ldr	r2, [pc, #120]	; (8012df8 <cos+0x80>)
 8012d80:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012d84:	4293      	cmp	r3, r2
 8012d86:	dc06      	bgt.n	8012d96 <cos+0x1e>
 8012d88:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8012df0 <cos+0x78>
 8012d8c:	f000 fa74 	bl	8013278 <__kernel_cos>
 8012d90:	ec51 0b10 	vmov	r0, r1, d0
 8012d94:	e007      	b.n	8012da6 <cos+0x2e>
 8012d96:	4a19      	ldr	r2, [pc, #100]	; (8012dfc <cos+0x84>)
 8012d98:	4293      	cmp	r3, r2
 8012d9a:	dd09      	ble.n	8012db0 <cos+0x38>
 8012d9c:	ee10 2a10 	vmov	r2, s0
 8012da0:	460b      	mov	r3, r1
 8012da2:	f7ed fa89 	bl	80002b8 <__aeabi_dsub>
 8012da6:	ec41 0b10 	vmov	d0, r0, r1
 8012daa:	b005      	add	sp, #20
 8012dac:	f85d fb04 	ldr.w	pc, [sp], #4
 8012db0:	4668      	mov	r0, sp
 8012db2:	f000 f86d 	bl	8012e90 <__ieee754_rem_pio2>
 8012db6:	f000 0003 	and.w	r0, r0, #3
 8012dba:	2801      	cmp	r0, #1
 8012dbc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012dc0:	ed9d 0b00 	vldr	d0, [sp]
 8012dc4:	d007      	beq.n	8012dd6 <cos+0x5e>
 8012dc6:	2802      	cmp	r0, #2
 8012dc8:	d00e      	beq.n	8012de8 <cos+0x70>
 8012dca:	2800      	cmp	r0, #0
 8012dcc:	d0de      	beq.n	8012d8c <cos+0x14>
 8012dce:	2001      	movs	r0, #1
 8012dd0:	f000 fe5a 	bl	8013a88 <__kernel_sin>
 8012dd4:	e7dc      	b.n	8012d90 <cos+0x18>
 8012dd6:	f000 fe57 	bl	8013a88 <__kernel_sin>
 8012dda:	ec53 2b10 	vmov	r2, r3, d0
 8012dde:	ee10 0a10 	vmov	r0, s0
 8012de2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8012de6:	e7de      	b.n	8012da6 <cos+0x2e>
 8012de8:	f000 fa46 	bl	8013278 <__kernel_cos>
 8012dec:	e7f5      	b.n	8012dda <cos+0x62>
 8012dee:	bf00      	nop
	...
 8012df8:	3fe921fb 	.word	0x3fe921fb
 8012dfc:	7fefffff 	.word	0x7fefffff

08012e00 <sin>:
 8012e00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012e02:	ec51 0b10 	vmov	r0, r1, d0
 8012e06:	4a20      	ldr	r2, [pc, #128]	; (8012e88 <sin+0x88>)
 8012e08:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012e0c:	4293      	cmp	r3, r2
 8012e0e:	dc07      	bgt.n	8012e20 <sin+0x20>
 8012e10:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8012e80 <sin+0x80>
 8012e14:	2000      	movs	r0, #0
 8012e16:	f000 fe37 	bl	8013a88 <__kernel_sin>
 8012e1a:	ec51 0b10 	vmov	r0, r1, d0
 8012e1e:	e007      	b.n	8012e30 <sin+0x30>
 8012e20:	4a1a      	ldr	r2, [pc, #104]	; (8012e8c <sin+0x8c>)
 8012e22:	4293      	cmp	r3, r2
 8012e24:	dd09      	ble.n	8012e3a <sin+0x3a>
 8012e26:	ee10 2a10 	vmov	r2, s0
 8012e2a:	460b      	mov	r3, r1
 8012e2c:	f7ed fa44 	bl	80002b8 <__aeabi_dsub>
 8012e30:	ec41 0b10 	vmov	d0, r0, r1
 8012e34:	b005      	add	sp, #20
 8012e36:	f85d fb04 	ldr.w	pc, [sp], #4
 8012e3a:	4668      	mov	r0, sp
 8012e3c:	f000 f828 	bl	8012e90 <__ieee754_rem_pio2>
 8012e40:	f000 0003 	and.w	r0, r0, #3
 8012e44:	2801      	cmp	r0, #1
 8012e46:	ed9d 1b02 	vldr	d1, [sp, #8]
 8012e4a:	ed9d 0b00 	vldr	d0, [sp]
 8012e4e:	d004      	beq.n	8012e5a <sin+0x5a>
 8012e50:	2802      	cmp	r0, #2
 8012e52:	d005      	beq.n	8012e60 <sin+0x60>
 8012e54:	b970      	cbnz	r0, 8012e74 <sin+0x74>
 8012e56:	2001      	movs	r0, #1
 8012e58:	e7dd      	b.n	8012e16 <sin+0x16>
 8012e5a:	f000 fa0d 	bl	8013278 <__kernel_cos>
 8012e5e:	e7dc      	b.n	8012e1a <sin+0x1a>
 8012e60:	2001      	movs	r0, #1
 8012e62:	f000 fe11 	bl	8013a88 <__kernel_sin>
 8012e66:	ec53 2b10 	vmov	r2, r3, d0
 8012e6a:	ee10 0a10 	vmov	r0, s0
 8012e6e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8012e72:	e7dd      	b.n	8012e30 <sin+0x30>
 8012e74:	f000 fa00 	bl	8013278 <__kernel_cos>
 8012e78:	e7f5      	b.n	8012e66 <sin+0x66>
 8012e7a:	bf00      	nop
 8012e7c:	f3af 8000 	nop.w
	...
 8012e88:	3fe921fb 	.word	0x3fe921fb
 8012e8c:	7fefffff 	.word	0x7fefffff

08012e90 <__ieee754_rem_pio2>:
 8012e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e94:	ec57 6b10 	vmov	r6, r7, d0
 8012e98:	4bc3      	ldr	r3, [pc, #780]	; (80131a8 <__ieee754_rem_pio2+0x318>)
 8012e9a:	b08d      	sub	sp, #52	; 0x34
 8012e9c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8012ea0:	4598      	cmp	r8, r3
 8012ea2:	4604      	mov	r4, r0
 8012ea4:	9704      	str	r7, [sp, #16]
 8012ea6:	dc07      	bgt.n	8012eb8 <__ieee754_rem_pio2+0x28>
 8012ea8:	2200      	movs	r2, #0
 8012eaa:	2300      	movs	r3, #0
 8012eac:	ed84 0b00 	vstr	d0, [r4]
 8012eb0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8012eb4:	2500      	movs	r5, #0
 8012eb6:	e027      	b.n	8012f08 <__ieee754_rem_pio2+0x78>
 8012eb8:	4bbc      	ldr	r3, [pc, #752]	; (80131ac <__ieee754_rem_pio2+0x31c>)
 8012eba:	4598      	cmp	r8, r3
 8012ebc:	dc75      	bgt.n	8012faa <__ieee754_rem_pio2+0x11a>
 8012ebe:	9b04      	ldr	r3, [sp, #16]
 8012ec0:	4dbb      	ldr	r5, [pc, #748]	; (80131b0 <__ieee754_rem_pio2+0x320>)
 8012ec2:	2b00      	cmp	r3, #0
 8012ec4:	ee10 0a10 	vmov	r0, s0
 8012ec8:	a3a9      	add	r3, pc, #676	; (adr r3, 8013170 <__ieee754_rem_pio2+0x2e0>)
 8012eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ece:	4639      	mov	r1, r7
 8012ed0:	dd36      	ble.n	8012f40 <__ieee754_rem_pio2+0xb0>
 8012ed2:	f7ed f9f1 	bl	80002b8 <__aeabi_dsub>
 8012ed6:	45a8      	cmp	r8, r5
 8012ed8:	4606      	mov	r6, r0
 8012eda:	460f      	mov	r7, r1
 8012edc:	d018      	beq.n	8012f10 <__ieee754_rem_pio2+0x80>
 8012ede:	a3a6      	add	r3, pc, #664	; (adr r3, 8013178 <__ieee754_rem_pio2+0x2e8>)
 8012ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ee4:	f7ed f9e8 	bl	80002b8 <__aeabi_dsub>
 8012ee8:	4602      	mov	r2, r0
 8012eea:	460b      	mov	r3, r1
 8012eec:	e9c4 2300 	strd	r2, r3, [r4]
 8012ef0:	4630      	mov	r0, r6
 8012ef2:	4639      	mov	r1, r7
 8012ef4:	f7ed f9e0 	bl	80002b8 <__aeabi_dsub>
 8012ef8:	a39f      	add	r3, pc, #636	; (adr r3, 8013178 <__ieee754_rem_pio2+0x2e8>)
 8012efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012efe:	f7ed f9db 	bl	80002b8 <__aeabi_dsub>
 8012f02:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012f06:	2501      	movs	r5, #1
 8012f08:	4628      	mov	r0, r5
 8012f0a:	b00d      	add	sp, #52	; 0x34
 8012f0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f10:	a39b      	add	r3, pc, #620	; (adr r3, 8013180 <__ieee754_rem_pio2+0x2f0>)
 8012f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f16:	f7ed f9cf 	bl	80002b8 <__aeabi_dsub>
 8012f1a:	a39b      	add	r3, pc, #620	; (adr r3, 8013188 <__ieee754_rem_pio2+0x2f8>)
 8012f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f20:	4606      	mov	r6, r0
 8012f22:	460f      	mov	r7, r1
 8012f24:	f7ed f9c8 	bl	80002b8 <__aeabi_dsub>
 8012f28:	4602      	mov	r2, r0
 8012f2a:	460b      	mov	r3, r1
 8012f2c:	e9c4 2300 	strd	r2, r3, [r4]
 8012f30:	4630      	mov	r0, r6
 8012f32:	4639      	mov	r1, r7
 8012f34:	f7ed f9c0 	bl	80002b8 <__aeabi_dsub>
 8012f38:	a393      	add	r3, pc, #588	; (adr r3, 8013188 <__ieee754_rem_pio2+0x2f8>)
 8012f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f3e:	e7de      	b.n	8012efe <__ieee754_rem_pio2+0x6e>
 8012f40:	f7ed f9bc 	bl	80002bc <__adddf3>
 8012f44:	45a8      	cmp	r8, r5
 8012f46:	4606      	mov	r6, r0
 8012f48:	460f      	mov	r7, r1
 8012f4a:	d016      	beq.n	8012f7a <__ieee754_rem_pio2+0xea>
 8012f4c:	a38a      	add	r3, pc, #552	; (adr r3, 8013178 <__ieee754_rem_pio2+0x2e8>)
 8012f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f52:	f7ed f9b3 	bl	80002bc <__adddf3>
 8012f56:	4602      	mov	r2, r0
 8012f58:	460b      	mov	r3, r1
 8012f5a:	e9c4 2300 	strd	r2, r3, [r4]
 8012f5e:	4630      	mov	r0, r6
 8012f60:	4639      	mov	r1, r7
 8012f62:	f7ed f9a9 	bl	80002b8 <__aeabi_dsub>
 8012f66:	a384      	add	r3, pc, #528	; (adr r3, 8013178 <__ieee754_rem_pio2+0x2e8>)
 8012f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f6c:	f7ed f9a6 	bl	80002bc <__adddf3>
 8012f70:	f04f 35ff 	mov.w	r5, #4294967295
 8012f74:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012f78:	e7c6      	b.n	8012f08 <__ieee754_rem_pio2+0x78>
 8012f7a:	a381      	add	r3, pc, #516	; (adr r3, 8013180 <__ieee754_rem_pio2+0x2f0>)
 8012f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f80:	f7ed f99c 	bl	80002bc <__adddf3>
 8012f84:	a380      	add	r3, pc, #512	; (adr r3, 8013188 <__ieee754_rem_pio2+0x2f8>)
 8012f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012f8a:	4606      	mov	r6, r0
 8012f8c:	460f      	mov	r7, r1
 8012f8e:	f7ed f995 	bl	80002bc <__adddf3>
 8012f92:	4602      	mov	r2, r0
 8012f94:	460b      	mov	r3, r1
 8012f96:	e9c4 2300 	strd	r2, r3, [r4]
 8012f9a:	4630      	mov	r0, r6
 8012f9c:	4639      	mov	r1, r7
 8012f9e:	f7ed f98b 	bl	80002b8 <__aeabi_dsub>
 8012fa2:	a379      	add	r3, pc, #484	; (adr r3, 8013188 <__ieee754_rem_pio2+0x2f8>)
 8012fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fa8:	e7e0      	b.n	8012f6c <__ieee754_rem_pio2+0xdc>
 8012faa:	4b82      	ldr	r3, [pc, #520]	; (80131b4 <__ieee754_rem_pio2+0x324>)
 8012fac:	4598      	cmp	r8, r3
 8012fae:	f300 80d0 	bgt.w	8013152 <__ieee754_rem_pio2+0x2c2>
 8012fb2:	f000 fe23 	bl	8013bfc <fabs>
 8012fb6:	ec57 6b10 	vmov	r6, r7, d0
 8012fba:	ee10 0a10 	vmov	r0, s0
 8012fbe:	a374      	add	r3, pc, #464	; (adr r3, 8013190 <__ieee754_rem_pio2+0x300>)
 8012fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fc4:	4639      	mov	r1, r7
 8012fc6:	f7ed fb2f 	bl	8000628 <__aeabi_dmul>
 8012fca:	2200      	movs	r2, #0
 8012fcc:	4b7a      	ldr	r3, [pc, #488]	; (80131b8 <__ieee754_rem_pio2+0x328>)
 8012fce:	f7ed f975 	bl	80002bc <__adddf3>
 8012fd2:	f7ed fdd9 	bl	8000b88 <__aeabi_d2iz>
 8012fd6:	4605      	mov	r5, r0
 8012fd8:	f7ed fabc 	bl	8000554 <__aeabi_i2d>
 8012fdc:	a364      	add	r3, pc, #400	; (adr r3, 8013170 <__ieee754_rem_pio2+0x2e0>)
 8012fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fe2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012fe6:	f7ed fb1f 	bl	8000628 <__aeabi_dmul>
 8012fea:	4602      	mov	r2, r0
 8012fec:	460b      	mov	r3, r1
 8012fee:	4630      	mov	r0, r6
 8012ff0:	4639      	mov	r1, r7
 8012ff2:	f7ed f961 	bl	80002b8 <__aeabi_dsub>
 8012ff6:	a360      	add	r3, pc, #384	; (adr r3, 8013178 <__ieee754_rem_pio2+0x2e8>)
 8012ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ffc:	4682      	mov	sl, r0
 8012ffe:	468b      	mov	fp, r1
 8013000:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013004:	f7ed fb10 	bl	8000628 <__aeabi_dmul>
 8013008:	2d1f      	cmp	r5, #31
 801300a:	4606      	mov	r6, r0
 801300c:	460f      	mov	r7, r1
 801300e:	dc0c      	bgt.n	801302a <__ieee754_rem_pio2+0x19a>
 8013010:	1e6a      	subs	r2, r5, #1
 8013012:	4b6a      	ldr	r3, [pc, #424]	; (80131bc <__ieee754_rem_pio2+0x32c>)
 8013014:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013018:	4543      	cmp	r3, r8
 801301a:	d006      	beq.n	801302a <__ieee754_rem_pio2+0x19a>
 801301c:	4632      	mov	r2, r6
 801301e:	463b      	mov	r3, r7
 8013020:	4650      	mov	r0, sl
 8013022:	4659      	mov	r1, fp
 8013024:	f7ed f948 	bl	80002b8 <__aeabi_dsub>
 8013028:	e00e      	b.n	8013048 <__ieee754_rem_pio2+0x1b8>
 801302a:	4632      	mov	r2, r6
 801302c:	463b      	mov	r3, r7
 801302e:	4650      	mov	r0, sl
 8013030:	4659      	mov	r1, fp
 8013032:	f7ed f941 	bl	80002b8 <__aeabi_dsub>
 8013036:	ea4f 5328 	mov.w	r3, r8, asr #20
 801303a:	9305      	str	r3, [sp, #20]
 801303c:	9a05      	ldr	r2, [sp, #20]
 801303e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8013042:	1ad3      	subs	r3, r2, r3
 8013044:	2b10      	cmp	r3, #16
 8013046:	dc02      	bgt.n	801304e <__ieee754_rem_pio2+0x1be>
 8013048:	e9c4 0100 	strd	r0, r1, [r4]
 801304c:	e039      	b.n	80130c2 <__ieee754_rem_pio2+0x232>
 801304e:	a34c      	add	r3, pc, #304	; (adr r3, 8013180 <__ieee754_rem_pio2+0x2f0>)
 8013050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013054:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013058:	f7ed fae6 	bl	8000628 <__aeabi_dmul>
 801305c:	4606      	mov	r6, r0
 801305e:	460f      	mov	r7, r1
 8013060:	4602      	mov	r2, r0
 8013062:	460b      	mov	r3, r1
 8013064:	4650      	mov	r0, sl
 8013066:	4659      	mov	r1, fp
 8013068:	f7ed f926 	bl	80002b8 <__aeabi_dsub>
 801306c:	4602      	mov	r2, r0
 801306e:	460b      	mov	r3, r1
 8013070:	4680      	mov	r8, r0
 8013072:	4689      	mov	r9, r1
 8013074:	4650      	mov	r0, sl
 8013076:	4659      	mov	r1, fp
 8013078:	f7ed f91e 	bl	80002b8 <__aeabi_dsub>
 801307c:	4632      	mov	r2, r6
 801307e:	463b      	mov	r3, r7
 8013080:	f7ed f91a 	bl	80002b8 <__aeabi_dsub>
 8013084:	a340      	add	r3, pc, #256	; (adr r3, 8013188 <__ieee754_rem_pio2+0x2f8>)
 8013086:	e9d3 2300 	ldrd	r2, r3, [r3]
 801308a:	4606      	mov	r6, r0
 801308c:	460f      	mov	r7, r1
 801308e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013092:	f7ed fac9 	bl	8000628 <__aeabi_dmul>
 8013096:	4632      	mov	r2, r6
 8013098:	463b      	mov	r3, r7
 801309a:	f7ed f90d 	bl	80002b8 <__aeabi_dsub>
 801309e:	4602      	mov	r2, r0
 80130a0:	460b      	mov	r3, r1
 80130a2:	4606      	mov	r6, r0
 80130a4:	460f      	mov	r7, r1
 80130a6:	4640      	mov	r0, r8
 80130a8:	4649      	mov	r1, r9
 80130aa:	f7ed f905 	bl	80002b8 <__aeabi_dsub>
 80130ae:	9a05      	ldr	r2, [sp, #20]
 80130b0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80130b4:	1ad3      	subs	r3, r2, r3
 80130b6:	2b31      	cmp	r3, #49	; 0x31
 80130b8:	dc20      	bgt.n	80130fc <__ieee754_rem_pio2+0x26c>
 80130ba:	e9c4 0100 	strd	r0, r1, [r4]
 80130be:	46c2      	mov	sl, r8
 80130c0:	46cb      	mov	fp, r9
 80130c2:	e9d4 8900 	ldrd	r8, r9, [r4]
 80130c6:	4650      	mov	r0, sl
 80130c8:	4642      	mov	r2, r8
 80130ca:	464b      	mov	r3, r9
 80130cc:	4659      	mov	r1, fp
 80130ce:	f7ed f8f3 	bl	80002b8 <__aeabi_dsub>
 80130d2:	463b      	mov	r3, r7
 80130d4:	4632      	mov	r2, r6
 80130d6:	f7ed f8ef 	bl	80002b8 <__aeabi_dsub>
 80130da:	9b04      	ldr	r3, [sp, #16]
 80130dc:	2b00      	cmp	r3, #0
 80130de:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80130e2:	f6bf af11 	bge.w	8012f08 <__ieee754_rem_pio2+0x78>
 80130e6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80130ea:	6063      	str	r3, [r4, #4]
 80130ec:	f8c4 8000 	str.w	r8, [r4]
 80130f0:	60a0      	str	r0, [r4, #8]
 80130f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80130f6:	60e3      	str	r3, [r4, #12]
 80130f8:	426d      	negs	r5, r5
 80130fa:	e705      	b.n	8012f08 <__ieee754_rem_pio2+0x78>
 80130fc:	a326      	add	r3, pc, #152	; (adr r3, 8013198 <__ieee754_rem_pio2+0x308>)
 80130fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013102:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013106:	f7ed fa8f 	bl	8000628 <__aeabi_dmul>
 801310a:	4606      	mov	r6, r0
 801310c:	460f      	mov	r7, r1
 801310e:	4602      	mov	r2, r0
 8013110:	460b      	mov	r3, r1
 8013112:	4640      	mov	r0, r8
 8013114:	4649      	mov	r1, r9
 8013116:	f7ed f8cf 	bl	80002b8 <__aeabi_dsub>
 801311a:	4602      	mov	r2, r0
 801311c:	460b      	mov	r3, r1
 801311e:	4682      	mov	sl, r0
 8013120:	468b      	mov	fp, r1
 8013122:	4640      	mov	r0, r8
 8013124:	4649      	mov	r1, r9
 8013126:	f7ed f8c7 	bl	80002b8 <__aeabi_dsub>
 801312a:	4632      	mov	r2, r6
 801312c:	463b      	mov	r3, r7
 801312e:	f7ed f8c3 	bl	80002b8 <__aeabi_dsub>
 8013132:	a31b      	add	r3, pc, #108	; (adr r3, 80131a0 <__ieee754_rem_pio2+0x310>)
 8013134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013138:	4606      	mov	r6, r0
 801313a:	460f      	mov	r7, r1
 801313c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013140:	f7ed fa72 	bl	8000628 <__aeabi_dmul>
 8013144:	4632      	mov	r2, r6
 8013146:	463b      	mov	r3, r7
 8013148:	f7ed f8b6 	bl	80002b8 <__aeabi_dsub>
 801314c:	4606      	mov	r6, r0
 801314e:	460f      	mov	r7, r1
 8013150:	e764      	b.n	801301c <__ieee754_rem_pio2+0x18c>
 8013152:	4b1b      	ldr	r3, [pc, #108]	; (80131c0 <__ieee754_rem_pio2+0x330>)
 8013154:	4598      	cmp	r8, r3
 8013156:	dd35      	ble.n	80131c4 <__ieee754_rem_pio2+0x334>
 8013158:	ee10 2a10 	vmov	r2, s0
 801315c:	463b      	mov	r3, r7
 801315e:	4630      	mov	r0, r6
 8013160:	4639      	mov	r1, r7
 8013162:	f7ed f8a9 	bl	80002b8 <__aeabi_dsub>
 8013166:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801316a:	e9c4 0100 	strd	r0, r1, [r4]
 801316e:	e6a1      	b.n	8012eb4 <__ieee754_rem_pio2+0x24>
 8013170:	54400000 	.word	0x54400000
 8013174:	3ff921fb 	.word	0x3ff921fb
 8013178:	1a626331 	.word	0x1a626331
 801317c:	3dd0b461 	.word	0x3dd0b461
 8013180:	1a600000 	.word	0x1a600000
 8013184:	3dd0b461 	.word	0x3dd0b461
 8013188:	2e037073 	.word	0x2e037073
 801318c:	3ba3198a 	.word	0x3ba3198a
 8013190:	6dc9c883 	.word	0x6dc9c883
 8013194:	3fe45f30 	.word	0x3fe45f30
 8013198:	2e000000 	.word	0x2e000000
 801319c:	3ba3198a 	.word	0x3ba3198a
 80131a0:	252049c1 	.word	0x252049c1
 80131a4:	397b839a 	.word	0x397b839a
 80131a8:	3fe921fb 	.word	0x3fe921fb
 80131ac:	4002d97b 	.word	0x4002d97b
 80131b0:	3ff921fb 	.word	0x3ff921fb
 80131b4:	413921fb 	.word	0x413921fb
 80131b8:	3fe00000 	.word	0x3fe00000
 80131bc:	08018844 	.word	0x08018844
 80131c0:	7fefffff 	.word	0x7fefffff
 80131c4:	ea4f 5528 	mov.w	r5, r8, asr #20
 80131c8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 80131cc:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80131d0:	4630      	mov	r0, r6
 80131d2:	460f      	mov	r7, r1
 80131d4:	f7ed fcd8 	bl	8000b88 <__aeabi_d2iz>
 80131d8:	f7ed f9bc 	bl	8000554 <__aeabi_i2d>
 80131dc:	4602      	mov	r2, r0
 80131de:	460b      	mov	r3, r1
 80131e0:	4630      	mov	r0, r6
 80131e2:	4639      	mov	r1, r7
 80131e4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80131e8:	f7ed f866 	bl	80002b8 <__aeabi_dsub>
 80131ec:	2200      	movs	r2, #0
 80131ee:	4b1f      	ldr	r3, [pc, #124]	; (801326c <__ieee754_rem_pio2+0x3dc>)
 80131f0:	f7ed fa1a 	bl	8000628 <__aeabi_dmul>
 80131f4:	460f      	mov	r7, r1
 80131f6:	4606      	mov	r6, r0
 80131f8:	f7ed fcc6 	bl	8000b88 <__aeabi_d2iz>
 80131fc:	f7ed f9aa 	bl	8000554 <__aeabi_i2d>
 8013200:	4602      	mov	r2, r0
 8013202:	460b      	mov	r3, r1
 8013204:	4630      	mov	r0, r6
 8013206:	4639      	mov	r1, r7
 8013208:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801320c:	f7ed f854 	bl	80002b8 <__aeabi_dsub>
 8013210:	2200      	movs	r2, #0
 8013212:	4b16      	ldr	r3, [pc, #88]	; (801326c <__ieee754_rem_pio2+0x3dc>)
 8013214:	f7ed fa08 	bl	8000628 <__aeabi_dmul>
 8013218:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801321c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8013220:	f04f 0803 	mov.w	r8, #3
 8013224:	2600      	movs	r6, #0
 8013226:	2700      	movs	r7, #0
 8013228:	4632      	mov	r2, r6
 801322a:	463b      	mov	r3, r7
 801322c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8013230:	f108 3aff 	add.w	sl, r8, #4294967295
 8013234:	f7ed fc60 	bl	8000af8 <__aeabi_dcmpeq>
 8013238:	b9b0      	cbnz	r0, 8013268 <__ieee754_rem_pio2+0x3d8>
 801323a:	4b0d      	ldr	r3, [pc, #52]	; (8013270 <__ieee754_rem_pio2+0x3e0>)
 801323c:	9301      	str	r3, [sp, #4]
 801323e:	2302      	movs	r3, #2
 8013240:	9300      	str	r3, [sp, #0]
 8013242:	462a      	mov	r2, r5
 8013244:	4643      	mov	r3, r8
 8013246:	4621      	mov	r1, r4
 8013248:	a806      	add	r0, sp, #24
 801324a:	f000 f8dd 	bl	8013408 <__kernel_rem_pio2>
 801324e:	9b04      	ldr	r3, [sp, #16]
 8013250:	2b00      	cmp	r3, #0
 8013252:	4605      	mov	r5, r0
 8013254:	f6bf ae58 	bge.w	8012f08 <__ieee754_rem_pio2+0x78>
 8013258:	6863      	ldr	r3, [r4, #4]
 801325a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801325e:	6063      	str	r3, [r4, #4]
 8013260:	68e3      	ldr	r3, [r4, #12]
 8013262:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8013266:	e746      	b.n	80130f6 <__ieee754_rem_pio2+0x266>
 8013268:	46d0      	mov	r8, sl
 801326a:	e7dd      	b.n	8013228 <__ieee754_rem_pio2+0x398>
 801326c:	41700000 	.word	0x41700000
 8013270:	080188c4 	.word	0x080188c4
 8013274:	00000000 	.word	0x00000000

08013278 <__kernel_cos>:
 8013278:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801327c:	ec59 8b10 	vmov	r8, r9, d0
 8013280:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8013284:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8013288:	ed2d 8b02 	vpush	{d8}
 801328c:	eeb0 8a41 	vmov.f32	s16, s2
 8013290:	eef0 8a61 	vmov.f32	s17, s3
 8013294:	da07      	bge.n	80132a6 <__kernel_cos+0x2e>
 8013296:	ee10 0a10 	vmov	r0, s0
 801329a:	4649      	mov	r1, r9
 801329c:	f7ed fc74 	bl	8000b88 <__aeabi_d2iz>
 80132a0:	2800      	cmp	r0, #0
 80132a2:	f000 8089 	beq.w	80133b8 <__kernel_cos+0x140>
 80132a6:	4642      	mov	r2, r8
 80132a8:	464b      	mov	r3, r9
 80132aa:	4640      	mov	r0, r8
 80132ac:	4649      	mov	r1, r9
 80132ae:	f7ed f9bb 	bl	8000628 <__aeabi_dmul>
 80132b2:	2200      	movs	r2, #0
 80132b4:	4b4e      	ldr	r3, [pc, #312]	; (80133f0 <__kernel_cos+0x178>)
 80132b6:	4604      	mov	r4, r0
 80132b8:	460d      	mov	r5, r1
 80132ba:	f7ed f9b5 	bl	8000628 <__aeabi_dmul>
 80132be:	a340      	add	r3, pc, #256	; (adr r3, 80133c0 <__kernel_cos+0x148>)
 80132c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132c4:	4682      	mov	sl, r0
 80132c6:	468b      	mov	fp, r1
 80132c8:	4620      	mov	r0, r4
 80132ca:	4629      	mov	r1, r5
 80132cc:	f7ed f9ac 	bl	8000628 <__aeabi_dmul>
 80132d0:	a33d      	add	r3, pc, #244	; (adr r3, 80133c8 <__kernel_cos+0x150>)
 80132d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132d6:	f7ec fff1 	bl	80002bc <__adddf3>
 80132da:	4622      	mov	r2, r4
 80132dc:	462b      	mov	r3, r5
 80132de:	f7ed f9a3 	bl	8000628 <__aeabi_dmul>
 80132e2:	a33b      	add	r3, pc, #236	; (adr r3, 80133d0 <__kernel_cos+0x158>)
 80132e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132e8:	f7ec ffe6 	bl	80002b8 <__aeabi_dsub>
 80132ec:	4622      	mov	r2, r4
 80132ee:	462b      	mov	r3, r5
 80132f0:	f7ed f99a 	bl	8000628 <__aeabi_dmul>
 80132f4:	a338      	add	r3, pc, #224	; (adr r3, 80133d8 <__kernel_cos+0x160>)
 80132f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132fa:	f7ec ffdf 	bl	80002bc <__adddf3>
 80132fe:	4622      	mov	r2, r4
 8013300:	462b      	mov	r3, r5
 8013302:	f7ed f991 	bl	8000628 <__aeabi_dmul>
 8013306:	a336      	add	r3, pc, #216	; (adr r3, 80133e0 <__kernel_cos+0x168>)
 8013308:	e9d3 2300 	ldrd	r2, r3, [r3]
 801330c:	f7ec ffd4 	bl	80002b8 <__aeabi_dsub>
 8013310:	4622      	mov	r2, r4
 8013312:	462b      	mov	r3, r5
 8013314:	f7ed f988 	bl	8000628 <__aeabi_dmul>
 8013318:	a333      	add	r3, pc, #204	; (adr r3, 80133e8 <__kernel_cos+0x170>)
 801331a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801331e:	f7ec ffcd 	bl	80002bc <__adddf3>
 8013322:	4622      	mov	r2, r4
 8013324:	462b      	mov	r3, r5
 8013326:	f7ed f97f 	bl	8000628 <__aeabi_dmul>
 801332a:	4622      	mov	r2, r4
 801332c:	462b      	mov	r3, r5
 801332e:	f7ed f97b 	bl	8000628 <__aeabi_dmul>
 8013332:	ec53 2b18 	vmov	r2, r3, d8
 8013336:	4604      	mov	r4, r0
 8013338:	460d      	mov	r5, r1
 801333a:	4640      	mov	r0, r8
 801333c:	4649      	mov	r1, r9
 801333e:	f7ed f973 	bl	8000628 <__aeabi_dmul>
 8013342:	460b      	mov	r3, r1
 8013344:	4602      	mov	r2, r0
 8013346:	4629      	mov	r1, r5
 8013348:	4620      	mov	r0, r4
 801334a:	f7ec ffb5 	bl	80002b8 <__aeabi_dsub>
 801334e:	4b29      	ldr	r3, [pc, #164]	; (80133f4 <__kernel_cos+0x17c>)
 8013350:	429e      	cmp	r6, r3
 8013352:	4680      	mov	r8, r0
 8013354:	4689      	mov	r9, r1
 8013356:	dc11      	bgt.n	801337c <__kernel_cos+0x104>
 8013358:	4602      	mov	r2, r0
 801335a:	460b      	mov	r3, r1
 801335c:	4650      	mov	r0, sl
 801335e:	4659      	mov	r1, fp
 8013360:	f7ec ffaa 	bl	80002b8 <__aeabi_dsub>
 8013364:	460b      	mov	r3, r1
 8013366:	4924      	ldr	r1, [pc, #144]	; (80133f8 <__kernel_cos+0x180>)
 8013368:	4602      	mov	r2, r0
 801336a:	2000      	movs	r0, #0
 801336c:	f7ec ffa4 	bl	80002b8 <__aeabi_dsub>
 8013370:	ecbd 8b02 	vpop	{d8}
 8013374:	ec41 0b10 	vmov	d0, r0, r1
 8013378:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801337c:	4b1f      	ldr	r3, [pc, #124]	; (80133fc <__kernel_cos+0x184>)
 801337e:	491e      	ldr	r1, [pc, #120]	; (80133f8 <__kernel_cos+0x180>)
 8013380:	429e      	cmp	r6, r3
 8013382:	bfcc      	ite	gt
 8013384:	4d1e      	ldrgt	r5, [pc, #120]	; (8013400 <__kernel_cos+0x188>)
 8013386:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 801338a:	2400      	movs	r4, #0
 801338c:	4622      	mov	r2, r4
 801338e:	462b      	mov	r3, r5
 8013390:	2000      	movs	r0, #0
 8013392:	f7ec ff91 	bl	80002b8 <__aeabi_dsub>
 8013396:	4622      	mov	r2, r4
 8013398:	4606      	mov	r6, r0
 801339a:	460f      	mov	r7, r1
 801339c:	462b      	mov	r3, r5
 801339e:	4650      	mov	r0, sl
 80133a0:	4659      	mov	r1, fp
 80133a2:	f7ec ff89 	bl	80002b8 <__aeabi_dsub>
 80133a6:	4642      	mov	r2, r8
 80133a8:	464b      	mov	r3, r9
 80133aa:	f7ec ff85 	bl	80002b8 <__aeabi_dsub>
 80133ae:	4602      	mov	r2, r0
 80133b0:	460b      	mov	r3, r1
 80133b2:	4630      	mov	r0, r6
 80133b4:	4639      	mov	r1, r7
 80133b6:	e7d9      	b.n	801336c <__kernel_cos+0xf4>
 80133b8:	2000      	movs	r0, #0
 80133ba:	490f      	ldr	r1, [pc, #60]	; (80133f8 <__kernel_cos+0x180>)
 80133bc:	e7d8      	b.n	8013370 <__kernel_cos+0xf8>
 80133be:	bf00      	nop
 80133c0:	be8838d4 	.word	0xbe8838d4
 80133c4:	bda8fae9 	.word	0xbda8fae9
 80133c8:	bdb4b1c4 	.word	0xbdb4b1c4
 80133cc:	3e21ee9e 	.word	0x3e21ee9e
 80133d0:	809c52ad 	.word	0x809c52ad
 80133d4:	3e927e4f 	.word	0x3e927e4f
 80133d8:	19cb1590 	.word	0x19cb1590
 80133dc:	3efa01a0 	.word	0x3efa01a0
 80133e0:	16c15177 	.word	0x16c15177
 80133e4:	3f56c16c 	.word	0x3f56c16c
 80133e8:	5555554c 	.word	0x5555554c
 80133ec:	3fa55555 	.word	0x3fa55555
 80133f0:	3fe00000 	.word	0x3fe00000
 80133f4:	3fd33332 	.word	0x3fd33332
 80133f8:	3ff00000 	.word	0x3ff00000
 80133fc:	3fe90000 	.word	0x3fe90000
 8013400:	3fd20000 	.word	0x3fd20000
 8013404:	00000000 	.word	0x00000000

08013408 <__kernel_rem_pio2>:
 8013408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801340c:	ed2d 8b02 	vpush	{d8}
 8013410:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8013414:	1ed4      	subs	r4, r2, #3
 8013416:	9308      	str	r3, [sp, #32]
 8013418:	9101      	str	r1, [sp, #4]
 801341a:	4bc5      	ldr	r3, [pc, #788]	; (8013730 <__kernel_rem_pio2+0x328>)
 801341c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 801341e:	9009      	str	r0, [sp, #36]	; 0x24
 8013420:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8013424:	9304      	str	r3, [sp, #16]
 8013426:	9b08      	ldr	r3, [sp, #32]
 8013428:	3b01      	subs	r3, #1
 801342a:	9307      	str	r3, [sp, #28]
 801342c:	2318      	movs	r3, #24
 801342e:	fb94 f4f3 	sdiv	r4, r4, r3
 8013432:	f06f 0317 	mvn.w	r3, #23
 8013436:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 801343a:	fb04 3303 	mla	r3, r4, r3, r3
 801343e:	eb03 0a02 	add.w	sl, r3, r2
 8013442:	9b04      	ldr	r3, [sp, #16]
 8013444:	9a07      	ldr	r2, [sp, #28]
 8013446:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8013720 <__kernel_rem_pio2+0x318>
 801344a:	eb03 0802 	add.w	r8, r3, r2
 801344e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8013450:	1aa7      	subs	r7, r4, r2
 8013452:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8013456:	ae22      	add	r6, sp, #136	; 0x88
 8013458:	2500      	movs	r5, #0
 801345a:	4545      	cmp	r5, r8
 801345c:	dd13      	ble.n	8013486 <__kernel_rem_pio2+0x7e>
 801345e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8013720 <__kernel_rem_pio2+0x318>
 8013462:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8013466:	2600      	movs	r6, #0
 8013468:	9b04      	ldr	r3, [sp, #16]
 801346a:	429e      	cmp	r6, r3
 801346c:	dc32      	bgt.n	80134d4 <__kernel_rem_pio2+0xcc>
 801346e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013470:	9302      	str	r3, [sp, #8]
 8013472:	9b08      	ldr	r3, [sp, #32]
 8013474:	199d      	adds	r5, r3, r6
 8013476:	ab22      	add	r3, sp, #136	; 0x88
 8013478:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801347c:	9306      	str	r3, [sp, #24]
 801347e:	ec59 8b18 	vmov	r8, r9, d8
 8013482:	2700      	movs	r7, #0
 8013484:	e01f      	b.n	80134c6 <__kernel_rem_pio2+0xbe>
 8013486:	42ef      	cmn	r7, r5
 8013488:	d407      	bmi.n	801349a <__kernel_rem_pio2+0x92>
 801348a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801348e:	f7ed f861 	bl	8000554 <__aeabi_i2d>
 8013492:	e8e6 0102 	strd	r0, r1, [r6], #8
 8013496:	3501      	adds	r5, #1
 8013498:	e7df      	b.n	801345a <__kernel_rem_pio2+0x52>
 801349a:	ec51 0b18 	vmov	r0, r1, d8
 801349e:	e7f8      	b.n	8013492 <__kernel_rem_pio2+0x8a>
 80134a0:	9906      	ldr	r1, [sp, #24]
 80134a2:	9d02      	ldr	r5, [sp, #8]
 80134a4:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 80134a8:	9106      	str	r1, [sp, #24]
 80134aa:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 80134ae:	9502      	str	r5, [sp, #8]
 80134b0:	f7ed f8ba 	bl	8000628 <__aeabi_dmul>
 80134b4:	4602      	mov	r2, r0
 80134b6:	460b      	mov	r3, r1
 80134b8:	4640      	mov	r0, r8
 80134ba:	4649      	mov	r1, r9
 80134bc:	f7ec fefe 	bl	80002bc <__adddf3>
 80134c0:	3701      	adds	r7, #1
 80134c2:	4680      	mov	r8, r0
 80134c4:	4689      	mov	r9, r1
 80134c6:	9b07      	ldr	r3, [sp, #28]
 80134c8:	429f      	cmp	r7, r3
 80134ca:	dde9      	ble.n	80134a0 <__kernel_rem_pio2+0x98>
 80134cc:	e8eb 8902 	strd	r8, r9, [fp], #8
 80134d0:	3601      	adds	r6, #1
 80134d2:	e7c9      	b.n	8013468 <__kernel_rem_pio2+0x60>
 80134d4:	9b04      	ldr	r3, [sp, #16]
 80134d6:	aa0e      	add	r2, sp, #56	; 0x38
 80134d8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80134dc:	930c      	str	r3, [sp, #48]	; 0x30
 80134de:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80134e0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80134e4:	9c04      	ldr	r4, [sp, #16]
 80134e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80134e8:	ab9a      	add	r3, sp, #616	; 0x268
 80134ea:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 80134ee:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80134f2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80134f6:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 80134fa:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 80134fe:	ab9a      	add	r3, sp, #616	; 0x268
 8013500:	445b      	add	r3, fp
 8013502:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8013506:	2500      	movs	r5, #0
 8013508:	1b63      	subs	r3, r4, r5
 801350a:	2b00      	cmp	r3, #0
 801350c:	dc78      	bgt.n	8013600 <__kernel_rem_pio2+0x1f8>
 801350e:	4650      	mov	r0, sl
 8013510:	ec49 8b10 	vmov	d0, r8, r9
 8013514:	f000 fc00 	bl	8013d18 <scalbn>
 8013518:	ec57 6b10 	vmov	r6, r7, d0
 801351c:	2200      	movs	r2, #0
 801351e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8013522:	ee10 0a10 	vmov	r0, s0
 8013526:	4639      	mov	r1, r7
 8013528:	f7ed f87e 	bl	8000628 <__aeabi_dmul>
 801352c:	ec41 0b10 	vmov	d0, r0, r1
 8013530:	f000 fb6e 	bl	8013c10 <floor>
 8013534:	2200      	movs	r2, #0
 8013536:	ec51 0b10 	vmov	r0, r1, d0
 801353a:	4b7e      	ldr	r3, [pc, #504]	; (8013734 <__kernel_rem_pio2+0x32c>)
 801353c:	f7ed f874 	bl	8000628 <__aeabi_dmul>
 8013540:	4602      	mov	r2, r0
 8013542:	460b      	mov	r3, r1
 8013544:	4630      	mov	r0, r6
 8013546:	4639      	mov	r1, r7
 8013548:	f7ec feb6 	bl	80002b8 <__aeabi_dsub>
 801354c:	460f      	mov	r7, r1
 801354e:	4606      	mov	r6, r0
 8013550:	f7ed fb1a 	bl	8000b88 <__aeabi_d2iz>
 8013554:	9006      	str	r0, [sp, #24]
 8013556:	f7ec fffd 	bl	8000554 <__aeabi_i2d>
 801355a:	4602      	mov	r2, r0
 801355c:	460b      	mov	r3, r1
 801355e:	4630      	mov	r0, r6
 8013560:	4639      	mov	r1, r7
 8013562:	f7ec fea9 	bl	80002b8 <__aeabi_dsub>
 8013566:	f1ba 0f00 	cmp.w	sl, #0
 801356a:	4606      	mov	r6, r0
 801356c:	460f      	mov	r7, r1
 801356e:	dd6c      	ble.n	801364a <__kernel_rem_pio2+0x242>
 8013570:	1e62      	subs	r2, r4, #1
 8013572:	ab0e      	add	r3, sp, #56	; 0x38
 8013574:	f1ca 0118 	rsb	r1, sl, #24
 8013578:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801357c:	9d06      	ldr	r5, [sp, #24]
 801357e:	fa40 f301 	asr.w	r3, r0, r1
 8013582:	441d      	add	r5, r3
 8013584:	408b      	lsls	r3, r1
 8013586:	1ac0      	subs	r0, r0, r3
 8013588:	ab0e      	add	r3, sp, #56	; 0x38
 801358a:	9506      	str	r5, [sp, #24]
 801358c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8013590:	f1ca 0317 	rsb	r3, sl, #23
 8013594:	fa40 f303 	asr.w	r3, r0, r3
 8013598:	9302      	str	r3, [sp, #8]
 801359a:	9b02      	ldr	r3, [sp, #8]
 801359c:	2b00      	cmp	r3, #0
 801359e:	dd62      	ble.n	8013666 <__kernel_rem_pio2+0x25e>
 80135a0:	9b06      	ldr	r3, [sp, #24]
 80135a2:	2200      	movs	r2, #0
 80135a4:	3301      	adds	r3, #1
 80135a6:	9306      	str	r3, [sp, #24]
 80135a8:	4615      	mov	r5, r2
 80135aa:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80135ae:	4294      	cmp	r4, r2
 80135b0:	f300 8095 	bgt.w	80136de <__kernel_rem_pio2+0x2d6>
 80135b4:	f1ba 0f00 	cmp.w	sl, #0
 80135b8:	dd07      	ble.n	80135ca <__kernel_rem_pio2+0x1c2>
 80135ba:	f1ba 0f01 	cmp.w	sl, #1
 80135be:	f000 80a2 	beq.w	8013706 <__kernel_rem_pio2+0x2fe>
 80135c2:	f1ba 0f02 	cmp.w	sl, #2
 80135c6:	f000 80c1 	beq.w	801374c <__kernel_rem_pio2+0x344>
 80135ca:	9b02      	ldr	r3, [sp, #8]
 80135cc:	2b02      	cmp	r3, #2
 80135ce:	d14a      	bne.n	8013666 <__kernel_rem_pio2+0x25e>
 80135d0:	4632      	mov	r2, r6
 80135d2:	463b      	mov	r3, r7
 80135d4:	2000      	movs	r0, #0
 80135d6:	4958      	ldr	r1, [pc, #352]	; (8013738 <__kernel_rem_pio2+0x330>)
 80135d8:	f7ec fe6e 	bl	80002b8 <__aeabi_dsub>
 80135dc:	4606      	mov	r6, r0
 80135de:	460f      	mov	r7, r1
 80135e0:	2d00      	cmp	r5, #0
 80135e2:	d040      	beq.n	8013666 <__kernel_rem_pio2+0x25e>
 80135e4:	4650      	mov	r0, sl
 80135e6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8013728 <__kernel_rem_pio2+0x320>
 80135ea:	f000 fb95 	bl	8013d18 <scalbn>
 80135ee:	4630      	mov	r0, r6
 80135f0:	4639      	mov	r1, r7
 80135f2:	ec53 2b10 	vmov	r2, r3, d0
 80135f6:	f7ec fe5f 	bl	80002b8 <__aeabi_dsub>
 80135fa:	4606      	mov	r6, r0
 80135fc:	460f      	mov	r7, r1
 80135fe:	e032      	b.n	8013666 <__kernel_rem_pio2+0x25e>
 8013600:	2200      	movs	r2, #0
 8013602:	4b4e      	ldr	r3, [pc, #312]	; (801373c <__kernel_rem_pio2+0x334>)
 8013604:	4640      	mov	r0, r8
 8013606:	4649      	mov	r1, r9
 8013608:	f7ed f80e 	bl	8000628 <__aeabi_dmul>
 801360c:	f7ed fabc 	bl	8000b88 <__aeabi_d2iz>
 8013610:	f7ec ffa0 	bl	8000554 <__aeabi_i2d>
 8013614:	2200      	movs	r2, #0
 8013616:	4b4a      	ldr	r3, [pc, #296]	; (8013740 <__kernel_rem_pio2+0x338>)
 8013618:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801361c:	f7ed f804 	bl	8000628 <__aeabi_dmul>
 8013620:	4602      	mov	r2, r0
 8013622:	460b      	mov	r3, r1
 8013624:	4640      	mov	r0, r8
 8013626:	4649      	mov	r1, r9
 8013628:	f7ec fe46 	bl	80002b8 <__aeabi_dsub>
 801362c:	f7ed faac 	bl	8000b88 <__aeabi_d2iz>
 8013630:	ab0e      	add	r3, sp, #56	; 0x38
 8013632:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8013636:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 801363a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801363e:	f7ec fe3d 	bl	80002bc <__adddf3>
 8013642:	3501      	adds	r5, #1
 8013644:	4680      	mov	r8, r0
 8013646:	4689      	mov	r9, r1
 8013648:	e75e      	b.n	8013508 <__kernel_rem_pio2+0x100>
 801364a:	d105      	bne.n	8013658 <__kernel_rem_pio2+0x250>
 801364c:	1e63      	subs	r3, r4, #1
 801364e:	aa0e      	add	r2, sp, #56	; 0x38
 8013650:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8013654:	15c3      	asrs	r3, r0, #23
 8013656:	e79f      	b.n	8013598 <__kernel_rem_pio2+0x190>
 8013658:	2200      	movs	r2, #0
 801365a:	4b3a      	ldr	r3, [pc, #232]	; (8013744 <__kernel_rem_pio2+0x33c>)
 801365c:	f7ed fa6a 	bl	8000b34 <__aeabi_dcmpge>
 8013660:	2800      	cmp	r0, #0
 8013662:	d139      	bne.n	80136d8 <__kernel_rem_pio2+0x2d0>
 8013664:	9002      	str	r0, [sp, #8]
 8013666:	2200      	movs	r2, #0
 8013668:	2300      	movs	r3, #0
 801366a:	4630      	mov	r0, r6
 801366c:	4639      	mov	r1, r7
 801366e:	f7ed fa43 	bl	8000af8 <__aeabi_dcmpeq>
 8013672:	2800      	cmp	r0, #0
 8013674:	f000 80c7 	beq.w	8013806 <__kernel_rem_pio2+0x3fe>
 8013678:	1e65      	subs	r5, r4, #1
 801367a:	462b      	mov	r3, r5
 801367c:	2200      	movs	r2, #0
 801367e:	9904      	ldr	r1, [sp, #16]
 8013680:	428b      	cmp	r3, r1
 8013682:	da6a      	bge.n	801375a <__kernel_rem_pio2+0x352>
 8013684:	2a00      	cmp	r2, #0
 8013686:	f000 8088 	beq.w	801379a <__kernel_rem_pio2+0x392>
 801368a:	ab0e      	add	r3, sp, #56	; 0x38
 801368c:	f1aa 0a18 	sub.w	sl, sl, #24
 8013690:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8013694:	2b00      	cmp	r3, #0
 8013696:	f000 80b4 	beq.w	8013802 <__kernel_rem_pio2+0x3fa>
 801369a:	4650      	mov	r0, sl
 801369c:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8013728 <__kernel_rem_pio2+0x320>
 80136a0:	f000 fb3a 	bl	8013d18 <scalbn>
 80136a4:	00ec      	lsls	r4, r5, #3
 80136a6:	ab72      	add	r3, sp, #456	; 0x1c8
 80136a8:	191e      	adds	r6, r3, r4
 80136aa:	ec59 8b10 	vmov	r8, r9, d0
 80136ae:	f106 0a08 	add.w	sl, r6, #8
 80136b2:	462f      	mov	r7, r5
 80136b4:	2f00      	cmp	r7, #0
 80136b6:	f280 80df 	bge.w	8013878 <__kernel_rem_pio2+0x470>
 80136ba:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8013720 <__kernel_rem_pio2+0x318>
 80136be:	f04f 0a00 	mov.w	sl, #0
 80136c2:	eba5 030a 	sub.w	r3, r5, sl
 80136c6:	2b00      	cmp	r3, #0
 80136c8:	f2c0 810a 	blt.w	80138e0 <__kernel_rem_pio2+0x4d8>
 80136cc:	f8df b078 	ldr.w	fp, [pc, #120]	; 8013748 <__kernel_rem_pio2+0x340>
 80136d0:	ec59 8b18 	vmov	r8, r9, d8
 80136d4:	2700      	movs	r7, #0
 80136d6:	e0f5      	b.n	80138c4 <__kernel_rem_pio2+0x4bc>
 80136d8:	2302      	movs	r3, #2
 80136da:	9302      	str	r3, [sp, #8]
 80136dc:	e760      	b.n	80135a0 <__kernel_rem_pio2+0x198>
 80136de:	ab0e      	add	r3, sp, #56	; 0x38
 80136e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80136e4:	b94d      	cbnz	r5, 80136fa <__kernel_rem_pio2+0x2f2>
 80136e6:	b12b      	cbz	r3, 80136f4 <__kernel_rem_pio2+0x2ec>
 80136e8:	a80e      	add	r0, sp, #56	; 0x38
 80136ea:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80136ee:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80136f2:	2301      	movs	r3, #1
 80136f4:	3201      	adds	r2, #1
 80136f6:	461d      	mov	r5, r3
 80136f8:	e759      	b.n	80135ae <__kernel_rem_pio2+0x1a6>
 80136fa:	a80e      	add	r0, sp, #56	; 0x38
 80136fc:	1acb      	subs	r3, r1, r3
 80136fe:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8013702:	462b      	mov	r3, r5
 8013704:	e7f6      	b.n	80136f4 <__kernel_rem_pio2+0x2ec>
 8013706:	1e62      	subs	r2, r4, #1
 8013708:	ab0e      	add	r3, sp, #56	; 0x38
 801370a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801370e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8013712:	a90e      	add	r1, sp, #56	; 0x38
 8013714:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8013718:	e757      	b.n	80135ca <__kernel_rem_pio2+0x1c2>
 801371a:	bf00      	nop
 801371c:	f3af 8000 	nop.w
	...
 801372c:	3ff00000 	.word	0x3ff00000
 8013730:	08018a10 	.word	0x08018a10
 8013734:	40200000 	.word	0x40200000
 8013738:	3ff00000 	.word	0x3ff00000
 801373c:	3e700000 	.word	0x3e700000
 8013740:	41700000 	.word	0x41700000
 8013744:	3fe00000 	.word	0x3fe00000
 8013748:	080189d0 	.word	0x080189d0
 801374c:	1e62      	subs	r2, r4, #1
 801374e:	ab0e      	add	r3, sp, #56	; 0x38
 8013750:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013754:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8013758:	e7db      	b.n	8013712 <__kernel_rem_pio2+0x30a>
 801375a:	a90e      	add	r1, sp, #56	; 0x38
 801375c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8013760:	3b01      	subs	r3, #1
 8013762:	430a      	orrs	r2, r1
 8013764:	e78b      	b.n	801367e <__kernel_rem_pio2+0x276>
 8013766:	3301      	adds	r3, #1
 8013768:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801376c:	2900      	cmp	r1, #0
 801376e:	d0fa      	beq.n	8013766 <__kernel_rem_pio2+0x35e>
 8013770:	9a08      	ldr	r2, [sp, #32]
 8013772:	4422      	add	r2, r4
 8013774:	00d2      	lsls	r2, r2, #3
 8013776:	a922      	add	r1, sp, #136	; 0x88
 8013778:	18e3      	adds	r3, r4, r3
 801377a:	9206      	str	r2, [sp, #24]
 801377c:	440a      	add	r2, r1
 801377e:	9302      	str	r3, [sp, #8]
 8013780:	f10b 0108 	add.w	r1, fp, #8
 8013784:	f102 0308 	add.w	r3, r2, #8
 8013788:	1c66      	adds	r6, r4, #1
 801378a:	910a      	str	r1, [sp, #40]	; 0x28
 801378c:	2500      	movs	r5, #0
 801378e:	930d      	str	r3, [sp, #52]	; 0x34
 8013790:	9b02      	ldr	r3, [sp, #8]
 8013792:	42b3      	cmp	r3, r6
 8013794:	da04      	bge.n	80137a0 <__kernel_rem_pio2+0x398>
 8013796:	461c      	mov	r4, r3
 8013798:	e6a6      	b.n	80134e8 <__kernel_rem_pio2+0xe0>
 801379a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801379c:	2301      	movs	r3, #1
 801379e:	e7e3      	b.n	8013768 <__kernel_rem_pio2+0x360>
 80137a0:	9b06      	ldr	r3, [sp, #24]
 80137a2:	18ef      	adds	r7, r5, r3
 80137a4:	ab22      	add	r3, sp, #136	; 0x88
 80137a6:	441f      	add	r7, r3
 80137a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80137aa:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80137ae:	f7ec fed1 	bl	8000554 <__aeabi_i2d>
 80137b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80137b4:	461c      	mov	r4, r3
 80137b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80137b8:	e9c7 0100 	strd	r0, r1, [r7]
 80137bc:	eb03 0b05 	add.w	fp, r3, r5
 80137c0:	2700      	movs	r7, #0
 80137c2:	f04f 0800 	mov.w	r8, #0
 80137c6:	f04f 0900 	mov.w	r9, #0
 80137ca:	9b07      	ldr	r3, [sp, #28]
 80137cc:	429f      	cmp	r7, r3
 80137ce:	dd08      	ble.n	80137e2 <__kernel_rem_pio2+0x3da>
 80137d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80137d2:	aa72      	add	r2, sp, #456	; 0x1c8
 80137d4:	18eb      	adds	r3, r5, r3
 80137d6:	4413      	add	r3, r2
 80137d8:	e9c3 8902 	strd	r8, r9, [r3, #8]
 80137dc:	3601      	adds	r6, #1
 80137de:	3508      	adds	r5, #8
 80137e0:	e7d6      	b.n	8013790 <__kernel_rem_pio2+0x388>
 80137e2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80137e6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80137ea:	f7ec ff1d 	bl	8000628 <__aeabi_dmul>
 80137ee:	4602      	mov	r2, r0
 80137f0:	460b      	mov	r3, r1
 80137f2:	4640      	mov	r0, r8
 80137f4:	4649      	mov	r1, r9
 80137f6:	f7ec fd61 	bl	80002bc <__adddf3>
 80137fa:	3701      	adds	r7, #1
 80137fc:	4680      	mov	r8, r0
 80137fe:	4689      	mov	r9, r1
 8013800:	e7e3      	b.n	80137ca <__kernel_rem_pio2+0x3c2>
 8013802:	3d01      	subs	r5, #1
 8013804:	e741      	b.n	801368a <__kernel_rem_pio2+0x282>
 8013806:	f1ca 0000 	rsb	r0, sl, #0
 801380a:	ec47 6b10 	vmov	d0, r6, r7
 801380e:	f000 fa83 	bl	8013d18 <scalbn>
 8013812:	ec57 6b10 	vmov	r6, r7, d0
 8013816:	2200      	movs	r2, #0
 8013818:	4b99      	ldr	r3, [pc, #612]	; (8013a80 <__kernel_rem_pio2+0x678>)
 801381a:	ee10 0a10 	vmov	r0, s0
 801381e:	4639      	mov	r1, r7
 8013820:	f7ed f988 	bl	8000b34 <__aeabi_dcmpge>
 8013824:	b1f8      	cbz	r0, 8013866 <__kernel_rem_pio2+0x45e>
 8013826:	2200      	movs	r2, #0
 8013828:	4b96      	ldr	r3, [pc, #600]	; (8013a84 <__kernel_rem_pio2+0x67c>)
 801382a:	4630      	mov	r0, r6
 801382c:	4639      	mov	r1, r7
 801382e:	f7ec fefb 	bl	8000628 <__aeabi_dmul>
 8013832:	f7ed f9a9 	bl	8000b88 <__aeabi_d2iz>
 8013836:	4680      	mov	r8, r0
 8013838:	f7ec fe8c 	bl	8000554 <__aeabi_i2d>
 801383c:	2200      	movs	r2, #0
 801383e:	4b90      	ldr	r3, [pc, #576]	; (8013a80 <__kernel_rem_pio2+0x678>)
 8013840:	f7ec fef2 	bl	8000628 <__aeabi_dmul>
 8013844:	460b      	mov	r3, r1
 8013846:	4602      	mov	r2, r0
 8013848:	4639      	mov	r1, r7
 801384a:	4630      	mov	r0, r6
 801384c:	f7ec fd34 	bl	80002b8 <__aeabi_dsub>
 8013850:	f7ed f99a 	bl	8000b88 <__aeabi_d2iz>
 8013854:	1c65      	adds	r5, r4, #1
 8013856:	ab0e      	add	r3, sp, #56	; 0x38
 8013858:	f10a 0a18 	add.w	sl, sl, #24
 801385c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8013860:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8013864:	e719      	b.n	801369a <__kernel_rem_pio2+0x292>
 8013866:	4630      	mov	r0, r6
 8013868:	4639      	mov	r1, r7
 801386a:	f7ed f98d 	bl	8000b88 <__aeabi_d2iz>
 801386e:	ab0e      	add	r3, sp, #56	; 0x38
 8013870:	4625      	mov	r5, r4
 8013872:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8013876:	e710      	b.n	801369a <__kernel_rem_pio2+0x292>
 8013878:	ab0e      	add	r3, sp, #56	; 0x38
 801387a:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 801387e:	f7ec fe69 	bl	8000554 <__aeabi_i2d>
 8013882:	4642      	mov	r2, r8
 8013884:	464b      	mov	r3, r9
 8013886:	f7ec fecf 	bl	8000628 <__aeabi_dmul>
 801388a:	2200      	movs	r2, #0
 801388c:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8013890:	4b7c      	ldr	r3, [pc, #496]	; (8013a84 <__kernel_rem_pio2+0x67c>)
 8013892:	4640      	mov	r0, r8
 8013894:	4649      	mov	r1, r9
 8013896:	f7ec fec7 	bl	8000628 <__aeabi_dmul>
 801389a:	3f01      	subs	r7, #1
 801389c:	4680      	mov	r8, r0
 801389e:	4689      	mov	r9, r1
 80138a0:	e708      	b.n	80136b4 <__kernel_rem_pio2+0x2ac>
 80138a2:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 80138a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138aa:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 80138ae:	f7ec febb 	bl	8000628 <__aeabi_dmul>
 80138b2:	4602      	mov	r2, r0
 80138b4:	460b      	mov	r3, r1
 80138b6:	4640      	mov	r0, r8
 80138b8:	4649      	mov	r1, r9
 80138ba:	f7ec fcff 	bl	80002bc <__adddf3>
 80138be:	3701      	adds	r7, #1
 80138c0:	4680      	mov	r8, r0
 80138c2:	4689      	mov	r9, r1
 80138c4:	9b04      	ldr	r3, [sp, #16]
 80138c6:	429f      	cmp	r7, r3
 80138c8:	dc01      	bgt.n	80138ce <__kernel_rem_pio2+0x4c6>
 80138ca:	45ba      	cmp	sl, r7
 80138cc:	dae9      	bge.n	80138a2 <__kernel_rem_pio2+0x49a>
 80138ce:	ab4a      	add	r3, sp, #296	; 0x128
 80138d0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80138d4:	e9c3 8900 	strd	r8, r9, [r3]
 80138d8:	f10a 0a01 	add.w	sl, sl, #1
 80138dc:	3e08      	subs	r6, #8
 80138de:	e6f0      	b.n	80136c2 <__kernel_rem_pio2+0x2ba>
 80138e0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80138e2:	2b03      	cmp	r3, #3
 80138e4:	d85b      	bhi.n	801399e <__kernel_rem_pio2+0x596>
 80138e6:	e8df f003 	tbb	[pc, r3]
 80138ea:	264a      	.short	0x264a
 80138ec:	0226      	.short	0x0226
 80138ee:	ab9a      	add	r3, sp, #616	; 0x268
 80138f0:	441c      	add	r4, r3
 80138f2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80138f6:	46a2      	mov	sl, r4
 80138f8:	46ab      	mov	fp, r5
 80138fa:	f1bb 0f00 	cmp.w	fp, #0
 80138fe:	dc6c      	bgt.n	80139da <__kernel_rem_pio2+0x5d2>
 8013900:	46a2      	mov	sl, r4
 8013902:	46ab      	mov	fp, r5
 8013904:	f1bb 0f01 	cmp.w	fp, #1
 8013908:	f300 8086 	bgt.w	8013a18 <__kernel_rem_pio2+0x610>
 801390c:	2000      	movs	r0, #0
 801390e:	2100      	movs	r1, #0
 8013910:	2d01      	cmp	r5, #1
 8013912:	f300 80a0 	bgt.w	8013a56 <__kernel_rem_pio2+0x64e>
 8013916:	9b02      	ldr	r3, [sp, #8]
 8013918:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 801391c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8013920:	2b00      	cmp	r3, #0
 8013922:	f040 809e 	bne.w	8013a62 <__kernel_rem_pio2+0x65a>
 8013926:	9b01      	ldr	r3, [sp, #4]
 8013928:	e9c3 7800 	strd	r7, r8, [r3]
 801392c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8013930:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8013934:	e033      	b.n	801399e <__kernel_rem_pio2+0x596>
 8013936:	3408      	adds	r4, #8
 8013938:	ab4a      	add	r3, sp, #296	; 0x128
 801393a:	441c      	add	r4, r3
 801393c:	462e      	mov	r6, r5
 801393e:	2000      	movs	r0, #0
 8013940:	2100      	movs	r1, #0
 8013942:	2e00      	cmp	r6, #0
 8013944:	da3a      	bge.n	80139bc <__kernel_rem_pio2+0x5b4>
 8013946:	9b02      	ldr	r3, [sp, #8]
 8013948:	2b00      	cmp	r3, #0
 801394a:	d03d      	beq.n	80139c8 <__kernel_rem_pio2+0x5c0>
 801394c:	4602      	mov	r2, r0
 801394e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013952:	9c01      	ldr	r4, [sp, #4]
 8013954:	e9c4 2300 	strd	r2, r3, [r4]
 8013958:	4602      	mov	r2, r0
 801395a:	460b      	mov	r3, r1
 801395c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8013960:	f7ec fcaa 	bl	80002b8 <__aeabi_dsub>
 8013964:	ae4c      	add	r6, sp, #304	; 0x130
 8013966:	2401      	movs	r4, #1
 8013968:	42a5      	cmp	r5, r4
 801396a:	da30      	bge.n	80139ce <__kernel_rem_pio2+0x5c6>
 801396c:	9b02      	ldr	r3, [sp, #8]
 801396e:	b113      	cbz	r3, 8013976 <__kernel_rem_pio2+0x56e>
 8013970:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013974:	4619      	mov	r1, r3
 8013976:	9b01      	ldr	r3, [sp, #4]
 8013978:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801397c:	e00f      	b.n	801399e <__kernel_rem_pio2+0x596>
 801397e:	ab9a      	add	r3, sp, #616	; 0x268
 8013980:	441c      	add	r4, r3
 8013982:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8013986:	2000      	movs	r0, #0
 8013988:	2100      	movs	r1, #0
 801398a:	2d00      	cmp	r5, #0
 801398c:	da10      	bge.n	80139b0 <__kernel_rem_pio2+0x5a8>
 801398e:	9b02      	ldr	r3, [sp, #8]
 8013990:	b113      	cbz	r3, 8013998 <__kernel_rem_pio2+0x590>
 8013992:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013996:	4619      	mov	r1, r3
 8013998:	9b01      	ldr	r3, [sp, #4]
 801399a:	e9c3 0100 	strd	r0, r1, [r3]
 801399e:	9b06      	ldr	r3, [sp, #24]
 80139a0:	f003 0007 	and.w	r0, r3, #7
 80139a4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80139a8:	ecbd 8b02 	vpop	{d8}
 80139ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80139b0:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80139b4:	f7ec fc82 	bl	80002bc <__adddf3>
 80139b8:	3d01      	subs	r5, #1
 80139ba:	e7e6      	b.n	801398a <__kernel_rem_pio2+0x582>
 80139bc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80139c0:	f7ec fc7c 	bl	80002bc <__adddf3>
 80139c4:	3e01      	subs	r6, #1
 80139c6:	e7bc      	b.n	8013942 <__kernel_rem_pio2+0x53a>
 80139c8:	4602      	mov	r2, r0
 80139ca:	460b      	mov	r3, r1
 80139cc:	e7c1      	b.n	8013952 <__kernel_rem_pio2+0x54a>
 80139ce:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80139d2:	f7ec fc73 	bl	80002bc <__adddf3>
 80139d6:	3401      	adds	r4, #1
 80139d8:	e7c6      	b.n	8013968 <__kernel_rem_pio2+0x560>
 80139da:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 80139de:	ed3a 7b02 	vldmdb	sl!, {d7}
 80139e2:	4640      	mov	r0, r8
 80139e4:	ec53 2b17 	vmov	r2, r3, d7
 80139e8:	4649      	mov	r1, r9
 80139ea:	ed8d 7b04 	vstr	d7, [sp, #16]
 80139ee:	f7ec fc65 	bl	80002bc <__adddf3>
 80139f2:	4602      	mov	r2, r0
 80139f4:	460b      	mov	r3, r1
 80139f6:	4606      	mov	r6, r0
 80139f8:	460f      	mov	r7, r1
 80139fa:	4640      	mov	r0, r8
 80139fc:	4649      	mov	r1, r9
 80139fe:	f7ec fc5b 	bl	80002b8 <__aeabi_dsub>
 8013a02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013a06:	f7ec fc59 	bl	80002bc <__adddf3>
 8013a0a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013a0e:	e9ca 0100 	strd	r0, r1, [sl]
 8013a12:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8013a16:	e770      	b.n	80138fa <__kernel_rem_pio2+0x4f2>
 8013a18:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8013a1c:	ed3a 7b02 	vldmdb	sl!, {d7}
 8013a20:	4630      	mov	r0, r6
 8013a22:	ec53 2b17 	vmov	r2, r3, d7
 8013a26:	4639      	mov	r1, r7
 8013a28:	ed8d 7b04 	vstr	d7, [sp, #16]
 8013a2c:	f7ec fc46 	bl	80002bc <__adddf3>
 8013a30:	4602      	mov	r2, r0
 8013a32:	460b      	mov	r3, r1
 8013a34:	4680      	mov	r8, r0
 8013a36:	4689      	mov	r9, r1
 8013a38:	4630      	mov	r0, r6
 8013a3a:	4639      	mov	r1, r7
 8013a3c:	f7ec fc3c 	bl	80002b8 <__aeabi_dsub>
 8013a40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8013a44:	f7ec fc3a 	bl	80002bc <__adddf3>
 8013a48:	f10b 3bff 	add.w	fp, fp, #4294967295
 8013a4c:	e9ca 0100 	strd	r0, r1, [sl]
 8013a50:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8013a54:	e756      	b.n	8013904 <__kernel_rem_pio2+0x4fc>
 8013a56:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8013a5a:	f7ec fc2f 	bl	80002bc <__adddf3>
 8013a5e:	3d01      	subs	r5, #1
 8013a60:	e756      	b.n	8013910 <__kernel_rem_pio2+0x508>
 8013a62:	9b01      	ldr	r3, [sp, #4]
 8013a64:	9a01      	ldr	r2, [sp, #4]
 8013a66:	601f      	str	r7, [r3, #0]
 8013a68:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8013a6c:	605c      	str	r4, [r3, #4]
 8013a6e:	609d      	str	r5, [r3, #8]
 8013a70:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8013a74:	60d3      	str	r3, [r2, #12]
 8013a76:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013a7a:	6110      	str	r0, [r2, #16]
 8013a7c:	6153      	str	r3, [r2, #20]
 8013a7e:	e78e      	b.n	801399e <__kernel_rem_pio2+0x596>
 8013a80:	41700000 	.word	0x41700000
 8013a84:	3e700000 	.word	0x3e700000

08013a88 <__kernel_sin>:
 8013a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013a8c:	ec55 4b10 	vmov	r4, r5, d0
 8013a90:	b085      	sub	sp, #20
 8013a92:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8013a96:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8013a9a:	ed8d 1b00 	vstr	d1, [sp]
 8013a9e:	9002      	str	r0, [sp, #8]
 8013aa0:	da06      	bge.n	8013ab0 <__kernel_sin+0x28>
 8013aa2:	ee10 0a10 	vmov	r0, s0
 8013aa6:	4629      	mov	r1, r5
 8013aa8:	f7ed f86e 	bl	8000b88 <__aeabi_d2iz>
 8013aac:	2800      	cmp	r0, #0
 8013aae:	d051      	beq.n	8013b54 <__kernel_sin+0xcc>
 8013ab0:	4622      	mov	r2, r4
 8013ab2:	462b      	mov	r3, r5
 8013ab4:	4620      	mov	r0, r4
 8013ab6:	4629      	mov	r1, r5
 8013ab8:	f7ec fdb6 	bl	8000628 <__aeabi_dmul>
 8013abc:	4682      	mov	sl, r0
 8013abe:	468b      	mov	fp, r1
 8013ac0:	4602      	mov	r2, r0
 8013ac2:	460b      	mov	r3, r1
 8013ac4:	4620      	mov	r0, r4
 8013ac6:	4629      	mov	r1, r5
 8013ac8:	f7ec fdae 	bl	8000628 <__aeabi_dmul>
 8013acc:	a341      	add	r3, pc, #260	; (adr r3, 8013bd4 <__kernel_sin+0x14c>)
 8013ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ad2:	4680      	mov	r8, r0
 8013ad4:	4689      	mov	r9, r1
 8013ad6:	4650      	mov	r0, sl
 8013ad8:	4659      	mov	r1, fp
 8013ada:	f7ec fda5 	bl	8000628 <__aeabi_dmul>
 8013ade:	a33f      	add	r3, pc, #252	; (adr r3, 8013bdc <__kernel_sin+0x154>)
 8013ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ae4:	f7ec fbe8 	bl	80002b8 <__aeabi_dsub>
 8013ae8:	4652      	mov	r2, sl
 8013aea:	465b      	mov	r3, fp
 8013aec:	f7ec fd9c 	bl	8000628 <__aeabi_dmul>
 8013af0:	a33c      	add	r3, pc, #240	; (adr r3, 8013be4 <__kernel_sin+0x15c>)
 8013af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013af6:	f7ec fbe1 	bl	80002bc <__adddf3>
 8013afa:	4652      	mov	r2, sl
 8013afc:	465b      	mov	r3, fp
 8013afe:	f7ec fd93 	bl	8000628 <__aeabi_dmul>
 8013b02:	a33a      	add	r3, pc, #232	; (adr r3, 8013bec <__kernel_sin+0x164>)
 8013b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b08:	f7ec fbd6 	bl	80002b8 <__aeabi_dsub>
 8013b0c:	4652      	mov	r2, sl
 8013b0e:	465b      	mov	r3, fp
 8013b10:	f7ec fd8a 	bl	8000628 <__aeabi_dmul>
 8013b14:	a337      	add	r3, pc, #220	; (adr r3, 8013bf4 <__kernel_sin+0x16c>)
 8013b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b1a:	f7ec fbcf 	bl	80002bc <__adddf3>
 8013b1e:	9b02      	ldr	r3, [sp, #8]
 8013b20:	4606      	mov	r6, r0
 8013b22:	460f      	mov	r7, r1
 8013b24:	b9db      	cbnz	r3, 8013b5e <__kernel_sin+0xd6>
 8013b26:	4602      	mov	r2, r0
 8013b28:	460b      	mov	r3, r1
 8013b2a:	4650      	mov	r0, sl
 8013b2c:	4659      	mov	r1, fp
 8013b2e:	f7ec fd7b 	bl	8000628 <__aeabi_dmul>
 8013b32:	a325      	add	r3, pc, #148	; (adr r3, 8013bc8 <__kernel_sin+0x140>)
 8013b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b38:	f7ec fbbe 	bl	80002b8 <__aeabi_dsub>
 8013b3c:	4642      	mov	r2, r8
 8013b3e:	464b      	mov	r3, r9
 8013b40:	f7ec fd72 	bl	8000628 <__aeabi_dmul>
 8013b44:	4602      	mov	r2, r0
 8013b46:	460b      	mov	r3, r1
 8013b48:	4620      	mov	r0, r4
 8013b4a:	4629      	mov	r1, r5
 8013b4c:	f7ec fbb6 	bl	80002bc <__adddf3>
 8013b50:	4604      	mov	r4, r0
 8013b52:	460d      	mov	r5, r1
 8013b54:	ec45 4b10 	vmov	d0, r4, r5
 8013b58:	b005      	add	sp, #20
 8013b5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b5e:	2200      	movs	r2, #0
 8013b60:	4b1b      	ldr	r3, [pc, #108]	; (8013bd0 <__kernel_sin+0x148>)
 8013b62:	e9dd 0100 	ldrd	r0, r1, [sp]
 8013b66:	f7ec fd5f 	bl	8000628 <__aeabi_dmul>
 8013b6a:	4632      	mov	r2, r6
 8013b6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013b70:	463b      	mov	r3, r7
 8013b72:	4640      	mov	r0, r8
 8013b74:	4649      	mov	r1, r9
 8013b76:	f7ec fd57 	bl	8000628 <__aeabi_dmul>
 8013b7a:	4602      	mov	r2, r0
 8013b7c:	460b      	mov	r3, r1
 8013b7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013b82:	f7ec fb99 	bl	80002b8 <__aeabi_dsub>
 8013b86:	4652      	mov	r2, sl
 8013b88:	465b      	mov	r3, fp
 8013b8a:	f7ec fd4d 	bl	8000628 <__aeabi_dmul>
 8013b8e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013b92:	f7ec fb91 	bl	80002b8 <__aeabi_dsub>
 8013b96:	a30c      	add	r3, pc, #48	; (adr r3, 8013bc8 <__kernel_sin+0x140>)
 8013b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013b9c:	4606      	mov	r6, r0
 8013b9e:	460f      	mov	r7, r1
 8013ba0:	4640      	mov	r0, r8
 8013ba2:	4649      	mov	r1, r9
 8013ba4:	f7ec fd40 	bl	8000628 <__aeabi_dmul>
 8013ba8:	4602      	mov	r2, r0
 8013baa:	460b      	mov	r3, r1
 8013bac:	4630      	mov	r0, r6
 8013bae:	4639      	mov	r1, r7
 8013bb0:	f7ec fb84 	bl	80002bc <__adddf3>
 8013bb4:	4602      	mov	r2, r0
 8013bb6:	460b      	mov	r3, r1
 8013bb8:	4620      	mov	r0, r4
 8013bba:	4629      	mov	r1, r5
 8013bbc:	f7ec fb7c 	bl	80002b8 <__aeabi_dsub>
 8013bc0:	e7c6      	b.n	8013b50 <__kernel_sin+0xc8>
 8013bc2:	bf00      	nop
 8013bc4:	f3af 8000 	nop.w
 8013bc8:	55555549 	.word	0x55555549
 8013bcc:	3fc55555 	.word	0x3fc55555
 8013bd0:	3fe00000 	.word	0x3fe00000
 8013bd4:	5acfd57c 	.word	0x5acfd57c
 8013bd8:	3de5d93a 	.word	0x3de5d93a
 8013bdc:	8a2b9ceb 	.word	0x8a2b9ceb
 8013be0:	3e5ae5e6 	.word	0x3e5ae5e6
 8013be4:	57b1fe7d 	.word	0x57b1fe7d
 8013be8:	3ec71de3 	.word	0x3ec71de3
 8013bec:	19c161d5 	.word	0x19c161d5
 8013bf0:	3f2a01a0 	.word	0x3f2a01a0
 8013bf4:	1110f8a6 	.word	0x1110f8a6
 8013bf8:	3f811111 	.word	0x3f811111

08013bfc <fabs>:
 8013bfc:	ec51 0b10 	vmov	r0, r1, d0
 8013c00:	ee10 2a10 	vmov	r2, s0
 8013c04:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8013c08:	ec43 2b10 	vmov	d0, r2, r3
 8013c0c:	4770      	bx	lr
	...

08013c10 <floor>:
 8013c10:	ec51 0b10 	vmov	r0, r1, d0
 8013c14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c18:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8013c1c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8013c20:	2e13      	cmp	r6, #19
 8013c22:	460c      	mov	r4, r1
 8013c24:	ee10 5a10 	vmov	r5, s0
 8013c28:	4680      	mov	r8, r0
 8013c2a:	dc34      	bgt.n	8013c96 <floor+0x86>
 8013c2c:	2e00      	cmp	r6, #0
 8013c2e:	da16      	bge.n	8013c5e <floor+0x4e>
 8013c30:	a335      	add	r3, pc, #212	; (adr r3, 8013d08 <floor+0xf8>)
 8013c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c36:	f7ec fb41 	bl	80002bc <__adddf3>
 8013c3a:	2200      	movs	r2, #0
 8013c3c:	2300      	movs	r3, #0
 8013c3e:	f7ec ff83 	bl	8000b48 <__aeabi_dcmpgt>
 8013c42:	b148      	cbz	r0, 8013c58 <floor+0x48>
 8013c44:	2c00      	cmp	r4, #0
 8013c46:	da59      	bge.n	8013cfc <floor+0xec>
 8013c48:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8013c4c:	4a30      	ldr	r2, [pc, #192]	; (8013d10 <floor+0x100>)
 8013c4e:	432b      	orrs	r3, r5
 8013c50:	2500      	movs	r5, #0
 8013c52:	42ab      	cmp	r3, r5
 8013c54:	bf18      	it	ne
 8013c56:	4614      	movne	r4, r2
 8013c58:	4621      	mov	r1, r4
 8013c5a:	4628      	mov	r0, r5
 8013c5c:	e025      	b.n	8013caa <floor+0x9a>
 8013c5e:	4f2d      	ldr	r7, [pc, #180]	; (8013d14 <floor+0x104>)
 8013c60:	4137      	asrs	r7, r6
 8013c62:	ea01 0307 	and.w	r3, r1, r7
 8013c66:	4303      	orrs	r3, r0
 8013c68:	d01f      	beq.n	8013caa <floor+0x9a>
 8013c6a:	a327      	add	r3, pc, #156	; (adr r3, 8013d08 <floor+0xf8>)
 8013c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c70:	f7ec fb24 	bl	80002bc <__adddf3>
 8013c74:	2200      	movs	r2, #0
 8013c76:	2300      	movs	r3, #0
 8013c78:	f7ec ff66 	bl	8000b48 <__aeabi_dcmpgt>
 8013c7c:	2800      	cmp	r0, #0
 8013c7e:	d0eb      	beq.n	8013c58 <floor+0x48>
 8013c80:	2c00      	cmp	r4, #0
 8013c82:	bfbe      	ittt	lt
 8013c84:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8013c88:	fa43 f606 	asrlt.w	r6, r3, r6
 8013c8c:	19a4      	addlt	r4, r4, r6
 8013c8e:	ea24 0407 	bic.w	r4, r4, r7
 8013c92:	2500      	movs	r5, #0
 8013c94:	e7e0      	b.n	8013c58 <floor+0x48>
 8013c96:	2e33      	cmp	r6, #51	; 0x33
 8013c98:	dd0b      	ble.n	8013cb2 <floor+0xa2>
 8013c9a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8013c9e:	d104      	bne.n	8013caa <floor+0x9a>
 8013ca0:	ee10 2a10 	vmov	r2, s0
 8013ca4:	460b      	mov	r3, r1
 8013ca6:	f7ec fb09 	bl	80002bc <__adddf3>
 8013caa:	ec41 0b10 	vmov	d0, r0, r1
 8013cae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013cb2:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8013cb6:	f04f 33ff 	mov.w	r3, #4294967295
 8013cba:	fa23 f707 	lsr.w	r7, r3, r7
 8013cbe:	4207      	tst	r7, r0
 8013cc0:	d0f3      	beq.n	8013caa <floor+0x9a>
 8013cc2:	a311      	add	r3, pc, #68	; (adr r3, 8013d08 <floor+0xf8>)
 8013cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013cc8:	f7ec faf8 	bl	80002bc <__adddf3>
 8013ccc:	2200      	movs	r2, #0
 8013cce:	2300      	movs	r3, #0
 8013cd0:	f7ec ff3a 	bl	8000b48 <__aeabi_dcmpgt>
 8013cd4:	2800      	cmp	r0, #0
 8013cd6:	d0bf      	beq.n	8013c58 <floor+0x48>
 8013cd8:	2c00      	cmp	r4, #0
 8013cda:	da02      	bge.n	8013ce2 <floor+0xd2>
 8013cdc:	2e14      	cmp	r6, #20
 8013cde:	d103      	bne.n	8013ce8 <floor+0xd8>
 8013ce0:	3401      	adds	r4, #1
 8013ce2:	ea25 0507 	bic.w	r5, r5, r7
 8013ce6:	e7b7      	b.n	8013c58 <floor+0x48>
 8013ce8:	2301      	movs	r3, #1
 8013cea:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8013cee:	fa03 f606 	lsl.w	r6, r3, r6
 8013cf2:	4435      	add	r5, r6
 8013cf4:	4545      	cmp	r5, r8
 8013cf6:	bf38      	it	cc
 8013cf8:	18e4      	addcc	r4, r4, r3
 8013cfa:	e7f2      	b.n	8013ce2 <floor+0xd2>
 8013cfc:	2500      	movs	r5, #0
 8013cfe:	462c      	mov	r4, r5
 8013d00:	e7aa      	b.n	8013c58 <floor+0x48>
 8013d02:	bf00      	nop
 8013d04:	f3af 8000 	nop.w
 8013d08:	8800759c 	.word	0x8800759c
 8013d0c:	7e37e43c 	.word	0x7e37e43c
 8013d10:	bff00000 	.word	0xbff00000
 8013d14:	000fffff 	.word	0x000fffff

08013d18 <scalbn>:
 8013d18:	b570      	push	{r4, r5, r6, lr}
 8013d1a:	ec55 4b10 	vmov	r4, r5, d0
 8013d1e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8013d22:	4606      	mov	r6, r0
 8013d24:	462b      	mov	r3, r5
 8013d26:	b9aa      	cbnz	r2, 8013d54 <scalbn+0x3c>
 8013d28:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8013d2c:	4323      	orrs	r3, r4
 8013d2e:	d03b      	beq.n	8013da8 <scalbn+0x90>
 8013d30:	4b31      	ldr	r3, [pc, #196]	; (8013df8 <scalbn+0xe0>)
 8013d32:	4629      	mov	r1, r5
 8013d34:	2200      	movs	r2, #0
 8013d36:	ee10 0a10 	vmov	r0, s0
 8013d3a:	f7ec fc75 	bl	8000628 <__aeabi_dmul>
 8013d3e:	4b2f      	ldr	r3, [pc, #188]	; (8013dfc <scalbn+0xe4>)
 8013d40:	429e      	cmp	r6, r3
 8013d42:	4604      	mov	r4, r0
 8013d44:	460d      	mov	r5, r1
 8013d46:	da12      	bge.n	8013d6e <scalbn+0x56>
 8013d48:	a327      	add	r3, pc, #156	; (adr r3, 8013de8 <scalbn+0xd0>)
 8013d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d4e:	f7ec fc6b 	bl	8000628 <__aeabi_dmul>
 8013d52:	e009      	b.n	8013d68 <scalbn+0x50>
 8013d54:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8013d58:	428a      	cmp	r2, r1
 8013d5a:	d10c      	bne.n	8013d76 <scalbn+0x5e>
 8013d5c:	ee10 2a10 	vmov	r2, s0
 8013d60:	4620      	mov	r0, r4
 8013d62:	4629      	mov	r1, r5
 8013d64:	f7ec faaa 	bl	80002bc <__adddf3>
 8013d68:	4604      	mov	r4, r0
 8013d6a:	460d      	mov	r5, r1
 8013d6c:	e01c      	b.n	8013da8 <scalbn+0x90>
 8013d6e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8013d72:	460b      	mov	r3, r1
 8013d74:	3a36      	subs	r2, #54	; 0x36
 8013d76:	4432      	add	r2, r6
 8013d78:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8013d7c:	428a      	cmp	r2, r1
 8013d7e:	dd0b      	ble.n	8013d98 <scalbn+0x80>
 8013d80:	ec45 4b11 	vmov	d1, r4, r5
 8013d84:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8013df0 <scalbn+0xd8>
 8013d88:	f000 f83c 	bl	8013e04 <copysign>
 8013d8c:	a318      	add	r3, pc, #96	; (adr r3, 8013df0 <scalbn+0xd8>)
 8013d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013d92:	ec51 0b10 	vmov	r0, r1, d0
 8013d96:	e7da      	b.n	8013d4e <scalbn+0x36>
 8013d98:	2a00      	cmp	r2, #0
 8013d9a:	dd08      	ble.n	8013dae <scalbn+0x96>
 8013d9c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013da0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013da4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013da8:	ec45 4b10 	vmov	d0, r4, r5
 8013dac:	bd70      	pop	{r4, r5, r6, pc}
 8013dae:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8013db2:	da0d      	bge.n	8013dd0 <scalbn+0xb8>
 8013db4:	f24c 3350 	movw	r3, #50000	; 0xc350
 8013db8:	429e      	cmp	r6, r3
 8013dba:	ec45 4b11 	vmov	d1, r4, r5
 8013dbe:	dce1      	bgt.n	8013d84 <scalbn+0x6c>
 8013dc0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8013de8 <scalbn+0xd0>
 8013dc4:	f000 f81e 	bl	8013e04 <copysign>
 8013dc8:	a307      	add	r3, pc, #28	; (adr r3, 8013de8 <scalbn+0xd0>)
 8013dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013dce:	e7e0      	b.n	8013d92 <scalbn+0x7a>
 8013dd0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013dd4:	3236      	adds	r2, #54	; 0x36
 8013dd6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013dda:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013dde:	4620      	mov	r0, r4
 8013de0:	4629      	mov	r1, r5
 8013de2:	2200      	movs	r2, #0
 8013de4:	4b06      	ldr	r3, [pc, #24]	; (8013e00 <scalbn+0xe8>)
 8013de6:	e7b2      	b.n	8013d4e <scalbn+0x36>
 8013de8:	c2f8f359 	.word	0xc2f8f359
 8013dec:	01a56e1f 	.word	0x01a56e1f
 8013df0:	8800759c 	.word	0x8800759c
 8013df4:	7e37e43c 	.word	0x7e37e43c
 8013df8:	43500000 	.word	0x43500000
 8013dfc:	ffff3cb0 	.word	0xffff3cb0
 8013e00:	3c900000 	.word	0x3c900000

08013e04 <copysign>:
 8013e04:	ec51 0b10 	vmov	r0, r1, d0
 8013e08:	ee11 0a90 	vmov	r0, s3
 8013e0c:	ee10 2a10 	vmov	r2, s0
 8013e10:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8013e14:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8013e18:	ea41 0300 	orr.w	r3, r1, r0
 8013e1c:	ec43 2b10 	vmov	d0, r2, r3
 8013e20:	4770      	bx	lr
	...

08013e24 <__errno>:
 8013e24:	4b01      	ldr	r3, [pc, #4]	; (8013e2c <__errno+0x8>)
 8013e26:	6818      	ldr	r0, [r3, #0]
 8013e28:	4770      	bx	lr
 8013e2a:	bf00      	nop
 8013e2c:	2000000c 	.word	0x2000000c

08013e30 <__libc_init_array>:
 8013e30:	b570      	push	{r4, r5, r6, lr}
 8013e32:	4e0d      	ldr	r6, [pc, #52]	; (8013e68 <__libc_init_array+0x38>)
 8013e34:	4c0d      	ldr	r4, [pc, #52]	; (8013e6c <__libc_init_array+0x3c>)
 8013e36:	1ba4      	subs	r4, r4, r6
 8013e38:	10a4      	asrs	r4, r4, #2
 8013e3a:	2500      	movs	r5, #0
 8013e3c:	42a5      	cmp	r5, r4
 8013e3e:	d109      	bne.n	8013e54 <__libc_init_array+0x24>
 8013e40:	4e0b      	ldr	r6, [pc, #44]	; (8013e70 <__libc_init_array+0x40>)
 8013e42:	4c0c      	ldr	r4, [pc, #48]	; (8013e74 <__libc_init_array+0x44>)
 8013e44:	f004 f9e8 	bl	8018218 <_init>
 8013e48:	1ba4      	subs	r4, r4, r6
 8013e4a:	10a4      	asrs	r4, r4, #2
 8013e4c:	2500      	movs	r5, #0
 8013e4e:	42a5      	cmp	r5, r4
 8013e50:	d105      	bne.n	8013e5e <__libc_init_array+0x2e>
 8013e52:	bd70      	pop	{r4, r5, r6, pc}
 8013e54:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8013e58:	4798      	blx	r3
 8013e5a:	3501      	adds	r5, #1
 8013e5c:	e7ee      	b.n	8013e3c <__libc_init_array+0xc>
 8013e5e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8013e62:	4798      	blx	r3
 8013e64:	3501      	adds	r5, #1
 8013e66:	e7f2      	b.n	8013e4e <__libc_init_array+0x1e>
 8013e68:	08018d5c 	.word	0x08018d5c
 8013e6c:	08018d5c 	.word	0x08018d5c
 8013e70:	08018d5c 	.word	0x08018d5c
 8013e74:	08018d64 	.word	0x08018d64

08013e78 <memcpy>:
 8013e78:	b510      	push	{r4, lr}
 8013e7a:	1e43      	subs	r3, r0, #1
 8013e7c:	440a      	add	r2, r1
 8013e7e:	4291      	cmp	r1, r2
 8013e80:	d100      	bne.n	8013e84 <memcpy+0xc>
 8013e82:	bd10      	pop	{r4, pc}
 8013e84:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013e88:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013e8c:	e7f7      	b.n	8013e7e <memcpy+0x6>

08013e8e <memset>:
 8013e8e:	4402      	add	r2, r0
 8013e90:	4603      	mov	r3, r0
 8013e92:	4293      	cmp	r3, r2
 8013e94:	d100      	bne.n	8013e98 <memset+0xa>
 8013e96:	4770      	bx	lr
 8013e98:	f803 1b01 	strb.w	r1, [r3], #1
 8013e9c:	e7f9      	b.n	8013e92 <memset+0x4>

08013e9e <__cvt>:
 8013e9e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013ea2:	ec55 4b10 	vmov	r4, r5, d0
 8013ea6:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8013ea8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8013eac:	2d00      	cmp	r5, #0
 8013eae:	460e      	mov	r6, r1
 8013eb0:	4691      	mov	r9, r2
 8013eb2:	4619      	mov	r1, r3
 8013eb4:	bfb8      	it	lt
 8013eb6:	4622      	movlt	r2, r4
 8013eb8:	462b      	mov	r3, r5
 8013eba:	f027 0720 	bic.w	r7, r7, #32
 8013ebe:	bfbb      	ittet	lt
 8013ec0:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8013ec4:	461d      	movlt	r5, r3
 8013ec6:	2300      	movge	r3, #0
 8013ec8:	232d      	movlt	r3, #45	; 0x2d
 8013eca:	bfb8      	it	lt
 8013ecc:	4614      	movlt	r4, r2
 8013ece:	2f46      	cmp	r7, #70	; 0x46
 8013ed0:	700b      	strb	r3, [r1, #0]
 8013ed2:	d004      	beq.n	8013ede <__cvt+0x40>
 8013ed4:	2f45      	cmp	r7, #69	; 0x45
 8013ed6:	d100      	bne.n	8013eda <__cvt+0x3c>
 8013ed8:	3601      	adds	r6, #1
 8013eda:	2102      	movs	r1, #2
 8013edc:	e000      	b.n	8013ee0 <__cvt+0x42>
 8013ede:	2103      	movs	r1, #3
 8013ee0:	ab03      	add	r3, sp, #12
 8013ee2:	9301      	str	r3, [sp, #4]
 8013ee4:	ab02      	add	r3, sp, #8
 8013ee6:	9300      	str	r3, [sp, #0]
 8013ee8:	4632      	mov	r2, r6
 8013eea:	4653      	mov	r3, sl
 8013eec:	ec45 4b10 	vmov	d0, r4, r5
 8013ef0:	f001 fdfe 	bl	8015af0 <_dtoa_r>
 8013ef4:	2f47      	cmp	r7, #71	; 0x47
 8013ef6:	4680      	mov	r8, r0
 8013ef8:	d102      	bne.n	8013f00 <__cvt+0x62>
 8013efa:	f019 0f01 	tst.w	r9, #1
 8013efe:	d026      	beq.n	8013f4e <__cvt+0xb0>
 8013f00:	2f46      	cmp	r7, #70	; 0x46
 8013f02:	eb08 0906 	add.w	r9, r8, r6
 8013f06:	d111      	bne.n	8013f2c <__cvt+0x8e>
 8013f08:	f898 3000 	ldrb.w	r3, [r8]
 8013f0c:	2b30      	cmp	r3, #48	; 0x30
 8013f0e:	d10a      	bne.n	8013f26 <__cvt+0x88>
 8013f10:	2200      	movs	r2, #0
 8013f12:	2300      	movs	r3, #0
 8013f14:	4620      	mov	r0, r4
 8013f16:	4629      	mov	r1, r5
 8013f18:	f7ec fdee 	bl	8000af8 <__aeabi_dcmpeq>
 8013f1c:	b918      	cbnz	r0, 8013f26 <__cvt+0x88>
 8013f1e:	f1c6 0601 	rsb	r6, r6, #1
 8013f22:	f8ca 6000 	str.w	r6, [sl]
 8013f26:	f8da 3000 	ldr.w	r3, [sl]
 8013f2a:	4499      	add	r9, r3
 8013f2c:	2200      	movs	r2, #0
 8013f2e:	2300      	movs	r3, #0
 8013f30:	4620      	mov	r0, r4
 8013f32:	4629      	mov	r1, r5
 8013f34:	f7ec fde0 	bl	8000af8 <__aeabi_dcmpeq>
 8013f38:	b938      	cbnz	r0, 8013f4a <__cvt+0xac>
 8013f3a:	2230      	movs	r2, #48	; 0x30
 8013f3c:	9b03      	ldr	r3, [sp, #12]
 8013f3e:	454b      	cmp	r3, r9
 8013f40:	d205      	bcs.n	8013f4e <__cvt+0xb0>
 8013f42:	1c59      	adds	r1, r3, #1
 8013f44:	9103      	str	r1, [sp, #12]
 8013f46:	701a      	strb	r2, [r3, #0]
 8013f48:	e7f8      	b.n	8013f3c <__cvt+0x9e>
 8013f4a:	f8cd 900c 	str.w	r9, [sp, #12]
 8013f4e:	9b03      	ldr	r3, [sp, #12]
 8013f50:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013f52:	eba3 0308 	sub.w	r3, r3, r8
 8013f56:	4640      	mov	r0, r8
 8013f58:	6013      	str	r3, [r2, #0]
 8013f5a:	b004      	add	sp, #16
 8013f5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08013f60 <__exponent>:
 8013f60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8013f62:	2900      	cmp	r1, #0
 8013f64:	4604      	mov	r4, r0
 8013f66:	bfba      	itte	lt
 8013f68:	4249      	neglt	r1, r1
 8013f6a:	232d      	movlt	r3, #45	; 0x2d
 8013f6c:	232b      	movge	r3, #43	; 0x2b
 8013f6e:	2909      	cmp	r1, #9
 8013f70:	f804 2b02 	strb.w	r2, [r4], #2
 8013f74:	7043      	strb	r3, [r0, #1]
 8013f76:	dd20      	ble.n	8013fba <__exponent+0x5a>
 8013f78:	f10d 0307 	add.w	r3, sp, #7
 8013f7c:	461f      	mov	r7, r3
 8013f7e:	260a      	movs	r6, #10
 8013f80:	fb91 f5f6 	sdiv	r5, r1, r6
 8013f84:	fb06 1115 	mls	r1, r6, r5, r1
 8013f88:	3130      	adds	r1, #48	; 0x30
 8013f8a:	2d09      	cmp	r5, #9
 8013f8c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8013f90:	f103 32ff 	add.w	r2, r3, #4294967295
 8013f94:	4629      	mov	r1, r5
 8013f96:	dc09      	bgt.n	8013fac <__exponent+0x4c>
 8013f98:	3130      	adds	r1, #48	; 0x30
 8013f9a:	3b02      	subs	r3, #2
 8013f9c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8013fa0:	42bb      	cmp	r3, r7
 8013fa2:	4622      	mov	r2, r4
 8013fa4:	d304      	bcc.n	8013fb0 <__exponent+0x50>
 8013fa6:	1a10      	subs	r0, r2, r0
 8013fa8:	b003      	add	sp, #12
 8013faa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013fac:	4613      	mov	r3, r2
 8013fae:	e7e7      	b.n	8013f80 <__exponent+0x20>
 8013fb0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013fb4:	f804 2b01 	strb.w	r2, [r4], #1
 8013fb8:	e7f2      	b.n	8013fa0 <__exponent+0x40>
 8013fba:	2330      	movs	r3, #48	; 0x30
 8013fbc:	4419      	add	r1, r3
 8013fbe:	7083      	strb	r3, [r0, #2]
 8013fc0:	1d02      	adds	r2, r0, #4
 8013fc2:	70c1      	strb	r1, [r0, #3]
 8013fc4:	e7ef      	b.n	8013fa6 <__exponent+0x46>
	...

08013fc8 <_printf_float>:
 8013fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013fcc:	b08d      	sub	sp, #52	; 0x34
 8013fce:	460c      	mov	r4, r1
 8013fd0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8013fd4:	4616      	mov	r6, r2
 8013fd6:	461f      	mov	r7, r3
 8013fd8:	4605      	mov	r5, r0
 8013fda:	f002 fe7b 	bl	8016cd4 <_localeconv_r>
 8013fde:	6803      	ldr	r3, [r0, #0]
 8013fe0:	9304      	str	r3, [sp, #16]
 8013fe2:	4618      	mov	r0, r3
 8013fe4:	f7ec f90c 	bl	8000200 <strlen>
 8013fe8:	2300      	movs	r3, #0
 8013fea:	930a      	str	r3, [sp, #40]	; 0x28
 8013fec:	f8d8 3000 	ldr.w	r3, [r8]
 8013ff0:	9005      	str	r0, [sp, #20]
 8013ff2:	3307      	adds	r3, #7
 8013ff4:	f023 0307 	bic.w	r3, r3, #7
 8013ff8:	f103 0208 	add.w	r2, r3, #8
 8013ffc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8014000:	f8d4 b000 	ldr.w	fp, [r4]
 8014004:	f8c8 2000 	str.w	r2, [r8]
 8014008:	e9d3 2300 	ldrd	r2, r3, [r3]
 801400c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8014010:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8014014:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8014018:	9307      	str	r3, [sp, #28]
 801401a:	f8cd 8018 	str.w	r8, [sp, #24]
 801401e:	f04f 32ff 	mov.w	r2, #4294967295
 8014022:	4ba7      	ldr	r3, [pc, #668]	; (80142c0 <_printf_float+0x2f8>)
 8014024:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014028:	f7ec fd98 	bl	8000b5c <__aeabi_dcmpun>
 801402c:	bb70      	cbnz	r0, 801408c <_printf_float+0xc4>
 801402e:	f04f 32ff 	mov.w	r2, #4294967295
 8014032:	4ba3      	ldr	r3, [pc, #652]	; (80142c0 <_printf_float+0x2f8>)
 8014034:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014038:	f7ec fd72 	bl	8000b20 <__aeabi_dcmple>
 801403c:	bb30      	cbnz	r0, 801408c <_printf_float+0xc4>
 801403e:	2200      	movs	r2, #0
 8014040:	2300      	movs	r3, #0
 8014042:	4640      	mov	r0, r8
 8014044:	4649      	mov	r1, r9
 8014046:	f7ec fd61 	bl	8000b0c <__aeabi_dcmplt>
 801404a:	b110      	cbz	r0, 8014052 <_printf_float+0x8a>
 801404c:	232d      	movs	r3, #45	; 0x2d
 801404e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014052:	4a9c      	ldr	r2, [pc, #624]	; (80142c4 <_printf_float+0x2fc>)
 8014054:	4b9c      	ldr	r3, [pc, #624]	; (80142c8 <_printf_float+0x300>)
 8014056:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801405a:	bf8c      	ite	hi
 801405c:	4690      	movhi	r8, r2
 801405e:	4698      	movls	r8, r3
 8014060:	2303      	movs	r3, #3
 8014062:	f02b 0204 	bic.w	r2, fp, #4
 8014066:	6123      	str	r3, [r4, #16]
 8014068:	6022      	str	r2, [r4, #0]
 801406a:	f04f 0900 	mov.w	r9, #0
 801406e:	9700      	str	r7, [sp, #0]
 8014070:	4633      	mov	r3, r6
 8014072:	aa0b      	add	r2, sp, #44	; 0x2c
 8014074:	4621      	mov	r1, r4
 8014076:	4628      	mov	r0, r5
 8014078:	f000 f9e6 	bl	8014448 <_printf_common>
 801407c:	3001      	adds	r0, #1
 801407e:	f040 808d 	bne.w	801419c <_printf_float+0x1d4>
 8014082:	f04f 30ff 	mov.w	r0, #4294967295
 8014086:	b00d      	add	sp, #52	; 0x34
 8014088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801408c:	4642      	mov	r2, r8
 801408e:	464b      	mov	r3, r9
 8014090:	4640      	mov	r0, r8
 8014092:	4649      	mov	r1, r9
 8014094:	f7ec fd62 	bl	8000b5c <__aeabi_dcmpun>
 8014098:	b110      	cbz	r0, 80140a0 <_printf_float+0xd8>
 801409a:	4a8c      	ldr	r2, [pc, #560]	; (80142cc <_printf_float+0x304>)
 801409c:	4b8c      	ldr	r3, [pc, #560]	; (80142d0 <_printf_float+0x308>)
 801409e:	e7da      	b.n	8014056 <_printf_float+0x8e>
 80140a0:	6861      	ldr	r1, [r4, #4]
 80140a2:	1c4b      	adds	r3, r1, #1
 80140a4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80140a8:	a80a      	add	r0, sp, #40	; 0x28
 80140aa:	d13e      	bne.n	801412a <_printf_float+0x162>
 80140ac:	2306      	movs	r3, #6
 80140ae:	6063      	str	r3, [r4, #4]
 80140b0:	2300      	movs	r3, #0
 80140b2:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80140b6:	ab09      	add	r3, sp, #36	; 0x24
 80140b8:	9300      	str	r3, [sp, #0]
 80140ba:	ec49 8b10 	vmov	d0, r8, r9
 80140be:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80140c2:	6022      	str	r2, [r4, #0]
 80140c4:	f8cd a004 	str.w	sl, [sp, #4]
 80140c8:	6861      	ldr	r1, [r4, #4]
 80140ca:	4628      	mov	r0, r5
 80140cc:	f7ff fee7 	bl	8013e9e <__cvt>
 80140d0:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80140d4:	2b47      	cmp	r3, #71	; 0x47
 80140d6:	4680      	mov	r8, r0
 80140d8:	d109      	bne.n	80140ee <_printf_float+0x126>
 80140da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80140dc:	1cd8      	adds	r0, r3, #3
 80140de:	db02      	blt.n	80140e6 <_printf_float+0x11e>
 80140e0:	6862      	ldr	r2, [r4, #4]
 80140e2:	4293      	cmp	r3, r2
 80140e4:	dd47      	ble.n	8014176 <_printf_float+0x1ae>
 80140e6:	f1aa 0a02 	sub.w	sl, sl, #2
 80140ea:	fa5f fa8a 	uxtb.w	sl, sl
 80140ee:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80140f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80140f4:	d824      	bhi.n	8014140 <_printf_float+0x178>
 80140f6:	3901      	subs	r1, #1
 80140f8:	4652      	mov	r2, sl
 80140fa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80140fe:	9109      	str	r1, [sp, #36]	; 0x24
 8014100:	f7ff ff2e 	bl	8013f60 <__exponent>
 8014104:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014106:	1813      	adds	r3, r2, r0
 8014108:	2a01      	cmp	r2, #1
 801410a:	4681      	mov	r9, r0
 801410c:	6123      	str	r3, [r4, #16]
 801410e:	dc02      	bgt.n	8014116 <_printf_float+0x14e>
 8014110:	6822      	ldr	r2, [r4, #0]
 8014112:	07d1      	lsls	r1, r2, #31
 8014114:	d501      	bpl.n	801411a <_printf_float+0x152>
 8014116:	3301      	adds	r3, #1
 8014118:	6123      	str	r3, [r4, #16]
 801411a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801411e:	2b00      	cmp	r3, #0
 8014120:	d0a5      	beq.n	801406e <_printf_float+0xa6>
 8014122:	232d      	movs	r3, #45	; 0x2d
 8014124:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014128:	e7a1      	b.n	801406e <_printf_float+0xa6>
 801412a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 801412e:	f000 8177 	beq.w	8014420 <_printf_float+0x458>
 8014132:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8014136:	d1bb      	bne.n	80140b0 <_printf_float+0xe8>
 8014138:	2900      	cmp	r1, #0
 801413a:	d1b9      	bne.n	80140b0 <_printf_float+0xe8>
 801413c:	2301      	movs	r3, #1
 801413e:	e7b6      	b.n	80140ae <_printf_float+0xe6>
 8014140:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8014144:	d119      	bne.n	801417a <_printf_float+0x1b2>
 8014146:	2900      	cmp	r1, #0
 8014148:	6863      	ldr	r3, [r4, #4]
 801414a:	dd0c      	ble.n	8014166 <_printf_float+0x19e>
 801414c:	6121      	str	r1, [r4, #16]
 801414e:	b913      	cbnz	r3, 8014156 <_printf_float+0x18e>
 8014150:	6822      	ldr	r2, [r4, #0]
 8014152:	07d2      	lsls	r2, r2, #31
 8014154:	d502      	bpl.n	801415c <_printf_float+0x194>
 8014156:	3301      	adds	r3, #1
 8014158:	440b      	add	r3, r1
 801415a:	6123      	str	r3, [r4, #16]
 801415c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801415e:	65a3      	str	r3, [r4, #88]	; 0x58
 8014160:	f04f 0900 	mov.w	r9, #0
 8014164:	e7d9      	b.n	801411a <_printf_float+0x152>
 8014166:	b913      	cbnz	r3, 801416e <_printf_float+0x1a6>
 8014168:	6822      	ldr	r2, [r4, #0]
 801416a:	07d0      	lsls	r0, r2, #31
 801416c:	d501      	bpl.n	8014172 <_printf_float+0x1aa>
 801416e:	3302      	adds	r3, #2
 8014170:	e7f3      	b.n	801415a <_printf_float+0x192>
 8014172:	2301      	movs	r3, #1
 8014174:	e7f1      	b.n	801415a <_printf_float+0x192>
 8014176:	f04f 0a67 	mov.w	sl, #103	; 0x67
 801417a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801417e:	4293      	cmp	r3, r2
 8014180:	db05      	blt.n	801418e <_printf_float+0x1c6>
 8014182:	6822      	ldr	r2, [r4, #0]
 8014184:	6123      	str	r3, [r4, #16]
 8014186:	07d1      	lsls	r1, r2, #31
 8014188:	d5e8      	bpl.n	801415c <_printf_float+0x194>
 801418a:	3301      	adds	r3, #1
 801418c:	e7e5      	b.n	801415a <_printf_float+0x192>
 801418e:	2b00      	cmp	r3, #0
 8014190:	bfd4      	ite	le
 8014192:	f1c3 0302 	rsble	r3, r3, #2
 8014196:	2301      	movgt	r3, #1
 8014198:	4413      	add	r3, r2
 801419a:	e7de      	b.n	801415a <_printf_float+0x192>
 801419c:	6823      	ldr	r3, [r4, #0]
 801419e:	055a      	lsls	r2, r3, #21
 80141a0:	d407      	bmi.n	80141b2 <_printf_float+0x1ea>
 80141a2:	6923      	ldr	r3, [r4, #16]
 80141a4:	4642      	mov	r2, r8
 80141a6:	4631      	mov	r1, r6
 80141a8:	4628      	mov	r0, r5
 80141aa:	47b8      	blx	r7
 80141ac:	3001      	adds	r0, #1
 80141ae:	d12b      	bne.n	8014208 <_printf_float+0x240>
 80141b0:	e767      	b.n	8014082 <_printf_float+0xba>
 80141b2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80141b6:	f240 80dc 	bls.w	8014372 <_printf_float+0x3aa>
 80141ba:	2200      	movs	r2, #0
 80141bc:	2300      	movs	r3, #0
 80141be:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80141c2:	f7ec fc99 	bl	8000af8 <__aeabi_dcmpeq>
 80141c6:	2800      	cmp	r0, #0
 80141c8:	d033      	beq.n	8014232 <_printf_float+0x26a>
 80141ca:	2301      	movs	r3, #1
 80141cc:	4a41      	ldr	r2, [pc, #260]	; (80142d4 <_printf_float+0x30c>)
 80141ce:	4631      	mov	r1, r6
 80141d0:	4628      	mov	r0, r5
 80141d2:	47b8      	blx	r7
 80141d4:	3001      	adds	r0, #1
 80141d6:	f43f af54 	beq.w	8014082 <_printf_float+0xba>
 80141da:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80141de:	429a      	cmp	r2, r3
 80141e0:	db02      	blt.n	80141e8 <_printf_float+0x220>
 80141e2:	6823      	ldr	r3, [r4, #0]
 80141e4:	07d8      	lsls	r0, r3, #31
 80141e6:	d50f      	bpl.n	8014208 <_printf_float+0x240>
 80141e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80141ec:	4631      	mov	r1, r6
 80141ee:	4628      	mov	r0, r5
 80141f0:	47b8      	blx	r7
 80141f2:	3001      	adds	r0, #1
 80141f4:	f43f af45 	beq.w	8014082 <_printf_float+0xba>
 80141f8:	f04f 0800 	mov.w	r8, #0
 80141fc:	f104 091a 	add.w	r9, r4, #26
 8014200:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014202:	3b01      	subs	r3, #1
 8014204:	4543      	cmp	r3, r8
 8014206:	dc09      	bgt.n	801421c <_printf_float+0x254>
 8014208:	6823      	ldr	r3, [r4, #0]
 801420a:	079b      	lsls	r3, r3, #30
 801420c:	f100 8103 	bmi.w	8014416 <_printf_float+0x44e>
 8014210:	68e0      	ldr	r0, [r4, #12]
 8014212:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014214:	4298      	cmp	r0, r3
 8014216:	bfb8      	it	lt
 8014218:	4618      	movlt	r0, r3
 801421a:	e734      	b.n	8014086 <_printf_float+0xbe>
 801421c:	2301      	movs	r3, #1
 801421e:	464a      	mov	r2, r9
 8014220:	4631      	mov	r1, r6
 8014222:	4628      	mov	r0, r5
 8014224:	47b8      	blx	r7
 8014226:	3001      	adds	r0, #1
 8014228:	f43f af2b 	beq.w	8014082 <_printf_float+0xba>
 801422c:	f108 0801 	add.w	r8, r8, #1
 8014230:	e7e6      	b.n	8014200 <_printf_float+0x238>
 8014232:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014234:	2b00      	cmp	r3, #0
 8014236:	dc2b      	bgt.n	8014290 <_printf_float+0x2c8>
 8014238:	2301      	movs	r3, #1
 801423a:	4a26      	ldr	r2, [pc, #152]	; (80142d4 <_printf_float+0x30c>)
 801423c:	4631      	mov	r1, r6
 801423e:	4628      	mov	r0, r5
 8014240:	47b8      	blx	r7
 8014242:	3001      	adds	r0, #1
 8014244:	f43f af1d 	beq.w	8014082 <_printf_float+0xba>
 8014248:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801424a:	b923      	cbnz	r3, 8014256 <_printf_float+0x28e>
 801424c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801424e:	b913      	cbnz	r3, 8014256 <_printf_float+0x28e>
 8014250:	6823      	ldr	r3, [r4, #0]
 8014252:	07d9      	lsls	r1, r3, #31
 8014254:	d5d8      	bpl.n	8014208 <_printf_float+0x240>
 8014256:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801425a:	4631      	mov	r1, r6
 801425c:	4628      	mov	r0, r5
 801425e:	47b8      	blx	r7
 8014260:	3001      	adds	r0, #1
 8014262:	f43f af0e 	beq.w	8014082 <_printf_float+0xba>
 8014266:	f04f 0900 	mov.w	r9, #0
 801426a:	f104 0a1a 	add.w	sl, r4, #26
 801426e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014270:	425b      	negs	r3, r3
 8014272:	454b      	cmp	r3, r9
 8014274:	dc01      	bgt.n	801427a <_printf_float+0x2b2>
 8014276:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014278:	e794      	b.n	80141a4 <_printf_float+0x1dc>
 801427a:	2301      	movs	r3, #1
 801427c:	4652      	mov	r2, sl
 801427e:	4631      	mov	r1, r6
 8014280:	4628      	mov	r0, r5
 8014282:	47b8      	blx	r7
 8014284:	3001      	adds	r0, #1
 8014286:	f43f aefc 	beq.w	8014082 <_printf_float+0xba>
 801428a:	f109 0901 	add.w	r9, r9, #1
 801428e:	e7ee      	b.n	801426e <_printf_float+0x2a6>
 8014290:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014292:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8014294:	429a      	cmp	r2, r3
 8014296:	bfa8      	it	ge
 8014298:	461a      	movge	r2, r3
 801429a:	2a00      	cmp	r2, #0
 801429c:	4691      	mov	r9, r2
 801429e:	dd07      	ble.n	80142b0 <_printf_float+0x2e8>
 80142a0:	4613      	mov	r3, r2
 80142a2:	4631      	mov	r1, r6
 80142a4:	4642      	mov	r2, r8
 80142a6:	4628      	mov	r0, r5
 80142a8:	47b8      	blx	r7
 80142aa:	3001      	adds	r0, #1
 80142ac:	f43f aee9 	beq.w	8014082 <_printf_float+0xba>
 80142b0:	f104 031a 	add.w	r3, r4, #26
 80142b4:	f04f 0b00 	mov.w	fp, #0
 80142b8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80142bc:	9306      	str	r3, [sp, #24]
 80142be:	e015      	b.n	80142ec <_printf_float+0x324>
 80142c0:	7fefffff 	.word	0x7fefffff
 80142c4:	08018a24 	.word	0x08018a24
 80142c8:	08018a20 	.word	0x08018a20
 80142cc:	08018a2c 	.word	0x08018a2c
 80142d0:	08018a28 	.word	0x08018a28
 80142d4:	08018c4b 	.word	0x08018c4b
 80142d8:	2301      	movs	r3, #1
 80142da:	9a06      	ldr	r2, [sp, #24]
 80142dc:	4631      	mov	r1, r6
 80142de:	4628      	mov	r0, r5
 80142e0:	47b8      	blx	r7
 80142e2:	3001      	adds	r0, #1
 80142e4:	f43f aecd 	beq.w	8014082 <_printf_float+0xba>
 80142e8:	f10b 0b01 	add.w	fp, fp, #1
 80142ec:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80142f0:	ebaa 0309 	sub.w	r3, sl, r9
 80142f4:	455b      	cmp	r3, fp
 80142f6:	dcef      	bgt.n	80142d8 <_printf_float+0x310>
 80142f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80142fc:	429a      	cmp	r2, r3
 80142fe:	44d0      	add	r8, sl
 8014300:	db15      	blt.n	801432e <_printf_float+0x366>
 8014302:	6823      	ldr	r3, [r4, #0]
 8014304:	07da      	lsls	r2, r3, #31
 8014306:	d412      	bmi.n	801432e <_printf_float+0x366>
 8014308:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801430a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801430c:	eba3 020a 	sub.w	r2, r3, sl
 8014310:	eba3 0a01 	sub.w	sl, r3, r1
 8014314:	4592      	cmp	sl, r2
 8014316:	bfa8      	it	ge
 8014318:	4692      	movge	sl, r2
 801431a:	f1ba 0f00 	cmp.w	sl, #0
 801431e:	dc0e      	bgt.n	801433e <_printf_float+0x376>
 8014320:	f04f 0800 	mov.w	r8, #0
 8014324:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014328:	f104 091a 	add.w	r9, r4, #26
 801432c:	e019      	b.n	8014362 <_printf_float+0x39a>
 801432e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014332:	4631      	mov	r1, r6
 8014334:	4628      	mov	r0, r5
 8014336:	47b8      	blx	r7
 8014338:	3001      	adds	r0, #1
 801433a:	d1e5      	bne.n	8014308 <_printf_float+0x340>
 801433c:	e6a1      	b.n	8014082 <_printf_float+0xba>
 801433e:	4653      	mov	r3, sl
 8014340:	4642      	mov	r2, r8
 8014342:	4631      	mov	r1, r6
 8014344:	4628      	mov	r0, r5
 8014346:	47b8      	blx	r7
 8014348:	3001      	adds	r0, #1
 801434a:	d1e9      	bne.n	8014320 <_printf_float+0x358>
 801434c:	e699      	b.n	8014082 <_printf_float+0xba>
 801434e:	2301      	movs	r3, #1
 8014350:	464a      	mov	r2, r9
 8014352:	4631      	mov	r1, r6
 8014354:	4628      	mov	r0, r5
 8014356:	47b8      	blx	r7
 8014358:	3001      	adds	r0, #1
 801435a:	f43f ae92 	beq.w	8014082 <_printf_float+0xba>
 801435e:	f108 0801 	add.w	r8, r8, #1
 8014362:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8014366:	1a9b      	subs	r3, r3, r2
 8014368:	eba3 030a 	sub.w	r3, r3, sl
 801436c:	4543      	cmp	r3, r8
 801436e:	dcee      	bgt.n	801434e <_printf_float+0x386>
 8014370:	e74a      	b.n	8014208 <_printf_float+0x240>
 8014372:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014374:	2a01      	cmp	r2, #1
 8014376:	dc01      	bgt.n	801437c <_printf_float+0x3b4>
 8014378:	07db      	lsls	r3, r3, #31
 801437a:	d53a      	bpl.n	80143f2 <_printf_float+0x42a>
 801437c:	2301      	movs	r3, #1
 801437e:	4642      	mov	r2, r8
 8014380:	4631      	mov	r1, r6
 8014382:	4628      	mov	r0, r5
 8014384:	47b8      	blx	r7
 8014386:	3001      	adds	r0, #1
 8014388:	f43f ae7b 	beq.w	8014082 <_printf_float+0xba>
 801438c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014390:	4631      	mov	r1, r6
 8014392:	4628      	mov	r0, r5
 8014394:	47b8      	blx	r7
 8014396:	3001      	adds	r0, #1
 8014398:	f108 0801 	add.w	r8, r8, #1
 801439c:	f43f ae71 	beq.w	8014082 <_printf_float+0xba>
 80143a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80143a2:	2200      	movs	r2, #0
 80143a4:	f103 3aff 	add.w	sl, r3, #4294967295
 80143a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80143ac:	2300      	movs	r3, #0
 80143ae:	f7ec fba3 	bl	8000af8 <__aeabi_dcmpeq>
 80143b2:	b9c8      	cbnz	r0, 80143e8 <_printf_float+0x420>
 80143b4:	4653      	mov	r3, sl
 80143b6:	4642      	mov	r2, r8
 80143b8:	4631      	mov	r1, r6
 80143ba:	4628      	mov	r0, r5
 80143bc:	47b8      	blx	r7
 80143be:	3001      	adds	r0, #1
 80143c0:	d10e      	bne.n	80143e0 <_printf_float+0x418>
 80143c2:	e65e      	b.n	8014082 <_printf_float+0xba>
 80143c4:	2301      	movs	r3, #1
 80143c6:	4652      	mov	r2, sl
 80143c8:	4631      	mov	r1, r6
 80143ca:	4628      	mov	r0, r5
 80143cc:	47b8      	blx	r7
 80143ce:	3001      	adds	r0, #1
 80143d0:	f43f ae57 	beq.w	8014082 <_printf_float+0xba>
 80143d4:	f108 0801 	add.w	r8, r8, #1
 80143d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80143da:	3b01      	subs	r3, #1
 80143dc:	4543      	cmp	r3, r8
 80143de:	dcf1      	bgt.n	80143c4 <_printf_float+0x3fc>
 80143e0:	464b      	mov	r3, r9
 80143e2:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80143e6:	e6de      	b.n	80141a6 <_printf_float+0x1de>
 80143e8:	f04f 0800 	mov.w	r8, #0
 80143ec:	f104 0a1a 	add.w	sl, r4, #26
 80143f0:	e7f2      	b.n	80143d8 <_printf_float+0x410>
 80143f2:	2301      	movs	r3, #1
 80143f4:	e7df      	b.n	80143b6 <_printf_float+0x3ee>
 80143f6:	2301      	movs	r3, #1
 80143f8:	464a      	mov	r2, r9
 80143fa:	4631      	mov	r1, r6
 80143fc:	4628      	mov	r0, r5
 80143fe:	47b8      	blx	r7
 8014400:	3001      	adds	r0, #1
 8014402:	f43f ae3e 	beq.w	8014082 <_printf_float+0xba>
 8014406:	f108 0801 	add.w	r8, r8, #1
 801440a:	68e3      	ldr	r3, [r4, #12]
 801440c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801440e:	1a9b      	subs	r3, r3, r2
 8014410:	4543      	cmp	r3, r8
 8014412:	dcf0      	bgt.n	80143f6 <_printf_float+0x42e>
 8014414:	e6fc      	b.n	8014210 <_printf_float+0x248>
 8014416:	f04f 0800 	mov.w	r8, #0
 801441a:	f104 0919 	add.w	r9, r4, #25
 801441e:	e7f4      	b.n	801440a <_printf_float+0x442>
 8014420:	2900      	cmp	r1, #0
 8014422:	f43f ae8b 	beq.w	801413c <_printf_float+0x174>
 8014426:	2300      	movs	r3, #0
 8014428:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801442c:	ab09      	add	r3, sp, #36	; 0x24
 801442e:	9300      	str	r3, [sp, #0]
 8014430:	ec49 8b10 	vmov	d0, r8, r9
 8014434:	6022      	str	r2, [r4, #0]
 8014436:	f8cd a004 	str.w	sl, [sp, #4]
 801443a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801443e:	4628      	mov	r0, r5
 8014440:	f7ff fd2d 	bl	8013e9e <__cvt>
 8014444:	4680      	mov	r8, r0
 8014446:	e648      	b.n	80140da <_printf_float+0x112>

08014448 <_printf_common>:
 8014448:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801444c:	4691      	mov	r9, r2
 801444e:	461f      	mov	r7, r3
 8014450:	688a      	ldr	r2, [r1, #8]
 8014452:	690b      	ldr	r3, [r1, #16]
 8014454:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014458:	4293      	cmp	r3, r2
 801445a:	bfb8      	it	lt
 801445c:	4613      	movlt	r3, r2
 801445e:	f8c9 3000 	str.w	r3, [r9]
 8014462:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014466:	4606      	mov	r6, r0
 8014468:	460c      	mov	r4, r1
 801446a:	b112      	cbz	r2, 8014472 <_printf_common+0x2a>
 801446c:	3301      	adds	r3, #1
 801446e:	f8c9 3000 	str.w	r3, [r9]
 8014472:	6823      	ldr	r3, [r4, #0]
 8014474:	0699      	lsls	r1, r3, #26
 8014476:	bf42      	ittt	mi
 8014478:	f8d9 3000 	ldrmi.w	r3, [r9]
 801447c:	3302      	addmi	r3, #2
 801447e:	f8c9 3000 	strmi.w	r3, [r9]
 8014482:	6825      	ldr	r5, [r4, #0]
 8014484:	f015 0506 	ands.w	r5, r5, #6
 8014488:	d107      	bne.n	801449a <_printf_common+0x52>
 801448a:	f104 0a19 	add.w	sl, r4, #25
 801448e:	68e3      	ldr	r3, [r4, #12]
 8014490:	f8d9 2000 	ldr.w	r2, [r9]
 8014494:	1a9b      	subs	r3, r3, r2
 8014496:	42ab      	cmp	r3, r5
 8014498:	dc28      	bgt.n	80144ec <_printf_common+0xa4>
 801449a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801449e:	6822      	ldr	r2, [r4, #0]
 80144a0:	3300      	adds	r3, #0
 80144a2:	bf18      	it	ne
 80144a4:	2301      	movne	r3, #1
 80144a6:	0692      	lsls	r2, r2, #26
 80144a8:	d42d      	bmi.n	8014506 <_printf_common+0xbe>
 80144aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80144ae:	4639      	mov	r1, r7
 80144b0:	4630      	mov	r0, r6
 80144b2:	47c0      	blx	r8
 80144b4:	3001      	adds	r0, #1
 80144b6:	d020      	beq.n	80144fa <_printf_common+0xb2>
 80144b8:	6823      	ldr	r3, [r4, #0]
 80144ba:	68e5      	ldr	r5, [r4, #12]
 80144bc:	f8d9 2000 	ldr.w	r2, [r9]
 80144c0:	f003 0306 	and.w	r3, r3, #6
 80144c4:	2b04      	cmp	r3, #4
 80144c6:	bf08      	it	eq
 80144c8:	1aad      	subeq	r5, r5, r2
 80144ca:	68a3      	ldr	r3, [r4, #8]
 80144cc:	6922      	ldr	r2, [r4, #16]
 80144ce:	bf0c      	ite	eq
 80144d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80144d4:	2500      	movne	r5, #0
 80144d6:	4293      	cmp	r3, r2
 80144d8:	bfc4      	itt	gt
 80144da:	1a9b      	subgt	r3, r3, r2
 80144dc:	18ed      	addgt	r5, r5, r3
 80144de:	f04f 0900 	mov.w	r9, #0
 80144e2:	341a      	adds	r4, #26
 80144e4:	454d      	cmp	r5, r9
 80144e6:	d11a      	bne.n	801451e <_printf_common+0xd6>
 80144e8:	2000      	movs	r0, #0
 80144ea:	e008      	b.n	80144fe <_printf_common+0xb6>
 80144ec:	2301      	movs	r3, #1
 80144ee:	4652      	mov	r2, sl
 80144f0:	4639      	mov	r1, r7
 80144f2:	4630      	mov	r0, r6
 80144f4:	47c0      	blx	r8
 80144f6:	3001      	adds	r0, #1
 80144f8:	d103      	bne.n	8014502 <_printf_common+0xba>
 80144fa:	f04f 30ff 	mov.w	r0, #4294967295
 80144fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014502:	3501      	adds	r5, #1
 8014504:	e7c3      	b.n	801448e <_printf_common+0x46>
 8014506:	18e1      	adds	r1, r4, r3
 8014508:	1c5a      	adds	r2, r3, #1
 801450a:	2030      	movs	r0, #48	; 0x30
 801450c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014510:	4422      	add	r2, r4
 8014512:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014516:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801451a:	3302      	adds	r3, #2
 801451c:	e7c5      	b.n	80144aa <_printf_common+0x62>
 801451e:	2301      	movs	r3, #1
 8014520:	4622      	mov	r2, r4
 8014522:	4639      	mov	r1, r7
 8014524:	4630      	mov	r0, r6
 8014526:	47c0      	blx	r8
 8014528:	3001      	adds	r0, #1
 801452a:	d0e6      	beq.n	80144fa <_printf_common+0xb2>
 801452c:	f109 0901 	add.w	r9, r9, #1
 8014530:	e7d8      	b.n	80144e4 <_printf_common+0x9c>
	...

08014534 <_printf_i>:
 8014534:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014538:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801453c:	460c      	mov	r4, r1
 801453e:	7e09      	ldrb	r1, [r1, #24]
 8014540:	b085      	sub	sp, #20
 8014542:	296e      	cmp	r1, #110	; 0x6e
 8014544:	4617      	mov	r7, r2
 8014546:	4606      	mov	r6, r0
 8014548:	4698      	mov	r8, r3
 801454a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801454c:	f000 80b3 	beq.w	80146b6 <_printf_i+0x182>
 8014550:	d822      	bhi.n	8014598 <_printf_i+0x64>
 8014552:	2963      	cmp	r1, #99	; 0x63
 8014554:	d036      	beq.n	80145c4 <_printf_i+0x90>
 8014556:	d80a      	bhi.n	801456e <_printf_i+0x3a>
 8014558:	2900      	cmp	r1, #0
 801455a:	f000 80b9 	beq.w	80146d0 <_printf_i+0x19c>
 801455e:	2958      	cmp	r1, #88	; 0x58
 8014560:	f000 8083 	beq.w	801466a <_printf_i+0x136>
 8014564:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014568:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801456c:	e032      	b.n	80145d4 <_printf_i+0xa0>
 801456e:	2964      	cmp	r1, #100	; 0x64
 8014570:	d001      	beq.n	8014576 <_printf_i+0x42>
 8014572:	2969      	cmp	r1, #105	; 0x69
 8014574:	d1f6      	bne.n	8014564 <_printf_i+0x30>
 8014576:	6820      	ldr	r0, [r4, #0]
 8014578:	6813      	ldr	r3, [r2, #0]
 801457a:	0605      	lsls	r5, r0, #24
 801457c:	f103 0104 	add.w	r1, r3, #4
 8014580:	d52a      	bpl.n	80145d8 <_printf_i+0xa4>
 8014582:	681b      	ldr	r3, [r3, #0]
 8014584:	6011      	str	r1, [r2, #0]
 8014586:	2b00      	cmp	r3, #0
 8014588:	da03      	bge.n	8014592 <_printf_i+0x5e>
 801458a:	222d      	movs	r2, #45	; 0x2d
 801458c:	425b      	negs	r3, r3
 801458e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8014592:	486f      	ldr	r0, [pc, #444]	; (8014750 <_printf_i+0x21c>)
 8014594:	220a      	movs	r2, #10
 8014596:	e039      	b.n	801460c <_printf_i+0xd8>
 8014598:	2973      	cmp	r1, #115	; 0x73
 801459a:	f000 809d 	beq.w	80146d8 <_printf_i+0x1a4>
 801459e:	d808      	bhi.n	80145b2 <_printf_i+0x7e>
 80145a0:	296f      	cmp	r1, #111	; 0x6f
 80145a2:	d020      	beq.n	80145e6 <_printf_i+0xb2>
 80145a4:	2970      	cmp	r1, #112	; 0x70
 80145a6:	d1dd      	bne.n	8014564 <_printf_i+0x30>
 80145a8:	6823      	ldr	r3, [r4, #0]
 80145aa:	f043 0320 	orr.w	r3, r3, #32
 80145ae:	6023      	str	r3, [r4, #0]
 80145b0:	e003      	b.n	80145ba <_printf_i+0x86>
 80145b2:	2975      	cmp	r1, #117	; 0x75
 80145b4:	d017      	beq.n	80145e6 <_printf_i+0xb2>
 80145b6:	2978      	cmp	r1, #120	; 0x78
 80145b8:	d1d4      	bne.n	8014564 <_printf_i+0x30>
 80145ba:	2378      	movs	r3, #120	; 0x78
 80145bc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80145c0:	4864      	ldr	r0, [pc, #400]	; (8014754 <_printf_i+0x220>)
 80145c2:	e055      	b.n	8014670 <_printf_i+0x13c>
 80145c4:	6813      	ldr	r3, [r2, #0]
 80145c6:	1d19      	adds	r1, r3, #4
 80145c8:	681b      	ldr	r3, [r3, #0]
 80145ca:	6011      	str	r1, [r2, #0]
 80145cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80145d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80145d4:	2301      	movs	r3, #1
 80145d6:	e08c      	b.n	80146f2 <_printf_i+0x1be>
 80145d8:	681b      	ldr	r3, [r3, #0]
 80145da:	6011      	str	r1, [r2, #0]
 80145dc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80145e0:	bf18      	it	ne
 80145e2:	b21b      	sxthne	r3, r3
 80145e4:	e7cf      	b.n	8014586 <_printf_i+0x52>
 80145e6:	6813      	ldr	r3, [r2, #0]
 80145e8:	6825      	ldr	r5, [r4, #0]
 80145ea:	1d18      	adds	r0, r3, #4
 80145ec:	6010      	str	r0, [r2, #0]
 80145ee:	0628      	lsls	r0, r5, #24
 80145f0:	d501      	bpl.n	80145f6 <_printf_i+0xc2>
 80145f2:	681b      	ldr	r3, [r3, #0]
 80145f4:	e002      	b.n	80145fc <_printf_i+0xc8>
 80145f6:	0668      	lsls	r0, r5, #25
 80145f8:	d5fb      	bpl.n	80145f2 <_printf_i+0xbe>
 80145fa:	881b      	ldrh	r3, [r3, #0]
 80145fc:	4854      	ldr	r0, [pc, #336]	; (8014750 <_printf_i+0x21c>)
 80145fe:	296f      	cmp	r1, #111	; 0x6f
 8014600:	bf14      	ite	ne
 8014602:	220a      	movne	r2, #10
 8014604:	2208      	moveq	r2, #8
 8014606:	2100      	movs	r1, #0
 8014608:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801460c:	6865      	ldr	r5, [r4, #4]
 801460e:	60a5      	str	r5, [r4, #8]
 8014610:	2d00      	cmp	r5, #0
 8014612:	f2c0 8095 	blt.w	8014740 <_printf_i+0x20c>
 8014616:	6821      	ldr	r1, [r4, #0]
 8014618:	f021 0104 	bic.w	r1, r1, #4
 801461c:	6021      	str	r1, [r4, #0]
 801461e:	2b00      	cmp	r3, #0
 8014620:	d13d      	bne.n	801469e <_printf_i+0x16a>
 8014622:	2d00      	cmp	r5, #0
 8014624:	f040 808e 	bne.w	8014744 <_printf_i+0x210>
 8014628:	4665      	mov	r5, ip
 801462a:	2a08      	cmp	r2, #8
 801462c:	d10b      	bne.n	8014646 <_printf_i+0x112>
 801462e:	6823      	ldr	r3, [r4, #0]
 8014630:	07db      	lsls	r3, r3, #31
 8014632:	d508      	bpl.n	8014646 <_printf_i+0x112>
 8014634:	6923      	ldr	r3, [r4, #16]
 8014636:	6862      	ldr	r2, [r4, #4]
 8014638:	429a      	cmp	r2, r3
 801463a:	bfde      	ittt	le
 801463c:	2330      	movle	r3, #48	; 0x30
 801463e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014642:	f105 35ff 	addle.w	r5, r5, #4294967295
 8014646:	ebac 0305 	sub.w	r3, ip, r5
 801464a:	6123      	str	r3, [r4, #16]
 801464c:	f8cd 8000 	str.w	r8, [sp]
 8014650:	463b      	mov	r3, r7
 8014652:	aa03      	add	r2, sp, #12
 8014654:	4621      	mov	r1, r4
 8014656:	4630      	mov	r0, r6
 8014658:	f7ff fef6 	bl	8014448 <_printf_common>
 801465c:	3001      	adds	r0, #1
 801465e:	d14d      	bne.n	80146fc <_printf_i+0x1c8>
 8014660:	f04f 30ff 	mov.w	r0, #4294967295
 8014664:	b005      	add	sp, #20
 8014666:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801466a:	4839      	ldr	r0, [pc, #228]	; (8014750 <_printf_i+0x21c>)
 801466c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8014670:	6813      	ldr	r3, [r2, #0]
 8014672:	6821      	ldr	r1, [r4, #0]
 8014674:	1d1d      	adds	r5, r3, #4
 8014676:	681b      	ldr	r3, [r3, #0]
 8014678:	6015      	str	r5, [r2, #0]
 801467a:	060a      	lsls	r2, r1, #24
 801467c:	d50b      	bpl.n	8014696 <_printf_i+0x162>
 801467e:	07ca      	lsls	r2, r1, #31
 8014680:	bf44      	itt	mi
 8014682:	f041 0120 	orrmi.w	r1, r1, #32
 8014686:	6021      	strmi	r1, [r4, #0]
 8014688:	b91b      	cbnz	r3, 8014692 <_printf_i+0x15e>
 801468a:	6822      	ldr	r2, [r4, #0]
 801468c:	f022 0220 	bic.w	r2, r2, #32
 8014690:	6022      	str	r2, [r4, #0]
 8014692:	2210      	movs	r2, #16
 8014694:	e7b7      	b.n	8014606 <_printf_i+0xd2>
 8014696:	064d      	lsls	r5, r1, #25
 8014698:	bf48      	it	mi
 801469a:	b29b      	uxthmi	r3, r3
 801469c:	e7ef      	b.n	801467e <_printf_i+0x14a>
 801469e:	4665      	mov	r5, ip
 80146a0:	fbb3 f1f2 	udiv	r1, r3, r2
 80146a4:	fb02 3311 	mls	r3, r2, r1, r3
 80146a8:	5cc3      	ldrb	r3, [r0, r3]
 80146aa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80146ae:	460b      	mov	r3, r1
 80146b0:	2900      	cmp	r1, #0
 80146b2:	d1f5      	bne.n	80146a0 <_printf_i+0x16c>
 80146b4:	e7b9      	b.n	801462a <_printf_i+0xf6>
 80146b6:	6813      	ldr	r3, [r2, #0]
 80146b8:	6825      	ldr	r5, [r4, #0]
 80146ba:	6961      	ldr	r1, [r4, #20]
 80146bc:	1d18      	adds	r0, r3, #4
 80146be:	6010      	str	r0, [r2, #0]
 80146c0:	0628      	lsls	r0, r5, #24
 80146c2:	681b      	ldr	r3, [r3, #0]
 80146c4:	d501      	bpl.n	80146ca <_printf_i+0x196>
 80146c6:	6019      	str	r1, [r3, #0]
 80146c8:	e002      	b.n	80146d0 <_printf_i+0x19c>
 80146ca:	066a      	lsls	r2, r5, #25
 80146cc:	d5fb      	bpl.n	80146c6 <_printf_i+0x192>
 80146ce:	8019      	strh	r1, [r3, #0]
 80146d0:	2300      	movs	r3, #0
 80146d2:	6123      	str	r3, [r4, #16]
 80146d4:	4665      	mov	r5, ip
 80146d6:	e7b9      	b.n	801464c <_printf_i+0x118>
 80146d8:	6813      	ldr	r3, [r2, #0]
 80146da:	1d19      	adds	r1, r3, #4
 80146dc:	6011      	str	r1, [r2, #0]
 80146de:	681d      	ldr	r5, [r3, #0]
 80146e0:	6862      	ldr	r2, [r4, #4]
 80146e2:	2100      	movs	r1, #0
 80146e4:	4628      	mov	r0, r5
 80146e6:	f7eb fd93 	bl	8000210 <memchr>
 80146ea:	b108      	cbz	r0, 80146f0 <_printf_i+0x1bc>
 80146ec:	1b40      	subs	r0, r0, r5
 80146ee:	6060      	str	r0, [r4, #4]
 80146f0:	6863      	ldr	r3, [r4, #4]
 80146f2:	6123      	str	r3, [r4, #16]
 80146f4:	2300      	movs	r3, #0
 80146f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80146fa:	e7a7      	b.n	801464c <_printf_i+0x118>
 80146fc:	6923      	ldr	r3, [r4, #16]
 80146fe:	462a      	mov	r2, r5
 8014700:	4639      	mov	r1, r7
 8014702:	4630      	mov	r0, r6
 8014704:	47c0      	blx	r8
 8014706:	3001      	adds	r0, #1
 8014708:	d0aa      	beq.n	8014660 <_printf_i+0x12c>
 801470a:	6823      	ldr	r3, [r4, #0]
 801470c:	079b      	lsls	r3, r3, #30
 801470e:	d413      	bmi.n	8014738 <_printf_i+0x204>
 8014710:	68e0      	ldr	r0, [r4, #12]
 8014712:	9b03      	ldr	r3, [sp, #12]
 8014714:	4298      	cmp	r0, r3
 8014716:	bfb8      	it	lt
 8014718:	4618      	movlt	r0, r3
 801471a:	e7a3      	b.n	8014664 <_printf_i+0x130>
 801471c:	2301      	movs	r3, #1
 801471e:	464a      	mov	r2, r9
 8014720:	4639      	mov	r1, r7
 8014722:	4630      	mov	r0, r6
 8014724:	47c0      	blx	r8
 8014726:	3001      	adds	r0, #1
 8014728:	d09a      	beq.n	8014660 <_printf_i+0x12c>
 801472a:	3501      	adds	r5, #1
 801472c:	68e3      	ldr	r3, [r4, #12]
 801472e:	9a03      	ldr	r2, [sp, #12]
 8014730:	1a9b      	subs	r3, r3, r2
 8014732:	42ab      	cmp	r3, r5
 8014734:	dcf2      	bgt.n	801471c <_printf_i+0x1e8>
 8014736:	e7eb      	b.n	8014710 <_printf_i+0x1dc>
 8014738:	2500      	movs	r5, #0
 801473a:	f104 0919 	add.w	r9, r4, #25
 801473e:	e7f5      	b.n	801472c <_printf_i+0x1f8>
 8014740:	2b00      	cmp	r3, #0
 8014742:	d1ac      	bne.n	801469e <_printf_i+0x16a>
 8014744:	7803      	ldrb	r3, [r0, #0]
 8014746:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801474a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801474e:	e76c      	b.n	801462a <_printf_i+0xf6>
 8014750:	08018a30 	.word	0x08018a30
 8014754:	08018a41 	.word	0x08018a41

08014758 <_scanf_float>:
 8014758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801475c:	469a      	mov	sl, r3
 801475e:	688b      	ldr	r3, [r1, #8]
 8014760:	4616      	mov	r6, r2
 8014762:	1e5a      	subs	r2, r3, #1
 8014764:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8014768:	b087      	sub	sp, #28
 801476a:	bf83      	ittte	hi
 801476c:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8014770:	189b      	addhi	r3, r3, r2
 8014772:	9301      	strhi	r3, [sp, #4]
 8014774:	2300      	movls	r3, #0
 8014776:	bf86      	itte	hi
 8014778:	f240 135d 	movwhi	r3, #349	; 0x15d
 801477c:	608b      	strhi	r3, [r1, #8]
 801477e:	9301      	strls	r3, [sp, #4]
 8014780:	680b      	ldr	r3, [r1, #0]
 8014782:	4688      	mov	r8, r1
 8014784:	f04f 0b00 	mov.w	fp, #0
 8014788:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801478c:	f848 3b1c 	str.w	r3, [r8], #28
 8014790:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8014794:	4607      	mov	r7, r0
 8014796:	460c      	mov	r4, r1
 8014798:	4645      	mov	r5, r8
 801479a:	465a      	mov	r2, fp
 801479c:	46d9      	mov	r9, fp
 801479e:	f8cd b008 	str.w	fp, [sp, #8]
 80147a2:	68a1      	ldr	r1, [r4, #8]
 80147a4:	b181      	cbz	r1, 80147c8 <_scanf_float+0x70>
 80147a6:	6833      	ldr	r3, [r6, #0]
 80147a8:	781b      	ldrb	r3, [r3, #0]
 80147aa:	2b49      	cmp	r3, #73	; 0x49
 80147ac:	d071      	beq.n	8014892 <_scanf_float+0x13a>
 80147ae:	d84d      	bhi.n	801484c <_scanf_float+0xf4>
 80147b0:	2b39      	cmp	r3, #57	; 0x39
 80147b2:	d840      	bhi.n	8014836 <_scanf_float+0xde>
 80147b4:	2b31      	cmp	r3, #49	; 0x31
 80147b6:	f080 8088 	bcs.w	80148ca <_scanf_float+0x172>
 80147ba:	2b2d      	cmp	r3, #45	; 0x2d
 80147bc:	f000 8090 	beq.w	80148e0 <_scanf_float+0x188>
 80147c0:	d815      	bhi.n	80147ee <_scanf_float+0x96>
 80147c2:	2b2b      	cmp	r3, #43	; 0x2b
 80147c4:	f000 808c 	beq.w	80148e0 <_scanf_float+0x188>
 80147c8:	f1b9 0f00 	cmp.w	r9, #0
 80147cc:	d003      	beq.n	80147d6 <_scanf_float+0x7e>
 80147ce:	6823      	ldr	r3, [r4, #0]
 80147d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80147d4:	6023      	str	r3, [r4, #0]
 80147d6:	3a01      	subs	r2, #1
 80147d8:	2a01      	cmp	r2, #1
 80147da:	f200 80ea 	bhi.w	80149b2 <_scanf_float+0x25a>
 80147de:	4545      	cmp	r5, r8
 80147e0:	f200 80dc 	bhi.w	801499c <_scanf_float+0x244>
 80147e4:	2601      	movs	r6, #1
 80147e6:	4630      	mov	r0, r6
 80147e8:	b007      	add	sp, #28
 80147ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80147ee:	2b2e      	cmp	r3, #46	; 0x2e
 80147f0:	f000 809f 	beq.w	8014932 <_scanf_float+0x1da>
 80147f4:	2b30      	cmp	r3, #48	; 0x30
 80147f6:	d1e7      	bne.n	80147c8 <_scanf_float+0x70>
 80147f8:	6820      	ldr	r0, [r4, #0]
 80147fa:	f410 7f80 	tst.w	r0, #256	; 0x100
 80147fe:	d064      	beq.n	80148ca <_scanf_float+0x172>
 8014800:	9b01      	ldr	r3, [sp, #4]
 8014802:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8014806:	6020      	str	r0, [r4, #0]
 8014808:	f109 0901 	add.w	r9, r9, #1
 801480c:	b11b      	cbz	r3, 8014816 <_scanf_float+0xbe>
 801480e:	3b01      	subs	r3, #1
 8014810:	3101      	adds	r1, #1
 8014812:	9301      	str	r3, [sp, #4]
 8014814:	60a1      	str	r1, [r4, #8]
 8014816:	68a3      	ldr	r3, [r4, #8]
 8014818:	3b01      	subs	r3, #1
 801481a:	60a3      	str	r3, [r4, #8]
 801481c:	6923      	ldr	r3, [r4, #16]
 801481e:	3301      	adds	r3, #1
 8014820:	6123      	str	r3, [r4, #16]
 8014822:	6873      	ldr	r3, [r6, #4]
 8014824:	3b01      	subs	r3, #1
 8014826:	2b00      	cmp	r3, #0
 8014828:	6073      	str	r3, [r6, #4]
 801482a:	f340 80ac 	ble.w	8014986 <_scanf_float+0x22e>
 801482e:	6833      	ldr	r3, [r6, #0]
 8014830:	3301      	adds	r3, #1
 8014832:	6033      	str	r3, [r6, #0]
 8014834:	e7b5      	b.n	80147a2 <_scanf_float+0x4a>
 8014836:	2b45      	cmp	r3, #69	; 0x45
 8014838:	f000 8085 	beq.w	8014946 <_scanf_float+0x1ee>
 801483c:	2b46      	cmp	r3, #70	; 0x46
 801483e:	d06a      	beq.n	8014916 <_scanf_float+0x1be>
 8014840:	2b41      	cmp	r3, #65	; 0x41
 8014842:	d1c1      	bne.n	80147c8 <_scanf_float+0x70>
 8014844:	2a01      	cmp	r2, #1
 8014846:	d1bf      	bne.n	80147c8 <_scanf_float+0x70>
 8014848:	2202      	movs	r2, #2
 801484a:	e046      	b.n	80148da <_scanf_float+0x182>
 801484c:	2b65      	cmp	r3, #101	; 0x65
 801484e:	d07a      	beq.n	8014946 <_scanf_float+0x1ee>
 8014850:	d818      	bhi.n	8014884 <_scanf_float+0x12c>
 8014852:	2b54      	cmp	r3, #84	; 0x54
 8014854:	d066      	beq.n	8014924 <_scanf_float+0x1cc>
 8014856:	d811      	bhi.n	801487c <_scanf_float+0x124>
 8014858:	2b4e      	cmp	r3, #78	; 0x4e
 801485a:	d1b5      	bne.n	80147c8 <_scanf_float+0x70>
 801485c:	2a00      	cmp	r2, #0
 801485e:	d146      	bne.n	80148ee <_scanf_float+0x196>
 8014860:	f1b9 0f00 	cmp.w	r9, #0
 8014864:	d145      	bne.n	80148f2 <_scanf_float+0x19a>
 8014866:	6821      	ldr	r1, [r4, #0]
 8014868:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 801486c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8014870:	d13f      	bne.n	80148f2 <_scanf_float+0x19a>
 8014872:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8014876:	6021      	str	r1, [r4, #0]
 8014878:	2201      	movs	r2, #1
 801487a:	e02e      	b.n	80148da <_scanf_float+0x182>
 801487c:	2b59      	cmp	r3, #89	; 0x59
 801487e:	d01e      	beq.n	80148be <_scanf_float+0x166>
 8014880:	2b61      	cmp	r3, #97	; 0x61
 8014882:	e7de      	b.n	8014842 <_scanf_float+0xea>
 8014884:	2b6e      	cmp	r3, #110	; 0x6e
 8014886:	d0e9      	beq.n	801485c <_scanf_float+0x104>
 8014888:	d815      	bhi.n	80148b6 <_scanf_float+0x15e>
 801488a:	2b66      	cmp	r3, #102	; 0x66
 801488c:	d043      	beq.n	8014916 <_scanf_float+0x1be>
 801488e:	2b69      	cmp	r3, #105	; 0x69
 8014890:	d19a      	bne.n	80147c8 <_scanf_float+0x70>
 8014892:	f1bb 0f00 	cmp.w	fp, #0
 8014896:	d138      	bne.n	801490a <_scanf_float+0x1b2>
 8014898:	f1b9 0f00 	cmp.w	r9, #0
 801489c:	d197      	bne.n	80147ce <_scanf_float+0x76>
 801489e:	6821      	ldr	r1, [r4, #0]
 80148a0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80148a4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80148a8:	d195      	bne.n	80147d6 <_scanf_float+0x7e>
 80148aa:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80148ae:	6021      	str	r1, [r4, #0]
 80148b0:	f04f 0b01 	mov.w	fp, #1
 80148b4:	e011      	b.n	80148da <_scanf_float+0x182>
 80148b6:	2b74      	cmp	r3, #116	; 0x74
 80148b8:	d034      	beq.n	8014924 <_scanf_float+0x1cc>
 80148ba:	2b79      	cmp	r3, #121	; 0x79
 80148bc:	d184      	bne.n	80147c8 <_scanf_float+0x70>
 80148be:	f1bb 0f07 	cmp.w	fp, #7
 80148c2:	d181      	bne.n	80147c8 <_scanf_float+0x70>
 80148c4:	f04f 0b08 	mov.w	fp, #8
 80148c8:	e007      	b.n	80148da <_scanf_float+0x182>
 80148ca:	eb12 0f0b 	cmn.w	r2, fp
 80148ce:	f47f af7b 	bne.w	80147c8 <_scanf_float+0x70>
 80148d2:	6821      	ldr	r1, [r4, #0]
 80148d4:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 80148d8:	6021      	str	r1, [r4, #0]
 80148da:	702b      	strb	r3, [r5, #0]
 80148dc:	3501      	adds	r5, #1
 80148de:	e79a      	b.n	8014816 <_scanf_float+0xbe>
 80148e0:	6821      	ldr	r1, [r4, #0]
 80148e2:	0608      	lsls	r0, r1, #24
 80148e4:	f57f af70 	bpl.w	80147c8 <_scanf_float+0x70>
 80148e8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80148ec:	e7f4      	b.n	80148d8 <_scanf_float+0x180>
 80148ee:	2a02      	cmp	r2, #2
 80148f0:	d047      	beq.n	8014982 <_scanf_float+0x22a>
 80148f2:	f1bb 0f01 	cmp.w	fp, #1
 80148f6:	d003      	beq.n	8014900 <_scanf_float+0x1a8>
 80148f8:	f1bb 0f04 	cmp.w	fp, #4
 80148fc:	f47f af64 	bne.w	80147c8 <_scanf_float+0x70>
 8014900:	f10b 0b01 	add.w	fp, fp, #1
 8014904:	fa5f fb8b 	uxtb.w	fp, fp
 8014908:	e7e7      	b.n	80148da <_scanf_float+0x182>
 801490a:	f1bb 0f03 	cmp.w	fp, #3
 801490e:	d0f7      	beq.n	8014900 <_scanf_float+0x1a8>
 8014910:	f1bb 0f05 	cmp.w	fp, #5
 8014914:	e7f2      	b.n	80148fc <_scanf_float+0x1a4>
 8014916:	f1bb 0f02 	cmp.w	fp, #2
 801491a:	f47f af55 	bne.w	80147c8 <_scanf_float+0x70>
 801491e:	f04f 0b03 	mov.w	fp, #3
 8014922:	e7da      	b.n	80148da <_scanf_float+0x182>
 8014924:	f1bb 0f06 	cmp.w	fp, #6
 8014928:	f47f af4e 	bne.w	80147c8 <_scanf_float+0x70>
 801492c:	f04f 0b07 	mov.w	fp, #7
 8014930:	e7d3      	b.n	80148da <_scanf_float+0x182>
 8014932:	6821      	ldr	r1, [r4, #0]
 8014934:	0588      	lsls	r0, r1, #22
 8014936:	f57f af47 	bpl.w	80147c8 <_scanf_float+0x70>
 801493a:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 801493e:	6021      	str	r1, [r4, #0]
 8014940:	f8cd 9008 	str.w	r9, [sp, #8]
 8014944:	e7c9      	b.n	80148da <_scanf_float+0x182>
 8014946:	6821      	ldr	r1, [r4, #0]
 8014948:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 801494c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8014950:	d006      	beq.n	8014960 <_scanf_float+0x208>
 8014952:	0548      	lsls	r0, r1, #21
 8014954:	f57f af38 	bpl.w	80147c8 <_scanf_float+0x70>
 8014958:	f1b9 0f00 	cmp.w	r9, #0
 801495c:	f43f af3b 	beq.w	80147d6 <_scanf_float+0x7e>
 8014960:	0588      	lsls	r0, r1, #22
 8014962:	bf58      	it	pl
 8014964:	9802      	ldrpl	r0, [sp, #8]
 8014966:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 801496a:	bf58      	it	pl
 801496c:	eba9 0000 	subpl.w	r0, r9, r0
 8014970:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8014974:	bf58      	it	pl
 8014976:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 801497a:	6021      	str	r1, [r4, #0]
 801497c:	f04f 0900 	mov.w	r9, #0
 8014980:	e7ab      	b.n	80148da <_scanf_float+0x182>
 8014982:	2203      	movs	r2, #3
 8014984:	e7a9      	b.n	80148da <_scanf_float+0x182>
 8014986:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801498a:	9205      	str	r2, [sp, #20]
 801498c:	4631      	mov	r1, r6
 801498e:	4638      	mov	r0, r7
 8014990:	4798      	blx	r3
 8014992:	9a05      	ldr	r2, [sp, #20]
 8014994:	2800      	cmp	r0, #0
 8014996:	f43f af04 	beq.w	80147a2 <_scanf_float+0x4a>
 801499a:	e715      	b.n	80147c8 <_scanf_float+0x70>
 801499c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80149a0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80149a4:	4632      	mov	r2, r6
 80149a6:	4638      	mov	r0, r7
 80149a8:	4798      	blx	r3
 80149aa:	6923      	ldr	r3, [r4, #16]
 80149ac:	3b01      	subs	r3, #1
 80149ae:	6123      	str	r3, [r4, #16]
 80149b0:	e715      	b.n	80147de <_scanf_float+0x86>
 80149b2:	f10b 33ff 	add.w	r3, fp, #4294967295
 80149b6:	2b06      	cmp	r3, #6
 80149b8:	d80a      	bhi.n	80149d0 <_scanf_float+0x278>
 80149ba:	f1bb 0f02 	cmp.w	fp, #2
 80149be:	d968      	bls.n	8014a92 <_scanf_float+0x33a>
 80149c0:	f1ab 0b03 	sub.w	fp, fp, #3
 80149c4:	fa5f fb8b 	uxtb.w	fp, fp
 80149c8:	eba5 0b0b 	sub.w	fp, r5, fp
 80149cc:	455d      	cmp	r5, fp
 80149ce:	d14b      	bne.n	8014a68 <_scanf_float+0x310>
 80149d0:	6823      	ldr	r3, [r4, #0]
 80149d2:	05da      	lsls	r2, r3, #23
 80149d4:	d51f      	bpl.n	8014a16 <_scanf_float+0x2be>
 80149d6:	055b      	lsls	r3, r3, #21
 80149d8:	d468      	bmi.n	8014aac <_scanf_float+0x354>
 80149da:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80149de:	6923      	ldr	r3, [r4, #16]
 80149e0:	2965      	cmp	r1, #101	; 0x65
 80149e2:	f103 33ff 	add.w	r3, r3, #4294967295
 80149e6:	f105 3bff 	add.w	fp, r5, #4294967295
 80149ea:	6123      	str	r3, [r4, #16]
 80149ec:	d00d      	beq.n	8014a0a <_scanf_float+0x2b2>
 80149ee:	2945      	cmp	r1, #69	; 0x45
 80149f0:	d00b      	beq.n	8014a0a <_scanf_float+0x2b2>
 80149f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80149f6:	4632      	mov	r2, r6
 80149f8:	4638      	mov	r0, r7
 80149fa:	4798      	blx	r3
 80149fc:	6923      	ldr	r3, [r4, #16]
 80149fe:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8014a02:	3b01      	subs	r3, #1
 8014a04:	f1a5 0b02 	sub.w	fp, r5, #2
 8014a08:	6123      	str	r3, [r4, #16]
 8014a0a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014a0e:	4632      	mov	r2, r6
 8014a10:	4638      	mov	r0, r7
 8014a12:	4798      	blx	r3
 8014a14:	465d      	mov	r5, fp
 8014a16:	6826      	ldr	r6, [r4, #0]
 8014a18:	f016 0610 	ands.w	r6, r6, #16
 8014a1c:	d17a      	bne.n	8014b14 <_scanf_float+0x3bc>
 8014a1e:	702e      	strb	r6, [r5, #0]
 8014a20:	6823      	ldr	r3, [r4, #0]
 8014a22:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8014a26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014a2a:	d142      	bne.n	8014ab2 <_scanf_float+0x35a>
 8014a2c:	9b02      	ldr	r3, [sp, #8]
 8014a2e:	eba9 0303 	sub.w	r3, r9, r3
 8014a32:	425a      	negs	r2, r3
 8014a34:	2b00      	cmp	r3, #0
 8014a36:	d149      	bne.n	8014acc <_scanf_float+0x374>
 8014a38:	2200      	movs	r2, #0
 8014a3a:	4641      	mov	r1, r8
 8014a3c:	4638      	mov	r0, r7
 8014a3e:	f000 ff0b 	bl	8015858 <_strtod_r>
 8014a42:	6825      	ldr	r5, [r4, #0]
 8014a44:	f8da 3000 	ldr.w	r3, [sl]
 8014a48:	f015 0f02 	tst.w	r5, #2
 8014a4c:	f103 0204 	add.w	r2, r3, #4
 8014a50:	ec59 8b10 	vmov	r8, r9, d0
 8014a54:	f8ca 2000 	str.w	r2, [sl]
 8014a58:	d043      	beq.n	8014ae2 <_scanf_float+0x38a>
 8014a5a:	681b      	ldr	r3, [r3, #0]
 8014a5c:	e9c3 8900 	strd	r8, r9, [r3]
 8014a60:	68e3      	ldr	r3, [r4, #12]
 8014a62:	3301      	adds	r3, #1
 8014a64:	60e3      	str	r3, [r4, #12]
 8014a66:	e6be      	b.n	80147e6 <_scanf_float+0x8e>
 8014a68:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014a6c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8014a70:	4632      	mov	r2, r6
 8014a72:	4638      	mov	r0, r7
 8014a74:	4798      	blx	r3
 8014a76:	6923      	ldr	r3, [r4, #16]
 8014a78:	3b01      	subs	r3, #1
 8014a7a:	6123      	str	r3, [r4, #16]
 8014a7c:	e7a6      	b.n	80149cc <_scanf_float+0x274>
 8014a7e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014a82:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8014a86:	4632      	mov	r2, r6
 8014a88:	4638      	mov	r0, r7
 8014a8a:	4798      	blx	r3
 8014a8c:	6923      	ldr	r3, [r4, #16]
 8014a8e:	3b01      	subs	r3, #1
 8014a90:	6123      	str	r3, [r4, #16]
 8014a92:	4545      	cmp	r5, r8
 8014a94:	d8f3      	bhi.n	8014a7e <_scanf_float+0x326>
 8014a96:	e6a5      	b.n	80147e4 <_scanf_float+0x8c>
 8014a98:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8014a9c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8014aa0:	4632      	mov	r2, r6
 8014aa2:	4638      	mov	r0, r7
 8014aa4:	4798      	blx	r3
 8014aa6:	6923      	ldr	r3, [r4, #16]
 8014aa8:	3b01      	subs	r3, #1
 8014aaa:	6123      	str	r3, [r4, #16]
 8014aac:	4545      	cmp	r5, r8
 8014aae:	d8f3      	bhi.n	8014a98 <_scanf_float+0x340>
 8014ab0:	e698      	b.n	80147e4 <_scanf_float+0x8c>
 8014ab2:	9b03      	ldr	r3, [sp, #12]
 8014ab4:	2b00      	cmp	r3, #0
 8014ab6:	d0bf      	beq.n	8014a38 <_scanf_float+0x2e0>
 8014ab8:	9904      	ldr	r1, [sp, #16]
 8014aba:	230a      	movs	r3, #10
 8014abc:	4632      	mov	r2, r6
 8014abe:	3101      	adds	r1, #1
 8014ac0:	4638      	mov	r0, r7
 8014ac2:	f000 ff55 	bl	8015970 <_strtol_r>
 8014ac6:	9b03      	ldr	r3, [sp, #12]
 8014ac8:	9d04      	ldr	r5, [sp, #16]
 8014aca:	1ac2      	subs	r2, r0, r3
 8014acc:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8014ad0:	429d      	cmp	r5, r3
 8014ad2:	bf28      	it	cs
 8014ad4:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8014ad8:	490f      	ldr	r1, [pc, #60]	; (8014b18 <_scanf_float+0x3c0>)
 8014ada:	4628      	mov	r0, r5
 8014adc:	f000 f858 	bl	8014b90 <siprintf>
 8014ae0:	e7aa      	b.n	8014a38 <_scanf_float+0x2e0>
 8014ae2:	f015 0504 	ands.w	r5, r5, #4
 8014ae6:	d1b8      	bne.n	8014a5a <_scanf_float+0x302>
 8014ae8:	681f      	ldr	r7, [r3, #0]
 8014aea:	ee10 2a10 	vmov	r2, s0
 8014aee:	464b      	mov	r3, r9
 8014af0:	ee10 0a10 	vmov	r0, s0
 8014af4:	4649      	mov	r1, r9
 8014af6:	f7ec f831 	bl	8000b5c <__aeabi_dcmpun>
 8014afa:	b128      	cbz	r0, 8014b08 <_scanf_float+0x3b0>
 8014afc:	4628      	mov	r0, r5
 8014afe:	f000 f80d 	bl	8014b1c <nanf>
 8014b02:	ed87 0a00 	vstr	s0, [r7]
 8014b06:	e7ab      	b.n	8014a60 <_scanf_float+0x308>
 8014b08:	4640      	mov	r0, r8
 8014b0a:	4649      	mov	r1, r9
 8014b0c:	f7ec f884 	bl	8000c18 <__aeabi_d2f>
 8014b10:	6038      	str	r0, [r7, #0]
 8014b12:	e7a5      	b.n	8014a60 <_scanf_float+0x308>
 8014b14:	2600      	movs	r6, #0
 8014b16:	e666      	b.n	80147e6 <_scanf_float+0x8e>
 8014b18:	08018a52 	.word	0x08018a52

08014b1c <nanf>:
 8014b1c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8014b24 <nanf+0x8>
 8014b20:	4770      	bx	lr
 8014b22:	bf00      	nop
 8014b24:	7fc00000 	.word	0x7fc00000

08014b28 <sniprintf>:
 8014b28:	b40c      	push	{r2, r3}
 8014b2a:	b530      	push	{r4, r5, lr}
 8014b2c:	4b17      	ldr	r3, [pc, #92]	; (8014b8c <sniprintf+0x64>)
 8014b2e:	1e0c      	subs	r4, r1, #0
 8014b30:	b09d      	sub	sp, #116	; 0x74
 8014b32:	681d      	ldr	r5, [r3, #0]
 8014b34:	da08      	bge.n	8014b48 <sniprintf+0x20>
 8014b36:	238b      	movs	r3, #139	; 0x8b
 8014b38:	602b      	str	r3, [r5, #0]
 8014b3a:	f04f 30ff 	mov.w	r0, #4294967295
 8014b3e:	b01d      	add	sp, #116	; 0x74
 8014b40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014b44:	b002      	add	sp, #8
 8014b46:	4770      	bx	lr
 8014b48:	f44f 7302 	mov.w	r3, #520	; 0x208
 8014b4c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8014b50:	bf14      	ite	ne
 8014b52:	f104 33ff 	addne.w	r3, r4, #4294967295
 8014b56:	4623      	moveq	r3, r4
 8014b58:	9304      	str	r3, [sp, #16]
 8014b5a:	9307      	str	r3, [sp, #28]
 8014b5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014b60:	9002      	str	r0, [sp, #8]
 8014b62:	9006      	str	r0, [sp, #24]
 8014b64:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014b68:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8014b6a:	ab21      	add	r3, sp, #132	; 0x84
 8014b6c:	a902      	add	r1, sp, #8
 8014b6e:	4628      	mov	r0, r5
 8014b70:	9301      	str	r3, [sp, #4]
 8014b72:	f002 fde7 	bl	8017744 <_svfiprintf_r>
 8014b76:	1c43      	adds	r3, r0, #1
 8014b78:	bfbc      	itt	lt
 8014b7a:	238b      	movlt	r3, #139	; 0x8b
 8014b7c:	602b      	strlt	r3, [r5, #0]
 8014b7e:	2c00      	cmp	r4, #0
 8014b80:	d0dd      	beq.n	8014b3e <sniprintf+0x16>
 8014b82:	9b02      	ldr	r3, [sp, #8]
 8014b84:	2200      	movs	r2, #0
 8014b86:	701a      	strb	r2, [r3, #0]
 8014b88:	e7d9      	b.n	8014b3e <sniprintf+0x16>
 8014b8a:	bf00      	nop
 8014b8c:	2000000c 	.word	0x2000000c

08014b90 <siprintf>:
 8014b90:	b40e      	push	{r1, r2, r3}
 8014b92:	b500      	push	{lr}
 8014b94:	b09c      	sub	sp, #112	; 0x70
 8014b96:	ab1d      	add	r3, sp, #116	; 0x74
 8014b98:	9002      	str	r0, [sp, #8]
 8014b9a:	9006      	str	r0, [sp, #24]
 8014b9c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8014ba0:	4809      	ldr	r0, [pc, #36]	; (8014bc8 <siprintf+0x38>)
 8014ba2:	9107      	str	r1, [sp, #28]
 8014ba4:	9104      	str	r1, [sp, #16]
 8014ba6:	4909      	ldr	r1, [pc, #36]	; (8014bcc <siprintf+0x3c>)
 8014ba8:	f853 2b04 	ldr.w	r2, [r3], #4
 8014bac:	9105      	str	r1, [sp, #20]
 8014bae:	6800      	ldr	r0, [r0, #0]
 8014bb0:	9301      	str	r3, [sp, #4]
 8014bb2:	a902      	add	r1, sp, #8
 8014bb4:	f002 fdc6 	bl	8017744 <_svfiprintf_r>
 8014bb8:	9b02      	ldr	r3, [sp, #8]
 8014bba:	2200      	movs	r2, #0
 8014bbc:	701a      	strb	r2, [r3, #0]
 8014bbe:	b01c      	add	sp, #112	; 0x70
 8014bc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8014bc4:	b003      	add	sp, #12
 8014bc6:	4770      	bx	lr
 8014bc8:	2000000c 	.word	0x2000000c
 8014bcc:	ffff0208 	.word	0xffff0208

08014bd0 <siscanf>:
 8014bd0:	b40e      	push	{r1, r2, r3}
 8014bd2:	b530      	push	{r4, r5, lr}
 8014bd4:	b09c      	sub	sp, #112	; 0x70
 8014bd6:	ac1f      	add	r4, sp, #124	; 0x7c
 8014bd8:	f44f 7201 	mov.w	r2, #516	; 0x204
 8014bdc:	f854 5b04 	ldr.w	r5, [r4], #4
 8014be0:	f8ad 2014 	strh.w	r2, [sp, #20]
 8014be4:	9002      	str	r0, [sp, #8]
 8014be6:	9006      	str	r0, [sp, #24]
 8014be8:	f7eb fb0a 	bl	8000200 <strlen>
 8014bec:	4b0b      	ldr	r3, [pc, #44]	; (8014c1c <siscanf+0x4c>)
 8014bee:	9003      	str	r0, [sp, #12]
 8014bf0:	9007      	str	r0, [sp, #28]
 8014bf2:	930b      	str	r3, [sp, #44]	; 0x2c
 8014bf4:	480a      	ldr	r0, [pc, #40]	; (8014c20 <siscanf+0x50>)
 8014bf6:	9401      	str	r4, [sp, #4]
 8014bf8:	2300      	movs	r3, #0
 8014bfa:	930f      	str	r3, [sp, #60]	; 0x3c
 8014bfc:	9314      	str	r3, [sp, #80]	; 0x50
 8014bfe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014c02:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014c06:	462a      	mov	r2, r5
 8014c08:	4623      	mov	r3, r4
 8014c0a:	a902      	add	r1, sp, #8
 8014c0c:	6800      	ldr	r0, [r0, #0]
 8014c0e:	f002 feeb 	bl	80179e8 <__ssvfiscanf_r>
 8014c12:	b01c      	add	sp, #112	; 0x70
 8014c14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014c18:	b003      	add	sp, #12
 8014c1a:	4770      	bx	lr
 8014c1c:	08014c25 	.word	0x08014c25
 8014c20:	2000000c 	.word	0x2000000c

08014c24 <__seofread>:
 8014c24:	2000      	movs	r0, #0
 8014c26:	4770      	bx	lr

08014c28 <strcpy>:
 8014c28:	4603      	mov	r3, r0
 8014c2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014c2e:	f803 2b01 	strb.w	r2, [r3], #1
 8014c32:	2a00      	cmp	r2, #0
 8014c34:	d1f9      	bne.n	8014c2a <strcpy+0x2>
 8014c36:	4770      	bx	lr

08014c38 <sulp>:
 8014c38:	b570      	push	{r4, r5, r6, lr}
 8014c3a:	4604      	mov	r4, r0
 8014c3c:	460d      	mov	r5, r1
 8014c3e:	ec45 4b10 	vmov	d0, r4, r5
 8014c42:	4616      	mov	r6, r2
 8014c44:	f002 fb3a 	bl	80172bc <__ulp>
 8014c48:	ec51 0b10 	vmov	r0, r1, d0
 8014c4c:	b17e      	cbz	r6, 8014c6e <sulp+0x36>
 8014c4e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8014c52:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8014c56:	2b00      	cmp	r3, #0
 8014c58:	dd09      	ble.n	8014c6e <sulp+0x36>
 8014c5a:	051b      	lsls	r3, r3, #20
 8014c5c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8014c60:	2400      	movs	r4, #0
 8014c62:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8014c66:	4622      	mov	r2, r4
 8014c68:	462b      	mov	r3, r5
 8014c6a:	f7eb fcdd 	bl	8000628 <__aeabi_dmul>
 8014c6e:	bd70      	pop	{r4, r5, r6, pc}

08014c70 <_strtod_l>:
 8014c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c74:	461f      	mov	r7, r3
 8014c76:	b0a1      	sub	sp, #132	; 0x84
 8014c78:	2300      	movs	r3, #0
 8014c7a:	4681      	mov	r9, r0
 8014c7c:	4638      	mov	r0, r7
 8014c7e:	460e      	mov	r6, r1
 8014c80:	9217      	str	r2, [sp, #92]	; 0x5c
 8014c82:	931c      	str	r3, [sp, #112]	; 0x70
 8014c84:	f002 f824 	bl	8016cd0 <__localeconv_l>
 8014c88:	4680      	mov	r8, r0
 8014c8a:	6800      	ldr	r0, [r0, #0]
 8014c8c:	f7eb fab8 	bl	8000200 <strlen>
 8014c90:	f04f 0a00 	mov.w	sl, #0
 8014c94:	4604      	mov	r4, r0
 8014c96:	f04f 0b00 	mov.w	fp, #0
 8014c9a:	961b      	str	r6, [sp, #108]	; 0x6c
 8014c9c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014c9e:	781a      	ldrb	r2, [r3, #0]
 8014ca0:	2a0d      	cmp	r2, #13
 8014ca2:	d832      	bhi.n	8014d0a <_strtod_l+0x9a>
 8014ca4:	2a09      	cmp	r2, #9
 8014ca6:	d236      	bcs.n	8014d16 <_strtod_l+0xa6>
 8014ca8:	2a00      	cmp	r2, #0
 8014caa:	d03e      	beq.n	8014d2a <_strtod_l+0xba>
 8014cac:	2300      	movs	r3, #0
 8014cae:	930d      	str	r3, [sp, #52]	; 0x34
 8014cb0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8014cb2:	782b      	ldrb	r3, [r5, #0]
 8014cb4:	2b30      	cmp	r3, #48	; 0x30
 8014cb6:	f040 80ac 	bne.w	8014e12 <_strtod_l+0x1a2>
 8014cba:	786b      	ldrb	r3, [r5, #1]
 8014cbc:	2b58      	cmp	r3, #88	; 0x58
 8014cbe:	d001      	beq.n	8014cc4 <_strtod_l+0x54>
 8014cc0:	2b78      	cmp	r3, #120	; 0x78
 8014cc2:	d167      	bne.n	8014d94 <_strtod_l+0x124>
 8014cc4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014cc6:	9301      	str	r3, [sp, #4]
 8014cc8:	ab1c      	add	r3, sp, #112	; 0x70
 8014cca:	9300      	str	r3, [sp, #0]
 8014ccc:	9702      	str	r7, [sp, #8]
 8014cce:	ab1d      	add	r3, sp, #116	; 0x74
 8014cd0:	4a88      	ldr	r2, [pc, #544]	; (8014ef4 <_strtod_l+0x284>)
 8014cd2:	a91b      	add	r1, sp, #108	; 0x6c
 8014cd4:	4648      	mov	r0, r9
 8014cd6:	f001 fd12 	bl	80166fe <__gethex>
 8014cda:	f010 0407 	ands.w	r4, r0, #7
 8014cde:	4606      	mov	r6, r0
 8014ce0:	d005      	beq.n	8014cee <_strtod_l+0x7e>
 8014ce2:	2c06      	cmp	r4, #6
 8014ce4:	d12b      	bne.n	8014d3e <_strtod_l+0xce>
 8014ce6:	3501      	adds	r5, #1
 8014ce8:	2300      	movs	r3, #0
 8014cea:	951b      	str	r5, [sp, #108]	; 0x6c
 8014cec:	930d      	str	r3, [sp, #52]	; 0x34
 8014cee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014cf0:	2b00      	cmp	r3, #0
 8014cf2:	f040 859a 	bne.w	801582a <_strtod_l+0xbba>
 8014cf6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014cf8:	b1e3      	cbz	r3, 8014d34 <_strtod_l+0xc4>
 8014cfa:	4652      	mov	r2, sl
 8014cfc:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8014d00:	ec43 2b10 	vmov	d0, r2, r3
 8014d04:	b021      	add	sp, #132	; 0x84
 8014d06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d0a:	2a2b      	cmp	r2, #43	; 0x2b
 8014d0c:	d015      	beq.n	8014d3a <_strtod_l+0xca>
 8014d0e:	2a2d      	cmp	r2, #45	; 0x2d
 8014d10:	d004      	beq.n	8014d1c <_strtod_l+0xac>
 8014d12:	2a20      	cmp	r2, #32
 8014d14:	d1ca      	bne.n	8014cac <_strtod_l+0x3c>
 8014d16:	3301      	adds	r3, #1
 8014d18:	931b      	str	r3, [sp, #108]	; 0x6c
 8014d1a:	e7bf      	b.n	8014c9c <_strtod_l+0x2c>
 8014d1c:	2201      	movs	r2, #1
 8014d1e:	920d      	str	r2, [sp, #52]	; 0x34
 8014d20:	1c5a      	adds	r2, r3, #1
 8014d22:	921b      	str	r2, [sp, #108]	; 0x6c
 8014d24:	785b      	ldrb	r3, [r3, #1]
 8014d26:	2b00      	cmp	r3, #0
 8014d28:	d1c2      	bne.n	8014cb0 <_strtod_l+0x40>
 8014d2a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8014d2c:	961b      	str	r6, [sp, #108]	; 0x6c
 8014d2e:	2b00      	cmp	r3, #0
 8014d30:	f040 8579 	bne.w	8015826 <_strtod_l+0xbb6>
 8014d34:	4652      	mov	r2, sl
 8014d36:	465b      	mov	r3, fp
 8014d38:	e7e2      	b.n	8014d00 <_strtod_l+0x90>
 8014d3a:	2200      	movs	r2, #0
 8014d3c:	e7ef      	b.n	8014d1e <_strtod_l+0xae>
 8014d3e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8014d40:	b13a      	cbz	r2, 8014d52 <_strtod_l+0xe2>
 8014d42:	2135      	movs	r1, #53	; 0x35
 8014d44:	a81e      	add	r0, sp, #120	; 0x78
 8014d46:	f002 fbb1 	bl	80174ac <__copybits>
 8014d4a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8014d4c:	4648      	mov	r0, r9
 8014d4e:	f002 f81d 	bl	8016d8c <_Bfree>
 8014d52:	3c01      	subs	r4, #1
 8014d54:	2c04      	cmp	r4, #4
 8014d56:	d806      	bhi.n	8014d66 <_strtod_l+0xf6>
 8014d58:	e8df f004 	tbb	[pc, r4]
 8014d5c:	1714030a 	.word	0x1714030a
 8014d60:	0a          	.byte	0x0a
 8014d61:	00          	.byte	0x00
 8014d62:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8014d66:	0730      	lsls	r0, r6, #28
 8014d68:	d5c1      	bpl.n	8014cee <_strtod_l+0x7e>
 8014d6a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8014d6e:	e7be      	b.n	8014cee <_strtod_l+0x7e>
 8014d70:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8014d74:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8014d76:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8014d7a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8014d7e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8014d82:	e7f0      	b.n	8014d66 <_strtod_l+0xf6>
 8014d84:	f8df b170 	ldr.w	fp, [pc, #368]	; 8014ef8 <_strtod_l+0x288>
 8014d88:	e7ed      	b.n	8014d66 <_strtod_l+0xf6>
 8014d8a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8014d8e:	f04f 3aff 	mov.w	sl, #4294967295
 8014d92:	e7e8      	b.n	8014d66 <_strtod_l+0xf6>
 8014d94:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014d96:	1c5a      	adds	r2, r3, #1
 8014d98:	921b      	str	r2, [sp, #108]	; 0x6c
 8014d9a:	785b      	ldrb	r3, [r3, #1]
 8014d9c:	2b30      	cmp	r3, #48	; 0x30
 8014d9e:	d0f9      	beq.n	8014d94 <_strtod_l+0x124>
 8014da0:	2b00      	cmp	r3, #0
 8014da2:	d0a4      	beq.n	8014cee <_strtod_l+0x7e>
 8014da4:	2301      	movs	r3, #1
 8014da6:	2500      	movs	r5, #0
 8014da8:	9306      	str	r3, [sp, #24]
 8014daa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014dac:	9308      	str	r3, [sp, #32]
 8014dae:	9507      	str	r5, [sp, #28]
 8014db0:	9505      	str	r5, [sp, #20]
 8014db2:	220a      	movs	r2, #10
 8014db4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8014db6:	7807      	ldrb	r7, [r0, #0]
 8014db8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8014dbc:	b2d9      	uxtb	r1, r3
 8014dbe:	2909      	cmp	r1, #9
 8014dc0:	d929      	bls.n	8014e16 <_strtod_l+0x1a6>
 8014dc2:	4622      	mov	r2, r4
 8014dc4:	f8d8 1000 	ldr.w	r1, [r8]
 8014dc8:	f003 f8f8 	bl	8017fbc <strncmp>
 8014dcc:	2800      	cmp	r0, #0
 8014dce:	d031      	beq.n	8014e34 <_strtod_l+0x1c4>
 8014dd0:	2000      	movs	r0, #0
 8014dd2:	9c05      	ldr	r4, [sp, #20]
 8014dd4:	9004      	str	r0, [sp, #16]
 8014dd6:	463b      	mov	r3, r7
 8014dd8:	4602      	mov	r2, r0
 8014dda:	2b65      	cmp	r3, #101	; 0x65
 8014ddc:	d001      	beq.n	8014de2 <_strtod_l+0x172>
 8014dde:	2b45      	cmp	r3, #69	; 0x45
 8014de0:	d114      	bne.n	8014e0c <_strtod_l+0x19c>
 8014de2:	b924      	cbnz	r4, 8014dee <_strtod_l+0x17e>
 8014de4:	b910      	cbnz	r0, 8014dec <_strtod_l+0x17c>
 8014de6:	9b06      	ldr	r3, [sp, #24]
 8014de8:	2b00      	cmp	r3, #0
 8014dea:	d09e      	beq.n	8014d2a <_strtod_l+0xba>
 8014dec:	2400      	movs	r4, #0
 8014dee:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8014df0:	1c73      	adds	r3, r6, #1
 8014df2:	931b      	str	r3, [sp, #108]	; 0x6c
 8014df4:	7873      	ldrb	r3, [r6, #1]
 8014df6:	2b2b      	cmp	r3, #43	; 0x2b
 8014df8:	d078      	beq.n	8014eec <_strtod_l+0x27c>
 8014dfa:	2b2d      	cmp	r3, #45	; 0x2d
 8014dfc:	d070      	beq.n	8014ee0 <_strtod_l+0x270>
 8014dfe:	f04f 0c00 	mov.w	ip, #0
 8014e02:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8014e06:	2f09      	cmp	r7, #9
 8014e08:	d97c      	bls.n	8014f04 <_strtod_l+0x294>
 8014e0a:	961b      	str	r6, [sp, #108]	; 0x6c
 8014e0c:	f04f 0e00 	mov.w	lr, #0
 8014e10:	e09a      	b.n	8014f48 <_strtod_l+0x2d8>
 8014e12:	2300      	movs	r3, #0
 8014e14:	e7c7      	b.n	8014da6 <_strtod_l+0x136>
 8014e16:	9905      	ldr	r1, [sp, #20]
 8014e18:	2908      	cmp	r1, #8
 8014e1a:	bfdd      	ittte	le
 8014e1c:	9907      	ldrle	r1, [sp, #28]
 8014e1e:	fb02 3301 	mlale	r3, r2, r1, r3
 8014e22:	9307      	strle	r3, [sp, #28]
 8014e24:	fb02 3505 	mlagt	r5, r2, r5, r3
 8014e28:	9b05      	ldr	r3, [sp, #20]
 8014e2a:	3001      	adds	r0, #1
 8014e2c:	3301      	adds	r3, #1
 8014e2e:	9305      	str	r3, [sp, #20]
 8014e30:	901b      	str	r0, [sp, #108]	; 0x6c
 8014e32:	e7bf      	b.n	8014db4 <_strtod_l+0x144>
 8014e34:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014e36:	191a      	adds	r2, r3, r4
 8014e38:	921b      	str	r2, [sp, #108]	; 0x6c
 8014e3a:	9a05      	ldr	r2, [sp, #20]
 8014e3c:	5d1b      	ldrb	r3, [r3, r4]
 8014e3e:	2a00      	cmp	r2, #0
 8014e40:	d037      	beq.n	8014eb2 <_strtod_l+0x242>
 8014e42:	9c05      	ldr	r4, [sp, #20]
 8014e44:	4602      	mov	r2, r0
 8014e46:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8014e4a:	2909      	cmp	r1, #9
 8014e4c:	d913      	bls.n	8014e76 <_strtod_l+0x206>
 8014e4e:	2101      	movs	r1, #1
 8014e50:	9104      	str	r1, [sp, #16]
 8014e52:	e7c2      	b.n	8014dda <_strtod_l+0x16a>
 8014e54:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014e56:	1c5a      	adds	r2, r3, #1
 8014e58:	921b      	str	r2, [sp, #108]	; 0x6c
 8014e5a:	785b      	ldrb	r3, [r3, #1]
 8014e5c:	3001      	adds	r0, #1
 8014e5e:	2b30      	cmp	r3, #48	; 0x30
 8014e60:	d0f8      	beq.n	8014e54 <_strtod_l+0x1e4>
 8014e62:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8014e66:	2a08      	cmp	r2, #8
 8014e68:	f200 84e4 	bhi.w	8015834 <_strtod_l+0xbc4>
 8014e6c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8014e6e:	9208      	str	r2, [sp, #32]
 8014e70:	4602      	mov	r2, r0
 8014e72:	2000      	movs	r0, #0
 8014e74:	4604      	mov	r4, r0
 8014e76:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8014e7a:	f100 0101 	add.w	r1, r0, #1
 8014e7e:	d012      	beq.n	8014ea6 <_strtod_l+0x236>
 8014e80:	440a      	add	r2, r1
 8014e82:	eb00 0c04 	add.w	ip, r0, r4
 8014e86:	4621      	mov	r1, r4
 8014e88:	270a      	movs	r7, #10
 8014e8a:	458c      	cmp	ip, r1
 8014e8c:	d113      	bne.n	8014eb6 <_strtod_l+0x246>
 8014e8e:	1821      	adds	r1, r4, r0
 8014e90:	2908      	cmp	r1, #8
 8014e92:	f104 0401 	add.w	r4, r4, #1
 8014e96:	4404      	add	r4, r0
 8014e98:	dc19      	bgt.n	8014ece <_strtod_l+0x25e>
 8014e9a:	9b07      	ldr	r3, [sp, #28]
 8014e9c:	210a      	movs	r1, #10
 8014e9e:	fb01 e303 	mla	r3, r1, r3, lr
 8014ea2:	9307      	str	r3, [sp, #28]
 8014ea4:	2100      	movs	r1, #0
 8014ea6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014ea8:	1c58      	adds	r0, r3, #1
 8014eaa:	901b      	str	r0, [sp, #108]	; 0x6c
 8014eac:	785b      	ldrb	r3, [r3, #1]
 8014eae:	4608      	mov	r0, r1
 8014eb0:	e7c9      	b.n	8014e46 <_strtod_l+0x1d6>
 8014eb2:	9805      	ldr	r0, [sp, #20]
 8014eb4:	e7d3      	b.n	8014e5e <_strtod_l+0x1ee>
 8014eb6:	2908      	cmp	r1, #8
 8014eb8:	f101 0101 	add.w	r1, r1, #1
 8014ebc:	dc03      	bgt.n	8014ec6 <_strtod_l+0x256>
 8014ebe:	9b07      	ldr	r3, [sp, #28]
 8014ec0:	437b      	muls	r3, r7
 8014ec2:	9307      	str	r3, [sp, #28]
 8014ec4:	e7e1      	b.n	8014e8a <_strtod_l+0x21a>
 8014ec6:	2910      	cmp	r1, #16
 8014ec8:	bfd8      	it	le
 8014eca:	437d      	mulle	r5, r7
 8014ecc:	e7dd      	b.n	8014e8a <_strtod_l+0x21a>
 8014ece:	2c10      	cmp	r4, #16
 8014ed0:	bfdc      	itt	le
 8014ed2:	210a      	movle	r1, #10
 8014ed4:	fb01 e505 	mlale	r5, r1, r5, lr
 8014ed8:	e7e4      	b.n	8014ea4 <_strtod_l+0x234>
 8014eda:	2301      	movs	r3, #1
 8014edc:	9304      	str	r3, [sp, #16]
 8014ede:	e781      	b.n	8014de4 <_strtod_l+0x174>
 8014ee0:	f04f 0c01 	mov.w	ip, #1
 8014ee4:	1cb3      	adds	r3, r6, #2
 8014ee6:	931b      	str	r3, [sp, #108]	; 0x6c
 8014ee8:	78b3      	ldrb	r3, [r6, #2]
 8014eea:	e78a      	b.n	8014e02 <_strtod_l+0x192>
 8014eec:	f04f 0c00 	mov.w	ip, #0
 8014ef0:	e7f8      	b.n	8014ee4 <_strtod_l+0x274>
 8014ef2:	bf00      	nop
 8014ef4:	08018a58 	.word	0x08018a58
 8014ef8:	7ff00000 	.word	0x7ff00000
 8014efc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014efe:	1c5f      	adds	r7, r3, #1
 8014f00:	971b      	str	r7, [sp, #108]	; 0x6c
 8014f02:	785b      	ldrb	r3, [r3, #1]
 8014f04:	2b30      	cmp	r3, #48	; 0x30
 8014f06:	d0f9      	beq.n	8014efc <_strtod_l+0x28c>
 8014f08:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8014f0c:	2f08      	cmp	r7, #8
 8014f0e:	f63f af7d 	bhi.w	8014e0c <_strtod_l+0x19c>
 8014f12:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8014f16:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014f18:	930a      	str	r3, [sp, #40]	; 0x28
 8014f1a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014f1c:	1c5f      	adds	r7, r3, #1
 8014f1e:	971b      	str	r7, [sp, #108]	; 0x6c
 8014f20:	785b      	ldrb	r3, [r3, #1]
 8014f22:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8014f26:	f1b8 0f09 	cmp.w	r8, #9
 8014f2a:	d937      	bls.n	8014f9c <_strtod_l+0x32c>
 8014f2c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8014f2e:	1a7f      	subs	r7, r7, r1
 8014f30:	2f08      	cmp	r7, #8
 8014f32:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8014f36:	dc37      	bgt.n	8014fa8 <_strtod_l+0x338>
 8014f38:	45be      	cmp	lr, r7
 8014f3a:	bfa8      	it	ge
 8014f3c:	46be      	movge	lr, r7
 8014f3e:	f1bc 0f00 	cmp.w	ip, #0
 8014f42:	d001      	beq.n	8014f48 <_strtod_l+0x2d8>
 8014f44:	f1ce 0e00 	rsb	lr, lr, #0
 8014f48:	2c00      	cmp	r4, #0
 8014f4a:	d151      	bne.n	8014ff0 <_strtod_l+0x380>
 8014f4c:	2800      	cmp	r0, #0
 8014f4e:	f47f aece 	bne.w	8014cee <_strtod_l+0x7e>
 8014f52:	9a06      	ldr	r2, [sp, #24]
 8014f54:	2a00      	cmp	r2, #0
 8014f56:	f47f aeca 	bne.w	8014cee <_strtod_l+0x7e>
 8014f5a:	9a04      	ldr	r2, [sp, #16]
 8014f5c:	2a00      	cmp	r2, #0
 8014f5e:	f47f aee4 	bne.w	8014d2a <_strtod_l+0xba>
 8014f62:	2b4e      	cmp	r3, #78	; 0x4e
 8014f64:	d027      	beq.n	8014fb6 <_strtod_l+0x346>
 8014f66:	dc21      	bgt.n	8014fac <_strtod_l+0x33c>
 8014f68:	2b49      	cmp	r3, #73	; 0x49
 8014f6a:	f47f aede 	bne.w	8014d2a <_strtod_l+0xba>
 8014f6e:	49a0      	ldr	r1, [pc, #640]	; (80151f0 <_strtod_l+0x580>)
 8014f70:	a81b      	add	r0, sp, #108	; 0x6c
 8014f72:	f001 fdf7 	bl	8016b64 <__match>
 8014f76:	2800      	cmp	r0, #0
 8014f78:	f43f aed7 	beq.w	8014d2a <_strtod_l+0xba>
 8014f7c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014f7e:	499d      	ldr	r1, [pc, #628]	; (80151f4 <_strtod_l+0x584>)
 8014f80:	3b01      	subs	r3, #1
 8014f82:	a81b      	add	r0, sp, #108	; 0x6c
 8014f84:	931b      	str	r3, [sp, #108]	; 0x6c
 8014f86:	f001 fded 	bl	8016b64 <__match>
 8014f8a:	b910      	cbnz	r0, 8014f92 <_strtod_l+0x322>
 8014f8c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014f8e:	3301      	adds	r3, #1
 8014f90:	931b      	str	r3, [sp, #108]	; 0x6c
 8014f92:	f8df b274 	ldr.w	fp, [pc, #628]	; 8015208 <_strtod_l+0x598>
 8014f96:	f04f 0a00 	mov.w	sl, #0
 8014f9a:	e6a8      	b.n	8014cee <_strtod_l+0x7e>
 8014f9c:	210a      	movs	r1, #10
 8014f9e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8014fa2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8014fa6:	e7b8      	b.n	8014f1a <_strtod_l+0x2aa>
 8014fa8:	46be      	mov	lr, r7
 8014faa:	e7c8      	b.n	8014f3e <_strtod_l+0x2ce>
 8014fac:	2b69      	cmp	r3, #105	; 0x69
 8014fae:	d0de      	beq.n	8014f6e <_strtod_l+0x2fe>
 8014fb0:	2b6e      	cmp	r3, #110	; 0x6e
 8014fb2:	f47f aeba 	bne.w	8014d2a <_strtod_l+0xba>
 8014fb6:	4990      	ldr	r1, [pc, #576]	; (80151f8 <_strtod_l+0x588>)
 8014fb8:	a81b      	add	r0, sp, #108	; 0x6c
 8014fba:	f001 fdd3 	bl	8016b64 <__match>
 8014fbe:	2800      	cmp	r0, #0
 8014fc0:	f43f aeb3 	beq.w	8014d2a <_strtod_l+0xba>
 8014fc4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8014fc6:	781b      	ldrb	r3, [r3, #0]
 8014fc8:	2b28      	cmp	r3, #40	; 0x28
 8014fca:	d10e      	bne.n	8014fea <_strtod_l+0x37a>
 8014fcc:	aa1e      	add	r2, sp, #120	; 0x78
 8014fce:	498b      	ldr	r1, [pc, #556]	; (80151fc <_strtod_l+0x58c>)
 8014fd0:	a81b      	add	r0, sp, #108	; 0x6c
 8014fd2:	f001 fddb 	bl	8016b8c <__hexnan>
 8014fd6:	2805      	cmp	r0, #5
 8014fd8:	d107      	bne.n	8014fea <_strtod_l+0x37a>
 8014fda:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8014fdc:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8014fe0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8014fe4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8014fe8:	e681      	b.n	8014cee <_strtod_l+0x7e>
 8014fea:	f8df b224 	ldr.w	fp, [pc, #548]	; 8015210 <_strtod_l+0x5a0>
 8014fee:	e7d2      	b.n	8014f96 <_strtod_l+0x326>
 8014ff0:	ebae 0302 	sub.w	r3, lr, r2
 8014ff4:	9306      	str	r3, [sp, #24]
 8014ff6:	9b05      	ldr	r3, [sp, #20]
 8014ff8:	9807      	ldr	r0, [sp, #28]
 8014ffa:	2b00      	cmp	r3, #0
 8014ffc:	bf08      	it	eq
 8014ffe:	4623      	moveq	r3, r4
 8015000:	2c10      	cmp	r4, #16
 8015002:	9305      	str	r3, [sp, #20]
 8015004:	46a0      	mov	r8, r4
 8015006:	bfa8      	it	ge
 8015008:	f04f 0810 	movge.w	r8, #16
 801500c:	f7eb fa92 	bl	8000534 <__aeabi_ui2d>
 8015010:	2c09      	cmp	r4, #9
 8015012:	4682      	mov	sl, r0
 8015014:	468b      	mov	fp, r1
 8015016:	dc13      	bgt.n	8015040 <_strtod_l+0x3d0>
 8015018:	9b06      	ldr	r3, [sp, #24]
 801501a:	2b00      	cmp	r3, #0
 801501c:	f43f ae67 	beq.w	8014cee <_strtod_l+0x7e>
 8015020:	9b06      	ldr	r3, [sp, #24]
 8015022:	dd7a      	ble.n	801511a <_strtod_l+0x4aa>
 8015024:	2b16      	cmp	r3, #22
 8015026:	dc61      	bgt.n	80150ec <_strtod_l+0x47c>
 8015028:	4a75      	ldr	r2, [pc, #468]	; (8015200 <_strtod_l+0x590>)
 801502a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 801502e:	e9de 0100 	ldrd	r0, r1, [lr]
 8015032:	4652      	mov	r2, sl
 8015034:	465b      	mov	r3, fp
 8015036:	f7eb faf7 	bl	8000628 <__aeabi_dmul>
 801503a:	4682      	mov	sl, r0
 801503c:	468b      	mov	fp, r1
 801503e:	e656      	b.n	8014cee <_strtod_l+0x7e>
 8015040:	4b6f      	ldr	r3, [pc, #444]	; (8015200 <_strtod_l+0x590>)
 8015042:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8015046:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801504a:	f7eb faed 	bl	8000628 <__aeabi_dmul>
 801504e:	4606      	mov	r6, r0
 8015050:	4628      	mov	r0, r5
 8015052:	460f      	mov	r7, r1
 8015054:	f7eb fa6e 	bl	8000534 <__aeabi_ui2d>
 8015058:	4602      	mov	r2, r0
 801505a:	460b      	mov	r3, r1
 801505c:	4630      	mov	r0, r6
 801505e:	4639      	mov	r1, r7
 8015060:	f7eb f92c 	bl	80002bc <__adddf3>
 8015064:	2c0f      	cmp	r4, #15
 8015066:	4682      	mov	sl, r0
 8015068:	468b      	mov	fp, r1
 801506a:	ddd5      	ble.n	8015018 <_strtod_l+0x3a8>
 801506c:	9b06      	ldr	r3, [sp, #24]
 801506e:	eba4 0808 	sub.w	r8, r4, r8
 8015072:	4498      	add	r8, r3
 8015074:	f1b8 0f00 	cmp.w	r8, #0
 8015078:	f340 8096 	ble.w	80151a8 <_strtod_l+0x538>
 801507c:	f018 030f 	ands.w	r3, r8, #15
 8015080:	d00a      	beq.n	8015098 <_strtod_l+0x428>
 8015082:	495f      	ldr	r1, [pc, #380]	; (8015200 <_strtod_l+0x590>)
 8015084:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8015088:	4652      	mov	r2, sl
 801508a:	465b      	mov	r3, fp
 801508c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015090:	f7eb faca 	bl	8000628 <__aeabi_dmul>
 8015094:	4682      	mov	sl, r0
 8015096:	468b      	mov	fp, r1
 8015098:	f038 080f 	bics.w	r8, r8, #15
 801509c:	d073      	beq.n	8015186 <_strtod_l+0x516>
 801509e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80150a2:	dd47      	ble.n	8015134 <_strtod_l+0x4c4>
 80150a4:	2400      	movs	r4, #0
 80150a6:	46a0      	mov	r8, r4
 80150a8:	9407      	str	r4, [sp, #28]
 80150aa:	9405      	str	r4, [sp, #20]
 80150ac:	2322      	movs	r3, #34	; 0x22
 80150ae:	f8df b158 	ldr.w	fp, [pc, #344]	; 8015208 <_strtod_l+0x598>
 80150b2:	f8c9 3000 	str.w	r3, [r9]
 80150b6:	f04f 0a00 	mov.w	sl, #0
 80150ba:	9b07      	ldr	r3, [sp, #28]
 80150bc:	2b00      	cmp	r3, #0
 80150be:	f43f ae16 	beq.w	8014cee <_strtod_l+0x7e>
 80150c2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80150c4:	4648      	mov	r0, r9
 80150c6:	f001 fe61 	bl	8016d8c <_Bfree>
 80150ca:	9905      	ldr	r1, [sp, #20]
 80150cc:	4648      	mov	r0, r9
 80150ce:	f001 fe5d 	bl	8016d8c <_Bfree>
 80150d2:	4641      	mov	r1, r8
 80150d4:	4648      	mov	r0, r9
 80150d6:	f001 fe59 	bl	8016d8c <_Bfree>
 80150da:	9907      	ldr	r1, [sp, #28]
 80150dc:	4648      	mov	r0, r9
 80150de:	f001 fe55 	bl	8016d8c <_Bfree>
 80150e2:	4621      	mov	r1, r4
 80150e4:	4648      	mov	r0, r9
 80150e6:	f001 fe51 	bl	8016d8c <_Bfree>
 80150ea:	e600      	b.n	8014cee <_strtod_l+0x7e>
 80150ec:	9a06      	ldr	r2, [sp, #24]
 80150ee:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80150f2:	4293      	cmp	r3, r2
 80150f4:	dbba      	blt.n	801506c <_strtod_l+0x3fc>
 80150f6:	4d42      	ldr	r5, [pc, #264]	; (8015200 <_strtod_l+0x590>)
 80150f8:	f1c4 040f 	rsb	r4, r4, #15
 80150fc:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8015100:	4652      	mov	r2, sl
 8015102:	465b      	mov	r3, fp
 8015104:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015108:	f7eb fa8e 	bl	8000628 <__aeabi_dmul>
 801510c:	9b06      	ldr	r3, [sp, #24]
 801510e:	1b1c      	subs	r4, r3, r4
 8015110:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8015114:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015118:	e78d      	b.n	8015036 <_strtod_l+0x3c6>
 801511a:	f113 0f16 	cmn.w	r3, #22
 801511e:	dba5      	blt.n	801506c <_strtod_l+0x3fc>
 8015120:	4a37      	ldr	r2, [pc, #220]	; (8015200 <_strtod_l+0x590>)
 8015122:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8015126:	e9d2 2300 	ldrd	r2, r3, [r2]
 801512a:	4650      	mov	r0, sl
 801512c:	4659      	mov	r1, fp
 801512e:	f7eb fba5 	bl	800087c <__aeabi_ddiv>
 8015132:	e782      	b.n	801503a <_strtod_l+0x3ca>
 8015134:	2300      	movs	r3, #0
 8015136:	4e33      	ldr	r6, [pc, #204]	; (8015204 <_strtod_l+0x594>)
 8015138:	ea4f 1828 	mov.w	r8, r8, asr #4
 801513c:	4650      	mov	r0, sl
 801513e:	4659      	mov	r1, fp
 8015140:	461d      	mov	r5, r3
 8015142:	f1b8 0f01 	cmp.w	r8, #1
 8015146:	dc21      	bgt.n	801518c <_strtod_l+0x51c>
 8015148:	b10b      	cbz	r3, 801514e <_strtod_l+0x4de>
 801514a:	4682      	mov	sl, r0
 801514c:	468b      	mov	fp, r1
 801514e:	4b2d      	ldr	r3, [pc, #180]	; (8015204 <_strtod_l+0x594>)
 8015150:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8015154:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8015158:	4652      	mov	r2, sl
 801515a:	465b      	mov	r3, fp
 801515c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8015160:	f7eb fa62 	bl	8000628 <__aeabi_dmul>
 8015164:	4b28      	ldr	r3, [pc, #160]	; (8015208 <_strtod_l+0x598>)
 8015166:	460a      	mov	r2, r1
 8015168:	400b      	ands	r3, r1
 801516a:	4928      	ldr	r1, [pc, #160]	; (801520c <_strtod_l+0x59c>)
 801516c:	428b      	cmp	r3, r1
 801516e:	4682      	mov	sl, r0
 8015170:	d898      	bhi.n	80150a4 <_strtod_l+0x434>
 8015172:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8015176:	428b      	cmp	r3, r1
 8015178:	bf86      	itte	hi
 801517a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8015214 <_strtod_l+0x5a4>
 801517e:	f04f 3aff 	movhi.w	sl, #4294967295
 8015182:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8015186:	2300      	movs	r3, #0
 8015188:	9304      	str	r3, [sp, #16]
 801518a:	e077      	b.n	801527c <_strtod_l+0x60c>
 801518c:	f018 0f01 	tst.w	r8, #1
 8015190:	d006      	beq.n	80151a0 <_strtod_l+0x530>
 8015192:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8015196:	e9d3 2300 	ldrd	r2, r3, [r3]
 801519a:	f7eb fa45 	bl	8000628 <__aeabi_dmul>
 801519e:	2301      	movs	r3, #1
 80151a0:	3501      	adds	r5, #1
 80151a2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80151a6:	e7cc      	b.n	8015142 <_strtod_l+0x4d2>
 80151a8:	d0ed      	beq.n	8015186 <_strtod_l+0x516>
 80151aa:	f1c8 0800 	rsb	r8, r8, #0
 80151ae:	f018 020f 	ands.w	r2, r8, #15
 80151b2:	d00a      	beq.n	80151ca <_strtod_l+0x55a>
 80151b4:	4b12      	ldr	r3, [pc, #72]	; (8015200 <_strtod_l+0x590>)
 80151b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80151ba:	4650      	mov	r0, sl
 80151bc:	4659      	mov	r1, fp
 80151be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151c2:	f7eb fb5b 	bl	800087c <__aeabi_ddiv>
 80151c6:	4682      	mov	sl, r0
 80151c8:	468b      	mov	fp, r1
 80151ca:	ea5f 1828 	movs.w	r8, r8, asr #4
 80151ce:	d0da      	beq.n	8015186 <_strtod_l+0x516>
 80151d0:	f1b8 0f1f 	cmp.w	r8, #31
 80151d4:	dd20      	ble.n	8015218 <_strtod_l+0x5a8>
 80151d6:	2400      	movs	r4, #0
 80151d8:	46a0      	mov	r8, r4
 80151da:	9407      	str	r4, [sp, #28]
 80151dc:	9405      	str	r4, [sp, #20]
 80151de:	2322      	movs	r3, #34	; 0x22
 80151e0:	f04f 0a00 	mov.w	sl, #0
 80151e4:	f04f 0b00 	mov.w	fp, #0
 80151e8:	f8c9 3000 	str.w	r3, [r9]
 80151ec:	e765      	b.n	80150ba <_strtod_l+0x44a>
 80151ee:	bf00      	nop
 80151f0:	08018a25 	.word	0x08018a25
 80151f4:	08018aab 	.word	0x08018aab
 80151f8:	08018a2d 	.word	0x08018a2d
 80151fc:	08018a6c 	.word	0x08018a6c
 8015200:	08018b50 	.word	0x08018b50
 8015204:	08018b28 	.word	0x08018b28
 8015208:	7ff00000 	.word	0x7ff00000
 801520c:	7ca00000 	.word	0x7ca00000
 8015210:	fff80000 	.word	0xfff80000
 8015214:	7fefffff 	.word	0x7fefffff
 8015218:	f018 0310 	ands.w	r3, r8, #16
 801521c:	bf18      	it	ne
 801521e:	236a      	movne	r3, #106	; 0x6a
 8015220:	4da0      	ldr	r5, [pc, #640]	; (80154a4 <_strtod_l+0x834>)
 8015222:	9304      	str	r3, [sp, #16]
 8015224:	4650      	mov	r0, sl
 8015226:	4659      	mov	r1, fp
 8015228:	2300      	movs	r3, #0
 801522a:	f1b8 0f00 	cmp.w	r8, #0
 801522e:	f300 810a 	bgt.w	8015446 <_strtod_l+0x7d6>
 8015232:	b10b      	cbz	r3, 8015238 <_strtod_l+0x5c8>
 8015234:	4682      	mov	sl, r0
 8015236:	468b      	mov	fp, r1
 8015238:	9b04      	ldr	r3, [sp, #16]
 801523a:	b1bb      	cbz	r3, 801526c <_strtod_l+0x5fc>
 801523c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8015240:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8015244:	2b00      	cmp	r3, #0
 8015246:	4659      	mov	r1, fp
 8015248:	dd10      	ble.n	801526c <_strtod_l+0x5fc>
 801524a:	2b1f      	cmp	r3, #31
 801524c:	f340 8107 	ble.w	801545e <_strtod_l+0x7ee>
 8015250:	2b34      	cmp	r3, #52	; 0x34
 8015252:	bfde      	ittt	le
 8015254:	3b20      	suble	r3, #32
 8015256:	f04f 32ff 	movle.w	r2, #4294967295
 801525a:	fa02 f303 	lslle.w	r3, r2, r3
 801525e:	f04f 0a00 	mov.w	sl, #0
 8015262:	bfcc      	ite	gt
 8015264:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8015268:	ea03 0b01 	andle.w	fp, r3, r1
 801526c:	2200      	movs	r2, #0
 801526e:	2300      	movs	r3, #0
 8015270:	4650      	mov	r0, sl
 8015272:	4659      	mov	r1, fp
 8015274:	f7eb fc40 	bl	8000af8 <__aeabi_dcmpeq>
 8015278:	2800      	cmp	r0, #0
 801527a:	d1ac      	bne.n	80151d6 <_strtod_l+0x566>
 801527c:	9b07      	ldr	r3, [sp, #28]
 801527e:	9300      	str	r3, [sp, #0]
 8015280:	9a05      	ldr	r2, [sp, #20]
 8015282:	9908      	ldr	r1, [sp, #32]
 8015284:	4623      	mov	r3, r4
 8015286:	4648      	mov	r0, r9
 8015288:	f001 fdd2 	bl	8016e30 <__s2b>
 801528c:	9007      	str	r0, [sp, #28]
 801528e:	2800      	cmp	r0, #0
 8015290:	f43f af08 	beq.w	80150a4 <_strtod_l+0x434>
 8015294:	9a06      	ldr	r2, [sp, #24]
 8015296:	9b06      	ldr	r3, [sp, #24]
 8015298:	2a00      	cmp	r2, #0
 801529a:	f1c3 0300 	rsb	r3, r3, #0
 801529e:	bfa8      	it	ge
 80152a0:	2300      	movge	r3, #0
 80152a2:	930e      	str	r3, [sp, #56]	; 0x38
 80152a4:	2400      	movs	r4, #0
 80152a6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80152aa:	9316      	str	r3, [sp, #88]	; 0x58
 80152ac:	46a0      	mov	r8, r4
 80152ae:	9b07      	ldr	r3, [sp, #28]
 80152b0:	4648      	mov	r0, r9
 80152b2:	6859      	ldr	r1, [r3, #4]
 80152b4:	f001 fd36 	bl	8016d24 <_Balloc>
 80152b8:	9005      	str	r0, [sp, #20]
 80152ba:	2800      	cmp	r0, #0
 80152bc:	f43f aef6 	beq.w	80150ac <_strtod_l+0x43c>
 80152c0:	9b07      	ldr	r3, [sp, #28]
 80152c2:	691a      	ldr	r2, [r3, #16]
 80152c4:	3202      	adds	r2, #2
 80152c6:	f103 010c 	add.w	r1, r3, #12
 80152ca:	0092      	lsls	r2, r2, #2
 80152cc:	300c      	adds	r0, #12
 80152ce:	f7fe fdd3 	bl	8013e78 <memcpy>
 80152d2:	aa1e      	add	r2, sp, #120	; 0x78
 80152d4:	a91d      	add	r1, sp, #116	; 0x74
 80152d6:	ec4b ab10 	vmov	d0, sl, fp
 80152da:	4648      	mov	r0, r9
 80152dc:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80152e0:	f002 f862 	bl	80173a8 <__d2b>
 80152e4:	901c      	str	r0, [sp, #112]	; 0x70
 80152e6:	2800      	cmp	r0, #0
 80152e8:	f43f aee0 	beq.w	80150ac <_strtod_l+0x43c>
 80152ec:	2101      	movs	r1, #1
 80152ee:	4648      	mov	r0, r9
 80152f0:	f001 fe2a 	bl	8016f48 <__i2b>
 80152f4:	4680      	mov	r8, r0
 80152f6:	2800      	cmp	r0, #0
 80152f8:	f43f aed8 	beq.w	80150ac <_strtod_l+0x43c>
 80152fc:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80152fe:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8015300:	2e00      	cmp	r6, #0
 8015302:	bfab      	itete	ge
 8015304:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8015306:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8015308:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 801530a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 801530c:	bfac      	ite	ge
 801530e:	18f7      	addge	r7, r6, r3
 8015310:	1b9d      	sublt	r5, r3, r6
 8015312:	9b04      	ldr	r3, [sp, #16]
 8015314:	1af6      	subs	r6, r6, r3
 8015316:	4416      	add	r6, r2
 8015318:	4b63      	ldr	r3, [pc, #396]	; (80154a8 <_strtod_l+0x838>)
 801531a:	3e01      	subs	r6, #1
 801531c:	429e      	cmp	r6, r3
 801531e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8015322:	f280 80af 	bge.w	8015484 <_strtod_l+0x814>
 8015326:	1b9b      	subs	r3, r3, r6
 8015328:	2b1f      	cmp	r3, #31
 801532a:	eba2 0203 	sub.w	r2, r2, r3
 801532e:	f04f 0101 	mov.w	r1, #1
 8015332:	f300 809b 	bgt.w	801546c <_strtod_l+0x7fc>
 8015336:	fa01 f303 	lsl.w	r3, r1, r3
 801533a:	930f      	str	r3, [sp, #60]	; 0x3c
 801533c:	2300      	movs	r3, #0
 801533e:	930a      	str	r3, [sp, #40]	; 0x28
 8015340:	18be      	adds	r6, r7, r2
 8015342:	9b04      	ldr	r3, [sp, #16]
 8015344:	42b7      	cmp	r7, r6
 8015346:	4415      	add	r5, r2
 8015348:	441d      	add	r5, r3
 801534a:	463b      	mov	r3, r7
 801534c:	bfa8      	it	ge
 801534e:	4633      	movge	r3, r6
 8015350:	42ab      	cmp	r3, r5
 8015352:	bfa8      	it	ge
 8015354:	462b      	movge	r3, r5
 8015356:	2b00      	cmp	r3, #0
 8015358:	bfc2      	ittt	gt
 801535a:	1af6      	subgt	r6, r6, r3
 801535c:	1aed      	subgt	r5, r5, r3
 801535e:	1aff      	subgt	r7, r7, r3
 8015360:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8015362:	b1bb      	cbz	r3, 8015394 <_strtod_l+0x724>
 8015364:	4641      	mov	r1, r8
 8015366:	461a      	mov	r2, r3
 8015368:	4648      	mov	r0, r9
 801536a:	f001 fe8d 	bl	8017088 <__pow5mult>
 801536e:	4680      	mov	r8, r0
 8015370:	2800      	cmp	r0, #0
 8015372:	f43f ae9b 	beq.w	80150ac <_strtod_l+0x43c>
 8015376:	4601      	mov	r1, r0
 8015378:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801537a:	4648      	mov	r0, r9
 801537c:	f001 fded 	bl	8016f5a <__multiply>
 8015380:	900c      	str	r0, [sp, #48]	; 0x30
 8015382:	2800      	cmp	r0, #0
 8015384:	f43f ae92 	beq.w	80150ac <_strtod_l+0x43c>
 8015388:	991c      	ldr	r1, [sp, #112]	; 0x70
 801538a:	4648      	mov	r0, r9
 801538c:	f001 fcfe 	bl	8016d8c <_Bfree>
 8015390:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015392:	931c      	str	r3, [sp, #112]	; 0x70
 8015394:	2e00      	cmp	r6, #0
 8015396:	dc7a      	bgt.n	801548e <_strtod_l+0x81e>
 8015398:	9b06      	ldr	r3, [sp, #24]
 801539a:	2b00      	cmp	r3, #0
 801539c:	dd08      	ble.n	80153b0 <_strtod_l+0x740>
 801539e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80153a0:	9905      	ldr	r1, [sp, #20]
 80153a2:	4648      	mov	r0, r9
 80153a4:	f001 fe70 	bl	8017088 <__pow5mult>
 80153a8:	9005      	str	r0, [sp, #20]
 80153aa:	2800      	cmp	r0, #0
 80153ac:	f43f ae7e 	beq.w	80150ac <_strtod_l+0x43c>
 80153b0:	2d00      	cmp	r5, #0
 80153b2:	dd08      	ble.n	80153c6 <_strtod_l+0x756>
 80153b4:	462a      	mov	r2, r5
 80153b6:	9905      	ldr	r1, [sp, #20]
 80153b8:	4648      	mov	r0, r9
 80153ba:	f001 feb3 	bl	8017124 <__lshift>
 80153be:	9005      	str	r0, [sp, #20]
 80153c0:	2800      	cmp	r0, #0
 80153c2:	f43f ae73 	beq.w	80150ac <_strtod_l+0x43c>
 80153c6:	2f00      	cmp	r7, #0
 80153c8:	dd08      	ble.n	80153dc <_strtod_l+0x76c>
 80153ca:	4641      	mov	r1, r8
 80153cc:	463a      	mov	r2, r7
 80153ce:	4648      	mov	r0, r9
 80153d0:	f001 fea8 	bl	8017124 <__lshift>
 80153d4:	4680      	mov	r8, r0
 80153d6:	2800      	cmp	r0, #0
 80153d8:	f43f ae68 	beq.w	80150ac <_strtod_l+0x43c>
 80153dc:	9a05      	ldr	r2, [sp, #20]
 80153de:	991c      	ldr	r1, [sp, #112]	; 0x70
 80153e0:	4648      	mov	r0, r9
 80153e2:	f001 ff0d 	bl	8017200 <__mdiff>
 80153e6:	4604      	mov	r4, r0
 80153e8:	2800      	cmp	r0, #0
 80153ea:	f43f ae5f 	beq.w	80150ac <_strtod_l+0x43c>
 80153ee:	68c3      	ldr	r3, [r0, #12]
 80153f0:	930c      	str	r3, [sp, #48]	; 0x30
 80153f2:	2300      	movs	r3, #0
 80153f4:	60c3      	str	r3, [r0, #12]
 80153f6:	4641      	mov	r1, r8
 80153f8:	f001 fee8 	bl	80171cc <__mcmp>
 80153fc:	2800      	cmp	r0, #0
 80153fe:	da55      	bge.n	80154ac <_strtod_l+0x83c>
 8015400:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015402:	b9e3      	cbnz	r3, 801543e <_strtod_l+0x7ce>
 8015404:	f1ba 0f00 	cmp.w	sl, #0
 8015408:	d119      	bne.n	801543e <_strtod_l+0x7ce>
 801540a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801540e:	b9b3      	cbnz	r3, 801543e <_strtod_l+0x7ce>
 8015410:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8015414:	0d1b      	lsrs	r3, r3, #20
 8015416:	051b      	lsls	r3, r3, #20
 8015418:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801541c:	d90f      	bls.n	801543e <_strtod_l+0x7ce>
 801541e:	6963      	ldr	r3, [r4, #20]
 8015420:	b913      	cbnz	r3, 8015428 <_strtod_l+0x7b8>
 8015422:	6923      	ldr	r3, [r4, #16]
 8015424:	2b01      	cmp	r3, #1
 8015426:	dd0a      	ble.n	801543e <_strtod_l+0x7ce>
 8015428:	4621      	mov	r1, r4
 801542a:	2201      	movs	r2, #1
 801542c:	4648      	mov	r0, r9
 801542e:	f001 fe79 	bl	8017124 <__lshift>
 8015432:	4641      	mov	r1, r8
 8015434:	4604      	mov	r4, r0
 8015436:	f001 fec9 	bl	80171cc <__mcmp>
 801543a:	2800      	cmp	r0, #0
 801543c:	dc67      	bgt.n	801550e <_strtod_l+0x89e>
 801543e:	9b04      	ldr	r3, [sp, #16]
 8015440:	2b00      	cmp	r3, #0
 8015442:	d171      	bne.n	8015528 <_strtod_l+0x8b8>
 8015444:	e63d      	b.n	80150c2 <_strtod_l+0x452>
 8015446:	f018 0f01 	tst.w	r8, #1
 801544a:	d004      	beq.n	8015456 <_strtod_l+0x7e6>
 801544c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015450:	f7eb f8ea 	bl	8000628 <__aeabi_dmul>
 8015454:	2301      	movs	r3, #1
 8015456:	ea4f 0868 	mov.w	r8, r8, asr #1
 801545a:	3508      	adds	r5, #8
 801545c:	e6e5      	b.n	801522a <_strtod_l+0x5ba>
 801545e:	f04f 32ff 	mov.w	r2, #4294967295
 8015462:	fa02 f303 	lsl.w	r3, r2, r3
 8015466:	ea03 0a0a 	and.w	sl, r3, sl
 801546a:	e6ff      	b.n	801526c <_strtod_l+0x5fc>
 801546c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8015470:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8015474:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8015478:	36e2      	adds	r6, #226	; 0xe2
 801547a:	fa01 f306 	lsl.w	r3, r1, r6
 801547e:	930a      	str	r3, [sp, #40]	; 0x28
 8015480:	910f      	str	r1, [sp, #60]	; 0x3c
 8015482:	e75d      	b.n	8015340 <_strtod_l+0x6d0>
 8015484:	2300      	movs	r3, #0
 8015486:	930a      	str	r3, [sp, #40]	; 0x28
 8015488:	2301      	movs	r3, #1
 801548a:	930f      	str	r3, [sp, #60]	; 0x3c
 801548c:	e758      	b.n	8015340 <_strtod_l+0x6d0>
 801548e:	4632      	mov	r2, r6
 8015490:	991c      	ldr	r1, [sp, #112]	; 0x70
 8015492:	4648      	mov	r0, r9
 8015494:	f001 fe46 	bl	8017124 <__lshift>
 8015498:	901c      	str	r0, [sp, #112]	; 0x70
 801549a:	2800      	cmp	r0, #0
 801549c:	f47f af7c 	bne.w	8015398 <_strtod_l+0x728>
 80154a0:	e604      	b.n	80150ac <_strtod_l+0x43c>
 80154a2:	bf00      	nop
 80154a4:	08018a80 	.word	0x08018a80
 80154a8:	fffffc02 	.word	0xfffffc02
 80154ac:	465d      	mov	r5, fp
 80154ae:	f040 8086 	bne.w	80155be <_strtod_l+0x94e>
 80154b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80154b4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80154b8:	b32a      	cbz	r2, 8015506 <_strtod_l+0x896>
 80154ba:	4aaf      	ldr	r2, [pc, #700]	; (8015778 <_strtod_l+0xb08>)
 80154bc:	4293      	cmp	r3, r2
 80154be:	d153      	bne.n	8015568 <_strtod_l+0x8f8>
 80154c0:	9b04      	ldr	r3, [sp, #16]
 80154c2:	4650      	mov	r0, sl
 80154c4:	b1d3      	cbz	r3, 80154fc <_strtod_l+0x88c>
 80154c6:	4aad      	ldr	r2, [pc, #692]	; (801577c <_strtod_l+0xb0c>)
 80154c8:	402a      	ands	r2, r5
 80154ca:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80154ce:	f04f 31ff 	mov.w	r1, #4294967295
 80154d2:	d816      	bhi.n	8015502 <_strtod_l+0x892>
 80154d4:	0d12      	lsrs	r2, r2, #20
 80154d6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80154da:	fa01 f303 	lsl.w	r3, r1, r3
 80154de:	4298      	cmp	r0, r3
 80154e0:	d142      	bne.n	8015568 <_strtod_l+0x8f8>
 80154e2:	4ba7      	ldr	r3, [pc, #668]	; (8015780 <_strtod_l+0xb10>)
 80154e4:	429d      	cmp	r5, r3
 80154e6:	d102      	bne.n	80154ee <_strtod_l+0x87e>
 80154e8:	3001      	adds	r0, #1
 80154ea:	f43f addf 	beq.w	80150ac <_strtod_l+0x43c>
 80154ee:	4ba3      	ldr	r3, [pc, #652]	; (801577c <_strtod_l+0xb0c>)
 80154f0:	402b      	ands	r3, r5
 80154f2:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80154f6:	f04f 0a00 	mov.w	sl, #0
 80154fa:	e7a0      	b.n	801543e <_strtod_l+0x7ce>
 80154fc:	f04f 33ff 	mov.w	r3, #4294967295
 8015500:	e7ed      	b.n	80154de <_strtod_l+0x86e>
 8015502:	460b      	mov	r3, r1
 8015504:	e7eb      	b.n	80154de <_strtod_l+0x86e>
 8015506:	bb7b      	cbnz	r3, 8015568 <_strtod_l+0x8f8>
 8015508:	f1ba 0f00 	cmp.w	sl, #0
 801550c:	d12c      	bne.n	8015568 <_strtod_l+0x8f8>
 801550e:	9904      	ldr	r1, [sp, #16]
 8015510:	4a9a      	ldr	r2, [pc, #616]	; (801577c <_strtod_l+0xb0c>)
 8015512:	465b      	mov	r3, fp
 8015514:	b1f1      	cbz	r1, 8015554 <_strtod_l+0x8e4>
 8015516:	ea02 010b 	and.w	r1, r2, fp
 801551a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801551e:	dc19      	bgt.n	8015554 <_strtod_l+0x8e4>
 8015520:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8015524:	f77f ae5b 	ble.w	80151de <_strtod_l+0x56e>
 8015528:	4a96      	ldr	r2, [pc, #600]	; (8015784 <_strtod_l+0xb14>)
 801552a:	2300      	movs	r3, #0
 801552c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8015530:	4650      	mov	r0, sl
 8015532:	4659      	mov	r1, fp
 8015534:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8015538:	f7eb f876 	bl	8000628 <__aeabi_dmul>
 801553c:	4682      	mov	sl, r0
 801553e:	468b      	mov	fp, r1
 8015540:	2900      	cmp	r1, #0
 8015542:	f47f adbe 	bne.w	80150c2 <_strtod_l+0x452>
 8015546:	2800      	cmp	r0, #0
 8015548:	f47f adbb 	bne.w	80150c2 <_strtod_l+0x452>
 801554c:	2322      	movs	r3, #34	; 0x22
 801554e:	f8c9 3000 	str.w	r3, [r9]
 8015552:	e5b6      	b.n	80150c2 <_strtod_l+0x452>
 8015554:	4013      	ands	r3, r2
 8015556:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801555a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801555e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8015562:	f04f 3aff 	mov.w	sl, #4294967295
 8015566:	e76a      	b.n	801543e <_strtod_l+0x7ce>
 8015568:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801556a:	b193      	cbz	r3, 8015592 <_strtod_l+0x922>
 801556c:	422b      	tst	r3, r5
 801556e:	f43f af66 	beq.w	801543e <_strtod_l+0x7ce>
 8015572:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015574:	9a04      	ldr	r2, [sp, #16]
 8015576:	4650      	mov	r0, sl
 8015578:	4659      	mov	r1, fp
 801557a:	b173      	cbz	r3, 801559a <_strtod_l+0x92a>
 801557c:	f7ff fb5c 	bl	8014c38 <sulp>
 8015580:	4602      	mov	r2, r0
 8015582:	460b      	mov	r3, r1
 8015584:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8015588:	f7ea fe98 	bl	80002bc <__adddf3>
 801558c:	4682      	mov	sl, r0
 801558e:	468b      	mov	fp, r1
 8015590:	e755      	b.n	801543e <_strtod_l+0x7ce>
 8015592:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015594:	ea13 0f0a 	tst.w	r3, sl
 8015598:	e7e9      	b.n	801556e <_strtod_l+0x8fe>
 801559a:	f7ff fb4d 	bl	8014c38 <sulp>
 801559e:	4602      	mov	r2, r0
 80155a0:	460b      	mov	r3, r1
 80155a2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80155a6:	f7ea fe87 	bl	80002b8 <__aeabi_dsub>
 80155aa:	2200      	movs	r2, #0
 80155ac:	2300      	movs	r3, #0
 80155ae:	4682      	mov	sl, r0
 80155b0:	468b      	mov	fp, r1
 80155b2:	f7eb faa1 	bl	8000af8 <__aeabi_dcmpeq>
 80155b6:	2800      	cmp	r0, #0
 80155b8:	f47f ae11 	bne.w	80151de <_strtod_l+0x56e>
 80155bc:	e73f      	b.n	801543e <_strtod_l+0x7ce>
 80155be:	4641      	mov	r1, r8
 80155c0:	4620      	mov	r0, r4
 80155c2:	f001 ff40 	bl	8017446 <__ratio>
 80155c6:	ec57 6b10 	vmov	r6, r7, d0
 80155ca:	2200      	movs	r2, #0
 80155cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80155d0:	ee10 0a10 	vmov	r0, s0
 80155d4:	4639      	mov	r1, r7
 80155d6:	f7eb faa3 	bl	8000b20 <__aeabi_dcmple>
 80155da:	2800      	cmp	r0, #0
 80155dc:	d077      	beq.n	80156ce <_strtod_l+0xa5e>
 80155de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80155e0:	2b00      	cmp	r3, #0
 80155e2:	d04a      	beq.n	801567a <_strtod_l+0xa0a>
 80155e4:	4b68      	ldr	r3, [pc, #416]	; (8015788 <_strtod_l+0xb18>)
 80155e6:	2200      	movs	r2, #0
 80155e8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80155ec:	4f66      	ldr	r7, [pc, #408]	; (8015788 <_strtod_l+0xb18>)
 80155ee:	2600      	movs	r6, #0
 80155f0:	4b62      	ldr	r3, [pc, #392]	; (801577c <_strtod_l+0xb0c>)
 80155f2:	402b      	ands	r3, r5
 80155f4:	930f      	str	r3, [sp, #60]	; 0x3c
 80155f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80155f8:	4b64      	ldr	r3, [pc, #400]	; (801578c <_strtod_l+0xb1c>)
 80155fa:	429a      	cmp	r2, r3
 80155fc:	f040 80ce 	bne.w	801579c <_strtod_l+0xb2c>
 8015600:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8015604:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8015608:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 801560c:	ec4b ab10 	vmov	d0, sl, fp
 8015610:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8015614:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8015618:	f001 fe50 	bl	80172bc <__ulp>
 801561c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8015620:	ec53 2b10 	vmov	r2, r3, d0
 8015624:	f7eb f800 	bl	8000628 <__aeabi_dmul>
 8015628:	4652      	mov	r2, sl
 801562a:	465b      	mov	r3, fp
 801562c:	f7ea fe46 	bl	80002bc <__adddf3>
 8015630:	460b      	mov	r3, r1
 8015632:	4952      	ldr	r1, [pc, #328]	; (801577c <_strtod_l+0xb0c>)
 8015634:	4a56      	ldr	r2, [pc, #344]	; (8015790 <_strtod_l+0xb20>)
 8015636:	4019      	ands	r1, r3
 8015638:	4291      	cmp	r1, r2
 801563a:	4682      	mov	sl, r0
 801563c:	d95b      	bls.n	80156f6 <_strtod_l+0xa86>
 801563e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015640:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8015644:	4293      	cmp	r3, r2
 8015646:	d103      	bne.n	8015650 <_strtod_l+0x9e0>
 8015648:	9b08      	ldr	r3, [sp, #32]
 801564a:	3301      	adds	r3, #1
 801564c:	f43f ad2e 	beq.w	80150ac <_strtod_l+0x43c>
 8015650:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8015780 <_strtod_l+0xb10>
 8015654:	f04f 3aff 	mov.w	sl, #4294967295
 8015658:	991c      	ldr	r1, [sp, #112]	; 0x70
 801565a:	4648      	mov	r0, r9
 801565c:	f001 fb96 	bl	8016d8c <_Bfree>
 8015660:	9905      	ldr	r1, [sp, #20]
 8015662:	4648      	mov	r0, r9
 8015664:	f001 fb92 	bl	8016d8c <_Bfree>
 8015668:	4641      	mov	r1, r8
 801566a:	4648      	mov	r0, r9
 801566c:	f001 fb8e 	bl	8016d8c <_Bfree>
 8015670:	4621      	mov	r1, r4
 8015672:	4648      	mov	r0, r9
 8015674:	f001 fb8a 	bl	8016d8c <_Bfree>
 8015678:	e619      	b.n	80152ae <_strtod_l+0x63e>
 801567a:	f1ba 0f00 	cmp.w	sl, #0
 801567e:	d11a      	bne.n	80156b6 <_strtod_l+0xa46>
 8015680:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015684:	b9eb      	cbnz	r3, 80156c2 <_strtod_l+0xa52>
 8015686:	2200      	movs	r2, #0
 8015688:	4b3f      	ldr	r3, [pc, #252]	; (8015788 <_strtod_l+0xb18>)
 801568a:	4630      	mov	r0, r6
 801568c:	4639      	mov	r1, r7
 801568e:	f7eb fa3d 	bl	8000b0c <__aeabi_dcmplt>
 8015692:	b9c8      	cbnz	r0, 80156c8 <_strtod_l+0xa58>
 8015694:	4630      	mov	r0, r6
 8015696:	4639      	mov	r1, r7
 8015698:	2200      	movs	r2, #0
 801569a:	4b3e      	ldr	r3, [pc, #248]	; (8015794 <_strtod_l+0xb24>)
 801569c:	f7ea ffc4 	bl	8000628 <__aeabi_dmul>
 80156a0:	4606      	mov	r6, r0
 80156a2:	460f      	mov	r7, r1
 80156a4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80156a8:	9618      	str	r6, [sp, #96]	; 0x60
 80156aa:	9319      	str	r3, [sp, #100]	; 0x64
 80156ac:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 80156b0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80156b4:	e79c      	b.n	80155f0 <_strtod_l+0x980>
 80156b6:	f1ba 0f01 	cmp.w	sl, #1
 80156ba:	d102      	bne.n	80156c2 <_strtod_l+0xa52>
 80156bc:	2d00      	cmp	r5, #0
 80156be:	f43f ad8e 	beq.w	80151de <_strtod_l+0x56e>
 80156c2:	2200      	movs	r2, #0
 80156c4:	4b34      	ldr	r3, [pc, #208]	; (8015798 <_strtod_l+0xb28>)
 80156c6:	e78f      	b.n	80155e8 <_strtod_l+0x978>
 80156c8:	2600      	movs	r6, #0
 80156ca:	4f32      	ldr	r7, [pc, #200]	; (8015794 <_strtod_l+0xb24>)
 80156cc:	e7ea      	b.n	80156a4 <_strtod_l+0xa34>
 80156ce:	4b31      	ldr	r3, [pc, #196]	; (8015794 <_strtod_l+0xb24>)
 80156d0:	4630      	mov	r0, r6
 80156d2:	4639      	mov	r1, r7
 80156d4:	2200      	movs	r2, #0
 80156d6:	f7ea ffa7 	bl	8000628 <__aeabi_dmul>
 80156da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80156dc:	4606      	mov	r6, r0
 80156de:	460f      	mov	r7, r1
 80156e0:	b933      	cbnz	r3, 80156f0 <_strtod_l+0xa80>
 80156e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80156e6:	9010      	str	r0, [sp, #64]	; 0x40
 80156e8:	9311      	str	r3, [sp, #68]	; 0x44
 80156ea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80156ee:	e7df      	b.n	80156b0 <_strtod_l+0xa40>
 80156f0:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80156f4:	e7f9      	b.n	80156ea <_strtod_l+0xa7a>
 80156f6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80156fa:	9b04      	ldr	r3, [sp, #16]
 80156fc:	2b00      	cmp	r3, #0
 80156fe:	d1ab      	bne.n	8015658 <_strtod_l+0x9e8>
 8015700:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8015704:	0d1b      	lsrs	r3, r3, #20
 8015706:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015708:	051b      	lsls	r3, r3, #20
 801570a:	429a      	cmp	r2, r3
 801570c:	465d      	mov	r5, fp
 801570e:	d1a3      	bne.n	8015658 <_strtod_l+0x9e8>
 8015710:	4639      	mov	r1, r7
 8015712:	4630      	mov	r0, r6
 8015714:	f7eb fa38 	bl	8000b88 <__aeabi_d2iz>
 8015718:	f7ea ff1c 	bl	8000554 <__aeabi_i2d>
 801571c:	460b      	mov	r3, r1
 801571e:	4602      	mov	r2, r0
 8015720:	4639      	mov	r1, r7
 8015722:	4630      	mov	r0, r6
 8015724:	f7ea fdc8 	bl	80002b8 <__aeabi_dsub>
 8015728:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801572a:	4606      	mov	r6, r0
 801572c:	460f      	mov	r7, r1
 801572e:	b933      	cbnz	r3, 801573e <_strtod_l+0xace>
 8015730:	f1ba 0f00 	cmp.w	sl, #0
 8015734:	d103      	bne.n	801573e <_strtod_l+0xace>
 8015736:	f3cb 0513 	ubfx	r5, fp, #0, #20
 801573a:	2d00      	cmp	r5, #0
 801573c:	d06d      	beq.n	801581a <_strtod_l+0xbaa>
 801573e:	a30a      	add	r3, pc, #40	; (adr r3, 8015768 <_strtod_l+0xaf8>)
 8015740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015744:	4630      	mov	r0, r6
 8015746:	4639      	mov	r1, r7
 8015748:	f7eb f9e0 	bl	8000b0c <__aeabi_dcmplt>
 801574c:	2800      	cmp	r0, #0
 801574e:	f47f acb8 	bne.w	80150c2 <_strtod_l+0x452>
 8015752:	a307      	add	r3, pc, #28	; (adr r3, 8015770 <_strtod_l+0xb00>)
 8015754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015758:	4630      	mov	r0, r6
 801575a:	4639      	mov	r1, r7
 801575c:	f7eb f9f4 	bl	8000b48 <__aeabi_dcmpgt>
 8015760:	2800      	cmp	r0, #0
 8015762:	f43f af79 	beq.w	8015658 <_strtod_l+0x9e8>
 8015766:	e4ac      	b.n	80150c2 <_strtod_l+0x452>
 8015768:	94a03595 	.word	0x94a03595
 801576c:	3fdfffff 	.word	0x3fdfffff
 8015770:	35afe535 	.word	0x35afe535
 8015774:	3fe00000 	.word	0x3fe00000
 8015778:	000fffff 	.word	0x000fffff
 801577c:	7ff00000 	.word	0x7ff00000
 8015780:	7fefffff 	.word	0x7fefffff
 8015784:	39500000 	.word	0x39500000
 8015788:	3ff00000 	.word	0x3ff00000
 801578c:	7fe00000 	.word	0x7fe00000
 8015790:	7c9fffff 	.word	0x7c9fffff
 8015794:	3fe00000 	.word	0x3fe00000
 8015798:	bff00000 	.word	0xbff00000
 801579c:	9b04      	ldr	r3, [sp, #16]
 801579e:	b333      	cbz	r3, 80157ee <_strtod_l+0xb7e>
 80157a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80157a2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80157a6:	d822      	bhi.n	80157ee <_strtod_l+0xb7e>
 80157a8:	a327      	add	r3, pc, #156	; (adr r3, 8015848 <_strtod_l+0xbd8>)
 80157aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80157ae:	4630      	mov	r0, r6
 80157b0:	4639      	mov	r1, r7
 80157b2:	f7eb f9b5 	bl	8000b20 <__aeabi_dcmple>
 80157b6:	b1a0      	cbz	r0, 80157e2 <_strtod_l+0xb72>
 80157b8:	4639      	mov	r1, r7
 80157ba:	4630      	mov	r0, r6
 80157bc:	f7eb fa0c 	bl	8000bd8 <__aeabi_d2uiz>
 80157c0:	2800      	cmp	r0, #0
 80157c2:	bf08      	it	eq
 80157c4:	2001      	moveq	r0, #1
 80157c6:	f7ea feb5 	bl	8000534 <__aeabi_ui2d>
 80157ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80157cc:	4606      	mov	r6, r0
 80157ce:	460f      	mov	r7, r1
 80157d0:	bb03      	cbnz	r3, 8015814 <_strtod_l+0xba4>
 80157d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80157d6:	9012      	str	r0, [sp, #72]	; 0x48
 80157d8:	9313      	str	r3, [sp, #76]	; 0x4c
 80157da:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80157de:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80157e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80157e4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80157e6:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80157ea:	1a9b      	subs	r3, r3, r2
 80157ec:	930b      	str	r3, [sp, #44]	; 0x2c
 80157ee:	ed9d 0b08 	vldr	d0, [sp, #32]
 80157f2:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 80157f6:	f001 fd61 	bl	80172bc <__ulp>
 80157fa:	4650      	mov	r0, sl
 80157fc:	ec53 2b10 	vmov	r2, r3, d0
 8015800:	4659      	mov	r1, fp
 8015802:	f7ea ff11 	bl	8000628 <__aeabi_dmul>
 8015806:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801580a:	f7ea fd57 	bl	80002bc <__adddf3>
 801580e:	4682      	mov	sl, r0
 8015810:	468b      	mov	fp, r1
 8015812:	e772      	b.n	80156fa <_strtod_l+0xa8a>
 8015814:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8015818:	e7df      	b.n	80157da <_strtod_l+0xb6a>
 801581a:	a30d      	add	r3, pc, #52	; (adr r3, 8015850 <_strtod_l+0xbe0>)
 801581c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015820:	f7eb f974 	bl	8000b0c <__aeabi_dcmplt>
 8015824:	e79c      	b.n	8015760 <_strtod_l+0xaf0>
 8015826:	2300      	movs	r3, #0
 8015828:	930d      	str	r3, [sp, #52]	; 0x34
 801582a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 801582c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801582e:	6013      	str	r3, [r2, #0]
 8015830:	f7ff ba61 	b.w	8014cf6 <_strtod_l+0x86>
 8015834:	2b65      	cmp	r3, #101	; 0x65
 8015836:	f04f 0200 	mov.w	r2, #0
 801583a:	f43f ab4e 	beq.w	8014eda <_strtod_l+0x26a>
 801583e:	2101      	movs	r1, #1
 8015840:	4614      	mov	r4, r2
 8015842:	9104      	str	r1, [sp, #16]
 8015844:	f7ff bacb 	b.w	8014dde <_strtod_l+0x16e>
 8015848:	ffc00000 	.word	0xffc00000
 801584c:	41dfffff 	.word	0x41dfffff
 8015850:	94a03595 	.word	0x94a03595
 8015854:	3fcfffff 	.word	0x3fcfffff

08015858 <_strtod_r>:
 8015858:	4b05      	ldr	r3, [pc, #20]	; (8015870 <_strtod_r+0x18>)
 801585a:	681b      	ldr	r3, [r3, #0]
 801585c:	b410      	push	{r4}
 801585e:	6a1b      	ldr	r3, [r3, #32]
 8015860:	4c04      	ldr	r4, [pc, #16]	; (8015874 <_strtod_r+0x1c>)
 8015862:	2b00      	cmp	r3, #0
 8015864:	bf08      	it	eq
 8015866:	4623      	moveq	r3, r4
 8015868:	f85d 4b04 	ldr.w	r4, [sp], #4
 801586c:	f7ff ba00 	b.w	8014c70 <_strtod_l>
 8015870:	2000000c 	.word	0x2000000c
 8015874:	20000070 	.word	0x20000070

08015878 <_strtol_l.isra.0>:
 8015878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801587c:	4680      	mov	r8, r0
 801587e:	4689      	mov	r9, r1
 8015880:	4692      	mov	sl, r2
 8015882:	461e      	mov	r6, r3
 8015884:	460f      	mov	r7, r1
 8015886:	463d      	mov	r5, r7
 8015888:	9808      	ldr	r0, [sp, #32]
 801588a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801588e:	f001 fa0d 	bl	8016cac <__locale_ctype_ptr_l>
 8015892:	4420      	add	r0, r4
 8015894:	7843      	ldrb	r3, [r0, #1]
 8015896:	f013 0308 	ands.w	r3, r3, #8
 801589a:	d132      	bne.n	8015902 <_strtol_l.isra.0+0x8a>
 801589c:	2c2d      	cmp	r4, #45	; 0x2d
 801589e:	d132      	bne.n	8015906 <_strtol_l.isra.0+0x8e>
 80158a0:	787c      	ldrb	r4, [r7, #1]
 80158a2:	1cbd      	adds	r5, r7, #2
 80158a4:	2201      	movs	r2, #1
 80158a6:	2e00      	cmp	r6, #0
 80158a8:	d05d      	beq.n	8015966 <_strtol_l.isra.0+0xee>
 80158aa:	2e10      	cmp	r6, #16
 80158ac:	d109      	bne.n	80158c2 <_strtol_l.isra.0+0x4a>
 80158ae:	2c30      	cmp	r4, #48	; 0x30
 80158b0:	d107      	bne.n	80158c2 <_strtol_l.isra.0+0x4a>
 80158b2:	782b      	ldrb	r3, [r5, #0]
 80158b4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80158b8:	2b58      	cmp	r3, #88	; 0x58
 80158ba:	d14f      	bne.n	801595c <_strtol_l.isra.0+0xe4>
 80158bc:	786c      	ldrb	r4, [r5, #1]
 80158be:	2610      	movs	r6, #16
 80158c0:	3502      	adds	r5, #2
 80158c2:	2a00      	cmp	r2, #0
 80158c4:	bf14      	ite	ne
 80158c6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80158ca:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80158ce:	2700      	movs	r7, #0
 80158d0:	fbb1 fcf6 	udiv	ip, r1, r6
 80158d4:	4638      	mov	r0, r7
 80158d6:	fb06 1e1c 	mls	lr, r6, ip, r1
 80158da:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80158de:	2b09      	cmp	r3, #9
 80158e0:	d817      	bhi.n	8015912 <_strtol_l.isra.0+0x9a>
 80158e2:	461c      	mov	r4, r3
 80158e4:	42a6      	cmp	r6, r4
 80158e6:	dd23      	ble.n	8015930 <_strtol_l.isra.0+0xb8>
 80158e8:	1c7b      	adds	r3, r7, #1
 80158ea:	d007      	beq.n	80158fc <_strtol_l.isra.0+0x84>
 80158ec:	4584      	cmp	ip, r0
 80158ee:	d31c      	bcc.n	801592a <_strtol_l.isra.0+0xb2>
 80158f0:	d101      	bne.n	80158f6 <_strtol_l.isra.0+0x7e>
 80158f2:	45a6      	cmp	lr, r4
 80158f4:	db19      	blt.n	801592a <_strtol_l.isra.0+0xb2>
 80158f6:	fb00 4006 	mla	r0, r0, r6, r4
 80158fa:	2701      	movs	r7, #1
 80158fc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8015900:	e7eb      	b.n	80158da <_strtol_l.isra.0+0x62>
 8015902:	462f      	mov	r7, r5
 8015904:	e7bf      	b.n	8015886 <_strtol_l.isra.0+0xe>
 8015906:	2c2b      	cmp	r4, #43	; 0x2b
 8015908:	bf04      	itt	eq
 801590a:	1cbd      	addeq	r5, r7, #2
 801590c:	787c      	ldrbeq	r4, [r7, #1]
 801590e:	461a      	mov	r2, r3
 8015910:	e7c9      	b.n	80158a6 <_strtol_l.isra.0+0x2e>
 8015912:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8015916:	2b19      	cmp	r3, #25
 8015918:	d801      	bhi.n	801591e <_strtol_l.isra.0+0xa6>
 801591a:	3c37      	subs	r4, #55	; 0x37
 801591c:	e7e2      	b.n	80158e4 <_strtol_l.isra.0+0x6c>
 801591e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8015922:	2b19      	cmp	r3, #25
 8015924:	d804      	bhi.n	8015930 <_strtol_l.isra.0+0xb8>
 8015926:	3c57      	subs	r4, #87	; 0x57
 8015928:	e7dc      	b.n	80158e4 <_strtol_l.isra.0+0x6c>
 801592a:	f04f 37ff 	mov.w	r7, #4294967295
 801592e:	e7e5      	b.n	80158fc <_strtol_l.isra.0+0x84>
 8015930:	1c7b      	adds	r3, r7, #1
 8015932:	d108      	bne.n	8015946 <_strtol_l.isra.0+0xce>
 8015934:	2322      	movs	r3, #34	; 0x22
 8015936:	f8c8 3000 	str.w	r3, [r8]
 801593a:	4608      	mov	r0, r1
 801593c:	f1ba 0f00 	cmp.w	sl, #0
 8015940:	d107      	bne.n	8015952 <_strtol_l.isra.0+0xda>
 8015942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015946:	b102      	cbz	r2, 801594a <_strtol_l.isra.0+0xd2>
 8015948:	4240      	negs	r0, r0
 801594a:	f1ba 0f00 	cmp.w	sl, #0
 801594e:	d0f8      	beq.n	8015942 <_strtol_l.isra.0+0xca>
 8015950:	b10f      	cbz	r7, 8015956 <_strtol_l.isra.0+0xde>
 8015952:	f105 39ff 	add.w	r9, r5, #4294967295
 8015956:	f8ca 9000 	str.w	r9, [sl]
 801595a:	e7f2      	b.n	8015942 <_strtol_l.isra.0+0xca>
 801595c:	2430      	movs	r4, #48	; 0x30
 801595e:	2e00      	cmp	r6, #0
 8015960:	d1af      	bne.n	80158c2 <_strtol_l.isra.0+0x4a>
 8015962:	2608      	movs	r6, #8
 8015964:	e7ad      	b.n	80158c2 <_strtol_l.isra.0+0x4a>
 8015966:	2c30      	cmp	r4, #48	; 0x30
 8015968:	d0a3      	beq.n	80158b2 <_strtol_l.isra.0+0x3a>
 801596a:	260a      	movs	r6, #10
 801596c:	e7a9      	b.n	80158c2 <_strtol_l.isra.0+0x4a>
	...

08015970 <_strtol_r>:
 8015970:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015972:	4c06      	ldr	r4, [pc, #24]	; (801598c <_strtol_r+0x1c>)
 8015974:	4d06      	ldr	r5, [pc, #24]	; (8015990 <_strtol_r+0x20>)
 8015976:	6824      	ldr	r4, [r4, #0]
 8015978:	6a24      	ldr	r4, [r4, #32]
 801597a:	2c00      	cmp	r4, #0
 801597c:	bf08      	it	eq
 801597e:	462c      	moveq	r4, r5
 8015980:	9400      	str	r4, [sp, #0]
 8015982:	f7ff ff79 	bl	8015878 <_strtol_l.isra.0>
 8015986:	b003      	add	sp, #12
 8015988:	bd30      	pop	{r4, r5, pc}
 801598a:	bf00      	nop
 801598c:	2000000c 	.word	0x2000000c
 8015990:	20000070 	.word	0x20000070

08015994 <_vsiprintf_r>:
 8015994:	b500      	push	{lr}
 8015996:	b09b      	sub	sp, #108	; 0x6c
 8015998:	9100      	str	r1, [sp, #0]
 801599a:	9104      	str	r1, [sp, #16]
 801599c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80159a0:	9105      	str	r1, [sp, #20]
 80159a2:	9102      	str	r1, [sp, #8]
 80159a4:	4905      	ldr	r1, [pc, #20]	; (80159bc <_vsiprintf_r+0x28>)
 80159a6:	9103      	str	r1, [sp, #12]
 80159a8:	4669      	mov	r1, sp
 80159aa:	f001 fecb 	bl	8017744 <_svfiprintf_r>
 80159ae:	9b00      	ldr	r3, [sp, #0]
 80159b0:	2200      	movs	r2, #0
 80159b2:	701a      	strb	r2, [r3, #0]
 80159b4:	b01b      	add	sp, #108	; 0x6c
 80159b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80159ba:	bf00      	nop
 80159bc:	ffff0208 	.word	0xffff0208

080159c0 <vsiprintf>:
 80159c0:	4613      	mov	r3, r2
 80159c2:	460a      	mov	r2, r1
 80159c4:	4601      	mov	r1, r0
 80159c6:	4802      	ldr	r0, [pc, #8]	; (80159d0 <vsiprintf+0x10>)
 80159c8:	6800      	ldr	r0, [r0, #0]
 80159ca:	f7ff bfe3 	b.w	8015994 <_vsiprintf_r>
 80159ce:	bf00      	nop
 80159d0:	2000000c 	.word	0x2000000c

080159d4 <quorem>:
 80159d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80159d8:	6903      	ldr	r3, [r0, #16]
 80159da:	690c      	ldr	r4, [r1, #16]
 80159dc:	42a3      	cmp	r3, r4
 80159de:	4680      	mov	r8, r0
 80159e0:	f2c0 8082 	blt.w	8015ae8 <quorem+0x114>
 80159e4:	3c01      	subs	r4, #1
 80159e6:	f101 0714 	add.w	r7, r1, #20
 80159ea:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80159ee:	f100 0614 	add.w	r6, r0, #20
 80159f2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80159f6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80159fa:	eb06 030c 	add.w	r3, r6, ip
 80159fe:	3501      	adds	r5, #1
 8015a00:	eb07 090c 	add.w	r9, r7, ip
 8015a04:	9301      	str	r3, [sp, #4]
 8015a06:	fbb0 f5f5 	udiv	r5, r0, r5
 8015a0a:	b395      	cbz	r5, 8015a72 <quorem+0x9e>
 8015a0c:	f04f 0a00 	mov.w	sl, #0
 8015a10:	4638      	mov	r0, r7
 8015a12:	46b6      	mov	lr, r6
 8015a14:	46d3      	mov	fp, sl
 8015a16:	f850 2b04 	ldr.w	r2, [r0], #4
 8015a1a:	b293      	uxth	r3, r2
 8015a1c:	fb05 a303 	mla	r3, r5, r3, sl
 8015a20:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8015a24:	b29b      	uxth	r3, r3
 8015a26:	ebab 0303 	sub.w	r3, fp, r3
 8015a2a:	0c12      	lsrs	r2, r2, #16
 8015a2c:	f8de b000 	ldr.w	fp, [lr]
 8015a30:	fb05 a202 	mla	r2, r5, r2, sl
 8015a34:	fa13 f38b 	uxtah	r3, r3, fp
 8015a38:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8015a3c:	fa1f fb82 	uxth.w	fp, r2
 8015a40:	f8de 2000 	ldr.w	r2, [lr]
 8015a44:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8015a48:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8015a4c:	b29b      	uxth	r3, r3
 8015a4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015a52:	4581      	cmp	r9, r0
 8015a54:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8015a58:	f84e 3b04 	str.w	r3, [lr], #4
 8015a5c:	d2db      	bcs.n	8015a16 <quorem+0x42>
 8015a5e:	f856 300c 	ldr.w	r3, [r6, ip]
 8015a62:	b933      	cbnz	r3, 8015a72 <quorem+0x9e>
 8015a64:	9b01      	ldr	r3, [sp, #4]
 8015a66:	3b04      	subs	r3, #4
 8015a68:	429e      	cmp	r6, r3
 8015a6a:	461a      	mov	r2, r3
 8015a6c:	d330      	bcc.n	8015ad0 <quorem+0xfc>
 8015a6e:	f8c8 4010 	str.w	r4, [r8, #16]
 8015a72:	4640      	mov	r0, r8
 8015a74:	f001 fbaa 	bl	80171cc <__mcmp>
 8015a78:	2800      	cmp	r0, #0
 8015a7a:	db25      	blt.n	8015ac8 <quorem+0xf4>
 8015a7c:	3501      	adds	r5, #1
 8015a7e:	4630      	mov	r0, r6
 8015a80:	f04f 0c00 	mov.w	ip, #0
 8015a84:	f857 2b04 	ldr.w	r2, [r7], #4
 8015a88:	f8d0 e000 	ldr.w	lr, [r0]
 8015a8c:	b293      	uxth	r3, r2
 8015a8e:	ebac 0303 	sub.w	r3, ip, r3
 8015a92:	0c12      	lsrs	r2, r2, #16
 8015a94:	fa13 f38e 	uxtah	r3, r3, lr
 8015a98:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8015a9c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8015aa0:	b29b      	uxth	r3, r3
 8015aa2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8015aa6:	45b9      	cmp	r9, r7
 8015aa8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8015aac:	f840 3b04 	str.w	r3, [r0], #4
 8015ab0:	d2e8      	bcs.n	8015a84 <quorem+0xb0>
 8015ab2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8015ab6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8015aba:	b92a      	cbnz	r2, 8015ac8 <quorem+0xf4>
 8015abc:	3b04      	subs	r3, #4
 8015abe:	429e      	cmp	r6, r3
 8015ac0:	461a      	mov	r2, r3
 8015ac2:	d30b      	bcc.n	8015adc <quorem+0x108>
 8015ac4:	f8c8 4010 	str.w	r4, [r8, #16]
 8015ac8:	4628      	mov	r0, r5
 8015aca:	b003      	add	sp, #12
 8015acc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015ad0:	6812      	ldr	r2, [r2, #0]
 8015ad2:	3b04      	subs	r3, #4
 8015ad4:	2a00      	cmp	r2, #0
 8015ad6:	d1ca      	bne.n	8015a6e <quorem+0x9a>
 8015ad8:	3c01      	subs	r4, #1
 8015ada:	e7c5      	b.n	8015a68 <quorem+0x94>
 8015adc:	6812      	ldr	r2, [r2, #0]
 8015ade:	3b04      	subs	r3, #4
 8015ae0:	2a00      	cmp	r2, #0
 8015ae2:	d1ef      	bne.n	8015ac4 <quorem+0xf0>
 8015ae4:	3c01      	subs	r4, #1
 8015ae6:	e7ea      	b.n	8015abe <quorem+0xea>
 8015ae8:	2000      	movs	r0, #0
 8015aea:	e7ee      	b.n	8015aca <quorem+0xf6>
 8015aec:	0000      	movs	r0, r0
	...

08015af0 <_dtoa_r>:
 8015af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015af4:	ec57 6b10 	vmov	r6, r7, d0
 8015af8:	b097      	sub	sp, #92	; 0x5c
 8015afa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8015afc:	9106      	str	r1, [sp, #24]
 8015afe:	4604      	mov	r4, r0
 8015b00:	920b      	str	r2, [sp, #44]	; 0x2c
 8015b02:	9312      	str	r3, [sp, #72]	; 0x48
 8015b04:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8015b08:	e9cd 6700 	strd	r6, r7, [sp]
 8015b0c:	b93d      	cbnz	r5, 8015b1e <_dtoa_r+0x2e>
 8015b0e:	2010      	movs	r0, #16
 8015b10:	f001 f8ee 	bl	8016cf0 <malloc>
 8015b14:	6260      	str	r0, [r4, #36]	; 0x24
 8015b16:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8015b1a:	6005      	str	r5, [r0, #0]
 8015b1c:	60c5      	str	r5, [r0, #12]
 8015b1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015b20:	6819      	ldr	r1, [r3, #0]
 8015b22:	b151      	cbz	r1, 8015b3a <_dtoa_r+0x4a>
 8015b24:	685a      	ldr	r2, [r3, #4]
 8015b26:	604a      	str	r2, [r1, #4]
 8015b28:	2301      	movs	r3, #1
 8015b2a:	4093      	lsls	r3, r2
 8015b2c:	608b      	str	r3, [r1, #8]
 8015b2e:	4620      	mov	r0, r4
 8015b30:	f001 f92c 	bl	8016d8c <_Bfree>
 8015b34:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015b36:	2200      	movs	r2, #0
 8015b38:	601a      	str	r2, [r3, #0]
 8015b3a:	1e3b      	subs	r3, r7, #0
 8015b3c:	bfbb      	ittet	lt
 8015b3e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8015b42:	9301      	strlt	r3, [sp, #4]
 8015b44:	2300      	movge	r3, #0
 8015b46:	2201      	movlt	r2, #1
 8015b48:	bfac      	ite	ge
 8015b4a:	f8c8 3000 	strge.w	r3, [r8]
 8015b4e:	f8c8 2000 	strlt.w	r2, [r8]
 8015b52:	4baf      	ldr	r3, [pc, #700]	; (8015e10 <_dtoa_r+0x320>)
 8015b54:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8015b58:	ea33 0308 	bics.w	r3, r3, r8
 8015b5c:	d114      	bne.n	8015b88 <_dtoa_r+0x98>
 8015b5e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015b60:	f242 730f 	movw	r3, #9999	; 0x270f
 8015b64:	6013      	str	r3, [r2, #0]
 8015b66:	9b00      	ldr	r3, [sp, #0]
 8015b68:	b923      	cbnz	r3, 8015b74 <_dtoa_r+0x84>
 8015b6a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8015b6e:	2800      	cmp	r0, #0
 8015b70:	f000 8542 	beq.w	80165f8 <_dtoa_r+0xb08>
 8015b74:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015b76:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8015e24 <_dtoa_r+0x334>
 8015b7a:	2b00      	cmp	r3, #0
 8015b7c:	f000 8544 	beq.w	8016608 <_dtoa_r+0xb18>
 8015b80:	f10b 0303 	add.w	r3, fp, #3
 8015b84:	f000 bd3e 	b.w	8016604 <_dtoa_r+0xb14>
 8015b88:	e9dd 6700 	ldrd	r6, r7, [sp]
 8015b8c:	2200      	movs	r2, #0
 8015b8e:	2300      	movs	r3, #0
 8015b90:	4630      	mov	r0, r6
 8015b92:	4639      	mov	r1, r7
 8015b94:	f7ea ffb0 	bl	8000af8 <__aeabi_dcmpeq>
 8015b98:	4681      	mov	r9, r0
 8015b9a:	b168      	cbz	r0, 8015bb8 <_dtoa_r+0xc8>
 8015b9c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8015b9e:	2301      	movs	r3, #1
 8015ba0:	6013      	str	r3, [r2, #0]
 8015ba2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8015ba4:	2b00      	cmp	r3, #0
 8015ba6:	f000 8524 	beq.w	80165f2 <_dtoa_r+0xb02>
 8015baa:	4b9a      	ldr	r3, [pc, #616]	; (8015e14 <_dtoa_r+0x324>)
 8015bac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8015bae:	f103 3bff 	add.w	fp, r3, #4294967295
 8015bb2:	6013      	str	r3, [r2, #0]
 8015bb4:	f000 bd28 	b.w	8016608 <_dtoa_r+0xb18>
 8015bb8:	aa14      	add	r2, sp, #80	; 0x50
 8015bba:	a915      	add	r1, sp, #84	; 0x54
 8015bbc:	ec47 6b10 	vmov	d0, r6, r7
 8015bc0:	4620      	mov	r0, r4
 8015bc2:	f001 fbf1 	bl	80173a8 <__d2b>
 8015bc6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8015bca:	9004      	str	r0, [sp, #16]
 8015bcc:	2d00      	cmp	r5, #0
 8015bce:	d07c      	beq.n	8015cca <_dtoa_r+0x1da>
 8015bd0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8015bd4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8015bd8:	46b2      	mov	sl, r6
 8015bda:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8015bde:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8015be2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8015be6:	2200      	movs	r2, #0
 8015be8:	4b8b      	ldr	r3, [pc, #556]	; (8015e18 <_dtoa_r+0x328>)
 8015bea:	4650      	mov	r0, sl
 8015bec:	4659      	mov	r1, fp
 8015bee:	f7ea fb63 	bl	80002b8 <__aeabi_dsub>
 8015bf2:	a381      	add	r3, pc, #516	; (adr r3, 8015df8 <_dtoa_r+0x308>)
 8015bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015bf8:	f7ea fd16 	bl	8000628 <__aeabi_dmul>
 8015bfc:	a380      	add	r3, pc, #512	; (adr r3, 8015e00 <_dtoa_r+0x310>)
 8015bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c02:	f7ea fb5b 	bl	80002bc <__adddf3>
 8015c06:	4606      	mov	r6, r0
 8015c08:	4628      	mov	r0, r5
 8015c0a:	460f      	mov	r7, r1
 8015c0c:	f7ea fca2 	bl	8000554 <__aeabi_i2d>
 8015c10:	a37d      	add	r3, pc, #500	; (adr r3, 8015e08 <_dtoa_r+0x318>)
 8015c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015c16:	f7ea fd07 	bl	8000628 <__aeabi_dmul>
 8015c1a:	4602      	mov	r2, r0
 8015c1c:	460b      	mov	r3, r1
 8015c1e:	4630      	mov	r0, r6
 8015c20:	4639      	mov	r1, r7
 8015c22:	f7ea fb4b 	bl	80002bc <__adddf3>
 8015c26:	4606      	mov	r6, r0
 8015c28:	460f      	mov	r7, r1
 8015c2a:	f7ea ffad 	bl	8000b88 <__aeabi_d2iz>
 8015c2e:	2200      	movs	r2, #0
 8015c30:	4682      	mov	sl, r0
 8015c32:	2300      	movs	r3, #0
 8015c34:	4630      	mov	r0, r6
 8015c36:	4639      	mov	r1, r7
 8015c38:	f7ea ff68 	bl	8000b0c <__aeabi_dcmplt>
 8015c3c:	b148      	cbz	r0, 8015c52 <_dtoa_r+0x162>
 8015c3e:	4650      	mov	r0, sl
 8015c40:	f7ea fc88 	bl	8000554 <__aeabi_i2d>
 8015c44:	4632      	mov	r2, r6
 8015c46:	463b      	mov	r3, r7
 8015c48:	f7ea ff56 	bl	8000af8 <__aeabi_dcmpeq>
 8015c4c:	b908      	cbnz	r0, 8015c52 <_dtoa_r+0x162>
 8015c4e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015c52:	f1ba 0f16 	cmp.w	sl, #22
 8015c56:	d859      	bhi.n	8015d0c <_dtoa_r+0x21c>
 8015c58:	4970      	ldr	r1, [pc, #448]	; (8015e1c <_dtoa_r+0x32c>)
 8015c5a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8015c5e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015c62:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015c66:	f7ea ff6f 	bl	8000b48 <__aeabi_dcmpgt>
 8015c6a:	2800      	cmp	r0, #0
 8015c6c:	d050      	beq.n	8015d10 <_dtoa_r+0x220>
 8015c6e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8015c72:	2300      	movs	r3, #0
 8015c74:	930f      	str	r3, [sp, #60]	; 0x3c
 8015c76:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015c78:	1b5d      	subs	r5, r3, r5
 8015c7a:	f1b5 0801 	subs.w	r8, r5, #1
 8015c7e:	bf49      	itett	mi
 8015c80:	f1c5 0301 	rsbmi	r3, r5, #1
 8015c84:	2300      	movpl	r3, #0
 8015c86:	9305      	strmi	r3, [sp, #20]
 8015c88:	f04f 0800 	movmi.w	r8, #0
 8015c8c:	bf58      	it	pl
 8015c8e:	9305      	strpl	r3, [sp, #20]
 8015c90:	f1ba 0f00 	cmp.w	sl, #0
 8015c94:	db3e      	blt.n	8015d14 <_dtoa_r+0x224>
 8015c96:	2300      	movs	r3, #0
 8015c98:	44d0      	add	r8, sl
 8015c9a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8015c9e:	9307      	str	r3, [sp, #28]
 8015ca0:	9b06      	ldr	r3, [sp, #24]
 8015ca2:	2b09      	cmp	r3, #9
 8015ca4:	f200 8090 	bhi.w	8015dc8 <_dtoa_r+0x2d8>
 8015ca8:	2b05      	cmp	r3, #5
 8015caa:	bfc4      	itt	gt
 8015cac:	3b04      	subgt	r3, #4
 8015cae:	9306      	strgt	r3, [sp, #24]
 8015cb0:	9b06      	ldr	r3, [sp, #24]
 8015cb2:	f1a3 0302 	sub.w	r3, r3, #2
 8015cb6:	bfcc      	ite	gt
 8015cb8:	2500      	movgt	r5, #0
 8015cba:	2501      	movle	r5, #1
 8015cbc:	2b03      	cmp	r3, #3
 8015cbe:	f200 808f 	bhi.w	8015de0 <_dtoa_r+0x2f0>
 8015cc2:	e8df f003 	tbb	[pc, r3]
 8015cc6:	7f7d      	.short	0x7f7d
 8015cc8:	7131      	.short	0x7131
 8015cca:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8015cce:	441d      	add	r5, r3
 8015cd0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8015cd4:	2820      	cmp	r0, #32
 8015cd6:	dd13      	ble.n	8015d00 <_dtoa_r+0x210>
 8015cd8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8015cdc:	9b00      	ldr	r3, [sp, #0]
 8015cde:	fa08 f800 	lsl.w	r8, r8, r0
 8015ce2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8015ce6:	fa23 f000 	lsr.w	r0, r3, r0
 8015cea:	ea48 0000 	orr.w	r0, r8, r0
 8015cee:	f7ea fc21 	bl	8000534 <__aeabi_ui2d>
 8015cf2:	2301      	movs	r3, #1
 8015cf4:	4682      	mov	sl, r0
 8015cf6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8015cfa:	3d01      	subs	r5, #1
 8015cfc:	9313      	str	r3, [sp, #76]	; 0x4c
 8015cfe:	e772      	b.n	8015be6 <_dtoa_r+0xf6>
 8015d00:	9b00      	ldr	r3, [sp, #0]
 8015d02:	f1c0 0020 	rsb	r0, r0, #32
 8015d06:	fa03 f000 	lsl.w	r0, r3, r0
 8015d0a:	e7f0      	b.n	8015cee <_dtoa_r+0x1fe>
 8015d0c:	2301      	movs	r3, #1
 8015d0e:	e7b1      	b.n	8015c74 <_dtoa_r+0x184>
 8015d10:	900f      	str	r0, [sp, #60]	; 0x3c
 8015d12:	e7b0      	b.n	8015c76 <_dtoa_r+0x186>
 8015d14:	9b05      	ldr	r3, [sp, #20]
 8015d16:	eba3 030a 	sub.w	r3, r3, sl
 8015d1a:	9305      	str	r3, [sp, #20]
 8015d1c:	f1ca 0300 	rsb	r3, sl, #0
 8015d20:	9307      	str	r3, [sp, #28]
 8015d22:	2300      	movs	r3, #0
 8015d24:	930e      	str	r3, [sp, #56]	; 0x38
 8015d26:	e7bb      	b.n	8015ca0 <_dtoa_r+0x1b0>
 8015d28:	2301      	movs	r3, #1
 8015d2a:	930a      	str	r3, [sp, #40]	; 0x28
 8015d2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015d2e:	2b00      	cmp	r3, #0
 8015d30:	dd59      	ble.n	8015de6 <_dtoa_r+0x2f6>
 8015d32:	9302      	str	r3, [sp, #8]
 8015d34:	4699      	mov	r9, r3
 8015d36:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8015d38:	2200      	movs	r2, #0
 8015d3a:	6072      	str	r2, [r6, #4]
 8015d3c:	2204      	movs	r2, #4
 8015d3e:	f102 0014 	add.w	r0, r2, #20
 8015d42:	4298      	cmp	r0, r3
 8015d44:	6871      	ldr	r1, [r6, #4]
 8015d46:	d953      	bls.n	8015df0 <_dtoa_r+0x300>
 8015d48:	4620      	mov	r0, r4
 8015d4a:	f000 ffeb 	bl	8016d24 <_Balloc>
 8015d4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015d50:	6030      	str	r0, [r6, #0]
 8015d52:	f1b9 0f0e 	cmp.w	r9, #14
 8015d56:	f8d3 b000 	ldr.w	fp, [r3]
 8015d5a:	f200 80e6 	bhi.w	8015f2a <_dtoa_r+0x43a>
 8015d5e:	2d00      	cmp	r5, #0
 8015d60:	f000 80e3 	beq.w	8015f2a <_dtoa_r+0x43a>
 8015d64:	ed9d 7b00 	vldr	d7, [sp]
 8015d68:	f1ba 0f00 	cmp.w	sl, #0
 8015d6c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8015d70:	dd74      	ble.n	8015e5c <_dtoa_r+0x36c>
 8015d72:	4a2a      	ldr	r2, [pc, #168]	; (8015e1c <_dtoa_r+0x32c>)
 8015d74:	f00a 030f 	and.w	r3, sl, #15
 8015d78:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8015d7c:	ed93 7b00 	vldr	d7, [r3]
 8015d80:	ea4f 162a 	mov.w	r6, sl, asr #4
 8015d84:	06f0      	lsls	r0, r6, #27
 8015d86:	ed8d 7b08 	vstr	d7, [sp, #32]
 8015d8a:	d565      	bpl.n	8015e58 <_dtoa_r+0x368>
 8015d8c:	4b24      	ldr	r3, [pc, #144]	; (8015e20 <_dtoa_r+0x330>)
 8015d8e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8015d92:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8015d96:	f7ea fd71 	bl	800087c <__aeabi_ddiv>
 8015d9a:	e9cd 0100 	strd	r0, r1, [sp]
 8015d9e:	f006 060f 	and.w	r6, r6, #15
 8015da2:	2503      	movs	r5, #3
 8015da4:	4f1e      	ldr	r7, [pc, #120]	; (8015e20 <_dtoa_r+0x330>)
 8015da6:	e04c      	b.n	8015e42 <_dtoa_r+0x352>
 8015da8:	2301      	movs	r3, #1
 8015daa:	930a      	str	r3, [sp, #40]	; 0x28
 8015dac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015dae:	4453      	add	r3, sl
 8015db0:	f103 0901 	add.w	r9, r3, #1
 8015db4:	9302      	str	r3, [sp, #8]
 8015db6:	464b      	mov	r3, r9
 8015db8:	2b01      	cmp	r3, #1
 8015dba:	bfb8      	it	lt
 8015dbc:	2301      	movlt	r3, #1
 8015dbe:	e7ba      	b.n	8015d36 <_dtoa_r+0x246>
 8015dc0:	2300      	movs	r3, #0
 8015dc2:	e7b2      	b.n	8015d2a <_dtoa_r+0x23a>
 8015dc4:	2300      	movs	r3, #0
 8015dc6:	e7f0      	b.n	8015daa <_dtoa_r+0x2ba>
 8015dc8:	2501      	movs	r5, #1
 8015dca:	2300      	movs	r3, #0
 8015dcc:	9306      	str	r3, [sp, #24]
 8015dce:	950a      	str	r5, [sp, #40]	; 0x28
 8015dd0:	f04f 33ff 	mov.w	r3, #4294967295
 8015dd4:	9302      	str	r3, [sp, #8]
 8015dd6:	4699      	mov	r9, r3
 8015dd8:	2200      	movs	r2, #0
 8015dda:	2312      	movs	r3, #18
 8015ddc:	920b      	str	r2, [sp, #44]	; 0x2c
 8015dde:	e7aa      	b.n	8015d36 <_dtoa_r+0x246>
 8015de0:	2301      	movs	r3, #1
 8015de2:	930a      	str	r3, [sp, #40]	; 0x28
 8015de4:	e7f4      	b.n	8015dd0 <_dtoa_r+0x2e0>
 8015de6:	2301      	movs	r3, #1
 8015de8:	9302      	str	r3, [sp, #8]
 8015dea:	4699      	mov	r9, r3
 8015dec:	461a      	mov	r2, r3
 8015dee:	e7f5      	b.n	8015ddc <_dtoa_r+0x2ec>
 8015df0:	3101      	adds	r1, #1
 8015df2:	6071      	str	r1, [r6, #4]
 8015df4:	0052      	lsls	r2, r2, #1
 8015df6:	e7a2      	b.n	8015d3e <_dtoa_r+0x24e>
 8015df8:	636f4361 	.word	0x636f4361
 8015dfc:	3fd287a7 	.word	0x3fd287a7
 8015e00:	8b60c8b3 	.word	0x8b60c8b3
 8015e04:	3fc68a28 	.word	0x3fc68a28
 8015e08:	509f79fb 	.word	0x509f79fb
 8015e0c:	3fd34413 	.word	0x3fd34413
 8015e10:	7ff00000 	.word	0x7ff00000
 8015e14:	08018c4c 	.word	0x08018c4c
 8015e18:	3ff80000 	.word	0x3ff80000
 8015e1c:	08018b50 	.word	0x08018b50
 8015e20:	08018b28 	.word	0x08018b28
 8015e24:	08018ab1 	.word	0x08018ab1
 8015e28:	07f1      	lsls	r1, r6, #31
 8015e2a:	d508      	bpl.n	8015e3e <_dtoa_r+0x34e>
 8015e2c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8015e30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015e34:	f7ea fbf8 	bl	8000628 <__aeabi_dmul>
 8015e38:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8015e3c:	3501      	adds	r5, #1
 8015e3e:	1076      	asrs	r6, r6, #1
 8015e40:	3708      	adds	r7, #8
 8015e42:	2e00      	cmp	r6, #0
 8015e44:	d1f0      	bne.n	8015e28 <_dtoa_r+0x338>
 8015e46:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8015e4a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015e4e:	f7ea fd15 	bl	800087c <__aeabi_ddiv>
 8015e52:	e9cd 0100 	strd	r0, r1, [sp]
 8015e56:	e01a      	b.n	8015e8e <_dtoa_r+0x39e>
 8015e58:	2502      	movs	r5, #2
 8015e5a:	e7a3      	b.n	8015da4 <_dtoa_r+0x2b4>
 8015e5c:	f000 80a0 	beq.w	8015fa0 <_dtoa_r+0x4b0>
 8015e60:	f1ca 0600 	rsb	r6, sl, #0
 8015e64:	4b9f      	ldr	r3, [pc, #636]	; (80160e4 <_dtoa_r+0x5f4>)
 8015e66:	4fa0      	ldr	r7, [pc, #640]	; (80160e8 <_dtoa_r+0x5f8>)
 8015e68:	f006 020f 	and.w	r2, r6, #15
 8015e6c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8015e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015e74:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8015e78:	f7ea fbd6 	bl	8000628 <__aeabi_dmul>
 8015e7c:	e9cd 0100 	strd	r0, r1, [sp]
 8015e80:	1136      	asrs	r6, r6, #4
 8015e82:	2300      	movs	r3, #0
 8015e84:	2502      	movs	r5, #2
 8015e86:	2e00      	cmp	r6, #0
 8015e88:	d17f      	bne.n	8015f8a <_dtoa_r+0x49a>
 8015e8a:	2b00      	cmp	r3, #0
 8015e8c:	d1e1      	bne.n	8015e52 <_dtoa_r+0x362>
 8015e8e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015e90:	2b00      	cmp	r3, #0
 8015e92:	f000 8087 	beq.w	8015fa4 <_dtoa_r+0x4b4>
 8015e96:	e9dd 6700 	ldrd	r6, r7, [sp]
 8015e9a:	2200      	movs	r2, #0
 8015e9c:	4b93      	ldr	r3, [pc, #588]	; (80160ec <_dtoa_r+0x5fc>)
 8015e9e:	4630      	mov	r0, r6
 8015ea0:	4639      	mov	r1, r7
 8015ea2:	f7ea fe33 	bl	8000b0c <__aeabi_dcmplt>
 8015ea6:	2800      	cmp	r0, #0
 8015ea8:	d07c      	beq.n	8015fa4 <_dtoa_r+0x4b4>
 8015eaa:	f1b9 0f00 	cmp.w	r9, #0
 8015eae:	d079      	beq.n	8015fa4 <_dtoa_r+0x4b4>
 8015eb0:	9b02      	ldr	r3, [sp, #8]
 8015eb2:	2b00      	cmp	r3, #0
 8015eb4:	dd35      	ble.n	8015f22 <_dtoa_r+0x432>
 8015eb6:	f10a 33ff 	add.w	r3, sl, #4294967295
 8015eba:	9308      	str	r3, [sp, #32]
 8015ebc:	4639      	mov	r1, r7
 8015ebe:	2200      	movs	r2, #0
 8015ec0:	4b8b      	ldr	r3, [pc, #556]	; (80160f0 <_dtoa_r+0x600>)
 8015ec2:	4630      	mov	r0, r6
 8015ec4:	f7ea fbb0 	bl	8000628 <__aeabi_dmul>
 8015ec8:	e9cd 0100 	strd	r0, r1, [sp]
 8015ecc:	9f02      	ldr	r7, [sp, #8]
 8015ece:	3501      	adds	r5, #1
 8015ed0:	4628      	mov	r0, r5
 8015ed2:	f7ea fb3f 	bl	8000554 <__aeabi_i2d>
 8015ed6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015eda:	f7ea fba5 	bl	8000628 <__aeabi_dmul>
 8015ede:	2200      	movs	r2, #0
 8015ee0:	4b84      	ldr	r3, [pc, #528]	; (80160f4 <_dtoa_r+0x604>)
 8015ee2:	f7ea f9eb 	bl	80002bc <__adddf3>
 8015ee6:	4605      	mov	r5, r0
 8015ee8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8015eec:	2f00      	cmp	r7, #0
 8015eee:	d15d      	bne.n	8015fac <_dtoa_r+0x4bc>
 8015ef0:	2200      	movs	r2, #0
 8015ef2:	4b81      	ldr	r3, [pc, #516]	; (80160f8 <_dtoa_r+0x608>)
 8015ef4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015ef8:	f7ea f9de 	bl	80002b8 <__aeabi_dsub>
 8015efc:	462a      	mov	r2, r5
 8015efe:	4633      	mov	r3, r6
 8015f00:	e9cd 0100 	strd	r0, r1, [sp]
 8015f04:	f7ea fe20 	bl	8000b48 <__aeabi_dcmpgt>
 8015f08:	2800      	cmp	r0, #0
 8015f0a:	f040 8288 	bne.w	801641e <_dtoa_r+0x92e>
 8015f0e:	462a      	mov	r2, r5
 8015f10:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8015f14:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015f18:	f7ea fdf8 	bl	8000b0c <__aeabi_dcmplt>
 8015f1c:	2800      	cmp	r0, #0
 8015f1e:	f040 827c 	bne.w	801641a <_dtoa_r+0x92a>
 8015f22:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8015f26:	e9cd 2300 	strd	r2, r3, [sp]
 8015f2a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015f2c:	2b00      	cmp	r3, #0
 8015f2e:	f2c0 8150 	blt.w	80161d2 <_dtoa_r+0x6e2>
 8015f32:	f1ba 0f0e 	cmp.w	sl, #14
 8015f36:	f300 814c 	bgt.w	80161d2 <_dtoa_r+0x6e2>
 8015f3a:	4b6a      	ldr	r3, [pc, #424]	; (80160e4 <_dtoa_r+0x5f4>)
 8015f3c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8015f40:	ed93 7b00 	vldr	d7, [r3]
 8015f44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015f46:	2b00      	cmp	r3, #0
 8015f48:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015f4c:	f280 80d8 	bge.w	8016100 <_dtoa_r+0x610>
 8015f50:	f1b9 0f00 	cmp.w	r9, #0
 8015f54:	f300 80d4 	bgt.w	8016100 <_dtoa_r+0x610>
 8015f58:	f040 825e 	bne.w	8016418 <_dtoa_r+0x928>
 8015f5c:	2200      	movs	r2, #0
 8015f5e:	4b66      	ldr	r3, [pc, #408]	; (80160f8 <_dtoa_r+0x608>)
 8015f60:	ec51 0b17 	vmov	r0, r1, d7
 8015f64:	f7ea fb60 	bl	8000628 <__aeabi_dmul>
 8015f68:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015f6c:	f7ea fde2 	bl	8000b34 <__aeabi_dcmpge>
 8015f70:	464f      	mov	r7, r9
 8015f72:	464e      	mov	r6, r9
 8015f74:	2800      	cmp	r0, #0
 8015f76:	f040 8234 	bne.w	80163e2 <_dtoa_r+0x8f2>
 8015f7a:	2331      	movs	r3, #49	; 0x31
 8015f7c:	f10b 0501 	add.w	r5, fp, #1
 8015f80:	f88b 3000 	strb.w	r3, [fp]
 8015f84:	f10a 0a01 	add.w	sl, sl, #1
 8015f88:	e22f      	b.n	80163ea <_dtoa_r+0x8fa>
 8015f8a:	07f2      	lsls	r2, r6, #31
 8015f8c:	d505      	bpl.n	8015f9a <_dtoa_r+0x4aa>
 8015f8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015f92:	f7ea fb49 	bl	8000628 <__aeabi_dmul>
 8015f96:	3501      	adds	r5, #1
 8015f98:	2301      	movs	r3, #1
 8015f9a:	1076      	asrs	r6, r6, #1
 8015f9c:	3708      	adds	r7, #8
 8015f9e:	e772      	b.n	8015e86 <_dtoa_r+0x396>
 8015fa0:	2502      	movs	r5, #2
 8015fa2:	e774      	b.n	8015e8e <_dtoa_r+0x39e>
 8015fa4:	f8cd a020 	str.w	sl, [sp, #32]
 8015fa8:	464f      	mov	r7, r9
 8015faa:	e791      	b.n	8015ed0 <_dtoa_r+0x3e0>
 8015fac:	4b4d      	ldr	r3, [pc, #308]	; (80160e4 <_dtoa_r+0x5f4>)
 8015fae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8015fb2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8015fb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015fb8:	2b00      	cmp	r3, #0
 8015fba:	d047      	beq.n	801604c <_dtoa_r+0x55c>
 8015fbc:	4602      	mov	r2, r0
 8015fbe:	460b      	mov	r3, r1
 8015fc0:	2000      	movs	r0, #0
 8015fc2:	494e      	ldr	r1, [pc, #312]	; (80160fc <_dtoa_r+0x60c>)
 8015fc4:	f7ea fc5a 	bl	800087c <__aeabi_ddiv>
 8015fc8:	462a      	mov	r2, r5
 8015fca:	4633      	mov	r3, r6
 8015fcc:	f7ea f974 	bl	80002b8 <__aeabi_dsub>
 8015fd0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8015fd4:	465d      	mov	r5, fp
 8015fd6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015fda:	f7ea fdd5 	bl	8000b88 <__aeabi_d2iz>
 8015fde:	4606      	mov	r6, r0
 8015fe0:	f7ea fab8 	bl	8000554 <__aeabi_i2d>
 8015fe4:	4602      	mov	r2, r0
 8015fe6:	460b      	mov	r3, r1
 8015fe8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015fec:	f7ea f964 	bl	80002b8 <__aeabi_dsub>
 8015ff0:	3630      	adds	r6, #48	; 0x30
 8015ff2:	f805 6b01 	strb.w	r6, [r5], #1
 8015ff6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8015ffa:	e9cd 0100 	strd	r0, r1, [sp]
 8015ffe:	f7ea fd85 	bl	8000b0c <__aeabi_dcmplt>
 8016002:	2800      	cmp	r0, #0
 8016004:	d163      	bne.n	80160ce <_dtoa_r+0x5de>
 8016006:	e9dd 2300 	ldrd	r2, r3, [sp]
 801600a:	2000      	movs	r0, #0
 801600c:	4937      	ldr	r1, [pc, #220]	; (80160ec <_dtoa_r+0x5fc>)
 801600e:	f7ea f953 	bl	80002b8 <__aeabi_dsub>
 8016012:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8016016:	f7ea fd79 	bl	8000b0c <__aeabi_dcmplt>
 801601a:	2800      	cmp	r0, #0
 801601c:	f040 80b7 	bne.w	801618e <_dtoa_r+0x69e>
 8016020:	eba5 030b 	sub.w	r3, r5, fp
 8016024:	429f      	cmp	r7, r3
 8016026:	f77f af7c 	ble.w	8015f22 <_dtoa_r+0x432>
 801602a:	2200      	movs	r2, #0
 801602c:	4b30      	ldr	r3, [pc, #192]	; (80160f0 <_dtoa_r+0x600>)
 801602e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8016032:	f7ea faf9 	bl	8000628 <__aeabi_dmul>
 8016036:	2200      	movs	r2, #0
 8016038:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801603c:	4b2c      	ldr	r3, [pc, #176]	; (80160f0 <_dtoa_r+0x600>)
 801603e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016042:	f7ea faf1 	bl	8000628 <__aeabi_dmul>
 8016046:	e9cd 0100 	strd	r0, r1, [sp]
 801604a:	e7c4      	b.n	8015fd6 <_dtoa_r+0x4e6>
 801604c:	462a      	mov	r2, r5
 801604e:	4633      	mov	r3, r6
 8016050:	f7ea faea 	bl	8000628 <__aeabi_dmul>
 8016054:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8016058:	eb0b 0507 	add.w	r5, fp, r7
 801605c:	465e      	mov	r6, fp
 801605e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016062:	f7ea fd91 	bl	8000b88 <__aeabi_d2iz>
 8016066:	4607      	mov	r7, r0
 8016068:	f7ea fa74 	bl	8000554 <__aeabi_i2d>
 801606c:	3730      	adds	r7, #48	; 0x30
 801606e:	4602      	mov	r2, r0
 8016070:	460b      	mov	r3, r1
 8016072:	e9dd 0100 	ldrd	r0, r1, [sp]
 8016076:	f7ea f91f 	bl	80002b8 <__aeabi_dsub>
 801607a:	f806 7b01 	strb.w	r7, [r6], #1
 801607e:	42ae      	cmp	r6, r5
 8016080:	e9cd 0100 	strd	r0, r1, [sp]
 8016084:	f04f 0200 	mov.w	r2, #0
 8016088:	d126      	bne.n	80160d8 <_dtoa_r+0x5e8>
 801608a:	4b1c      	ldr	r3, [pc, #112]	; (80160fc <_dtoa_r+0x60c>)
 801608c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8016090:	f7ea f914 	bl	80002bc <__adddf3>
 8016094:	4602      	mov	r2, r0
 8016096:	460b      	mov	r3, r1
 8016098:	e9dd 0100 	ldrd	r0, r1, [sp]
 801609c:	f7ea fd54 	bl	8000b48 <__aeabi_dcmpgt>
 80160a0:	2800      	cmp	r0, #0
 80160a2:	d174      	bne.n	801618e <_dtoa_r+0x69e>
 80160a4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80160a8:	2000      	movs	r0, #0
 80160aa:	4914      	ldr	r1, [pc, #80]	; (80160fc <_dtoa_r+0x60c>)
 80160ac:	f7ea f904 	bl	80002b8 <__aeabi_dsub>
 80160b0:	4602      	mov	r2, r0
 80160b2:	460b      	mov	r3, r1
 80160b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80160b8:	f7ea fd28 	bl	8000b0c <__aeabi_dcmplt>
 80160bc:	2800      	cmp	r0, #0
 80160be:	f43f af30 	beq.w	8015f22 <_dtoa_r+0x432>
 80160c2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80160c6:	2b30      	cmp	r3, #48	; 0x30
 80160c8:	f105 32ff 	add.w	r2, r5, #4294967295
 80160cc:	d002      	beq.n	80160d4 <_dtoa_r+0x5e4>
 80160ce:	f8dd a020 	ldr.w	sl, [sp, #32]
 80160d2:	e04a      	b.n	801616a <_dtoa_r+0x67a>
 80160d4:	4615      	mov	r5, r2
 80160d6:	e7f4      	b.n	80160c2 <_dtoa_r+0x5d2>
 80160d8:	4b05      	ldr	r3, [pc, #20]	; (80160f0 <_dtoa_r+0x600>)
 80160da:	f7ea faa5 	bl	8000628 <__aeabi_dmul>
 80160de:	e9cd 0100 	strd	r0, r1, [sp]
 80160e2:	e7bc      	b.n	801605e <_dtoa_r+0x56e>
 80160e4:	08018b50 	.word	0x08018b50
 80160e8:	08018b28 	.word	0x08018b28
 80160ec:	3ff00000 	.word	0x3ff00000
 80160f0:	40240000 	.word	0x40240000
 80160f4:	401c0000 	.word	0x401c0000
 80160f8:	40140000 	.word	0x40140000
 80160fc:	3fe00000 	.word	0x3fe00000
 8016100:	e9dd 6700 	ldrd	r6, r7, [sp]
 8016104:	465d      	mov	r5, fp
 8016106:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801610a:	4630      	mov	r0, r6
 801610c:	4639      	mov	r1, r7
 801610e:	f7ea fbb5 	bl	800087c <__aeabi_ddiv>
 8016112:	f7ea fd39 	bl	8000b88 <__aeabi_d2iz>
 8016116:	4680      	mov	r8, r0
 8016118:	f7ea fa1c 	bl	8000554 <__aeabi_i2d>
 801611c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016120:	f7ea fa82 	bl	8000628 <__aeabi_dmul>
 8016124:	4602      	mov	r2, r0
 8016126:	460b      	mov	r3, r1
 8016128:	4630      	mov	r0, r6
 801612a:	4639      	mov	r1, r7
 801612c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8016130:	f7ea f8c2 	bl	80002b8 <__aeabi_dsub>
 8016134:	f805 6b01 	strb.w	r6, [r5], #1
 8016138:	eba5 060b 	sub.w	r6, r5, fp
 801613c:	45b1      	cmp	r9, r6
 801613e:	4602      	mov	r2, r0
 8016140:	460b      	mov	r3, r1
 8016142:	d139      	bne.n	80161b8 <_dtoa_r+0x6c8>
 8016144:	f7ea f8ba 	bl	80002bc <__adddf3>
 8016148:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801614c:	4606      	mov	r6, r0
 801614e:	460f      	mov	r7, r1
 8016150:	f7ea fcfa 	bl	8000b48 <__aeabi_dcmpgt>
 8016154:	b9c8      	cbnz	r0, 801618a <_dtoa_r+0x69a>
 8016156:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801615a:	4630      	mov	r0, r6
 801615c:	4639      	mov	r1, r7
 801615e:	f7ea fccb 	bl	8000af8 <__aeabi_dcmpeq>
 8016162:	b110      	cbz	r0, 801616a <_dtoa_r+0x67a>
 8016164:	f018 0f01 	tst.w	r8, #1
 8016168:	d10f      	bne.n	801618a <_dtoa_r+0x69a>
 801616a:	9904      	ldr	r1, [sp, #16]
 801616c:	4620      	mov	r0, r4
 801616e:	f000 fe0d 	bl	8016d8c <_Bfree>
 8016172:	2300      	movs	r3, #0
 8016174:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016176:	702b      	strb	r3, [r5, #0]
 8016178:	f10a 0301 	add.w	r3, sl, #1
 801617c:	6013      	str	r3, [r2, #0]
 801617e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016180:	2b00      	cmp	r3, #0
 8016182:	f000 8241 	beq.w	8016608 <_dtoa_r+0xb18>
 8016186:	601d      	str	r5, [r3, #0]
 8016188:	e23e      	b.n	8016608 <_dtoa_r+0xb18>
 801618a:	f8cd a020 	str.w	sl, [sp, #32]
 801618e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8016192:	2a39      	cmp	r2, #57	; 0x39
 8016194:	f105 33ff 	add.w	r3, r5, #4294967295
 8016198:	d108      	bne.n	80161ac <_dtoa_r+0x6bc>
 801619a:	459b      	cmp	fp, r3
 801619c:	d10a      	bne.n	80161b4 <_dtoa_r+0x6c4>
 801619e:	9b08      	ldr	r3, [sp, #32]
 80161a0:	3301      	adds	r3, #1
 80161a2:	9308      	str	r3, [sp, #32]
 80161a4:	2330      	movs	r3, #48	; 0x30
 80161a6:	f88b 3000 	strb.w	r3, [fp]
 80161aa:	465b      	mov	r3, fp
 80161ac:	781a      	ldrb	r2, [r3, #0]
 80161ae:	3201      	adds	r2, #1
 80161b0:	701a      	strb	r2, [r3, #0]
 80161b2:	e78c      	b.n	80160ce <_dtoa_r+0x5de>
 80161b4:	461d      	mov	r5, r3
 80161b6:	e7ea      	b.n	801618e <_dtoa_r+0x69e>
 80161b8:	2200      	movs	r2, #0
 80161ba:	4b9b      	ldr	r3, [pc, #620]	; (8016428 <_dtoa_r+0x938>)
 80161bc:	f7ea fa34 	bl	8000628 <__aeabi_dmul>
 80161c0:	2200      	movs	r2, #0
 80161c2:	2300      	movs	r3, #0
 80161c4:	4606      	mov	r6, r0
 80161c6:	460f      	mov	r7, r1
 80161c8:	f7ea fc96 	bl	8000af8 <__aeabi_dcmpeq>
 80161cc:	2800      	cmp	r0, #0
 80161ce:	d09a      	beq.n	8016106 <_dtoa_r+0x616>
 80161d0:	e7cb      	b.n	801616a <_dtoa_r+0x67a>
 80161d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80161d4:	2a00      	cmp	r2, #0
 80161d6:	f000 808b 	beq.w	80162f0 <_dtoa_r+0x800>
 80161da:	9a06      	ldr	r2, [sp, #24]
 80161dc:	2a01      	cmp	r2, #1
 80161de:	dc6e      	bgt.n	80162be <_dtoa_r+0x7ce>
 80161e0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80161e2:	2a00      	cmp	r2, #0
 80161e4:	d067      	beq.n	80162b6 <_dtoa_r+0x7c6>
 80161e6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80161ea:	9f07      	ldr	r7, [sp, #28]
 80161ec:	9d05      	ldr	r5, [sp, #20]
 80161ee:	9a05      	ldr	r2, [sp, #20]
 80161f0:	2101      	movs	r1, #1
 80161f2:	441a      	add	r2, r3
 80161f4:	4620      	mov	r0, r4
 80161f6:	9205      	str	r2, [sp, #20]
 80161f8:	4498      	add	r8, r3
 80161fa:	f000 fea5 	bl	8016f48 <__i2b>
 80161fe:	4606      	mov	r6, r0
 8016200:	2d00      	cmp	r5, #0
 8016202:	dd0c      	ble.n	801621e <_dtoa_r+0x72e>
 8016204:	f1b8 0f00 	cmp.w	r8, #0
 8016208:	dd09      	ble.n	801621e <_dtoa_r+0x72e>
 801620a:	4545      	cmp	r5, r8
 801620c:	9a05      	ldr	r2, [sp, #20]
 801620e:	462b      	mov	r3, r5
 8016210:	bfa8      	it	ge
 8016212:	4643      	movge	r3, r8
 8016214:	1ad2      	subs	r2, r2, r3
 8016216:	9205      	str	r2, [sp, #20]
 8016218:	1aed      	subs	r5, r5, r3
 801621a:	eba8 0803 	sub.w	r8, r8, r3
 801621e:	9b07      	ldr	r3, [sp, #28]
 8016220:	b1eb      	cbz	r3, 801625e <_dtoa_r+0x76e>
 8016222:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016224:	2b00      	cmp	r3, #0
 8016226:	d067      	beq.n	80162f8 <_dtoa_r+0x808>
 8016228:	b18f      	cbz	r7, 801624e <_dtoa_r+0x75e>
 801622a:	4631      	mov	r1, r6
 801622c:	463a      	mov	r2, r7
 801622e:	4620      	mov	r0, r4
 8016230:	f000 ff2a 	bl	8017088 <__pow5mult>
 8016234:	9a04      	ldr	r2, [sp, #16]
 8016236:	4601      	mov	r1, r0
 8016238:	4606      	mov	r6, r0
 801623a:	4620      	mov	r0, r4
 801623c:	f000 fe8d 	bl	8016f5a <__multiply>
 8016240:	9904      	ldr	r1, [sp, #16]
 8016242:	9008      	str	r0, [sp, #32]
 8016244:	4620      	mov	r0, r4
 8016246:	f000 fda1 	bl	8016d8c <_Bfree>
 801624a:	9b08      	ldr	r3, [sp, #32]
 801624c:	9304      	str	r3, [sp, #16]
 801624e:	9b07      	ldr	r3, [sp, #28]
 8016250:	1bda      	subs	r2, r3, r7
 8016252:	d004      	beq.n	801625e <_dtoa_r+0x76e>
 8016254:	9904      	ldr	r1, [sp, #16]
 8016256:	4620      	mov	r0, r4
 8016258:	f000 ff16 	bl	8017088 <__pow5mult>
 801625c:	9004      	str	r0, [sp, #16]
 801625e:	2101      	movs	r1, #1
 8016260:	4620      	mov	r0, r4
 8016262:	f000 fe71 	bl	8016f48 <__i2b>
 8016266:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016268:	4607      	mov	r7, r0
 801626a:	2b00      	cmp	r3, #0
 801626c:	f000 81d0 	beq.w	8016610 <_dtoa_r+0xb20>
 8016270:	461a      	mov	r2, r3
 8016272:	4601      	mov	r1, r0
 8016274:	4620      	mov	r0, r4
 8016276:	f000 ff07 	bl	8017088 <__pow5mult>
 801627a:	9b06      	ldr	r3, [sp, #24]
 801627c:	2b01      	cmp	r3, #1
 801627e:	4607      	mov	r7, r0
 8016280:	dc40      	bgt.n	8016304 <_dtoa_r+0x814>
 8016282:	9b00      	ldr	r3, [sp, #0]
 8016284:	2b00      	cmp	r3, #0
 8016286:	d139      	bne.n	80162fc <_dtoa_r+0x80c>
 8016288:	9b01      	ldr	r3, [sp, #4]
 801628a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801628e:	2b00      	cmp	r3, #0
 8016290:	d136      	bne.n	8016300 <_dtoa_r+0x810>
 8016292:	9b01      	ldr	r3, [sp, #4]
 8016294:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8016298:	0d1b      	lsrs	r3, r3, #20
 801629a:	051b      	lsls	r3, r3, #20
 801629c:	b12b      	cbz	r3, 80162aa <_dtoa_r+0x7ba>
 801629e:	9b05      	ldr	r3, [sp, #20]
 80162a0:	3301      	adds	r3, #1
 80162a2:	9305      	str	r3, [sp, #20]
 80162a4:	f108 0801 	add.w	r8, r8, #1
 80162a8:	2301      	movs	r3, #1
 80162aa:	9307      	str	r3, [sp, #28]
 80162ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80162ae:	2b00      	cmp	r3, #0
 80162b0:	d12a      	bne.n	8016308 <_dtoa_r+0x818>
 80162b2:	2001      	movs	r0, #1
 80162b4:	e030      	b.n	8016318 <_dtoa_r+0x828>
 80162b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80162b8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80162bc:	e795      	b.n	80161ea <_dtoa_r+0x6fa>
 80162be:	9b07      	ldr	r3, [sp, #28]
 80162c0:	f109 37ff 	add.w	r7, r9, #4294967295
 80162c4:	42bb      	cmp	r3, r7
 80162c6:	bfbf      	itttt	lt
 80162c8:	9b07      	ldrlt	r3, [sp, #28]
 80162ca:	9707      	strlt	r7, [sp, #28]
 80162cc:	1afa      	sublt	r2, r7, r3
 80162ce:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80162d0:	bfbb      	ittet	lt
 80162d2:	189b      	addlt	r3, r3, r2
 80162d4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80162d6:	1bdf      	subge	r7, r3, r7
 80162d8:	2700      	movlt	r7, #0
 80162da:	f1b9 0f00 	cmp.w	r9, #0
 80162de:	bfb5      	itete	lt
 80162e0:	9b05      	ldrlt	r3, [sp, #20]
 80162e2:	9d05      	ldrge	r5, [sp, #20]
 80162e4:	eba3 0509 	sublt.w	r5, r3, r9
 80162e8:	464b      	movge	r3, r9
 80162ea:	bfb8      	it	lt
 80162ec:	2300      	movlt	r3, #0
 80162ee:	e77e      	b.n	80161ee <_dtoa_r+0x6fe>
 80162f0:	9f07      	ldr	r7, [sp, #28]
 80162f2:	9d05      	ldr	r5, [sp, #20]
 80162f4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80162f6:	e783      	b.n	8016200 <_dtoa_r+0x710>
 80162f8:	9a07      	ldr	r2, [sp, #28]
 80162fa:	e7ab      	b.n	8016254 <_dtoa_r+0x764>
 80162fc:	2300      	movs	r3, #0
 80162fe:	e7d4      	b.n	80162aa <_dtoa_r+0x7ba>
 8016300:	9b00      	ldr	r3, [sp, #0]
 8016302:	e7d2      	b.n	80162aa <_dtoa_r+0x7ba>
 8016304:	2300      	movs	r3, #0
 8016306:	9307      	str	r3, [sp, #28]
 8016308:	693b      	ldr	r3, [r7, #16]
 801630a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 801630e:	6918      	ldr	r0, [r3, #16]
 8016310:	f000 fdcc 	bl	8016eac <__hi0bits>
 8016314:	f1c0 0020 	rsb	r0, r0, #32
 8016318:	4440      	add	r0, r8
 801631a:	f010 001f 	ands.w	r0, r0, #31
 801631e:	d047      	beq.n	80163b0 <_dtoa_r+0x8c0>
 8016320:	f1c0 0320 	rsb	r3, r0, #32
 8016324:	2b04      	cmp	r3, #4
 8016326:	dd3b      	ble.n	80163a0 <_dtoa_r+0x8b0>
 8016328:	9b05      	ldr	r3, [sp, #20]
 801632a:	f1c0 001c 	rsb	r0, r0, #28
 801632e:	4403      	add	r3, r0
 8016330:	9305      	str	r3, [sp, #20]
 8016332:	4405      	add	r5, r0
 8016334:	4480      	add	r8, r0
 8016336:	9b05      	ldr	r3, [sp, #20]
 8016338:	2b00      	cmp	r3, #0
 801633a:	dd05      	ble.n	8016348 <_dtoa_r+0x858>
 801633c:	461a      	mov	r2, r3
 801633e:	9904      	ldr	r1, [sp, #16]
 8016340:	4620      	mov	r0, r4
 8016342:	f000 feef 	bl	8017124 <__lshift>
 8016346:	9004      	str	r0, [sp, #16]
 8016348:	f1b8 0f00 	cmp.w	r8, #0
 801634c:	dd05      	ble.n	801635a <_dtoa_r+0x86a>
 801634e:	4639      	mov	r1, r7
 8016350:	4642      	mov	r2, r8
 8016352:	4620      	mov	r0, r4
 8016354:	f000 fee6 	bl	8017124 <__lshift>
 8016358:	4607      	mov	r7, r0
 801635a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801635c:	b353      	cbz	r3, 80163b4 <_dtoa_r+0x8c4>
 801635e:	4639      	mov	r1, r7
 8016360:	9804      	ldr	r0, [sp, #16]
 8016362:	f000 ff33 	bl	80171cc <__mcmp>
 8016366:	2800      	cmp	r0, #0
 8016368:	da24      	bge.n	80163b4 <_dtoa_r+0x8c4>
 801636a:	2300      	movs	r3, #0
 801636c:	220a      	movs	r2, #10
 801636e:	9904      	ldr	r1, [sp, #16]
 8016370:	4620      	mov	r0, r4
 8016372:	f000 fd22 	bl	8016dba <__multadd>
 8016376:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016378:	9004      	str	r0, [sp, #16]
 801637a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801637e:	2b00      	cmp	r3, #0
 8016380:	f000 814d 	beq.w	801661e <_dtoa_r+0xb2e>
 8016384:	2300      	movs	r3, #0
 8016386:	4631      	mov	r1, r6
 8016388:	220a      	movs	r2, #10
 801638a:	4620      	mov	r0, r4
 801638c:	f000 fd15 	bl	8016dba <__multadd>
 8016390:	9b02      	ldr	r3, [sp, #8]
 8016392:	2b00      	cmp	r3, #0
 8016394:	4606      	mov	r6, r0
 8016396:	dc4f      	bgt.n	8016438 <_dtoa_r+0x948>
 8016398:	9b06      	ldr	r3, [sp, #24]
 801639a:	2b02      	cmp	r3, #2
 801639c:	dd4c      	ble.n	8016438 <_dtoa_r+0x948>
 801639e:	e011      	b.n	80163c4 <_dtoa_r+0x8d4>
 80163a0:	d0c9      	beq.n	8016336 <_dtoa_r+0x846>
 80163a2:	9a05      	ldr	r2, [sp, #20]
 80163a4:	331c      	adds	r3, #28
 80163a6:	441a      	add	r2, r3
 80163a8:	9205      	str	r2, [sp, #20]
 80163aa:	441d      	add	r5, r3
 80163ac:	4498      	add	r8, r3
 80163ae:	e7c2      	b.n	8016336 <_dtoa_r+0x846>
 80163b0:	4603      	mov	r3, r0
 80163b2:	e7f6      	b.n	80163a2 <_dtoa_r+0x8b2>
 80163b4:	f1b9 0f00 	cmp.w	r9, #0
 80163b8:	dc38      	bgt.n	801642c <_dtoa_r+0x93c>
 80163ba:	9b06      	ldr	r3, [sp, #24]
 80163bc:	2b02      	cmp	r3, #2
 80163be:	dd35      	ble.n	801642c <_dtoa_r+0x93c>
 80163c0:	f8cd 9008 	str.w	r9, [sp, #8]
 80163c4:	9b02      	ldr	r3, [sp, #8]
 80163c6:	b963      	cbnz	r3, 80163e2 <_dtoa_r+0x8f2>
 80163c8:	4639      	mov	r1, r7
 80163ca:	2205      	movs	r2, #5
 80163cc:	4620      	mov	r0, r4
 80163ce:	f000 fcf4 	bl	8016dba <__multadd>
 80163d2:	4601      	mov	r1, r0
 80163d4:	4607      	mov	r7, r0
 80163d6:	9804      	ldr	r0, [sp, #16]
 80163d8:	f000 fef8 	bl	80171cc <__mcmp>
 80163dc:	2800      	cmp	r0, #0
 80163de:	f73f adcc 	bgt.w	8015f7a <_dtoa_r+0x48a>
 80163e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80163e4:	465d      	mov	r5, fp
 80163e6:	ea6f 0a03 	mvn.w	sl, r3
 80163ea:	f04f 0900 	mov.w	r9, #0
 80163ee:	4639      	mov	r1, r7
 80163f0:	4620      	mov	r0, r4
 80163f2:	f000 fccb 	bl	8016d8c <_Bfree>
 80163f6:	2e00      	cmp	r6, #0
 80163f8:	f43f aeb7 	beq.w	801616a <_dtoa_r+0x67a>
 80163fc:	f1b9 0f00 	cmp.w	r9, #0
 8016400:	d005      	beq.n	801640e <_dtoa_r+0x91e>
 8016402:	45b1      	cmp	r9, r6
 8016404:	d003      	beq.n	801640e <_dtoa_r+0x91e>
 8016406:	4649      	mov	r1, r9
 8016408:	4620      	mov	r0, r4
 801640a:	f000 fcbf 	bl	8016d8c <_Bfree>
 801640e:	4631      	mov	r1, r6
 8016410:	4620      	mov	r0, r4
 8016412:	f000 fcbb 	bl	8016d8c <_Bfree>
 8016416:	e6a8      	b.n	801616a <_dtoa_r+0x67a>
 8016418:	2700      	movs	r7, #0
 801641a:	463e      	mov	r6, r7
 801641c:	e7e1      	b.n	80163e2 <_dtoa_r+0x8f2>
 801641e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8016422:	463e      	mov	r6, r7
 8016424:	e5a9      	b.n	8015f7a <_dtoa_r+0x48a>
 8016426:	bf00      	nop
 8016428:	40240000 	.word	0x40240000
 801642c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801642e:	f8cd 9008 	str.w	r9, [sp, #8]
 8016432:	2b00      	cmp	r3, #0
 8016434:	f000 80fa 	beq.w	801662c <_dtoa_r+0xb3c>
 8016438:	2d00      	cmp	r5, #0
 801643a:	dd05      	ble.n	8016448 <_dtoa_r+0x958>
 801643c:	4631      	mov	r1, r6
 801643e:	462a      	mov	r2, r5
 8016440:	4620      	mov	r0, r4
 8016442:	f000 fe6f 	bl	8017124 <__lshift>
 8016446:	4606      	mov	r6, r0
 8016448:	9b07      	ldr	r3, [sp, #28]
 801644a:	2b00      	cmp	r3, #0
 801644c:	d04c      	beq.n	80164e8 <_dtoa_r+0x9f8>
 801644e:	6871      	ldr	r1, [r6, #4]
 8016450:	4620      	mov	r0, r4
 8016452:	f000 fc67 	bl	8016d24 <_Balloc>
 8016456:	6932      	ldr	r2, [r6, #16]
 8016458:	3202      	adds	r2, #2
 801645a:	4605      	mov	r5, r0
 801645c:	0092      	lsls	r2, r2, #2
 801645e:	f106 010c 	add.w	r1, r6, #12
 8016462:	300c      	adds	r0, #12
 8016464:	f7fd fd08 	bl	8013e78 <memcpy>
 8016468:	2201      	movs	r2, #1
 801646a:	4629      	mov	r1, r5
 801646c:	4620      	mov	r0, r4
 801646e:	f000 fe59 	bl	8017124 <__lshift>
 8016472:	9b00      	ldr	r3, [sp, #0]
 8016474:	f8cd b014 	str.w	fp, [sp, #20]
 8016478:	f003 0301 	and.w	r3, r3, #1
 801647c:	46b1      	mov	r9, r6
 801647e:	9307      	str	r3, [sp, #28]
 8016480:	4606      	mov	r6, r0
 8016482:	4639      	mov	r1, r7
 8016484:	9804      	ldr	r0, [sp, #16]
 8016486:	f7ff faa5 	bl	80159d4 <quorem>
 801648a:	4649      	mov	r1, r9
 801648c:	4605      	mov	r5, r0
 801648e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8016492:	9804      	ldr	r0, [sp, #16]
 8016494:	f000 fe9a 	bl	80171cc <__mcmp>
 8016498:	4632      	mov	r2, r6
 801649a:	9000      	str	r0, [sp, #0]
 801649c:	4639      	mov	r1, r7
 801649e:	4620      	mov	r0, r4
 80164a0:	f000 feae 	bl	8017200 <__mdiff>
 80164a4:	68c3      	ldr	r3, [r0, #12]
 80164a6:	4602      	mov	r2, r0
 80164a8:	bb03      	cbnz	r3, 80164ec <_dtoa_r+0x9fc>
 80164aa:	4601      	mov	r1, r0
 80164ac:	9008      	str	r0, [sp, #32]
 80164ae:	9804      	ldr	r0, [sp, #16]
 80164b0:	f000 fe8c 	bl	80171cc <__mcmp>
 80164b4:	9a08      	ldr	r2, [sp, #32]
 80164b6:	4603      	mov	r3, r0
 80164b8:	4611      	mov	r1, r2
 80164ba:	4620      	mov	r0, r4
 80164bc:	9308      	str	r3, [sp, #32]
 80164be:	f000 fc65 	bl	8016d8c <_Bfree>
 80164c2:	9b08      	ldr	r3, [sp, #32]
 80164c4:	b9a3      	cbnz	r3, 80164f0 <_dtoa_r+0xa00>
 80164c6:	9a06      	ldr	r2, [sp, #24]
 80164c8:	b992      	cbnz	r2, 80164f0 <_dtoa_r+0xa00>
 80164ca:	9a07      	ldr	r2, [sp, #28]
 80164cc:	b982      	cbnz	r2, 80164f0 <_dtoa_r+0xa00>
 80164ce:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80164d2:	d029      	beq.n	8016528 <_dtoa_r+0xa38>
 80164d4:	9b00      	ldr	r3, [sp, #0]
 80164d6:	2b00      	cmp	r3, #0
 80164d8:	dd01      	ble.n	80164de <_dtoa_r+0x9ee>
 80164da:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80164de:	9b05      	ldr	r3, [sp, #20]
 80164e0:	1c5d      	adds	r5, r3, #1
 80164e2:	f883 8000 	strb.w	r8, [r3]
 80164e6:	e782      	b.n	80163ee <_dtoa_r+0x8fe>
 80164e8:	4630      	mov	r0, r6
 80164ea:	e7c2      	b.n	8016472 <_dtoa_r+0x982>
 80164ec:	2301      	movs	r3, #1
 80164ee:	e7e3      	b.n	80164b8 <_dtoa_r+0x9c8>
 80164f0:	9a00      	ldr	r2, [sp, #0]
 80164f2:	2a00      	cmp	r2, #0
 80164f4:	db04      	blt.n	8016500 <_dtoa_r+0xa10>
 80164f6:	d125      	bne.n	8016544 <_dtoa_r+0xa54>
 80164f8:	9a06      	ldr	r2, [sp, #24]
 80164fa:	bb1a      	cbnz	r2, 8016544 <_dtoa_r+0xa54>
 80164fc:	9a07      	ldr	r2, [sp, #28]
 80164fe:	bb0a      	cbnz	r2, 8016544 <_dtoa_r+0xa54>
 8016500:	2b00      	cmp	r3, #0
 8016502:	ddec      	ble.n	80164de <_dtoa_r+0x9ee>
 8016504:	2201      	movs	r2, #1
 8016506:	9904      	ldr	r1, [sp, #16]
 8016508:	4620      	mov	r0, r4
 801650a:	f000 fe0b 	bl	8017124 <__lshift>
 801650e:	4639      	mov	r1, r7
 8016510:	9004      	str	r0, [sp, #16]
 8016512:	f000 fe5b 	bl	80171cc <__mcmp>
 8016516:	2800      	cmp	r0, #0
 8016518:	dc03      	bgt.n	8016522 <_dtoa_r+0xa32>
 801651a:	d1e0      	bne.n	80164de <_dtoa_r+0x9ee>
 801651c:	f018 0f01 	tst.w	r8, #1
 8016520:	d0dd      	beq.n	80164de <_dtoa_r+0x9ee>
 8016522:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8016526:	d1d8      	bne.n	80164da <_dtoa_r+0x9ea>
 8016528:	9b05      	ldr	r3, [sp, #20]
 801652a:	9a05      	ldr	r2, [sp, #20]
 801652c:	1c5d      	adds	r5, r3, #1
 801652e:	2339      	movs	r3, #57	; 0x39
 8016530:	7013      	strb	r3, [r2, #0]
 8016532:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8016536:	2b39      	cmp	r3, #57	; 0x39
 8016538:	f105 32ff 	add.w	r2, r5, #4294967295
 801653c:	d04f      	beq.n	80165de <_dtoa_r+0xaee>
 801653e:	3301      	adds	r3, #1
 8016540:	7013      	strb	r3, [r2, #0]
 8016542:	e754      	b.n	80163ee <_dtoa_r+0x8fe>
 8016544:	9a05      	ldr	r2, [sp, #20]
 8016546:	2b00      	cmp	r3, #0
 8016548:	f102 0501 	add.w	r5, r2, #1
 801654c:	dd06      	ble.n	801655c <_dtoa_r+0xa6c>
 801654e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8016552:	d0e9      	beq.n	8016528 <_dtoa_r+0xa38>
 8016554:	f108 0801 	add.w	r8, r8, #1
 8016558:	9b05      	ldr	r3, [sp, #20]
 801655a:	e7c2      	b.n	80164e2 <_dtoa_r+0x9f2>
 801655c:	9a02      	ldr	r2, [sp, #8]
 801655e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8016562:	eba5 030b 	sub.w	r3, r5, fp
 8016566:	4293      	cmp	r3, r2
 8016568:	d021      	beq.n	80165ae <_dtoa_r+0xabe>
 801656a:	2300      	movs	r3, #0
 801656c:	220a      	movs	r2, #10
 801656e:	9904      	ldr	r1, [sp, #16]
 8016570:	4620      	mov	r0, r4
 8016572:	f000 fc22 	bl	8016dba <__multadd>
 8016576:	45b1      	cmp	r9, r6
 8016578:	9004      	str	r0, [sp, #16]
 801657a:	f04f 0300 	mov.w	r3, #0
 801657e:	f04f 020a 	mov.w	r2, #10
 8016582:	4649      	mov	r1, r9
 8016584:	4620      	mov	r0, r4
 8016586:	d105      	bne.n	8016594 <_dtoa_r+0xaa4>
 8016588:	f000 fc17 	bl	8016dba <__multadd>
 801658c:	4681      	mov	r9, r0
 801658e:	4606      	mov	r6, r0
 8016590:	9505      	str	r5, [sp, #20]
 8016592:	e776      	b.n	8016482 <_dtoa_r+0x992>
 8016594:	f000 fc11 	bl	8016dba <__multadd>
 8016598:	4631      	mov	r1, r6
 801659a:	4681      	mov	r9, r0
 801659c:	2300      	movs	r3, #0
 801659e:	220a      	movs	r2, #10
 80165a0:	4620      	mov	r0, r4
 80165a2:	f000 fc0a 	bl	8016dba <__multadd>
 80165a6:	4606      	mov	r6, r0
 80165a8:	e7f2      	b.n	8016590 <_dtoa_r+0xaa0>
 80165aa:	f04f 0900 	mov.w	r9, #0
 80165ae:	2201      	movs	r2, #1
 80165b0:	9904      	ldr	r1, [sp, #16]
 80165b2:	4620      	mov	r0, r4
 80165b4:	f000 fdb6 	bl	8017124 <__lshift>
 80165b8:	4639      	mov	r1, r7
 80165ba:	9004      	str	r0, [sp, #16]
 80165bc:	f000 fe06 	bl	80171cc <__mcmp>
 80165c0:	2800      	cmp	r0, #0
 80165c2:	dcb6      	bgt.n	8016532 <_dtoa_r+0xa42>
 80165c4:	d102      	bne.n	80165cc <_dtoa_r+0xadc>
 80165c6:	f018 0f01 	tst.w	r8, #1
 80165ca:	d1b2      	bne.n	8016532 <_dtoa_r+0xa42>
 80165cc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80165d0:	2b30      	cmp	r3, #48	; 0x30
 80165d2:	f105 32ff 	add.w	r2, r5, #4294967295
 80165d6:	f47f af0a 	bne.w	80163ee <_dtoa_r+0x8fe>
 80165da:	4615      	mov	r5, r2
 80165dc:	e7f6      	b.n	80165cc <_dtoa_r+0xadc>
 80165de:	4593      	cmp	fp, r2
 80165e0:	d105      	bne.n	80165ee <_dtoa_r+0xafe>
 80165e2:	2331      	movs	r3, #49	; 0x31
 80165e4:	f10a 0a01 	add.w	sl, sl, #1
 80165e8:	f88b 3000 	strb.w	r3, [fp]
 80165ec:	e6ff      	b.n	80163ee <_dtoa_r+0x8fe>
 80165ee:	4615      	mov	r5, r2
 80165f0:	e79f      	b.n	8016532 <_dtoa_r+0xa42>
 80165f2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8016658 <_dtoa_r+0xb68>
 80165f6:	e007      	b.n	8016608 <_dtoa_r+0xb18>
 80165f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80165fa:	f8df b060 	ldr.w	fp, [pc, #96]	; 801665c <_dtoa_r+0xb6c>
 80165fe:	b11b      	cbz	r3, 8016608 <_dtoa_r+0xb18>
 8016600:	f10b 0308 	add.w	r3, fp, #8
 8016604:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8016606:	6013      	str	r3, [r2, #0]
 8016608:	4658      	mov	r0, fp
 801660a:	b017      	add	sp, #92	; 0x5c
 801660c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016610:	9b06      	ldr	r3, [sp, #24]
 8016612:	2b01      	cmp	r3, #1
 8016614:	f77f ae35 	ble.w	8016282 <_dtoa_r+0x792>
 8016618:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801661a:	9307      	str	r3, [sp, #28]
 801661c:	e649      	b.n	80162b2 <_dtoa_r+0x7c2>
 801661e:	9b02      	ldr	r3, [sp, #8]
 8016620:	2b00      	cmp	r3, #0
 8016622:	dc03      	bgt.n	801662c <_dtoa_r+0xb3c>
 8016624:	9b06      	ldr	r3, [sp, #24]
 8016626:	2b02      	cmp	r3, #2
 8016628:	f73f aecc 	bgt.w	80163c4 <_dtoa_r+0x8d4>
 801662c:	465d      	mov	r5, fp
 801662e:	4639      	mov	r1, r7
 8016630:	9804      	ldr	r0, [sp, #16]
 8016632:	f7ff f9cf 	bl	80159d4 <quorem>
 8016636:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801663a:	f805 8b01 	strb.w	r8, [r5], #1
 801663e:	9a02      	ldr	r2, [sp, #8]
 8016640:	eba5 030b 	sub.w	r3, r5, fp
 8016644:	429a      	cmp	r2, r3
 8016646:	ddb0      	ble.n	80165aa <_dtoa_r+0xaba>
 8016648:	2300      	movs	r3, #0
 801664a:	220a      	movs	r2, #10
 801664c:	9904      	ldr	r1, [sp, #16]
 801664e:	4620      	mov	r0, r4
 8016650:	f000 fbb3 	bl	8016dba <__multadd>
 8016654:	9004      	str	r0, [sp, #16]
 8016656:	e7ea      	b.n	801662e <_dtoa_r+0xb3e>
 8016658:	08018c4b 	.word	0x08018c4b
 801665c:	08018aa8 	.word	0x08018aa8

08016660 <rshift>:
 8016660:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016662:	6906      	ldr	r6, [r0, #16]
 8016664:	114b      	asrs	r3, r1, #5
 8016666:	429e      	cmp	r6, r3
 8016668:	f100 0414 	add.w	r4, r0, #20
 801666c:	dd30      	ble.n	80166d0 <rshift+0x70>
 801666e:	f011 011f 	ands.w	r1, r1, #31
 8016672:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8016676:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 801667a:	d108      	bne.n	801668e <rshift+0x2e>
 801667c:	4621      	mov	r1, r4
 801667e:	42b2      	cmp	r2, r6
 8016680:	460b      	mov	r3, r1
 8016682:	d211      	bcs.n	80166a8 <rshift+0x48>
 8016684:	f852 3b04 	ldr.w	r3, [r2], #4
 8016688:	f841 3b04 	str.w	r3, [r1], #4
 801668c:	e7f7      	b.n	801667e <rshift+0x1e>
 801668e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8016692:	f1c1 0c20 	rsb	ip, r1, #32
 8016696:	40cd      	lsrs	r5, r1
 8016698:	3204      	adds	r2, #4
 801669a:	4623      	mov	r3, r4
 801669c:	42b2      	cmp	r2, r6
 801669e:	4617      	mov	r7, r2
 80166a0:	d30c      	bcc.n	80166bc <rshift+0x5c>
 80166a2:	601d      	str	r5, [r3, #0]
 80166a4:	b105      	cbz	r5, 80166a8 <rshift+0x48>
 80166a6:	3304      	adds	r3, #4
 80166a8:	1b1a      	subs	r2, r3, r4
 80166aa:	42a3      	cmp	r3, r4
 80166ac:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80166b0:	bf08      	it	eq
 80166b2:	2300      	moveq	r3, #0
 80166b4:	6102      	str	r2, [r0, #16]
 80166b6:	bf08      	it	eq
 80166b8:	6143      	streq	r3, [r0, #20]
 80166ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80166bc:	683f      	ldr	r7, [r7, #0]
 80166be:	fa07 f70c 	lsl.w	r7, r7, ip
 80166c2:	433d      	orrs	r5, r7
 80166c4:	f843 5b04 	str.w	r5, [r3], #4
 80166c8:	f852 5b04 	ldr.w	r5, [r2], #4
 80166cc:	40cd      	lsrs	r5, r1
 80166ce:	e7e5      	b.n	801669c <rshift+0x3c>
 80166d0:	4623      	mov	r3, r4
 80166d2:	e7e9      	b.n	80166a8 <rshift+0x48>

080166d4 <__hexdig_fun>:
 80166d4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80166d8:	2b09      	cmp	r3, #9
 80166da:	d802      	bhi.n	80166e2 <__hexdig_fun+0xe>
 80166dc:	3820      	subs	r0, #32
 80166de:	b2c0      	uxtb	r0, r0
 80166e0:	4770      	bx	lr
 80166e2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80166e6:	2b05      	cmp	r3, #5
 80166e8:	d801      	bhi.n	80166ee <__hexdig_fun+0x1a>
 80166ea:	3847      	subs	r0, #71	; 0x47
 80166ec:	e7f7      	b.n	80166de <__hexdig_fun+0xa>
 80166ee:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80166f2:	2b05      	cmp	r3, #5
 80166f4:	d801      	bhi.n	80166fa <__hexdig_fun+0x26>
 80166f6:	3827      	subs	r0, #39	; 0x27
 80166f8:	e7f1      	b.n	80166de <__hexdig_fun+0xa>
 80166fa:	2000      	movs	r0, #0
 80166fc:	4770      	bx	lr

080166fe <__gethex>:
 80166fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016702:	b08b      	sub	sp, #44	; 0x2c
 8016704:	468a      	mov	sl, r1
 8016706:	9002      	str	r0, [sp, #8]
 8016708:	9816      	ldr	r0, [sp, #88]	; 0x58
 801670a:	9306      	str	r3, [sp, #24]
 801670c:	4690      	mov	r8, r2
 801670e:	f000 fadf 	bl	8016cd0 <__localeconv_l>
 8016712:	6803      	ldr	r3, [r0, #0]
 8016714:	9303      	str	r3, [sp, #12]
 8016716:	4618      	mov	r0, r3
 8016718:	f7e9 fd72 	bl	8000200 <strlen>
 801671c:	9b03      	ldr	r3, [sp, #12]
 801671e:	9001      	str	r0, [sp, #4]
 8016720:	4403      	add	r3, r0
 8016722:	f04f 0b00 	mov.w	fp, #0
 8016726:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 801672a:	9307      	str	r3, [sp, #28]
 801672c:	f8da 3000 	ldr.w	r3, [sl]
 8016730:	3302      	adds	r3, #2
 8016732:	461f      	mov	r7, r3
 8016734:	f813 0b01 	ldrb.w	r0, [r3], #1
 8016738:	2830      	cmp	r0, #48	; 0x30
 801673a:	d06c      	beq.n	8016816 <__gethex+0x118>
 801673c:	f7ff ffca 	bl	80166d4 <__hexdig_fun>
 8016740:	4604      	mov	r4, r0
 8016742:	2800      	cmp	r0, #0
 8016744:	d16a      	bne.n	801681c <__gethex+0x11e>
 8016746:	9a01      	ldr	r2, [sp, #4]
 8016748:	9903      	ldr	r1, [sp, #12]
 801674a:	4638      	mov	r0, r7
 801674c:	f001 fc36 	bl	8017fbc <strncmp>
 8016750:	2800      	cmp	r0, #0
 8016752:	d166      	bne.n	8016822 <__gethex+0x124>
 8016754:	9b01      	ldr	r3, [sp, #4]
 8016756:	5cf8      	ldrb	r0, [r7, r3]
 8016758:	18fe      	adds	r6, r7, r3
 801675a:	f7ff ffbb 	bl	80166d4 <__hexdig_fun>
 801675e:	2800      	cmp	r0, #0
 8016760:	d062      	beq.n	8016828 <__gethex+0x12a>
 8016762:	4633      	mov	r3, r6
 8016764:	7818      	ldrb	r0, [r3, #0]
 8016766:	2830      	cmp	r0, #48	; 0x30
 8016768:	461f      	mov	r7, r3
 801676a:	f103 0301 	add.w	r3, r3, #1
 801676e:	d0f9      	beq.n	8016764 <__gethex+0x66>
 8016770:	f7ff ffb0 	bl	80166d4 <__hexdig_fun>
 8016774:	fab0 f580 	clz	r5, r0
 8016778:	096d      	lsrs	r5, r5, #5
 801677a:	4634      	mov	r4, r6
 801677c:	f04f 0b01 	mov.w	fp, #1
 8016780:	463a      	mov	r2, r7
 8016782:	4616      	mov	r6, r2
 8016784:	3201      	adds	r2, #1
 8016786:	7830      	ldrb	r0, [r6, #0]
 8016788:	f7ff ffa4 	bl	80166d4 <__hexdig_fun>
 801678c:	2800      	cmp	r0, #0
 801678e:	d1f8      	bne.n	8016782 <__gethex+0x84>
 8016790:	9a01      	ldr	r2, [sp, #4]
 8016792:	9903      	ldr	r1, [sp, #12]
 8016794:	4630      	mov	r0, r6
 8016796:	f001 fc11 	bl	8017fbc <strncmp>
 801679a:	b950      	cbnz	r0, 80167b2 <__gethex+0xb4>
 801679c:	b954      	cbnz	r4, 80167b4 <__gethex+0xb6>
 801679e:	9b01      	ldr	r3, [sp, #4]
 80167a0:	18f4      	adds	r4, r6, r3
 80167a2:	4622      	mov	r2, r4
 80167a4:	4616      	mov	r6, r2
 80167a6:	3201      	adds	r2, #1
 80167a8:	7830      	ldrb	r0, [r6, #0]
 80167aa:	f7ff ff93 	bl	80166d4 <__hexdig_fun>
 80167ae:	2800      	cmp	r0, #0
 80167b0:	d1f8      	bne.n	80167a4 <__gethex+0xa6>
 80167b2:	b10c      	cbz	r4, 80167b8 <__gethex+0xba>
 80167b4:	1ba4      	subs	r4, r4, r6
 80167b6:	00a4      	lsls	r4, r4, #2
 80167b8:	7833      	ldrb	r3, [r6, #0]
 80167ba:	2b50      	cmp	r3, #80	; 0x50
 80167bc:	d001      	beq.n	80167c2 <__gethex+0xc4>
 80167be:	2b70      	cmp	r3, #112	; 0x70
 80167c0:	d140      	bne.n	8016844 <__gethex+0x146>
 80167c2:	7873      	ldrb	r3, [r6, #1]
 80167c4:	2b2b      	cmp	r3, #43	; 0x2b
 80167c6:	d031      	beq.n	801682c <__gethex+0x12e>
 80167c8:	2b2d      	cmp	r3, #45	; 0x2d
 80167ca:	d033      	beq.n	8016834 <__gethex+0x136>
 80167cc:	1c71      	adds	r1, r6, #1
 80167ce:	f04f 0900 	mov.w	r9, #0
 80167d2:	7808      	ldrb	r0, [r1, #0]
 80167d4:	f7ff ff7e 	bl	80166d4 <__hexdig_fun>
 80167d8:	1e43      	subs	r3, r0, #1
 80167da:	b2db      	uxtb	r3, r3
 80167dc:	2b18      	cmp	r3, #24
 80167de:	d831      	bhi.n	8016844 <__gethex+0x146>
 80167e0:	f1a0 0210 	sub.w	r2, r0, #16
 80167e4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80167e8:	f7ff ff74 	bl	80166d4 <__hexdig_fun>
 80167ec:	1e43      	subs	r3, r0, #1
 80167ee:	b2db      	uxtb	r3, r3
 80167f0:	2b18      	cmp	r3, #24
 80167f2:	d922      	bls.n	801683a <__gethex+0x13c>
 80167f4:	f1b9 0f00 	cmp.w	r9, #0
 80167f8:	d000      	beq.n	80167fc <__gethex+0xfe>
 80167fa:	4252      	negs	r2, r2
 80167fc:	4414      	add	r4, r2
 80167fe:	f8ca 1000 	str.w	r1, [sl]
 8016802:	b30d      	cbz	r5, 8016848 <__gethex+0x14a>
 8016804:	f1bb 0f00 	cmp.w	fp, #0
 8016808:	bf0c      	ite	eq
 801680a:	2706      	moveq	r7, #6
 801680c:	2700      	movne	r7, #0
 801680e:	4638      	mov	r0, r7
 8016810:	b00b      	add	sp, #44	; 0x2c
 8016812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016816:	f10b 0b01 	add.w	fp, fp, #1
 801681a:	e78a      	b.n	8016732 <__gethex+0x34>
 801681c:	2500      	movs	r5, #0
 801681e:	462c      	mov	r4, r5
 8016820:	e7ae      	b.n	8016780 <__gethex+0x82>
 8016822:	463e      	mov	r6, r7
 8016824:	2501      	movs	r5, #1
 8016826:	e7c7      	b.n	80167b8 <__gethex+0xba>
 8016828:	4604      	mov	r4, r0
 801682a:	e7fb      	b.n	8016824 <__gethex+0x126>
 801682c:	f04f 0900 	mov.w	r9, #0
 8016830:	1cb1      	adds	r1, r6, #2
 8016832:	e7ce      	b.n	80167d2 <__gethex+0xd4>
 8016834:	f04f 0901 	mov.w	r9, #1
 8016838:	e7fa      	b.n	8016830 <__gethex+0x132>
 801683a:	230a      	movs	r3, #10
 801683c:	fb03 0202 	mla	r2, r3, r2, r0
 8016840:	3a10      	subs	r2, #16
 8016842:	e7cf      	b.n	80167e4 <__gethex+0xe6>
 8016844:	4631      	mov	r1, r6
 8016846:	e7da      	b.n	80167fe <__gethex+0x100>
 8016848:	1bf3      	subs	r3, r6, r7
 801684a:	3b01      	subs	r3, #1
 801684c:	4629      	mov	r1, r5
 801684e:	2b07      	cmp	r3, #7
 8016850:	dc49      	bgt.n	80168e6 <__gethex+0x1e8>
 8016852:	9802      	ldr	r0, [sp, #8]
 8016854:	f000 fa66 	bl	8016d24 <_Balloc>
 8016858:	9b01      	ldr	r3, [sp, #4]
 801685a:	f100 0914 	add.w	r9, r0, #20
 801685e:	f04f 0b00 	mov.w	fp, #0
 8016862:	f1c3 0301 	rsb	r3, r3, #1
 8016866:	4605      	mov	r5, r0
 8016868:	f8cd 9010 	str.w	r9, [sp, #16]
 801686c:	46da      	mov	sl, fp
 801686e:	9308      	str	r3, [sp, #32]
 8016870:	42b7      	cmp	r7, r6
 8016872:	d33b      	bcc.n	80168ec <__gethex+0x1ee>
 8016874:	9804      	ldr	r0, [sp, #16]
 8016876:	f840 ab04 	str.w	sl, [r0], #4
 801687a:	eba0 0009 	sub.w	r0, r0, r9
 801687e:	1080      	asrs	r0, r0, #2
 8016880:	6128      	str	r0, [r5, #16]
 8016882:	0147      	lsls	r7, r0, #5
 8016884:	4650      	mov	r0, sl
 8016886:	f000 fb11 	bl	8016eac <__hi0bits>
 801688a:	f8d8 6000 	ldr.w	r6, [r8]
 801688e:	1a3f      	subs	r7, r7, r0
 8016890:	42b7      	cmp	r7, r6
 8016892:	dd64      	ble.n	801695e <__gethex+0x260>
 8016894:	1bbf      	subs	r7, r7, r6
 8016896:	4639      	mov	r1, r7
 8016898:	4628      	mov	r0, r5
 801689a:	f000 fe21 	bl	80174e0 <__any_on>
 801689e:	4682      	mov	sl, r0
 80168a0:	b178      	cbz	r0, 80168c2 <__gethex+0x1c4>
 80168a2:	1e7b      	subs	r3, r7, #1
 80168a4:	1159      	asrs	r1, r3, #5
 80168a6:	f003 021f 	and.w	r2, r3, #31
 80168aa:	f04f 0a01 	mov.w	sl, #1
 80168ae:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80168b2:	fa0a f202 	lsl.w	r2, sl, r2
 80168b6:	420a      	tst	r2, r1
 80168b8:	d003      	beq.n	80168c2 <__gethex+0x1c4>
 80168ba:	4553      	cmp	r3, sl
 80168bc:	dc46      	bgt.n	801694c <__gethex+0x24e>
 80168be:	f04f 0a02 	mov.w	sl, #2
 80168c2:	4639      	mov	r1, r7
 80168c4:	4628      	mov	r0, r5
 80168c6:	f7ff fecb 	bl	8016660 <rshift>
 80168ca:	443c      	add	r4, r7
 80168cc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80168d0:	42a3      	cmp	r3, r4
 80168d2:	da52      	bge.n	801697a <__gethex+0x27c>
 80168d4:	4629      	mov	r1, r5
 80168d6:	9802      	ldr	r0, [sp, #8]
 80168d8:	f000 fa58 	bl	8016d8c <_Bfree>
 80168dc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80168de:	2300      	movs	r3, #0
 80168e0:	6013      	str	r3, [r2, #0]
 80168e2:	27a3      	movs	r7, #163	; 0xa3
 80168e4:	e793      	b.n	801680e <__gethex+0x110>
 80168e6:	3101      	adds	r1, #1
 80168e8:	105b      	asrs	r3, r3, #1
 80168ea:	e7b0      	b.n	801684e <__gethex+0x150>
 80168ec:	1e73      	subs	r3, r6, #1
 80168ee:	9305      	str	r3, [sp, #20]
 80168f0:	9a07      	ldr	r2, [sp, #28]
 80168f2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80168f6:	4293      	cmp	r3, r2
 80168f8:	d018      	beq.n	801692c <__gethex+0x22e>
 80168fa:	f1bb 0f20 	cmp.w	fp, #32
 80168fe:	d107      	bne.n	8016910 <__gethex+0x212>
 8016900:	9b04      	ldr	r3, [sp, #16]
 8016902:	f8c3 a000 	str.w	sl, [r3]
 8016906:	3304      	adds	r3, #4
 8016908:	f04f 0a00 	mov.w	sl, #0
 801690c:	9304      	str	r3, [sp, #16]
 801690e:	46d3      	mov	fp, sl
 8016910:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8016914:	f7ff fede 	bl	80166d4 <__hexdig_fun>
 8016918:	f000 000f 	and.w	r0, r0, #15
 801691c:	fa00 f00b 	lsl.w	r0, r0, fp
 8016920:	ea4a 0a00 	orr.w	sl, sl, r0
 8016924:	f10b 0b04 	add.w	fp, fp, #4
 8016928:	9b05      	ldr	r3, [sp, #20]
 801692a:	e00d      	b.n	8016948 <__gethex+0x24a>
 801692c:	9b05      	ldr	r3, [sp, #20]
 801692e:	9a08      	ldr	r2, [sp, #32]
 8016930:	4413      	add	r3, r2
 8016932:	42bb      	cmp	r3, r7
 8016934:	d3e1      	bcc.n	80168fa <__gethex+0x1fc>
 8016936:	4618      	mov	r0, r3
 8016938:	9a01      	ldr	r2, [sp, #4]
 801693a:	9903      	ldr	r1, [sp, #12]
 801693c:	9309      	str	r3, [sp, #36]	; 0x24
 801693e:	f001 fb3d 	bl	8017fbc <strncmp>
 8016942:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016944:	2800      	cmp	r0, #0
 8016946:	d1d8      	bne.n	80168fa <__gethex+0x1fc>
 8016948:	461e      	mov	r6, r3
 801694a:	e791      	b.n	8016870 <__gethex+0x172>
 801694c:	1eb9      	subs	r1, r7, #2
 801694e:	4628      	mov	r0, r5
 8016950:	f000 fdc6 	bl	80174e0 <__any_on>
 8016954:	2800      	cmp	r0, #0
 8016956:	d0b2      	beq.n	80168be <__gethex+0x1c0>
 8016958:	f04f 0a03 	mov.w	sl, #3
 801695c:	e7b1      	b.n	80168c2 <__gethex+0x1c4>
 801695e:	da09      	bge.n	8016974 <__gethex+0x276>
 8016960:	1bf7      	subs	r7, r6, r7
 8016962:	4629      	mov	r1, r5
 8016964:	463a      	mov	r2, r7
 8016966:	9802      	ldr	r0, [sp, #8]
 8016968:	f000 fbdc 	bl	8017124 <__lshift>
 801696c:	1be4      	subs	r4, r4, r7
 801696e:	4605      	mov	r5, r0
 8016970:	f100 0914 	add.w	r9, r0, #20
 8016974:	f04f 0a00 	mov.w	sl, #0
 8016978:	e7a8      	b.n	80168cc <__gethex+0x1ce>
 801697a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801697e:	42a0      	cmp	r0, r4
 8016980:	dd6a      	ble.n	8016a58 <__gethex+0x35a>
 8016982:	1b04      	subs	r4, r0, r4
 8016984:	42a6      	cmp	r6, r4
 8016986:	dc2e      	bgt.n	80169e6 <__gethex+0x2e8>
 8016988:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801698c:	2b02      	cmp	r3, #2
 801698e:	d022      	beq.n	80169d6 <__gethex+0x2d8>
 8016990:	2b03      	cmp	r3, #3
 8016992:	d024      	beq.n	80169de <__gethex+0x2e0>
 8016994:	2b01      	cmp	r3, #1
 8016996:	d115      	bne.n	80169c4 <__gethex+0x2c6>
 8016998:	42a6      	cmp	r6, r4
 801699a:	d113      	bne.n	80169c4 <__gethex+0x2c6>
 801699c:	2e01      	cmp	r6, #1
 801699e:	dc0b      	bgt.n	80169b8 <__gethex+0x2ba>
 80169a0:	9a06      	ldr	r2, [sp, #24]
 80169a2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80169a6:	6013      	str	r3, [r2, #0]
 80169a8:	2301      	movs	r3, #1
 80169aa:	612b      	str	r3, [r5, #16]
 80169ac:	f8c9 3000 	str.w	r3, [r9]
 80169b0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80169b2:	2762      	movs	r7, #98	; 0x62
 80169b4:	601d      	str	r5, [r3, #0]
 80169b6:	e72a      	b.n	801680e <__gethex+0x110>
 80169b8:	1e71      	subs	r1, r6, #1
 80169ba:	4628      	mov	r0, r5
 80169bc:	f000 fd90 	bl	80174e0 <__any_on>
 80169c0:	2800      	cmp	r0, #0
 80169c2:	d1ed      	bne.n	80169a0 <__gethex+0x2a2>
 80169c4:	4629      	mov	r1, r5
 80169c6:	9802      	ldr	r0, [sp, #8]
 80169c8:	f000 f9e0 	bl	8016d8c <_Bfree>
 80169cc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80169ce:	2300      	movs	r3, #0
 80169d0:	6013      	str	r3, [r2, #0]
 80169d2:	2750      	movs	r7, #80	; 0x50
 80169d4:	e71b      	b.n	801680e <__gethex+0x110>
 80169d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80169d8:	2b00      	cmp	r3, #0
 80169da:	d0e1      	beq.n	80169a0 <__gethex+0x2a2>
 80169dc:	e7f2      	b.n	80169c4 <__gethex+0x2c6>
 80169de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80169e0:	2b00      	cmp	r3, #0
 80169e2:	d1dd      	bne.n	80169a0 <__gethex+0x2a2>
 80169e4:	e7ee      	b.n	80169c4 <__gethex+0x2c6>
 80169e6:	1e67      	subs	r7, r4, #1
 80169e8:	f1ba 0f00 	cmp.w	sl, #0
 80169ec:	d131      	bne.n	8016a52 <__gethex+0x354>
 80169ee:	b127      	cbz	r7, 80169fa <__gethex+0x2fc>
 80169f0:	4639      	mov	r1, r7
 80169f2:	4628      	mov	r0, r5
 80169f4:	f000 fd74 	bl	80174e0 <__any_on>
 80169f8:	4682      	mov	sl, r0
 80169fa:	117a      	asrs	r2, r7, #5
 80169fc:	2301      	movs	r3, #1
 80169fe:	f007 071f 	and.w	r7, r7, #31
 8016a02:	fa03 f707 	lsl.w	r7, r3, r7
 8016a06:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8016a0a:	4621      	mov	r1, r4
 8016a0c:	421f      	tst	r7, r3
 8016a0e:	4628      	mov	r0, r5
 8016a10:	bf18      	it	ne
 8016a12:	f04a 0a02 	orrne.w	sl, sl, #2
 8016a16:	1b36      	subs	r6, r6, r4
 8016a18:	f7ff fe22 	bl	8016660 <rshift>
 8016a1c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8016a20:	2702      	movs	r7, #2
 8016a22:	f1ba 0f00 	cmp.w	sl, #0
 8016a26:	d048      	beq.n	8016aba <__gethex+0x3bc>
 8016a28:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8016a2c:	2b02      	cmp	r3, #2
 8016a2e:	d015      	beq.n	8016a5c <__gethex+0x35e>
 8016a30:	2b03      	cmp	r3, #3
 8016a32:	d017      	beq.n	8016a64 <__gethex+0x366>
 8016a34:	2b01      	cmp	r3, #1
 8016a36:	d109      	bne.n	8016a4c <__gethex+0x34e>
 8016a38:	f01a 0f02 	tst.w	sl, #2
 8016a3c:	d006      	beq.n	8016a4c <__gethex+0x34e>
 8016a3e:	f8d9 3000 	ldr.w	r3, [r9]
 8016a42:	ea4a 0a03 	orr.w	sl, sl, r3
 8016a46:	f01a 0f01 	tst.w	sl, #1
 8016a4a:	d10e      	bne.n	8016a6a <__gethex+0x36c>
 8016a4c:	f047 0710 	orr.w	r7, r7, #16
 8016a50:	e033      	b.n	8016aba <__gethex+0x3bc>
 8016a52:	f04f 0a01 	mov.w	sl, #1
 8016a56:	e7d0      	b.n	80169fa <__gethex+0x2fc>
 8016a58:	2701      	movs	r7, #1
 8016a5a:	e7e2      	b.n	8016a22 <__gethex+0x324>
 8016a5c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016a5e:	f1c3 0301 	rsb	r3, r3, #1
 8016a62:	9315      	str	r3, [sp, #84]	; 0x54
 8016a64:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016a66:	2b00      	cmp	r3, #0
 8016a68:	d0f0      	beq.n	8016a4c <__gethex+0x34e>
 8016a6a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8016a6e:	f105 0314 	add.w	r3, r5, #20
 8016a72:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8016a76:	eb03 010a 	add.w	r1, r3, sl
 8016a7a:	f04f 0c00 	mov.w	ip, #0
 8016a7e:	4618      	mov	r0, r3
 8016a80:	f853 2b04 	ldr.w	r2, [r3], #4
 8016a84:	f1b2 3fff 	cmp.w	r2, #4294967295
 8016a88:	d01c      	beq.n	8016ac4 <__gethex+0x3c6>
 8016a8a:	3201      	adds	r2, #1
 8016a8c:	6002      	str	r2, [r0, #0]
 8016a8e:	2f02      	cmp	r7, #2
 8016a90:	f105 0314 	add.w	r3, r5, #20
 8016a94:	d138      	bne.n	8016b08 <__gethex+0x40a>
 8016a96:	f8d8 2000 	ldr.w	r2, [r8]
 8016a9a:	3a01      	subs	r2, #1
 8016a9c:	42b2      	cmp	r2, r6
 8016a9e:	d10a      	bne.n	8016ab6 <__gethex+0x3b8>
 8016aa0:	1171      	asrs	r1, r6, #5
 8016aa2:	2201      	movs	r2, #1
 8016aa4:	f006 061f 	and.w	r6, r6, #31
 8016aa8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8016aac:	fa02 f606 	lsl.w	r6, r2, r6
 8016ab0:	421e      	tst	r6, r3
 8016ab2:	bf18      	it	ne
 8016ab4:	4617      	movne	r7, r2
 8016ab6:	f047 0720 	orr.w	r7, r7, #32
 8016aba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016abc:	601d      	str	r5, [r3, #0]
 8016abe:	9b06      	ldr	r3, [sp, #24]
 8016ac0:	601c      	str	r4, [r3, #0]
 8016ac2:	e6a4      	b.n	801680e <__gethex+0x110>
 8016ac4:	4299      	cmp	r1, r3
 8016ac6:	f843 cc04 	str.w	ip, [r3, #-4]
 8016aca:	d8d8      	bhi.n	8016a7e <__gethex+0x380>
 8016acc:	68ab      	ldr	r3, [r5, #8]
 8016ace:	4599      	cmp	r9, r3
 8016ad0:	db12      	blt.n	8016af8 <__gethex+0x3fa>
 8016ad2:	6869      	ldr	r1, [r5, #4]
 8016ad4:	9802      	ldr	r0, [sp, #8]
 8016ad6:	3101      	adds	r1, #1
 8016ad8:	f000 f924 	bl	8016d24 <_Balloc>
 8016adc:	692a      	ldr	r2, [r5, #16]
 8016ade:	3202      	adds	r2, #2
 8016ae0:	f105 010c 	add.w	r1, r5, #12
 8016ae4:	4683      	mov	fp, r0
 8016ae6:	0092      	lsls	r2, r2, #2
 8016ae8:	300c      	adds	r0, #12
 8016aea:	f7fd f9c5 	bl	8013e78 <memcpy>
 8016aee:	4629      	mov	r1, r5
 8016af0:	9802      	ldr	r0, [sp, #8]
 8016af2:	f000 f94b 	bl	8016d8c <_Bfree>
 8016af6:	465d      	mov	r5, fp
 8016af8:	692b      	ldr	r3, [r5, #16]
 8016afa:	1c5a      	adds	r2, r3, #1
 8016afc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8016b00:	612a      	str	r2, [r5, #16]
 8016b02:	2201      	movs	r2, #1
 8016b04:	615a      	str	r2, [r3, #20]
 8016b06:	e7c2      	b.n	8016a8e <__gethex+0x390>
 8016b08:	692a      	ldr	r2, [r5, #16]
 8016b0a:	454a      	cmp	r2, r9
 8016b0c:	dd0b      	ble.n	8016b26 <__gethex+0x428>
 8016b0e:	2101      	movs	r1, #1
 8016b10:	4628      	mov	r0, r5
 8016b12:	f7ff fda5 	bl	8016660 <rshift>
 8016b16:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016b1a:	3401      	adds	r4, #1
 8016b1c:	42a3      	cmp	r3, r4
 8016b1e:	f6ff aed9 	blt.w	80168d4 <__gethex+0x1d6>
 8016b22:	2701      	movs	r7, #1
 8016b24:	e7c7      	b.n	8016ab6 <__gethex+0x3b8>
 8016b26:	f016 061f 	ands.w	r6, r6, #31
 8016b2a:	d0fa      	beq.n	8016b22 <__gethex+0x424>
 8016b2c:	449a      	add	sl, r3
 8016b2e:	f1c6 0620 	rsb	r6, r6, #32
 8016b32:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8016b36:	f000 f9b9 	bl	8016eac <__hi0bits>
 8016b3a:	42b0      	cmp	r0, r6
 8016b3c:	dbe7      	blt.n	8016b0e <__gethex+0x410>
 8016b3e:	e7f0      	b.n	8016b22 <__gethex+0x424>

08016b40 <L_shift>:
 8016b40:	f1c2 0208 	rsb	r2, r2, #8
 8016b44:	0092      	lsls	r2, r2, #2
 8016b46:	b570      	push	{r4, r5, r6, lr}
 8016b48:	f1c2 0620 	rsb	r6, r2, #32
 8016b4c:	6843      	ldr	r3, [r0, #4]
 8016b4e:	6804      	ldr	r4, [r0, #0]
 8016b50:	fa03 f506 	lsl.w	r5, r3, r6
 8016b54:	432c      	orrs	r4, r5
 8016b56:	40d3      	lsrs	r3, r2
 8016b58:	6004      	str	r4, [r0, #0]
 8016b5a:	f840 3f04 	str.w	r3, [r0, #4]!
 8016b5e:	4288      	cmp	r0, r1
 8016b60:	d3f4      	bcc.n	8016b4c <L_shift+0xc>
 8016b62:	bd70      	pop	{r4, r5, r6, pc}

08016b64 <__match>:
 8016b64:	b530      	push	{r4, r5, lr}
 8016b66:	6803      	ldr	r3, [r0, #0]
 8016b68:	3301      	adds	r3, #1
 8016b6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016b6e:	b914      	cbnz	r4, 8016b76 <__match+0x12>
 8016b70:	6003      	str	r3, [r0, #0]
 8016b72:	2001      	movs	r0, #1
 8016b74:	bd30      	pop	{r4, r5, pc}
 8016b76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016b7a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8016b7e:	2d19      	cmp	r5, #25
 8016b80:	bf98      	it	ls
 8016b82:	3220      	addls	r2, #32
 8016b84:	42a2      	cmp	r2, r4
 8016b86:	d0f0      	beq.n	8016b6a <__match+0x6>
 8016b88:	2000      	movs	r0, #0
 8016b8a:	e7f3      	b.n	8016b74 <__match+0x10>

08016b8c <__hexnan>:
 8016b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b90:	680b      	ldr	r3, [r1, #0]
 8016b92:	6801      	ldr	r1, [r0, #0]
 8016b94:	115f      	asrs	r7, r3, #5
 8016b96:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8016b9a:	f013 031f 	ands.w	r3, r3, #31
 8016b9e:	b087      	sub	sp, #28
 8016ba0:	bf18      	it	ne
 8016ba2:	3704      	addne	r7, #4
 8016ba4:	2500      	movs	r5, #0
 8016ba6:	1f3e      	subs	r6, r7, #4
 8016ba8:	4682      	mov	sl, r0
 8016baa:	4690      	mov	r8, r2
 8016bac:	9301      	str	r3, [sp, #4]
 8016bae:	f847 5c04 	str.w	r5, [r7, #-4]
 8016bb2:	46b1      	mov	r9, r6
 8016bb4:	4634      	mov	r4, r6
 8016bb6:	9502      	str	r5, [sp, #8]
 8016bb8:	46ab      	mov	fp, r5
 8016bba:	784a      	ldrb	r2, [r1, #1]
 8016bbc:	1c4b      	adds	r3, r1, #1
 8016bbe:	9303      	str	r3, [sp, #12]
 8016bc0:	b342      	cbz	r2, 8016c14 <__hexnan+0x88>
 8016bc2:	4610      	mov	r0, r2
 8016bc4:	9105      	str	r1, [sp, #20]
 8016bc6:	9204      	str	r2, [sp, #16]
 8016bc8:	f7ff fd84 	bl	80166d4 <__hexdig_fun>
 8016bcc:	2800      	cmp	r0, #0
 8016bce:	d143      	bne.n	8016c58 <__hexnan+0xcc>
 8016bd0:	9a04      	ldr	r2, [sp, #16]
 8016bd2:	9905      	ldr	r1, [sp, #20]
 8016bd4:	2a20      	cmp	r2, #32
 8016bd6:	d818      	bhi.n	8016c0a <__hexnan+0x7e>
 8016bd8:	9b02      	ldr	r3, [sp, #8]
 8016bda:	459b      	cmp	fp, r3
 8016bdc:	dd13      	ble.n	8016c06 <__hexnan+0x7a>
 8016bde:	454c      	cmp	r4, r9
 8016be0:	d206      	bcs.n	8016bf0 <__hexnan+0x64>
 8016be2:	2d07      	cmp	r5, #7
 8016be4:	dc04      	bgt.n	8016bf0 <__hexnan+0x64>
 8016be6:	462a      	mov	r2, r5
 8016be8:	4649      	mov	r1, r9
 8016bea:	4620      	mov	r0, r4
 8016bec:	f7ff ffa8 	bl	8016b40 <L_shift>
 8016bf0:	4544      	cmp	r4, r8
 8016bf2:	d944      	bls.n	8016c7e <__hexnan+0xf2>
 8016bf4:	2300      	movs	r3, #0
 8016bf6:	f1a4 0904 	sub.w	r9, r4, #4
 8016bfa:	f844 3c04 	str.w	r3, [r4, #-4]
 8016bfe:	f8cd b008 	str.w	fp, [sp, #8]
 8016c02:	464c      	mov	r4, r9
 8016c04:	461d      	mov	r5, r3
 8016c06:	9903      	ldr	r1, [sp, #12]
 8016c08:	e7d7      	b.n	8016bba <__hexnan+0x2e>
 8016c0a:	2a29      	cmp	r2, #41	; 0x29
 8016c0c:	d14a      	bne.n	8016ca4 <__hexnan+0x118>
 8016c0e:	3102      	adds	r1, #2
 8016c10:	f8ca 1000 	str.w	r1, [sl]
 8016c14:	f1bb 0f00 	cmp.w	fp, #0
 8016c18:	d044      	beq.n	8016ca4 <__hexnan+0x118>
 8016c1a:	454c      	cmp	r4, r9
 8016c1c:	d206      	bcs.n	8016c2c <__hexnan+0xa0>
 8016c1e:	2d07      	cmp	r5, #7
 8016c20:	dc04      	bgt.n	8016c2c <__hexnan+0xa0>
 8016c22:	462a      	mov	r2, r5
 8016c24:	4649      	mov	r1, r9
 8016c26:	4620      	mov	r0, r4
 8016c28:	f7ff ff8a 	bl	8016b40 <L_shift>
 8016c2c:	4544      	cmp	r4, r8
 8016c2e:	d928      	bls.n	8016c82 <__hexnan+0xf6>
 8016c30:	4643      	mov	r3, r8
 8016c32:	f854 2b04 	ldr.w	r2, [r4], #4
 8016c36:	f843 2b04 	str.w	r2, [r3], #4
 8016c3a:	42a6      	cmp	r6, r4
 8016c3c:	d2f9      	bcs.n	8016c32 <__hexnan+0xa6>
 8016c3e:	2200      	movs	r2, #0
 8016c40:	f843 2b04 	str.w	r2, [r3], #4
 8016c44:	429e      	cmp	r6, r3
 8016c46:	d2fb      	bcs.n	8016c40 <__hexnan+0xb4>
 8016c48:	6833      	ldr	r3, [r6, #0]
 8016c4a:	b91b      	cbnz	r3, 8016c54 <__hexnan+0xc8>
 8016c4c:	4546      	cmp	r6, r8
 8016c4e:	d127      	bne.n	8016ca0 <__hexnan+0x114>
 8016c50:	2301      	movs	r3, #1
 8016c52:	6033      	str	r3, [r6, #0]
 8016c54:	2005      	movs	r0, #5
 8016c56:	e026      	b.n	8016ca6 <__hexnan+0x11a>
 8016c58:	3501      	adds	r5, #1
 8016c5a:	2d08      	cmp	r5, #8
 8016c5c:	f10b 0b01 	add.w	fp, fp, #1
 8016c60:	dd06      	ble.n	8016c70 <__hexnan+0xe4>
 8016c62:	4544      	cmp	r4, r8
 8016c64:	d9cf      	bls.n	8016c06 <__hexnan+0x7a>
 8016c66:	2300      	movs	r3, #0
 8016c68:	f844 3c04 	str.w	r3, [r4, #-4]
 8016c6c:	2501      	movs	r5, #1
 8016c6e:	3c04      	subs	r4, #4
 8016c70:	6822      	ldr	r2, [r4, #0]
 8016c72:	f000 000f 	and.w	r0, r0, #15
 8016c76:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8016c7a:	6020      	str	r0, [r4, #0]
 8016c7c:	e7c3      	b.n	8016c06 <__hexnan+0x7a>
 8016c7e:	2508      	movs	r5, #8
 8016c80:	e7c1      	b.n	8016c06 <__hexnan+0x7a>
 8016c82:	9b01      	ldr	r3, [sp, #4]
 8016c84:	2b00      	cmp	r3, #0
 8016c86:	d0df      	beq.n	8016c48 <__hexnan+0xbc>
 8016c88:	f04f 32ff 	mov.w	r2, #4294967295
 8016c8c:	f1c3 0320 	rsb	r3, r3, #32
 8016c90:	fa22 f303 	lsr.w	r3, r2, r3
 8016c94:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8016c98:	401a      	ands	r2, r3
 8016c9a:	f847 2c04 	str.w	r2, [r7, #-4]
 8016c9e:	e7d3      	b.n	8016c48 <__hexnan+0xbc>
 8016ca0:	3e04      	subs	r6, #4
 8016ca2:	e7d1      	b.n	8016c48 <__hexnan+0xbc>
 8016ca4:	2004      	movs	r0, #4
 8016ca6:	b007      	add	sp, #28
 8016ca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016cac <__locale_ctype_ptr_l>:
 8016cac:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8016cb0:	4770      	bx	lr
	...

08016cb4 <__locale_ctype_ptr>:
 8016cb4:	4b04      	ldr	r3, [pc, #16]	; (8016cc8 <__locale_ctype_ptr+0x14>)
 8016cb6:	4a05      	ldr	r2, [pc, #20]	; (8016ccc <__locale_ctype_ptr+0x18>)
 8016cb8:	681b      	ldr	r3, [r3, #0]
 8016cba:	6a1b      	ldr	r3, [r3, #32]
 8016cbc:	2b00      	cmp	r3, #0
 8016cbe:	bf08      	it	eq
 8016cc0:	4613      	moveq	r3, r2
 8016cc2:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8016cc6:	4770      	bx	lr
 8016cc8:	2000000c 	.word	0x2000000c
 8016ccc:	20000070 	.word	0x20000070

08016cd0 <__localeconv_l>:
 8016cd0:	30f0      	adds	r0, #240	; 0xf0
 8016cd2:	4770      	bx	lr

08016cd4 <_localeconv_r>:
 8016cd4:	4b04      	ldr	r3, [pc, #16]	; (8016ce8 <_localeconv_r+0x14>)
 8016cd6:	681b      	ldr	r3, [r3, #0]
 8016cd8:	6a18      	ldr	r0, [r3, #32]
 8016cda:	4b04      	ldr	r3, [pc, #16]	; (8016cec <_localeconv_r+0x18>)
 8016cdc:	2800      	cmp	r0, #0
 8016cde:	bf08      	it	eq
 8016ce0:	4618      	moveq	r0, r3
 8016ce2:	30f0      	adds	r0, #240	; 0xf0
 8016ce4:	4770      	bx	lr
 8016ce6:	bf00      	nop
 8016ce8:	2000000c 	.word	0x2000000c
 8016cec:	20000070 	.word	0x20000070

08016cf0 <malloc>:
 8016cf0:	4b02      	ldr	r3, [pc, #8]	; (8016cfc <malloc+0xc>)
 8016cf2:	4601      	mov	r1, r0
 8016cf4:	6818      	ldr	r0, [r3, #0]
 8016cf6:	f000 bc71 	b.w	80175dc <_malloc_r>
 8016cfa:	bf00      	nop
 8016cfc:	2000000c 	.word	0x2000000c

08016d00 <__ascii_mbtowc>:
 8016d00:	b082      	sub	sp, #8
 8016d02:	b901      	cbnz	r1, 8016d06 <__ascii_mbtowc+0x6>
 8016d04:	a901      	add	r1, sp, #4
 8016d06:	b142      	cbz	r2, 8016d1a <__ascii_mbtowc+0x1a>
 8016d08:	b14b      	cbz	r3, 8016d1e <__ascii_mbtowc+0x1e>
 8016d0a:	7813      	ldrb	r3, [r2, #0]
 8016d0c:	600b      	str	r3, [r1, #0]
 8016d0e:	7812      	ldrb	r2, [r2, #0]
 8016d10:	1c10      	adds	r0, r2, #0
 8016d12:	bf18      	it	ne
 8016d14:	2001      	movne	r0, #1
 8016d16:	b002      	add	sp, #8
 8016d18:	4770      	bx	lr
 8016d1a:	4610      	mov	r0, r2
 8016d1c:	e7fb      	b.n	8016d16 <__ascii_mbtowc+0x16>
 8016d1e:	f06f 0001 	mvn.w	r0, #1
 8016d22:	e7f8      	b.n	8016d16 <__ascii_mbtowc+0x16>

08016d24 <_Balloc>:
 8016d24:	b570      	push	{r4, r5, r6, lr}
 8016d26:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8016d28:	4604      	mov	r4, r0
 8016d2a:	460e      	mov	r6, r1
 8016d2c:	b93d      	cbnz	r5, 8016d3e <_Balloc+0x1a>
 8016d2e:	2010      	movs	r0, #16
 8016d30:	f7ff ffde 	bl	8016cf0 <malloc>
 8016d34:	6260      	str	r0, [r4, #36]	; 0x24
 8016d36:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8016d3a:	6005      	str	r5, [r0, #0]
 8016d3c:	60c5      	str	r5, [r0, #12]
 8016d3e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8016d40:	68eb      	ldr	r3, [r5, #12]
 8016d42:	b183      	cbz	r3, 8016d66 <_Balloc+0x42>
 8016d44:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016d46:	68db      	ldr	r3, [r3, #12]
 8016d48:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8016d4c:	b9b8      	cbnz	r0, 8016d7e <_Balloc+0x5a>
 8016d4e:	2101      	movs	r1, #1
 8016d50:	fa01 f506 	lsl.w	r5, r1, r6
 8016d54:	1d6a      	adds	r2, r5, #5
 8016d56:	0092      	lsls	r2, r2, #2
 8016d58:	4620      	mov	r0, r4
 8016d5a:	f000 fbe2 	bl	8017522 <_calloc_r>
 8016d5e:	b160      	cbz	r0, 8016d7a <_Balloc+0x56>
 8016d60:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8016d64:	e00e      	b.n	8016d84 <_Balloc+0x60>
 8016d66:	2221      	movs	r2, #33	; 0x21
 8016d68:	2104      	movs	r1, #4
 8016d6a:	4620      	mov	r0, r4
 8016d6c:	f000 fbd9 	bl	8017522 <_calloc_r>
 8016d70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016d72:	60e8      	str	r0, [r5, #12]
 8016d74:	68db      	ldr	r3, [r3, #12]
 8016d76:	2b00      	cmp	r3, #0
 8016d78:	d1e4      	bne.n	8016d44 <_Balloc+0x20>
 8016d7a:	2000      	movs	r0, #0
 8016d7c:	bd70      	pop	{r4, r5, r6, pc}
 8016d7e:	6802      	ldr	r2, [r0, #0]
 8016d80:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8016d84:	2300      	movs	r3, #0
 8016d86:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8016d8a:	e7f7      	b.n	8016d7c <_Balloc+0x58>

08016d8c <_Bfree>:
 8016d8c:	b570      	push	{r4, r5, r6, lr}
 8016d8e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8016d90:	4606      	mov	r6, r0
 8016d92:	460d      	mov	r5, r1
 8016d94:	b93c      	cbnz	r4, 8016da6 <_Bfree+0x1a>
 8016d96:	2010      	movs	r0, #16
 8016d98:	f7ff ffaa 	bl	8016cf0 <malloc>
 8016d9c:	6270      	str	r0, [r6, #36]	; 0x24
 8016d9e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8016da2:	6004      	str	r4, [r0, #0]
 8016da4:	60c4      	str	r4, [r0, #12]
 8016da6:	b13d      	cbz	r5, 8016db8 <_Bfree+0x2c>
 8016da8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8016daa:	686a      	ldr	r2, [r5, #4]
 8016dac:	68db      	ldr	r3, [r3, #12]
 8016dae:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8016db2:	6029      	str	r1, [r5, #0]
 8016db4:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8016db8:	bd70      	pop	{r4, r5, r6, pc}

08016dba <__multadd>:
 8016dba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016dbe:	690d      	ldr	r5, [r1, #16]
 8016dc0:	461f      	mov	r7, r3
 8016dc2:	4606      	mov	r6, r0
 8016dc4:	460c      	mov	r4, r1
 8016dc6:	f101 0c14 	add.w	ip, r1, #20
 8016dca:	2300      	movs	r3, #0
 8016dcc:	f8dc 0000 	ldr.w	r0, [ip]
 8016dd0:	b281      	uxth	r1, r0
 8016dd2:	fb02 7101 	mla	r1, r2, r1, r7
 8016dd6:	0c0f      	lsrs	r7, r1, #16
 8016dd8:	0c00      	lsrs	r0, r0, #16
 8016dda:	fb02 7000 	mla	r0, r2, r0, r7
 8016dde:	b289      	uxth	r1, r1
 8016de0:	3301      	adds	r3, #1
 8016de2:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8016de6:	429d      	cmp	r5, r3
 8016de8:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8016dec:	f84c 1b04 	str.w	r1, [ip], #4
 8016df0:	dcec      	bgt.n	8016dcc <__multadd+0x12>
 8016df2:	b1d7      	cbz	r7, 8016e2a <__multadd+0x70>
 8016df4:	68a3      	ldr	r3, [r4, #8]
 8016df6:	42ab      	cmp	r3, r5
 8016df8:	dc12      	bgt.n	8016e20 <__multadd+0x66>
 8016dfa:	6861      	ldr	r1, [r4, #4]
 8016dfc:	4630      	mov	r0, r6
 8016dfe:	3101      	adds	r1, #1
 8016e00:	f7ff ff90 	bl	8016d24 <_Balloc>
 8016e04:	6922      	ldr	r2, [r4, #16]
 8016e06:	3202      	adds	r2, #2
 8016e08:	f104 010c 	add.w	r1, r4, #12
 8016e0c:	4680      	mov	r8, r0
 8016e0e:	0092      	lsls	r2, r2, #2
 8016e10:	300c      	adds	r0, #12
 8016e12:	f7fd f831 	bl	8013e78 <memcpy>
 8016e16:	4621      	mov	r1, r4
 8016e18:	4630      	mov	r0, r6
 8016e1a:	f7ff ffb7 	bl	8016d8c <_Bfree>
 8016e1e:	4644      	mov	r4, r8
 8016e20:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8016e24:	3501      	adds	r5, #1
 8016e26:	615f      	str	r7, [r3, #20]
 8016e28:	6125      	str	r5, [r4, #16]
 8016e2a:	4620      	mov	r0, r4
 8016e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016e30 <__s2b>:
 8016e30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016e34:	460c      	mov	r4, r1
 8016e36:	4615      	mov	r5, r2
 8016e38:	461f      	mov	r7, r3
 8016e3a:	2209      	movs	r2, #9
 8016e3c:	3308      	adds	r3, #8
 8016e3e:	4606      	mov	r6, r0
 8016e40:	fb93 f3f2 	sdiv	r3, r3, r2
 8016e44:	2100      	movs	r1, #0
 8016e46:	2201      	movs	r2, #1
 8016e48:	429a      	cmp	r2, r3
 8016e4a:	db20      	blt.n	8016e8e <__s2b+0x5e>
 8016e4c:	4630      	mov	r0, r6
 8016e4e:	f7ff ff69 	bl	8016d24 <_Balloc>
 8016e52:	9b08      	ldr	r3, [sp, #32]
 8016e54:	6143      	str	r3, [r0, #20]
 8016e56:	2d09      	cmp	r5, #9
 8016e58:	f04f 0301 	mov.w	r3, #1
 8016e5c:	6103      	str	r3, [r0, #16]
 8016e5e:	dd19      	ble.n	8016e94 <__s2b+0x64>
 8016e60:	f104 0809 	add.w	r8, r4, #9
 8016e64:	46c1      	mov	r9, r8
 8016e66:	442c      	add	r4, r5
 8016e68:	f819 3b01 	ldrb.w	r3, [r9], #1
 8016e6c:	4601      	mov	r1, r0
 8016e6e:	3b30      	subs	r3, #48	; 0x30
 8016e70:	220a      	movs	r2, #10
 8016e72:	4630      	mov	r0, r6
 8016e74:	f7ff ffa1 	bl	8016dba <__multadd>
 8016e78:	45a1      	cmp	r9, r4
 8016e7a:	d1f5      	bne.n	8016e68 <__s2b+0x38>
 8016e7c:	eb08 0405 	add.w	r4, r8, r5
 8016e80:	3c08      	subs	r4, #8
 8016e82:	1b2d      	subs	r5, r5, r4
 8016e84:	1963      	adds	r3, r4, r5
 8016e86:	42bb      	cmp	r3, r7
 8016e88:	db07      	blt.n	8016e9a <__s2b+0x6a>
 8016e8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016e8e:	0052      	lsls	r2, r2, #1
 8016e90:	3101      	adds	r1, #1
 8016e92:	e7d9      	b.n	8016e48 <__s2b+0x18>
 8016e94:	340a      	adds	r4, #10
 8016e96:	2509      	movs	r5, #9
 8016e98:	e7f3      	b.n	8016e82 <__s2b+0x52>
 8016e9a:	f814 3b01 	ldrb.w	r3, [r4], #1
 8016e9e:	4601      	mov	r1, r0
 8016ea0:	3b30      	subs	r3, #48	; 0x30
 8016ea2:	220a      	movs	r2, #10
 8016ea4:	4630      	mov	r0, r6
 8016ea6:	f7ff ff88 	bl	8016dba <__multadd>
 8016eaa:	e7eb      	b.n	8016e84 <__s2b+0x54>

08016eac <__hi0bits>:
 8016eac:	0c02      	lsrs	r2, r0, #16
 8016eae:	0412      	lsls	r2, r2, #16
 8016eb0:	4603      	mov	r3, r0
 8016eb2:	b9b2      	cbnz	r2, 8016ee2 <__hi0bits+0x36>
 8016eb4:	0403      	lsls	r3, r0, #16
 8016eb6:	2010      	movs	r0, #16
 8016eb8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8016ebc:	bf04      	itt	eq
 8016ebe:	021b      	lsleq	r3, r3, #8
 8016ec0:	3008      	addeq	r0, #8
 8016ec2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8016ec6:	bf04      	itt	eq
 8016ec8:	011b      	lsleq	r3, r3, #4
 8016eca:	3004      	addeq	r0, #4
 8016ecc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8016ed0:	bf04      	itt	eq
 8016ed2:	009b      	lsleq	r3, r3, #2
 8016ed4:	3002      	addeq	r0, #2
 8016ed6:	2b00      	cmp	r3, #0
 8016ed8:	db06      	blt.n	8016ee8 <__hi0bits+0x3c>
 8016eda:	005b      	lsls	r3, r3, #1
 8016edc:	d503      	bpl.n	8016ee6 <__hi0bits+0x3a>
 8016ede:	3001      	adds	r0, #1
 8016ee0:	4770      	bx	lr
 8016ee2:	2000      	movs	r0, #0
 8016ee4:	e7e8      	b.n	8016eb8 <__hi0bits+0xc>
 8016ee6:	2020      	movs	r0, #32
 8016ee8:	4770      	bx	lr

08016eea <__lo0bits>:
 8016eea:	6803      	ldr	r3, [r0, #0]
 8016eec:	f013 0207 	ands.w	r2, r3, #7
 8016ef0:	4601      	mov	r1, r0
 8016ef2:	d00b      	beq.n	8016f0c <__lo0bits+0x22>
 8016ef4:	07da      	lsls	r2, r3, #31
 8016ef6:	d423      	bmi.n	8016f40 <__lo0bits+0x56>
 8016ef8:	0798      	lsls	r0, r3, #30
 8016efa:	bf49      	itett	mi
 8016efc:	085b      	lsrmi	r3, r3, #1
 8016efe:	089b      	lsrpl	r3, r3, #2
 8016f00:	2001      	movmi	r0, #1
 8016f02:	600b      	strmi	r3, [r1, #0]
 8016f04:	bf5c      	itt	pl
 8016f06:	600b      	strpl	r3, [r1, #0]
 8016f08:	2002      	movpl	r0, #2
 8016f0a:	4770      	bx	lr
 8016f0c:	b298      	uxth	r0, r3
 8016f0e:	b9a8      	cbnz	r0, 8016f3c <__lo0bits+0x52>
 8016f10:	0c1b      	lsrs	r3, r3, #16
 8016f12:	2010      	movs	r0, #16
 8016f14:	f013 0fff 	tst.w	r3, #255	; 0xff
 8016f18:	bf04      	itt	eq
 8016f1a:	0a1b      	lsreq	r3, r3, #8
 8016f1c:	3008      	addeq	r0, #8
 8016f1e:	071a      	lsls	r2, r3, #28
 8016f20:	bf04      	itt	eq
 8016f22:	091b      	lsreq	r3, r3, #4
 8016f24:	3004      	addeq	r0, #4
 8016f26:	079a      	lsls	r2, r3, #30
 8016f28:	bf04      	itt	eq
 8016f2a:	089b      	lsreq	r3, r3, #2
 8016f2c:	3002      	addeq	r0, #2
 8016f2e:	07da      	lsls	r2, r3, #31
 8016f30:	d402      	bmi.n	8016f38 <__lo0bits+0x4e>
 8016f32:	085b      	lsrs	r3, r3, #1
 8016f34:	d006      	beq.n	8016f44 <__lo0bits+0x5a>
 8016f36:	3001      	adds	r0, #1
 8016f38:	600b      	str	r3, [r1, #0]
 8016f3a:	4770      	bx	lr
 8016f3c:	4610      	mov	r0, r2
 8016f3e:	e7e9      	b.n	8016f14 <__lo0bits+0x2a>
 8016f40:	2000      	movs	r0, #0
 8016f42:	4770      	bx	lr
 8016f44:	2020      	movs	r0, #32
 8016f46:	4770      	bx	lr

08016f48 <__i2b>:
 8016f48:	b510      	push	{r4, lr}
 8016f4a:	460c      	mov	r4, r1
 8016f4c:	2101      	movs	r1, #1
 8016f4e:	f7ff fee9 	bl	8016d24 <_Balloc>
 8016f52:	2201      	movs	r2, #1
 8016f54:	6144      	str	r4, [r0, #20]
 8016f56:	6102      	str	r2, [r0, #16]
 8016f58:	bd10      	pop	{r4, pc}

08016f5a <__multiply>:
 8016f5a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f5e:	4614      	mov	r4, r2
 8016f60:	690a      	ldr	r2, [r1, #16]
 8016f62:	6923      	ldr	r3, [r4, #16]
 8016f64:	429a      	cmp	r2, r3
 8016f66:	bfb8      	it	lt
 8016f68:	460b      	movlt	r3, r1
 8016f6a:	4688      	mov	r8, r1
 8016f6c:	bfbc      	itt	lt
 8016f6e:	46a0      	movlt	r8, r4
 8016f70:	461c      	movlt	r4, r3
 8016f72:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8016f76:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8016f7a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016f7e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8016f82:	eb07 0609 	add.w	r6, r7, r9
 8016f86:	42b3      	cmp	r3, r6
 8016f88:	bfb8      	it	lt
 8016f8a:	3101      	addlt	r1, #1
 8016f8c:	f7ff feca 	bl	8016d24 <_Balloc>
 8016f90:	f100 0514 	add.w	r5, r0, #20
 8016f94:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8016f98:	462b      	mov	r3, r5
 8016f9a:	2200      	movs	r2, #0
 8016f9c:	4573      	cmp	r3, lr
 8016f9e:	d316      	bcc.n	8016fce <__multiply+0x74>
 8016fa0:	f104 0214 	add.w	r2, r4, #20
 8016fa4:	f108 0114 	add.w	r1, r8, #20
 8016fa8:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8016fac:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8016fb0:	9300      	str	r3, [sp, #0]
 8016fb2:	9b00      	ldr	r3, [sp, #0]
 8016fb4:	9201      	str	r2, [sp, #4]
 8016fb6:	4293      	cmp	r3, r2
 8016fb8:	d80c      	bhi.n	8016fd4 <__multiply+0x7a>
 8016fba:	2e00      	cmp	r6, #0
 8016fbc:	dd03      	ble.n	8016fc6 <__multiply+0x6c>
 8016fbe:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8016fc2:	2b00      	cmp	r3, #0
 8016fc4:	d05d      	beq.n	8017082 <__multiply+0x128>
 8016fc6:	6106      	str	r6, [r0, #16]
 8016fc8:	b003      	add	sp, #12
 8016fca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016fce:	f843 2b04 	str.w	r2, [r3], #4
 8016fd2:	e7e3      	b.n	8016f9c <__multiply+0x42>
 8016fd4:	f8b2 b000 	ldrh.w	fp, [r2]
 8016fd8:	f1bb 0f00 	cmp.w	fp, #0
 8016fdc:	d023      	beq.n	8017026 <__multiply+0xcc>
 8016fde:	4689      	mov	r9, r1
 8016fe0:	46ac      	mov	ip, r5
 8016fe2:	f04f 0800 	mov.w	r8, #0
 8016fe6:	f859 4b04 	ldr.w	r4, [r9], #4
 8016fea:	f8dc a000 	ldr.w	sl, [ip]
 8016fee:	b2a3      	uxth	r3, r4
 8016ff0:	fa1f fa8a 	uxth.w	sl, sl
 8016ff4:	fb0b a303 	mla	r3, fp, r3, sl
 8016ff8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8016ffc:	f8dc 4000 	ldr.w	r4, [ip]
 8017000:	4443      	add	r3, r8
 8017002:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8017006:	fb0b 840a 	mla	r4, fp, sl, r8
 801700a:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 801700e:	46e2      	mov	sl, ip
 8017010:	b29b      	uxth	r3, r3
 8017012:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8017016:	454f      	cmp	r7, r9
 8017018:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801701c:	f84a 3b04 	str.w	r3, [sl], #4
 8017020:	d82b      	bhi.n	801707a <__multiply+0x120>
 8017022:	f8cc 8004 	str.w	r8, [ip, #4]
 8017026:	9b01      	ldr	r3, [sp, #4]
 8017028:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 801702c:	3204      	adds	r2, #4
 801702e:	f1ba 0f00 	cmp.w	sl, #0
 8017032:	d020      	beq.n	8017076 <__multiply+0x11c>
 8017034:	682b      	ldr	r3, [r5, #0]
 8017036:	4689      	mov	r9, r1
 8017038:	46a8      	mov	r8, r5
 801703a:	f04f 0b00 	mov.w	fp, #0
 801703e:	f8b9 c000 	ldrh.w	ip, [r9]
 8017042:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8017046:	fb0a 440c 	mla	r4, sl, ip, r4
 801704a:	445c      	add	r4, fp
 801704c:	46c4      	mov	ip, r8
 801704e:	b29b      	uxth	r3, r3
 8017050:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8017054:	f84c 3b04 	str.w	r3, [ip], #4
 8017058:	f859 3b04 	ldr.w	r3, [r9], #4
 801705c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8017060:	0c1b      	lsrs	r3, r3, #16
 8017062:	fb0a b303 	mla	r3, sl, r3, fp
 8017066:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801706a:	454f      	cmp	r7, r9
 801706c:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8017070:	d805      	bhi.n	801707e <__multiply+0x124>
 8017072:	f8c8 3004 	str.w	r3, [r8, #4]
 8017076:	3504      	adds	r5, #4
 8017078:	e79b      	b.n	8016fb2 <__multiply+0x58>
 801707a:	46d4      	mov	ip, sl
 801707c:	e7b3      	b.n	8016fe6 <__multiply+0x8c>
 801707e:	46e0      	mov	r8, ip
 8017080:	e7dd      	b.n	801703e <__multiply+0xe4>
 8017082:	3e01      	subs	r6, #1
 8017084:	e799      	b.n	8016fba <__multiply+0x60>
	...

08017088 <__pow5mult>:
 8017088:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801708c:	4615      	mov	r5, r2
 801708e:	f012 0203 	ands.w	r2, r2, #3
 8017092:	4606      	mov	r6, r0
 8017094:	460f      	mov	r7, r1
 8017096:	d007      	beq.n	80170a8 <__pow5mult+0x20>
 8017098:	3a01      	subs	r2, #1
 801709a:	4c21      	ldr	r4, [pc, #132]	; (8017120 <__pow5mult+0x98>)
 801709c:	2300      	movs	r3, #0
 801709e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80170a2:	f7ff fe8a 	bl	8016dba <__multadd>
 80170a6:	4607      	mov	r7, r0
 80170a8:	10ad      	asrs	r5, r5, #2
 80170aa:	d035      	beq.n	8017118 <__pow5mult+0x90>
 80170ac:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80170ae:	b93c      	cbnz	r4, 80170c0 <__pow5mult+0x38>
 80170b0:	2010      	movs	r0, #16
 80170b2:	f7ff fe1d 	bl	8016cf0 <malloc>
 80170b6:	6270      	str	r0, [r6, #36]	; 0x24
 80170b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80170bc:	6004      	str	r4, [r0, #0]
 80170be:	60c4      	str	r4, [r0, #12]
 80170c0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80170c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80170c8:	b94c      	cbnz	r4, 80170de <__pow5mult+0x56>
 80170ca:	f240 2171 	movw	r1, #625	; 0x271
 80170ce:	4630      	mov	r0, r6
 80170d0:	f7ff ff3a 	bl	8016f48 <__i2b>
 80170d4:	2300      	movs	r3, #0
 80170d6:	f8c8 0008 	str.w	r0, [r8, #8]
 80170da:	4604      	mov	r4, r0
 80170dc:	6003      	str	r3, [r0, #0]
 80170de:	f04f 0800 	mov.w	r8, #0
 80170e2:	07eb      	lsls	r3, r5, #31
 80170e4:	d50a      	bpl.n	80170fc <__pow5mult+0x74>
 80170e6:	4639      	mov	r1, r7
 80170e8:	4622      	mov	r2, r4
 80170ea:	4630      	mov	r0, r6
 80170ec:	f7ff ff35 	bl	8016f5a <__multiply>
 80170f0:	4639      	mov	r1, r7
 80170f2:	4681      	mov	r9, r0
 80170f4:	4630      	mov	r0, r6
 80170f6:	f7ff fe49 	bl	8016d8c <_Bfree>
 80170fa:	464f      	mov	r7, r9
 80170fc:	106d      	asrs	r5, r5, #1
 80170fe:	d00b      	beq.n	8017118 <__pow5mult+0x90>
 8017100:	6820      	ldr	r0, [r4, #0]
 8017102:	b938      	cbnz	r0, 8017114 <__pow5mult+0x8c>
 8017104:	4622      	mov	r2, r4
 8017106:	4621      	mov	r1, r4
 8017108:	4630      	mov	r0, r6
 801710a:	f7ff ff26 	bl	8016f5a <__multiply>
 801710e:	6020      	str	r0, [r4, #0]
 8017110:	f8c0 8000 	str.w	r8, [r0]
 8017114:	4604      	mov	r4, r0
 8017116:	e7e4      	b.n	80170e2 <__pow5mult+0x5a>
 8017118:	4638      	mov	r0, r7
 801711a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801711e:	bf00      	nop
 8017120:	08018c18 	.word	0x08018c18

08017124 <__lshift>:
 8017124:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017128:	460c      	mov	r4, r1
 801712a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801712e:	6923      	ldr	r3, [r4, #16]
 8017130:	6849      	ldr	r1, [r1, #4]
 8017132:	eb0a 0903 	add.w	r9, sl, r3
 8017136:	68a3      	ldr	r3, [r4, #8]
 8017138:	4607      	mov	r7, r0
 801713a:	4616      	mov	r6, r2
 801713c:	f109 0501 	add.w	r5, r9, #1
 8017140:	42ab      	cmp	r3, r5
 8017142:	db32      	blt.n	80171aa <__lshift+0x86>
 8017144:	4638      	mov	r0, r7
 8017146:	f7ff fded 	bl	8016d24 <_Balloc>
 801714a:	2300      	movs	r3, #0
 801714c:	4680      	mov	r8, r0
 801714e:	f100 0114 	add.w	r1, r0, #20
 8017152:	461a      	mov	r2, r3
 8017154:	4553      	cmp	r3, sl
 8017156:	db2b      	blt.n	80171b0 <__lshift+0x8c>
 8017158:	6920      	ldr	r0, [r4, #16]
 801715a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801715e:	f104 0314 	add.w	r3, r4, #20
 8017162:	f016 021f 	ands.w	r2, r6, #31
 8017166:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801716a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801716e:	d025      	beq.n	80171bc <__lshift+0x98>
 8017170:	f1c2 0e20 	rsb	lr, r2, #32
 8017174:	2000      	movs	r0, #0
 8017176:	681e      	ldr	r6, [r3, #0]
 8017178:	468a      	mov	sl, r1
 801717a:	4096      	lsls	r6, r2
 801717c:	4330      	orrs	r0, r6
 801717e:	f84a 0b04 	str.w	r0, [sl], #4
 8017182:	f853 0b04 	ldr.w	r0, [r3], #4
 8017186:	459c      	cmp	ip, r3
 8017188:	fa20 f00e 	lsr.w	r0, r0, lr
 801718c:	d814      	bhi.n	80171b8 <__lshift+0x94>
 801718e:	6048      	str	r0, [r1, #4]
 8017190:	b108      	cbz	r0, 8017196 <__lshift+0x72>
 8017192:	f109 0502 	add.w	r5, r9, #2
 8017196:	3d01      	subs	r5, #1
 8017198:	4638      	mov	r0, r7
 801719a:	f8c8 5010 	str.w	r5, [r8, #16]
 801719e:	4621      	mov	r1, r4
 80171a0:	f7ff fdf4 	bl	8016d8c <_Bfree>
 80171a4:	4640      	mov	r0, r8
 80171a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80171aa:	3101      	adds	r1, #1
 80171ac:	005b      	lsls	r3, r3, #1
 80171ae:	e7c7      	b.n	8017140 <__lshift+0x1c>
 80171b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80171b4:	3301      	adds	r3, #1
 80171b6:	e7cd      	b.n	8017154 <__lshift+0x30>
 80171b8:	4651      	mov	r1, sl
 80171ba:	e7dc      	b.n	8017176 <__lshift+0x52>
 80171bc:	3904      	subs	r1, #4
 80171be:	f853 2b04 	ldr.w	r2, [r3], #4
 80171c2:	f841 2f04 	str.w	r2, [r1, #4]!
 80171c6:	459c      	cmp	ip, r3
 80171c8:	d8f9      	bhi.n	80171be <__lshift+0x9a>
 80171ca:	e7e4      	b.n	8017196 <__lshift+0x72>

080171cc <__mcmp>:
 80171cc:	6903      	ldr	r3, [r0, #16]
 80171ce:	690a      	ldr	r2, [r1, #16]
 80171d0:	1a9b      	subs	r3, r3, r2
 80171d2:	b530      	push	{r4, r5, lr}
 80171d4:	d10c      	bne.n	80171f0 <__mcmp+0x24>
 80171d6:	0092      	lsls	r2, r2, #2
 80171d8:	3014      	adds	r0, #20
 80171da:	3114      	adds	r1, #20
 80171dc:	1884      	adds	r4, r0, r2
 80171de:	4411      	add	r1, r2
 80171e0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80171e4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80171e8:	4295      	cmp	r5, r2
 80171ea:	d003      	beq.n	80171f4 <__mcmp+0x28>
 80171ec:	d305      	bcc.n	80171fa <__mcmp+0x2e>
 80171ee:	2301      	movs	r3, #1
 80171f0:	4618      	mov	r0, r3
 80171f2:	bd30      	pop	{r4, r5, pc}
 80171f4:	42a0      	cmp	r0, r4
 80171f6:	d3f3      	bcc.n	80171e0 <__mcmp+0x14>
 80171f8:	e7fa      	b.n	80171f0 <__mcmp+0x24>
 80171fa:	f04f 33ff 	mov.w	r3, #4294967295
 80171fe:	e7f7      	b.n	80171f0 <__mcmp+0x24>

08017200 <__mdiff>:
 8017200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017204:	460d      	mov	r5, r1
 8017206:	4607      	mov	r7, r0
 8017208:	4611      	mov	r1, r2
 801720a:	4628      	mov	r0, r5
 801720c:	4614      	mov	r4, r2
 801720e:	f7ff ffdd 	bl	80171cc <__mcmp>
 8017212:	1e06      	subs	r6, r0, #0
 8017214:	d108      	bne.n	8017228 <__mdiff+0x28>
 8017216:	4631      	mov	r1, r6
 8017218:	4638      	mov	r0, r7
 801721a:	f7ff fd83 	bl	8016d24 <_Balloc>
 801721e:	2301      	movs	r3, #1
 8017220:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8017224:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017228:	bfa4      	itt	ge
 801722a:	4623      	movge	r3, r4
 801722c:	462c      	movge	r4, r5
 801722e:	4638      	mov	r0, r7
 8017230:	6861      	ldr	r1, [r4, #4]
 8017232:	bfa6      	itte	ge
 8017234:	461d      	movge	r5, r3
 8017236:	2600      	movge	r6, #0
 8017238:	2601      	movlt	r6, #1
 801723a:	f7ff fd73 	bl	8016d24 <_Balloc>
 801723e:	692b      	ldr	r3, [r5, #16]
 8017240:	60c6      	str	r6, [r0, #12]
 8017242:	6926      	ldr	r6, [r4, #16]
 8017244:	f105 0914 	add.w	r9, r5, #20
 8017248:	f104 0214 	add.w	r2, r4, #20
 801724c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8017250:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8017254:	f100 0514 	add.w	r5, r0, #20
 8017258:	f04f 0e00 	mov.w	lr, #0
 801725c:	f852 ab04 	ldr.w	sl, [r2], #4
 8017260:	f859 4b04 	ldr.w	r4, [r9], #4
 8017264:	fa1e f18a 	uxtah	r1, lr, sl
 8017268:	b2a3      	uxth	r3, r4
 801726a:	1ac9      	subs	r1, r1, r3
 801726c:	0c23      	lsrs	r3, r4, #16
 801726e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8017272:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8017276:	b289      	uxth	r1, r1
 8017278:	ea4f 4e23 	mov.w	lr, r3, asr #16
 801727c:	45c8      	cmp	r8, r9
 801727e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8017282:	4694      	mov	ip, r2
 8017284:	f845 3b04 	str.w	r3, [r5], #4
 8017288:	d8e8      	bhi.n	801725c <__mdiff+0x5c>
 801728a:	45bc      	cmp	ip, r7
 801728c:	d304      	bcc.n	8017298 <__mdiff+0x98>
 801728e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8017292:	b183      	cbz	r3, 80172b6 <__mdiff+0xb6>
 8017294:	6106      	str	r6, [r0, #16]
 8017296:	e7c5      	b.n	8017224 <__mdiff+0x24>
 8017298:	f85c 1b04 	ldr.w	r1, [ip], #4
 801729c:	fa1e f381 	uxtah	r3, lr, r1
 80172a0:	141a      	asrs	r2, r3, #16
 80172a2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80172a6:	b29b      	uxth	r3, r3
 80172a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80172ac:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80172b0:	f845 3b04 	str.w	r3, [r5], #4
 80172b4:	e7e9      	b.n	801728a <__mdiff+0x8a>
 80172b6:	3e01      	subs	r6, #1
 80172b8:	e7e9      	b.n	801728e <__mdiff+0x8e>
	...

080172bc <__ulp>:
 80172bc:	4b12      	ldr	r3, [pc, #72]	; (8017308 <__ulp+0x4c>)
 80172be:	ee10 2a90 	vmov	r2, s1
 80172c2:	401a      	ands	r2, r3
 80172c4:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 80172c8:	2b00      	cmp	r3, #0
 80172ca:	dd04      	ble.n	80172d6 <__ulp+0x1a>
 80172cc:	2000      	movs	r0, #0
 80172ce:	4619      	mov	r1, r3
 80172d0:	ec41 0b10 	vmov	d0, r0, r1
 80172d4:	4770      	bx	lr
 80172d6:	425b      	negs	r3, r3
 80172d8:	151b      	asrs	r3, r3, #20
 80172da:	2b13      	cmp	r3, #19
 80172dc:	f04f 0000 	mov.w	r0, #0
 80172e0:	f04f 0100 	mov.w	r1, #0
 80172e4:	dc04      	bgt.n	80172f0 <__ulp+0x34>
 80172e6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80172ea:	fa42 f103 	asr.w	r1, r2, r3
 80172ee:	e7ef      	b.n	80172d0 <__ulp+0x14>
 80172f0:	3b14      	subs	r3, #20
 80172f2:	2b1e      	cmp	r3, #30
 80172f4:	f04f 0201 	mov.w	r2, #1
 80172f8:	bfda      	itte	le
 80172fa:	f1c3 031f 	rsble	r3, r3, #31
 80172fe:	fa02 f303 	lslle.w	r3, r2, r3
 8017302:	4613      	movgt	r3, r2
 8017304:	4618      	mov	r0, r3
 8017306:	e7e3      	b.n	80172d0 <__ulp+0x14>
 8017308:	7ff00000 	.word	0x7ff00000

0801730c <__b2d>:
 801730c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801730e:	6905      	ldr	r5, [r0, #16]
 8017310:	f100 0714 	add.w	r7, r0, #20
 8017314:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8017318:	1f2e      	subs	r6, r5, #4
 801731a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801731e:	4620      	mov	r0, r4
 8017320:	f7ff fdc4 	bl	8016eac <__hi0bits>
 8017324:	f1c0 0320 	rsb	r3, r0, #32
 8017328:	280a      	cmp	r0, #10
 801732a:	600b      	str	r3, [r1, #0]
 801732c:	f8df c074 	ldr.w	ip, [pc, #116]	; 80173a4 <__b2d+0x98>
 8017330:	dc14      	bgt.n	801735c <__b2d+0x50>
 8017332:	f1c0 0e0b 	rsb	lr, r0, #11
 8017336:	fa24 f10e 	lsr.w	r1, r4, lr
 801733a:	42b7      	cmp	r7, r6
 801733c:	ea41 030c 	orr.w	r3, r1, ip
 8017340:	bf34      	ite	cc
 8017342:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8017346:	2100      	movcs	r1, #0
 8017348:	3015      	adds	r0, #21
 801734a:	fa04 f000 	lsl.w	r0, r4, r0
 801734e:	fa21 f10e 	lsr.w	r1, r1, lr
 8017352:	ea40 0201 	orr.w	r2, r0, r1
 8017356:	ec43 2b10 	vmov	d0, r2, r3
 801735a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801735c:	42b7      	cmp	r7, r6
 801735e:	bf3a      	itte	cc
 8017360:	f1a5 0608 	subcc.w	r6, r5, #8
 8017364:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8017368:	2100      	movcs	r1, #0
 801736a:	380b      	subs	r0, #11
 801736c:	d015      	beq.n	801739a <__b2d+0x8e>
 801736e:	4084      	lsls	r4, r0
 8017370:	f1c0 0520 	rsb	r5, r0, #32
 8017374:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8017378:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 801737c:	42be      	cmp	r6, r7
 801737e:	fa21 fc05 	lsr.w	ip, r1, r5
 8017382:	ea44 030c 	orr.w	r3, r4, ip
 8017386:	bf8c      	ite	hi
 8017388:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 801738c:	2400      	movls	r4, #0
 801738e:	fa01 f000 	lsl.w	r0, r1, r0
 8017392:	40ec      	lsrs	r4, r5
 8017394:	ea40 0204 	orr.w	r2, r0, r4
 8017398:	e7dd      	b.n	8017356 <__b2d+0x4a>
 801739a:	ea44 030c 	orr.w	r3, r4, ip
 801739e:	460a      	mov	r2, r1
 80173a0:	e7d9      	b.n	8017356 <__b2d+0x4a>
 80173a2:	bf00      	nop
 80173a4:	3ff00000 	.word	0x3ff00000

080173a8 <__d2b>:
 80173a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80173ac:	460e      	mov	r6, r1
 80173ae:	2101      	movs	r1, #1
 80173b0:	ec59 8b10 	vmov	r8, r9, d0
 80173b4:	4615      	mov	r5, r2
 80173b6:	f7ff fcb5 	bl	8016d24 <_Balloc>
 80173ba:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80173be:	4607      	mov	r7, r0
 80173c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80173c4:	bb34      	cbnz	r4, 8017414 <__d2b+0x6c>
 80173c6:	9301      	str	r3, [sp, #4]
 80173c8:	f1b8 0300 	subs.w	r3, r8, #0
 80173cc:	d027      	beq.n	801741e <__d2b+0x76>
 80173ce:	a802      	add	r0, sp, #8
 80173d0:	f840 3d08 	str.w	r3, [r0, #-8]!
 80173d4:	f7ff fd89 	bl	8016eea <__lo0bits>
 80173d8:	9900      	ldr	r1, [sp, #0]
 80173da:	b1f0      	cbz	r0, 801741a <__d2b+0x72>
 80173dc:	9a01      	ldr	r2, [sp, #4]
 80173de:	f1c0 0320 	rsb	r3, r0, #32
 80173e2:	fa02 f303 	lsl.w	r3, r2, r3
 80173e6:	430b      	orrs	r3, r1
 80173e8:	40c2      	lsrs	r2, r0
 80173ea:	617b      	str	r3, [r7, #20]
 80173ec:	9201      	str	r2, [sp, #4]
 80173ee:	9b01      	ldr	r3, [sp, #4]
 80173f0:	61bb      	str	r3, [r7, #24]
 80173f2:	2b00      	cmp	r3, #0
 80173f4:	bf14      	ite	ne
 80173f6:	2102      	movne	r1, #2
 80173f8:	2101      	moveq	r1, #1
 80173fa:	6139      	str	r1, [r7, #16]
 80173fc:	b1c4      	cbz	r4, 8017430 <__d2b+0x88>
 80173fe:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8017402:	4404      	add	r4, r0
 8017404:	6034      	str	r4, [r6, #0]
 8017406:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801740a:	6028      	str	r0, [r5, #0]
 801740c:	4638      	mov	r0, r7
 801740e:	b003      	add	sp, #12
 8017410:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017414:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8017418:	e7d5      	b.n	80173c6 <__d2b+0x1e>
 801741a:	6179      	str	r1, [r7, #20]
 801741c:	e7e7      	b.n	80173ee <__d2b+0x46>
 801741e:	a801      	add	r0, sp, #4
 8017420:	f7ff fd63 	bl	8016eea <__lo0bits>
 8017424:	9b01      	ldr	r3, [sp, #4]
 8017426:	617b      	str	r3, [r7, #20]
 8017428:	2101      	movs	r1, #1
 801742a:	6139      	str	r1, [r7, #16]
 801742c:	3020      	adds	r0, #32
 801742e:	e7e5      	b.n	80173fc <__d2b+0x54>
 8017430:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8017434:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8017438:	6030      	str	r0, [r6, #0]
 801743a:	6918      	ldr	r0, [r3, #16]
 801743c:	f7ff fd36 	bl	8016eac <__hi0bits>
 8017440:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8017444:	e7e1      	b.n	801740a <__d2b+0x62>

08017446 <__ratio>:
 8017446:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801744a:	4688      	mov	r8, r1
 801744c:	4669      	mov	r1, sp
 801744e:	4681      	mov	r9, r0
 8017450:	f7ff ff5c 	bl	801730c <__b2d>
 8017454:	a901      	add	r1, sp, #4
 8017456:	4640      	mov	r0, r8
 8017458:	ec57 6b10 	vmov	r6, r7, d0
 801745c:	f7ff ff56 	bl	801730c <__b2d>
 8017460:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8017464:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8017468:	eba3 0c02 	sub.w	ip, r3, r2
 801746c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8017470:	1a9b      	subs	r3, r3, r2
 8017472:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8017476:	ec5b ab10 	vmov	sl, fp, d0
 801747a:	2b00      	cmp	r3, #0
 801747c:	bfce      	itee	gt
 801747e:	463a      	movgt	r2, r7
 8017480:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8017484:	465a      	movle	r2, fp
 8017486:	4659      	mov	r1, fp
 8017488:	463d      	mov	r5, r7
 801748a:	bfd4      	ite	le
 801748c:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8017490:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8017494:	4630      	mov	r0, r6
 8017496:	ee10 2a10 	vmov	r2, s0
 801749a:	460b      	mov	r3, r1
 801749c:	4629      	mov	r1, r5
 801749e:	f7e9 f9ed 	bl	800087c <__aeabi_ddiv>
 80174a2:	ec41 0b10 	vmov	d0, r0, r1
 80174a6:	b003      	add	sp, #12
 80174a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080174ac <__copybits>:
 80174ac:	3901      	subs	r1, #1
 80174ae:	b510      	push	{r4, lr}
 80174b0:	1149      	asrs	r1, r1, #5
 80174b2:	6914      	ldr	r4, [r2, #16]
 80174b4:	3101      	adds	r1, #1
 80174b6:	f102 0314 	add.w	r3, r2, #20
 80174ba:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80174be:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80174c2:	42a3      	cmp	r3, r4
 80174c4:	4602      	mov	r2, r0
 80174c6:	d303      	bcc.n	80174d0 <__copybits+0x24>
 80174c8:	2300      	movs	r3, #0
 80174ca:	428a      	cmp	r2, r1
 80174cc:	d305      	bcc.n	80174da <__copybits+0x2e>
 80174ce:	bd10      	pop	{r4, pc}
 80174d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80174d4:	f840 2b04 	str.w	r2, [r0], #4
 80174d8:	e7f3      	b.n	80174c2 <__copybits+0x16>
 80174da:	f842 3b04 	str.w	r3, [r2], #4
 80174de:	e7f4      	b.n	80174ca <__copybits+0x1e>

080174e0 <__any_on>:
 80174e0:	f100 0214 	add.w	r2, r0, #20
 80174e4:	6900      	ldr	r0, [r0, #16]
 80174e6:	114b      	asrs	r3, r1, #5
 80174e8:	4298      	cmp	r0, r3
 80174ea:	b510      	push	{r4, lr}
 80174ec:	db11      	blt.n	8017512 <__any_on+0x32>
 80174ee:	dd0a      	ble.n	8017506 <__any_on+0x26>
 80174f0:	f011 011f 	ands.w	r1, r1, #31
 80174f4:	d007      	beq.n	8017506 <__any_on+0x26>
 80174f6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80174fa:	fa24 f001 	lsr.w	r0, r4, r1
 80174fe:	fa00 f101 	lsl.w	r1, r0, r1
 8017502:	428c      	cmp	r4, r1
 8017504:	d10b      	bne.n	801751e <__any_on+0x3e>
 8017506:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801750a:	4293      	cmp	r3, r2
 801750c:	d803      	bhi.n	8017516 <__any_on+0x36>
 801750e:	2000      	movs	r0, #0
 8017510:	bd10      	pop	{r4, pc}
 8017512:	4603      	mov	r3, r0
 8017514:	e7f7      	b.n	8017506 <__any_on+0x26>
 8017516:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801751a:	2900      	cmp	r1, #0
 801751c:	d0f5      	beq.n	801750a <__any_on+0x2a>
 801751e:	2001      	movs	r0, #1
 8017520:	e7f6      	b.n	8017510 <__any_on+0x30>

08017522 <_calloc_r>:
 8017522:	b538      	push	{r3, r4, r5, lr}
 8017524:	fb02 f401 	mul.w	r4, r2, r1
 8017528:	4621      	mov	r1, r4
 801752a:	f000 f857 	bl	80175dc <_malloc_r>
 801752e:	4605      	mov	r5, r0
 8017530:	b118      	cbz	r0, 801753a <_calloc_r+0x18>
 8017532:	4622      	mov	r2, r4
 8017534:	2100      	movs	r1, #0
 8017536:	f7fc fcaa 	bl	8013e8e <memset>
 801753a:	4628      	mov	r0, r5
 801753c:	bd38      	pop	{r3, r4, r5, pc}
	...

08017540 <_free_r>:
 8017540:	b538      	push	{r3, r4, r5, lr}
 8017542:	4605      	mov	r5, r0
 8017544:	2900      	cmp	r1, #0
 8017546:	d045      	beq.n	80175d4 <_free_r+0x94>
 8017548:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801754c:	1f0c      	subs	r4, r1, #4
 801754e:	2b00      	cmp	r3, #0
 8017550:	bfb8      	it	lt
 8017552:	18e4      	addlt	r4, r4, r3
 8017554:	f000 fe30 	bl	80181b8 <__malloc_lock>
 8017558:	4a1f      	ldr	r2, [pc, #124]	; (80175d8 <_free_r+0x98>)
 801755a:	6813      	ldr	r3, [r2, #0]
 801755c:	4610      	mov	r0, r2
 801755e:	b933      	cbnz	r3, 801756e <_free_r+0x2e>
 8017560:	6063      	str	r3, [r4, #4]
 8017562:	6014      	str	r4, [r2, #0]
 8017564:	4628      	mov	r0, r5
 8017566:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801756a:	f000 be26 	b.w	80181ba <__malloc_unlock>
 801756e:	42a3      	cmp	r3, r4
 8017570:	d90c      	bls.n	801758c <_free_r+0x4c>
 8017572:	6821      	ldr	r1, [r4, #0]
 8017574:	1862      	adds	r2, r4, r1
 8017576:	4293      	cmp	r3, r2
 8017578:	bf04      	itt	eq
 801757a:	681a      	ldreq	r2, [r3, #0]
 801757c:	685b      	ldreq	r3, [r3, #4]
 801757e:	6063      	str	r3, [r4, #4]
 8017580:	bf04      	itt	eq
 8017582:	1852      	addeq	r2, r2, r1
 8017584:	6022      	streq	r2, [r4, #0]
 8017586:	6004      	str	r4, [r0, #0]
 8017588:	e7ec      	b.n	8017564 <_free_r+0x24>
 801758a:	4613      	mov	r3, r2
 801758c:	685a      	ldr	r2, [r3, #4]
 801758e:	b10a      	cbz	r2, 8017594 <_free_r+0x54>
 8017590:	42a2      	cmp	r2, r4
 8017592:	d9fa      	bls.n	801758a <_free_r+0x4a>
 8017594:	6819      	ldr	r1, [r3, #0]
 8017596:	1858      	adds	r0, r3, r1
 8017598:	42a0      	cmp	r0, r4
 801759a:	d10b      	bne.n	80175b4 <_free_r+0x74>
 801759c:	6820      	ldr	r0, [r4, #0]
 801759e:	4401      	add	r1, r0
 80175a0:	1858      	adds	r0, r3, r1
 80175a2:	4282      	cmp	r2, r0
 80175a4:	6019      	str	r1, [r3, #0]
 80175a6:	d1dd      	bne.n	8017564 <_free_r+0x24>
 80175a8:	6810      	ldr	r0, [r2, #0]
 80175aa:	6852      	ldr	r2, [r2, #4]
 80175ac:	605a      	str	r2, [r3, #4]
 80175ae:	4401      	add	r1, r0
 80175b0:	6019      	str	r1, [r3, #0]
 80175b2:	e7d7      	b.n	8017564 <_free_r+0x24>
 80175b4:	d902      	bls.n	80175bc <_free_r+0x7c>
 80175b6:	230c      	movs	r3, #12
 80175b8:	602b      	str	r3, [r5, #0]
 80175ba:	e7d3      	b.n	8017564 <_free_r+0x24>
 80175bc:	6820      	ldr	r0, [r4, #0]
 80175be:	1821      	adds	r1, r4, r0
 80175c0:	428a      	cmp	r2, r1
 80175c2:	bf04      	itt	eq
 80175c4:	6811      	ldreq	r1, [r2, #0]
 80175c6:	6852      	ldreq	r2, [r2, #4]
 80175c8:	6062      	str	r2, [r4, #4]
 80175ca:	bf04      	itt	eq
 80175cc:	1809      	addeq	r1, r1, r0
 80175ce:	6021      	streq	r1, [r4, #0]
 80175d0:	605c      	str	r4, [r3, #4]
 80175d2:	e7c7      	b.n	8017564 <_free_r+0x24>
 80175d4:	bd38      	pop	{r3, r4, r5, pc}
 80175d6:	bf00      	nop
 80175d8:	2003c494 	.word	0x2003c494

080175dc <_malloc_r>:
 80175dc:	b570      	push	{r4, r5, r6, lr}
 80175de:	1ccd      	adds	r5, r1, #3
 80175e0:	f025 0503 	bic.w	r5, r5, #3
 80175e4:	3508      	adds	r5, #8
 80175e6:	2d0c      	cmp	r5, #12
 80175e8:	bf38      	it	cc
 80175ea:	250c      	movcc	r5, #12
 80175ec:	2d00      	cmp	r5, #0
 80175ee:	4606      	mov	r6, r0
 80175f0:	db01      	blt.n	80175f6 <_malloc_r+0x1a>
 80175f2:	42a9      	cmp	r1, r5
 80175f4:	d903      	bls.n	80175fe <_malloc_r+0x22>
 80175f6:	230c      	movs	r3, #12
 80175f8:	6033      	str	r3, [r6, #0]
 80175fa:	2000      	movs	r0, #0
 80175fc:	bd70      	pop	{r4, r5, r6, pc}
 80175fe:	f000 fddb 	bl	80181b8 <__malloc_lock>
 8017602:	4a21      	ldr	r2, [pc, #132]	; (8017688 <_malloc_r+0xac>)
 8017604:	6814      	ldr	r4, [r2, #0]
 8017606:	4621      	mov	r1, r4
 8017608:	b991      	cbnz	r1, 8017630 <_malloc_r+0x54>
 801760a:	4c20      	ldr	r4, [pc, #128]	; (801768c <_malloc_r+0xb0>)
 801760c:	6823      	ldr	r3, [r4, #0]
 801760e:	b91b      	cbnz	r3, 8017618 <_malloc_r+0x3c>
 8017610:	4630      	mov	r0, r6
 8017612:	f000 fc91 	bl	8017f38 <_sbrk_r>
 8017616:	6020      	str	r0, [r4, #0]
 8017618:	4629      	mov	r1, r5
 801761a:	4630      	mov	r0, r6
 801761c:	f000 fc8c 	bl	8017f38 <_sbrk_r>
 8017620:	1c43      	adds	r3, r0, #1
 8017622:	d124      	bne.n	801766e <_malloc_r+0x92>
 8017624:	230c      	movs	r3, #12
 8017626:	6033      	str	r3, [r6, #0]
 8017628:	4630      	mov	r0, r6
 801762a:	f000 fdc6 	bl	80181ba <__malloc_unlock>
 801762e:	e7e4      	b.n	80175fa <_malloc_r+0x1e>
 8017630:	680b      	ldr	r3, [r1, #0]
 8017632:	1b5b      	subs	r3, r3, r5
 8017634:	d418      	bmi.n	8017668 <_malloc_r+0x8c>
 8017636:	2b0b      	cmp	r3, #11
 8017638:	d90f      	bls.n	801765a <_malloc_r+0x7e>
 801763a:	600b      	str	r3, [r1, #0]
 801763c:	50cd      	str	r5, [r1, r3]
 801763e:	18cc      	adds	r4, r1, r3
 8017640:	4630      	mov	r0, r6
 8017642:	f000 fdba 	bl	80181ba <__malloc_unlock>
 8017646:	f104 000b 	add.w	r0, r4, #11
 801764a:	1d23      	adds	r3, r4, #4
 801764c:	f020 0007 	bic.w	r0, r0, #7
 8017650:	1ac3      	subs	r3, r0, r3
 8017652:	d0d3      	beq.n	80175fc <_malloc_r+0x20>
 8017654:	425a      	negs	r2, r3
 8017656:	50e2      	str	r2, [r4, r3]
 8017658:	e7d0      	b.n	80175fc <_malloc_r+0x20>
 801765a:	428c      	cmp	r4, r1
 801765c:	684b      	ldr	r3, [r1, #4]
 801765e:	bf16      	itet	ne
 8017660:	6063      	strne	r3, [r4, #4]
 8017662:	6013      	streq	r3, [r2, #0]
 8017664:	460c      	movne	r4, r1
 8017666:	e7eb      	b.n	8017640 <_malloc_r+0x64>
 8017668:	460c      	mov	r4, r1
 801766a:	6849      	ldr	r1, [r1, #4]
 801766c:	e7cc      	b.n	8017608 <_malloc_r+0x2c>
 801766e:	1cc4      	adds	r4, r0, #3
 8017670:	f024 0403 	bic.w	r4, r4, #3
 8017674:	42a0      	cmp	r0, r4
 8017676:	d005      	beq.n	8017684 <_malloc_r+0xa8>
 8017678:	1a21      	subs	r1, r4, r0
 801767a:	4630      	mov	r0, r6
 801767c:	f000 fc5c 	bl	8017f38 <_sbrk_r>
 8017680:	3001      	adds	r0, #1
 8017682:	d0cf      	beq.n	8017624 <_malloc_r+0x48>
 8017684:	6025      	str	r5, [r4, #0]
 8017686:	e7db      	b.n	8017640 <_malloc_r+0x64>
 8017688:	2003c494 	.word	0x2003c494
 801768c:	2003c498 	.word	0x2003c498

08017690 <__ssputs_r>:
 8017690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017694:	688e      	ldr	r6, [r1, #8]
 8017696:	429e      	cmp	r6, r3
 8017698:	4682      	mov	sl, r0
 801769a:	460c      	mov	r4, r1
 801769c:	4690      	mov	r8, r2
 801769e:	4699      	mov	r9, r3
 80176a0:	d837      	bhi.n	8017712 <__ssputs_r+0x82>
 80176a2:	898a      	ldrh	r2, [r1, #12]
 80176a4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80176a8:	d031      	beq.n	801770e <__ssputs_r+0x7e>
 80176aa:	6825      	ldr	r5, [r4, #0]
 80176ac:	6909      	ldr	r1, [r1, #16]
 80176ae:	1a6f      	subs	r7, r5, r1
 80176b0:	6965      	ldr	r5, [r4, #20]
 80176b2:	2302      	movs	r3, #2
 80176b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80176b8:	fb95 f5f3 	sdiv	r5, r5, r3
 80176bc:	f109 0301 	add.w	r3, r9, #1
 80176c0:	443b      	add	r3, r7
 80176c2:	429d      	cmp	r5, r3
 80176c4:	bf38      	it	cc
 80176c6:	461d      	movcc	r5, r3
 80176c8:	0553      	lsls	r3, r2, #21
 80176ca:	d530      	bpl.n	801772e <__ssputs_r+0x9e>
 80176cc:	4629      	mov	r1, r5
 80176ce:	f7ff ff85 	bl	80175dc <_malloc_r>
 80176d2:	4606      	mov	r6, r0
 80176d4:	b950      	cbnz	r0, 80176ec <__ssputs_r+0x5c>
 80176d6:	230c      	movs	r3, #12
 80176d8:	f8ca 3000 	str.w	r3, [sl]
 80176dc:	89a3      	ldrh	r3, [r4, #12]
 80176de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80176e2:	81a3      	strh	r3, [r4, #12]
 80176e4:	f04f 30ff 	mov.w	r0, #4294967295
 80176e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80176ec:	463a      	mov	r2, r7
 80176ee:	6921      	ldr	r1, [r4, #16]
 80176f0:	f7fc fbc2 	bl	8013e78 <memcpy>
 80176f4:	89a3      	ldrh	r3, [r4, #12]
 80176f6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80176fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80176fe:	81a3      	strh	r3, [r4, #12]
 8017700:	6126      	str	r6, [r4, #16]
 8017702:	6165      	str	r5, [r4, #20]
 8017704:	443e      	add	r6, r7
 8017706:	1bed      	subs	r5, r5, r7
 8017708:	6026      	str	r6, [r4, #0]
 801770a:	60a5      	str	r5, [r4, #8]
 801770c:	464e      	mov	r6, r9
 801770e:	454e      	cmp	r6, r9
 8017710:	d900      	bls.n	8017714 <__ssputs_r+0x84>
 8017712:	464e      	mov	r6, r9
 8017714:	4632      	mov	r2, r6
 8017716:	4641      	mov	r1, r8
 8017718:	6820      	ldr	r0, [r4, #0]
 801771a:	f000 fd34 	bl	8018186 <memmove>
 801771e:	68a3      	ldr	r3, [r4, #8]
 8017720:	1b9b      	subs	r3, r3, r6
 8017722:	60a3      	str	r3, [r4, #8]
 8017724:	6823      	ldr	r3, [r4, #0]
 8017726:	441e      	add	r6, r3
 8017728:	6026      	str	r6, [r4, #0]
 801772a:	2000      	movs	r0, #0
 801772c:	e7dc      	b.n	80176e8 <__ssputs_r+0x58>
 801772e:	462a      	mov	r2, r5
 8017730:	f000 fd44 	bl	80181bc <_realloc_r>
 8017734:	4606      	mov	r6, r0
 8017736:	2800      	cmp	r0, #0
 8017738:	d1e2      	bne.n	8017700 <__ssputs_r+0x70>
 801773a:	6921      	ldr	r1, [r4, #16]
 801773c:	4650      	mov	r0, sl
 801773e:	f7ff feff 	bl	8017540 <_free_r>
 8017742:	e7c8      	b.n	80176d6 <__ssputs_r+0x46>

08017744 <_svfiprintf_r>:
 8017744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017748:	461d      	mov	r5, r3
 801774a:	898b      	ldrh	r3, [r1, #12]
 801774c:	061f      	lsls	r7, r3, #24
 801774e:	b09d      	sub	sp, #116	; 0x74
 8017750:	4680      	mov	r8, r0
 8017752:	460c      	mov	r4, r1
 8017754:	4616      	mov	r6, r2
 8017756:	d50f      	bpl.n	8017778 <_svfiprintf_r+0x34>
 8017758:	690b      	ldr	r3, [r1, #16]
 801775a:	b96b      	cbnz	r3, 8017778 <_svfiprintf_r+0x34>
 801775c:	2140      	movs	r1, #64	; 0x40
 801775e:	f7ff ff3d 	bl	80175dc <_malloc_r>
 8017762:	6020      	str	r0, [r4, #0]
 8017764:	6120      	str	r0, [r4, #16]
 8017766:	b928      	cbnz	r0, 8017774 <_svfiprintf_r+0x30>
 8017768:	230c      	movs	r3, #12
 801776a:	f8c8 3000 	str.w	r3, [r8]
 801776e:	f04f 30ff 	mov.w	r0, #4294967295
 8017772:	e0c8      	b.n	8017906 <_svfiprintf_r+0x1c2>
 8017774:	2340      	movs	r3, #64	; 0x40
 8017776:	6163      	str	r3, [r4, #20]
 8017778:	2300      	movs	r3, #0
 801777a:	9309      	str	r3, [sp, #36]	; 0x24
 801777c:	2320      	movs	r3, #32
 801777e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017782:	2330      	movs	r3, #48	; 0x30
 8017784:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017788:	9503      	str	r5, [sp, #12]
 801778a:	f04f 0b01 	mov.w	fp, #1
 801778e:	4637      	mov	r7, r6
 8017790:	463d      	mov	r5, r7
 8017792:	f815 3b01 	ldrb.w	r3, [r5], #1
 8017796:	b10b      	cbz	r3, 801779c <_svfiprintf_r+0x58>
 8017798:	2b25      	cmp	r3, #37	; 0x25
 801779a:	d13e      	bne.n	801781a <_svfiprintf_r+0xd6>
 801779c:	ebb7 0a06 	subs.w	sl, r7, r6
 80177a0:	d00b      	beq.n	80177ba <_svfiprintf_r+0x76>
 80177a2:	4653      	mov	r3, sl
 80177a4:	4632      	mov	r2, r6
 80177a6:	4621      	mov	r1, r4
 80177a8:	4640      	mov	r0, r8
 80177aa:	f7ff ff71 	bl	8017690 <__ssputs_r>
 80177ae:	3001      	adds	r0, #1
 80177b0:	f000 80a4 	beq.w	80178fc <_svfiprintf_r+0x1b8>
 80177b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80177b6:	4453      	add	r3, sl
 80177b8:	9309      	str	r3, [sp, #36]	; 0x24
 80177ba:	783b      	ldrb	r3, [r7, #0]
 80177bc:	2b00      	cmp	r3, #0
 80177be:	f000 809d 	beq.w	80178fc <_svfiprintf_r+0x1b8>
 80177c2:	2300      	movs	r3, #0
 80177c4:	f04f 32ff 	mov.w	r2, #4294967295
 80177c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80177cc:	9304      	str	r3, [sp, #16]
 80177ce:	9307      	str	r3, [sp, #28]
 80177d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80177d4:	931a      	str	r3, [sp, #104]	; 0x68
 80177d6:	462f      	mov	r7, r5
 80177d8:	2205      	movs	r2, #5
 80177da:	f817 1b01 	ldrb.w	r1, [r7], #1
 80177de:	4850      	ldr	r0, [pc, #320]	; (8017920 <_svfiprintf_r+0x1dc>)
 80177e0:	f7e8 fd16 	bl	8000210 <memchr>
 80177e4:	9b04      	ldr	r3, [sp, #16]
 80177e6:	b9d0      	cbnz	r0, 801781e <_svfiprintf_r+0xda>
 80177e8:	06d9      	lsls	r1, r3, #27
 80177ea:	bf44      	itt	mi
 80177ec:	2220      	movmi	r2, #32
 80177ee:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80177f2:	071a      	lsls	r2, r3, #28
 80177f4:	bf44      	itt	mi
 80177f6:	222b      	movmi	r2, #43	; 0x2b
 80177f8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80177fc:	782a      	ldrb	r2, [r5, #0]
 80177fe:	2a2a      	cmp	r2, #42	; 0x2a
 8017800:	d015      	beq.n	801782e <_svfiprintf_r+0xea>
 8017802:	9a07      	ldr	r2, [sp, #28]
 8017804:	462f      	mov	r7, r5
 8017806:	2000      	movs	r0, #0
 8017808:	250a      	movs	r5, #10
 801780a:	4639      	mov	r1, r7
 801780c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017810:	3b30      	subs	r3, #48	; 0x30
 8017812:	2b09      	cmp	r3, #9
 8017814:	d94d      	bls.n	80178b2 <_svfiprintf_r+0x16e>
 8017816:	b1b8      	cbz	r0, 8017848 <_svfiprintf_r+0x104>
 8017818:	e00f      	b.n	801783a <_svfiprintf_r+0xf6>
 801781a:	462f      	mov	r7, r5
 801781c:	e7b8      	b.n	8017790 <_svfiprintf_r+0x4c>
 801781e:	4a40      	ldr	r2, [pc, #256]	; (8017920 <_svfiprintf_r+0x1dc>)
 8017820:	1a80      	subs	r0, r0, r2
 8017822:	fa0b f000 	lsl.w	r0, fp, r0
 8017826:	4318      	orrs	r0, r3
 8017828:	9004      	str	r0, [sp, #16]
 801782a:	463d      	mov	r5, r7
 801782c:	e7d3      	b.n	80177d6 <_svfiprintf_r+0x92>
 801782e:	9a03      	ldr	r2, [sp, #12]
 8017830:	1d11      	adds	r1, r2, #4
 8017832:	6812      	ldr	r2, [r2, #0]
 8017834:	9103      	str	r1, [sp, #12]
 8017836:	2a00      	cmp	r2, #0
 8017838:	db01      	blt.n	801783e <_svfiprintf_r+0xfa>
 801783a:	9207      	str	r2, [sp, #28]
 801783c:	e004      	b.n	8017848 <_svfiprintf_r+0x104>
 801783e:	4252      	negs	r2, r2
 8017840:	f043 0302 	orr.w	r3, r3, #2
 8017844:	9207      	str	r2, [sp, #28]
 8017846:	9304      	str	r3, [sp, #16]
 8017848:	783b      	ldrb	r3, [r7, #0]
 801784a:	2b2e      	cmp	r3, #46	; 0x2e
 801784c:	d10c      	bne.n	8017868 <_svfiprintf_r+0x124>
 801784e:	787b      	ldrb	r3, [r7, #1]
 8017850:	2b2a      	cmp	r3, #42	; 0x2a
 8017852:	d133      	bne.n	80178bc <_svfiprintf_r+0x178>
 8017854:	9b03      	ldr	r3, [sp, #12]
 8017856:	1d1a      	adds	r2, r3, #4
 8017858:	681b      	ldr	r3, [r3, #0]
 801785a:	9203      	str	r2, [sp, #12]
 801785c:	2b00      	cmp	r3, #0
 801785e:	bfb8      	it	lt
 8017860:	f04f 33ff 	movlt.w	r3, #4294967295
 8017864:	3702      	adds	r7, #2
 8017866:	9305      	str	r3, [sp, #20]
 8017868:	4d2e      	ldr	r5, [pc, #184]	; (8017924 <_svfiprintf_r+0x1e0>)
 801786a:	7839      	ldrb	r1, [r7, #0]
 801786c:	2203      	movs	r2, #3
 801786e:	4628      	mov	r0, r5
 8017870:	f7e8 fcce 	bl	8000210 <memchr>
 8017874:	b138      	cbz	r0, 8017886 <_svfiprintf_r+0x142>
 8017876:	2340      	movs	r3, #64	; 0x40
 8017878:	1b40      	subs	r0, r0, r5
 801787a:	fa03 f000 	lsl.w	r0, r3, r0
 801787e:	9b04      	ldr	r3, [sp, #16]
 8017880:	4303      	orrs	r3, r0
 8017882:	3701      	adds	r7, #1
 8017884:	9304      	str	r3, [sp, #16]
 8017886:	7839      	ldrb	r1, [r7, #0]
 8017888:	4827      	ldr	r0, [pc, #156]	; (8017928 <_svfiprintf_r+0x1e4>)
 801788a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801788e:	2206      	movs	r2, #6
 8017890:	1c7e      	adds	r6, r7, #1
 8017892:	f7e8 fcbd 	bl	8000210 <memchr>
 8017896:	2800      	cmp	r0, #0
 8017898:	d038      	beq.n	801790c <_svfiprintf_r+0x1c8>
 801789a:	4b24      	ldr	r3, [pc, #144]	; (801792c <_svfiprintf_r+0x1e8>)
 801789c:	bb13      	cbnz	r3, 80178e4 <_svfiprintf_r+0x1a0>
 801789e:	9b03      	ldr	r3, [sp, #12]
 80178a0:	3307      	adds	r3, #7
 80178a2:	f023 0307 	bic.w	r3, r3, #7
 80178a6:	3308      	adds	r3, #8
 80178a8:	9303      	str	r3, [sp, #12]
 80178aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80178ac:	444b      	add	r3, r9
 80178ae:	9309      	str	r3, [sp, #36]	; 0x24
 80178b0:	e76d      	b.n	801778e <_svfiprintf_r+0x4a>
 80178b2:	fb05 3202 	mla	r2, r5, r2, r3
 80178b6:	2001      	movs	r0, #1
 80178b8:	460f      	mov	r7, r1
 80178ba:	e7a6      	b.n	801780a <_svfiprintf_r+0xc6>
 80178bc:	2300      	movs	r3, #0
 80178be:	3701      	adds	r7, #1
 80178c0:	9305      	str	r3, [sp, #20]
 80178c2:	4619      	mov	r1, r3
 80178c4:	250a      	movs	r5, #10
 80178c6:	4638      	mov	r0, r7
 80178c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80178cc:	3a30      	subs	r2, #48	; 0x30
 80178ce:	2a09      	cmp	r2, #9
 80178d0:	d903      	bls.n	80178da <_svfiprintf_r+0x196>
 80178d2:	2b00      	cmp	r3, #0
 80178d4:	d0c8      	beq.n	8017868 <_svfiprintf_r+0x124>
 80178d6:	9105      	str	r1, [sp, #20]
 80178d8:	e7c6      	b.n	8017868 <_svfiprintf_r+0x124>
 80178da:	fb05 2101 	mla	r1, r5, r1, r2
 80178de:	2301      	movs	r3, #1
 80178e0:	4607      	mov	r7, r0
 80178e2:	e7f0      	b.n	80178c6 <_svfiprintf_r+0x182>
 80178e4:	ab03      	add	r3, sp, #12
 80178e6:	9300      	str	r3, [sp, #0]
 80178e8:	4622      	mov	r2, r4
 80178ea:	4b11      	ldr	r3, [pc, #68]	; (8017930 <_svfiprintf_r+0x1ec>)
 80178ec:	a904      	add	r1, sp, #16
 80178ee:	4640      	mov	r0, r8
 80178f0:	f7fc fb6a 	bl	8013fc8 <_printf_float>
 80178f4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80178f8:	4681      	mov	r9, r0
 80178fa:	d1d6      	bne.n	80178aa <_svfiprintf_r+0x166>
 80178fc:	89a3      	ldrh	r3, [r4, #12]
 80178fe:	065b      	lsls	r3, r3, #25
 8017900:	f53f af35 	bmi.w	801776e <_svfiprintf_r+0x2a>
 8017904:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017906:	b01d      	add	sp, #116	; 0x74
 8017908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801790c:	ab03      	add	r3, sp, #12
 801790e:	9300      	str	r3, [sp, #0]
 8017910:	4622      	mov	r2, r4
 8017912:	4b07      	ldr	r3, [pc, #28]	; (8017930 <_svfiprintf_r+0x1ec>)
 8017914:	a904      	add	r1, sp, #16
 8017916:	4640      	mov	r0, r8
 8017918:	f7fc fe0c 	bl	8014534 <_printf_i>
 801791c:	e7ea      	b.n	80178f4 <_svfiprintf_r+0x1b0>
 801791e:	bf00      	nop
 8017920:	08018c24 	.word	0x08018c24
 8017924:	08018c2a 	.word	0x08018c2a
 8017928:	08018c2e 	.word	0x08018c2e
 801792c:	08013fc9 	.word	0x08013fc9
 8017930:	08017691 	.word	0x08017691

08017934 <_sungetc_r>:
 8017934:	b538      	push	{r3, r4, r5, lr}
 8017936:	1c4b      	adds	r3, r1, #1
 8017938:	4614      	mov	r4, r2
 801793a:	d103      	bne.n	8017944 <_sungetc_r+0x10>
 801793c:	f04f 35ff 	mov.w	r5, #4294967295
 8017940:	4628      	mov	r0, r5
 8017942:	bd38      	pop	{r3, r4, r5, pc}
 8017944:	8993      	ldrh	r3, [r2, #12]
 8017946:	f023 0320 	bic.w	r3, r3, #32
 801794a:	8193      	strh	r3, [r2, #12]
 801794c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801794e:	6852      	ldr	r2, [r2, #4]
 8017950:	b2cd      	uxtb	r5, r1
 8017952:	b18b      	cbz	r3, 8017978 <_sungetc_r+0x44>
 8017954:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8017956:	4293      	cmp	r3, r2
 8017958:	dd08      	ble.n	801796c <_sungetc_r+0x38>
 801795a:	6823      	ldr	r3, [r4, #0]
 801795c:	1e5a      	subs	r2, r3, #1
 801795e:	6022      	str	r2, [r4, #0]
 8017960:	f803 5c01 	strb.w	r5, [r3, #-1]
 8017964:	6863      	ldr	r3, [r4, #4]
 8017966:	3301      	adds	r3, #1
 8017968:	6063      	str	r3, [r4, #4]
 801796a:	e7e9      	b.n	8017940 <_sungetc_r+0xc>
 801796c:	4621      	mov	r1, r4
 801796e:	f000 fbc3 	bl	80180f8 <__submore>
 8017972:	2800      	cmp	r0, #0
 8017974:	d0f1      	beq.n	801795a <_sungetc_r+0x26>
 8017976:	e7e1      	b.n	801793c <_sungetc_r+0x8>
 8017978:	6921      	ldr	r1, [r4, #16]
 801797a:	6823      	ldr	r3, [r4, #0]
 801797c:	b151      	cbz	r1, 8017994 <_sungetc_r+0x60>
 801797e:	4299      	cmp	r1, r3
 8017980:	d208      	bcs.n	8017994 <_sungetc_r+0x60>
 8017982:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8017986:	42a9      	cmp	r1, r5
 8017988:	d104      	bne.n	8017994 <_sungetc_r+0x60>
 801798a:	3b01      	subs	r3, #1
 801798c:	3201      	adds	r2, #1
 801798e:	6023      	str	r3, [r4, #0]
 8017990:	6062      	str	r2, [r4, #4]
 8017992:	e7d5      	b.n	8017940 <_sungetc_r+0xc>
 8017994:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8017998:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801799c:	6363      	str	r3, [r4, #52]	; 0x34
 801799e:	2303      	movs	r3, #3
 80179a0:	63a3      	str	r3, [r4, #56]	; 0x38
 80179a2:	4623      	mov	r3, r4
 80179a4:	f803 5f46 	strb.w	r5, [r3, #70]!
 80179a8:	6023      	str	r3, [r4, #0]
 80179aa:	2301      	movs	r3, #1
 80179ac:	e7dc      	b.n	8017968 <_sungetc_r+0x34>

080179ae <__ssrefill_r>:
 80179ae:	b510      	push	{r4, lr}
 80179b0:	460c      	mov	r4, r1
 80179b2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80179b4:	b169      	cbz	r1, 80179d2 <__ssrefill_r+0x24>
 80179b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80179ba:	4299      	cmp	r1, r3
 80179bc:	d001      	beq.n	80179c2 <__ssrefill_r+0x14>
 80179be:	f7ff fdbf 	bl	8017540 <_free_r>
 80179c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80179c4:	6063      	str	r3, [r4, #4]
 80179c6:	2000      	movs	r0, #0
 80179c8:	6360      	str	r0, [r4, #52]	; 0x34
 80179ca:	b113      	cbz	r3, 80179d2 <__ssrefill_r+0x24>
 80179cc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80179ce:	6023      	str	r3, [r4, #0]
 80179d0:	bd10      	pop	{r4, pc}
 80179d2:	6923      	ldr	r3, [r4, #16]
 80179d4:	6023      	str	r3, [r4, #0]
 80179d6:	2300      	movs	r3, #0
 80179d8:	6063      	str	r3, [r4, #4]
 80179da:	89a3      	ldrh	r3, [r4, #12]
 80179dc:	f043 0320 	orr.w	r3, r3, #32
 80179e0:	81a3      	strh	r3, [r4, #12]
 80179e2:	f04f 30ff 	mov.w	r0, #4294967295
 80179e6:	e7f3      	b.n	80179d0 <__ssrefill_r+0x22>

080179e8 <__ssvfiscanf_r>:
 80179e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80179ec:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 80179f0:	460c      	mov	r4, r1
 80179f2:	2100      	movs	r1, #0
 80179f4:	9144      	str	r1, [sp, #272]	; 0x110
 80179f6:	9145      	str	r1, [sp, #276]	; 0x114
 80179f8:	499f      	ldr	r1, [pc, #636]	; (8017c78 <__ssvfiscanf_r+0x290>)
 80179fa:	91a0      	str	r1, [sp, #640]	; 0x280
 80179fc:	f10d 0804 	add.w	r8, sp, #4
 8017a00:	499e      	ldr	r1, [pc, #632]	; (8017c7c <__ssvfiscanf_r+0x294>)
 8017a02:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8017c80 <__ssvfiscanf_r+0x298>
 8017a06:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8017a0a:	4606      	mov	r6, r0
 8017a0c:	4692      	mov	sl, r2
 8017a0e:	91a1      	str	r1, [sp, #644]	; 0x284
 8017a10:	9300      	str	r3, [sp, #0]
 8017a12:	270a      	movs	r7, #10
 8017a14:	f89a 3000 	ldrb.w	r3, [sl]
 8017a18:	2b00      	cmp	r3, #0
 8017a1a:	f000 812a 	beq.w	8017c72 <__ssvfiscanf_r+0x28a>
 8017a1e:	4655      	mov	r5, sl
 8017a20:	f7ff f948 	bl	8016cb4 <__locale_ctype_ptr>
 8017a24:	f815 bb01 	ldrb.w	fp, [r5], #1
 8017a28:	4458      	add	r0, fp
 8017a2a:	7843      	ldrb	r3, [r0, #1]
 8017a2c:	f013 0308 	ands.w	r3, r3, #8
 8017a30:	d01c      	beq.n	8017a6c <__ssvfiscanf_r+0x84>
 8017a32:	6863      	ldr	r3, [r4, #4]
 8017a34:	2b00      	cmp	r3, #0
 8017a36:	dd12      	ble.n	8017a5e <__ssvfiscanf_r+0x76>
 8017a38:	f7ff f93c 	bl	8016cb4 <__locale_ctype_ptr>
 8017a3c:	6823      	ldr	r3, [r4, #0]
 8017a3e:	781a      	ldrb	r2, [r3, #0]
 8017a40:	4410      	add	r0, r2
 8017a42:	7842      	ldrb	r2, [r0, #1]
 8017a44:	0712      	lsls	r2, r2, #28
 8017a46:	d401      	bmi.n	8017a4c <__ssvfiscanf_r+0x64>
 8017a48:	46aa      	mov	sl, r5
 8017a4a:	e7e3      	b.n	8017a14 <__ssvfiscanf_r+0x2c>
 8017a4c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8017a4e:	3201      	adds	r2, #1
 8017a50:	9245      	str	r2, [sp, #276]	; 0x114
 8017a52:	6862      	ldr	r2, [r4, #4]
 8017a54:	3301      	adds	r3, #1
 8017a56:	3a01      	subs	r2, #1
 8017a58:	6062      	str	r2, [r4, #4]
 8017a5a:	6023      	str	r3, [r4, #0]
 8017a5c:	e7e9      	b.n	8017a32 <__ssvfiscanf_r+0x4a>
 8017a5e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017a60:	4621      	mov	r1, r4
 8017a62:	4630      	mov	r0, r6
 8017a64:	4798      	blx	r3
 8017a66:	2800      	cmp	r0, #0
 8017a68:	d0e6      	beq.n	8017a38 <__ssvfiscanf_r+0x50>
 8017a6a:	e7ed      	b.n	8017a48 <__ssvfiscanf_r+0x60>
 8017a6c:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8017a70:	f040 8082 	bne.w	8017b78 <__ssvfiscanf_r+0x190>
 8017a74:	9343      	str	r3, [sp, #268]	; 0x10c
 8017a76:	9341      	str	r3, [sp, #260]	; 0x104
 8017a78:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8017a7c:	2b2a      	cmp	r3, #42	; 0x2a
 8017a7e:	d103      	bne.n	8017a88 <__ssvfiscanf_r+0xa0>
 8017a80:	2310      	movs	r3, #16
 8017a82:	9341      	str	r3, [sp, #260]	; 0x104
 8017a84:	f10a 0502 	add.w	r5, sl, #2
 8017a88:	46aa      	mov	sl, r5
 8017a8a:	f815 1b01 	ldrb.w	r1, [r5], #1
 8017a8e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8017a92:	2a09      	cmp	r2, #9
 8017a94:	d922      	bls.n	8017adc <__ssvfiscanf_r+0xf4>
 8017a96:	2203      	movs	r2, #3
 8017a98:	4879      	ldr	r0, [pc, #484]	; (8017c80 <__ssvfiscanf_r+0x298>)
 8017a9a:	f7e8 fbb9 	bl	8000210 <memchr>
 8017a9e:	b138      	cbz	r0, 8017ab0 <__ssvfiscanf_r+0xc8>
 8017aa0:	eba0 0309 	sub.w	r3, r0, r9
 8017aa4:	2001      	movs	r0, #1
 8017aa6:	4098      	lsls	r0, r3
 8017aa8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017aaa:	4318      	orrs	r0, r3
 8017aac:	9041      	str	r0, [sp, #260]	; 0x104
 8017aae:	46aa      	mov	sl, r5
 8017ab0:	f89a 3000 	ldrb.w	r3, [sl]
 8017ab4:	2b67      	cmp	r3, #103	; 0x67
 8017ab6:	f10a 0501 	add.w	r5, sl, #1
 8017aba:	d82b      	bhi.n	8017b14 <__ssvfiscanf_r+0x12c>
 8017abc:	2b65      	cmp	r3, #101	; 0x65
 8017abe:	f080 809f 	bcs.w	8017c00 <__ssvfiscanf_r+0x218>
 8017ac2:	2b47      	cmp	r3, #71	; 0x47
 8017ac4:	d810      	bhi.n	8017ae8 <__ssvfiscanf_r+0x100>
 8017ac6:	2b45      	cmp	r3, #69	; 0x45
 8017ac8:	f080 809a 	bcs.w	8017c00 <__ssvfiscanf_r+0x218>
 8017acc:	2b00      	cmp	r3, #0
 8017ace:	d06c      	beq.n	8017baa <__ssvfiscanf_r+0x1c2>
 8017ad0:	2b25      	cmp	r3, #37	; 0x25
 8017ad2:	d051      	beq.n	8017b78 <__ssvfiscanf_r+0x190>
 8017ad4:	2303      	movs	r3, #3
 8017ad6:	9347      	str	r3, [sp, #284]	; 0x11c
 8017ad8:	9742      	str	r7, [sp, #264]	; 0x108
 8017ada:	e027      	b.n	8017b2c <__ssvfiscanf_r+0x144>
 8017adc:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8017ade:	fb07 1303 	mla	r3, r7, r3, r1
 8017ae2:	3b30      	subs	r3, #48	; 0x30
 8017ae4:	9343      	str	r3, [sp, #268]	; 0x10c
 8017ae6:	e7cf      	b.n	8017a88 <__ssvfiscanf_r+0xa0>
 8017ae8:	2b5b      	cmp	r3, #91	; 0x5b
 8017aea:	d06a      	beq.n	8017bc2 <__ssvfiscanf_r+0x1da>
 8017aec:	d80c      	bhi.n	8017b08 <__ssvfiscanf_r+0x120>
 8017aee:	2b58      	cmp	r3, #88	; 0x58
 8017af0:	d1f0      	bne.n	8017ad4 <__ssvfiscanf_r+0xec>
 8017af2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8017af4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017af8:	9241      	str	r2, [sp, #260]	; 0x104
 8017afa:	2210      	movs	r2, #16
 8017afc:	9242      	str	r2, [sp, #264]	; 0x108
 8017afe:	2b6e      	cmp	r3, #110	; 0x6e
 8017b00:	bf8c      	ite	hi
 8017b02:	2304      	movhi	r3, #4
 8017b04:	2303      	movls	r3, #3
 8017b06:	e010      	b.n	8017b2a <__ssvfiscanf_r+0x142>
 8017b08:	2b63      	cmp	r3, #99	; 0x63
 8017b0a:	d065      	beq.n	8017bd8 <__ssvfiscanf_r+0x1f0>
 8017b0c:	2b64      	cmp	r3, #100	; 0x64
 8017b0e:	d1e1      	bne.n	8017ad4 <__ssvfiscanf_r+0xec>
 8017b10:	9742      	str	r7, [sp, #264]	; 0x108
 8017b12:	e7f4      	b.n	8017afe <__ssvfiscanf_r+0x116>
 8017b14:	2b70      	cmp	r3, #112	; 0x70
 8017b16:	d04b      	beq.n	8017bb0 <__ssvfiscanf_r+0x1c8>
 8017b18:	d826      	bhi.n	8017b68 <__ssvfiscanf_r+0x180>
 8017b1a:	2b6e      	cmp	r3, #110	; 0x6e
 8017b1c:	d062      	beq.n	8017be4 <__ssvfiscanf_r+0x1fc>
 8017b1e:	d84c      	bhi.n	8017bba <__ssvfiscanf_r+0x1d2>
 8017b20:	2b69      	cmp	r3, #105	; 0x69
 8017b22:	d1d7      	bne.n	8017ad4 <__ssvfiscanf_r+0xec>
 8017b24:	2300      	movs	r3, #0
 8017b26:	9342      	str	r3, [sp, #264]	; 0x108
 8017b28:	2303      	movs	r3, #3
 8017b2a:	9347      	str	r3, [sp, #284]	; 0x11c
 8017b2c:	6863      	ldr	r3, [r4, #4]
 8017b2e:	2b00      	cmp	r3, #0
 8017b30:	dd68      	ble.n	8017c04 <__ssvfiscanf_r+0x21c>
 8017b32:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017b34:	0659      	lsls	r1, r3, #25
 8017b36:	d407      	bmi.n	8017b48 <__ssvfiscanf_r+0x160>
 8017b38:	f7ff f8bc 	bl	8016cb4 <__locale_ctype_ptr>
 8017b3c:	6823      	ldr	r3, [r4, #0]
 8017b3e:	781a      	ldrb	r2, [r3, #0]
 8017b40:	4410      	add	r0, r2
 8017b42:	7842      	ldrb	r2, [r0, #1]
 8017b44:	0712      	lsls	r2, r2, #28
 8017b46:	d464      	bmi.n	8017c12 <__ssvfiscanf_r+0x22a>
 8017b48:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8017b4a:	2b02      	cmp	r3, #2
 8017b4c:	dc73      	bgt.n	8017c36 <__ssvfiscanf_r+0x24e>
 8017b4e:	466b      	mov	r3, sp
 8017b50:	4622      	mov	r2, r4
 8017b52:	a941      	add	r1, sp, #260	; 0x104
 8017b54:	4630      	mov	r0, r6
 8017b56:	f000 f897 	bl	8017c88 <_scanf_chars>
 8017b5a:	2801      	cmp	r0, #1
 8017b5c:	f000 8089 	beq.w	8017c72 <__ssvfiscanf_r+0x28a>
 8017b60:	2802      	cmp	r0, #2
 8017b62:	f47f af71 	bne.w	8017a48 <__ssvfiscanf_r+0x60>
 8017b66:	e01d      	b.n	8017ba4 <__ssvfiscanf_r+0x1bc>
 8017b68:	2b75      	cmp	r3, #117	; 0x75
 8017b6a:	d0d1      	beq.n	8017b10 <__ssvfiscanf_r+0x128>
 8017b6c:	2b78      	cmp	r3, #120	; 0x78
 8017b6e:	d0c0      	beq.n	8017af2 <__ssvfiscanf_r+0x10a>
 8017b70:	2b73      	cmp	r3, #115	; 0x73
 8017b72:	d1af      	bne.n	8017ad4 <__ssvfiscanf_r+0xec>
 8017b74:	2302      	movs	r3, #2
 8017b76:	e7d8      	b.n	8017b2a <__ssvfiscanf_r+0x142>
 8017b78:	6863      	ldr	r3, [r4, #4]
 8017b7a:	2b00      	cmp	r3, #0
 8017b7c:	dd0c      	ble.n	8017b98 <__ssvfiscanf_r+0x1b0>
 8017b7e:	6823      	ldr	r3, [r4, #0]
 8017b80:	781a      	ldrb	r2, [r3, #0]
 8017b82:	455a      	cmp	r2, fp
 8017b84:	d175      	bne.n	8017c72 <__ssvfiscanf_r+0x28a>
 8017b86:	3301      	adds	r3, #1
 8017b88:	6862      	ldr	r2, [r4, #4]
 8017b8a:	6023      	str	r3, [r4, #0]
 8017b8c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8017b8e:	3a01      	subs	r2, #1
 8017b90:	3301      	adds	r3, #1
 8017b92:	6062      	str	r2, [r4, #4]
 8017b94:	9345      	str	r3, [sp, #276]	; 0x114
 8017b96:	e757      	b.n	8017a48 <__ssvfiscanf_r+0x60>
 8017b98:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017b9a:	4621      	mov	r1, r4
 8017b9c:	4630      	mov	r0, r6
 8017b9e:	4798      	blx	r3
 8017ba0:	2800      	cmp	r0, #0
 8017ba2:	d0ec      	beq.n	8017b7e <__ssvfiscanf_r+0x196>
 8017ba4:	9844      	ldr	r0, [sp, #272]	; 0x110
 8017ba6:	2800      	cmp	r0, #0
 8017ba8:	d159      	bne.n	8017c5e <__ssvfiscanf_r+0x276>
 8017baa:	f04f 30ff 	mov.w	r0, #4294967295
 8017bae:	e05c      	b.n	8017c6a <__ssvfiscanf_r+0x282>
 8017bb0:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8017bb2:	f042 0220 	orr.w	r2, r2, #32
 8017bb6:	9241      	str	r2, [sp, #260]	; 0x104
 8017bb8:	e79b      	b.n	8017af2 <__ssvfiscanf_r+0x10a>
 8017bba:	2308      	movs	r3, #8
 8017bbc:	9342      	str	r3, [sp, #264]	; 0x108
 8017bbe:	2304      	movs	r3, #4
 8017bc0:	e7b3      	b.n	8017b2a <__ssvfiscanf_r+0x142>
 8017bc2:	4629      	mov	r1, r5
 8017bc4:	4640      	mov	r0, r8
 8017bc6:	f000 f9c7 	bl	8017f58 <__sccl>
 8017bca:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017bcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017bd0:	9341      	str	r3, [sp, #260]	; 0x104
 8017bd2:	4605      	mov	r5, r0
 8017bd4:	2301      	movs	r3, #1
 8017bd6:	e7a8      	b.n	8017b2a <__ssvfiscanf_r+0x142>
 8017bd8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8017bda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017bde:	9341      	str	r3, [sp, #260]	; 0x104
 8017be0:	2300      	movs	r3, #0
 8017be2:	e7a2      	b.n	8017b2a <__ssvfiscanf_r+0x142>
 8017be4:	9841      	ldr	r0, [sp, #260]	; 0x104
 8017be6:	06c3      	lsls	r3, r0, #27
 8017be8:	f53f af2e 	bmi.w	8017a48 <__ssvfiscanf_r+0x60>
 8017bec:	9b00      	ldr	r3, [sp, #0]
 8017bee:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8017bf0:	1d19      	adds	r1, r3, #4
 8017bf2:	9100      	str	r1, [sp, #0]
 8017bf4:	681b      	ldr	r3, [r3, #0]
 8017bf6:	07c0      	lsls	r0, r0, #31
 8017bf8:	bf4c      	ite	mi
 8017bfa:	801a      	strhmi	r2, [r3, #0]
 8017bfc:	601a      	strpl	r2, [r3, #0]
 8017bfe:	e723      	b.n	8017a48 <__ssvfiscanf_r+0x60>
 8017c00:	2305      	movs	r3, #5
 8017c02:	e792      	b.n	8017b2a <__ssvfiscanf_r+0x142>
 8017c04:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017c06:	4621      	mov	r1, r4
 8017c08:	4630      	mov	r0, r6
 8017c0a:	4798      	blx	r3
 8017c0c:	2800      	cmp	r0, #0
 8017c0e:	d090      	beq.n	8017b32 <__ssvfiscanf_r+0x14a>
 8017c10:	e7c8      	b.n	8017ba4 <__ssvfiscanf_r+0x1bc>
 8017c12:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8017c14:	3201      	adds	r2, #1
 8017c16:	9245      	str	r2, [sp, #276]	; 0x114
 8017c18:	6862      	ldr	r2, [r4, #4]
 8017c1a:	3a01      	subs	r2, #1
 8017c1c:	2a00      	cmp	r2, #0
 8017c1e:	6062      	str	r2, [r4, #4]
 8017c20:	dd02      	ble.n	8017c28 <__ssvfiscanf_r+0x240>
 8017c22:	3301      	adds	r3, #1
 8017c24:	6023      	str	r3, [r4, #0]
 8017c26:	e787      	b.n	8017b38 <__ssvfiscanf_r+0x150>
 8017c28:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8017c2a:	4621      	mov	r1, r4
 8017c2c:	4630      	mov	r0, r6
 8017c2e:	4798      	blx	r3
 8017c30:	2800      	cmp	r0, #0
 8017c32:	d081      	beq.n	8017b38 <__ssvfiscanf_r+0x150>
 8017c34:	e7b6      	b.n	8017ba4 <__ssvfiscanf_r+0x1bc>
 8017c36:	2b04      	cmp	r3, #4
 8017c38:	dc06      	bgt.n	8017c48 <__ssvfiscanf_r+0x260>
 8017c3a:	466b      	mov	r3, sp
 8017c3c:	4622      	mov	r2, r4
 8017c3e:	a941      	add	r1, sp, #260	; 0x104
 8017c40:	4630      	mov	r0, r6
 8017c42:	f000 f885 	bl	8017d50 <_scanf_i>
 8017c46:	e788      	b.n	8017b5a <__ssvfiscanf_r+0x172>
 8017c48:	4b0e      	ldr	r3, [pc, #56]	; (8017c84 <__ssvfiscanf_r+0x29c>)
 8017c4a:	2b00      	cmp	r3, #0
 8017c4c:	f43f aefc 	beq.w	8017a48 <__ssvfiscanf_r+0x60>
 8017c50:	466b      	mov	r3, sp
 8017c52:	4622      	mov	r2, r4
 8017c54:	a941      	add	r1, sp, #260	; 0x104
 8017c56:	4630      	mov	r0, r6
 8017c58:	f7fc fd7e 	bl	8014758 <_scanf_float>
 8017c5c:	e77d      	b.n	8017b5a <__ssvfiscanf_r+0x172>
 8017c5e:	89a3      	ldrh	r3, [r4, #12]
 8017c60:	f013 0f40 	tst.w	r3, #64	; 0x40
 8017c64:	bf18      	it	ne
 8017c66:	f04f 30ff 	movne.w	r0, #4294967295
 8017c6a:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8017c6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c72:	9844      	ldr	r0, [sp, #272]	; 0x110
 8017c74:	e7f9      	b.n	8017c6a <__ssvfiscanf_r+0x282>
 8017c76:	bf00      	nop
 8017c78:	08017935 	.word	0x08017935
 8017c7c:	080179af 	.word	0x080179af
 8017c80:	08018c2a 	.word	0x08018c2a
 8017c84:	08014759 	.word	0x08014759

08017c88 <_scanf_chars>:
 8017c88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017c8c:	4615      	mov	r5, r2
 8017c8e:	688a      	ldr	r2, [r1, #8]
 8017c90:	4680      	mov	r8, r0
 8017c92:	460c      	mov	r4, r1
 8017c94:	b932      	cbnz	r2, 8017ca4 <_scanf_chars+0x1c>
 8017c96:	698a      	ldr	r2, [r1, #24]
 8017c98:	2a00      	cmp	r2, #0
 8017c9a:	bf14      	ite	ne
 8017c9c:	f04f 32ff 	movne.w	r2, #4294967295
 8017ca0:	2201      	moveq	r2, #1
 8017ca2:	608a      	str	r2, [r1, #8]
 8017ca4:	6822      	ldr	r2, [r4, #0]
 8017ca6:	06d1      	lsls	r1, r2, #27
 8017ca8:	bf5f      	itttt	pl
 8017caa:	681a      	ldrpl	r2, [r3, #0]
 8017cac:	1d11      	addpl	r1, r2, #4
 8017cae:	6019      	strpl	r1, [r3, #0]
 8017cb0:	6817      	ldrpl	r7, [r2, #0]
 8017cb2:	2600      	movs	r6, #0
 8017cb4:	69a3      	ldr	r3, [r4, #24]
 8017cb6:	b1db      	cbz	r3, 8017cf0 <_scanf_chars+0x68>
 8017cb8:	2b01      	cmp	r3, #1
 8017cba:	d107      	bne.n	8017ccc <_scanf_chars+0x44>
 8017cbc:	682b      	ldr	r3, [r5, #0]
 8017cbe:	6962      	ldr	r2, [r4, #20]
 8017cc0:	781b      	ldrb	r3, [r3, #0]
 8017cc2:	5cd3      	ldrb	r3, [r2, r3]
 8017cc4:	b9a3      	cbnz	r3, 8017cf0 <_scanf_chars+0x68>
 8017cc6:	2e00      	cmp	r6, #0
 8017cc8:	d132      	bne.n	8017d30 <_scanf_chars+0xa8>
 8017cca:	e006      	b.n	8017cda <_scanf_chars+0x52>
 8017ccc:	2b02      	cmp	r3, #2
 8017cce:	d007      	beq.n	8017ce0 <_scanf_chars+0x58>
 8017cd0:	2e00      	cmp	r6, #0
 8017cd2:	d12d      	bne.n	8017d30 <_scanf_chars+0xa8>
 8017cd4:	69a3      	ldr	r3, [r4, #24]
 8017cd6:	2b01      	cmp	r3, #1
 8017cd8:	d12a      	bne.n	8017d30 <_scanf_chars+0xa8>
 8017cda:	2001      	movs	r0, #1
 8017cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017ce0:	f7fe ffe8 	bl	8016cb4 <__locale_ctype_ptr>
 8017ce4:	682b      	ldr	r3, [r5, #0]
 8017ce6:	781b      	ldrb	r3, [r3, #0]
 8017ce8:	4418      	add	r0, r3
 8017cea:	7843      	ldrb	r3, [r0, #1]
 8017cec:	071b      	lsls	r3, r3, #28
 8017cee:	d4ef      	bmi.n	8017cd0 <_scanf_chars+0x48>
 8017cf0:	6823      	ldr	r3, [r4, #0]
 8017cf2:	06da      	lsls	r2, r3, #27
 8017cf4:	bf5e      	ittt	pl
 8017cf6:	682b      	ldrpl	r3, [r5, #0]
 8017cf8:	781b      	ldrbpl	r3, [r3, #0]
 8017cfa:	703b      	strbpl	r3, [r7, #0]
 8017cfc:	682a      	ldr	r2, [r5, #0]
 8017cfe:	686b      	ldr	r3, [r5, #4]
 8017d00:	f102 0201 	add.w	r2, r2, #1
 8017d04:	602a      	str	r2, [r5, #0]
 8017d06:	68a2      	ldr	r2, [r4, #8]
 8017d08:	f103 33ff 	add.w	r3, r3, #4294967295
 8017d0c:	f102 32ff 	add.w	r2, r2, #4294967295
 8017d10:	606b      	str	r3, [r5, #4]
 8017d12:	f106 0601 	add.w	r6, r6, #1
 8017d16:	bf58      	it	pl
 8017d18:	3701      	addpl	r7, #1
 8017d1a:	60a2      	str	r2, [r4, #8]
 8017d1c:	b142      	cbz	r2, 8017d30 <_scanf_chars+0xa8>
 8017d1e:	2b00      	cmp	r3, #0
 8017d20:	dcc8      	bgt.n	8017cb4 <_scanf_chars+0x2c>
 8017d22:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8017d26:	4629      	mov	r1, r5
 8017d28:	4640      	mov	r0, r8
 8017d2a:	4798      	blx	r3
 8017d2c:	2800      	cmp	r0, #0
 8017d2e:	d0c1      	beq.n	8017cb4 <_scanf_chars+0x2c>
 8017d30:	6823      	ldr	r3, [r4, #0]
 8017d32:	f013 0310 	ands.w	r3, r3, #16
 8017d36:	d105      	bne.n	8017d44 <_scanf_chars+0xbc>
 8017d38:	68e2      	ldr	r2, [r4, #12]
 8017d3a:	3201      	adds	r2, #1
 8017d3c:	60e2      	str	r2, [r4, #12]
 8017d3e:	69a2      	ldr	r2, [r4, #24]
 8017d40:	b102      	cbz	r2, 8017d44 <_scanf_chars+0xbc>
 8017d42:	703b      	strb	r3, [r7, #0]
 8017d44:	6923      	ldr	r3, [r4, #16]
 8017d46:	441e      	add	r6, r3
 8017d48:	6126      	str	r6, [r4, #16]
 8017d4a:	2000      	movs	r0, #0
 8017d4c:	e7c6      	b.n	8017cdc <_scanf_chars+0x54>
	...

08017d50 <_scanf_i>:
 8017d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d54:	469a      	mov	sl, r3
 8017d56:	4b74      	ldr	r3, [pc, #464]	; (8017f28 <_scanf_i+0x1d8>)
 8017d58:	460c      	mov	r4, r1
 8017d5a:	4683      	mov	fp, r0
 8017d5c:	4616      	mov	r6, r2
 8017d5e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8017d62:	b087      	sub	sp, #28
 8017d64:	ab03      	add	r3, sp, #12
 8017d66:	68a7      	ldr	r7, [r4, #8]
 8017d68:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8017d6c:	4b6f      	ldr	r3, [pc, #444]	; (8017f2c <_scanf_i+0x1dc>)
 8017d6e:	69a1      	ldr	r1, [r4, #24]
 8017d70:	4a6f      	ldr	r2, [pc, #444]	; (8017f30 <_scanf_i+0x1e0>)
 8017d72:	2903      	cmp	r1, #3
 8017d74:	bf08      	it	eq
 8017d76:	461a      	moveq	r2, r3
 8017d78:	1e7b      	subs	r3, r7, #1
 8017d7a:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8017d7e:	bf84      	itt	hi
 8017d80:	f240 135d 	movwhi	r3, #349	; 0x15d
 8017d84:	60a3      	strhi	r3, [r4, #8]
 8017d86:	6823      	ldr	r3, [r4, #0]
 8017d88:	9200      	str	r2, [sp, #0]
 8017d8a:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8017d8e:	bf88      	it	hi
 8017d90:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8017d94:	f104 091c 	add.w	r9, r4, #28
 8017d98:	6023      	str	r3, [r4, #0]
 8017d9a:	bf8c      	ite	hi
 8017d9c:	197f      	addhi	r7, r7, r5
 8017d9e:	2700      	movls	r7, #0
 8017da0:	464b      	mov	r3, r9
 8017da2:	f04f 0800 	mov.w	r8, #0
 8017da6:	9301      	str	r3, [sp, #4]
 8017da8:	6831      	ldr	r1, [r6, #0]
 8017daa:	ab03      	add	r3, sp, #12
 8017dac:	2202      	movs	r2, #2
 8017dae:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8017db2:	7809      	ldrb	r1, [r1, #0]
 8017db4:	f7e8 fa2c 	bl	8000210 <memchr>
 8017db8:	9b01      	ldr	r3, [sp, #4]
 8017dba:	b330      	cbz	r0, 8017e0a <_scanf_i+0xba>
 8017dbc:	f1b8 0f01 	cmp.w	r8, #1
 8017dc0:	d15a      	bne.n	8017e78 <_scanf_i+0x128>
 8017dc2:	6862      	ldr	r2, [r4, #4]
 8017dc4:	b92a      	cbnz	r2, 8017dd2 <_scanf_i+0x82>
 8017dc6:	6822      	ldr	r2, [r4, #0]
 8017dc8:	2108      	movs	r1, #8
 8017dca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017dce:	6061      	str	r1, [r4, #4]
 8017dd0:	6022      	str	r2, [r4, #0]
 8017dd2:	6822      	ldr	r2, [r4, #0]
 8017dd4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8017dd8:	6022      	str	r2, [r4, #0]
 8017dda:	68a2      	ldr	r2, [r4, #8]
 8017ddc:	1e51      	subs	r1, r2, #1
 8017dde:	60a1      	str	r1, [r4, #8]
 8017de0:	b19a      	cbz	r2, 8017e0a <_scanf_i+0xba>
 8017de2:	6832      	ldr	r2, [r6, #0]
 8017de4:	1c51      	adds	r1, r2, #1
 8017de6:	6031      	str	r1, [r6, #0]
 8017de8:	7812      	ldrb	r2, [r2, #0]
 8017dea:	701a      	strb	r2, [r3, #0]
 8017dec:	1c5d      	adds	r5, r3, #1
 8017dee:	6873      	ldr	r3, [r6, #4]
 8017df0:	3b01      	subs	r3, #1
 8017df2:	2b00      	cmp	r3, #0
 8017df4:	6073      	str	r3, [r6, #4]
 8017df6:	dc07      	bgt.n	8017e08 <_scanf_i+0xb8>
 8017df8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8017dfc:	4631      	mov	r1, r6
 8017dfe:	4658      	mov	r0, fp
 8017e00:	4798      	blx	r3
 8017e02:	2800      	cmp	r0, #0
 8017e04:	f040 8086 	bne.w	8017f14 <_scanf_i+0x1c4>
 8017e08:	462b      	mov	r3, r5
 8017e0a:	f108 0801 	add.w	r8, r8, #1
 8017e0e:	f1b8 0f03 	cmp.w	r8, #3
 8017e12:	d1c8      	bne.n	8017da6 <_scanf_i+0x56>
 8017e14:	6862      	ldr	r2, [r4, #4]
 8017e16:	b90a      	cbnz	r2, 8017e1c <_scanf_i+0xcc>
 8017e18:	220a      	movs	r2, #10
 8017e1a:	6062      	str	r2, [r4, #4]
 8017e1c:	6862      	ldr	r2, [r4, #4]
 8017e1e:	4945      	ldr	r1, [pc, #276]	; (8017f34 <_scanf_i+0x1e4>)
 8017e20:	6960      	ldr	r0, [r4, #20]
 8017e22:	9301      	str	r3, [sp, #4]
 8017e24:	1a89      	subs	r1, r1, r2
 8017e26:	f000 f897 	bl	8017f58 <__sccl>
 8017e2a:	9b01      	ldr	r3, [sp, #4]
 8017e2c:	f04f 0800 	mov.w	r8, #0
 8017e30:	461d      	mov	r5, r3
 8017e32:	68a3      	ldr	r3, [r4, #8]
 8017e34:	6822      	ldr	r2, [r4, #0]
 8017e36:	2b00      	cmp	r3, #0
 8017e38:	d03a      	beq.n	8017eb0 <_scanf_i+0x160>
 8017e3a:	6831      	ldr	r1, [r6, #0]
 8017e3c:	6960      	ldr	r0, [r4, #20]
 8017e3e:	f891 c000 	ldrb.w	ip, [r1]
 8017e42:	f810 000c 	ldrb.w	r0, [r0, ip]
 8017e46:	2800      	cmp	r0, #0
 8017e48:	d032      	beq.n	8017eb0 <_scanf_i+0x160>
 8017e4a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8017e4e:	d121      	bne.n	8017e94 <_scanf_i+0x144>
 8017e50:	0510      	lsls	r0, r2, #20
 8017e52:	d51f      	bpl.n	8017e94 <_scanf_i+0x144>
 8017e54:	f108 0801 	add.w	r8, r8, #1
 8017e58:	b117      	cbz	r7, 8017e60 <_scanf_i+0x110>
 8017e5a:	3301      	adds	r3, #1
 8017e5c:	3f01      	subs	r7, #1
 8017e5e:	60a3      	str	r3, [r4, #8]
 8017e60:	6873      	ldr	r3, [r6, #4]
 8017e62:	3b01      	subs	r3, #1
 8017e64:	2b00      	cmp	r3, #0
 8017e66:	6073      	str	r3, [r6, #4]
 8017e68:	dd1b      	ble.n	8017ea2 <_scanf_i+0x152>
 8017e6a:	6833      	ldr	r3, [r6, #0]
 8017e6c:	3301      	adds	r3, #1
 8017e6e:	6033      	str	r3, [r6, #0]
 8017e70:	68a3      	ldr	r3, [r4, #8]
 8017e72:	3b01      	subs	r3, #1
 8017e74:	60a3      	str	r3, [r4, #8]
 8017e76:	e7dc      	b.n	8017e32 <_scanf_i+0xe2>
 8017e78:	f1b8 0f02 	cmp.w	r8, #2
 8017e7c:	d1ad      	bne.n	8017dda <_scanf_i+0x8a>
 8017e7e:	6822      	ldr	r2, [r4, #0]
 8017e80:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8017e84:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8017e88:	d1bf      	bne.n	8017e0a <_scanf_i+0xba>
 8017e8a:	2110      	movs	r1, #16
 8017e8c:	6061      	str	r1, [r4, #4]
 8017e8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8017e92:	e7a1      	b.n	8017dd8 <_scanf_i+0x88>
 8017e94:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8017e98:	6022      	str	r2, [r4, #0]
 8017e9a:	780b      	ldrb	r3, [r1, #0]
 8017e9c:	702b      	strb	r3, [r5, #0]
 8017e9e:	3501      	adds	r5, #1
 8017ea0:	e7de      	b.n	8017e60 <_scanf_i+0x110>
 8017ea2:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8017ea6:	4631      	mov	r1, r6
 8017ea8:	4658      	mov	r0, fp
 8017eaa:	4798      	blx	r3
 8017eac:	2800      	cmp	r0, #0
 8017eae:	d0df      	beq.n	8017e70 <_scanf_i+0x120>
 8017eb0:	6823      	ldr	r3, [r4, #0]
 8017eb2:	05d9      	lsls	r1, r3, #23
 8017eb4:	d50c      	bpl.n	8017ed0 <_scanf_i+0x180>
 8017eb6:	454d      	cmp	r5, r9
 8017eb8:	d908      	bls.n	8017ecc <_scanf_i+0x17c>
 8017eba:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8017ebe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8017ec2:	4632      	mov	r2, r6
 8017ec4:	4658      	mov	r0, fp
 8017ec6:	4798      	blx	r3
 8017ec8:	1e6f      	subs	r7, r5, #1
 8017eca:	463d      	mov	r5, r7
 8017ecc:	454d      	cmp	r5, r9
 8017ece:	d029      	beq.n	8017f24 <_scanf_i+0x1d4>
 8017ed0:	6822      	ldr	r2, [r4, #0]
 8017ed2:	f012 0210 	ands.w	r2, r2, #16
 8017ed6:	d113      	bne.n	8017f00 <_scanf_i+0x1b0>
 8017ed8:	702a      	strb	r2, [r5, #0]
 8017eda:	6863      	ldr	r3, [r4, #4]
 8017edc:	9e00      	ldr	r6, [sp, #0]
 8017ede:	4649      	mov	r1, r9
 8017ee0:	4658      	mov	r0, fp
 8017ee2:	47b0      	blx	r6
 8017ee4:	f8da 3000 	ldr.w	r3, [sl]
 8017ee8:	6821      	ldr	r1, [r4, #0]
 8017eea:	1d1a      	adds	r2, r3, #4
 8017eec:	f8ca 2000 	str.w	r2, [sl]
 8017ef0:	f011 0f20 	tst.w	r1, #32
 8017ef4:	681b      	ldr	r3, [r3, #0]
 8017ef6:	d010      	beq.n	8017f1a <_scanf_i+0x1ca>
 8017ef8:	6018      	str	r0, [r3, #0]
 8017efa:	68e3      	ldr	r3, [r4, #12]
 8017efc:	3301      	adds	r3, #1
 8017efe:	60e3      	str	r3, [r4, #12]
 8017f00:	eba5 0509 	sub.w	r5, r5, r9
 8017f04:	44a8      	add	r8, r5
 8017f06:	6925      	ldr	r5, [r4, #16]
 8017f08:	4445      	add	r5, r8
 8017f0a:	6125      	str	r5, [r4, #16]
 8017f0c:	2000      	movs	r0, #0
 8017f0e:	b007      	add	sp, #28
 8017f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f14:	f04f 0800 	mov.w	r8, #0
 8017f18:	e7ca      	b.n	8017eb0 <_scanf_i+0x160>
 8017f1a:	07ca      	lsls	r2, r1, #31
 8017f1c:	bf4c      	ite	mi
 8017f1e:	8018      	strhmi	r0, [r3, #0]
 8017f20:	6018      	strpl	r0, [r3, #0]
 8017f22:	e7ea      	b.n	8017efa <_scanf_i+0x1aa>
 8017f24:	2001      	movs	r0, #1
 8017f26:	e7f2      	b.n	8017f0e <_scanf_i+0x1be>
 8017f28:	08018784 	.word	0x08018784
 8017f2c:	08015971 	.word	0x08015971
 8017f30:	080180d5 	.word	0x080180d5
 8017f34:	08018c45 	.word	0x08018c45

08017f38 <_sbrk_r>:
 8017f38:	b538      	push	{r3, r4, r5, lr}
 8017f3a:	4c06      	ldr	r4, [pc, #24]	; (8017f54 <_sbrk_r+0x1c>)
 8017f3c:	2300      	movs	r3, #0
 8017f3e:	4605      	mov	r5, r0
 8017f40:	4608      	mov	r0, r1
 8017f42:	6023      	str	r3, [r4, #0]
 8017f44:	f7ee feac 	bl	8006ca0 <_sbrk>
 8017f48:	1c43      	adds	r3, r0, #1
 8017f4a:	d102      	bne.n	8017f52 <_sbrk_r+0x1a>
 8017f4c:	6823      	ldr	r3, [r4, #0]
 8017f4e:	b103      	cbz	r3, 8017f52 <_sbrk_r+0x1a>
 8017f50:	602b      	str	r3, [r5, #0]
 8017f52:	bd38      	pop	{r3, r4, r5, pc}
 8017f54:	20040e34 	.word	0x20040e34

08017f58 <__sccl>:
 8017f58:	b570      	push	{r4, r5, r6, lr}
 8017f5a:	780b      	ldrb	r3, [r1, #0]
 8017f5c:	2b5e      	cmp	r3, #94	; 0x5e
 8017f5e:	bf13      	iteet	ne
 8017f60:	1c4a      	addne	r2, r1, #1
 8017f62:	1c8a      	addeq	r2, r1, #2
 8017f64:	784b      	ldrbeq	r3, [r1, #1]
 8017f66:	2100      	movne	r1, #0
 8017f68:	bf08      	it	eq
 8017f6a:	2101      	moveq	r1, #1
 8017f6c:	1e44      	subs	r4, r0, #1
 8017f6e:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 8017f72:	f804 1f01 	strb.w	r1, [r4, #1]!
 8017f76:	42ac      	cmp	r4, r5
 8017f78:	d1fb      	bne.n	8017f72 <__sccl+0x1a>
 8017f7a:	b913      	cbnz	r3, 8017f82 <__sccl+0x2a>
 8017f7c:	3a01      	subs	r2, #1
 8017f7e:	4610      	mov	r0, r2
 8017f80:	bd70      	pop	{r4, r5, r6, pc}
 8017f82:	f081 0401 	eor.w	r4, r1, #1
 8017f86:	54c4      	strb	r4, [r0, r3]
 8017f88:	1c51      	adds	r1, r2, #1
 8017f8a:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8017f8e:	2d2d      	cmp	r5, #45	; 0x2d
 8017f90:	f101 36ff 	add.w	r6, r1, #4294967295
 8017f94:	460a      	mov	r2, r1
 8017f96:	d006      	beq.n	8017fa6 <__sccl+0x4e>
 8017f98:	2d5d      	cmp	r5, #93	; 0x5d
 8017f9a:	d0f0      	beq.n	8017f7e <__sccl+0x26>
 8017f9c:	b90d      	cbnz	r5, 8017fa2 <__sccl+0x4a>
 8017f9e:	4632      	mov	r2, r6
 8017fa0:	e7ed      	b.n	8017f7e <__sccl+0x26>
 8017fa2:	462b      	mov	r3, r5
 8017fa4:	e7ef      	b.n	8017f86 <__sccl+0x2e>
 8017fa6:	780e      	ldrb	r6, [r1, #0]
 8017fa8:	2e5d      	cmp	r6, #93	; 0x5d
 8017faa:	d0fa      	beq.n	8017fa2 <__sccl+0x4a>
 8017fac:	42b3      	cmp	r3, r6
 8017fae:	dcf8      	bgt.n	8017fa2 <__sccl+0x4a>
 8017fb0:	3301      	adds	r3, #1
 8017fb2:	429e      	cmp	r6, r3
 8017fb4:	54c4      	strb	r4, [r0, r3]
 8017fb6:	dcfb      	bgt.n	8017fb0 <__sccl+0x58>
 8017fb8:	3102      	adds	r1, #2
 8017fba:	e7e6      	b.n	8017f8a <__sccl+0x32>

08017fbc <strncmp>:
 8017fbc:	b510      	push	{r4, lr}
 8017fbe:	b16a      	cbz	r2, 8017fdc <strncmp+0x20>
 8017fc0:	3901      	subs	r1, #1
 8017fc2:	1884      	adds	r4, r0, r2
 8017fc4:	f810 3b01 	ldrb.w	r3, [r0], #1
 8017fc8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8017fcc:	4293      	cmp	r3, r2
 8017fce:	d103      	bne.n	8017fd8 <strncmp+0x1c>
 8017fd0:	42a0      	cmp	r0, r4
 8017fd2:	d001      	beq.n	8017fd8 <strncmp+0x1c>
 8017fd4:	2b00      	cmp	r3, #0
 8017fd6:	d1f5      	bne.n	8017fc4 <strncmp+0x8>
 8017fd8:	1a98      	subs	r0, r3, r2
 8017fda:	bd10      	pop	{r4, pc}
 8017fdc:	4610      	mov	r0, r2
 8017fde:	e7fc      	b.n	8017fda <strncmp+0x1e>

08017fe0 <_strtoul_l.isra.0>:
 8017fe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017fe4:	4680      	mov	r8, r0
 8017fe6:	4689      	mov	r9, r1
 8017fe8:	4692      	mov	sl, r2
 8017fea:	461e      	mov	r6, r3
 8017fec:	460f      	mov	r7, r1
 8017fee:	463d      	mov	r5, r7
 8017ff0:	9808      	ldr	r0, [sp, #32]
 8017ff2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8017ff6:	f7fe fe59 	bl	8016cac <__locale_ctype_ptr_l>
 8017ffa:	4420      	add	r0, r4
 8017ffc:	7843      	ldrb	r3, [r0, #1]
 8017ffe:	f013 0308 	ands.w	r3, r3, #8
 8018002:	d130      	bne.n	8018066 <_strtoul_l.isra.0+0x86>
 8018004:	2c2d      	cmp	r4, #45	; 0x2d
 8018006:	d130      	bne.n	801806a <_strtoul_l.isra.0+0x8a>
 8018008:	787c      	ldrb	r4, [r7, #1]
 801800a:	1cbd      	adds	r5, r7, #2
 801800c:	2101      	movs	r1, #1
 801800e:	2e00      	cmp	r6, #0
 8018010:	d05c      	beq.n	80180cc <_strtoul_l.isra.0+0xec>
 8018012:	2e10      	cmp	r6, #16
 8018014:	d109      	bne.n	801802a <_strtoul_l.isra.0+0x4a>
 8018016:	2c30      	cmp	r4, #48	; 0x30
 8018018:	d107      	bne.n	801802a <_strtoul_l.isra.0+0x4a>
 801801a:	782b      	ldrb	r3, [r5, #0]
 801801c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8018020:	2b58      	cmp	r3, #88	; 0x58
 8018022:	d14e      	bne.n	80180c2 <_strtoul_l.isra.0+0xe2>
 8018024:	786c      	ldrb	r4, [r5, #1]
 8018026:	2610      	movs	r6, #16
 8018028:	3502      	adds	r5, #2
 801802a:	f04f 32ff 	mov.w	r2, #4294967295
 801802e:	2300      	movs	r3, #0
 8018030:	fbb2 f2f6 	udiv	r2, r2, r6
 8018034:	fb06 fc02 	mul.w	ip, r6, r2
 8018038:	ea6f 0c0c 	mvn.w	ip, ip
 801803c:	4618      	mov	r0, r3
 801803e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8018042:	2f09      	cmp	r7, #9
 8018044:	d817      	bhi.n	8018076 <_strtoul_l.isra.0+0x96>
 8018046:	463c      	mov	r4, r7
 8018048:	42a6      	cmp	r6, r4
 801804a:	dd23      	ble.n	8018094 <_strtoul_l.isra.0+0xb4>
 801804c:	2b00      	cmp	r3, #0
 801804e:	db1e      	blt.n	801808e <_strtoul_l.isra.0+0xae>
 8018050:	4282      	cmp	r2, r0
 8018052:	d31c      	bcc.n	801808e <_strtoul_l.isra.0+0xae>
 8018054:	d101      	bne.n	801805a <_strtoul_l.isra.0+0x7a>
 8018056:	45a4      	cmp	ip, r4
 8018058:	db19      	blt.n	801808e <_strtoul_l.isra.0+0xae>
 801805a:	fb00 4006 	mla	r0, r0, r6, r4
 801805e:	2301      	movs	r3, #1
 8018060:	f815 4b01 	ldrb.w	r4, [r5], #1
 8018064:	e7eb      	b.n	801803e <_strtoul_l.isra.0+0x5e>
 8018066:	462f      	mov	r7, r5
 8018068:	e7c1      	b.n	8017fee <_strtoul_l.isra.0+0xe>
 801806a:	2c2b      	cmp	r4, #43	; 0x2b
 801806c:	bf04      	itt	eq
 801806e:	1cbd      	addeq	r5, r7, #2
 8018070:	787c      	ldrbeq	r4, [r7, #1]
 8018072:	4619      	mov	r1, r3
 8018074:	e7cb      	b.n	801800e <_strtoul_l.isra.0+0x2e>
 8018076:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 801807a:	2f19      	cmp	r7, #25
 801807c:	d801      	bhi.n	8018082 <_strtoul_l.isra.0+0xa2>
 801807e:	3c37      	subs	r4, #55	; 0x37
 8018080:	e7e2      	b.n	8018048 <_strtoul_l.isra.0+0x68>
 8018082:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8018086:	2f19      	cmp	r7, #25
 8018088:	d804      	bhi.n	8018094 <_strtoul_l.isra.0+0xb4>
 801808a:	3c57      	subs	r4, #87	; 0x57
 801808c:	e7dc      	b.n	8018048 <_strtoul_l.isra.0+0x68>
 801808e:	f04f 33ff 	mov.w	r3, #4294967295
 8018092:	e7e5      	b.n	8018060 <_strtoul_l.isra.0+0x80>
 8018094:	2b00      	cmp	r3, #0
 8018096:	da09      	bge.n	80180ac <_strtoul_l.isra.0+0xcc>
 8018098:	2322      	movs	r3, #34	; 0x22
 801809a:	f8c8 3000 	str.w	r3, [r8]
 801809e:	f04f 30ff 	mov.w	r0, #4294967295
 80180a2:	f1ba 0f00 	cmp.w	sl, #0
 80180a6:	d107      	bne.n	80180b8 <_strtoul_l.isra.0+0xd8>
 80180a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80180ac:	b101      	cbz	r1, 80180b0 <_strtoul_l.isra.0+0xd0>
 80180ae:	4240      	negs	r0, r0
 80180b0:	f1ba 0f00 	cmp.w	sl, #0
 80180b4:	d0f8      	beq.n	80180a8 <_strtoul_l.isra.0+0xc8>
 80180b6:	b10b      	cbz	r3, 80180bc <_strtoul_l.isra.0+0xdc>
 80180b8:	f105 39ff 	add.w	r9, r5, #4294967295
 80180bc:	f8ca 9000 	str.w	r9, [sl]
 80180c0:	e7f2      	b.n	80180a8 <_strtoul_l.isra.0+0xc8>
 80180c2:	2430      	movs	r4, #48	; 0x30
 80180c4:	2e00      	cmp	r6, #0
 80180c6:	d1b0      	bne.n	801802a <_strtoul_l.isra.0+0x4a>
 80180c8:	2608      	movs	r6, #8
 80180ca:	e7ae      	b.n	801802a <_strtoul_l.isra.0+0x4a>
 80180cc:	2c30      	cmp	r4, #48	; 0x30
 80180ce:	d0a4      	beq.n	801801a <_strtoul_l.isra.0+0x3a>
 80180d0:	260a      	movs	r6, #10
 80180d2:	e7aa      	b.n	801802a <_strtoul_l.isra.0+0x4a>

080180d4 <_strtoul_r>:
 80180d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80180d6:	4c06      	ldr	r4, [pc, #24]	; (80180f0 <_strtoul_r+0x1c>)
 80180d8:	4d06      	ldr	r5, [pc, #24]	; (80180f4 <_strtoul_r+0x20>)
 80180da:	6824      	ldr	r4, [r4, #0]
 80180dc:	6a24      	ldr	r4, [r4, #32]
 80180de:	2c00      	cmp	r4, #0
 80180e0:	bf08      	it	eq
 80180e2:	462c      	moveq	r4, r5
 80180e4:	9400      	str	r4, [sp, #0]
 80180e6:	f7ff ff7b 	bl	8017fe0 <_strtoul_l.isra.0>
 80180ea:	b003      	add	sp, #12
 80180ec:	bd30      	pop	{r4, r5, pc}
 80180ee:	bf00      	nop
 80180f0:	2000000c 	.word	0x2000000c
 80180f4:	20000070 	.word	0x20000070

080180f8 <__submore>:
 80180f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80180fc:	460c      	mov	r4, r1
 80180fe:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8018100:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018104:	4299      	cmp	r1, r3
 8018106:	d11d      	bne.n	8018144 <__submore+0x4c>
 8018108:	f44f 6180 	mov.w	r1, #1024	; 0x400
 801810c:	f7ff fa66 	bl	80175dc <_malloc_r>
 8018110:	b918      	cbnz	r0, 801811a <__submore+0x22>
 8018112:	f04f 30ff 	mov.w	r0, #4294967295
 8018116:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801811a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801811e:	63a3      	str	r3, [r4, #56]	; 0x38
 8018120:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8018124:	6360      	str	r0, [r4, #52]	; 0x34
 8018126:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 801812a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801812e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8018132:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8018136:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 801813a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801813e:	6020      	str	r0, [r4, #0]
 8018140:	2000      	movs	r0, #0
 8018142:	e7e8      	b.n	8018116 <__submore+0x1e>
 8018144:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8018146:	0077      	lsls	r7, r6, #1
 8018148:	463a      	mov	r2, r7
 801814a:	f000 f837 	bl	80181bc <_realloc_r>
 801814e:	4605      	mov	r5, r0
 8018150:	2800      	cmp	r0, #0
 8018152:	d0de      	beq.n	8018112 <__submore+0x1a>
 8018154:	eb00 0806 	add.w	r8, r0, r6
 8018158:	4601      	mov	r1, r0
 801815a:	4632      	mov	r2, r6
 801815c:	4640      	mov	r0, r8
 801815e:	f7fb fe8b 	bl	8013e78 <memcpy>
 8018162:	f8c4 8000 	str.w	r8, [r4]
 8018166:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 801816a:	e7e9      	b.n	8018140 <__submore+0x48>

0801816c <__ascii_wctomb>:
 801816c:	b149      	cbz	r1, 8018182 <__ascii_wctomb+0x16>
 801816e:	2aff      	cmp	r2, #255	; 0xff
 8018170:	bf85      	ittet	hi
 8018172:	238a      	movhi	r3, #138	; 0x8a
 8018174:	6003      	strhi	r3, [r0, #0]
 8018176:	700a      	strbls	r2, [r1, #0]
 8018178:	f04f 30ff 	movhi.w	r0, #4294967295
 801817c:	bf98      	it	ls
 801817e:	2001      	movls	r0, #1
 8018180:	4770      	bx	lr
 8018182:	4608      	mov	r0, r1
 8018184:	4770      	bx	lr

08018186 <memmove>:
 8018186:	4288      	cmp	r0, r1
 8018188:	b510      	push	{r4, lr}
 801818a:	eb01 0302 	add.w	r3, r1, r2
 801818e:	d807      	bhi.n	80181a0 <memmove+0x1a>
 8018190:	1e42      	subs	r2, r0, #1
 8018192:	4299      	cmp	r1, r3
 8018194:	d00a      	beq.n	80181ac <memmove+0x26>
 8018196:	f811 4b01 	ldrb.w	r4, [r1], #1
 801819a:	f802 4f01 	strb.w	r4, [r2, #1]!
 801819e:	e7f8      	b.n	8018192 <memmove+0xc>
 80181a0:	4283      	cmp	r3, r0
 80181a2:	d9f5      	bls.n	8018190 <memmove+0xa>
 80181a4:	1881      	adds	r1, r0, r2
 80181a6:	1ad2      	subs	r2, r2, r3
 80181a8:	42d3      	cmn	r3, r2
 80181aa:	d100      	bne.n	80181ae <memmove+0x28>
 80181ac:	bd10      	pop	{r4, pc}
 80181ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80181b2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80181b6:	e7f7      	b.n	80181a8 <memmove+0x22>

080181b8 <__malloc_lock>:
 80181b8:	4770      	bx	lr

080181ba <__malloc_unlock>:
 80181ba:	4770      	bx	lr

080181bc <_realloc_r>:
 80181bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80181be:	4607      	mov	r7, r0
 80181c0:	4614      	mov	r4, r2
 80181c2:	460e      	mov	r6, r1
 80181c4:	b921      	cbnz	r1, 80181d0 <_realloc_r+0x14>
 80181c6:	4611      	mov	r1, r2
 80181c8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80181cc:	f7ff ba06 	b.w	80175dc <_malloc_r>
 80181d0:	b922      	cbnz	r2, 80181dc <_realloc_r+0x20>
 80181d2:	f7ff f9b5 	bl	8017540 <_free_r>
 80181d6:	4625      	mov	r5, r4
 80181d8:	4628      	mov	r0, r5
 80181da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80181dc:	f000 f814 	bl	8018208 <_malloc_usable_size_r>
 80181e0:	42a0      	cmp	r0, r4
 80181e2:	d20f      	bcs.n	8018204 <_realloc_r+0x48>
 80181e4:	4621      	mov	r1, r4
 80181e6:	4638      	mov	r0, r7
 80181e8:	f7ff f9f8 	bl	80175dc <_malloc_r>
 80181ec:	4605      	mov	r5, r0
 80181ee:	2800      	cmp	r0, #0
 80181f0:	d0f2      	beq.n	80181d8 <_realloc_r+0x1c>
 80181f2:	4631      	mov	r1, r6
 80181f4:	4622      	mov	r2, r4
 80181f6:	f7fb fe3f 	bl	8013e78 <memcpy>
 80181fa:	4631      	mov	r1, r6
 80181fc:	4638      	mov	r0, r7
 80181fe:	f7ff f99f 	bl	8017540 <_free_r>
 8018202:	e7e9      	b.n	80181d8 <_realloc_r+0x1c>
 8018204:	4635      	mov	r5, r6
 8018206:	e7e7      	b.n	80181d8 <_realloc_r+0x1c>

08018208 <_malloc_usable_size_r>:
 8018208:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801820c:	1f18      	subs	r0, r3, #4
 801820e:	2b00      	cmp	r3, #0
 8018210:	bfbc      	itt	lt
 8018212:	580b      	ldrlt	r3, [r1, r0]
 8018214:	18c0      	addlt	r0, r0, r3
 8018216:	4770      	bx	lr

08018218 <_init>:
 8018218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801821a:	bf00      	nop
 801821c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801821e:	bc08      	pop	{r3}
 8018220:	469e      	mov	lr, r3
 8018222:	4770      	bx	lr

08018224 <_fini>:
 8018224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018226:	bf00      	nop
 8018228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801822a:	bc08      	pop	{r3}
 801822c:	469e      	mov	lr, r3
 801822e:	4770      	bx	lr
