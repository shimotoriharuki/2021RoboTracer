
2021RoboTrace_1.5.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019458  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000be4  08019618  08019618  00029618  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a1fc  0801a1fc  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  0801a1fc  0801a1fc  0002a1fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a204  0801a204  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801a204  0801a204  0002a204  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a20c  0801a20c  0002a20c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0801a210  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00046ad8  200001e0  0801a3ec  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000c00  20046cb8  0801a3ec  00036cb8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003ae4c  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007be5  00000000  00000000  0006b058  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002318  00000000  00000000  00072c40  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002048  00000000  00000000  00074f58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000354a8  00000000  00000000  00076fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000264e4  00000000  00000000  000ac448  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00110f80  00000000  00000000  000d292c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001e38ac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a690  00000000  00000000  001e3928  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08019600 	.word	0x08019600

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	08019600 	.word	0x08019600

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b972 	b.w	8000fb4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14b      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4615      	mov	r5, r2
 8000cfa:	d967      	bls.n	8000dcc <__udivmoddi4+0xe4>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0720 	rsb	r7, r2, #32
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	ea47 0803 	orr.w	r8, r7, r3
 8000d14:	4094      	lsls	r4, r2
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d20:	fa1f fc85 	uxth.w	ip, r5
 8000d24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x60>
 8000d34:	18eb      	adds	r3, r5, r3
 8000d36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d3a:	f080 811b 	bcs.w	8000f74 <__udivmoddi4+0x28c>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 8118 	bls.w	8000f74 <__udivmoddi4+0x28c>
 8000d44:	3f02      	subs	r7, #2
 8000d46:	442b      	add	r3, r5
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x8c>
 8000d60:	192c      	adds	r4, r5, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d78:	eba4 040c 	sub.w	r4, r4, ip
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa0>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xbe>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80eb 	beq.w	8000f6e <__udivmoddi4+0x286>
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d9e:	4638      	mov	r0, r7
 8000da0:	4639      	mov	r1, r7
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f783 	clz	r7, r3
 8000daa:	2f00      	cmp	r7, #0
 8000dac:	d147      	bne.n	8000e3e <__udivmoddi4+0x156>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd0>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80fa 	bhi.w	8000fac <__udivmoddi4+0x2c4>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa0>
 8000dc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xe8>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 808f 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dda:	1b49      	subs	r1, r1, r5
 8000ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de0:	fa1f f885 	uxth.w	r8, r5
 8000de4:	2701      	movs	r7, #1
 8000de6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dea:	0c23      	lsrs	r3, r4, #16
 8000dec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb08 f10c 	mul.w	r1, r8, ip
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfc:	18eb      	adds	r3, r5, r3
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	f200 80cd 	bhi.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1a59      	subs	r1, r3, r1
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x14c>
 8000e24:	192c      	adds	r4, r5, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x14a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80b6 	bhi.w	8000f9e <__udivmoddi4+0x2b6>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e79f      	b.n	8000d7e <__udivmoddi4+0x96>
 8000e3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e42:	40bb      	lsls	r3, r7
 8000e44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e5c:	4325      	orrs	r5, r4
 8000e5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e62:	0c2c      	lsrs	r4, r5, #16
 8000e64:	fb08 3319 	mls	r3, r8, r9, r3
 8000e68:	fa1f fa8e 	uxth.w	sl, lr
 8000e6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e70:	fb09 f40a 	mul.w	r4, r9, sl
 8000e74:	429c      	cmp	r4, r3
 8000e76:	fa02 f207 	lsl.w	r2, r2, r7
 8000e7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1e 0303 	adds.w	r3, lr, r3
 8000e84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e88:	f080 8087 	bcs.w	8000f9a <__udivmoddi4+0x2b2>
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	f240 8084 	bls.w	8000f9a <__udivmoddi4+0x2b2>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4473      	add	r3, lr
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	b2ad      	uxth	r5, r5
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ea8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eac:	45a2      	cmp	sl, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1e 0404 	adds.w	r4, lr, r4
 8000eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eb8:	d26b      	bcs.n	8000f92 <__udivmoddi4+0x2aa>
 8000eba:	45a2      	cmp	sl, r4
 8000ebc:	d969      	bls.n	8000f92 <__udivmoddi4+0x2aa>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4474      	add	r4, lr
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eca:	eba4 040a 	sub.w	r4, r4, sl
 8000ece:	454c      	cmp	r4, r9
 8000ed0:	46c2      	mov	sl, r8
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	d354      	bcc.n	8000f80 <__udivmoddi4+0x298>
 8000ed6:	d051      	beq.n	8000f7c <__udivmoddi4+0x294>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d069      	beq.n	8000fb0 <__udivmoddi4+0x2c8>
 8000edc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ee0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ee4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	40fc      	lsrs	r4, r7
 8000eec:	ea4c 0505 	orr.w	r5, ip, r5
 8000ef0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ef4:	2700      	movs	r7, #0
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f703 	lsr.w	r7, r0, r3
 8000f00:	4095      	lsls	r5, r2
 8000f02:	fa01 f002 	lsl.w	r0, r1, r2
 8000f06:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f0e:	4338      	orrs	r0, r7
 8000f10:	0c01      	lsrs	r1, r0, #16
 8000f12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f16:	fa1f f885 	uxth.w	r8, r5
 8000f1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb07 f308 	mul.w	r3, r7, r8
 8000f26:	428b      	cmp	r3, r1
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x256>
 8000f2e:	1869      	adds	r1, r5, r1
 8000f30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f34:	d22f      	bcs.n	8000f96 <__udivmoddi4+0x2ae>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d92d      	bls.n	8000f96 <__udivmoddi4+0x2ae>
 8000f3a:	3f02      	subs	r7, #2
 8000f3c:	4429      	add	r1, r5
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	b281      	uxth	r1, r0
 8000f42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f4e:	fb00 f308 	mul.w	r3, r0, r8
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x27e>
 8000f56:	1869      	adds	r1, r5, r1
 8000f58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f5c:	d217      	bcs.n	8000f8e <__udivmoddi4+0x2a6>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d915      	bls.n	8000f8e <__udivmoddi4+0x2a6>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4429      	add	r1, r5
 8000f66:	1ac9      	subs	r1, r1, r3
 8000f68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f6c:	e73b      	b.n	8000de6 <__udivmoddi4+0xfe>
 8000f6e:	4637      	mov	r7, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e709      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000f74:	4607      	mov	r7, r0
 8000f76:	e6e7      	b.n	8000d48 <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x8c>
 8000f7c:	4541      	cmp	r1, r8
 8000f7e:	d2ab      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f84:	eb69 020e 	sbc.w	r2, r9, lr
 8000f88:	3801      	subs	r0, #1
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	e7a4      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f8e:	4660      	mov	r0, ip
 8000f90:	e7e9      	b.n	8000f66 <__udivmoddi4+0x27e>
 8000f92:	4618      	mov	r0, r3
 8000f94:	e795      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f96:	4667      	mov	r7, ip
 8000f98:	e7d1      	b.n	8000f3e <__udivmoddi4+0x256>
 8000f9a:	4681      	mov	r9, r0
 8000f9c:	e77c      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	442c      	add	r4, r5
 8000fa2:	e747      	b.n	8000e34 <__udivmoddi4+0x14c>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	442b      	add	r3, r5
 8000faa:	e72f      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fac:	4638      	mov	r0, r7
 8000fae:	e708      	b.n	8000dc2 <__udivmoddi4+0xda>
 8000fb0:	4637      	mov	r7, r6
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0xa0>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <lcd_cmd>:

extern I2C_HandleTypeDef hi2c1;

#define SLAVEADRESS (0x3E<<1)

void lcd_cmd(uint8_t cmd) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txcmd[2] = { 0x00 , cmd };
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	733b      	strb	r3, [r7, #12]
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txcmd,2,100);
 8000fca:	f107 020c 	add.w	r2, r7, #12
 8000fce:	2364      	movs	r3, #100	; 0x64
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	217c      	movs	r1, #124	; 0x7c
 8000fd6:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <lcd_cmd+0x2c>)
 8000fd8:	f009 ffb6 	bl	800af48 <HAL_I2C_Master_Transmit>
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	200447ac 	.word	0x200447ac

08000fe8 <lcd_data>:

void lcd_data(uint8_t data) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txdata[2] = { 0x40 , data };
 8000ff2:	2340      	movs	r3, #64	; 0x40
 8000ff4:	733b      	strb	r3, [r7, #12]
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txdata,2,100);
 8000ffa:	f107 020c 	add.w	r2, r7, #12
 8000ffe:	2364      	movs	r3, #100	; 0x64
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2302      	movs	r3, #2
 8001004:	217c      	movs	r1, #124	; 0x7c
 8001006:	4803      	ldr	r0, [pc, #12]	; (8001014 <lcd_data+0x2c>)
 8001008:	f009 ff9e 	bl	800af48 <HAL_I2C_Master_Transmit>
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	200447ac 	.word	0x200447ac

08001018 <lcd_init>:

void lcd_init(){
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);//lcd_reset_pin
 800101c:	2201      	movs	r2, #1
 800101e:	2110      	movs	r1, #16
 8001020:	481e      	ldr	r0, [pc, #120]	; (800109c <lcd_init+0x84>)
 8001022:	f009 fe3f 	bl	800aca4 <HAL_GPIO_WritePin>
	HAL_Delay(40);
 8001026:	2028      	movs	r0, #40	; 0x28
 8001028:	f008 fba6 	bl	8009778 <HAL_Delay>
	lcd_cmd(0x38);
 800102c:	2038      	movs	r0, #56	; 0x38
 800102e:	f7ff ffc3 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f008 fba0 	bl	8009778 <HAL_Delay>
	lcd_cmd(0x39);
 8001038:	2039      	movs	r0, #57	; 0x39
 800103a:	f7ff ffbd 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800103e:	2001      	movs	r0, #1
 8001040:	f008 fb9a 	bl	8009778 <HAL_Delay>
	lcd_cmd(0x14);
 8001044:	2014      	movs	r0, #20
 8001046:	f7ff ffb7 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800104a:	2001      	movs	r0, #1
 800104c:	f008 fb94 	bl	8009778 <HAL_Delay>
	lcd_cmd(0x70);
 8001050:	2070      	movs	r0, #112	; 0x70
 8001052:	f7ff ffb1 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001056:	2001      	movs	r0, #1
 8001058:	f008 fb8e 	bl	8009778 <HAL_Delay>
	lcd_cmd(0x56);
 800105c:	2056      	movs	r0, #86	; 0x56
 800105e:	f7ff ffab 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f008 fb88 	bl	8009778 <HAL_Delay>
	lcd_cmd(0x6C);
 8001068:	206c      	movs	r0, #108	; 0x6c
 800106a:	f7ff ffa5 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(200);
 800106e:	20c8      	movs	r0, #200	; 0xc8
 8001070:	f008 fb82 	bl	8009778 <HAL_Delay>
	lcd_cmd(0x38);
 8001074:	2038      	movs	r0, #56	; 0x38
 8001076:	f7ff ff9f 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800107a:	2001      	movs	r0, #1
 800107c:	f008 fb7c 	bl	8009778 <HAL_Delay>
	lcd_cmd(0x0C);
 8001080:	200c      	movs	r0, #12
 8001082:	f7ff ff99 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001086:	2001      	movs	r0, #1
 8001088:	f008 fb76 	bl	8009778 <HAL_Delay>
	lcd_cmd(0x01);
 800108c:	2001      	movs	r0, #1
 800108e:	f7ff ff93 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001092:	2001      	movs	r0, #1
 8001094:	f008 fb70 	bl	8009778 <HAL_Delay>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40020000 	.word	0x40020000

080010a0 <lcd_clear>:

void lcd_clear(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	lcd_cmd(0x01);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff ff87 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010aa:	2001      	movs	r0, #1
 80010ac:	f008 fb64 	bl	8009778 <HAL_Delay>
	lcd_cmd(0x02);
 80010b0:	2002      	movs	r0, #2
 80010b2:	f7ff ff81 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f008 fb5e 	bl	8009778 <HAL_Delay>
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <lcd_locate>:

void lcd_locate(int x, int y) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
	lcd_cmd(0x80 + y*0x40 + x);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	3302      	adds	r3, #2
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	019b      	lsls	r3, r3, #6
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	4413      	add	r3, r2
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff6b 	bl	8000fb8 <lcd_cmd>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <lcd_print>:

void lcd_print(const char *str) {
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
	while(*str != '\0')
 80010f2:	e007      	b.n	8001104 <lcd_print+0x1a>
	{
			lcd_data(*str);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff75 	bl	8000fe8 <lcd_data>
			str++;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3301      	adds	r3, #1
 8001102:	607b      	str	r3, [r7, #4]
	while(*str != '\0')
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f3      	bne.n	80010f4 <lcd_print+0xa>
	}
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <lcd_printf>:

short lcd_printf(const char *format, ...) {
 8001114:	b40f      	push	{r0, r1, r2, r3}
 8001116:	b580      	push	{r7, lr}
 8001118:	b088      	sub	sp, #32
 800111a:	af00      	add	r7, sp, #0
	va_list argptr;
	char lcd_bff[20];
	short ret;

  va_start(argptr, format);
 800111c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001120:	61bb      	str	r3, [r7, #24]
  ret = vsprintf(lcd_bff, format, argptr);
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001128:	4618      	mov	r0, r3
 800112a:	f015 fe3d 	bl	8016da8 <vsiprintf>
 800112e:	4603      	mov	r3, r0
 8001130:	83fb      	strh	r3, [r7, #30]
	va_end(argptr);

	if(ret>0) {
 8001132:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001136:	2b00      	cmp	r3, #0
 8001138:	dd03      	ble.n	8001142 <lcd_printf+0x2e>
		lcd_print(lcd_bff);
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ffd4 	bl	80010ea <lcd_print>
	}

	return ret;
 8001142:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001150:	b004      	add	sp, #16
 8001152:	4770      	bx	lr

08001154 <_ZN3ESC20getCounterPeriodTIM3Ef>:
#define ESC_MAX_TIM10_11 7559

//---private---//

uint16_t ESC::getCounterPeriodTIM3(float ratio)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	ed87 0a00 	vstr	s0, [r7]
	return int((ESC_MAX_TIM3 - ESC_MIN_TIM3) * ratio + ESC_MIN_TIM3);
 8001160:	edd7 7a00 	vldr	s15, [r7]
 8001164:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800118c <_ZN3ESC20getCounterPeriodTIM3Ef+0x38>
 8001168:	ee67 7a87 	vmul.f32	s15, s15, s14
 800116c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001190 <_ZN3ESC20getCounterPeriodTIM3Ef+0x3c>
 8001170:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001174:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001178:	ee17 3a90 	vmov	r3, s15
 800117c:	b29b      	uxth	r3, r3
}
 800117e:	4618      	mov	r0, r3
 8001180:	370c      	adds	r7, #12
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	44ec4000 	.word	0x44ec4000
 8001190:	44ec2000 	.word	0x44ec2000

08001194 <_ZN3ESC24getCounterPeriodTIM10_11Ef>:

uint16_t ESC::getCounterPeriodTIM10_11(float ratio)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	ed87 0a00 	vstr	s0, [r7]
	return int((ESC_MAX_TIM10_11 - ESC_MIN_TIM10_11) * ratio + ESC_MIN_TIM10_11);
 80011a0:	edd7 7a00 	vldr	s15, [r7]
 80011a4:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80011cc <_ZN3ESC24getCounterPeriodTIM10_11Ef+0x38>
 80011a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011ac:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80011d0 <_ZN3ESC24getCounterPeriodTIM10_11Ef+0x3c>
 80011b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80011b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011b8:	ee17 3a90 	vmov	r3, s15
 80011bc:	b29b      	uxth	r3, r3
}
 80011be:	4618      	mov	r0, r3
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	456cd000 	.word	0x456cd000
 80011d0:	456ba000 	.word	0x456ba000

080011d4 <_ZN3ESCC1Ev>:

//---public---//
ESC::ESC()
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
{

}
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	4618      	mov	r0, r3
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
	...

080011ec <_ZN3ESC4initEv>:

void ESC::init()
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80011f4:	2100      	movs	r1, #0
 80011f6:	4813      	ldr	r0, [pc, #76]	; (8001244 <_ZN3ESC4initEv+0x58>)
 80011f8:	f00d fc6e 	bl	800ead8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80011fc:	2104      	movs	r1, #4
 80011fe:	4811      	ldr	r0, [pc, #68]	; (8001244 <_ZN3ESC4initEv+0x58>)
 8001200:	f00d fc6a 	bl	800ead8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 8001204:	2100      	movs	r1, #0
 8001206:	4810      	ldr	r0, [pc, #64]	; (8001248 <_ZN3ESC4initEv+0x5c>)
 8001208:	f00d fc66 	bl	800ead8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 800120c:	2100      	movs	r1, #0
 800120e:	480f      	ldr	r0, [pc, #60]	; (800124c <_ZN3ESC4initEv+0x60>)
 8001210:	f00d fc62 	bl	800ead8 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ESC_MIN_TIM3);
 8001214:	4b0b      	ldr	r3, [pc, #44]	; (8001244 <_ZN3ESC4initEv+0x58>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f240 7261 	movw	r2, #1889	; 0x761
 800121c:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, ESC_MIN_TIM3);
 800121e:	4b09      	ldr	r3, [pc, #36]	; (8001244 <_ZN3ESC4initEv+0x58>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f240 7261 	movw	r2, #1889	; 0x761
 8001226:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 8001228:	4b07      	ldr	r3, [pc, #28]	; (8001248 <_ZN3ESC4initEv+0x5c>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f640 62ba 	movw	r2, #3770	; 0xeba
 8001230:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 8001232:	4b06      	ldr	r3, [pc, #24]	; (800124c <_ZN3ESC4initEv+0x60>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f640 62ba 	movw	r2, #3770	; 0xeba
 800123a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800123c:	bf00      	nop
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	20044898 	.word	0x20044898
 8001248:	20044800 	.word	0x20044800
 800124c:	20044920 	.word	0x20044920

08001250 <_ZN3ESC2onEffff>:

void ESC::on(float FL, float FR, float RL, float RR)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af00      	add	r7, sp, #0
 8001256:	6178      	str	r0, [r7, #20]
 8001258:	ed87 0a04 	vstr	s0, [r7, #16]
 800125c:	edc7 0a03 	vstr	s1, [r7, #12]
 8001260:	ed87 1a02 	vstr	s2, [r7, #8]
 8001264:	edc7 1a01 	vstr	s3, [r7, #4]
	if(FL > 1.0) FL = 1.0;
 8001268:	edd7 7a04 	vldr	s15, [r7, #16]
 800126c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001270:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001278:	dd03      	ble.n	8001282 <_ZN3ESC2onEffff+0x32>
 800127a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800127e:	613b      	str	r3, [r7, #16]
 8001280:	e009      	b.n	8001296 <_ZN3ESC2onEffff+0x46>
	else if(FL < 0) FL = 0;
 8001282:	edd7 7a04 	vldr	s15, [r7, #16]
 8001286:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800128a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800128e:	d502      	bpl.n	8001296 <_ZN3ESC2onEffff+0x46>
 8001290:	f04f 0300 	mov.w	r3, #0
 8001294:	613b      	str	r3, [r7, #16]

	if(FR > 1.0) FR = 1.0;
 8001296:	edd7 7a03 	vldr	s15, [r7, #12]
 800129a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800129e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012a6:	dd03      	ble.n	80012b0 <_ZN3ESC2onEffff+0x60>
 80012a8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	e009      	b.n	80012c4 <_ZN3ESC2onEffff+0x74>
	else if(FR < 0) FR = 0;
 80012b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80012b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012bc:	d502      	bpl.n	80012c4 <_ZN3ESC2onEffff+0x74>
 80012be:	f04f 0300 	mov.w	r3, #0
 80012c2:	60fb      	str	r3, [r7, #12]

	if(RL > 1.0) RL = 1.0;
 80012c4:	edd7 7a02 	vldr	s15, [r7, #8]
 80012c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012d4:	dd03      	ble.n	80012de <_ZN3ESC2onEffff+0x8e>
 80012d6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80012da:	60bb      	str	r3, [r7, #8]
 80012dc:	e009      	b.n	80012f2 <_ZN3ESC2onEffff+0xa2>
	else if(RL < 0) RL = 0;
 80012de:	edd7 7a02 	vldr	s15, [r7, #8]
 80012e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ea:	d502      	bpl.n	80012f2 <_ZN3ESC2onEffff+0xa2>
 80012ec:	f04f 0300 	mov.w	r3, #0
 80012f0:	60bb      	str	r3, [r7, #8]

	if(RR > 1.0) RR = 1.0;
 80012f2:	edd7 7a01 	vldr	s15, [r7, #4]
 80012f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001302:	dd03      	ble.n	800130c <_ZN3ESC2onEffff+0xbc>
 8001304:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001308:	607b      	str	r3, [r7, #4]
 800130a:	e009      	b.n	8001320 <_ZN3ESC2onEffff+0xd0>
	else if(RR < 0) RR = 0;
 800130c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001310:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001318:	d502      	bpl.n	8001320 <_ZN3ESC2onEffff+0xd0>
 800131a:	f04f 0300 	mov.w	r3, #0
 800131e:	607b      	str	r3, [r7, #4]

	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, getCounterPeriodTIM3(FL));
 8001320:	ed97 0a04 	vldr	s0, [r7, #16]
 8001324:	6978      	ldr	r0, [r7, #20]
 8001326:	f7ff ff15 	bl	8001154 <_ZN3ESC20getCounterPeriodTIM3Ef>
 800132a:	4603      	mov	r3, r0
 800132c:	461a      	mov	r2, r3
 800132e:	4b12      	ldr	r3, [pc, #72]	; (8001378 <_ZN3ESC2onEffff+0x128>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, getCounterPeriodTIM10_11(FR));
 8001334:	ed97 0a03 	vldr	s0, [r7, #12]
 8001338:	6978      	ldr	r0, [r7, #20]
 800133a:	f7ff ff2b 	bl	8001194 <_ZN3ESC24getCounterPeriodTIM10_11Ef>
 800133e:	4603      	mov	r3, r0
 8001340:	461a      	mov	r2, r3
 8001342:	4b0e      	ldr	r3, [pc, #56]	; (800137c <_ZN3ESC2onEffff+0x12c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, getCounterPeriodTIM3(RL));
 8001348:	ed97 0a02 	vldr	s0, [r7, #8]
 800134c:	6978      	ldr	r0, [r7, #20]
 800134e:	f7ff ff01 	bl	8001154 <_ZN3ESC20getCounterPeriodTIM3Ef>
 8001352:	4603      	mov	r3, r0
 8001354:	461a      	mov	r2, r3
 8001356:	4b08      	ldr	r3, [pc, #32]	; (8001378 <_ZN3ESC2onEffff+0x128>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, getCounterPeriodTIM10_11(RR));
 800135c:	ed97 0a01 	vldr	s0, [r7, #4]
 8001360:	6978      	ldr	r0, [r7, #20]
 8001362:	f7ff ff17 	bl	8001194 <_ZN3ESC24getCounterPeriodTIM10_11Ef>
 8001366:	4603      	mov	r3, r0
 8001368:	461a      	mov	r2, r3
 800136a:	4b05      	ldr	r3, [pc, #20]	; (8001380 <_ZN3ESC2onEffff+0x130>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001370:	bf00      	nop
 8001372:	3718      	adds	r7, #24
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	20044898 	.word	0x20044898
 800137c:	20044920 	.word	0x20044920
 8001380:	20044800 	.word	0x20044800

08001384 <_ZN3ESC3offEv>:

void ESC::off()
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, ESC_MIN_TIM3);
 800138c:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <_ZN3ESC3offEv+0x3c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f240 7261 	movw	r2, #1889	; 0x761
 8001394:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, ESC_MIN_TIM3);
 8001396:	4b0a      	ldr	r3, [pc, #40]	; (80013c0 <_ZN3ESC3offEv+0x3c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f240 7261 	movw	r2, #1889	; 0x761
 800139e:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim10, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 80013a0:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <_ZN3ESC3offEv+0x40>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f640 62ba 	movw	r2, #3770	; 0xeba
 80013a8:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim11, TIM_CHANNEL_1, ESC_MIN_TIM10_11);
 80013aa:	4b07      	ldr	r3, [pc, #28]	; (80013c8 <_ZN3ESC3offEv+0x44>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f640 62ba 	movw	r2, #3770	; 0xeba
 80013b2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80013b4:	bf00      	nop
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	20044898 	.word	0x20044898
 80013c4:	20044800 	.word	0x20044800
 80013c8:	20044920 	.word	0x20044920

080013cc <_ZN7EncoderC1Ev>:

float monitor_distance;
float monitor_cnt_l;
float monitor_cnt_l_lpf;

Encoder::Encoder() : cnt_l_(0), cnt_r_(0), distance_(0), total_cnt_l_(0), total_cnt_r_(0), distance_10mm_(0), total_distance_(0), cross_line_ignore_distance_(0){}
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f04f 0200 	mov.w	r2, #0
 80013e2:	605a      	str	r2, [r3, #4]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f04f 0200 	mov.w	r2, #0
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f04f 0200 	mov.w	r2, #0
 80013f2:	60da      	str	r2, [r3, #12]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f04f 0200 	mov.w	r2, #0
 80013fa:	611a      	str	r2, [r3, #16]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f04f 0200 	mov.w	r2, #0
 8001402:	615a      	str	r2, [r3, #20]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f04f 0200 	mov.w	r2, #0
 800140a:	619a      	str	r2, [r3, #24]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f04f 0200 	mov.w	r2, #0
 8001412:	61da      	str	r2, [r3, #28]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	4618      	mov	r0, r3
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
	...

08001424 <_ZN7Encoder4initEv>:

void Encoder::init()
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 800142c:	213c      	movs	r1, #60	; 0x3c
 800142e:	4809      	ldr	r0, [pc, #36]	; (8001454 <_ZN7Encoder4initEv+0x30>)
 8001430:	f00d fc22 	bl	800ec78 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 8001434:	213c      	movs	r1, #60	; 0x3c
 8001436:	4808      	ldr	r0, [pc, #32]	; (8001458 <_ZN7Encoder4initEv+0x34>)
 8001438:	f00d fc1e 	bl	800ec78 <HAL_TIM_Encoder_Start>
	TIM1 -> CNT = CNT_OFFSET;
 800143c:	4b07      	ldr	r3, [pc, #28]	; (800145c <_ZN7Encoder4initEv+0x38>)
 800143e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001442:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 8001444:	4b06      	ldr	r3, [pc, #24]	; (8001460 <_ZN7Encoder4initEv+0x3c>)
 8001446:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800144a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800144c:	bf00      	nop
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	20044a00 	.word	0x20044a00
 8001458:	200446e4 	.word	0x200446e4
 800145c:	40010000 	.word	0x40010000
 8001460:	40010400 	.word	0x40010400
 8001464:	00000000 	.word	0x00000000

08001468 <_ZN7Encoder6updateEv>:

void Encoder::update()
{
 8001468:	b5b0      	push	{r4, r5, r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
	static float pre_cnt_l, pre_cnt_r;
	float cnt_l = (float(CNT_OFFSET) - float(TIM1 -> CNT)) * CORRECTION_COEFFICIENT;
 8001470:	4b69      	ldr	r3, [pc, #420]	; (8001618 <_ZN7Encoder6updateEv+0x1b0>)
 8001472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001474:	ee07 3a90 	vmov	s15, r3
 8001478:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800147c:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800161c <_ZN7Encoder6updateEv+0x1b4>
 8001480:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001484:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8001620 <_ZN7Encoder6updateEv+0x1b8>
 8001488:	ee67 7a87 	vmul.f32	s15, s15, s14
 800148c:	edc7 7a03 	vstr	s15, [r7, #12]
	float cnt_r = (float(TIM8 -> CNT) - float(CNT_OFFSET)) * CORRECTION_COEFFICIENT;
 8001490:	4b64      	ldr	r3, [pc, #400]	; (8001624 <_ZN7Encoder6updateEv+0x1bc>)
 8001492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001494:	ee07 3a90 	vmov	s15, r3
 8001498:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800149c:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 800161c <_ZN7Encoder6updateEv+0x1b4>
 80014a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80014a4:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8001620 <_ZN7Encoder6updateEv+0x1b8>
 80014a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014ac:	edc7 7a02 	vstr	s15, [r7, #8]
	monitor_cnt_l = cnt_l;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	4a5d      	ldr	r2, [pc, #372]	; (8001628 <_ZN7Encoder6updateEv+0x1c0>)
 80014b4:	6013      	str	r3, [r2, #0]

	cnt_l_ = ((R_ENC)*(cnt_l) + (1.0 - (R_ENC))* (pre_cnt_l)); // lowpath filter
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff f85d 	bl	8000578 <__aeabi_f2d>
 80014be:	a350      	add	r3, pc, #320	; (adr r3, 8001600 <_ZN7Encoder6updateEv+0x198>)
 80014c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c4:	f7ff f8b0 	bl	8000628 <__aeabi_dmul>
 80014c8:	4603      	mov	r3, r0
 80014ca:	460c      	mov	r4, r1
 80014cc:	4625      	mov	r5, r4
 80014ce:	461c      	mov	r4, r3
 80014d0:	4b56      	ldr	r3, [pc, #344]	; (800162c <_ZN7Encoder6updateEv+0x1c4>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff f84f 	bl	8000578 <__aeabi_f2d>
 80014da:	a34b      	add	r3, pc, #300	; (adr r3, 8001608 <_ZN7Encoder6updateEv+0x1a0>)
 80014dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e0:	f7ff f8a2 	bl	8000628 <__aeabi_dmul>
 80014e4:	4602      	mov	r2, r0
 80014e6:	460b      	mov	r3, r1
 80014e8:	4620      	mov	r0, r4
 80014ea:	4629      	mov	r1, r5
 80014ec:	f7fe fee6 	bl	80002bc <__adddf3>
 80014f0:	4603      	mov	r3, r0
 80014f2:	460c      	mov	r4, r1
 80014f4:	4618      	mov	r0, r3
 80014f6:	4621      	mov	r1, r4
 80014f8:	f7ff fb8e 	bl	8000c18 <__aeabi_d2f>
 80014fc:	4602      	mov	r2, r0
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	601a      	str	r2, [r3, #0]
	cnt_r_ = ((R_ENC)*(cnt_r) + (1.0 - (R_ENC))* (pre_cnt_r)); // lowpath filter
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff f837 	bl	8000578 <__aeabi_f2d>
 800150a:	a33d      	add	r3, pc, #244	; (adr r3, 8001600 <_ZN7Encoder6updateEv+0x198>)
 800150c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001510:	f7ff f88a 	bl	8000628 <__aeabi_dmul>
 8001514:	4603      	mov	r3, r0
 8001516:	460c      	mov	r4, r1
 8001518:	4625      	mov	r5, r4
 800151a:	461c      	mov	r4, r3
 800151c:	4b44      	ldr	r3, [pc, #272]	; (8001630 <_ZN7Encoder6updateEv+0x1c8>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff f829 	bl	8000578 <__aeabi_f2d>
 8001526:	a338      	add	r3, pc, #224	; (adr r3, 8001608 <_ZN7Encoder6updateEv+0x1a0>)
 8001528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800152c:	f7ff f87c 	bl	8000628 <__aeabi_dmul>
 8001530:	4602      	mov	r2, r0
 8001532:	460b      	mov	r3, r1
 8001534:	4620      	mov	r0, r4
 8001536:	4629      	mov	r1, r5
 8001538:	f7fe fec0 	bl	80002bc <__adddf3>
 800153c:	4603      	mov	r3, r0
 800153e:	460c      	mov	r4, r1
 8001540:	4618      	mov	r0, r3
 8001542:	4621      	mov	r1, r4
 8001544:	f7ff fb68 	bl	8000c18 <__aeabi_d2f>
 8001548:	4602      	mov	r2, r0
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	605a      	str	r2, [r3, #4]
	monitor_cnt_l_lpf = cnt_l_;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a38      	ldr	r2, [pc, #224]	; (8001634 <_ZN7Encoder6updateEv+0x1cc>)
 8001554:	6013      	str	r3, [r2, #0]

	pre_cnt_l = cnt_l_;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a34      	ldr	r2, [pc, #208]	; (800162c <_ZN7Encoder6updateEv+0x1c4>)
 800155c:	6013      	str	r3, [r2, #0]
	pre_cnt_r = cnt_r_;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	4a33      	ldr	r2, [pc, #204]	; (8001630 <_ZN7Encoder6updateEv+0x1c8>)
 8001564:	6013      	str	r3, [r2, #0]

	//total_cnt_l_ += cnt_l_;
	//total_cnt_r_ += cnt_r_;

	//distance_ = distance_ + DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
	distance_ = DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	ed93 7a00 	vldr	s14, [r3]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001572:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001576:	ee17 0a90 	vmov	r0, s15
 800157a:	f7fe fffd 	bl	8000578 <__aeabi_f2d>
 800157e:	a324      	add	r3, pc, #144	; (adr r3, 8001610 <_ZN7Encoder6updateEv+0x1a8>)
 8001580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001584:	f7ff f850 	bl	8000628 <__aeabi_dmul>
 8001588:	4603      	mov	r3, r0
 800158a:	460c      	mov	r4, r1
 800158c:	4618      	mov	r0, r3
 800158e:	4621      	mov	r1, r4
 8001590:	f04f 0200 	mov.w	r2, #0
 8001594:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001598:	f7ff f970 	bl	800087c <__aeabi_ddiv>
 800159c:	4603      	mov	r3, r0
 800159e:	460c      	mov	r4, r1
 80015a0:	4618      	mov	r0, r3
 80015a2:	4621      	mov	r1, r4
 80015a4:	f7ff fb38 	bl	8000c18 <__aeabi_d2f>
 80015a8:	4602      	mov	r2, r0
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	609a      	str	r2, [r3, #8]
	distance_10mm_ += distance_;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	ed93 7a05 	vldr	s14, [r3, #20]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	edd3 7a02 	vldr	s15, [r3, #8]
 80015ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	edc3 7a05 	vstr	s15, [r3, #20]
	total_distance_ += distance_;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	ed93 7a06 	vldr	s14, [r3, #24]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	edd3 7a02 	vldr	s15, [r3, #8]
 80015d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	edc3 7a06 	vstr	s15, [r3, #24]
	cross_line_ignore_distance_ += distance_;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	ed93 7a07 	vldr	s14, [r3, #28]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	edd3 7a02 	vldr	s15, [r3, #8]
 80015e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	edc3 7a07 	vstr	s15, [r3, #28]
	monitor_distance = distance_10mm_;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	695b      	ldr	r3, [r3, #20]
 80015f4:	4a10      	ldr	r2, [pc, #64]	; (8001638 <_ZN7Encoder6updateEv+0x1d0>)
 80015f6:	6013      	str	r3, [r2, #0]
}
 80015f8:	bf00      	nop
 80015fa:	3710      	adds	r7, #16
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bdb0      	pop	{r4, r5, r7, pc}
 8001600:	9999999a 	.word	0x9999999a
 8001604:	3fa99999 	.word	0x3fa99999
 8001608:	66666666 	.word	0x66666666
 800160c:	3fee6666 	.word	0x3fee6666
 8001610:	ce73a049 	.word	0xce73a049
 8001614:	3f77a3f6 	.word	0x3f77a3f6
 8001618:	40010000 	.word	0x40010000
 800161c:	47000000 	.word	0x47000000
 8001620:	3f912547 	.word	0x3f912547
 8001624:	40010400 	.word	0x40010400
 8001628:	20000200 	.word	0x20000200
 800162c:	20000208 	.word	0x20000208
 8001630:	2000020c 	.word	0x2000020c
 8001634:	20000204 	.word	0x20000204
 8001638:	200001fc 	.word	0x200001fc

0800163c <_ZN7Encoder5clearEv>:

void Encoder::clear()
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
	cnt_l_ = 0;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	f04f 0200 	mov.w	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
	cnt_r_ = 0;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	f04f 0200 	mov.w	r2, #0
 8001652:	605a      	str	r2, [r3, #4]
	TIM1 -> CNT = CNT_OFFSET;
 8001654:	4b08      	ldr	r3, [pc, #32]	; (8001678 <_ZN7Encoder5clearEv+0x3c>)
 8001656:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800165a:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 800165c:	4b07      	ldr	r3, [pc, #28]	; (800167c <_ZN7Encoder5clearEv+0x40>)
 800165e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001662:	625a      	str	r2, [r3, #36]	; 0x24
	distance_ = 0;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f04f 0200 	mov.w	r2, #0
 800166a:	609a      	str	r2, [r3, #8]
}
 800166c:	bf00      	nop
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	40010000 	.word	0x40010000
 800167c:	40010400 	.word	0x40010400

08001680 <_ZN7Encoder6getCntERfS0_>:

void Encoder::getCnt(float &cnt_l, float &cnt_r)
{
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	60b9      	str	r1, [r7, #8]
 800168a:	607a      	str	r2, [r7, #4]
	cnt_l = cnt_l_;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	601a      	str	r2, [r3, #0]
	cnt_r = cnt_r_;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	685a      	ldr	r2, [r3, #4]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	601a      	str	r2, [r3, #0]
}
 800169c:	bf00      	nop
 800169e:	3714      	adds	r7, #20
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <_ZN7Encoder11getDistanceEv>:

float Encoder::getDistance()
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
	return distance_;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	ee07 3a90 	vmov	s15, r3
}
 80016b8:	eeb0 0a67 	vmov.f32	s0, s15
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr

080016c6 <_ZN7Encoder15getDistance10mmEv>:

float Encoder::getDistance10mm()
{
 80016c6:	b480      	push	{r7}
 80016c8:	b083      	sub	sp, #12
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
	return distance_10mm_;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	695b      	ldr	r3, [r3, #20]
 80016d2:	ee07 3a90 	vmov	s15, r3
}
 80016d6:	eeb0 0a67 	vmov.f32	s0, s15
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <_ZN7Encoder16getTotalDistanceEv>:

float Encoder::getTotalDistance()
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
	return total_distance_;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	ee07 3a90 	vmov	s15, r3
}
 80016f4:	eeb0 0a67 	vmov.f32	s0, s15
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr

08001702 <_ZN7Encoder16setTotalDistanceEf>:

void Encoder::setTotalDistance(float true_distance){
 8001702:	b480      	push	{r7}
 8001704:	b083      	sub	sp, #12
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
 800170a:	ed87 0a00 	vstr	s0, [r7]
	total_distance_ = true_distance;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	683a      	ldr	r2, [r7, #0]
 8001712:	619a      	str	r2, [r3, #24]
}
 8001714:	bf00      	nop
 8001716:	370c      	adds	r7, #12
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <_ZN7Encoder17clearDistance10mmEv>:
	return (total_cnt_l_ + total_cnt_r_) / 2;
}
*/

void Encoder::clearDistance10mm()
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
	//total_cnt_l_ = 0;
	//total_cnt_r_ = 0;
	distance_10mm_ = 0;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f04f 0200 	mov.w	r2, #0
 800172e:	615a      	str	r2, [r3, #20]
}
 8001730:	bf00      	nop
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <_ZN7Encoder18clearTotalDistanceEv>:

void Encoder::clearTotalDistance()
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
	total_distance_ = 0;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f04f 0200 	mov.w	r2, #0
 800174a:	619a      	str	r2, [r3, #24]
}
 800174c:	bf00      	nop
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <_ZN7Encoder26getCrossLineIgnoreDistanceEv>:

float Encoder::getCrossLineIgnoreDistance()
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
	return cross_line_ignore_distance_;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	69db      	ldr	r3, [r3, #28]
 8001764:	ee07 3a90 	vmov	s15, r3
}
 8001768:	eeb0 0a67 	vmov.f32	s0, s15
 800176c:	370c      	adds	r7, #12
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr

08001776 <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>:

void Encoder::clearCrossLineIgnoreDistance()
{
 8001776:	b480      	push	{r7}
 8001778:	b083      	sub	sp, #12
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
	cross_line_ignore_distance_ = 0;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	f04f 0200 	mov.w	r2, #0
 8001784:	61da      	str	r2, [r3, #28]
}
 8001786:	bf00      	nop
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <user_fopen>:
//* 役割　：　fopenする
//* 引数　：　char, float *: short　: フォルダ名、ファイル名
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fopen(const char *p_folder_name, const char *p_file_name){
 8001792:	b580      	push	{r7, lr}
 8001794:	b084      	sub	sp, #16
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
 800179a:	6039      	str	r1, [r7, #0]

	FRESULT ret = 0;
 800179c:	2300      	movs	r3, #0
 800179e:	73fb      	strb	r3, [r7, #15]

	create_path(p_folder_name, p_file_name);
 80017a0:	6839      	ldr	r1, [r7, #0]
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f000 f9d8 	bl	8001b58 <create_path>

	fopen_folder_and_file();	//書き込むファイルを選択
 80017a8:	f000 f9ec 	bl	8001b84 <fopen_folder_and_file>

	return ret;
 80017ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3710      	adds	r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
	...

080017b8 <user_fclose>:
//* 役割　：　fcloseする
//* 引数　：　void
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fclose(){
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 80017be:	2300      	movs	r3, #0
 80017c0:	71fb      	strb	r3, [r7, #7]

	f_close(&fil);	//ファイル閉じる
 80017c2:	4804      	ldr	r0, [pc, #16]	; (80017d4 <user_fclose+0x1c>)
 80017c4:	f011 ffb2 	bl	801372c <f_close>

	return ret;
 80017c8:	79fb      	ldrb	r3, [r7, #7]
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	200435f0 	.word	0x200435f0

080017d8 <sd_write_float>:
//* 役割　：　SDに書き込む
//* 引数　：　short, float *, char : 変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_float(short size, float *data, char state){
 80017d8:	b590      	push	{r4, r7, lr}
 80017da:	b087      	sub	sp, #28
 80017dc:	af02      	add	r7, sp, #8
 80017de:	4603      	mov	r3, r0
 80017e0:	6039      	str	r1, [r7, #0]
 80017e2:	80fb      	strh	r3, [r7, #6]
 80017e4:	4613      	mov	r3, r2
 80017e6:	717b      	strb	r3, [r7, #5]
	FRESULT ret = 0;
 80017e8:	2300      	movs	r3, #0
 80017ea:	737b      	strb	r3, [r7, #13]

	for(short i = 0 ; i < size; i++){
 80017ec:	2300      	movs	r3, #0
 80017ee:	81fb      	strh	r3, [r7, #14]
 80017f0:	e030      	b.n	8001854 <sd_write_float+0x7c>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 80017f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	683a      	ldr	r2, [r7, #0]
 80017fa:	4413      	add	r3, r2
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4618      	mov	r0, r3
 8001800:	f7fe feba 	bl	8000578 <__aeabi_f2d>
 8001804:	4603      	mov	r3, r0
 8001806:	460c      	mov	r4, r1
 8001808:	e9cd 3400 	strd	r3, r4, [sp]
 800180c:	4a17      	ldr	r2, [pc, #92]	; (800186c <sd_write_float+0x94>)
 800180e:	2180      	movs	r1, #128	; 0x80
 8001810:	4817      	ldr	r0, [pc, #92]	; (8001870 <sd_write_float+0x98>)
 8001812:	f014 fb7d 	bl	8015f10 <sniprintf>

		if(state == ADD_WRITE){
 8001816:	797b      	ldrb	r3, [r7, #5]
 8001818:	2b01      	cmp	r3, #1
 800181a:	d106      	bne.n	800182a <sd_write_float+0x52>
			f_lseek(&fil, f_size(&fil));	//ファイルの最後に移動
 800181c:	4b15      	ldr	r3, [pc, #84]	; (8001874 <sd_write_float+0x9c>)
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	4619      	mov	r1, r3
 8001822:	4814      	ldr	r0, [pc, #80]	; (8001874 <sd_write_float+0x9c>)
 8001824:	f011 fff6 	bl	8013814 <f_lseek>
 8001828:	e003      	b.n	8001832 <sd_write_float+0x5a>
		}
		else{
			f_lseek(&fil, 0);	//ファイルの最初に移動
 800182a:	2100      	movs	r1, #0
 800182c:	4811      	ldr	r0, [pc, #68]	; (8001874 <sd_write_float+0x9c>)
 800182e:	f011 fff1 	bl	8013814 <f_lseek>
		}

		f_write(&fil, buffer, strlen(buffer), &bw);	//書き込む
 8001832:	480f      	ldr	r0, [pc, #60]	; (8001870 <sd_write_float+0x98>)
 8001834:	f7fe fce4 	bl	8000200 <strlen>
 8001838:	4602      	mov	r2, r0
 800183a:	4b0f      	ldr	r3, [pc, #60]	; (8001878 <sd_write_float+0xa0>)
 800183c:	490c      	ldr	r1, [pc, #48]	; (8001870 <sd_write_float+0x98>)
 800183e:	480d      	ldr	r0, [pc, #52]	; (8001874 <sd_write_float+0x9c>)
 8001840:	f011 fd5f 	bl	8013302 <f_write>

		bufclear();	//書き込み用のバッファをクリア
 8001844:	f000 f9b8 	bl	8001bb8 <bufclear>
	for(short i = 0 ; i < size; i++){
 8001848:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800184c:	b29b      	uxth	r3, r3
 800184e:	3301      	adds	r3, #1
 8001850:	b29b      	uxth	r3, r3
 8001852:	81fb      	strh	r3, [r7, #14]
 8001854:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001858:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800185c:	429a      	cmp	r2, r3
 800185e:	dbc8      	blt.n	80017f2 <sd_write_float+0x1a>
	}
	return ret;
 8001860:	7b7b      	ldrb	r3, [r7, #13]
}
 8001862:	4618      	mov	r0, r3
 8001864:	3714      	adds	r7, #20
 8001866:	46bd      	mov	sp, r7
 8001868:	bd90      	pop	{r4, r7, pc}
 800186a:	bf00      	nop
 800186c:	08019618 	.word	0x08019618
 8001870:	20043560 	.word	0x20043560
 8001874:	200435f0 	.word	0x200435f0
 8001878:	200435e0 	.word	0x200435e0

0800187c <sd_write_array_float>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data, char state){
 800187c:	b590      	push	{r4, r7, lr}
 800187e:	b089      	sub	sp, #36	; 0x24
 8001880:	af02      	add	r7, sp, #8
 8001882:	60f8      	str	r0, [r7, #12]
 8001884:	60b9      	str	r1, [r7, #8]
 8001886:	603b      	str	r3, [r7, #0]
 8001888:	4613      	mov	r3, r2
 800188a:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 800188c:	2300      	movs	r3, #0
 800188e:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 8001890:	68b9      	ldr	r1, [r7, #8]
 8001892:	68f8      	ldr	r0, [r7, #12]
 8001894:	f000 f960 	bl	8001b58 <create_path>

	if(state == OVER_WRITE){
 8001898:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800189c:	2b00      	cmp	r3, #0
 800189e:	d108      	bne.n	80018b2 <sd_write_array_float+0x36>
		f_chdir(dirpath);
 80018a0:	4822      	ldr	r0, [pc, #136]	; (800192c <sd_write_array_float+0xb0>)
 80018a2:	f011 ff6d 	bl	8013780 <f_chdir>
		f_unlink(filepath);	//	一回消す
 80018a6:	4822      	ldr	r0, [pc, #136]	; (8001930 <sd_write_array_float+0xb4>)
 80018a8:	f012 f9d8 	bl	8013c5c <f_unlink>
		f_chdir("..");
 80018ac:	4821      	ldr	r0, [pc, #132]	; (8001934 <sd_write_array_float+0xb8>)
 80018ae:	f011 ff67 	bl	8013780 <f_chdir>
	}

	fopen_folder_and_file();	//	書き込むファイルを選択
 80018b2:	f000 f967 	bl	8001b84 <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 80018b6:	2300      	movs	r3, #0
 80018b8:	82fb      	strh	r3, [r7, #22]
 80018ba:	e028      	b.n	800190e <sd_write_array_float+0x92>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 80018bc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	683a      	ldr	r2, [r7, #0]
 80018c4:	4413      	add	r3, r2
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7fe fe55 	bl	8000578 <__aeabi_f2d>
 80018ce:	4603      	mov	r3, r0
 80018d0:	460c      	mov	r4, r1
 80018d2:	e9cd 3400 	strd	r3, r4, [sp]
 80018d6:	4a18      	ldr	r2, [pc, #96]	; (8001938 <sd_write_array_float+0xbc>)
 80018d8:	2180      	movs	r1, #128	; 0x80
 80018da:	4818      	ldr	r0, [pc, #96]	; (800193c <sd_write_array_float+0xc0>)
 80018dc:	f014 fb18 	bl	8015f10 <sniprintf>

		f_lseek(&fil, f_size(&fil));	//	ファイルの最後に移動
 80018e0:	4b17      	ldr	r3, [pc, #92]	; (8001940 <sd_write_array_float+0xc4>)
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	4619      	mov	r1, r3
 80018e6:	4816      	ldr	r0, [pc, #88]	; (8001940 <sd_write_array_float+0xc4>)
 80018e8:	f011 ff94 	bl	8013814 <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//	書き込む
 80018ec:	4813      	ldr	r0, [pc, #76]	; (800193c <sd_write_array_float+0xc0>)
 80018ee:	f7fe fc87 	bl	8000200 <strlen>
 80018f2:	4602      	mov	r2, r0
 80018f4:	4b13      	ldr	r3, [pc, #76]	; (8001944 <sd_write_array_float+0xc8>)
 80018f6:	4911      	ldr	r1, [pc, #68]	; (800193c <sd_write_array_float+0xc0>)
 80018f8:	4811      	ldr	r0, [pc, #68]	; (8001940 <sd_write_array_float+0xc4>)
 80018fa:	f011 fd02 	bl	8013302 <f_write>

		bufclear();	//	書き込み用のバッファをクリア
 80018fe:	f000 f95b 	bl	8001bb8 <bufclear>
	for(short i = 0 ; i < size; i++){
 8001902:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001906:	b29b      	uxth	r3, r3
 8001908:	3301      	adds	r3, #1
 800190a:	b29b      	uxth	r3, r3
 800190c:	82fb      	strh	r3, [r7, #22]
 800190e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001912:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001916:	429a      	cmp	r2, r3
 8001918:	dbd0      	blt.n	80018bc <sd_write_array_float+0x40>
	}

	f_close(&fil);	//	ファイル閉じる
 800191a:	4809      	ldr	r0, [pc, #36]	; (8001940 <sd_write_array_float+0xc4>)
 800191c:	f011 ff06 	bl	801372c <f_close>

	return ret;
 8001920:	7d7b      	ldrb	r3, [r7, #21]
}
 8001922:	4618      	mov	r0, r3
 8001924:	371c      	adds	r7, #28
 8001926:	46bd      	mov	sp, r7
 8001928:	bd90      	pop	{r4, r7, pc}
 800192a:	bf00      	nop
 800192c:	20043460 	.word	0x20043460
 8001930:	20042320 	.word	0x20042320
 8001934:	08019634 	.word	0x08019634
 8001938:	08019618 	.word	0x08019618
 800193c:	20043560 	.word	0x20043560
 8001940:	200435f0 	.word	0x200435f0
 8001944:	200435e0 	.word	0x200435e0

08001948 <sd_read_array_float>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, float *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data){
 8001948:	b580      	push	{r7, lr}
 800194a:	b086      	sub	sp, #24
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	603b      	str	r3, [r7, #0]
 8001954:	4613      	mov	r3, r2
 8001956:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001958:	2300      	movs	r3, #0
 800195a:	757b      	strb	r3, [r7, #21]
	short i = 0;
 800195c:	2300      	movs	r3, #0
 800195e:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 8001960:	68b9      	ldr	r1, [r7, #8]
 8001962:	68f8      	ldr	r0, [r7, #12]
 8001964:	f000 f8f8 	bl	8001b58 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 8001968:	f000 f90c 	bl	8001b84 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 800196c:	e019      	b.n	80019a2 <sd_read_array_float+0x5a>
		sscanf(buffer, "%f", data + i);
 800196e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	683a      	ldr	r2, [r7, #0]
 8001976:	4413      	add	r3, r2
 8001978:	461a      	mov	r2, r3
 800197a:	4913      	ldr	r1, [pc, #76]	; (80019c8 <sd_read_array_float+0x80>)
 800197c:	4813      	ldr	r0, [pc, #76]	; (80019cc <sd_read_array_float+0x84>)
 800197e:	f014 fb1b 	bl	8015fb8 <siscanf>
		i++;
 8001982:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001986:	b29b      	uxth	r3, r3
 8001988:	3301      	adds	r3, #1
 800198a:	b29b      	uxth	r3, r3
 800198c:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 800198e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001992:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001996:	429a      	cmp	r2, r3
 8001998:	db03      	blt.n	80019a2 <sd_read_array_float+0x5a>
 800199a:	88fb      	ldrh	r3, [r7, #6]
 800199c:	3b01      	subs	r3, #1
 800199e:	b29b      	uxth	r3, r3
 80019a0:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80019a2:	4a0b      	ldr	r2, [pc, #44]	; (80019d0 <sd_read_array_float+0x88>)
 80019a4:	2180      	movs	r1, #128	; 0x80
 80019a6:	4809      	ldr	r0, [pc, #36]	; (80019cc <sd_read_array_float+0x84>)
 80019a8:	f012 fb36 	bl	8014018 <f_gets>
 80019ac:	4603      	mov	r3, r0
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d1dd      	bne.n	800196e <sd_read_array_float+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 80019b2:	f000 f901 	bl	8001bb8 <bufclear>

	f_close(&fil);	//ファイル閉じる
 80019b6:	4806      	ldr	r0, [pc, #24]	; (80019d0 <sd_read_array_float+0x88>)
 80019b8:	f011 feb8 	bl	801372c <f_close>

	return ret;
 80019bc:	7d7b      	ldrb	r3, [r7, #21]
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3718      	adds	r7, #24
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	08019624 	.word	0x08019624
 80019cc:	20043560 	.word	0x20043560
 80019d0:	200435f0 	.word	0x200435f0

080019d4 <sd_read_array_double>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, double *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_double(const char *p_folder_name, const char *p_file_name, short size, double *data){
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	60b9      	str	r1, [r7, #8]
 80019de:	603b      	str	r3, [r7, #0]
 80019e0:	4613      	mov	r3, r2
 80019e2:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 80019e4:	2300      	movs	r3, #0
 80019e6:	757b      	strb	r3, [r7, #21]
	short i = 0;
 80019e8:	2300      	movs	r3, #0
 80019ea:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 80019ec:	68b9      	ldr	r1, [r7, #8]
 80019ee:	68f8      	ldr	r0, [r7, #12]
 80019f0:	f000 f8b2 	bl	8001b58 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 80019f4:	f000 f8c6 	bl	8001b84 <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 80019f8:	e019      	b.n	8001a2e <sd_read_array_double+0x5a>
		sscanf(buffer, "%lf", data + i);
 80019fa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80019fe:	00db      	lsls	r3, r3, #3
 8001a00:	683a      	ldr	r2, [r7, #0]
 8001a02:	4413      	add	r3, r2
 8001a04:	461a      	mov	r2, r3
 8001a06:	4913      	ldr	r1, [pc, #76]	; (8001a54 <sd_read_array_double+0x80>)
 8001a08:	4813      	ldr	r0, [pc, #76]	; (8001a58 <sd_read_array_double+0x84>)
 8001a0a:	f014 fad5 	bl	8015fb8 <siscanf>
		i++;
 8001a0e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001a12:	b29b      	uxth	r3, r3
 8001a14:	3301      	adds	r3, #1
 8001a16:	b29b      	uxth	r3, r3
 8001a18:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 8001a1a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001a1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a22:	429a      	cmp	r2, r3
 8001a24:	db03      	blt.n	8001a2e <sd_read_array_double+0x5a>
 8001a26:	88fb      	ldrh	r3, [r7, #6]
 8001a28:	3b01      	subs	r3, #1
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001a2e:	4a0b      	ldr	r2, [pc, #44]	; (8001a5c <sd_read_array_double+0x88>)
 8001a30:	2180      	movs	r1, #128	; 0x80
 8001a32:	4809      	ldr	r0, [pc, #36]	; (8001a58 <sd_read_array_double+0x84>)
 8001a34:	f012 faf0 	bl	8014018 <f_gets>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d1dd      	bne.n	80019fa <sd_read_array_double+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 8001a3e:	f000 f8bb 	bl	8001bb8 <bufclear>

	f_close(&fil);	//ファイル閉じる
 8001a42:	4806      	ldr	r0, [pc, #24]	; (8001a5c <sd_read_array_double+0x88>)
 8001a44:	f011 fe72 	bl	801372c <f_close>

	return ret;
 8001a48:	7d7b      	ldrb	r3, [r7, #21]
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3718      	adds	r7, #24
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	08019630 	.word	0x08019630
 8001a58:	20043560 	.word	0x20043560
 8001a5c:	200435f0 	.word	0x200435f0

08001a60 <sd_write_array_int>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_int(const char *p_folder_name, const char *p_file_name, short size, int16_t *data, char state){
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b086      	sub	sp, #24
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	60b9      	str	r1, [r7, #8]
 8001a6a:	603b      	str	r3, [r7, #0]
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001a70:	2300      	movs	r3, #0
 8001a72:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 8001a74:	68b9      	ldr	r1, [r7, #8]
 8001a76:	68f8      	ldr	r0, [r7, #12]
 8001a78:	f000 f86e 	bl	8001b58 <create_path>

	if(state == OVER_WRITE){
 8001a7c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d108      	bne.n	8001a96 <sd_write_array_int+0x36>
		f_chdir(dirpath);
 8001a84:	481f      	ldr	r0, [pc, #124]	; (8001b04 <sd_write_array_int+0xa4>)
 8001a86:	f011 fe7b 	bl	8013780 <f_chdir>
		f_unlink(filepath);	//一回消す
 8001a8a:	481f      	ldr	r0, [pc, #124]	; (8001b08 <sd_write_array_int+0xa8>)
 8001a8c:	f012 f8e6 	bl	8013c5c <f_unlink>
		f_chdir("..");
 8001a90:	481e      	ldr	r0, [pc, #120]	; (8001b0c <sd_write_array_int+0xac>)
 8001a92:	f011 fe75 	bl	8013780 <f_chdir>
	}

	fopen_folder_and_file();	//書き込むファイルを選択
 8001a96:	f000 f875 	bl	8001b84 <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	82fb      	strh	r3, [r7, #22]
 8001a9e:	e022      	b.n	8001ae6 <sd_write_array_int+0x86>
		snprintf(buffer, BUFF_SIZE, "%d\n", *(data + i));	//floatをstringに変換
 8001aa0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	683a      	ldr	r2, [r7, #0]
 8001aa8:	4413      	add	r3, r2
 8001aaa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001aae:	4a18      	ldr	r2, [pc, #96]	; (8001b10 <sd_write_array_int+0xb0>)
 8001ab0:	2180      	movs	r1, #128	; 0x80
 8001ab2:	4818      	ldr	r0, [pc, #96]	; (8001b14 <sd_write_array_int+0xb4>)
 8001ab4:	f014 fa2c 	bl	8015f10 <sniprintf>
		}
		else{
			f_lseek(&fil, 0);	//ファイルの最初に移動
		}
*/
		f_lseek(&fil, f_size(&fil));	//ファイルの最後に移動
 8001ab8:	4b17      	ldr	r3, [pc, #92]	; (8001b18 <sd_write_array_int+0xb8>)
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	4619      	mov	r1, r3
 8001abe:	4816      	ldr	r0, [pc, #88]	; (8001b18 <sd_write_array_int+0xb8>)
 8001ac0:	f011 fea8 	bl	8013814 <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//書き込む
 8001ac4:	4813      	ldr	r0, [pc, #76]	; (8001b14 <sd_write_array_int+0xb4>)
 8001ac6:	f7fe fb9b 	bl	8000200 <strlen>
 8001aca:	4602      	mov	r2, r0
 8001acc:	4b13      	ldr	r3, [pc, #76]	; (8001b1c <sd_write_array_int+0xbc>)
 8001ace:	4911      	ldr	r1, [pc, #68]	; (8001b14 <sd_write_array_int+0xb4>)
 8001ad0:	4811      	ldr	r0, [pc, #68]	; (8001b18 <sd_write_array_int+0xb8>)
 8001ad2:	f011 fc16 	bl	8013302 <f_write>

		bufclear();	//書き込み用のバッファをクリア
 8001ad6:	f000 f86f 	bl	8001bb8 <bufclear>
	for(short i = 0 ; i < size; i++){
 8001ada:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001ade:	b29b      	uxth	r3, r3
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	82fb      	strh	r3, [r7, #22]
 8001ae6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001aea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001aee:	429a      	cmp	r2, r3
 8001af0:	dbd6      	blt.n	8001aa0 <sd_write_array_int+0x40>
	}

	f_close(&fil);	//ファイル閉じる
 8001af2:	4809      	ldr	r0, [pc, #36]	; (8001b18 <sd_write_array_int+0xb8>)
 8001af4:	f011 fe1a 	bl	801372c <f_close>

	return ret;
 8001af8:	7d7b      	ldrb	r3, [r7, #21]
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3718      	adds	r7, #24
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	20043460 	.word	0x20043460
 8001b08:	20042320 	.word	0x20042320
 8001b0c:	08019634 	.word	0x08019634
 8001b10:	08019638 	.word	0x08019638
 8001b14:	20043560 	.word	0x20043560
 8001b18:	200435f0 	.word	0x200435f0
 8001b1c:	200435e0 	.word	0x200435e0

08001b20 <sd_mount>:
//* 役割　：　SDカードをマウント
//* 引数　：　void:
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_mount(){
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 8001b26:	2300      	movs	r3, #0
 8001b28:	71fb      	strb	r3, [r7, #7]

	if(f_mount(&fs, "", 1) == FR_OK) ret = 1;
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	4908      	ldr	r1, [pc, #32]	; (8001b50 <sd_mount+0x30>)
 8001b2e:	4809      	ldr	r0, [pc, #36]	; (8001b54 <sd_mount+0x34>)
 8001b30:	f011 f874 	bl	8012c1c <f_mount>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d102      	bne.n	8001b40 <sd_mount+0x20>
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	71fb      	strb	r3, [r7, #7]
 8001b3e:	e001      	b.n	8001b44 <sd_mount+0x24>
	else ret = 0;
 8001b40:	2300      	movs	r3, #0
 8001b42:	71fb      	strb	r3, [r7, #7]

	return ret;
 8001b44:	79fb      	ldrb	r3, [r7, #7]
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3708      	adds	r7, #8
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	08019640 	.word	0x08019640
 8001b54:	20042420 	.word	0x20042420

08001b58 <create_path>:
//* 役割　：　操作するパスの文字列を作る
//* 引数　：　char, char: フォルダ名, ファイル名
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void create_path(char const *p_folder_name, char const *p_file_name){
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]

	sprintf(dirpath, "%s", p_folder_name);
 8001b62:	6879      	ldr	r1, [r7, #4]
 8001b64:	4805      	ldr	r0, [pc, #20]	; (8001b7c <create_path+0x24>)
 8001b66:	f014 fa53 	bl	8016010 <strcpy>

	sprintf(filepath, "%s", p_file_name);
 8001b6a:	6839      	ldr	r1, [r7, #0]
 8001b6c:	4804      	ldr	r0, [pc, #16]	; (8001b80 <create_path+0x28>)
 8001b6e:	f014 fa4f 	bl	8016010 <strcpy>

}
 8001b72:	bf00      	nop
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	20043460 	.word	0x20043460
 8001b80:	20042320 	.word	0x20042320

08001b84 <fopen_folder_and_file>:
//* 役割　：　操作するファイルを選択する_
//* 引数　：　char: ファイル選択
//* 戻り値：　char: 状態チェック	0(マウント失敗) or 1(成功)
//* 備考 : なし
//************************************************************************/
void fopen_folder_and_file(){	//mkdir
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0

	f_mkdir(dirpath);
 8001b88:	4807      	ldr	r0, [pc, #28]	; (8001ba8 <fopen_folder_and_file+0x24>)
 8001b8a:	f012 f929 	bl	8013de0 <f_mkdir>

	f_chdir(dirpath);
 8001b8e:	4806      	ldr	r0, [pc, #24]	; (8001ba8 <fopen_folder_and_file+0x24>)
 8001b90:	f011 fdf6 	bl	8013780 <f_chdir>

	f_open(&fil, filepath, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8001b94:	2213      	movs	r2, #19
 8001b96:	4905      	ldr	r1, [pc, #20]	; (8001bac <fopen_folder_and_file+0x28>)
 8001b98:	4805      	ldr	r0, [pc, #20]	; (8001bb0 <fopen_folder_and_file+0x2c>)
 8001b9a:	f011 f885 	bl	8012ca8 <f_open>

	f_chdir("..");
 8001b9e:	4805      	ldr	r0, [pc, #20]	; (8001bb4 <fopen_folder_and_file+0x30>)
 8001ba0:	f011 fdee 	bl	8013780 <f_chdir>


}
 8001ba4:	bf00      	nop
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	20043460 	.word	0x20043460
 8001bac:	20042320 	.word	0x20042320
 8001bb0:	200435f0 	.word	0x200435f0
 8001bb4:	08019634 	.word	0x08019634

08001bb8 <bufclear>:
//* 役割　：　バッファをクリア
//* 引数　：　void:
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void bufclear(void){
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
	for(int i = 0; i < BUFF_SIZE; i++){
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	607b      	str	r3, [r7, #4]
 8001bc2:	e007      	b.n	8001bd4 <bufclear+0x1c>
		buffer[i] = '\0';
 8001bc4:	4a08      	ldr	r2, [pc, #32]	; (8001be8 <bufclear+0x30>)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4413      	add	r3, r2
 8001bca:	2200      	movs	r2, #0
 8001bcc:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFF_SIZE; i++){
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	607b      	str	r3, [r7, #4]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2b7f      	cmp	r3, #127	; 0x7f
 8001bd8:	ddf4      	ble.n	8001bc4 <bufclear+0xc>
	}
}
 8001bda:	bf00      	nop
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	20043560 	.word	0x20043560

08001bec <read_byte>:
#include "ICM_20648.h"

volatile int16_t xa, ya, za; // 加速度(16bitデータ)
volatile int16_t xg, yg, zg;	// 角加速度(16bitデータ)

uint8_t read_byte( uint8_t reg ) {
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 8001bf6:	79fb      	ldrb	r3, [r7, #7]
 8001bf8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8001c00:	2200      	movs	r2, #0
 8001c02:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c06:	480e      	ldr	r0, [pc, #56]	; (8001c40 <read_byte+0x54>)
 8001c08:	f009 f84c 	bl	800aca4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001c0c:	f107 010f 	add.w	r1, r7, #15
 8001c10:	2364      	movs	r3, #100	; 0x64
 8001c12:	2201      	movs	r2, #1
 8001c14:	480b      	ldr	r0, [pc, #44]	; (8001c44 <read_byte+0x58>)
 8001c16:	f00c f9f5 	bl	800e004 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2,&val,1,100);
 8001c1a:	f107 010e 	add.w	r1, r7, #14
 8001c1e:	2364      	movs	r3, #100	; 0x64
 8001c20:	2201      	movs	r2, #1
 8001c22:	4808      	ldr	r0, [pc, #32]	; (8001c44 <read_byte+0x58>)
 8001c24:	f00c fb22 	bl	800e26c <HAL_SPI_Receive>
	CS_SET;
 8001c28:	2201      	movs	r2, #1
 8001c2a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c2e:	4804      	ldr	r0, [pc, #16]	; (8001c40 <read_byte+0x54>)
 8001c30:	f009 f838 	bl	800aca4 <HAL_GPIO_WritePin>

	return val;
 8001c34:	7bbb      	ldrb	r3, [r7, #14]
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3710      	adds	r7, #16
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	40020400 	.word	0x40020400
 8001c44:	2004468c 	.word	0x2004468c

08001c48 <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	4603      	mov	r3, r0
 8001c50:	460a      	mov	r2, r1
 8001c52:	71fb      	strb	r3, [r7, #7]
 8001c54:	4613      	mov	r3, r2
 8001c56:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8001c58:	79fb      	ldrb	r3, [r7, #7]
 8001c5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 8001c62:	2200      	movs	r2, #0
 8001c64:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c68:	480c      	ldr	r0, [pc, #48]	; (8001c9c <write_byte+0x54>)
 8001c6a:	f009 f81b 	bl	800aca4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001c6e:	f107 010f 	add.w	r1, r7, #15
 8001c72:	2364      	movs	r3, #100	; 0x64
 8001c74:	2201      	movs	r2, #1
 8001c76:	480a      	ldr	r0, [pc, #40]	; (8001ca0 <write_byte+0x58>)
 8001c78:	f00c f9c4 	bl	800e004 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2,&val,1,100);
 8001c7c:	1db9      	adds	r1, r7, #6
 8001c7e:	2364      	movs	r3, #100	; 0x64
 8001c80:	2201      	movs	r2, #1
 8001c82:	4807      	ldr	r0, [pc, #28]	; (8001ca0 <write_byte+0x58>)
 8001c84:	f00c f9be 	bl	800e004 <HAL_SPI_Transmit>
	CS_SET;
 8001c88:	2201      	movs	r2, #1
 8001c8a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c8e:	4803      	ldr	r0, [pc, #12]	; (8001c9c <write_byte+0x54>)
 8001c90:	f009 f808 	bl	800aca4 <HAL_GPIO_WritePin>
}
 8001c94:	bf00      	nop
 8001c96:	3710      	adds	r7, #16
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	40020400 	.word	0x40020400
 8001ca0:	2004468c 	.word	0x2004468c

08001ca4 <IMU_init>:

uint16_t IMU_init() {
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
	uint8_t who_am_i;
	uint16_t ret = 0;
 8001caa:	2300      	movs	r3, #0
 8001cac:	80fb      	strh	r3, [r7, #6]

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 8001cae:	2000      	movs	r0, #0
 8001cb0:	f7ff ff9c 	bl	8001bec <read_byte>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	717b      	strb	r3, [r7, #5]
	if ( who_am_i == 0xE0 ) {
 8001cb8:	797b      	ldrb	r3, [r7, #5]
 8001cba:	2be0      	cmp	r3, #224	; 0xe0
 8001cbc:	d119      	bne.n	8001cf2 <IMU_init+0x4e>
		ret = 1;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	80fb      	strh	r3, [r7, #6]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 8001cc2:	2101      	movs	r1, #1
 8001cc4:	2006      	movs	r0, #6
 8001cc6:	f7ff ffbf 	bl	8001c48 <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 8001cca:	2110      	movs	r1, #16
 8001ccc:	2003      	movs	r0, #3
 8001cce:	f7ff ffbb 	bl	8001c48 <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 8001cd2:	2120      	movs	r1, #32
 8001cd4:	207f      	movs	r0, #127	; 0x7f
 8001cd6:	f7ff ffb7 	bl	8001c48 <write_byte>
		write_byte(0x01,0x06);	//レンジ±2000dps
 8001cda:	2106      	movs	r1, #6
 8001cdc:	2001      	movs	r0, #1
 8001cde:	f7ff ffb3 	bl	8001c48 <write_byte>
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		write_byte(0x14,0x06);	//レンジ±16g
 8001ce2:	2106      	movs	r1, #6
 8001ce4:	2014      	movs	r0, #20
 8001ce6:	f7ff ffaf 	bl	8001c48 <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(0x7F,0x00);	//USER_BANK0
 8001cea:	2100      	movs	r1, #0
 8001cec:	207f      	movs	r0, #127	; 0x7f
 8001cee:	f7ff ffab 	bl	8001c48 <write_byte>
	}
	return ret;
 8001cf2:	88fb      	ldrh	r3, [r7, #6]
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3708      	adds	r7, #8
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <read_gyro_data>:

void read_gyro_data() {
 8001cfc:	b598      	push	{r3, r4, r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
	xg = ((uint16_t)read_byte(0x33) << 8) | ((uint16_t)read_byte(0x34));
 8001d00:	2033      	movs	r0, #51	; 0x33
 8001d02:	f7ff ff73 	bl	8001bec <read_byte>
 8001d06:	4603      	mov	r3, r0
 8001d08:	021b      	lsls	r3, r3, #8
 8001d0a:	b21c      	sxth	r4, r3
 8001d0c:	2034      	movs	r0, #52	; 0x34
 8001d0e:	f7ff ff6d 	bl	8001bec <read_byte>
 8001d12:	4603      	mov	r3, r0
 8001d14:	b21b      	sxth	r3, r3
 8001d16:	4323      	orrs	r3, r4
 8001d18:	b21a      	sxth	r2, r3
 8001d1a:	4b11      	ldr	r3, [pc, #68]	; (8001d60 <read_gyro_data+0x64>)
 8001d1c:	801a      	strh	r2, [r3, #0]
	yg = ((uint16_t)read_byte(0x35) << 8) | ((uint16_t)read_byte(0x36));
 8001d1e:	2035      	movs	r0, #53	; 0x35
 8001d20:	f7ff ff64 	bl	8001bec <read_byte>
 8001d24:	4603      	mov	r3, r0
 8001d26:	021b      	lsls	r3, r3, #8
 8001d28:	b21c      	sxth	r4, r3
 8001d2a:	2036      	movs	r0, #54	; 0x36
 8001d2c:	f7ff ff5e 	bl	8001bec <read_byte>
 8001d30:	4603      	mov	r3, r0
 8001d32:	b21b      	sxth	r3, r3
 8001d34:	4323      	orrs	r3, r4
 8001d36:	b21a      	sxth	r2, r3
 8001d38:	4b0a      	ldr	r3, [pc, #40]	; (8001d64 <read_gyro_data+0x68>)
 8001d3a:	801a      	strh	r2, [r3, #0]
	zg = ((uint16_t)read_byte(0x37) << 8) | ((uint16_t)read_byte(0x38));
 8001d3c:	2037      	movs	r0, #55	; 0x37
 8001d3e:	f7ff ff55 	bl	8001bec <read_byte>
 8001d42:	4603      	mov	r3, r0
 8001d44:	021b      	lsls	r3, r3, #8
 8001d46:	b21c      	sxth	r4, r3
 8001d48:	2038      	movs	r0, #56	; 0x38
 8001d4a:	f7ff ff4f 	bl	8001bec <read_byte>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	b21b      	sxth	r3, r3
 8001d52:	4323      	orrs	r3, r4
 8001d54:	b21a      	sxth	r2, r3
 8001d56:	4b04      	ldr	r3, [pc, #16]	; (8001d68 <read_gyro_data+0x6c>)
 8001d58:	801a      	strh	r2, [r3, #0]
}
 8001d5a:	bf00      	nop
 8001d5c:	bd98      	pop	{r3, r4, r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	20044628 	.word	0x20044628
 8001d64:	20044626 	.word	0x20044626
 8001d68:	20044620 	.word	0x20044620

08001d6c <_ZN3IMUC1Ev>:

#define PI 3.1415926535

//int16_t mon_zg_;

IMU::IMU() : xa_(0), ya_(0), za_(0), xg_(0), yg_(0), zg_(0), offset_(0)
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2200      	movs	r2, #0
 8001d78:	801a      	strh	r2, [r3, #0]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	805a      	strh	r2, [r3, #2]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2200      	movs	r2, #0
 8001d84:	809a      	strh	r2, [r3, #4]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	80da      	strh	r2, [r3, #6]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	811a      	strh	r2, [r3, #8]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	815a      	strh	r2, [r3, #10]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f04f 0200 	mov.w	r2, #0
 8001d9e:	60da      	str	r2, [r3, #12]
{

}
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	4618      	mov	r0, r3
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
	...

08001db0 <_ZN3IMU4initEv>:

void IMU::init()
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
	uint16_t who_i_am;
	who_i_am = IMU_init();
 8001db8:	f7ff ff74 	bl	8001ca4 <IMU_init>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	81fb      	strh	r3, [r7, #14]
	//printf("who i am: %d\n", who_i_am);

	lcd_clear();
 8001dc0:	f7ff f96e 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	2000      	movs	r0, #0
 8001dc8:	f7ff f97a 	bl	80010c0 <lcd_locate>
	lcd_printf("IMUstatus");
 8001dcc:	4809      	ldr	r0, [pc, #36]	; (8001df4 <_ZN3IMU4initEv+0x44>)
 8001dce:	f7ff f9a1 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001dd2:	2101      	movs	r1, #1
 8001dd4:	2000      	movs	r0, #0
 8001dd6:	f7ff f973 	bl	80010c0 <lcd_locate>
	lcd_printf("%d", who_i_am);
 8001dda:	89fb      	ldrh	r3, [r7, #14]
 8001ddc:	4619      	mov	r1, r3
 8001dde:	4806      	ldr	r0, [pc, #24]	; (8001df8 <_ZN3IMU4initEv+0x48>)
 8001de0:	f7ff f998 	bl	8001114 <lcd_printf>

	HAL_Delay(500);
 8001de4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001de8:	f007 fcc6 	bl	8009778 <HAL_Delay>

}
 8001dec:	bf00      	nop
 8001dee:	3710      	adds	r7, #16
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	08019644 	.word	0x08019644
 8001df8:	08019650 	.word	0x08019650
 8001dfc:	00000000 	.word	0x00000000

08001e00 <_ZN3IMU12updateValuesEv>:
	if(array_idx >= STORE_NUM) array_idx = 0;

}
*/
void IMU::updateValues()
{
 8001e00:	b5b0      	push	{r4, r5, r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
	read_gyro_data();
 8001e08:	f7ff ff78 	bl	8001cfc <read_gyro_data>
	//read_accel_data();

	//xa_ = xa;
	//ya_ = ya;
	//za_ = za;
	xg_ = xg;
 8001e0c:	4b24      	ldr	r3, [pc, #144]	; (8001ea0 <_ZN3IMU12updateValuesEv+0xa0>)
 8001e0e:	881b      	ldrh	r3, [r3, #0]
 8001e10:	b21a      	sxth	r2, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	80da      	strh	r2, [r3, #6]
	yg_ = yg;
 8001e16:	4b23      	ldr	r3, [pc, #140]	; (8001ea4 <_ZN3IMU12updateValuesEv+0xa4>)
 8001e18:	881b      	ldrh	r3, [r3, #0]
 8001e1a:	b21a      	sxth	r2, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	811a      	strh	r2, [r3, #8]
	zg_ = zg;
 8001e20:	4b21      	ldr	r3, [pc, #132]	; (8001ea8 <_ZN3IMU12updateValuesEv+0xa8>)
 8001e22:	881b      	ldrh	r3, [r3, #0]
 8001e24:	b21a      	sxth	r2, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	815a      	strh	r2, [r3, #10]

	static int16_t pre_zg;
	zg_ = ((R_IMU)*(zg_) + (1.0 - (R_IMU))* (pre_zg)); // lowpath filter
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001e30:	4618      	mov	r0, r3
 8001e32:	f7fe fb8f 	bl	8000554 <__aeabi_i2d>
 8001e36:	a316      	add	r3, pc, #88	; (adr r3, 8001e90 <_ZN3IMU12updateValuesEv+0x90>)
 8001e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e3c:	f7fe fbf4 	bl	8000628 <__aeabi_dmul>
 8001e40:	4603      	mov	r3, r0
 8001e42:	460c      	mov	r4, r1
 8001e44:	4625      	mov	r5, r4
 8001e46:	461c      	mov	r4, r3
 8001e48:	4b18      	ldr	r3, [pc, #96]	; (8001eac <_ZN3IMU12updateValuesEv+0xac>)
 8001e4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7fe fb80 	bl	8000554 <__aeabi_i2d>
 8001e54:	a310      	add	r3, pc, #64	; (adr r3, 8001e98 <_ZN3IMU12updateValuesEv+0x98>)
 8001e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e5a:	f7fe fbe5 	bl	8000628 <__aeabi_dmul>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	460b      	mov	r3, r1
 8001e62:	4620      	mov	r0, r4
 8001e64:	4629      	mov	r1, r5
 8001e66:	f7fe fa29 	bl	80002bc <__adddf3>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	460c      	mov	r4, r1
 8001e6e:	4618      	mov	r0, r3
 8001e70:	4621      	mov	r1, r4
 8001e72:	f7fe fe89 	bl	8000b88 <__aeabi_d2iz>
 8001e76:	4603      	mov	r3, r0
 8001e78:	b21a      	sxth	r2, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	815a      	strh	r2, [r3, #10]

	pre_zg = zg_;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001e84:	4b09      	ldr	r3, [pc, #36]	; (8001eac <_ZN3IMU12updateValuesEv+0xac>)
 8001e86:	801a      	strh	r2, [r3, #0]
	zg_ = temp_val[2];
	mon_zg_ = zg_;
	*/


}
 8001e88:	bf00      	nop
 8001e8a:	3708      	adds	r7, #8
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bdb0      	pop	{r4, r5, r7, pc}
 8001e90:	eb851eb8 	.word	0xeb851eb8
 8001e94:	3f9eb851 	.word	0x3f9eb851
 8001e98:	70a3d70a 	.word	0x70a3d70a
 8001e9c:	3fef0a3d 	.word	0x3fef0a3d
 8001ea0:	20044628 	.word	0x20044628
 8001ea4:	20044626 	.word	0x20044626
 8001ea8:	20044620 	.word	0x20044620
 8001eac:	20000210 	.word	0x20000210

08001eb0 <_ZN3IMU8getOmegaEv>:

float IMU::getOmega()
{
 8001eb0:	b5b0      	push	{r4, r5, r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
	float corrected_zg = float(zg_) - offset_;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001ebe:	ee07 3a90 	vmov	s15, r3
 8001ec2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	edd3 7a03 	vldr	s15, [r3, #12]
 8001ecc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ed0:	edc7 7a03 	vstr	s15, [r7, #12]
	return -(corrected_zg / 16.4) * PI / 180;
 8001ed4:	68f8      	ldr	r0, [r7, #12]
 8001ed6:	f7fe fb4f 	bl	8000578 <__aeabi_f2d>
 8001eda:	a316      	add	r3, pc, #88	; (adr r3, 8001f34 <_ZN3IMU8getOmegaEv+0x84>)
 8001edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ee0:	f7fe fccc 	bl	800087c <__aeabi_ddiv>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	4614      	mov	r4, r2
 8001eea:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001eee:	a313      	add	r3, pc, #76	; (adr r3, 8001f3c <_ZN3IMU8getOmegaEv+0x8c>)
 8001ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ef4:	4620      	mov	r0, r4
 8001ef6:	4629      	mov	r1, r5
 8001ef8:	f7fe fb96 	bl	8000628 <__aeabi_dmul>
 8001efc:	4603      	mov	r3, r0
 8001efe:	460c      	mov	r4, r1
 8001f00:	4618      	mov	r0, r3
 8001f02:	4621      	mov	r1, r4
 8001f04:	f04f 0200 	mov.w	r2, #0
 8001f08:	4b09      	ldr	r3, [pc, #36]	; (8001f30 <_ZN3IMU8getOmegaEv+0x80>)
 8001f0a:	f7fe fcb7 	bl	800087c <__aeabi_ddiv>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	460c      	mov	r4, r1
 8001f12:	4618      	mov	r0, r3
 8001f14:	4621      	mov	r1, r4
 8001f16:	f7fe fe7f 	bl	8000c18 <__aeabi_d2f>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	ee07 3a90 	vmov	s15, r3
}
 8001f20:	eeb0 0a67 	vmov.f32	s0, s15
 8001f24:	3710      	adds	r7, #16
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bdb0      	pop	{r4, r5, r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	f3af 8000 	nop.w
 8001f30:	40668000 	.word	0x40668000
 8001f34:	66666666 	.word	0x66666666
 8001f38:	40306666 	.word	0x40306666
 8001f3c:	54411744 	.word	0x54411744
 8001f40:	400921fb 	.word	0x400921fb

08001f44 <_ZN3IMU11calibrationEv>:

void IMU::calibration()
{
 8001f44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f46:	b08b      	sub	sp, #44	; 0x2c
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
	float sum;
	for(const auto &v : zg_vals){
		sum += v;
	}

	offset_ = sum / num;
 8001f4c:	466b      	mov	r3, sp
 8001f4e:	461e      	mov	r6, r3
	HAL_Delay(1000);
 8001f50:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f54:	f007 fc10 	bl	8009778 <HAL_Delay>
	lcd_clear();
 8001f58:	f7ff f8a2 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	2000      	movs	r0, #0
 8001f60:	f7ff f8ae 	bl	80010c0 <lcd_locate>
	lcd_printf("IMU     ");
 8001f64:	4840      	ldr	r0, [pc, #256]	; (8002068 <_ZN3IMU11calibrationEv+0x124>)
 8001f66:	f7ff f8d5 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8001f6a:	2101      	movs	r1, #1
 8001f6c:	2000      	movs	r0, #0
 8001f6e:	f7ff f8a7 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 8001f72:	483e      	ldr	r0, [pc, #248]	; (800206c <_ZN3IMU11calibrationEv+0x128>)
 8001f74:	f7ff f8ce 	bl	8001114 <lcd_printf>
	int16_t num = 2000;
 8001f78:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001f7c:	83bb      	strh	r3, [r7, #28]
	float zg_vals[num];
 8001f7e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001f82:	1e5d      	subs	r5, r3, #1
 8001f84:	61bd      	str	r5, [r7, #24]
 8001f86:	462b      	mov	r3, r5
 8001f88:	3301      	adds	r3, #1
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	f04f 0200 	mov.w	r2, #0
 8001f90:	f04f 0300 	mov.w	r3, #0
 8001f94:	f04f 0400 	mov.w	r4, #0
 8001f98:	0154      	lsls	r4, r2, #5
 8001f9a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001f9e:	014b      	lsls	r3, r1, #5
 8001fa0:	462b      	mov	r3, r5
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	f04f 0200 	mov.w	r2, #0
 8001faa:	f04f 0300 	mov.w	r3, #0
 8001fae:	f04f 0400 	mov.w	r4, #0
 8001fb2:	0154      	lsls	r4, r2, #5
 8001fb4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001fb8:	014b      	lsls	r3, r1, #5
 8001fba:	462b      	mov	r3, r5
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	3303      	adds	r3, #3
 8001fc2:	3307      	adds	r3, #7
 8001fc4:	08db      	lsrs	r3, r3, #3
 8001fc6:	00db      	lsls	r3, r3, #3
 8001fc8:	ebad 0d03 	sub.w	sp, sp, r3
 8001fcc:	466b      	mov	r3, sp
 8001fce:	3303      	adds	r3, #3
 8001fd0:	089b      	lsrs	r3, r3, #2
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	617b      	str	r3, [r7, #20]
	for(uint16_t i = 0; i < num; i++){
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	83fb      	strh	r3, [r7, #30]
 8001fda:	8bfa      	ldrh	r2, [r7, #30]
 8001fdc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	da13      	bge.n	800200c <_ZN3IMU11calibrationEv+0xc8>
		zg_vals[i] = float(zg_);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 8001fea:	8bfb      	ldrh	r3, [r7, #30]
 8001fec:	ee07 2a90 	vmov	s15, r2
 8001ff0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ff4:	697a      	ldr	r2, [r7, #20]
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	4413      	add	r3, r2
 8001ffa:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(2);
 8001ffe:	2002      	movs	r0, #2
 8002000:	f007 fbba 	bl	8009778 <HAL_Delay>
	for(uint16_t i = 0; i < num; i++){
 8002004:	8bfb      	ldrh	r3, [r7, #30]
 8002006:	3301      	adds	r3, #1
 8002008:	83fb      	strh	r3, [r7, #30]
 800200a:	e7e6      	b.n	8001fda <_ZN3IMU11calibrationEv+0x96>
	for(const auto &v : zg_vals){
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	627b      	str	r3, [r7, #36]	; 0x24
 8002010:	697a      	ldr	r2, [r7, #20]
 8002012:	462b      	mov	r3, r5
 8002014:	3301      	adds	r3, #1
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	4413      	add	r3, r2
 800201a:	613b      	str	r3, [r7, #16]
 800201c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	429a      	cmp	r2, r3
 8002022:	d00e      	beq.n	8002042 <_ZN3IMU11calibrationEv+0xfe>
 8002024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002026:	60fb      	str	r3, [r7, #12]
		sum += v;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	edd3 7a00 	vldr	s15, [r3]
 800202e:	ed97 7a08 	vldr	s14, [r7, #32]
 8002032:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002036:	edc7 7a08 	vstr	s15, [r7, #32]
	for(const auto &v : zg_vals){
 800203a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203c:	3304      	adds	r3, #4
 800203e:	627b      	str	r3, [r7, #36]	; 0x24
 8002040:	e7ec      	b.n	800201c <_ZN3IMU11calibrationEv+0xd8>
	offset_ = sum / num;
 8002042:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002046:	ee07 3a90 	vmov	s15, r3
 800204a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800204e:	edd7 6a08 	vldr	s13, [r7, #32]
 8002052:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	edc3 7a03 	vstr	s15, [r3, #12]
 800205c:	46b5      	mov	sp, r6
}
 800205e:	bf00      	nop
 8002060:	372c      	adds	r7, #44	; 0x2c
 8002062:	46bd      	mov	sp, r7
 8002064:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002066:	bf00      	nop
 8002068:	08019654 	.word	0x08019654
 800206c:	08019660 	.word	0x08019660

08002070 <INA260_read>:

#include "INA260.h"

//#define SLAVEADRESS1 (0x44<<1)

unsigned short INA260_read(uint8_t pointer_byte, uint8_t slave_adress) {
 8002070:	b580      	push	{r7, lr}
 8002072:	b086      	sub	sp, #24
 8002074:	af02      	add	r7, sp, #8
 8002076:	4603      	mov	r3, r0
 8002078:	460a      	mov	r2, r1
 800207a:	71fb      	strb	r3, [r7, #7]
 800207c:	4613      	mov	r3, r2
 800207e:	71bb      	strb	r3, [r7, #6]
	uint8_t Rxdata[2];
	unsigned short val;
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, &pointer_byte, 1, 100);
 8002080:	79bb      	ldrb	r3, [r7, #6]
 8002082:	b299      	uxth	r1, r3
 8002084:	1dfa      	adds	r2, r7, #7
 8002086:	2364      	movs	r3, #100	; 0x64
 8002088:	9300      	str	r3, [sp, #0]
 800208a:	2301      	movs	r3, #1
 800208c:	480c      	ldr	r0, [pc, #48]	; (80020c0 <INA260_read+0x50>)
 800208e:	f008 ff5b 	bl	800af48 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, slave_adress, Rxdata, 2, 100);
 8002092:	79bb      	ldrb	r3, [r7, #6]
 8002094:	b299      	uxth	r1, r3
 8002096:	f107 020c 	add.w	r2, r7, #12
 800209a:	2364      	movs	r3, #100	; 0x64
 800209c:	9300      	str	r3, [sp, #0]
 800209e:	2302      	movs	r3, #2
 80020a0:	4807      	ldr	r0, [pc, #28]	; (80020c0 <INA260_read+0x50>)
 80020a2:	f009 f84f 	bl	800b144 <HAL_I2C_Master_Receive>
	val = ((unsigned short)Rxdata[0] << 8) | (unsigned short)Rxdata[1];
 80020a6:	7b3b      	ldrb	r3, [r7, #12]
 80020a8:	021b      	lsls	r3, r3, #8
 80020aa:	b21a      	sxth	r2, r3
 80020ac:	7b7b      	ldrb	r3, [r7, #13]
 80020ae:	b21b      	sxth	r3, r3
 80020b0:	4313      	orrs	r3, r2
 80020b2:	b21b      	sxth	r3, r3
 80020b4:	81fb      	strh	r3, [r7, #14]
	return val;
 80020b6:	89fb      	ldrh	r3, [r7, #14]
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3710      	adds	r7, #16
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	20044840 	.word	0x20044840

080020c4 <INA260_write>:

void INA260_write(uint8_t pointer_byte , uint8_t data_msbyte , uint8_t data_lsbyte, uint8_t slave_adress) {
 80020c4:	b590      	push	{r4, r7, lr}
 80020c6:	b087      	sub	sp, #28
 80020c8:	af02      	add	r7, sp, #8
 80020ca:	4604      	mov	r4, r0
 80020cc:	4608      	mov	r0, r1
 80020ce:	4611      	mov	r1, r2
 80020d0:	461a      	mov	r2, r3
 80020d2:	4623      	mov	r3, r4
 80020d4:	71fb      	strb	r3, [r7, #7]
 80020d6:	4603      	mov	r3, r0
 80020d8:	71bb      	strb	r3, [r7, #6]
 80020da:	460b      	mov	r3, r1
 80020dc:	717b      	strb	r3, [r7, #5]
 80020de:	4613      	mov	r3, r2
 80020e0:	713b      	strb	r3, [r7, #4]
	uint8_t Txcmd[3] = { pointer_byte , data_msbyte , data_lsbyte };
 80020e2:	79fb      	ldrb	r3, [r7, #7]
 80020e4:	733b      	strb	r3, [r7, #12]
 80020e6:	79bb      	ldrb	r3, [r7, #6]
 80020e8:	737b      	strb	r3, [r7, #13]
 80020ea:	797b      	ldrb	r3, [r7, #5]
 80020ec:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, Txcmd, 3, 100);
 80020ee:	793b      	ldrb	r3, [r7, #4]
 80020f0:	b299      	uxth	r1, r3
 80020f2:	f107 020c 	add.w	r2, r7, #12
 80020f6:	2364      	movs	r3, #100	; 0x64
 80020f8:	9300      	str	r3, [sp, #0]
 80020fa:	2303      	movs	r3, #3
 80020fc:	4803      	ldr	r0, [pc, #12]	; (800210c <INA260_write+0x48>)
 80020fe:	f008 ff23 	bl	800af48 <HAL_I2C_Master_Transmit>
}
 8002102:	bf00      	nop
 8002104:	3714      	adds	r7, #20
 8002106:	46bd      	mov	sp, r7
 8002108:	bd90      	pop	{r4, r7, pc}
 800210a:	bf00      	nop
 800210c:	20044840 	.word	0x20044840

08002110 <setConfig>:

void setConfig(uint8_t msbyte , uint8_t lsbyte, uint8_t slave_adress) {
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	4603      	mov	r3, r0
 8002118:	71fb      	strb	r3, [r7, #7]
 800211a:	460b      	mov	r3, r1
 800211c:	71bb      	strb	r3, [r7, #6]
 800211e:	4613      	mov	r3, r2
 8002120:	717b      	strb	r3, [r7, #5]
	INA260_write(0x00 , msbyte , lsbyte, slave_adress);
 8002122:	797b      	ldrb	r3, [r7, #5]
 8002124:	79ba      	ldrb	r2, [r7, #6]
 8002126:	79f9      	ldrb	r1, [r7, #7]
 8002128:	2000      	movs	r0, #0
 800212a:	f7ff ffcb 	bl	80020c4 <INA260_write>
}
 800212e:	bf00      	nop
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <INA260_init>:

void INA260_init(uint8_t slave_adress) {
 8002136:	b580      	push	{r7, lr}
 8002138:	b082      	sub	sp, #8
 800213a:	af00      	add	r7, sp, #0
 800213c:	4603      	mov	r3, r0
 800213e:	71fb      	strb	r3, [r7, #7]
	setConfig(0x00,0xDF, slave_adress);//AVG=1,BusVoltageConversionTime=588u,ShuntCurrentConversionTime=588u,mode=BusVoltageContinuous
 8002140:	79fb      	ldrb	r3, [r7, #7]
 8002142:	461a      	mov	r2, r3
 8002144:	21df      	movs	r1, #223	; 0xdf
 8002146:	2000      	movs	r0, #0
 8002148:	f7ff ffe2 	bl	8002110 <setConfig>
}
 800214c:	bf00      	nop
 800214e:	3708      	adds	r7, #8
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}

08002154 <_ZN8JoyStickC1Ev>:
 */

#include "Joystick.hpp"
//#include "stm32f4xx_hal.h"

JoyStick::JoyStick()
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
{

}
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	4618      	mov	r0, r3
 8002160:	370c      	adds	r7, #12
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
	...

0800216c <_ZN8JoyStick8getValueEv>:

uint16_t JoyStick::getValue()
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8002174:	2300      	movs	r3, #0
 8002176:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10)) ret_value |= 0x01;
 8002178:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800217c:	482a      	ldr	r0, [pc, #168]	; (8002228 <_ZN8JoyStick8getValueEv+0xbc>)
 800217e:	f008 fd79 	bl	800ac74 <HAL_GPIO_ReadPin>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	bf0c      	ite	eq
 8002188:	2301      	moveq	r3, #1
 800218a:	2300      	movne	r3, #0
 800218c:	b2db      	uxtb	r3, r3
 800218e:	2b00      	cmp	r3, #0
 8002190:	d003      	beq.n	800219a <_ZN8JoyStick8getValueEv+0x2e>
 8002192:	89fb      	ldrh	r3, [r7, #14]
 8002194:	f043 0301 	orr.w	r3, r3, #1
 8002198:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_0)) ret_value |= 0x02;
 800219a:	2101      	movs	r1, #1
 800219c:	4823      	ldr	r0, [pc, #140]	; (800222c <_ZN8JoyStick8getValueEv+0xc0>)
 800219e:	f008 fd69 	bl	800ac74 <HAL_GPIO_ReadPin>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	bf0c      	ite	eq
 80021a8:	2301      	moveq	r3, #1
 80021aa:	2300      	movne	r3, #0
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d003      	beq.n	80021ba <_ZN8JoyStick8getValueEv+0x4e>
 80021b2:	89fb      	ldrh	r3, [r7, #14]
 80021b4:	f043 0302 	orr.w	r3, r3, #2
 80021b8:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_8)) ret_value |= 0x04;
 80021ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021be:	481a      	ldr	r0, [pc, #104]	; (8002228 <_ZN8JoyStick8getValueEv+0xbc>)
 80021c0:	f008 fd58 	bl	800ac74 <HAL_GPIO_ReadPin>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	bf0c      	ite	eq
 80021ca:	2301      	moveq	r3, #1
 80021cc:	2300      	movne	r3, #0
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d003      	beq.n	80021dc <_ZN8JoyStick8getValueEv+0x70>
 80021d4:	89fb      	ldrh	r3, [r7, #14]
 80021d6:	f043 0304 	orr.w	r3, r3, #4
 80021da:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)) ret_value |= 0x08;
 80021dc:	2104      	movs	r1, #4
 80021de:	4814      	ldr	r0, [pc, #80]	; (8002230 <_ZN8JoyStick8getValueEv+0xc4>)
 80021e0:	f008 fd48 	bl	800ac74 <HAL_GPIO_ReadPin>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	bf0c      	ite	eq
 80021ea:	2301      	moveq	r3, #1
 80021ec:	2300      	movne	r3, #0
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d003      	beq.n	80021fc <_ZN8JoyStick8getValueEv+0x90>
 80021f4:	89fb      	ldrh	r3, [r7, #14]
 80021f6:	f043 0308 	orr.w	r3, r3, #8
 80021fa:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_7)) ret_value |= 0x10;
 80021fc:	2180      	movs	r1, #128	; 0x80
 80021fe:	480a      	ldr	r0, [pc, #40]	; (8002228 <_ZN8JoyStick8getValueEv+0xbc>)
 8002200:	f008 fd38 	bl	800ac74 <HAL_GPIO_ReadPin>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	bf0c      	ite	eq
 800220a:	2301      	moveq	r3, #1
 800220c:	2300      	movne	r3, #0
 800220e:	b2db      	uxtb	r3, r3
 8002210:	2b00      	cmp	r3, #0
 8002212:	d003      	beq.n	800221c <_ZN8JoyStick8getValueEv+0xb0>
 8002214:	89fb      	ldrh	r3, [r7, #14]
 8002216:	f043 0310 	orr.w	r3, r3, #16
 800221a:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 800221c:	89fb      	ldrh	r3, [r7, #14]
}
 800221e:	4618      	mov	r0, r3
 8002220:	3710      	adds	r7, #16
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	40021000 	.word	0x40021000
 800222c:	40020c00 	.word	0x40020c00
 8002230:	40020400 	.word	0x40020400

08002234 <_ZN3LED9fullColorEc>:
 */

#include "LED.hpp"

void LED::fullColor(char color)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	460b      	mov	r3, r1
 800223e:	70fb      	strb	r3, [r7, #3]
	if(color == 'R'){
 8002240:	78fb      	ldrb	r3, [r7, #3]
 8002242:	2b52      	cmp	r3, #82	; 0x52
 8002244:	d112      	bne.n	800226c <_ZN3LED9fullColorEc+0x38>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002246:	2200      	movs	r2, #0
 8002248:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800224c:	4856      	ldr	r0, [pc, #344]	; (80023a8 <_ZN3LED9fullColorEc+0x174>)
 800224e:	f008 fd29 	bl	800aca4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8002252:	2201      	movs	r2, #1
 8002254:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002258:	4853      	ldr	r0, [pc, #332]	; (80023a8 <_ZN3LED9fullColorEc+0x174>)
 800225a:	f008 fd23 	bl	800aca4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800225e:	2201      	movs	r2, #1
 8002260:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002264:	4850      	ldr	r0, [pc, #320]	; (80023a8 <_ZN3LED9fullColorEc+0x174>)
 8002266:	f008 fd1d 	bl	800aca4 <HAL_GPIO_WritePin>
	else if(color == '~'){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
	}
}
 800226a:	e098      	b.n	800239e <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'G'){
 800226c:	78fb      	ldrb	r3, [r7, #3]
 800226e:	2b47      	cmp	r3, #71	; 0x47
 8002270:	d112      	bne.n	8002298 <_ZN3LED9fullColorEc+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8002272:	2201      	movs	r2, #1
 8002274:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002278:	484b      	ldr	r0, [pc, #300]	; (80023a8 <_ZN3LED9fullColorEc+0x174>)
 800227a:	f008 fd13 	bl	800aca4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800227e:	2200      	movs	r2, #0
 8002280:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002284:	4848      	ldr	r0, [pc, #288]	; (80023a8 <_ZN3LED9fullColorEc+0x174>)
 8002286:	f008 fd0d 	bl	800aca4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800228a:	2201      	movs	r2, #1
 800228c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002290:	4845      	ldr	r0, [pc, #276]	; (80023a8 <_ZN3LED9fullColorEc+0x174>)
 8002292:	f008 fd07 	bl	800aca4 <HAL_GPIO_WritePin>
}
 8002296:	e082      	b.n	800239e <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'B'){
 8002298:	78fb      	ldrb	r3, [r7, #3]
 800229a:	2b42      	cmp	r3, #66	; 0x42
 800229c:	d112      	bne.n	80022c4 <_ZN3LED9fullColorEc+0x90>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800229e:	2201      	movs	r2, #1
 80022a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022a4:	4840      	ldr	r0, [pc, #256]	; (80023a8 <_ZN3LED9fullColorEc+0x174>)
 80022a6:	f008 fcfd 	bl	800aca4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 80022aa:	2201      	movs	r2, #1
 80022ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022b0:	483d      	ldr	r0, [pc, #244]	; (80023a8 <_ZN3LED9fullColorEc+0x174>)
 80022b2:	f008 fcf7 	bl	800aca4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80022b6:	2200      	movs	r2, #0
 80022b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022bc:	483a      	ldr	r0, [pc, #232]	; (80023a8 <_ZN3LED9fullColorEc+0x174>)
 80022be:	f008 fcf1 	bl	800aca4 <HAL_GPIO_WritePin>
}
 80022c2:	e06c      	b.n	800239e <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'C'){
 80022c4:	78fb      	ldrb	r3, [r7, #3]
 80022c6:	2b43      	cmp	r3, #67	; 0x43
 80022c8:	d112      	bne.n	80022f0 <_ZN3LED9fullColorEc+0xbc>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 80022ca:	2201      	movs	r2, #1
 80022cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022d0:	4835      	ldr	r0, [pc, #212]	; (80023a8 <_ZN3LED9fullColorEc+0x174>)
 80022d2:	f008 fce7 	bl	800aca4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 80022d6:	2200      	movs	r2, #0
 80022d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022dc:	4832      	ldr	r0, [pc, #200]	; (80023a8 <_ZN3LED9fullColorEc+0x174>)
 80022de:	f008 fce1 	bl	800aca4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 80022e2:	2200      	movs	r2, #0
 80022e4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022e8:	482f      	ldr	r0, [pc, #188]	; (80023a8 <_ZN3LED9fullColorEc+0x174>)
 80022ea:	f008 fcdb 	bl	800aca4 <HAL_GPIO_WritePin>
}
 80022ee:	e056      	b.n	800239e <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'M'){
 80022f0:	78fb      	ldrb	r3, [r7, #3]
 80022f2:	2b4d      	cmp	r3, #77	; 0x4d
 80022f4:	d112      	bne.n	800231c <_ZN3LED9fullColorEc+0xe8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80022f6:	2200      	movs	r2, #0
 80022f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022fc:	482a      	ldr	r0, [pc, #168]	; (80023a8 <_ZN3LED9fullColorEc+0x174>)
 80022fe:	f008 fcd1 	bl	800aca4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8002302:	2201      	movs	r2, #1
 8002304:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002308:	4827      	ldr	r0, [pc, #156]	; (80023a8 <_ZN3LED9fullColorEc+0x174>)
 800230a:	f008 fccb 	bl	800aca4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 800230e:	2200      	movs	r2, #0
 8002310:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002314:	4824      	ldr	r0, [pc, #144]	; (80023a8 <_ZN3LED9fullColorEc+0x174>)
 8002316:	f008 fcc5 	bl	800aca4 <HAL_GPIO_WritePin>
}
 800231a:	e040      	b.n	800239e <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'Y'){
 800231c:	78fb      	ldrb	r3, [r7, #3]
 800231e:	2b59      	cmp	r3, #89	; 0x59
 8002320:	d112      	bne.n	8002348 <_ZN3LED9fullColorEc+0x114>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8002322:	2200      	movs	r2, #0
 8002324:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002328:	481f      	ldr	r0, [pc, #124]	; (80023a8 <_ZN3LED9fullColorEc+0x174>)
 800232a:	f008 fcbb 	bl	800aca4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800232e:	2200      	movs	r2, #0
 8002330:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002334:	481c      	ldr	r0, [pc, #112]	; (80023a8 <_ZN3LED9fullColorEc+0x174>)
 8002336:	f008 fcb5 	bl	800aca4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 800233a:	2201      	movs	r2, #1
 800233c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002340:	4819      	ldr	r0, [pc, #100]	; (80023a8 <_ZN3LED9fullColorEc+0x174>)
 8002342:	f008 fcaf 	bl	800aca4 <HAL_GPIO_WritePin>
}
 8002346:	e02a      	b.n	800239e <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'W'){
 8002348:	78fb      	ldrb	r3, [r7, #3]
 800234a:	2b57      	cmp	r3, #87	; 0x57
 800234c:	d112      	bne.n	8002374 <_ZN3LED9fullColorEc+0x140>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 800234e:	2200      	movs	r2, #0
 8002350:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002354:	4814      	ldr	r0, [pc, #80]	; (80023a8 <_ZN3LED9fullColorEc+0x174>)
 8002356:	f008 fca5 	bl	800aca4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 800235a:	2200      	movs	r2, #0
 800235c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002360:	4811      	ldr	r0, [pc, #68]	; (80023a8 <_ZN3LED9fullColorEc+0x174>)
 8002362:	f008 fc9f 	bl	800aca4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8002366:	2200      	movs	r2, #0
 8002368:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800236c:	480e      	ldr	r0, [pc, #56]	; (80023a8 <_ZN3LED9fullColorEc+0x174>)
 800236e:	f008 fc99 	bl	800aca4 <HAL_GPIO_WritePin>
}
 8002372:	e014      	b.n	800239e <_ZN3LED9fullColorEc+0x16a>
	else if(color == '~'){
 8002374:	78fb      	ldrb	r3, [r7, #3]
 8002376:	2b7e      	cmp	r3, #126	; 0x7e
 8002378:	d111      	bne.n	800239e <_ZN3LED9fullColorEc+0x16a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800237a:	2201      	movs	r2, #1
 800237c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002380:	4809      	ldr	r0, [pc, #36]	; (80023a8 <_ZN3LED9fullColorEc+0x174>)
 8002382:	f008 fc8f 	bl	800aca4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8002386:	2201      	movs	r2, #1
 8002388:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800238c:	4806      	ldr	r0, [pc, #24]	; (80023a8 <_ZN3LED9fullColorEc+0x174>)
 800238e:	f008 fc89 	bl	800aca4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8002392:	2201      	movs	r2, #1
 8002394:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002398:	4803      	ldr	r0, [pc, #12]	; (80023a8 <_ZN3LED9fullColorEc+0x174>)
 800239a:	f008 fc83 	bl	800aca4 <HAL_GPIO_WritePin>
}
 800239e:	bf00      	nop
 80023a0:	3708      	adds	r7, #8
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	40020000 	.word	0x40020000

080023ac <_ZN3LED2LREaa>:

void LED::LR(int8_t l_status, int8_t r_status)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	460b      	mov	r3, r1
 80023b6:	70fb      	strb	r3, [r7, #3]
 80023b8:	4613      	mov	r3, r2
 80023ba:	70bb      	strb	r3, [r7, #2]
	if(l_status == 1)
 80023bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d106      	bne.n	80023d2 <_ZN3LED2LREaa+0x26>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80023c4:	2201      	movs	r2, #1
 80023c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023ca:	4813      	ldr	r0, [pc, #76]	; (8002418 <_ZN3LED2LREaa+0x6c>)
 80023cc:	f008 fc6a 	bl	800aca4 <HAL_GPIO_WritePin>
 80023d0:	e009      	b.n	80023e6 <_ZN3LED2LREaa+0x3a>
	else if(l_status == 0)
 80023d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d105      	bne.n	80023e6 <_ZN3LED2LREaa+0x3a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80023da:	2200      	movs	r2, #0
 80023dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023e0:	480d      	ldr	r0, [pc, #52]	; (8002418 <_ZN3LED2LREaa+0x6c>)
 80023e2:	f008 fc5f 	bl	800aca4 <HAL_GPIO_WritePin>

	if(r_status == 1)
 80023e6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d106      	bne.n	80023fc <_ZN3LED2LREaa+0x50>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 80023ee:	2201      	movs	r2, #1
 80023f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80023f4:	4808      	ldr	r0, [pc, #32]	; (8002418 <_ZN3LED2LREaa+0x6c>)
 80023f6:	f008 fc55 	bl	800aca4 <HAL_GPIO_WritePin>
	else if(r_status == 0)
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);

}
 80023fa:	e009      	b.n	8002410 <_ZN3LED2LREaa+0x64>
	else if(r_status == 0)
 80023fc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d105      	bne.n	8002410 <_ZN3LED2LREaa+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8002404:	2200      	movs	r2, #0
 8002406:	f44f 7100 	mov.w	r1, #512	; 0x200
 800240a:	4803      	ldr	r0, [pc, #12]	; (8002418 <_ZN3LED2LREaa+0x6c>)
 800240c:	f008 fc4a 	bl	800aca4 <HAL_GPIO_WritePin>
}
 8002410:	bf00      	nop
 8002412:	3708      	adds	r7, #8
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	40020000 	.word	0x40020000

0800241c <_ZN10LineSensorC1Ev>:
float mon_sens9;
float mon_sens10;
float mon_sens11;
float mon_sens12;

LineSensor::LineSensor()
 800241c:	b580      	push	{r7, lr}
 800241e:	b092      	sub	sp, #72	; 0x48
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 800242a:	4618      	mov	r0, r3
 800242c:	f7ff fe92 	bl	8002154 <_ZN8JoyStickC1Ev>
{
	for(auto &av : analog_val_){
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	637b      	str	r3, [r7, #52]	; 0x34
 8002434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002436:	647b      	str	r3, [r7, #68]	; 0x44
 8002438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800243a:	331c      	adds	r3, #28
 800243c:	633b      	str	r3, [r7, #48]	; 0x30
 800243e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002442:	429a      	cmp	r2, r3
 8002444:	d008      	beq.n	8002458 <_ZN10LineSensorC1Ev+0x3c>
 8002446:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002448:	62fb      	str	r3, [r7, #44]	; 0x2c
		av = 0;
 800244a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800244c:	2200      	movs	r2, #0
 800244e:	801a      	strh	r2, [r3, #0]
	for(auto &av : analog_val_){
 8002450:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002452:	3302      	adds	r3, #2
 8002454:	647b      	str	r3, [r7, #68]	; 0x44
 8002456:	e7f2      	b.n	800243e <_ZN10LineSensorC1Ev+0x22>
	}

	for(auto &s : sensor){
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 800245e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002462:	643b      	str	r3, [r7, #64]	; 0x40
 8002464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002466:	3338      	adds	r3, #56	; 0x38
 8002468:	627b      	str	r3, [r7, #36]	; 0x24
 800246a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800246c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246e:	429a      	cmp	r2, r3
 8002470:	d009      	beq.n	8002486 <_ZN10LineSensorC1Ev+0x6a>
 8002472:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002474:	623b      	str	r3, [r7, #32]
		s = 0;
 8002476:	6a3b      	ldr	r3, [r7, #32]
 8002478:	f04f 0200 	mov.w	r2, #0
 800247c:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor){
 800247e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002480:	3304      	adds	r3, #4
 8002482:	643b      	str	r3, [r7, #64]	; 0x40
 8002484:	e7f1      	b.n	800246a <_ZN10LineSensorC1Ev+0x4e>
	}

	for(auto &m : offset_values_){
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800248c:	61fb      	str	r3, [r7, #28]
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	3338      	adds	r3, #56	; 0x38
 8002496:	61bb      	str	r3, [r7, #24]
 8002498:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	429a      	cmp	r2, r3
 800249e:	d009      	beq.n	80024b4 <_ZN10LineSensorC1Ev+0x98>
 80024a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024a2:	617b      	str	r3, [r7, #20]
		m = 0;
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	f04f 0200 	mov.w	r2, #0
 80024aa:	601a      	str	r2, [r3, #0]
	for(auto &m : offset_values_){
 80024ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024ae:	3304      	adds	r3, #4
 80024b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024b2:	e7f1      	b.n	8002498 <_ZN10LineSensorC1Ev+0x7c>
	}
	for(auto &s : sensor_coefficient_){
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 80024ba:	613b      	str	r3, [r7, #16]
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	63bb      	str	r3, [r7, #56]	; 0x38
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	3338      	adds	r3, #56	; 0x38
 80024c4:	60fb      	str	r3, [r7, #12]
 80024c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d009      	beq.n	80024e2 <_ZN10LineSensorC1Ev+0xc6>
 80024ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024d0:	60bb      	str	r3, [r7, #8]
		s = 1;
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80024d8:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor_coefficient_){
 80024da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024dc:	3304      	adds	r3, #4
 80024de:	63bb      	str	r3, [r7, #56]	; 0x38
 80024e0:	e7f1      	b.n	80024c6 <_ZN10LineSensorC1Ev+0xaa>
	}

}
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	4618      	mov	r0, r3
 80024e6:	3748      	adds	r7, #72	; 0x48
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}

080024ec <_ZN10LineSensor8ADCStartEv>:

void LineSensor::ADCStart()
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) analog_val_, 14);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	220e      	movs	r2, #14
 80024f8:	4619      	mov	r1, r3
 80024fa:	4803      	ldr	r0, [pc, #12]	; (8002508 <_ZN10LineSensor8ADCStartEv+0x1c>)
 80024fc:	f007 f9a2 	bl	8009844 <HAL_ADC_Start_DMA>
}
 8002500:	bf00      	nop
 8002502:	3708      	adds	r7, #8
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	20044764 	.word	0x20044764

0800250c <_ZN10LineSensor17storeSensorValuesEv>:

void LineSensor::storeSensorValues()
{
 800250c:	b480      	push	{r7}
 800250e:	b085      	sub	sp, #20
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
	static uint8_t cnt = 0;

	for(int i = 0; i < AD_DATA_SIZE; i++){
 8002514:	2300      	movs	r3, #0
 8002516:	60fb      	str	r3, [r7, #12]
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2b0d      	cmp	r3, #13
 800251c:	dc2f      	bgt.n	800257e <_ZN10LineSensor17storeSensorValuesEv+0x72>
		store_vals_[cnt][i] = sensor_coefficient_[i] * (analog_val_[i] - offset_values_[i]) ;
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	3392      	adds	r3, #146	; 0x92
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	4413      	add	r3, r2
 8002528:	3304      	adds	r3, #4
 800252a:	ed93 7a00 	vldr	s14, [r3]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	68fa      	ldr	r2, [r7, #12]
 8002532:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002536:	ee07 3a90 	vmov	s15, r3
 800253a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	33a0      	adds	r3, #160	; 0xa0
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	4413      	add	r3, r2
 8002548:	3304      	adds	r3, #4
 800254a:	edd3 7a00 	vldr	s15, [r3]
 800254e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002552:	4b14      	ldr	r3, [pc, #80]	; (80025a4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	4619      	mov	r1, r3
 8002558:	ee67 7a27 	vmul.f32	s15, s14, s15
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	460b      	mov	r3, r1
 8002560:	00db      	lsls	r3, r3, #3
 8002562:	1a5b      	subs	r3, r3, r1
 8002564:	005b      	lsls	r3, r3, #1
 8002566:	68f9      	ldr	r1, [r7, #12]
 8002568:	440b      	add	r3, r1
 800256a:	3306      	adds	r3, #6
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	4413      	add	r3, r2
 8002570:	3304      	adds	r3, #4
 8002572:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < AD_DATA_SIZE; i++){
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	3301      	adds	r3, #1
 800257a:	60fb      	str	r3, [r7, #12]
 800257c:	e7cc      	b.n	8002518 <_ZN10LineSensor17storeSensorValuesEv+0xc>
		//store_vals_[cnt][i] = float(analog_val_[i]) ;
	}

	cnt++;
 800257e:	4b09      	ldr	r3, [pc, #36]	; (80025a4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	3301      	adds	r3, #1
 8002584:	b2da      	uxtb	r2, r3
 8002586:	4b07      	ldr	r3, [pc, #28]	; (80025a4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002588:	701a      	strb	r2, [r3, #0]
	if(cnt >= 10) cnt = 0;
 800258a:	4b06      	ldr	r3, [pc, #24]	; (80025a4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	2b09      	cmp	r3, #9
 8002590:	d902      	bls.n	8002598 <_ZN10LineSensor17storeSensorValuesEv+0x8c>
 8002592:	4b04      	ldr	r3, [pc, #16]	; (80025a4 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8002594:	2200      	movs	r2, #0
 8002596:	701a      	strb	r2, [r3, #0]


}
 8002598:	bf00      	nop
 800259a:	3714      	adds	r7, #20
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr
 80025a4:	20000250 	.word	0x20000250

080025a8 <_ZN10LineSensor18updateSensorValuesEv>:
void LineSensor::updateSensorValues()
{
 80025a8:	b490      	push	{r4, r7}
 80025aa:	b08e      	sub	sp, #56	; 0x38
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
	float temp_val[10];
	static float pre_sensor[AD_DATA_SIZE];

	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 80025b0:	2300      	movs	r3, #0
 80025b2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80025b6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80025ba:	2b0d      	cmp	r3, #13
 80025bc:	f200 808e 	bhi.w	80026dc <_ZN10LineSensor18updateSensorValuesEv+0x134>
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 80025c0:	2300      	movs	r3, #0
 80025c2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80025c6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80025ca:	2b09      	cmp	r3, #9
 80025cc:	d81c      	bhi.n	8002608 <_ZN10LineSensor18updateSensorValuesEv+0x60>
			temp_val[store_cnt] = store_vals_[store_cnt][ad_cnt];
 80025ce:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80025d2:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 80025d6:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	4613      	mov	r3, r2
 80025de:	00db      	lsls	r3, r3, #3
 80025e0:	1a9b      	subs	r3, r3, r2
 80025e2:	005b      	lsls	r3, r3, #1
 80025e4:	4423      	add	r3, r4
 80025e6:	3306      	adds	r3, #6
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	4403      	add	r3, r0
 80025ec:	3304      	adds	r3, #4
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	008b      	lsls	r3, r1, #2
 80025f2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80025f6:	440b      	add	r3, r1
 80025f8:	3b30      	subs	r3, #48	; 0x30
 80025fa:	601a      	str	r2, [r3, #0]
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 80025fc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002600:	3301      	adds	r3, #1
 8002602:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002606:	e7de      	b.n	80025c6 <_ZN10LineSensor18updateSensorValuesEv+0x1e>
		}

		// sort
		for(uint8_t i = 0; i < 10; i++){
 8002608:	2300      	movs	r3, #0
 800260a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800260e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002612:	2b09      	cmp	r3, #9
 8002614:	d84d      	bhi.n	80026b2 <_ZN10LineSensor18updateSensorValuesEv+0x10a>
			for (uint8_t j = i+1; j < 10; j++) {
 8002616:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800261a:	3301      	adds	r3, #1
 800261c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8002620:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002624:	2b09      	cmp	r3, #9
 8002626:	d83e      	bhi.n	80026a6 <_ZN10LineSensor18updateSensorValuesEv+0xfe>
				if(temp_val[i] < temp_val[j]){
 8002628:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002632:	4413      	add	r3, r2
 8002634:	3b30      	subs	r3, #48	; 0x30
 8002636:	ed93 7a00 	vldr	s14, [r3]
 800263a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002644:	4413      	add	r3, r2
 8002646:	3b30      	subs	r3, #48	; 0x30
 8002648:	edd3 7a00 	vldr	s15, [r3]
 800264c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002654:	d521      	bpl.n	800269a <_ZN10LineSensor18updateSensorValuesEv+0xf2>
					float tmp = temp_val[j];
 8002656:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002660:	4413      	add	r3, r2
 8002662:	3b30      	subs	r3, #48	; 0x30
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	633b      	str	r3, [r7, #48]	; 0x30
					temp_val[j] = temp_val[i];
 8002668:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 800266c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002670:	0092      	lsls	r2, r2, #2
 8002672:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002676:	440a      	add	r2, r1
 8002678:	3a30      	subs	r2, #48	; 0x30
 800267a:	6812      	ldr	r2, [r2, #0]
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002682:	440b      	add	r3, r1
 8002684:	3b30      	subs	r3, #48	; 0x30
 8002686:	601a      	str	r2, [r3, #0]
					temp_val[i] = tmp;
 8002688:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002692:	4413      	add	r3, r2
 8002694:	3b30      	subs	r3, #48	; 0x30
 8002696:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002698:	601a      	str	r2, [r3, #0]
			for (uint8_t j = i+1; j < 10; j++) {
 800269a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800269e:	3301      	adds	r3, #1
 80026a0:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80026a4:	e7bc      	b.n	8002620 <_ZN10LineSensor18updateSensorValuesEv+0x78>
		for(uint8_t i = 0; i < 10; i++){
 80026a6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80026aa:	3301      	adds	r3, #1
 80026ac:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80026b0:	e7ad      	b.n	800260e <_ZN10LineSensor18updateSensorValuesEv+0x66>
				}
			}
		}

		//sensor[ad_cnt] = ((R_LINESENSE)*(temp_val[5]) + (1.0 - (R_LINESENSE))* (pre_sensor[ad_cnt]));
		sensor[ad_cnt] = temp_val[5];
 80026b2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80026b6:	69fa      	ldr	r2, [r7, #28]
 80026b8:	6879      	ldr	r1, [r7, #4]
 80026ba:	33b0      	adds	r3, #176	; 0xb0
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	440b      	add	r3, r1
 80026c0:	601a      	str	r2, [r3, #0]
		pre_sensor[ad_cnt] = temp_val[5];
 80026c2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80026c6:	69fa      	ldr	r2, [r7, #28]
 80026c8:	492c      	ldr	r1, [pc, #176]	; (800277c <_ZN10LineSensor18updateSensorValuesEv+0x1d4>)
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	440b      	add	r3, r1
 80026ce:	601a      	str	r2, [r3, #0]
	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 80026d0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80026d4:	3301      	adds	r3, #1
 80026d6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80026da:	e76c      	b.n	80025b6 <_ZN10LineSensor18updateSensorValuesEv+0xe>
	}

	mon_sens = store_vals_[5][5];
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80026e2:	4a27      	ldr	r2, [pc, #156]	; (8002780 <_ZN10LineSensor18updateSensorValuesEv+0x1d8>)
 80026e4:	6013      	str	r3, [r2, #0]
	mon_sens_lpf = sensor[5];
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80026ec:	4a25      	ldr	r2, [pc, #148]	; (8002784 <_ZN10LineSensor18updateSensorValuesEv+0x1dc>)
 80026ee:	6013      	str	r3, [r2, #0]

	mon_sens0 = sensor[0];
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80026f6:	4a24      	ldr	r2, [pc, #144]	; (8002788 <_ZN10LineSensor18updateSensorValuesEv+0x1e0>)
 80026f8:	6013      	str	r3, [r2, #0]
	mon_sens1 = sensor[1];
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8002700:	4a22      	ldr	r2, [pc, #136]	; (800278c <_ZN10LineSensor18updateSensorValuesEv+0x1e4>)
 8002702:	6013      	str	r3, [r2, #0]
	mon_sens2 = sensor[2];
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800270a:	4a21      	ldr	r2, [pc, #132]	; (8002790 <_ZN10LineSensor18updateSensorValuesEv+0x1e8>)
 800270c:	6013      	str	r3, [r2, #0]
	mon_sens3 = sensor[3];
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8002714:	4a1f      	ldr	r2, [pc, #124]	; (8002794 <_ZN10LineSensor18updateSensorValuesEv+0x1ec>)
 8002716:	6013      	str	r3, [r2, #0]
	mon_sens4 = sensor[4];
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 800271e:	4a1e      	ldr	r2, [pc, #120]	; (8002798 <_ZN10LineSensor18updateSensorValuesEv+0x1f0>)
 8002720:	6013      	str	r3, [r2, #0]
	mon_sens5 = sensor[5];
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8002728:	4a1c      	ldr	r2, [pc, #112]	; (800279c <_ZN10LineSensor18updateSensorValuesEv+0x1f4>)
 800272a:	6013      	str	r3, [r2, #0]
	mon_sens6 = sensor[6];
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8002732:	4a1b      	ldr	r2, [pc, #108]	; (80027a0 <_ZN10LineSensor18updateSensorValuesEv+0x1f8>)
 8002734:	6013      	str	r3, [r2, #0]
	mon_sens7 = sensor[7];
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f8d3 32dc 	ldr.w	r3, [r3, #732]	; 0x2dc
 800273c:	4a19      	ldr	r2, [pc, #100]	; (80027a4 <_ZN10LineSensor18updateSensorValuesEv+0x1fc>)
 800273e:	6013      	str	r3, [r2, #0]
	mon_sens8 = sensor[8];
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f8d3 32e0 	ldr.w	r3, [r3, #736]	; 0x2e0
 8002746:	4a18      	ldr	r2, [pc, #96]	; (80027a8 <_ZN10LineSensor18updateSensorValuesEv+0x200>)
 8002748:	6013      	str	r3, [r2, #0]
	mon_sens9 = sensor[9];
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f8d3 32e4 	ldr.w	r3, [r3, #740]	; 0x2e4
 8002750:	4a16      	ldr	r2, [pc, #88]	; (80027ac <_ZN10LineSensor18updateSensorValuesEv+0x204>)
 8002752:	6013      	str	r3, [r2, #0]
	mon_sens10 = sensor[10];
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800275a:	4a15      	ldr	r2, [pc, #84]	; (80027b0 <_ZN10LineSensor18updateSensorValuesEv+0x208>)
 800275c:	6013      	str	r3, [r2, #0]
	mon_sens11 = sensor[11];
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	f8d3 32ec 	ldr.w	r3, [r3, #748]	; 0x2ec
 8002764:	4a13      	ldr	r2, [pc, #76]	; (80027b4 <_ZN10LineSensor18updateSensorValuesEv+0x20c>)
 8002766:	6013      	str	r3, [r2, #0]
	mon_sens12 = sensor[12];
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800276e:	4a12      	ldr	r2, [pc, #72]	; (80027b8 <_ZN10LineSensor18updateSensorValuesEv+0x210>)
 8002770:	6013      	str	r3, [r2, #0]
}
 8002772:	bf00      	nop
 8002774:	3738      	adds	r7, #56	; 0x38
 8002776:	46bd      	mov	sp, r7
 8002778:	bc90      	pop	{r4, r7}
 800277a:	4770      	bx	lr
 800277c:	20000254 	.word	0x20000254
 8002780:	20000214 	.word	0x20000214
 8002784:	20000218 	.word	0x20000218
 8002788:	2000021c 	.word	0x2000021c
 800278c:	20000220 	.word	0x20000220
 8002790:	20000224 	.word	0x20000224
 8002794:	20000228 	.word	0x20000228
 8002798:	2000022c 	.word	0x2000022c
 800279c:	20000230 	.word	0x20000230
 80027a0:	20000234 	.word	0x20000234
 80027a4:	20000238 	.word	0x20000238
 80027a8:	2000023c 	.word	0x2000023c
 80027ac:	20000240 	.word	0x20000240
 80027b0:	20000244 	.word	0x20000244
 80027b4:	20000248 	.word	0x20000248
 80027b8:	2000024c 	.word	0x2000024c

080027bc <_ZN10LineSensor11calibrationEv>:

void LineSensor::calibration()
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b0a0      	sub	sp, #128	; 0x80
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
	HAL_Delay(100);
 80027c4:	2064      	movs	r0, #100	; 0x64
 80027c6:	f006 ffd7 	bl	8009778 <HAL_Delay>

	lcd_clear();
 80027ca:	f7fe fc69 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 80027ce:	2100      	movs	r1, #0
 80027d0:	2000      	movs	r0, #0
 80027d2:	f7fe fc75 	bl	80010c0 <lcd_locate>
	lcd_printf("LineSens");
 80027d6:	4886      	ldr	r0, [pc, #536]	; (80029f0 <_ZN10LineSensor11calibrationEv+0x234>)
 80027d8:	f7fe fc9c 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 80027dc:	2101      	movs	r1, #1
 80027de:	2000      	movs	r0, #0
 80027e0:	f7fe fc6e 	bl	80010c0 <lcd_locate>
	lcd_printf("Calib   ");
 80027e4:	4883      	ldr	r0, [pc, #524]	; (80029f4 <_ZN10LineSensor11calibrationEv+0x238>)
 80027e6:	f7fe fc95 	bl	8001114 <lcd_printf>


	float max_values[AD_DATA_SIZE];
	float min_values[AD_DATA_SIZE];

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80027ea:	2300      	movs	r3, #0
 80027ec:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 80027f0:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 80027f4:	2b0d      	cmp	r3, #13
 80027f6:	d823      	bhi.n	8002840 <_ZN10LineSensor11calibrationEv+0x84>
		max_values[i] = sensor[i];
 80027f8:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 80027fc:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002800:	6879      	ldr	r1, [r7, #4]
 8002802:	32b0      	adds	r2, #176	; 0xb0
 8002804:	0092      	lsls	r2, r2, #2
 8002806:	440a      	add	r2, r1
 8002808:	6812      	ldr	r2, [r2, #0]
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002810:	440b      	add	r3, r1
 8002812:	3b40      	subs	r3, #64	; 0x40
 8002814:	601a      	str	r2, [r3, #0]
		min_values[i] = sensor[i];
 8002816:	f8b7 207e 	ldrh.w	r2, [r7, #126]	; 0x7e
 800281a:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 800281e:	6879      	ldr	r1, [r7, #4]
 8002820:	32b0      	adds	r2, #176	; 0xb0
 8002822:	0092      	lsls	r2, r2, #2
 8002824:	440a      	add	r2, r1
 8002826:	6812      	ldr	r2, [r2, #0]
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	f107 0180 	add.w	r1, r7, #128	; 0x80
 800282e:	440b      	add	r3, r1
 8002830:	3b78      	subs	r3, #120	; 0x78
 8002832:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002834:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8002838:	3301      	adds	r3, #1
 800283a:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
 800283e:	e7d7      	b.n	80027f0 <_ZN10LineSensor11calibrationEv+0x34>
	}

	while(joy_stick_.getValue() != JOY_C){
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 8002846:	4618      	mov	r0, r3
 8002848:	f7ff fc90 	bl	800216c <_ZN8JoyStick8getValueEv>
 800284c:	4603      	mov	r3, r0
 800284e:	2b02      	cmp	r3, #2
 8002850:	bf14      	ite	ne
 8002852:	2301      	movne	r3, #1
 8002854:	2300      	moveq	r3, #0
 8002856:	b2db      	uxtb	r3, r3
 8002858:	2b00      	cmp	r3, #0
 800285a:	d079      	beq.n	8002950 <_ZN10LineSensor11calibrationEv+0x194>

		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800285c:	2300      	movs	r3, #0
 800285e:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 8002862:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002866:	2b0d      	cmp	r3, #13
 8002868:	d850      	bhi.n	800290c <_ZN10LineSensor11calibrationEv+0x150>
			if(max_values[i] < sensor[i]){
 800286a:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002874:	4413      	add	r3, r2
 8002876:	3b40      	subs	r3, #64	; 0x40
 8002878:	ed93 7a00 	vldr	s14, [r3]
 800287c:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	33b0      	adds	r3, #176	; 0xb0
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	4413      	add	r3, r2
 8002888:	edd3 7a00 	vldr	s15, [r3]
 800288c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002894:	d50f      	bpl.n	80028b6 <_ZN10LineSensor11calibrationEv+0xfa>
				max_values[i] = sensor[i];
 8002896:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 800289a:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 800289e:	6879      	ldr	r1, [r7, #4]
 80028a0:	32b0      	adds	r2, #176	; 0xb0
 80028a2:	0092      	lsls	r2, r2, #2
 80028a4:	440a      	add	r2, r1
 80028a6:	6812      	ldr	r2, [r2, #0]
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80028ae:	440b      	add	r3, r1
 80028b0:	3b40      	subs	r3, #64	; 0x40
 80028b2:	601a      	str	r2, [r3, #0]
 80028b4:	e024      	b.n	8002900 <_ZN10LineSensor11calibrationEv+0x144>
			}
			else if(min_values[i] > sensor[i]){
 80028b6:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80028c0:	4413      	add	r3, r2
 80028c2:	3b78      	subs	r3, #120	; 0x78
 80028c4:	ed93 7a00 	vldr	s14, [r3]
 80028c8:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	33b0      	adds	r3, #176	; 0xb0
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	4413      	add	r3, r2
 80028d4:	edd3 7a00 	vldr	s15, [r3]
 80028d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028e0:	dd0e      	ble.n	8002900 <_ZN10LineSensor11calibrationEv+0x144>
				min_values[i] = sensor[i];
 80028e2:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 80028e6:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 80028ea:	6879      	ldr	r1, [r7, #4]
 80028ec:	32b0      	adds	r2, #176	; 0xb0
 80028ee:	0092      	lsls	r2, r2, #2
 80028f0:	440a      	add	r2, r1
 80028f2:	6812      	ldr	r2, [r2, #0]
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80028fa:	440b      	add	r3, r1
 80028fc:	3b78      	subs	r3, #120	; 0x78
 80028fe:	601a      	str	r2, [r3, #0]
		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002900:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8002904:	3301      	adds	r3, #1
 8002906:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
 800290a:	e7aa      	b.n	8002862 <_ZN10LineSensor11calibrationEv+0xa6>
			}
		}

		if(rotary_switch_.getValue() == 0){
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f203 23be 	addw	r3, r3, #702	; 0x2be
 8002912:	4618      	mov	r0, r3
 8002914:	f002 fd9e 	bl	8005454 <_ZN12RotarySwitch8getValueEv>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	bf0c      	ite	eq
 800291e:	2301      	moveq	r3, #1
 8002920:	2300      	movne	r3, #0
 8002922:	b2db      	uxtb	r3, r3
 8002924:	2b00      	cmp	r3, #0
 8002926:	d009      	beq.n	800293c <_ZN10LineSensor11calibrationEv+0x180>
			led_.LR(-1, 1);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 800292e:	2201      	movs	r2, #1
 8002930:	f04f 31ff 	mov.w	r1, #4294967295
 8002934:	4618      	mov	r0, r3
 8002936:	f7ff fd39 	bl	80023ac <_ZN3LED2LREaa>
 800293a:	e781      	b.n	8002840 <_ZN10LineSensor11calibrationEv+0x84>

		}
		else{
			led_.LR(-1, 0);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8002942:	2200      	movs	r2, #0
 8002944:	f04f 31ff 	mov.w	r1, #4294967295
 8002948:	4618      	mov	r0, r3
 800294a:	f7ff fd2f 	bl	80023ac <_ZN3LED2LREaa>
	while(joy_stick_.getValue() != JOY_C){
 800294e:	e777      	b.n	8002840 <_ZN10LineSensor11calibrationEv+0x84>
		printf("%f, ", m);
	}
		printf("\n");
	*/

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002950:	2300      	movs	r3, #0
 8002952:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 8002956:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800295a:	2b0d      	cmp	r3, #13
 800295c:	d826      	bhi.n	80029ac <_ZN10LineSensor11calibrationEv+0x1f0>
		sensor_coefficient_[i] = 1000 / (max_values[i] - min_values[i]);
 800295e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002968:	4413      	add	r3, r2
 800296a:	3b40      	subs	r3, #64	; 0x40
 800296c:	ed93 7a00 	vldr	s14, [r3]
 8002970:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800297a:	4413      	add	r3, r2
 800297c:	3b78      	subs	r3, #120	; 0x78
 800297e:	edd3 7a00 	vldr	s15, [r3]
 8002982:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002986:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800298a:	eddf 6a1b 	vldr	s13, [pc, #108]	; 80029f8 <_ZN10LineSensor11calibrationEv+0x23c>
 800298e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	3392      	adds	r3, #146	; 0x92
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	4413      	add	r3, r2
 800299a:	3304      	adds	r3, #4
 800299c:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80029a0:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80029a4:	3301      	adds	r3, #1
 80029a6:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
 80029aa:	e7d4      	b.n	8002956 <_ZN10LineSensor11calibrationEv+0x19a>
	}
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80029ac:	2300      	movs	r3, #0
 80029ae:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 80029b2:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80029b6:	2b0d      	cmp	r3, #13
 80029b8:	d815      	bhi.n	80029e6 <_ZN10LineSensor11calibrationEv+0x22a>
		offset_values_[i] = min_values[i];
 80029ba:	f8b7 2078 	ldrh.w	r2, [r7, #120]	; 0x78
 80029be:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80029c2:	0092      	lsls	r2, r2, #2
 80029c4:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80029c8:	440a      	add	r2, r1
 80029ca:	3a78      	subs	r2, #120	; 0x78
 80029cc:	6812      	ldr	r2, [r2, #0]
 80029ce:	6879      	ldr	r1, [r7, #4]
 80029d0:	33a0      	adds	r3, #160	; 0xa0
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	440b      	add	r3, r1
 80029d6:	3304      	adds	r3, #4
 80029d8:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80029da:	f8b7 3078 	ldrh.w	r3, [r7, #120]	; 0x78
 80029de:	3301      	adds	r3, #1
 80029e0:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
 80029e4:	e7e5      	b.n	80029b2 <_ZN10LineSensor11calibrationEv+0x1f6>
	}


}
 80029e6:	bf00      	nop
 80029e8:	3780      	adds	r7, #128	; 0x80
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	0801966c 	.word	0x0801966c
 80029f4:	08019678 	.word	0x08019678
 80029f8:	447a0000 	.word	0x447a0000

080029fc <_ZN10LineSensor13emergencyStopEv>:
{
	//printf("%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n", sensor[0], sensor[1], sensor[2], sensor[3], sensor[4], sensor[5], sensor[6], sensor[7], sensor[8], sensor[9], sensor[10], sensor[11], sensor[12], sensor[13]);
}

bool LineSensor::emergencyStop()
{
 80029fc:	b480      	push	{r7}
 80029fe:	b085      	sub	sp, #20
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
	uint16_t out_cnt = 0;
 8002a04:	2300      	movs	r3, #0
 8002a06:	81fb      	strh	r3, [r7, #14]
	/*
	for(const auto & s : sensor){
		if(s >= 550) out_cnt++;
	}
	*/
	for(uint16_t i = 3; i <= 10; i++){
 8002a08:	2303      	movs	r3, #3
 8002a0a:	81bb      	strh	r3, [r7, #12]
 8002a0c:	89bb      	ldrh	r3, [r7, #12]
 8002a0e:	2b0a      	cmp	r3, #10
 8002a10:	d814      	bhi.n	8002a3c <_ZN10LineSensor13emergencyStopEv+0x40>
		if(sensor[i] >= 550) out_cnt++;
 8002a12:	89bb      	ldrh	r3, [r7, #12]
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	33b0      	adds	r3, #176	; 0xb0
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	4413      	add	r3, r2
 8002a1c:	edd3 7a00 	vldr	s15, [r3]
 8002a20:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8002a90 <_ZN10LineSensor13emergencyStopEv+0x94>
 8002a24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a2c:	db02      	blt.n	8002a34 <_ZN10LineSensor13emergencyStopEv+0x38>
 8002a2e:	89fb      	ldrh	r3, [r7, #14]
 8002a30:	3301      	adds	r3, #1
 8002a32:	81fb      	strh	r3, [r7, #14]
	for(uint16_t i = 3; i <= 10; i++){
 8002a34:	89bb      	ldrh	r3, [r7, #12]
 8002a36:	3301      	adds	r3, #1
 8002a38:	81bb      	strh	r3, [r7, #12]
 8002a3a:	e7e7      	b.n	8002a0c <_ZN10LineSensor13emergencyStopEv+0x10>
	}

	if(out_cnt >= 8){
 8002a3c:	89fb      	ldrh	r3, [r7, #14]
 8002a3e:	2b07      	cmp	r3, #7
 8002a40:	d906      	bls.n	8002a50 <_ZN10LineSensor13emergencyStopEv+0x54>
		cnt++;
 8002a42:	4b14      	ldr	r3, [pc, #80]	; (8002a94 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002a44:	881b      	ldrh	r3, [r3, #0]
 8002a46:	3301      	adds	r3, #1
 8002a48:	b29a      	uxth	r2, r3
 8002a4a:	4b12      	ldr	r3, [pc, #72]	; (8002a94 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002a4c:	801a      	strh	r2, [r3, #0]
 8002a4e:	e002      	b.n	8002a56 <_ZN10LineSensor13emergencyStopEv+0x5a>
	}
	else{
		cnt = 0;
 8002a50:	4b10      	ldr	r3, [pc, #64]	; (8002a94 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	801a      	strh	r2, [r3, #0]
	}

	if(cnt >= 100){
 8002a56:	4b0f      	ldr	r3, [pc, #60]	; (8002a94 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002a58:	881b      	ldrh	r3, [r3, #0]
 8002a5a:	2b63      	cmp	r3, #99	; 0x63
 8002a5c:	d903      	bls.n	8002a66 <_ZN10LineSensor13emergencyStopEv+0x6a>
		flag = true;
 8002a5e:	4b0e      	ldr	r3, [pc, #56]	; (8002a98 <_ZN10LineSensor13emergencyStopEv+0x9c>)
 8002a60:	2201      	movs	r2, #1
 8002a62:	701a      	strb	r2, [r3, #0]
 8002a64:	e002      	b.n	8002a6c <_ZN10LineSensor13emergencyStopEv+0x70>
	}
	else flag = false;
 8002a66:	4b0c      	ldr	r3, [pc, #48]	; (8002a98 <_ZN10LineSensor13emergencyStopEv+0x9c>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	701a      	strb	r2, [r3, #0]

	if(cnt >= 10000) cnt = 10000;
 8002a6c:	4b09      	ldr	r3, [pc, #36]	; (8002a94 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002a6e:	881b      	ldrh	r3, [r3, #0]
 8002a70:	f242 720f 	movw	r2, #9999	; 0x270f
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d903      	bls.n	8002a80 <_ZN10LineSensor13emergencyStopEv+0x84>
 8002a78:	4b06      	ldr	r3, [pc, #24]	; (8002a94 <_ZN10LineSensor13emergencyStopEv+0x98>)
 8002a7a:	f242 7210 	movw	r2, #10000	; 0x2710
 8002a7e:	801a      	strh	r2, [r3, #0]

	return flag;
 8002a80:	4b05      	ldr	r3, [pc, #20]	; (8002a98 <_ZN10LineSensor13emergencyStopEv+0x9c>)
 8002a82:	781b      	ldrb	r3, [r3, #0]

}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3714      	adds	r7, #20
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr
 8002a90:	44098000 	.word	0x44098000
 8002a94:	2000028c 	.word	0x2000028c
 8002a98:	2000028e 	.word	0x2000028e

08002a9c <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	ed87 0a01 	vstr	s0, [r7, #4]
 8002aa6:	edd7 7a01 	vldr	s15, [r7, #4]
 8002aaa:	eef0 7ae7 	vabs.f32	s15, s15
 8002aae:	eeb0 0a67 	vmov.f32	s0, s15
 8002ab2:	370c      	adds	r7, #12
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr

08002abc <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC>:
float mon_ref_dis, mon_current_dis;
uint16_t mon_vel_idx, mon_i;
float mon_tar_vel;


LineTrace::LineTrace(Motor *motor, LineSensor *line_sensor, VelocityCtrl *velocity_ctrl, SideSensor *side_sensor, Encoder *encoder, Odometry *odometry, Logger *logger, IMU *imu, ESC *esc) :
 8002abc:	b480      	push	{r7}
 8002abe:	b087      	sub	sp, #28
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	60b9      	str	r1, [r7, #8]
 8002ac6:	607a      	str	r2, [r7, #4]
 8002ac8:	603b      	str	r3, [r7, #0]
				kp_(0), kd_(0), ki_(0),
				excution_flag_(false), i_reset_flag_(false), normal_ratio_(0),
				target_velocity_(0), max_velocity_(0), max_velocity2_(0), min_velocity_(0), min_velocity2_(0), logging_flag_(false),
				ref_distance_(0), velocity_play_flag_(false), velocity_table_idx_(0), mode_selector_(0), crossline_idx_(0), sideline_idx_(0), all_sideline_idx_(0),
				ignore_crossline_flag_(false), stable_flag_(false), stable_cnt_reset_flag_(false), max_acc_(0), max_dec_(0), max_acc2_(0), max_dec2_(0), correction_check_cnt_(0), all_sideline_flag_(false)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	f04f 0200 	mov.w	r2, #0
 8002ad0:	629a      	str	r2, [r3, #40]	; 0x28
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	f04f 0200 	mov.w	r2, #0
 8002ad8:	62da      	str	r2, [r3, #44]	; 0x2c
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f04f 0200 	mov.w	r2, #0
 8002ae0:	631a      	str	r2, [r3, #48]	; 0x30
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	f04f 0200 	mov.w	r2, #0
 8002af8:	639a      	str	r2, [r3, #56]	; 0x38
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f04f 0200 	mov.w	r2, #0
 8002b00:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f04f 0200 	mov.w	r2, #0
 8002b0a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	f04f 0200 	mov.w	r2, #0
 8002b14:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f04f 0200 	mov.w	r2, #0
 8002b1e:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	f04f 0200 	mov.w	r2, #0
 8002b28:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8002b3a:	f04f 0200 	mov.w	r2, #0
 8002b3e:	601a      	str	r2, [r3, #0]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002b46:	3344      	adds	r3, #68	; 0x44
 8002b48:	2200      	movs	r2, #0
 8002b4a:	701a      	strb	r2, [r3, #0]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002b52:	3346      	adds	r3, #70	; 0x46
 8002b54:	2200      	movs	r2, #0
 8002b56:	801a      	strh	r2, [r3, #0]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8002b5e:	3348      	adds	r3, #72	; 0x48
 8002b60:	2200      	movs	r2, #0
 8002b62:	801a      	strh	r2, [r3, #0]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002b6a:	337c      	adds	r3, #124	; 0x7c
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	801a      	strh	r2, [r3, #0]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002b76:	337e      	adds	r3, #126	; 0x7e
 8002b78:	2200      	movs	r2, #0
 8002b7a:	801a      	strh	r2, [r3, #0]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002b82:	3380      	adds	r3, #128	; 0x80
 8002b84:	2200      	movs	r2, #0
 8002b86:	801a      	strh	r2, [r3, #0]
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002b8e:	3382      	adds	r3, #130	; 0x82
 8002b90:	2200      	movs	r2, #0
 8002b92:	701a      	strb	r2, [r3, #0]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002b9a:	3383      	adds	r3, #131	; 0x83
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	701a      	strb	r2, [r3, #0]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002ba6:	3384      	adds	r3, #132	; 0x84
 8002ba8:	2200      	movs	r2, #0
 8002baa:	701a      	strb	r2, [r3, #0]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002bb2:	3388      	adds	r3, #136	; 0x88
 8002bb4:	f04f 0200 	mov.w	r2, #0
 8002bb8:	601a      	str	r2, [r3, #0]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002bc0:	338c      	adds	r3, #140	; 0x8c
 8002bc2:	f04f 0200 	mov.w	r2, #0
 8002bc6:	601a      	str	r2, [r3, #0]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002bce:	3390      	adds	r3, #144	; 0x90
 8002bd0:	f04f 0200 	mov.w	r2, #0
 8002bd4:	601a      	str	r2, [r3, #0]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002bdc:	3394      	adds	r3, #148	; 0x94
 8002bde:	f04f 0200 	mov.w	r2, #0
 8002be2:	601a      	str	r2, [r3, #0]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002bea:	3398      	adds	r3, #152	; 0x98
 8002bec:	2200      	movs	r2, #0
 8002bee:	801a      	strh	r2, [r3, #0]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002bf6:	339a      	adds	r3, #154	; 0x9a
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	701a      	strb	r2, [r3, #0]

{
	motor_ = motor;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	68ba      	ldr	r2, [r7, #8]
 8002c00:	601a      	str	r2, [r3, #0]
	line_sensor_ = line_sensor;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	683a      	ldr	r2, [r7, #0]
 8002c0c:	609a      	str	r2, [r3, #8]
	side_sensor_ = side_sensor;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	6a3a      	ldr	r2, [r7, #32]
 8002c12:	611a      	str	r2, [r3, #16]
	encoder_ = encoder;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c18:	615a      	str	r2, [r3, #20]
	odometry_ = odometry;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c1e:	619a      	str	r2, [r3, #24]
	logger_ = logger;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c24:	61da      	str	r2, [r3, #28]
	imu_ = imu;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c2a:	621a      	str	r2, [r3, #32]
	esc_ = esc;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c30:	625a      	str	r2, [r3, #36]	; 0x24

	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002c32:	2300      	movs	r3, #0
 8002c34:	82fb      	strh	r3, [r7, #22]
 8002c36:	8afb      	ldrh	r3, [r7, #22]
 8002c38:	f241 726f 	movw	r2, #5999	; 0x176f
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d80d      	bhi.n	8002c5c <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1a0>
		velocity_table_[i] = 0;
 8002c40:	8afb      	ldrh	r3, [r7, #22]
 8002c42:	68fa      	ldr	r2, [r7, #12]
 8002c44:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	4413      	add	r3, r2
 8002c4c:	3304      	adds	r3, #4
 8002c4e:	f04f 0200 	mov.w	r2, #0
 8002c52:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8002c54:	8afb      	ldrh	r3, [r7, #22]
 8002c56:	3301      	adds	r3, #1
 8002c58:	82fb      	strh	r3, [r7, #22]
 8002c5a:	e7ec      	b.n	8002c36 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x17a>
	}
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	82bb      	strh	r3, [r7, #20]
 8002c60:	8abb      	ldrh	r3, [r7, #20]
 8002c62:	2b63      	cmp	r3, #99	; 0x63
 8002c64:	d80e      	bhi.n	8002c84 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1c8>
		crossline_distance_[i] = 0;
 8002c66:	8abb      	ldrh	r3, [r7, #20]
 8002c68:	68fa      	ldr	r2, [r7, #12]
 8002c6a:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 8002c6e:	3312      	adds	r3, #18
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	4413      	add	r3, r2
 8002c74:	3304      	adds	r3, #4
 8002c76:	f04f 0200 	mov.w	r2, #0
 8002c7a:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < CROSSLINE_SIZE; i++){
 8002c7c:	8abb      	ldrh	r3, [r7, #20]
 8002c7e:	3301      	adds	r3, #1
 8002c80:	82bb      	strh	r3, [r7, #20]
 8002c82:	e7ed      	b.n	8002c60 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1a4>
	}
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002c84:	2300      	movs	r3, #0
 8002c86:	827b      	strh	r3, [r7, #18]
 8002c88:	8a7b      	ldrh	r3, [r7, #18]
 8002c8a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002c8e:	d20e      	bcs.n	8002cae <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1f2>
		sideline_distance_[i] = 0;
 8002c90:	8a7b      	ldrh	r3, [r7, #18]
 8002c92:	68fa      	ldr	r2, [r7, #12]
 8002c94:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 8002c98:	3336      	adds	r3, #54	; 0x36
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	4413      	add	r3, r2
 8002c9e:	3304      	adds	r3, #4
 8002ca0:	f04f 0200 	mov.w	r2, #0
 8002ca4:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002ca6:	8a7b      	ldrh	r3, [r7, #18]
 8002ca8:	3301      	adds	r3, #1
 8002caa:	827b      	strh	r3, [r7, #18]
 8002cac:	e7ec      	b.n	8002c88 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1cc>
	}
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002cae:	2300      	movs	r3, #0
 8002cb0:	823b      	strh	r3, [r7, #16]
 8002cb2:	8a3b      	ldrh	r3, [r7, #16]
 8002cb4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002cb8:	d20e      	bcs.n	8002cd8 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x21c>
		all_sideline_distance_[i] = 0;
 8002cba:	8a3b      	ldrh	r3, [r7, #16]
 8002cbc:	68fa      	ldr	r2, [r7, #12]
 8002cbe:	f503 5345 	add.w	r3, r3, #12608	; 0x3140
 8002cc2:	332a      	adds	r3, #42	; 0x2a
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	4413      	add	r3, r2
 8002cc8:	3304      	adds	r3, #4
 8002cca:	f04f 0200 	mov.w	r2, #0
 8002cce:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8002cd0:	8a3b      	ldrh	r3, [r7, #16]
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	823b      	strh	r3, [r7, #16]
 8002cd6:	e7ec      	b.n	8002cb2 <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC+0x1f6>
	}
}
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	4618      	mov	r0, r3
 8002cdc:	371c      	adds	r7, #28
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr
	...

08002ce8 <_ZN9LineTrace9calcErrorEv>:

// ---------------------------------------------------------------------------------------------------//
// -------------------------------------Sensor angle based line following --------------------------//
// ---------------------------------------------------------------------------------------------------//
float LineTrace::calcError()
{
 8002ce8:	b5b0      	push	{r4, r5, r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
	/*
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
			- (line_sensor_->sensor[7] + line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10] + line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]);
	*/

	float diff = (line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5])
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	ed93 7ab3 	vldr	s14, [r3, #716]	; 0x2cc
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 8002d00:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	edd3 7ab5 	vldr	s15, [r3, #724]	; 0x2d4
 8002d0c:	ee37 7a27 	vadd.f32	s14, s14, s15
			- (line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10]);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	edd3 6ab8 	vldr	s13, [r3, #736]	; 0x2e0
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	edd3 7ab9 	vldr	s15, [r3, #740]	; 0x2e4
 8002d20:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 8002d2c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d30:	ee77 7a67 	vsub.f32	s15, s14, s15
	float diff = (line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5])
 8002d34:	edc7 7a03 	vstr	s15, [r7, #12]
	mon_diff = diff;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	4a1d      	ldr	r2, [pc, #116]	; (8002db0 <_ZN9LineTrace9calcErrorEv+0xc8>)
 8002d3c:	6013      	str	r3, [r2, #0]

	diff = ((R_DIFF)*(diff) + (1.0 - (R_DIFF))* (pre_diff));
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	4618      	mov	r0, r3
 8002d42:	f7fd fc19 	bl	8000578 <__aeabi_f2d>
 8002d46:	a316      	add	r3, pc, #88	; (adr r3, 8002da0 <_ZN9LineTrace9calcErrorEv+0xb8>)
 8002d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d4c:	f7fd fc6c 	bl	8000628 <__aeabi_dmul>
 8002d50:	4603      	mov	r3, r0
 8002d52:	460c      	mov	r4, r1
 8002d54:	4625      	mov	r5, r4
 8002d56:	461c      	mov	r4, r3
 8002d58:	4b16      	ldr	r3, [pc, #88]	; (8002db4 <_ZN9LineTrace9calcErrorEv+0xcc>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f7fd fc0b 	bl	8000578 <__aeabi_f2d>
 8002d62:	a311      	add	r3, pc, #68	; (adr r3, 8002da8 <_ZN9LineTrace9calcErrorEv+0xc0>)
 8002d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d68:	f7fd fc5e 	bl	8000628 <__aeabi_dmul>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	460b      	mov	r3, r1
 8002d70:	4620      	mov	r0, r4
 8002d72:	4629      	mov	r1, r5
 8002d74:	f7fd faa2 	bl	80002bc <__adddf3>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	460c      	mov	r4, r1
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	4621      	mov	r1, r4
 8002d80:	f7fd ff4a 	bl	8000c18 <__aeabi_d2f>
 8002d84:	4603      	mov	r3, r0
 8002d86:	60fb      	str	r3, [r7, #12]
	//mon_diff_lpf = diff;

	pre_diff = diff;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	4a0a      	ldr	r2, [pc, #40]	; (8002db4 <_ZN9LineTrace9calcErrorEv+0xcc>)
 8002d8c:	6013      	str	r3, [r2, #0]

	return diff;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	ee07 3a90 	vmov	s15, r3

}
 8002d94:	eeb0 0a67 	vmov.f32	s0, s15
 8002d98:	3710      	adds	r7, #16
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bdb0      	pop	{r4, r5, r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	47ae147b 	.word	0x47ae147b
 8002da4:	3fb47ae1 	.word	0x3fb47ae1
 8002da8:	d70a3d71 	.word	0xd70a3d71
 8002dac:	3fed70a3 	.word	0x3fed70a3
 8002db0:	20000290 	.word	0x20000290
 8002db4:	200002b0 	.word	0x200002b0

08002db8 <_ZN9LineTrace8pidTraceEv>:
}
// ---------------------------------------------------------------------------------------------------//
// ----------------------------------Standar line following ------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::pidTrace()
{
 8002db8:	b5b0      	push	{r4, r5, r7, lr}
 8002dba:	b086      	sub	sp, #24
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
	float diff = calcError();
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f7ff ff91 	bl	8002ce8 <_ZN9LineTrace9calcErrorEv>
 8002dc6:	ed87 0a05 	vstr	s0, [r7, #20]
	static float pre_diff = 0;
	float p, d;
	static float i;

	if(i_reset_flag_ == true){
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d007      	beq.n	8002de4 <_ZN9LineTrace8pidTraceEv+0x2c>
		i = 0;
 8002dd4:	4b3c      	ldr	r3, [pc, #240]	; (8002ec8 <_ZN9LineTrace8pidTraceEv+0x110>)
 8002dd6:	f04f 0200 	mov.w	r2, #0
 8002dda:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	}

	p = kp_ * diff;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002dea:	ed97 7a05 	vldr	s14, [r7, #20]
 8002dee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002df2:	edc7 7a04 	vstr	s15, [r7, #16]
	d = kd_ * (diff - pre_diff) / DELTA_T;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8002dfc:	4b33      	ldr	r3, [pc, #204]	; (8002ecc <_ZN9LineTrace8pidTraceEv+0x114>)
 8002dfe:	edd3 7a00 	vldr	s15, [r3]
 8002e02:	edd7 6a05 	vldr	s13, [r7, #20]
 8002e06:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002e0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e0e:	ee17 0a90 	vmov	r0, s15
 8002e12:	f7fd fbb1 	bl	8000578 <__aeabi_f2d>
 8002e16:	a32a      	add	r3, pc, #168	; (adr r3, 8002ec0 <_ZN9LineTrace8pidTraceEv+0x108>)
 8002e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e1c:	f7fd fd2e 	bl	800087c <__aeabi_ddiv>
 8002e20:	4603      	mov	r3, r0
 8002e22:	460c      	mov	r4, r1
 8002e24:	4618      	mov	r0, r3
 8002e26:	4621      	mov	r1, r4
 8002e28:	f7fd fef6 	bl	8000c18 <__aeabi_d2f>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	60fb      	str	r3, [r7, #12]
	i += ki_ * diff * DELTA_T;
 8002e30:	4b25      	ldr	r3, [pc, #148]	; (8002ec8 <_ZN9LineTrace8pidTraceEv+0x110>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4618      	mov	r0, r3
 8002e36:	f7fd fb9f 	bl	8000578 <__aeabi_f2d>
 8002e3a:	4604      	mov	r4, r0
 8002e3c:	460d      	mov	r5, r1
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8002e44:	edd7 7a05 	vldr	s15, [r7, #20]
 8002e48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e4c:	ee17 0a90 	vmov	r0, s15
 8002e50:	f7fd fb92 	bl	8000578 <__aeabi_f2d>
 8002e54:	a31a      	add	r3, pc, #104	; (adr r3, 8002ec0 <_ZN9LineTrace8pidTraceEv+0x108>)
 8002e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e5a:	f7fd fbe5 	bl	8000628 <__aeabi_dmul>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	460b      	mov	r3, r1
 8002e62:	4620      	mov	r0, r4
 8002e64:	4629      	mov	r1, r5
 8002e66:	f7fd fa29 	bl	80002bc <__adddf3>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	460c      	mov	r4, r1
 8002e6e:	4618      	mov	r0, r3
 8002e70:	4621      	mov	r1, r4
 8002e72:	f7fd fed1 	bl	8000c18 <__aeabi_d2f>
 8002e76:	4602      	mov	r2, r0
 8002e78:	4b13      	ldr	r3, [pc, #76]	; (8002ec8 <_ZN9LineTrace8pidTraceEv+0x110>)
 8002e7a:	601a      	str	r2, [r3, #0]

	float rotation_ratio = p + d + i;
 8002e7c:	ed97 7a04 	vldr	s14, [r7, #16]
 8002e80:	edd7 7a03 	vldr	s15, [r7, #12]
 8002e84:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e88:	4b0f      	ldr	r3, [pc, #60]	; (8002ec8 <_ZN9LineTrace8pidTraceEv+0x110>)
 8002e8a:	edd3 7a00 	vldr	s15, [r3]
 8002e8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e92:	edc7 7a02 	vstr	s15, [r7, #8]

	velocity_ctrl_->setTranslationVelocityOnly(target_velocity_, rotation_ratio);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	689a      	ldr	r2, [r3, #8]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 8002ea0:	edd7 0a02 	vldr	s1, [r7, #8]
 8002ea4:	eeb0 0a67 	vmov.f32	s0, s15
 8002ea8:	4610      	mov	r0, r2
 8002eaa:	f002 fe71 	bl	8005b90 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>

	pre_diff = diff;
 8002eae:	4a07      	ldr	r2, [pc, #28]	; (8002ecc <_ZN9LineTrace8pidTraceEv+0x114>)
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	6013      	str	r3, [r2, #0]

}
 8002eb4:	bf00      	nop
 8002eb6:	3718      	adds	r7, #24
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bdb0      	pop	{r4, r5, r7, pc}
 8002ebc:	f3af 8000 	nop.w
 8002ec0:	d2f1a9fc 	.word	0xd2f1a9fc
 8002ec4:	3f50624d 	.word	0x3f50624d
 8002ec8:	200002b8 	.word	0x200002b8
 8002ecc:	200002b4 	.word	0x200002b4

08002ed0 <_ZN9LineTrace11loggerStartEv>:

// ---------------------------------------------------------------------------------------//
// -------------------------------------Logging-------------------------------------------//
// ---------------------------------------------------------------------------------------//
void LineTrace::loggerStart()
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
	encoder_->clearDistance10mm();
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	695b      	ldr	r3, [r3, #20]
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7fe fc1f 	bl	8001720 <_ZN7Encoder17clearDistance10mmEv>
	odometry_->clearPotition();
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	699b      	ldr	r3, [r3, #24]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f002 f976 	bl	80051d8 <_ZN8Odometry13clearPotitionEv>
	logger_->resetLogs2();
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	69db      	ldr	r3, [r3, #28]
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f001 fe8c 	bl	8004c0e <_ZN6Logger10resetLogs2Ev>

	logging_flag_ = true;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2201      	movs	r2, #1
 8002efa:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
}
 8002efe:	bf00      	nop
 8002f00:	3708      	adds	r7, #8
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}

08002f06 <_ZN9LineTrace10loggerStopEv>:

void LineTrace::loggerStop()
{
 8002f06:	b580      	push	{r7, lr}
 8002f08:	b082      	sub	sp, #8
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	6078      	str	r0, [r7, #4]
	logger_->stop();
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	69db      	ldr	r3, [r3, #28]
 8002f12:	4618      	mov	r0, r3
 8002f14:	f001 feed 	bl	8004cf2 <_ZN6Logger4stopEv>
	logging_flag_ = false;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
}
 8002f20:	bf00      	nop
 8002f22:	3708      	adds	r7, #8
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <_ZN9LineTrace22storeCrossLineDistanceEv>:

void LineTrace::storeCrossLineDistance()
{
 8002f28:	b590      	push	{r4, r7, lr}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
	crossline_distance_[crossline_idx_] = encoder_->getTotalDistance();
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	695a      	ldr	r2, [r3, #20]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002f3a:	337c      	adds	r3, #124	; 0x7c
 8002f3c:	881b      	ldrh	r3, [r3, #0]
 8002f3e:	461c      	mov	r4, r3
 8002f40:	4610      	mov	r0, r2
 8002f42:	f7fe fbcf 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 8002f46:	eef0 7a40 	vmov.f32	s15, s0
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	f504 533c 	add.w	r3, r4, #12032	; 0x2f00
 8002f50:	3312      	adds	r3, #18
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	4413      	add	r3, r2
 8002f56:	3304      	adds	r3, #4
 8002f58:	edc3 7a00 	vstr	s15, [r3]
	crossline_idx_++;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002f62:	337c      	adds	r3, #124	; 0x7c
 8002f64:	881b      	ldrh	r3, [r3, #0]
 8002f66:	3301      	adds	r3, #1
 8002f68:	b29a      	uxth	r2, r3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002f70:	337c      	adds	r3, #124	; 0x7c
 8002f72:	801a      	strh	r2, [r3, #0]

	if(crossline_idx_ >= CROSSLINE_SIZE) crossline_idx_ = CROSSLINE_SIZE - 1;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002f7a:	337c      	adds	r3, #124	; 0x7c
 8002f7c:	881b      	ldrh	r3, [r3, #0]
 8002f7e:	2b63      	cmp	r3, #99	; 0x63
 8002f80:	d905      	bls.n	8002f8e <_ZN9LineTrace22storeCrossLineDistanceEv+0x66>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002f88:	337c      	adds	r3, #124	; 0x7c
 8002f8a:	2263      	movs	r2, #99	; 0x63
 8002f8c:	801a      	strh	r2, [r3, #0]
}
 8002f8e:	bf00      	nop
 8002f90:	370c      	adds	r7, #12
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd90      	pop	{r4, r7, pc}

08002f96 <_ZN9LineTrace21storeSideLineDistanceEv>:

void LineTrace::storeSideLineDistance()
{
 8002f96:	b590      	push	{r4, r7, lr}
 8002f98:	b083      	sub	sp, #12
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
	sideline_distance_[sideline_idx_] = encoder_->getTotalDistance();
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	695a      	ldr	r2, [r3, #20]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002fa8:	337e      	adds	r3, #126	; 0x7e
 8002faa:	881b      	ldrh	r3, [r3, #0]
 8002fac:	461c      	mov	r4, r3
 8002fae:	4610      	mov	r0, r2
 8002fb0:	f7fe fb98 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 8002fb4:	eef0 7a40 	vmov.f32	s15, s0
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	f504 533d 	add.w	r3, r4, #12096	; 0x2f40
 8002fbe:	3336      	adds	r3, #54	; 0x36
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	4413      	add	r3, r2
 8002fc4:	3304      	adds	r3, #4
 8002fc6:	edc3 7a00 	vstr	s15, [r3]
	sideline_idx_++;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002fd0:	337e      	adds	r3, #126	; 0x7e
 8002fd2:	881b      	ldrh	r3, [r3, #0]
 8002fd4:	3301      	adds	r3, #1
 8002fd6:	b29a      	uxth	r2, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002fde:	337e      	adds	r3, #126	; 0x7e
 8002fe0:	801a      	strh	r2, [r3, #0]

	if(sideline_idx_ >= SIDELINE_SIZE) sideline_idx_ = SIDELINE_SIZE - 1;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002fe8:	337e      	adds	r3, #126	; 0x7e
 8002fea:	881b      	ldrh	r3, [r3, #0]
 8002fec:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002ff0:	d306      	bcc.n	8003000 <_ZN9LineTrace21storeSideLineDistanceEv+0x6a>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8002ff8:	337e      	adds	r3, #126	; 0x7e
 8002ffa:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002ffe:	801a      	strh	r2, [r3, #0]
}
 8003000:	bf00      	nop
 8003002:	370c      	adds	r7, #12
 8003004:	46bd      	mov	sp, r7
 8003006:	bd90      	pop	{r4, r7, pc}

08003008 <_ZN9LineTrace9storeLogsEv>:

	if(all_sideline_idx_ >= SIDELINE_SIZE) all_sideline_idx_ = SIDELINE_SIZE - 1;
}

void LineTrace::storeLogs()
{
 8003008:	b590      	push	{r4, r7, lr}
 800300a:	ed2d 8b02 	vpush	{d8}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
	if(logging_flag_ == true){
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 800301a:	2b00      	cmp	r3, #0
 800301c:	d046      	beq.n	80030ac <_ZN9LineTrace9storeLogsEv+0xa4>
		if(mode_selector_ == FIRST_RUNNING)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003024:	3348      	adds	r3, #72	; 0x48
 8003026:	f9b3 3000 	ldrsh.w	r3, [r3]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d11c      	bne.n	8003068 <_ZN9LineTrace9storeLogsEv+0x60>
			logger_->storeDistanceAndTheta(encoder_->getDistance10mm(), odometry_->getTheta());
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	69dc      	ldr	r4, [r3, #28]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	695b      	ldr	r3, [r3, #20]
 8003036:	4618      	mov	r0, r3
 8003038:	f7fe fb45 	bl	80016c6 <_ZN7Encoder15getDistance10mmEv>
 800303c:	eeb0 8a40 	vmov.f32	s16, s0
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	699b      	ldr	r3, [r3, #24]
 8003044:	4618      	mov	r0, r3
 8003046:	f002 f8b6 	bl	80051b6 <_ZN8Odometry8getThetaEv>
 800304a:	ec53 2b10 	vmov	r2, r3, d0
 800304e:	4610      	mov	r0, r2
 8003050:	4619      	mov	r1, r3
 8003052:	f7fd fde1 	bl	8000c18 <__aeabi_d2f>
 8003056:	4603      	mov	r3, r0
 8003058:	ee00 3a90 	vmov	s1, r3
 800305c:	eeb0 0a48 	vmov.f32	s0, s16
 8003060:	4620      	mov	r0, r4
 8003062:	f001 fc75 	bl	8004950 <_ZN6Logger21storeDistanceAndThetaEff>
 8003066:	e01b      	b.n	80030a0 <_ZN9LineTrace9storeLogsEv+0x98>
		else
			//logger_->storeDistanceAndTheta2(encoder_->getDistance10mm(), odometry_->getTheta());
			//logger_->storeDistanceAndTheta2(encoder_->getTotalDistance(), odometry_->getTheta());
			logger_->storeDistanceAndTheta2(velocity_ctrl_->getCurrentVelocity(), odometry_->getTheta());
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	69dc      	ldr	r4, [r3, #28]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	4618      	mov	r0, r3
 8003072:	f002 fe15 	bl	8005ca0 <_ZN12VelocityCtrl18getCurrentVelocityEv>
 8003076:	eeb0 8a40 	vmov.f32	s16, s0
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	699b      	ldr	r3, [r3, #24]
 800307e:	4618      	mov	r0, r3
 8003080:	f002 f899 	bl	80051b6 <_ZN8Odometry8getThetaEv>
 8003084:	ec53 2b10 	vmov	r2, r3, d0
 8003088:	4610      	mov	r0, r2
 800308a:	4619      	mov	r1, r3
 800308c:	f7fd fdc4 	bl	8000c18 <__aeabi_d2f>
 8003090:	4603      	mov	r3, r0
 8003092:	ee00 3a90 	vmov	s1, r3
 8003096:	eeb0 0a48 	vmov.f32	s0, s16
 800309a:	4620      	mov	r0, r4
 800309c:	f001 fc9b 	bl	80049d6 <_ZN6Logger22storeDistanceAndTheta2Eff>

		mon_store_cnt++;
 80030a0:	4b05      	ldr	r3, [pc, #20]	; (80030b8 <_ZN9LineTrace9storeLogsEv+0xb0>)
 80030a2:	881b      	ldrh	r3, [r3, #0]
 80030a4:	3301      	adds	r3, #1
 80030a6:	b29a      	uxth	r2, r3
 80030a8:	4b03      	ldr	r3, [pc, #12]	; (80030b8 <_ZN9LineTrace9storeLogsEv+0xb0>)
 80030aa:	801a      	strh	r2, [r3, #0]
	}
}
 80030ac:	bf00      	nop
 80030ae:	370c      	adds	r7, #12
 80030b0:	46bd      	mov	sp, r7
 80030b2:	ecbd 8b02 	vpop	{d8}
 80030b6:	bd90      	pop	{r4, r7, pc}
 80030b8:	20000294 	.word	0x20000294

080030bc <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv>:

// ---------------------------------------------------------------------------------------------------//
// ----------------------------------Position correction----------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::correctionTotalDistanceFromCrossLine()
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b082      	sub	sp, #8
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
	encoder_->setTotalDistance(crossline_distance_[crossline_idx_]);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6959      	ldr	r1, [r3, #20]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80030ce:	337c      	adds	r3, #124	; 0x7c
 80030d0:	881b      	ldrh	r3, [r3, #0]
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
 80030d8:	3312      	adds	r3, #18
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	4413      	add	r3, r2
 80030de:	3304      	adds	r3, #4
 80030e0:	edd3 7a00 	vldr	s15, [r3]
 80030e4:	eeb0 0a67 	vmov.f32	s0, s15
 80030e8:	4608      	mov	r0, r1
 80030ea:	f7fe fb0a 	bl	8001702 <_ZN7Encoder16setTotalDistanceEf>
	crossline_idx_++;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80030f4:	337c      	adds	r3, #124	; 0x7c
 80030f6:	881b      	ldrh	r3, [r3, #0]
 80030f8:	3301      	adds	r3, #1
 80030fa:	b29a      	uxth	r2, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003102:	337c      	adds	r3, #124	; 0x7c
 8003104:	801a      	strh	r2, [r3, #0]

	if(crossline_idx_ >= CROSSLINE_SIZE) crossline_idx_ = CROSSLINE_SIZE - 1;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800310c:	337c      	adds	r3, #124	; 0x7c
 800310e:	881b      	ldrh	r3, [r3, #0]
 8003110:	2b63      	cmp	r3, #99	; 0x63
 8003112:	d905      	bls.n	8003120 <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv+0x64>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800311a:	337c      	adds	r3, #124	; 0x7c
 800311c:	2263      	movs	r2, #99	; 0x63
 800311e:	801a      	strh	r2, [r3, #0]

}
 8003120:	bf00      	nop
 8003122:	3708      	adds	r7, #8
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv>:

void LineTrace::correctionTotalDistanceFromSideMarker()
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b086      	sub	sp, #24
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 8003130:	2300      	movs	r3, #0
 8003132:	82fb      	strh	r3, [r7, #22]
 8003134:	8afb      	ldrh	r3, [r7, #22]
 8003136:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800313a:	d239      	bcs.n	80031b0 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x88>
		float temp_sideline_distance = sideline_distance_[i];
 800313c:	8afb      	ldrh	r3, [r7, #22]
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 8003144:	3336      	adds	r3, #54	; 0x36
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	4413      	add	r3, r2
 800314a:	3304      	adds	r3, #4
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	613b      	str	r3, [r7, #16]
		float diff = abs(temp_sideline_distance - encoder_->getTotalDistance());
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	695b      	ldr	r3, [r3, #20]
 8003154:	4618      	mov	r0, r3
 8003156:	f7fe fac5 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 800315a:	eeb0 7a40 	vmov.f32	s14, s0
 800315e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003162:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003166:	eeb0 0a67 	vmov.f32	s0, s15
 800316a:	f7ff fc97 	bl	8002a9c <_ZSt3absf>
 800316e:	ed87 0a03 	vstr	s0, [r7, #12]
		if(diff <= 80){
 8003172:	edd7 7a03 	vldr	s15, [r7, #12]
 8003176:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80031d8 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xb0>
 800317a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800317e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003182:	d811      	bhi.n	80031a8 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x80>
			encoder_->setTotalDistance(sideline_distance_[i]);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6959      	ldr	r1, [r3, #20]
 8003188:	8afb      	ldrh	r3, [r7, #22]
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	f503 533d 	add.w	r3, r3, #12096	; 0x2f40
 8003190:	3336      	adds	r3, #54	; 0x36
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	4413      	add	r3, r2
 8003196:	3304      	adds	r3, #4
 8003198:	edd3 7a00 	vldr	s15, [r3]
 800319c:	eeb0 0a67 	vmov.f32	s0, s15
 80031a0:	4608      	mov	r0, r1
 80031a2:	f7fe faae 	bl	8001702 <_ZN7Encoder16setTotalDistanceEf>
			break;
 80031a6:	e003      	b.n	80031b0 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0x88>
	for(uint16_t i = 0; i < SIDELINE_SIZE; i++){
 80031a8:	8afb      	ldrh	r3, [r7, #22]
 80031aa:	3301      	adds	r3, #1
 80031ac:	82fb      	strh	r3, [r7, #22]
 80031ae:	e7c1      	b.n	8003134 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xc>
		}
	}

	if(sideline_idx_ >= SIDELINE_SIZE) sideline_idx_ = SIDELINE_SIZE - 1;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80031b6:	337e      	adds	r3, #126	; 0x7e
 80031b8:	881b      	ldrh	r3, [r3, #0]
 80031ba:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80031be:	d306      	bcc.n	80031ce <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv+0xa6>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80031c6:	337e      	adds	r3, #126	; 0x7e
 80031c8:	f240 12f3 	movw	r2, #499	; 0x1f3
 80031cc:	801a      	strh	r2, [r3, #0]

}
 80031ce:	bf00      	nop
 80031d0:	3718      	adds	r7, #24
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	42a00000 	.word	0x42a00000

080031dc <_ZN9LineTrace15radius2VelocityEf>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------ Acceleration / deceleration processing------------------------------------//
// ---------------------------------------------------------------------------------------------------//
float LineTrace::radius2Velocity(float radius)
{
 80031dc:	b480      	push	{r7}
 80031de:	b085      	sub	sp, #20
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	ed87 0a00 	vstr	s0, [r7]
	float velocity;

	if(mode_selector_ == SECOND_RUNNING){
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80031ee:	3348      	adds	r3, #72	; 0x48
 80031f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d143      	bne.n	8003280 <_ZN9LineTrace15radius2VelocityEf+0xa4>
		if(radius < 300) velocity = min_velocity_;
 80031f8:	edd7 7a00 	vldr	s15, [r7]
 80031fc:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8003318 <_ZN9LineTrace15radius2VelocityEf+0x13c>
 8003200:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003208:	d504      	bpl.n	8003214 <_ZN9LineTrace15radius2VelocityEf+0x38>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003210:	60fb      	str	r3, [r7, #12]
 8003212:	e076      	b.n	8003302 <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 800) velocity = 1.7;
 8003214:	edd7 7a00 	vldr	s15, [r7]
 8003218:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800331c <_ZN9LineTrace15radius2VelocityEf+0x140>
 800321c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003224:	d502      	bpl.n	800322c <_ZN9LineTrace15radius2VelocityEf+0x50>
 8003226:	4b3e      	ldr	r3, [pc, #248]	; (8003320 <_ZN9LineTrace15radius2VelocityEf+0x144>)
 8003228:	60fb      	str	r3, [r7, #12]
 800322a:	e06a      	b.n	8003302 <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 1000) velocity = 2.0;
 800322c:	edd7 7a00 	vldr	s15, [r7]
 8003230:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8003324 <_ZN9LineTrace15radius2VelocityEf+0x148>
 8003234:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800323c:	d503      	bpl.n	8003246 <_ZN9LineTrace15radius2VelocityEf+0x6a>
 800323e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003242:	60fb      	str	r3, [r7, #12]
 8003244:	e05d      	b.n	8003302 <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 1500) velocity = 2.3;
 8003246:	edd7 7a00 	vldr	s15, [r7]
 800324a:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8003328 <_ZN9LineTrace15radius2VelocityEf+0x14c>
 800324e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003256:	d502      	bpl.n	800325e <_ZN9LineTrace15radius2VelocityEf+0x82>
 8003258:	4b34      	ldr	r3, [pc, #208]	; (800332c <_ZN9LineTrace15radius2VelocityEf+0x150>)
 800325a:	60fb      	str	r3, [r7, #12]
 800325c:	e051      	b.n	8003302 <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 2000) velocity = 2.5;
 800325e:	edd7 7a00 	vldr	s15, [r7]
 8003262:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8003330 <_ZN9LineTrace15radius2VelocityEf+0x154>
 8003266:	eef4 7ac7 	vcmpe.f32	s15, s14
 800326a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800326e:	d502      	bpl.n	8003276 <_ZN9LineTrace15radius2VelocityEf+0x9a>
 8003270:	4b30      	ldr	r3, [pc, #192]	; (8003334 <_ZN9LineTrace15radius2VelocityEf+0x158>)
 8003272:	60fb      	str	r3, [r7, #12]
 8003274:	e045      	b.n	8003302 <_ZN9LineTrace15radius2VelocityEf+0x126>
		else velocity = max_velocity_;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800327c:	60fb      	str	r3, [r7, #12]
 800327e:	e040      	b.n	8003302 <_ZN9LineTrace15radius2VelocityEf+0x126>
	}

	else if(mode_selector_ == THIRD_RUNNING){
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003286:	3348      	adds	r3, #72	; 0x48
 8003288:	f9b3 3000 	ldrsh.w	r3, [r3]
 800328c:	2b02      	cmp	r3, #2
 800328e:	d136      	bne.n	80032fe <_ZN9LineTrace15radius2VelocityEf+0x122>
		if(radius < 300) velocity = min_velocity2_;
 8003290:	edd7 7a00 	vldr	s15, [r7]
 8003294:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8003318 <_ZN9LineTrace15radius2VelocityEf+0x13c>
 8003298:	eef4 7ac7 	vcmpe.f32	s15, s14
 800329c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032a0:	d504      	bpl.n	80032ac <_ZN9LineTrace15radius2VelocityEf+0xd0>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80032a8:	60fb      	str	r3, [r7, #12]
 80032aa:	e02a      	b.n	8003302 <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 1500) velocity = 2.1;
 80032ac:	edd7 7a00 	vldr	s15, [r7]
 80032b0:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8003328 <_ZN9LineTrace15radius2VelocityEf+0x14c>
 80032b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032bc:	d502      	bpl.n	80032c4 <_ZN9LineTrace15radius2VelocityEf+0xe8>
 80032be:	4b1e      	ldr	r3, [pc, #120]	; (8003338 <_ZN9LineTrace15radius2VelocityEf+0x15c>)
 80032c0:	60fb      	str	r3, [r7, #12]
 80032c2:	e01e      	b.n	8003302 <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 2000) velocity = 2.5;
 80032c4:	edd7 7a00 	vldr	s15, [r7]
 80032c8:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8003330 <_ZN9LineTrace15radius2VelocityEf+0x154>
 80032cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032d4:	d502      	bpl.n	80032dc <_ZN9LineTrace15radius2VelocityEf+0x100>
 80032d6:	4b17      	ldr	r3, [pc, #92]	; (8003334 <_ZN9LineTrace15radius2VelocityEf+0x158>)
 80032d8:	60fb      	str	r3, [r7, #12]
 80032da:	e012      	b.n	8003302 <_ZN9LineTrace15radius2VelocityEf+0x126>
		else if(radius < 2500) velocity = 3.0;
 80032dc:	edd7 7a00 	vldr	s15, [r7]
 80032e0:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800333c <_ZN9LineTrace15radius2VelocityEf+0x160>
 80032e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032ec:	d502      	bpl.n	80032f4 <_ZN9LineTrace15radius2VelocityEf+0x118>
 80032ee:	4b14      	ldr	r3, [pc, #80]	; (8003340 <_ZN9LineTrace15radius2VelocityEf+0x164>)
 80032f0:	60fb      	str	r3, [r7, #12]
 80032f2:	e006      	b.n	8003302 <_ZN9LineTrace15radius2VelocityEf+0x126>
		else velocity = max_velocity2_;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80032fa:	60fb      	str	r3, [r7, #12]
 80032fc:	e001      	b.n	8003302 <_ZN9LineTrace15radius2VelocityEf+0x126>
	}
	else velocity = 1.3;
 80032fe:	4b11      	ldr	r3, [pc, #68]	; (8003344 <_ZN9LineTrace15radius2VelocityEf+0x168>)
 8003300:	60fb      	str	r3, [r7, #12]

	return velocity;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	ee07 3a90 	vmov	s15, r3
}
 8003308:	eeb0 0a67 	vmov.f32	s0, s15
 800330c:	3714      	adds	r7, #20
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr
 8003316:	bf00      	nop
 8003318:	43960000 	.word	0x43960000
 800331c:	44480000 	.word	0x44480000
 8003320:	3fd9999a 	.word	0x3fd9999a
 8003324:	447a0000 	.word	0x447a0000
 8003328:	44bb8000 	.word	0x44bb8000
 800332c:	40133333 	.word	0x40133333
 8003330:	44fa0000 	.word	0x44fa0000
 8003334:	40200000 	.word	0x40200000
 8003338:	40066666 	.word	0x40066666
 800333c:	451c4000 	.word	0x451c4000
 8003340:	40400000 	.word	0x40400000
 8003344:	3fa66666 	.word	0x3fa66666

08003348 <_ZN9LineTrace20decelerateProcessingEfPKf>:

	return a * exp(b * radius) + c * exp(d * radius);
}

void LineTrace::decelerateProcessing(const float am, const float *p_distance)
{
 8003348:	b5b0      	push	{r4, r5, r7, lr}
 800334a:	b088      	sub	sp, #32
 800334c:	af00      	add	r7, sp, #0
 800334e:	60f8      	str	r0, [r7, #12]
 8003350:	ed87 0a02 	vstr	s0, [r7, #8]
 8003354:	6079      	str	r1, [r7, #4]
	for(uint16_t i = LOG_DATA_SIZE_DIS - 1; i >= 1; i--){
 8003356:	f241 736f 	movw	r3, #5999	; 0x176f
 800335a:	83fb      	strh	r3, [r7, #30]
 800335c:	8bfb      	ldrh	r3, [r7, #30]
 800335e:	2b00      	cmp	r3, #0
 8003360:	f000 808d 	beq.w	800347e <_ZN9LineTrace20decelerateProcessingEfPKf+0x136>
		float v_diff = velocity_table_[i-1] - velocity_table_[i];
 8003364:	8bfb      	ldrh	r3, [r7, #30]
 8003366:	3b01      	subs	r3, #1
 8003368:	68fa      	ldr	r2, [r7, #12]
 800336a:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	4413      	add	r3, r2
 8003372:	3304      	adds	r3, #4
 8003374:	ed93 7a00 	vldr	s14, [r3]
 8003378:	8bfb      	ldrh	r3, [r7, #30]
 800337a:	68fa      	ldr	r2, [r7, #12]
 800337c:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	4413      	add	r3, r2
 8003384:	3304      	adds	r3, #4
 8003386:	edd3 7a00 	vldr	s15, [r3]
 800338a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800338e:	edc7 7a06 	vstr	s15, [r7, #24]

		if(v_diff > 0){
 8003392:	edd7 7a06 	vldr	s15, [r7, #24]
 8003396:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800339a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800339e:	dd6a      	ble.n	8003476 <_ZN9LineTrace20decelerateProcessingEfPKf+0x12e>
			float t = p_distance[i]*1e-3 / v_diff;
 80033a0:	8bfb      	ldrh	r3, [r7, #30]
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	4413      	add	r3, r2
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4618      	mov	r0, r3
 80033ac:	f7fd f8e4 	bl	8000578 <__aeabi_f2d>
 80033b0:	a335      	add	r3, pc, #212	; (adr r3, 8003488 <_ZN9LineTrace20decelerateProcessingEfPKf+0x140>)
 80033b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033b6:	f7fd f937 	bl	8000628 <__aeabi_dmul>
 80033ba:	4603      	mov	r3, r0
 80033bc:	460c      	mov	r4, r1
 80033be:	4625      	mov	r5, r4
 80033c0:	461c      	mov	r4, r3
 80033c2:	69b8      	ldr	r0, [r7, #24]
 80033c4:	f7fd f8d8 	bl	8000578 <__aeabi_f2d>
 80033c8:	4602      	mov	r2, r0
 80033ca:	460b      	mov	r3, r1
 80033cc:	4620      	mov	r0, r4
 80033ce:	4629      	mov	r1, r5
 80033d0:	f7fd fa54 	bl	800087c <__aeabi_ddiv>
 80033d4:	4603      	mov	r3, r0
 80033d6:	460c      	mov	r4, r1
 80033d8:	4618      	mov	r0, r3
 80033da:	4621      	mov	r1, r4
 80033dc:	f7fd fc1c 	bl	8000c18 <__aeabi_d2f>
 80033e0:	4603      	mov	r3, r0
 80033e2:	617b      	str	r3, [r7, #20]
			float a = v_diff / t;
 80033e4:	edd7 6a06 	vldr	s13, [r7, #24]
 80033e8:	ed97 7a05 	vldr	s14, [r7, #20]
 80033ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033f0:	edc7 7a04 	vstr	s15, [r7, #16]
			if(a > am){
 80033f4:	ed97 7a04 	vldr	s14, [r7, #16]
 80033f8:	edd7 7a02 	vldr	s15, [r7, #8]
 80033fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003404:	dd37      	ble.n	8003476 <_ZN9LineTrace20decelerateProcessingEfPKf+0x12e>
				velocity_table_[i-1] = velocity_table_[i] + am * p_distance[i]*1e-3;
 8003406:	8bfb      	ldrh	r3, [r7, #30]
 8003408:	68fa      	ldr	r2, [r7, #12]
 800340a:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	4413      	add	r3, r2
 8003412:	3304      	adds	r3, #4
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4618      	mov	r0, r3
 8003418:	f7fd f8ae 	bl	8000578 <__aeabi_f2d>
 800341c:	4604      	mov	r4, r0
 800341e:	460d      	mov	r5, r1
 8003420:	8bfb      	ldrh	r3, [r7, #30]
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	4413      	add	r3, r2
 8003428:	ed93 7a00 	vldr	s14, [r3]
 800342c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003430:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003434:	ee17 0a90 	vmov	r0, s15
 8003438:	f7fd f89e 	bl	8000578 <__aeabi_f2d>
 800343c:	a312      	add	r3, pc, #72	; (adr r3, 8003488 <_ZN9LineTrace20decelerateProcessingEfPKf+0x140>)
 800343e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003442:	f7fd f8f1 	bl	8000628 <__aeabi_dmul>
 8003446:	4602      	mov	r2, r0
 8003448:	460b      	mov	r3, r1
 800344a:	4620      	mov	r0, r4
 800344c:	4629      	mov	r1, r5
 800344e:	f7fc ff35 	bl	80002bc <__adddf3>
 8003452:	4603      	mov	r3, r0
 8003454:	460c      	mov	r4, r1
 8003456:	4619      	mov	r1, r3
 8003458:	4622      	mov	r2, r4
 800345a:	8bfb      	ldrh	r3, [r7, #30]
 800345c:	1e5c      	subs	r4, r3, #1
 800345e:	4608      	mov	r0, r1
 8003460:	4611      	mov	r1, r2
 8003462:	f7fd fbd9 	bl	8000c18 <__aeabi_d2f>
 8003466:	4601      	mov	r1, r0
 8003468:	68fa      	ldr	r2, [r7, #12]
 800346a:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	4413      	add	r3, r2
 8003472:	3304      	adds	r3, #4
 8003474:	6019      	str	r1, [r3, #0]
	for(uint16_t i = LOG_DATA_SIZE_DIS - 1; i >= 1; i--){
 8003476:	8bfb      	ldrh	r3, [r7, #30]
 8003478:	3b01      	subs	r3, #1
 800347a:	83fb      	strh	r3, [r7, #30]
 800347c:	e76e      	b.n	800335c <_ZN9LineTrace20decelerateProcessingEfPKf+0x14>
			}

		}
	}

}
 800347e:	bf00      	nop
 8003480:	3720      	adds	r7, #32
 8003482:	46bd      	mov	sp, r7
 8003484:	bdb0      	pop	{r4, r5, r7, pc}
 8003486:	bf00      	nop
 8003488:	d2f1a9fc 	.word	0xd2f1a9fc
 800348c:	3f50624d 	.word	0x3f50624d

08003490 <_ZN9LineTrace20accelerateProcessingEfPKf>:

void LineTrace::accelerateProcessing(const float am, const float *p_distance)
{
 8003490:	b5b0      	push	{r4, r5, r7, lr}
 8003492:	b088      	sub	sp, #32
 8003494:	af00      	add	r7, sp, #0
 8003496:	60f8      	str	r0, [r7, #12]
 8003498:	ed87 0a02 	vstr	s0, [r7, #8]
 800349c:	6079      	str	r1, [r7, #4]
	for(uint16_t i = 0; i <= LOG_DATA_SIZE_DIS - 1; i++){
 800349e:	2300      	movs	r3, #0
 80034a0:	83fb      	strh	r3, [r7, #30]
 80034a2:	8bfb      	ldrh	r3, [r7, #30]
 80034a4:	f241 726f 	movw	r2, #5999	; 0x176f
 80034a8:	4293      	cmp	r3, r2
 80034aa:	f200 808d 	bhi.w	80035c8 <_ZN9LineTrace20accelerateProcessingEfPKf+0x138>
		float v_diff = velocity_table_[i+1] - velocity_table_[i];
 80034ae:	8bfb      	ldrh	r3, [r7, #30]
 80034b0:	3301      	adds	r3, #1
 80034b2:	68fa      	ldr	r2, [r7, #12]
 80034b4:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	4413      	add	r3, r2
 80034bc:	3304      	adds	r3, #4
 80034be:	ed93 7a00 	vldr	s14, [r3]
 80034c2:	8bfb      	ldrh	r3, [r7, #30]
 80034c4:	68fa      	ldr	r2, [r7, #12]
 80034c6:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	4413      	add	r3, r2
 80034ce:	3304      	adds	r3, #4
 80034d0:	edd3 7a00 	vldr	s15, [r3]
 80034d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034d8:	edc7 7a06 	vstr	s15, [r7, #24]

		if(v_diff > 0){
 80034dc:	edd7 7a06 	vldr	s15, [r7, #24]
 80034e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80034e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034e8:	dd6a      	ble.n	80035c0 <_ZN9LineTrace20accelerateProcessingEfPKf+0x130>
			float t = p_distance[i]*1e-3 / v_diff;
 80034ea:	8bfb      	ldrh	r3, [r7, #30]
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	4413      	add	r3, r2
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4618      	mov	r0, r3
 80034f6:	f7fd f83f 	bl	8000578 <__aeabi_f2d>
 80034fa:	a335      	add	r3, pc, #212	; (adr r3, 80035d0 <_ZN9LineTrace20accelerateProcessingEfPKf+0x140>)
 80034fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003500:	f7fd f892 	bl	8000628 <__aeabi_dmul>
 8003504:	4603      	mov	r3, r0
 8003506:	460c      	mov	r4, r1
 8003508:	4625      	mov	r5, r4
 800350a:	461c      	mov	r4, r3
 800350c:	69b8      	ldr	r0, [r7, #24]
 800350e:	f7fd f833 	bl	8000578 <__aeabi_f2d>
 8003512:	4602      	mov	r2, r0
 8003514:	460b      	mov	r3, r1
 8003516:	4620      	mov	r0, r4
 8003518:	4629      	mov	r1, r5
 800351a:	f7fd f9af 	bl	800087c <__aeabi_ddiv>
 800351e:	4603      	mov	r3, r0
 8003520:	460c      	mov	r4, r1
 8003522:	4618      	mov	r0, r3
 8003524:	4621      	mov	r1, r4
 8003526:	f7fd fb77 	bl	8000c18 <__aeabi_d2f>
 800352a:	4603      	mov	r3, r0
 800352c:	617b      	str	r3, [r7, #20]
			float a = v_diff / t;
 800352e:	edd7 6a06 	vldr	s13, [r7, #24]
 8003532:	ed97 7a05 	vldr	s14, [r7, #20]
 8003536:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800353a:	edc7 7a04 	vstr	s15, [r7, #16]
			if(a > am){
 800353e:	ed97 7a04 	vldr	s14, [r7, #16]
 8003542:	edd7 7a02 	vldr	s15, [r7, #8]
 8003546:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800354a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800354e:	dd37      	ble.n	80035c0 <_ZN9LineTrace20accelerateProcessingEfPKf+0x130>
				velocity_table_[i+1] = velocity_table_[i] + am * p_distance[i]*1e-3;
 8003550:	8bfb      	ldrh	r3, [r7, #30]
 8003552:	68fa      	ldr	r2, [r7, #12]
 8003554:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	4413      	add	r3, r2
 800355c:	3304      	adds	r3, #4
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4618      	mov	r0, r3
 8003562:	f7fd f809 	bl	8000578 <__aeabi_f2d>
 8003566:	4604      	mov	r4, r0
 8003568:	460d      	mov	r5, r1
 800356a:	8bfb      	ldrh	r3, [r7, #30]
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	4413      	add	r3, r2
 8003572:	ed93 7a00 	vldr	s14, [r3]
 8003576:	edd7 7a02 	vldr	s15, [r7, #8]
 800357a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800357e:	ee17 0a90 	vmov	r0, s15
 8003582:	f7fc fff9 	bl	8000578 <__aeabi_f2d>
 8003586:	a312      	add	r3, pc, #72	; (adr r3, 80035d0 <_ZN9LineTrace20accelerateProcessingEfPKf+0x140>)
 8003588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800358c:	f7fd f84c 	bl	8000628 <__aeabi_dmul>
 8003590:	4602      	mov	r2, r0
 8003592:	460b      	mov	r3, r1
 8003594:	4620      	mov	r0, r4
 8003596:	4629      	mov	r1, r5
 8003598:	f7fc fe90 	bl	80002bc <__adddf3>
 800359c:	4603      	mov	r3, r0
 800359e:	460c      	mov	r4, r1
 80035a0:	4619      	mov	r1, r3
 80035a2:	4622      	mov	r2, r4
 80035a4:	8bfb      	ldrh	r3, [r7, #30]
 80035a6:	1c5c      	adds	r4, r3, #1
 80035a8:	4608      	mov	r0, r1
 80035aa:	4611      	mov	r1, r2
 80035ac:	f7fd fb34 	bl	8000c18 <__aeabi_d2f>
 80035b0:	4601      	mov	r1, r0
 80035b2:	68fa      	ldr	r2, [r7, #12]
 80035b4:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	4413      	add	r3, r2
 80035bc:	3304      	adds	r3, #4
 80035be:	6019      	str	r1, [r3, #0]
	for(uint16_t i = 0; i <= LOG_DATA_SIZE_DIS - 1; i++){
 80035c0:	8bfb      	ldrh	r3, [r7, #30]
 80035c2:	3301      	adds	r3, #1
 80035c4:	83fb      	strh	r3, [r7, #30]
 80035c6:	e76c      	b.n	80034a2 <_ZN9LineTrace20accelerateProcessingEfPKf+0x12>
			}

		}
	}

}
 80035c8:	bf00      	nop
 80035ca:	3720      	adds	r7, #32
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bdb0      	pop	{r4, r5, r7, pc}
 80035d0:	d2f1a9fc 	.word	0xd2f1a9fc
 80035d4:	3f50624d 	.word	0x3f50624d

080035d8 <_ZN9LineTrace17startVelocityPlayEv>:

void LineTrace::startVelocityPlay()
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b082      	sub	sp, #8
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
	encoder_->clearTotalDistance();
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	695b      	ldr	r3, [r3, #20]
 80035e4:	4618      	mov	r0, r3
 80035e6:	f7fe f8a9 	bl	800173c <_ZN7Encoder18clearTotalDistanceEv>
	velocity_play_flag_ = true;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80035f0:	3344      	adds	r3, #68	; 0x44
 80035f2:	2201      	movs	r2, #1
 80035f4:	701a      	strb	r2, [r3, #0]
}
 80035f6:	bf00      	nop
 80035f8:	3708      	adds	r7, #8
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}

080035fe <_ZN9LineTrace16stopVelocityPlayEv>:

void LineTrace::stopVelocityPlay()
{
 80035fe:	b480      	push	{r7}
 8003600:	b083      	sub	sp, #12
 8003602:	af00      	add	r7, sp, #0
 8003604:	6078      	str	r0, [r7, #4]
	velocity_play_flag_ = false;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800360c:	3344      	adds	r3, #68	; 0x44
 800360e:	2200      	movs	r2, #0
 8003610:	701a      	strb	r2, [r3, #0]
	velocity_table_idx_ = 0;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003618:	3346      	adds	r3, #70	; 0x46
 800361a:	2200      	movs	r2, #0
 800361c:	801a      	strh	r2, [r3, #0]
	ref_distance_ = 0;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8003624:	f04f 0200 	mov.w	r2, #0
 8003628:	601a      	str	r2, [r3, #0]
}
 800362a:	bf00      	nop
 800362c:	370c      	adds	r7, #12
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr
	...

08003638 <_ZN9LineTrace20updateTargetVelocityEv>:

void LineTrace::updateTargetVelocity()
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
	if(velocity_play_flag_ == true){
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003646:	3344      	adds	r3, #68	; 0x44
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	2b00      	cmp	r3, #0
 800364c:	f000 8081 	beq.w	8003752 <_ZN9LineTrace20updateTargetVelocityEv+0x11a>
		//if(encoder_->getTotalDistance() >= ref_distance_){
			while(encoder_->getTotalDistance() >= ref_distance_){
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	695b      	ldr	r3, [r3, #20]
 8003654:	4618      	mov	r0, r3
 8003656:	f7fe f845 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 800365a:	eeb0 7a40 	vmov.f32	s14, s0
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8003664:	edd3 7a00 	vldr	s15, [r3]
 8003668:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800366c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003670:	bfac      	ite	ge
 8003672:	2301      	movge	r3, #1
 8003674:	2300      	movlt	r3, #0
 8003676:	b2db      	uxtb	r3, r3
 8003678:	2b00      	cmp	r3, #0
 800367a:	d023      	beq.n	80036c4 <_ZN9LineTrace20updateTargetVelocityEv+0x8c>
				ref_distance_ += ref_delta_distances_[velocity_table_idx_];
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8003682:	ed93 7a00 	vldr	s14, [r3]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800368c:	3346      	adds	r3, #70	; 0x46
 800368e:	881b      	ldrh	r3, [r3, #0]
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	3330      	adds	r3, #48	; 0x30
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	4413      	add	r3, r2
 8003698:	edd3 7a00 	vldr	s15, [r3]
 800369c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80036a6:	edc3 7a00 	vstr	s15, [r3]
				velocity_table_idx_++;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80036b0:	3346      	adds	r3, #70	; 0x46
 80036b2:	881b      	ldrh	r3, [r3, #0]
 80036b4:	3301      	adds	r3, #1
 80036b6:	b29a      	uxth	r2, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80036be:	3346      	adds	r3, #70	; 0x46
 80036c0:	801a      	strh	r2, [r3, #0]
			while(encoder_->getTotalDistance() >= ref_distance_){
 80036c2:	e7c5      	b.n	8003650 <_ZN9LineTrace20updateTargetVelocityEv+0x18>
			}
		//}

		if(velocity_table_idx_ >= LOG_DATA_SIZE_DIS) velocity_table_idx_ = LOG_DATA_SIZE_DIS - 1;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80036ca:	3346      	adds	r3, #70	; 0x46
 80036cc:	881b      	ldrh	r3, [r3, #0]
 80036ce:	f241 726f 	movw	r2, #5999	; 0x176f
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d906      	bls.n	80036e4 <_ZN9LineTrace20updateTargetVelocityEv+0xac>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80036dc:	3346      	adds	r3, #70	; 0x46
 80036de:	f241 726f 	movw	r2, #5999	; 0x176f
 80036e2:	801a      	strh	r2, [r3, #0]

		mon_ref_dis = ref_distance_;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a1b      	ldr	r2, [pc, #108]	; (800375c <_ZN9LineTrace20updateTargetVelocityEv+0x124>)
 80036ee:	6013      	str	r3, [r2, #0]
		mon_current_dis = encoder_->getTotalDistance();
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	695b      	ldr	r3, [r3, #20]
 80036f4:	4618      	mov	r0, r3
 80036f6:	f7fd fff5 	bl	80016e4 <_ZN7Encoder16getTotalDistanceEv>
 80036fa:	eef0 7a40 	vmov.f32	s15, s0
 80036fe:	4b18      	ldr	r3, [pc, #96]	; (8003760 <_ZN9LineTrace20updateTargetVelocityEv+0x128>)
 8003700:	edc3 7a00 	vstr	s15, [r3]
		mon_vel_idx = velocity_table_idx_;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800370a:	3346      	adds	r3, #70	; 0x46
 800370c:	881a      	ldrh	r2, [r3, #0]
 800370e:	4b15      	ldr	r3, [pc, #84]	; (8003764 <_ZN9LineTrace20updateTargetVelocityEv+0x12c>)
 8003710:	801a      	strh	r2, [r3, #0]

		setTargetVelocity(velocity_table_[velocity_table_idx_]);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003718:	3346      	adds	r3, #70	; 0x46
 800371a:	881b      	ldrh	r3, [r3, #0]
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	4413      	add	r3, r2
 8003726:	3304      	adds	r3, #4
 8003728:	edd3 7a00 	vldr	s15, [r3]
 800372c:	eeb0 0a67 	vmov.f32	s0, s15
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f000 fa88 	bl	8003c46 <_ZN9LineTrace17setTargetVelocityEf>

		mon_tar_vel = velocity_table_[velocity_table_idx_];
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800373c:	3346      	adds	r3, #70	; 0x46
 800373e:	881b      	ldrh	r3, [r3, #0]
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	f503 53bd 	add.w	r3, r3, #6048	; 0x17a0
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	4413      	add	r3, r2
 800374a:	3304      	adds	r3, #4
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a06      	ldr	r2, [pc, #24]	; (8003768 <_ZN9LineTrace20updateTargetVelocityEv+0x130>)
 8003750:	6013      	str	r3, [r2, #0]

	}
}
 8003752:	bf00      	nop
 8003754:	3708      	adds	r7, #8
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	200002a0 	.word	0x200002a0
 8003760:	200002a4 	.word	0x200002a4
 8003764:	200002a8 	.word	0x200002a8
 8003768:	200002ac 	.word	0x200002ac

0800376c <_ZN9LineTrace16isTargetDistanceEf>:

bool LineTrace::isTargetDistance(float target_distance)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	ed87 0a00 	vstr	s0, [r7]
	bool ret = false;
 8003778:	2300      	movs	r3, #0
 800377a:	73fb      	strb	r3, [r7, #15]
	if(encoder_->getDistance10mm() >= target_distance){
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	695b      	ldr	r3, [r3, #20]
 8003780:	4618      	mov	r0, r3
 8003782:	f7fd ffa0 	bl	80016c6 <_ZN7Encoder15getDistance10mmEv>
 8003786:	eeb0 7a40 	vmov.f32	s14, s0
 800378a:	edd7 7a00 	vldr	s15, [r7]
 800378e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003796:	bf94      	ite	ls
 8003798:	2301      	movls	r3, #1
 800379a:	2300      	movhi	r3, #0
 800379c:	b2db      	uxtb	r3, r3
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d001      	beq.n	80037a6 <_ZN9LineTrace16isTargetDistanceEf+0x3a>
		ret = true;
 80037a2:	2301      	movs	r3, #1
 80037a4:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 80037a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	3710      	adds	r7, #16
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <_ZN9LineTrace11isCrossLineEv>:

bool LineTrace::isCrossLine()
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
	static uint16_t cnt = 0;
	float sensor_edge_val_l = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2]) / 3;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	ed93 7ab0 	vldr	s14, [r3, #704]	; 0x2c0
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 80037c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 80037d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80037d8:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80037dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80037e0:	edc7 7a03 	vstr	s15, [r7, #12]
	float sensor_edge_val_r = (line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]) / 3;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	ed93 7abb 	vldr	s14, [r3, #748]	; 0x2ec
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	edd3 7abc 	vldr	s15, [r3, #752]	; 0x2f0
 80037f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	edd3 7abd 	vldr	s15, [r3, #756]	; 0x2f4
 8003800:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003804:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 8003808:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800380c:	edc7 7a02 	vstr	s15, [r7, #8]
	static bool flag = false;
	static bool white_flag = false;
	mon_ave_l = sensor_edge_val_l;
 8003810:	4a40      	ldr	r2, [pc, #256]	; (8003914 <_ZN9LineTrace11isCrossLineEv+0x164>)
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	6013      	str	r3, [r2, #0]
	mon_ave_r = sensor_edge_val_r;
 8003816:	4a40      	ldr	r2, [pc, #256]	; (8003918 <_ZN9LineTrace11isCrossLineEv+0x168>)
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	6013      	str	r3, [r2, #0]

	if(white_flag == false){
 800381c:	4b3f      	ldr	r3, [pc, #252]	; (800391c <_ZN9LineTrace11isCrossLineEv+0x16c>)
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	f083 0301 	eor.w	r3, r3, #1
 8003824:	b2db      	uxtb	r3, r3
 8003826:	2b00      	cmp	r3, #0
 8003828:	d044      	beq.n	80038b4 <_ZN9LineTrace11isCrossLineEv+0x104>
		if(sensor_edge_val_l < 600 && sensor_edge_val_r < 600){
 800382a:	edd7 7a03 	vldr	s15, [r7, #12]
 800382e:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8003920 <_ZN9LineTrace11isCrossLineEv+0x170>
 8003832:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800383a:	d50f      	bpl.n	800385c <_ZN9LineTrace11isCrossLineEv+0xac>
 800383c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003840:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8003920 <_ZN9LineTrace11isCrossLineEv+0x170>
 8003844:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800384c:	d506      	bpl.n	800385c <_ZN9LineTrace11isCrossLineEv+0xac>
			cnt++;
 800384e:	4b35      	ldr	r3, [pc, #212]	; (8003924 <_ZN9LineTrace11isCrossLineEv+0x174>)
 8003850:	881b      	ldrh	r3, [r3, #0]
 8003852:	3301      	adds	r3, #1
 8003854:	b29a      	uxth	r2, r3
 8003856:	4b33      	ldr	r3, [pc, #204]	; (8003924 <_ZN9LineTrace11isCrossLineEv+0x174>)
 8003858:	801a      	strh	r2, [r3, #0]
 800385a:	e002      	b.n	8003862 <_ZN9LineTrace11isCrossLineEv+0xb2>
		}
		else{
			cnt = 0;
 800385c:	4b31      	ldr	r3, [pc, #196]	; (8003924 <_ZN9LineTrace11isCrossLineEv+0x174>)
 800385e:	2200      	movs	r2, #0
 8003860:	801a      	strh	r2, [r3, #0]
		}

		if(cnt >= 3){
 8003862:	4b30      	ldr	r3, [pc, #192]	; (8003924 <_ZN9LineTrace11isCrossLineEv+0x174>)
 8003864:	881b      	ldrh	r3, [r3, #0]
 8003866:	2b02      	cmp	r3, #2
 8003868:	d94d      	bls.n	8003906 <_ZN9LineTrace11isCrossLineEv+0x156>
			flag = true;
 800386a:	4b2f      	ldr	r3, [pc, #188]	; (8003928 <_ZN9LineTrace11isCrossLineEv+0x178>)
 800386c:	2201      	movs	r2, #1
 800386e:	701a      	strb	r2, [r3, #0]
			white_flag = true;
 8003870:	4b2a      	ldr	r3, [pc, #168]	; (800391c <_ZN9LineTrace11isCrossLineEv+0x16c>)
 8003872:	2201      	movs	r2, #1
 8003874:	701a      	strb	r2, [r3, #0]
			cnt = 0;
 8003876:	4b2b      	ldr	r3, [pc, #172]	; (8003924 <_ZN9LineTrace11isCrossLineEv+0x174>)
 8003878:	2200      	movs	r2, #0
 800387a:	801a      	strh	r2, [r3, #0]

			stable_cnt_reset_flag_ = true; //Because the conditions do not differ between when you tremble and when you do not tremble
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003882:	3384      	adds	r3, #132	; 0x84
 8003884:	2201      	movs	r2, #1
 8003886:	701a      	strb	r2, [r3, #0]
			if(mode_selector_ == FIRST_RUNNING){
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800388e:	3348      	adds	r3, #72	; 0x48
 8003890:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d103      	bne.n	80038a0 <_ZN9LineTrace11isCrossLineEv+0xf0>
				storeCrossLineDistance();
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f7ff fb45 	bl	8002f28 <_ZN9LineTrace22storeCrossLineDistanceEv>
 800389e:	e032      	b.n	8003906 <_ZN9LineTrace11isCrossLineEv+0x156>
			}
			else{
				correctionTotalDistanceFromCrossLine();
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f7ff fc0b 	bl	80030bc <_ZN9LineTrace36correctionTotalDistanceFromCrossLineEv>
				correction_check_cnt_ = 0;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80038ac:	3398      	adds	r3, #152	; 0x98
 80038ae:	2200      	movs	r2, #0
 80038b0:	801a      	strh	r2, [r3, #0]
 80038b2:	e028      	b.n	8003906 <_ZN9LineTrace11isCrossLineEv+0x156>
			}
		}
	}
	else{
		if(sensor_edge_val_l > 500 && sensor_edge_val_r > 500){
 80038b4:	edd7 7a03 	vldr	s15, [r7, #12]
 80038b8:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800392c <_ZN9LineTrace11isCrossLineEv+0x17c>
 80038bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038c4:	dd0f      	ble.n	80038e6 <_ZN9LineTrace11isCrossLineEv+0x136>
 80038c6:	edd7 7a02 	vldr	s15, [r7, #8]
 80038ca:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800392c <_ZN9LineTrace11isCrossLineEv+0x17c>
 80038ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038d6:	dd06      	ble.n	80038e6 <_ZN9LineTrace11isCrossLineEv+0x136>
			cnt++;
 80038d8:	4b12      	ldr	r3, [pc, #72]	; (8003924 <_ZN9LineTrace11isCrossLineEv+0x174>)
 80038da:	881b      	ldrh	r3, [r3, #0]
 80038dc:	3301      	adds	r3, #1
 80038de:	b29a      	uxth	r2, r3
 80038e0:	4b10      	ldr	r3, [pc, #64]	; (8003924 <_ZN9LineTrace11isCrossLineEv+0x174>)
 80038e2:	801a      	strh	r2, [r3, #0]
 80038e4:	e002      	b.n	80038ec <_ZN9LineTrace11isCrossLineEv+0x13c>
		}
		else{
			cnt = 0;
 80038e6:	4b0f      	ldr	r3, [pc, #60]	; (8003924 <_ZN9LineTrace11isCrossLineEv+0x174>)
 80038e8:	2200      	movs	r2, #0
 80038ea:	801a      	strh	r2, [r3, #0]
		}

		if(cnt >= 10){
 80038ec:	4b0d      	ldr	r3, [pc, #52]	; (8003924 <_ZN9LineTrace11isCrossLineEv+0x174>)
 80038ee:	881b      	ldrh	r3, [r3, #0]
 80038f0:	2b09      	cmp	r3, #9
 80038f2:	d908      	bls.n	8003906 <_ZN9LineTrace11isCrossLineEv+0x156>
			flag = false;
 80038f4:	4b0c      	ldr	r3, [pc, #48]	; (8003928 <_ZN9LineTrace11isCrossLineEv+0x178>)
 80038f6:	2200      	movs	r2, #0
 80038f8:	701a      	strb	r2, [r3, #0]
			white_flag = false;
 80038fa:	4b08      	ldr	r3, [pc, #32]	; (800391c <_ZN9LineTrace11isCrossLineEv+0x16c>)
 80038fc:	2200      	movs	r2, #0
 80038fe:	701a      	strb	r2, [r3, #0]
			cnt = 0;
 8003900:	4b08      	ldr	r3, [pc, #32]	; (8003924 <_ZN9LineTrace11isCrossLineEv+0x174>)
 8003902:	2200      	movs	r2, #0
 8003904:	801a      	strh	r2, [r3, #0]
		}

	}

	return flag;
 8003906:	4b08      	ldr	r3, [pc, #32]	; (8003928 <_ZN9LineTrace11isCrossLineEv+0x178>)
 8003908:	781b      	ldrb	r3, [r3, #0]
}
 800390a:	4618      	mov	r0, r3
 800390c:	3710      	adds	r7, #16
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	20000298 	.word	0x20000298
 8003918:	2000029c 	.word	0x2000029c
 800391c:	200002bf 	.word	0x200002bf
 8003920:	44160000 	.word	0x44160000
 8003924:	200002bc 	.word	0x200002bc
 8003928:	200002be 	.word	0x200002be
 800392c:	43fa0000 	.word	0x43fa0000

08003930 <_ZN9LineTrace8isStableEv>:

bool LineTrace::isStable()
{
 8003930:	b590      	push	{r4, r7, lr}
 8003932:	b087      	sub	sp, #28
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8003938:	2300      	movs	r3, #0
 800393a:	75fb      	strb	r3, [r7, #23]
	static uint16_t stable_cnt = 0;
	float temp_distance = encoder_->getDistance10mm();
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	695b      	ldr	r3, [r3, #20]
 8003940:	4618      	mov	r0, r3
 8003942:	f7fd fec0 	bl	80016c6 <_ZN7Encoder15getDistance10mmEv>
 8003946:	ed87 0a02 	vstr	s0, [r7, #8]
	float temp_theta = odometry_->getTheta();;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	699b      	ldr	r3, [r3, #24]
 800394e:	4618      	mov	r0, r3
 8003950:	f001 fc31 	bl	80051b6 <_ZN8Odometry8getThetaEv>
 8003954:	ec54 3b10 	vmov	r3, r4, d0
 8003958:	4618      	mov	r0, r3
 800395a:	4621      	mov	r1, r4
 800395c:	f7fd f95c 	bl	8000c18 <__aeabi_d2f>
 8003960:	4603      	mov	r3, r0
 8003962:	613b      	str	r3, [r7, #16]

	if(temp_theta == 0) temp_theta = 0.00001;
 8003964:	edd7 7a04 	vldr	s15, [r7, #16]
 8003968:	eef5 7a40 	vcmp.f32	s15, #0.0
 800396c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003970:	d101      	bne.n	8003976 <_ZN9LineTrace8isStableEv+0x46>
 8003972:	4b23      	ldr	r3, [pc, #140]	; (8003a00 <_ZN9LineTrace8isStableEv+0xd0>)
 8003974:	613b      	str	r3, [r7, #16]
	float radius = abs(temp_distance / temp_theta);
 8003976:	ed97 7a02 	vldr	s14, [r7, #8]
 800397a:	edd7 7a04 	vldr	s15, [r7, #16]
 800397e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003982:	eeb0 0a66 	vmov.f32	s0, s13
 8003986:	f7ff f889 	bl	8002a9c <_ZSt3absf>
 800398a:	ed87 0a03 	vstr	s0, [r7, #12]
	if(radius >= 5000) radius = 5000;
 800398e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003992:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8003a04 <_ZN9LineTrace8isStableEv+0xd4>
 8003996:	eef4 7ac7 	vcmpe.f32	s15, s14
 800399a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800399e:	db01      	blt.n	80039a4 <_ZN9LineTrace8isStableEv+0x74>
 80039a0:	4b19      	ldr	r3, [pc, #100]	; (8003a08 <_ZN9LineTrace8isStableEv+0xd8>)
 80039a2:	60fb      	str	r3, [r7, #12]

	if(stable_cnt_reset_flag_ == true){
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80039aa:	3384      	adds	r3, #132	; 0x84
 80039ac:	781b      	ldrb	r3, [r3, #0]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d008      	beq.n	80039c4 <_ZN9LineTrace8isStableEv+0x94>
		stable_cnt = 0;
 80039b2:	4b16      	ldr	r3, [pc, #88]	; (8003a0c <_ZN9LineTrace8isStableEv+0xdc>)
 80039b4:	2200      	movs	r2, #0
 80039b6:	801a      	strh	r2, [r3, #0]
		stable_cnt_reset_flag_ = false;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80039be:	3384      	adds	r3, #132	; 0x84
 80039c0:	2200      	movs	r2, #0
 80039c2:	701a      	strb	r2, [r3, #0]
	}

	if(radius >= 2000){
 80039c4:	edd7 7a03 	vldr	s15, [r7, #12]
 80039c8:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8003a10 <_ZN9LineTrace8isStableEv+0xe0>
 80039cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039d4:	db06      	blt.n	80039e4 <_ZN9LineTrace8isStableEv+0xb4>
		stable_cnt++;
 80039d6:	4b0d      	ldr	r3, [pc, #52]	; (8003a0c <_ZN9LineTrace8isStableEv+0xdc>)
 80039d8:	881b      	ldrh	r3, [r3, #0]
 80039da:	3301      	adds	r3, #1
 80039dc:	b29a      	uxth	r2, r3
 80039de:	4b0b      	ldr	r3, [pc, #44]	; (8003a0c <_ZN9LineTrace8isStableEv+0xdc>)
 80039e0:	801a      	strh	r2, [r3, #0]
 80039e2:	e002      	b.n	80039ea <_ZN9LineTrace8isStableEv+0xba>
	}
	else{
		stable_cnt = 0;
 80039e4:	4b09      	ldr	r3, [pc, #36]	; (8003a0c <_ZN9LineTrace8isStableEv+0xdc>)
 80039e6:	2200      	movs	r2, #0
 80039e8:	801a      	strh	r2, [r3, #0]
	}

	if(stable_cnt >= 23){ //230mm
 80039ea:	4b08      	ldr	r3, [pc, #32]	; (8003a0c <_ZN9LineTrace8isStableEv+0xdc>)
 80039ec:	881b      	ldrh	r3, [r3, #0]
 80039ee:	2b16      	cmp	r3, #22
 80039f0:	d901      	bls.n	80039f6 <_ZN9LineTrace8isStableEv+0xc6>
		ret = true;
 80039f2:	2301      	movs	r3, #1
 80039f4:	75fb      	strb	r3, [r7, #23]
	}

	return ret;
 80039f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	371c      	adds	r7, #28
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd90      	pop	{r4, r7, pc}
 8003a00:	3727c5ac 	.word	0x3727c5ac
 8003a04:	459c4000 	.word	0x459c4000
 8003a08:	459c4000 	.word	0x459c4000
 8003a0c:	200002c0 	.word	0x200002c0
 8003a10:	44fa0000 	.word	0x44fa0000

08003a14 <_ZN9LineTrace4initEv>:
// -------public---------- //
// ---------------------------------------------------------------------------------------------------//
// ------------------------------------ Initialize----------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::init()
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b08e      	sub	sp, #56	; 0x38
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
	float temp_kp, temp_ki, temp_kd;
	sd_read_array_float("PARAMS", "KP.TXT", 1, &temp_kp);
 8003a1c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003a20:	2201      	movs	r2, #1
 8003a22:	4951      	ldr	r1, [pc, #324]	; (8003b68 <_ZN9LineTrace4initEv+0x154>)
 8003a24:	4851      	ldr	r0, [pc, #324]	; (8003b6c <_ZN9LineTrace4initEv+0x158>)
 8003a26:	f7fd ff8f 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KI.TXT", 1, &temp_ki);
 8003a2a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003a2e:	2201      	movs	r2, #1
 8003a30:	494f      	ldr	r1, [pc, #316]	; (8003b70 <_ZN9LineTrace4initEv+0x15c>)
 8003a32:	484e      	ldr	r0, [pc, #312]	; (8003b6c <_ZN9LineTrace4initEv+0x158>)
 8003a34:	f7fd ff88 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "KD.TXT", 1, &temp_kd);
 8003a38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	494d      	ldr	r1, [pc, #308]	; (8003b74 <_ZN9LineTrace4initEv+0x160>)
 8003a40:	484a      	ldr	r0, [pc, #296]	; (8003b6c <_ZN9LineTrace4initEv+0x158>)
 8003a42:	f7fd ff81 	bl	8001948 <sd_read_array_float>
	setGain(temp_kp, temp_ki, temp_kd);
 8003a46:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003a4a:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8003a4e:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8003a52:	eeb0 1a66 	vmov.f32	s2, s13
 8003a56:	eef0 0a47 	vmov.f32	s1, s14
 8003a5a:	eeb0 0a67 	vmov.f32	s0, s15
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f000 f89c 	bl	8003b9c <_ZN9LineTrace7setGainEfff>

	float temp_velocity, temp_max_velocity, temp_max_velocity2, temp_min_velocity, temp_min_velocity2;
	sd_read_array_float("PARAMS", "TARVEL1.TXT", 1, &temp_velocity);
 8003a64:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a68:	2201      	movs	r2, #1
 8003a6a:	4943      	ldr	r1, [pc, #268]	; (8003b78 <_ZN9LineTrace4initEv+0x164>)
 8003a6c:	483f      	ldr	r0, [pc, #252]	; (8003b6c <_ZN9LineTrace4initEv+0x158>)
 8003a6e:	f7fd ff6b 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL2.TXT", 1, &temp_max_velocity);
 8003a72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a76:	2201      	movs	r2, #1
 8003a78:	4940      	ldr	r1, [pc, #256]	; (8003b7c <_ZN9LineTrace4initEv+0x168>)
 8003a7a:	483c      	ldr	r0, [pc, #240]	; (8003b6c <_ZN9LineTrace4initEv+0x158>)
 8003a7c:	f7fd ff64 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "TARVEL3.TXT", 1, &temp_max_velocity2);
 8003a80:	f107 0320 	add.w	r3, r7, #32
 8003a84:	2201      	movs	r2, #1
 8003a86:	493e      	ldr	r1, [pc, #248]	; (8003b80 <_ZN9LineTrace4initEv+0x16c>)
 8003a88:	4838      	ldr	r0, [pc, #224]	; (8003b6c <_ZN9LineTrace4initEv+0x158>)
 8003a8a:	f7fd ff5d 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "MINVEL.TXT", 1, &temp_min_velocity);
 8003a8e:	f107 031c 	add.w	r3, r7, #28
 8003a92:	2201      	movs	r2, #1
 8003a94:	493b      	ldr	r1, [pc, #236]	; (8003b84 <_ZN9LineTrace4initEv+0x170>)
 8003a96:	4835      	ldr	r0, [pc, #212]	; (8003b6c <_ZN9LineTrace4initEv+0x158>)
 8003a98:	f7fd ff56 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "MINVEL2.TXT", 1, &temp_min_velocity2);
 8003a9c:	f107 0318 	add.w	r3, r7, #24
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	4939      	ldr	r1, [pc, #228]	; (8003b88 <_ZN9LineTrace4initEv+0x174>)
 8003aa4:	4831      	ldr	r0, [pc, #196]	; (8003b6c <_ZN9LineTrace4initEv+0x158>)
 8003aa6:	f7fd ff4f 	bl	8001948 <sd_read_array_float>
	setTargetVelocity(temp_velocity);
 8003aaa:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003aae:	eeb0 0a67 	vmov.f32	s0, s15
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 f8c7 	bl	8003c46 <_ZN9LineTrace17setTargetVelocityEf>
	setMaxVelocity(temp_max_velocity);
 8003ab8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003abc:	eeb0 0a67 	vmov.f32	s0, s15
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f000 f8d0 	bl	8003c66 <_ZN9LineTrace14setMaxVelocityEf>
	setMaxVelocity2(temp_max_velocity2);
 8003ac6:	edd7 7a08 	vldr	s15, [r7, #32]
 8003aca:	eeb0 0a67 	vmov.f32	s0, s15
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 f8d9 	bl	8003c86 <_ZN9LineTrace15setMaxVelocity2Ef>
	setMinVelocity(temp_min_velocity);
 8003ad4:	edd7 7a07 	vldr	s15, [r7, #28]
 8003ad8:	eeb0 0a67 	vmov.f32	s0, s15
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f000 f8e2 	bl	8003ca6 <_ZN9LineTrace14setMinVelocityEf>
	setMinVelocity2(temp_min_velocity2);
 8003ae2:	edd7 7a06 	vldr	s15, [r7, #24]
 8003ae6:	eeb0 0a67 	vmov.f32	s0, s15
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f000 f8eb 	bl	8003cc6 <_ZN9LineTrace15setMinVelocity2Ef>

	float temp_acc, temp_dec;
	sd_read_array_float("PARAMS", "ACC.TXT", 1, &temp_acc);
 8003af0:	f107 0314 	add.w	r3, r7, #20
 8003af4:	2201      	movs	r2, #1
 8003af6:	4925      	ldr	r1, [pc, #148]	; (8003b8c <_ZN9LineTrace4initEv+0x178>)
 8003af8:	481c      	ldr	r0, [pc, #112]	; (8003b6c <_ZN9LineTrace4initEv+0x158>)
 8003afa:	f7fd ff25 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "DEC.TXT", 1, &temp_dec);
 8003afe:	f107 0310 	add.w	r3, r7, #16
 8003b02:	2201      	movs	r2, #1
 8003b04:	4922      	ldr	r1, [pc, #136]	; (8003b90 <_ZN9LineTrace4initEv+0x17c>)
 8003b06:	4819      	ldr	r0, [pc, #100]	; (8003b6c <_ZN9LineTrace4initEv+0x158>)
 8003b08:	f7fd ff1e 	bl	8001948 <sd_read_array_float>
	setMaxAccDec(temp_acc, temp_dec);
 8003b0c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003b10:	ed97 7a04 	vldr	s14, [r7, #16]
 8003b14:	eef0 0a47 	vmov.f32	s1, s14
 8003b18:	eeb0 0a67 	vmov.f32	s0, s15
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f000 f932 	bl	8003d86 <_ZN9LineTrace12setMaxAccDecEff>

	float temp_acc2 = 0, temp_dec2 = 0;
 8003b22:	f04f 0300 	mov.w	r3, #0
 8003b26:	60fb      	str	r3, [r7, #12]
 8003b28:	f04f 0300 	mov.w	r3, #0
 8003b2c:	60bb      	str	r3, [r7, #8]
	sd_read_array_float("PARAMS", "ACC2.TXT", 1, &temp_acc2);
 8003b2e:	f107 030c 	add.w	r3, r7, #12
 8003b32:	2201      	movs	r2, #1
 8003b34:	4917      	ldr	r1, [pc, #92]	; (8003b94 <_ZN9LineTrace4initEv+0x180>)
 8003b36:	480d      	ldr	r0, [pc, #52]	; (8003b6c <_ZN9LineTrace4initEv+0x158>)
 8003b38:	f7fd ff06 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("PARAMS", "DEC2.TXT", 1, &temp_dec2);
 8003b3c:	f107 0308 	add.w	r3, r7, #8
 8003b40:	2201      	movs	r2, #1
 8003b42:	4915      	ldr	r1, [pc, #84]	; (8003b98 <_ZN9LineTrace4initEv+0x184>)
 8003b44:	4809      	ldr	r0, [pc, #36]	; (8003b6c <_ZN9LineTrace4initEv+0x158>)
 8003b46:	f7fd feff 	bl	8001948 <sd_read_array_float>
	setMaxAccDec2(temp_acc2, temp_dec2);
 8003b4a:	edd7 7a03 	vldr	s15, [r7, #12]
 8003b4e:	ed97 7a02 	vldr	s14, [r7, #8]
 8003b52:	eef0 0a47 	vmov.f32	s1, s14
 8003b56:	eeb0 0a67 	vmov.f32	s0, s15
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f000 f92d 	bl	8003dba <_ZN9LineTrace13setMaxAccDec2Eff>
}
 8003b60:	bf00      	nop
 8003b62:	3738      	adds	r7, #56	; 0x38
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	080196b8 	.word	0x080196b8
 8003b6c:	080196c0 	.word	0x080196c0
 8003b70:	080196c8 	.word	0x080196c8
 8003b74:	080196d0 	.word	0x080196d0
 8003b78:	080196d8 	.word	0x080196d8
 8003b7c:	080196e4 	.word	0x080196e4
 8003b80:	080196f0 	.word	0x080196f0
 8003b84:	080196fc 	.word	0x080196fc
 8003b88:	08019708 	.word	0x08019708
 8003b8c:	08019714 	.word	0x08019714
 8003b90:	0801971c 	.word	0x0801971c
 8003b94:	08019724 	.word	0x08019724
 8003b98:	08019730 	.word	0x08019730

08003b9c <_ZN9LineTrace7setGainEfff>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------------- Line following gain------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::setGain(float kp, float ki, float kd)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b085      	sub	sp, #20
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	ed87 0a02 	vstr	s0, [r7, #8]
 8003ba8:	edc7 0a01 	vstr	s1, [r7, #4]
 8003bac:	ed87 1a00 	vstr	s2, [r7]
	kp_ = kp;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	68ba      	ldr	r2, [r7, #8]
 8003bb4:	629a      	str	r2, [r3, #40]	; 0x28
	ki_ = ki;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	687a      	ldr	r2, [r7, #4]
 8003bba:	631a      	str	r2, [r3, #48]	; 0x30
	kd_ = kd;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	683a      	ldr	r2, [r7, #0]
 8003bc0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003bc2:	bf00      	nop
 8003bc4:	3714      	adds	r7, #20
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr

08003bce <_ZN9LineTrace5getKpEv>:

float LineTrace::getKp()
{
 8003bce:	b480      	push	{r7}
 8003bd0:	b083      	sub	sp, #12
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	6078      	str	r0, [r7, #4]
	return kp_;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bda:	ee07 3a90 	vmov	s15, r3
}
 8003bde:	eeb0 0a67 	vmov.f32	s0, s15
 8003be2:	370c      	adds	r7, #12
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr

08003bec <_ZN9LineTrace5getKiEv>:

float LineTrace::getKi()
{
 8003bec:	b480      	push	{r7}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
	return ki_;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf8:	ee07 3a90 	vmov	s15, r3
}
 8003bfc:	eeb0 0a67 	vmov.f32	s0, s15
 8003c00:	370c      	adds	r7, #12
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr

08003c0a <_ZN9LineTrace5getKdEv>:

float LineTrace::getKd()
{
 8003c0a:	b480      	push	{r7}
 8003c0c:	b083      	sub	sp, #12
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
	return kd_;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c16:	ee07 3a90 	vmov	s15, r3
}
 8003c1a:	eeb0 0a67 	vmov.f32	s0, s15
 8003c1e:	370c      	adds	r7, #12
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <_ZN9LineTrace14setNormalRatioEf>:
// ---------------------------------------------------------------------------------------------------//
// ------------------------------ Velocity setting----------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//

void LineTrace::setNormalRatio(float ratio)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	ed87 0a00 	vstr	s0, [r7]
	normal_ratio_ = ratio;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	683a      	ldr	r2, [r7, #0]
 8003c38:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003c3a:	bf00      	nop
 8003c3c:	370c      	adds	r7, #12
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr

08003c46 <_ZN9LineTrace17setTargetVelocityEf>:

void LineTrace::setTargetVelocity(float velocity)
{
 8003c46:	b480      	push	{r7}
 8003c48:	b083      	sub	sp, #12
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]
 8003c4e:	ed87 0a00 	vstr	s0, [r7]
	target_velocity_ = velocity;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	683a      	ldr	r2, [r7, #0]
 8003c56:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 8003c5a:	bf00      	nop
 8003c5c:	370c      	adds	r7, #12
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr

08003c66 <_ZN9LineTrace14setMaxVelocityEf>:

void LineTrace::setMaxVelocity(float velocity)
{
 8003c66:	b480      	push	{r7}
 8003c68:	b083      	sub	sp, #12
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	6078      	str	r0, [r7, #4]
 8003c6e:	ed87 0a00 	vstr	s0, [r7]
	max_velocity_ = velocity;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	683a      	ldr	r2, [r7, #0]
 8003c76:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
}
 8003c7a:	bf00      	nop
 8003c7c:	370c      	adds	r7, #12
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr

08003c86 <_ZN9LineTrace15setMaxVelocity2Ef>:

void LineTrace::setMaxVelocity2(float velocity)
{
 8003c86:	b480      	push	{r7}
 8003c88:	b083      	sub	sp, #12
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]
 8003c8e:	ed87 0a00 	vstr	s0, [r7]
	max_velocity2_ = velocity;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	683a      	ldr	r2, [r7, #0]
 8003c96:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8003c9a:	bf00      	nop
 8003c9c:	370c      	adds	r7, #12
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr

08003ca6 <_ZN9LineTrace14setMinVelocityEf>:

void LineTrace::setMinVelocity(float velocity)
{
 8003ca6:	b480      	push	{r7}
 8003ca8:	b083      	sub	sp, #12
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	6078      	str	r0, [r7, #4]
 8003cae:	ed87 0a00 	vstr	s0, [r7]
	min_velocity_ = velocity;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	683a      	ldr	r2, [r7, #0]
 8003cb6:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
 8003cba:	bf00      	nop
 8003cbc:	370c      	adds	r7, #12
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr

08003cc6 <_ZN9LineTrace15setMinVelocity2Ef>:

void LineTrace::setMinVelocity2(float velocity)
{
 8003cc6:	b480      	push	{r7}
 8003cc8:	b083      	sub	sp, #12
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
 8003cce:	ed87 0a00 	vstr	s0, [r7]
	min_velocity2_ = velocity;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	683a      	ldr	r2, [r7, #0]
 8003cd6:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
}
 8003cda:	bf00      	nop
 8003cdc:	370c      	adds	r7, #12
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr

08003ce6 <_ZN9LineTrace17getTargetVelocityEv>:

float LineTrace::getTargetVelocity()
{
 8003ce6:	b480      	push	{r7}
 8003ce8:	b083      	sub	sp, #12
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	6078      	str	r0, [r7, #4]
	return target_velocity_;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003cf4:	ee07 3a90 	vmov	s15, r3
}
 8003cf8:	eeb0 0a67 	vmov.f32	s0, s15
 8003cfc:	370c      	adds	r7, #12
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr

08003d06 <_ZN9LineTrace14getMaxVelocityEv>:

float LineTrace::getMaxVelocity()
{
 8003d06:	b480      	push	{r7}
 8003d08:	b083      	sub	sp, #12
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	6078      	str	r0, [r7, #4]
	return max_velocity_;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003d14:	ee07 3a90 	vmov	s15, r3
}
 8003d18:	eeb0 0a67 	vmov.f32	s0, s15
 8003d1c:	370c      	adds	r7, #12
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr

08003d26 <_ZN9LineTrace15getMaxVelocity2Ev>:

float LineTrace::getMaxVelocity2()
{
 8003d26:	b480      	push	{r7}
 8003d28:	b083      	sub	sp, #12
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
	return max_velocity2_;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003d34:	ee07 3a90 	vmov	s15, r3
}
 8003d38:	eeb0 0a67 	vmov.f32	s0, s15
 8003d3c:	370c      	adds	r7, #12
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr

08003d46 <_ZN9LineTrace14getMinVelocityEv>:

float LineTrace::getMinVelocity()
{
 8003d46:	b480      	push	{r7}
 8003d48:	b083      	sub	sp, #12
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	6078      	str	r0, [r7, #4]
	return min_velocity_;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003d54:	ee07 3a90 	vmov	s15, r3
}
 8003d58:	eeb0 0a67 	vmov.f32	s0, s15
 8003d5c:	370c      	adds	r7, #12
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr

08003d66 <_ZN9LineTrace15getMinVelocity2Ev>:

float LineTrace::getMinVelocity2()
{
 8003d66:	b480      	push	{r7}
 8003d68:	b083      	sub	sp, #12
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	6078      	str	r0, [r7, #4]
	return min_velocity2_;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003d74:	ee07 3a90 	vmov	s15, r3
}
 8003d78:	eeb0 0a67 	vmov.f32	s0, s15
 8003d7c:	370c      	adds	r7, #12
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr

08003d86 <_ZN9LineTrace12setMaxAccDecEff>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------------ Acceleration setting------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::setMaxAccDec(const float acc, const float dec)
{
 8003d86:	b480      	push	{r7}
 8003d88:	b085      	sub	sp, #20
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	60f8      	str	r0, [r7, #12]
 8003d8e:	ed87 0a02 	vstr	s0, [r7, #8]
 8003d92:	edc7 0a01 	vstr	s1, [r7, #4]
	max_acc_ = acc;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003d9c:	3388      	adds	r3, #136	; 0x88
 8003d9e:	68ba      	ldr	r2, [r7, #8]
 8003da0:	601a      	str	r2, [r3, #0]
	max_dec_ = dec;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003da8:	338c      	adds	r3, #140	; 0x8c
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	601a      	str	r2, [r3, #0]
}
 8003dae:	bf00      	nop
 8003db0:	3714      	adds	r7, #20
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr

08003dba <_ZN9LineTrace13setMaxAccDec2Eff>:

void LineTrace::setMaxAccDec2(const float acc, const float dec)
{
 8003dba:	b480      	push	{r7}
 8003dbc:	b085      	sub	sp, #20
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	60f8      	str	r0, [r7, #12]
 8003dc2:	ed87 0a02 	vstr	s0, [r7, #8]
 8003dc6:	edc7 0a01 	vstr	s1, [r7, #4]
	max_acc2_ = acc;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003dd0:	3390      	adds	r3, #144	; 0x90
 8003dd2:	68ba      	ldr	r2, [r7, #8]
 8003dd4:	601a      	str	r2, [r3, #0]
	max_dec2_ = dec;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003ddc:	3394      	adds	r3, #148	; 0x94
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	601a      	str	r2, [r3, #0]
}
 8003de2:	bf00      	nop
 8003de4:	3714      	adds	r7, #20
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr

08003dee <_ZN9LineTrace9getMaxAccEv>:

float LineTrace::getMaxAcc()
{
 8003dee:	b480      	push	{r7}
 8003df0:	b083      	sub	sp, #12
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
	return max_acc_;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003dfc:	3388      	adds	r3, #136	; 0x88
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	ee07 3a90 	vmov	s15, r3
}
 8003e04:	eeb0 0a67 	vmov.f32	s0, s15
 8003e08:	370c      	adds	r7, #12
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr

08003e12 <_ZN9LineTrace10getMaxDec2Ev>:

float LineTrace::getMaxDec2()
{
 8003e12:	b480      	push	{r7}
 8003e14:	b083      	sub	sp, #12
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	6078      	str	r0, [r7, #4]
	return max_dec2_;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003e20:	3394      	adds	r3, #148	; 0x94
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	ee07 3a90 	vmov	s15, r3
}
 8003e28:	eeb0 0a67 	vmov.f32	s0, s15
 8003e2c:	370c      	adds	r7, #12
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr

08003e36 <_ZN9LineTrace10getMaxAcc2Ev>:

float LineTrace::getMaxAcc2()
{
 8003e36:	b480      	push	{r7}
 8003e38:	b083      	sub	sp, #12
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	6078      	str	r0, [r7, #4]
	return max_acc2_;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003e44:	3390      	adds	r3, #144	; 0x90
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	ee07 3a90 	vmov	s15, r3
}
 8003e4c:	eeb0 0a67 	vmov.f32	s0, s15
 8003e50:	370c      	adds	r7, #12
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr

08003e5a <_ZN9LineTrace9getMaxDecEv>:

float LineTrace::getMaxDec()
{
 8003e5a:	b480      	push	{r7}
 8003e5c:	b083      	sub	sp, #12
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	6078      	str	r0, [r7, #4]
	return max_dec_;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003e68:	338c      	adds	r3, #140	; 0x8c
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	ee07 3a90 	vmov	s15, r3
}
 8003e70:	eeb0 0a67 	vmov.f32	s0, s15
 8003e74:	370c      	adds	r7, #12
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr
	...

08003e80 <_ZN9LineTrace4flipEv>:

// ---------------------------------------------------------------------------------------------------//
// ---------------------------------------- Flip -----------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::flip()
{
 8003e80:	b590      	push	{r4, r7, lr}
 8003e82:	b083      	sub	sp, #12
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
	if(excution_flag_ == true){
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	f000 8116 	beq.w	80040c0 <_ZN9LineTrace4flipEv+0x240>
		// ---- line following processing -----//
		pidTrace();
 8003e94:	6878      	ldr	r0, [r7, #4]
 8003e96:	f7fe ff8f 	bl	8002db8 <_ZN9LineTrace8pidTraceEv>
		//steeringAngleTrace();


		// ---- Target Velocity Updata ------//
		updateTargetVelocity();
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f7ff fbcc 	bl	8003638 <_ZN9LineTrace20updateTargetVelocityEv>


		// ----- Processing at regular distances -----//
		if(isTargetDistance(10) == true){
 8003ea0:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f7ff fc61 	bl	800376c <_ZN9LineTrace16isTargetDistanceEf>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d040      	beq.n	8003f32 <_ZN9LineTrace4flipEv+0xb2>
			// ---- Store Logs ------//
			storeLogs();
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f7ff f8a9 	bl	8003008 <_ZN9LineTrace9storeLogsEv>
			logger_->storeLog(imu_->getOmega());
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	69dc      	ldr	r4, [r3, #28]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a1b      	ldr	r3, [r3, #32]
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f7fd fff6 	bl	8001eb0 <_ZN3IMU8getOmegaEv>
 8003ec4:	eef0 7a40 	vmov.f32	s15, s0
 8003ec8:	eeb0 0a67 	vmov.f32	s0, s15
 8003ecc:	4620      	mov	r0, r4
 8003ece:	f000 fc5d 	bl	800478c <_ZN6Logger8storeLogEf>
			logger_->storeLog2(target_omega_);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	69da      	ldr	r2, [r3, #28]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	edd3 7a2a 	vldr	s15, [r3, #168]	; 0xa8
 8003edc:	eeb0 0a67 	vmov.f32	s0, s15
 8003ee0:	4610      	mov	r0, r2
 8003ee2:	f000 fc8a 	bl	80047fa <_ZN6Logger9storeLog2Ef>

			// -------- Detect Robot stabilization ------//
			if(isStable() == true && side_sensor_->getStatusL() == false){ // Stabilizing and side sensor is black
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f7ff fd22 	bl	8003930 <_ZN9LineTrace8isStableEv>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d00c      	beq.n	8003f0c <_ZN9LineTrace4flipEv+0x8c>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f001 fc1a 	bl	8005730 <_ZN10SideSensor10getStatusLEv>
 8003efc:	4603      	mov	r3, r0
 8003efe:	f083 0301 	eor.w	r3, r3, #1
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d001      	beq.n	8003f0c <_ZN9LineTrace4flipEv+0x8c>
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e000      	b.n	8003f0e <_ZN9LineTrace4flipEv+0x8e>
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d005      	beq.n	8003f1e <_ZN9LineTrace4flipEv+0x9e>
				stable_flag_ = true;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003f18:	3383      	adds	r3, #131	; 0x83
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	701a      	strb	r2, [r3, #0]
			}

			// ---reset total cnt ---//
			encoder_->clearDistance10mm();
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	695b      	ldr	r3, [r3, #20]
 8003f22:	4618      	mov	r0, r3
 8003f24:	f7fd fbfc 	bl	8001720 <_ZN7Encoder17clearDistance10mmEv>
			odometry_->clearPotition();
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	699b      	ldr	r3, [r3, #24]
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f001 f953 	bl	80051d8 <_ZN8Odometry13clearPotitionEv>
		}

		// ------- Store side line distance or correction distance------//
		if(stable_flag_ == true && side_sensor_->getStatusL() == true){ //Stabilizing and side sensor is white
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003f38:	3383      	adds	r3, #131	; 0x83
 8003f3a:	781b      	ldrb	r3, [r3, #0]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d009      	beq.n	8003f54 <_ZN9LineTrace4flipEv+0xd4>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	691b      	ldr	r3, [r3, #16]
 8003f44:	4618      	mov	r0, r3
 8003f46:	f001 fbf3 	bl	8005730 <_ZN10SideSensor10getStatusLEv>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d001      	beq.n	8003f54 <_ZN9LineTrace4flipEv+0xd4>
 8003f50:	2301      	movs	r3, #1
 8003f52:	e000      	b.n	8003f56 <_ZN9LineTrace4flipEv+0xd6>
 8003f54:	2300      	movs	r3, #0
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d020      	beq.n	8003f9c <_ZN9LineTrace4flipEv+0x11c>
			if(mode_selector_ == FIRST_RUNNING){
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8003f60:	3348      	adds	r3, #72	; 0x48
 8003f62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d103      	bne.n	8003f72 <_ZN9LineTrace4flipEv+0xf2>
				storeSideLineDistance();
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f7ff f813 	bl	8002f96 <_ZN9LineTrace21storeSideLineDistanceEv>
 8003f70:	e008      	b.n	8003f84 <_ZN9LineTrace4flipEv+0x104>
			}
			else{
				correctionTotalDistanceFromSideMarker();
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f7ff f8d8 	bl	8003128 <_ZN9LineTrace37correctionTotalDistanceFromSideMarkerEv>
				correction_check_cnt_ = 0;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003f7e:	3398      	adds	r3, #152	; 0x98
 8003f80:	2200      	movs	r2, #0
 8003f82:	801a      	strh	r2, [r3, #0]
			}

			stable_flag_ = false;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003f8a:	3383      	adds	r3, #131	; 0x83
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	701a      	strb	r2, [r3, #0]
			stable_cnt_reset_flag_ = true;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8003f96:	3384      	adds	r3, #132	; 0x84
 8003f98:	2201      	movs	r2, #1
 8003f9a:	701a      	strb	r2, [r3, #0]
		}

		// ----- cross line ignore processing ------//
		if(isCrossLine() == true){ //detect cross line
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f7ff fc07 	bl	80037b0 <_ZN9LineTrace11isCrossLineEv>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d009      	beq.n	8003fbc <_ZN9LineTrace4flipEv+0x13c>
			side_sensor_->enableIgnore();
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	691b      	ldr	r3, [r3, #16]
 8003fac:	4618      	mov	r0, r3
 8003fae:	f001 fbe7 	bl	8005780 <_ZN10SideSensor12enableIgnoreEv>
			encoder_->clearCrossLineIgnoreDistance();
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	695b      	ldr	r3, [r3, #20]
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f7fd fbdd 	bl	8001776 <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
			// Note: Store cross line distance here.
		}

		if(side_sensor_->getIgnoreFlag() == true && encoder_->getCrossLineIgnoreDistance() >= 200){
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	691b      	ldr	r3, [r3, #16]
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f001 fbf7 	bl	80057b4 <_ZN10SideSensor13getIgnoreFlagEv>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d00f      	beq.n	8003fec <_ZN9LineTrace4flipEv+0x16c>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	695b      	ldr	r3, [r3, #20]
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f7fd fbc1 	bl	8001758 <_ZN7Encoder26getCrossLineIgnoreDistanceEv>
 8003fd6:	eeb0 7a40 	vmov.f32	s14, s0
 8003fda:	eddf 7a3b 	vldr	s15, [pc, #236]	; 80040c8 <_ZN9LineTrace4flipEv+0x248>
 8003fde:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003fe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fe6:	db01      	blt.n	8003fec <_ZN9LineTrace4flipEv+0x16c>
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e000      	b.n	8003fee <_ZN9LineTrace4flipEv+0x16e>
 8003fec:	2300      	movs	r3, #0
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d004      	beq.n	8003ffc <_ZN9LineTrace4flipEv+0x17c>
			side_sensor_->disableIgnore();
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	691b      	ldr	r3, [r3, #16]
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f001 fbcf 	bl	800579a <_ZN10SideSensor13disableIgnoreEv>
		}


		if(stable_flag_ == true) led_.LR(-1, 1);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8004002:	3383      	adds	r3, #131	; 0x83
 8004004:	781b      	ldrb	r3, [r3, #0]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d008      	beq.n	800401c <_ZN9LineTrace4flipEv+0x19c>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	330c      	adds	r3, #12
 800400e:	2201      	movs	r2, #1
 8004010:	f04f 31ff 	mov.w	r1, #4294967295
 8004014:	4618      	mov	r0, r3
 8004016:	f7fe f9c9 	bl	80023ac <_ZN3LED2LREaa>
 800401a:	e007      	b.n	800402c <_ZN9LineTrace4flipEv+0x1ac>
		else led_.LR(-1, 0);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	330c      	adds	r3, #12
 8004020:	2200      	movs	r2, #0
 8004022:	f04f 31ff 	mov.w	r1, #4294967295
 8004026:	4618      	mov	r0, r3
 8004028:	f7fe f9c0 	bl	80023ac <_ZN3LED2LREaa>
			all_sideline_flag_ = false;
		}
		*/

		// ----- Emergency stop processing------//
		if(line_sensor_->emergencyStop() == true){
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	4618      	mov	r0, r3
 8004032:	f7fe fce3 	bl	80029fc <_ZN10LineSensor13emergencyStopEv>
 8004036:	4603      	mov	r3, r0
 8004038:	2b00      	cmp	r3, #0
 800403a:	d00d      	beq.n	8004058 <_ZN9LineTrace4flipEv+0x1d8>
			velocity_ctrl_->setTranslationVelocityOnly(0, 0);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	eddf 0a22 	vldr	s1, [pc, #136]	; 80040cc <_ZN9LineTrace4flipEv+0x24c>
 8004044:	ed9f 0a21 	vldr	s0, [pc, #132]	; 80040cc <_ZN9LineTrace4flipEv+0x24c>
 8004048:	4618      	mov	r0, r3
 800404a:	f001 fda1 	bl	8005b90 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>
			esc_->off();
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004052:	4618      	mov	r0, r3
 8004054:	f7fd f996 	bl	8001384 <_ZN3ESC3offEv>
		else{
			//led_.LR(0, -1);
		}

		// ---------Confirmation when corrected ------------//
		correction_check_cnt_++;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800405e:	3398      	adds	r3, #152	; 0x98
 8004060:	881b      	ldrh	r3, [r3, #0]
 8004062:	3301      	adds	r3, #1
 8004064:	b29a      	uxth	r2, r3
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800406c:	3398      	adds	r3, #152	; 0x98
 800406e:	801a      	strh	r2, [r3, #0]
		if(correction_check_cnt_ >= 10000) correction_check_cnt_ = 10000;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8004076:	3398      	adds	r3, #152	; 0x98
 8004078:	881b      	ldrh	r3, [r3, #0]
 800407a:	f242 720f 	movw	r2, #9999	; 0x270f
 800407e:	4293      	cmp	r3, r2
 8004080:	d906      	bls.n	8004090 <_ZN9LineTrace4flipEv+0x210>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8004088:	3398      	adds	r3, #152	; 0x98
 800408a:	f242 7210 	movw	r2, #10000	; 0x2710
 800408e:	801a      	strh	r2, [r3, #0]

		if(correction_check_cnt_ <= 80) led_.LR(-1, 1);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8004096:	3398      	adds	r3, #152	; 0x98
 8004098:	881b      	ldrh	r3, [r3, #0]
 800409a:	2b50      	cmp	r3, #80	; 0x50
 800409c:	d808      	bhi.n	80040b0 <_ZN9LineTrace4flipEv+0x230>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	330c      	adds	r3, #12
 80040a2:	2201      	movs	r2, #1
 80040a4:	f04f 31ff 	mov.w	r1, #4294967295
 80040a8:	4618      	mov	r0, r3
 80040aa:	f7fe f97f 	bl	80023ac <_ZN3LED2LREaa>
		else led_.LR(-1, 0);
	}
}
 80040ae:	e007      	b.n	80040c0 <_ZN9LineTrace4flipEv+0x240>
		else led_.LR(-1, 0);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	330c      	adds	r3, #12
 80040b4:	2200      	movs	r2, #0
 80040b6:	f04f 31ff 	mov.w	r1, #4294967295
 80040ba:	4618      	mov	r0, r3
 80040bc:	f7fe f976 	bl	80023ac <_ZN3LED2LREaa>
}
 80040c0:	bf00      	nop
 80040c2:	370c      	adds	r7, #12
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd90      	pop	{r4, r7, pc}
 80040c8:	43480000 	.word	0x43480000
 80040cc:	00000000 	.word	0x00000000

080040d0 <_ZN9LineTrace7setModeEs>:

// ---------------------------------------------------------------------------------------------------//
// ---------------------------------- Mode set to stop------------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::setMode(int16_t mode)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b083      	sub	sp, #12
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	460b      	mov	r3, r1
 80040da:	807b      	strh	r3, [r7, #2]
	mode_selector_ = mode;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80040e2:	3348      	adds	r3, #72	; 0x48
 80040e4:	887a      	ldrh	r2, [r7, #2]
 80040e6:	801a      	strh	r2, [r3, #0]
}
 80040e8:	bf00      	nop
 80040ea:	370c      	adds	r7, #12
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr

080040f4 <_ZN9LineTrace5startEv>:

void LineTrace::start()
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b082      	sub	sp, #8
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	i_reset_flag_ = true;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2201      	movs	r2, #1
 8004108:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	velocity_ctrl_->start();
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	4618      	mov	r0, r3
 8004112:	f001 fd96 	bl	8005c42 <_ZN12VelocityCtrl5startEv>
	side_sensor_->resetWhiteLineCnt();
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	4618      	mov	r0, r3
 800411c:	f001 fb20 	bl	8005760 <_ZN10SideSensor17resetWhiteLineCntEv>
	crossline_idx_ = 0;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8004126:	337c      	adds	r3, #124	; 0x7c
 8004128:	2200      	movs	r2, #0
 800412a:	801a      	strh	r2, [r3, #0]
	sideline_idx_ = 0;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8004132:	337e      	adds	r3, #126	; 0x7e
 8004134:	2200      	movs	r2, #0
 8004136:	801a      	strh	r2, [r3, #0]
	all_sideline_idx_ = 0;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800413e:	3380      	adds	r3, #128	; 0x80
 8004140:	2200      	movs	r2, #0
 8004142:	801a      	strh	r2, [r3, #0]
}
 8004144:	bf00      	nop
 8004146:	3708      	adds	r7, #8
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}

0800414c <_ZN9LineTrace7runningEv>:


void LineTrace::running()
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
	uint16_t stage = 0;
 8004154:	2300      	movs	r3, #0
 8004156:	81fb      	strh	r3, [r7, #14]
	bool goal_flag = false;
 8004158:	2300      	movs	r3, #0
 800415a:	737b      	strb	r3, [r7, #13]
	start();
 800415c:	6878      	ldr	r0, [r7, #4]
 800415e:	f7ff ffc9 	bl	80040f4 <_ZN9LineTrace5startEv>

	while(goal_flag == false){
 8004162:	7b7b      	ldrb	r3, [r7, #13]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d15b      	bne.n	8004220 <_ZN9LineTrace7runningEv+0xd4>
		switch(stage){
 8004168:	89fb      	ldrh	r3, [r7, #14]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d002      	beq.n	8004174 <_ZN9LineTrace7runningEv+0x28>
 800416e:	2b0a      	cmp	r3, #10
 8004170:	d030      	beq.n	80041d4 <_ZN9LineTrace7runningEv+0x88>
 8004172:	e054      	b.n	800421e <_ZN9LineTrace7runningEv+0xd2>
		case 0:
			if(side_sensor_->getWhiteLineCntR() == 1){
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	691b      	ldr	r3, [r3, #16]
 8004178:	4618      	mov	r0, r3
 800417a:	f001 fae5 	bl	8005748 <_ZN10SideSensor16getWhiteLineCntREv>
 800417e:	4603      	mov	r3, r0
 8004180:	2b01      	cmp	r3, #1
 8004182:	bf0c      	ite	eq
 8004184:	2301      	moveq	r3, #1
 8004186:	2300      	movne	r3, #0
 8004188:	b2db      	uxtb	r3, r3
 800418a:	2b00      	cmp	r3, #0
 800418c:	d044      	beq.n	8004218 <_ZN9LineTrace7runningEv+0xcc>
				loggerStart();
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f7fe fe9e 	bl	8002ed0 <_ZN9LineTrace11loggerStartEv>
				if(mode_selector_ != FIRST_RUNNING){ // Other than first running
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800419a:	3348      	adds	r3, #72	; 0x48
 800419c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d002      	beq.n	80041aa <_ZN9LineTrace7runningEv+0x5e>
					startVelocityPlay();
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f7ff fa17 	bl	80035d8 <_ZN9LineTrace17startVelocityPlayEv>
				}

				encoder_->clearCrossLineIgnoreDistance();
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	695b      	ldr	r3, [r3, #20]
 80041ae:	4618      	mov	r0, r3
 80041b0:	f7fd fae1 	bl	8001776 <_ZN7Encoder28clearCrossLineIgnoreDistanceEv>
				encoder_->clearTotalDistance();
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	695b      	ldr	r3, [r3, #20]
 80041b8:	4618      	mov	r0, r3
 80041ba:	f7fd fabf 	bl	800173c <_ZN7Encoder18clearTotalDistanceEv>
				led_.LR(0, -1);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	330c      	adds	r3, #12
 80041c2:	f04f 32ff 	mov.w	r2, #4294967295
 80041c6:	2100      	movs	r1, #0
 80041c8:	4618      	mov	r0, r3
 80041ca:	f7fe f8ef 	bl	80023ac <_ZN3LED2LREaa>
				stage = 10;
 80041ce:	230a      	movs	r3, #10
 80041d0:	81fb      	strh	r3, [r7, #14]
			}

			break;
 80041d2:	e021      	b.n	8004218 <_ZN9LineTrace7runningEv+0xcc>

		case 10:
			if(side_sensor_->getWhiteLineCntR() == 2){
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	691b      	ldr	r3, [r3, #16]
 80041d8:	4618      	mov	r0, r3
 80041da:	f001 fab5 	bl	8005748 <_ZN10SideSensor16getWhiteLineCntREv>
 80041de:	4603      	mov	r3, r0
 80041e0:	2b02      	cmp	r3, #2
 80041e2:	bf0c      	ite	eq
 80041e4:	2301      	moveq	r3, #1
 80041e6:	2300      	movne	r3, #0
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d016      	beq.n	800421c <_ZN9LineTrace7runningEv+0xd0>
				loggerStop();
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f7fe fe89 	bl	8002f06 <_ZN9LineTrace10loggerStopEv>
				stopVelocityPlay();
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f7ff fa02 	bl	80035fe <_ZN9LineTrace16stopVelocityPlayEv>
				HAL_Delay(100); //Run through after the goal
 80041fa:	2064      	movs	r0, #100	; 0x64
 80041fc:	f005 fabc 	bl	8009778 <HAL_Delay>

				setTargetVelocity(0);
 8004200:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8004230 <_ZN9LineTrace7runningEv+0xe4>
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f7ff fd1e 	bl	8003c46 <_ZN9LineTrace17setTargetVelocityEf>
				HAL_Delay(500); //Stop for a while on the spot
 800420a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800420e:	f005 fab3 	bl	8009778 <HAL_Delay>

				goal_flag = true;
 8004212:	2301      	movs	r3, #1
 8004214:	737b      	strb	r3, [r7, #13]

			}

			break;
 8004216:	e001      	b.n	800421c <_ZN9LineTrace7runningEv+0xd0>
			break;
 8004218:	bf00      	nop
 800421a:	e7a2      	b.n	8004162 <_ZN9LineTrace7runningEv+0x16>
			break;
 800421c:	bf00      	nop
	while(goal_flag == false){
 800421e:	e7a0      	b.n	8004162 <_ZN9LineTrace7runningEv+0x16>
		}
	}

	stop();
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	f000 f807 	bl	8004234 <_ZN9LineTrace4stopEv>
}
 8004226:	bf00      	nop
 8004228:	3710      	adds	r7, #16
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
 800422e:	bf00      	nop
 8004230:	00000000 	.word	0x00000000

08004234 <_ZN9LineTrace4stopEv>:

void LineTrace::stop()
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af02      	add	r7, sp, #8
 800423a:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	velocity_ctrl_->stop();
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	4618      	mov	r0, r3
 800424a:	f001 fd0d 	bl	8005c68 <_ZN12VelocityCtrl4stopEv>

	led_.LR(-1, 1);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	330c      	adds	r3, #12
 8004252:	2201      	movs	r2, #1
 8004254:	f04f 31ff 	mov.w	r1, #4294967295
 8004258:	4618      	mov	r0, r3
 800425a:	f7fe f8a7 	bl	80023ac <_ZN3LED2LREaa>
	if(mode_selector_ == FIRST_RUNNING){ //First running
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004264:	3348      	adds	r3, #72	; 0x48
 8004266:	f9b3 3000 	ldrsh.w	r3, [r3]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d107      	bne.n	800427e <_ZN9LineTrace4stopEv+0x4a>
		logger_->saveDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	69d8      	ldr	r0, [r3, #28]
 8004272:	4b23      	ldr	r3, [pc, #140]	; (8004300 <_ZN9LineTrace4stopEv+0xcc>)
 8004274:	4a23      	ldr	r2, [pc, #140]	; (8004304 <_ZN9LineTrace4stopEv+0xd0>)
 8004276:	4924      	ldr	r1, [pc, #144]	; (8004308 <_ZN9LineTrace4stopEv+0xd4>)
 8004278:	f000 fc62 	bl	8004b40 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>
 800427c:	e006      	b.n	800428c <_ZN9LineTrace4stopEv+0x58>
	}
	else{//Secondary run
		logger_->saveDistanceAndTheta2("COURSLOG", "DISTANC2.TXT", "THETA2.TXT");
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	69d8      	ldr	r0, [r3, #28]
 8004282:	4b22      	ldr	r3, [pc, #136]	; (800430c <_ZN9LineTrace4stopEv+0xd8>)
 8004284:	4a22      	ldr	r2, [pc, #136]	; (8004310 <_ZN9LineTrace4stopEv+0xdc>)
 8004286:	4920      	ldr	r1, [pc, #128]	; (8004308 <_ZN9LineTrace4stopEv+0xd4>)
 8004288:	f000 fc7d 	bl	8004b86 <_ZN6Logger21saveDistanceAndTheta2EPKcS1_S1_>
	}
	sd_write_array_float("COURSLOG", "CROSSDIS.TXT", CROSSLINE_SIZE, crossline_distance_, OVER_WRITE);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 8004292:	334c      	adds	r3, #76	; 0x4c
 8004294:	2200      	movs	r2, #0
 8004296:	9200      	str	r2, [sp, #0]
 8004298:	2264      	movs	r2, #100	; 0x64
 800429a:	491e      	ldr	r1, [pc, #120]	; (8004314 <_ZN9LineTrace4stopEv+0xe0>)
 800429c:	481a      	ldr	r0, [pc, #104]	; (8004308 <_ZN9LineTrace4stopEv+0xd4>)
 800429e:	f7fd faed 	bl	800187c <sd_write_array_float>
	sd_write_array_float("COURSLOG", "SIDEDIS.TXT", SIDELINE_SIZE, sideline_distance_, OVER_WRITE);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f503 433d 	add.w	r3, r3, #48384	; 0xbd00
 80042a8:	33dc      	adds	r3, #220	; 0xdc
 80042aa:	2200      	movs	r2, #0
 80042ac:	9200      	str	r2, [sp, #0]
 80042ae:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80042b2:	4919      	ldr	r1, [pc, #100]	; (8004318 <_ZN9LineTrace4stopEv+0xe4>)
 80042b4:	4814      	ldr	r0, [pc, #80]	; (8004308 <_ZN9LineTrace4stopEv+0xd4>)
 80042b6:	f7fd fae1 	bl	800187c <sd_write_array_float>
	sd_write_array_float("COURSLOG", "ASIDEDIS.TXT", SIDELINE_SIZE, all_sideline_distance_, OVER_WRITE);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f503 4345 	add.w	r3, r3, #50432	; 0xc500
 80042c0:	33ac      	adds	r3, #172	; 0xac
 80042c2:	2200      	movs	r2, #0
 80042c4:	9200      	str	r2, [sp, #0]
 80042c6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80042ca:	4914      	ldr	r1, [pc, #80]	; (800431c <_ZN9LineTrace4stopEv+0xe8>)
 80042cc:	480e      	ldr	r0, [pc, #56]	; (8004308 <_ZN9LineTrace4stopEv+0xd4>)
 80042ce:	f7fd fad5 	bl	800187c <sd_write_array_float>

	led_.LR(-1, 0);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	330c      	adds	r3, #12
 80042d6:	2200      	movs	r2, #0
 80042d8:	f04f 31ff 	mov.w	r1, #4294967295
 80042dc:	4618      	mov	r0, r3
 80042de:	f7fe f865 	bl	80023ac <_ZN3LED2LREaa>

	logger_->resetIdx();
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	69db      	ldr	r3, [r3, #28]
 80042e6:	4618      	mov	r0, r3
 80042e8:	f000 fcdd 	bl	8004ca6 <_ZN6Logger8resetIdxEv>
	logger_->resetLogs2();
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	69db      	ldr	r3, [r3, #28]
 80042f0:	4618      	mov	r0, r3
 80042f2:	f000 fc8c 	bl	8004c0e <_ZN6Logger10resetLogs2Ev>
}
 80042f6:	bf00      	nop
 80042f8:	3708      	adds	r7, #8
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	bf00      	nop
 8004300:	0801973c 	.word	0x0801973c
 8004304:	08019748 	.word	0x08019748
 8004308:	08019758 	.word	0x08019758
 800430c:	08019764 	.word	0x08019764
 8004310:	08019770 	.word	0x08019770
 8004314:	08019780 	.word	0x08019780
 8004318:	08019790 	.word	0x08019790
 800431c:	0801979c 	.word	0x0801979c

08004320 <_ZN9LineTrace20createVelocityTabeleEv>:

// ---------------------------------------------------------------------------------------------------//
// ------------------------------ Create velocity table-----------------------------------------------//
// ---------------------------------------------------------------------------------------------------//
void LineTrace::createVelocityTabele()
{
 8004320:	b590      	push	{r4, r7, lr}
 8004322:	b08b      	sub	sp, #44	; 0x2c
 8004324:	af02      	add	r7, sp, #8
 8004326:	6078      	str	r0, [r7, #4]
	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	69db      	ldr	r3, [r3, #28]
 800432c:	4618      	mov	r0, r3
 800432e:	f000 fb95 	bl	8004a5c <_ZN6Logger23getDistanceArrayPointerEv>
 8004332:	6138      	str	r0, [r7, #16]
	p_theta= logger_->getThetaArrayPointer();
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	69db      	ldr	r3, [r3, #28]
 8004338:	4618      	mov	r0, r3
 800433a:	f000 fb9d 	bl	8004a78 <_ZN6Logger20getThetaArrayPointerEv>
 800433e:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8004340:	2300      	movs	r3, #0
 8004342:	837b      	strh	r3, [r7, #26]
 8004344:	8b7b      	ldrh	r3, [r7, #26]
 8004346:	f241 726f 	movw	r2, #5999	; 0x176f
 800434a:	4293      	cmp	r3, r2
 800434c:	d84a      	bhi.n	80043e4 <_ZN9LineTrace20createVelocityTabeleEv+0xc4>
		temp_distance = p_distance[i];
 800434e:	8b7b      	ldrh	r3, [r7, #26]
 8004350:	009b      	lsls	r3, r3, #2
 8004352:	693a      	ldr	r2, [r7, #16]
 8004354:	4413      	add	r3, r2
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 800435a:	8b7b      	ldrh	r3, [r7, #26]
 800435c:	009b      	lsls	r3, r3, #2
 800435e:	68fa      	ldr	r2, [r7, #12]
 8004360:	4413      	add	r3, r2
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	61fb      	str	r3, [r7, #28]

		if(temp_theta == 0) temp_theta = 0.00001;
 8004366:	edd7 7a07 	vldr	s15, [r7, #28]
 800436a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800436e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004372:	d101      	bne.n	8004378 <_ZN9LineTrace20createVelocityTabeleEv+0x58>
 8004374:	4b4c      	ldr	r3, [pc, #304]	; (80044a8 <_ZN9LineTrace20createVelocityTabeleEv+0x188>)
 8004376:	61fb      	str	r3, [r7, #28]
		float radius = abs(temp_distance / temp_theta);
 8004378:	ed97 7a02 	vldr	s14, [r7, #8]
 800437c:	edd7 7a07 	vldr	s15, [r7, #28]
 8004380:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004384:	eeb0 0a66 	vmov.f32	s0, s13
 8004388:	f7fe fb88 	bl	8002a9c <_ZSt3absf>
 800438c:	ed87 0a05 	vstr	s0, [r7, #20]
		if(radius >= 5000) radius = 5000;
 8004390:	edd7 7a05 	vldr	s15, [r7, #20]
 8004394:	ed9f 7a45 	vldr	s14, [pc, #276]	; 80044ac <_ZN9LineTrace20createVelocityTabeleEv+0x18c>
 8004398:	eef4 7ac7 	vcmpe.f32	s15, s14
 800439c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043a0:	db01      	blt.n	80043a6 <_ZN9LineTrace20createVelocityTabeleEv+0x86>
 80043a2:	4b43      	ldr	r3, [pc, #268]	; (80044b0 <_ZN9LineTrace20createVelocityTabeleEv+0x190>)
 80043a4:	617b      	str	r3, [r7, #20]

		velocity_table_[i] = radius2Velocity(radius);
 80043a6:	8b7c      	ldrh	r4, [r7, #26]
 80043a8:	ed97 0a05 	vldr	s0, [r7, #20]
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f7fe ff15 	bl	80031dc <_ZN9LineTrace15radius2VelocityEf>
 80043b2:	eef0 7a40 	vmov.f32	s15, s0
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	4413      	add	r3, r2
 80043c0:	3304      	adds	r3, #4
 80043c2:	edc3 7a00 	vstr	s15, [r3]

		ref_delta_distances_[i] = p_distance[i]; //copy
 80043c6:	8b7b      	ldrh	r3, [r7, #26]
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	693a      	ldr	r2, [r7, #16]
 80043cc:	441a      	add	r2, r3
 80043ce:	8b7b      	ldrh	r3, [r7, #26]
 80043d0:	6812      	ldr	r2, [r2, #0]
 80043d2:	6879      	ldr	r1, [r7, #4]
 80043d4:	3330      	adds	r3, #48	; 0x30
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	440b      	add	r3, r1
 80043da:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 80043dc:	8b7b      	ldrh	r3, [r7, #26]
 80043de:	3301      	adds	r3, #1
 80043e0:	837b      	strh	r3, [r7, #26]
 80043e2:	e7af      	b.n	8004344 <_ZN9LineTrace20createVelocityTabeleEv+0x24>
	}


	if(mode_selector_ == SECOND_RUNNING){
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80043ea:	3348      	adds	r3, #72	; 0x48
 80043ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d120      	bne.n	8004436 <_ZN9LineTrace20createVelocityTabeleEv+0x116>
		velocity_table_[0] = min_velocity_;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004400:	3304      	adds	r3, #4
 8004402:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec_, p_distance);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800440a:	338c      	adds	r3, #140	; 0x8c
 800440c:	edd3 7a00 	vldr	s15, [r3]
 8004410:	6939      	ldr	r1, [r7, #16]
 8004412:	eeb0 0a67 	vmov.f32	s0, s15
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f7fe ff96 	bl	8003348 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc_, p_distance);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8004422:	3388      	adds	r3, #136	; 0x88
 8004424:	edd3 7a00 	vldr	s15, [r3]
 8004428:	6939      	ldr	r1, [r7, #16]
 800442a:	eeb0 0a67 	vmov.f32	s0, s15
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f7ff f82e 	bl	8003490 <_ZN9LineTrace20accelerateProcessingEfPKf>
 8004434:	e027      	b.n	8004486 <_ZN9LineTrace20createVelocityTabeleEv+0x166>
	}
	else if(mode_selector_ == THIRD_RUNNING){
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800443c:	3348      	adds	r3, #72	; 0x48
 800443e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004442:	2b02      	cmp	r3, #2
 8004444:	d11f      	bne.n	8004486 <_ZN9LineTrace20createVelocityTabeleEv+0x166>
		velocity_table_[0] = min_velocity2_;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004452:	3304      	adds	r3, #4
 8004454:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec2_, p_distance);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800445c:	3394      	adds	r3, #148	; 0x94
 800445e:	edd3 7a00 	vldr	s15, [r3]
 8004462:	6939      	ldr	r1, [r7, #16]
 8004464:	eeb0 0a67 	vmov.f32	s0, s15
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f7fe ff6d 	bl	8003348 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc2_, p_distance);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8004474:	3390      	adds	r3, #144	; 0x90
 8004476:	edd3 7a00 	vldr	s15, [r3]
 800447a:	6939      	ldr	r1, [r7, #16]
 800447c:	eeb0 0a67 	vmov.f32	s0, s15
 8004480:	6878      	ldr	r0, [r7, #4]
 8004482:	f7ff f805 	bl	8003490 <_ZN9LineTrace20accelerateProcessingEfPKf>
	}

	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 800448c:	3304      	adds	r3, #4
 800448e:	2200      	movs	r2, #0
 8004490:	9200      	str	r2, [sp, #0]
 8004492:	f241 7270 	movw	r2, #6000	; 0x1770
 8004496:	4907      	ldr	r1, [pc, #28]	; (80044b4 <_ZN9LineTrace20createVelocityTabeleEv+0x194>)
 8004498:	4807      	ldr	r0, [pc, #28]	; (80044b8 <_ZN9LineTrace20createVelocityTabeleEv+0x198>)
 800449a:	f7fd f9ef 	bl	800187c <sd_write_array_float>

}
 800449e:	bf00      	nop
 80044a0:	3724      	adds	r7, #36	; 0x24
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd90      	pop	{r4, r7, pc}
 80044a6:	bf00      	nop
 80044a8:	3727c5ac 	.word	0x3727c5ac
 80044ac:	459c4000 	.word	0x459c4000
 80044b0:	459c4000 	.word	0x459c4000
 80044b4:	080197ac 	.word	0x080197ac
 80044b8:	08019758 	.word	0x08019758

080044bc <_ZN9LineTrace26createVelocityTabeleFromSDEv>:

void LineTrace::createVelocityTabeleFromSD()
{
 80044bc:	b590      	push	{r4, r7, lr}
 80044be:	b08b      	sub	sp, #44	; 0x2c
 80044c0:	af02      	add	r7, sp, #8
 80044c2:	6078      	str	r0, [r7, #4]
	logger_->importDistanceAndTheta("COURSLOG", "DISTANCE.TXT", "THETA.TXT");
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	69d8      	ldr	r0, [r3, #28]
 80044c8:	4b6b      	ldr	r3, [pc, #428]	; (8004678 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1bc>)
 80044ca:	4a6c      	ldr	r2, [pc, #432]	; (800467c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c0>)
 80044cc:	496c      	ldr	r1, [pc, #432]	; (8004680 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 80044ce:	f000 fb7f 	bl	8004bd0 <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>
	sd_read_array_float("COURSLOG", "CROSSDIS.TXT", CROSSLINE_SIZE, crossline_distance_);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80044d8:	334c      	adds	r3, #76	; 0x4c
 80044da:	2264      	movs	r2, #100	; 0x64
 80044dc:	4969      	ldr	r1, [pc, #420]	; (8004684 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c8>)
 80044de:	4868      	ldr	r0, [pc, #416]	; (8004680 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 80044e0:	f7fd fa32 	bl	8001948 <sd_read_array_float>
	sd_read_array_float("COURSLOG", "SIDEDIS.TXT", SIDELINE_SIZE, sideline_distance_);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f503 433d 	add.w	r3, r3, #48384	; 0xbd00
 80044ea:	33dc      	adds	r3, #220	; 0xdc
 80044ec:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80044f0:	4965      	ldr	r1, [pc, #404]	; (8004688 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1cc>)
 80044f2:	4863      	ldr	r0, [pc, #396]	; (8004680 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 80044f4:	f7fd fa28 	bl	8001948 <sd_read_array_float>

	const float *p_distance, *p_theta;
	p_distance = logger_->getDistanceArrayPointer();
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	69db      	ldr	r3, [r3, #28]
 80044fc:	4618      	mov	r0, r3
 80044fe:	f000 faad 	bl	8004a5c <_ZN6Logger23getDistanceArrayPointerEv>
 8004502:	6138      	str	r0, [r7, #16]
	p_theta= logger_->getThetaArrayPointer();
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	69db      	ldr	r3, [r3, #28]
 8004508:	4618      	mov	r0, r3
 800450a:	f000 fab5 	bl	8004a78 <_ZN6Logger20getThetaArrayPointerEv>
 800450e:	60f8      	str	r0, [r7, #12]

	float temp_distance, temp_theta;
	//float pre_radius = 0;;
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 8004510:	2300      	movs	r3, #0
 8004512:	837b      	strh	r3, [r7, #26]
 8004514:	8b7b      	ldrh	r3, [r7, #26]
 8004516:	f241 726f 	movw	r2, #5999	; 0x176f
 800451a:	4293      	cmp	r3, r2
 800451c:	d84a      	bhi.n	80045b4 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xf8>

		temp_distance = p_distance[i];
 800451e:	8b7b      	ldrh	r3, [r7, #26]
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	693a      	ldr	r2, [r7, #16]
 8004524:	4413      	add	r3, r2
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	60bb      	str	r3, [r7, #8]
		temp_theta = p_theta[i];
 800452a:	8b7b      	ldrh	r3, [r7, #26]
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	68fa      	ldr	r2, [r7, #12]
 8004530:	4413      	add	r3, r2
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	61fb      	str	r3, [r7, #28]

		if(temp_theta == 0) temp_theta = 0.00001;
 8004536:	edd7 7a07 	vldr	s15, [r7, #28]
 800453a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800453e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004542:	d101      	bne.n	8004548 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x8c>
 8004544:	4b51      	ldr	r3, [pc, #324]	; (800468c <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d0>)
 8004546:	61fb      	str	r3, [r7, #28]
		float radius_origin = abs(temp_distance / temp_theta);
 8004548:	ed97 7a02 	vldr	s14, [r7, #8]
 800454c:	edd7 7a07 	vldr	s15, [r7, #28]
 8004550:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004554:	eeb0 0a66 	vmov.f32	s0, s13
 8004558:	f7fe faa0 	bl	8002a9c <_ZSt3absf>
 800455c:	ed87 0a05 	vstr	s0, [r7, #20]
		if(radius_origin >= 5000) radius_origin = 5000;
 8004560:	edd7 7a05 	vldr	s15, [r7, #20]
 8004564:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8004690 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d4>
 8004568:	eef4 7ac7 	vcmpe.f32	s15, s14
 800456c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004570:	db01      	blt.n	8004576 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0xba>
 8004572:	4b48      	ldr	r3, [pc, #288]	; (8004694 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1d8>)
 8004574:	617b      	str	r3, [r7, #20]

		//float radius_lpf = ((R_RADIUS)*(radius_origin) + (1.0 - (R_RADIUS))* (pre_radius));
		//velocity_table_[i] = radius_lpf;
		velocity_table_[i] = radius2Velocity(radius_origin);
 8004576:	8b7c      	ldrh	r4, [r7, #26]
 8004578:	ed97 0a05 	vldr	s0, [r7, #20]
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f7fe fe2d 	bl	80031dc <_ZN9LineTrace15radius2VelocityEf>
 8004582:	eef0 7a40 	vmov.f32	s15, s0
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	f504 53bd 	add.w	r3, r4, #6048	; 0x17a0
 800458c:	009b      	lsls	r3, r3, #2
 800458e:	4413      	add	r3, r2
 8004590:	3304      	adds	r3, #4
 8004592:	edc3 7a00 	vstr	s15, [r3]
		//pre_radius = radius_origin;

		ref_delta_distances_[i] = p_distance[i]; //copy
 8004596:	8b7b      	ldrh	r3, [r7, #26]
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	693a      	ldr	r2, [r7, #16]
 800459c:	441a      	add	r2, r3
 800459e:	8b7b      	ldrh	r3, [r7, #26]
 80045a0:	6812      	ldr	r2, [r2, #0]
 80045a2:	6879      	ldr	r1, [r7, #4]
 80045a4:	3330      	adds	r3, #48	; 0x30
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	440b      	add	r3, r1
 80045aa:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < LOG_DATA_SIZE_DIS; i++){
 80045ac:	8b7b      	ldrh	r3, [r7, #26]
 80045ae:	3301      	adds	r3, #1
 80045b0:	837b      	strh	r3, [r7, #26]
 80045b2:	e7af      	b.n	8004514 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x58>
	}

	if(mode_selector_ == SECOND_RUNNING){
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 80045ba:	3348      	adds	r3, #72	; 0x48
 80045bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d120      	bne.n	8004606 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x14a>
		velocity_table_[0] = min_velocity_;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 80045d0:	3304      	adds	r3, #4
 80045d2:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec_, p_distance);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80045da:	338c      	adds	r3, #140	; 0x8c
 80045dc:	edd3 7a00 	vldr	s15, [r3]
 80045e0:	6939      	ldr	r1, [r7, #16]
 80045e2:	eeb0 0a67 	vmov.f32	s0, s15
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f7fe feae 	bl	8003348 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc_, p_distance);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 80045f2:	3388      	adds	r3, #136	; 0x88
 80045f4:	edd3 7a00 	vldr	s15, [r3]
 80045f8:	6939      	ldr	r1, [r7, #16]
 80045fa:	eeb0 0a67 	vmov.f32	s0, s15
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f7fe ff46 	bl	8003490 <_ZN9LineTrace20accelerateProcessingEfPKf>
 8004604:	e027      	b.n	8004656 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x19a>
	}
	else if(mode_selector_ == THIRD_RUNNING){
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f503 433c 	add.w	r3, r3, #48128	; 0xbc00
 800460c:	3348      	adds	r3, #72	; 0x48
 800460e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004612:	2b02      	cmp	r3, #2
 8004614:	d11f      	bne.n	8004656 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x19a>
		velocity_table_[0] = min_velocity2_;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f8d3 20b8 	ldr.w	r2, [r3, #184]	; 0xb8
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 8004622:	3304      	adds	r3, #4
 8004624:	601a      	str	r2, [r3, #0]
		// ----- Decelerate processing -----//
		decelerateProcessing(max_dec2_, p_distance);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 800462c:	3394      	adds	r3, #148	; 0x94
 800462e:	edd3 7a00 	vldr	s15, [r3]
 8004632:	6939      	ldr	r1, [r7, #16]
 8004634:	eeb0 0a67 	vmov.f32	s0, s15
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	f7fe fe85 	bl	8003348 <_ZN9LineTrace20decelerateProcessingEfPKf>
		// ----- Accelerate processing -----//
		accelerateProcessing(max_acc2_, p_distance);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f503 434d 	add.w	r3, r3, #52480	; 0xcd00
 8004644:	3390      	adds	r3, #144	; 0x90
 8004646:	edd3 7a00 	vldr	s15, [r3]
 800464a:	6939      	ldr	r1, [r7, #16]
 800464c:	eeb0 0a67 	vmov.f32	s0, s15
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f7fe ff1d 	bl	8003490 <_ZN9LineTrace20accelerateProcessingEfPKf>
	}


	sd_write_array_float("COURSLOG", "VELTABLE.TXT", LOG_DATA_SIZE_DIS, velocity_table_, OVER_WRITE);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f503 43bd 	add.w	r3, r3, #24192	; 0x5e80
 800465c:	3304      	adds	r3, #4
 800465e:	2200      	movs	r2, #0
 8004660:	9200      	str	r2, [sp, #0]
 8004662:	f241 7270 	movw	r2, #6000	; 0x1770
 8004666:	490c      	ldr	r1, [pc, #48]	; (8004698 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1dc>)
 8004668:	4805      	ldr	r0, [pc, #20]	; (8004680 <_ZN9LineTrace26createVelocityTabeleFromSDEv+0x1c4>)
 800466a:	f7fd f907 	bl	800187c <sd_write_array_float>

}
 800466e:	bf00      	nop
 8004670:	3724      	adds	r7, #36	; 0x24
 8004672:	46bd      	mov	sp, r7
 8004674:	bd90      	pop	{r4, r7, pc}
 8004676:	bf00      	nop
 8004678:	0801973c 	.word	0x0801973c
 800467c:	08019748 	.word	0x08019748
 8004680:	08019758 	.word	0x08019758
 8004684:	08019780 	.word	0x08019780
 8004688:	08019790 	.word	0x08019790
 800468c:	3727c5ac 	.word	0x3727c5ac
 8004690:	459c4000 	.word	0x459c4000
 8004694:	459c4000 	.word	0x459c4000
 8004698:	080197ac 	.word	0x080197ac

0800469c <_ZN6LoggerC1Ev>:
#include "HAL_SDcard_lib.h"
#include <stdio.h>
#include "Macro.h"
#include "AQM0802.h"

Logger::Logger() : recording_flag_(false), log_index_tim_(0), log_index_tim2_(0), log_index_tim_int_(0), log_index_tim2_int_(0), log_index_dis_(0){}
 800469c:	b480      	push	{r7}
 800469e:	b083      	sub	sp, #12
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80046aa:	33c0      	adds	r3, #192	; 0xc0
 80046ac:	2200      	movs	r2, #0
 80046ae:	701a      	strb	r2, [r3, #0]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80046b6:	33c2      	adds	r3, #194	; 0xc2
 80046b8:	2200      	movs	r2, #0
 80046ba:	801a      	strh	r2, [r3, #0]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80046c2:	33c4      	adds	r3, #196	; 0xc4
 80046c4:	2200      	movs	r2, #0
 80046c6:	801a      	strh	r2, [r3, #0]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80046ce:	33c6      	adds	r3, #198	; 0xc6
 80046d0:	2200      	movs	r2, #0
 80046d2:	801a      	strh	r2, [r3, #0]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80046da:	33c8      	adds	r3, #200	; 0xc8
 80046dc:	2200      	movs	r2, #0
 80046de:	801a      	strh	r2, [r3, #0]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80046e6:	33ca      	adds	r3, #202	; 0xca
 80046e8:	2200      	movs	r2, #0
 80046ea:	801a      	strh	r2, [r3, #0]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	4618      	mov	r0, r3
 80046f0:	370c      	adds	r7, #12
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr
	...

080046fc <_ZN6Logger10sdCardInitEv>:

bool Logger::sdCardInit()
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8004704:	2300      	movs	r3, #0
 8004706:	73fb      	strb	r3, [r7, #15]

	if(sd_mount() == 1){
 8004708:	f7fd fa0a 	bl	8001b20 <sd_mount>
 800470c:	4603      	mov	r3, r0
 800470e:	2b01      	cmp	r3, #1
 8004710:	bf0c      	ite	eq
 8004712:	2301      	moveq	r3, #1
 8004714:	2300      	movne	r3, #0
 8004716:	b2db      	uxtb	r3, r3
 8004718:	2b00      	cmp	r3, #0
 800471a:	d016      	beq.n	800474a <_ZN6Logger10sdCardInitEv+0x4e>
	  //printf("mount success\r\n");

	  lcd_clear();
 800471c:	f7fc fcc0 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 8004720:	2100      	movs	r1, #0
 8004722:	2000      	movs	r0, #0
 8004724:	f7fc fccc 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 8004728:	4815      	ldr	r0, [pc, #84]	; (8004780 <_ZN6Logger10sdCardInitEv+0x84>)
 800472a:	f7fc fcf3 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 800472e:	2101      	movs	r1, #1
 8004730:	2000      	movs	r0, #0
 8004732:	f7fc fcc5 	bl	80010c0 <lcd_locate>
	  lcd_printf("success");
 8004736:	4813      	ldr	r0, [pc, #76]	; (8004784 <_ZN6Logger10sdCardInitEv+0x88>)
 8004738:	f7fc fcec 	bl	8001114 <lcd_printf>
	  HAL_Delay(500);
 800473c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004740:	f005 f81a 	bl	8009778 <HAL_Delay>

	  ret = true;
 8004744:	2301      	movs	r3, #1
 8004746:	73fb      	strb	r3, [r7, #15]
 8004748:	e015      	b.n	8004776 <_ZN6Logger10sdCardInitEv+0x7a>
	}
	else{
	  //printf("mount error\r\n");

	  lcd_clear();
 800474a:	f7fc fca9 	bl	80010a0 <lcd_clear>
	  lcd_locate(0,0);
 800474e:	2100      	movs	r1, #0
 8004750:	2000      	movs	r0, #0
 8004752:	f7fc fcb5 	bl	80010c0 <lcd_locate>
	  lcd_printf("SD mount");
 8004756:	480a      	ldr	r0, [pc, #40]	; (8004780 <_ZN6Logger10sdCardInitEv+0x84>)
 8004758:	f7fc fcdc 	bl	8001114 <lcd_printf>
	  lcd_locate(0,1);
 800475c:	2101      	movs	r1, #1
 800475e:	2000      	movs	r0, #0
 8004760:	f7fc fcae 	bl	80010c0 <lcd_locate>
	  lcd_printf("fail");
 8004764:	4808      	ldr	r0, [pc, #32]	; (8004788 <_ZN6Logger10sdCardInitEv+0x8c>)
 8004766:	f7fc fcd5 	bl	8001114 <lcd_printf>
	  HAL_Delay(1000);
 800476a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800476e:	f005 f803 	bl	8009778 <HAL_Delay>

	  ret = false;
 8004772:	2300      	movs	r3, #0
 8004774:	73fb      	strb	r3, [r7, #15]
	//data[0] = 100;
	//sd_write_array_int("sdio", "write1.txt", DATA_SIZE, data, ADD_WRITE); //write
	//sd_read_array_int("sdio", "write1.txt", DATA_SIZE, temp); //read
	//sd_write_array_int("sdio", "write2.txt", DATA_SIZE, temp, ADD_WRITE); //write

	return ret;
 8004776:	7bfb      	ldrb	r3, [r7, #15]
}
 8004778:	4618      	mov	r0, r3
 800477a:	3710      	adds	r7, #16
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}
 8004780:	080197bc 	.word	0x080197bc
 8004784:	080197c8 	.word	0x080197c8
 8004788:	080197d0 	.word	0x080197d0

0800478c <_ZN6Logger8storeLogEf>:
void Logger::storeLog(float data)
{
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 800479e:	33c0      	adds	r3, #192	; 0xc0
 80047a0:	781b      	ldrb	r3, [r3, #0]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d023      	beq.n	80047ee <_ZN6Logger8storeLogEf+0x62>
		store_data_float_[log_index_tim_] = data;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80047ac:	33c2      	adds	r3, #194	; 0xc2
 80047ae:	881b      	ldrh	r3, [r3, #0]
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	4413      	add	r3, r2
 80047b6:	683a      	ldr	r2, [r7, #0]
 80047b8:	601a      	str	r2, [r3, #0]

		log_index_tim_++;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80047c0:	33c2      	adds	r3, #194	; 0xc2
 80047c2:	881b      	ldrh	r3, [r3, #0]
 80047c4:	3301      	adds	r3, #1
 80047c6:	b29a      	uxth	r2, r3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80047ce:	33c2      	adds	r3, #194	; 0xc2
 80047d0:	801a      	strh	r2, [r3, #0]

		if(log_index_tim_ >= LOG_DATA_SIZE_TIM) log_index_tim_ = 0;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80047d8:	33c2      	adds	r3, #194	; 0xc2
 80047da:	881b      	ldrh	r3, [r3, #0]
 80047dc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80047e0:	d305      	bcc.n	80047ee <_ZN6Logger8storeLogEf+0x62>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80047e8:	33c2      	adds	r3, #194	; 0xc2
 80047ea:	2200      	movs	r2, #0
 80047ec:	801a      	strh	r2, [r3, #0]
	}
}
 80047ee:	bf00      	nop
 80047f0:	370c      	adds	r7, #12
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr

080047fa <_ZN6Logger9storeLog2Ef>:

void Logger::storeLog2(float data)
{
 80047fa:	b480      	push	{r7}
 80047fc:	b083      	sub	sp, #12
 80047fe:	af00      	add	r7, sp, #0
 8004800:	6078      	str	r0, [r7, #4]
 8004802:	ed87 0a00 	vstr	s0, [r7]
	if(recording_flag_ == true){
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 800480c:	33c0      	adds	r3, #192	; 0xc0
 800480e:	781b      	ldrb	r3, [r3, #0]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d025      	beq.n	8004860 <_ZN6Logger9storeLog2Ef+0x66>
		store_data_float2_[log_index_tim2_] = data;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 800481a:	33c4      	adds	r3, #196	; 0xc4
 800481c:	881b      	ldrh	r3, [r3, #0]
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8004824:	009b      	lsls	r3, r3, #2
 8004826:	4413      	add	r3, r2
 8004828:	683a      	ldr	r2, [r7, #0]
 800482a:	601a      	str	r2, [r3, #0]

		log_index_tim2_++;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004832:	33c4      	adds	r3, #196	; 0xc4
 8004834:	881b      	ldrh	r3, [r3, #0]
 8004836:	3301      	adds	r3, #1
 8004838:	b29a      	uxth	r2, r3
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004840:	33c4      	adds	r3, #196	; 0xc4
 8004842:	801a      	strh	r2, [r3, #0]

		if(log_index_tim2_ >= LOG_DATA_SIZE_TIM2) log_index_tim2_ = 0;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 800484a:	33c4      	adds	r3, #196	; 0xc4
 800484c:	881b      	ldrh	r3, [r3, #0]
 800484e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004852:	d305      	bcc.n	8004860 <_ZN6Logger9storeLog2Ef+0x66>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 800485a:	33c4      	adds	r3, #196	; 0xc4
 800485c:	2200      	movs	r2, #0
 800485e:	801a      	strh	r2, [r3, #0]
	}
}
 8004860:	bf00      	nop
 8004862:	370c      	adds	r7, #12
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr

0800486c <_ZN6Logger11storeLogIntEs>:

void Logger::storeLogInt(int16_t data)
{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	460b      	mov	r3, r1
 8004876:	807b      	strh	r3, [r7, #2]
	if(recording_flag_ == true){
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 800487e:	33c0      	adds	r3, #192	; 0xc0
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d025      	beq.n	80048d2 <_ZN6Logger11storeLogIntEs+0x66>
		store_data_int_[log_index_tim_int_] = data;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 800488c:	33c6      	adds	r3, #198	; 0xc6
 800488e:	881b      	ldrh	r3, [r3, #0]
 8004890:	461a      	mov	r2, r3
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f502 52fa 	add.w	r2, r2, #8000	; 0x1f40
 8004898:	8879      	ldrh	r1, [r7, #2]
 800489a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

		log_index_tim_int_++;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80048a4:	33c6      	adds	r3, #198	; 0xc6
 80048a6:	881b      	ldrh	r3, [r3, #0]
 80048a8:	3301      	adds	r3, #1
 80048aa:	b29a      	uxth	r2, r3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80048b2:	33c6      	adds	r3, #198	; 0xc6
 80048b4:	801a      	strh	r2, [r3, #0]

		if(log_index_tim_int_ >= LOG_DATA_SIZE_TIM) log_index_tim_int_ = 0;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80048bc:	33c6      	adds	r3, #198	; 0xc6
 80048be:	881b      	ldrh	r3, [r3, #0]
 80048c0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80048c4:	d305      	bcc.n	80048d2 <_ZN6Logger11storeLogIntEs+0x66>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80048cc:	33c6      	adds	r3, #198	; 0xc6
 80048ce:	2200      	movs	r2, #0
 80048d0:	801a      	strh	r2, [r3, #0]
	}

}
 80048d2:	bf00      	nop
 80048d4:	370c      	adds	r7, #12
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr

080048de <_ZN6Logger12storeLog2IntEs>:
void Logger::storeLog2Int(int16_t data)
{
 80048de:	b480      	push	{r7}
 80048e0:	b083      	sub	sp, #12
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]
 80048e6:	460b      	mov	r3, r1
 80048e8:	807b      	strh	r3, [r7, #2]
	if(recording_flag_ == true){
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80048f0:	33c0      	adds	r3, #192	; 0xc0
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d025      	beq.n	8004944 <_ZN6Logger12storeLog2IntEs+0x66>
		store_data_int2_[log_index_tim2_int_] = data;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80048fe:	33c8      	adds	r3, #200	; 0xc8
 8004900:	881b      	ldrh	r3, [r3, #0]
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	f503 531c 	add.w	r3, r3, #9984	; 0x2700
 8004908:	3310      	adds	r3, #16
 800490a:	8879      	ldrh	r1, [r7, #2]
 800490c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

		log_index_tim2_int_++;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004916:	33c8      	adds	r3, #200	; 0xc8
 8004918:	881b      	ldrh	r3, [r3, #0]
 800491a:	3301      	adds	r3, #1
 800491c:	b29a      	uxth	r2, r3
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004924:	33c8      	adds	r3, #200	; 0xc8
 8004926:	801a      	strh	r2, [r3, #0]

		if(log_index_tim2_int_ >= LOG_DATA_SIZE_TIM2) log_index_tim2_int_ = 0;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 800492e:	33c8      	adds	r3, #200	; 0xc8
 8004930:	881b      	ldrh	r3, [r3, #0]
 8004932:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004936:	d305      	bcc.n	8004944 <_ZN6Logger12storeLog2IntEs+0x66>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 800493e:	33c8      	adds	r3, #200	; 0xc8
 8004940:	2200      	movs	r2, #0
 8004942:	801a      	strh	r2, [r3, #0]
	}

}
 8004944:	bf00      	nop
 8004946:	370c      	adds	r7, #12
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr

08004950 <_ZN6Logger21storeDistanceAndThetaEff>:

void Logger::storeDistanceAndTheta(float distance, float theta)
{
 8004950:	b480      	push	{r7}
 8004952:	b085      	sub	sp, #20
 8004954:	af00      	add	r7, sp, #0
 8004956:	60f8      	str	r0, [r7, #12]
 8004958:	ed87 0a02 	vstr	s0, [r7, #8]
 800495c:	edc7 0a01 	vstr	s1, [r7, #4]
	//if(recording_flag_ == true){
		store_distance_[log_index_dis_] = distance;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004966:	33ca      	adds	r3, #202	; 0xca
 8004968:	881b      	ldrh	r3, [r3, #0]
 800496a:	68fa      	ldr	r2, [r7, #12]
 800496c:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 8004970:	3310      	adds	r3, #16
 8004972:	009b      	lsls	r3, r3, #2
 8004974:	4413      	add	r3, r2
 8004976:	68ba      	ldr	r2, [r7, #8]
 8004978:	601a      	str	r2, [r3, #0]
		store_theta_[log_index_dis_] = theta;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004980:	33ca      	adds	r3, #202	; 0xca
 8004982:	881b      	ldrh	r3, [r3, #0]
 8004984:	68fa      	ldr	r2, [r7, #12]
 8004986:	f503 533b 	add.w	r3, r3, #11968	; 0x2ec0
 800498a:	3320      	adds	r3, #32
 800498c:	009b      	lsls	r3, r3, #2
 800498e:	4413      	add	r3, r2
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	601a      	str	r2, [r3, #0]

		log_index_dis_++;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 800499a:	33ca      	adds	r3, #202	; 0xca
 800499c:	881b      	ldrh	r3, [r3, #0]
 800499e:	3301      	adds	r3, #1
 80049a0:	b29a      	uxth	r2, r3
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80049a8:	33ca      	adds	r3, #202	; 0xca
 80049aa:	801a      	strh	r2, [r3, #0]

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80049b2:	33ca      	adds	r3, #202	; 0xca
 80049b4:	881b      	ldrh	r3, [r3, #0]
 80049b6:	f241 726f 	movw	r2, #5999	; 0x176f
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d905      	bls.n	80049ca <_ZN6Logger21storeDistanceAndThetaEff+0x7a>
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80049c4:	33ca      	adds	r3, #202	; 0xca
 80049c6:	2200      	movs	r2, #0
 80049c8:	801a      	strh	r2, [r3, #0]
	//}
}
 80049ca:	bf00      	nop
 80049cc:	3714      	adds	r7, #20
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr

080049d6 <_ZN6Logger22storeDistanceAndTheta2Eff>:

void Logger::storeDistanceAndTheta2(float distance, float theta)
{
 80049d6:	b480      	push	{r7}
 80049d8:	b085      	sub	sp, #20
 80049da:	af00      	add	r7, sp, #0
 80049dc:	60f8      	str	r0, [r7, #12]
 80049de:	ed87 0a02 	vstr	s0, [r7, #8]
 80049e2:	edc7 0a01 	vstr	s1, [r7, #4]
	//if(recording_flag_ == true){
		store_distance2_[log_index_dis_] = distance;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 80049ec:	33ca      	adds	r3, #202	; 0xca
 80049ee:	881b      	ldrh	r3, [r3, #0]
 80049f0:	68fa      	ldr	r2, [r7, #12]
 80049f2:	f503 438c 	add.w	r3, r3, #17920	; 0x4600
 80049f6:	3350      	adds	r3, #80	; 0x50
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	4413      	add	r3, r2
 80049fc:	68ba      	ldr	r2, [r7, #8]
 80049fe:	601a      	str	r2, [r3, #0]
		store_theta2_[log_index_dis_] = theta;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004a06:	33ca      	adds	r3, #202	; 0xca
 8004a08:	881b      	ldrh	r3, [r3, #0]
 8004a0a:	68fa      	ldr	r2, [r7, #12]
 8004a0c:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004a10:	3340      	adds	r3, #64	; 0x40
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	4413      	add	r3, r2
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	601a      	str	r2, [r3, #0]

		log_index_dis_++;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004a20:	33ca      	adds	r3, #202	; 0xca
 8004a22:	881b      	ldrh	r3, [r3, #0]
 8004a24:	3301      	adds	r3, #1
 8004a26:	b29a      	uxth	r2, r3
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004a2e:	33ca      	adds	r3, #202	; 0xca
 8004a30:	801a      	strh	r2, [r3, #0]

		if(log_index_dis_ >= LOG_DATA_SIZE_DIS) log_index_dis_ = 0;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004a38:	33ca      	adds	r3, #202	; 0xca
 8004a3a:	881b      	ldrh	r3, [r3, #0]
 8004a3c:	f241 726f 	movw	r2, #5999	; 0x176f
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d905      	bls.n	8004a50 <_ZN6Logger22storeDistanceAndTheta2Eff+0x7a>
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004a4a:	33ca      	adds	r3, #202	; 0xca
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	801a      	strh	r2, [r3, #0]
	//}
}
 8004a50:	bf00      	nop
 8004a52:	3714      	adds	r7, #20
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr

08004a5c <_ZN6Logger23getDistanceArrayPointerEv>:
const float *Logger::getDistanceArrayPointer()
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b083      	sub	sp, #12
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
	return store_distance_;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004a6a:	3340      	adds	r3, #64	; 0x40
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	370c      	adds	r7, #12
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr

08004a78 <_ZN6Logger20getThetaArrayPointerEv>:

const float *Logger::getThetaArrayPointer()
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
	return store_theta_;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 8004a86:	3380      	adds	r3, #128	; 0x80
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	370c      	adds	r7, #12
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr

08004a94 <_ZN6Logger8saveLogsEPKcS1_>:

void Logger::saveLogs(const char *folder_name, const char *file_name)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b086      	sub	sp, #24
 8004a98:	af02      	add	r7, sp, #8
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	60b9      	str	r1, [r7, #8]
 8004a9e:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM, store_data_float_, OVER_WRITE); //write
 8004aa0:	68fa      	ldr	r2, [r7, #12]
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	9300      	str	r3, [sp, #0]
 8004aa6:	4613      	mov	r3, r2
 8004aa8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004aac:	6879      	ldr	r1, [r7, #4]
 8004aae:	68b8      	ldr	r0, [r7, #8]
 8004ab0:	f7fc fee4 	bl	800187c <sd_write_array_float>
}
 8004ab4:	bf00      	nop
 8004ab6:	3710      	adds	r7, #16
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}

08004abc <_ZN6Logger9saveLogs2EPKcS1_>:
void Logger::saveLogs2(const char *folder_name, const char *file_name)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b086      	sub	sp, #24
 8004ac0:	af02      	add	r7, sp, #8
 8004ac2:	60f8      	str	r0, [r7, #12]
 8004ac4:	60b9      	str	r1, [r7, #8]
 8004ac6:	607a      	str	r2, [r7, #4]
	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE_TIM2, store_data_float2_, OVER_WRITE); //write
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f503 52fa 	add.w	r2, r3, #8000	; 0x1f40
 8004ace:	2300      	movs	r3, #0
 8004ad0:	9300      	str	r3, [sp, #0]
 8004ad2:	4613      	mov	r3, r2
 8004ad4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004ad8:	6879      	ldr	r1, [r7, #4]
 8004ada:	68b8      	ldr	r0, [r7, #8]
 8004adc:	f7fc fece 	bl	800187c <sd_write_array_float>
}
 8004ae0:	bf00      	nop
 8004ae2:	3710      	adds	r7, #16
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}

08004ae8 <_ZN6Logger11saveLogsIntEPKcS1_>:

void Logger::saveLogsInt(const char *folder_name, const char *file_name)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b086      	sub	sp, #24
 8004aec:	af02      	add	r7, sp, #8
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	60b9      	str	r1, [r7, #8]
 8004af2:	607a      	str	r2, [r7, #4]
	sd_write_array_int(folder_name, file_name, LOG_DATA_SIZE_TIM, store_data_int_, OVER_WRITE); //write
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f503 527a 	add.w	r2, r3, #16000	; 0x3e80
 8004afa:	2300      	movs	r3, #0
 8004afc:	9300      	str	r3, [sp, #0]
 8004afe:	4613      	mov	r3, r2
 8004b00:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004b04:	6879      	ldr	r1, [r7, #4]
 8004b06:	68b8      	ldr	r0, [r7, #8]
 8004b08:	f7fc ffaa 	bl	8001a60 <sd_write_array_int>
}
 8004b0c:	bf00      	nop
 8004b0e:	3710      	adds	r7, #16
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}

08004b14 <_ZN6Logger12saveLogs2IntEPKcS1_>:
void Logger::saveLogs2Int(const char *folder_name, const char *file_name)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b086      	sub	sp, #24
 8004b18:	af02      	add	r7, sp, #8
 8004b1a:	60f8      	str	r0, [r7, #12]
 8004b1c:	60b9      	str	r1, [r7, #8]
 8004b1e:	607a      	str	r2, [r7, #4]
	sd_write_array_int(folder_name, file_name, LOG_DATA_SIZE_TIM2, store_data_int2_, OVER_WRITE); //write
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 8004b26:	3320      	adds	r3, #32
 8004b28:	2200      	movs	r2, #0
 8004b2a:	9200      	str	r2, [sp, #0]
 8004b2c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004b30:	6879      	ldr	r1, [r7, #4]
 8004b32:	68b8      	ldr	r0, [r7, #8]
 8004b34:	f7fc ff94 	bl	8001a60 <sd_write_array_int>
}
 8004b38:	bf00      	nop
 8004b3a:	3710      	adds	r7, #16
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}

08004b40 <_ZN6Logger20saveDistanceAndThetaEPKcS1_S1_>:
void Logger::saveDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b086      	sub	sp, #24
 8004b44:	af02      	add	r7, sp, #8
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	60b9      	str	r1, [r7, #8]
 8004b4a:	607a      	str	r2, [r7, #4]
 8004b4c:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_, OVER_WRITE); //write
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004b54:	3340      	adds	r3, #64	; 0x40
 8004b56:	2200      	movs	r2, #0
 8004b58:	9200      	str	r2, [sp, #0]
 8004b5a:	f241 7270 	movw	r2, #6000	; 0x1770
 8004b5e:	6879      	ldr	r1, [r7, #4]
 8004b60:	68b8      	ldr	r0, [r7, #8]
 8004b62:	f7fc fe8b 	bl	800187c <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_, OVER_WRITE); //write
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 8004b6c:	3380      	adds	r3, #128	; 0x80
 8004b6e:	2200      	movs	r2, #0
 8004b70:	9200      	str	r2, [sp, #0]
 8004b72:	f241 7270 	movw	r2, #6000	; 0x1770
 8004b76:	6839      	ldr	r1, [r7, #0]
 8004b78:	68b8      	ldr	r0, [r7, #8]
 8004b7a:	f7fc fe7f 	bl	800187c <sd_write_array_float>
}
 8004b7e:	bf00      	nop
 8004b80:	3710      	adds	r7, #16
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bd80      	pop	{r7, pc}

08004b86 <_ZN6Logger21saveDistanceAndTheta2EPKcS1_S1_>:

void Logger::saveDistanceAndTheta2(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8004b86:	b580      	push	{r7, lr}
 8004b88:	b086      	sub	sp, #24
 8004b8a:	af02      	add	r7, sp, #8
 8004b8c:	60f8      	str	r0, [r7, #12]
 8004b8e:	60b9      	str	r1, [r7, #8]
 8004b90:	607a      	str	r2, [r7, #4]
 8004b92:	603b      	str	r3, [r7, #0]
	sd_write_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance2_, OVER_WRITE); //write
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8004b9a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	9200      	str	r2, [sp, #0]
 8004ba2:	f241 7270 	movw	r2, #6000	; 0x1770
 8004ba6:	6879      	ldr	r1, [r7, #4]
 8004ba8:	68b8      	ldr	r0, [r7, #8]
 8004baa:	f7fc fe67 	bl	800187c <sd_write_array_float>
	sd_write_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta2_, OVER_WRITE); //write
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004bb4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004bb8:	2200      	movs	r2, #0
 8004bba:	9200      	str	r2, [sp, #0]
 8004bbc:	f241 7270 	movw	r2, #6000	; 0x1770
 8004bc0:	6839      	ldr	r1, [r7, #0]
 8004bc2:	68b8      	ldr	r0, [r7, #8]
 8004bc4:	f7fc fe5a 	bl	800187c <sd_write_array_float>
}
 8004bc8:	bf00      	nop
 8004bca:	3710      	adds	r7, #16
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}

08004bd0 <_ZN6Logger22importDistanceAndThetaEPKcS1_S1_>:

void Logger::importDistanceAndTheta(const char *folder_name, const char *file_name1, const char *file_name2)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b084      	sub	sp, #16
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	60f8      	str	r0, [r7, #12]
 8004bd8:	60b9      	str	r1, [r7, #8]
 8004bda:	607a      	str	r2, [r7, #4]
 8004bdc:	603b      	str	r3, [r7, #0]
	sd_read_array_float(folder_name, file_name1, LOG_DATA_SIZE_DIS, store_distance_); //read
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004be4:	3340      	adds	r3, #64	; 0x40
 8004be6:	f241 7270 	movw	r2, #6000	; 0x1770
 8004bea:	6879      	ldr	r1, [r7, #4]
 8004bec:	68b8      	ldr	r0, [r7, #8]
 8004bee:	f7fc feab 	bl	8001948 <sd_read_array_float>
	sd_read_array_float(folder_name, file_name2, LOG_DATA_SIZE_DIS, store_theta_); //read
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	f503 433b 	add.w	r3, r3, #47872	; 0xbb00
 8004bf8:	3380      	adds	r3, #128	; 0x80
 8004bfa:	f241 7270 	movw	r2, #6000	; 0x1770
 8004bfe:	6839      	ldr	r1, [r7, #0]
 8004c00:	68b8      	ldr	r0, [r7, #8]
 8004c02:	f7fc fea1 	bl	8001948 <sd_read_array_float>
}
 8004c06:	bf00      	nop
 8004c08:	3710      	adds	r7, #16
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}

08004c0e <_ZN6Logger10resetLogs2Ev>:
	log_index_tim_ = 0;
	log_index_dis_ = 0;
}

void Logger::resetLogs2()
{
 8004c0e:	b480      	push	{r7}
 8004c10:	b08b      	sub	sp, #44	; 0x2c
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	6078      	str	r0, [r7, #4]
	for(auto &log : store_distance2_){
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8004c1c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004c20:	61fb      	str	r3, [r7, #28]
 8004c22:	69fb      	ldr	r3, [r7, #28]
 8004c24:	627b      	str	r3, [r7, #36]	; 0x24
 8004c26:	69fb      	ldr	r3, [r7, #28]
 8004c28:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004c2c:	3340      	adds	r3, #64	; 0x40
 8004c2e:	61bb      	str	r3, [r7, #24]
 8004c30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c32:	69bb      	ldr	r3, [r7, #24]
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d009      	beq.n	8004c4c <_ZN6Logger10resetLogs2Ev+0x3e>
 8004c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3a:	617b      	str	r3, [r7, #20]
		log = 0;
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	f04f 0200 	mov.w	r2, #0
 8004c42:	601a      	str	r2, [r3, #0]
	for(auto &log : store_distance2_){
 8004c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c46:	3304      	adds	r3, #4
 8004c48:	627b      	str	r3, [r7, #36]	; 0x24
 8004c4a:	e7f1      	b.n	8004c30 <_ZN6Logger10resetLogs2Ev+0x22>
	}
	for(auto &log : store_theta2_){
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8004c52:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004c56:	613b      	str	r3, [r7, #16]
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	623b      	str	r3, [r7, #32]
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	f503 43bb 	add.w	r3, r3, #23936	; 0x5d80
 8004c62:	3340      	adds	r3, #64	; 0x40
 8004c64:	60fb      	str	r3, [r7, #12]
 8004c66:	6a3a      	ldr	r2, [r7, #32]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	d009      	beq.n	8004c82 <_ZN6Logger10resetLogs2Ev+0x74>
 8004c6e:	6a3b      	ldr	r3, [r7, #32]
 8004c70:	60bb      	str	r3, [r7, #8]
		log = 0;
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	f04f 0200 	mov.w	r2, #0
 8004c78:	601a      	str	r2, [r3, #0]
	for(auto &log : store_theta2_){
 8004c7a:	6a3b      	ldr	r3, [r7, #32]
 8004c7c:	3304      	adds	r3, #4
 8004c7e:	623b      	str	r3, [r7, #32]
 8004c80:	e7f1      	b.n	8004c66 <_ZN6Logger10resetLogs2Ev+0x58>
	}

	log_index_tim_ = 0;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004c88:	33c2      	adds	r3, #194	; 0xc2
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	801a      	strh	r2, [r3, #0]
	log_index_dis_ = 0;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004c94:	33ca      	adds	r3, #202	; 0xca
 8004c96:	2200      	movs	r2, #0
 8004c98:	801a      	strh	r2, [r3, #0]
}
 8004c9a:	bf00      	nop
 8004c9c:	372c      	adds	r7, #44	; 0x2c
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr

08004ca6 <_ZN6Logger8resetIdxEv>:
void Logger::resetIdx()
{
 8004ca6:	b480      	push	{r7}
 8004ca8:	b083      	sub	sp, #12
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	6078      	str	r0, [r7, #4]
	log_index_tim_ = 0;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004cb4:	33c2      	adds	r3, #194	; 0xc2
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	801a      	strh	r2, [r3, #0]
	log_index_dis_ = 0;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004cc0:	33ca      	adds	r3, #202	; 0xca
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	801a      	strh	r2, [r3, #0]
}
 8004cc6:	bf00      	nop
 8004cc8:	370c      	adds	r7, #12
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr

08004cd2 <_ZN6Logger5startEv>:

void Logger::start()
{
 8004cd2:	b480      	push	{r7}
 8004cd4:	b083      	sub	sp, #12
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	6078      	str	r0, [r7, #4]
	recording_flag_ = true;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004ce0:	33c0      	adds	r3, #192	; 0xc0
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	701a      	strb	r2, [r3, #0]
}
 8004ce6:	bf00      	nop
 8004ce8:	370c      	adds	r7, #12
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr

08004cf2 <_ZN6Logger4stopEv>:

void Logger::stop()
{
 8004cf2:	b480      	push	{r7}
 8004cf4:	b083      	sub	sp, #12
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	6078      	str	r0, [r7, #4]
	recording_flag_ = false;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f503 33ea 	add.w	r3, r3, #119808	; 0x1d400
 8004d00:	33c0      	adds	r3, #192	; 0xc0
 8004d02:	2200      	movs	r2, #0
 8004d04:	701a      	strb	r2, [r3, #0]
}
 8004d06:	bf00      	nop
 8004d08:	370c      	adds	r7, #12
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr

08004d12 <_ZN5MotorC1Ev>:

#include "Motor.hpp"
#include "G_variables.h"


Motor::Motor() : temp_left_counter_period_(0), temp_right_counter_period_(0){}
 8004d12:	b480      	push	{r7}
 8004d14:	b083      	sub	sp, #12
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	6078      	str	r0, [r7, #4]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	801a      	strh	r2, [r3, #0]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2200      	movs	r2, #0
 8004d24:	805a      	strh	r2, [r3, #2]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4618      	mov	r0, r3
 8004d2a:	370c      	adds	r7, #12
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr

08004d34 <_ZN5Motor4initEv>:

void Motor::init()
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b082      	sub	sp, #8
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
	//PWM start
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8004d3c:	2108      	movs	r1, #8
 8004d3e:	4805      	ldr	r0, [pc, #20]	; (8004d54 <_ZN5Motor4initEv+0x20>)
 8004d40:	f009 feca 	bl	800ead8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8004d44:	210c      	movs	r1, #12
 8004d46:	4803      	ldr	r0, [pc, #12]	; (8004d54 <_ZN5Motor4initEv+0x20>)
 8004d48:	f009 fec6 	bl	800ead8 <HAL_TIM_PWM_Start>

}
 8004d4c:	bf00      	nop
 8004d4e:	3708      	adds	r7, #8
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}
 8004d54:	20044724 	.word	0x20044724

08004d58 <_ZN5Motor9motorCtrlEv>:

void Motor::motorCtrl()
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b084      	sub	sp, #16
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
	uint16_t left_counter_period, right_counter_period;

	if(temp_left_counter_period_ < 0) {
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	da0d      	bge.n	8004d86 <_ZN5Motor9motorCtrlEv+0x2e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004d70:	481f      	ldr	r0, [pc, #124]	; (8004df0 <_ZN5Motor9motorCtrlEv+0x98>)
 8004d72:	f005 ff97 	bl	800aca4 <HAL_GPIO_WritePin>
		left_counter_period = -1 * temp_left_counter_period_;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	425b      	negs	r3, r3
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	81fb      	strh	r3, [r7, #14]
 8004d84:	e00a      	b.n	8004d9c <_ZN5Motor9motorCtrlEv+0x44>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 8004d86:	2201      	movs	r2, #1
 8004d88:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004d8c:	4818      	ldr	r0, [pc, #96]	; (8004df0 <_ZN5Motor9motorCtrlEv+0x98>)
 8004d8e:	f005 ff89 	bl	800aca4 <HAL_GPIO_WritePin>
		left_counter_period = temp_left_counter_period_;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	81fb      	strh	r3, [r7, #14]
	}

	if(temp_right_counter_period_ < 0) {
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	da0d      	bge.n	8004dc2 <_ZN5Motor9motorCtrlEv+0x6a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 8004da6:	2201      	movs	r2, #1
 8004da8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004dac:	4810      	ldr	r0, [pc, #64]	; (8004df0 <_ZN5Motor9motorCtrlEv+0x98>)
 8004dae:	f005 ff79 	bl	800aca4 <HAL_GPIO_WritePin>
		right_counter_period = -1 * temp_right_counter_period_;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	425b      	negs	r3, r3
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	81bb      	strh	r3, [r7, #12]
 8004dc0:	e00a      	b.n	8004dd8 <_ZN5Motor9motorCtrlEv+0x80>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004dc8:	4809      	ldr	r0, [pc, #36]	; (8004df0 <_ZN5Motor9motorCtrlEv+0x98>)
 8004dca:	f005 ff6b 	bl	800aca4 <HAL_GPIO_WritePin>
		right_counter_period = temp_right_counter_period_;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	81bb      	strh	r3, [r7, #12]
	}

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, left_counter_period);
 8004dd8:	89fa      	ldrh	r2, [r7, #14]
 8004dda:	4b06      	ldr	r3, [pc, #24]	; (8004df4 <_ZN5Motor9motorCtrlEv+0x9c>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, right_counter_period);
 8004de0:	89ba      	ldrh	r2, [r7, #12]
 8004de2:	4b04      	ldr	r3, [pc, #16]	; (8004df4 <_ZN5Motor9motorCtrlEv+0x9c>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004de8:	bf00      	nop
 8004dea:	3710      	adds	r7, #16
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}
 8004df0:	40020c00 	.word	0x40020c00
 8004df4:	20044724 	.word	0x20044724

08004df8 <_ZN5Motor8setRatioEdd>:

void Motor::setRatio(double left_ratio, double right_ratio)
{
 8004df8:	b590      	push	{r4, r7, lr}
 8004dfa:	b087      	sub	sp, #28
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6178      	str	r0, [r7, #20]
 8004e00:	ed87 0b02 	vstr	d0, [r7, #8]
 8004e04:	ed87 1b00 	vstr	d1, [r7]
	if(left_ratio > 1) left_ratio = 1;
 8004e08:	f04f 0200 	mov.w	r2, #0
 8004e0c:	4b30      	ldr	r3, [pc, #192]	; (8004ed0 <_ZN5Motor8setRatioEdd+0xd8>)
 8004e0e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004e12:	f7fb fe99 	bl	8000b48 <__aeabi_dcmpgt>
 8004e16:	4603      	mov	r3, r0
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d005      	beq.n	8004e28 <_ZN5Motor8setRatioEdd+0x30>
 8004e1c:	f04f 0300 	mov.w	r3, #0
 8004e20:	4c2b      	ldr	r4, [pc, #172]	; (8004ed0 <_ZN5Motor8setRatioEdd+0xd8>)
 8004e22:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8004e26:	e00e      	b.n	8004e46 <_ZN5Motor8setRatioEdd+0x4e>
	else if(left_ratio < -1) left_ratio = -1;
 8004e28:	f04f 0200 	mov.w	r2, #0
 8004e2c:	4b29      	ldr	r3, [pc, #164]	; (8004ed4 <_ZN5Motor8setRatioEdd+0xdc>)
 8004e2e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004e32:	f7fb fe6b 	bl	8000b0c <__aeabi_dcmplt>
 8004e36:	4603      	mov	r3, r0
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d004      	beq.n	8004e46 <_ZN5Motor8setRatioEdd+0x4e>
 8004e3c:	f04f 0300 	mov.w	r3, #0
 8004e40:	4c24      	ldr	r4, [pc, #144]	; (8004ed4 <_ZN5Motor8setRatioEdd+0xdc>)
 8004e42:	e9c7 3402 	strd	r3, r4, [r7, #8]
	if(right_ratio > 1) right_ratio = 1;
 8004e46:	f04f 0200 	mov.w	r2, #0
 8004e4a:	4b21      	ldr	r3, [pc, #132]	; (8004ed0 <_ZN5Motor8setRatioEdd+0xd8>)
 8004e4c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004e50:	f7fb fe7a 	bl	8000b48 <__aeabi_dcmpgt>
 8004e54:	4603      	mov	r3, r0
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d005      	beq.n	8004e66 <_ZN5Motor8setRatioEdd+0x6e>
 8004e5a:	f04f 0300 	mov.w	r3, #0
 8004e5e:	4c1c      	ldr	r4, [pc, #112]	; (8004ed0 <_ZN5Motor8setRatioEdd+0xd8>)
 8004e60:	e9c7 3400 	strd	r3, r4, [r7]
 8004e64:	e00e      	b.n	8004e84 <_ZN5Motor8setRatioEdd+0x8c>
	else if(right_ratio < -1) right_ratio = -1;
 8004e66:	f04f 0200 	mov.w	r2, #0
 8004e6a:	4b1a      	ldr	r3, [pc, #104]	; (8004ed4 <_ZN5Motor8setRatioEdd+0xdc>)
 8004e6c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004e70:	f7fb fe4c 	bl	8000b0c <__aeabi_dcmplt>
 8004e74:	4603      	mov	r3, r0
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d004      	beq.n	8004e84 <_ZN5Motor8setRatioEdd+0x8c>
 8004e7a:	f04f 0300 	mov.w	r3, #0
 8004e7e:	4c15      	ldr	r4, [pc, #84]	; (8004ed4 <_ZN5Motor8setRatioEdd+0xdc>)
 8004e80:	e9c7 3400 	strd	r3, r4, [r7]

	temp_left_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * left_ratio);
 8004e84:	f04f 0200 	mov.w	r2, #0
 8004e88:	4b13      	ldr	r3, [pc, #76]	; (8004ed8 <_ZN5Motor8setRatioEdd+0xe0>)
 8004e8a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004e8e:	f7fb fbcb 	bl	8000628 <__aeabi_dmul>
 8004e92:	4603      	mov	r3, r0
 8004e94:	460c      	mov	r4, r1
 8004e96:	4618      	mov	r0, r3
 8004e98:	4621      	mov	r1, r4
 8004e9a:	f7fb fe75 	bl	8000b88 <__aeabi_d2iz>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	b21a      	sxth	r2, r3
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	801a      	strh	r2, [r3, #0]
	temp_right_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * right_ratio);
 8004ea6:	f04f 0200 	mov.w	r2, #0
 8004eaa:	4b0b      	ldr	r3, [pc, #44]	; (8004ed8 <_ZN5Motor8setRatioEdd+0xe0>)
 8004eac:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004eb0:	f7fb fbba 	bl	8000628 <__aeabi_dmul>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	460c      	mov	r4, r1
 8004eb8:	4618      	mov	r0, r3
 8004eba:	4621      	mov	r1, r4
 8004ebc:	f7fb fe64 	bl	8000b88 <__aeabi_d2iz>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	b21a      	sxth	r2, r3
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	805a      	strh	r2, [r3, #2]

}
 8004ec8:	bf00      	nop
 8004eca:	371c      	adds	r7, #28
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd90      	pop	{r4, r7, pc}
 8004ed0:	3ff00000 	.word	0x3ff00000
 8004ed4:	bff00000 	.word	0xbff00000
 8004ed8:	409c2000 	.word	0x409c2000

08004edc <_ZN5Motor20getLeftCounterPeriodEv>:

int16_t Motor::getLeftCounterPeriod()
{
 8004edc:	b480      	push	{r7}
 8004ede:	b083      	sub	sp, #12
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
	return temp_left_counter_period_;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	f9b3 3000 	ldrsh.w	r3, [r3]
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	370c      	adds	r7, #12
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr

08004ef6 <_ZN5Motor21getRightCounterPeriodEv>:

int16_t Motor::getRightCounterPeriod()
{
 8004ef6:	b480      	push	{r7}
 8004ef8:	b083      	sub	sp, #12
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	6078      	str	r0, [r7, #4]
	return temp_right_counter_period_;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	370c      	adds	r7, #12
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr

08004f10 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>:

#define DELTA_T 0.001

float monitor_x, monitor_y, monitor_theta;

Odometry::Odometry(Encoder *encoder, IMU *imu, VelocityCtrl *velocity_ctrl) : x_robot_(0), y_robot_(0), theta_(0), x_sens_(0), y_sens_(0)
 8004f10:	b490      	push	{r4, r7}
 8004f12:	b084      	sub	sp, #16
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	60f8      	str	r0, [r7, #12]
 8004f18:	60b9      	str	r1, [r7, #8]
 8004f1a:	607a      	str	r2, [r7, #4]
 8004f1c:	603b      	str	r3, [r7, #0]
 8004f1e:	68fa      	ldr	r2, [r7, #12]
 8004f20:	f04f 0300 	mov.w	r3, #0
 8004f24:	f04f 0400 	mov.w	r4, #0
 8004f28:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8004f2c:	68fa      	ldr	r2, [r7, #12]
 8004f2e:	f04f 0300 	mov.w	r3, #0
 8004f32:	f04f 0400 	mov.w	r4, #0
 8004f36:	e9c2 3406 	strd	r3, r4, [r2, #24]
 8004f3a:	68fa      	ldr	r2, [r7, #12]
 8004f3c:	f04f 0300 	mov.w	r3, #0
 8004f40:	f04f 0400 	mov.w	r4, #0
 8004f44:	e9c2 3408 	strd	r3, r4, [r2, #32]
 8004f48:	68fa      	ldr	r2, [r7, #12]
 8004f4a:	f04f 0300 	mov.w	r3, #0
 8004f4e:	f04f 0400 	mov.w	r4, #0
 8004f52:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
 8004f56:	68fa      	ldr	r2, [r7, #12]
 8004f58:	f04f 0300 	mov.w	r3, #0
 8004f5c:	f04f 0400 	mov.w	r4, #0
 8004f60:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
{
	encoder_ = encoder;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	68ba      	ldr	r2, [r7, #8]
 8004f68:	601a      	str	r2, [r3, #0]
	imu_ = imu;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	683a      	ldr	r2, [r7, #0]
 8004f74:	609a      	str	r2, [r3, #8]
}
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3710      	adds	r7, #16
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bc90      	pop	{r4, r7}
 8004f80:	4770      	bx	lr
 8004f82:	0000      	movs	r0, r0
 8004f84:	0000      	movs	r0, r0
	...

08004f88 <_ZN8Odometry12calcPotitionEv>:


void Odometry::calcPotition()
{
 8004f88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f8c:	b086      	sub	sp, #24
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	6078      	str	r0, [r7, #4]
	//float current_velocity = velocity_ctrl_->getCurrentVelocity();
	double current_omega = imu_->getOmega();
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	4618      	mov	r0, r3
 8004f98:	f7fc ff8a 	bl	8001eb0 <_ZN3IMU8getOmegaEv>
 8004f9c:	ee10 3a10 	vmov	r3, s0
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f7fb fae9 	bl	8000578 <__aeabi_f2d>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	460c      	mov	r4, r1
 8004faa:	e9c7 3404 	strd	r3, r4, [r7, #16]
	float distance = encoder_->getDistance();
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f7fc fb78 	bl	80016a8 <_ZN7Encoder11getDistanceEv>
 8004fb8:	ed87 0a03 	vstr	s0, [r7, #12]

	delta_theta_ = current_omega * DELTA_T;
 8004fbc:	a376      	add	r3, pc, #472	; (adr r3, 8005198 <_ZN8Odometry12calcPotitionEv+0x210>)
 8004fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fc2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004fc6:	f7fb fb2f 	bl	8000628 <__aeabi_dmul>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	460c      	mov	r4, r1
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38

	x_robot_ = x_robot_ + distance * cos(theta_ + delta_theta_ / 2);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8004fda:	68f8      	ldr	r0, [r7, #12]
 8004fdc:	f7fb facc 	bl	8000578 <__aeabi_f2d>
 8004fe0:	4682      	mov	sl, r0
 8004fe2:	468b      	mov	fp, r1
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8004ff0:	f04f 0200 	mov.w	r2, #0
 8004ff4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004ff8:	f7fb fc40 	bl	800087c <__aeabi_ddiv>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	460b      	mov	r3, r1
 8005000:	4640      	mov	r0, r8
 8005002:	4649      	mov	r1, r9
 8005004:	f7fb f95a 	bl	80002bc <__adddf3>
 8005008:	4602      	mov	r2, r0
 800500a:	460b      	mov	r3, r1
 800500c:	ec43 2b17 	vmov	d7, r2, r3
 8005010:	eeb0 0a47 	vmov.f32	s0, s14
 8005014:	eef0 0a67 	vmov.f32	s1, s15
 8005018:	f00f f8a2 	bl	8014160 <cos>
 800501c:	ec53 2b10 	vmov	r2, r3, d0
 8005020:	4650      	mov	r0, sl
 8005022:	4659      	mov	r1, fp
 8005024:	f7fb fb00 	bl	8000628 <__aeabi_dmul>
 8005028:	4602      	mov	r2, r0
 800502a:	460b      	mov	r3, r1
 800502c:	4620      	mov	r0, r4
 800502e:	4629      	mov	r1, r5
 8005030:	f7fb f944 	bl	80002bc <__adddf3>
 8005034:	4603      	mov	r3, r0
 8005036:	460c      	mov	r4, r1
 8005038:	687a      	ldr	r2, [r7, #4]
 800503a:	e9c2 3404 	strd	r3, r4, [r2, #16]
	y_robot_ = y_robot_ + distance * sin(theta_ + delta_theta_ / 2);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8005044:	68f8      	ldr	r0, [r7, #12]
 8005046:	f7fb fa97 	bl	8000578 <__aeabi_f2d>
 800504a:	4682      	mov	sl, r0
 800504c:	468b      	mov	fp, r1
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	e9d3 8908 	ldrd	r8, r9, [r3, #32]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800505a:	f04f 0200 	mov.w	r2, #0
 800505e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005062:	f7fb fc0b 	bl	800087c <__aeabi_ddiv>
 8005066:	4602      	mov	r2, r0
 8005068:	460b      	mov	r3, r1
 800506a:	4640      	mov	r0, r8
 800506c:	4649      	mov	r1, r9
 800506e:	f7fb f925 	bl	80002bc <__adddf3>
 8005072:	4602      	mov	r2, r0
 8005074:	460b      	mov	r3, r1
 8005076:	ec43 2b17 	vmov	d7, r2, r3
 800507a:	eeb0 0a47 	vmov.f32	s0, s14
 800507e:	eef0 0a67 	vmov.f32	s1, s15
 8005082:	f00f f8b1 	bl	80141e8 <sin>
 8005086:	ec53 2b10 	vmov	r2, r3, d0
 800508a:	4650      	mov	r0, sl
 800508c:	4659      	mov	r1, fp
 800508e:	f7fb facb 	bl	8000628 <__aeabi_dmul>
 8005092:	4602      	mov	r2, r0
 8005094:	460b      	mov	r3, r1
 8005096:	4620      	mov	r0, r4
 8005098:	4629      	mov	r1, r5
 800509a:	f7fb f90f 	bl	80002bc <__adddf3>
 800509e:	4603      	mov	r3, r0
 80050a0:	460c      	mov	r4, r1
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	e9c2 3406 	strd	r3, r4, [r2, #24]
	theta_= theta_ + delta_theta_;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 80050b4:	461a      	mov	r2, r3
 80050b6:	4623      	mov	r3, r4
 80050b8:	f7fb f900 	bl	80002bc <__adddf3>
 80050bc:	4603      	mov	r3, r0
 80050be:	460c      	mov	r4, r1
 80050c0:	687a      	ldr	r2, [r7, #4]
 80050c2:	e9c2 3408 	strd	r3, r4, [r2, #32]

	x_sens_ = x_robot_ + SENSOR_LENGTH * cos(theta_); //calculate a sensor position from robot's center position
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	ed93 7b08 	vldr	d7, [r3, #32]
 80050d2:	eeb0 0a47 	vmov.f32	s0, s14
 80050d6:	eef0 0a67 	vmov.f32	s1, s15
 80050da:	f00f f841 	bl	8014160 <cos>
 80050de:	ec51 0b10 	vmov	r0, r1, d0
 80050e2:	f04f 0200 	mov.w	r2, #0
 80050e6:	4b28      	ldr	r3, [pc, #160]	; (8005188 <_ZN8Odometry12calcPotitionEv+0x200>)
 80050e8:	f7fb fa9e 	bl	8000628 <__aeabi_dmul>
 80050ec:	4602      	mov	r2, r0
 80050ee:	460b      	mov	r3, r1
 80050f0:	4620      	mov	r0, r4
 80050f2:	4629      	mov	r1, r5
 80050f4:	f7fb f8e2 	bl	80002bc <__adddf3>
 80050f8:	4603      	mov	r3, r0
 80050fa:	460c      	mov	r4, r1
 80050fc:	687a      	ldr	r2, [r7, #4]
 80050fe:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	y_sens_ = y_robot_ + SENSOR_LENGTH * sin(theta_);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	ed93 7b08 	vldr	d7, [r3, #32]
 800510e:	eeb0 0a47 	vmov.f32	s0, s14
 8005112:	eef0 0a67 	vmov.f32	s1, s15
 8005116:	f00f f867 	bl	80141e8 <sin>
 800511a:	ec51 0b10 	vmov	r0, r1, d0
 800511e:	f04f 0200 	mov.w	r2, #0
 8005122:	4b19      	ldr	r3, [pc, #100]	; (8005188 <_ZN8Odometry12calcPotitionEv+0x200>)
 8005124:	f7fb fa80 	bl	8000628 <__aeabi_dmul>
 8005128:	4602      	mov	r2, r0
 800512a:	460b      	mov	r3, r1
 800512c:	4620      	mov	r0, r4
 800512e:	4629      	mov	r1, r5
 8005130:	f7fb f8c4 	bl	80002bc <__adddf3>
 8005134:	4603      	mov	r3, r0
 8005136:	460c      	mov	r4, r1
 8005138:	687a      	ldr	r2, [r7, #4]
 800513a:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30

	monitor_x = x_sens_;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8005144:	4618      	mov	r0, r3
 8005146:	4621      	mov	r1, r4
 8005148:	f7fb fd66 	bl	8000c18 <__aeabi_d2f>
 800514c:	4602      	mov	r2, r0
 800514e:	4b0f      	ldr	r3, [pc, #60]	; (800518c <_ZN8Odometry12calcPotitionEv+0x204>)
 8005150:	601a      	str	r2, [r3, #0]
	monitor_y = y_sens_;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8005158:	4618      	mov	r0, r3
 800515a:	4621      	mov	r1, r4
 800515c:	f7fb fd5c 	bl	8000c18 <__aeabi_d2f>
 8005160:	4602      	mov	r2, r0
 8005162:	4b0b      	ldr	r3, [pc, #44]	; (8005190 <_ZN8Odometry12calcPotitionEv+0x208>)
 8005164:	601a      	str	r2, [r3, #0]
	monitor_theta = theta_;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 800516c:	4618      	mov	r0, r3
 800516e:	4621      	mov	r1, r4
 8005170:	f7fb fd52 	bl	8000c18 <__aeabi_d2f>
 8005174:	4602      	mov	r2, r0
 8005176:	4b07      	ldr	r3, [pc, #28]	; (8005194 <_ZN8Odometry12calcPotitionEv+0x20c>)
 8005178:	601a      	str	r2, [r3, #0]
}
 800517a:	bf00      	nop
 800517c:	3718      	adds	r7, #24
 800517e:	46bd      	mov	sp, r7
 8005180:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005184:	f3af 8000 	nop.w
 8005188:	405b8000 	.word	0x405b8000
 800518c:	200002c4 	.word	0x200002c4
 8005190:	200002c8 	.word	0x200002c8
 8005194:	200002cc 	.word	0x200002cc
 8005198:	d2f1a9fc 	.word	0xd2f1a9fc
 800519c:	3f50624d 	.word	0x3f50624d

080051a0 <_ZN8Odometry4flipEv>:

void Odometry::flip()
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b082      	sub	sp, #8
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
	calcPotition();
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f7ff feed 	bl	8004f88 <_ZN8Odometry12calcPotitionEv>
}
 80051ae:	bf00      	nop
 80051b0:	3708      	adds	r7, #8
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}

080051b6 <_ZN8Odometry8getThetaEv>:
{
	return y_sens_;
}

double Odometry::getTheta()
{
 80051b6:	b490      	push	{r4, r7}
 80051b8:	b082      	sub	sp, #8
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	6078      	str	r0, [r7, #4]
	return theta_;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 80051c4:	ec44 3b17 	vmov	d7, r3, r4
}
 80051c8:	eeb0 0a47 	vmov.f32	s0, s14
 80051cc:	eef0 0a67 	vmov.f32	s1, s15
 80051d0:	3708      	adds	r7, #8
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bc90      	pop	{r4, r7}
 80051d6:	4770      	bx	lr

080051d8 <_ZN8Odometry13clearPotitionEv>:
{
	return delta_theta_;
}

void Odometry::clearPotition()
{
 80051d8:	b490      	push	{r4, r7}
 80051da:	b082      	sub	sp, #8
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
	x_sens_ = 0;
 80051e0:	687a      	ldr	r2, [r7, #4]
 80051e2:	f04f 0300 	mov.w	r3, #0
 80051e6:	f04f 0400 	mov.w	r4, #0
 80051ea:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	y_sens_ = 0;
 80051ee:	687a      	ldr	r2, [r7, #4]
 80051f0:	f04f 0300 	mov.w	r3, #0
 80051f4:	f04f 0400 	mov.w	r4, #0
 80051f8:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	theta_ = 0;
 80051fc:	687a      	ldr	r2, [r7, #4]
 80051fe:	f04f 0300 	mov.w	r3, #0
 8005202:	f04f 0400 	mov.w	r4, #0
 8005206:	e9c2 3408 	strd	r3, r4, [r2, #32]
}
 800520a:	bf00      	nop
 800520c:	3708      	adds	r7, #8
 800520e:	46bd      	mov	sp, r7
 8005210:	bc90      	pop	{r4, r7}
 8005212:	4770      	bx	lr

08005214 <_ZN13PathFollowingC1Ev>:

uint16_t mon_ref_num;
double mon_x, mon_y, mon_th;
double mon_log_dis, mon_log_th;

PathFollowing::PathFollowing() : execute_flag_(false), x_tar_(0), y_tar_(0), th_tar_(0), ref_num(0)
 8005214:	b490      	push	{r4, r7}
 8005216:	b082      	sub	sp, #8
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	701a      	strb	r2, [r3, #0]
 8005222:	687a      	ldr	r2, [r7, #4]
 8005224:	f04f 0300 	mov.w	r3, #0
 8005228:	f04f 0400 	mov.w	r4, #0
 800522c:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	f04f 0300 	mov.w	r3, #0
 8005236:	f04f 0400 	mov.w	r4, #0
 800523a:	e9c2 3404 	strd	r3, r4, [r2, #16]
 800523e:	687a      	ldr	r2, [r7, #4]
 8005240:	f04f 0300 	mov.w	r3, #0
 8005244:	f04f 0400 	mov.w	r4, #0
 8005248:	e9c2 3406 	strd	r3, r4, [r2, #24]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f503 33bb 	add.w	r3, r3, #95744	; 0x17600
 8005252:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8005256:	2200      	movs	r2, #0
 8005258:	801a      	strh	r2, [r3, #0]
{
	rtParam.kx = 0;
 800525a:	4a29      	ldr	r2, [pc, #164]	; (8005300 <_ZN13PathFollowingC1Ev+0xec>)
 800525c:	f04f 0300 	mov.w	r3, #0
 8005260:	f04f 0400 	mov.w	r4, #0
 8005264:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = 0;
 8005268:	4a25      	ldr	r2, [pc, #148]	; (8005300 <_ZN13PathFollowingC1Ev+0xec>)
 800526a:	f04f 0300 	mov.w	r3, #0
 800526e:	f04f 0400 	mov.w	r4, #0
 8005272:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = 0;
 8005276:	4a22      	ldr	r2, [pc, #136]	; (8005300 <_ZN13PathFollowingC1Ev+0xec>)
 8005278:	f04f 0300 	mov.w	r3, #0
 800527c:	f04f 0400 	mov.w	r4, #0
 8005280:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.target_x = 0;
 8005284:	4a1f      	ldr	r2, [pc, #124]	; (8005304 <_ZN13PathFollowingC1Ev+0xf0>)
 8005286:	f04f 0300 	mov.w	r3, #0
 800528a:	f04f 0400 	mov.w	r4, #0
 800528e:	e9c2 3400 	strd	r3, r4, [r2]
	rtU.target_y = 0;
 8005292:	4a1c      	ldr	r2, [pc, #112]	; (8005304 <_ZN13PathFollowingC1Ev+0xf0>)
 8005294:	f04f 0300 	mov.w	r3, #0
 8005298:	f04f 0400 	mov.w	r4, #0
 800529c:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtU.th = 0;
 80052a0:	4a18      	ldr	r2, [pc, #96]	; (8005304 <_ZN13PathFollowingC1Ev+0xf0>)
 80052a2:	f04f 0300 	mov.w	r3, #0
 80052a6:	f04f 0400 	mov.w	r4, #0
 80052aa:	e9c2 3404 	strd	r3, r4, [r2, #16]
	rtU.x = 0;
 80052ae:	4a15      	ldr	r2, [pc, #84]	; (8005304 <_ZN13PathFollowingC1Ev+0xf0>)
 80052b0:	f04f 0300 	mov.w	r3, #0
 80052b4:	f04f 0400 	mov.w	r4, #0
 80052b8:	e9c2 3406 	strd	r3, r4, [r2, #24]
	rtU.y = 0;
 80052bc:	4a11      	ldr	r2, [pc, #68]	; (8005304 <_ZN13PathFollowingC1Ev+0xf0>)
 80052be:	f04f 0300 	mov.w	r3, #0
 80052c2:	f04f 0400 	mov.w	r4, #0
 80052c6:	e9c2 3408 	strd	r3, r4, [r2, #32]
	rtU.th_cur = 0;
 80052ca:	4a0e      	ldr	r2, [pc, #56]	; (8005304 <_ZN13PathFollowingC1Ev+0xf0>)
 80052cc:	f04f 0300 	mov.w	r3, #0
 80052d0:	f04f 0400 	mov.w	r4, #0
 80052d4:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	rtY.V_tar = 0;
 80052d8:	4a0b      	ldr	r2, [pc, #44]	; (8005308 <_ZN13PathFollowingC1Ev+0xf4>)
 80052da:	f04f 0300 	mov.w	r3, #0
 80052de:	f04f 0400 	mov.w	r4, #0
 80052e2:	e9c2 3400 	strd	r3, r4, [r2]
	rtY.tar = 0;
 80052e6:	4a08      	ldr	r2, [pc, #32]	; (8005308 <_ZN13PathFollowingC1Ev+0xf4>)
 80052e8:	f04f 0300 	mov.w	r3, #0
 80052ec:	f04f 0400 	mov.w	r4, #0
 80052f0:	e9c2 3402 	strd	r3, r4, [r2, #8]

}
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	4618      	mov	r0, r3
 80052f8:	3708      	adds	r7, #8
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bc90      	pop	{r4, r7}
 80052fe:	4770      	bx	lr
 8005300:	20044c28 	.word	0x20044c28
 8005304:	20044bb8 	.word	0x20044bb8
 8005308:	20044c18 	.word	0x20044c18

0800530c <_ZN13PathFollowing4initEv>:
	}

}

void PathFollowing::init()
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b088      	sub	sp, #32
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
	path_following_initialize();
 8005314:	f001 fc4e 	bl	8006bb4 <path_following_initialize>

	double temp_kx, temp_ky, temp_kt;
	sd_read_array_double("PARAMS", "KX.TXT", 1, &temp_kx);
 8005318:	f107 0318 	add.w	r3, r7, #24
 800531c:	2201      	movs	r2, #1
 800531e:	4915      	ldr	r1, [pc, #84]	; (8005374 <_ZN13PathFollowing4initEv+0x68>)
 8005320:	4815      	ldr	r0, [pc, #84]	; (8005378 <_ZN13PathFollowing4initEv+0x6c>)
 8005322:	f7fc fb57 	bl	80019d4 <sd_read_array_double>
	sd_read_array_double("PARAMS", "KY.TXT", 1, &temp_ky);
 8005326:	f107 0310 	add.w	r3, r7, #16
 800532a:	2201      	movs	r2, #1
 800532c:	4913      	ldr	r1, [pc, #76]	; (800537c <_ZN13PathFollowing4initEv+0x70>)
 800532e:	4812      	ldr	r0, [pc, #72]	; (8005378 <_ZN13PathFollowing4initEv+0x6c>)
 8005330:	f7fc fb50 	bl	80019d4 <sd_read_array_double>
	sd_read_array_double("PARAMS", "KT.TXT", 1, &temp_kt);
 8005334:	f107 0308 	add.w	r3, r7, #8
 8005338:	2201      	movs	r2, #1
 800533a:	4911      	ldr	r1, [pc, #68]	; (8005380 <_ZN13PathFollowing4initEv+0x74>)
 800533c:	480e      	ldr	r0, [pc, #56]	; (8005378 <_ZN13PathFollowing4initEv+0x6c>)
 800533e:	f7fc fb49 	bl	80019d4 <sd_read_array_double>
	setGain(temp_kx, temp_ky, temp_kt);
 8005342:	ed97 7b06 	vldr	d7, [r7, #24]
 8005346:	ed97 6b04 	vldr	d6, [r7, #16]
 800534a:	ed97 5b02 	vldr	d5, [r7, #8]
 800534e:	eeb0 2a45 	vmov.f32	s4, s10
 8005352:	eef0 2a65 	vmov.f32	s5, s11
 8005356:	eeb0 1a46 	vmov.f32	s2, s12
 800535a:	eef0 1a66 	vmov.f32	s3, s13
 800535e:	eeb0 0a47 	vmov.f32	s0, s14
 8005362:	eef0 0a67 	vmov.f32	s1, s15
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f000 f80c 	bl	8005384 <_ZN13PathFollowing7setGainEddd>
}
 800536c:	bf00      	nop
 800536e:	3720      	adds	r7, #32
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}
 8005374:	080197d8 	.word	0x080197d8
 8005378:	080197e0 	.word	0x080197e0
 800537c:	080197e8 	.word	0x080197e8
 8005380:	080197f0 	.word	0x080197f0

08005384 <_ZN13PathFollowing7setGainEddd>:

void PathFollowing::setGain(double kx, double ky, double kt)
{
 8005384:	b490      	push	{r4, r7}
 8005386:	b088      	sub	sp, #32
 8005388:	af00      	add	r7, sp, #0
 800538a:	61f8      	str	r0, [r7, #28]
 800538c:	ed87 0b04 	vstr	d0, [r7, #16]
 8005390:	ed87 1b02 	vstr	d1, [r7, #8]
 8005394:	ed87 2b00 	vstr	d2, [r7]
	rtParam.kx = kx;
 8005398:	4a09      	ldr	r2, [pc, #36]	; (80053c0 <_ZN13PathFollowing7setGainEddd+0x3c>)
 800539a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800539e:	e9c2 3400 	strd	r3, r4, [r2]
	rtParam.ky = ky;
 80053a2:	4a07      	ldr	r2, [pc, #28]	; (80053c0 <_ZN13PathFollowing7setGainEddd+0x3c>)
 80053a4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80053a8:	e9c2 3402 	strd	r3, r4, [r2, #8]
	rtParam.kt = kt;
 80053ac:	4a04      	ldr	r2, [pc, #16]	; (80053c0 <_ZN13PathFollowing7setGainEddd+0x3c>)
 80053ae:	e9d7 3400 	ldrd	r3, r4, [r7]
 80053b2:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 80053b6:	bf00      	nop
 80053b8:	3720      	adds	r7, #32
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bc90      	pop	{r4, r7}
 80053be:	4770      	bx	lr
 80053c0:	20044c28 	.word	0x20044c28

080053c4 <_ZN11PowerSensor4initEv>:
#define LOW_VOLTAGE_THRESHOLD 7.4

float monitor_voltage;

void PowerSensor::init()
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b082      	sub	sp, #8
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT);
 80053cc:	2088      	movs	r0, #136	; 0x88
 80053ce:	f7fc feb2 	bl	8002136 <INA260_init>
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT);
 80053d2:	2080      	movs	r0, #128	; 0x80
 80053d4:	f7fc feaf 	bl	8002136 <INA260_init>
}
 80053d8:	bf00      	nop
 80053da:	3708      	adds	r7, #8
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}

080053e0 <_ZN11PowerSensor12updateValuesEv>:

void PowerSensor::updateValues()
{
 80053e0:	b590      	push	{r4, r7, lr}
 80053e2:	b083      	sub	sp, #12
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
	//current_l_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
	//current_r_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT) * 0.00125;
	buttery_voltage_ = INA260_read(0x02, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
 80053e8:	2188      	movs	r1, #136	; 0x88
 80053ea:	2002      	movs	r0, #2
 80053ec:	f7fc fe40 	bl	8002070 <INA260_read>
 80053f0:	4603      	mov	r3, r0
 80053f2:	4618      	mov	r0, r3
 80053f4:	f7fb f8ae 	bl	8000554 <__aeabi_i2d>
 80053f8:	a30c      	add	r3, pc, #48	; (adr r3, 800542c <_ZN11PowerSensor12updateValuesEv+0x4c>)
 80053fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053fe:	f7fb f913 	bl	8000628 <__aeabi_dmul>
 8005402:	4603      	mov	r3, r0
 8005404:	460c      	mov	r4, r1
 8005406:	4618      	mov	r0, r3
 8005408:	4621      	mov	r1, r4
 800540a:	f7fb fc05 	bl	8000c18 <__aeabi_d2f>
 800540e:	4602      	mov	r2, r0
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	609a      	str	r2, [r3, #8]

	monitor_voltage = buttery_voltage_;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	4a03      	ldr	r2, [pc, #12]	; (8005428 <_ZN11PowerSensor12updateValuesEv+0x48>)
 800541a:	6013      	str	r3, [r2, #0]
}
 800541c:	bf00      	nop
 800541e:	370c      	adds	r7, #12
 8005420:	46bd      	mov	sp, r7
 8005422:	bd90      	pop	{r4, r7, pc}
 8005424:	f3af 8000 	nop.w
 8005428:	200002d0 	.word	0x200002d0
 800542c:	47ae147b 	.word	0x47ae147b
 8005430:	3f547ae1 	.word	0x3f547ae1

08005434 <_ZN11PowerSensor17getButteryVoltageEv>:
	left = current_l_;
	right = current_r_;
}

float PowerSensor::getButteryVoltage()
{
 8005434:	b480      	push	{r7}
 8005436:	b083      	sub	sp, #12
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
	return buttery_voltage_;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	ee07 3a90 	vmov	s15, r3

}
 8005444:	eeb0 0a67 	vmov.f32	s0, s15
 8005448:	370c      	adds	r7, #12
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr
	...

08005454 <_ZN12RotarySwitch8getValueEv>:

#include "RotarySwitch.hpp"


uint16_t RotarySwitch::getValue()
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b084      	sub	sp, #16
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 800545c:	2300      	movs	r3, #0
 800545e:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_1))	ret_value |= 0x01;
 8005460:	2102      	movs	r1, #2
 8005462:	4822      	ldr	r0, [pc, #136]	; (80054ec <_ZN12RotarySwitch8getValueEv+0x98>)
 8005464:	f005 fc06 	bl	800ac74 <HAL_GPIO_ReadPin>
 8005468:	4603      	mov	r3, r0
 800546a:	2b00      	cmp	r3, #0
 800546c:	bf0c      	ite	eq
 800546e:	2301      	moveq	r3, #1
 8005470:	2300      	movne	r3, #0
 8005472:	b2db      	uxtb	r3, r3
 8005474:	2b00      	cmp	r3, #0
 8005476:	d003      	beq.n	8005480 <_ZN12RotarySwitch8getValueEv+0x2c>
 8005478:	89fb      	ldrh	r3, [r7, #14]
 800547a:	f043 0301 	orr.w	r3, r3, #1
 800547e:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_3))	ret_value |= 0x02;
 8005480:	2108      	movs	r1, #8
 8005482:	481a      	ldr	r0, [pc, #104]	; (80054ec <_ZN12RotarySwitch8getValueEv+0x98>)
 8005484:	f005 fbf6 	bl	800ac74 <HAL_GPIO_ReadPin>
 8005488:	4603      	mov	r3, r0
 800548a:	2b00      	cmp	r3, #0
 800548c:	bf0c      	ite	eq
 800548e:	2301      	moveq	r3, #1
 8005490:	2300      	movne	r3, #0
 8005492:	b2db      	uxtb	r3, r3
 8005494:	2b00      	cmp	r3, #0
 8005496:	d003      	beq.n	80054a0 <_ZN12RotarySwitch8getValueEv+0x4c>
 8005498:	89fb      	ldrh	r3, [r7, #14]
 800549a:	f043 0302 	orr.w	r3, r3, #2
 800549e:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_4))	ret_value |= 0x04;
 80054a0:	2110      	movs	r1, #16
 80054a2:	4812      	ldr	r0, [pc, #72]	; (80054ec <_ZN12RotarySwitch8getValueEv+0x98>)
 80054a4:	f005 fbe6 	bl	800ac74 <HAL_GPIO_ReadPin>
 80054a8:	4603      	mov	r3, r0
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	bf0c      	ite	eq
 80054ae:	2301      	moveq	r3, #1
 80054b0:	2300      	movne	r3, #0
 80054b2:	b2db      	uxtb	r3, r3
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d003      	beq.n	80054c0 <_ZN12RotarySwitch8getValueEv+0x6c>
 80054b8:	89fb      	ldrh	r3, [r7, #14]
 80054ba:	f043 0304 	orr.w	r3, r3, #4
 80054be:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_7))	ret_value |= 0x08;
 80054c0:	2180      	movs	r1, #128	; 0x80
 80054c2:	480a      	ldr	r0, [pc, #40]	; (80054ec <_ZN12RotarySwitch8getValueEv+0x98>)
 80054c4:	f005 fbd6 	bl	800ac74 <HAL_GPIO_ReadPin>
 80054c8:	4603      	mov	r3, r0
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	bf0c      	ite	eq
 80054ce:	2301      	moveq	r3, #1
 80054d0:	2300      	movne	r3, #0
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d003      	beq.n	80054e0 <_ZN12RotarySwitch8getValueEv+0x8c>
 80054d8:	89fb      	ldrh	r3, [r7, #14]
 80054da:	f043 0308 	orr.w	r3, r3, #8
 80054de:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 80054e0:	89fb      	ldrh	r3, [r7, #14]

}
 80054e2:	4618      	mov	r0, r3
 80054e4:	3710      	adds	r7, #16
 80054e6:	46bd      	mov	sp, r7
 80054e8:	bd80      	pop	{r7, pc}
 80054ea:	bf00      	nop
 80054ec:	40020c00 	.word	0x40020c00

080054f0 <_ZN10SideSensorC1Ev>:

uint16_t mon_status;
bool mon_status_L, mon_status_R;
uint16_t mon_cnt_l, mon_cnt_r;

SideSensor::SideSensor() : status_(0), status_L_(false), status_R_(false), white_line_cnt_l_(0), white_line_cnt_r_(0), ignore_flag_(false)
 80054f0:	b480      	push	{r7}
 80054f2:	b083      	sub	sp, #12
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	801a      	strh	r2, [r3, #0]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2200      	movs	r2, #0
 8005502:	709a      	strb	r2, [r3, #2]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2200      	movs	r2, #0
 8005508:	70da      	strb	r2, [r3, #3]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2200      	movs	r2, #0
 800550e:	809a      	strh	r2, [r3, #4]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	80da      	strh	r2, [r3, #6]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2200      	movs	r2, #0
 800551a:	721a      	strb	r2, [r3, #8]
{

}
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	4618      	mov	r0, r3
 8005520:	370c      	adds	r7, #12
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr
	...

0800552c <_ZN10SideSensor12updateStatusEv>:

}
*/

void SideSensor::updateStatus()
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b082      	sub	sp, #8
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
	static bool white_flag1 = false;
	static bool white_flag2 = false;
	static uint16_t cnt_l, cnt_r;

	if(ignore_flag_ == false){
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	7a1b      	ldrb	r3, [r3, #8]
 8005538:	f083 0301 	eor.w	r3, r3, #1
 800553c:	b2db      	uxtb	r3, r3
 800553e:	2b00      	cmp	r3, #0
 8005540:	f000 80db 	beq.w	80056fa <_ZN10SideSensor12updateStatusEv+0x1ce>

		if(white_flag1 == false){
 8005544:	4b6f      	ldr	r3, [pc, #444]	; (8005704 <_ZN10SideSensor12updateStatusEv+0x1d8>)
 8005546:	781b      	ldrb	r3, [r3, #0]
 8005548:	f083 0301 	eor.w	r3, r3, #1
 800554c:	b2db      	uxtb	r3, r3
 800554e:	2b00      	cmp	r3, #0
 8005550:	d02a      	beq.n	80055a8 <_ZN10SideSensor12updateStatusEv+0x7c>
			if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2)){
 8005552:	2104      	movs	r1, #4
 8005554:	486c      	ldr	r0, [pc, #432]	; (8005708 <_ZN10SideSensor12updateStatusEv+0x1dc>)
 8005556:	f005 fb8d 	bl	800ac74 <HAL_GPIO_ReadPin>
 800555a:	4603      	mov	r3, r0
 800555c:	2b00      	cmp	r3, #0
 800555e:	bf0c      	ite	eq
 8005560:	2301      	moveq	r3, #1
 8005562:	2300      	movne	r3, #0
 8005564:	b2db      	uxtb	r3, r3
 8005566:	2b00      	cmp	r3, #0
 8005568:	d006      	beq.n	8005578 <_ZN10SideSensor12updateStatusEv+0x4c>
				cnt_r++;
 800556a:	4b68      	ldr	r3, [pc, #416]	; (800570c <_ZN10SideSensor12updateStatusEv+0x1e0>)
 800556c:	881b      	ldrh	r3, [r3, #0]
 800556e:	3301      	adds	r3, #1
 8005570:	b29a      	uxth	r2, r3
 8005572:	4b66      	ldr	r3, [pc, #408]	; (800570c <_ZN10SideSensor12updateStatusEv+0x1e0>)
 8005574:	801a      	strh	r2, [r3, #0]
 8005576:	e002      	b.n	800557e <_ZN10SideSensor12updateStatusEv+0x52>
			}
			else{
				cnt_r = 0;
 8005578:	4b64      	ldr	r3, [pc, #400]	; (800570c <_ZN10SideSensor12updateStatusEv+0x1e0>)
 800557a:	2200      	movs	r2, #0
 800557c:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_r >= 5){
 800557e:	4b63      	ldr	r3, [pc, #396]	; (800570c <_ZN10SideSensor12updateStatusEv+0x1e0>)
 8005580:	881b      	ldrh	r3, [r3, #0]
 8005582:	2b04      	cmp	r3, #4
 8005584:	d945      	bls.n	8005612 <_ZN10SideSensor12updateStatusEv+0xe6>
				status_ |= 0x01;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	881b      	ldrh	r3, [r3, #0]
 800558a:	f043 0301 	orr.w	r3, r3, #1
 800558e:	b29a      	uxth	r2, r3
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	801a      	strh	r2, [r3, #0]
				status_R_ = true;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2201      	movs	r2, #1
 8005598:	70da      	strb	r2, [r3, #3]
				white_flag1 = true;
 800559a:	4b5a      	ldr	r3, [pc, #360]	; (8005704 <_ZN10SideSensor12updateStatusEv+0x1d8>)
 800559c:	2201      	movs	r2, #1
 800559e:	701a      	strb	r2, [r3, #0]
				cnt_r = 0;
 80055a0:	4b5a      	ldr	r3, [pc, #360]	; (800570c <_ZN10SideSensor12updateStatusEv+0x1e0>)
 80055a2:	2200      	movs	r2, #0
 80055a4:	801a      	strh	r2, [r3, #0]
 80055a6:	e034      	b.n	8005612 <_ZN10SideSensor12updateStatusEv+0xe6>
			}

		}
		else if(white_flag1 == true){
 80055a8:	4b56      	ldr	r3, [pc, #344]	; (8005704 <_ZN10SideSensor12updateStatusEv+0x1d8>)
 80055aa:	781b      	ldrb	r3, [r3, #0]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d030      	beq.n	8005612 <_ZN10SideSensor12updateStatusEv+0xe6>
			if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_2)){
 80055b0:	2104      	movs	r1, #4
 80055b2:	4855      	ldr	r0, [pc, #340]	; (8005708 <_ZN10SideSensor12updateStatusEv+0x1dc>)
 80055b4:	f005 fb5e 	bl	800ac74 <HAL_GPIO_ReadPin>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	bf14      	ite	ne
 80055be:	2301      	movne	r3, #1
 80055c0:	2300      	moveq	r3, #0
 80055c2:	b2db      	uxtb	r3, r3
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d006      	beq.n	80055d6 <_ZN10SideSensor12updateStatusEv+0xaa>
				cnt_r++;
 80055c8:	4b50      	ldr	r3, [pc, #320]	; (800570c <_ZN10SideSensor12updateStatusEv+0x1e0>)
 80055ca:	881b      	ldrh	r3, [r3, #0]
 80055cc:	3301      	adds	r3, #1
 80055ce:	b29a      	uxth	r2, r3
 80055d0:	4b4e      	ldr	r3, [pc, #312]	; (800570c <_ZN10SideSensor12updateStatusEv+0x1e0>)
 80055d2:	801a      	strh	r2, [r3, #0]
 80055d4:	e002      	b.n	80055dc <_ZN10SideSensor12updateStatusEv+0xb0>
			}
			else{
				cnt_r = 0;
 80055d6:	4b4d      	ldr	r3, [pc, #308]	; (800570c <_ZN10SideSensor12updateStatusEv+0x1e0>)
 80055d8:	2200      	movs	r2, #0
 80055da:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_r >= 5){
 80055dc:	4b4b      	ldr	r3, [pc, #300]	; (800570c <_ZN10SideSensor12updateStatusEv+0x1e0>)
 80055de:	881b      	ldrh	r3, [r3, #0]
 80055e0:	2b04      	cmp	r3, #4
 80055e2:	d916      	bls.n	8005612 <_ZN10SideSensor12updateStatusEv+0xe6>
				status_ ^= 0x01;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	881b      	ldrh	r3, [r3, #0]
 80055e8:	f083 0301 	eor.w	r3, r3, #1
 80055ec:	b29a      	uxth	r2, r3
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	801a      	strh	r2, [r3, #0]
				status_R_ = false;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2200      	movs	r2, #0
 80055f6:	70da      	strb	r2, [r3, #3]
				white_flag1 = false;
 80055f8:	4b42      	ldr	r3, [pc, #264]	; (8005704 <_ZN10SideSensor12updateStatusEv+0x1d8>)
 80055fa:	2200      	movs	r2, #0
 80055fc:	701a      	strb	r2, [r3, #0]

				white_line_cnt_r_++;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	88db      	ldrh	r3, [r3, #6]
 8005602:	3301      	adds	r3, #1
 8005604:	b29a      	uxth	r2, r3
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	80da      	strh	r2, [r3, #6]
				mon_cnt_r = white_line_cnt_r_;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	88da      	ldrh	r2, [r3, #6]
 800560e:	4b40      	ldr	r3, [pc, #256]	; (8005710 <_ZN10SideSensor12updateStatusEv+0x1e4>)
 8005610:	801a      	strh	r2, [r3, #0]
			}
		}


		if(white_flag2 == false){
 8005612:	4b40      	ldr	r3, [pc, #256]	; (8005714 <_ZN10SideSensor12updateStatusEv+0x1e8>)
 8005614:	781b      	ldrb	r3, [r3, #0]
 8005616:	f083 0301 	eor.w	r3, r3, #1
 800561a:	b2db      	uxtb	r3, r3
 800561c:	2b00      	cmp	r3, #0
 800561e:	d02a      	beq.n	8005676 <_ZN10SideSensor12updateStatusEv+0x14a>
			if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_8)){
 8005620:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005624:	483c      	ldr	r0, [pc, #240]	; (8005718 <_ZN10SideSensor12updateStatusEv+0x1ec>)
 8005626:	f005 fb25 	bl	800ac74 <HAL_GPIO_ReadPin>
 800562a:	4603      	mov	r3, r0
 800562c:	2b00      	cmp	r3, #0
 800562e:	bf0c      	ite	eq
 8005630:	2301      	moveq	r3, #1
 8005632:	2300      	movne	r3, #0
 8005634:	b2db      	uxtb	r3, r3
 8005636:	2b00      	cmp	r3, #0
 8005638:	d006      	beq.n	8005648 <_ZN10SideSensor12updateStatusEv+0x11c>
				cnt_l++;
 800563a:	4b38      	ldr	r3, [pc, #224]	; (800571c <_ZN10SideSensor12updateStatusEv+0x1f0>)
 800563c:	881b      	ldrh	r3, [r3, #0]
 800563e:	3301      	adds	r3, #1
 8005640:	b29a      	uxth	r2, r3
 8005642:	4b36      	ldr	r3, [pc, #216]	; (800571c <_ZN10SideSensor12updateStatusEv+0x1f0>)
 8005644:	801a      	strh	r2, [r3, #0]
 8005646:	e002      	b.n	800564e <_ZN10SideSensor12updateStatusEv+0x122>
			}
			else{
				cnt_l = 0;
 8005648:	4b34      	ldr	r3, [pc, #208]	; (800571c <_ZN10SideSensor12updateStatusEv+0x1f0>)
 800564a:	2200      	movs	r2, #0
 800564c:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_l >= 5){
 800564e:	4b33      	ldr	r3, [pc, #204]	; (800571c <_ZN10SideSensor12updateStatusEv+0x1f0>)
 8005650:	881b      	ldrh	r3, [r3, #0]
 8005652:	2b04      	cmp	r3, #4
 8005654:	d90f      	bls.n	8005676 <_ZN10SideSensor12updateStatusEv+0x14a>
				status_ |= 0x02;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	881b      	ldrh	r3, [r3, #0]
 800565a:	f043 0302 	orr.w	r3, r3, #2
 800565e:	b29a      	uxth	r2, r3
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	801a      	strh	r2, [r3, #0]
				status_L_ = true;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2201      	movs	r2, #1
 8005668:	709a      	strb	r2, [r3, #2]
				white_flag2 = true;
 800566a:	4b2a      	ldr	r3, [pc, #168]	; (8005714 <_ZN10SideSensor12updateStatusEv+0x1e8>)
 800566c:	2201      	movs	r2, #1
 800566e:	701a      	strb	r2, [r3, #0]
				cnt_l = 0;
 8005670:	4b2a      	ldr	r3, [pc, #168]	; (800571c <_ZN10SideSensor12updateStatusEv+0x1f0>)
 8005672:	2200      	movs	r2, #0
 8005674:	801a      	strh	r2, [r3, #0]
			}

		}
		if(white_flag2 == true){
 8005676:	4b27      	ldr	r3, [pc, #156]	; (8005714 <_ZN10SideSensor12updateStatusEv+0x1e8>)
 8005678:	781b      	ldrb	r3, [r3, #0]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d031      	beq.n	80056e2 <_ZN10SideSensor12updateStatusEv+0x1b6>
			if(HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_8)){
 800567e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005682:	4825      	ldr	r0, [pc, #148]	; (8005718 <_ZN10SideSensor12updateStatusEv+0x1ec>)
 8005684:	f005 faf6 	bl	800ac74 <HAL_GPIO_ReadPin>
 8005688:	4603      	mov	r3, r0
 800568a:	2b00      	cmp	r3, #0
 800568c:	bf14      	ite	ne
 800568e:	2301      	movne	r3, #1
 8005690:	2300      	moveq	r3, #0
 8005692:	b2db      	uxtb	r3, r3
 8005694:	2b00      	cmp	r3, #0
 8005696:	d006      	beq.n	80056a6 <_ZN10SideSensor12updateStatusEv+0x17a>
				cnt_l++;
 8005698:	4b20      	ldr	r3, [pc, #128]	; (800571c <_ZN10SideSensor12updateStatusEv+0x1f0>)
 800569a:	881b      	ldrh	r3, [r3, #0]
 800569c:	3301      	adds	r3, #1
 800569e:	b29a      	uxth	r2, r3
 80056a0:	4b1e      	ldr	r3, [pc, #120]	; (800571c <_ZN10SideSensor12updateStatusEv+0x1f0>)
 80056a2:	801a      	strh	r2, [r3, #0]
 80056a4:	e002      	b.n	80056ac <_ZN10SideSensor12updateStatusEv+0x180>
			}
			else{
				cnt_l = 0;
 80056a6:	4b1d      	ldr	r3, [pc, #116]	; (800571c <_ZN10SideSensor12updateStatusEv+0x1f0>)
 80056a8:	2200      	movs	r2, #0
 80056aa:	801a      	strh	r2, [r3, #0]
			}
			if(cnt_l >= 5){
 80056ac:	4b1b      	ldr	r3, [pc, #108]	; (800571c <_ZN10SideSensor12updateStatusEv+0x1f0>)
 80056ae:	881b      	ldrh	r3, [r3, #0]
 80056b0:	2b04      	cmp	r3, #4
 80056b2:	d916      	bls.n	80056e2 <_ZN10SideSensor12updateStatusEv+0x1b6>
				status_ ^= 0x02;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	881b      	ldrh	r3, [r3, #0]
 80056b8:	f083 0302 	eor.w	r3, r3, #2
 80056bc:	b29a      	uxth	r2, r3
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	801a      	strh	r2, [r3, #0]
				status_L_ = false;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	709a      	strb	r2, [r3, #2]
				white_flag2 = false;
 80056c8:	4b12      	ldr	r3, [pc, #72]	; (8005714 <_ZN10SideSensor12updateStatusEv+0x1e8>)
 80056ca:	2200      	movs	r2, #0
 80056cc:	701a      	strb	r2, [r3, #0]

				white_line_cnt_l_++;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	889b      	ldrh	r3, [r3, #4]
 80056d2:	3301      	adds	r3, #1
 80056d4:	b29a      	uxth	r2, r3
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	809a      	strh	r2, [r3, #4]
				mon_cnt_l = white_line_cnt_l_;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	889a      	ldrh	r2, [r3, #4]
 80056de:	4b10      	ldr	r3, [pc, #64]	; (8005720 <_ZN10SideSensor12updateStatusEv+0x1f4>)
 80056e0:	801a      	strh	r2, [r3, #0]
			}

		}

		mon_status = status_;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	881a      	ldrh	r2, [r3, #0]
 80056e6:	4b0f      	ldr	r3, [pc, #60]	; (8005724 <_ZN10SideSensor12updateStatusEv+0x1f8>)
 80056e8:	801a      	strh	r2, [r3, #0]
		mon_status_L = status_L_;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	789a      	ldrb	r2, [r3, #2]
 80056ee:	4b0e      	ldr	r3, [pc, #56]	; (8005728 <_ZN10SideSensor12updateStatusEv+0x1fc>)
 80056f0:	701a      	strb	r2, [r3, #0]
		mon_status_R = status_R_;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	78da      	ldrb	r2, [r3, #3]
 80056f6:	4b0d      	ldr	r3, [pc, #52]	; (800572c <_ZN10SideSensor12updateStatusEv+0x200>)
 80056f8:	701a      	strb	r2, [r3, #0]
	}

}
 80056fa:	bf00      	nop
 80056fc:	3708      	adds	r7, #8
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}
 8005702:	bf00      	nop
 8005704:	200002dc 	.word	0x200002dc
 8005708:	40021000 	.word	0x40021000
 800570c:	200002e0 	.word	0x200002e0
 8005710:	200002da 	.word	0x200002da
 8005714:	200002dd 	.word	0x200002dd
 8005718:	40020c00 	.word	0x40020c00
 800571c:	200002de 	.word	0x200002de
 8005720:	200002d8 	.word	0x200002d8
 8005724:	200002d4 	.word	0x200002d4
 8005728:	200002d6 	.word	0x200002d6
 800572c:	200002d7 	.word	0x200002d7

08005730 <_ZN10SideSensor10getStatusLEv>:
{
	return status_;
}

bool SideSensor::getStatusL()
{
 8005730:	b480      	push	{r7}
 8005732:	b083      	sub	sp, #12
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
	return status_L_;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	789b      	ldrb	r3, [r3, #2]
}
 800573c:	4618      	mov	r0, r3
 800573e:	370c      	adds	r7, #12
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr

08005748 <_ZN10SideSensor16getWhiteLineCntREv>:
{
	return white_line_cnt_l_;
}

uint16_t SideSensor::getWhiteLineCntR()
{
 8005748:	b480      	push	{r7}
 800574a:	b083      	sub	sp, #12
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
	return white_line_cnt_r_;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	88db      	ldrh	r3, [r3, #6]
}
 8005754:	4618      	mov	r0, r3
 8005756:	370c      	adds	r7, #12
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr

08005760 <_ZN10SideSensor17resetWhiteLineCntEv>:

void SideSensor::resetWhiteLineCnt()
{
 8005760:	b480      	push	{r7}
 8005762:	b083      	sub	sp, #12
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
	white_line_cnt_l_ = 0;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2200      	movs	r2, #0
 800576c:	809a      	strh	r2, [r3, #4]
	white_line_cnt_r_ = 0;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2200      	movs	r2, #0
 8005772:	80da      	strh	r2, [r3, #6]
}
 8005774:	bf00      	nop
 8005776:	370c      	adds	r7, #12
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr

08005780 <_ZN10SideSensor12enableIgnoreEv>:

void SideSensor::enableIgnore()
{
 8005780:	b480      	push	{r7}
 8005782:	b083      	sub	sp, #12
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
	ignore_flag_ = true;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2201      	movs	r2, #1
 800578c:	721a      	strb	r2, [r3, #8]
}
 800578e:	bf00      	nop
 8005790:	370c      	adds	r7, #12
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr

0800579a <_ZN10SideSensor13disableIgnoreEv>:

void SideSensor::disableIgnore()
{
 800579a:	b480      	push	{r7}
 800579c:	b083      	sub	sp, #12
 800579e:	af00      	add	r7, sp, #0
 80057a0:	6078      	str	r0, [r7, #4]
	ignore_flag_ = false;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2200      	movs	r2, #0
 80057a6:	721a      	strb	r2, [r3, #8]
}
 80057a8:	bf00      	nop
 80057aa:	370c      	adds	r7, #12
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr

080057b4 <_ZN10SideSensor13getIgnoreFlagEv>:

bool SideSensor::getIgnoreFlag()
{
 80057b4:	b480      	push	{r7}
 80057b6:	b083      	sub	sp, #12
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
	return ignore_flag_;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	7a1b      	ldrb	r3, [r3, #8]
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	370c      	adds	r7, #12
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr

080057cc <_ZN20SystemIdentificationC1EP6LoggerP5Motor>:

#include "SystemIdentification.hpp"

float mon_msig;

SystemIdentification::SystemIdentification(Logger *logger, Motor *motor) : msigArrayIdx_(0), inputVal_(0), processing_flag_(false)
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b084      	sub	sp, #16
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	60f8      	str	r0, [r7, #12]
 80057d4:	60b9      	str	r1, [r7, #8]
 80057d6:	607a      	str	r2, [r7, #4]
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	4a10      	ldr	r2, [pc, #64]	; (800581c <_ZN20SystemIdentificationC1EP6LoggerP5Motor+0x50>)
 80057dc:	3308      	adds	r3, #8
 80057de:	4611      	mov	r1, r2
 80057e0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80057e4:	4618      	mov	r0, r3
 80057e6:	f00f fd3b 	bl	8015260 <memcpy>
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2200      	movs	r2, #0
 80057ee:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	f04f 0200 	mov.w	r2, #0
 80057f8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	2200      	movs	r2, #0
 8005800:	f883 2208 	strb.w	r2, [r3, #520]	; 0x208
{
	logger_ = logger;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	68ba      	ldr	r2, [r7, #8]
 8005808:	601a      	str	r2, [r3, #0]
	motor_ = motor;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	687a      	ldr	r2, [r7, #4]
 800580e:	605a      	str	r2, [r3, #4]
	//msigItr_ = msigArray_.begin();
}
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	4618      	mov	r0, r3
 8005814:	3710      	adds	r7, #16
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}
 800581a:	bf00      	nop
 800581c:	08019814 	.word	0x08019814

08005820 <_ZN20SystemIdentification13inOutputStoreEf>:
{

}

void SystemIdentification::inOutputStore(float output)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b082      	sub	sp, #8
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	ed87 0a00 	vstr	s0, [r7]
	if(processing_flag_ == true){
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 8005832:	2b00      	cmp	r3, #0
 8005834:	d010      	beq.n	8005858 <_ZN20SystemIdentification13inOutputStoreEf+0x38>
		logger_->storeLog(output);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	ed97 0a00 	vldr	s0, [r7]
 800583e:	4618      	mov	r0, r3
 8005840:	f7fe ffa4 	bl	800478c <_ZN6Logger8storeLogEf>
		logger_->storeLog2(inputVal_);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681a      	ldr	r2, [r3, #0]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	edd3 7a80 	vldr	s15, [r3, #512]	; 0x200
 800584e:	eeb0 0a67 	vmov.f32	s0, s15
 8005852:	4610      	mov	r0, r2
 8005854:	f7fe ffd1 	bl	80047fa <_ZN6Logger9storeLog2Ef>
	}

}
 8005858:	bf00      	nop
 800585a:	3708      	adds	r7, #8
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}

08005860 <_ZN20SystemIdentification10updateMsigEv>:
	logger_->saveLogs("sysident", "MSIGRES.txt");
	logger_->saveLogs2("sysident", "INPUT.txt");
}

void SystemIdentification::updateMsig()
{
 8005860:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005862:	b083      	sub	sp, #12
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
	if(processing_flag_ == true){
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	f893 3208 	ldrb.w	r3, [r3, #520]	; 0x208
 800586e:	2b00      	cmp	r3, #0
 8005870:	d046      	beq.n	8005900 <_ZN20SystemIdentification10updateMsigEv+0xa0>
		inputVal_ = inputRatio_ * msigArray_[msigArrayIdx_];
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	ed93 7a81 	vldr	s14, [r3, #516]	; 0x204
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 800587e:	461a      	mov	r2, r3
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	3204      	adds	r2, #4
 8005884:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8005888:	ee07 3a90 	vmov	s15, r3
 800588c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005890:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	edc3 7a80 	vstr	s15, [r3, #512]	; 0x200
		msigArrayIdx_++;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 80058a0:	3301      	adds	r3, #1
 80058a2:	b29a      	uxth	r2, r3
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc
		mon_msig = inputVal_;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80058b0:	4a15      	ldr	r2, [pc, #84]	; (8005908 <_ZN20SystemIdentification10updateMsigEv+0xa8>)
 80058b2:	6013      	str	r3, [r2, #0]

		if(msigArrayIdx_ >= MSIG_SIZE) msigArrayIdx_ = MSIG_SIZE;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f8b3 31fc 	ldrh.w	r3, [r3, #508]	; 0x1fc
 80058ba:	2bf9      	cmp	r3, #249	; 0xf9
 80058bc:	d903      	bls.n	80058c6 <_ZN20SystemIdentification10updateMsigEv+0x66>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	22fa      	movs	r2, #250	; 0xfa
 80058c2:	f8a3 21fc 	strh.w	r2, [r3, #508]	; 0x1fc

		motor_->setRatio(inputVal_, -inputVal_);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	685c      	ldr	r4, [r3, #4]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80058d0:	4618      	mov	r0, r3
 80058d2:	f7fa fe51 	bl	8000578 <__aeabi_f2d>
 80058d6:	4605      	mov	r5, r0
 80058d8:	460e      	mov	r6, r1
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	edd3 7a80 	vldr	s15, [r3, #512]	; 0x200
 80058e0:	eef1 7a67 	vneg.f32	s15, s15
 80058e4:	ee17 3a90 	vmov	r3, s15
 80058e8:	4618      	mov	r0, r3
 80058ea:	f7fa fe45 	bl	8000578 <__aeabi_f2d>
 80058ee:	4602      	mov	r2, r0
 80058f0:	460b      	mov	r3, r1
 80058f2:	ec43 2b11 	vmov	d1, r2, r3
 80058f6:	ec46 5b10 	vmov	d0, r5, r6
 80058fa:	4620      	mov	r0, r4
 80058fc:	f7ff fa7c 	bl	8004df8 <_ZN5Motor8setRatioEdd>

	}

}
 8005900:	bf00      	nop
 8005902:	370c      	adds	r7, #12
 8005904:	46bd      	mov	sp, r7
 8005906:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005908:	200002e4 	.word	0x200002e4

0800590c <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>:

#include "VelocityCtrl.hpp"
//#include "ICM_20648.h"
#include <stdio.h>

VelocityCtrl::VelocityCtrl(Motor *motor, Encoder *encoder, IMU *imu) :
 800590c:	b480      	push	{r7}
 800590e:	b085      	sub	sp, #20
 8005910:	af00      	add	r7, sp, #0
 8005912:	60f8      	str	r0, [r7, #12]
 8005914:	60b9      	str	r1, [r7, #8]
 8005916:	607a      	str	r2, [r7, #4]
 8005918:	603b      	str	r3, [r7, #0]
target_velocity_(0), target_omega_(0), current_velocity_(0), current_omega_(0), v_kp_(0), v_kd_(0), v_ki_(0),
	o_kp_(0), o_kd_(0), o_ki_(0), excution_flag_(false), i_reset_flag_(false), rotation_ratio_(0)
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	f04f 0200 	mov.w	r2, #0
 8005920:	601a      	str	r2, [r3, #0]
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	f04f 0200 	mov.w	r2, #0
 8005928:	605a      	str	r2, [r3, #4]
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	f04f 0200 	mov.w	r2, #0
 8005930:	609a      	str	r2, [r3, #8]
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	f04f 0200 	mov.w	r2, #0
 8005938:	60da      	str	r2, [r3, #12]
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	f04f 0200 	mov.w	r2, #0
 8005940:	611a      	str	r2, [r3, #16]
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	f04f 0200 	mov.w	r2, #0
 8005948:	615a      	str	r2, [r3, #20]
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	f04f 0200 	mov.w	r2, #0
 8005950:	619a      	str	r2, [r3, #24]
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	f04f 0200 	mov.w	r2, #0
 8005958:	61da      	str	r2, [r3, #28]
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	f04f 0200 	mov.w	r2, #0
 8005960:	621a      	str	r2, [r3, #32]
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	f04f 0200 	mov.w	r2, #0
 8005968:	625a      	str	r2, [r3, #36]	; 0x24
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2200      	movs	r2, #0
 800596e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2200      	movs	r2, #0
 8005976:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	f04f 0200 	mov.w	r2, #0
 8005980:	62da      	str	r2, [r3, #44]	; 0x2c
{
	motor_ = motor;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	68ba      	ldr	r2, [r7, #8]
 8005986:	631a      	str	r2, [r3, #48]	; 0x30
	encoder_ = encoder;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	687a      	ldr	r2, [r7, #4]
 800598c:	635a      	str	r2, [r3, #52]	; 0x34
	imu_ = imu;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	683a      	ldr	r2, [r7, #0]
 8005992:	639a      	str	r2, [r3, #56]	; 0x38

}
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	4618      	mov	r0, r3
 8005998:	3714      	adds	r7, #20
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr
 80059a2:	0000      	movs	r0, r0
 80059a4:	0000      	movs	r0, r0
	...

080059a8 <_ZN12VelocityCtrl12calcVelocityEv>:

// ---------private ---------//

float VelocityCtrl::calcVelocity()
{
 80059a8:	b590      	push	{r4, r7, lr}
 80059aa:	b087      	sub	sp, #28
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
	float enc_l, enc_r;
	encoder_->getCnt(enc_l, enc_r);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059b4:	f107 020c 	add.w	r2, r7, #12
 80059b8:	f107 0110 	add.w	r1, r7, #16
 80059bc:	4618      	mov	r0, r3
 80059be:	f7fb fe5f 	bl	8001680 <_ZN7Encoder6getCntERfS0_>
	float enc_cnt = (enc_l + enc_r) / 2;
 80059c2:	ed97 7a04 	vldr	s14, [r7, #16]
 80059c6:	edd7 7a03 	vldr	s15, [r7, #12]
 80059ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80059ce:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80059d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80059d6:	edc7 7a05 	vstr	s15, [r7, #20]

	current_velocity_ = VELOCITY_PER_CNT * enc_cnt;
 80059da:	6978      	ldr	r0, [r7, #20]
 80059dc:	f7fa fdcc 	bl	8000578 <__aeabi_f2d>
 80059e0:	a30b      	add	r3, pc, #44	; (adr r3, 8005a10 <_ZN12VelocityCtrl12calcVelocityEv+0x68>)
 80059e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059e6:	f7fa fe1f 	bl	8000628 <__aeabi_dmul>
 80059ea:	4603      	mov	r3, r0
 80059ec:	460c      	mov	r4, r1
 80059ee:	4618      	mov	r0, r3
 80059f0:	4621      	mov	r1, r4
 80059f2:	f7fb f911 	bl	8000c18 <__aeabi_d2f>
 80059f6:	4602      	mov	r2, r0
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	609a      	str	r2, [r3, #8]

	return current_velocity_;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	ee07 3a90 	vmov	s15, r3
}
 8005a04:	eeb0 0a67 	vmov.f32	s0, s15
 8005a08:	371c      	adds	r7, #28
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd90      	pop	{r4, r7, pc}
 8005a0e:	bf00      	nop
 8005a10:	1ab1d998 	.word	0x1ab1d998
 8005a14:	3f7830b5 	.word	0x3f7830b5

08005a18 <_ZN12VelocityCtrl18pidTranslationOnlyEv>:
	v_pre_diff = v_diff;
	o_pre_diff = o_diff;
}

void VelocityCtrl::pidTranslationOnly()
{
 8005a18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a1a:	b087      	sub	sp, #28
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
	float static v_pre_diff;
	float v_diff = target_velocity_ - current_velocity_;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	ed93 7a00 	vldr	s14, [r3]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	edd3 7a02 	vldr	s15, [r3, #8]
 8005a2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005a30:	edc7 7a05 	vstr	s15, [r7, #20]

	float v_p, v_d ;
	static float v_i;

	if(i_reset_flag_ == true){
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d007      	beq.n	8005a4e <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x36>
		v_i = 0;
 8005a3e:	4b48      	ldr	r3, [pc, #288]	; (8005b60 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005a40:	f04f 0200 	mov.w	r2, #0
 8005a44:	601a      	str	r2, [r3, #0]
		i_reset_flag_ = false;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	}

	v_p = v_kp_ * v_diff;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	edd3 7a04 	vldr	s15, [r3, #16]
 8005a54:	ed97 7a05 	vldr	s14, [r7, #20]
 8005a58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a5c:	edc7 7a04 	vstr	s15, [r7, #16]
	v_i += v_ki_ * v_diff * DELTA_T;
 8005a60:	4b3f      	ldr	r3, [pc, #252]	; (8005b60 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4618      	mov	r0, r3
 8005a66:	f7fa fd87 	bl	8000578 <__aeabi_f2d>
 8005a6a:	4604      	mov	r4, r0
 8005a6c:	460d      	mov	r5, r1
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	ed93 7a06 	vldr	s14, [r3, #24]
 8005a74:	edd7 7a05 	vldr	s15, [r7, #20]
 8005a78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a7c:	ee17 0a90 	vmov	r0, s15
 8005a80:	f7fa fd7a 	bl	8000578 <__aeabi_f2d>
 8005a84:	a334      	add	r3, pc, #208	; (adr r3, 8005b58 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 8005a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a8a:	f7fa fdcd 	bl	8000628 <__aeabi_dmul>
 8005a8e:	4602      	mov	r2, r0
 8005a90:	460b      	mov	r3, r1
 8005a92:	4620      	mov	r0, r4
 8005a94:	4629      	mov	r1, r5
 8005a96:	f7fa fc11 	bl	80002bc <__adddf3>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	460c      	mov	r4, r1
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	4621      	mov	r1, r4
 8005aa2:	f7fb f8b9 	bl	8000c18 <__aeabi_d2f>
 8005aa6:	4602      	mov	r2, r0
 8005aa8:	4b2d      	ldr	r3, [pc, #180]	; (8005b60 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005aaa:	601a      	str	r2, [r3, #0]
	v_d = v_kd_ * (v_diff - v_pre_diff) / DELTA_T;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	ed93 7a05 	vldr	s14, [r3, #20]
 8005ab2:	4b2c      	ldr	r3, [pc, #176]	; (8005b64 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 8005ab4:	edd3 7a00 	vldr	s15, [r3]
 8005ab8:	edd7 6a05 	vldr	s13, [r7, #20]
 8005abc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005ac0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ac4:	ee17 0a90 	vmov	r0, s15
 8005ac8:	f7fa fd56 	bl	8000578 <__aeabi_f2d>
 8005acc:	a322      	add	r3, pc, #136	; (adr r3, 8005b58 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x140>)
 8005ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ad2:	f7fa fed3 	bl	800087c <__aeabi_ddiv>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	460c      	mov	r4, r1
 8005ada:	4618      	mov	r0, r3
 8005adc:	4621      	mov	r1, r4
 8005ade:	f7fb f89b 	bl	8000c18 <__aeabi_d2f>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	60fb      	str	r3, [r7, #12]

	float translation_ratio;

	translation_ratio =  v_p + v_d + v_i;
 8005ae6:	ed97 7a04 	vldr	s14, [r7, #16]
 8005aea:	edd7 7a03 	vldr	s15, [r7, #12]
 8005aee:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005af2:	4b1b      	ldr	r3, [pc, #108]	; (8005b60 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x148>)
 8005af4:	edd3 7a00 	vldr	s15, [r3]
 8005af8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005afc:	edc7 7a02 	vstr	s15, [r7, #8]

	motor_->setRatio(translation_ratio + rotation_ratio_, translation_ratio - rotation_ratio_);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8005b0a:	edd7 7a02 	vldr	s15, [r7, #8]
 8005b0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b12:	ee17 0a90 	vmov	r0, s15
 8005b16:	f7fa fd2f 	bl	8000578 <__aeabi_f2d>
 8005b1a:	4605      	mov	r5, r0
 8005b1c:	460e      	mov	r6, r1
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8005b24:	ed97 7a02 	vldr	s14, [r7, #8]
 8005b28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b2c:	ee17 0a90 	vmov	r0, s15
 8005b30:	f7fa fd22 	bl	8000578 <__aeabi_f2d>
 8005b34:	4602      	mov	r2, r0
 8005b36:	460b      	mov	r3, r1
 8005b38:	ec43 2b11 	vmov	d1, r2, r3
 8005b3c:	ec46 5b10 	vmov	d0, r5, r6
 8005b40:	4620      	mov	r0, r4
 8005b42:	f7ff f959 	bl	8004df8 <_ZN5Motor8setRatioEdd>

	v_pre_diff = v_diff;
 8005b46:	4a07      	ldr	r2, [pc, #28]	; (8005b64 <_ZN12VelocityCtrl18pidTranslationOnlyEv+0x14c>)
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	6013      	str	r3, [r2, #0]
}
 8005b4c:	bf00      	nop
 8005b4e:	371c      	adds	r7, #28
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b54:	f3af 8000 	nop.w
 8005b58:	d2f1a9fc 	.word	0xd2f1a9fc
 8005b5c:	3f50624d 	.word	0x3f50624d
 8005b60:	200002ec 	.word	0x200002ec
 8005b64:	200002e8 	.word	0x200002e8

08005b68 <_ZN12VelocityCtrl11setVelocityEff>:
{

}

void VelocityCtrl::setVelocity(float velocity, float omega)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b085      	sub	sp, #20
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	60f8      	str	r0, [r7, #12]
 8005b70:	ed87 0a02 	vstr	s0, [r7, #8]
 8005b74:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	68ba      	ldr	r2, [r7, #8]
 8005b7c:	601a      	str	r2, [r3, #0]
	target_omega_= omega;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	687a      	ldr	r2, [r7, #4]
 8005b82:	605a      	str	r2, [r3, #4]
}
 8005b84:	bf00      	nop
 8005b86:	3714      	adds	r7, #20
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr

08005b90 <_ZN12VelocityCtrl26setTranslationVelocityOnlyEff>:

void VelocityCtrl::setTranslationVelocityOnly(float velocity, float rotation_ratio)
{
 8005b90:	b480      	push	{r7}
 8005b92:	b085      	sub	sp, #20
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	60f8      	str	r0, [r7, #12]
 8005b98:	ed87 0a02 	vstr	s0, [r7, #8]
 8005b9c:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	68ba      	ldr	r2, [r7, #8]
 8005ba4:	601a      	str	r2, [r3, #0]
	rotation_ratio_ = rotation_ratio;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	687a      	ldr	r2, [r7, #4]
 8005baa:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005bac:	bf00      	nop
 8005bae:	3714      	adds	r7, #20
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr

08005bb8 <_ZN12VelocityCtrl15setVelocityGainEfff>:

void VelocityCtrl::setVelocityGain(float kp, float ki, float kd)
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b085      	sub	sp, #20
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	60f8      	str	r0, [r7, #12]
 8005bc0:	ed87 0a02 	vstr	s0, [r7, #8]
 8005bc4:	edc7 0a01 	vstr	s1, [r7, #4]
 8005bc8:	ed87 1a00 	vstr	s2, [r7]
	v_kp_ = kp;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	68ba      	ldr	r2, [r7, #8]
 8005bd0:	611a      	str	r2, [r3, #16]
	v_ki_ = ki;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	687a      	ldr	r2, [r7, #4]
 8005bd6:	619a      	str	r2, [r3, #24]
	v_kd_ = kd;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	683a      	ldr	r2, [r7, #0]
 8005bdc:	615a      	str	r2, [r3, #20]
}
 8005bde:	bf00      	nop
 8005be0:	3714      	adds	r7, #20
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr

08005bea <_ZN12VelocityCtrl12setOmegaGainEfff>:

void VelocityCtrl::setOmegaGain(float kp, float ki, float kd)
{
 8005bea:	b480      	push	{r7}
 8005bec:	b085      	sub	sp, #20
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	60f8      	str	r0, [r7, #12]
 8005bf2:	ed87 0a02 	vstr	s0, [r7, #8]
 8005bf6:	edc7 0a01 	vstr	s1, [r7, #4]
 8005bfa:	ed87 1a00 	vstr	s2, [r7]
	o_kp_ = kp;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	68ba      	ldr	r2, [r7, #8]
 8005c02:	61da      	str	r2, [r3, #28]
	o_ki_ = ki;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	687a      	ldr	r2, [r7, #4]
 8005c08:	625a      	str	r2, [r3, #36]	; 0x24
	o_kd_ = kd;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	683a      	ldr	r2, [r7, #0]
 8005c0e:	621a      	str	r2, [r3, #32]
}
 8005c10:	bf00      	nop
 8005c12:	3714      	adds	r7, #20
 8005c14:	46bd      	mov	sp, r7
 8005c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1a:	4770      	bx	lr

08005c1c <_ZN12VelocityCtrl4flipEv>:

void VelocityCtrl::flip()
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b082      	sub	sp, #8
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
    calcVelocity();
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f7ff febf 	bl	80059a8 <_ZN12VelocityCtrl12calcVelocityEv>
	//calcOmega();

	if(excution_flag_ == true){
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d002      	beq.n	8005c3a <_ZN12VelocityCtrl4flipEv+0x1e>
		//pid();
		pidTranslationOnly();
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f7ff feef 	bl	8005a18 <_ZN12VelocityCtrl18pidTranslationOnlyEv>
	}


}
 8005c3a:	bf00      	nop
 8005c3c:	3708      	adds	r7, #8
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}

08005c42 <_ZN12VelocityCtrl5startEv>:

void VelocityCtrl::start()
{
 8005c42:	b480      	push	{r7}
 8005c44:	b083      	sub	sp, #12
 8005c46:	af00      	add	r7, sp, #0
 8005c48:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	i_reset_flag_ = true;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2201      	movs	r2, #1
 8005c56:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	//calcOmega();
}
 8005c5a:	bf00      	nop
 8005c5c:	370c      	adds	r7, #12
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c64:	4770      	bx	lr
	...

08005c68 <_ZN12VelocityCtrl4stopEv>:

void VelocityCtrl::stop()
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b082      	sub	sp, #8
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2200      	movs	r2, #0
 8005c74:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	motor_->setRatio(0, 0);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c7c:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8005c98 <_ZN12VelocityCtrl4stopEv+0x30>
 8005c80:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8005c98 <_ZN12VelocityCtrl4stopEv+0x30>
 8005c84:	4618      	mov	r0, r3
 8005c86:	f7ff f8b7 	bl	8004df8 <_ZN5Motor8setRatioEdd>

}
 8005c8a:	bf00      	nop
 8005c8c:	3708      	adds	r7, #8
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}
 8005c92:	bf00      	nop
 8005c94:	f3af 8000 	nop.w
	...

08005ca0 <_ZN12VelocityCtrl18getCurrentVelocityEv>:

float VelocityCtrl::getCurrentVelocity()
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b083      	sub	sp, #12
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
	return current_velocity_;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	ee07 3a90 	vmov	s15, r3
}
 8005cb0:	eeb0 0a67 	vmov.f32	s0, s15
 8005cb4:	370c      	adds	r7, #12
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbc:	4770      	bx	lr
	...

08005cc0 <HAL_TIM_PeriodElapsedCallback>:
	cppExit(GPIO_Pin);
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b082      	sub	sp, #8
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7){
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a1e      	ldr	r2, [pc, #120]	; (8005d48 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d10e      	bne.n	8005cf0 <HAL_TIM_PeriodElapsedCallback+0x30>
		cppFlip100ns();
 8005cd2:	f001 fe2b 	bl	800792c <cppFlip100ns>

		tim7_timer++;
 8005cd6:	4b1d      	ldr	r3, [pc, #116]	; (8005d4c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	3301      	adds	r3, #1
 8005cdc:	4a1b      	ldr	r2, [pc, #108]	; (8005d4c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005cde:	6013      	str	r3, [r2, #0]
		if(tim7_timer >= 100000) tim7_timer = 0;
 8005ce0:	4b1a      	ldr	r3, [pc, #104]	; (8005d4c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a1a      	ldr	r2, [pc, #104]	; (8005d50 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d902      	bls.n	8005cf0 <HAL_TIM_PeriodElapsedCallback+0x30>
 8005cea:	4b18      	ldr	r3, [pc, #96]	; (8005d4c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8005cec:	2200      	movs	r2, #0
 8005cee:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM6){
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a17      	ldr	r2, [pc, #92]	; (8005d54 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d10e      	bne.n	8005d18 <HAL_TIM_PeriodElapsedCallback+0x58>
		cppFlip1ms();
 8005cfa:	f001 fdcd 	bl	8007898 <cppFlip1ms>

		tim6_timer++;
 8005cfe:	4b16      	ldr	r3, [pc, #88]	; (8005d58 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	3301      	adds	r3, #1
 8005d04:	4a14      	ldr	r2, [pc, #80]	; (8005d58 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005d06:	6013      	str	r3, [r2, #0]
		if(tim6_timer >= 100000) tim6_timer = 0;
 8005d08:	4b13      	ldr	r3, [pc, #76]	; (8005d58 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a10      	ldr	r2, [pc, #64]	; (8005d50 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d902      	bls.n	8005d18 <HAL_TIM_PeriodElapsedCallback+0x58>
 8005d12:	4b11      	ldr	r3, [pc, #68]	; (8005d58 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8005d14:	2200      	movs	r2, #0
 8005d16:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM13){
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a0f      	ldr	r2, [pc, #60]	; (8005d5c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d10e      	bne.n	8005d40 <HAL_TIM_PeriodElapsedCallback+0x80>
		cppFlip10ms();
 8005d22:	f001 fe0d 	bl	8007940 <cppFlip10ms>

		tim13_timer++;
 8005d26:	4b0e      	ldr	r3, [pc, #56]	; (8005d60 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	3301      	adds	r3, #1
 8005d2c:	4a0c      	ldr	r2, [pc, #48]	; (8005d60 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005d2e:	6013      	str	r3, [r2, #0]
		if(tim13_timer >= 100000) tim13_timer = 0;
 8005d30:	4b0b      	ldr	r3, [pc, #44]	; (8005d60 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a06      	ldr	r2, [pc, #24]	; (8005d50 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d902      	bls.n	8005d40 <HAL_TIM_PeriodElapsedCallback+0x80>
 8005d3a:	4b09      	ldr	r3, [pc, #36]	; (8005d60 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	601a      	str	r2, [r3, #0]
	}

}
 8005d40:	bf00      	nop
 8005d42:	3708      	adds	r7, #8
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}
 8005d48:	40001400 	.word	0x40001400
 8005d4c:	200448d8 	.word	0x200448d8
 8005d50:	0001869f 	.word	0x0001869f
 8005d54:	40001000 	.word	0x40001000
 8005d58:	20044894 	.word	0x20044894
 8005d5c:	40001c00 	.word	0x40001c00
 8005d60:	200448dc 	.word	0x200448dc

08005d64 <init>:

void init()
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	af00      	add	r7, sp, #0
	// ------initialize------//
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET); // sensor led ON
 8005d68:	2201      	movs	r2, #1
 8005d6a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005d6e:	4808      	ldr	r0, [pc, #32]	; (8005d90 <init+0x2c>)
 8005d70:	f004 ff98 	bl	800aca4 <HAL_GPIO_WritePin>

	// timer interrpt in start
	HAL_TIM_Base_Start_IT(&htim6);
 8005d74:	4807      	ldr	r0, [pc, #28]	; (8005d94 <init+0x30>)
 8005d76:	f008 fe60 	bl	800ea3a <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8005d7a:	4807      	ldr	r0, [pc, #28]	; (8005d98 <init+0x34>)
 8005d7c:	f008 fe5d 	bl	800ea3a <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim13);
 8005d80:	4806      	ldr	r0, [pc, #24]	; (8005d9c <init+0x38>)
 8005d82:	f008 fe5a 	bl	800ea3a <HAL_TIM_Base_Start_IT>

	cppInit();
 8005d86:	f001 fce3 	bl	8007750 <cppInit>

	//path_following_initialize();

}
 8005d8a:	bf00      	nop
 8005d8c:	bd80      	pop	{r7, pc}
 8005d8e:	bf00      	nop
 8005d90:	40021000 	.word	0x40021000
 8005d94:	200449c0 	.word	0x200449c0
 8005d98:	20044b64 	.word	0x20044b64
 8005d9c:	200448e0 	.word	0x200448e0

08005da0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005da4:	f003 fc76 	bl	8009694 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005da8:	f000 f82a 	bl	8005e00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005dac:	f000 fdbc 	bl	8006928 <MX_GPIO_Init>
  MX_DMA_Init();
 8005db0:	f000 fd8a 	bl	80068c8 <MX_DMA_Init>
  MX_I2C2_Init();
 8005db4:	f000 f9e8 	bl	8006188 <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 8005db8:	f000 fa14 	bl	80061e4 <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 8005dbc:	f000 fa32 	bl	8006224 <MX_SPI2_Init>
  MX_TIM1_Init();
 8005dc0:	f000 fa66 	bl	8006290 <MX_TIM1_Init>
  MX_TIM4_Init();
 8005dc4:	f000 fb70 	bl	80064a8 <MX_TIM4_Init>
  MX_TIM8_Init();
 8005dc8:	f000 fc3c 	bl	8006644 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 8005dcc:	f000 fd52 	bl	8006874 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8005dd0:	f00a fe06 	bl	80109e0 <MX_FATFS_Init>
  MX_TIM6_Init();
 8005dd4:	f000 fbcc 	bl	8006570 <MX_TIM6_Init>
  MX_I2C1_Init();
 8005dd8:	f000 f9a8 	bl	800612c <MX_I2C1_Init>
  MX_TIM3_Init();
 8005ddc:	f000 fb00 	bl	80063e0 <MX_TIM3_Init>
  MX_TIM10_Init();
 8005de0:	f000 fc88 	bl	80066f4 <MX_TIM10_Init>
  MX_TIM11_Init();
 8005de4:	f000 fcd4 	bl	8006790 <MX_TIM11_Init>
  MX_ADC2_Init();
 8005de8:	f000 f898 	bl	8005f1c <MX_ADC2_Init>
  MX_TIM7_Init();
 8005dec:	f000 fbf6 	bl	80065dc <MX_TIM7_Init>
  MX_TIM13_Init();
 8005df0:	f000 fd1c 	bl	800682c <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  init();
 8005df4:	f7ff ffb6 	bl	8005d64 <init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  cppLoop();
 8005df8:	f001 fdce 	bl	8007998 <cppLoop>
 8005dfc:	e7fc      	b.n	8005df8 <main+0x58>
	...

08005e00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b0a4      	sub	sp, #144	; 0x90
 8005e04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005e06:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005e0a:	2234      	movs	r2, #52	; 0x34
 8005e0c:	2100      	movs	r1, #0
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f00f fa31 	bl	8015276 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005e14:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005e18:	2200      	movs	r2, #0
 8005e1a:	601a      	str	r2, [r3, #0]
 8005e1c:	605a      	str	r2, [r3, #4]
 8005e1e:	609a      	str	r2, [r3, #8]
 8005e20:	60da      	str	r2, [r3, #12]
 8005e22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005e24:	f107 030c 	add.w	r3, r7, #12
 8005e28:	223c      	movs	r2, #60	; 0x3c
 8005e2a:	2100      	movs	r1, #0
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f00f fa22 	bl	8015276 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005e32:	2300      	movs	r3, #0
 8005e34:	60bb      	str	r3, [r7, #8]
 8005e36:	4b37      	ldr	r3, [pc, #220]	; (8005f14 <SystemClock_Config+0x114>)
 8005e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e3a:	4a36      	ldr	r2, [pc, #216]	; (8005f14 <SystemClock_Config+0x114>)
 8005e3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e40:	6413      	str	r3, [r2, #64]	; 0x40
 8005e42:	4b34      	ldr	r3, [pc, #208]	; (8005f14 <SystemClock_Config+0x114>)
 8005e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e4a:	60bb      	str	r3, [r7, #8]
 8005e4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005e4e:	2300      	movs	r3, #0
 8005e50:	607b      	str	r3, [r7, #4]
 8005e52:	4b31      	ldr	r3, [pc, #196]	; (8005f18 <SystemClock_Config+0x118>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a30      	ldr	r2, [pc, #192]	; (8005f18 <SystemClock_Config+0x118>)
 8005e58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e5c:	6013      	str	r3, [r2, #0]
 8005e5e:	4b2e      	ldr	r3, [pc, #184]	; (8005f18 <SystemClock_Config+0x118>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005e66:	607b      	str	r3, [r7, #4]
 8005e68:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005e6e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005e72:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005e74:	2302      	movs	r3, #2
 8005e76:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005e78:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005e7c:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 8;
 8005e7e:	2308      	movs	r3, #8
 8005e80:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8005e82:	23b4      	movs	r3, #180	; 0xb4
 8005e84:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005e88:	2302      	movs	r3, #2
 8005e8a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8005e8e:	2308      	movs	r3, #8
 8005e90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 2;
 8005e94:	2302      	movs	r3, #2
 8005e96:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005e9a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f006 fb22 	bl	800c4e8 <HAL_RCC_OscConfig>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d001      	beq.n	8005eae <SystemClock_Config+0xae>
  {
    Error_Handler();
 8005eaa:	f000 fe7f 	bl	8006bac <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8005eae:	f005 fe9d 	bl	800bbec <HAL_PWREx_EnableOverDrive>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d001      	beq.n	8005ebc <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8005eb8:	f000 fe78 	bl	8006bac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005ebc:	230f      	movs	r3, #15
 8005ebe:	64bb      	str	r3, [r7, #72]	; 0x48
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005ec0:	2302      	movs	r3, #2
 8005ec2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005ec8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005ecc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005ece:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ed2:	65bb      	str	r3, [r7, #88]	; 0x58

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005ed4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005ed8:	2105      	movs	r1, #5
 8005eda:	4618      	mov	r0, r3
 8005edc:	f005 fed6 	bl	800bc8c <HAL_RCC_ClockConfig>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d001      	beq.n	8005eea <SystemClock_Config+0xea>
  {
    Error_Handler();
 8005ee6:	f000 fe61 	bl	8006bac <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8005eea:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8005eee:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005ef8:	f107 030c 	add.w	r3, r7, #12
 8005efc:	4618      	mov	r0, r3
 8005efe:	f006 f8b5 	bl	800c06c <HAL_RCCEx_PeriphCLKConfig>
 8005f02:	4603      	mov	r3, r0
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d001      	beq.n	8005f0c <SystemClock_Config+0x10c>
  {
    Error_Handler();
 8005f08:	f000 fe50 	bl	8006bac <Error_Handler>
  }
}
 8005f0c:	bf00      	nop
 8005f0e:	3790      	adds	r7, #144	; 0x90
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}
 8005f14:	40023800 	.word	0x40023800
 8005f18:	40007000 	.word	0x40007000

08005f1c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b084      	sub	sp, #16
 8005f20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8005f22:	463b      	mov	r3, r7
 8005f24:	2200      	movs	r2, #0
 8005f26:	601a      	str	r2, [r3, #0]
 8005f28:	605a      	str	r2, [r3, #4]
 8005f2a:	609a      	str	r2, [r3, #8]
 8005f2c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8005f2e:	4b7c      	ldr	r3, [pc, #496]	; (8006120 <MX_ADC2_Init+0x204>)
 8005f30:	4a7c      	ldr	r2, [pc, #496]	; (8006124 <MX_ADC2_Init+0x208>)
 8005f32:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8005f34:	4b7a      	ldr	r3, [pc, #488]	; (8006120 <MX_ADC2_Init+0x204>)
 8005f36:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005f3a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8005f3c:	4b78      	ldr	r3, [pc, #480]	; (8006120 <MX_ADC2_Init+0x204>)
 8005f3e:	2200      	movs	r2, #0
 8005f40:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8005f42:	4b77      	ldr	r3, [pc, #476]	; (8006120 <MX_ADC2_Init+0x204>)
 8005f44:	2201      	movs	r2, #1
 8005f46:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8005f48:	4b75      	ldr	r3, [pc, #468]	; (8006120 <MX_ADC2_Init+0x204>)
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8005f4e:	4b74      	ldr	r3, [pc, #464]	; (8006120 <MX_ADC2_Init+0x204>)
 8005f50:	2200      	movs	r2, #0
 8005f52:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005f56:	4b72      	ldr	r3, [pc, #456]	; (8006120 <MX_ADC2_Init+0x204>)
 8005f58:	2200      	movs	r2, #0
 8005f5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005f5c:	4b70      	ldr	r3, [pc, #448]	; (8006120 <MX_ADC2_Init+0x204>)
 8005f5e:	4a72      	ldr	r2, [pc, #456]	; (8006128 <MX_ADC2_Init+0x20c>)
 8005f60:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005f62:	4b6f      	ldr	r3, [pc, #444]	; (8006120 <MX_ADC2_Init+0x204>)
 8005f64:	2200      	movs	r2, #0
 8005f66:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 14;
 8005f68:	4b6d      	ldr	r3, [pc, #436]	; (8006120 <MX_ADC2_Init+0x204>)
 8005f6a:	220e      	movs	r2, #14
 8005f6c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8005f6e:	4b6c      	ldr	r3, [pc, #432]	; (8006120 <MX_ADC2_Init+0x204>)
 8005f70:	2201      	movs	r2, #1
 8005f72:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005f76:	4b6a      	ldr	r3, [pc, #424]	; (8006120 <MX_ADC2_Init+0x204>)
 8005f78:	2201      	movs	r2, #1
 8005f7a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8005f7c:	4868      	ldr	r0, [pc, #416]	; (8006120 <MX_ADC2_Init+0x204>)
 8005f7e:	f003 fc1d 	bl	80097bc <HAL_ADC_Init>
 8005f82:	4603      	mov	r3, r0
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d001      	beq.n	8005f8c <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8005f88:	f000 fe10 	bl	8006bac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8005f8c:	230a      	movs	r3, #10
 8005f8e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8005f90:	2301      	movs	r3, #1
 8005f92:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8005f94:	2306      	movs	r3, #6
 8005f96:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005f98:	463b      	mov	r3, r7
 8005f9a:	4619      	mov	r1, r3
 8005f9c:	4860      	ldr	r0, [pc, #384]	; (8006120 <MX_ADC2_Init+0x204>)
 8005f9e:	f003 fd61 	bl	8009a64 <HAL_ADC_ConfigChannel>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d001      	beq.n	8005fac <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8005fa8:	f000 fe00 	bl	8006bac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8005fac:	230b      	movs	r3, #11
 8005fae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8005fb0:	2302      	movs	r3, #2
 8005fb2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005fb4:	463b      	mov	r3, r7
 8005fb6:	4619      	mov	r1, r3
 8005fb8:	4859      	ldr	r0, [pc, #356]	; (8006120 <MX_ADC2_Init+0x204>)
 8005fba:	f003 fd53 	bl	8009a64 <HAL_ADC_ConfigChannel>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d001      	beq.n	8005fc8 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8005fc4:	f000 fdf2 	bl	8006bac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8005fc8:	230c      	movs	r3, #12
 8005fca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8005fcc:	2303      	movs	r3, #3
 8005fce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005fd0:	463b      	mov	r3, r7
 8005fd2:	4619      	mov	r1, r3
 8005fd4:	4852      	ldr	r0, [pc, #328]	; (8006120 <MX_ADC2_Init+0x204>)
 8005fd6:	f003 fd45 	bl	8009a64 <HAL_ADC_ConfigChannel>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d001      	beq.n	8005fe4 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8005fe0:	f000 fde4 	bl	8006bac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8005fe4:	230d      	movs	r3, #13
 8005fe6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8005fe8:	2304      	movs	r3, #4
 8005fea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8005fec:	463b      	mov	r3, r7
 8005fee:	4619      	mov	r1, r3
 8005ff0:	484b      	ldr	r0, [pc, #300]	; (8006120 <MX_ADC2_Init+0x204>)
 8005ff2:	f003 fd37 	bl	8009a64 <HAL_ADC_ConfigChannel>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d001      	beq.n	8006000 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8005ffc:	f000 fdd6 	bl	8006bac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8006000:	2300      	movs	r3, #0
 8006002:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8006004:	2305      	movs	r3, #5
 8006006:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006008:	463b      	mov	r3, r7
 800600a:	4619      	mov	r1, r3
 800600c:	4844      	ldr	r0, [pc, #272]	; (8006120 <MX_ADC2_Init+0x204>)
 800600e:	f003 fd29 	bl	8009a64 <HAL_ADC_ConfigChannel>
 8006012:	4603      	mov	r3, r0
 8006014:	2b00      	cmp	r3, #0
 8006016:	d001      	beq.n	800601c <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 8006018:	f000 fdc8 	bl	8006bac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800601c:	2301      	movs	r3, #1
 800601e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8006020:	2306      	movs	r3, #6
 8006022:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006024:	463b      	mov	r3, r7
 8006026:	4619      	mov	r1, r3
 8006028:	483d      	ldr	r0, [pc, #244]	; (8006120 <MX_ADC2_Init+0x204>)
 800602a:	f003 fd1b 	bl	8009a64 <HAL_ADC_ConfigChannel>
 800602e:	4603      	mov	r3, r0
 8006030:	2b00      	cmp	r3, #0
 8006032:	d001      	beq.n	8006038 <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 8006034:	f000 fdba 	bl	8006bac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8006038:	2302      	movs	r3, #2
 800603a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 800603c:	2307      	movs	r3, #7
 800603e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006040:	463b      	mov	r3, r7
 8006042:	4619      	mov	r1, r3
 8006044:	4836      	ldr	r0, [pc, #216]	; (8006120 <MX_ADC2_Init+0x204>)
 8006046:	f003 fd0d 	bl	8009a64 <HAL_ADC_ConfigChannel>
 800604a:	4603      	mov	r3, r0
 800604c:	2b00      	cmp	r3, #0
 800604e:	d001      	beq.n	8006054 <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 8006050:	f000 fdac 	bl	8006bac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8006054:	2303      	movs	r3, #3
 8006056:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8006058:	2308      	movs	r3, #8
 800605a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800605c:	463b      	mov	r3, r7
 800605e:	4619      	mov	r1, r3
 8006060:	482f      	ldr	r0, [pc, #188]	; (8006120 <MX_ADC2_Init+0x204>)
 8006062:	f003 fcff 	bl	8009a64 <HAL_ADC_ConfigChannel>
 8006066:	4603      	mov	r3, r0
 8006068:	2b00      	cmp	r3, #0
 800606a:	d001      	beq.n	8006070 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 800606c:	f000 fd9e 	bl	8006bac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8006070:	2304      	movs	r3, #4
 8006072:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 8006074:	2309      	movs	r3, #9
 8006076:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006078:	463b      	mov	r3, r7
 800607a:	4619      	mov	r1, r3
 800607c:	4828      	ldr	r0, [pc, #160]	; (8006120 <MX_ADC2_Init+0x204>)
 800607e:	f003 fcf1 	bl	8009a64 <HAL_ADC_ConfigChannel>
 8006082:	4603      	mov	r3, r0
 8006084:	2b00      	cmp	r3, #0
 8006086:	d001      	beq.n	800608c <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 8006088:	f000 fd90 	bl	8006bac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800608c:	2305      	movs	r3, #5
 800608e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 8006090:	230a      	movs	r3, #10
 8006092:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006094:	463b      	mov	r3, r7
 8006096:	4619      	mov	r1, r3
 8006098:	4821      	ldr	r0, [pc, #132]	; (8006120 <MX_ADC2_Init+0x204>)
 800609a:	f003 fce3 	bl	8009a64 <HAL_ADC_ConfigChannel>
 800609e:	4603      	mov	r3, r0
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d001      	beq.n	80060a8 <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 80060a4:	f000 fd82 	bl	8006bac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80060a8:	2306      	movs	r3, #6
 80060aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 80060ac:	230b      	movs	r3, #11
 80060ae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80060b0:	463b      	mov	r3, r7
 80060b2:	4619      	mov	r1, r3
 80060b4:	481a      	ldr	r0, [pc, #104]	; (8006120 <MX_ADC2_Init+0x204>)
 80060b6:	f003 fcd5 	bl	8009a64 <HAL_ADC_ConfigChannel>
 80060ba:	4603      	mov	r3, r0
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d001      	beq.n	80060c4 <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 80060c0:	f000 fd74 	bl	8006bac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80060c4:	2307      	movs	r3, #7
 80060c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 80060c8:	230c      	movs	r3, #12
 80060ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80060cc:	463b      	mov	r3, r7
 80060ce:	4619      	mov	r1, r3
 80060d0:	4813      	ldr	r0, [pc, #76]	; (8006120 <MX_ADC2_Init+0x204>)
 80060d2:	f003 fcc7 	bl	8009a64 <HAL_ADC_ConfigChannel>
 80060d6:	4603      	mov	r3, r0
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d001      	beq.n	80060e0 <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 80060dc:	f000 fd66 	bl	8006bac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80060e0:	2308      	movs	r3, #8
 80060e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 80060e4:	230d      	movs	r3, #13
 80060e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80060e8:	463b      	mov	r3, r7
 80060ea:	4619      	mov	r1, r3
 80060ec:	480c      	ldr	r0, [pc, #48]	; (8006120 <MX_ADC2_Init+0x204>)
 80060ee:	f003 fcb9 	bl	8009a64 <HAL_ADC_ConfigChannel>
 80060f2:	4603      	mov	r3, r0
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d001      	beq.n	80060fc <MX_ADC2_Init+0x1e0>
  {
    Error_Handler();
 80060f8:	f000 fd58 	bl	8006bac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80060fc:	2309      	movs	r3, #9
 80060fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8006100:	230e      	movs	r3, #14
 8006102:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8006104:	463b      	mov	r3, r7
 8006106:	4619      	mov	r1, r3
 8006108:	4805      	ldr	r0, [pc, #20]	; (8006120 <MX_ADC2_Init+0x204>)
 800610a:	f003 fcab 	bl	8009a64 <HAL_ADC_ConfigChannel>
 800610e:	4603      	mov	r3, r0
 8006110:	2b00      	cmp	r3, #0
 8006112:	d001      	beq.n	8006118 <MX_ADC2_Init+0x1fc>
  {
    Error_Handler();
 8006114:	f000 fd4a 	bl	8006bac <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8006118:	bf00      	nop
 800611a:	3710      	adds	r7, #16
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}
 8006120:	20044764 	.word	0x20044764
 8006124:	40012100 	.word	0x40012100
 8006128:	0f000001 	.word	0x0f000001

0800612c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8006130:	4b12      	ldr	r3, [pc, #72]	; (800617c <MX_I2C1_Init+0x50>)
 8006132:	4a13      	ldr	r2, [pc, #76]	; (8006180 <MX_I2C1_Init+0x54>)
 8006134:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8006136:	4b11      	ldr	r3, [pc, #68]	; (800617c <MX_I2C1_Init+0x50>)
 8006138:	4a12      	ldr	r2, [pc, #72]	; (8006184 <MX_I2C1_Init+0x58>)
 800613a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800613c:	4b0f      	ldr	r3, [pc, #60]	; (800617c <MX_I2C1_Init+0x50>)
 800613e:	2200      	movs	r2, #0
 8006140:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8006142:	4b0e      	ldr	r3, [pc, #56]	; (800617c <MX_I2C1_Init+0x50>)
 8006144:	2200      	movs	r2, #0
 8006146:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006148:	4b0c      	ldr	r3, [pc, #48]	; (800617c <MX_I2C1_Init+0x50>)
 800614a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800614e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006150:	4b0a      	ldr	r3, [pc, #40]	; (800617c <MX_I2C1_Init+0x50>)
 8006152:	2200      	movs	r2, #0
 8006154:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8006156:	4b09      	ldr	r3, [pc, #36]	; (800617c <MX_I2C1_Init+0x50>)
 8006158:	2200      	movs	r2, #0
 800615a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800615c:	4b07      	ldr	r3, [pc, #28]	; (800617c <MX_I2C1_Init+0x50>)
 800615e:	2200      	movs	r2, #0
 8006160:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8006162:	4b06      	ldr	r3, [pc, #24]	; (800617c <MX_I2C1_Init+0x50>)
 8006164:	2280      	movs	r2, #128	; 0x80
 8006166:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006168:	4804      	ldr	r0, [pc, #16]	; (800617c <MX_I2C1_Init+0x50>)
 800616a:	f004 fdb5 	bl	800acd8 <HAL_I2C_Init>
 800616e:	4603      	mov	r3, r0
 8006170:	2b00      	cmp	r3, #0
 8006172:	d001      	beq.n	8006178 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8006174:	f000 fd1a 	bl	8006bac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8006178:	bf00      	nop
 800617a:	bd80      	pop	{r7, pc}
 800617c:	200447ac 	.word	0x200447ac
 8006180:	40005400 	.word	0x40005400
 8006184:	000186a0 	.word	0x000186a0

08006188 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800618c:	4b12      	ldr	r3, [pc, #72]	; (80061d8 <MX_I2C2_Init+0x50>)
 800618e:	4a13      	ldr	r2, [pc, #76]	; (80061dc <MX_I2C2_Init+0x54>)
 8006190:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8006192:	4b11      	ldr	r3, [pc, #68]	; (80061d8 <MX_I2C2_Init+0x50>)
 8006194:	4a12      	ldr	r2, [pc, #72]	; (80061e0 <MX_I2C2_Init+0x58>)
 8006196:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006198:	4b0f      	ldr	r3, [pc, #60]	; (80061d8 <MX_I2C2_Init+0x50>)
 800619a:	2200      	movs	r2, #0
 800619c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800619e:	4b0e      	ldr	r3, [pc, #56]	; (80061d8 <MX_I2C2_Init+0x50>)
 80061a0:	2200      	movs	r2, #0
 80061a2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80061a4:	4b0c      	ldr	r3, [pc, #48]	; (80061d8 <MX_I2C2_Init+0x50>)
 80061a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80061aa:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80061ac:	4b0a      	ldr	r3, [pc, #40]	; (80061d8 <MX_I2C2_Init+0x50>)
 80061ae:	2200      	movs	r2, #0
 80061b0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80061b2:	4b09      	ldr	r3, [pc, #36]	; (80061d8 <MX_I2C2_Init+0x50>)
 80061b4:	2200      	movs	r2, #0
 80061b6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80061b8:	4b07      	ldr	r3, [pc, #28]	; (80061d8 <MX_I2C2_Init+0x50>)
 80061ba:	2200      	movs	r2, #0
 80061bc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 80061be:	4b06      	ldr	r3, [pc, #24]	; (80061d8 <MX_I2C2_Init+0x50>)
 80061c0:	2280      	movs	r2, #128	; 0x80
 80061c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80061c4:	4804      	ldr	r0, [pc, #16]	; (80061d8 <MX_I2C2_Init+0x50>)
 80061c6:	f004 fd87 	bl	800acd8 <HAL_I2C_Init>
 80061ca:	4603      	mov	r3, r0
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d001      	beq.n	80061d4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80061d0:	f000 fcec 	bl	8006bac <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80061d4:	bf00      	nop
 80061d6:	bd80      	pop	{r7, pc}
 80061d8:	20044840 	.word	0x20044840
 80061dc:	40005800 	.word	0x40005800
 80061e0:	000186a0 	.word	0x000186a0

080061e4 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80061e4:	b480      	push	{r7}
 80061e6:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80061e8:	4b0c      	ldr	r3, [pc, #48]	; (800621c <MX_SDIO_SD_Init+0x38>)
 80061ea:	4a0d      	ldr	r2, [pc, #52]	; (8006220 <MX_SDIO_SD_Init+0x3c>)
 80061ec:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80061ee:	4b0b      	ldr	r3, [pc, #44]	; (800621c <MX_SDIO_SD_Init+0x38>)
 80061f0:	2200      	movs	r2, #0
 80061f2:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80061f4:	4b09      	ldr	r3, [pc, #36]	; (800621c <MX_SDIO_SD_Init+0x38>)
 80061f6:	2200      	movs	r2, #0
 80061f8:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80061fa:	4b08      	ldr	r3, [pc, #32]	; (800621c <MX_SDIO_SD_Init+0x38>)
 80061fc:	2200      	movs	r2, #0
 80061fe:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8006200:	4b06      	ldr	r3, [pc, #24]	; (800621c <MX_SDIO_SD_Init+0x38>)
 8006202:	2200      	movs	r2, #0
 8006204:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8006206:	4b05      	ldr	r3, [pc, #20]	; (800621c <MX_SDIO_SD_Init+0x38>)
 8006208:	2200      	movs	r2, #0
 800620a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 2;
 800620c:	4b03      	ldr	r3, [pc, #12]	; (800621c <MX_SDIO_SD_Init+0x38>)
 800620e:	2202      	movs	r2, #2
 8006210:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8006212:	bf00      	nop
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr
 800621c:	20044a40 	.word	0x20044a40
 8006220:	40012c00 	.word	0x40012c00

08006224 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8006228:	4b17      	ldr	r3, [pc, #92]	; (8006288 <MX_SPI2_Init+0x64>)
 800622a:	4a18      	ldr	r2, [pc, #96]	; (800628c <MX_SPI2_Init+0x68>)
 800622c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800622e:	4b16      	ldr	r3, [pc, #88]	; (8006288 <MX_SPI2_Init+0x64>)
 8006230:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006234:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8006236:	4b14      	ldr	r3, [pc, #80]	; (8006288 <MX_SPI2_Init+0x64>)
 8006238:	2200      	movs	r2, #0
 800623a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800623c:	4b12      	ldr	r3, [pc, #72]	; (8006288 <MX_SPI2_Init+0x64>)
 800623e:	2200      	movs	r2, #0
 8006240:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8006242:	4b11      	ldr	r3, [pc, #68]	; (8006288 <MX_SPI2_Init+0x64>)
 8006244:	2202      	movs	r2, #2
 8006246:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8006248:	4b0f      	ldr	r3, [pc, #60]	; (8006288 <MX_SPI2_Init+0x64>)
 800624a:	2201      	movs	r2, #1
 800624c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800624e:	4b0e      	ldr	r3, [pc, #56]	; (8006288 <MX_SPI2_Init+0x64>)
 8006250:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006254:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8006256:	4b0c      	ldr	r3, [pc, #48]	; (8006288 <MX_SPI2_Init+0x64>)
 8006258:	2228      	movs	r2, #40	; 0x28
 800625a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800625c:	4b0a      	ldr	r3, [pc, #40]	; (8006288 <MX_SPI2_Init+0x64>)
 800625e:	2200      	movs	r2, #0
 8006260:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8006262:	4b09      	ldr	r3, [pc, #36]	; (8006288 <MX_SPI2_Init+0x64>)
 8006264:	2200      	movs	r2, #0
 8006266:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006268:	4b07      	ldr	r3, [pc, #28]	; (8006288 <MX_SPI2_Init+0x64>)
 800626a:	2200      	movs	r2, #0
 800626c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800626e:	4b06      	ldr	r3, [pc, #24]	; (8006288 <MX_SPI2_Init+0x64>)
 8006270:	220a      	movs	r2, #10
 8006272:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8006274:	4804      	ldr	r0, [pc, #16]	; (8006288 <MX_SPI2_Init+0x64>)
 8006276:	f007 fe61 	bl	800df3c <HAL_SPI_Init>
 800627a:	4603      	mov	r3, r0
 800627c:	2b00      	cmp	r3, #0
 800627e:	d001      	beq.n	8006284 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8006280:	f000 fc94 	bl	8006bac <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8006284:	bf00      	nop
 8006286:	bd80      	pop	{r7, pc}
 8006288:	2004468c 	.word	0x2004468c
 800628c:	40003800 	.word	0x40003800

08006290 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b09a      	sub	sp, #104	; 0x68
 8006294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8006296:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800629a:	2224      	movs	r2, #36	; 0x24
 800629c:	2100      	movs	r1, #0
 800629e:	4618      	mov	r0, r3
 80062a0:	f00e ffe9 	bl	8015276 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80062a4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80062a8:	2200      	movs	r2, #0
 80062aa:	601a      	str	r2, [r3, #0]
 80062ac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80062ae:	f107 0320 	add.w	r3, r7, #32
 80062b2:	2200      	movs	r2, #0
 80062b4:	601a      	str	r2, [r3, #0]
 80062b6:	605a      	str	r2, [r3, #4]
 80062b8:	609a      	str	r2, [r3, #8]
 80062ba:	60da      	str	r2, [r3, #12]
 80062bc:	611a      	str	r2, [r3, #16]
 80062be:	615a      	str	r2, [r3, #20]
 80062c0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80062c2:	463b      	mov	r3, r7
 80062c4:	2220      	movs	r2, #32
 80062c6:	2100      	movs	r1, #0
 80062c8:	4618      	mov	r0, r3
 80062ca:	f00e ffd4 	bl	8015276 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80062ce:	4b42      	ldr	r3, [pc, #264]	; (80063d8 <MX_TIM1_Init+0x148>)
 80062d0:	4a42      	ldr	r2, [pc, #264]	; (80063dc <MX_TIM1_Init+0x14c>)
 80062d2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80062d4:	4b40      	ldr	r3, [pc, #256]	; (80063d8 <MX_TIM1_Init+0x148>)
 80062d6:	2200      	movs	r2, #0
 80062d8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80062da:	4b3f      	ldr	r3, [pc, #252]	; (80063d8 <MX_TIM1_Init+0x148>)
 80062dc:	2200      	movs	r2, #0
 80062de:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80062e0:	4b3d      	ldr	r3, [pc, #244]	; (80063d8 <MX_TIM1_Init+0x148>)
 80062e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80062e6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80062e8:	4b3b      	ldr	r3, [pc, #236]	; (80063d8 <MX_TIM1_Init+0x148>)
 80062ea:	2200      	movs	r2, #0
 80062ec:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80062ee:	4b3a      	ldr	r3, [pc, #232]	; (80063d8 <MX_TIM1_Init+0x148>)
 80062f0:	2200      	movs	r2, #0
 80062f2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80062f4:	4b38      	ldr	r3, [pc, #224]	; (80063d8 <MX_TIM1_Init+0x148>)
 80062f6:	2200      	movs	r2, #0
 80062f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80062fa:	4837      	ldr	r0, [pc, #220]	; (80063d8 <MX_TIM1_Init+0x148>)
 80062fc:	f008 fbc1 	bl	800ea82 <HAL_TIM_PWM_Init>
 8006300:	4603      	mov	r3, r0
 8006302:	2b00      	cmp	r3, #0
 8006304:	d001      	beq.n	800630a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8006306:	f000 fc51 	bl	8006bac <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800630a:	2303      	movs	r3, #3
 800630c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800630e:	2300      	movs	r3, #0
 8006310:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8006312:	2301      	movs	r3, #1
 8006314:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8006316:	2300      	movs	r3, #0
 8006318:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 800631a:	2300      	movs	r3, #0
 800631c:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800631e:	2300      	movs	r3, #0
 8006320:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8006322:	2301      	movs	r3, #1
 8006324:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8006326:	2300      	movs	r3, #0
 8006328:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 800632a:	2300      	movs	r3, #0
 800632c:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800632e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006332:	4619      	mov	r1, r3
 8006334:	4828      	ldr	r0, [pc, #160]	; (80063d8 <MX_TIM1_Init+0x148>)
 8006336:	f008 fc0d 	bl	800eb54 <HAL_TIM_Encoder_Init>
 800633a:	4603      	mov	r3, r0
 800633c:	2b00      	cmp	r3, #0
 800633e:	d001      	beq.n	8006344 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8006340:	f000 fc34 	bl	8006bac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006344:	2300      	movs	r3, #0
 8006346:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006348:	2300      	movs	r3, #0
 800634a:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800634c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8006350:	4619      	mov	r1, r3
 8006352:	4821      	ldr	r0, [pc, #132]	; (80063d8 <MX_TIM1_Init+0x148>)
 8006354:	f009 f934 	bl	800f5c0 <HAL_TIMEx_MasterConfigSynchronization>
 8006358:	4603      	mov	r3, r0
 800635a:	2b00      	cmp	r3, #0
 800635c:	d001      	beq.n	8006362 <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 800635e:	f000 fc25 	bl	8006bac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006362:	2360      	movs	r3, #96	; 0x60
 8006364:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 8006366:	2300      	movs	r3, #0
 8006368:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800636a:	2300      	movs	r3, #0
 800636c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800636e:	2300      	movs	r3, #0
 8006370:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006372:	2300      	movs	r3, #0
 8006374:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8006376:	2300      	movs	r3, #0
 8006378:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800637a:	2300      	movs	r3, #0
 800637c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800637e:	f107 0320 	add.w	r3, r7, #32
 8006382:	2208      	movs	r2, #8
 8006384:	4619      	mov	r1, r3
 8006386:	4814      	ldr	r0, [pc, #80]	; (80063d8 <MX_TIM1_Init+0x148>)
 8006388:	f008 fdb6 	bl	800eef8 <HAL_TIM_PWM_ConfigChannel>
 800638c:	4603      	mov	r3, r0
 800638e:	2b00      	cmp	r3, #0
 8006390:	d001      	beq.n	8006396 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8006392:	f000 fc0b 	bl	8006bac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8006396:	2300      	movs	r3, #0
 8006398:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800639a:	2300      	movs	r3, #0
 800639c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800639e:	2300      	movs	r3, #0
 80063a0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80063a2:	2300      	movs	r3, #0
 80063a4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80063a6:	2300      	movs	r3, #0
 80063a8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80063aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80063ae:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80063b0:	2300      	movs	r3, #0
 80063b2:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80063b4:	463b      	mov	r3, r7
 80063b6:	4619      	mov	r1, r3
 80063b8:	4807      	ldr	r0, [pc, #28]	; (80063d8 <MX_TIM1_Init+0x148>)
 80063ba:	f009 f97d 	bl	800f6b8 <HAL_TIMEx_ConfigBreakDeadTime>
 80063be:	4603      	mov	r3, r0
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d001      	beq.n	80063c8 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 80063c4:	f000 fbf2 	bl	8006bac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80063c8:	4803      	ldr	r0, [pc, #12]	; (80063d8 <MX_TIM1_Init+0x148>)
 80063ca:	f000 ffdf 	bl	800738c <HAL_TIM_MspPostInit>

}
 80063ce:	bf00      	nop
 80063d0:	3768      	adds	r7, #104	; 0x68
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}
 80063d6:	bf00      	nop
 80063d8:	20044a00 	.word	0x20044a00
 80063dc:	40010000 	.word	0x40010000

080063e0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b08a      	sub	sp, #40	; 0x28
 80063e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80063e6:	f107 0320 	add.w	r3, r7, #32
 80063ea:	2200      	movs	r2, #0
 80063ec:	601a      	str	r2, [r3, #0]
 80063ee:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80063f0:	1d3b      	adds	r3, r7, #4
 80063f2:	2200      	movs	r2, #0
 80063f4:	601a      	str	r2, [r3, #0]
 80063f6:	605a      	str	r2, [r3, #4]
 80063f8:	609a      	str	r2, [r3, #8]
 80063fa:	60da      	str	r2, [r3, #12]
 80063fc:	611a      	str	r2, [r3, #16]
 80063fe:	615a      	str	r2, [r3, #20]
 8006400:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8006402:	4b27      	ldr	r3, [pc, #156]	; (80064a0 <MX_TIM3_Init+0xc0>)
 8006404:	4a27      	ldr	r2, [pc, #156]	; (80064a4 <MX_TIM3_Init+0xc4>)
 8006406:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8006408:	4b25      	ldr	r3, [pc, #148]	; (80064a0 <MX_TIM3_Init+0xc0>)
 800640a:	2201      	movs	r2, #1
 800640c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800640e:	4b24      	ldr	r3, [pc, #144]	; (80064a0 <MX_TIM3_Init+0xc0>)
 8006410:	2200      	movs	r2, #0
 8006412:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4499;
 8006414:	4b22      	ldr	r3, [pc, #136]	; (80064a0 <MX_TIM3_Init+0xc0>)
 8006416:	f241 1293 	movw	r2, #4499	; 0x1193
 800641a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800641c:	4b20      	ldr	r3, [pc, #128]	; (80064a0 <MX_TIM3_Init+0xc0>)
 800641e:	2200      	movs	r2, #0
 8006420:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006422:	4b1f      	ldr	r3, [pc, #124]	; (80064a0 <MX_TIM3_Init+0xc0>)
 8006424:	2200      	movs	r2, #0
 8006426:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8006428:	481d      	ldr	r0, [pc, #116]	; (80064a0 <MX_TIM3_Init+0xc0>)
 800642a:	f008 fb2a 	bl	800ea82 <HAL_TIM_PWM_Init>
 800642e:	4603      	mov	r3, r0
 8006430:	2b00      	cmp	r3, #0
 8006432:	d001      	beq.n	8006438 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8006434:	f000 fbba 	bl	8006bac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006438:	2300      	movs	r3, #0
 800643a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800643c:	2300      	movs	r3, #0
 800643e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8006440:	f107 0320 	add.w	r3, r7, #32
 8006444:	4619      	mov	r1, r3
 8006446:	4816      	ldr	r0, [pc, #88]	; (80064a0 <MX_TIM3_Init+0xc0>)
 8006448:	f009 f8ba 	bl	800f5c0 <HAL_TIMEx_MasterConfigSynchronization>
 800644c:	4603      	mov	r3, r0
 800644e:	2b00      	cmp	r3, #0
 8006450:	d001      	beq.n	8006456 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8006452:	f000 fbab 	bl	8006bac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006456:	2360      	movs	r3, #96	; 0x60
 8006458:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800645a:	2300      	movs	r3, #0
 800645c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800645e:	2300      	movs	r3, #0
 8006460:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006462:	2300      	movs	r3, #0
 8006464:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006466:	1d3b      	adds	r3, r7, #4
 8006468:	2200      	movs	r2, #0
 800646a:	4619      	mov	r1, r3
 800646c:	480c      	ldr	r0, [pc, #48]	; (80064a0 <MX_TIM3_Init+0xc0>)
 800646e:	f008 fd43 	bl	800eef8 <HAL_TIM_PWM_ConfigChannel>
 8006472:	4603      	mov	r3, r0
 8006474:	2b00      	cmp	r3, #0
 8006476:	d001      	beq.n	800647c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8006478:	f000 fb98 	bl	8006bac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800647c:	1d3b      	adds	r3, r7, #4
 800647e:	2204      	movs	r2, #4
 8006480:	4619      	mov	r1, r3
 8006482:	4807      	ldr	r0, [pc, #28]	; (80064a0 <MX_TIM3_Init+0xc0>)
 8006484:	f008 fd38 	bl	800eef8 <HAL_TIM_PWM_ConfigChannel>
 8006488:	4603      	mov	r3, r0
 800648a:	2b00      	cmp	r3, #0
 800648c:	d001      	beq.n	8006492 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800648e:	f000 fb8d 	bl	8006bac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8006492:	4803      	ldr	r0, [pc, #12]	; (80064a0 <MX_TIM3_Init+0xc0>)
 8006494:	f000 ff7a 	bl	800738c <HAL_TIM_MspPostInit>

}
 8006498:	bf00      	nop
 800649a:	3728      	adds	r7, #40	; 0x28
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}
 80064a0:	20044898 	.word	0x20044898
 80064a4:	40000400 	.word	0x40000400

080064a8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b08a      	sub	sp, #40	; 0x28
 80064ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80064ae:	f107 0320 	add.w	r3, r7, #32
 80064b2:	2200      	movs	r2, #0
 80064b4:	601a      	str	r2, [r3, #0]
 80064b6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80064b8:	1d3b      	adds	r3, r7, #4
 80064ba:	2200      	movs	r2, #0
 80064bc:	601a      	str	r2, [r3, #0]
 80064be:	605a      	str	r2, [r3, #4]
 80064c0:	609a      	str	r2, [r3, #8]
 80064c2:	60da      	str	r2, [r3, #12]
 80064c4:	611a      	str	r2, [r3, #16]
 80064c6:	615a      	str	r2, [r3, #20]
 80064c8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80064ca:	4b27      	ldr	r3, [pc, #156]	; (8006568 <MX_TIM4_Init+0xc0>)
 80064cc:	4a27      	ldr	r2, [pc, #156]	; (800656c <MX_TIM4_Init+0xc4>)
 80064ce:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80064d0:	4b25      	ldr	r3, [pc, #148]	; (8006568 <MX_TIM4_Init+0xc0>)
 80064d2:	2200      	movs	r2, #0
 80064d4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80064d6:	4b24      	ldr	r3, [pc, #144]	; (8006568 <MX_TIM4_Init+0xc0>)
 80064d8:	2200      	movs	r2, #0
 80064da:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1800;
 80064dc:	4b22      	ldr	r3, [pc, #136]	; (8006568 <MX_TIM4_Init+0xc0>)
 80064de:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 80064e2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80064e4:	4b20      	ldr	r3, [pc, #128]	; (8006568 <MX_TIM4_Init+0xc0>)
 80064e6:	2200      	movs	r2, #0
 80064e8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80064ea:	4b1f      	ldr	r3, [pc, #124]	; (8006568 <MX_TIM4_Init+0xc0>)
 80064ec:	2200      	movs	r2, #0
 80064ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80064f0:	481d      	ldr	r0, [pc, #116]	; (8006568 <MX_TIM4_Init+0xc0>)
 80064f2:	f008 fac6 	bl	800ea82 <HAL_TIM_PWM_Init>
 80064f6:	4603      	mov	r3, r0
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d001      	beq.n	8006500 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 80064fc:	f000 fb56 	bl	8006bac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006500:	2300      	movs	r3, #0
 8006502:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006504:	2300      	movs	r3, #0
 8006506:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8006508:	f107 0320 	add.w	r3, r7, #32
 800650c:	4619      	mov	r1, r3
 800650e:	4816      	ldr	r0, [pc, #88]	; (8006568 <MX_TIM4_Init+0xc0>)
 8006510:	f009 f856 	bl	800f5c0 <HAL_TIMEx_MasterConfigSynchronization>
 8006514:	4603      	mov	r3, r0
 8006516:	2b00      	cmp	r3, #0
 8006518:	d001      	beq.n	800651e <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800651a:	f000 fb47 	bl	8006bac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800651e:	2360      	movs	r3, #96	; 0x60
 8006520:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006522:	2300      	movs	r3, #0
 8006524:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006526:	2300      	movs	r3, #0
 8006528:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800652a:	2300      	movs	r3, #0
 800652c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800652e:	1d3b      	adds	r3, r7, #4
 8006530:	2208      	movs	r2, #8
 8006532:	4619      	mov	r1, r3
 8006534:	480c      	ldr	r0, [pc, #48]	; (8006568 <MX_TIM4_Init+0xc0>)
 8006536:	f008 fcdf 	bl	800eef8 <HAL_TIM_PWM_ConfigChannel>
 800653a:	4603      	mov	r3, r0
 800653c:	2b00      	cmp	r3, #0
 800653e:	d001      	beq.n	8006544 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8006540:	f000 fb34 	bl	8006bac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8006544:	1d3b      	adds	r3, r7, #4
 8006546:	220c      	movs	r2, #12
 8006548:	4619      	mov	r1, r3
 800654a:	4807      	ldr	r0, [pc, #28]	; (8006568 <MX_TIM4_Init+0xc0>)
 800654c:	f008 fcd4 	bl	800eef8 <HAL_TIM_PWM_ConfigChannel>
 8006550:	4603      	mov	r3, r0
 8006552:	2b00      	cmp	r3, #0
 8006554:	d001      	beq.n	800655a <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8006556:	f000 fb29 	bl	8006bac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800655a:	4803      	ldr	r0, [pc, #12]	; (8006568 <MX_TIM4_Init+0xc0>)
 800655c:	f000 ff16 	bl	800738c <HAL_TIM_MspPostInit>

}
 8006560:	bf00      	nop
 8006562:	3728      	adds	r7, #40	; 0x28
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}
 8006568:	20044724 	.word	0x20044724
 800656c:	40000800 	.word	0x40000800

08006570 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b082      	sub	sp, #8
 8006574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006576:	463b      	mov	r3, r7
 8006578:	2200      	movs	r2, #0
 800657a:	601a      	str	r2, [r3, #0]
 800657c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800657e:	4b15      	ldr	r3, [pc, #84]	; (80065d4 <MX_TIM6_Init+0x64>)
 8006580:	4a15      	ldr	r2, [pc, #84]	; (80065d8 <MX_TIM6_Init+0x68>)
 8006582:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 8006584:	4b13      	ldr	r3, [pc, #76]	; (80065d4 <MX_TIM6_Init+0x64>)
 8006586:	2259      	movs	r2, #89	; 0x59
 8006588:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800658a:	4b12      	ldr	r3, [pc, #72]	; (80065d4 <MX_TIM6_Init+0x64>)
 800658c:	2200      	movs	r2, #0
 800658e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8006590:	4b10      	ldr	r3, [pc, #64]	; (80065d4 <MX_TIM6_Init+0x64>)
 8006592:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006596:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006598:	4b0e      	ldr	r3, [pc, #56]	; (80065d4 <MX_TIM6_Init+0x64>)
 800659a:	2280      	movs	r2, #128	; 0x80
 800659c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800659e:	480d      	ldr	r0, [pc, #52]	; (80065d4 <MX_TIM6_Init+0x64>)
 80065a0:	f008 fa20 	bl	800e9e4 <HAL_TIM_Base_Init>
 80065a4:	4603      	mov	r3, r0
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d001      	beq.n	80065ae <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80065aa:	f000 faff 	bl	8006bac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80065ae:	2300      	movs	r3, #0
 80065b0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80065b2:	2300      	movs	r3, #0
 80065b4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80065b6:	463b      	mov	r3, r7
 80065b8:	4619      	mov	r1, r3
 80065ba:	4806      	ldr	r0, [pc, #24]	; (80065d4 <MX_TIM6_Init+0x64>)
 80065bc:	f009 f800 	bl	800f5c0 <HAL_TIMEx_MasterConfigSynchronization>
 80065c0:	4603      	mov	r3, r0
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d001      	beq.n	80065ca <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80065c6:	f000 faf1 	bl	8006bac <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80065ca:	bf00      	nop
 80065cc:	3708      	adds	r7, #8
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}
 80065d2:	bf00      	nop
 80065d4:	200449c0 	.word	0x200449c0
 80065d8:	40001000 	.word	0x40001000

080065dc <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b082      	sub	sp, #8
 80065e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80065e2:	463b      	mov	r3, r7
 80065e4:	2200      	movs	r2, #0
 80065e6:	601a      	str	r2, [r3, #0]
 80065e8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80065ea:	4b14      	ldr	r3, [pc, #80]	; (800663c <MX_TIM7_Init+0x60>)
 80065ec:	4a14      	ldr	r2, [pc, #80]	; (8006640 <MX_TIM7_Init+0x64>)
 80065ee:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 179;
 80065f0:	4b12      	ldr	r3, [pc, #72]	; (800663c <MX_TIM7_Init+0x60>)
 80065f2:	22b3      	movs	r2, #179	; 0xb3
 80065f4:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80065f6:	4b11      	ldr	r3, [pc, #68]	; (800663c <MX_TIM7_Init+0x60>)
 80065f8:	2200      	movs	r2, #0
 80065fa:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 49;
 80065fc:	4b0f      	ldr	r3, [pc, #60]	; (800663c <MX_TIM7_Init+0x60>)
 80065fe:	2231      	movs	r2, #49	; 0x31
 8006600:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006602:	4b0e      	ldr	r3, [pc, #56]	; (800663c <MX_TIM7_Init+0x60>)
 8006604:	2280      	movs	r2, #128	; 0x80
 8006606:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8006608:	480c      	ldr	r0, [pc, #48]	; (800663c <MX_TIM7_Init+0x60>)
 800660a:	f008 f9eb 	bl	800e9e4 <HAL_TIM_Base_Init>
 800660e:	4603      	mov	r3, r0
 8006610:	2b00      	cmp	r3, #0
 8006612:	d001      	beq.n	8006618 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8006614:	f000 faca 	bl	8006bac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006618:	2300      	movs	r3, #0
 800661a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800661c:	2300      	movs	r3, #0
 800661e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8006620:	463b      	mov	r3, r7
 8006622:	4619      	mov	r1, r3
 8006624:	4805      	ldr	r0, [pc, #20]	; (800663c <MX_TIM7_Init+0x60>)
 8006626:	f008 ffcb 	bl	800f5c0 <HAL_TIMEx_MasterConfigSynchronization>
 800662a:	4603      	mov	r3, r0
 800662c:	2b00      	cmp	r3, #0
 800662e:	d001      	beq.n	8006634 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8006630:	f000 fabc 	bl	8006bac <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8006634:	bf00      	nop
 8006636:	3708      	adds	r7, #8
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}
 800663c:	20044b64 	.word	0x20044b64
 8006640:	40001400 	.word	0x40001400

08006644 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b08c      	sub	sp, #48	; 0x30
 8006648:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800664a:	f107 030c 	add.w	r3, r7, #12
 800664e:	2224      	movs	r2, #36	; 0x24
 8006650:	2100      	movs	r1, #0
 8006652:	4618      	mov	r0, r3
 8006654:	f00e fe0f 	bl	8015276 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006658:	1d3b      	adds	r3, r7, #4
 800665a:	2200      	movs	r2, #0
 800665c:	601a      	str	r2, [r3, #0]
 800665e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8006660:	4b22      	ldr	r3, [pc, #136]	; (80066ec <MX_TIM8_Init+0xa8>)
 8006662:	4a23      	ldr	r2, [pc, #140]	; (80066f0 <MX_TIM8_Init+0xac>)
 8006664:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8006666:	4b21      	ldr	r3, [pc, #132]	; (80066ec <MX_TIM8_Init+0xa8>)
 8006668:	2200      	movs	r2, #0
 800666a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 800666c:	4b1f      	ldr	r3, [pc, #124]	; (80066ec <MX_TIM8_Init+0xa8>)
 800666e:	2210      	movs	r2, #16
 8006670:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8006672:	4b1e      	ldr	r3, [pc, #120]	; (80066ec <MX_TIM8_Init+0xa8>)
 8006674:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006678:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800667a:	4b1c      	ldr	r3, [pc, #112]	; (80066ec <MX_TIM8_Init+0xa8>)
 800667c:	2200      	movs	r2, #0
 800667e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8006680:	4b1a      	ldr	r3, [pc, #104]	; (80066ec <MX_TIM8_Init+0xa8>)
 8006682:	2200      	movs	r2, #0
 8006684:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006686:	4b19      	ldr	r3, [pc, #100]	; (80066ec <MX_TIM8_Init+0xa8>)
 8006688:	2200      	movs	r2, #0
 800668a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800668c:	2303      	movs	r3, #3
 800668e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8006690:	2300      	movs	r3, #0
 8006692:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8006694:	2301      	movs	r3, #1
 8006696:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8006698:	2300      	movs	r3, #0
 800669a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800669c:	2300      	movs	r3, #0
 800669e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80066a0:	2300      	movs	r3, #0
 80066a2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80066a4:	2301      	movs	r3, #1
 80066a6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80066a8:	2300      	movs	r3, #0
 80066aa:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80066ac:	2300      	movs	r3, #0
 80066ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80066b0:	f107 030c 	add.w	r3, r7, #12
 80066b4:	4619      	mov	r1, r3
 80066b6:	480d      	ldr	r0, [pc, #52]	; (80066ec <MX_TIM8_Init+0xa8>)
 80066b8:	f008 fa4c 	bl	800eb54 <HAL_TIM_Encoder_Init>
 80066bc:	4603      	mov	r3, r0
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d001      	beq.n	80066c6 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 80066c2:	f000 fa73 	bl	8006bac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80066c6:	2300      	movs	r3, #0
 80066c8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80066ca:	2300      	movs	r3, #0
 80066cc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80066ce:	1d3b      	adds	r3, r7, #4
 80066d0:	4619      	mov	r1, r3
 80066d2:	4806      	ldr	r0, [pc, #24]	; (80066ec <MX_TIM8_Init+0xa8>)
 80066d4:	f008 ff74 	bl	800f5c0 <HAL_TIMEx_MasterConfigSynchronization>
 80066d8:	4603      	mov	r3, r0
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d001      	beq.n	80066e2 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 80066de:	f000 fa65 	bl	8006bac <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80066e2:	bf00      	nop
 80066e4:	3730      	adds	r7, #48	; 0x30
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}
 80066ea:	bf00      	nop
 80066ec:	200446e4 	.word	0x200446e4
 80066f0:	40010400 	.word	0x40010400

080066f4 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b088      	sub	sp, #32
 80066f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80066fa:	1d3b      	adds	r3, r7, #4
 80066fc:	2200      	movs	r2, #0
 80066fe:	601a      	str	r2, [r3, #0]
 8006700:	605a      	str	r2, [r3, #4]
 8006702:	609a      	str	r2, [r3, #8]
 8006704:	60da      	str	r2, [r3, #12]
 8006706:	611a      	str	r2, [r3, #16]
 8006708:	615a      	str	r2, [r3, #20]
 800670a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800670c:	4b1e      	ldr	r3, [pc, #120]	; (8006788 <MX_TIM10_Init+0x94>)
 800670e:	4a1f      	ldr	r2, [pc, #124]	; (800678c <MX_TIM10_Init+0x98>)
 8006710:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 1;
 8006712:	4b1d      	ldr	r3, [pc, #116]	; (8006788 <MX_TIM10_Init+0x94>)
 8006714:	2201      	movs	r2, #1
 8006716:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006718:	4b1b      	ldr	r3, [pc, #108]	; (8006788 <MX_TIM10_Init+0x94>)
 800671a:	2200      	movs	r2, #0
 800671c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 8999;
 800671e:	4b1a      	ldr	r3, [pc, #104]	; (8006788 <MX_TIM10_Init+0x94>)
 8006720:	f242 3227 	movw	r2, #8999	; 0x2327
 8006724:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006726:	4b18      	ldr	r3, [pc, #96]	; (8006788 <MX_TIM10_Init+0x94>)
 8006728:	2200      	movs	r2, #0
 800672a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800672c:	4b16      	ldr	r3, [pc, #88]	; (8006788 <MX_TIM10_Init+0x94>)
 800672e:	2200      	movs	r2, #0
 8006730:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8006732:	4815      	ldr	r0, [pc, #84]	; (8006788 <MX_TIM10_Init+0x94>)
 8006734:	f008 f956 	bl	800e9e4 <HAL_TIM_Base_Init>
 8006738:	4603      	mov	r3, r0
 800673a:	2b00      	cmp	r3, #0
 800673c:	d001      	beq.n	8006742 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 800673e:	f000 fa35 	bl	8006bac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8006742:	4811      	ldr	r0, [pc, #68]	; (8006788 <MX_TIM10_Init+0x94>)
 8006744:	f008 f99d 	bl	800ea82 <HAL_TIM_PWM_Init>
 8006748:	4603      	mov	r3, r0
 800674a:	2b00      	cmp	r3, #0
 800674c:	d001      	beq.n	8006752 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 800674e:	f000 fa2d 	bl	8006bac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006752:	2360      	movs	r3, #96	; 0x60
 8006754:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006756:	2300      	movs	r3, #0
 8006758:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800675a:	2300      	movs	r3, #0
 800675c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800675e:	2300      	movs	r3, #0
 8006760:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8006762:	1d3b      	adds	r3, r7, #4
 8006764:	2200      	movs	r2, #0
 8006766:	4619      	mov	r1, r3
 8006768:	4807      	ldr	r0, [pc, #28]	; (8006788 <MX_TIM10_Init+0x94>)
 800676a:	f008 fbc5 	bl	800eef8 <HAL_TIM_PWM_ConfigChannel>
 800676e:	4603      	mov	r3, r0
 8006770:	2b00      	cmp	r3, #0
 8006772:	d001      	beq.n	8006778 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8006774:	f000 fa1a 	bl	8006bac <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8006778:	4803      	ldr	r0, [pc, #12]	; (8006788 <MX_TIM10_Init+0x94>)
 800677a:	f000 fe07 	bl	800738c <HAL_TIM_MspPostInit>

}
 800677e:	bf00      	nop
 8006780:	3720      	adds	r7, #32
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}
 8006786:	bf00      	nop
 8006788:	20044800 	.word	0x20044800
 800678c:	40014400 	.word	0x40014400

08006790 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b088      	sub	sp, #32
 8006794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8006796:	1d3b      	adds	r3, r7, #4
 8006798:	2200      	movs	r2, #0
 800679a:	601a      	str	r2, [r3, #0]
 800679c:	605a      	str	r2, [r3, #4]
 800679e:	609a      	str	r2, [r3, #8]
 80067a0:	60da      	str	r2, [r3, #12]
 80067a2:	611a      	str	r2, [r3, #16]
 80067a4:	615a      	str	r2, [r3, #20]
 80067a6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80067a8:	4b1e      	ldr	r3, [pc, #120]	; (8006824 <MX_TIM11_Init+0x94>)
 80067aa:	4a1f      	ldr	r2, [pc, #124]	; (8006828 <MX_TIM11_Init+0x98>)
 80067ac:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 1;
 80067ae:	4b1d      	ldr	r3, [pc, #116]	; (8006824 <MX_TIM11_Init+0x94>)
 80067b0:	2201      	movs	r2, #1
 80067b2:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80067b4:	4b1b      	ldr	r3, [pc, #108]	; (8006824 <MX_TIM11_Init+0x94>)
 80067b6:	2200      	movs	r2, #0
 80067b8:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 8999;
 80067ba:	4b1a      	ldr	r3, [pc, #104]	; (8006824 <MX_TIM11_Init+0x94>)
 80067bc:	f242 3227 	movw	r2, #8999	; 0x2327
 80067c0:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80067c2:	4b18      	ldr	r3, [pc, #96]	; (8006824 <MX_TIM11_Init+0x94>)
 80067c4:	2200      	movs	r2, #0
 80067c6:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80067c8:	4b16      	ldr	r3, [pc, #88]	; (8006824 <MX_TIM11_Init+0x94>)
 80067ca:	2200      	movs	r2, #0
 80067cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80067ce:	4815      	ldr	r0, [pc, #84]	; (8006824 <MX_TIM11_Init+0x94>)
 80067d0:	f008 f908 	bl	800e9e4 <HAL_TIM_Base_Init>
 80067d4:	4603      	mov	r3, r0
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d001      	beq.n	80067de <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 80067da:	f000 f9e7 	bl	8006bac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 80067de:	4811      	ldr	r0, [pc, #68]	; (8006824 <MX_TIM11_Init+0x94>)
 80067e0:	f008 f94f 	bl	800ea82 <HAL_TIM_PWM_Init>
 80067e4:	4603      	mov	r3, r0
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d001      	beq.n	80067ee <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 80067ea:	f000 f9df 	bl	8006bac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80067ee:	2360      	movs	r3, #96	; 0x60
 80067f0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80067f2:	2300      	movs	r3, #0
 80067f4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80067f6:	2300      	movs	r3, #0
 80067f8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80067fa:	2300      	movs	r3, #0
 80067fc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80067fe:	1d3b      	adds	r3, r7, #4
 8006800:	2200      	movs	r2, #0
 8006802:	4619      	mov	r1, r3
 8006804:	4807      	ldr	r0, [pc, #28]	; (8006824 <MX_TIM11_Init+0x94>)
 8006806:	f008 fb77 	bl	800eef8 <HAL_TIM_PWM_ConfigChannel>
 800680a:	4603      	mov	r3, r0
 800680c:	2b00      	cmp	r3, #0
 800680e:	d001      	beq.n	8006814 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8006810:	f000 f9cc 	bl	8006bac <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8006814:	4803      	ldr	r0, [pc, #12]	; (8006824 <MX_TIM11_Init+0x94>)
 8006816:	f000 fdb9 	bl	800738c <HAL_TIM_MspPostInit>

}
 800681a:	bf00      	nop
 800681c:	3720      	adds	r7, #32
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}
 8006822:	bf00      	nop
 8006824:	20044920 	.word	0x20044920
 8006828:	40014800 	.word	0x40014800

0800682c <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8006830:	4b0e      	ldr	r3, [pc, #56]	; (800686c <MX_TIM13_Init+0x40>)
 8006832:	4a0f      	ldr	r2, [pc, #60]	; (8006870 <MX_TIM13_Init+0x44>)
 8006834:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 89;
 8006836:	4b0d      	ldr	r3, [pc, #52]	; (800686c <MX_TIM13_Init+0x40>)
 8006838:	2259      	movs	r2, #89	; 0x59
 800683a:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800683c:	4b0b      	ldr	r3, [pc, #44]	; (800686c <MX_TIM13_Init+0x40>)
 800683e:	2200      	movs	r2, #0
 8006840:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 8006842:	4b0a      	ldr	r3, [pc, #40]	; (800686c <MX_TIM13_Init+0x40>)
 8006844:	f242 720f 	movw	r2, #9999	; 0x270f
 8006848:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800684a:	4b08      	ldr	r3, [pc, #32]	; (800686c <MX_TIM13_Init+0x40>)
 800684c:	2200      	movs	r2, #0
 800684e:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006850:	4b06      	ldr	r3, [pc, #24]	; (800686c <MX_TIM13_Init+0x40>)
 8006852:	2280      	movs	r2, #128	; 0x80
 8006854:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8006856:	4805      	ldr	r0, [pc, #20]	; (800686c <MX_TIM13_Init+0x40>)
 8006858:	f008 f8c4 	bl	800e9e4 <HAL_TIM_Base_Init>
 800685c:	4603      	mov	r3, r0
 800685e:	2b00      	cmp	r3, #0
 8006860:	d001      	beq.n	8006866 <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8006862:	f000 f9a3 	bl	8006bac <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8006866:	bf00      	nop
 8006868:	bd80      	pop	{r7, pc}
 800686a:	bf00      	nop
 800686c:	200448e0 	.word	0x200448e0
 8006870:	40001c00 	.word	0x40001c00

08006874 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006878:	4b11      	ldr	r3, [pc, #68]	; (80068c0 <MX_USART2_UART_Init+0x4c>)
 800687a:	4a12      	ldr	r2, [pc, #72]	; (80068c4 <MX_USART2_UART_Init+0x50>)
 800687c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800687e:	4b10      	ldr	r3, [pc, #64]	; (80068c0 <MX_USART2_UART_Init+0x4c>)
 8006880:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006884:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006886:	4b0e      	ldr	r3, [pc, #56]	; (80068c0 <MX_USART2_UART_Init+0x4c>)
 8006888:	2200      	movs	r2, #0
 800688a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800688c:	4b0c      	ldr	r3, [pc, #48]	; (80068c0 <MX_USART2_UART_Init+0x4c>)
 800688e:	2200      	movs	r2, #0
 8006890:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8006892:	4b0b      	ldr	r3, [pc, #44]	; (80068c0 <MX_USART2_UART_Init+0x4c>)
 8006894:	2200      	movs	r2, #0
 8006896:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006898:	4b09      	ldr	r3, [pc, #36]	; (80068c0 <MX_USART2_UART_Init+0x4c>)
 800689a:	220c      	movs	r2, #12
 800689c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800689e:	4b08      	ldr	r3, [pc, #32]	; (80068c0 <MX_USART2_UART_Init+0x4c>)
 80068a0:	2200      	movs	r2, #0
 80068a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80068a4:	4b06      	ldr	r3, [pc, #24]	; (80068c0 <MX_USART2_UART_Init+0x4c>)
 80068a6:	2200      	movs	r2, #0
 80068a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80068aa:	4805      	ldr	r0, [pc, #20]	; (80068c0 <MX_USART2_UART_Init+0x4c>)
 80068ac:	f008 ff6a 	bl	800f784 <HAL_UART_Init>
 80068b0:	4603      	mov	r3, r0
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d001      	beq.n	80068ba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80068b6:	f000 f979 	bl	8006bac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80068ba:	bf00      	nop
 80068bc:	bd80      	pop	{r7, pc}
 80068be:	bf00      	nop
 80068c0:	20044ac4 	.word	0x20044ac4
 80068c4:	40004400 	.word	0x40004400

080068c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b082      	sub	sp, #8
 80068cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80068ce:	2300      	movs	r3, #0
 80068d0:	607b      	str	r3, [r7, #4]
 80068d2:	4b14      	ldr	r3, [pc, #80]	; (8006924 <MX_DMA_Init+0x5c>)
 80068d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068d6:	4a13      	ldr	r2, [pc, #76]	; (8006924 <MX_DMA_Init+0x5c>)
 80068d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80068dc:	6313      	str	r3, [r2, #48]	; 0x30
 80068de:	4b11      	ldr	r3, [pc, #68]	; (8006924 <MX_DMA_Init+0x5c>)
 80068e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068e6:	607b      	str	r3, [r7, #4]
 80068e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80068ea:	2200      	movs	r2, #0
 80068ec:	2100      	movs	r1, #0
 80068ee:	203a      	movs	r0, #58	; 0x3a
 80068f0:	f003 fc43 	bl	800a17a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80068f4:	203a      	movs	r0, #58	; 0x3a
 80068f6:	f003 fc5c 	bl	800a1b2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80068fa:	2200      	movs	r2, #0
 80068fc:	2100      	movs	r1, #0
 80068fe:	203b      	movs	r0, #59	; 0x3b
 8006900:	f003 fc3b 	bl	800a17a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8006904:	203b      	movs	r0, #59	; 0x3b
 8006906:	f003 fc54 	bl	800a1b2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800690a:	2200      	movs	r2, #0
 800690c:	2100      	movs	r1, #0
 800690e:	2045      	movs	r0, #69	; 0x45
 8006910:	f003 fc33 	bl	800a17a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8006914:	2045      	movs	r0, #69	; 0x45
 8006916:	f003 fc4c 	bl	800a1b2 <HAL_NVIC_EnableIRQ>

}
 800691a:	bf00      	nop
 800691c:	3708      	adds	r7, #8
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}
 8006922:	bf00      	nop
 8006924:	40023800 	.word	0x40023800

08006928 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b08c      	sub	sp, #48	; 0x30
 800692c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800692e:	f107 031c 	add.w	r3, r7, #28
 8006932:	2200      	movs	r2, #0
 8006934:	601a      	str	r2, [r3, #0]
 8006936:	605a      	str	r2, [r3, #4]
 8006938:	609a      	str	r2, [r3, #8]
 800693a:	60da      	str	r2, [r3, #12]
 800693c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800693e:	2300      	movs	r3, #0
 8006940:	61bb      	str	r3, [r7, #24]
 8006942:	4b94      	ldr	r3, [pc, #592]	; (8006b94 <MX_GPIO_Init+0x26c>)
 8006944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006946:	4a93      	ldr	r2, [pc, #588]	; (8006b94 <MX_GPIO_Init+0x26c>)
 8006948:	f043 0310 	orr.w	r3, r3, #16
 800694c:	6313      	str	r3, [r2, #48]	; 0x30
 800694e:	4b91      	ldr	r3, [pc, #580]	; (8006b94 <MX_GPIO_Init+0x26c>)
 8006950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006952:	f003 0310 	and.w	r3, r3, #16
 8006956:	61bb      	str	r3, [r7, #24]
 8006958:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800695a:	2300      	movs	r3, #0
 800695c:	617b      	str	r3, [r7, #20]
 800695e:	4b8d      	ldr	r3, [pc, #564]	; (8006b94 <MX_GPIO_Init+0x26c>)
 8006960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006962:	4a8c      	ldr	r2, [pc, #560]	; (8006b94 <MX_GPIO_Init+0x26c>)
 8006964:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006968:	6313      	str	r3, [r2, #48]	; 0x30
 800696a:	4b8a      	ldr	r3, [pc, #552]	; (8006b94 <MX_GPIO_Init+0x26c>)
 800696c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800696e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006972:	617b      	str	r3, [r7, #20]
 8006974:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006976:	2300      	movs	r3, #0
 8006978:	613b      	str	r3, [r7, #16]
 800697a:	4b86      	ldr	r3, [pc, #536]	; (8006b94 <MX_GPIO_Init+0x26c>)
 800697c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800697e:	4a85      	ldr	r2, [pc, #532]	; (8006b94 <MX_GPIO_Init+0x26c>)
 8006980:	f043 0304 	orr.w	r3, r3, #4
 8006984:	6313      	str	r3, [r2, #48]	; 0x30
 8006986:	4b83      	ldr	r3, [pc, #524]	; (8006b94 <MX_GPIO_Init+0x26c>)
 8006988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800698a:	f003 0304 	and.w	r3, r3, #4
 800698e:	613b      	str	r3, [r7, #16]
 8006990:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006992:	2300      	movs	r3, #0
 8006994:	60fb      	str	r3, [r7, #12]
 8006996:	4b7f      	ldr	r3, [pc, #508]	; (8006b94 <MX_GPIO_Init+0x26c>)
 8006998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800699a:	4a7e      	ldr	r2, [pc, #504]	; (8006b94 <MX_GPIO_Init+0x26c>)
 800699c:	f043 0301 	orr.w	r3, r3, #1
 80069a0:	6313      	str	r3, [r2, #48]	; 0x30
 80069a2:	4b7c      	ldr	r3, [pc, #496]	; (8006b94 <MX_GPIO_Init+0x26c>)
 80069a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069a6:	f003 0301 	and.w	r3, r3, #1
 80069aa:	60fb      	str	r3, [r7, #12]
 80069ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80069ae:	2300      	movs	r3, #0
 80069b0:	60bb      	str	r3, [r7, #8]
 80069b2:	4b78      	ldr	r3, [pc, #480]	; (8006b94 <MX_GPIO_Init+0x26c>)
 80069b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069b6:	4a77      	ldr	r2, [pc, #476]	; (8006b94 <MX_GPIO_Init+0x26c>)
 80069b8:	f043 0302 	orr.w	r3, r3, #2
 80069bc:	6313      	str	r3, [r2, #48]	; 0x30
 80069be:	4b75      	ldr	r3, [pc, #468]	; (8006b94 <MX_GPIO_Init+0x26c>)
 80069c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069c2:	f003 0302 	and.w	r3, r3, #2
 80069c6:	60bb      	str	r3, [r7, #8]
 80069c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80069ca:	2300      	movs	r3, #0
 80069cc:	607b      	str	r3, [r7, #4]
 80069ce:	4b71      	ldr	r3, [pc, #452]	; (8006b94 <MX_GPIO_Init+0x26c>)
 80069d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069d2:	4a70      	ldr	r2, [pc, #448]	; (8006b94 <MX_GPIO_Init+0x26c>)
 80069d4:	f043 0308 	orr.w	r3, r3, #8
 80069d8:	6313      	str	r3, [r2, #48]	; 0x30
 80069da:	4b6e      	ldr	r3, [pc, #440]	; (8006b94 <MX_GPIO_Init+0x26c>)
 80069dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069de:	f003 0308 	and.w	r3, r3, #8
 80069e2:	607b      	str	r3, [r7, #4]
 80069e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 80069e6:	2200      	movs	r2, #0
 80069e8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80069ec:	486a      	ldr	r0, [pc, #424]	; (8006b98 <MX_GPIO_Init+0x270>)
 80069ee:	f004 f959 	bl	800aca4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80069f2:	2200      	movs	r2, #0
 80069f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80069f8:	4868      	ldr	r0, [pc, #416]	; (8006b9c <MX_GPIO_Init+0x274>)
 80069fa:	f004 f953 	bl	800aca4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 80069fe:	2200      	movs	r2, #0
 8006a00:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006a04:	4866      	ldr	r0, [pc, #408]	; (8006ba0 <MX_GPIO_Init+0x278>)
 8006a06:	f004 f94d 	bl	800aca4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8006a10:	4864      	ldr	r0, [pc, #400]	; (8006ba4 <MX_GPIO_Init+0x27c>)
 8006a12:	f004 f947 	bl	800aca4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006a16:	2304      	movs	r3, #4
 8006a18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006a22:	f107 031c 	add.w	r3, r7, #28
 8006a26:	4619      	mov	r1, r3
 8006a28:	485b      	ldr	r0, [pc, #364]	; (8006b98 <MX_GPIO_Init+0x270>)
 8006a2a:	f003 ff79 	bl	800a920 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8006a2e:	230f      	movs	r3, #15
 8006a30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006a32:	2303      	movs	r3, #3
 8006a34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a36:	2300      	movs	r3, #0
 8006a38:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006a3a:	f107 031c 	add.w	r3, r7, #28
 8006a3e:	4619      	mov	r1, r3
 8006a40:	4859      	ldr	r0, [pc, #356]	; (8006ba8 <MX_GPIO_Init+0x280>)
 8006a42:	f003 ff6d 	bl	800a920 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8006a46:	23e1      	movs	r3, #225	; 0xe1
 8006a48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006a4a:	2303      	movs	r3, #3
 8006a4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a52:	f107 031c 	add.w	r3, r7, #28
 8006a56:	4619      	mov	r1, r3
 8006a58:	4852      	ldr	r0, [pc, #328]	; (8006ba4 <MX_GPIO_Init+0x27c>)
 8006a5a:	f003 ff61 	bl	800a920 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006a5e:	2303      	movs	r3, #3
 8006a60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006a62:	2303      	movs	r3, #3
 8006a64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a66:	2300      	movs	r3, #0
 8006a68:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006a6a:	f107 031c 	add.w	r3, r7, #28
 8006a6e:	4619      	mov	r1, r3
 8006a70:	484a      	ldr	r0, [pc, #296]	; (8006b9c <MX_GPIO_Init+0x274>)
 8006a72:	f003 ff55 	bl	800a920 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006a76:	2304      	movs	r3, #4
 8006a78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006a82:	f107 031c 	add.w	r3, r7, #28
 8006a86:	4619      	mov	r1, r3
 8006a88:	4844      	ldr	r0, [pc, #272]	; (8006b9c <MX_GPIO_Init+0x274>)
 8006a8a:	f003 ff49 	bl	800a920 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 8006a8e:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 8006a92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006a94:	2300      	movs	r3, #0
 8006a96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006a98:	2301      	movs	r3, #1
 8006a9a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006a9c:	f107 031c 	add.w	r3, r7, #28
 8006aa0:	4619      	mov	r1, r3
 8006aa2:	483d      	ldr	r0, [pc, #244]	; (8006b98 <MX_GPIO_Init+0x270>)
 8006aa4:	f003 ff3c 	bl	800a920 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8006aa8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006aac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006aae:	2301      	movs	r3, #1
 8006ab0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006aba:	f107 031c 	add.w	r3, r7, #28
 8006abe:	4619      	mov	r1, r3
 8006ac0:	4835      	ldr	r0, [pc, #212]	; (8006b98 <MX_GPIO_Init+0x270>)
 8006ac2:	f003 ff2d 	bl	800a920 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8006ac6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006aca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006acc:	2301      	movs	r3, #1
 8006ace:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006ad8:	f107 031c 	add.w	r3, r7, #28
 8006adc:	4619      	mov	r1, r3
 8006ade:	482f      	ldr	r0, [pc, #188]	; (8006b9c <MX_GPIO_Init+0x274>)
 8006ae0:	f003 ff1e 	bl	800a920 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006ae4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006ae8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006aea:	2300      	movs	r3, #0
 8006aec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006aee:	2300      	movs	r3, #0
 8006af0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006af2:	f107 031c 	add.w	r3, r7, #28
 8006af6:	4619      	mov	r1, r3
 8006af8:	4829      	ldr	r0, [pc, #164]	; (8006ba0 <MX_GPIO_Init+0x278>)
 8006afa:	f003 ff11 	bl	800a920 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006afe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006b04:	2301      	movs	r3, #1
 8006b06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006b10:	f107 031c 	add.w	r3, r7, #28
 8006b14:	4619      	mov	r1, r3
 8006b16:	4822      	ldr	r0, [pc, #136]	; (8006ba0 <MX_GPIO_Init+0x278>)
 8006b18:	f003 ff02 	bl	800a920 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006b1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006b22:	2301      	movs	r3, #1
 8006b24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006b26:	2301      	movs	r3, #1
 8006b28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006b2e:	f107 031c 	add.w	r3, r7, #28
 8006b32:	4619      	mov	r1, r3
 8006b34:	481a      	ldr	r0, [pc, #104]	; (8006ba0 <MX_GPIO_Init+0x278>)
 8006b36:	f003 fef3 	bl	800a920 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8006b3a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8006b3e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006b40:	2301      	movs	r3, #1
 8006b42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b44:	2300      	movs	r3, #0
 8006b46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b4c:	f107 031c 	add.w	r3, r7, #28
 8006b50:	4619      	mov	r1, r3
 8006b52:	4814      	ldr	r0, [pc, #80]	; (8006ba4 <MX_GPIO_Init+0x27c>)
 8006b54:	f003 fee4 	bl	800a920 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8006b58:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b62:	2300      	movs	r3, #0
 8006b64:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b66:	f107 031c 	add.w	r3, r7, #28
 8006b6a:	4619      	mov	r1, r3
 8006b6c:	480d      	ldr	r0, [pc, #52]	; (8006ba4 <MX_GPIO_Init+0x27c>)
 8006b6e:	f003 fed7 	bl	800a920 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8006b72:	239b      	movs	r3, #155	; 0x9b
 8006b74:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006b76:	2300      	movs	r3, #0
 8006b78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006b7e:	f107 031c 	add.w	r3, r7, #28
 8006b82:	4619      	mov	r1, r3
 8006b84:	4806      	ldr	r0, [pc, #24]	; (8006ba0 <MX_GPIO_Init+0x278>)
 8006b86:	f003 fecb 	bl	800a920 <HAL_GPIO_Init>

}
 8006b8a:	bf00      	nop
 8006b8c:	3730      	adds	r7, #48	; 0x30
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	bd80      	pop	{r7, pc}
 8006b92:	bf00      	nop
 8006b94:	40023800 	.word	0x40023800
 8006b98:	40021000 	.word	0x40021000
 8006b9c:	40020400 	.word	0x40020400
 8006ba0:	40020c00 	.word	0x40020c00
 8006ba4:	40020000 	.word	0x40020000
 8006ba8:	40020800 	.word	0x40020800

08006bac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006bac:	b480      	push	{r7}
 8006bae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006bb0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006bb2:	e7fe      	b.n	8006bb2 <Error_Handler+0x6>

08006bb4 <path_following_initialize>:
  /* End of Outputs for SubSystem: '<Root>/path_following' */
}

/* Model initialize function */
void path_following_initialize(void)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	af00      	add	r7, sp, #0
  /* (no initialization code required) */
}
 8006bb8:	bf00      	nop
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc0:	4770      	bx	lr
	...

08006bc4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b083      	sub	sp, #12
 8006bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006bca:	2300      	movs	r3, #0
 8006bcc:	607b      	str	r3, [r7, #4]
 8006bce:	4b10      	ldr	r3, [pc, #64]	; (8006c10 <HAL_MspInit+0x4c>)
 8006bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bd2:	4a0f      	ldr	r2, [pc, #60]	; (8006c10 <HAL_MspInit+0x4c>)
 8006bd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006bd8:	6453      	str	r3, [r2, #68]	; 0x44
 8006bda:	4b0d      	ldr	r3, [pc, #52]	; (8006c10 <HAL_MspInit+0x4c>)
 8006bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006be2:	607b      	str	r3, [r7, #4]
 8006be4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006be6:	2300      	movs	r3, #0
 8006be8:	603b      	str	r3, [r7, #0]
 8006bea:	4b09      	ldr	r3, [pc, #36]	; (8006c10 <HAL_MspInit+0x4c>)
 8006bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bee:	4a08      	ldr	r2, [pc, #32]	; (8006c10 <HAL_MspInit+0x4c>)
 8006bf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bf4:	6413      	str	r3, [r2, #64]	; 0x40
 8006bf6:	4b06      	ldr	r3, [pc, #24]	; (8006c10 <HAL_MspInit+0x4c>)
 8006bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bfe:	603b      	str	r3, [r7, #0]
 8006c00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006c02:	bf00      	nop
 8006c04:	370c      	adds	r7, #12
 8006c06:	46bd      	mov	sp, r7
 8006c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0c:	4770      	bx	lr
 8006c0e:	bf00      	nop
 8006c10:	40023800 	.word	0x40023800

08006c14 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b08c      	sub	sp, #48	; 0x30
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c1c:	f107 031c 	add.w	r3, r7, #28
 8006c20:	2200      	movs	r2, #0
 8006c22:	601a      	str	r2, [r3, #0]
 8006c24:	605a      	str	r2, [r3, #4]
 8006c26:	609a      	str	r2, [r3, #8]
 8006c28:	60da      	str	r2, [r3, #12]
 8006c2a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a4a      	ldr	r2, [pc, #296]	; (8006d5c <HAL_ADC_MspInit+0x148>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	f040 808e 	bne.w	8006d54 <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 8006c38:	2300      	movs	r3, #0
 8006c3a:	61bb      	str	r3, [r7, #24]
 8006c3c:	4b48      	ldr	r3, [pc, #288]	; (8006d60 <HAL_ADC_MspInit+0x14c>)
 8006c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c40:	4a47      	ldr	r2, [pc, #284]	; (8006d60 <HAL_ADC_MspInit+0x14c>)
 8006c42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006c46:	6453      	str	r3, [r2, #68]	; 0x44
 8006c48:	4b45      	ldr	r3, [pc, #276]	; (8006d60 <HAL_ADC_MspInit+0x14c>)
 8006c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c50:	61bb      	str	r3, [r7, #24]
 8006c52:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006c54:	2300      	movs	r3, #0
 8006c56:	617b      	str	r3, [r7, #20]
 8006c58:	4b41      	ldr	r3, [pc, #260]	; (8006d60 <HAL_ADC_MspInit+0x14c>)
 8006c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c5c:	4a40      	ldr	r2, [pc, #256]	; (8006d60 <HAL_ADC_MspInit+0x14c>)
 8006c5e:	f043 0304 	orr.w	r3, r3, #4
 8006c62:	6313      	str	r3, [r2, #48]	; 0x30
 8006c64:	4b3e      	ldr	r3, [pc, #248]	; (8006d60 <HAL_ADC_MspInit+0x14c>)
 8006c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c68:	f003 0304 	and.w	r3, r3, #4
 8006c6c:	617b      	str	r3, [r7, #20]
 8006c6e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c70:	2300      	movs	r3, #0
 8006c72:	613b      	str	r3, [r7, #16]
 8006c74:	4b3a      	ldr	r3, [pc, #232]	; (8006d60 <HAL_ADC_MspInit+0x14c>)
 8006c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c78:	4a39      	ldr	r2, [pc, #228]	; (8006d60 <HAL_ADC_MspInit+0x14c>)
 8006c7a:	f043 0301 	orr.w	r3, r3, #1
 8006c7e:	6313      	str	r3, [r2, #48]	; 0x30
 8006c80:	4b37      	ldr	r3, [pc, #220]	; (8006d60 <HAL_ADC_MspInit+0x14c>)
 8006c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c84:	f003 0301 	and.w	r3, r3, #1
 8006c88:	613b      	str	r3, [r7, #16]
 8006c8a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	60fb      	str	r3, [r7, #12]
 8006c90:	4b33      	ldr	r3, [pc, #204]	; (8006d60 <HAL_ADC_MspInit+0x14c>)
 8006c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c94:	4a32      	ldr	r2, [pc, #200]	; (8006d60 <HAL_ADC_MspInit+0x14c>)
 8006c96:	f043 0302 	orr.w	r3, r3, #2
 8006c9a:	6313      	str	r3, [r2, #48]	; 0x30
 8006c9c:	4b30      	ldr	r3, [pc, #192]	; (8006d60 <HAL_ADC_MspInit+0x14c>)
 8006c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ca0:	f003 0302 	and.w	r3, r3, #2
 8006ca4:	60fb      	str	r3, [r7, #12]
 8006ca6:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC2_IN6
    PA7     ------> ADC2_IN7
    PB0     ------> ADC2_IN8
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8006ca8:	230f      	movs	r3, #15
 8006caa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006cac:	2303      	movs	r3, #3
 8006cae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006cb4:	f107 031c 	add.w	r3, r7, #28
 8006cb8:	4619      	mov	r1, r3
 8006cba:	482a      	ldr	r0, [pc, #168]	; (8006d64 <HAL_ADC_MspInit+0x150>)
 8006cbc:	f003 fe30 	bl	800a920 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8006cc0:	23ff      	movs	r3, #255	; 0xff
 8006cc2:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006cc4:	2303      	movs	r3, #3
 8006cc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ccc:	f107 031c 	add.w	r3, r7, #28
 8006cd0:	4619      	mov	r1, r3
 8006cd2:	4825      	ldr	r0, [pc, #148]	; (8006d68 <HAL_ADC_MspInit+0x154>)
 8006cd4:	f003 fe24 	bl	800a920 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006cd8:	2303      	movs	r3, #3
 8006cda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006cdc:	2303      	movs	r3, #3
 8006cde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006ce4:	f107 031c 	add.w	r3, r7, #28
 8006ce8:	4619      	mov	r1, r3
 8006cea:	4820      	ldr	r0, [pc, #128]	; (8006d6c <HAL_ADC_MspInit+0x158>)
 8006cec:	f003 fe18 	bl	800a920 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 8006cf0:	4b1f      	ldr	r3, [pc, #124]	; (8006d70 <HAL_ADC_MspInit+0x15c>)
 8006cf2:	4a20      	ldr	r2, [pc, #128]	; (8006d74 <HAL_ADC_MspInit+0x160>)
 8006cf4:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8006cf6:	4b1e      	ldr	r3, [pc, #120]	; (8006d70 <HAL_ADC_MspInit+0x15c>)
 8006cf8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006cfc:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006cfe:	4b1c      	ldr	r3, [pc, #112]	; (8006d70 <HAL_ADC_MspInit+0x15c>)
 8006d00:	2200      	movs	r2, #0
 8006d02:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8006d04:	4b1a      	ldr	r3, [pc, #104]	; (8006d70 <HAL_ADC_MspInit+0x15c>)
 8006d06:	2200      	movs	r2, #0
 8006d08:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8006d0a:	4b19      	ldr	r3, [pc, #100]	; (8006d70 <HAL_ADC_MspInit+0x15c>)
 8006d0c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006d10:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006d12:	4b17      	ldr	r3, [pc, #92]	; (8006d70 <HAL_ADC_MspInit+0x15c>)
 8006d14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d18:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006d1a:	4b15      	ldr	r3, [pc, #84]	; (8006d70 <HAL_ADC_MspInit+0x15c>)
 8006d1c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006d20:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8006d22:	4b13      	ldr	r3, [pc, #76]	; (8006d70 <HAL_ADC_MspInit+0x15c>)
 8006d24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006d28:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006d2a:	4b11      	ldr	r3, [pc, #68]	; (8006d70 <HAL_ADC_MspInit+0x15c>)
 8006d2c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006d30:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006d32:	4b0f      	ldr	r3, [pc, #60]	; (8006d70 <HAL_ADC_MspInit+0x15c>)
 8006d34:	2200      	movs	r2, #0
 8006d36:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8006d38:	480d      	ldr	r0, [pc, #52]	; (8006d70 <HAL_ADC_MspInit+0x15c>)
 8006d3a:	f003 fa55 	bl	800a1e8 <HAL_DMA_Init>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d001      	beq.n	8006d48 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 8006d44:	f7ff ff32 	bl	8006bac <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	4a09      	ldr	r2, [pc, #36]	; (8006d70 <HAL_ADC_MspInit+0x15c>)
 8006d4c:	639a      	str	r2, [r3, #56]	; 0x38
 8006d4e:	4a08      	ldr	r2, [pc, #32]	; (8006d70 <HAL_ADC_MspInit+0x15c>)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8006d54:	bf00      	nop
 8006d56:	3730      	adds	r7, #48	; 0x30
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd80      	pop	{r7, pc}
 8006d5c:	40012100 	.word	0x40012100
 8006d60:	40023800 	.word	0x40023800
 8006d64:	40020800 	.word	0x40020800
 8006d68:	40020000 	.word	0x40020000
 8006d6c:	40020400 	.word	0x40020400
 8006d70:	20044b04 	.word	0x20044b04
 8006d74:	40026440 	.word	0x40026440

08006d78 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b08c      	sub	sp, #48	; 0x30
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d80:	f107 031c 	add.w	r3, r7, #28
 8006d84:	2200      	movs	r2, #0
 8006d86:	601a      	str	r2, [r3, #0]
 8006d88:	605a      	str	r2, [r3, #4]
 8006d8a:	609a      	str	r2, [r3, #8]
 8006d8c:	60da      	str	r2, [r3, #12]
 8006d8e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a32      	ldr	r2, [pc, #200]	; (8006e60 <HAL_I2C_MspInit+0xe8>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d12c      	bne.n	8006df4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	61bb      	str	r3, [r7, #24]
 8006d9e:	4b31      	ldr	r3, [pc, #196]	; (8006e64 <HAL_I2C_MspInit+0xec>)
 8006da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006da2:	4a30      	ldr	r2, [pc, #192]	; (8006e64 <HAL_I2C_MspInit+0xec>)
 8006da4:	f043 0302 	orr.w	r3, r3, #2
 8006da8:	6313      	str	r3, [r2, #48]	; 0x30
 8006daa:	4b2e      	ldr	r3, [pc, #184]	; (8006e64 <HAL_I2C_MspInit+0xec>)
 8006dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dae:	f003 0302 	and.w	r3, r3, #2
 8006db2:	61bb      	str	r3, [r7, #24]
 8006db4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006db6:	23c0      	movs	r3, #192	; 0xc0
 8006db8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006dba:	2312      	movs	r3, #18
 8006dbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006dc2:	2303      	movs	r3, #3
 8006dc4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006dc6:	2304      	movs	r3, #4
 8006dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006dca:	f107 031c 	add.w	r3, r7, #28
 8006dce:	4619      	mov	r1, r3
 8006dd0:	4825      	ldr	r0, [pc, #148]	; (8006e68 <HAL_I2C_MspInit+0xf0>)
 8006dd2:	f003 fda5 	bl	800a920 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	617b      	str	r3, [r7, #20]
 8006dda:	4b22      	ldr	r3, [pc, #136]	; (8006e64 <HAL_I2C_MspInit+0xec>)
 8006ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dde:	4a21      	ldr	r2, [pc, #132]	; (8006e64 <HAL_I2C_MspInit+0xec>)
 8006de0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006de4:	6413      	str	r3, [r2, #64]	; 0x40
 8006de6:	4b1f      	ldr	r3, [pc, #124]	; (8006e64 <HAL_I2C_MspInit+0xec>)
 8006de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006dee:	617b      	str	r3, [r7, #20]
 8006df0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8006df2:	e031      	b.n	8006e58 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4a1c      	ldr	r2, [pc, #112]	; (8006e6c <HAL_I2C_MspInit+0xf4>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d12c      	bne.n	8006e58 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006dfe:	2300      	movs	r3, #0
 8006e00:	613b      	str	r3, [r7, #16]
 8006e02:	4b18      	ldr	r3, [pc, #96]	; (8006e64 <HAL_I2C_MspInit+0xec>)
 8006e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e06:	4a17      	ldr	r2, [pc, #92]	; (8006e64 <HAL_I2C_MspInit+0xec>)
 8006e08:	f043 0302 	orr.w	r3, r3, #2
 8006e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8006e0e:	4b15      	ldr	r3, [pc, #84]	; (8006e64 <HAL_I2C_MspInit+0xec>)
 8006e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e12:	f003 0302 	and.w	r3, r3, #2
 8006e16:	613b      	str	r3, [r7, #16]
 8006e18:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8006e1a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006e1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006e20:	2312      	movs	r3, #18
 8006e22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006e24:	2301      	movs	r3, #1
 8006e26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e28:	2303      	movs	r3, #3
 8006e2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8006e2c:	2304      	movs	r3, #4
 8006e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006e30:	f107 031c 	add.w	r3, r7, #28
 8006e34:	4619      	mov	r1, r3
 8006e36:	480c      	ldr	r0, [pc, #48]	; (8006e68 <HAL_I2C_MspInit+0xf0>)
 8006e38:	f003 fd72 	bl	800a920 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	60fb      	str	r3, [r7, #12]
 8006e40:	4b08      	ldr	r3, [pc, #32]	; (8006e64 <HAL_I2C_MspInit+0xec>)
 8006e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e44:	4a07      	ldr	r2, [pc, #28]	; (8006e64 <HAL_I2C_MspInit+0xec>)
 8006e46:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006e4a:	6413      	str	r3, [r2, #64]	; 0x40
 8006e4c:	4b05      	ldr	r3, [pc, #20]	; (8006e64 <HAL_I2C_MspInit+0xec>)
 8006e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e54:	60fb      	str	r3, [r7, #12]
 8006e56:	68fb      	ldr	r3, [r7, #12]
}
 8006e58:	bf00      	nop
 8006e5a:	3730      	adds	r7, #48	; 0x30
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}
 8006e60:	40005400 	.word	0x40005400
 8006e64:	40023800 	.word	0x40023800
 8006e68:	40020400 	.word	0x40020400
 8006e6c:	40005800 	.word	0x40005800

08006e70 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b08a      	sub	sp, #40	; 0x28
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e78:	f107 0314 	add.w	r3, r7, #20
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	601a      	str	r2, [r3, #0]
 8006e80:	605a      	str	r2, [r3, #4]
 8006e82:	609a      	str	r2, [r3, #8]
 8006e84:	60da      	str	r2, [r3, #12]
 8006e86:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a69      	ldr	r2, [pc, #420]	; (8007034 <HAL_SD_MspInit+0x1c4>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	f040 80cb 	bne.w	800702a <HAL_SD_MspInit+0x1ba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8006e94:	2300      	movs	r3, #0
 8006e96:	613b      	str	r3, [r7, #16]
 8006e98:	4b67      	ldr	r3, [pc, #412]	; (8007038 <HAL_SD_MspInit+0x1c8>)
 8006e9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e9c:	4a66      	ldr	r2, [pc, #408]	; (8007038 <HAL_SD_MspInit+0x1c8>)
 8006e9e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006ea2:	6453      	str	r3, [r2, #68]	; 0x44
 8006ea4:	4b64      	ldr	r3, [pc, #400]	; (8007038 <HAL_SD_MspInit+0x1c8>)
 8006ea6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ea8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006eac:	613b      	str	r3, [r7, #16]
 8006eae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	60fb      	str	r3, [r7, #12]
 8006eb4:	4b60      	ldr	r3, [pc, #384]	; (8007038 <HAL_SD_MspInit+0x1c8>)
 8006eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eb8:	4a5f      	ldr	r2, [pc, #380]	; (8007038 <HAL_SD_MspInit+0x1c8>)
 8006eba:	f043 0304 	orr.w	r3, r3, #4
 8006ebe:	6313      	str	r3, [r2, #48]	; 0x30
 8006ec0:	4b5d      	ldr	r3, [pc, #372]	; (8007038 <HAL_SD_MspInit+0x1c8>)
 8006ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ec4:	f003 0304 	and.w	r3, r3, #4
 8006ec8:	60fb      	str	r3, [r7, #12]
 8006eca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006ecc:	2300      	movs	r3, #0
 8006ece:	60bb      	str	r3, [r7, #8]
 8006ed0:	4b59      	ldr	r3, [pc, #356]	; (8007038 <HAL_SD_MspInit+0x1c8>)
 8006ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ed4:	4a58      	ldr	r2, [pc, #352]	; (8007038 <HAL_SD_MspInit+0x1c8>)
 8006ed6:	f043 0308 	orr.w	r3, r3, #8
 8006eda:	6313      	str	r3, [r2, #48]	; 0x30
 8006edc:	4b56      	ldr	r3, [pc, #344]	; (8007038 <HAL_SD_MspInit+0x1c8>)
 8006ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ee0:	f003 0308 	and.w	r3, r3, #8
 8006ee4:	60bb      	str	r3, [r7, #8]
 8006ee6:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8006ee8:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8006eec:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006eee:	2302      	movs	r3, #2
 8006ef0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ef6:	2303      	movs	r3, #3
 8006ef8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8006efa:	230c      	movs	r3, #12
 8006efc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006efe:	f107 0314 	add.w	r3, r7, #20
 8006f02:	4619      	mov	r1, r3
 8006f04:	484d      	ldr	r0, [pc, #308]	; (800703c <HAL_SD_MspInit+0x1cc>)
 8006f06:	f003 fd0b 	bl	800a920 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006f0a:	2304      	movs	r3, #4
 8006f0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f0e:	2302      	movs	r3, #2
 8006f10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f12:	2300      	movs	r3, #0
 8006f14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f16:	2303      	movs	r3, #3
 8006f18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8006f1a:	230c      	movs	r3, #12
 8006f1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006f1e:	f107 0314 	add.w	r3, r7, #20
 8006f22:	4619      	mov	r1, r3
 8006f24:	4846      	ldr	r0, [pc, #280]	; (8007040 <HAL_SD_MspInit+0x1d0>)
 8006f26:	f003 fcfb 	bl	800a920 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8006f2a:	4b46      	ldr	r3, [pc, #280]	; (8007044 <HAL_SD_MspInit+0x1d4>)
 8006f2c:	4a46      	ldr	r2, [pc, #280]	; (8007048 <HAL_SD_MspInit+0x1d8>)
 8006f2e:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8006f30:	4b44      	ldr	r3, [pc, #272]	; (8007044 <HAL_SD_MspInit+0x1d4>)
 8006f32:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006f36:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006f38:	4b42      	ldr	r3, [pc, #264]	; (8007044 <HAL_SD_MspInit+0x1d4>)
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006f3e:	4b41      	ldr	r3, [pc, #260]	; (8007044 <HAL_SD_MspInit+0x1d4>)
 8006f40:	2200      	movs	r2, #0
 8006f42:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006f44:	4b3f      	ldr	r3, [pc, #252]	; (8007044 <HAL_SD_MspInit+0x1d4>)
 8006f46:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006f4a:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006f4c:	4b3d      	ldr	r3, [pc, #244]	; (8007044 <HAL_SD_MspInit+0x1d4>)
 8006f4e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006f52:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006f54:	4b3b      	ldr	r3, [pc, #236]	; (8007044 <HAL_SD_MspInit+0x1d4>)
 8006f56:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006f5a:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8006f5c:	4b39      	ldr	r3, [pc, #228]	; (8007044 <HAL_SD_MspInit+0x1d4>)
 8006f5e:	2220      	movs	r2, #32
 8006f60:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006f62:	4b38      	ldr	r3, [pc, #224]	; (8007044 <HAL_SD_MspInit+0x1d4>)
 8006f64:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8006f68:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006f6a:	4b36      	ldr	r3, [pc, #216]	; (8007044 <HAL_SD_MspInit+0x1d4>)
 8006f6c:	2204      	movs	r2, #4
 8006f6e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006f70:	4b34      	ldr	r3, [pc, #208]	; (8007044 <HAL_SD_MspInit+0x1d4>)
 8006f72:	2203      	movs	r2, #3
 8006f74:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8006f76:	4b33      	ldr	r3, [pc, #204]	; (8007044 <HAL_SD_MspInit+0x1d4>)
 8006f78:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006f7c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8006f7e:	4b31      	ldr	r3, [pc, #196]	; (8007044 <HAL_SD_MspInit+0x1d4>)
 8006f80:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006f84:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8006f86:	482f      	ldr	r0, [pc, #188]	; (8007044 <HAL_SD_MspInit+0x1d4>)
 8006f88:	f003 f92e 	bl	800a1e8 <HAL_DMA_Init>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d001      	beq.n	8006f96 <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 8006f92:	f7ff fe0b 	bl	8006bac <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	4a2a      	ldr	r2, [pc, #168]	; (8007044 <HAL_SD_MspInit+0x1d4>)
 8006f9a:	641a      	str	r2, [r3, #64]	; 0x40
 8006f9c:	4a29      	ldr	r2, [pc, #164]	; (8007044 <HAL_SD_MspInit+0x1d4>)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8006fa2:	4b2a      	ldr	r3, [pc, #168]	; (800704c <HAL_SD_MspInit+0x1dc>)
 8006fa4:	4a2a      	ldr	r2, [pc, #168]	; (8007050 <HAL_SD_MspInit+0x1e0>)
 8006fa6:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8006fa8:	4b28      	ldr	r3, [pc, #160]	; (800704c <HAL_SD_MspInit+0x1dc>)
 8006faa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006fae:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006fb0:	4b26      	ldr	r3, [pc, #152]	; (800704c <HAL_SD_MspInit+0x1dc>)
 8006fb2:	2240      	movs	r2, #64	; 0x40
 8006fb4:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006fb6:	4b25      	ldr	r3, [pc, #148]	; (800704c <HAL_SD_MspInit+0x1dc>)
 8006fb8:	2200      	movs	r2, #0
 8006fba:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006fbc:	4b23      	ldr	r3, [pc, #140]	; (800704c <HAL_SD_MspInit+0x1dc>)
 8006fbe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006fc2:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006fc4:	4b21      	ldr	r3, [pc, #132]	; (800704c <HAL_SD_MspInit+0x1dc>)
 8006fc6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006fca:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006fcc:	4b1f      	ldr	r3, [pc, #124]	; (800704c <HAL_SD_MspInit+0x1dc>)
 8006fce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006fd2:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8006fd4:	4b1d      	ldr	r3, [pc, #116]	; (800704c <HAL_SD_MspInit+0x1dc>)
 8006fd6:	2220      	movs	r2, #32
 8006fd8:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8006fda:	4b1c      	ldr	r3, [pc, #112]	; (800704c <HAL_SD_MspInit+0x1dc>)
 8006fdc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8006fe0:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006fe2:	4b1a      	ldr	r3, [pc, #104]	; (800704c <HAL_SD_MspInit+0x1dc>)
 8006fe4:	2204      	movs	r2, #4
 8006fe6:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8006fe8:	4b18      	ldr	r3, [pc, #96]	; (800704c <HAL_SD_MspInit+0x1dc>)
 8006fea:	2203      	movs	r2, #3
 8006fec:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8006fee:	4b17      	ldr	r3, [pc, #92]	; (800704c <HAL_SD_MspInit+0x1dc>)
 8006ff0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006ff4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8006ff6:	4b15      	ldr	r3, [pc, #84]	; (800704c <HAL_SD_MspInit+0x1dc>)
 8006ff8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006ffc:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8006ffe:	4813      	ldr	r0, [pc, #76]	; (800704c <HAL_SD_MspInit+0x1dc>)
 8007000:	f003 f8f2 	bl	800a1e8 <HAL_DMA_Init>
 8007004:	4603      	mov	r3, r0
 8007006:	2b00      	cmp	r3, #0
 8007008:	d001      	beq.n	800700e <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 800700a:	f7ff fdcf 	bl	8006bac <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	4a0e      	ldr	r2, [pc, #56]	; (800704c <HAL_SD_MspInit+0x1dc>)
 8007012:	63da      	str	r2, [r3, #60]	; 0x3c
 8007014:	4a0d      	ldr	r2, [pc, #52]	; (800704c <HAL_SD_MspInit+0x1dc>)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 800701a:	2200      	movs	r2, #0
 800701c:	2100      	movs	r1, #0
 800701e:	2031      	movs	r0, #49	; 0x31
 8007020:	f003 f8ab 	bl	800a17a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8007024:	2031      	movs	r0, #49	; 0x31
 8007026:	f003 f8c4 	bl	800a1b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800702a:	bf00      	nop
 800702c:	3728      	adds	r7, #40	; 0x28
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}
 8007032:	bf00      	nop
 8007034:	40012c00 	.word	0x40012c00
 8007038:	40023800 	.word	0x40023800
 800703c:	40020800 	.word	0x40020800
 8007040:	40020c00 	.word	0x40020c00
 8007044:	2004462c 	.word	0x2004462c
 8007048:	40026458 	.word	0x40026458
 800704c:	20044960 	.word	0x20044960
 8007050:	400264a0 	.word	0x400264a0

08007054 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b08a      	sub	sp, #40	; 0x28
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800705c:	f107 0314 	add.w	r3, r7, #20
 8007060:	2200      	movs	r2, #0
 8007062:	601a      	str	r2, [r3, #0]
 8007064:	605a      	str	r2, [r3, #4]
 8007066:	609a      	str	r2, [r3, #8]
 8007068:	60da      	str	r2, [r3, #12]
 800706a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a19      	ldr	r2, [pc, #100]	; (80070d8 <HAL_SPI_MspInit+0x84>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d12c      	bne.n	80070d0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8007076:	2300      	movs	r3, #0
 8007078:	613b      	str	r3, [r7, #16]
 800707a:	4b18      	ldr	r3, [pc, #96]	; (80070dc <HAL_SPI_MspInit+0x88>)
 800707c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800707e:	4a17      	ldr	r2, [pc, #92]	; (80070dc <HAL_SPI_MspInit+0x88>)
 8007080:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007084:	6413      	str	r3, [r2, #64]	; 0x40
 8007086:	4b15      	ldr	r3, [pc, #84]	; (80070dc <HAL_SPI_MspInit+0x88>)
 8007088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800708a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800708e:	613b      	str	r3, [r7, #16]
 8007090:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007092:	2300      	movs	r3, #0
 8007094:	60fb      	str	r3, [r7, #12]
 8007096:	4b11      	ldr	r3, [pc, #68]	; (80070dc <HAL_SPI_MspInit+0x88>)
 8007098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800709a:	4a10      	ldr	r2, [pc, #64]	; (80070dc <HAL_SPI_MspInit+0x88>)
 800709c:	f043 0302 	orr.w	r3, r3, #2
 80070a0:	6313      	str	r3, [r2, #48]	; 0x30
 80070a2:	4b0e      	ldr	r3, [pc, #56]	; (80070dc <HAL_SPI_MspInit+0x88>)
 80070a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070a6:	f003 0302 	and.w	r3, r3, #2
 80070aa:	60fb      	str	r3, [r7, #12]
 80070ac:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80070ae:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80070b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070b4:	2302      	movs	r3, #2
 80070b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070b8:	2300      	movs	r3, #0
 80070ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80070bc:	2303      	movs	r3, #3
 80070be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80070c0:	2305      	movs	r3, #5
 80070c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80070c4:	f107 0314 	add.w	r3, r7, #20
 80070c8:	4619      	mov	r1, r3
 80070ca:	4805      	ldr	r0, [pc, #20]	; (80070e0 <HAL_SPI_MspInit+0x8c>)
 80070cc:	f003 fc28 	bl	800a920 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80070d0:	bf00      	nop
 80070d2:	3728      	adds	r7, #40	; 0x28
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bd80      	pop	{r7, pc}
 80070d8:	40003800 	.word	0x40003800
 80070dc:	40023800 	.word	0x40023800
 80070e0:	40020400 	.word	0x40020400

080070e4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b08c      	sub	sp, #48	; 0x30
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80070ec:	f107 031c 	add.w	r3, r7, #28
 80070f0:	2200      	movs	r2, #0
 80070f2:	601a      	str	r2, [r3, #0]
 80070f4:	605a      	str	r2, [r3, #4]
 80070f6:	609a      	str	r2, [r3, #8]
 80070f8:	60da      	str	r2, [r3, #12]
 80070fa:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a2d      	ldr	r2, [pc, #180]	; (80071b8 <HAL_TIM_PWM_MspInit+0xd4>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d12d      	bne.n	8007162 <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8007106:	2300      	movs	r3, #0
 8007108:	61bb      	str	r3, [r7, #24]
 800710a:	4b2c      	ldr	r3, [pc, #176]	; (80071bc <HAL_TIM_PWM_MspInit+0xd8>)
 800710c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800710e:	4a2b      	ldr	r2, [pc, #172]	; (80071bc <HAL_TIM_PWM_MspInit+0xd8>)
 8007110:	f043 0301 	orr.w	r3, r3, #1
 8007114:	6453      	str	r3, [r2, #68]	; 0x44
 8007116:	4b29      	ldr	r3, [pc, #164]	; (80071bc <HAL_TIM_PWM_MspInit+0xd8>)
 8007118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800711a:	f003 0301 	and.w	r3, r3, #1
 800711e:	61bb      	str	r3, [r7, #24]
 8007120:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8007122:	2300      	movs	r3, #0
 8007124:	617b      	str	r3, [r7, #20]
 8007126:	4b25      	ldr	r3, [pc, #148]	; (80071bc <HAL_TIM_PWM_MspInit+0xd8>)
 8007128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800712a:	4a24      	ldr	r2, [pc, #144]	; (80071bc <HAL_TIM_PWM_MspInit+0xd8>)
 800712c:	f043 0310 	orr.w	r3, r3, #16
 8007130:	6313      	str	r3, [r2, #48]	; 0x30
 8007132:	4b22      	ldr	r3, [pc, #136]	; (80071bc <HAL_TIM_PWM_MspInit+0xd8>)
 8007134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007136:	f003 0310 	and.w	r3, r3, #16
 800713a:	617b      	str	r3, [r7, #20]
 800713c:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 800713e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8007142:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007144:	2302      	movs	r3, #2
 8007146:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007148:	2300      	movs	r3, #0
 800714a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800714c:	2300      	movs	r3, #0
 800714e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8007150:	2301      	movs	r3, #1
 8007152:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007154:	f107 031c 	add.w	r3, r7, #28
 8007158:	4619      	mov	r1, r3
 800715a:	4819      	ldr	r0, [pc, #100]	; (80071c0 <HAL_TIM_PWM_MspInit+0xdc>)
 800715c:	f003 fbe0 	bl	800a920 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8007160:	e026      	b.n	80071b0 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM3)
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4a17      	ldr	r2, [pc, #92]	; (80071c4 <HAL_TIM_PWM_MspInit+0xe0>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d10e      	bne.n	800718a <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800716c:	2300      	movs	r3, #0
 800716e:	613b      	str	r3, [r7, #16]
 8007170:	4b12      	ldr	r3, [pc, #72]	; (80071bc <HAL_TIM_PWM_MspInit+0xd8>)
 8007172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007174:	4a11      	ldr	r2, [pc, #68]	; (80071bc <HAL_TIM_PWM_MspInit+0xd8>)
 8007176:	f043 0302 	orr.w	r3, r3, #2
 800717a:	6413      	str	r3, [r2, #64]	; 0x40
 800717c:	4b0f      	ldr	r3, [pc, #60]	; (80071bc <HAL_TIM_PWM_MspInit+0xd8>)
 800717e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007180:	f003 0302 	and.w	r3, r3, #2
 8007184:	613b      	str	r3, [r7, #16]
 8007186:	693b      	ldr	r3, [r7, #16]
}
 8007188:	e012      	b.n	80071b0 <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM4)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a0e      	ldr	r2, [pc, #56]	; (80071c8 <HAL_TIM_PWM_MspInit+0xe4>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d10d      	bne.n	80071b0 <HAL_TIM_PWM_MspInit+0xcc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007194:	2300      	movs	r3, #0
 8007196:	60fb      	str	r3, [r7, #12]
 8007198:	4b08      	ldr	r3, [pc, #32]	; (80071bc <HAL_TIM_PWM_MspInit+0xd8>)
 800719a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800719c:	4a07      	ldr	r2, [pc, #28]	; (80071bc <HAL_TIM_PWM_MspInit+0xd8>)
 800719e:	f043 0304 	orr.w	r3, r3, #4
 80071a2:	6413      	str	r3, [r2, #64]	; 0x40
 80071a4:	4b05      	ldr	r3, [pc, #20]	; (80071bc <HAL_TIM_PWM_MspInit+0xd8>)
 80071a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071a8:	f003 0304 	and.w	r3, r3, #4
 80071ac:	60fb      	str	r3, [r7, #12]
 80071ae:	68fb      	ldr	r3, [r7, #12]
}
 80071b0:	bf00      	nop
 80071b2:	3730      	adds	r7, #48	; 0x30
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}
 80071b8:	40010000 	.word	0x40010000
 80071bc:	40023800 	.word	0x40023800
 80071c0:	40021000 	.word	0x40021000
 80071c4:	40000400 	.word	0x40000400
 80071c8:	40000800 	.word	0x40000800

080071cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b088      	sub	sp, #32
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a3e      	ldr	r2, [pc, #248]	; (80072d4 <HAL_TIM_Base_MspInit+0x108>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d116      	bne.n	800720c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80071de:	2300      	movs	r3, #0
 80071e0:	61fb      	str	r3, [r7, #28]
 80071e2:	4b3d      	ldr	r3, [pc, #244]	; (80072d8 <HAL_TIM_Base_MspInit+0x10c>)
 80071e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071e6:	4a3c      	ldr	r2, [pc, #240]	; (80072d8 <HAL_TIM_Base_MspInit+0x10c>)
 80071e8:	f043 0310 	orr.w	r3, r3, #16
 80071ec:	6413      	str	r3, [r2, #64]	; 0x40
 80071ee:	4b3a      	ldr	r3, [pc, #232]	; (80072d8 <HAL_TIM_Base_MspInit+0x10c>)
 80071f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071f2:	f003 0310 	and.w	r3, r3, #16
 80071f6:	61fb      	str	r3, [r7, #28]
 80071f8:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 80071fa:	2200      	movs	r2, #0
 80071fc:	2101      	movs	r1, #1
 80071fe:	2036      	movs	r0, #54	; 0x36
 8007200:	f002 ffbb 	bl	800a17a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8007204:	2036      	movs	r0, #54	; 0x36
 8007206:	f002 ffd4 	bl	800a1b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 800720a:	e05e      	b.n	80072ca <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM7)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a32      	ldr	r2, [pc, #200]	; (80072dc <HAL_TIM_Base_MspInit+0x110>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d116      	bne.n	8007244 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8007216:	2300      	movs	r3, #0
 8007218:	61bb      	str	r3, [r7, #24]
 800721a:	4b2f      	ldr	r3, [pc, #188]	; (80072d8 <HAL_TIM_Base_MspInit+0x10c>)
 800721c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800721e:	4a2e      	ldr	r2, [pc, #184]	; (80072d8 <HAL_TIM_Base_MspInit+0x10c>)
 8007220:	f043 0320 	orr.w	r3, r3, #32
 8007224:	6413      	str	r3, [r2, #64]	; 0x40
 8007226:	4b2c      	ldr	r3, [pc, #176]	; (80072d8 <HAL_TIM_Base_MspInit+0x10c>)
 8007228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800722a:	f003 0320 	and.w	r3, r3, #32
 800722e:	61bb      	str	r3, [r7, #24]
 8007230:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8007232:	2200      	movs	r2, #0
 8007234:	2100      	movs	r1, #0
 8007236:	2037      	movs	r0, #55	; 0x37
 8007238:	f002 ff9f 	bl	800a17a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800723c:	2037      	movs	r0, #55	; 0x37
 800723e:	f002 ffb8 	bl	800a1b2 <HAL_NVIC_EnableIRQ>
}
 8007242:	e042      	b.n	80072ca <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM10)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a25      	ldr	r2, [pc, #148]	; (80072e0 <HAL_TIM_Base_MspInit+0x114>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d10e      	bne.n	800726c <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800724e:	2300      	movs	r3, #0
 8007250:	617b      	str	r3, [r7, #20]
 8007252:	4b21      	ldr	r3, [pc, #132]	; (80072d8 <HAL_TIM_Base_MspInit+0x10c>)
 8007254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007256:	4a20      	ldr	r2, [pc, #128]	; (80072d8 <HAL_TIM_Base_MspInit+0x10c>)
 8007258:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800725c:	6453      	str	r3, [r2, #68]	; 0x44
 800725e:	4b1e      	ldr	r3, [pc, #120]	; (80072d8 <HAL_TIM_Base_MspInit+0x10c>)
 8007260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007266:	617b      	str	r3, [r7, #20]
 8007268:	697b      	ldr	r3, [r7, #20]
}
 800726a:	e02e      	b.n	80072ca <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM11)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4a1c      	ldr	r2, [pc, #112]	; (80072e4 <HAL_TIM_Base_MspInit+0x118>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d10e      	bne.n	8007294 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8007276:	2300      	movs	r3, #0
 8007278:	613b      	str	r3, [r7, #16]
 800727a:	4b17      	ldr	r3, [pc, #92]	; (80072d8 <HAL_TIM_Base_MspInit+0x10c>)
 800727c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800727e:	4a16      	ldr	r2, [pc, #88]	; (80072d8 <HAL_TIM_Base_MspInit+0x10c>)
 8007280:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007284:	6453      	str	r3, [r2, #68]	; 0x44
 8007286:	4b14      	ldr	r3, [pc, #80]	; (80072d8 <HAL_TIM_Base_MspInit+0x10c>)
 8007288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800728a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800728e:	613b      	str	r3, [r7, #16]
 8007290:	693b      	ldr	r3, [r7, #16]
}
 8007292:	e01a      	b.n	80072ca <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM13)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4a13      	ldr	r2, [pc, #76]	; (80072e8 <HAL_TIM_Base_MspInit+0x11c>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d115      	bne.n	80072ca <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800729e:	2300      	movs	r3, #0
 80072a0:	60fb      	str	r3, [r7, #12]
 80072a2:	4b0d      	ldr	r3, [pc, #52]	; (80072d8 <HAL_TIM_Base_MspInit+0x10c>)
 80072a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072a6:	4a0c      	ldr	r2, [pc, #48]	; (80072d8 <HAL_TIM_Base_MspInit+0x10c>)
 80072a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072ac:	6413      	str	r3, [r2, #64]	; 0x40
 80072ae:	4b0a      	ldr	r3, [pc, #40]	; (80072d8 <HAL_TIM_Base_MspInit+0x10c>)
 80072b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072b6:	60fb      	str	r3, [r7, #12]
 80072b8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80072ba:	2200      	movs	r2, #0
 80072bc:	2100      	movs	r1, #0
 80072be:	202c      	movs	r0, #44	; 0x2c
 80072c0:	f002 ff5b 	bl	800a17a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80072c4:	202c      	movs	r0, #44	; 0x2c
 80072c6:	f002 ff74 	bl	800a1b2 <HAL_NVIC_EnableIRQ>
}
 80072ca:	bf00      	nop
 80072cc:	3720      	adds	r7, #32
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}
 80072d2:	bf00      	nop
 80072d4:	40001000 	.word	0x40001000
 80072d8:	40023800 	.word	0x40023800
 80072dc:	40001400 	.word	0x40001400
 80072e0:	40014400 	.word	0x40014400
 80072e4:	40014800 	.word	0x40014800
 80072e8:	40001c00 	.word	0x40001c00

080072ec <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b08a      	sub	sp, #40	; 0x28
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80072f4:	f107 0314 	add.w	r3, r7, #20
 80072f8:	2200      	movs	r2, #0
 80072fa:	601a      	str	r2, [r3, #0]
 80072fc:	605a      	str	r2, [r3, #4]
 80072fe:	609a      	str	r2, [r3, #8]
 8007300:	60da      	str	r2, [r3, #12]
 8007302:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	4a1d      	ldr	r2, [pc, #116]	; (8007380 <HAL_TIM_Encoder_MspInit+0x94>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d133      	bne.n	8007376 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800730e:	2300      	movs	r3, #0
 8007310:	613b      	str	r3, [r7, #16]
 8007312:	4b1c      	ldr	r3, [pc, #112]	; (8007384 <HAL_TIM_Encoder_MspInit+0x98>)
 8007314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007316:	4a1b      	ldr	r2, [pc, #108]	; (8007384 <HAL_TIM_Encoder_MspInit+0x98>)
 8007318:	f043 0302 	orr.w	r3, r3, #2
 800731c:	6453      	str	r3, [r2, #68]	; 0x44
 800731e:	4b19      	ldr	r3, [pc, #100]	; (8007384 <HAL_TIM_Encoder_MspInit+0x98>)
 8007320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007322:	f003 0302 	and.w	r3, r3, #2
 8007326:	613b      	str	r3, [r7, #16]
 8007328:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800732a:	2300      	movs	r3, #0
 800732c:	60fb      	str	r3, [r7, #12]
 800732e:	4b15      	ldr	r3, [pc, #84]	; (8007384 <HAL_TIM_Encoder_MspInit+0x98>)
 8007330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007332:	4a14      	ldr	r2, [pc, #80]	; (8007384 <HAL_TIM_Encoder_MspInit+0x98>)
 8007334:	f043 0304 	orr.w	r3, r3, #4
 8007338:	6313      	str	r3, [r2, #48]	; 0x30
 800733a:	4b12      	ldr	r3, [pc, #72]	; (8007384 <HAL_TIM_Encoder_MspInit+0x98>)
 800733c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800733e:	f003 0304 	and.w	r3, r3, #4
 8007342:	60fb      	str	r3, [r7, #12]
 8007344:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007346:	23c0      	movs	r3, #192	; 0xc0
 8007348:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800734a:	2302      	movs	r3, #2
 800734c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800734e:	2300      	movs	r3, #0
 8007350:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007352:	2300      	movs	r3, #0
 8007354:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8007356:	2303      	movs	r3, #3
 8007358:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800735a:	f107 0314 	add.w	r3, r7, #20
 800735e:	4619      	mov	r1, r3
 8007360:	4809      	ldr	r0, [pc, #36]	; (8007388 <HAL_TIM_Encoder_MspInit+0x9c>)
 8007362:	f003 fadd 	bl	800a920 <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8007366:	2200      	movs	r2, #0
 8007368:	2100      	movs	r1, #0
 800736a:	202c      	movs	r0, #44	; 0x2c
 800736c:	f002 ff05 	bl	800a17a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8007370:	202c      	movs	r0, #44	; 0x2c
 8007372:	f002 ff1e 	bl	800a1b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8007376:	bf00      	nop
 8007378:	3728      	adds	r7, #40	; 0x28
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}
 800737e:	bf00      	nop
 8007380:	40010400 	.word	0x40010400
 8007384:	40023800 	.word	0x40023800
 8007388:	40020800 	.word	0x40020800

0800738c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b08c      	sub	sp, #48	; 0x30
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007394:	f107 031c 	add.w	r3, r7, #28
 8007398:	2200      	movs	r2, #0
 800739a:	601a      	str	r2, [r3, #0]
 800739c:	605a      	str	r2, [r3, #4]
 800739e:	609a      	str	r2, [r3, #8]
 80073a0:	60da      	str	r2, [r3, #12]
 80073a2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a5c      	ldr	r2, [pc, #368]	; (800751c <HAL_TIM_MspPostInit+0x190>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d11f      	bne.n	80073ee <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80073ae:	2300      	movs	r3, #0
 80073b0:	61bb      	str	r3, [r7, #24]
 80073b2:	4b5b      	ldr	r3, [pc, #364]	; (8007520 <HAL_TIM_MspPostInit+0x194>)
 80073b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073b6:	4a5a      	ldr	r2, [pc, #360]	; (8007520 <HAL_TIM_MspPostInit+0x194>)
 80073b8:	f043 0310 	orr.w	r3, r3, #16
 80073bc:	6313      	str	r3, [r2, #48]	; 0x30
 80073be:	4b58      	ldr	r3, [pc, #352]	; (8007520 <HAL_TIM_MspPostInit+0x194>)
 80073c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073c2:	f003 0310 	and.w	r3, r3, #16
 80073c6:	61bb      	str	r3, [r7, #24]
 80073c8:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80073ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80073ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80073d0:	2302      	movs	r3, #2
 80073d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073d4:	2300      	movs	r3, #0
 80073d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80073d8:	2300      	movs	r3, #0
 80073da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80073dc:	2301      	movs	r3, #1
 80073de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80073e0:	f107 031c 	add.w	r3, r7, #28
 80073e4:	4619      	mov	r1, r3
 80073e6:	484f      	ldr	r0, [pc, #316]	; (8007524 <HAL_TIM_MspPostInit+0x198>)
 80073e8:	f003 fa9a 	bl	800a920 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 80073ec:	e091      	b.n	8007512 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM3)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	4a4d      	ldr	r2, [pc, #308]	; (8007528 <HAL_TIM_MspPostInit+0x19c>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d11e      	bne.n	8007436 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80073f8:	2300      	movs	r3, #0
 80073fa:	617b      	str	r3, [r7, #20]
 80073fc:	4b48      	ldr	r3, [pc, #288]	; (8007520 <HAL_TIM_MspPostInit+0x194>)
 80073fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007400:	4a47      	ldr	r2, [pc, #284]	; (8007520 <HAL_TIM_MspPostInit+0x194>)
 8007402:	f043 0302 	orr.w	r3, r3, #2
 8007406:	6313      	str	r3, [r2, #48]	; 0x30
 8007408:	4b45      	ldr	r3, [pc, #276]	; (8007520 <HAL_TIM_MspPostInit+0x194>)
 800740a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800740c:	f003 0302 	and.w	r3, r3, #2
 8007410:	617b      	str	r3, [r7, #20]
 8007412:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8007414:	2330      	movs	r3, #48	; 0x30
 8007416:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007418:	2302      	movs	r3, #2
 800741a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800741c:	2300      	movs	r3, #0
 800741e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007420:	2300      	movs	r3, #0
 8007422:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8007424:	2302      	movs	r3, #2
 8007426:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007428:	f107 031c 	add.w	r3, r7, #28
 800742c:	4619      	mov	r1, r3
 800742e:	483f      	ldr	r0, [pc, #252]	; (800752c <HAL_TIM_MspPostInit+0x1a0>)
 8007430:	f003 fa76 	bl	800a920 <HAL_GPIO_Init>
}
 8007434:	e06d      	b.n	8007512 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM4)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	4a3d      	ldr	r2, [pc, #244]	; (8007530 <HAL_TIM_MspPostInit+0x1a4>)
 800743c:	4293      	cmp	r3, r2
 800743e:	d11f      	bne.n	8007480 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007440:	2300      	movs	r3, #0
 8007442:	613b      	str	r3, [r7, #16]
 8007444:	4b36      	ldr	r3, [pc, #216]	; (8007520 <HAL_TIM_MspPostInit+0x194>)
 8007446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007448:	4a35      	ldr	r2, [pc, #212]	; (8007520 <HAL_TIM_MspPostInit+0x194>)
 800744a:	f043 0308 	orr.w	r3, r3, #8
 800744e:	6313      	str	r3, [r2, #48]	; 0x30
 8007450:	4b33      	ldr	r3, [pc, #204]	; (8007520 <HAL_TIM_MspPostInit+0x194>)
 8007452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007454:	f003 0308 	and.w	r3, r3, #8
 8007458:	613b      	str	r3, [r7, #16]
 800745a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800745c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8007460:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007462:	2302      	movs	r3, #2
 8007464:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007466:	2300      	movs	r3, #0
 8007468:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800746a:	2300      	movs	r3, #0
 800746c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800746e:	2302      	movs	r3, #2
 8007470:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007472:	f107 031c 	add.w	r3, r7, #28
 8007476:	4619      	mov	r1, r3
 8007478:	482e      	ldr	r0, [pc, #184]	; (8007534 <HAL_TIM_MspPostInit+0x1a8>)
 800747a:	f003 fa51 	bl	800a920 <HAL_GPIO_Init>
}
 800747e:	e048      	b.n	8007512 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM10)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4a2c      	ldr	r2, [pc, #176]	; (8007538 <HAL_TIM_MspPostInit+0x1ac>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d11f      	bne.n	80074ca <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800748a:	2300      	movs	r3, #0
 800748c:	60fb      	str	r3, [r7, #12]
 800748e:	4b24      	ldr	r3, [pc, #144]	; (8007520 <HAL_TIM_MspPostInit+0x194>)
 8007490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007492:	4a23      	ldr	r2, [pc, #140]	; (8007520 <HAL_TIM_MspPostInit+0x194>)
 8007494:	f043 0302 	orr.w	r3, r3, #2
 8007498:	6313      	str	r3, [r2, #48]	; 0x30
 800749a:	4b21      	ldr	r3, [pc, #132]	; (8007520 <HAL_TIM_MspPostInit+0x194>)
 800749c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800749e:	f003 0302 	and.w	r3, r3, #2
 80074a2:	60fb      	str	r3, [r7, #12]
 80074a4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80074a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80074aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80074ac:	2302      	movs	r3, #2
 80074ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074b0:	2300      	movs	r3, #0
 80074b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80074b4:	2300      	movs	r3, #0
 80074b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 80074b8:	2303      	movs	r3, #3
 80074ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80074bc:	f107 031c 	add.w	r3, r7, #28
 80074c0:	4619      	mov	r1, r3
 80074c2:	481a      	ldr	r0, [pc, #104]	; (800752c <HAL_TIM_MspPostInit+0x1a0>)
 80074c4:	f003 fa2c 	bl	800a920 <HAL_GPIO_Init>
}
 80074c8:	e023      	b.n	8007512 <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM11)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a1b      	ldr	r2, [pc, #108]	; (800753c <HAL_TIM_MspPostInit+0x1b0>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d11e      	bne.n	8007512 <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80074d4:	2300      	movs	r3, #0
 80074d6:	60bb      	str	r3, [r7, #8]
 80074d8:	4b11      	ldr	r3, [pc, #68]	; (8007520 <HAL_TIM_MspPostInit+0x194>)
 80074da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074dc:	4a10      	ldr	r2, [pc, #64]	; (8007520 <HAL_TIM_MspPostInit+0x194>)
 80074de:	f043 0302 	orr.w	r3, r3, #2
 80074e2:	6313      	str	r3, [r2, #48]	; 0x30
 80074e4:	4b0e      	ldr	r3, [pc, #56]	; (8007520 <HAL_TIM_MspPostInit+0x194>)
 80074e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074e8:	f003 0302 	and.w	r3, r3, #2
 80074ec:	60bb      	str	r3, [r7, #8]
 80074ee:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80074f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80074f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80074f6:	2302      	movs	r3, #2
 80074f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074fa:	2300      	movs	r3, #0
 80074fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80074fe:	2300      	movs	r3, #0
 8007500:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8007502:	2303      	movs	r3, #3
 8007504:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007506:	f107 031c 	add.w	r3, r7, #28
 800750a:	4619      	mov	r1, r3
 800750c:	4807      	ldr	r0, [pc, #28]	; (800752c <HAL_TIM_MspPostInit+0x1a0>)
 800750e:	f003 fa07 	bl	800a920 <HAL_GPIO_Init>
}
 8007512:	bf00      	nop
 8007514:	3730      	adds	r7, #48	; 0x30
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}
 800751a:	bf00      	nop
 800751c:	40010000 	.word	0x40010000
 8007520:	40023800 	.word	0x40023800
 8007524:	40021000 	.word	0x40021000
 8007528:	40000400 	.word	0x40000400
 800752c:	40020400 	.word	0x40020400
 8007530:	40000800 	.word	0x40000800
 8007534:	40020c00 	.word	0x40020c00
 8007538:	40014400 	.word	0x40014400
 800753c:	40014800 	.word	0x40014800

08007540 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b08a      	sub	sp, #40	; 0x28
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007548:	f107 0314 	add.w	r3, r7, #20
 800754c:	2200      	movs	r2, #0
 800754e:	601a      	str	r2, [r3, #0]
 8007550:	605a      	str	r2, [r3, #4]
 8007552:	609a      	str	r2, [r3, #8]
 8007554:	60da      	str	r2, [r3, #12]
 8007556:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	4a19      	ldr	r2, [pc, #100]	; (80075c4 <HAL_UART_MspInit+0x84>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d12b      	bne.n	80075ba <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8007562:	2300      	movs	r3, #0
 8007564:	613b      	str	r3, [r7, #16]
 8007566:	4b18      	ldr	r3, [pc, #96]	; (80075c8 <HAL_UART_MspInit+0x88>)
 8007568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800756a:	4a17      	ldr	r2, [pc, #92]	; (80075c8 <HAL_UART_MspInit+0x88>)
 800756c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007570:	6413      	str	r3, [r2, #64]	; 0x40
 8007572:	4b15      	ldr	r3, [pc, #84]	; (80075c8 <HAL_UART_MspInit+0x88>)
 8007574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800757a:	613b      	str	r3, [r7, #16]
 800757c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800757e:	2300      	movs	r3, #0
 8007580:	60fb      	str	r3, [r7, #12]
 8007582:	4b11      	ldr	r3, [pc, #68]	; (80075c8 <HAL_UART_MspInit+0x88>)
 8007584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007586:	4a10      	ldr	r2, [pc, #64]	; (80075c8 <HAL_UART_MspInit+0x88>)
 8007588:	f043 0308 	orr.w	r3, r3, #8
 800758c:	6313      	str	r3, [r2, #48]	; 0x30
 800758e:	4b0e      	ldr	r3, [pc, #56]	; (80075c8 <HAL_UART_MspInit+0x88>)
 8007590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007592:	f003 0308 	and.w	r3, r3, #8
 8007596:	60fb      	str	r3, [r7, #12]
 8007598:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800759a:	2360      	movs	r3, #96	; 0x60
 800759c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800759e:	2302      	movs	r3, #2
 80075a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075a2:	2300      	movs	r3, #0
 80075a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80075a6:	2303      	movs	r3, #3
 80075a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80075aa:	2307      	movs	r3, #7
 80075ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80075ae:	f107 0314 	add.w	r3, r7, #20
 80075b2:	4619      	mov	r1, r3
 80075b4:	4805      	ldr	r0, [pc, #20]	; (80075cc <HAL_UART_MspInit+0x8c>)
 80075b6:	f003 f9b3 	bl	800a920 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80075ba:	bf00      	nop
 80075bc:	3728      	adds	r7, #40	; 0x28
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}
 80075c2:	bf00      	nop
 80075c4:	40004400 	.word	0x40004400
 80075c8:	40023800 	.word	0x40023800
 80075cc:	40020c00 	.word	0x40020c00

080075d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80075d0:	b480      	push	{r7}
 80075d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80075d4:	e7fe      	b.n	80075d4 <NMI_Handler+0x4>

080075d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80075d6:	b480      	push	{r7}
 80075d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80075da:	e7fe      	b.n	80075da <HardFault_Handler+0x4>

080075dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80075dc:	b480      	push	{r7}
 80075de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80075e0:	e7fe      	b.n	80075e0 <MemManage_Handler+0x4>

080075e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80075e2:	b480      	push	{r7}
 80075e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80075e6:	e7fe      	b.n	80075e6 <BusFault_Handler+0x4>

080075e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80075e8:	b480      	push	{r7}
 80075ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80075ec:	e7fe      	b.n	80075ec <UsageFault_Handler+0x4>

080075ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80075ee:	b480      	push	{r7}
 80075f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80075f2:	bf00      	nop
 80075f4:	46bd      	mov	sp, r7
 80075f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fa:	4770      	bx	lr

080075fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80075fc:	b480      	push	{r7}
 80075fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007600:	bf00      	nop
 8007602:	46bd      	mov	sp, r7
 8007604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007608:	4770      	bx	lr

0800760a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800760a:	b480      	push	{r7}
 800760c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800760e:	bf00      	nop
 8007610:	46bd      	mov	sp, r7
 8007612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007616:	4770      	bx	lr

08007618 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800761c:	f002 f88c 	bl	8009738 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007620:	bf00      	nop
 8007622:	bd80      	pop	{r7, pc}

08007624 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8007628:	4803      	ldr	r0, [pc, #12]	; (8007638 <TIM8_UP_TIM13_IRQHandler+0x14>)
 800762a:	f007 fb5c 	bl	800ece6 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 800762e:	4803      	ldr	r0, [pc, #12]	; (800763c <TIM8_UP_TIM13_IRQHandler+0x18>)
 8007630:	f007 fb59 	bl	800ece6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8007634:	bf00      	nop
 8007636:	bd80      	pop	{r7, pc}
 8007638:	200446e4 	.word	0x200446e4
 800763c:	200448e0 	.word	0x200448e0

08007640 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8007644:	4802      	ldr	r0, [pc, #8]	; (8007650 <SDIO_IRQHandler+0x10>)
 8007646:	f005 fbf5 	bl	800ce34 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800764a:	bf00      	nop
 800764c:	bd80      	pop	{r7, pc}
 800764e:	bf00      	nop
 8007650:	20044a40 	.word	0x20044a40

08007654 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8007658:	4802      	ldr	r0, [pc, #8]	; (8007664 <TIM6_DAC_IRQHandler+0x10>)
 800765a:	f007 fb44 	bl	800ece6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800765e:	bf00      	nop
 8007660:	bd80      	pop	{r7, pc}
 8007662:	bf00      	nop
 8007664:	200449c0 	.word	0x200449c0

08007668 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800766c:	4802      	ldr	r0, [pc, #8]	; (8007678 <TIM7_IRQHandler+0x10>)
 800766e:	f007 fb3a 	bl	800ece6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8007672:	bf00      	nop
 8007674:	bd80      	pop	{r7, pc}
 8007676:	bf00      	nop
 8007678:	20044b64 	.word	0x20044b64

0800767c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8007680:	4802      	ldr	r0, [pc, #8]	; (800768c <DMA2_Stream2_IRQHandler+0x10>)
 8007682:	f002 fed9 	bl	800a438 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8007686:	bf00      	nop
 8007688:	bd80      	pop	{r7, pc}
 800768a:	bf00      	nop
 800768c:	20044b04 	.word	0x20044b04

08007690 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8007694:	4802      	ldr	r0, [pc, #8]	; (80076a0 <DMA2_Stream3_IRQHandler+0x10>)
 8007696:	f002 fecf 	bl	800a438 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800769a:	bf00      	nop
 800769c:	bd80      	pop	{r7, pc}
 800769e:	bf00      	nop
 80076a0:	2004462c 	.word	0x2004462c

080076a4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 80076a8:	4802      	ldr	r0, [pc, #8]	; (80076b4 <DMA2_Stream6_IRQHandler+0x10>)
 80076aa:	f002 fec5 	bl	800a438 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80076ae:	bf00      	nop
 80076b0:	bd80      	pop	{r7, pc}
 80076b2:	bf00      	nop
 80076b4:	20044960 	.word	0x20044960

080076b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b086      	sub	sp, #24
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80076c0:	4a14      	ldr	r2, [pc, #80]	; (8007714 <_sbrk+0x5c>)
 80076c2:	4b15      	ldr	r3, [pc, #84]	; (8007718 <_sbrk+0x60>)
 80076c4:	1ad3      	subs	r3, r2, r3
 80076c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80076cc:	4b13      	ldr	r3, [pc, #76]	; (800771c <_sbrk+0x64>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d102      	bne.n	80076da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80076d4:	4b11      	ldr	r3, [pc, #68]	; (800771c <_sbrk+0x64>)
 80076d6:	4a12      	ldr	r2, [pc, #72]	; (8007720 <_sbrk+0x68>)
 80076d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80076da:	4b10      	ldr	r3, [pc, #64]	; (800771c <_sbrk+0x64>)
 80076dc:	681a      	ldr	r2, [r3, #0]
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	4413      	add	r3, r2
 80076e2:	693a      	ldr	r2, [r7, #16]
 80076e4:	429a      	cmp	r2, r3
 80076e6:	d207      	bcs.n	80076f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80076e8:	f00d fd90 	bl	801520c <__errno>
 80076ec:	4602      	mov	r2, r0
 80076ee:	230c      	movs	r3, #12
 80076f0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80076f2:	f04f 33ff 	mov.w	r3, #4294967295
 80076f6:	e009      	b.n	800770c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80076f8:	4b08      	ldr	r3, [pc, #32]	; (800771c <_sbrk+0x64>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80076fe:	4b07      	ldr	r3, [pc, #28]	; (800771c <_sbrk+0x64>)
 8007700:	681a      	ldr	r2, [r3, #0]
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	4413      	add	r3, r2
 8007706:	4a05      	ldr	r2, [pc, #20]	; (800771c <_sbrk+0x64>)
 8007708:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800770a:	68fb      	ldr	r3, [r7, #12]
}
 800770c:	4618      	mov	r0, r3
 800770e:	3718      	adds	r7, #24
 8007710:	46bd      	mov	sp, r7
 8007712:	bd80      	pop	{r7, pc}
 8007714:	20050000 	.word	0x20050000
 8007718:	00000800 	.word	0x00000800
 800771c:	200002f0 	.word	0x200002f0
 8007720:	20046cb8 	.word	0x20046cb8

08007724 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007724:	b480      	push	{r7}
 8007726:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007728:	4b08      	ldr	r3, [pc, #32]	; (800774c <SystemInit+0x28>)
 800772a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800772e:	4a07      	ldr	r2, [pc, #28]	; (800774c <SystemInit+0x28>)
 8007730:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007734:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007738:	4b04      	ldr	r3, [pc, #16]	; (800774c <SystemInit+0x28>)
 800773a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800773e:	609a      	str	r2, [r3, #8]
#endif
}
 8007740:	bf00      	nop
 8007742:	46bd      	mov	sp, r7
 8007744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007748:	4770      	bx	lr
 800774a:	bf00      	nop
 800774c:	e000ed00 	.word	0xe000ed00

08007750 <cppInit>:
		}
	}
}

void cppInit(void)
{
 8007750:	b598      	push	{r3, r4, r7, lr}
 8007752:	af00      	add	r7, sp, #0
	lcd_init();
 8007754:	f7f9 fc60 	bl	8001018 <lcd_init>

	//---------- Buttery Check ----------//
	power_sensor.init();
 8007758:	483b      	ldr	r0, [pc, #236]	; (8007848 <cppInit+0xf8>)
 800775a:	f7fd fe33 	bl	80053c4 <_ZN11PowerSensor4initEv>
	HAL_Delay(100);
 800775e:	2064      	movs	r0, #100	; 0x64
 8007760:	f002 f80a 	bl	8009778 <HAL_Delay>
	power_sensor.updateValues();
 8007764:	4838      	ldr	r0, [pc, #224]	; (8007848 <cppInit+0xf8>)
 8007766:	f7fd fe3b 	bl	80053e0 <_ZN11PowerSensor12updateValuesEv>

	lcd_clear();
 800776a:	f7f9 fc99 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 800776e:	2100      	movs	r1, #0
 8007770:	2000      	movs	r0, #0
 8007772:	f7f9 fca5 	bl	80010c0 <lcd_locate>
	lcd_printf("Voltage");
 8007776:	4835      	ldr	r0, [pc, #212]	; (800784c <cppInit+0xfc>)
 8007778:	f7f9 fccc 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 800777c:	2101      	movs	r1, #1
 800777e:	2000      	movs	r0, #0
 8007780:	f7f9 fc9e 	bl	80010c0 <lcd_locate>
	lcd_printf("%f", power_sensor.getButteryVoltage());
 8007784:	4830      	ldr	r0, [pc, #192]	; (8007848 <cppInit+0xf8>)
 8007786:	f7fd fe55 	bl	8005434 <_ZN11PowerSensor17getButteryVoltageEv>
 800778a:	ee10 3a10 	vmov	r3, s0
 800778e:	4618      	mov	r0, r3
 8007790:	f7f8 fef2 	bl	8000578 <__aeabi_f2d>
 8007794:	4603      	mov	r3, r0
 8007796:	460c      	mov	r4, r1
 8007798:	461a      	mov	r2, r3
 800779a:	4623      	mov	r3, r4
 800779c:	482c      	ldr	r0, [pc, #176]	; (8007850 <cppInit+0x100>)
 800779e:	f7f9 fcb9 	bl	8001114 <lcd_printf>
	HAL_Delay(1000);
 80077a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80077a6:	f001 ffe7 	bl	8009778 <HAL_Delay>

	//if(power_sensor.butteryCheck() == true) batteryLowMode(); //if battery low, informed

	// -----------initialize-------//
	if(logger.sdCardInit() == true){ //sd mount successfull
 80077aa:	482a      	ldr	r0, [pc, #168]	; (8007854 <cppInit+0x104>)
 80077ac:	f7fc ffa6 	bl	80046fc <_ZN6Logger10sdCardInitEv>
 80077b0:	4603      	mov	r3, r0
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d007      	beq.n	80077c6 <cppInit+0x76>
		led.fullColor('G');
 80077b6:	2147      	movs	r1, #71	; 0x47
 80077b8:	4827      	ldr	r0, [pc, #156]	; (8007858 <cppInit+0x108>)
 80077ba:	f7fa fd3b 	bl	8002234 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 80077be:	2064      	movs	r0, #100	; 0x64
 80077c0:	f001 ffda 	bl	8009778 <HAL_Delay>
 80077c4:	e006      	b.n	80077d4 <cppInit+0x84>
	}
	else{ //sd mount fali
		led.fullColor('R');
 80077c6:	2152      	movs	r1, #82	; 0x52
 80077c8:	4823      	ldr	r0, [pc, #140]	; (8007858 <cppInit+0x108>)
 80077ca:	f7fa fd33 	bl	8002234 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 80077ce:	2064      	movs	r0, #100	; 0x64
 80077d0:	f001 ffd2 	bl	8009778 <HAL_Delay>
	}

	line_sensor.ADCStart();
 80077d4:	4821      	ldr	r0, [pc, #132]	; (800785c <cppInit+0x10c>)
 80077d6:	f7fa fe89 	bl	80024ec <_ZN10LineSensor8ADCStartEv>
	motor.init();
 80077da:	4821      	ldr	r0, [pc, #132]	; (8007860 <cppInit+0x110>)
 80077dc:	f7fd faaa 	bl	8004d34 <_ZN5Motor4initEv>
	encoder.init();
 80077e0:	4820      	ldr	r0, [pc, #128]	; (8007864 <cppInit+0x114>)
 80077e2:	f7f9 fe1f 	bl	8001424 <_ZN7Encoder4initEv>
	imu.init();
 80077e6:	4820      	ldr	r0, [pc, #128]	; (8007868 <cppInit+0x118>)
 80077e8:	f7fa fae2 	bl	8001db0 <_ZN3IMU4initEv>
	line_trace.init();
 80077ec:	481f      	ldr	r0, [pc, #124]	; (800786c <cppInit+0x11c>)
 80077ee:	f7fc f911 	bl	8003a14 <_ZN9LineTrace4initEv>

	line_sensor.calibration();
 80077f2:	481a      	ldr	r0, [pc, #104]	; (800785c <cppInit+0x10c>)
 80077f4:	f7fa ffe2 	bl	80027bc <_ZN10LineSensor11calibrationEv>
	HAL_Delay(1000);
 80077f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80077fc:	f001 ffbc 	bl	8009778 <HAL_Delay>

	led.fullColor('M');
 8007800:	214d      	movs	r1, #77	; 0x4d
 8007802:	4815      	ldr	r0, [pc, #84]	; (8007858 <cppInit+0x108>)
 8007804:	f7fa fd16 	bl	8002234 <_ZN3LED9fullColorEc>
	imu.calibration();
 8007808:	4817      	ldr	r0, [pc, #92]	; (8007868 <cppInit+0x118>)
 800780a:	f7fa fb9b 	bl	8001f44 <_ZN3IMU11calibrationEv>

	//line_trace.setGain(0.0005, 0.000003, 0);
	//line_trace.setGain(0.0005, 0.000002, 0);

	//velocity_ctrl.setVelocityGain(1.8295, 16.1174, 0.025243); //2s
	velocity_ctrl.setVelocityGain(1.8295/1.5, 16.1174/1.5, 0.025243/1.5); //3s
 800780e:	ed9f 1a18 	vldr	s2, [pc, #96]	; 8007870 <cppInit+0x120>
 8007812:	eddf 0a18 	vldr	s1, [pc, #96]	; 8007874 <cppInit+0x124>
 8007816:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8007878 <cppInit+0x128>
 800781a:	4818      	ldr	r0, [pc, #96]	; (800787c <cppInit+0x12c>)
 800781c:	f7fe f9cc 	bl	8005bb8 <_ZN12VelocityCtrl15setVelocityGainEfff>

	velocity_ctrl.setOmegaGain(0.060, 0.86816, 0.000); //2s
 8007820:	ed9f 1a17 	vldr	s2, [pc, #92]	; 8007880 <cppInit+0x130>
 8007824:	eddf 0a17 	vldr	s1, [pc, #92]	; 8007884 <cppInit+0x134>
 8007828:	ed9f 0a17 	vldr	s0, [pc, #92]	; 8007888 <cppInit+0x138>
 800782c:	4813      	ldr	r0, [pc, #76]	; (800787c <cppInit+0x12c>)
 800782e:	f7fe f9dc 	bl	8005bea <_ZN12VelocityCtrl12setOmegaGainEfff>


	//encoder.clearDistance();
	odometry.clearPotition();
 8007832:	4816      	ldr	r0, [pc, #88]	; (800788c <cppInit+0x13c>)
 8007834:	f7fd fcd0 	bl	80051d8 <_ZN8Odometry13clearPotitionEv>

	path_following.init();
 8007838:	4815      	ldr	r0, [pc, #84]	; (8007890 <cppInit+0x140>)
 800783a:	f7fd fd67 	bl	800530c <_ZN13PathFollowing4initEv>

	esc.init();
 800783e:	4815      	ldr	r0, [pc, #84]	; (8007894 <cppInit+0x144>)
 8007840:	f7f9 fcd4 	bl	80011ec <_ZN3ESC4initEv>

}
 8007844:	bf00      	nop
 8007846:	bd98      	pop	{r3, r4, r7, pc}
 8007848:	20000608 	.word	0x20000608
 800784c:	08019a38 	.word	0x08019a38
 8007850:	08019a40 	.word	0x08019a40
 8007854:	20000628 	.word	0x20000628
 8007858:	20000604 	.word	0x20000604
 800785c:	200002f4 	.word	0x200002f4
 8007860:	20000600 	.word	0x20000600
 8007864:	2001daf4 	.word	0x2001daf4
 8007868:	20000614 	.word	0x20000614
 800786c:	2001db94 	.word	0x2001db94
 8007870:	3c89dc46 	.word	0x3c89dc46
 8007874:	412beb3f 	.word	0x412beb3f
 8007878:	3f9c1e0a 	.word	0x3f9c1e0a
 800787c:	2001db14 	.word	0x2001db14
 8007880:	00000000 	.word	0x00000000
 8007884:	3f5e3fbc 	.word	0x3f5e3fbc
 8007888:	3d75c28f 	.word	0x3d75c28f
 800788c:	2001db50 	.word	0x2001db50
 8007890:	2002ab40 	.word	0x2002ab40
 8007894:	2001db90 	.word	0x2001db90

08007898 <cppFlip1ms>:

void cppFlip1ms(void)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	af00      	add	r7, sp, #0
	line_sensor.updateSensorValues();
 800789c:	4819      	ldr	r0, [pc, #100]	; (8007904 <cppFlip1ms+0x6c>)
 800789e:	f7fa fe83 	bl	80025a8 <_ZN10LineSensor18updateSensorValuesEv>
	imu.updateValues();
 80078a2:	4819      	ldr	r0, [pc, #100]	; (8007908 <cppFlip1ms+0x70>)
 80078a4:	f7fa faac 	bl	8001e00 <_ZN3IMU12updateValuesEv>
	encoder.update();
 80078a8:	4818      	ldr	r0, [pc, #96]	; (800790c <cppFlip1ms+0x74>)
 80078aa:	f7f9 fddd 	bl	8001468 <_ZN7Encoder6updateEv>
	line_trace.flip();
 80078ae:	4818      	ldr	r0, [pc, #96]	; (8007910 <cppFlip1ms+0x78>)
 80078b0:	f7fc fae6 	bl	8003e80 <_ZN9LineTrace4flipEv>
	velocity_ctrl.flip();
 80078b4:	4817      	ldr	r0, [pc, #92]	; (8007914 <cppFlip1ms+0x7c>)
 80078b6:	f7fe f9b1 	bl	8005c1c <_ZN12VelocityCtrl4flipEv>
	odometry.flip();
 80078ba:	4817      	ldr	r0, [pc, #92]	; (8007918 <cppFlip1ms+0x80>)
 80078bc:	f7fd fc70 	bl	80051a0 <_ZN8Odometry4flipEv>
	side_sensor.updateStatus();
 80078c0:	4816      	ldr	r0, [pc, #88]	; (800791c <cppFlip1ms+0x84>)
 80078c2:	f7fd fe33 	bl	800552c <_ZN10SideSensor12updateStatusEv>

	motor.motorCtrl();
 80078c6:	4816      	ldr	r0, [pc, #88]	; (8007920 <cppFlip1ms+0x88>)
 80078c8:	f7fd fa46 	bl	8004d58 <_ZN5Motor9motorCtrlEv>

	//logger.storeLog(velocity_ctrl.getCurrentVelocity());
	//logger.storeLog(imu.getOmega());

	static uint16_t twice_cnt;
	twice_cnt++;
 80078cc:	4b15      	ldr	r3, [pc, #84]	; (8007924 <cppFlip1ms+0x8c>)
 80078ce:	881b      	ldrh	r3, [r3, #0]
 80078d0:	3301      	adds	r3, #1
 80078d2:	b29a      	uxth	r2, r3
 80078d4:	4b13      	ldr	r3, [pc, #76]	; (8007924 <cppFlip1ms+0x8c>)
 80078d6:	801a      	strh	r2, [r3, #0]
	if(twice_cnt >= 2){ //2ms
 80078d8:	4b12      	ldr	r3, [pc, #72]	; (8007924 <cppFlip1ms+0x8c>)
 80078da:	881b      	ldrh	r3, [r3, #0]
 80078dc:	2b01      	cmp	r3, #1
 80078de:	d90c      	bls.n	80078fa <cppFlip1ms+0x62>
		sys_ident.inOutputStore(imu.getOmega());
 80078e0:	4809      	ldr	r0, [pc, #36]	; (8007908 <cppFlip1ms+0x70>)
 80078e2:	f7fa fae5 	bl	8001eb0 <_ZN3IMU8getOmegaEv>
 80078e6:	eef0 7a40 	vmov.f32	s15, s0
 80078ea:	eeb0 0a67 	vmov.f32	s0, s15
 80078ee:	480e      	ldr	r0, [pc, #56]	; (8007928 <cppFlip1ms+0x90>)
 80078f0:	f7fd ff96 	bl	8005820 <_ZN20SystemIdentification13inOutputStoreEf>
		twice_cnt = 0;
 80078f4:	4b0b      	ldr	r3, [pc, #44]	; (8007924 <cppFlip1ms+0x8c>)
 80078f6:	2200      	movs	r2, #0
 80078f8:	801a      	strh	r2, [r3, #0]

	//mon_cnt = twice_cnt;
	/*
	*/

	encoder.clear();
 80078fa:	4804      	ldr	r0, [pc, #16]	; (800790c <cppFlip1ms+0x74>)
 80078fc:	f7f9 fe9e 	bl	800163c <_ZN7Encoder5clearEv>

	//Buttery Check
	//power_sensor.updateValues();
	//if(power_sensor.butteryCheck() == true) led.fullColor('R');

}
 8007900:	bf00      	nop
 8007902:	bd80      	pop	{r7, pc}
 8007904:	200002f4 	.word	0x200002f4
 8007908:	20000614 	.word	0x20000614
 800790c:	2001daf4 	.word	0x2001daf4
 8007910:	2001db94 	.word	0x2001db94
 8007914:	2001db14 	.word	0x2001db14
 8007918:	2001db50 	.word	0x2001db50
 800791c:	200005ec 	.word	0x200005ec
 8007920:	20000600 	.word	0x20000600
 8007924:	20042268 	.word	0x20042268
 8007928:	2002a930 	.word	0x2002a930

0800792c <cppFlip100ns>:

void cppFlip100ns(void)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	af00      	add	r7, sp, #0
	line_sensor.storeSensorValues();
 8007930:	4802      	ldr	r0, [pc, #8]	; (800793c <cppFlip100ns+0x10>)
 8007932:	f7fa fdeb 	bl	800250c <_ZN10LineSensor17storeSensorValuesEv>
}
 8007936:	bf00      	nop
 8007938:	bd80      	pop	{r7, pc}
 800793a:	bf00      	nop
 800793c:	200002f4 	.word	0x200002f4

08007940 <cppFlip10ms>:

void cppFlip10ms(void)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	af00      	add	r7, sp, #0
	static uint16_t twice_cnt;
	twice_cnt++;
 8007944:	4b10      	ldr	r3, [pc, #64]	; (8007988 <cppFlip10ms+0x48>)
 8007946:	881b      	ldrh	r3, [r3, #0]
 8007948:	3301      	adds	r3, #1
 800794a:	b29a      	uxth	r2, r3
 800794c:	4b0e      	ldr	r3, [pc, #56]	; (8007988 <cppFlip10ms+0x48>)
 800794e:	801a      	strh	r2, [r3, #0]
	if(twice_cnt >= 7){ //70ms
 8007950:	4b0d      	ldr	r3, [pc, #52]	; (8007988 <cppFlip10ms+0x48>)
 8007952:	881b      	ldrh	r3, [r3, #0]
 8007954:	2b06      	cmp	r3, #6
 8007956:	d905      	bls.n	8007964 <cppFlip10ms+0x24>
		sys_ident.updateMsig();
 8007958:	480c      	ldr	r0, [pc, #48]	; (800798c <cppFlip10ms+0x4c>)
 800795a:	f7fd ff81 	bl	8005860 <_ZN20SystemIdentification10updateMsigEv>
		twice_cnt = 0;
 800795e:	4b0a      	ldr	r3, [pc, #40]	; (8007988 <cppFlip10ms+0x48>)
 8007960:	2200      	movs	r2, #0
 8007962:	801a      	strh	r2, [r3, #0]
	}

	logger.storeLogInt(motor.getLeftCounterPeriod());
 8007964:	480a      	ldr	r0, [pc, #40]	; (8007990 <cppFlip10ms+0x50>)
 8007966:	f7fd fab9 	bl	8004edc <_ZN5Motor20getLeftCounterPeriodEv>
 800796a:	4603      	mov	r3, r0
 800796c:	4619      	mov	r1, r3
 800796e:	4809      	ldr	r0, [pc, #36]	; (8007994 <cppFlip10ms+0x54>)
 8007970:	f7fc ff7c 	bl	800486c <_ZN6Logger11storeLogIntEs>
	logger.storeLog2Int(motor.getRightCounterPeriod());
 8007974:	4806      	ldr	r0, [pc, #24]	; (8007990 <cppFlip10ms+0x50>)
 8007976:	f7fd fabe 	bl	8004ef6 <_ZN5Motor21getRightCounterPeriodEv>
 800797a:	4603      	mov	r3, r0
 800797c:	4619      	mov	r1, r3
 800797e:	4805      	ldr	r0, [pc, #20]	; (8007994 <cppFlip10ms+0x54>)
 8007980:	f7fc ffad 	bl	80048de <_ZN6Logger12storeLog2IntEs>
		path_following.flip();
	}
	velocity_ctrl.setVelocity(path_following.getV(), path_following.getW());
	*/

}
 8007984:	bf00      	nop
 8007986:	bd80      	pop	{r7, pc}
 8007988:	2004226a 	.word	0x2004226a
 800798c:	2002a930 	.word	0x2002a930
 8007990:	20000600 	.word	0x20000600
 8007994:	20000628 	.word	0x20000628

08007998 <cppLoop>:
{
	//side_sensor.updateStatus(gpio_pin);
}

void cppLoop(void)
{
 8007998:	b5f0      	push	{r4, r5, r6, r7, lr}
 800799a:	b085      	sub	sp, #20
 800799c:	af02      	add	r7, sp, #8
	static int16_t selector;
	static int16_t selector_acc, selector_acc2;
	static int16_t selector_vel, selector_vel2;

	static float adj_kp = line_trace.getKp();
 800799e:	4baf      	ldr	r3, [pc, #700]	; (8007c5c <cppLoop+0x2c4>)
 80079a0:	781b      	ldrb	r3, [r3, #0]
 80079a2:	f3bf 8f5b 	dmb	ish
 80079a6:	b2db      	uxtb	r3, r3
 80079a8:	f003 0301 	and.w	r3, r3, #1
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	bf0c      	ite	eq
 80079b0:	2301      	moveq	r3, #1
 80079b2:	2300      	movne	r3, #0
 80079b4:	b2db      	uxtb	r3, r3
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d015      	beq.n	80079e6 <cppLoop+0x4e>
 80079ba:	48a8      	ldr	r0, [pc, #672]	; (8007c5c <cppLoop+0x2c4>)
 80079bc:	f00c fbc1 	bl	8014142 <__cxa_guard_acquire>
 80079c0:	4603      	mov	r3, r0
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	bf14      	ite	ne
 80079c6:	2301      	movne	r3, #1
 80079c8:	2300      	moveq	r3, #0
 80079ca:	b2db      	uxtb	r3, r3
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d00a      	beq.n	80079e6 <cppLoop+0x4e>
 80079d0:	48a3      	ldr	r0, [pc, #652]	; (8007c60 <cppLoop+0x2c8>)
 80079d2:	f7fc f8fc 	bl	8003bce <_ZN9LineTrace5getKpEv>
 80079d6:	eef0 7a40 	vmov.f32	s15, s0
 80079da:	4ba2      	ldr	r3, [pc, #648]	; (8007c64 <cppLoop+0x2cc>)
 80079dc:	edc3 7a00 	vstr	s15, [r3]
 80079e0:	489e      	ldr	r0, [pc, #632]	; (8007c5c <cppLoop+0x2c4>)
 80079e2:	f00c fbba 	bl	801415a <__cxa_guard_release>
	static float adj_ki= line_trace.getKi();
 80079e6:	4ba0      	ldr	r3, [pc, #640]	; (8007c68 <cppLoop+0x2d0>)
 80079e8:	781b      	ldrb	r3, [r3, #0]
 80079ea:	f3bf 8f5b 	dmb	ish
 80079ee:	b2db      	uxtb	r3, r3
 80079f0:	f003 0301 	and.w	r3, r3, #1
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	bf0c      	ite	eq
 80079f8:	2301      	moveq	r3, #1
 80079fa:	2300      	movne	r3, #0
 80079fc:	b2db      	uxtb	r3, r3
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d015      	beq.n	8007a2e <cppLoop+0x96>
 8007a02:	4899      	ldr	r0, [pc, #612]	; (8007c68 <cppLoop+0x2d0>)
 8007a04:	f00c fb9d 	bl	8014142 <__cxa_guard_acquire>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	bf14      	ite	ne
 8007a0e:	2301      	movne	r3, #1
 8007a10:	2300      	moveq	r3, #0
 8007a12:	b2db      	uxtb	r3, r3
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d00a      	beq.n	8007a2e <cppLoop+0x96>
 8007a18:	4891      	ldr	r0, [pc, #580]	; (8007c60 <cppLoop+0x2c8>)
 8007a1a:	f7fc f8e7 	bl	8003bec <_ZN9LineTrace5getKiEv>
 8007a1e:	eef0 7a40 	vmov.f32	s15, s0
 8007a22:	4b92      	ldr	r3, [pc, #584]	; (8007c6c <cppLoop+0x2d4>)
 8007a24:	edc3 7a00 	vstr	s15, [r3]
 8007a28:	488f      	ldr	r0, [pc, #572]	; (8007c68 <cppLoop+0x2d0>)
 8007a2a:	f00c fb96 	bl	801415a <__cxa_guard_release>
	static float adj_kd = line_trace.getKd();
 8007a2e:	4b90      	ldr	r3, [pc, #576]	; (8007c70 <cppLoop+0x2d8>)
 8007a30:	781b      	ldrb	r3, [r3, #0]
 8007a32:	f3bf 8f5b 	dmb	ish
 8007a36:	b2db      	uxtb	r3, r3
 8007a38:	f003 0301 	and.w	r3, r3, #1
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	bf0c      	ite	eq
 8007a40:	2301      	moveq	r3, #1
 8007a42:	2300      	movne	r3, #0
 8007a44:	b2db      	uxtb	r3, r3
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d015      	beq.n	8007a76 <cppLoop+0xde>
 8007a4a:	4889      	ldr	r0, [pc, #548]	; (8007c70 <cppLoop+0x2d8>)
 8007a4c:	f00c fb79 	bl	8014142 <__cxa_guard_acquire>
 8007a50:	4603      	mov	r3, r0
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	bf14      	ite	ne
 8007a56:	2301      	movne	r3, #1
 8007a58:	2300      	moveq	r3, #0
 8007a5a:	b2db      	uxtb	r3, r3
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d00a      	beq.n	8007a76 <cppLoop+0xde>
 8007a60:	487f      	ldr	r0, [pc, #508]	; (8007c60 <cppLoop+0x2c8>)
 8007a62:	f7fc f8d2 	bl	8003c0a <_ZN9LineTrace5getKdEv>
 8007a66:	eef0 7a40 	vmov.f32	s15, s0
 8007a6a:	4b82      	ldr	r3, [pc, #520]	; (8007c74 <cppLoop+0x2dc>)
 8007a6c:	edc3 7a00 	vstr	s15, [r3]
 8007a70:	487f      	ldr	r0, [pc, #508]	; (8007c70 <cppLoop+0x2d8>)
 8007a72:	f00c fb72 	bl	801415a <__cxa_guard_release>

	static float adj_velocity = line_trace.getTargetVelocity();
 8007a76:	4b80      	ldr	r3, [pc, #512]	; (8007c78 <cppLoop+0x2e0>)
 8007a78:	781b      	ldrb	r3, [r3, #0]
 8007a7a:	f3bf 8f5b 	dmb	ish
 8007a7e:	b2db      	uxtb	r3, r3
 8007a80:	f003 0301 	and.w	r3, r3, #1
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	bf0c      	ite	eq
 8007a88:	2301      	moveq	r3, #1
 8007a8a:	2300      	movne	r3, #0
 8007a8c:	b2db      	uxtb	r3, r3
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d015      	beq.n	8007abe <cppLoop+0x126>
 8007a92:	4879      	ldr	r0, [pc, #484]	; (8007c78 <cppLoop+0x2e0>)
 8007a94:	f00c fb55 	bl	8014142 <__cxa_guard_acquire>
 8007a98:	4603      	mov	r3, r0
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	bf14      	ite	ne
 8007a9e:	2301      	movne	r3, #1
 8007aa0:	2300      	moveq	r3, #0
 8007aa2:	b2db      	uxtb	r3, r3
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d00a      	beq.n	8007abe <cppLoop+0x126>
 8007aa8:	486d      	ldr	r0, [pc, #436]	; (8007c60 <cppLoop+0x2c8>)
 8007aaa:	f7fc f91c 	bl	8003ce6 <_ZN9LineTrace17getTargetVelocityEv>
 8007aae:	eef0 7a40 	vmov.f32	s15, s0
 8007ab2:	4b72      	ldr	r3, [pc, #456]	; (8007c7c <cppLoop+0x2e4>)
 8007ab4:	edc3 7a00 	vstr	s15, [r3]
 8007ab8:	486f      	ldr	r0, [pc, #444]	; (8007c78 <cppLoop+0x2e0>)
 8007aba:	f00c fb4e 	bl	801415a <__cxa_guard_release>
	static float adj_max_velocity = line_trace.getMaxVelocity();
 8007abe:	4b70      	ldr	r3, [pc, #448]	; (8007c80 <cppLoop+0x2e8>)
 8007ac0:	781b      	ldrb	r3, [r3, #0]
 8007ac2:	f3bf 8f5b 	dmb	ish
 8007ac6:	b2db      	uxtb	r3, r3
 8007ac8:	f003 0301 	and.w	r3, r3, #1
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	bf0c      	ite	eq
 8007ad0:	2301      	moveq	r3, #1
 8007ad2:	2300      	movne	r3, #0
 8007ad4:	b2db      	uxtb	r3, r3
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d015      	beq.n	8007b06 <cppLoop+0x16e>
 8007ada:	4869      	ldr	r0, [pc, #420]	; (8007c80 <cppLoop+0x2e8>)
 8007adc:	f00c fb31 	bl	8014142 <__cxa_guard_acquire>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	bf14      	ite	ne
 8007ae6:	2301      	movne	r3, #1
 8007ae8:	2300      	moveq	r3, #0
 8007aea:	b2db      	uxtb	r3, r3
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d00a      	beq.n	8007b06 <cppLoop+0x16e>
 8007af0:	485b      	ldr	r0, [pc, #364]	; (8007c60 <cppLoop+0x2c8>)
 8007af2:	f7fc f908 	bl	8003d06 <_ZN9LineTrace14getMaxVelocityEv>
 8007af6:	eef0 7a40 	vmov.f32	s15, s0
 8007afa:	4b62      	ldr	r3, [pc, #392]	; (8007c84 <cppLoop+0x2ec>)
 8007afc:	edc3 7a00 	vstr	s15, [r3]
 8007b00:	485f      	ldr	r0, [pc, #380]	; (8007c80 <cppLoop+0x2e8>)
 8007b02:	f00c fb2a 	bl	801415a <__cxa_guard_release>
	static float adj_max_velocity2 = line_trace.getMaxVelocity2();
 8007b06:	4b60      	ldr	r3, [pc, #384]	; (8007c88 <cppLoop+0x2f0>)
 8007b08:	781b      	ldrb	r3, [r3, #0]
 8007b0a:	f3bf 8f5b 	dmb	ish
 8007b0e:	b2db      	uxtb	r3, r3
 8007b10:	f003 0301 	and.w	r3, r3, #1
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	bf0c      	ite	eq
 8007b18:	2301      	moveq	r3, #1
 8007b1a:	2300      	movne	r3, #0
 8007b1c:	b2db      	uxtb	r3, r3
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d015      	beq.n	8007b4e <cppLoop+0x1b6>
 8007b22:	4859      	ldr	r0, [pc, #356]	; (8007c88 <cppLoop+0x2f0>)
 8007b24:	f00c fb0d 	bl	8014142 <__cxa_guard_acquire>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	bf14      	ite	ne
 8007b2e:	2301      	movne	r3, #1
 8007b30:	2300      	moveq	r3, #0
 8007b32:	b2db      	uxtb	r3, r3
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d00a      	beq.n	8007b4e <cppLoop+0x1b6>
 8007b38:	4849      	ldr	r0, [pc, #292]	; (8007c60 <cppLoop+0x2c8>)
 8007b3a:	f7fc f8f4 	bl	8003d26 <_ZN9LineTrace15getMaxVelocity2Ev>
 8007b3e:	eef0 7a40 	vmov.f32	s15, s0
 8007b42:	4b52      	ldr	r3, [pc, #328]	; (8007c8c <cppLoop+0x2f4>)
 8007b44:	edc3 7a00 	vstr	s15, [r3]
 8007b48:	484f      	ldr	r0, [pc, #316]	; (8007c88 <cppLoop+0x2f0>)
 8007b4a:	f00c fb06 	bl	801415a <__cxa_guard_release>
	static float adj_min_velocity = line_trace.getMinVelocity();
 8007b4e:	4b50      	ldr	r3, [pc, #320]	; (8007c90 <cppLoop+0x2f8>)
 8007b50:	781b      	ldrb	r3, [r3, #0]
 8007b52:	f3bf 8f5b 	dmb	ish
 8007b56:	b2db      	uxtb	r3, r3
 8007b58:	f003 0301 	and.w	r3, r3, #1
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	bf0c      	ite	eq
 8007b60:	2301      	moveq	r3, #1
 8007b62:	2300      	movne	r3, #0
 8007b64:	b2db      	uxtb	r3, r3
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d015      	beq.n	8007b96 <cppLoop+0x1fe>
 8007b6a:	4849      	ldr	r0, [pc, #292]	; (8007c90 <cppLoop+0x2f8>)
 8007b6c:	f00c fae9 	bl	8014142 <__cxa_guard_acquire>
 8007b70:	4603      	mov	r3, r0
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	bf14      	ite	ne
 8007b76:	2301      	movne	r3, #1
 8007b78:	2300      	moveq	r3, #0
 8007b7a:	b2db      	uxtb	r3, r3
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d00a      	beq.n	8007b96 <cppLoop+0x1fe>
 8007b80:	4837      	ldr	r0, [pc, #220]	; (8007c60 <cppLoop+0x2c8>)
 8007b82:	f7fc f8e0 	bl	8003d46 <_ZN9LineTrace14getMinVelocityEv>
 8007b86:	eef0 7a40 	vmov.f32	s15, s0
 8007b8a:	4b42      	ldr	r3, [pc, #264]	; (8007c94 <cppLoop+0x2fc>)
 8007b8c:	edc3 7a00 	vstr	s15, [r3]
 8007b90:	483f      	ldr	r0, [pc, #252]	; (8007c90 <cppLoop+0x2f8>)
 8007b92:	f00c fae2 	bl	801415a <__cxa_guard_release>
	static float adj_min_velocity2 = line_trace.getMinVelocity2();
 8007b96:	4b40      	ldr	r3, [pc, #256]	; (8007c98 <cppLoop+0x300>)
 8007b98:	781b      	ldrb	r3, [r3, #0]
 8007b9a:	f3bf 8f5b 	dmb	ish
 8007b9e:	b2db      	uxtb	r3, r3
 8007ba0:	f003 0301 	and.w	r3, r3, #1
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	bf0c      	ite	eq
 8007ba8:	2301      	moveq	r3, #1
 8007baa:	2300      	movne	r3, #0
 8007bac:	b2db      	uxtb	r3, r3
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d015      	beq.n	8007bde <cppLoop+0x246>
 8007bb2:	4839      	ldr	r0, [pc, #228]	; (8007c98 <cppLoop+0x300>)
 8007bb4:	f00c fac5 	bl	8014142 <__cxa_guard_acquire>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	bf14      	ite	ne
 8007bbe:	2301      	movne	r3, #1
 8007bc0:	2300      	moveq	r3, #0
 8007bc2:	b2db      	uxtb	r3, r3
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d00a      	beq.n	8007bde <cppLoop+0x246>
 8007bc8:	4825      	ldr	r0, [pc, #148]	; (8007c60 <cppLoop+0x2c8>)
 8007bca:	f7fc f8cc 	bl	8003d66 <_ZN9LineTrace15getMinVelocity2Ev>
 8007bce:	eef0 7a40 	vmov.f32	s15, s0
 8007bd2:	4b32      	ldr	r3, [pc, #200]	; (8007c9c <cppLoop+0x304>)
 8007bd4:	edc3 7a00 	vstr	s15, [r3]
 8007bd8:	482f      	ldr	r0, [pc, #188]	; (8007c98 <cppLoop+0x300>)
 8007bda:	f00c fabe 	bl	801415a <__cxa_guard_release>

	static float adj_acc = line_trace.getMaxAcc();
 8007bde:	4b30      	ldr	r3, [pc, #192]	; (8007ca0 <cppLoop+0x308>)
 8007be0:	781b      	ldrb	r3, [r3, #0]
 8007be2:	f3bf 8f5b 	dmb	ish
 8007be6:	b2db      	uxtb	r3, r3
 8007be8:	f003 0301 	and.w	r3, r3, #1
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	bf0c      	ite	eq
 8007bf0:	2301      	moveq	r3, #1
 8007bf2:	2300      	movne	r3, #0
 8007bf4:	b2db      	uxtb	r3, r3
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d015      	beq.n	8007c26 <cppLoop+0x28e>
 8007bfa:	4829      	ldr	r0, [pc, #164]	; (8007ca0 <cppLoop+0x308>)
 8007bfc:	f00c faa1 	bl	8014142 <__cxa_guard_acquire>
 8007c00:	4603      	mov	r3, r0
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	bf14      	ite	ne
 8007c06:	2301      	movne	r3, #1
 8007c08:	2300      	moveq	r3, #0
 8007c0a:	b2db      	uxtb	r3, r3
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d00a      	beq.n	8007c26 <cppLoop+0x28e>
 8007c10:	4813      	ldr	r0, [pc, #76]	; (8007c60 <cppLoop+0x2c8>)
 8007c12:	f7fc f8ec 	bl	8003dee <_ZN9LineTrace9getMaxAccEv>
 8007c16:	eef0 7a40 	vmov.f32	s15, s0
 8007c1a:	4b22      	ldr	r3, [pc, #136]	; (8007ca4 <cppLoop+0x30c>)
 8007c1c:	edc3 7a00 	vstr	s15, [r3]
 8007c20:	481f      	ldr	r0, [pc, #124]	; (8007ca0 <cppLoop+0x308>)
 8007c22:	f00c fa9a 	bl	801415a <__cxa_guard_release>
	static float adj_dec = line_trace.getMaxDec();
 8007c26:	4b20      	ldr	r3, [pc, #128]	; (8007ca8 <cppLoop+0x310>)
 8007c28:	781b      	ldrb	r3, [r3, #0]
 8007c2a:	f3bf 8f5b 	dmb	ish
 8007c2e:	b2db      	uxtb	r3, r3
 8007c30:	f003 0301 	and.w	r3, r3, #1
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	bf0c      	ite	eq
 8007c38:	2301      	moveq	r3, #1
 8007c3a:	2300      	movne	r3, #0
 8007c3c:	b2db      	uxtb	r3, r3
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d03f      	beq.n	8007cc2 <cppLoop+0x32a>
 8007c42:	4819      	ldr	r0, [pc, #100]	; (8007ca8 <cppLoop+0x310>)
 8007c44:	f00c fa7d 	bl	8014142 <__cxa_guard_acquire>
 8007c48:	4603      	mov	r3, r0
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	bf14      	ite	ne
 8007c4e:	2301      	movne	r3, #1
 8007c50:	2300      	moveq	r3, #0
 8007c52:	b2db      	uxtb	r3, r3
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d034      	beq.n	8007cc2 <cppLoop+0x32a>
 8007c58:	e028      	b.n	8007cac <cppLoop+0x314>
 8007c5a:	bf00      	nop
 8007c5c:	2004227c 	.word	0x2004227c
 8007c60:	2001db94 	.word	0x2001db94
 8007c64:	20042278 	.word	0x20042278
 8007c68:	20042284 	.word	0x20042284
 8007c6c:	20042280 	.word	0x20042280
 8007c70:	2004228c 	.word	0x2004228c
 8007c74:	20042288 	.word	0x20042288
 8007c78:	20042294 	.word	0x20042294
 8007c7c:	20042290 	.word	0x20042290
 8007c80:	2004229c 	.word	0x2004229c
 8007c84:	20042298 	.word	0x20042298
 8007c88:	200422a4 	.word	0x200422a4
 8007c8c:	200422a0 	.word	0x200422a0
 8007c90:	200422ac 	.word	0x200422ac
 8007c94:	200422a8 	.word	0x200422a8
 8007c98:	200422b4 	.word	0x200422b4
 8007c9c:	200422b0 	.word	0x200422b0
 8007ca0:	200422bc 	.word	0x200422bc
 8007ca4:	200422b8 	.word	0x200422b8
 8007ca8:	200422c4 	.word	0x200422c4
 8007cac:	48b2      	ldr	r0, [pc, #712]	; (8007f78 <cppLoop+0x5e0>)
 8007cae:	f7fc f8d4 	bl	8003e5a <_ZN9LineTrace9getMaxDecEv>
 8007cb2:	eef0 7a40 	vmov.f32	s15, s0
 8007cb6:	4bb1      	ldr	r3, [pc, #708]	; (8007f7c <cppLoop+0x5e4>)
 8007cb8:	edc3 7a00 	vstr	s15, [r3]
 8007cbc:	48b0      	ldr	r0, [pc, #704]	; (8007f80 <cppLoop+0x5e8>)
 8007cbe:	f00c fa4c 	bl	801415a <__cxa_guard_release>
	static float adj_acc2 = line_trace.getMaxAcc2();
 8007cc2:	4bb0      	ldr	r3, [pc, #704]	; (8007f84 <cppLoop+0x5ec>)
 8007cc4:	781b      	ldrb	r3, [r3, #0]
 8007cc6:	f3bf 8f5b 	dmb	ish
 8007cca:	b2db      	uxtb	r3, r3
 8007ccc:	f003 0301 	and.w	r3, r3, #1
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	bf0c      	ite	eq
 8007cd4:	2301      	moveq	r3, #1
 8007cd6:	2300      	movne	r3, #0
 8007cd8:	b2db      	uxtb	r3, r3
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d015      	beq.n	8007d0a <cppLoop+0x372>
 8007cde:	48a9      	ldr	r0, [pc, #676]	; (8007f84 <cppLoop+0x5ec>)
 8007ce0:	f00c fa2f 	bl	8014142 <__cxa_guard_acquire>
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	bf14      	ite	ne
 8007cea:	2301      	movne	r3, #1
 8007cec:	2300      	moveq	r3, #0
 8007cee:	b2db      	uxtb	r3, r3
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d00a      	beq.n	8007d0a <cppLoop+0x372>
 8007cf4:	48a0      	ldr	r0, [pc, #640]	; (8007f78 <cppLoop+0x5e0>)
 8007cf6:	f7fc f89e 	bl	8003e36 <_ZN9LineTrace10getMaxAcc2Ev>
 8007cfa:	eef0 7a40 	vmov.f32	s15, s0
 8007cfe:	4ba2      	ldr	r3, [pc, #648]	; (8007f88 <cppLoop+0x5f0>)
 8007d00:	edc3 7a00 	vstr	s15, [r3]
 8007d04:	489f      	ldr	r0, [pc, #636]	; (8007f84 <cppLoop+0x5ec>)
 8007d06:	f00c fa28 	bl	801415a <__cxa_guard_release>
	static float adj_dec2 = line_trace.getMaxDec2();
 8007d0a:	4ba0      	ldr	r3, [pc, #640]	; (8007f8c <cppLoop+0x5f4>)
 8007d0c:	781b      	ldrb	r3, [r3, #0]
 8007d0e:	f3bf 8f5b 	dmb	ish
 8007d12:	b2db      	uxtb	r3, r3
 8007d14:	f003 0301 	and.w	r3, r3, #1
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	bf0c      	ite	eq
 8007d1c:	2301      	moveq	r3, #1
 8007d1e:	2300      	movne	r3, #0
 8007d20:	b2db      	uxtb	r3, r3
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d015      	beq.n	8007d52 <cppLoop+0x3ba>
 8007d26:	4899      	ldr	r0, [pc, #612]	; (8007f8c <cppLoop+0x5f4>)
 8007d28:	f00c fa0b 	bl	8014142 <__cxa_guard_acquire>
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	bf14      	ite	ne
 8007d32:	2301      	movne	r3, #1
 8007d34:	2300      	moveq	r3, #0
 8007d36:	b2db      	uxtb	r3, r3
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d00a      	beq.n	8007d52 <cppLoop+0x3ba>
 8007d3c:	488e      	ldr	r0, [pc, #568]	; (8007f78 <cppLoop+0x5e0>)
 8007d3e:	f7fc f868 	bl	8003e12 <_ZN9LineTrace10getMaxDec2Ev>
 8007d42:	eef0 7a40 	vmov.f32	s15, s0
 8007d46:	4b92      	ldr	r3, [pc, #584]	; (8007f90 <cppLoop+0x5f8>)
 8007d48:	edc3 7a00 	vstr	s15, [r3]
 8007d4c:	488f      	ldr	r0, [pc, #572]	; (8007f8c <cppLoop+0x5f4>)
 8007d4e:	f00c fa04 	bl	801415a <__cxa_guard_release>

	switch(rotary_switch.getValue()){
 8007d52:	4890      	ldr	r0, [pc, #576]	; (8007f94 <cppLoop+0x5fc>)
 8007d54:	f7fd fb7e 	bl	8005454 <_ZN12RotarySwitch8getValueEv>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	2b0f      	cmp	r3, #15
 8007d5c:	f201 83c7 	bhi.w	80094ee <cppLoop+0x1b56>
 8007d60:	a201      	add	r2, pc, #4	; (adr r2, 8007d68 <cppLoop+0x3d0>)
 8007d62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d66:	bf00      	nop
 8007d68:	08007da9 	.word	0x08007da9
 8007d6c:	08008159 	.word	0x08008159
 8007d70:	080082a1 	.word	0x080082a1
 8007d74:	080083f3 	.word	0x080083f3
 8007d78:	080084bf 	.word	0x080084bf
 8007d7c:	08008751 	.word	0x08008751
 8007d80:	0800885d 	.word	0x0800885d
 8007d84:	08008ae5 	.word	0x08008ae5
 8007d88:	08008d2d 	.word	0x08008d2d
 8007d8c:	08008fb1 	.word	0x08008fb1
 8007d90:	0800906d 	.word	0x0800906d
 8007d94:	08009161 	.word	0x08009161
 8007d98:	080091e7 	.word	0x080091e7
 8007d9c:	08009281 	.word	0x08009281
 8007da0:	08009321 	.word	0x08009321
 8007da4:	08009439 	.word	0x08009439
	case 0:
		led.fullColor('W');
 8007da8:	2157      	movs	r1, #87	; 0x57
 8007daa:	487b      	ldr	r0, [pc, #492]	; (8007f98 <cppLoop+0x600>)
 8007dac:	f7fa fa42 	bl	8002234 <_ZN3LED9fullColorEc>

		lcd_clear();
 8007db0:	f7f9 f976 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8007db4:	2100      	movs	r1, #0
 8007db6:	2000      	movs	r0, #0
 8007db8:	f7f9 f982 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf    ", line_trace.getKp()*1000);
 8007dbc:	486e      	ldr	r0, [pc, #440]	; (8007f78 <cppLoop+0x5e0>)
 8007dbe:	f7fb ff06 	bl	8003bce <_ZN9LineTrace5getKpEv>
 8007dc2:	eeb0 7a40 	vmov.f32	s14, s0
 8007dc6:	eddf 7a75 	vldr	s15, [pc, #468]	; 8007f9c <cppLoop+0x604>
 8007dca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007dce:	ee17 0a90 	vmov	r0, s15
 8007dd2:	f7f8 fbd1 	bl	8000578 <__aeabi_f2d>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	460c      	mov	r4, r1
 8007dda:	461a      	mov	r2, r3
 8007ddc:	4623      	mov	r3, r4
 8007dde:	4870      	ldr	r0, [pc, #448]	; (8007fa0 <cppLoop+0x608>)
 8007de0:	f7f9 f998 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8007de4:	2101      	movs	r1, #1
 8007de6:	2000      	movs	r0, #0
 8007de8:	f7f9 f96a 	bl	80010c0 <lcd_locate>
		lcd_printf("%4.2lf%4.2lf", line_trace.getKi()*100, line_trace.getKd()*10000);
 8007dec:	4862      	ldr	r0, [pc, #392]	; (8007f78 <cppLoop+0x5e0>)
 8007dee:	f7fb fefd 	bl	8003bec <_ZN9LineTrace5getKiEv>
 8007df2:	eeb0 7a40 	vmov.f32	s14, s0
 8007df6:	eddf 7a6b 	vldr	s15, [pc, #428]	; 8007fa4 <cppLoop+0x60c>
 8007dfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007dfe:	ee17 0a90 	vmov	r0, s15
 8007e02:	f7f8 fbb9 	bl	8000578 <__aeabi_f2d>
 8007e06:	4605      	mov	r5, r0
 8007e08:	460e      	mov	r6, r1
 8007e0a:	485b      	ldr	r0, [pc, #364]	; (8007f78 <cppLoop+0x5e0>)
 8007e0c:	f7fb fefd 	bl	8003c0a <_ZN9LineTrace5getKdEv>
 8007e10:	eeb0 7a40 	vmov.f32	s14, s0
 8007e14:	eddf 7a64 	vldr	s15, [pc, #400]	; 8007fa8 <cppLoop+0x610>
 8007e18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e1c:	ee17 0a90 	vmov	r0, s15
 8007e20:	f7f8 fbaa 	bl	8000578 <__aeabi_f2d>
 8007e24:	4603      	mov	r3, r0
 8007e26:	460c      	mov	r4, r1
 8007e28:	e9cd 3400 	strd	r3, r4, [sp]
 8007e2c:	462a      	mov	r2, r5
 8007e2e:	4633      	mov	r3, r6
 8007e30:	485e      	ldr	r0, [pc, #376]	; (8007fac <cppLoop+0x614>)
 8007e32:	f7f9 f96f 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8007e36:	485e      	ldr	r0, [pc, #376]	; (8007fb0 <cppLoop+0x618>)
 8007e38:	f7fa f998 	bl	800216c <_ZN8JoyStick8getValueEv>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	2b08      	cmp	r3, #8
 8007e40:	bf0c      	ite	eq
 8007e42:	2301      	moveq	r3, #1
 8007e44:	2300      	movne	r3, #0
 8007e46:	b2db      	uxtb	r3, r3
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d022      	beq.n	8007e92 <cppLoop+0x4fa>
			led.LR(-1, 1);
 8007e4c:	2201      	movs	r2, #1
 8007e4e:	f04f 31ff 	mov.w	r1, #4294967295
 8007e52:	4851      	ldr	r0, [pc, #324]	; (8007f98 <cppLoop+0x600>)
 8007e54:	f7fa faaa 	bl	80023ac <_ZN3LED2LREaa>
			HAL_Delay(300);
 8007e58:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007e5c:	f001 fc8c 	bl	8009778 <HAL_Delay>

			selector++;
 8007e60:	4b54      	ldr	r3, [pc, #336]	; (8007fb4 <cppLoop+0x61c>)
 8007e62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007e66:	b29b      	uxth	r3, r3
 8007e68:	3301      	adds	r3, #1
 8007e6a:	b29b      	uxth	r3, r3
 8007e6c:	b21a      	sxth	r2, r3
 8007e6e:	4b51      	ldr	r3, [pc, #324]	; (8007fb4 <cppLoop+0x61c>)
 8007e70:	801a      	strh	r2, [r3, #0]
			if(selector >= 3) selector = 0;
 8007e72:	4b50      	ldr	r3, [pc, #320]	; (8007fb4 <cppLoop+0x61c>)
 8007e74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007e78:	2b02      	cmp	r3, #2
 8007e7a:	dd02      	ble.n	8007e82 <cppLoop+0x4ea>
 8007e7c:	4b4d      	ldr	r3, [pc, #308]	; (8007fb4 <cppLoop+0x61c>)
 8007e7e:	2200      	movs	r2, #0
 8007e80:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8007e82:	2200      	movs	r2, #0
 8007e84:	f04f 31ff 	mov.w	r1, #4294967295
 8007e88:	4843      	ldr	r0, [pc, #268]	; (8007f98 <cppLoop+0x600>)
 8007e8a:	f7fa fa8f 	bl	80023ac <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
			line_trace.setGain(adj_kp, adj_ki, adj_kd);

			led.LR(-1, 0);
		}
		break;
 8007e8e:	f001 bb30 	b.w	80094f2 <cppLoop+0x1b5a>
		else if(joy_stick.getValue() == JOY_R){
 8007e92:	4847      	ldr	r0, [pc, #284]	; (8007fb0 <cppLoop+0x618>)
 8007e94:	f7fa f96a 	bl	800216c <_ZN8JoyStick8getValueEv>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	2b10      	cmp	r3, #16
 8007e9c:	bf0c      	ite	eq
 8007e9e:	2301      	moveq	r3, #1
 8007ea0:	2300      	movne	r3, #0
 8007ea2:	b2db      	uxtb	r3, r3
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	f000 808d 	beq.w	8007fc4 <cppLoop+0x62c>
			led.LR(-1, 1);
 8007eaa:	2201      	movs	r2, #1
 8007eac:	f04f 31ff 	mov.w	r1, #4294967295
 8007eb0:	4839      	ldr	r0, [pc, #228]	; (8007f98 <cppLoop+0x600>)
 8007eb2:	f7fa fa7b 	bl	80023ac <_ZN3LED2LREaa>
			HAL_Delay(100);
 8007eb6:	2064      	movs	r0, #100	; 0x64
 8007eb8:	f001 fc5e 	bl	8009778 <HAL_Delay>
			if(selector == 0){
 8007ebc:	4b3d      	ldr	r3, [pc, #244]	; (8007fb4 <cppLoop+0x61c>)
 8007ebe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d113      	bne.n	8007eee <cppLoop+0x556>
				adj_kp = adj_kp + 0.00001;
 8007ec6:	4b3c      	ldr	r3, [pc, #240]	; (8007fb8 <cppLoop+0x620>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	4618      	mov	r0, r3
 8007ecc:	f7f8 fb54 	bl	8000578 <__aeabi_f2d>
 8007ed0:	a323      	add	r3, pc, #140	; (adr r3, 8007f60 <cppLoop+0x5c8>)
 8007ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ed6:	f7f8 f9f1 	bl	80002bc <__adddf3>
 8007eda:	4603      	mov	r3, r0
 8007edc:	460c      	mov	r4, r1
 8007ede:	4618      	mov	r0, r3
 8007ee0:	4621      	mov	r1, r4
 8007ee2:	f7f8 fe99 	bl	8000c18 <__aeabi_d2f>
 8007ee6:	4602      	mov	r2, r0
 8007ee8:	4b33      	ldr	r3, [pc, #204]	; (8007fb8 <cppLoop+0x620>)
 8007eea:	601a      	str	r2, [r3, #0]
 8007eec:	e02b      	b.n	8007f46 <cppLoop+0x5ae>
			else if(selector == 1){
 8007eee:	4b31      	ldr	r3, [pc, #196]	; (8007fb4 <cppLoop+0x61c>)
 8007ef0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007ef4:	2b01      	cmp	r3, #1
 8007ef6:	d113      	bne.n	8007f20 <cppLoop+0x588>
				adj_ki = adj_ki + 0.0001;
 8007ef8:	4b30      	ldr	r3, [pc, #192]	; (8007fbc <cppLoop+0x624>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4618      	mov	r0, r3
 8007efe:	f7f8 fb3b 	bl	8000578 <__aeabi_f2d>
 8007f02:	a319      	add	r3, pc, #100	; (adr r3, 8007f68 <cppLoop+0x5d0>)
 8007f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f08:	f7f8 f9d8 	bl	80002bc <__adddf3>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	460c      	mov	r4, r1
 8007f10:	4618      	mov	r0, r3
 8007f12:	4621      	mov	r1, r4
 8007f14:	f7f8 fe80 	bl	8000c18 <__aeabi_d2f>
 8007f18:	4602      	mov	r2, r0
 8007f1a:	4b28      	ldr	r3, [pc, #160]	; (8007fbc <cppLoop+0x624>)
 8007f1c:	601a      	str	r2, [r3, #0]
 8007f1e:	e012      	b.n	8007f46 <cppLoop+0x5ae>
				adj_kd = adj_kd + 0.000001;
 8007f20:	4b27      	ldr	r3, [pc, #156]	; (8007fc0 <cppLoop+0x628>)
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	4618      	mov	r0, r3
 8007f26:	f7f8 fb27 	bl	8000578 <__aeabi_f2d>
 8007f2a:	a311      	add	r3, pc, #68	; (adr r3, 8007f70 <cppLoop+0x5d8>)
 8007f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f30:	f7f8 f9c4 	bl	80002bc <__adddf3>
 8007f34:	4603      	mov	r3, r0
 8007f36:	460c      	mov	r4, r1
 8007f38:	4618      	mov	r0, r3
 8007f3a:	4621      	mov	r1, r4
 8007f3c:	f7f8 fe6c 	bl	8000c18 <__aeabi_d2f>
 8007f40:	4602      	mov	r2, r0
 8007f42:	4b1f      	ldr	r3, [pc, #124]	; (8007fc0 <cppLoop+0x628>)
 8007f44:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8007f46:	2152      	movs	r1, #82	; 0x52
 8007f48:	4813      	ldr	r0, [pc, #76]	; (8007f98 <cppLoop+0x600>)
 8007f4a:	f7fa f973 	bl	8002234 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 8007f4e:	2200      	movs	r2, #0
 8007f50:	f04f 31ff 	mov.w	r1, #4294967295
 8007f54:	4810      	ldr	r0, [pc, #64]	; (8007f98 <cppLoop+0x600>)
 8007f56:	f7fa fa29 	bl	80023ac <_ZN3LED2LREaa>
		break;
 8007f5a:	f001 baca 	b.w	80094f2 <cppLoop+0x1b5a>
 8007f5e:	bf00      	nop
 8007f60:	88e368f1 	.word	0x88e368f1
 8007f64:	3ee4f8b5 	.word	0x3ee4f8b5
 8007f68:	eb1c432d 	.word	0xeb1c432d
 8007f6c:	3f1a36e2 	.word	0x3f1a36e2
 8007f70:	a0b5ed8d 	.word	0xa0b5ed8d
 8007f74:	3eb0c6f7 	.word	0x3eb0c6f7
 8007f78:	2001db94 	.word	0x2001db94
 8007f7c:	200422c0 	.word	0x200422c0
 8007f80:	200422c4 	.word	0x200422c4
 8007f84:	200422cc 	.word	0x200422cc
 8007f88:	200422c8 	.word	0x200422c8
 8007f8c:	200422d4 	.word	0x200422d4
 8007f90:	200422d0 	.word	0x200422d0
 8007f94:	200005fc 	.word	0x200005fc
 8007f98:	20000604 	.word	0x20000604
 8007f9c:	447a0000 	.word	0x447a0000
 8007fa0:	08019a44 	.word	0x08019a44
 8007fa4:	42c80000 	.word	0x42c80000
 8007fa8:	461c4000 	.word	0x461c4000
 8007fac:	08019a50 	.word	0x08019a50
 8007fb0:	200005f8 	.word	0x200005f8
 8007fb4:	2004226c 	.word	0x2004226c
 8007fb8:	20042278 	.word	0x20042278
 8007fbc:	20042280 	.word	0x20042280
 8007fc0:	20042288 	.word	0x20042288
		else if(joy_stick.getValue() == JOY_L){
 8007fc4:	48a2      	ldr	r0, [pc, #648]	; (8008250 <cppLoop+0x8b8>)
 8007fc6:	f7fa f8d1 	bl	800216c <_ZN8JoyStick8getValueEv>
 8007fca:	4603      	mov	r3, r0
 8007fcc:	2b01      	cmp	r3, #1
 8007fce:	bf0c      	ite	eq
 8007fd0:	2301      	moveq	r3, #1
 8007fd2:	2300      	movne	r3, #0
 8007fd4:	b2db      	uxtb	r3, r3
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d059      	beq.n	800808e <cppLoop+0x6f6>
			led.LR(-1, 1);
 8007fda:	2201      	movs	r2, #1
 8007fdc:	f04f 31ff 	mov.w	r1, #4294967295
 8007fe0:	489c      	ldr	r0, [pc, #624]	; (8008254 <cppLoop+0x8bc>)
 8007fe2:	f7fa f9e3 	bl	80023ac <_ZN3LED2LREaa>
			HAL_Delay(100);
 8007fe6:	2064      	movs	r0, #100	; 0x64
 8007fe8:	f001 fbc6 	bl	8009778 <HAL_Delay>
			if(selector == 0){
 8007fec:	4b9a      	ldr	r3, [pc, #616]	; (8008258 <cppLoop+0x8c0>)
 8007fee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d113      	bne.n	800801e <cppLoop+0x686>
				adj_kp = adj_kp - 0.00001;
 8007ff6:	4b99      	ldr	r3, [pc, #612]	; (800825c <cppLoop+0x8c4>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f7f8 fabc 	bl	8000578 <__aeabi_f2d>
 8008000:	a38d      	add	r3, pc, #564	; (adr r3, 8008238 <cppLoop+0x8a0>)
 8008002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008006:	f7f8 f957 	bl	80002b8 <__aeabi_dsub>
 800800a:	4603      	mov	r3, r0
 800800c:	460c      	mov	r4, r1
 800800e:	4618      	mov	r0, r3
 8008010:	4621      	mov	r1, r4
 8008012:	f7f8 fe01 	bl	8000c18 <__aeabi_d2f>
 8008016:	4602      	mov	r2, r0
 8008018:	4b90      	ldr	r3, [pc, #576]	; (800825c <cppLoop+0x8c4>)
 800801a:	601a      	str	r2, [r3, #0]
 800801c:	e02b      	b.n	8008076 <cppLoop+0x6de>
			else if(selector == 1){
 800801e:	4b8e      	ldr	r3, [pc, #568]	; (8008258 <cppLoop+0x8c0>)
 8008020:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008024:	2b01      	cmp	r3, #1
 8008026:	d113      	bne.n	8008050 <cppLoop+0x6b8>
				adj_ki = adj_ki - 0.0001;
 8008028:	4b8d      	ldr	r3, [pc, #564]	; (8008260 <cppLoop+0x8c8>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	4618      	mov	r0, r3
 800802e:	f7f8 faa3 	bl	8000578 <__aeabi_f2d>
 8008032:	a383      	add	r3, pc, #524	; (adr r3, 8008240 <cppLoop+0x8a8>)
 8008034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008038:	f7f8 f93e 	bl	80002b8 <__aeabi_dsub>
 800803c:	4603      	mov	r3, r0
 800803e:	460c      	mov	r4, r1
 8008040:	4618      	mov	r0, r3
 8008042:	4621      	mov	r1, r4
 8008044:	f7f8 fde8 	bl	8000c18 <__aeabi_d2f>
 8008048:	4602      	mov	r2, r0
 800804a:	4b85      	ldr	r3, [pc, #532]	; (8008260 <cppLoop+0x8c8>)
 800804c:	601a      	str	r2, [r3, #0]
 800804e:	e012      	b.n	8008076 <cppLoop+0x6de>
				adj_kd = adj_kd - 0.000001;
 8008050:	4b84      	ldr	r3, [pc, #528]	; (8008264 <cppLoop+0x8cc>)
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	4618      	mov	r0, r3
 8008056:	f7f8 fa8f 	bl	8000578 <__aeabi_f2d>
 800805a:	a37b      	add	r3, pc, #492	; (adr r3, 8008248 <cppLoop+0x8b0>)
 800805c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008060:	f7f8 f92a 	bl	80002b8 <__aeabi_dsub>
 8008064:	4603      	mov	r3, r0
 8008066:	460c      	mov	r4, r1
 8008068:	4618      	mov	r0, r3
 800806a:	4621      	mov	r1, r4
 800806c:	f7f8 fdd4 	bl	8000c18 <__aeabi_d2f>
 8008070:	4602      	mov	r2, r0
 8008072:	4b7c      	ldr	r3, [pc, #496]	; (8008264 <cppLoop+0x8cc>)
 8008074:	601a      	str	r2, [r3, #0]
			led.fullColor('R');
 8008076:	2152      	movs	r1, #82	; 0x52
 8008078:	4876      	ldr	r0, [pc, #472]	; (8008254 <cppLoop+0x8bc>)
 800807a:	f7fa f8db 	bl	8002234 <_ZN3LED9fullColorEc>
			led.LR(-1, 0);
 800807e:	2200      	movs	r2, #0
 8008080:	f04f 31ff 	mov.w	r1, #4294967295
 8008084:	4873      	ldr	r0, [pc, #460]	; (8008254 <cppLoop+0x8bc>)
 8008086:	f7fa f991 	bl	80023ac <_ZN3LED2LREaa>
		break;
 800808a:	f001 ba32 	b.w	80094f2 <cppLoop+0x1b5a>
		else if(joy_stick.getValue() == JOY_D){
 800808e:	4870      	ldr	r0, [pc, #448]	; (8008250 <cppLoop+0x8b8>)
 8008090:	f7fa f86c 	bl	800216c <_ZN8JoyStick8getValueEv>
 8008094:	4603      	mov	r3, r0
 8008096:	2b04      	cmp	r3, #4
 8008098:	bf0c      	ite	eq
 800809a:	2301      	moveq	r3, #1
 800809c:	2300      	movne	r3, #0
 800809e:	b2db      	uxtb	r3, r3
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d011      	beq.n	80080c8 <cppLoop+0x730>
			led.LR(-1, 1);
 80080a4:	2201      	movs	r2, #1
 80080a6:	f04f 31ff 	mov.w	r1, #4294967295
 80080aa:	486a      	ldr	r0, [pc, #424]	; (8008254 <cppLoop+0x8bc>)
 80080ac:	f7fa f97e 	bl	80023ac <_ZN3LED2LREaa>
			HAL_Delay(300);
 80080b0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80080b4:	f001 fb60 	bl	8009778 <HAL_Delay>
			led.LR(-1, 0);
 80080b8:	2200      	movs	r2, #0
 80080ba:	f04f 31ff 	mov.w	r1, #4294967295
 80080be:	4865      	ldr	r0, [pc, #404]	; (8008254 <cppLoop+0x8bc>)
 80080c0:	f7fa f974 	bl	80023ac <_ZN3LED2LREaa>
		break;
 80080c4:	f001 ba15 	b.w	80094f2 <cppLoop+0x1b5a>
		else if(joy_stick.getValue() == JOY_C){
 80080c8:	4861      	ldr	r0, [pc, #388]	; (8008250 <cppLoop+0x8b8>)
 80080ca:	f7fa f84f 	bl	800216c <_ZN8JoyStick8getValueEv>
 80080ce:	4603      	mov	r3, r0
 80080d0:	2b02      	cmp	r3, #2
 80080d2:	bf0c      	ite	eq
 80080d4:	2301      	moveq	r3, #1
 80080d6:	2300      	movne	r3, #0
 80080d8:	b2db      	uxtb	r3, r3
 80080da:	2b00      	cmp	r3, #0
 80080dc:	f001 8209 	beq.w	80094f2 <cppLoop+0x1b5a>
			led.LR(-1, 1);
 80080e0:	2201      	movs	r2, #1
 80080e2:	f04f 31ff 	mov.w	r1, #4294967295
 80080e6:	485b      	ldr	r0, [pc, #364]	; (8008254 <cppLoop+0x8bc>)
 80080e8:	f7fa f960 	bl	80023ac <_ZN3LED2LREaa>
			HAL_Delay(300);
 80080ec:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80080f0:	f001 fb42 	bl	8009778 <HAL_Delay>
			sd_write_array_float("PARAMS", "KP.TXT", 1, &adj_kp, OVER_WRITE);
 80080f4:	2300      	movs	r3, #0
 80080f6:	9300      	str	r3, [sp, #0]
 80080f8:	4b58      	ldr	r3, [pc, #352]	; (800825c <cppLoop+0x8c4>)
 80080fa:	2201      	movs	r2, #1
 80080fc:	495a      	ldr	r1, [pc, #360]	; (8008268 <cppLoop+0x8d0>)
 80080fe:	485b      	ldr	r0, [pc, #364]	; (800826c <cppLoop+0x8d4>)
 8008100:	f7f9 fbbc 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KI.TXT", 1, &adj_ki, OVER_WRITE);
 8008104:	2300      	movs	r3, #0
 8008106:	9300      	str	r3, [sp, #0]
 8008108:	4b55      	ldr	r3, [pc, #340]	; (8008260 <cppLoop+0x8c8>)
 800810a:	2201      	movs	r2, #1
 800810c:	4958      	ldr	r1, [pc, #352]	; (8008270 <cppLoop+0x8d8>)
 800810e:	4857      	ldr	r0, [pc, #348]	; (800826c <cppLoop+0x8d4>)
 8008110:	f7f9 fbb4 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "KD.TXT", 1, &adj_kd, OVER_WRITE);
 8008114:	2300      	movs	r3, #0
 8008116:	9300      	str	r3, [sp, #0]
 8008118:	4b52      	ldr	r3, [pc, #328]	; (8008264 <cppLoop+0x8cc>)
 800811a:	2201      	movs	r2, #1
 800811c:	4955      	ldr	r1, [pc, #340]	; (8008274 <cppLoop+0x8dc>)
 800811e:	4853      	ldr	r0, [pc, #332]	; (800826c <cppLoop+0x8d4>)
 8008120:	f7f9 fbac 	bl	800187c <sd_write_array_float>
			line_trace.setGain(adj_kp, adj_ki, adj_kd);
 8008124:	4b4d      	ldr	r3, [pc, #308]	; (800825c <cppLoop+0x8c4>)
 8008126:	edd3 7a00 	vldr	s15, [r3]
 800812a:	4b4d      	ldr	r3, [pc, #308]	; (8008260 <cppLoop+0x8c8>)
 800812c:	ed93 7a00 	vldr	s14, [r3]
 8008130:	4b4c      	ldr	r3, [pc, #304]	; (8008264 <cppLoop+0x8cc>)
 8008132:	edd3 6a00 	vldr	s13, [r3]
 8008136:	eeb0 1a66 	vmov.f32	s2, s13
 800813a:	eef0 0a47 	vmov.f32	s1, s14
 800813e:	eeb0 0a67 	vmov.f32	s0, s15
 8008142:	484d      	ldr	r0, [pc, #308]	; (8008278 <cppLoop+0x8e0>)
 8008144:	f7fb fd2a 	bl	8003b9c <_ZN9LineTrace7setGainEfff>
			led.LR(-1, 0);
 8008148:	2200      	movs	r2, #0
 800814a:	f04f 31ff 	mov.w	r1, #4294967295
 800814e:	4841      	ldr	r0, [pc, #260]	; (8008254 <cppLoop+0x8bc>)
 8008150:	f7fa f92c 	bl	80023ac <_ZN3LED2LREaa>
		break;
 8008154:	f001 b9cd 	b.w	80094f2 <cppLoop+0x1b5a>

	case 1:
		led.fullColor('C');
 8008158:	2143      	movs	r1, #67	; 0x43
 800815a:	483e      	ldr	r0, [pc, #248]	; (8008254 <cppLoop+0x8bc>)
 800815c:	f7fa f86a 	bl	8002234 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008160:	f7f8 ff9e 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008164:	2100      	movs	r1, #0
 8008166:	2000      	movs	r0, #0
 8008168:	f7f8 ffaa 	bl	80010c0 <lcd_locate>
		lcd_printf("FirstRun");
 800816c:	4843      	ldr	r0, [pc, #268]	; (800827c <cppLoop+0x8e4>)
 800816e:	f7f8 ffd1 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008172:	2101      	movs	r1, #1
 8008174:	2000      	movs	r0, #0
 8008176:	f7f8 ffa3 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_velocity);
 800817a:	4b41      	ldr	r3, [pc, #260]	; (8008280 <cppLoop+0x8e8>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	4618      	mov	r0, r3
 8008180:	f7f8 f9fa 	bl	8000578 <__aeabi_f2d>
 8008184:	4603      	mov	r3, r0
 8008186:	460c      	mov	r4, r1
 8008188:	461a      	mov	r2, r3
 800818a:	4623      	mov	r3, r4
 800818c:	483d      	ldr	r0, [pc, #244]	; (8008284 <cppLoop+0x8ec>)
 800818e:	f7f8 ffc1 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8008192:	482f      	ldr	r0, [pc, #188]	; (8008250 <cppLoop+0x8b8>)
 8008194:	f7f9 ffea 	bl	800216c <_ZN8JoyStick8getValueEv>
 8008198:	4603      	mov	r3, r0
 800819a:	2b02      	cmp	r3, #2
 800819c:	bf0c      	ite	eq
 800819e:	2301      	moveq	r3, #1
 80081a0:	2300      	movne	r3, #0
 80081a2:	b2db      	uxtb	r3, r3
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	f001 81a6 	beq.w	80094f6 <cppLoop+0x1b5e>
			HAL_Delay(500);
 80081aa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80081ae:	f001 fae3 	bl	8009778 <HAL_Delay>

			line_trace.setTargetVelocity(adj_velocity);
 80081b2:	4b33      	ldr	r3, [pc, #204]	; (8008280 <cppLoop+0x8e8>)
 80081b4:	edd3 7a00 	vldr	s15, [r3]
 80081b8:	eeb0 0a67 	vmov.f32	s0, s15
 80081bc:	482e      	ldr	r0, [pc, #184]	; (8008278 <cppLoop+0x8e0>)
 80081be:	f7fb fd42 	bl	8003c46 <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(1, -1);
 80081c2:	f04f 32ff 	mov.w	r2, #4294967295
 80081c6:	2101      	movs	r1, #1
 80081c8:	4822      	ldr	r0, [pc, #136]	; (8008254 <cppLoop+0x8bc>)
 80081ca:	f7fa f8ef 	bl	80023ac <_ZN3LED2LREaa>

			// BLDC on
			HAL_Delay(3000);
 80081ce:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80081d2:	f001 fad1 	bl	8009778 <HAL_Delay>
			esc.on(0.35, 0.35, 0.35, 0.35);
 80081d6:	eddf 1a2c 	vldr	s3, [pc, #176]	; 8008288 <cppLoop+0x8f0>
 80081da:	ed9f 1a2b 	vldr	s2, [pc, #172]	; 8008288 <cppLoop+0x8f0>
 80081de:	eddf 0a2a 	vldr	s1, [pc, #168]	; 8008288 <cppLoop+0x8f0>
 80081e2:	ed9f 0a29 	vldr	s0, [pc, #164]	; 8008288 <cppLoop+0x8f0>
 80081e6:	4829      	ldr	r0, [pc, #164]	; (800828c <cppLoop+0x8f4>)
 80081e8:	f7f9 f832 	bl	8001250 <_ZN3ESC2onEffff>
			HAL_Delay(1000);
 80081ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80081f0:	f001 fac2 	bl	8009778 <HAL_Delay>

			// Record start
			logger.start();
 80081f4:	4826      	ldr	r0, [pc, #152]	; (8008290 <cppLoop+0x8f8>)
 80081f6:	f7fc fd6c 	bl	8004cd2 <_ZN6Logger5startEv>

			// Run
			line_trace.setMode(FIRST_RUNNING);
 80081fa:	2100      	movs	r1, #0
 80081fc:	481e      	ldr	r0, [pc, #120]	; (8008278 <cppLoop+0x8e0>)
 80081fe:	f7fb ff67 	bl	80040d0 <_ZN9LineTrace7setModeEs>
			line_trace.running();
 8008202:	481d      	ldr	r0, [pc, #116]	; (8008278 <cppLoop+0x8e0>)
 8008204:	f7fb ffa2 	bl	800414c <_ZN9LineTrace7runningEv>

			// BLDC off
			esc.off();
 8008208:	4820      	ldr	r0, [pc, #128]	; (800828c <cppLoop+0x8f4>)
 800820a:	f7f9 f8bb 	bl	8001384 <_ZN3ESC3offEv>

			// Record stop and save
			logger.stop();
 800820e:	4820      	ldr	r0, [pc, #128]	; (8008290 <cppLoop+0x8f8>)
 8008210:	f7fc fd6f 	bl	8004cf2 <_ZN6Logger4stopEv>
			logger.saveLogsInt("STATELOG", "LPERIOD.txt");
 8008214:	4a1f      	ldr	r2, [pc, #124]	; (8008294 <cppLoop+0x8fc>)
 8008216:	4920      	ldr	r1, [pc, #128]	; (8008298 <cppLoop+0x900>)
 8008218:	481d      	ldr	r0, [pc, #116]	; (8008290 <cppLoop+0x8f8>)
 800821a:	f7fc fc65 	bl	8004ae8 <_ZN6Logger11saveLogsIntEPKcS1_>
			logger.saveLogs2Int("STATELOG", "RPERIOD.txt");
 800821e:	4a1f      	ldr	r2, [pc, #124]	; (800829c <cppLoop+0x904>)
 8008220:	491d      	ldr	r1, [pc, #116]	; (8008298 <cppLoop+0x900>)
 8008222:	481b      	ldr	r0, [pc, #108]	; (8008290 <cppLoop+0x8f8>)
 8008224:	f7fc fc76 	bl	8004b14 <_ZN6Logger12saveLogs2IntEPKcS1_>

			led.LR(0, -1);
 8008228:	f04f 32ff 	mov.w	r2, #4294967295
 800822c:	2100      	movs	r1, #0
 800822e:	4809      	ldr	r0, [pc, #36]	; (8008254 <cppLoop+0x8bc>)
 8008230:	f7fa f8bc 	bl	80023ac <_ZN3LED2LREaa>
		}

		break;
 8008234:	f001 b95f 	b.w	80094f6 <cppLoop+0x1b5e>
 8008238:	88e368f1 	.word	0x88e368f1
 800823c:	3ee4f8b5 	.word	0x3ee4f8b5
 8008240:	eb1c432d 	.word	0xeb1c432d
 8008244:	3f1a36e2 	.word	0x3f1a36e2
 8008248:	a0b5ed8d 	.word	0xa0b5ed8d
 800824c:	3eb0c6f7 	.word	0x3eb0c6f7
 8008250:	200005f8 	.word	0x200005f8
 8008254:	20000604 	.word	0x20000604
 8008258:	2004226c 	.word	0x2004226c
 800825c:	20042278 	.word	0x20042278
 8008260:	20042280 	.word	0x20042280
 8008264:	20042288 	.word	0x20042288
 8008268:	08019a60 	.word	0x08019a60
 800826c:	08019a68 	.word	0x08019a68
 8008270:	08019a70 	.word	0x08019a70
 8008274:	08019a78 	.word	0x08019a78
 8008278:	2001db94 	.word	0x2001db94
 800827c:	08019a80 	.word	0x08019a80
 8008280:	20042290 	.word	0x20042290
 8008284:	08019a8c 	.word	0x08019a8c
 8008288:	3eb33333 	.word	0x3eb33333
 800828c:	2001db90 	.word	0x2001db90
 8008290:	20000628 	.word	0x20000628
 8008294:	08019a98 	.word	0x08019a98
 8008298:	08019aa4 	.word	0x08019aa4
 800829c:	08019ab0 	.word	0x08019ab0

	case 2:
		led.fullColor('B');
 80082a0:	2142      	movs	r1, #66	; 0x42
 80082a2:	48b7      	ldr	r0, [pc, #732]	; (8008580 <cppLoop+0xbe8>)
 80082a4:	f7f9 ffc6 	bl	8002234 <_ZN3LED9fullColorEc>

		lcd_clear();
 80082a8:	f7f8 fefa 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80082ac:	2100      	movs	r1, #0
 80082ae:	2000      	movs	r0, #0
 80082b0:	f7f8 ff06 	bl	80010c0 <lcd_locate>
		lcd_printf("FirstRun");
 80082b4:	48b3      	ldr	r0, [pc, #716]	; (8008584 <cppLoop+0xbec>)
 80082b6:	f7f8 ff2d 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80082ba:	2101      	movs	r1, #1
 80082bc:	2000      	movs	r0, #0
 80082be:	f7f8 feff 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", adj_velocity);
 80082c2:	4bb1      	ldr	r3, [pc, #708]	; (8008588 <cppLoop+0xbf0>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	4618      	mov	r0, r3
 80082c8:	f7f8 f956 	bl	8000578 <__aeabi_f2d>
 80082cc:	4603      	mov	r3, r0
 80082ce:	460c      	mov	r4, r1
 80082d0:	461a      	mov	r2, r3
 80082d2:	4623      	mov	r3, r4
 80082d4:	48ad      	ldr	r0, [pc, #692]	; (800858c <cppLoop+0xbf4>)
 80082d6:	f7f8 ff1d 	bl	8001114 <lcd_printf>


		if(joy_stick.getValue() == JOY_R){
 80082da:	48ad      	ldr	r0, [pc, #692]	; (8008590 <cppLoop+0xbf8>)
 80082dc:	f7f9 ff46 	bl	800216c <_ZN8JoyStick8getValueEv>
 80082e0:	4603      	mov	r3, r0
 80082e2:	2b10      	cmp	r3, #16
 80082e4:	bf0c      	ite	eq
 80082e6:	2301      	moveq	r3, #1
 80082e8:	2300      	movne	r3, #0
 80082ea:	b2db      	uxtb	r3, r3
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d023      	beq.n	8008338 <cppLoop+0x9a0>
			led.LR(-1, 1);
 80082f0:	2201      	movs	r2, #1
 80082f2:	f04f 31ff 	mov.w	r1, #4294967295
 80082f6:	48a2      	ldr	r0, [pc, #648]	; (8008580 <cppLoop+0xbe8>)
 80082f8:	f7fa f858 	bl	80023ac <_ZN3LED2LREaa>
			HAL_Delay(100);
 80082fc:	2064      	movs	r0, #100	; 0x64
 80082fe:	f001 fa3b 	bl	8009778 <HAL_Delay>

			adj_velocity = adj_velocity + 0.1;
 8008302:	4ba1      	ldr	r3, [pc, #644]	; (8008588 <cppLoop+0xbf0>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	4618      	mov	r0, r3
 8008308:	f7f8 f936 	bl	8000578 <__aeabi_f2d>
 800830c:	a39a      	add	r3, pc, #616	; (adr r3, 8008578 <cppLoop+0xbe0>)
 800830e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008312:	f7f7 ffd3 	bl	80002bc <__adddf3>
 8008316:	4603      	mov	r3, r0
 8008318:	460c      	mov	r4, r1
 800831a:	4618      	mov	r0, r3
 800831c:	4621      	mov	r1, r4
 800831e:	f7f8 fc7b 	bl	8000c18 <__aeabi_d2f>
 8008322:	4602      	mov	r2, r0
 8008324:	4b98      	ldr	r3, [pc, #608]	; (8008588 <cppLoop+0xbf0>)
 8008326:	601a      	str	r2, [r3, #0]

			led.LR(-1, 0);
 8008328:	2200      	movs	r2, #0
 800832a:	f04f 31ff 	mov.w	r1, #4294967295
 800832e:	4894      	ldr	r0, [pc, #592]	; (8008580 <cppLoop+0xbe8>)
 8008330:	f7fa f83c 	bl	80023ac <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "TARVEL1.TXT", 1, &adj_velocity, OVER_WRITE);
			line_trace.setTargetVelocity(adj_velocity);

			led.LR(-1, 0);
		}
		break;
 8008334:	f001 b8e1 	b.w	80094fa <cppLoop+0x1b62>
		else if(joy_stick.getValue() == JOY_L){
 8008338:	4895      	ldr	r0, [pc, #596]	; (8008590 <cppLoop+0xbf8>)
 800833a:	f7f9 ff17 	bl	800216c <_ZN8JoyStick8getValueEv>
 800833e:	4603      	mov	r3, r0
 8008340:	2b01      	cmp	r3, #1
 8008342:	bf0c      	ite	eq
 8008344:	2301      	moveq	r3, #1
 8008346:	2300      	movne	r3, #0
 8008348:	b2db      	uxtb	r3, r3
 800834a:	2b00      	cmp	r3, #0
 800834c:	d023      	beq.n	8008396 <cppLoop+0x9fe>
			led.LR(-1, 1);
 800834e:	2201      	movs	r2, #1
 8008350:	f04f 31ff 	mov.w	r1, #4294967295
 8008354:	488a      	ldr	r0, [pc, #552]	; (8008580 <cppLoop+0xbe8>)
 8008356:	f7fa f829 	bl	80023ac <_ZN3LED2LREaa>
			HAL_Delay(100);
 800835a:	2064      	movs	r0, #100	; 0x64
 800835c:	f001 fa0c 	bl	8009778 <HAL_Delay>
			adj_velocity = adj_velocity - 0.1;
 8008360:	4b89      	ldr	r3, [pc, #548]	; (8008588 <cppLoop+0xbf0>)
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	4618      	mov	r0, r3
 8008366:	f7f8 f907 	bl	8000578 <__aeabi_f2d>
 800836a:	a383      	add	r3, pc, #524	; (adr r3, 8008578 <cppLoop+0xbe0>)
 800836c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008370:	f7f7 ffa2 	bl	80002b8 <__aeabi_dsub>
 8008374:	4603      	mov	r3, r0
 8008376:	460c      	mov	r4, r1
 8008378:	4618      	mov	r0, r3
 800837a:	4621      	mov	r1, r4
 800837c:	f7f8 fc4c 	bl	8000c18 <__aeabi_d2f>
 8008380:	4602      	mov	r2, r0
 8008382:	4b81      	ldr	r3, [pc, #516]	; (8008588 <cppLoop+0xbf0>)
 8008384:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008386:	2200      	movs	r2, #0
 8008388:	f04f 31ff 	mov.w	r1, #4294967295
 800838c:	487c      	ldr	r0, [pc, #496]	; (8008580 <cppLoop+0xbe8>)
 800838e:	f7fa f80d 	bl	80023ac <_ZN3LED2LREaa>
		break;
 8008392:	f001 b8b2 	b.w	80094fa <cppLoop+0x1b62>
		else if(joy_stick.getValue() == JOY_C){
 8008396:	487e      	ldr	r0, [pc, #504]	; (8008590 <cppLoop+0xbf8>)
 8008398:	f7f9 fee8 	bl	800216c <_ZN8JoyStick8getValueEv>
 800839c:	4603      	mov	r3, r0
 800839e:	2b02      	cmp	r3, #2
 80083a0:	bf0c      	ite	eq
 80083a2:	2301      	moveq	r3, #1
 80083a4:	2300      	movne	r3, #0
 80083a6:	b2db      	uxtb	r3, r3
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	f001 80a6 	beq.w	80094fa <cppLoop+0x1b62>
			led.LR(-1, 1);
 80083ae:	2201      	movs	r2, #1
 80083b0:	f04f 31ff 	mov.w	r1, #4294967295
 80083b4:	4872      	ldr	r0, [pc, #456]	; (8008580 <cppLoop+0xbe8>)
 80083b6:	f7f9 fff9 	bl	80023ac <_ZN3LED2LREaa>
			HAL_Delay(300);
 80083ba:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80083be:	f001 f9db 	bl	8009778 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL1.TXT", 1, &adj_velocity, OVER_WRITE);
 80083c2:	2300      	movs	r3, #0
 80083c4:	9300      	str	r3, [sp, #0]
 80083c6:	4b70      	ldr	r3, [pc, #448]	; (8008588 <cppLoop+0xbf0>)
 80083c8:	2201      	movs	r2, #1
 80083ca:	4972      	ldr	r1, [pc, #456]	; (8008594 <cppLoop+0xbfc>)
 80083cc:	4872      	ldr	r0, [pc, #456]	; (8008598 <cppLoop+0xc00>)
 80083ce:	f7f9 fa55 	bl	800187c <sd_write_array_float>
			line_trace.setTargetVelocity(adj_velocity);
 80083d2:	4b6d      	ldr	r3, [pc, #436]	; (8008588 <cppLoop+0xbf0>)
 80083d4:	edd3 7a00 	vldr	s15, [r3]
 80083d8:	eeb0 0a67 	vmov.f32	s0, s15
 80083dc:	486f      	ldr	r0, [pc, #444]	; (800859c <cppLoop+0xc04>)
 80083de:	f7fb fc32 	bl	8003c46 <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(-1, 0);
 80083e2:	2200      	movs	r2, #0
 80083e4:	f04f 31ff 	mov.w	r1, #4294967295
 80083e8:	4865      	ldr	r0, [pc, #404]	; (8008580 <cppLoop+0xbe8>)
 80083ea:	f7f9 ffdf 	bl	80023ac <_ZN3LED2LREaa>
		break;
 80083ee:	f001 b884 	b.w	80094fa <cppLoop+0x1b62>

	case 3:
		led.fullColor('Y');
 80083f2:	2159      	movs	r1, #89	; 0x59
 80083f4:	4862      	ldr	r0, [pc, #392]	; (8008580 <cppLoop+0xbe8>)
 80083f6:	f7f9 ff1d 	bl	8002234 <_ZN3LED9fullColorEc>

		lcd_clear();
 80083fa:	f7f8 fe51 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80083fe:	2100      	movs	r1, #0
 8008400:	2000      	movs	r0, #0
 8008402:	f7f8 fe5d 	bl	80010c0 <lcd_locate>
		lcd_printf("2:   %3.1f", adj_max_velocity);
 8008406:	4b66      	ldr	r3, [pc, #408]	; (80085a0 <cppLoop+0xc08>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	4618      	mov	r0, r3
 800840c:	f7f8 f8b4 	bl	8000578 <__aeabi_f2d>
 8008410:	4603      	mov	r3, r0
 8008412:	460c      	mov	r4, r1
 8008414:	461a      	mov	r2, r3
 8008416:	4623      	mov	r3, r4
 8008418:	4862      	ldr	r0, [pc, #392]	; (80085a4 <cppLoop+0xc0c>)
 800841a:	f7f8 fe7b 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800841e:	2101      	movs	r1, #1
 8008420:	2000      	movs	r0, #0
 8008422:	f7f8 fe4d 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_min_velocity);
 8008426:	4b60      	ldr	r3, [pc, #384]	; (80085a8 <cppLoop+0xc10>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	4618      	mov	r0, r3
 800842c:	f7f8 f8a4 	bl	8000578 <__aeabi_f2d>
 8008430:	4603      	mov	r3, r0
 8008432:	460c      	mov	r4, r1
 8008434:	461a      	mov	r2, r3
 8008436:	4623      	mov	r3, r4
 8008438:	485c      	ldr	r0, [pc, #368]	; (80085ac <cppLoop+0xc14>)
 800843a:	f7f8 fe6b 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800843e:	4854      	ldr	r0, [pc, #336]	; (8008590 <cppLoop+0xbf8>)
 8008440:	f7f9 fe94 	bl	800216c <_ZN8JoyStick8getValueEv>
 8008444:	4603      	mov	r3, r0
 8008446:	2b02      	cmp	r3, #2
 8008448:	bf0c      	ite	eq
 800844a:	2301      	moveq	r3, #1
 800844c:	2300      	movne	r3, #0
 800844e:	b2db      	uxtb	r3, r3
 8008450:	2b00      	cmp	r3, #0
 8008452:	f001 8054 	beq.w	80094fe <cppLoop+0x1b66>
			HAL_Delay(500);
 8008456:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800845a:	f001 f98d 	bl	8009778 <HAL_Delay>

			led.LR(1, -1);
 800845e:	f04f 32ff 	mov.w	r2, #4294967295
 8008462:	2101      	movs	r1, #1
 8008464:	4846      	ldr	r0, [pc, #280]	; (8008580 <cppLoop+0xbe8>)
 8008466:	f7f9 ffa1 	bl	80023ac <_ZN3LED2LREaa>
			line_trace.setMode(SECOND_RUNNING);
 800846a:	2101      	movs	r1, #1
 800846c:	484b      	ldr	r0, [pc, #300]	; (800859c <cppLoop+0xc04>)
 800846e:	f7fb fe2f 	bl	80040d0 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity);
 8008472:	4b4d      	ldr	r3, [pc, #308]	; (80085a8 <cppLoop+0xc10>)
 8008474:	edd3 7a00 	vldr	s15, [r3]
 8008478:	eeb0 0a67 	vmov.f32	s0, s15
 800847c:	4847      	ldr	r0, [pc, #284]	; (800859c <cppLoop+0xc04>)
 800847e:	f7fb fbe2 	bl	8003c46 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity);
 8008482:	4b47      	ldr	r3, [pc, #284]	; (80085a0 <cppLoop+0xc08>)
 8008484:	edd3 7a00 	vldr	s15, [r3]
 8008488:	eeb0 0a67 	vmov.f32	s0, s15
 800848c:	4843      	ldr	r0, [pc, #268]	; (800859c <cppLoop+0xc04>)
 800848e:	f7fb fbea 	bl	8003c66 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 8008492:	4b45      	ldr	r3, [pc, #276]	; (80085a8 <cppLoop+0xc10>)
 8008494:	edd3 7a00 	vldr	s15, [r3]
 8008498:	eeb0 0a67 	vmov.f32	s0, s15
 800849c:	483f      	ldr	r0, [pc, #252]	; (800859c <cppLoop+0xc04>)
 800849e:	f7fb fc02 	bl	8003ca6 <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabele();
 80084a2:	483e      	ldr	r0, [pc, #248]	; (800859c <cppLoop+0xc04>)
 80084a4:	f7fb ff3c 	bl	8004320 <_ZN9LineTrace20createVelocityTabeleEv>

			line_trace.running();
 80084a8:	483c      	ldr	r0, [pc, #240]	; (800859c <cppLoop+0xc04>)
 80084aa:	f7fb fe4f 	bl	800414c <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 80084ae:	f04f 32ff 	mov.w	r2, #4294967295
 80084b2:	2100      	movs	r1, #0
 80084b4:	4832      	ldr	r0, [pc, #200]	; (8008580 <cppLoop+0xbe8>)
 80084b6:	f7f9 ff79 	bl	80023ac <_ZN3LED2LREaa>
		}

		break;
 80084ba:	f001 b820 	b.w	80094fe <cppLoop+0x1b66>

	case 4:
		led.fullColor('G');
 80084be:	2147      	movs	r1, #71	; 0x47
 80084c0:	482f      	ldr	r0, [pc, #188]	; (8008580 <cppLoop+0xbe8>)
 80084c2:	f7f9 feb7 	bl	8002234 <_ZN3LED9fullColorEc>

		lcd_clear();
 80084c6:	f7f8 fdeb 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80084ca:	2100      	movs	r1, #0
 80084cc:	2000      	movs	r0, #0
 80084ce:	f7f8 fdf7 	bl	80010c0 <lcd_locate>
		lcd_printf("2:   %3.1f", line_trace.getMaxVelocity());
 80084d2:	4832      	ldr	r0, [pc, #200]	; (800859c <cppLoop+0xc04>)
 80084d4:	f7fb fc17 	bl	8003d06 <_ZN9LineTrace14getMaxVelocityEv>
 80084d8:	ee10 3a10 	vmov	r3, s0
 80084dc:	4618      	mov	r0, r3
 80084de:	f7f8 f84b 	bl	8000578 <__aeabi_f2d>
 80084e2:	4603      	mov	r3, r0
 80084e4:	460c      	mov	r4, r1
 80084e6:	461a      	mov	r2, r3
 80084e8:	4623      	mov	r3, r4
 80084ea:	482e      	ldr	r0, [pc, #184]	; (80085a4 <cppLoop+0xc0c>)
 80084ec:	f7f8 fe12 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80084f0:	2101      	movs	r1, #1
 80084f2:	2000      	movs	r0, #0
 80084f4:	f7f8 fde4 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", line_trace.getMinVelocity());
 80084f8:	4828      	ldr	r0, [pc, #160]	; (800859c <cppLoop+0xc04>)
 80084fa:	f7fb fc24 	bl	8003d46 <_ZN9LineTrace14getMinVelocityEv>
 80084fe:	ee10 3a10 	vmov	r3, s0
 8008502:	4618      	mov	r0, r3
 8008504:	f7f8 f838 	bl	8000578 <__aeabi_f2d>
 8008508:	4603      	mov	r3, r0
 800850a:	460c      	mov	r4, r1
 800850c:	461a      	mov	r2, r3
 800850e:	4623      	mov	r3, r4
 8008510:	481e      	ldr	r0, [pc, #120]	; (800858c <cppLoop+0xbf4>)
 8008512:	f7f8 fdff 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8008516:	481e      	ldr	r0, [pc, #120]	; (8008590 <cppLoop+0xbf8>)
 8008518:	f7f9 fe28 	bl	800216c <_ZN8JoyStick8getValueEv>
 800851c:	4603      	mov	r3, r0
 800851e:	2b08      	cmp	r3, #8
 8008520:	bf0c      	ite	eq
 8008522:	2301      	moveq	r3, #1
 8008524:	2300      	movne	r3, #0
 8008526:	b2db      	uxtb	r3, r3
 8008528:	2b00      	cmp	r3, #0
 800852a:	d043      	beq.n	80085b4 <cppLoop+0xc1c>
			led.LR(-1, 1);
 800852c:	2201      	movs	r2, #1
 800852e:	f04f 31ff 	mov.w	r1, #4294967295
 8008532:	4813      	ldr	r0, [pc, #76]	; (8008580 <cppLoop+0xbe8>)
 8008534:	f7f9 ff3a 	bl	80023ac <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008538:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800853c:	f001 f91c 	bl	8009778 <HAL_Delay>

			selector_vel++;
 8008540:	4b1b      	ldr	r3, [pc, #108]	; (80085b0 <cppLoop+0xc18>)
 8008542:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008546:	b29b      	uxth	r3, r3
 8008548:	3301      	adds	r3, #1
 800854a:	b29b      	uxth	r3, r3
 800854c:	b21a      	sxth	r2, r3
 800854e:	4b18      	ldr	r3, [pc, #96]	; (80085b0 <cppLoop+0xc18>)
 8008550:	801a      	strh	r2, [r3, #0]
			if(selector_vel >= 2) selector_vel = 0;
 8008552:	4b17      	ldr	r3, [pc, #92]	; (80085b0 <cppLoop+0xc18>)
 8008554:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008558:	2b01      	cmp	r3, #1
 800855a:	dd02      	ble.n	8008562 <cppLoop+0xbca>
 800855c:	4b14      	ldr	r3, [pc, #80]	; (80085b0 <cppLoop+0xc18>)
 800855e:	2200      	movs	r2, #0
 8008560:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008562:	2200      	movs	r2, #0
 8008564:	f04f 31ff 	mov.w	r1, #4294967295
 8008568:	4805      	ldr	r0, [pc, #20]	; (8008580 <cppLoop+0xbe8>)
 800856a:	f7f9 ff1f 	bl	80023ac <_ZN3LED2LREaa>
			line_trace.setMaxVelocity(adj_max_velocity);
			line_trace.setMinVelocity(adj_min_velocity);

			led.LR(-1, 0);
		}
		break;
 800856e:	f000 bfc8 	b.w	8009502 <cppLoop+0x1b6a>
 8008572:	bf00      	nop
 8008574:	f3af 8000 	nop.w
 8008578:	9999999a 	.word	0x9999999a
 800857c:	3fb99999 	.word	0x3fb99999
 8008580:	20000604 	.word	0x20000604
 8008584:	08019a80 	.word	0x08019a80
 8008588:	20042290 	.word	0x20042290
 800858c:	08019abc 	.word	0x08019abc
 8008590:	200005f8 	.word	0x200005f8
 8008594:	08019ac8 	.word	0x08019ac8
 8008598:	08019a68 	.word	0x08019a68
 800859c:	2001db94 	.word	0x2001db94
 80085a0:	20042298 	.word	0x20042298
 80085a4:	08019ad4 	.word	0x08019ad4
 80085a8:	200422a8 	.word	0x200422a8
 80085ac:	08019a8c 	.word	0x08019a8c
 80085b0:	20042272 	.word	0x20042272
		else if(joy_stick.getValue() == JOY_R){
 80085b4:	489c      	ldr	r0, [pc, #624]	; (8008828 <cppLoop+0xe90>)
 80085b6:	f7f9 fdd9 	bl	800216c <_ZN8JoyStick8getValueEv>
 80085ba:	4603      	mov	r3, r0
 80085bc:	2b10      	cmp	r3, #16
 80085be:	bf0c      	ite	eq
 80085c0:	2301      	moveq	r3, #1
 80085c2:	2300      	movne	r3, #0
 80085c4:	b2db      	uxtb	r3, r3
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d03c      	beq.n	8008644 <cppLoop+0xcac>
			led.LR(-1, 1);
 80085ca:	2201      	movs	r2, #1
 80085cc:	f04f 31ff 	mov.w	r1, #4294967295
 80085d0:	4896      	ldr	r0, [pc, #600]	; (800882c <cppLoop+0xe94>)
 80085d2:	f7f9 feeb 	bl	80023ac <_ZN3LED2LREaa>
			HAL_Delay(100);
 80085d6:	2064      	movs	r0, #100	; 0x64
 80085d8:	f001 f8ce 	bl	8009778 <HAL_Delay>
			if(selector_vel == 0)
 80085dc:	4b94      	ldr	r3, [pc, #592]	; (8008830 <cppLoop+0xe98>)
 80085de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d113      	bne.n	800860e <cppLoop+0xc76>
				adj_max_velocity = adj_max_velocity + 0.1;
 80085e6:	4b93      	ldr	r3, [pc, #588]	; (8008834 <cppLoop+0xe9c>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	4618      	mov	r0, r3
 80085ec:	f7f7 ffc4 	bl	8000578 <__aeabi_f2d>
 80085f0:	a38b      	add	r3, pc, #556	; (adr r3, 8008820 <cppLoop+0xe88>)
 80085f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085f6:	f7f7 fe61 	bl	80002bc <__adddf3>
 80085fa:	4603      	mov	r3, r0
 80085fc:	460c      	mov	r4, r1
 80085fe:	4618      	mov	r0, r3
 8008600:	4621      	mov	r1, r4
 8008602:	f7f8 fb09 	bl	8000c18 <__aeabi_d2f>
 8008606:	4602      	mov	r2, r0
 8008608:	4b8a      	ldr	r3, [pc, #552]	; (8008834 <cppLoop+0xe9c>)
 800860a:	601a      	str	r2, [r3, #0]
 800860c:	e012      	b.n	8008634 <cppLoop+0xc9c>
				adj_min_velocity = adj_min_velocity + 0.1;
 800860e:	4b8a      	ldr	r3, [pc, #552]	; (8008838 <cppLoop+0xea0>)
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	4618      	mov	r0, r3
 8008614:	f7f7 ffb0 	bl	8000578 <__aeabi_f2d>
 8008618:	a381      	add	r3, pc, #516	; (adr r3, 8008820 <cppLoop+0xe88>)
 800861a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800861e:	f7f7 fe4d 	bl	80002bc <__adddf3>
 8008622:	4603      	mov	r3, r0
 8008624:	460c      	mov	r4, r1
 8008626:	4618      	mov	r0, r3
 8008628:	4621      	mov	r1, r4
 800862a:	f7f8 faf5 	bl	8000c18 <__aeabi_d2f>
 800862e:	4602      	mov	r2, r0
 8008630:	4b81      	ldr	r3, [pc, #516]	; (8008838 <cppLoop+0xea0>)
 8008632:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008634:	2200      	movs	r2, #0
 8008636:	f04f 31ff 	mov.w	r1, #4294967295
 800863a:	487c      	ldr	r0, [pc, #496]	; (800882c <cppLoop+0xe94>)
 800863c:	f7f9 feb6 	bl	80023ac <_ZN3LED2LREaa>
		break;
 8008640:	f000 bf5f 	b.w	8009502 <cppLoop+0x1b6a>
		else if(joy_stick.getValue() == JOY_L){
 8008644:	4878      	ldr	r0, [pc, #480]	; (8008828 <cppLoop+0xe90>)
 8008646:	f7f9 fd91 	bl	800216c <_ZN8JoyStick8getValueEv>
 800864a:	4603      	mov	r3, r0
 800864c:	2b01      	cmp	r3, #1
 800864e:	bf0c      	ite	eq
 8008650:	2301      	moveq	r3, #1
 8008652:	2300      	movne	r3, #0
 8008654:	b2db      	uxtb	r3, r3
 8008656:	2b00      	cmp	r3, #0
 8008658:	d03c      	beq.n	80086d4 <cppLoop+0xd3c>
			led.LR(-1, 1);
 800865a:	2201      	movs	r2, #1
 800865c:	f04f 31ff 	mov.w	r1, #4294967295
 8008660:	4872      	ldr	r0, [pc, #456]	; (800882c <cppLoop+0xe94>)
 8008662:	f7f9 fea3 	bl	80023ac <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008666:	2064      	movs	r0, #100	; 0x64
 8008668:	f001 f886 	bl	8009778 <HAL_Delay>
			if(selector_vel == 0)
 800866c:	4b70      	ldr	r3, [pc, #448]	; (8008830 <cppLoop+0xe98>)
 800866e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d113      	bne.n	800869e <cppLoop+0xd06>
				adj_max_velocity = adj_max_velocity - 0.1;
 8008676:	4b6f      	ldr	r3, [pc, #444]	; (8008834 <cppLoop+0xe9c>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	4618      	mov	r0, r3
 800867c:	f7f7 ff7c 	bl	8000578 <__aeabi_f2d>
 8008680:	a367      	add	r3, pc, #412	; (adr r3, 8008820 <cppLoop+0xe88>)
 8008682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008686:	f7f7 fe17 	bl	80002b8 <__aeabi_dsub>
 800868a:	4603      	mov	r3, r0
 800868c:	460c      	mov	r4, r1
 800868e:	4618      	mov	r0, r3
 8008690:	4621      	mov	r1, r4
 8008692:	f7f8 fac1 	bl	8000c18 <__aeabi_d2f>
 8008696:	4602      	mov	r2, r0
 8008698:	4b66      	ldr	r3, [pc, #408]	; (8008834 <cppLoop+0xe9c>)
 800869a:	601a      	str	r2, [r3, #0]
 800869c:	e012      	b.n	80086c4 <cppLoop+0xd2c>
				adj_min_velocity = adj_min_velocity - 0.1;
 800869e:	4b66      	ldr	r3, [pc, #408]	; (8008838 <cppLoop+0xea0>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	4618      	mov	r0, r3
 80086a4:	f7f7 ff68 	bl	8000578 <__aeabi_f2d>
 80086a8:	a35d      	add	r3, pc, #372	; (adr r3, 8008820 <cppLoop+0xe88>)
 80086aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ae:	f7f7 fe03 	bl	80002b8 <__aeabi_dsub>
 80086b2:	4603      	mov	r3, r0
 80086b4:	460c      	mov	r4, r1
 80086b6:	4618      	mov	r0, r3
 80086b8:	4621      	mov	r1, r4
 80086ba:	f7f8 faad 	bl	8000c18 <__aeabi_d2f>
 80086be:	4602      	mov	r2, r0
 80086c0:	4b5d      	ldr	r3, [pc, #372]	; (8008838 <cppLoop+0xea0>)
 80086c2:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 80086c4:	2200      	movs	r2, #0
 80086c6:	f04f 31ff 	mov.w	r1, #4294967295
 80086ca:	4858      	ldr	r0, [pc, #352]	; (800882c <cppLoop+0xe94>)
 80086cc:	f7f9 fe6e 	bl	80023ac <_ZN3LED2LREaa>
		break;
 80086d0:	f000 bf17 	b.w	8009502 <cppLoop+0x1b6a>
		else if(joy_stick.getValue() == JOY_C){
 80086d4:	4854      	ldr	r0, [pc, #336]	; (8008828 <cppLoop+0xe90>)
 80086d6:	f7f9 fd49 	bl	800216c <_ZN8JoyStick8getValueEv>
 80086da:	4603      	mov	r3, r0
 80086dc:	2b02      	cmp	r3, #2
 80086de:	bf0c      	ite	eq
 80086e0:	2301      	moveq	r3, #1
 80086e2:	2300      	movne	r3, #0
 80086e4:	b2db      	uxtb	r3, r3
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	f000 870b 	beq.w	8009502 <cppLoop+0x1b6a>
			led.LR(-1, 1);
 80086ec:	2201      	movs	r2, #1
 80086ee:	f04f 31ff 	mov.w	r1, #4294967295
 80086f2:	484e      	ldr	r0, [pc, #312]	; (800882c <cppLoop+0xe94>)
 80086f4:	f7f9 fe5a 	bl	80023ac <_ZN3LED2LREaa>
			HAL_Delay(300);
 80086f8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80086fc:	f001 f83c 	bl	8009778 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL2.TXT", 1, &adj_max_velocity, OVER_WRITE);
 8008700:	2300      	movs	r3, #0
 8008702:	9300      	str	r3, [sp, #0]
 8008704:	4b4b      	ldr	r3, [pc, #300]	; (8008834 <cppLoop+0xe9c>)
 8008706:	2201      	movs	r2, #1
 8008708:	494c      	ldr	r1, [pc, #304]	; (800883c <cppLoop+0xea4>)
 800870a:	484d      	ldr	r0, [pc, #308]	; (8008840 <cppLoop+0xea8>)
 800870c:	f7f9 f8b6 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "MINVEL.TXT", 1, &adj_min_velocity, OVER_WRITE);
 8008710:	2300      	movs	r3, #0
 8008712:	9300      	str	r3, [sp, #0]
 8008714:	4b48      	ldr	r3, [pc, #288]	; (8008838 <cppLoop+0xea0>)
 8008716:	2201      	movs	r2, #1
 8008718:	494a      	ldr	r1, [pc, #296]	; (8008844 <cppLoop+0xeac>)
 800871a:	4849      	ldr	r0, [pc, #292]	; (8008840 <cppLoop+0xea8>)
 800871c:	f7f9 f8ae 	bl	800187c <sd_write_array_float>
			line_trace.setMaxVelocity(adj_max_velocity);
 8008720:	4b44      	ldr	r3, [pc, #272]	; (8008834 <cppLoop+0xe9c>)
 8008722:	edd3 7a00 	vldr	s15, [r3]
 8008726:	eeb0 0a67 	vmov.f32	s0, s15
 800872a:	4847      	ldr	r0, [pc, #284]	; (8008848 <cppLoop+0xeb0>)
 800872c:	f7fb fa9b 	bl	8003c66 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 8008730:	4b41      	ldr	r3, [pc, #260]	; (8008838 <cppLoop+0xea0>)
 8008732:	edd3 7a00 	vldr	s15, [r3]
 8008736:	eeb0 0a67 	vmov.f32	s0, s15
 800873a:	4843      	ldr	r0, [pc, #268]	; (8008848 <cppLoop+0xeb0>)
 800873c:	f7fb fab3 	bl	8003ca6 <_ZN9LineTrace14setMinVelocityEf>
			led.LR(-1, 0);
 8008740:	2200      	movs	r2, #0
 8008742:	f04f 31ff 	mov.w	r1, #4294967295
 8008746:	4839      	ldr	r0, [pc, #228]	; (800882c <cppLoop+0xe94>)
 8008748:	f7f9 fe30 	bl	80023ac <_ZN3LED2LREaa>
		break;
 800874c:	f000 bed9 	b.w	8009502 <cppLoop+0x1b6a>

	case 5:
		led.fullColor('M');
 8008750:	214d      	movs	r1, #77	; 0x4d
 8008752:	4836      	ldr	r0, [pc, #216]	; (800882c <cppLoop+0xe94>)
 8008754:	f7f9 fd6e 	bl	8002234 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008758:	f7f8 fca2 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800875c:	2100      	movs	r1, #0
 800875e:	2000      	movs	r0, #0
 8008760:	f7f8 fcae 	bl	80010c0 <lcd_locate>
		lcd_printf("3:   %3.1f", adj_max_velocity2);
 8008764:	4b39      	ldr	r3, [pc, #228]	; (800884c <cppLoop+0xeb4>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	4618      	mov	r0, r3
 800876a:	f7f7 ff05 	bl	8000578 <__aeabi_f2d>
 800876e:	4603      	mov	r3, r0
 8008770:	460c      	mov	r4, r1
 8008772:	461a      	mov	r2, r3
 8008774:	4623      	mov	r3, r4
 8008776:	4836      	ldr	r0, [pc, #216]	; (8008850 <cppLoop+0xeb8>)
 8008778:	f7f8 fccc 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800877c:	2101      	movs	r1, #1
 800877e:	2000      	movs	r0, #0
 8008780:	f7f8 fc9e 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_min_velocity2);
 8008784:	4b33      	ldr	r3, [pc, #204]	; (8008854 <cppLoop+0xebc>)
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	4618      	mov	r0, r3
 800878a:	f7f7 fef5 	bl	8000578 <__aeabi_f2d>
 800878e:	4603      	mov	r3, r0
 8008790:	460c      	mov	r4, r1
 8008792:	461a      	mov	r2, r3
 8008794:	4623      	mov	r3, r4
 8008796:	4830      	ldr	r0, [pc, #192]	; (8008858 <cppLoop+0xec0>)
 8008798:	f7f8 fcbc 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800879c:	4822      	ldr	r0, [pc, #136]	; (8008828 <cppLoop+0xe90>)
 800879e:	f7f9 fce5 	bl	800216c <_ZN8JoyStick8getValueEv>
 80087a2:	4603      	mov	r3, r0
 80087a4:	2b02      	cmp	r3, #2
 80087a6:	bf0c      	ite	eq
 80087a8:	2301      	moveq	r3, #1
 80087aa:	2300      	movne	r3, #0
 80087ac:	b2db      	uxtb	r3, r3
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	f000 86a9 	beq.w	8009506 <cppLoop+0x1b6e>
			HAL_Delay(500);
 80087b4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80087b8:	f000 ffde 	bl	8009778 <HAL_Delay>

			led.LR(1, -1);
 80087bc:	f04f 32ff 	mov.w	r2, #4294967295
 80087c0:	2101      	movs	r1, #1
 80087c2:	481a      	ldr	r0, [pc, #104]	; (800882c <cppLoop+0xe94>)
 80087c4:	f7f9 fdf2 	bl	80023ac <_ZN3LED2LREaa>
			line_trace.setMode(THIRD_RUNNING);
 80087c8:	2102      	movs	r1, #2
 80087ca:	481f      	ldr	r0, [pc, #124]	; (8008848 <cppLoop+0xeb0>)
 80087cc:	f7fb fc80 	bl	80040d0 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity2);
 80087d0:	4b20      	ldr	r3, [pc, #128]	; (8008854 <cppLoop+0xebc>)
 80087d2:	edd3 7a00 	vldr	s15, [r3]
 80087d6:	eeb0 0a67 	vmov.f32	s0, s15
 80087da:	481b      	ldr	r0, [pc, #108]	; (8008848 <cppLoop+0xeb0>)
 80087dc:	f7fb fa33 	bl	8003c46 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity2(adj_max_velocity2);
 80087e0:	4b1a      	ldr	r3, [pc, #104]	; (800884c <cppLoop+0xeb4>)
 80087e2:	edd3 7a00 	vldr	s15, [r3]
 80087e6:	eeb0 0a67 	vmov.f32	s0, s15
 80087ea:	4817      	ldr	r0, [pc, #92]	; (8008848 <cppLoop+0xeb0>)
 80087ec:	f7fb fa4b 	bl	8003c86 <_ZN9LineTrace15setMaxVelocity2Ef>
			line_trace.setMinVelocity2(adj_min_velocity2);
 80087f0:	4b18      	ldr	r3, [pc, #96]	; (8008854 <cppLoop+0xebc>)
 80087f2:	edd3 7a00 	vldr	s15, [r3]
 80087f6:	eeb0 0a67 	vmov.f32	s0, s15
 80087fa:	4813      	ldr	r0, [pc, #76]	; (8008848 <cppLoop+0xeb0>)
 80087fc:	f7fb fa63 	bl	8003cc6 <_ZN9LineTrace15setMinVelocity2Ef>
			line_trace.createVelocityTabele();
 8008800:	4811      	ldr	r0, [pc, #68]	; (8008848 <cppLoop+0xeb0>)
 8008802:	f7fb fd8d 	bl	8004320 <_ZN9LineTrace20createVelocityTabeleEv>

			line_trace.running();
 8008806:	4810      	ldr	r0, [pc, #64]	; (8008848 <cppLoop+0xeb0>)
 8008808:	f7fb fca0 	bl	800414c <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 800880c:	f04f 32ff 	mov.w	r2, #4294967295
 8008810:	2100      	movs	r1, #0
 8008812:	4806      	ldr	r0, [pc, #24]	; (800882c <cppLoop+0xe94>)
 8008814:	f7f9 fdca 	bl	80023ac <_ZN3LED2LREaa>
		}

		break;
 8008818:	f000 be75 	b.w	8009506 <cppLoop+0x1b6e>
 800881c:	f3af 8000 	nop.w
 8008820:	9999999a 	.word	0x9999999a
 8008824:	3fb99999 	.word	0x3fb99999
 8008828:	200005f8 	.word	0x200005f8
 800882c:	20000604 	.word	0x20000604
 8008830:	20042272 	.word	0x20042272
 8008834:	20042298 	.word	0x20042298
 8008838:	200422a8 	.word	0x200422a8
 800883c:	08019ae0 	.word	0x08019ae0
 8008840:	08019a68 	.word	0x08019a68
 8008844:	08019aec 	.word	0x08019aec
 8008848:	2001db94 	.word	0x2001db94
 800884c:	200422a0 	.word	0x200422a0
 8008850:	08019af8 	.word	0x08019af8
 8008854:	200422b0 	.word	0x200422b0
 8008858:	08019a8c 	.word	0x08019a8c

	case 6:
		led.fullColor('R');
 800885c:	2152      	movs	r1, #82	; 0x52
 800885e:	4896      	ldr	r0, [pc, #600]	; (8008ab8 <cppLoop+0x1120>)
 8008860:	f7f9 fce8 	bl	8002234 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008864:	f7f8 fc1c 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008868:	2100      	movs	r1, #0
 800886a:	2000      	movs	r0, #0
 800886c:	f7f8 fc28 	bl	80010c0 <lcd_locate>
		lcd_printf("3:   %3.1f", line_trace.getMaxVelocity2());
 8008870:	4892      	ldr	r0, [pc, #584]	; (8008abc <cppLoop+0x1124>)
 8008872:	f7fb fa58 	bl	8003d26 <_ZN9LineTrace15getMaxVelocity2Ev>
 8008876:	ee10 3a10 	vmov	r3, s0
 800887a:	4618      	mov	r0, r3
 800887c:	f7f7 fe7c 	bl	8000578 <__aeabi_f2d>
 8008880:	4603      	mov	r3, r0
 8008882:	460c      	mov	r4, r1
 8008884:	461a      	mov	r2, r3
 8008886:	4623      	mov	r3, r4
 8008888:	488d      	ldr	r0, [pc, #564]	; (8008ac0 <cppLoop+0x1128>)
 800888a:	f7f8 fc43 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800888e:	2101      	movs	r1, #1
 8008890:	2000      	movs	r0, #0
 8008892:	f7f8 fc15 	bl	80010c0 <lcd_locate>
		lcd_printf("%Vel: %3.1f", line_trace.getMinVelocity2());
 8008896:	4889      	ldr	r0, [pc, #548]	; (8008abc <cppLoop+0x1124>)
 8008898:	f7fb fa65 	bl	8003d66 <_ZN9LineTrace15getMinVelocity2Ev>
 800889c:	ee10 3a10 	vmov	r3, s0
 80088a0:	4618      	mov	r0, r3
 80088a2:	f7f7 fe69 	bl	8000578 <__aeabi_f2d>
 80088a6:	4603      	mov	r3, r0
 80088a8:	460c      	mov	r4, r1
 80088aa:	461a      	mov	r2, r3
 80088ac:	4623      	mov	r3, r4
 80088ae:	4885      	ldr	r0, [pc, #532]	; (8008ac4 <cppLoop+0x112c>)
 80088b0:	f7f8 fc30 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 80088b4:	4884      	ldr	r0, [pc, #528]	; (8008ac8 <cppLoop+0x1130>)
 80088b6:	f7f9 fc59 	bl	800216c <_ZN8JoyStick8getValueEv>
 80088ba:	4603      	mov	r3, r0
 80088bc:	2b08      	cmp	r3, #8
 80088be:	bf0c      	ite	eq
 80088c0:	2301      	moveq	r3, #1
 80088c2:	2300      	movne	r3, #0
 80088c4:	b2db      	uxtb	r3, r3
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d022      	beq.n	8008910 <cppLoop+0xf78>
			led.LR(-1, 1);
 80088ca:	2201      	movs	r2, #1
 80088cc:	f04f 31ff 	mov.w	r1, #4294967295
 80088d0:	4879      	ldr	r0, [pc, #484]	; (8008ab8 <cppLoop+0x1120>)
 80088d2:	f7f9 fd6b 	bl	80023ac <_ZN3LED2LREaa>
			HAL_Delay(300);
 80088d6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80088da:	f000 ff4d 	bl	8009778 <HAL_Delay>

			selector_vel2++;
 80088de:	4b7b      	ldr	r3, [pc, #492]	; (8008acc <cppLoop+0x1134>)
 80088e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80088e4:	b29b      	uxth	r3, r3
 80088e6:	3301      	adds	r3, #1
 80088e8:	b29b      	uxth	r3, r3
 80088ea:	b21a      	sxth	r2, r3
 80088ec:	4b77      	ldr	r3, [pc, #476]	; (8008acc <cppLoop+0x1134>)
 80088ee:	801a      	strh	r2, [r3, #0]
			if(selector_vel2 >= 2) selector_vel2 = 0;
 80088f0:	4b76      	ldr	r3, [pc, #472]	; (8008acc <cppLoop+0x1134>)
 80088f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80088f6:	2b01      	cmp	r3, #1
 80088f8:	dd02      	ble.n	8008900 <cppLoop+0xf68>
 80088fa:	4b74      	ldr	r3, [pc, #464]	; (8008acc <cppLoop+0x1134>)
 80088fc:	2200      	movs	r2, #0
 80088fe:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008900:	2200      	movs	r2, #0
 8008902:	f04f 31ff 	mov.w	r1, #4294967295
 8008906:	486c      	ldr	r0, [pc, #432]	; (8008ab8 <cppLoop+0x1120>)
 8008908:	f7f9 fd50 	bl	80023ac <_ZN3LED2LREaa>
			line_trace.setMinVelocity2(adj_min_velocity2);

			led.LR(-1, 0);
		}

		break;
 800890c:	f000 bdfd 	b.w	800950a <cppLoop+0x1b72>
		else if(joy_stick.getValue() == JOY_R){
 8008910:	486d      	ldr	r0, [pc, #436]	; (8008ac8 <cppLoop+0x1130>)
 8008912:	f7f9 fc2b 	bl	800216c <_ZN8JoyStick8getValueEv>
 8008916:	4603      	mov	r3, r0
 8008918:	2b10      	cmp	r3, #16
 800891a:	bf0c      	ite	eq
 800891c:	2301      	moveq	r3, #1
 800891e:	2300      	movne	r3, #0
 8008920:	b2db      	uxtb	r3, r3
 8008922:	2b00      	cmp	r3, #0
 8008924:	d03c      	beq.n	80089a0 <cppLoop+0x1008>
			led.LR(-1, 1);
 8008926:	2201      	movs	r2, #1
 8008928:	f04f 31ff 	mov.w	r1, #4294967295
 800892c:	4862      	ldr	r0, [pc, #392]	; (8008ab8 <cppLoop+0x1120>)
 800892e:	f7f9 fd3d 	bl	80023ac <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008932:	2064      	movs	r0, #100	; 0x64
 8008934:	f000 ff20 	bl	8009778 <HAL_Delay>
			if(selector_vel2 == 0)
 8008938:	4b64      	ldr	r3, [pc, #400]	; (8008acc <cppLoop+0x1134>)
 800893a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d113      	bne.n	800896a <cppLoop+0xfd2>
				adj_max_velocity2 = adj_max_velocity2 + 0.1;
 8008942:	4b63      	ldr	r3, [pc, #396]	; (8008ad0 <cppLoop+0x1138>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	4618      	mov	r0, r3
 8008948:	f7f7 fe16 	bl	8000578 <__aeabi_f2d>
 800894c:	a358      	add	r3, pc, #352	; (adr r3, 8008ab0 <cppLoop+0x1118>)
 800894e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008952:	f7f7 fcb3 	bl	80002bc <__adddf3>
 8008956:	4603      	mov	r3, r0
 8008958:	460c      	mov	r4, r1
 800895a:	4618      	mov	r0, r3
 800895c:	4621      	mov	r1, r4
 800895e:	f7f8 f95b 	bl	8000c18 <__aeabi_d2f>
 8008962:	4602      	mov	r2, r0
 8008964:	4b5a      	ldr	r3, [pc, #360]	; (8008ad0 <cppLoop+0x1138>)
 8008966:	601a      	str	r2, [r3, #0]
 8008968:	e012      	b.n	8008990 <cppLoop+0xff8>
				adj_min_velocity2 = adj_min_velocity2 + 0.1;
 800896a:	4b5a      	ldr	r3, [pc, #360]	; (8008ad4 <cppLoop+0x113c>)
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	4618      	mov	r0, r3
 8008970:	f7f7 fe02 	bl	8000578 <__aeabi_f2d>
 8008974:	a34e      	add	r3, pc, #312	; (adr r3, 8008ab0 <cppLoop+0x1118>)
 8008976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800897a:	f7f7 fc9f 	bl	80002bc <__adddf3>
 800897e:	4603      	mov	r3, r0
 8008980:	460c      	mov	r4, r1
 8008982:	4618      	mov	r0, r3
 8008984:	4621      	mov	r1, r4
 8008986:	f7f8 f947 	bl	8000c18 <__aeabi_d2f>
 800898a:	4602      	mov	r2, r0
 800898c:	4b51      	ldr	r3, [pc, #324]	; (8008ad4 <cppLoop+0x113c>)
 800898e:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008990:	2200      	movs	r2, #0
 8008992:	f04f 31ff 	mov.w	r1, #4294967295
 8008996:	4848      	ldr	r0, [pc, #288]	; (8008ab8 <cppLoop+0x1120>)
 8008998:	f7f9 fd08 	bl	80023ac <_ZN3LED2LREaa>
		break;
 800899c:	f000 bdb5 	b.w	800950a <cppLoop+0x1b72>
		else if(joy_stick.getValue() == JOY_L){
 80089a0:	4849      	ldr	r0, [pc, #292]	; (8008ac8 <cppLoop+0x1130>)
 80089a2:	f7f9 fbe3 	bl	800216c <_ZN8JoyStick8getValueEv>
 80089a6:	4603      	mov	r3, r0
 80089a8:	2b01      	cmp	r3, #1
 80089aa:	bf0c      	ite	eq
 80089ac:	2301      	moveq	r3, #1
 80089ae:	2300      	movne	r3, #0
 80089b0:	b2db      	uxtb	r3, r3
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d03c      	beq.n	8008a30 <cppLoop+0x1098>
			led.LR(-1, 1);
 80089b6:	2201      	movs	r2, #1
 80089b8:	f04f 31ff 	mov.w	r1, #4294967295
 80089bc:	483e      	ldr	r0, [pc, #248]	; (8008ab8 <cppLoop+0x1120>)
 80089be:	f7f9 fcf5 	bl	80023ac <_ZN3LED2LREaa>
			HAL_Delay(100);
 80089c2:	2064      	movs	r0, #100	; 0x64
 80089c4:	f000 fed8 	bl	8009778 <HAL_Delay>
			if(selector_vel2 == 0)
 80089c8:	4b40      	ldr	r3, [pc, #256]	; (8008acc <cppLoop+0x1134>)
 80089ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d113      	bne.n	80089fa <cppLoop+0x1062>
				adj_max_velocity2 = adj_max_velocity2 - 0.1;
 80089d2:	4b3f      	ldr	r3, [pc, #252]	; (8008ad0 <cppLoop+0x1138>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	4618      	mov	r0, r3
 80089d8:	f7f7 fdce 	bl	8000578 <__aeabi_f2d>
 80089dc:	a334      	add	r3, pc, #208	; (adr r3, 8008ab0 <cppLoop+0x1118>)
 80089de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089e2:	f7f7 fc69 	bl	80002b8 <__aeabi_dsub>
 80089e6:	4603      	mov	r3, r0
 80089e8:	460c      	mov	r4, r1
 80089ea:	4618      	mov	r0, r3
 80089ec:	4621      	mov	r1, r4
 80089ee:	f7f8 f913 	bl	8000c18 <__aeabi_d2f>
 80089f2:	4602      	mov	r2, r0
 80089f4:	4b36      	ldr	r3, [pc, #216]	; (8008ad0 <cppLoop+0x1138>)
 80089f6:	601a      	str	r2, [r3, #0]
 80089f8:	e012      	b.n	8008a20 <cppLoop+0x1088>
				adj_min_velocity2 = adj_min_velocity2 - 0.1;
 80089fa:	4b36      	ldr	r3, [pc, #216]	; (8008ad4 <cppLoop+0x113c>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	4618      	mov	r0, r3
 8008a00:	f7f7 fdba 	bl	8000578 <__aeabi_f2d>
 8008a04:	a32a      	add	r3, pc, #168	; (adr r3, 8008ab0 <cppLoop+0x1118>)
 8008a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a0a:	f7f7 fc55 	bl	80002b8 <__aeabi_dsub>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	460c      	mov	r4, r1
 8008a12:	4618      	mov	r0, r3
 8008a14:	4621      	mov	r1, r4
 8008a16:	f7f8 f8ff 	bl	8000c18 <__aeabi_d2f>
 8008a1a:	4602      	mov	r2, r0
 8008a1c:	4b2d      	ldr	r3, [pc, #180]	; (8008ad4 <cppLoop+0x113c>)
 8008a1e:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008a20:	2200      	movs	r2, #0
 8008a22:	f04f 31ff 	mov.w	r1, #4294967295
 8008a26:	4824      	ldr	r0, [pc, #144]	; (8008ab8 <cppLoop+0x1120>)
 8008a28:	f7f9 fcc0 	bl	80023ac <_ZN3LED2LREaa>
		break;
 8008a2c:	f000 bd6d 	b.w	800950a <cppLoop+0x1b72>
		else if(joy_stick.getValue() == JOY_C){
 8008a30:	4825      	ldr	r0, [pc, #148]	; (8008ac8 <cppLoop+0x1130>)
 8008a32:	f7f9 fb9b 	bl	800216c <_ZN8JoyStick8getValueEv>
 8008a36:	4603      	mov	r3, r0
 8008a38:	2b02      	cmp	r3, #2
 8008a3a:	bf0c      	ite	eq
 8008a3c:	2301      	moveq	r3, #1
 8008a3e:	2300      	movne	r3, #0
 8008a40:	b2db      	uxtb	r3, r3
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	f000 8561 	beq.w	800950a <cppLoop+0x1b72>
			led.LR(-1, 1);
 8008a48:	2201      	movs	r2, #1
 8008a4a:	f04f 31ff 	mov.w	r1, #4294967295
 8008a4e:	481a      	ldr	r0, [pc, #104]	; (8008ab8 <cppLoop+0x1120>)
 8008a50:	f7f9 fcac 	bl	80023ac <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008a54:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008a58:	f000 fe8e 	bl	8009778 <HAL_Delay>
			sd_write_array_float("PARAMS", "TARVEL3.TXT", 1, &adj_max_velocity2, OVER_WRITE);
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	9300      	str	r3, [sp, #0]
 8008a60:	4b1b      	ldr	r3, [pc, #108]	; (8008ad0 <cppLoop+0x1138>)
 8008a62:	2201      	movs	r2, #1
 8008a64:	491c      	ldr	r1, [pc, #112]	; (8008ad8 <cppLoop+0x1140>)
 8008a66:	481d      	ldr	r0, [pc, #116]	; (8008adc <cppLoop+0x1144>)
 8008a68:	f7f8 ff08 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "MINVEL2.TXT", 1, &adj_min_velocity2, OVER_WRITE);
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	9300      	str	r3, [sp, #0]
 8008a70:	4b18      	ldr	r3, [pc, #96]	; (8008ad4 <cppLoop+0x113c>)
 8008a72:	2201      	movs	r2, #1
 8008a74:	491a      	ldr	r1, [pc, #104]	; (8008ae0 <cppLoop+0x1148>)
 8008a76:	4819      	ldr	r0, [pc, #100]	; (8008adc <cppLoop+0x1144>)
 8008a78:	f7f8 ff00 	bl	800187c <sd_write_array_float>
			line_trace.setMaxVelocity2(adj_max_velocity2);
 8008a7c:	4b14      	ldr	r3, [pc, #80]	; (8008ad0 <cppLoop+0x1138>)
 8008a7e:	edd3 7a00 	vldr	s15, [r3]
 8008a82:	eeb0 0a67 	vmov.f32	s0, s15
 8008a86:	480d      	ldr	r0, [pc, #52]	; (8008abc <cppLoop+0x1124>)
 8008a88:	f7fb f8fd 	bl	8003c86 <_ZN9LineTrace15setMaxVelocity2Ef>
			line_trace.setMinVelocity2(adj_min_velocity2);
 8008a8c:	4b11      	ldr	r3, [pc, #68]	; (8008ad4 <cppLoop+0x113c>)
 8008a8e:	edd3 7a00 	vldr	s15, [r3]
 8008a92:	eeb0 0a67 	vmov.f32	s0, s15
 8008a96:	4809      	ldr	r0, [pc, #36]	; (8008abc <cppLoop+0x1124>)
 8008a98:	f7fb f915 	bl	8003cc6 <_ZN9LineTrace15setMinVelocity2Ef>
			led.LR(-1, 0);
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	f04f 31ff 	mov.w	r1, #4294967295
 8008aa2:	4805      	ldr	r0, [pc, #20]	; (8008ab8 <cppLoop+0x1120>)
 8008aa4:	f7f9 fc82 	bl	80023ac <_ZN3LED2LREaa>
		break;
 8008aa8:	f000 bd2f 	b.w	800950a <cppLoop+0x1b72>
 8008aac:	f3af 8000 	nop.w
 8008ab0:	9999999a 	.word	0x9999999a
 8008ab4:	3fb99999 	.word	0x3fb99999
 8008ab8:	20000604 	.word	0x20000604
 8008abc:	2001db94 	.word	0x2001db94
 8008ac0:	08019af8 	.word	0x08019af8
 8008ac4:	08019abc 	.word	0x08019abc
 8008ac8:	200005f8 	.word	0x200005f8
 8008acc:	20042274 	.word	0x20042274
 8008ad0:	200422a0 	.word	0x200422a0
 8008ad4:	200422b0 	.word	0x200422b0
 8008ad8:	08019b04 	.word	0x08019b04
 8008adc:	08019a68 	.word	0x08019a68
 8008ae0:	08019b10 	.word	0x08019b10

	case 7:
		led.fullColor('W');
 8008ae4:	2157      	movs	r1, #87	; 0x57
 8008ae6:	48c0      	ldr	r0, [pc, #768]	; (8008de8 <cppLoop+0x1450>)
 8008ae8:	f7f9 fba4 	bl	8002234 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008aec:	f7f8 fad8 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008af0:	2100      	movs	r1, #0
 8008af2:	2000      	movs	r0, #0
 8008af4:	f7f8 fae4 	bl	80010c0 <lcd_locate>
		lcd_printf("ACC:%4.1f", line_trace.getMaxAcc());
 8008af8:	48bc      	ldr	r0, [pc, #752]	; (8008dec <cppLoop+0x1454>)
 8008afa:	f7fb f978 	bl	8003dee <_ZN9LineTrace9getMaxAccEv>
 8008afe:	ee10 3a10 	vmov	r3, s0
 8008b02:	4618      	mov	r0, r3
 8008b04:	f7f7 fd38 	bl	8000578 <__aeabi_f2d>
 8008b08:	4603      	mov	r3, r0
 8008b0a:	460c      	mov	r4, r1
 8008b0c:	461a      	mov	r2, r3
 8008b0e:	4623      	mov	r3, r4
 8008b10:	48b7      	ldr	r0, [pc, #732]	; (8008df0 <cppLoop+0x1458>)
 8008b12:	f7f8 faff 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008b16:	2101      	movs	r1, #1
 8008b18:	2000      	movs	r0, #0
 8008b1a:	f7f8 fad1 	bl	80010c0 <lcd_locate>
		lcd_printf("DEC:%4.1f", line_trace.getMaxDec());
 8008b1e:	48b3      	ldr	r0, [pc, #716]	; (8008dec <cppLoop+0x1454>)
 8008b20:	f7fb f99b 	bl	8003e5a <_ZN9LineTrace9getMaxDecEv>
 8008b24:	ee10 3a10 	vmov	r3, s0
 8008b28:	4618      	mov	r0, r3
 8008b2a:	f7f7 fd25 	bl	8000578 <__aeabi_f2d>
 8008b2e:	4603      	mov	r3, r0
 8008b30:	460c      	mov	r4, r1
 8008b32:	461a      	mov	r2, r3
 8008b34:	4623      	mov	r3, r4
 8008b36:	48af      	ldr	r0, [pc, #700]	; (8008df4 <cppLoop+0x145c>)
 8008b38:	f7f8 faec 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8008b3c:	48ae      	ldr	r0, [pc, #696]	; (8008df8 <cppLoop+0x1460>)
 8008b3e:	f7f9 fb15 	bl	800216c <_ZN8JoyStick8getValueEv>
 8008b42:	4603      	mov	r3, r0
 8008b44:	2b08      	cmp	r3, #8
 8008b46:	bf0c      	ite	eq
 8008b48:	2301      	moveq	r3, #1
 8008b4a:	2300      	movne	r3, #0
 8008b4c:	b2db      	uxtb	r3, r3
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d022      	beq.n	8008b98 <cppLoop+0x1200>
			led.LR(-1, 1);
 8008b52:	2201      	movs	r2, #1
 8008b54:	f04f 31ff 	mov.w	r1, #4294967295
 8008b58:	48a3      	ldr	r0, [pc, #652]	; (8008de8 <cppLoop+0x1450>)
 8008b5a:	f7f9 fc27 	bl	80023ac <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008b5e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008b62:	f000 fe09 	bl	8009778 <HAL_Delay>

			selector_acc++;
 8008b66:	4ba5      	ldr	r3, [pc, #660]	; (8008dfc <cppLoop+0x1464>)
 8008b68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008b6c:	b29b      	uxth	r3, r3
 8008b6e:	3301      	adds	r3, #1
 8008b70:	b29b      	uxth	r3, r3
 8008b72:	b21a      	sxth	r2, r3
 8008b74:	4ba1      	ldr	r3, [pc, #644]	; (8008dfc <cppLoop+0x1464>)
 8008b76:	801a      	strh	r2, [r3, #0]
			if(selector_acc >= 2) selector_acc = 0;
 8008b78:	4ba0      	ldr	r3, [pc, #640]	; (8008dfc <cppLoop+0x1464>)
 8008b7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008b7e:	2b01      	cmp	r3, #1
 8008b80:	dd02      	ble.n	8008b88 <cppLoop+0x11f0>
 8008b82:	4b9e      	ldr	r3, [pc, #632]	; (8008dfc <cppLoop+0x1464>)
 8008b84:	2200      	movs	r2, #0
 8008b86:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008b88:	2200      	movs	r2, #0
 8008b8a:	f04f 31ff 	mov.w	r1, #4294967295
 8008b8e:	4896      	ldr	r0, [pc, #600]	; (8008de8 <cppLoop+0x1450>)
 8008b90:	f7f9 fc0c 	bl	80023ac <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "DEC.TXT", 1, &adj_dec, OVER_WRITE);
			line_trace.setMaxAccDec(adj_acc, adj_dec);

			led.LR(-1, 0);
		}
		break;
 8008b94:	f000 bcbb 	b.w	800950e <cppLoop+0x1b76>
		else if(joy_stick.getValue() == JOY_R){
 8008b98:	4897      	ldr	r0, [pc, #604]	; (8008df8 <cppLoop+0x1460>)
 8008b9a:	f7f9 fae7 	bl	800216c <_ZN8JoyStick8getValueEv>
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	2b10      	cmp	r3, #16
 8008ba2:	bf0c      	ite	eq
 8008ba4:	2301      	moveq	r3, #1
 8008ba6:	2300      	movne	r3, #0
 8008ba8:	b2db      	uxtb	r3, r3
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d03c      	beq.n	8008c28 <cppLoop+0x1290>
			led.LR(-1, 1);
 8008bae:	2201      	movs	r2, #1
 8008bb0:	f04f 31ff 	mov.w	r1, #4294967295
 8008bb4:	488c      	ldr	r0, [pc, #560]	; (8008de8 <cppLoop+0x1450>)
 8008bb6:	f7f9 fbf9 	bl	80023ac <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008bba:	2064      	movs	r0, #100	; 0x64
 8008bbc:	f000 fddc 	bl	8009778 <HAL_Delay>
			if(selector_acc == 0){
 8008bc0:	4b8e      	ldr	r3, [pc, #568]	; (8008dfc <cppLoop+0x1464>)
 8008bc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d113      	bne.n	8008bf2 <cppLoop+0x125a>
				adj_acc = adj_acc + 0.1;
 8008bca:	4b8d      	ldr	r3, [pc, #564]	; (8008e00 <cppLoop+0x1468>)
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	4618      	mov	r0, r3
 8008bd0:	f7f7 fcd2 	bl	8000578 <__aeabi_f2d>
 8008bd4:	a382      	add	r3, pc, #520	; (adr r3, 8008de0 <cppLoop+0x1448>)
 8008bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bda:	f7f7 fb6f 	bl	80002bc <__adddf3>
 8008bde:	4603      	mov	r3, r0
 8008be0:	460c      	mov	r4, r1
 8008be2:	4618      	mov	r0, r3
 8008be4:	4621      	mov	r1, r4
 8008be6:	f7f8 f817 	bl	8000c18 <__aeabi_d2f>
 8008bea:	4602      	mov	r2, r0
 8008bec:	4b84      	ldr	r3, [pc, #528]	; (8008e00 <cppLoop+0x1468>)
 8008bee:	601a      	str	r2, [r3, #0]
 8008bf0:	e012      	b.n	8008c18 <cppLoop+0x1280>
				adj_dec = adj_dec + 0.1;
 8008bf2:	4b84      	ldr	r3, [pc, #528]	; (8008e04 <cppLoop+0x146c>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	f7f7 fcbe 	bl	8000578 <__aeabi_f2d>
 8008bfc:	a378      	add	r3, pc, #480	; (adr r3, 8008de0 <cppLoop+0x1448>)
 8008bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c02:	f7f7 fb5b 	bl	80002bc <__adddf3>
 8008c06:	4603      	mov	r3, r0
 8008c08:	460c      	mov	r4, r1
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	4621      	mov	r1, r4
 8008c0e:	f7f8 f803 	bl	8000c18 <__aeabi_d2f>
 8008c12:	4602      	mov	r2, r0
 8008c14:	4b7b      	ldr	r3, [pc, #492]	; (8008e04 <cppLoop+0x146c>)
 8008c16:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008c18:	2200      	movs	r2, #0
 8008c1a:	f04f 31ff 	mov.w	r1, #4294967295
 8008c1e:	4872      	ldr	r0, [pc, #456]	; (8008de8 <cppLoop+0x1450>)
 8008c20:	f7f9 fbc4 	bl	80023ac <_ZN3LED2LREaa>
		break;
 8008c24:	f000 bc73 	b.w	800950e <cppLoop+0x1b76>
		else if(joy_stick.getValue() == JOY_L){
 8008c28:	4873      	ldr	r0, [pc, #460]	; (8008df8 <cppLoop+0x1460>)
 8008c2a:	f7f9 fa9f 	bl	800216c <_ZN8JoyStick8getValueEv>
 8008c2e:	4603      	mov	r3, r0
 8008c30:	2b01      	cmp	r3, #1
 8008c32:	bf0c      	ite	eq
 8008c34:	2301      	moveq	r3, #1
 8008c36:	2300      	movne	r3, #0
 8008c38:	b2db      	uxtb	r3, r3
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d03c      	beq.n	8008cb8 <cppLoop+0x1320>
			led.LR(-1, 1);
 8008c3e:	2201      	movs	r2, #1
 8008c40:	f04f 31ff 	mov.w	r1, #4294967295
 8008c44:	4868      	ldr	r0, [pc, #416]	; (8008de8 <cppLoop+0x1450>)
 8008c46:	f7f9 fbb1 	bl	80023ac <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008c4a:	2064      	movs	r0, #100	; 0x64
 8008c4c:	f000 fd94 	bl	8009778 <HAL_Delay>
			if(selector_acc == 0){
 8008c50:	4b6a      	ldr	r3, [pc, #424]	; (8008dfc <cppLoop+0x1464>)
 8008c52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d113      	bne.n	8008c82 <cppLoop+0x12ea>
				adj_acc = adj_acc - 0.1;
 8008c5a:	4b69      	ldr	r3, [pc, #420]	; (8008e00 <cppLoop+0x1468>)
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	4618      	mov	r0, r3
 8008c60:	f7f7 fc8a 	bl	8000578 <__aeabi_f2d>
 8008c64:	a35e      	add	r3, pc, #376	; (adr r3, 8008de0 <cppLoop+0x1448>)
 8008c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c6a:	f7f7 fb25 	bl	80002b8 <__aeabi_dsub>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	460c      	mov	r4, r1
 8008c72:	4618      	mov	r0, r3
 8008c74:	4621      	mov	r1, r4
 8008c76:	f7f7 ffcf 	bl	8000c18 <__aeabi_d2f>
 8008c7a:	4602      	mov	r2, r0
 8008c7c:	4b60      	ldr	r3, [pc, #384]	; (8008e00 <cppLoop+0x1468>)
 8008c7e:	601a      	str	r2, [r3, #0]
 8008c80:	e012      	b.n	8008ca8 <cppLoop+0x1310>
				adj_dec = adj_dec - 0.1;
 8008c82:	4b60      	ldr	r3, [pc, #384]	; (8008e04 <cppLoop+0x146c>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	4618      	mov	r0, r3
 8008c88:	f7f7 fc76 	bl	8000578 <__aeabi_f2d>
 8008c8c:	a354      	add	r3, pc, #336	; (adr r3, 8008de0 <cppLoop+0x1448>)
 8008c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c92:	f7f7 fb11 	bl	80002b8 <__aeabi_dsub>
 8008c96:	4603      	mov	r3, r0
 8008c98:	460c      	mov	r4, r1
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	4621      	mov	r1, r4
 8008c9e:	f7f7 ffbb 	bl	8000c18 <__aeabi_d2f>
 8008ca2:	4602      	mov	r2, r0
 8008ca4:	4b57      	ldr	r3, [pc, #348]	; (8008e04 <cppLoop+0x146c>)
 8008ca6:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008ca8:	2200      	movs	r2, #0
 8008caa:	f04f 31ff 	mov.w	r1, #4294967295
 8008cae:	484e      	ldr	r0, [pc, #312]	; (8008de8 <cppLoop+0x1450>)
 8008cb0:	f7f9 fb7c 	bl	80023ac <_ZN3LED2LREaa>
		break;
 8008cb4:	f000 bc2b 	b.w	800950e <cppLoop+0x1b76>
		else if(joy_stick.getValue() == JOY_C){
 8008cb8:	484f      	ldr	r0, [pc, #316]	; (8008df8 <cppLoop+0x1460>)
 8008cba:	f7f9 fa57 	bl	800216c <_ZN8JoyStick8getValueEv>
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	2b02      	cmp	r3, #2
 8008cc2:	bf0c      	ite	eq
 8008cc4:	2301      	moveq	r3, #1
 8008cc6:	2300      	movne	r3, #0
 8008cc8:	b2db      	uxtb	r3, r3
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	f000 841f 	beq.w	800950e <cppLoop+0x1b76>
			led.LR(-1, 1);
 8008cd0:	2201      	movs	r2, #1
 8008cd2:	f04f 31ff 	mov.w	r1, #4294967295
 8008cd6:	4844      	ldr	r0, [pc, #272]	; (8008de8 <cppLoop+0x1450>)
 8008cd8:	f7f9 fb68 	bl	80023ac <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008cdc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008ce0:	f000 fd4a 	bl	8009778 <HAL_Delay>
			sd_write_array_float("PARAMS", "ACC.TXT", 1, &adj_acc, OVER_WRITE);
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	9300      	str	r3, [sp, #0]
 8008ce8:	4b45      	ldr	r3, [pc, #276]	; (8008e00 <cppLoop+0x1468>)
 8008cea:	2201      	movs	r2, #1
 8008cec:	4946      	ldr	r1, [pc, #280]	; (8008e08 <cppLoop+0x1470>)
 8008cee:	4847      	ldr	r0, [pc, #284]	; (8008e0c <cppLoop+0x1474>)
 8008cf0:	f7f8 fdc4 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "DEC.TXT", 1, &adj_dec, OVER_WRITE);
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	9300      	str	r3, [sp, #0]
 8008cf8:	4b42      	ldr	r3, [pc, #264]	; (8008e04 <cppLoop+0x146c>)
 8008cfa:	2201      	movs	r2, #1
 8008cfc:	4944      	ldr	r1, [pc, #272]	; (8008e10 <cppLoop+0x1478>)
 8008cfe:	4843      	ldr	r0, [pc, #268]	; (8008e0c <cppLoop+0x1474>)
 8008d00:	f7f8 fdbc 	bl	800187c <sd_write_array_float>
			line_trace.setMaxAccDec(adj_acc, adj_dec);
 8008d04:	4b3e      	ldr	r3, [pc, #248]	; (8008e00 <cppLoop+0x1468>)
 8008d06:	edd3 7a00 	vldr	s15, [r3]
 8008d0a:	4b3e      	ldr	r3, [pc, #248]	; (8008e04 <cppLoop+0x146c>)
 8008d0c:	ed93 7a00 	vldr	s14, [r3]
 8008d10:	eef0 0a47 	vmov.f32	s1, s14
 8008d14:	eeb0 0a67 	vmov.f32	s0, s15
 8008d18:	4834      	ldr	r0, [pc, #208]	; (8008dec <cppLoop+0x1454>)
 8008d1a:	f7fb f834 	bl	8003d86 <_ZN9LineTrace12setMaxAccDecEff>
			led.LR(-1, 0);
 8008d1e:	2200      	movs	r2, #0
 8008d20:	f04f 31ff 	mov.w	r1, #4294967295
 8008d24:	4830      	ldr	r0, [pc, #192]	; (8008de8 <cppLoop+0x1450>)
 8008d26:	f7f9 fb41 	bl	80023ac <_ZN3LED2LREaa>
		break;
 8008d2a:	e3f0      	b.n	800950e <cppLoop+0x1b76>

	case 8:
		led.fullColor('W');
 8008d2c:	2157      	movs	r1, #87	; 0x57
 8008d2e:	482e      	ldr	r0, [pc, #184]	; (8008de8 <cppLoop+0x1450>)
 8008d30:	f7f9 fa80 	bl	8002234 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008d34:	f7f8 f9b4 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008d38:	2100      	movs	r1, #0
 8008d3a:	2000      	movs	r0, #0
 8008d3c:	f7f8 f9c0 	bl	80010c0 <lcd_locate>
		lcd_printf("ACC2:%3.1f", line_trace.getMaxAcc2());
 8008d40:	482a      	ldr	r0, [pc, #168]	; (8008dec <cppLoop+0x1454>)
 8008d42:	f7fb f878 	bl	8003e36 <_ZN9LineTrace10getMaxAcc2Ev>
 8008d46:	ee10 3a10 	vmov	r3, s0
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	f7f7 fc14 	bl	8000578 <__aeabi_f2d>
 8008d50:	4603      	mov	r3, r0
 8008d52:	460c      	mov	r4, r1
 8008d54:	461a      	mov	r2, r3
 8008d56:	4623      	mov	r3, r4
 8008d58:	482e      	ldr	r0, [pc, #184]	; (8008e14 <cppLoop+0x147c>)
 8008d5a:	f7f8 f9db 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008d5e:	2101      	movs	r1, #1
 8008d60:	2000      	movs	r0, #0
 8008d62:	f7f8 f9ad 	bl	80010c0 <lcd_locate>
		lcd_printf("DEC2:%3.1f", line_trace.getMaxDec2());
 8008d66:	4821      	ldr	r0, [pc, #132]	; (8008dec <cppLoop+0x1454>)
 8008d68:	f7fb f853 	bl	8003e12 <_ZN9LineTrace10getMaxDec2Ev>
 8008d6c:	ee10 3a10 	vmov	r3, s0
 8008d70:	4618      	mov	r0, r3
 8008d72:	f7f7 fc01 	bl	8000578 <__aeabi_f2d>
 8008d76:	4603      	mov	r3, r0
 8008d78:	460c      	mov	r4, r1
 8008d7a:	461a      	mov	r2, r3
 8008d7c:	4623      	mov	r3, r4
 8008d7e:	4826      	ldr	r0, [pc, #152]	; (8008e18 <cppLoop+0x1480>)
 8008d80:	f7f8 f9c8 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_U){
 8008d84:	481c      	ldr	r0, [pc, #112]	; (8008df8 <cppLoop+0x1460>)
 8008d86:	f7f9 f9f1 	bl	800216c <_ZN8JoyStick8getValueEv>
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	2b08      	cmp	r3, #8
 8008d8e:	bf0c      	ite	eq
 8008d90:	2301      	moveq	r3, #1
 8008d92:	2300      	movne	r3, #0
 8008d94:	b2db      	uxtb	r3, r3
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d042      	beq.n	8008e20 <cppLoop+0x1488>
			led.LR(-1, 1);
 8008d9a:	2201      	movs	r2, #1
 8008d9c:	f04f 31ff 	mov.w	r1, #4294967295
 8008da0:	4811      	ldr	r0, [pc, #68]	; (8008de8 <cppLoop+0x1450>)
 8008da2:	f7f9 fb03 	bl	80023ac <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008da6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008daa:	f000 fce5 	bl	8009778 <HAL_Delay>

			selector_acc2++;
 8008dae:	4b1b      	ldr	r3, [pc, #108]	; (8008e1c <cppLoop+0x1484>)
 8008db0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008db4:	b29b      	uxth	r3, r3
 8008db6:	3301      	adds	r3, #1
 8008db8:	b29b      	uxth	r3, r3
 8008dba:	b21a      	sxth	r2, r3
 8008dbc:	4b17      	ldr	r3, [pc, #92]	; (8008e1c <cppLoop+0x1484>)
 8008dbe:	801a      	strh	r2, [r3, #0]
			if(selector_acc2 >= 2) selector_acc2 = 0;
 8008dc0:	4b16      	ldr	r3, [pc, #88]	; (8008e1c <cppLoop+0x1484>)
 8008dc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008dc6:	2b01      	cmp	r3, #1
 8008dc8:	dd02      	ble.n	8008dd0 <cppLoop+0x1438>
 8008dca:	4b14      	ldr	r3, [pc, #80]	; (8008e1c <cppLoop+0x1484>)
 8008dcc:	2200      	movs	r2, #0
 8008dce:	801a      	strh	r2, [r3, #0]

			led.LR(-1, 0);
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	f04f 31ff 	mov.w	r1, #4294967295
 8008dd6:	4804      	ldr	r0, [pc, #16]	; (8008de8 <cppLoop+0x1450>)
 8008dd8:	f7f9 fae8 	bl	80023ac <_ZN3LED2LREaa>
			sd_write_array_float("PARAMS", "DEC2.TXT", 1, &adj_dec2, OVER_WRITE);
			line_trace.setMaxAccDec2(adj_acc2, adj_dec2);

			led.LR(-1, 0);
		}
		break;
 8008ddc:	e399      	b.n	8009512 <cppLoop+0x1b7a>
 8008dde:	bf00      	nop
 8008de0:	9999999a 	.word	0x9999999a
 8008de4:	3fb99999 	.word	0x3fb99999
 8008de8:	20000604 	.word	0x20000604
 8008dec:	2001db94 	.word	0x2001db94
 8008df0:	08019b1c 	.word	0x08019b1c
 8008df4:	08019b28 	.word	0x08019b28
 8008df8:	200005f8 	.word	0x200005f8
 8008dfc:	2004226e 	.word	0x2004226e
 8008e00:	200422b8 	.word	0x200422b8
 8008e04:	200422c0 	.word	0x200422c0
 8008e08:	08019b34 	.word	0x08019b34
 8008e0c:	08019a68 	.word	0x08019a68
 8008e10:	08019b3c 	.word	0x08019b3c
 8008e14:	08019b44 	.word	0x08019b44
 8008e18:	08019b50 	.word	0x08019b50
 8008e1c:	20042270 	.word	0x20042270
		else if(joy_stick.getValue() == JOY_R){
 8008e20:	48bd      	ldr	r0, [pc, #756]	; (8009118 <cppLoop+0x1780>)
 8008e22:	f7f9 f9a3 	bl	800216c <_ZN8JoyStick8getValueEv>
 8008e26:	4603      	mov	r3, r0
 8008e28:	2b10      	cmp	r3, #16
 8008e2a:	bf0c      	ite	eq
 8008e2c:	2301      	moveq	r3, #1
 8008e2e:	2300      	movne	r3, #0
 8008e30:	b2db      	uxtb	r3, r3
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d03b      	beq.n	8008eae <cppLoop+0x1516>
			led.LR(-1, 1);
 8008e36:	2201      	movs	r2, #1
 8008e38:	f04f 31ff 	mov.w	r1, #4294967295
 8008e3c:	48b7      	ldr	r0, [pc, #732]	; (800911c <cppLoop+0x1784>)
 8008e3e:	f7f9 fab5 	bl	80023ac <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008e42:	2064      	movs	r0, #100	; 0x64
 8008e44:	f000 fc98 	bl	8009778 <HAL_Delay>
			if(selector_acc2 == 0){
 8008e48:	4bb5      	ldr	r3, [pc, #724]	; (8009120 <cppLoop+0x1788>)
 8008e4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d113      	bne.n	8008e7a <cppLoop+0x14e2>
				adj_acc2 = adj_acc2 + 0.1;
 8008e52:	4bb4      	ldr	r3, [pc, #720]	; (8009124 <cppLoop+0x178c>)
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	4618      	mov	r0, r3
 8008e58:	f7f7 fb8e 	bl	8000578 <__aeabi_f2d>
 8008e5c:	a3ac      	add	r3, pc, #688	; (adr r3, 8009110 <cppLoop+0x1778>)
 8008e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e62:	f7f7 fa2b 	bl	80002bc <__adddf3>
 8008e66:	4603      	mov	r3, r0
 8008e68:	460c      	mov	r4, r1
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	4621      	mov	r1, r4
 8008e6e:	f7f7 fed3 	bl	8000c18 <__aeabi_d2f>
 8008e72:	4602      	mov	r2, r0
 8008e74:	4bab      	ldr	r3, [pc, #684]	; (8009124 <cppLoop+0x178c>)
 8008e76:	601a      	str	r2, [r3, #0]
 8008e78:	e012      	b.n	8008ea0 <cppLoop+0x1508>
				adj_dec2 = adj_dec2 + 0.1;
 8008e7a:	4bab      	ldr	r3, [pc, #684]	; (8009128 <cppLoop+0x1790>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	4618      	mov	r0, r3
 8008e80:	f7f7 fb7a 	bl	8000578 <__aeabi_f2d>
 8008e84:	a3a2      	add	r3, pc, #648	; (adr r3, 8009110 <cppLoop+0x1778>)
 8008e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e8a:	f7f7 fa17 	bl	80002bc <__adddf3>
 8008e8e:	4603      	mov	r3, r0
 8008e90:	460c      	mov	r4, r1
 8008e92:	4618      	mov	r0, r3
 8008e94:	4621      	mov	r1, r4
 8008e96:	f7f7 febf 	bl	8000c18 <__aeabi_d2f>
 8008e9a:	4602      	mov	r2, r0
 8008e9c:	4ba2      	ldr	r3, [pc, #648]	; (8009128 <cppLoop+0x1790>)
 8008e9e:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	f04f 31ff 	mov.w	r1, #4294967295
 8008ea6:	489d      	ldr	r0, [pc, #628]	; (800911c <cppLoop+0x1784>)
 8008ea8:	f7f9 fa80 	bl	80023ac <_ZN3LED2LREaa>
		break;
 8008eac:	e331      	b.n	8009512 <cppLoop+0x1b7a>
		else if(joy_stick.getValue() == JOY_L){
 8008eae:	489a      	ldr	r0, [pc, #616]	; (8009118 <cppLoop+0x1780>)
 8008eb0:	f7f9 f95c 	bl	800216c <_ZN8JoyStick8getValueEv>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	2b01      	cmp	r3, #1
 8008eb8:	bf0c      	ite	eq
 8008eba:	2301      	moveq	r3, #1
 8008ebc:	2300      	movne	r3, #0
 8008ebe:	b2db      	uxtb	r3, r3
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d03b      	beq.n	8008f3c <cppLoop+0x15a4>
			led.LR(-1, 1);
 8008ec4:	2201      	movs	r2, #1
 8008ec6:	f04f 31ff 	mov.w	r1, #4294967295
 8008eca:	4894      	ldr	r0, [pc, #592]	; (800911c <cppLoop+0x1784>)
 8008ecc:	f7f9 fa6e 	bl	80023ac <_ZN3LED2LREaa>
			HAL_Delay(100);
 8008ed0:	2064      	movs	r0, #100	; 0x64
 8008ed2:	f000 fc51 	bl	8009778 <HAL_Delay>
			if(selector_acc2 == 0){
 8008ed6:	4b92      	ldr	r3, [pc, #584]	; (8009120 <cppLoop+0x1788>)
 8008ed8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d113      	bne.n	8008f08 <cppLoop+0x1570>
				adj_acc2 = adj_acc2 - 0.1;
 8008ee0:	4b90      	ldr	r3, [pc, #576]	; (8009124 <cppLoop+0x178c>)
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	f7f7 fb47 	bl	8000578 <__aeabi_f2d>
 8008eea:	a389      	add	r3, pc, #548	; (adr r3, 8009110 <cppLoop+0x1778>)
 8008eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ef0:	f7f7 f9e2 	bl	80002b8 <__aeabi_dsub>
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	460c      	mov	r4, r1
 8008ef8:	4618      	mov	r0, r3
 8008efa:	4621      	mov	r1, r4
 8008efc:	f7f7 fe8c 	bl	8000c18 <__aeabi_d2f>
 8008f00:	4602      	mov	r2, r0
 8008f02:	4b88      	ldr	r3, [pc, #544]	; (8009124 <cppLoop+0x178c>)
 8008f04:	601a      	str	r2, [r3, #0]
 8008f06:	e012      	b.n	8008f2e <cppLoop+0x1596>
				adj_dec2 = adj_dec2 - 0.1;
 8008f08:	4b87      	ldr	r3, [pc, #540]	; (8009128 <cppLoop+0x1790>)
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	f7f7 fb33 	bl	8000578 <__aeabi_f2d>
 8008f12:	a37f      	add	r3, pc, #508	; (adr r3, 8009110 <cppLoop+0x1778>)
 8008f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f18:	f7f7 f9ce 	bl	80002b8 <__aeabi_dsub>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	460c      	mov	r4, r1
 8008f20:	4618      	mov	r0, r3
 8008f22:	4621      	mov	r1, r4
 8008f24:	f7f7 fe78 	bl	8000c18 <__aeabi_d2f>
 8008f28:	4602      	mov	r2, r0
 8008f2a:	4b7f      	ldr	r3, [pc, #508]	; (8009128 <cppLoop+0x1790>)
 8008f2c:	601a      	str	r2, [r3, #0]
			led.LR(-1, 0);
 8008f2e:	2200      	movs	r2, #0
 8008f30:	f04f 31ff 	mov.w	r1, #4294967295
 8008f34:	4879      	ldr	r0, [pc, #484]	; (800911c <cppLoop+0x1784>)
 8008f36:	f7f9 fa39 	bl	80023ac <_ZN3LED2LREaa>
		break;
 8008f3a:	e2ea      	b.n	8009512 <cppLoop+0x1b7a>
		else if(joy_stick.getValue() == JOY_C){
 8008f3c:	4876      	ldr	r0, [pc, #472]	; (8009118 <cppLoop+0x1780>)
 8008f3e:	f7f9 f915 	bl	800216c <_ZN8JoyStick8getValueEv>
 8008f42:	4603      	mov	r3, r0
 8008f44:	2b02      	cmp	r3, #2
 8008f46:	bf0c      	ite	eq
 8008f48:	2301      	moveq	r3, #1
 8008f4a:	2300      	movne	r3, #0
 8008f4c:	b2db      	uxtb	r3, r3
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	f000 82df 	beq.w	8009512 <cppLoop+0x1b7a>
			led.LR(-1, 1);
 8008f54:	2201      	movs	r2, #1
 8008f56:	f04f 31ff 	mov.w	r1, #4294967295
 8008f5a:	4870      	ldr	r0, [pc, #448]	; (800911c <cppLoop+0x1784>)
 8008f5c:	f7f9 fa26 	bl	80023ac <_ZN3LED2LREaa>
			HAL_Delay(300);
 8008f60:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8008f64:	f000 fc08 	bl	8009778 <HAL_Delay>
			sd_write_array_float("PARAMS", "ACC2.TXT", 1, &adj_acc2, OVER_WRITE);
 8008f68:	2300      	movs	r3, #0
 8008f6a:	9300      	str	r3, [sp, #0]
 8008f6c:	4b6d      	ldr	r3, [pc, #436]	; (8009124 <cppLoop+0x178c>)
 8008f6e:	2201      	movs	r2, #1
 8008f70:	496e      	ldr	r1, [pc, #440]	; (800912c <cppLoop+0x1794>)
 8008f72:	486f      	ldr	r0, [pc, #444]	; (8009130 <cppLoop+0x1798>)
 8008f74:	f7f8 fc82 	bl	800187c <sd_write_array_float>
			sd_write_array_float("PARAMS", "DEC2.TXT", 1, &adj_dec2, OVER_WRITE);
 8008f78:	2300      	movs	r3, #0
 8008f7a:	9300      	str	r3, [sp, #0]
 8008f7c:	4b6a      	ldr	r3, [pc, #424]	; (8009128 <cppLoop+0x1790>)
 8008f7e:	2201      	movs	r2, #1
 8008f80:	496c      	ldr	r1, [pc, #432]	; (8009134 <cppLoop+0x179c>)
 8008f82:	486b      	ldr	r0, [pc, #428]	; (8009130 <cppLoop+0x1798>)
 8008f84:	f7f8 fc7a 	bl	800187c <sd_write_array_float>
			line_trace.setMaxAccDec2(adj_acc2, adj_dec2);
 8008f88:	4b66      	ldr	r3, [pc, #408]	; (8009124 <cppLoop+0x178c>)
 8008f8a:	edd3 7a00 	vldr	s15, [r3]
 8008f8e:	4b66      	ldr	r3, [pc, #408]	; (8009128 <cppLoop+0x1790>)
 8008f90:	ed93 7a00 	vldr	s14, [r3]
 8008f94:	eef0 0a47 	vmov.f32	s1, s14
 8008f98:	eeb0 0a67 	vmov.f32	s0, s15
 8008f9c:	4866      	ldr	r0, [pc, #408]	; (8009138 <cppLoop+0x17a0>)
 8008f9e:	f7fa ff0c 	bl	8003dba <_ZN9LineTrace13setMaxAccDec2Eff>
			led.LR(-1, 0);
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	f04f 31ff 	mov.w	r1, #4294967295
 8008fa8:	485c      	ldr	r0, [pc, #368]	; (800911c <cppLoop+0x1784>)
 8008faa:	f7f9 f9ff 	bl	80023ac <_ZN3LED2LREaa>
		break;
 8008fae:	e2b0      	b.n	8009512 <cppLoop+0x1b7a>

	case 9:
		led.fullColor('~');
 8008fb0:	217e      	movs	r1, #126	; 0x7e
 8008fb2:	485a      	ldr	r0, [pc, #360]	; (800911c <cppLoop+0x1784>)
 8008fb4:	f7f9 f93e 	bl	8002234 <_ZN3LED9fullColorEc>

		lcd_clear();
 8008fb8:	f7f8 f872 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8008fbc:	2100      	movs	r1, #0
 8008fbe:	2000      	movs	r0, #0
 8008fc0:	f7f8 f87e 	bl	80010c0 <lcd_locate>
		lcd_printf("Teoshi");
 8008fc4:	485d      	ldr	r0, [pc, #372]	; (800913c <cppLoop+0x17a4>)
 8008fc6:	f7f8 f8a5 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8008fca:	2101      	movs	r1, #1
 8008fcc:	2000      	movs	r0, #0
 8008fce:	f7f8 f877 	bl	80010c0 <lcd_locate>
		lcd_printf("Following");
 8008fd2:	485b      	ldr	r0, [pc, #364]	; (8009140 <cppLoop+0x17a8>)
 8008fd4:	f7f8 f89e 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8008fd8:	484f      	ldr	r0, [pc, #316]	; (8009118 <cppLoop+0x1780>)
 8008fda:	f7f9 f8c7 	bl	800216c <_ZN8JoyStick8getValueEv>
 8008fde:	4603      	mov	r3, r0
 8008fe0:	2b02      	cmp	r3, #2
 8008fe2:	bf0c      	ite	eq
 8008fe4:	2301      	moveq	r3, #1
 8008fe6:	2300      	movne	r3, #0
 8008fe8:	b2db      	uxtb	r3, r3
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	f000 8293 	beq.w	8009516 <cppLoop+0x1b7e>
			led.LR(-1, 1);
 8008ff0:	2201      	movs	r2, #1
 8008ff2:	f04f 31ff 	mov.w	r1, #4294967295
 8008ff6:	4849      	ldr	r0, [pc, #292]	; (800911c <cppLoop+0x1784>)
 8008ff8:	f7f9 f9d8 	bl	80023ac <_ZN3LED2LREaa>
			HAL_Delay(500);
 8008ffc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009000:	f000 fbba 	bl	8009778 <HAL_Delay>

			line_trace.setNormalRatio(0.0);
 8009004:	ed9f 0a4f 	vldr	s0, [pc, #316]	; 8009144 <cppLoop+0x17ac>
 8009008:	484b      	ldr	r0, [pc, #300]	; (8009138 <cppLoop+0x17a0>)
 800900a:	f7fa fe0d 	bl	8003c28 <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 800900e:	484a      	ldr	r0, [pc, #296]	; (8009138 <cppLoop+0x17a0>)
 8009010:	f7fb f870 	bl	80040f4 <_ZN9LineTrace5startEv>
			HAL_Delay(500);
 8009014:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009018:	f000 fbae 	bl	8009778 <HAL_Delay>

			led.fullColor('R');
 800901c:	2152      	movs	r1, #82	; 0x52
 800901e:	483f      	ldr	r0, [pc, #252]	; (800911c <cppLoop+0x1784>)
 8009020:	f7f9 f908 	bl	8002234 <_ZN3LED9fullColorEc>
			encoder.clearDistance10mm();
 8009024:	4848      	ldr	r0, [pc, #288]	; (8009148 <cppLoop+0x17b0>)
 8009026:	f7f8 fb7b 	bl	8001720 <_ZN7Encoder17clearDistance10mmEv>
			//encoder.clearDistance();

			HAL_Delay(10000);
 800902a:	f242 7010 	movw	r0, #10000	; 0x2710
 800902e:	f000 fba3 	bl	8009778 <HAL_Delay>

			line_trace.stop();
 8009032:	4841      	ldr	r0, [pc, #260]	; (8009138 <cppLoop+0x17a0>)
 8009034:	f7fb f8fe 	bl	8004234 <_ZN9LineTrace4stopEv>
			//long total = encoder.getTotalCnt();

			//user_fopen("total_cnts", "cnts.txt");
			user_fopen("distance", "1m.txt");
 8009038:	4944      	ldr	r1, [pc, #272]	; (800914c <cppLoop+0x17b4>)
 800903a:	4845      	ldr	r0, [pc, #276]	; (8009150 <cppLoop+0x17b8>)
 800903c:	f7f8 fba9 	bl	8001792 <user_fopen>
			float d = encoder.getDistance();
 8009040:	4841      	ldr	r0, [pc, #260]	; (8009148 <cppLoop+0x17b0>)
 8009042:	f7f8 fb31 	bl	80016a8 <_ZN7Encoder11getDistanceEv>
 8009046:	eef0 7a40 	vmov.f32	s15, s0
 800904a:	edc7 7a01 	vstr	s15, [r7, #4]
			sd_write_float(1, &d, ADD_WRITE);
 800904e:	1d3b      	adds	r3, r7, #4
 8009050:	2201      	movs	r2, #1
 8009052:	4619      	mov	r1, r3
 8009054:	2001      	movs	r0, #1
 8009056:	f7f8 fbbf 	bl	80017d8 <sd_write_float>
			user_fclose();
 800905a:	f7f8 fbad 	bl	80017b8 <user_fclose>

			led.LR(-1, 0);
 800905e:	2200      	movs	r2, #0
 8009060:	f04f 31ff 	mov.w	r1, #4294967295
 8009064:	482d      	ldr	r0, [pc, #180]	; (800911c <cppLoop+0x1784>)
 8009066:	f7f9 f9a1 	bl	80023ac <_ZN3LED2LREaa>
		}
		break;
 800906a:	e254      	b.n	8009516 <cppLoop+0x1b7e>

	case 10:
		led.fullColor('~');
 800906c:	217e      	movs	r1, #126	; 0x7e
 800906e:	482b      	ldr	r0, [pc, #172]	; (800911c <cppLoop+0x1784>)
 8009070:	f7f9 f8e0 	bl	8002234 <_ZN3LED9fullColorEc>

		lcd_clear();
 8009074:	f7f8 f814 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8009078:	2100      	movs	r1, #0
 800907a:	2000      	movs	r0, #0
 800907c:	f7f8 f820 	bl	80010c0 <lcd_locate>
		lcd_printf("Create  ");
 8009080:	4834      	ldr	r0, [pc, #208]	; (8009154 <cppLoop+0x17bc>)
 8009082:	f7f8 f847 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8009086:	2101      	movs	r1, #1
 8009088:	2000      	movs	r0, #0
 800908a:	f7f8 f819 	bl	80010c0 <lcd_locate>
		lcd_printf("VelTable");
 800908e:	4832      	ldr	r0, [pc, #200]	; (8009158 <cppLoop+0x17c0>)
 8009090:	f7f8 f840 	bl	8001114 <lcd_printf>
		if(joy_stick.getValue() == JOY_C){
 8009094:	4820      	ldr	r0, [pc, #128]	; (8009118 <cppLoop+0x1780>)
 8009096:	f7f9 f869 	bl	800216c <_ZN8JoyStick8getValueEv>
 800909a:	4603      	mov	r3, r0
 800909c:	2b02      	cmp	r3, #2
 800909e:	bf0c      	ite	eq
 80090a0:	2301      	moveq	r3, #1
 80090a2:	2300      	movne	r3, #0
 80090a4:	b2db      	uxtb	r3, r3
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	f000 8237 	beq.w	800951a <cppLoop+0x1b82>
			HAL_Delay(500);
 80090ac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80090b0:	f000 fb62 	bl	8009778 <HAL_Delay>
			led.LR(-1, 1);
 80090b4:	2201      	movs	r2, #1
 80090b6:	f04f 31ff 	mov.w	r1, #4294967295
 80090ba:	4818      	ldr	r0, [pc, #96]	; (800911c <cppLoop+0x1784>)
 80090bc:	f7f9 f976 	bl	80023ac <_ZN3LED2LREaa>

			line_trace.setMode(THIRD_RUNNING);
 80090c0:	2102      	movs	r1, #2
 80090c2:	481d      	ldr	r0, [pc, #116]	; (8009138 <cppLoop+0x17a0>)
 80090c4:	f7fb f804 	bl	80040d0 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_max_velocity2);
 80090c8:	4b24      	ldr	r3, [pc, #144]	; (800915c <cppLoop+0x17c4>)
 80090ca:	edd3 7a00 	vldr	s15, [r3]
 80090ce:	eeb0 0a67 	vmov.f32	s0, s15
 80090d2:	4819      	ldr	r0, [pc, #100]	; (8009138 <cppLoop+0x17a0>)
 80090d4:	f7fa fdb7 	bl	8003c46 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity2);
 80090d8:	4b20      	ldr	r3, [pc, #128]	; (800915c <cppLoop+0x17c4>)
 80090da:	edd3 7a00 	vldr	s15, [r3]
 80090de:	eeb0 0a67 	vmov.f32	s0, s15
 80090e2:	4815      	ldr	r0, [pc, #84]	; (8009138 <cppLoop+0x17a0>)
 80090e4:	f7fa fdbf 	bl	8003c66 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_max_velocity2);
 80090e8:	4b1c      	ldr	r3, [pc, #112]	; (800915c <cppLoop+0x17c4>)
 80090ea:	edd3 7a00 	vldr	s15, [r3]
 80090ee:	eeb0 0a67 	vmov.f32	s0, s15
 80090f2:	4811      	ldr	r0, [pc, #68]	; (8009138 <cppLoop+0x17a0>)
 80090f4:	f7fa fdd7 	bl	8003ca6 <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 80090f8:	480f      	ldr	r0, [pc, #60]	; (8009138 <cppLoop+0x17a0>)
 80090fa:	f7fb f9df 	bl	80044bc <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			led.LR(-1, 0);
 80090fe:	2200      	movs	r2, #0
 8009100:	f04f 31ff 	mov.w	r1, #4294967295
 8009104:	4805      	ldr	r0, [pc, #20]	; (800911c <cppLoop+0x1784>)
 8009106:	f7f9 f951 	bl	80023ac <_ZN3LED2LREaa>
		}

		break;
 800910a:	e206      	b.n	800951a <cppLoop+0x1b82>
 800910c:	f3af 8000 	nop.w
 8009110:	9999999a 	.word	0x9999999a
 8009114:	3fb99999 	.word	0x3fb99999
 8009118:	200005f8 	.word	0x200005f8
 800911c:	20000604 	.word	0x20000604
 8009120:	20042270 	.word	0x20042270
 8009124:	200422c8 	.word	0x200422c8
 8009128:	200422d0 	.word	0x200422d0
 800912c:	08019b5c 	.word	0x08019b5c
 8009130:	08019a68 	.word	0x08019a68
 8009134:	08019b68 	.word	0x08019b68
 8009138:	2001db94 	.word	0x2001db94
 800913c:	08019b74 	.word	0x08019b74
 8009140:	08019b7c 	.word	0x08019b7c
 8009144:	00000000 	.word	0x00000000
 8009148:	2001daf4 	.word	0x2001daf4
 800914c:	08019b88 	.word	0x08019b88
 8009150:	08019b90 	.word	0x08019b90
 8009154:	08019b9c 	.word	0x08019b9c
 8009158:	08019ba8 	.word	0x08019ba8
 800915c:	200422a0 	.word	0x200422a0

	case 11:
		led.fullColor('~');
 8009160:	217e      	movs	r1, #126	; 0x7e
 8009162:	489d      	ldr	r0, [pc, #628]	; (80093d8 <cppLoop+0x1a40>)
 8009164:	f7f9 f866 	bl	8002234 <_ZN3LED9fullColorEc>

		lcd_clear();
 8009168:	f7f7 ff9a 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800916c:	2100      	movs	r1, #0
 800916e:	2000      	movs	r0, #0
 8009170:	f7f7 ffa6 	bl	80010c0 <lcd_locate>
		lcd_printf("ESC");
 8009174:	4899      	ldr	r0, [pc, #612]	; (80093dc <cppLoop+0x1a44>)
 8009176:	f7f7 ffcd 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800917a:	2101      	movs	r1, #1
 800917c:	2000      	movs	r0, #0
 800917e:	f7f7 ff9f 	bl	80010c0 <lcd_locate>
		lcd_printf("TEST");
 8009182:	4897      	ldr	r0, [pc, #604]	; (80093e0 <cppLoop+0x1a48>)
 8009184:	f7f7 ffc6 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8009188:	4896      	ldr	r0, [pc, #600]	; (80093e4 <cppLoop+0x1a4c>)
 800918a:	f7f8 ffef 	bl	800216c <_ZN8JoyStick8getValueEv>
 800918e:	4603      	mov	r3, r0
 8009190:	2b02      	cmp	r3, #2
 8009192:	bf0c      	ite	eq
 8009194:	2301      	moveq	r3, #1
 8009196:	2300      	movne	r3, #0
 8009198:	b2db      	uxtb	r3, r3
 800919a:	2b00      	cmp	r3, #0
 800919c:	f000 81bf 	beq.w	800951e <cppLoop+0x1b86>
			HAL_Delay(1000);
 80091a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80091a4:	f000 fae8 	bl	8009778 <HAL_Delay>
			led.LR(-1, 1);
 80091a8:	2201      	movs	r2, #1
 80091aa:	f04f 31ff 	mov.w	r1, #4294967295
 80091ae:	488a      	ldr	r0, [pc, #552]	; (80093d8 <cppLoop+0x1a40>)
 80091b0:	f7f9 f8fc 	bl	80023ac <_ZN3LED2LREaa>

			esc.on(0.5, 0.5, 0.5, 0.5);
 80091b4:	eef6 1a00 	vmov.f32	s3, #96	; 0x3f000000  0.5
 80091b8:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 80091bc:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 80091c0:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80091c4:	4888      	ldr	r0, [pc, #544]	; (80093e8 <cppLoop+0x1a50>)
 80091c6:	f7f8 f843 	bl	8001250 <_ZN3ESC2onEffff>
			HAL_Delay(5000);
 80091ca:	f241 3088 	movw	r0, #5000	; 0x1388
 80091ce:	f000 fad3 	bl	8009778 <HAL_Delay>
			esc.off();
 80091d2:	4885      	ldr	r0, [pc, #532]	; (80093e8 <cppLoop+0x1a50>)
 80091d4:	f7f8 f8d6 	bl	8001384 <_ZN3ESC3offEv>

			led.LR(-1, 0);
 80091d8:	2200      	movs	r2, #0
 80091da:	f04f 31ff 	mov.w	r1, #4294967295
 80091de:	487e      	ldr	r0, [pc, #504]	; (80093d8 <cppLoop+0x1a40>)
 80091e0:	f7f9 f8e4 	bl	80023ac <_ZN3LED2LREaa>
			logger.saveLogs("SYSIDENT", "STEPRES.txt");

			led.LR(-1, 0);
		}
		*/
		break;
 80091e4:	e19b      	b.n	800951e <cppLoop+0x1b86>

	case 12:
		led.fullColor('~');
 80091e6:	217e      	movs	r1, #126	; 0x7e
 80091e8:	487b      	ldr	r0, [pc, #492]	; (80093d8 <cppLoop+0x1a40>)
 80091ea:	f7f9 f823 	bl	8002234 <_ZN3LED9fullColorEc>

		lcd_clear();
 80091ee:	f7f7 ff57 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80091f2:	2100      	movs	r1, #0
 80091f4:	2000      	movs	r0, #0
 80091f6:	f7f7 ff63 	bl	80010c0 <lcd_locate>
		lcd_printf("PID");
 80091fa:	487c      	ldr	r0, [pc, #496]	; (80093ec <cppLoop+0x1a54>)
 80091fc:	f7f7 ff8a 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8009200:	2101      	movs	r1, #1
 8009202:	2000      	movs	r0, #0
 8009204:	f7f7 ff5c 	bl	80010c0 <lcd_locate>
		lcd_printf("Response");
 8009208:	4879      	ldr	r0, [pc, #484]	; (80093f0 <cppLoop+0x1a58>)
 800920a:	f7f7 ff83 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800920e:	4875      	ldr	r0, [pc, #468]	; (80093e4 <cppLoop+0x1a4c>)
 8009210:	f7f8 ffac 	bl	800216c <_ZN8JoyStick8getValueEv>
 8009214:	4603      	mov	r3, r0
 8009216:	2b02      	cmp	r3, #2
 8009218:	bf0c      	ite	eq
 800921a:	2301      	moveq	r3, #1
 800921c:	2300      	movne	r3, #0
 800921e:	b2db      	uxtb	r3, r3
 8009220:	2b00      	cmp	r3, #0
 8009222:	f000 817e 	beq.w	8009522 <cppLoop+0x1b8a>
			HAL_Delay(1500);
 8009226:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800922a:	f000 faa5 	bl	8009778 <HAL_Delay>
			led.LR(-1, 1);
 800922e:	2201      	movs	r2, #1
 8009230:	f04f 31ff 	mov.w	r1, #4294967295
 8009234:	4868      	ldr	r0, [pc, #416]	; (80093d8 <cppLoop+0x1a40>)
 8009236:	f7f9 f8b9 	bl	80023ac <_ZN3LED2LREaa>

			logger.start();
 800923a:	486e      	ldr	r0, [pc, #440]	; (80093f4 <cppLoop+0x1a5c>)
 800923c:	f7fb fd49 	bl	8004cd2 <_ZN6Logger5startEv>
			velocity_ctrl.start();
 8009240:	486d      	ldr	r0, [pc, #436]	; (80093f8 <cppLoop+0x1a60>)
 8009242:	f7fc fcfe 	bl	8005c42 <_ZN12VelocityCtrl5startEv>
			velocity_ctrl.setVelocity(0, 3.14);
 8009246:	eddf 0a6d 	vldr	s1, [pc, #436]	; 80093fc <cppLoop+0x1a64>
 800924a:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8009400 <cppLoop+0x1a68>
 800924e:	486a      	ldr	r0, [pc, #424]	; (80093f8 <cppLoop+0x1a60>)
 8009250:	f7fc fc8a 	bl	8005b68 <_ZN12VelocityCtrl11setVelocityEff>

			HAL_Delay(1000);
 8009254:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009258:	f000 fa8e 	bl	8009778 <HAL_Delay>

			logger.stop();
 800925c:	4865      	ldr	r0, [pc, #404]	; (80093f4 <cppLoop+0x1a5c>)
 800925e:	f7fb fd48 	bl	8004cf2 <_ZN6Logger4stopEv>
			velocity_ctrl.stop();
 8009262:	4865      	ldr	r0, [pc, #404]	; (80093f8 <cppLoop+0x1a60>)
 8009264:	f7fc fd00 	bl	8005c68 <_ZN12VelocityCtrl4stopEv>

			logger.saveLogs("SYSIDENT", "PIDRES.txt");
 8009268:	4a66      	ldr	r2, [pc, #408]	; (8009404 <cppLoop+0x1a6c>)
 800926a:	4967      	ldr	r1, [pc, #412]	; (8009408 <cppLoop+0x1a70>)
 800926c:	4861      	ldr	r0, [pc, #388]	; (80093f4 <cppLoop+0x1a5c>)
 800926e:	f7fb fc11 	bl	8004a94 <_ZN6Logger8saveLogsEPKcS1_>

			led.LR(-1, 0);
 8009272:	2200      	movs	r2, #0
 8009274:	f04f 31ff 	mov.w	r1, #4294967295
 8009278:	4857      	ldr	r0, [pc, #348]	; (80093d8 <cppLoop+0x1a40>)
 800927a:	f7f9 f897 	bl	80023ac <_ZN3LED2LREaa>
		}
		break;
 800927e:	e150      	b.n	8009522 <cppLoop+0x1b8a>

	case 13:

		led.fullColor('~');
 8009280:	217e      	movs	r1, #126	; 0x7e
 8009282:	4855      	ldr	r0, [pc, #340]	; (80093d8 <cppLoop+0x1a40>)
 8009284:	f7f8 ffd6 	bl	8002234 <_ZN3LED9fullColorEc>

		lcd_clear();
 8009288:	f7f7 ff0a 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800928c:	2100      	movs	r1, #0
 800928e:	2000      	movs	r0, #0
 8009290:	f7f7 ff16 	bl	80010c0 <lcd_locate>
		lcd_printf("Steer");
 8009294:	485d      	ldr	r0, [pc, #372]	; (800940c <cppLoop+0x1a74>)
 8009296:	f7f7 ff3d 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800929a:	2101      	movs	r1, #1
 800929c:	2000      	movs	r0, #0
 800929e:	f7f7 ff0f 	bl	80010c0 <lcd_locate>
		lcd_printf("Trace");
 80092a2:	485b      	ldr	r0, [pc, #364]	; (8009410 <cppLoop+0x1a78>)
 80092a4:	f7f7 ff36 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80092a8:	484e      	ldr	r0, [pc, #312]	; (80093e4 <cppLoop+0x1a4c>)
 80092aa:	f7f8 ff5f 	bl	800216c <_ZN8JoyStick8getValueEv>
 80092ae:	4603      	mov	r3, r0
 80092b0:	2b02      	cmp	r3, #2
 80092b2:	bf0c      	ite	eq
 80092b4:	2301      	moveq	r3, #1
 80092b6:	2300      	movne	r3, #0
 80092b8:	b2db      	uxtb	r3, r3
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	f000 8133 	beq.w	8009526 <cppLoop+0x1b8e>
			HAL_Delay(500);
 80092c0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80092c4:	f000 fa58 	bl	8009778 <HAL_Delay>

			line_trace.setTargetVelocity(0.3);
 80092c8:	ed9f 0a52 	vldr	s0, [pc, #328]	; 8009414 <cppLoop+0x1a7c>
 80092cc:	4852      	ldr	r0, [pc, #328]	; (8009418 <cppLoop+0x1a80>)
 80092ce:	f7fa fcba 	bl	8003c46 <_ZN9LineTrace17setTargetVelocityEf>
			led.LR(1, -1);
 80092d2:	f04f 32ff 	mov.w	r2, #4294967295
 80092d6:	2101      	movs	r1, #1
 80092d8:	483f      	ldr	r0, [pc, #252]	; (80093d8 <cppLoop+0x1a40>)
 80092da:	f7f9 f867 	bl	80023ac <_ZN3LED2LREaa>

			logger.resetIdx();
 80092de:	4845      	ldr	r0, [pc, #276]	; (80093f4 <cppLoop+0x1a5c>)
 80092e0:	f7fb fce1 	bl	8004ca6 <_ZN6Logger8resetIdxEv>
			line_trace.setMode(FIRST_RUNNING);
 80092e4:	2100      	movs	r1, #0
 80092e6:	484c      	ldr	r0, [pc, #304]	; (8009418 <cppLoop+0x1a80>)
 80092e8:	f7fa fef2 	bl	80040d0 <_ZN9LineTrace7setModeEs>
			logger.start();
 80092ec:	4841      	ldr	r0, [pc, #260]	; (80093f4 <cppLoop+0x1a5c>)
 80092ee:	f7fb fcf0 	bl	8004cd2 <_ZN6Logger5startEv>
			line_trace.running();
 80092f2:	4849      	ldr	r0, [pc, #292]	; (8009418 <cppLoop+0x1a80>)
 80092f4:	f7fa ff2a 	bl	800414c <_ZN9LineTrace7runningEv>
			logger.stop();
 80092f8:	483e      	ldr	r0, [pc, #248]	; (80093f4 <cppLoop+0x1a5c>)
 80092fa:	f7fb fcfa 	bl	8004cf2 <_ZN6Logger4stopEv>

			logger.saveLogs("STATELOG", "COMEGA.TXT");
 80092fe:	4a47      	ldr	r2, [pc, #284]	; (800941c <cppLoop+0x1a84>)
 8009300:	4947      	ldr	r1, [pc, #284]	; (8009420 <cppLoop+0x1a88>)
 8009302:	483c      	ldr	r0, [pc, #240]	; (80093f4 <cppLoop+0x1a5c>)
 8009304:	f7fb fbc6 	bl	8004a94 <_ZN6Logger8saveLogsEPKcS1_>
			logger.saveLogs2("STATELOG", "TOMEGA.TXT");
 8009308:	4a46      	ldr	r2, [pc, #280]	; (8009424 <cppLoop+0x1a8c>)
 800930a:	4945      	ldr	r1, [pc, #276]	; (8009420 <cppLoop+0x1a88>)
 800930c:	4839      	ldr	r0, [pc, #228]	; (80093f4 <cppLoop+0x1a5c>)
 800930e:	f7fb fbd5 	bl	8004abc <_ZN6Logger9saveLogs2EPKcS1_>

			led.LR(0, -1);
 8009312:	f04f 32ff 	mov.w	r2, #4294967295
 8009316:	2100      	movs	r1, #0
 8009318:	482f      	ldr	r0, [pc, #188]	; (80093d8 <cppLoop+0x1a40>)
 800931a:	f7f9 f847 	bl	80023ac <_ZN3LED2LREaa>
			sys_ident.inOutputSave();

			led.LR(-1, 0);
		}
		*/
		break;
 800931e:	e102      	b.n	8009526 <cppLoop+0x1b8e>

	case 14:
		led.fullColor('W');
 8009320:	2157      	movs	r1, #87	; 0x57
 8009322:	482d      	ldr	r0, [pc, #180]	; (80093d8 <cppLoop+0x1a40>)
 8009324:	f7f8 ff86 	bl	8002234 <_ZN3LED9fullColorEc>

		lcd_clear();
 8009328:	f7f7 feba 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800932c:	2100      	movs	r1, #0
 800932e:	2000      	movs	r0, #0
 8009330:	f7f7 fec6 	bl	80010c0 <lcd_locate>
		lcd_printf("LogRun2    ");
 8009334:	483c      	ldr	r0, [pc, #240]	; (8009428 <cppLoop+0x1a90>)
 8009336:	f7f7 feed 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 800933a:	2101      	movs	r1, #1
 800933c:	2000      	movs	r0, #0
 800933e:	f7f7 febf 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity2);
 8009342:	4b3a      	ldr	r3, [pc, #232]	; (800942c <cppLoop+0x1a94>)
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	4618      	mov	r0, r3
 8009348:	f7f7 f916 	bl	8000578 <__aeabi_f2d>
 800934c:	4603      	mov	r3, r0
 800934e:	460c      	mov	r4, r1
 8009350:	461a      	mov	r2, r3
 8009352:	4623      	mov	r3, r4
 8009354:	4836      	ldr	r0, [pc, #216]	; (8009430 <cppLoop+0x1a98>)
 8009356:	f7f7 fedd 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 800935a:	4822      	ldr	r0, [pc, #136]	; (80093e4 <cppLoop+0x1a4c>)
 800935c:	f7f8 ff06 	bl	800216c <_ZN8JoyStick8getValueEv>
 8009360:	4603      	mov	r3, r0
 8009362:	2b02      	cmp	r3, #2
 8009364:	bf0c      	ite	eq
 8009366:	2301      	moveq	r3, #1
 8009368:	2300      	movne	r3, #0
 800936a:	b2db      	uxtb	r3, r3
 800936c:	2b00      	cmp	r3, #0
 800936e:	f000 80dc 	beq.w	800952a <cppLoop+0x1b92>
			HAL_Delay(500);
 8009372:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009376:	f000 f9ff 	bl	8009778 <HAL_Delay>

			led.LR(1, -1);
 800937a:	f04f 32ff 	mov.w	r2, #4294967295
 800937e:	2101      	movs	r1, #1
 8009380:	4815      	ldr	r0, [pc, #84]	; (80093d8 <cppLoop+0x1a40>)
 8009382:	f7f9 f813 	bl	80023ac <_ZN3LED2LREaa>
			line_trace.setMode(THIRD_RUNNING);
 8009386:	2102      	movs	r1, #2
 8009388:	4823      	ldr	r0, [pc, #140]	; (8009418 <cppLoop+0x1a80>)
 800938a:	f7fa fea1 	bl	80040d0 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity2);
 800938e:	4b29      	ldr	r3, [pc, #164]	; (8009434 <cppLoop+0x1a9c>)
 8009390:	edd3 7a00 	vldr	s15, [r3]
 8009394:	eeb0 0a67 	vmov.f32	s0, s15
 8009398:	481f      	ldr	r0, [pc, #124]	; (8009418 <cppLoop+0x1a80>)
 800939a:	f7fa fc54 	bl	8003c46 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity2);
 800939e:	4b23      	ldr	r3, [pc, #140]	; (800942c <cppLoop+0x1a94>)
 80093a0:	edd3 7a00 	vldr	s15, [r3]
 80093a4:	eeb0 0a67 	vmov.f32	s0, s15
 80093a8:	481b      	ldr	r0, [pc, #108]	; (8009418 <cppLoop+0x1a80>)
 80093aa:	f7fa fc5c 	bl	8003c66 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_max_velocity2);
 80093ae:	4b1f      	ldr	r3, [pc, #124]	; (800942c <cppLoop+0x1a94>)
 80093b0:	edd3 7a00 	vldr	s15, [r3]
 80093b4:	eeb0 0a67 	vmov.f32	s0, s15
 80093b8:	4817      	ldr	r0, [pc, #92]	; (8009418 <cppLoop+0x1a80>)
 80093ba:	f7fa fc74 	bl	8003ca6 <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 80093be:	4816      	ldr	r0, [pc, #88]	; (8009418 <cppLoop+0x1a80>)
 80093c0:	f7fb f87c 	bl	80044bc <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			line_trace.running();
 80093c4:	4814      	ldr	r0, [pc, #80]	; (8009418 <cppLoop+0x1a80>)
 80093c6:	f7fa fec1 	bl	800414c <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 80093ca:	f04f 32ff 	mov.w	r2, #4294967295
 80093ce:	2100      	movs	r1, #0
 80093d0:	4801      	ldr	r0, [pc, #4]	; (80093d8 <cppLoop+0x1a40>)
 80093d2:	f7f8 ffeb 	bl	80023ac <_ZN3LED2LREaa>
		}

		break;
 80093d6:	e0a8      	b.n	800952a <cppLoop+0x1b92>
 80093d8:	20000604 	.word	0x20000604
 80093dc:	08019bb4 	.word	0x08019bb4
 80093e0:	08019bb8 	.word	0x08019bb8
 80093e4:	200005f8 	.word	0x200005f8
 80093e8:	2001db90 	.word	0x2001db90
 80093ec:	08019bc0 	.word	0x08019bc0
 80093f0:	08019bc4 	.word	0x08019bc4
 80093f4:	20000628 	.word	0x20000628
 80093f8:	2001db14 	.word	0x2001db14
 80093fc:	4048f5c3 	.word	0x4048f5c3
 8009400:	00000000 	.word	0x00000000
 8009404:	08019bd0 	.word	0x08019bd0
 8009408:	08019bdc 	.word	0x08019bdc
 800940c:	08019be8 	.word	0x08019be8
 8009410:	08019bf0 	.word	0x08019bf0
 8009414:	3e99999a 	.word	0x3e99999a
 8009418:	2001db94 	.word	0x2001db94
 800941c:	08019bf8 	.word	0x08019bf8
 8009420:	08019aa4 	.word	0x08019aa4
 8009424:	08019c04 	.word	0x08019c04
 8009428:	08019c10 	.word	0x08019c10
 800942c:	200422a0 	.word	0x200422a0
 8009430:	08019a8c 	.word	0x08019a8c
 8009434:	200422b0 	.word	0x200422b0

	case 15:
		led.fullColor('W');
 8009438:	2157      	movs	r1, #87	; 0x57
 800943a:	4841      	ldr	r0, [pc, #260]	; (8009540 <cppLoop+0x1ba8>)
 800943c:	f7f8 fefa 	bl	8002234 <_ZN3LED9fullColorEc>

		lcd_clear();
 8009440:	f7f7 fe2e 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8009444:	2100      	movs	r1, #0
 8009446:	2000      	movs	r0, #0
 8009448:	f7f7 fe3a 	bl	80010c0 <lcd_locate>
		lcd_printf("LogRun1    ");
 800944c:	483d      	ldr	r0, [pc, #244]	; (8009544 <cppLoop+0x1bac>)
 800944e:	f7f7 fe61 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8009452:	2101      	movs	r1, #1
 8009454:	2000      	movs	r0, #0
 8009456:	f7f7 fe33 	bl	80010c0 <lcd_locate>
		lcd_printf("Start%3.1f", adj_max_velocity);
 800945a:	4b3b      	ldr	r3, [pc, #236]	; (8009548 <cppLoop+0x1bb0>)
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	4618      	mov	r0, r3
 8009460:	f7f7 f88a 	bl	8000578 <__aeabi_f2d>
 8009464:	4603      	mov	r3, r0
 8009466:	460c      	mov	r4, r1
 8009468:	461a      	mov	r2, r3
 800946a:	4623      	mov	r3, r4
 800946c:	4837      	ldr	r0, [pc, #220]	; (800954c <cppLoop+0x1bb4>)
 800946e:	f7f7 fe51 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8009472:	4837      	ldr	r0, [pc, #220]	; (8009550 <cppLoop+0x1bb8>)
 8009474:	f7f8 fe7a 	bl	800216c <_ZN8JoyStick8getValueEv>
 8009478:	4603      	mov	r3, r0
 800947a:	2b02      	cmp	r3, #2
 800947c:	bf0c      	ite	eq
 800947e:	2301      	moveq	r3, #1
 8009480:	2300      	movne	r3, #0
 8009482:	b2db      	uxtb	r3, r3
 8009484:	2b00      	cmp	r3, #0
 8009486:	d052      	beq.n	800952e <cppLoop+0x1b96>
			HAL_Delay(500);
 8009488:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800948c:	f000 f974 	bl	8009778 <HAL_Delay>

			led.LR(1, -1);
 8009490:	f04f 32ff 	mov.w	r2, #4294967295
 8009494:	2101      	movs	r1, #1
 8009496:	482a      	ldr	r0, [pc, #168]	; (8009540 <cppLoop+0x1ba8>)
 8009498:	f7f8 ff88 	bl	80023ac <_ZN3LED2LREaa>
			line_trace.setMode(SECOND_RUNNING);
 800949c:	2101      	movs	r1, #1
 800949e:	482d      	ldr	r0, [pc, #180]	; (8009554 <cppLoop+0x1bbc>)
 80094a0:	f7fa fe16 	bl	80040d0 <_ZN9LineTrace7setModeEs>
			line_trace.setTargetVelocity(adj_min_velocity);
 80094a4:	4b2c      	ldr	r3, [pc, #176]	; (8009558 <cppLoop+0x1bc0>)
 80094a6:	edd3 7a00 	vldr	s15, [r3]
 80094aa:	eeb0 0a67 	vmov.f32	s0, s15
 80094ae:	4829      	ldr	r0, [pc, #164]	; (8009554 <cppLoop+0x1bbc>)
 80094b0:	f7fa fbc9 	bl	8003c46 <_ZN9LineTrace17setTargetVelocityEf>
			line_trace.setMaxVelocity(adj_max_velocity);
 80094b4:	4b24      	ldr	r3, [pc, #144]	; (8009548 <cppLoop+0x1bb0>)
 80094b6:	edd3 7a00 	vldr	s15, [r3]
 80094ba:	eeb0 0a67 	vmov.f32	s0, s15
 80094be:	4825      	ldr	r0, [pc, #148]	; (8009554 <cppLoop+0x1bbc>)
 80094c0:	f7fa fbd1 	bl	8003c66 <_ZN9LineTrace14setMaxVelocityEf>
			line_trace.setMinVelocity(adj_min_velocity);
 80094c4:	4b24      	ldr	r3, [pc, #144]	; (8009558 <cppLoop+0x1bc0>)
 80094c6:	edd3 7a00 	vldr	s15, [r3]
 80094ca:	eeb0 0a67 	vmov.f32	s0, s15
 80094ce:	4821      	ldr	r0, [pc, #132]	; (8009554 <cppLoop+0x1bbc>)
 80094d0:	f7fa fbe9 	bl	8003ca6 <_ZN9LineTrace14setMinVelocityEf>
			line_trace.createVelocityTabeleFromSD();
 80094d4:	481f      	ldr	r0, [pc, #124]	; (8009554 <cppLoop+0x1bbc>)
 80094d6:	f7fa fff1 	bl	80044bc <_ZN9LineTrace26createVelocityTabeleFromSDEv>

			line_trace.running();
 80094da:	481e      	ldr	r0, [pc, #120]	; (8009554 <cppLoop+0x1bbc>)
 80094dc:	f7fa fe36 	bl	800414c <_ZN9LineTrace7runningEv>

			led.LR(0, -1);
 80094e0:	f04f 32ff 	mov.w	r2, #4294967295
 80094e4:	2100      	movs	r1, #0
 80094e6:	4816      	ldr	r0, [pc, #88]	; (8009540 <cppLoop+0x1ba8>)
 80094e8:	f7f8 ff60 	bl	80023ac <_ZN3LED2LREaa>
		}
		break;
 80094ec:	e01f      	b.n	800952e <cppLoop+0x1b96>

	default:
		break;
 80094ee:	bf00      	nop
 80094f0:	e01e      	b.n	8009530 <cppLoop+0x1b98>
		break;
 80094f2:	bf00      	nop
 80094f4:	e01c      	b.n	8009530 <cppLoop+0x1b98>
		break;
 80094f6:	bf00      	nop
 80094f8:	e01a      	b.n	8009530 <cppLoop+0x1b98>
		break;
 80094fa:	bf00      	nop
 80094fc:	e018      	b.n	8009530 <cppLoop+0x1b98>
		break;
 80094fe:	bf00      	nop
 8009500:	e016      	b.n	8009530 <cppLoop+0x1b98>
		break;
 8009502:	bf00      	nop
 8009504:	e014      	b.n	8009530 <cppLoop+0x1b98>
		break;
 8009506:	bf00      	nop
 8009508:	e012      	b.n	8009530 <cppLoop+0x1b98>
		break;
 800950a:	bf00      	nop
 800950c:	e010      	b.n	8009530 <cppLoop+0x1b98>
		break;
 800950e:	bf00      	nop
 8009510:	e00e      	b.n	8009530 <cppLoop+0x1b98>
		break;
 8009512:	bf00      	nop
 8009514:	e00c      	b.n	8009530 <cppLoop+0x1b98>
		break;
 8009516:	bf00      	nop
 8009518:	e00a      	b.n	8009530 <cppLoop+0x1b98>
		break;
 800951a:	bf00      	nop
 800951c:	e008      	b.n	8009530 <cppLoop+0x1b98>
		break;
 800951e:	bf00      	nop
 8009520:	e006      	b.n	8009530 <cppLoop+0x1b98>
		break;
 8009522:	bf00      	nop
 8009524:	e004      	b.n	8009530 <cppLoop+0x1b98>
		break;
 8009526:	bf00      	nop
 8009528:	e002      	b.n	8009530 <cppLoop+0x1b98>
		break;
 800952a:	bf00      	nop
 800952c:	e000      	b.n	8009530 <cppLoop+0x1b98>
		break;
 800952e:	bf00      	nop

	}

	HAL_Delay(30);
 8009530:	201e      	movs	r0, #30
 8009532:	f000 f921 	bl	8009778 <HAL_Delay>

}
 8009536:	bf00      	nop
 8009538:	370c      	adds	r7, #12
 800953a:	46bd      	mov	sp, r7
 800953c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800953e:	bf00      	nop
 8009540:	20000604 	.word	0x20000604
 8009544:	08019c1c 	.word	0x08019c1c
 8009548:	20042298 	.word	0x20042298
 800954c:	08019a8c 	.word	0x08019a8c
 8009550:	200005f8 	.word	0x200005f8
 8009554:	2001db94 	.word	0x2001db94
 8009558:	200422a8 	.word	0x200422a8

0800955c <_Z41__static_initialization_and_destruction_0ii>:

void prameterSttingMode()
{

}
 800955c:	b580      	push	{r7, lr}
 800955e:	b088      	sub	sp, #32
 8009560:	af06      	add	r7, sp, #24
 8009562:	6078      	str	r0, [r7, #4]
 8009564:	6039      	str	r1, [r7, #0]
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	2b01      	cmp	r3, #1
 800956a:	d142      	bne.n	80095f2 <_Z41__static_initialization_and_destruction_0ii+0x96>
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009572:	4293      	cmp	r3, r2
 8009574:	d13d      	bne.n	80095f2 <_Z41__static_initialization_and_destruction_0ii+0x96>
LineSensor line_sensor;
 8009576:	4821      	ldr	r0, [pc, #132]	; (80095fc <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8009578:	f7f8 ff50 	bl	800241c <_ZN10LineSensorC1Ev>
SideSensor side_sensor;
 800957c:	4820      	ldr	r0, [pc, #128]	; (8009600 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 800957e:	f7fb ffb7 	bl	80054f0 <_ZN10SideSensorC1Ev>
JoyStick joy_stick;
 8009582:	4820      	ldr	r0, [pc, #128]	; (8009604 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8009584:	f7f8 fde6 	bl	8002154 <_ZN8JoyStickC1Ev>
Motor motor;
 8009588:	481f      	ldr	r0, [pc, #124]	; (8009608 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 800958a:	f7fb fbc2 	bl	8004d12 <_ZN5MotorC1Ev>
IMU imu;
 800958e:	481f      	ldr	r0, [pc, #124]	; (800960c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8009590:	f7f8 fbec 	bl	8001d6c <_ZN3IMUC1Ev>
Logger logger;
 8009594:	481e      	ldr	r0, [pc, #120]	; (8009610 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8009596:	f7fb f881 	bl	800469c <_ZN6LoggerC1Ev>
Encoder encoder;
 800959a:	481e      	ldr	r0, [pc, #120]	; (8009614 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 800959c:	f7f7 ff16 	bl	80013cc <_ZN7EncoderC1Ev>
VelocityCtrl velocity_ctrl(&motor, &encoder, &imu);
 80095a0:	4b1a      	ldr	r3, [pc, #104]	; (800960c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80095a2:	4a1c      	ldr	r2, [pc, #112]	; (8009614 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 80095a4:	4918      	ldr	r1, [pc, #96]	; (8009608 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80095a6:	481c      	ldr	r0, [pc, #112]	; (8009618 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 80095a8:	f7fc f9b0 	bl	800590c <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>
Odometry odometry(&encoder, &imu, &velocity_ctrl);
 80095ac:	4b1a      	ldr	r3, [pc, #104]	; (8009618 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 80095ae:	4a17      	ldr	r2, [pc, #92]	; (800960c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80095b0:	4918      	ldr	r1, [pc, #96]	; (8009614 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 80095b2:	481a      	ldr	r0, [pc, #104]	; (800961c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 80095b4:	f7fb fcac 	bl	8004f10 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>
ESC esc;
 80095b8:	4819      	ldr	r0, [pc, #100]	; (8009620 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 80095ba:	f7f7 fe0b 	bl	80011d4 <_ZN3ESCC1Ev>
LineTrace line_trace(&motor, &line_sensor, &velocity_ctrl, &side_sensor, &encoder, &odometry, &logger, &imu, &esc);
 80095be:	4b18      	ldr	r3, [pc, #96]	; (8009620 <_Z41__static_initialization_and_destruction_0ii+0xc4>)
 80095c0:	9305      	str	r3, [sp, #20]
 80095c2:	4b12      	ldr	r3, [pc, #72]	; (800960c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80095c4:	9304      	str	r3, [sp, #16]
 80095c6:	4b12      	ldr	r3, [pc, #72]	; (8009610 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 80095c8:	9303      	str	r3, [sp, #12]
 80095ca:	4b14      	ldr	r3, [pc, #80]	; (800961c <_Z41__static_initialization_and_destruction_0ii+0xc0>)
 80095cc:	9302      	str	r3, [sp, #8]
 80095ce:	4b11      	ldr	r3, [pc, #68]	; (8009614 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 80095d0:	9301      	str	r3, [sp, #4]
 80095d2:	4b0b      	ldr	r3, [pc, #44]	; (8009600 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 80095d4:	9300      	str	r3, [sp, #0]
 80095d6:	4b10      	ldr	r3, [pc, #64]	; (8009618 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 80095d8:	4a08      	ldr	r2, [pc, #32]	; (80095fc <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 80095da:	490b      	ldr	r1, [pc, #44]	; (8009608 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80095dc:	4811      	ldr	r0, [pc, #68]	; (8009624 <_Z41__static_initialization_and_destruction_0ii+0xc8>)
 80095de:	f7f9 fa6d 	bl	8002abc <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrlP10SideSensorP7EncoderP8OdometryP6LoggerP3IMUP3ESC>
SystemIdentification sys_ident(&logger, &motor);
 80095e2:	4a09      	ldr	r2, [pc, #36]	; (8009608 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80095e4:	490a      	ldr	r1, [pc, #40]	; (8009610 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 80095e6:	4810      	ldr	r0, [pc, #64]	; (8009628 <_Z41__static_initialization_and_destruction_0ii+0xcc>)
 80095e8:	f7fc f8f0 	bl	80057cc <_ZN20SystemIdentificationC1EP6LoggerP5Motor>
PathFollowing path_following;
 80095ec:	480f      	ldr	r0, [pc, #60]	; (800962c <_Z41__static_initialization_and_destruction_0ii+0xd0>)
 80095ee:	f7fb fe11 	bl	8005214 <_ZN13PathFollowingC1Ev>
}
 80095f2:	bf00      	nop
 80095f4:	3708      	adds	r7, #8
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bd80      	pop	{r7, pc}
 80095fa:	bf00      	nop
 80095fc:	200002f4 	.word	0x200002f4
 8009600:	200005ec 	.word	0x200005ec
 8009604:	200005f8 	.word	0x200005f8
 8009608:	20000600 	.word	0x20000600
 800960c:	20000614 	.word	0x20000614
 8009610:	20000628 	.word	0x20000628
 8009614:	2001daf4 	.word	0x2001daf4
 8009618:	2001db14 	.word	0x2001db14
 800961c:	2001db50 	.word	0x2001db50
 8009620:	2001db90 	.word	0x2001db90
 8009624:	2001db94 	.word	0x2001db94
 8009628:	2002a930 	.word	0x2002a930
 800962c:	2002ab40 	.word	0x2002ab40

08009630 <_GLOBAL__sub_I_line_sensor>:
 8009630:	b580      	push	{r7, lr}
 8009632:	af00      	add	r7, sp, #0
 8009634:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009638:	2001      	movs	r0, #1
 800963a:	f7ff ff8f 	bl	800955c <_Z41__static_initialization_and_destruction_0ii>
 800963e:	bd80      	pop	{r7, pc}

08009640 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8009640:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009678 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8009644:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8009646:	e003      	b.n	8009650 <LoopCopyDataInit>

08009648 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8009648:	4b0c      	ldr	r3, [pc, #48]	; (800967c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800964a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800964c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800964e:	3104      	adds	r1, #4

08009650 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8009650:	480b      	ldr	r0, [pc, #44]	; (8009680 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8009652:	4b0c      	ldr	r3, [pc, #48]	; (8009684 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8009654:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8009656:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8009658:	d3f6      	bcc.n	8009648 <CopyDataInit>
  ldr  r2, =_sbss
 800965a:	4a0b      	ldr	r2, [pc, #44]	; (8009688 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800965c:	e002      	b.n	8009664 <LoopFillZerobss>

0800965e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800965e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8009660:	f842 3b04 	str.w	r3, [r2], #4

08009664 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8009664:	4b09      	ldr	r3, [pc, #36]	; (800968c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8009666:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8009668:	d3f9      	bcc.n	800965e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800966a:	f7fe f85b 	bl	8007724 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800966e:	f00b fdd3 	bl	8015218 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009672:	f7fc fb95 	bl	8005da0 <main>
  bx  lr    
 8009676:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8009678:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 800967c:	0801a210 	.word	0x0801a210
  ldr  r0, =_sdata
 8009680:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8009684:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8009688:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 800968c:	20046cb8 	.word	0x20046cb8

08009690 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009690:	e7fe      	b.n	8009690 <ADC_IRQHandler>
	...

08009694 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8009698:	4b0e      	ldr	r3, [pc, #56]	; (80096d4 <HAL_Init+0x40>)
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	4a0d      	ldr	r2, [pc, #52]	; (80096d4 <HAL_Init+0x40>)
 800969e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80096a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80096a4:	4b0b      	ldr	r3, [pc, #44]	; (80096d4 <HAL_Init+0x40>)
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	4a0a      	ldr	r2, [pc, #40]	; (80096d4 <HAL_Init+0x40>)
 80096aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80096ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80096b0:	4b08      	ldr	r3, [pc, #32]	; (80096d4 <HAL_Init+0x40>)
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	4a07      	ldr	r2, [pc, #28]	; (80096d4 <HAL_Init+0x40>)
 80096b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80096ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80096bc:	2003      	movs	r0, #3
 80096be:	f000 fd51 	bl	800a164 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80096c2:	2000      	movs	r0, #0
 80096c4:	f000 f808 	bl	80096d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80096c8:	f7fd fa7c 	bl	8006bc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80096cc:	2300      	movs	r3, #0
}
 80096ce:	4618      	mov	r0, r3
 80096d0:	bd80      	pop	{r7, pc}
 80096d2:	bf00      	nop
 80096d4:	40023c00 	.word	0x40023c00

080096d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b082      	sub	sp, #8
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80096e0:	4b12      	ldr	r3, [pc, #72]	; (800972c <HAL_InitTick+0x54>)
 80096e2:	681a      	ldr	r2, [r3, #0]
 80096e4:	4b12      	ldr	r3, [pc, #72]	; (8009730 <HAL_InitTick+0x58>)
 80096e6:	781b      	ldrb	r3, [r3, #0]
 80096e8:	4619      	mov	r1, r3
 80096ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80096ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80096f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80096f6:	4618      	mov	r0, r3
 80096f8:	f000 fd69 	bl	800a1ce <HAL_SYSTICK_Config>
 80096fc:	4603      	mov	r3, r0
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d001      	beq.n	8009706 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8009702:	2301      	movs	r3, #1
 8009704:	e00e      	b.n	8009724 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2b0f      	cmp	r3, #15
 800970a:	d80a      	bhi.n	8009722 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800970c:	2200      	movs	r2, #0
 800970e:	6879      	ldr	r1, [r7, #4]
 8009710:	f04f 30ff 	mov.w	r0, #4294967295
 8009714:	f000 fd31 	bl	800a17a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009718:	4a06      	ldr	r2, [pc, #24]	; (8009734 <HAL_InitTick+0x5c>)
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800971e:	2300      	movs	r3, #0
 8009720:	e000      	b.n	8009724 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8009722:	2301      	movs	r3, #1
}
 8009724:	4618      	mov	r0, r3
 8009726:	3708      	adds	r7, #8
 8009728:	46bd      	mov	sp, r7
 800972a:	bd80      	pop	{r7, pc}
 800972c:	20000000 	.word	0x20000000
 8009730:	20000008 	.word	0x20000008
 8009734:	20000004 	.word	0x20000004

08009738 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009738:	b480      	push	{r7}
 800973a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800973c:	4b06      	ldr	r3, [pc, #24]	; (8009758 <HAL_IncTick+0x20>)
 800973e:	781b      	ldrb	r3, [r3, #0]
 8009740:	461a      	mov	r2, r3
 8009742:	4b06      	ldr	r3, [pc, #24]	; (800975c <HAL_IncTick+0x24>)
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	4413      	add	r3, r2
 8009748:	4a04      	ldr	r2, [pc, #16]	; (800975c <HAL_IncTick+0x24>)
 800974a:	6013      	str	r3, [r2, #0]
}
 800974c:	bf00      	nop
 800974e:	46bd      	mov	sp, r7
 8009750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009754:	4770      	bx	lr
 8009756:	bf00      	nop
 8009758:	20000008 	.word	0x20000008
 800975c:	20044c40 	.word	0x20044c40

08009760 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009760:	b480      	push	{r7}
 8009762:	af00      	add	r7, sp, #0
  return uwTick;
 8009764:	4b03      	ldr	r3, [pc, #12]	; (8009774 <HAL_GetTick+0x14>)
 8009766:	681b      	ldr	r3, [r3, #0]
}
 8009768:	4618      	mov	r0, r3
 800976a:	46bd      	mov	sp, r7
 800976c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009770:	4770      	bx	lr
 8009772:	bf00      	nop
 8009774:	20044c40 	.word	0x20044c40

08009778 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b084      	sub	sp, #16
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009780:	f7ff ffee 	bl	8009760 <HAL_GetTick>
 8009784:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009790:	d005      	beq.n	800979e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009792:	4b09      	ldr	r3, [pc, #36]	; (80097b8 <HAL_Delay+0x40>)
 8009794:	781b      	ldrb	r3, [r3, #0]
 8009796:	461a      	mov	r2, r3
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	4413      	add	r3, r2
 800979c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800979e:	bf00      	nop
 80097a0:	f7ff ffde 	bl	8009760 <HAL_GetTick>
 80097a4:	4602      	mov	r2, r0
 80097a6:	68bb      	ldr	r3, [r7, #8]
 80097a8:	1ad3      	subs	r3, r2, r3
 80097aa:	68fa      	ldr	r2, [r7, #12]
 80097ac:	429a      	cmp	r2, r3
 80097ae:	d8f7      	bhi.n	80097a0 <HAL_Delay+0x28>
  {
  }
}
 80097b0:	bf00      	nop
 80097b2:	3710      	adds	r7, #16
 80097b4:	46bd      	mov	sp, r7
 80097b6:	bd80      	pop	{r7, pc}
 80097b8:	20000008 	.word	0x20000008

080097bc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b084      	sub	sp, #16
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80097c4:	2300      	movs	r3, #0
 80097c6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d101      	bne.n	80097d2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80097ce:	2301      	movs	r3, #1
 80097d0:	e033      	b.n	800983a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d109      	bne.n	80097ee <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80097da:	6878      	ldr	r0, [r7, #4]
 80097dc:	f7fd fa1a 	bl	8006c14 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2200      	movs	r2, #0
 80097e4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2200      	movs	r2, #0
 80097ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097f2:	f003 0310 	and.w	r3, r3, #16
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d118      	bne.n	800982c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097fe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8009802:	f023 0302 	bic.w	r3, r3, #2
 8009806:	f043 0202 	orr.w	r2, r3, #2
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800980e:	6878      	ldr	r0, [r7, #4]
 8009810:	f000 fa5a 	bl	8009cc8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	2200      	movs	r2, #0
 8009818:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800981e:	f023 0303 	bic.w	r3, r3, #3
 8009822:	f043 0201 	orr.w	r2, r3, #1
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	641a      	str	r2, [r3, #64]	; 0x40
 800982a:	e001      	b.n	8009830 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800982c:	2301      	movs	r3, #1
 800982e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2200      	movs	r2, #0
 8009834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8009838:	7bfb      	ldrb	r3, [r7, #15]
}
 800983a:	4618      	mov	r0, r3
 800983c:	3710      	adds	r7, #16
 800983e:	46bd      	mov	sp, r7
 8009840:	bd80      	pop	{r7, pc}
	...

08009844 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b086      	sub	sp, #24
 8009848:	af00      	add	r7, sp, #0
 800984a:	60f8      	str	r0, [r7, #12]
 800984c:	60b9      	str	r1, [r7, #8]
 800984e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8009850:	2300      	movs	r3, #0
 8009852:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800985a:	2b01      	cmp	r3, #1
 800985c:	d101      	bne.n	8009862 <HAL_ADC_Start_DMA+0x1e>
 800985e:	2302      	movs	r3, #2
 8009860:	e0cc      	b.n	80099fc <HAL_ADC_Start_DMA+0x1b8>
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	2201      	movs	r2, #1
 8009866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	689b      	ldr	r3, [r3, #8]
 8009870:	f003 0301 	and.w	r3, r3, #1
 8009874:	2b01      	cmp	r3, #1
 8009876:	d018      	beq.n	80098aa <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	689a      	ldr	r2, [r3, #8]
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	f042 0201 	orr.w	r2, r2, #1
 8009886:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8009888:	4b5e      	ldr	r3, [pc, #376]	; (8009a04 <HAL_ADC_Start_DMA+0x1c0>)
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	4a5e      	ldr	r2, [pc, #376]	; (8009a08 <HAL_ADC_Start_DMA+0x1c4>)
 800988e:	fba2 2303 	umull	r2, r3, r2, r3
 8009892:	0c9a      	lsrs	r2, r3, #18
 8009894:	4613      	mov	r3, r2
 8009896:	005b      	lsls	r3, r3, #1
 8009898:	4413      	add	r3, r2
 800989a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800989c:	e002      	b.n	80098a4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800989e:	693b      	ldr	r3, [r7, #16]
 80098a0:	3b01      	subs	r3, #1
 80098a2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80098a4:	693b      	ldr	r3, [r7, #16]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d1f9      	bne.n	800989e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	689b      	ldr	r3, [r3, #8]
 80098b0:	f003 0301 	and.w	r3, r3, #1
 80098b4:	2b01      	cmp	r3, #1
 80098b6:	f040 80a0 	bne.w	80099fa <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098be:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80098c2:	f023 0301 	bic.w	r3, r3, #1
 80098c6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	685b      	ldr	r3, [r3, #4]
 80098d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d007      	beq.n	80098ec <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098e0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80098e4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80098f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098f8:	d106      	bne.n	8009908 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098fe:	f023 0206 	bic.w	r2, r3, #6
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	645a      	str	r2, [r3, #68]	; 0x44
 8009906:	e002      	b.n	800990e <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	2200      	movs	r2, #0
 800990c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	2200      	movs	r2, #0
 8009912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009916:	4b3d      	ldr	r3, [pc, #244]	; (8009a0c <HAL_ADC_Start_DMA+0x1c8>)
 8009918:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800991e:	4a3c      	ldr	r2, [pc, #240]	; (8009a10 <HAL_ADC_Start_DMA+0x1cc>)
 8009920:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009926:	4a3b      	ldr	r2, [pc, #236]	; (8009a14 <HAL_ADC_Start_DMA+0x1d0>)
 8009928:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800992e:	4a3a      	ldr	r2, [pc, #232]	; (8009a18 <HAL_ADC_Start_DMA+0x1d4>)
 8009930:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800993a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	685a      	ldr	r2, [r3, #4]
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800994a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	689a      	ldr	r2, [r3, #8]
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800995a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	334c      	adds	r3, #76	; 0x4c
 8009966:	4619      	mov	r1, r3
 8009968:	68ba      	ldr	r2, [r7, #8]
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	f000 fcea 	bl	800a344 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8009970:	697b      	ldr	r3, [r7, #20]
 8009972:	685b      	ldr	r3, [r3, #4]
 8009974:	f003 031f 	and.w	r3, r3, #31
 8009978:	2b00      	cmp	r3, #0
 800997a:	d12a      	bne.n	80099d2 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	4a26      	ldr	r2, [pc, #152]	; (8009a1c <HAL_ADC_Start_DMA+0x1d8>)
 8009982:	4293      	cmp	r3, r2
 8009984:	d015      	beq.n	80099b2 <HAL_ADC_Start_DMA+0x16e>
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	4a25      	ldr	r2, [pc, #148]	; (8009a20 <HAL_ADC_Start_DMA+0x1dc>)
 800998c:	4293      	cmp	r3, r2
 800998e:	d105      	bne.n	800999c <HAL_ADC_Start_DMA+0x158>
 8009990:	4b1e      	ldr	r3, [pc, #120]	; (8009a0c <HAL_ADC_Start_DMA+0x1c8>)
 8009992:	685b      	ldr	r3, [r3, #4]
 8009994:	f003 031f 	and.w	r3, r3, #31
 8009998:	2b00      	cmp	r3, #0
 800999a:	d00a      	beq.n	80099b2 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	4a20      	ldr	r2, [pc, #128]	; (8009a24 <HAL_ADC_Start_DMA+0x1e0>)
 80099a2:	4293      	cmp	r3, r2
 80099a4:	d129      	bne.n	80099fa <HAL_ADC_Start_DMA+0x1b6>
 80099a6:	4b19      	ldr	r3, [pc, #100]	; (8009a0c <HAL_ADC_Start_DMA+0x1c8>)
 80099a8:	685b      	ldr	r3, [r3, #4]
 80099aa:	f003 031f 	and.w	r3, r3, #31
 80099ae:	2b0f      	cmp	r3, #15
 80099b0:	d823      	bhi.n	80099fa <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	689b      	ldr	r3, [r3, #8]
 80099b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d11c      	bne.n	80099fa <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	689a      	ldr	r2, [r3, #8]
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80099ce:	609a      	str	r2, [r3, #8]
 80099d0:	e013      	b.n	80099fa <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	4a11      	ldr	r2, [pc, #68]	; (8009a1c <HAL_ADC_Start_DMA+0x1d8>)
 80099d8:	4293      	cmp	r3, r2
 80099da:	d10e      	bne.n	80099fa <HAL_ADC_Start_DMA+0x1b6>
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	689b      	ldr	r3, [r3, #8]
 80099e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d107      	bne.n	80099fa <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	689a      	ldr	r2, [r3, #8]
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80099f8:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80099fa:	2300      	movs	r3, #0
}
 80099fc:	4618      	mov	r0, r3
 80099fe:	3718      	adds	r7, #24
 8009a00:	46bd      	mov	sp, r7
 8009a02:	bd80      	pop	{r7, pc}
 8009a04:	20000000 	.word	0x20000000
 8009a08:	431bde83 	.word	0x431bde83
 8009a0c:	40012300 	.word	0x40012300
 8009a10:	08009ec1 	.word	0x08009ec1
 8009a14:	08009f7b 	.word	0x08009f7b
 8009a18:	08009f97 	.word	0x08009f97
 8009a1c:	40012000 	.word	0x40012000
 8009a20:	40012100 	.word	0x40012100
 8009a24:	40012200 	.word	0x40012200

08009a28 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8009a28:	b480      	push	{r7}
 8009a2a:	b083      	sub	sp, #12
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8009a30:	bf00      	nop
 8009a32:	370c      	adds	r7, #12
 8009a34:	46bd      	mov	sp, r7
 8009a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3a:	4770      	bx	lr

08009a3c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8009a3c:	b480      	push	{r7}
 8009a3e:	b083      	sub	sp, #12
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8009a44:	bf00      	nop
 8009a46:	370c      	adds	r7, #12
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4e:	4770      	bx	lr

08009a50 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8009a50:	b480      	push	{r7}
 8009a52:	b083      	sub	sp, #12
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8009a58:	bf00      	nop
 8009a5a:	370c      	adds	r7, #12
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a62:	4770      	bx	lr

08009a64 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8009a64:	b480      	push	{r7}
 8009a66:	b085      	sub	sp, #20
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
 8009a6c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8009a6e:	2300      	movs	r3, #0
 8009a70:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a78:	2b01      	cmp	r3, #1
 8009a7a:	d101      	bne.n	8009a80 <HAL_ADC_ConfigChannel+0x1c>
 8009a7c:	2302      	movs	r3, #2
 8009a7e:	e113      	b.n	8009ca8 <HAL_ADC_ConfigChannel+0x244>
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	2201      	movs	r2, #1
 8009a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	2b09      	cmp	r3, #9
 8009a8e:	d925      	bls.n	8009adc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	68d9      	ldr	r1, [r3, #12]
 8009a96:	683b      	ldr	r3, [r7, #0]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	b29b      	uxth	r3, r3
 8009a9c:	461a      	mov	r2, r3
 8009a9e:	4613      	mov	r3, r2
 8009aa0:	005b      	lsls	r3, r3, #1
 8009aa2:	4413      	add	r3, r2
 8009aa4:	3b1e      	subs	r3, #30
 8009aa6:	2207      	movs	r2, #7
 8009aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8009aac:	43da      	mvns	r2, r3
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	400a      	ands	r2, r1
 8009ab4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	68d9      	ldr	r1, [r3, #12]
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	689a      	ldr	r2, [r3, #8]
 8009ac0:	683b      	ldr	r3, [r7, #0]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	b29b      	uxth	r3, r3
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	4603      	mov	r3, r0
 8009aca:	005b      	lsls	r3, r3, #1
 8009acc:	4403      	add	r3, r0
 8009ace:	3b1e      	subs	r3, #30
 8009ad0:	409a      	lsls	r2, r3
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	430a      	orrs	r2, r1
 8009ad8:	60da      	str	r2, [r3, #12]
 8009ada:	e022      	b.n	8009b22 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	6919      	ldr	r1, [r3, #16]
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	b29b      	uxth	r3, r3
 8009ae8:	461a      	mov	r2, r3
 8009aea:	4613      	mov	r3, r2
 8009aec:	005b      	lsls	r3, r3, #1
 8009aee:	4413      	add	r3, r2
 8009af0:	2207      	movs	r2, #7
 8009af2:	fa02 f303 	lsl.w	r3, r2, r3
 8009af6:	43da      	mvns	r2, r3
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	400a      	ands	r2, r1
 8009afe:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	6919      	ldr	r1, [r3, #16]
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	689a      	ldr	r2, [r3, #8]
 8009b0a:	683b      	ldr	r3, [r7, #0]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	b29b      	uxth	r3, r3
 8009b10:	4618      	mov	r0, r3
 8009b12:	4603      	mov	r3, r0
 8009b14:	005b      	lsls	r3, r3, #1
 8009b16:	4403      	add	r3, r0
 8009b18:	409a      	lsls	r2, r3
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	430a      	orrs	r2, r1
 8009b20:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	685b      	ldr	r3, [r3, #4]
 8009b26:	2b06      	cmp	r3, #6
 8009b28:	d824      	bhi.n	8009b74 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	685a      	ldr	r2, [r3, #4]
 8009b34:	4613      	mov	r3, r2
 8009b36:	009b      	lsls	r3, r3, #2
 8009b38:	4413      	add	r3, r2
 8009b3a:	3b05      	subs	r3, #5
 8009b3c:	221f      	movs	r2, #31
 8009b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8009b42:	43da      	mvns	r2, r3
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	400a      	ands	r2, r1
 8009b4a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	b29b      	uxth	r3, r3
 8009b58:	4618      	mov	r0, r3
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	685a      	ldr	r2, [r3, #4]
 8009b5e:	4613      	mov	r3, r2
 8009b60:	009b      	lsls	r3, r3, #2
 8009b62:	4413      	add	r3, r2
 8009b64:	3b05      	subs	r3, #5
 8009b66:	fa00 f203 	lsl.w	r2, r0, r3
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	430a      	orrs	r2, r1
 8009b70:	635a      	str	r2, [r3, #52]	; 0x34
 8009b72:	e04c      	b.n	8009c0e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	685b      	ldr	r3, [r3, #4]
 8009b78:	2b0c      	cmp	r3, #12
 8009b7a:	d824      	bhi.n	8009bc6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	685a      	ldr	r2, [r3, #4]
 8009b86:	4613      	mov	r3, r2
 8009b88:	009b      	lsls	r3, r3, #2
 8009b8a:	4413      	add	r3, r2
 8009b8c:	3b23      	subs	r3, #35	; 0x23
 8009b8e:	221f      	movs	r2, #31
 8009b90:	fa02 f303 	lsl.w	r3, r2, r3
 8009b94:	43da      	mvns	r2, r3
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	400a      	ands	r2, r1
 8009b9c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	b29b      	uxth	r3, r3
 8009baa:	4618      	mov	r0, r3
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	685a      	ldr	r2, [r3, #4]
 8009bb0:	4613      	mov	r3, r2
 8009bb2:	009b      	lsls	r3, r3, #2
 8009bb4:	4413      	add	r3, r2
 8009bb6:	3b23      	subs	r3, #35	; 0x23
 8009bb8:	fa00 f203 	lsl.w	r2, r0, r3
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	430a      	orrs	r2, r1
 8009bc2:	631a      	str	r2, [r3, #48]	; 0x30
 8009bc4:	e023      	b.n	8009c0e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	685a      	ldr	r2, [r3, #4]
 8009bd0:	4613      	mov	r3, r2
 8009bd2:	009b      	lsls	r3, r3, #2
 8009bd4:	4413      	add	r3, r2
 8009bd6:	3b41      	subs	r3, #65	; 0x41
 8009bd8:	221f      	movs	r2, #31
 8009bda:	fa02 f303 	lsl.w	r3, r2, r3
 8009bde:	43da      	mvns	r2, r3
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	400a      	ands	r2, r1
 8009be6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009bee:	683b      	ldr	r3, [r7, #0]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	b29b      	uxth	r3, r3
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	683b      	ldr	r3, [r7, #0]
 8009bf8:	685a      	ldr	r2, [r3, #4]
 8009bfa:	4613      	mov	r3, r2
 8009bfc:	009b      	lsls	r3, r3, #2
 8009bfe:	4413      	add	r3, r2
 8009c00:	3b41      	subs	r3, #65	; 0x41
 8009c02:	fa00 f203 	lsl.w	r2, r0, r3
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	430a      	orrs	r2, r1
 8009c0c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009c0e:	4b29      	ldr	r3, [pc, #164]	; (8009cb4 <HAL_ADC_ConfigChannel+0x250>)
 8009c10:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	4a28      	ldr	r2, [pc, #160]	; (8009cb8 <HAL_ADC_ConfigChannel+0x254>)
 8009c18:	4293      	cmp	r3, r2
 8009c1a:	d10f      	bne.n	8009c3c <HAL_ADC_ConfigChannel+0x1d8>
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	2b12      	cmp	r3, #18
 8009c22:	d10b      	bne.n	8009c3c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	685b      	ldr	r3, [r3, #4]
 8009c28:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	685b      	ldr	r3, [r3, #4]
 8009c34:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	4a1d      	ldr	r2, [pc, #116]	; (8009cb8 <HAL_ADC_ConfigChannel+0x254>)
 8009c42:	4293      	cmp	r3, r2
 8009c44:	d12b      	bne.n	8009c9e <HAL_ADC_ConfigChannel+0x23a>
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	4a1c      	ldr	r2, [pc, #112]	; (8009cbc <HAL_ADC_ConfigChannel+0x258>)
 8009c4c:	4293      	cmp	r3, r2
 8009c4e:	d003      	beq.n	8009c58 <HAL_ADC_ConfigChannel+0x1f4>
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	2b11      	cmp	r3, #17
 8009c56:	d122      	bne.n	8009c9e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	685b      	ldr	r3, [r3, #4]
 8009c5c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	685b      	ldr	r3, [r3, #4]
 8009c68:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	4a11      	ldr	r2, [pc, #68]	; (8009cbc <HAL_ADC_ConfigChannel+0x258>)
 8009c76:	4293      	cmp	r3, r2
 8009c78:	d111      	bne.n	8009c9e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8009c7a:	4b11      	ldr	r3, [pc, #68]	; (8009cc0 <HAL_ADC_ConfigChannel+0x25c>)
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	4a11      	ldr	r2, [pc, #68]	; (8009cc4 <HAL_ADC_ConfigChannel+0x260>)
 8009c80:	fba2 2303 	umull	r2, r3, r2, r3
 8009c84:	0c9a      	lsrs	r2, r3, #18
 8009c86:	4613      	mov	r3, r2
 8009c88:	009b      	lsls	r3, r3, #2
 8009c8a:	4413      	add	r3, r2
 8009c8c:	005b      	lsls	r3, r3, #1
 8009c8e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8009c90:	e002      	b.n	8009c98 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8009c92:	68bb      	ldr	r3, [r7, #8]
 8009c94:	3b01      	subs	r3, #1
 8009c96:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8009c98:	68bb      	ldr	r3, [r7, #8]
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d1f9      	bne.n	8009c92 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8009ca6:	2300      	movs	r3, #0
}
 8009ca8:	4618      	mov	r0, r3
 8009caa:	3714      	adds	r7, #20
 8009cac:	46bd      	mov	sp, r7
 8009cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb2:	4770      	bx	lr
 8009cb4:	40012300 	.word	0x40012300
 8009cb8:	40012000 	.word	0x40012000
 8009cbc:	10000012 	.word	0x10000012
 8009cc0:	20000000 	.word	0x20000000
 8009cc4:	431bde83 	.word	0x431bde83

08009cc8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8009cc8:	b480      	push	{r7}
 8009cca:	b085      	sub	sp, #20
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009cd0:	4b79      	ldr	r3, [pc, #484]	; (8009eb8 <ADC_Init+0x1f0>)
 8009cd2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	685b      	ldr	r3, [r3, #4]
 8009cd8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	685a      	ldr	r2, [r3, #4]
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	685b      	ldr	r3, [r3, #4]
 8009ce8:	431a      	orrs	r2, r3
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	685a      	ldr	r2, [r3, #4]
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009cfc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	6859      	ldr	r1, [r3, #4]
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	691b      	ldr	r3, [r3, #16]
 8009d08:	021a      	lsls	r2, r3, #8
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	430a      	orrs	r2, r1
 8009d10:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	685a      	ldr	r2, [r3, #4]
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8009d20:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	6859      	ldr	r1, [r3, #4]
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	689a      	ldr	r2, [r3, #8]
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	430a      	orrs	r2, r1
 8009d32:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	689a      	ldr	r2, [r3, #8]
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009d42:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	6899      	ldr	r1, [r3, #8]
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	68da      	ldr	r2, [r3, #12]
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	430a      	orrs	r2, r1
 8009d54:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d5a:	4a58      	ldr	r2, [pc, #352]	; (8009ebc <ADC_Init+0x1f4>)
 8009d5c:	4293      	cmp	r3, r2
 8009d5e:	d022      	beq.n	8009da6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	689a      	ldr	r2, [r3, #8]
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009d6e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	6899      	ldr	r1, [r3, #8]
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	430a      	orrs	r2, r1
 8009d80:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	689a      	ldr	r2, [r3, #8]
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009d90:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	6899      	ldr	r1, [r3, #8]
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	430a      	orrs	r2, r1
 8009da2:	609a      	str	r2, [r3, #8]
 8009da4:	e00f      	b.n	8009dc6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	689a      	ldr	r2, [r3, #8]
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009db4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	689a      	ldr	r2, [r3, #8]
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009dc4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	689a      	ldr	r2, [r3, #8]
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	f022 0202 	bic.w	r2, r2, #2
 8009dd4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	6899      	ldr	r1, [r3, #8]
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	7e1b      	ldrb	r3, [r3, #24]
 8009de0:	005a      	lsls	r2, r3, #1
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	430a      	orrs	r2, r1
 8009de8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d01b      	beq.n	8009e2c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	685a      	ldr	r2, [r3, #4]
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009e02:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	685a      	ldr	r2, [r3, #4]
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8009e12:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	6859      	ldr	r1, [r3, #4]
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e1e:	3b01      	subs	r3, #1
 8009e20:	035a      	lsls	r2, r3, #13
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	430a      	orrs	r2, r1
 8009e28:	605a      	str	r2, [r3, #4]
 8009e2a:	e007      	b.n	8009e3c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	685a      	ldr	r2, [r3, #4]
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009e3a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8009e4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	69db      	ldr	r3, [r3, #28]
 8009e56:	3b01      	subs	r3, #1
 8009e58:	051a      	lsls	r2, r3, #20
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	430a      	orrs	r2, r1
 8009e60:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	689a      	ldr	r2, [r3, #8]
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8009e70:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	6899      	ldr	r1, [r3, #8]
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009e7e:	025a      	lsls	r2, r3, #9
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	430a      	orrs	r2, r1
 8009e86:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	689a      	ldr	r2, [r3, #8]
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009e96:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	6899      	ldr	r1, [r3, #8]
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	695b      	ldr	r3, [r3, #20]
 8009ea2:	029a      	lsls	r2, r3, #10
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	430a      	orrs	r2, r1
 8009eaa:	609a      	str	r2, [r3, #8]
}
 8009eac:	bf00      	nop
 8009eae:	3714      	adds	r7, #20
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb6:	4770      	bx	lr
 8009eb8:	40012300 	.word	0x40012300
 8009ebc:	0f000001 	.word	0x0f000001

08009ec0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b084      	sub	sp, #16
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ecc:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ed2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d13c      	bne.n	8009f54 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ede:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	689b      	ldr	r3, [r3, #8]
 8009eec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d12b      	bne.n	8009f4c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d127      	bne.n	8009f4c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f02:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d006      	beq.n	8009f18 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	689b      	ldr	r3, [r3, #8]
 8009f10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d119      	bne.n	8009f4c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	685a      	ldr	r2, [r3, #4]
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	f022 0220 	bic.w	r2, r2, #32
 8009f26:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f2c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d105      	bne.n	8009f4c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f44:	f043 0201 	orr.w	r2, r3, #1
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8009f4c:	68f8      	ldr	r0, [r7, #12]
 8009f4e:	f7ff fd6b 	bl	8009a28 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8009f52:	e00e      	b.n	8009f72 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f58:	f003 0310 	and.w	r3, r3, #16
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d003      	beq.n	8009f68 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8009f60:	68f8      	ldr	r0, [r7, #12]
 8009f62:	f7ff fd75 	bl	8009a50 <HAL_ADC_ErrorCallback>
}
 8009f66:	e004      	b.n	8009f72 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	4798      	blx	r3
}
 8009f72:	bf00      	nop
 8009f74:	3710      	adds	r7, #16
 8009f76:	46bd      	mov	sp, r7
 8009f78:	bd80      	pop	{r7, pc}

08009f7a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8009f7a:	b580      	push	{r7, lr}
 8009f7c:	b084      	sub	sp, #16
 8009f7e:	af00      	add	r7, sp, #0
 8009f80:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f86:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8009f88:	68f8      	ldr	r0, [r7, #12]
 8009f8a:	f7ff fd57 	bl	8009a3c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8009f8e:	bf00      	nop
 8009f90:	3710      	adds	r7, #16
 8009f92:	46bd      	mov	sp, r7
 8009f94:	bd80      	pop	{r7, pc}

08009f96 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8009f96:	b580      	push	{r7, lr}
 8009f98:	b084      	sub	sp, #16
 8009f9a:	af00      	add	r7, sp, #0
 8009f9c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fa2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	2240      	movs	r2, #64	; 0x40
 8009fa8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fae:	f043 0204 	orr.w	r2, r3, #4
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8009fb6:	68f8      	ldr	r0, [r7, #12]
 8009fb8:	f7ff fd4a 	bl	8009a50 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8009fbc:	bf00      	nop
 8009fbe:	3710      	adds	r7, #16
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	bd80      	pop	{r7, pc}

08009fc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009fc4:	b480      	push	{r7}
 8009fc6:	b085      	sub	sp, #20
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	f003 0307 	and.w	r3, r3, #7
 8009fd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009fd4:	4b0c      	ldr	r3, [pc, #48]	; (800a008 <__NVIC_SetPriorityGrouping+0x44>)
 8009fd6:	68db      	ldr	r3, [r3, #12]
 8009fd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009fda:	68ba      	ldr	r2, [r7, #8]
 8009fdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009fe0:	4013      	ands	r3, r2
 8009fe2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009fe8:	68bb      	ldr	r3, [r7, #8]
 8009fea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009fec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009ff0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ff4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009ff6:	4a04      	ldr	r2, [pc, #16]	; (800a008 <__NVIC_SetPriorityGrouping+0x44>)
 8009ff8:	68bb      	ldr	r3, [r7, #8]
 8009ffa:	60d3      	str	r3, [r2, #12]
}
 8009ffc:	bf00      	nop
 8009ffe:	3714      	adds	r7, #20
 800a000:	46bd      	mov	sp, r7
 800a002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a006:	4770      	bx	lr
 800a008:	e000ed00 	.word	0xe000ed00

0800a00c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a00c:	b480      	push	{r7}
 800a00e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a010:	4b04      	ldr	r3, [pc, #16]	; (800a024 <__NVIC_GetPriorityGrouping+0x18>)
 800a012:	68db      	ldr	r3, [r3, #12]
 800a014:	0a1b      	lsrs	r3, r3, #8
 800a016:	f003 0307 	and.w	r3, r3, #7
}
 800a01a:	4618      	mov	r0, r3
 800a01c:	46bd      	mov	sp, r7
 800a01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a022:	4770      	bx	lr
 800a024:	e000ed00 	.word	0xe000ed00

0800a028 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a028:	b480      	push	{r7}
 800a02a:	b083      	sub	sp, #12
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	4603      	mov	r3, r0
 800a030:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a036:	2b00      	cmp	r3, #0
 800a038:	db0b      	blt.n	800a052 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a03a:	79fb      	ldrb	r3, [r7, #7]
 800a03c:	f003 021f 	and.w	r2, r3, #31
 800a040:	4907      	ldr	r1, [pc, #28]	; (800a060 <__NVIC_EnableIRQ+0x38>)
 800a042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a046:	095b      	lsrs	r3, r3, #5
 800a048:	2001      	movs	r0, #1
 800a04a:	fa00 f202 	lsl.w	r2, r0, r2
 800a04e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800a052:	bf00      	nop
 800a054:	370c      	adds	r7, #12
 800a056:	46bd      	mov	sp, r7
 800a058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05c:	4770      	bx	lr
 800a05e:	bf00      	nop
 800a060:	e000e100 	.word	0xe000e100

0800a064 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a064:	b480      	push	{r7}
 800a066:	b083      	sub	sp, #12
 800a068:	af00      	add	r7, sp, #0
 800a06a:	4603      	mov	r3, r0
 800a06c:	6039      	str	r1, [r7, #0]
 800a06e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a070:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a074:	2b00      	cmp	r3, #0
 800a076:	db0a      	blt.n	800a08e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	b2da      	uxtb	r2, r3
 800a07c:	490c      	ldr	r1, [pc, #48]	; (800a0b0 <__NVIC_SetPriority+0x4c>)
 800a07e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a082:	0112      	lsls	r2, r2, #4
 800a084:	b2d2      	uxtb	r2, r2
 800a086:	440b      	add	r3, r1
 800a088:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a08c:	e00a      	b.n	800a0a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a08e:	683b      	ldr	r3, [r7, #0]
 800a090:	b2da      	uxtb	r2, r3
 800a092:	4908      	ldr	r1, [pc, #32]	; (800a0b4 <__NVIC_SetPriority+0x50>)
 800a094:	79fb      	ldrb	r3, [r7, #7]
 800a096:	f003 030f 	and.w	r3, r3, #15
 800a09a:	3b04      	subs	r3, #4
 800a09c:	0112      	lsls	r2, r2, #4
 800a09e:	b2d2      	uxtb	r2, r2
 800a0a0:	440b      	add	r3, r1
 800a0a2:	761a      	strb	r2, [r3, #24]
}
 800a0a4:	bf00      	nop
 800a0a6:	370c      	adds	r7, #12
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ae:	4770      	bx	lr
 800a0b0:	e000e100 	.word	0xe000e100
 800a0b4:	e000ed00 	.word	0xe000ed00

0800a0b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a0b8:	b480      	push	{r7}
 800a0ba:	b089      	sub	sp, #36	; 0x24
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	60f8      	str	r0, [r7, #12]
 800a0c0:	60b9      	str	r1, [r7, #8]
 800a0c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	f003 0307 	and.w	r3, r3, #7
 800a0ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a0cc:	69fb      	ldr	r3, [r7, #28]
 800a0ce:	f1c3 0307 	rsb	r3, r3, #7
 800a0d2:	2b04      	cmp	r3, #4
 800a0d4:	bf28      	it	cs
 800a0d6:	2304      	movcs	r3, #4
 800a0d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a0da:	69fb      	ldr	r3, [r7, #28]
 800a0dc:	3304      	adds	r3, #4
 800a0de:	2b06      	cmp	r3, #6
 800a0e0:	d902      	bls.n	800a0e8 <NVIC_EncodePriority+0x30>
 800a0e2:	69fb      	ldr	r3, [r7, #28]
 800a0e4:	3b03      	subs	r3, #3
 800a0e6:	e000      	b.n	800a0ea <NVIC_EncodePriority+0x32>
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a0ec:	f04f 32ff 	mov.w	r2, #4294967295
 800a0f0:	69bb      	ldr	r3, [r7, #24]
 800a0f2:	fa02 f303 	lsl.w	r3, r2, r3
 800a0f6:	43da      	mvns	r2, r3
 800a0f8:	68bb      	ldr	r3, [r7, #8]
 800a0fa:	401a      	ands	r2, r3
 800a0fc:	697b      	ldr	r3, [r7, #20]
 800a0fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a100:	f04f 31ff 	mov.w	r1, #4294967295
 800a104:	697b      	ldr	r3, [r7, #20]
 800a106:	fa01 f303 	lsl.w	r3, r1, r3
 800a10a:	43d9      	mvns	r1, r3
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a110:	4313      	orrs	r3, r2
         );
}
 800a112:	4618      	mov	r0, r3
 800a114:	3724      	adds	r7, #36	; 0x24
 800a116:	46bd      	mov	sp, r7
 800a118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11c:	4770      	bx	lr
	...

0800a120 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b082      	sub	sp, #8
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	3b01      	subs	r3, #1
 800a12c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a130:	d301      	bcc.n	800a136 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a132:	2301      	movs	r3, #1
 800a134:	e00f      	b.n	800a156 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a136:	4a0a      	ldr	r2, [pc, #40]	; (800a160 <SysTick_Config+0x40>)
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	3b01      	subs	r3, #1
 800a13c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a13e:	210f      	movs	r1, #15
 800a140:	f04f 30ff 	mov.w	r0, #4294967295
 800a144:	f7ff ff8e 	bl	800a064 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a148:	4b05      	ldr	r3, [pc, #20]	; (800a160 <SysTick_Config+0x40>)
 800a14a:	2200      	movs	r2, #0
 800a14c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a14e:	4b04      	ldr	r3, [pc, #16]	; (800a160 <SysTick_Config+0x40>)
 800a150:	2207      	movs	r2, #7
 800a152:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a154:	2300      	movs	r3, #0
}
 800a156:	4618      	mov	r0, r3
 800a158:	3708      	adds	r7, #8
 800a15a:	46bd      	mov	sp, r7
 800a15c:	bd80      	pop	{r7, pc}
 800a15e:	bf00      	nop
 800a160:	e000e010 	.word	0xe000e010

0800a164 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a164:	b580      	push	{r7, lr}
 800a166:	b082      	sub	sp, #8
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a16c:	6878      	ldr	r0, [r7, #4]
 800a16e:	f7ff ff29 	bl	8009fc4 <__NVIC_SetPriorityGrouping>
}
 800a172:	bf00      	nop
 800a174:	3708      	adds	r7, #8
 800a176:	46bd      	mov	sp, r7
 800a178:	bd80      	pop	{r7, pc}

0800a17a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a17a:	b580      	push	{r7, lr}
 800a17c:	b086      	sub	sp, #24
 800a17e:	af00      	add	r7, sp, #0
 800a180:	4603      	mov	r3, r0
 800a182:	60b9      	str	r1, [r7, #8]
 800a184:	607a      	str	r2, [r7, #4]
 800a186:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800a188:	2300      	movs	r3, #0
 800a18a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a18c:	f7ff ff3e 	bl	800a00c <__NVIC_GetPriorityGrouping>
 800a190:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a192:	687a      	ldr	r2, [r7, #4]
 800a194:	68b9      	ldr	r1, [r7, #8]
 800a196:	6978      	ldr	r0, [r7, #20]
 800a198:	f7ff ff8e 	bl	800a0b8 <NVIC_EncodePriority>
 800a19c:	4602      	mov	r2, r0
 800a19e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a1a2:	4611      	mov	r1, r2
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	f7ff ff5d 	bl	800a064 <__NVIC_SetPriority>
}
 800a1aa:	bf00      	nop
 800a1ac:	3718      	adds	r7, #24
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	bd80      	pop	{r7, pc}

0800a1b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a1b2:	b580      	push	{r7, lr}
 800a1b4:	b082      	sub	sp, #8
 800a1b6:	af00      	add	r7, sp, #0
 800a1b8:	4603      	mov	r3, r0
 800a1ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a1bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	f7ff ff31 	bl	800a028 <__NVIC_EnableIRQ>
}
 800a1c6:	bf00      	nop
 800a1c8:	3708      	adds	r7, #8
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	bd80      	pop	{r7, pc}

0800a1ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a1ce:	b580      	push	{r7, lr}
 800a1d0:	b082      	sub	sp, #8
 800a1d2:	af00      	add	r7, sp, #0
 800a1d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a1d6:	6878      	ldr	r0, [r7, #4]
 800a1d8:	f7ff ffa2 	bl	800a120 <SysTick_Config>
 800a1dc:	4603      	mov	r3, r0
}
 800a1de:	4618      	mov	r0, r3
 800a1e0:	3708      	adds	r7, #8
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	bd80      	pop	{r7, pc}
	...

0800a1e8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b086      	sub	sp, #24
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800a1f4:	f7ff fab4 	bl	8009760 <HAL_GetTick>
 800a1f8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d101      	bne.n	800a204 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800a200:	2301      	movs	r3, #1
 800a202:	e099      	b.n	800a338 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2200      	movs	r2, #0
 800a208:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2202      	movs	r2, #2
 800a210:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	681a      	ldr	r2, [r3, #0]
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	f022 0201 	bic.w	r2, r2, #1
 800a222:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a224:	e00f      	b.n	800a246 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a226:	f7ff fa9b 	bl	8009760 <HAL_GetTick>
 800a22a:	4602      	mov	r2, r0
 800a22c:	693b      	ldr	r3, [r7, #16]
 800a22e:	1ad3      	subs	r3, r2, r3
 800a230:	2b05      	cmp	r3, #5
 800a232:	d908      	bls.n	800a246 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2220      	movs	r2, #32
 800a238:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	2203      	movs	r2, #3
 800a23e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800a242:	2303      	movs	r3, #3
 800a244:	e078      	b.n	800a338 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	f003 0301 	and.w	r3, r3, #1
 800a250:	2b00      	cmp	r3, #0
 800a252:	d1e8      	bne.n	800a226 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800a25c:	697a      	ldr	r2, [r7, #20]
 800a25e:	4b38      	ldr	r3, [pc, #224]	; (800a340 <HAL_DMA_Init+0x158>)
 800a260:	4013      	ands	r3, r2
 800a262:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	685a      	ldr	r2, [r3, #4]
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	689b      	ldr	r3, [r3, #8]
 800a26c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a272:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	691b      	ldr	r3, [r3, #16]
 800a278:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a27e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	699b      	ldr	r3, [r3, #24]
 800a284:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a28a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	6a1b      	ldr	r3, [r3, #32]
 800a290:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a292:	697a      	ldr	r2, [r7, #20]
 800a294:	4313      	orrs	r3, r2
 800a296:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a29c:	2b04      	cmp	r3, #4
 800a29e:	d107      	bne.n	800a2b0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2a8:	4313      	orrs	r3, r2
 800a2aa:	697a      	ldr	r2, [r7, #20]
 800a2ac:	4313      	orrs	r3, r2
 800a2ae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	697a      	ldr	r2, [r7, #20]
 800a2b6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	695b      	ldr	r3, [r3, #20]
 800a2be:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800a2c0:	697b      	ldr	r3, [r7, #20]
 800a2c2:	f023 0307 	bic.w	r3, r3, #7
 800a2c6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2cc:	697a      	ldr	r2, [r7, #20]
 800a2ce:	4313      	orrs	r3, r2
 800a2d0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2d6:	2b04      	cmp	r3, #4
 800a2d8:	d117      	bne.n	800a30a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2de:	697a      	ldr	r2, [r7, #20]
 800a2e0:	4313      	orrs	r3, r2
 800a2e2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d00e      	beq.n	800a30a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800a2ec:	6878      	ldr	r0, [r7, #4]
 800a2ee:	f000 fa9d 	bl	800a82c <DMA_CheckFifoParam>
 800a2f2:	4603      	mov	r3, r0
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d008      	beq.n	800a30a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2240      	movs	r2, #64	; 0x40
 800a2fc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	2201      	movs	r2, #1
 800a302:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800a306:	2301      	movs	r3, #1
 800a308:	e016      	b.n	800a338 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	697a      	ldr	r2, [r7, #20]
 800a310:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800a312:	6878      	ldr	r0, [r7, #4]
 800a314:	f000 fa54 	bl	800a7c0 <DMA_CalcBaseAndBitshift>
 800a318:	4603      	mov	r3, r0
 800a31a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a320:	223f      	movs	r2, #63	; 0x3f
 800a322:	409a      	lsls	r2, r3
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	2200      	movs	r2, #0
 800a32c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	2201      	movs	r2, #1
 800a332:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800a336:	2300      	movs	r3, #0
}
 800a338:	4618      	mov	r0, r3
 800a33a:	3718      	adds	r7, #24
 800a33c:	46bd      	mov	sp, r7
 800a33e:	bd80      	pop	{r7, pc}
 800a340:	f010803f 	.word	0xf010803f

0800a344 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a344:	b580      	push	{r7, lr}
 800a346:	b086      	sub	sp, #24
 800a348:	af00      	add	r7, sp, #0
 800a34a:	60f8      	str	r0, [r7, #12]
 800a34c:	60b9      	str	r1, [r7, #8]
 800a34e:	607a      	str	r2, [r7, #4]
 800a350:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a352:	2300      	movs	r3, #0
 800a354:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a35a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a362:	2b01      	cmp	r3, #1
 800a364:	d101      	bne.n	800a36a <HAL_DMA_Start_IT+0x26>
 800a366:	2302      	movs	r3, #2
 800a368:	e040      	b.n	800a3ec <HAL_DMA_Start_IT+0xa8>
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	2201      	movs	r2, #1
 800a36e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a378:	b2db      	uxtb	r3, r3
 800a37a:	2b01      	cmp	r3, #1
 800a37c:	d12f      	bne.n	800a3de <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	2202      	movs	r2, #2
 800a382:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	2200      	movs	r2, #0
 800a38a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	687a      	ldr	r2, [r7, #4]
 800a390:	68b9      	ldr	r1, [r7, #8]
 800a392:	68f8      	ldr	r0, [r7, #12]
 800a394:	f000 f9e6 	bl	800a764 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a39c:	223f      	movs	r2, #63	; 0x3f
 800a39e:	409a      	lsls	r2, r3
 800a3a0:	693b      	ldr	r3, [r7, #16]
 800a3a2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	681a      	ldr	r2, [r3, #0]
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	f042 0216 	orr.w	r2, r2, #22
 800a3b2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d007      	beq.n	800a3cc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	681a      	ldr	r2, [r3, #0]
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	f042 0208 	orr.w	r2, r2, #8
 800a3ca:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	681a      	ldr	r2, [r3, #0]
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	f042 0201 	orr.w	r2, r2, #1
 800a3da:	601a      	str	r2, [r3, #0]
 800a3dc:	e005      	b.n	800a3ea <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	2200      	movs	r2, #0
 800a3e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800a3e6:	2302      	movs	r3, #2
 800a3e8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800a3ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	3718      	adds	r7, #24
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	bd80      	pop	{r7, pc}

0800a3f4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a3f4:	b480      	push	{r7}
 800a3f6:	b083      	sub	sp, #12
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a402:	b2db      	uxtb	r3, r3
 800a404:	2b02      	cmp	r3, #2
 800a406:	d004      	beq.n	800a412 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2280      	movs	r2, #128	; 0x80
 800a40c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800a40e:	2301      	movs	r3, #1
 800a410:	e00c      	b.n	800a42c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	2205      	movs	r2, #5
 800a416:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	681a      	ldr	r2, [r3, #0]
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	f022 0201 	bic.w	r2, r2, #1
 800a428:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800a42a:	2300      	movs	r3, #0
}
 800a42c:	4618      	mov	r0, r3
 800a42e:	370c      	adds	r7, #12
 800a430:	46bd      	mov	sp, r7
 800a432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a436:	4770      	bx	lr

0800a438 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b086      	sub	sp, #24
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800a440:	2300      	movs	r3, #0
 800a442:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800a444:	4b92      	ldr	r3, [pc, #584]	; (800a690 <HAL_DMA_IRQHandler+0x258>)
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	4a92      	ldr	r2, [pc, #584]	; (800a694 <HAL_DMA_IRQHandler+0x25c>)
 800a44a:	fba2 2303 	umull	r2, r3, r2, r3
 800a44e:	0a9b      	lsrs	r3, r3, #10
 800a450:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a456:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800a458:	693b      	ldr	r3, [r7, #16]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a462:	2208      	movs	r2, #8
 800a464:	409a      	lsls	r2, r3
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	4013      	ands	r3, r2
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d01a      	beq.n	800a4a4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	f003 0304 	and.w	r3, r3, #4
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d013      	beq.n	800a4a4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	681a      	ldr	r2, [r3, #0]
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	f022 0204 	bic.w	r2, r2, #4
 800a48a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a490:	2208      	movs	r2, #8
 800a492:	409a      	lsls	r2, r3
 800a494:	693b      	ldr	r3, [r7, #16]
 800a496:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a49c:	f043 0201 	orr.w	r2, r3, #1
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a4a8:	2201      	movs	r2, #1
 800a4aa:	409a      	lsls	r2, r3
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	4013      	ands	r3, r2
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d012      	beq.n	800a4da <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	695b      	ldr	r3, [r3, #20]
 800a4ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d00b      	beq.n	800a4da <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a4c6:	2201      	movs	r2, #1
 800a4c8:	409a      	lsls	r2, r3
 800a4ca:	693b      	ldr	r3, [r7, #16]
 800a4cc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4d2:	f043 0202 	orr.w	r2, r3, #2
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a4de:	2204      	movs	r2, #4
 800a4e0:	409a      	lsls	r2, r3
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	4013      	ands	r3, r2
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d012      	beq.n	800a510 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	f003 0302 	and.w	r3, r3, #2
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d00b      	beq.n	800a510 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a4fc:	2204      	movs	r2, #4
 800a4fe:	409a      	lsls	r2, r3
 800a500:	693b      	ldr	r3, [r7, #16]
 800a502:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a508:	f043 0204 	orr.w	r2, r3, #4
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a514:	2210      	movs	r2, #16
 800a516:	409a      	lsls	r2, r3
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	4013      	ands	r3, r2
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d043      	beq.n	800a5a8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	f003 0308 	and.w	r3, r3, #8
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d03c      	beq.n	800a5a8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a532:	2210      	movs	r2, #16
 800a534:	409a      	lsls	r2, r3
 800a536:	693b      	ldr	r3, [r7, #16]
 800a538:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a544:	2b00      	cmp	r3, #0
 800a546:	d018      	beq.n	800a57a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a552:	2b00      	cmp	r3, #0
 800a554:	d108      	bne.n	800a568 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d024      	beq.n	800a5a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a562:	6878      	ldr	r0, [r7, #4]
 800a564:	4798      	blx	r3
 800a566:	e01f      	b.n	800a5a8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d01b      	beq.n	800a5a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a574:	6878      	ldr	r0, [r7, #4]
 800a576:	4798      	blx	r3
 800a578:	e016      	b.n	800a5a8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a584:	2b00      	cmp	r3, #0
 800a586:	d107      	bne.n	800a598 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	681a      	ldr	r2, [r3, #0]
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	f022 0208 	bic.w	r2, r2, #8
 800a596:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d003      	beq.n	800a5a8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5a4:	6878      	ldr	r0, [r7, #4]
 800a5a6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a5ac:	2220      	movs	r2, #32
 800a5ae:	409a      	lsls	r2, r3
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	4013      	ands	r3, r2
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	f000 808e 	beq.w	800a6d6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	f003 0310 	and.w	r3, r3, #16
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	f000 8086 	beq.w	800a6d6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a5ce:	2220      	movs	r2, #32
 800a5d0:	409a      	lsls	r2, r3
 800a5d2:	693b      	ldr	r3, [r7, #16]
 800a5d4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a5dc:	b2db      	uxtb	r3, r3
 800a5de:	2b05      	cmp	r3, #5
 800a5e0:	d136      	bne.n	800a650 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	681a      	ldr	r2, [r3, #0]
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	f022 0216 	bic.w	r2, r2, #22
 800a5f0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	695a      	ldr	r2, [r3, #20]
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a600:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a606:	2b00      	cmp	r3, #0
 800a608:	d103      	bne.n	800a612 <HAL_DMA_IRQHandler+0x1da>
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d007      	beq.n	800a622 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	681a      	ldr	r2, [r3, #0]
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	f022 0208 	bic.w	r2, r2, #8
 800a620:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a626:	223f      	movs	r2, #63	; 0x3f
 800a628:	409a      	lsls	r2, r3
 800a62a:	693b      	ldr	r3, [r7, #16]
 800a62c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	2200      	movs	r2, #0
 800a632:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	2201      	movs	r2, #1
 800a63a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a642:	2b00      	cmp	r3, #0
 800a644:	d07d      	beq.n	800a742 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a64a:	6878      	ldr	r0, [r7, #4]
 800a64c:	4798      	blx	r3
        }
        return;
 800a64e:	e078      	b.n	800a742 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d01c      	beq.n	800a698 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d108      	bne.n	800a67e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a670:	2b00      	cmp	r3, #0
 800a672:	d030      	beq.n	800a6d6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a678:	6878      	ldr	r0, [r7, #4]
 800a67a:	4798      	blx	r3
 800a67c:	e02b      	b.n	800a6d6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a682:	2b00      	cmp	r3, #0
 800a684:	d027      	beq.n	800a6d6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a68a:	6878      	ldr	r0, [r7, #4]
 800a68c:	4798      	blx	r3
 800a68e:	e022      	b.n	800a6d6 <HAL_DMA_IRQHandler+0x29e>
 800a690:	20000000 	.word	0x20000000
 800a694:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d10f      	bne.n	800a6c6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	681a      	ldr	r2, [r3, #0]
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	f022 0210 	bic.w	r2, r2, #16
 800a6b4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	2201      	movs	r2, #1
 800a6c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d003      	beq.n	800a6d6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6d2:	6878      	ldr	r0, [r7, #4]
 800a6d4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d032      	beq.n	800a744 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6e2:	f003 0301 	and.w	r3, r3, #1
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d022      	beq.n	800a730 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	2205      	movs	r2, #5
 800a6ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	681a      	ldr	r2, [r3, #0]
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	f022 0201 	bic.w	r2, r2, #1
 800a700:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800a702:	68bb      	ldr	r3, [r7, #8]
 800a704:	3301      	adds	r3, #1
 800a706:	60bb      	str	r3, [r7, #8]
 800a708:	697a      	ldr	r2, [r7, #20]
 800a70a:	429a      	cmp	r2, r3
 800a70c:	d307      	bcc.n	800a71e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	f003 0301 	and.w	r3, r3, #1
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d1f2      	bne.n	800a702 <HAL_DMA_IRQHandler+0x2ca>
 800a71c:	e000      	b.n	800a720 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800a71e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2200      	movs	r2, #0
 800a724:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2201      	movs	r2, #1
 800a72c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a734:	2b00      	cmp	r3, #0
 800a736:	d005      	beq.n	800a744 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a73c:	6878      	ldr	r0, [r7, #4]
 800a73e:	4798      	blx	r3
 800a740:	e000      	b.n	800a744 <HAL_DMA_IRQHandler+0x30c>
        return;
 800a742:	bf00      	nop
    }
  }
}
 800a744:	3718      	adds	r7, #24
 800a746:	46bd      	mov	sp, r7
 800a748:	bd80      	pop	{r7, pc}
 800a74a:	bf00      	nop

0800a74c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800a74c:	b480      	push	{r7}
 800a74e:	b083      	sub	sp, #12
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800a758:	4618      	mov	r0, r3
 800a75a:	370c      	adds	r7, #12
 800a75c:	46bd      	mov	sp, r7
 800a75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a762:	4770      	bx	lr

0800a764 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a764:	b480      	push	{r7}
 800a766:	b085      	sub	sp, #20
 800a768:	af00      	add	r7, sp, #0
 800a76a:	60f8      	str	r0, [r7, #12]
 800a76c:	60b9      	str	r1, [r7, #8]
 800a76e:	607a      	str	r2, [r7, #4]
 800a770:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	681a      	ldr	r2, [r3, #0]
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a780:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	683a      	ldr	r2, [r7, #0]
 800a788:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	689b      	ldr	r3, [r3, #8]
 800a78e:	2b40      	cmp	r3, #64	; 0x40
 800a790:	d108      	bne.n	800a7a4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	687a      	ldr	r2, [r7, #4]
 800a798:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	68ba      	ldr	r2, [r7, #8]
 800a7a0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800a7a2:	e007      	b.n	800a7b4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	68ba      	ldr	r2, [r7, #8]
 800a7aa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	687a      	ldr	r2, [r7, #4]
 800a7b2:	60da      	str	r2, [r3, #12]
}
 800a7b4:	bf00      	nop
 800a7b6:	3714      	adds	r7, #20
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7be:	4770      	bx	lr

0800a7c0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800a7c0:	b480      	push	{r7}
 800a7c2:	b085      	sub	sp, #20
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	b2db      	uxtb	r3, r3
 800a7ce:	3b10      	subs	r3, #16
 800a7d0:	4a14      	ldr	r2, [pc, #80]	; (800a824 <DMA_CalcBaseAndBitshift+0x64>)
 800a7d2:	fba2 2303 	umull	r2, r3, r2, r3
 800a7d6:	091b      	lsrs	r3, r3, #4
 800a7d8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800a7da:	4a13      	ldr	r2, [pc, #76]	; (800a828 <DMA_CalcBaseAndBitshift+0x68>)
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	4413      	add	r3, r2
 800a7e0:	781b      	ldrb	r3, [r3, #0]
 800a7e2:	461a      	mov	r2, r3
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	2b03      	cmp	r3, #3
 800a7ec:	d909      	bls.n	800a802 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a7f6:	f023 0303 	bic.w	r3, r3, #3
 800a7fa:	1d1a      	adds	r2, r3, #4
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	659a      	str	r2, [r3, #88]	; 0x58
 800a800:	e007      	b.n	800a812 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800a80a:	f023 0303 	bic.w	r3, r3, #3
 800a80e:	687a      	ldr	r2, [r7, #4]
 800a810:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800a816:	4618      	mov	r0, r3
 800a818:	3714      	adds	r7, #20
 800a81a:	46bd      	mov	sp, r7
 800a81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a820:	4770      	bx	lr
 800a822:	bf00      	nop
 800a824:	aaaaaaab 	.word	0xaaaaaaab
 800a828:	08019c5c 	.word	0x08019c5c

0800a82c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800a82c:	b480      	push	{r7}
 800a82e:	b085      	sub	sp, #20
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a834:	2300      	movs	r3, #0
 800a836:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a83c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	699b      	ldr	r3, [r3, #24]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d11f      	bne.n	800a886 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800a846:	68bb      	ldr	r3, [r7, #8]
 800a848:	2b03      	cmp	r3, #3
 800a84a:	d855      	bhi.n	800a8f8 <DMA_CheckFifoParam+0xcc>
 800a84c:	a201      	add	r2, pc, #4	; (adr r2, 800a854 <DMA_CheckFifoParam+0x28>)
 800a84e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a852:	bf00      	nop
 800a854:	0800a865 	.word	0x0800a865
 800a858:	0800a877 	.word	0x0800a877
 800a85c:	0800a865 	.word	0x0800a865
 800a860:	0800a8f9 	.word	0x0800a8f9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a868:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d045      	beq.n	800a8fc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800a870:	2301      	movs	r3, #1
 800a872:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a874:	e042      	b.n	800a8fc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a87a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a87e:	d13f      	bne.n	800a900 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800a880:	2301      	movs	r3, #1
 800a882:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a884:	e03c      	b.n	800a900 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	699b      	ldr	r3, [r3, #24]
 800a88a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a88e:	d121      	bne.n	800a8d4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800a890:	68bb      	ldr	r3, [r7, #8]
 800a892:	2b03      	cmp	r3, #3
 800a894:	d836      	bhi.n	800a904 <DMA_CheckFifoParam+0xd8>
 800a896:	a201      	add	r2, pc, #4	; (adr r2, 800a89c <DMA_CheckFifoParam+0x70>)
 800a898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a89c:	0800a8ad 	.word	0x0800a8ad
 800a8a0:	0800a8b3 	.word	0x0800a8b3
 800a8a4:	0800a8ad 	.word	0x0800a8ad
 800a8a8:	0800a8c5 	.word	0x0800a8c5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800a8ac:	2301      	movs	r3, #1
 800a8ae:	73fb      	strb	r3, [r7, #15]
      break;
 800a8b0:	e02f      	b.n	800a912 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d024      	beq.n	800a908 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800a8be:	2301      	movs	r3, #1
 800a8c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a8c2:	e021      	b.n	800a908 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8c8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800a8cc:	d11e      	bne.n	800a90c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800a8ce:	2301      	movs	r3, #1
 800a8d0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800a8d2:	e01b      	b.n	800a90c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800a8d4:	68bb      	ldr	r3, [r7, #8]
 800a8d6:	2b02      	cmp	r3, #2
 800a8d8:	d902      	bls.n	800a8e0 <DMA_CheckFifoParam+0xb4>
 800a8da:	2b03      	cmp	r3, #3
 800a8dc:	d003      	beq.n	800a8e6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800a8de:	e018      	b.n	800a912 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800a8e0:	2301      	movs	r3, #1
 800a8e2:	73fb      	strb	r3, [r7, #15]
      break;
 800a8e4:	e015      	b.n	800a912 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d00e      	beq.n	800a910 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800a8f2:	2301      	movs	r3, #1
 800a8f4:	73fb      	strb	r3, [r7, #15]
      break;
 800a8f6:	e00b      	b.n	800a910 <DMA_CheckFifoParam+0xe4>
      break;
 800a8f8:	bf00      	nop
 800a8fa:	e00a      	b.n	800a912 <DMA_CheckFifoParam+0xe6>
      break;
 800a8fc:	bf00      	nop
 800a8fe:	e008      	b.n	800a912 <DMA_CheckFifoParam+0xe6>
      break;
 800a900:	bf00      	nop
 800a902:	e006      	b.n	800a912 <DMA_CheckFifoParam+0xe6>
      break;
 800a904:	bf00      	nop
 800a906:	e004      	b.n	800a912 <DMA_CheckFifoParam+0xe6>
      break;
 800a908:	bf00      	nop
 800a90a:	e002      	b.n	800a912 <DMA_CheckFifoParam+0xe6>
      break;   
 800a90c:	bf00      	nop
 800a90e:	e000      	b.n	800a912 <DMA_CheckFifoParam+0xe6>
      break;
 800a910:	bf00      	nop
    }
  } 
  
  return status; 
 800a912:	7bfb      	ldrb	r3, [r7, #15]
}
 800a914:	4618      	mov	r0, r3
 800a916:	3714      	adds	r7, #20
 800a918:	46bd      	mov	sp, r7
 800a91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91e:	4770      	bx	lr

0800a920 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a920:	b480      	push	{r7}
 800a922:	b089      	sub	sp, #36	; 0x24
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
 800a928:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800a92a:	2300      	movs	r3, #0
 800a92c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800a92e:	2300      	movs	r3, #0
 800a930:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800a932:	2300      	movs	r3, #0
 800a934:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a936:	2300      	movs	r3, #0
 800a938:	61fb      	str	r3, [r7, #28]
 800a93a:	e177      	b.n	800ac2c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800a93c:	2201      	movs	r2, #1
 800a93e:	69fb      	ldr	r3, [r7, #28]
 800a940:	fa02 f303 	lsl.w	r3, r2, r3
 800a944:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a946:	683b      	ldr	r3, [r7, #0]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	697a      	ldr	r2, [r7, #20]
 800a94c:	4013      	ands	r3, r2
 800a94e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800a950:	693a      	ldr	r2, [r7, #16]
 800a952:	697b      	ldr	r3, [r7, #20]
 800a954:	429a      	cmp	r2, r3
 800a956:	f040 8166 	bne.w	800ac26 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	685b      	ldr	r3, [r3, #4]
 800a95e:	2b01      	cmp	r3, #1
 800a960:	d00b      	beq.n	800a97a <HAL_GPIO_Init+0x5a>
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	685b      	ldr	r3, [r3, #4]
 800a966:	2b02      	cmp	r3, #2
 800a968:	d007      	beq.n	800a97a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a96a:	683b      	ldr	r3, [r7, #0]
 800a96c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a96e:	2b11      	cmp	r3, #17
 800a970:	d003      	beq.n	800a97a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	685b      	ldr	r3, [r3, #4]
 800a976:	2b12      	cmp	r3, #18
 800a978:	d130      	bne.n	800a9dc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	689b      	ldr	r3, [r3, #8]
 800a97e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800a980:	69fb      	ldr	r3, [r7, #28]
 800a982:	005b      	lsls	r3, r3, #1
 800a984:	2203      	movs	r2, #3
 800a986:	fa02 f303 	lsl.w	r3, r2, r3
 800a98a:	43db      	mvns	r3, r3
 800a98c:	69ba      	ldr	r2, [r7, #24]
 800a98e:	4013      	ands	r3, r2
 800a990:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a992:	683b      	ldr	r3, [r7, #0]
 800a994:	68da      	ldr	r2, [r3, #12]
 800a996:	69fb      	ldr	r3, [r7, #28]
 800a998:	005b      	lsls	r3, r3, #1
 800a99a:	fa02 f303 	lsl.w	r3, r2, r3
 800a99e:	69ba      	ldr	r2, [r7, #24]
 800a9a0:	4313      	orrs	r3, r2
 800a9a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	69ba      	ldr	r2, [r7, #24]
 800a9a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	685b      	ldr	r3, [r3, #4]
 800a9ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a9b0:	2201      	movs	r2, #1
 800a9b2:	69fb      	ldr	r3, [r7, #28]
 800a9b4:	fa02 f303 	lsl.w	r3, r2, r3
 800a9b8:	43db      	mvns	r3, r3
 800a9ba:	69ba      	ldr	r2, [r7, #24]
 800a9bc:	4013      	ands	r3, r2
 800a9be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800a9c0:	683b      	ldr	r3, [r7, #0]
 800a9c2:	685b      	ldr	r3, [r3, #4]
 800a9c4:	091b      	lsrs	r3, r3, #4
 800a9c6:	f003 0201 	and.w	r2, r3, #1
 800a9ca:	69fb      	ldr	r3, [r7, #28]
 800a9cc:	fa02 f303 	lsl.w	r3, r2, r3
 800a9d0:	69ba      	ldr	r2, [r7, #24]
 800a9d2:	4313      	orrs	r3, r2
 800a9d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	69ba      	ldr	r2, [r7, #24]
 800a9da:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	68db      	ldr	r3, [r3, #12]
 800a9e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800a9e2:	69fb      	ldr	r3, [r7, #28]
 800a9e4:	005b      	lsls	r3, r3, #1
 800a9e6:	2203      	movs	r2, #3
 800a9e8:	fa02 f303 	lsl.w	r3, r2, r3
 800a9ec:	43db      	mvns	r3, r3
 800a9ee:	69ba      	ldr	r2, [r7, #24]
 800a9f0:	4013      	ands	r3, r2
 800a9f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a9f4:	683b      	ldr	r3, [r7, #0]
 800a9f6:	689a      	ldr	r2, [r3, #8]
 800a9f8:	69fb      	ldr	r3, [r7, #28]
 800a9fa:	005b      	lsls	r3, r3, #1
 800a9fc:	fa02 f303 	lsl.w	r3, r2, r3
 800aa00:	69ba      	ldr	r2, [r7, #24]
 800aa02:	4313      	orrs	r3, r2
 800aa04:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	69ba      	ldr	r2, [r7, #24]
 800aa0a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800aa0c:	683b      	ldr	r3, [r7, #0]
 800aa0e:	685b      	ldr	r3, [r3, #4]
 800aa10:	2b02      	cmp	r3, #2
 800aa12:	d003      	beq.n	800aa1c <HAL_GPIO_Init+0xfc>
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	685b      	ldr	r3, [r3, #4]
 800aa18:	2b12      	cmp	r3, #18
 800aa1a:	d123      	bne.n	800aa64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800aa1c:	69fb      	ldr	r3, [r7, #28]
 800aa1e:	08da      	lsrs	r2, r3, #3
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	3208      	adds	r2, #8
 800aa24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800aa2a:	69fb      	ldr	r3, [r7, #28]
 800aa2c:	f003 0307 	and.w	r3, r3, #7
 800aa30:	009b      	lsls	r3, r3, #2
 800aa32:	220f      	movs	r2, #15
 800aa34:	fa02 f303 	lsl.w	r3, r2, r3
 800aa38:	43db      	mvns	r3, r3
 800aa3a:	69ba      	ldr	r2, [r7, #24]
 800aa3c:	4013      	ands	r3, r2
 800aa3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800aa40:	683b      	ldr	r3, [r7, #0]
 800aa42:	691a      	ldr	r2, [r3, #16]
 800aa44:	69fb      	ldr	r3, [r7, #28]
 800aa46:	f003 0307 	and.w	r3, r3, #7
 800aa4a:	009b      	lsls	r3, r3, #2
 800aa4c:	fa02 f303 	lsl.w	r3, r2, r3
 800aa50:	69ba      	ldr	r2, [r7, #24]
 800aa52:	4313      	orrs	r3, r2
 800aa54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800aa56:	69fb      	ldr	r3, [r7, #28]
 800aa58:	08da      	lsrs	r2, r3, #3
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	3208      	adds	r2, #8
 800aa5e:	69b9      	ldr	r1, [r7, #24]
 800aa60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800aa6a:	69fb      	ldr	r3, [r7, #28]
 800aa6c:	005b      	lsls	r3, r3, #1
 800aa6e:	2203      	movs	r2, #3
 800aa70:	fa02 f303 	lsl.w	r3, r2, r3
 800aa74:	43db      	mvns	r3, r3
 800aa76:	69ba      	ldr	r2, [r7, #24]
 800aa78:	4013      	ands	r3, r2
 800aa7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	685b      	ldr	r3, [r3, #4]
 800aa80:	f003 0203 	and.w	r2, r3, #3
 800aa84:	69fb      	ldr	r3, [r7, #28]
 800aa86:	005b      	lsls	r3, r3, #1
 800aa88:	fa02 f303 	lsl.w	r3, r2, r3
 800aa8c:	69ba      	ldr	r2, [r7, #24]
 800aa8e:	4313      	orrs	r3, r2
 800aa90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	69ba      	ldr	r2, [r7, #24]
 800aa96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800aa98:	683b      	ldr	r3, [r7, #0]
 800aa9a:	685b      	ldr	r3, [r3, #4]
 800aa9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	f000 80c0 	beq.w	800ac26 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	60fb      	str	r3, [r7, #12]
 800aaaa:	4b65      	ldr	r3, [pc, #404]	; (800ac40 <HAL_GPIO_Init+0x320>)
 800aaac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aaae:	4a64      	ldr	r2, [pc, #400]	; (800ac40 <HAL_GPIO_Init+0x320>)
 800aab0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800aab4:	6453      	str	r3, [r2, #68]	; 0x44
 800aab6:	4b62      	ldr	r3, [pc, #392]	; (800ac40 <HAL_GPIO_Init+0x320>)
 800aab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aaba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aabe:	60fb      	str	r3, [r7, #12]
 800aac0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800aac2:	4a60      	ldr	r2, [pc, #384]	; (800ac44 <HAL_GPIO_Init+0x324>)
 800aac4:	69fb      	ldr	r3, [r7, #28]
 800aac6:	089b      	lsrs	r3, r3, #2
 800aac8:	3302      	adds	r3, #2
 800aaca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aace:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800aad0:	69fb      	ldr	r3, [r7, #28]
 800aad2:	f003 0303 	and.w	r3, r3, #3
 800aad6:	009b      	lsls	r3, r3, #2
 800aad8:	220f      	movs	r2, #15
 800aada:	fa02 f303 	lsl.w	r3, r2, r3
 800aade:	43db      	mvns	r3, r3
 800aae0:	69ba      	ldr	r2, [r7, #24]
 800aae2:	4013      	ands	r3, r2
 800aae4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	4a57      	ldr	r2, [pc, #348]	; (800ac48 <HAL_GPIO_Init+0x328>)
 800aaea:	4293      	cmp	r3, r2
 800aaec:	d037      	beq.n	800ab5e <HAL_GPIO_Init+0x23e>
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	4a56      	ldr	r2, [pc, #344]	; (800ac4c <HAL_GPIO_Init+0x32c>)
 800aaf2:	4293      	cmp	r3, r2
 800aaf4:	d031      	beq.n	800ab5a <HAL_GPIO_Init+0x23a>
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	4a55      	ldr	r2, [pc, #340]	; (800ac50 <HAL_GPIO_Init+0x330>)
 800aafa:	4293      	cmp	r3, r2
 800aafc:	d02b      	beq.n	800ab56 <HAL_GPIO_Init+0x236>
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	4a54      	ldr	r2, [pc, #336]	; (800ac54 <HAL_GPIO_Init+0x334>)
 800ab02:	4293      	cmp	r3, r2
 800ab04:	d025      	beq.n	800ab52 <HAL_GPIO_Init+0x232>
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	4a53      	ldr	r2, [pc, #332]	; (800ac58 <HAL_GPIO_Init+0x338>)
 800ab0a:	4293      	cmp	r3, r2
 800ab0c:	d01f      	beq.n	800ab4e <HAL_GPIO_Init+0x22e>
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	4a52      	ldr	r2, [pc, #328]	; (800ac5c <HAL_GPIO_Init+0x33c>)
 800ab12:	4293      	cmp	r3, r2
 800ab14:	d019      	beq.n	800ab4a <HAL_GPIO_Init+0x22a>
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	4a51      	ldr	r2, [pc, #324]	; (800ac60 <HAL_GPIO_Init+0x340>)
 800ab1a:	4293      	cmp	r3, r2
 800ab1c:	d013      	beq.n	800ab46 <HAL_GPIO_Init+0x226>
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	4a50      	ldr	r2, [pc, #320]	; (800ac64 <HAL_GPIO_Init+0x344>)
 800ab22:	4293      	cmp	r3, r2
 800ab24:	d00d      	beq.n	800ab42 <HAL_GPIO_Init+0x222>
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	4a4f      	ldr	r2, [pc, #316]	; (800ac68 <HAL_GPIO_Init+0x348>)
 800ab2a:	4293      	cmp	r3, r2
 800ab2c:	d007      	beq.n	800ab3e <HAL_GPIO_Init+0x21e>
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	4a4e      	ldr	r2, [pc, #312]	; (800ac6c <HAL_GPIO_Init+0x34c>)
 800ab32:	4293      	cmp	r3, r2
 800ab34:	d101      	bne.n	800ab3a <HAL_GPIO_Init+0x21a>
 800ab36:	2309      	movs	r3, #9
 800ab38:	e012      	b.n	800ab60 <HAL_GPIO_Init+0x240>
 800ab3a:	230a      	movs	r3, #10
 800ab3c:	e010      	b.n	800ab60 <HAL_GPIO_Init+0x240>
 800ab3e:	2308      	movs	r3, #8
 800ab40:	e00e      	b.n	800ab60 <HAL_GPIO_Init+0x240>
 800ab42:	2307      	movs	r3, #7
 800ab44:	e00c      	b.n	800ab60 <HAL_GPIO_Init+0x240>
 800ab46:	2306      	movs	r3, #6
 800ab48:	e00a      	b.n	800ab60 <HAL_GPIO_Init+0x240>
 800ab4a:	2305      	movs	r3, #5
 800ab4c:	e008      	b.n	800ab60 <HAL_GPIO_Init+0x240>
 800ab4e:	2304      	movs	r3, #4
 800ab50:	e006      	b.n	800ab60 <HAL_GPIO_Init+0x240>
 800ab52:	2303      	movs	r3, #3
 800ab54:	e004      	b.n	800ab60 <HAL_GPIO_Init+0x240>
 800ab56:	2302      	movs	r3, #2
 800ab58:	e002      	b.n	800ab60 <HAL_GPIO_Init+0x240>
 800ab5a:	2301      	movs	r3, #1
 800ab5c:	e000      	b.n	800ab60 <HAL_GPIO_Init+0x240>
 800ab5e:	2300      	movs	r3, #0
 800ab60:	69fa      	ldr	r2, [r7, #28]
 800ab62:	f002 0203 	and.w	r2, r2, #3
 800ab66:	0092      	lsls	r2, r2, #2
 800ab68:	4093      	lsls	r3, r2
 800ab6a:	69ba      	ldr	r2, [r7, #24]
 800ab6c:	4313      	orrs	r3, r2
 800ab6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800ab70:	4934      	ldr	r1, [pc, #208]	; (800ac44 <HAL_GPIO_Init+0x324>)
 800ab72:	69fb      	ldr	r3, [r7, #28]
 800ab74:	089b      	lsrs	r3, r3, #2
 800ab76:	3302      	adds	r3, #2
 800ab78:	69ba      	ldr	r2, [r7, #24]
 800ab7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800ab7e:	4b3c      	ldr	r3, [pc, #240]	; (800ac70 <HAL_GPIO_Init+0x350>)
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ab84:	693b      	ldr	r3, [r7, #16]
 800ab86:	43db      	mvns	r3, r3
 800ab88:	69ba      	ldr	r2, [r7, #24]
 800ab8a:	4013      	ands	r3, r2
 800ab8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800ab8e:	683b      	ldr	r3, [r7, #0]
 800ab90:	685b      	ldr	r3, [r3, #4]
 800ab92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d003      	beq.n	800aba2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800ab9a:	69ba      	ldr	r2, [r7, #24]
 800ab9c:	693b      	ldr	r3, [r7, #16]
 800ab9e:	4313      	orrs	r3, r2
 800aba0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800aba2:	4a33      	ldr	r2, [pc, #204]	; (800ac70 <HAL_GPIO_Init+0x350>)
 800aba4:	69bb      	ldr	r3, [r7, #24]
 800aba6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800aba8:	4b31      	ldr	r3, [pc, #196]	; (800ac70 <HAL_GPIO_Init+0x350>)
 800abaa:	685b      	ldr	r3, [r3, #4]
 800abac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800abae:	693b      	ldr	r3, [r7, #16]
 800abb0:	43db      	mvns	r3, r3
 800abb2:	69ba      	ldr	r2, [r7, #24]
 800abb4:	4013      	ands	r3, r2
 800abb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800abb8:	683b      	ldr	r3, [r7, #0]
 800abba:	685b      	ldr	r3, [r3, #4]
 800abbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d003      	beq.n	800abcc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800abc4:	69ba      	ldr	r2, [r7, #24]
 800abc6:	693b      	ldr	r3, [r7, #16]
 800abc8:	4313      	orrs	r3, r2
 800abca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800abcc:	4a28      	ldr	r2, [pc, #160]	; (800ac70 <HAL_GPIO_Init+0x350>)
 800abce:	69bb      	ldr	r3, [r7, #24]
 800abd0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800abd2:	4b27      	ldr	r3, [pc, #156]	; (800ac70 <HAL_GPIO_Init+0x350>)
 800abd4:	689b      	ldr	r3, [r3, #8]
 800abd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800abd8:	693b      	ldr	r3, [r7, #16]
 800abda:	43db      	mvns	r3, r3
 800abdc:	69ba      	ldr	r2, [r7, #24]
 800abde:	4013      	ands	r3, r2
 800abe0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800abe2:	683b      	ldr	r3, [r7, #0]
 800abe4:	685b      	ldr	r3, [r3, #4]
 800abe6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800abea:	2b00      	cmp	r3, #0
 800abec:	d003      	beq.n	800abf6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800abee:	69ba      	ldr	r2, [r7, #24]
 800abf0:	693b      	ldr	r3, [r7, #16]
 800abf2:	4313      	orrs	r3, r2
 800abf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800abf6:	4a1e      	ldr	r2, [pc, #120]	; (800ac70 <HAL_GPIO_Init+0x350>)
 800abf8:	69bb      	ldr	r3, [r7, #24]
 800abfa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800abfc:	4b1c      	ldr	r3, [pc, #112]	; (800ac70 <HAL_GPIO_Init+0x350>)
 800abfe:	68db      	ldr	r3, [r3, #12]
 800ac00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ac02:	693b      	ldr	r3, [r7, #16]
 800ac04:	43db      	mvns	r3, r3
 800ac06:	69ba      	ldr	r2, [r7, #24]
 800ac08:	4013      	ands	r3, r2
 800ac0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800ac0c:	683b      	ldr	r3, [r7, #0]
 800ac0e:	685b      	ldr	r3, [r3, #4]
 800ac10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d003      	beq.n	800ac20 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800ac18:	69ba      	ldr	r2, [r7, #24]
 800ac1a:	693b      	ldr	r3, [r7, #16]
 800ac1c:	4313      	orrs	r3, r2
 800ac1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800ac20:	4a13      	ldr	r2, [pc, #76]	; (800ac70 <HAL_GPIO_Init+0x350>)
 800ac22:	69bb      	ldr	r3, [r7, #24]
 800ac24:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800ac26:	69fb      	ldr	r3, [r7, #28]
 800ac28:	3301      	adds	r3, #1
 800ac2a:	61fb      	str	r3, [r7, #28]
 800ac2c:	69fb      	ldr	r3, [r7, #28]
 800ac2e:	2b0f      	cmp	r3, #15
 800ac30:	f67f ae84 	bls.w	800a93c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800ac34:	bf00      	nop
 800ac36:	3724      	adds	r7, #36	; 0x24
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3e:	4770      	bx	lr
 800ac40:	40023800 	.word	0x40023800
 800ac44:	40013800 	.word	0x40013800
 800ac48:	40020000 	.word	0x40020000
 800ac4c:	40020400 	.word	0x40020400
 800ac50:	40020800 	.word	0x40020800
 800ac54:	40020c00 	.word	0x40020c00
 800ac58:	40021000 	.word	0x40021000
 800ac5c:	40021400 	.word	0x40021400
 800ac60:	40021800 	.word	0x40021800
 800ac64:	40021c00 	.word	0x40021c00
 800ac68:	40022000 	.word	0x40022000
 800ac6c:	40022400 	.word	0x40022400
 800ac70:	40013c00 	.word	0x40013c00

0800ac74 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800ac74:	b480      	push	{r7}
 800ac76:	b085      	sub	sp, #20
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
 800ac7c:	460b      	mov	r3, r1
 800ac7e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	691a      	ldr	r2, [r3, #16]
 800ac84:	887b      	ldrh	r3, [r7, #2]
 800ac86:	4013      	ands	r3, r2
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d002      	beq.n	800ac92 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800ac8c:	2301      	movs	r3, #1
 800ac8e:	73fb      	strb	r3, [r7, #15]
 800ac90:	e001      	b.n	800ac96 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800ac92:	2300      	movs	r3, #0
 800ac94:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800ac96:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac98:	4618      	mov	r0, r3
 800ac9a:	3714      	adds	r7, #20
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca2:	4770      	bx	lr

0800aca4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800aca4:	b480      	push	{r7}
 800aca6:	b083      	sub	sp, #12
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
 800acac:	460b      	mov	r3, r1
 800acae:	807b      	strh	r3, [r7, #2]
 800acb0:	4613      	mov	r3, r2
 800acb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800acb4:	787b      	ldrb	r3, [r7, #1]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d003      	beq.n	800acc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800acba:	887a      	ldrh	r2, [r7, #2]
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800acc0:	e003      	b.n	800acca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800acc2:	887b      	ldrh	r3, [r7, #2]
 800acc4:	041a      	lsls	r2, r3, #16
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	619a      	str	r2, [r3, #24]
}
 800acca:	bf00      	nop
 800accc:	370c      	adds	r7, #12
 800acce:	46bd      	mov	sp, r7
 800acd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd4:	4770      	bx	lr
	...

0800acd8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	b084      	sub	sp, #16
 800acdc:	af00      	add	r7, sp, #0
 800acde:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d101      	bne.n	800acea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800ace6:	2301      	movs	r3, #1
 800ace8:	e11f      	b.n	800af2a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800acf0:	b2db      	uxtb	r3, r3
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d106      	bne.n	800ad04 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	2200      	movs	r2, #0
 800acfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800acfe:	6878      	ldr	r0, [r7, #4]
 800ad00:	f7fc f83a 	bl	8006d78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	2224      	movs	r2, #36	; 0x24
 800ad08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	681a      	ldr	r2, [r3, #0]
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	f022 0201 	bic.w	r2, r2, #1
 800ad1a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	681a      	ldr	r2, [r3, #0]
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ad2a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	681a      	ldr	r2, [r3, #0]
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ad3a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800ad3c:	f001 f96e 	bl	800c01c <HAL_RCC_GetPCLK1Freq>
 800ad40:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	685b      	ldr	r3, [r3, #4]
 800ad46:	4a7b      	ldr	r2, [pc, #492]	; (800af34 <HAL_I2C_Init+0x25c>)
 800ad48:	4293      	cmp	r3, r2
 800ad4a:	d807      	bhi.n	800ad5c <HAL_I2C_Init+0x84>
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	4a7a      	ldr	r2, [pc, #488]	; (800af38 <HAL_I2C_Init+0x260>)
 800ad50:	4293      	cmp	r3, r2
 800ad52:	bf94      	ite	ls
 800ad54:	2301      	movls	r3, #1
 800ad56:	2300      	movhi	r3, #0
 800ad58:	b2db      	uxtb	r3, r3
 800ad5a:	e006      	b.n	800ad6a <HAL_I2C_Init+0x92>
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	4a77      	ldr	r2, [pc, #476]	; (800af3c <HAL_I2C_Init+0x264>)
 800ad60:	4293      	cmp	r3, r2
 800ad62:	bf94      	ite	ls
 800ad64:	2301      	movls	r3, #1
 800ad66:	2300      	movhi	r3, #0
 800ad68:	b2db      	uxtb	r3, r3
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d001      	beq.n	800ad72 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800ad6e:	2301      	movs	r3, #1
 800ad70:	e0db      	b.n	800af2a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	4a72      	ldr	r2, [pc, #456]	; (800af40 <HAL_I2C_Init+0x268>)
 800ad76:	fba2 2303 	umull	r2, r3, r2, r3
 800ad7a:	0c9b      	lsrs	r3, r3, #18
 800ad7c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	685b      	ldr	r3, [r3, #4]
 800ad84:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	68ba      	ldr	r2, [r7, #8]
 800ad8e:	430a      	orrs	r2, r1
 800ad90:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	6a1b      	ldr	r3, [r3, #32]
 800ad98:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	685b      	ldr	r3, [r3, #4]
 800ada0:	4a64      	ldr	r2, [pc, #400]	; (800af34 <HAL_I2C_Init+0x25c>)
 800ada2:	4293      	cmp	r3, r2
 800ada4:	d802      	bhi.n	800adac <HAL_I2C_Init+0xd4>
 800ada6:	68bb      	ldr	r3, [r7, #8]
 800ada8:	3301      	adds	r3, #1
 800adaa:	e009      	b.n	800adc0 <HAL_I2C_Init+0xe8>
 800adac:	68bb      	ldr	r3, [r7, #8]
 800adae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800adb2:	fb02 f303 	mul.w	r3, r2, r3
 800adb6:	4a63      	ldr	r2, [pc, #396]	; (800af44 <HAL_I2C_Init+0x26c>)
 800adb8:	fba2 2303 	umull	r2, r3, r2, r3
 800adbc:	099b      	lsrs	r3, r3, #6
 800adbe:	3301      	adds	r3, #1
 800adc0:	687a      	ldr	r2, [r7, #4]
 800adc2:	6812      	ldr	r2, [r2, #0]
 800adc4:	430b      	orrs	r3, r1
 800adc6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	69db      	ldr	r3, [r3, #28]
 800adce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800add2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	685b      	ldr	r3, [r3, #4]
 800adda:	4956      	ldr	r1, [pc, #344]	; (800af34 <HAL_I2C_Init+0x25c>)
 800addc:	428b      	cmp	r3, r1
 800adde:	d80d      	bhi.n	800adfc <HAL_I2C_Init+0x124>
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	1e59      	subs	r1, r3, #1
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	685b      	ldr	r3, [r3, #4]
 800ade8:	005b      	lsls	r3, r3, #1
 800adea:	fbb1 f3f3 	udiv	r3, r1, r3
 800adee:	3301      	adds	r3, #1
 800adf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800adf4:	2b04      	cmp	r3, #4
 800adf6:	bf38      	it	cc
 800adf8:	2304      	movcc	r3, #4
 800adfa:	e04f      	b.n	800ae9c <HAL_I2C_Init+0x1c4>
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	689b      	ldr	r3, [r3, #8]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d111      	bne.n	800ae28 <HAL_I2C_Init+0x150>
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	1e58      	subs	r0, r3, #1
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	6859      	ldr	r1, [r3, #4]
 800ae0c:	460b      	mov	r3, r1
 800ae0e:	005b      	lsls	r3, r3, #1
 800ae10:	440b      	add	r3, r1
 800ae12:	fbb0 f3f3 	udiv	r3, r0, r3
 800ae16:	3301      	adds	r3, #1
 800ae18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	bf0c      	ite	eq
 800ae20:	2301      	moveq	r3, #1
 800ae22:	2300      	movne	r3, #0
 800ae24:	b2db      	uxtb	r3, r3
 800ae26:	e012      	b.n	800ae4e <HAL_I2C_Init+0x176>
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	1e58      	subs	r0, r3, #1
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	6859      	ldr	r1, [r3, #4]
 800ae30:	460b      	mov	r3, r1
 800ae32:	009b      	lsls	r3, r3, #2
 800ae34:	440b      	add	r3, r1
 800ae36:	0099      	lsls	r1, r3, #2
 800ae38:	440b      	add	r3, r1
 800ae3a:	fbb0 f3f3 	udiv	r3, r0, r3
 800ae3e:	3301      	adds	r3, #1
 800ae40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	bf0c      	ite	eq
 800ae48:	2301      	moveq	r3, #1
 800ae4a:	2300      	movne	r3, #0
 800ae4c:	b2db      	uxtb	r3, r3
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d001      	beq.n	800ae56 <HAL_I2C_Init+0x17e>
 800ae52:	2301      	movs	r3, #1
 800ae54:	e022      	b.n	800ae9c <HAL_I2C_Init+0x1c4>
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	689b      	ldr	r3, [r3, #8]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d10e      	bne.n	800ae7c <HAL_I2C_Init+0x1a4>
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	1e58      	subs	r0, r3, #1
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	6859      	ldr	r1, [r3, #4]
 800ae66:	460b      	mov	r3, r1
 800ae68:	005b      	lsls	r3, r3, #1
 800ae6a:	440b      	add	r3, r1
 800ae6c:	fbb0 f3f3 	udiv	r3, r0, r3
 800ae70:	3301      	adds	r3, #1
 800ae72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ae76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ae7a:	e00f      	b.n	800ae9c <HAL_I2C_Init+0x1c4>
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	1e58      	subs	r0, r3, #1
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	6859      	ldr	r1, [r3, #4]
 800ae84:	460b      	mov	r3, r1
 800ae86:	009b      	lsls	r3, r3, #2
 800ae88:	440b      	add	r3, r1
 800ae8a:	0099      	lsls	r1, r3, #2
 800ae8c:	440b      	add	r3, r1
 800ae8e:	fbb0 f3f3 	udiv	r3, r0, r3
 800ae92:	3301      	adds	r3, #1
 800ae94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ae98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ae9c:	6879      	ldr	r1, [r7, #4]
 800ae9e:	6809      	ldr	r1, [r1, #0]
 800aea0:	4313      	orrs	r3, r2
 800aea2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	69da      	ldr	r2, [r3, #28]
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	6a1b      	ldr	r3, [r3, #32]
 800aeb6:	431a      	orrs	r2, r3
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	430a      	orrs	r2, r1
 800aebe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	689b      	ldr	r3, [r3, #8]
 800aec6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800aeca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800aece:	687a      	ldr	r2, [r7, #4]
 800aed0:	6911      	ldr	r1, [r2, #16]
 800aed2:	687a      	ldr	r2, [r7, #4]
 800aed4:	68d2      	ldr	r2, [r2, #12]
 800aed6:	4311      	orrs	r1, r2
 800aed8:	687a      	ldr	r2, [r7, #4]
 800aeda:	6812      	ldr	r2, [r2, #0]
 800aedc:	430b      	orrs	r3, r1
 800aede:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	68db      	ldr	r3, [r3, #12]
 800aee6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	695a      	ldr	r2, [r3, #20]
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	699b      	ldr	r3, [r3, #24]
 800aef2:	431a      	orrs	r2, r3
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	430a      	orrs	r2, r1
 800aefa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	681a      	ldr	r2, [r3, #0]
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	f042 0201 	orr.w	r2, r2, #1
 800af0a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	2200      	movs	r2, #0
 800af10:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	2220      	movs	r2, #32
 800af16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	2200      	movs	r2, #0
 800af1e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	2200      	movs	r2, #0
 800af24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800af28:	2300      	movs	r3, #0
}
 800af2a:	4618      	mov	r0, r3
 800af2c:	3710      	adds	r7, #16
 800af2e:	46bd      	mov	sp, r7
 800af30:	bd80      	pop	{r7, pc}
 800af32:	bf00      	nop
 800af34:	000186a0 	.word	0x000186a0
 800af38:	001e847f 	.word	0x001e847f
 800af3c:	003d08ff 	.word	0x003d08ff
 800af40:	431bde83 	.word	0x431bde83
 800af44:	10624dd3 	.word	0x10624dd3

0800af48 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800af48:	b580      	push	{r7, lr}
 800af4a:	b088      	sub	sp, #32
 800af4c:	af02      	add	r7, sp, #8
 800af4e:	60f8      	str	r0, [r7, #12]
 800af50:	607a      	str	r2, [r7, #4]
 800af52:	461a      	mov	r2, r3
 800af54:	460b      	mov	r3, r1
 800af56:	817b      	strh	r3, [r7, #10]
 800af58:	4613      	mov	r3, r2
 800af5a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800af5c:	f7fe fc00 	bl	8009760 <HAL_GetTick>
 800af60:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800af68:	b2db      	uxtb	r3, r3
 800af6a:	2b20      	cmp	r3, #32
 800af6c:	f040 80e0 	bne.w	800b130 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800af70:	697b      	ldr	r3, [r7, #20]
 800af72:	9300      	str	r3, [sp, #0]
 800af74:	2319      	movs	r3, #25
 800af76:	2201      	movs	r2, #1
 800af78:	4970      	ldr	r1, [pc, #448]	; (800b13c <HAL_I2C_Master_Transmit+0x1f4>)
 800af7a:	68f8      	ldr	r0, [r7, #12]
 800af7c:	f000 fc58 	bl	800b830 <I2C_WaitOnFlagUntilTimeout>
 800af80:	4603      	mov	r3, r0
 800af82:	2b00      	cmp	r3, #0
 800af84:	d001      	beq.n	800af8a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800af86:	2302      	movs	r3, #2
 800af88:	e0d3      	b.n	800b132 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800af90:	2b01      	cmp	r3, #1
 800af92:	d101      	bne.n	800af98 <HAL_I2C_Master_Transmit+0x50>
 800af94:	2302      	movs	r3, #2
 800af96:	e0cc      	b.n	800b132 <HAL_I2C_Master_Transmit+0x1ea>
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	2201      	movs	r2, #1
 800af9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	f003 0301 	and.w	r3, r3, #1
 800afaa:	2b01      	cmp	r3, #1
 800afac:	d007      	beq.n	800afbe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	681a      	ldr	r2, [r3, #0]
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	f042 0201 	orr.w	r2, r2, #1
 800afbc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	681a      	ldr	r2, [r3, #0]
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800afcc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	2221      	movs	r2, #33	; 0x21
 800afd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	2210      	movs	r2, #16
 800afda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	2200      	movs	r2, #0
 800afe2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	687a      	ldr	r2, [r7, #4]
 800afe8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	893a      	ldrh	r2, [r7, #8]
 800afee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aff4:	b29a      	uxth	r2, r3
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	4a50      	ldr	r2, [pc, #320]	; (800b140 <HAL_I2C_Master_Transmit+0x1f8>)
 800affe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800b000:	8979      	ldrh	r1, [r7, #10]
 800b002:	697b      	ldr	r3, [r7, #20]
 800b004:	6a3a      	ldr	r2, [r7, #32]
 800b006:	68f8      	ldr	r0, [r7, #12]
 800b008:	f000 fac2 	bl	800b590 <I2C_MasterRequestWrite>
 800b00c:	4603      	mov	r3, r0
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d001      	beq.n	800b016 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800b012:	2301      	movs	r3, #1
 800b014:	e08d      	b.n	800b132 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b016:	2300      	movs	r3, #0
 800b018:	613b      	str	r3, [r7, #16]
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	695b      	ldr	r3, [r3, #20]
 800b020:	613b      	str	r3, [r7, #16]
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	699b      	ldr	r3, [r3, #24]
 800b028:	613b      	str	r3, [r7, #16]
 800b02a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800b02c:	e066      	b.n	800b0fc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b02e:	697a      	ldr	r2, [r7, #20]
 800b030:	6a39      	ldr	r1, [r7, #32]
 800b032:	68f8      	ldr	r0, [r7, #12]
 800b034:	f000 fcd2 	bl	800b9dc <I2C_WaitOnTXEFlagUntilTimeout>
 800b038:	4603      	mov	r3, r0
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d00d      	beq.n	800b05a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b042:	2b04      	cmp	r3, #4
 800b044:	d107      	bne.n	800b056 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	681a      	ldr	r2, [r3, #0]
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b054:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b056:	2301      	movs	r3, #1
 800b058:	e06b      	b.n	800b132 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b05e:	781a      	ldrb	r2, [r3, #0]
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b06a:	1c5a      	adds	r2, r3, #1
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b074:	b29b      	uxth	r3, r3
 800b076:	3b01      	subs	r3, #1
 800b078:	b29a      	uxth	r2, r3
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b082:	3b01      	subs	r3, #1
 800b084:	b29a      	uxth	r2, r3
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	695b      	ldr	r3, [r3, #20]
 800b090:	f003 0304 	and.w	r3, r3, #4
 800b094:	2b04      	cmp	r3, #4
 800b096:	d11b      	bne.n	800b0d0 <HAL_I2C_Master_Transmit+0x188>
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d017      	beq.n	800b0d0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0a4:	781a      	ldrb	r2, [r3, #0]
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0b0:	1c5a      	adds	r2, r3, #1
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b0ba:	b29b      	uxth	r3, r3
 800b0bc:	3b01      	subs	r3, #1
 800b0be:	b29a      	uxth	r2, r3
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b0c8:	3b01      	subs	r3, #1
 800b0ca:	b29a      	uxth	r2, r3
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b0d0:	697a      	ldr	r2, [r7, #20]
 800b0d2:	6a39      	ldr	r1, [r7, #32]
 800b0d4:	68f8      	ldr	r0, [r7, #12]
 800b0d6:	f000 fcc2 	bl	800ba5e <I2C_WaitOnBTFFlagUntilTimeout>
 800b0da:	4603      	mov	r3, r0
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d00d      	beq.n	800b0fc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0e4:	2b04      	cmp	r3, #4
 800b0e6:	d107      	bne.n	800b0f8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	681a      	ldr	r2, [r3, #0]
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b0f6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800b0f8:	2301      	movs	r3, #1
 800b0fa:	e01a      	b.n	800b132 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b100:	2b00      	cmp	r3, #0
 800b102:	d194      	bne.n	800b02e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	681a      	ldr	r2, [r3, #0]
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b112:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	2220      	movs	r2, #32
 800b118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	2200      	movs	r2, #0
 800b120:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	2200      	movs	r2, #0
 800b128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b12c:	2300      	movs	r3, #0
 800b12e:	e000      	b.n	800b132 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800b130:	2302      	movs	r3, #2
  }
}
 800b132:	4618      	mov	r0, r3
 800b134:	3718      	adds	r7, #24
 800b136:	46bd      	mov	sp, r7
 800b138:	bd80      	pop	{r7, pc}
 800b13a:	bf00      	nop
 800b13c:	00100002 	.word	0x00100002
 800b140:	ffff0000 	.word	0xffff0000

0800b144 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b144:	b580      	push	{r7, lr}
 800b146:	b08c      	sub	sp, #48	; 0x30
 800b148:	af02      	add	r7, sp, #8
 800b14a:	60f8      	str	r0, [r7, #12]
 800b14c:	607a      	str	r2, [r7, #4]
 800b14e:	461a      	mov	r2, r3
 800b150:	460b      	mov	r3, r1
 800b152:	817b      	strh	r3, [r7, #10]
 800b154:	4613      	mov	r3, r2
 800b156:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800b158:	f7fe fb02 	bl	8009760 <HAL_GetTick>
 800b15c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b164:	b2db      	uxtb	r3, r3
 800b166:	2b20      	cmp	r3, #32
 800b168:	f040 820b 	bne.w	800b582 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800b16c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b16e:	9300      	str	r3, [sp, #0]
 800b170:	2319      	movs	r3, #25
 800b172:	2201      	movs	r2, #1
 800b174:	497c      	ldr	r1, [pc, #496]	; (800b368 <HAL_I2C_Master_Receive+0x224>)
 800b176:	68f8      	ldr	r0, [r7, #12]
 800b178:	f000 fb5a 	bl	800b830 <I2C_WaitOnFlagUntilTimeout>
 800b17c:	4603      	mov	r3, r0
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d001      	beq.n	800b186 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800b182:	2302      	movs	r3, #2
 800b184:	e1fe      	b.n	800b584 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b18c:	2b01      	cmp	r3, #1
 800b18e:	d101      	bne.n	800b194 <HAL_I2C_Master_Receive+0x50>
 800b190:	2302      	movs	r3, #2
 800b192:	e1f7      	b.n	800b584 <HAL_I2C_Master_Receive+0x440>
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	2201      	movs	r2, #1
 800b198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	f003 0301 	and.w	r3, r3, #1
 800b1a6:	2b01      	cmp	r3, #1
 800b1a8:	d007      	beq.n	800b1ba <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	681a      	ldr	r2, [r3, #0]
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	f042 0201 	orr.w	r2, r2, #1
 800b1b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	681a      	ldr	r2, [r3, #0]
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b1c8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	2222      	movs	r2, #34	; 0x22
 800b1ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	2210      	movs	r2, #16
 800b1d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	2200      	movs	r2, #0
 800b1de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	687a      	ldr	r2, [r7, #4]
 800b1e4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	893a      	ldrh	r2, [r7, #8]
 800b1ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b1f0:	b29a      	uxth	r2, r3
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	4a5c      	ldr	r2, [pc, #368]	; (800b36c <HAL_I2C_Master_Receive+0x228>)
 800b1fa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800b1fc:	8979      	ldrh	r1, [r7, #10]
 800b1fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b200:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b202:	68f8      	ldr	r0, [r7, #12]
 800b204:	f000 fa46 	bl	800b694 <I2C_MasterRequestRead>
 800b208:	4603      	mov	r3, r0
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d001      	beq.n	800b212 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800b20e:	2301      	movs	r3, #1
 800b210:	e1b8      	b.n	800b584 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b216:	2b00      	cmp	r3, #0
 800b218:	d113      	bne.n	800b242 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b21a:	2300      	movs	r3, #0
 800b21c:	623b      	str	r3, [r7, #32]
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	695b      	ldr	r3, [r3, #20]
 800b224:	623b      	str	r3, [r7, #32]
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	699b      	ldr	r3, [r3, #24]
 800b22c:	623b      	str	r3, [r7, #32]
 800b22e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	681a      	ldr	r2, [r3, #0]
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b23e:	601a      	str	r2, [r3, #0]
 800b240:	e18c      	b.n	800b55c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b246:	2b01      	cmp	r3, #1
 800b248:	d11b      	bne.n	800b282 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	681a      	ldr	r2, [r3, #0]
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b258:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b25a:	2300      	movs	r3, #0
 800b25c:	61fb      	str	r3, [r7, #28]
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	695b      	ldr	r3, [r3, #20]
 800b264:	61fb      	str	r3, [r7, #28]
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	699b      	ldr	r3, [r3, #24]
 800b26c:	61fb      	str	r3, [r7, #28]
 800b26e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	681a      	ldr	r2, [r3, #0]
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b27e:	601a      	str	r2, [r3, #0]
 800b280:	e16c      	b.n	800b55c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b286:	2b02      	cmp	r3, #2
 800b288:	d11b      	bne.n	800b2c2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	681a      	ldr	r2, [r3, #0]
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b298:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	681a      	ldr	r2, [r3, #0]
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b2a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	61bb      	str	r3, [r7, #24]
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	695b      	ldr	r3, [r3, #20]
 800b2b4:	61bb      	str	r3, [r7, #24]
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	699b      	ldr	r3, [r3, #24]
 800b2bc:	61bb      	str	r3, [r7, #24]
 800b2be:	69bb      	ldr	r3, [r7, #24]
 800b2c0:	e14c      	b.n	800b55c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	681a      	ldr	r2, [r3, #0]
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b2d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	617b      	str	r3, [r7, #20]
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	695b      	ldr	r3, [r3, #20]
 800b2dc:	617b      	str	r3, [r7, #20]
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	699b      	ldr	r3, [r3, #24]
 800b2e4:	617b      	str	r3, [r7, #20]
 800b2e6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800b2e8:	e138      	b.n	800b55c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b2ee:	2b03      	cmp	r3, #3
 800b2f0:	f200 80f1 	bhi.w	800b4d6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b2f8:	2b01      	cmp	r3, #1
 800b2fa:	d123      	bne.n	800b344 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b2fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b2fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b300:	68f8      	ldr	r0, [r7, #12]
 800b302:	f000 fbed 	bl	800bae0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b306:	4603      	mov	r3, r0
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d001      	beq.n	800b310 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800b30c:	2301      	movs	r3, #1
 800b30e:	e139      	b.n	800b584 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	691a      	ldr	r2, [r3, #16]
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b31a:	b2d2      	uxtb	r2, r2
 800b31c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b322:	1c5a      	adds	r2, r3, #1
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b32c:	3b01      	subs	r3, #1
 800b32e:	b29a      	uxth	r2, r3
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b338:	b29b      	uxth	r3, r3
 800b33a:	3b01      	subs	r3, #1
 800b33c:	b29a      	uxth	r2, r3
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b342:	e10b      	b.n	800b55c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b348:	2b02      	cmp	r3, #2
 800b34a:	d14e      	bne.n	800b3ea <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b34c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b34e:	9300      	str	r3, [sp, #0]
 800b350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b352:	2200      	movs	r2, #0
 800b354:	4906      	ldr	r1, [pc, #24]	; (800b370 <HAL_I2C_Master_Receive+0x22c>)
 800b356:	68f8      	ldr	r0, [r7, #12]
 800b358:	f000 fa6a 	bl	800b830 <I2C_WaitOnFlagUntilTimeout>
 800b35c:	4603      	mov	r3, r0
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d008      	beq.n	800b374 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800b362:	2301      	movs	r3, #1
 800b364:	e10e      	b.n	800b584 <HAL_I2C_Master_Receive+0x440>
 800b366:	bf00      	nop
 800b368:	00100002 	.word	0x00100002
 800b36c:	ffff0000 	.word	0xffff0000
 800b370:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	681a      	ldr	r2, [r3, #0]
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b382:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	691a      	ldr	r2, [r3, #16]
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b38e:	b2d2      	uxtb	r2, r2
 800b390:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b396:	1c5a      	adds	r2, r3, #1
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b3a0:	3b01      	subs	r3, #1
 800b3a2:	b29a      	uxth	r2, r3
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b3ac:	b29b      	uxth	r3, r3
 800b3ae:	3b01      	subs	r3, #1
 800b3b0:	b29a      	uxth	r2, r3
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	691a      	ldr	r2, [r3, #16]
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3c0:	b2d2      	uxtb	r2, r2
 800b3c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3c8:	1c5a      	adds	r2, r3, #1
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b3d2:	3b01      	subs	r3, #1
 800b3d4:	b29a      	uxth	r2, r3
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b3de:	b29b      	uxth	r3, r3
 800b3e0:	3b01      	subs	r3, #1
 800b3e2:	b29a      	uxth	r2, r3
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b3e8:	e0b8      	b.n	800b55c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b3ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3ec:	9300      	str	r3, [sp, #0]
 800b3ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	4966      	ldr	r1, [pc, #408]	; (800b58c <HAL_I2C_Master_Receive+0x448>)
 800b3f4:	68f8      	ldr	r0, [r7, #12]
 800b3f6:	f000 fa1b 	bl	800b830 <I2C_WaitOnFlagUntilTimeout>
 800b3fa:	4603      	mov	r3, r0
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d001      	beq.n	800b404 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800b400:	2301      	movs	r3, #1
 800b402:	e0bf      	b.n	800b584 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	681a      	ldr	r2, [r3, #0]
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b412:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	691a      	ldr	r2, [r3, #16]
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b41e:	b2d2      	uxtb	r2, r2
 800b420:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b426:	1c5a      	adds	r2, r3, #1
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b430:	3b01      	subs	r3, #1
 800b432:	b29a      	uxth	r2, r3
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b43c:	b29b      	uxth	r3, r3
 800b43e:	3b01      	subs	r3, #1
 800b440:	b29a      	uxth	r2, r3
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800b446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b448:	9300      	str	r3, [sp, #0]
 800b44a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b44c:	2200      	movs	r2, #0
 800b44e:	494f      	ldr	r1, [pc, #316]	; (800b58c <HAL_I2C_Master_Receive+0x448>)
 800b450:	68f8      	ldr	r0, [r7, #12]
 800b452:	f000 f9ed 	bl	800b830 <I2C_WaitOnFlagUntilTimeout>
 800b456:	4603      	mov	r3, r0
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d001      	beq.n	800b460 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800b45c:	2301      	movs	r3, #1
 800b45e:	e091      	b.n	800b584 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	681a      	ldr	r2, [r3, #0]
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b46e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	691a      	ldr	r2, [r3, #16]
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b47a:	b2d2      	uxtb	r2, r2
 800b47c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b482:	1c5a      	adds	r2, r3, #1
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b48c:	3b01      	subs	r3, #1
 800b48e:	b29a      	uxth	r2, r3
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b498:	b29b      	uxth	r3, r3
 800b49a:	3b01      	subs	r3, #1
 800b49c:	b29a      	uxth	r2, r3
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	691a      	ldr	r2, [r3, #16]
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4ac:	b2d2      	uxtb	r2, r2
 800b4ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4b4:	1c5a      	adds	r2, r3, #1
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b4be:	3b01      	subs	r3, #1
 800b4c0:	b29a      	uxth	r2, r3
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b4ca:	b29b      	uxth	r3, r3
 800b4cc:	3b01      	subs	r3, #1
 800b4ce:	b29a      	uxth	r2, r3
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b4d4:	e042      	b.n	800b55c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b4d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b4d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b4da:	68f8      	ldr	r0, [r7, #12]
 800b4dc:	f000 fb00 	bl	800bae0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800b4e0:	4603      	mov	r3, r0
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d001      	beq.n	800b4ea <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800b4e6:	2301      	movs	r3, #1
 800b4e8:	e04c      	b.n	800b584 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	691a      	ldr	r2, [r3, #16]
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4f4:	b2d2      	uxtb	r2, r2
 800b4f6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4fc:	1c5a      	adds	r2, r3, #1
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b506:	3b01      	subs	r3, #1
 800b508:	b29a      	uxth	r2, r3
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b512:	b29b      	uxth	r3, r3
 800b514:	3b01      	subs	r3, #1
 800b516:	b29a      	uxth	r2, r3
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	695b      	ldr	r3, [r3, #20]
 800b522:	f003 0304 	and.w	r3, r3, #4
 800b526:	2b04      	cmp	r3, #4
 800b528:	d118      	bne.n	800b55c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	691a      	ldr	r2, [r3, #16]
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b534:	b2d2      	uxtb	r2, r2
 800b536:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b53c:	1c5a      	adds	r2, r3, #1
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b546:	3b01      	subs	r3, #1
 800b548:	b29a      	uxth	r2, r3
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b552:	b29b      	uxth	r3, r3
 800b554:	3b01      	subs	r3, #1
 800b556:	b29a      	uxth	r2, r3
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b560:	2b00      	cmp	r3, #0
 800b562:	f47f aec2 	bne.w	800b2ea <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	2220      	movs	r2, #32
 800b56a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	2200      	movs	r2, #0
 800b572:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	2200      	movs	r2, #0
 800b57a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800b57e:	2300      	movs	r3, #0
 800b580:	e000      	b.n	800b584 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800b582:	2302      	movs	r3, #2
  }
}
 800b584:	4618      	mov	r0, r3
 800b586:	3728      	adds	r7, #40	; 0x28
 800b588:	46bd      	mov	sp, r7
 800b58a:	bd80      	pop	{r7, pc}
 800b58c:	00010004 	.word	0x00010004

0800b590 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800b590:	b580      	push	{r7, lr}
 800b592:	b088      	sub	sp, #32
 800b594:	af02      	add	r7, sp, #8
 800b596:	60f8      	str	r0, [r7, #12]
 800b598:	607a      	str	r2, [r7, #4]
 800b59a:	603b      	str	r3, [r7, #0]
 800b59c:	460b      	mov	r3, r1
 800b59e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5a4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800b5a6:	697b      	ldr	r3, [r7, #20]
 800b5a8:	2b08      	cmp	r3, #8
 800b5aa:	d006      	beq.n	800b5ba <I2C_MasterRequestWrite+0x2a>
 800b5ac:	697b      	ldr	r3, [r7, #20]
 800b5ae:	2b01      	cmp	r3, #1
 800b5b0:	d003      	beq.n	800b5ba <I2C_MasterRequestWrite+0x2a>
 800b5b2:	697b      	ldr	r3, [r7, #20]
 800b5b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b5b8:	d108      	bne.n	800b5cc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	681a      	ldr	r2, [r3, #0]
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b5c8:	601a      	str	r2, [r3, #0]
 800b5ca:	e00b      	b.n	800b5e4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5d0:	2b12      	cmp	r3, #18
 800b5d2:	d107      	bne.n	800b5e4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	681a      	ldr	r2, [r3, #0]
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b5e2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b5e4:	683b      	ldr	r3, [r7, #0]
 800b5e6:	9300      	str	r3, [sp, #0]
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	2200      	movs	r2, #0
 800b5ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b5f0:	68f8      	ldr	r0, [r7, #12]
 800b5f2:	f000 f91d 	bl	800b830 <I2C_WaitOnFlagUntilTimeout>
 800b5f6:	4603      	mov	r3, r0
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d00d      	beq.n	800b618 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b606:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b60a:	d103      	bne.n	800b614 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b612:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800b614:	2303      	movs	r3, #3
 800b616:	e035      	b.n	800b684 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	691b      	ldr	r3, [r3, #16]
 800b61c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b620:	d108      	bne.n	800b634 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b622:	897b      	ldrh	r3, [r7, #10]
 800b624:	b2db      	uxtb	r3, r3
 800b626:	461a      	mov	r2, r3
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800b630:	611a      	str	r2, [r3, #16]
 800b632:	e01b      	b.n	800b66c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800b634:	897b      	ldrh	r3, [r7, #10]
 800b636:	11db      	asrs	r3, r3, #7
 800b638:	b2db      	uxtb	r3, r3
 800b63a:	f003 0306 	and.w	r3, r3, #6
 800b63e:	b2db      	uxtb	r3, r3
 800b640:	f063 030f 	orn	r3, r3, #15
 800b644:	b2da      	uxtb	r2, r3
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800b64c:	683b      	ldr	r3, [r7, #0]
 800b64e:	687a      	ldr	r2, [r7, #4]
 800b650:	490e      	ldr	r1, [pc, #56]	; (800b68c <I2C_MasterRequestWrite+0xfc>)
 800b652:	68f8      	ldr	r0, [r7, #12]
 800b654:	f000 f943 	bl	800b8de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b658:	4603      	mov	r3, r0
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d001      	beq.n	800b662 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800b65e:	2301      	movs	r3, #1
 800b660:	e010      	b.n	800b684 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800b662:	897b      	ldrh	r3, [r7, #10]
 800b664:	b2da      	uxtb	r2, r3
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b66c:	683b      	ldr	r3, [r7, #0]
 800b66e:	687a      	ldr	r2, [r7, #4]
 800b670:	4907      	ldr	r1, [pc, #28]	; (800b690 <I2C_MasterRequestWrite+0x100>)
 800b672:	68f8      	ldr	r0, [r7, #12]
 800b674:	f000 f933 	bl	800b8de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b678:	4603      	mov	r3, r0
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d001      	beq.n	800b682 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800b67e:	2301      	movs	r3, #1
 800b680:	e000      	b.n	800b684 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800b682:	2300      	movs	r3, #0
}
 800b684:	4618      	mov	r0, r3
 800b686:	3718      	adds	r7, #24
 800b688:	46bd      	mov	sp, r7
 800b68a:	bd80      	pop	{r7, pc}
 800b68c:	00010008 	.word	0x00010008
 800b690:	00010002 	.word	0x00010002

0800b694 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800b694:	b580      	push	{r7, lr}
 800b696:	b088      	sub	sp, #32
 800b698:	af02      	add	r7, sp, #8
 800b69a:	60f8      	str	r0, [r7, #12]
 800b69c:	607a      	str	r2, [r7, #4]
 800b69e:	603b      	str	r3, [r7, #0]
 800b6a0:	460b      	mov	r3, r1
 800b6a2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6a8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	681a      	ldr	r2, [r3, #0]
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b6b8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800b6ba:	697b      	ldr	r3, [r7, #20]
 800b6bc:	2b08      	cmp	r3, #8
 800b6be:	d006      	beq.n	800b6ce <I2C_MasterRequestRead+0x3a>
 800b6c0:	697b      	ldr	r3, [r7, #20]
 800b6c2:	2b01      	cmp	r3, #1
 800b6c4:	d003      	beq.n	800b6ce <I2C_MasterRequestRead+0x3a>
 800b6c6:	697b      	ldr	r3, [r7, #20]
 800b6c8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800b6cc:	d108      	bne.n	800b6e0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	681a      	ldr	r2, [r3, #0]
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b6dc:	601a      	str	r2, [r3, #0]
 800b6de:	e00b      	b.n	800b6f8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800b6e0:	68fb      	ldr	r3, [r7, #12]
 800b6e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6e4:	2b11      	cmp	r3, #17
 800b6e6:	d107      	bne.n	800b6f8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	681a      	ldr	r2, [r3, #0]
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b6f6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b6f8:	683b      	ldr	r3, [r7, #0]
 800b6fa:	9300      	str	r3, [sp, #0]
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	2200      	movs	r2, #0
 800b700:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b704:	68f8      	ldr	r0, [r7, #12]
 800b706:	f000 f893 	bl	800b830 <I2C_WaitOnFlagUntilTimeout>
 800b70a:	4603      	mov	r3, r0
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d00d      	beq.n	800b72c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b71a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b71e:	d103      	bne.n	800b728 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b726:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800b728:	2303      	movs	r3, #3
 800b72a:	e079      	b.n	800b820 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	691b      	ldr	r3, [r3, #16]
 800b730:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b734:	d108      	bne.n	800b748 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800b736:	897b      	ldrh	r3, [r7, #10]
 800b738:	b2db      	uxtb	r3, r3
 800b73a:	f043 0301 	orr.w	r3, r3, #1
 800b73e:	b2da      	uxtb	r2, r3
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	611a      	str	r2, [r3, #16]
 800b746:	e05f      	b.n	800b808 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800b748:	897b      	ldrh	r3, [r7, #10]
 800b74a:	11db      	asrs	r3, r3, #7
 800b74c:	b2db      	uxtb	r3, r3
 800b74e:	f003 0306 	and.w	r3, r3, #6
 800b752:	b2db      	uxtb	r3, r3
 800b754:	f063 030f 	orn	r3, r3, #15
 800b758:	b2da      	uxtb	r2, r3
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800b760:	683b      	ldr	r3, [r7, #0]
 800b762:	687a      	ldr	r2, [r7, #4]
 800b764:	4930      	ldr	r1, [pc, #192]	; (800b828 <I2C_MasterRequestRead+0x194>)
 800b766:	68f8      	ldr	r0, [r7, #12]
 800b768:	f000 f8b9 	bl	800b8de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b76c:	4603      	mov	r3, r0
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d001      	beq.n	800b776 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800b772:	2301      	movs	r3, #1
 800b774:	e054      	b.n	800b820 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800b776:	897b      	ldrh	r3, [r7, #10]
 800b778:	b2da      	uxtb	r2, r3
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b780:	683b      	ldr	r3, [r7, #0]
 800b782:	687a      	ldr	r2, [r7, #4]
 800b784:	4929      	ldr	r1, [pc, #164]	; (800b82c <I2C_MasterRequestRead+0x198>)
 800b786:	68f8      	ldr	r0, [r7, #12]
 800b788:	f000 f8a9 	bl	800b8de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b78c:	4603      	mov	r3, r0
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d001      	beq.n	800b796 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800b792:	2301      	movs	r3, #1
 800b794:	e044      	b.n	800b820 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b796:	2300      	movs	r3, #0
 800b798:	613b      	str	r3, [r7, #16]
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	695b      	ldr	r3, [r3, #20]
 800b7a0:	613b      	str	r3, [r7, #16]
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	699b      	ldr	r3, [r3, #24]
 800b7a8:	613b      	str	r3, [r7, #16]
 800b7aa:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	681a      	ldr	r2, [r3, #0]
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b7ba:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b7bc:	683b      	ldr	r3, [r7, #0]
 800b7be:	9300      	str	r3, [sp, #0]
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b7c8:	68f8      	ldr	r0, [r7, #12]
 800b7ca:	f000 f831 	bl	800b830 <I2C_WaitOnFlagUntilTimeout>
 800b7ce:	4603      	mov	r3, r0
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d00d      	beq.n	800b7f0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b7de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b7e2:	d103      	bne.n	800b7ec <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b7ea:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800b7ec:	2303      	movs	r3, #3
 800b7ee:	e017      	b.n	800b820 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800b7f0:	897b      	ldrh	r3, [r7, #10]
 800b7f2:	11db      	asrs	r3, r3, #7
 800b7f4:	b2db      	uxtb	r3, r3
 800b7f6:	f003 0306 	and.w	r3, r3, #6
 800b7fa:	b2db      	uxtb	r3, r3
 800b7fc:	f063 030e 	orn	r3, r3, #14
 800b800:	b2da      	uxtb	r2, r3
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b808:	683b      	ldr	r3, [r7, #0]
 800b80a:	687a      	ldr	r2, [r7, #4]
 800b80c:	4907      	ldr	r1, [pc, #28]	; (800b82c <I2C_MasterRequestRead+0x198>)
 800b80e:	68f8      	ldr	r0, [r7, #12]
 800b810:	f000 f865 	bl	800b8de <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b814:	4603      	mov	r3, r0
 800b816:	2b00      	cmp	r3, #0
 800b818:	d001      	beq.n	800b81e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800b81a:	2301      	movs	r3, #1
 800b81c:	e000      	b.n	800b820 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800b81e:	2300      	movs	r3, #0
}
 800b820:	4618      	mov	r0, r3
 800b822:	3718      	adds	r7, #24
 800b824:	46bd      	mov	sp, r7
 800b826:	bd80      	pop	{r7, pc}
 800b828:	00010008 	.word	0x00010008
 800b82c:	00010002 	.word	0x00010002

0800b830 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800b830:	b580      	push	{r7, lr}
 800b832:	b084      	sub	sp, #16
 800b834:	af00      	add	r7, sp, #0
 800b836:	60f8      	str	r0, [r7, #12]
 800b838:	60b9      	str	r1, [r7, #8]
 800b83a:	603b      	str	r3, [r7, #0]
 800b83c:	4613      	mov	r3, r2
 800b83e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b840:	e025      	b.n	800b88e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b842:	683b      	ldr	r3, [r7, #0]
 800b844:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b848:	d021      	beq.n	800b88e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b84a:	f7fd ff89 	bl	8009760 <HAL_GetTick>
 800b84e:	4602      	mov	r2, r0
 800b850:	69bb      	ldr	r3, [r7, #24]
 800b852:	1ad3      	subs	r3, r2, r3
 800b854:	683a      	ldr	r2, [r7, #0]
 800b856:	429a      	cmp	r2, r3
 800b858:	d302      	bcc.n	800b860 <I2C_WaitOnFlagUntilTimeout+0x30>
 800b85a:	683b      	ldr	r3, [r7, #0]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d116      	bne.n	800b88e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	2200      	movs	r2, #0
 800b864:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	2220      	movs	r2, #32
 800b86a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	2200      	movs	r2, #0
 800b872:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b87a:	f043 0220 	orr.w	r2, r3, #32
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	2200      	movs	r2, #0
 800b886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b88a:	2301      	movs	r3, #1
 800b88c:	e023      	b.n	800b8d6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b88e:	68bb      	ldr	r3, [r7, #8]
 800b890:	0c1b      	lsrs	r3, r3, #16
 800b892:	b2db      	uxtb	r3, r3
 800b894:	2b01      	cmp	r3, #1
 800b896:	d10d      	bne.n	800b8b4 <I2C_WaitOnFlagUntilTimeout+0x84>
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	695b      	ldr	r3, [r3, #20]
 800b89e:	43da      	mvns	r2, r3
 800b8a0:	68bb      	ldr	r3, [r7, #8]
 800b8a2:	4013      	ands	r3, r2
 800b8a4:	b29b      	uxth	r3, r3
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	bf0c      	ite	eq
 800b8aa:	2301      	moveq	r3, #1
 800b8ac:	2300      	movne	r3, #0
 800b8ae:	b2db      	uxtb	r3, r3
 800b8b0:	461a      	mov	r2, r3
 800b8b2:	e00c      	b.n	800b8ce <I2C_WaitOnFlagUntilTimeout+0x9e>
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	699b      	ldr	r3, [r3, #24]
 800b8ba:	43da      	mvns	r2, r3
 800b8bc:	68bb      	ldr	r3, [r7, #8]
 800b8be:	4013      	ands	r3, r2
 800b8c0:	b29b      	uxth	r3, r3
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	bf0c      	ite	eq
 800b8c6:	2301      	moveq	r3, #1
 800b8c8:	2300      	movne	r3, #0
 800b8ca:	b2db      	uxtb	r3, r3
 800b8cc:	461a      	mov	r2, r3
 800b8ce:	79fb      	ldrb	r3, [r7, #7]
 800b8d0:	429a      	cmp	r2, r3
 800b8d2:	d0b6      	beq.n	800b842 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b8d4:	2300      	movs	r3, #0
}
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	3710      	adds	r7, #16
 800b8da:	46bd      	mov	sp, r7
 800b8dc:	bd80      	pop	{r7, pc}

0800b8de <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800b8de:	b580      	push	{r7, lr}
 800b8e0:	b084      	sub	sp, #16
 800b8e2:	af00      	add	r7, sp, #0
 800b8e4:	60f8      	str	r0, [r7, #12]
 800b8e6:	60b9      	str	r1, [r7, #8]
 800b8e8:	607a      	str	r2, [r7, #4]
 800b8ea:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b8ec:	e051      	b.n	800b992 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	695b      	ldr	r3, [r3, #20]
 800b8f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b8f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b8fc:	d123      	bne.n	800b946 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	681a      	ldr	r2, [r3, #0]
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b90c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b916:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	2200      	movs	r2, #0
 800b91c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	2220      	movs	r2, #32
 800b922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	2200      	movs	r2, #0
 800b92a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b932:	f043 0204 	orr.w	r2, r3, #4
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	2200      	movs	r2, #0
 800b93e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800b942:	2301      	movs	r3, #1
 800b944:	e046      	b.n	800b9d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b94c:	d021      	beq.n	800b992 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b94e:	f7fd ff07 	bl	8009760 <HAL_GetTick>
 800b952:	4602      	mov	r2, r0
 800b954:	683b      	ldr	r3, [r7, #0]
 800b956:	1ad3      	subs	r3, r2, r3
 800b958:	687a      	ldr	r2, [r7, #4]
 800b95a:	429a      	cmp	r2, r3
 800b95c:	d302      	bcc.n	800b964 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d116      	bne.n	800b992 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	2200      	movs	r2, #0
 800b968:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	2220      	movs	r2, #32
 800b96e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	2200      	movs	r2, #0
 800b976:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b97e:	f043 0220 	orr.w	r2, r3, #32
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	2200      	movs	r2, #0
 800b98a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b98e:	2301      	movs	r3, #1
 800b990:	e020      	b.n	800b9d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b992:	68bb      	ldr	r3, [r7, #8]
 800b994:	0c1b      	lsrs	r3, r3, #16
 800b996:	b2db      	uxtb	r3, r3
 800b998:	2b01      	cmp	r3, #1
 800b99a:	d10c      	bne.n	800b9b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	695b      	ldr	r3, [r3, #20]
 800b9a2:	43da      	mvns	r2, r3
 800b9a4:	68bb      	ldr	r3, [r7, #8]
 800b9a6:	4013      	ands	r3, r2
 800b9a8:	b29b      	uxth	r3, r3
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	bf14      	ite	ne
 800b9ae:	2301      	movne	r3, #1
 800b9b0:	2300      	moveq	r3, #0
 800b9b2:	b2db      	uxtb	r3, r3
 800b9b4:	e00b      	b.n	800b9ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	699b      	ldr	r3, [r3, #24]
 800b9bc:	43da      	mvns	r2, r3
 800b9be:	68bb      	ldr	r3, [r7, #8]
 800b9c0:	4013      	ands	r3, r2
 800b9c2:	b29b      	uxth	r3, r3
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	bf14      	ite	ne
 800b9c8:	2301      	movne	r3, #1
 800b9ca:	2300      	moveq	r3, #0
 800b9cc:	b2db      	uxtb	r3, r3
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d18d      	bne.n	800b8ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800b9d2:	2300      	movs	r3, #0
}
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	3710      	adds	r7, #16
 800b9d8:	46bd      	mov	sp, r7
 800b9da:	bd80      	pop	{r7, pc}

0800b9dc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b9dc:	b580      	push	{r7, lr}
 800b9de:	b084      	sub	sp, #16
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	60f8      	str	r0, [r7, #12]
 800b9e4:	60b9      	str	r1, [r7, #8]
 800b9e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b9e8:	e02d      	b.n	800ba46 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b9ea:	68f8      	ldr	r0, [r7, #12]
 800b9ec:	f000 f8ce 	bl	800bb8c <I2C_IsAcknowledgeFailed>
 800b9f0:	4603      	mov	r3, r0
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d001      	beq.n	800b9fa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b9f6:	2301      	movs	r3, #1
 800b9f8:	e02d      	b.n	800ba56 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b9fa:	68bb      	ldr	r3, [r7, #8]
 800b9fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba00:	d021      	beq.n	800ba46 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ba02:	f7fd fead 	bl	8009760 <HAL_GetTick>
 800ba06:	4602      	mov	r2, r0
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	1ad3      	subs	r3, r2, r3
 800ba0c:	68ba      	ldr	r2, [r7, #8]
 800ba0e:	429a      	cmp	r2, r3
 800ba10:	d302      	bcc.n	800ba18 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800ba12:	68bb      	ldr	r3, [r7, #8]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d116      	bne.n	800ba46 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	2200      	movs	r2, #0
 800ba1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	2220      	movs	r2, #32
 800ba22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	2200      	movs	r2, #0
 800ba2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba32:	f043 0220 	orr.w	r2, r3, #32
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	2200      	movs	r2, #0
 800ba3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800ba42:	2301      	movs	r3, #1
 800ba44:	e007      	b.n	800ba56 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	695b      	ldr	r3, [r3, #20]
 800ba4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba50:	2b80      	cmp	r3, #128	; 0x80
 800ba52:	d1ca      	bne.n	800b9ea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ba54:	2300      	movs	r3, #0
}
 800ba56:	4618      	mov	r0, r3
 800ba58:	3710      	adds	r7, #16
 800ba5a:	46bd      	mov	sp, r7
 800ba5c:	bd80      	pop	{r7, pc}

0800ba5e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ba5e:	b580      	push	{r7, lr}
 800ba60:	b084      	sub	sp, #16
 800ba62:	af00      	add	r7, sp, #0
 800ba64:	60f8      	str	r0, [r7, #12]
 800ba66:	60b9      	str	r1, [r7, #8]
 800ba68:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800ba6a:	e02d      	b.n	800bac8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800ba6c:	68f8      	ldr	r0, [r7, #12]
 800ba6e:	f000 f88d 	bl	800bb8c <I2C_IsAcknowledgeFailed>
 800ba72:	4603      	mov	r3, r0
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d001      	beq.n	800ba7c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800ba78:	2301      	movs	r3, #1
 800ba7a:	e02d      	b.n	800bad8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ba7c:	68bb      	ldr	r3, [r7, #8]
 800ba7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba82:	d021      	beq.n	800bac8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ba84:	f7fd fe6c 	bl	8009760 <HAL_GetTick>
 800ba88:	4602      	mov	r2, r0
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	1ad3      	subs	r3, r2, r3
 800ba8e:	68ba      	ldr	r2, [r7, #8]
 800ba90:	429a      	cmp	r2, r3
 800ba92:	d302      	bcc.n	800ba9a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800ba94:	68bb      	ldr	r3, [r7, #8]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d116      	bne.n	800bac8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	2200      	movs	r2, #0
 800ba9e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	2220      	movs	r2, #32
 800baa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	2200      	movs	r2, #0
 800baac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bab4:	f043 0220 	orr.w	r2, r3, #32
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	2200      	movs	r2, #0
 800bac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800bac4:	2301      	movs	r3, #1
 800bac6:	e007      	b.n	800bad8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	695b      	ldr	r3, [r3, #20]
 800bace:	f003 0304 	and.w	r3, r3, #4
 800bad2:	2b04      	cmp	r3, #4
 800bad4:	d1ca      	bne.n	800ba6c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800bad6:	2300      	movs	r3, #0
}
 800bad8:	4618      	mov	r0, r3
 800bada:	3710      	adds	r7, #16
 800badc:	46bd      	mov	sp, r7
 800bade:	bd80      	pop	{r7, pc}

0800bae0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bae0:	b580      	push	{r7, lr}
 800bae2:	b084      	sub	sp, #16
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	60f8      	str	r0, [r7, #12]
 800bae8:	60b9      	str	r1, [r7, #8]
 800baea:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800baec:	e042      	b.n	800bb74 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	695b      	ldr	r3, [r3, #20]
 800baf4:	f003 0310 	and.w	r3, r3, #16
 800baf8:	2b10      	cmp	r3, #16
 800bafa:	d119      	bne.n	800bb30 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	f06f 0210 	mvn.w	r2, #16
 800bb04:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	2200      	movs	r2, #0
 800bb0a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	2220      	movs	r2, #32
 800bb10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	2200      	movs	r2, #0
 800bb18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	2200      	movs	r2, #0
 800bb28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800bb2c:	2301      	movs	r3, #1
 800bb2e:	e029      	b.n	800bb84 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bb30:	f7fd fe16 	bl	8009760 <HAL_GetTick>
 800bb34:	4602      	mov	r2, r0
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	1ad3      	subs	r3, r2, r3
 800bb3a:	68ba      	ldr	r2, [r7, #8]
 800bb3c:	429a      	cmp	r2, r3
 800bb3e:	d302      	bcc.n	800bb46 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800bb40:	68bb      	ldr	r3, [r7, #8]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d116      	bne.n	800bb74 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	2200      	movs	r2, #0
 800bb4a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	2220      	movs	r2, #32
 800bb50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	2200      	movs	r2, #0
 800bb58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb60:	f043 0220 	orr.w	r2, r3, #32
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800bb70:	2301      	movs	r3, #1
 800bb72:	e007      	b.n	800bb84 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	695b      	ldr	r3, [r3, #20]
 800bb7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb7e:	2b40      	cmp	r3, #64	; 0x40
 800bb80:	d1b5      	bne.n	800baee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800bb82:	2300      	movs	r3, #0
}
 800bb84:	4618      	mov	r0, r3
 800bb86:	3710      	adds	r7, #16
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	bd80      	pop	{r7, pc}

0800bb8c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800bb8c:	b480      	push	{r7}
 800bb8e:	b083      	sub	sp, #12
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	695b      	ldr	r3, [r3, #20]
 800bb9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bb9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bba2:	d11b      	bne.n	800bbdc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800bbac:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	2200      	movs	r2, #0
 800bbb2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	2220      	movs	r2, #32
 800bbb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbc8:	f043 0204 	orr.w	r2, r3, #4
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	2200      	movs	r2, #0
 800bbd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800bbd8:	2301      	movs	r3, #1
 800bbda:	e000      	b.n	800bbde <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800bbdc:	2300      	movs	r3, #0
}
 800bbde:	4618      	mov	r0, r3
 800bbe0:	370c      	adds	r7, #12
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe8:	4770      	bx	lr
	...

0800bbec <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800bbec:	b580      	push	{r7, lr}
 800bbee:	b082      	sub	sp, #8
 800bbf0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	603b      	str	r3, [r7, #0]
 800bbfa:	4b20      	ldr	r3, [pc, #128]	; (800bc7c <HAL_PWREx_EnableOverDrive+0x90>)
 800bbfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbfe:	4a1f      	ldr	r2, [pc, #124]	; (800bc7c <HAL_PWREx_EnableOverDrive+0x90>)
 800bc00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bc04:	6413      	str	r3, [r2, #64]	; 0x40
 800bc06:	4b1d      	ldr	r3, [pc, #116]	; (800bc7c <HAL_PWREx_EnableOverDrive+0x90>)
 800bc08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bc0e:	603b      	str	r3, [r7, #0]
 800bc10:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800bc12:	4b1b      	ldr	r3, [pc, #108]	; (800bc80 <HAL_PWREx_EnableOverDrive+0x94>)
 800bc14:	2201      	movs	r2, #1
 800bc16:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800bc18:	f7fd fda2 	bl	8009760 <HAL_GetTick>
 800bc1c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800bc1e:	e009      	b.n	800bc34 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800bc20:	f7fd fd9e 	bl	8009760 <HAL_GetTick>
 800bc24:	4602      	mov	r2, r0
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	1ad3      	subs	r3, r2, r3
 800bc2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bc2e:	d901      	bls.n	800bc34 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800bc30:	2303      	movs	r3, #3
 800bc32:	e01f      	b.n	800bc74 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800bc34:	4b13      	ldr	r3, [pc, #76]	; (800bc84 <HAL_PWREx_EnableOverDrive+0x98>)
 800bc36:	685b      	ldr	r3, [r3, #4]
 800bc38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bc3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bc40:	d1ee      	bne.n	800bc20 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800bc42:	4b11      	ldr	r3, [pc, #68]	; (800bc88 <HAL_PWREx_EnableOverDrive+0x9c>)
 800bc44:	2201      	movs	r2, #1
 800bc46:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800bc48:	f7fd fd8a 	bl	8009760 <HAL_GetTick>
 800bc4c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800bc4e:	e009      	b.n	800bc64 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800bc50:	f7fd fd86 	bl	8009760 <HAL_GetTick>
 800bc54:	4602      	mov	r2, r0
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	1ad3      	subs	r3, r2, r3
 800bc5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bc5e:	d901      	bls.n	800bc64 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800bc60:	2303      	movs	r3, #3
 800bc62:	e007      	b.n	800bc74 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800bc64:	4b07      	ldr	r3, [pc, #28]	; (800bc84 <HAL_PWREx_EnableOverDrive+0x98>)
 800bc66:	685b      	ldr	r3, [r3, #4]
 800bc68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bc70:	d1ee      	bne.n	800bc50 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800bc72:	2300      	movs	r3, #0
}
 800bc74:	4618      	mov	r0, r3
 800bc76:	3708      	adds	r7, #8
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	bd80      	pop	{r7, pc}
 800bc7c:	40023800 	.word	0x40023800
 800bc80:	420e0040 	.word	0x420e0040
 800bc84:	40007000 	.word	0x40007000
 800bc88:	420e0044 	.word	0x420e0044

0800bc8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800bc8c:	b580      	push	{r7, lr}
 800bc8e:	b084      	sub	sp, #16
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	6078      	str	r0, [r7, #4]
 800bc94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d101      	bne.n	800bca0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800bc9c:	2301      	movs	r3, #1
 800bc9e:	e0cc      	b.n	800be3a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800bca0:	4b68      	ldr	r3, [pc, #416]	; (800be44 <HAL_RCC_ClockConfig+0x1b8>)
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	f003 030f 	and.w	r3, r3, #15
 800bca8:	683a      	ldr	r2, [r7, #0]
 800bcaa:	429a      	cmp	r2, r3
 800bcac:	d90c      	bls.n	800bcc8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bcae:	4b65      	ldr	r3, [pc, #404]	; (800be44 <HAL_RCC_ClockConfig+0x1b8>)
 800bcb0:	683a      	ldr	r2, [r7, #0]
 800bcb2:	b2d2      	uxtb	r2, r2
 800bcb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800bcb6:	4b63      	ldr	r3, [pc, #396]	; (800be44 <HAL_RCC_ClockConfig+0x1b8>)
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	f003 030f 	and.w	r3, r3, #15
 800bcbe:	683a      	ldr	r2, [r7, #0]
 800bcc0:	429a      	cmp	r2, r3
 800bcc2:	d001      	beq.n	800bcc8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800bcc4:	2301      	movs	r3, #1
 800bcc6:	e0b8      	b.n	800be3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	f003 0302 	and.w	r3, r3, #2
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d020      	beq.n	800bd16 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	f003 0304 	and.w	r3, r3, #4
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d005      	beq.n	800bcec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800bce0:	4b59      	ldr	r3, [pc, #356]	; (800be48 <HAL_RCC_ClockConfig+0x1bc>)
 800bce2:	689b      	ldr	r3, [r3, #8]
 800bce4:	4a58      	ldr	r2, [pc, #352]	; (800be48 <HAL_RCC_ClockConfig+0x1bc>)
 800bce6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800bcea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	f003 0308 	and.w	r3, r3, #8
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d005      	beq.n	800bd04 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800bcf8:	4b53      	ldr	r3, [pc, #332]	; (800be48 <HAL_RCC_ClockConfig+0x1bc>)
 800bcfa:	689b      	ldr	r3, [r3, #8]
 800bcfc:	4a52      	ldr	r2, [pc, #328]	; (800be48 <HAL_RCC_ClockConfig+0x1bc>)
 800bcfe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800bd02:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bd04:	4b50      	ldr	r3, [pc, #320]	; (800be48 <HAL_RCC_ClockConfig+0x1bc>)
 800bd06:	689b      	ldr	r3, [r3, #8]
 800bd08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	689b      	ldr	r3, [r3, #8]
 800bd10:	494d      	ldr	r1, [pc, #308]	; (800be48 <HAL_RCC_ClockConfig+0x1bc>)
 800bd12:	4313      	orrs	r3, r2
 800bd14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	f003 0301 	and.w	r3, r3, #1
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d044      	beq.n	800bdac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	685b      	ldr	r3, [r3, #4]
 800bd26:	2b01      	cmp	r3, #1
 800bd28:	d107      	bne.n	800bd3a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bd2a:	4b47      	ldr	r3, [pc, #284]	; (800be48 <HAL_RCC_ClockConfig+0x1bc>)
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d119      	bne.n	800bd6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bd36:	2301      	movs	r3, #1
 800bd38:	e07f      	b.n	800be3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	685b      	ldr	r3, [r3, #4]
 800bd3e:	2b02      	cmp	r3, #2
 800bd40:	d003      	beq.n	800bd4a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800bd46:	2b03      	cmp	r3, #3
 800bd48:	d107      	bne.n	800bd5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bd4a:	4b3f      	ldr	r3, [pc, #252]	; (800be48 <HAL_RCC_ClockConfig+0x1bc>)
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d109      	bne.n	800bd6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bd56:	2301      	movs	r3, #1
 800bd58:	e06f      	b.n	800be3a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bd5a:	4b3b      	ldr	r3, [pc, #236]	; (800be48 <HAL_RCC_ClockConfig+0x1bc>)
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	f003 0302 	and.w	r3, r3, #2
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d101      	bne.n	800bd6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bd66:	2301      	movs	r3, #1
 800bd68:	e067      	b.n	800be3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800bd6a:	4b37      	ldr	r3, [pc, #220]	; (800be48 <HAL_RCC_ClockConfig+0x1bc>)
 800bd6c:	689b      	ldr	r3, [r3, #8]
 800bd6e:	f023 0203 	bic.w	r2, r3, #3
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	685b      	ldr	r3, [r3, #4]
 800bd76:	4934      	ldr	r1, [pc, #208]	; (800be48 <HAL_RCC_ClockConfig+0x1bc>)
 800bd78:	4313      	orrs	r3, r2
 800bd7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800bd7c:	f7fd fcf0 	bl	8009760 <HAL_GetTick>
 800bd80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bd82:	e00a      	b.n	800bd9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bd84:	f7fd fcec 	bl	8009760 <HAL_GetTick>
 800bd88:	4602      	mov	r2, r0
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	1ad3      	subs	r3, r2, r3
 800bd8e:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd92:	4293      	cmp	r3, r2
 800bd94:	d901      	bls.n	800bd9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800bd96:	2303      	movs	r3, #3
 800bd98:	e04f      	b.n	800be3a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bd9a:	4b2b      	ldr	r3, [pc, #172]	; (800be48 <HAL_RCC_ClockConfig+0x1bc>)
 800bd9c:	689b      	ldr	r3, [r3, #8]
 800bd9e:	f003 020c 	and.w	r2, r3, #12
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	685b      	ldr	r3, [r3, #4]
 800bda6:	009b      	lsls	r3, r3, #2
 800bda8:	429a      	cmp	r2, r3
 800bdaa:	d1eb      	bne.n	800bd84 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800bdac:	4b25      	ldr	r3, [pc, #148]	; (800be44 <HAL_RCC_ClockConfig+0x1b8>)
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	f003 030f 	and.w	r3, r3, #15
 800bdb4:	683a      	ldr	r2, [r7, #0]
 800bdb6:	429a      	cmp	r2, r3
 800bdb8:	d20c      	bcs.n	800bdd4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bdba:	4b22      	ldr	r3, [pc, #136]	; (800be44 <HAL_RCC_ClockConfig+0x1b8>)
 800bdbc:	683a      	ldr	r2, [r7, #0]
 800bdbe:	b2d2      	uxtb	r2, r2
 800bdc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800bdc2:	4b20      	ldr	r3, [pc, #128]	; (800be44 <HAL_RCC_ClockConfig+0x1b8>)
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	f003 030f 	and.w	r3, r3, #15
 800bdca:	683a      	ldr	r2, [r7, #0]
 800bdcc:	429a      	cmp	r2, r3
 800bdce:	d001      	beq.n	800bdd4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800bdd0:	2301      	movs	r3, #1
 800bdd2:	e032      	b.n	800be3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	f003 0304 	and.w	r3, r3, #4
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d008      	beq.n	800bdf2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800bde0:	4b19      	ldr	r3, [pc, #100]	; (800be48 <HAL_RCC_ClockConfig+0x1bc>)
 800bde2:	689b      	ldr	r3, [r3, #8]
 800bde4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	68db      	ldr	r3, [r3, #12]
 800bdec:	4916      	ldr	r1, [pc, #88]	; (800be48 <HAL_RCC_ClockConfig+0x1bc>)
 800bdee:	4313      	orrs	r3, r2
 800bdf0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	f003 0308 	and.w	r3, r3, #8
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d009      	beq.n	800be12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800bdfe:	4b12      	ldr	r3, [pc, #72]	; (800be48 <HAL_RCC_ClockConfig+0x1bc>)
 800be00:	689b      	ldr	r3, [r3, #8]
 800be02:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	691b      	ldr	r3, [r3, #16]
 800be0a:	00db      	lsls	r3, r3, #3
 800be0c:	490e      	ldr	r1, [pc, #56]	; (800be48 <HAL_RCC_ClockConfig+0x1bc>)
 800be0e:	4313      	orrs	r3, r2
 800be10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800be12:	f000 f821 	bl	800be58 <HAL_RCC_GetSysClockFreq>
 800be16:	4601      	mov	r1, r0
 800be18:	4b0b      	ldr	r3, [pc, #44]	; (800be48 <HAL_RCC_ClockConfig+0x1bc>)
 800be1a:	689b      	ldr	r3, [r3, #8]
 800be1c:	091b      	lsrs	r3, r3, #4
 800be1e:	f003 030f 	and.w	r3, r3, #15
 800be22:	4a0a      	ldr	r2, [pc, #40]	; (800be4c <HAL_RCC_ClockConfig+0x1c0>)
 800be24:	5cd3      	ldrb	r3, [r2, r3]
 800be26:	fa21 f303 	lsr.w	r3, r1, r3
 800be2a:	4a09      	ldr	r2, [pc, #36]	; (800be50 <HAL_RCC_ClockConfig+0x1c4>)
 800be2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800be2e:	4b09      	ldr	r3, [pc, #36]	; (800be54 <HAL_RCC_ClockConfig+0x1c8>)
 800be30:	681b      	ldr	r3, [r3, #0]
 800be32:	4618      	mov	r0, r3
 800be34:	f7fd fc50 	bl	80096d8 <HAL_InitTick>

  return HAL_OK;
 800be38:	2300      	movs	r3, #0
}
 800be3a:	4618      	mov	r0, r3
 800be3c:	3710      	adds	r7, #16
 800be3e:	46bd      	mov	sp, r7
 800be40:	bd80      	pop	{r7, pc}
 800be42:	bf00      	nop
 800be44:	40023c00 	.word	0x40023c00
 800be48:	40023800 	.word	0x40023800
 800be4c:	08019c44 	.word	0x08019c44
 800be50:	20000000 	.word	0x20000000
 800be54:	20000004 	.word	0x20000004

0800be58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800be58:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be5a:	b085      	sub	sp, #20
 800be5c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800be5e:	2300      	movs	r3, #0
 800be60:	607b      	str	r3, [r7, #4]
 800be62:	2300      	movs	r3, #0
 800be64:	60fb      	str	r3, [r7, #12]
 800be66:	2300      	movs	r3, #0
 800be68:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800be6a:	2300      	movs	r3, #0
 800be6c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800be6e:	4b63      	ldr	r3, [pc, #396]	; (800bffc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800be70:	689b      	ldr	r3, [r3, #8]
 800be72:	f003 030c 	and.w	r3, r3, #12
 800be76:	2b04      	cmp	r3, #4
 800be78:	d007      	beq.n	800be8a <HAL_RCC_GetSysClockFreq+0x32>
 800be7a:	2b08      	cmp	r3, #8
 800be7c:	d008      	beq.n	800be90 <HAL_RCC_GetSysClockFreq+0x38>
 800be7e:	2b00      	cmp	r3, #0
 800be80:	f040 80b4 	bne.w	800bfec <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800be84:	4b5e      	ldr	r3, [pc, #376]	; (800c000 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800be86:	60bb      	str	r3, [r7, #8]
       break;
 800be88:	e0b3      	b.n	800bff2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800be8a:	4b5d      	ldr	r3, [pc, #372]	; (800c000 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800be8c:	60bb      	str	r3, [r7, #8]
      break;
 800be8e:	e0b0      	b.n	800bff2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800be90:	4b5a      	ldr	r3, [pc, #360]	; (800bffc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800be92:	685b      	ldr	r3, [r3, #4]
 800be94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800be98:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800be9a:	4b58      	ldr	r3, [pc, #352]	; (800bffc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800be9c:	685b      	ldr	r3, [r3, #4]
 800be9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d04a      	beq.n	800bf3c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800bea6:	4b55      	ldr	r3, [pc, #340]	; (800bffc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800bea8:	685b      	ldr	r3, [r3, #4]
 800beaa:	099b      	lsrs	r3, r3, #6
 800beac:	f04f 0400 	mov.w	r4, #0
 800beb0:	f240 11ff 	movw	r1, #511	; 0x1ff
 800beb4:	f04f 0200 	mov.w	r2, #0
 800beb8:	ea03 0501 	and.w	r5, r3, r1
 800bebc:	ea04 0602 	and.w	r6, r4, r2
 800bec0:	4629      	mov	r1, r5
 800bec2:	4632      	mov	r2, r6
 800bec4:	f04f 0300 	mov.w	r3, #0
 800bec8:	f04f 0400 	mov.w	r4, #0
 800becc:	0154      	lsls	r4, r2, #5
 800bece:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800bed2:	014b      	lsls	r3, r1, #5
 800bed4:	4619      	mov	r1, r3
 800bed6:	4622      	mov	r2, r4
 800bed8:	1b49      	subs	r1, r1, r5
 800beda:	eb62 0206 	sbc.w	r2, r2, r6
 800bede:	f04f 0300 	mov.w	r3, #0
 800bee2:	f04f 0400 	mov.w	r4, #0
 800bee6:	0194      	lsls	r4, r2, #6
 800bee8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800beec:	018b      	lsls	r3, r1, #6
 800beee:	1a5b      	subs	r3, r3, r1
 800bef0:	eb64 0402 	sbc.w	r4, r4, r2
 800bef4:	f04f 0100 	mov.w	r1, #0
 800bef8:	f04f 0200 	mov.w	r2, #0
 800befc:	00e2      	lsls	r2, r4, #3
 800befe:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800bf02:	00d9      	lsls	r1, r3, #3
 800bf04:	460b      	mov	r3, r1
 800bf06:	4614      	mov	r4, r2
 800bf08:	195b      	adds	r3, r3, r5
 800bf0a:	eb44 0406 	adc.w	r4, r4, r6
 800bf0e:	f04f 0100 	mov.w	r1, #0
 800bf12:	f04f 0200 	mov.w	r2, #0
 800bf16:	02a2      	lsls	r2, r4, #10
 800bf18:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800bf1c:	0299      	lsls	r1, r3, #10
 800bf1e:	460b      	mov	r3, r1
 800bf20:	4614      	mov	r4, r2
 800bf22:	4618      	mov	r0, r3
 800bf24:	4621      	mov	r1, r4
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	f04f 0400 	mov.w	r4, #0
 800bf2c:	461a      	mov	r2, r3
 800bf2e:	4623      	mov	r3, r4
 800bf30:	f7f4 fec2 	bl	8000cb8 <__aeabi_uldivmod>
 800bf34:	4603      	mov	r3, r0
 800bf36:	460c      	mov	r4, r1
 800bf38:	60fb      	str	r3, [r7, #12]
 800bf3a:	e049      	b.n	800bfd0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800bf3c:	4b2f      	ldr	r3, [pc, #188]	; (800bffc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800bf3e:	685b      	ldr	r3, [r3, #4]
 800bf40:	099b      	lsrs	r3, r3, #6
 800bf42:	f04f 0400 	mov.w	r4, #0
 800bf46:	f240 11ff 	movw	r1, #511	; 0x1ff
 800bf4a:	f04f 0200 	mov.w	r2, #0
 800bf4e:	ea03 0501 	and.w	r5, r3, r1
 800bf52:	ea04 0602 	and.w	r6, r4, r2
 800bf56:	4629      	mov	r1, r5
 800bf58:	4632      	mov	r2, r6
 800bf5a:	f04f 0300 	mov.w	r3, #0
 800bf5e:	f04f 0400 	mov.w	r4, #0
 800bf62:	0154      	lsls	r4, r2, #5
 800bf64:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800bf68:	014b      	lsls	r3, r1, #5
 800bf6a:	4619      	mov	r1, r3
 800bf6c:	4622      	mov	r2, r4
 800bf6e:	1b49      	subs	r1, r1, r5
 800bf70:	eb62 0206 	sbc.w	r2, r2, r6
 800bf74:	f04f 0300 	mov.w	r3, #0
 800bf78:	f04f 0400 	mov.w	r4, #0
 800bf7c:	0194      	lsls	r4, r2, #6
 800bf7e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800bf82:	018b      	lsls	r3, r1, #6
 800bf84:	1a5b      	subs	r3, r3, r1
 800bf86:	eb64 0402 	sbc.w	r4, r4, r2
 800bf8a:	f04f 0100 	mov.w	r1, #0
 800bf8e:	f04f 0200 	mov.w	r2, #0
 800bf92:	00e2      	lsls	r2, r4, #3
 800bf94:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800bf98:	00d9      	lsls	r1, r3, #3
 800bf9a:	460b      	mov	r3, r1
 800bf9c:	4614      	mov	r4, r2
 800bf9e:	195b      	adds	r3, r3, r5
 800bfa0:	eb44 0406 	adc.w	r4, r4, r6
 800bfa4:	f04f 0100 	mov.w	r1, #0
 800bfa8:	f04f 0200 	mov.w	r2, #0
 800bfac:	02a2      	lsls	r2, r4, #10
 800bfae:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800bfb2:	0299      	lsls	r1, r3, #10
 800bfb4:	460b      	mov	r3, r1
 800bfb6:	4614      	mov	r4, r2
 800bfb8:	4618      	mov	r0, r3
 800bfba:	4621      	mov	r1, r4
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	f04f 0400 	mov.w	r4, #0
 800bfc2:	461a      	mov	r2, r3
 800bfc4:	4623      	mov	r3, r4
 800bfc6:	f7f4 fe77 	bl	8000cb8 <__aeabi_uldivmod>
 800bfca:	4603      	mov	r3, r0
 800bfcc:	460c      	mov	r4, r1
 800bfce:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800bfd0:	4b0a      	ldr	r3, [pc, #40]	; (800bffc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800bfd2:	685b      	ldr	r3, [r3, #4]
 800bfd4:	0c1b      	lsrs	r3, r3, #16
 800bfd6:	f003 0303 	and.w	r3, r3, #3
 800bfda:	3301      	adds	r3, #1
 800bfdc:	005b      	lsls	r3, r3, #1
 800bfde:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800bfe0:	68fa      	ldr	r2, [r7, #12]
 800bfe2:	683b      	ldr	r3, [r7, #0]
 800bfe4:	fbb2 f3f3 	udiv	r3, r2, r3
 800bfe8:	60bb      	str	r3, [r7, #8]
      break;
 800bfea:	e002      	b.n	800bff2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800bfec:	4b04      	ldr	r3, [pc, #16]	; (800c000 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800bfee:	60bb      	str	r3, [r7, #8]
      break;
 800bff0:	bf00      	nop
    }
  }
  return sysclockfreq;
 800bff2:	68bb      	ldr	r3, [r7, #8]
}
 800bff4:	4618      	mov	r0, r3
 800bff6:	3714      	adds	r7, #20
 800bff8:	46bd      	mov	sp, r7
 800bffa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bffc:	40023800 	.word	0x40023800
 800c000:	00f42400 	.word	0x00f42400

0800c004 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c004:	b480      	push	{r7}
 800c006:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c008:	4b03      	ldr	r3, [pc, #12]	; (800c018 <HAL_RCC_GetHCLKFreq+0x14>)
 800c00a:	681b      	ldr	r3, [r3, #0]
}
 800c00c:	4618      	mov	r0, r3
 800c00e:	46bd      	mov	sp, r7
 800c010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c014:	4770      	bx	lr
 800c016:	bf00      	nop
 800c018:	20000000 	.word	0x20000000

0800c01c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c01c:	b580      	push	{r7, lr}
 800c01e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800c020:	f7ff fff0 	bl	800c004 <HAL_RCC_GetHCLKFreq>
 800c024:	4601      	mov	r1, r0
 800c026:	4b05      	ldr	r3, [pc, #20]	; (800c03c <HAL_RCC_GetPCLK1Freq+0x20>)
 800c028:	689b      	ldr	r3, [r3, #8]
 800c02a:	0a9b      	lsrs	r3, r3, #10
 800c02c:	f003 0307 	and.w	r3, r3, #7
 800c030:	4a03      	ldr	r2, [pc, #12]	; (800c040 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c032:	5cd3      	ldrb	r3, [r2, r3]
 800c034:	fa21 f303 	lsr.w	r3, r1, r3
}
 800c038:	4618      	mov	r0, r3
 800c03a:	bd80      	pop	{r7, pc}
 800c03c:	40023800 	.word	0x40023800
 800c040:	08019c54 	.word	0x08019c54

0800c044 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c044:	b580      	push	{r7, lr}
 800c046:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800c048:	f7ff ffdc 	bl	800c004 <HAL_RCC_GetHCLKFreq>
 800c04c:	4601      	mov	r1, r0
 800c04e:	4b05      	ldr	r3, [pc, #20]	; (800c064 <HAL_RCC_GetPCLK2Freq+0x20>)
 800c050:	689b      	ldr	r3, [r3, #8]
 800c052:	0b5b      	lsrs	r3, r3, #13
 800c054:	f003 0307 	and.w	r3, r3, #7
 800c058:	4a03      	ldr	r2, [pc, #12]	; (800c068 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c05a:	5cd3      	ldrb	r3, [r2, r3]
 800c05c:	fa21 f303 	lsr.w	r3, r1, r3
}
 800c060:	4618      	mov	r0, r3
 800c062:	bd80      	pop	{r7, pc}
 800c064:	40023800 	.word	0x40023800
 800c068:	08019c54 	.word	0x08019c54

0800c06c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c06c:	b580      	push	{r7, lr}
 800c06e:	b088      	sub	sp, #32
 800c070:	af00      	add	r7, sp, #0
 800c072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c074:	2300      	movs	r3, #0
 800c076:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 800c078:	2300      	movs	r3, #0
 800c07a:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 800c07c:	2300      	movs	r3, #0
 800c07e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 800c080:	2300      	movs	r3, #0
 800c082:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 800c084:	2300      	movs	r3, #0
 800c086:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c090:	2b00      	cmp	r3, #0
 800c092:	d00a      	beq.n	800c0aa <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800c094:	4b66      	ldr	r3, [pc, #408]	; (800c230 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c096:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c09a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0a2:	4963      	ldr	r1, [pc, #396]	; (800c230 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c0a4:	4313      	orrs	r3, r2
 800c0a6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d00a      	beq.n	800c0cc <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800c0b6:	4b5e      	ldr	r3, [pc, #376]	; (800c230 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c0b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c0bc:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0c4:	495a      	ldr	r1, [pc, #360]	; (800c230 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c0c6:	4313      	orrs	r3, r2
 800c0c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	f003 0301 	and.w	r3, r3, #1
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d10b      	bne.n	800c0f0 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d105      	bne.n	800c0f0 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d075      	beq.n	800c1dc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800c0f0:	4b50      	ldr	r3, [pc, #320]	; (800c234 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800c0f2:	2200      	movs	r2, #0
 800c0f4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c0f6:	f7fd fb33 	bl	8009760 <HAL_GetTick>
 800c0fa:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c0fc:	e008      	b.n	800c110 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800c0fe:	f7fd fb2f 	bl	8009760 <HAL_GetTick>
 800c102:	4602      	mov	r2, r0
 800c104:	69fb      	ldr	r3, [r7, #28]
 800c106:	1ad3      	subs	r3, r2, r3
 800c108:	2b02      	cmp	r3, #2
 800c10a:	d901      	bls.n	800c110 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c10c:	2303      	movs	r3, #3
 800c10e:	e1dc      	b.n	800c4ca <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c110:	4b47      	ldr	r3, [pc, #284]	; (800c230 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d1f0      	bne.n	800c0fe <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	f003 0301 	and.w	r3, r3, #1
 800c124:	2b00      	cmp	r3, #0
 800c126:	d009      	beq.n	800c13c <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	685b      	ldr	r3, [r3, #4]
 800c12c:	019a      	lsls	r2, r3, #6
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	689b      	ldr	r3, [r3, #8]
 800c132:	071b      	lsls	r3, r3, #28
 800c134:	493e      	ldr	r1, [pc, #248]	; (800c230 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c136:	4313      	orrs	r3, r2
 800c138:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	f003 0302 	and.w	r3, r3, #2
 800c144:	2b00      	cmp	r3, #0
 800c146:	d01f      	beq.n	800c188 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800c148:	4b39      	ldr	r3, [pc, #228]	; (800c230 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c14a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c14e:	0f1b      	lsrs	r3, r3, #28
 800c150:	f003 0307 	and.w	r3, r3, #7
 800c154:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	685b      	ldr	r3, [r3, #4]
 800c15a:	019a      	lsls	r2, r3, #6
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	68db      	ldr	r3, [r3, #12]
 800c160:	061b      	lsls	r3, r3, #24
 800c162:	431a      	orrs	r2, r3
 800c164:	69bb      	ldr	r3, [r7, #24]
 800c166:	071b      	lsls	r3, r3, #28
 800c168:	4931      	ldr	r1, [pc, #196]	; (800c230 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c16a:	4313      	orrs	r3, r2
 800c16c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800c170:	4b2f      	ldr	r3, [pc, #188]	; (800c230 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c172:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c176:	f023 021f 	bic.w	r2, r3, #31
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	6a1b      	ldr	r3, [r3, #32]
 800c17e:	3b01      	subs	r3, #1
 800c180:	492b      	ldr	r1, [pc, #172]	; (800c230 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c182:	4313      	orrs	r3, r2
 800c184:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c190:	2b00      	cmp	r3, #0
 800c192:	d00d      	beq.n	800c1b0 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	685b      	ldr	r3, [r3, #4]
 800c198:	019a      	lsls	r2, r3, #6
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	68db      	ldr	r3, [r3, #12]
 800c19e:	061b      	lsls	r3, r3, #24
 800c1a0:	431a      	orrs	r2, r3
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	689b      	ldr	r3, [r3, #8]
 800c1a6:	071b      	lsls	r3, r3, #28
 800c1a8:	4921      	ldr	r1, [pc, #132]	; (800c230 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c1aa:	4313      	orrs	r3, r2
 800c1ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800c1b0:	4b20      	ldr	r3, [pc, #128]	; (800c234 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800c1b2:	2201      	movs	r2, #1
 800c1b4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c1b6:	f7fd fad3 	bl	8009760 <HAL_GetTick>
 800c1ba:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c1bc:	e008      	b.n	800c1d0 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800c1be:	f7fd facf 	bl	8009760 <HAL_GetTick>
 800c1c2:	4602      	mov	r2, r0
 800c1c4:	69fb      	ldr	r3, [r7, #28]
 800c1c6:	1ad3      	subs	r3, r2, r3
 800c1c8:	2b02      	cmp	r3, #2
 800c1ca:	d901      	bls.n	800c1d0 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c1cc:	2303      	movs	r3, #3
 800c1ce:	e17c      	b.n	800c4ca <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c1d0:	4b17      	ldr	r3, [pc, #92]	; (800c230 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d0f0      	beq.n	800c1be <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	f003 0304 	and.w	r3, r3, #4
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d112      	bne.n	800c20e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d10c      	bne.n	800c20e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	f000 80ce 	beq.w	800c39e <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 800c206:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c20a:	f040 80c8 	bne.w	800c39e <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800c20e:	4b0a      	ldr	r3, [pc, #40]	; (800c238 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800c210:	2200      	movs	r2, #0
 800c212:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c214:	f7fd faa4 	bl	8009760 <HAL_GetTick>
 800c218:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c21a:	e00f      	b.n	800c23c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800c21c:	f7fd faa0 	bl	8009760 <HAL_GetTick>
 800c220:	4602      	mov	r2, r0
 800c222:	69fb      	ldr	r3, [r7, #28]
 800c224:	1ad3      	subs	r3, r2, r3
 800c226:	2b02      	cmp	r3, #2
 800c228:	d908      	bls.n	800c23c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c22a:	2303      	movs	r3, #3
 800c22c:	e14d      	b.n	800c4ca <HAL_RCCEx_PeriphCLKConfig+0x45e>
 800c22e:	bf00      	nop
 800c230:	40023800 	.word	0x40023800
 800c234:	42470068 	.word	0x42470068
 800c238:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c23c:	4ba5      	ldr	r3, [pc, #660]	; (800c4d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c244:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c248:	d0e8      	beq.n	800c21c <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	f003 0304 	and.w	r3, r3, #4
 800c252:	2b00      	cmp	r3, #0
 800c254:	d02e      	beq.n	800c2b4 <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800c256:	4b9f      	ldr	r3, [pc, #636]	; (800c4d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c258:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c25c:	0c1b      	lsrs	r3, r3, #16
 800c25e:	f003 0303 	and.w	r3, r3, #3
 800c262:	3301      	adds	r3, #1
 800c264:	005b      	lsls	r3, r3, #1
 800c266:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c268:	4b9a      	ldr	r3, [pc, #616]	; (800c4d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c26a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c26e:	0f1b      	lsrs	r3, r3, #28
 800c270:	f003 0307 	and.w	r3, r3, #7
 800c274:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	691b      	ldr	r3, [r3, #16]
 800c27a:	019a      	lsls	r2, r3, #6
 800c27c:	697b      	ldr	r3, [r7, #20]
 800c27e:	085b      	lsrs	r3, r3, #1
 800c280:	3b01      	subs	r3, #1
 800c282:	041b      	lsls	r3, r3, #16
 800c284:	431a      	orrs	r2, r3
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	699b      	ldr	r3, [r3, #24]
 800c28a:	061b      	lsls	r3, r3, #24
 800c28c:	431a      	orrs	r2, r3
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	071b      	lsls	r3, r3, #28
 800c292:	4990      	ldr	r1, [pc, #576]	; (800c4d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c294:	4313      	orrs	r3, r2
 800c296:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800c29a:	4b8e      	ldr	r3, [pc, #568]	; (800c4d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c29c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c2a0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2a8:	3b01      	subs	r3, #1
 800c2aa:	021b      	lsls	r3, r3, #8
 800c2ac:	4989      	ldr	r1, [pc, #548]	; (800c4d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c2ae:	4313      	orrs	r3, r2
 800c2b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	f003 0308 	and.w	r3, r3, #8
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d02c      	beq.n	800c31a <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800c2c0:	4b84      	ldr	r3, [pc, #528]	; (800c4d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c2c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c2c6:	0c1b      	lsrs	r3, r3, #16
 800c2c8:	f003 0303 	and.w	r3, r3, #3
 800c2cc:	3301      	adds	r3, #1
 800c2ce:	005b      	lsls	r3, r3, #1
 800c2d0:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c2d2:	4b80      	ldr	r3, [pc, #512]	; (800c4d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c2d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c2d8:	0e1b      	lsrs	r3, r3, #24
 800c2da:	f003 030f 	and.w	r3, r3, #15
 800c2de:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	691b      	ldr	r3, [r3, #16]
 800c2e4:	019a      	lsls	r2, r3, #6
 800c2e6:	697b      	ldr	r3, [r7, #20]
 800c2e8:	085b      	lsrs	r3, r3, #1
 800c2ea:	3b01      	subs	r3, #1
 800c2ec:	041b      	lsls	r3, r3, #16
 800c2ee:	431a      	orrs	r2, r3
 800c2f0:	693b      	ldr	r3, [r7, #16]
 800c2f2:	061b      	lsls	r3, r3, #24
 800c2f4:	431a      	orrs	r2, r3
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	69db      	ldr	r3, [r3, #28]
 800c2fa:	071b      	lsls	r3, r3, #28
 800c2fc:	4975      	ldr	r1, [pc, #468]	; (800c4d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c2fe:	4313      	orrs	r3, r2
 800c300:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800c304:	4b73      	ldr	r3, [pc, #460]	; (800c4d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c306:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c30a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c312:	4970      	ldr	r1, [pc, #448]	; (800c4d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c314:	4313      	orrs	r3, r2
 800c316:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c322:	2b00      	cmp	r3, #0
 800c324:	d024      	beq.n	800c370 <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 800c32a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c32e:	d11f      	bne.n	800c370 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c330:	4b68      	ldr	r3, [pc, #416]	; (800c4d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c332:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c336:	0e1b      	lsrs	r3, r3, #24
 800c338:	f003 030f 	and.w	r3, r3, #15
 800c33c:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c33e:	4b65      	ldr	r3, [pc, #404]	; (800c4d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c340:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c344:	0f1b      	lsrs	r3, r3, #28
 800c346:	f003 0307 	and.w	r3, r3, #7
 800c34a:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	691b      	ldr	r3, [r3, #16]
 800c350:	019a      	lsls	r2, r3, #6
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	695b      	ldr	r3, [r3, #20]
 800c356:	085b      	lsrs	r3, r3, #1
 800c358:	3b01      	subs	r3, #1
 800c35a:	041b      	lsls	r3, r3, #16
 800c35c:	431a      	orrs	r2, r3
 800c35e:	693b      	ldr	r3, [r7, #16]
 800c360:	061b      	lsls	r3, r3, #24
 800c362:	431a      	orrs	r2, r3
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	071b      	lsls	r3, r3, #28
 800c368:	495a      	ldr	r1, [pc, #360]	; (800c4d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c36a:	4313      	orrs	r3, r2
 800c36c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800c370:	4b59      	ldr	r3, [pc, #356]	; (800c4d8 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800c372:	2201      	movs	r2, #1
 800c374:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c376:	f7fd f9f3 	bl	8009760 <HAL_GetTick>
 800c37a:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c37c:	e008      	b.n	800c390 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800c37e:	f7fd f9ef 	bl	8009760 <HAL_GetTick>
 800c382:	4602      	mov	r2, r0
 800c384:	69fb      	ldr	r3, [r7, #28]
 800c386:	1ad3      	subs	r3, r2, r3
 800c388:	2b02      	cmp	r3, #2
 800c38a:	d901      	bls.n	800c390 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c38c:	2303      	movs	r3, #3
 800c38e:	e09c      	b.n	800c4ca <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c390:	4b50      	ldr	r3, [pc, #320]	; (800c4d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c398:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c39c:	d1ef      	bne.n	800c37e <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	f003 0320 	and.w	r3, r3, #32
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	f000 8083 	beq.w	800c4b2 <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800c3ac:	2300      	movs	r3, #0
 800c3ae:	60bb      	str	r3, [r7, #8]
 800c3b0:	4b48      	ldr	r3, [pc, #288]	; (800c4d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c3b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3b4:	4a47      	ldr	r2, [pc, #284]	; (800c4d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c3b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c3ba:	6413      	str	r3, [r2, #64]	; 0x40
 800c3bc:	4b45      	ldr	r3, [pc, #276]	; (800c4d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c3be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c3c4:	60bb      	str	r3, [r7, #8]
 800c3c6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800c3c8:	4b44      	ldr	r3, [pc, #272]	; (800c4dc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	4a43      	ldr	r2, [pc, #268]	; (800c4dc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800c3ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c3d2:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c3d4:	f7fd f9c4 	bl	8009760 <HAL_GetTick>
 800c3d8:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800c3da:	e008      	b.n	800c3ee <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800c3dc:	f7fd f9c0 	bl	8009760 <HAL_GetTick>
 800c3e0:	4602      	mov	r2, r0
 800c3e2:	69fb      	ldr	r3, [r7, #28]
 800c3e4:	1ad3      	subs	r3, r2, r3
 800c3e6:	2b02      	cmp	r3, #2
 800c3e8:	d901      	bls.n	800c3ee <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 800c3ea:	2303      	movs	r3, #3
 800c3ec:	e06d      	b.n	800c4ca <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800c3ee:	4b3b      	ldr	r3, [pc, #236]	; (800c4dc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d0f0      	beq.n	800c3dc <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800c3fa:	4b36      	ldr	r3, [pc, #216]	; (800c4d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c3fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c3fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c402:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800c404:	69bb      	ldr	r3, [r7, #24]
 800c406:	2b00      	cmp	r3, #0
 800c408:	d02f      	beq.n	800c46a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c40e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c412:	69ba      	ldr	r2, [r7, #24]
 800c414:	429a      	cmp	r2, r3
 800c416:	d028      	beq.n	800c46a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c418:	4b2e      	ldr	r3, [pc, #184]	; (800c4d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c41a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c41c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c420:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800c422:	4b2f      	ldr	r3, [pc, #188]	; (800c4e0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800c424:	2201      	movs	r2, #1
 800c426:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800c428:	4b2d      	ldr	r3, [pc, #180]	; (800c4e0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800c42a:	2200      	movs	r2, #0
 800c42c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800c42e:	4a29      	ldr	r2, [pc, #164]	; (800c4d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c430:	69bb      	ldr	r3, [r7, #24]
 800c432:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800c434:	4b27      	ldr	r3, [pc, #156]	; (800c4d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c436:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c438:	f003 0301 	and.w	r3, r3, #1
 800c43c:	2b01      	cmp	r3, #1
 800c43e:	d114      	bne.n	800c46a <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800c440:	f7fd f98e 	bl	8009760 <HAL_GetTick>
 800c444:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c446:	e00a      	b.n	800c45e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c448:	f7fd f98a 	bl	8009760 <HAL_GetTick>
 800c44c:	4602      	mov	r2, r0
 800c44e:	69fb      	ldr	r3, [r7, #28]
 800c450:	1ad3      	subs	r3, r2, r3
 800c452:	f241 3288 	movw	r2, #5000	; 0x1388
 800c456:	4293      	cmp	r3, r2
 800c458:	d901      	bls.n	800c45e <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 800c45a:	2303      	movs	r3, #3
 800c45c:	e035      	b.n	800c4ca <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c45e:	4b1d      	ldr	r3, [pc, #116]	; (800c4d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c462:	f003 0302 	and.w	r3, r3, #2
 800c466:	2b00      	cmp	r3, #0
 800c468:	d0ee      	beq.n	800c448 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c46e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c472:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c476:	d10d      	bne.n	800c494 <HAL_RCCEx_PeriphCLKConfig+0x428>
 800c478:	4b16      	ldr	r3, [pc, #88]	; (800c4d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c47a:	689b      	ldr	r3, [r3, #8]
 800c47c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c484:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c488:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c48c:	4911      	ldr	r1, [pc, #68]	; (800c4d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c48e:	4313      	orrs	r3, r2
 800c490:	608b      	str	r3, [r1, #8]
 800c492:	e005      	b.n	800c4a0 <HAL_RCCEx_PeriphCLKConfig+0x434>
 800c494:	4b0f      	ldr	r3, [pc, #60]	; (800c4d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c496:	689b      	ldr	r3, [r3, #8]
 800c498:	4a0e      	ldr	r2, [pc, #56]	; (800c4d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c49a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800c49e:	6093      	str	r3, [r2, #8]
 800c4a0:	4b0c      	ldr	r3, [pc, #48]	; (800c4d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c4a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c4ac:	4909      	ldr	r1, [pc, #36]	; (800c4d4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800c4ae:	4313      	orrs	r3, r2
 800c4b0:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	f003 0310 	and.w	r3, r3, #16
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d004      	beq.n	800c4c8 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800c4c4:	4b07      	ldr	r3, [pc, #28]	; (800c4e4 <HAL_RCCEx_PeriphCLKConfig+0x478>)
 800c4c6:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800c4c8:	2300      	movs	r3, #0
}
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	3720      	adds	r7, #32
 800c4ce:	46bd      	mov	sp, r7
 800c4d0:	bd80      	pop	{r7, pc}
 800c4d2:	bf00      	nop
 800c4d4:	40023800 	.word	0x40023800
 800c4d8:	42470070 	.word	0x42470070
 800c4dc:	40007000 	.word	0x40007000
 800c4e0:	42470e40 	.word	0x42470e40
 800c4e4:	424711e0 	.word	0x424711e0

0800c4e8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c4e8:	b580      	push	{r7, lr}
 800c4ea:	b086      	sub	sp, #24
 800c4ec:	af00      	add	r7, sp, #0
 800c4ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c4f0:	2300      	movs	r3, #0
 800c4f2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	f003 0301 	and.w	r3, r3, #1
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d075      	beq.n	800c5ec <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800c500:	4ba2      	ldr	r3, [pc, #648]	; (800c78c <HAL_RCC_OscConfig+0x2a4>)
 800c502:	689b      	ldr	r3, [r3, #8]
 800c504:	f003 030c 	and.w	r3, r3, #12
 800c508:	2b04      	cmp	r3, #4
 800c50a:	d00c      	beq.n	800c526 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c50c:	4b9f      	ldr	r3, [pc, #636]	; (800c78c <HAL_RCC_OscConfig+0x2a4>)
 800c50e:	689b      	ldr	r3, [r3, #8]
 800c510:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800c514:	2b08      	cmp	r3, #8
 800c516:	d112      	bne.n	800c53e <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c518:	4b9c      	ldr	r3, [pc, #624]	; (800c78c <HAL_RCC_OscConfig+0x2a4>)
 800c51a:	685b      	ldr	r3, [r3, #4]
 800c51c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c520:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c524:	d10b      	bne.n	800c53e <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c526:	4b99      	ldr	r3, [pc, #612]	; (800c78c <HAL_RCC_OscConfig+0x2a4>)
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d05b      	beq.n	800c5ea <HAL_RCC_OscConfig+0x102>
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	685b      	ldr	r3, [r3, #4]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d157      	bne.n	800c5ea <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 800c53a:	2301      	movs	r3, #1
 800c53c:	e20b      	b.n	800c956 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	685b      	ldr	r3, [r3, #4]
 800c542:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c546:	d106      	bne.n	800c556 <HAL_RCC_OscConfig+0x6e>
 800c548:	4b90      	ldr	r3, [pc, #576]	; (800c78c <HAL_RCC_OscConfig+0x2a4>)
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	4a8f      	ldr	r2, [pc, #572]	; (800c78c <HAL_RCC_OscConfig+0x2a4>)
 800c54e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c552:	6013      	str	r3, [r2, #0]
 800c554:	e01d      	b.n	800c592 <HAL_RCC_OscConfig+0xaa>
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	685b      	ldr	r3, [r3, #4]
 800c55a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c55e:	d10c      	bne.n	800c57a <HAL_RCC_OscConfig+0x92>
 800c560:	4b8a      	ldr	r3, [pc, #552]	; (800c78c <HAL_RCC_OscConfig+0x2a4>)
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	4a89      	ldr	r2, [pc, #548]	; (800c78c <HAL_RCC_OscConfig+0x2a4>)
 800c566:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c56a:	6013      	str	r3, [r2, #0]
 800c56c:	4b87      	ldr	r3, [pc, #540]	; (800c78c <HAL_RCC_OscConfig+0x2a4>)
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	4a86      	ldr	r2, [pc, #536]	; (800c78c <HAL_RCC_OscConfig+0x2a4>)
 800c572:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c576:	6013      	str	r3, [r2, #0]
 800c578:	e00b      	b.n	800c592 <HAL_RCC_OscConfig+0xaa>
 800c57a:	4b84      	ldr	r3, [pc, #528]	; (800c78c <HAL_RCC_OscConfig+0x2a4>)
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	4a83      	ldr	r2, [pc, #524]	; (800c78c <HAL_RCC_OscConfig+0x2a4>)
 800c580:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c584:	6013      	str	r3, [r2, #0]
 800c586:	4b81      	ldr	r3, [pc, #516]	; (800c78c <HAL_RCC_OscConfig+0x2a4>)
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	4a80      	ldr	r2, [pc, #512]	; (800c78c <HAL_RCC_OscConfig+0x2a4>)
 800c58c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c590:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	685b      	ldr	r3, [r3, #4]
 800c596:	2b00      	cmp	r3, #0
 800c598:	d013      	beq.n	800c5c2 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c59a:	f7fd f8e1 	bl	8009760 <HAL_GetTick>
 800c59e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c5a0:	e008      	b.n	800c5b4 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c5a2:	f7fd f8dd 	bl	8009760 <HAL_GetTick>
 800c5a6:	4602      	mov	r2, r0
 800c5a8:	693b      	ldr	r3, [r7, #16]
 800c5aa:	1ad3      	subs	r3, r2, r3
 800c5ac:	2b64      	cmp	r3, #100	; 0x64
 800c5ae:	d901      	bls.n	800c5b4 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 800c5b0:	2303      	movs	r3, #3
 800c5b2:	e1d0      	b.n	800c956 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c5b4:	4b75      	ldr	r3, [pc, #468]	; (800c78c <HAL_RCC_OscConfig+0x2a4>)
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d0f0      	beq.n	800c5a2 <HAL_RCC_OscConfig+0xba>
 800c5c0:	e014      	b.n	800c5ec <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c5c2:	f7fd f8cd 	bl	8009760 <HAL_GetTick>
 800c5c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c5c8:	e008      	b.n	800c5dc <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c5ca:	f7fd f8c9 	bl	8009760 <HAL_GetTick>
 800c5ce:	4602      	mov	r2, r0
 800c5d0:	693b      	ldr	r3, [r7, #16]
 800c5d2:	1ad3      	subs	r3, r2, r3
 800c5d4:	2b64      	cmp	r3, #100	; 0x64
 800c5d6:	d901      	bls.n	800c5dc <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 800c5d8:	2303      	movs	r3, #3
 800c5da:	e1bc      	b.n	800c956 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c5dc:	4b6b      	ldr	r3, [pc, #428]	; (800c78c <HAL_RCC_OscConfig+0x2a4>)
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d1f0      	bne.n	800c5ca <HAL_RCC_OscConfig+0xe2>
 800c5e8:	e000      	b.n	800c5ec <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c5ea:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	f003 0302 	and.w	r3, r3, #2
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d063      	beq.n	800c6c0 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800c5f8:	4b64      	ldr	r3, [pc, #400]	; (800c78c <HAL_RCC_OscConfig+0x2a4>)
 800c5fa:	689b      	ldr	r3, [r3, #8]
 800c5fc:	f003 030c 	and.w	r3, r3, #12
 800c600:	2b00      	cmp	r3, #0
 800c602:	d00b      	beq.n	800c61c <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c604:	4b61      	ldr	r3, [pc, #388]	; (800c78c <HAL_RCC_OscConfig+0x2a4>)
 800c606:	689b      	ldr	r3, [r3, #8]
 800c608:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800c60c:	2b08      	cmp	r3, #8
 800c60e:	d11c      	bne.n	800c64a <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c610:	4b5e      	ldr	r3, [pc, #376]	; (800c78c <HAL_RCC_OscConfig+0x2a4>)
 800c612:	685b      	ldr	r3, [r3, #4]
 800c614:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d116      	bne.n	800c64a <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c61c:	4b5b      	ldr	r3, [pc, #364]	; (800c78c <HAL_RCC_OscConfig+0x2a4>)
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	f003 0302 	and.w	r3, r3, #2
 800c624:	2b00      	cmp	r3, #0
 800c626:	d005      	beq.n	800c634 <HAL_RCC_OscConfig+0x14c>
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	68db      	ldr	r3, [r3, #12]
 800c62c:	2b01      	cmp	r3, #1
 800c62e:	d001      	beq.n	800c634 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 800c630:	2301      	movs	r3, #1
 800c632:	e190      	b.n	800c956 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c634:	4b55      	ldr	r3, [pc, #340]	; (800c78c <HAL_RCC_OscConfig+0x2a4>)
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	691b      	ldr	r3, [r3, #16]
 800c640:	00db      	lsls	r3, r3, #3
 800c642:	4952      	ldr	r1, [pc, #328]	; (800c78c <HAL_RCC_OscConfig+0x2a4>)
 800c644:	4313      	orrs	r3, r2
 800c646:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c648:	e03a      	b.n	800c6c0 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	68db      	ldr	r3, [r3, #12]
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d020      	beq.n	800c694 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c652:	4b4f      	ldr	r3, [pc, #316]	; (800c790 <HAL_RCC_OscConfig+0x2a8>)
 800c654:	2201      	movs	r2, #1
 800c656:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c658:	f7fd f882 	bl	8009760 <HAL_GetTick>
 800c65c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c65e:	e008      	b.n	800c672 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c660:	f7fd f87e 	bl	8009760 <HAL_GetTick>
 800c664:	4602      	mov	r2, r0
 800c666:	693b      	ldr	r3, [r7, #16]
 800c668:	1ad3      	subs	r3, r2, r3
 800c66a:	2b02      	cmp	r3, #2
 800c66c:	d901      	bls.n	800c672 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800c66e:	2303      	movs	r3, #3
 800c670:	e171      	b.n	800c956 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c672:	4b46      	ldr	r3, [pc, #280]	; (800c78c <HAL_RCC_OscConfig+0x2a4>)
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	f003 0302 	and.w	r3, r3, #2
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d0f0      	beq.n	800c660 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c67e:	4b43      	ldr	r3, [pc, #268]	; (800c78c <HAL_RCC_OscConfig+0x2a4>)
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	691b      	ldr	r3, [r3, #16]
 800c68a:	00db      	lsls	r3, r3, #3
 800c68c:	493f      	ldr	r1, [pc, #252]	; (800c78c <HAL_RCC_OscConfig+0x2a4>)
 800c68e:	4313      	orrs	r3, r2
 800c690:	600b      	str	r3, [r1, #0]
 800c692:	e015      	b.n	800c6c0 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c694:	4b3e      	ldr	r3, [pc, #248]	; (800c790 <HAL_RCC_OscConfig+0x2a8>)
 800c696:	2200      	movs	r2, #0
 800c698:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c69a:	f7fd f861 	bl	8009760 <HAL_GetTick>
 800c69e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c6a0:	e008      	b.n	800c6b4 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c6a2:	f7fd f85d 	bl	8009760 <HAL_GetTick>
 800c6a6:	4602      	mov	r2, r0
 800c6a8:	693b      	ldr	r3, [r7, #16]
 800c6aa:	1ad3      	subs	r3, r2, r3
 800c6ac:	2b02      	cmp	r3, #2
 800c6ae:	d901      	bls.n	800c6b4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800c6b0:	2303      	movs	r3, #3
 800c6b2:	e150      	b.n	800c956 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c6b4:	4b35      	ldr	r3, [pc, #212]	; (800c78c <HAL_RCC_OscConfig+0x2a4>)
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	f003 0302 	and.w	r3, r3, #2
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d1f0      	bne.n	800c6a2 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	f003 0308 	and.w	r3, r3, #8
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d030      	beq.n	800c72e <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	695b      	ldr	r3, [r3, #20]
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d016      	beq.n	800c702 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c6d4:	4b2f      	ldr	r3, [pc, #188]	; (800c794 <HAL_RCC_OscConfig+0x2ac>)
 800c6d6:	2201      	movs	r2, #1
 800c6d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c6da:	f7fd f841 	bl	8009760 <HAL_GetTick>
 800c6de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c6e0:	e008      	b.n	800c6f4 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c6e2:	f7fd f83d 	bl	8009760 <HAL_GetTick>
 800c6e6:	4602      	mov	r2, r0
 800c6e8:	693b      	ldr	r3, [r7, #16]
 800c6ea:	1ad3      	subs	r3, r2, r3
 800c6ec:	2b02      	cmp	r3, #2
 800c6ee:	d901      	bls.n	800c6f4 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 800c6f0:	2303      	movs	r3, #3
 800c6f2:	e130      	b.n	800c956 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c6f4:	4b25      	ldr	r3, [pc, #148]	; (800c78c <HAL_RCC_OscConfig+0x2a4>)
 800c6f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c6f8:	f003 0302 	and.w	r3, r3, #2
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d0f0      	beq.n	800c6e2 <HAL_RCC_OscConfig+0x1fa>
 800c700:	e015      	b.n	800c72e <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c702:	4b24      	ldr	r3, [pc, #144]	; (800c794 <HAL_RCC_OscConfig+0x2ac>)
 800c704:	2200      	movs	r2, #0
 800c706:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c708:	f7fd f82a 	bl	8009760 <HAL_GetTick>
 800c70c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c70e:	e008      	b.n	800c722 <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c710:	f7fd f826 	bl	8009760 <HAL_GetTick>
 800c714:	4602      	mov	r2, r0
 800c716:	693b      	ldr	r3, [r7, #16]
 800c718:	1ad3      	subs	r3, r2, r3
 800c71a:	2b02      	cmp	r3, #2
 800c71c:	d901      	bls.n	800c722 <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 800c71e:	2303      	movs	r3, #3
 800c720:	e119      	b.n	800c956 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c722:	4b1a      	ldr	r3, [pc, #104]	; (800c78c <HAL_RCC_OscConfig+0x2a4>)
 800c724:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c726:	f003 0302 	and.w	r3, r3, #2
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d1f0      	bne.n	800c710 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	f003 0304 	and.w	r3, r3, #4
 800c736:	2b00      	cmp	r3, #0
 800c738:	f000 809f 	beq.w	800c87a <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c73c:	2300      	movs	r3, #0
 800c73e:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c740:	4b12      	ldr	r3, [pc, #72]	; (800c78c <HAL_RCC_OscConfig+0x2a4>)
 800c742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c744:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d10f      	bne.n	800c76c <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c74c:	2300      	movs	r3, #0
 800c74e:	60fb      	str	r3, [r7, #12]
 800c750:	4b0e      	ldr	r3, [pc, #56]	; (800c78c <HAL_RCC_OscConfig+0x2a4>)
 800c752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c754:	4a0d      	ldr	r2, [pc, #52]	; (800c78c <HAL_RCC_OscConfig+0x2a4>)
 800c756:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c75a:	6413      	str	r3, [r2, #64]	; 0x40
 800c75c:	4b0b      	ldr	r3, [pc, #44]	; (800c78c <HAL_RCC_OscConfig+0x2a4>)
 800c75e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c760:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c764:	60fb      	str	r3, [r7, #12]
 800c766:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800c768:	2301      	movs	r3, #1
 800c76a:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c76c:	4b0a      	ldr	r3, [pc, #40]	; (800c798 <HAL_RCC_OscConfig+0x2b0>)
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c774:	2b00      	cmp	r3, #0
 800c776:	d120      	bne.n	800c7ba <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800c778:	4b07      	ldr	r3, [pc, #28]	; (800c798 <HAL_RCC_OscConfig+0x2b0>)
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	4a06      	ldr	r2, [pc, #24]	; (800c798 <HAL_RCC_OscConfig+0x2b0>)
 800c77e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c782:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c784:	f7fc ffec 	bl	8009760 <HAL_GetTick>
 800c788:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c78a:	e010      	b.n	800c7ae <HAL_RCC_OscConfig+0x2c6>
 800c78c:	40023800 	.word	0x40023800
 800c790:	42470000 	.word	0x42470000
 800c794:	42470e80 	.word	0x42470e80
 800c798:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c79c:	f7fc ffe0 	bl	8009760 <HAL_GetTick>
 800c7a0:	4602      	mov	r2, r0
 800c7a2:	693b      	ldr	r3, [r7, #16]
 800c7a4:	1ad3      	subs	r3, r2, r3
 800c7a6:	2b02      	cmp	r3, #2
 800c7a8:	d901      	bls.n	800c7ae <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 800c7aa:	2303      	movs	r3, #3
 800c7ac:	e0d3      	b.n	800c956 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c7ae:	4b6c      	ldr	r3, [pc, #432]	; (800c960 <HAL_RCC_OscConfig+0x478>)
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d0f0      	beq.n	800c79c <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	689b      	ldr	r3, [r3, #8]
 800c7be:	2b01      	cmp	r3, #1
 800c7c0:	d106      	bne.n	800c7d0 <HAL_RCC_OscConfig+0x2e8>
 800c7c2:	4b68      	ldr	r3, [pc, #416]	; (800c964 <HAL_RCC_OscConfig+0x47c>)
 800c7c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c7c6:	4a67      	ldr	r2, [pc, #412]	; (800c964 <HAL_RCC_OscConfig+0x47c>)
 800c7c8:	f043 0301 	orr.w	r3, r3, #1
 800c7cc:	6713      	str	r3, [r2, #112]	; 0x70
 800c7ce:	e01c      	b.n	800c80a <HAL_RCC_OscConfig+0x322>
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	689b      	ldr	r3, [r3, #8]
 800c7d4:	2b05      	cmp	r3, #5
 800c7d6:	d10c      	bne.n	800c7f2 <HAL_RCC_OscConfig+0x30a>
 800c7d8:	4b62      	ldr	r3, [pc, #392]	; (800c964 <HAL_RCC_OscConfig+0x47c>)
 800c7da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c7dc:	4a61      	ldr	r2, [pc, #388]	; (800c964 <HAL_RCC_OscConfig+0x47c>)
 800c7de:	f043 0304 	orr.w	r3, r3, #4
 800c7e2:	6713      	str	r3, [r2, #112]	; 0x70
 800c7e4:	4b5f      	ldr	r3, [pc, #380]	; (800c964 <HAL_RCC_OscConfig+0x47c>)
 800c7e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c7e8:	4a5e      	ldr	r2, [pc, #376]	; (800c964 <HAL_RCC_OscConfig+0x47c>)
 800c7ea:	f043 0301 	orr.w	r3, r3, #1
 800c7ee:	6713      	str	r3, [r2, #112]	; 0x70
 800c7f0:	e00b      	b.n	800c80a <HAL_RCC_OscConfig+0x322>
 800c7f2:	4b5c      	ldr	r3, [pc, #368]	; (800c964 <HAL_RCC_OscConfig+0x47c>)
 800c7f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c7f6:	4a5b      	ldr	r2, [pc, #364]	; (800c964 <HAL_RCC_OscConfig+0x47c>)
 800c7f8:	f023 0301 	bic.w	r3, r3, #1
 800c7fc:	6713      	str	r3, [r2, #112]	; 0x70
 800c7fe:	4b59      	ldr	r3, [pc, #356]	; (800c964 <HAL_RCC_OscConfig+0x47c>)
 800c800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c802:	4a58      	ldr	r2, [pc, #352]	; (800c964 <HAL_RCC_OscConfig+0x47c>)
 800c804:	f023 0304 	bic.w	r3, r3, #4
 800c808:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	689b      	ldr	r3, [r3, #8]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d015      	beq.n	800c83e <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c812:	f7fc ffa5 	bl	8009760 <HAL_GetTick>
 800c816:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c818:	e00a      	b.n	800c830 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c81a:	f7fc ffa1 	bl	8009760 <HAL_GetTick>
 800c81e:	4602      	mov	r2, r0
 800c820:	693b      	ldr	r3, [r7, #16]
 800c822:	1ad3      	subs	r3, r2, r3
 800c824:	f241 3288 	movw	r2, #5000	; 0x1388
 800c828:	4293      	cmp	r3, r2
 800c82a:	d901      	bls.n	800c830 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 800c82c:	2303      	movs	r3, #3
 800c82e:	e092      	b.n	800c956 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c830:	4b4c      	ldr	r3, [pc, #304]	; (800c964 <HAL_RCC_OscConfig+0x47c>)
 800c832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c834:	f003 0302 	and.w	r3, r3, #2
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d0ee      	beq.n	800c81a <HAL_RCC_OscConfig+0x332>
 800c83c:	e014      	b.n	800c868 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c83e:	f7fc ff8f 	bl	8009760 <HAL_GetTick>
 800c842:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c844:	e00a      	b.n	800c85c <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c846:	f7fc ff8b 	bl	8009760 <HAL_GetTick>
 800c84a:	4602      	mov	r2, r0
 800c84c:	693b      	ldr	r3, [r7, #16]
 800c84e:	1ad3      	subs	r3, r2, r3
 800c850:	f241 3288 	movw	r2, #5000	; 0x1388
 800c854:	4293      	cmp	r3, r2
 800c856:	d901      	bls.n	800c85c <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 800c858:	2303      	movs	r3, #3
 800c85a:	e07c      	b.n	800c956 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c85c:	4b41      	ldr	r3, [pc, #260]	; (800c964 <HAL_RCC_OscConfig+0x47c>)
 800c85e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c860:	f003 0302 	and.w	r3, r3, #2
 800c864:	2b00      	cmp	r3, #0
 800c866:	d1ee      	bne.n	800c846 <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c868:	7dfb      	ldrb	r3, [r7, #23]
 800c86a:	2b01      	cmp	r3, #1
 800c86c:	d105      	bne.n	800c87a <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c86e:	4b3d      	ldr	r3, [pc, #244]	; (800c964 <HAL_RCC_OscConfig+0x47c>)
 800c870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c872:	4a3c      	ldr	r2, [pc, #240]	; (800c964 <HAL_RCC_OscConfig+0x47c>)
 800c874:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c878:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	699b      	ldr	r3, [r3, #24]
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d068      	beq.n	800c954 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800c882:	4b38      	ldr	r3, [pc, #224]	; (800c964 <HAL_RCC_OscConfig+0x47c>)
 800c884:	689b      	ldr	r3, [r3, #8]
 800c886:	f003 030c 	and.w	r3, r3, #12
 800c88a:	2b08      	cmp	r3, #8
 800c88c:	d060      	beq.n	800c950 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	699b      	ldr	r3, [r3, #24]
 800c892:	2b02      	cmp	r3, #2
 800c894:	d145      	bne.n	800c922 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c896:	4b34      	ldr	r3, [pc, #208]	; (800c968 <HAL_RCC_OscConfig+0x480>)
 800c898:	2200      	movs	r2, #0
 800c89a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c89c:	f7fc ff60 	bl	8009760 <HAL_GetTick>
 800c8a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c8a2:	e008      	b.n	800c8b6 <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c8a4:	f7fc ff5c 	bl	8009760 <HAL_GetTick>
 800c8a8:	4602      	mov	r2, r0
 800c8aa:	693b      	ldr	r3, [r7, #16]
 800c8ac:	1ad3      	subs	r3, r2, r3
 800c8ae:	2b02      	cmp	r3, #2
 800c8b0:	d901      	bls.n	800c8b6 <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 800c8b2:	2303      	movs	r3, #3
 800c8b4:	e04f      	b.n	800c956 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c8b6:	4b2b      	ldr	r3, [pc, #172]	; (800c964 <HAL_RCC_OscConfig+0x47c>)
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d1f0      	bne.n	800c8a4 <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	69da      	ldr	r2, [r3, #28]
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	6a1b      	ldr	r3, [r3, #32]
 800c8ca:	431a      	orrs	r2, r3
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8d0:	019b      	lsls	r3, r3, #6
 800c8d2:	431a      	orrs	r2, r3
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8d8:	085b      	lsrs	r3, r3, #1
 800c8da:	3b01      	subs	r3, #1
 800c8dc:	041b      	lsls	r3, r3, #16
 800c8de:	431a      	orrs	r2, r3
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8e4:	061b      	lsls	r3, r3, #24
 800c8e6:	431a      	orrs	r2, r3
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8ec:	071b      	lsls	r3, r3, #28
 800c8ee:	491d      	ldr	r1, [pc, #116]	; (800c964 <HAL_RCC_OscConfig+0x47c>)
 800c8f0:	4313      	orrs	r3, r2
 800c8f2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c8f4:	4b1c      	ldr	r3, [pc, #112]	; (800c968 <HAL_RCC_OscConfig+0x480>)
 800c8f6:	2201      	movs	r2, #1
 800c8f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c8fa:	f7fc ff31 	bl	8009760 <HAL_GetTick>
 800c8fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c900:	e008      	b.n	800c914 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c902:	f7fc ff2d 	bl	8009760 <HAL_GetTick>
 800c906:	4602      	mov	r2, r0
 800c908:	693b      	ldr	r3, [r7, #16]
 800c90a:	1ad3      	subs	r3, r2, r3
 800c90c:	2b02      	cmp	r3, #2
 800c90e:	d901      	bls.n	800c914 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800c910:	2303      	movs	r3, #3
 800c912:	e020      	b.n	800c956 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c914:	4b13      	ldr	r3, [pc, #76]	; (800c964 <HAL_RCC_OscConfig+0x47c>)
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d0f0      	beq.n	800c902 <HAL_RCC_OscConfig+0x41a>
 800c920:	e018      	b.n	800c954 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c922:	4b11      	ldr	r3, [pc, #68]	; (800c968 <HAL_RCC_OscConfig+0x480>)
 800c924:	2200      	movs	r2, #0
 800c926:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c928:	f7fc ff1a 	bl	8009760 <HAL_GetTick>
 800c92c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c92e:	e008      	b.n	800c942 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c930:	f7fc ff16 	bl	8009760 <HAL_GetTick>
 800c934:	4602      	mov	r2, r0
 800c936:	693b      	ldr	r3, [r7, #16]
 800c938:	1ad3      	subs	r3, r2, r3
 800c93a:	2b02      	cmp	r3, #2
 800c93c:	d901      	bls.n	800c942 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800c93e:	2303      	movs	r3, #3
 800c940:	e009      	b.n	800c956 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c942:	4b08      	ldr	r3, [pc, #32]	; (800c964 <HAL_RCC_OscConfig+0x47c>)
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d1f0      	bne.n	800c930 <HAL_RCC_OscConfig+0x448>
 800c94e:	e001      	b.n	800c954 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800c950:	2301      	movs	r3, #1
 800c952:	e000      	b.n	800c956 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 800c954:	2300      	movs	r3, #0
}
 800c956:	4618      	mov	r0, r3
 800c958:	3718      	adds	r7, #24
 800c95a:	46bd      	mov	sp, r7
 800c95c:	bd80      	pop	{r7, pc}
 800c95e:	bf00      	nop
 800c960:	40007000 	.word	0x40007000
 800c964:	40023800 	.word	0x40023800
 800c968:	42470060 	.word	0x42470060

0800c96c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800c96c:	b580      	push	{r7, lr}
 800c96e:	b082      	sub	sp, #8
 800c970:	af00      	add	r7, sp, #0
 800c972:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	2b00      	cmp	r3, #0
 800c978:	d101      	bne.n	800c97e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800c97a:	2301      	movs	r3, #1
 800c97c:	e022      	b.n	800c9c4 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c984:	b2db      	uxtb	r3, r3
 800c986:	2b00      	cmp	r3, #0
 800c988:	d105      	bne.n	800c996 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	2200      	movs	r2, #0
 800c98e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800c990:	6878      	ldr	r0, [r7, #4]
 800c992:	f7fa fa6d 	bl	8006e70 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	2203      	movs	r2, #3
 800c99a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800c99e:	6878      	ldr	r0, [r7, #4]
 800c9a0:	f000 f814 	bl	800c9cc <HAL_SD_InitCard>
 800c9a4:	4603      	mov	r3, r0
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d001      	beq.n	800c9ae <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800c9aa:	2301      	movs	r3, #1
 800c9ac:	e00a      	b.n	800c9c4 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	2200      	movs	r2, #0
 800c9b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	2200      	movs	r2, #0
 800c9b8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	2201      	movs	r2, #1
 800c9be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800c9c2:	2300      	movs	r3, #0
}
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	3708      	adds	r7, #8
 800c9c8:	46bd      	mov	sp, r7
 800c9ca:	bd80      	pop	{r7, pc}

0800c9cc <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c9cc:	b5b0      	push	{r4, r5, r7, lr}
 800c9ce:	b08e      	sub	sp, #56	; 0x38
 800c9d0:	af04      	add	r7, sp, #16
 800c9d2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800c9d4:	2300      	movs	r3, #0
 800c9d6:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800c9d8:	2300      	movs	r3, #0
 800c9da:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800c9dc:	2300      	movs	r3, #0
 800c9de:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800c9e0:	2300      	movs	r3, #0
 800c9e2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800c9e4:	2300      	movs	r3, #0
 800c9e6:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800c9e8:	2376      	movs	r3, #118	; 0x76
 800c9ea:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	681d      	ldr	r5, [r3, #0]
 800c9f0:	466c      	mov	r4, sp
 800c9f2:	f107 0314 	add.w	r3, r7, #20
 800c9f6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c9fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c9fe:	f107 0308 	add.w	r3, r7, #8
 800ca02:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ca04:	4628      	mov	r0, r5
 800ca06:	f003 fa87 	bl	800ff18 <SDIO_Init>
 800ca0a:	4603      	mov	r3, r0
 800ca0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800ca10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d001      	beq.n	800ca1c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800ca18:	2301      	movs	r3, #1
 800ca1a:	e031      	b.n	800ca80 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800ca1c:	4b1a      	ldr	r3, [pc, #104]	; (800ca88 <HAL_SD_InitCard+0xbc>)
 800ca1e:	2200      	movs	r2, #0
 800ca20:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	4618      	mov	r0, r3
 800ca28:	f003 fabf 	bl	800ffaa <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800ca2c:	4b16      	ldr	r3, [pc, #88]	; (800ca88 <HAL_SD_InitCard+0xbc>)
 800ca2e:	2201      	movs	r2, #1
 800ca30:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800ca32:	6878      	ldr	r0, [r7, #4]
 800ca34:	f000 ffc6 	bl	800d9c4 <SD_PowerON>
 800ca38:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ca3a:	6a3b      	ldr	r3, [r7, #32]
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d00b      	beq.n	800ca58 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	2201      	movs	r2, #1
 800ca44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ca4c:	6a3b      	ldr	r3, [r7, #32]
 800ca4e:	431a      	orrs	r2, r3
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800ca54:	2301      	movs	r3, #1
 800ca56:	e013      	b.n	800ca80 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800ca58:	6878      	ldr	r0, [r7, #4]
 800ca5a:	f000 fee5 	bl	800d828 <SD_InitCard>
 800ca5e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ca60:	6a3b      	ldr	r3, [r7, #32]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d00b      	beq.n	800ca7e <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	2201      	movs	r2, #1
 800ca6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ca72:	6a3b      	ldr	r3, [r7, #32]
 800ca74:	431a      	orrs	r2, r3
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800ca7a:	2301      	movs	r3, #1
 800ca7c:	e000      	b.n	800ca80 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800ca7e:	2300      	movs	r3, #0
}
 800ca80:	4618      	mov	r0, r3
 800ca82:	3728      	adds	r7, #40	; 0x28
 800ca84:	46bd      	mov	sp, r7
 800ca86:	bdb0      	pop	{r4, r5, r7, pc}
 800ca88:	422580a0 	.word	0x422580a0

0800ca8c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800ca8c:	b580      	push	{r7, lr}
 800ca8e:	b08c      	sub	sp, #48	; 0x30
 800ca90:	af00      	add	r7, sp, #0
 800ca92:	60f8      	str	r0, [r7, #12]
 800ca94:	60b9      	str	r1, [r7, #8]
 800ca96:	607a      	str	r2, [r7, #4]
 800ca98:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800ca9e:	68bb      	ldr	r3, [r7, #8]
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d107      	bne.n	800cab4 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800caa8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800cab0:	2301      	movs	r3, #1
 800cab2:	e0c7      	b.n	800cc44 <HAL_SD_ReadBlocks_DMA+0x1b8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800caba:	b2db      	uxtb	r3, r3
 800cabc:	2b01      	cmp	r3, #1
 800cabe:	f040 80c0 	bne.w	800cc42 <HAL_SD_ReadBlocks_DMA+0x1b6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	2200      	movs	r2, #0
 800cac6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800cac8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800caca:	683b      	ldr	r3, [r7, #0]
 800cacc:	441a      	add	r2, r3
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cad2:	429a      	cmp	r2, r3
 800cad4:	d907      	bls.n	800cae6 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cada:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800cae2:	2301      	movs	r3, #1
 800cae4:	e0ae      	b.n	800cc44 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	2203      	movs	r2, #3
 800caea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	2200      	movs	r2, #0
 800caf4:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800cb04:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb0a:	4a50      	ldr	r2, [pc, #320]	; (800cc4c <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800cb0c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb12:	4a4f      	ldr	r2, [pc, #316]	; (800cc50 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 800cb14:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb1a:	2200      	movs	r2, #0
 800cb1c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	3380      	adds	r3, #128	; 0x80
 800cb28:	4619      	mov	r1, r3
 800cb2a:	68ba      	ldr	r2, [r7, #8]
 800cb2c:	683b      	ldr	r3, [r7, #0]
 800cb2e:	025b      	lsls	r3, r3, #9
 800cb30:	089b      	lsrs	r3, r3, #2
 800cb32:	f7fd fc07 	bl	800a344 <HAL_DMA_Start_IT>
 800cb36:	4603      	mov	r3, r0
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d017      	beq.n	800cb6c <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800cb4a:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	4a40      	ldr	r2, [pc, #256]	; (800cc54 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800cb52:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb58:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	2201      	movs	r2, #1
 800cb64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800cb68:	2301      	movs	r3, #1
 800cb6a:	e06b      	b.n	800cc44 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800cb6c:	4b3a      	ldr	r3, [pc, #232]	; (800cc58 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800cb6e:	2201      	movs	r2, #1
 800cb70:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb76:	2b01      	cmp	r3, #1
 800cb78:	d002      	beq.n	800cb80 <HAL_SD_ReadBlocks_DMA+0xf4>
      {
        add *= 512U;
 800cb7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb7c:	025b      	lsls	r3, r3, #9
 800cb7e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cb88:	4618      	mov	r0, r3
 800cb8a:	f003 faa1 	bl	80100d0 <SDMMC_CmdBlockLength>
 800cb8e:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 800cb90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d00f      	beq.n	800cbb6 <HAL_SD_ReadBlocks_DMA+0x12a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	4a2e      	ldr	r2, [pc, #184]	; (800cc54 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800cb9c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cba4:	431a      	orrs	r2, r3
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	2201      	movs	r2, #1
 800cbae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800cbb2:	2301      	movs	r3, #1
 800cbb4:	e046      	b.n	800cc44 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800cbb6:	f04f 33ff 	mov.w	r3, #4294967295
 800cbba:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800cbbc:	683b      	ldr	r3, [r7, #0]
 800cbbe:	025b      	lsls	r3, r3, #9
 800cbc0:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800cbc2:	2390      	movs	r3, #144	; 0x90
 800cbc4:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800cbc6:	2302      	movs	r3, #2
 800cbc8:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800cbca:	2300      	movs	r3, #0
 800cbcc:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800cbce:	2301      	movs	r3, #1
 800cbd0:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	f107 0210 	add.w	r2, r7, #16
 800cbda:	4611      	mov	r1, r2
 800cbdc:	4618      	mov	r0, r3
 800cbde:	f003 fa4b 	bl	8010078 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800cbe2:	683b      	ldr	r3, [r7, #0]
 800cbe4:	2b01      	cmp	r3, #1
 800cbe6:	d90a      	bls.n	800cbfe <HAL_SD_ReadBlocks_DMA+0x172>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	2282      	movs	r2, #130	; 0x82
 800cbec:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cbf4:	4618      	mov	r0, r3
 800cbf6:	f003 faaf 	bl	8010158 <SDMMC_CmdReadMultiBlock>
 800cbfa:	62f8      	str	r0, [r7, #44]	; 0x2c
 800cbfc:	e009      	b.n	800cc12 <HAL_SD_ReadBlocks_DMA+0x186>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	2281      	movs	r2, #129	; 0x81
 800cc02:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	f003 fa82 	bl	8010114 <SDMMC_CmdReadSingleBlock>
 800cc10:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800cc12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d012      	beq.n	800cc3e <HAL_SD_ReadBlocks_DMA+0x1b2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	4a0d      	ldr	r2, [pc, #52]	; (800cc54 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800cc1e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cc24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc26:	431a      	orrs	r2, r3
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	2201      	movs	r2, #1
 800cc30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	2200      	movs	r2, #0
 800cc38:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800cc3a:	2301      	movs	r3, #1
 800cc3c:	e002      	b.n	800cc44 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      return HAL_OK;
 800cc3e:	2300      	movs	r3, #0
 800cc40:	e000      	b.n	800cc44 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
  }
  else
  {
    return HAL_BUSY;
 800cc42:	2302      	movs	r3, #2
  }
}
 800cc44:	4618      	mov	r0, r3
 800cc46:	3730      	adds	r7, #48	; 0x30
 800cc48:	46bd      	mov	sp, r7
 800cc4a:	bd80      	pop	{r7, pc}
 800cc4c:	0800d637 	.word	0x0800d637
 800cc50:	0800d6a9 	.word	0x0800d6a9
 800cc54:	004005ff 	.word	0x004005ff
 800cc58:	4225858c 	.word	0x4225858c

0800cc5c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800cc5c:	b580      	push	{r7, lr}
 800cc5e:	b08c      	sub	sp, #48	; 0x30
 800cc60:	af00      	add	r7, sp, #0
 800cc62:	60f8      	str	r0, [r7, #12]
 800cc64:	60b9      	str	r1, [r7, #8]
 800cc66:	607a      	str	r2, [r7, #4]
 800cc68:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800cc6e:	68bb      	ldr	r3, [r7, #8]
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d107      	bne.n	800cc84 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc78:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800cc80:	2301      	movs	r3, #1
 800cc82:	e0ca      	b.n	800ce1a <HAL_SD_WriteBlocks_DMA+0x1be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cc8a:	b2db      	uxtb	r3, r3
 800cc8c:	2b01      	cmp	r3, #1
 800cc8e:	f040 80c3 	bne.w	800ce18 <HAL_SD_WriteBlocks_DMA+0x1bc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	2200      	movs	r2, #0
 800cc96:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800cc98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cc9a:	683b      	ldr	r3, [r7, #0]
 800cc9c:	441a      	add	r2, r3
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cca2:	429a      	cmp	r2, r3
 800cca4:	d907      	bls.n	800ccb6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccaa:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800ccb2:	2301      	movs	r3, #1
 800ccb4:	e0b1      	b.n	800ce1a <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	2203      	movs	r2, #3
 800ccba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	2200      	movs	r2, #0
 800ccc4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	f042 021a 	orr.w	r2, r2, #26
 800ccd4:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccda:	4a52      	ldr	r2, [pc, #328]	; (800ce24 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800ccdc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cce2:	4a51      	ldr	r2, [pc, #324]	; (800ce28 <HAL_SD_WriteBlocks_DMA+0x1cc>)
 800cce4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccea:	2200      	movs	r2, #0
 800ccec:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ccf2:	2b01      	cmp	r3, #1
 800ccf4:	d002      	beq.n	800ccfc <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800ccf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccf8:	025b      	lsls	r3, r3, #9
 800ccfa:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cd04:	4618      	mov	r0, r3
 800cd06:	f003 f9e3 	bl	80100d0 <SDMMC_CmdBlockLength>
 800cd0a:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800cd0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d00f      	beq.n	800cd32 <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	4a45      	ldr	r2, [pc, #276]	; (800ce2c <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800cd18:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800cd1a:	68fb      	ldr	r3, [r7, #12]
 800cd1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cd1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd20:	431a      	orrs	r2, r3
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	2201      	movs	r2, #1
 800cd2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800cd2e:	2301      	movs	r3, #1
 800cd30:	e073      	b.n	800ce1a <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800cd32:	683b      	ldr	r3, [r7, #0]
 800cd34:	2b01      	cmp	r3, #1
 800cd36:	d90a      	bls.n	800cd4e <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	22a0      	movs	r2, #160	; 0xa0
 800cd3c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cd44:	4618      	mov	r0, r3
 800cd46:	f003 fa4b 	bl	80101e0 <SDMMC_CmdWriteMultiBlock>
 800cd4a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800cd4c:	e009      	b.n	800cd62 <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	2290      	movs	r2, #144	; 0x90
 800cd52:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	f003 fa1e 	bl	801019c <SDMMC_CmdWriteSingleBlock>
 800cd60:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800cd62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d012      	beq.n	800cd8e <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	4a2f      	ldr	r2, [pc, #188]	; (800ce2c <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800cd6e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cd74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd76:	431a      	orrs	r2, r3
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	2201      	movs	r2, #1
 800cd80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	2200      	movs	r2, #0
 800cd88:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800cd8a:	2301      	movs	r3, #1
 800cd8c:	e045      	b.n	800ce1a <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800cd8e:	4b28      	ldr	r3, [pc, #160]	; (800ce30 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800cd90:	2201      	movs	r2, #1
 800cd92:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800cd98:	68b9      	ldr	r1, [r7, #8]
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	3380      	adds	r3, #128	; 0x80
 800cda0:	461a      	mov	r2, r3
 800cda2:	683b      	ldr	r3, [r7, #0]
 800cda4:	025b      	lsls	r3, r3, #9
 800cda6:	089b      	lsrs	r3, r3, #2
 800cda8:	f7fd facc 	bl	800a344 <HAL_DMA_Start_IT>
 800cdac:	4603      	mov	r3, r0
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d01a      	beq.n	800cde8 <HAL_SD_WriteBlocks_DMA+0x18c>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	f022 021a 	bic.w	r2, r2, #26
 800cdc0:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	4a19      	ldr	r2, [pc, #100]	; (800ce2c <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800cdc8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdce:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	2201      	movs	r2, #1
 800cdda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	2200      	movs	r2, #0
 800cde2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800cde4:	2301      	movs	r3, #1
 800cde6:	e018      	b.n	800ce1a <HAL_SD_WriteBlocks_DMA+0x1be>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800cde8:	f04f 33ff 	mov.w	r3, #4294967295
 800cdec:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800cdee:	683b      	ldr	r3, [r7, #0]
 800cdf0:	025b      	lsls	r3, r3, #9
 800cdf2:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800cdf4:	2390      	movs	r3, #144	; 0x90
 800cdf6:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800cdf8:	2300      	movs	r3, #0
 800cdfa:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800cdfc:	2300      	movs	r3, #0
 800cdfe:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800ce00:	2301      	movs	r3, #1
 800ce02:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	f107 0210 	add.w	r2, r7, #16
 800ce0c:	4611      	mov	r1, r2
 800ce0e:	4618      	mov	r0, r3
 800ce10:	f003 f932 	bl	8010078 <SDIO_ConfigData>

      return HAL_OK;
 800ce14:	2300      	movs	r3, #0
 800ce16:	e000      	b.n	800ce1a <HAL_SD_WriteBlocks_DMA+0x1be>
    }
  }
  else
  {
    return HAL_BUSY;
 800ce18:	2302      	movs	r3, #2
  }
}
 800ce1a:	4618      	mov	r0, r3
 800ce1c:	3730      	adds	r7, #48	; 0x30
 800ce1e:	46bd      	mov	sp, r7
 800ce20:	bd80      	pop	{r7, pc}
 800ce22:	bf00      	nop
 800ce24:	0800d60d 	.word	0x0800d60d
 800ce28:	0800d6a9 	.word	0x0800d6a9
 800ce2c:	004005ff 	.word	0x004005ff
 800ce30:	4225858c 	.word	0x4225858c

0800ce34 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800ce34:	b580      	push	{r7, lr}
 800ce36:	b084      	sub	sp, #16
 800ce38:	af00      	add	r7, sp, #0
 800ce3a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce40:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d008      	beq.n	800ce62 <HAL_SD_IRQHandler+0x2e>
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	f003 0308 	and.w	r3, r3, #8
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d003      	beq.n	800ce62 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800ce5a:	6878      	ldr	r0, [r7, #4]
 800ce5c:	f000 ffc8 	bl	800ddf0 <SD_Read_IT>
 800ce60:	e155      	b.n	800d10e <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	f000 808f 	beq.w	800cf90 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ce7a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce82:	687a      	ldr	r2, [r7, #4]
 800ce84:	6812      	ldr	r2, [r2, #0]
 800ce86:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800ce8a:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800ce8e:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	f022 0201 	bic.w	r2, r2, #1
 800ce9e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	f003 0308 	and.w	r3, r3, #8
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d039      	beq.n	800cf1e <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	f003 0302 	and.w	r3, r3, #2
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d104      	bne.n	800cebe <HAL_SD_IRQHandler+0x8a>
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	f003 0320 	and.w	r3, r3, #32
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d011      	beq.n	800cee2 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	4618      	mov	r0, r3
 800cec4:	f003 f9ae 	bl	8010224 <SDMMC_CmdStopTransfer>
 800cec8:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800ceca:	68bb      	ldr	r3, [r7, #8]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d008      	beq.n	800cee2 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ced4:	68bb      	ldr	r3, [r7, #8]
 800ced6:	431a      	orrs	r2, r3
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800cedc:	6878      	ldr	r0, [r7, #4]
 800cede:	f000 f91f 	bl	800d120 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	f240 523a 	movw	r2, #1338	; 0x53a
 800ceea:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	2201      	movs	r2, #1
 800cef0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	2200      	movs	r2, #0
 800cef8:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	f003 0301 	and.w	r3, r3, #1
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d104      	bne.n	800cf0e <HAL_SD_IRQHandler+0xda>
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	f003 0302 	and.w	r3, r3, #2
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d003      	beq.n	800cf16 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800cf0e:	6878      	ldr	r0, [r7, #4]
 800cf10:	f003 fe04 	bl	8010b1c <HAL_SD_RxCpltCallback>
 800cf14:	e0fb      	b.n	800d10e <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800cf16:	6878      	ldr	r0, [r7, #4]
 800cf18:	f003 fdf6 	bl	8010b08 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800cf1c:	e0f7      	b.n	800d10e <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	f000 80f2 	beq.w	800d10e <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	f003 0320 	and.w	r3, r3, #32
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d011      	beq.n	800cf58 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	4618      	mov	r0, r3
 800cf3a:	f003 f973 	bl	8010224 <SDMMC_CmdStopTransfer>
 800cf3e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800cf40:	68bb      	ldr	r3, [r7, #8]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d008      	beq.n	800cf58 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cf4a:	68bb      	ldr	r3, [r7, #8]
 800cf4c:	431a      	orrs	r2, r3
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800cf52:	6878      	ldr	r0, [r7, #4]
 800cf54:	f000 f8e4 	bl	800d120 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	f003 0301 	and.w	r3, r3, #1
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	f040 80d5 	bne.w	800d10e <HAL_SD_IRQHandler+0x2da>
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	f003 0302 	and.w	r3, r3, #2
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	f040 80cf 	bne.w	800d10e <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	f022 0208 	bic.w	r2, r2, #8
 800cf7e:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	2201      	movs	r2, #1
 800cf84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800cf88:	6878      	ldr	r0, [r7, #4]
 800cf8a:	f003 fdbd 	bl	8010b08 <HAL_SD_TxCpltCallback>
}
 800cf8e:	e0be      	b.n	800d10e <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d008      	beq.n	800cfb0 <HAL_SD_IRQHandler+0x17c>
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	f003 0308 	and.w	r3, r3, #8
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d003      	beq.n	800cfb0 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800cfa8:	6878      	ldr	r0, [r7, #4]
 800cfaa:	f000 ff72 	bl	800de92 <SD_Write_IT>
 800cfae:	e0ae      	b.n	800d10e <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cfb6:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	f000 80a7 	beq.w	800d10e <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cfc6:	f003 0302 	and.w	r3, r3, #2
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d005      	beq.n	800cfda <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfd2:	f043 0202 	orr.w	r2, r3, #2
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cfe0:	f003 0308 	and.w	r3, r3, #8
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d005      	beq.n	800cff4 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfec:	f043 0208 	orr.w	r2, r3, #8
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cffa:	f003 0320 	and.w	r3, r3, #32
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d005      	beq.n	800d00e <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d006:	f043 0220 	orr.w	r2, r3, #32
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d014:	f003 0310 	and.w	r3, r3, #16
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d005      	beq.n	800d028 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d020:	f043 0210 	orr.w	r2, r3, #16
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	f240 523a 	movw	r2, #1338	; 0x53a
 800d030:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800d040:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	4618      	mov	r0, r3
 800d048:	f003 f8ec 	bl	8010224 <SDMMC_CmdStopTransfer>
 800d04c:	4602      	mov	r2, r0
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d052:	431a      	orrs	r2, r3
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	f003 0308 	and.w	r3, r3, #8
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d00a      	beq.n	800d078 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	2201      	movs	r2, #1
 800d066:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	2200      	movs	r2, #0
 800d06e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800d070:	6878      	ldr	r0, [r7, #4]
 800d072:	f000 f855 	bl	800d120 <HAL_SD_ErrorCallback>
}
 800d076:	e04a      	b.n	800d10e <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d045      	beq.n	800d10e <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	f003 0310 	and.w	r3, r3, #16
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d104      	bne.n	800d096 <HAL_SD_IRQHandler+0x262>
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	f003 0320 	and.w	r3, r3, #32
 800d092:	2b00      	cmp	r3, #0
 800d094:	d011      	beq.n	800d0ba <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d09a:	4a1f      	ldr	r2, [pc, #124]	; (800d118 <HAL_SD_IRQHandler+0x2e4>)
 800d09c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0a2:	4618      	mov	r0, r3
 800d0a4:	f7fd f9a6 	bl	800a3f4 <HAL_DMA_Abort_IT>
 800d0a8:	4603      	mov	r3, r0
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d02f      	beq.n	800d10e <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	f000 fb4a 	bl	800d74c <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800d0b8:	e029      	b.n	800d10e <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	f003 0301 	and.w	r3, r3, #1
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	d104      	bne.n	800d0ce <HAL_SD_IRQHandler+0x29a>
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	f003 0302 	and.w	r3, r3, #2
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d011      	beq.n	800d0f2 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0d2:	4a12      	ldr	r2, [pc, #72]	; (800d11c <HAL_SD_IRQHandler+0x2e8>)
 800d0d4:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0da:	4618      	mov	r0, r3
 800d0dc:	f7fd f98a 	bl	800a3f4 <HAL_DMA_Abort_IT>
 800d0e0:	4603      	mov	r3, r0
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d013      	beq.n	800d10e <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	f000 fb65 	bl	800d7ba <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800d0f0:	e00d      	b.n	800d10e <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	2200      	movs	r2, #0
 800d0f6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	2201      	movs	r2, #1
 800d0fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	2200      	movs	r2, #0
 800d104:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800d106:	6878      	ldr	r0, [r7, #4]
 800d108:	f003 fcf4 	bl	8010af4 <HAL_SD_AbortCallback>
}
 800d10c:	e7ff      	b.n	800d10e <HAL_SD_IRQHandler+0x2da>
 800d10e:	bf00      	nop
 800d110:	3710      	adds	r7, #16
 800d112:	46bd      	mov	sp, r7
 800d114:	bd80      	pop	{r7, pc}
 800d116:	bf00      	nop
 800d118:	0800d74d 	.word	0x0800d74d
 800d11c:	0800d7bb 	.word	0x0800d7bb

0800d120 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800d120:	b480      	push	{r7}
 800d122:	b083      	sub	sp, #12
 800d124:	af00      	add	r7, sp, #0
 800d126:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800d128:	bf00      	nop
 800d12a:	370c      	adds	r7, #12
 800d12c:	46bd      	mov	sp, r7
 800d12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d132:	4770      	bx	lr

0800d134 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800d134:	b480      	push	{r7}
 800d136:	b083      	sub	sp, #12
 800d138:	af00      	add	r7, sp, #0
 800d13a:	6078      	str	r0, [r7, #4]
 800d13c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d142:	0f9b      	lsrs	r3, r3, #30
 800d144:	b2da      	uxtb	r2, r3
 800d146:	683b      	ldr	r3, [r7, #0]
 800d148:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d14e:	0e9b      	lsrs	r3, r3, #26
 800d150:	b2db      	uxtb	r3, r3
 800d152:	f003 030f 	and.w	r3, r3, #15
 800d156:	b2da      	uxtb	r2, r3
 800d158:	683b      	ldr	r3, [r7, #0]
 800d15a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d160:	0e1b      	lsrs	r3, r3, #24
 800d162:	b2db      	uxtb	r3, r3
 800d164:	f003 0303 	and.w	r3, r3, #3
 800d168:	b2da      	uxtb	r2, r3
 800d16a:	683b      	ldr	r3, [r7, #0]
 800d16c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d172:	0c1b      	lsrs	r3, r3, #16
 800d174:	b2da      	uxtb	r2, r3
 800d176:	683b      	ldr	r3, [r7, #0]
 800d178:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d17e:	0a1b      	lsrs	r3, r3, #8
 800d180:	b2da      	uxtb	r2, r3
 800d182:	683b      	ldr	r3, [r7, #0]
 800d184:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d18a:	b2da      	uxtb	r2, r3
 800d18c:	683b      	ldr	r3, [r7, #0]
 800d18e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d194:	0d1b      	lsrs	r3, r3, #20
 800d196:	b29a      	uxth	r2, r3
 800d198:	683b      	ldr	r3, [r7, #0]
 800d19a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d1a0:	0c1b      	lsrs	r3, r3, #16
 800d1a2:	b2db      	uxtb	r3, r3
 800d1a4:	f003 030f 	and.w	r3, r3, #15
 800d1a8:	b2da      	uxtb	r2, r3
 800d1aa:	683b      	ldr	r3, [r7, #0]
 800d1ac:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d1b2:	0bdb      	lsrs	r3, r3, #15
 800d1b4:	b2db      	uxtb	r3, r3
 800d1b6:	f003 0301 	and.w	r3, r3, #1
 800d1ba:	b2da      	uxtb	r2, r3
 800d1bc:	683b      	ldr	r3, [r7, #0]
 800d1be:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d1c4:	0b9b      	lsrs	r3, r3, #14
 800d1c6:	b2db      	uxtb	r3, r3
 800d1c8:	f003 0301 	and.w	r3, r3, #1
 800d1cc:	b2da      	uxtb	r2, r3
 800d1ce:	683b      	ldr	r3, [r7, #0]
 800d1d0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d1d6:	0b5b      	lsrs	r3, r3, #13
 800d1d8:	b2db      	uxtb	r3, r3
 800d1da:	f003 0301 	and.w	r3, r3, #1
 800d1de:	b2da      	uxtb	r2, r3
 800d1e0:	683b      	ldr	r3, [r7, #0]
 800d1e2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d1e8:	0b1b      	lsrs	r3, r3, #12
 800d1ea:	b2db      	uxtb	r3, r3
 800d1ec:	f003 0301 	and.w	r3, r3, #1
 800d1f0:	b2da      	uxtb	r2, r3
 800d1f2:	683b      	ldr	r3, [r7, #0]
 800d1f4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800d1f6:	683b      	ldr	r3, [r7, #0]
 800d1f8:	2200      	movs	r2, #0
 800d1fa:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d200:	2b00      	cmp	r3, #0
 800d202:	d163      	bne.n	800d2cc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d208:	009a      	lsls	r2, r3, #2
 800d20a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800d20e:	4013      	ands	r3, r2
 800d210:	687a      	ldr	r2, [r7, #4]
 800d212:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800d214:	0f92      	lsrs	r2, r2, #30
 800d216:	431a      	orrs	r2, r3
 800d218:	683b      	ldr	r3, [r7, #0]
 800d21a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d220:	0edb      	lsrs	r3, r3, #27
 800d222:	b2db      	uxtb	r3, r3
 800d224:	f003 0307 	and.w	r3, r3, #7
 800d228:	b2da      	uxtb	r2, r3
 800d22a:	683b      	ldr	r3, [r7, #0]
 800d22c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d232:	0e1b      	lsrs	r3, r3, #24
 800d234:	b2db      	uxtb	r3, r3
 800d236:	f003 0307 	and.w	r3, r3, #7
 800d23a:	b2da      	uxtb	r2, r3
 800d23c:	683b      	ldr	r3, [r7, #0]
 800d23e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d244:	0d5b      	lsrs	r3, r3, #21
 800d246:	b2db      	uxtb	r3, r3
 800d248:	f003 0307 	and.w	r3, r3, #7
 800d24c:	b2da      	uxtb	r2, r3
 800d24e:	683b      	ldr	r3, [r7, #0]
 800d250:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d256:	0c9b      	lsrs	r3, r3, #18
 800d258:	b2db      	uxtb	r3, r3
 800d25a:	f003 0307 	and.w	r3, r3, #7
 800d25e:	b2da      	uxtb	r2, r3
 800d260:	683b      	ldr	r3, [r7, #0]
 800d262:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d268:	0bdb      	lsrs	r3, r3, #15
 800d26a:	b2db      	uxtb	r3, r3
 800d26c:	f003 0307 	and.w	r3, r3, #7
 800d270:	b2da      	uxtb	r2, r3
 800d272:	683b      	ldr	r3, [r7, #0]
 800d274:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800d276:	683b      	ldr	r3, [r7, #0]
 800d278:	691b      	ldr	r3, [r3, #16]
 800d27a:	1c5a      	adds	r2, r3, #1
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800d280:	683b      	ldr	r3, [r7, #0]
 800d282:	7e1b      	ldrb	r3, [r3, #24]
 800d284:	b2db      	uxtb	r3, r3
 800d286:	f003 0307 	and.w	r3, r3, #7
 800d28a:	3302      	adds	r3, #2
 800d28c:	2201      	movs	r2, #1
 800d28e:	fa02 f303 	lsl.w	r3, r2, r3
 800d292:	687a      	ldr	r2, [r7, #4]
 800d294:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800d296:	fb02 f203 	mul.w	r2, r2, r3
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800d29e:	683b      	ldr	r3, [r7, #0]
 800d2a0:	7a1b      	ldrb	r3, [r3, #8]
 800d2a2:	b2db      	uxtb	r3, r3
 800d2a4:	f003 030f 	and.w	r3, r3, #15
 800d2a8:	2201      	movs	r2, #1
 800d2aa:	409a      	lsls	r2, r3
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d2b4:	687a      	ldr	r2, [r7, #4]
 800d2b6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800d2b8:	0a52      	lsrs	r2, r2, #9
 800d2ba:	fb02 f203 	mul.w	r2, r2, r3
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d2c8:	661a      	str	r2, [r3, #96]	; 0x60
 800d2ca:	e031      	b.n	800d330 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d2d0:	2b01      	cmp	r3, #1
 800d2d2:	d11d      	bne.n	800d310 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d2d8:	041b      	lsls	r3, r3, #16
 800d2da:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d2e2:	0c1b      	lsrs	r3, r3, #16
 800d2e4:	431a      	orrs	r2, r3
 800d2e6:	683b      	ldr	r3, [r7, #0]
 800d2e8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800d2ea:	683b      	ldr	r3, [r7, #0]
 800d2ec:	691b      	ldr	r3, [r3, #16]
 800d2ee:	3301      	adds	r3, #1
 800d2f0:	029a      	lsls	r2, r3, #10
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d304:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	661a      	str	r2, [r3, #96]	; 0x60
 800d30e:	e00f      	b.n	800d330 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	4a58      	ldr	r2, [pc, #352]	; (800d478 <HAL_SD_GetCardCSD+0x344>)
 800d316:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d31c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	2201      	movs	r2, #1
 800d328:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d32c:	2301      	movs	r3, #1
 800d32e:	e09d      	b.n	800d46c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d334:	0b9b      	lsrs	r3, r3, #14
 800d336:	b2db      	uxtb	r3, r3
 800d338:	f003 0301 	and.w	r3, r3, #1
 800d33c:	b2da      	uxtb	r2, r3
 800d33e:	683b      	ldr	r3, [r7, #0]
 800d340:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d346:	09db      	lsrs	r3, r3, #7
 800d348:	b2db      	uxtb	r3, r3
 800d34a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d34e:	b2da      	uxtb	r2, r3
 800d350:	683b      	ldr	r3, [r7, #0]
 800d352:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d358:	b2db      	uxtb	r3, r3
 800d35a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d35e:	b2da      	uxtb	r2, r3
 800d360:	683b      	ldr	r3, [r7, #0]
 800d362:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d368:	0fdb      	lsrs	r3, r3, #31
 800d36a:	b2da      	uxtb	r2, r3
 800d36c:	683b      	ldr	r3, [r7, #0]
 800d36e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d374:	0f5b      	lsrs	r3, r3, #29
 800d376:	b2db      	uxtb	r3, r3
 800d378:	f003 0303 	and.w	r3, r3, #3
 800d37c:	b2da      	uxtb	r2, r3
 800d37e:	683b      	ldr	r3, [r7, #0]
 800d380:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d386:	0e9b      	lsrs	r3, r3, #26
 800d388:	b2db      	uxtb	r3, r3
 800d38a:	f003 0307 	and.w	r3, r3, #7
 800d38e:	b2da      	uxtb	r2, r3
 800d390:	683b      	ldr	r3, [r7, #0]
 800d392:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d398:	0d9b      	lsrs	r3, r3, #22
 800d39a:	b2db      	uxtb	r3, r3
 800d39c:	f003 030f 	and.w	r3, r3, #15
 800d3a0:	b2da      	uxtb	r2, r3
 800d3a2:	683b      	ldr	r3, [r7, #0]
 800d3a4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d3aa:	0d5b      	lsrs	r3, r3, #21
 800d3ac:	b2db      	uxtb	r3, r3
 800d3ae:	f003 0301 	and.w	r3, r3, #1
 800d3b2:	b2da      	uxtb	r2, r3
 800d3b4:	683b      	ldr	r3, [r7, #0]
 800d3b6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800d3ba:	683b      	ldr	r3, [r7, #0]
 800d3bc:	2200      	movs	r2, #0
 800d3be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d3c6:	0c1b      	lsrs	r3, r3, #16
 800d3c8:	b2db      	uxtb	r3, r3
 800d3ca:	f003 0301 	and.w	r3, r3, #1
 800d3ce:	b2da      	uxtb	r2, r3
 800d3d0:	683b      	ldr	r3, [r7, #0]
 800d3d2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d3da:	0bdb      	lsrs	r3, r3, #15
 800d3dc:	b2db      	uxtb	r3, r3
 800d3de:	f003 0301 	and.w	r3, r3, #1
 800d3e2:	b2da      	uxtb	r2, r3
 800d3e4:	683b      	ldr	r3, [r7, #0]
 800d3e6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d3ee:	0b9b      	lsrs	r3, r3, #14
 800d3f0:	b2db      	uxtb	r3, r3
 800d3f2:	f003 0301 	and.w	r3, r3, #1
 800d3f6:	b2da      	uxtb	r2, r3
 800d3f8:	683b      	ldr	r3, [r7, #0]
 800d3fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d402:	0b5b      	lsrs	r3, r3, #13
 800d404:	b2db      	uxtb	r3, r3
 800d406:	f003 0301 	and.w	r3, r3, #1
 800d40a:	b2da      	uxtb	r2, r3
 800d40c:	683b      	ldr	r3, [r7, #0]
 800d40e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d416:	0b1b      	lsrs	r3, r3, #12
 800d418:	b2db      	uxtb	r3, r3
 800d41a:	f003 0301 	and.w	r3, r3, #1
 800d41e:	b2da      	uxtb	r2, r3
 800d420:	683b      	ldr	r3, [r7, #0]
 800d422:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d42a:	0a9b      	lsrs	r3, r3, #10
 800d42c:	b2db      	uxtb	r3, r3
 800d42e:	f003 0303 	and.w	r3, r3, #3
 800d432:	b2da      	uxtb	r2, r3
 800d434:	683b      	ldr	r3, [r7, #0]
 800d436:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d43e:	0a1b      	lsrs	r3, r3, #8
 800d440:	b2db      	uxtb	r3, r3
 800d442:	f003 0303 	and.w	r3, r3, #3
 800d446:	b2da      	uxtb	r2, r3
 800d448:	683b      	ldr	r3, [r7, #0]
 800d44a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d452:	085b      	lsrs	r3, r3, #1
 800d454:	b2db      	uxtb	r3, r3
 800d456:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d45a:	b2da      	uxtb	r2, r3
 800d45c:	683b      	ldr	r3, [r7, #0]
 800d45e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800d462:	683b      	ldr	r3, [r7, #0]
 800d464:	2201      	movs	r2, #1
 800d466:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800d46a:	2300      	movs	r3, #0
}
 800d46c:	4618      	mov	r0, r3
 800d46e:	370c      	adds	r7, #12
 800d470:	46bd      	mov	sp, r7
 800d472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d476:	4770      	bx	lr
 800d478:	004005ff 	.word	0x004005ff

0800d47c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800d47c:	b480      	push	{r7}
 800d47e:	b083      	sub	sp, #12
 800d480:	af00      	add	r7, sp, #0
 800d482:	6078      	str	r0, [r7, #4]
 800d484:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d48a:	683b      	ldr	r3, [r7, #0]
 800d48c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d492:	683b      	ldr	r3, [r7, #0]
 800d494:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d49a:	683b      	ldr	r3, [r7, #0]
 800d49c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d4a2:	683b      	ldr	r3, [r7, #0]
 800d4a4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d4aa:	683b      	ldr	r3, [r7, #0]
 800d4ac:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d4b2:	683b      	ldr	r3, [r7, #0]
 800d4b4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d4ba:	683b      	ldr	r3, [r7, #0]
 800d4bc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800d4c2:	683b      	ldr	r3, [r7, #0]
 800d4c4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800d4c6:	2300      	movs	r3, #0
}
 800d4c8:	4618      	mov	r0, r3
 800d4ca:	370c      	adds	r7, #12
 800d4cc:	46bd      	mov	sp, r7
 800d4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d2:	4770      	bx	lr

0800d4d4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800d4d4:	b5b0      	push	{r4, r5, r7, lr}
 800d4d6:	b08e      	sub	sp, #56	; 0x38
 800d4d8:	af04      	add	r7, sp, #16
 800d4da:	6078      	str	r0, [r7, #4]
 800d4dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	2203      	movs	r2, #3
 800d4e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d4ea:	2b03      	cmp	r3, #3
 800d4ec:	d02e      	beq.n	800d54c <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800d4ee:	683b      	ldr	r3, [r7, #0]
 800d4f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d4f4:	d106      	bne.n	800d504 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4fa:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	639a      	str	r2, [r3, #56]	; 0x38
 800d502:	e029      	b.n	800d558 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800d504:	683b      	ldr	r3, [r7, #0]
 800d506:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d50a:	d10a      	bne.n	800d522 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800d50c:	6878      	ldr	r0, [r7, #4]
 800d50e:	f000 fb0f 	bl	800db30 <SD_WideBus_Enable>
 800d512:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d51a:	431a      	orrs	r2, r3
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	639a      	str	r2, [r3, #56]	; 0x38
 800d520:	e01a      	b.n	800d558 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800d522:	683b      	ldr	r3, [r7, #0]
 800d524:	2b00      	cmp	r3, #0
 800d526:	d10a      	bne.n	800d53e <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800d528:	6878      	ldr	r0, [r7, #4]
 800d52a:	f000 fb4c 	bl	800dbc6 <SD_WideBus_Disable>
 800d52e:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d536:	431a      	orrs	r2, r3
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	639a      	str	r2, [r3, #56]	; 0x38
 800d53c:	e00c      	b.n	800d558 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d542:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	639a      	str	r2, [r3, #56]	; 0x38
 800d54a:	e005      	b.n	800d558 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d550:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d009      	beq.n	800d574 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	681b      	ldr	r3, [r3, #0]
 800d564:	4a18      	ldr	r2, [pc, #96]	; (800d5c8 <HAL_SD_ConfigWideBusOperation+0xf4>)
 800d566:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	2201      	movs	r2, #1
 800d56c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d570:	2301      	movs	r3, #1
 800d572:	e024      	b.n	800d5be <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	685b      	ldr	r3, [r3, #4]
 800d578:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	689b      	ldr	r3, [r3, #8]
 800d57e:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	68db      	ldr	r3, [r3, #12]
 800d584:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800d586:	683b      	ldr	r3, [r7, #0]
 800d588:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	695b      	ldr	r3, [r3, #20]
 800d58e:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	699b      	ldr	r3, [r3, #24]
 800d594:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	681d      	ldr	r5, [r3, #0]
 800d59a:	466c      	mov	r4, sp
 800d59c:	f107 0318 	add.w	r3, r7, #24
 800d5a0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d5a4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d5a8:	f107 030c 	add.w	r3, r7, #12
 800d5ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d5ae:	4628      	mov	r0, r5
 800d5b0:	f002 fcb2 	bl	800ff18 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	2201      	movs	r2, #1
 800d5b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800d5bc:	2300      	movs	r3, #0
}
 800d5be:	4618      	mov	r0, r3
 800d5c0:	3728      	adds	r7, #40	; 0x28
 800d5c2:	46bd      	mov	sp, r7
 800d5c4:	bdb0      	pop	{r4, r5, r7, pc}
 800d5c6:	bf00      	nop
 800d5c8:	004005ff 	.word	0x004005ff

0800d5cc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800d5cc:	b580      	push	{r7, lr}
 800d5ce:	b086      	sub	sp, #24
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800d5d4:	2300      	movs	r3, #0
 800d5d6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800d5d8:	f107 030c 	add.w	r3, r7, #12
 800d5dc:	4619      	mov	r1, r3
 800d5de:	6878      	ldr	r0, [r7, #4]
 800d5e0:	f000 fa7e 	bl	800dae0 <SD_SendStatus>
 800d5e4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d5e6:	697b      	ldr	r3, [r7, #20]
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d005      	beq.n	800d5f8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d5f0:	697b      	ldr	r3, [r7, #20]
 800d5f2:	431a      	orrs	r2, r3
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	0a5b      	lsrs	r3, r3, #9
 800d5fc:	f003 030f 	and.w	r3, r3, #15
 800d600:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800d602:	693b      	ldr	r3, [r7, #16]
}
 800d604:	4618      	mov	r0, r3
 800d606:	3718      	adds	r7, #24
 800d608:	46bd      	mov	sp, r7
 800d60a:	bd80      	pop	{r7, pc}

0800d60c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d60c:	b480      	push	{r7}
 800d60e:	b085      	sub	sp, #20
 800d610:	af00      	add	r7, sp, #0
 800d612:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d618:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d628:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800d62a:	bf00      	nop
 800d62c:	3714      	adds	r7, #20
 800d62e:	46bd      	mov	sp, r7
 800d630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d634:	4770      	bx	lr

0800d636 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d636:	b580      	push	{r7, lr}
 800d638:	b084      	sub	sp, #16
 800d63a:	af00      	add	r7, sp, #0
 800d63c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d642:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d648:	2b82      	cmp	r3, #130	; 0x82
 800d64a:	d111      	bne.n	800d670 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	4618      	mov	r0, r3
 800d652:	f002 fde7 	bl	8010224 <SDMMC_CmdStopTransfer>
 800d656:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800d658:	68bb      	ldr	r3, [r7, #8]
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d008      	beq.n	800d670 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d662:	68bb      	ldr	r3, [r7, #8]
 800d664:	431a      	orrs	r2, r3
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800d66a:	68f8      	ldr	r0, [r7, #12]
 800d66c:	f7ff fd58 	bl	800d120 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	f022 0208 	bic.w	r2, r2, #8
 800d67e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	681b      	ldr	r3, [r3, #0]
 800d684:	f240 523a 	movw	r2, #1338	; 0x53a
 800d688:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	2201      	movs	r2, #1
 800d68e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800d692:	68fb      	ldr	r3, [r7, #12]
 800d694:	2200      	movs	r2, #0
 800d696:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800d698:	68f8      	ldr	r0, [r7, #12]
 800d69a:	f003 fa3f 	bl	8010b1c <HAL_SD_RxCpltCallback>
#endif
}
 800d69e:	bf00      	nop
 800d6a0:	3710      	adds	r7, #16
 800d6a2:	46bd      	mov	sp, r7
 800d6a4:	bd80      	pop	{r7, pc}
	...

0800d6a8 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800d6a8:	b580      	push	{r7, lr}
 800d6aa:	b086      	sub	sp, #24
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6b4:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800d6b6:	6878      	ldr	r0, [r7, #4]
 800d6b8:	f7fd f848 	bl	800a74c <HAL_DMA_GetError>
 800d6bc:	4603      	mov	r3, r0
 800d6be:	2b02      	cmp	r3, #2
 800d6c0:	d03e      	beq.n	800d740 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800d6c2:	697b      	ldr	r3, [r7, #20]
 800d6c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d6c8:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800d6ca:	697b      	ldr	r3, [r7, #20]
 800d6cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d6ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d6d0:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800d6d2:	693b      	ldr	r3, [r7, #16]
 800d6d4:	2b01      	cmp	r3, #1
 800d6d6:	d002      	beq.n	800d6de <SD_DMAError+0x36>
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	2b01      	cmp	r3, #1
 800d6dc:	d12d      	bne.n	800d73a <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800d6de:	697b      	ldr	r3, [r7, #20]
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	4a19      	ldr	r2, [pc, #100]	; (800d748 <SD_DMAError+0xa0>)
 800d6e4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800d6e6:	697b      	ldr	r3, [r7, #20]
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d6ec:	697b      	ldr	r3, [r7, #20]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800d6f4:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800d6f6:	697b      	ldr	r3, [r7, #20]
 800d6f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6fa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d6fe:	697b      	ldr	r3, [r7, #20]
 800d700:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800d702:	6978      	ldr	r0, [r7, #20]
 800d704:	f7ff ff62 	bl	800d5cc <HAL_SD_GetCardState>
 800d708:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800d70a:	68bb      	ldr	r3, [r7, #8]
 800d70c:	2b06      	cmp	r3, #6
 800d70e:	d002      	beq.n	800d716 <SD_DMAError+0x6e>
 800d710:	68bb      	ldr	r3, [r7, #8]
 800d712:	2b05      	cmp	r3, #5
 800d714:	d10a      	bne.n	800d72c <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d716:	697b      	ldr	r3, [r7, #20]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	4618      	mov	r0, r3
 800d71c:	f002 fd82 	bl	8010224 <SDMMC_CmdStopTransfer>
 800d720:	4602      	mov	r2, r0
 800d722:	697b      	ldr	r3, [r7, #20]
 800d724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d726:	431a      	orrs	r2, r3
 800d728:	697b      	ldr	r3, [r7, #20]
 800d72a:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800d72c:	697b      	ldr	r3, [r7, #20]
 800d72e:	2201      	movs	r2, #1
 800d730:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d734:	697b      	ldr	r3, [r7, #20]
 800d736:	2200      	movs	r2, #0
 800d738:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800d73a:	6978      	ldr	r0, [r7, #20]
 800d73c:	f7ff fcf0 	bl	800d120 <HAL_SD_ErrorCallback>
#endif
  }
}
 800d740:	bf00      	nop
 800d742:	3718      	adds	r7, #24
 800d744:	46bd      	mov	sp, r7
 800d746:	bd80      	pop	{r7, pc}
 800d748:	004005ff 	.word	0x004005ff

0800d74c <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800d74c:	b580      	push	{r7, lr}
 800d74e:	b084      	sub	sp, #16
 800d750:	af00      	add	r7, sp, #0
 800d752:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d758:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	f240 523a 	movw	r2, #1338	; 0x53a
 800d762:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800d764:	68f8      	ldr	r0, [r7, #12]
 800d766:	f7ff ff31 	bl	800d5cc <HAL_SD_GetCardState>
 800d76a:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	2201      	movs	r2, #1
 800d770:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	2200      	movs	r2, #0
 800d778:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800d77a:	68bb      	ldr	r3, [r7, #8]
 800d77c:	2b06      	cmp	r3, #6
 800d77e:	d002      	beq.n	800d786 <SD_DMATxAbort+0x3a>
 800d780:	68bb      	ldr	r3, [r7, #8]
 800d782:	2b05      	cmp	r3, #5
 800d784:	d10a      	bne.n	800d79c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	4618      	mov	r0, r3
 800d78c:	f002 fd4a 	bl	8010224 <SDMMC_CmdStopTransfer>
 800d790:	4602      	mov	r2, r0
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d796:	431a      	orrs	r2, r3
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d103      	bne.n	800d7ac <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800d7a4:	68f8      	ldr	r0, [r7, #12]
 800d7a6:	f003 f9a5 	bl	8010af4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800d7aa:	e002      	b.n	800d7b2 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800d7ac:	68f8      	ldr	r0, [r7, #12]
 800d7ae:	f7ff fcb7 	bl	800d120 <HAL_SD_ErrorCallback>
}
 800d7b2:	bf00      	nop
 800d7b4:	3710      	adds	r7, #16
 800d7b6:	46bd      	mov	sp, r7
 800d7b8:	bd80      	pop	{r7, pc}

0800d7ba <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800d7ba:	b580      	push	{r7, lr}
 800d7bc:	b084      	sub	sp, #16
 800d7be:	af00      	add	r7, sp, #0
 800d7c0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7c6:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	f240 523a 	movw	r2, #1338	; 0x53a
 800d7d0:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800d7d2:	68f8      	ldr	r0, [r7, #12]
 800d7d4:	f7ff fefa 	bl	800d5cc <HAL_SD_GetCardState>
 800d7d8:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	2201      	movs	r2, #1
 800d7de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	2200      	movs	r2, #0
 800d7e6:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800d7e8:	68bb      	ldr	r3, [r7, #8]
 800d7ea:	2b06      	cmp	r3, #6
 800d7ec:	d002      	beq.n	800d7f4 <SD_DMARxAbort+0x3a>
 800d7ee:	68bb      	ldr	r3, [r7, #8]
 800d7f0:	2b05      	cmp	r3, #5
 800d7f2:	d10a      	bne.n	800d80a <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	4618      	mov	r0, r3
 800d7fa:	f002 fd13 	bl	8010224 <SDMMC_CmdStopTransfer>
 800d7fe:	4602      	mov	r2, r0
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d804:	431a      	orrs	r2, r3
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d80e:	2b00      	cmp	r3, #0
 800d810:	d103      	bne.n	800d81a <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800d812:	68f8      	ldr	r0, [r7, #12]
 800d814:	f003 f96e 	bl	8010af4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800d818:	e002      	b.n	800d820 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800d81a:	68f8      	ldr	r0, [r7, #12]
 800d81c:	f7ff fc80 	bl	800d120 <HAL_SD_ErrorCallback>
}
 800d820:	bf00      	nop
 800d822:	3710      	adds	r7, #16
 800d824:	46bd      	mov	sp, r7
 800d826:	bd80      	pop	{r7, pc}

0800d828 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d828:	b5b0      	push	{r4, r5, r7, lr}
 800d82a:	b094      	sub	sp, #80	; 0x50
 800d82c:	af04      	add	r7, sp, #16
 800d82e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800d830:	2301      	movs	r3, #1
 800d832:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	4618      	mov	r0, r3
 800d83a:	f002 fbc5 	bl	800ffc8 <SDIO_GetPowerState>
 800d83e:	4603      	mov	r3, r0
 800d840:	2b00      	cmp	r3, #0
 800d842:	d102      	bne.n	800d84a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800d844:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800d848:	e0b7      	b.n	800d9ba <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d84e:	2b03      	cmp	r3, #3
 800d850:	d02f      	beq.n	800d8b2 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	4618      	mov	r0, r3
 800d858:	f002 fdee 	bl	8010438 <SDMMC_CmdSendCID>
 800d85c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d85e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d860:	2b00      	cmp	r3, #0
 800d862:	d001      	beq.n	800d868 <SD_InitCard+0x40>
    {
      return errorstate;
 800d864:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d866:	e0a8      	b.n	800d9ba <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	2100      	movs	r1, #0
 800d86e:	4618      	mov	r0, r3
 800d870:	f002 fbef 	bl	8010052 <SDIO_GetResponse>
 800d874:	4602      	mov	r2, r0
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	2104      	movs	r1, #4
 800d880:	4618      	mov	r0, r3
 800d882:	f002 fbe6 	bl	8010052 <SDIO_GetResponse>
 800d886:	4602      	mov	r2, r0
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	2108      	movs	r1, #8
 800d892:	4618      	mov	r0, r3
 800d894:	f002 fbdd 	bl	8010052 <SDIO_GetResponse>
 800d898:	4602      	mov	r2, r0
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	210c      	movs	r1, #12
 800d8a4:	4618      	mov	r0, r3
 800d8a6:	f002 fbd4 	bl	8010052 <SDIO_GetResponse>
 800d8aa:	4602      	mov	r2, r0
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d8b6:	2b03      	cmp	r3, #3
 800d8b8:	d00d      	beq.n	800d8d6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	f107 020e 	add.w	r2, r7, #14
 800d8c2:	4611      	mov	r1, r2
 800d8c4:	4618      	mov	r0, r3
 800d8c6:	f002 fdf4 	bl	80104b2 <SDMMC_CmdSetRelAdd>
 800d8ca:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d8cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d001      	beq.n	800d8d6 <SD_InitCard+0xae>
    {
      return errorstate;
 800d8d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8d4:	e071      	b.n	800d9ba <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d8da:	2b03      	cmp	r3, #3
 800d8dc:	d036      	beq.n	800d94c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800d8de:	89fb      	ldrh	r3, [r7, #14]
 800d8e0:	461a      	mov	r2, r3
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	681a      	ldr	r2, [r3, #0]
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d8ee:	041b      	lsls	r3, r3, #16
 800d8f0:	4619      	mov	r1, r3
 800d8f2:	4610      	mov	r0, r2
 800d8f4:	f002 fdbe 	bl	8010474 <SDMMC_CmdSendCSD>
 800d8f8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800d8fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d001      	beq.n	800d904 <SD_InitCard+0xdc>
    {
      return errorstate;
 800d900:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d902:	e05a      	b.n	800d9ba <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	2100      	movs	r1, #0
 800d90a:	4618      	mov	r0, r3
 800d90c:	f002 fba1 	bl	8010052 <SDIO_GetResponse>
 800d910:	4602      	mov	r2, r0
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	2104      	movs	r1, #4
 800d91c:	4618      	mov	r0, r3
 800d91e:	f002 fb98 	bl	8010052 <SDIO_GetResponse>
 800d922:	4602      	mov	r2, r0
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	2108      	movs	r1, #8
 800d92e:	4618      	mov	r0, r3
 800d930:	f002 fb8f 	bl	8010052 <SDIO_GetResponse>
 800d934:	4602      	mov	r2, r0
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	210c      	movs	r1, #12
 800d940:	4618      	mov	r0, r3
 800d942:	f002 fb86 	bl	8010052 <SDIO_GetResponse>
 800d946:	4602      	mov	r2, r0
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	2104      	movs	r1, #4
 800d952:	4618      	mov	r0, r3
 800d954:	f002 fb7d 	bl	8010052 <SDIO_GetResponse>
 800d958:	4603      	mov	r3, r0
 800d95a:	0d1a      	lsrs	r2, r3, #20
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800d960:	f107 0310 	add.w	r3, r7, #16
 800d964:	4619      	mov	r1, r3
 800d966:	6878      	ldr	r0, [r7, #4]
 800d968:	f7ff fbe4 	bl	800d134 <HAL_SD_GetCardCSD>
 800d96c:	4603      	mov	r3, r0
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d002      	beq.n	800d978 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800d972:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d976:	e020      	b.n	800d9ba <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	6819      	ldr	r1, [r3, #0]
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d980:	041b      	lsls	r3, r3, #16
 800d982:	f04f 0400 	mov.w	r4, #0
 800d986:	461a      	mov	r2, r3
 800d988:	4623      	mov	r3, r4
 800d98a:	4608      	mov	r0, r1
 800d98c:	f002 fc6c 	bl	8010268 <SDMMC_CmdSelDesel>
 800d990:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800d992:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d994:	2b00      	cmp	r3, #0
 800d996:	d001      	beq.n	800d99c <SD_InitCard+0x174>
  {
    return errorstate;
 800d998:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d99a:	e00e      	b.n	800d9ba <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	681d      	ldr	r5, [r3, #0]
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	466c      	mov	r4, sp
 800d9a4:	f103 0210 	add.w	r2, r3, #16
 800d9a8:	ca07      	ldmia	r2, {r0, r1, r2}
 800d9aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d9ae:	3304      	adds	r3, #4
 800d9b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d9b2:	4628      	mov	r0, r5
 800d9b4:	f002 fab0 	bl	800ff18 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800d9b8:	2300      	movs	r3, #0
}
 800d9ba:	4618      	mov	r0, r3
 800d9bc:	3740      	adds	r7, #64	; 0x40
 800d9be:	46bd      	mov	sp, r7
 800d9c0:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800d9c4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800d9c4:	b580      	push	{r7, lr}
 800d9c6:	b086      	sub	sp, #24
 800d9c8:	af00      	add	r7, sp, #0
 800d9ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d9cc:	2300      	movs	r3, #0
 800d9ce:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800d9d0:	2300      	movs	r3, #0
 800d9d2:	617b      	str	r3, [r7, #20]
 800d9d4:	2300      	movs	r3, #0
 800d9d6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	4618      	mov	r0, r3
 800d9de:	f002 fc66 	bl	80102ae <SDMMC_CmdGoIdleState>
 800d9e2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d001      	beq.n	800d9ee <SD_PowerON+0x2a>
  {
    return errorstate;
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	e072      	b.n	800dad4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	4618      	mov	r0, r3
 800d9f4:	f002 fc79 	bl	80102ea <SDMMC_CmdOperCond>
 800d9f8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d00d      	beq.n	800da1c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	2200      	movs	r2, #0
 800da04:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	4618      	mov	r0, r3
 800da0c:	f002 fc4f 	bl	80102ae <SDMMC_CmdGoIdleState>
 800da10:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	2b00      	cmp	r3, #0
 800da16:	d004      	beq.n	800da22 <SD_PowerON+0x5e>
    {
      return errorstate;
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	e05b      	b.n	800dad4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	2201      	movs	r2, #1
 800da20:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800da26:	2b01      	cmp	r3, #1
 800da28:	d137      	bne.n	800da9a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	681b      	ldr	r3, [r3, #0]
 800da2e:	2100      	movs	r1, #0
 800da30:	4618      	mov	r0, r3
 800da32:	f002 fc79 	bl	8010328 <SDMMC_CmdAppCommand>
 800da36:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d02d      	beq.n	800da9a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800da3e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800da42:	e047      	b.n	800dad4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	2100      	movs	r1, #0
 800da4a:	4618      	mov	r0, r3
 800da4c:	f002 fc6c 	bl	8010328 <SDMMC_CmdAppCommand>
 800da50:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	2b00      	cmp	r3, #0
 800da56:	d001      	beq.n	800da5c <SD_PowerON+0x98>
    {
      return errorstate;
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	e03b      	b.n	800dad4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	491e      	ldr	r1, [pc, #120]	; (800dadc <SD_PowerON+0x118>)
 800da62:	4618      	mov	r0, r3
 800da64:	f002 fc82 	bl	801036c <SDMMC_CmdAppOperCommand>
 800da68:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d002      	beq.n	800da76 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800da70:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800da74:	e02e      	b.n	800dad4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	2100      	movs	r1, #0
 800da7c:	4618      	mov	r0, r3
 800da7e:	f002 fae8 	bl	8010052 <SDIO_GetResponse>
 800da82:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800da84:	697b      	ldr	r3, [r7, #20]
 800da86:	0fdb      	lsrs	r3, r3, #31
 800da88:	2b01      	cmp	r3, #1
 800da8a:	d101      	bne.n	800da90 <SD_PowerON+0xcc>
 800da8c:	2301      	movs	r3, #1
 800da8e:	e000      	b.n	800da92 <SD_PowerON+0xce>
 800da90:	2300      	movs	r3, #0
 800da92:	613b      	str	r3, [r7, #16]

    count++;
 800da94:	68bb      	ldr	r3, [r7, #8]
 800da96:	3301      	adds	r3, #1
 800da98:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800da9a:	68bb      	ldr	r3, [r7, #8]
 800da9c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800daa0:	4293      	cmp	r3, r2
 800daa2:	d802      	bhi.n	800daaa <SD_PowerON+0xe6>
 800daa4:	693b      	ldr	r3, [r7, #16]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d0cc      	beq.n	800da44 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800daaa:	68bb      	ldr	r3, [r7, #8]
 800daac:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800dab0:	4293      	cmp	r3, r2
 800dab2:	d902      	bls.n	800daba <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800dab4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800dab8:	e00c      	b.n	800dad4 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800daba:	697b      	ldr	r3, [r7, #20]
 800dabc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d003      	beq.n	800dacc <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	2201      	movs	r2, #1
 800dac8:	645a      	str	r2, [r3, #68]	; 0x44
 800daca:	e002      	b.n	800dad2 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	2200      	movs	r2, #0
 800dad0:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800dad2:	2300      	movs	r3, #0
}
 800dad4:	4618      	mov	r0, r3
 800dad6:	3718      	adds	r7, #24
 800dad8:	46bd      	mov	sp, r7
 800dada:	bd80      	pop	{r7, pc}
 800dadc:	c1100000 	.word	0xc1100000

0800dae0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800dae0:	b580      	push	{r7, lr}
 800dae2:	b084      	sub	sp, #16
 800dae4:	af00      	add	r7, sp, #0
 800dae6:	6078      	str	r0, [r7, #4]
 800dae8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800daea:	683b      	ldr	r3, [r7, #0]
 800daec:	2b00      	cmp	r3, #0
 800daee:	d102      	bne.n	800daf6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800daf0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800daf4:	e018      	b.n	800db28 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	681a      	ldr	r2, [r3, #0]
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dafe:	041b      	lsls	r3, r3, #16
 800db00:	4619      	mov	r1, r3
 800db02:	4610      	mov	r0, r2
 800db04:	f002 fcf6 	bl	80104f4 <SDMMC_CmdSendStatus>
 800db08:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d001      	beq.n	800db14 <SD_SendStatus+0x34>
  {
    return errorstate;
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	e009      	b.n	800db28 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	2100      	movs	r1, #0
 800db1a:	4618      	mov	r0, r3
 800db1c:	f002 fa99 	bl	8010052 <SDIO_GetResponse>
 800db20:	4602      	mov	r2, r0
 800db22:	683b      	ldr	r3, [r7, #0]
 800db24:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800db26:	2300      	movs	r3, #0
}
 800db28:	4618      	mov	r0, r3
 800db2a:	3710      	adds	r7, #16
 800db2c:	46bd      	mov	sp, r7
 800db2e:	bd80      	pop	{r7, pc}

0800db30 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800db30:	b580      	push	{r7, lr}
 800db32:	b086      	sub	sp, #24
 800db34:	af00      	add	r7, sp, #0
 800db36:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800db38:	2300      	movs	r3, #0
 800db3a:	60fb      	str	r3, [r7, #12]
 800db3c:	2300      	movs	r3, #0
 800db3e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	2100      	movs	r1, #0
 800db46:	4618      	mov	r0, r3
 800db48:	f002 fa83 	bl	8010052 <SDIO_GetResponse>
 800db4c:	4603      	mov	r3, r0
 800db4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800db52:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800db56:	d102      	bne.n	800db5e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800db58:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800db5c:	e02f      	b.n	800dbbe <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800db5e:	f107 030c 	add.w	r3, r7, #12
 800db62:	4619      	mov	r1, r3
 800db64:	6878      	ldr	r0, [r7, #4]
 800db66:	f000 f879 	bl	800dc5c <SD_FindSCR>
 800db6a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800db6c:	697b      	ldr	r3, [r7, #20]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d001      	beq.n	800db76 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800db72:	697b      	ldr	r3, [r7, #20]
 800db74:	e023      	b.n	800dbbe <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800db76:	693b      	ldr	r3, [r7, #16]
 800db78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d01c      	beq.n	800dbba <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	681a      	ldr	r2, [r3, #0]
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800db88:	041b      	lsls	r3, r3, #16
 800db8a:	4619      	mov	r1, r3
 800db8c:	4610      	mov	r0, r2
 800db8e:	f002 fbcb 	bl	8010328 <SDMMC_CmdAppCommand>
 800db92:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800db94:	697b      	ldr	r3, [r7, #20]
 800db96:	2b00      	cmp	r3, #0
 800db98:	d001      	beq.n	800db9e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800db9a:	697b      	ldr	r3, [r7, #20]
 800db9c:	e00f      	b.n	800dbbe <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	2102      	movs	r1, #2
 800dba4:	4618      	mov	r0, r3
 800dba6:	f002 fc04 	bl	80103b2 <SDMMC_CmdBusWidth>
 800dbaa:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dbac:	697b      	ldr	r3, [r7, #20]
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d001      	beq.n	800dbb6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800dbb2:	697b      	ldr	r3, [r7, #20]
 800dbb4:	e003      	b.n	800dbbe <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800dbb6:	2300      	movs	r3, #0
 800dbb8:	e001      	b.n	800dbbe <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800dbba:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800dbbe:	4618      	mov	r0, r3
 800dbc0:	3718      	adds	r7, #24
 800dbc2:	46bd      	mov	sp, r7
 800dbc4:	bd80      	pop	{r7, pc}

0800dbc6 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800dbc6:	b580      	push	{r7, lr}
 800dbc8:	b086      	sub	sp, #24
 800dbca:	af00      	add	r7, sp, #0
 800dbcc:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800dbce:	2300      	movs	r3, #0
 800dbd0:	60fb      	str	r3, [r7, #12]
 800dbd2:	2300      	movs	r3, #0
 800dbd4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	2100      	movs	r1, #0
 800dbdc:	4618      	mov	r0, r3
 800dbde:	f002 fa38 	bl	8010052 <SDIO_GetResponse>
 800dbe2:	4603      	mov	r3, r0
 800dbe4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800dbe8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800dbec:	d102      	bne.n	800dbf4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800dbee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800dbf2:	e02f      	b.n	800dc54 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800dbf4:	f107 030c 	add.w	r3, r7, #12
 800dbf8:	4619      	mov	r1, r3
 800dbfa:	6878      	ldr	r0, [r7, #4]
 800dbfc:	f000 f82e 	bl	800dc5c <SD_FindSCR>
 800dc00:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800dc02:	697b      	ldr	r3, [r7, #20]
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d001      	beq.n	800dc0c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800dc08:	697b      	ldr	r3, [r7, #20]
 800dc0a:	e023      	b.n	800dc54 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800dc0c:	693b      	ldr	r3, [r7, #16]
 800dc0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d01c      	beq.n	800dc50 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	681a      	ldr	r2, [r3, #0]
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dc1e:	041b      	lsls	r3, r3, #16
 800dc20:	4619      	mov	r1, r3
 800dc22:	4610      	mov	r0, r2
 800dc24:	f002 fb80 	bl	8010328 <SDMMC_CmdAppCommand>
 800dc28:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dc2a:	697b      	ldr	r3, [r7, #20]
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d001      	beq.n	800dc34 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800dc30:	697b      	ldr	r3, [r7, #20]
 800dc32:	e00f      	b.n	800dc54 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	2100      	movs	r1, #0
 800dc3a:	4618      	mov	r0, r3
 800dc3c:	f002 fbb9 	bl	80103b2 <SDMMC_CmdBusWidth>
 800dc40:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800dc42:	697b      	ldr	r3, [r7, #20]
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d001      	beq.n	800dc4c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800dc48:	697b      	ldr	r3, [r7, #20]
 800dc4a:	e003      	b.n	800dc54 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800dc4c:	2300      	movs	r3, #0
 800dc4e:	e001      	b.n	800dc54 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800dc50:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800dc54:	4618      	mov	r0, r3
 800dc56:	3718      	adds	r7, #24
 800dc58:	46bd      	mov	sp, r7
 800dc5a:	bd80      	pop	{r7, pc}

0800dc5c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800dc5c:	b590      	push	{r4, r7, lr}
 800dc5e:	b08f      	sub	sp, #60	; 0x3c
 800dc60:	af00      	add	r7, sp, #0
 800dc62:	6078      	str	r0, [r7, #4]
 800dc64:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800dc66:	f7fb fd7b 	bl	8009760 <HAL_GetTick>
 800dc6a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800dc6c:	2300      	movs	r3, #0
 800dc6e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800dc70:	2300      	movs	r3, #0
 800dc72:	60bb      	str	r3, [r7, #8]
 800dc74:	2300      	movs	r3, #0
 800dc76:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800dc78:	683b      	ldr	r3, [r7, #0]
 800dc7a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	2108      	movs	r1, #8
 800dc82:	4618      	mov	r0, r3
 800dc84:	f002 fa24 	bl	80100d0 <SDMMC_CmdBlockLength>
 800dc88:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800dc8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d001      	beq.n	800dc94 <SD_FindSCR+0x38>
  {
    return errorstate;
 800dc90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc92:	e0a9      	b.n	800dde8 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	681a      	ldr	r2, [r3, #0]
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dc9c:	041b      	lsls	r3, r3, #16
 800dc9e:	4619      	mov	r1, r3
 800dca0:	4610      	mov	r0, r2
 800dca2:	f002 fb41 	bl	8010328 <SDMMC_CmdAppCommand>
 800dca6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800dca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d001      	beq.n	800dcb2 <SD_FindSCR+0x56>
  {
    return errorstate;
 800dcae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcb0:	e09a      	b.n	800dde8 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800dcb2:	f04f 33ff 	mov.w	r3, #4294967295
 800dcb6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800dcb8:	2308      	movs	r3, #8
 800dcba:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800dcbc:	2330      	movs	r3, #48	; 0x30
 800dcbe:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800dcc0:	2302      	movs	r3, #2
 800dcc2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800dcc4:	2300      	movs	r3, #0
 800dcc6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800dcc8:	2301      	movs	r3, #1
 800dcca:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	f107 0210 	add.w	r2, r7, #16
 800dcd4:	4611      	mov	r1, r2
 800dcd6:	4618      	mov	r0, r3
 800dcd8:	f002 f9ce 	bl	8010078 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	4618      	mov	r0, r3
 800dce2:	f002 fb88 	bl	80103f6 <SDMMC_CmdSendSCR>
 800dce6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800dce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d022      	beq.n	800dd34 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800dcee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcf0:	e07a      	b.n	800dde8 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcf8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d00e      	beq.n	800dd1e <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	6819      	ldr	r1, [r3, #0]
 800dd04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd06:	009b      	lsls	r3, r3, #2
 800dd08:	f107 0208 	add.w	r2, r7, #8
 800dd0c:	18d4      	adds	r4, r2, r3
 800dd0e:	4608      	mov	r0, r1
 800dd10:	f002 f92d 	bl	800ff6e <SDIO_ReadFIFO>
 800dd14:	4603      	mov	r3, r0
 800dd16:	6023      	str	r3, [r4, #0]
      index++;
 800dd18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd1a:	3301      	adds	r3, #1
 800dd1c:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800dd1e:	f7fb fd1f 	bl	8009760 <HAL_GetTick>
 800dd22:	4602      	mov	r2, r0
 800dd24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd26:	1ad3      	subs	r3, r2, r3
 800dd28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd2c:	d102      	bne.n	800dd34 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800dd2e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800dd32:	e059      	b.n	800dde8 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dd3a:	f240 432a 	movw	r3, #1066	; 0x42a
 800dd3e:	4013      	ands	r3, r2
 800dd40:	2b00      	cmp	r3, #0
 800dd42:	d0d6      	beq.n	800dcf2 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd4a:	f003 0308 	and.w	r3, r3, #8
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d005      	beq.n	800dd5e <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	2208      	movs	r2, #8
 800dd58:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800dd5a:	2308      	movs	r3, #8
 800dd5c:	e044      	b.n	800dde8 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd64:	f003 0302 	and.w	r3, r3, #2
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d005      	beq.n	800dd78 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	2202      	movs	r2, #2
 800dd72:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800dd74:	2302      	movs	r3, #2
 800dd76:	e037      	b.n	800dde8 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dd7e:	f003 0320 	and.w	r3, r3, #32
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d005      	beq.n	800dd92 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	2220      	movs	r2, #32
 800dd8c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800dd8e:	2320      	movs	r3, #32
 800dd90:	e02a      	b.n	800dde8 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	f240 523a 	movw	r2, #1338	; 0x53a
 800dd9a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	061a      	lsls	r2, r3, #24
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	021b      	lsls	r3, r3, #8
 800dda4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800dda8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	0a1b      	lsrs	r3, r3, #8
 800ddae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800ddb2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	0e1b      	lsrs	r3, r3, #24
 800ddb8:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800ddba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddbc:	601a      	str	r2, [r3, #0]
    scr++;
 800ddbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddc0:	3304      	adds	r3, #4
 800ddc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800ddc4:	68bb      	ldr	r3, [r7, #8]
 800ddc6:	061a      	lsls	r2, r3, #24
 800ddc8:	68bb      	ldr	r3, [r7, #8]
 800ddca:	021b      	lsls	r3, r3, #8
 800ddcc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ddd0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800ddd2:	68bb      	ldr	r3, [r7, #8]
 800ddd4:	0a1b      	lsrs	r3, r3, #8
 800ddd6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800ddda:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800dddc:	68bb      	ldr	r3, [r7, #8]
 800ddde:	0e1b      	lsrs	r3, r3, #24
 800dde0:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800dde2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dde4:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800dde6:	2300      	movs	r3, #0
}
 800dde8:	4618      	mov	r0, r3
 800ddea:	373c      	adds	r7, #60	; 0x3c
 800ddec:	46bd      	mov	sp, r7
 800ddee:	bd90      	pop	{r4, r7, pc}

0800ddf0 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800ddf0:	b580      	push	{r7, lr}
 800ddf2:	b086      	sub	sp, #24
 800ddf4:	af00      	add	r7, sp, #0
 800ddf6:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ddfc:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de02:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800de04:	693b      	ldr	r3, [r7, #16]
 800de06:	2b00      	cmp	r3, #0
 800de08:	d03f      	beq.n	800de8a <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800de0a:	2300      	movs	r3, #0
 800de0c:	617b      	str	r3, [r7, #20]
 800de0e:	e033      	b.n	800de78 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	4618      	mov	r0, r3
 800de16:	f002 f8aa 	bl	800ff6e <SDIO_ReadFIFO>
 800de1a:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800de1c:	68bb      	ldr	r3, [r7, #8]
 800de1e:	b2da      	uxtb	r2, r3
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	701a      	strb	r2, [r3, #0]
      tmp++;
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	3301      	adds	r3, #1
 800de28:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800de2a:	693b      	ldr	r3, [r7, #16]
 800de2c:	3b01      	subs	r3, #1
 800de2e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800de30:	68bb      	ldr	r3, [r7, #8]
 800de32:	0a1b      	lsrs	r3, r3, #8
 800de34:	b2da      	uxtb	r2, r3
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	701a      	strb	r2, [r3, #0]
      tmp++;
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	3301      	adds	r3, #1
 800de3e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800de40:	693b      	ldr	r3, [r7, #16]
 800de42:	3b01      	subs	r3, #1
 800de44:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800de46:	68bb      	ldr	r3, [r7, #8]
 800de48:	0c1b      	lsrs	r3, r3, #16
 800de4a:	b2da      	uxtb	r2, r3
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	3301      	adds	r3, #1
 800de54:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800de56:	693b      	ldr	r3, [r7, #16]
 800de58:	3b01      	subs	r3, #1
 800de5a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800de5c:	68bb      	ldr	r3, [r7, #8]
 800de5e:	0e1b      	lsrs	r3, r3, #24
 800de60:	b2da      	uxtb	r2, r3
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	701a      	strb	r2, [r3, #0]
      tmp++;
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	3301      	adds	r3, #1
 800de6a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800de6c:	693b      	ldr	r3, [r7, #16]
 800de6e:	3b01      	subs	r3, #1
 800de70:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800de72:	697b      	ldr	r3, [r7, #20]
 800de74:	3301      	adds	r3, #1
 800de76:	617b      	str	r3, [r7, #20]
 800de78:	697b      	ldr	r3, [r7, #20]
 800de7a:	2b07      	cmp	r3, #7
 800de7c:	d9c8      	bls.n	800de10 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	68fa      	ldr	r2, [r7, #12]
 800de82:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	693a      	ldr	r2, [r7, #16]
 800de88:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800de8a:	bf00      	nop
 800de8c:	3718      	adds	r7, #24
 800de8e:	46bd      	mov	sp, r7
 800de90:	bd80      	pop	{r7, pc}

0800de92 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800de92:	b580      	push	{r7, lr}
 800de94:	b086      	sub	sp, #24
 800de96:	af00      	add	r7, sp, #0
 800de98:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	6a1b      	ldr	r3, [r3, #32]
 800de9e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dea4:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800dea6:	693b      	ldr	r3, [r7, #16]
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d043      	beq.n	800df34 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800deac:	2300      	movs	r3, #0
 800deae:	617b      	str	r3, [r7, #20]
 800deb0:	e037      	b.n	800df22 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	781b      	ldrb	r3, [r3, #0]
 800deb6:	60bb      	str	r3, [r7, #8]
      tmp++;
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	3301      	adds	r3, #1
 800debc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800debe:	693b      	ldr	r3, [r7, #16]
 800dec0:	3b01      	subs	r3, #1
 800dec2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	781b      	ldrb	r3, [r3, #0]
 800dec8:	021a      	lsls	r2, r3, #8
 800deca:	68bb      	ldr	r3, [r7, #8]
 800decc:	4313      	orrs	r3, r2
 800dece:	60bb      	str	r3, [r7, #8]
      tmp++;
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	3301      	adds	r3, #1
 800ded4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800ded6:	693b      	ldr	r3, [r7, #16]
 800ded8:	3b01      	subs	r3, #1
 800deda:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	781b      	ldrb	r3, [r3, #0]
 800dee0:	041a      	lsls	r2, r3, #16
 800dee2:	68bb      	ldr	r3, [r7, #8]
 800dee4:	4313      	orrs	r3, r2
 800dee6:	60bb      	str	r3, [r7, #8]
      tmp++;
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	3301      	adds	r3, #1
 800deec:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800deee:	693b      	ldr	r3, [r7, #16]
 800def0:	3b01      	subs	r3, #1
 800def2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	781b      	ldrb	r3, [r3, #0]
 800def8:	061a      	lsls	r2, r3, #24
 800defa:	68bb      	ldr	r3, [r7, #8]
 800defc:	4313      	orrs	r3, r2
 800defe:	60bb      	str	r3, [r7, #8]
      tmp++;
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	3301      	adds	r3, #1
 800df04:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800df06:	693b      	ldr	r3, [r7, #16]
 800df08:	3b01      	subs	r3, #1
 800df0a:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	f107 0208 	add.w	r2, r7, #8
 800df14:	4611      	mov	r1, r2
 800df16:	4618      	mov	r0, r3
 800df18:	f002 f836 	bl	800ff88 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800df1c:	697b      	ldr	r3, [r7, #20]
 800df1e:	3301      	adds	r3, #1
 800df20:	617b      	str	r3, [r7, #20]
 800df22:	697b      	ldr	r3, [r7, #20]
 800df24:	2b07      	cmp	r3, #7
 800df26:	d9c4      	bls.n	800deb2 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	68fa      	ldr	r2, [r7, #12]
 800df2c:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	693a      	ldr	r2, [r7, #16]
 800df32:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800df34:	bf00      	nop
 800df36:	3718      	adds	r7, #24
 800df38:	46bd      	mov	sp, r7
 800df3a:	bd80      	pop	{r7, pc}

0800df3c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800df3c:	b580      	push	{r7, lr}
 800df3e:	b082      	sub	sp, #8
 800df40:	af00      	add	r7, sp, #0
 800df42:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	2b00      	cmp	r3, #0
 800df48:	d101      	bne.n	800df4e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800df4a:	2301      	movs	r3, #1
 800df4c:	e056      	b.n	800dffc <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	2200      	movs	r2, #0
 800df52:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800df5a:	b2db      	uxtb	r3, r3
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d106      	bne.n	800df6e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	2200      	movs	r2, #0
 800df64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800df68:	6878      	ldr	r0, [r7, #4]
 800df6a:	f7f9 f873 	bl	8007054 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	2202      	movs	r2, #2
 800df72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	681a      	ldr	r2, [r3, #0]
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800df84:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	685a      	ldr	r2, [r3, #4]
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	689b      	ldr	r3, [r3, #8]
 800df8e:	431a      	orrs	r2, r3
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	68db      	ldr	r3, [r3, #12]
 800df94:	431a      	orrs	r2, r3
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	691b      	ldr	r3, [r3, #16]
 800df9a:	431a      	orrs	r2, r3
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	695b      	ldr	r3, [r3, #20]
 800dfa0:	431a      	orrs	r2, r3
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	699b      	ldr	r3, [r3, #24]
 800dfa6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800dfaa:	431a      	orrs	r2, r3
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	69db      	ldr	r3, [r3, #28]
 800dfb0:	431a      	orrs	r2, r3
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	6a1b      	ldr	r3, [r3, #32]
 800dfb6:	ea42 0103 	orr.w	r1, r2, r3
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	430a      	orrs	r2, r1
 800dfc4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	699b      	ldr	r3, [r3, #24]
 800dfca:	0c1b      	lsrs	r3, r3, #16
 800dfcc:	f003 0104 	and.w	r1, r3, #4
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	430a      	orrs	r2, r1
 800dfda:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	69da      	ldr	r2, [r3, #28]
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800dfea:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	2200      	movs	r2, #0
 800dff0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	2201      	movs	r2, #1
 800dff6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800dffa:	2300      	movs	r3, #0
}
 800dffc:	4618      	mov	r0, r3
 800dffe:	3708      	adds	r7, #8
 800e000:	46bd      	mov	sp, r7
 800e002:	bd80      	pop	{r7, pc}

0800e004 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e004:	b580      	push	{r7, lr}
 800e006:	b088      	sub	sp, #32
 800e008:	af00      	add	r7, sp, #0
 800e00a:	60f8      	str	r0, [r7, #12]
 800e00c:	60b9      	str	r1, [r7, #8]
 800e00e:	603b      	str	r3, [r7, #0]
 800e010:	4613      	mov	r3, r2
 800e012:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e014:	2300      	movs	r3, #0
 800e016:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e01e:	2b01      	cmp	r3, #1
 800e020:	d101      	bne.n	800e026 <HAL_SPI_Transmit+0x22>
 800e022:	2302      	movs	r3, #2
 800e024:	e11e      	b.n	800e264 <HAL_SPI_Transmit+0x260>
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	2201      	movs	r2, #1
 800e02a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e02e:	f7fb fb97 	bl	8009760 <HAL_GetTick>
 800e032:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800e034:	88fb      	ldrh	r3, [r7, #6]
 800e036:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e03e:	b2db      	uxtb	r3, r3
 800e040:	2b01      	cmp	r3, #1
 800e042:	d002      	beq.n	800e04a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800e044:	2302      	movs	r3, #2
 800e046:	77fb      	strb	r3, [r7, #31]
    goto error;
 800e048:	e103      	b.n	800e252 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800e04a:	68bb      	ldr	r3, [r7, #8]
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	d002      	beq.n	800e056 <HAL_SPI_Transmit+0x52>
 800e050:	88fb      	ldrh	r3, [r7, #6]
 800e052:	2b00      	cmp	r3, #0
 800e054:	d102      	bne.n	800e05c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800e056:	2301      	movs	r3, #1
 800e058:	77fb      	strb	r3, [r7, #31]
    goto error;
 800e05a:	e0fa      	b.n	800e252 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	2203      	movs	r2, #3
 800e060:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	2200      	movs	r2, #0
 800e068:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	68ba      	ldr	r2, [r7, #8]
 800e06e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	88fa      	ldrh	r2, [r7, #6]
 800e074:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	88fa      	ldrh	r2, [r7, #6]
 800e07a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	2200      	movs	r2, #0
 800e080:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	2200      	movs	r2, #0
 800e086:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	2200      	movs	r2, #0
 800e08c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	2200      	movs	r2, #0
 800e092:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	2200      	movs	r2, #0
 800e098:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	689b      	ldr	r3, [r3, #8]
 800e09e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e0a2:	d107      	bne.n	800e0b4 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	681a      	ldr	r2, [r3, #0]
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e0b2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e0be:	2b40      	cmp	r3, #64	; 0x40
 800e0c0:	d007      	beq.n	800e0d2 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	681a      	ldr	r2, [r3, #0]
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e0d0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	68db      	ldr	r3, [r3, #12]
 800e0d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e0da:	d14b      	bne.n	800e174 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	685b      	ldr	r3, [r3, #4]
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d002      	beq.n	800e0ea <HAL_SPI_Transmit+0xe6>
 800e0e4:	8afb      	ldrh	r3, [r7, #22]
 800e0e6:	2b01      	cmp	r3, #1
 800e0e8:	d13e      	bne.n	800e168 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e0ee:	881a      	ldrh	r2, [r3, #0]
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e0fa:	1c9a      	adds	r2, r3, #2
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e104:	b29b      	uxth	r3, r3
 800e106:	3b01      	subs	r3, #1
 800e108:	b29a      	uxth	r2, r3
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800e10e:	e02b      	b.n	800e168 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	689b      	ldr	r3, [r3, #8]
 800e116:	f003 0302 	and.w	r3, r3, #2
 800e11a:	2b02      	cmp	r3, #2
 800e11c:	d112      	bne.n	800e144 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e122:	881a      	ldrh	r2, [r3, #0]
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e12e:	1c9a      	adds	r2, r3, #2
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e138:	b29b      	uxth	r3, r3
 800e13a:	3b01      	subs	r3, #1
 800e13c:	b29a      	uxth	r2, r3
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	86da      	strh	r2, [r3, #54]	; 0x36
 800e142:	e011      	b.n	800e168 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e144:	f7fb fb0c 	bl	8009760 <HAL_GetTick>
 800e148:	4602      	mov	r2, r0
 800e14a:	69bb      	ldr	r3, [r7, #24]
 800e14c:	1ad3      	subs	r3, r2, r3
 800e14e:	683a      	ldr	r2, [r7, #0]
 800e150:	429a      	cmp	r2, r3
 800e152:	d803      	bhi.n	800e15c <HAL_SPI_Transmit+0x158>
 800e154:	683b      	ldr	r3, [r7, #0]
 800e156:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e15a:	d102      	bne.n	800e162 <HAL_SPI_Transmit+0x15e>
 800e15c:	683b      	ldr	r3, [r7, #0]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d102      	bne.n	800e168 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800e162:	2303      	movs	r3, #3
 800e164:	77fb      	strb	r3, [r7, #31]
          goto error;
 800e166:	e074      	b.n	800e252 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e16c:	b29b      	uxth	r3, r3
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d1ce      	bne.n	800e110 <HAL_SPI_Transmit+0x10c>
 800e172:	e04c      	b.n	800e20e <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	685b      	ldr	r3, [r3, #4]
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d002      	beq.n	800e182 <HAL_SPI_Transmit+0x17e>
 800e17c:	8afb      	ldrh	r3, [r7, #22]
 800e17e:	2b01      	cmp	r3, #1
 800e180:	d140      	bne.n	800e204 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	330c      	adds	r3, #12
 800e18c:	7812      	ldrb	r2, [r2, #0]
 800e18e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e194:	1c5a      	adds	r2, r3, #1
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e19e:	b29b      	uxth	r3, r3
 800e1a0:	3b01      	subs	r3, #1
 800e1a2:	b29a      	uxth	r2, r3
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800e1a8:	e02c      	b.n	800e204 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	689b      	ldr	r3, [r3, #8]
 800e1b0:	f003 0302 	and.w	r3, r3, #2
 800e1b4:	2b02      	cmp	r3, #2
 800e1b6:	d113      	bne.n	800e1e0 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	330c      	adds	r3, #12
 800e1c2:	7812      	ldrb	r2, [r2, #0]
 800e1c4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1ca:	1c5a      	adds	r2, r3, #1
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e1d4:	b29b      	uxth	r3, r3
 800e1d6:	3b01      	subs	r3, #1
 800e1d8:	b29a      	uxth	r2, r3
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	86da      	strh	r2, [r3, #54]	; 0x36
 800e1de:	e011      	b.n	800e204 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e1e0:	f7fb fabe 	bl	8009760 <HAL_GetTick>
 800e1e4:	4602      	mov	r2, r0
 800e1e6:	69bb      	ldr	r3, [r7, #24]
 800e1e8:	1ad3      	subs	r3, r2, r3
 800e1ea:	683a      	ldr	r2, [r7, #0]
 800e1ec:	429a      	cmp	r2, r3
 800e1ee:	d803      	bhi.n	800e1f8 <HAL_SPI_Transmit+0x1f4>
 800e1f0:	683b      	ldr	r3, [r7, #0]
 800e1f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1f6:	d102      	bne.n	800e1fe <HAL_SPI_Transmit+0x1fa>
 800e1f8:	683b      	ldr	r3, [r7, #0]
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d102      	bne.n	800e204 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800e1fe:	2303      	movs	r3, #3
 800e200:	77fb      	strb	r3, [r7, #31]
          goto error;
 800e202:	e026      	b.n	800e252 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800e204:	68fb      	ldr	r3, [r7, #12]
 800e206:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e208:	b29b      	uxth	r3, r3
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d1cd      	bne.n	800e1aa <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e20e:	69ba      	ldr	r2, [r7, #24]
 800e210:	6839      	ldr	r1, [r7, #0]
 800e212:	68f8      	ldr	r0, [r7, #12]
 800e214:	f000 fba4 	bl	800e960 <SPI_EndRxTxTransaction>
 800e218:	4603      	mov	r3, r0
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d002      	beq.n	800e224 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	2220      	movs	r2, #32
 800e222:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	689b      	ldr	r3, [r3, #8]
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d10a      	bne.n	800e242 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e22c:	2300      	movs	r3, #0
 800e22e:	613b      	str	r3, [r7, #16]
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	68db      	ldr	r3, [r3, #12]
 800e236:	613b      	str	r3, [r7, #16]
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	689b      	ldr	r3, [r3, #8]
 800e23e:	613b      	str	r3, [r7, #16]
 800e240:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e246:	2b00      	cmp	r3, #0
 800e248:	d002      	beq.n	800e250 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800e24a:	2301      	movs	r3, #1
 800e24c:	77fb      	strb	r3, [r7, #31]
 800e24e:	e000      	b.n	800e252 <HAL_SPI_Transmit+0x24e>
  }

error:
 800e250:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	2201      	movs	r2, #1
 800e256:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	2200      	movs	r2, #0
 800e25e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800e262:	7ffb      	ldrb	r3, [r7, #31]
}
 800e264:	4618      	mov	r0, r3
 800e266:	3720      	adds	r7, #32
 800e268:	46bd      	mov	sp, r7
 800e26a:	bd80      	pop	{r7, pc}

0800e26c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e26c:	b580      	push	{r7, lr}
 800e26e:	b088      	sub	sp, #32
 800e270:	af02      	add	r7, sp, #8
 800e272:	60f8      	str	r0, [r7, #12]
 800e274:	60b9      	str	r1, [r7, #8]
 800e276:	603b      	str	r3, [r7, #0]
 800e278:	4613      	mov	r3, r2
 800e27a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800e27c:	2300      	movs	r3, #0
 800e27e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	685b      	ldr	r3, [r3, #4]
 800e284:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e288:	d112      	bne.n	800e2b0 <HAL_SPI_Receive+0x44>
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	689b      	ldr	r3, [r3, #8]
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d10e      	bne.n	800e2b0 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	2204      	movs	r2, #4
 800e296:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800e29a:	88fa      	ldrh	r2, [r7, #6]
 800e29c:	683b      	ldr	r3, [r7, #0]
 800e29e:	9300      	str	r3, [sp, #0]
 800e2a0:	4613      	mov	r3, r2
 800e2a2:	68ba      	ldr	r2, [r7, #8]
 800e2a4:	68b9      	ldr	r1, [r7, #8]
 800e2a6:	68f8      	ldr	r0, [r7, #12]
 800e2a8:	f000 f8e9 	bl	800e47e <HAL_SPI_TransmitReceive>
 800e2ac:	4603      	mov	r3, r0
 800e2ae:	e0e2      	b.n	800e476 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e2b6:	2b01      	cmp	r3, #1
 800e2b8:	d101      	bne.n	800e2be <HAL_SPI_Receive+0x52>
 800e2ba:	2302      	movs	r3, #2
 800e2bc:	e0db      	b.n	800e476 <HAL_SPI_Receive+0x20a>
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	2201      	movs	r2, #1
 800e2c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e2c6:	f7fb fa4b 	bl	8009760 <HAL_GetTick>
 800e2ca:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e2d2:	b2db      	uxtb	r3, r3
 800e2d4:	2b01      	cmp	r3, #1
 800e2d6:	d002      	beq.n	800e2de <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800e2d8:	2302      	movs	r3, #2
 800e2da:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e2dc:	e0c2      	b.n	800e464 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800e2de:	68bb      	ldr	r3, [r7, #8]
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d002      	beq.n	800e2ea <HAL_SPI_Receive+0x7e>
 800e2e4:	88fb      	ldrh	r3, [r7, #6]
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d102      	bne.n	800e2f0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800e2ea:	2301      	movs	r3, #1
 800e2ec:	75fb      	strb	r3, [r7, #23]
    goto error;
 800e2ee:	e0b9      	b.n	800e464 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	2204      	movs	r2, #4
 800e2f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	2200      	movs	r2, #0
 800e2fc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	68ba      	ldr	r2, [r7, #8]
 800e302:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	88fa      	ldrh	r2, [r7, #6]
 800e308:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	88fa      	ldrh	r2, [r7, #6]
 800e30e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	2200      	movs	r2, #0
 800e314:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	2200      	movs	r2, #0
 800e31a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	2200      	movs	r2, #0
 800e320:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	2200      	movs	r2, #0
 800e326:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	2200      	movs	r2, #0
 800e32c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	689b      	ldr	r3, [r3, #8]
 800e332:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e336:	d107      	bne.n	800e348 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	681a      	ldr	r2, [r3, #0]
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800e346:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e352:	2b40      	cmp	r3, #64	; 0x40
 800e354:	d007      	beq.n	800e366 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e356:	68fb      	ldr	r3, [r7, #12]
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	681a      	ldr	r2, [r3, #0]
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e364:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	68db      	ldr	r3, [r3, #12]
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d162      	bne.n	800e434 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800e36e:	e02e      	b.n	800e3ce <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	689b      	ldr	r3, [r3, #8]
 800e376:	f003 0301 	and.w	r3, r3, #1
 800e37a:	2b01      	cmp	r3, #1
 800e37c:	d115      	bne.n	800e3aa <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	f103 020c 	add.w	r2, r3, #12
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e38a:	7812      	ldrb	r2, [r2, #0]
 800e38c:	b2d2      	uxtb	r2, r2
 800e38e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e394:	1c5a      	adds	r2, r3, #1
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e39e:	b29b      	uxth	r3, r3
 800e3a0:	3b01      	subs	r3, #1
 800e3a2:	b29a      	uxth	r2, r3
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e3a8:	e011      	b.n	800e3ce <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e3aa:	f7fb f9d9 	bl	8009760 <HAL_GetTick>
 800e3ae:	4602      	mov	r2, r0
 800e3b0:	693b      	ldr	r3, [r7, #16]
 800e3b2:	1ad3      	subs	r3, r2, r3
 800e3b4:	683a      	ldr	r2, [r7, #0]
 800e3b6:	429a      	cmp	r2, r3
 800e3b8:	d803      	bhi.n	800e3c2 <HAL_SPI_Receive+0x156>
 800e3ba:	683b      	ldr	r3, [r7, #0]
 800e3bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3c0:	d102      	bne.n	800e3c8 <HAL_SPI_Receive+0x15c>
 800e3c2:	683b      	ldr	r3, [r7, #0]
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d102      	bne.n	800e3ce <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800e3c8:	2303      	movs	r3, #3
 800e3ca:	75fb      	strb	r3, [r7, #23]
          goto error;
 800e3cc:	e04a      	b.n	800e464 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e3d2:	b29b      	uxth	r3, r3
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d1cb      	bne.n	800e370 <HAL_SPI_Receive+0x104>
 800e3d8:	e031      	b.n	800e43e <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	689b      	ldr	r3, [r3, #8]
 800e3e0:	f003 0301 	and.w	r3, r3, #1
 800e3e4:	2b01      	cmp	r3, #1
 800e3e6:	d113      	bne.n	800e410 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	68da      	ldr	r2, [r3, #12]
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3f2:	b292      	uxth	r2, r2
 800e3f4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3fa:	1c9a      	adds	r2, r3, #2
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e404:	b29b      	uxth	r3, r3
 800e406:	3b01      	subs	r3, #1
 800e408:	b29a      	uxth	r2, r3
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800e40e:	e011      	b.n	800e434 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e410:	f7fb f9a6 	bl	8009760 <HAL_GetTick>
 800e414:	4602      	mov	r2, r0
 800e416:	693b      	ldr	r3, [r7, #16]
 800e418:	1ad3      	subs	r3, r2, r3
 800e41a:	683a      	ldr	r2, [r7, #0]
 800e41c:	429a      	cmp	r2, r3
 800e41e:	d803      	bhi.n	800e428 <HAL_SPI_Receive+0x1bc>
 800e420:	683b      	ldr	r3, [r7, #0]
 800e422:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e426:	d102      	bne.n	800e42e <HAL_SPI_Receive+0x1c2>
 800e428:	683b      	ldr	r3, [r7, #0]
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d102      	bne.n	800e434 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800e42e:	2303      	movs	r3, #3
 800e430:	75fb      	strb	r3, [r7, #23]
          goto error;
 800e432:	e017      	b.n	800e464 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e438:	b29b      	uxth	r3, r3
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d1cd      	bne.n	800e3da <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e43e:	693a      	ldr	r2, [r7, #16]
 800e440:	6839      	ldr	r1, [r7, #0]
 800e442:	68f8      	ldr	r0, [r7, #12]
 800e444:	f000 fa27 	bl	800e896 <SPI_EndRxTransaction>
 800e448:	4603      	mov	r3, r0
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d002      	beq.n	800e454 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	2220      	movs	r2, #32
 800e452:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d002      	beq.n	800e462 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800e45c:	2301      	movs	r3, #1
 800e45e:	75fb      	strb	r3, [r7, #23]
 800e460:	e000      	b.n	800e464 <HAL_SPI_Receive+0x1f8>
  }

error :
 800e462:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	2201      	movs	r2, #1
 800e468:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	2200      	movs	r2, #0
 800e470:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800e474:	7dfb      	ldrb	r3, [r7, #23]
}
 800e476:	4618      	mov	r0, r3
 800e478:	3718      	adds	r7, #24
 800e47a:	46bd      	mov	sp, r7
 800e47c:	bd80      	pop	{r7, pc}

0800e47e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800e47e:	b580      	push	{r7, lr}
 800e480:	b08c      	sub	sp, #48	; 0x30
 800e482:	af00      	add	r7, sp, #0
 800e484:	60f8      	str	r0, [r7, #12]
 800e486:	60b9      	str	r1, [r7, #8]
 800e488:	607a      	str	r2, [r7, #4]
 800e48a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800e48c:	2301      	movs	r3, #1
 800e48e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800e490:	2300      	movs	r3, #0
 800e492:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800e49c:	2b01      	cmp	r3, #1
 800e49e:	d101      	bne.n	800e4a4 <HAL_SPI_TransmitReceive+0x26>
 800e4a0:	2302      	movs	r3, #2
 800e4a2:	e18a      	b.n	800e7ba <HAL_SPI_TransmitReceive+0x33c>
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	2201      	movs	r2, #1
 800e4a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e4ac:	f7fb f958 	bl	8009760 <HAL_GetTick>
 800e4b0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e4b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	685b      	ldr	r3, [r3, #4]
 800e4c0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800e4c2:	887b      	ldrh	r3, [r7, #2]
 800e4c4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800e4c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e4ca:	2b01      	cmp	r3, #1
 800e4cc:	d00f      	beq.n	800e4ee <HAL_SPI_TransmitReceive+0x70>
 800e4ce:	69fb      	ldr	r3, [r7, #28]
 800e4d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e4d4:	d107      	bne.n	800e4e6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	689b      	ldr	r3, [r3, #8]
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d103      	bne.n	800e4e6 <HAL_SPI_TransmitReceive+0x68>
 800e4de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e4e2:	2b04      	cmp	r3, #4
 800e4e4:	d003      	beq.n	800e4ee <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800e4e6:	2302      	movs	r3, #2
 800e4e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800e4ec:	e15b      	b.n	800e7a6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800e4ee:	68bb      	ldr	r3, [r7, #8]
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d005      	beq.n	800e500 <HAL_SPI_TransmitReceive+0x82>
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d002      	beq.n	800e500 <HAL_SPI_TransmitReceive+0x82>
 800e4fa:	887b      	ldrh	r3, [r7, #2]
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d103      	bne.n	800e508 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800e500:	2301      	movs	r3, #1
 800e502:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800e506:	e14e      	b.n	800e7a6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e50e:	b2db      	uxtb	r3, r3
 800e510:	2b04      	cmp	r3, #4
 800e512:	d003      	beq.n	800e51c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	2205      	movs	r2, #5
 800e518:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	2200      	movs	r2, #0
 800e520:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	687a      	ldr	r2, [r7, #4]
 800e526:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	887a      	ldrh	r2, [r7, #2]
 800e52c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	887a      	ldrh	r2, [r7, #2]
 800e532:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	68ba      	ldr	r2, [r7, #8]
 800e538:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	887a      	ldrh	r2, [r7, #2]
 800e53e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	887a      	ldrh	r2, [r7, #2]
 800e544:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	2200      	movs	r2, #0
 800e54a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	2200      	movs	r2, #0
 800e550:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e55c:	2b40      	cmp	r3, #64	; 0x40
 800e55e:	d007      	beq.n	800e570 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	681a      	ldr	r2, [r3, #0]
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e56e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	68db      	ldr	r3, [r3, #12]
 800e574:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e578:	d178      	bne.n	800e66c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	685b      	ldr	r3, [r3, #4]
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d002      	beq.n	800e588 <HAL_SPI_TransmitReceive+0x10a>
 800e582:	8b7b      	ldrh	r3, [r7, #26]
 800e584:	2b01      	cmp	r3, #1
 800e586:	d166      	bne.n	800e656 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e58c:	881a      	ldrh	r2, [r3, #0]
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e598:	1c9a      	adds	r2, r3, #2
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e5a2:	b29b      	uxth	r3, r3
 800e5a4:	3b01      	subs	r3, #1
 800e5a6:	b29a      	uxth	r2, r3
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e5ac:	e053      	b.n	800e656 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	689b      	ldr	r3, [r3, #8]
 800e5b4:	f003 0302 	and.w	r3, r3, #2
 800e5b8:	2b02      	cmp	r3, #2
 800e5ba:	d11b      	bne.n	800e5f4 <HAL_SPI_TransmitReceive+0x176>
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e5c0:	b29b      	uxth	r3, r3
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d016      	beq.n	800e5f4 <HAL_SPI_TransmitReceive+0x176>
 800e5c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5c8:	2b01      	cmp	r3, #1
 800e5ca:	d113      	bne.n	800e5f4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5d0:	881a      	ldrh	r2, [r3, #0]
 800e5d2:	68fb      	ldr	r3, [r7, #12]
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5dc:	1c9a      	adds	r2, r3, #2
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e5e6:	b29b      	uxth	r3, r3
 800e5e8:	3b01      	subs	r3, #1
 800e5ea:	b29a      	uxth	r2, r3
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800e5f0:	2300      	movs	r3, #0
 800e5f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	689b      	ldr	r3, [r3, #8]
 800e5fa:	f003 0301 	and.w	r3, r3, #1
 800e5fe:	2b01      	cmp	r3, #1
 800e600:	d119      	bne.n	800e636 <HAL_SPI_TransmitReceive+0x1b8>
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e606:	b29b      	uxth	r3, r3
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d014      	beq.n	800e636 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	68da      	ldr	r2, [r3, #12]
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e616:	b292      	uxth	r2, r2
 800e618:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e61e:	1c9a      	adds	r2, r3, #2
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e628:	b29b      	uxth	r3, r3
 800e62a:	3b01      	subs	r3, #1
 800e62c:	b29a      	uxth	r2, r3
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800e632:	2301      	movs	r3, #1
 800e634:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800e636:	f7fb f893 	bl	8009760 <HAL_GetTick>
 800e63a:	4602      	mov	r2, r0
 800e63c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e63e:	1ad3      	subs	r3, r2, r3
 800e640:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e642:	429a      	cmp	r2, r3
 800e644:	d807      	bhi.n	800e656 <HAL_SPI_TransmitReceive+0x1d8>
 800e646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e64c:	d003      	beq.n	800e656 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800e64e:	2303      	movs	r3, #3
 800e650:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800e654:	e0a7      	b.n	800e7a6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e65a:	b29b      	uxth	r3, r3
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d1a6      	bne.n	800e5ae <HAL_SPI_TransmitReceive+0x130>
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e664:	b29b      	uxth	r3, r3
 800e666:	2b00      	cmp	r3, #0
 800e668:	d1a1      	bne.n	800e5ae <HAL_SPI_TransmitReceive+0x130>
 800e66a:	e07c      	b.n	800e766 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	685b      	ldr	r3, [r3, #4]
 800e670:	2b00      	cmp	r3, #0
 800e672:	d002      	beq.n	800e67a <HAL_SPI_TransmitReceive+0x1fc>
 800e674:	8b7b      	ldrh	r3, [r7, #26]
 800e676:	2b01      	cmp	r3, #1
 800e678:	d16b      	bne.n	800e752 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e67e:	68fb      	ldr	r3, [r7, #12]
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	330c      	adds	r3, #12
 800e684:	7812      	ldrb	r2, [r2, #0]
 800e686:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e68c:	1c5a      	adds	r2, r3, #1
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e696:	b29b      	uxth	r3, r3
 800e698:	3b01      	subs	r3, #1
 800e69a:	b29a      	uxth	r2, r3
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e6a0:	e057      	b.n	800e752 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	689b      	ldr	r3, [r3, #8]
 800e6a8:	f003 0302 	and.w	r3, r3, #2
 800e6ac:	2b02      	cmp	r3, #2
 800e6ae:	d11c      	bne.n	800e6ea <HAL_SPI_TransmitReceive+0x26c>
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e6b4:	b29b      	uxth	r3, r3
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d017      	beq.n	800e6ea <HAL_SPI_TransmitReceive+0x26c>
 800e6ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6bc:	2b01      	cmp	r3, #1
 800e6be:	d114      	bne.n	800e6ea <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800e6c0:	68fb      	ldr	r3, [r7, #12]
 800e6c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	330c      	adds	r3, #12
 800e6ca:	7812      	ldrb	r2, [r2, #0]
 800e6cc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6d2:	1c5a      	adds	r2, r3, #1
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e6dc:	b29b      	uxth	r3, r3
 800e6de:	3b01      	subs	r3, #1
 800e6e0:	b29a      	uxth	r2, r3
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800e6e6:	2300      	movs	r3, #0
 800e6e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800e6ea:	68fb      	ldr	r3, [r7, #12]
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	689b      	ldr	r3, [r3, #8]
 800e6f0:	f003 0301 	and.w	r3, r3, #1
 800e6f4:	2b01      	cmp	r3, #1
 800e6f6:	d119      	bne.n	800e72c <HAL_SPI_TransmitReceive+0x2ae>
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e6fc:	b29b      	uxth	r3, r3
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d014      	beq.n	800e72c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	68da      	ldr	r2, [r3, #12]
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e70c:	b2d2      	uxtb	r2, r2
 800e70e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e714:	1c5a      	adds	r2, r3, #1
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e71e:	b29b      	uxth	r3, r3
 800e720:	3b01      	subs	r3, #1
 800e722:	b29a      	uxth	r2, r3
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800e728:	2301      	movs	r3, #1
 800e72a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800e72c:	f7fb f818 	bl	8009760 <HAL_GetTick>
 800e730:	4602      	mov	r2, r0
 800e732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e734:	1ad3      	subs	r3, r2, r3
 800e736:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e738:	429a      	cmp	r2, r3
 800e73a:	d803      	bhi.n	800e744 <HAL_SPI_TransmitReceive+0x2c6>
 800e73c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e73e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e742:	d102      	bne.n	800e74a <HAL_SPI_TransmitReceive+0x2cc>
 800e744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e746:	2b00      	cmp	r3, #0
 800e748:	d103      	bne.n	800e752 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800e74a:	2303      	movs	r3, #3
 800e74c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800e750:	e029      	b.n	800e7a6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800e756:	b29b      	uxth	r3, r3
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d1a2      	bne.n	800e6a2 <HAL_SPI_TransmitReceive+0x224>
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800e760:	b29b      	uxth	r3, r3
 800e762:	2b00      	cmp	r3, #0
 800e764:	d19d      	bne.n	800e6a2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e766:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e768:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e76a:	68f8      	ldr	r0, [r7, #12]
 800e76c:	f000 f8f8 	bl	800e960 <SPI_EndRxTxTransaction>
 800e770:	4603      	mov	r3, r0
 800e772:	2b00      	cmp	r3, #0
 800e774:	d006      	beq.n	800e784 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800e776:	2301      	movs	r3, #1
 800e778:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e77c:	68fb      	ldr	r3, [r7, #12]
 800e77e:	2220      	movs	r2, #32
 800e780:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800e782:	e010      	b.n	800e7a6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	689b      	ldr	r3, [r3, #8]
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d10b      	bne.n	800e7a4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e78c:	2300      	movs	r3, #0
 800e78e:	617b      	str	r3, [r7, #20]
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	68db      	ldr	r3, [r3, #12]
 800e796:	617b      	str	r3, [r7, #20]
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	689b      	ldr	r3, [r3, #8]
 800e79e:	617b      	str	r3, [r7, #20]
 800e7a0:	697b      	ldr	r3, [r7, #20]
 800e7a2:	e000      	b.n	800e7a6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800e7a4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	2201      	movs	r2, #1
 800e7aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	2200      	movs	r2, #0
 800e7b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800e7b6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800e7ba:	4618      	mov	r0, r3
 800e7bc:	3730      	adds	r7, #48	; 0x30
 800e7be:	46bd      	mov	sp, r7
 800e7c0:	bd80      	pop	{r7, pc}

0800e7c2 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800e7c2:	b580      	push	{r7, lr}
 800e7c4:	b084      	sub	sp, #16
 800e7c6:	af00      	add	r7, sp, #0
 800e7c8:	60f8      	str	r0, [r7, #12]
 800e7ca:	60b9      	str	r1, [r7, #8]
 800e7cc:	603b      	str	r3, [r7, #0]
 800e7ce:	4613      	mov	r3, r2
 800e7d0:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e7d2:	e04c      	b.n	800e86e <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800e7d4:	683b      	ldr	r3, [r7, #0]
 800e7d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7da:	d048      	beq.n	800e86e <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800e7dc:	f7fa ffc0 	bl	8009760 <HAL_GetTick>
 800e7e0:	4602      	mov	r2, r0
 800e7e2:	69bb      	ldr	r3, [r7, #24]
 800e7e4:	1ad3      	subs	r3, r2, r3
 800e7e6:	683a      	ldr	r2, [r7, #0]
 800e7e8:	429a      	cmp	r2, r3
 800e7ea:	d902      	bls.n	800e7f2 <SPI_WaitFlagStateUntilTimeout+0x30>
 800e7ec:	683b      	ldr	r3, [r7, #0]
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d13d      	bne.n	800e86e <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	685a      	ldr	r2, [r3, #4]
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800e800:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	685b      	ldr	r3, [r3, #4]
 800e806:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e80a:	d111      	bne.n	800e830 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	689b      	ldr	r3, [r3, #8]
 800e810:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e814:	d004      	beq.n	800e820 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	689b      	ldr	r3, [r3, #8]
 800e81a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e81e:	d107      	bne.n	800e830 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	681a      	ldr	r2, [r3, #0]
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e82e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e834:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e838:	d10f      	bne.n	800e85a <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	681a      	ldr	r2, [r3, #0]
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e848:	601a      	str	r2, [r3, #0]
 800e84a:	68fb      	ldr	r3, [r7, #12]
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	681a      	ldr	r2, [r3, #0]
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e858:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	2201      	movs	r2, #1
 800e85e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e862:	68fb      	ldr	r3, [r7, #12]
 800e864:	2200      	movs	r2, #0
 800e866:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800e86a:	2303      	movs	r3, #3
 800e86c:	e00f      	b.n	800e88e <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	689a      	ldr	r2, [r3, #8]
 800e874:	68bb      	ldr	r3, [r7, #8]
 800e876:	4013      	ands	r3, r2
 800e878:	68ba      	ldr	r2, [r7, #8]
 800e87a:	429a      	cmp	r2, r3
 800e87c:	bf0c      	ite	eq
 800e87e:	2301      	moveq	r3, #1
 800e880:	2300      	movne	r3, #0
 800e882:	b2db      	uxtb	r3, r3
 800e884:	461a      	mov	r2, r3
 800e886:	79fb      	ldrb	r3, [r7, #7]
 800e888:	429a      	cmp	r2, r3
 800e88a:	d1a3      	bne.n	800e7d4 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800e88c:	2300      	movs	r3, #0
}
 800e88e:	4618      	mov	r0, r3
 800e890:	3710      	adds	r7, #16
 800e892:	46bd      	mov	sp, r7
 800e894:	bd80      	pop	{r7, pc}

0800e896 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800e896:	b580      	push	{r7, lr}
 800e898:	b086      	sub	sp, #24
 800e89a:	af02      	add	r7, sp, #8
 800e89c:	60f8      	str	r0, [r7, #12]
 800e89e:	60b9      	str	r1, [r7, #8]
 800e8a0:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	685b      	ldr	r3, [r3, #4]
 800e8a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e8aa:	d111      	bne.n	800e8d0 <SPI_EndRxTransaction+0x3a>
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	689b      	ldr	r3, [r3, #8]
 800e8b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e8b4:	d004      	beq.n	800e8c0 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	689b      	ldr	r3, [r3, #8]
 800e8ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e8be:	d107      	bne.n	800e8d0 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	681a      	ldr	r2, [r3, #0]
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e8ce:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	685b      	ldr	r3, [r3, #4]
 800e8d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e8d8:	d12a      	bne.n	800e930 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	689b      	ldr	r3, [r3, #8]
 800e8de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e8e2:	d012      	beq.n	800e90a <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	9300      	str	r3, [sp, #0]
 800e8e8:	68bb      	ldr	r3, [r7, #8]
 800e8ea:	2200      	movs	r2, #0
 800e8ec:	2180      	movs	r1, #128	; 0x80
 800e8ee:	68f8      	ldr	r0, [r7, #12]
 800e8f0:	f7ff ff67 	bl	800e7c2 <SPI_WaitFlagStateUntilTimeout>
 800e8f4:	4603      	mov	r3, r0
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d02d      	beq.n	800e956 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e8fe:	f043 0220 	orr.w	r2, r3, #32
 800e902:	68fb      	ldr	r3, [r7, #12]
 800e904:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800e906:	2303      	movs	r3, #3
 800e908:	e026      	b.n	800e958 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	9300      	str	r3, [sp, #0]
 800e90e:	68bb      	ldr	r3, [r7, #8]
 800e910:	2200      	movs	r2, #0
 800e912:	2101      	movs	r1, #1
 800e914:	68f8      	ldr	r0, [r7, #12]
 800e916:	f7ff ff54 	bl	800e7c2 <SPI_WaitFlagStateUntilTimeout>
 800e91a:	4603      	mov	r3, r0
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d01a      	beq.n	800e956 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e924:	f043 0220 	orr.w	r2, r3, #32
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800e92c:	2303      	movs	r3, #3
 800e92e:	e013      	b.n	800e958 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	9300      	str	r3, [sp, #0]
 800e934:	68bb      	ldr	r3, [r7, #8]
 800e936:	2200      	movs	r2, #0
 800e938:	2101      	movs	r1, #1
 800e93a:	68f8      	ldr	r0, [r7, #12]
 800e93c:	f7ff ff41 	bl	800e7c2 <SPI_WaitFlagStateUntilTimeout>
 800e940:	4603      	mov	r3, r0
 800e942:	2b00      	cmp	r3, #0
 800e944:	d007      	beq.n	800e956 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e94a:	f043 0220 	orr.w	r2, r3, #32
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800e952:	2303      	movs	r3, #3
 800e954:	e000      	b.n	800e958 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800e956:	2300      	movs	r3, #0
}
 800e958:	4618      	mov	r0, r3
 800e95a:	3710      	adds	r7, #16
 800e95c:	46bd      	mov	sp, r7
 800e95e:	bd80      	pop	{r7, pc}

0800e960 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800e960:	b580      	push	{r7, lr}
 800e962:	b088      	sub	sp, #32
 800e964:	af02      	add	r7, sp, #8
 800e966:	60f8      	str	r0, [r7, #12]
 800e968:	60b9      	str	r1, [r7, #8]
 800e96a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800e96c:	4b1b      	ldr	r3, [pc, #108]	; (800e9dc <SPI_EndRxTxTransaction+0x7c>)
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	4a1b      	ldr	r2, [pc, #108]	; (800e9e0 <SPI_EndRxTxTransaction+0x80>)
 800e972:	fba2 2303 	umull	r2, r3, r2, r3
 800e976:	0d5b      	lsrs	r3, r3, #21
 800e978:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e97c:	fb02 f303 	mul.w	r3, r2, r3
 800e980:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	685b      	ldr	r3, [r3, #4]
 800e986:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e98a:	d112      	bne.n	800e9b2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	9300      	str	r3, [sp, #0]
 800e990:	68bb      	ldr	r3, [r7, #8]
 800e992:	2200      	movs	r2, #0
 800e994:	2180      	movs	r1, #128	; 0x80
 800e996:	68f8      	ldr	r0, [r7, #12]
 800e998:	f7ff ff13 	bl	800e7c2 <SPI_WaitFlagStateUntilTimeout>
 800e99c:	4603      	mov	r3, r0
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d016      	beq.n	800e9d0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e9a6:	f043 0220 	orr.w	r2, r3, #32
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800e9ae:	2303      	movs	r3, #3
 800e9b0:	e00f      	b.n	800e9d2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800e9b2:	697b      	ldr	r3, [r7, #20]
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d00a      	beq.n	800e9ce <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800e9b8:	697b      	ldr	r3, [r7, #20]
 800e9ba:	3b01      	subs	r3, #1
 800e9bc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800e9be:	68fb      	ldr	r3, [r7, #12]
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	689b      	ldr	r3, [r3, #8]
 800e9c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e9c8:	2b80      	cmp	r3, #128	; 0x80
 800e9ca:	d0f2      	beq.n	800e9b2 <SPI_EndRxTxTransaction+0x52>
 800e9cc:	e000      	b.n	800e9d0 <SPI_EndRxTxTransaction+0x70>
        break;
 800e9ce:	bf00      	nop
  }

  return HAL_OK;
 800e9d0:	2300      	movs	r3, #0
}
 800e9d2:	4618      	mov	r0, r3
 800e9d4:	3718      	adds	r7, #24
 800e9d6:	46bd      	mov	sp, r7
 800e9d8:	bd80      	pop	{r7, pc}
 800e9da:	bf00      	nop
 800e9dc:	20000000 	.word	0x20000000
 800e9e0:	165e9f81 	.word	0x165e9f81

0800e9e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e9e4:	b580      	push	{r7, lr}
 800e9e6:	b082      	sub	sp, #8
 800e9e8:	af00      	add	r7, sp, #0
 800e9ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d101      	bne.n	800e9f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e9f2:	2301      	movs	r3, #1
 800e9f4:	e01d      	b.n	800ea32 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e9fc:	b2db      	uxtb	r3, r3
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d106      	bne.n	800ea10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	2200      	movs	r2, #0
 800ea06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ea0a:	6878      	ldr	r0, [r7, #4]
 800ea0c:	f7f8 fbde 	bl	80071cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	2202      	movs	r2, #2
 800ea14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	681a      	ldr	r2, [r3, #0]
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	3304      	adds	r3, #4
 800ea20:	4619      	mov	r1, r3
 800ea22:	4610      	mov	r0, r2
 800ea24:	f000 fb56 	bl	800f0d4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	2201      	movs	r2, #1
 800ea2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ea30:	2300      	movs	r3, #0
}
 800ea32:	4618      	mov	r0, r3
 800ea34:	3708      	adds	r7, #8
 800ea36:	46bd      	mov	sp, r7
 800ea38:	bd80      	pop	{r7, pc}

0800ea3a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ea3a:	b480      	push	{r7}
 800ea3c:	b085      	sub	sp, #20
 800ea3e:	af00      	add	r7, sp, #0
 800ea40:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	68da      	ldr	r2, [r3, #12]
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	f042 0201 	orr.w	r2, r2, #1
 800ea50:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	689b      	ldr	r3, [r3, #8]
 800ea58:	f003 0307 	and.w	r3, r3, #7
 800ea5c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	2b06      	cmp	r3, #6
 800ea62:	d007      	beq.n	800ea74 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	681a      	ldr	r2, [r3, #0]
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	f042 0201 	orr.w	r2, r2, #1
 800ea72:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ea74:	2300      	movs	r3, #0
}
 800ea76:	4618      	mov	r0, r3
 800ea78:	3714      	adds	r7, #20
 800ea7a:	46bd      	mov	sp, r7
 800ea7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea80:	4770      	bx	lr

0800ea82 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ea82:	b580      	push	{r7, lr}
 800ea84:	b082      	sub	sp, #8
 800ea86:	af00      	add	r7, sp, #0
 800ea88:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d101      	bne.n	800ea94 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ea90:	2301      	movs	r3, #1
 800ea92:	e01d      	b.n	800ead0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ea9a:	b2db      	uxtb	r3, r3
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d106      	bne.n	800eaae <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	2200      	movs	r2, #0
 800eaa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800eaa8:	6878      	ldr	r0, [r7, #4]
 800eaaa:	f7f8 fb1b 	bl	80070e4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	2202      	movs	r2, #2
 800eab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	681a      	ldr	r2, [r3, #0]
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	3304      	adds	r3, #4
 800eabe:	4619      	mov	r1, r3
 800eac0:	4610      	mov	r0, r2
 800eac2:	f000 fb07 	bl	800f0d4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	2201      	movs	r2, #1
 800eaca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800eace:	2300      	movs	r3, #0
}
 800ead0:	4618      	mov	r0, r3
 800ead2:	3708      	adds	r7, #8
 800ead4:	46bd      	mov	sp, r7
 800ead6:	bd80      	pop	{r7, pc}

0800ead8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ead8:	b580      	push	{r7, lr}
 800eada:	b084      	sub	sp, #16
 800eadc:	af00      	add	r7, sp, #0
 800eade:	6078      	str	r0, [r7, #4]
 800eae0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	2201      	movs	r2, #1
 800eae8:	6839      	ldr	r1, [r7, #0]
 800eaea:	4618      	mov	r0, r3
 800eaec:	f000 fd42 	bl	800f574 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	4a15      	ldr	r2, [pc, #84]	; (800eb4c <HAL_TIM_PWM_Start+0x74>)
 800eaf6:	4293      	cmp	r3, r2
 800eaf8:	d004      	beq.n	800eb04 <HAL_TIM_PWM_Start+0x2c>
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	4a14      	ldr	r2, [pc, #80]	; (800eb50 <HAL_TIM_PWM_Start+0x78>)
 800eb00:	4293      	cmp	r3, r2
 800eb02:	d101      	bne.n	800eb08 <HAL_TIM_PWM_Start+0x30>
 800eb04:	2301      	movs	r3, #1
 800eb06:	e000      	b.n	800eb0a <HAL_TIM_PWM_Start+0x32>
 800eb08:	2300      	movs	r3, #0
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d007      	beq.n	800eb1e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800eb1c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	689b      	ldr	r3, [r3, #8]
 800eb24:	f003 0307 	and.w	r3, r3, #7
 800eb28:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	2b06      	cmp	r3, #6
 800eb2e:	d007      	beq.n	800eb40 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	681a      	ldr	r2, [r3, #0]
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	f042 0201 	orr.w	r2, r2, #1
 800eb3e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800eb40:	2300      	movs	r3, #0
}
 800eb42:	4618      	mov	r0, r3
 800eb44:	3710      	adds	r7, #16
 800eb46:	46bd      	mov	sp, r7
 800eb48:	bd80      	pop	{r7, pc}
 800eb4a:	bf00      	nop
 800eb4c:	40010000 	.word	0x40010000
 800eb50:	40010400 	.word	0x40010400

0800eb54 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800eb54:	b580      	push	{r7, lr}
 800eb56:	b086      	sub	sp, #24
 800eb58:	af00      	add	r7, sp, #0
 800eb5a:	6078      	str	r0, [r7, #4]
 800eb5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d101      	bne.n	800eb68 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800eb64:	2301      	movs	r3, #1
 800eb66:	e083      	b.n	800ec70 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eb6e:	b2db      	uxtb	r3, r3
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d106      	bne.n	800eb82 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	2200      	movs	r2, #0
 800eb78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800eb7c:	6878      	ldr	r0, [r7, #4]
 800eb7e:	f7f8 fbb5 	bl	80072ec <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	2202      	movs	r2, #2
 800eb86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	689b      	ldr	r3, [r3, #8]
 800eb90:	687a      	ldr	r2, [r7, #4]
 800eb92:	6812      	ldr	r2, [r2, #0]
 800eb94:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800eb98:	f023 0307 	bic.w	r3, r3, #7
 800eb9c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	681a      	ldr	r2, [r3, #0]
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	3304      	adds	r3, #4
 800eba6:	4619      	mov	r1, r3
 800eba8:	4610      	mov	r0, r2
 800ebaa:	f000 fa93 	bl	800f0d4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	689b      	ldr	r3, [r3, #8]
 800ebb4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	699b      	ldr	r3, [r3, #24]
 800ebbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	6a1b      	ldr	r3, [r3, #32]
 800ebc4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800ebc6:	683b      	ldr	r3, [r7, #0]
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	697a      	ldr	r2, [r7, #20]
 800ebcc:	4313      	orrs	r3, r2
 800ebce:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800ebd0:	693b      	ldr	r3, [r7, #16]
 800ebd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ebd6:	f023 0303 	bic.w	r3, r3, #3
 800ebda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800ebdc:	683b      	ldr	r3, [r7, #0]
 800ebde:	689a      	ldr	r2, [r3, #8]
 800ebe0:	683b      	ldr	r3, [r7, #0]
 800ebe2:	699b      	ldr	r3, [r3, #24]
 800ebe4:	021b      	lsls	r3, r3, #8
 800ebe6:	4313      	orrs	r3, r2
 800ebe8:	693a      	ldr	r2, [r7, #16]
 800ebea:	4313      	orrs	r3, r2
 800ebec:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800ebee:	693b      	ldr	r3, [r7, #16]
 800ebf0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800ebf4:	f023 030c 	bic.w	r3, r3, #12
 800ebf8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800ebfa:	693b      	ldr	r3, [r7, #16]
 800ebfc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ec00:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ec04:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800ec06:	683b      	ldr	r3, [r7, #0]
 800ec08:	68da      	ldr	r2, [r3, #12]
 800ec0a:	683b      	ldr	r3, [r7, #0]
 800ec0c:	69db      	ldr	r3, [r3, #28]
 800ec0e:	021b      	lsls	r3, r3, #8
 800ec10:	4313      	orrs	r3, r2
 800ec12:	693a      	ldr	r2, [r7, #16]
 800ec14:	4313      	orrs	r3, r2
 800ec16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800ec18:	683b      	ldr	r3, [r7, #0]
 800ec1a:	691b      	ldr	r3, [r3, #16]
 800ec1c:	011a      	lsls	r2, r3, #4
 800ec1e:	683b      	ldr	r3, [r7, #0]
 800ec20:	6a1b      	ldr	r3, [r3, #32]
 800ec22:	031b      	lsls	r3, r3, #12
 800ec24:	4313      	orrs	r3, r2
 800ec26:	693a      	ldr	r2, [r7, #16]
 800ec28:	4313      	orrs	r3, r2
 800ec2a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800ec32:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800ec3a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800ec3c:	683b      	ldr	r3, [r7, #0]
 800ec3e:	685a      	ldr	r2, [r3, #4]
 800ec40:	683b      	ldr	r3, [r7, #0]
 800ec42:	695b      	ldr	r3, [r3, #20]
 800ec44:	011b      	lsls	r3, r3, #4
 800ec46:	4313      	orrs	r3, r2
 800ec48:	68fa      	ldr	r2, [r7, #12]
 800ec4a:	4313      	orrs	r3, r2
 800ec4c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	697a      	ldr	r2, [r7, #20]
 800ec54:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	693a      	ldr	r2, [r7, #16]
 800ec5c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	68fa      	ldr	r2, [r7, #12]
 800ec64:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	2201      	movs	r2, #1
 800ec6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ec6e:	2300      	movs	r3, #0
}
 800ec70:	4618      	mov	r0, r3
 800ec72:	3718      	adds	r7, #24
 800ec74:	46bd      	mov	sp, r7
 800ec76:	bd80      	pop	{r7, pc}

0800ec78 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ec78:	b580      	push	{r7, lr}
 800ec7a:	b082      	sub	sp, #8
 800ec7c:	af00      	add	r7, sp, #0
 800ec7e:	6078      	str	r0, [r7, #4]
 800ec80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800ec82:	683b      	ldr	r3, [r7, #0]
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d002      	beq.n	800ec8e <HAL_TIM_Encoder_Start+0x16>
 800ec88:	2b04      	cmp	r3, #4
 800ec8a:	d008      	beq.n	800ec9e <HAL_TIM_Encoder_Start+0x26>
 800ec8c:	e00f      	b.n	800ecae <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	2201      	movs	r2, #1
 800ec94:	2100      	movs	r1, #0
 800ec96:	4618      	mov	r0, r3
 800ec98:	f000 fc6c 	bl	800f574 <TIM_CCxChannelCmd>
      break;
 800ec9c:	e016      	b.n	800eccc <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	2201      	movs	r2, #1
 800eca4:	2104      	movs	r1, #4
 800eca6:	4618      	mov	r0, r3
 800eca8:	f000 fc64 	bl	800f574 <TIM_CCxChannelCmd>
      break;
 800ecac:	e00e      	b.n	800eccc <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	2201      	movs	r2, #1
 800ecb4:	2100      	movs	r1, #0
 800ecb6:	4618      	mov	r0, r3
 800ecb8:	f000 fc5c 	bl	800f574 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	2201      	movs	r2, #1
 800ecc2:	2104      	movs	r1, #4
 800ecc4:	4618      	mov	r0, r3
 800ecc6:	f000 fc55 	bl	800f574 <TIM_CCxChannelCmd>
      break;
 800ecca:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	681a      	ldr	r2, [r3, #0]
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	f042 0201 	orr.w	r2, r2, #1
 800ecda:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800ecdc:	2300      	movs	r3, #0
}
 800ecde:	4618      	mov	r0, r3
 800ece0:	3708      	adds	r7, #8
 800ece2:	46bd      	mov	sp, r7
 800ece4:	bd80      	pop	{r7, pc}

0800ece6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ece6:	b580      	push	{r7, lr}
 800ece8:	b082      	sub	sp, #8
 800ecea:	af00      	add	r7, sp, #0
 800ecec:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	691b      	ldr	r3, [r3, #16]
 800ecf4:	f003 0302 	and.w	r3, r3, #2
 800ecf8:	2b02      	cmp	r3, #2
 800ecfa:	d122      	bne.n	800ed42 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	68db      	ldr	r3, [r3, #12]
 800ed02:	f003 0302 	and.w	r3, r3, #2
 800ed06:	2b02      	cmp	r3, #2
 800ed08:	d11b      	bne.n	800ed42 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	f06f 0202 	mvn.w	r2, #2
 800ed12:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	2201      	movs	r2, #1
 800ed18:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	699b      	ldr	r3, [r3, #24]
 800ed20:	f003 0303 	and.w	r3, r3, #3
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d003      	beq.n	800ed30 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ed28:	6878      	ldr	r0, [r7, #4]
 800ed2a:	f000 f9b5 	bl	800f098 <HAL_TIM_IC_CaptureCallback>
 800ed2e:	e005      	b.n	800ed3c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ed30:	6878      	ldr	r0, [r7, #4]
 800ed32:	f000 f9a7 	bl	800f084 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ed36:	6878      	ldr	r0, [r7, #4]
 800ed38:	f000 f9b8 	bl	800f0ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	2200      	movs	r2, #0
 800ed40:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	691b      	ldr	r3, [r3, #16]
 800ed48:	f003 0304 	and.w	r3, r3, #4
 800ed4c:	2b04      	cmp	r3, #4
 800ed4e:	d122      	bne.n	800ed96 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	68db      	ldr	r3, [r3, #12]
 800ed56:	f003 0304 	and.w	r3, r3, #4
 800ed5a:	2b04      	cmp	r3, #4
 800ed5c:	d11b      	bne.n	800ed96 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	f06f 0204 	mvn.w	r2, #4
 800ed66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	2202      	movs	r2, #2
 800ed6c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	699b      	ldr	r3, [r3, #24]
 800ed74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d003      	beq.n	800ed84 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ed7c:	6878      	ldr	r0, [r7, #4]
 800ed7e:	f000 f98b 	bl	800f098 <HAL_TIM_IC_CaptureCallback>
 800ed82:	e005      	b.n	800ed90 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ed84:	6878      	ldr	r0, [r7, #4]
 800ed86:	f000 f97d 	bl	800f084 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ed8a:	6878      	ldr	r0, [r7, #4]
 800ed8c:	f000 f98e 	bl	800f0ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	2200      	movs	r2, #0
 800ed94:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	691b      	ldr	r3, [r3, #16]
 800ed9c:	f003 0308 	and.w	r3, r3, #8
 800eda0:	2b08      	cmp	r3, #8
 800eda2:	d122      	bne.n	800edea <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	68db      	ldr	r3, [r3, #12]
 800edaa:	f003 0308 	and.w	r3, r3, #8
 800edae:	2b08      	cmp	r3, #8
 800edb0:	d11b      	bne.n	800edea <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	f06f 0208 	mvn.w	r2, #8
 800edba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	2204      	movs	r2, #4
 800edc0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	681b      	ldr	r3, [r3, #0]
 800edc6:	69db      	ldr	r3, [r3, #28]
 800edc8:	f003 0303 	and.w	r3, r3, #3
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d003      	beq.n	800edd8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800edd0:	6878      	ldr	r0, [r7, #4]
 800edd2:	f000 f961 	bl	800f098 <HAL_TIM_IC_CaptureCallback>
 800edd6:	e005      	b.n	800ede4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800edd8:	6878      	ldr	r0, [r7, #4]
 800edda:	f000 f953 	bl	800f084 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800edde:	6878      	ldr	r0, [r7, #4]
 800ede0:	f000 f964 	bl	800f0ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	2200      	movs	r2, #0
 800ede8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	691b      	ldr	r3, [r3, #16]
 800edf0:	f003 0310 	and.w	r3, r3, #16
 800edf4:	2b10      	cmp	r3, #16
 800edf6:	d122      	bne.n	800ee3e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	681b      	ldr	r3, [r3, #0]
 800edfc:	68db      	ldr	r3, [r3, #12]
 800edfe:	f003 0310 	and.w	r3, r3, #16
 800ee02:	2b10      	cmp	r3, #16
 800ee04:	d11b      	bne.n	800ee3e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	f06f 0210 	mvn.w	r2, #16
 800ee0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	2208      	movs	r2, #8
 800ee14:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	69db      	ldr	r3, [r3, #28]
 800ee1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d003      	beq.n	800ee2c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ee24:	6878      	ldr	r0, [r7, #4]
 800ee26:	f000 f937 	bl	800f098 <HAL_TIM_IC_CaptureCallback>
 800ee2a:	e005      	b.n	800ee38 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ee2c:	6878      	ldr	r0, [r7, #4]
 800ee2e:	f000 f929 	bl	800f084 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ee32:	6878      	ldr	r0, [r7, #4]
 800ee34:	f000 f93a 	bl	800f0ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	2200      	movs	r2, #0
 800ee3c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	691b      	ldr	r3, [r3, #16]
 800ee44:	f003 0301 	and.w	r3, r3, #1
 800ee48:	2b01      	cmp	r3, #1
 800ee4a:	d10e      	bne.n	800ee6a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	681b      	ldr	r3, [r3, #0]
 800ee50:	68db      	ldr	r3, [r3, #12]
 800ee52:	f003 0301 	and.w	r3, r3, #1
 800ee56:	2b01      	cmp	r3, #1
 800ee58:	d107      	bne.n	800ee6a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	f06f 0201 	mvn.w	r2, #1
 800ee62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ee64:	6878      	ldr	r0, [r7, #4]
 800ee66:	f7f6 ff2b 	bl	8005cc0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	691b      	ldr	r3, [r3, #16]
 800ee70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ee74:	2b80      	cmp	r3, #128	; 0x80
 800ee76:	d10e      	bne.n	800ee96 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	68db      	ldr	r3, [r3, #12]
 800ee7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ee82:	2b80      	cmp	r3, #128	; 0x80
 800ee84:	d107      	bne.n	800ee96 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	681b      	ldr	r3, [r3, #0]
 800ee8a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ee8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ee90:	6878      	ldr	r0, [r7, #4]
 800ee92:	f000 fc6d 	bl	800f770 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	681b      	ldr	r3, [r3, #0]
 800ee9a:	691b      	ldr	r3, [r3, #16]
 800ee9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eea0:	2b40      	cmp	r3, #64	; 0x40
 800eea2:	d10e      	bne.n	800eec2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	68db      	ldr	r3, [r3, #12]
 800eeaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eeae:	2b40      	cmp	r3, #64	; 0x40
 800eeb0:	d107      	bne.n	800eec2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800eeba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800eebc:	6878      	ldr	r0, [r7, #4]
 800eebe:	f000 f8ff 	bl	800f0c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	691b      	ldr	r3, [r3, #16]
 800eec8:	f003 0320 	and.w	r3, r3, #32
 800eecc:	2b20      	cmp	r3, #32
 800eece:	d10e      	bne.n	800eeee <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	68db      	ldr	r3, [r3, #12]
 800eed6:	f003 0320 	and.w	r3, r3, #32
 800eeda:	2b20      	cmp	r3, #32
 800eedc:	d107      	bne.n	800eeee <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	f06f 0220 	mvn.w	r2, #32
 800eee6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800eee8:	6878      	ldr	r0, [r7, #4]
 800eeea:	f000 fc37 	bl	800f75c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800eeee:	bf00      	nop
 800eef0:	3708      	adds	r7, #8
 800eef2:	46bd      	mov	sp, r7
 800eef4:	bd80      	pop	{r7, pc}
	...

0800eef8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800eef8:	b580      	push	{r7, lr}
 800eefa:	b084      	sub	sp, #16
 800eefc:	af00      	add	r7, sp, #0
 800eefe:	60f8      	str	r0, [r7, #12]
 800ef00:	60b9      	str	r1, [r7, #8]
 800ef02:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ef0a:	2b01      	cmp	r3, #1
 800ef0c:	d101      	bne.n	800ef12 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800ef0e:	2302      	movs	r3, #2
 800ef10:	e0b4      	b.n	800f07c <HAL_TIM_PWM_ConfigChannel+0x184>
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	2201      	movs	r2, #1
 800ef16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	2202      	movs	r2, #2
 800ef1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	2b0c      	cmp	r3, #12
 800ef26:	f200 809f 	bhi.w	800f068 <HAL_TIM_PWM_ConfigChannel+0x170>
 800ef2a:	a201      	add	r2, pc, #4	; (adr r2, 800ef30 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800ef2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef30:	0800ef65 	.word	0x0800ef65
 800ef34:	0800f069 	.word	0x0800f069
 800ef38:	0800f069 	.word	0x0800f069
 800ef3c:	0800f069 	.word	0x0800f069
 800ef40:	0800efa5 	.word	0x0800efa5
 800ef44:	0800f069 	.word	0x0800f069
 800ef48:	0800f069 	.word	0x0800f069
 800ef4c:	0800f069 	.word	0x0800f069
 800ef50:	0800efe7 	.word	0x0800efe7
 800ef54:	0800f069 	.word	0x0800f069
 800ef58:	0800f069 	.word	0x0800f069
 800ef5c:	0800f069 	.word	0x0800f069
 800ef60:	0800f027 	.word	0x0800f027
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	68b9      	ldr	r1, [r7, #8]
 800ef6a:	4618      	mov	r0, r3
 800ef6c:	f000 f952 	bl	800f214 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	699a      	ldr	r2, [r3, #24]
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	f042 0208 	orr.w	r2, r2, #8
 800ef7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	699a      	ldr	r2, [r3, #24]
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	f022 0204 	bic.w	r2, r2, #4
 800ef8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	6999      	ldr	r1, [r3, #24]
 800ef96:	68bb      	ldr	r3, [r7, #8]
 800ef98:	691a      	ldr	r2, [r3, #16]
 800ef9a:	68fb      	ldr	r3, [r7, #12]
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	430a      	orrs	r2, r1
 800efa0:	619a      	str	r2, [r3, #24]
      break;
 800efa2:	e062      	b.n	800f06a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	68b9      	ldr	r1, [r7, #8]
 800efaa:	4618      	mov	r0, r3
 800efac:	f000 f9a2 	bl	800f2f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	699a      	ldr	r2, [r3, #24]
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	681b      	ldr	r3, [r3, #0]
 800efba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800efbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	699a      	ldr	r2, [r3, #24]
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800efce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	6999      	ldr	r1, [r3, #24]
 800efd6:	68bb      	ldr	r3, [r7, #8]
 800efd8:	691b      	ldr	r3, [r3, #16]
 800efda:	021a      	lsls	r2, r3, #8
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	430a      	orrs	r2, r1
 800efe2:	619a      	str	r2, [r3, #24]
      break;
 800efe4:	e041      	b.n	800f06a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	68b9      	ldr	r1, [r7, #8]
 800efec:	4618      	mov	r0, r3
 800efee:	f000 f9f7 	bl	800f3e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	69da      	ldr	r2, [r3, #28]
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	f042 0208 	orr.w	r2, r2, #8
 800f000:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f002:	68fb      	ldr	r3, [r7, #12]
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	69da      	ldr	r2, [r3, #28]
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	f022 0204 	bic.w	r2, r2, #4
 800f010:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	69d9      	ldr	r1, [r3, #28]
 800f018:	68bb      	ldr	r3, [r7, #8]
 800f01a:	691a      	ldr	r2, [r3, #16]
 800f01c:	68fb      	ldr	r3, [r7, #12]
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	430a      	orrs	r2, r1
 800f022:	61da      	str	r2, [r3, #28]
      break;
 800f024:	e021      	b.n	800f06a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	68b9      	ldr	r1, [r7, #8]
 800f02c:	4618      	mov	r0, r3
 800f02e:	f000 fa4b 	bl	800f4c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	69da      	ldr	r2, [r3, #28]
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f040:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	69da      	ldr	r2, [r3, #28]
 800f048:	68fb      	ldr	r3, [r7, #12]
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800f050:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	69d9      	ldr	r1, [r3, #28]
 800f058:	68bb      	ldr	r3, [r7, #8]
 800f05a:	691b      	ldr	r3, [r3, #16]
 800f05c:	021a      	lsls	r2, r3, #8
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	430a      	orrs	r2, r1
 800f064:	61da      	str	r2, [r3, #28]
      break;
 800f066:	e000      	b.n	800f06a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800f068:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	2201      	movs	r2, #1
 800f06e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	2200      	movs	r2, #0
 800f076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f07a:	2300      	movs	r3, #0
}
 800f07c:	4618      	mov	r0, r3
 800f07e:	3710      	adds	r7, #16
 800f080:	46bd      	mov	sp, r7
 800f082:	bd80      	pop	{r7, pc}

0800f084 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f084:	b480      	push	{r7}
 800f086:	b083      	sub	sp, #12
 800f088:	af00      	add	r7, sp, #0
 800f08a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f08c:	bf00      	nop
 800f08e:	370c      	adds	r7, #12
 800f090:	46bd      	mov	sp, r7
 800f092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f096:	4770      	bx	lr

0800f098 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f098:	b480      	push	{r7}
 800f09a:	b083      	sub	sp, #12
 800f09c:	af00      	add	r7, sp, #0
 800f09e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f0a0:	bf00      	nop
 800f0a2:	370c      	adds	r7, #12
 800f0a4:	46bd      	mov	sp, r7
 800f0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0aa:	4770      	bx	lr

0800f0ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f0ac:	b480      	push	{r7}
 800f0ae:	b083      	sub	sp, #12
 800f0b0:	af00      	add	r7, sp, #0
 800f0b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f0b4:	bf00      	nop
 800f0b6:	370c      	adds	r7, #12
 800f0b8:	46bd      	mov	sp, r7
 800f0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0be:	4770      	bx	lr

0800f0c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f0c0:	b480      	push	{r7}
 800f0c2:	b083      	sub	sp, #12
 800f0c4:	af00      	add	r7, sp, #0
 800f0c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f0c8:	bf00      	nop
 800f0ca:	370c      	adds	r7, #12
 800f0cc:	46bd      	mov	sp, r7
 800f0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0d2:	4770      	bx	lr

0800f0d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800f0d4:	b480      	push	{r7}
 800f0d6:	b085      	sub	sp, #20
 800f0d8:	af00      	add	r7, sp, #0
 800f0da:	6078      	str	r0, [r7, #4]
 800f0dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	4a40      	ldr	r2, [pc, #256]	; (800f1e8 <TIM_Base_SetConfig+0x114>)
 800f0e8:	4293      	cmp	r3, r2
 800f0ea:	d013      	beq.n	800f114 <TIM_Base_SetConfig+0x40>
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f0f2:	d00f      	beq.n	800f114 <TIM_Base_SetConfig+0x40>
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	4a3d      	ldr	r2, [pc, #244]	; (800f1ec <TIM_Base_SetConfig+0x118>)
 800f0f8:	4293      	cmp	r3, r2
 800f0fa:	d00b      	beq.n	800f114 <TIM_Base_SetConfig+0x40>
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	4a3c      	ldr	r2, [pc, #240]	; (800f1f0 <TIM_Base_SetConfig+0x11c>)
 800f100:	4293      	cmp	r3, r2
 800f102:	d007      	beq.n	800f114 <TIM_Base_SetConfig+0x40>
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	4a3b      	ldr	r2, [pc, #236]	; (800f1f4 <TIM_Base_SetConfig+0x120>)
 800f108:	4293      	cmp	r3, r2
 800f10a:	d003      	beq.n	800f114 <TIM_Base_SetConfig+0x40>
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	4a3a      	ldr	r2, [pc, #232]	; (800f1f8 <TIM_Base_SetConfig+0x124>)
 800f110:	4293      	cmp	r3, r2
 800f112:	d108      	bne.n	800f126 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f11a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f11c:	683b      	ldr	r3, [r7, #0]
 800f11e:	685b      	ldr	r3, [r3, #4]
 800f120:	68fa      	ldr	r2, [r7, #12]
 800f122:	4313      	orrs	r3, r2
 800f124:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	4a2f      	ldr	r2, [pc, #188]	; (800f1e8 <TIM_Base_SetConfig+0x114>)
 800f12a:	4293      	cmp	r3, r2
 800f12c:	d02b      	beq.n	800f186 <TIM_Base_SetConfig+0xb2>
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f134:	d027      	beq.n	800f186 <TIM_Base_SetConfig+0xb2>
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	4a2c      	ldr	r2, [pc, #176]	; (800f1ec <TIM_Base_SetConfig+0x118>)
 800f13a:	4293      	cmp	r3, r2
 800f13c:	d023      	beq.n	800f186 <TIM_Base_SetConfig+0xb2>
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	4a2b      	ldr	r2, [pc, #172]	; (800f1f0 <TIM_Base_SetConfig+0x11c>)
 800f142:	4293      	cmp	r3, r2
 800f144:	d01f      	beq.n	800f186 <TIM_Base_SetConfig+0xb2>
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	4a2a      	ldr	r2, [pc, #168]	; (800f1f4 <TIM_Base_SetConfig+0x120>)
 800f14a:	4293      	cmp	r3, r2
 800f14c:	d01b      	beq.n	800f186 <TIM_Base_SetConfig+0xb2>
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	4a29      	ldr	r2, [pc, #164]	; (800f1f8 <TIM_Base_SetConfig+0x124>)
 800f152:	4293      	cmp	r3, r2
 800f154:	d017      	beq.n	800f186 <TIM_Base_SetConfig+0xb2>
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	4a28      	ldr	r2, [pc, #160]	; (800f1fc <TIM_Base_SetConfig+0x128>)
 800f15a:	4293      	cmp	r3, r2
 800f15c:	d013      	beq.n	800f186 <TIM_Base_SetConfig+0xb2>
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	4a27      	ldr	r2, [pc, #156]	; (800f200 <TIM_Base_SetConfig+0x12c>)
 800f162:	4293      	cmp	r3, r2
 800f164:	d00f      	beq.n	800f186 <TIM_Base_SetConfig+0xb2>
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	4a26      	ldr	r2, [pc, #152]	; (800f204 <TIM_Base_SetConfig+0x130>)
 800f16a:	4293      	cmp	r3, r2
 800f16c:	d00b      	beq.n	800f186 <TIM_Base_SetConfig+0xb2>
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	4a25      	ldr	r2, [pc, #148]	; (800f208 <TIM_Base_SetConfig+0x134>)
 800f172:	4293      	cmp	r3, r2
 800f174:	d007      	beq.n	800f186 <TIM_Base_SetConfig+0xb2>
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	4a24      	ldr	r2, [pc, #144]	; (800f20c <TIM_Base_SetConfig+0x138>)
 800f17a:	4293      	cmp	r3, r2
 800f17c:	d003      	beq.n	800f186 <TIM_Base_SetConfig+0xb2>
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	4a23      	ldr	r2, [pc, #140]	; (800f210 <TIM_Base_SetConfig+0x13c>)
 800f182:	4293      	cmp	r3, r2
 800f184:	d108      	bne.n	800f198 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f18c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f18e:	683b      	ldr	r3, [r7, #0]
 800f190:	68db      	ldr	r3, [r3, #12]
 800f192:	68fa      	ldr	r2, [r7, #12]
 800f194:	4313      	orrs	r3, r2
 800f196:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f19e:	683b      	ldr	r3, [r7, #0]
 800f1a0:	695b      	ldr	r3, [r3, #20]
 800f1a2:	4313      	orrs	r3, r2
 800f1a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	68fa      	ldr	r2, [r7, #12]
 800f1aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f1ac:	683b      	ldr	r3, [r7, #0]
 800f1ae:	689a      	ldr	r2, [r3, #8]
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f1b4:	683b      	ldr	r3, [r7, #0]
 800f1b6:	681a      	ldr	r2, [r3, #0]
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	4a0a      	ldr	r2, [pc, #40]	; (800f1e8 <TIM_Base_SetConfig+0x114>)
 800f1c0:	4293      	cmp	r3, r2
 800f1c2:	d003      	beq.n	800f1cc <TIM_Base_SetConfig+0xf8>
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	4a0c      	ldr	r2, [pc, #48]	; (800f1f8 <TIM_Base_SetConfig+0x124>)
 800f1c8:	4293      	cmp	r3, r2
 800f1ca:	d103      	bne.n	800f1d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f1cc:	683b      	ldr	r3, [r7, #0]
 800f1ce:	691a      	ldr	r2, [r3, #16]
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	2201      	movs	r2, #1
 800f1d8:	615a      	str	r2, [r3, #20]
}
 800f1da:	bf00      	nop
 800f1dc:	3714      	adds	r7, #20
 800f1de:	46bd      	mov	sp, r7
 800f1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1e4:	4770      	bx	lr
 800f1e6:	bf00      	nop
 800f1e8:	40010000 	.word	0x40010000
 800f1ec:	40000400 	.word	0x40000400
 800f1f0:	40000800 	.word	0x40000800
 800f1f4:	40000c00 	.word	0x40000c00
 800f1f8:	40010400 	.word	0x40010400
 800f1fc:	40014000 	.word	0x40014000
 800f200:	40014400 	.word	0x40014400
 800f204:	40014800 	.word	0x40014800
 800f208:	40001800 	.word	0x40001800
 800f20c:	40001c00 	.word	0x40001c00
 800f210:	40002000 	.word	0x40002000

0800f214 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f214:	b480      	push	{r7}
 800f216:	b087      	sub	sp, #28
 800f218:	af00      	add	r7, sp, #0
 800f21a:	6078      	str	r0, [r7, #4]
 800f21c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	6a1b      	ldr	r3, [r3, #32]
 800f222:	f023 0201 	bic.w	r2, r3, #1
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	6a1b      	ldr	r3, [r3, #32]
 800f22e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	685b      	ldr	r3, [r3, #4]
 800f234:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	699b      	ldr	r3, [r3, #24]
 800f23a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f23c:	68fb      	ldr	r3, [r7, #12]
 800f23e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f242:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	f023 0303 	bic.w	r3, r3, #3
 800f24a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f24c:	683b      	ldr	r3, [r7, #0]
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	68fa      	ldr	r2, [r7, #12]
 800f252:	4313      	orrs	r3, r2
 800f254:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f256:	697b      	ldr	r3, [r7, #20]
 800f258:	f023 0302 	bic.w	r3, r3, #2
 800f25c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f25e:	683b      	ldr	r3, [r7, #0]
 800f260:	689b      	ldr	r3, [r3, #8]
 800f262:	697a      	ldr	r2, [r7, #20]
 800f264:	4313      	orrs	r3, r2
 800f266:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	4a20      	ldr	r2, [pc, #128]	; (800f2ec <TIM_OC1_SetConfig+0xd8>)
 800f26c:	4293      	cmp	r3, r2
 800f26e:	d003      	beq.n	800f278 <TIM_OC1_SetConfig+0x64>
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	4a1f      	ldr	r2, [pc, #124]	; (800f2f0 <TIM_OC1_SetConfig+0xdc>)
 800f274:	4293      	cmp	r3, r2
 800f276:	d10c      	bne.n	800f292 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f278:	697b      	ldr	r3, [r7, #20]
 800f27a:	f023 0308 	bic.w	r3, r3, #8
 800f27e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f280:	683b      	ldr	r3, [r7, #0]
 800f282:	68db      	ldr	r3, [r3, #12]
 800f284:	697a      	ldr	r2, [r7, #20]
 800f286:	4313      	orrs	r3, r2
 800f288:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f28a:	697b      	ldr	r3, [r7, #20]
 800f28c:	f023 0304 	bic.w	r3, r3, #4
 800f290:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	4a15      	ldr	r2, [pc, #84]	; (800f2ec <TIM_OC1_SetConfig+0xd8>)
 800f296:	4293      	cmp	r3, r2
 800f298:	d003      	beq.n	800f2a2 <TIM_OC1_SetConfig+0x8e>
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	4a14      	ldr	r2, [pc, #80]	; (800f2f0 <TIM_OC1_SetConfig+0xdc>)
 800f29e:	4293      	cmp	r3, r2
 800f2a0:	d111      	bne.n	800f2c6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f2a2:	693b      	ldr	r3, [r7, #16]
 800f2a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f2a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f2aa:	693b      	ldr	r3, [r7, #16]
 800f2ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f2b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f2b2:	683b      	ldr	r3, [r7, #0]
 800f2b4:	695b      	ldr	r3, [r3, #20]
 800f2b6:	693a      	ldr	r2, [r7, #16]
 800f2b8:	4313      	orrs	r3, r2
 800f2ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f2bc:	683b      	ldr	r3, [r7, #0]
 800f2be:	699b      	ldr	r3, [r3, #24]
 800f2c0:	693a      	ldr	r2, [r7, #16]
 800f2c2:	4313      	orrs	r3, r2
 800f2c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	693a      	ldr	r2, [r7, #16]
 800f2ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	68fa      	ldr	r2, [r7, #12]
 800f2d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f2d2:	683b      	ldr	r3, [r7, #0]
 800f2d4:	685a      	ldr	r2, [r3, #4]
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	697a      	ldr	r2, [r7, #20]
 800f2de:	621a      	str	r2, [r3, #32]
}
 800f2e0:	bf00      	nop
 800f2e2:	371c      	adds	r7, #28
 800f2e4:	46bd      	mov	sp, r7
 800f2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ea:	4770      	bx	lr
 800f2ec:	40010000 	.word	0x40010000
 800f2f0:	40010400 	.word	0x40010400

0800f2f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f2f4:	b480      	push	{r7}
 800f2f6:	b087      	sub	sp, #28
 800f2f8:	af00      	add	r7, sp, #0
 800f2fa:	6078      	str	r0, [r7, #4]
 800f2fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	6a1b      	ldr	r3, [r3, #32]
 800f302:	f023 0210 	bic.w	r2, r3, #16
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	6a1b      	ldr	r3, [r3, #32]
 800f30e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	685b      	ldr	r3, [r3, #4]
 800f314:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	699b      	ldr	r3, [r3, #24]
 800f31a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f31c:	68fb      	ldr	r3, [r7, #12]
 800f31e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f322:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f324:	68fb      	ldr	r3, [r7, #12]
 800f326:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f32a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f32c:	683b      	ldr	r3, [r7, #0]
 800f32e:	681b      	ldr	r3, [r3, #0]
 800f330:	021b      	lsls	r3, r3, #8
 800f332:	68fa      	ldr	r2, [r7, #12]
 800f334:	4313      	orrs	r3, r2
 800f336:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f338:	697b      	ldr	r3, [r7, #20]
 800f33a:	f023 0320 	bic.w	r3, r3, #32
 800f33e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f340:	683b      	ldr	r3, [r7, #0]
 800f342:	689b      	ldr	r3, [r3, #8]
 800f344:	011b      	lsls	r3, r3, #4
 800f346:	697a      	ldr	r2, [r7, #20]
 800f348:	4313      	orrs	r3, r2
 800f34a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	4a22      	ldr	r2, [pc, #136]	; (800f3d8 <TIM_OC2_SetConfig+0xe4>)
 800f350:	4293      	cmp	r3, r2
 800f352:	d003      	beq.n	800f35c <TIM_OC2_SetConfig+0x68>
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	4a21      	ldr	r2, [pc, #132]	; (800f3dc <TIM_OC2_SetConfig+0xe8>)
 800f358:	4293      	cmp	r3, r2
 800f35a:	d10d      	bne.n	800f378 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f35c:	697b      	ldr	r3, [r7, #20]
 800f35e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f362:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f364:	683b      	ldr	r3, [r7, #0]
 800f366:	68db      	ldr	r3, [r3, #12]
 800f368:	011b      	lsls	r3, r3, #4
 800f36a:	697a      	ldr	r2, [r7, #20]
 800f36c:	4313      	orrs	r3, r2
 800f36e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f370:	697b      	ldr	r3, [r7, #20]
 800f372:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f376:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	4a17      	ldr	r2, [pc, #92]	; (800f3d8 <TIM_OC2_SetConfig+0xe4>)
 800f37c:	4293      	cmp	r3, r2
 800f37e:	d003      	beq.n	800f388 <TIM_OC2_SetConfig+0x94>
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	4a16      	ldr	r2, [pc, #88]	; (800f3dc <TIM_OC2_SetConfig+0xe8>)
 800f384:	4293      	cmp	r3, r2
 800f386:	d113      	bne.n	800f3b0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f388:	693b      	ldr	r3, [r7, #16]
 800f38a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f38e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f390:	693b      	ldr	r3, [r7, #16]
 800f392:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f396:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f398:	683b      	ldr	r3, [r7, #0]
 800f39a:	695b      	ldr	r3, [r3, #20]
 800f39c:	009b      	lsls	r3, r3, #2
 800f39e:	693a      	ldr	r2, [r7, #16]
 800f3a0:	4313      	orrs	r3, r2
 800f3a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f3a4:	683b      	ldr	r3, [r7, #0]
 800f3a6:	699b      	ldr	r3, [r3, #24]
 800f3a8:	009b      	lsls	r3, r3, #2
 800f3aa:	693a      	ldr	r2, [r7, #16]
 800f3ac:	4313      	orrs	r3, r2
 800f3ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	693a      	ldr	r2, [r7, #16]
 800f3b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	68fa      	ldr	r2, [r7, #12]
 800f3ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f3bc:	683b      	ldr	r3, [r7, #0]
 800f3be:	685a      	ldr	r2, [r3, #4]
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	697a      	ldr	r2, [r7, #20]
 800f3c8:	621a      	str	r2, [r3, #32]
}
 800f3ca:	bf00      	nop
 800f3cc:	371c      	adds	r7, #28
 800f3ce:	46bd      	mov	sp, r7
 800f3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3d4:	4770      	bx	lr
 800f3d6:	bf00      	nop
 800f3d8:	40010000 	.word	0x40010000
 800f3dc:	40010400 	.word	0x40010400

0800f3e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f3e0:	b480      	push	{r7}
 800f3e2:	b087      	sub	sp, #28
 800f3e4:	af00      	add	r7, sp, #0
 800f3e6:	6078      	str	r0, [r7, #4]
 800f3e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	6a1b      	ldr	r3, [r3, #32]
 800f3ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	6a1b      	ldr	r3, [r3, #32]
 800f3fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	685b      	ldr	r3, [r3, #4]
 800f400:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	69db      	ldr	r3, [r3, #28]
 800f406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f40e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f410:	68fb      	ldr	r3, [r7, #12]
 800f412:	f023 0303 	bic.w	r3, r3, #3
 800f416:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f418:	683b      	ldr	r3, [r7, #0]
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	68fa      	ldr	r2, [r7, #12]
 800f41e:	4313      	orrs	r3, r2
 800f420:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f422:	697b      	ldr	r3, [r7, #20]
 800f424:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f428:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f42a:	683b      	ldr	r3, [r7, #0]
 800f42c:	689b      	ldr	r3, [r3, #8]
 800f42e:	021b      	lsls	r3, r3, #8
 800f430:	697a      	ldr	r2, [r7, #20]
 800f432:	4313      	orrs	r3, r2
 800f434:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	4a21      	ldr	r2, [pc, #132]	; (800f4c0 <TIM_OC3_SetConfig+0xe0>)
 800f43a:	4293      	cmp	r3, r2
 800f43c:	d003      	beq.n	800f446 <TIM_OC3_SetConfig+0x66>
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	4a20      	ldr	r2, [pc, #128]	; (800f4c4 <TIM_OC3_SetConfig+0xe4>)
 800f442:	4293      	cmp	r3, r2
 800f444:	d10d      	bne.n	800f462 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f446:	697b      	ldr	r3, [r7, #20]
 800f448:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f44c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f44e:	683b      	ldr	r3, [r7, #0]
 800f450:	68db      	ldr	r3, [r3, #12]
 800f452:	021b      	lsls	r3, r3, #8
 800f454:	697a      	ldr	r2, [r7, #20]
 800f456:	4313      	orrs	r3, r2
 800f458:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f45a:	697b      	ldr	r3, [r7, #20]
 800f45c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f460:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	4a16      	ldr	r2, [pc, #88]	; (800f4c0 <TIM_OC3_SetConfig+0xe0>)
 800f466:	4293      	cmp	r3, r2
 800f468:	d003      	beq.n	800f472 <TIM_OC3_SetConfig+0x92>
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	4a15      	ldr	r2, [pc, #84]	; (800f4c4 <TIM_OC3_SetConfig+0xe4>)
 800f46e:	4293      	cmp	r3, r2
 800f470:	d113      	bne.n	800f49a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f472:	693b      	ldr	r3, [r7, #16]
 800f474:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f478:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f47a:	693b      	ldr	r3, [r7, #16]
 800f47c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f480:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f482:	683b      	ldr	r3, [r7, #0]
 800f484:	695b      	ldr	r3, [r3, #20]
 800f486:	011b      	lsls	r3, r3, #4
 800f488:	693a      	ldr	r2, [r7, #16]
 800f48a:	4313      	orrs	r3, r2
 800f48c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f48e:	683b      	ldr	r3, [r7, #0]
 800f490:	699b      	ldr	r3, [r3, #24]
 800f492:	011b      	lsls	r3, r3, #4
 800f494:	693a      	ldr	r2, [r7, #16]
 800f496:	4313      	orrs	r3, r2
 800f498:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f49a:	687b      	ldr	r3, [r7, #4]
 800f49c:	693a      	ldr	r2, [r7, #16]
 800f49e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	68fa      	ldr	r2, [r7, #12]
 800f4a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f4a6:	683b      	ldr	r3, [r7, #0]
 800f4a8:	685a      	ldr	r2, [r3, #4]
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	697a      	ldr	r2, [r7, #20]
 800f4b2:	621a      	str	r2, [r3, #32]
}
 800f4b4:	bf00      	nop
 800f4b6:	371c      	adds	r7, #28
 800f4b8:	46bd      	mov	sp, r7
 800f4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4be:	4770      	bx	lr
 800f4c0:	40010000 	.word	0x40010000
 800f4c4:	40010400 	.word	0x40010400

0800f4c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f4c8:	b480      	push	{r7}
 800f4ca:	b087      	sub	sp, #28
 800f4cc:	af00      	add	r7, sp, #0
 800f4ce:	6078      	str	r0, [r7, #4]
 800f4d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	6a1b      	ldr	r3, [r3, #32]
 800f4d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	6a1b      	ldr	r3, [r3, #32]
 800f4e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	685b      	ldr	r3, [r3, #4]
 800f4e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	69db      	ldr	r3, [r3, #28]
 800f4ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f4f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f4fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f500:	683b      	ldr	r3, [r7, #0]
 800f502:	681b      	ldr	r3, [r3, #0]
 800f504:	021b      	lsls	r3, r3, #8
 800f506:	68fa      	ldr	r2, [r7, #12]
 800f508:	4313      	orrs	r3, r2
 800f50a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f50c:	693b      	ldr	r3, [r7, #16]
 800f50e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f512:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f514:	683b      	ldr	r3, [r7, #0]
 800f516:	689b      	ldr	r3, [r3, #8]
 800f518:	031b      	lsls	r3, r3, #12
 800f51a:	693a      	ldr	r2, [r7, #16]
 800f51c:	4313      	orrs	r3, r2
 800f51e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	4a12      	ldr	r2, [pc, #72]	; (800f56c <TIM_OC4_SetConfig+0xa4>)
 800f524:	4293      	cmp	r3, r2
 800f526:	d003      	beq.n	800f530 <TIM_OC4_SetConfig+0x68>
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	4a11      	ldr	r2, [pc, #68]	; (800f570 <TIM_OC4_SetConfig+0xa8>)
 800f52c:	4293      	cmp	r3, r2
 800f52e:	d109      	bne.n	800f544 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f530:	697b      	ldr	r3, [r7, #20]
 800f532:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f536:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f538:	683b      	ldr	r3, [r7, #0]
 800f53a:	695b      	ldr	r3, [r3, #20]
 800f53c:	019b      	lsls	r3, r3, #6
 800f53e:	697a      	ldr	r2, [r7, #20]
 800f540:	4313      	orrs	r3, r2
 800f542:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	697a      	ldr	r2, [r7, #20]
 800f548:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	68fa      	ldr	r2, [r7, #12]
 800f54e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f550:	683b      	ldr	r3, [r7, #0]
 800f552:	685a      	ldr	r2, [r3, #4]
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	693a      	ldr	r2, [r7, #16]
 800f55c:	621a      	str	r2, [r3, #32]
}
 800f55e:	bf00      	nop
 800f560:	371c      	adds	r7, #28
 800f562:	46bd      	mov	sp, r7
 800f564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f568:	4770      	bx	lr
 800f56a:	bf00      	nop
 800f56c:	40010000 	.word	0x40010000
 800f570:	40010400 	.word	0x40010400

0800f574 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800f574:	b480      	push	{r7}
 800f576:	b087      	sub	sp, #28
 800f578:	af00      	add	r7, sp, #0
 800f57a:	60f8      	str	r0, [r7, #12]
 800f57c:	60b9      	str	r1, [r7, #8]
 800f57e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f580:	68bb      	ldr	r3, [r7, #8]
 800f582:	f003 031f 	and.w	r3, r3, #31
 800f586:	2201      	movs	r2, #1
 800f588:	fa02 f303 	lsl.w	r3, r2, r3
 800f58c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	6a1a      	ldr	r2, [r3, #32]
 800f592:	697b      	ldr	r3, [r7, #20]
 800f594:	43db      	mvns	r3, r3
 800f596:	401a      	ands	r2, r3
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f59c:	68fb      	ldr	r3, [r7, #12]
 800f59e:	6a1a      	ldr	r2, [r3, #32]
 800f5a0:	68bb      	ldr	r3, [r7, #8]
 800f5a2:	f003 031f 	and.w	r3, r3, #31
 800f5a6:	6879      	ldr	r1, [r7, #4]
 800f5a8:	fa01 f303 	lsl.w	r3, r1, r3
 800f5ac:	431a      	orrs	r2, r3
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	621a      	str	r2, [r3, #32]
}
 800f5b2:	bf00      	nop
 800f5b4:	371c      	adds	r7, #28
 800f5b6:	46bd      	mov	sp, r7
 800f5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5bc:	4770      	bx	lr
	...

0800f5c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f5c0:	b480      	push	{r7}
 800f5c2:	b085      	sub	sp, #20
 800f5c4:	af00      	add	r7, sp, #0
 800f5c6:	6078      	str	r0, [r7, #4]
 800f5c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f5d0:	2b01      	cmp	r3, #1
 800f5d2:	d101      	bne.n	800f5d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f5d4:	2302      	movs	r3, #2
 800f5d6:	e05a      	b.n	800f68e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	2201      	movs	r2, #1
 800f5dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	2202      	movs	r2, #2
 800f5e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	685b      	ldr	r3, [r3, #4]
 800f5ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	689b      	ldr	r3, [r3, #8]
 800f5f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f5f8:	68fb      	ldr	r3, [r7, #12]
 800f5fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f5fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f600:	683b      	ldr	r3, [r7, #0]
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	68fa      	ldr	r2, [r7, #12]
 800f606:	4313      	orrs	r3, r2
 800f608:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	68fa      	ldr	r2, [r7, #12]
 800f610:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	681b      	ldr	r3, [r3, #0]
 800f616:	4a21      	ldr	r2, [pc, #132]	; (800f69c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800f618:	4293      	cmp	r3, r2
 800f61a:	d022      	beq.n	800f662 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f624:	d01d      	beq.n	800f662 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	4a1d      	ldr	r2, [pc, #116]	; (800f6a0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800f62c:	4293      	cmp	r3, r2
 800f62e:	d018      	beq.n	800f662 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	681b      	ldr	r3, [r3, #0]
 800f634:	4a1b      	ldr	r2, [pc, #108]	; (800f6a4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800f636:	4293      	cmp	r3, r2
 800f638:	d013      	beq.n	800f662 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	681b      	ldr	r3, [r3, #0]
 800f63e:	4a1a      	ldr	r2, [pc, #104]	; (800f6a8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800f640:	4293      	cmp	r3, r2
 800f642:	d00e      	beq.n	800f662 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	681b      	ldr	r3, [r3, #0]
 800f648:	4a18      	ldr	r2, [pc, #96]	; (800f6ac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800f64a:	4293      	cmp	r3, r2
 800f64c:	d009      	beq.n	800f662 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	4a17      	ldr	r2, [pc, #92]	; (800f6b0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800f654:	4293      	cmp	r3, r2
 800f656:	d004      	beq.n	800f662 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	4a15      	ldr	r2, [pc, #84]	; (800f6b4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800f65e:	4293      	cmp	r3, r2
 800f660:	d10c      	bne.n	800f67c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f662:	68bb      	ldr	r3, [r7, #8]
 800f664:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f668:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f66a:	683b      	ldr	r3, [r7, #0]
 800f66c:	685b      	ldr	r3, [r3, #4]
 800f66e:	68ba      	ldr	r2, [r7, #8]
 800f670:	4313      	orrs	r3, r2
 800f672:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	681b      	ldr	r3, [r3, #0]
 800f678:	68ba      	ldr	r2, [r7, #8]
 800f67a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	2201      	movs	r2, #1
 800f680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	2200      	movs	r2, #0
 800f688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f68c:	2300      	movs	r3, #0
}
 800f68e:	4618      	mov	r0, r3
 800f690:	3714      	adds	r7, #20
 800f692:	46bd      	mov	sp, r7
 800f694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f698:	4770      	bx	lr
 800f69a:	bf00      	nop
 800f69c:	40010000 	.word	0x40010000
 800f6a0:	40000400 	.word	0x40000400
 800f6a4:	40000800 	.word	0x40000800
 800f6a8:	40000c00 	.word	0x40000c00
 800f6ac:	40010400 	.word	0x40010400
 800f6b0:	40014000 	.word	0x40014000
 800f6b4:	40001800 	.word	0x40001800

0800f6b8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800f6b8:	b480      	push	{r7}
 800f6ba:	b085      	sub	sp, #20
 800f6bc:	af00      	add	r7, sp, #0
 800f6be:	6078      	str	r0, [r7, #4]
 800f6c0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800f6c2:	2300      	movs	r3, #0
 800f6c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f6cc:	2b01      	cmp	r3, #1
 800f6ce:	d101      	bne.n	800f6d4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800f6d0:	2302      	movs	r3, #2
 800f6d2:	e03d      	b.n	800f750 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	2201      	movs	r2, #1
 800f6d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800f6e2:	683b      	ldr	r3, [r7, #0]
 800f6e4:	68db      	ldr	r3, [r3, #12]
 800f6e6:	4313      	orrs	r3, r2
 800f6e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800f6ea:	68fb      	ldr	r3, [r7, #12]
 800f6ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800f6f0:	683b      	ldr	r3, [r7, #0]
 800f6f2:	689b      	ldr	r3, [r3, #8]
 800f6f4:	4313      	orrs	r3, r2
 800f6f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800f6fe:	683b      	ldr	r3, [r7, #0]
 800f700:	685b      	ldr	r3, [r3, #4]
 800f702:	4313      	orrs	r3, r2
 800f704:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800f706:	68fb      	ldr	r3, [r7, #12]
 800f708:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800f70c:	683b      	ldr	r3, [r7, #0]
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	4313      	orrs	r3, r2
 800f712:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f71a:	683b      	ldr	r3, [r7, #0]
 800f71c:	691b      	ldr	r3, [r3, #16]
 800f71e:	4313      	orrs	r3, r2
 800f720:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800f722:	68fb      	ldr	r3, [r7, #12]
 800f724:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800f728:	683b      	ldr	r3, [r7, #0]
 800f72a:	695b      	ldr	r3, [r3, #20]
 800f72c:	4313      	orrs	r3, r2
 800f72e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800f730:	68fb      	ldr	r3, [r7, #12]
 800f732:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800f736:	683b      	ldr	r3, [r7, #0]
 800f738:	69db      	ldr	r3, [r3, #28]
 800f73a:	4313      	orrs	r3, r2
 800f73c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	68fa      	ldr	r2, [r7, #12]
 800f744:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	2200      	movs	r2, #0
 800f74a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f74e:	2300      	movs	r3, #0
}
 800f750:	4618      	mov	r0, r3
 800f752:	3714      	adds	r7, #20
 800f754:	46bd      	mov	sp, r7
 800f756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f75a:	4770      	bx	lr

0800f75c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f75c:	b480      	push	{r7}
 800f75e:	b083      	sub	sp, #12
 800f760:	af00      	add	r7, sp, #0
 800f762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f764:	bf00      	nop
 800f766:	370c      	adds	r7, #12
 800f768:	46bd      	mov	sp, r7
 800f76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f76e:	4770      	bx	lr

0800f770 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f770:	b480      	push	{r7}
 800f772:	b083      	sub	sp, #12
 800f774:	af00      	add	r7, sp, #0
 800f776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f778:	bf00      	nop
 800f77a:	370c      	adds	r7, #12
 800f77c:	46bd      	mov	sp, r7
 800f77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f782:	4770      	bx	lr

0800f784 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f784:	b580      	push	{r7, lr}
 800f786:	b082      	sub	sp, #8
 800f788:	af00      	add	r7, sp, #0
 800f78a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d101      	bne.n	800f796 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f792:	2301      	movs	r3, #1
 800f794:	e03f      	b.n	800f816 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800f79c:	b2db      	uxtb	r3, r3
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d106      	bne.n	800f7b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	2200      	movs	r2, #0
 800f7a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f7aa:	6878      	ldr	r0, [r7, #4]
 800f7ac:	f7f7 fec8 	bl	8007540 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	2224      	movs	r2, #36	; 0x24
 800f7b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	68da      	ldr	r2, [r3, #12]
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	681b      	ldr	r3, [r3, #0]
 800f7c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800f7c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800f7c8:	6878      	ldr	r0, [r7, #4]
 800f7ca:	f000 f829 	bl	800f820 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	681b      	ldr	r3, [r3, #0]
 800f7d2:	691a      	ldr	r2, [r3, #16]
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f7dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	695a      	ldr	r2, [r3, #20]
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f7ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	68da      	ldr	r2, [r3, #12]
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	681b      	ldr	r3, [r3, #0]
 800f7f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800f7fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	2200      	movs	r2, #0
 800f802:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	2220      	movs	r2, #32
 800f808:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	2220      	movs	r2, #32
 800f810:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800f814:	2300      	movs	r3, #0
}
 800f816:	4618      	mov	r0, r3
 800f818:	3708      	adds	r7, #8
 800f81a:	46bd      	mov	sp, r7
 800f81c:	bd80      	pop	{r7, pc}
	...

0800f820 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f824:	b085      	sub	sp, #20
 800f826:	af00      	add	r7, sp, #0
 800f828:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	681b      	ldr	r3, [r3, #0]
 800f82e:	691b      	ldr	r3, [r3, #16]
 800f830:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	68da      	ldr	r2, [r3, #12]
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	681b      	ldr	r3, [r3, #0]
 800f83c:	430a      	orrs	r2, r1
 800f83e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	689a      	ldr	r2, [r3, #8]
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	691b      	ldr	r3, [r3, #16]
 800f848:	431a      	orrs	r2, r3
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	695b      	ldr	r3, [r3, #20]
 800f84e:	431a      	orrs	r2, r3
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	69db      	ldr	r3, [r3, #28]
 800f854:	4313      	orrs	r3, r2
 800f856:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	68db      	ldr	r3, [r3, #12]
 800f85e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800f862:	f023 030c 	bic.w	r3, r3, #12
 800f866:	687a      	ldr	r2, [r7, #4]
 800f868:	6812      	ldr	r2, [r2, #0]
 800f86a:	68f9      	ldr	r1, [r7, #12]
 800f86c:	430b      	orrs	r3, r1
 800f86e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	681b      	ldr	r3, [r3, #0]
 800f874:	695b      	ldr	r3, [r3, #20]
 800f876:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	699a      	ldr	r2, [r3, #24]
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	430a      	orrs	r2, r1
 800f884:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	69db      	ldr	r3, [r3, #28]
 800f88a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f88e:	f040 818b 	bne.w	800fba8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	4ac1      	ldr	r2, [pc, #772]	; (800fb9c <UART_SetConfig+0x37c>)
 800f898:	4293      	cmp	r3, r2
 800f89a:	d005      	beq.n	800f8a8 <UART_SetConfig+0x88>
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	4abf      	ldr	r2, [pc, #764]	; (800fba0 <UART_SetConfig+0x380>)
 800f8a2:	4293      	cmp	r3, r2
 800f8a4:	f040 80bd 	bne.w	800fa22 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800f8a8:	f7fc fbcc 	bl	800c044 <HAL_RCC_GetPCLK2Freq>
 800f8ac:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800f8ae:	68bb      	ldr	r3, [r7, #8]
 800f8b0:	461d      	mov	r5, r3
 800f8b2:	f04f 0600 	mov.w	r6, #0
 800f8b6:	46a8      	mov	r8, r5
 800f8b8:	46b1      	mov	r9, r6
 800f8ba:	eb18 0308 	adds.w	r3, r8, r8
 800f8be:	eb49 0409 	adc.w	r4, r9, r9
 800f8c2:	4698      	mov	r8, r3
 800f8c4:	46a1      	mov	r9, r4
 800f8c6:	eb18 0805 	adds.w	r8, r8, r5
 800f8ca:	eb49 0906 	adc.w	r9, r9, r6
 800f8ce:	f04f 0100 	mov.w	r1, #0
 800f8d2:	f04f 0200 	mov.w	r2, #0
 800f8d6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800f8da:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800f8de:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800f8e2:	4688      	mov	r8, r1
 800f8e4:	4691      	mov	r9, r2
 800f8e6:	eb18 0005 	adds.w	r0, r8, r5
 800f8ea:	eb49 0106 	adc.w	r1, r9, r6
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	685b      	ldr	r3, [r3, #4]
 800f8f2:	461d      	mov	r5, r3
 800f8f4:	f04f 0600 	mov.w	r6, #0
 800f8f8:	196b      	adds	r3, r5, r5
 800f8fa:	eb46 0406 	adc.w	r4, r6, r6
 800f8fe:	461a      	mov	r2, r3
 800f900:	4623      	mov	r3, r4
 800f902:	f7f1 f9d9 	bl	8000cb8 <__aeabi_uldivmod>
 800f906:	4603      	mov	r3, r0
 800f908:	460c      	mov	r4, r1
 800f90a:	461a      	mov	r2, r3
 800f90c:	4ba5      	ldr	r3, [pc, #660]	; (800fba4 <UART_SetConfig+0x384>)
 800f90e:	fba3 2302 	umull	r2, r3, r3, r2
 800f912:	095b      	lsrs	r3, r3, #5
 800f914:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800f918:	68bb      	ldr	r3, [r7, #8]
 800f91a:	461d      	mov	r5, r3
 800f91c:	f04f 0600 	mov.w	r6, #0
 800f920:	46a9      	mov	r9, r5
 800f922:	46b2      	mov	sl, r6
 800f924:	eb19 0309 	adds.w	r3, r9, r9
 800f928:	eb4a 040a 	adc.w	r4, sl, sl
 800f92c:	4699      	mov	r9, r3
 800f92e:	46a2      	mov	sl, r4
 800f930:	eb19 0905 	adds.w	r9, r9, r5
 800f934:	eb4a 0a06 	adc.w	sl, sl, r6
 800f938:	f04f 0100 	mov.w	r1, #0
 800f93c:	f04f 0200 	mov.w	r2, #0
 800f940:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f944:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f948:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f94c:	4689      	mov	r9, r1
 800f94e:	4692      	mov	sl, r2
 800f950:	eb19 0005 	adds.w	r0, r9, r5
 800f954:	eb4a 0106 	adc.w	r1, sl, r6
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	685b      	ldr	r3, [r3, #4]
 800f95c:	461d      	mov	r5, r3
 800f95e:	f04f 0600 	mov.w	r6, #0
 800f962:	196b      	adds	r3, r5, r5
 800f964:	eb46 0406 	adc.w	r4, r6, r6
 800f968:	461a      	mov	r2, r3
 800f96a:	4623      	mov	r3, r4
 800f96c:	f7f1 f9a4 	bl	8000cb8 <__aeabi_uldivmod>
 800f970:	4603      	mov	r3, r0
 800f972:	460c      	mov	r4, r1
 800f974:	461a      	mov	r2, r3
 800f976:	4b8b      	ldr	r3, [pc, #556]	; (800fba4 <UART_SetConfig+0x384>)
 800f978:	fba3 1302 	umull	r1, r3, r3, r2
 800f97c:	095b      	lsrs	r3, r3, #5
 800f97e:	2164      	movs	r1, #100	; 0x64
 800f980:	fb01 f303 	mul.w	r3, r1, r3
 800f984:	1ad3      	subs	r3, r2, r3
 800f986:	00db      	lsls	r3, r3, #3
 800f988:	3332      	adds	r3, #50	; 0x32
 800f98a:	4a86      	ldr	r2, [pc, #536]	; (800fba4 <UART_SetConfig+0x384>)
 800f98c:	fba2 2303 	umull	r2, r3, r2, r3
 800f990:	095b      	lsrs	r3, r3, #5
 800f992:	005b      	lsls	r3, r3, #1
 800f994:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800f998:	4498      	add	r8, r3
 800f99a:	68bb      	ldr	r3, [r7, #8]
 800f99c:	461d      	mov	r5, r3
 800f99e:	f04f 0600 	mov.w	r6, #0
 800f9a2:	46a9      	mov	r9, r5
 800f9a4:	46b2      	mov	sl, r6
 800f9a6:	eb19 0309 	adds.w	r3, r9, r9
 800f9aa:	eb4a 040a 	adc.w	r4, sl, sl
 800f9ae:	4699      	mov	r9, r3
 800f9b0:	46a2      	mov	sl, r4
 800f9b2:	eb19 0905 	adds.w	r9, r9, r5
 800f9b6:	eb4a 0a06 	adc.w	sl, sl, r6
 800f9ba:	f04f 0100 	mov.w	r1, #0
 800f9be:	f04f 0200 	mov.w	r2, #0
 800f9c2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800f9c6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800f9ca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800f9ce:	4689      	mov	r9, r1
 800f9d0:	4692      	mov	sl, r2
 800f9d2:	eb19 0005 	adds.w	r0, r9, r5
 800f9d6:	eb4a 0106 	adc.w	r1, sl, r6
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	685b      	ldr	r3, [r3, #4]
 800f9de:	461d      	mov	r5, r3
 800f9e0:	f04f 0600 	mov.w	r6, #0
 800f9e4:	196b      	adds	r3, r5, r5
 800f9e6:	eb46 0406 	adc.w	r4, r6, r6
 800f9ea:	461a      	mov	r2, r3
 800f9ec:	4623      	mov	r3, r4
 800f9ee:	f7f1 f963 	bl	8000cb8 <__aeabi_uldivmod>
 800f9f2:	4603      	mov	r3, r0
 800f9f4:	460c      	mov	r4, r1
 800f9f6:	461a      	mov	r2, r3
 800f9f8:	4b6a      	ldr	r3, [pc, #424]	; (800fba4 <UART_SetConfig+0x384>)
 800f9fa:	fba3 1302 	umull	r1, r3, r3, r2
 800f9fe:	095b      	lsrs	r3, r3, #5
 800fa00:	2164      	movs	r1, #100	; 0x64
 800fa02:	fb01 f303 	mul.w	r3, r1, r3
 800fa06:	1ad3      	subs	r3, r2, r3
 800fa08:	00db      	lsls	r3, r3, #3
 800fa0a:	3332      	adds	r3, #50	; 0x32
 800fa0c:	4a65      	ldr	r2, [pc, #404]	; (800fba4 <UART_SetConfig+0x384>)
 800fa0e:	fba2 2303 	umull	r2, r3, r2, r3
 800fa12:	095b      	lsrs	r3, r3, #5
 800fa14:	f003 0207 	and.w	r2, r3, #7
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	681b      	ldr	r3, [r3, #0]
 800fa1c:	4442      	add	r2, r8
 800fa1e:	609a      	str	r2, [r3, #8]
 800fa20:	e26f      	b.n	800ff02 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800fa22:	f7fc fafb 	bl	800c01c <HAL_RCC_GetPCLK1Freq>
 800fa26:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800fa28:	68bb      	ldr	r3, [r7, #8]
 800fa2a:	461d      	mov	r5, r3
 800fa2c:	f04f 0600 	mov.w	r6, #0
 800fa30:	46a8      	mov	r8, r5
 800fa32:	46b1      	mov	r9, r6
 800fa34:	eb18 0308 	adds.w	r3, r8, r8
 800fa38:	eb49 0409 	adc.w	r4, r9, r9
 800fa3c:	4698      	mov	r8, r3
 800fa3e:	46a1      	mov	r9, r4
 800fa40:	eb18 0805 	adds.w	r8, r8, r5
 800fa44:	eb49 0906 	adc.w	r9, r9, r6
 800fa48:	f04f 0100 	mov.w	r1, #0
 800fa4c:	f04f 0200 	mov.w	r2, #0
 800fa50:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800fa54:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800fa58:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800fa5c:	4688      	mov	r8, r1
 800fa5e:	4691      	mov	r9, r2
 800fa60:	eb18 0005 	adds.w	r0, r8, r5
 800fa64:	eb49 0106 	adc.w	r1, r9, r6
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	685b      	ldr	r3, [r3, #4]
 800fa6c:	461d      	mov	r5, r3
 800fa6e:	f04f 0600 	mov.w	r6, #0
 800fa72:	196b      	adds	r3, r5, r5
 800fa74:	eb46 0406 	adc.w	r4, r6, r6
 800fa78:	461a      	mov	r2, r3
 800fa7a:	4623      	mov	r3, r4
 800fa7c:	f7f1 f91c 	bl	8000cb8 <__aeabi_uldivmod>
 800fa80:	4603      	mov	r3, r0
 800fa82:	460c      	mov	r4, r1
 800fa84:	461a      	mov	r2, r3
 800fa86:	4b47      	ldr	r3, [pc, #284]	; (800fba4 <UART_SetConfig+0x384>)
 800fa88:	fba3 2302 	umull	r2, r3, r3, r2
 800fa8c:	095b      	lsrs	r3, r3, #5
 800fa8e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800fa92:	68bb      	ldr	r3, [r7, #8]
 800fa94:	461d      	mov	r5, r3
 800fa96:	f04f 0600 	mov.w	r6, #0
 800fa9a:	46a9      	mov	r9, r5
 800fa9c:	46b2      	mov	sl, r6
 800fa9e:	eb19 0309 	adds.w	r3, r9, r9
 800faa2:	eb4a 040a 	adc.w	r4, sl, sl
 800faa6:	4699      	mov	r9, r3
 800faa8:	46a2      	mov	sl, r4
 800faaa:	eb19 0905 	adds.w	r9, r9, r5
 800faae:	eb4a 0a06 	adc.w	sl, sl, r6
 800fab2:	f04f 0100 	mov.w	r1, #0
 800fab6:	f04f 0200 	mov.w	r2, #0
 800faba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800fabe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800fac2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800fac6:	4689      	mov	r9, r1
 800fac8:	4692      	mov	sl, r2
 800faca:	eb19 0005 	adds.w	r0, r9, r5
 800face:	eb4a 0106 	adc.w	r1, sl, r6
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	685b      	ldr	r3, [r3, #4]
 800fad6:	461d      	mov	r5, r3
 800fad8:	f04f 0600 	mov.w	r6, #0
 800fadc:	196b      	adds	r3, r5, r5
 800fade:	eb46 0406 	adc.w	r4, r6, r6
 800fae2:	461a      	mov	r2, r3
 800fae4:	4623      	mov	r3, r4
 800fae6:	f7f1 f8e7 	bl	8000cb8 <__aeabi_uldivmod>
 800faea:	4603      	mov	r3, r0
 800faec:	460c      	mov	r4, r1
 800faee:	461a      	mov	r2, r3
 800faf0:	4b2c      	ldr	r3, [pc, #176]	; (800fba4 <UART_SetConfig+0x384>)
 800faf2:	fba3 1302 	umull	r1, r3, r3, r2
 800faf6:	095b      	lsrs	r3, r3, #5
 800faf8:	2164      	movs	r1, #100	; 0x64
 800fafa:	fb01 f303 	mul.w	r3, r1, r3
 800fafe:	1ad3      	subs	r3, r2, r3
 800fb00:	00db      	lsls	r3, r3, #3
 800fb02:	3332      	adds	r3, #50	; 0x32
 800fb04:	4a27      	ldr	r2, [pc, #156]	; (800fba4 <UART_SetConfig+0x384>)
 800fb06:	fba2 2303 	umull	r2, r3, r2, r3
 800fb0a:	095b      	lsrs	r3, r3, #5
 800fb0c:	005b      	lsls	r3, r3, #1
 800fb0e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800fb12:	4498      	add	r8, r3
 800fb14:	68bb      	ldr	r3, [r7, #8]
 800fb16:	461d      	mov	r5, r3
 800fb18:	f04f 0600 	mov.w	r6, #0
 800fb1c:	46a9      	mov	r9, r5
 800fb1e:	46b2      	mov	sl, r6
 800fb20:	eb19 0309 	adds.w	r3, r9, r9
 800fb24:	eb4a 040a 	adc.w	r4, sl, sl
 800fb28:	4699      	mov	r9, r3
 800fb2a:	46a2      	mov	sl, r4
 800fb2c:	eb19 0905 	adds.w	r9, r9, r5
 800fb30:	eb4a 0a06 	adc.w	sl, sl, r6
 800fb34:	f04f 0100 	mov.w	r1, #0
 800fb38:	f04f 0200 	mov.w	r2, #0
 800fb3c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800fb40:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800fb44:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800fb48:	4689      	mov	r9, r1
 800fb4a:	4692      	mov	sl, r2
 800fb4c:	eb19 0005 	adds.w	r0, r9, r5
 800fb50:	eb4a 0106 	adc.w	r1, sl, r6
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	685b      	ldr	r3, [r3, #4]
 800fb58:	461d      	mov	r5, r3
 800fb5a:	f04f 0600 	mov.w	r6, #0
 800fb5e:	196b      	adds	r3, r5, r5
 800fb60:	eb46 0406 	adc.w	r4, r6, r6
 800fb64:	461a      	mov	r2, r3
 800fb66:	4623      	mov	r3, r4
 800fb68:	f7f1 f8a6 	bl	8000cb8 <__aeabi_uldivmod>
 800fb6c:	4603      	mov	r3, r0
 800fb6e:	460c      	mov	r4, r1
 800fb70:	461a      	mov	r2, r3
 800fb72:	4b0c      	ldr	r3, [pc, #48]	; (800fba4 <UART_SetConfig+0x384>)
 800fb74:	fba3 1302 	umull	r1, r3, r3, r2
 800fb78:	095b      	lsrs	r3, r3, #5
 800fb7a:	2164      	movs	r1, #100	; 0x64
 800fb7c:	fb01 f303 	mul.w	r3, r1, r3
 800fb80:	1ad3      	subs	r3, r2, r3
 800fb82:	00db      	lsls	r3, r3, #3
 800fb84:	3332      	adds	r3, #50	; 0x32
 800fb86:	4a07      	ldr	r2, [pc, #28]	; (800fba4 <UART_SetConfig+0x384>)
 800fb88:	fba2 2303 	umull	r2, r3, r2, r3
 800fb8c:	095b      	lsrs	r3, r3, #5
 800fb8e:	f003 0207 	and.w	r2, r3, #7
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	681b      	ldr	r3, [r3, #0]
 800fb96:	4442      	add	r2, r8
 800fb98:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800fb9a:	e1b2      	b.n	800ff02 <UART_SetConfig+0x6e2>
 800fb9c:	40011000 	.word	0x40011000
 800fba0:	40011400 	.word	0x40011400
 800fba4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	681b      	ldr	r3, [r3, #0]
 800fbac:	4ad7      	ldr	r2, [pc, #860]	; (800ff0c <UART_SetConfig+0x6ec>)
 800fbae:	4293      	cmp	r3, r2
 800fbb0:	d005      	beq.n	800fbbe <UART_SetConfig+0x39e>
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	681b      	ldr	r3, [r3, #0]
 800fbb6:	4ad6      	ldr	r2, [pc, #856]	; (800ff10 <UART_SetConfig+0x6f0>)
 800fbb8:	4293      	cmp	r3, r2
 800fbba:	f040 80d1 	bne.w	800fd60 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800fbbe:	f7fc fa41 	bl	800c044 <HAL_RCC_GetPCLK2Freq>
 800fbc2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800fbc4:	68bb      	ldr	r3, [r7, #8]
 800fbc6:	469a      	mov	sl, r3
 800fbc8:	f04f 0b00 	mov.w	fp, #0
 800fbcc:	46d0      	mov	r8, sl
 800fbce:	46d9      	mov	r9, fp
 800fbd0:	eb18 0308 	adds.w	r3, r8, r8
 800fbd4:	eb49 0409 	adc.w	r4, r9, r9
 800fbd8:	4698      	mov	r8, r3
 800fbda:	46a1      	mov	r9, r4
 800fbdc:	eb18 080a 	adds.w	r8, r8, sl
 800fbe0:	eb49 090b 	adc.w	r9, r9, fp
 800fbe4:	f04f 0100 	mov.w	r1, #0
 800fbe8:	f04f 0200 	mov.w	r2, #0
 800fbec:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800fbf0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800fbf4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800fbf8:	4688      	mov	r8, r1
 800fbfa:	4691      	mov	r9, r2
 800fbfc:	eb1a 0508 	adds.w	r5, sl, r8
 800fc00:	eb4b 0609 	adc.w	r6, fp, r9
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	685b      	ldr	r3, [r3, #4]
 800fc08:	4619      	mov	r1, r3
 800fc0a:	f04f 0200 	mov.w	r2, #0
 800fc0e:	f04f 0300 	mov.w	r3, #0
 800fc12:	f04f 0400 	mov.w	r4, #0
 800fc16:	0094      	lsls	r4, r2, #2
 800fc18:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800fc1c:	008b      	lsls	r3, r1, #2
 800fc1e:	461a      	mov	r2, r3
 800fc20:	4623      	mov	r3, r4
 800fc22:	4628      	mov	r0, r5
 800fc24:	4631      	mov	r1, r6
 800fc26:	f7f1 f847 	bl	8000cb8 <__aeabi_uldivmod>
 800fc2a:	4603      	mov	r3, r0
 800fc2c:	460c      	mov	r4, r1
 800fc2e:	461a      	mov	r2, r3
 800fc30:	4bb8      	ldr	r3, [pc, #736]	; (800ff14 <UART_SetConfig+0x6f4>)
 800fc32:	fba3 2302 	umull	r2, r3, r3, r2
 800fc36:	095b      	lsrs	r3, r3, #5
 800fc38:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800fc3c:	68bb      	ldr	r3, [r7, #8]
 800fc3e:	469b      	mov	fp, r3
 800fc40:	f04f 0c00 	mov.w	ip, #0
 800fc44:	46d9      	mov	r9, fp
 800fc46:	46e2      	mov	sl, ip
 800fc48:	eb19 0309 	adds.w	r3, r9, r9
 800fc4c:	eb4a 040a 	adc.w	r4, sl, sl
 800fc50:	4699      	mov	r9, r3
 800fc52:	46a2      	mov	sl, r4
 800fc54:	eb19 090b 	adds.w	r9, r9, fp
 800fc58:	eb4a 0a0c 	adc.w	sl, sl, ip
 800fc5c:	f04f 0100 	mov.w	r1, #0
 800fc60:	f04f 0200 	mov.w	r2, #0
 800fc64:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800fc68:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800fc6c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800fc70:	4689      	mov	r9, r1
 800fc72:	4692      	mov	sl, r2
 800fc74:	eb1b 0509 	adds.w	r5, fp, r9
 800fc78:	eb4c 060a 	adc.w	r6, ip, sl
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	685b      	ldr	r3, [r3, #4]
 800fc80:	4619      	mov	r1, r3
 800fc82:	f04f 0200 	mov.w	r2, #0
 800fc86:	f04f 0300 	mov.w	r3, #0
 800fc8a:	f04f 0400 	mov.w	r4, #0
 800fc8e:	0094      	lsls	r4, r2, #2
 800fc90:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800fc94:	008b      	lsls	r3, r1, #2
 800fc96:	461a      	mov	r2, r3
 800fc98:	4623      	mov	r3, r4
 800fc9a:	4628      	mov	r0, r5
 800fc9c:	4631      	mov	r1, r6
 800fc9e:	f7f1 f80b 	bl	8000cb8 <__aeabi_uldivmod>
 800fca2:	4603      	mov	r3, r0
 800fca4:	460c      	mov	r4, r1
 800fca6:	461a      	mov	r2, r3
 800fca8:	4b9a      	ldr	r3, [pc, #616]	; (800ff14 <UART_SetConfig+0x6f4>)
 800fcaa:	fba3 1302 	umull	r1, r3, r3, r2
 800fcae:	095b      	lsrs	r3, r3, #5
 800fcb0:	2164      	movs	r1, #100	; 0x64
 800fcb2:	fb01 f303 	mul.w	r3, r1, r3
 800fcb6:	1ad3      	subs	r3, r2, r3
 800fcb8:	011b      	lsls	r3, r3, #4
 800fcba:	3332      	adds	r3, #50	; 0x32
 800fcbc:	4a95      	ldr	r2, [pc, #596]	; (800ff14 <UART_SetConfig+0x6f4>)
 800fcbe:	fba2 2303 	umull	r2, r3, r2, r3
 800fcc2:	095b      	lsrs	r3, r3, #5
 800fcc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fcc8:	4498      	add	r8, r3
 800fcca:	68bb      	ldr	r3, [r7, #8]
 800fccc:	469b      	mov	fp, r3
 800fcce:	f04f 0c00 	mov.w	ip, #0
 800fcd2:	46d9      	mov	r9, fp
 800fcd4:	46e2      	mov	sl, ip
 800fcd6:	eb19 0309 	adds.w	r3, r9, r9
 800fcda:	eb4a 040a 	adc.w	r4, sl, sl
 800fcde:	4699      	mov	r9, r3
 800fce0:	46a2      	mov	sl, r4
 800fce2:	eb19 090b 	adds.w	r9, r9, fp
 800fce6:	eb4a 0a0c 	adc.w	sl, sl, ip
 800fcea:	f04f 0100 	mov.w	r1, #0
 800fcee:	f04f 0200 	mov.w	r2, #0
 800fcf2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800fcf6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800fcfa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800fcfe:	4689      	mov	r9, r1
 800fd00:	4692      	mov	sl, r2
 800fd02:	eb1b 0509 	adds.w	r5, fp, r9
 800fd06:	eb4c 060a 	adc.w	r6, ip, sl
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	685b      	ldr	r3, [r3, #4]
 800fd0e:	4619      	mov	r1, r3
 800fd10:	f04f 0200 	mov.w	r2, #0
 800fd14:	f04f 0300 	mov.w	r3, #0
 800fd18:	f04f 0400 	mov.w	r4, #0
 800fd1c:	0094      	lsls	r4, r2, #2
 800fd1e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800fd22:	008b      	lsls	r3, r1, #2
 800fd24:	461a      	mov	r2, r3
 800fd26:	4623      	mov	r3, r4
 800fd28:	4628      	mov	r0, r5
 800fd2a:	4631      	mov	r1, r6
 800fd2c:	f7f0 ffc4 	bl	8000cb8 <__aeabi_uldivmod>
 800fd30:	4603      	mov	r3, r0
 800fd32:	460c      	mov	r4, r1
 800fd34:	461a      	mov	r2, r3
 800fd36:	4b77      	ldr	r3, [pc, #476]	; (800ff14 <UART_SetConfig+0x6f4>)
 800fd38:	fba3 1302 	umull	r1, r3, r3, r2
 800fd3c:	095b      	lsrs	r3, r3, #5
 800fd3e:	2164      	movs	r1, #100	; 0x64
 800fd40:	fb01 f303 	mul.w	r3, r1, r3
 800fd44:	1ad3      	subs	r3, r2, r3
 800fd46:	011b      	lsls	r3, r3, #4
 800fd48:	3332      	adds	r3, #50	; 0x32
 800fd4a:	4a72      	ldr	r2, [pc, #456]	; (800ff14 <UART_SetConfig+0x6f4>)
 800fd4c:	fba2 2303 	umull	r2, r3, r2, r3
 800fd50:	095b      	lsrs	r3, r3, #5
 800fd52:	f003 020f 	and.w	r2, r3, #15
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	4442      	add	r2, r8
 800fd5c:	609a      	str	r2, [r3, #8]
 800fd5e:	e0d0      	b.n	800ff02 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800fd60:	f7fc f95c 	bl	800c01c <HAL_RCC_GetPCLK1Freq>
 800fd64:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800fd66:	68bb      	ldr	r3, [r7, #8]
 800fd68:	469a      	mov	sl, r3
 800fd6a:	f04f 0b00 	mov.w	fp, #0
 800fd6e:	46d0      	mov	r8, sl
 800fd70:	46d9      	mov	r9, fp
 800fd72:	eb18 0308 	adds.w	r3, r8, r8
 800fd76:	eb49 0409 	adc.w	r4, r9, r9
 800fd7a:	4698      	mov	r8, r3
 800fd7c:	46a1      	mov	r9, r4
 800fd7e:	eb18 080a 	adds.w	r8, r8, sl
 800fd82:	eb49 090b 	adc.w	r9, r9, fp
 800fd86:	f04f 0100 	mov.w	r1, #0
 800fd8a:	f04f 0200 	mov.w	r2, #0
 800fd8e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800fd92:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800fd96:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800fd9a:	4688      	mov	r8, r1
 800fd9c:	4691      	mov	r9, r2
 800fd9e:	eb1a 0508 	adds.w	r5, sl, r8
 800fda2:	eb4b 0609 	adc.w	r6, fp, r9
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	685b      	ldr	r3, [r3, #4]
 800fdaa:	4619      	mov	r1, r3
 800fdac:	f04f 0200 	mov.w	r2, #0
 800fdb0:	f04f 0300 	mov.w	r3, #0
 800fdb4:	f04f 0400 	mov.w	r4, #0
 800fdb8:	0094      	lsls	r4, r2, #2
 800fdba:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800fdbe:	008b      	lsls	r3, r1, #2
 800fdc0:	461a      	mov	r2, r3
 800fdc2:	4623      	mov	r3, r4
 800fdc4:	4628      	mov	r0, r5
 800fdc6:	4631      	mov	r1, r6
 800fdc8:	f7f0 ff76 	bl	8000cb8 <__aeabi_uldivmod>
 800fdcc:	4603      	mov	r3, r0
 800fdce:	460c      	mov	r4, r1
 800fdd0:	461a      	mov	r2, r3
 800fdd2:	4b50      	ldr	r3, [pc, #320]	; (800ff14 <UART_SetConfig+0x6f4>)
 800fdd4:	fba3 2302 	umull	r2, r3, r3, r2
 800fdd8:	095b      	lsrs	r3, r3, #5
 800fdda:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800fdde:	68bb      	ldr	r3, [r7, #8]
 800fde0:	469b      	mov	fp, r3
 800fde2:	f04f 0c00 	mov.w	ip, #0
 800fde6:	46d9      	mov	r9, fp
 800fde8:	46e2      	mov	sl, ip
 800fdea:	eb19 0309 	adds.w	r3, r9, r9
 800fdee:	eb4a 040a 	adc.w	r4, sl, sl
 800fdf2:	4699      	mov	r9, r3
 800fdf4:	46a2      	mov	sl, r4
 800fdf6:	eb19 090b 	adds.w	r9, r9, fp
 800fdfa:	eb4a 0a0c 	adc.w	sl, sl, ip
 800fdfe:	f04f 0100 	mov.w	r1, #0
 800fe02:	f04f 0200 	mov.w	r2, #0
 800fe06:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800fe0a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800fe0e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800fe12:	4689      	mov	r9, r1
 800fe14:	4692      	mov	sl, r2
 800fe16:	eb1b 0509 	adds.w	r5, fp, r9
 800fe1a:	eb4c 060a 	adc.w	r6, ip, sl
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	685b      	ldr	r3, [r3, #4]
 800fe22:	4619      	mov	r1, r3
 800fe24:	f04f 0200 	mov.w	r2, #0
 800fe28:	f04f 0300 	mov.w	r3, #0
 800fe2c:	f04f 0400 	mov.w	r4, #0
 800fe30:	0094      	lsls	r4, r2, #2
 800fe32:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800fe36:	008b      	lsls	r3, r1, #2
 800fe38:	461a      	mov	r2, r3
 800fe3a:	4623      	mov	r3, r4
 800fe3c:	4628      	mov	r0, r5
 800fe3e:	4631      	mov	r1, r6
 800fe40:	f7f0 ff3a 	bl	8000cb8 <__aeabi_uldivmod>
 800fe44:	4603      	mov	r3, r0
 800fe46:	460c      	mov	r4, r1
 800fe48:	461a      	mov	r2, r3
 800fe4a:	4b32      	ldr	r3, [pc, #200]	; (800ff14 <UART_SetConfig+0x6f4>)
 800fe4c:	fba3 1302 	umull	r1, r3, r3, r2
 800fe50:	095b      	lsrs	r3, r3, #5
 800fe52:	2164      	movs	r1, #100	; 0x64
 800fe54:	fb01 f303 	mul.w	r3, r1, r3
 800fe58:	1ad3      	subs	r3, r2, r3
 800fe5a:	011b      	lsls	r3, r3, #4
 800fe5c:	3332      	adds	r3, #50	; 0x32
 800fe5e:	4a2d      	ldr	r2, [pc, #180]	; (800ff14 <UART_SetConfig+0x6f4>)
 800fe60:	fba2 2303 	umull	r2, r3, r2, r3
 800fe64:	095b      	lsrs	r3, r3, #5
 800fe66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fe6a:	4498      	add	r8, r3
 800fe6c:	68bb      	ldr	r3, [r7, #8]
 800fe6e:	469b      	mov	fp, r3
 800fe70:	f04f 0c00 	mov.w	ip, #0
 800fe74:	46d9      	mov	r9, fp
 800fe76:	46e2      	mov	sl, ip
 800fe78:	eb19 0309 	adds.w	r3, r9, r9
 800fe7c:	eb4a 040a 	adc.w	r4, sl, sl
 800fe80:	4699      	mov	r9, r3
 800fe82:	46a2      	mov	sl, r4
 800fe84:	eb19 090b 	adds.w	r9, r9, fp
 800fe88:	eb4a 0a0c 	adc.w	sl, sl, ip
 800fe8c:	f04f 0100 	mov.w	r1, #0
 800fe90:	f04f 0200 	mov.w	r2, #0
 800fe94:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800fe98:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800fe9c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800fea0:	4689      	mov	r9, r1
 800fea2:	4692      	mov	sl, r2
 800fea4:	eb1b 0509 	adds.w	r5, fp, r9
 800fea8:	eb4c 060a 	adc.w	r6, ip, sl
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	685b      	ldr	r3, [r3, #4]
 800feb0:	4619      	mov	r1, r3
 800feb2:	f04f 0200 	mov.w	r2, #0
 800feb6:	f04f 0300 	mov.w	r3, #0
 800feba:	f04f 0400 	mov.w	r4, #0
 800febe:	0094      	lsls	r4, r2, #2
 800fec0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800fec4:	008b      	lsls	r3, r1, #2
 800fec6:	461a      	mov	r2, r3
 800fec8:	4623      	mov	r3, r4
 800feca:	4628      	mov	r0, r5
 800fecc:	4631      	mov	r1, r6
 800fece:	f7f0 fef3 	bl	8000cb8 <__aeabi_uldivmod>
 800fed2:	4603      	mov	r3, r0
 800fed4:	460c      	mov	r4, r1
 800fed6:	461a      	mov	r2, r3
 800fed8:	4b0e      	ldr	r3, [pc, #56]	; (800ff14 <UART_SetConfig+0x6f4>)
 800feda:	fba3 1302 	umull	r1, r3, r3, r2
 800fede:	095b      	lsrs	r3, r3, #5
 800fee0:	2164      	movs	r1, #100	; 0x64
 800fee2:	fb01 f303 	mul.w	r3, r1, r3
 800fee6:	1ad3      	subs	r3, r2, r3
 800fee8:	011b      	lsls	r3, r3, #4
 800feea:	3332      	adds	r3, #50	; 0x32
 800feec:	4a09      	ldr	r2, [pc, #36]	; (800ff14 <UART_SetConfig+0x6f4>)
 800feee:	fba2 2303 	umull	r2, r3, r2, r3
 800fef2:	095b      	lsrs	r3, r3, #5
 800fef4:	f003 020f 	and.w	r2, r3, #15
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	681b      	ldr	r3, [r3, #0]
 800fefc:	4442      	add	r2, r8
 800fefe:	609a      	str	r2, [r3, #8]
}
 800ff00:	e7ff      	b.n	800ff02 <UART_SetConfig+0x6e2>
 800ff02:	bf00      	nop
 800ff04:	3714      	adds	r7, #20
 800ff06:	46bd      	mov	sp, r7
 800ff08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff0c:	40011000 	.word	0x40011000
 800ff10:	40011400 	.word	0x40011400
 800ff14:	51eb851f 	.word	0x51eb851f

0800ff18 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800ff18:	b084      	sub	sp, #16
 800ff1a:	b480      	push	{r7}
 800ff1c:	b085      	sub	sp, #20
 800ff1e:	af00      	add	r7, sp, #0
 800ff20:	6078      	str	r0, [r7, #4]
 800ff22:	f107 001c 	add.w	r0, r7, #28
 800ff26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800ff2a:	2300      	movs	r3, #0
 800ff2c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800ff2e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800ff30:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800ff32:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800ff34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800ff36:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800ff38:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800ff3a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800ff3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800ff3e:	431a      	orrs	r2, r3
             Init.ClockDiv
 800ff40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800ff42:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800ff44:	68fa      	ldr	r2, [r7, #12]
 800ff46:	4313      	orrs	r3, r2
 800ff48:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	685b      	ldr	r3, [r3, #4]
 800ff4e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800ff52:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ff56:	68fa      	ldr	r2, [r7, #12]
 800ff58:	431a      	orrs	r2, r3
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800ff5e:	2300      	movs	r3, #0
}
 800ff60:	4618      	mov	r0, r3
 800ff62:	3714      	adds	r7, #20
 800ff64:	46bd      	mov	sp, r7
 800ff66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff6a:	b004      	add	sp, #16
 800ff6c:	4770      	bx	lr

0800ff6e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800ff6e:	b480      	push	{r7}
 800ff70:	b083      	sub	sp, #12
 800ff72:	af00      	add	r7, sp, #0
 800ff74:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800ff7c:	4618      	mov	r0, r3
 800ff7e:	370c      	adds	r7, #12
 800ff80:	46bd      	mov	sp, r7
 800ff82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff86:	4770      	bx	lr

0800ff88 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800ff88:	b480      	push	{r7}
 800ff8a:	b083      	sub	sp, #12
 800ff8c:	af00      	add	r7, sp, #0
 800ff8e:	6078      	str	r0, [r7, #4]
 800ff90:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800ff92:	683b      	ldr	r3, [r7, #0]
 800ff94:	681a      	ldr	r2, [r3, #0]
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ff9c:	2300      	movs	r3, #0
}
 800ff9e:	4618      	mov	r0, r3
 800ffa0:	370c      	adds	r7, #12
 800ffa2:	46bd      	mov	sp, r7
 800ffa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffa8:	4770      	bx	lr

0800ffaa <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800ffaa:	b580      	push	{r7, lr}
 800ffac:	b082      	sub	sp, #8
 800ffae:	af00      	add	r7, sp, #0
 800ffb0:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	2203      	movs	r2, #3
 800ffb6:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800ffb8:	2002      	movs	r0, #2
 800ffba:	f7f9 fbdd 	bl	8009778 <HAL_Delay>
  
  return HAL_OK;
 800ffbe:	2300      	movs	r3, #0
}
 800ffc0:	4618      	mov	r0, r3
 800ffc2:	3708      	adds	r7, #8
 800ffc4:	46bd      	mov	sp, r7
 800ffc6:	bd80      	pop	{r7, pc}

0800ffc8 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800ffc8:	b480      	push	{r7}
 800ffca:	b083      	sub	sp, #12
 800ffcc:	af00      	add	r7, sp, #0
 800ffce:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	f003 0303 	and.w	r3, r3, #3
}
 800ffd8:	4618      	mov	r0, r3
 800ffda:	370c      	adds	r7, #12
 800ffdc:	46bd      	mov	sp, r7
 800ffde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffe2:	4770      	bx	lr

0800ffe4 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800ffe4:	b480      	push	{r7}
 800ffe6:	b085      	sub	sp, #20
 800ffe8:	af00      	add	r7, sp, #0
 800ffea:	6078      	str	r0, [r7, #4]
 800ffec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ffee:	2300      	movs	r3, #0
 800fff0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800fff2:	683b      	ldr	r3, [r7, #0]
 800fff4:	681a      	ldr	r2, [r3, #0]
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800fffa:	683b      	ldr	r3, [r7, #0]
 800fffc:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800fffe:	683b      	ldr	r3, [r7, #0]
 8010000:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010002:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8010004:	683b      	ldr	r3, [r7, #0]
 8010006:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8010008:	431a      	orrs	r2, r3
                       Command->CPSM);
 801000a:	683b      	ldr	r3, [r7, #0]
 801000c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 801000e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8010010:	68fa      	ldr	r2, [r7, #12]
 8010012:	4313      	orrs	r3, r2
 8010014:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	68db      	ldr	r3, [r3, #12]
 801001a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801001e:	f023 030f 	bic.w	r3, r3, #15
 8010022:	68fa      	ldr	r2, [r7, #12]
 8010024:	431a      	orrs	r2, r3
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 801002a:	2300      	movs	r3, #0
}
 801002c:	4618      	mov	r0, r3
 801002e:	3714      	adds	r7, #20
 8010030:	46bd      	mov	sp, r7
 8010032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010036:	4770      	bx	lr

08010038 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8010038:	b480      	push	{r7}
 801003a:	b083      	sub	sp, #12
 801003c:	af00      	add	r7, sp, #0
 801003e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	691b      	ldr	r3, [r3, #16]
 8010044:	b2db      	uxtb	r3, r3
}
 8010046:	4618      	mov	r0, r3
 8010048:	370c      	adds	r7, #12
 801004a:	46bd      	mov	sp, r7
 801004c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010050:	4770      	bx	lr

08010052 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8010052:	b480      	push	{r7}
 8010054:	b085      	sub	sp, #20
 8010056:	af00      	add	r7, sp, #0
 8010058:	6078      	str	r0, [r7, #4]
 801005a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	3314      	adds	r3, #20
 8010060:	461a      	mov	r2, r3
 8010062:	683b      	ldr	r3, [r7, #0]
 8010064:	4413      	add	r3, r2
 8010066:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8010068:	68fb      	ldr	r3, [r7, #12]
 801006a:	681b      	ldr	r3, [r3, #0]
}  
 801006c:	4618      	mov	r0, r3
 801006e:	3714      	adds	r7, #20
 8010070:	46bd      	mov	sp, r7
 8010072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010076:	4770      	bx	lr

08010078 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8010078:	b480      	push	{r7}
 801007a:	b085      	sub	sp, #20
 801007c:	af00      	add	r7, sp, #0
 801007e:	6078      	str	r0, [r7, #4]
 8010080:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8010082:	2300      	movs	r3, #0
 8010084:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8010086:	683b      	ldr	r3, [r7, #0]
 8010088:	681a      	ldr	r2, [r3, #0]
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 801008e:	683b      	ldr	r3, [r7, #0]
 8010090:	685a      	ldr	r2, [r3, #4]
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8010096:	683b      	ldr	r3, [r7, #0]
 8010098:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 801009a:	683b      	ldr	r3, [r7, #0]
 801009c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 801009e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80100a0:	683b      	ldr	r3, [r7, #0]
 80100a2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80100a4:	431a      	orrs	r2, r3
                       Data->DPSM);
 80100a6:	683b      	ldr	r3, [r7, #0]
 80100a8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80100aa:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80100ac:	68fa      	ldr	r2, [r7, #12]
 80100ae:	4313      	orrs	r3, r2
 80100b0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100b6:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80100ba:	68fb      	ldr	r3, [r7, #12]
 80100bc:	431a      	orrs	r2, r3
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80100c2:	2300      	movs	r3, #0

}
 80100c4:	4618      	mov	r0, r3
 80100c6:	3714      	adds	r7, #20
 80100c8:	46bd      	mov	sp, r7
 80100ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ce:	4770      	bx	lr

080100d0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80100d0:	b580      	push	{r7, lr}
 80100d2:	b088      	sub	sp, #32
 80100d4:	af00      	add	r7, sp, #0
 80100d6:	6078      	str	r0, [r7, #4]
 80100d8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80100da:	683b      	ldr	r3, [r7, #0]
 80100dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80100de:	2310      	movs	r3, #16
 80100e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80100e2:	2340      	movs	r3, #64	; 0x40
 80100e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80100e6:	2300      	movs	r3, #0
 80100e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80100ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80100ee:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80100f0:	f107 0308 	add.w	r3, r7, #8
 80100f4:	4619      	mov	r1, r3
 80100f6:	6878      	ldr	r0, [r7, #4]
 80100f8:	f7ff ff74 	bl	800ffe4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80100fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8010100:	2110      	movs	r1, #16
 8010102:	6878      	ldr	r0, [r7, #4]
 8010104:	f000 fa40 	bl	8010588 <SDMMC_GetCmdResp1>
 8010108:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801010a:	69fb      	ldr	r3, [r7, #28]
}
 801010c:	4618      	mov	r0, r3
 801010e:	3720      	adds	r7, #32
 8010110:	46bd      	mov	sp, r7
 8010112:	bd80      	pop	{r7, pc}

08010114 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8010114:	b580      	push	{r7, lr}
 8010116:	b088      	sub	sp, #32
 8010118:	af00      	add	r7, sp, #0
 801011a:	6078      	str	r0, [r7, #4]
 801011c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 801011e:	683b      	ldr	r3, [r7, #0]
 8010120:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8010122:	2311      	movs	r3, #17
 8010124:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010126:	2340      	movs	r3, #64	; 0x40
 8010128:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801012a:	2300      	movs	r3, #0
 801012c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801012e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010132:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010134:	f107 0308 	add.w	r3, r7, #8
 8010138:	4619      	mov	r1, r3
 801013a:	6878      	ldr	r0, [r7, #4]
 801013c:	f7ff ff52 	bl	800ffe4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8010140:	f241 3288 	movw	r2, #5000	; 0x1388
 8010144:	2111      	movs	r1, #17
 8010146:	6878      	ldr	r0, [r7, #4]
 8010148:	f000 fa1e 	bl	8010588 <SDMMC_GetCmdResp1>
 801014c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801014e:	69fb      	ldr	r3, [r7, #28]
}
 8010150:	4618      	mov	r0, r3
 8010152:	3720      	adds	r7, #32
 8010154:	46bd      	mov	sp, r7
 8010156:	bd80      	pop	{r7, pc}

08010158 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8010158:	b580      	push	{r7, lr}
 801015a:	b088      	sub	sp, #32
 801015c:	af00      	add	r7, sp, #0
 801015e:	6078      	str	r0, [r7, #4]
 8010160:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8010162:	683b      	ldr	r3, [r7, #0]
 8010164:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8010166:	2312      	movs	r3, #18
 8010168:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801016a:	2340      	movs	r3, #64	; 0x40
 801016c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801016e:	2300      	movs	r3, #0
 8010170:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010172:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010176:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010178:	f107 0308 	add.w	r3, r7, #8
 801017c:	4619      	mov	r1, r3
 801017e:	6878      	ldr	r0, [r7, #4]
 8010180:	f7ff ff30 	bl	800ffe4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8010184:	f241 3288 	movw	r2, #5000	; 0x1388
 8010188:	2112      	movs	r1, #18
 801018a:	6878      	ldr	r0, [r7, #4]
 801018c:	f000 f9fc 	bl	8010588 <SDMMC_GetCmdResp1>
 8010190:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010192:	69fb      	ldr	r3, [r7, #28]
}
 8010194:	4618      	mov	r0, r3
 8010196:	3720      	adds	r7, #32
 8010198:	46bd      	mov	sp, r7
 801019a:	bd80      	pop	{r7, pc}

0801019c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 801019c:	b580      	push	{r7, lr}
 801019e:	b088      	sub	sp, #32
 80101a0:	af00      	add	r7, sp, #0
 80101a2:	6078      	str	r0, [r7, #4]
 80101a4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80101a6:	683b      	ldr	r3, [r7, #0]
 80101a8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80101aa:	2318      	movs	r3, #24
 80101ac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80101ae:	2340      	movs	r3, #64	; 0x40
 80101b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80101b2:	2300      	movs	r3, #0
 80101b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80101b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80101ba:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80101bc:	f107 0308 	add.w	r3, r7, #8
 80101c0:	4619      	mov	r1, r3
 80101c2:	6878      	ldr	r0, [r7, #4]
 80101c4:	f7ff ff0e 	bl	800ffe4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80101c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80101cc:	2118      	movs	r1, #24
 80101ce:	6878      	ldr	r0, [r7, #4]
 80101d0:	f000 f9da 	bl	8010588 <SDMMC_GetCmdResp1>
 80101d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80101d6:	69fb      	ldr	r3, [r7, #28]
}
 80101d8:	4618      	mov	r0, r3
 80101da:	3720      	adds	r7, #32
 80101dc:	46bd      	mov	sp, r7
 80101de:	bd80      	pop	{r7, pc}

080101e0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80101e0:	b580      	push	{r7, lr}
 80101e2:	b088      	sub	sp, #32
 80101e4:	af00      	add	r7, sp, #0
 80101e6:	6078      	str	r0, [r7, #4]
 80101e8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80101ea:	683b      	ldr	r3, [r7, #0]
 80101ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80101ee:	2319      	movs	r3, #25
 80101f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80101f2:	2340      	movs	r3, #64	; 0x40
 80101f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80101f6:	2300      	movs	r3, #0
 80101f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80101fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80101fe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010200:	f107 0308 	add.w	r3, r7, #8
 8010204:	4619      	mov	r1, r3
 8010206:	6878      	ldr	r0, [r7, #4]
 8010208:	f7ff feec 	bl	800ffe4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 801020c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010210:	2119      	movs	r1, #25
 8010212:	6878      	ldr	r0, [r7, #4]
 8010214:	f000 f9b8 	bl	8010588 <SDMMC_GetCmdResp1>
 8010218:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801021a:	69fb      	ldr	r3, [r7, #28]
}
 801021c:	4618      	mov	r0, r3
 801021e:	3720      	adds	r7, #32
 8010220:	46bd      	mov	sp, r7
 8010222:	bd80      	pop	{r7, pc}

08010224 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8010224:	b580      	push	{r7, lr}
 8010226:	b088      	sub	sp, #32
 8010228:	af00      	add	r7, sp, #0
 801022a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 801022c:	2300      	movs	r3, #0
 801022e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8010230:	230c      	movs	r3, #12
 8010232:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010234:	2340      	movs	r3, #64	; 0x40
 8010236:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010238:	2300      	movs	r3, #0
 801023a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801023c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010240:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010242:	f107 0308 	add.w	r3, r7, #8
 8010246:	4619      	mov	r1, r3
 8010248:	6878      	ldr	r0, [r7, #4]
 801024a:	f7ff fecb 	bl	800ffe4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 801024e:	4a05      	ldr	r2, [pc, #20]	; (8010264 <SDMMC_CmdStopTransfer+0x40>)
 8010250:	210c      	movs	r1, #12
 8010252:	6878      	ldr	r0, [r7, #4]
 8010254:	f000 f998 	bl	8010588 <SDMMC_GetCmdResp1>
 8010258:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801025a:	69fb      	ldr	r3, [r7, #28]
}
 801025c:	4618      	mov	r0, r3
 801025e:	3720      	adds	r7, #32
 8010260:	46bd      	mov	sp, r7
 8010262:	bd80      	pop	{r7, pc}
 8010264:	05f5e100 	.word	0x05f5e100

08010268 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8010268:	b580      	push	{r7, lr}
 801026a:	b08a      	sub	sp, #40	; 0x28
 801026c:	af00      	add	r7, sp, #0
 801026e:	60f8      	str	r0, [r7, #12]
 8010270:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8010274:	683b      	ldr	r3, [r7, #0]
 8010276:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8010278:	2307      	movs	r3, #7
 801027a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801027c:	2340      	movs	r3, #64	; 0x40
 801027e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010280:	2300      	movs	r3, #0
 8010282:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010284:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010288:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801028a:	f107 0310 	add.w	r3, r7, #16
 801028e:	4619      	mov	r1, r3
 8010290:	68f8      	ldr	r0, [r7, #12]
 8010292:	f7ff fea7 	bl	800ffe4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8010296:	f241 3288 	movw	r2, #5000	; 0x1388
 801029a:	2107      	movs	r1, #7
 801029c:	68f8      	ldr	r0, [r7, #12]
 801029e:	f000 f973 	bl	8010588 <SDMMC_GetCmdResp1>
 80102a2:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80102a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80102a6:	4618      	mov	r0, r3
 80102a8:	3728      	adds	r7, #40	; 0x28
 80102aa:	46bd      	mov	sp, r7
 80102ac:	bd80      	pop	{r7, pc}

080102ae <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80102ae:	b580      	push	{r7, lr}
 80102b0:	b088      	sub	sp, #32
 80102b2:	af00      	add	r7, sp, #0
 80102b4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80102b6:	2300      	movs	r3, #0
 80102b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80102ba:	2300      	movs	r3, #0
 80102bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80102be:	2300      	movs	r3, #0
 80102c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80102c2:	2300      	movs	r3, #0
 80102c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80102c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80102ca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80102cc:	f107 0308 	add.w	r3, r7, #8
 80102d0:	4619      	mov	r1, r3
 80102d2:	6878      	ldr	r0, [r7, #4]
 80102d4:	f7ff fe86 	bl	800ffe4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80102d8:	6878      	ldr	r0, [r7, #4]
 80102da:	f000 f92d 	bl	8010538 <SDMMC_GetCmdError>
 80102de:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80102e0:	69fb      	ldr	r3, [r7, #28]
}
 80102e2:	4618      	mov	r0, r3
 80102e4:	3720      	adds	r7, #32
 80102e6:	46bd      	mov	sp, r7
 80102e8:	bd80      	pop	{r7, pc}

080102ea <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80102ea:	b580      	push	{r7, lr}
 80102ec:	b088      	sub	sp, #32
 80102ee:	af00      	add	r7, sp, #0
 80102f0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80102f2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80102f6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80102f8:	2308      	movs	r3, #8
 80102fa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80102fc:	2340      	movs	r3, #64	; 0x40
 80102fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8010300:	2300      	movs	r3, #0
 8010302:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010304:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010308:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801030a:	f107 0308 	add.w	r3, r7, #8
 801030e:	4619      	mov	r1, r3
 8010310:	6878      	ldr	r0, [r7, #4]
 8010312:	f7ff fe67 	bl	800ffe4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8010316:	6878      	ldr	r0, [r7, #4]
 8010318:	f000 fb16 	bl	8010948 <SDMMC_GetCmdResp7>
 801031c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801031e:	69fb      	ldr	r3, [r7, #28]
}
 8010320:	4618      	mov	r0, r3
 8010322:	3720      	adds	r7, #32
 8010324:	46bd      	mov	sp, r7
 8010326:	bd80      	pop	{r7, pc}

08010328 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010328:	b580      	push	{r7, lr}
 801032a:	b088      	sub	sp, #32
 801032c:	af00      	add	r7, sp, #0
 801032e:	6078      	str	r0, [r7, #4]
 8010330:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8010332:	683b      	ldr	r3, [r7, #0]
 8010334:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8010336:	2337      	movs	r3, #55	; 0x37
 8010338:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801033a:	2340      	movs	r3, #64	; 0x40
 801033c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801033e:	2300      	movs	r3, #0
 8010340:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010342:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010346:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010348:	f107 0308 	add.w	r3, r7, #8
 801034c:	4619      	mov	r1, r3
 801034e:	6878      	ldr	r0, [r7, #4]
 8010350:	f7ff fe48 	bl	800ffe4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8010354:	f241 3288 	movw	r2, #5000	; 0x1388
 8010358:	2137      	movs	r1, #55	; 0x37
 801035a:	6878      	ldr	r0, [r7, #4]
 801035c:	f000 f914 	bl	8010588 <SDMMC_GetCmdResp1>
 8010360:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8010362:	69fb      	ldr	r3, [r7, #28]
}
 8010364:	4618      	mov	r0, r3
 8010366:	3720      	adds	r7, #32
 8010368:	46bd      	mov	sp, r7
 801036a:	bd80      	pop	{r7, pc}

0801036c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 801036c:	b580      	push	{r7, lr}
 801036e:	b088      	sub	sp, #32
 8010370:	af00      	add	r7, sp, #0
 8010372:	6078      	str	r0, [r7, #4]
 8010374:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8010376:	683b      	ldr	r3, [r7, #0]
 8010378:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801037c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010380:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8010382:	2329      	movs	r3, #41	; 0x29
 8010384:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010386:	2340      	movs	r3, #64	; 0x40
 8010388:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801038a:	2300      	movs	r3, #0
 801038c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801038e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010392:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010394:	f107 0308 	add.w	r3, r7, #8
 8010398:	4619      	mov	r1, r3
 801039a:	6878      	ldr	r0, [r7, #4]
 801039c:	f7ff fe22 	bl	800ffe4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80103a0:	6878      	ldr	r0, [r7, #4]
 80103a2:	f000 fa23 	bl	80107ec <SDMMC_GetCmdResp3>
 80103a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80103a8:	69fb      	ldr	r3, [r7, #28]
}
 80103aa:	4618      	mov	r0, r3
 80103ac:	3720      	adds	r7, #32
 80103ae:	46bd      	mov	sp, r7
 80103b0:	bd80      	pop	{r7, pc}

080103b2 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 80103b2:	b580      	push	{r7, lr}
 80103b4:	b088      	sub	sp, #32
 80103b6:	af00      	add	r7, sp, #0
 80103b8:	6078      	str	r0, [r7, #4]
 80103ba:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80103bc:	683b      	ldr	r3, [r7, #0]
 80103be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80103c0:	2306      	movs	r3, #6
 80103c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80103c4:	2340      	movs	r3, #64	; 0x40
 80103c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80103c8:	2300      	movs	r3, #0
 80103ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80103cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80103d0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80103d2:	f107 0308 	add.w	r3, r7, #8
 80103d6:	4619      	mov	r1, r3
 80103d8:	6878      	ldr	r0, [r7, #4]
 80103da:	f7ff fe03 	bl	800ffe4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80103de:	f241 3288 	movw	r2, #5000	; 0x1388
 80103e2:	2106      	movs	r1, #6
 80103e4:	6878      	ldr	r0, [r7, #4]
 80103e6:	f000 f8cf 	bl	8010588 <SDMMC_GetCmdResp1>
 80103ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80103ec:	69fb      	ldr	r3, [r7, #28]
}
 80103ee:	4618      	mov	r0, r3
 80103f0:	3720      	adds	r7, #32
 80103f2:	46bd      	mov	sp, r7
 80103f4:	bd80      	pop	{r7, pc}

080103f6 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 80103f6:	b580      	push	{r7, lr}
 80103f8:	b088      	sub	sp, #32
 80103fa:	af00      	add	r7, sp, #0
 80103fc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80103fe:	2300      	movs	r3, #0
 8010400:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8010402:	2333      	movs	r3, #51	; 0x33
 8010404:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010406:	2340      	movs	r3, #64	; 0x40
 8010408:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801040a:	2300      	movs	r3, #0
 801040c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801040e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010412:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010414:	f107 0308 	add.w	r3, r7, #8
 8010418:	4619      	mov	r1, r3
 801041a:	6878      	ldr	r0, [r7, #4]
 801041c:	f7ff fde2 	bl	800ffe4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8010420:	f241 3288 	movw	r2, #5000	; 0x1388
 8010424:	2133      	movs	r1, #51	; 0x33
 8010426:	6878      	ldr	r0, [r7, #4]
 8010428:	f000 f8ae 	bl	8010588 <SDMMC_GetCmdResp1>
 801042c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801042e:	69fb      	ldr	r3, [r7, #28]
}
 8010430:	4618      	mov	r0, r3
 8010432:	3720      	adds	r7, #32
 8010434:	46bd      	mov	sp, r7
 8010436:	bd80      	pop	{r7, pc}

08010438 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8010438:	b580      	push	{r7, lr}
 801043a:	b088      	sub	sp, #32
 801043c:	af00      	add	r7, sp, #0
 801043e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8010440:	2300      	movs	r3, #0
 8010442:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8010444:	2302      	movs	r3, #2
 8010446:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8010448:	23c0      	movs	r3, #192	; 0xc0
 801044a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801044c:	2300      	movs	r3, #0
 801044e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8010450:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010454:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010456:	f107 0308 	add.w	r3, r7, #8
 801045a:	4619      	mov	r1, r3
 801045c:	6878      	ldr	r0, [r7, #4]
 801045e:	f7ff fdc1 	bl	800ffe4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8010462:	6878      	ldr	r0, [r7, #4]
 8010464:	f000 f97c 	bl	8010760 <SDMMC_GetCmdResp2>
 8010468:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801046a:	69fb      	ldr	r3, [r7, #28]
}
 801046c:	4618      	mov	r0, r3
 801046e:	3720      	adds	r7, #32
 8010470:	46bd      	mov	sp, r7
 8010472:	bd80      	pop	{r7, pc}

08010474 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8010474:	b580      	push	{r7, lr}
 8010476:	b088      	sub	sp, #32
 8010478:	af00      	add	r7, sp, #0
 801047a:	6078      	str	r0, [r7, #4]
 801047c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 801047e:	683b      	ldr	r3, [r7, #0]
 8010480:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8010482:	2309      	movs	r3, #9
 8010484:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8010486:	23c0      	movs	r3, #192	; 0xc0
 8010488:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801048a:	2300      	movs	r3, #0
 801048c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801048e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010492:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010494:	f107 0308 	add.w	r3, r7, #8
 8010498:	4619      	mov	r1, r3
 801049a:	6878      	ldr	r0, [r7, #4]
 801049c:	f7ff fda2 	bl	800ffe4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80104a0:	6878      	ldr	r0, [r7, #4]
 80104a2:	f000 f95d 	bl	8010760 <SDMMC_GetCmdResp2>
 80104a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80104a8:	69fb      	ldr	r3, [r7, #28]
}
 80104aa:	4618      	mov	r0, r3
 80104ac:	3720      	adds	r7, #32
 80104ae:	46bd      	mov	sp, r7
 80104b0:	bd80      	pop	{r7, pc}

080104b2 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80104b2:	b580      	push	{r7, lr}
 80104b4:	b088      	sub	sp, #32
 80104b6:	af00      	add	r7, sp, #0
 80104b8:	6078      	str	r0, [r7, #4]
 80104ba:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80104bc:	2300      	movs	r3, #0
 80104be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80104c0:	2303      	movs	r3, #3
 80104c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80104c4:	2340      	movs	r3, #64	; 0x40
 80104c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80104c8:	2300      	movs	r3, #0
 80104ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80104cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80104d0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80104d2:	f107 0308 	add.w	r3, r7, #8
 80104d6:	4619      	mov	r1, r3
 80104d8:	6878      	ldr	r0, [r7, #4]
 80104da:	f7ff fd83 	bl	800ffe4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80104de:	683a      	ldr	r2, [r7, #0]
 80104e0:	2103      	movs	r1, #3
 80104e2:	6878      	ldr	r0, [r7, #4]
 80104e4:	f000 f9bc 	bl	8010860 <SDMMC_GetCmdResp6>
 80104e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80104ea:	69fb      	ldr	r3, [r7, #28]
}
 80104ec:	4618      	mov	r0, r3
 80104ee:	3720      	adds	r7, #32
 80104f0:	46bd      	mov	sp, r7
 80104f2:	bd80      	pop	{r7, pc}

080104f4 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80104f4:	b580      	push	{r7, lr}
 80104f6:	b088      	sub	sp, #32
 80104f8:	af00      	add	r7, sp, #0
 80104fa:	6078      	str	r0, [r7, #4]
 80104fc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80104fe:	683b      	ldr	r3, [r7, #0]
 8010500:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8010502:	230d      	movs	r3, #13
 8010504:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8010506:	2340      	movs	r3, #64	; 0x40
 8010508:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801050a:	2300      	movs	r3, #0
 801050c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801050e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010512:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8010514:	f107 0308 	add.w	r3, r7, #8
 8010518:	4619      	mov	r1, r3
 801051a:	6878      	ldr	r0, [r7, #4]
 801051c:	f7ff fd62 	bl	800ffe4 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8010520:	f241 3288 	movw	r2, #5000	; 0x1388
 8010524:	210d      	movs	r1, #13
 8010526:	6878      	ldr	r0, [r7, #4]
 8010528:	f000 f82e 	bl	8010588 <SDMMC_GetCmdResp1>
 801052c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801052e:	69fb      	ldr	r3, [r7, #28]
}
 8010530:	4618      	mov	r0, r3
 8010532:	3720      	adds	r7, #32
 8010534:	46bd      	mov	sp, r7
 8010536:	bd80      	pop	{r7, pc}

08010538 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8010538:	b490      	push	{r4, r7}
 801053a:	b082      	sub	sp, #8
 801053c:	af00      	add	r7, sp, #0
 801053e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010540:	4b0f      	ldr	r3, [pc, #60]	; (8010580 <SDMMC_GetCmdError+0x48>)
 8010542:	681b      	ldr	r3, [r3, #0]
 8010544:	4a0f      	ldr	r2, [pc, #60]	; (8010584 <SDMMC_GetCmdError+0x4c>)
 8010546:	fba2 2303 	umull	r2, r3, r2, r3
 801054a:	0a5b      	lsrs	r3, r3, #9
 801054c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010550:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010554:	4623      	mov	r3, r4
 8010556:	1e5c      	subs	r4, r3, #1
 8010558:	2b00      	cmp	r3, #0
 801055a:	d102      	bne.n	8010562 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 801055c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010560:	e009      	b.n	8010576 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801056a:	2b00      	cmp	r3, #0
 801056c:	d0f2      	beq.n	8010554 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	22c5      	movs	r2, #197	; 0xc5
 8010572:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8010574:	2300      	movs	r3, #0
}
 8010576:	4618      	mov	r0, r3
 8010578:	3708      	adds	r7, #8
 801057a:	46bd      	mov	sp, r7
 801057c:	bc90      	pop	{r4, r7}
 801057e:	4770      	bx	lr
 8010580:	20000000 	.word	0x20000000
 8010584:	10624dd3 	.word	0x10624dd3

08010588 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8010588:	b590      	push	{r4, r7, lr}
 801058a:	b087      	sub	sp, #28
 801058c:	af00      	add	r7, sp, #0
 801058e:	60f8      	str	r0, [r7, #12]
 8010590:	460b      	mov	r3, r1
 8010592:	607a      	str	r2, [r7, #4]
 8010594:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8010596:	4b6f      	ldr	r3, [pc, #444]	; (8010754 <SDMMC_GetCmdResp1+0x1cc>)
 8010598:	681b      	ldr	r3, [r3, #0]
 801059a:	4a6f      	ldr	r2, [pc, #444]	; (8010758 <SDMMC_GetCmdResp1+0x1d0>)
 801059c:	fba2 2303 	umull	r2, r3, r2, r3
 80105a0:	0a5b      	lsrs	r3, r3, #9
 80105a2:	687a      	ldr	r2, [r7, #4]
 80105a4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80105a8:	4623      	mov	r3, r4
 80105aa:	1e5c      	subs	r4, r3, #1
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d102      	bne.n	80105b6 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80105b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80105b4:	e0c9      	b.n	801074a <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 80105b6:	68fb      	ldr	r3, [r7, #12]
 80105b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80105ba:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80105bc:	697b      	ldr	r3, [r7, #20]
 80105be:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	d0f0      	beq.n	80105a8 <SDMMC_GetCmdResp1+0x20>
 80105c6:	697b      	ldr	r3, [r7, #20]
 80105c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d1eb      	bne.n	80105a8 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80105d0:	68fb      	ldr	r3, [r7, #12]
 80105d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80105d4:	f003 0304 	and.w	r3, r3, #4
 80105d8:	2b00      	cmp	r3, #0
 80105da:	d004      	beq.n	80105e6 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80105dc:	68fb      	ldr	r3, [r7, #12]
 80105de:	2204      	movs	r2, #4
 80105e0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80105e2:	2304      	movs	r3, #4
 80105e4:	e0b1      	b.n	801074a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80105e6:	68fb      	ldr	r3, [r7, #12]
 80105e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80105ea:	f003 0301 	and.w	r3, r3, #1
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	d004      	beq.n	80105fc <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80105f2:	68fb      	ldr	r3, [r7, #12]
 80105f4:	2201      	movs	r2, #1
 80105f6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80105f8:	2301      	movs	r3, #1
 80105fa:	e0a6      	b.n	801074a <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80105fc:	68fb      	ldr	r3, [r7, #12]
 80105fe:	22c5      	movs	r2, #197	; 0xc5
 8010600:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8010602:	68f8      	ldr	r0, [r7, #12]
 8010604:	f7ff fd18 	bl	8010038 <SDIO_GetCommandResponse>
 8010608:	4603      	mov	r3, r0
 801060a:	461a      	mov	r2, r3
 801060c:	7afb      	ldrb	r3, [r7, #11]
 801060e:	4293      	cmp	r3, r2
 8010610:	d001      	beq.n	8010616 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010612:	2301      	movs	r3, #1
 8010614:	e099      	b.n	801074a <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8010616:	2100      	movs	r1, #0
 8010618:	68f8      	ldr	r0, [r7, #12]
 801061a:	f7ff fd1a 	bl	8010052 <SDIO_GetResponse>
 801061e:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8010620:	693a      	ldr	r2, [r7, #16]
 8010622:	4b4e      	ldr	r3, [pc, #312]	; (801075c <SDMMC_GetCmdResp1+0x1d4>)
 8010624:	4013      	ands	r3, r2
 8010626:	2b00      	cmp	r3, #0
 8010628:	d101      	bne.n	801062e <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 801062a:	2300      	movs	r3, #0
 801062c:	e08d      	b.n	801074a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 801062e:	693b      	ldr	r3, [r7, #16]
 8010630:	2b00      	cmp	r3, #0
 8010632:	da02      	bge.n	801063a <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8010634:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8010638:	e087      	b.n	801074a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 801063a:	693b      	ldr	r3, [r7, #16]
 801063c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8010640:	2b00      	cmp	r3, #0
 8010642:	d001      	beq.n	8010648 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8010644:	2340      	movs	r3, #64	; 0x40
 8010646:	e080      	b.n	801074a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8010648:	693b      	ldr	r3, [r7, #16]
 801064a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801064e:	2b00      	cmp	r3, #0
 8010650:	d001      	beq.n	8010656 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8010652:	2380      	movs	r3, #128	; 0x80
 8010654:	e079      	b.n	801074a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8010656:	693b      	ldr	r3, [r7, #16]
 8010658:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801065c:	2b00      	cmp	r3, #0
 801065e:	d002      	beq.n	8010666 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8010660:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010664:	e071      	b.n	801074a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8010666:	693b      	ldr	r3, [r7, #16]
 8010668:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801066c:	2b00      	cmp	r3, #0
 801066e:	d002      	beq.n	8010676 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8010670:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010674:	e069      	b.n	801074a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8010676:	693b      	ldr	r3, [r7, #16]
 8010678:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801067c:	2b00      	cmp	r3, #0
 801067e:	d002      	beq.n	8010686 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8010680:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010684:	e061      	b.n	801074a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8010686:	693b      	ldr	r3, [r7, #16]
 8010688:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801068c:	2b00      	cmp	r3, #0
 801068e:	d002      	beq.n	8010696 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8010690:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010694:	e059      	b.n	801074a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8010696:	693b      	ldr	r3, [r7, #16]
 8010698:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801069c:	2b00      	cmp	r3, #0
 801069e:	d002      	beq.n	80106a6 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80106a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80106a4:	e051      	b.n	801074a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80106a6:	693b      	ldr	r3, [r7, #16]
 80106a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d002      	beq.n	80106b6 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80106b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80106b4:	e049      	b.n	801074a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80106b6:	693b      	ldr	r3, [r7, #16]
 80106b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d002      	beq.n	80106c6 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80106c0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80106c4:	e041      	b.n	801074a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80106c6:	693b      	ldr	r3, [r7, #16]
 80106c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d002      	beq.n	80106d6 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 80106d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80106d4:	e039      	b.n	801074a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80106d6:	693b      	ldr	r3, [r7, #16]
 80106d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80106dc:	2b00      	cmp	r3, #0
 80106de:	d002      	beq.n	80106e6 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80106e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80106e4:	e031      	b.n	801074a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80106e6:	693b      	ldr	r3, [r7, #16]
 80106e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	d002      	beq.n	80106f6 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80106f0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80106f4:	e029      	b.n	801074a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80106f6:	693b      	ldr	r3, [r7, #16]
 80106f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d002      	beq.n	8010706 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8010700:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8010704:	e021      	b.n	801074a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8010706:	693b      	ldr	r3, [r7, #16]
 8010708:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801070c:	2b00      	cmp	r3, #0
 801070e:	d002      	beq.n	8010716 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8010710:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8010714:	e019      	b.n	801074a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8010716:	693b      	ldr	r3, [r7, #16]
 8010718:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801071c:	2b00      	cmp	r3, #0
 801071e:	d002      	beq.n	8010726 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8010720:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8010724:	e011      	b.n	801074a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8010726:	693b      	ldr	r3, [r7, #16]
 8010728:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801072c:	2b00      	cmp	r3, #0
 801072e:	d002      	beq.n	8010736 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8010730:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8010734:	e009      	b.n	801074a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8010736:	693b      	ldr	r3, [r7, #16]
 8010738:	f003 0308 	and.w	r3, r3, #8
 801073c:	2b00      	cmp	r3, #0
 801073e:	d002      	beq.n	8010746 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8010740:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8010744:	e001      	b.n	801074a <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010746:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 801074a:	4618      	mov	r0, r3
 801074c:	371c      	adds	r7, #28
 801074e:	46bd      	mov	sp, r7
 8010750:	bd90      	pop	{r4, r7, pc}
 8010752:	bf00      	nop
 8010754:	20000000 	.word	0x20000000
 8010758:	10624dd3 	.word	0x10624dd3
 801075c:	fdffe008 	.word	0xfdffe008

08010760 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8010760:	b490      	push	{r4, r7}
 8010762:	b084      	sub	sp, #16
 8010764:	af00      	add	r7, sp, #0
 8010766:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010768:	4b1e      	ldr	r3, [pc, #120]	; (80107e4 <SDMMC_GetCmdResp2+0x84>)
 801076a:	681b      	ldr	r3, [r3, #0]
 801076c:	4a1e      	ldr	r2, [pc, #120]	; (80107e8 <SDMMC_GetCmdResp2+0x88>)
 801076e:	fba2 2303 	umull	r2, r3, r2, r3
 8010772:	0a5b      	lsrs	r3, r3, #9
 8010774:	f241 3288 	movw	r2, #5000	; 0x1388
 8010778:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 801077c:	4623      	mov	r3, r4
 801077e:	1e5c      	subs	r4, r3, #1
 8010780:	2b00      	cmp	r3, #0
 8010782:	d102      	bne.n	801078a <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010784:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010788:	e026      	b.n	80107d8 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801078e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010790:	68fb      	ldr	r3, [r7, #12]
 8010792:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010796:	2b00      	cmp	r3, #0
 8010798:	d0f0      	beq.n	801077c <SDMMC_GetCmdResp2+0x1c>
 801079a:	68fb      	ldr	r3, [r7, #12]
 801079c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	d1eb      	bne.n	801077c <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80107a8:	f003 0304 	and.w	r3, r3, #4
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	d004      	beq.n	80107ba <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	2204      	movs	r2, #4
 80107b4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80107b6:	2304      	movs	r3, #4
 80107b8:	e00e      	b.n	80107d8 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80107be:	f003 0301 	and.w	r3, r3, #1
 80107c2:	2b00      	cmp	r3, #0
 80107c4:	d004      	beq.n	80107d0 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	2201      	movs	r2, #1
 80107ca:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80107cc:	2301      	movs	r3, #1
 80107ce:	e003      	b.n	80107d8 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	22c5      	movs	r2, #197	; 0xc5
 80107d4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80107d6:	2300      	movs	r3, #0
}
 80107d8:	4618      	mov	r0, r3
 80107da:	3710      	adds	r7, #16
 80107dc:	46bd      	mov	sp, r7
 80107de:	bc90      	pop	{r4, r7}
 80107e0:	4770      	bx	lr
 80107e2:	bf00      	nop
 80107e4:	20000000 	.word	0x20000000
 80107e8:	10624dd3 	.word	0x10624dd3

080107ec <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80107ec:	b490      	push	{r4, r7}
 80107ee:	b084      	sub	sp, #16
 80107f0:	af00      	add	r7, sp, #0
 80107f2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80107f4:	4b18      	ldr	r3, [pc, #96]	; (8010858 <SDMMC_GetCmdResp3+0x6c>)
 80107f6:	681b      	ldr	r3, [r3, #0]
 80107f8:	4a18      	ldr	r2, [pc, #96]	; (801085c <SDMMC_GetCmdResp3+0x70>)
 80107fa:	fba2 2303 	umull	r2, r3, r2, r3
 80107fe:	0a5b      	lsrs	r3, r3, #9
 8010800:	f241 3288 	movw	r2, #5000	; 0x1388
 8010804:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010808:	4623      	mov	r3, r4
 801080a:	1e5c      	subs	r4, r3, #1
 801080c:	2b00      	cmp	r3, #0
 801080e:	d102      	bne.n	8010816 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8010810:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010814:	e01b      	b.n	801084e <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801081a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801081c:	68fb      	ldr	r3, [r7, #12]
 801081e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8010822:	2b00      	cmp	r3, #0
 8010824:	d0f0      	beq.n	8010808 <SDMMC_GetCmdResp3+0x1c>
 8010826:	68fb      	ldr	r3, [r7, #12]
 8010828:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801082c:	2b00      	cmp	r3, #0
 801082e:	d1eb      	bne.n	8010808 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010834:	f003 0304 	and.w	r3, r3, #4
 8010838:	2b00      	cmp	r3, #0
 801083a:	d004      	beq.n	8010846 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	2204      	movs	r2, #4
 8010840:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010842:	2304      	movs	r3, #4
 8010844:	e003      	b.n	801084e <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	22c5      	movs	r2, #197	; 0xc5
 801084a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 801084c:	2300      	movs	r3, #0
}
 801084e:	4618      	mov	r0, r3
 8010850:	3710      	adds	r7, #16
 8010852:	46bd      	mov	sp, r7
 8010854:	bc90      	pop	{r4, r7}
 8010856:	4770      	bx	lr
 8010858:	20000000 	.word	0x20000000
 801085c:	10624dd3 	.word	0x10624dd3

08010860 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8010860:	b590      	push	{r4, r7, lr}
 8010862:	b087      	sub	sp, #28
 8010864:	af00      	add	r7, sp, #0
 8010866:	60f8      	str	r0, [r7, #12]
 8010868:	460b      	mov	r3, r1
 801086a:	607a      	str	r2, [r7, #4]
 801086c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801086e:	4b34      	ldr	r3, [pc, #208]	; (8010940 <SDMMC_GetCmdResp6+0xe0>)
 8010870:	681b      	ldr	r3, [r3, #0]
 8010872:	4a34      	ldr	r2, [pc, #208]	; (8010944 <SDMMC_GetCmdResp6+0xe4>)
 8010874:	fba2 2303 	umull	r2, r3, r2, r3
 8010878:	0a5b      	lsrs	r3, r3, #9
 801087a:	f241 3288 	movw	r2, #5000	; 0x1388
 801087e:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010882:	4623      	mov	r3, r4
 8010884:	1e5c      	subs	r4, r3, #1
 8010886:	2b00      	cmp	r3, #0
 8010888:	d102      	bne.n	8010890 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 801088a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801088e:	e052      	b.n	8010936 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8010890:	68fb      	ldr	r3, [r7, #12]
 8010892:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010894:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010896:	697b      	ldr	r3, [r7, #20]
 8010898:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 801089c:	2b00      	cmp	r3, #0
 801089e:	d0f0      	beq.n	8010882 <SDMMC_GetCmdResp6+0x22>
 80108a0:	697b      	ldr	r3, [r7, #20]
 80108a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	d1eb      	bne.n	8010882 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80108aa:	68fb      	ldr	r3, [r7, #12]
 80108ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80108ae:	f003 0304 	and.w	r3, r3, #4
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	d004      	beq.n	80108c0 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80108b6:	68fb      	ldr	r3, [r7, #12]
 80108b8:	2204      	movs	r2, #4
 80108ba:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80108bc:	2304      	movs	r3, #4
 80108be:	e03a      	b.n	8010936 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80108c0:	68fb      	ldr	r3, [r7, #12]
 80108c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80108c4:	f003 0301 	and.w	r3, r3, #1
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d004      	beq.n	80108d6 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80108cc:	68fb      	ldr	r3, [r7, #12]
 80108ce:	2201      	movs	r2, #1
 80108d0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80108d2:	2301      	movs	r3, #1
 80108d4:	e02f      	b.n	8010936 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80108d6:	68f8      	ldr	r0, [r7, #12]
 80108d8:	f7ff fbae 	bl	8010038 <SDIO_GetCommandResponse>
 80108dc:	4603      	mov	r3, r0
 80108de:	461a      	mov	r2, r3
 80108e0:	7afb      	ldrb	r3, [r7, #11]
 80108e2:	4293      	cmp	r3, r2
 80108e4:	d001      	beq.n	80108ea <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80108e6:	2301      	movs	r3, #1
 80108e8:	e025      	b.n	8010936 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80108ea:	68fb      	ldr	r3, [r7, #12]
 80108ec:	22c5      	movs	r2, #197	; 0xc5
 80108ee:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80108f0:	2100      	movs	r1, #0
 80108f2:	68f8      	ldr	r0, [r7, #12]
 80108f4:	f7ff fbad 	bl	8010052 <SDIO_GetResponse>
 80108f8:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80108fa:	693b      	ldr	r3, [r7, #16]
 80108fc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8010900:	2b00      	cmp	r3, #0
 8010902:	d106      	bne.n	8010912 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8010904:	693b      	ldr	r3, [r7, #16]
 8010906:	0c1b      	lsrs	r3, r3, #16
 8010908:	b29a      	uxth	r2, r3
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 801090e:	2300      	movs	r3, #0
 8010910:	e011      	b.n	8010936 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8010912:	693b      	ldr	r3, [r7, #16]
 8010914:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010918:	2b00      	cmp	r3, #0
 801091a:	d002      	beq.n	8010922 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 801091c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010920:	e009      	b.n	8010936 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8010922:	693b      	ldr	r3, [r7, #16]
 8010924:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010928:	2b00      	cmp	r3, #0
 801092a:	d002      	beq.n	8010932 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 801092c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010930:	e001      	b.n	8010936 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010932:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8010936:	4618      	mov	r0, r3
 8010938:	371c      	adds	r7, #28
 801093a:	46bd      	mov	sp, r7
 801093c:	bd90      	pop	{r4, r7, pc}
 801093e:	bf00      	nop
 8010940:	20000000 	.word	0x20000000
 8010944:	10624dd3 	.word	0x10624dd3

08010948 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8010948:	b490      	push	{r4, r7}
 801094a:	b084      	sub	sp, #16
 801094c:	af00      	add	r7, sp, #0
 801094e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8010950:	4b21      	ldr	r3, [pc, #132]	; (80109d8 <SDMMC_GetCmdResp7+0x90>)
 8010952:	681b      	ldr	r3, [r3, #0]
 8010954:	4a21      	ldr	r2, [pc, #132]	; (80109dc <SDMMC_GetCmdResp7+0x94>)
 8010956:	fba2 2303 	umull	r2, r3, r2, r3
 801095a:	0a5b      	lsrs	r3, r3, #9
 801095c:	f241 3288 	movw	r2, #5000	; 0x1388
 8010960:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8010964:	4623      	mov	r3, r4
 8010966:	1e5c      	subs	r4, r3, #1
 8010968:	2b00      	cmp	r3, #0
 801096a:	d102      	bne.n	8010972 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 801096c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8010970:	e02c      	b.n	80109cc <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010976:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010978:	68fb      	ldr	r3, [r7, #12]
 801097a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 801097e:	2b00      	cmp	r3, #0
 8010980:	d0f0      	beq.n	8010964 <SDMMC_GetCmdResp7+0x1c>
 8010982:	68fb      	ldr	r3, [r7, #12]
 8010984:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8010988:	2b00      	cmp	r3, #0
 801098a:	d1eb      	bne.n	8010964 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010990:	f003 0304 	and.w	r3, r3, #4
 8010994:	2b00      	cmp	r3, #0
 8010996:	d004      	beq.n	80109a2 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	2204      	movs	r2, #4
 801099c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801099e:	2304      	movs	r3, #4
 80109a0:	e014      	b.n	80109cc <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80109a6:	f003 0301 	and.w	r3, r3, #1
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	d004      	beq.n	80109b8 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	2201      	movs	r2, #1
 80109b2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80109b4:	2301      	movs	r3, #1
 80109b6:	e009      	b.n	80109cc <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80109bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	d002      	beq.n	80109ca <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	2240      	movs	r2, #64	; 0x40
 80109c8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80109ca:	2300      	movs	r3, #0
  
}
 80109cc:	4618      	mov	r0, r3
 80109ce:	3710      	adds	r7, #16
 80109d0:	46bd      	mov	sp, r7
 80109d2:	bc90      	pop	{r4, r7}
 80109d4:	4770      	bx	lr
 80109d6:	bf00      	nop
 80109d8:	20000000 	.word	0x20000000
 80109dc:	10624dd3 	.word	0x10624dd3

080109e0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80109e0:	b580      	push	{r7, lr}
 80109e2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80109e4:	4904      	ldr	r1, [pc, #16]	; (80109f8 <MX_FATFS_Init+0x18>)
 80109e6:	4805      	ldr	r0, [pc, #20]	; (80109fc <MX_FATFS_Init+0x1c>)
 80109e8:	f003 fb9c 	bl	8014124 <FATFS_LinkDriver>
 80109ec:	4603      	mov	r3, r0
 80109ee:	461a      	mov	r2, r3
 80109f0:	4b03      	ldr	r3, [pc, #12]	; (8010a00 <MX_FATFS_Init+0x20>)
 80109f2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80109f4:	bf00      	nop
 80109f6:	bd80      	pop	{r7, pc}
 80109f8:	20044c48 	.word	0x20044c48
 80109fc:	08019c64 	.word	0x08019c64
 8010a00:	20044c44 	.word	0x20044c44

08010a04 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8010a04:	b580      	push	{r7, lr}
 8010a06:	b082      	sub	sp, #8
 8010a08:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8010a0a:	2300      	movs	r3, #0
 8010a0c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8010a0e:	f000 f896 	bl	8010b3e <BSP_SD_IsDetected>
 8010a12:	4603      	mov	r3, r0
 8010a14:	2b01      	cmp	r3, #1
 8010a16:	d001      	beq.n	8010a1c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8010a18:	2301      	movs	r3, #1
 8010a1a:	e012      	b.n	8010a42 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8010a1c:	480b      	ldr	r0, [pc, #44]	; (8010a4c <BSP_SD_Init+0x48>)
 8010a1e:	f7fb ffa5 	bl	800c96c <HAL_SD_Init>
 8010a22:	4603      	mov	r3, r0
 8010a24:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8010a26:	79fb      	ldrb	r3, [r7, #7]
 8010a28:	2b00      	cmp	r3, #0
 8010a2a:	d109      	bne.n	8010a40 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8010a2c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8010a30:	4806      	ldr	r0, [pc, #24]	; (8010a4c <BSP_SD_Init+0x48>)
 8010a32:	f7fc fd4f 	bl	800d4d4 <HAL_SD_ConfigWideBusOperation>
 8010a36:	4603      	mov	r3, r0
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d001      	beq.n	8010a40 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8010a3c:	2301      	movs	r3, #1
 8010a3e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8010a40:	79fb      	ldrb	r3, [r7, #7]
}
 8010a42:	4618      	mov	r0, r3
 8010a44:	3708      	adds	r7, #8
 8010a46:	46bd      	mov	sp, r7
 8010a48:	bd80      	pop	{r7, pc}
 8010a4a:	bf00      	nop
 8010a4c:	20044a40 	.word	0x20044a40

08010a50 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8010a50:	b580      	push	{r7, lr}
 8010a52:	b086      	sub	sp, #24
 8010a54:	af00      	add	r7, sp, #0
 8010a56:	60f8      	str	r0, [r7, #12]
 8010a58:	60b9      	str	r1, [r7, #8]
 8010a5a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8010a5c:	2300      	movs	r3, #0
 8010a5e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	68ba      	ldr	r2, [r7, #8]
 8010a64:	68f9      	ldr	r1, [r7, #12]
 8010a66:	4806      	ldr	r0, [pc, #24]	; (8010a80 <BSP_SD_ReadBlocks_DMA+0x30>)
 8010a68:	f7fc f810 	bl	800ca8c <HAL_SD_ReadBlocks_DMA>
 8010a6c:	4603      	mov	r3, r0
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	d001      	beq.n	8010a76 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8010a72:	2301      	movs	r3, #1
 8010a74:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8010a76:	7dfb      	ldrb	r3, [r7, #23]
}
 8010a78:	4618      	mov	r0, r3
 8010a7a:	3718      	adds	r7, #24
 8010a7c:	46bd      	mov	sp, r7
 8010a7e:	bd80      	pop	{r7, pc}
 8010a80:	20044a40 	.word	0x20044a40

08010a84 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8010a84:	b580      	push	{r7, lr}
 8010a86:	b086      	sub	sp, #24
 8010a88:	af00      	add	r7, sp, #0
 8010a8a:	60f8      	str	r0, [r7, #12]
 8010a8c:	60b9      	str	r1, [r7, #8]
 8010a8e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8010a90:	2300      	movs	r3, #0
 8010a92:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	68ba      	ldr	r2, [r7, #8]
 8010a98:	68f9      	ldr	r1, [r7, #12]
 8010a9a:	4806      	ldr	r0, [pc, #24]	; (8010ab4 <BSP_SD_WriteBlocks_DMA+0x30>)
 8010a9c:	f7fc f8de 	bl	800cc5c <HAL_SD_WriteBlocks_DMA>
 8010aa0:	4603      	mov	r3, r0
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	d001      	beq.n	8010aaa <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8010aa6:	2301      	movs	r3, #1
 8010aa8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8010aaa:	7dfb      	ldrb	r3, [r7, #23]
}
 8010aac:	4618      	mov	r0, r3
 8010aae:	3718      	adds	r7, #24
 8010ab0:	46bd      	mov	sp, r7
 8010ab2:	bd80      	pop	{r7, pc}
 8010ab4:	20044a40 	.word	0x20044a40

08010ab8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8010ab8:	b580      	push	{r7, lr}
 8010aba:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8010abc:	4805      	ldr	r0, [pc, #20]	; (8010ad4 <BSP_SD_GetCardState+0x1c>)
 8010abe:	f7fc fd85 	bl	800d5cc <HAL_SD_GetCardState>
 8010ac2:	4603      	mov	r3, r0
 8010ac4:	2b04      	cmp	r3, #4
 8010ac6:	bf14      	ite	ne
 8010ac8:	2301      	movne	r3, #1
 8010aca:	2300      	moveq	r3, #0
 8010acc:	b2db      	uxtb	r3, r3
}
 8010ace:	4618      	mov	r0, r3
 8010ad0:	bd80      	pop	{r7, pc}
 8010ad2:	bf00      	nop
 8010ad4:	20044a40 	.word	0x20044a40

08010ad8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8010ad8:	b580      	push	{r7, lr}
 8010ada:	b082      	sub	sp, #8
 8010adc:	af00      	add	r7, sp, #0
 8010ade:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8010ae0:	6879      	ldr	r1, [r7, #4]
 8010ae2:	4803      	ldr	r0, [pc, #12]	; (8010af0 <BSP_SD_GetCardInfo+0x18>)
 8010ae4:	f7fc fcca 	bl	800d47c <HAL_SD_GetCardInfo>
}
 8010ae8:	bf00      	nop
 8010aea:	3708      	adds	r7, #8
 8010aec:	46bd      	mov	sp, r7
 8010aee:	bd80      	pop	{r7, pc}
 8010af0:	20044a40 	.word	0x20044a40

08010af4 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8010af4:	b580      	push	{r7, lr}
 8010af6:	b082      	sub	sp, #8
 8010af8:	af00      	add	r7, sp, #0
 8010afa:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8010afc:	f000 f818 	bl	8010b30 <BSP_SD_AbortCallback>
}
 8010b00:	bf00      	nop
 8010b02:	3708      	adds	r7, #8
 8010b04:	46bd      	mov	sp, r7
 8010b06:	bd80      	pop	{r7, pc}

08010b08 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8010b08:	b580      	push	{r7, lr}
 8010b0a:	b082      	sub	sp, #8
 8010b0c:	af00      	add	r7, sp, #0
 8010b0e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8010b10:	f000 f9a8 	bl	8010e64 <BSP_SD_WriteCpltCallback>
}
 8010b14:	bf00      	nop
 8010b16:	3708      	adds	r7, #8
 8010b18:	46bd      	mov	sp, r7
 8010b1a:	bd80      	pop	{r7, pc}

08010b1c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8010b1c:	b580      	push	{r7, lr}
 8010b1e:	b082      	sub	sp, #8
 8010b20:	af00      	add	r7, sp, #0
 8010b22:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8010b24:	f000 f9aa 	bl	8010e7c <BSP_SD_ReadCpltCallback>
}
 8010b28:	bf00      	nop
 8010b2a:	3708      	adds	r7, #8
 8010b2c:	46bd      	mov	sp, r7
 8010b2e:	bd80      	pop	{r7, pc}

08010b30 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8010b30:	b480      	push	{r7}
 8010b32:	af00      	add	r7, sp, #0

}
 8010b34:	bf00      	nop
 8010b36:	46bd      	mov	sp, r7
 8010b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b3c:	4770      	bx	lr

08010b3e <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8010b3e:	b580      	push	{r7, lr}
 8010b40:	b082      	sub	sp, #8
 8010b42:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8010b44:	2301      	movs	r3, #1
 8010b46:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8010b48:	f000 f80c 	bl	8010b64 <BSP_PlatformIsDetected>
 8010b4c:	4603      	mov	r3, r0
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	d101      	bne.n	8010b56 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8010b52:	2300      	movs	r3, #0
 8010b54:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8010b56:	79fb      	ldrb	r3, [r7, #7]
 8010b58:	b2db      	uxtb	r3, r3
}
 8010b5a:	4618      	mov	r0, r3
 8010b5c:	3708      	adds	r7, #8
 8010b5e:	46bd      	mov	sp, r7
 8010b60:	bd80      	pop	{r7, pc}
	...

08010b64 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8010b64:	b580      	push	{r7, lr}
 8010b66:	b082      	sub	sp, #8
 8010b68:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8010b6a:	2301      	movs	r3, #1
 8010b6c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8010b6e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8010b72:	4806      	ldr	r0, [pc, #24]	; (8010b8c <BSP_PlatformIsDetected+0x28>)
 8010b74:	f7fa f87e 	bl	800ac74 <HAL_GPIO_ReadPin>
 8010b78:	4603      	mov	r3, r0
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	d001      	beq.n	8010b82 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8010b7e:	2300      	movs	r3, #0
 8010b80:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8010b82:	79fb      	ldrb	r3, [r7, #7]
}
 8010b84:	4618      	mov	r0, r3
 8010b86:	3708      	adds	r7, #8
 8010b88:	46bd      	mov	sp, r7
 8010b8a:	bd80      	pop	{r7, pc}
 8010b8c:	40020000 	.word	0x40020000

08010b90 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8010b90:	b580      	push	{r7, lr}
 8010b92:	b084      	sub	sp, #16
 8010b94:	af00      	add	r7, sp, #0
 8010b96:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8010b98:	f7f8 fde2 	bl	8009760 <HAL_GetTick>
 8010b9c:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8010b9e:	e006      	b.n	8010bae <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010ba0:	f7ff ff8a 	bl	8010ab8 <BSP_SD_GetCardState>
 8010ba4:	4603      	mov	r3, r0
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	d101      	bne.n	8010bae <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8010baa:	2300      	movs	r3, #0
 8010bac:	e009      	b.n	8010bc2 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8010bae:	f7f8 fdd7 	bl	8009760 <HAL_GetTick>
 8010bb2:	4602      	mov	r2, r0
 8010bb4:	68fb      	ldr	r3, [r7, #12]
 8010bb6:	1ad3      	subs	r3, r2, r3
 8010bb8:	687a      	ldr	r2, [r7, #4]
 8010bba:	429a      	cmp	r2, r3
 8010bbc:	d8f0      	bhi.n	8010ba0 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8010bbe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010bc2:	4618      	mov	r0, r3
 8010bc4:	3710      	adds	r7, #16
 8010bc6:	46bd      	mov	sp, r7
 8010bc8:	bd80      	pop	{r7, pc}
	...

08010bcc <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8010bcc:	b580      	push	{r7, lr}
 8010bce:	b082      	sub	sp, #8
 8010bd0:	af00      	add	r7, sp, #0
 8010bd2:	4603      	mov	r3, r0
 8010bd4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8010bd6:	4b0b      	ldr	r3, [pc, #44]	; (8010c04 <SD_CheckStatus+0x38>)
 8010bd8:	2201      	movs	r2, #1
 8010bda:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8010bdc:	f7ff ff6c 	bl	8010ab8 <BSP_SD_GetCardState>
 8010be0:	4603      	mov	r3, r0
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	d107      	bne.n	8010bf6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8010be6:	4b07      	ldr	r3, [pc, #28]	; (8010c04 <SD_CheckStatus+0x38>)
 8010be8:	781b      	ldrb	r3, [r3, #0]
 8010bea:	b2db      	uxtb	r3, r3
 8010bec:	f023 0301 	bic.w	r3, r3, #1
 8010bf0:	b2da      	uxtb	r2, r3
 8010bf2:	4b04      	ldr	r3, [pc, #16]	; (8010c04 <SD_CheckStatus+0x38>)
 8010bf4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8010bf6:	4b03      	ldr	r3, [pc, #12]	; (8010c04 <SD_CheckStatus+0x38>)
 8010bf8:	781b      	ldrb	r3, [r3, #0]
 8010bfa:	b2db      	uxtb	r3, r3
}
 8010bfc:	4618      	mov	r0, r3
 8010bfe:	3708      	adds	r7, #8
 8010c00:	46bd      	mov	sp, r7
 8010c02:	bd80      	pop	{r7, pc}
 8010c04:	20000009 	.word	0x20000009

08010c08 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8010c08:	b580      	push	{r7, lr}
 8010c0a:	b082      	sub	sp, #8
 8010c0c:	af00      	add	r7, sp, #0
 8010c0e:	4603      	mov	r3, r0
 8010c10:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8010c12:	f7ff fef7 	bl	8010a04 <BSP_SD_Init>
 8010c16:	4603      	mov	r3, r0
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d107      	bne.n	8010c2c <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8010c1c:	79fb      	ldrb	r3, [r7, #7]
 8010c1e:	4618      	mov	r0, r3
 8010c20:	f7ff ffd4 	bl	8010bcc <SD_CheckStatus>
 8010c24:	4603      	mov	r3, r0
 8010c26:	461a      	mov	r2, r3
 8010c28:	4b04      	ldr	r3, [pc, #16]	; (8010c3c <SD_initialize+0x34>)
 8010c2a:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8010c2c:	4b03      	ldr	r3, [pc, #12]	; (8010c3c <SD_initialize+0x34>)
 8010c2e:	781b      	ldrb	r3, [r3, #0]
 8010c30:	b2db      	uxtb	r3, r3
}
 8010c32:	4618      	mov	r0, r3
 8010c34:	3708      	adds	r7, #8
 8010c36:	46bd      	mov	sp, r7
 8010c38:	bd80      	pop	{r7, pc}
 8010c3a:	bf00      	nop
 8010c3c:	20000009 	.word	0x20000009

08010c40 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8010c40:	b580      	push	{r7, lr}
 8010c42:	b082      	sub	sp, #8
 8010c44:	af00      	add	r7, sp, #0
 8010c46:	4603      	mov	r3, r0
 8010c48:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8010c4a:	79fb      	ldrb	r3, [r7, #7]
 8010c4c:	4618      	mov	r0, r3
 8010c4e:	f7ff ffbd 	bl	8010bcc <SD_CheckStatus>
 8010c52:	4603      	mov	r3, r0
}
 8010c54:	4618      	mov	r0, r3
 8010c56:	3708      	adds	r7, #8
 8010c58:	46bd      	mov	sp, r7
 8010c5a:	bd80      	pop	{r7, pc}

08010c5c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8010c5c:	b580      	push	{r7, lr}
 8010c5e:	b086      	sub	sp, #24
 8010c60:	af00      	add	r7, sp, #0
 8010c62:	60b9      	str	r1, [r7, #8]
 8010c64:	607a      	str	r2, [r7, #4]
 8010c66:	603b      	str	r3, [r7, #0]
 8010c68:	4603      	mov	r3, r0
 8010c6a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010c6c:	2301      	movs	r3, #1
 8010c6e:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8010c70:	f247 5030 	movw	r0, #30000	; 0x7530
 8010c74:	f7ff ff8c 	bl	8010b90 <SD_CheckStatusWithTimeout>
 8010c78:	4603      	mov	r3, r0
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	da01      	bge.n	8010c82 <SD_read+0x26>
  {
    return res;
 8010c7e:	7dfb      	ldrb	r3, [r7, #23]
 8010c80:	e03b      	b.n	8010cfa <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8010c82:	683a      	ldr	r2, [r7, #0]
 8010c84:	6879      	ldr	r1, [r7, #4]
 8010c86:	68b8      	ldr	r0, [r7, #8]
 8010c88:	f7ff fee2 	bl	8010a50 <BSP_SD_ReadBlocks_DMA>
 8010c8c:	4603      	mov	r3, r0
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d132      	bne.n	8010cf8 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8010c92:	4b1c      	ldr	r3, [pc, #112]	; (8010d04 <SD_read+0xa8>)
 8010c94:	2200      	movs	r2, #0
 8010c96:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8010c98:	f7f8 fd62 	bl	8009760 <HAL_GetTick>
 8010c9c:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8010c9e:	bf00      	nop
 8010ca0:	4b18      	ldr	r3, [pc, #96]	; (8010d04 <SD_read+0xa8>)
 8010ca2:	681b      	ldr	r3, [r3, #0]
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	d108      	bne.n	8010cba <SD_read+0x5e>
 8010ca8:	f7f8 fd5a 	bl	8009760 <HAL_GetTick>
 8010cac:	4602      	mov	r2, r0
 8010cae:	693b      	ldr	r3, [r7, #16]
 8010cb0:	1ad3      	subs	r3, r2, r3
 8010cb2:	f247 522f 	movw	r2, #29999	; 0x752f
 8010cb6:	4293      	cmp	r3, r2
 8010cb8:	d9f2      	bls.n	8010ca0 <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 8010cba:	4b12      	ldr	r3, [pc, #72]	; (8010d04 <SD_read+0xa8>)
 8010cbc:	681b      	ldr	r3, [r3, #0]
 8010cbe:	2b00      	cmp	r3, #0
 8010cc0:	d102      	bne.n	8010cc8 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8010cc2:	2301      	movs	r3, #1
 8010cc4:	75fb      	strb	r3, [r7, #23]
 8010cc6:	e017      	b.n	8010cf8 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8010cc8:	4b0e      	ldr	r3, [pc, #56]	; (8010d04 <SD_read+0xa8>)
 8010cca:	2200      	movs	r2, #0
 8010ccc:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8010cce:	f7f8 fd47 	bl	8009760 <HAL_GetTick>
 8010cd2:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010cd4:	e007      	b.n	8010ce6 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010cd6:	f7ff feef 	bl	8010ab8 <BSP_SD_GetCardState>
 8010cda:	4603      	mov	r3, r0
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d102      	bne.n	8010ce6 <SD_read+0x8a>
          {
            res = RES_OK;
 8010ce0:	2300      	movs	r3, #0
 8010ce2:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8010ce4:	e008      	b.n	8010cf8 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010ce6:	f7f8 fd3b 	bl	8009760 <HAL_GetTick>
 8010cea:	4602      	mov	r2, r0
 8010cec:	693b      	ldr	r3, [r7, #16]
 8010cee:	1ad3      	subs	r3, r2, r3
 8010cf0:	f247 522f 	movw	r2, #29999	; 0x752f
 8010cf4:	4293      	cmp	r3, r2
 8010cf6:	d9ee      	bls.n	8010cd6 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8010cf8:	7dfb      	ldrb	r3, [r7, #23]
}
 8010cfa:	4618      	mov	r0, r3
 8010cfc:	3718      	adds	r7, #24
 8010cfe:	46bd      	mov	sp, r7
 8010d00:	bd80      	pop	{r7, pc}
 8010d02:	bf00      	nop
 8010d04:	200422dc 	.word	0x200422dc

08010d08 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8010d08:	b580      	push	{r7, lr}
 8010d0a:	b086      	sub	sp, #24
 8010d0c:	af00      	add	r7, sp, #0
 8010d0e:	60b9      	str	r1, [r7, #8]
 8010d10:	607a      	str	r2, [r7, #4]
 8010d12:	603b      	str	r3, [r7, #0]
 8010d14:	4603      	mov	r3, r0
 8010d16:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8010d18:	2301      	movs	r3, #1
 8010d1a:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8010d1c:	4b24      	ldr	r3, [pc, #144]	; (8010db0 <SD_write+0xa8>)
 8010d1e:	2200      	movs	r2, #0
 8010d20:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8010d22:	f247 5030 	movw	r0, #30000	; 0x7530
 8010d26:	f7ff ff33 	bl	8010b90 <SD_CheckStatusWithTimeout>
 8010d2a:	4603      	mov	r3, r0
 8010d2c:	2b00      	cmp	r3, #0
 8010d2e:	da01      	bge.n	8010d34 <SD_write+0x2c>
  {
    return res;
 8010d30:	7dfb      	ldrb	r3, [r7, #23]
 8010d32:	e038      	b.n	8010da6 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8010d34:	683a      	ldr	r2, [r7, #0]
 8010d36:	6879      	ldr	r1, [r7, #4]
 8010d38:	68b8      	ldr	r0, [r7, #8]
 8010d3a:	f7ff fea3 	bl	8010a84 <BSP_SD_WriteBlocks_DMA>
 8010d3e:	4603      	mov	r3, r0
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	d12f      	bne.n	8010da4 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8010d44:	f7f8 fd0c 	bl	8009760 <HAL_GetTick>
 8010d48:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8010d4a:	bf00      	nop
 8010d4c:	4b18      	ldr	r3, [pc, #96]	; (8010db0 <SD_write+0xa8>)
 8010d4e:	681b      	ldr	r3, [r3, #0]
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	d108      	bne.n	8010d66 <SD_write+0x5e>
 8010d54:	f7f8 fd04 	bl	8009760 <HAL_GetTick>
 8010d58:	4602      	mov	r2, r0
 8010d5a:	693b      	ldr	r3, [r7, #16]
 8010d5c:	1ad3      	subs	r3, r2, r3
 8010d5e:	f247 522f 	movw	r2, #29999	; 0x752f
 8010d62:	4293      	cmp	r3, r2
 8010d64:	d9f2      	bls.n	8010d4c <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 8010d66:	4b12      	ldr	r3, [pc, #72]	; (8010db0 <SD_write+0xa8>)
 8010d68:	681b      	ldr	r3, [r3, #0]
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	d102      	bne.n	8010d74 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8010d6e:	2301      	movs	r3, #1
 8010d70:	75fb      	strb	r3, [r7, #23]
 8010d72:	e017      	b.n	8010da4 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8010d74:	4b0e      	ldr	r3, [pc, #56]	; (8010db0 <SD_write+0xa8>)
 8010d76:	2200      	movs	r2, #0
 8010d78:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8010d7a:	f7f8 fcf1 	bl	8009760 <HAL_GetTick>
 8010d7e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010d80:	e007      	b.n	8010d92 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010d82:	f7ff fe99 	bl	8010ab8 <BSP_SD_GetCardState>
 8010d86:	4603      	mov	r3, r0
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d102      	bne.n	8010d92 <SD_write+0x8a>
          {
            res = RES_OK;
 8010d8c:	2300      	movs	r3, #0
 8010d8e:	75fb      	strb	r3, [r7, #23]
            break;
 8010d90:	e008      	b.n	8010da4 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8010d92:	f7f8 fce5 	bl	8009760 <HAL_GetTick>
 8010d96:	4602      	mov	r2, r0
 8010d98:	693b      	ldr	r3, [r7, #16]
 8010d9a:	1ad3      	subs	r3, r2, r3
 8010d9c:	f247 522f 	movw	r2, #29999	; 0x752f
 8010da0:	4293      	cmp	r3, r2
 8010da2:	d9ee      	bls.n	8010d82 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8010da4:	7dfb      	ldrb	r3, [r7, #23]
}
 8010da6:	4618      	mov	r0, r3
 8010da8:	3718      	adds	r7, #24
 8010daa:	46bd      	mov	sp, r7
 8010dac:	bd80      	pop	{r7, pc}
 8010dae:	bf00      	nop
 8010db0:	200422d8 	.word	0x200422d8

08010db4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8010db4:	b580      	push	{r7, lr}
 8010db6:	b08c      	sub	sp, #48	; 0x30
 8010db8:	af00      	add	r7, sp, #0
 8010dba:	4603      	mov	r3, r0
 8010dbc:	603a      	str	r2, [r7, #0]
 8010dbe:	71fb      	strb	r3, [r7, #7]
 8010dc0:	460b      	mov	r3, r1
 8010dc2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8010dc4:	2301      	movs	r3, #1
 8010dc6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8010dca:	4b25      	ldr	r3, [pc, #148]	; (8010e60 <SD_ioctl+0xac>)
 8010dcc:	781b      	ldrb	r3, [r3, #0]
 8010dce:	b2db      	uxtb	r3, r3
 8010dd0:	f003 0301 	and.w	r3, r3, #1
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d001      	beq.n	8010ddc <SD_ioctl+0x28>
 8010dd8:	2303      	movs	r3, #3
 8010dda:	e03c      	b.n	8010e56 <SD_ioctl+0xa2>

  switch (cmd)
 8010ddc:	79bb      	ldrb	r3, [r7, #6]
 8010dde:	2b03      	cmp	r3, #3
 8010de0:	d834      	bhi.n	8010e4c <SD_ioctl+0x98>
 8010de2:	a201      	add	r2, pc, #4	; (adr r2, 8010de8 <SD_ioctl+0x34>)
 8010de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010de8:	08010df9 	.word	0x08010df9
 8010dec:	08010e01 	.word	0x08010e01
 8010df0:	08010e19 	.word	0x08010e19
 8010df4:	08010e33 	.word	0x08010e33
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8010df8:	2300      	movs	r3, #0
 8010dfa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010dfe:	e028      	b.n	8010e52 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8010e00:	f107 030c 	add.w	r3, r7, #12
 8010e04:	4618      	mov	r0, r3
 8010e06:	f7ff fe67 	bl	8010ad8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8010e0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010e0c:	683b      	ldr	r3, [r7, #0]
 8010e0e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010e10:	2300      	movs	r3, #0
 8010e12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010e16:	e01c      	b.n	8010e52 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010e18:	f107 030c 	add.w	r3, r7, #12
 8010e1c:	4618      	mov	r0, r3
 8010e1e:	f7ff fe5b 	bl	8010ad8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8010e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e24:	b29a      	uxth	r2, r3
 8010e26:	683b      	ldr	r3, [r7, #0]
 8010e28:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8010e2a:	2300      	movs	r3, #0
 8010e2c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010e30:	e00f      	b.n	8010e52 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8010e32:	f107 030c 	add.w	r3, r7, #12
 8010e36:	4618      	mov	r0, r3
 8010e38:	f7ff fe4e 	bl	8010ad8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8010e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e3e:	0a5a      	lsrs	r2, r3, #9
 8010e40:	683b      	ldr	r3, [r7, #0]
 8010e42:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8010e44:	2300      	movs	r3, #0
 8010e46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8010e4a:	e002      	b.n	8010e52 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8010e4c:	2304      	movs	r3, #4
 8010e4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8010e52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8010e56:	4618      	mov	r0, r3
 8010e58:	3730      	adds	r7, #48	; 0x30
 8010e5a:	46bd      	mov	sp, r7
 8010e5c:	bd80      	pop	{r7, pc}
 8010e5e:	bf00      	nop
 8010e60:	20000009 	.word	0x20000009

08010e64 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8010e64:	b480      	push	{r7}
 8010e66:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8010e68:	4b03      	ldr	r3, [pc, #12]	; (8010e78 <BSP_SD_WriteCpltCallback+0x14>)
 8010e6a:	2201      	movs	r2, #1
 8010e6c:	601a      	str	r2, [r3, #0]
}
 8010e6e:	bf00      	nop
 8010e70:	46bd      	mov	sp, r7
 8010e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e76:	4770      	bx	lr
 8010e78:	200422d8 	.word	0x200422d8

08010e7c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8010e7c:	b480      	push	{r7}
 8010e7e:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8010e80:	4b03      	ldr	r3, [pc, #12]	; (8010e90 <BSP_SD_ReadCpltCallback+0x14>)
 8010e82:	2201      	movs	r2, #1
 8010e84:	601a      	str	r2, [r3, #0]
}
 8010e86:	bf00      	nop
 8010e88:	46bd      	mov	sp, r7
 8010e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e8e:	4770      	bx	lr
 8010e90:	200422dc 	.word	0x200422dc

08010e94 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8010e94:	b580      	push	{r7, lr}
 8010e96:	b084      	sub	sp, #16
 8010e98:	af00      	add	r7, sp, #0
 8010e9a:	4603      	mov	r3, r0
 8010e9c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8010e9e:	79fb      	ldrb	r3, [r7, #7]
 8010ea0:	4a08      	ldr	r2, [pc, #32]	; (8010ec4 <disk_status+0x30>)
 8010ea2:	009b      	lsls	r3, r3, #2
 8010ea4:	4413      	add	r3, r2
 8010ea6:	685b      	ldr	r3, [r3, #4]
 8010ea8:	685b      	ldr	r3, [r3, #4]
 8010eaa:	79fa      	ldrb	r2, [r7, #7]
 8010eac:	4905      	ldr	r1, [pc, #20]	; (8010ec4 <disk_status+0x30>)
 8010eae:	440a      	add	r2, r1
 8010eb0:	7a12      	ldrb	r2, [r2, #8]
 8010eb2:	4610      	mov	r0, r2
 8010eb4:	4798      	blx	r3
 8010eb6:	4603      	mov	r3, r0
 8010eb8:	73fb      	strb	r3, [r7, #15]
  return stat;
 8010eba:	7bfb      	ldrb	r3, [r7, #15]
}
 8010ebc:	4618      	mov	r0, r3
 8010ebe:	3710      	adds	r7, #16
 8010ec0:	46bd      	mov	sp, r7
 8010ec2:	bd80      	pop	{r7, pc}
 8010ec4:	20042308 	.word	0x20042308

08010ec8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8010ec8:	b580      	push	{r7, lr}
 8010eca:	b084      	sub	sp, #16
 8010ecc:	af00      	add	r7, sp, #0
 8010ece:	4603      	mov	r3, r0
 8010ed0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8010ed2:	2300      	movs	r3, #0
 8010ed4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8010ed6:	79fb      	ldrb	r3, [r7, #7]
 8010ed8:	4a0d      	ldr	r2, [pc, #52]	; (8010f10 <disk_initialize+0x48>)
 8010eda:	5cd3      	ldrb	r3, [r2, r3]
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d111      	bne.n	8010f04 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8010ee0:	79fb      	ldrb	r3, [r7, #7]
 8010ee2:	4a0b      	ldr	r2, [pc, #44]	; (8010f10 <disk_initialize+0x48>)
 8010ee4:	2101      	movs	r1, #1
 8010ee6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8010ee8:	79fb      	ldrb	r3, [r7, #7]
 8010eea:	4a09      	ldr	r2, [pc, #36]	; (8010f10 <disk_initialize+0x48>)
 8010eec:	009b      	lsls	r3, r3, #2
 8010eee:	4413      	add	r3, r2
 8010ef0:	685b      	ldr	r3, [r3, #4]
 8010ef2:	681b      	ldr	r3, [r3, #0]
 8010ef4:	79fa      	ldrb	r2, [r7, #7]
 8010ef6:	4906      	ldr	r1, [pc, #24]	; (8010f10 <disk_initialize+0x48>)
 8010ef8:	440a      	add	r2, r1
 8010efa:	7a12      	ldrb	r2, [r2, #8]
 8010efc:	4610      	mov	r0, r2
 8010efe:	4798      	blx	r3
 8010f00:	4603      	mov	r3, r0
 8010f02:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8010f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f06:	4618      	mov	r0, r3
 8010f08:	3710      	adds	r7, #16
 8010f0a:	46bd      	mov	sp, r7
 8010f0c:	bd80      	pop	{r7, pc}
 8010f0e:	bf00      	nop
 8010f10:	20042308 	.word	0x20042308

08010f14 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8010f14:	b590      	push	{r4, r7, lr}
 8010f16:	b087      	sub	sp, #28
 8010f18:	af00      	add	r7, sp, #0
 8010f1a:	60b9      	str	r1, [r7, #8]
 8010f1c:	607a      	str	r2, [r7, #4]
 8010f1e:	603b      	str	r3, [r7, #0]
 8010f20:	4603      	mov	r3, r0
 8010f22:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8010f24:	7bfb      	ldrb	r3, [r7, #15]
 8010f26:	4a0a      	ldr	r2, [pc, #40]	; (8010f50 <disk_read+0x3c>)
 8010f28:	009b      	lsls	r3, r3, #2
 8010f2a:	4413      	add	r3, r2
 8010f2c:	685b      	ldr	r3, [r3, #4]
 8010f2e:	689c      	ldr	r4, [r3, #8]
 8010f30:	7bfb      	ldrb	r3, [r7, #15]
 8010f32:	4a07      	ldr	r2, [pc, #28]	; (8010f50 <disk_read+0x3c>)
 8010f34:	4413      	add	r3, r2
 8010f36:	7a18      	ldrb	r0, [r3, #8]
 8010f38:	683b      	ldr	r3, [r7, #0]
 8010f3a:	687a      	ldr	r2, [r7, #4]
 8010f3c:	68b9      	ldr	r1, [r7, #8]
 8010f3e:	47a0      	blx	r4
 8010f40:	4603      	mov	r3, r0
 8010f42:	75fb      	strb	r3, [r7, #23]
  return res;
 8010f44:	7dfb      	ldrb	r3, [r7, #23]
}
 8010f46:	4618      	mov	r0, r3
 8010f48:	371c      	adds	r7, #28
 8010f4a:	46bd      	mov	sp, r7
 8010f4c:	bd90      	pop	{r4, r7, pc}
 8010f4e:	bf00      	nop
 8010f50:	20042308 	.word	0x20042308

08010f54 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8010f54:	b590      	push	{r4, r7, lr}
 8010f56:	b087      	sub	sp, #28
 8010f58:	af00      	add	r7, sp, #0
 8010f5a:	60b9      	str	r1, [r7, #8]
 8010f5c:	607a      	str	r2, [r7, #4]
 8010f5e:	603b      	str	r3, [r7, #0]
 8010f60:	4603      	mov	r3, r0
 8010f62:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8010f64:	7bfb      	ldrb	r3, [r7, #15]
 8010f66:	4a0a      	ldr	r2, [pc, #40]	; (8010f90 <disk_write+0x3c>)
 8010f68:	009b      	lsls	r3, r3, #2
 8010f6a:	4413      	add	r3, r2
 8010f6c:	685b      	ldr	r3, [r3, #4]
 8010f6e:	68dc      	ldr	r4, [r3, #12]
 8010f70:	7bfb      	ldrb	r3, [r7, #15]
 8010f72:	4a07      	ldr	r2, [pc, #28]	; (8010f90 <disk_write+0x3c>)
 8010f74:	4413      	add	r3, r2
 8010f76:	7a18      	ldrb	r0, [r3, #8]
 8010f78:	683b      	ldr	r3, [r7, #0]
 8010f7a:	687a      	ldr	r2, [r7, #4]
 8010f7c:	68b9      	ldr	r1, [r7, #8]
 8010f7e:	47a0      	blx	r4
 8010f80:	4603      	mov	r3, r0
 8010f82:	75fb      	strb	r3, [r7, #23]
  return res;
 8010f84:	7dfb      	ldrb	r3, [r7, #23]
}
 8010f86:	4618      	mov	r0, r3
 8010f88:	371c      	adds	r7, #28
 8010f8a:	46bd      	mov	sp, r7
 8010f8c:	bd90      	pop	{r4, r7, pc}
 8010f8e:	bf00      	nop
 8010f90:	20042308 	.word	0x20042308

08010f94 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8010f94:	b580      	push	{r7, lr}
 8010f96:	b084      	sub	sp, #16
 8010f98:	af00      	add	r7, sp, #0
 8010f9a:	4603      	mov	r3, r0
 8010f9c:	603a      	str	r2, [r7, #0]
 8010f9e:	71fb      	strb	r3, [r7, #7]
 8010fa0:	460b      	mov	r3, r1
 8010fa2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8010fa4:	79fb      	ldrb	r3, [r7, #7]
 8010fa6:	4a09      	ldr	r2, [pc, #36]	; (8010fcc <disk_ioctl+0x38>)
 8010fa8:	009b      	lsls	r3, r3, #2
 8010faa:	4413      	add	r3, r2
 8010fac:	685b      	ldr	r3, [r3, #4]
 8010fae:	691b      	ldr	r3, [r3, #16]
 8010fb0:	79fa      	ldrb	r2, [r7, #7]
 8010fb2:	4906      	ldr	r1, [pc, #24]	; (8010fcc <disk_ioctl+0x38>)
 8010fb4:	440a      	add	r2, r1
 8010fb6:	7a10      	ldrb	r0, [r2, #8]
 8010fb8:	79b9      	ldrb	r1, [r7, #6]
 8010fba:	683a      	ldr	r2, [r7, #0]
 8010fbc:	4798      	blx	r3
 8010fbe:	4603      	mov	r3, r0
 8010fc0:	73fb      	strb	r3, [r7, #15]
  return res;
 8010fc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8010fc4:	4618      	mov	r0, r3
 8010fc6:	3710      	adds	r7, #16
 8010fc8:	46bd      	mov	sp, r7
 8010fca:	bd80      	pop	{r7, pc}
 8010fcc:	20042308 	.word	0x20042308

08010fd0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8010fd0:	b480      	push	{r7}
 8010fd2:	b085      	sub	sp, #20
 8010fd4:	af00      	add	r7, sp, #0
 8010fd6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	3301      	adds	r3, #1
 8010fdc:	781b      	ldrb	r3, [r3, #0]
 8010fde:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8010fe0:	89fb      	ldrh	r3, [r7, #14]
 8010fe2:	021b      	lsls	r3, r3, #8
 8010fe4:	b21a      	sxth	r2, r3
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	781b      	ldrb	r3, [r3, #0]
 8010fea:	b21b      	sxth	r3, r3
 8010fec:	4313      	orrs	r3, r2
 8010fee:	b21b      	sxth	r3, r3
 8010ff0:	81fb      	strh	r3, [r7, #14]
	return rv;
 8010ff2:	89fb      	ldrh	r3, [r7, #14]
}
 8010ff4:	4618      	mov	r0, r3
 8010ff6:	3714      	adds	r7, #20
 8010ff8:	46bd      	mov	sp, r7
 8010ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ffe:	4770      	bx	lr

08011000 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8011000:	b480      	push	{r7}
 8011002:	b085      	sub	sp, #20
 8011004:	af00      	add	r7, sp, #0
 8011006:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	3303      	adds	r3, #3
 801100c:	781b      	ldrb	r3, [r3, #0]
 801100e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8011010:	68fb      	ldr	r3, [r7, #12]
 8011012:	021b      	lsls	r3, r3, #8
 8011014:	687a      	ldr	r2, [r7, #4]
 8011016:	3202      	adds	r2, #2
 8011018:	7812      	ldrb	r2, [r2, #0]
 801101a:	4313      	orrs	r3, r2
 801101c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801101e:	68fb      	ldr	r3, [r7, #12]
 8011020:	021b      	lsls	r3, r3, #8
 8011022:	687a      	ldr	r2, [r7, #4]
 8011024:	3201      	adds	r2, #1
 8011026:	7812      	ldrb	r2, [r2, #0]
 8011028:	4313      	orrs	r3, r2
 801102a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 801102c:	68fb      	ldr	r3, [r7, #12]
 801102e:	021b      	lsls	r3, r3, #8
 8011030:	687a      	ldr	r2, [r7, #4]
 8011032:	7812      	ldrb	r2, [r2, #0]
 8011034:	4313      	orrs	r3, r2
 8011036:	60fb      	str	r3, [r7, #12]
	return rv;
 8011038:	68fb      	ldr	r3, [r7, #12]
}
 801103a:	4618      	mov	r0, r3
 801103c:	3714      	adds	r7, #20
 801103e:	46bd      	mov	sp, r7
 8011040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011044:	4770      	bx	lr

08011046 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8011046:	b480      	push	{r7}
 8011048:	b083      	sub	sp, #12
 801104a:	af00      	add	r7, sp, #0
 801104c:	6078      	str	r0, [r7, #4]
 801104e:	460b      	mov	r3, r1
 8011050:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	1c5a      	adds	r2, r3, #1
 8011056:	607a      	str	r2, [r7, #4]
 8011058:	887a      	ldrh	r2, [r7, #2]
 801105a:	b2d2      	uxtb	r2, r2
 801105c:	701a      	strb	r2, [r3, #0]
 801105e:	887b      	ldrh	r3, [r7, #2]
 8011060:	0a1b      	lsrs	r3, r3, #8
 8011062:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8011064:	687b      	ldr	r3, [r7, #4]
 8011066:	1c5a      	adds	r2, r3, #1
 8011068:	607a      	str	r2, [r7, #4]
 801106a:	887a      	ldrh	r2, [r7, #2]
 801106c:	b2d2      	uxtb	r2, r2
 801106e:	701a      	strb	r2, [r3, #0]
}
 8011070:	bf00      	nop
 8011072:	370c      	adds	r7, #12
 8011074:	46bd      	mov	sp, r7
 8011076:	f85d 7b04 	ldr.w	r7, [sp], #4
 801107a:	4770      	bx	lr

0801107c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 801107c:	b480      	push	{r7}
 801107e:	b083      	sub	sp, #12
 8011080:	af00      	add	r7, sp, #0
 8011082:	6078      	str	r0, [r7, #4]
 8011084:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	1c5a      	adds	r2, r3, #1
 801108a:	607a      	str	r2, [r7, #4]
 801108c:	683a      	ldr	r2, [r7, #0]
 801108e:	b2d2      	uxtb	r2, r2
 8011090:	701a      	strb	r2, [r3, #0]
 8011092:	683b      	ldr	r3, [r7, #0]
 8011094:	0a1b      	lsrs	r3, r3, #8
 8011096:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	1c5a      	adds	r2, r3, #1
 801109c:	607a      	str	r2, [r7, #4]
 801109e:	683a      	ldr	r2, [r7, #0]
 80110a0:	b2d2      	uxtb	r2, r2
 80110a2:	701a      	strb	r2, [r3, #0]
 80110a4:	683b      	ldr	r3, [r7, #0]
 80110a6:	0a1b      	lsrs	r3, r3, #8
 80110a8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	1c5a      	adds	r2, r3, #1
 80110ae:	607a      	str	r2, [r7, #4]
 80110b0:	683a      	ldr	r2, [r7, #0]
 80110b2:	b2d2      	uxtb	r2, r2
 80110b4:	701a      	strb	r2, [r3, #0]
 80110b6:	683b      	ldr	r3, [r7, #0]
 80110b8:	0a1b      	lsrs	r3, r3, #8
 80110ba:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	1c5a      	adds	r2, r3, #1
 80110c0:	607a      	str	r2, [r7, #4]
 80110c2:	683a      	ldr	r2, [r7, #0]
 80110c4:	b2d2      	uxtb	r2, r2
 80110c6:	701a      	strb	r2, [r3, #0]
}
 80110c8:	bf00      	nop
 80110ca:	370c      	adds	r7, #12
 80110cc:	46bd      	mov	sp, r7
 80110ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110d2:	4770      	bx	lr

080110d4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80110d4:	b480      	push	{r7}
 80110d6:	b087      	sub	sp, #28
 80110d8:	af00      	add	r7, sp, #0
 80110da:	60f8      	str	r0, [r7, #12]
 80110dc:	60b9      	str	r1, [r7, #8]
 80110de:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80110e0:	68fb      	ldr	r3, [r7, #12]
 80110e2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80110e4:	68bb      	ldr	r3, [r7, #8]
 80110e6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	d00d      	beq.n	801110a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80110ee:	693a      	ldr	r2, [r7, #16]
 80110f0:	1c53      	adds	r3, r2, #1
 80110f2:	613b      	str	r3, [r7, #16]
 80110f4:	697b      	ldr	r3, [r7, #20]
 80110f6:	1c59      	adds	r1, r3, #1
 80110f8:	6179      	str	r1, [r7, #20]
 80110fa:	7812      	ldrb	r2, [r2, #0]
 80110fc:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	3b01      	subs	r3, #1
 8011102:	607b      	str	r3, [r7, #4]
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	2b00      	cmp	r3, #0
 8011108:	d1f1      	bne.n	80110ee <mem_cpy+0x1a>
	}
}
 801110a:	bf00      	nop
 801110c:	371c      	adds	r7, #28
 801110e:	46bd      	mov	sp, r7
 8011110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011114:	4770      	bx	lr

08011116 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8011116:	b480      	push	{r7}
 8011118:	b087      	sub	sp, #28
 801111a:	af00      	add	r7, sp, #0
 801111c:	60f8      	str	r0, [r7, #12]
 801111e:	60b9      	str	r1, [r7, #8]
 8011120:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8011122:	68fb      	ldr	r3, [r7, #12]
 8011124:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8011126:	697b      	ldr	r3, [r7, #20]
 8011128:	1c5a      	adds	r2, r3, #1
 801112a:	617a      	str	r2, [r7, #20]
 801112c:	68ba      	ldr	r2, [r7, #8]
 801112e:	b2d2      	uxtb	r2, r2
 8011130:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	3b01      	subs	r3, #1
 8011136:	607b      	str	r3, [r7, #4]
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	2b00      	cmp	r3, #0
 801113c:	d1f3      	bne.n	8011126 <mem_set+0x10>
}
 801113e:	bf00      	nop
 8011140:	371c      	adds	r7, #28
 8011142:	46bd      	mov	sp, r7
 8011144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011148:	4770      	bx	lr

0801114a <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 801114a:	b480      	push	{r7}
 801114c:	b089      	sub	sp, #36	; 0x24
 801114e:	af00      	add	r7, sp, #0
 8011150:	60f8      	str	r0, [r7, #12]
 8011152:	60b9      	str	r1, [r7, #8]
 8011154:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8011156:	68fb      	ldr	r3, [r7, #12]
 8011158:	61fb      	str	r3, [r7, #28]
 801115a:	68bb      	ldr	r3, [r7, #8]
 801115c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 801115e:	2300      	movs	r3, #0
 8011160:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8011162:	69fb      	ldr	r3, [r7, #28]
 8011164:	1c5a      	adds	r2, r3, #1
 8011166:	61fa      	str	r2, [r7, #28]
 8011168:	781b      	ldrb	r3, [r3, #0]
 801116a:	4619      	mov	r1, r3
 801116c:	69bb      	ldr	r3, [r7, #24]
 801116e:	1c5a      	adds	r2, r3, #1
 8011170:	61ba      	str	r2, [r7, #24]
 8011172:	781b      	ldrb	r3, [r3, #0]
 8011174:	1acb      	subs	r3, r1, r3
 8011176:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	3b01      	subs	r3, #1
 801117c:	607b      	str	r3, [r7, #4]
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	2b00      	cmp	r3, #0
 8011182:	d002      	beq.n	801118a <mem_cmp+0x40>
 8011184:	697b      	ldr	r3, [r7, #20]
 8011186:	2b00      	cmp	r3, #0
 8011188:	d0eb      	beq.n	8011162 <mem_cmp+0x18>

	return r;
 801118a:	697b      	ldr	r3, [r7, #20]
}
 801118c:	4618      	mov	r0, r3
 801118e:	3724      	adds	r7, #36	; 0x24
 8011190:	46bd      	mov	sp, r7
 8011192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011196:	4770      	bx	lr

08011198 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8011198:	b480      	push	{r7}
 801119a:	b083      	sub	sp, #12
 801119c:	af00      	add	r7, sp, #0
 801119e:	6078      	str	r0, [r7, #4]
 80111a0:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80111a2:	e002      	b.n	80111aa <chk_chr+0x12>
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	3301      	adds	r3, #1
 80111a8:	607b      	str	r3, [r7, #4]
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	781b      	ldrb	r3, [r3, #0]
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	d005      	beq.n	80111be <chk_chr+0x26>
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	781b      	ldrb	r3, [r3, #0]
 80111b6:	461a      	mov	r2, r3
 80111b8:	683b      	ldr	r3, [r7, #0]
 80111ba:	4293      	cmp	r3, r2
 80111bc:	d1f2      	bne.n	80111a4 <chk_chr+0xc>
	return *str;
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	781b      	ldrb	r3, [r3, #0]
}
 80111c2:	4618      	mov	r0, r3
 80111c4:	370c      	adds	r7, #12
 80111c6:	46bd      	mov	sp, r7
 80111c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111cc:	4770      	bx	lr
	...

080111d0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80111d0:	b480      	push	{r7}
 80111d2:	b085      	sub	sp, #20
 80111d4:	af00      	add	r7, sp, #0
 80111d6:	6078      	str	r0, [r7, #4]
 80111d8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80111da:	2300      	movs	r3, #0
 80111dc:	60bb      	str	r3, [r7, #8]
 80111de:	68bb      	ldr	r3, [r7, #8]
 80111e0:	60fb      	str	r3, [r7, #12]
 80111e2:	e029      	b.n	8011238 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80111e4:	4a27      	ldr	r2, [pc, #156]	; (8011284 <chk_lock+0xb4>)
 80111e6:	68fb      	ldr	r3, [r7, #12]
 80111e8:	011b      	lsls	r3, r3, #4
 80111ea:	4413      	add	r3, r2
 80111ec:	681b      	ldr	r3, [r3, #0]
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	d01d      	beq.n	801122e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80111f2:	4a24      	ldr	r2, [pc, #144]	; (8011284 <chk_lock+0xb4>)
 80111f4:	68fb      	ldr	r3, [r7, #12]
 80111f6:	011b      	lsls	r3, r3, #4
 80111f8:	4413      	add	r3, r2
 80111fa:	681a      	ldr	r2, [r3, #0]
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	681b      	ldr	r3, [r3, #0]
 8011200:	429a      	cmp	r2, r3
 8011202:	d116      	bne.n	8011232 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8011204:	4a1f      	ldr	r2, [pc, #124]	; (8011284 <chk_lock+0xb4>)
 8011206:	68fb      	ldr	r3, [r7, #12]
 8011208:	011b      	lsls	r3, r3, #4
 801120a:	4413      	add	r3, r2
 801120c:	3304      	adds	r3, #4
 801120e:	681a      	ldr	r2, [r3, #0]
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8011214:	429a      	cmp	r2, r3
 8011216:	d10c      	bne.n	8011232 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8011218:	4a1a      	ldr	r2, [pc, #104]	; (8011284 <chk_lock+0xb4>)
 801121a:	68fb      	ldr	r3, [r7, #12]
 801121c:	011b      	lsls	r3, r3, #4
 801121e:	4413      	add	r3, r2
 8011220:	3308      	adds	r3, #8
 8011222:	681a      	ldr	r2, [r3, #0]
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8011228:	429a      	cmp	r2, r3
 801122a:	d102      	bne.n	8011232 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801122c:	e007      	b.n	801123e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 801122e:	2301      	movs	r3, #1
 8011230:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8011232:	68fb      	ldr	r3, [r7, #12]
 8011234:	3301      	adds	r3, #1
 8011236:	60fb      	str	r3, [r7, #12]
 8011238:	68fb      	ldr	r3, [r7, #12]
 801123a:	2b01      	cmp	r3, #1
 801123c:	d9d2      	bls.n	80111e4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 801123e:	68fb      	ldr	r3, [r7, #12]
 8011240:	2b02      	cmp	r3, #2
 8011242:	d109      	bne.n	8011258 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8011244:	68bb      	ldr	r3, [r7, #8]
 8011246:	2b00      	cmp	r3, #0
 8011248:	d102      	bne.n	8011250 <chk_lock+0x80>
 801124a:	683b      	ldr	r3, [r7, #0]
 801124c:	2b02      	cmp	r3, #2
 801124e:	d101      	bne.n	8011254 <chk_lock+0x84>
 8011250:	2300      	movs	r3, #0
 8011252:	e010      	b.n	8011276 <chk_lock+0xa6>
 8011254:	2312      	movs	r3, #18
 8011256:	e00e      	b.n	8011276 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8011258:	683b      	ldr	r3, [r7, #0]
 801125a:	2b00      	cmp	r3, #0
 801125c:	d108      	bne.n	8011270 <chk_lock+0xa0>
 801125e:	4a09      	ldr	r2, [pc, #36]	; (8011284 <chk_lock+0xb4>)
 8011260:	68fb      	ldr	r3, [r7, #12]
 8011262:	011b      	lsls	r3, r3, #4
 8011264:	4413      	add	r3, r2
 8011266:	330c      	adds	r3, #12
 8011268:	881b      	ldrh	r3, [r3, #0]
 801126a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801126e:	d101      	bne.n	8011274 <chk_lock+0xa4>
 8011270:	2310      	movs	r3, #16
 8011272:	e000      	b.n	8011276 <chk_lock+0xa6>
 8011274:	2300      	movs	r3, #0
}
 8011276:	4618      	mov	r0, r3
 8011278:	3714      	adds	r7, #20
 801127a:	46bd      	mov	sp, r7
 801127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011280:	4770      	bx	lr
 8011282:	bf00      	nop
 8011284:	200422e8 	.word	0x200422e8

08011288 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8011288:	b480      	push	{r7}
 801128a:	b083      	sub	sp, #12
 801128c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801128e:	2300      	movs	r3, #0
 8011290:	607b      	str	r3, [r7, #4]
 8011292:	e002      	b.n	801129a <enq_lock+0x12>
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	3301      	adds	r3, #1
 8011298:	607b      	str	r3, [r7, #4]
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	2b01      	cmp	r3, #1
 801129e:	d806      	bhi.n	80112ae <enq_lock+0x26>
 80112a0:	4a09      	ldr	r2, [pc, #36]	; (80112c8 <enq_lock+0x40>)
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	011b      	lsls	r3, r3, #4
 80112a6:	4413      	add	r3, r2
 80112a8:	681b      	ldr	r3, [r3, #0]
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	d1f2      	bne.n	8011294 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	2b02      	cmp	r3, #2
 80112b2:	bf14      	ite	ne
 80112b4:	2301      	movne	r3, #1
 80112b6:	2300      	moveq	r3, #0
 80112b8:	b2db      	uxtb	r3, r3
}
 80112ba:	4618      	mov	r0, r3
 80112bc:	370c      	adds	r7, #12
 80112be:	46bd      	mov	sp, r7
 80112c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112c4:	4770      	bx	lr
 80112c6:	bf00      	nop
 80112c8:	200422e8 	.word	0x200422e8

080112cc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80112cc:	b480      	push	{r7}
 80112ce:	b085      	sub	sp, #20
 80112d0:	af00      	add	r7, sp, #0
 80112d2:	6078      	str	r0, [r7, #4]
 80112d4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80112d6:	2300      	movs	r3, #0
 80112d8:	60fb      	str	r3, [r7, #12]
 80112da:	e01f      	b.n	801131c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80112dc:	4a41      	ldr	r2, [pc, #260]	; (80113e4 <inc_lock+0x118>)
 80112de:	68fb      	ldr	r3, [r7, #12]
 80112e0:	011b      	lsls	r3, r3, #4
 80112e2:	4413      	add	r3, r2
 80112e4:	681a      	ldr	r2, [r3, #0]
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	681b      	ldr	r3, [r3, #0]
 80112ea:	429a      	cmp	r2, r3
 80112ec:	d113      	bne.n	8011316 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80112ee:	4a3d      	ldr	r2, [pc, #244]	; (80113e4 <inc_lock+0x118>)
 80112f0:	68fb      	ldr	r3, [r7, #12]
 80112f2:	011b      	lsls	r3, r3, #4
 80112f4:	4413      	add	r3, r2
 80112f6:	3304      	adds	r3, #4
 80112f8:	681a      	ldr	r2, [r3, #0]
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80112fe:	429a      	cmp	r2, r3
 8011300:	d109      	bne.n	8011316 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8011302:	4a38      	ldr	r2, [pc, #224]	; (80113e4 <inc_lock+0x118>)
 8011304:	68fb      	ldr	r3, [r7, #12]
 8011306:	011b      	lsls	r3, r3, #4
 8011308:	4413      	add	r3, r2
 801130a:	3308      	adds	r3, #8
 801130c:	681a      	ldr	r2, [r3, #0]
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8011312:	429a      	cmp	r2, r3
 8011314:	d006      	beq.n	8011324 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8011316:	68fb      	ldr	r3, [r7, #12]
 8011318:	3301      	adds	r3, #1
 801131a:	60fb      	str	r3, [r7, #12]
 801131c:	68fb      	ldr	r3, [r7, #12]
 801131e:	2b01      	cmp	r3, #1
 8011320:	d9dc      	bls.n	80112dc <inc_lock+0x10>
 8011322:	e000      	b.n	8011326 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8011324:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8011326:	68fb      	ldr	r3, [r7, #12]
 8011328:	2b02      	cmp	r3, #2
 801132a:	d132      	bne.n	8011392 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801132c:	2300      	movs	r3, #0
 801132e:	60fb      	str	r3, [r7, #12]
 8011330:	e002      	b.n	8011338 <inc_lock+0x6c>
 8011332:	68fb      	ldr	r3, [r7, #12]
 8011334:	3301      	adds	r3, #1
 8011336:	60fb      	str	r3, [r7, #12]
 8011338:	68fb      	ldr	r3, [r7, #12]
 801133a:	2b01      	cmp	r3, #1
 801133c:	d806      	bhi.n	801134c <inc_lock+0x80>
 801133e:	4a29      	ldr	r2, [pc, #164]	; (80113e4 <inc_lock+0x118>)
 8011340:	68fb      	ldr	r3, [r7, #12]
 8011342:	011b      	lsls	r3, r3, #4
 8011344:	4413      	add	r3, r2
 8011346:	681b      	ldr	r3, [r3, #0]
 8011348:	2b00      	cmp	r3, #0
 801134a:	d1f2      	bne.n	8011332 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 801134c:	68fb      	ldr	r3, [r7, #12]
 801134e:	2b02      	cmp	r3, #2
 8011350:	d101      	bne.n	8011356 <inc_lock+0x8a>
 8011352:	2300      	movs	r3, #0
 8011354:	e040      	b.n	80113d8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	681a      	ldr	r2, [r3, #0]
 801135a:	4922      	ldr	r1, [pc, #136]	; (80113e4 <inc_lock+0x118>)
 801135c:	68fb      	ldr	r3, [r7, #12]
 801135e:	011b      	lsls	r3, r3, #4
 8011360:	440b      	add	r3, r1
 8011362:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	689a      	ldr	r2, [r3, #8]
 8011368:	491e      	ldr	r1, [pc, #120]	; (80113e4 <inc_lock+0x118>)
 801136a:	68fb      	ldr	r3, [r7, #12]
 801136c:	011b      	lsls	r3, r3, #4
 801136e:	440b      	add	r3, r1
 8011370:	3304      	adds	r3, #4
 8011372:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	695a      	ldr	r2, [r3, #20]
 8011378:	491a      	ldr	r1, [pc, #104]	; (80113e4 <inc_lock+0x118>)
 801137a:	68fb      	ldr	r3, [r7, #12]
 801137c:	011b      	lsls	r3, r3, #4
 801137e:	440b      	add	r3, r1
 8011380:	3308      	adds	r3, #8
 8011382:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8011384:	4a17      	ldr	r2, [pc, #92]	; (80113e4 <inc_lock+0x118>)
 8011386:	68fb      	ldr	r3, [r7, #12]
 8011388:	011b      	lsls	r3, r3, #4
 801138a:	4413      	add	r3, r2
 801138c:	330c      	adds	r3, #12
 801138e:	2200      	movs	r2, #0
 8011390:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8011392:	683b      	ldr	r3, [r7, #0]
 8011394:	2b00      	cmp	r3, #0
 8011396:	d009      	beq.n	80113ac <inc_lock+0xe0>
 8011398:	4a12      	ldr	r2, [pc, #72]	; (80113e4 <inc_lock+0x118>)
 801139a:	68fb      	ldr	r3, [r7, #12]
 801139c:	011b      	lsls	r3, r3, #4
 801139e:	4413      	add	r3, r2
 80113a0:	330c      	adds	r3, #12
 80113a2:	881b      	ldrh	r3, [r3, #0]
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	d001      	beq.n	80113ac <inc_lock+0xe0>
 80113a8:	2300      	movs	r3, #0
 80113aa:	e015      	b.n	80113d8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80113ac:	683b      	ldr	r3, [r7, #0]
 80113ae:	2b00      	cmp	r3, #0
 80113b0:	d108      	bne.n	80113c4 <inc_lock+0xf8>
 80113b2:	4a0c      	ldr	r2, [pc, #48]	; (80113e4 <inc_lock+0x118>)
 80113b4:	68fb      	ldr	r3, [r7, #12]
 80113b6:	011b      	lsls	r3, r3, #4
 80113b8:	4413      	add	r3, r2
 80113ba:	330c      	adds	r3, #12
 80113bc:	881b      	ldrh	r3, [r3, #0]
 80113be:	3301      	adds	r3, #1
 80113c0:	b29a      	uxth	r2, r3
 80113c2:	e001      	b.n	80113c8 <inc_lock+0xfc>
 80113c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80113c8:	4906      	ldr	r1, [pc, #24]	; (80113e4 <inc_lock+0x118>)
 80113ca:	68fb      	ldr	r3, [r7, #12]
 80113cc:	011b      	lsls	r3, r3, #4
 80113ce:	440b      	add	r3, r1
 80113d0:	330c      	adds	r3, #12
 80113d2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80113d4:	68fb      	ldr	r3, [r7, #12]
 80113d6:	3301      	adds	r3, #1
}
 80113d8:	4618      	mov	r0, r3
 80113da:	3714      	adds	r7, #20
 80113dc:	46bd      	mov	sp, r7
 80113de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113e2:	4770      	bx	lr
 80113e4:	200422e8 	.word	0x200422e8

080113e8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80113e8:	b480      	push	{r7}
 80113ea:	b085      	sub	sp, #20
 80113ec:	af00      	add	r7, sp, #0
 80113ee:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	3b01      	subs	r3, #1
 80113f4:	607b      	str	r3, [r7, #4]
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	2b01      	cmp	r3, #1
 80113fa:	d825      	bhi.n	8011448 <dec_lock+0x60>
		n = Files[i].ctr;
 80113fc:	4a17      	ldr	r2, [pc, #92]	; (801145c <dec_lock+0x74>)
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	011b      	lsls	r3, r3, #4
 8011402:	4413      	add	r3, r2
 8011404:	330c      	adds	r3, #12
 8011406:	881b      	ldrh	r3, [r3, #0]
 8011408:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 801140a:	89fb      	ldrh	r3, [r7, #14]
 801140c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011410:	d101      	bne.n	8011416 <dec_lock+0x2e>
 8011412:	2300      	movs	r3, #0
 8011414:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8011416:	89fb      	ldrh	r3, [r7, #14]
 8011418:	2b00      	cmp	r3, #0
 801141a:	d002      	beq.n	8011422 <dec_lock+0x3a>
 801141c:	89fb      	ldrh	r3, [r7, #14]
 801141e:	3b01      	subs	r3, #1
 8011420:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8011422:	4a0e      	ldr	r2, [pc, #56]	; (801145c <dec_lock+0x74>)
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	011b      	lsls	r3, r3, #4
 8011428:	4413      	add	r3, r2
 801142a:	330c      	adds	r3, #12
 801142c:	89fa      	ldrh	r2, [r7, #14]
 801142e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8011430:	89fb      	ldrh	r3, [r7, #14]
 8011432:	2b00      	cmp	r3, #0
 8011434:	d105      	bne.n	8011442 <dec_lock+0x5a>
 8011436:	4a09      	ldr	r2, [pc, #36]	; (801145c <dec_lock+0x74>)
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	011b      	lsls	r3, r3, #4
 801143c:	4413      	add	r3, r2
 801143e:	2200      	movs	r2, #0
 8011440:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8011442:	2300      	movs	r3, #0
 8011444:	737b      	strb	r3, [r7, #13]
 8011446:	e001      	b.n	801144c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8011448:	2302      	movs	r3, #2
 801144a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 801144c:	7b7b      	ldrb	r3, [r7, #13]
}
 801144e:	4618      	mov	r0, r3
 8011450:	3714      	adds	r7, #20
 8011452:	46bd      	mov	sp, r7
 8011454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011458:	4770      	bx	lr
 801145a:	bf00      	nop
 801145c:	200422e8 	.word	0x200422e8

08011460 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8011460:	b480      	push	{r7}
 8011462:	b085      	sub	sp, #20
 8011464:	af00      	add	r7, sp, #0
 8011466:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8011468:	2300      	movs	r3, #0
 801146a:	60fb      	str	r3, [r7, #12]
 801146c:	e010      	b.n	8011490 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 801146e:	4a0d      	ldr	r2, [pc, #52]	; (80114a4 <clear_lock+0x44>)
 8011470:	68fb      	ldr	r3, [r7, #12]
 8011472:	011b      	lsls	r3, r3, #4
 8011474:	4413      	add	r3, r2
 8011476:	681b      	ldr	r3, [r3, #0]
 8011478:	687a      	ldr	r2, [r7, #4]
 801147a:	429a      	cmp	r2, r3
 801147c:	d105      	bne.n	801148a <clear_lock+0x2a>
 801147e:	4a09      	ldr	r2, [pc, #36]	; (80114a4 <clear_lock+0x44>)
 8011480:	68fb      	ldr	r3, [r7, #12]
 8011482:	011b      	lsls	r3, r3, #4
 8011484:	4413      	add	r3, r2
 8011486:	2200      	movs	r2, #0
 8011488:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801148a:	68fb      	ldr	r3, [r7, #12]
 801148c:	3301      	adds	r3, #1
 801148e:	60fb      	str	r3, [r7, #12]
 8011490:	68fb      	ldr	r3, [r7, #12]
 8011492:	2b01      	cmp	r3, #1
 8011494:	d9eb      	bls.n	801146e <clear_lock+0xe>
	}
}
 8011496:	bf00      	nop
 8011498:	3714      	adds	r7, #20
 801149a:	46bd      	mov	sp, r7
 801149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114a0:	4770      	bx	lr
 80114a2:	bf00      	nop
 80114a4:	200422e8 	.word	0x200422e8

080114a8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80114a8:	b580      	push	{r7, lr}
 80114aa:	b086      	sub	sp, #24
 80114ac:	af00      	add	r7, sp, #0
 80114ae:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80114b0:	2300      	movs	r3, #0
 80114b2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	78db      	ldrb	r3, [r3, #3]
 80114b8:	2b00      	cmp	r3, #0
 80114ba:	d034      	beq.n	8011526 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80114c0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	7858      	ldrb	r0, [r3, #1]
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80114cc:	2301      	movs	r3, #1
 80114ce:	697a      	ldr	r2, [r7, #20]
 80114d0:	f7ff fd40 	bl	8010f54 <disk_write>
 80114d4:	4603      	mov	r3, r0
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d002      	beq.n	80114e0 <sync_window+0x38>
			res = FR_DISK_ERR;
 80114da:	2301      	movs	r3, #1
 80114dc:	73fb      	strb	r3, [r7, #15]
 80114de:	e022      	b.n	8011526 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	2200      	movs	r2, #0
 80114e4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80114ea:	697a      	ldr	r2, [r7, #20]
 80114ec:	1ad2      	subs	r2, r2, r3
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	6a1b      	ldr	r3, [r3, #32]
 80114f2:	429a      	cmp	r2, r3
 80114f4:	d217      	bcs.n	8011526 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	789b      	ldrb	r3, [r3, #2]
 80114fa:	613b      	str	r3, [r7, #16]
 80114fc:	e010      	b.n	8011520 <sync_window+0x78>
					wsect += fs->fsize;
 80114fe:	687b      	ldr	r3, [r7, #4]
 8011500:	6a1b      	ldr	r3, [r3, #32]
 8011502:	697a      	ldr	r2, [r7, #20]
 8011504:	4413      	add	r3, r2
 8011506:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	7858      	ldrb	r0, [r3, #1]
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011512:	2301      	movs	r3, #1
 8011514:	697a      	ldr	r2, [r7, #20]
 8011516:	f7ff fd1d 	bl	8010f54 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801151a:	693b      	ldr	r3, [r7, #16]
 801151c:	3b01      	subs	r3, #1
 801151e:	613b      	str	r3, [r7, #16]
 8011520:	693b      	ldr	r3, [r7, #16]
 8011522:	2b01      	cmp	r3, #1
 8011524:	d8eb      	bhi.n	80114fe <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8011526:	7bfb      	ldrb	r3, [r7, #15]
}
 8011528:	4618      	mov	r0, r3
 801152a:	3718      	adds	r7, #24
 801152c:	46bd      	mov	sp, r7
 801152e:	bd80      	pop	{r7, pc}

08011530 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8011530:	b580      	push	{r7, lr}
 8011532:	b084      	sub	sp, #16
 8011534:	af00      	add	r7, sp, #0
 8011536:	6078      	str	r0, [r7, #4]
 8011538:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801153a:	2300      	movs	r3, #0
 801153c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011542:	683a      	ldr	r2, [r7, #0]
 8011544:	429a      	cmp	r2, r3
 8011546:	d01b      	beq.n	8011580 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8011548:	6878      	ldr	r0, [r7, #4]
 801154a:	f7ff ffad 	bl	80114a8 <sync_window>
 801154e:	4603      	mov	r3, r0
 8011550:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8011552:	7bfb      	ldrb	r3, [r7, #15]
 8011554:	2b00      	cmp	r3, #0
 8011556:	d113      	bne.n	8011580 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	7858      	ldrb	r0, [r3, #1]
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011562:	2301      	movs	r3, #1
 8011564:	683a      	ldr	r2, [r7, #0]
 8011566:	f7ff fcd5 	bl	8010f14 <disk_read>
 801156a:	4603      	mov	r3, r0
 801156c:	2b00      	cmp	r3, #0
 801156e:	d004      	beq.n	801157a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8011570:	f04f 33ff 	mov.w	r3, #4294967295
 8011574:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8011576:	2301      	movs	r3, #1
 8011578:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	683a      	ldr	r2, [r7, #0]
 801157e:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8011580:	7bfb      	ldrb	r3, [r7, #15]
}
 8011582:	4618      	mov	r0, r3
 8011584:	3710      	adds	r7, #16
 8011586:	46bd      	mov	sp, r7
 8011588:	bd80      	pop	{r7, pc}
	...

0801158c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 801158c:	b580      	push	{r7, lr}
 801158e:	b084      	sub	sp, #16
 8011590:	af00      	add	r7, sp, #0
 8011592:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8011594:	6878      	ldr	r0, [r7, #4]
 8011596:	f7ff ff87 	bl	80114a8 <sync_window>
 801159a:	4603      	mov	r3, r0
 801159c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801159e:	7bfb      	ldrb	r3, [r7, #15]
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	d159      	bne.n	8011658 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	781b      	ldrb	r3, [r3, #0]
 80115a8:	2b03      	cmp	r3, #3
 80115aa:	d149      	bne.n	8011640 <sync_fs+0xb4>
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	791b      	ldrb	r3, [r3, #4]
 80115b0:	2b01      	cmp	r3, #1
 80115b2:	d145      	bne.n	8011640 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	899b      	ldrh	r3, [r3, #12]
 80115be:	461a      	mov	r2, r3
 80115c0:	2100      	movs	r1, #0
 80115c2:	f7ff fda8 	bl	8011116 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80115c6:	687b      	ldr	r3, [r7, #4]
 80115c8:	3338      	adds	r3, #56	; 0x38
 80115ca:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80115ce:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80115d2:	4618      	mov	r0, r3
 80115d4:	f7ff fd37 	bl	8011046 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	3338      	adds	r3, #56	; 0x38
 80115dc:	4921      	ldr	r1, [pc, #132]	; (8011664 <sync_fs+0xd8>)
 80115de:	4618      	mov	r0, r3
 80115e0:	f7ff fd4c 	bl	801107c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80115e4:	687b      	ldr	r3, [r7, #4]
 80115e6:	3338      	adds	r3, #56	; 0x38
 80115e8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80115ec:	491e      	ldr	r1, [pc, #120]	; (8011668 <sync_fs+0xdc>)
 80115ee:	4618      	mov	r0, r3
 80115f0:	f7ff fd44 	bl	801107c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	3338      	adds	r3, #56	; 0x38
 80115f8:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	695b      	ldr	r3, [r3, #20]
 8011600:	4619      	mov	r1, r3
 8011602:	4610      	mov	r0, r2
 8011604:	f7ff fd3a 	bl	801107c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8011608:	687b      	ldr	r3, [r7, #4]
 801160a:	3338      	adds	r3, #56	; 0x38
 801160c:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	691b      	ldr	r3, [r3, #16]
 8011614:	4619      	mov	r1, r3
 8011616:	4610      	mov	r0, r2
 8011618:	f7ff fd30 	bl	801107c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011620:	1c5a      	adds	r2, r3, #1
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	7858      	ldrb	r0, [r3, #1]
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011634:	2301      	movs	r3, #1
 8011636:	f7ff fc8d 	bl	8010f54 <disk_write>
			fs->fsi_flag = 0;
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	2200      	movs	r2, #0
 801163e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	785b      	ldrb	r3, [r3, #1]
 8011644:	2200      	movs	r2, #0
 8011646:	2100      	movs	r1, #0
 8011648:	4618      	mov	r0, r3
 801164a:	f7ff fca3 	bl	8010f94 <disk_ioctl>
 801164e:	4603      	mov	r3, r0
 8011650:	2b00      	cmp	r3, #0
 8011652:	d001      	beq.n	8011658 <sync_fs+0xcc>
 8011654:	2301      	movs	r3, #1
 8011656:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8011658:	7bfb      	ldrb	r3, [r7, #15]
}
 801165a:	4618      	mov	r0, r3
 801165c:	3710      	adds	r7, #16
 801165e:	46bd      	mov	sp, r7
 8011660:	bd80      	pop	{r7, pc}
 8011662:	bf00      	nop
 8011664:	41615252 	.word	0x41615252
 8011668:	61417272 	.word	0x61417272

0801166c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 801166c:	b480      	push	{r7}
 801166e:	b083      	sub	sp, #12
 8011670:	af00      	add	r7, sp, #0
 8011672:	6078      	str	r0, [r7, #4]
 8011674:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8011676:	683b      	ldr	r3, [r7, #0]
 8011678:	3b02      	subs	r3, #2
 801167a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	69db      	ldr	r3, [r3, #28]
 8011680:	3b02      	subs	r3, #2
 8011682:	683a      	ldr	r2, [r7, #0]
 8011684:	429a      	cmp	r2, r3
 8011686:	d301      	bcc.n	801168c <clust2sect+0x20>
 8011688:	2300      	movs	r3, #0
 801168a:	e008      	b.n	801169e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 801168c:	687b      	ldr	r3, [r7, #4]
 801168e:	895b      	ldrh	r3, [r3, #10]
 8011690:	461a      	mov	r2, r3
 8011692:	683b      	ldr	r3, [r7, #0]
 8011694:	fb03 f202 	mul.w	r2, r3, r2
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801169c:	4413      	add	r3, r2
}
 801169e:	4618      	mov	r0, r3
 80116a0:	370c      	adds	r7, #12
 80116a2:	46bd      	mov	sp, r7
 80116a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116a8:	4770      	bx	lr

080116aa <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80116aa:	b580      	push	{r7, lr}
 80116ac:	b086      	sub	sp, #24
 80116ae:	af00      	add	r7, sp, #0
 80116b0:	6078      	str	r0, [r7, #4]
 80116b2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	681b      	ldr	r3, [r3, #0]
 80116b8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80116ba:	683b      	ldr	r3, [r7, #0]
 80116bc:	2b01      	cmp	r3, #1
 80116be:	d904      	bls.n	80116ca <get_fat+0x20>
 80116c0:	693b      	ldr	r3, [r7, #16]
 80116c2:	69db      	ldr	r3, [r3, #28]
 80116c4:	683a      	ldr	r2, [r7, #0]
 80116c6:	429a      	cmp	r2, r3
 80116c8:	d302      	bcc.n	80116d0 <get_fat+0x26>
		val = 1;	/* Internal error */
 80116ca:	2301      	movs	r3, #1
 80116cc:	617b      	str	r3, [r7, #20]
 80116ce:	e0b7      	b.n	8011840 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80116d0:	f04f 33ff 	mov.w	r3, #4294967295
 80116d4:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80116d6:	693b      	ldr	r3, [r7, #16]
 80116d8:	781b      	ldrb	r3, [r3, #0]
 80116da:	2b02      	cmp	r3, #2
 80116dc:	d05a      	beq.n	8011794 <get_fat+0xea>
 80116de:	2b03      	cmp	r3, #3
 80116e0:	d07d      	beq.n	80117de <get_fat+0x134>
 80116e2:	2b01      	cmp	r3, #1
 80116e4:	f040 80a2 	bne.w	801182c <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80116e8:	683b      	ldr	r3, [r7, #0]
 80116ea:	60fb      	str	r3, [r7, #12]
 80116ec:	68fb      	ldr	r3, [r7, #12]
 80116ee:	085b      	lsrs	r3, r3, #1
 80116f0:	68fa      	ldr	r2, [r7, #12]
 80116f2:	4413      	add	r3, r2
 80116f4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80116f6:	693b      	ldr	r3, [r7, #16]
 80116f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80116fa:	693b      	ldr	r3, [r7, #16]
 80116fc:	899b      	ldrh	r3, [r3, #12]
 80116fe:	4619      	mov	r1, r3
 8011700:	68fb      	ldr	r3, [r7, #12]
 8011702:	fbb3 f3f1 	udiv	r3, r3, r1
 8011706:	4413      	add	r3, r2
 8011708:	4619      	mov	r1, r3
 801170a:	6938      	ldr	r0, [r7, #16]
 801170c:	f7ff ff10 	bl	8011530 <move_window>
 8011710:	4603      	mov	r3, r0
 8011712:	2b00      	cmp	r3, #0
 8011714:	f040 808d 	bne.w	8011832 <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 8011718:	68fb      	ldr	r3, [r7, #12]
 801171a:	1c5a      	adds	r2, r3, #1
 801171c:	60fa      	str	r2, [r7, #12]
 801171e:	693a      	ldr	r2, [r7, #16]
 8011720:	8992      	ldrh	r2, [r2, #12]
 8011722:	fbb3 f1f2 	udiv	r1, r3, r2
 8011726:	fb02 f201 	mul.w	r2, r2, r1
 801172a:	1a9b      	subs	r3, r3, r2
 801172c:	693a      	ldr	r2, [r7, #16]
 801172e:	4413      	add	r3, r2
 8011730:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011734:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011736:	693b      	ldr	r3, [r7, #16]
 8011738:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801173a:	693b      	ldr	r3, [r7, #16]
 801173c:	899b      	ldrh	r3, [r3, #12]
 801173e:	4619      	mov	r1, r3
 8011740:	68fb      	ldr	r3, [r7, #12]
 8011742:	fbb3 f3f1 	udiv	r3, r3, r1
 8011746:	4413      	add	r3, r2
 8011748:	4619      	mov	r1, r3
 801174a:	6938      	ldr	r0, [r7, #16]
 801174c:	f7ff fef0 	bl	8011530 <move_window>
 8011750:	4603      	mov	r3, r0
 8011752:	2b00      	cmp	r3, #0
 8011754:	d16f      	bne.n	8011836 <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8011756:	693b      	ldr	r3, [r7, #16]
 8011758:	899b      	ldrh	r3, [r3, #12]
 801175a:	461a      	mov	r2, r3
 801175c:	68fb      	ldr	r3, [r7, #12]
 801175e:	fbb3 f1f2 	udiv	r1, r3, r2
 8011762:	fb02 f201 	mul.w	r2, r2, r1
 8011766:	1a9b      	subs	r3, r3, r2
 8011768:	693a      	ldr	r2, [r7, #16]
 801176a:	4413      	add	r3, r2
 801176c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011770:	021b      	lsls	r3, r3, #8
 8011772:	461a      	mov	r2, r3
 8011774:	68bb      	ldr	r3, [r7, #8]
 8011776:	4313      	orrs	r3, r2
 8011778:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801177a:	683b      	ldr	r3, [r7, #0]
 801177c:	f003 0301 	and.w	r3, r3, #1
 8011780:	2b00      	cmp	r3, #0
 8011782:	d002      	beq.n	801178a <get_fat+0xe0>
 8011784:	68bb      	ldr	r3, [r7, #8]
 8011786:	091b      	lsrs	r3, r3, #4
 8011788:	e002      	b.n	8011790 <get_fat+0xe6>
 801178a:	68bb      	ldr	r3, [r7, #8]
 801178c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8011790:	617b      	str	r3, [r7, #20]
			break;
 8011792:	e055      	b.n	8011840 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011794:	693b      	ldr	r3, [r7, #16]
 8011796:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011798:	693b      	ldr	r3, [r7, #16]
 801179a:	899b      	ldrh	r3, [r3, #12]
 801179c:	085b      	lsrs	r3, r3, #1
 801179e:	b29b      	uxth	r3, r3
 80117a0:	4619      	mov	r1, r3
 80117a2:	683b      	ldr	r3, [r7, #0]
 80117a4:	fbb3 f3f1 	udiv	r3, r3, r1
 80117a8:	4413      	add	r3, r2
 80117aa:	4619      	mov	r1, r3
 80117ac:	6938      	ldr	r0, [r7, #16]
 80117ae:	f7ff febf 	bl	8011530 <move_window>
 80117b2:	4603      	mov	r3, r0
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	d140      	bne.n	801183a <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80117b8:	693b      	ldr	r3, [r7, #16]
 80117ba:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80117be:	683b      	ldr	r3, [r7, #0]
 80117c0:	005b      	lsls	r3, r3, #1
 80117c2:	693a      	ldr	r2, [r7, #16]
 80117c4:	8992      	ldrh	r2, [r2, #12]
 80117c6:	fbb3 f0f2 	udiv	r0, r3, r2
 80117ca:	fb02 f200 	mul.w	r2, r2, r0
 80117ce:	1a9b      	subs	r3, r3, r2
 80117d0:	440b      	add	r3, r1
 80117d2:	4618      	mov	r0, r3
 80117d4:	f7ff fbfc 	bl	8010fd0 <ld_word>
 80117d8:	4603      	mov	r3, r0
 80117da:	617b      	str	r3, [r7, #20]
			break;
 80117dc:	e030      	b.n	8011840 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80117de:	693b      	ldr	r3, [r7, #16]
 80117e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80117e2:	693b      	ldr	r3, [r7, #16]
 80117e4:	899b      	ldrh	r3, [r3, #12]
 80117e6:	089b      	lsrs	r3, r3, #2
 80117e8:	b29b      	uxth	r3, r3
 80117ea:	4619      	mov	r1, r3
 80117ec:	683b      	ldr	r3, [r7, #0]
 80117ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80117f2:	4413      	add	r3, r2
 80117f4:	4619      	mov	r1, r3
 80117f6:	6938      	ldr	r0, [r7, #16]
 80117f8:	f7ff fe9a 	bl	8011530 <move_window>
 80117fc:	4603      	mov	r3, r0
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d11d      	bne.n	801183e <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8011802:	693b      	ldr	r3, [r7, #16]
 8011804:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011808:	683b      	ldr	r3, [r7, #0]
 801180a:	009b      	lsls	r3, r3, #2
 801180c:	693a      	ldr	r2, [r7, #16]
 801180e:	8992      	ldrh	r2, [r2, #12]
 8011810:	fbb3 f0f2 	udiv	r0, r3, r2
 8011814:	fb02 f200 	mul.w	r2, r2, r0
 8011818:	1a9b      	subs	r3, r3, r2
 801181a:	440b      	add	r3, r1
 801181c:	4618      	mov	r0, r3
 801181e:	f7ff fbef 	bl	8011000 <ld_dword>
 8011822:	4603      	mov	r3, r0
 8011824:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8011828:	617b      	str	r3, [r7, #20]
			break;
 801182a:	e009      	b.n	8011840 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 801182c:	2301      	movs	r3, #1
 801182e:	617b      	str	r3, [r7, #20]
 8011830:	e006      	b.n	8011840 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011832:	bf00      	nop
 8011834:	e004      	b.n	8011840 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011836:	bf00      	nop
 8011838:	e002      	b.n	8011840 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801183a:	bf00      	nop
 801183c:	e000      	b.n	8011840 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801183e:	bf00      	nop
		}
	}

	return val;
 8011840:	697b      	ldr	r3, [r7, #20]
}
 8011842:	4618      	mov	r0, r3
 8011844:	3718      	adds	r7, #24
 8011846:	46bd      	mov	sp, r7
 8011848:	bd80      	pop	{r7, pc}

0801184a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 801184a:	b590      	push	{r4, r7, lr}
 801184c:	b089      	sub	sp, #36	; 0x24
 801184e:	af00      	add	r7, sp, #0
 8011850:	60f8      	str	r0, [r7, #12]
 8011852:	60b9      	str	r1, [r7, #8]
 8011854:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8011856:	2302      	movs	r3, #2
 8011858:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 801185a:	68bb      	ldr	r3, [r7, #8]
 801185c:	2b01      	cmp	r3, #1
 801185e:	f240 8106 	bls.w	8011a6e <put_fat+0x224>
 8011862:	68fb      	ldr	r3, [r7, #12]
 8011864:	69db      	ldr	r3, [r3, #28]
 8011866:	68ba      	ldr	r2, [r7, #8]
 8011868:	429a      	cmp	r2, r3
 801186a:	f080 8100 	bcs.w	8011a6e <put_fat+0x224>
		switch (fs->fs_type) {
 801186e:	68fb      	ldr	r3, [r7, #12]
 8011870:	781b      	ldrb	r3, [r3, #0]
 8011872:	2b02      	cmp	r3, #2
 8011874:	f000 8088 	beq.w	8011988 <put_fat+0x13e>
 8011878:	2b03      	cmp	r3, #3
 801187a:	f000 80b0 	beq.w	80119de <put_fat+0x194>
 801187e:	2b01      	cmp	r3, #1
 8011880:	f040 80f5 	bne.w	8011a6e <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8011884:	68bb      	ldr	r3, [r7, #8]
 8011886:	61bb      	str	r3, [r7, #24]
 8011888:	69bb      	ldr	r3, [r7, #24]
 801188a:	085b      	lsrs	r3, r3, #1
 801188c:	69ba      	ldr	r2, [r7, #24]
 801188e:	4413      	add	r3, r2
 8011890:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011892:	68fb      	ldr	r3, [r7, #12]
 8011894:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8011896:	68fb      	ldr	r3, [r7, #12]
 8011898:	899b      	ldrh	r3, [r3, #12]
 801189a:	4619      	mov	r1, r3
 801189c:	69bb      	ldr	r3, [r7, #24]
 801189e:	fbb3 f3f1 	udiv	r3, r3, r1
 80118a2:	4413      	add	r3, r2
 80118a4:	4619      	mov	r1, r3
 80118a6:	68f8      	ldr	r0, [r7, #12]
 80118a8:	f7ff fe42 	bl	8011530 <move_window>
 80118ac:	4603      	mov	r3, r0
 80118ae:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80118b0:	7ffb      	ldrb	r3, [r7, #31]
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	f040 80d4 	bne.w	8011a60 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 80118b8:	68fb      	ldr	r3, [r7, #12]
 80118ba:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80118be:	69bb      	ldr	r3, [r7, #24]
 80118c0:	1c5a      	adds	r2, r3, #1
 80118c2:	61ba      	str	r2, [r7, #24]
 80118c4:	68fa      	ldr	r2, [r7, #12]
 80118c6:	8992      	ldrh	r2, [r2, #12]
 80118c8:	fbb3 f0f2 	udiv	r0, r3, r2
 80118cc:	fb02 f200 	mul.w	r2, r2, r0
 80118d0:	1a9b      	subs	r3, r3, r2
 80118d2:	440b      	add	r3, r1
 80118d4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80118d6:	68bb      	ldr	r3, [r7, #8]
 80118d8:	f003 0301 	and.w	r3, r3, #1
 80118dc:	2b00      	cmp	r3, #0
 80118de:	d00d      	beq.n	80118fc <put_fat+0xb2>
 80118e0:	697b      	ldr	r3, [r7, #20]
 80118e2:	781b      	ldrb	r3, [r3, #0]
 80118e4:	b25b      	sxtb	r3, r3
 80118e6:	f003 030f 	and.w	r3, r3, #15
 80118ea:	b25a      	sxtb	r2, r3
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	b2db      	uxtb	r3, r3
 80118f0:	011b      	lsls	r3, r3, #4
 80118f2:	b25b      	sxtb	r3, r3
 80118f4:	4313      	orrs	r3, r2
 80118f6:	b25b      	sxtb	r3, r3
 80118f8:	b2db      	uxtb	r3, r3
 80118fa:	e001      	b.n	8011900 <put_fat+0xb6>
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	b2db      	uxtb	r3, r3
 8011900:	697a      	ldr	r2, [r7, #20]
 8011902:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011904:	68fb      	ldr	r3, [r7, #12]
 8011906:	2201      	movs	r2, #1
 8011908:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801190a:	68fb      	ldr	r3, [r7, #12]
 801190c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801190e:	68fb      	ldr	r3, [r7, #12]
 8011910:	899b      	ldrh	r3, [r3, #12]
 8011912:	4619      	mov	r1, r3
 8011914:	69bb      	ldr	r3, [r7, #24]
 8011916:	fbb3 f3f1 	udiv	r3, r3, r1
 801191a:	4413      	add	r3, r2
 801191c:	4619      	mov	r1, r3
 801191e:	68f8      	ldr	r0, [r7, #12]
 8011920:	f7ff fe06 	bl	8011530 <move_window>
 8011924:	4603      	mov	r3, r0
 8011926:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011928:	7ffb      	ldrb	r3, [r7, #31]
 801192a:	2b00      	cmp	r3, #0
 801192c:	f040 809a 	bne.w	8011a64 <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 8011930:	68fb      	ldr	r3, [r7, #12]
 8011932:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011936:	68fb      	ldr	r3, [r7, #12]
 8011938:	899b      	ldrh	r3, [r3, #12]
 801193a:	461a      	mov	r2, r3
 801193c:	69bb      	ldr	r3, [r7, #24]
 801193e:	fbb3 f0f2 	udiv	r0, r3, r2
 8011942:	fb02 f200 	mul.w	r2, r2, r0
 8011946:	1a9b      	subs	r3, r3, r2
 8011948:	440b      	add	r3, r1
 801194a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 801194c:	68bb      	ldr	r3, [r7, #8]
 801194e:	f003 0301 	and.w	r3, r3, #1
 8011952:	2b00      	cmp	r3, #0
 8011954:	d003      	beq.n	801195e <put_fat+0x114>
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	091b      	lsrs	r3, r3, #4
 801195a:	b2db      	uxtb	r3, r3
 801195c:	e00e      	b.n	801197c <put_fat+0x132>
 801195e:	697b      	ldr	r3, [r7, #20]
 8011960:	781b      	ldrb	r3, [r3, #0]
 8011962:	b25b      	sxtb	r3, r3
 8011964:	f023 030f 	bic.w	r3, r3, #15
 8011968:	b25a      	sxtb	r2, r3
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	0a1b      	lsrs	r3, r3, #8
 801196e:	b25b      	sxtb	r3, r3
 8011970:	f003 030f 	and.w	r3, r3, #15
 8011974:	b25b      	sxtb	r3, r3
 8011976:	4313      	orrs	r3, r2
 8011978:	b25b      	sxtb	r3, r3
 801197a:	b2db      	uxtb	r3, r3
 801197c:	697a      	ldr	r2, [r7, #20]
 801197e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8011980:	68fb      	ldr	r3, [r7, #12]
 8011982:	2201      	movs	r2, #1
 8011984:	70da      	strb	r2, [r3, #3]
			break;
 8011986:	e072      	b.n	8011a6e <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8011988:	68fb      	ldr	r3, [r7, #12]
 801198a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801198c:	68fb      	ldr	r3, [r7, #12]
 801198e:	899b      	ldrh	r3, [r3, #12]
 8011990:	085b      	lsrs	r3, r3, #1
 8011992:	b29b      	uxth	r3, r3
 8011994:	4619      	mov	r1, r3
 8011996:	68bb      	ldr	r3, [r7, #8]
 8011998:	fbb3 f3f1 	udiv	r3, r3, r1
 801199c:	4413      	add	r3, r2
 801199e:	4619      	mov	r1, r3
 80119a0:	68f8      	ldr	r0, [r7, #12]
 80119a2:	f7ff fdc5 	bl	8011530 <move_window>
 80119a6:	4603      	mov	r3, r0
 80119a8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80119aa:	7ffb      	ldrb	r3, [r7, #31]
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	d15b      	bne.n	8011a68 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80119b0:	68fb      	ldr	r3, [r7, #12]
 80119b2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80119b6:	68bb      	ldr	r3, [r7, #8]
 80119b8:	005b      	lsls	r3, r3, #1
 80119ba:	68fa      	ldr	r2, [r7, #12]
 80119bc:	8992      	ldrh	r2, [r2, #12]
 80119be:	fbb3 f0f2 	udiv	r0, r3, r2
 80119c2:	fb02 f200 	mul.w	r2, r2, r0
 80119c6:	1a9b      	subs	r3, r3, r2
 80119c8:	440b      	add	r3, r1
 80119ca:	687a      	ldr	r2, [r7, #4]
 80119cc:	b292      	uxth	r2, r2
 80119ce:	4611      	mov	r1, r2
 80119d0:	4618      	mov	r0, r3
 80119d2:	f7ff fb38 	bl	8011046 <st_word>
			fs->wflag = 1;
 80119d6:	68fb      	ldr	r3, [r7, #12]
 80119d8:	2201      	movs	r2, #1
 80119da:	70da      	strb	r2, [r3, #3]
			break;
 80119dc:	e047      	b.n	8011a6e <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80119de:	68fb      	ldr	r3, [r7, #12]
 80119e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80119e2:	68fb      	ldr	r3, [r7, #12]
 80119e4:	899b      	ldrh	r3, [r3, #12]
 80119e6:	089b      	lsrs	r3, r3, #2
 80119e8:	b29b      	uxth	r3, r3
 80119ea:	4619      	mov	r1, r3
 80119ec:	68bb      	ldr	r3, [r7, #8]
 80119ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80119f2:	4413      	add	r3, r2
 80119f4:	4619      	mov	r1, r3
 80119f6:	68f8      	ldr	r0, [r7, #12]
 80119f8:	f7ff fd9a 	bl	8011530 <move_window>
 80119fc:	4603      	mov	r3, r0
 80119fe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8011a00:	7ffb      	ldrb	r3, [r7, #31]
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	d132      	bne.n	8011a6c <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8011a0c:	68fb      	ldr	r3, [r7, #12]
 8011a0e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011a12:	68bb      	ldr	r3, [r7, #8]
 8011a14:	009b      	lsls	r3, r3, #2
 8011a16:	68fa      	ldr	r2, [r7, #12]
 8011a18:	8992      	ldrh	r2, [r2, #12]
 8011a1a:	fbb3 f0f2 	udiv	r0, r3, r2
 8011a1e:	fb02 f200 	mul.w	r2, r2, r0
 8011a22:	1a9b      	subs	r3, r3, r2
 8011a24:	440b      	add	r3, r1
 8011a26:	4618      	mov	r0, r3
 8011a28:	f7ff faea 	bl	8011000 <ld_dword>
 8011a2c:	4603      	mov	r3, r0
 8011a2e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8011a32:	4323      	orrs	r3, r4
 8011a34:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8011a36:	68fb      	ldr	r3, [r7, #12]
 8011a38:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011a3c:	68bb      	ldr	r3, [r7, #8]
 8011a3e:	009b      	lsls	r3, r3, #2
 8011a40:	68fa      	ldr	r2, [r7, #12]
 8011a42:	8992      	ldrh	r2, [r2, #12]
 8011a44:	fbb3 f0f2 	udiv	r0, r3, r2
 8011a48:	fb02 f200 	mul.w	r2, r2, r0
 8011a4c:	1a9b      	subs	r3, r3, r2
 8011a4e:	440b      	add	r3, r1
 8011a50:	6879      	ldr	r1, [r7, #4]
 8011a52:	4618      	mov	r0, r3
 8011a54:	f7ff fb12 	bl	801107c <st_dword>
			fs->wflag = 1;
 8011a58:	68fb      	ldr	r3, [r7, #12]
 8011a5a:	2201      	movs	r2, #1
 8011a5c:	70da      	strb	r2, [r3, #3]
			break;
 8011a5e:	e006      	b.n	8011a6e <put_fat+0x224>
			if (res != FR_OK) break;
 8011a60:	bf00      	nop
 8011a62:	e004      	b.n	8011a6e <put_fat+0x224>
			if (res != FR_OK) break;
 8011a64:	bf00      	nop
 8011a66:	e002      	b.n	8011a6e <put_fat+0x224>
			if (res != FR_OK) break;
 8011a68:	bf00      	nop
 8011a6a:	e000      	b.n	8011a6e <put_fat+0x224>
			if (res != FR_OK) break;
 8011a6c:	bf00      	nop
		}
	}
	return res;
 8011a6e:	7ffb      	ldrb	r3, [r7, #31]
}
 8011a70:	4618      	mov	r0, r3
 8011a72:	3724      	adds	r7, #36	; 0x24
 8011a74:	46bd      	mov	sp, r7
 8011a76:	bd90      	pop	{r4, r7, pc}

08011a78 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8011a78:	b580      	push	{r7, lr}
 8011a7a:	b088      	sub	sp, #32
 8011a7c:	af00      	add	r7, sp, #0
 8011a7e:	60f8      	str	r0, [r7, #12]
 8011a80:	60b9      	str	r1, [r7, #8]
 8011a82:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8011a84:	2300      	movs	r3, #0
 8011a86:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8011a88:	68fb      	ldr	r3, [r7, #12]
 8011a8a:	681b      	ldr	r3, [r3, #0]
 8011a8c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8011a8e:	68bb      	ldr	r3, [r7, #8]
 8011a90:	2b01      	cmp	r3, #1
 8011a92:	d904      	bls.n	8011a9e <remove_chain+0x26>
 8011a94:	69bb      	ldr	r3, [r7, #24]
 8011a96:	69db      	ldr	r3, [r3, #28]
 8011a98:	68ba      	ldr	r2, [r7, #8]
 8011a9a:	429a      	cmp	r2, r3
 8011a9c:	d301      	bcc.n	8011aa2 <remove_chain+0x2a>
 8011a9e:	2302      	movs	r3, #2
 8011aa0:	e04b      	b.n	8011b3a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	2b00      	cmp	r3, #0
 8011aa6:	d00c      	beq.n	8011ac2 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8011aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8011aac:	6879      	ldr	r1, [r7, #4]
 8011aae:	69b8      	ldr	r0, [r7, #24]
 8011ab0:	f7ff fecb 	bl	801184a <put_fat>
 8011ab4:	4603      	mov	r3, r0
 8011ab6:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8011ab8:	7ffb      	ldrb	r3, [r7, #31]
 8011aba:	2b00      	cmp	r3, #0
 8011abc:	d001      	beq.n	8011ac2 <remove_chain+0x4a>
 8011abe:	7ffb      	ldrb	r3, [r7, #31]
 8011ac0:	e03b      	b.n	8011b3a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8011ac2:	68b9      	ldr	r1, [r7, #8]
 8011ac4:	68f8      	ldr	r0, [r7, #12]
 8011ac6:	f7ff fdf0 	bl	80116aa <get_fat>
 8011aca:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8011acc:	697b      	ldr	r3, [r7, #20]
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	d031      	beq.n	8011b36 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8011ad2:	697b      	ldr	r3, [r7, #20]
 8011ad4:	2b01      	cmp	r3, #1
 8011ad6:	d101      	bne.n	8011adc <remove_chain+0x64>
 8011ad8:	2302      	movs	r3, #2
 8011ada:	e02e      	b.n	8011b3a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8011adc:	697b      	ldr	r3, [r7, #20]
 8011ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ae2:	d101      	bne.n	8011ae8 <remove_chain+0x70>
 8011ae4:	2301      	movs	r3, #1
 8011ae6:	e028      	b.n	8011b3a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8011ae8:	2200      	movs	r2, #0
 8011aea:	68b9      	ldr	r1, [r7, #8]
 8011aec:	69b8      	ldr	r0, [r7, #24]
 8011aee:	f7ff feac 	bl	801184a <put_fat>
 8011af2:	4603      	mov	r3, r0
 8011af4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8011af6:	7ffb      	ldrb	r3, [r7, #31]
 8011af8:	2b00      	cmp	r3, #0
 8011afa:	d001      	beq.n	8011b00 <remove_chain+0x88>
 8011afc:	7ffb      	ldrb	r3, [r7, #31]
 8011afe:	e01c      	b.n	8011b3a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8011b00:	69bb      	ldr	r3, [r7, #24]
 8011b02:	695a      	ldr	r2, [r3, #20]
 8011b04:	69bb      	ldr	r3, [r7, #24]
 8011b06:	69db      	ldr	r3, [r3, #28]
 8011b08:	3b02      	subs	r3, #2
 8011b0a:	429a      	cmp	r2, r3
 8011b0c:	d20b      	bcs.n	8011b26 <remove_chain+0xae>
			fs->free_clst++;
 8011b0e:	69bb      	ldr	r3, [r7, #24]
 8011b10:	695b      	ldr	r3, [r3, #20]
 8011b12:	1c5a      	adds	r2, r3, #1
 8011b14:	69bb      	ldr	r3, [r7, #24]
 8011b16:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8011b18:	69bb      	ldr	r3, [r7, #24]
 8011b1a:	791b      	ldrb	r3, [r3, #4]
 8011b1c:	f043 0301 	orr.w	r3, r3, #1
 8011b20:	b2da      	uxtb	r2, r3
 8011b22:	69bb      	ldr	r3, [r7, #24]
 8011b24:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8011b26:	697b      	ldr	r3, [r7, #20]
 8011b28:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8011b2a:	69bb      	ldr	r3, [r7, #24]
 8011b2c:	69db      	ldr	r3, [r3, #28]
 8011b2e:	68ba      	ldr	r2, [r7, #8]
 8011b30:	429a      	cmp	r2, r3
 8011b32:	d3c6      	bcc.n	8011ac2 <remove_chain+0x4a>
 8011b34:	e000      	b.n	8011b38 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8011b36:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8011b38:	2300      	movs	r3, #0
}
 8011b3a:	4618      	mov	r0, r3
 8011b3c:	3720      	adds	r7, #32
 8011b3e:	46bd      	mov	sp, r7
 8011b40:	bd80      	pop	{r7, pc}

08011b42 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8011b42:	b580      	push	{r7, lr}
 8011b44:	b088      	sub	sp, #32
 8011b46:	af00      	add	r7, sp, #0
 8011b48:	6078      	str	r0, [r7, #4]
 8011b4a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8011b4c:	687b      	ldr	r3, [r7, #4]
 8011b4e:	681b      	ldr	r3, [r3, #0]
 8011b50:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8011b52:	683b      	ldr	r3, [r7, #0]
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	d10d      	bne.n	8011b74 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8011b58:	693b      	ldr	r3, [r7, #16]
 8011b5a:	691b      	ldr	r3, [r3, #16]
 8011b5c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8011b5e:	69bb      	ldr	r3, [r7, #24]
 8011b60:	2b00      	cmp	r3, #0
 8011b62:	d004      	beq.n	8011b6e <create_chain+0x2c>
 8011b64:	693b      	ldr	r3, [r7, #16]
 8011b66:	69db      	ldr	r3, [r3, #28]
 8011b68:	69ba      	ldr	r2, [r7, #24]
 8011b6a:	429a      	cmp	r2, r3
 8011b6c:	d31b      	bcc.n	8011ba6 <create_chain+0x64>
 8011b6e:	2301      	movs	r3, #1
 8011b70:	61bb      	str	r3, [r7, #24]
 8011b72:	e018      	b.n	8011ba6 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8011b74:	6839      	ldr	r1, [r7, #0]
 8011b76:	6878      	ldr	r0, [r7, #4]
 8011b78:	f7ff fd97 	bl	80116aa <get_fat>
 8011b7c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8011b7e:	68fb      	ldr	r3, [r7, #12]
 8011b80:	2b01      	cmp	r3, #1
 8011b82:	d801      	bhi.n	8011b88 <create_chain+0x46>
 8011b84:	2301      	movs	r3, #1
 8011b86:	e070      	b.n	8011c6a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8011b88:	68fb      	ldr	r3, [r7, #12]
 8011b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b8e:	d101      	bne.n	8011b94 <create_chain+0x52>
 8011b90:	68fb      	ldr	r3, [r7, #12]
 8011b92:	e06a      	b.n	8011c6a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8011b94:	693b      	ldr	r3, [r7, #16]
 8011b96:	69db      	ldr	r3, [r3, #28]
 8011b98:	68fa      	ldr	r2, [r7, #12]
 8011b9a:	429a      	cmp	r2, r3
 8011b9c:	d201      	bcs.n	8011ba2 <create_chain+0x60>
 8011b9e:	68fb      	ldr	r3, [r7, #12]
 8011ba0:	e063      	b.n	8011c6a <create_chain+0x128>
		scl = clst;
 8011ba2:	683b      	ldr	r3, [r7, #0]
 8011ba4:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8011ba6:	69bb      	ldr	r3, [r7, #24]
 8011ba8:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8011baa:	69fb      	ldr	r3, [r7, #28]
 8011bac:	3301      	adds	r3, #1
 8011bae:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8011bb0:	693b      	ldr	r3, [r7, #16]
 8011bb2:	69db      	ldr	r3, [r3, #28]
 8011bb4:	69fa      	ldr	r2, [r7, #28]
 8011bb6:	429a      	cmp	r2, r3
 8011bb8:	d307      	bcc.n	8011bca <create_chain+0x88>
				ncl = 2;
 8011bba:	2302      	movs	r3, #2
 8011bbc:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8011bbe:	69fa      	ldr	r2, [r7, #28]
 8011bc0:	69bb      	ldr	r3, [r7, #24]
 8011bc2:	429a      	cmp	r2, r3
 8011bc4:	d901      	bls.n	8011bca <create_chain+0x88>
 8011bc6:	2300      	movs	r3, #0
 8011bc8:	e04f      	b.n	8011c6a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8011bca:	69f9      	ldr	r1, [r7, #28]
 8011bcc:	6878      	ldr	r0, [r7, #4]
 8011bce:	f7ff fd6c 	bl	80116aa <get_fat>
 8011bd2:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8011bd4:	68fb      	ldr	r3, [r7, #12]
 8011bd6:	2b00      	cmp	r3, #0
 8011bd8:	d00e      	beq.n	8011bf8 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8011bda:	68fb      	ldr	r3, [r7, #12]
 8011bdc:	2b01      	cmp	r3, #1
 8011bde:	d003      	beq.n	8011be8 <create_chain+0xa6>
 8011be0:	68fb      	ldr	r3, [r7, #12]
 8011be2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011be6:	d101      	bne.n	8011bec <create_chain+0xaa>
 8011be8:	68fb      	ldr	r3, [r7, #12]
 8011bea:	e03e      	b.n	8011c6a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8011bec:	69fa      	ldr	r2, [r7, #28]
 8011bee:	69bb      	ldr	r3, [r7, #24]
 8011bf0:	429a      	cmp	r2, r3
 8011bf2:	d1da      	bne.n	8011baa <create_chain+0x68>
 8011bf4:	2300      	movs	r3, #0
 8011bf6:	e038      	b.n	8011c6a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8011bf8:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8011bfa:	f04f 32ff 	mov.w	r2, #4294967295
 8011bfe:	69f9      	ldr	r1, [r7, #28]
 8011c00:	6938      	ldr	r0, [r7, #16]
 8011c02:	f7ff fe22 	bl	801184a <put_fat>
 8011c06:	4603      	mov	r3, r0
 8011c08:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8011c0a:	7dfb      	ldrb	r3, [r7, #23]
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	d109      	bne.n	8011c24 <create_chain+0xe2>
 8011c10:	683b      	ldr	r3, [r7, #0]
 8011c12:	2b00      	cmp	r3, #0
 8011c14:	d006      	beq.n	8011c24 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8011c16:	69fa      	ldr	r2, [r7, #28]
 8011c18:	6839      	ldr	r1, [r7, #0]
 8011c1a:	6938      	ldr	r0, [r7, #16]
 8011c1c:	f7ff fe15 	bl	801184a <put_fat>
 8011c20:	4603      	mov	r3, r0
 8011c22:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8011c24:	7dfb      	ldrb	r3, [r7, #23]
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	d116      	bne.n	8011c58 <create_chain+0x116>
		fs->last_clst = ncl;
 8011c2a:	693b      	ldr	r3, [r7, #16]
 8011c2c:	69fa      	ldr	r2, [r7, #28]
 8011c2e:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8011c30:	693b      	ldr	r3, [r7, #16]
 8011c32:	695a      	ldr	r2, [r3, #20]
 8011c34:	693b      	ldr	r3, [r7, #16]
 8011c36:	69db      	ldr	r3, [r3, #28]
 8011c38:	3b02      	subs	r3, #2
 8011c3a:	429a      	cmp	r2, r3
 8011c3c:	d804      	bhi.n	8011c48 <create_chain+0x106>
 8011c3e:	693b      	ldr	r3, [r7, #16]
 8011c40:	695b      	ldr	r3, [r3, #20]
 8011c42:	1e5a      	subs	r2, r3, #1
 8011c44:	693b      	ldr	r3, [r7, #16]
 8011c46:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8011c48:	693b      	ldr	r3, [r7, #16]
 8011c4a:	791b      	ldrb	r3, [r3, #4]
 8011c4c:	f043 0301 	orr.w	r3, r3, #1
 8011c50:	b2da      	uxtb	r2, r3
 8011c52:	693b      	ldr	r3, [r7, #16]
 8011c54:	711a      	strb	r2, [r3, #4]
 8011c56:	e007      	b.n	8011c68 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8011c58:	7dfb      	ldrb	r3, [r7, #23]
 8011c5a:	2b01      	cmp	r3, #1
 8011c5c:	d102      	bne.n	8011c64 <create_chain+0x122>
 8011c5e:	f04f 33ff 	mov.w	r3, #4294967295
 8011c62:	e000      	b.n	8011c66 <create_chain+0x124>
 8011c64:	2301      	movs	r3, #1
 8011c66:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8011c68:	69fb      	ldr	r3, [r7, #28]
}
 8011c6a:	4618      	mov	r0, r3
 8011c6c:	3720      	adds	r7, #32
 8011c6e:	46bd      	mov	sp, r7
 8011c70:	bd80      	pop	{r7, pc}

08011c72 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8011c72:	b480      	push	{r7}
 8011c74:	b087      	sub	sp, #28
 8011c76:	af00      	add	r7, sp, #0
 8011c78:	6078      	str	r0, [r7, #4]
 8011c7a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	681b      	ldr	r3, [r3, #0]
 8011c80:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c86:	3304      	adds	r3, #4
 8011c88:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8011c8a:	68fb      	ldr	r3, [r7, #12]
 8011c8c:	899b      	ldrh	r3, [r3, #12]
 8011c8e:	461a      	mov	r2, r3
 8011c90:	683b      	ldr	r3, [r7, #0]
 8011c92:	fbb3 f3f2 	udiv	r3, r3, r2
 8011c96:	68fa      	ldr	r2, [r7, #12]
 8011c98:	8952      	ldrh	r2, [r2, #10]
 8011c9a:	fbb3 f3f2 	udiv	r3, r3, r2
 8011c9e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011ca0:	693b      	ldr	r3, [r7, #16]
 8011ca2:	1d1a      	adds	r2, r3, #4
 8011ca4:	613a      	str	r2, [r7, #16]
 8011ca6:	681b      	ldr	r3, [r3, #0]
 8011ca8:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8011caa:	68bb      	ldr	r3, [r7, #8]
 8011cac:	2b00      	cmp	r3, #0
 8011cae:	d101      	bne.n	8011cb4 <clmt_clust+0x42>
 8011cb0:	2300      	movs	r3, #0
 8011cb2:	e010      	b.n	8011cd6 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8011cb4:	697a      	ldr	r2, [r7, #20]
 8011cb6:	68bb      	ldr	r3, [r7, #8]
 8011cb8:	429a      	cmp	r2, r3
 8011cba:	d307      	bcc.n	8011ccc <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8011cbc:	697a      	ldr	r2, [r7, #20]
 8011cbe:	68bb      	ldr	r3, [r7, #8]
 8011cc0:	1ad3      	subs	r3, r2, r3
 8011cc2:	617b      	str	r3, [r7, #20]
 8011cc4:	693b      	ldr	r3, [r7, #16]
 8011cc6:	3304      	adds	r3, #4
 8011cc8:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011cca:	e7e9      	b.n	8011ca0 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8011ccc:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8011cce:	693b      	ldr	r3, [r7, #16]
 8011cd0:	681a      	ldr	r2, [r3, #0]
 8011cd2:	697b      	ldr	r3, [r7, #20]
 8011cd4:	4413      	add	r3, r2
}
 8011cd6:	4618      	mov	r0, r3
 8011cd8:	371c      	adds	r7, #28
 8011cda:	46bd      	mov	sp, r7
 8011cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ce0:	4770      	bx	lr

08011ce2 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8011ce2:	b580      	push	{r7, lr}
 8011ce4:	b086      	sub	sp, #24
 8011ce6:	af00      	add	r7, sp, #0
 8011ce8:	6078      	str	r0, [r7, #4]
 8011cea:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	681b      	ldr	r3, [r3, #0]
 8011cf0:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8011cf2:	683b      	ldr	r3, [r7, #0]
 8011cf4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011cf8:	d204      	bcs.n	8011d04 <dir_sdi+0x22>
 8011cfa:	683b      	ldr	r3, [r7, #0]
 8011cfc:	f003 031f 	and.w	r3, r3, #31
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	d001      	beq.n	8011d08 <dir_sdi+0x26>
		return FR_INT_ERR;
 8011d04:	2302      	movs	r3, #2
 8011d06:	e071      	b.n	8011dec <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	683a      	ldr	r2, [r7, #0]
 8011d0c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	689b      	ldr	r3, [r3, #8]
 8011d12:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8011d14:	697b      	ldr	r3, [r7, #20]
 8011d16:	2b00      	cmp	r3, #0
 8011d18:	d106      	bne.n	8011d28 <dir_sdi+0x46>
 8011d1a:	693b      	ldr	r3, [r7, #16]
 8011d1c:	781b      	ldrb	r3, [r3, #0]
 8011d1e:	2b02      	cmp	r3, #2
 8011d20:	d902      	bls.n	8011d28 <dir_sdi+0x46>
		clst = fs->dirbase;
 8011d22:	693b      	ldr	r3, [r7, #16]
 8011d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d26:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8011d28:	697b      	ldr	r3, [r7, #20]
 8011d2a:	2b00      	cmp	r3, #0
 8011d2c:	d10c      	bne.n	8011d48 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8011d2e:	683b      	ldr	r3, [r7, #0]
 8011d30:	095b      	lsrs	r3, r3, #5
 8011d32:	693a      	ldr	r2, [r7, #16]
 8011d34:	8912      	ldrh	r2, [r2, #8]
 8011d36:	4293      	cmp	r3, r2
 8011d38:	d301      	bcc.n	8011d3e <dir_sdi+0x5c>
 8011d3a:	2302      	movs	r3, #2
 8011d3c:	e056      	b.n	8011dec <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8011d3e:	693b      	ldr	r3, [r7, #16]
 8011d40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	61da      	str	r2, [r3, #28]
 8011d46:	e02d      	b.n	8011da4 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8011d48:	693b      	ldr	r3, [r7, #16]
 8011d4a:	895b      	ldrh	r3, [r3, #10]
 8011d4c:	461a      	mov	r2, r3
 8011d4e:	693b      	ldr	r3, [r7, #16]
 8011d50:	899b      	ldrh	r3, [r3, #12]
 8011d52:	fb03 f302 	mul.w	r3, r3, r2
 8011d56:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8011d58:	e019      	b.n	8011d8e <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	6979      	ldr	r1, [r7, #20]
 8011d5e:	4618      	mov	r0, r3
 8011d60:	f7ff fca3 	bl	80116aa <get_fat>
 8011d64:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8011d66:	697b      	ldr	r3, [r7, #20]
 8011d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d6c:	d101      	bne.n	8011d72 <dir_sdi+0x90>
 8011d6e:	2301      	movs	r3, #1
 8011d70:	e03c      	b.n	8011dec <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8011d72:	697b      	ldr	r3, [r7, #20]
 8011d74:	2b01      	cmp	r3, #1
 8011d76:	d904      	bls.n	8011d82 <dir_sdi+0xa0>
 8011d78:	693b      	ldr	r3, [r7, #16]
 8011d7a:	69db      	ldr	r3, [r3, #28]
 8011d7c:	697a      	ldr	r2, [r7, #20]
 8011d7e:	429a      	cmp	r2, r3
 8011d80:	d301      	bcc.n	8011d86 <dir_sdi+0xa4>
 8011d82:	2302      	movs	r3, #2
 8011d84:	e032      	b.n	8011dec <dir_sdi+0x10a>
			ofs -= csz;
 8011d86:	683a      	ldr	r2, [r7, #0]
 8011d88:	68fb      	ldr	r3, [r7, #12]
 8011d8a:	1ad3      	subs	r3, r2, r3
 8011d8c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8011d8e:	683a      	ldr	r2, [r7, #0]
 8011d90:	68fb      	ldr	r3, [r7, #12]
 8011d92:	429a      	cmp	r2, r3
 8011d94:	d2e1      	bcs.n	8011d5a <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8011d96:	6979      	ldr	r1, [r7, #20]
 8011d98:	6938      	ldr	r0, [r7, #16]
 8011d9a:	f7ff fc67 	bl	801166c <clust2sect>
 8011d9e:	4602      	mov	r2, r0
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	697a      	ldr	r2, [r7, #20]
 8011da8:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	69db      	ldr	r3, [r3, #28]
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	d101      	bne.n	8011db6 <dir_sdi+0xd4>
 8011db2:	2302      	movs	r3, #2
 8011db4:	e01a      	b.n	8011dec <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	69da      	ldr	r2, [r3, #28]
 8011dba:	693b      	ldr	r3, [r7, #16]
 8011dbc:	899b      	ldrh	r3, [r3, #12]
 8011dbe:	4619      	mov	r1, r3
 8011dc0:	683b      	ldr	r3, [r7, #0]
 8011dc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8011dc6:	441a      	add	r2, r3
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8011dcc:	693b      	ldr	r3, [r7, #16]
 8011dce:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011dd2:	693b      	ldr	r3, [r7, #16]
 8011dd4:	899b      	ldrh	r3, [r3, #12]
 8011dd6:	461a      	mov	r2, r3
 8011dd8:	683b      	ldr	r3, [r7, #0]
 8011dda:	fbb3 f0f2 	udiv	r0, r3, r2
 8011dde:	fb02 f200 	mul.w	r2, r2, r0
 8011de2:	1a9b      	subs	r3, r3, r2
 8011de4:	18ca      	adds	r2, r1, r3
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8011dea:	2300      	movs	r3, #0
}
 8011dec:	4618      	mov	r0, r3
 8011dee:	3718      	adds	r7, #24
 8011df0:	46bd      	mov	sp, r7
 8011df2:	bd80      	pop	{r7, pc}

08011df4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8011df4:	b580      	push	{r7, lr}
 8011df6:	b086      	sub	sp, #24
 8011df8:	af00      	add	r7, sp, #0
 8011dfa:	6078      	str	r0, [r7, #4]
 8011dfc:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	681b      	ldr	r3, [r3, #0]
 8011e02:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	695b      	ldr	r3, [r3, #20]
 8011e08:	3320      	adds	r3, #32
 8011e0a:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	69db      	ldr	r3, [r3, #28]
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	d003      	beq.n	8011e1c <dir_next+0x28>
 8011e14:	68bb      	ldr	r3, [r7, #8]
 8011e16:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011e1a:	d301      	bcc.n	8011e20 <dir_next+0x2c>
 8011e1c:	2304      	movs	r3, #4
 8011e1e:	e0bb      	b.n	8011f98 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8011e20:	68fb      	ldr	r3, [r7, #12]
 8011e22:	899b      	ldrh	r3, [r3, #12]
 8011e24:	461a      	mov	r2, r3
 8011e26:	68bb      	ldr	r3, [r7, #8]
 8011e28:	fbb3 f1f2 	udiv	r1, r3, r2
 8011e2c:	fb02 f201 	mul.w	r2, r2, r1
 8011e30:	1a9b      	subs	r3, r3, r2
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	f040 809d 	bne.w	8011f72 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	69db      	ldr	r3, [r3, #28]
 8011e3c:	1c5a      	adds	r2, r3, #1
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	699b      	ldr	r3, [r3, #24]
 8011e46:	2b00      	cmp	r3, #0
 8011e48:	d10b      	bne.n	8011e62 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8011e4a:	68bb      	ldr	r3, [r7, #8]
 8011e4c:	095b      	lsrs	r3, r3, #5
 8011e4e:	68fa      	ldr	r2, [r7, #12]
 8011e50:	8912      	ldrh	r2, [r2, #8]
 8011e52:	4293      	cmp	r3, r2
 8011e54:	f0c0 808d 	bcc.w	8011f72 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	2200      	movs	r2, #0
 8011e5c:	61da      	str	r2, [r3, #28]
 8011e5e:	2304      	movs	r3, #4
 8011e60:	e09a      	b.n	8011f98 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8011e62:	68fb      	ldr	r3, [r7, #12]
 8011e64:	899b      	ldrh	r3, [r3, #12]
 8011e66:	461a      	mov	r2, r3
 8011e68:	68bb      	ldr	r3, [r7, #8]
 8011e6a:	fbb3 f3f2 	udiv	r3, r3, r2
 8011e6e:	68fa      	ldr	r2, [r7, #12]
 8011e70:	8952      	ldrh	r2, [r2, #10]
 8011e72:	3a01      	subs	r2, #1
 8011e74:	4013      	ands	r3, r2
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	d17b      	bne.n	8011f72 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8011e7a:	687a      	ldr	r2, [r7, #4]
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	699b      	ldr	r3, [r3, #24]
 8011e80:	4619      	mov	r1, r3
 8011e82:	4610      	mov	r0, r2
 8011e84:	f7ff fc11 	bl	80116aa <get_fat>
 8011e88:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8011e8a:	697b      	ldr	r3, [r7, #20]
 8011e8c:	2b01      	cmp	r3, #1
 8011e8e:	d801      	bhi.n	8011e94 <dir_next+0xa0>
 8011e90:	2302      	movs	r3, #2
 8011e92:	e081      	b.n	8011f98 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8011e94:	697b      	ldr	r3, [r7, #20]
 8011e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e9a:	d101      	bne.n	8011ea0 <dir_next+0xac>
 8011e9c:	2301      	movs	r3, #1
 8011e9e:	e07b      	b.n	8011f98 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8011ea0:	68fb      	ldr	r3, [r7, #12]
 8011ea2:	69db      	ldr	r3, [r3, #28]
 8011ea4:	697a      	ldr	r2, [r7, #20]
 8011ea6:	429a      	cmp	r2, r3
 8011ea8:	d359      	bcc.n	8011f5e <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8011eaa:	683b      	ldr	r3, [r7, #0]
 8011eac:	2b00      	cmp	r3, #0
 8011eae:	d104      	bne.n	8011eba <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	2200      	movs	r2, #0
 8011eb4:	61da      	str	r2, [r3, #28]
 8011eb6:	2304      	movs	r3, #4
 8011eb8:	e06e      	b.n	8011f98 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8011eba:	687a      	ldr	r2, [r7, #4]
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	699b      	ldr	r3, [r3, #24]
 8011ec0:	4619      	mov	r1, r3
 8011ec2:	4610      	mov	r0, r2
 8011ec4:	f7ff fe3d 	bl	8011b42 <create_chain>
 8011ec8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8011eca:	697b      	ldr	r3, [r7, #20]
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	d101      	bne.n	8011ed4 <dir_next+0xe0>
 8011ed0:	2307      	movs	r3, #7
 8011ed2:	e061      	b.n	8011f98 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8011ed4:	697b      	ldr	r3, [r7, #20]
 8011ed6:	2b01      	cmp	r3, #1
 8011ed8:	d101      	bne.n	8011ede <dir_next+0xea>
 8011eda:	2302      	movs	r3, #2
 8011edc:	e05c      	b.n	8011f98 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8011ede:	697b      	ldr	r3, [r7, #20]
 8011ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ee4:	d101      	bne.n	8011eea <dir_next+0xf6>
 8011ee6:	2301      	movs	r3, #1
 8011ee8:	e056      	b.n	8011f98 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8011eea:	68f8      	ldr	r0, [r7, #12]
 8011eec:	f7ff fadc 	bl	80114a8 <sync_window>
 8011ef0:	4603      	mov	r3, r0
 8011ef2:	2b00      	cmp	r3, #0
 8011ef4:	d001      	beq.n	8011efa <dir_next+0x106>
 8011ef6:	2301      	movs	r3, #1
 8011ef8:	e04e      	b.n	8011f98 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8011efa:	68fb      	ldr	r3, [r7, #12]
 8011efc:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8011f00:	68fb      	ldr	r3, [r7, #12]
 8011f02:	899b      	ldrh	r3, [r3, #12]
 8011f04:	461a      	mov	r2, r3
 8011f06:	2100      	movs	r1, #0
 8011f08:	f7ff f905 	bl	8011116 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8011f0c:	2300      	movs	r3, #0
 8011f0e:	613b      	str	r3, [r7, #16]
 8011f10:	6979      	ldr	r1, [r7, #20]
 8011f12:	68f8      	ldr	r0, [r7, #12]
 8011f14:	f7ff fbaa 	bl	801166c <clust2sect>
 8011f18:	4602      	mov	r2, r0
 8011f1a:	68fb      	ldr	r3, [r7, #12]
 8011f1c:	635a      	str	r2, [r3, #52]	; 0x34
 8011f1e:	e012      	b.n	8011f46 <dir_next+0x152>
						fs->wflag = 1;
 8011f20:	68fb      	ldr	r3, [r7, #12]
 8011f22:	2201      	movs	r2, #1
 8011f24:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8011f26:	68f8      	ldr	r0, [r7, #12]
 8011f28:	f7ff fabe 	bl	80114a8 <sync_window>
 8011f2c:	4603      	mov	r3, r0
 8011f2e:	2b00      	cmp	r3, #0
 8011f30:	d001      	beq.n	8011f36 <dir_next+0x142>
 8011f32:	2301      	movs	r3, #1
 8011f34:	e030      	b.n	8011f98 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8011f36:	693b      	ldr	r3, [r7, #16]
 8011f38:	3301      	adds	r3, #1
 8011f3a:	613b      	str	r3, [r7, #16]
 8011f3c:	68fb      	ldr	r3, [r7, #12]
 8011f3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011f40:	1c5a      	adds	r2, r3, #1
 8011f42:	68fb      	ldr	r3, [r7, #12]
 8011f44:	635a      	str	r2, [r3, #52]	; 0x34
 8011f46:	68fb      	ldr	r3, [r7, #12]
 8011f48:	895b      	ldrh	r3, [r3, #10]
 8011f4a:	461a      	mov	r2, r3
 8011f4c:	693b      	ldr	r3, [r7, #16]
 8011f4e:	4293      	cmp	r3, r2
 8011f50:	d3e6      	bcc.n	8011f20 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8011f52:	68fb      	ldr	r3, [r7, #12]
 8011f54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011f56:	693b      	ldr	r3, [r7, #16]
 8011f58:	1ad2      	subs	r2, r2, r3
 8011f5a:	68fb      	ldr	r3, [r7, #12]
 8011f5c:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	697a      	ldr	r2, [r7, #20]
 8011f62:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8011f64:	6979      	ldr	r1, [r7, #20]
 8011f66:	68f8      	ldr	r0, [r7, #12]
 8011f68:	f7ff fb80 	bl	801166c <clust2sect>
 8011f6c:	4602      	mov	r2, r0
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	68ba      	ldr	r2, [r7, #8]
 8011f76:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8011f78:	68fb      	ldr	r3, [r7, #12]
 8011f7a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011f7e:	68fb      	ldr	r3, [r7, #12]
 8011f80:	899b      	ldrh	r3, [r3, #12]
 8011f82:	461a      	mov	r2, r3
 8011f84:	68bb      	ldr	r3, [r7, #8]
 8011f86:	fbb3 f0f2 	udiv	r0, r3, r2
 8011f8a:	fb02 f200 	mul.w	r2, r2, r0
 8011f8e:	1a9b      	subs	r3, r3, r2
 8011f90:	18ca      	adds	r2, r1, r3
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8011f96:	2300      	movs	r3, #0
}
 8011f98:	4618      	mov	r0, r3
 8011f9a:	3718      	adds	r7, #24
 8011f9c:	46bd      	mov	sp, r7
 8011f9e:	bd80      	pop	{r7, pc}

08011fa0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8011fa0:	b580      	push	{r7, lr}
 8011fa2:	b086      	sub	sp, #24
 8011fa4:	af00      	add	r7, sp, #0
 8011fa6:	6078      	str	r0, [r7, #4]
 8011fa8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8011faa:	687b      	ldr	r3, [r7, #4]
 8011fac:	681b      	ldr	r3, [r3, #0]
 8011fae:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8011fb0:	2100      	movs	r1, #0
 8011fb2:	6878      	ldr	r0, [r7, #4]
 8011fb4:	f7ff fe95 	bl	8011ce2 <dir_sdi>
 8011fb8:	4603      	mov	r3, r0
 8011fba:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011fbc:	7dfb      	ldrb	r3, [r7, #23]
 8011fbe:	2b00      	cmp	r3, #0
 8011fc0:	d12b      	bne.n	801201a <dir_alloc+0x7a>
		n = 0;
 8011fc2:	2300      	movs	r3, #0
 8011fc4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	69db      	ldr	r3, [r3, #28]
 8011fca:	4619      	mov	r1, r3
 8011fcc:	68f8      	ldr	r0, [r7, #12]
 8011fce:	f7ff faaf 	bl	8011530 <move_window>
 8011fd2:	4603      	mov	r3, r0
 8011fd4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8011fd6:	7dfb      	ldrb	r3, [r7, #23]
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	d11d      	bne.n	8012018 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	6a1b      	ldr	r3, [r3, #32]
 8011fe0:	781b      	ldrb	r3, [r3, #0]
 8011fe2:	2be5      	cmp	r3, #229	; 0xe5
 8011fe4:	d004      	beq.n	8011ff0 <dir_alloc+0x50>
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	6a1b      	ldr	r3, [r3, #32]
 8011fea:	781b      	ldrb	r3, [r3, #0]
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	d107      	bne.n	8012000 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8011ff0:	693b      	ldr	r3, [r7, #16]
 8011ff2:	3301      	adds	r3, #1
 8011ff4:	613b      	str	r3, [r7, #16]
 8011ff6:	693a      	ldr	r2, [r7, #16]
 8011ff8:	683b      	ldr	r3, [r7, #0]
 8011ffa:	429a      	cmp	r2, r3
 8011ffc:	d102      	bne.n	8012004 <dir_alloc+0x64>
 8011ffe:	e00c      	b.n	801201a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8012000:	2300      	movs	r3, #0
 8012002:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8012004:	2101      	movs	r1, #1
 8012006:	6878      	ldr	r0, [r7, #4]
 8012008:	f7ff fef4 	bl	8011df4 <dir_next>
 801200c:	4603      	mov	r3, r0
 801200e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8012010:	7dfb      	ldrb	r3, [r7, #23]
 8012012:	2b00      	cmp	r3, #0
 8012014:	d0d7      	beq.n	8011fc6 <dir_alloc+0x26>
 8012016:	e000      	b.n	801201a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8012018:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801201a:	7dfb      	ldrb	r3, [r7, #23]
 801201c:	2b04      	cmp	r3, #4
 801201e:	d101      	bne.n	8012024 <dir_alloc+0x84>
 8012020:	2307      	movs	r3, #7
 8012022:	75fb      	strb	r3, [r7, #23]
	return res;
 8012024:	7dfb      	ldrb	r3, [r7, #23]
}
 8012026:	4618      	mov	r0, r3
 8012028:	3718      	adds	r7, #24
 801202a:	46bd      	mov	sp, r7
 801202c:	bd80      	pop	{r7, pc}

0801202e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801202e:	b580      	push	{r7, lr}
 8012030:	b084      	sub	sp, #16
 8012032:	af00      	add	r7, sp, #0
 8012034:	6078      	str	r0, [r7, #4]
 8012036:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8012038:	683b      	ldr	r3, [r7, #0]
 801203a:	331a      	adds	r3, #26
 801203c:	4618      	mov	r0, r3
 801203e:	f7fe ffc7 	bl	8010fd0 <ld_word>
 8012042:	4603      	mov	r3, r0
 8012044:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	781b      	ldrb	r3, [r3, #0]
 801204a:	2b03      	cmp	r3, #3
 801204c:	d109      	bne.n	8012062 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801204e:	683b      	ldr	r3, [r7, #0]
 8012050:	3314      	adds	r3, #20
 8012052:	4618      	mov	r0, r3
 8012054:	f7fe ffbc 	bl	8010fd0 <ld_word>
 8012058:	4603      	mov	r3, r0
 801205a:	041b      	lsls	r3, r3, #16
 801205c:	68fa      	ldr	r2, [r7, #12]
 801205e:	4313      	orrs	r3, r2
 8012060:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8012062:	68fb      	ldr	r3, [r7, #12]
}
 8012064:	4618      	mov	r0, r3
 8012066:	3710      	adds	r7, #16
 8012068:	46bd      	mov	sp, r7
 801206a:	bd80      	pop	{r7, pc}

0801206c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 801206c:	b580      	push	{r7, lr}
 801206e:	b084      	sub	sp, #16
 8012070:	af00      	add	r7, sp, #0
 8012072:	60f8      	str	r0, [r7, #12]
 8012074:	60b9      	str	r1, [r7, #8]
 8012076:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8012078:	68bb      	ldr	r3, [r7, #8]
 801207a:	331a      	adds	r3, #26
 801207c:	687a      	ldr	r2, [r7, #4]
 801207e:	b292      	uxth	r2, r2
 8012080:	4611      	mov	r1, r2
 8012082:	4618      	mov	r0, r3
 8012084:	f7fe ffdf 	bl	8011046 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8012088:	68fb      	ldr	r3, [r7, #12]
 801208a:	781b      	ldrb	r3, [r3, #0]
 801208c:	2b03      	cmp	r3, #3
 801208e:	d109      	bne.n	80120a4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8012090:	68bb      	ldr	r3, [r7, #8]
 8012092:	f103 0214 	add.w	r2, r3, #20
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	0c1b      	lsrs	r3, r3, #16
 801209a:	b29b      	uxth	r3, r3
 801209c:	4619      	mov	r1, r3
 801209e:	4610      	mov	r0, r2
 80120a0:	f7fe ffd1 	bl	8011046 <st_word>
	}
}
 80120a4:	bf00      	nop
 80120a6:	3710      	adds	r7, #16
 80120a8:	46bd      	mov	sp, r7
 80120aa:	bd80      	pop	{r7, pc}

080120ac <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80120ac:	b580      	push	{r7, lr}
 80120ae:	b086      	sub	sp, #24
 80120b0:	af00      	add	r7, sp, #0
 80120b2:	6078      	str	r0, [r7, #4]
 80120b4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 80120b6:	2304      	movs	r3, #4
 80120b8:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	681b      	ldr	r3, [r3, #0]
 80120be:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 80120c0:	e03c      	b.n	801213c <dir_read+0x90>
		res = move_window(fs, dp->sect);
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	69db      	ldr	r3, [r3, #28]
 80120c6:	4619      	mov	r1, r3
 80120c8:	6938      	ldr	r0, [r7, #16]
 80120ca:	f7ff fa31 	bl	8011530 <move_window>
 80120ce:	4603      	mov	r3, r0
 80120d0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80120d2:	7dfb      	ldrb	r3, [r7, #23]
 80120d4:	2b00      	cmp	r3, #0
 80120d6:	d136      	bne.n	8012146 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	6a1b      	ldr	r3, [r3, #32]
 80120dc:	781b      	ldrb	r3, [r3, #0]
 80120de:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 80120e0:	7bfb      	ldrb	r3, [r7, #15]
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	d102      	bne.n	80120ec <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80120e6:	2304      	movs	r3, #4
 80120e8:	75fb      	strb	r3, [r7, #23]
 80120ea:	e031      	b.n	8012150 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	6a1b      	ldr	r3, [r3, #32]
 80120f0:	330b      	adds	r3, #11
 80120f2:	781b      	ldrb	r3, [r3, #0]
 80120f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80120f8:	73bb      	strb	r3, [r7, #14]
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	7bba      	ldrb	r2, [r7, #14]
 80120fe:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8012100:	7bfb      	ldrb	r3, [r7, #15]
 8012102:	2be5      	cmp	r3, #229	; 0xe5
 8012104:	d011      	beq.n	801212a <dir_read+0x7e>
 8012106:	7bfb      	ldrb	r3, [r7, #15]
 8012108:	2b2e      	cmp	r3, #46	; 0x2e
 801210a:	d00e      	beq.n	801212a <dir_read+0x7e>
 801210c:	7bbb      	ldrb	r3, [r7, #14]
 801210e:	2b0f      	cmp	r3, #15
 8012110:	d00b      	beq.n	801212a <dir_read+0x7e>
 8012112:	7bbb      	ldrb	r3, [r7, #14]
 8012114:	f023 0320 	bic.w	r3, r3, #32
 8012118:	2b08      	cmp	r3, #8
 801211a:	bf0c      	ite	eq
 801211c:	2301      	moveq	r3, #1
 801211e:	2300      	movne	r3, #0
 8012120:	b2db      	uxtb	r3, r3
 8012122:	461a      	mov	r2, r3
 8012124:	683b      	ldr	r3, [r7, #0]
 8012126:	4293      	cmp	r3, r2
 8012128:	d00f      	beq.n	801214a <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 801212a:	2100      	movs	r1, #0
 801212c:	6878      	ldr	r0, [r7, #4]
 801212e:	f7ff fe61 	bl	8011df4 <dir_next>
 8012132:	4603      	mov	r3, r0
 8012134:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012136:	7dfb      	ldrb	r3, [r7, #23]
 8012138:	2b00      	cmp	r3, #0
 801213a:	d108      	bne.n	801214e <dir_read+0xa2>
	while (dp->sect) {
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	69db      	ldr	r3, [r3, #28]
 8012140:	2b00      	cmp	r3, #0
 8012142:	d1be      	bne.n	80120c2 <dir_read+0x16>
 8012144:	e004      	b.n	8012150 <dir_read+0xa4>
		if (res != FR_OK) break;
 8012146:	bf00      	nop
 8012148:	e002      	b.n	8012150 <dir_read+0xa4>
				break;
 801214a:	bf00      	nop
 801214c:	e000      	b.n	8012150 <dir_read+0xa4>
		if (res != FR_OK) break;
 801214e:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8012150:	7dfb      	ldrb	r3, [r7, #23]
 8012152:	2b00      	cmp	r3, #0
 8012154:	d002      	beq.n	801215c <dir_read+0xb0>
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	2200      	movs	r2, #0
 801215a:	61da      	str	r2, [r3, #28]
	return res;
 801215c:	7dfb      	ldrb	r3, [r7, #23]
}
 801215e:	4618      	mov	r0, r3
 8012160:	3718      	adds	r7, #24
 8012162:	46bd      	mov	sp, r7
 8012164:	bd80      	pop	{r7, pc}

08012166 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8012166:	b580      	push	{r7, lr}
 8012168:	b086      	sub	sp, #24
 801216a:	af00      	add	r7, sp, #0
 801216c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	681b      	ldr	r3, [r3, #0]
 8012172:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8012174:	2100      	movs	r1, #0
 8012176:	6878      	ldr	r0, [r7, #4]
 8012178:	f7ff fdb3 	bl	8011ce2 <dir_sdi>
 801217c:	4603      	mov	r3, r0
 801217e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8012180:	7dfb      	ldrb	r3, [r7, #23]
 8012182:	2b00      	cmp	r3, #0
 8012184:	d001      	beq.n	801218a <dir_find+0x24>
 8012186:	7dfb      	ldrb	r3, [r7, #23]
 8012188:	e03e      	b.n	8012208 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 801218a:	687b      	ldr	r3, [r7, #4]
 801218c:	69db      	ldr	r3, [r3, #28]
 801218e:	4619      	mov	r1, r3
 8012190:	6938      	ldr	r0, [r7, #16]
 8012192:	f7ff f9cd 	bl	8011530 <move_window>
 8012196:	4603      	mov	r3, r0
 8012198:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 801219a:	7dfb      	ldrb	r3, [r7, #23]
 801219c:	2b00      	cmp	r3, #0
 801219e:	d12f      	bne.n	8012200 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	6a1b      	ldr	r3, [r3, #32]
 80121a4:	781b      	ldrb	r3, [r3, #0]
 80121a6:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80121a8:	7bfb      	ldrb	r3, [r7, #15]
 80121aa:	2b00      	cmp	r3, #0
 80121ac:	d102      	bne.n	80121b4 <dir_find+0x4e>
 80121ae:	2304      	movs	r3, #4
 80121b0:	75fb      	strb	r3, [r7, #23]
 80121b2:	e028      	b.n	8012206 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	6a1b      	ldr	r3, [r3, #32]
 80121b8:	330b      	adds	r3, #11
 80121ba:	781b      	ldrb	r3, [r3, #0]
 80121bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80121c0:	b2da      	uxtb	r2, r3
 80121c2:	687b      	ldr	r3, [r7, #4]
 80121c4:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80121c6:	687b      	ldr	r3, [r7, #4]
 80121c8:	6a1b      	ldr	r3, [r3, #32]
 80121ca:	330b      	adds	r3, #11
 80121cc:	781b      	ldrb	r3, [r3, #0]
 80121ce:	f003 0308 	and.w	r3, r3, #8
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	d10a      	bne.n	80121ec <dir_find+0x86>
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	6a18      	ldr	r0, [r3, #32]
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	3324      	adds	r3, #36	; 0x24
 80121de:	220b      	movs	r2, #11
 80121e0:	4619      	mov	r1, r3
 80121e2:	f7fe ffb2 	bl	801114a <mem_cmp>
 80121e6:	4603      	mov	r3, r0
 80121e8:	2b00      	cmp	r3, #0
 80121ea:	d00b      	beq.n	8012204 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80121ec:	2100      	movs	r1, #0
 80121ee:	6878      	ldr	r0, [r7, #4]
 80121f0:	f7ff fe00 	bl	8011df4 <dir_next>
 80121f4:	4603      	mov	r3, r0
 80121f6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80121f8:	7dfb      	ldrb	r3, [r7, #23]
 80121fa:	2b00      	cmp	r3, #0
 80121fc:	d0c5      	beq.n	801218a <dir_find+0x24>
 80121fe:	e002      	b.n	8012206 <dir_find+0xa0>
		if (res != FR_OK) break;
 8012200:	bf00      	nop
 8012202:	e000      	b.n	8012206 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8012204:	bf00      	nop

	return res;
 8012206:	7dfb      	ldrb	r3, [r7, #23]
}
 8012208:	4618      	mov	r0, r3
 801220a:	3718      	adds	r7, #24
 801220c:	46bd      	mov	sp, r7
 801220e:	bd80      	pop	{r7, pc}

08012210 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8012210:	b580      	push	{r7, lr}
 8012212:	b084      	sub	sp, #16
 8012214:	af00      	add	r7, sp, #0
 8012216:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	681b      	ldr	r3, [r3, #0]
 801221c:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 801221e:	2101      	movs	r1, #1
 8012220:	6878      	ldr	r0, [r7, #4]
 8012222:	f7ff febd 	bl	8011fa0 <dir_alloc>
 8012226:	4603      	mov	r3, r0
 8012228:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 801222a:	7bfb      	ldrb	r3, [r7, #15]
 801222c:	2b00      	cmp	r3, #0
 801222e:	d11c      	bne.n	801226a <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8012230:	687b      	ldr	r3, [r7, #4]
 8012232:	69db      	ldr	r3, [r3, #28]
 8012234:	4619      	mov	r1, r3
 8012236:	68b8      	ldr	r0, [r7, #8]
 8012238:	f7ff f97a 	bl	8011530 <move_window>
 801223c:	4603      	mov	r3, r0
 801223e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8012240:	7bfb      	ldrb	r3, [r7, #15]
 8012242:	2b00      	cmp	r3, #0
 8012244:	d111      	bne.n	801226a <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8012246:	687b      	ldr	r3, [r7, #4]
 8012248:	6a1b      	ldr	r3, [r3, #32]
 801224a:	2220      	movs	r2, #32
 801224c:	2100      	movs	r1, #0
 801224e:	4618      	mov	r0, r3
 8012250:	f7fe ff61 	bl	8011116 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	6a18      	ldr	r0, [r3, #32]
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	3324      	adds	r3, #36	; 0x24
 801225c:	220b      	movs	r2, #11
 801225e:	4619      	mov	r1, r3
 8012260:	f7fe ff38 	bl	80110d4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8012264:	68bb      	ldr	r3, [r7, #8]
 8012266:	2201      	movs	r2, #1
 8012268:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 801226a:	7bfb      	ldrb	r3, [r7, #15]
}
 801226c:	4618      	mov	r0, r3
 801226e:	3710      	adds	r7, #16
 8012270:	46bd      	mov	sp, r7
 8012272:	bd80      	pop	{r7, pc}

08012274 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8012274:	b580      	push	{r7, lr}
 8012276:	b084      	sub	sp, #16
 8012278:	af00      	add	r7, sp, #0
 801227a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	681b      	ldr	r3, [r3, #0]
 8012280:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	69db      	ldr	r3, [r3, #28]
 8012286:	4619      	mov	r1, r3
 8012288:	68f8      	ldr	r0, [r7, #12]
 801228a:	f7ff f951 	bl	8011530 <move_window>
 801228e:	4603      	mov	r3, r0
 8012290:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 8012292:	7afb      	ldrb	r3, [r7, #11]
 8012294:	2b00      	cmp	r3, #0
 8012296:	d106      	bne.n	80122a6 <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	6a1b      	ldr	r3, [r3, #32]
 801229c:	22e5      	movs	r2, #229	; 0xe5
 801229e:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 80122a0:	68fb      	ldr	r3, [r7, #12]
 80122a2:	2201      	movs	r2, #1
 80122a4:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 80122a6:	7afb      	ldrb	r3, [r7, #11]
}
 80122a8:	4618      	mov	r0, r3
 80122aa:	3710      	adds	r7, #16
 80122ac:	46bd      	mov	sp, r7
 80122ae:	bd80      	pop	{r7, pc}

080122b0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80122b0:	b580      	push	{r7, lr}
 80122b2:	b088      	sub	sp, #32
 80122b4:	af00      	add	r7, sp, #0
 80122b6:	6078      	str	r0, [r7, #4]
 80122b8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80122ba:	683b      	ldr	r3, [r7, #0]
 80122bc:	681b      	ldr	r3, [r3, #0]
 80122be:	60fb      	str	r3, [r7, #12]
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	3324      	adds	r3, #36	; 0x24
 80122c4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80122c6:	220b      	movs	r2, #11
 80122c8:	2120      	movs	r1, #32
 80122ca:	68b8      	ldr	r0, [r7, #8]
 80122cc:	f7fe ff23 	bl	8011116 <mem_set>
	si = i = 0; ni = 8;
 80122d0:	2300      	movs	r3, #0
 80122d2:	613b      	str	r3, [r7, #16]
 80122d4:	693b      	ldr	r3, [r7, #16]
 80122d6:	617b      	str	r3, [r7, #20]
 80122d8:	2308      	movs	r3, #8
 80122da:	61bb      	str	r3, [r7, #24]
#if _FS_RPATH != 0
	if (p[si] == '.') { /* Is this a dot entry? */
 80122dc:	68fa      	ldr	r2, [r7, #12]
 80122de:	697b      	ldr	r3, [r7, #20]
 80122e0:	4413      	add	r3, r2
 80122e2:	781b      	ldrb	r3, [r3, #0]
 80122e4:	2b2e      	cmp	r3, #46	; 0x2e
 80122e6:	d12f      	bne.n	8012348 <create_name+0x98>
		for (;;) {
			c = (BYTE)p[si++];
 80122e8:	697b      	ldr	r3, [r7, #20]
 80122ea:	1c5a      	adds	r2, r3, #1
 80122ec:	617a      	str	r2, [r7, #20]
 80122ee:	68fa      	ldr	r2, [r7, #12]
 80122f0:	4413      	add	r3, r2
 80122f2:	781b      	ldrb	r3, [r3, #0]
 80122f4:	77fb      	strb	r3, [r7, #31]
			if (c != '.' || si >= 3) break;
 80122f6:	7ffb      	ldrb	r3, [r7, #31]
 80122f8:	2b2e      	cmp	r3, #46	; 0x2e
 80122fa:	d10a      	bne.n	8012312 <create_name+0x62>
 80122fc:	697b      	ldr	r3, [r7, #20]
 80122fe:	2b02      	cmp	r3, #2
 8012300:	d807      	bhi.n	8012312 <create_name+0x62>
			sfn[i++] = c;
 8012302:	693b      	ldr	r3, [r7, #16]
 8012304:	1c5a      	adds	r2, r3, #1
 8012306:	613a      	str	r2, [r7, #16]
 8012308:	68ba      	ldr	r2, [r7, #8]
 801230a:	4413      	add	r3, r2
 801230c:	7ffa      	ldrb	r2, [r7, #31]
 801230e:	701a      	strb	r2, [r3, #0]
			c = (BYTE)p[si++];
 8012310:	e7ea      	b.n	80122e8 <create_name+0x38>
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
 8012312:	7ffb      	ldrb	r3, [r7, #31]
 8012314:	2b2f      	cmp	r3, #47	; 0x2f
 8012316:	d007      	beq.n	8012328 <create_name+0x78>
 8012318:	7ffb      	ldrb	r3, [r7, #31]
 801231a:	2b5c      	cmp	r3, #92	; 0x5c
 801231c:	d004      	beq.n	8012328 <create_name+0x78>
 801231e:	7ffb      	ldrb	r3, [r7, #31]
 8012320:	2b20      	cmp	r3, #32
 8012322:	d901      	bls.n	8012328 <create_name+0x78>
 8012324:	2306      	movs	r3, #6
 8012326:	e084      	b.n	8012432 <create_name+0x182>
		*path = p + si;								/* Return pointer to the next segment */
 8012328:	68fa      	ldr	r2, [r7, #12]
 801232a:	697b      	ldr	r3, [r7, #20]
 801232c:	441a      	add	r2, r3
 801232e:	683b      	ldr	r3, [r7, #0]
 8012330:	601a      	str	r2, [r3, #0]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
 8012332:	7ffb      	ldrb	r3, [r7, #31]
 8012334:	2b20      	cmp	r3, #32
 8012336:	d801      	bhi.n	801233c <create_name+0x8c>
 8012338:	2224      	movs	r2, #36	; 0x24
 801233a:	e000      	b.n	801233e <create_name+0x8e>
 801233c:	2220      	movs	r2, #32
 801233e:	68bb      	ldr	r3, [r7, #8]
 8012340:	330b      	adds	r3, #11
 8012342:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 8012344:	2300      	movs	r3, #0
 8012346:	e074      	b.n	8012432 <create_name+0x182>
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8012348:	697b      	ldr	r3, [r7, #20]
 801234a:	1c5a      	adds	r2, r3, #1
 801234c:	617a      	str	r2, [r7, #20]
 801234e:	68fa      	ldr	r2, [r7, #12]
 8012350:	4413      	add	r3, r2
 8012352:	781b      	ldrb	r3, [r3, #0]
 8012354:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8012356:	7ffb      	ldrb	r3, [r7, #31]
 8012358:	2b20      	cmp	r3, #32
 801235a:	d94e      	bls.n	80123fa <create_name+0x14a>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 801235c:	7ffb      	ldrb	r3, [r7, #31]
 801235e:	2b2f      	cmp	r3, #47	; 0x2f
 8012360:	d006      	beq.n	8012370 <create_name+0xc0>
 8012362:	7ffb      	ldrb	r3, [r7, #31]
 8012364:	2b5c      	cmp	r3, #92	; 0x5c
 8012366:	d110      	bne.n	801238a <create_name+0xda>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8012368:	e002      	b.n	8012370 <create_name+0xc0>
 801236a:	697b      	ldr	r3, [r7, #20]
 801236c:	3301      	adds	r3, #1
 801236e:	617b      	str	r3, [r7, #20]
 8012370:	68fa      	ldr	r2, [r7, #12]
 8012372:	697b      	ldr	r3, [r7, #20]
 8012374:	4413      	add	r3, r2
 8012376:	781b      	ldrb	r3, [r3, #0]
 8012378:	2b2f      	cmp	r3, #47	; 0x2f
 801237a:	d0f6      	beq.n	801236a <create_name+0xba>
 801237c:	68fa      	ldr	r2, [r7, #12]
 801237e:	697b      	ldr	r3, [r7, #20]
 8012380:	4413      	add	r3, r2
 8012382:	781b      	ldrb	r3, [r3, #0]
 8012384:	2b5c      	cmp	r3, #92	; 0x5c
 8012386:	d0f0      	beq.n	801236a <create_name+0xba>
			break;
 8012388:	e038      	b.n	80123fc <create_name+0x14c>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 801238a:	7ffb      	ldrb	r3, [r7, #31]
 801238c:	2b2e      	cmp	r3, #46	; 0x2e
 801238e:	d003      	beq.n	8012398 <create_name+0xe8>
 8012390:	693a      	ldr	r2, [r7, #16]
 8012392:	69bb      	ldr	r3, [r7, #24]
 8012394:	429a      	cmp	r2, r3
 8012396:	d30c      	bcc.n	80123b2 <create_name+0x102>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8012398:	69bb      	ldr	r3, [r7, #24]
 801239a:	2b0b      	cmp	r3, #11
 801239c:	d002      	beq.n	80123a4 <create_name+0xf4>
 801239e:	7ffb      	ldrb	r3, [r7, #31]
 80123a0:	2b2e      	cmp	r3, #46	; 0x2e
 80123a2:	d001      	beq.n	80123a8 <create_name+0xf8>
 80123a4:	2306      	movs	r3, #6
 80123a6:	e044      	b.n	8012432 <create_name+0x182>
			i = 8; ni = 11;				/* Goto extension */
 80123a8:	2308      	movs	r3, #8
 80123aa:	613b      	str	r3, [r7, #16]
 80123ac:	230b      	movs	r3, #11
 80123ae:	61bb      	str	r3, [r7, #24]
			continue;
 80123b0:	e022      	b.n	80123f8 <create_name+0x148>
		}
		if (c >= 0x80) {				/* Extended character? */
 80123b2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	da04      	bge.n	80123c4 <create_name+0x114>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80123ba:	7ffb      	ldrb	r3, [r7, #31]
 80123bc:	3b80      	subs	r3, #128	; 0x80
 80123be:	4a1f      	ldr	r2, [pc, #124]	; (801243c <create_name+0x18c>)
 80123c0:	5cd3      	ldrb	r3, [r2, r3]
 80123c2:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80123c4:	7ffb      	ldrb	r3, [r7, #31]
 80123c6:	4619      	mov	r1, r3
 80123c8:	481d      	ldr	r0, [pc, #116]	; (8012440 <create_name+0x190>)
 80123ca:	f7fe fee5 	bl	8011198 <chk_chr>
 80123ce:	4603      	mov	r3, r0
 80123d0:	2b00      	cmp	r3, #0
 80123d2:	d001      	beq.n	80123d8 <create_name+0x128>
 80123d4:	2306      	movs	r3, #6
 80123d6:	e02c      	b.n	8012432 <create_name+0x182>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80123d8:	7ffb      	ldrb	r3, [r7, #31]
 80123da:	2b60      	cmp	r3, #96	; 0x60
 80123dc:	d905      	bls.n	80123ea <create_name+0x13a>
 80123de:	7ffb      	ldrb	r3, [r7, #31]
 80123e0:	2b7a      	cmp	r3, #122	; 0x7a
 80123e2:	d802      	bhi.n	80123ea <create_name+0x13a>
 80123e4:	7ffb      	ldrb	r3, [r7, #31]
 80123e6:	3b20      	subs	r3, #32
 80123e8:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 80123ea:	693b      	ldr	r3, [r7, #16]
 80123ec:	1c5a      	adds	r2, r3, #1
 80123ee:	613a      	str	r2, [r7, #16]
 80123f0:	68ba      	ldr	r2, [r7, #8]
 80123f2:	4413      	add	r3, r2
 80123f4:	7ffa      	ldrb	r2, [r7, #31]
 80123f6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80123f8:	e7a6      	b.n	8012348 <create_name+0x98>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80123fa:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80123fc:	68fa      	ldr	r2, [r7, #12]
 80123fe:	697b      	ldr	r3, [r7, #20]
 8012400:	441a      	add	r2, r3
 8012402:	683b      	ldr	r3, [r7, #0]
 8012404:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8012406:	693b      	ldr	r3, [r7, #16]
 8012408:	2b00      	cmp	r3, #0
 801240a:	d101      	bne.n	8012410 <create_name+0x160>
 801240c:	2306      	movs	r3, #6
 801240e:	e010      	b.n	8012432 <create_name+0x182>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8012410:	68bb      	ldr	r3, [r7, #8]
 8012412:	781b      	ldrb	r3, [r3, #0]
 8012414:	2be5      	cmp	r3, #229	; 0xe5
 8012416:	d102      	bne.n	801241e <create_name+0x16e>
 8012418:	68bb      	ldr	r3, [r7, #8]
 801241a:	2205      	movs	r2, #5
 801241c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801241e:	7ffb      	ldrb	r3, [r7, #31]
 8012420:	2b20      	cmp	r3, #32
 8012422:	d801      	bhi.n	8012428 <create_name+0x178>
 8012424:	2204      	movs	r2, #4
 8012426:	e000      	b.n	801242a <create_name+0x17a>
 8012428:	2200      	movs	r2, #0
 801242a:	68bb      	ldr	r3, [r7, #8]
 801242c:	330b      	adds	r3, #11
 801242e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8012430:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8012432:	4618      	mov	r0, r3
 8012434:	3720      	adds	r7, #32
 8012436:	46bd      	mov	sp, r7
 8012438:	bd80      	pop	{r7, pc}
 801243a:	bf00      	nop
 801243c:	08019c78 	.word	0x08019c78
 8012440:	08019c28 	.word	0x08019c28

08012444 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8012444:	b580      	push	{r7, lr}
 8012446:	b086      	sub	sp, #24
 8012448:	af00      	add	r7, sp, #0
 801244a:	6078      	str	r0, [r7, #4]
 801244c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8012452:	693b      	ldr	r3, [r7, #16]
 8012454:	681b      	ldr	r3, [r3, #0]
 8012456:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 8012458:	683b      	ldr	r3, [r7, #0]
 801245a:	781b      	ldrb	r3, [r3, #0]
 801245c:	2b2f      	cmp	r3, #47	; 0x2f
 801245e:	d00b      	beq.n	8012478 <follow_path+0x34>
 8012460:	683b      	ldr	r3, [r7, #0]
 8012462:	781b      	ldrb	r3, [r3, #0]
 8012464:	2b5c      	cmp	r3, #92	; 0x5c
 8012466:	d007      	beq.n	8012478 <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 8012468:	68fb      	ldr	r3, [r7, #12]
 801246a:	699a      	ldr	r2, [r3, #24]
 801246c:	693b      	ldr	r3, [r7, #16]
 801246e:	609a      	str	r2, [r3, #8]
 8012470:	e00d      	b.n	801248e <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8012472:	683b      	ldr	r3, [r7, #0]
 8012474:	3301      	adds	r3, #1
 8012476:	603b      	str	r3, [r7, #0]
 8012478:	683b      	ldr	r3, [r7, #0]
 801247a:	781b      	ldrb	r3, [r3, #0]
 801247c:	2b2f      	cmp	r3, #47	; 0x2f
 801247e:	d0f8      	beq.n	8012472 <follow_path+0x2e>
 8012480:	683b      	ldr	r3, [r7, #0]
 8012482:	781b      	ldrb	r3, [r3, #0]
 8012484:	2b5c      	cmp	r3, #92	; 0x5c
 8012486:	d0f4      	beq.n	8012472 <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 8012488:	693b      	ldr	r3, [r7, #16]
 801248a:	2200      	movs	r2, #0
 801248c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801248e:	683b      	ldr	r3, [r7, #0]
 8012490:	781b      	ldrb	r3, [r3, #0]
 8012492:	2b1f      	cmp	r3, #31
 8012494:	d80a      	bhi.n	80124ac <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	2280      	movs	r2, #128	; 0x80
 801249a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 801249e:	2100      	movs	r1, #0
 80124a0:	6878      	ldr	r0, [r7, #4]
 80124a2:	f7ff fc1e 	bl	8011ce2 <dir_sdi>
 80124a6:	4603      	mov	r3, r0
 80124a8:	75fb      	strb	r3, [r7, #23]
 80124aa:	e05b      	b.n	8012564 <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80124ac:	463b      	mov	r3, r7
 80124ae:	4619      	mov	r1, r3
 80124b0:	6878      	ldr	r0, [r7, #4]
 80124b2:	f7ff fefd 	bl	80122b0 <create_name>
 80124b6:	4603      	mov	r3, r0
 80124b8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80124ba:	7dfb      	ldrb	r3, [r7, #23]
 80124bc:	2b00      	cmp	r3, #0
 80124be:	d14c      	bne.n	801255a <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 80124c0:	6878      	ldr	r0, [r7, #4]
 80124c2:	f7ff fe50 	bl	8012166 <dir_find>
 80124c6:	4603      	mov	r3, r0
 80124c8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80124d0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80124d2:	7dfb      	ldrb	r3, [r7, #23]
 80124d4:	2b00      	cmp	r3, #0
 80124d6:	d01b      	beq.n	8012510 <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80124d8:	7dfb      	ldrb	r3, [r7, #23]
 80124da:	2b04      	cmp	r3, #4
 80124dc:	d13f      	bne.n	801255e <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 80124de:	7afb      	ldrb	r3, [r7, #11]
 80124e0:	f003 0320 	and.w	r3, r3, #32
 80124e4:	2b00      	cmp	r3, #0
 80124e6:	d00b      	beq.n	8012500 <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 80124e8:	7afb      	ldrb	r3, [r7, #11]
 80124ea:	f003 0304 	and.w	r3, r3, #4
 80124ee:	2b00      	cmp	r3, #0
 80124f0:	d031      	beq.n	8012556 <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	2280      	movs	r2, #128	; 0x80
 80124f6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 80124fa:	2300      	movs	r3, #0
 80124fc:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 80124fe:	e02e      	b.n	801255e <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8012500:	7afb      	ldrb	r3, [r7, #11]
 8012502:	f003 0304 	and.w	r3, r3, #4
 8012506:	2b00      	cmp	r3, #0
 8012508:	d129      	bne.n	801255e <follow_path+0x11a>
 801250a:	2305      	movs	r3, #5
 801250c:	75fb      	strb	r3, [r7, #23]
				break;
 801250e:	e026      	b.n	801255e <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012510:	7afb      	ldrb	r3, [r7, #11]
 8012512:	f003 0304 	and.w	r3, r3, #4
 8012516:	2b00      	cmp	r3, #0
 8012518:	d123      	bne.n	8012562 <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801251a:	693b      	ldr	r3, [r7, #16]
 801251c:	799b      	ldrb	r3, [r3, #6]
 801251e:	f003 0310 	and.w	r3, r3, #16
 8012522:	2b00      	cmp	r3, #0
 8012524:	d102      	bne.n	801252c <follow_path+0xe8>
				res = FR_NO_PATH; break;
 8012526:	2305      	movs	r3, #5
 8012528:	75fb      	strb	r3, [r7, #23]
 801252a:	e01b      	b.n	8012564 <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801252c:	68fb      	ldr	r3, [r7, #12]
 801252e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	695b      	ldr	r3, [r3, #20]
 8012536:	68fa      	ldr	r2, [r7, #12]
 8012538:	8992      	ldrh	r2, [r2, #12]
 801253a:	fbb3 f0f2 	udiv	r0, r3, r2
 801253e:	fb02 f200 	mul.w	r2, r2, r0
 8012542:	1a9b      	subs	r3, r3, r2
 8012544:	440b      	add	r3, r1
 8012546:	4619      	mov	r1, r3
 8012548:	68f8      	ldr	r0, [r7, #12]
 801254a:	f7ff fd70 	bl	801202e <ld_clust>
 801254e:	4602      	mov	r2, r0
 8012550:	693b      	ldr	r3, [r7, #16]
 8012552:	609a      	str	r2, [r3, #8]
 8012554:	e7aa      	b.n	80124ac <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8012556:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012558:	e7a8      	b.n	80124ac <follow_path+0x68>
			if (res != FR_OK) break;
 801255a:	bf00      	nop
 801255c:	e002      	b.n	8012564 <follow_path+0x120>
				break;
 801255e:	bf00      	nop
 8012560:	e000      	b.n	8012564 <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012562:	bf00      	nop
			}
		}
	}

	return res;
 8012564:	7dfb      	ldrb	r3, [r7, #23]
}
 8012566:	4618      	mov	r0, r3
 8012568:	3718      	adds	r7, #24
 801256a:	46bd      	mov	sp, r7
 801256c:	bd80      	pop	{r7, pc}

0801256e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801256e:	b480      	push	{r7}
 8012570:	b087      	sub	sp, #28
 8012572:	af00      	add	r7, sp, #0
 8012574:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8012576:	f04f 33ff 	mov.w	r3, #4294967295
 801257a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	681b      	ldr	r3, [r3, #0]
 8012580:	2b00      	cmp	r3, #0
 8012582:	d031      	beq.n	80125e8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	681b      	ldr	r3, [r3, #0]
 8012588:	617b      	str	r3, [r7, #20]
 801258a:	e002      	b.n	8012592 <get_ldnumber+0x24>
 801258c:	697b      	ldr	r3, [r7, #20]
 801258e:	3301      	adds	r3, #1
 8012590:	617b      	str	r3, [r7, #20]
 8012592:	697b      	ldr	r3, [r7, #20]
 8012594:	781b      	ldrb	r3, [r3, #0]
 8012596:	2b20      	cmp	r3, #32
 8012598:	d903      	bls.n	80125a2 <get_ldnumber+0x34>
 801259a:	697b      	ldr	r3, [r7, #20]
 801259c:	781b      	ldrb	r3, [r3, #0]
 801259e:	2b3a      	cmp	r3, #58	; 0x3a
 80125a0:	d1f4      	bne.n	801258c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80125a2:	697b      	ldr	r3, [r7, #20]
 80125a4:	781b      	ldrb	r3, [r3, #0]
 80125a6:	2b3a      	cmp	r3, #58	; 0x3a
 80125a8:	d11c      	bne.n	80125e4 <get_ldnumber+0x76>
			tp = *path;
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	681b      	ldr	r3, [r3, #0]
 80125ae:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80125b0:	68fb      	ldr	r3, [r7, #12]
 80125b2:	1c5a      	adds	r2, r3, #1
 80125b4:	60fa      	str	r2, [r7, #12]
 80125b6:	781b      	ldrb	r3, [r3, #0]
 80125b8:	3b30      	subs	r3, #48	; 0x30
 80125ba:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80125bc:	68bb      	ldr	r3, [r7, #8]
 80125be:	2b09      	cmp	r3, #9
 80125c0:	d80e      	bhi.n	80125e0 <get_ldnumber+0x72>
 80125c2:	68fa      	ldr	r2, [r7, #12]
 80125c4:	697b      	ldr	r3, [r7, #20]
 80125c6:	429a      	cmp	r2, r3
 80125c8:	d10a      	bne.n	80125e0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80125ca:	68bb      	ldr	r3, [r7, #8]
 80125cc:	2b00      	cmp	r3, #0
 80125ce:	d107      	bne.n	80125e0 <get_ldnumber+0x72>
					vol = (int)i;
 80125d0:	68bb      	ldr	r3, [r7, #8]
 80125d2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80125d4:	697b      	ldr	r3, [r7, #20]
 80125d6:	3301      	adds	r3, #1
 80125d8:	617b      	str	r3, [r7, #20]
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	697a      	ldr	r2, [r7, #20]
 80125de:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80125e0:	693b      	ldr	r3, [r7, #16]
 80125e2:	e002      	b.n	80125ea <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80125e4:	2300      	movs	r3, #0
 80125e6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80125e8:	693b      	ldr	r3, [r7, #16]
}
 80125ea:	4618      	mov	r0, r3
 80125ec:	371c      	adds	r7, #28
 80125ee:	46bd      	mov	sp, r7
 80125f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125f4:	4770      	bx	lr
	...

080125f8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80125f8:	b580      	push	{r7, lr}
 80125fa:	b082      	sub	sp, #8
 80125fc:	af00      	add	r7, sp, #0
 80125fe:	6078      	str	r0, [r7, #4]
 8012600:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	2200      	movs	r2, #0
 8012606:	70da      	strb	r2, [r3, #3]
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	f04f 32ff 	mov.w	r2, #4294967295
 801260e:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8012610:	6839      	ldr	r1, [r7, #0]
 8012612:	6878      	ldr	r0, [r7, #4]
 8012614:	f7fe ff8c 	bl	8011530 <move_window>
 8012618:	4603      	mov	r3, r0
 801261a:	2b00      	cmp	r3, #0
 801261c:	d001      	beq.n	8012622 <check_fs+0x2a>
 801261e:	2304      	movs	r3, #4
 8012620:	e038      	b.n	8012694 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	3338      	adds	r3, #56	; 0x38
 8012626:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801262a:	4618      	mov	r0, r3
 801262c:	f7fe fcd0 	bl	8010fd0 <ld_word>
 8012630:	4603      	mov	r3, r0
 8012632:	461a      	mov	r2, r3
 8012634:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8012638:	429a      	cmp	r2, r3
 801263a:	d001      	beq.n	8012640 <check_fs+0x48>
 801263c:	2303      	movs	r3, #3
 801263e:	e029      	b.n	8012694 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012646:	2be9      	cmp	r3, #233	; 0xe9
 8012648:	d009      	beq.n	801265e <check_fs+0x66>
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8012650:	2beb      	cmp	r3, #235	; 0xeb
 8012652:	d11e      	bne.n	8012692 <check_fs+0x9a>
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 801265a:	2b90      	cmp	r3, #144	; 0x90
 801265c:	d119      	bne.n	8012692 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	3338      	adds	r3, #56	; 0x38
 8012662:	3336      	adds	r3, #54	; 0x36
 8012664:	4618      	mov	r0, r3
 8012666:	f7fe fccb 	bl	8011000 <ld_dword>
 801266a:	4603      	mov	r3, r0
 801266c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8012670:	4a0a      	ldr	r2, [pc, #40]	; (801269c <check_fs+0xa4>)
 8012672:	4293      	cmp	r3, r2
 8012674:	d101      	bne.n	801267a <check_fs+0x82>
 8012676:	2300      	movs	r3, #0
 8012678:	e00c      	b.n	8012694 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	3338      	adds	r3, #56	; 0x38
 801267e:	3352      	adds	r3, #82	; 0x52
 8012680:	4618      	mov	r0, r3
 8012682:	f7fe fcbd 	bl	8011000 <ld_dword>
 8012686:	4602      	mov	r2, r0
 8012688:	4b05      	ldr	r3, [pc, #20]	; (80126a0 <check_fs+0xa8>)
 801268a:	429a      	cmp	r2, r3
 801268c:	d101      	bne.n	8012692 <check_fs+0x9a>
 801268e:	2300      	movs	r3, #0
 8012690:	e000      	b.n	8012694 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8012692:	2302      	movs	r3, #2
}
 8012694:	4618      	mov	r0, r3
 8012696:	3708      	adds	r7, #8
 8012698:	46bd      	mov	sp, r7
 801269a:	bd80      	pop	{r7, pc}
 801269c:	00544146 	.word	0x00544146
 80126a0:	33544146 	.word	0x33544146

080126a4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80126a4:	b580      	push	{r7, lr}
 80126a6:	b096      	sub	sp, #88	; 0x58
 80126a8:	af00      	add	r7, sp, #0
 80126aa:	60f8      	str	r0, [r7, #12]
 80126ac:	60b9      	str	r1, [r7, #8]
 80126ae:	4613      	mov	r3, r2
 80126b0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80126b2:	68bb      	ldr	r3, [r7, #8]
 80126b4:	2200      	movs	r2, #0
 80126b6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80126b8:	68f8      	ldr	r0, [r7, #12]
 80126ba:	f7ff ff58 	bl	801256e <get_ldnumber>
 80126be:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80126c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80126c2:	2b00      	cmp	r3, #0
 80126c4:	da01      	bge.n	80126ca <find_volume+0x26>
 80126c6:	230b      	movs	r3, #11
 80126c8:	e268      	b.n	8012b9c <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80126ca:	4ab0      	ldr	r2, [pc, #704]	; (801298c <find_volume+0x2e8>)
 80126cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80126ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80126d2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80126d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126d6:	2b00      	cmp	r3, #0
 80126d8:	d101      	bne.n	80126de <find_volume+0x3a>
 80126da:	230c      	movs	r3, #12
 80126dc:	e25e      	b.n	8012b9c <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80126de:	68bb      	ldr	r3, [r7, #8]
 80126e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80126e2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80126e4:	79fb      	ldrb	r3, [r7, #7]
 80126e6:	f023 0301 	bic.w	r3, r3, #1
 80126ea:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80126ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126ee:	781b      	ldrb	r3, [r3, #0]
 80126f0:	2b00      	cmp	r3, #0
 80126f2:	d01a      	beq.n	801272a <find_volume+0x86>
		stat = disk_status(fs->drv);
 80126f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80126f6:	785b      	ldrb	r3, [r3, #1]
 80126f8:	4618      	mov	r0, r3
 80126fa:	f7fe fbcb 	bl	8010e94 <disk_status>
 80126fe:	4603      	mov	r3, r0
 8012700:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8012704:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012708:	f003 0301 	and.w	r3, r3, #1
 801270c:	2b00      	cmp	r3, #0
 801270e:	d10c      	bne.n	801272a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8012710:	79fb      	ldrb	r3, [r7, #7]
 8012712:	2b00      	cmp	r3, #0
 8012714:	d007      	beq.n	8012726 <find_volume+0x82>
 8012716:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801271a:	f003 0304 	and.w	r3, r3, #4
 801271e:	2b00      	cmp	r3, #0
 8012720:	d001      	beq.n	8012726 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8012722:	230a      	movs	r3, #10
 8012724:	e23a      	b.n	8012b9c <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 8012726:	2300      	movs	r3, #0
 8012728:	e238      	b.n	8012b9c <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801272a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801272c:	2200      	movs	r2, #0
 801272e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8012730:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012732:	b2da      	uxtb	r2, r3
 8012734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012736:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8012738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801273a:	785b      	ldrb	r3, [r3, #1]
 801273c:	4618      	mov	r0, r3
 801273e:	f7fe fbc3 	bl	8010ec8 <disk_initialize>
 8012742:	4603      	mov	r3, r0
 8012744:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8012748:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801274c:	f003 0301 	and.w	r3, r3, #1
 8012750:	2b00      	cmp	r3, #0
 8012752:	d001      	beq.n	8012758 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8012754:	2303      	movs	r3, #3
 8012756:	e221      	b.n	8012b9c <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8012758:	79fb      	ldrb	r3, [r7, #7]
 801275a:	2b00      	cmp	r3, #0
 801275c:	d007      	beq.n	801276e <find_volume+0xca>
 801275e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012762:	f003 0304 	and.w	r3, r3, #4
 8012766:	2b00      	cmp	r3, #0
 8012768:	d001      	beq.n	801276e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 801276a:	230a      	movs	r3, #10
 801276c:	e216      	b.n	8012b9c <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 801276e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012770:	7858      	ldrb	r0, [r3, #1]
 8012772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012774:	330c      	adds	r3, #12
 8012776:	461a      	mov	r2, r3
 8012778:	2102      	movs	r1, #2
 801277a:	f7fe fc0b 	bl	8010f94 <disk_ioctl>
 801277e:	4603      	mov	r3, r0
 8012780:	2b00      	cmp	r3, #0
 8012782:	d001      	beq.n	8012788 <find_volume+0xe4>
 8012784:	2301      	movs	r3, #1
 8012786:	e209      	b.n	8012b9c <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8012788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801278a:	899b      	ldrh	r3, [r3, #12]
 801278c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012790:	d80d      	bhi.n	80127ae <find_volume+0x10a>
 8012792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012794:	899b      	ldrh	r3, [r3, #12]
 8012796:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801279a:	d308      	bcc.n	80127ae <find_volume+0x10a>
 801279c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801279e:	899b      	ldrh	r3, [r3, #12]
 80127a0:	461a      	mov	r2, r3
 80127a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127a4:	899b      	ldrh	r3, [r3, #12]
 80127a6:	3b01      	subs	r3, #1
 80127a8:	4013      	ands	r3, r2
 80127aa:	2b00      	cmp	r3, #0
 80127ac:	d001      	beq.n	80127b2 <find_volume+0x10e>
 80127ae:	2301      	movs	r3, #1
 80127b0:	e1f4      	b.n	8012b9c <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80127b2:	2300      	movs	r3, #0
 80127b4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80127b6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80127b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80127ba:	f7ff ff1d 	bl	80125f8 <check_fs>
 80127be:	4603      	mov	r3, r0
 80127c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80127c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80127c8:	2b02      	cmp	r3, #2
 80127ca:	d14b      	bne.n	8012864 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80127cc:	2300      	movs	r3, #0
 80127ce:	643b      	str	r3, [r7, #64]	; 0x40
 80127d0:	e01f      	b.n	8012812 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80127d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80127d4:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80127d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80127da:	011b      	lsls	r3, r3, #4
 80127dc:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80127e0:	4413      	add	r3, r2
 80127e2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80127e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127e6:	3304      	adds	r3, #4
 80127e8:	781b      	ldrb	r3, [r3, #0]
 80127ea:	2b00      	cmp	r3, #0
 80127ec:	d006      	beq.n	80127fc <find_volume+0x158>
 80127ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127f0:	3308      	adds	r3, #8
 80127f2:	4618      	mov	r0, r3
 80127f4:	f7fe fc04 	bl	8011000 <ld_dword>
 80127f8:	4602      	mov	r2, r0
 80127fa:	e000      	b.n	80127fe <find_volume+0x15a>
 80127fc:	2200      	movs	r2, #0
 80127fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012800:	009b      	lsls	r3, r3, #2
 8012802:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8012806:	440b      	add	r3, r1
 8012808:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801280c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801280e:	3301      	adds	r3, #1
 8012810:	643b      	str	r3, [r7, #64]	; 0x40
 8012812:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012814:	2b03      	cmp	r3, #3
 8012816:	d9dc      	bls.n	80127d2 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8012818:	2300      	movs	r3, #0
 801281a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 801281c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801281e:	2b00      	cmp	r3, #0
 8012820:	d002      	beq.n	8012828 <find_volume+0x184>
 8012822:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012824:	3b01      	subs	r3, #1
 8012826:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8012828:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801282a:	009b      	lsls	r3, r3, #2
 801282c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8012830:	4413      	add	r3, r2
 8012832:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8012836:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8012838:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801283a:	2b00      	cmp	r3, #0
 801283c:	d005      	beq.n	801284a <find_volume+0x1a6>
 801283e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012840:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012842:	f7ff fed9 	bl	80125f8 <check_fs>
 8012846:	4603      	mov	r3, r0
 8012848:	e000      	b.n	801284c <find_volume+0x1a8>
 801284a:	2303      	movs	r3, #3
 801284c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8012850:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012854:	2b01      	cmp	r3, #1
 8012856:	d905      	bls.n	8012864 <find_volume+0x1c0>
 8012858:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801285a:	3301      	adds	r3, #1
 801285c:	643b      	str	r3, [r7, #64]	; 0x40
 801285e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012860:	2b03      	cmp	r3, #3
 8012862:	d9e1      	bls.n	8012828 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8012864:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012868:	2b04      	cmp	r3, #4
 801286a:	d101      	bne.n	8012870 <find_volume+0x1cc>
 801286c:	2301      	movs	r3, #1
 801286e:	e195      	b.n	8012b9c <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8012870:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012874:	2b01      	cmp	r3, #1
 8012876:	d901      	bls.n	801287c <find_volume+0x1d8>
 8012878:	230d      	movs	r3, #13
 801287a:	e18f      	b.n	8012b9c <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 801287c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801287e:	3338      	adds	r3, #56	; 0x38
 8012880:	330b      	adds	r3, #11
 8012882:	4618      	mov	r0, r3
 8012884:	f7fe fba4 	bl	8010fd0 <ld_word>
 8012888:	4603      	mov	r3, r0
 801288a:	461a      	mov	r2, r3
 801288c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801288e:	899b      	ldrh	r3, [r3, #12]
 8012890:	429a      	cmp	r2, r3
 8012892:	d001      	beq.n	8012898 <find_volume+0x1f4>
 8012894:	230d      	movs	r3, #13
 8012896:	e181      	b.n	8012b9c <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8012898:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801289a:	3338      	adds	r3, #56	; 0x38
 801289c:	3316      	adds	r3, #22
 801289e:	4618      	mov	r0, r3
 80128a0:	f7fe fb96 	bl	8010fd0 <ld_word>
 80128a4:	4603      	mov	r3, r0
 80128a6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80128a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80128aa:	2b00      	cmp	r3, #0
 80128ac:	d106      	bne.n	80128bc <find_volume+0x218>
 80128ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128b0:	3338      	adds	r3, #56	; 0x38
 80128b2:	3324      	adds	r3, #36	; 0x24
 80128b4:	4618      	mov	r0, r3
 80128b6:	f7fe fba3 	bl	8011000 <ld_dword>
 80128ba:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80128bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80128c0:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80128c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128c4:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80128c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128ca:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80128cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128ce:	789b      	ldrb	r3, [r3, #2]
 80128d0:	2b01      	cmp	r3, #1
 80128d2:	d005      	beq.n	80128e0 <find_volume+0x23c>
 80128d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128d6:	789b      	ldrb	r3, [r3, #2]
 80128d8:	2b02      	cmp	r3, #2
 80128da:	d001      	beq.n	80128e0 <find_volume+0x23c>
 80128dc:	230d      	movs	r3, #13
 80128de:	e15d      	b.n	8012b9c <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80128e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128e2:	789b      	ldrb	r3, [r3, #2]
 80128e4:	461a      	mov	r2, r3
 80128e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80128e8:	fb02 f303 	mul.w	r3, r2, r3
 80128ec:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80128ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80128f4:	b29a      	uxth	r2, r3
 80128f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128f8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80128fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128fc:	895b      	ldrh	r3, [r3, #10]
 80128fe:	2b00      	cmp	r3, #0
 8012900:	d008      	beq.n	8012914 <find_volume+0x270>
 8012902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012904:	895b      	ldrh	r3, [r3, #10]
 8012906:	461a      	mov	r2, r3
 8012908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801290a:	895b      	ldrh	r3, [r3, #10]
 801290c:	3b01      	subs	r3, #1
 801290e:	4013      	ands	r3, r2
 8012910:	2b00      	cmp	r3, #0
 8012912:	d001      	beq.n	8012918 <find_volume+0x274>
 8012914:	230d      	movs	r3, #13
 8012916:	e141      	b.n	8012b9c <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8012918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801291a:	3338      	adds	r3, #56	; 0x38
 801291c:	3311      	adds	r3, #17
 801291e:	4618      	mov	r0, r3
 8012920:	f7fe fb56 	bl	8010fd0 <ld_word>
 8012924:	4603      	mov	r3, r0
 8012926:	461a      	mov	r2, r3
 8012928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801292a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801292c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801292e:	891b      	ldrh	r3, [r3, #8]
 8012930:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012932:	8992      	ldrh	r2, [r2, #12]
 8012934:	0952      	lsrs	r2, r2, #5
 8012936:	b292      	uxth	r2, r2
 8012938:	fbb3 f1f2 	udiv	r1, r3, r2
 801293c:	fb02 f201 	mul.w	r2, r2, r1
 8012940:	1a9b      	subs	r3, r3, r2
 8012942:	b29b      	uxth	r3, r3
 8012944:	2b00      	cmp	r3, #0
 8012946:	d001      	beq.n	801294c <find_volume+0x2a8>
 8012948:	230d      	movs	r3, #13
 801294a:	e127      	b.n	8012b9c <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801294c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801294e:	3338      	adds	r3, #56	; 0x38
 8012950:	3313      	adds	r3, #19
 8012952:	4618      	mov	r0, r3
 8012954:	f7fe fb3c 	bl	8010fd0 <ld_word>
 8012958:	4603      	mov	r3, r0
 801295a:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801295c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801295e:	2b00      	cmp	r3, #0
 8012960:	d106      	bne.n	8012970 <find_volume+0x2cc>
 8012962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012964:	3338      	adds	r3, #56	; 0x38
 8012966:	3320      	adds	r3, #32
 8012968:	4618      	mov	r0, r3
 801296a:	f7fe fb49 	bl	8011000 <ld_dword>
 801296e:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8012970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012972:	3338      	adds	r3, #56	; 0x38
 8012974:	330e      	adds	r3, #14
 8012976:	4618      	mov	r0, r3
 8012978:	f7fe fb2a 	bl	8010fd0 <ld_word>
 801297c:	4603      	mov	r3, r0
 801297e:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8012980:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012982:	2b00      	cmp	r3, #0
 8012984:	d104      	bne.n	8012990 <find_volume+0x2ec>
 8012986:	230d      	movs	r3, #13
 8012988:	e108      	b.n	8012b9c <find_volume+0x4f8>
 801298a:	bf00      	nop
 801298c:	200422e0 	.word	0x200422e0

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8012990:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012992:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012994:	4413      	add	r3, r2
 8012996:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012998:	8911      	ldrh	r1, [r2, #8]
 801299a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801299c:	8992      	ldrh	r2, [r2, #12]
 801299e:	0952      	lsrs	r2, r2, #5
 80129a0:	b292      	uxth	r2, r2
 80129a2:	fbb1 f2f2 	udiv	r2, r1, r2
 80129a6:	b292      	uxth	r2, r2
 80129a8:	4413      	add	r3, r2
 80129aa:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80129ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80129ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129b0:	429a      	cmp	r2, r3
 80129b2:	d201      	bcs.n	80129b8 <find_volume+0x314>
 80129b4:	230d      	movs	r3, #13
 80129b6:	e0f1      	b.n	8012b9c <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80129b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80129ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129bc:	1ad3      	subs	r3, r2, r3
 80129be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80129c0:	8952      	ldrh	r2, [r2, #10]
 80129c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80129c6:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80129c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129ca:	2b00      	cmp	r3, #0
 80129cc:	d101      	bne.n	80129d2 <find_volume+0x32e>
 80129ce:	230d      	movs	r3, #13
 80129d0:	e0e4      	b.n	8012b9c <find_volume+0x4f8>
		fmt = FS_FAT32;
 80129d2:	2303      	movs	r3, #3
 80129d4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80129d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129da:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80129de:	4293      	cmp	r3, r2
 80129e0:	d802      	bhi.n	80129e8 <find_volume+0x344>
 80129e2:	2302      	movs	r3, #2
 80129e4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80129e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129ea:	f640 72f5 	movw	r2, #4085	; 0xff5
 80129ee:	4293      	cmp	r3, r2
 80129f0:	d802      	bhi.n	80129f8 <find_volume+0x354>
 80129f2:	2301      	movs	r3, #1
 80129f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80129f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129fa:	1c9a      	adds	r2, r3, #2
 80129fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129fe:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8012a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a02:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012a04:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8012a06:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012a08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a0a:	441a      	add	r2, r3
 8012a0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a0e:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8012a10:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a14:	441a      	add	r2, r3
 8012a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a18:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8012a1a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012a1e:	2b03      	cmp	r3, #3
 8012a20:	d11e      	bne.n	8012a60 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8012a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a24:	3338      	adds	r3, #56	; 0x38
 8012a26:	332a      	adds	r3, #42	; 0x2a
 8012a28:	4618      	mov	r0, r3
 8012a2a:	f7fe fad1 	bl	8010fd0 <ld_word>
 8012a2e:	4603      	mov	r3, r0
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	d001      	beq.n	8012a38 <find_volume+0x394>
 8012a34:	230d      	movs	r3, #13
 8012a36:	e0b1      	b.n	8012b9c <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8012a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a3a:	891b      	ldrh	r3, [r3, #8]
 8012a3c:	2b00      	cmp	r3, #0
 8012a3e:	d001      	beq.n	8012a44 <find_volume+0x3a0>
 8012a40:	230d      	movs	r3, #13
 8012a42:	e0ab      	b.n	8012b9c <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8012a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a46:	3338      	adds	r3, #56	; 0x38
 8012a48:	332c      	adds	r3, #44	; 0x2c
 8012a4a:	4618      	mov	r0, r3
 8012a4c:	f7fe fad8 	bl	8011000 <ld_dword>
 8012a50:	4602      	mov	r2, r0
 8012a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a54:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8012a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a58:	69db      	ldr	r3, [r3, #28]
 8012a5a:	009b      	lsls	r3, r3, #2
 8012a5c:	647b      	str	r3, [r7, #68]	; 0x44
 8012a5e:	e01f      	b.n	8012aa0 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8012a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a62:	891b      	ldrh	r3, [r3, #8]
 8012a64:	2b00      	cmp	r3, #0
 8012a66:	d101      	bne.n	8012a6c <find_volume+0x3c8>
 8012a68:	230d      	movs	r3, #13
 8012a6a:	e097      	b.n	8012b9c <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8012a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a6e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012a70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012a72:	441a      	add	r2, r3
 8012a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a76:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8012a78:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012a7c:	2b02      	cmp	r3, #2
 8012a7e:	d103      	bne.n	8012a88 <find_volume+0x3e4>
 8012a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a82:	69db      	ldr	r3, [r3, #28]
 8012a84:	005b      	lsls	r3, r3, #1
 8012a86:	e00a      	b.n	8012a9e <find_volume+0x3fa>
 8012a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a8a:	69da      	ldr	r2, [r3, #28]
 8012a8c:	4613      	mov	r3, r2
 8012a8e:	005b      	lsls	r3, r3, #1
 8012a90:	4413      	add	r3, r2
 8012a92:	085a      	lsrs	r2, r3, #1
 8012a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a96:	69db      	ldr	r3, [r3, #28]
 8012a98:	f003 0301 	and.w	r3, r3, #1
 8012a9c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8012a9e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8012aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012aa2:	6a1a      	ldr	r2, [r3, #32]
 8012aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012aa6:	899b      	ldrh	r3, [r3, #12]
 8012aa8:	4619      	mov	r1, r3
 8012aaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012aac:	440b      	add	r3, r1
 8012aae:	3b01      	subs	r3, #1
 8012ab0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8012ab2:	8989      	ldrh	r1, [r1, #12]
 8012ab4:	fbb3 f3f1 	udiv	r3, r3, r1
 8012ab8:	429a      	cmp	r2, r3
 8012aba:	d201      	bcs.n	8012ac0 <find_volume+0x41c>
 8012abc:	230d      	movs	r3, #13
 8012abe:	e06d      	b.n	8012b9c <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8012ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ac2:	f04f 32ff 	mov.w	r2, #4294967295
 8012ac6:	615a      	str	r2, [r3, #20]
 8012ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012aca:	695a      	ldr	r2, [r3, #20]
 8012acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ace:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8012ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ad2:	2280      	movs	r2, #128	; 0x80
 8012ad4:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8012ad6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8012ada:	2b03      	cmp	r3, #3
 8012adc:	d149      	bne.n	8012b72 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8012ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ae0:	3338      	adds	r3, #56	; 0x38
 8012ae2:	3330      	adds	r3, #48	; 0x30
 8012ae4:	4618      	mov	r0, r3
 8012ae6:	f7fe fa73 	bl	8010fd0 <ld_word>
 8012aea:	4603      	mov	r3, r0
 8012aec:	2b01      	cmp	r3, #1
 8012aee:	d140      	bne.n	8012b72 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8012af0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012af2:	3301      	adds	r3, #1
 8012af4:	4619      	mov	r1, r3
 8012af6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012af8:	f7fe fd1a 	bl	8011530 <move_window>
 8012afc:	4603      	mov	r3, r0
 8012afe:	2b00      	cmp	r3, #0
 8012b00:	d137      	bne.n	8012b72 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8012b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b04:	2200      	movs	r2, #0
 8012b06:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8012b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b0a:	3338      	adds	r3, #56	; 0x38
 8012b0c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012b10:	4618      	mov	r0, r3
 8012b12:	f7fe fa5d 	bl	8010fd0 <ld_word>
 8012b16:	4603      	mov	r3, r0
 8012b18:	461a      	mov	r2, r3
 8012b1a:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8012b1e:	429a      	cmp	r2, r3
 8012b20:	d127      	bne.n	8012b72 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8012b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b24:	3338      	adds	r3, #56	; 0x38
 8012b26:	4618      	mov	r0, r3
 8012b28:	f7fe fa6a 	bl	8011000 <ld_dword>
 8012b2c:	4602      	mov	r2, r0
 8012b2e:	4b1d      	ldr	r3, [pc, #116]	; (8012ba4 <find_volume+0x500>)
 8012b30:	429a      	cmp	r2, r3
 8012b32:	d11e      	bne.n	8012b72 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8012b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b36:	3338      	adds	r3, #56	; 0x38
 8012b38:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8012b3c:	4618      	mov	r0, r3
 8012b3e:	f7fe fa5f 	bl	8011000 <ld_dword>
 8012b42:	4602      	mov	r2, r0
 8012b44:	4b18      	ldr	r3, [pc, #96]	; (8012ba8 <find_volume+0x504>)
 8012b46:	429a      	cmp	r2, r3
 8012b48:	d113      	bne.n	8012b72 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8012b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b4c:	3338      	adds	r3, #56	; 0x38
 8012b4e:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8012b52:	4618      	mov	r0, r3
 8012b54:	f7fe fa54 	bl	8011000 <ld_dword>
 8012b58:	4602      	mov	r2, r0
 8012b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b5c:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8012b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b60:	3338      	adds	r3, #56	; 0x38
 8012b62:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8012b66:	4618      	mov	r0, r3
 8012b68:	f7fe fa4a 	bl	8011000 <ld_dword>
 8012b6c:	4602      	mov	r2, r0
 8012b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b70:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8012b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b74:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8012b78:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8012b7a:	4b0c      	ldr	r3, [pc, #48]	; (8012bac <find_volume+0x508>)
 8012b7c:	881b      	ldrh	r3, [r3, #0]
 8012b7e:	3301      	adds	r3, #1
 8012b80:	b29a      	uxth	r2, r3
 8012b82:	4b0a      	ldr	r3, [pc, #40]	; (8012bac <find_volume+0x508>)
 8012b84:	801a      	strh	r2, [r3, #0]
 8012b86:	4b09      	ldr	r3, [pc, #36]	; (8012bac <find_volume+0x508>)
 8012b88:	881a      	ldrh	r2, [r3, #0]
 8012b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b8c:	80da      	strh	r2, [r3, #6]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 8012b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012b90:	2200      	movs	r2, #0
 8012b92:	619a      	str	r2, [r3, #24]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8012b94:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012b96:	f7fe fc63 	bl	8011460 <clear_lock>
#endif
	return FR_OK;
 8012b9a:	2300      	movs	r3, #0
}
 8012b9c:	4618      	mov	r0, r3
 8012b9e:	3758      	adds	r7, #88	; 0x58
 8012ba0:	46bd      	mov	sp, r7
 8012ba2:	bd80      	pop	{r7, pc}
 8012ba4:	41615252 	.word	0x41615252
 8012ba8:	61417272 	.word	0x61417272
 8012bac:	200422e4 	.word	0x200422e4

08012bb0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8012bb0:	b580      	push	{r7, lr}
 8012bb2:	b084      	sub	sp, #16
 8012bb4:	af00      	add	r7, sp, #0
 8012bb6:	6078      	str	r0, [r7, #4]
 8012bb8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8012bba:	2309      	movs	r3, #9
 8012bbc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8012bbe:	687b      	ldr	r3, [r7, #4]
 8012bc0:	2b00      	cmp	r3, #0
 8012bc2:	d01c      	beq.n	8012bfe <validate+0x4e>
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	681b      	ldr	r3, [r3, #0]
 8012bc8:	2b00      	cmp	r3, #0
 8012bca:	d018      	beq.n	8012bfe <validate+0x4e>
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	681b      	ldr	r3, [r3, #0]
 8012bd0:	781b      	ldrb	r3, [r3, #0]
 8012bd2:	2b00      	cmp	r3, #0
 8012bd4:	d013      	beq.n	8012bfe <validate+0x4e>
 8012bd6:	687b      	ldr	r3, [r7, #4]
 8012bd8:	889a      	ldrh	r2, [r3, #4]
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	681b      	ldr	r3, [r3, #0]
 8012bde:	88db      	ldrh	r3, [r3, #6]
 8012be0:	429a      	cmp	r2, r3
 8012be2:	d10c      	bne.n	8012bfe <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	681b      	ldr	r3, [r3, #0]
 8012be8:	785b      	ldrb	r3, [r3, #1]
 8012bea:	4618      	mov	r0, r3
 8012bec:	f7fe f952 	bl	8010e94 <disk_status>
 8012bf0:	4603      	mov	r3, r0
 8012bf2:	f003 0301 	and.w	r3, r3, #1
 8012bf6:	2b00      	cmp	r3, #0
 8012bf8:	d101      	bne.n	8012bfe <validate+0x4e>
			res = FR_OK;
 8012bfa:	2300      	movs	r3, #0
 8012bfc:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8012bfe:	7bfb      	ldrb	r3, [r7, #15]
 8012c00:	2b00      	cmp	r3, #0
 8012c02:	d102      	bne.n	8012c0a <validate+0x5a>
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	681b      	ldr	r3, [r3, #0]
 8012c08:	e000      	b.n	8012c0c <validate+0x5c>
 8012c0a:	2300      	movs	r3, #0
 8012c0c:	683a      	ldr	r2, [r7, #0]
 8012c0e:	6013      	str	r3, [r2, #0]
	return res;
 8012c10:	7bfb      	ldrb	r3, [r7, #15]
}
 8012c12:	4618      	mov	r0, r3
 8012c14:	3710      	adds	r7, #16
 8012c16:	46bd      	mov	sp, r7
 8012c18:	bd80      	pop	{r7, pc}
	...

08012c1c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8012c1c:	b580      	push	{r7, lr}
 8012c1e:	b088      	sub	sp, #32
 8012c20:	af00      	add	r7, sp, #0
 8012c22:	60f8      	str	r0, [r7, #12]
 8012c24:	60b9      	str	r1, [r7, #8]
 8012c26:	4613      	mov	r3, r2
 8012c28:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8012c2a:	68bb      	ldr	r3, [r7, #8]
 8012c2c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8012c2e:	f107 0310 	add.w	r3, r7, #16
 8012c32:	4618      	mov	r0, r3
 8012c34:	f7ff fc9b 	bl	801256e <get_ldnumber>
 8012c38:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8012c3a:	69fb      	ldr	r3, [r7, #28]
 8012c3c:	2b00      	cmp	r3, #0
 8012c3e:	da01      	bge.n	8012c44 <f_mount+0x28>
 8012c40:	230b      	movs	r3, #11
 8012c42:	e02b      	b.n	8012c9c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8012c44:	4a17      	ldr	r2, [pc, #92]	; (8012ca4 <f_mount+0x88>)
 8012c46:	69fb      	ldr	r3, [r7, #28]
 8012c48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012c4c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8012c4e:	69bb      	ldr	r3, [r7, #24]
 8012c50:	2b00      	cmp	r3, #0
 8012c52:	d005      	beq.n	8012c60 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8012c54:	69b8      	ldr	r0, [r7, #24]
 8012c56:	f7fe fc03 	bl	8011460 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8012c5a:	69bb      	ldr	r3, [r7, #24]
 8012c5c:	2200      	movs	r2, #0
 8012c5e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8012c60:	68fb      	ldr	r3, [r7, #12]
 8012c62:	2b00      	cmp	r3, #0
 8012c64:	d002      	beq.n	8012c6c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8012c66:	68fb      	ldr	r3, [r7, #12]
 8012c68:	2200      	movs	r2, #0
 8012c6a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8012c6c:	68fa      	ldr	r2, [r7, #12]
 8012c6e:	490d      	ldr	r1, [pc, #52]	; (8012ca4 <f_mount+0x88>)
 8012c70:	69fb      	ldr	r3, [r7, #28]
 8012c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8012c76:	68fb      	ldr	r3, [r7, #12]
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	d002      	beq.n	8012c82 <f_mount+0x66>
 8012c7c:	79fb      	ldrb	r3, [r7, #7]
 8012c7e:	2b01      	cmp	r3, #1
 8012c80:	d001      	beq.n	8012c86 <f_mount+0x6a>
 8012c82:	2300      	movs	r3, #0
 8012c84:	e00a      	b.n	8012c9c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8012c86:	f107 010c 	add.w	r1, r7, #12
 8012c8a:	f107 0308 	add.w	r3, r7, #8
 8012c8e:	2200      	movs	r2, #0
 8012c90:	4618      	mov	r0, r3
 8012c92:	f7ff fd07 	bl	80126a4 <find_volume>
 8012c96:	4603      	mov	r3, r0
 8012c98:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8012c9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8012c9c:	4618      	mov	r0, r3
 8012c9e:	3720      	adds	r7, #32
 8012ca0:	46bd      	mov	sp, r7
 8012ca2:	bd80      	pop	{r7, pc}
 8012ca4:	200422e0 	.word	0x200422e0

08012ca8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8012ca8:	b580      	push	{r7, lr}
 8012caa:	b098      	sub	sp, #96	; 0x60
 8012cac:	af00      	add	r7, sp, #0
 8012cae:	60f8      	str	r0, [r7, #12]
 8012cb0:	60b9      	str	r1, [r7, #8]
 8012cb2:	4613      	mov	r3, r2
 8012cb4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8012cb6:	68fb      	ldr	r3, [r7, #12]
 8012cb8:	2b00      	cmp	r3, #0
 8012cba:	d101      	bne.n	8012cc0 <f_open+0x18>
 8012cbc:	2309      	movs	r3, #9
 8012cbe:	e1ba      	b.n	8013036 <f_open+0x38e>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8012cc0:	79fb      	ldrb	r3, [r7, #7]
 8012cc2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012cc6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8012cc8:	79fa      	ldrb	r2, [r7, #7]
 8012cca:	f107 0110 	add.w	r1, r7, #16
 8012cce:	f107 0308 	add.w	r3, r7, #8
 8012cd2:	4618      	mov	r0, r3
 8012cd4:	f7ff fce6 	bl	80126a4 <find_volume>
 8012cd8:	4603      	mov	r3, r0
 8012cda:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8012cde:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012ce2:	2b00      	cmp	r3, #0
 8012ce4:	f040 819e 	bne.w	8013024 <f_open+0x37c>
		dj.obj.fs = fs;
 8012ce8:	693b      	ldr	r3, [r7, #16]
 8012cea:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8012cec:	68ba      	ldr	r2, [r7, #8]
 8012cee:	f107 0314 	add.w	r3, r7, #20
 8012cf2:	4611      	mov	r1, r2
 8012cf4:	4618      	mov	r0, r3
 8012cf6:	f7ff fba5 	bl	8012444 <follow_path>
 8012cfa:	4603      	mov	r3, r0
 8012cfc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8012d00:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012d04:	2b00      	cmp	r3, #0
 8012d06:	d11a      	bne.n	8012d3e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8012d08:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8012d0c:	b25b      	sxtb	r3, r3
 8012d0e:	2b00      	cmp	r3, #0
 8012d10:	da03      	bge.n	8012d1a <f_open+0x72>
				res = FR_INVALID_NAME;
 8012d12:	2306      	movs	r3, #6
 8012d14:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012d18:	e011      	b.n	8012d3e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8012d1a:	79fb      	ldrb	r3, [r7, #7]
 8012d1c:	f023 0301 	bic.w	r3, r3, #1
 8012d20:	2b00      	cmp	r3, #0
 8012d22:	bf14      	ite	ne
 8012d24:	2301      	movne	r3, #1
 8012d26:	2300      	moveq	r3, #0
 8012d28:	b2db      	uxtb	r3, r3
 8012d2a:	461a      	mov	r2, r3
 8012d2c:	f107 0314 	add.w	r3, r7, #20
 8012d30:	4611      	mov	r1, r2
 8012d32:	4618      	mov	r0, r3
 8012d34:	f7fe fa4c 	bl	80111d0 <chk_lock>
 8012d38:	4603      	mov	r3, r0
 8012d3a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8012d3e:	79fb      	ldrb	r3, [r7, #7]
 8012d40:	f003 031c 	and.w	r3, r3, #28
 8012d44:	2b00      	cmp	r3, #0
 8012d46:	d07e      	beq.n	8012e46 <f_open+0x19e>
			if (res != FR_OK) {					/* No file, create new */
 8012d48:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012d4c:	2b00      	cmp	r3, #0
 8012d4e:	d017      	beq.n	8012d80 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8012d50:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012d54:	2b04      	cmp	r3, #4
 8012d56:	d10e      	bne.n	8012d76 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8012d58:	f7fe fa96 	bl	8011288 <enq_lock>
 8012d5c:	4603      	mov	r3, r0
 8012d5e:	2b00      	cmp	r3, #0
 8012d60:	d006      	beq.n	8012d70 <f_open+0xc8>
 8012d62:	f107 0314 	add.w	r3, r7, #20
 8012d66:	4618      	mov	r0, r3
 8012d68:	f7ff fa52 	bl	8012210 <dir_register>
 8012d6c:	4603      	mov	r3, r0
 8012d6e:	e000      	b.n	8012d72 <f_open+0xca>
 8012d70:	2312      	movs	r3, #18
 8012d72:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8012d76:	79fb      	ldrb	r3, [r7, #7]
 8012d78:	f043 0308 	orr.w	r3, r3, #8
 8012d7c:	71fb      	strb	r3, [r7, #7]
 8012d7e:	e010      	b.n	8012da2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8012d80:	7ebb      	ldrb	r3, [r7, #26]
 8012d82:	f003 0311 	and.w	r3, r3, #17
 8012d86:	2b00      	cmp	r3, #0
 8012d88:	d003      	beq.n	8012d92 <f_open+0xea>
					res = FR_DENIED;
 8012d8a:	2307      	movs	r3, #7
 8012d8c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012d90:	e007      	b.n	8012da2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8012d92:	79fb      	ldrb	r3, [r7, #7]
 8012d94:	f003 0304 	and.w	r3, r3, #4
 8012d98:	2b00      	cmp	r3, #0
 8012d9a:	d002      	beq.n	8012da2 <f_open+0xfa>
 8012d9c:	2308      	movs	r3, #8
 8012d9e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8012da2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012da6:	2b00      	cmp	r3, #0
 8012da8:	d167      	bne.n	8012e7a <f_open+0x1d2>
 8012daa:	79fb      	ldrb	r3, [r7, #7]
 8012dac:	f003 0308 	and.w	r3, r3, #8
 8012db0:	2b00      	cmp	r3, #0
 8012db2:	d062      	beq.n	8012e7a <f_open+0x1d2>
				dw = GET_FATTIME();
 8012db4:	4ba2      	ldr	r3, [pc, #648]	; (8013040 <f_open+0x398>)
 8012db6:	653b      	str	r3, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8012db8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012dba:	330e      	adds	r3, #14
 8012dbc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012dbe:	4618      	mov	r0, r3
 8012dc0:	f7fe f95c 	bl	801107c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8012dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012dc6:	3316      	adds	r3, #22
 8012dc8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012dca:	4618      	mov	r0, r3
 8012dcc:	f7fe f956 	bl	801107c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8012dd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012dd2:	330b      	adds	r3, #11
 8012dd4:	2220      	movs	r2, #32
 8012dd6:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8012dd8:	693b      	ldr	r3, [r7, #16]
 8012dda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012ddc:	4611      	mov	r1, r2
 8012dde:	4618      	mov	r0, r3
 8012de0:	f7ff f925 	bl	801202e <ld_clust>
 8012de4:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8012de6:	693b      	ldr	r3, [r7, #16]
 8012de8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8012dea:	2200      	movs	r2, #0
 8012dec:	4618      	mov	r0, r3
 8012dee:	f7ff f93d 	bl	801206c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8012df2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012df4:	331c      	adds	r3, #28
 8012df6:	2100      	movs	r1, #0
 8012df8:	4618      	mov	r0, r3
 8012dfa:	f7fe f93f 	bl	801107c <st_dword>
					fs->wflag = 1;
 8012dfe:	693b      	ldr	r3, [r7, #16]
 8012e00:	2201      	movs	r2, #1
 8012e02:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8012e04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012e06:	2b00      	cmp	r3, #0
 8012e08:	d037      	beq.n	8012e7a <f_open+0x1d2>
						dw = fs->winsect;
 8012e0a:	693b      	ldr	r3, [r7, #16]
 8012e0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012e0e:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8012e10:	f107 0314 	add.w	r3, r7, #20
 8012e14:	2200      	movs	r2, #0
 8012e16:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8012e18:	4618      	mov	r0, r3
 8012e1a:	f7fe fe2d 	bl	8011a78 <remove_chain>
 8012e1e:	4603      	mov	r3, r0
 8012e20:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8012e24:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012e28:	2b00      	cmp	r3, #0
 8012e2a:	d126      	bne.n	8012e7a <f_open+0x1d2>
							res = move_window(fs, dw);
 8012e2c:	693b      	ldr	r3, [r7, #16]
 8012e2e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012e30:	4618      	mov	r0, r3
 8012e32:	f7fe fb7d 	bl	8011530 <move_window>
 8012e36:	4603      	mov	r3, r0
 8012e38:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8012e3c:	693b      	ldr	r3, [r7, #16]
 8012e3e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012e40:	3a01      	subs	r2, #1
 8012e42:	611a      	str	r2, [r3, #16]
 8012e44:	e019      	b.n	8012e7a <f_open+0x1d2>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8012e46:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012e4a:	2b00      	cmp	r3, #0
 8012e4c:	d115      	bne.n	8012e7a <f_open+0x1d2>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8012e4e:	7ebb      	ldrb	r3, [r7, #26]
 8012e50:	f003 0310 	and.w	r3, r3, #16
 8012e54:	2b00      	cmp	r3, #0
 8012e56:	d003      	beq.n	8012e60 <f_open+0x1b8>
					res = FR_NO_FILE;
 8012e58:	2304      	movs	r3, #4
 8012e5a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012e5e:	e00c      	b.n	8012e7a <f_open+0x1d2>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8012e60:	79fb      	ldrb	r3, [r7, #7]
 8012e62:	f003 0302 	and.w	r3, r3, #2
 8012e66:	2b00      	cmp	r3, #0
 8012e68:	d007      	beq.n	8012e7a <f_open+0x1d2>
 8012e6a:	7ebb      	ldrb	r3, [r7, #26]
 8012e6c:	f003 0301 	and.w	r3, r3, #1
 8012e70:	2b00      	cmp	r3, #0
 8012e72:	d002      	beq.n	8012e7a <f_open+0x1d2>
						res = FR_DENIED;
 8012e74:	2307      	movs	r3, #7
 8012e76:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8012e7a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012e7e:	2b00      	cmp	r3, #0
 8012e80:	d128      	bne.n	8012ed4 <f_open+0x22c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8012e82:	79fb      	ldrb	r3, [r7, #7]
 8012e84:	f003 0308 	and.w	r3, r3, #8
 8012e88:	2b00      	cmp	r3, #0
 8012e8a:	d003      	beq.n	8012e94 <f_open+0x1ec>
				mode |= FA_MODIFIED;
 8012e8c:	79fb      	ldrb	r3, [r7, #7]
 8012e8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012e92:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8012e94:	693b      	ldr	r3, [r7, #16]
 8012e96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012e98:	68fb      	ldr	r3, [r7, #12]
 8012e9a:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8012e9c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012e9e:	68fb      	ldr	r3, [r7, #12]
 8012ea0:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8012ea2:	79fb      	ldrb	r3, [r7, #7]
 8012ea4:	f023 0301 	bic.w	r3, r3, #1
 8012ea8:	2b00      	cmp	r3, #0
 8012eaa:	bf14      	ite	ne
 8012eac:	2301      	movne	r3, #1
 8012eae:	2300      	moveq	r3, #0
 8012eb0:	b2db      	uxtb	r3, r3
 8012eb2:	461a      	mov	r2, r3
 8012eb4:	f107 0314 	add.w	r3, r7, #20
 8012eb8:	4611      	mov	r1, r2
 8012eba:	4618      	mov	r0, r3
 8012ebc:	f7fe fa06 	bl	80112cc <inc_lock>
 8012ec0:	4602      	mov	r2, r0
 8012ec2:	68fb      	ldr	r3, [r7, #12]
 8012ec4:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8012ec6:	68fb      	ldr	r3, [r7, #12]
 8012ec8:	691b      	ldr	r3, [r3, #16]
 8012eca:	2b00      	cmp	r3, #0
 8012ecc:	d102      	bne.n	8012ed4 <f_open+0x22c>
 8012ece:	2302      	movs	r3, #2
 8012ed0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8012ed4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012ed8:	2b00      	cmp	r3, #0
 8012eda:	f040 80a3 	bne.w	8013024 <f_open+0x37c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8012ede:	693b      	ldr	r3, [r7, #16]
 8012ee0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012ee2:	4611      	mov	r1, r2
 8012ee4:	4618      	mov	r0, r3
 8012ee6:	f7ff f8a2 	bl	801202e <ld_clust>
 8012eea:	4602      	mov	r2, r0
 8012eec:	68fb      	ldr	r3, [r7, #12]
 8012eee:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8012ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012ef2:	331c      	adds	r3, #28
 8012ef4:	4618      	mov	r0, r3
 8012ef6:	f7fe f883 	bl	8011000 <ld_dword>
 8012efa:	4602      	mov	r2, r0
 8012efc:	68fb      	ldr	r3, [r7, #12]
 8012efe:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8012f00:	68fb      	ldr	r3, [r7, #12]
 8012f02:	2200      	movs	r2, #0
 8012f04:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8012f06:	693a      	ldr	r2, [r7, #16]
 8012f08:	68fb      	ldr	r3, [r7, #12]
 8012f0a:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8012f0c:	693b      	ldr	r3, [r7, #16]
 8012f0e:	88da      	ldrh	r2, [r3, #6]
 8012f10:	68fb      	ldr	r3, [r7, #12]
 8012f12:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8012f14:	68fb      	ldr	r3, [r7, #12]
 8012f16:	79fa      	ldrb	r2, [r7, #7]
 8012f18:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8012f1a:	68fb      	ldr	r3, [r7, #12]
 8012f1c:	2200      	movs	r2, #0
 8012f1e:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8012f20:	68fb      	ldr	r3, [r7, #12]
 8012f22:	2200      	movs	r2, #0
 8012f24:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8012f26:	68fb      	ldr	r3, [r7, #12]
 8012f28:	2200      	movs	r2, #0
 8012f2a:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8012f2c:	68fb      	ldr	r3, [r7, #12]
 8012f2e:	3330      	adds	r3, #48	; 0x30
 8012f30:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8012f34:	2100      	movs	r1, #0
 8012f36:	4618      	mov	r0, r3
 8012f38:	f7fe f8ed 	bl	8011116 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8012f3c:	79fb      	ldrb	r3, [r7, #7]
 8012f3e:	f003 0320 	and.w	r3, r3, #32
 8012f42:	2b00      	cmp	r3, #0
 8012f44:	d06e      	beq.n	8013024 <f_open+0x37c>
 8012f46:	68fb      	ldr	r3, [r7, #12]
 8012f48:	68db      	ldr	r3, [r3, #12]
 8012f4a:	2b00      	cmp	r3, #0
 8012f4c:	d06a      	beq.n	8013024 <f_open+0x37c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8012f4e:	68fb      	ldr	r3, [r7, #12]
 8012f50:	68da      	ldr	r2, [r3, #12]
 8012f52:	68fb      	ldr	r3, [r7, #12]
 8012f54:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8012f56:	693b      	ldr	r3, [r7, #16]
 8012f58:	895b      	ldrh	r3, [r3, #10]
 8012f5a:	461a      	mov	r2, r3
 8012f5c:	693b      	ldr	r3, [r7, #16]
 8012f5e:	899b      	ldrh	r3, [r3, #12]
 8012f60:	fb03 f302 	mul.w	r3, r3, r2
 8012f64:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8012f66:	68fb      	ldr	r3, [r7, #12]
 8012f68:	689b      	ldr	r3, [r3, #8]
 8012f6a:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8012f6c:	68fb      	ldr	r3, [r7, #12]
 8012f6e:	68db      	ldr	r3, [r3, #12]
 8012f70:	657b      	str	r3, [r7, #84]	; 0x54
 8012f72:	e016      	b.n	8012fa2 <f_open+0x2fa>
					clst = get_fat(&fp->obj, clst);
 8012f74:	68fb      	ldr	r3, [r7, #12]
 8012f76:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8012f78:	4618      	mov	r0, r3
 8012f7a:	f7fe fb96 	bl	80116aa <get_fat>
 8012f7e:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8012f80:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012f82:	2b01      	cmp	r3, #1
 8012f84:	d802      	bhi.n	8012f8c <f_open+0x2e4>
 8012f86:	2302      	movs	r3, #2
 8012f88:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8012f8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012f92:	d102      	bne.n	8012f9a <f_open+0x2f2>
 8012f94:	2301      	movs	r3, #1
 8012f96:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8012f9a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012f9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012f9e:	1ad3      	subs	r3, r2, r3
 8012fa0:	657b      	str	r3, [r7, #84]	; 0x54
 8012fa2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012fa6:	2b00      	cmp	r3, #0
 8012fa8:	d103      	bne.n	8012fb2 <f_open+0x30a>
 8012faa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012fac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012fae:	429a      	cmp	r2, r3
 8012fb0:	d8e0      	bhi.n	8012f74 <f_open+0x2cc>
				}
				fp->clust = clst;
 8012fb2:	68fb      	ldr	r3, [r7, #12]
 8012fb4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012fb6:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8012fb8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	d131      	bne.n	8013024 <f_open+0x37c>
 8012fc0:	693b      	ldr	r3, [r7, #16]
 8012fc2:	899b      	ldrh	r3, [r3, #12]
 8012fc4:	461a      	mov	r2, r3
 8012fc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012fc8:	fbb3 f1f2 	udiv	r1, r3, r2
 8012fcc:	fb02 f201 	mul.w	r2, r2, r1
 8012fd0:	1a9b      	subs	r3, r3, r2
 8012fd2:	2b00      	cmp	r3, #0
 8012fd4:	d026      	beq.n	8013024 <f_open+0x37c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8012fd6:	693b      	ldr	r3, [r7, #16]
 8012fd8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8012fda:	4618      	mov	r0, r3
 8012fdc:	f7fe fb46 	bl	801166c <clust2sect>
 8012fe0:	6478      	str	r0, [r7, #68]	; 0x44
 8012fe2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012fe4:	2b00      	cmp	r3, #0
 8012fe6:	d103      	bne.n	8012ff0 <f_open+0x348>
						res = FR_INT_ERR;
 8012fe8:	2302      	movs	r3, #2
 8012fea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012fee:	e019      	b.n	8013024 <f_open+0x37c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8012ff0:	693b      	ldr	r3, [r7, #16]
 8012ff2:	899b      	ldrh	r3, [r3, #12]
 8012ff4:	461a      	mov	r2, r3
 8012ff6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012ff8:	fbb3 f2f2 	udiv	r2, r3, r2
 8012ffc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012ffe:	441a      	add	r2, r3
 8013000:	68fb      	ldr	r3, [r7, #12]
 8013002:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8013004:	693b      	ldr	r3, [r7, #16]
 8013006:	7858      	ldrb	r0, [r3, #1]
 8013008:	68fb      	ldr	r3, [r7, #12]
 801300a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801300e:	68fb      	ldr	r3, [r7, #12]
 8013010:	6a1a      	ldr	r2, [r3, #32]
 8013012:	2301      	movs	r3, #1
 8013014:	f7fd ff7e 	bl	8010f14 <disk_read>
 8013018:	4603      	mov	r3, r0
 801301a:	2b00      	cmp	r3, #0
 801301c:	d002      	beq.n	8013024 <f_open+0x37c>
 801301e:	2301      	movs	r3, #1
 8013020:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8013024:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8013028:	2b00      	cmp	r3, #0
 801302a:	d002      	beq.n	8013032 <f_open+0x38a>
 801302c:	68fb      	ldr	r3, [r7, #12]
 801302e:	2200      	movs	r2, #0
 8013030:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8013032:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8013036:	4618      	mov	r0, r3
 8013038:	3760      	adds	r7, #96	; 0x60
 801303a:	46bd      	mov	sp, r7
 801303c:	bd80      	pop	{r7, pc}
 801303e:	bf00      	nop
 8013040:	274a0000 	.word	0x274a0000

08013044 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8013044:	b580      	push	{r7, lr}
 8013046:	b08e      	sub	sp, #56	; 0x38
 8013048:	af00      	add	r7, sp, #0
 801304a:	60f8      	str	r0, [r7, #12]
 801304c:	60b9      	str	r1, [r7, #8]
 801304e:	607a      	str	r2, [r7, #4]
 8013050:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8013052:	68bb      	ldr	r3, [r7, #8]
 8013054:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8013056:	683b      	ldr	r3, [r7, #0]
 8013058:	2200      	movs	r2, #0
 801305a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 801305c:	68fb      	ldr	r3, [r7, #12]
 801305e:	f107 0214 	add.w	r2, r7, #20
 8013062:	4611      	mov	r1, r2
 8013064:	4618      	mov	r0, r3
 8013066:	f7ff fda3 	bl	8012bb0 <validate>
 801306a:	4603      	mov	r3, r0
 801306c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8013070:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013074:	2b00      	cmp	r3, #0
 8013076:	d107      	bne.n	8013088 <f_read+0x44>
 8013078:	68fb      	ldr	r3, [r7, #12]
 801307a:	7d5b      	ldrb	r3, [r3, #21]
 801307c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8013080:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013084:	2b00      	cmp	r3, #0
 8013086:	d002      	beq.n	801308e <f_read+0x4a>
 8013088:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801308c:	e135      	b.n	80132fa <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 801308e:	68fb      	ldr	r3, [r7, #12]
 8013090:	7d1b      	ldrb	r3, [r3, #20]
 8013092:	f003 0301 	and.w	r3, r3, #1
 8013096:	2b00      	cmp	r3, #0
 8013098:	d101      	bne.n	801309e <f_read+0x5a>
 801309a:	2307      	movs	r3, #7
 801309c:	e12d      	b.n	80132fa <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 801309e:	68fb      	ldr	r3, [r7, #12]
 80130a0:	68da      	ldr	r2, [r3, #12]
 80130a2:	68fb      	ldr	r3, [r7, #12]
 80130a4:	699b      	ldr	r3, [r3, #24]
 80130a6:	1ad3      	subs	r3, r2, r3
 80130a8:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80130aa:	687a      	ldr	r2, [r7, #4]
 80130ac:	6a3b      	ldr	r3, [r7, #32]
 80130ae:	429a      	cmp	r2, r3
 80130b0:	f240 811e 	bls.w	80132f0 <f_read+0x2ac>
 80130b4:	6a3b      	ldr	r3, [r7, #32]
 80130b6:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80130b8:	e11a      	b.n	80132f0 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80130ba:	68fb      	ldr	r3, [r7, #12]
 80130bc:	699b      	ldr	r3, [r3, #24]
 80130be:	697a      	ldr	r2, [r7, #20]
 80130c0:	8992      	ldrh	r2, [r2, #12]
 80130c2:	fbb3 f1f2 	udiv	r1, r3, r2
 80130c6:	fb02 f201 	mul.w	r2, r2, r1
 80130ca:	1a9b      	subs	r3, r3, r2
 80130cc:	2b00      	cmp	r3, #0
 80130ce:	f040 80d5 	bne.w	801327c <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80130d2:	68fb      	ldr	r3, [r7, #12]
 80130d4:	699b      	ldr	r3, [r3, #24]
 80130d6:	697a      	ldr	r2, [r7, #20]
 80130d8:	8992      	ldrh	r2, [r2, #12]
 80130da:	fbb3 f3f2 	udiv	r3, r3, r2
 80130de:	697a      	ldr	r2, [r7, #20]
 80130e0:	8952      	ldrh	r2, [r2, #10]
 80130e2:	3a01      	subs	r2, #1
 80130e4:	4013      	ands	r3, r2
 80130e6:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80130e8:	69fb      	ldr	r3, [r7, #28]
 80130ea:	2b00      	cmp	r3, #0
 80130ec:	d12f      	bne.n	801314e <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80130ee:	68fb      	ldr	r3, [r7, #12]
 80130f0:	699b      	ldr	r3, [r3, #24]
 80130f2:	2b00      	cmp	r3, #0
 80130f4:	d103      	bne.n	80130fe <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80130f6:	68fb      	ldr	r3, [r7, #12]
 80130f8:	689b      	ldr	r3, [r3, #8]
 80130fa:	633b      	str	r3, [r7, #48]	; 0x30
 80130fc:	e013      	b.n	8013126 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80130fe:	68fb      	ldr	r3, [r7, #12]
 8013100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013102:	2b00      	cmp	r3, #0
 8013104:	d007      	beq.n	8013116 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8013106:	68fb      	ldr	r3, [r7, #12]
 8013108:	699b      	ldr	r3, [r3, #24]
 801310a:	4619      	mov	r1, r3
 801310c:	68f8      	ldr	r0, [r7, #12]
 801310e:	f7fe fdb0 	bl	8011c72 <clmt_clust>
 8013112:	6338      	str	r0, [r7, #48]	; 0x30
 8013114:	e007      	b.n	8013126 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8013116:	68fa      	ldr	r2, [r7, #12]
 8013118:	68fb      	ldr	r3, [r7, #12]
 801311a:	69db      	ldr	r3, [r3, #28]
 801311c:	4619      	mov	r1, r3
 801311e:	4610      	mov	r0, r2
 8013120:	f7fe fac3 	bl	80116aa <get_fat>
 8013124:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8013126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013128:	2b01      	cmp	r3, #1
 801312a:	d804      	bhi.n	8013136 <f_read+0xf2>
 801312c:	68fb      	ldr	r3, [r7, #12]
 801312e:	2202      	movs	r2, #2
 8013130:	755a      	strb	r2, [r3, #21]
 8013132:	2302      	movs	r3, #2
 8013134:	e0e1      	b.n	80132fa <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013138:	f1b3 3fff 	cmp.w	r3, #4294967295
 801313c:	d104      	bne.n	8013148 <f_read+0x104>
 801313e:	68fb      	ldr	r3, [r7, #12]
 8013140:	2201      	movs	r2, #1
 8013142:	755a      	strb	r2, [r3, #21]
 8013144:	2301      	movs	r3, #1
 8013146:	e0d8      	b.n	80132fa <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8013148:	68fb      	ldr	r3, [r7, #12]
 801314a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801314c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801314e:	697a      	ldr	r2, [r7, #20]
 8013150:	68fb      	ldr	r3, [r7, #12]
 8013152:	69db      	ldr	r3, [r3, #28]
 8013154:	4619      	mov	r1, r3
 8013156:	4610      	mov	r0, r2
 8013158:	f7fe fa88 	bl	801166c <clust2sect>
 801315c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801315e:	69bb      	ldr	r3, [r7, #24]
 8013160:	2b00      	cmp	r3, #0
 8013162:	d104      	bne.n	801316e <f_read+0x12a>
 8013164:	68fb      	ldr	r3, [r7, #12]
 8013166:	2202      	movs	r2, #2
 8013168:	755a      	strb	r2, [r3, #21]
 801316a:	2302      	movs	r3, #2
 801316c:	e0c5      	b.n	80132fa <f_read+0x2b6>
			sect += csect;
 801316e:	69ba      	ldr	r2, [r7, #24]
 8013170:	69fb      	ldr	r3, [r7, #28]
 8013172:	4413      	add	r3, r2
 8013174:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8013176:	697b      	ldr	r3, [r7, #20]
 8013178:	899b      	ldrh	r3, [r3, #12]
 801317a:	461a      	mov	r2, r3
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	fbb3 f3f2 	udiv	r3, r3, r2
 8013182:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8013184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013186:	2b00      	cmp	r3, #0
 8013188:	d041      	beq.n	801320e <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801318a:	69fa      	ldr	r2, [r7, #28]
 801318c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801318e:	4413      	add	r3, r2
 8013190:	697a      	ldr	r2, [r7, #20]
 8013192:	8952      	ldrh	r2, [r2, #10]
 8013194:	4293      	cmp	r3, r2
 8013196:	d905      	bls.n	80131a4 <f_read+0x160>
					cc = fs->csize - csect;
 8013198:	697b      	ldr	r3, [r7, #20]
 801319a:	895b      	ldrh	r3, [r3, #10]
 801319c:	461a      	mov	r2, r3
 801319e:	69fb      	ldr	r3, [r7, #28]
 80131a0:	1ad3      	subs	r3, r2, r3
 80131a2:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80131a4:	697b      	ldr	r3, [r7, #20]
 80131a6:	7858      	ldrb	r0, [r3, #1]
 80131a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131aa:	69ba      	ldr	r2, [r7, #24]
 80131ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80131ae:	f7fd feb1 	bl	8010f14 <disk_read>
 80131b2:	4603      	mov	r3, r0
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	d004      	beq.n	80131c2 <f_read+0x17e>
 80131b8:	68fb      	ldr	r3, [r7, #12]
 80131ba:	2201      	movs	r2, #1
 80131bc:	755a      	strb	r2, [r3, #21]
 80131be:	2301      	movs	r3, #1
 80131c0:	e09b      	b.n	80132fa <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80131c2:	68fb      	ldr	r3, [r7, #12]
 80131c4:	7d1b      	ldrb	r3, [r3, #20]
 80131c6:	b25b      	sxtb	r3, r3
 80131c8:	2b00      	cmp	r3, #0
 80131ca:	da18      	bge.n	80131fe <f_read+0x1ba>
 80131cc:	68fb      	ldr	r3, [r7, #12]
 80131ce:	6a1a      	ldr	r2, [r3, #32]
 80131d0:	69bb      	ldr	r3, [r7, #24]
 80131d2:	1ad3      	subs	r3, r2, r3
 80131d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80131d6:	429a      	cmp	r2, r3
 80131d8:	d911      	bls.n	80131fe <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80131da:	68fb      	ldr	r3, [r7, #12]
 80131dc:	6a1a      	ldr	r2, [r3, #32]
 80131de:	69bb      	ldr	r3, [r7, #24]
 80131e0:	1ad3      	subs	r3, r2, r3
 80131e2:	697a      	ldr	r2, [r7, #20]
 80131e4:	8992      	ldrh	r2, [r2, #12]
 80131e6:	fb02 f303 	mul.w	r3, r2, r3
 80131ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80131ec:	18d0      	adds	r0, r2, r3
 80131ee:	68fb      	ldr	r3, [r7, #12]
 80131f0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80131f4:	697b      	ldr	r3, [r7, #20]
 80131f6:	899b      	ldrh	r3, [r3, #12]
 80131f8:	461a      	mov	r2, r3
 80131fa:	f7fd ff6b 	bl	80110d4 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80131fe:	697b      	ldr	r3, [r7, #20]
 8013200:	899b      	ldrh	r3, [r3, #12]
 8013202:	461a      	mov	r2, r3
 8013204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013206:	fb02 f303 	mul.w	r3, r2, r3
 801320a:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 801320c:	e05c      	b.n	80132c8 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 801320e:	68fb      	ldr	r3, [r7, #12]
 8013210:	6a1b      	ldr	r3, [r3, #32]
 8013212:	69ba      	ldr	r2, [r7, #24]
 8013214:	429a      	cmp	r2, r3
 8013216:	d02e      	beq.n	8013276 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8013218:	68fb      	ldr	r3, [r7, #12]
 801321a:	7d1b      	ldrb	r3, [r3, #20]
 801321c:	b25b      	sxtb	r3, r3
 801321e:	2b00      	cmp	r3, #0
 8013220:	da18      	bge.n	8013254 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013222:	697b      	ldr	r3, [r7, #20]
 8013224:	7858      	ldrb	r0, [r3, #1]
 8013226:	68fb      	ldr	r3, [r7, #12]
 8013228:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801322c:	68fb      	ldr	r3, [r7, #12]
 801322e:	6a1a      	ldr	r2, [r3, #32]
 8013230:	2301      	movs	r3, #1
 8013232:	f7fd fe8f 	bl	8010f54 <disk_write>
 8013236:	4603      	mov	r3, r0
 8013238:	2b00      	cmp	r3, #0
 801323a:	d004      	beq.n	8013246 <f_read+0x202>
 801323c:	68fb      	ldr	r3, [r7, #12]
 801323e:	2201      	movs	r2, #1
 8013240:	755a      	strb	r2, [r3, #21]
 8013242:	2301      	movs	r3, #1
 8013244:	e059      	b.n	80132fa <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8013246:	68fb      	ldr	r3, [r7, #12]
 8013248:	7d1b      	ldrb	r3, [r3, #20]
 801324a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801324e:	b2da      	uxtb	r2, r3
 8013250:	68fb      	ldr	r3, [r7, #12]
 8013252:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8013254:	697b      	ldr	r3, [r7, #20]
 8013256:	7858      	ldrb	r0, [r3, #1]
 8013258:	68fb      	ldr	r3, [r7, #12]
 801325a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801325e:	2301      	movs	r3, #1
 8013260:	69ba      	ldr	r2, [r7, #24]
 8013262:	f7fd fe57 	bl	8010f14 <disk_read>
 8013266:	4603      	mov	r3, r0
 8013268:	2b00      	cmp	r3, #0
 801326a:	d004      	beq.n	8013276 <f_read+0x232>
 801326c:	68fb      	ldr	r3, [r7, #12]
 801326e:	2201      	movs	r2, #1
 8013270:	755a      	strb	r2, [r3, #21]
 8013272:	2301      	movs	r3, #1
 8013274:	e041      	b.n	80132fa <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8013276:	68fb      	ldr	r3, [r7, #12]
 8013278:	69ba      	ldr	r2, [r7, #24]
 801327a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801327c:	697b      	ldr	r3, [r7, #20]
 801327e:	899b      	ldrh	r3, [r3, #12]
 8013280:	4618      	mov	r0, r3
 8013282:	68fb      	ldr	r3, [r7, #12]
 8013284:	699b      	ldr	r3, [r3, #24]
 8013286:	697a      	ldr	r2, [r7, #20]
 8013288:	8992      	ldrh	r2, [r2, #12]
 801328a:	fbb3 f1f2 	udiv	r1, r3, r2
 801328e:	fb02 f201 	mul.w	r2, r2, r1
 8013292:	1a9b      	subs	r3, r3, r2
 8013294:	1ac3      	subs	r3, r0, r3
 8013296:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8013298:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801329a:	687b      	ldr	r3, [r7, #4]
 801329c:	429a      	cmp	r2, r3
 801329e:	d901      	bls.n	80132a4 <f_read+0x260>
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80132a4:	68fb      	ldr	r3, [r7, #12]
 80132a6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80132aa:	68fb      	ldr	r3, [r7, #12]
 80132ac:	699b      	ldr	r3, [r3, #24]
 80132ae:	697a      	ldr	r2, [r7, #20]
 80132b0:	8992      	ldrh	r2, [r2, #12]
 80132b2:	fbb3 f0f2 	udiv	r0, r3, r2
 80132b6:	fb02 f200 	mul.w	r2, r2, r0
 80132ba:	1a9b      	subs	r3, r3, r2
 80132bc:	440b      	add	r3, r1
 80132be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80132c0:	4619      	mov	r1, r3
 80132c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80132c4:	f7fd ff06 	bl	80110d4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80132c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80132ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132cc:	4413      	add	r3, r2
 80132ce:	627b      	str	r3, [r7, #36]	; 0x24
 80132d0:	68fb      	ldr	r3, [r7, #12]
 80132d2:	699a      	ldr	r2, [r3, #24]
 80132d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132d6:	441a      	add	r2, r3
 80132d8:	68fb      	ldr	r3, [r7, #12]
 80132da:	619a      	str	r2, [r3, #24]
 80132dc:	683b      	ldr	r3, [r7, #0]
 80132de:	681a      	ldr	r2, [r3, #0]
 80132e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132e2:	441a      	add	r2, r3
 80132e4:	683b      	ldr	r3, [r7, #0]
 80132e6:	601a      	str	r2, [r3, #0]
 80132e8:	687a      	ldr	r2, [r7, #4]
 80132ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132ec:	1ad3      	subs	r3, r2, r3
 80132ee:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80132f0:	687b      	ldr	r3, [r7, #4]
 80132f2:	2b00      	cmp	r3, #0
 80132f4:	f47f aee1 	bne.w	80130ba <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80132f8:	2300      	movs	r3, #0
}
 80132fa:	4618      	mov	r0, r3
 80132fc:	3738      	adds	r7, #56	; 0x38
 80132fe:	46bd      	mov	sp, r7
 8013300:	bd80      	pop	{r7, pc}

08013302 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8013302:	b580      	push	{r7, lr}
 8013304:	b08c      	sub	sp, #48	; 0x30
 8013306:	af00      	add	r7, sp, #0
 8013308:	60f8      	str	r0, [r7, #12]
 801330a:	60b9      	str	r1, [r7, #8]
 801330c:	607a      	str	r2, [r7, #4]
 801330e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8013310:	68bb      	ldr	r3, [r7, #8]
 8013312:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8013314:	683b      	ldr	r3, [r7, #0]
 8013316:	2200      	movs	r2, #0
 8013318:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801331a:	68fb      	ldr	r3, [r7, #12]
 801331c:	f107 0210 	add.w	r2, r7, #16
 8013320:	4611      	mov	r1, r2
 8013322:	4618      	mov	r0, r3
 8013324:	f7ff fc44 	bl	8012bb0 <validate>
 8013328:	4603      	mov	r3, r0
 801332a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801332e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013332:	2b00      	cmp	r3, #0
 8013334:	d107      	bne.n	8013346 <f_write+0x44>
 8013336:	68fb      	ldr	r3, [r7, #12]
 8013338:	7d5b      	ldrb	r3, [r3, #21]
 801333a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801333e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013342:	2b00      	cmp	r3, #0
 8013344:	d002      	beq.n	801334c <f_write+0x4a>
 8013346:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801334a:	e16a      	b.n	8013622 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801334c:	68fb      	ldr	r3, [r7, #12]
 801334e:	7d1b      	ldrb	r3, [r3, #20]
 8013350:	f003 0302 	and.w	r3, r3, #2
 8013354:	2b00      	cmp	r3, #0
 8013356:	d101      	bne.n	801335c <f_write+0x5a>
 8013358:	2307      	movs	r3, #7
 801335a:	e162      	b.n	8013622 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801335c:	68fb      	ldr	r3, [r7, #12]
 801335e:	699a      	ldr	r2, [r3, #24]
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	441a      	add	r2, r3
 8013364:	68fb      	ldr	r3, [r7, #12]
 8013366:	699b      	ldr	r3, [r3, #24]
 8013368:	429a      	cmp	r2, r3
 801336a:	f080 814c 	bcs.w	8013606 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801336e:	68fb      	ldr	r3, [r7, #12]
 8013370:	699b      	ldr	r3, [r3, #24]
 8013372:	43db      	mvns	r3, r3
 8013374:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8013376:	e146      	b.n	8013606 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8013378:	68fb      	ldr	r3, [r7, #12]
 801337a:	699b      	ldr	r3, [r3, #24]
 801337c:	693a      	ldr	r2, [r7, #16]
 801337e:	8992      	ldrh	r2, [r2, #12]
 8013380:	fbb3 f1f2 	udiv	r1, r3, r2
 8013384:	fb02 f201 	mul.w	r2, r2, r1
 8013388:	1a9b      	subs	r3, r3, r2
 801338a:	2b00      	cmp	r3, #0
 801338c:	f040 80f1 	bne.w	8013572 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8013390:	68fb      	ldr	r3, [r7, #12]
 8013392:	699b      	ldr	r3, [r3, #24]
 8013394:	693a      	ldr	r2, [r7, #16]
 8013396:	8992      	ldrh	r2, [r2, #12]
 8013398:	fbb3 f3f2 	udiv	r3, r3, r2
 801339c:	693a      	ldr	r2, [r7, #16]
 801339e:	8952      	ldrh	r2, [r2, #10]
 80133a0:	3a01      	subs	r2, #1
 80133a2:	4013      	ands	r3, r2
 80133a4:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80133a6:	69bb      	ldr	r3, [r7, #24]
 80133a8:	2b00      	cmp	r3, #0
 80133aa:	d143      	bne.n	8013434 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80133ac:	68fb      	ldr	r3, [r7, #12]
 80133ae:	699b      	ldr	r3, [r3, #24]
 80133b0:	2b00      	cmp	r3, #0
 80133b2:	d10c      	bne.n	80133ce <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80133b4:	68fb      	ldr	r3, [r7, #12]
 80133b6:	689b      	ldr	r3, [r3, #8]
 80133b8:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80133ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133bc:	2b00      	cmp	r3, #0
 80133be:	d11a      	bne.n	80133f6 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80133c0:	68fb      	ldr	r3, [r7, #12]
 80133c2:	2100      	movs	r1, #0
 80133c4:	4618      	mov	r0, r3
 80133c6:	f7fe fbbc 	bl	8011b42 <create_chain>
 80133ca:	62b8      	str	r0, [r7, #40]	; 0x28
 80133cc:	e013      	b.n	80133f6 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80133ce:	68fb      	ldr	r3, [r7, #12]
 80133d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80133d2:	2b00      	cmp	r3, #0
 80133d4:	d007      	beq.n	80133e6 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80133d6:	68fb      	ldr	r3, [r7, #12]
 80133d8:	699b      	ldr	r3, [r3, #24]
 80133da:	4619      	mov	r1, r3
 80133dc:	68f8      	ldr	r0, [r7, #12]
 80133de:	f7fe fc48 	bl	8011c72 <clmt_clust>
 80133e2:	62b8      	str	r0, [r7, #40]	; 0x28
 80133e4:	e007      	b.n	80133f6 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80133e6:	68fa      	ldr	r2, [r7, #12]
 80133e8:	68fb      	ldr	r3, [r7, #12]
 80133ea:	69db      	ldr	r3, [r3, #28]
 80133ec:	4619      	mov	r1, r3
 80133ee:	4610      	mov	r0, r2
 80133f0:	f7fe fba7 	bl	8011b42 <create_chain>
 80133f4:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80133f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133f8:	2b00      	cmp	r3, #0
 80133fa:	f000 8109 	beq.w	8013610 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80133fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013400:	2b01      	cmp	r3, #1
 8013402:	d104      	bne.n	801340e <f_write+0x10c>
 8013404:	68fb      	ldr	r3, [r7, #12]
 8013406:	2202      	movs	r2, #2
 8013408:	755a      	strb	r2, [r3, #21]
 801340a:	2302      	movs	r3, #2
 801340c:	e109      	b.n	8013622 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801340e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013414:	d104      	bne.n	8013420 <f_write+0x11e>
 8013416:	68fb      	ldr	r3, [r7, #12]
 8013418:	2201      	movs	r2, #1
 801341a:	755a      	strb	r2, [r3, #21]
 801341c:	2301      	movs	r3, #1
 801341e:	e100      	b.n	8013622 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8013420:	68fb      	ldr	r3, [r7, #12]
 8013422:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013424:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8013426:	68fb      	ldr	r3, [r7, #12]
 8013428:	689b      	ldr	r3, [r3, #8]
 801342a:	2b00      	cmp	r3, #0
 801342c:	d102      	bne.n	8013434 <f_write+0x132>
 801342e:	68fb      	ldr	r3, [r7, #12]
 8013430:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013432:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8013434:	68fb      	ldr	r3, [r7, #12]
 8013436:	7d1b      	ldrb	r3, [r3, #20]
 8013438:	b25b      	sxtb	r3, r3
 801343a:	2b00      	cmp	r3, #0
 801343c:	da18      	bge.n	8013470 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801343e:	693b      	ldr	r3, [r7, #16]
 8013440:	7858      	ldrb	r0, [r3, #1]
 8013442:	68fb      	ldr	r3, [r7, #12]
 8013444:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013448:	68fb      	ldr	r3, [r7, #12]
 801344a:	6a1a      	ldr	r2, [r3, #32]
 801344c:	2301      	movs	r3, #1
 801344e:	f7fd fd81 	bl	8010f54 <disk_write>
 8013452:	4603      	mov	r3, r0
 8013454:	2b00      	cmp	r3, #0
 8013456:	d004      	beq.n	8013462 <f_write+0x160>
 8013458:	68fb      	ldr	r3, [r7, #12]
 801345a:	2201      	movs	r2, #1
 801345c:	755a      	strb	r2, [r3, #21]
 801345e:	2301      	movs	r3, #1
 8013460:	e0df      	b.n	8013622 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013462:	68fb      	ldr	r3, [r7, #12]
 8013464:	7d1b      	ldrb	r3, [r3, #20]
 8013466:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801346a:	b2da      	uxtb	r2, r3
 801346c:	68fb      	ldr	r3, [r7, #12]
 801346e:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8013470:	693a      	ldr	r2, [r7, #16]
 8013472:	68fb      	ldr	r3, [r7, #12]
 8013474:	69db      	ldr	r3, [r3, #28]
 8013476:	4619      	mov	r1, r3
 8013478:	4610      	mov	r0, r2
 801347a:	f7fe f8f7 	bl	801166c <clust2sect>
 801347e:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8013480:	697b      	ldr	r3, [r7, #20]
 8013482:	2b00      	cmp	r3, #0
 8013484:	d104      	bne.n	8013490 <f_write+0x18e>
 8013486:	68fb      	ldr	r3, [r7, #12]
 8013488:	2202      	movs	r2, #2
 801348a:	755a      	strb	r2, [r3, #21]
 801348c:	2302      	movs	r3, #2
 801348e:	e0c8      	b.n	8013622 <f_write+0x320>
			sect += csect;
 8013490:	697a      	ldr	r2, [r7, #20]
 8013492:	69bb      	ldr	r3, [r7, #24]
 8013494:	4413      	add	r3, r2
 8013496:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8013498:	693b      	ldr	r3, [r7, #16]
 801349a:	899b      	ldrh	r3, [r3, #12]
 801349c:	461a      	mov	r2, r3
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80134a4:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80134a6:	6a3b      	ldr	r3, [r7, #32]
 80134a8:	2b00      	cmp	r3, #0
 80134aa:	d043      	beq.n	8013534 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80134ac:	69ba      	ldr	r2, [r7, #24]
 80134ae:	6a3b      	ldr	r3, [r7, #32]
 80134b0:	4413      	add	r3, r2
 80134b2:	693a      	ldr	r2, [r7, #16]
 80134b4:	8952      	ldrh	r2, [r2, #10]
 80134b6:	4293      	cmp	r3, r2
 80134b8:	d905      	bls.n	80134c6 <f_write+0x1c4>
					cc = fs->csize - csect;
 80134ba:	693b      	ldr	r3, [r7, #16]
 80134bc:	895b      	ldrh	r3, [r3, #10]
 80134be:	461a      	mov	r2, r3
 80134c0:	69bb      	ldr	r3, [r7, #24]
 80134c2:	1ad3      	subs	r3, r2, r3
 80134c4:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80134c6:	693b      	ldr	r3, [r7, #16]
 80134c8:	7858      	ldrb	r0, [r3, #1]
 80134ca:	6a3b      	ldr	r3, [r7, #32]
 80134cc:	697a      	ldr	r2, [r7, #20]
 80134ce:	69f9      	ldr	r1, [r7, #28]
 80134d0:	f7fd fd40 	bl	8010f54 <disk_write>
 80134d4:	4603      	mov	r3, r0
 80134d6:	2b00      	cmp	r3, #0
 80134d8:	d004      	beq.n	80134e4 <f_write+0x1e2>
 80134da:	68fb      	ldr	r3, [r7, #12]
 80134dc:	2201      	movs	r2, #1
 80134de:	755a      	strb	r2, [r3, #21]
 80134e0:	2301      	movs	r3, #1
 80134e2:	e09e      	b.n	8013622 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80134e4:	68fb      	ldr	r3, [r7, #12]
 80134e6:	6a1a      	ldr	r2, [r3, #32]
 80134e8:	697b      	ldr	r3, [r7, #20]
 80134ea:	1ad3      	subs	r3, r2, r3
 80134ec:	6a3a      	ldr	r2, [r7, #32]
 80134ee:	429a      	cmp	r2, r3
 80134f0:	d918      	bls.n	8013524 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80134f2:	68fb      	ldr	r3, [r7, #12]
 80134f4:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80134f8:	68fb      	ldr	r3, [r7, #12]
 80134fa:	6a1a      	ldr	r2, [r3, #32]
 80134fc:	697b      	ldr	r3, [r7, #20]
 80134fe:	1ad3      	subs	r3, r2, r3
 8013500:	693a      	ldr	r2, [r7, #16]
 8013502:	8992      	ldrh	r2, [r2, #12]
 8013504:	fb02 f303 	mul.w	r3, r2, r3
 8013508:	69fa      	ldr	r2, [r7, #28]
 801350a:	18d1      	adds	r1, r2, r3
 801350c:	693b      	ldr	r3, [r7, #16]
 801350e:	899b      	ldrh	r3, [r3, #12]
 8013510:	461a      	mov	r2, r3
 8013512:	f7fd fddf 	bl	80110d4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8013516:	68fb      	ldr	r3, [r7, #12]
 8013518:	7d1b      	ldrb	r3, [r3, #20]
 801351a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801351e:	b2da      	uxtb	r2, r3
 8013520:	68fb      	ldr	r3, [r7, #12]
 8013522:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8013524:	693b      	ldr	r3, [r7, #16]
 8013526:	899b      	ldrh	r3, [r3, #12]
 8013528:	461a      	mov	r2, r3
 801352a:	6a3b      	ldr	r3, [r7, #32]
 801352c:	fb02 f303 	mul.w	r3, r2, r3
 8013530:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8013532:	e04b      	b.n	80135cc <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013534:	68fb      	ldr	r3, [r7, #12]
 8013536:	6a1b      	ldr	r3, [r3, #32]
 8013538:	697a      	ldr	r2, [r7, #20]
 801353a:	429a      	cmp	r2, r3
 801353c:	d016      	beq.n	801356c <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 801353e:	68fb      	ldr	r3, [r7, #12]
 8013540:	699a      	ldr	r2, [r3, #24]
 8013542:	68fb      	ldr	r3, [r7, #12]
 8013544:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8013546:	429a      	cmp	r2, r3
 8013548:	d210      	bcs.n	801356c <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801354a:	693b      	ldr	r3, [r7, #16]
 801354c:	7858      	ldrb	r0, [r3, #1]
 801354e:	68fb      	ldr	r3, [r7, #12]
 8013550:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013554:	2301      	movs	r3, #1
 8013556:	697a      	ldr	r2, [r7, #20]
 8013558:	f7fd fcdc 	bl	8010f14 <disk_read>
 801355c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801355e:	2b00      	cmp	r3, #0
 8013560:	d004      	beq.n	801356c <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8013562:	68fb      	ldr	r3, [r7, #12]
 8013564:	2201      	movs	r2, #1
 8013566:	755a      	strb	r2, [r3, #21]
 8013568:	2301      	movs	r3, #1
 801356a:	e05a      	b.n	8013622 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 801356c:	68fb      	ldr	r3, [r7, #12]
 801356e:	697a      	ldr	r2, [r7, #20]
 8013570:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8013572:	693b      	ldr	r3, [r7, #16]
 8013574:	899b      	ldrh	r3, [r3, #12]
 8013576:	4618      	mov	r0, r3
 8013578:	68fb      	ldr	r3, [r7, #12]
 801357a:	699b      	ldr	r3, [r3, #24]
 801357c:	693a      	ldr	r2, [r7, #16]
 801357e:	8992      	ldrh	r2, [r2, #12]
 8013580:	fbb3 f1f2 	udiv	r1, r3, r2
 8013584:	fb02 f201 	mul.w	r2, r2, r1
 8013588:	1a9b      	subs	r3, r3, r2
 801358a:	1ac3      	subs	r3, r0, r3
 801358c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801358e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	429a      	cmp	r2, r3
 8013594:	d901      	bls.n	801359a <f_write+0x298>
 8013596:	687b      	ldr	r3, [r7, #4]
 8013598:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801359a:	68fb      	ldr	r3, [r7, #12]
 801359c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80135a0:	68fb      	ldr	r3, [r7, #12]
 80135a2:	699b      	ldr	r3, [r3, #24]
 80135a4:	693a      	ldr	r2, [r7, #16]
 80135a6:	8992      	ldrh	r2, [r2, #12]
 80135a8:	fbb3 f0f2 	udiv	r0, r3, r2
 80135ac:	fb02 f200 	mul.w	r2, r2, r0
 80135b0:	1a9b      	subs	r3, r3, r2
 80135b2:	440b      	add	r3, r1
 80135b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80135b6:	69f9      	ldr	r1, [r7, #28]
 80135b8:	4618      	mov	r0, r3
 80135ba:	f7fd fd8b 	bl	80110d4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80135be:	68fb      	ldr	r3, [r7, #12]
 80135c0:	7d1b      	ldrb	r3, [r3, #20]
 80135c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80135c6:	b2da      	uxtb	r2, r3
 80135c8:	68fb      	ldr	r3, [r7, #12]
 80135ca:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80135cc:	69fa      	ldr	r2, [r7, #28]
 80135ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135d0:	4413      	add	r3, r2
 80135d2:	61fb      	str	r3, [r7, #28]
 80135d4:	68fb      	ldr	r3, [r7, #12]
 80135d6:	699a      	ldr	r2, [r3, #24]
 80135d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135da:	441a      	add	r2, r3
 80135dc:	68fb      	ldr	r3, [r7, #12]
 80135de:	619a      	str	r2, [r3, #24]
 80135e0:	68fb      	ldr	r3, [r7, #12]
 80135e2:	68da      	ldr	r2, [r3, #12]
 80135e4:	68fb      	ldr	r3, [r7, #12]
 80135e6:	699b      	ldr	r3, [r3, #24]
 80135e8:	429a      	cmp	r2, r3
 80135ea:	bf38      	it	cc
 80135ec:	461a      	movcc	r2, r3
 80135ee:	68fb      	ldr	r3, [r7, #12]
 80135f0:	60da      	str	r2, [r3, #12]
 80135f2:	683b      	ldr	r3, [r7, #0]
 80135f4:	681a      	ldr	r2, [r3, #0]
 80135f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135f8:	441a      	add	r2, r3
 80135fa:	683b      	ldr	r3, [r7, #0]
 80135fc:	601a      	str	r2, [r3, #0]
 80135fe:	687a      	ldr	r2, [r7, #4]
 8013600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013602:	1ad3      	subs	r3, r2, r3
 8013604:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8013606:	687b      	ldr	r3, [r7, #4]
 8013608:	2b00      	cmp	r3, #0
 801360a:	f47f aeb5 	bne.w	8013378 <f_write+0x76>
 801360e:	e000      	b.n	8013612 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8013610:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8013612:	68fb      	ldr	r3, [r7, #12]
 8013614:	7d1b      	ldrb	r3, [r3, #20]
 8013616:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801361a:	b2da      	uxtb	r2, r3
 801361c:	68fb      	ldr	r3, [r7, #12]
 801361e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8013620:	2300      	movs	r3, #0
}
 8013622:	4618      	mov	r0, r3
 8013624:	3730      	adds	r7, #48	; 0x30
 8013626:	46bd      	mov	sp, r7
 8013628:	bd80      	pop	{r7, pc}
	...

0801362c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801362c:	b580      	push	{r7, lr}
 801362e:	b086      	sub	sp, #24
 8013630:	af00      	add	r7, sp, #0
 8013632:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	f107 0208 	add.w	r2, r7, #8
 801363a:	4611      	mov	r1, r2
 801363c:	4618      	mov	r0, r3
 801363e:	f7ff fab7 	bl	8012bb0 <validate>
 8013642:	4603      	mov	r3, r0
 8013644:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8013646:	7dfb      	ldrb	r3, [r7, #23]
 8013648:	2b00      	cmp	r3, #0
 801364a:	d167      	bne.n	801371c <f_sync+0xf0>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801364c:	687b      	ldr	r3, [r7, #4]
 801364e:	7d1b      	ldrb	r3, [r3, #20]
 8013650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013654:	2b00      	cmp	r3, #0
 8013656:	d061      	beq.n	801371c <f_sync+0xf0>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8013658:	687b      	ldr	r3, [r7, #4]
 801365a:	7d1b      	ldrb	r3, [r3, #20]
 801365c:	b25b      	sxtb	r3, r3
 801365e:	2b00      	cmp	r3, #0
 8013660:	da15      	bge.n	801368e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8013662:	68bb      	ldr	r3, [r7, #8]
 8013664:	7858      	ldrb	r0, [r3, #1]
 8013666:	687b      	ldr	r3, [r7, #4]
 8013668:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	6a1a      	ldr	r2, [r3, #32]
 8013670:	2301      	movs	r3, #1
 8013672:	f7fd fc6f 	bl	8010f54 <disk_write>
 8013676:	4603      	mov	r3, r0
 8013678:	2b00      	cmp	r3, #0
 801367a:	d001      	beq.n	8013680 <f_sync+0x54>
 801367c:	2301      	movs	r3, #1
 801367e:	e04e      	b.n	801371e <f_sync+0xf2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	7d1b      	ldrb	r3, [r3, #20]
 8013684:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013688:	b2da      	uxtb	r2, r3
 801368a:	687b      	ldr	r3, [r7, #4]
 801368c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801368e:	4b26      	ldr	r3, [pc, #152]	; (8013728 <f_sync+0xfc>)
 8013690:	613b      	str	r3, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8013692:	68ba      	ldr	r2, [r7, #8]
 8013694:	687b      	ldr	r3, [r7, #4]
 8013696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013698:	4619      	mov	r1, r3
 801369a:	4610      	mov	r0, r2
 801369c:	f7fd ff48 	bl	8011530 <move_window>
 80136a0:	4603      	mov	r3, r0
 80136a2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80136a4:	7dfb      	ldrb	r3, [r7, #23]
 80136a6:	2b00      	cmp	r3, #0
 80136a8:	d138      	bne.n	801371c <f_sync+0xf0>
					dir = fp->dir_ptr;
 80136aa:	687b      	ldr	r3, [r7, #4]
 80136ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80136ae:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80136b0:	68fb      	ldr	r3, [r7, #12]
 80136b2:	330b      	adds	r3, #11
 80136b4:	781a      	ldrb	r2, [r3, #0]
 80136b6:	68fb      	ldr	r3, [r7, #12]
 80136b8:	330b      	adds	r3, #11
 80136ba:	f042 0220 	orr.w	r2, r2, #32
 80136be:	b2d2      	uxtb	r2, r2
 80136c0:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80136c2:	687b      	ldr	r3, [r7, #4]
 80136c4:	6818      	ldr	r0, [r3, #0]
 80136c6:	687b      	ldr	r3, [r7, #4]
 80136c8:	689b      	ldr	r3, [r3, #8]
 80136ca:	461a      	mov	r2, r3
 80136cc:	68f9      	ldr	r1, [r7, #12]
 80136ce:	f7fe fccd 	bl	801206c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80136d2:	68fb      	ldr	r3, [r7, #12]
 80136d4:	f103 021c 	add.w	r2, r3, #28
 80136d8:	687b      	ldr	r3, [r7, #4]
 80136da:	68db      	ldr	r3, [r3, #12]
 80136dc:	4619      	mov	r1, r3
 80136de:	4610      	mov	r0, r2
 80136e0:	f7fd fccc 	bl	801107c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80136e4:	68fb      	ldr	r3, [r7, #12]
 80136e6:	3316      	adds	r3, #22
 80136e8:	6939      	ldr	r1, [r7, #16]
 80136ea:	4618      	mov	r0, r3
 80136ec:	f7fd fcc6 	bl	801107c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80136f0:	68fb      	ldr	r3, [r7, #12]
 80136f2:	3312      	adds	r3, #18
 80136f4:	2100      	movs	r1, #0
 80136f6:	4618      	mov	r0, r3
 80136f8:	f7fd fca5 	bl	8011046 <st_word>
					fs->wflag = 1;
 80136fc:	68bb      	ldr	r3, [r7, #8]
 80136fe:	2201      	movs	r2, #1
 8013700:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8013702:	68bb      	ldr	r3, [r7, #8]
 8013704:	4618      	mov	r0, r3
 8013706:	f7fd ff41 	bl	801158c <sync_fs>
 801370a:	4603      	mov	r3, r0
 801370c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801370e:	687b      	ldr	r3, [r7, #4]
 8013710:	7d1b      	ldrb	r3, [r3, #20]
 8013712:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013716:	b2da      	uxtb	r2, r3
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801371c:	7dfb      	ldrb	r3, [r7, #23]
}
 801371e:	4618      	mov	r0, r3
 8013720:	3718      	adds	r7, #24
 8013722:	46bd      	mov	sp, r7
 8013724:	bd80      	pop	{r7, pc}
 8013726:	bf00      	nop
 8013728:	274a0000 	.word	0x274a0000

0801372c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801372c:	b580      	push	{r7, lr}
 801372e:	b084      	sub	sp, #16
 8013730:	af00      	add	r7, sp, #0
 8013732:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8013734:	6878      	ldr	r0, [r7, #4]
 8013736:	f7ff ff79 	bl	801362c <f_sync>
 801373a:	4603      	mov	r3, r0
 801373c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 801373e:	7bfb      	ldrb	r3, [r7, #15]
 8013740:	2b00      	cmp	r3, #0
 8013742:	d118      	bne.n	8013776 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	f107 0208 	add.w	r2, r7, #8
 801374a:	4611      	mov	r1, r2
 801374c:	4618      	mov	r0, r3
 801374e:	f7ff fa2f 	bl	8012bb0 <validate>
 8013752:	4603      	mov	r3, r0
 8013754:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8013756:	7bfb      	ldrb	r3, [r7, #15]
 8013758:	2b00      	cmp	r3, #0
 801375a:	d10c      	bne.n	8013776 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801375c:	687b      	ldr	r3, [r7, #4]
 801375e:	691b      	ldr	r3, [r3, #16]
 8013760:	4618      	mov	r0, r3
 8013762:	f7fd fe41 	bl	80113e8 <dec_lock>
 8013766:	4603      	mov	r3, r0
 8013768:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 801376a:	7bfb      	ldrb	r3, [r7, #15]
 801376c:	2b00      	cmp	r3, #0
 801376e:	d102      	bne.n	8013776 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8013770:	687b      	ldr	r3, [r7, #4]
 8013772:	2200      	movs	r2, #0
 8013774:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8013776:	7bfb      	ldrb	r3, [r7, #15]
}
 8013778:	4618      	mov	r0, r3
 801377a:	3710      	adds	r7, #16
 801377c:	46bd      	mov	sp, r7
 801377e:	bd80      	pop	{r7, pc}

08013780 <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8013780:	b590      	push	{r4, r7, lr}
 8013782:	b091      	sub	sp, #68	; 0x44
 8013784:	af00      	add	r7, sp, #0
 8013786:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8013788:	f107 0108 	add.w	r1, r7, #8
 801378c:	1d3b      	adds	r3, r7, #4
 801378e:	2200      	movs	r2, #0
 8013790:	4618      	mov	r0, r3
 8013792:	f7fe ff87 	bl	80126a4 <find_volume>
 8013796:	4603      	mov	r3, r0
 8013798:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 801379c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80137a0:	2b00      	cmp	r3, #0
 80137a2:	d131      	bne.n	8013808 <f_chdir+0x88>
		dj.obj.fs = fs;
 80137a4:	68bb      	ldr	r3, [r7, #8]
 80137a6:	60fb      	str	r3, [r7, #12]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 80137a8:	687a      	ldr	r2, [r7, #4]
 80137aa:	f107 030c 	add.w	r3, r7, #12
 80137ae:	4611      	mov	r1, r2
 80137b0:	4618      	mov	r0, r3
 80137b2:	f7fe fe47 	bl	8012444 <follow_path>
 80137b6:	4603      	mov	r3, r0
 80137b8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {					/* Follow completed */
 80137bc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80137c0:	2b00      	cmp	r3, #0
 80137c2:	d11a      	bne.n	80137fa <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 80137c4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80137c8:	b25b      	sxtb	r3, r3
 80137ca:	2b00      	cmp	r3, #0
 80137cc:	da03      	bge.n	80137d6 <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 80137ce:	68bb      	ldr	r3, [r7, #8]
 80137d0:	697a      	ldr	r2, [r7, #20]
 80137d2:	619a      	str	r2, [r3, #24]
 80137d4:	e011      	b.n	80137fa <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 80137d6:	7cbb      	ldrb	r3, [r7, #18]
 80137d8:	f003 0310 	and.w	r3, r3, #16
 80137dc:	2b00      	cmp	r3, #0
 80137de:	d009      	beq.n	80137f4 <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 80137e0:	68bb      	ldr	r3, [r7, #8]
 80137e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80137e4:	68bc      	ldr	r4, [r7, #8]
 80137e6:	4611      	mov	r1, r2
 80137e8:	4618      	mov	r0, r3
 80137ea:	f7fe fc20 	bl	801202e <ld_clust>
 80137ee:	4603      	mov	r3, r0
 80137f0:	61a3      	str	r3, [r4, #24]
 80137f2:	e002      	b.n	80137fa <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 80137f4:	2305      	movs	r3, #5
 80137f6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 80137fa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80137fe:	2b04      	cmp	r3, #4
 8013800:	d102      	bne.n	8013808 <f_chdir+0x88>
 8013802:	2305      	movs	r3, #5
 8013804:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	LEAVE_FF(fs, res);
 8013808:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 801380c:	4618      	mov	r0, r3
 801380e:	3744      	adds	r7, #68	; 0x44
 8013810:	46bd      	mov	sp, r7
 8013812:	bd90      	pop	{r4, r7, pc}

08013814 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8013814:	b580      	push	{r7, lr}
 8013816:	b090      	sub	sp, #64	; 0x40
 8013818:	af00      	add	r7, sp, #0
 801381a:	6078      	str	r0, [r7, #4]
 801381c:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 801381e:	687b      	ldr	r3, [r7, #4]
 8013820:	f107 0208 	add.w	r2, r7, #8
 8013824:	4611      	mov	r1, r2
 8013826:	4618      	mov	r0, r3
 8013828:	f7ff f9c2 	bl	8012bb0 <validate>
 801382c:	4603      	mov	r3, r0
 801382e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8013832:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013836:	2b00      	cmp	r3, #0
 8013838:	d103      	bne.n	8013842 <f_lseek+0x2e>
 801383a:	687b      	ldr	r3, [r7, #4]
 801383c:	7d5b      	ldrb	r3, [r3, #21]
 801383e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8013842:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8013846:	2b00      	cmp	r3, #0
 8013848:	d002      	beq.n	8013850 <f_lseek+0x3c>
 801384a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801384e:	e201      	b.n	8013c54 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8013850:	687b      	ldr	r3, [r7, #4]
 8013852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013854:	2b00      	cmp	r3, #0
 8013856:	f000 80d9 	beq.w	8013a0c <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 801385a:	683b      	ldr	r3, [r7, #0]
 801385c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013860:	d15a      	bne.n	8013918 <f_lseek+0x104>
			tbl = fp->cltbl;
 8013862:	687b      	ldr	r3, [r7, #4]
 8013864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013866:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8013868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801386a:	1d1a      	adds	r2, r3, #4
 801386c:	627a      	str	r2, [r7, #36]	; 0x24
 801386e:	681b      	ldr	r3, [r3, #0]
 8013870:	617b      	str	r3, [r7, #20]
 8013872:	2302      	movs	r3, #2
 8013874:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8013876:	687b      	ldr	r3, [r7, #4]
 8013878:	689b      	ldr	r3, [r3, #8]
 801387a:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 801387c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801387e:	2b00      	cmp	r3, #0
 8013880:	d03a      	beq.n	80138f8 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8013882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013884:	613b      	str	r3, [r7, #16]
 8013886:	2300      	movs	r3, #0
 8013888:	62fb      	str	r3, [r7, #44]	; 0x2c
 801388a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801388c:	3302      	adds	r3, #2
 801388e:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8013890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013892:	60fb      	str	r3, [r7, #12]
 8013894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013896:	3301      	adds	r3, #1
 8013898:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801389e:	4618      	mov	r0, r3
 80138a0:	f7fd ff03 	bl	80116aa <get_fat>
 80138a4:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 80138a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138a8:	2b01      	cmp	r3, #1
 80138aa:	d804      	bhi.n	80138b6 <f_lseek+0xa2>
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	2202      	movs	r2, #2
 80138b0:	755a      	strb	r2, [r3, #21]
 80138b2:	2302      	movs	r3, #2
 80138b4:	e1ce      	b.n	8013c54 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80138b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80138bc:	d104      	bne.n	80138c8 <f_lseek+0xb4>
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	2201      	movs	r2, #1
 80138c2:	755a      	strb	r2, [r3, #21]
 80138c4:	2301      	movs	r3, #1
 80138c6:	e1c5      	b.n	8013c54 <f_lseek+0x440>
					} while (cl == pcl + 1);
 80138c8:	68fb      	ldr	r3, [r7, #12]
 80138ca:	3301      	adds	r3, #1
 80138cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80138ce:	429a      	cmp	r2, r3
 80138d0:	d0de      	beq.n	8013890 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80138d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80138d4:	697b      	ldr	r3, [r7, #20]
 80138d6:	429a      	cmp	r2, r3
 80138d8:	d809      	bhi.n	80138ee <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 80138da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138dc:	1d1a      	adds	r2, r3, #4
 80138de:	627a      	str	r2, [r7, #36]	; 0x24
 80138e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80138e2:	601a      	str	r2, [r3, #0]
 80138e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138e6:	1d1a      	adds	r2, r3, #4
 80138e8:	627a      	str	r2, [r7, #36]	; 0x24
 80138ea:	693a      	ldr	r2, [r7, #16]
 80138ec:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 80138ee:	68bb      	ldr	r3, [r7, #8]
 80138f0:	69db      	ldr	r3, [r3, #28]
 80138f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80138f4:	429a      	cmp	r2, r3
 80138f6:	d3c4      	bcc.n	8013882 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80138f8:	687b      	ldr	r3, [r7, #4]
 80138fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80138fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80138fe:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8013900:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013902:	697b      	ldr	r3, [r7, #20]
 8013904:	429a      	cmp	r2, r3
 8013906:	d803      	bhi.n	8013910 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8013908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801390a:	2200      	movs	r2, #0
 801390c:	601a      	str	r2, [r3, #0]
 801390e:	e19f      	b.n	8013c50 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8013910:	2311      	movs	r3, #17
 8013912:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8013916:	e19b      	b.n	8013c50 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8013918:	687b      	ldr	r3, [r7, #4]
 801391a:	68db      	ldr	r3, [r3, #12]
 801391c:	683a      	ldr	r2, [r7, #0]
 801391e:	429a      	cmp	r2, r3
 8013920:	d902      	bls.n	8013928 <f_lseek+0x114>
 8013922:	687b      	ldr	r3, [r7, #4]
 8013924:	68db      	ldr	r3, [r3, #12]
 8013926:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8013928:	687b      	ldr	r3, [r7, #4]
 801392a:	683a      	ldr	r2, [r7, #0]
 801392c:	619a      	str	r2, [r3, #24]
			if (ofs) {
 801392e:	683b      	ldr	r3, [r7, #0]
 8013930:	2b00      	cmp	r3, #0
 8013932:	f000 818d 	beq.w	8013c50 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8013936:	683b      	ldr	r3, [r7, #0]
 8013938:	3b01      	subs	r3, #1
 801393a:	4619      	mov	r1, r3
 801393c:	6878      	ldr	r0, [r7, #4]
 801393e:	f7fe f998 	bl	8011c72 <clmt_clust>
 8013942:	4602      	mov	r2, r0
 8013944:	687b      	ldr	r3, [r7, #4]
 8013946:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8013948:	68ba      	ldr	r2, [r7, #8]
 801394a:	687b      	ldr	r3, [r7, #4]
 801394c:	69db      	ldr	r3, [r3, #28]
 801394e:	4619      	mov	r1, r3
 8013950:	4610      	mov	r0, r2
 8013952:	f7fd fe8b 	bl	801166c <clust2sect>
 8013956:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8013958:	69bb      	ldr	r3, [r7, #24]
 801395a:	2b00      	cmp	r3, #0
 801395c:	d104      	bne.n	8013968 <f_lseek+0x154>
 801395e:	687b      	ldr	r3, [r7, #4]
 8013960:	2202      	movs	r2, #2
 8013962:	755a      	strb	r2, [r3, #21]
 8013964:	2302      	movs	r3, #2
 8013966:	e175      	b.n	8013c54 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8013968:	683b      	ldr	r3, [r7, #0]
 801396a:	3b01      	subs	r3, #1
 801396c:	68ba      	ldr	r2, [r7, #8]
 801396e:	8992      	ldrh	r2, [r2, #12]
 8013970:	fbb3 f3f2 	udiv	r3, r3, r2
 8013974:	68ba      	ldr	r2, [r7, #8]
 8013976:	8952      	ldrh	r2, [r2, #10]
 8013978:	3a01      	subs	r2, #1
 801397a:	4013      	ands	r3, r2
 801397c:	69ba      	ldr	r2, [r7, #24]
 801397e:	4413      	add	r3, r2
 8013980:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8013982:	687b      	ldr	r3, [r7, #4]
 8013984:	699b      	ldr	r3, [r3, #24]
 8013986:	68ba      	ldr	r2, [r7, #8]
 8013988:	8992      	ldrh	r2, [r2, #12]
 801398a:	fbb3 f1f2 	udiv	r1, r3, r2
 801398e:	fb02 f201 	mul.w	r2, r2, r1
 8013992:	1a9b      	subs	r3, r3, r2
 8013994:	2b00      	cmp	r3, #0
 8013996:	f000 815b 	beq.w	8013c50 <f_lseek+0x43c>
 801399a:	687b      	ldr	r3, [r7, #4]
 801399c:	6a1b      	ldr	r3, [r3, #32]
 801399e:	69ba      	ldr	r2, [r7, #24]
 80139a0:	429a      	cmp	r2, r3
 80139a2:	f000 8155 	beq.w	8013c50 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	7d1b      	ldrb	r3, [r3, #20]
 80139aa:	b25b      	sxtb	r3, r3
 80139ac:	2b00      	cmp	r3, #0
 80139ae:	da18      	bge.n	80139e2 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80139b0:	68bb      	ldr	r3, [r7, #8]
 80139b2:	7858      	ldrb	r0, [r3, #1]
 80139b4:	687b      	ldr	r3, [r7, #4]
 80139b6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80139ba:	687b      	ldr	r3, [r7, #4]
 80139bc:	6a1a      	ldr	r2, [r3, #32]
 80139be:	2301      	movs	r3, #1
 80139c0:	f7fd fac8 	bl	8010f54 <disk_write>
 80139c4:	4603      	mov	r3, r0
 80139c6:	2b00      	cmp	r3, #0
 80139c8:	d004      	beq.n	80139d4 <f_lseek+0x1c0>
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	2201      	movs	r2, #1
 80139ce:	755a      	strb	r2, [r3, #21]
 80139d0:	2301      	movs	r3, #1
 80139d2:	e13f      	b.n	8013c54 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 80139d4:	687b      	ldr	r3, [r7, #4]
 80139d6:	7d1b      	ldrb	r3, [r3, #20]
 80139d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80139dc:	b2da      	uxtb	r2, r3
 80139de:	687b      	ldr	r3, [r7, #4]
 80139e0:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80139e2:	68bb      	ldr	r3, [r7, #8]
 80139e4:	7858      	ldrb	r0, [r3, #1]
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80139ec:	2301      	movs	r3, #1
 80139ee:	69ba      	ldr	r2, [r7, #24]
 80139f0:	f7fd fa90 	bl	8010f14 <disk_read>
 80139f4:	4603      	mov	r3, r0
 80139f6:	2b00      	cmp	r3, #0
 80139f8:	d004      	beq.n	8013a04 <f_lseek+0x1f0>
 80139fa:	687b      	ldr	r3, [r7, #4]
 80139fc:	2201      	movs	r2, #1
 80139fe:	755a      	strb	r2, [r3, #21]
 8013a00:	2301      	movs	r3, #1
 8013a02:	e127      	b.n	8013c54 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	69ba      	ldr	r2, [r7, #24]
 8013a08:	621a      	str	r2, [r3, #32]
 8013a0a:	e121      	b.n	8013c50 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8013a0c:	687b      	ldr	r3, [r7, #4]
 8013a0e:	68db      	ldr	r3, [r3, #12]
 8013a10:	683a      	ldr	r2, [r7, #0]
 8013a12:	429a      	cmp	r2, r3
 8013a14:	d908      	bls.n	8013a28 <f_lseek+0x214>
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	7d1b      	ldrb	r3, [r3, #20]
 8013a1a:	f003 0302 	and.w	r3, r3, #2
 8013a1e:	2b00      	cmp	r3, #0
 8013a20:	d102      	bne.n	8013a28 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8013a22:	687b      	ldr	r3, [r7, #4]
 8013a24:	68db      	ldr	r3, [r3, #12]
 8013a26:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8013a28:	687b      	ldr	r3, [r7, #4]
 8013a2a:	699b      	ldr	r3, [r3, #24]
 8013a2c:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8013a2e:	2300      	movs	r3, #0
 8013a30:	637b      	str	r3, [r7, #52]	; 0x34
 8013a32:	687b      	ldr	r3, [r7, #4]
 8013a34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013a36:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8013a38:	683b      	ldr	r3, [r7, #0]
 8013a3a:	2b00      	cmp	r3, #0
 8013a3c:	f000 80b5 	beq.w	8013baa <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8013a40:	68bb      	ldr	r3, [r7, #8]
 8013a42:	895b      	ldrh	r3, [r3, #10]
 8013a44:	461a      	mov	r2, r3
 8013a46:	68bb      	ldr	r3, [r7, #8]
 8013a48:	899b      	ldrh	r3, [r3, #12]
 8013a4a:	fb03 f302 	mul.w	r3, r3, r2
 8013a4e:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8013a50:	6a3b      	ldr	r3, [r7, #32]
 8013a52:	2b00      	cmp	r3, #0
 8013a54:	d01b      	beq.n	8013a8e <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8013a56:	683b      	ldr	r3, [r7, #0]
 8013a58:	1e5a      	subs	r2, r3, #1
 8013a5a:	69fb      	ldr	r3, [r7, #28]
 8013a5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8013a60:	6a3b      	ldr	r3, [r7, #32]
 8013a62:	1e59      	subs	r1, r3, #1
 8013a64:	69fb      	ldr	r3, [r7, #28]
 8013a66:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8013a6a:	429a      	cmp	r2, r3
 8013a6c:	d30f      	bcc.n	8013a8e <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8013a6e:	6a3b      	ldr	r3, [r7, #32]
 8013a70:	1e5a      	subs	r2, r3, #1
 8013a72:	69fb      	ldr	r3, [r7, #28]
 8013a74:	425b      	negs	r3, r3
 8013a76:	401a      	ands	r2, r3
 8013a78:	687b      	ldr	r3, [r7, #4]
 8013a7a:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8013a7c:	687b      	ldr	r3, [r7, #4]
 8013a7e:	699b      	ldr	r3, [r3, #24]
 8013a80:	683a      	ldr	r2, [r7, #0]
 8013a82:	1ad3      	subs	r3, r2, r3
 8013a84:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8013a86:	687b      	ldr	r3, [r7, #4]
 8013a88:	69db      	ldr	r3, [r3, #28]
 8013a8a:	63bb      	str	r3, [r7, #56]	; 0x38
 8013a8c:	e022      	b.n	8013ad4 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8013a8e:	687b      	ldr	r3, [r7, #4]
 8013a90:	689b      	ldr	r3, [r3, #8]
 8013a92:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8013a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a96:	2b00      	cmp	r3, #0
 8013a98:	d119      	bne.n	8013ace <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	2100      	movs	r1, #0
 8013a9e:	4618      	mov	r0, r3
 8013aa0:	f7fe f84f 	bl	8011b42 <create_chain>
 8013aa4:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8013aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013aa8:	2b01      	cmp	r3, #1
 8013aaa:	d104      	bne.n	8013ab6 <f_lseek+0x2a2>
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	2202      	movs	r2, #2
 8013ab0:	755a      	strb	r2, [r3, #21]
 8013ab2:	2302      	movs	r3, #2
 8013ab4:	e0ce      	b.n	8013c54 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013abc:	d104      	bne.n	8013ac8 <f_lseek+0x2b4>
 8013abe:	687b      	ldr	r3, [r7, #4]
 8013ac0:	2201      	movs	r2, #1
 8013ac2:	755a      	strb	r2, [r3, #21]
 8013ac4:	2301      	movs	r3, #1
 8013ac6:	e0c5      	b.n	8013c54 <f_lseek+0x440>
					fp->obj.sclust = clst;
 8013ac8:	687b      	ldr	r3, [r7, #4]
 8013aca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013acc:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8013ace:	687b      	ldr	r3, [r7, #4]
 8013ad0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013ad2:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8013ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ad6:	2b00      	cmp	r3, #0
 8013ad8:	d067      	beq.n	8013baa <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8013ada:	e03a      	b.n	8013b52 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8013adc:	683a      	ldr	r2, [r7, #0]
 8013ade:	69fb      	ldr	r3, [r7, #28]
 8013ae0:	1ad3      	subs	r3, r2, r3
 8013ae2:	603b      	str	r3, [r7, #0]
 8013ae4:	687b      	ldr	r3, [r7, #4]
 8013ae6:	699a      	ldr	r2, [r3, #24]
 8013ae8:	69fb      	ldr	r3, [r7, #28]
 8013aea:	441a      	add	r2, r3
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	7d1b      	ldrb	r3, [r3, #20]
 8013af4:	f003 0302 	and.w	r3, r3, #2
 8013af8:	2b00      	cmp	r3, #0
 8013afa:	d00b      	beq.n	8013b14 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8013afc:	687b      	ldr	r3, [r7, #4]
 8013afe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013b00:	4618      	mov	r0, r3
 8013b02:	f7fe f81e 	bl	8011b42 <create_chain>
 8013b06:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8013b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b0a:	2b00      	cmp	r3, #0
 8013b0c:	d108      	bne.n	8013b20 <f_lseek+0x30c>
							ofs = 0; break;
 8013b0e:	2300      	movs	r3, #0
 8013b10:	603b      	str	r3, [r7, #0]
 8013b12:	e022      	b.n	8013b5a <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8013b14:	687b      	ldr	r3, [r7, #4]
 8013b16:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013b18:	4618      	mov	r0, r3
 8013b1a:	f7fd fdc6 	bl	80116aa <get_fat>
 8013b1e:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013b26:	d104      	bne.n	8013b32 <f_lseek+0x31e>
 8013b28:	687b      	ldr	r3, [r7, #4]
 8013b2a:	2201      	movs	r2, #1
 8013b2c:	755a      	strb	r2, [r3, #21]
 8013b2e:	2301      	movs	r3, #1
 8013b30:	e090      	b.n	8013c54 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8013b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b34:	2b01      	cmp	r3, #1
 8013b36:	d904      	bls.n	8013b42 <f_lseek+0x32e>
 8013b38:	68bb      	ldr	r3, [r7, #8]
 8013b3a:	69db      	ldr	r3, [r3, #28]
 8013b3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013b3e:	429a      	cmp	r2, r3
 8013b40:	d304      	bcc.n	8013b4c <f_lseek+0x338>
 8013b42:	687b      	ldr	r3, [r7, #4]
 8013b44:	2202      	movs	r2, #2
 8013b46:	755a      	strb	r2, [r3, #21]
 8013b48:	2302      	movs	r3, #2
 8013b4a:	e083      	b.n	8013c54 <f_lseek+0x440>
					fp->clust = clst;
 8013b4c:	687b      	ldr	r3, [r7, #4]
 8013b4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013b50:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8013b52:	683a      	ldr	r2, [r7, #0]
 8013b54:	69fb      	ldr	r3, [r7, #28]
 8013b56:	429a      	cmp	r2, r3
 8013b58:	d8c0      	bhi.n	8013adc <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8013b5a:	687b      	ldr	r3, [r7, #4]
 8013b5c:	699a      	ldr	r2, [r3, #24]
 8013b5e:	683b      	ldr	r3, [r7, #0]
 8013b60:	441a      	add	r2, r3
 8013b62:	687b      	ldr	r3, [r7, #4]
 8013b64:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8013b66:	68bb      	ldr	r3, [r7, #8]
 8013b68:	899b      	ldrh	r3, [r3, #12]
 8013b6a:	461a      	mov	r2, r3
 8013b6c:	683b      	ldr	r3, [r7, #0]
 8013b6e:	fbb3 f1f2 	udiv	r1, r3, r2
 8013b72:	fb02 f201 	mul.w	r2, r2, r1
 8013b76:	1a9b      	subs	r3, r3, r2
 8013b78:	2b00      	cmp	r3, #0
 8013b7a:	d016      	beq.n	8013baa <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8013b7c:	68bb      	ldr	r3, [r7, #8]
 8013b7e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013b80:	4618      	mov	r0, r3
 8013b82:	f7fd fd73 	bl	801166c <clust2sect>
 8013b86:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8013b88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013b8a:	2b00      	cmp	r3, #0
 8013b8c:	d104      	bne.n	8013b98 <f_lseek+0x384>
 8013b8e:	687b      	ldr	r3, [r7, #4]
 8013b90:	2202      	movs	r2, #2
 8013b92:	755a      	strb	r2, [r3, #21]
 8013b94:	2302      	movs	r3, #2
 8013b96:	e05d      	b.n	8013c54 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8013b98:	68bb      	ldr	r3, [r7, #8]
 8013b9a:	899b      	ldrh	r3, [r3, #12]
 8013b9c:	461a      	mov	r2, r3
 8013b9e:	683b      	ldr	r3, [r7, #0]
 8013ba0:	fbb3 f3f2 	udiv	r3, r3, r2
 8013ba4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013ba6:	4413      	add	r3, r2
 8013ba8:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8013baa:	687b      	ldr	r3, [r7, #4]
 8013bac:	699a      	ldr	r2, [r3, #24]
 8013bae:	687b      	ldr	r3, [r7, #4]
 8013bb0:	68db      	ldr	r3, [r3, #12]
 8013bb2:	429a      	cmp	r2, r3
 8013bb4:	d90a      	bls.n	8013bcc <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	699a      	ldr	r2, [r3, #24]
 8013bba:	687b      	ldr	r3, [r7, #4]
 8013bbc:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8013bbe:	687b      	ldr	r3, [r7, #4]
 8013bc0:	7d1b      	ldrb	r3, [r3, #20]
 8013bc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013bc6:	b2da      	uxtb	r2, r3
 8013bc8:	687b      	ldr	r3, [r7, #4]
 8013bca:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8013bcc:	687b      	ldr	r3, [r7, #4]
 8013bce:	699b      	ldr	r3, [r3, #24]
 8013bd0:	68ba      	ldr	r2, [r7, #8]
 8013bd2:	8992      	ldrh	r2, [r2, #12]
 8013bd4:	fbb3 f1f2 	udiv	r1, r3, r2
 8013bd8:	fb02 f201 	mul.w	r2, r2, r1
 8013bdc:	1a9b      	subs	r3, r3, r2
 8013bde:	2b00      	cmp	r3, #0
 8013be0:	d036      	beq.n	8013c50 <f_lseek+0x43c>
 8013be2:	687b      	ldr	r3, [r7, #4]
 8013be4:	6a1b      	ldr	r3, [r3, #32]
 8013be6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013be8:	429a      	cmp	r2, r3
 8013bea:	d031      	beq.n	8013c50 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8013bec:	687b      	ldr	r3, [r7, #4]
 8013bee:	7d1b      	ldrb	r3, [r3, #20]
 8013bf0:	b25b      	sxtb	r3, r3
 8013bf2:	2b00      	cmp	r3, #0
 8013bf4:	da18      	bge.n	8013c28 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013bf6:	68bb      	ldr	r3, [r7, #8]
 8013bf8:	7858      	ldrb	r0, [r3, #1]
 8013bfa:	687b      	ldr	r3, [r7, #4]
 8013bfc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013c00:	687b      	ldr	r3, [r7, #4]
 8013c02:	6a1a      	ldr	r2, [r3, #32]
 8013c04:	2301      	movs	r3, #1
 8013c06:	f7fd f9a5 	bl	8010f54 <disk_write>
 8013c0a:	4603      	mov	r3, r0
 8013c0c:	2b00      	cmp	r3, #0
 8013c0e:	d004      	beq.n	8013c1a <f_lseek+0x406>
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	2201      	movs	r2, #1
 8013c14:	755a      	strb	r2, [r3, #21]
 8013c16:	2301      	movs	r3, #1
 8013c18:	e01c      	b.n	8013c54 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 8013c1a:	687b      	ldr	r3, [r7, #4]
 8013c1c:	7d1b      	ldrb	r3, [r3, #20]
 8013c1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8013c22:	b2da      	uxtb	r2, r3
 8013c24:	687b      	ldr	r3, [r7, #4]
 8013c26:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8013c28:	68bb      	ldr	r3, [r7, #8]
 8013c2a:	7858      	ldrb	r0, [r3, #1]
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8013c32:	2301      	movs	r3, #1
 8013c34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013c36:	f7fd f96d 	bl	8010f14 <disk_read>
 8013c3a:	4603      	mov	r3, r0
 8013c3c:	2b00      	cmp	r3, #0
 8013c3e:	d004      	beq.n	8013c4a <f_lseek+0x436>
 8013c40:	687b      	ldr	r3, [r7, #4]
 8013c42:	2201      	movs	r2, #1
 8013c44:	755a      	strb	r2, [r3, #21]
 8013c46:	2301      	movs	r3, #1
 8013c48:	e004      	b.n	8013c54 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8013c4a:	687b      	ldr	r3, [r7, #4]
 8013c4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013c4e:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8013c50:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8013c54:	4618      	mov	r0, r3
 8013c56:	3740      	adds	r7, #64	; 0x40
 8013c58:	46bd      	mov	sp, r7
 8013c5a:	bd80      	pop	{r7, pc}

08013c5c <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8013c5c:	b580      	push	{r7, lr}
 8013c5e:	b09e      	sub	sp, #120	; 0x78
 8013c60:	af00      	add	r7, sp, #0
 8013c62:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8013c64:	2300      	movs	r3, #0
 8013c66:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8013c68:	f107 010c 	add.w	r1, r7, #12
 8013c6c:	1d3b      	adds	r3, r7, #4
 8013c6e:	2202      	movs	r2, #2
 8013c70:	4618      	mov	r0, r3
 8013c72:	f7fe fd17 	bl	80126a4 <find_volume>
 8013c76:	4603      	mov	r3, r0
 8013c78:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 8013c7c:	68fb      	ldr	r3, [r7, #12]
 8013c7e:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 8013c80:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013c84:	2b00      	cmp	r3, #0
 8013c86:	f040 80a4 	bne.w	8013dd2 <f_unlink+0x176>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8013c8a:	687a      	ldr	r2, [r7, #4]
 8013c8c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013c90:	4611      	mov	r1, r2
 8013c92:	4618      	mov	r0, r3
 8013c94:	f7fe fbd6 	bl	8012444 <follow_path>
 8013c98:	4603      	mov	r3, r0
 8013c9a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 8013c9e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013ca2:	2b00      	cmp	r3, #0
 8013ca4:	d108      	bne.n	8013cb8 <f_unlink+0x5c>
 8013ca6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8013caa:	f003 0320 	and.w	r3, r3, #32
 8013cae:	2b00      	cmp	r3, #0
 8013cb0:	d002      	beq.n	8013cb8 <f_unlink+0x5c>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 8013cb2:	2306      	movs	r3, #6
 8013cb4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8013cb8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013cbc:	2b00      	cmp	r3, #0
 8013cbe:	d108      	bne.n	8013cd2 <f_unlink+0x76>
 8013cc0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013cc4:	2102      	movs	r1, #2
 8013cc6:	4618      	mov	r0, r3
 8013cc8:	f7fd fa82 	bl	80111d0 <chk_lock>
 8013ccc:	4603      	mov	r3, r0
 8013cce:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8013cd2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013cd6:	2b00      	cmp	r3, #0
 8013cd8:	d17b      	bne.n	8013dd2 <f_unlink+0x176>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8013cda:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8013cde:	b25b      	sxtb	r3, r3
 8013ce0:	2b00      	cmp	r3, #0
 8013ce2:	da03      	bge.n	8013cec <f_unlink+0x90>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8013ce4:	2306      	movs	r3, #6
 8013ce6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8013cea:	e008      	b.n	8013cfe <f_unlink+0xa2>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8013cec:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8013cf0:	f003 0301 	and.w	r3, r3, #1
 8013cf4:	2b00      	cmp	r3, #0
 8013cf6:	d002      	beq.n	8013cfe <f_unlink+0xa2>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8013cf8:	2307      	movs	r3, #7
 8013cfa:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 8013cfe:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013d02:	2b00      	cmp	r3, #0
 8013d04:	d13d      	bne.n	8013d82 <f_unlink+0x126>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8013d06:	68fb      	ldr	r3, [r7, #12]
 8013d08:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8013d0a:	4611      	mov	r1, r2
 8013d0c:	4618      	mov	r0, r3
 8013d0e:	f7fe f98e 	bl	801202e <ld_clust>
 8013d12:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8013d14:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8013d18:	f003 0310 	and.w	r3, r3, #16
 8013d1c:	2b00      	cmp	r3, #0
 8013d1e:	d030      	beq.n	8013d82 <f_unlink+0x126>
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
 8013d20:	68fb      	ldr	r3, [r7, #12]
 8013d22:	699b      	ldr	r3, [r3, #24]
 8013d24:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8013d26:	429a      	cmp	r2, r3
 8013d28:	d103      	bne.n	8013d32 <f_unlink+0xd6>
						res = FR_DENIED;
 8013d2a:	2307      	movs	r3, #7
 8013d2c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8013d30:	e027      	b.n	8013d82 <f_unlink+0x126>
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8013d32:	68fb      	ldr	r3, [r7, #12]
 8013d34:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 8013d36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013d38:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8013d3a:	f107 0310 	add.w	r3, r7, #16
 8013d3e:	2100      	movs	r1, #0
 8013d40:	4618      	mov	r0, r3
 8013d42:	f7fd ffce 	bl	8011ce2 <dir_sdi>
 8013d46:	4603      	mov	r3, r0
 8013d48:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 8013d4c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013d50:	2b00      	cmp	r3, #0
 8013d52:	d116      	bne.n	8013d82 <f_unlink+0x126>
							res = dir_read(&sdj, 0);			/* Read an item */
 8013d54:	f107 0310 	add.w	r3, r7, #16
 8013d58:	2100      	movs	r1, #0
 8013d5a:	4618      	mov	r0, r3
 8013d5c:	f7fe f9a6 	bl	80120ac <dir_read>
 8013d60:	4603      	mov	r3, r0
 8013d62:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8013d66:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013d6a:	2b00      	cmp	r3, #0
 8013d6c:	d102      	bne.n	8013d74 <f_unlink+0x118>
 8013d6e:	2307      	movs	r3, #7
 8013d70:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8013d74:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013d78:	2b04      	cmp	r3, #4
 8013d7a:	d102      	bne.n	8013d82 <f_unlink+0x126>
 8013d7c:	2300      	movs	r3, #0
 8013d7e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 8013d82:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013d86:	2b00      	cmp	r3, #0
 8013d88:	d123      	bne.n	8013dd2 <f_unlink+0x176>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8013d8a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013d8e:	4618      	mov	r0, r3
 8013d90:	f7fe fa70 	bl	8012274 <dir_remove>
 8013d94:	4603      	mov	r3, r0
 8013d96:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8013d9a:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013d9e:	2b00      	cmp	r3, #0
 8013da0:	d10c      	bne.n	8013dbc <f_unlink+0x160>
 8013da2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8013da4:	2b00      	cmp	r3, #0
 8013da6:	d009      	beq.n	8013dbc <f_unlink+0x160>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8013da8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013dac:	2200      	movs	r2, #0
 8013dae:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8013db0:	4618      	mov	r0, r3
 8013db2:	f7fd fe61 	bl	8011a78 <remove_chain>
 8013db6:	4603      	mov	r3, r0
 8013db8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8013dbc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8013dc0:	2b00      	cmp	r3, #0
 8013dc2:	d106      	bne.n	8013dd2 <f_unlink+0x176>
 8013dc4:	68fb      	ldr	r3, [r7, #12]
 8013dc6:	4618      	mov	r0, r3
 8013dc8:	f7fd fbe0 	bl	801158c <sync_fs>
 8013dcc:	4603      	mov	r3, r0
 8013dce:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8013dd2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8013dd6:	4618      	mov	r0, r3
 8013dd8:	3778      	adds	r7, #120	; 0x78
 8013dda:	46bd      	mov	sp, r7
 8013ddc:	bd80      	pop	{r7, pc}
	...

08013de0 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8013de0:	b580      	push	{r7, lr}
 8013de2:	b096      	sub	sp, #88	; 0x58
 8013de4:	af00      	add	r7, sp, #0
 8013de6:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8013de8:	f107 0108 	add.w	r1, r7, #8
 8013dec:	1d3b      	adds	r3, r7, #4
 8013dee:	2202      	movs	r2, #2
 8013df0:	4618      	mov	r0, r3
 8013df2:	f7fe fc57 	bl	80126a4 <find_volume>
 8013df6:	4603      	mov	r3, r0
 8013df8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	dj.obj.fs = fs;
 8013dfc:	68bb      	ldr	r3, [r7, #8]
 8013dfe:	60fb      	str	r3, [r7, #12]
	if (res == FR_OK) {
 8013e00:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013e04:	2b00      	cmp	r3, #0
 8013e06:	f040 80fe 	bne.w	8014006 <f_mkdir+0x226>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 8013e0a:	687a      	ldr	r2, [r7, #4]
 8013e0c:	f107 030c 	add.w	r3, r7, #12
 8013e10:	4611      	mov	r1, r2
 8013e12:	4618      	mov	r0, r3
 8013e14:	f7fe fb16 	bl	8012444 <follow_path>
 8013e18:	4603      	mov	r3, r0
 8013e1a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8013e1e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013e22:	2b00      	cmp	r3, #0
 8013e24:	d102      	bne.n	8013e2c <f_mkdir+0x4c>
 8013e26:	2308      	movs	r3, #8
 8013e28:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 8013e2c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013e30:	2b04      	cmp	r3, #4
 8013e32:	d108      	bne.n	8013e46 <f_mkdir+0x66>
 8013e34:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8013e38:	f003 0320 	and.w	r3, r3, #32
 8013e3c:	2b00      	cmp	r3, #0
 8013e3e:	d002      	beq.n	8013e46 <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 8013e40:	2306      	movs	r3, #6
 8013e42:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8013e46:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013e4a:	2b04      	cmp	r3, #4
 8013e4c:	f040 80db 	bne.w	8014006 <f_mkdir+0x226>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8013e50:	f107 030c 	add.w	r3, r7, #12
 8013e54:	2100      	movs	r1, #0
 8013e56:	4618      	mov	r0, r3
 8013e58:	f7fd fe73 	bl	8011b42 <create_chain>
 8013e5c:	6478      	str	r0, [r7, #68]	; 0x44
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8013e5e:	68bb      	ldr	r3, [r7, #8]
 8013e60:	895b      	ldrh	r3, [r3, #10]
 8013e62:	461a      	mov	r2, r3
 8013e64:	68bb      	ldr	r3, [r7, #8]
 8013e66:	899b      	ldrh	r3, [r3, #12]
 8013e68:	fb03 f302 	mul.w	r3, r3, r2
 8013e6c:	61bb      	str	r3, [r7, #24]
			res = FR_OK;
 8013e6e:	2300      	movs	r3, #0
 8013e70:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8013e74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013e76:	2b00      	cmp	r3, #0
 8013e78:	d102      	bne.n	8013e80 <f_mkdir+0xa0>
 8013e7a:	2307      	movs	r3, #7
 8013e7c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 1) res = FR_INT_ERR;
 8013e80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013e82:	2b01      	cmp	r3, #1
 8013e84:	d102      	bne.n	8013e8c <f_mkdir+0xac>
 8013e86:	2302      	movs	r3, #2
 8013e88:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8013e8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013e92:	d102      	bne.n	8013e9a <f_mkdir+0xba>
 8013e94:	2301      	movs	r3, #1
 8013e96:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8013e9a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013e9e:	2b00      	cmp	r3, #0
 8013ea0:	d106      	bne.n	8013eb0 <f_mkdir+0xd0>
 8013ea2:	68bb      	ldr	r3, [r7, #8]
 8013ea4:	4618      	mov	r0, r3
 8013ea6:	f7fd faff 	bl	80114a8 <sync_window>
 8013eaa:	4603      	mov	r3, r0
 8013eac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			tm = GET_FATTIME();
 8013eb0:	4b58      	ldr	r3, [pc, #352]	; (8014014 <f_mkdir+0x234>)
 8013eb2:	643b      	str	r3, [r7, #64]	; 0x40
			if (res == FR_OK) {					/* Initialize the new directory table */
 8013eb4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013eb8:	2b00      	cmp	r3, #0
 8013eba:	d16c      	bne.n	8013f96 <f_mkdir+0x1b6>
				dsc = clust2sect(fs, dcl);
 8013ebc:	68bb      	ldr	r3, [r7, #8]
 8013ebe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8013ec0:	4618      	mov	r0, r3
 8013ec2:	f7fd fbd3 	bl	801166c <clust2sect>
 8013ec6:	64f8      	str	r0, [r7, #76]	; 0x4c
				dir = fs->win;
 8013ec8:	68bb      	ldr	r3, [r7, #8]
 8013eca:	3338      	adds	r3, #56	; 0x38
 8013ecc:	63fb      	str	r3, [r7, #60]	; 0x3c
				mem_set(dir, 0, SS(fs));
 8013ece:	68bb      	ldr	r3, [r7, #8]
 8013ed0:	899b      	ldrh	r3, [r3, #12]
 8013ed2:	461a      	mov	r2, r3
 8013ed4:	2100      	movs	r1, #0
 8013ed6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013ed8:	f7fd f91d 	bl	8011116 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8013edc:	220b      	movs	r2, #11
 8013ede:	2120      	movs	r1, #32
 8013ee0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013ee2:	f7fd f918 	bl	8011116 <mem_set>
					dir[DIR_Name] = '.';
 8013ee6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013ee8:	222e      	movs	r2, #46	; 0x2e
 8013eea:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8013eec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013eee:	330b      	adds	r3, #11
 8013ef0:	2210      	movs	r2, #16
 8013ef2:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8013ef4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013ef6:	3316      	adds	r3, #22
 8013ef8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013efa:	4618      	mov	r0, r3
 8013efc:	f7fd f8be 	bl	801107c <st_dword>
					st_clust(fs, dir, dcl);
 8013f00:	68bb      	ldr	r3, [r7, #8]
 8013f02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013f04:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013f06:	4618      	mov	r0, r3
 8013f08:	f7fe f8b0 	bl	801206c <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8013f0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013f0e:	3320      	adds	r3, #32
 8013f10:	2220      	movs	r2, #32
 8013f12:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013f14:	4618      	mov	r0, r3
 8013f16:	f7fd f8dd 	bl	80110d4 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 8013f1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013f1c:	3321      	adds	r3, #33	; 0x21
 8013f1e:	222e      	movs	r2, #46	; 0x2e
 8013f20:	701a      	strb	r2, [r3, #0]
 8013f22:	697b      	ldr	r3, [r7, #20]
 8013f24:	64bb      	str	r3, [r7, #72]	; 0x48
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 8013f26:	68bb      	ldr	r3, [r7, #8]
 8013f28:	781b      	ldrb	r3, [r3, #0]
 8013f2a:	2b03      	cmp	r3, #3
 8013f2c:	d106      	bne.n	8013f3c <f_mkdir+0x15c>
 8013f2e:	68bb      	ldr	r3, [r7, #8]
 8013f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013f32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013f34:	429a      	cmp	r2, r3
 8013f36:	d101      	bne.n	8013f3c <f_mkdir+0x15c>
 8013f38:	2300      	movs	r3, #0
 8013f3a:	64bb      	str	r3, [r7, #72]	; 0x48
					st_clust(fs, dir + SZDIRE, pcl);
 8013f3c:	68b8      	ldr	r0, [r7, #8]
 8013f3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013f40:	3320      	adds	r3, #32
 8013f42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013f44:	4619      	mov	r1, r3
 8013f46:	f7fe f891 	bl	801206c <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8013f4a:	68bb      	ldr	r3, [r7, #8]
 8013f4c:	895b      	ldrh	r3, [r3, #10]
 8013f4e:	653b      	str	r3, [r7, #80]	; 0x50
 8013f50:	e01c      	b.n	8013f8c <f_mkdir+0x1ac>
					fs->winsect = dsc++;
 8013f52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013f54:	1c5a      	adds	r2, r3, #1
 8013f56:	64fa      	str	r2, [r7, #76]	; 0x4c
 8013f58:	68ba      	ldr	r2, [r7, #8]
 8013f5a:	6353      	str	r3, [r2, #52]	; 0x34
					fs->wflag = 1;
 8013f5c:	68bb      	ldr	r3, [r7, #8]
 8013f5e:	2201      	movs	r2, #1
 8013f60:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8013f62:	68bb      	ldr	r3, [r7, #8]
 8013f64:	4618      	mov	r0, r3
 8013f66:	f7fd fa9f 	bl	80114a8 <sync_window>
 8013f6a:	4603      	mov	r3, r0
 8013f6c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					if (res != FR_OK) break;
 8013f70:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013f74:	2b00      	cmp	r3, #0
 8013f76:	d10d      	bne.n	8013f94 <f_mkdir+0x1b4>
					mem_set(dir, 0, SS(fs));
 8013f78:	68bb      	ldr	r3, [r7, #8]
 8013f7a:	899b      	ldrh	r3, [r3, #12]
 8013f7c:	461a      	mov	r2, r3
 8013f7e:	2100      	movs	r1, #0
 8013f80:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013f82:	f7fd f8c8 	bl	8011116 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8013f86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013f88:	3b01      	subs	r3, #1
 8013f8a:	653b      	str	r3, [r7, #80]	; 0x50
 8013f8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013f8e:	2b00      	cmp	r3, #0
 8013f90:	d1df      	bne.n	8013f52 <f_mkdir+0x172>
 8013f92:	e000      	b.n	8013f96 <f_mkdir+0x1b6>
					if (res != FR_OK) break;
 8013f94:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8013f96:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013f9a:	2b00      	cmp	r3, #0
 8013f9c:	d107      	bne.n	8013fae <f_mkdir+0x1ce>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8013f9e:	f107 030c 	add.w	r3, r7, #12
 8013fa2:	4618      	mov	r0, r3
 8013fa4:	f7fe f934 	bl	8012210 <dir_register>
 8013fa8:	4603      	mov	r3, r0
 8013faa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}
			if (res == FR_OK) {
 8013fae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013fb2:	2b00      	cmp	r3, #0
 8013fb4:	d120      	bne.n	8013ff8 <f_mkdir+0x218>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8013fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8013fba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013fbc:	3316      	adds	r3, #22
 8013fbe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013fc0:	4618      	mov	r0, r3
 8013fc2:	f7fd f85b 	bl	801107c <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8013fc6:	68bb      	ldr	r3, [r7, #8]
 8013fc8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013fca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013fcc:	4618      	mov	r0, r3
 8013fce:	f7fe f84d 	bl	801206c <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8013fd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013fd4:	330b      	adds	r3, #11
 8013fd6:	2210      	movs	r2, #16
 8013fd8:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8013fda:	68bb      	ldr	r3, [r7, #8]
 8013fdc:	2201      	movs	r2, #1
 8013fde:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8013fe0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013fe4:	2b00      	cmp	r3, #0
 8013fe6:	d10e      	bne.n	8014006 <f_mkdir+0x226>
					res = sync_fs(fs);
 8013fe8:	68bb      	ldr	r3, [r7, #8]
 8013fea:	4618      	mov	r0, r3
 8013fec:	f7fd face 	bl	801158c <sync_fs>
 8013ff0:	4603      	mov	r3, r0
 8013ff2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8013ff6:	e006      	b.n	8014006 <f_mkdir+0x226>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8013ff8:	f107 030c 	add.w	r3, r7, #12
 8013ffc:	2200      	movs	r2, #0
 8013ffe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8014000:	4618      	mov	r0, r3
 8014002:	f7fd fd39 	bl	8011a78 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8014006:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
}
 801400a:	4618      	mov	r0, r3
 801400c:	3758      	adds	r7, #88	; 0x58
 801400e:	46bd      	mov	sp, r7
 8014010:	bd80      	pop	{r7, pc}
 8014012:	bf00      	nop
 8014014:	274a0000 	.word	0x274a0000

08014018 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8014018:	b580      	push	{r7, lr}
 801401a:	b088      	sub	sp, #32
 801401c:	af00      	add	r7, sp, #0
 801401e:	60f8      	str	r0, [r7, #12]
 8014020:	60b9      	str	r1, [r7, #8]
 8014022:	607a      	str	r2, [r7, #4]
	int n = 0;
 8014024:	2300      	movs	r3, #0
 8014026:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8014028:	68fb      	ldr	r3, [r7, #12]
 801402a:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 801402c:	e017      	b.n	801405e <f_gets+0x46>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 801402e:	f107 0310 	add.w	r3, r7, #16
 8014032:	f107 0114 	add.w	r1, r7, #20
 8014036:	2201      	movs	r2, #1
 8014038:	6878      	ldr	r0, [r7, #4]
 801403a:	f7ff f803 	bl	8013044 <f_read>
		if (rc != 1) break;
 801403e:	693b      	ldr	r3, [r7, #16]
 8014040:	2b01      	cmp	r3, #1
 8014042:	d112      	bne.n	801406a <f_gets+0x52>
		c = s[0];
 8014044:	7d3b      	ldrb	r3, [r7, #20]
 8014046:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
		*p++ = c;
 8014048:	69bb      	ldr	r3, [r7, #24]
 801404a:	1c5a      	adds	r2, r3, #1
 801404c:	61ba      	str	r2, [r7, #24]
 801404e:	7dfa      	ldrb	r2, [r7, #23]
 8014050:	701a      	strb	r2, [r3, #0]
		n++;
 8014052:	69fb      	ldr	r3, [r7, #28]
 8014054:	3301      	adds	r3, #1
 8014056:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8014058:	7dfb      	ldrb	r3, [r7, #23]
 801405a:	2b0a      	cmp	r3, #10
 801405c:	d007      	beq.n	801406e <f_gets+0x56>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 801405e:	68bb      	ldr	r3, [r7, #8]
 8014060:	3b01      	subs	r3, #1
 8014062:	69fa      	ldr	r2, [r7, #28]
 8014064:	429a      	cmp	r2, r3
 8014066:	dbe2      	blt.n	801402e <f_gets+0x16>
 8014068:	e002      	b.n	8014070 <f_gets+0x58>
		if (rc != 1) break;
 801406a:	bf00      	nop
 801406c:	e000      	b.n	8014070 <f_gets+0x58>
		if (c == '\n') break;		/* Break on EOL */
 801406e:	bf00      	nop
	}
	*p = 0;
 8014070:	69bb      	ldr	r3, [r7, #24]
 8014072:	2200      	movs	r2, #0
 8014074:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8014076:	69fb      	ldr	r3, [r7, #28]
 8014078:	2b00      	cmp	r3, #0
 801407a:	d001      	beq.n	8014080 <f_gets+0x68>
 801407c:	68fb      	ldr	r3, [r7, #12]
 801407e:	e000      	b.n	8014082 <f_gets+0x6a>
 8014080:	2300      	movs	r3, #0
}
 8014082:	4618      	mov	r0, r3
 8014084:	3720      	adds	r7, #32
 8014086:	46bd      	mov	sp, r7
 8014088:	bd80      	pop	{r7, pc}
	...

0801408c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801408c:	b480      	push	{r7}
 801408e:	b087      	sub	sp, #28
 8014090:	af00      	add	r7, sp, #0
 8014092:	60f8      	str	r0, [r7, #12]
 8014094:	60b9      	str	r1, [r7, #8]
 8014096:	4613      	mov	r3, r2
 8014098:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801409a:	2301      	movs	r3, #1
 801409c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801409e:	2300      	movs	r3, #0
 80140a0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80140a2:	4b1f      	ldr	r3, [pc, #124]	; (8014120 <FATFS_LinkDriverEx+0x94>)
 80140a4:	7a5b      	ldrb	r3, [r3, #9]
 80140a6:	b2db      	uxtb	r3, r3
 80140a8:	2b00      	cmp	r3, #0
 80140aa:	d131      	bne.n	8014110 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80140ac:	4b1c      	ldr	r3, [pc, #112]	; (8014120 <FATFS_LinkDriverEx+0x94>)
 80140ae:	7a5b      	ldrb	r3, [r3, #9]
 80140b0:	b2db      	uxtb	r3, r3
 80140b2:	461a      	mov	r2, r3
 80140b4:	4b1a      	ldr	r3, [pc, #104]	; (8014120 <FATFS_LinkDriverEx+0x94>)
 80140b6:	2100      	movs	r1, #0
 80140b8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80140ba:	4b19      	ldr	r3, [pc, #100]	; (8014120 <FATFS_LinkDriverEx+0x94>)
 80140bc:	7a5b      	ldrb	r3, [r3, #9]
 80140be:	b2db      	uxtb	r3, r3
 80140c0:	4a17      	ldr	r2, [pc, #92]	; (8014120 <FATFS_LinkDriverEx+0x94>)
 80140c2:	009b      	lsls	r3, r3, #2
 80140c4:	4413      	add	r3, r2
 80140c6:	68fa      	ldr	r2, [r7, #12]
 80140c8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80140ca:	4b15      	ldr	r3, [pc, #84]	; (8014120 <FATFS_LinkDriverEx+0x94>)
 80140cc:	7a5b      	ldrb	r3, [r3, #9]
 80140ce:	b2db      	uxtb	r3, r3
 80140d0:	461a      	mov	r2, r3
 80140d2:	4b13      	ldr	r3, [pc, #76]	; (8014120 <FATFS_LinkDriverEx+0x94>)
 80140d4:	4413      	add	r3, r2
 80140d6:	79fa      	ldrb	r2, [r7, #7]
 80140d8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80140da:	4b11      	ldr	r3, [pc, #68]	; (8014120 <FATFS_LinkDriverEx+0x94>)
 80140dc:	7a5b      	ldrb	r3, [r3, #9]
 80140de:	b2db      	uxtb	r3, r3
 80140e0:	1c5a      	adds	r2, r3, #1
 80140e2:	b2d1      	uxtb	r1, r2
 80140e4:	4a0e      	ldr	r2, [pc, #56]	; (8014120 <FATFS_LinkDriverEx+0x94>)
 80140e6:	7251      	strb	r1, [r2, #9]
 80140e8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80140ea:	7dbb      	ldrb	r3, [r7, #22]
 80140ec:	3330      	adds	r3, #48	; 0x30
 80140ee:	b2da      	uxtb	r2, r3
 80140f0:	68bb      	ldr	r3, [r7, #8]
 80140f2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80140f4:	68bb      	ldr	r3, [r7, #8]
 80140f6:	3301      	adds	r3, #1
 80140f8:	223a      	movs	r2, #58	; 0x3a
 80140fa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80140fc:	68bb      	ldr	r3, [r7, #8]
 80140fe:	3302      	adds	r3, #2
 8014100:	222f      	movs	r2, #47	; 0x2f
 8014102:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8014104:	68bb      	ldr	r3, [r7, #8]
 8014106:	3303      	adds	r3, #3
 8014108:	2200      	movs	r2, #0
 801410a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801410c:	2300      	movs	r3, #0
 801410e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8014110:	7dfb      	ldrb	r3, [r7, #23]
}
 8014112:	4618      	mov	r0, r3
 8014114:	371c      	adds	r7, #28
 8014116:	46bd      	mov	sp, r7
 8014118:	f85d 7b04 	ldr.w	r7, [sp], #4
 801411c:	4770      	bx	lr
 801411e:	bf00      	nop
 8014120:	20042308 	.word	0x20042308

08014124 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8014124:	b580      	push	{r7, lr}
 8014126:	b082      	sub	sp, #8
 8014128:	af00      	add	r7, sp, #0
 801412a:	6078      	str	r0, [r7, #4]
 801412c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801412e:	2200      	movs	r2, #0
 8014130:	6839      	ldr	r1, [r7, #0]
 8014132:	6878      	ldr	r0, [r7, #4]
 8014134:	f7ff ffaa 	bl	801408c <FATFS_LinkDriverEx>
 8014138:	4603      	mov	r3, r0
}
 801413a:	4618      	mov	r0, r3
 801413c:	3708      	adds	r7, #8
 801413e:	46bd      	mov	sp, r7
 8014140:	bd80      	pop	{r7, pc}

08014142 <__cxa_guard_acquire>:
 8014142:	6803      	ldr	r3, [r0, #0]
 8014144:	07db      	lsls	r3, r3, #31
 8014146:	d406      	bmi.n	8014156 <__cxa_guard_acquire+0x14>
 8014148:	7843      	ldrb	r3, [r0, #1]
 801414a:	b103      	cbz	r3, 801414e <__cxa_guard_acquire+0xc>
 801414c:	deff      	udf	#255	; 0xff
 801414e:	2301      	movs	r3, #1
 8014150:	7043      	strb	r3, [r0, #1]
 8014152:	4618      	mov	r0, r3
 8014154:	4770      	bx	lr
 8014156:	2000      	movs	r0, #0
 8014158:	4770      	bx	lr

0801415a <__cxa_guard_release>:
 801415a:	2301      	movs	r3, #1
 801415c:	6003      	str	r3, [r0, #0]
 801415e:	4770      	bx	lr

08014160 <cos>:
 8014160:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014162:	ec51 0b10 	vmov	r0, r1, d0
 8014166:	4a1e      	ldr	r2, [pc, #120]	; (80141e0 <cos+0x80>)
 8014168:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801416c:	4293      	cmp	r3, r2
 801416e:	dc06      	bgt.n	801417e <cos+0x1e>
 8014170:	ed9f 1b19 	vldr	d1, [pc, #100]	; 80141d8 <cos+0x78>
 8014174:	f000 fa74 	bl	8014660 <__kernel_cos>
 8014178:	ec51 0b10 	vmov	r0, r1, d0
 801417c:	e007      	b.n	801418e <cos+0x2e>
 801417e:	4a19      	ldr	r2, [pc, #100]	; (80141e4 <cos+0x84>)
 8014180:	4293      	cmp	r3, r2
 8014182:	dd09      	ble.n	8014198 <cos+0x38>
 8014184:	ee10 2a10 	vmov	r2, s0
 8014188:	460b      	mov	r3, r1
 801418a:	f7ec f895 	bl	80002b8 <__aeabi_dsub>
 801418e:	ec41 0b10 	vmov	d0, r0, r1
 8014192:	b005      	add	sp, #20
 8014194:	f85d fb04 	ldr.w	pc, [sp], #4
 8014198:	4668      	mov	r0, sp
 801419a:	f000 f86d 	bl	8014278 <__ieee754_rem_pio2>
 801419e:	f000 0003 	and.w	r0, r0, #3
 80141a2:	2801      	cmp	r0, #1
 80141a4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80141a8:	ed9d 0b00 	vldr	d0, [sp]
 80141ac:	d007      	beq.n	80141be <cos+0x5e>
 80141ae:	2802      	cmp	r0, #2
 80141b0:	d00e      	beq.n	80141d0 <cos+0x70>
 80141b2:	2800      	cmp	r0, #0
 80141b4:	d0de      	beq.n	8014174 <cos+0x14>
 80141b6:	2001      	movs	r0, #1
 80141b8:	f000 fe5a 	bl	8014e70 <__kernel_sin>
 80141bc:	e7dc      	b.n	8014178 <cos+0x18>
 80141be:	f000 fe57 	bl	8014e70 <__kernel_sin>
 80141c2:	ec53 2b10 	vmov	r2, r3, d0
 80141c6:	ee10 0a10 	vmov	r0, s0
 80141ca:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80141ce:	e7de      	b.n	801418e <cos+0x2e>
 80141d0:	f000 fa46 	bl	8014660 <__kernel_cos>
 80141d4:	e7f5      	b.n	80141c2 <cos+0x62>
 80141d6:	bf00      	nop
	...
 80141e0:	3fe921fb 	.word	0x3fe921fb
 80141e4:	7fefffff 	.word	0x7fefffff

080141e8 <sin>:
 80141e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80141ea:	ec51 0b10 	vmov	r0, r1, d0
 80141ee:	4a20      	ldr	r2, [pc, #128]	; (8014270 <sin+0x88>)
 80141f0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80141f4:	4293      	cmp	r3, r2
 80141f6:	dc07      	bgt.n	8014208 <sin+0x20>
 80141f8:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8014268 <sin+0x80>
 80141fc:	2000      	movs	r0, #0
 80141fe:	f000 fe37 	bl	8014e70 <__kernel_sin>
 8014202:	ec51 0b10 	vmov	r0, r1, d0
 8014206:	e007      	b.n	8014218 <sin+0x30>
 8014208:	4a1a      	ldr	r2, [pc, #104]	; (8014274 <sin+0x8c>)
 801420a:	4293      	cmp	r3, r2
 801420c:	dd09      	ble.n	8014222 <sin+0x3a>
 801420e:	ee10 2a10 	vmov	r2, s0
 8014212:	460b      	mov	r3, r1
 8014214:	f7ec f850 	bl	80002b8 <__aeabi_dsub>
 8014218:	ec41 0b10 	vmov	d0, r0, r1
 801421c:	b005      	add	sp, #20
 801421e:	f85d fb04 	ldr.w	pc, [sp], #4
 8014222:	4668      	mov	r0, sp
 8014224:	f000 f828 	bl	8014278 <__ieee754_rem_pio2>
 8014228:	f000 0003 	and.w	r0, r0, #3
 801422c:	2801      	cmp	r0, #1
 801422e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8014232:	ed9d 0b00 	vldr	d0, [sp]
 8014236:	d004      	beq.n	8014242 <sin+0x5a>
 8014238:	2802      	cmp	r0, #2
 801423a:	d005      	beq.n	8014248 <sin+0x60>
 801423c:	b970      	cbnz	r0, 801425c <sin+0x74>
 801423e:	2001      	movs	r0, #1
 8014240:	e7dd      	b.n	80141fe <sin+0x16>
 8014242:	f000 fa0d 	bl	8014660 <__kernel_cos>
 8014246:	e7dc      	b.n	8014202 <sin+0x1a>
 8014248:	2001      	movs	r0, #1
 801424a:	f000 fe11 	bl	8014e70 <__kernel_sin>
 801424e:	ec53 2b10 	vmov	r2, r3, d0
 8014252:	ee10 0a10 	vmov	r0, s0
 8014256:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801425a:	e7dd      	b.n	8014218 <sin+0x30>
 801425c:	f000 fa00 	bl	8014660 <__kernel_cos>
 8014260:	e7f5      	b.n	801424e <sin+0x66>
 8014262:	bf00      	nop
 8014264:	f3af 8000 	nop.w
	...
 8014270:	3fe921fb 	.word	0x3fe921fb
 8014274:	7fefffff 	.word	0x7fefffff

08014278 <__ieee754_rem_pio2>:
 8014278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801427c:	ec57 6b10 	vmov	r6, r7, d0
 8014280:	4bc3      	ldr	r3, [pc, #780]	; (8014590 <__ieee754_rem_pio2+0x318>)
 8014282:	b08d      	sub	sp, #52	; 0x34
 8014284:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8014288:	4598      	cmp	r8, r3
 801428a:	4604      	mov	r4, r0
 801428c:	9704      	str	r7, [sp, #16]
 801428e:	dc07      	bgt.n	80142a0 <__ieee754_rem_pio2+0x28>
 8014290:	2200      	movs	r2, #0
 8014292:	2300      	movs	r3, #0
 8014294:	ed84 0b00 	vstr	d0, [r4]
 8014298:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801429c:	2500      	movs	r5, #0
 801429e:	e027      	b.n	80142f0 <__ieee754_rem_pio2+0x78>
 80142a0:	4bbc      	ldr	r3, [pc, #752]	; (8014594 <__ieee754_rem_pio2+0x31c>)
 80142a2:	4598      	cmp	r8, r3
 80142a4:	dc75      	bgt.n	8014392 <__ieee754_rem_pio2+0x11a>
 80142a6:	9b04      	ldr	r3, [sp, #16]
 80142a8:	4dbb      	ldr	r5, [pc, #748]	; (8014598 <__ieee754_rem_pio2+0x320>)
 80142aa:	2b00      	cmp	r3, #0
 80142ac:	ee10 0a10 	vmov	r0, s0
 80142b0:	a3a9      	add	r3, pc, #676	; (adr r3, 8014558 <__ieee754_rem_pio2+0x2e0>)
 80142b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142b6:	4639      	mov	r1, r7
 80142b8:	dd36      	ble.n	8014328 <__ieee754_rem_pio2+0xb0>
 80142ba:	f7eb fffd 	bl	80002b8 <__aeabi_dsub>
 80142be:	45a8      	cmp	r8, r5
 80142c0:	4606      	mov	r6, r0
 80142c2:	460f      	mov	r7, r1
 80142c4:	d018      	beq.n	80142f8 <__ieee754_rem_pio2+0x80>
 80142c6:	a3a6      	add	r3, pc, #664	; (adr r3, 8014560 <__ieee754_rem_pio2+0x2e8>)
 80142c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142cc:	f7eb fff4 	bl	80002b8 <__aeabi_dsub>
 80142d0:	4602      	mov	r2, r0
 80142d2:	460b      	mov	r3, r1
 80142d4:	e9c4 2300 	strd	r2, r3, [r4]
 80142d8:	4630      	mov	r0, r6
 80142da:	4639      	mov	r1, r7
 80142dc:	f7eb ffec 	bl	80002b8 <__aeabi_dsub>
 80142e0:	a39f      	add	r3, pc, #636	; (adr r3, 8014560 <__ieee754_rem_pio2+0x2e8>)
 80142e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142e6:	f7eb ffe7 	bl	80002b8 <__aeabi_dsub>
 80142ea:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80142ee:	2501      	movs	r5, #1
 80142f0:	4628      	mov	r0, r5
 80142f2:	b00d      	add	sp, #52	; 0x34
 80142f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80142f8:	a39b      	add	r3, pc, #620	; (adr r3, 8014568 <__ieee754_rem_pio2+0x2f0>)
 80142fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80142fe:	f7eb ffdb 	bl	80002b8 <__aeabi_dsub>
 8014302:	a39b      	add	r3, pc, #620	; (adr r3, 8014570 <__ieee754_rem_pio2+0x2f8>)
 8014304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014308:	4606      	mov	r6, r0
 801430a:	460f      	mov	r7, r1
 801430c:	f7eb ffd4 	bl	80002b8 <__aeabi_dsub>
 8014310:	4602      	mov	r2, r0
 8014312:	460b      	mov	r3, r1
 8014314:	e9c4 2300 	strd	r2, r3, [r4]
 8014318:	4630      	mov	r0, r6
 801431a:	4639      	mov	r1, r7
 801431c:	f7eb ffcc 	bl	80002b8 <__aeabi_dsub>
 8014320:	a393      	add	r3, pc, #588	; (adr r3, 8014570 <__ieee754_rem_pio2+0x2f8>)
 8014322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014326:	e7de      	b.n	80142e6 <__ieee754_rem_pio2+0x6e>
 8014328:	f7eb ffc8 	bl	80002bc <__adddf3>
 801432c:	45a8      	cmp	r8, r5
 801432e:	4606      	mov	r6, r0
 8014330:	460f      	mov	r7, r1
 8014332:	d016      	beq.n	8014362 <__ieee754_rem_pio2+0xea>
 8014334:	a38a      	add	r3, pc, #552	; (adr r3, 8014560 <__ieee754_rem_pio2+0x2e8>)
 8014336:	e9d3 2300 	ldrd	r2, r3, [r3]
 801433a:	f7eb ffbf 	bl	80002bc <__adddf3>
 801433e:	4602      	mov	r2, r0
 8014340:	460b      	mov	r3, r1
 8014342:	e9c4 2300 	strd	r2, r3, [r4]
 8014346:	4630      	mov	r0, r6
 8014348:	4639      	mov	r1, r7
 801434a:	f7eb ffb5 	bl	80002b8 <__aeabi_dsub>
 801434e:	a384      	add	r3, pc, #528	; (adr r3, 8014560 <__ieee754_rem_pio2+0x2e8>)
 8014350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014354:	f7eb ffb2 	bl	80002bc <__adddf3>
 8014358:	f04f 35ff 	mov.w	r5, #4294967295
 801435c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8014360:	e7c6      	b.n	80142f0 <__ieee754_rem_pio2+0x78>
 8014362:	a381      	add	r3, pc, #516	; (adr r3, 8014568 <__ieee754_rem_pio2+0x2f0>)
 8014364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014368:	f7eb ffa8 	bl	80002bc <__adddf3>
 801436c:	a380      	add	r3, pc, #512	; (adr r3, 8014570 <__ieee754_rem_pio2+0x2f8>)
 801436e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014372:	4606      	mov	r6, r0
 8014374:	460f      	mov	r7, r1
 8014376:	f7eb ffa1 	bl	80002bc <__adddf3>
 801437a:	4602      	mov	r2, r0
 801437c:	460b      	mov	r3, r1
 801437e:	e9c4 2300 	strd	r2, r3, [r4]
 8014382:	4630      	mov	r0, r6
 8014384:	4639      	mov	r1, r7
 8014386:	f7eb ff97 	bl	80002b8 <__aeabi_dsub>
 801438a:	a379      	add	r3, pc, #484	; (adr r3, 8014570 <__ieee754_rem_pio2+0x2f8>)
 801438c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014390:	e7e0      	b.n	8014354 <__ieee754_rem_pio2+0xdc>
 8014392:	4b82      	ldr	r3, [pc, #520]	; (801459c <__ieee754_rem_pio2+0x324>)
 8014394:	4598      	cmp	r8, r3
 8014396:	f300 80d0 	bgt.w	801453a <__ieee754_rem_pio2+0x2c2>
 801439a:	f000 fe23 	bl	8014fe4 <fabs>
 801439e:	ec57 6b10 	vmov	r6, r7, d0
 80143a2:	ee10 0a10 	vmov	r0, s0
 80143a6:	a374      	add	r3, pc, #464	; (adr r3, 8014578 <__ieee754_rem_pio2+0x300>)
 80143a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143ac:	4639      	mov	r1, r7
 80143ae:	f7ec f93b 	bl	8000628 <__aeabi_dmul>
 80143b2:	2200      	movs	r2, #0
 80143b4:	4b7a      	ldr	r3, [pc, #488]	; (80145a0 <__ieee754_rem_pio2+0x328>)
 80143b6:	f7eb ff81 	bl	80002bc <__adddf3>
 80143ba:	f7ec fbe5 	bl	8000b88 <__aeabi_d2iz>
 80143be:	4605      	mov	r5, r0
 80143c0:	f7ec f8c8 	bl	8000554 <__aeabi_i2d>
 80143c4:	a364      	add	r3, pc, #400	; (adr r3, 8014558 <__ieee754_rem_pio2+0x2e0>)
 80143c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80143ce:	f7ec f92b 	bl	8000628 <__aeabi_dmul>
 80143d2:	4602      	mov	r2, r0
 80143d4:	460b      	mov	r3, r1
 80143d6:	4630      	mov	r0, r6
 80143d8:	4639      	mov	r1, r7
 80143da:	f7eb ff6d 	bl	80002b8 <__aeabi_dsub>
 80143de:	a360      	add	r3, pc, #384	; (adr r3, 8014560 <__ieee754_rem_pio2+0x2e8>)
 80143e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143e4:	4682      	mov	sl, r0
 80143e6:	468b      	mov	fp, r1
 80143e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80143ec:	f7ec f91c 	bl	8000628 <__aeabi_dmul>
 80143f0:	2d1f      	cmp	r5, #31
 80143f2:	4606      	mov	r6, r0
 80143f4:	460f      	mov	r7, r1
 80143f6:	dc0c      	bgt.n	8014412 <__ieee754_rem_pio2+0x19a>
 80143f8:	1e6a      	subs	r2, r5, #1
 80143fa:	4b6a      	ldr	r3, [pc, #424]	; (80145a4 <__ieee754_rem_pio2+0x32c>)
 80143fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014400:	4543      	cmp	r3, r8
 8014402:	d006      	beq.n	8014412 <__ieee754_rem_pio2+0x19a>
 8014404:	4632      	mov	r2, r6
 8014406:	463b      	mov	r3, r7
 8014408:	4650      	mov	r0, sl
 801440a:	4659      	mov	r1, fp
 801440c:	f7eb ff54 	bl	80002b8 <__aeabi_dsub>
 8014410:	e00e      	b.n	8014430 <__ieee754_rem_pio2+0x1b8>
 8014412:	4632      	mov	r2, r6
 8014414:	463b      	mov	r3, r7
 8014416:	4650      	mov	r0, sl
 8014418:	4659      	mov	r1, fp
 801441a:	f7eb ff4d 	bl	80002b8 <__aeabi_dsub>
 801441e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8014422:	9305      	str	r3, [sp, #20]
 8014424:	9a05      	ldr	r2, [sp, #20]
 8014426:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801442a:	1ad3      	subs	r3, r2, r3
 801442c:	2b10      	cmp	r3, #16
 801442e:	dc02      	bgt.n	8014436 <__ieee754_rem_pio2+0x1be>
 8014430:	e9c4 0100 	strd	r0, r1, [r4]
 8014434:	e039      	b.n	80144aa <__ieee754_rem_pio2+0x232>
 8014436:	a34c      	add	r3, pc, #304	; (adr r3, 8014568 <__ieee754_rem_pio2+0x2f0>)
 8014438:	e9d3 2300 	ldrd	r2, r3, [r3]
 801443c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014440:	f7ec f8f2 	bl	8000628 <__aeabi_dmul>
 8014444:	4606      	mov	r6, r0
 8014446:	460f      	mov	r7, r1
 8014448:	4602      	mov	r2, r0
 801444a:	460b      	mov	r3, r1
 801444c:	4650      	mov	r0, sl
 801444e:	4659      	mov	r1, fp
 8014450:	f7eb ff32 	bl	80002b8 <__aeabi_dsub>
 8014454:	4602      	mov	r2, r0
 8014456:	460b      	mov	r3, r1
 8014458:	4680      	mov	r8, r0
 801445a:	4689      	mov	r9, r1
 801445c:	4650      	mov	r0, sl
 801445e:	4659      	mov	r1, fp
 8014460:	f7eb ff2a 	bl	80002b8 <__aeabi_dsub>
 8014464:	4632      	mov	r2, r6
 8014466:	463b      	mov	r3, r7
 8014468:	f7eb ff26 	bl	80002b8 <__aeabi_dsub>
 801446c:	a340      	add	r3, pc, #256	; (adr r3, 8014570 <__ieee754_rem_pio2+0x2f8>)
 801446e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014472:	4606      	mov	r6, r0
 8014474:	460f      	mov	r7, r1
 8014476:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801447a:	f7ec f8d5 	bl	8000628 <__aeabi_dmul>
 801447e:	4632      	mov	r2, r6
 8014480:	463b      	mov	r3, r7
 8014482:	f7eb ff19 	bl	80002b8 <__aeabi_dsub>
 8014486:	4602      	mov	r2, r0
 8014488:	460b      	mov	r3, r1
 801448a:	4606      	mov	r6, r0
 801448c:	460f      	mov	r7, r1
 801448e:	4640      	mov	r0, r8
 8014490:	4649      	mov	r1, r9
 8014492:	f7eb ff11 	bl	80002b8 <__aeabi_dsub>
 8014496:	9a05      	ldr	r2, [sp, #20]
 8014498:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801449c:	1ad3      	subs	r3, r2, r3
 801449e:	2b31      	cmp	r3, #49	; 0x31
 80144a0:	dc20      	bgt.n	80144e4 <__ieee754_rem_pio2+0x26c>
 80144a2:	e9c4 0100 	strd	r0, r1, [r4]
 80144a6:	46c2      	mov	sl, r8
 80144a8:	46cb      	mov	fp, r9
 80144aa:	e9d4 8900 	ldrd	r8, r9, [r4]
 80144ae:	4650      	mov	r0, sl
 80144b0:	4642      	mov	r2, r8
 80144b2:	464b      	mov	r3, r9
 80144b4:	4659      	mov	r1, fp
 80144b6:	f7eb feff 	bl	80002b8 <__aeabi_dsub>
 80144ba:	463b      	mov	r3, r7
 80144bc:	4632      	mov	r2, r6
 80144be:	f7eb fefb 	bl	80002b8 <__aeabi_dsub>
 80144c2:	9b04      	ldr	r3, [sp, #16]
 80144c4:	2b00      	cmp	r3, #0
 80144c6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80144ca:	f6bf af11 	bge.w	80142f0 <__ieee754_rem_pio2+0x78>
 80144ce:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80144d2:	6063      	str	r3, [r4, #4]
 80144d4:	f8c4 8000 	str.w	r8, [r4]
 80144d8:	60a0      	str	r0, [r4, #8]
 80144da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80144de:	60e3      	str	r3, [r4, #12]
 80144e0:	426d      	negs	r5, r5
 80144e2:	e705      	b.n	80142f0 <__ieee754_rem_pio2+0x78>
 80144e4:	a326      	add	r3, pc, #152	; (adr r3, 8014580 <__ieee754_rem_pio2+0x308>)
 80144e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80144ee:	f7ec f89b 	bl	8000628 <__aeabi_dmul>
 80144f2:	4606      	mov	r6, r0
 80144f4:	460f      	mov	r7, r1
 80144f6:	4602      	mov	r2, r0
 80144f8:	460b      	mov	r3, r1
 80144fa:	4640      	mov	r0, r8
 80144fc:	4649      	mov	r1, r9
 80144fe:	f7eb fedb 	bl	80002b8 <__aeabi_dsub>
 8014502:	4602      	mov	r2, r0
 8014504:	460b      	mov	r3, r1
 8014506:	4682      	mov	sl, r0
 8014508:	468b      	mov	fp, r1
 801450a:	4640      	mov	r0, r8
 801450c:	4649      	mov	r1, r9
 801450e:	f7eb fed3 	bl	80002b8 <__aeabi_dsub>
 8014512:	4632      	mov	r2, r6
 8014514:	463b      	mov	r3, r7
 8014516:	f7eb fecf 	bl	80002b8 <__aeabi_dsub>
 801451a:	a31b      	add	r3, pc, #108	; (adr r3, 8014588 <__ieee754_rem_pio2+0x310>)
 801451c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014520:	4606      	mov	r6, r0
 8014522:	460f      	mov	r7, r1
 8014524:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014528:	f7ec f87e 	bl	8000628 <__aeabi_dmul>
 801452c:	4632      	mov	r2, r6
 801452e:	463b      	mov	r3, r7
 8014530:	f7eb fec2 	bl	80002b8 <__aeabi_dsub>
 8014534:	4606      	mov	r6, r0
 8014536:	460f      	mov	r7, r1
 8014538:	e764      	b.n	8014404 <__ieee754_rem_pio2+0x18c>
 801453a:	4b1b      	ldr	r3, [pc, #108]	; (80145a8 <__ieee754_rem_pio2+0x330>)
 801453c:	4598      	cmp	r8, r3
 801453e:	dd35      	ble.n	80145ac <__ieee754_rem_pio2+0x334>
 8014540:	ee10 2a10 	vmov	r2, s0
 8014544:	463b      	mov	r3, r7
 8014546:	4630      	mov	r0, r6
 8014548:	4639      	mov	r1, r7
 801454a:	f7eb feb5 	bl	80002b8 <__aeabi_dsub>
 801454e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8014552:	e9c4 0100 	strd	r0, r1, [r4]
 8014556:	e6a1      	b.n	801429c <__ieee754_rem_pio2+0x24>
 8014558:	54400000 	.word	0x54400000
 801455c:	3ff921fb 	.word	0x3ff921fb
 8014560:	1a626331 	.word	0x1a626331
 8014564:	3dd0b461 	.word	0x3dd0b461
 8014568:	1a600000 	.word	0x1a600000
 801456c:	3dd0b461 	.word	0x3dd0b461
 8014570:	2e037073 	.word	0x2e037073
 8014574:	3ba3198a 	.word	0x3ba3198a
 8014578:	6dc9c883 	.word	0x6dc9c883
 801457c:	3fe45f30 	.word	0x3fe45f30
 8014580:	2e000000 	.word	0x2e000000
 8014584:	3ba3198a 	.word	0x3ba3198a
 8014588:	252049c1 	.word	0x252049c1
 801458c:	397b839a 	.word	0x397b839a
 8014590:	3fe921fb 	.word	0x3fe921fb
 8014594:	4002d97b 	.word	0x4002d97b
 8014598:	3ff921fb 	.word	0x3ff921fb
 801459c:	413921fb 	.word	0x413921fb
 80145a0:	3fe00000 	.word	0x3fe00000
 80145a4:	08019cf8 	.word	0x08019cf8
 80145a8:	7fefffff 	.word	0x7fefffff
 80145ac:	ea4f 5528 	mov.w	r5, r8, asr #20
 80145b0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 80145b4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80145b8:	4630      	mov	r0, r6
 80145ba:	460f      	mov	r7, r1
 80145bc:	f7ec fae4 	bl	8000b88 <__aeabi_d2iz>
 80145c0:	f7eb ffc8 	bl	8000554 <__aeabi_i2d>
 80145c4:	4602      	mov	r2, r0
 80145c6:	460b      	mov	r3, r1
 80145c8:	4630      	mov	r0, r6
 80145ca:	4639      	mov	r1, r7
 80145cc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80145d0:	f7eb fe72 	bl	80002b8 <__aeabi_dsub>
 80145d4:	2200      	movs	r2, #0
 80145d6:	4b1f      	ldr	r3, [pc, #124]	; (8014654 <__ieee754_rem_pio2+0x3dc>)
 80145d8:	f7ec f826 	bl	8000628 <__aeabi_dmul>
 80145dc:	460f      	mov	r7, r1
 80145de:	4606      	mov	r6, r0
 80145e0:	f7ec fad2 	bl	8000b88 <__aeabi_d2iz>
 80145e4:	f7eb ffb6 	bl	8000554 <__aeabi_i2d>
 80145e8:	4602      	mov	r2, r0
 80145ea:	460b      	mov	r3, r1
 80145ec:	4630      	mov	r0, r6
 80145ee:	4639      	mov	r1, r7
 80145f0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80145f4:	f7eb fe60 	bl	80002b8 <__aeabi_dsub>
 80145f8:	2200      	movs	r2, #0
 80145fa:	4b16      	ldr	r3, [pc, #88]	; (8014654 <__ieee754_rem_pio2+0x3dc>)
 80145fc:	f7ec f814 	bl	8000628 <__aeabi_dmul>
 8014600:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8014604:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8014608:	f04f 0803 	mov.w	r8, #3
 801460c:	2600      	movs	r6, #0
 801460e:	2700      	movs	r7, #0
 8014610:	4632      	mov	r2, r6
 8014612:	463b      	mov	r3, r7
 8014614:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8014618:	f108 3aff 	add.w	sl, r8, #4294967295
 801461c:	f7ec fa6c 	bl	8000af8 <__aeabi_dcmpeq>
 8014620:	b9b0      	cbnz	r0, 8014650 <__ieee754_rem_pio2+0x3d8>
 8014622:	4b0d      	ldr	r3, [pc, #52]	; (8014658 <__ieee754_rem_pio2+0x3e0>)
 8014624:	9301      	str	r3, [sp, #4]
 8014626:	2302      	movs	r3, #2
 8014628:	9300      	str	r3, [sp, #0]
 801462a:	462a      	mov	r2, r5
 801462c:	4643      	mov	r3, r8
 801462e:	4621      	mov	r1, r4
 8014630:	a806      	add	r0, sp, #24
 8014632:	f000 f8dd 	bl	80147f0 <__kernel_rem_pio2>
 8014636:	9b04      	ldr	r3, [sp, #16]
 8014638:	2b00      	cmp	r3, #0
 801463a:	4605      	mov	r5, r0
 801463c:	f6bf ae58 	bge.w	80142f0 <__ieee754_rem_pio2+0x78>
 8014640:	6863      	ldr	r3, [r4, #4]
 8014642:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8014646:	6063      	str	r3, [r4, #4]
 8014648:	68e3      	ldr	r3, [r4, #12]
 801464a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801464e:	e746      	b.n	80144de <__ieee754_rem_pio2+0x266>
 8014650:	46d0      	mov	r8, sl
 8014652:	e7dd      	b.n	8014610 <__ieee754_rem_pio2+0x398>
 8014654:	41700000 	.word	0x41700000
 8014658:	08019d78 	.word	0x08019d78
 801465c:	00000000 	.word	0x00000000

08014660 <__kernel_cos>:
 8014660:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014664:	ec59 8b10 	vmov	r8, r9, d0
 8014668:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 801466c:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8014670:	ed2d 8b02 	vpush	{d8}
 8014674:	eeb0 8a41 	vmov.f32	s16, s2
 8014678:	eef0 8a61 	vmov.f32	s17, s3
 801467c:	da07      	bge.n	801468e <__kernel_cos+0x2e>
 801467e:	ee10 0a10 	vmov	r0, s0
 8014682:	4649      	mov	r1, r9
 8014684:	f7ec fa80 	bl	8000b88 <__aeabi_d2iz>
 8014688:	2800      	cmp	r0, #0
 801468a:	f000 8089 	beq.w	80147a0 <__kernel_cos+0x140>
 801468e:	4642      	mov	r2, r8
 8014690:	464b      	mov	r3, r9
 8014692:	4640      	mov	r0, r8
 8014694:	4649      	mov	r1, r9
 8014696:	f7eb ffc7 	bl	8000628 <__aeabi_dmul>
 801469a:	2200      	movs	r2, #0
 801469c:	4b4e      	ldr	r3, [pc, #312]	; (80147d8 <__kernel_cos+0x178>)
 801469e:	4604      	mov	r4, r0
 80146a0:	460d      	mov	r5, r1
 80146a2:	f7eb ffc1 	bl	8000628 <__aeabi_dmul>
 80146a6:	a340      	add	r3, pc, #256	; (adr r3, 80147a8 <__kernel_cos+0x148>)
 80146a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146ac:	4682      	mov	sl, r0
 80146ae:	468b      	mov	fp, r1
 80146b0:	4620      	mov	r0, r4
 80146b2:	4629      	mov	r1, r5
 80146b4:	f7eb ffb8 	bl	8000628 <__aeabi_dmul>
 80146b8:	a33d      	add	r3, pc, #244	; (adr r3, 80147b0 <__kernel_cos+0x150>)
 80146ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146be:	f7eb fdfd 	bl	80002bc <__adddf3>
 80146c2:	4622      	mov	r2, r4
 80146c4:	462b      	mov	r3, r5
 80146c6:	f7eb ffaf 	bl	8000628 <__aeabi_dmul>
 80146ca:	a33b      	add	r3, pc, #236	; (adr r3, 80147b8 <__kernel_cos+0x158>)
 80146cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146d0:	f7eb fdf2 	bl	80002b8 <__aeabi_dsub>
 80146d4:	4622      	mov	r2, r4
 80146d6:	462b      	mov	r3, r5
 80146d8:	f7eb ffa6 	bl	8000628 <__aeabi_dmul>
 80146dc:	a338      	add	r3, pc, #224	; (adr r3, 80147c0 <__kernel_cos+0x160>)
 80146de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146e2:	f7eb fdeb 	bl	80002bc <__adddf3>
 80146e6:	4622      	mov	r2, r4
 80146e8:	462b      	mov	r3, r5
 80146ea:	f7eb ff9d 	bl	8000628 <__aeabi_dmul>
 80146ee:	a336      	add	r3, pc, #216	; (adr r3, 80147c8 <__kernel_cos+0x168>)
 80146f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146f4:	f7eb fde0 	bl	80002b8 <__aeabi_dsub>
 80146f8:	4622      	mov	r2, r4
 80146fa:	462b      	mov	r3, r5
 80146fc:	f7eb ff94 	bl	8000628 <__aeabi_dmul>
 8014700:	a333      	add	r3, pc, #204	; (adr r3, 80147d0 <__kernel_cos+0x170>)
 8014702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014706:	f7eb fdd9 	bl	80002bc <__adddf3>
 801470a:	4622      	mov	r2, r4
 801470c:	462b      	mov	r3, r5
 801470e:	f7eb ff8b 	bl	8000628 <__aeabi_dmul>
 8014712:	4622      	mov	r2, r4
 8014714:	462b      	mov	r3, r5
 8014716:	f7eb ff87 	bl	8000628 <__aeabi_dmul>
 801471a:	ec53 2b18 	vmov	r2, r3, d8
 801471e:	4604      	mov	r4, r0
 8014720:	460d      	mov	r5, r1
 8014722:	4640      	mov	r0, r8
 8014724:	4649      	mov	r1, r9
 8014726:	f7eb ff7f 	bl	8000628 <__aeabi_dmul>
 801472a:	460b      	mov	r3, r1
 801472c:	4602      	mov	r2, r0
 801472e:	4629      	mov	r1, r5
 8014730:	4620      	mov	r0, r4
 8014732:	f7eb fdc1 	bl	80002b8 <__aeabi_dsub>
 8014736:	4b29      	ldr	r3, [pc, #164]	; (80147dc <__kernel_cos+0x17c>)
 8014738:	429e      	cmp	r6, r3
 801473a:	4680      	mov	r8, r0
 801473c:	4689      	mov	r9, r1
 801473e:	dc11      	bgt.n	8014764 <__kernel_cos+0x104>
 8014740:	4602      	mov	r2, r0
 8014742:	460b      	mov	r3, r1
 8014744:	4650      	mov	r0, sl
 8014746:	4659      	mov	r1, fp
 8014748:	f7eb fdb6 	bl	80002b8 <__aeabi_dsub>
 801474c:	460b      	mov	r3, r1
 801474e:	4924      	ldr	r1, [pc, #144]	; (80147e0 <__kernel_cos+0x180>)
 8014750:	4602      	mov	r2, r0
 8014752:	2000      	movs	r0, #0
 8014754:	f7eb fdb0 	bl	80002b8 <__aeabi_dsub>
 8014758:	ecbd 8b02 	vpop	{d8}
 801475c:	ec41 0b10 	vmov	d0, r0, r1
 8014760:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014764:	4b1f      	ldr	r3, [pc, #124]	; (80147e4 <__kernel_cos+0x184>)
 8014766:	491e      	ldr	r1, [pc, #120]	; (80147e0 <__kernel_cos+0x180>)
 8014768:	429e      	cmp	r6, r3
 801476a:	bfcc      	ite	gt
 801476c:	4d1e      	ldrgt	r5, [pc, #120]	; (80147e8 <__kernel_cos+0x188>)
 801476e:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8014772:	2400      	movs	r4, #0
 8014774:	4622      	mov	r2, r4
 8014776:	462b      	mov	r3, r5
 8014778:	2000      	movs	r0, #0
 801477a:	f7eb fd9d 	bl	80002b8 <__aeabi_dsub>
 801477e:	4622      	mov	r2, r4
 8014780:	4606      	mov	r6, r0
 8014782:	460f      	mov	r7, r1
 8014784:	462b      	mov	r3, r5
 8014786:	4650      	mov	r0, sl
 8014788:	4659      	mov	r1, fp
 801478a:	f7eb fd95 	bl	80002b8 <__aeabi_dsub>
 801478e:	4642      	mov	r2, r8
 8014790:	464b      	mov	r3, r9
 8014792:	f7eb fd91 	bl	80002b8 <__aeabi_dsub>
 8014796:	4602      	mov	r2, r0
 8014798:	460b      	mov	r3, r1
 801479a:	4630      	mov	r0, r6
 801479c:	4639      	mov	r1, r7
 801479e:	e7d9      	b.n	8014754 <__kernel_cos+0xf4>
 80147a0:	2000      	movs	r0, #0
 80147a2:	490f      	ldr	r1, [pc, #60]	; (80147e0 <__kernel_cos+0x180>)
 80147a4:	e7d8      	b.n	8014758 <__kernel_cos+0xf8>
 80147a6:	bf00      	nop
 80147a8:	be8838d4 	.word	0xbe8838d4
 80147ac:	bda8fae9 	.word	0xbda8fae9
 80147b0:	bdb4b1c4 	.word	0xbdb4b1c4
 80147b4:	3e21ee9e 	.word	0x3e21ee9e
 80147b8:	809c52ad 	.word	0x809c52ad
 80147bc:	3e927e4f 	.word	0x3e927e4f
 80147c0:	19cb1590 	.word	0x19cb1590
 80147c4:	3efa01a0 	.word	0x3efa01a0
 80147c8:	16c15177 	.word	0x16c15177
 80147cc:	3f56c16c 	.word	0x3f56c16c
 80147d0:	5555554c 	.word	0x5555554c
 80147d4:	3fa55555 	.word	0x3fa55555
 80147d8:	3fe00000 	.word	0x3fe00000
 80147dc:	3fd33332 	.word	0x3fd33332
 80147e0:	3ff00000 	.word	0x3ff00000
 80147e4:	3fe90000 	.word	0x3fe90000
 80147e8:	3fd20000 	.word	0x3fd20000
 80147ec:	00000000 	.word	0x00000000

080147f0 <__kernel_rem_pio2>:
 80147f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80147f4:	ed2d 8b02 	vpush	{d8}
 80147f8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80147fc:	1ed4      	subs	r4, r2, #3
 80147fe:	9308      	str	r3, [sp, #32]
 8014800:	9101      	str	r1, [sp, #4]
 8014802:	4bc5      	ldr	r3, [pc, #788]	; (8014b18 <__kernel_rem_pio2+0x328>)
 8014804:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8014806:	9009      	str	r0, [sp, #36]	; 0x24
 8014808:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801480c:	9304      	str	r3, [sp, #16]
 801480e:	9b08      	ldr	r3, [sp, #32]
 8014810:	3b01      	subs	r3, #1
 8014812:	9307      	str	r3, [sp, #28]
 8014814:	2318      	movs	r3, #24
 8014816:	fb94 f4f3 	sdiv	r4, r4, r3
 801481a:	f06f 0317 	mvn.w	r3, #23
 801481e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8014822:	fb04 3303 	mla	r3, r4, r3, r3
 8014826:	eb03 0a02 	add.w	sl, r3, r2
 801482a:	9b04      	ldr	r3, [sp, #16]
 801482c:	9a07      	ldr	r2, [sp, #28]
 801482e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8014b08 <__kernel_rem_pio2+0x318>
 8014832:	eb03 0802 	add.w	r8, r3, r2
 8014836:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8014838:	1aa7      	subs	r7, r4, r2
 801483a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801483e:	ae22      	add	r6, sp, #136	; 0x88
 8014840:	2500      	movs	r5, #0
 8014842:	4545      	cmp	r5, r8
 8014844:	dd13      	ble.n	801486e <__kernel_rem_pio2+0x7e>
 8014846:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8014b08 <__kernel_rem_pio2+0x318>
 801484a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 801484e:	2600      	movs	r6, #0
 8014850:	9b04      	ldr	r3, [sp, #16]
 8014852:	429e      	cmp	r6, r3
 8014854:	dc32      	bgt.n	80148bc <__kernel_rem_pio2+0xcc>
 8014856:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014858:	9302      	str	r3, [sp, #8]
 801485a:	9b08      	ldr	r3, [sp, #32]
 801485c:	199d      	adds	r5, r3, r6
 801485e:	ab22      	add	r3, sp, #136	; 0x88
 8014860:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8014864:	9306      	str	r3, [sp, #24]
 8014866:	ec59 8b18 	vmov	r8, r9, d8
 801486a:	2700      	movs	r7, #0
 801486c:	e01f      	b.n	80148ae <__kernel_rem_pio2+0xbe>
 801486e:	42ef      	cmn	r7, r5
 8014870:	d407      	bmi.n	8014882 <__kernel_rem_pio2+0x92>
 8014872:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8014876:	f7eb fe6d 	bl	8000554 <__aeabi_i2d>
 801487a:	e8e6 0102 	strd	r0, r1, [r6], #8
 801487e:	3501      	adds	r5, #1
 8014880:	e7df      	b.n	8014842 <__kernel_rem_pio2+0x52>
 8014882:	ec51 0b18 	vmov	r0, r1, d8
 8014886:	e7f8      	b.n	801487a <__kernel_rem_pio2+0x8a>
 8014888:	9906      	ldr	r1, [sp, #24]
 801488a:	9d02      	ldr	r5, [sp, #8]
 801488c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8014890:	9106      	str	r1, [sp, #24]
 8014892:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8014896:	9502      	str	r5, [sp, #8]
 8014898:	f7eb fec6 	bl	8000628 <__aeabi_dmul>
 801489c:	4602      	mov	r2, r0
 801489e:	460b      	mov	r3, r1
 80148a0:	4640      	mov	r0, r8
 80148a2:	4649      	mov	r1, r9
 80148a4:	f7eb fd0a 	bl	80002bc <__adddf3>
 80148a8:	3701      	adds	r7, #1
 80148aa:	4680      	mov	r8, r0
 80148ac:	4689      	mov	r9, r1
 80148ae:	9b07      	ldr	r3, [sp, #28]
 80148b0:	429f      	cmp	r7, r3
 80148b2:	dde9      	ble.n	8014888 <__kernel_rem_pio2+0x98>
 80148b4:	e8eb 8902 	strd	r8, r9, [fp], #8
 80148b8:	3601      	adds	r6, #1
 80148ba:	e7c9      	b.n	8014850 <__kernel_rem_pio2+0x60>
 80148bc:	9b04      	ldr	r3, [sp, #16]
 80148be:	aa0e      	add	r2, sp, #56	; 0x38
 80148c0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80148c4:	930c      	str	r3, [sp, #48]	; 0x30
 80148c6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80148c8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80148cc:	9c04      	ldr	r4, [sp, #16]
 80148ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80148d0:	ab9a      	add	r3, sp, #616	; 0x268
 80148d2:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 80148d6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80148da:	f10b 3bff 	add.w	fp, fp, #4294967295
 80148de:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 80148e2:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 80148e6:	ab9a      	add	r3, sp, #616	; 0x268
 80148e8:	445b      	add	r3, fp
 80148ea:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 80148ee:	2500      	movs	r5, #0
 80148f0:	1b63      	subs	r3, r4, r5
 80148f2:	2b00      	cmp	r3, #0
 80148f4:	dc78      	bgt.n	80149e8 <__kernel_rem_pio2+0x1f8>
 80148f6:	4650      	mov	r0, sl
 80148f8:	ec49 8b10 	vmov	d0, r8, r9
 80148fc:	f000 fc00 	bl	8015100 <scalbn>
 8014900:	ec57 6b10 	vmov	r6, r7, d0
 8014904:	2200      	movs	r2, #0
 8014906:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801490a:	ee10 0a10 	vmov	r0, s0
 801490e:	4639      	mov	r1, r7
 8014910:	f7eb fe8a 	bl	8000628 <__aeabi_dmul>
 8014914:	ec41 0b10 	vmov	d0, r0, r1
 8014918:	f000 fb6e 	bl	8014ff8 <floor>
 801491c:	2200      	movs	r2, #0
 801491e:	ec51 0b10 	vmov	r0, r1, d0
 8014922:	4b7e      	ldr	r3, [pc, #504]	; (8014b1c <__kernel_rem_pio2+0x32c>)
 8014924:	f7eb fe80 	bl	8000628 <__aeabi_dmul>
 8014928:	4602      	mov	r2, r0
 801492a:	460b      	mov	r3, r1
 801492c:	4630      	mov	r0, r6
 801492e:	4639      	mov	r1, r7
 8014930:	f7eb fcc2 	bl	80002b8 <__aeabi_dsub>
 8014934:	460f      	mov	r7, r1
 8014936:	4606      	mov	r6, r0
 8014938:	f7ec f926 	bl	8000b88 <__aeabi_d2iz>
 801493c:	9006      	str	r0, [sp, #24]
 801493e:	f7eb fe09 	bl	8000554 <__aeabi_i2d>
 8014942:	4602      	mov	r2, r0
 8014944:	460b      	mov	r3, r1
 8014946:	4630      	mov	r0, r6
 8014948:	4639      	mov	r1, r7
 801494a:	f7eb fcb5 	bl	80002b8 <__aeabi_dsub>
 801494e:	f1ba 0f00 	cmp.w	sl, #0
 8014952:	4606      	mov	r6, r0
 8014954:	460f      	mov	r7, r1
 8014956:	dd6c      	ble.n	8014a32 <__kernel_rem_pio2+0x242>
 8014958:	1e62      	subs	r2, r4, #1
 801495a:	ab0e      	add	r3, sp, #56	; 0x38
 801495c:	f1ca 0118 	rsb	r1, sl, #24
 8014960:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8014964:	9d06      	ldr	r5, [sp, #24]
 8014966:	fa40 f301 	asr.w	r3, r0, r1
 801496a:	441d      	add	r5, r3
 801496c:	408b      	lsls	r3, r1
 801496e:	1ac0      	subs	r0, r0, r3
 8014970:	ab0e      	add	r3, sp, #56	; 0x38
 8014972:	9506      	str	r5, [sp, #24]
 8014974:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8014978:	f1ca 0317 	rsb	r3, sl, #23
 801497c:	fa40 f303 	asr.w	r3, r0, r3
 8014980:	9302      	str	r3, [sp, #8]
 8014982:	9b02      	ldr	r3, [sp, #8]
 8014984:	2b00      	cmp	r3, #0
 8014986:	dd62      	ble.n	8014a4e <__kernel_rem_pio2+0x25e>
 8014988:	9b06      	ldr	r3, [sp, #24]
 801498a:	2200      	movs	r2, #0
 801498c:	3301      	adds	r3, #1
 801498e:	9306      	str	r3, [sp, #24]
 8014990:	4615      	mov	r5, r2
 8014992:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8014996:	4294      	cmp	r4, r2
 8014998:	f300 8095 	bgt.w	8014ac6 <__kernel_rem_pio2+0x2d6>
 801499c:	f1ba 0f00 	cmp.w	sl, #0
 80149a0:	dd07      	ble.n	80149b2 <__kernel_rem_pio2+0x1c2>
 80149a2:	f1ba 0f01 	cmp.w	sl, #1
 80149a6:	f000 80a2 	beq.w	8014aee <__kernel_rem_pio2+0x2fe>
 80149aa:	f1ba 0f02 	cmp.w	sl, #2
 80149ae:	f000 80c1 	beq.w	8014b34 <__kernel_rem_pio2+0x344>
 80149b2:	9b02      	ldr	r3, [sp, #8]
 80149b4:	2b02      	cmp	r3, #2
 80149b6:	d14a      	bne.n	8014a4e <__kernel_rem_pio2+0x25e>
 80149b8:	4632      	mov	r2, r6
 80149ba:	463b      	mov	r3, r7
 80149bc:	2000      	movs	r0, #0
 80149be:	4958      	ldr	r1, [pc, #352]	; (8014b20 <__kernel_rem_pio2+0x330>)
 80149c0:	f7eb fc7a 	bl	80002b8 <__aeabi_dsub>
 80149c4:	4606      	mov	r6, r0
 80149c6:	460f      	mov	r7, r1
 80149c8:	2d00      	cmp	r5, #0
 80149ca:	d040      	beq.n	8014a4e <__kernel_rem_pio2+0x25e>
 80149cc:	4650      	mov	r0, sl
 80149ce:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8014b10 <__kernel_rem_pio2+0x320>
 80149d2:	f000 fb95 	bl	8015100 <scalbn>
 80149d6:	4630      	mov	r0, r6
 80149d8:	4639      	mov	r1, r7
 80149da:	ec53 2b10 	vmov	r2, r3, d0
 80149de:	f7eb fc6b 	bl	80002b8 <__aeabi_dsub>
 80149e2:	4606      	mov	r6, r0
 80149e4:	460f      	mov	r7, r1
 80149e6:	e032      	b.n	8014a4e <__kernel_rem_pio2+0x25e>
 80149e8:	2200      	movs	r2, #0
 80149ea:	4b4e      	ldr	r3, [pc, #312]	; (8014b24 <__kernel_rem_pio2+0x334>)
 80149ec:	4640      	mov	r0, r8
 80149ee:	4649      	mov	r1, r9
 80149f0:	f7eb fe1a 	bl	8000628 <__aeabi_dmul>
 80149f4:	f7ec f8c8 	bl	8000b88 <__aeabi_d2iz>
 80149f8:	f7eb fdac 	bl	8000554 <__aeabi_i2d>
 80149fc:	2200      	movs	r2, #0
 80149fe:	4b4a      	ldr	r3, [pc, #296]	; (8014b28 <__kernel_rem_pio2+0x338>)
 8014a00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014a04:	f7eb fe10 	bl	8000628 <__aeabi_dmul>
 8014a08:	4602      	mov	r2, r0
 8014a0a:	460b      	mov	r3, r1
 8014a0c:	4640      	mov	r0, r8
 8014a0e:	4649      	mov	r1, r9
 8014a10:	f7eb fc52 	bl	80002b8 <__aeabi_dsub>
 8014a14:	f7ec f8b8 	bl	8000b88 <__aeabi_d2iz>
 8014a18:	ab0e      	add	r3, sp, #56	; 0x38
 8014a1a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8014a1e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8014a22:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014a26:	f7eb fc49 	bl	80002bc <__adddf3>
 8014a2a:	3501      	adds	r5, #1
 8014a2c:	4680      	mov	r8, r0
 8014a2e:	4689      	mov	r9, r1
 8014a30:	e75e      	b.n	80148f0 <__kernel_rem_pio2+0x100>
 8014a32:	d105      	bne.n	8014a40 <__kernel_rem_pio2+0x250>
 8014a34:	1e63      	subs	r3, r4, #1
 8014a36:	aa0e      	add	r2, sp, #56	; 0x38
 8014a38:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8014a3c:	15c3      	asrs	r3, r0, #23
 8014a3e:	e79f      	b.n	8014980 <__kernel_rem_pio2+0x190>
 8014a40:	2200      	movs	r2, #0
 8014a42:	4b3a      	ldr	r3, [pc, #232]	; (8014b2c <__kernel_rem_pio2+0x33c>)
 8014a44:	f7ec f876 	bl	8000b34 <__aeabi_dcmpge>
 8014a48:	2800      	cmp	r0, #0
 8014a4a:	d139      	bne.n	8014ac0 <__kernel_rem_pio2+0x2d0>
 8014a4c:	9002      	str	r0, [sp, #8]
 8014a4e:	2200      	movs	r2, #0
 8014a50:	2300      	movs	r3, #0
 8014a52:	4630      	mov	r0, r6
 8014a54:	4639      	mov	r1, r7
 8014a56:	f7ec f84f 	bl	8000af8 <__aeabi_dcmpeq>
 8014a5a:	2800      	cmp	r0, #0
 8014a5c:	f000 80c7 	beq.w	8014bee <__kernel_rem_pio2+0x3fe>
 8014a60:	1e65      	subs	r5, r4, #1
 8014a62:	462b      	mov	r3, r5
 8014a64:	2200      	movs	r2, #0
 8014a66:	9904      	ldr	r1, [sp, #16]
 8014a68:	428b      	cmp	r3, r1
 8014a6a:	da6a      	bge.n	8014b42 <__kernel_rem_pio2+0x352>
 8014a6c:	2a00      	cmp	r2, #0
 8014a6e:	f000 8088 	beq.w	8014b82 <__kernel_rem_pio2+0x392>
 8014a72:	ab0e      	add	r3, sp, #56	; 0x38
 8014a74:	f1aa 0a18 	sub.w	sl, sl, #24
 8014a78:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8014a7c:	2b00      	cmp	r3, #0
 8014a7e:	f000 80b4 	beq.w	8014bea <__kernel_rem_pio2+0x3fa>
 8014a82:	4650      	mov	r0, sl
 8014a84:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8014b10 <__kernel_rem_pio2+0x320>
 8014a88:	f000 fb3a 	bl	8015100 <scalbn>
 8014a8c:	00ec      	lsls	r4, r5, #3
 8014a8e:	ab72      	add	r3, sp, #456	; 0x1c8
 8014a90:	191e      	adds	r6, r3, r4
 8014a92:	ec59 8b10 	vmov	r8, r9, d0
 8014a96:	f106 0a08 	add.w	sl, r6, #8
 8014a9a:	462f      	mov	r7, r5
 8014a9c:	2f00      	cmp	r7, #0
 8014a9e:	f280 80df 	bge.w	8014c60 <__kernel_rem_pio2+0x470>
 8014aa2:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8014b08 <__kernel_rem_pio2+0x318>
 8014aa6:	f04f 0a00 	mov.w	sl, #0
 8014aaa:	eba5 030a 	sub.w	r3, r5, sl
 8014aae:	2b00      	cmp	r3, #0
 8014ab0:	f2c0 810a 	blt.w	8014cc8 <__kernel_rem_pio2+0x4d8>
 8014ab4:	f8df b078 	ldr.w	fp, [pc, #120]	; 8014b30 <__kernel_rem_pio2+0x340>
 8014ab8:	ec59 8b18 	vmov	r8, r9, d8
 8014abc:	2700      	movs	r7, #0
 8014abe:	e0f5      	b.n	8014cac <__kernel_rem_pio2+0x4bc>
 8014ac0:	2302      	movs	r3, #2
 8014ac2:	9302      	str	r3, [sp, #8]
 8014ac4:	e760      	b.n	8014988 <__kernel_rem_pio2+0x198>
 8014ac6:	ab0e      	add	r3, sp, #56	; 0x38
 8014ac8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014acc:	b94d      	cbnz	r5, 8014ae2 <__kernel_rem_pio2+0x2f2>
 8014ace:	b12b      	cbz	r3, 8014adc <__kernel_rem_pio2+0x2ec>
 8014ad0:	a80e      	add	r0, sp, #56	; 0x38
 8014ad2:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8014ad6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8014ada:	2301      	movs	r3, #1
 8014adc:	3201      	adds	r2, #1
 8014ade:	461d      	mov	r5, r3
 8014ae0:	e759      	b.n	8014996 <__kernel_rem_pio2+0x1a6>
 8014ae2:	a80e      	add	r0, sp, #56	; 0x38
 8014ae4:	1acb      	subs	r3, r1, r3
 8014ae6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8014aea:	462b      	mov	r3, r5
 8014aec:	e7f6      	b.n	8014adc <__kernel_rem_pio2+0x2ec>
 8014aee:	1e62      	subs	r2, r4, #1
 8014af0:	ab0e      	add	r3, sp, #56	; 0x38
 8014af2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014af6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8014afa:	a90e      	add	r1, sp, #56	; 0x38
 8014afc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8014b00:	e757      	b.n	80149b2 <__kernel_rem_pio2+0x1c2>
 8014b02:	bf00      	nop
 8014b04:	f3af 8000 	nop.w
	...
 8014b14:	3ff00000 	.word	0x3ff00000
 8014b18:	08019ec0 	.word	0x08019ec0
 8014b1c:	40200000 	.word	0x40200000
 8014b20:	3ff00000 	.word	0x3ff00000
 8014b24:	3e700000 	.word	0x3e700000
 8014b28:	41700000 	.word	0x41700000
 8014b2c:	3fe00000 	.word	0x3fe00000
 8014b30:	08019e80 	.word	0x08019e80
 8014b34:	1e62      	subs	r2, r4, #1
 8014b36:	ab0e      	add	r3, sp, #56	; 0x38
 8014b38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014b3c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8014b40:	e7db      	b.n	8014afa <__kernel_rem_pio2+0x30a>
 8014b42:	a90e      	add	r1, sp, #56	; 0x38
 8014b44:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8014b48:	3b01      	subs	r3, #1
 8014b4a:	430a      	orrs	r2, r1
 8014b4c:	e78b      	b.n	8014a66 <__kernel_rem_pio2+0x276>
 8014b4e:	3301      	adds	r3, #1
 8014b50:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8014b54:	2900      	cmp	r1, #0
 8014b56:	d0fa      	beq.n	8014b4e <__kernel_rem_pio2+0x35e>
 8014b58:	9a08      	ldr	r2, [sp, #32]
 8014b5a:	4422      	add	r2, r4
 8014b5c:	00d2      	lsls	r2, r2, #3
 8014b5e:	a922      	add	r1, sp, #136	; 0x88
 8014b60:	18e3      	adds	r3, r4, r3
 8014b62:	9206      	str	r2, [sp, #24]
 8014b64:	440a      	add	r2, r1
 8014b66:	9302      	str	r3, [sp, #8]
 8014b68:	f10b 0108 	add.w	r1, fp, #8
 8014b6c:	f102 0308 	add.w	r3, r2, #8
 8014b70:	1c66      	adds	r6, r4, #1
 8014b72:	910a      	str	r1, [sp, #40]	; 0x28
 8014b74:	2500      	movs	r5, #0
 8014b76:	930d      	str	r3, [sp, #52]	; 0x34
 8014b78:	9b02      	ldr	r3, [sp, #8]
 8014b7a:	42b3      	cmp	r3, r6
 8014b7c:	da04      	bge.n	8014b88 <__kernel_rem_pio2+0x398>
 8014b7e:	461c      	mov	r4, r3
 8014b80:	e6a6      	b.n	80148d0 <__kernel_rem_pio2+0xe0>
 8014b82:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014b84:	2301      	movs	r3, #1
 8014b86:	e7e3      	b.n	8014b50 <__kernel_rem_pio2+0x360>
 8014b88:	9b06      	ldr	r3, [sp, #24]
 8014b8a:	18ef      	adds	r7, r5, r3
 8014b8c:	ab22      	add	r3, sp, #136	; 0x88
 8014b8e:	441f      	add	r7, r3
 8014b90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014b92:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8014b96:	f7eb fcdd 	bl	8000554 <__aeabi_i2d>
 8014b9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014b9c:	461c      	mov	r4, r3
 8014b9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014ba0:	e9c7 0100 	strd	r0, r1, [r7]
 8014ba4:	eb03 0b05 	add.w	fp, r3, r5
 8014ba8:	2700      	movs	r7, #0
 8014baa:	f04f 0800 	mov.w	r8, #0
 8014bae:	f04f 0900 	mov.w	r9, #0
 8014bb2:	9b07      	ldr	r3, [sp, #28]
 8014bb4:	429f      	cmp	r7, r3
 8014bb6:	dd08      	ble.n	8014bca <__kernel_rem_pio2+0x3da>
 8014bb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014bba:	aa72      	add	r2, sp, #456	; 0x1c8
 8014bbc:	18eb      	adds	r3, r5, r3
 8014bbe:	4413      	add	r3, r2
 8014bc0:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8014bc4:	3601      	adds	r6, #1
 8014bc6:	3508      	adds	r5, #8
 8014bc8:	e7d6      	b.n	8014b78 <__kernel_rem_pio2+0x388>
 8014bca:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8014bce:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8014bd2:	f7eb fd29 	bl	8000628 <__aeabi_dmul>
 8014bd6:	4602      	mov	r2, r0
 8014bd8:	460b      	mov	r3, r1
 8014bda:	4640      	mov	r0, r8
 8014bdc:	4649      	mov	r1, r9
 8014bde:	f7eb fb6d 	bl	80002bc <__adddf3>
 8014be2:	3701      	adds	r7, #1
 8014be4:	4680      	mov	r8, r0
 8014be6:	4689      	mov	r9, r1
 8014be8:	e7e3      	b.n	8014bb2 <__kernel_rem_pio2+0x3c2>
 8014bea:	3d01      	subs	r5, #1
 8014bec:	e741      	b.n	8014a72 <__kernel_rem_pio2+0x282>
 8014bee:	f1ca 0000 	rsb	r0, sl, #0
 8014bf2:	ec47 6b10 	vmov	d0, r6, r7
 8014bf6:	f000 fa83 	bl	8015100 <scalbn>
 8014bfa:	ec57 6b10 	vmov	r6, r7, d0
 8014bfe:	2200      	movs	r2, #0
 8014c00:	4b99      	ldr	r3, [pc, #612]	; (8014e68 <__kernel_rem_pio2+0x678>)
 8014c02:	ee10 0a10 	vmov	r0, s0
 8014c06:	4639      	mov	r1, r7
 8014c08:	f7eb ff94 	bl	8000b34 <__aeabi_dcmpge>
 8014c0c:	b1f8      	cbz	r0, 8014c4e <__kernel_rem_pio2+0x45e>
 8014c0e:	2200      	movs	r2, #0
 8014c10:	4b96      	ldr	r3, [pc, #600]	; (8014e6c <__kernel_rem_pio2+0x67c>)
 8014c12:	4630      	mov	r0, r6
 8014c14:	4639      	mov	r1, r7
 8014c16:	f7eb fd07 	bl	8000628 <__aeabi_dmul>
 8014c1a:	f7eb ffb5 	bl	8000b88 <__aeabi_d2iz>
 8014c1e:	4680      	mov	r8, r0
 8014c20:	f7eb fc98 	bl	8000554 <__aeabi_i2d>
 8014c24:	2200      	movs	r2, #0
 8014c26:	4b90      	ldr	r3, [pc, #576]	; (8014e68 <__kernel_rem_pio2+0x678>)
 8014c28:	f7eb fcfe 	bl	8000628 <__aeabi_dmul>
 8014c2c:	460b      	mov	r3, r1
 8014c2e:	4602      	mov	r2, r0
 8014c30:	4639      	mov	r1, r7
 8014c32:	4630      	mov	r0, r6
 8014c34:	f7eb fb40 	bl	80002b8 <__aeabi_dsub>
 8014c38:	f7eb ffa6 	bl	8000b88 <__aeabi_d2iz>
 8014c3c:	1c65      	adds	r5, r4, #1
 8014c3e:	ab0e      	add	r3, sp, #56	; 0x38
 8014c40:	f10a 0a18 	add.w	sl, sl, #24
 8014c44:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8014c48:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8014c4c:	e719      	b.n	8014a82 <__kernel_rem_pio2+0x292>
 8014c4e:	4630      	mov	r0, r6
 8014c50:	4639      	mov	r1, r7
 8014c52:	f7eb ff99 	bl	8000b88 <__aeabi_d2iz>
 8014c56:	ab0e      	add	r3, sp, #56	; 0x38
 8014c58:	4625      	mov	r5, r4
 8014c5a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8014c5e:	e710      	b.n	8014a82 <__kernel_rem_pio2+0x292>
 8014c60:	ab0e      	add	r3, sp, #56	; 0x38
 8014c62:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8014c66:	f7eb fc75 	bl	8000554 <__aeabi_i2d>
 8014c6a:	4642      	mov	r2, r8
 8014c6c:	464b      	mov	r3, r9
 8014c6e:	f7eb fcdb 	bl	8000628 <__aeabi_dmul>
 8014c72:	2200      	movs	r2, #0
 8014c74:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8014c78:	4b7c      	ldr	r3, [pc, #496]	; (8014e6c <__kernel_rem_pio2+0x67c>)
 8014c7a:	4640      	mov	r0, r8
 8014c7c:	4649      	mov	r1, r9
 8014c7e:	f7eb fcd3 	bl	8000628 <__aeabi_dmul>
 8014c82:	3f01      	subs	r7, #1
 8014c84:	4680      	mov	r8, r0
 8014c86:	4689      	mov	r9, r1
 8014c88:	e708      	b.n	8014a9c <__kernel_rem_pio2+0x2ac>
 8014c8a:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8014c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c92:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8014c96:	f7eb fcc7 	bl	8000628 <__aeabi_dmul>
 8014c9a:	4602      	mov	r2, r0
 8014c9c:	460b      	mov	r3, r1
 8014c9e:	4640      	mov	r0, r8
 8014ca0:	4649      	mov	r1, r9
 8014ca2:	f7eb fb0b 	bl	80002bc <__adddf3>
 8014ca6:	3701      	adds	r7, #1
 8014ca8:	4680      	mov	r8, r0
 8014caa:	4689      	mov	r9, r1
 8014cac:	9b04      	ldr	r3, [sp, #16]
 8014cae:	429f      	cmp	r7, r3
 8014cb0:	dc01      	bgt.n	8014cb6 <__kernel_rem_pio2+0x4c6>
 8014cb2:	45ba      	cmp	sl, r7
 8014cb4:	dae9      	bge.n	8014c8a <__kernel_rem_pio2+0x49a>
 8014cb6:	ab4a      	add	r3, sp, #296	; 0x128
 8014cb8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8014cbc:	e9c3 8900 	strd	r8, r9, [r3]
 8014cc0:	f10a 0a01 	add.w	sl, sl, #1
 8014cc4:	3e08      	subs	r6, #8
 8014cc6:	e6f0      	b.n	8014aaa <__kernel_rem_pio2+0x2ba>
 8014cc8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8014cca:	2b03      	cmp	r3, #3
 8014ccc:	d85b      	bhi.n	8014d86 <__kernel_rem_pio2+0x596>
 8014cce:	e8df f003 	tbb	[pc, r3]
 8014cd2:	264a      	.short	0x264a
 8014cd4:	0226      	.short	0x0226
 8014cd6:	ab9a      	add	r3, sp, #616	; 0x268
 8014cd8:	441c      	add	r4, r3
 8014cda:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8014cde:	46a2      	mov	sl, r4
 8014ce0:	46ab      	mov	fp, r5
 8014ce2:	f1bb 0f00 	cmp.w	fp, #0
 8014ce6:	dc6c      	bgt.n	8014dc2 <__kernel_rem_pio2+0x5d2>
 8014ce8:	46a2      	mov	sl, r4
 8014cea:	46ab      	mov	fp, r5
 8014cec:	f1bb 0f01 	cmp.w	fp, #1
 8014cf0:	f300 8086 	bgt.w	8014e00 <__kernel_rem_pio2+0x610>
 8014cf4:	2000      	movs	r0, #0
 8014cf6:	2100      	movs	r1, #0
 8014cf8:	2d01      	cmp	r5, #1
 8014cfa:	f300 80a0 	bgt.w	8014e3e <__kernel_rem_pio2+0x64e>
 8014cfe:	9b02      	ldr	r3, [sp, #8]
 8014d00:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8014d04:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8014d08:	2b00      	cmp	r3, #0
 8014d0a:	f040 809e 	bne.w	8014e4a <__kernel_rem_pio2+0x65a>
 8014d0e:	9b01      	ldr	r3, [sp, #4]
 8014d10:	e9c3 7800 	strd	r7, r8, [r3]
 8014d14:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8014d18:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8014d1c:	e033      	b.n	8014d86 <__kernel_rem_pio2+0x596>
 8014d1e:	3408      	adds	r4, #8
 8014d20:	ab4a      	add	r3, sp, #296	; 0x128
 8014d22:	441c      	add	r4, r3
 8014d24:	462e      	mov	r6, r5
 8014d26:	2000      	movs	r0, #0
 8014d28:	2100      	movs	r1, #0
 8014d2a:	2e00      	cmp	r6, #0
 8014d2c:	da3a      	bge.n	8014da4 <__kernel_rem_pio2+0x5b4>
 8014d2e:	9b02      	ldr	r3, [sp, #8]
 8014d30:	2b00      	cmp	r3, #0
 8014d32:	d03d      	beq.n	8014db0 <__kernel_rem_pio2+0x5c0>
 8014d34:	4602      	mov	r2, r0
 8014d36:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014d3a:	9c01      	ldr	r4, [sp, #4]
 8014d3c:	e9c4 2300 	strd	r2, r3, [r4]
 8014d40:	4602      	mov	r2, r0
 8014d42:	460b      	mov	r3, r1
 8014d44:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8014d48:	f7eb fab6 	bl	80002b8 <__aeabi_dsub>
 8014d4c:	ae4c      	add	r6, sp, #304	; 0x130
 8014d4e:	2401      	movs	r4, #1
 8014d50:	42a5      	cmp	r5, r4
 8014d52:	da30      	bge.n	8014db6 <__kernel_rem_pio2+0x5c6>
 8014d54:	9b02      	ldr	r3, [sp, #8]
 8014d56:	b113      	cbz	r3, 8014d5e <__kernel_rem_pio2+0x56e>
 8014d58:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014d5c:	4619      	mov	r1, r3
 8014d5e:	9b01      	ldr	r3, [sp, #4]
 8014d60:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8014d64:	e00f      	b.n	8014d86 <__kernel_rem_pio2+0x596>
 8014d66:	ab9a      	add	r3, sp, #616	; 0x268
 8014d68:	441c      	add	r4, r3
 8014d6a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8014d6e:	2000      	movs	r0, #0
 8014d70:	2100      	movs	r1, #0
 8014d72:	2d00      	cmp	r5, #0
 8014d74:	da10      	bge.n	8014d98 <__kernel_rem_pio2+0x5a8>
 8014d76:	9b02      	ldr	r3, [sp, #8]
 8014d78:	b113      	cbz	r3, 8014d80 <__kernel_rem_pio2+0x590>
 8014d7a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014d7e:	4619      	mov	r1, r3
 8014d80:	9b01      	ldr	r3, [sp, #4]
 8014d82:	e9c3 0100 	strd	r0, r1, [r3]
 8014d86:	9b06      	ldr	r3, [sp, #24]
 8014d88:	f003 0007 	and.w	r0, r3, #7
 8014d8c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8014d90:	ecbd 8b02 	vpop	{d8}
 8014d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d98:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8014d9c:	f7eb fa8e 	bl	80002bc <__adddf3>
 8014da0:	3d01      	subs	r5, #1
 8014da2:	e7e6      	b.n	8014d72 <__kernel_rem_pio2+0x582>
 8014da4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8014da8:	f7eb fa88 	bl	80002bc <__adddf3>
 8014dac:	3e01      	subs	r6, #1
 8014dae:	e7bc      	b.n	8014d2a <__kernel_rem_pio2+0x53a>
 8014db0:	4602      	mov	r2, r0
 8014db2:	460b      	mov	r3, r1
 8014db4:	e7c1      	b.n	8014d3a <__kernel_rem_pio2+0x54a>
 8014db6:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8014dba:	f7eb fa7f 	bl	80002bc <__adddf3>
 8014dbe:	3401      	adds	r4, #1
 8014dc0:	e7c6      	b.n	8014d50 <__kernel_rem_pio2+0x560>
 8014dc2:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8014dc6:	ed3a 7b02 	vldmdb	sl!, {d7}
 8014dca:	4640      	mov	r0, r8
 8014dcc:	ec53 2b17 	vmov	r2, r3, d7
 8014dd0:	4649      	mov	r1, r9
 8014dd2:	ed8d 7b04 	vstr	d7, [sp, #16]
 8014dd6:	f7eb fa71 	bl	80002bc <__adddf3>
 8014dda:	4602      	mov	r2, r0
 8014ddc:	460b      	mov	r3, r1
 8014dde:	4606      	mov	r6, r0
 8014de0:	460f      	mov	r7, r1
 8014de2:	4640      	mov	r0, r8
 8014de4:	4649      	mov	r1, r9
 8014de6:	f7eb fa67 	bl	80002b8 <__aeabi_dsub>
 8014dea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014dee:	f7eb fa65 	bl	80002bc <__adddf3>
 8014df2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014df6:	e9ca 0100 	strd	r0, r1, [sl]
 8014dfa:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8014dfe:	e770      	b.n	8014ce2 <__kernel_rem_pio2+0x4f2>
 8014e00:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8014e04:	ed3a 7b02 	vldmdb	sl!, {d7}
 8014e08:	4630      	mov	r0, r6
 8014e0a:	ec53 2b17 	vmov	r2, r3, d7
 8014e0e:	4639      	mov	r1, r7
 8014e10:	ed8d 7b04 	vstr	d7, [sp, #16]
 8014e14:	f7eb fa52 	bl	80002bc <__adddf3>
 8014e18:	4602      	mov	r2, r0
 8014e1a:	460b      	mov	r3, r1
 8014e1c:	4680      	mov	r8, r0
 8014e1e:	4689      	mov	r9, r1
 8014e20:	4630      	mov	r0, r6
 8014e22:	4639      	mov	r1, r7
 8014e24:	f7eb fa48 	bl	80002b8 <__aeabi_dsub>
 8014e28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014e2c:	f7eb fa46 	bl	80002bc <__adddf3>
 8014e30:	f10b 3bff 	add.w	fp, fp, #4294967295
 8014e34:	e9ca 0100 	strd	r0, r1, [sl]
 8014e38:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8014e3c:	e756      	b.n	8014cec <__kernel_rem_pio2+0x4fc>
 8014e3e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8014e42:	f7eb fa3b 	bl	80002bc <__adddf3>
 8014e46:	3d01      	subs	r5, #1
 8014e48:	e756      	b.n	8014cf8 <__kernel_rem_pio2+0x508>
 8014e4a:	9b01      	ldr	r3, [sp, #4]
 8014e4c:	9a01      	ldr	r2, [sp, #4]
 8014e4e:	601f      	str	r7, [r3, #0]
 8014e50:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8014e54:	605c      	str	r4, [r3, #4]
 8014e56:	609d      	str	r5, [r3, #8]
 8014e58:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8014e5c:	60d3      	str	r3, [r2, #12]
 8014e5e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014e62:	6110      	str	r0, [r2, #16]
 8014e64:	6153      	str	r3, [r2, #20]
 8014e66:	e78e      	b.n	8014d86 <__kernel_rem_pio2+0x596>
 8014e68:	41700000 	.word	0x41700000
 8014e6c:	3e700000 	.word	0x3e700000

08014e70 <__kernel_sin>:
 8014e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e74:	ec55 4b10 	vmov	r4, r5, d0
 8014e78:	b085      	sub	sp, #20
 8014e7a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8014e7e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8014e82:	ed8d 1b00 	vstr	d1, [sp]
 8014e86:	9002      	str	r0, [sp, #8]
 8014e88:	da06      	bge.n	8014e98 <__kernel_sin+0x28>
 8014e8a:	ee10 0a10 	vmov	r0, s0
 8014e8e:	4629      	mov	r1, r5
 8014e90:	f7eb fe7a 	bl	8000b88 <__aeabi_d2iz>
 8014e94:	2800      	cmp	r0, #0
 8014e96:	d051      	beq.n	8014f3c <__kernel_sin+0xcc>
 8014e98:	4622      	mov	r2, r4
 8014e9a:	462b      	mov	r3, r5
 8014e9c:	4620      	mov	r0, r4
 8014e9e:	4629      	mov	r1, r5
 8014ea0:	f7eb fbc2 	bl	8000628 <__aeabi_dmul>
 8014ea4:	4682      	mov	sl, r0
 8014ea6:	468b      	mov	fp, r1
 8014ea8:	4602      	mov	r2, r0
 8014eaa:	460b      	mov	r3, r1
 8014eac:	4620      	mov	r0, r4
 8014eae:	4629      	mov	r1, r5
 8014eb0:	f7eb fbba 	bl	8000628 <__aeabi_dmul>
 8014eb4:	a341      	add	r3, pc, #260	; (adr r3, 8014fbc <__kernel_sin+0x14c>)
 8014eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014eba:	4680      	mov	r8, r0
 8014ebc:	4689      	mov	r9, r1
 8014ebe:	4650      	mov	r0, sl
 8014ec0:	4659      	mov	r1, fp
 8014ec2:	f7eb fbb1 	bl	8000628 <__aeabi_dmul>
 8014ec6:	a33f      	add	r3, pc, #252	; (adr r3, 8014fc4 <__kernel_sin+0x154>)
 8014ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ecc:	f7eb f9f4 	bl	80002b8 <__aeabi_dsub>
 8014ed0:	4652      	mov	r2, sl
 8014ed2:	465b      	mov	r3, fp
 8014ed4:	f7eb fba8 	bl	8000628 <__aeabi_dmul>
 8014ed8:	a33c      	add	r3, pc, #240	; (adr r3, 8014fcc <__kernel_sin+0x15c>)
 8014eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ede:	f7eb f9ed 	bl	80002bc <__adddf3>
 8014ee2:	4652      	mov	r2, sl
 8014ee4:	465b      	mov	r3, fp
 8014ee6:	f7eb fb9f 	bl	8000628 <__aeabi_dmul>
 8014eea:	a33a      	add	r3, pc, #232	; (adr r3, 8014fd4 <__kernel_sin+0x164>)
 8014eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ef0:	f7eb f9e2 	bl	80002b8 <__aeabi_dsub>
 8014ef4:	4652      	mov	r2, sl
 8014ef6:	465b      	mov	r3, fp
 8014ef8:	f7eb fb96 	bl	8000628 <__aeabi_dmul>
 8014efc:	a337      	add	r3, pc, #220	; (adr r3, 8014fdc <__kernel_sin+0x16c>)
 8014efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f02:	f7eb f9db 	bl	80002bc <__adddf3>
 8014f06:	9b02      	ldr	r3, [sp, #8]
 8014f08:	4606      	mov	r6, r0
 8014f0a:	460f      	mov	r7, r1
 8014f0c:	b9db      	cbnz	r3, 8014f46 <__kernel_sin+0xd6>
 8014f0e:	4602      	mov	r2, r0
 8014f10:	460b      	mov	r3, r1
 8014f12:	4650      	mov	r0, sl
 8014f14:	4659      	mov	r1, fp
 8014f16:	f7eb fb87 	bl	8000628 <__aeabi_dmul>
 8014f1a:	a325      	add	r3, pc, #148	; (adr r3, 8014fb0 <__kernel_sin+0x140>)
 8014f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f20:	f7eb f9ca 	bl	80002b8 <__aeabi_dsub>
 8014f24:	4642      	mov	r2, r8
 8014f26:	464b      	mov	r3, r9
 8014f28:	f7eb fb7e 	bl	8000628 <__aeabi_dmul>
 8014f2c:	4602      	mov	r2, r0
 8014f2e:	460b      	mov	r3, r1
 8014f30:	4620      	mov	r0, r4
 8014f32:	4629      	mov	r1, r5
 8014f34:	f7eb f9c2 	bl	80002bc <__adddf3>
 8014f38:	4604      	mov	r4, r0
 8014f3a:	460d      	mov	r5, r1
 8014f3c:	ec45 4b10 	vmov	d0, r4, r5
 8014f40:	b005      	add	sp, #20
 8014f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f46:	2200      	movs	r2, #0
 8014f48:	4b1b      	ldr	r3, [pc, #108]	; (8014fb8 <__kernel_sin+0x148>)
 8014f4a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014f4e:	f7eb fb6b 	bl	8000628 <__aeabi_dmul>
 8014f52:	4632      	mov	r2, r6
 8014f54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014f58:	463b      	mov	r3, r7
 8014f5a:	4640      	mov	r0, r8
 8014f5c:	4649      	mov	r1, r9
 8014f5e:	f7eb fb63 	bl	8000628 <__aeabi_dmul>
 8014f62:	4602      	mov	r2, r0
 8014f64:	460b      	mov	r3, r1
 8014f66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014f6a:	f7eb f9a5 	bl	80002b8 <__aeabi_dsub>
 8014f6e:	4652      	mov	r2, sl
 8014f70:	465b      	mov	r3, fp
 8014f72:	f7eb fb59 	bl	8000628 <__aeabi_dmul>
 8014f76:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014f7a:	f7eb f99d 	bl	80002b8 <__aeabi_dsub>
 8014f7e:	a30c      	add	r3, pc, #48	; (adr r3, 8014fb0 <__kernel_sin+0x140>)
 8014f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f84:	4606      	mov	r6, r0
 8014f86:	460f      	mov	r7, r1
 8014f88:	4640      	mov	r0, r8
 8014f8a:	4649      	mov	r1, r9
 8014f8c:	f7eb fb4c 	bl	8000628 <__aeabi_dmul>
 8014f90:	4602      	mov	r2, r0
 8014f92:	460b      	mov	r3, r1
 8014f94:	4630      	mov	r0, r6
 8014f96:	4639      	mov	r1, r7
 8014f98:	f7eb f990 	bl	80002bc <__adddf3>
 8014f9c:	4602      	mov	r2, r0
 8014f9e:	460b      	mov	r3, r1
 8014fa0:	4620      	mov	r0, r4
 8014fa2:	4629      	mov	r1, r5
 8014fa4:	f7eb f988 	bl	80002b8 <__aeabi_dsub>
 8014fa8:	e7c6      	b.n	8014f38 <__kernel_sin+0xc8>
 8014faa:	bf00      	nop
 8014fac:	f3af 8000 	nop.w
 8014fb0:	55555549 	.word	0x55555549
 8014fb4:	3fc55555 	.word	0x3fc55555
 8014fb8:	3fe00000 	.word	0x3fe00000
 8014fbc:	5acfd57c 	.word	0x5acfd57c
 8014fc0:	3de5d93a 	.word	0x3de5d93a
 8014fc4:	8a2b9ceb 	.word	0x8a2b9ceb
 8014fc8:	3e5ae5e6 	.word	0x3e5ae5e6
 8014fcc:	57b1fe7d 	.word	0x57b1fe7d
 8014fd0:	3ec71de3 	.word	0x3ec71de3
 8014fd4:	19c161d5 	.word	0x19c161d5
 8014fd8:	3f2a01a0 	.word	0x3f2a01a0
 8014fdc:	1110f8a6 	.word	0x1110f8a6
 8014fe0:	3f811111 	.word	0x3f811111

08014fe4 <fabs>:
 8014fe4:	ec51 0b10 	vmov	r0, r1, d0
 8014fe8:	ee10 2a10 	vmov	r2, s0
 8014fec:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014ff0:	ec43 2b10 	vmov	d0, r2, r3
 8014ff4:	4770      	bx	lr
	...

08014ff8 <floor>:
 8014ff8:	ec51 0b10 	vmov	r0, r1, d0
 8014ffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015000:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8015004:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8015008:	2e13      	cmp	r6, #19
 801500a:	460c      	mov	r4, r1
 801500c:	ee10 5a10 	vmov	r5, s0
 8015010:	4680      	mov	r8, r0
 8015012:	dc34      	bgt.n	801507e <floor+0x86>
 8015014:	2e00      	cmp	r6, #0
 8015016:	da16      	bge.n	8015046 <floor+0x4e>
 8015018:	a335      	add	r3, pc, #212	; (adr r3, 80150f0 <floor+0xf8>)
 801501a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801501e:	f7eb f94d 	bl	80002bc <__adddf3>
 8015022:	2200      	movs	r2, #0
 8015024:	2300      	movs	r3, #0
 8015026:	f7eb fd8f 	bl	8000b48 <__aeabi_dcmpgt>
 801502a:	b148      	cbz	r0, 8015040 <floor+0x48>
 801502c:	2c00      	cmp	r4, #0
 801502e:	da59      	bge.n	80150e4 <floor+0xec>
 8015030:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8015034:	4a30      	ldr	r2, [pc, #192]	; (80150f8 <floor+0x100>)
 8015036:	432b      	orrs	r3, r5
 8015038:	2500      	movs	r5, #0
 801503a:	42ab      	cmp	r3, r5
 801503c:	bf18      	it	ne
 801503e:	4614      	movne	r4, r2
 8015040:	4621      	mov	r1, r4
 8015042:	4628      	mov	r0, r5
 8015044:	e025      	b.n	8015092 <floor+0x9a>
 8015046:	4f2d      	ldr	r7, [pc, #180]	; (80150fc <floor+0x104>)
 8015048:	4137      	asrs	r7, r6
 801504a:	ea01 0307 	and.w	r3, r1, r7
 801504e:	4303      	orrs	r3, r0
 8015050:	d01f      	beq.n	8015092 <floor+0x9a>
 8015052:	a327      	add	r3, pc, #156	; (adr r3, 80150f0 <floor+0xf8>)
 8015054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015058:	f7eb f930 	bl	80002bc <__adddf3>
 801505c:	2200      	movs	r2, #0
 801505e:	2300      	movs	r3, #0
 8015060:	f7eb fd72 	bl	8000b48 <__aeabi_dcmpgt>
 8015064:	2800      	cmp	r0, #0
 8015066:	d0eb      	beq.n	8015040 <floor+0x48>
 8015068:	2c00      	cmp	r4, #0
 801506a:	bfbe      	ittt	lt
 801506c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8015070:	fa43 f606 	asrlt.w	r6, r3, r6
 8015074:	19a4      	addlt	r4, r4, r6
 8015076:	ea24 0407 	bic.w	r4, r4, r7
 801507a:	2500      	movs	r5, #0
 801507c:	e7e0      	b.n	8015040 <floor+0x48>
 801507e:	2e33      	cmp	r6, #51	; 0x33
 8015080:	dd0b      	ble.n	801509a <floor+0xa2>
 8015082:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8015086:	d104      	bne.n	8015092 <floor+0x9a>
 8015088:	ee10 2a10 	vmov	r2, s0
 801508c:	460b      	mov	r3, r1
 801508e:	f7eb f915 	bl	80002bc <__adddf3>
 8015092:	ec41 0b10 	vmov	d0, r0, r1
 8015096:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801509a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801509e:	f04f 33ff 	mov.w	r3, #4294967295
 80150a2:	fa23 f707 	lsr.w	r7, r3, r7
 80150a6:	4207      	tst	r7, r0
 80150a8:	d0f3      	beq.n	8015092 <floor+0x9a>
 80150aa:	a311      	add	r3, pc, #68	; (adr r3, 80150f0 <floor+0xf8>)
 80150ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80150b0:	f7eb f904 	bl	80002bc <__adddf3>
 80150b4:	2200      	movs	r2, #0
 80150b6:	2300      	movs	r3, #0
 80150b8:	f7eb fd46 	bl	8000b48 <__aeabi_dcmpgt>
 80150bc:	2800      	cmp	r0, #0
 80150be:	d0bf      	beq.n	8015040 <floor+0x48>
 80150c0:	2c00      	cmp	r4, #0
 80150c2:	da02      	bge.n	80150ca <floor+0xd2>
 80150c4:	2e14      	cmp	r6, #20
 80150c6:	d103      	bne.n	80150d0 <floor+0xd8>
 80150c8:	3401      	adds	r4, #1
 80150ca:	ea25 0507 	bic.w	r5, r5, r7
 80150ce:	e7b7      	b.n	8015040 <floor+0x48>
 80150d0:	2301      	movs	r3, #1
 80150d2:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80150d6:	fa03 f606 	lsl.w	r6, r3, r6
 80150da:	4435      	add	r5, r6
 80150dc:	4545      	cmp	r5, r8
 80150de:	bf38      	it	cc
 80150e0:	18e4      	addcc	r4, r4, r3
 80150e2:	e7f2      	b.n	80150ca <floor+0xd2>
 80150e4:	2500      	movs	r5, #0
 80150e6:	462c      	mov	r4, r5
 80150e8:	e7aa      	b.n	8015040 <floor+0x48>
 80150ea:	bf00      	nop
 80150ec:	f3af 8000 	nop.w
 80150f0:	8800759c 	.word	0x8800759c
 80150f4:	7e37e43c 	.word	0x7e37e43c
 80150f8:	bff00000 	.word	0xbff00000
 80150fc:	000fffff 	.word	0x000fffff

08015100 <scalbn>:
 8015100:	b570      	push	{r4, r5, r6, lr}
 8015102:	ec55 4b10 	vmov	r4, r5, d0
 8015106:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801510a:	4606      	mov	r6, r0
 801510c:	462b      	mov	r3, r5
 801510e:	b9aa      	cbnz	r2, 801513c <scalbn+0x3c>
 8015110:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8015114:	4323      	orrs	r3, r4
 8015116:	d03b      	beq.n	8015190 <scalbn+0x90>
 8015118:	4b31      	ldr	r3, [pc, #196]	; (80151e0 <scalbn+0xe0>)
 801511a:	4629      	mov	r1, r5
 801511c:	2200      	movs	r2, #0
 801511e:	ee10 0a10 	vmov	r0, s0
 8015122:	f7eb fa81 	bl	8000628 <__aeabi_dmul>
 8015126:	4b2f      	ldr	r3, [pc, #188]	; (80151e4 <scalbn+0xe4>)
 8015128:	429e      	cmp	r6, r3
 801512a:	4604      	mov	r4, r0
 801512c:	460d      	mov	r5, r1
 801512e:	da12      	bge.n	8015156 <scalbn+0x56>
 8015130:	a327      	add	r3, pc, #156	; (adr r3, 80151d0 <scalbn+0xd0>)
 8015132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015136:	f7eb fa77 	bl	8000628 <__aeabi_dmul>
 801513a:	e009      	b.n	8015150 <scalbn+0x50>
 801513c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8015140:	428a      	cmp	r2, r1
 8015142:	d10c      	bne.n	801515e <scalbn+0x5e>
 8015144:	ee10 2a10 	vmov	r2, s0
 8015148:	4620      	mov	r0, r4
 801514a:	4629      	mov	r1, r5
 801514c:	f7eb f8b6 	bl	80002bc <__adddf3>
 8015150:	4604      	mov	r4, r0
 8015152:	460d      	mov	r5, r1
 8015154:	e01c      	b.n	8015190 <scalbn+0x90>
 8015156:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801515a:	460b      	mov	r3, r1
 801515c:	3a36      	subs	r2, #54	; 0x36
 801515e:	4432      	add	r2, r6
 8015160:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8015164:	428a      	cmp	r2, r1
 8015166:	dd0b      	ble.n	8015180 <scalbn+0x80>
 8015168:	ec45 4b11 	vmov	d1, r4, r5
 801516c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 80151d8 <scalbn+0xd8>
 8015170:	f000 f83c 	bl	80151ec <copysign>
 8015174:	a318      	add	r3, pc, #96	; (adr r3, 80151d8 <scalbn+0xd8>)
 8015176:	e9d3 2300 	ldrd	r2, r3, [r3]
 801517a:	ec51 0b10 	vmov	r0, r1, d0
 801517e:	e7da      	b.n	8015136 <scalbn+0x36>
 8015180:	2a00      	cmp	r2, #0
 8015182:	dd08      	ble.n	8015196 <scalbn+0x96>
 8015184:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8015188:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801518c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8015190:	ec45 4b10 	vmov	d0, r4, r5
 8015194:	bd70      	pop	{r4, r5, r6, pc}
 8015196:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801519a:	da0d      	bge.n	80151b8 <scalbn+0xb8>
 801519c:	f24c 3350 	movw	r3, #50000	; 0xc350
 80151a0:	429e      	cmp	r6, r3
 80151a2:	ec45 4b11 	vmov	d1, r4, r5
 80151a6:	dce1      	bgt.n	801516c <scalbn+0x6c>
 80151a8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 80151d0 <scalbn+0xd0>
 80151ac:	f000 f81e 	bl	80151ec <copysign>
 80151b0:	a307      	add	r3, pc, #28	; (adr r3, 80151d0 <scalbn+0xd0>)
 80151b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151b6:	e7e0      	b.n	801517a <scalbn+0x7a>
 80151b8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80151bc:	3236      	adds	r2, #54	; 0x36
 80151be:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80151c2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80151c6:	4620      	mov	r0, r4
 80151c8:	4629      	mov	r1, r5
 80151ca:	2200      	movs	r2, #0
 80151cc:	4b06      	ldr	r3, [pc, #24]	; (80151e8 <scalbn+0xe8>)
 80151ce:	e7b2      	b.n	8015136 <scalbn+0x36>
 80151d0:	c2f8f359 	.word	0xc2f8f359
 80151d4:	01a56e1f 	.word	0x01a56e1f
 80151d8:	8800759c 	.word	0x8800759c
 80151dc:	7e37e43c 	.word	0x7e37e43c
 80151e0:	43500000 	.word	0x43500000
 80151e4:	ffff3cb0 	.word	0xffff3cb0
 80151e8:	3c900000 	.word	0x3c900000

080151ec <copysign>:
 80151ec:	ec51 0b10 	vmov	r0, r1, d0
 80151f0:	ee11 0a90 	vmov	r0, s3
 80151f4:	ee10 2a10 	vmov	r2, s0
 80151f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80151fc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8015200:	ea41 0300 	orr.w	r3, r1, r0
 8015204:	ec43 2b10 	vmov	d0, r2, r3
 8015208:	4770      	bx	lr
	...

0801520c <__errno>:
 801520c:	4b01      	ldr	r3, [pc, #4]	; (8015214 <__errno+0x8>)
 801520e:	6818      	ldr	r0, [r3, #0]
 8015210:	4770      	bx	lr
 8015212:	bf00      	nop
 8015214:	2000000c 	.word	0x2000000c

08015218 <__libc_init_array>:
 8015218:	b570      	push	{r4, r5, r6, lr}
 801521a:	4e0d      	ldr	r6, [pc, #52]	; (8015250 <__libc_init_array+0x38>)
 801521c:	4c0d      	ldr	r4, [pc, #52]	; (8015254 <__libc_init_array+0x3c>)
 801521e:	1ba4      	subs	r4, r4, r6
 8015220:	10a4      	asrs	r4, r4, #2
 8015222:	2500      	movs	r5, #0
 8015224:	42a5      	cmp	r5, r4
 8015226:	d109      	bne.n	801523c <__libc_init_array+0x24>
 8015228:	4e0b      	ldr	r6, [pc, #44]	; (8015258 <__libc_init_array+0x40>)
 801522a:	4c0c      	ldr	r4, [pc, #48]	; (801525c <__libc_init_array+0x44>)
 801522c:	f004 f9e8 	bl	8019600 <_init>
 8015230:	1ba4      	subs	r4, r4, r6
 8015232:	10a4      	asrs	r4, r4, #2
 8015234:	2500      	movs	r5, #0
 8015236:	42a5      	cmp	r5, r4
 8015238:	d105      	bne.n	8015246 <__libc_init_array+0x2e>
 801523a:	bd70      	pop	{r4, r5, r6, pc}
 801523c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015240:	4798      	blx	r3
 8015242:	3501      	adds	r5, #1
 8015244:	e7ee      	b.n	8015224 <__libc_init_array+0xc>
 8015246:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801524a:	4798      	blx	r3
 801524c:	3501      	adds	r5, #1
 801524e:	e7f2      	b.n	8015236 <__libc_init_array+0x1e>
 8015250:	0801a204 	.word	0x0801a204
 8015254:	0801a204 	.word	0x0801a204
 8015258:	0801a204 	.word	0x0801a204
 801525c:	0801a20c 	.word	0x0801a20c

08015260 <memcpy>:
 8015260:	b510      	push	{r4, lr}
 8015262:	1e43      	subs	r3, r0, #1
 8015264:	440a      	add	r2, r1
 8015266:	4291      	cmp	r1, r2
 8015268:	d100      	bne.n	801526c <memcpy+0xc>
 801526a:	bd10      	pop	{r4, pc}
 801526c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015270:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015274:	e7f7      	b.n	8015266 <memcpy+0x6>

08015276 <memset>:
 8015276:	4402      	add	r2, r0
 8015278:	4603      	mov	r3, r0
 801527a:	4293      	cmp	r3, r2
 801527c:	d100      	bne.n	8015280 <memset+0xa>
 801527e:	4770      	bx	lr
 8015280:	f803 1b01 	strb.w	r1, [r3], #1
 8015284:	e7f9      	b.n	801527a <memset+0x4>

08015286 <__cvt>:
 8015286:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801528a:	ec55 4b10 	vmov	r4, r5, d0
 801528e:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8015290:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8015294:	2d00      	cmp	r5, #0
 8015296:	460e      	mov	r6, r1
 8015298:	4691      	mov	r9, r2
 801529a:	4619      	mov	r1, r3
 801529c:	bfb8      	it	lt
 801529e:	4622      	movlt	r2, r4
 80152a0:	462b      	mov	r3, r5
 80152a2:	f027 0720 	bic.w	r7, r7, #32
 80152a6:	bfbb      	ittet	lt
 80152a8:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80152ac:	461d      	movlt	r5, r3
 80152ae:	2300      	movge	r3, #0
 80152b0:	232d      	movlt	r3, #45	; 0x2d
 80152b2:	bfb8      	it	lt
 80152b4:	4614      	movlt	r4, r2
 80152b6:	2f46      	cmp	r7, #70	; 0x46
 80152b8:	700b      	strb	r3, [r1, #0]
 80152ba:	d004      	beq.n	80152c6 <__cvt+0x40>
 80152bc:	2f45      	cmp	r7, #69	; 0x45
 80152be:	d100      	bne.n	80152c2 <__cvt+0x3c>
 80152c0:	3601      	adds	r6, #1
 80152c2:	2102      	movs	r1, #2
 80152c4:	e000      	b.n	80152c8 <__cvt+0x42>
 80152c6:	2103      	movs	r1, #3
 80152c8:	ab03      	add	r3, sp, #12
 80152ca:	9301      	str	r3, [sp, #4]
 80152cc:	ab02      	add	r3, sp, #8
 80152ce:	9300      	str	r3, [sp, #0]
 80152d0:	4632      	mov	r2, r6
 80152d2:	4653      	mov	r3, sl
 80152d4:	ec45 4b10 	vmov	d0, r4, r5
 80152d8:	f001 fdfe 	bl	8016ed8 <_dtoa_r>
 80152dc:	2f47      	cmp	r7, #71	; 0x47
 80152de:	4680      	mov	r8, r0
 80152e0:	d102      	bne.n	80152e8 <__cvt+0x62>
 80152e2:	f019 0f01 	tst.w	r9, #1
 80152e6:	d026      	beq.n	8015336 <__cvt+0xb0>
 80152e8:	2f46      	cmp	r7, #70	; 0x46
 80152ea:	eb08 0906 	add.w	r9, r8, r6
 80152ee:	d111      	bne.n	8015314 <__cvt+0x8e>
 80152f0:	f898 3000 	ldrb.w	r3, [r8]
 80152f4:	2b30      	cmp	r3, #48	; 0x30
 80152f6:	d10a      	bne.n	801530e <__cvt+0x88>
 80152f8:	2200      	movs	r2, #0
 80152fa:	2300      	movs	r3, #0
 80152fc:	4620      	mov	r0, r4
 80152fe:	4629      	mov	r1, r5
 8015300:	f7eb fbfa 	bl	8000af8 <__aeabi_dcmpeq>
 8015304:	b918      	cbnz	r0, 801530e <__cvt+0x88>
 8015306:	f1c6 0601 	rsb	r6, r6, #1
 801530a:	f8ca 6000 	str.w	r6, [sl]
 801530e:	f8da 3000 	ldr.w	r3, [sl]
 8015312:	4499      	add	r9, r3
 8015314:	2200      	movs	r2, #0
 8015316:	2300      	movs	r3, #0
 8015318:	4620      	mov	r0, r4
 801531a:	4629      	mov	r1, r5
 801531c:	f7eb fbec 	bl	8000af8 <__aeabi_dcmpeq>
 8015320:	b938      	cbnz	r0, 8015332 <__cvt+0xac>
 8015322:	2230      	movs	r2, #48	; 0x30
 8015324:	9b03      	ldr	r3, [sp, #12]
 8015326:	454b      	cmp	r3, r9
 8015328:	d205      	bcs.n	8015336 <__cvt+0xb0>
 801532a:	1c59      	adds	r1, r3, #1
 801532c:	9103      	str	r1, [sp, #12]
 801532e:	701a      	strb	r2, [r3, #0]
 8015330:	e7f8      	b.n	8015324 <__cvt+0x9e>
 8015332:	f8cd 900c 	str.w	r9, [sp, #12]
 8015336:	9b03      	ldr	r3, [sp, #12]
 8015338:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801533a:	eba3 0308 	sub.w	r3, r3, r8
 801533e:	4640      	mov	r0, r8
 8015340:	6013      	str	r3, [r2, #0]
 8015342:	b004      	add	sp, #16
 8015344:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08015348 <__exponent>:
 8015348:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801534a:	2900      	cmp	r1, #0
 801534c:	4604      	mov	r4, r0
 801534e:	bfba      	itte	lt
 8015350:	4249      	neglt	r1, r1
 8015352:	232d      	movlt	r3, #45	; 0x2d
 8015354:	232b      	movge	r3, #43	; 0x2b
 8015356:	2909      	cmp	r1, #9
 8015358:	f804 2b02 	strb.w	r2, [r4], #2
 801535c:	7043      	strb	r3, [r0, #1]
 801535e:	dd20      	ble.n	80153a2 <__exponent+0x5a>
 8015360:	f10d 0307 	add.w	r3, sp, #7
 8015364:	461f      	mov	r7, r3
 8015366:	260a      	movs	r6, #10
 8015368:	fb91 f5f6 	sdiv	r5, r1, r6
 801536c:	fb06 1115 	mls	r1, r6, r5, r1
 8015370:	3130      	adds	r1, #48	; 0x30
 8015372:	2d09      	cmp	r5, #9
 8015374:	f803 1c01 	strb.w	r1, [r3, #-1]
 8015378:	f103 32ff 	add.w	r2, r3, #4294967295
 801537c:	4629      	mov	r1, r5
 801537e:	dc09      	bgt.n	8015394 <__exponent+0x4c>
 8015380:	3130      	adds	r1, #48	; 0x30
 8015382:	3b02      	subs	r3, #2
 8015384:	f802 1c01 	strb.w	r1, [r2, #-1]
 8015388:	42bb      	cmp	r3, r7
 801538a:	4622      	mov	r2, r4
 801538c:	d304      	bcc.n	8015398 <__exponent+0x50>
 801538e:	1a10      	subs	r0, r2, r0
 8015390:	b003      	add	sp, #12
 8015392:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015394:	4613      	mov	r3, r2
 8015396:	e7e7      	b.n	8015368 <__exponent+0x20>
 8015398:	f813 2b01 	ldrb.w	r2, [r3], #1
 801539c:	f804 2b01 	strb.w	r2, [r4], #1
 80153a0:	e7f2      	b.n	8015388 <__exponent+0x40>
 80153a2:	2330      	movs	r3, #48	; 0x30
 80153a4:	4419      	add	r1, r3
 80153a6:	7083      	strb	r3, [r0, #2]
 80153a8:	1d02      	adds	r2, r0, #4
 80153aa:	70c1      	strb	r1, [r0, #3]
 80153ac:	e7ef      	b.n	801538e <__exponent+0x46>
	...

080153b0 <_printf_float>:
 80153b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80153b4:	b08d      	sub	sp, #52	; 0x34
 80153b6:	460c      	mov	r4, r1
 80153b8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80153bc:	4616      	mov	r6, r2
 80153be:	461f      	mov	r7, r3
 80153c0:	4605      	mov	r5, r0
 80153c2:	f002 fe7b 	bl	80180bc <_localeconv_r>
 80153c6:	6803      	ldr	r3, [r0, #0]
 80153c8:	9304      	str	r3, [sp, #16]
 80153ca:	4618      	mov	r0, r3
 80153cc:	f7ea ff18 	bl	8000200 <strlen>
 80153d0:	2300      	movs	r3, #0
 80153d2:	930a      	str	r3, [sp, #40]	; 0x28
 80153d4:	f8d8 3000 	ldr.w	r3, [r8]
 80153d8:	9005      	str	r0, [sp, #20]
 80153da:	3307      	adds	r3, #7
 80153dc:	f023 0307 	bic.w	r3, r3, #7
 80153e0:	f103 0208 	add.w	r2, r3, #8
 80153e4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80153e8:	f8d4 b000 	ldr.w	fp, [r4]
 80153ec:	f8c8 2000 	str.w	r2, [r8]
 80153f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153f4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80153f8:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80153fc:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8015400:	9307      	str	r3, [sp, #28]
 8015402:	f8cd 8018 	str.w	r8, [sp, #24]
 8015406:	f04f 32ff 	mov.w	r2, #4294967295
 801540a:	4ba7      	ldr	r3, [pc, #668]	; (80156a8 <_printf_float+0x2f8>)
 801540c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015410:	f7eb fba4 	bl	8000b5c <__aeabi_dcmpun>
 8015414:	bb70      	cbnz	r0, 8015474 <_printf_float+0xc4>
 8015416:	f04f 32ff 	mov.w	r2, #4294967295
 801541a:	4ba3      	ldr	r3, [pc, #652]	; (80156a8 <_printf_float+0x2f8>)
 801541c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015420:	f7eb fb7e 	bl	8000b20 <__aeabi_dcmple>
 8015424:	bb30      	cbnz	r0, 8015474 <_printf_float+0xc4>
 8015426:	2200      	movs	r2, #0
 8015428:	2300      	movs	r3, #0
 801542a:	4640      	mov	r0, r8
 801542c:	4649      	mov	r1, r9
 801542e:	f7eb fb6d 	bl	8000b0c <__aeabi_dcmplt>
 8015432:	b110      	cbz	r0, 801543a <_printf_float+0x8a>
 8015434:	232d      	movs	r3, #45	; 0x2d
 8015436:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801543a:	4a9c      	ldr	r2, [pc, #624]	; (80156ac <_printf_float+0x2fc>)
 801543c:	4b9c      	ldr	r3, [pc, #624]	; (80156b0 <_printf_float+0x300>)
 801543e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8015442:	bf8c      	ite	hi
 8015444:	4690      	movhi	r8, r2
 8015446:	4698      	movls	r8, r3
 8015448:	2303      	movs	r3, #3
 801544a:	f02b 0204 	bic.w	r2, fp, #4
 801544e:	6123      	str	r3, [r4, #16]
 8015450:	6022      	str	r2, [r4, #0]
 8015452:	f04f 0900 	mov.w	r9, #0
 8015456:	9700      	str	r7, [sp, #0]
 8015458:	4633      	mov	r3, r6
 801545a:	aa0b      	add	r2, sp, #44	; 0x2c
 801545c:	4621      	mov	r1, r4
 801545e:	4628      	mov	r0, r5
 8015460:	f000 f9e6 	bl	8015830 <_printf_common>
 8015464:	3001      	adds	r0, #1
 8015466:	f040 808d 	bne.w	8015584 <_printf_float+0x1d4>
 801546a:	f04f 30ff 	mov.w	r0, #4294967295
 801546e:	b00d      	add	sp, #52	; 0x34
 8015470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015474:	4642      	mov	r2, r8
 8015476:	464b      	mov	r3, r9
 8015478:	4640      	mov	r0, r8
 801547a:	4649      	mov	r1, r9
 801547c:	f7eb fb6e 	bl	8000b5c <__aeabi_dcmpun>
 8015480:	b110      	cbz	r0, 8015488 <_printf_float+0xd8>
 8015482:	4a8c      	ldr	r2, [pc, #560]	; (80156b4 <_printf_float+0x304>)
 8015484:	4b8c      	ldr	r3, [pc, #560]	; (80156b8 <_printf_float+0x308>)
 8015486:	e7da      	b.n	801543e <_printf_float+0x8e>
 8015488:	6861      	ldr	r1, [r4, #4]
 801548a:	1c4b      	adds	r3, r1, #1
 801548c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8015490:	a80a      	add	r0, sp, #40	; 0x28
 8015492:	d13e      	bne.n	8015512 <_printf_float+0x162>
 8015494:	2306      	movs	r3, #6
 8015496:	6063      	str	r3, [r4, #4]
 8015498:	2300      	movs	r3, #0
 801549a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801549e:	ab09      	add	r3, sp, #36	; 0x24
 80154a0:	9300      	str	r3, [sp, #0]
 80154a2:	ec49 8b10 	vmov	d0, r8, r9
 80154a6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80154aa:	6022      	str	r2, [r4, #0]
 80154ac:	f8cd a004 	str.w	sl, [sp, #4]
 80154b0:	6861      	ldr	r1, [r4, #4]
 80154b2:	4628      	mov	r0, r5
 80154b4:	f7ff fee7 	bl	8015286 <__cvt>
 80154b8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80154bc:	2b47      	cmp	r3, #71	; 0x47
 80154be:	4680      	mov	r8, r0
 80154c0:	d109      	bne.n	80154d6 <_printf_float+0x126>
 80154c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80154c4:	1cd8      	adds	r0, r3, #3
 80154c6:	db02      	blt.n	80154ce <_printf_float+0x11e>
 80154c8:	6862      	ldr	r2, [r4, #4]
 80154ca:	4293      	cmp	r3, r2
 80154cc:	dd47      	ble.n	801555e <_printf_float+0x1ae>
 80154ce:	f1aa 0a02 	sub.w	sl, sl, #2
 80154d2:	fa5f fa8a 	uxtb.w	sl, sl
 80154d6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80154da:	9909      	ldr	r1, [sp, #36]	; 0x24
 80154dc:	d824      	bhi.n	8015528 <_printf_float+0x178>
 80154de:	3901      	subs	r1, #1
 80154e0:	4652      	mov	r2, sl
 80154e2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80154e6:	9109      	str	r1, [sp, #36]	; 0x24
 80154e8:	f7ff ff2e 	bl	8015348 <__exponent>
 80154ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80154ee:	1813      	adds	r3, r2, r0
 80154f0:	2a01      	cmp	r2, #1
 80154f2:	4681      	mov	r9, r0
 80154f4:	6123      	str	r3, [r4, #16]
 80154f6:	dc02      	bgt.n	80154fe <_printf_float+0x14e>
 80154f8:	6822      	ldr	r2, [r4, #0]
 80154fa:	07d1      	lsls	r1, r2, #31
 80154fc:	d501      	bpl.n	8015502 <_printf_float+0x152>
 80154fe:	3301      	adds	r3, #1
 8015500:	6123      	str	r3, [r4, #16]
 8015502:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8015506:	2b00      	cmp	r3, #0
 8015508:	d0a5      	beq.n	8015456 <_printf_float+0xa6>
 801550a:	232d      	movs	r3, #45	; 0x2d
 801550c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015510:	e7a1      	b.n	8015456 <_printf_float+0xa6>
 8015512:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8015516:	f000 8177 	beq.w	8015808 <_printf_float+0x458>
 801551a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801551e:	d1bb      	bne.n	8015498 <_printf_float+0xe8>
 8015520:	2900      	cmp	r1, #0
 8015522:	d1b9      	bne.n	8015498 <_printf_float+0xe8>
 8015524:	2301      	movs	r3, #1
 8015526:	e7b6      	b.n	8015496 <_printf_float+0xe6>
 8015528:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 801552c:	d119      	bne.n	8015562 <_printf_float+0x1b2>
 801552e:	2900      	cmp	r1, #0
 8015530:	6863      	ldr	r3, [r4, #4]
 8015532:	dd0c      	ble.n	801554e <_printf_float+0x19e>
 8015534:	6121      	str	r1, [r4, #16]
 8015536:	b913      	cbnz	r3, 801553e <_printf_float+0x18e>
 8015538:	6822      	ldr	r2, [r4, #0]
 801553a:	07d2      	lsls	r2, r2, #31
 801553c:	d502      	bpl.n	8015544 <_printf_float+0x194>
 801553e:	3301      	adds	r3, #1
 8015540:	440b      	add	r3, r1
 8015542:	6123      	str	r3, [r4, #16]
 8015544:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015546:	65a3      	str	r3, [r4, #88]	; 0x58
 8015548:	f04f 0900 	mov.w	r9, #0
 801554c:	e7d9      	b.n	8015502 <_printf_float+0x152>
 801554e:	b913      	cbnz	r3, 8015556 <_printf_float+0x1a6>
 8015550:	6822      	ldr	r2, [r4, #0]
 8015552:	07d0      	lsls	r0, r2, #31
 8015554:	d501      	bpl.n	801555a <_printf_float+0x1aa>
 8015556:	3302      	adds	r3, #2
 8015558:	e7f3      	b.n	8015542 <_printf_float+0x192>
 801555a:	2301      	movs	r3, #1
 801555c:	e7f1      	b.n	8015542 <_printf_float+0x192>
 801555e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8015562:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8015566:	4293      	cmp	r3, r2
 8015568:	db05      	blt.n	8015576 <_printf_float+0x1c6>
 801556a:	6822      	ldr	r2, [r4, #0]
 801556c:	6123      	str	r3, [r4, #16]
 801556e:	07d1      	lsls	r1, r2, #31
 8015570:	d5e8      	bpl.n	8015544 <_printf_float+0x194>
 8015572:	3301      	adds	r3, #1
 8015574:	e7e5      	b.n	8015542 <_printf_float+0x192>
 8015576:	2b00      	cmp	r3, #0
 8015578:	bfd4      	ite	le
 801557a:	f1c3 0302 	rsble	r3, r3, #2
 801557e:	2301      	movgt	r3, #1
 8015580:	4413      	add	r3, r2
 8015582:	e7de      	b.n	8015542 <_printf_float+0x192>
 8015584:	6823      	ldr	r3, [r4, #0]
 8015586:	055a      	lsls	r2, r3, #21
 8015588:	d407      	bmi.n	801559a <_printf_float+0x1ea>
 801558a:	6923      	ldr	r3, [r4, #16]
 801558c:	4642      	mov	r2, r8
 801558e:	4631      	mov	r1, r6
 8015590:	4628      	mov	r0, r5
 8015592:	47b8      	blx	r7
 8015594:	3001      	adds	r0, #1
 8015596:	d12b      	bne.n	80155f0 <_printf_float+0x240>
 8015598:	e767      	b.n	801546a <_printf_float+0xba>
 801559a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801559e:	f240 80dc 	bls.w	801575a <_printf_float+0x3aa>
 80155a2:	2200      	movs	r2, #0
 80155a4:	2300      	movs	r3, #0
 80155a6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80155aa:	f7eb faa5 	bl	8000af8 <__aeabi_dcmpeq>
 80155ae:	2800      	cmp	r0, #0
 80155b0:	d033      	beq.n	801561a <_printf_float+0x26a>
 80155b2:	2301      	movs	r3, #1
 80155b4:	4a41      	ldr	r2, [pc, #260]	; (80156bc <_printf_float+0x30c>)
 80155b6:	4631      	mov	r1, r6
 80155b8:	4628      	mov	r0, r5
 80155ba:	47b8      	blx	r7
 80155bc:	3001      	adds	r0, #1
 80155be:	f43f af54 	beq.w	801546a <_printf_float+0xba>
 80155c2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80155c6:	429a      	cmp	r2, r3
 80155c8:	db02      	blt.n	80155d0 <_printf_float+0x220>
 80155ca:	6823      	ldr	r3, [r4, #0]
 80155cc:	07d8      	lsls	r0, r3, #31
 80155ce:	d50f      	bpl.n	80155f0 <_printf_float+0x240>
 80155d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80155d4:	4631      	mov	r1, r6
 80155d6:	4628      	mov	r0, r5
 80155d8:	47b8      	blx	r7
 80155da:	3001      	adds	r0, #1
 80155dc:	f43f af45 	beq.w	801546a <_printf_float+0xba>
 80155e0:	f04f 0800 	mov.w	r8, #0
 80155e4:	f104 091a 	add.w	r9, r4, #26
 80155e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80155ea:	3b01      	subs	r3, #1
 80155ec:	4543      	cmp	r3, r8
 80155ee:	dc09      	bgt.n	8015604 <_printf_float+0x254>
 80155f0:	6823      	ldr	r3, [r4, #0]
 80155f2:	079b      	lsls	r3, r3, #30
 80155f4:	f100 8103 	bmi.w	80157fe <_printf_float+0x44e>
 80155f8:	68e0      	ldr	r0, [r4, #12]
 80155fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80155fc:	4298      	cmp	r0, r3
 80155fe:	bfb8      	it	lt
 8015600:	4618      	movlt	r0, r3
 8015602:	e734      	b.n	801546e <_printf_float+0xbe>
 8015604:	2301      	movs	r3, #1
 8015606:	464a      	mov	r2, r9
 8015608:	4631      	mov	r1, r6
 801560a:	4628      	mov	r0, r5
 801560c:	47b8      	blx	r7
 801560e:	3001      	adds	r0, #1
 8015610:	f43f af2b 	beq.w	801546a <_printf_float+0xba>
 8015614:	f108 0801 	add.w	r8, r8, #1
 8015618:	e7e6      	b.n	80155e8 <_printf_float+0x238>
 801561a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801561c:	2b00      	cmp	r3, #0
 801561e:	dc2b      	bgt.n	8015678 <_printf_float+0x2c8>
 8015620:	2301      	movs	r3, #1
 8015622:	4a26      	ldr	r2, [pc, #152]	; (80156bc <_printf_float+0x30c>)
 8015624:	4631      	mov	r1, r6
 8015626:	4628      	mov	r0, r5
 8015628:	47b8      	blx	r7
 801562a:	3001      	adds	r0, #1
 801562c:	f43f af1d 	beq.w	801546a <_printf_float+0xba>
 8015630:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015632:	b923      	cbnz	r3, 801563e <_printf_float+0x28e>
 8015634:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015636:	b913      	cbnz	r3, 801563e <_printf_float+0x28e>
 8015638:	6823      	ldr	r3, [r4, #0]
 801563a:	07d9      	lsls	r1, r3, #31
 801563c:	d5d8      	bpl.n	80155f0 <_printf_float+0x240>
 801563e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015642:	4631      	mov	r1, r6
 8015644:	4628      	mov	r0, r5
 8015646:	47b8      	blx	r7
 8015648:	3001      	adds	r0, #1
 801564a:	f43f af0e 	beq.w	801546a <_printf_float+0xba>
 801564e:	f04f 0900 	mov.w	r9, #0
 8015652:	f104 0a1a 	add.w	sl, r4, #26
 8015656:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015658:	425b      	negs	r3, r3
 801565a:	454b      	cmp	r3, r9
 801565c:	dc01      	bgt.n	8015662 <_printf_float+0x2b2>
 801565e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015660:	e794      	b.n	801558c <_printf_float+0x1dc>
 8015662:	2301      	movs	r3, #1
 8015664:	4652      	mov	r2, sl
 8015666:	4631      	mov	r1, r6
 8015668:	4628      	mov	r0, r5
 801566a:	47b8      	blx	r7
 801566c:	3001      	adds	r0, #1
 801566e:	f43f aefc 	beq.w	801546a <_printf_float+0xba>
 8015672:	f109 0901 	add.w	r9, r9, #1
 8015676:	e7ee      	b.n	8015656 <_printf_float+0x2a6>
 8015678:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801567a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801567c:	429a      	cmp	r2, r3
 801567e:	bfa8      	it	ge
 8015680:	461a      	movge	r2, r3
 8015682:	2a00      	cmp	r2, #0
 8015684:	4691      	mov	r9, r2
 8015686:	dd07      	ble.n	8015698 <_printf_float+0x2e8>
 8015688:	4613      	mov	r3, r2
 801568a:	4631      	mov	r1, r6
 801568c:	4642      	mov	r2, r8
 801568e:	4628      	mov	r0, r5
 8015690:	47b8      	blx	r7
 8015692:	3001      	adds	r0, #1
 8015694:	f43f aee9 	beq.w	801546a <_printf_float+0xba>
 8015698:	f104 031a 	add.w	r3, r4, #26
 801569c:	f04f 0b00 	mov.w	fp, #0
 80156a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80156a4:	9306      	str	r3, [sp, #24]
 80156a6:	e015      	b.n	80156d4 <_printf_float+0x324>
 80156a8:	7fefffff 	.word	0x7fefffff
 80156ac:	08019ed4 	.word	0x08019ed4
 80156b0:	08019ed0 	.word	0x08019ed0
 80156b4:	08019edc 	.word	0x08019edc
 80156b8:	08019ed8 	.word	0x08019ed8
 80156bc:	0801a093 	.word	0x0801a093
 80156c0:	2301      	movs	r3, #1
 80156c2:	9a06      	ldr	r2, [sp, #24]
 80156c4:	4631      	mov	r1, r6
 80156c6:	4628      	mov	r0, r5
 80156c8:	47b8      	blx	r7
 80156ca:	3001      	adds	r0, #1
 80156cc:	f43f aecd 	beq.w	801546a <_printf_float+0xba>
 80156d0:	f10b 0b01 	add.w	fp, fp, #1
 80156d4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80156d8:	ebaa 0309 	sub.w	r3, sl, r9
 80156dc:	455b      	cmp	r3, fp
 80156de:	dcef      	bgt.n	80156c0 <_printf_float+0x310>
 80156e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80156e4:	429a      	cmp	r2, r3
 80156e6:	44d0      	add	r8, sl
 80156e8:	db15      	blt.n	8015716 <_printf_float+0x366>
 80156ea:	6823      	ldr	r3, [r4, #0]
 80156ec:	07da      	lsls	r2, r3, #31
 80156ee:	d412      	bmi.n	8015716 <_printf_float+0x366>
 80156f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80156f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80156f4:	eba3 020a 	sub.w	r2, r3, sl
 80156f8:	eba3 0a01 	sub.w	sl, r3, r1
 80156fc:	4592      	cmp	sl, r2
 80156fe:	bfa8      	it	ge
 8015700:	4692      	movge	sl, r2
 8015702:	f1ba 0f00 	cmp.w	sl, #0
 8015706:	dc0e      	bgt.n	8015726 <_printf_float+0x376>
 8015708:	f04f 0800 	mov.w	r8, #0
 801570c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8015710:	f104 091a 	add.w	r9, r4, #26
 8015714:	e019      	b.n	801574a <_printf_float+0x39a>
 8015716:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801571a:	4631      	mov	r1, r6
 801571c:	4628      	mov	r0, r5
 801571e:	47b8      	blx	r7
 8015720:	3001      	adds	r0, #1
 8015722:	d1e5      	bne.n	80156f0 <_printf_float+0x340>
 8015724:	e6a1      	b.n	801546a <_printf_float+0xba>
 8015726:	4653      	mov	r3, sl
 8015728:	4642      	mov	r2, r8
 801572a:	4631      	mov	r1, r6
 801572c:	4628      	mov	r0, r5
 801572e:	47b8      	blx	r7
 8015730:	3001      	adds	r0, #1
 8015732:	d1e9      	bne.n	8015708 <_printf_float+0x358>
 8015734:	e699      	b.n	801546a <_printf_float+0xba>
 8015736:	2301      	movs	r3, #1
 8015738:	464a      	mov	r2, r9
 801573a:	4631      	mov	r1, r6
 801573c:	4628      	mov	r0, r5
 801573e:	47b8      	blx	r7
 8015740:	3001      	adds	r0, #1
 8015742:	f43f ae92 	beq.w	801546a <_printf_float+0xba>
 8015746:	f108 0801 	add.w	r8, r8, #1
 801574a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801574e:	1a9b      	subs	r3, r3, r2
 8015750:	eba3 030a 	sub.w	r3, r3, sl
 8015754:	4543      	cmp	r3, r8
 8015756:	dcee      	bgt.n	8015736 <_printf_float+0x386>
 8015758:	e74a      	b.n	80155f0 <_printf_float+0x240>
 801575a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801575c:	2a01      	cmp	r2, #1
 801575e:	dc01      	bgt.n	8015764 <_printf_float+0x3b4>
 8015760:	07db      	lsls	r3, r3, #31
 8015762:	d53a      	bpl.n	80157da <_printf_float+0x42a>
 8015764:	2301      	movs	r3, #1
 8015766:	4642      	mov	r2, r8
 8015768:	4631      	mov	r1, r6
 801576a:	4628      	mov	r0, r5
 801576c:	47b8      	blx	r7
 801576e:	3001      	adds	r0, #1
 8015770:	f43f ae7b 	beq.w	801546a <_printf_float+0xba>
 8015774:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015778:	4631      	mov	r1, r6
 801577a:	4628      	mov	r0, r5
 801577c:	47b8      	blx	r7
 801577e:	3001      	adds	r0, #1
 8015780:	f108 0801 	add.w	r8, r8, #1
 8015784:	f43f ae71 	beq.w	801546a <_printf_float+0xba>
 8015788:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801578a:	2200      	movs	r2, #0
 801578c:	f103 3aff 	add.w	sl, r3, #4294967295
 8015790:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015794:	2300      	movs	r3, #0
 8015796:	f7eb f9af 	bl	8000af8 <__aeabi_dcmpeq>
 801579a:	b9c8      	cbnz	r0, 80157d0 <_printf_float+0x420>
 801579c:	4653      	mov	r3, sl
 801579e:	4642      	mov	r2, r8
 80157a0:	4631      	mov	r1, r6
 80157a2:	4628      	mov	r0, r5
 80157a4:	47b8      	blx	r7
 80157a6:	3001      	adds	r0, #1
 80157a8:	d10e      	bne.n	80157c8 <_printf_float+0x418>
 80157aa:	e65e      	b.n	801546a <_printf_float+0xba>
 80157ac:	2301      	movs	r3, #1
 80157ae:	4652      	mov	r2, sl
 80157b0:	4631      	mov	r1, r6
 80157b2:	4628      	mov	r0, r5
 80157b4:	47b8      	blx	r7
 80157b6:	3001      	adds	r0, #1
 80157b8:	f43f ae57 	beq.w	801546a <_printf_float+0xba>
 80157bc:	f108 0801 	add.w	r8, r8, #1
 80157c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80157c2:	3b01      	subs	r3, #1
 80157c4:	4543      	cmp	r3, r8
 80157c6:	dcf1      	bgt.n	80157ac <_printf_float+0x3fc>
 80157c8:	464b      	mov	r3, r9
 80157ca:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80157ce:	e6de      	b.n	801558e <_printf_float+0x1de>
 80157d0:	f04f 0800 	mov.w	r8, #0
 80157d4:	f104 0a1a 	add.w	sl, r4, #26
 80157d8:	e7f2      	b.n	80157c0 <_printf_float+0x410>
 80157da:	2301      	movs	r3, #1
 80157dc:	e7df      	b.n	801579e <_printf_float+0x3ee>
 80157de:	2301      	movs	r3, #1
 80157e0:	464a      	mov	r2, r9
 80157e2:	4631      	mov	r1, r6
 80157e4:	4628      	mov	r0, r5
 80157e6:	47b8      	blx	r7
 80157e8:	3001      	adds	r0, #1
 80157ea:	f43f ae3e 	beq.w	801546a <_printf_float+0xba>
 80157ee:	f108 0801 	add.w	r8, r8, #1
 80157f2:	68e3      	ldr	r3, [r4, #12]
 80157f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80157f6:	1a9b      	subs	r3, r3, r2
 80157f8:	4543      	cmp	r3, r8
 80157fa:	dcf0      	bgt.n	80157de <_printf_float+0x42e>
 80157fc:	e6fc      	b.n	80155f8 <_printf_float+0x248>
 80157fe:	f04f 0800 	mov.w	r8, #0
 8015802:	f104 0919 	add.w	r9, r4, #25
 8015806:	e7f4      	b.n	80157f2 <_printf_float+0x442>
 8015808:	2900      	cmp	r1, #0
 801580a:	f43f ae8b 	beq.w	8015524 <_printf_float+0x174>
 801580e:	2300      	movs	r3, #0
 8015810:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8015814:	ab09      	add	r3, sp, #36	; 0x24
 8015816:	9300      	str	r3, [sp, #0]
 8015818:	ec49 8b10 	vmov	d0, r8, r9
 801581c:	6022      	str	r2, [r4, #0]
 801581e:	f8cd a004 	str.w	sl, [sp, #4]
 8015822:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8015826:	4628      	mov	r0, r5
 8015828:	f7ff fd2d 	bl	8015286 <__cvt>
 801582c:	4680      	mov	r8, r0
 801582e:	e648      	b.n	80154c2 <_printf_float+0x112>

08015830 <_printf_common>:
 8015830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015834:	4691      	mov	r9, r2
 8015836:	461f      	mov	r7, r3
 8015838:	688a      	ldr	r2, [r1, #8]
 801583a:	690b      	ldr	r3, [r1, #16]
 801583c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015840:	4293      	cmp	r3, r2
 8015842:	bfb8      	it	lt
 8015844:	4613      	movlt	r3, r2
 8015846:	f8c9 3000 	str.w	r3, [r9]
 801584a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801584e:	4606      	mov	r6, r0
 8015850:	460c      	mov	r4, r1
 8015852:	b112      	cbz	r2, 801585a <_printf_common+0x2a>
 8015854:	3301      	adds	r3, #1
 8015856:	f8c9 3000 	str.w	r3, [r9]
 801585a:	6823      	ldr	r3, [r4, #0]
 801585c:	0699      	lsls	r1, r3, #26
 801585e:	bf42      	ittt	mi
 8015860:	f8d9 3000 	ldrmi.w	r3, [r9]
 8015864:	3302      	addmi	r3, #2
 8015866:	f8c9 3000 	strmi.w	r3, [r9]
 801586a:	6825      	ldr	r5, [r4, #0]
 801586c:	f015 0506 	ands.w	r5, r5, #6
 8015870:	d107      	bne.n	8015882 <_printf_common+0x52>
 8015872:	f104 0a19 	add.w	sl, r4, #25
 8015876:	68e3      	ldr	r3, [r4, #12]
 8015878:	f8d9 2000 	ldr.w	r2, [r9]
 801587c:	1a9b      	subs	r3, r3, r2
 801587e:	42ab      	cmp	r3, r5
 8015880:	dc28      	bgt.n	80158d4 <_printf_common+0xa4>
 8015882:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8015886:	6822      	ldr	r2, [r4, #0]
 8015888:	3300      	adds	r3, #0
 801588a:	bf18      	it	ne
 801588c:	2301      	movne	r3, #1
 801588e:	0692      	lsls	r2, r2, #26
 8015890:	d42d      	bmi.n	80158ee <_printf_common+0xbe>
 8015892:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015896:	4639      	mov	r1, r7
 8015898:	4630      	mov	r0, r6
 801589a:	47c0      	blx	r8
 801589c:	3001      	adds	r0, #1
 801589e:	d020      	beq.n	80158e2 <_printf_common+0xb2>
 80158a0:	6823      	ldr	r3, [r4, #0]
 80158a2:	68e5      	ldr	r5, [r4, #12]
 80158a4:	f8d9 2000 	ldr.w	r2, [r9]
 80158a8:	f003 0306 	and.w	r3, r3, #6
 80158ac:	2b04      	cmp	r3, #4
 80158ae:	bf08      	it	eq
 80158b0:	1aad      	subeq	r5, r5, r2
 80158b2:	68a3      	ldr	r3, [r4, #8]
 80158b4:	6922      	ldr	r2, [r4, #16]
 80158b6:	bf0c      	ite	eq
 80158b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80158bc:	2500      	movne	r5, #0
 80158be:	4293      	cmp	r3, r2
 80158c0:	bfc4      	itt	gt
 80158c2:	1a9b      	subgt	r3, r3, r2
 80158c4:	18ed      	addgt	r5, r5, r3
 80158c6:	f04f 0900 	mov.w	r9, #0
 80158ca:	341a      	adds	r4, #26
 80158cc:	454d      	cmp	r5, r9
 80158ce:	d11a      	bne.n	8015906 <_printf_common+0xd6>
 80158d0:	2000      	movs	r0, #0
 80158d2:	e008      	b.n	80158e6 <_printf_common+0xb6>
 80158d4:	2301      	movs	r3, #1
 80158d6:	4652      	mov	r2, sl
 80158d8:	4639      	mov	r1, r7
 80158da:	4630      	mov	r0, r6
 80158dc:	47c0      	blx	r8
 80158de:	3001      	adds	r0, #1
 80158e0:	d103      	bne.n	80158ea <_printf_common+0xba>
 80158e2:	f04f 30ff 	mov.w	r0, #4294967295
 80158e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80158ea:	3501      	adds	r5, #1
 80158ec:	e7c3      	b.n	8015876 <_printf_common+0x46>
 80158ee:	18e1      	adds	r1, r4, r3
 80158f0:	1c5a      	adds	r2, r3, #1
 80158f2:	2030      	movs	r0, #48	; 0x30
 80158f4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80158f8:	4422      	add	r2, r4
 80158fa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80158fe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015902:	3302      	adds	r3, #2
 8015904:	e7c5      	b.n	8015892 <_printf_common+0x62>
 8015906:	2301      	movs	r3, #1
 8015908:	4622      	mov	r2, r4
 801590a:	4639      	mov	r1, r7
 801590c:	4630      	mov	r0, r6
 801590e:	47c0      	blx	r8
 8015910:	3001      	adds	r0, #1
 8015912:	d0e6      	beq.n	80158e2 <_printf_common+0xb2>
 8015914:	f109 0901 	add.w	r9, r9, #1
 8015918:	e7d8      	b.n	80158cc <_printf_common+0x9c>
	...

0801591c <_printf_i>:
 801591c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015920:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8015924:	460c      	mov	r4, r1
 8015926:	7e09      	ldrb	r1, [r1, #24]
 8015928:	b085      	sub	sp, #20
 801592a:	296e      	cmp	r1, #110	; 0x6e
 801592c:	4617      	mov	r7, r2
 801592e:	4606      	mov	r6, r0
 8015930:	4698      	mov	r8, r3
 8015932:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8015934:	f000 80b3 	beq.w	8015a9e <_printf_i+0x182>
 8015938:	d822      	bhi.n	8015980 <_printf_i+0x64>
 801593a:	2963      	cmp	r1, #99	; 0x63
 801593c:	d036      	beq.n	80159ac <_printf_i+0x90>
 801593e:	d80a      	bhi.n	8015956 <_printf_i+0x3a>
 8015940:	2900      	cmp	r1, #0
 8015942:	f000 80b9 	beq.w	8015ab8 <_printf_i+0x19c>
 8015946:	2958      	cmp	r1, #88	; 0x58
 8015948:	f000 8083 	beq.w	8015a52 <_printf_i+0x136>
 801594c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015950:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8015954:	e032      	b.n	80159bc <_printf_i+0xa0>
 8015956:	2964      	cmp	r1, #100	; 0x64
 8015958:	d001      	beq.n	801595e <_printf_i+0x42>
 801595a:	2969      	cmp	r1, #105	; 0x69
 801595c:	d1f6      	bne.n	801594c <_printf_i+0x30>
 801595e:	6820      	ldr	r0, [r4, #0]
 8015960:	6813      	ldr	r3, [r2, #0]
 8015962:	0605      	lsls	r5, r0, #24
 8015964:	f103 0104 	add.w	r1, r3, #4
 8015968:	d52a      	bpl.n	80159c0 <_printf_i+0xa4>
 801596a:	681b      	ldr	r3, [r3, #0]
 801596c:	6011      	str	r1, [r2, #0]
 801596e:	2b00      	cmp	r3, #0
 8015970:	da03      	bge.n	801597a <_printf_i+0x5e>
 8015972:	222d      	movs	r2, #45	; 0x2d
 8015974:	425b      	negs	r3, r3
 8015976:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801597a:	486f      	ldr	r0, [pc, #444]	; (8015b38 <_printf_i+0x21c>)
 801597c:	220a      	movs	r2, #10
 801597e:	e039      	b.n	80159f4 <_printf_i+0xd8>
 8015980:	2973      	cmp	r1, #115	; 0x73
 8015982:	f000 809d 	beq.w	8015ac0 <_printf_i+0x1a4>
 8015986:	d808      	bhi.n	801599a <_printf_i+0x7e>
 8015988:	296f      	cmp	r1, #111	; 0x6f
 801598a:	d020      	beq.n	80159ce <_printf_i+0xb2>
 801598c:	2970      	cmp	r1, #112	; 0x70
 801598e:	d1dd      	bne.n	801594c <_printf_i+0x30>
 8015990:	6823      	ldr	r3, [r4, #0]
 8015992:	f043 0320 	orr.w	r3, r3, #32
 8015996:	6023      	str	r3, [r4, #0]
 8015998:	e003      	b.n	80159a2 <_printf_i+0x86>
 801599a:	2975      	cmp	r1, #117	; 0x75
 801599c:	d017      	beq.n	80159ce <_printf_i+0xb2>
 801599e:	2978      	cmp	r1, #120	; 0x78
 80159a0:	d1d4      	bne.n	801594c <_printf_i+0x30>
 80159a2:	2378      	movs	r3, #120	; 0x78
 80159a4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80159a8:	4864      	ldr	r0, [pc, #400]	; (8015b3c <_printf_i+0x220>)
 80159aa:	e055      	b.n	8015a58 <_printf_i+0x13c>
 80159ac:	6813      	ldr	r3, [r2, #0]
 80159ae:	1d19      	adds	r1, r3, #4
 80159b0:	681b      	ldr	r3, [r3, #0]
 80159b2:	6011      	str	r1, [r2, #0]
 80159b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80159b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80159bc:	2301      	movs	r3, #1
 80159be:	e08c      	b.n	8015ada <_printf_i+0x1be>
 80159c0:	681b      	ldr	r3, [r3, #0]
 80159c2:	6011      	str	r1, [r2, #0]
 80159c4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80159c8:	bf18      	it	ne
 80159ca:	b21b      	sxthne	r3, r3
 80159cc:	e7cf      	b.n	801596e <_printf_i+0x52>
 80159ce:	6813      	ldr	r3, [r2, #0]
 80159d0:	6825      	ldr	r5, [r4, #0]
 80159d2:	1d18      	adds	r0, r3, #4
 80159d4:	6010      	str	r0, [r2, #0]
 80159d6:	0628      	lsls	r0, r5, #24
 80159d8:	d501      	bpl.n	80159de <_printf_i+0xc2>
 80159da:	681b      	ldr	r3, [r3, #0]
 80159dc:	e002      	b.n	80159e4 <_printf_i+0xc8>
 80159de:	0668      	lsls	r0, r5, #25
 80159e0:	d5fb      	bpl.n	80159da <_printf_i+0xbe>
 80159e2:	881b      	ldrh	r3, [r3, #0]
 80159e4:	4854      	ldr	r0, [pc, #336]	; (8015b38 <_printf_i+0x21c>)
 80159e6:	296f      	cmp	r1, #111	; 0x6f
 80159e8:	bf14      	ite	ne
 80159ea:	220a      	movne	r2, #10
 80159ec:	2208      	moveq	r2, #8
 80159ee:	2100      	movs	r1, #0
 80159f0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80159f4:	6865      	ldr	r5, [r4, #4]
 80159f6:	60a5      	str	r5, [r4, #8]
 80159f8:	2d00      	cmp	r5, #0
 80159fa:	f2c0 8095 	blt.w	8015b28 <_printf_i+0x20c>
 80159fe:	6821      	ldr	r1, [r4, #0]
 8015a00:	f021 0104 	bic.w	r1, r1, #4
 8015a04:	6021      	str	r1, [r4, #0]
 8015a06:	2b00      	cmp	r3, #0
 8015a08:	d13d      	bne.n	8015a86 <_printf_i+0x16a>
 8015a0a:	2d00      	cmp	r5, #0
 8015a0c:	f040 808e 	bne.w	8015b2c <_printf_i+0x210>
 8015a10:	4665      	mov	r5, ip
 8015a12:	2a08      	cmp	r2, #8
 8015a14:	d10b      	bne.n	8015a2e <_printf_i+0x112>
 8015a16:	6823      	ldr	r3, [r4, #0]
 8015a18:	07db      	lsls	r3, r3, #31
 8015a1a:	d508      	bpl.n	8015a2e <_printf_i+0x112>
 8015a1c:	6923      	ldr	r3, [r4, #16]
 8015a1e:	6862      	ldr	r2, [r4, #4]
 8015a20:	429a      	cmp	r2, r3
 8015a22:	bfde      	ittt	le
 8015a24:	2330      	movle	r3, #48	; 0x30
 8015a26:	f805 3c01 	strble.w	r3, [r5, #-1]
 8015a2a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8015a2e:	ebac 0305 	sub.w	r3, ip, r5
 8015a32:	6123      	str	r3, [r4, #16]
 8015a34:	f8cd 8000 	str.w	r8, [sp]
 8015a38:	463b      	mov	r3, r7
 8015a3a:	aa03      	add	r2, sp, #12
 8015a3c:	4621      	mov	r1, r4
 8015a3e:	4630      	mov	r0, r6
 8015a40:	f7ff fef6 	bl	8015830 <_printf_common>
 8015a44:	3001      	adds	r0, #1
 8015a46:	d14d      	bne.n	8015ae4 <_printf_i+0x1c8>
 8015a48:	f04f 30ff 	mov.w	r0, #4294967295
 8015a4c:	b005      	add	sp, #20
 8015a4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015a52:	4839      	ldr	r0, [pc, #228]	; (8015b38 <_printf_i+0x21c>)
 8015a54:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8015a58:	6813      	ldr	r3, [r2, #0]
 8015a5a:	6821      	ldr	r1, [r4, #0]
 8015a5c:	1d1d      	adds	r5, r3, #4
 8015a5e:	681b      	ldr	r3, [r3, #0]
 8015a60:	6015      	str	r5, [r2, #0]
 8015a62:	060a      	lsls	r2, r1, #24
 8015a64:	d50b      	bpl.n	8015a7e <_printf_i+0x162>
 8015a66:	07ca      	lsls	r2, r1, #31
 8015a68:	bf44      	itt	mi
 8015a6a:	f041 0120 	orrmi.w	r1, r1, #32
 8015a6e:	6021      	strmi	r1, [r4, #0]
 8015a70:	b91b      	cbnz	r3, 8015a7a <_printf_i+0x15e>
 8015a72:	6822      	ldr	r2, [r4, #0]
 8015a74:	f022 0220 	bic.w	r2, r2, #32
 8015a78:	6022      	str	r2, [r4, #0]
 8015a7a:	2210      	movs	r2, #16
 8015a7c:	e7b7      	b.n	80159ee <_printf_i+0xd2>
 8015a7e:	064d      	lsls	r5, r1, #25
 8015a80:	bf48      	it	mi
 8015a82:	b29b      	uxthmi	r3, r3
 8015a84:	e7ef      	b.n	8015a66 <_printf_i+0x14a>
 8015a86:	4665      	mov	r5, ip
 8015a88:	fbb3 f1f2 	udiv	r1, r3, r2
 8015a8c:	fb02 3311 	mls	r3, r2, r1, r3
 8015a90:	5cc3      	ldrb	r3, [r0, r3]
 8015a92:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8015a96:	460b      	mov	r3, r1
 8015a98:	2900      	cmp	r1, #0
 8015a9a:	d1f5      	bne.n	8015a88 <_printf_i+0x16c>
 8015a9c:	e7b9      	b.n	8015a12 <_printf_i+0xf6>
 8015a9e:	6813      	ldr	r3, [r2, #0]
 8015aa0:	6825      	ldr	r5, [r4, #0]
 8015aa2:	6961      	ldr	r1, [r4, #20]
 8015aa4:	1d18      	adds	r0, r3, #4
 8015aa6:	6010      	str	r0, [r2, #0]
 8015aa8:	0628      	lsls	r0, r5, #24
 8015aaa:	681b      	ldr	r3, [r3, #0]
 8015aac:	d501      	bpl.n	8015ab2 <_printf_i+0x196>
 8015aae:	6019      	str	r1, [r3, #0]
 8015ab0:	e002      	b.n	8015ab8 <_printf_i+0x19c>
 8015ab2:	066a      	lsls	r2, r5, #25
 8015ab4:	d5fb      	bpl.n	8015aae <_printf_i+0x192>
 8015ab6:	8019      	strh	r1, [r3, #0]
 8015ab8:	2300      	movs	r3, #0
 8015aba:	6123      	str	r3, [r4, #16]
 8015abc:	4665      	mov	r5, ip
 8015abe:	e7b9      	b.n	8015a34 <_printf_i+0x118>
 8015ac0:	6813      	ldr	r3, [r2, #0]
 8015ac2:	1d19      	adds	r1, r3, #4
 8015ac4:	6011      	str	r1, [r2, #0]
 8015ac6:	681d      	ldr	r5, [r3, #0]
 8015ac8:	6862      	ldr	r2, [r4, #4]
 8015aca:	2100      	movs	r1, #0
 8015acc:	4628      	mov	r0, r5
 8015ace:	f7ea fb9f 	bl	8000210 <memchr>
 8015ad2:	b108      	cbz	r0, 8015ad8 <_printf_i+0x1bc>
 8015ad4:	1b40      	subs	r0, r0, r5
 8015ad6:	6060      	str	r0, [r4, #4]
 8015ad8:	6863      	ldr	r3, [r4, #4]
 8015ada:	6123      	str	r3, [r4, #16]
 8015adc:	2300      	movs	r3, #0
 8015ade:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015ae2:	e7a7      	b.n	8015a34 <_printf_i+0x118>
 8015ae4:	6923      	ldr	r3, [r4, #16]
 8015ae6:	462a      	mov	r2, r5
 8015ae8:	4639      	mov	r1, r7
 8015aea:	4630      	mov	r0, r6
 8015aec:	47c0      	blx	r8
 8015aee:	3001      	adds	r0, #1
 8015af0:	d0aa      	beq.n	8015a48 <_printf_i+0x12c>
 8015af2:	6823      	ldr	r3, [r4, #0]
 8015af4:	079b      	lsls	r3, r3, #30
 8015af6:	d413      	bmi.n	8015b20 <_printf_i+0x204>
 8015af8:	68e0      	ldr	r0, [r4, #12]
 8015afa:	9b03      	ldr	r3, [sp, #12]
 8015afc:	4298      	cmp	r0, r3
 8015afe:	bfb8      	it	lt
 8015b00:	4618      	movlt	r0, r3
 8015b02:	e7a3      	b.n	8015a4c <_printf_i+0x130>
 8015b04:	2301      	movs	r3, #1
 8015b06:	464a      	mov	r2, r9
 8015b08:	4639      	mov	r1, r7
 8015b0a:	4630      	mov	r0, r6
 8015b0c:	47c0      	blx	r8
 8015b0e:	3001      	adds	r0, #1
 8015b10:	d09a      	beq.n	8015a48 <_printf_i+0x12c>
 8015b12:	3501      	adds	r5, #1
 8015b14:	68e3      	ldr	r3, [r4, #12]
 8015b16:	9a03      	ldr	r2, [sp, #12]
 8015b18:	1a9b      	subs	r3, r3, r2
 8015b1a:	42ab      	cmp	r3, r5
 8015b1c:	dcf2      	bgt.n	8015b04 <_printf_i+0x1e8>
 8015b1e:	e7eb      	b.n	8015af8 <_printf_i+0x1dc>
 8015b20:	2500      	movs	r5, #0
 8015b22:	f104 0919 	add.w	r9, r4, #25
 8015b26:	e7f5      	b.n	8015b14 <_printf_i+0x1f8>
 8015b28:	2b00      	cmp	r3, #0
 8015b2a:	d1ac      	bne.n	8015a86 <_printf_i+0x16a>
 8015b2c:	7803      	ldrb	r3, [r0, #0]
 8015b2e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015b32:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015b36:	e76c      	b.n	8015a12 <_printf_i+0xf6>
 8015b38:	08019ee0 	.word	0x08019ee0
 8015b3c:	08019ef1 	.word	0x08019ef1

08015b40 <_scanf_float>:
 8015b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b44:	469a      	mov	sl, r3
 8015b46:	688b      	ldr	r3, [r1, #8]
 8015b48:	4616      	mov	r6, r2
 8015b4a:	1e5a      	subs	r2, r3, #1
 8015b4c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8015b50:	b087      	sub	sp, #28
 8015b52:	bf83      	ittte	hi
 8015b54:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8015b58:	189b      	addhi	r3, r3, r2
 8015b5a:	9301      	strhi	r3, [sp, #4]
 8015b5c:	2300      	movls	r3, #0
 8015b5e:	bf86      	itte	hi
 8015b60:	f240 135d 	movwhi	r3, #349	; 0x15d
 8015b64:	608b      	strhi	r3, [r1, #8]
 8015b66:	9301      	strls	r3, [sp, #4]
 8015b68:	680b      	ldr	r3, [r1, #0]
 8015b6a:	4688      	mov	r8, r1
 8015b6c:	f04f 0b00 	mov.w	fp, #0
 8015b70:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8015b74:	f848 3b1c 	str.w	r3, [r8], #28
 8015b78:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8015b7c:	4607      	mov	r7, r0
 8015b7e:	460c      	mov	r4, r1
 8015b80:	4645      	mov	r5, r8
 8015b82:	465a      	mov	r2, fp
 8015b84:	46d9      	mov	r9, fp
 8015b86:	f8cd b008 	str.w	fp, [sp, #8]
 8015b8a:	68a1      	ldr	r1, [r4, #8]
 8015b8c:	b181      	cbz	r1, 8015bb0 <_scanf_float+0x70>
 8015b8e:	6833      	ldr	r3, [r6, #0]
 8015b90:	781b      	ldrb	r3, [r3, #0]
 8015b92:	2b49      	cmp	r3, #73	; 0x49
 8015b94:	d071      	beq.n	8015c7a <_scanf_float+0x13a>
 8015b96:	d84d      	bhi.n	8015c34 <_scanf_float+0xf4>
 8015b98:	2b39      	cmp	r3, #57	; 0x39
 8015b9a:	d840      	bhi.n	8015c1e <_scanf_float+0xde>
 8015b9c:	2b31      	cmp	r3, #49	; 0x31
 8015b9e:	f080 8088 	bcs.w	8015cb2 <_scanf_float+0x172>
 8015ba2:	2b2d      	cmp	r3, #45	; 0x2d
 8015ba4:	f000 8090 	beq.w	8015cc8 <_scanf_float+0x188>
 8015ba8:	d815      	bhi.n	8015bd6 <_scanf_float+0x96>
 8015baa:	2b2b      	cmp	r3, #43	; 0x2b
 8015bac:	f000 808c 	beq.w	8015cc8 <_scanf_float+0x188>
 8015bb0:	f1b9 0f00 	cmp.w	r9, #0
 8015bb4:	d003      	beq.n	8015bbe <_scanf_float+0x7e>
 8015bb6:	6823      	ldr	r3, [r4, #0]
 8015bb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8015bbc:	6023      	str	r3, [r4, #0]
 8015bbe:	3a01      	subs	r2, #1
 8015bc0:	2a01      	cmp	r2, #1
 8015bc2:	f200 80ea 	bhi.w	8015d9a <_scanf_float+0x25a>
 8015bc6:	4545      	cmp	r5, r8
 8015bc8:	f200 80dc 	bhi.w	8015d84 <_scanf_float+0x244>
 8015bcc:	2601      	movs	r6, #1
 8015bce:	4630      	mov	r0, r6
 8015bd0:	b007      	add	sp, #28
 8015bd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015bd6:	2b2e      	cmp	r3, #46	; 0x2e
 8015bd8:	f000 809f 	beq.w	8015d1a <_scanf_float+0x1da>
 8015bdc:	2b30      	cmp	r3, #48	; 0x30
 8015bde:	d1e7      	bne.n	8015bb0 <_scanf_float+0x70>
 8015be0:	6820      	ldr	r0, [r4, #0]
 8015be2:	f410 7f80 	tst.w	r0, #256	; 0x100
 8015be6:	d064      	beq.n	8015cb2 <_scanf_float+0x172>
 8015be8:	9b01      	ldr	r3, [sp, #4]
 8015bea:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8015bee:	6020      	str	r0, [r4, #0]
 8015bf0:	f109 0901 	add.w	r9, r9, #1
 8015bf4:	b11b      	cbz	r3, 8015bfe <_scanf_float+0xbe>
 8015bf6:	3b01      	subs	r3, #1
 8015bf8:	3101      	adds	r1, #1
 8015bfa:	9301      	str	r3, [sp, #4]
 8015bfc:	60a1      	str	r1, [r4, #8]
 8015bfe:	68a3      	ldr	r3, [r4, #8]
 8015c00:	3b01      	subs	r3, #1
 8015c02:	60a3      	str	r3, [r4, #8]
 8015c04:	6923      	ldr	r3, [r4, #16]
 8015c06:	3301      	adds	r3, #1
 8015c08:	6123      	str	r3, [r4, #16]
 8015c0a:	6873      	ldr	r3, [r6, #4]
 8015c0c:	3b01      	subs	r3, #1
 8015c0e:	2b00      	cmp	r3, #0
 8015c10:	6073      	str	r3, [r6, #4]
 8015c12:	f340 80ac 	ble.w	8015d6e <_scanf_float+0x22e>
 8015c16:	6833      	ldr	r3, [r6, #0]
 8015c18:	3301      	adds	r3, #1
 8015c1a:	6033      	str	r3, [r6, #0]
 8015c1c:	e7b5      	b.n	8015b8a <_scanf_float+0x4a>
 8015c1e:	2b45      	cmp	r3, #69	; 0x45
 8015c20:	f000 8085 	beq.w	8015d2e <_scanf_float+0x1ee>
 8015c24:	2b46      	cmp	r3, #70	; 0x46
 8015c26:	d06a      	beq.n	8015cfe <_scanf_float+0x1be>
 8015c28:	2b41      	cmp	r3, #65	; 0x41
 8015c2a:	d1c1      	bne.n	8015bb0 <_scanf_float+0x70>
 8015c2c:	2a01      	cmp	r2, #1
 8015c2e:	d1bf      	bne.n	8015bb0 <_scanf_float+0x70>
 8015c30:	2202      	movs	r2, #2
 8015c32:	e046      	b.n	8015cc2 <_scanf_float+0x182>
 8015c34:	2b65      	cmp	r3, #101	; 0x65
 8015c36:	d07a      	beq.n	8015d2e <_scanf_float+0x1ee>
 8015c38:	d818      	bhi.n	8015c6c <_scanf_float+0x12c>
 8015c3a:	2b54      	cmp	r3, #84	; 0x54
 8015c3c:	d066      	beq.n	8015d0c <_scanf_float+0x1cc>
 8015c3e:	d811      	bhi.n	8015c64 <_scanf_float+0x124>
 8015c40:	2b4e      	cmp	r3, #78	; 0x4e
 8015c42:	d1b5      	bne.n	8015bb0 <_scanf_float+0x70>
 8015c44:	2a00      	cmp	r2, #0
 8015c46:	d146      	bne.n	8015cd6 <_scanf_float+0x196>
 8015c48:	f1b9 0f00 	cmp.w	r9, #0
 8015c4c:	d145      	bne.n	8015cda <_scanf_float+0x19a>
 8015c4e:	6821      	ldr	r1, [r4, #0]
 8015c50:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8015c54:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8015c58:	d13f      	bne.n	8015cda <_scanf_float+0x19a>
 8015c5a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8015c5e:	6021      	str	r1, [r4, #0]
 8015c60:	2201      	movs	r2, #1
 8015c62:	e02e      	b.n	8015cc2 <_scanf_float+0x182>
 8015c64:	2b59      	cmp	r3, #89	; 0x59
 8015c66:	d01e      	beq.n	8015ca6 <_scanf_float+0x166>
 8015c68:	2b61      	cmp	r3, #97	; 0x61
 8015c6a:	e7de      	b.n	8015c2a <_scanf_float+0xea>
 8015c6c:	2b6e      	cmp	r3, #110	; 0x6e
 8015c6e:	d0e9      	beq.n	8015c44 <_scanf_float+0x104>
 8015c70:	d815      	bhi.n	8015c9e <_scanf_float+0x15e>
 8015c72:	2b66      	cmp	r3, #102	; 0x66
 8015c74:	d043      	beq.n	8015cfe <_scanf_float+0x1be>
 8015c76:	2b69      	cmp	r3, #105	; 0x69
 8015c78:	d19a      	bne.n	8015bb0 <_scanf_float+0x70>
 8015c7a:	f1bb 0f00 	cmp.w	fp, #0
 8015c7e:	d138      	bne.n	8015cf2 <_scanf_float+0x1b2>
 8015c80:	f1b9 0f00 	cmp.w	r9, #0
 8015c84:	d197      	bne.n	8015bb6 <_scanf_float+0x76>
 8015c86:	6821      	ldr	r1, [r4, #0]
 8015c88:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8015c8c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8015c90:	d195      	bne.n	8015bbe <_scanf_float+0x7e>
 8015c92:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8015c96:	6021      	str	r1, [r4, #0]
 8015c98:	f04f 0b01 	mov.w	fp, #1
 8015c9c:	e011      	b.n	8015cc2 <_scanf_float+0x182>
 8015c9e:	2b74      	cmp	r3, #116	; 0x74
 8015ca0:	d034      	beq.n	8015d0c <_scanf_float+0x1cc>
 8015ca2:	2b79      	cmp	r3, #121	; 0x79
 8015ca4:	d184      	bne.n	8015bb0 <_scanf_float+0x70>
 8015ca6:	f1bb 0f07 	cmp.w	fp, #7
 8015caa:	d181      	bne.n	8015bb0 <_scanf_float+0x70>
 8015cac:	f04f 0b08 	mov.w	fp, #8
 8015cb0:	e007      	b.n	8015cc2 <_scanf_float+0x182>
 8015cb2:	eb12 0f0b 	cmn.w	r2, fp
 8015cb6:	f47f af7b 	bne.w	8015bb0 <_scanf_float+0x70>
 8015cba:	6821      	ldr	r1, [r4, #0]
 8015cbc:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8015cc0:	6021      	str	r1, [r4, #0]
 8015cc2:	702b      	strb	r3, [r5, #0]
 8015cc4:	3501      	adds	r5, #1
 8015cc6:	e79a      	b.n	8015bfe <_scanf_float+0xbe>
 8015cc8:	6821      	ldr	r1, [r4, #0]
 8015cca:	0608      	lsls	r0, r1, #24
 8015ccc:	f57f af70 	bpl.w	8015bb0 <_scanf_float+0x70>
 8015cd0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8015cd4:	e7f4      	b.n	8015cc0 <_scanf_float+0x180>
 8015cd6:	2a02      	cmp	r2, #2
 8015cd8:	d047      	beq.n	8015d6a <_scanf_float+0x22a>
 8015cda:	f1bb 0f01 	cmp.w	fp, #1
 8015cde:	d003      	beq.n	8015ce8 <_scanf_float+0x1a8>
 8015ce0:	f1bb 0f04 	cmp.w	fp, #4
 8015ce4:	f47f af64 	bne.w	8015bb0 <_scanf_float+0x70>
 8015ce8:	f10b 0b01 	add.w	fp, fp, #1
 8015cec:	fa5f fb8b 	uxtb.w	fp, fp
 8015cf0:	e7e7      	b.n	8015cc2 <_scanf_float+0x182>
 8015cf2:	f1bb 0f03 	cmp.w	fp, #3
 8015cf6:	d0f7      	beq.n	8015ce8 <_scanf_float+0x1a8>
 8015cf8:	f1bb 0f05 	cmp.w	fp, #5
 8015cfc:	e7f2      	b.n	8015ce4 <_scanf_float+0x1a4>
 8015cfe:	f1bb 0f02 	cmp.w	fp, #2
 8015d02:	f47f af55 	bne.w	8015bb0 <_scanf_float+0x70>
 8015d06:	f04f 0b03 	mov.w	fp, #3
 8015d0a:	e7da      	b.n	8015cc2 <_scanf_float+0x182>
 8015d0c:	f1bb 0f06 	cmp.w	fp, #6
 8015d10:	f47f af4e 	bne.w	8015bb0 <_scanf_float+0x70>
 8015d14:	f04f 0b07 	mov.w	fp, #7
 8015d18:	e7d3      	b.n	8015cc2 <_scanf_float+0x182>
 8015d1a:	6821      	ldr	r1, [r4, #0]
 8015d1c:	0588      	lsls	r0, r1, #22
 8015d1e:	f57f af47 	bpl.w	8015bb0 <_scanf_float+0x70>
 8015d22:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8015d26:	6021      	str	r1, [r4, #0]
 8015d28:	f8cd 9008 	str.w	r9, [sp, #8]
 8015d2c:	e7c9      	b.n	8015cc2 <_scanf_float+0x182>
 8015d2e:	6821      	ldr	r1, [r4, #0]
 8015d30:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8015d34:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8015d38:	d006      	beq.n	8015d48 <_scanf_float+0x208>
 8015d3a:	0548      	lsls	r0, r1, #21
 8015d3c:	f57f af38 	bpl.w	8015bb0 <_scanf_float+0x70>
 8015d40:	f1b9 0f00 	cmp.w	r9, #0
 8015d44:	f43f af3b 	beq.w	8015bbe <_scanf_float+0x7e>
 8015d48:	0588      	lsls	r0, r1, #22
 8015d4a:	bf58      	it	pl
 8015d4c:	9802      	ldrpl	r0, [sp, #8]
 8015d4e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8015d52:	bf58      	it	pl
 8015d54:	eba9 0000 	subpl.w	r0, r9, r0
 8015d58:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8015d5c:	bf58      	it	pl
 8015d5e:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8015d62:	6021      	str	r1, [r4, #0]
 8015d64:	f04f 0900 	mov.w	r9, #0
 8015d68:	e7ab      	b.n	8015cc2 <_scanf_float+0x182>
 8015d6a:	2203      	movs	r2, #3
 8015d6c:	e7a9      	b.n	8015cc2 <_scanf_float+0x182>
 8015d6e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8015d72:	9205      	str	r2, [sp, #20]
 8015d74:	4631      	mov	r1, r6
 8015d76:	4638      	mov	r0, r7
 8015d78:	4798      	blx	r3
 8015d7a:	9a05      	ldr	r2, [sp, #20]
 8015d7c:	2800      	cmp	r0, #0
 8015d7e:	f43f af04 	beq.w	8015b8a <_scanf_float+0x4a>
 8015d82:	e715      	b.n	8015bb0 <_scanf_float+0x70>
 8015d84:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015d88:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8015d8c:	4632      	mov	r2, r6
 8015d8e:	4638      	mov	r0, r7
 8015d90:	4798      	blx	r3
 8015d92:	6923      	ldr	r3, [r4, #16]
 8015d94:	3b01      	subs	r3, #1
 8015d96:	6123      	str	r3, [r4, #16]
 8015d98:	e715      	b.n	8015bc6 <_scanf_float+0x86>
 8015d9a:	f10b 33ff 	add.w	r3, fp, #4294967295
 8015d9e:	2b06      	cmp	r3, #6
 8015da0:	d80a      	bhi.n	8015db8 <_scanf_float+0x278>
 8015da2:	f1bb 0f02 	cmp.w	fp, #2
 8015da6:	d968      	bls.n	8015e7a <_scanf_float+0x33a>
 8015da8:	f1ab 0b03 	sub.w	fp, fp, #3
 8015dac:	fa5f fb8b 	uxtb.w	fp, fp
 8015db0:	eba5 0b0b 	sub.w	fp, r5, fp
 8015db4:	455d      	cmp	r5, fp
 8015db6:	d14b      	bne.n	8015e50 <_scanf_float+0x310>
 8015db8:	6823      	ldr	r3, [r4, #0]
 8015dba:	05da      	lsls	r2, r3, #23
 8015dbc:	d51f      	bpl.n	8015dfe <_scanf_float+0x2be>
 8015dbe:	055b      	lsls	r3, r3, #21
 8015dc0:	d468      	bmi.n	8015e94 <_scanf_float+0x354>
 8015dc2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8015dc6:	6923      	ldr	r3, [r4, #16]
 8015dc8:	2965      	cmp	r1, #101	; 0x65
 8015dca:	f103 33ff 	add.w	r3, r3, #4294967295
 8015dce:	f105 3bff 	add.w	fp, r5, #4294967295
 8015dd2:	6123      	str	r3, [r4, #16]
 8015dd4:	d00d      	beq.n	8015df2 <_scanf_float+0x2b2>
 8015dd6:	2945      	cmp	r1, #69	; 0x45
 8015dd8:	d00b      	beq.n	8015df2 <_scanf_float+0x2b2>
 8015dda:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015dde:	4632      	mov	r2, r6
 8015de0:	4638      	mov	r0, r7
 8015de2:	4798      	blx	r3
 8015de4:	6923      	ldr	r3, [r4, #16]
 8015de6:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8015dea:	3b01      	subs	r3, #1
 8015dec:	f1a5 0b02 	sub.w	fp, r5, #2
 8015df0:	6123      	str	r3, [r4, #16]
 8015df2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015df6:	4632      	mov	r2, r6
 8015df8:	4638      	mov	r0, r7
 8015dfa:	4798      	blx	r3
 8015dfc:	465d      	mov	r5, fp
 8015dfe:	6826      	ldr	r6, [r4, #0]
 8015e00:	f016 0610 	ands.w	r6, r6, #16
 8015e04:	d17a      	bne.n	8015efc <_scanf_float+0x3bc>
 8015e06:	702e      	strb	r6, [r5, #0]
 8015e08:	6823      	ldr	r3, [r4, #0]
 8015e0a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8015e0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8015e12:	d142      	bne.n	8015e9a <_scanf_float+0x35a>
 8015e14:	9b02      	ldr	r3, [sp, #8]
 8015e16:	eba9 0303 	sub.w	r3, r9, r3
 8015e1a:	425a      	negs	r2, r3
 8015e1c:	2b00      	cmp	r3, #0
 8015e1e:	d149      	bne.n	8015eb4 <_scanf_float+0x374>
 8015e20:	2200      	movs	r2, #0
 8015e22:	4641      	mov	r1, r8
 8015e24:	4638      	mov	r0, r7
 8015e26:	f000 ff0b 	bl	8016c40 <_strtod_r>
 8015e2a:	6825      	ldr	r5, [r4, #0]
 8015e2c:	f8da 3000 	ldr.w	r3, [sl]
 8015e30:	f015 0f02 	tst.w	r5, #2
 8015e34:	f103 0204 	add.w	r2, r3, #4
 8015e38:	ec59 8b10 	vmov	r8, r9, d0
 8015e3c:	f8ca 2000 	str.w	r2, [sl]
 8015e40:	d043      	beq.n	8015eca <_scanf_float+0x38a>
 8015e42:	681b      	ldr	r3, [r3, #0]
 8015e44:	e9c3 8900 	strd	r8, r9, [r3]
 8015e48:	68e3      	ldr	r3, [r4, #12]
 8015e4a:	3301      	adds	r3, #1
 8015e4c:	60e3      	str	r3, [r4, #12]
 8015e4e:	e6be      	b.n	8015bce <_scanf_float+0x8e>
 8015e50:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015e54:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8015e58:	4632      	mov	r2, r6
 8015e5a:	4638      	mov	r0, r7
 8015e5c:	4798      	blx	r3
 8015e5e:	6923      	ldr	r3, [r4, #16]
 8015e60:	3b01      	subs	r3, #1
 8015e62:	6123      	str	r3, [r4, #16]
 8015e64:	e7a6      	b.n	8015db4 <_scanf_float+0x274>
 8015e66:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015e6a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8015e6e:	4632      	mov	r2, r6
 8015e70:	4638      	mov	r0, r7
 8015e72:	4798      	blx	r3
 8015e74:	6923      	ldr	r3, [r4, #16]
 8015e76:	3b01      	subs	r3, #1
 8015e78:	6123      	str	r3, [r4, #16]
 8015e7a:	4545      	cmp	r5, r8
 8015e7c:	d8f3      	bhi.n	8015e66 <_scanf_float+0x326>
 8015e7e:	e6a5      	b.n	8015bcc <_scanf_float+0x8c>
 8015e80:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8015e84:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8015e88:	4632      	mov	r2, r6
 8015e8a:	4638      	mov	r0, r7
 8015e8c:	4798      	blx	r3
 8015e8e:	6923      	ldr	r3, [r4, #16]
 8015e90:	3b01      	subs	r3, #1
 8015e92:	6123      	str	r3, [r4, #16]
 8015e94:	4545      	cmp	r5, r8
 8015e96:	d8f3      	bhi.n	8015e80 <_scanf_float+0x340>
 8015e98:	e698      	b.n	8015bcc <_scanf_float+0x8c>
 8015e9a:	9b03      	ldr	r3, [sp, #12]
 8015e9c:	2b00      	cmp	r3, #0
 8015e9e:	d0bf      	beq.n	8015e20 <_scanf_float+0x2e0>
 8015ea0:	9904      	ldr	r1, [sp, #16]
 8015ea2:	230a      	movs	r3, #10
 8015ea4:	4632      	mov	r2, r6
 8015ea6:	3101      	adds	r1, #1
 8015ea8:	4638      	mov	r0, r7
 8015eaa:	f000 ff55 	bl	8016d58 <_strtol_r>
 8015eae:	9b03      	ldr	r3, [sp, #12]
 8015eb0:	9d04      	ldr	r5, [sp, #16]
 8015eb2:	1ac2      	subs	r2, r0, r3
 8015eb4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8015eb8:	429d      	cmp	r5, r3
 8015eba:	bf28      	it	cs
 8015ebc:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8015ec0:	490f      	ldr	r1, [pc, #60]	; (8015f00 <_scanf_float+0x3c0>)
 8015ec2:	4628      	mov	r0, r5
 8015ec4:	f000 f858 	bl	8015f78 <siprintf>
 8015ec8:	e7aa      	b.n	8015e20 <_scanf_float+0x2e0>
 8015eca:	f015 0504 	ands.w	r5, r5, #4
 8015ece:	d1b8      	bne.n	8015e42 <_scanf_float+0x302>
 8015ed0:	681f      	ldr	r7, [r3, #0]
 8015ed2:	ee10 2a10 	vmov	r2, s0
 8015ed6:	464b      	mov	r3, r9
 8015ed8:	ee10 0a10 	vmov	r0, s0
 8015edc:	4649      	mov	r1, r9
 8015ede:	f7ea fe3d 	bl	8000b5c <__aeabi_dcmpun>
 8015ee2:	b128      	cbz	r0, 8015ef0 <_scanf_float+0x3b0>
 8015ee4:	4628      	mov	r0, r5
 8015ee6:	f000 f80d 	bl	8015f04 <nanf>
 8015eea:	ed87 0a00 	vstr	s0, [r7]
 8015eee:	e7ab      	b.n	8015e48 <_scanf_float+0x308>
 8015ef0:	4640      	mov	r0, r8
 8015ef2:	4649      	mov	r1, r9
 8015ef4:	f7ea fe90 	bl	8000c18 <__aeabi_d2f>
 8015ef8:	6038      	str	r0, [r7, #0]
 8015efa:	e7a5      	b.n	8015e48 <_scanf_float+0x308>
 8015efc:	2600      	movs	r6, #0
 8015efe:	e666      	b.n	8015bce <_scanf_float+0x8e>
 8015f00:	08019f02 	.word	0x08019f02

08015f04 <nanf>:
 8015f04:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8015f0c <nanf+0x8>
 8015f08:	4770      	bx	lr
 8015f0a:	bf00      	nop
 8015f0c:	7fc00000 	.word	0x7fc00000

08015f10 <sniprintf>:
 8015f10:	b40c      	push	{r2, r3}
 8015f12:	b530      	push	{r4, r5, lr}
 8015f14:	4b17      	ldr	r3, [pc, #92]	; (8015f74 <sniprintf+0x64>)
 8015f16:	1e0c      	subs	r4, r1, #0
 8015f18:	b09d      	sub	sp, #116	; 0x74
 8015f1a:	681d      	ldr	r5, [r3, #0]
 8015f1c:	da08      	bge.n	8015f30 <sniprintf+0x20>
 8015f1e:	238b      	movs	r3, #139	; 0x8b
 8015f20:	602b      	str	r3, [r5, #0]
 8015f22:	f04f 30ff 	mov.w	r0, #4294967295
 8015f26:	b01d      	add	sp, #116	; 0x74
 8015f28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015f2c:	b002      	add	sp, #8
 8015f2e:	4770      	bx	lr
 8015f30:	f44f 7302 	mov.w	r3, #520	; 0x208
 8015f34:	f8ad 3014 	strh.w	r3, [sp, #20]
 8015f38:	bf14      	ite	ne
 8015f3a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8015f3e:	4623      	moveq	r3, r4
 8015f40:	9304      	str	r3, [sp, #16]
 8015f42:	9307      	str	r3, [sp, #28]
 8015f44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015f48:	9002      	str	r0, [sp, #8]
 8015f4a:	9006      	str	r0, [sp, #24]
 8015f4c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015f50:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8015f52:	ab21      	add	r3, sp, #132	; 0x84
 8015f54:	a902      	add	r1, sp, #8
 8015f56:	4628      	mov	r0, r5
 8015f58:	9301      	str	r3, [sp, #4]
 8015f5a:	f002 fde7 	bl	8018b2c <_svfiprintf_r>
 8015f5e:	1c43      	adds	r3, r0, #1
 8015f60:	bfbc      	itt	lt
 8015f62:	238b      	movlt	r3, #139	; 0x8b
 8015f64:	602b      	strlt	r3, [r5, #0]
 8015f66:	2c00      	cmp	r4, #0
 8015f68:	d0dd      	beq.n	8015f26 <sniprintf+0x16>
 8015f6a:	9b02      	ldr	r3, [sp, #8]
 8015f6c:	2200      	movs	r2, #0
 8015f6e:	701a      	strb	r2, [r3, #0]
 8015f70:	e7d9      	b.n	8015f26 <sniprintf+0x16>
 8015f72:	bf00      	nop
 8015f74:	2000000c 	.word	0x2000000c

08015f78 <siprintf>:
 8015f78:	b40e      	push	{r1, r2, r3}
 8015f7a:	b500      	push	{lr}
 8015f7c:	b09c      	sub	sp, #112	; 0x70
 8015f7e:	ab1d      	add	r3, sp, #116	; 0x74
 8015f80:	9002      	str	r0, [sp, #8]
 8015f82:	9006      	str	r0, [sp, #24]
 8015f84:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015f88:	4809      	ldr	r0, [pc, #36]	; (8015fb0 <siprintf+0x38>)
 8015f8a:	9107      	str	r1, [sp, #28]
 8015f8c:	9104      	str	r1, [sp, #16]
 8015f8e:	4909      	ldr	r1, [pc, #36]	; (8015fb4 <siprintf+0x3c>)
 8015f90:	f853 2b04 	ldr.w	r2, [r3], #4
 8015f94:	9105      	str	r1, [sp, #20]
 8015f96:	6800      	ldr	r0, [r0, #0]
 8015f98:	9301      	str	r3, [sp, #4]
 8015f9a:	a902      	add	r1, sp, #8
 8015f9c:	f002 fdc6 	bl	8018b2c <_svfiprintf_r>
 8015fa0:	9b02      	ldr	r3, [sp, #8]
 8015fa2:	2200      	movs	r2, #0
 8015fa4:	701a      	strb	r2, [r3, #0]
 8015fa6:	b01c      	add	sp, #112	; 0x70
 8015fa8:	f85d eb04 	ldr.w	lr, [sp], #4
 8015fac:	b003      	add	sp, #12
 8015fae:	4770      	bx	lr
 8015fb0:	2000000c 	.word	0x2000000c
 8015fb4:	ffff0208 	.word	0xffff0208

08015fb8 <siscanf>:
 8015fb8:	b40e      	push	{r1, r2, r3}
 8015fba:	b530      	push	{r4, r5, lr}
 8015fbc:	b09c      	sub	sp, #112	; 0x70
 8015fbe:	ac1f      	add	r4, sp, #124	; 0x7c
 8015fc0:	f44f 7201 	mov.w	r2, #516	; 0x204
 8015fc4:	f854 5b04 	ldr.w	r5, [r4], #4
 8015fc8:	f8ad 2014 	strh.w	r2, [sp, #20]
 8015fcc:	9002      	str	r0, [sp, #8]
 8015fce:	9006      	str	r0, [sp, #24]
 8015fd0:	f7ea f916 	bl	8000200 <strlen>
 8015fd4:	4b0b      	ldr	r3, [pc, #44]	; (8016004 <siscanf+0x4c>)
 8015fd6:	9003      	str	r0, [sp, #12]
 8015fd8:	9007      	str	r0, [sp, #28]
 8015fda:	930b      	str	r3, [sp, #44]	; 0x2c
 8015fdc:	480a      	ldr	r0, [pc, #40]	; (8016008 <siscanf+0x50>)
 8015fde:	9401      	str	r4, [sp, #4]
 8015fe0:	2300      	movs	r3, #0
 8015fe2:	930f      	str	r3, [sp, #60]	; 0x3c
 8015fe4:	9314      	str	r3, [sp, #80]	; 0x50
 8015fe6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015fea:	f8ad 3016 	strh.w	r3, [sp, #22]
 8015fee:	462a      	mov	r2, r5
 8015ff0:	4623      	mov	r3, r4
 8015ff2:	a902      	add	r1, sp, #8
 8015ff4:	6800      	ldr	r0, [r0, #0]
 8015ff6:	f002 feeb 	bl	8018dd0 <__ssvfiscanf_r>
 8015ffa:	b01c      	add	sp, #112	; 0x70
 8015ffc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016000:	b003      	add	sp, #12
 8016002:	4770      	bx	lr
 8016004:	0801600d 	.word	0x0801600d
 8016008:	2000000c 	.word	0x2000000c

0801600c <__seofread>:
 801600c:	2000      	movs	r0, #0
 801600e:	4770      	bx	lr

08016010 <strcpy>:
 8016010:	4603      	mov	r3, r0
 8016012:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016016:	f803 2b01 	strb.w	r2, [r3], #1
 801601a:	2a00      	cmp	r2, #0
 801601c:	d1f9      	bne.n	8016012 <strcpy+0x2>
 801601e:	4770      	bx	lr

08016020 <sulp>:
 8016020:	b570      	push	{r4, r5, r6, lr}
 8016022:	4604      	mov	r4, r0
 8016024:	460d      	mov	r5, r1
 8016026:	ec45 4b10 	vmov	d0, r4, r5
 801602a:	4616      	mov	r6, r2
 801602c:	f002 fb3a 	bl	80186a4 <__ulp>
 8016030:	ec51 0b10 	vmov	r0, r1, d0
 8016034:	b17e      	cbz	r6, 8016056 <sulp+0x36>
 8016036:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801603a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801603e:	2b00      	cmp	r3, #0
 8016040:	dd09      	ble.n	8016056 <sulp+0x36>
 8016042:	051b      	lsls	r3, r3, #20
 8016044:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8016048:	2400      	movs	r4, #0
 801604a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801604e:	4622      	mov	r2, r4
 8016050:	462b      	mov	r3, r5
 8016052:	f7ea fae9 	bl	8000628 <__aeabi_dmul>
 8016056:	bd70      	pop	{r4, r5, r6, pc}

08016058 <_strtod_l>:
 8016058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801605c:	461f      	mov	r7, r3
 801605e:	b0a1      	sub	sp, #132	; 0x84
 8016060:	2300      	movs	r3, #0
 8016062:	4681      	mov	r9, r0
 8016064:	4638      	mov	r0, r7
 8016066:	460e      	mov	r6, r1
 8016068:	9217      	str	r2, [sp, #92]	; 0x5c
 801606a:	931c      	str	r3, [sp, #112]	; 0x70
 801606c:	f002 f824 	bl	80180b8 <__localeconv_l>
 8016070:	4680      	mov	r8, r0
 8016072:	6800      	ldr	r0, [r0, #0]
 8016074:	f7ea f8c4 	bl	8000200 <strlen>
 8016078:	f04f 0a00 	mov.w	sl, #0
 801607c:	4604      	mov	r4, r0
 801607e:	f04f 0b00 	mov.w	fp, #0
 8016082:	961b      	str	r6, [sp, #108]	; 0x6c
 8016084:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016086:	781a      	ldrb	r2, [r3, #0]
 8016088:	2a0d      	cmp	r2, #13
 801608a:	d832      	bhi.n	80160f2 <_strtod_l+0x9a>
 801608c:	2a09      	cmp	r2, #9
 801608e:	d236      	bcs.n	80160fe <_strtod_l+0xa6>
 8016090:	2a00      	cmp	r2, #0
 8016092:	d03e      	beq.n	8016112 <_strtod_l+0xba>
 8016094:	2300      	movs	r3, #0
 8016096:	930d      	str	r3, [sp, #52]	; 0x34
 8016098:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 801609a:	782b      	ldrb	r3, [r5, #0]
 801609c:	2b30      	cmp	r3, #48	; 0x30
 801609e:	f040 80ac 	bne.w	80161fa <_strtod_l+0x1a2>
 80160a2:	786b      	ldrb	r3, [r5, #1]
 80160a4:	2b58      	cmp	r3, #88	; 0x58
 80160a6:	d001      	beq.n	80160ac <_strtod_l+0x54>
 80160a8:	2b78      	cmp	r3, #120	; 0x78
 80160aa:	d167      	bne.n	801617c <_strtod_l+0x124>
 80160ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80160ae:	9301      	str	r3, [sp, #4]
 80160b0:	ab1c      	add	r3, sp, #112	; 0x70
 80160b2:	9300      	str	r3, [sp, #0]
 80160b4:	9702      	str	r7, [sp, #8]
 80160b6:	ab1d      	add	r3, sp, #116	; 0x74
 80160b8:	4a88      	ldr	r2, [pc, #544]	; (80162dc <_strtod_l+0x284>)
 80160ba:	a91b      	add	r1, sp, #108	; 0x6c
 80160bc:	4648      	mov	r0, r9
 80160be:	f001 fd12 	bl	8017ae6 <__gethex>
 80160c2:	f010 0407 	ands.w	r4, r0, #7
 80160c6:	4606      	mov	r6, r0
 80160c8:	d005      	beq.n	80160d6 <_strtod_l+0x7e>
 80160ca:	2c06      	cmp	r4, #6
 80160cc:	d12b      	bne.n	8016126 <_strtod_l+0xce>
 80160ce:	3501      	adds	r5, #1
 80160d0:	2300      	movs	r3, #0
 80160d2:	951b      	str	r5, [sp, #108]	; 0x6c
 80160d4:	930d      	str	r3, [sp, #52]	; 0x34
 80160d6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80160d8:	2b00      	cmp	r3, #0
 80160da:	f040 859a 	bne.w	8016c12 <_strtod_l+0xbba>
 80160de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80160e0:	b1e3      	cbz	r3, 801611c <_strtod_l+0xc4>
 80160e2:	4652      	mov	r2, sl
 80160e4:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80160e8:	ec43 2b10 	vmov	d0, r2, r3
 80160ec:	b021      	add	sp, #132	; 0x84
 80160ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80160f2:	2a2b      	cmp	r2, #43	; 0x2b
 80160f4:	d015      	beq.n	8016122 <_strtod_l+0xca>
 80160f6:	2a2d      	cmp	r2, #45	; 0x2d
 80160f8:	d004      	beq.n	8016104 <_strtod_l+0xac>
 80160fa:	2a20      	cmp	r2, #32
 80160fc:	d1ca      	bne.n	8016094 <_strtod_l+0x3c>
 80160fe:	3301      	adds	r3, #1
 8016100:	931b      	str	r3, [sp, #108]	; 0x6c
 8016102:	e7bf      	b.n	8016084 <_strtod_l+0x2c>
 8016104:	2201      	movs	r2, #1
 8016106:	920d      	str	r2, [sp, #52]	; 0x34
 8016108:	1c5a      	adds	r2, r3, #1
 801610a:	921b      	str	r2, [sp, #108]	; 0x6c
 801610c:	785b      	ldrb	r3, [r3, #1]
 801610e:	2b00      	cmp	r3, #0
 8016110:	d1c2      	bne.n	8016098 <_strtod_l+0x40>
 8016112:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8016114:	961b      	str	r6, [sp, #108]	; 0x6c
 8016116:	2b00      	cmp	r3, #0
 8016118:	f040 8579 	bne.w	8016c0e <_strtod_l+0xbb6>
 801611c:	4652      	mov	r2, sl
 801611e:	465b      	mov	r3, fp
 8016120:	e7e2      	b.n	80160e8 <_strtod_l+0x90>
 8016122:	2200      	movs	r2, #0
 8016124:	e7ef      	b.n	8016106 <_strtod_l+0xae>
 8016126:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8016128:	b13a      	cbz	r2, 801613a <_strtod_l+0xe2>
 801612a:	2135      	movs	r1, #53	; 0x35
 801612c:	a81e      	add	r0, sp, #120	; 0x78
 801612e:	f002 fbb1 	bl	8018894 <__copybits>
 8016132:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016134:	4648      	mov	r0, r9
 8016136:	f002 f81d 	bl	8018174 <_Bfree>
 801613a:	3c01      	subs	r4, #1
 801613c:	2c04      	cmp	r4, #4
 801613e:	d806      	bhi.n	801614e <_strtod_l+0xf6>
 8016140:	e8df f004 	tbb	[pc, r4]
 8016144:	1714030a 	.word	0x1714030a
 8016148:	0a          	.byte	0x0a
 8016149:	00          	.byte	0x00
 801614a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 801614e:	0730      	lsls	r0, r6, #28
 8016150:	d5c1      	bpl.n	80160d6 <_strtod_l+0x7e>
 8016152:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8016156:	e7be      	b.n	80160d6 <_strtod_l+0x7e>
 8016158:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 801615c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801615e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8016162:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8016166:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801616a:	e7f0      	b.n	801614e <_strtod_l+0xf6>
 801616c:	f8df b170 	ldr.w	fp, [pc, #368]	; 80162e0 <_strtod_l+0x288>
 8016170:	e7ed      	b.n	801614e <_strtod_l+0xf6>
 8016172:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8016176:	f04f 3aff 	mov.w	sl, #4294967295
 801617a:	e7e8      	b.n	801614e <_strtod_l+0xf6>
 801617c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801617e:	1c5a      	adds	r2, r3, #1
 8016180:	921b      	str	r2, [sp, #108]	; 0x6c
 8016182:	785b      	ldrb	r3, [r3, #1]
 8016184:	2b30      	cmp	r3, #48	; 0x30
 8016186:	d0f9      	beq.n	801617c <_strtod_l+0x124>
 8016188:	2b00      	cmp	r3, #0
 801618a:	d0a4      	beq.n	80160d6 <_strtod_l+0x7e>
 801618c:	2301      	movs	r3, #1
 801618e:	2500      	movs	r5, #0
 8016190:	9306      	str	r3, [sp, #24]
 8016192:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016194:	9308      	str	r3, [sp, #32]
 8016196:	9507      	str	r5, [sp, #28]
 8016198:	9505      	str	r5, [sp, #20]
 801619a:	220a      	movs	r2, #10
 801619c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801619e:	7807      	ldrb	r7, [r0, #0]
 80161a0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80161a4:	b2d9      	uxtb	r1, r3
 80161a6:	2909      	cmp	r1, #9
 80161a8:	d929      	bls.n	80161fe <_strtod_l+0x1a6>
 80161aa:	4622      	mov	r2, r4
 80161ac:	f8d8 1000 	ldr.w	r1, [r8]
 80161b0:	f003 f8f8 	bl	80193a4 <strncmp>
 80161b4:	2800      	cmp	r0, #0
 80161b6:	d031      	beq.n	801621c <_strtod_l+0x1c4>
 80161b8:	2000      	movs	r0, #0
 80161ba:	9c05      	ldr	r4, [sp, #20]
 80161bc:	9004      	str	r0, [sp, #16]
 80161be:	463b      	mov	r3, r7
 80161c0:	4602      	mov	r2, r0
 80161c2:	2b65      	cmp	r3, #101	; 0x65
 80161c4:	d001      	beq.n	80161ca <_strtod_l+0x172>
 80161c6:	2b45      	cmp	r3, #69	; 0x45
 80161c8:	d114      	bne.n	80161f4 <_strtod_l+0x19c>
 80161ca:	b924      	cbnz	r4, 80161d6 <_strtod_l+0x17e>
 80161cc:	b910      	cbnz	r0, 80161d4 <_strtod_l+0x17c>
 80161ce:	9b06      	ldr	r3, [sp, #24]
 80161d0:	2b00      	cmp	r3, #0
 80161d2:	d09e      	beq.n	8016112 <_strtod_l+0xba>
 80161d4:	2400      	movs	r4, #0
 80161d6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 80161d8:	1c73      	adds	r3, r6, #1
 80161da:	931b      	str	r3, [sp, #108]	; 0x6c
 80161dc:	7873      	ldrb	r3, [r6, #1]
 80161de:	2b2b      	cmp	r3, #43	; 0x2b
 80161e0:	d078      	beq.n	80162d4 <_strtod_l+0x27c>
 80161e2:	2b2d      	cmp	r3, #45	; 0x2d
 80161e4:	d070      	beq.n	80162c8 <_strtod_l+0x270>
 80161e6:	f04f 0c00 	mov.w	ip, #0
 80161ea:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 80161ee:	2f09      	cmp	r7, #9
 80161f0:	d97c      	bls.n	80162ec <_strtod_l+0x294>
 80161f2:	961b      	str	r6, [sp, #108]	; 0x6c
 80161f4:	f04f 0e00 	mov.w	lr, #0
 80161f8:	e09a      	b.n	8016330 <_strtod_l+0x2d8>
 80161fa:	2300      	movs	r3, #0
 80161fc:	e7c7      	b.n	801618e <_strtod_l+0x136>
 80161fe:	9905      	ldr	r1, [sp, #20]
 8016200:	2908      	cmp	r1, #8
 8016202:	bfdd      	ittte	le
 8016204:	9907      	ldrle	r1, [sp, #28]
 8016206:	fb02 3301 	mlale	r3, r2, r1, r3
 801620a:	9307      	strle	r3, [sp, #28]
 801620c:	fb02 3505 	mlagt	r5, r2, r5, r3
 8016210:	9b05      	ldr	r3, [sp, #20]
 8016212:	3001      	adds	r0, #1
 8016214:	3301      	adds	r3, #1
 8016216:	9305      	str	r3, [sp, #20]
 8016218:	901b      	str	r0, [sp, #108]	; 0x6c
 801621a:	e7bf      	b.n	801619c <_strtod_l+0x144>
 801621c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801621e:	191a      	adds	r2, r3, r4
 8016220:	921b      	str	r2, [sp, #108]	; 0x6c
 8016222:	9a05      	ldr	r2, [sp, #20]
 8016224:	5d1b      	ldrb	r3, [r3, r4]
 8016226:	2a00      	cmp	r2, #0
 8016228:	d037      	beq.n	801629a <_strtod_l+0x242>
 801622a:	9c05      	ldr	r4, [sp, #20]
 801622c:	4602      	mov	r2, r0
 801622e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8016232:	2909      	cmp	r1, #9
 8016234:	d913      	bls.n	801625e <_strtod_l+0x206>
 8016236:	2101      	movs	r1, #1
 8016238:	9104      	str	r1, [sp, #16]
 801623a:	e7c2      	b.n	80161c2 <_strtod_l+0x16a>
 801623c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801623e:	1c5a      	adds	r2, r3, #1
 8016240:	921b      	str	r2, [sp, #108]	; 0x6c
 8016242:	785b      	ldrb	r3, [r3, #1]
 8016244:	3001      	adds	r0, #1
 8016246:	2b30      	cmp	r3, #48	; 0x30
 8016248:	d0f8      	beq.n	801623c <_strtod_l+0x1e4>
 801624a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801624e:	2a08      	cmp	r2, #8
 8016250:	f200 84e4 	bhi.w	8016c1c <_strtod_l+0xbc4>
 8016254:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8016256:	9208      	str	r2, [sp, #32]
 8016258:	4602      	mov	r2, r0
 801625a:	2000      	movs	r0, #0
 801625c:	4604      	mov	r4, r0
 801625e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8016262:	f100 0101 	add.w	r1, r0, #1
 8016266:	d012      	beq.n	801628e <_strtod_l+0x236>
 8016268:	440a      	add	r2, r1
 801626a:	eb00 0c04 	add.w	ip, r0, r4
 801626e:	4621      	mov	r1, r4
 8016270:	270a      	movs	r7, #10
 8016272:	458c      	cmp	ip, r1
 8016274:	d113      	bne.n	801629e <_strtod_l+0x246>
 8016276:	1821      	adds	r1, r4, r0
 8016278:	2908      	cmp	r1, #8
 801627a:	f104 0401 	add.w	r4, r4, #1
 801627e:	4404      	add	r4, r0
 8016280:	dc19      	bgt.n	80162b6 <_strtod_l+0x25e>
 8016282:	9b07      	ldr	r3, [sp, #28]
 8016284:	210a      	movs	r1, #10
 8016286:	fb01 e303 	mla	r3, r1, r3, lr
 801628a:	9307      	str	r3, [sp, #28]
 801628c:	2100      	movs	r1, #0
 801628e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016290:	1c58      	adds	r0, r3, #1
 8016292:	901b      	str	r0, [sp, #108]	; 0x6c
 8016294:	785b      	ldrb	r3, [r3, #1]
 8016296:	4608      	mov	r0, r1
 8016298:	e7c9      	b.n	801622e <_strtod_l+0x1d6>
 801629a:	9805      	ldr	r0, [sp, #20]
 801629c:	e7d3      	b.n	8016246 <_strtod_l+0x1ee>
 801629e:	2908      	cmp	r1, #8
 80162a0:	f101 0101 	add.w	r1, r1, #1
 80162a4:	dc03      	bgt.n	80162ae <_strtod_l+0x256>
 80162a6:	9b07      	ldr	r3, [sp, #28]
 80162a8:	437b      	muls	r3, r7
 80162aa:	9307      	str	r3, [sp, #28]
 80162ac:	e7e1      	b.n	8016272 <_strtod_l+0x21a>
 80162ae:	2910      	cmp	r1, #16
 80162b0:	bfd8      	it	le
 80162b2:	437d      	mulle	r5, r7
 80162b4:	e7dd      	b.n	8016272 <_strtod_l+0x21a>
 80162b6:	2c10      	cmp	r4, #16
 80162b8:	bfdc      	itt	le
 80162ba:	210a      	movle	r1, #10
 80162bc:	fb01 e505 	mlale	r5, r1, r5, lr
 80162c0:	e7e4      	b.n	801628c <_strtod_l+0x234>
 80162c2:	2301      	movs	r3, #1
 80162c4:	9304      	str	r3, [sp, #16]
 80162c6:	e781      	b.n	80161cc <_strtod_l+0x174>
 80162c8:	f04f 0c01 	mov.w	ip, #1
 80162cc:	1cb3      	adds	r3, r6, #2
 80162ce:	931b      	str	r3, [sp, #108]	; 0x6c
 80162d0:	78b3      	ldrb	r3, [r6, #2]
 80162d2:	e78a      	b.n	80161ea <_strtod_l+0x192>
 80162d4:	f04f 0c00 	mov.w	ip, #0
 80162d8:	e7f8      	b.n	80162cc <_strtod_l+0x274>
 80162da:	bf00      	nop
 80162dc:	08019f08 	.word	0x08019f08
 80162e0:	7ff00000 	.word	0x7ff00000
 80162e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80162e6:	1c5f      	adds	r7, r3, #1
 80162e8:	971b      	str	r7, [sp, #108]	; 0x6c
 80162ea:	785b      	ldrb	r3, [r3, #1]
 80162ec:	2b30      	cmp	r3, #48	; 0x30
 80162ee:	d0f9      	beq.n	80162e4 <_strtod_l+0x28c>
 80162f0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 80162f4:	2f08      	cmp	r7, #8
 80162f6:	f63f af7d 	bhi.w	80161f4 <_strtod_l+0x19c>
 80162fa:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80162fe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016300:	930a      	str	r3, [sp, #40]	; 0x28
 8016302:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016304:	1c5f      	adds	r7, r3, #1
 8016306:	971b      	str	r7, [sp, #108]	; 0x6c
 8016308:	785b      	ldrb	r3, [r3, #1]
 801630a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 801630e:	f1b8 0f09 	cmp.w	r8, #9
 8016312:	d937      	bls.n	8016384 <_strtod_l+0x32c>
 8016314:	990a      	ldr	r1, [sp, #40]	; 0x28
 8016316:	1a7f      	subs	r7, r7, r1
 8016318:	2f08      	cmp	r7, #8
 801631a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 801631e:	dc37      	bgt.n	8016390 <_strtod_l+0x338>
 8016320:	45be      	cmp	lr, r7
 8016322:	bfa8      	it	ge
 8016324:	46be      	movge	lr, r7
 8016326:	f1bc 0f00 	cmp.w	ip, #0
 801632a:	d001      	beq.n	8016330 <_strtod_l+0x2d8>
 801632c:	f1ce 0e00 	rsb	lr, lr, #0
 8016330:	2c00      	cmp	r4, #0
 8016332:	d151      	bne.n	80163d8 <_strtod_l+0x380>
 8016334:	2800      	cmp	r0, #0
 8016336:	f47f aece 	bne.w	80160d6 <_strtod_l+0x7e>
 801633a:	9a06      	ldr	r2, [sp, #24]
 801633c:	2a00      	cmp	r2, #0
 801633e:	f47f aeca 	bne.w	80160d6 <_strtod_l+0x7e>
 8016342:	9a04      	ldr	r2, [sp, #16]
 8016344:	2a00      	cmp	r2, #0
 8016346:	f47f aee4 	bne.w	8016112 <_strtod_l+0xba>
 801634a:	2b4e      	cmp	r3, #78	; 0x4e
 801634c:	d027      	beq.n	801639e <_strtod_l+0x346>
 801634e:	dc21      	bgt.n	8016394 <_strtod_l+0x33c>
 8016350:	2b49      	cmp	r3, #73	; 0x49
 8016352:	f47f aede 	bne.w	8016112 <_strtod_l+0xba>
 8016356:	49a0      	ldr	r1, [pc, #640]	; (80165d8 <_strtod_l+0x580>)
 8016358:	a81b      	add	r0, sp, #108	; 0x6c
 801635a:	f001 fdf7 	bl	8017f4c <__match>
 801635e:	2800      	cmp	r0, #0
 8016360:	f43f aed7 	beq.w	8016112 <_strtod_l+0xba>
 8016364:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016366:	499d      	ldr	r1, [pc, #628]	; (80165dc <_strtod_l+0x584>)
 8016368:	3b01      	subs	r3, #1
 801636a:	a81b      	add	r0, sp, #108	; 0x6c
 801636c:	931b      	str	r3, [sp, #108]	; 0x6c
 801636e:	f001 fded 	bl	8017f4c <__match>
 8016372:	b910      	cbnz	r0, 801637a <_strtod_l+0x322>
 8016374:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016376:	3301      	adds	r3, #1
 8016378:	931b      	str	r3, [sp, #108]	; 0x6c
 801637a:	f8df b274 	ldr.w	fp, [pc, #628]	; 80165f0 <_strtod_l+0x598>
 801637e:	f04f 0a00 	mov.w	sl, #0
 8016382:	e6a8      	b.n	80160d6 <_strtod_l+0x7e>
 8016384:	210a      	movs	r1, #10
 8016386:	fb01 3e0e 	mla	lr, r1, lr, r3
 801638a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801638e:	e7b8      	b.n	8016302 <_strtod_l+0x2aa>
 8016390:	46be      	mov	lr, r7
 8016392:	e7c8      	b.n	8016326 <_strtod_l+0x2ce>
 8016394:	2b69      	cmp	r3, #105	; 0x69
 8016396:	d0de      	beq.n	8016356 <_strtod_l+0x2fe>
 8016398:	2b6e      	cmp	r3, #110	; 0x6e
 801639a:	f47f aeba 	bne.w	8016112 <_strtod_l+0xba>
 801639e:	4990      	ldr	r1, [pc, #576]	; (80165e0 <_strtod_l+0x588>)
 80163a0:	a81b      	add	r0, sp, #108	; 0x6c
 80163a2:	f001 fdd3 	bl	8017f4c <__match>
 80163a6:	2800      	cmp	r0, #0
 80163a8:	f43f aeb3 	beq.w	8016112 <_strtod_l+0xba>
 80163ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80163ae:	781b      	ldrb	r3, [r3, #0]
 80163b0:	2b28      	cmp	r3, #40	; 0x28
 80163b2:	d10e      	bne.n	80163d2 <_strtod_l+0x37a>
 80163b4:	aa1e      	add	r2, sp, #120	; 0x78
 80163b6:	498b      	ldr	r1, [pc, #556]	; (80165e4 <_strtod_l+0x58c>)
 80163b8:	a81b      	add	r0, sp, #108	; 0x6c
 80163ba:	f001 fddb 	bl	8017f74 <__hexnan>
 80163be:	2805      	cmp	r0, #5
 80163c0:	d107      	bne.n	80163d2 <_strtod_l+0x37a>
 80163c2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80163c4:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 80163c8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80163cc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80163d0:	e681      	b.n	80160d6 <_strtod_l+0x7e>
 80163d2:	f8df b224 	ldr.w	fp, [pc, #548]	; 80165f8 <_strtod_l+0x5a0>
 80163d6:	e7d2      	b.n	801637e <_strtod_l+0x326>
 80163d8:	ebae 0302 	sub.w	r3, lr, r2
 80163dc:	9306      	str	r3, [sp, #24]
 80163de:	9b05      	ldr	r3, [sp, #20]
 80163e0:	9807      	ldr	r0, [sp, #28]
 80163e2:	2b00      	cmp	r3, #0
 80163e4:	bf08      	it	eq
 80163e6:	4623      	moveq	r3, r4
 80163e8:	2c10      	cmp	r4, #16
 80163ea:	9305      	str	r3, [sp, #20]
 80163ec:	46a0      	mov	r8, r4
 80163ee:	bfa8      	it	ge
 80163f0:	f04f 0810 	movge.w	r8, #16
 80163f4:	f7ea f89e 	bl	8000534 <__aeabi_ui2d>
 80163f8:	2c09      	cmp	r4, #9
 80163fa:	4682      	mov	sl, r0
 80163fc:	468b      	mov	fp, r1
 80163fe:	dc13      	bgt.n	8016428 <_strtod_l+0x3d0>
 8016400:	9b06      	ldr	r3, [sp, #24]
 8016402:	2b00      	cmp	r3, #0
 8016404:	f43f ae67 	beq.w	80160d6 <_strtod_l+0x7e>
 8016408:	9b06      	ldr	r3, [sp, #24]
 801640a:	dd7a      	ble.n	8016502 <_strtod_l+0x4aa>
 801640c:	2b16      	cmp	r3, #22
 801640e:	dc61      	bgt.n	80164d4 <_strtod_l+0x47c>
 8016410:	4a75      	ldr	r2, [pc, #468]	; (80165e8 <_strtod_l+0x590>)
 8016412:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8016416:	e9de 0100 	ldrd	r0, r1, [lr]
 801641a:	4652      	mov	r2, sl
 801641c:	465b      	mov	r3, fp
 801641e:	f7ea f903 	bl	8000628 <__aeabi_dmul>
 8016422:	4682      	mov	sl, r0
 8016424:	468b      	mov	fp, r1
 8016426:	e656      	b.n	80160d6 <_strtod_l+0x7e>
 8016428:	4b6f      	ldr	r3, [pc, #444]	; (80165e8 <_strtod_l+0x590>)
 801642a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801642e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8016432:	f7ea f8f9 	bl	8000628 <__aeabi_dmul>
 8016436:	4606      	mov	r6, r0
 8016438:	4628      	mov	r0, r5
 801643a:	460f      	mov	r7, r1
 801643c:	f7ea f87a 	bl	8000534 <__aeabi_ui2d>
 8016440:	4602      	mov	r2, r0
 8016442:	460b      	mov	r3, r1
 8016444:	4630      	mov	r0, r6
 8016446:	4639      	mov	r1, r7
 8016448:	f7e9 ff38 	bl	80002bc <__adddf3>
 801644c:	2c0f      	cmp	r4, #15
 801644e:	4682      	mov	sl, r0
 8016450:	468b      	mov	fp, r1
 8016452:	ddd5      	ble.n	8016400 <_strtod_l+0x3a8>
 8016454:	9b06      	ldr	r3, [sp, #24]
 8016456:	eba4 0808 	sub.w	r8, r4, r8
 801645a:	4498      	add	r8, r3
 801645c:	f1b8 0f00 	cmp.w	r8, #0
 8016460:	f340 8096 	ble.w	8016590 <_strtod_l+0x538>
 8016464:	f018 030f 	ands.w	r3, r8, #15
 8016468:	d00a      	beq.n	8016480 <_strtod_l+0x428>
 801646a:	495f      	ldr	r1, [pc, #380]	; (80165e8 <_strtod_l+0x590>)
 801646c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8016470:	4652      	mov	r2, sl
 8016472:	465b      	mov	r3, fp
 8016474:	e9d1 0100 	ldrd	r0, r1, [r1]
 8016478:	f7ea f8d6 	bl	8000628 <__aeabi_dmul>
 801647c:	4682      	mov	sl, r0
 801647e:	468b      	mov	fp, r1
 8016480:	f038 080f 	bics.w	r8, r8, #15
 8016484:	d073      	beq.n	801656e <_strtod_l+0x516>
 8016486:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801648a:	dd47      	ble.n	801651c <_strtod_l+0x4c4>
 801648c:	2400      	movs	r4, #0
 801648e:	46a0      	mov	r8, r4
 8016490:	9407      	str	r4, [sp, #28]
 8016492:	9405      	str	r4, [sp, #20]
 8016494:	2322      	movs	r3, #34	; 0x22
 8016496:	f8df b158 	ldr.w	fp, [pc, #344]	; 80165f0 <_strtod_l+0x598>
 801649a:	f8c9 3000 	str.w	r3, [r9]
 801649e:	f04f 0a00 	mov.w	sl, #0
 80164a2:	9b07      	ldr	r3, [sp, #28]
 80164a4:	2b00      	cmp	r3, #0
 80164a6:	f43f ae16 	beq.w	80160d6 <_strtod_l+0x7e>
 80164aa:	991c      	ldr	r1, [sp, #112]	; 0x70
 80164ac:	4648      	mov	r0, r9
 80164ae:	f001 fe61 	bl	8018174 <_Bfree>
 80164b2:	9905      	ldr	r1, [sp, #20]
 80164b4:	4648      	mov	r0, r9
 80164b6:	f001 fe5d 	bl	8018174 <_Bfree>
 80164ba:	4641      	mov	r1, r8
 80164bc:	4648      	mov	r0, r9
 80164be:	f001 fe59 	bl	8018174 <_Bfree>
 80164c2:	9907      	ldr	r1, [sp, #28]
 80164c4:	4648      	mov	r0, r9
 80164c6:	f001 fe55 	bl	8018174 <_Bfree>
 80164ca:	4621      	mov	r1, r4
 80164cc:	4648      	mov	r0, r9
 80164ce:	f001 fe51 	bl	8018174 <_Bfree>
 80164d2:	e600      	b.n	80160d6 <_strtod_l+0x7e>
 80164d4:	9a06      	ldr	r2, [sp, #24]
 80164d6:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80164da:	4293      	cmp	r3, r2
 80164dc:	dbba      	blt.n	8016454 <_strtod_l+0x3fc>
 80164de:	4d42      	ldr	r5, [pc, #264]	; (80165e8 <_strtod_l+0x590>)
 80164e0:	f1c4 040f 	rsb	r4, r4, #15
 80164e4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80164e8:	4652      	mov	r2, sl
 80164ea:	465b      	mov	r3, fp
 80164ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80164f0:	f7ea f89a 	bl	8000628 <__aeabi_dmul>
 80164f4:	9b06      	ldr	r3, [sp, #24]
 80164f6:	1b1c      	subs	r4, r3, r4
 80164f8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80164fc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016500:	e78d      	b.n	801641e <_strtod_l+0x3c6>
 8016502:	f113 0f16 	cmn.w	r3, #22
 8016506:	dba5      	blt.n	8016454 <_strtod_l+0x3fc>
 8016508:	4a37      	ldr	r2, [pc, #220]	; (80165e8 <_strtod_l+0x590>)
 801650a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 801650e:	e9d2 2300 	ldrd	r2, r3, [r2]
 8016512:	4650      	mov	r0, sl
 8016514:	4659      	mov	r1, fp
 8016516:	f7ea f9b1 	bl	800087c <__aeabi_ddiv>
 801651a:	e782      	b.n	8016422 <_strtod_l+0x3ca>
 801651c:	2300      	movs	r3, #0
 801651e:	4e33      	ldr	r6, [pc, #204]	; (80165ec <_strtod_l+0x594>)
 8016520:	ea4f 1828 	mov.w	r8, r8, asr #4
 8016524:	4650      	mov	r0, sl
 8016526:	4659      	mov	r1, fp
 8016528:	461d      	mov	r5, r3
 801652a:	f1b8 0f01 	cmp.w	r8, #1
 801652e:	dc21      	bgt.n	8016574 <_strtod_l+0x51c>
 8016530:	b10b      	cbz	r3, 8016536 <_strtod_l+0x4de>
 8016532:	4682      	mov	sl, r0
 8016534:	468b      	mov	fp, r1
 8016536:	4b2d      	ldr	r3, [pc, #180]	; (80165ec <_strtod_l+0x594>)
 8016538:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801653c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8016540:	4652      	mov	r2, sl
 8016542:	465b      	mov	r3, fp
 8016544:	e9d5 0100 	ldrd	r0, r1, [r5]
 8016548:	f7ea f86e 	bl	8000628 <__aeabi_dmul>
 801654c:	4b28      	ldr	r3, [pc, #160]	; (80165f0 <_strtod_l+0x598>)
 801654e:	460a      	mov	r2, r1
 8016550:	400b      	ands	r3, r1
 8016552:	4928      	ldr	r1, [pc, #160]	; (80165f4 <_strtod_l+0x59c>)
 8016554:	428b      	cmp	r3, r1
 8016556:	4682      	mov	sl, r0
 8016558:	d898      	bhi.n	801648c <_strtod_l+0x434>
 801655a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801655e:	428b      	cmp	r3, r1
 8016560:	bf86      	itte	hi
 8016562:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80165fc <_strtod_l+0x5a4>
 8016566:	f04f 3aff 	movhi.w	sl, #4294967295
 801656a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801656e:	2300      	movs	r3, #0
 8016570:	9304      	str	r3, [sp, #16]
 8016572:	e077      	b.n	8016664 <_strtod_l+0x60c>
 8016574:	f018 0f01 	tst.w	r8, #1
 8016578:	d006      	beq.n	8016588 <_strtod_l+0x530>
 801657a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 801657e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016582:	f7ea f851 	bl	8000628 <__aeabi_dmul>
 8016586:	2301      	movs	r3, #1
 8016588:	3501      	adds	r5, #1
 801658a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801658e:	e7cc      	b.n	801652a <_strtod_l+0x4d2>
 8016590:	d0ed      	beq.n	801656e <_strtod_l+0x516>
 8016592:	f1c8 0800 	rsb	r8, r8, #0
 8016596:	f018 020f 	ands.w	r2, r8, #15
 801659a:	d00a      	beq.n	80165b2 <_strtod_l+0x55a>
 801659c:	4b12      	ldr	r3, [pc, #72]	; (80165e8 <_strtod_l+0x590>)
 801659e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80165a2:	4650      	mov	r0, sl
 80165a4:	4659      	mov	r1, fp
 80165a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80165aa:	f7ea f967 	bl	800087c <__aeabi_ddiv>
 80165ae:	4682      	mov	sl, r0
 80165b0:	468b      	mov	fp, r1
 80165b2:	ea5f 1828 	movs.w	r8, r8, asr #4
 80165b6:	d0da      	beq.n	801656e <_strtod_l+0x516>
 80165b8:	f1b8 0f1f 	cmp.w	r8, #31
 80165bc:	dd20      	ble.n	8016600 <_strtod_l+0x5a8>
 80165be:	2400      	movs	r4, #0
 80165c0:	46a0      	mov	r8, r4
 80165c2:	9407      	str	r4, [sp, #28]
 80165c4:	9405      	str	r4, [sp, #20]
 80165c6:	2322      	movs	r3, #34	; 0x22
 80165c8:	f04f 0a00 	mov.w	sl, #0
 80165cc:	f04f 0b00 	mov.w	fp, #0
 80165d0:	f8c9 3000 	str.w	r3, [r9]
 80165d4:	e765      	b.n	80164a2 <_strtod_l+0x44a>
 80165d6:	bf00      	nop
 80165d8:	08019ed5 	.word	0x08019ed5
 80165dc:	08019f5b 	.word	0x08019f5b
 80165e0:	08019edd 	.word	0x08019edd
 80165e4:	08019f1c 	.word	0x08019f1c
 80165e8:	08019f98 	.word	0x08019f98
 80165ec:	08019f70 	.word	0x08019f70
 80165f0:	7ff00000 	.word	0x7ff00000
 80165f4:	7ca00000 	.word	0x7ca00000
 80165f8:	fff80000 	.word	0xfff80000
 80165fc:	7fefffff 	.word	0x7fefffff
 8016600:	f018 0310 	ands.w	r3, r8, #16
 8016604:	bf18      	it	ne
 8016606:	236a      	movne	r3, #106	; 0x6a
 8016608:	4da0      	ldr	r5, [pc, #640]	; (801688c <_strtod_l+0x834>)
 801660a:	9304      	str	r3, [sp, #16]
 801660c:	4650      	mov	r0, sl
 801660e:	4659      	mov	r1, fp
 8016610:	2300      	movs	r3, #0
 8016612:	f1b8 0f00 	cmp.w	r8, #0
 8016616:	f300 810a 	bgt.w	801682e <_strtod_l+0x7d6>
 801661a:	b10b      	cbz	r3, 8016620 <_strtod_l+0x5c8>
 801661c:	4682      	mov	sl, r0
 801661e:	468b      	mov	fp, r1
 8016620:	9b04      	ldr	r3, [sp, #16]
 8016622:	b1bb      	cbz	r3, 8016654 <_strtod_l+0x5fc>
 8016624:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8016628:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801662c:	2b00      	cmp	r3, #0
 801662e:	4659      	mov	r1, fp
 8016630:	dd10      	ble.n	8016654 <_strtod_l+0x5fc>
 8016632:	2b1f      	cmp	r3, #31
 8016634:	f340 8107 	ble.w	8016846 <_strtod_l+0x7ee>
 8016638:	2b34      	cmp	r3, #52	; 0x34
 801663a:	bfde      	ittt	le
 801663c:	3b20      	suble	r3, #32
 801663e:	f04f 32ff 	movle.w	r2, #4294967295
 8016642:	fa02 f303 	lslle.w	r3, r2, r3
 8016646:	f04f 0a00 	mov.w	sl, #0
 801664a:	bfcc      	ite	gt
 801664c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8016650:	ea03 0b01 	andle.w	fp, r3, r1
 8016654:	2200      	movs	r2, #0
 8016656:	2300      	movs	r3, #0
 8016658:	4650      	mov	r0, sl
 801665a:	4659      	mov	r1, fp
 801665c:	f7ea fa4c 	bl	8000af8 <__aeabi_dcmpeq>
 8016660:	2800      	cmp	r0, #0
 8016662:	d1ac      	bne.n	80165be <_strtod_l+0x566>
 8016664:	9b07      	ldr	r3, [sp, #28]
 8016666:	9300      	str	r3, [sp, #0]
 8016668:	9a05      	ldr	r2, [sp, #20]
 801666a:	9908      	ldr	r1, [sp, #32]
 801666c:	4623      	mov	r3, r4
 801666e:	4648      	mov	r0, r9
 8016670:	f001 fdd2 	bl	8018218 <__s2b>
 8016674:	9007      	str	r0, [sp, #28]
 8016676:	2800      	cmp	r0, #0
 8016678:	f43f af08 	beq.w	801648c <_strtod_l+0x434>
 801667c:	9a06      	ldr	r2, [sp, #24]
 801667e:	9b06      	ldr	r3, [sp, #24]
 8016680:	2a00      	cmp	r2, #0
 8016682:	f1c3 0300 	rsb	r3, r3, #0
 8016686:	bfa8      	it	ge
 8016688:	2300      	movge	r3, #0
 801668a:	930e      	str	r3, [sp, #56]	; 0x38
 801668c:	2400      	movs	r4, #0
 801668e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8016692:	9316      	str	r3, [sp, #88]	; 0x58
 8016694:	46a0      	mov	r8, r4
 8016696:	9b07      	ldr	r3, [sp, #28]
 8016698:	4648      	mov	r0, r9
 801669a:	6859      	ldr	r1, [r3, #4]
 801669c:	f001 fd36 	bl	801810c <_Balloc>
 80166a0:	9005      	str	r0, [sp, #20]
 80166a2:	2800      	cmp	r0, #0
 80166a4:	f43f aef6 	beq.w	8016494 <_strtod_l+0x43c>
 80166a8:	9b07      	ldr	r3, [sp, #28]
 80166aa:	691a      	ldr	r2, [r3, #16]
 80166ac:	3202      	adds	r2, #2
 80166ae:	f103 010c 	add.w	r1, r3, #12
 80166b2:	0092      	lsls	r2, r2, #2
 80166b4:	300c      	adds	r0, #12
 80166b6:	f7fe fdd3 	bl	8015260 <memcpy>
 80166ba:	aa1e      	add	r2, sp, #120	; 0x78
 80166bc:	a91d      	add	r1, sp, #116	; 0x74
 80166be:	ec4b ab10 	vmov	d0, sl, fp
 80166c2:	4648      	mov	r0, r9
 80166c4:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80166c8:	f002 f862 	bl	8018790 <__d2b>
 80166cc:	901c      	str	r0, [sp, #112]	; 0x70
 80166ce:	2800      	cmp	r0, #0
 80166d0:	f43f aee0 	beq.w	8016494 <_strtod_l+0x43c>
 80166d4:	2101      	movs	r1, #1
 80166d6:	4648      	mov	r0, r9
 80166d8:	f001 fe2a 	bl	8018330 <__i2b>
 80166dc:	4680      	mov	r8, r0
 80166de:	2800      	cmp	r0, #0
 80166e0:	f43f aed8 	beq.w	8016494 <_strtod_l+0x43c>
 80166e4:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80166e6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80166e8:	2e00      	cmp	r6, #0
 80166ea:	bfab      	itete	ge
 80166ec:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80166ee:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80166f0:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80166f2:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 80166f4:	bfac      	ite	ge
 80166f6:	18f7      	addge	r7, r6, r3
 80166f8:	1b9d      	sublt	r5, r3, r6
 80166fa:	9b04      	ldr	r3, [sp, #16]
 80166fc:	1af6      	subs	r6, r6, r3
 80166fe:	4416      	add	r6, r2
 8016700:	4b63      	ldr	r3, [pc, #396]	; (8016890 <_strtod_l+0x838>)
 8016702:	3e01      	subs	r6, #1
 8016704:	429e      	cmp	r6, r3
 8016706:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801670a:	f280 80af 	bge.w	801686c <_strtod_l+0x814>
 801670e:	1b9b      	subs	r3, r3, r6
 8016710:	2b1f      	cmp	r3, #31
 8016712:	eba2 0203 	sub.w	r2, r2, r3
 8016716:	f04f 0101 	mov.w	r1, #1
 801671a:	f300 809b 	bgt.w	8016854 <_strtod_l+0x7fc>
 801671e:	fa01 f303 	lsl.w	r3, r1, r3
 8016722:	930f      	str	r3, [sp, #60]	; 0x3c
 8016724:	2300      	movs	r3, #0
 8016726:	930a      	str	r3, [sp, #40]	; 0x28
 8016728:	18be      	adds	r6, r7, r2
 801672a:	9b04      	ldr	r3, [sp, #16]
 801672c:	42b7      	cmp	r7, r6
 801672e:	4415      	add	r5, r2
 8016730:	441d      	add	r5, r3
 8016732:	463b      	mov	r3, r7
 8016734:	bfa8      	it	ge
 8016736:	4633      	movge	r3, r6
 8016738:	42ab      	cmp	r3, r5
 801673a:	bfa8      	it	ge
 801673c:	462b      	movge	r3, r5
 801673e:	2b00      	cmp	r3, #0
 8016740:	bfc2      	ittt	gt
 8016742:	1af6      	subgt	r6, r6, r3
 8016744:	1aed      	subgt	r5, r5, r3
 8016746:	1aff      	subgt	r7, r7, r3
 8016748:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801674a:	b1bb      	cbz	r3, 801677c <_strtod_l+0x724>
 801674c:	4641      	mov	r1, r8
 801674e:	461a      	mov	r2, r3
 8016750:	4648      	mov	r0, r9
 8016752:	f001 fe8d 	bl	8018470 <__pow5mult>
 8016756:	4680      	mov	r8, r0
 8016758:	2800      	cmp	r0, #0
 801675a:	f43f ae9b 	beq.w	8016494 <_strtod_l+0x43c>
 801675e:	4601      	mov	r1, r0
 8016760:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8016762:	4648      	mov	r0, r9
 8016764:	f001 fded 	bl	8018342 <__multiply>
 8016768:	900c      	str	r0, [sp, #48]	; 0x30
 801676a:	2800      	cmp	r0, #0
 801676c:	f43f ae92 	beq.w	8016494 <_strtod_l+0x43c>
 8016770:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016772:	4648      	mov	r0, r9
 8016774:	f001 fcfe 	bl	8018174 <_Bfree>
 8016778:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801677a:	931c      	str	r3, [sp, #112]	; 0x70
 801677c:	2e00      	cmp	r6, #0
 801677e:	dc7a      	bgt.n	8016876 <_strtod_l+0x81e>
 8016780:	9b06      	ldr	r3, [sp, #24]
 8016782:	2b00      	cmp	r3, #0
 8016784:	dd08      	ble.n	8016798 <_strtod_l+0x740>
 8016786:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8016788:	9905      	ldr	r1, [sp, #20]
 801678a:	4648      	mov	r0, r9
 801678c:	f001 fe70 	bl	8018470 <__pow5mult>
 8016790:	9005      	str	r0, [sp, #20]
 8016792:	2800      	cmp	r0, #0
 8016794:	f43f ae7e 	beq.w	8016494 <_strtod_l+0x43c>
 8016798:	2d00      	cmp	r5, #0
 801679a:	dd08      	ble.n	80167ae <_strtod_l+0x756>
 801679c:	462a      	mov	r2, r5
 801679e:	9905      	ldr	r1, [sp, #20]
 80167a0:	4648      	mov	r0, r9
 80167a2:	f001 feb3 	bl	801850c <__lshift>
 80167a6:	9005      	str	r0, [sp, #20]
 80167a8:	2800      	cmp	r0, #0
 80167aa:	f43f ae73 	beq.w	8016494 <_strtod_l+0x43c>
 80167ae:	2f00      	cmp	r7, #0
 80167b0:	dd08      	ble.n	80167c4 <_strtod_l+0x76c>
 80167b2:	4641      	mov	r1, r8
 80167b4:	463a      	mov	r2, r7
 80167b6:	4648      	mov	r0, r9
 80167b8:	f001 fea8 	bl	801850c <__lshift>
 80167bc:	4680      	mov	r8, r0
 80167be:	2800      	cmp	r0, #0
 80167c0:	f43f ae68 	beq.w	8016494 <_strtod_l+0x43c>
 80167c4:	9a05      	ldr	r2, [sp, #20]
 80167c6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80167c8:	4648      	mov	r0, r9
 80167ca:	f001 ff0d 	bl	80185e8 <__mdiff>
 80167ce:	4604      	mov	r4, r0
 80167d0:	2800      	cmp	r0, #0
 80167d2:	f43f ae5f 	beq.w	8016494 <_strtod_l+0x43c>
 80167d6:	68c3      	ldr	r3, [r0, #12]
 80167d8:	930c      	str	r3, [sp, #48]	; 0x30
 80167da:	2300      	movs	r3, #0
 80167dc:	60c3      	str	r3, [r0, #12]
 80167de:	4641      	mov	r1, r8
 80167e0:	f001 fee8 	bl	80185b4 <__mcmp>
 80167e4:	2800      	cmp	r0, #0
 80167e6:	da55      	bge.n	8016894 <_strtod_l+0x83c>
 80167e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80167ea:	b9e3      	cbnz	r3, 8016826 <_strtod_l+0x7ce>
 80167ec:	f1ba 0f00 	cmp.w	sl, #0
 80167f0:	d119      	bne.n	8016826 <_strtod_l+0x7ce>
 80167f2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80167f6:	b9b3      	cbnz	r3, 8016826 <_strtod_l+0x7ce>
 80167f8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80167fc:	0d1b      	lsrs	r3, r3, #20
 80167fe:	051b      	lsls	r3, r3, #20
 8016800:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8016804:	d90f      	bls.n	8016826 <_strtod_l+0x7ce>
 8016806:	6963      	ldr	r3, [r4, #20]
 8016808:	b913      	cbnz	r3, 8016810 <_strtod_l+0x7b8>
 801680a:	6923      	ldr	r3, [r4, #16]
 801680c:	2b01      	cmp	r3, #1
 801680e:	dd0a      	ble.n	8016826 <_strtod_l+0x7ce>
 8016810:	4621      	mov	r1, r4
 8016812:	2201      	movs	r2, #1
 8016814:	4648      	mov	r0, r9
 8016816:	f001 fe79 	bl	801850c <__lshift>
 801681a:	4641      	mov	r1, r8
 801681c:	4604      	mov	r4, r0
 801681e:	f001 fec9 	bl	80185b4 <__mcmp>
 8016822:	2800      	cmp	r0, #0
 8016824:	dc67      	bgt.n	80168f6 <_strtod_l+0x89e>
 8016826:	9b04      	ldr	r3, [sp, #16]
 8016828:	2b00      	cmp	r3, #0
 801682a:	d171      	bne.n	8016910 <_strtod_l+0x8b8>
 801682c:	e63d      	b.n	80164aa <_strtod_l+0x452>
 801682e:	f018 0f01 	tst.w	r8, #1
 8016832:	d004      	beq.n	801683e <_strtod_l+0x7e6>
 8016834:	e9d5 2300 	ldrd	r2, r3, [r5]
 8016838:	f7e9 fef6 	bl	8000628 <__aeabi_dmul>
 801683c:	2301      	movs	r3, #1
 801683e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8016842:	3508      	adds	r5, #8
 8016844:	e6e5      	b.n	8016612 <_strtod_l+0x5ba>
 8016846:	f04f 32ff 	mov.w	r2, #4294967295
 801684a:	fa02 f303 	lsl.w	r3, r2, r3
 801684e:	ea03 0a0a 	and.w	sl, r3, sl
 8016852:	e6ff      	b.n	8016654 <_strtod_l+0x5fc>
 8016854:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8016858:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 801685c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8016860:	36e2      	adds	r6, #226	; 0xe2
 8016862:	fa01 f306 	lsl.w	r3, r1, r6
 8016866:	930a      	str	r3, [sp, #40]	; 0x28
 8016868:	910f      	str	r1, [sp, #60]	; 0x3c
 801686a:	e75d      	b.n	8016728 <_strtod_l+0x6d0>
 801686c:	2300      	movs	r3, #0
 801686e:	930a      	str	r3, [sp, #40]	; 0x28
 8016870:	2301      	movs	r3, #1
 8016872:	930f      	str	r3, [sp, #60]	; 0x3c
 8016874:	e758      	b.n	8016728 <_strtod_l+0x6d0>
 8016876:	4632      	mov	r2, r6
 8016878:	991c      	ldr	r1, [sp, #112]	; 0x70
 801687a:	4648      	mov	r0, r9
 801687c:	f001 fe46 	bl	801850c <__lshift>
 8016880:	901c      	str	r0, [sp, #112]	; 0x70
 8016882:	2800      	cmp	r0, #0
 8016884:	f47f af7c 	bne.w	8016780 <_strtod_l+0x728>
 8016888:	e604      	b.n	8016494 <_strtod_l+0x43c>
 801688a:	bf00      	nop
 801688c:	08019f30 	.word	0x08019f30
 8016890:	fffffc02 	.word	0xfffffc02
 8016894:	465d      	mov	r5, fp
 8016896:	f040 8086 	bne.w	80169a6 <_strtod_l+0x94e>
 801689a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801689c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80168a0:	b32a      	cbz	r2, 80168ee <_strtod_l+0x896>
 80168a2:	4aaf      	ldr	r2, [pc, #700]	; (8016b60 <_strtod_l+0xb08>)
 80168a4:	4293      	cmp	r3, r2
 80168a6:	d153      	bne.n	8016950 <_strtod_l+0x8f8>
 80168a8:	9b04      	ldr	r3, [sp, #16]
 80168aa:	4650      	mov	r0, sl
 80168ac:	b1d3      	cbz	r3, 80168e4 <_strtod_l+0x88c>
 80168ae:	4aad      	ldr	r2, [pc, #692]	; (8016b64 <_strtod_l+0xb0c>)
 80168b0:	402a      	ands	r2, r5
 80168b2:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80168b6:	f04f 31ff 	mov.w	r1, #4294967295
 80168ba:	d816      	bhi.n	80168ea <_strtod_l+0x892>
 80168bc:	0d12      	lsrs	r2, r2, #20
 80168be:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80168c2:	fa01 f303 	lsl.w	r3, r1, r3
 80168c6:	4298      	cmp	r0, r3
 80168c8:	d142      	bne.n	8016950 <_strtod_l+0x8f8>
 80168ca:	4ba7      	ldr	r3, [pc, #668]	; (8016b68 <_strtod_l+0xb10>)
 80168cc:	429d      	cmp	r5, r3
 80168ce:	d102      	bne.n	80168d6 <_strtod_l+0x87e>
 80168d0:	3001      	adds	r0, #1
 80168d2:	f43f addf 	beq.w	8016494 <_strtod_l+0x43c>
 80168d6:	4ba3      	ldr	r3, [pc, #652]	; (8016b64 <_strtod_l+0xb0c>)
 80168d8:	402b      	ands	r3, r5
 80168da:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80168de:	f04f 0a00 	mov.w	sl, #0
 80168e2:	e7a0      	b.n	8016826 <_strtod_l+0x7ce>
 80168e4:	f04f 33ff 	mov.w	r3, #4294967295
 80168e8:	e7ed      	b.n	80168c6 <_strtod_l+0x86e>
 80168ea:	460b      	mov	r3, r1
 80168ec:	e7eb      	b.n	80168c6 <_strtod_l+0x86e>
 80168ee:	bb7b      	cbnz	r3, 8016950 <_strtod_l+0x8f8>
 80168f0:	f1ba 0f00 	cmp.w	sl, #0
 80168f4:	d12c      	bne.n	8016950 <_strtod_l+0x8f8>
 80168f6:	9904      	ldr	r1, [sp, #16]
 80168f8:	4a9a      	ldr	r2, [pc, #616]	; (8016b64 <_strtod_l+0xb0c>)
 80168fa:	465b      	mov	r3, fp
 80168fc:	b1f1      	cbz	r1, 801693c <_strtod_l+0x8e4>
 80168fe:	ea02 010b 	and.w	r1, r2, fp
 8016902:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8016906:	dc19      	bgt.n	801693c <_strtod_l+0x8e4>
 8016908:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801690c:	f77f ae5b 	ble.w	80165c6 <_strtod_l+0x56e>
 8016910:	4a96      	ldr	r2, [pc, #600]	; (8016b6c <_strtod_l+0xb14>)
 8016912:	2300      	movs	r3, #0
 8016914:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8016918:	4650      	mov	r0, sl
 801691a:	4659      	mov	r1, fp
 801691c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8016920:	f7e9 fe82 	bl	8000628 <__aeabi_dmul>
 8016924:	4682      	mov	sl, r0
 8016926:	468b      	mov	fp, r1
 8016928:	2900      	cmp	r1, #0
 801692a:	f47f adbe 	bne.w	80164aa <_strtod_l+0x452>
 801692e:	2800      	cmp	r0, #0
 8016930:	f47f adbb 	bne.w	80164aa <_strtod_l+0x452>
 8016934:	2322      	movs	r3, #34	; 0x22
 8016936:	f8c9 3000 	str.w	r3, [r9]
 801693a:	e5b6      	b.n	80164aa <_strtod_l+0x452>
 801693c:	4013      	ands	r3, r2
 801693e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8016942:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8016946:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801694a:	f04f 3aff 	mov.w	sl, #4294967295
 801694e:	e76a      	b.n	8016826 <_strtod_l+0x7ce>
 8016950:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016952:	b193      	cbz	r3, 801697a <_strtod_l+0x922>
 8016954:	422b      	tst	r3, r5
 8016956:	f43f af66 	beq.w	8016826 <_strtod_l+0x7ce>
 801695a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801695c:	9a04      	ldr	r2, [sp, #16]
 801695e:	4650      	mov	r0, sl
 8016960:	4659      	mov	r1, fp
 8016962:	b173      	cbz	r3, 8016982 <_strtod_l+0x92a>
 8016964:	f7ff fb5c 	bl	8016020 <sulp>
 8016968:	4602      	mov	r2, r0
 801696a:	460b      	mov	r3, r1
 801696c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8016970:	f7e9 fca4 	bl	80002bc <__adddf3>
 8016974:	4682      	mov	sl, r0
 8016976:	468b      	mov	fp, r1
 8016978:	e755      	b.n	8016826 <_strtod_l+0x7ce>
 801697a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801697c:	ea13 0f0a 	tst.w	r3, sl
 8016980:	e7e9      	b.n	8016956 <_strtod_l+0x8fe>
 8016982:	f7ff fb4d 	bl	8016020 <sulp>
 8016986:	4602      	mov	r2, r0
 8016988:	460b      	mov	r3, r1
 801698a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801698e:	f7e9 fc93 	bl	80002b8 <__aeabi_dsub>
 8016992:	2200      	movs	r2, #0
 8016994:	2300      	movs	r3, #0
 8016996:	4682      	mov	sl, r0
 8016998:	468b      	mov	fp, r1
 801699a:	f7ea f8ad 	bl	8000af8 <__aeabi_dcmpeq>
 801699e:	2800      	cmp	r0, #0
 80169a0:	f47f ae11 	bne.w	80165c6 <_strtod_l+0x56e>
 80169a4:	e73f      	b.n	8016826 <_strtod_l+0x7ce>
 80169a6:	4641      	mov	r1, r8
 80169a8:	4620      	mov	r0, r4
 80169aa:	f001 ff40 	bl	801882e <__ratio>
 80169ae:	ec57 6b10 	vmov	r6, r7, d0
 80169b2:	2200      	movs	r2, #0
 80169b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80169b8:	ee10 0a10 	vmov	r0, s0
 80169bc:	4639      	mov	r1, r7
 80169be:	f7ea f8af 	bl	8000b20 <__aeabi_dcmple>
 80169c2:	2800      	cmp	r0, #0
 80169c4:	d077      	beq.n	8016ab6 <_strtod_l+0xa5e>
 80169c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80169c8:	2b00      	cmp	r3, #0
 80169ca:	d04a      	beq.n	8016a62 <_strtod_l+0xa0a>
 80169cc:	4b68      	ldr	r3, [pc, #416]	; (8016b70 <_strtod_l+0xb18>)
 80169ce:	2200      	movs	r2, #0
 80169d0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80169d4:	4f66      	ldr	r7, [pc, #408]	; (8016b70 <_strtod_l+0xb18>)
 80169d6:	2600      	movs	r6, #0
 80169d8:	4b62      	ldr	r3, [pc, #392]	; (8016b64 <_strtod_l+0xb0c>)
 80169da:	402b      	ands	r3, r5
 80169dc:	930f      	str	r3, [sp, #60]	; 0x3c
 80169de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80169e0:	4b64      	ldr	r3, [pc, #400]	; (8016b74 <_strtod_l+0xb1c>)
 80169e2:	429a      	cmp	r2, r3
 80169e4:	f040 80ce 	bne.w	8016b84 <_strtod_l+0xb2c>
 80169e8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80169ec:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80169f0:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 80169f4:	ec4b ab10 	vmov	d0, sl, fp
 80169f8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80169fc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8016a00:	f001 fe50 	bl	80186a4 <__ulp>
 8016a04:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8016a08:	ec53 2b10 	vmov	r2, r3, d0
 8016a0c:	f7e9 fe0c 	bl	8000628 <__aeabi_dmul>
 8016a10:	4652      	mov	r2, sl
 8016a12:	465b      	mov	r3, fp
 8016a14:	f7e9 fc52 	bl	80002bc <__adddf3>
 8016a18:	460b      	mov	r3, r1
 8016a1a:	4952      	ldr	r1, [pc, #328]	; (8016b64 <_strtod_l+0xb0c>)
 8016a1c:	4a56      	ldr	r2, [pc, #344]	; (8016b78 <_strtod_l+0xb20>)
 8016a1e:	4019      	ands	r1, r3
 8016a20:	4291      	cmp	r1, r2
 8016a22:	4682      	mov	sl, r0
 8016a24:	d95b      	bls.n	8016ade <_strtod_l+0xa86>
 8016a26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016a28:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8016a2c:	4293      	cmp	r3, r2
 8016a2e:	d103      	bne.n	8016a38 <_strtod_l+0x9e0>
 8016a30:	9b08      	ldr	r3, [sp, #32]
 8016a32:	3301      	adds	r3, #1
 8016a34:	f43f ad2e 	beq.w	8016494 <_strtod_l+0x43c>
 8016a38:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8016b68 <_strtod_l+0xb10>
 8016a3c:	f04f 3aff 	mov.w	sl, #4294967295
 8016a40:	991c      	ldr	r1, [sp, #112]	; 0x70
 8016a42:	4648      	mov	r0, r9
 8016a44:	f001 fb96 	bl	8018174 <_Bfree>
 8016a48:	9905      	ldr	r1, [sp, #20]
 8016a4a:	4648      	mov	r0, r9
 8016a4c:	f001 fb92 	bl	8018174 <_Bfree>
 8016a50:	4641      	mov	r1, r8
 8016a52:	4648      	mov	r0, r9
 8016a54:	f001 fb8e 	bl	8018174 <_Bfree>
 8016a58:	4621      	mov	r1, r4
 8016a5a:	4648      	mov	r0, r9
 8016a5c:	f001 fb8a 	bl	8018174 <_Bfree>
 8016a60:	e619      	b.n	8016696 <_strtod_l+0x63e>
 8016a62:	f1ba 0f00 	cmp.w	sl, #0
 8016a66:	d11a      	bne.n	8016a9e <_strtod_l+0xa46>
 8016a68:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016a6c:	b9eb      	cbnz	r3, 8016aaa <_strtod_l+0xa52>
 8016a6e:	2200      	movs	r2, #0
 8016a70:	4b3f      	ldr	r3, [pc, #252]	; (8016b70 <_strtod_l+0xb18>)
 8016a72:	4630      	mov	r0, r6
 8016a74:	4639      	mov	r1, r7
 8016a76:	f7ea f849 	bl	8000b0c <__aeabi_dcmplt>
 8016a7a:	b9c8      	cbnz	r0, 8016ab0 <_strtod_l+0xa58>
 8016a7c:	4630      	mov	r0, r6
 8016a7e:	4639      	mov	r1, r7
 8016a80:	2200      	movs	r2, #0
 8016a82:	4b3e      	ldr	r3, [pc, #248]	; (8016b7c <_strtod_l+0xb24>)
 8016a84:	f7e9 fdd0 	bl	8000628 <__aeabi_dmul>
 8016a88:	4606      	mov	r6, r0
 8016a8a:	460f      	mov	r7, r1
 8016a8c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8016a90:	9618      	str	r6, [sp, #96]	; 0x60
 8016a92:	9319      	str	r3, [sp, #100]	; 0x64
 8016a94:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8016a98:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8016a9c:	e79c      	b.n	80169d8 <_strtod_l+0x980>
 8016a9e:	f1ba 0f01 	cmp.w	sl, #1
 8016aa2:	d102      	bne.n	8016aaa <_strtod_l+0xa52>
 8016aa4:	2d00      	cmp	r5, #0
 8016aa6:	f43f ad8e 	beq.w	80165c6 <_strtod_l+0x56e>
 8016aaa:	2200      	movs	r2, #0
 8016aac:	4b34      	ldr	r3, [pc, #208]	; (8016b80 <_strtod_l+0xb28>)
 8016aae:	e78f      	b.n	80169d0 <_strtod_l+0x978>
 8016ab0:	2600      	movs	r6, #0
 8016ab2:	4f32      	ldr	r7, [pc, #200]	; (8016b7c <_strtod_l+0xb24>)
 8016ab4:	e7ea      	b.n	8016a8c <_strtod_l+0xa34>
 8016ab6:	4b31      	ldr	r3, [pc, #196]	; (8016b7c <_strtod_l+0xb24>)
 8016ab8:	4630      	mov	r0, r6
 8016aba:	4639      	mov	r1, r7
 8016abc:	2200      	movs	r2, #0
 8016abe:	f7e9 fdb3 	bl	8000628 <__aeabi_dmul>
 8016ac2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016ac4:	4606      	mov	r6, r0
 8016ac6:	460f      	mov	r7, r1
 8016ac8:	b933      	cbnz	r3, 8016ad8 <_strtod_l+0xa80>
 8016aca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016ace:	9010      	str	r0, [sp, #64]	; 0x40
 8016ad0:	9311      	str	r3, [sp, #68]	; 0x44
 8016ad2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8016ad6:	e7df      	b.n	8016a98 <_strtod_l+0xa40>
 8016ad8:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8016adc:	e7f9      	b.n	8016ad2 <_strtod_l+0xa7a>
 8016ade:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8016ae2:	9b04      	ldr	r3, [sp, #16]
 8016ae4:	2b00      	cmp	r3, #0
 8016ae6:	d1ab      	bne.n	8016a40 <_strtod_l+0x9e8>
 8016ae8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8016aec:	0d1b      	lsrs	r3, r3, #20
 8016aee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016af0:	051b      	lsls	r3, r3, #20
 8016af2:	429a      	cmp	r2, r3
 8016af4:	465d      	mov	r5, fp
 8016af6:	d1a3      	bne.n	8016a40 <_strtod_l+0x9e8>
 8016af8:	4639      	mov	r1, r7
 8016afa:	4630      	mov	r0, r6
 8016afc:	f7ea f844 	bl	8000b88 <__aeabi_d2iz>
 8016b00:	f7e9 fd28 	bl	8000554 <__aeabi_i2d>
 8016b04:	460b      	mov	r3, r1
 8016b06:	4602      	mov	r2, r0
 8016b08:	4639      	mov	r1, r7
 8016b0a:	4630      	mov	r0, r6
 8016b0c:	f7e9 fbd4 	bl	80002b8 <__aeabi_dsub>
 8016b10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016b12:	4606      	mov	r6, r0
 8016b14:	460f      	mov	r7, r1
 8016b16:	b933      	cbnz	r3, 8016b26 <_strtod_l+0xace>
 8016b18:	f1ba 0f00 	cmp.w	sl, #0
 8016b1c:	d103      	bne.n	8016b26 <_strtod_l+0xace>
 8016b1e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8016b22:	2d00      	cmp	r5, #0
 8016b24:	d06d      	beq.n	8016c02 <_strtod_l+0xbaa>
 8016b26:	a30a      	add	r3, pc, #40	; (adr r3, 8016b50 <_strtod_l+0xaf8>)
 8016b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b2c:	4630      	mov	r0, r6
 8016b2e:	4639      	mov	r1, r7
 8016b30:	f7e9 ffec 	bl	8000b0c <__aeabi_dcmplt>
 8016b34:	2800      	cmp	r0, #0
 8016b36:	f47f acb8 	bne.w	80164aa <_strtod_l+0x452>
 8016b3a:	a307      	add	r3, pc, #28	; (adr r3, 8016b58 <_strtod_l+0xb00>)
 8016b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b40:	4630      	mov	r0, r6
 8016b42:	4639      	mov	r1, r7
 8016b44:	f7ea f800 	bl	8000b48 <__aeabi_dcmpgt>
 8016b48:	2800      	cmp	r0, #0
 8016b4a:	f43f af79 	beq.w	8016a40 <_strtod_l+0x9e8>
 8016b4e:	e4ac      	b.n	80164aa <_strtod_l+0x452>
 8016b50:	94a03595 	.word	0x94a03595
 8016b54:	3fdfffff 	.word	0x3fdfffff
 8016b58:	35afe535 	.word	0x35afe535
 8016b5c:	3fe00000 	.word	0x3fe00000
 8016b60:	000fffff 	.word	0x000fffff
 8016b64:	7ff00000 	.word	0x7ff00000
 8016b68:	7fefffff 	.word	0x7fefffff
 8016b6c:	39500000 	.word	0x39500000
 8016b70:	3ff00000 	.word	0x3ff00000
 8016b74:	7fe00000 	.word	0x7fe00000
 8016b78:	7c9fffff 	.word	0x7c9fffff
 8016b7c:	3fe00000 	.word	0x3fe00000
 8016b80:	bff00000 	.word	0xbff00000
 8016b84:	9b04      	ldr	r3, [sp, #16]
 8016b86:	b333      	cbz	r3, 8016bd6 <_strtod_l+0xb7e>
 8016b88:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016b8a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8016b8e:	d822      	bhi.n	8016bd6 <_strtod_l+0xb7e>
 8016b90:	a327      	add	r3, pc, #156	; (adr r3, 8016c30 <_strtod_l+0xbd8>)
 8016b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016b96:	4630      	mov	r0, r6
 8016b98:	4639      	mov	r1, r7
 8016b9a:	f7e9 ffc1 	bl	8000b20 <__aeabi_dcmple>
 8016b9e:	b1a0      	cbz	r0, 8016bca <_strtod_l+0xb72>
 8016ba0:	4639      	mov	r1, r7
 8016ba2:	4630      	mov	r0, r6
 8016ba4:	f7ea f818 	bl	8000bd8 <__aeabi_d2uiz>
 8016ba8:	2800      	cmp	r0, #0
 8016baa:	bf08      	it	eq
 8016bac:	2001      	moveq	r0, #1
 8016bae:	f7e9 fcc1 	bl	8000534 <__aeabi_ui2d>
 8016bb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016bb4:	4606      	mov	r6, r0
 8016bb6:	460f      	mov	r7, r1
 8016bb8:	bb03      	cbnz	r3, 8016bfc <_strtod_l+0xba4>
 8016bba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016bbe:	9012      	str	r0, [sp, #72]	; 0x48
 8016bc0:	9313      	str	r3, [sp, #76]	; 0x4c
 8016bc2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8016bc6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8016bca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016bcc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016bce:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8016bd2:	1a9b      	subs	r3, r3, r2
 8016bd4:	930b      	str	r3, [sp, #44]	; 0x2c
 8016bd6:	ed9d 0b08 	vldr	d0, [sp, #32]
 8016bda:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8016bde:	f001 fd61 	bl	80186a4 <__ulp>
 8016be2:	4650      	mov	r0, sl
 8016be4:	ec53 2b10 	vmov	r2, r3, d0
 8016be8:	4659      	mov	r1, fp
 8016bea:	f7e9 fd1d 	bl	8000628 <__aeabi_dmul>
 8016bee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8016bf2:	f7e9 fb63 	bl	80002bc <__adddf3>
 8016bf6:	4682      	mov	sl, r0
 8016bf8:	468b      	mov	fp, r1
 8016bfa:	e772      	b.n	8016ae2 <_strtod_l+0xa8a>
 8016bfc:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8016c00:	e7df      	b.n	8016bc2 <_strtod_l+0xb6a>
 8016c02:	a30d      	add	r3, pc, #52	; (adr r3, 8016c38 <_strtod_l+0xbe0>)
 8016c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016c08:	f7e9 ff80 	bl	8000b0c <__aeabi_dcmplt>
 8016c0c:	e79c      	b.n	8016b48 <_strtod_l+0xaf0>
 8016c0e:	2300      	movs	r3, #0
 8016c10:	930d      	str	r3, [sp, #52]	; 0x34
 8016c12:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8016c14:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8016c16:	6013      	str	r3, [r2, #0]
 8016c18:	f7ff ba61 	b.w	80160de <_strtod_l+0x86>
 8016c1c:	2b65      	cmp	r3, #101	; 0x65
 8016c1e:	f04f 0200 	mov.w	r2, #0
 8016c22:	f43f ab4e 	beq.w	80162c2 <_strtod_l+0x26a>
 8016c26:	2101      	movs	r1, #1
 8016c28:	4614      	mov	r4, r2
 8016c2a:	9104      	str	r1, [sp, #16]
 8016c2c:	f7ff bacb 	b.w	80161c6 <_strtod_l+0x16e>
 8016c30:	ffc00000 	.word	0xffc00000
 8016c34:	41dfffff 	.word	0x41dfffff
 8016c38:	94a03595 	.word	0x94a03595
 8016c3c:	3fcfffff 	.word	0x3fcfffff

08016c40 <_strtod_r>:
 8016c40:	4b05      	ldr	r3, [pc, #20]	; (8016c58 <_strtod_r+0x18>)
 8016c42:	681b      	ldr	r3, [r3, #0]
 8016c44:	b410      	push	{r4}
 8016c46:	6a1b      	ldr	r3, [r3, #32]
 8016c48:	4c04      	ldr	r4, [pc, #16]	; (8016c5c <_strtod_r+0x1c>)
 8016c4a:	2b00      	cmp	r3, #0
 8016c4c:	bf08      	it	eq
 8016c4e:	4623      	moveq	r3, r4
 8016c50:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016c54:	f7ff ba00 	b.w	8016058 <_strtod_l>
 8016c58:	2000000c 	.word	0x2000000c
 8016c5c:	20000070 	.word	0x20000070

08016c60 <_strtol_l.isra.0>:
 8016c60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016c64:	4680      	mov	r8, r0
 8016c66:	4689      	mov	r9, r1
 8016c68:	4692      	mov	sl, r2
 8016c6a:	461e      	mov	r6, r3
 8016c6c:	460f      	mov	r7, r1
 8016c6e:	463d      	mov	r5, r7
 8016c70:	9808      	ldr	r0, [sp, #32]
 8016c72:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016c76:	f001 fa0d 	bl	8018094 <__locale_ctype_ptr_l>
 8016c7a:	4420      	add	r0, r4
 8016c7c:	7843      	ldrb	r3, [r0, #1]
 8016c7e:	f013 0308 	ands.w	r3, r3, #8
 8016c82:	d132      	bne.n	8016cea <_strtol_l.isra.0+0x8a>
 8016c84:	2c2d      	cmp	r4, #45	; 0x2d
 8016c86:	d132      	bne.n	8016cee <_strtol_l.isra.0+0x8e>
 8016c88:	787c      	ldrb	r4, [r7, #1]
 8016c8a:	1cbd      	adds	r5, r7, #2
 8016c8c:	2201      	movs	r2, #1
 8016c8e:	2e00      	cmp	r6, #0
 8016c90:	d05d      	beq.n	8016d4e <_strtol_l.isra.0+0xee>
 8016c92:	2e10      	cmp	r6, #16
 8016c94:	d109      	bne.n	8016caa <_strtol_l.isra.0+0x4a>
 8016c96:	2c30      	cmp	r4, #48	; 0x30
 8016c98:	d107      	bne.n	8016caa <_strtol_l.isra.0+0x4a>
 8016c9a:	782b      	ldrb	r3, [r5, #0]
 8016c9c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8016ca0:	2b58      	cmp	r3, #88	; 0x58
 8016ca2:	d14f      	bne.n	8016d44 <_strtol_l.isra.0+0xe4>
 8016ca4:	786c      	ldrb	r4, [r5, #1]
 8016ca6:	2610      	movs	r6, #16
 8016ca8:	3502      	adds	r5, #2
 8016caa:	2a00      	cmp	r2, #0
 8016cac:	bf14      	ite	ne
 8016cae:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8016cb2:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8016cb6:	2700      	movs	r7, #0
 8016cb8:	fbb1 fcf6 	udiv	ip, r1, r6
 8016cbc:	4638      	mov	r0, r7
 8016cbe:	fb06 1e1c 	mls	lr, r6, ip, r1
 8016cc2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8016cc6:	2b09      	cmp	r3, #9
 8016cc8:	d817      	bhi.n	8016cfa <_strtol_l.isra.0+0x9a>
 8016cca:	461c      	mov	r4, r3
 8016ccc:	42a6      	cmp	r6, r4
 8016cce:	dd23      	ble.n	8016d18 <_strtol_l.isra.0+0xb8>
 8016cd0:	1c7b      	adds	r3, r7, #1
 8016cd2:	d007      	beq.n	8016ce4 <_strtol_l.isra.0+0x84>
 8016cd4:	4584      	cmp	ip, r0
 8016cd6:	d31c      	bcc.n	8016d12 <_strtol_l.isra.0+0xb2>
 8016cd8:	d101      	bne.n	8016cde <_strtol_l.isra.0+0x7e>
 8016cda:	45a6      	cmp	lr, r4
 8016cdc:	db19      	blt.n	8016d12 <_strtol_l.isra.0+0xb2>
 8016cde:	fb00 4006 	mla	r0, r0, r6, r4
 8016ce2:	2701      	movs	r7, #1
 8016ce4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016ce8:	e7eb      	b.n	8016cc2 <_strtol_l.isra.0+0x62>
 8016cea:	462f      	mov	r7, r5
 8016cec:	e7bf      	b.n	8016c6e <_strtol_l.isra.0+0xe>
 8016cee:	2c2b      	cmp	r4, #43	; 0x2b
 8016cf0:	bf04      	itt	eq
 8016cf2:	1cbd      	addeq	r5, r7, #2
 8016cf4:	787c      	ldrbeq	r4, [r7, #1]
 8016cf6:	461a      	mov	r2, r3
 8016cf8:	e7c9      	b.n	8016c8e <_strtol_l.isra.0+0x2e>
 8016cfa:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8016cfe:	2b19      	cmp	r3, #25
 8016d00:	d801      	bhi.n	8016d06 <_strtol_l.isra.0+0xa6>
 8016d02:	3c37      	subs	r4, #55	; 0x37
 8016d04:	e7e2      	b.n	8016ccc <_strtol_l.isra.0+0x6c>
 8016d06:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8016d0a:	2b19      	cmp	r3, #25
 8016d0c:	d804      	bhi.n	8016d18 <_strtol_l.isra.0+0xb8>
 8016d0e:	3c57      	subs	r4, #87	; 0x57
 8016d10:	e7dc      	b.n	8016ccc <_strtol_l.isra.0+0x6c>
 8016d12:	f04f 37ff 	mov.w	r7, #4294967295
 8016d16:	e7e5      	b.n	8016ce4 <_strtol_l.isra.0+0x84>
 8016d18:	1c7b      	adds	r3, r7, #1
 8016d1a:	d108      	bne.n	8016d2e <_strtol_l.isra.0+0xce>
 8016d1c:	2322      	movs	r3, #34	; 0x22
 8016d1e:	f8c8 3000 	str.w	r3, [r8]
 8016d22:	4608      	mov	r0, r1
 8016d24:	f1ba 0f00 	cmp.w	sl, #0
 8016d28:	d107      	bne.n	8016d3a <_strtol_l.isra.0+0xda>
 8016d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016d2e:	b102      	cbz	r2, 8016d32 <_strtol_l.isra.0+0xd2>
 8016d30:	4240      	negs	r0, r0
 8016d32:	f1ba 0f00 	cmp.w	sl, #0
 8016d36:	d0f8      	beq.n	8016d2a <_strtol_l.isra.0+0xca>
 8016d38:	b10f      	cbz	r7, 8016d3e <_strtol_l.isra.0+0xde>
 8016d3a:	f105 39ff 	add.w	r9, r5, #4294967295
 8016d3e:	f8ca 9000 	str.w	r9, [sl]
 8016d42:	e7f2      	b.n	8016d2a <_strtol_l.isra.0+0xca>
 8016d44:	2430      	movs	r4, #48	; 0x30
 8016d46:	2e00      	cmp	r6, #0
 8016d48:	d1af      	bne.n	8016caa <_strtol_l.isra.0+0x4a>
 8016d4a:	2608      	movs	r6, #8
 8016d4c:	e7ad      	b.n	8016caa <_strtol_l.isra.0+0x4a>
 8016d4e:	2c30      	cmp	r4, #48	; 0x30
 8016d50:	d0a3      	beq.n	8016c9a <_strtol_l.isra.0+0x3a>
 8016d52:	260a      	movs	r6, #10
 8016d54:	e7a9      	b.n	8016caa <_strtol_l.isra.0+0x4a>
	...

08016d58 <_strtol_r>:
 8016d58:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016d5a:	4c06      	ldr	r4, [pc, #24]	; (8016d74 <_strtol_r+0x1c>)
 8016d5c:	4d06      	ldr	r5, [pc, #24]	; (8016d78 <_strtol_r+0x20>)
 8016d5e:	6824      	ldr	r4, [r4, #0]
 8016d60:	6a24      	ldr	r4, [r4, #32]
 8016d62:	2c00      	cmp	r4, #0
 8016d64:	bf08      	it	eq
 8016d66:	462c      	moveq	r4, r5
 8016d68:	9400      	str	r4, [sp, #0]
 8016d6a:	f7ff ff79 	bl	8016c60 <_strtol_l.isra.0>
 8016d6e:	b003      	add	sp, #12
 8016d70:	bd30      	pop	{r4, r5, pc}
 8016d72:	bf00      	nop
 8016d74:	2000000c 	.word	0x2000000c
 8016d78:	20000070 	.word	0x20000070

08016d7c <_vsiprintf_r>:
 8016d7c:	b500      	push	{lr}
 8016d7e:	b09b      	sub	sp, #108	; 0x6c
 8016d80:	9100      	str	r1, [sp, #0]
 8016d82:	9104      	str	r1, [sp, #16]
 8016d84:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016d88:	9105      	str	r1, [sp, #20]
 8016d8a:	9102      	str	r1, [sp, #8]
 8016d8c:	4905      	ldr	r1, [pc, #20]	; (8016da4 <_vsiprintf_r+0x28>)
 8016d8e:	9103      	str	r1, [sp, #12]
 8016d90:	4669      	mov	r1, sp
 8016d92:	f001 fecb 	bl	8018b2c <_svfiprintf_r>
 8016d96:	9b00      	ldr	r3, [sp, #0]
 8016d98:	2200      	movs	r2, #0
 8016d9a:	701a      	strb	r2, [r3, #0]
 8016d9c:	b01b      	add	sp, #108	; 0x6c
 8016d9e:	f85d fb04 	ldr.w	pc, [sp], #4
 8016da2:	bf00      	nop
 8016da4:	ffff0208 	.word	0xffff0208

08016da8 <vsiprintf>:
 8016da8:	4613      	mov	r3, r2
 8016daa:	460a      	mov	r2, r1
 8016dac:	4601      	mov	r1, r0
 8016dae:	4802      	ldr	r0, [pc, #8]	; (8016db8 <vsiprintf+0x10>)
 8016db0:	6800      	ldr	r0, [r0, #0]
 8016db2:	f7ff bfe3 	b.w	8016d7c <_vsiprintf_r>
 8016db6:	bf00      	nop
 8016db8:	2000000c 	.word	0x2000000c

08016dbc <quorem>:
 8016dbc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016dc0:	6903      	ldr	r3, [r0, #16]
 8016dc2:	690c      	ldr	r4, [r1, #16]
 8016dc4:	42a3      	cmp	r3, r4
 8016dc6:	4680      	mov	r8, r0
 8016dc8:	f2c0 8082 	blt.w	8016ed0 <quorem+0x114>
 8016dcc:	3c01      	subs	r4, #1
 8016dce:	f101 0714 	add.w	r7, r1, #20
 8016dd2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8016dd6:	f100 0614 	add.w	r6, r0, #20
 8016dda:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8016dde:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8016de2:	eb06 030c 	add.w	r3, r6, ip
 8016de6:	3501      	adds	r5, #1
 8016de8:	eb07 090c 	add.w	r9, r7, ip
 8016dec:	9301      	str	r3, [sp, #4]
 8016dee:	fbb0 f5f5 	udiv	r5, r0, r5
 8016df2:	b395      	cbz	r5, 8016e5a <quorem+0x9e>
 8016df4:	f04f 0a00 	mov.w	sl, #0
 8016df8:	4638      	mov	r0, r7
 8016dfa:	46b6      	mov	lr, r6
 8016dfc:	46d3      	mov	fp, sl
 8016dfe:	f850 2b04 	ldr.w	r2, [r0], #4
 8016e02:	b293      	uxth	r3, r2
 8016e04:	fb05 a303 	mla	r3, r5, r3, sl
 8016e08:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8016e0c:	b29b      	uxth	r3, r3
 8016e0e:	ebab 0303 	sub.w	r3, fp, r3
 8016e12:	0c12      	lsrs	r2, r2, #16
 8016e14:	f8de b000 	ldr.w	fp, [lr]
 8016e18:	fb05 a202 	mla	r2, r5, r2, sl
 8016e1c:	fa13 f38b 	uxtah	r3, r3, fp
 8016e20:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8016e24:	fa1f fb82 	uxth.w	fp, r2
 8016e28:	f8de 2000 	ldr.w	r2, [lr]
 8016e2c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8016e30:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016e34:	b29b      	uxth	r3, r3
 8016e36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016e3a:	4581      	cmp	r9, r0
 8016e3c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8016e40:	f84e 3b04 	str.w	r3, [lr], #4
 8016e44:	d2db      	bcs.n	8016dfe <quorem+0x42>
 8016e46:	f856 300c 	ldr.w	r3, [r6, ip]
 8016e4a:	b933      	cbnz	r3, 8016e5a <quorem+0x9e>
 8016e4c:	9b01      	ldr	r3, [sp, #4]
 8016e4e:	3b04      	subs	r3, #4
 8016e50:	429e      	cmp	r6, r3
 8016e52:	461a      	mov	r2, r3
 8016e54:	d330      	bcc.n	8016eb8 <quorem+0xfc>
 8016e56:	f8c8 4010 	str.w	r4, [r8, #16]
 8016e5a:	4640      	mov	r0, r8
 8016e5c:	f001 fbaa 	bl	80185b4 <__mcmp>
 8016e60:	2800      	cmp	r0, #0
 8016e62:	db25      	blt.n	8016eb0 <quorem+0xf4>
 8016e64:	3501      	adds	r5, #1
 8016e66:	4630      	mov	r0, r6
 8016e68:	f04f 0c00 	mov.w	ip, #0
 8016e6c:	f857 2b04 	ldr.w	r2, [r7], #4
 8016e70:	f8d0 e000 	ldr.w	lr, [r0]
 8016e74:	b293      	uxth	r3, r2
 8016e76:	ebac 0303 	sub.w	r3, ip, r3
 8016e7a:	0c12      	lsrs	r2, r2, #16
 8016e7c:	fa13 f38e 	uxtah	r3, r3, lr
 8016e80:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8016e84:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016e88:	b29b      	uxth	r3, r3
 8016e8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016e8e:	45b9      	cmp	r9, r7
 8016e90:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8016e94:	f840 3b04 	str.w	r3, [r0], #4
 8016e98:	d2e8      	bcs.n	8016e6c <quorem+0xb0>
 8016e9a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8016e9e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8016ea2:	b92a      	cbnz	r2, 8016eb0 <quorem+0xf4>
 8016ea4:	3b04      	subs	r3, #4
 8016ea6:	429e      	cmp	r6, r3
 8016ea8:	461a      	mov	r2, r3
 8016eaa:	d30b      	bcc.n	8016ec4 <quorem+0x108>
 8016eac:	f8c8 4010 	str.w	r4, [r8, #16]
 8016eb0:	4628      	mov	r0, r5
 8016eb2:	b003      	add	sp, #12
 8016eb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016eb8:	6812      	ldr	r2, [r2, #0]
 8016eba:	3b04      	subs	r3, #4
 8016ebc:	2a00      	cmp	r2, #0
 8016ebe:	d1ca      	bne.n	8016e56 <quorem+0x9a>
 8016ec0:	3c01      	subs	r4, #1
 8016ec2:	e7c5      	b.n	8016e50 <quorem+0x94>
 8016ec4:	6812      	ldr	r2, [r2, #0]
 8016ec6:	3b04      	subs	r3, #4
 8016ec8:	2a00      	cmp	r2, #0
 8016eca:	d1ef      	bne.n	8016eac <quorem+0xf0>
 8016ecc:	3c01      	subs	r4, #1
 8016ece:	e7ea      	b.n	8016ea6 <quorem+0xea>
 8016ed0:	2000      	movs	r0, #0
 8016ed2:	e7ee      	b.n	8016eb2 <quorem+0xf6>
 8016ed4:	0000      	movs	r0, r0
	...

08016ed8 <_dtoa_r>:
 8016ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016edc:	ec57 6b10 	vmov	r6, r7, d0
 8016ee0:	b097      	sub	sp, #92	; 0x5c
 8016ee2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8016ee4:	9106      	str	r1, [sp, #24]
 8016ee6:	4604      	mov	r4, r0
 8016ee8:	920b      	str	r2, [sp, #44]	; 0x2c
 8016eea:	9312      	str	r3, [sp, #72]	; 0x48
 8016eec:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8016ef0:	e9cd 6700 	strd	r6, r7, [sp]
 8016ef4:	b93d      	cbnz	r5, 8016f06 <_dtoa_r+0x2e>
 8016ef6:	2010      	movs	r0, #16
 8016ef8:	f001 f8ee 	bl	80180d8 <malloc>
 8016efc:	6260      	str	r0, [r4, #36]	; 0x24
 8016efe:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8016f02:	6005      	str	r5, [r0, #0]
 8016f04:	60c5      	str	r5, [r0, #12]
 8016f06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016f08:	6819      	ldr	r1, [r3, #0]
 8016f0a:	b151      	cbz	r1, 8016f22 <_dtoa_r+0x4a>
 8016f0c:	685a      	ldr	r2, [r3, #4]
 8016f0e:	604a      	str	r2, [r1, #4]
 8016f10:	2301      	movs	r3, #1
 8016f12:	4093      	lsls	r3, r2
 8016f14:	608b      	str	r3, [r1, #8]
 8016f16:	4620      	mov	r0, r4
 8016f18:	f001 f92c 	bl	8018174 <_Bfree>
 8016f1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016f1e:	2200      	movs	r2, #0
 8016f20:	601a      	str	r2, [r3, #0]
 8016f22:	1e3b      	subs	r3, r7, #0
 8016f24:	bfbb      	ittet	lt
 8016f26:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8016f2a:	9301      	strlt	r3, [sp, #4]
 8016f2c:	2300      	movge	r3, #0
 8016f2e:	2201      	movlt	r2, #1
 8016f30:	bfac      	ite	ge
 8016f32:	f8c8 3000 	strge.w	r3, [r8]
 8016f36:	f8c8 2000 	strlt.w	r2, [r8]
 8016f3a:	4baf      	ldr	r3, [pc, #700]	; (80171f8 <_dtoa_r+0x320>)
 8016f3c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8016f40:	ea33 0308 	bics.w	r3, r3, r8
 8016f44:	d114      	bne.n	8016f70 <_dtoa_r+0x98>
 8016f46:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016f48:	f242 730f 	movw	r3, #9999	; 0x270f
 8016f4c:	6013      	str	r3, [r2, #0]
 8016f4e:	9b00      	ldr	r3, [sp, #0]
 8016f50:	b923      	cbnz	r3, 8016f5c <_dtoa_r+0x84>
 8016f52:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8016f56:	2800      	cmp	r0, #0
 8016f58:	f000 8542 	beq.w	80179e0 <_dtoa_r+0xb08>
 8016f5c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016f5e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 801720c <_dtoa_r+0x334>
 8016f62:	2b00      	cmp	r3, #0
 8016f64:	f000 8544 	beq.w	80179f0 <_dtoa_r+0xb18>
 8016f68:	f10b 0303 	add.w	r3, fp, #3
 8016f6c:	f000 bd3e 	b.w	80179ec <_dtoa_r+0xb14>
 8016f70:	e9dd 6700 	ldrd	r6, r7, [sp]
 8016f74:	2200      	movs	r2, #0
 8016f76:	2300      	movs	r3, #0
 8016f78:	4630      	mov	r0, r6
 8016f7a:	4639      	mov	r1, r7
 8016f7c:	f7e9 fdbc 	bl	8000af8 <__aeabi_dcmpeq>
 8016f80:	4681      	mov	r9, r0
 8016f82:	b168      	cbz	r0, 8016fa0 <_dtoa_r+0xc8>
 8016f84:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016f86:	2301      	movs	r3, #1
 8016f88:	6013      	str	r3, [r2, #0]
 8016f8a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016f8c:	2b00      	cmp	r3, #0
 8016f8e:	f000 8524 	beq.w	80179da <_dtoa_r+0xb02>
 8016f92:	4b9a      	ldr	r3, [pc, #616]	; (80171fc <_dtoa_r+0x324>)
 8016f94:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8016f96:	f103 3bff 	add.w	fp, r3, #4294967295
 8016f9a:	6013      	str	r3, [r2, #0]
 8016f9c:	f000 bd28 	b.w	80179f0 <_dtoa_r+0xb18>
 8016fa0:	aa14      	add	r2, sp, #80	; 0x50
 8016fa2:	a915      	add	r1, sp, #84	; 0x54
 8016fa4:	ec47 6b10 	vmov	d0, r6, r7
 8016fa8:	4620      	mov	r0, r4
 8016faa:	f001 fbf1 	bl	8018790 <__d2b>
 8016fae:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8016fb2:	9004      	str	r0, [sp, #16]
 8016fb4:	2d00      	cmp	r5, #0
 8016fb6:	d07c      	beq.n	80170b2 <_dtoa_r+0x1da>
 8016fb8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8016fbc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8016fc0:	46b2      	mov	sl, r6
 8016fc2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8016fc6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8016fca:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8016fce:	2200      	movs	r2, #0
 8016fd0:	4b8b      	ldr	r3, [pc, #556]	; (8017200 <_dtoa_r+0x328>)
 8016fd2:	4650      	mov	r0, sl
 8016fd4:	4659      	mov	r1, fp
 8016fd6:	f7e9 f96f 	bl	80002b8 <__aeabi_dsub>
 8016fda:	a381      	add	r3, pc, #516	; (adr r3, 80171e0 <_dtoa_r+0x308>)
 8016fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016fe0:	f7e9 fb22 	bl	8000628 <__aeabi_dmul>
 8016fe4:	a380      	add	r3, pc, #512	; (adr r3, 80171e8 <_dtoa_r+0x310>)
 8016fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016fea:	f7e9 f967 	bl	80002bc <__adddf3>
 8016fee:	4606      	mov	r6, r0
 8016ff0:	4628      	mov	r0, r5
 8016ff2:	460f      	mov	r7, r1
 8016ff4:	f7e9 faae 	bl	8000554 <__aeabi_i2d>
 8016ff8:	a37d      	add	r3, pc, #500	; (adr r3, 80171f0 <_dtoa_r+0x318>)
 8016ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ffe:	f7e9 fb13 	bl	8000628 <__aeabi_dmul>
 8017002:	4602      	mov	r2, r0
 8017004:	460b      	mov	r3, r1
 8017006:	4630      	mov	r0, r6
 8017008:	4639      	mov	r1, r7
 801700a:	f7e9 f957 	bl	80002bc <__adddf3>
 801700e:	4606      	mov	r6, r0
 8017010:	460f      	mov	r7, r1
 8017012:	f7e9 fdb9 	bl	8000b88 <__aeabi_d2iz>
 8017016:	2200      	movs	r2, #0
 8017018:	4682      	mov	sl, r0
 801701a:	2300      	movs	r3, #0
 801701c:	4630      	mov	r0, r6
 801701e:	4639      	mov	r1, r7
 8017020:	f7e9 fd74 	bl	8000b0c <__aeabi_dcmplt>
 8017024:	b148      	cbz	r0, 801703a <_dtoa_r+0x162>
 8017026:	4650      	mov	r0, sl
 8017028:	f7e9 fa94 	bl	8000554 <__aeabi_i2d>
 801702c:	4632      	mov	r2, r6
 801702e:	463b      	mov	r3, r7
 8017030:	f7e9 fd62 	bl	8000af8 <__aeabi_dcmpeq>
 8017034:	b908      	cbnz	r0, 801703a <_dtoa_r+0x162>
 8017036:	f10a 3aff 	add.w	sl, sl, #4294967295
 801703a:	f1ba 0f16 	cmp.w	sl, #22
 801703e:	d859      	bhi.n	80170f4 <_dtoa_r+0x21c>
 8017040:	4970      	ldr	r1, [pc, #448]	; (8017204 <_dtoa_r+0x32c>)
 8017042:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8017046:	e9dd 2300 	ldrd	r2, r3, [sp]
 801704a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801704e:	f7e9 fd7b 	bl	8000b48 <__aeabi_dcmpgt>
 8017052:	2800      	cmp	r0, #0
 8017054:	d050      	beq.n	80170f8 <_dtoa_r+0x220>
 8017056:	f10a 3aff 	add.w	sl, sl, #4294967295
 801705a:	2300      	movs	r3, #0
 801705c:	930f      	str	r3, [sp, #60]	; 0x3c
 801705e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017060:	1b5d      	subs	r5, r3, r5
 8017062:	f1b5 0801 	subs.w	r8, r5, #1
 8017066:	bf49      	itett	mi
 8017068:	f1c5 0301 	rsbmi	r3, r5, #1
 801706c:	2300      	movpl	r3, #0
 801706e:	9305      	strmi	r3, [sp, #20]
 8017070:	f04f 0800 	movmi.w	r8, #0
 8017074:	bf58      	it	pl
 8017076:	9305      	strpl	r3, [sp, #20]
 8017078:	f1ba 0f00 	cmp.w	sl, #0
 801707c:	db3e      	blt.n	80170fc <_dtoa_r+0x224>
 801707e:	2300      	movs	r3, #0
 8017080:	44d0      	add	r8, sl
 8017082:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8017086:	9307      	str	r3, [sp, #28]
 8017088:	9b06      	ldr	r3, [sp, #24]
 801708a:	2b09      	cmp	r3, #9
 801708c:	f200 8090 	bhi.w	80171b0 <_dtoa_r+0x2d8>
 8017090:	2b05      	cmp	r3, #5
 8017092:	bfc4      	itt	gt
 8017094:	3b04      	subgt	r3, #4
 8017096:	9306      	strgt	r3, [sp, #24]
 8017098:	9b06      	ldr	r3, [sp, #24]
 801709a:	f1a3 0302 	sub.w	r3, r3, #2
 801709e:	bfcc      	ite	gt
 80170a0:	2500      	movgt	r5, #0
 80170a2:	2501      	movle	r5, #1
 80170a4:	2b03      	cmp	r3, #3
 80170a6:	f200 808f 	bhi.w	80171c8 <_dtoa_r+0x2f0>
 80170aa:	e8df f003 	tbb	[pc, r3]
 80170ae:	7f7d      	.short	0x7f7d
 80170b0:	7131      	.short	0x7131
 80170b2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80170b6:	441d      	add	r5, r3
 80170b8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80170bc:	2820      	cmp	r0, #32
 80170be:	dd13      	ble.n	80170e8 <_dtoa_r+0x210>
 80170c0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80170c4:	9b00      	ldr	r3, [sp, #0]
 80170c6:	fa08 f800 	lsl.w	r8, r8, r0
 80170ca:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80170ce:	fa23 f000 	lsr.w	r0, r3, r0
 80170d2:	ea48 0000 	orr.w	r0, r8, r0
 80170d6:	f7e9 fa2d 	bl	8000534 <__aeabi_ui2d>
 80170da:	2301      	movs	r3, #1
 80170dc:	4682      	mov	sl, r0
 80170de:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80170e2:	3d01      	subs	r5, #1
 80170e4:	9313      	str	r3, [sp, #76]	; 0x4c
 80170e6:	e772      	b.n	8016fce <_dtoa_r+0xf6>
 80170e8:	9b00      	ldr	r3, [sp, #0]
 80170ea:	f1c0 0020 	rsb	r0, r0, #32
 80170ee:	fa03 f000 	lsl.w	r0, r3, r0
 80170f2:	e7f0      	b.n	80170d6 <_dtoa_r+0x1fe>
 80170f4:	2301      	movs	r3, #1
 80170f6:	e7b1      	b.n	801705c <_dtoa_r+0x184>
 80170f8:	900f      	str	r0, [sp, #60]	; 0x3c
 80170fa:	e7b0      	b.n	801705e <_dtoa_r+0x186>
 80170fc:	9b05      	ldr	r3, [sp, #20]
 80170fe:	eba3 030a 	sub.w	r3, r3, sl
 8017102:	9305      	str	r3, [sp, #20]
 8017104:	f1ca 0300 	rsb	r3, sl, #0
 8017108:	9307      	str	r3, [sp, #28]
 801710a:	2300      	movs	r3, #0
 801710c:	930e      	str	r3, [sp, #56]	; 0x38
 801710e:	e7bb      	b.n	8017088 <_dtoa_r+0x1b0>
 8017110:	2301      	movs	r3, #1
 8017112:	930a      	str	r3, [sp, #40]	; 0x28
 8017114:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017116:	2b00      	cmp	r3, #0
 8017118:	dd59      	ble.n	80171ce <_dtoa_r+0x2f6>
 801711a:	9302      	str	r3, [sp, #8]
 801711c:	4699      	mov	r9, r3
 801711e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8017120:	2200      	movs	r2, #0
 8017122:	6072      	str	r2, [r6, #4]
 8017124:	2204      	movs	r2, #4
 8017126:	f102 0014 	add.w	r0, r2, #20
 801712a:	4298      	cmp	r0, r3
 801712c:	6871      	ldr	r1, [r6, #4]
 801712e:	d953      	bls.n	80171d8 <_dtoa_r+0x300>
 8017130:	4620      	mov	r0, r4
 8017132:	f000 ffeb 	bl	801810c <_Balloc>
 8017136:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017138:	6030      	str	r0, [r6, #0]
 801713a:	f1b9 0f0e 	cmp.w	r9, #14
 801713e:	f8d3 b000 	ldr.w	fp, [r3]
 8017142:	f200 80e6 	bhi.w	8017312 <_dtoa_r+0x43a>
 8017146:	2d00      	cmp	r5, #0
 8017148:	f000 80e3 	beq.w	8017312 <_dtoa_r+0x43a>
 801714c:	ed9d 7b00 	vldr	d7, [sp]
 8017150:	f1ba 0f00 	cmp.w	sl, #0
 8017154:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8017158:	dd74      	ble.n	8017244 <_dtoa_r+0x36c>
 801715a:	4a2a      	ldr	r2, [pc, #168]	; (8017204 <_dtoa_r+0x32c>)
 801715c:	f00a 030f 	and.w	r3, sl, #15
 8017160:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8017164:	ed93 7b00 	vldr	d7, [r3]
 8017168:	ea4f 162a 	mov.w	r6, sl, asr #4
 801716c:	06f0      	lsls	r0, r6, #27
 801716e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8017172:	d565      	bpl.n	8017240 <_dtoa_r+0x368>
 8017174:	4b24      	ldr	r3, [pc, #144]	; (8017208 <_dtoa_r+0x330>)
 8017176:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 801717a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801717e:	f7e9 fb7d 	bl	800087c <__aeabi_ddiv>
 8017182:	e9cd 0100 	strd	r0, r1, [sp]
 8017186:	f006 060f 	and.w	r6, r6, #15
 801718a:	2503      	movs	r5, #3
 801718c:	4f1e      	ldr	r7, [pc, #120]	; (8017208 <_dtoa_r+0x330>)
 801718e:	e04c      	b.n	801722a <_dtoa_r+0x352>
 8017190:	2301      	movs	r3, #1
 8017192:	930a      	str	r3, [sp, #40]	; 0x28
 8017194:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017196:	4453      	add	r3, sl
 8017198:	f103 0901 	add.w	r9, r3, #1
 801719c:	9302      	str	r3, [sp, #8]
 801719e:	464b      	mov	r3, r9
 80171a0:	2b01      	cmp	r3, #1
 80171a2:	bfb8      	it	lt
 80171a4:	2301      	movlt	r3, #1
 80171a6:	e7ba      	b.n	801711e <_dtoa_r+0x246>
 80171a8:	2300      	movs	r3, #0
 80171aa:	e7b2      	b.n	8017112 <_dtoa_r+0x23a>
 80171ac:	2300      	movs	r3, #0
 80171ae:	e7f0      	b.n	8017192 <_dtoa_r+0x2ba>
 80171b0:	2501      	movs	r5, #1
 80171b2:	2300      	movs	r3, #0
 80171b4:	9306      	str	r3, [sp, #24]
 80171b6:	950a      	str	r5, [sp, #40]	; 0x28
 80171b8:	f04f 33ff 	mov.w	r3, #4294967295
 80171bc:	9302      	str	r3, [sp, #8]
 80171be:	4699      	mov	r9, r3
 80171c0:	2200      	movs	r2, #0
 80171c2:	2312      	movs	r3, #18
 80171c4:	920b      	str	r2, [sp, #44]	; 0x2c
 80171c6:	e7aa      	b.n	801711e <_dtoa_r+0x246>
 80171c8:	2301      	movs	r3, #1
 80171ca:	930a      	str	r3, [sp, #40]	; 0x28
 80171cc:	e7f4      	b.n	80171b8 <_dtoa_r+0x2e0>
 80171ce:	2301      	movs	r3, #1
 80171d0:	9302      	str	r3, [sp, #8]
 80171d2:	4699      	mov	r9, r3
 80171d4:	461a      	mov	r2, r3
 80171d6:	e7f5      	b.n	80171c4 <_dtoa_r+0x2ec>
 80171d8:	3101      	adds	r1, #1
 80171da:	6071      	str	r1, [r6, #4]
 80171dc:	0052      	lsls	r2, r2, #1
 80171de:	e7a2      	b.n	8017126 <_dtoa_r+0x24e>
 80171e0:	636f4361 	.word	0x636f4361
 80171e4:	3fd287a7 	.word	0x3fd287a7
 80171e8:	8b60c8b3 	.word	0x8b60c8b3
 80171ec:	3fc68a28 	.word	0x3fc68a28
 80171f0:	509f79fb 	.word	0x509f79fb
 80171f4:	3fd34413 	.word	0x3fd34413
 80171f8:	7ff00000 	.word	0x7ff00000
 80171fc:	0801a094 	.word	0x0801a094
 8017200:	3ff80000 	.word	0x3ff80000
 8017204:	08019f98 	.word	0x08019f98
 8017208:	08019f70 	.word	0x08019f70
 801720c:	08019f61 	.word	0x08019f61
 8017210:	07f1      	lsls	r1, r6, #31
 8017212:	d508      	bpl.n	8017226 <_dtoa_r+0x34e>
 8017214:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8017218:	e9d7 2300 	ldrd	r2, r3, [r7]
 801721c:	f7e9 fa04 	bl	8000628 <__aeabi_dmul>
 8017220:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8017224:	3501      	adds	r5, #1
 8017226:	1076      	asrs	r6, r6, #1
 8017228:	3708      	adds	r7, #8
 801722a:	2e00      	cmp	r6, #0
 801722c:	d1f0      	bne.n	8017210 <_dtoa_r+0x338>
 801722e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8017232:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017236:	f7e9 fb21 	bl	800087c <__aeabi_ddiv>
 801723a:	e9cd 0100 	strd	r0, r1, [sp]
 801723e:	e01a      	b.n	8017276 <_dtoa_r+0x39e>
 8017240:	2502      	movs	r5, #2
 8017242:	e7a3      	b.n	801718c <_dtoa_r+0x2b4>
 8017244:	f000 80a0 	beq.w	8017388 <_dtoa_r+0x4b0>
 8017248:	f1ca 0600 	rsb	r6, sl, #0
 801724c:	4b9f      	ldr	r3, [pc, #636]	; (80174cc <_dtoa_r+0x5f4>)
 801724e:	4fa0      	ldr	r7, [pc, #640]	; (80174d0 <_dtoa_r+0x5f8>)
 8017250:	f006 020f 	and.w	r2, r6, #15
 8017254:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017258:	e9d3 2300 	ldrd	r2, r3, [r3]
 801725c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8017260:	f7e9 f9e2 	bl	8000628 <__aeabi_dmul>
 8017264:	e9cd 0100 	strd	r0, r1, [sp]
 8017268:	1136      	asrs	r6, r6, #4
 801726a:	2300      	movs	r3, #0
 801726c:	2502      	movs	r5, #2
 801726e:	2e00      	cmp	r6, #0
 8017270:	d17f      	bne.n	8017372 <_dtoa_r+0x49a>
 8017272:	2b00      	cmp	r3, #0
 8017274:	d1e1      	bne.n	801723a <_dtoa_r+0x362>
 8017276:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017278:	2b00      	cmp	r3, #0
 801727a:	f000 8087 	beq.w	801738c <_dtoa_r+0x4b4>
 801727e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8017282:	2200      	movs	r2, #0
 8017284:	4b93      	ldr	r3, [pc, #588]	; (80174d4 <_dtoa_r+0x5fc>)
 8017286:	4630      	mov	r0, r6
 8017288:	4639      	mov	r1, r7
 801728a:	f7e9 fc3f 	bl	8000b0c <__aeabi_dcmplt>
 801728e:	2800      	cmp	r0, #0
 8017290:	d07c      	beq.n	801738c <_dtoa_r+0x4b4>
 8017292:	f1b9 0f00 	cmp.w	r9, #0
 8017296:	d079      	beq.n	801738c <_dtoa_r+0x4b4>
 8017298:	9b02      	ldr	r3, [sp, #8]
 801729a:	2b00      	cmp	r3, #0
 801729c:	dd35      	ble.n	801730a <_dtoa_r+0x432>
 801729e:	f10a 33ff 	add.w	r3, sl, #4294967295
 80172a2:	9308      	str	r3, [sp, #32]
 80172a4:	4639      	mov	r1, r7
 80172a6:	2200      	movs	r2, #0
 80172a8:	4b8b      	ldr	r3, [pc, #556]	; (80174d8 <_dtoa_r+0x600>)
 80172aa:	4630      	mov	r0, r6
 80172ac:	f7e9 f9bc 	bl	8000628 <__aeabi_dmul>
 80172b0:	e9cd 0100 	strd	r0, r1, [sp]
 80172b4:	9f02      	ldr	r7, [sp, #8]
 80172b6:	3501      	adds	r5, #1
 80172b8:	4628      	mov	r0, r5
 80172ba:	f7e9 f94b 	bl	8000554 <__aeabi_i2d>
 80172be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80172c2:	f7e9 f9b1 	bl	8000628 <__aeabi_dmul>
 80172c6:	2200      	movs	r2, #0
 80172c8:	4b84      	ldr	r3, [pc, #528]	; (80174dc <_dtoa_r+0x604>)
 80172ca:	f7e8 fff7 	bl	80002bc <__adddf3>
 80172ce:	4605      	mov	r5, r0
 80172d0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80172d4:	2f00      	cmp	r7, #0
 80172d6:	d15d      	bne.n	8017394 <_dtoa_r+0x4bc>
 80172d8:	2200      	movs	r2, #0
 80172da:	4b81      	ldr	r3, [pc, #516]	; (80174e0 <_dtoa_r+0x608>)
 80172dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80172e0:	f7e8 ffea 	bl	80002b8 <__aeabi_dsub>
 80172e4:	462a      	mov	r2, r5
 80172e6:	4633      	mov	r3, r6
 80172e8:	e9cd 0100 	strd	r0, r1, [sp]
 80172ec:	f7e9 fc2c 	bl	8000b48 <__aeabi_dcmpgt>
 80172f0:	2800      	cmp	r0, #0
 80172f2:	f040 8288 	bne.w	8017806 <_dtoa_r+0x92e>
 80172f6:	462a      	mov	r2, r5
 80172f8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80172fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017300:	f7e9 fc04 	bl	8000b0c <__aeabi_dcmplt>
 8017304:	2800      	cmp	r0, #0
 8017306:	f040 827c 	bne.w	8017802 <_dtoa_r+0x92a>
 801730a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801730e:	e9cd 2300 	strd	r2, r3, [sp]
 8017312:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017314:	2b00      	cmp	r3, #0
 8017316:	f2c0 8150 	blt.w	80175ba <_dtoa_r+0x6e2>
 801731a:	f1ba 0f0e 	cmp.w	sl, #14
 801731e:	f300 814c 	bgt.w	80175ba <_dtoa_r+0x6e2>
 8017322:	4b6a      	ldr	r3, [pc, #424]	; (80174cc <_dtoa_r+0x5f4>)
 8017324:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8017328:	ed93 7b00 	vldr	d7, [r3]
 801732c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801732e:	2b00      	cmp	r3, #0
 8017330:	ed8d 7b02 	vstr	d7, [sp, #8]
 8017334:	f280 80d8 	bge.w	80174e8 <_dtoa_r+0x610>
 8017338:	f1b9 0f00 	cmp.w	r9, #0
 801733c:	f300 80d4 	bgt.w	80174e8 <_dtoa_r+0x610>
 8017340:	f040 825e 	bne.w	8017800 <_dtoa_r+0x928>
 8017344:	2200      	movs	r2, #0
 8017346:	4b66      	ldr	r3, [pc, #408]	; (80174e0 <_dtoa_r+0x608>)
 8017348:	ec51 0b17 	vmov	r0, r1, d7
 801734c:	f7e9 f96c 	bl	8000628 <__aeabi_dmul>
 8017350:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017354:	f7e9 fbee 	bl	8000b34 <__aeabi_dcmpge>
 8017358:	464f      	mov	r7, r9
 801735a:	464e      	mov	r6, r9
 801735c:	2800      	cmp	r0, #0
 801735e:	f040 8234 	bne.w	80177ca <_dtoa_r+0x8f2>
 8017362:	2331      	movs	r3, #49	; 0x31
 8017364:	f10b 0501 	add.w	r5, fp, #1
 8017368:	f88b 3000 	strb.w	r3, [fp]
 801736c:	f10a 0a01 	add.w	sl, sl, #1
 8017370:	e22f      	b.n	80177d2 <_dtoa_r+0x8fa>
 8017372:	07f2      	lsls	r2, r6, #31
 8017374:	d505      	bpl.n	8017382 <_dtoa_r+0x4aa>
 8017376:	e9d7 2300 	ldrd	r2, r3, [r7]
 801737a:	f7e9 f955 	bl	8000628 <__aeabi_dmul>
 801737e:	3501      	adds	r5, #1
 8017380:	2301      	movs	r3, #1
 8017382:	1076      	asrs	r6, r6, #1
 8017384:	3708      	adds	r7, #8
 8017386:	e772      	b.n	801726e <_dtoa_r+0x396>
 8017388:	2502      	movs	r5, #2
 801738a:	e774      	b.n	8017276 <_dtoa_r+0x39e>
 801738c:	f8cd a020 	str.w	sl, [sp, #32]
 8017390:	464f      	mov	r7, r9
 8017392:	e791      	b.n	80172b8 <_dtoa_r+0x3e0>
 8017394:	4b4d      	ldr	r3, [pc, #308]	; (80174cc <_dtoa_r+0x5f4>)
 8017396:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801739a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 801739e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80173a0:	2b00      	cmp	r3, #0
 80173a2:	d047      	beq.n	8017434 <_dtoa_r+0x55c>
 80173a4:	4602      	mov	r2, r0
 80173a6:	460b      	mov	r3, r1
 80173a8:	2000      	movs	r0, #0
 80173aa:	494e      	ldr	r1, [pc, #312]	; (80174e4 <_dtoa_r+0x60c>)
 80173ac:	f7e9 fa66 	bl	800087c <__aeabi_ddiv>
 80173b0:	462a      	mov	r2, r5
 80173b2:	4633      	mov	r3, r6
 80173b4:	f7e8 ff80 	bl	80002b8 <__aeabi_dsub>
 80173b8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80173bc:	465d      	mov	r5, fp
 80173be:	e9dd 0100 	ldrd	r0, r1, [sp]
 80173c2:	f7e9 fbe1 	bl	8000b88 <__aeabi_d2iz>
 80173c6:	4606      	mov	r6, r0
 80173c8:	f7e9 f8c4 	bl	8000554 <__aeabi_i2d>
 80173cc:	4602      	mov	r2, r0
 80173ce:	460b      	mov	r3, r1
 80173d0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80173d4:	f7e8 ff70 	bl	80002b8 <__aeabi_dsub>
 80173d8:	3630      	adds	r6, #48	; 0x30
 80173da:	f805 6b01 	strb.w	r6, [r5], #1
 80173de:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80173e2:	e9cd 0100 	strd	r0, r1, [sp]
 80173e6:	f7e9 fb91 	bl	8000b0c <__aeabi_dcmplt>
 80173ea:	2800      	cmp	r0, #0
 80173ec:	d163      	bne.n	80174b6 <_dtoa_r+0x5de>
 80173ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 80173f2:	2000      	movs	r0, #0
 80173f4:	4937      	ldr	r1, [pc, #220]	; (80174d4 <_dtoa_r+0x5fc>)
 80173f6:	f7e8 ff5f 	bl	80002b8 <__aeabi_dsub>
 80173fa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80173fe:	f7e9 fb85 	bl	8000b0c <__aeabi_dcmplt>
 8017402:	2800      	cmp	r0, #0
 8017404:	f040 80b7 	bne.w	8017576 <_dtoa_r+0x69e>
 8017408:	eba5 030b 	sub.w	r3, r5, fp
 801740c:	429f      	cmp	r7, r3
 801740e:	f77f af7c 	ble.w	801730a <_dtoa_r+0x432>
 8017412:	2200      	movs	r2, #0
 8017414:	4b30      	ldr	r3, [pc, #192]	; (80174d8 <_dtoa_r+0x600>)
 8017416:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801741a:	f7e9 f905 	bl	8000628 <__aeabi_dmul>
 801741e:	2200      	movs	r2, #0
 8017420:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017424:	4b2c      	ldr	r3, [pc, #176]	; (80174d8 <_dtoa_r+0x600>)
 8017426:	e9dd 0100 	ldrd	r0, r1, [sp]
 801742a:	f7e9 f8fd 	bl	8000628 <__aeabi_dmul>
 801742e:	e9cd 0100 	strd	r0, r1, [sp]
 8017432:	e7c4      	b.n	80173be <_dtoa_r+0x4e6>
 8017434:	462a      	mov	r2, r5
 8017436:	4633      	mov	r3, r6
 8017438:	f7e9 f8f6 	bl	8000628 <__aeabi_dmul>
 801743c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8017440:	eb0b 0507 	add.w	r5, fp, r7
 8017444:	465e      	mov	r6, fp
 8017446:	e9dd 0100 	ldrd	r0, r1, [sp]
 801744a:	f7e9 fb9d 	bl	8000b88 <__aeabi_d2iz>
 801744e:	4607      	mov	r7, r0
 8017450:	f7e9 f880 	bl	8000554 <__aeabi_i2d>
 8017454:	3730      	adds	r7, #48	; 0x30
 8017456:	4602      	mov	r2, r0
 8017458:	460b      	mov	r3, r1
 801745a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801745e:	f7e8 ff2b 	bl	80002b8 <__aeabi_dsub>
 8017462:	f806 7b01 	strb.w	r7, [r6], #1
 8017466:	42ae      	cmp	r6, r5
 8017468:	e9cd 0100 	strd	r0, r1, [sp]
 801746c:	f04f 0200 	mov.w	r2, #0
 8017470:	d126      	bne.n	80174c0 <_dtoa_r+0x5e8>
 8017472:	4b1c      	ldr	r3, [pc, #112]	; (80174e4 <_dtoa_r+0x60c>)
 8017474:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8017478:	f7e8 ff20 	bl	80002bc <__adddf3>
 801747c:	4602      	mov	r2, r0
 801747e:	460b      	mov	r3, r1
 8017480:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017484:	f7e9 fb60 	bl	8000b48 <__aeabi_dcmpgt>
 8017488:	2800      	cmp	r0, #0
 801748a:	d174      	bne.n	8017576 <_dtoa_r+0x69e>
 801748c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8017490:	2000      	movs	r0, #0
 8017492:	4914      	ldr	r1, [pc, #80]	; (80174e4 <_dtoa_r+0x60c>)
 8017494:	f7e8 ff10 	bl	80002b8 <__aeabi_dsub>
 8017498:	4602      	mov	r2, r0
 801749a:	460b      	mov	r3, r1
 801749c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80174a0:	f7e9 fb34 	bl	8000b0c <__aeabi_dcmplt>
 80174a4:	2800      	cmp	r0, #0
 80174a6:	f43f af30 	beq.w	801730a <_dtoa_r+0x432>
 80174aa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80174ae:	2b30      	cmp	r3, #48	; 0x30
 80174b0:	f105 32ff 	add.w	r2, r5, #4294967295
 80174b4:	d002      	beq.n	80174bc <_dtoa_r+0x5e4>
 80174b6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80174ba:	e04a      	b.n	8017552 <_dtoa_r+0x67a>
 80174bc:	4615      	mov	r5, r2
 80174be:	e7f4      	b.n	80174aa <_dtoa_r+0x5d2>
 80174c0:	4b05      	ldr	r3, [pc, #20]	; (80174d8 <_dtoa_r+0x600>)
 80174c2:	f7e9 f8b1 	bl	8000628 <__aeabi_dmul>
 80174c6:	e9cd 0100 	strd	r0, r1, [sp]
 80174ca:	e7bc      	b.n	8017446 <_dtoa_r+0x56e>
 80174cc:	08019f98 	.word	0x08019f98
 80174d0:	08019f70 	.word	0x08019f70
 80174d4:	3ff00000 	.word	0x3ff00000
 80174d8:	40240000 	.word	0x40240000
 80174dc:	401c0000 	.word	0x401c0000
 80174e0:	40140000 	.word	0x40140000
 80174e4:	3fe00000 	.word	0x3fe00000
 80174e8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80174ec:	465d      	mov	r5, fp
 80174ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80174f2:	4630      	mov	r0, r6
 80174f4:	4639      	mov	r1, r7
 80174f6:	f7e9 f9c1 	bl	800087c <__aeabi_ddiv>
 80174fa:	f7e9 fb45 	bl	8000b88 <__aeabi_d2iz>
 80174fe:	4680      	mov	r8, r0
 8017500:	f7e9 f828 	bl	8000554 <__aeabi_i2d>
 8017504:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017508:	f7e9 f88e 	bl	8000628 <__aeabi_dmul>
 801750c:	4602      	mov	r2, r0
 801750e:	460b      	mov	r3, r1
 8017510:	4630      	mov	r0, r6
 8017512:	4639      	mov	r1, r7
 8017514:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8017518:	f7e8 fece 	bl	80002b8 <__aeabi_dsub>
 801751c:	f805 6b01 	strb.w	r6, [r5], #1
 8017520:	eba5 060b 	sub.w	r6, r5, fp
 8017524:	45b1      	cmp	r9, r6
 8017526:	4602      	mov	r2, r0
 8017528:	460b      	mov	r3, r1
 801752a:	d139      	bne.n	80175a0 <_dtoa_r+0x6c8>
 801752c:	f7e8 fec6 	bl	80002bc <__adddf3>
 8017530:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017534:	4606      	mov	r6, r0
 8017536:	460f      	mov	r7, r1
 8017538:	f7e9 fb06 	bl	8000b48 <__aeabi_dcmpgt>
 801753c:	b9c8      	cbnz	r0, 8017572 <_dtoa_r+0x69a>
 801753e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017542:	4630      	mov	r0, r6
 8017544:	4639      	mov	r1, r7
 8017546:	f7e9 fad7 	bl	8000af8 <__aeabi_dcmpeq>
 801754a:	b110      	cbz	r0, 8017552 <_dtoa_r+0x67a>
 801754c:	f018 0f01 	tst.w	r8, #1
 8017550:	d10f      	bne.n	8017572 <_dtoa_r+0x69a>
 8017552:	9904      	ldr	r1, [sp, #16]
 8017554:	4620      	mov	r0, r4
 8017556:	f000 fe0d 	bl	8018174 <_Bfree>
 801755a:	2300      	movs	r3, #0
 801755c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801755e:	702b      	strb	r3, [r5, #0]
 8017560:	f10a 0301 	add.w	r3, sl, #1
 8017564:	6013      	str	r3, [r2, #0]
 8017566:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017568:	2b00      	cmp	r3, #0
 801756a:	f000 8241 	beq.w	80179f0 <_dtoa_r+0xb18>
 801756e:	601d      	str	r5, [r3, #0]
 8017570:	e23e      	b.n	80179f0 <_dtoa_r+0xb18>
 8017572:	f8cd a020 	str.w	sl, [sp, #32]
 8017576:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801757a:	2a39      	cmp	r2, #57	; 0x39
 801757c:	f105 33ff 	add.w	r3, r5, #4294967295
 8017580:	d108      	bne.n	8017594 <_dtoa_r+0x6bc>
 8017582:	459b      	cmp	fp, r3
 8017584:	d10a      	bne.n	801759c <_dtoa_r+0x6c4>
 8017586:	9b08      	ldr	r3, [sp, #32]
 8017588:	3301      	adds	r3, #1
 801758a:	9308      	str	r3, [sp, #32]
 801758c:	2330      	movs	r3, #48	; 0x30
 801758e:	f88b 3000 	strb.w	r3, [fp]
 8017592:	465b      	mov	r3, fp
 8017594:	781a      	ldrb	r2, [r3, #0]
 8017596:	3201      	adds	r2, #1
 8017598:	701a      	strb	r2, [r3, #0]
 801759a:	e78c      	b.n	80174b6 <_dtoa_r+0x5de>
 801759c:	461d      	mov	r5, r3
 801759e:	e7ea      	b.n	8017576 <_dtoa_r+0x69e>
 80175a0:	2200      	movs	r2, #0
 80175a2:	4b9b      	ldr	r3, [pc, #620]	; (8017810 <_dtoa_r+0x938>)
 80175a4:	f7e9 f840 	bl	8000628 <__aeabi_dmul>
 80175a8:	2200      	movs	r2, #0
 80175aa:	2300      	movs	r3, #0
 80175ac:	4606      	mov	r6, r0
 80175ae:	460f      	mov	r7, r1
 80175b0:	f7e9 faa2 	bl	8000af8 <__aeabi_dcmpeq>
 80175b4:	2800      	cmp	r0, #0
 80175b6:	d09a      	beq.n	80174ee <_dtoa_r+0x616>
 80175b8:	e7cb      	b.n	8017552 <_dtoa_r+0x67a>
 80175ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80175bc:	2a00      	cmp	r2, #0
 80175be:	f000 808b 	beq.w	80176d8 <_dtoa_r+0x800>
 80175c2:	9a06      	ldr	r2, [sp, #24]
 80175c4:	2a01      	cmp	r2, #1
 80175c6:	dc6e      	bgt.n	80176a6 <_dtoa_r+0x7ce>
 80175c8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80175ca:	2a00      	cmp	r2, #0
 80175cc:	d067      	beq.n	801769e <_dtoa_r+0x7c6>
 80175ce:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80175d2:	9f07      	ldr	r7, [sp, #28]
 80175d4:	9d05      	ldr	r5, [sp, #20]
 80175d6:	9a05      	ldr	r2, [sp, #20]
 80175d8:	2101      	movs	r1, #1
 80175da:	441a      	add	r2, r3
 80175dc:	4620      	mov	r0, r4
 80175de:	9205      	str	r2, [sp, #20]
 80175e0:	4498      	add	r8, r3
 80175e2:	f000 fea5 	bl	8018330 <__i2b>
 80175e6:	4606      	mov	r6, r0
 80175e8:	2d00      	cmp	r5, #0
 80175ea:	dd0c      	ble.n	8017606 <_dtoa_r+0x72e>
 80175ec:	f1b8 0f00 	cmp.w	r8, #0
 80175f0:	dd09      	ble.n	8017606 <_dtoa_r+0x72e>
 80175f2:	4545      	cmp	r5, r8
 80175f4:	9a05      	ldr	r2, [sp, #20]
 80175f6:	462b      	mov	r3, r5
 80175f8:	bfa8      	it	ge
 80175fa:	4643      	movge	r3, r8
 80175fc:	1ad2      	subs	r2, r2, r3
 80175fe:	9205      	str	r2, [sp, #20]
 8017600:	1aed      	subs	r5, r5, r3
 8017602:	eba8 0803 	sub.w	r8, r8, r3
 8017606:	9b07      	ldr	r3, [sp, #28]
 8017608:	b1eb      	cbz	r3, 8017646 <_dtoa_r+0x76e>
 801760a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801760c:	2b00      	cmp	r3, #0
 801760e:	d067      	beq.n	80176e0 <_dtoa_r+0x808>
 8017610:	b18f      	cbz	r7, 8017636 <_dtoa_r+0x75e>
 8017612:	4631      	mov	r1, r6
 8017614:	463a      	mov	r2, r7
 8017616:	4620      	mov	r0, r4
 8017618:	f000 ff2a 	bl	8018470 <__pow5mult>
 801761c:	9a04      	ldr	r2, [sp, #16]
 801761e:	4601      	mov	r1, r0
 8017620:	4606      	mov	r6, r0
 8017622:	4620      	mov	r0, r4
 8017624:	f000 fe8d 	bl	8018342 <__multiply>
 8017628:	9904      	ldr	r1, [sp, #16]
 801762a:	9008      	str	r0, [sp, #32]
 801762c:	4620      	mov	r0, r4
 801762e:	f000 fda1 	bl	8018174 <_Bfree>
 8017632:	9b08      	ldr	r3, [sp, #32]
 8017634:	9304      	str	r3, [sp, #16]
 8017636:	9b07      	ldr	r3, [sp, #28]
 8017638:	1bda      	subs	r2, r3, r7
 801763a:	d004      	beq.n	8017646 <_dtoa_r+0x76e>
 801763c:	9904      	ldr	r1, [sp, #16]
 801763e:	4620      	mov	r0, r4
 8017640:	f000 ff16 	bl	8018470 <__pow5mult>
 8017644:	9004      	str	r0, [sp, #16]
 8017646:	2101      	movs	r1, #1
 8017648:	4620      	mov	r0, r4
 801764a:	f000 fe71 	bl	8018330 <__i2b>
 801764e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017650:	4607      	mov	r7, r0
 8017652:	2b00      	cmp	r3, #0
 8017654:	f000 81d0 	beq.w	80179f8 <_dtoa_r+0xb20>
 8017658:	461a      	mov	r2, r3
 801765a:	4601      	mov	r1, r0
 801765c:	4620      	mov	r0, r4
 801765e:	f000 ff07 	bl	8018470 <__pow5mult>
 8017662:	9b06      	ldr	r3, [sp, #24]
 8017664:	2b01      	cmp	r3, #1
 8017666:	4607      	mov	r7, r0
 8017668:	dc40      	bgt.n	80176ec <_dtoa_r+0x814>
 801766a:	9b00      	ldr	r3, [sp, #0]
 801766c:	2b00      	cmp	r3, #0
 801766e:	d139      	bne.n	80176e4 <_dtoa_r+0x80c>
 8017670:	9b01      	ldr	r3, [sp, #4]
 8017672:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017676:	2b00      	cmp	r3, #0
 8017678:	d136      	bne.n	80176e8 <_dtoa_r+0x810>
 801767a:	9b01      	ldr	r3, [sp, #4]
 801767c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017680:	0d1b      	lsrs	r3, r3, #20
 8017682:	051b      	lsls	r3, r3, #20
 8017684:	b12b      	cbz	r3, 8017692 <_dtoa_r+0x7ba>
 8017686:	9b05      	ldr	r3, [sp, #20]
 8017688:	3301      	adds	r3, #1
 801768a:	9305      	str	r3, [sp, #20]
 801768c:	f108 0801 	add.w	r8, r8, #1
 8017690:	2301      	movs	r3, #1
 8017692:	9307      	str	r3, [sp, #28]
 8017694:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017696:	2b00      	cmp	r3, #0
 8017698:	d12a      	bne.n	80176f0 <_dtoa_r+0x818>
 801769a:	2001      	movs	r0, #1
 801769c:	e030      	b.n	8017700 <_dtoa_r+0x828>
 801769e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80176a0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80176a4:	e795      	b.n	80175d2 <_dtoa_r+0x6fa>
 80176a6:	9b07      	ldr	r3, [sp, #28]
 80176a8:	f109 37ff 	add.w	r7, r9, #4294967295
 80176ac:	42bb      	cmp	r3, r7
 80176ae:	bfbf      	itttt	lt
 80176b0:	9b07      	ldrlt	r3, [sp, #28]
 80176b2:	9707      	strlt	r7, [sp, #28]
 80176b4:	1afa      	sublt	r2, r7, r3
 80176b6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80176b8:	bfbb      	ittet	lt
 80176ba:	189b      	addlt	r3, r3, r2
 80176bc:	930e      	strlt	r3, [sp, #56]	; 0x38
 80176be:	1bdf      	subge	r7, r3, r7
 80176c0:	2700      	movlt	r7, #0
 80176c2:	f1b9 0f00 	cmp.w	r9, #0
 80176c6:	bfb5      	itete	lt
 80176c8:	9b05      	ldrlt	r3, [sp, #20]
 80176ca:	9d05      	ldrge	r5, [sp, #20]
 80176cc:	eba3 0509 	sublt.w	r5, r3, r9
 80176d0:	464b      	movge	r3, r9
 80176d2:	bfb8      	it	lt
 80176d4:	2300      	movlt	r3, #0
 80176d6:	e77e      	b.n	80175d6 <_dtoa_r+0x6fe>
 80176d8:	9f07      	ldr	r7, [sp, #28]
 80176da:	9d05      	ldr	r5, [sp, #20]
 80176dc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80176de:	e783      	b.n	80175e8 <_dtoa_r+0x710>
 80176e0:	9a07      	ldr	r2, [sp, #28]
 80176e2:	e7ab      	b.n	801763c <_dtoa_r+0x764>
 80176e4:	2300      	movs	r3, #0
 80176e6:	e7d4      	b.n	8017692 <_dtoa_r+0x7ba>
 80176e8:	9b00      	ldr	r3, [sp, #0]
 80176ea:	e7d2      	b.n	8017692 <_dtoa_r+0x7ba>
 80176ec:	2300      	movs	r3, #0
 80176ee:	9307      	str	r3, [sp, #28]
 80176f0:	693b      	ldr	r3, [r7, #16]
 80176f2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80176f6:	6918      	ldr	r0, [r3, #16]
 80176f8:	f000 fdcc 	bl	8018294 <__hi0bits>
 80176fc:	f1c0 0020 	rsb	r0, r0, #32
 8017700:	4440      	add	r0, r8
 8017702:	f010 001f 	ands.w	r0, r0, #31
 8017706:	d047      	beq.n	8017798 <_dtoa_r+0x8c0>
 8017708:	f1c0 0320 	rsb	r3, r0, #32
 801770c:	2b04      	cmp	r3, #4
 801770e:	dd3b      	ble.n	8017788 <_dtoa_r+0x8b0>
 8017710:	9b05      	ldr	r3, [sp, #20]
 8017712:	f1c0 001c 	rsb	r0, r0, #28
 8017716:	4403      	add	r3, r0
 8017718:	9305      	str	r3, [sp, #20]
 801771a:	4405      	add	r5, r0
 801771c:	4480      	add	r8, r0
 801771e:	9b05      	ldr	r3, [sp, #20]
 8017720:	2b00      	cmp	r3, #0
 8017722:	dd05      	ble.n	8017730 <_dtoa_r+0x858>
 8017724:	461a      	mov	r2, r3
 8017726:	9904      	ldr	r1, [sp, #16]
 8017728:	4620      	mov	r0, r4
 801772a:	f000 feef 	bl	801850c <__lshift>
 801772e:	9004      	str	r0, [sp, #16]
 8017730:	f1b8 0f00 	cmp.w	r8, #0
 8017734:	dd05      	ble.n	8017742 <_dtoa_r+0x86a>
 8017736:	4639      	mov	r1, r7
 8017738:	4642      	mov	r2, r8
 801773a:	4620      	mov	r0, r4
 801773c:	f000 fee6 	bl	801850c <__lshift>
 8017740:	4607      	mov	r7, r0
 8017742:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017744:	b353      	cbz	r3, 801779c <_dtoa_r+0x8c4>
 8017746:	4639      	mov	r1, r7
 8017748:	9804      	ldr	r0, [sp, #16]
 801774a:	f000 ff33 	bl	80185b4 <__mcmp>
 801774e:	2800      	cmp	r0, #0
 8017750:	da24      	bge.n	801779c <_dtoa_r+0x8c4>
 8017752:	2300      	movs	r3, #0
 8017754:	220a      	movs	r2, #10
 8017756:	9904      	ldr	r1, [sp, #16]
 8017758:	4620      	mov	r0, r4
 801775a:	f000 fd22 	bl	80181a2 <__multadd>
 801775e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017760:	9004      	str	r0, [sp, #16]
 8017762:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017766:	2b00      	cmp	r3, #0
 8017768:	f000 814d 	beq.w	8017a06 <_dtoa_r+0xb2e>
 801776c:	2300      	movs	r3, #0
 801776e:	4631      	mov	r1, r6
 8017770:	220a      	movs	r2, #10
 8017772:	4620      	mov	r0, r4
 8017774:	f000 fd15 	bl	80181a2 <__multadd>
 8017778:	9b02      	ldr	r3, [sp, #8]
 801777a:	2b00      	cmp	r3, #0
 801777c:	4606      	mov	r6, r0
 801777e:	dc4f      	bgt.n	8017820 <_dtoa_r+0x948>
 8017780:	9b06      	ldr	r3, [sp, #24]
 8017782:	2b02      	cmp	r3, #2
 8017784:	dd4c      	ble.n	8017820 <_dtoa_r+0x948>
 8017786:	e011      	b.n	80177ac <_dtoa_r+0x8d4>
 8017788:	d0c9      	beq.n	801771e <_dtoa_r+0x846>
 801778a:	9a05      	ldr	r2, [sp, #20]
 801778c:	331c      	adds	r3, #28
 801778e:	441a      	add	r2, r3
 8017790:	9205      	str	r2, [sp, #20]
 8017792:	441d      	add	r5, r3
 8017794:	4498      	add	r8, r3
 8017796:	e7c2      	b.n	801771e <_dtoa_r+0x846>
 8017798:	4603      	mov	r3, r0
 801779a:	e7f6      	b.n	801778a <_dtoa_r+0x8b2>
 801779c:	f1b9 0f00 	cmp.w	r9, #0
 80177a0:	dc38      	bgt.n	8017814 <_dtoa_r+0x93c>
 80177a2:	9b06      	ldr	r3, [sp, #24]
 80177a4:	2b02      	cmp	r3, #2
 80177a6:	dd35      	ble.n	8017814 <_dtoa_r+0x93c>
 80177a8:	f8cd 9008 	str.w	r9, [sp, #8]
 80177ac:	9b02      	ldr	r3, [sp, #8]
 80177ae:	b963      	cbnz	r3, 80177ca <_dtoa_r+0x8f2>
 80177b0:	4639      	mov	r1, r7
 80177b2:	2205      	movs	r2, #5
 80177b4:	4620      	mov	r0, r4
 80177b6:	f000 fcf4 	bl	80181a2 <__multadd>
 80177ba:	4601      	mov	r1, r0
 80177bc:	4607      	mov	r7, r0
 80177be:	9804      	ldr	r0, [sp, #16]
 80177c0:	f000 fef8 	bl	80185b4 <__mcmp>
 80177c4:	2800      	cmp	r0, #0
 80177c6:	f73f adcc 	bgt.w	8017362 <_dtoa_r+0x48a>
 80177ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80177cc:	465d      	mov	r5, fp
 80177ce:	ea6f 0a03 	mvn.w	sl, r3
 80177d2:	f04f 0900 	mov.w	r9, #0
 80177d6:	4639      	mov	r1, r7
 80177d8:	4620      	mov	r0, r4
 80177da:	f000 fccb 	bl	8018174 <_Bfree>
 80177de:	2e00      	cmp	r6, #0
 80177e0:	f43f aeb7 	beq.w	8017552 <_dtoa_r+0x67a>
 80177e4:	f1b9 0f00 	cmp.w	r9, #0
 80177e8:	d005      	beq.n	80177f6 <_dtoa_r+0x91e>
 80177ea:	45b1      	cmp	r9, r6
 80177ec:	d003      	beq.n	80177f6 <_dtoa_r+0x91e>
 80177ee:	4649      	mov	r1, r9
 80177f0:	4620      	mov	r0, r4
 80177f2:	f000 fcbf 	bl	8018174 <_Bfree>
 80177f6:	4631      	mov	r1, r6
 80177f8:	4620      	mov	r0, r4
 80177fa:	f000 fcbb 	bl	8018174 <_Bfree>
 80177fe:	e6a8      	b.n	8017552 <_dtoa_r+0x67a>
 8017800:	2700      	movs	r7, #0
 8017802:	463e      	mov	r6, r7
 8017804:	e7e1      	b.n	80177ca <_dtoa_r+0x8f2>
 8017806:	f8dd a020 	ldr.w	sl, [sp, #32]
 801780a:	463e      	mov	r6, r7
 801780c:	e5a9      	b.n	8017362 <_dtoa_r+0x48a>
 801780e:	bf00      	nop
 8017810:	40240000 	.word	0x40240000
 8017814:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017816:	f8cd 9008 	str.w	r9, [sp, #8]
 801781a:	2b00      	cmp	r3, #0
 801781c:	f000 80fa 	beq.w	8017a14 <_dtoa_r+0xb3c>
 8017820:	2d00      	cmp	r5, #0
 8017822:	dd05      	ble.n	8017830 <_dtoa_r+0x958>
 8017824:	4631      	mov	r1, r6
 8017826:	462a      	mov	r2, r5
 8017828:	4620      	mov	r0, r4
 801782a:	f000 fe6f 	bl	801850c <__lshift>
 801782e:	4606      	mov	r6, r0
 8017830:	9b07      	ldr	r3, [sp, #28]
 8017832:	2b00      	cmp	r3, #0
 8017834:	d04c      	beq.n	80178d0 <_dtoa_r+0x9f8>
 8017836:	6871      	ldr	r1, [r6, #4]
 8017838:	4620      	mov	r0, r4
 801783a:	f000 fc67 	bl	801810c <_Balloc>
 801783e:	6932      	ldr	r2, [r6, #16]
 8017840:	3202      	adds	r2, #2
 8017842:	4605      	mov	r5, r0
 8017844:	0092      	lsls	r2, r2, #2
 8017846:	f106 010c 	add.w	r1, r6, #12
 801784a:	300c      	adds	r0, #12
 801784c:	f7fd fd08 	bl	8015260 <memcpy>
 8017850:	2201      	movs	r2, #1
 8017852:	4629      	mov	r1, r5
 8017854:	4620      	mov	r0, r4
 8017856:	f000 fe59 	bl	801850c <__lshift>
 801785a:	9b00      	ldr	r3, [sp, #0]
 801785c:	f8cd b014 	str.w	fp, [sp, #20]
 8017860:	f003 0301 	and.w	r3, r3, #1
 8017864:	46b1      	mov	r9, r6
 8017866:	9307      	str	r3, [sp, #28]
 8017868:	4606      	mov	r6, r0
 801786a:	4639      	mov	r1, r7
 801786c:	9804      	ldr	r0, [sp, #16]
 801786e:	f7ff faa5 	bl	8016dbc <quorem>
 8017872:	4649      	mov	r1, r9
 8017874:	4605      	mov	r5, r0
 8017876:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801787a:	9804      	ldr	r0, [sp, #16]
 801787c:	f000 fe9a 	bl	80185b4 <__mcmp>
 8017880:	4632      	mov	r2, r6
 8017882:	9000      	str	r0, [sp, #0]
 8017884:	4639      	mov	r1, r7
 8017886:	4620      	mov	r0, r4
 8017888:	f000 feae 	bl	80185e8 <__mdiff>
 801788c:	68c3      	ldr	r3, [r0, #12]
 801788e:	4602      	mov	r2, r0
 8017890:	bb03      	cbnz	r3, 80178d4 <_dtoa_r+0x9fc>
 8017892:	4601      	mov	r1, r0
 8017894:	9008      	str	r0, [sp, #32]
 8017896:	9804      	ldr	r0, [sp, #16]
 8017898:	f000 fe8c 	bl	80185b4 <__mcmp>
 801789c:	9a08      	ldr	r2, [sp, #32]
 801789e:	4603      	mov	r3, r0
 80178a0:	4611      	mov	r1, r2
 80178a2:	4620      	mov	r0, r4
 80178a4:	9308      	str	r3, [sp, #32]
 80178a6:	f000 fc65 	bl	8018174 <_Bfree>
 80178aa:	9b08      	ldr	r3, [sp, #32]
 80178ac:	b9a3      	cbnz	r3, 80178d8 <_dtoa_r+0xa00>
 80178ae:	9a06      	ldr	r2, [sp, #24]
 80178b0:	b992      	cbnz	r2, 80178d8 <_dtoa_r+0xa00>
 80178b2:	9a07      	ldr	r2, [sp, #28]
 80178b4:	b982      	cbnz	r2, 80178d8 <_dtoa_r+0xa00>
 80178b6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80178ba:	d029      	beq.n	8017910 <_dtoa_r+0xa38>
 80178bc:	9b00      	ldr	r3, [sp, #0]
 80178be:	2b00      	cmp	r3, #0
 80178c0:	dd01      	ble.n	80178c6 <_dtoa_r+0x9ee>
 80178c2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 80178c6:	9b05      	ldr	r3, [sp, #20]
 80178c8:	1c5d      	adds	r5, r3, #1
 80178ca:	f883 8000 	strb.w	r8, [r3]
 80178ce:	e782      	b.n	80177d6 <_dtoa_r+0x8fe>
 80178d0:	4630      	mov	r0, r6
 80178d2:	e7c2      	b.n	801785a <_dtoa_r+0x982>
 80178d4:	2301      	movs	r3, #1
 80178d6:	e7e3      	b.n	80178a0 <_dtoa_r+0x9c8>
 80178d8:	9a00      	ldr	r2, [sp, #0]
 80178da:	2a00      	cmp	r2, #0
 80178dc:	db04      	blt.n	80178e8 <_dtoa_r+0xa10>
 80178de:	d125      	bne.n	801792c <_dtoa_r+0xa54>
 80178e0:	9a06      	ldr	r2, [sp, #24]
 80178e2:	bb1a      	cbnz	r2, 801792c <_dtoa_r+0xa54>
 80178e4:	9a07      	ldr	r2, [sp, #28]
 80178e6:	bb0a      	cbnz	r2, 801792c <_dtoa_r+0xa54>
 80178e8:	2b00      	cmp	r3, #0
 80178ea:	ddec      	ble.n	80178c6 <_dtoa_r+0x9ee>
 80178ec:	2201      	movs	r2, #1
 80178ee:	9904      	ldr	r1, [sp, #16]
 80178f0:	4620      	mov	r0, r4
 80178f2:	f000 fe0b 	bl	801850c <__lshift>
 80178f6:	4639      	mov	r1, r7
 80178f8:	9004      	str	r0, [sp, #16]
 80178fa:	f000 fe5b 	bl	80185b4 <__mcmp>
 80178fe:	2800      	cmp	r0, #0
 8017900:	dc03      	bgt.n	801790a <_dtoa_r+0xa32>
 8017902:	d1e0      	bne.n	80178c6 <_dtoa_r+0x9ee>
 8017904:	f018 0f01 	tst.w	r8, #1
 8017908:	d0dd      	beq.n	80178c6 <_dtoa_r+0x9ee>
 801790a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801790e:	d1d8      	bne.n	80178c2 <_dtoa_r+0x9ea>
 8017910:	9b05      	ldr	r3, [sp, #20]
 8017912:	9a05      	ldr	r2, [sp, #20]
 8017914:	1c5d      	adds	r5, r3, #1
 8017916:	2339      	movs	r3, #57	; 0x39
 8017918:	7013      	strb	r3, [r2, #0]
 801791a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801791e:	2b39      	cmp	r3, #57	; 0x39
 8017920:	f105 32ff 	add.w	r2, r5, #4294967295
 8017924:	d04f      	beq.n	80179c6 <_dtoa_r+0xaee>
 8017926:	3301      	adds	r3, #1
 8017928:	7013      	strb	r3, [r2, #0]
 801792a:	e754      	b.n	80177d6 <_dtoa_r+0x8fe>
 801792c:	9a05      	ldr	r2, [sp, #20]
 801792e:	2b00      	cmp	r3, #0
 8017930:	f102 0501 	add.w	r5, r2, #1
 8017934:	dd06      	ble.n	8017944 <_dtoa_r+0xa6c>
 8017936:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 801793a:	d0e9      	beq.n	8017910 <_dtoa_r+0xa38>
 801793c:	f108 0801 	add.w	r8, r8, #1
 8017940:	9b05      	ldr	r3, [sp, #20]
 8017942:	e7c2      	b.n	80178ca <_dtoa_r+0x9f2>
 8017944:	9a02      	ldr	r2, [sp, #8]
 8017946:	f805 8c01 	strb.w	r8, [r5, #-1]
 801794a:	eba5 030b 	sub.w	r3, r5, fp
 801794e:	4293      	cmp	r3, r2
 8017950:	d021      	beq.n	8017996 <_dtoa_r+0xabe>
 8017952:	2300      	movs	r3, #0
 8017954:	220a      	movs	r2, #10
 8017956:	9904      	ldr	r1, [sp, #16]
 8017958:	4620      	mov	r0, r4
 801795a:	f000 fc22 	bl	80181a2 <__multadd>
 801795e:	45b1      	cmp	r9, r6
 8017960:	9004      	str	r0, [sp, #16]
 8017962:	f04f 0300 	mov.w	r3, #0
 8017966:	f04f 020a 	mov.w	r2, #10
 801796a:	4649      	mov	r1, r9
 801796c:	4620      	mov	r0, r4
 801796e:	d105      	bne.n	801797c <_dtoa_r+0xaa4>
 8017970:	f000 fc17 	bl	80181a2 <__multadd>
 8017974:	4681      	mov	r9, r0
 8017976:	4606      	mov	r6, r0
 8017978:	9505      	str	r5, [sp, #20]
 801797a:	e776      	b.n	801786a <_dtoa_r+0x992>
 801797c:	f000 fc11 	bl	80181a2 <__multadd>
 8017980:	4631      	mov	r1, r6
 8017982:	4681      	mov	r9, r0
 8017984:	2300      	movs	r3, #0
 8017986:	220a      	movs	r2, #10
 8017988:	4620      	mov	r0, r4
 801798a:	f000 fc0a 	bl	80181a2 <__multadd>
 801798e:	4606      	mov	r6, r0
 8017990:	e7f2      	b.n	8017978 <_dtoa_r+0xaa0>
 8017992:	f04f 0900 	mov.w	r9, #0
 8017996:	2201      	movs	r2, #1
 8017998:	9904      	ldr	r1, [sp, #16]
 801799a:	4620      	mov	r0, r4
 801799c:	f000 fdb6 	bl	801850c <__lshift>
 80179a0:	4639      	mov	r1, r7
 80179a2:	9004      	str	r0, [sp, #16]
 80179a4:	f000 fe06 	bl	80185b4 <__mcmp>
 80179a8:	2800      	cmp	r0, #0
 80179aa:	dcb6      	bgt.n	801791a <_dtoa_r+0xa42>
 80179ac:	d102      	bne.n	80179b4 <_dtoa_r+0xadc>
 80179ae:	f018 0f01 	tst.w	r8, #1
 80179b2:	d1b2      	bne.n	801791a <_dtoa_r+0xa42>
 80179b4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80179b8:	2b30      	cmp	r3, #48	; 0x30
 80179ba:	f105 32ff 	add.w	r2, r5, #4294967295
 80179be:	f47f af0a 	bne.w	80177d6 <_dtoa_r+0x8fe>
 80179c2:	4615      	mov	r5, r2
 80179c4:	e7f6      	b.n	80179b4 <_dtoa_r+0xadc>
 80179c6:	4593      	cmp	fp, r2
 80179c8:	d105      	bne.n	80179d6 <_dtoa_r+0xafe>
 80179ca:	2331      	movs	r3, #49	; 0x31
 80179cc:	f10a 0a01 	add.w	sl, sl, #1
 80179d0:	f88b 3000 	strb.w	r3, [fp]
 80179d4:	e6ff      	b.n	80177d6 <_dtoa_r+0x8fe>
 80179d6:	4615      	mov	r5, r2
 80179d8:	e79f      	b.n	801791a <_dtoa_r+0xa42>
 80179da:	f8df b064 	ldr.w	fp, [pc, #100]	; 8017a40 <_dtoa_r+0xb68>
 80179de:	e007      	b.n	80179f0 <_dtoa_r+0xb18>
 80179e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80179e2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8017a44 <_dtoa_r+0xb6c>
 80179e6:	b11b      	cbz	r3, 80179f0 <_dtoa_r+0xb18>
 80179e8:	f10b 0308 	add.w	r3, fp, #8
 80179ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80179ee:	6013      	str	r3, [r2, #0]
 80179f0:	4658      	mov	r0, fp
 80179f2:	b017      	add	sp, #92	; 0x5c
 80179f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80179f8:	9b06      	ldr	r3, [sp, #24]
 80179fa:	2b01      	cmp	r3, #1
 80179fc:	f77f ae35 	ble.w	801766a <_dtoa_r+0x792>
 8017a00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017a02:	9307      	str	r3, [sp, #28]
 8017a04:	e649      	b.n	801769a <_dtoa_r+0x7c2>
 8017a06:	9b02      	ldr	r3, [sp, #8]
 8017a08:	2b00      	cmp	r3, #0
 8017a0a:	dc03      	bgt.n	8017a14 <_dtoa_r+0xb3c>
 8017a0c:	9b06      	ldr	r3, [sp, #24]
 8017a0e:	2b02      	cmp	r3, #2
 8017a10:	f73f aecc 	bgt.w	80177ac <_dtoa_r+0x8d4>
 8017a14:	465d      	mov	r5, fp
 8017a16:	4639      	mov	r1, r7
 8017a18:	9804      	ldr	r0, [sp, #16]
 8017a1a:	f7ff f9cf 	bl	8016dbc <quorem>
 8017a1e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8017a22:	f805 8b01 	strb.w	r8, [r5], #1
 8017a26:	9a02      	ldr	r2, [sp, #8]
 8017a28:	eba5 030b 	sub.w	r3, r5, fp
 8017a2c:	429a      	cmp	r2, r3
 8017a2e:	ddb0      	ble.n	8017992 <_dtoa_r+0xaba>
 8017a30:	2300      	movs	r3, #0
 8017a32:	220a      	movs	r2, #10
 8017a34:	9904      	ldr	r1, [sp, #16]
 8017a36:	4620      	mov	r0, r4
 8017a38:	f000 fbb3 	bl	80181a2 <__multadd>
 8017a3c:	9004      	str	r0, [sp, #16]
 8017a3e:	e7ea      	b.n	8017a16 <_dtoa_r+0xb3e>
 8017a40:	0801a093 	.word	0x0801a093
 8017a44:	08019f58 	.word	0x08019f58

08017a48 <rshift>:
 8017a48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017a4a:	6906      	ldr	r6, [r0, #16]
 8017a4c:	114b      	asrs	r3, r1, #5
 8017a4e:	429e      	cmp	r6, r3
 8017a50:	f100 0414 	add.w	r4, r0, #20
 8017a54:	dd30      	ble.n	8017ab8 <rshift+0x70>
 8017a56:	f011 011f 	ands.w	r1, r1, #31
 8017a5a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8017a5e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8017a62:	d108      	bne.n	8017a76 <rshift+0x2e>
 8017a64:	4621      	mov	r1, r4
 8017a66:	42b2      	cmp	r2, r6
 8017a68:	460b      	mov	r3, r1
 8017a6a:	d211      	bcs.n	8017a90 <rshift+0x48>
 8017a6c:	f852 3b04 	ldr.w	r3, [r2], #4
 8017a70:	f841 3b04 	str.w	r3, [r1], #4
 8017a74:	e7f7      	b.n	8017a66 <rshift+0x1e>
 8017a76:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8017a7a:	f1c1 0c20 	rsb	ip, r1, #32
 8017a7e:	40cd      	lsrs	r5, r1
 8017a80:	3204      	adds	r2, #4
 8017a82:	4623      	mov	r3, r4
 8017a84:	42b2      	cmp	r2, r6
 8017a86:	4617      	mov	r7, r2
 8017a88:	d30c      	bcc.n	8017aa4 <rshift+0x5c>
 8017a8a:	601d      	str	r5, [r3, #0]
 8017a8c:	b105      	cbz	r5, 8017a90 <rshift+0x48>
 8017a8e:	3304      	adds	r3, #4
 8017a90:	1b1a      	subs	r2, r3, r4
 8017a92:	42a3      	cmp	r3, r4
 8017a94:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8017a98:	bf08      	it	eq
 8017a9a:	2300      	moveq	r3, #0
 8017a9c:	6102      	str	r2, [r0, #16]
 8017a9e:	bf08      	it	eq
 8017aa0:	6143      	streq	r3, [r0, #20]
 8017aa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017aa4:	683f      	ldr	r7, [r7, #0]
 8017aa6:	fa07 f70c 	lsl.w	r7, r7, ip
 8017aaa:	433d      	orrs	r5, r7
 8017aac:	f843 5b04 	str.w	r5, [r3], #4
 8017ab0:	f852 5b04 	ldr.w	r5, [r2], #4
 8017ab4:	40cd      	lsrs	r5, r1
 8017ab6:	e7e5      	b.n	8017a84 <rshift+0x3c>
 8017ab8:	4623      	mov	r3, r4
 8017aba:	e7e9      	b.n	8017a90 <rshift+0x48>

08017abc <__hexdig_fun>:
 8017abc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8017ac0:	2b09      	cmp	r3, #9
 8017ac2:	d802      	bhi.n	8017aca <__hexdig_fun+0xe>
 8017ac4:	3820      	subs	r0, #32
 8017ac6:	b2c0      	uxtb	r0, r0
 8017ac8:	4770      	bx	lr
 8017aca:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8017ace:	2b05      	cmp	r3, #5
 8017ad0:	d801      	bhi.n	8017ad6 <__hexdig_fun+0x1a>
 8017ad2:	3847      	subs	r0, #71	; 0x47
 8017ad4:	e7f7      	b.n	8017ac6 <__hexdig_fun+0xa>
 8017ad6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8017ada:	2b05      	cmp	r3, #5
 8017adc:	d801      	bhi.n	8017ae2 <__hexdig_fun+0x26>
 8017ade:	3827      	subs	r0, #39	; 0x27
 8017ae0:	e7f1      	b.n	8017ac6 <__hexdig_fun+0xa>
 8017ae2:	2000      	movs	r0, #0
 8017ae4:	4770      	bx	lr

08017ae6 <__gethex>:
 8017ae6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017aea:	b08b      	sub	sp, #44	; 0x2c
 8017aec:	468a      	mov	sl, r1
 8017aee:	9002      	str	r0, [sp, #8]
 8017af0:	9816      	ldr	r0, [sp, #88]	; 0x58
 8017af2:	9306      	str	r3, [sp, #24]
 8017af4:	4690      	mov	r8, r2
 8017af6:	f000 fadf 	bl	80180b8 <__localeconv_l>
 8017afa:	6803      	ldr	r3, [r0, #0]
 8017afc:	9303      	str	r3, [sp, #12]
 8017afe:	4618      	mov	r0, r3
 8017b00:	f7e8 fb7e 	bl	8000200 <strlen>
 8017b04:	9b03      	ldr	r3, [sp, #12]
 8017b06:	9001      	str	r0, [sp, #4]
 8017b08:	4403      	add	r3, r0
 8017b0a:	f04f 0b00 	mov.w	fp, #0
 8017b0e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8017b12:	9307      	str	r3, [sp, #28]
 8017b14:	f8da 3000 	ldr.w	r3, [sl]
 8017b18:	3302      	adds	r3, #2
 8017b1a:	461f      	mov	r7, r3
 8017b1c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8017b20:	2830      	cmp	r0, #48	; 0x30
 8017b22:	d06c      	beq.n	8017bfe <__gethex+0x118>
 8017b24:	f7ff ffca 	bl	8017abc <__hexdig_fun>
 8017b28:	4604      	mov	r4, r0
 8017b2a:	2800      	cmp	r0, #0
 8017b2c:	d16a      	bne.n	8017c04 <__gethex+0x11e>
 8017b2e:	9a01      	ldr	r2, [sp, #4]
 8017b30:	9903      	ldr	r1, [sp, #12]
 8017b32:	4638      	mov	r0, r7
 8017b34:	f001 fc36 	bl	80193a4 <strncmp>
 8017b38:	2800      	cmp	r0, #0
 8017b3a:	d166      	bne.n	8017c0a <__gethex+0x124>
 8017b3c:	9b01      	ldr	r3, [sp, #4]
 8017b3e:	5cf8      	ldrb	r0, [r7, r3]
 8017b40:	18fe      	adds	r6, r7, r3
 8017b42:	f7ff ffbb 	bl	8017abc <__hexdig_fun>
 8017b46:	2800      	cmp	r0, #0
 8017b48:	d062      	beq.n	8017c10 <__gethex+0x12a>
 8017b4a:	4633      	mov	r3, r6
 8017b4c:	7818      	ldrb	r0, [r3, #0]
 8017b4e:	2830      	cmp	r0, #48	; 0x30
 8017b50:	461f      	mov	r7, r3
 8017b52:	f103 0301 	add.w	r3, r3, #1
 8017b56:	d0f9      	beq.n	8017b4c <__gethex+0x66>
 8017b58:	f7ff ffb0 	bl	8017abc <__hexdig_fun>
 8017b5c:	fab0 f580 	clz	r5, r0
 8017b60:	096d      	lsrs	r5, r5, #5
 8017b62:	4634      	mov	r4, r6
 8017b64:	f04f 0b01 	mov.w	fp, #1
 8017b68:	463a      	mov	r2, r7
 8017b6a:	4616      	mov	r6, r2
 8017b6c:	3201      	adds	r2, #1
 8017b6e:	7830      	ldrb	r0, [r6, #0]
 8017b70:	f7ff ffa4 	bl	8017abc <__hexdig_fun>
 8017b74:	2800      	cmp	r0, #0
 8017b76:	d1f8      	bne.n	8017b6a <__gethex+0x84>
 8017b78:	9a01      	ldr	r2, [sp, #4]
 8017b7a:	9903      	ldr	r1, [sp, #12]
 8017b7c:	4630      	mov	r0, r6
 8017b7e:	f001 fc11 	bl	80193a4 <strncmp>
 8017b82:	b950      	cbnz	r0, 8017b9a <__gethex+0xb4>
 8017b84:	b954      	cbnz	r4, 8017b9c <__gethex+0xb6>
 8017b86:	9b01      	ldr	r3, [sp, #4]
 8017b88:	18f4      	adds	r4, r6, r3
 8017b8a:	4622      	mov	r2, r4
 8017b8c:	4616      	mov	r6, r2
 8017b8e:	3201      	adds	r2, #1
 8017b90:	7830      	ldrb	r0, [r6, #0]
 8017b92:	f7ff ff93 	bl	8017abc <__hexdig_fun>
 8017b96:	2800      	cmp	r0, #0
 8017b98:	d1f8      	bne.n	8017b8c <__gethex+0xa6>
 8017b9a:	b10c      	cbz	r4, 8017ba0 <__gethex+0xba>
 8017b9c:	1ba4      	subs	r4, r4, r6
 8017b9e:	00a4      	lsls	r4, r4, #2
 8017ba0:	7833      	ldrb	r3, [r6, #0]
 8017ba2:	2b50      	cmp	r3, #80	; 0x50
 8017ba4:	d001      	beq.n	8017baa <__gethex+0xc4>
 8017ba6:	2b70      	cmp	r3, #112	; 0x70
 8017ba8:	d140      	bne.n	8017c2c <__gethex+0x146>
 8017baa:	7873      	ldrb	r3, [r6, #1]
 8017bac:	2b2b      	cmp	r3, #43	; 0x2b
 8017bae:	d031      	beq.n	8017c14 <__gethex+0x12e>
 8017bb0:	2b2d      	cmp	r3, #45	; 0x2d
 8017bb2:	d033      	beq.n	8017c1c <__gethex+0x136>
 8017bb4:	1c71      	adds	r1, r6, #1
 8017bb6:	f04f 0900 	mov.w	r9, #0
 8017bba:	7808      	ldrb	r0, [r1, #0]
 8017bbc:	f7ff ff7e 	bl	8017abc <__hexdig_fun>
 8017bc0:	1e43      	subs	r3, r0, #1
 8017bc2:	b2db      	uxtb	r3, r3
 8017bc4:	2b18      	cmp	r3, #24
 8017bc6:	d831      	bhi.n	8017c2c <__gethex+0x146>
 8017bc8:	f1a0 0210 	sub.w	r2, r0, #16
 8017bcc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8017bd0:	f7ff ff74 	bl	8017abc <__hexdig_fun>
 8017bd4:	1e43      	subs	r3, r0, #1
 8017bd6:	b2db      	uxtb	r3, r3
 8017bd8:	2b18      	cmp	r3, #24
 8017bda:	d922      	bls.n	8017c22 <__gethex+0x13c>
 8017bdc:	f1b9 0f00 	cmp.w	r9, #0
 8017be0:	d000      	beq.n	8017be4 <__gethex+0xfe>
 8017be2:	4252      	negs	r2, r2
 8017be4:	4414      	add	r4, r2
 8017be6:	f8ca 1000 	str.w	r1, [sl]
 8017bea:	b30d      	cbz	r5, 8017c30 <__gethex+0x14a>
 8017bec:	f1bb 0f00 	cmp.w	fp, #0
 8017bf0:	bf0c      	ite	eq
 8017bf2:	2706      	moveq	r7, #6
 8017bf4:	2700      	movne	r7, #0
 8017bf6:	4638      	mov	r0, r7
 8017bf8:	b00b      	add	sp, #44	; 0x2c
 8017bfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017bfe:	f10b 0b01 	add.w	fp, fp, #1
 8017c02:	e78a      	b.n	8017b1a <__gethex+0x34>
 8017c04:	2500      	movs	r5, #0
 8017c06:	462c      	mov	r4, r5
 8017c08:	e7ae      	b.n	8017b68 <__gethex+0x82>
 8017c0a:	463e      	mov	r6, r7
 8017c0c:	2501      	movs	r5, #1
 8017c0e:	e7c7      	b.n	8017ba0 <__gethex+0xba>
 8017c10:	4604      	mov	r4, r0
 8017c12:	e7fb      	b.n	8017c0c <__gethex+0x126>
 8017c14:	f04f 0900 	mov.w	r9, #0
 8017c18:	1cb1      	adds	r1, r6, #2
 8017c1a:	e7ce      	b.n	8017bba <__gethex+0xd4>
 8017c1c:	f04f 0901 	mov.w	r9, #1
 8017c20:	e7fa      	b.n	8017c18 <__gethex+0x132>
 8017c22:	230a      	movs	r3, #10
 8017c24:	fb03 0202 	mla	r2, r3, r2, r0
 8017c28:	3a10      	subs	r2, #16
 8017c2a:	e7cf      	b.n	8017bcc <__gethex+0xe6>
 8017c2c:	4631      	mov	r1, r6
 8017c2e:	e7da      	b.n	8017be6 <__gethex+0x100>
 8017c30:	1bf3      	subs	r3, r6, r7
 8017c32:	3b01      	subs	r3, #1
 8017c34:	4629      	mov	r1, r5
 8017c36:	2b07      	cmp	r3, #7
 8017c38:	dc49      	bgt.n	8017cce <__gethex+0x1e8>
 8017c3a:	9802      	ldr	r0, [sp, #8]
 8017c3c:	f000 fa66 	bl	801810c <_Balloc>
 8017c40:	9b01      	ldr	r3, [sp, #4]
 8017c42:	f100 0914 	add.w	r9, r0, #20
 8017c46:	f04f 0b00 	mov.w	fp, #0
 8017c4a:	f1c3 0301 	rsb	r3, r3, #1
 8017c4e:	4605      	mov	r5, r0
 8017c50:	f8cd 9010 	str.w	r9, [sp, #16]
 8017c54:	46da      	mov	sl, fp
 8017c56:	9308      	str	r3, [sp, #32]
 8017c58:	42b7      	cmp	r7, r6
 8017c5a:	d33b      	bcc.n	8017cd4 <__gethex+0x1ee>
 8017c5c:	9804      	ldr	r0, [sp, #16]
 8017c5e:	f840 ab04 	str.w	sl, [r0], #4
 8017c62:	eba0 0009 	sub.w	r0, r0, r9
 8017c66:	1080      	asrs	r0, r0, #2
 8017c68:	6128      	str	r0, [r5, #16]
 8017c6a:	0147      	lsls	r7, r0, #5
 8017c6c:	4650      	mov	r0, sl
 8017c6e:	f000 fb11 	bl	8018294 <__hi0bits>
 8017c72:	f8d8 6000 	ldr.w	r6, [r8]
 8017c76:	1a3f      	subs	r7, r7, r0
 8017c78:	42b7      	cmp	r7, r6
 8017c7a:	dd64      	ble.n	8017d46 <__gethex+0x260>
 8017c7c:	1bbf      	subs	r7, r7, r6
 8017c7e:	4639      	mov	r1, r7
 8017c80:	4628      	mov	r0, r5
 8017c82:	f000 fe21 	bl	80188c8 <__any_on>
 8017c86:	4682      	mov	sl, r0
 8017c88:	b178      	cbz	r0, 8017caa <__gethex+0x1c4>
 8017c8a:	1e7b      	subs	r3, r7, #1
 8017c8c:	1159      	asrs	r1, r3, #5
 8017c8e:	f003 021f 	and.w	r2, r3, #31
 8017c92:	f04f 0a01 	mov.w	sl, #1
 8017c96:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8017c9a:	fa0a f202 	lsl.w	r2, sl, r2
 8017c9e:	420a      	tst	r2, r1
 8017ca0:	d003      	beq.n	8017caa <__gethex+0x1c4>
 8017ca2:	4553      	cmp	r3, sl
 8017ca4:	dc46      	bgt.n	8017d34 <__gethex+0x24e>
 8017ca6:	f04f 0a02 	mov.w	sl, #2
 8017caa:	4639      	mov	r1, r7
 8017cac:	4628      	mov	r0, r5
 8017cae:	f7ff fecb 	bl	8017a48 <rshift>
 8017cb2:	443c      	add	r4, r7
 8017cb4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017cb8:	42a3      	cmp	r3, r4
 8017cba:	da52      	bge.n	8017d62 <__gethex+0x27c>
 8017cbc:	4629      	mov	r1, r5
 8017cbe:	9802      	ldr	r0, [sp, #8]
 8017cc0:	f000 fa58 	bl	8018174 <_Bfree>
 8017cc4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017cc6:	2300      	movs	r3, #0
 8017cc8:	6013      	str	r3, [r2, #0]
 8017cca:	27a3      	movs	r7, #163	; 0xa3
 8017ccc:	e793      	b.n	8017bf6 <__gethex+0x110>
 8017cce:	3101      	adds	r1, #1
 8017cd0:	105b      	asrs	r3, r3, #1
 8017cd2:	e7b0      	b.n	8017c36 <__gethex+0x150>
 8017cd4:	1e73      	subs	r3, r6, #1
 8017cd6:	9305      	str	r3, [sp, #20]
 8017cd8:	9a07      	ldr	r2, [sp, #28]
 8017cda:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8017cde:	4293      	cmp	r3, r2
 8017ce0:	d018      	beq.n	8017d14 <__gethex+0x22e>
 8017ce2:	f1bb 0f20 	cmp.w	fp, #32
 8017ce6:	d107      	bne.n	8017cf8 <__gethex+0x212>
 8017ce8:	9b04      	ldr	r3, [sp, #16]
 8017cea:	f8c3 a000 	str.w	sl, [r3]
 8017cee:	3304      	adds	r3, #4
 8017cf0:	f04f 0a00 	mov.w	sl, #0
 8017cf4:	9304      	str	r3, [sp, #16]
 8017cf6:	46d3      	mov	fp, sl
 8017cf8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8017cfc:	f7ff fede 	bl	8017abc <__hexdig_fun>
 8017d00:	f000 000f 	and.w	r0, r0, #15
 8017d04:	fa00 f00b 	lsl.w	r0, r0, fp
 8017d08:	ea4a 0a00 	orr.w	sl, sl, r0
 8017d0c:	f10b 0b04 	add.w	fp, fp, #4
 8017d10:	9b05      	ldr	r3, [sp, #20]
 8017d12:	e00d      	b.n	8017d30 <__gethex+0x24a>
 8017d14:	9b05      	ldr	r3, [sp, #20]
 8017d16:	9a08      	ldr	r2, [sp, #32]
 8017d18:	4413      	add	r3, r2
 8017d1a:	42bb      	cmp	r3, r7
 8017d1c:	d3e1      	bcc.n	8017ce2 <__gethex+0x1fc>
 8017d1e:	4618      	mov	r0, r3
 8017d20:	9a01      	ldr	r2, [sp, #4]
 8017d22:	9903      	ldr	r1, [sp, #12]
 8017d24:	9309      	str	r3, [sp, #36]	; 0x24
 8017d26:	f001 fb3d 	bl	80193a4 <strncmp>
 8017d2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017d2c:	2800      	cmp	r0, #0
 8017d2e:	d1d8      	bne.n	8017ce2 <__gethex+0x1fc>
 8017d30:	461e      	mov	r6, r3
 8017d32:	e791      	b.n	8017c58 <__gethex+0x172>
 8017d34:	1eb9      	subs	r1, r7, #2
 8017d36:	4628      	mov	r0, r5
 8017d38:	f000 fdc6 	bl	80188c8 <__any_on>
 8017d3c:	2800      	cmp	r0, #0
 8017d3e:	d0b2      	beq.n	8017ca6 <__gethex+0x1c0>
 8017d40:	f04f 0a03 	mov.w	sl, #3
 8017d44:	e7b1      	b.n	8017caa <__gethex+0x1c4>
 8017d46:	da09      	bge.n	8017d5c <__gethex+0x276>
 8017d48:	1bf7      	subs	r7, r6, r7
 8017d4a:	4629      	mov	r1, r5
 8017d4c:	463a      	mov	r2, r7
 8017d4e:	9802      	ldr	r0, [sp, #8]
 8017d50:	f000 fbdc 	bl	801850c <__lshift>
 8017d54:	1be4      	subs	r4, r4, r7
 8017d56:	4605      	mov	r5, r0
 8017d58:	f100 0914 	add.w	r9, r0, #20
 8017d5c:	f04f 0a00 	mov.w	sl, #0
 8017d60:	e7a8      	b.n	8017cb4 <__gethex+0x1ce>
 8017d62:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8017d66:	42a0      	cmp	r0, r4
 8017d68:	dd6a      	ble.n	8017e40 <__gethex+0x35a>
 8017d6a:	1b04      	subs	r4, r0, r4
 8017d6c:	42a6      	cmp	r6, r4
 8017d6e:	dc2e      	bgt.n	8017dce <__gethex+0x2e8>
 8017d70:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017d74:	2b02      	cmp	r3, #2
 8017d76:	d022      	beq.n	8017dbe <__gethex+0x2d8>
 8017d78:	2b03      	cmp	r3, #3
 8017d7a:	d024      	beq.n	8017dc6 <__gethex+0x2e0>
 8017d7c:	2b01      	cmp	r3, #1
 8017d7e:	d115      	bne.n	8017dac <__gethex+0x2c6>
 8017d80:	42a6      	cmp	r6, r4
 8017d82:	d113      	bne.n	8017dac <__gethex+0x2c6>
 8017d84:	2e01      	cmp	r6, #1
 8017d86:	dc0b      	bgt.n	8017da0 <__gethex+0x2ba>
 8017d88:	9a06      	ldr	r2, [sp, #24]
 8017d8a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8017d8e:	6013      	str	r3, [r2, #0]
 8017d90:	2301      	movs	r3, #1
 8017d92:	612b      	str	r3, [r5, #16]
 8017d94:	f8c9 3000 	str.w	r3, [r9]
 8017d98:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017d9a:	2762      	movs	r7, #98	; 0x62
 8017d9c:	601d      	str	r5, [r3, #0]
 8017d9e:	e72a      	b.n	8017bf6 <__gethex+0x110>
 8017da0:	1e71      	subs	r1, r6, #1
 8017da2:	4628      	mov	r0, r5
 8017da4:	f000 fd90 	bl	80188c8 <__any_on>
 8017da8:	2800      	cmp	r0, #0
 8017daa:	d1ed      	bne.n	8017d88 <__gethex+0x2a2>
 8017dac:	4629      	mov	r1, r5
 8017dae:	9802      	ldr	r0, [sp, #8]
 8017db0:	f000 f9e0 	bl	8018174 <_Bfree>
 8017db4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017db6:	2300      	movs	r3, #0
 8017db8:	6013      	str	r3, [r2, #0]
 8017dba:	2750      	movs	r7, #80	; 0x50
 8017dbc:	e71b      	b.n	8017bf6 <__gethex+0x110>
 8017dbe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017dc0:	2b00      	cmp	r3, #0
 8017dc2:	d0e1      	beq.n	8017d88 <__gethex+0x2a2>
 8017dc4:	e7f2      	b.n	8017dac <__gethex+0x2c6>
 8017dc6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017dc8:	2b00      	cmp	r3, #0
 8017dca:	d1dd      	bne.n	8017d88 <__gethex+0x2a2>
 8017dcc:	e7ee      	b.n	8017dac <__gethex+0x2c6>
 8017dce:	1e67      	subs	r7, r4, #1
 8017dd0:	f1ba 0f00 	cmp.w	sl, #0
 8017dd4:	d131      	bne.n	8017e3a <__gethex+0x354>
 8017dd6:	b127      	cbz	r7, 8017de2 <__gethex+0x2fc>
 8017dd8:	4639      	mov	r1, r7
 8017dda:	4628      	mov	r0, r5
 8017ddc:	f000 fd74 	bl	80188c8 <__any_on>
 8017de0:	4682      	mov	sl, r0
 8017de2:	117a      	asrs	r2, r7, #5
 8017de4:	2301      	movs	r3, #1
 8017de6:	f007 071f 	and.w	r7, r7, #31
 8017dea:	fa03 f707 	lsl.w	r7, r3, r7
 8017dee:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8017df2:	4621      	mov	r1, r4
 8017df4:	421f      	tst	r7, r3
 8017df6:	4628      	mov	r0, r5
 8017df8:	bf18      	it	ne
 8017dfa:	f04a 0a02 	orrne.w	sl, sl, #2
 8017dfe:	1b36      	subs	r6, r6, r4
 8017e00:	f7ff fe22 	bl	8017a48 <rshift>
 8017e04:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8017e08:	2702      	movs	r7, #2
 8017e0a:	f1ba 0f00 	cmp.w	sl, #0
 8017e0e:	d048      	beq.n	8017ea2 <__gethex+0x3bc>
 8017e10:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017e14:	2b02      	cmp	r3, #2
 8017e16:	d015      	beq.n	8017e44 <__gethex+0x35e>
 8017e18:	2b03      	cmp	r3, #3
 8017e1a:	d017      	beq.n	8017e4c <__gethex+0x366>
 8017e1c:	2b01      	cmp	r3, #1
 8017e1e:	d109      	bne.n	8017e34 <__gethex+0x34e>
 8017e20:	f01a 0f02 	tst.w	sl, #2
 8017e24:	d006      	beq.n	8017e34 <__gethex+0x34e>
 8017e26:	f8d9 3000 	ldr.w	r3, [r9]
 8017e2a:	ea4a 0a03 	orr.w	sl, sl, r3
 8017e2e:	f01a 0f01 	tst.w	sl, #1
 8017e32:	d10e      	bne.n	8017e52 <__gethex+0x36c>
 8017e34:	f047 0710 	orr.w	r7, r7, #16
 8017e38:	e033      	b.n	8017ea2 <__gethex+0x3bc>
 8017e3a:	f04f 0a01 	mov.w	sl, #1
 8017e3e:	e7d0      	b.n	8017de2 <__gethex+0x2fc>
 8017e40:	2701      	movs	r7, #1
 8017e42:	e7e2      	b.n	8017e0a <__gethex+0x324>
 8017e44:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017e46:	f1c3 0301 	rsb	r3, r3, #1
 8017e4a:	9315      	str	r3, [sp, #84]	; 0x54
 8017e4c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8017e4e:	2b00      	cmp	r3, #0
 8017e50:	d0f0      	beq.n	8017e34 <__gethex+0x34e>
 8017e52:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8017e56:	f105 0314 	add.w	r3, r5, #20
 8017e5a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8017e5e:	eb03 010a 	add.w	r1, r3, sl
 8017e62:	f04f 0c00 	mov.w	ip, #0
 8017e66:	4618      	mov	r0, r3
 8017e68:	f853 2b04 	ldr.w	r2, [r3], #4
 8017e6c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8017e70:	d01c      	beq.n	8017eac <__gethex+0x3c6>
 8017e72:	3201      	adds	r2, #1
 8017e74:	6002      	str	r2, [r0, #0]
 8017e76:	2f02      	cmp	r7, #2
 8017e78:	f105 0314 	add.w	r3, r5, #20
 8017e7c:	d138      	bne.n	8017ef0 <__gethex+0x40a>
 8017e7e:	f8d8 2000 	ldr.w	r2, [r8]
 8017e82:	3a01      	subs	r2, #1
 8017e84:	42b2      	cmp	r2, r6
 8017e86:	d10a      	bne.n	8017e9e <__gethex+0x3b8>
 8017e88:	1171      	asrs	r1, r6, #5
 8017e8a:	2201      	movs	r2, #1
 8017e8c:	f006 061f 	and.w	r6, r6, #31
 8017e90:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8017e94:	fa02 f606 	lsl.w	r6, r2, r6
 8017e98:	421e      	tst	r6, r3
 8017e9a:	bf18      	it	ne
 8017e9c:	4617      	movne	r7, r2
 8017e9e:	f047 0720 	orr.w	r7, r7, #32
 8017ea2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8017ea4:	601d      	str	r5, [r3, #0]
 8017ea6:	9b06      	ldr	r3, [sp, #24]
 8017ea8:	601c      	str	r4, [r3, #0]
 8017eaa:	e6a4      	b.n	8017bf6 <__gethex+0x110>
 8017eac:	4299      	cmp	r1, r3
 8017eae:	f843 cc04 	str.w	ip, [r3, #-4]
 8017eb2:	d8d8      	bhi.n	8017e66 <__gethex+0x380>
 8017eb4:	68ab      	ldr	r3, [r5, #8]
 8017eb6:	4599      	cmp	r9, r3
 8017eb8:	db12      	blt.n	8017ee0 <__gethex+0x3fa>
 8017eba:	6869      	ldr	r1, [r5, #4]
 8017ebc:	9802      	ldr	r0, [sp, #8]
 8017ebe:	3101      	adds	r1, #1
 8017ec0:	f000 f924 	bl	801810c <_Balloc>
 8017ec4:	692a      	ldr	r2, [r5, #16]
 8017ec6:	3202      	adds	r2, #2
 8017ec8:	f105 010c 	add.w	r1, r5, #12
 8017ecc:	4683      	mov	fp, r0
 8017ece:	0092      	lsls	r2, r2, #2
 8017ed0:	300c      	adds	r0, #12
 8017ed2:	f7fd f9c5 	bl	8015260 <memcpy>
 8017ed6:	4629      	mov	r1, r5
 8017ed8:	9802      	ldr	r0, [sp, #8]
 8017eda:	f000 f94b 	bl	8018174 <_Bfree>
 8017ede:	465d      	mov	r5, fp
 8017ee0:	692b      	ldr	r3, [r5, #16]
 8017ee2:	1c5a      	adds	r2, r3, #1
 8017ee4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8017ee8:	612a      	str	r2, [r5, #16]
 8017eea:	2201      	movs	r2, #1
 8017eec:	615a      	str	r2, [r3, #20]
 8017eee:	e7c2      	b.n	8017e76 <__gethex+0x390>
 8017ef0:	692a      	ldr	r2, [r5, #16]
 8017ef2:	454a      	cmp	r2, r9
 8017ef4:	dd0b      	ble.n	8017f0e <__gethex+0x428>
 8017ef6:	2101      	movs	r1, #1
 8017ef8:	4628      	mov	r0, r5
 8017efa:	f7ff fda5 	bl	8017a48 <rshift>
 8017efe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8017f02:	3401      	adds	r4, #1
 8017f04:	42a3      	cmp	r3, r4
 8017f06:	f6ff aed9 	blt.w	8017cbc <__gethex+0x1d6>
 8017f0a:	2701      	movs	r7, #1
 8017f0c:	e7c7      	b.n	8017e9e <__gethex+0x3b8>
 8017f0e:	f016 061f 	ands.w	r6, r6, #31
 8017f12:	d0fa      	beq.n	8017f0a <__gethex+0x424>
 8017f14:	449a      	add	sl, r3
 8017f16:	f1c6 0620 	rsb	r6, r6, #32
 8017f1a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8017f1e:	f000 f9b9 	bl	8018294 <__hi0bits>
 8017f22:	42b0      	cmp	r0, r6
 8017f24:	dbe7      	blt.n	8017ef6 <__gethex+0x410>
 8017f26:	e7f0      	b.n	8017f0a <__gethex+0x424>

08017f28 <L_shift>:
 8017f28:	f1c2 0208 	rsb	r2, r2, #8
 8017f2c:	0092      	lsls	r2, r2, #2
 8017f2e:	b570      	push	{r4, r5, r6, lr}
 8017f30:	f1c2 0620 	rsb	r6, r2, #32
 8017f34:	6843      	ldr	r3, [r0, #4]
 8017f36:	6804      	ldr	r4, [r0, #0]
 8017f38:	fa03 f506 	lsl.w	r5, r3, r6
 8017f3c:	432c      	orrs	r4, r5
 8017f3e:	40d3      	lsrs	r3, r2
 8017f40:	6004      	str	r4, [r0, #0]
 8017f42:	f840 3f04 	str.w	r3, [r0, #4]!
 8017f46:	4288      	cmp	r0, r1
 8017f48:	d3f4      	bcc.n	8017f34 <L_shift+0xc>
 8017f4a:	bd70      	pop	{r4, r5, r6, pc}

08017f4c <__match>:
 8017f4c:	b530      	push	{r4, r5, lr}
 8017f4e:	6803      	ldr	r3, [r0, #0]
 8017f50:	3301      	adds	r3, #1
 8017f52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017f56:	b914      	cbnz	r4, 8017f5e <__match+0x12>
 8017f58:	6003      	str	r3, [r0, #0]
 8017f5a:	2001      	movs	r0, #1
 8017f5c:	bd30      	pop	{r4, r5, pc}
 8017f5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017f62:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8017f66:	2d19      	cmp	r5, #25
 8017f68:	bf98      	it	ls
 8017f6a:	3220      	addls	r2, #32
 8017f6c:	42a2      	cmp	r2, r4
 8017f6e:	d0f0      	beq.n	8017f52 <__match+0x6>
 8017f70:	2000      	movs	r0, #0
 8017f72:	e7f3      	b.n	8017f5c <__match+0x10>

08017f74 <__hexnan>:
 8017f74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f78:	680b      	ldr	r3, [r1, #0]
 8017f7a:	6801      	ldr	r1, [r0, #0]
 8017f7c:	115f      	asrs	r7, r3, #5
 8017f7e:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8017f82:	f013 031f 	ands.w	r3, r3, #31
 8017f86:	b087      	sub	sp, #28
 8017f88:	bf18      	it	ne
 8017f8a:	3704      	addne	r7, #4
 8017f8c:	2500      	movs	r5, #0
 8017f8e:	1f3e      	subs	r6, r7, #4
 8017f90:	4682      	mov	sl, r0
 8017f92:	4690      	mov	r8, r2
 8017f94:	9301      	str	r3, [sp, #4]
 8017f96:	f847 5c04 	str.w	r5, [r7, #-4]
 8017f9a:	46b1      	mov	r9, r6
 8017f9c:	4634      	mov	r4, r6
 8017f9e:	9502      	str	r5, [sp, #8]
 8017fa0:	46ab      	mov	fp, r5
 8017fa2:	784a      	ldrb	r2, [r1, #1]
 8017fa4:	1c4b      	adds	r3, r1, #1
 8017fa6:	9303      	str	r3, [sp, #12]
 8017fa8:	b342      	cbz	r2, 8017ffc <__hexnan+0x88>
 8017faa:	4610      	mov	r0, r2
 8017fac:	9105      	str	r1, [sp, #20]
 8017fae:	9204      	str	r2, [sp, #16]
 8017fb0:	f7ff fd84 	bl	8017abc <__hexdig_fun>
 8017fb4:	2800      	cmp	r0, #0
 8017fb6:	d143      	bne.n	8018040 <__hexnan+0xcc>
 8017fb8:	9a04      	ldr	r2, [sp, #16]
 8017fba:	9905      	ldr	r1, [sp, #20]
 8017fbc:	2a20      	cmp	r2, #32
 8017fbe:	d818      	bhi.n	8017ff2 <__hexnan+0x7e>
 8017fc0:	9b02      	ldr	r3, [sp, #8]
 8017fc2:	459b      	cmp	fp, r3
 8017fc4:	dd13      	ble.n	8017fee <__hexnan+0x7a>
 8017fc6:	454c      	cmp	r4, r9
 8017fc8:	d206      	bcs.n	8017fd8 <__hexnan+0x64>
 8017fca:	2d07      	cmp	r5, #7
 8017fcc:	dc04      	bgt.n	8017fd8 <__hexnan+0x64>
 8017fce:	462a      	mov	r2, r5
 8017fd0:	4649      	mov	r1, r9
 8017fd2:	4620      	mov	r0, r4
 8017fd4:	f7ff ffa8 	bl	8017f28 <L_shift>
 8017fd8:	4544      	cmp	r4, r8
 8017fda:	d944      	bls.n	8018066 <__hexnan+0xf2>
 8017fdc:	2300      	movs	r3, #0
 8017fde:	f1a4 0904 	sub.w	r9, r4, #4
 8017fe2:	f844 3c04 	str.w	r3, [r4, #-4]
 8017fe6:	f8cd b008 	str.w	fp, [sp, #8]
 8017fea:	464c      	mov	r4, r9
 8017fec:	461d      	mov	r5, r3
 8017fee:	9903      	ldr	r1, [sp, #12]
 8017ff0:	e7d7      	b.n	8017fa2 <__hexnan+0x2e>
 8017ff2:	2a29      	cmp	r2, #41	; 0x29
 8017ff4:	d14a      	bne.n	801808c <__hexnan+0x118>
 8017ff6:	3102      	adds	r1, #2
 8017ff8:	f8ca 1000 	str.w	r1, [sl]
 8017ffc:	f1bb 0f00 	cmp.w	fp, #0
 8018000:	d044      	beq.n	801808c <__hexnan+0x118>
 8018002:	454c      	cmp	r4, r9
 8018004:	d206      	bcs.n	8018014 <__hexnan+0xa0>
 8018006:	2d07      	cmp	r5, #7
 8018008:	dc04      	bgt.n	8018014 <__hexnan+0xa0>
 801800a:	462a      	mov	r2, r5
 801800c:	4649      	mov	r1, r9
 801800e:	4620      	mov	r0, r4
 8018010:	f7ff ff8a 	bl	8017f28 <L_shift>
 8018014:	4544      	cmp	r4, r8
 8018016:	d928      	bls.n	801806a <__hexnan+0xf6>
 8018018:	4643      	mov	r3, r8
 801801a:	f854 2b04 	ldr.w	r2, [r4], #4
 801801e:	f843 2b04 	str.w	r2, [r3], #4
 8018022:	42a6      	cmp	r6, r4
 8018024:	d2f9      	bcs.n	801801a <__hexnan+0xa6>
 8018026:	2200      	movs	r2, #0
 8018028:	f843 2b04 	str.w	r2, [r3], #4
 801802c:	429e      	cmp	r6, r3
 801802e:	d2fb      	bcs.n	8018028 <__hexnan+0xb4>
 8018030:	6833      	ldr	r3, [r6, #0]
 8018032:	b91b      	cbnz	r3, 801803c <__hexnan+0xc8>
 8018034:	4546      	cmp	r6, r8
 8018036:	d127      	bne.n	8018088 <__hexnan+0x114>
 8018038:	2301      	movs	r3, #1
 801803a:	6033      	str	r3, [r6, #0]
 801803c:	2005      	movs	r0, #5
 801803e:	e026      	b.n	801808e <__hexnan+0x11a>
 8018040:	3501      	adds	r5, #1
 8018042:	2d08      	cmp	r5, #8
 8018044:	f10b 0b01 	add.w	fp, fp, #1
 8018048:	dd06      	ble.n	8018058 <__hexnan+0xe4>
 801804a:	4544      	cmp	r4, r8
 801804c:	d9cf      	bls.n	8017fee <__hexnan+0x7a>
 801804e:	2300      	movs	r3, #0
 8018050:	f844 3c04 	str.w	r3, [r4, #-4]
 8018054:	2501      	movs	r5, #1
 8018056:	3c04      	subs	r4, #4
 8018058:	6822      	ldr	r2, [r4, #0]
 801805a:	f000 000f 	and.w	r0, r0, #15
 801805e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8018062:	6020      	str	r0, [r4, #0]
 8018064:	e7c3      	b.n	8017fee <__hexnan+0x7a>
 8018066:	2508      	movs	r5, #8
 8018068:	e7c1      	b.n	8017fee <__hexnan+0x7a>
 801806a:	9b01      	ldr	r3, [sp, #4]
 801806c:	2b00      	cmp	r3, #0
 801806e:	d0df      	beq.n	8018030 <__hexnan+0xbc>
 8018070:	f04f 32ff 	mov.w	r2, #4294967295
 8018074:	f1c3 0320 	rsb	r3, r3, #32
 8018078:	fa22 f303 	lsr.w	r3, r2, r3
 801807c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8018080:	401a      	ands	r2, r3
 8018082:	f847 2c04 	str.w	r2, [r7, #-4]
 8018086:	e7d3      	b.n	8018030 <__hexnan+0xbc>
 8018088:	3e04      	subs	r6, #4
 801808a:	e7d1      	b.n	8018030 <__hexnan+0xbc>
 801808c:	2004      	movs	r0, #4
 801808e:	b007      	add	sp, #28
 8018090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018094 <__locale_ctype_ptr_l>:
 8018094:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8018098:	4770      	bx	lr
	...

0801809c <__locale_ctype_ptr>:
 801809c:	4b04      	ldr	r3, [pc, #16]	; (80180b0 <__locale_ctype_ptr+0x14>)
 801809e:	4a05      	ldr	r2, [pc, #20]	; (80180b4 <__locale_ctype_ptr+0x18>)
 80180a0:	681b      	ldr	r3, [r3, #0]
 80180a2:	6a1b      	ldr	r3, [r3, #32]
 80180a4:	2b00      	cmp	r3, #0
 80180a6:	bf08      	it	eq
 80180a8:	4613      	moveq	r3, r2
 80180aa:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 80180ae:	4770      	bx	lr
 80180b0:	2000000c 	.word	0x2000000c
 80180b4:	20000070 	.word	0x20000070

080180b8 <__localeconv_l>:
 80180b8:	30f0      	adds	r0, #240	; 0xf0
 80180ba:	4770      	bx	lr

080180bc <_localeconv_r>:
 80180bc:	4b04      	ldr	r3, [pc, #16]	; (80180d0 <_localeconv_r+0x14>)
 80180be:	681b      	ldr	r3, [r3, #0]
 80180c0:	6a18      	ldr	r0, [r3, #32]
 80180c2:	4b04      	ldr	r3, [pc, #16]	; (80180d4 <_localeconv_r+0x18>)
 80180c4:	2800      	cmp	r0, #0
 80180c6:	bf08      	it	eq
 80180c8:	4618      	moveq	r0, r3
 80180ca:	30f0      	adds	r0, #240	; 0xf0
 80180cc:	4770      	bx	lr
 80180ce:	bf00      	nop
 80180d0:	2000000c 	.word	0x2000000c
 80180d4:	20000070 	.word	0x20000070

080180d8 <malloc>:
 80180d8:	4b02      	ldr	r3, [pc, #8]	; (80180e4 <malloc+0xc>)
 80180da:	4601      	mov	r1, r0
 80180dc:	6818      	ldr	r0, [r3, #0]
 80180de:	f000 bc71 	b.w	80189c4 <_malloc_r>
 80180e2:	bf00      	nop
 80180e4:	2000000c 	.word	0x2000000c

080180e8 <__ascii_mbtowc>:
 80180e8:	b082      	sub	sp, #8
 80180ea:	b901      	cbnz	r1, 80180ee <__ascii_mbtowc+0x6>
 80180ec:	a901      	add	r1, sp, #4
 80180ee:	b142      	cbz	r2, 8018102 <__ascii_mbtowc+0x1a>
 80180f0:	b14b      	cbz	r3, 8018106 <__ascii_mbtowc+0x1e>
 80180f2:	7813      	ldrb	r3, [r2, #0]
 80180f4:	600b      	str	r3, [r1, #0]
 80180f6:	7812      	ldrb	r2, [r2, #0]
 80180f8:	1c10      	adds	r0, r2, #0
 80180fa:	bf18      	it	ne
 80180fc:	2001      	movne	r0, #1
 80180fe:	b002      	add	sp, #8
 8018100:	4770      	bx	lr
 8018102:	4610      	mov	r0, r2
 8018104:	e7fb      	b.n	80180fe <__ascii_mbtowc+0x16>
 8018106:	f06f 0001 	mvn.w	r0, #1
 801810a:	e7f8      	b.n	80180fe <__ascii_mbtowc+0x16>

0801810c <_Balloc>:
 801810c:	b570      	push	{r4, r5, r6, lr}
 801810e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8018110:	4604      	mov	r4, r0
 8018112:	460e      	mov	r6, r1
 8018114:	b93d      	cbnz	r5, 8018126 <_Balloc+0x1a>
 8018116:	2010      	movs	r0, #16
 8018118:	f7ff ffde 	bl	80180d8 <malloc>
 801811c:	6260      	str	r0, [r4, #36]	; 0x24
 801811e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8018122:	6005      	str	r5, [r0, #0]
 8018124:	60c5      	str	r5, [r0, #12]
 8018126:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8018128:	68eb      	ldr	r3, [r5, #12]
 801812a:	b183      	cbz	r3, 801814e <_Balloc+0x42>
 801812c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801812e:	68db      	ldr	r3, [r3, #12]
 8018130:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8018134:	b9b8      	cbnz	r0, 8018166 <_Balloc+0x5a>
 8018136:	2101      	movs	r1, #1
 8018138:	fa01 f506 	lsl.w	r5, r1, r6
 801813c:	1d6a      	adds	r2, r5, #5
 801813e:	0092      	lsls	r2, r2, #2
 8018140:	4620      	mov	r0, r4
 8018142:	f000 fbe2 	bl	801890a <_calloc_r>
 8018146:	b160      	cbz	r0, 8018162 <_Balloc+0x56>
 8018148:	e9c0 6501 	strd	r6, r5, [r0, #4]
 801814c:	e00e      	b.n	801816c <_Balloc+0x60>
 801814e:	2221      	movs	r2, #33	; 0x21
 8018150:	2104      	movs	r1, #4
 8018152:	4620      	mov	r0, r4
 8018154:	f000 fbd9 	bl	801890a <_calloc_r>
 8018158:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801815a:	60e8      	str	r0, [r5, #12]
 801815c:	68db      	ldr	r3, [r3, #12]
 801815e:	2b00      	cmp	r3, #0
 8018160:	d1e4      	bne.n	801812c <_Balloc+0x20>
 8018162:	2000      	movs	r0, #0
 8018164:	bd70      	pop	{r4, r5, r6, pc}
 8018166:	6802      	ldr	r2, [r0, #0]
 8018168:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 801816c:	2300      	movs	r3, #0
 801816e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018172:	e7f7      	b.n	8018164 <_Balloc+0x58>

08018174 <_Bfree>:
 8018174:	b570      	push	{r4, r5, r6, lr}
 8018176:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8018178:	4606      	mov	r6, r0
 801817a:	460d      	mov	r5, r1
 801817c:	b93c      	cbnz	r4, 801818e <_Bfree+0x1a>
 801817e:	2010      	movs	r0, #16
 8018180:	f7ff ffaa 	bl	80180d8 <malloc>
 8018184:	6270      	str	r0, [r6, #36]	; 0x24
 8018186:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801818a:	6004      	str	r4, [r0, #0]
 801818c:	60c4      	str	r4, [r0, #12]
 801818e:	b13d      	cbz	r5, 80181a0 <_Bfree+0x2c>
 8018190:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8018192:	686a      	ldr	r2, [r5, #4]
 8018194:	68db      	ldr	r3, [r3, #12]
 8018196:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801819a:	6029      	str	r1, [r5, #0]
 801819c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80181a0:	bd70      	pop	{r4, r5, r6, pc}

080181a2 <__multadd>:
 80181a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80181a6:	690d      	ldr	r5, [r1, #16]
 80181a8:	461f      	mov	r7, r3
 80181aa:	4606      	mov	r6, r0
 80181ac:	460c      	mov	r4, r1
 80181ae:	f101 0c14 	add.w	ip, r1, #20
 80181b2:	2300      	movs	r3, #0
 80181b4:	f8dc 0000 	ldr.w	r0, [ip]
 80181b8:	b281      	uxth	r1, r0
 80181ba:	fb02 7101 	mla	r1, r2, r1, r7
 80181be:	0c0f      	lsrs	r7, r1, #16
 80181c0:	0c00      	lsrs	r0, r0, #16
 80181c2:	fb02 7000 	mla	r0, r2, r0, r7
 80181c6:	b289      	uxth	r1, r1
 80181c8:	3301      	adds	r3, #1
 80181ca:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80181ce:	429d      	cmp	r5, r3
 80181d0:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80181d4:	f84c 1b04 	str.w	r1, [ip], #4
 80181d8:	dcec      	bgt.n	80181b4 <__multadd+0x12>
 80181da:	b1d7      	cbz	r7, 8018212 <__multadd+0x70>
 80181dc:	68a3      	ldr	r3, [r4, #8]
 80181de:	42ab      	cmp	r3, r5
 80181e0:	dc12      	bgt.n	8018208 <__multadd+0x66>
 80181e2:	6861      	ldr	r1, [r4, #4]
 80181e4:	4630      	mov	r0, r6
 80181e6:	3101      	adds	r1, #1
 80181e8:	f7ff ff90 	bl	801810c <_Balloc>
 80181ec:	6922      	ldr	r2, [r4, #16]
 80181ee:	3202      	adds	r2, #2
 80181f0:	f104 010c 	add.w	r1, r4, #12
 80181f4:	4680      	mov	r8, r0
 80181f6:	0092      	lsls	r2, r2, #2
 80181f8:	300c      	adds	r0, #12
 80181fa:	f7fd f831 	bl	8015260 <memcpy>
 80181fe:	4621      	mov	r1, r4
 8018200:	4630      	mov	r0, r6
 8018202:	f7ff ffb7 	bl	8018174 <_Bfree>
 8018206:	4644      	mov	r4, r8
 8018208:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801820c:	3501      	adds	r5, #1
 801820e:	615f      	str	r7, [r3, #20]
 8018210:	6125      	str	r5, [r4, #16]
 8018212:	4620      	mov	r0, r4
 8018214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018218 <__s2b>:
 8018218:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801821c:	460c      	mov	r4, r1
 801821e:	4615      	mov	r5, r2
 8018220:	461f      	mov	r7, r3
 8018222:	2209      	movs	r2, #9
 8018224:	3308      	adds	r3, #8
 8018226:	4606      	mov	r6, r0
 8018228:	fb93 f3f2 	sdiv	r3, r3, r2
 801822c:	2100      	movs	r1, #0
 801822e:	2201      	movs	r2, #1
 8018230:	429a      	cmp	r2, r3
 8018232:	db20      	blt.n	8018276 <__s2b+0x5e>
 8018234:	4630      	mov	r0, r6
 8018236:	f7ff ff69 	bl	801810c <_Balloc>
 801823a:	9b08      	ldr	r3, [sp, #32]
 801823c:	6143      	str	r3, [r0, #20]
 801823e:	2d09      	cmp	r5, #9
 8018240:	f04f 0301 	mov.w	r3, #1
 8018244:	6103      	str	r3, [r0, #16]
 8018246:	dd19      	ble.n	801827c <__s2b+0x64>
 8018248:	f104 0809 	add.w	r8, r4, #9
 801824c:	46c1      	mov	r9, r8
 801824e:	442c      	add	r4, r5
 8018250:	f819 3b01 	ldrb.w	r3, [r9], #1
 8018254:	4601      	mov	r1, r0
 8018256:	3b30      	subs	r3, #48	; 0x30
 8018258:	220a      	movs	r2, #10
 801825a:	4630      	mov	r0, r6
 801825c:	f7ff ffa1 	bl	80181a2 <__multadd>
 8018260:	45a1      	cmp	r9, r4
 8018262:	d1f5      	bne.n	8018250 <__s2b+0x38>
 8018264:	eb08 0405 	add.w	r4, r8, r5
 8018268:	3c08      	subs	r4, #8
 801826a:	1b2d      	subs	r5, r5, r4
 801826c:	1963      	adds	r3, r4, r5
 801826e:	42bb      	cmp	r3, r7
 8018270:	db07      	blt.n	8018282 <__s2b+0x6a>
 8018272:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018276:	0052      	lsls	r2, r2, #1
 8018278:	3101      	adds	r1, #1
 801827a:	e7d9      	b.n	8018230 <__s2b+0x18>
 801827c:	340a      	adds	r4, #10
 801827e:	2509      	movs	r5, #9
 8018280:	e7f3      	b.n	801826a <__s2b+0x52>
 8018282:	f814 3b01 	ldrb.w	r3, [r4], #1
 8018286:	4601      	mov	r1, r0
 8018288:	3b30      	subs	r3, #48	; 0x30
 801828a:	220a      	movs	r2, #10
 801828c:	4630      	mov	r0, r6
 801828e:	f7ff ff88 	bl	80181a2 <__multadd>
 8018292:	e7eb      	b.n	801826c <__s2b+0x54>

08018294 <__hi0bits>:
 8018294:	0c02      	lsrs	r2, r0, #16
 8018296:	0412      	lsls	r2, r2, #16
 8018298:	4603      	mov	r3, r0
 801829a:	b9b2      	cbnz	r2, 80182ca <__hi0bits+0x36>
 801829c:	0403      	lsls	r3, r0, #16
 801829e:	2010      	movs	r0, #16
 80182a0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80182a4:	bf04      	itt	eq
 80182a6:	021b      	lsleq	r3, r3, #8
 80182a8:	3008      	addeq	r0, #8
 80182aa:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80182ae:	bf04      	itt	eq
 80182b0:	011b      	lsleq	r3, r3, #4
 80182b2:	3004      	addeq	r0, #4
 80182b4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80182b8:	bf04      	itt	eq
 80182ba:	009b      	lsleq	r3, r3, #2
 80182bc:	3002      	addeq	r0, #2
 80182be:	2b00      	cmp	r3, #0
 80182c0:	db06      	blt.n	80182d0 <__hi0bits+0x3c>
 80182c2:	005b      	lsls	r3, r3, #1
 80182c4:	d503      	bpl.n	80182ce <__hi0bits+0x3a>
 80182c6:	3001      	adds	r0, #1
 80182c8:	4770      	bx	lr
 80182ca:	2000      	movs	r0, #0
 80182cc:	e7e8      	b.n	80182a0 <__hi0bits+0xc>
 80182ce:	2020      	movs	r0, #32
 80182d0:	4770      	bx	lr

080182d2 <__lo0bits>:
 80182d2:	6803      	ldr	r3, [r0, #0]
 80182d4:	f013 0207 	ands.w	r2, r3, #7
 80182d8:	4601      	mov	r1, r0
 80182da:	d00b      	beq.n	80182f4 <__lo0bits+0x22>
 80182dc:	07da      	lsls	r2, r3, #31
 80182de:	d423      	bmi.n	8018328 <__lo0bits+0x56>
 80182e0:	0798      	lsls	r0, r3, #30
 80182e2:	bf49      	itett	mi
 80182e4:	085b      	lsrmi	r3, r3, #1
 80182e6:	089b      	lsrpl	r3, r3, #2
 80182e8:	2001      	movmi	r0, #1
 80182ea:	600b      	strmi	r3, [r1, #0]
 80182ec:	bf5c      	itt	pl
 80182ee:	600b      	strpl	r3, [r1, #0]
 80182f0:	2002      	movpl	r0, #2
 80182f2:	4770      	bx	lr
 80182f4:	b298      	uxth	r0, r3
 80182f6:	b9a8      	cbnz	r0, 8018324 <__lo0bits+0x52>
 80182f8:	0c1b      	lsrs	r3, r3, #16
 80182fa:	2010      	movs	r0, #16
 80182fc:	f013 0fff 	tst.w	r3, #255	; 0xff
 8018300:	bf04      	itt	eq
 8018302:	0a1b      	lsreq	r3, r3, #8
 8018304:	3008      	addeq	r0, #8
 8018306:	071a      	lsls	r2, r3, #28
 8018308:	bf04      	itt	eq
 801830a:	091b      	lsreq	r3, r3, #4
 801830c:	3004      	addeq	r0, #4
 801830e:	079a      	lsls	r2, r3, #30
 8018310:	bf04      	itt	eq
 8018312:	089b      	lsreq	r3, r3, #2
 8018314:	3002      	addeq	r0, #2
 8018316:	07da      	lsls	r2, r3, #31
 8018318:	d402      	bmi.n	8018320 <__lo0bits+0x4e>
 801831a:	085b      	lsrs	r3, r3, #1
 801831c:	d006      	beq.n	801832c <__lo0bits+0x5a>
 801831e:	3001      	adds	r0, #1
 8018320:	600b      	str	r3, [r1, #0]
 8018322:	4770      	bx	lr
 8018324:	4610      	mov	r0, r2
 8018326:	e7e9      	b.n	80182fc <__lo0bits+0x2a>
 8018328:	2000      	movs	r0, #0
 801832a:	4770      	bx	lr
 801832c:	2020      	movs	r0, #32
 801832e:	4770      	bx	lr

08018330 <__i2b>:
 8018330:	b510      	push	{r4, lr}
 8018332:	460c      	mov	r4, r1
 8018334:	2101      	movs	r1, #1
 8018336:	f7ff fee9 	bl	801810c <_Balloc>
 801833a:	2201      	movs	r2, #1
 801833c:	6144      	str	r4, [r0, #20]
 801833e:	6102      	str	r2, [r0, #16]
 8018340:	bd10      	pop	{r4, pc}

08018342 <__multiply>:
 8018342:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018346:	4614      	mov	r4, r2
 8018348:	690a      	ldr	r2, [r1, #16]
 801834a:	6923      	ldr	r3, [r4, #16]
 801834c:	429a      	cmp	r2, r3
 801834e:	bfb8      	it	lt
 8018350:	460b      	movlt	r3, r1
 8018352:	4688      	mov	r8, r1
 8018354:	bfbc      	itt	lt
 8018356:	46a0      	movlt	r8, r4
 8018358:	461c      	movlt	r4, r3
 801835a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801835e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8018362:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8018366:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801836a:	eb07 0609 	add.w	r6, r7, r9
 801836e:	42b3      	cmp	r3, r6
 8018370:	bfb8      	it	lt
 8018372:	3101      	addlt	r1, #1
 8018374:	f7ff feca 	bl	801810c <_Balloc>
 8018378:	f100 0514 	add.w	r5, r0, #20
 801837c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8018380:	462b      	mov	r3, r5
 8018382:	2200      	movs	r2, #0
 8018384:	4573      	cmp	r3, lr
 8018386:	d316      	bcc.n	80183b6 <__multiply+0x74>
 8018388:	f104 0214 	add.w	r2, r4, #20
 801838c:	f108 0114 	add.w	r1, r8, #20
 8018390:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8018394:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8018398:	9300      	str	r3, [sp, #0]
 801839a:	9b00      	ldr	r3, [sp, #0]
 801839c:	9201      	str	r2, [sp, #4]
 801839e:	4293      	cmp	r3, r2
 80183a0:	d80c      	bhi.n	80183bc <__multiply+0x7a>
 80183a2:	2e00      	cmp	r6, #0
 80183a4:	dd03      	ble.n	80183ae <__multiply+0x6c>
 80183a6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80183aa:	2b00      	cmp	r3, #0
 80183ac:	d05d      	beq.n	801846a <__multiply+0x128>
 80183ae:	6106      	str	r6, [r0, #16]
 80183b0:	b003      	add	sp, #12
 80183b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80183b6:	f843 2b04 	str.w	r2, [r3], #4
 80183ba:	e7e3      	b.n	8018384 <__multiply+0x42>
 80183bc:	f8b2 b000 	ldrh.w	fp, [r2]
 80183c0:	f1bb 0f00 	cmp.w	fp, #0
 80183c4:	d023      	beq.n	801840e <__multiply+0xcc>
 80183c6:	4689      	mov	r9, r1
 80183c8:	46ac      	mov	ip, r5
 80183ca:	f04f 0800 	mov.w	r8, #0
 80183ce:	f859 4b04 	ldr.w	r4, [r9], #4
 80183d2:	f8dc a000 	ldr.w	sl, [ip]
 80183d6:	b2a3      	uxth	r3, r4
 80183d8:	fa1f fa8a 	uxth.w	sl, sl
 80183dc:	fb0b a303 	mla	r3, fp, r3, sl
 80183e0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80183e4:	f8dc 4000 	ldr.w	r4, [ip]
 80183e8:	4443      	add	r3, r8
 80183ea:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80183ee:	fb0b 840a 	mla	r4, fp, sl, r8
 80183f2:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80183f6:	46e2      	mov	sl, ip
 80183f8:	b29b      	uxth	r3, r3
 80183fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80183fe:	454f      	cmp	r7, r9
 8018400:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8018404:	f84a 3b04 	str.w	r3, [sl], #4
 8018408:	d82b      	bhi.n	8018462 <__multiply+0x120>
 801840a:	f8cc 8004 	str.w	r8, [ip, #4]
 801840e:	9b01      	ldr	r3, [sp, #4]
 8018410:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8018414:	3204      	adds	r2, #4
 8018416:	f1ba 0f00 	cmp.w	sl, #0
 801841a:	d020      	beq.n	801845e <__multiply+0x11c>
 801841c:	682b      	ldr	r3, [r5, #0]
 801841e:	4689      	mov	r9, r1
 8018420:	46a8      	mov	r8, r5
 8018422:	f04f 0b00 	mov.w	fp, #0
 8018426:	f8b9 c000 	ldrh.w	ip, [r9]
 801842a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 801842e:	fb0a 440c 	mla	r4, sl, ip, r4
 8018432:	445c      	add	r4, fp
 8018434:	46c4      	mov	ip, r8
 8018436:	b29b      	uxth	r3, r3
 8018438:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801843c:	f84c 3b04 	str.w	r3, [ip], #4
 8018440:	f859 3b04 	ldr.w	r3, [r9], #4
 8018444:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8018448:	0c1b      	lsrs	r3, r3, #16
 801844a:	fb0a b303 	mla	r3, sl, r3, fp
 801844e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8018452:	454f      	cmp	r7, r9
 8018454:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8018458:	d805      	bhi.n	8018466 <__multiply+0x124>
 801845a:	f8c8 3004 	str.w	r3, [r8, #4]
 801845e:	3504      	adds	r5, #4
 8018460:	e79b      	b.n	801839a <__multiply+0x58>
 8018462:	46d4      	mov	ip, sl
 8018464:	e7b3      	b.n	80183ce <__multiply+0x8c>
 8018466:	46e0      	mov	r8, ip
 8018468:	e7dd      	b.n	8018426 <__multiply+0xe4>
 801846a:	3e01      	subs	r6, #1
 801846c:	e799      	b.n	80183a2 <__multiply+0x60>
	...

08018470 <__pow5mult>:
 8018470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018474:	4615      	mov	r5, r2
 8018476:	f012 0203 	ands.w	r2, r2, #3
 801847a:	4606      	mov	r6, r0
 801847c:	460f      	mov	r7, r1
 801847e:	d007      	beq.n	8018490 <__pow5mult+0x20>
 8018480:	3a01      	subs	r2, #1
 8018482:	4c21      	ldr	r4, [pc, #132]	; (8018508 <__pow5mult+0x98>)
 8018484:	2300      	movs	r3, #0
 8018486:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801848a:	f7ff fe8a 	bl	80181a2 <__multadd>
 801848e:	4607      	mov	r7, r0
 8018490:	10ad      	asrs	r5, r5, #2
 8018492:	d035      	beq.n	8018500 <__pow5mult+0x90>
 8018494:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8018496:	b93c      	cbnz	r4, 80184a8 <__pow5mult+0x38>
 8018498:	2010      	movs	r0, #16
 801849a:	f7ff fe1d 	bl	80180d8 <malloc>
 801849e:	6270      	str	r0, [r6, #36]	; 0x24
 80184a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80184a4:	6004      	str	r4, [r0, #0]
 80184a6:	60c4      	str	r4, [r0, #12]
 80184a8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80184ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80184b0:	b94c      	cbnz	r4, 80184c6 <__pow5mult+0x56>
 80184b2:	f240 2171 	movw	r1, #625	; 0x271
 80184b6:	4630      	mov	r0, r6
 80184b8:	f7ff ff3a 	bl	8018330 <__i2b>
 80184bc:	2300      	movs	r3, #0
 80184be:	f8c8 0008 	str.w	r0, [r8, #8]
 80184c2:	4604      	mov	r4, r0
 80184c4:	6003      	str	r3, [r0, #0]
 80184c6:	f04f 0800 	mov.w	r8, #0
 80184ca:	07eb      	lsls	r3, r5, #31
 80184cc:	d50a      	bpl.n	80184e4 <__pow5mult+0x74>
 80184ce:	4639      	mov	r1, r7
 80184d0:	4622      	mov	r2, r4
 80184d2:	4630      	mov	r0, r6
 80184d4:	f7ff ff35 	bl	8018342 <__multiply>
 80184d8:	4639      	mov	r1, r7
 80184da:	4681      	mov	r9, r0
 80184dc:	4630      	mov	r0, r6
 80184de:	f7ff fe49 	bl	8018174 <_Bfree>
 80184e2:	464f      	mov	r7, r9
 80184e4:	106d      	asrs	r5, r5, #1
 80184e6:	d00b      	beq.n	8018500 <__pow5mult+0x90>
 80184e8:	6820      	ldr	r0, [r4, #0]
 80184ea:	b938      	cbnz	r0, 80184fc <__pow5mult+0x8c>
 80184ec:	4622      	mov	r2, r4
 80184ee:	4621      	mov	r1, r4
 80184f0:	4630      	mov	r0, r6
 80184f2:	f7ff ff26 	bl	8018342 <__multiply>
 80184f6:	6020      	str	r0, [r4, #0]
 80184f8:	f8c0 8000 	str.w	r8, [r0]
 80184fc:	4604      	mov	r4, r0
 80184fe:	e7e4      	b.n	80184ca <__pow5mult+0x5a>
 8018500:	4638      	mov	r0, r7
 8018502:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018506:	bf00      	nop
 8018508:	0801a060 	.word	0x0801a060

0801850c <__lshift>:
 801850c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018510:	460c      	mov	r4, r1
 8018512:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8018516:	6923      	ldr	r3, [r4, #16]
 8018518:	6849      	ldr	r1, [r1, #4]
 801851a:	eb0a 0903 	add.w	r9, sl, r3
 801851e:	68a3      	ldr	r3, [r4, #8]
 8018520:	4607      	mov	r7, r0
 8018522:	4616      	mov	r6, r2
 8018524:	f109 0501 	add.w	r5, r9, #1
 8018528:	42ab      	cmp	r3, r5
 801852a:	db32      	blt.n	8018592 <__lshift+0x86>
 801852c:	4638      	mov	r0, r7
 801852e:	f7ff fded 	bl	801810c <_Balloc>
 8018532:	2300      	movs	r3, #0
 8018534:	4680      	mov	r8, r0
 8018536:	f100 0114 	add.w	r1, r0, #20
 801853a:	461a      	mov	r2, r3
 801853c:	4553      	cmp	r3, sl
 801853e:	db2b      	blt.n	8018598 <__lshift+0x8c>
 8018540:	6920      	ldr	r0, [r4, #16]
 8018542:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018546:	f104 0314 	add.w	r3, r4, #20
 801854a:	f016 021f 	ands.w	r2, r6, #31
 801854e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8018552:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8018556:	d025      	beq.n	80185a4 <__lshift+0x98>
 8018558:	f1c2 0e20 	rsb	lr, r2, #32
 801855c:	2000      	movs	r0, #0
 801855e:	681e      	ldr	r6, [r3, #0]
 8018560:	468a      	mov	sl, r1
 8018562:	4096      	lsls	r6, r2
 8018564:	4330      	orrs	r0, r6
 8018566:	f84a 0b04 	str.w	r0, [sl], #4
 801856a:	f853 0b04 	ldr.w	r0, [r3], #4
 801856e:	459c      	cmp	ip, r3
 8018570:	fa20 f00e 	lsr.w	r0, r0, lr
 8018574:	d814      	bhi.n	80185a0 <__lshift+0x94>
 8018576:	6048      	str	r0, [r1, #4]
 8018578:	b108      	cbz	r0, 801857e <__lshift+0x72>
 801857a:	f109 0502 	add.w	r5, r9, #2
 801857e:	3d01      	subs	r5, #1
 8018580:	4638      	mov	r0, r7
 8018582:	f8c8 5010 	str.w	r5, [r8, #16]
 8018586:	4621      	mov	r1, r4
 8018588:	f7ff fdf4 	bl	8018174 <_Bfree>
 801858c:	4640      	mov	r0, r8
 801858e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018592:	3101      	adds	r1, #1
 8018594:	005b      	lsls	r3, r3, #1
 8018596:	e7c7      	b.n	8018528 <__lshift+0x1c>
 8018598:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801859c:	3301      	adds	r3, #1
 801859e:	e7cd      	b.n	801853c <__lshift+0x30>
 80185a0:	4651      	mov	r1, sl
 80185a2:	e7dc      	b.n	801855e <__lshift+0x52>
 80185a4:	3904      	subs	r1, #4
 80185a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80185aa:	f841 2f04 	str.w	r2, [r1, #4]!
 80185ae:	459c      	cmp	ip, r3
 80185b0:	d8f9      	bhi.n	80185a6 <__lshift+0x9a>
 80185b2:	e7e4      	b.n	801857e <__lshift+0x72>

080185b4 <__mcmp>:
 80185b4:	6903      	ldr	r3, [r0, #16]
 80185b6:	690a      	ldr	r2, [r1, #16]
 80185b8:	1a9b      	subs	r3, r3, r2
 80185ba:	b530      	push	{r4, r5, lr}
 80185bc:	d10c      	bne.n	80185d8 <__mcmp+0x24>
 80185be:	0092      	lsls	r2, r2, #2
 80185c0:	3014      	adds	r0, #20
 80185c2:	3114      	adds	r1, #20
 80185c4:	1884      	adds	r4, r0, r2
 80185c6:	4411      	add	r1, r2
 80185c8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80185cc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80185d0:	4295      	cmp	r5, r2
 80185d2:	d003      	beq.n	80185dc <__mcmp+0x28>
 80185d4:	d305      	bcc.n	80185e2 <__mcmp+0x2e>
 80185d6:	2301      	movs	r3, #1
 80185d8:	4618      	mov	r0, r3
 80185da:	bd30      	pop	{r4, r5, pc}
 80185dc:	42a0      	cmp	r0, r4
 80185de:	d3f3      	bcc.n	80185c8 <__mcmp+0x14>
 80185e0:	e7fa      	b.n	80185d8 <__mcmp+0x24>
 80185e2:	f04f 33ff 	mov.w	r3, #4294967295
 80185e6:	e7f7      	b.n	80185d8 <__mcmp+0x24>

080185e8 <__mdiff>:
 80185e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80185ec:	460d      	mov	r5, r1
 80185ee:	4607      	mov	r7, r0
 80185f0:	4611      	mov	r1, r2
 80185f2:	4628      	mov	r0, r5
 80185f4:	4614      	mov	r4, r2
 80185f6:	f7ff ffdd 	bl	80185b4 <__mcmp>
 80185fa:	1e06      	subs	r6, r0, #0
 80185fc:	d108      	bne.n	8018610 <__mdiff+0x28>
 80185fe:	4631      	mov	r1, r6
 8018600:	4638      	mov	r0, r7
 8018602:	f7ff fd83 	bl	801810c <_Balloc>
 8018606:	2301      	movs	r3, #1
 8018608:	e9c0 3604 	strd	r3, r6, [r0, #16]
 801860c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018610:	bfa4      	itt	ge
 8018612:	4623      	movge	r3, r4
 8018614:	462c      	movge	r4, r5
 8018616:	4638      	mov	r0, r7
 8018618:	6861      	ldr	r1, [r4, #4]
 801861a:	bfa6      	itte	ge
 801861c:	461d      	movge	r5, r3
 801861e:	2600      	movge	r6, #0
 8018620:	2601      	movlt	r6, #1
 8018622:	f7ff fd73 	bl	801810c <_Balloc>
 8018626:	692b      	ldr	r3, [r5, #16]
 8018628:	60c6      	str	r6, [r0, #12]
 801862a:	6926      	ldr	r6, [r4, #16]
 801862c:	f105 0914 	add.w	r9, r5, #20
 8018630:	f104 0214 	add.w	r2, r4, #20
 8018634:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8018638:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 801863c:	f100 0514 	add.w	r5, r0, #20
 8018640:	f04f 0e00 	mov.w	lr, #0
 8018644:	f852 ab04 	ldr.w	sl, [r2], #4
 8018648:	f859 4b04 	ldr.w	r4, [r9], #4
 801864c:	fa1e f18a 	uxtah	r1, lr, sl
 8018650:	b2a3      	uxth	r3, r4
 8018652:	1ac9      	subs	r1, r1, r3
 8018654:	0c23      	lsrs	r3, r4, #16
 8018656:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 801865a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801865e:	b289      	uxth	r1, r1
 8018660:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8018664:	45c8      	cmp	r8, r9
 8018666:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801866a:	4694      	mov	ip, r2
 801866c:	f845 3b04 	str.w	r3, [r5], #4
 8018670:	d8e8      	bhi.n	8018644 <__mdiff+0x5c>
 8018672:	45bc      	cmp	ip, r7
 8018674:	d304      	bcc.n	8018680 <__mdiff+0x98>
 8018676:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801867a:	b183      	cbz	r3, 801869e <__mdiff+0xb6>
 801867c:	6106      	str	r6, [r0, #16]
 801867e:	e7c5      	b.n	801860c <__mdiff+0x24>
 8018680:	f85c 1b04 	ldr.w	r1, [ip], #4
 8018684:	fa1e f381 	uxtah	r3, lr, r1
 8018688:	141a      	asrs	r2, r3, #16
 801868a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801868e:	b29b      	uxth	r3, r3
 8018690:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018694:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8018698:	f845 3b04 	str.w	r3, [r5], #4
 801869c:	e7e9      	b.n	8018672 <__mdiff+0x8a>
 801869e:	3e01      	subs	r6, #1
 80186a0:	e7e9      	b.n	8018676 <__mdiff+0x8e>
	...

080186a4 <__ulp>:
 80186a4:	4b12      	ldr	r3, [pc, #72]	; (80186f0 <__ulp+0x4c>)
 80186a6:	ee10 2a90 	vmov	r2, s1
 80186aa:	401a      	ands	r2, r3
 80186ac:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 80186b0:	2b00      	cmp	r3, #0
 80186b2:	dd04      	ble.n	80186be <__ulp+0x1a>
 80186b4:	2000      	movs	r0, #0
 80186b6:	4619      	mov	r1, r3
 80186b8:	ec41 0b10 	vmov	d0, r0, r1
 80186bc:	4770      	bx	lr
 80186be:	425b      	negs	r3, r3
 80186c0:	151b      	asrs	r3, r3, #20
 80186c2:	2b13      	cmp	r3, #19
 80186c4:	f04f 0000 	mov.w	r0, #0
 80186c8:	f04f 0100 	mov.w	r1, #0
 80186cc:	dc04      	bgt.n	80186d8 <__ulp+0x34>
 80186ce:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80186d2:	fa42 f103 	asr.w	r1, r2, r3
 80186d6:	e7ef      	b.n	80186b8 <__ulp+0x14>
 80186d8:	3b14      	subs	r3, #20
 80186da:	2b1e      	cmp	r3, #30
 80186dc:	f04f 0201 	mov.w	r2, #1
 80186e0:	bfda      	itte	le
 80186e2:	f1c3 031f 	rsble	r3, r3, #31
 80186e6:	fa02 f303 	lslle.w	r3, r2, r3
 80186ea:	4613      	movgt	r3, r2
 80186ec:	4618      	mov	r0, r3
 80186ee:	e7e3      	b.n	80186b8 <__ulp+0x14>
 80186f0:	7ff00000 	.word	0x7ff00000

080186f4 <__b2d>:
 80186f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80186f6:	6905      	ldr	r5, [r0, #16]
 80186f8:	f100 0714 	add.w	r7, r0, #20
 80186fc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8018700:	1f2e      	subs	r6, r5, #4
 8018702:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8018706:	4620      	mov	r0, r4
 8018708:	f7ff fdc4 	bl	8018294 <__hi0bits>
 801870c:	f1c0 0320 	rsb	r3, r0, #32
 8018710:	280a      	cmp	r0, #10
 8018712:	600b      	str	r3, [r1, #0]
 8018714:	f8df c074 	ldr.w	ip, [pc, #116]	; 801878c <__b2d+0x98>
 8018718:	dc14      	bgt.n	8018744 <__b2d+0x50>
 801871a:	f1c0 0e0b 	rsb	lr, r0, #11
 801871e:	fa24 f10e 	lsr.w	r1, r4, lr
 8018722:	42b7      	cmp	r7, r6
 8018724:	ea41 030c 	orr.w	r3, r1, ip
 8018728:	bf34      	ite	cc
 801872a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801872e:	2100      	movcs	r1, #0
 8018730:	3015      	adds	r0, #21
 8018732:	fa04 f000 	lsl.w	r0, r4, r0
 8018736:	fa21 f10e 	lsr.w	r1, r1, lr
 801873a:	ea40 0201 	orr.w	r2, r0, r1
 801873e:	ec43 2b10 	vmov	d0, r2, r3
 8018742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018744:	42b7      	cmp	r7, r6
 8018746:	bf3a      	itte	cc
 8018748:	f1a5 0608 	subcc.w	r6, r5, #8
 801874c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8018750:	2100      	movcs	r1, #0
 8018752:	380b      	subs	r0, #11
 8018754:	d015      	beq.n	8018782 <__b2d+0x8e>
 8018756:	4084      	lsls	r4, r0
 8018758:	f1c0 0520 	rsb	r5, r0, #32
 801875c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8018760:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8018764:	42be      	cmp	r6, r7
 8018766:	fa21 fc05 	lsr.w	ip, r1, r5
 801876a:	ea44 030c 	orr.w	r3, r4, ip
 801876e:	bf8c      	ite	hi
 8018770:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8018774:	2400      	movls	r4, #0
 8018776:	fa01 f000 	lsl.w	r0, r1, r0
 801877a:	40ec      	lsrs	r4, r5
 801877c:	ea40 0204 	orr.w	r2, r0, r4
 8018780:	e7dd      	b.n	801873e <__b2d+0x4a>
 8018782:	ea44 030c 	orr.w	r3, r4, ip
 8018786:	460a      	mov	r2, r1
 8018788:	e7d9      	b.n	801873e <__b2d+0x4a>
 801878a:	bf00      	nop
 801878c:	3ff00000 	.word	0x3ff00000

08018790 <__d2b>:
 8018790:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018794:	460e      	mov	r6, r1
 8018796:	2101      	movs	r1, #1
 8018798:	ec59 8b10 	vmov	r8, r9, d0
 801879c:	4615      	mov	r5, r2
 801879e:	f7ff fcb5 	bl	801810c <_Balloc>
 80187a2:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80187a6:	4607      	mov	r7, r0
 80187a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80187ac:	bb34      	cbnz	r4, 80187fc <__d2b+0x6c>
 80187ae:	9301      	str	r3, [sp, #4]
 80187b0:	f1b8 0300 	subs.w	r3, r8, #0
 80187b4:	d027      	beq.n	8018806 <__d2b+0x76>
 80187b6:	a802      	add	r0, sp, #8
 80187b8:	f840 3d08 	str.w	r3, [r0, #-8]!
 80187bc:	f7ff fd89 	bl	80182d2 <__lo0bits>
 80187c0:	9900      	ldr	r1, [sp, #0]
 80187c2:	b1f0      	cbz	r0, 8018802 <__d2b+0x72>
 80187c4:	9a01      	ldr	r2, [sp, #4]
 80187c6:	f1c0 0320 	rsb	r3, r0, #32
 80187ca:	fa02 f303 	lsl.w	r3, r2, r3
 80187ce:	430b      	orrs	r3, r1
 80187d0:	40c2      	lsrs	r2, r0
 80187d2:	617b      	str	r3, [r7, #20]
 80187d4:	9201      	str	r2, [sp, #4]
 80187d6:	9b01      	ldr	r3, [sp, #4]
 80187d8:	61bb      	str	r3, [r7, #24]
 80187da:	2b00      	cmp	r3, #0
 80187dc:	bf14      	ite	ne
 80187de:	2102      	movne	r1, #2
 80187e0:	2101      	moveq	r1, #1
 80187e2:	6139      	str	r1, [r7, #16]
 80187e4:	b1c4      	cbz	r4, 8018818 <__d2b+0x88>
 80187e6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80187ea:	4404      	add	r4, r0
 80187ec:	6034      	str	r4, [r6, #0]
 80187ee:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80187f2:	6028      	str	r0, [r5, #0]
 80187f4:	4638      	mov	r0, r7
 80187f6:	b003      	add	sp, #12
 80187f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80187fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8018800:	e7d5      	b.n	80187ae <__d2b+0x1e>
 8018802:	6179      	str	r1, [r7, #20]
 8018804:	e7e7      	b.n	80187d6 <__d2b+0x46>
 8018806:	a801      	add	r0, sp, #4
 8018808:	f7ff fd63 	bl	80182d2 <__lo0bits>
 801880c:	9b01      	ldr	r3, [sp, #4]
 801880e:	617b      	str	r3, [r7, #20]
 8018810:	2101      	movs	r1, #1
 8018812:	6139      	str	r1, [r7, #16]
 8018814:	3020      	adds	r0, #32
 8018816:	e7e5      	b.n	80187e4 <__d2b+0x54>
 8018818:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 801881c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8018820:	6030      	str	r0, [r6, #0]
 8018822:	6918      	ldr	r0, [r3, #16]
 8018824:	f7ff fd36 	bl	8018294 <__hi0bits>
 8018828:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 801882c:	e7e1      	b.n	80187f2 <__d2b+0x62>

0801882e <__ratio>:
 801882e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018832:	4688      	mov	r8, r1
 8018834:	4669      	mov	r1, sp
 8018836:	4681      	mov	r9, r0
 8018838:	f7ff ff5c 	bl	80186f4 <__b2d>
 801883c:	a901      	add	r1, sp, #4
 801883e:	4640      	mov	r0, r8
 8018840:	ec57 6b10 	vmov	r6, r7, d0
 8018844:	f7ff ff56 	bl	80186f4 <__b2d>
 8018848:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801884c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8018850:	eba3 0c02 	sub.w	ip, r3, r2
 8018854:	e9dd 3200 	ldrd	r3, r2, [sp]
 8018858:	1a9b      	subs	r3, r3, r2
 801885a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801885e:	ec5b ab10 	vmov	sl, fp, d0
 8018862:	2b00      	cmp	r3, #0
 8018864:	bfce      	itee	gt
 8018866:	463a      	movgt	r2, r7
 8018868:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801886c:	465a      	movle	r2, fp
 801886e:	4659      	mov	r1, fp
 8018870:	463d      	mov	r5, r7
 8018872:	bfd4      	ite	le
 8018874:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8018878:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 801887c:	4630      	mov	r0, r6
 801887e:	ee10 2a10 	vmov	r2, s0
 8018882:	460b      	mov	r3, r1
 8018884:	4629      	mov	r1, r5
 8018886:	f7e7 fff9 	bl	800087c <__aeabi_ddiv>
 801888a:	ec41 0b10 	vmov	d0, r0, r1
 801888e:	b003      	add	sp, #12
 8018890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08018894 <__copybits>:
 8018894:	3901      	subs	r1, #1
 8018896:	b510      	push	{r4, lr}
 8018898:	1149      	asrs	r1, r1, #5
 801889a:	6914      	ldr	r4, [r2, #16]
 801889c:	3101      	adds	r1, #1
 801889e:	f102 0314 	add.w	r3, r2, #20
 80188a2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80188a6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80188aa:	42a3      	cmp	r3, r4
 80188ac:	4602      	mov	r2, r0
 80188ae:	d303      	bcc.n	80188b8 <__copybits+0x24>
 80188b0:	2300      	movs	r3, #0
 80188b2:	428a      	cmp	r2, r1
 80188b4:	d305      	bcc.n	80188c2 <__copybits+0x2e>
 80188b6:	bd10      	pop	{r4, pc}
 80188b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80188bc:	f840 2b04 	str.w	r2, [r0], #4
 80188c0:	e7f3      	b.n	80188aa <__copybits+0x16>
 80188c2:	f842 3b04 	str.w	r3, [r2], #4
 80188c6:	e7f4      	b.n	80188b2 <__copybits+0x1e>

080188c8 <__any_on>:
 80188c8:	f100 0214 	add.w	r2, r0, #20
 80188cc:	6900      	ldr	r0, [r0, #16]
 80188ce:	114b      	asrs	r3, r1, #5
 80188d0:	4298      	cmp	r0, r3
 80188d2:	b510      	push	{r4, lr}
 80188d4:	db11      	blt.n	80188fa <__any_on+0x32>
 80188d6:	dd0a      	ble.n	80188ee <__any_on+0x26>
 80188d8:	f011 011f 	ands.w	r1, r1, #31
 80188dc:	d007      	beq.n	80188ee <__any_on+0x26>
 80188de:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80188e2:	fa24 f001 	lsr.w	r0, r4, r1
 80188e6:	fa00 f101 	lsl.w	r1, r0, r1
 80188ea:	428c      	cmp	r4, r1
 80188ec:	d10b      	bne.n	8018906 <__any_on+0x3e>
 80188ee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80188f2:	4293      	cmp	r3, r2
 80188f4:	d803      	bhi.n	80188fe <__any_on+0x36>
 80188f6:	2000      	movs	r0, #0
 80188f8:	bd10      	pop	{r4, pc}
 80188fa:	4603      	mov	r3, r0
 80188fc:	e7f7      	b.n	80188ee <__any_on+0x26>
 80188fe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8018902:	2900      	cmp	r1, #0
 8018904:	d0f5      	beq.n	80188f2 <__any_on+0x2a>
 8018906:	2001      	movs	r0, #1
 8018908:	e7f6      	b.n	80188f8 <__any_on+0x30>

0801890a <_calloc_r>:
 801890a:	b538      	push	{r3, r4, r5, lr}
 801890c:	fb02 f401 	mul.w	r4, r2, r1
 8018910:	4621      	mov	r1, r4
 8018912:	f000 f857 	bl	80189c4 <_malloc_r>
 8018916:	4605      	mov	r5, r0
 8018918:	b118      	cbz	r0, 8018922 <_calloc_r+0x18>
 801891a:	4622      	mov	r2, r4
 801891c:	2100      	movs	r1, #0
 801891e:	f7fc fcaa 	bl	8015276 <memset>
 8018922:	4628      	mov	r0, r5
 8018924:	bd38      	pop	{r3, r4, r5, pc}
	...

08018928 <_free_r>:
 8018928:	b538      	push	{r3, r4, r5, lr}
 801892a:	4605      	mov	r5, r0
 801892c:	2900      	cmp	r1, #0
 801892e:	d045      	beq.n	80189bc <_free_r+0x94>
 8018930:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018934:	1f0c      	subs	r4, r1, #4
 8018936:	2b00      	cmp	r3, #0
 8018938:	bfb8      	it	lt
 801893a:	18e4      	addlt	r4, r4, r3
 801893c:	f000 fe30 	bl	80195a0 <__malloc_lock>
 8018940:	4a1f      	ldr	r2, [pc, #124]	; (80189c0 <_free_r+0x98>)
 8018942:	6813      	ldr	r3, [r2, #0]
 8018944:	4610      	mov	r0, r2
 8018946:	b933      	cbnz	r3, 8018956 <_free_r+0x2e>
 8018948:	6063      	str	r3, [r4, #4]
 801894a:	6014      	str	r4, [r2, #0]
 801894c:	4628      	mov	r0, r5
 801894e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018952:	f000 be26 	b.w	80195a2 <__malloc_unlock>
 8018956:	42a3      	cmp	r3, r4
 8018958:	d90c      	bls.n	8018974 <_free_r+0x4c>
 801895a:	6821      	ldr	r1, [r4, #0]
 801895c:	1862      	adds	r2, r4, r1
 801895e:	4293      	cmp	r3, r2
 8018960:	bf04      	itt	eq
 8018962:	681a      	ldreq	r2, [r3, #0]
 8018964:	685b      	ldreq	r3, [r3, #4]
 8018966:	6063      	str	r3, [r4, #4]
 8018968:	bf04      	itt	eq
 801896a:	1852      	addeq	r2, r2, r1
 801896c:	6022      	streq	r2, [r4, #0]
 801896e:	6004      	str	r4, [r0, #0]
 8018970:	e7ec      	b.n	801894c <_free_r+0x24>
 8018972:	4613      	mov	r3, r2
 8018974:	685a      	ldr	r2, [r3, #4]
 8018976:	b10a      	cbz	r2, 801897c <_free_r+0x54>
 8018978:	42a2      	cmp	r2, r4
 801897a:	d9fa      	bls.n	8018972 <_free_r+0x4a>
 801897c:	6819      	ldr	r1, [r3, #0]
 801897e:	1858      	adds	r0, r3, r1
 8018980:	42a0      	cmp	r0, r4
 8018982:	d10b      	bne.n	801899c <_free_r+0x74>
 8018984:	6820      	ldr	r0, [r4, #0]
 8018986:	4401      	add	r1, r0
 8018988:	1858      	adds	r0, r3, r1
 801898a:	4282      	cmp	r2, r0
 801898c:	6019      	str	r1, [r3, #0]
 801898e:	d1dd      	bne.n	801894c <_free_r+0x24>
 8018990:	6810      	ldr	r0, [r2, #0]
 8018992:	6852      	ldr	r2, [r2, #4]
 8018994:	605a      	str	r2, [r3, #4]
 8018996:	4401      	add	r1, r0
 8018998:	6019      	str	r1, [r3, #0]
 801899a:	e7d7      	b.n	801894c <_free_r+0x24>
 801899c:	d902      	bls.n	80189a4 <_free_r+0x7c>
 801899e:	230c      	movs	r3, #12
 80189a0:	602b      	str	r3, [r5, #0]
 80189a2:	e7d3      	b.n	801894c <_free_r+0x24>
 80189a4:	6820      	ldr	r0, [r4, #0]
 80189a6:	1821      	adds	r1, r4, r0
 80189a8:	428a      	cmp	r2, r1
 80189aa:	bf04      	itt	eq
 80189ac:	6811      	ldreq	r1, [r2, #0]
 80189ae:	6852      	ldreq	r2, [r2, #4]
 80189b0:	6062      	str	r2, [r4, #4]
 80189b2:	bf04      	itt	eq
 80189b4:	1809      	addeq	r1, r1, r0
 80189b6:	6021      	streq	r1, [r4, #0]
 80189b8:	605c      	str	r4, [r3, #4]
 80189ba:	e7c7      	b.n	801894c <_free_r+0x24>
 80189bc:	bd38      	pop	{r3, r4, r5, pc}
 80189be:	bf00      	nop
 80189c0:	20042314 	.word	0x20042314

080189c4 <_malloc_r>:
 80189c4:	b570      	push	{r4, r5, r6, lr}
 80189c6:	1ccd      	adds	r5, r1, #3
 80189c8:	f025 0503 	bic.w	r5, r5, #3
 80189cc:	3508      	adds	r5, #8
 80189ce:	2d0c      	cmp	r5, #12
 80189d0:	bf38      	it	cc
 80189d2:	250c      	movcc	r5, #12
 80189d4:	2d00      	cmp	r5, #0
 80189d6:	4606      	mov	r6, r0
 80189d8:	db01      	blt.n	80189de <_malloc_r+0x1a>
 80189da:	42a9      	cmp	r1, r5
 80189dc:	d903      	bls.n	80189e6 <_malloc_r+0x22>
 80189de:	230c      	movs	r3, #12
 80189e0:	6033      	str	r3, [r6, #0]
 80189e2:	2000      	movs	r0, #0
 80189e4:	bd70      	pop	{r4, r5, r6, pc}
 80189e6:	f000 fddb 	bl	80195a0 <__malloc_lock>
 80189ea:	4a21      	ldr	r2, [pc, #132]	; (8018a70 <_malloc_r+0xac>)
 80189ec:	6814      	ldr	r4, [r2, #0]
 80189ee:	4621      	mov	r1, r4
 80189f0:	b991      	cbnz	r1, 8018a18 <_malloc_r+0x54>
 80189f2:	4c20      	ldr	r4, [pc, #128]	; (8018a74 <_malloc_r+0xb0>)
 80189f4:	6823      	ldr	r3, [r4, #0]
 80189f6:	b91b      	cbnz	r3, 8018a00 <_malloc_r+0x3c>
 80189f8:	4630      	mov	r0, r6
 80189fa:	f000 fc91 	bl	8019320 <_sbrk_r>
 80189fe:	6020      	str	r0, [r4, #0]
 8018a00:	4629      	mov	r1, r5
 8018a02:	4630      	mov	r0, r6
 8018a04:	f000 fc8c 	bl	8019320 <_sbrk_r>
 8018a08:	1c43      	adds	r3, r0, #1
 8018a0a:	d124      	bne.n	8018a56 <_malloc_r+0x92>
 8018a0c:	230c      	movs	r3, #12
 8018a0e:	6033      	str	r3, [r6, #0]
 8018a10:	4630      	mov	r0, r6
 8018a12:	f000 fdc6 	bl	80195a2 <__malloc_unlock>
 8018a16:	e7e4      	b.n	80189e2 <_malloc_r+0x1e>
 8018a18:	680b      	ldr	r3, [r1, #0]
 8018a1a:	1b5b      	subs	r3, r3, r5
 8018a1c:	d418      	bmi.n	8018a50 <_malloc_r+0x8c>
 8018a1e:	2b0b      	cmp	r3, #11
 8018a20:	d90f      	bls.n	8018a42 <_malloc_r+0x7e>
 8018a22:	600b      	str	r3, [r1, #0]
 8018a24:	50cd      	str	r5, [r1, r3]
 8018a26:	18cc      	adds	r4, r1, r3
 8018a28:	4630      	mov	r0, r6
 8018a2a:	f000 fdba 	bl	80195a2 <__malloc_unlock>
 8018a2e:	f104 000b 	add.w	r0, r4, #11
 8018a32:	1d23      	adds	r3, r4, #4
 8018a34:	f020 0007 	bic.w	r0, r0, #7
 8018a38:	1ac3      	subs	r3, r0, r3
 8018a3a:	d0d3      	beq.n	80189e4 <_malloc_r+0x20>
 8018a3c:	425a      	negs	r2, r3
 8018a3e:	50e2      	str	r2, [r4, r3]
 8018a40:	e7d0      	b.n	80189e4 <_malloc_r+0x20>
 8018a42:	428c      	cmp	r4, r1
 8018a44:	684b      	ldr	r3, [r1, #4]
 8018a46:	bf16      	itet	ne
 8018a48:	6063      	strne	r3, [r4, #4]
 8018a4a:	6013      	streq	r3, [r2, #0]
 8018a4c:	460c      	movne	r4, r1
 8018a4e:	e7eb      	b.n	8018a28 <_malloc_r+0x64>
 8018a50:	460c      	mov	r4, r1
 8018a52:	6849      	ldr	r1, [r1, #4]
 8018a54:	e7cc      	b.n	80189f0 <_malloc_r+0x2c>
 8018a56:	1cc4      	adds	r4, r0, #3
 8018a58:	f024 0403 	bic.w	r4, r4, #3
 8018a5c:	42a0      	cmp	r0, r4
 8018a5e:	d005      	beq.n	8018a6c <_malloc_r+0xa8>
 8018a60:	1a21      	subs	r1, r4, r0
 8018a62:	4630      	mov	r0, r6
 8018a64:	f000 fc5c 	bl	8019320 <_sbrk_r>
 8018a68:	3001      	adds	r0, #1
 8018a6a:	d0cf      	beq.n	8018a0c <_malloc_r+0x48>
 8018a6c:	6025      	str	r5, [r4, #0]
 8018a6e:	e7db      	b.n	8018a28 <_malloc_r+0x64>
 8018a70:	20042314 	.word	0x20042314
 8018a74:	20042318 	.word	0x20042318

08018a78 <__ssputs_r>:
 8018a78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018a7c:	688e      	ldr	r6, [r1, #8]
 8018a7e:	429e      	cmp	r6, r3
 8018a80:	4682      	mov	sl, r0
 8018a82:	460c      	mov	r4, r1
 8018a84:	4690      	mov	r8, r2
 8018a86:	4699      	mov	r9, r3
 8018a88:	d837      	bhi.n	8018afa <__ssputs_r+0x82>
 8018a8a:	898a      	ldrh	r2, [r1, #12]
 8018a8c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8018a90:	d031      	beq.n	8018af6 <__ssputs_r+0x7e>
 8018a92:	6825      	ldr	r5, [r4, #0]
 8018a94:	6909      	ldr	r1, [r1, #16]
 8018a96:	1a6f      	subs	r7, r5, r1
 8018a98:	6965      	ldr	r5, [r4, #20]
 8018a9a:	2302      	movs	r3, #2
 8018a9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018aa0:	fb95 f5f3 	sdiv	r5, r5, r3
 8018aa4:	f109 0301 	add.w	r3, r9, #1
 8018aa8:	443b      	add	r3, r7
 8018aaa:	429d      	cmp	r5, r3
 8018aac:	bf38      	it	cc
 8018aae:	461d      	movcc	r5, r3
 8018ab0:	0553      	lsls	r3, r2, #21
 8018ab2:	d530      	bpl.n	8018b16 <__ssputs_r+0x9e>
 8018ab4:	4629      	mov	r1, r5
 8018ab6:	f7ff ff85 	bl	80189c4 <_malloc_r>
 8018aba:	4606      	mov	r6, r0
 8018abc:	b950      	cbnz	r0, 8018ad4 <__ssputs_r+0x5c>
 8018abe:	230c      	movs	r3, #12
 8018ac0:	f8ca 3000 	str.w	r3, [sl]
 8018ac4:	89a3      	ldrh	r3, [r4, #12]
 8018ac6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018aca:	81a3      	strh	r3, [r4, #12]
 8018acc:	f04f 30ff 	mov.w	r0, #4294967295
 8018ad0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018ad4:	463a      	mov	r2, r7
 8018ad6:	6921      	ldr	r1, [r4, #16]
 8018ad8:	f7fc fbc2 	bl	8015260 <memcpy>
 8018adc:	89a3      	ldrh	r3, [r4, #12]
 8018ade:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8018ae2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018ae6:	81a3      	strh	r3, [r4, #12]
 8018ae8:	6126      	str	r6, [r4, #16]
 8018aea:	6165      	str	r5, [r4, #20]
 8018aec:	443e      	add	r6, r7
 8018aee:	1bed      	subs	r5, r5, r7
 8018af0:	6026      	str	r6, [r4, #0]
 8018af2:	60a5      	str	r5, [r4, #8]
 8018af4:	464e      	mov	r6, r9
 8018af6:	454e      	cmp	r6, r9
 8018af8:	d900      	bls.n	8018afc <__ssputs_r+0x84>
 8018afa:	464e      	mov	r6, r9
 8018afc:	4632      	mov	r2, r6
 8018afe:	4641      	mov	r1, r8
 8018b00:	6820      	ldr	r0, [r4, #0]
 8018b02:	f000 fd34 	bl	801956e <memmove>
 8018b06:	68a3      	ldr	r3, [r4, #8]
 8018b08:	1b9b      	subs	r3, r3, r6
 8018b0a:	60a3      	str	r3, [r4, #8]
 8018b0c:	6823      	ldr	r3, [r4, #0]
 8018b0e:	441e      	add	r6, r3
 8018b10:	6026      	str	r6, [r4, #0]
 8018b12:	2000      	movs	r0, #0
 8018b14:	e7dc      	b.n	8018ad0 <__ssputs_r+0x58>
 8018b16:	462a      	mov	r2, r5
 8018b18:	f000 fd44 	bl	80195a4 <_realloc_r>
 8018b1c:	4606      	mov	r6, r0
 8018b1e:	2800      	cmp	r0, #0
 8018b20:	d1e2      	bne.n	8018ae8 <__ssputs_r+0x70>
 8018b22:	6921      	ldr	r1, [r4, #16]
 8018b24:	4650      	mov	r0, sl
 8018b26:	f7ff feff 	bl	8018928 <_free_r>
 8018b2a:	e7c8      	b.n	8018abe <__ssputs_r+0x46>

08018b2c <_svfiprintf_r>:
 8018b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b30:	461d      	mov	r5, r3
 8018b32:	898b      	ldrh	r3, [r1, #12]
 8018b34:	061f      	lsls	r7, r3, #24
 8018b36:	b09d      	sub	sp, #116	; 0x74
 8018b38:	4680      	mov	r8, r0
 8018b3a:	460c      	mov	r4, r1
 8018b3c:	4616      	mov	r6, r2
 8018b3e:	d50f      	bpl.n	8018b60 <_svfiprintf_r+0x34>
 8018b40:	690b      	ldr	r3, [r1, #16]
 8018b42:	b96b      	cbnz	r3, 8018b60 <_svfiprintf_r+0x34>
 8018b44:	2140      	movs	r1, #64	; 0x40
 8018b46:	f7ff ff3d 	bl	80189c4 <_malloc_r>
 8018b4a:	6020      	str	r0, [r4, #0]
 8018b4c:	6120      	str	r0, [r4, #16]
 8018b4e:	b928      	cbnz	r0, 8018b5c <_svfiprintf_r+0x30>
 8018b50:	230c      	movs	r3, #12
 8018b52:	f8c8 3000 	str.w	r3, [r8]
 8018b56:	f04f 30ff 	mov.w	r0, #4294967295
 8018b5a:	e0c8      	b.n	8018cee <_svfiprintf_r+0x1c2>
 8018b5c:	2340      	movs	r3, #64	; 0x40
 8018b5e:	6163      	str	r3, [r4, #20]
 8018b60:	2300      	movs	r3, #0
 8018b62:	9309      	str	r3, [sp, #36]	; 0x24
 8018b64:	2320      	movs	r3, #32
 8018b66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018b6a:	2330      	movs	r3, #48	; 0x30
 8018b6c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018b70:	9503      	str	r5, [sp, #12]
 8018b72:	f04f 0b01 	mov.w	fp, #1
 8018b76:	4637      	mov	r7, r6
 8018b78:	463d      	mov	r5, r7
 8018b7a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8018b7e:	b10b      	cbz	r3, 8018b84 <_svfiprintf_r+0x58>
 8018b80:	2b25      	cmp	r3, #37	; 0x25
 8018b82:	d13e      	bne.n	8018c02 <_svfiprintf_r+0xd6>
 8018b84:	ebb7 0a06 	subs.w	sl, r7, r6
 8018b88:	d00b      	beq.n	8018ba2 <_svfiprintf_r+0x76>
 8018b8a:	4653      	mov	r3, sl
 8018b8c:	4632      	mov	r2, r6
 8018b8e:	4621      	mov	r1, r4
 8018b90:	4640      	mov	r0, r8
 8018b92:	f7ff ff71 	bl	8018a78 <__ssputs_r>
 8018b96:	3001      	adds	r0, #1
 8018b98:	f000 80a4 	beq.w	8018ce4 <_svfiprintf_r+0x1b8>
 8018b9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018b9e:	4453      	add	r3, sl
 8018ba0:	9309      	str	r3, [sp, #36]	; 0x24
 8018ba2:	783b      	ldrb	r3, [r7, #0]
 8018ba4:	2b00      	cmp	r3, #0
 8018ba6:	f000 809d 	beq.w	8018ce4 <_svfiprintf_r+0x1b8>
 8018baa:	2300      	movs	r3, #0
 8018bac:	f04f 32ff 	mov.w	r2, #4294967295
 8018bb0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018bb4:	9304      	str	r3, [sp, #16]
 8018bb6:	9307      	str	r3, [sp, #28]
 8018bb8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018bbc:	931a      	str	r3, [sp, #104]	; 0x68
 8018bbe:	462f      	mov	r7, r5
 8018bc0:	2205      	movs	r2, #5
 8018bc2:	f817 1b01 	ldrb.w	r1, [r7], #1
 8018bc6:	4850      	ldr	r0, [pc, #320]	; (8018d08 <_svfiprintf_r+0x1dc>)
 8018bc8:	f7e7 fb22 	bl	8000210 <memchr>
 8018bcc:	9b04      	ldr	r3, [sp, #16]
 8018bce:	b9d0      	cbnz	r0, 8018c06 <_svfiprintf_r+0xda>
 8018bd0:	06d9      	lsls	r1, r3, #27
 8018bd2:	bf44      	itt	mi
 8018bd4:	2220      	movmi	r2, #32
 8018bd6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8018bda:	071a      	lsls	r2, r3, #28
 8018bdc:	bf44      	itt	mi
 8018bde:	222b      	movmi	r2, #43	; 0x2b
 8018be0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8018be4:	782a      	ldrb	r2, [r5, #0]
 8018be6:	2a2a      	cmp	r2, #42	; 0x2a
 8018be8:	d015      	beq.n	8018c16 <_svfiprintf_r+0xea>
 8018bea:	9a07      	ldr	r2, [sp, #28]
 8018bec:	462f      	mov	r7, r5
 8018bee:	2000      	movs	r0, #0
 8018bf0:	250a      	movs	r5, #10
 8018bf2:	4639      	mov	r1, r7
 8018bf4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018bf8:	3b30      	subs	r3, #48	; 0x30
 8018bfa:	2b09      	cmp	r3, #9
 8018bfc:	d94d      	bls.n	8018c9a <_svfiprintf_r+0x16e>
 8018bfe:	b1b8      	cbz	r0, 8018c30 <_svfiprintf_r+0x104>
 8018c00:	e00f      	b.n	8018c22 <_svfiprintf_r+0xf6>
 8018c02:	462f      	mov	r7, r5
 8018c04:	e7b8      	b.n	8018b78 <_svfiprintf_r+0x4c>
 8018c06:	4a40      	ldr	r2, [pc, #256]	; (8018d08 <_svfiprintf_r+0x1dc>)
 8018c08:	1a80      	subs	r0, r0, r2
 8018c0a:	fa0b f000 	lsl.w	r0, fp, r0
 8018c0e:	4318      	orrs	r0, r3
 8018c10:	9004      	str	r0, [sp, #16]
 8018c12:	463d      	mov	r5, r7
 8018c14:	e7d3      	b.n	8018bbe <_svfiprintf_r+0x92>
 8018c16:	9a03      	ldr	r2, [sp, #12]
 8018c18:	1d11      	adds	r1, r2, #4
 8018c1a:	6812      	ldr	r2, [r2, #0]
 8018c1c:	9103      	str	r1, [sp, #12]
 8018c1e:	2a00      	cmp	r2, #0
 8018c20:	db01      	blt.n	8018c26 <_svfiprintf_r+0xfa>
 8018c22:	9207      	str	r2, [sp, #28]
 8018c24:	e004      	b.n	8018c30 <_svfiprintf_r+0x104>
 8018c26:	4252      	negs	r2, r2
 8018c28:	f043 0302 	orr.w	r3, r3, #2
 8018c2c:	9207      	str	r2, [sp, #28]
 8018c2e:	9304      	str	r3, [sp, #16]
 8018c30:	783b      	ldrb	r3, [r7, #0]
 8018c32:	2b2e      	cmp	r3, #46	; 0x2e
 8018c34:	d10c      	bne.n	8018c50 <_svfiprintf_r+0x124>
 8018c36:	787b      	ldrb	r3, [r7, #1]
 8018c38:	2b2a      	cmp	r3, #42	; 0x2a
 8018c3a:	d133      	bne.n	8018ca4 <_svfiprintf_r+0x178>
 8018c3c:	9b03      	ldr	r3, [sp, #12]
 8018c3e:	1d1a      	adds	r2, r3, #4
 8018c40:	681b      	ldr	r3, [r3, #0]
 8018c42:	9203      	str	r2, [sp, #12]
 8018c44:	2b00      	cmp	r3, #0
 8018c46:	bfb8      	it	lt
 8018c48:	f04f 33ff 	movlt.w	r3, #4294967295
 8018c4c:	3702      	adds	r7, #2
 8018c4e:	9305      	str	r3, [sp, #20]
 8018c50:	4d2e      	ldr	r5, [pc, #184]	; (8018d0c <_svfiprintf_r+0x1e0>)
 8018c52:	7839      	ldrb	r1, [r7, #0]
 8018c54:	2203      	movs	r2, #3
 8018c56:	4628      	mov	r0, r5
 8018c58:	f7e7 fada 	bl	8000210 <memchr>
 8018c5c:	b138      	cbz	r0, 8018c6e <_svfiprintf_r+0x142>
 8018c5e:	2340      	movs	r3, #64	; 0x40
 8018c60:	1b40      	subs	r0, r0, r5
 8018c62:	fa03 f000 	lsl.w	r0, r3, r0
 8018c66:	9b04      	ldr	r3, [sp, #16]
 8018c68:	4303      	orrs	r3, r0
 8018c6a:	3701      	adds	r7, #1
 8018c6c:	9304      	str	r3, [sp, #16]
 8018c6e:	7839      	ldrb	r1, [r7, #0]
 8018c70:	4827      	ldr	r0, [pc, #156]	; (8018d10 <_svfiprintf_r+0x1e4>)
 8018c72:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018c76:	2206      	movs	r2, #6
 8018c78:	1c7e      	adds	r6, r7, #1
 8018c7a:	f7e7 fac9 	bl	8000210 <memchr>
 8018c7e:	2800      	cmp	r0, #0
 8018c80:	d038      	beq.n	8018cf4 <_svfiprintf_r+0x1c8>
 8018c82:	4b24      	ldr	r3, [pc, #144]	; (8018d14 <_svfiprintf_r+0x1e8>)
 8018c84:	bb13      	cbnz	r3, 8018ccc <_svfiprintf_r+0x1a0>
 8018c86:	9b03      	ldr	r3, [sp, #12]
 8018c88:	3307      	adds	r3, #7
 8018c8a:	f023 0307 	bic.w	r3, r3, #7
 8018c8e:	3308      	adds	r3, #8
 8018c90:	9303      	str	r3, [sp, #12]
 8018c92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018c94:	444b      	add	r3, r9
 8018c96:	9309      	str	r3, [sp, #36]	; 0x24
 8018c98:	e76d      	b.n	8018b76 <_svfiprintf_r+0x4a>
 8018c9a:	fb05 3202 	mla	r2, r5, r2, r3
 8018c9e:	2001      	movs	r0, #1
 8018ca0:	460f      	mov	r7, r1
 8018ca2:	e7a6      	b.n	8018bf2 <_svfiprintf_r+0xc6>
 8018ca4:	2300      	movs	r3, #0
 8018ca6:	3701      	adds	r7, #1
 8018ca8:	9305      	str	r3, [sp, #20]
 8018caa:	4619      	mov	r1, r3
 8018cac:	250a      	movs	r5, #10
 8018cae:	4638      	mov	r0, r7
 8018cb0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018cb4:	3a30      	subs	r2, #48	; 0x30
 8018cb6:	2a09      	cmp	r2, #9
 8018cb8:	d903      	bls.n	8018cc2 <_svfiprintf_r+0x196>
 8018cba:	2b00      	cmp	r3, #0
 8018cbc:	d0c8      	beq.n	8018c50 <_svfiprintf_r+0x124>
 8018cbe:	9105      	str	r1, [sp, #20]
 8018cc0:	e7c6      	b.n	8018c50 <_svfiprintf_r+0x124>
 8018cc2:	fb05 2101 	mla	r1, r5, r1, r2
 8018cc6:	2301      	movs	r3, #1
 8018cc8:	4607      	mov	r7, r0
 8018cca:	e7f0      	b.n	8018cae <_svfiprintf_r+0x182>
 8018ccc:	ab03      	add	r3, sp, #12
 8018cce:	9300      	str	r3, [sp, #0]
 8018cd0:	4622      	mov	r2, r4
 8018cd2:	4b11      	ldr	r3, [pc, #68]	; (8018d18 <_svfiprintf_r+0x1ec>)
 8018cd4:	a904      	add	r1, sp, #16
 8018cd6:	4640      	mov	r0, r8
 8018cd8:	f7fc fb6a 	bl	80153b0 <_printf_float>
 8018cdc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8018ce0:	4681      	mov	r9, r0
 8018ce2:	d1d6      	bne.n	8018c92 <_svfiprintf_r+0x166>
 8018ce4:	89a3      	ldrh	r3, [r4, #12]
 8018ce6:	065b      	lsls	r3, r3, #25
 8018ce8:	f53f af35 	bmi.w	8018b56 <_svfiprintf_r+0x2a>
 8018cec:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018cee:	b01d      	add	sp, #116	; 0x74
 8018cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018cf4:	ab03      	add	r3, sp, #12
 8018cf6:	9300      	str	r3, [sp, #0]
 8018cf8:	4622      	mov	r2, r4
 8018cfa:	4b07      	ldr	r3, [pc, #28]	; (8018d18 <_svfiprintf_r+0x1ec>)
 8018cfc:	a904      	add	r1, sp, #16
 8018cfe:	4640      	mov	r0, r8
 8018d00:	f7fc fe0c 	bl	801591c <_printf_i>
 8018d04:	e7ea      	b.n	8018cdc <_svfiprintf_r+0x1b0>
 8018d06:	bf00      	nop
 8018d08:	0801a06c 	.word	0x0801a06c
 8018d0c:	0801a072 	.word	0x0801a072
 8018d10:	0801a076 	.word	0x0801a076
 8018d14:	080153b1 	.word	0x080153b1
 8018d18:	08018a79 	.word	0x08018a79

08018d1c <_sungetc_r>:
 8018d1c:	b538      	push	{r3, r4, r5, lr}
 8018d1e:	1c4b      	adds	r3, r1, #1
 8018d20:	4614      	mov	r4, r2
 8018d22:	d103      	bne.n	8018d2c <_sungetc_r+0x10>
 8018d24:	f04f 35ff 	mov.w	r5, #4294967295
 8018d28:	4628      	mov	r0, r5
 8018d2a:	bd38      	pop	{r3, r4, r5, pc}
 8018d2c:	8993      	ldrh	r3, [r2, #12]
 8018d2e:	f023 0320 	bic.w	r3, r3, #32
 8018d32:	8193      	strh	r3, [r2, #12]
 8018d34:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018d36:	6852      	ldr	r2, [r2, #4]
 8018d38:	b2cd      	uxtb	r5, r1
 8018d3a:	b18b      	cbz	r3, 8018d60 <_sungetc_r+0x44>
 8018d3c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8018d3e:	4293      	cmp	r3, r2
 8018d40:	dd08      	ble.n	8018d54 <_sungetc_r+0x38>
 8018d42:	6823      	ldr	r3, [r4, #0]
 8018d44:	1e5a      	subs	r2, r3, #1
 8018d46:	6022      	str	r2, [r4, #0]
 8018d48:	f803 5c01 	strb.w	r5, [r3, #-1]
 8018d4c:	6863      	ldr	r3, [r4, #4]
 8018d4e:	3301      	adds	r3, #1
 8018d50:	6063      	str	r3, [r4, #4]
 8018d52:	e7e9      	b.n	8018d28 <_sungetc_r+0xc>
 8018d54:	4621      	mov	r1, r4
 8018d56:	f000 fbc3 	bl	80194e0 <__submore>
 8018d5a:	2800      	cmp	r0, #0
 8018d5c:	d0f1      	beq.n	8018d42 <_sungetc_r+0x26>
 8018d5e:	e7e1      	b.n	8018d24 <_sungetc_r+0x8>
 8018d60:	6921      	ldr	r1, [r4, #16]
 8018d62:	6823      	ldr	r3, [r4, #0]
 8018d64:	b151      	cbz	r1, 8018d7c <_sungetc_r+0x60>
 8018d66:	4299      	cmp	r1, r3
 8018d68:	d208      	bcs.n	8018d7c <_sungetc_r+0x60>
 8018d6a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8018d6e:	42a9      	cmp	r1, r5
 8018d70:	d104      	bne.n	8018d7c <_sungetc_r+0x60>
 8018d72:	3b01      	subs	r3, #1
 8018d74:	3201      	adds	r2, #1
 8018d76:	6023      	str	r3, [r4, #0]
 8018d78:	6062      	str	r2, [r4, #4]
 8018d7a:	e7d5      	b.n	8018d28 <_sungetc_r+0xc>
 8018d7c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8018d80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018d84:	6363      	str	r3, [r4, #52]	; 0x34
 8018d86:	2303      	movs	r3, #3
 8018d88:	63a3      	str	r3, [r4, #56]	; 0x38
 8018d8a:	4623      	mov	r3, r4
 8018d8c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8018d90:	6023      	str	r3, [r4, #0]
 8018d92:	2301      	movs	r3, #1
 8018d94:	e7dc      	b.n	8018d50 <_sungetc_r+0x34>

08018d96 <__ssrefill_r>:
 8018d96:	b510      	push	{r4, lr}
 8018d98:	460c      	mov	r4, r1
 8018d9a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8018d9c:	b169      	cbz	r1, 8018dba <__ssrefill_r+0x24>
 8018d9e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018da2:	4299      	cmp	r1, r3
 8018da4:	d001      	beq.n	8018daa <__ssrefill_r+0x14>
 8018da6:	f7ff fdbf 	bl	8018928 <_free_r>
 8018daa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8018dac:	6063      	str	r3, [r4, #4]
 8018dae:	2000      	movs	r0, #0
 8018db0:	6360      	str	r0, [r4, #52]	; 0x34
 8018db2:	b113      	cbz	r3, 8018dba <__ssrefill_r+0x24>
 8018db4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8018db6:	6023      	str	r3, [r4, #0]
 8018db8:	bd10      	pop	{r4, pc}
 8018dba:	6923      	ldr	r3, [r4, #16]
 8018dbc:	6023      	str	r3, [r4, #0]
 8018dbe:	2300      	movs	r3, #0
 8018dc0:	6063      	str	r3, [r4, #4]
 8018dc2:	89a3      	ldrh	r3, [r4, #12]
 8018dc4:	f043 0320 	orr.w	r3, r3, #32
 8018dc8:	81a3      	strh	r3, [r4, #12]
 8018dca:	f04f 30ff 	mov.w	r0, #4294967295
 8018dce:	e7f3      	b.n	8018db8 <__ssrefill_r+0x22>

08018dd0 <__ssvfiscanf_r>:
 8018dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018dd4:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8018dd8:	460c      	mov	r4, r1
 8018dda:	2100      	movs	r1, #0
 8018ddc:	9144      	str	r1, [sp, #272]	; 0x110
 8018dde:	9145      	str	r1, [sp, #276]	; 0x114
 8018de0:	499f      	ldr	r1, [pc, #636]	; (8019060 <__ssvfiscanf_r+0x290>)
 8018de2:	91a0      	str	r1, [sp, #640]	; 0x280
 8018de4:	f10d 0804 	add.w	r8, sp, #4
 8018de8:	499e      	ldr	r1, [pc, #632]	; (8019064 <__ssvfiscanf_r+0x294>)
 8018dea:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8019068 <__ssvfiscanf_r+0x298>
 8018dee:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8018df2:	4606      	mov	r6, r0
 8018df4:	4692      	mov	sl, r2
 8018df6:	91a1      	str	r1, [sp, #644]	; 0x284
 8018df8:	9300      	str	r3, [sp, #0]
 8018dfa:	270a      	movs	r7, #10
 8018dfc:	f89a 3000 	ldrb.w	r3, [sl]
 8018e00:	2b00      	cmp	r3, #0
 8018e02:	f000 812a 	beq.w	801905a <__ssvfiscanf_r+0x28a>
 8018e06:	4655      	mov	r5, sl
 8018e08:	f7ff f948 	bl	801809c <__locale_ctype_ptr>
 8018e0c:	f815 bb01 	ldrb.w	fp, [r5], #1
 8018e10:	4458      	add	r0, fp
 8018e12:	7843      	ldrb	r3, [r0, #1]
 8018e14:	f013 0308 	ands.w	r3, r3, #8
 8018e18:	d01c      	beq.n	8018e54 <__ssvfiscanf_r+0x84>
 8018e1a:	6863      	ldr	r3, [r4, #4]
 8018e1c:	2b00      	cmp	r3, #0
 8018e1e:	dd12      	ble.n	8018e46 <__ssvfiscanf_r+0x76>
 8018e20:	f7ff f93c 	bl	801809c <__locale_ctype_ptr>
 8018e24:	6823      	ldr	r3, [r4, #0]
 8018e26:	781a      	ldrb	r2, [r3, #0]
 8018e28:	4410      	add	r0, r2
 8018e2a:	7842      	ldrb	r2, [r0, #1]
 8018e2c:	0712      	lsls	r2, r2, #28
 8018e2e:	d401      	bmi.n	8018e34 <__ssvfiscanf_r+0x64>
 8018e30:	46aa      	mov	sl, r5
 8018e32:	e7e3      	b.n	8018dfc <__ssvfiscanf_r+0x2c>
 8018e34:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8018e36:	3201      	adds	r2, #1
 8018e38:	9245      	str	r2, [sp, #276]	; 0x114
 8018e3a:	6862      	ldr	r2, [r4, #4]
 8018e3c:	3301      	adds	r3, #1
 8018e3e:	3a01      	subs	r2, #1
 8018e40:	6062      	str	r2, [r4, #4]
 8018e42:	6023      	str	r3, [r4, #0]
 8018e44:	e7e9      	b.n	8018e1a <__ssvfiscanf_r+0x4a>
 8018e46:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8018e48:	4621      	mov	r1, r4
 8018e4a:	4630      	mov	r0, r6
 8018e4c:	4798      	blx	r3
 8018e4e:	2800      	cmp	r0, #0
 8018e50:	d0e6      	beq.n	8018e20 <__ssvfiscanf_r+0x50>
 8018e52:	e7ed      	b.n	8018e30 <__ssvfiscanf_r+0x60>
 8018e54:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8018e58:	f040 8082 	bne.w	8018f60 <__ssvfiscanf_r+0x190>
 8018e5c:	9343      	str	r3, [sp, #268]	; 0x10c
 8018e5e:	9341      	str	r3, [sp, #260]	; 0x104
 8018e60:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8018e64:	2b2a      	cmp	r3, #42	; 0x2a
 8018e66:	d103      	bne.n	8018e70 <__ssvfiscanf_r+0xa0>
 8018e68:	2310      	movs	r3, #16
 8018e6a:	9341      	str	r3, [sp, #260]	; 0x104
 8018e6c:	f10a 0502 	add.w	r5, sl, #2
 8018e70:	46aa      	mov	sl, r5
 8018e72:	f815 1b01 	ldrb.w	r1, [r5], #1
 8018e76:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8018e7a:	2a09      	cmp	r2, #9
 8018e7c:	d922      	bls.n	8018ec4 <__ssvfiscanf_r+0xf4>
 8018e7e:	2203      	movs	r2, #3
 8018e80:	4879      	ldr	r0, [pc, #484]	; (8019068 <__ssvfiscanf_r+0x298>)
 8018e82:	f7e7 f9c5 	bl	8000210 <memchr>
 8018e86:	b138      	cbz	r0, 8018e98 <__ssvfiscanf_r+0xc8>
 8018e88:	eba0 0309 	sub.w	r3, r0, r9
 8018e8c:	2001      	movs	r0, #1
 8018e8e:	4098      	lsls	r0, r3
 8018e90:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8018e92:	4318      	orrs	r0, r3
 8018e94:	9041      	str	r0, [sp, #260]	; 0x104
 8018e96:	46aa      	mov	sl, r5
 8018e98:	f89a 3000 	ldrb.w	r3, [sl]
 8018e9c:	2b67      	cmp	r3, #103	; 0x67
 8018e9e:	f10a 0501 	add.w	r5, sl, #1
 8018ea2:	d82b      	bhi.n	8018efc <__ssvfiscanf_r+0x12c>
 8018ea4:	2b65      	cmp	r3, #101	; 0x65
 8018ea6:	f080 809f 	bcs.w	8018fe8 <__ssvfiscanf_r+0x218>
 8018eaa:	2b47      	cmp	r3, #71	; 0x47
 8018eac:	d810      	bhi.n	8018ed0 <__ssvfiscanf_r+0x100>
 8018eae:	2b45      	cmp	r3, #69	; 0x45
 8018eb0:	f080 809a 	bcs.w	8018fe8 <__ssvfiscanf_r+0x218>
 8018eb4:	2b00      	cmp	r3, #0
 8018eb6:	d06c      	beq.n	8018f92 <__ssvfiscanf_r+0x1c2>
 8018eb8:	2b25      	cmp	r3, #37	; 0x25
 8018eba:	d051      	beq.n	8018f60 <__ssvfiscanf_r+0x190>
 8018ebc:	2303      	movs	r3, #3
 8018ebe:	9347      	str	r3, [sp, #284]	; 0x11c
 8018ec0:	9742      	str	r7, [sp, #264]	; 0x108
 8018ec2:	e027      	b.n	8018f14 <__ssvfiscanf_r+0x144>
 8018ec4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8018ec6:	fb07 1303 	mla	r3, r7, r3, r1
 8018eca:	3b30      	subs	r3, #48	; 0x30
 8018ecc:	9343      	str	r3, [sp, #268]	; 0x10c
 8018ece:	e7cf      	b.n	8018e70 <__ssvfiscanf_r+0xa0>
 8018ed0:	2b5b      	cmp	r3, #91	; 0x5b
 8018ed2:	d06a      	beq.n	8018faa <__ssvfiscanf_r+0x1da>
 8018ed4:	d80c      	bhi.n	8018ef0 <__ssvfiscanf_r+0x120>
 8018ed6:	2b58      	cmp	r3, #88	; 0x58
 8018ed8:	d1f0      	bne.n	8018ebc <__ssvfiscanf_r+0xec>
 8018eda:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8018edc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8018ee0:	9241      	str	r2, [sp, #260]	; 0x104
 8018ee2:	2210      	movs	r2, #16
 8018ee4:	9242      	str	r2, [sp, #264]	; 0x108
 8018ee6:	2b6e      	cmp	r3, #110	; 0x6e
 8018ee8:	bf8c      	ite	hi
 8018eea:	2304      	movhi	r3, #4
 8018eec:	2303      	movls	r3, #3
 8018eee:	e010      	b.n	8018f12 <__ssvfiscanf_r+0x142>
 8018ef0:	2b63      	cmp	r3, #99	; 0x63
 8018ef2:	d065      	beq.n	8018fc0 <__ssvfiscanf_r+0x1f0>
 8018ef4:	2b64      	cmp	r3, #100	; 0x64
 8018ef6:	d1e1      	bne.n	8018ebc <__ssvfiscanf_r+0xec>
 8018ef8:	9742      	str	r7, [sp, #264]	; 0x108
 8018efa:	e7f4      	b.n	8018ee6 <__ssvfiscanf_r+0x116>
 8018efc:	2b70      	cmp	r3, #112	; 0x70
 8018efe:	d04b      	beq.n	8018f98 <__ssvfiscanf_r+0x1c8>
 8018f00:	d826      	bhi.n	8018f50 <__ssvfiscanf_r+0x180>
 8018f02:	2b6e      	cmp	r3, #110	; 0x6e
 8018f04:	d062      	beq.n	8018fcc <__ssvfiscanf_r+0x1fc>
 8018f06:	d84c      	bhi.n	8018fa2 <__ssvfiscanf_r+0x1d2>
 8018f08:	2b69      	cmp	r3, #105	; 0x69
 8018f0a:	d1d7      	bne.n	8018ebc <__ssvfiscanf_r+0xec>
 8018f0c:	2300      	movs	r3, #0
 8018f0e:	9342      	str	r3, [sp, #264]	; 0x108
 8018f10:	2303      	movs	r3, #3
 8018f12:	9347      	str	r3, [sp, #284]	; 0x11c
 8018f14:	6863      	ldr	r3, [r4, #4]
 8018f16:	2b00      	cmp	r3, #0
 8018f18:	dd68      	ble.n	8018fec <__ssvfiscanf_r+0x21c>
 8018f1a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8018f1c:	0659      	lsls	r1, r3, #25
 8018f1e:	d407      	bmi.n	8018f30 <__ssvfiscanf_r+0x160>
 8018f20:	f7ff f8bc 	bl	801809c <__locale_ctype_ptr>
 8018f24:	6823      	ldr	r3, [r4, #0]
 8018f26:	781a      	ldrb	r2, [r3, #0]
 8018f28:	4410      	add	r0, r2
 8018f2a:	7842      	ldrb	r2, [r0, #1]
 8018f2c:	0712      	lsls	r2, r2, #28
 8018f2e:	d464      	bmi.n	8018ffa <__ssvfiscanf_r+0x22a>
 8018f30:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8018f32:	2b02      	cmp	r3, #2
 8018f34:	dc73      	bgt.n	801901e <__ssvfiscanf_r+0x24e>
 8018f36:	466b      	mov	r3, sp
 8018f38:	4622      	mov	r2, r4
 8018f3a:	a941      	add	r1, sp, #260	; 0x104
 8018f3c:	4630      	mov	r0, r6
 8018f3e:	f000 f897 	bl	8019070 <_scanf_chars>
 8018f42:	2801      	cmp	r0, #1
 8018f44:	f000 8089 	beq.w	801905a <__ssvfiscanf_r+0x28a>
 8018f48:	2802      	cmp	r0, #2
 8018f4a:	f47f af71 	bne.w	8018e30 <__ssvfiscanf_r+0x60>
 8018f4e:	e01d      	b.n	8018f8c <__ssvfiscanf_r+0x1bc>
 8018f50:	2b75      	cmp	r3, #117	; 0x75
 8018f52:	d0d1      	beq.n	8018ef8 <__ssvfiscanf_r+0x128>
 8018f54:	2b78      	cmp	r3, #120	; 0x78
 8018f56:	d0c0      	beq.n	8018eda <__ssvfiscanf_r+0x10a>
 8018f58:	2b73      	cmp	r3, #115	; 0x73
 8018f5a:	d1af      	bne.n	8018ebc <__ssvfiscanf_r+0xec>
 8018f5c:	2302      	movs	r3, #2
 8018f5e:	e7d8      	b.n	8018f12 <__ssvfiscanf_r+0x142>
 8018f60:	6863      	ldr	r3, [r4, #4]
 8018f62:	2b00      	cmp	r3, #0
 8018f64:	dd0c      	ble.n	8018f80 <__ssvfiscanf_r+0x1b0>
 8018f66:	6823      	ldr	r3, [r4, #0]
 8018f68:	781a      	ldrb	r2, [r3, #0]
 8018f6a:	455a      	cmp	r2, fp
 8018f6c:	d175      	bne.n	801905a <__ssvfiscanf_r+0x28a>
 8018f6e:	3301      	adds	r3, #1
 8018f70:	6862      	ldr	r2, [r4, #4]
 8018f72:	6023      	str	r3, [r4, #0]
 8018f74:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8018f76:	3a01      	subs	r2, #1
 8018f78:	3301      	adds	r3, #1
 8018f7a:	6062      	str	r2, [r4, #4]
 8018f7c:	9345      	str	r3, [sp, #276]	; 0x114
 8018f7e:	e757      	b.n	8018e30 <__ssvfiscanf_r+0x60>
 8018f80:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8018f82:	4621      	mov	r1, r4
 8018f84:	4630      	mov	r0, r6
 8018f86:	4798      	blx	r3
 8018f88:	2800      	cmp	r0, #0
 8018f8a:	d0ec      	beq.n	8018f66 <__ssvfiscanf_r+0x196>
 8018f8c:	9844      	ldr	r0, [sp, #272]	; 0x110
 8018f8e:	2800      	cmp	r0, #0
 8018f90:	d159      	bne.n	8019046 <__ssvfiscanf_r+0x276>
 8018f92:	f04f 30ff 	mov.w	r0, #4294967295
 8018f96:	e05c      	b.n	8019052 <__ssvfiscanf_r+0x282>
 8018f98:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8018f9a:	f042 0220 	orr.w	r2, r2, #32
 8018f9e:	9241      	str	r2, [sp, #260]	; 0x104
 8018fa0:	e79b      	b.n	8018eda <__ssvfiscanf_r+0x10a>
 8018fa2:	2308      	movs	r3, #8
 8018fa4:	9342      	str	r3, [sp, #264]	; 0x108
 8018fa6:	2304      	movs	r3, #4
 8018fa8:	e7b3      	b.n	8018f12 <__ssvfiscanf_r+0x142>
 8018faa:	4629      	mov	r1, r5
 8018fac:	4640      	mov	r0, r8
 8018fae:	f000 f9c7 	bl	8019340 <__sccl>
 8018fb2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8018fb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018fb8:	9341      	str	r3, [sp, #260]	; 0x104
 8018fba:	4605      	mov	r5, r0
 8018fbc:	2301      	movs	r3, #1
 8018fbe:	e7a8      	b.n	8018f12 <__ssvfiscanf_r+0x142>
 8018fc0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8018fc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018fc6:	9341      	str	r3, [sp, #260]	; 0x104
 8018fc8:	2300      	movs	r3, #0
 8018fca:	e7a2      	b.n	8018f12 <__ssvfiscanf_r+0x142>
 8018fcc:	9841      	ldr	r0, [sp, #260]	; 0x104
 8018fce:	06c3      	lsls	r3, r0, #27
 8018fd0:	f53f af2e 	bmi.w	8018e30 <__ssvfiscanf_r+0x60>
 8018fd4:	9b00      	ldr	r3, [sp, #0]
 8018fd6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8018fd8:	1d19      	adds	r1, r3, #4
 8018fda:	9100      	str	r1, [sp, #0]
 8018fdc:	681b      	ldr	r3, [r3, #0]
 8018fde:	07c0      	lsls	r0, r0, #31
 8018fe0:	bf4c      	ite	mi
 8018fe2:	801a      	strhmi	r2, [r3, #0]
 8018fe4:	601a      	strpl	r2, [r3, #0]
 8018fe6:	e723      	b.n	8018e30 <__ssvfiscanf_r+0x60>
 8018fe8:	2305      	movs	r3, #5
 8018fea:	e792      	b.n	8018f12 <__ssvfiscanf_r+0x142>
 8018fec:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8018fee:	4621      	mov	r1, r4
 8018ff0:	4630      	mov	r0, r6
 8018ff2:	4798      	blx	r3
 8018ff4:	2800      	cmp	r0, #0
 8018ff6:	d090      	beq.n	8018f1a <__ssvfiscanf_r+0x14a>
 8018ff8:	e7c8      	b.n	8018f8c <__ssvfiscanf_r+0x1bc>
 8018ffa:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8018ffc:	3201      	adds	r2, #1
 8018ffe:	9245      	str	r2, [sp, #276]	; 0x114
 8019000:	6862      	ldr	r2, [r4, #4]
 8019002:	3a01      	subs	r2, #1
 8019004:	2a00      	cmp	r2, #0
 8019006:	6062      	str	r2, [r4, #4]
 8019008:	dd02      	ble.n	8019010 <__ssvfiscanf_r+0x240>
 801900a:	3301      	adds	r3, #1
 801900c:	6023      	str	r3, [r4, #0]
 801900e:	e787      	b.n	8018f20 <__ssvfiscanf_r+0x150>
 8019010:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8019012:	4621      	mov	r1, r4
 8019014:	4630      	mov	r0, r6
 8019016:	4798      	blx	r3
 8019018:	2800      	cmp	r0, #0
 801901a:	d081      	beq.n	8018f20 <__ssvfiscanf_r+0x150>
 801901c:	e7b6      	b.n	8018f8c <__ssvfiscanf_r+0x1bc>
 801901e:	2b04      	cmp	r3, #4
 8019020:	dc06      	bgt.n	8019030 <__ssvfiscanf_r+0x260>
 8019022:	466b      	mov	r3, sp
 8019024:	4622      	mov	r2, r4
 8019026:	a941      	add	r1, sp, #260	; 0x104
 8019028:	4630      	mov	r0, r6
 801902a:	f000 f885 	bl	8019138 <_scanf_i>
 801902e:	e788      	b.n	8018f42 <__ssvfiscanf_r+0x172>
 8019030:	4b0e      	ldr	r3, [pc, #56]	; (801906c <__ssvfiscanf_r+0x29c>)
 8019032:	2b00      	cmp	r3, #0
 8019034:	f43f aefc 	beq.w	8018e30 <__ssvfiscanf_r+0x60>
 8019038:	466b      	mov	r3, sp
 801903a:	4622      	mov	r2, r4
 801903c:	a941      	add	r1, sp, #260	; 0x104
 801903e:	4630      	mov	r0, r6
 8019040:	f7fc fd7e 	bl	8015b40 <_scanf_float>
 8019044:	e77d      	b.n	8018f42 <__ssvfiscanf_r+0x172>
 8019046:	89a3      	ldrh	r3, [r4, #12]
 8019048:	f013 0f40 	tst.w	r3, #64	; 0x40
 801904c:	bf18      	it	ne
 801904e:	f04f 30ff 	movne.w	r0, #4294967295
 8019052:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8019056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801905a:	9844      	ldr	r0, [sp, #272]	; 0x110
 801905c:	e7f9      	b.n	8019052 <__ssvfiscanf_r+0x282>
 801905e:	bf00      	nop
 8019060:	08018d1d 	.word	0x08018d1d
 8019064:	08018d97 	.word	0x08018d97
 8019068:	0801a072 	.word	0x0801a072
 801906c:	08015b41 	.word	0x08015b41

08019070 <_scanf_chars>:
 8019070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019074:	4615      	mov	r5, r2
 8019076:	688a      	ldr	r2, [r1, #8]
 8019078:	4680      	mov	r8, r0
 801907a:	460c      	mov	r4, r1
 801907c:	b932      	cbnz	r2, 801908c <_scanf_chars+0x1c>
 801907e:	698a      	ldr	r2, [r1, #24]
 8019080:	2a00      	cmp	r2, #0
 8019082:	bf14      	ite	ne
 8019084:	f04f 32ff 	movne.w	r2, #4294967295
 8019088:	2201      	moveq	r2, #1
 801908a:	608a      	str	r2, [r1, #8]
 801908c:	6822      	ldr	r2, [r4, #0]
 801908e:	06d1      	lsls	r1, r2, #27
 8019090:	bf5f      	itttt	pl
 8019092:	681a      	ldrpl	r2, [r3, #0]
 8019094:	1d11      	addpl	r1, r2, #4
 8019096:	6019      	strpl	r1, [r3, #0]
 8019098:	6817      	ldrpl	r7, [r2, #0]
 801909a:	2600      	movs	r6, #0
 801909c:	69a3      	ldr	r3, [r4, #24]
 801909e:	b1db      	cbz	r3, 80190d8 <_scanf_chars+0x68>
 80190a0:	2b01      	cmp	r3, #1
 80190a2:	d107      	bne.n	80190b4 <_scanf_chars+0x44>
 80190a4:	682b      	ldr	r3, [r5, #0]
 80190a6:	6962      	ldr	r2, [r4, #20]
 80190a8:	781b      	ldrb	r3, [r3, #0]
 80190aa:	5cd3      	ldrb	r3, [r2, r3]
 80190ac:	b9a3      	cbnz	r3, 80190d8 <_scanf_chars+0x68>
 80190ae:	2e00      	cmp	r6, #0
 80190b0:	d132      	bne.n	8019118 <_scanf_chars+0xa8>
 80190b2:	e006      	b.n	80190c2 <_scanf_chars+0x52>
 80190b4:	2b02      	cmp	r3, #2
 80190b6:	d007      	beq.n	80190c8 <_scanf_chars+0x58>
 80190b8:	2e00      	cmp	r6, #0
 80190ba:	d12d      	bne.n	8019118 <_scanf_chars+0xa8>
 80190bc:	69a3      	ldr	r3, [r4, #24]
 80190be:	2b01      	cmp	r3, #1
 80190c0:	d12a      	bne.n	8019118 <_scanf_chars+0xa8>
 80190c2:	2001      	movs	r0, #1
 80190c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80190c8:	f7fe ffe8 	bl	801809c <__locale_ctype_ptr>
 80190cc:	682b      	ldr	r3, [r5, #0]
 80190ce:	781b      	ldrb	r3, [r3, #0]
 80190d0:	4418      	add	r0, r3
 80190d2:	7843      	ldrb	r3, [r0, #1]
 80190d4:	071b      	lsls	r3, r3, #28
 80190d6:	d4ef      	bmi.n	80190b8 <_scanf_chars+0x48>
 80190d8:	6823      	ldr	r3, [r4, #0]
 80190da:	06da      	lsls	r2, r3, #27
 80190dc:	bf5e      	ittt	pl
 80190de:	682b      	ldrpl	r3, [r5, #0]
 80190e0:	781b      	ldrbpl	r3, [r3, #0]
 80190e2:	703b      	strbpl	r3, [r7, #0]
 80190e4:	682a      	ldr	r2, [r5, #0]
 80190e6:	686b      	ldr	r3, [r5, #4]
 80190e8:	f102 0201 	add.w	r2, r2, #1
 80190ec:	602a      	str	r2, [r5, #0]
 80190ee:	68a2      	ldr	r2, [r4, #8]
 80190f0:	f103 33ff 	add.w	r3, r3, #4294967295
 80190f4:	f102 32ff 	add.w	r2, r2, #4294967295
 80190f8:	606b      	str	r3, [r5, #4]
 80190fa:	f106 0601 	add.w	r6, r6, #1
 80190fe:	bf58      	it	pl
 8019100:	3701      	addpl	r7, #1
 8019102:	60a2      	str	r2, [r4, #8]
 8019104:	b142      	cbz	r2, 8019118 <_scanf_chars+0xa8>
 8019106:	2b00      	cmp	r3, #0
 8019108:	dcc8      	bgt.n	801909c <_scanf_chars+0x2c>
 801910a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801910e:	4629      	mov	r1, r5
 8019110:	4640      	mov	r0, r8
 8019112:	4798      	blx	r3
 8019114:	2800      	cmp	r0, #0
 8019116:	d0c1      	beq.n	801909c <_scanf_chars+0x2c>
 8019118:	6823      	ldr	r3, [r4, #0]
 801911a:	f013 0310 	ands.w	r3, r3, #16
 801911e:	d105      	bne.n	801912c <_scanf_chars+0xbc>
 8019120:	68e2      	ldr	r2, [r4, #12]
 8019122:	3201      	adds	r2, #1
 8019124:	60e2      	str	r2, [r4, #12]
 8019126:	69a2      	ldr	r2, [r4, #24]
 8019128:	b102      	cbz	r2, 801912c <_scanf_chars+0xbc>
 801912a:	703b      	strb	r3, [r7, #0]
 801912c:	6923      	ldr	r3, [r4, #16]
 801912e:	441e      	add	r6, r3
 8019130:	6126      	str	r6, [r4, #16]
 8019132:	2000      	movs	r0, #0
 8019134:	e7c6      	b.n	80190c4 <_scanf_chars+0x54>
	...

08019138 <_scanf_i>:
 8019138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801913c:	469a      	mov	sl, r3
 801913e:	4b74      	ldr	r3, [pc, #464]	; (8019310 <_scanf_i+0x1d8>)
 8019140:	460c      	mov	r4, r1
 8019142:	4683      	mov	fp, r0
 8019144:	4616      	mov	r6, r2
 8019146:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801914a:	b087      	sub	sp, #28
 801914c:	ab03      	add	r3, sp, #12
 801914e:	68a7      	ldr	r7, [r4, #8]
 8019150:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8019154:	4b6f      	ldr	r3, [pc, #444]	; (8019314 <_scanf_i+0x1dc>)
 8019156:	69a1      	ldr	r1, [r4, #24]
 8019158:	4a6f      	ldr	r2, [pc, #444]	; (8019318 <_scanf_i+0x1e0>)
 801915a:	2903      	cmp	r1, #3
 801915c:	bf08      	it	eq
 801915e:	461a      	moveq	r2, r3
 8019160:	1e7b      	subs	r3, r7, #1
 8019162:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8019166:	bf84      	itt	hi
 8019168:	f240 135d 	movwhi	r3, #349	; 0x15d
 801916c:	60a3      	strhi	r3, [r4, #8]
 801916e:	6823      	ldr	r3, [r4, #0]
 8019170:	9200      	str	r2, [sp, #0]
 8019172:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8019176:	bf88      	it	hi
 8019178:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801917c:	f104 091c 	add.w	r9, r4, #28
 8019180:	6023      	str	r3, [r4, #0]
 8019182:	bf8c      	ite	hi
 8019184:	197f      	addhi	r7, r7, r5
 8019186:	2700      	movls	r7, #0
 8019188:	464b      	mov	r3, r9
 801918a:	f04f 0800 	mov.w	r8, #0
 801918e:	9301      	str	r3, [sp, #4]
 8019190:	6831      	ldr	r1, [r6, #0]
 8019192:	ab03      	add	r3, sp, #12
 8019194:	2202      	movs	r2, #2
 8019196:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801919a:	7809      	ldrb	r1, [r1, #0]
 801919c:	f7e7 f838 	bl	8000210 <memchr>
 80191a0:	9b01      	ldr	r3, [sp, #4]
 80191a2:	b330      	cbz	r0, 80191f2 <_scanf_i+0xba>
 80191a4:	f1b8 0f01 	cmp.w	r8, #1
 80191a8:	d15a      	bne.n	8019260 <_scanf_i+0x128>
 80191aa:	6862      	ldr	r2, [r4, #4]
 80191ac:	b92a      	cbnz	r2, 80191ba <_scanf_i+0x82>
 80191ae:	6822      	ldr	r2, [r4, #0]
 80191b0:	2108      	movs	r1, #8
 80191b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80191b6:	6061      	str	r1, [r4, #4]
 80191b8:	6022      	str	r2, [r4, #0]
 80191ba:	6822      	ldr	r2, [r4, #0]
 80191bc:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80191c0:	6022      	str	r2, [r4, #0]
 80191c2:	68a2      	ldr	r2, [r4, #8]
 80191c4:	1e51      	subs	r1, r2, #1
 80191c6:	60a1      	str	r1, [r4, #8]
 80191c8:	b19a      	cbz	r2, 80191f2 <_scanf_i+0xba>
 80191ca:	6832      	ldr	r2, [r6, #0]
 80191cc:	1c51      	adds	r1, r2, #1
 80191ce:	6031      	str	r1, [r6, #0]
 80191d0:	7812      	ldrb	r2, [r2, #0]
 80191d2:	701a      	strb	r2, [r3, #0]
 80191d4:	1c5d      	adds	r5, r3, #1
 80191d6:	6873      	ldr	r3, [r6, #4]
 80191d8:	3b01      	subs	r3, #1
 80191da:	2b00      	cmp	r3, #0
 80191dc:	6073      	str	r3, [r6, #4]
 80191de:	dc07      	bgt.n	80191f0 <_scanf_i+0xb8>
 80191e0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80191e4:	4631      	mov	r1, r6
 80191e6:	4658      	mov	r0, fp
 80191e8:	4798      	blx	r3
 80191ea:	2800      	cmp	r0, #0
 80191ec:	f040 8086 	bne.w	80192fc <_scanf_i+0x1c4>
 80191f0:	462b      	mov	r3, r5
 80191f2:	f108 0801 	add.w	r8, r8, #1
 80191f6:	f1b8 0f03 	cmp.w	r8, #3
 80191fa:	d1c8      	bne.n	801918e <_scanf_i+0x56>
 80191fc:	6862      	ldr	r2, [r4, #4]
 80191fe:	b90a      	cbnz	r2, 8019204 <_scanf_i+0xcc>
 8019200:	220a      	movs	r2, #10
 8019202:	6062      	str	r2, [r4, #4]
 8019204:	6862      	ldr	r2, [r4, #4]
 8019206:	4945      	ldr	r1, [pc, #276]	; (801931c <_scanf_i+0x1e4>)
 8019208:	6960      	ldr	r0, [r4, #20]
 801920a:	9301      	str	r3, [sp, #4]
 801920c:	1a89      	subs	r1, r1, r2
 801920e:	f000 f897 	bl	8019340 <__sccl>
 8019212:	9b01      	ldr	r3, [sp, #4]
 8019214:	f04f 0800 	mov.w	r8, #0
 8019218:	461d      	mov	r5, r3
 801921a:	68a3      	ldr	r3, [r4, #8]
 801921c:	6822      	ldr	r2, [r4, #0]
 801921e:	2b00      	cmp	r3, #0
 8019220:	d03a      	beq.n	8019298 <_scanf_i+0x160>
 8019222:	6831      	ldr	r1, [r6, #0]
 8019224:	6960      	ldr	r0, [r4, #20]
 8019226:	f891 c000 	ldrb.w	ip, [r1]
 801922a:	f810 000c 	ldrb.w	r0, [r0, ip]
 801922e:	2800      	cmp	r0, #0
 8019230:	d032      	beq.n	8019298 <_scanf_i+0x160>
 8019232:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8019236:	d121      	bne.n	801927c <_scanf_i+0x144>
 8019238:	0510      	lsls	r0, r2, #20
 801923a:	d51f      	bpl.n	801927c <_scanf_i+0x144>
 801923c:	f108 0801 	add.w	r8, r8, #1
 8019240:	b117      	cbz	r7, 8019248 <_scanf_i+0x110>
 8019242:	3301      	adds	r3, #1
 8019244:	3f01      	subs	r7, #1
 8019246:	60a3      	str	r3, [r4, #8]
 8019248:	6873      	ldr	r3, [r6, #4]
 801924a:	3b01      	subs	r3, #1
 801924c:	2b00      	cmp	r3, #0
 801924e:	6073      	str	r3, [r6, #4]
 8019250:	dd1b      	ble.n	801928a <_scanf_i+0x152>
 8019252:	6833      	ldr	r3, [r6, #0]
 8019254:	3301      	adds	r3, #1
 8019256:	6033      	str	r3, [r6, #0]
 8019258:	68a3      	ldr	r3, [r4, #8]
 801925a:	3b01      	subs	r3, #1
 801925c:	60a3      	str	r3, [r4, #8]
 801925e:	e7dc      	b.n	801921a <_scanf_i+0xe2>
 8019260:	f1b8 0f02 	cmp.w	r8, #2
 8019264:	d1ad      	bne.n	80191c2 <_scanf_i+0x8a>
 8019266:	6822      	ldr	r2, [r4, #0]
 8019268:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801926c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8019270:	d1bf      	bne.n	80191f2 <_scanf_i+0xba>
 8019272:	2110      	movs	r1, #16
 8019274:	6061      	str	r1, [r4, #4]
 8019276:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801927a:	e7a1      	b.n	80191c0 <_scanf_i+0x88>
 801927c:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8019280:	6022      	str	r2, [r4, #0]
 8019282:	780b      	ldrb	r3, [r1, #0]
 8019284:	702b      	strb	r3, [r5, #0]
 8019286:	3501      	adds	r5, #1
 8019288:	e7de      	b.n	8019248 <_scanf_i+0x110>
 801928a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801928e:	4631      	mov	r1, r6
 8019290:	4658      	mov	r0, fp
 8019292:	4798      	blx	r3
 8019294:	2800      	cmp	r0, #0
 8019296:	d0df      	beq.n	8019258 <_scanf_i+0x120>
 8019298:	6823      	ldr	r3, [r4, #0]
 801929a:	05d9      	lsls	r1, r3, #23
 801929c:	d50c      	bpl.n	80192b8 <_scanf_i+0x180>
 801929e:	454d      	cmp	r5, r9
 80192a0:	d908      	bls.n	80192b4 <_scanf_i+0x17c>
 80192a2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80192a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80192aa:	4632      	mov	r2, r6
 80192ac:	4658      	mov	r0, fp
 80192ae:	4798      	blx	r3
 80192b0:	1e6f      	subs	r7, r5, #1
 80192b2:	463d      	mov	r5, r7
 80192b4:	454d      	cmp	r5, r9
 80192b6:	d029      	beq.n	801930c <_scanf_i+0x1d4>
 80192b8:	6822      	ldr	r2, [r4, #0]
 80192ba:	f012 0210 	ands.w	r2, r2, #16
 80192be:	d113      	bne.n	80192e8 <_scanf_i+0x1b0>
 80192c0:	702a      	strb	r2, [r5, #0]
 80192c2:	6863      	ldr	r3, [r4, #4]
 80192c4:	9e00      	ldr	r6, [sp, #0]
 80192c6:	4649      	mov	r1, r9
 80192c8:	4658      	mov	r0, fp
 80192ca:	47b0      	blx	r6
 80192cc:	f8da 3000 	ldr.w	r3, [sl]
 80192d0:	6821      	ldr	r1, [r4, #0]
 80192d2:	1d1a      	adds	r2, r3, #4
 80192d4:	f8ca 2000 	str.w	r2, [sl]
 80192d8:	f011 0f20 	tst.w	r1, #32
 80192dc:	681b      	ldr	r3, [r3, #0]
 80192de:	d010      	beq.n	8019302 <_scanf_i+0x1ca>
 80192e0:	6018      	str	r0, [r3, #0]
 80192e2:	68e3      	ldr	r3, [r4, #12]
 80192e4:	3301      	adds	r3, #1
 80192e6:	60e3      	str	r3, [r4, #12]
 80192e8:	eba5 0509 	sub.w	r5, r5, r9
 80192ec:	44a8      	add	r8, r5
 80192ee:	6925      	ldr	r5, [r4, #16]
 80192f0:	4445      	add	r5, r8
 80192f2:	6125      	str	r5, [r4, #16]
 80192f4:	2000      	movs	r0, #0
 80192f6:	b007      	add	sp, #28
 80192f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80192fc:	f04f 0800 	mov.w	r8, #0
 8019300:	e7ca      	b.n	8019298 <_scanf_i+0x160>
 8019302:	07ca      	lsls	r2, r1, #31
 8019304:	bf4c      	ite	mi
 8019306:	8018      	strhmi	r0, [r3, #0]
 8019308:	6018      	strpl	r0, [r3, #0]
 801930a:	e7ea      	b.n	80192e2 <_scanf_i+0x1aa>
 801930c:	2001      	movs	r0, #1
 801930e:	e7f2      	b.n	80192f6 <_scanf_i+0x1be>
 8019310:	08019c38 	.word	0x08019c38
 8019314:	08016d59 	.word	0x08016d59
 8019318:	080194bd 	.word	0x080194bd
 801931c:	0801a08d 	.word	0x0801a08d

08019320 <_sbrk_r>:
 8019320:	b538      	push	{r3, r4, r5, lr}
 8019322:	4c06      	ldr	r4, [pc, #24]	; (801933c <_sbrk_r+0x1c>)
 8019324:	2300      	movs	r3, #0
 8019326:	4605      	mov	r5, r0
 8019328:	4608      	mov	r0, r1
 801932a:	6023      	str	r3, [r4, #0]
 801932c:	f7ee f9c4 	bl	80076b8 <_sbrk>
 8019330:	1c43      	adds	r3, r0, #1
 8019332:	d102      	bne.n	801933a <_sbrk_r+0x1a>
 8019334:	6823      	ldr	r3, [r4, #0]
 8019336:	b103      	cbz	r3, 801933a <_sbrk_r+0x1a>
 8019338:	602b      	str	r3, [r5, #0]
 801933a:	bd38      	pop	{r3, r4, r5, pc}
 801933c:	20046cb4 	.word	0x20046cb4

08019340 <__sccl>:
 8019340:	b570      	push	{r4, r5, r6, lr}
 8019342:	780b      	ldrb	r3, [r1, #0]
 8019344:	2b5e      	cmp	r3, #94	; 0x5e
 8019346:	bf13      	iteet	ne
 8019348:	1c4a      	addne	r2, r1, #1
 801934a:	1c8a      	addeq	r2, r1, #2
 801934c:	784b      	ldrbeq	r3, [r1, #1]
 801934e:	2100      	movne	r1, #0
 8019350:	bf08      	it	eq
 8019352:	2101      	moveq	r1, #1
 8019354:	1e44      	subs	r4, r0, #1
 8019356:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 801935a:	f804 1f01 	strb.w	r1, [r4, #1]!
 801935e:	42ac      	cmp	r4, r5
 8019360:	d1fb      	bne.n	801935a <__sccl+0x1a>
 8019362:	b913      	cbnz	r3, 801936a <__sccl+0x2a>
 8019364:	3a01      	subs	r2, #1
 8019366:	4610      	mov	r0, r2
 8019368:	bd70      	pop	{r4, r5, r6, pc}
 801936a:	f081 0401 	eor.w	r4, r1, #1
 801936e:	54c4      	strb	r4, [r0, r3]
 8019370:	1c51      	adds	r1, r2, #1
 8019372:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 8019376:	2d2d      	cmp	r5, #45	; 0x2d
 8019378:	f101 36ff 	add.w	r6, r1, #4294967295
 801937c:	460a      	mov	r2, r1
 801937e:	d006      	beq.n	801938e <__sccl+0x4e>
 8019380:	2d5d      	cmp	r5, #93	; 0x5d
 8019382:	d0f0      	beq.n	8019366 <__sccl+0x26>
 8019384:	b90d      	cbnz	r5, 801938a <__sccl+0x4a>
 8019386:	4632      	mov	r2, r6
 8019388:	e7ed      	b.n	8019366 <__sccl+0x26>
 801938a:	462b      	mov	r3, r5
 801938c:	e7ef      	b.n	801936e <__sccl+0x2e>
 801938e:	780e      	ldrb	r6, [r1, #0]
 8019390:	2e5d      	cmp	r6, #93	; 0x5d
 8019392:	d0fa      	beq.n	801938a <__sccl+0x4a>
 8019394:	42b3      	cmp	r3, r6
 8019396:	dcf8      	bgt.n	801938a <__sccl+0x4a>
 8019398:	3301      	adds	r3, #1
 801939a:	429e      	cmp	r6, r3
 801939c:	54c4      	strb	r4, [r0, r3]
 801939e:	dcfb      	bgt.n	8019398 <__sccl+0x58>
 80193a0:	3102      	adds	r1, #2
 80193a2:	e7e6      	b.n	8019372 <__sccl+0x32>

080193a4 <strncmp>:
 80193a4:	b510      	push	{r4, lr}
 80193a6:	b16a      	cbz	r2, 80193c4 <strncmp+0x20>
 80193a8:	3901      	subs	r1, #1
 80193aa:	1884      	adds	r4, r0, r2
 80193ac:	f810 3b01 	ldrb.w	r3, [r0], #1
 80193b0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80193b4:	4293      	cmp	r3, r2
 80193b6:	d103      	bne.n	80193c0 <strncmp+0x1c>
 80193b8:	42a0      	cmp	r0, r4
 80193ba:	d001      	beq.n	80193c0 <strncmp+0x1c>
 80193bc:	2b00      	cmp	r3, #0
 80193be:	d1f5      	bne.n	80193ac <strncmp+0x8>
 80193c0:	1a98      	subs	r0, r3, r2
 80193c2:	bd10      	pop	{r4, pc}
 80193c4:	4610      	mov	r0, r2
 80193c6:	e7fc      	b.n	80193c2 <strncmp+0x1e>

080193c8 <_strtoul_l.isra.0>:
 80193c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80193cc:	4680      	mov	r8, r0
 80193ce:	4689      	mov	r9, r1
 80193d0:	4692      	mov	sl, r2
 80193d2:	461e      	mov	r6, r3
 80193d4:	460f      	mov	r7, r1
 80193d6:	463d      	mov	r5, r7
 80193d8:	9808      	ldr	r0, [sp, #32]
 80193da:	f815 4b01 	ldrb.w	r4, [r5], #1
 80193de:	f7fe fe59 	bl	8018094 <__locale_ctype_ptr_l>
 80193e2:	4420      	add	r0, r4
 80193e4:	7843      	ldrb	r3, [r0, #1]
 80193e6:	f013 0308 	ands.w	r3, r3, #8
 80193ea:	d130      	bne.n	801944e <_strtoul_l.isra.0+0x86>
 80193ec:	2c2d      	cmp	r4, #45	; 0x2d
 80193ee:	d130      	bne.n	8019452 <_strtoul_l.isra.0+0x8a>
 80193f0:	787c      	ldrb	r4, [r7, #1]
 80193f2:	1cbd      	adds	r5, r7, #2
 80193f4:	2101      	movs	r1, #1
 80193f6:	2e00      	cmp	r6, #0
 80193f8:	d05c      	beq.n	80194b4 <_strtoul_l.isra.0+0xec>
 80193fa:	2e10      	cmp	r6, #16
 80193fc:	d109      	bne.n	8019412 <_strtoul_l.isra.0+0x4a>
 80193fe:	2c30      	cmp	r4, #48	; 0x30
 8019400:	d107      	bne.n	8019412 <_strtoul_l.isra.0+0x4a>
 8019402:	782b      	ldrb	r3, [r5, #0]
 8019404:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8019408:	2b58      	cmp	r3, #88	; 0x58
 801940a:	d14e      	bne.n	80194aa <_strtoul_l.isra.0+0xe2>
 801940c:	786c      	ldrb	r4, [r5, #1]
 801940e:	2610      	movs	r6, #16
 8019410:	3502      	adds	r5, #2
 8019412:	f04f 32ff 	mov.w	r2, #4294967295
 8019416:	2300      	movs	r3, #0
 8019418:	fbb2 f2f6 	udiv	r2, r2, r6
 801941c:	fb06 fc02 	mul.w	ip, r6, r2
 8019420:	ea6f 0c0c 	mvn.w	ip, ip
 8019424:	4618      	mov	r0, r3
 8019426:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 801942a:	2f09      	cmp	r7, #9
 801942c:	d817      	bhi.n	801945e <_strtoul_l.isra.0+0x96>
 801942e:	463c      	mov	r4, r7
 8019430:	42a6      	cmp	r6, r4
 8019432:	dd23      	ble.n	801947c <_strtoul_l.isra.0+0xb4>
 8019434:	2b00      	cmp	r3, #0
 8019436:	db1e      	blt.n	8019476 <_strtoul_l.isra.0+0xae>
 8019438:	4282      	cmp	r2, r0
 801943a:	d31c      	bcc.n	8019476 <_strtoul_l.isra.0+0xae>
 801943c:	d101      	bne.n	8019442 <_strtoul_l.isra.0+0x7a>
 801943e:	45a4      	cmp	ip, r4
 8019440:	db19      	blt.n	8019476 <_strtoul_l.isra.0+0xae>
 8019442:	fb00 4006 	mla	r0, r0, r6, r4
 8019446:	2301      	movs	r3, #1
 8019448:	f815 4b01 	ldrb.w	r4, [r5], #1
 801944c:	e7eb      	b.n	8019426 <_strtoul_l.isra.0+0x5e>
 801944e:	462f      	mov	r7, r5
 8019450:	e7c1      	b.n	80193d6 <_strtoul_l.isra.0+0xe>
 8019452:	2c2b      	cmp	r4, #43	; 0x2b
 8019454:	bf04      	itt	eq
 8019456:	1cbd      	addeq	r5, r7, #2
 8019458:	787c      	ldrbeq	r4, [r7, #1]
 801945a:	4619      	mov	r1, r3
 801945c:	e7cb      	b.n	80193f6 <_strtoul_l.isra.0+0x2e>
 801945e:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8019462:	2f19      	cmp	r7, #25
 8019464:	d801      	bhi.n	801946a <_strtoul_l.isra.0+0xa2>
 8019466:	3c37      	subs	r4, #55	; 0x37
 8019468:	e7e2      	b.n	8019430 <_strtoul_l.isra.0+0x68>
 801946a:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 801946e:	2f19      	cmp	r7, #25
 8019470:	d804      	bhi.n	801947c <_strtoul_l.isra.0+0xb4>
 8019472:	3c57      	subs	r4, #87	; 0x57
 8019474:	e7dc      	b.n	8019430 <_strtoul_l.isra.0+0x68>
 8019476:	f04f 33ff 	mov.w	r3, #4294967295
 801947a:	e7e5      	b.n	8019448 <_strtoul_l.isra.0+0x80>
 801947c:	2b00      	cmp	r3, #0
 801947e:	da09      	bge.n	8019494 <_strtoul_l.isra.0+0xcc>
 8019480:	2322      	movs	r3, #34	; 0x22
 8019482:	f8c8 3000 	str.w	r3, [r8]
 8019486:	f04f 30ff 	mov.w	r0, #4294967295
 801948a:	f1ba 0f00 	cmp.w	sl, #0
 801948e:	d107      	bne.n	80194a0 <_strtoul_l.isra.0+0xd8>
 8019490:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019494:	b101      	cbz	r1, 8019498 <_strtoul_l.isra.0+0xd0>
 8019496:	4240      	negs	r0, r0
 8019498:	f1ba 0f00 	cmp.w	sl, #0
 801949c:	d0f8      	beq.n	8019490 <_strtoul_l.isra.0+0xc8>
 801949e:	b10b      	cbz	r3, 80194a4 <_strtoul_l.isra.0+0xdc>
 80194a0:	f105 39ff 	add.w	r9, r5, #4294967295
 80194a4:	f8ca 9000 	str.w	r9, [sl]
 80194a8:	e7f2      	b.n	8019490 <_strtoul_l.isra.0+0xc8>
 80194aa:	2430      	movs	r4, #48	; 0x30
 80194ac:	2e00      	cmp	r6, #0
 80194ae:	d1b0      	bne.n	8019412 <_strtoul_l.isra.0+0x4a>
 80194b0:	2608      	movs	r6, #8
 80194b2:	e7ae      	b.n	8019412 <_strtoul_l.isra.0+0x4a>
 80194b4:	2c30      	cmp	r4, #48	; 0x30
 80194b6:	d0a4      	beq.n	8019402 <_strtoul_l.isra.0+0x3a>
 80194b8:	260a      	movs	r6, #10
 80194ba:	e7aa      	b.n	8019412 <_strtoul_l.isra.0+0x4a>

080194bc <_strtoul_r>:
 80194bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80194be:	4c06      	ldr	r4, [pc, #24]	; (80194d8 <_strtoul_r+0x1c>)
 80194c0:	4d06      	ldr	r5, [pc, #24]	; (80194dc <_strtoul_r+0x20>)
 80194c2:	6824      	ldr	r4, [r4, #0]
 80194c4:	6a24      	ldr	r4, [r4, #32]
 80194c6:	2c00      	cmp	r4, #0
 80194c8:	bf08      	it	eq
 80194ca:	462c      	moveq	r4, r5
 80194cc:	9400      	str	r4, [sp, #0]
 80194ce:	f7ff ff7b 	bl	80193c8 <_strtoul_l.isra.0>
 80194d2:	b003      	add	sp, #12
 80194d4:	bd30      	pop	{r4, r5, pc}
 80194d6:	bf00      	nop
 80194d8:	2000000c 	.word	0x2000000c
 80194dc:	20000070 	.word	0x20000070

080194e0 <__submore>:
 80194e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80194e4:	460c      	mov	r4, r1
 80194e6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80194e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80194ec:	4299      	cmp	r1, r3
 80194ee:	d11d      	bne.n	801952c <__submore+0x4c>
 80194f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80194f4:	f7ff fa66 	bl	80189c4 <_malloc_r>
 80194f8:	b918      	cbnz	r0, 8019502 <__submore+0x22>
 80194fa:	f04f 30ff 	mov.w	r0, #4294967295
 80194fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019502:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019506:	63a3      	str	r3, [r4, #56]	; 0x38
 8019508:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801950c:	6360      	str	r0, [r4, #52]	; 0x34
 801950e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8019512:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8019516:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801951a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801951e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8019522:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8019526:	6020      	str	r0, [r4, #0]
 8019528:	2000      	movs	r0, #0
 801952a:	e7e8      	b.n	80194fe <__submore+0x1e>
 801952c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 801952e:	0077      	lsls	r7, r6, #1
 8019530:	463a      	mov	r2, r7
 8019532:	f000 f837 	bl	80195a4 <_realloc_r>
 8019536:	4605      	mov	r5, r0
 8019538:	2800      	cmp	r0, #0
 801953a:	d0de      	beq.n	80194fa <__submore+0x1a>
 801953c:	eb00 0806 	add.w	r8, r0, r6
 8019540:	4601      	mov	r1, r0
 8019542:	4632      	mov	r2, r6
 8019544:	4640      	mov	r0, r8
 8019546:	f7fb fe8b 	bl	8015260 <memcpy>
 801954a:	f8c4 8000 	str.w	r8, [r4]
 801954e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8019552:	e7e9      	b.n	8019528 <__submore+0x48>

08019554 <__ascii_wctomb>:
 8019554:	b149      	cbz	r1, 801956a <__ascii_wctomb+0x16>
 8019556:	2aff      	cmp	r2, #255	; 0xff
 8019558:	bf85      	ittet	hi
 801955a:	238a      	movhi	r3, #138	; 0x8a
 801955c:	6003      	strhi	r3, [r0, #0]
 801955e:	700a      	strbls	r2, [r1, #0]
 8019560:	f04f 30ff 	movhi.w	r0, #4294967295
 8019564:	bf98      	it	ls
 8019566:	2001      	movls	r0, #1
 8019568:	4770      	bx	lr
 801956a:	4608      	mov	r0, r1
 801956c:	4770      	bx	lr

0801956e <memmove>:
 801956e:	4288      	cmp	r0, r1
 8019570:	b510      	push	{r4, lr}
 8019572:	eb01 0302 	add.w	r3, r1, r2
 8019576:	d807      	bhi.n	8019588 <memmove+0x1a>
 8019578:	1e42      	subs	r2, r0, #1
 801957a:	4299      	cmp	r1, r3
 801957c:	d00a      	beq.n	8019594 <memmove+0x26>
 801957e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019582:	f802 4f01 	strb.w	r4, [r2, #1]!
 8019586:	e7f8      	b.n	801957a <memmove+0xc>
 8019588:	4283      	cmp	r3, r0
 801958a:	d9f5      	bls.n	8019578 <memmove+0xa>
 801958c:	1881      	adds	r1, r0, r2
 801958e:	1ad2      	subs	r2, r2, r3
 8019590:	42d3      	cmn	r3, r2
 8019592:	d100      	bne.n	8019596 <memmove+0x28>
 8019594:	bd10      	pop	{r4, pc}
 8019596:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801959a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801959e:	e7f7      	b.n	8019590 <memmove+0x22>

080195a0 <__malloc_lock>:
 80195a0:	4770      	bx	lr

080195a2 <__malloc_unlock>:
 80195a2:	4770      	bx	lr

080195a4 <_realloc_r>:
 80195a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80195a6:	4607      	mov	r7, r0
 80195a8:	4614      	mov	r4, r2
 80195aa:	460e      	mov	r6, r1
 80195ac:	b921      	cbnz	r1, 80195b8 <_realloc_r+0x14>
 80195ae:	4611      	mov	r1, r2
 80195b0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80195b4:	f7ff ba06 	b.w	80189c4 <_malloc_r>
 80195b8:	b922      	cbnz	r2, 80195c4 <_realloc_r+0x20>
 80195ba:	f7ff f9b5 	bl	8018928 <_free_r>
 80195be:	4625      	mov	r5, r4
 80195c0:	4628      	mov	r0, r5
 80195c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80195c4:	f000 f814 	bl	80195f0 <_malloc_usable_size_r>
 80195c8:	42a0      	cmp	r0, r4
 80195ca:	d20f      	bcs.n	80195ec <_realloc_r+0x48>
 80195cc:	4621      	mov	r1, r4
 80195ce:	4638      	mov	r0, r7
 80195d0:	f7ff f9f8 	bl	80189c4 <_malloc_r>
 80195d4:	4605      	mov	r5, r0
 80195d6:	2800      	cmp	r0, #0
 80195d8:	d0f2      	beq.n	80195c0 <_realloc_r+0x1c>
 80195da:	4631      	mov	r1, r6
 80195dc:	4622      	mov	r2, r4
 80195de:	f7fb fe3f 	bl	8015260 <memcpy>
 80195e2:	4631      	mov	r1, r6
 80195e4:	4638      	mov	r0, r7
 80195e6:	f7ff f99f 	bl	8018928 <_free_r>
 80195ea:	e7e9      	b.n	80195c0 <_realloc_r+0x1c>
 80195ec:	4635      	mov	r5, r6
 80195ee:	e7e7      	b.n	80195c0 <_realloc_r+0x1c>

080195f0 <_malloc_usable_size_r>:
 80195f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80195f4:	1f18      	subs	r0, r3, #4
 80195f6:	2b00      	cmp	r3, #0
 80195f8:	bfbc      	itt	lt
 80195fa:	580b      	ldrlt	r3, [r1, r0]
 80195fc:	18c0      	addlt	r0, r0, r3
 80195fe:	4770      	bx	lr

08019600 <_init>:
 8019600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019602:	bf00      	nop
 8019604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019606:	bc08      	pop	{r3}
 8019608:	469e      	mov	lr, r3
 801960a:	4770      	bx	lr

0801960c <_fini>:
 801960c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801960e:	bf00      	nop
 8019610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019612:	bc08      	pop	{r3}
 8019614:	469e      	mov	lr, r3
 8019616:	4770      	bx	lr
