
2021RoboTrace_1.5.1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016b0c  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b44  08016cd0  08016cd0  00026cd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017814  08017814  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  08017814  08017814  00027814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801781c  0801781c  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801781c  0801781c  0002781c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017824  08017824  00027824  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08017828  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000c4d4  200001dc  08017a04  000301dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000c6b0  08017a04  0003c6b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00032e41  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007058  00000000  00000000  0006304d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002060  00000000  00000000  0006a0a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001db0  00000000  00000000  0006c108  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003633d  00000000  00000000  0006deb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00023c7d  00000000  00000000  000a41f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010ddf4  00000000  00000000  000c7e72  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001d5c66  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009de4  00000000  00000000  001d5ce4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08016cb4 	.word	0x08016cb4

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e0 	.word	0x200001e0
 80001fc:	08016cb4 	.word	0x08016cb4

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b972 	b.w	8000fb4 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	4604      	mov	r4, r0
 8000cf0:	4688      	mov	r8, r1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d14b      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf6:	428a      	cmp	r2, r1
 8000cf8:	4615      	mov	r5, r2
 8000cfa:	d967      	bls.n	8000dcc <__udivmoddi4+0xe4>
 8000cfc:	fab2 f282 	clz	r2, r2
 8000d00:	b14a      	cbz	r2, 8000d16 <__udivmoddi4+0x2e>
 8000d02:	f1c2 0720 	rsb	r7, r2, #32
 8000d06:	fa01 f302 	lsl.w	r3, r1, r2
 8000d0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d0e:	4095      	lsls	r5, r2
 8000d10:	ea47 0803 	orr.w	r8, r7, r3
 8000d14:	4094      	lsls	r4, r2
 8000d16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d20:	fa1f fc85 	uxth.w	ip, r5
 8000d24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d909      	bls.n	8000d48 <__udivmoddi4+0x60>
 8000d34:	18eb      	adds	r3, r5, r3
 8000d36:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d3a:	f080 811b 	bcs.w	8000f74 <__udivmoddi4+0x28c>
 8000d3e:	4299      	cmp	r1, r3
 8000d40:	f240 8118 	bls.w	8000f74 <__udivmoddi4+0x28c>
 8000d44:	3f02      	subs	r7, #2
 8000d46:	442b      	add	r3, r5
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d5c:	45a4      	cmp	ip, r4
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x8c>
 8000d60:	192c      	adds	r4, r5, r4
 8000d62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d66:	f080 8107 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d6a:	45a4      	cmp	ip, r4
 8000d6c:	f240 8104 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d70:	3802      	subs	r0, #2
 8000d72:	442c      	add	r4, r5
 8000d74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d78:	eba4 040c 	sub.w	r4, r4, ip
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	b11e      	cbz	r6, 8000d88 <__udivmoddi4+0xa0>
 8000d80:	40d4      	lsrs	r4, r2
 8000d82:	2300      	movs	r3, #0
 8000d84:	e9c6 4300 	strd	r4, r3, [r6]
 8000d88:	4639      	mov	r1, r7
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0xbe>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80eb 	beq.w	8000f6e <__udivmoddi4+0x286>
 8000d98:	2700      	movs	r7, #0
 8000d9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d9e:	4638      	mov	r0, r7
 8000da0:	4639      	mov	r1, r7
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f783 	clz	r7, r3
 8000daa:	2f00      	cmp	r7, #0
 8000dac:	d147      	bne.n	8000e3e <__udivmoddi4+0x156>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0xd0>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80fa 	bhi.w	8000fac <__udivmoddi4+0x2c4>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0303 	sbc.w	r3, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	4698      	mov	r8, r3
 8000dc2:	2e00      	cmp	r6, #0
 8000dc4:	d0e0      	beq.n	8000d88 <__udivmoddi4+0xa0>
 8000dc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dca:	e7dd      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000dcc:	b902      	cbnz	r2, 8000dd0 <__udivmoddi4+0xe8>
 8000dce:	deff      	udf	#255	; 0xff
 8000dd0:	fab2 f282 	clz	r2, r2
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	f040 808f 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dda:	1b49      	subs	r1, r1, r5
 8000ddc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000de0:	fa1f f885 	uxth.w	r8, r5
 8000de4:	2701      	movs	r7, #1
 8000de6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dea:	0c23      	lsrs	r3, r4, #16
 8000dec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb08 f10c 	mul.w	r1, r8, ip
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	d907      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfc:	18eb      	adds	r3, r5, r3
 8000dfe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4299      	cmp	r1, r3
 8000e06:	f200 80cd 	bhi.w	8000fa4 <__udivmoddi4+0x2bc>
 8000e0a:	4684      	mov	ip, r0
 8000e0c:	1a59      	subs	r1, r3, r1
 8000e0e:	b2a3      	uxth	r3, r4
 8000e10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e1c:	fb08 f800 	mul.w	r8, r8, r0
 8000e20:	45a0      	cmp	r8, r4
 8000e22:	d907      	bls.n	8000e34 <__udivmoddi4+0x14c>
 8000e24:	192c      	adds	r4, r5, r4
 8000e26:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x14a>
 8000e2c:	45a0      	cmp	r8, r4
 8000e2e:	f200 80b6 	bhi.w	8000f9e <__udivmoddi4+0x2b6>
 8000e32:	4618      	mov	r0, r3
 8000e34:	eba4 0408 	sub.w	r4, r4, r8
 8000e38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e3c:	e79f      	b.n	8000d7e <__udivmoddi4+0x96>
 8000e3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e42:	40bb      	lsls	r3, r7
 8000e44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e5c:	4325      	orrs	r5, r4
 8000e5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e62:	0c2c      	lsrs	r4, r5, #16
 8000e64:	fb08 3319 	mls	r3, r8, r9, r3
 8000e68:	fa1f fa8e 	uxth.w	sl, lr
 8000e6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e70:	fb09 f40a 	mul.w	r4, r9, sl
 8000e74:	429c      	cmp	r4, r3
 8000e76:	fa02 f207 	lsl.w	r2, r2, r7
 8000e7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1e 0303 	adds.w	r3, lr, r3
 8000e84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e88:	f080 8087 	bcs.w	8000f9a <__udivmoddi4+0x2b2>
 8000e8c:	429c      	cmp	r4, r3
 8000e8e:	f240 8084 	bls.w	8000f9a <__udivmoddi4+0x2b2>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4473      	add	r3, lr
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	b2ad      	uxth	r5, r5
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ea4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ea8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eac:	45a2      	cmp	sl, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1e 0404 	adds.w	r4, lr, r4
 8000eb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eb8:	d26b      	bcs.n	8000f92 <__udivmoddi4+0x2aa>
 8000eba:	45a2      	cmp	sl, r4
 8000ebc:	d969      	bls.n	8000f92 <__udivmoddi4+0x2aa>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4474      	add	r4, lr
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eca:	eba4 040a 	sub.w	r4, r4, sl
 8000ece:	454c      	cmp	r4, r9
 8000ed0:	46c2      	mov	sl, r8
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	d354      	bcc.n	8000f80 <__udivmoddi4+0x298>
 8000ed6:	d051      	beq.n	8000f7c <__udivmoddi4+0x294>
 8000ed8:	2e00      	cmp	r6, #0
 8000eda:	d069      	beq.n	8000fb0 <__udivmoddi4+0x2c8>
 8000edc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ee0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ee4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ee8:	40fd      	lsrs	r5, r7
 8000eea:	40fc      	lsrs	r4, r7
 8000eec:	ea4c 0505 	orr.w	r5, ip, r5
 8000ef0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ef4:	2700      	movs	r7, #0
 8000ef6:	e747      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000ef8:	f1c2 0320 	rsb	r3, r2, #32
 8000efc:	fa20 f703 	lsr.w	r7, r0, r3
 8000f00:	4095      	lsls	r5, r2
 8000f02:	fa01 f002 	lsl.w	r0, r1, r2
 8000f06:	fa21 f303 	lsr.w	r3, r1, r3
 8000f0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f0e:	4338      	orrs	r0, r7
 8000f10:	0c01      	lsrs	r1, r0, #16
 8000f12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f16:	fa1f f885 	uxth.w	r8, r5
 8000f1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f22:	fb07 f308 	mul.w	r3, r7, r8
 8000f26:	428b      	cmp	r3, r1
 8000f28:	fa04 f402 	lsl.w	r4, r4, r2
 8000f2c:	d907      	bls.n	8000f3e <__udivmoddi4+0x256>
 8000f2e:	1869      	adds	r1, r5, r1
 8000f30:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f34:	d22f      	bcs.n	8000f96 <__udivmoddi4+0x2ae>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d92d      	bls.n	8000f96 <__udivmoddi4+0x2ae>
 8000f3a:	3f02      	subs	r7, #2
 8000f3c:	4429      	add	r1, r5
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	b281      	uxth	r1, r0
 8000f42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f4e:	fb00 f308 	mul.w	r3, r0, r8
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d907      	bls.n	8000f66 <__udivmoddi4+0x27e>
 8000f56:	1869      	adds	r1, r5, r1
 8000f58:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f5c:	d217      	bcs.n	8000f8e <__udivmoddi4+0x2a6>
 8000f5e:	428b      	cmp	r3, r1
 8000f60:	d915      	bls.n	8000f8e <__udivmoddi4+0x2a6>
 8000f62:	3802      	subs	r0, #2
 8000f64:	4429      	add	r1, r5
 8000f66:	1ac9      	subs	r1, r1, r3
 8000f68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f6c:	e73b      	b.n	8000de6 <__udivmoddi4+0xfe>
 8000f6e:	4637      	mov	r7, r6
 8000f70:	4630      	mov	r0, r6
 8000f72:	e709      	b.n	8000d88 <__udivmoddi4+0xa0>
 8000f74:	4607      	mov	r7, r0
 8000f76:	e6e7      	b.n	8000d48 <__udivmoddi4+0x60>
 8000f78:	4618      	mov	r0, r3
 8000f7a:	e6fb      	b.n	8000d74 <__udivmoddi4+0x8c>
 8000f7c:	4541      	cmp	r1, r8
 8000f7e:	d2ab      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f84:	eb69 020e 	sbc.w	r2, r9, lr
 8000f88:	3801      	subs	r0, #1
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	e7a4      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f8e:	4660      	mov	r0, ip
 8000f90:	e7e9      	b.n	8000f66 <__udivmoddi4+0x27e>
 8000f92:	4618      	mov	r0, r3
 8000f94:	e795      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f96:	4667      	mov	r7, ip
 8000f98:	e7d1      	b.n	8000f3e <__udivmoddi4+0x256>
 8000f9a:	4681      	mov	r9, r0
 8000f9c:	e77c      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000f9e:	3802      	subs	r0, #2
 8000fa0:	442c      	add	r4, r5
 8000fa2:	e747      	b.n	8000e34 <__udivmoddi4+0x14c>
 8000fa4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fa8:	442b      	add	r3, r5
 8000faa:	e72f      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fac:	4638      	mov	r0, r7
 8000fae:	e708      	b.n	8000dc2 <__udivmoddi4+0xda>
 8000fb0:	4637      	mov	r7, r6
 8000fb2:	e6e9      	b.n	8000d88 <__udivmoddi4+0xa0>

08000fb4 <__aeabi_idiv0>:
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop

08000fb8 <lcd_cmd>:

extern I2C_HandleTypeDef hi2c1;

#define SLAVEADRESS (0x3E<<1)

void lcd_cmd(uint8_t cmd) {
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b086      	sub	sp, #24
 8000fbc:	af02      	add	r7, sp, #8
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txcmd[2] = { 0x00 , cmd };
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	733b      	strb	r3, [r7, #12]
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txcmd,2,100);
 8000fca:	f107 020c 	add.w	r2, r7, #12
 8000fce:	2364      	movs	r3, #100	; 0x64
 8000fd0:	9300      	str	r3, [sp, #0]
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	217c      	movs	r1, #124	; 0x7c
 8000fd6:	4803      	ldr	r0, [pc, #12]	; (8000fe4 <lcd_cmd+0x2c>)
 8000fd8:	f006 f832 	bl	8007040 <HAL_I2C_Master_Transmit>
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	2000a23c 	.word	0x2000a23c

08000fe8 <lcd_data>:

void lcd_data(uint8_t data) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b086      	sub	sp, #24
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	4603      	mov	r3, r0
 8000ff0:	71fb      	strb	r3, [r7, #7]
	uint8_t Txdata[2] = { 0x40 , data };
 8000ff2:	2340      	movs	r3, #64	; 0x40
 8000ff4:	733b      	strb	r3, [r7, #12]
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1,SLAVEADRESS,Txdata,2,100);
 8000ffa:	f107 020c 	add.w	r2, r7, #12
 8000ffe:	2364      	movs	r3, #100	; 0x64
 8001000:	9300      	str	r3, [sp, #0]
 8001002:	2302      	movs	r3, #2
 8001004:	217c      	movs	r1, #124	; 0x7c
 8001006:	4803      	ldr	r0, [pc, #12]	; (8001014 <lcd_data+0x2c>)
 8001008:	f006 f81a 	bl	8007040 <HAL_I2C_Master_Transmit>
}
 800100c:	bf00      	nop
 800100e:	3710      	adds	r7, #16
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	2000a23c 	.word	0x2000a23c

08001018 <lcd_init>:

void lcd_init(){
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);//lcd_reset_pin
 800101c:	2201      	movs	r2, #1
 800101e:	2110      	movs	r1, #16
 8001020:	481e      	ldr	r0, [pc, #120]	; (800109c <lcd_init+0x84>)
 8001022:	f005 fea3 	bl	8006d6c <HAL_GPIO_WritePin>
	HAL_Delay(40);
 8001026:	2028      	movs	r0, #40	; 0x28
 8001028:	f004 fc0a 	bl	8005840 <HAL_Delay>
	lcd_cmd(0x38);
 800102c:	2038      	movs	r0, #56	; 0x38
 800102e:	f7ff ffc3 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001032:	2001      	movs	r0, #1
 8001034:	f004 fc04 	bl	8005840 <HAL_Delay>
	lcd_cmd(0x39);
 8001038:	2039      	movs	r0, #57	; 0x39
 800103a:	f7ff ffbd 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800103e:	2001      	movs	r0, #1
 8001040:	f004 fbfe 	bl	8005840 <HAL_Delay>
	lcd_cmd(0x14);
 8001044:	2014      	movs	r0, #20
 8001046:	f7ff ffb7 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800104a:	2001      	movs	r0, #1
 800104c:	f004 fbf8 	bl	8005840 <HAL_Delay>
	lcd_cmd(0x70);
 8001050:	2070      	movs	r0, #112	; 0x70
 8001052:	f7ff ffb1 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001056:	2001      	movs	r0, #1
 8001058:	f004 fbf2 	bl	8005840 <HAL_Delay>
	lcd_cmd(0x56);
 800105c:	2056      	movs	r0, #86	; 0x56
 800105e:	f7ff ffab 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001062:	2001      	movs	r0, #1
 8001064:	f004 fbec 	bl	8005840 <HAL_Delay>
	lcd_cmd(0x6C);
 8001068:	206c      	movs	r0, #108	; 0x6c
 800106a:	f7ff ffa5 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(200);
 800106e:	20c8      	movs	r0, #200	; 0xc8
 8001070:	f004 fbe6 	bl	8005840 <HAL_Delay>
	lcd_cmd(0x38);
 8001074:	2038      	movs	r0, #56	; 0x38
 8001076:	f7ff ff9f 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 800107a:	2001      	movs	r0, #1
 800107c:	f004 fbe0 	bl	8005840 <HAL_Delay>
	lcd_cmd(0x0C);
 8001080:	200c      	movs	r0, #12
 8001082:	f7ff ff99 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001086:	2001      	movs	r0, #1
 8001088:	f004 fbda 	bl	8005840 <HAL_Delay>
	lcd_cmd(0x01);
 800108c:	2001      	movs	r0, #1
 800108e:	f7ff ff93 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 8001092:	2001      	movs	r0, #1
 8001094:	f004 fbd4 	bl	8005840 <HAL_Delay>
}
 8001098:	bf00      	nop
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40020000 	.word	0x40020000

080010a0 <lcd_clear>:

void lcd_clear(){
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	lcd_cmd(0x01);
 80010a4:	2001      	movs	r0, #1
 80010a6:	f7ff ff87 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010aa:	2001      	movs	r0, #1
 80010ac:	f004 fbc8 	bl	8005840 <HAL_Delay>
	lcd_cmd(0x02);
 80010b0:	2002      	movs	r0, #2
 80010b2:	f7ff ff81 	bl	8000fb8 <lcd_cmd>
	HAL_Delay(1);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f004 fbc2 	bl	8005840 <HAL_Delay>
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <lcd_locate>:

void lcd_locate(int x, int y) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
	lcd_cmd(0x80 + y*0x40 + x);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	3302      	adds	r3, #2
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	019b      	lsls	r3, r3, #6
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	4413      	add	r3, r2
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff6b 	bl	8000fb8 <lcd_cmd>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <lcd_print>:

void lcd_print(const char *str) {
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
	while(*str != '\0')
 80010f2:	e007      	b.n	8001104 <lcd_print+0x1a>
	{
			lcd_data(*str);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff ff75 	bl	8000fe8 <lcd_data>
			str++;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	3301      	adds	r3, #1
 8001102:	607b      	str	r3, [r7, #4]
	while(*str != '\0')
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f3      	bne.n	80010f4 <lcd_print+0xa>
	}
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}

08001114 <lcd_printf>:

short lcd_printf(const char *format, ...) {
 8001114:	b40f      	push	{r0, r1, r2, r3}
 8001116:	b580      	push	{r7, lr}
 8001118:	b088      	sub	sp, #32
 800111a:	af00      	add	r7, sp, #0
	va_list argptr;
	char lcd_bff[20];
	short ret;

  va_start(argptr, format);
 800111c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001120:	61bb      	str	r3, [r7, #24]
  ret = vsprintf(lcd_bff, format, argptr);
 8001122:	1d3b      	adds	r3, r7, #4
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001128:	4618      	mov	r0, r3
 800112a:	f012 fd11 	bl	8013b50 <vsiprintf>
 800112e:	4603      	mov	r3, r0
 8001130:	83fb      	strh	r3, [r7, #30]
	va_end(argptr);

	if(ret>0) {
 8001132:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001136:	2b00      	cmp	r3, #0
 8001138:	dd03      	ble.n	8001142 <lcd_printf+0x2e>
		lcd_print(lcd_bff);
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4618      	mov	r0, r3
 800113e:	f7ff ffd4 	bl	80010ea <lcd_print>
	}

	return ret;
 8001142:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001150:	b004      	add	sp, #16
 8001152:	4770      	bx	lr

08001154 <_ZN7EncoderC1Ev>:

float monitor_distance;
float monitor_cnt_l;
float monitor_cnt_r;

Encoder::Encoder() : cnt_l_(0), cnt_r_(0), distance_(0), total_cnt_l_(0), total_cnt_r_(0){}
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f04f 0200 	mov.w	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	f04f 0200 	mov.w	r2, #0
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f04f 0200 	mov.w	r2, #0
 8001172:	609a      	str	r2, [r3, #8]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2200      	movs	r2, #0
 8001178:	60da      	str	r2, [r3, #12]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2200      	movs	r2, #0
 800117e:	611a      	str	r2, [r3, #16]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	4618      	mov	r0, r3
 8001184:	370c      	adds	r7, #12
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr
	...

08001190 <_ZN7Encoder4initEv>:

void Encoder::init()
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(&htim1,TIM_CHANNEL_ALL);
 8001198:	213c      	movs	r1, #60	; 0x3c
 800119a:	4809      	ldr	r0, [pc, #36]	; (80011c0 <_ZN7Encoder4initEv+0x30>)
 800119c:	f009 fde8 	bl	800ad70 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8,TIM_CHANNEL_ALL);
 80011a0:	213c      	movs	r1, #60	; 0x3c
 80011a2:	4808      	ldr	r0, [pc, #32]	; (80011c4 <_ZN7Encoder4initEv+0x34>)
 80011a4:	f009 fde4 	bl	800ad70 <HAL_TIM_Encoder_Start>
	TIM1 -> CNT = CNT_OFFSET;
 80011a8:	4b07      	ldr	r3, [pc, #28]	; (80011c8 <_ZN7Encoder4initEv+0x38>)
 80011aa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011ae:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 80011b0:	4b06      	ldr	r3, [pc, #24]	; (80011cc <_ZN7Encoder4initEv+0x3c>)
 80011b2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011b6:	625a      	str	r2, [r3, #36]	; 0x24
}
 80011b8:	bf00      	nop
 80011ba:	3708      	adds	r7, #8
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	2000a490 	.word	0x2000a490
 80011c4:	2000a174 	.word	0x2000a174
 80011c8:	40010000 	.word	0x40010000
 80011cc:	40010400 	.word	0x40010400

080011d0 <_ZN7Encoder9updateCntEv>:

void Encoder::updateCnt()
{
 80011d0:	b5b0      	push	{r4, r5, r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
	monitor_cnt_l = cnt_l_ = (float(CNT_OFFSET) - float(TIM1 -> CNT)) * CORRECTION_COEFFICIENT;
 80011d8:	4b45      	ldr	r3, [pc, #276]	; (80012f0 <_ZN7Encoder9updateCntEv+0x120>)
 80011da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011dc:	ee07 3a90 	vmov	s15, r3
 80011e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80011e4:	ed9f 7a43 	vldr	s14, [pc, #268]	; 80012f4 <_ZN7Encoder9updateCntEv+0x124>
 80011e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011ec:	ed9f 7a42 	vldr	s14, [pc, #264]	; 80012f8 <_ZN7Encoder9updateCntEv+0x128>
 80011f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	edc3 7a00 	vstr	s15, [r3]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a3f      	ldr	r2, [pc, #252]	; (80012fc <_ZN7Encoder9updateCntEv+0x12c>)
 8001200:	6013      	str	r3, [r2, #0]
	monitor_cnt_r = cnt_r_ = (float(TIM8 -> CNT) - float(CNT_OFFSET)) * CORRECTION_COEFFICIENT;
 8001202:	4b3f      	ldr	r3, [pc, #252]	; (8001300 <_ZN7Encoder9updateCntEv+0x130>)
 8001204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001206:	ee07 3a90 	vmov	s15, r3
 800120a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800120e:	ed9f 7a39 	vldr	s14, [pc, #228]	; 80012f4 <_ZN7Encoder9updateCntEv+0x124>
 8001212:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001216:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80012f8 <_ZN7Encoder9updateCntEv+0x128>
 800121a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	edc3 7a01 	vstr	s15, [r3, #4]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	4a36      	ldr	r2, [pc, #216]	; (8001304 <_ZN7Encoder9updateCntEv+0x134>)
 800122a:	6013      	str	r3, [r2, #0]

	total_cnt_l_ += cnt_l_;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	ee07 3a90 	vmov	s15, r3
 8001234:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	edd3 7a00 	vldr	s15, [r3]
 800123e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001242:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001246:	ee17 2a90 	vmov	r2, s15
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	60da      	str	r2, [r3, #12]
	total_cnt_r_ += cnt_r_;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	691b      	ldr	r3, [r3, #16]
 8001252:	ee07 3a90 	vmov	s15, r3
 8001256:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001260:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001264:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001268:	ee17 2a90 	vmov	r2, s15
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	611a      	str	r2, [r3, #16]

	distance_ = distance_ + DISTANCE_PER_CNT * (cnt_l_ + cnt_r_) / 2;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff f97f 	bl	8000578 <__aeabi_f2d>
 800127a:	4604      	mov	r4, r0
 800127c:	460d      	mov	r5, r1
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	ed93 7a00 	vldr	s14, [r3]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	edd3 7a01 	vldr	s15, [r3, #4]
 800128a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800128e:	ee17 0a90 	vmov	r0, s15
 8001292:	f7ff f971 	bl	8000578 <__aeabi_f2d>
 8001296:	a314      	add	r3, pc, #80	; (adr r3, 80012e8 <_ZN7Encoder9updateCntEv+0x118>)
 8001298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800129c:	f7ff f9c4 	bl	8000628 <__aeabi_dmul>
 80012a0:	4602      	mov	r2, r0
 80012a2:	460b      	mov	r3, r1
 80012a4:	4610      	mov	r0, r2
 80012a6:	4619      	mov	r1, r3
 80012a8:	f04f 0200 	mov.w	r2, #0
 80012ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012b0:	f7ff fae4 	bl	800087c <__aeabi_ddiv>
 80012b4:	4602      	mov	r2, r0
 80012b6:	460b      	mov	r3, r1
 80012b8:	4620      	mov	r0, r4
 80012ba:	4629      	mov	r1, r5
 80012bc:	f7fe fffe 	bl	80002bc <__adddf3>
 80012c0:	4603      	mov	r3, r0
 80012c2:	460c      	mov	r4, r1
 80012c4:	4618      	mov	r0, r3
 80012c6:	4621      	mov	r1, r4
 80012c8:	f7ff fca6 	bl	8000c18 <__aeabi_d2f>
 80012cc:	4602      	mov	r2, r0
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	609a      	str	r2, [r3, #8]
	monitor_distance = distance_;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	4a0c      	ldr	r2, [pc, #48]	; (8001308 <_ZN7Encoder9updateCntEv+0x138>)
 80012d8:	6013      	str	r3, [r2, #0]
}
 80012da:	bf00      	nop
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bdb0      	pop	{r4, r5, r7, pc}
 80012e2:	bf00      	nop
 80012e4:	f3af 8000 	nop.w
 80012e8:	1ab1d998 	.word	0x1ab1d998
 80012ec:	3f7830b5 	.word	0x3f7830b5
 80012f0:	40010000 	.word	0x40010000
 80012f4:	47000000 	.word	0x47000000
 80012f8:	3f8fb562 	.word	0x3f8fb562
 80012fc:	200001fc 	.word	0x200001fc
 8001300:	40010400 	.word	0x40010400
 8001304:	20000200 	.word	0x20000200
 8001308:	200001f8 	.word	0x200001f8

0800130c <_ZN7Encoder6getCntERfS0_>:

void Encoder::getCnt(float &cnt_l, float &cnt_r)
{
 800130c:	b480      	push	{r7}
 800130e:	b085      	sub	sp, #20
 8001310:	af00      	add	r7, sp, #0
 8001312:	60f8      	str	r0, [r7, #12]
 8001314:	60b9      	str	r1, [r7, #8]
 8001316:	607a      	str	r2, [r7, #4]
	cnt_l = cnt_l_;
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	601a      	str	r2, [r3, #0]
	cnt_r = cnt_r_;
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	685a      	ldr	r2, [r3, #4]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	601a      	str	r2, [r3, #0]
}
 8001328:	bf00      	nop
 800132a:	3714      	adds	r7, #20
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <_ZN7Encoder11getDistanceEv>:

float Encoder::getDistance()
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
	return distance_;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	ee07 3a90 	vmov	s15, r3
}
 8001344:	eeb0 0a67 	vmov.f32	s0, s15
 8001348:	370c      	adds	r7, #12
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr

08001352 <_ZN7Encoder13clearDistanceEv>:

void Encoder::clearDistance()
{
 8001352:	b480      	push	{r7}
 8001354:	b083      	sub	sp, #12
 8001356:	af00      	add	r7, sp, #0
 8001358:	6078      	str	r0, [r7, #4]
	distance_ = 0;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	f04f 0200 	mov.w	r2, #0
 8001360:	609a      	str	r2, [r3, #8]
}
 8001362:	bf00      	nop
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
	...

08001370 <_ZN7Encoder8clearCntEv>:

void Encoder::clearCnt()
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
	cnt_l_ = 0;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	f04f 0200 	mov.w	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
	cnt_r_ = 0;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f04f 0200 	mov.w	r2, #0
 8001386:	605a      	str	r2, [r3, #4]
	TIM1 -> CNT = CNT_OFFSET;
 8001388:	4b06      	ldr	r3, [pc, #24]	; (80013a4 <_ZN7Encoder8clearCntEv+0x34>)
 800138a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800138e:	625a      	str	r2, [r3, #36]	; 0x24
	TIM8 -> CNT = CNT_OFFSET;
 8001390:	4b05      	ldr	r3, [pc, #20]	; (80013a8 <_ZN7Encoder8clearCntEv+0x38>)
 8001392:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001396:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001398:	bf00      	nop
 800139a:	370c      	adds	r7, #12
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr
 80013a4:	40010000 	.word	0x40010000
 80013a8:	40010400 	.word	0x40010400

080013ac <_ZN7Encoder13clearTotalCntEv>:
{
	return long((total_cnt_l_ + total_cnt_r_) / 2);
}

void Encoder::clearTotalCnt()
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
	total_cnt_l_ = 0;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2200      	movs	r2, #0
 80013b8:	60da      	str	r2, [r3, #12]
	total_cnt_r_ = 0;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2200      	movs	r2, #0
 80013be:	611a      	str	r2, [r3, #16]
}
 80013c0:	bf00      	nop
 80013c2:	370c      	adds	r7, #12
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr

080013cc <user_fopen>:
//* 役割　：　fopenする
//* 引数　：　char, float *: short　: フォルダ名、ファイル名
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fopen(const char *p_folder_name, const char *p_file_name){
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	6039      	str	r1, [r7, #0]

	FRESULT ret = 0;
 80013d6:	2300      	movs	r3, #0
 80013d8:	73fb      	strb	r3, [r7, #15]

	create_path(p_folder_name, p_file_name);
 80013da:	6839      	ldr	r1, [r7, #0]
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	f000 f98f 	bl	8001700 <create_path>

	fopen_folder_and_file();	//書き込むファイルを選択
 80013e2:	f000 f9a3 	bl	800172c <fopen_folder_and_file>

	return ret;
 80013e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3710      	adds	r7, #16
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <user_fclose>:
//* 役割　：　fcloseする
//* 引数　：　void
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT user_fclose(){
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 80013f6:	2300      	movs	r3, #0
 80013f8:	71fb      	strb	r3, [r7, #7]

	f_close(&fil);	//ファイル閉じる
 80013fa:	4804      	ldr	r0, [pc, #16]	; (800140c <user_fclose+0x1c>)
 80013fc:	f00e fee9 	bl	80101d2 <f_close>

	return ret;
 8001400:	79fb      	ldrb	r3, [r7, #7]
}
 8001402:	4618      	mov	r0, r3
 8001404:	3708      	adds	r7, #8
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	20009080 	.word	0x20009080

08001410 <sd_write>:
//* 役割　：　SDに書き込む
//* 引数　：　short, float *, char : 変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write(short size, float *data, char state){
 8001410:	b590      	push	{r4, r7, lr}
 8001412:	b087      	sub	sp, #28
 8001414:	af02      	add	r7, sp, #8
 8001416:	4603      	mov	r3, r0
 8001418:	6039      	str	r1, [r7, #0]
 800141a:	80fb      	strh	r3, [r7, #6]
 800141c:	4613      	mov	r3, r2
 800141e:	717b      	strb	r3, [r7, #5]
	FRESULT ret = 0;
 8001420:	2300      	movs	r3, #0
 8001422:	737b      	strb	r3, [r7, #13]

	for(short i = 0 ; i < size; i++){
 8001424:	2300      	movs	r3, #0
 8001426:	81fb      	strh	r3, [r7, #14]
 8001428:	e030      	b.n	800148c <sd_write+0x7c>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 800142a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	683a      	ldr	r2, [r7, #0]
 8001432:	4413      	add	r3, r2
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4618      	mov	r0, r3
 8001438:	f7ff f89e 	bl	8000578 <__aeabi_f2d>
 800143c:	4603      	mov	r3, r0
 800143e:	460c      	mov	r4, r1
 8001440:	e9cd 3400 	strd	r3, r4, [sp]
 8001444:	4a17      	ldr	r2, [pc, #92]	; (80014a4 <sd_write+0x94>)
 8001446:	2180      	movs	r1, #128	; 0x80
 8001448:	4817      	ldr	r0, [pc, #92]	; (80014a8 <sd_write+0x98>)
 800144a:	f011 fbf1 	bl	8012c30 <sniprintf>

		if(state == ADD_WRITE){
 800144e:	797b      	ldrb	r3, [r7, #5]
 8001450:	2b01      	cmp	r3, #1
 8001452:	d106      	bne.n	8001462 <sd_write+0x52>
			f_lseek(&fil, f_size(&fil));	//ファイルの最後に移動
 8001454:	4b15      	ldr	r3, [pc, #84]	; (80014ac <sd_write+0x9c>)
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	4619      	mov	r1, r3
 800145a:	4814      	ldr	r0, [pc, #80]	; (80014ac <sd_write+0x9c>)
 800145c:	f00e ff2d 	bl	80102ba <f_lseek>
 8001460:	e003      	b.n	800146a <sd_write+0x5a>
		}
		else{
			f_lseek(&fil, 0);	//ファイルの最初に移動
 8001462:	2100      	movs	r1, #0
 8001464:	4811      	ldr	r0, [pc, #68]	; (80014ac <sd_write+0x9c>)
 8001466:	f00e ff28 	bl	80102ba <f_lseek>
		}

		f_write(&fil, buffer, strlen(buffer), &bw);	//書き込む
 800146a:	480f      	ldr	r0, [pc, #60]	; (80014a8 <sd_write+0x98>)
 800146c:	f7fe fec8 	bl	8000200 <strlen>
 8001470:	4602      	mov	r2, r0
 8001472:	4b0f      	ldr	r3, [pc, #60]	; (80014b0 <sd_write+0xa0>)
 8001474:	490c      	ldr	r1, [pc, #48]	; (80014a8 <sd_write+0x98>)
 8001476:	480d      	ldr	r0, [pc, #52]	; (80014ac <sd_write+0x9c>)
 8001478:	f00e fc99 	bl	800fdae <f_write>

		bufclear();	//書き込み用のバッファをクリア
 800147c:	f000 f970 	bl	8001760 <bufclear>
	for(short i = 0 ; i < size; i++){
 8001480:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001484:	b29b      	uxth	r3, r3
 8001486:	3301      	adds	r3, #1
 8001488:	b29b      	uxth	r3, r3
 800148a:	81fb      	strh	r3, [r7, #14]
 800148c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001490:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001494:	429a      	cmp	r2, r3
 8001496:	dbc8      	blt.n	800142a <sd_write+0x1a>
	}
	return ret;
 8001498:	7b7b      	ldrb	r3, [r7, #13]
}
 800149a:	4618      	mov	r0, r3
 800149c:	3714      	adds	r7, #20
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd90      	pop	{r4, r7, pc}
 80014a2:	bf00      	nop
 80014a4:	08016cd0 	.word	0x08016cd0
 80014a8:	20008ff0 	.word	0x20008ff0
 80014ac:	20009080 	.word	0x20009080
 80014b0:	20009070 	.word	0x20009070

080014b4 <sd_write_array_float>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_float(const char *p_folder_name, const char *p_file_name, short size, float *data, char state){
 80014b4:	b590      	push	{r4, r7, lr}
 80014b6:	b089      	sub	sp, #36	; 0x24
 80014b8:	af02      	add	r7, sp, #8
 80014ba:	60f8      	str	r0, [r7, #12]
 80014bc:	60b9      	str	r1, [r7, #8]
 80014be:	603b      	str	r3, [r7, #0]
 80014c0:	4613      	mov	r3, r2
 80014c2:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 80014c4:	2300      	movs	r3, #0
 80014c6:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 80014c8:	68b9      	ldr	r1, [r7, #8]
 80014ca:	68f8      	ldr	r0, [r7, #12]
 80014cc:	f000 f918 	bl	8001700 <create_path>

	if(state == OVER_WRITE){
 80014d0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d108      	bne.n	80014ea <sd_write_array_float+0x36>
		f_chdir(dirpath);
 80014d8:	4822      	ldr	r0, [pc, #136]	; (8001564 <sd_write_array_float+0xb0>)
 80014da:	f00e fea4 	bl	8010226 <f_chdir>
		f_unlink(filepath);	//	一回消す
 80014de:	4822      	ldr	r0, [pc, #136]	; (8001568 <sd_write_array_float+0xb4>)
 80014e0:	f00f f90f 	bl	8010702 <f_unlink>
		f_chdir("..");
 80014e4:	4821      	ldr	r0, [pc, #132]	; (800156c <sd_write_array_float+0xb8>)
 80014e6:	f00e fe9e 	bl	8010226 <f_chdir>
	}

	fopen_folder_and_file();	//	書き込むファイルを選択
 80014ea:	f000 f91f 	bl	800172c <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 80014ee:	2300      	movs	r3, #0
 80014f0:	82fb      	strh	r3, [r7, #22]
 80014f2:	e028      	b.n	8001546 <sd_write_array_float+0x92>
		snprintf(buffer, BUFF_SIZE, "%f\n", *(data + i));	//floatをstringに変換
 80014f4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	683a      	ldr	r2, [r7, #0]
 80014fc:	4413      	add	r3, r2
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff f839 	bl	8000578 <__aeabi_f2d>
 8001506:	4603      	mov	r3, r0
 8001508:	460c      	mov	r4, r1
 800150a:	e9cd 3400 	strd	r3, r4, [sp]
 800150e:	4a18      	ldr	r2, [pc, #96]	; (8001570 <sd_write_array_float+0xbc>)
 8001510:	2180      	movs	r1, #128	; 0x80
 8001512:	4818      	ldr	r0, [pc, #96]	; (8001574 <sd_write_array_float+0xc0>)
 8001514:	f011 fb8c 	bl	8012c30 <sniprintf>

		f_lseek(&fil, f_size(&fil));	//	ファイルの最後に移動
 8001518:	4b17      	ldr	r3, [pc, #92]	; (8001578 <sd_write_array_float+0xc4>)
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	4619      	mov	r1, r3
 800151e:	4816      	ldr	r0, [pc, #88]	; (8001578 <sd_write_array_float+0xc4>)
 8001520:	f00e fecb 	bl	80102ba <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//	書き込む
 8001524:	4813      	ldr	r0, [pc, #76]	; (8001574 <sd_write_array_float+0xc0>)
 8001526:	f7fe fe6b 	bl	8000200 <strlen>
 800152a:	4602      	mov	r2, r0
 800152c:	4b13      	ldr	r3, [pc, #76]	; (800157c <sd_write_array_float+0xc8>)
 800152e:	4911      	ldr	r1, [pc, #68]	; (8001574 <sd_write_array_float+0xc0>)
 8001530:	4811      	ldr	r0, [pc, #68]	; (8001578 <sd_write_array_float+0xc4>)
 8001532:	f00e fc3c 	bl	800fdae <f_write>

		bufclear();	//	書き込み用のバッファをクリア
 8001536:	f000 f913 	bl	8001760 <bufclear>
	for(short i = 0 ; i < size; i++){
 800153a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800153e:	b29b      	uxth	r3, r3
 8001540:	3301      	adds	r3, #1
 8001542:	b29b      	uxth	r3, r3
 8001544:	82fb      	strh	r3, [r7, #22]
 8001546:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800154a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800154e:	429a      	cmp	r2, r3
 8001550:	dbd0      	blt.n	80014f4 <sd_write_array_float+0x40>
	}

	f_close(&fil);	//	ファイル閉じる
 8001552:	4809      	ldr	r0, [pc, #36]	; (8001578 <sd_write_array_float+0xc4>)
 8001554:	f00e fe3d 	bl	80101d2 <f_close>

	return ret;
 8001558:	7d7b      	ldrb	r3, [r7, #21]
}
 800155a:	4618      	mov	r0, r3
 800155c:	371c      	adds	r7, #28
 800155e:	46bd      	mov	sp, r7
 8001560:	bd90      	pop	{r4, r7, pc}
 8001562:	bf00      	nop
 8001564:	20008ef0 	.word	0x20008ef0
 8001568:	20007dac 	.word	0x20007dac
 800156c:	08016ce0 	.word	0x08016ce0
 8001570:	08016cd0 	.word	0x08016cd0
 8001574:	20008ff0 	.word	0x20008ff0
 8001578:	20009080 	.word	0x20009080
 800157c:	20009070 	.word	0x20009070

08001580 <sd_write_array_int>:
//* 役割　：　SDに書き込む
//* 引数　：　char *, char *, short, float *, char: フォルダ名、ファイル名、変数の数、データのポインタ、追加か上書きか
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_write_array_int(const char *p_folder_name, const char *p_file_name, short size, int *data, char state){
 8001580:	b580      	push	{r7, lr}
 8001582:	b086      	sub	sp, #24
 8001584:	af00      	add	r7, sp, #0
 8001586:	60f8      	str	r0, [r7, #12]
 8001588:	60b9      	str	r1, [r7, #8]
 800158a:	603b      	str	r3, [r7, #0]
 800158c:	4613      	mov	r3, r2
 800158e:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 8001590:	2300      	movs	r3, #0
 8001592:	757b      	strb	r3, [r7, #21]

	create_path(p_folder_name, p_file_name);
 8001594:	68b9      	ldr	r1, [r7, #8]
 8001596:	68f8      	ldr	r0, [r7, #12]
 8001598:	f000 f8b2 	bl	8001700 <create_path>

	if(state == OVER_WRITE){
 800159c:	f897 3020 	ldrb.w	r3, [r7, #32]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d108      	bne.n	80015b6 <sd_write_array_int+0x36>
		f_chdir(dirpath);
 80015a4:	481e      	ldr	r0, [pc, #120]	; (8001620 <sd_write_array_int+0xa0>)
 80015a6:	f00e fe3e 	bl	8010226 <f_chdir>
		f_unlink(filepath);	//一回消す
 80015aa:	481e      	ldr	r0, [pc, #120]	; (8001624 <sd_write_array_int+0xa4>)
 80015ac:	f00f f8a9 	bl	8010702 <f_unlink>
		f_chdir("..");
 80015b0:	481d      	ldr	r0, [pc, #116]	; (8001628 <sd_write_array_int+0xa8>)
 80015b2:	f00e fe38 	bl	8010226 <f_chdir>
	}

	fopen_folder_and_file();	//書き込むファイルを選択
 80015b6:	f000 f8b9 	bl	800172c <fopen_folder_and_file>

	for(short i = 0 ; i < size; i++){
 80015ba:	2300      	movs	r3, #0
 80015bc:	82fb      	strh	r3, [r7, #22]
 80015be:	e021      	b.n	8001604 <sd_write_array_int+0x84>
		snprintf(buffer, BUFF_SIZE, "%d\n", *(data + i));	//floatをstringに変換
 80015c0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	683a      	ldr	r2, [r7, #0]
 80015c8:	4413      	add	r3, r2
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a17      	ldr	r2, [pc, #92]	; (800162c <sd_write_array_int+0xac>)
 80015ce:	2180      	movs	r1, #128	; 0x80
 80015d0:	4817      	ldr	r0, [pc, #92]	; (8001630 <sd_write_array_int+0xb0>)
 80015d2:	f011 fb2d 	bl	8012c30 <sniprintf>
		}
		else{
			f_lseek(&fil, 0);	//ファイルの最初に移動
		}
*/
		f_lseek(&fil, f_size(&fil));	//ファイルの最後に移動
 80015d6:	4b17      	ldr	r3, [pc, #92]	; (8001634 <sd_write_array_int+0xb4>)
 80015d8:	68db      	ldr	r3, [r3, #12]
 80015da:	4619      	mov	r1, r3
 80015dc:	4815      	ldr	r0, [pc, #84]	; (8001634 <sd_write_array_int+0xb4>)
 80015de:	f00e fe6c 	bl	80102ba <f_lseek>
		f_write(&fil, buffer, strlen(buffer), &bw);	//書き込む
 80015e2:	4813      	ldr	r0, [pc, #76]	; (8001630 <sd_write_array_int+0xb0>)
 80015e4:	f7fe fe0c 	bl	8000200 <strlen>
 80015e8:	4602      	mov	r2, r0
 80015ea:	4b13      	ldr	r3, [pc, #76]	; (8001638 <sd_write_array_int+0xb8>)
 80015ec:	4910      	ldr	r1, [pc, #64]	; (8001630 <sd_write_array_int+0xb0>)
 80015ee:	4811      	ldr	r0, [pc, #68]	; (8001634 <sd_write_array_int+0xb4>)
 80015f0:	f00e fbdd 	bl	800fdae <f_write>

		bufclear();	//書き込み用のバッファをクリア
 80015f4:	f000 f8b4 	bl	8001760 <bufclear>
	for(short i = 0 ; i < size; i++){
 80015f8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80015fc:	b29b      	uxth	r3, r3
 80015fe:	3301      	adds	r3, #1
 8001600:	b29b      	uxth	r3, r3
 8001602:	82fb      	strh	r3, [r7, #22]
 8001604:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001608:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800160c:	429a      	cmp	r2, r3
 800160e:	dbd7      	blt.n	80015c0 <sd_write_array_int+0x40>
	}

	f_close(&fil);	//ファイル閉じる
 8001610:	4808      	ldr	r0, [pc, #32]	; (8001634 <sd_write_array_int+0xb4>)
 8001612:	f00e fdde 	bl	80101d2 <f_close>

	return ret;
 8001616:	7d7b      	ldrb	r3, [r7, #21]
}
 8001618:	4618      	mov	r0, r3
 800161a:	3718      	adds	r7, #24
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	20008ef0 	.word	0x20008ef0
 8001624:	20007dac 	.word	0x20007dac
 8001628:	08016ce0 	.word	0x08016ce0
 800162c:	08016ce4 	.word	0x08016ce4
 8001630:	20008ff0 	.word	0x20008ff0
 8001634:	20009080 	.word	0x20009080
 8001638:	20009070 	.word	0x20009070

0800163c <sd_read_array_int>:
//* 役割　：　SDから読み込む
//* 引数　：　char *, char *, short, float *: フォルダ名、ファイル名、変数の数、データのポインタ
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_read_array_int(const char  *p_folder_name, const char *p_file_name, short size, int *data){
 800163c:	b580      	push	{r7, lr}
 800163e:	b086      	sub	sp, #24
 8001640:	af00      	add	r7, sp, #0
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	60b9      	str	r1, [r7, #8]
 8001646:	603b      	str	r3, [r7, #0]
 8001648:	4613      	mov	r3, r2
 800164a:	80fb      	strh	r3, [r7, #6]
	FRESULT ret = 0;
 800164c:	2300      	movs	r3, #0
 800164e:	757b      	strb	r3, [r7, #21]
	short i = 0;
 8001650:	2300      	movs	r3, #0
 8001652:	82fb      	strh	r3, [r7, #22]

	create_path(p_folder_name, p_file_name);
 8001654:	68b9      	ldr	r1, [r7, #8]
 8001656:	68f8      	ldr	r0, [r7, #12]
 8001658:	f000 f852 	bl	8001700 <create_path>
	fopen_folder_and_file();	//書き込むファイルを選択
 800165c:	f000 f866 	bl	800172c <fopen_folder_and_file>

	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001660:	e019      	b.n	8001696 <sd_read_array_int+0x5a>
		sscanf(buffer, "%d", data + i);
 8001662:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	683a      	ldr	r2, [r7, #0]
 800166a:	4413      	add	r3, r2
 800166c:	461a      	mov	r2, r3
 800166e:	4913      	ldr	r1, [pc, #76]	; (80016bc <sd_read_array_int+0x80>)
 8001670:	4813      	ldr	r0, [pc, #76]	; (80016c0 <sd_read_array_int+0x84>)
 8001672:	f011 fb31 	bl	8012cd8 <siscanf>
		i++;
 8001676:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800167a:	b29b      	uxth	r3, r3
 800167c:	3301      	adds	r3, #1
 800167e:	b29b      	uxth	r3, r3
 8001680:	82fb      	strh	r3, [r7, #22]
		if(i >= size) i = size - 1;
 8001682:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001686:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800168a:	429a      	cmp	r2, r3
 800168c:	db03      	blt.n	8001696 <sd_read_array_int+0x5a>
 800168e:	88fb      	ldrh	r3, [r7, #6]
 8001690:	3b01      	subs	r3, #1
 8001692:	b29b      	uxth	r3, r3
 8001694:	82fb      	strh	r3, [r7, #22]
	while(f_gets(buffer, sizeof(buffer), &fil) != NULL){
 8001696:	4a0b      	ldr	r2, [pc, #44]	; (80016c4 <sd_read_array_int+0x88>)
 8001698:	2180      	movs	r1, #128	; 0x80
 800169a:	4809      	ldr	r0, [pc, #36]	; (80016c0 <sd_read_array_int+0x84>)
 800169c:	f00f fa0c 	bl	8010ab8 <f_gets>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d1dd      	bne.n	8001662 <sd_read_array_int+0x26>

	}

	bufclear();	//書き込み用のバッファをクリア
 80016a6:	f000 f85b 	bl	8001760 <bufclear>

	f_close(&fil);	//ファイル閉じる
 80016aa:	4806      	ldr	r0, [pc, #24]	; (80016c4 <sd_read_array_int+0x88>)
 80016ac:	f00e fd91 	bl	80101d2 <f_close>

	return ret;
 80016b0:	7d7b      	ldrb	r3, [r7, #21]
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3718      	adds	r7, #24
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	08016ce8 	.word	0x08016ce8
 80016c0:	20008ff0 	.word	0x20008ff0
 80016c4:	20009080 	.word	0x20009080

080016c8 <sd_mount>:
//* 役割　：　SDカードをマウント
//* 引数　：　void:
//* 戻り値：　FRESULT:
//* 備考 : なし
//************************************************************************/
FRESULT sd_mount(){
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
	FRESULT ret = 0;
 80016ce:	2300      	movs	r3, #0
 80016d0:	71fb      	strb	r3, [r7, #7]

	if(f_mount(&fs, "", 1) == FR_OK) ret = 1;
 80016d2:	2201      	movs	r2, #1
 80016d4:	4908      	ldr	r1, [pc, #32]	; (80016f8 <sd_mount+0x30>)
 80016d6:	4809      	ldr	r0, [pc, #36]	; (80016fc <sd_mount+0x34>)
 80016d8:	f00d fff8 	bl	800f6cc <f_mount>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d102      	bne.n	80016e8 <sd_mount+0x20>
 80016e2:	2301      	movs	r3, #1
 80016e4:	71fb      	strb	r3, [r7, #7]
 80016e6:	e001      	b.n	80016ec <sd_mount+0x24>
	else ret = 0;
 80016e8:	2300      	movs	r3, #0
 80016ea:	71fb      	strb	r3, [r7, #7]

	return ret;
 80016ec:	79fb      	ldrb	r3, [r7, #7]
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	08016cec 	.word	0x08016cec
 80016fc:	20007eac 	.word	0x20007eac

08001700 <create_path>:
//* 役割　：　操作するパスの文字列を作る
//* 引数　：　char, char: フォルダ名, ファイル名
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void create_path(char const *p_folder_name, char const *p_file_name){
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6039      	str	r1, [r7, #0]

	sprintf(dirpath, "%s", p_folder_name);
 800170a:	6879      	ldr	r1, [r7, #4]
 800170c:	4805      	ldr	r0, [pc, #20]	; (8001724 <create_path+0x24>)
 800170e:	f011 fb52 	bl	8012db6 <strcpy>

	sprintf(filepath, "%s", p_file_name);
 8001712:	6839      	ldr	r1, [r7, #0]
 8001714:	4804      	ldr	r0, [pc, #16]	; (8001728 <create_path+0x28>)
 8001716:	f011 fb4e 	bl	8012db6 <strcpy>

}
 800171a:	bf00      	nop
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	20008ef0 	.word	0x20008ef0
 8001728:	20007dac 	.word	0x20007dac

0800172c <fopen_folder_and_file>:
//* 役割　：　操作するファイルを選択する_
//* 引数　：　char: ファイル選択
//* 戻り値：　char: 状態チェック	0(マウント失敗) or 1(成功)
//* 備考 : なし
//************************************************************************/
void fopen_folder_and_file(){	//mkdir
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0

	f_mkdir(dirpath);
 8001730:	4807      	ldr	r0, [pc, #28]	; (8001750 <fopen_folder_and_file+0x24>)
 8001732:	f00f f8a7 	bl	8010884 <f_mkdir>

	f_chdir(dirpath);
 8001736:	4806      	ldr	r0, [pc, #24]	; (8001750 <fopen_folder_and_file+0x24>)
 8001738:	f00e fd75 	bl	8010226 <f_chdir>

	f_open(&fil, filepath, FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 800173c:	2213      	movs	r2, #19
 800173e:	4905      	ldr	r1, [pc, #20]	; (8001754 <fopen_folder_and_file+0x28>)
 8001740:	4805      	ldr	r0, [pc, #20]	; (8001758 <fopen_folder_and_file+0x2c>)
 8001742:	f00e f809 	bl	800f758 <f_open>

	f_chdir("..");
 8001746:	4805      	ldr	r0, [pc, #20]	; (800175c <fopen_folder_and_file+0x30>)
 8001748:	f00e fd6d 	bl	8010226 <f_chdir>


}
 800174c:	bf00      	nop
 800174e:	bd80      	pop	{r7, pc}
 8001750:	20008ef0 	.word	0x20008ef0
 8001754:	20007dac 	.word	0x20007dac
 8001758:	20009080 	.word	0x20009080
 800175c:	08016ce0 	.word	0x08016ce0

08001760 <bufclear>:
//* 役割　：　バッファをクリア
//* 引数　：　void:
//* 戻り値：　void:
//* 備考 : なし
//************************************************************************/
void bufclear(void){
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
	for(int i = 0; i < BUFF_SIZE; i++){
 8001766:	2300      	movs	r3, #0
 8001768:	607b      	str	r3, [r7, #4]
 800176a:	e007      	b.n	800177c <bufclear+0x1c>
		buffer[i] = '\0';
 800176c:	4a08      	ldr	r2, [pc, #32]	; (8001790 <bufclear+0x30>)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4413      	add	r3, r2
 8001772:	2200      	movs	r2, #0
 8001774:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < BUFF_SIZE; i++){
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	3301      	adds	r3, #1
 800177a:	607b      	str	r3, [r7, #4]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2b7f      	cmp	r3, #127	; 0x7f
 8001780:	ddf4      	ble.n	800176c <bufclear+0xc>
	}
}
 8001782:	bf00      	nop
 8001784:	370c      	adds	r7, #12
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	20008ff0 	.word	0x20008ff0

08001794 <read_byte>:
#include "ICM_20648.h"

volatile int16_t xa, ya, za; // 加速度(16bitデータ)
volatile int16_t xg, yg, zg;	// 角加速度(16bitデータ)

uint8_t read_byte( uint8_t reg ) {
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	4603      	mov	r3, r0
 800179c:	71fb      	strb	r3, [r7, #7]
	uint8_t ret,val;

	ret = reg | 0x80;
 800179e:	79fb      	ldrb	r3, [r7, #7]
 80017a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 80017a8:	2200      	movs	r2, #0
 80017aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017ae:	480e      	ldr	r0, [pc, #56]	; (80017e8 <read_byte+0x54>)
 80017b0:	f005 fadc 	bl	8006d6c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 80017b4:	f107 010f 	add.w	r1, r7, #15
 80017b8:	2364      	movs	r3, #100	; 0x64
 80017ba:	2201      	movs	r2, #1
 80017bc:	480b      	ldr	r0, [pc, #44]	; (80017ec <read_byte+0x58>)
 80017be:	f008 fc9d 	bl	800a0fc <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi2,&val,1,100);
 80017c2:	f107 010e 	add.w	r1, r7, #14
 80017c6:	2364      	movs	r3, #100	; 0x64
 80017c8:	2201      	movs	r2, #1
 80017ca:	4808      	ldr	r0, [pc, #32]	; (80017ec <read_byte+0x58>)
 80017cc:	f008 fdca 	bl	800a364 <HAL_SPI_Receive>
	CS_SET;
 80017d0:	2201      	movs	r2, #1
 80017d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017d6:	4804      	ldr	r0, [pc, #16]	; (80017e8 <read_byte+0x54>)
 80017d8:	f005 fac8 	bl	8006d6c <HAL_GPIO_WritePin>

	return val;
 80017dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3710      	adds	r7, #16
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	40020400 	.word	0x40020400
 80017ec:	2000a11c 	.word	0x2000a11c

080017f0 <write_byte>:

void write_byte( uint8_t reg, uint8_t val )  {
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4603      	mov	r3, r0
 80017f8:	460a      	mov	r2, r1
 80017fa:	71fb      	strb	r3, [r7, #7]
 80017fc:	4613      	mov	r3, r2
 80017fe:	71bb      	strb	r3, [r7, #6]
	uint8_t ret;

	ret = reg & 0x7F;
 8001800:	79fb      	ldrb	r3, [r7, #7]
 8001802:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001806:	b2db      	uxtb	r3, r3
 8001808:	73fb      	strb	r3, [r7, #15]
	CS_RESET;
 800180a:	2200      	movs	r2, #0
 800180c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001810:	480c      	ldr	r0, [pc, #48]	; (8001844 <write_byte+0x54>)
 8001812:	f005 faab 	bl	8006d6c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2,&ret,1,100);
 8001816:	f107 010f 	add.w	r1, r7, #15
 800181a:	2364      	movs	r3, #100	; 0x64
 800181c:	2201      	movs	r2, #1
 800181e:	480a      	ldr	r0, [pc, #40]	; (8001848 <write_byte+0x58>)
 8001820:	f008 fc6c 	bl	800a0fc <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi2,&val,1,100);
 8001824:	1db9      	adds	r1, r7, #6
 8001826:	2364      	movs	r3, #100	; 0x64
 8001828:	2201      	movs	r2, #1
 800182a:	4807      	ldr	r0, [pc, #28]	; (8001848 <write_byte+0x58>)
 800182c:	f008 fc66 	bl	800a0fc <HAL_SPI_Transmit>
	CS_SET;
 8001830:	2201      	movs	r2, #1
 8001832:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001836:	4803      	ldr	r0, [pc, #12]	; (8001844 <write_byte+0x54>)
 8001838:	f005 fa98 	bl	8006d6c <HAL_GPIO_WritePin>
}
 800183c:	bf00      	nop
 800183e:	3710      	adds	r7, #16
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	40020400 	.word	0x40020400
 8001848:	2000a11c 	.word	0x2000a11c

0800184c <IMU_init>:

uint16_t IMU_init() {
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
	uint8_t who_am_i;
	uint16_t ret = 0;
 8001852:	2300      	movs	r3, #0
 8001854:	80fb      	strh	r3, [r7, #6]

	who_am_i = read_byte(0x00);	//IMU動作確認　0xE0が送られてくればおｋ
 8001856:	2000      	movs	r0, #0
 8001858:	f7ff ff9c 	bl	8001794 <read_byte>
 800185c:	4603      	mov	r3, r0
 800185e:	717b      	strb	r3, [r7, #5]
	if ( who_am_i == 0xE0 ) {
 8001860:	797b      	ldrb	r3, [r7, #5]
 8001862:	2be0      	cmp	r3, #224	; 0xe0
 8001864:	d119      	bne.n	800189a <IMU_init+0x4e>
		ret = 1;
 8001866:	2301      	movs	r3, #1
 8001868:	80fb      	strh	r3, [r7, #6]
		write_byte(0x06,0x01);	//PWR_MGMT_1	スリープﾓｰﾄﾞ解除
 800186a:	2101      	movs	r1, #1
 800186c:	2006      	movs	r0, #6
 800186e:	f7ff ffbf 	bl	80017f0 <write_byte>
		write_byte(0x03,0x10);	//USER_CTRL	諸々機能無効　SPIonly
 8001872:	2110      	movs	r1, #16
 8001874:	2003      	movs	r0, #3
 8001876:	f7ff ffbb 	bl	80017f0 <write_byte>
		write_byte(0x7F,0x20);	//USER_BANK2
 800187a:	2120      	movs	r1, #32
 800187c:	207f      	movs	r0, #127	; 0x7f
 800187e:	f7ff ffb7 	bl	80017f0 <write_byte>
		write_byte(0x01,0x06);	//レンジ±2000dps
 8001882:	2106      	movs	r1, #6
 8001884:	2001      	movs	r0, #1
 8001886:	f7ff ffb3 	bl	80017f0 <write_byte>
		//2:1 GYRO_FS_SEL[1:0] 00:±250	01:±500 10:±1000 11:±2000
		write_byte(0x14,0x06);	//レンジ±16g
 800188a:	2106      	movs	r1, #6
 800188c:	2014      	movs	r0, #20
 800188e:	f7ff ffaf 	bl	80017f0 <write_byte>
		//2:1 ACCEL_FS_SEL[1:0] 00:±2	01:±4 10:±8 11:±16
		write_byte(0x7F,0x00);	//USER_BANK0
 8001892:	2100      	movs	r1, #0
 8001894:	207f      	movs	r0, #127	; 0x7f
 8001896:	f7ff ffab 	bl	80017f0 <write_byte>
	}
	return ret;
 800189a:	88fb      	ldrh	r3, [r7, #6]
}
 800189c:	4618      	mov	r0, r3
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <read_gyro_data>:

void read_gyro_data() {
 80018a4:	b598      	push	{r3, r4, r7, lr}
 80018a6:	af00      	add	r7, sp, #0
	xg = ((uint16_t)read_byte(0x33) << 8) | ((uint16_t)read_byte(0x34));
 80018a8:	2033      	movs	r0, #51	; 0x33
 80018aa:	f7ff ff73 	bl	8001794 <read_byte>
 80018ae:	4603      	mov	r3, r0
 80018b0:	021b      	lsls	r3, r3, #8
 80018b2:	b21c      	sxth	r4, r3
 80018b4:	2034      	movs	r0, #52	; 0x34
 80018b6:	f7ff ff6d 	bl	8001794 <read_byte>
 80018ba:	4603      	mov	r3, r0
 80018bc:	b21b      	sxth	r3, r3
 80018be:	4323      	orrs	r3, r4
 80018c0:	b21a      	sxth	r2, r3
 80018c2:	4b11      	ldr	r3, [pc, #68]	; (8001908 <read_gyro_data+0x64>)
 80018c4:	801a      	strh	r2, [r3, #0]
	yg = ((uint16_t)read_byte(0x35) << 8) | ((uint16_t)read_byte(0x36));
 80018c6:	2035      	movs	r0, #53	; 0x35
 80018c8:	f7ff ff64 	bl	8001794 <read_byte>
 80018cc:	4603      	mov	r3, r0
 80018ce:	021b      	lsls	r3, r3, #8
 80018d0:	b21c      	sxth	r4, r3
 80018d2:	2036      	movs	r0, #54	; 0x36
 80018d4:	f7ff ff5e 	bl	8001794 <read_byte>
 80018d8:	4603      	mov	r3, r0
 80018da:	b21b      	sxth	r3, r3
 80018dc:	4323      	orrs	r3, r4
 80018de:	b21a      	sxth	r2, r3
 80018e0:	4b0a      	ldr	r3, [pc, #40]	; (800190c <read_gyro_data+0x68>)
 80018e2:	801a      	strh	r2, [r3, #0]
	zg = ((uint16_t)read_byte(0x37) << 8) | ((uint16_t)read_byte(0x38));
 80018e4:	2037      	movs	r0, #55	; 0x37
 80018e6:	f7ff ff55 	bl	8001794 <read_byte>
 80018ea:	4603      	mov	r3, r0
 80018ec:	021b      	lsls	r3, r3, #8
 80018ee:	b21c      	sxth	r4, r3
 80018f0:	2038      	movs	r0, #56	; 0x38
 80018f2:	f7ff ff4f 	bl	8001794 <read_byte>
 80018f6:	4603      	mov	r3, r0
 80018f8:	b21b      	sxth	r3, r3
 80018fa:	4323      	orrs	r3, r4
 80018fc:	b21a      	sxth	r2, r3
 80018fe:	4b04      	ldr	r3, [pc, #16]	; (8001910 <read_gyro_data+0x6c>)
 8001900:	801a      	strh	r2, [r3, #0]
}
 8001902:	bf00      	nop
 8001904:	bd98      	pop	{r3, r4, r7, pc}
 8001906:	bf00      	nop
 8001908:	2000a0b8 	.word	0x2000a0b8
 800190c:	2000a0b6 	.word	0x2000a0b6
 8001910:	2000a0b0 	.word	0x2000a0b0

08001914 <read_accel_data>:

void read_accel_data() {
 8001914:	b598      	push	{r3, r4, r7, lr}
 8001916:	af00      	add	r7, sp, #0
	xa = ((uint16_t)read_byte(0x2D) << 8) | ((uint16_t)read_byte(0x2E));
 8001918:	202d      	movs	r0, #45	; 0x2d
 800191a:	f7ff ff3b 	bl	8001794 <read_byte>
 800191e:	4603      	mov	r3, r0
 8001920:	021b      	lsls	r3, r3, #8
 8001922:	b21c      	sxth	r4, r3
 8001924:	202e      	movs	r0, #46	; 0x2e
 8001926:	f7ff ff35 	bl	8001794 <read_byte>
 800192a:	4603      	mov	r3, r0
 800192c:	b21b      	sxth	r3, r3
 800192e:	4323      	orrs	r3, r4
 8001930:	b21a      	sxth	r2, r3
 8001932:	4b11      	ldr	r3, [pc, #68]	; (8001978 <read_accel_data+0x64>)
 8001934:	801a      	strh	r2, [r3, #0]
	ya = ((uint16_t)read_byte(0x2F) << 8) | ((uint16_t)read_byte(0x30));
 8001936:	202f      	movs	r0, #47	; 0x2f
 8001938:	f7ff ff2c 	bl	8001794 <read_byte>
 800193c:	4603      	mov	r3, r0
 800193e:	021b      	lsls	r3, r3, #8
 8001940:	b21c      	sxth	r4, r3
 8001942:	2030      	movs	r0, #48	; 0x30
 8001944:	f7ff ff26 	bl	8001794 <read_byte>
 8001948:	4603      	mov	r3, r0
 800194a:	b21b      	sxth	r3, r3
 800194c:	4323      	orrs	r3, r4
 800194e:	b21a      	sxth	r2, r3
 8001950:	4b0a      	ldr	r3, [pc, #40]	; (800197c <read_accel_data+0x68>)
 8001952:	801a      	strh	r2, [r3, #0]
	za = ((uint16_t)read_byte(0x31) << 8) | ((uint16_t)read_byte(0x32));
 8001954:	2031      	movs	r0, #49	; 0x31
 8001956:	f7ff ff1d 	bl	8001794 <read_byte>
 800195a:	4603      	mov	r3, r0
 800195c:	021b      	lsls	r3, r3, #8
 800195e:	b21c      	sxth	r4, r3
 8001960:	2032      	movs	r0, #50	; 0x32
 8001962:	f7ff ff17 	bl	8001794 <read_byte>
 8001966:	4603      	mov	r3, r0
 8001968:	b21b      	sxth	r3, r3
 800196a:	4323      	orrs	r3, r4
 800196c:	b21a      	sxth	r2, r3
 800196e:	4b04      	ldr	r3, [pc, #16]	; (8001980 <read_accel_data+0x6c>)
 8001970:	801a      	strh	r2, [r3, #0]
}
 8001972:	bf00      	nop
 8001974:	bd98      	pop	{r3, r4, r7, pc}
 8001976:	bf00      	nop
 8001978:	2000a0b4 	.word	0x2000a0b4
 800197c:	2000a0ba 	.word	0x2000a0ba
 8001980:	2000a0b2 	.word	0x2000a0b2

08001984 <_ZN3IMUC1Ev>:
#include "ICM_20648.h"
#include "stm32f4xx_hal.h"
#include "stdio.h"
#include <vector>

IMU::IMU() : xa_(0), ya_(0), za_(0), xg_(0), yg_(0), zg_(0), offset_(0)
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f04f 0200 	mov.w	r2, #0
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f04f 0200 	mov.w	r2, #0
 800199a:	605a      	str	r2, [r3, #4]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	f04f 0200 	mov.w	r2, #0
 80019a2:	609a      	str	r2, [r3, #8]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f04f 0200 	mov.w	r2, #0
 80019aa:	60da      	str	r2, [r3, #12]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f04f 0200 	mov.w	r2, #0
 80019b2:	611a      	str	r2, [r3, #16]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	f04f 0200 	mov.w	r2, #0
 80019ba:	615a      	str	r2, [r3, #20]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f04f 0200 	mov.w	r2, #0
 80019c2:	619a      	str	r2, [r3, #24]
{

}
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	4618      	mov	r0, r3
 80019c8:	370c      	adds	r7, #12
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
	...

080019d4 <_ZN3IMU4initEv>:

void IMU::init()
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
	uint16_t who_i_am;
	who_i_am = IMU_init();
 80019dc:	f7ff ff36 	bl	800184c <IMU_init>
 80019e0:	4603      	mov	r3, r0
 80019e2:	81fb      	strh	r3, [r7, #14]
	printf("who i am: %d\n", who_i_am);
 80019e4:	89fb      	ldrh	r3, [r7, #14]
 80019e6:	4619      	mov	r1, r3
 80019e8:	4803      	ldr	r0, [pc, #12]	; (80019f8 <_ZN3IMU4initEv+0x24>)
 80019ea:	f011 f88b 	bl	8012b04 <iprintf>

}
 80019ee:	bf00      	nop
 80019f0:	3710      	adds	r7, #16
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	08016cf0 	.word	0x08016cf0

080019fc <_ZN3IMU12updateValuesEv>:

void IMU::updateValues()
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
	read_gyro_data();
 8001a04:	f7ff ff4e 	bl	80018a4 <read_gyro_data>
	read_accel_data();
 8001a08:	f7ff ff84 	bl	8001914 <read_accel_data>

	xa_ = xa;
 8001a0c:	4b1f      	ldr	r3, [pc, #124]	; (8001a8c <_ZN3IMU12updateValuesEv+0x90>)
 8001a0e:	881b      	ldrh	r3, [r3, #0]
 8001a10:	b21b      	sxth	r3, r3
 8001a12:	ee07 3a90 	vmov	s15, r3
 8001a16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	edc3 7a00 	vstr	s15, [r3]
	ya_ = ya;
 8001a20:	4b1b      	ldr	r3, [pc, #108]	; (8001a90 <_ZN3IMU12updateValuesEv+0x94>)
 8001a22:	881b      	ldrh	r3, [r3, #0]
 8001a24:	b21b      	sxth	r3, r3
 8001a26:	ee07 3a90 	vmov	s15, r3
 8001a2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	edc3 7a01 	vstr	s15, [r3, #4]
	za_ = za;
 8001a34:	4b17      	ldr	r3, [pc, #92]	; (8001a94 <_ZN3IMU12updateValuesEv+0x98>)
 8001a36:	881b      	ldrh	r3, [r3, #0]
 8001a38:	b21b      	sxth	r3, r3
 8001a3a:	ee07 3a90 	vmov	s15, r3
 8001a3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	edc3 7a02 	vstr	s15, [r3, #8]
	xg_ = xg;
 8001a48:	4b13      	ldr	r3, [pc, #76]	; (8001a98 <_ZN3IMU12updateValuesEv+0x9c>)
 8001a4a:	881b      	ldrh	r3, [r3, #0]
 8001a4c:	b21b      	sxth	r3, r3
 8001a4e:	ee07 3a90 	vmov	s15, r3
 8001a52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	edc3 7a03 	vstr	s15, [r3, #12]
	yg_ = yg;
 8001a5c:	4b0f      	ldr	r3, [pc, #60]	; (8001a9c <_ZN3IMU12updateValuesEv+0xa0>)
 8001a5e:	881b      	ldrh	r3, [r3, #0]
 8001a60:	b21b      	sxth	r3, r3
 8001a62:	ee07 3a90 	vmov	s15, r3
 8001a66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	edc3 7a04 	vstr	s15, [r3, #16]
	zg_ = zg;
 8001a70:	4b0b      	ldr	r3, [pc, #44]	; (8001aa0 <_ZN3IMU12updateValuesEv+0xa4>)
 8001a72:	881b      	ldrh	r3, [r3, #0]
 8001a74:	b21b      	sxth	r3, r3
 8001a76:	ee07 3a90 	vmov	s15, r3
 8001a7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	edc3 7a05 	vstr	s15, [r3, #20]

}
 8001a84:	bf00      	nop
 8001a86:	3708      	adds	r7, #8
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	2000a0b4 	.word	0x2000a0b4
 8001a90:	2000a0ba 	.word	0x2000a0ba
 8001a94:	2000a0b2 	.word	0x2000a0b2
 8001a98:	2000a0b8 	.word	0x2000a0b8
 8001a9c:	2000a0b6 	.word	0x2000a0b6
 8001aa0:	2000a0b0 	.word	0x2000a0b0

08001aa4 <_ZN3IMU8getOmegaEv>:

float IMU::getOmega()
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
	return zg_ - offset_;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	ed93 7a05 	vldr	s14, [r3, #20]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	edd3 7a06 	vldr	s15, [r3, #24]
 8001ab8:	ee77 7a67 	vsub.f32	s15, s14, s15

}
 8001abc:	eeb0 0a67 	vmov.f32	s0, s15
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
	...

08001acc <INA260_read>:

#include "INA260.h"

//#define SLAVEADRESS1 (0x44<<1)

unsigned short INA260_read(uint8_t pointer_byte, uint8_t slave_adress) {
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b086      	sub	sp, #24
 8001ad0:	af02      	add	r7, sp, #8
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	460a      	mov	r2, r1
 8001ad6:	71fb      	strb	r3, [r7, #7]
 8001ad8:	4613      	mov	r3, r2
 8001ada:	71bb      	strb	r3, [r7, #6]
	uint8_t Rxdata[2];
	unsigned short val;
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, &pointer_byte, 1, 100);
 8001adc:	79bb      	ldrb	r3, [r7, #6]
 8001ade:	b299      	uxth	r1, r3
 8001ae0:	1dfa      	adds	r2, r7, #7
 8001ae2:	2364      	movs	r3, #100	; 0x64
 8001ae4:	9300      	str	r3, [sp, #0]
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	480c      	ldr	r0, [pc, #48]	; (8001b1c <INA260_read+0x50>)
 8001aea:	f005 faa9 	bl	8007040 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, slave_adress, Rxdata, 2, 100);
 8001aee:	79bb      	ldrb	r3, [r7, #6]
 8001af0:	b299      	uxth	r1, r3
 8001af2:	f107 020c 	add.w	r2, r7, #12
 8001af6:	2364      	movs	r3, #100	; 0x64
 8001af8:	9300      	str	r3, [sp, #0]
 8001afa:	2302      	movs	r3, #2
 8001afc:	4807      	ldr	r0, [pc, #28]	; (8001b1c <INA260_read+0x50>)
 8001afe:	f005 fb9d 	bl	800723c <HAL_I2C_Master_Receive>
	val = ((unsigned short)Rxdata[0] << 8) | (unsigned short)Rxdata[1];
 8001b02:	7b3b      	ldrb	r3, [r7, #12]
 8001b04:	021b      	lsls	r3, r3, #8
 8001b06:	b21a      	sxth	r2, r3
 8001b08:	7b7b      	ldrb	r3, [r7, #13]
 8001b0a:	b21b      	sxth	r3, r3
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	b21b      	sxth	r3, r3
 8001b10:	81fb      	strh	r3, [r7, #14]
	return val;
 8001b12:	89fb      	ldrh	r3, [r7, #14]
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3710      	adds	r7, #16
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	2000a2d0 	.word	0x2000a2d0

08001b20 <INA260_write>:

void INA260_write(uint8_t pointer_byte , uint8_t data_msbyte , uint8_t data_lsbyte, uint8_t slave_adress) {
 8001b20:	b590      	push	{r4, r7, lr}
 8001b22:	b087      	sub	sp, #28
 8001b24:	af02      	add	r7, sp, #8
 8001b26:	4604      	mov	r4, r0
 8001b28:	4608      	mov	r0, r1
 8001b2a:	4611      	mov	r1, r2
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	4623      	mov	r3, r4
 8001b30:	71fb      	strb	r3, [r7, #7]
 8001b32:	4603      	mov	r3, r0
 8001b34:	71bb      	strb	r3, [r7, #6]
 8001b36:	460b      	mov	r3, r1
 8001b38:	717b      	strb	r3, [r7, #5]
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	713b      	strb	r3, [r7, #4]
	uint8_t Txcmd[3] = { pointer_byte , data_msbyte , data_lsbyte };
 8001b3e:	79fb      	ldrb	r3, [r7, #7]
 8001b40:	733b      	strb	r3, [r7, #12]
 8001b42:	79bb      	ldrb	r3, [r7, #6]
 8001b44:	737b      	strb	r3, [r7, #13]
 8001b46:	797b      	ldrb	r3, [r7, #5]
 8001b48:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c2, slave_adress, Txcmd, 3, 100);
 8001b4a:	793b      	ldrb	r3, [r7, #4]
 8001b4c:	b299      	uxth	r1, r3
 8001b4e:	f107 020c 	add.w	r2, r7, #12
 8001b52:	2364      	movs	r3, #100	; 0x64
 8001b54:	9300      	str	r3, [sp, #0]
 8001b56:	2303      	movs	r3, #3
 8001b58:	4803      	ldr	r0, [pc, #12]	; (8001b68 <INA260_write+0x48>)
 8001b5a:	f005 fa71 	bl	8007040 <HAL_I2C_Master_Transmit>
}
 8001b5e:	bf00      	nop
 8001b60:	3714      	adds	r7, #20
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd90      	pop	{r4, r7, pc}
 8001b66:	bf00      	nop
 8001b68:	2000a2d0 	.word	0x2000a2d0

08001b6c <setConfig>:

void setConfig(uint8_t msbyte , uint8_t lsbyte, uint8_t slave_adress) {
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	4603      	mov	r3, r0
 8001b74:	71fb      	strb	r3, [r7, #7]
 8001b76:	460b      	mov	r3, r1
 8001b78:	71bb      	strb	r3, [r7, #6]
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	717b      	strb	r3, [r7, #5]
	INA260_write(0x00 , msbyte , lsbyte, slave_adress);
 8001b7e:	797b      	ldrb	r3, [r7, #5]
 8001b80:	79ba      	ldrb	r2, [r7, #6]
 8001b82:	79f9      	ldrb	r1, [r7, #7]
 8001b84:	2000      	movs	r0, #0
 8001b86:	f7ff ffcb 	bl	8001b20 <INA260_write>
}
 8001b8a:	bf00      	nop
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <INA260_init>:

void INA260_init(uint8_t slave_adress) {
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b082      	sub	sp, #8
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	4603      	mov	r3, r0
 8001b9a:	71fb      	strb	r3, [r7, #7]
	setConfig(0x00,0xDF, slave_adress);//AVG=1,BusVoltageConversionTime=588u,ShuntCurrentConversionTime=588u,mode=BusVoltageContinuous
 8001b9c:	79fb      	ldrb	r3, [r7, #7]
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	21df      	movs	r1, #223	; 0xdf
 8001ba2:	2000      	movs	r0, #0
 8001ba4:	f7ff ffe2 	bl	8001b6c <setConfig>
}
 8001ba8:	bf00      	nop
 8001baa:	3708      	adds	r7, #8
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <_ZN8JoyStickC1Ev>:
 */

#include "Joystick.hpp"
//#include "stm32f4xx_hal.h"

JoyStick::JoyStick()
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
{

}
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	4618      	mov	r0, r3
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
	...

08001bc8 <_ZN8JoyStick8getValueEv>:

uint16_t JoyStick::getValue()
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_10)) ret_value |= 0x01;
 8001bd4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001bd8:	482a      	ldr	r0, [pc, #168]	; (8001c84 <_ZN8JoyStick8getValueEv+0xbc>)
 8001bda:	f005 f8af 	bl	8006d3c <HAL_GPIO_ReadPin>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	bf0c      	ite	eq
 8001be4:	2301      	moveq	r3, #1
 8001be6:	2300      	movne	r3, #0
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d003      	beq.n	8001bf6 <_ZN8JoyStick8getValueEv+0x2e>
 8001bee:	89fb      	ldrh	r3, [r7, #14]
 8001bf0:	f043 0301 	orr.w	r3, r3, #1
 8001bf4:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_0)) ret_value |= 0x02;
 8001bf6:	2101      	movs	r1, #1
 8001bf8:	4823      	ldr	r0, [pc, #140]	; (8001c88 <_ZN8JoyStick8getValueEv+0xc0>)
 8001bfa:	f005 f89f 	bl	8006d3c <HAL_GPIO_ReadPin>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	bf0c      	ite	eq
 8001c04:	2301      	moveq	r3, #1
 8001c06:	2300      	movne	r3, #0
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d003      	beq.n	8001c16 <_ZN8JoyStick8getValueEv+0x4e>
 8001c0e:	89fb      	ldrh	r3, [r7, #14]
 8001c10:	f043 0302 	orr.w	r3, r3, #2
 8001c14:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_8)) ret_value |= 0x04;
 8001c16:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c1a:	481a      	ldr	r0, [pc, #104]	; (8001c84 <_ZN8JoyStick8getValueEv+0xbc>)
 8001c1c:	f005 f88e 	bl	8006d3c <HAL_GPIO_ReadPin>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	bf0c      	ite	eq
 8001c26:	2301      	moveq	r3, #1
 8001c28:	2300      	movne	r3, #0
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d003      	beq.n	8001c38 <_ZN8JoyStick8getValueEv+0x70>
 8001c30:	89fb      	ldrh	r3, [r7, #14]
 8001c32:	f043 0304 	orr.w	r3, r3, #4
 8001c36:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_2)) ret_value |= 0x08;
 8001c38:	2104      	movs	r1, #4
 8001c3a:	4814      	ldr	r0, [pc, #80]	; (8001c8c <_ZN8JoyStick8getValueEv+0xc4>)
 8001c3c:	f005 f87e 	bl	8006d3c <HAL_GPIO_ReadPin>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	bf0c      	ite	eq
 8001c46:	2301      	moveq	r3, #1
 8001c48:	2300      	movne	r3, #0
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d003      	beq.n	8001c58 <_ZN8JoyStick8getValueEv+0x90>
 8001c50:	89fb      	ldrh	r3, [r7, #14]
 8001c52:	f043 0308 	orr.w	r3, r3, #8
 8001c56:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_7)) ret_value |= 0x10;
 8001c58:	2180      	movs	r1, #128	; 0x80
 8001c5a:	480a      	ldr	r0, [pc, #40]	; (8001c84 <_ZN8JoyStick8getValueEv+0xbc>)
 8001c5c:	f005 f86e 	bl	8006d3c <HAL_GPIO_ReadPin>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	bf0c      	ite	eq
 8001c66:	2301      	moveq	r3, #1
 8001c68:	2300      	movne	r3, #0
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d003      	beq.n	8001c78 <_ZN8JoyStick8getValueEv+0xb0>
 8001c70:	89fb      	ldrh	r3, [r7, #14]
 8001c72:	f043 0310 	orr.w	r3, r3, #16
 8001c76:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8001c78:	89fb      	ldrh	r3, [r7, #14]
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3710      	adds	r7, #16
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	40021000 	.word	0x40021000
 8001c88:	40020c00 	.word	0x40020c00
 8001c8c:	40020400 	.word	0x40020400

08001c90 <_ZN3LED9fullColorEc>:
 */

#include "LED.hpp"

void LED::fullColor(char color)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	460b      	mov	r3, r1
 8001c9a:	70fb      	strb	r3, [r7, #3]
	if(color == 'R'){
 8001c9c:	78fb      	ldrb	r3, [r7, #3]
 8001c9e:	2b52      	cmp	r3, #82	; 0x52
 8001ca0:	d112      	bne.n	8001cc8 <_ZN3LED9fullColorEc+0x38>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ca8:	4856      	ldr	r0, [pc, #344]	; (8001e04 <_ZN3LED9fullColorEc+0x174>)
 8001caa:	f005 f85f 	bl	8006d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001cae:	2201      	movs	r2, #1
 8001cb0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001cb4:	4853      	ldr	r0, [pc, #332]	; (8001e04 <_ZN3LED9fullColorEc+0x174>)
 8001cb6:	f005 f859 	bl	8006d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001cba:	2201      	movs	r2, #1
 8001cbc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001cc0:	4850      	ldr	r0, [pc, #320]	; (8001e04 <_ZN3LED9fullColorEc+0x174>)
 8001cc2:	f005 f853 	bl	8006d6c <HAL_GPIO_WritePin>
	else if(color == '~'){
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
	}
}
 8001cc6:	e098      	b.n	8001dfa <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'G'){
 8001cc8:	78fb      	ldrb	r3, [r7, #3]
 8001cca:	2b47      	cmp	r3, #71	; 0x47
 8001ccc:	d112      	bne.n	8001cf4 <_ZN3LED9fullColorEc+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001cce:	2201      	movs	r2, #1
 8001cd0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cd4:	484b      	ldr	r0, [pc, #300]	; (8001e04 <_ZN3LED9fullColorEc+0x174>)
 8001cd6:	f005 f849 	bl	8006d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001cda:	2200      	movs	r2, #0
 8001cdc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ce0:	4848      	ldr	r0, [pc, #288]	; (8001e04 <_ZN3LED9fullColorEc+0x174>)
 8001ce2:	f005 f843 	bl	8006d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001cec:	4845      	ldr	r0, [pc, #276]	; (8001e04 <_ZN3LED9fullColorEc+0x174>)
 8001cee:	f005 f83d 	bl	8006d6c <HAL_GPIO_WritePin>
}
 8001cf2:	e082      	b.n	8001dfa <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'B'){
 8001cf4:	78fb      	ldrb	r3, [r7, #3]
 8001cf6:	2b42      	cmp	r3, #66	; 0x42
 8001cf8:	d112      	bne.n	8001d20 <_ZN3LED9fullColorEc+0x90>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d00:	4840      	ldr	r0, [pc, #256]	; (8001e04 <_ZN3LED9fullColorEc+0x174>)
 8001d02:	f005 f833 	bl	8006d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001d06:	2201      	movs	r2, #1
 8001d08:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d0c:	483d      	ldr	r0, [pc, #244]	; (8001e04 <_ZN3LED9fullColorEc+0x174>)
 8001d0e:	f005 f82d 	bl	8006d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001d12:	2200      	movs	r2, #0
 8001d14:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d18:	483a      	ldr	r0, [pc, #232]	; (8001e04 <_ZN3LED9fullColorEc+0x174>)
 8001d1a:	f005 f827 	bl	8006d6c <HAL_GPIO_WritePin>
}
 8001d1e:	e06c      	b.n	8001dfa <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'C'){
 8001d20:	78fb      	ldrb	r3, [r7, #3]
 8001d22:	2b43      	cmp	r3, #67	; 0x43
 8001d24:	d112      	bne.n	8001d4c <_ZN3LED9fullColorEc+0xbc>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001d26:	2201      	movs	r2, #1
 8001d28:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d2c:	4835      	ldr	r0, [pc, #212]	; (8001e04 <_ZN3LED9fullColorEc+0x174>)
 8001d2e:	f005 f81d 	bl	8006d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001d32:	2200      	movs	r2, #0
 8001d34:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d38:	4832      	ldr	r0, [pc, #200]	; (8001e04 <_ZN3LED9fullColorEc+0x174>)
 8001d3a:	f005 f817 	bl	8006d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001d3e:	2200      	movs	r2, #0
 8001d40:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d44:	482f      	ldr	r0, [pc, #188]	; (8001e04 <_ZN3LED9fullColorEc+0x174>)
 8001d46:	f005 f811 	bl	8006d6c <HAL_GPIO_WritePin>
}
 8001d4a:	e056      	b.n	8001dfa <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'M'){
 8001d4c:	78fb      	ldrb	r3, [r7, #3]
 8001d4e:	2b4d      	cmp	r3, #77	; 0x4d
 8001d50:	d112      	bne.n	8001d78 <_ZN3LED9fullColorEc+0xe8>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001d52:	2200      	movs	r2, #0
 8001d54:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d58:	482a      	ldr	r0, [pc, #168]	; (8001e04 <_ZN3LED9fullColorEc+0x174>)
 8001d5a:	f005 f807 	bl	8006d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001d5e:	2201      	movs	r2, #1
 8001d60:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d64:	4827      	ldr	r0, [pc, #156]	; (8001e04 <_ZN3LED9fullColorEc+0x174>)
 8001d66:	f005 f801 	bl	8006d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d70:	4824      	ldr	r0, [pc, #144]	; (8001e04 <_ZN3LED9fullColorEc+0x174>)
 8001d72:	f004 fffb 	bl	8006d6c <HAL_GPIO_WritePin>
}
 8001d76:	e040      	b.n	8001dfa <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'Y'){
 8001d78:	78fb      	ldrb	r3, [r7, #3]
 8001d7a:	2b59      	cmp	r3, #89	; 0x59
 8001d7c:	d112      	bne.n	8001da4 <_ZN3LED9fullColorEc+0x114>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001d7e:	2200      	movs	r2, #0
 8001d80:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d84:	481f      	ldr	r0, [pc, #124]	; (8001e04 <_ZN3LED9fullColorEc+0x174>)
 8001d86:	f004 fff1 	bl	8006d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d90:	481c      	ldr	r0, [pc, #112]	; (8001e04 <_ZN3LED9fullColorEc+0x174>)
 8001d92:	f004 ffeb 	bl	8006d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001d96:	2201      	movs	r2, #1
 8001d98:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d9c:	4819      	ldr	r0, [pc, #100]	; (8001e04 <_ZN3LED9fullColorEc+0x174>)
 8001d9e:	f004 ffe5 	bl	8006d6c <HAL_GPIO_WritePin>
}
 8001da2:	e02a      	b.n	8001dfa <_ZN3LED9fullColorEc+0x16a>
	else if(color == 'W'){
 8001da4:	78fb      	ldrb	r3, [r7, #3]
 8001da6:	2b57      	cmp	r3, #87	; 0x57
 8001da8:	d112      	bne.n	8001dd0 <_ZN3LED9fullColorEc+0x140>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001daa:	2200      	movs	r2, #0
 8001dac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001db0:	4814      	ldr	r0, [pc, #80]	; (8001e04 <_ZN3LED9fullColorEc+0x174>)
 8001db2:	f004 ffdb 	bl	8006d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8001db6:	2200      	movs	r2, #0
 8001db8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001dbc:	4811      	ldr	r0, [pc, #68]	; (8001e04 <_ZN3LED9fullColorEc+0x174>)
 8001dbe:	f004 ffd5 	bl	8006d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001dc8:	480e      	ldr	r0, [pc, #56]	; (8001e04 <_ZN3LED9fullColorEc+0x174>)
 8001dca:	f004 ffcf 	bl	8006d6c <HAL_GPIO_WritePin>
}
 8001dce:	e014      	b.n	8001dfa <_ZN3LED9fullColorEc+0x16a>
	else if(color == '~'){
 8001dd0:	78fb      	ldrb	r3, [r7, #3]
 8001dd2:	2b7e      	cmp	r3, #126	; 0x7e
 8001dd4:	d111      	bne.n	8001dfa <_ZN3LED9fullColorEc+0x16a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ddc:	4809      	ldr	r0, [pc, #36]	; (8001e04 <_ZN3LED9fullColorEc+0x174>)
 8001dde:	f004 ffc5 	bl	8006d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_SET);
 8001de2:	2201      	movs	r2, #1
 8001de4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001de8:	4806      	ldr	r0, [pc, #24]	; (8001e04 <_ZN3LED9fullColorEc+0x174>)
 8001dea:	f004 ffbf 	bl	8006d6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8001dee:	2201      	movs	r2, #1
 8001df0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001df4:	4803      	ldr	r0, [pc, #12]	; (8001e04 <_ZN3LED9fullColorEc+0x174>)
 8001df6:	f004 ffb9 	bl	8006d6c <HAL_GPIO_WritePin>
}
 8001dfa:	bf00      	nop
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	40020000 	.word	0x40020000

08001e08 <_ZN3LED2LREaa>:

void LED::LR(int8_t l_status, int8_t r_status)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	460b      	mov	r3, r1
 8001e12:	70fb      	strb	r3, [r7, #3]
 8001e14:	4613      	mov	r3, r2
 8001e16:	70bb      	strb	r3, [r7, #2]
	if(l_status == 1)
 8001e18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d106      	bne.n	8001e2e <_ZN3LED2LREaa+0x26>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8001e20:	2201      	movs	r2, #1
 8001e22:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e26:	4813      	ldr	r0, [pc, #76]	; (8001e74 <_ZN3LED2LREaa+0x6c>)
 8001e28:	f004 ffa0 	bl	8006d6c <HAL_GPIO_WritePin>
 8001e2c:	e009      	b.n	8001e42 <_ZN3LED2LREaa+0x3a>
	else if(l_status == 0)
 8001e2e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d105      	bne.n	8001e42 <_ZN3LED2LREaa+0x3a>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001e36:	2200      	movs	r2, #0
 8001e38:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e3c:	480d      	ldr	r0, [pc, #52]	; (8001e74 <_ZN3LED2LREaa+0x6c>)
 8001e3e:	f004 ff95 	bl	8006d6c <HAL_GPIO_WritePin>

	if(r_status == 1)
 8001e42:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d106      	bne.n	8001e58 <_ZN3LED2LREaa+0x50>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e50:	4808      	ldr	r0, [pc, #32]	; (8001e74 <_ZN3LED2LREaa+0x6c>)
 8001e52:	f004 ff8b 	bl	8006d6c <HAL_GPIO_WritePin>
	else if(r_status == 0)
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);

}
 8001e56:	e009      	b.n	8001e6c <_ZN3LED2LREaa+0x64>
	else if(r_status == 0)
 8001e58:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d105      	bne.n	8001e6c <_ZN3LED2LREaa+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8001e60:	2200      	movs	r2, #0
 8001e62:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e66:	4803      	ldr	r0, [pc, #12]	; (8001e74 <_ZN3LED2LREaa+0x6c>)
 8001e68:	f004 ff80 	bl	8006d6c <HAL_GPIO_WritePin>
}
 8001e6c:	bf00      	nop
 8001e6e:	3708      	adds	r7, #8
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	40020000 	.word	0x40020000

08001e78 <_ZN10LineSensorC1Ev>:
#include <LineSensor.hpp>
#include <algorithm>
#include "G_variables.h"
#include "Macro.h"

LineSensor::LineSensor()
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b092      	sub	sp, #72	; 0x48
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7ff fe92 	bl	8001bb0 <_ZN8JoyStickC1Ev>
{
	for(auto &av : analog_val_){
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	637b      	str	r3, [r7, #52]	; 0x34
 8001e90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e92:	647b      	str	r3, [r7, #68]	; 0x44
 8001e94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e96:	331c      	adds	r3, #28
 8001e98:	633b      	str	r3, [r7, #48]	; 0x30
 8001e9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d008      	beq.n	8001eb4 <_ZN10LineSensorC1Ev+0x3c>
 8001ea2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
		av = 0;
 8001ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	801a      	strh	r2, [r3, #0]
	for(auto &av : analog_val_){
 8001eac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001eae:	3302      	adds	r3, #2
 8001eb0:	647b      	str	r3, [r7, #68]	; 0x44
 8001eb2:	e7f2      	b.n	8001e9a <_ZN10LineSensorC1Ev+0x22>
	}

	for(auto &s : sensor){
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 8001eba:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ebe:	643b      	str	r3, [r7, #64]	; 0x40
 8001ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ec2:	3338      	adds	r3, #56	; 0x38
 8001ec4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ec6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d009      	beq.n	8001ee2 <_ZN10LineSensorC1Ev+0x6a>
 8001ece:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ed0:	623b      	str	r3, [r7, #32]
		s = 0;
 8001ed2:	6a3b      	ldr	r3, [r7, #32]
 8001ed4:	f04f 0200 	mov.w	r2, #0
 8001ed8:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor){
 8001eda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001edc:	3304      	adds	r3, #4
 8001ede:	643b      	str	r3, [r7, #64]	; 0x40
 8001ee0:	e7f1      	b.n	8001ec6 <_ZN10LineSensorC1Ev+0x4e>
	}

	for(auto &m : offset_values_){
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8001ee8:	61fb      	str	r3, [r7, #28]
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	3338      	adds	r3, #56	; 0x38
 8001ef2:	61bb      	str	r3, [r7, #24]
 8001ef4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d009      	beq.n	8001f10 <_ZN10LineSensorC1Ev+0x98>
 8001efc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001efe:	617b      	str	r3, [r7, #20]
		m = 0;
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	f04f 0200 	mov.w	r2, #0
 8001f06:	601a      	str	r2, [r3, #0]
	for(auto &m : offset_values_){
 8001f08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f0a:	3304      	adds	r3, #4
 8001f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f0e:	e7f1      	b.n	8001ef4 <_ZN10LineSensorC1Ev+0x7c>
	}
	for(auto &s : sensor_coefficient_){
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f503 7313 	add.w	r3, r3, #588	; 0x24c
 8001f16:	613b      	str	r3, [r7, #16]
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	63bb      	str	r3, [r7, #56]	; 0x38
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	3338      	adds	r3, #56	; 0x38
 8001f20:	60fb      	str	r3, [r7, #12]
 8001f22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d009      	beq.n	8001f3e <_ZN10LineSensorC1Ev+0xc6>
 8001f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f2c:	60bb      	str	r3, [r7, #8]
		s = 1;
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001f34:	601a      	str	r2, [r3, #0]
	for(auto &s : sensor_coefficient_){
 8001f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f38:	3304      	adds	r3, #4
 8001f3a:	63bb      	str	r3, [r7, #56]	; 0x38
 8001f3c:	e7f1      	b.n	8001f22 <_ZN10LineSensorC1Ev+0xaa>
	}

}
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4618      	mov	r0, r3
 8001f42:	3748      	adds	r7, #72	; 0x48
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <_ZN10LineSensor8ADCStartEv>:

void LineSensor::ADCStart()
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *) analog_val_, 14);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	220e      	movs	r2, #14
 8001f54:	4619      	mov	r1, r3
 8001f56:	4803      	ldr	r0, [pc, #12]	; (8001f64 <_ZN10LineSensor8ADCStartEv+0x1c>)
 8001f58:	f003 fcd8 	bl	800590c <HAL_ADC_Start_DMA>
}
 8001f5c:	bf00      	nop
 8001f5e:	3708      	adds	r7, #8
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	2000a1f4 	.word	0x2000a1f4

08001f68 <_ZN10LineSensor17storeSensorValuesEv>:

void LineSensor::storeSensorValues()
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b085      	sub	sp, #20
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
	static uint8_t cnt = 0;

	for(int i = 0; i < AD_DATA_SIZE; i++){
 8001f70:	2300      	movs	r3, #0
 8001f72:	60fb      	str	r3, [r7, #12]
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2b0d      	cmp	r3, #13
 8001f78:	dc2f      	bgt.n	8001fda <_ZN10LineSensor17storeSensorValuesEv+0x72>
		store_vals_[cnt][i] = sensor_coefficient_[i] * (analog_val_[i] - offset_values_[i]) ;
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	3392      	adds	r3, #146	; 0x92
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	4413      	add	r3, r2
 8001f84:	3304      	adds	r3, #4
 8001f86:	ed93 7a00 	vldr	s14, [r3]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	68fa      	ldr	r2, [r7, #12]
 8001f8e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001f92:	ee07 3a90 	vmov	s15, r3
 8001f96:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	33a0      	adds	r3, #160	; 0xa0
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	4413      	add	r3, r2
 8001fa4:	3304      	adds	r3, #4
 8001fa6:	edd3 7a00 	vldr	s15, [r3]
 8001faa:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001fae:	4b14      	ldr	r3, [pc, #80]	; (8002000 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	460b      	mov	r3, r1
 8001fbc:	00db      	lsls	r3, r3, #3
 8001fbe:	1a5b      	subs	r3, r3, r1
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	68f9      	ldr	r1, [r7, #12]
 8001fc4:	440b      	add	r3, r1
 8001fc6:	3306      	adds	r3, #6
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	4413      	add	r3, r2
 8001fcc:	3304      	adds	r3, #4
 8001fce:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < AD_DATA_SIZE; i++){
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	60fb      	str	r3, [r7, #12]
 8001fd8:	e7cc      	b.n	8001f74 <_ZN10LineSensor17storeSensorValuesEv+0xc>
		//store_vals_[cnt][i] = float(analog_val_[i]) ;
	}

	cnt++;
 8001fda:	4b09      	ldr	r3, [pc, #36]	; (8002000 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	3301      	adds	r3, #1
 8001fe0:	b2da      	uxtb	r2, r3
 8001fe2:	4b07      	ldr	r3, [pc, #28]	; (8002000 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8001fe4:	701a      	strb	r2, [r3, #0]
	if(cnt >= 10) cnt = 0;
 8001fe6:	4b06      	ldr	r3, [pc, #24]	; (8002000 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	2b09      	cmp	r3, #9
 8001fec:	d902      	bls.n	8001ff4 <_ZN10LineSensor17storeSensorValuesEv+0x8c>
 8001fee:	4b04      	ldr	r3, [pc, #16]	; (8002000 <_ZN10LineSensor17storeSensorValuesEv+0x98>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	701a      	strb	r2, [r3, #0]


}
 8001ff4:	bf00      	nop
 8001ff6:	3714      	adds	r7, #20
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr
 8002000:	20000204 	.word	0x20000204

08002004 <_ZN10LineSensor18updateSensorValuesEv>:
void LineSensor::updateSensorValues()
{
 8002004:	b490      	push	{r4, r7}
 8002006:	b08e      	sub	sp, #56	; 0x38
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
	float temp_val[10];

	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 800200c:	2300      	movs	r3, #0
 800200e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002012:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002016:	2b0d      	cmp	r3, #13
 8002018:	f200 8087 	bhi.w	800212a <_ZN10LineSensor18updateSensorValuesEv+0x126>
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 800201c:	2300      	movs	r3, #0
 800201e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002022:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8002026:	2b09      	cmp	r3, #9
 8002028:	d81c      	bhi.n	8002064 <_ZN10LineSensor18updateSensorValuesEv+0x60>
			temp_val[store_cnt] = store_vals_[store_cnt][ad_cnt];
 800202a:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800202e:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 8002032:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	4613      	mov	r3, r2
 800203a:	00db      	lsls	r3, r3, #3
 800203c:	1a9b      	subs	r3, r3, r2
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	4423      	add	r3, r4
 8002042:	3306      	adds	r3, #6
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	4403      	add	r3, r0
 8002048:	3304      	adds	r3, #4
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	008b      	lsls	r3, r1, #2
 800204e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8002052:	440b      	add	r3, r1
 8002054:	3b30      	subs	r3, #48	; 0x30
 8002056:	601a      	str	r2, [r3, #0]
		for(uint8_t store_cnt = 0; store_cnt < 10; store_cnt++){
 8002058:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800205c:	3301      	adds	r3, #1
 800205e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8002062:	e7de      	b.n	8002022 <_ZN10LineSensor18updateSensorValuesEv+0x1e>
		}

		//std::sort(temp_val, temp_val + AD_DATA_SIZE);
		// sort
		for(uint8_t i = 0; i < 10; i++){
 8002064:	2300      	movs	r3, #0
 8002066:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800206a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800206e:	2b09      	cmp	r3, #9
 8002070:	d84d      	bhi.n	800210e <_ZN10LineSensor18updateSensorValuesEv+0x10a>
			for (uint8_t j = i+1; j < 10; j++) {
 8002072:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002076:	3301      	adds	r3, #1
 8002078:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 800207c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002080:	2b09      	cmp	r3, #9
 8002082:	d83e      	bhi.n	8002102 <_ZN10LineSensor18updateSensorValuesEv+0xfe>
				if(temp_val[i] < temp_val[j]){
 8002084:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800208e:	4413      	add	r3, r2
 8002090:	3b30      	subs	r3, #48	; 0x30
 8002092:	ed93 7a00 	vldr	s14, [r3]
 8002096:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80020a0:	4413      	add	r3, r2
 80020a2:	3b30      	subs	r3, #48	; 0x30
 80020a4:	edd3 7a00 	vldr	s15, [r3]
 80020a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020b0:	d521      	bpl.n	80020f6 <_ZN10LineSensor18updateSensorValuesEv+0xf2>
					float tmp = temp_val[j];
 80020b2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80020bc:	4413      	add	r3, r2
 80020be:	3b30      	subs	r3, #48	; 0x30
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	633b      	str	r3, [r7, #48]	; 0x30
					temp_val[j] = temp_val[i];
 80020c4:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 80020c8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80020cc:	0092      	lsls	r2, r2, #2
 80020ce:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80020d2:	440a      	add	r2, r1
 80020d4:	3a30      	subs	r2, #48	; 0x30
 80020d6:	6812      	ldr	r2, [r2, #0]
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80020de:	440b      	add	r3, r1
 80020e0:	3b30      	subs	r3, #48	; 0x30
 80020e2:	601a      	str	r2, [r3, #0]
					temp_val[i] = tmp;
 80020e4:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80020ee:	4413      	add	r3, r2
 80020f0:	3b30      	subs	r3, #48	; 0x30
 80020f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80020f4:	601a      	str	r2, [r3, #0]
			for (uint8_t j = i+1; j < 10; j++) {
 80020f6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80020fa:	3301      	adds	r3, #1
 80020fc:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8002100:	e7bc      	b.n	800207c <_ZN10LineSensor18updateSensorValuesEv+0x78>
		for(uint8_t i = 0; i < 10; i++){
 8002102:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002106:	3301      	adds	r3, #1
 8002108:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800210c:	e7ad      	b.n	800206a <_ZN10LineSensor18updateSensorValuesEv+0x66>
				}
			}
		}

		sensor[ad_cnt] = temp_val[5];
 800210e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002112:	69fa      	ldr	r2, [r7, #28]
 8002114:	6879      	ldr	r1, [r7, #4]
 8002116:	33b0      	adds	r3, #176	; 0xb0
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	440b      	add	r3, r1
 800211c:	601a      	str	r2, [r3, #0]
	for(uint8_t ad_cnt = 0; ad_cnt < AD_DATA_SIZE; ad_cnt++){
 800211e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002122:	3301      	adds	r3, #1
 8002124:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002128:	e773      	b.n	8002012 <_ZN10LineSensor18updateSensorValuesEv+0xe>
	}
}
 800212a:	bf00      	nop
 800212c:	3738      	adds	r7, #56	; 0x38
 800212e:	46bd      	mov	sp, r7
 8002130:	bc90      	pop	{r4, r7}
 8002132:	4770      	bx	lr

08002134 <_ZN10LineSensor11calibrationEv>:

void LineSensor::calibration()
{
 8002134:	b590      	push	{r4, r7, lr}
 8002136:	b0a9      	sub	sp, #164	; 0xa4
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
	HAL_Delay(100);
 800213c:	2064      	movs	r0, #100	; 0x64
 800213e:	f003 fb7f 	bl	8005840 <HAL_Delay>

	float max_values[AD_DATA_SIZE];
	float min_values[AD_DATA_SIZE];

	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002142:	2300      	movs	r3, #0
 8002144:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 8002148:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800214c:	2b0d      	cmp	r3, #13
 800214e:	d823      	bhi.n	8002198 <_ZN10LineSensor11calibrationEv+0x64>
		max_values[i] = sensor[i];
 8002150:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 8002154:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002158:	6879      	ldr	r1, [r7, #4]
 800215a:	32b0      	adds	r2, #176	; 0xb0
 800215c:	0092      	lsls	r2, r2, #2
 800215e:	440a      	add	r2, r1
 8002160:	6812      	ldr	r2, [r2, #0]
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8002168:	440b      	add	r3, r1
 800216a:	3b60      	subs	r3, #96	; 0x60
 800216c:	601a      	str	r2, [r3, #0]
		min_values[i] = sensor[i];
 800216e:	f8b7 209e 	ldrh.w	r2, [r7, #158]	; 0x9e
 8002172:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002176:	6879      	ldr	r1, [r7, #4]
 8002178:	32b0      	adds	r2, #176	; 0xb0
 800217a:	0092      	lsls	r2, r2, #2
 800217c:	440a      	add	r2, r1
 800217e:	6812      	ldr	r2, [r2, #0]
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8002186:	440b      	add	r3, r1
 8002188:	3b98      	subs	r3, #152	; 0x98
 800218a:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 800218c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8002190:	3301      	adds	r3, #1
 8002192:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
 8002196:	e7d7      	b.n	8002148 <_ZN10LineSensor11calibrationEv+0x14>
	}

	while(joy_stick_.getValue() != JOY_C){
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f203 23bd 	addw	r3, r3, #701	; 0x2bd
 800219e:	4618      	mov	r0, r3
 80021a0:	f7ff fd12 	bl	8001bc8 <_ZN8JoyStick8getValueEv>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	bf14      	ite	ne
 80021aa:	2301      	movne	r3, #1
 80021ac:	2300      	moveq	r3, #0
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d079      	beq.n	80022a8 <_ZN10LineSensor11calibrationEv+0x174>

		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80021b4:	2300      	movs	r3, #0
 80021b6:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 80021ba:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80021be:	2b0d      	cmp	r3, #13
 80021c0:	d850      	bhi.n	8002264 <_ZN10LineSensor11calibrationEv+0x130>
			if(max_values[i] < sensor[i]){
 80021c2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 80021cc:	4413      	add	r3, r2
 80021ce:	3b60      	subs	r3, #96	; 0x60
 80021d0:	ed93 7a00 	vldr	s14, [r3]
 80021d4:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	33b0      	adds	r3, #176	; 0xb0
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	4413      	add	r3, r2
 80021e0:	edd3 7a00 	vldr	s15, [r3]
 80021e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021ec:	d50f      	bpl.n	800220e <_ZN10LineSensor11calibrationEv+0xda>
				max_values[i] = sensor[i];
 80021ee:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 80021f2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80021f6:	6879      	ldr	r1, [r7, #4]
 80021f8:	32b0      	adds	r2, #176	; 0xb0
 80021fa:	0092      	lsls	r2, r2, #2
 80021fc:	440a      	add	r2, r1
 80021fe:	6812      	ldr	r2, [r2, #0]
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8002206:	440b      	add	r3, r1
 8002208:	3b60      	subs	r3, #96	; 0x60
 800220a:	601a      	str	r2, [r3, #0]
 800220c:	e024      	b.n	8002258 <_ZN10LineSensor11calibrationEv+0x124>
			}
			else if(min_values[i] > sensor[i]){
 800220e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8002218:	4413      	add	r3, r2
 800221a:	3b98      	subs	r3, #152	; 0x98
 800221c:	ed93 7a00 	vldr	s14, [r3]
 8002220:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	33b0      	adds	r3, #176	; 0xb0
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	4413      	add	r3, r2
 800222c:	edd3 7a00 	vldr	s15, [r3]
 8002230:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002238:	dd0e      	ble.n	8002258 <_ZN10LineSensor11calibrationEv+0x124>
				min_values[i] = sensor[i];
 800223a:	f8b7 209c 	ldrh.w	r2, [r7, #156]	; 0x9c
 800223e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8002242:	6879      	ldr	r1, [r7, #4]
 8002244:	32b0      	adds	r2, #176	; 0xb0
 8002246:	0092      	lsls	r2, r2, #2
 8002248:	440a      	add	r2, r1
 800224a:	6812      	ldr	r2, [r2, #0]
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8002252:	440b      	add	r3, r1
 8002254:	3b98      	subs	r3, #152	; 0x98
 8002256:	601a      	str	r2, [r3, #0]
		for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002258:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800225c:	3301      	adds	r3, #1
 800225e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
 8002262:	e7aa      	b.n	80021ba <_ZN10LineSensor11calibrationEv+0x86>
			}
		}

		if(rotary_switch_.getValue() == 0){
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f203 23be 	addw	r3, r3, #702	; 0x2be
 800226a:	4618      	mov	r0, r3
 800226c:	f000 fdca 	bl	8002e04 <_ZN12RotarySwitch8getValueEv>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	bf0c      	ite	eq
 8002276:	2301      	moveq	r3, #1
 8002278:	2300      	movne	r3, #0
 800227a:	b2db      	uxtb	r3, r3
 800227c:	2b00      	cmp	r3, #0
 800227e:	d009      	beq.n	8002294 <_ZN10LineSensor11calibrationEv+0x160>
			led_.LR(-1, 1);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 8002286:	2201      	movs	r2, #1
 8002288:	f04f 31ff 	mov.w	r1, #4294967295
 800228c:	4618      	mov	r0, r3
 800228e:	f7ff fdbb 	bl	8001e08 <_ZN3LED2LREaa>
 8002292:	e781      	b.n	8002198 <_ZN10LineSensor11calibrationEv+0x64>

		}
		else{
			led_.LR(-1, 0);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	f503 732f 	add.w	r3, r3, #700	; 0x2bc
 800229a:	2200      	movs	r2, #0
 800229c:	f04f 31ff 	mov.w	r1, #4294967295
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7ff fdb1 	bl	8001e08 <_ZN3LED2LREaa>
	while(joy_stick_.getValue() != JOY_C){
 80022a6:	e777      	b.n	8002198 <_ZN10LineSensor11calibrationEv+0x64>

		}
	}

	for(const auto &m : max_values){
 80022a8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80022ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80022b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80022b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022bc:	3338      	adds	r3, #56	; 0x38
 80022be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80022c2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80022c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80022ca:	429a      	cmp	r2, r3
 80022cc:	d016      	beq.n	80022fc <_ZN10LineSensor11calibrationEv+0x1c8>
 80022ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80022d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		printf("%f, ", m);
 80022d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4618      	mov	r0, r3
 80022de:	f7fe f94b 	bl	8000578 <__aeabi_f2d>
 80022e2:	4603      	mov	r3, r0
 80022e4:	460c      	mov	r4, r1
 80022e6:	461a      	mov	r2, r3
 80022e8:	4623      	mov	r3, r4
 80022ea:	4842      	ldr	r0, [pc, #264]	; (80023f4 <_ZN10LineSensor11calibrationEv+0x2c0>)
 80022ec:	f010 fc0a 	bl	8012b04 <iprintf>
	for(const auto &m : max_values){
 80022f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80022f4:	3304      	adds	r3, #4
 80022f6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80022fa:	e7e2      	b.n	80022c2 <_ZN10LineSensor11calibrationEv+0x18e>
	}
		printf("\n");
 80022fc:	200a      	movs	r0, #10
 80022fe:	f010 fc19 	bl	8012b34 <putchar>
	for(const auto &m : min_values){
 8002302:	f107 0308 	add.w	r3, r7, #8
 8002306:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800230a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800230e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002312:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002316:	3338      	adds	r3, #56	; 0x38
 8002318:	67fb      	str	r3, [r7, #124]	; 0x7c
 800231a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800231e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002320:	429a      	cmp	r2, r3
 8002322:	d014      	beq.n	800234e <_ZN10LineSensor11calibrationEv+0x21a>
 8002324:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002328:	67bb      	str	r3, [r7, #120]	; 0x78
		printf("%f, ", m);
 800232a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4618      	mov	r0, r3
 8002330:	f7fe f922 	bl	8000578 <__aeabi_f2d>
 8002334:	4603      	mov	r3, r0
 8002336:	460c      	mov	r4, r1
 8002338:	461a      	mov	r2, r3
 800233a:	4623      	mov	r3, r4
 800233c:	482d      	ldr	r0, [pc, #180]	; (80023f4 <_ZN10LineSensor11calibrationEv+0x2c0>)
 800233e:	f010 fbe1 	bl	8012b04 <iprintf>
	for(const auto &m : min_values){
 8002342:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002346:	3304      	adds	r3, #4
 8002348:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800234c:	e7e5      	b.n	800231a <_ZN10LineSensor11calibrationEv+0x1e6>
	}
		printf("\n");
 800234e:	200a      	movs	r0, #10
 8002350:	f010 fbf0 	bl	8012b34 <putchar>


	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 8002354:	2300      	movs	r3, #0
 8002356:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 800235a:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800235e:	2b0d      	cmp	r3, #13
 8002360:	d826      	bhi.n	80023b0 <_ZN10LineSensor11calibrationEv+0x27c>
		sensor_coefficient_[i] = 1000 / (max_values[i] - min_values[i]);
 8002362:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800236c:	4413      	add	r3, r2
 800236e:	3b60      	subs	r3, #96	; 0x60
 8002370:	ed93 7a00 	vldr	s14, [r3]
 8002374:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 800237e:	4413      	add	r3, r2
 8002380:	3b98      	subs	r3, #152	; 0x98
 8002382:	edd3 7a00 	vldr	s15, [r3]
 8002386:	ee37 7a67 	vsub.f32	s14, s14, s15
 800238a:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800238e:	eddf 6a1a 	vldr	s13, [pc, #104]	; 80023f8 <_ZN10LineSensor11calibrationEv+0x2c4>
 8002392:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	3392      	adds	r3, #146	; 0x92
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	4413      	add	r3, r2
 800239e:	3304      	adds	r3, #4
 80023a0:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80023a4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80023a8:	3301      	adds	r3, #1
 80023aa:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
 80023ae:	e7d4      	b.n	800235a <_ZN10LineSensor11calibrationEv+0x226>
	}
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80023b0:	2300      	movs	r3, #0
 80023b2:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 80023b6:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 80023ba:	2b0d      	cmp	r3, #13
 80023bc:	d815      	bhi.n	80023ea <_ZN10LineSensor11calibrationEv+0x2b6>
		offset_values_[i] = min_values[i];
 80023be:	f8b7 2090 	ldrh.w	r2, [r7, #144]	; 0x90
 80023c2:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 80023c6:	0092      	lsls	r2, r2, #2
 80023c8:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 80023cc:	440a      	add	r2, r1
 80023ce:	3a98      	subs	r2, #152	; 0x98
 80023d0:	6812      	ldr	r2, [r2, #0]
 80023d2:	6879      	ldr	r1, [r7, #4]
 80023d4:	33a0      	adds	r3, #160	; 0xa0
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	440b      	add	r3, r1
 80023da:	3304      	adds	r3, #4
 80023dc:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < AD_DATA_SIZE; i++){
 80023de:	f8b7 3090 	ldrh.w	r3, [r7, #144]	; 0x90
 80023e2:	3301      	adds	r3, #1
 80023e4:	f8a7 3090 	strh.w	r3, [r7, #144]	; 0x90
 80023e8:	e7e5      	b.n	80023b6 <_ZN10LineSensor11calibrationEv+0x282>
	}


}
 80023ea:	bf00      	nop
 80023ec:	37a4      	adds	r7, #164	; 0xa4
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd90      	pop	{r4, r7, pc}
 80023f2:	bf00      	nop
 80023f4:	08016d10 	.word	0x08016d10
 80023f8:	447a0000 	.word	0x447a0000

080023fc <_ZN10LineSensor13emergencyStopEv>:
	printf("%f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f, %f\n", sensor[0], sensor[1], sensor[2], sensor[3], sensor[4], sensor[5], sensor[6], sensor[7], sensor[8], sensor[9], sensor[10], sensor[11], sensor[12], sensor[13]);

}

bool LineSensor::emergencyStop()
{
 80023fc:	b480      	push	{r7}
 80023fe:	b089      	sub	sp, #36	; 0x24
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
	uint8_t cnt = 0;
 8002404:	2300      	movs	r3, #0
 8002406:	77fb      	strb	r3, [r7, #31]

	for(const auto & s : sensor){
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f503 7330 	add.w	r3, r3, #704	; 0x2c0
 800240e:	613b      	str	r3, [r7, #16]
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	61bb      	str	r3, [r7, #24]
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	3338      	adds	r3, #56	; 0x38
 8002418:	60fb      	str	r3, [r7, #12]
 800241a:	69ba      	ldr	r2, [r7, #24]
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	429a      	cmp	r2, r3
 8002420:	d012      	beq.n	8002448 <_ZN10LineSensor13emergencyStopEv+0x4c>
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	60bb      	str	r3, [r7, #8]
		if(s >= 600) cnt++;
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	edd3 7a00 	vldr	s15, [r3]
 800242c:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002468 <_ZN10LineSensor13emergencyStopEv+0x6c>
 8002430:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002438:	db02      	blt.n	8002440 <_ZN10LineSensor13emergencyStopEv+0x44>
 800243a:	7ffb      	ldrb	r3, [r7, #31]
 800243c:	3301      	adds	r3, #1
 800243e:	77fb      	strb	r3, [r7, #31]
	for(const auto & s : sensor){
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	3304      	adds	r3, #4
 8002444:	61bb      	str	r3, [r7, #24]
 8002446:	e7e8      	b.n	800241a <_ZN10LineSensor13emergencyStopEv+0x1e>
	}

	bool flag;
	if(cnt >= AD_DATA_SIZE) flag = true;
 8002448:	7ffb      	ldrb	r3, [r7, #31]
 800244a:	2b0d      	cmp	r3, #13
 800244c:	d902      	bls.n	8002454 <_ZN10LineSensor13emergencyStopEv+0x58>
 800244e:	2301      	movs	r3, #1
 8002450:	75fb      	strb	r3, [r7, #23]
 8002452:	e001      	b.n	8002458 <_ZN10LineSensor13emergencyStopEv+0x5c>
	else flag = false;
 8002454:	2300      	movs	r3, #0
 8002456:	75fb      	strb	r3, [r7, #23]

	return flag;
 8002458:	7dfb      	ldrb	r3, [r7, #23]

}
 800245a:	4618      	mov	r0, r3
 800245c:	3724      	adds	r7, #36	; 0x24
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	44160000 	.word	0x44160000

0800246c <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrl>:
float monitor_delta_theta;
float monitor_steering_angle;
float monitor_target_omega;
float monitor_r;

LineTrace::LineTrace(Motor *motor, LineSensor *line_sensor, VelocityCtrl *velocity_ctrl) : kp_(0), kd_(0), ki_(0), excution_flag_(false), normal_ratio_(0){
 800246c:	b480      	push	{r7}
 800246e:	b085      	sub	sp, #20
 8002470:	af00      	add	r7, sp, #0
 8002472:	60f8      	str	r0, [r7, #12]
 8002474:	60b9      	str	r1, [r7, #8]
 8002476:	607a      	str	r2, [r7, #4]
 8002478:	603b      	str	r3, [r7, #0]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	f04f 0200 	mov.w	r2, #0
 8002480:	611a      	str	r2, [r3, #16]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	f04f 0200 	mov.w	r2, #0
 8002488:	615a      	str	r2, [r3, #20]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	f04f 0200 	mov.w	r2, #0
 8002490:	619a      	str	r2, [r3, #24]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2200      	movs	r2, #0
 8002496:	771a      	strb	r2, [r3, #28]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f04f 0200 	mov.w	r2, #0
 800249e:	621a      	str	r2, [r3, #32]
	motor_ = motor;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	68ba      	ldr	r2, [r7, #8]
 80024a4:	601a      	str	r2, [r3, #0]
	line_sensor_ = line_sensor;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	683a      	ldr	r2, [r7, #0]
 80024b0:	609a      	str	r2, [r3, #8]
}
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	4618      	mov	r0, r3
 80024b6:	3714      	adds	r7, #20
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <_ZN9LineTrace9calcErrorEv>:

// --------private--------- //
float LineTrace::calcError()
{
 80024c0:	b480      	push	{r7}
 80024c2:	b085      	sub	sp, #20
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	ed93 7ab0 	vldr	s14, [r3, #704]	; 0x2c0
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	edd3 7ab1 	vldr	s15, [r3, #708]	; 0x2c4
 80024d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	edd3 7ab2 	vldr	s15, [r3, #712]	; 0x2c8
 80024e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	edd3 7ab3 	vldr	s15, [r3, #716]	; 0x2cc
 80024f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	edd3 7ab4 	vldr	s15, [r3, #720]	; 0x2d0
 80024fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	edd3 7ab5 	vldr	s15, [r3, #724]	; 0x2d4
 8002508:	ee37 7a27 	vadd.f32	s14, s14, s15
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	edd3 7ab6 	vldr	s15, [r3, #728]	; 0x2d8
 8002514:	ee37 7a27 	vadd.f32	s14, s14, s15
			- (line_sensor_->sensor[7] + line_sensor_->sensor[8] + line_sensor_->sensor[9] + line_sensor_->sensor[10] + line_sensor_->sensor[11] + line_sensor_->sensor[12] + line_sensor_->sensor[13]);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	edd3 6ab7 	vldr	s13, [r3, #732]	; 0x2dc
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	edd3 7ab8 	vldr	s15, [r3, #736]	; 0x2e0
 8002528:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	edd3 7ab9 	vldr	s15, [r3, #740]	; 0x2e4
 8002534:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
 8002540:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	edd3 7abb 	vldr	s15, [r3, #748]	; 0x2ec
 800254c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	edd3 7abc 	vldr	s15, [r3, #752]	; 0x2f0
 8002558:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	edd3 7abd 	vldr	s15, [r3, #756]	; 0x2f4
 8002564:	ee76 7aa7 	vadd.f32	s15, s13, s15
	float diff = (line_sensor_->sensor[0] + line_sensor_->sensor[1] + line_sensor_->sensor[2] + line_sensor_->sensor[3] + line_sensor_->sensor[4] + line_sensor_->sensor[5] + line_sensor_->sensor[6])
 8002568:	ee77 7a67 	vsub.f32	s15, s14, s15
 800256c:	edc7 7a03 	vstr	s15, [r7, #12]

	return diff;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	ee07 3a90 	vmov	s15, r3

}
 8002576:	eeb0 0a67 	vmov.f32	s0, s15
 800257a:	3714      	adds	r7, #20
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr
 8002584:	0000      	movs	r0, r0
	...

08002588 <_ZN9LineTrace3pidEv>:
	float phi = atan2(norm_l - norm_r, 1.0);
	delta_theta = (phi * ANGLE_BETWEEN_SENSORS/2) / (PI / 4);
}

void LineTrace::pid()
{
 8002588:	b5f0      	push	{r4, r5, r6, r7, lr}
 800258a:	b089      	sub	sp, #36	; 0x24
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
	float diff = calcError();
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f7ff ff95 	bl	80024c0 <_ZN9LineTrace9calcErrorEv>
 8002596:	ed87 0a07 	vstr	s0, [r7, #28]
	static float pre_diff = 0;
	float p, d;
	static float i;

	p = kp_ * diff;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	edd3 7a04 	vldr	s15, [r3, #16]
 80025a0:	ed97 7a07 	vldr	s14, [r7, #28]
 80025a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025a8:	edc7 7a06 	vstr	s15, [r7, #24]
	d = kd_ * (diff - pre_diff) / DELTA_T;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	ed93 7a05 	vldr	s14, [r3, #20]
 80025b2:	4b41      	ldr	r3, [pc, #260]	; (80026b8 <_ZN9LineTrace3pidEv+0x130>)
 80025b4:	edd3 7a00 	vldr	s15, [r3]
 80025b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80025bc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80025c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025c4:	ee17 0a90 	vmov	r0, s15
 80025c8:	f7fd ffd6 	bl	8000578 <__aeabi_f2d>
 80025cc:	a338      	add	r3, pc, #224	; (adr r3, 80026b0 <_ZN9LineTrace3pidEv+0x128>)
 80025ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025d2:	f7fe f953 	bl	800087c <__aeabi_ddiv>
 80025d6:	4603      	mov	r3, r0
 80025d8:	460c      	mov	r4, r1
 80025da:	4618      	mov	r0, r3
 80025dc:	4621      	mov	r1, r4
 80025de:	f7fe fb1b 	bl	8000c18 <__aeabi_d2f>
 80025e2:	4603      	mov	r3, r0
 80025e4:	617b      	str	r3, [r7, #20]
	i += ki_ * diff * DELTA_T;
 80025e6:	4b35      	ldr	r3, [pc, #212]	; (80026bc <_ZN9LineTrace3pidEv+0x134>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7fd ffc4 	bl	8000578 <__aeabi_f2d>
 80025f0:	4604      	mov	r4, r0
 80025f2:	460d      	mov	r5, r1
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	ed93 7a06 	vldr	s14, [r3, #24]
 80025fa:	edd7 7a07 	vldr	s15, [r7, #28]
 80025fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002602:	ee17 0a90 	vmov	r0, s15
 8002606:	f7fd ffb7 	bl	8000578 <__aeabi_f2d>
 800260a:	a329      	add	r3, pc, #164	; (adr r3, 80026b0 <_ZN9LineTrace3pidEv+0x128>)
 800260c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002610:	f7fe f80a 	bl	8000628 <__aeabi_dmul>
 8002614:	4602      	mov	r2, r0
 8002616:	460b      	mov	r3, r1
 8002618:	4620      	mov	r0, r4
 800261a:	4629      	mov	r1, r5
 800261c:	f7fd fe4e 	bl	80002bc <__adddf3>
 8002620:	4603      	mov	r3, r0
 8002622:	460c      	mov	r4, r1
 8002624:	4618      	mov	r0, r3
 8002626:	4621      	mov	r1, r4
 8002628:	f7fe faf6 	bl	8000c18 <__aeabi_d2f>
 800262c:	4602      	mov	r2, r0
 800262e:	4b23      	ldr	r3, [pc, #140]	; (80026bc <_ZN9LineTrace3pidEv+0x134>)
 8002630:	601a      	str	r2, [r3, #0]

	float left_ratio = normal_ratio_ + (p + d + i);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	ed93 7a08 	vldr	s14, [r3, #32]
 8002638:	edd7 6a06 	vldr	s13, [r7, #24]
 800263c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002640:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002644:	4b1d      	ldr	r3, [pc, #116]	; (80026bc <_ZN9LineTrace3pidEv+0x134>)
 8002646:	edd3 7a00 	vldr	s15, [r3]
 800264a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800264e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002652:	edc7 7a04 	vstr	s15, [r7, #16]
	float right_ratio = normal_ratio_ - (p + d + i);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	ed93 7a08 	vldr	s14, [r3, #32]
 800265c:	edd7 6a06 	vldr	s13, [r7, #24]
 8002660:	edd7 7a05 	vldr	s15, [r7, #20]
 8002664:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002668:	4b14      	ldr	r3, [pc, #80]	; (80026bc <_ZN9LineTrace3pidEv+0x134>)
 800266a:	edd3 7a00 	vldr	s15, [r3]
 800266e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002672:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002676:	edc7 7a03 	vstr	s15, [r7, #12]

	motor_->setRatio(left_ratio, right_ratio);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681c      	ldr	r4, [r3, #0]
 800267e:	6938      	ldr	r0, [r7, #16]
 8002680:	f7fd ff7a 	bl	8000578 <__aeabi_f2d>
 8002684:	4605      	mov	r5, r0
 8002686:	460e      	mov	r6, r1
 8002688:	68f8      	ldr	r0, [r7, #12]
 800268a:	f7fd ff75 	bl	8000578 <__aeabi_f2d>
 800268e:	4602      	mov	r2, r0
 8002690:	460b      	mov	r3, r1
 8002692:	ec43 2b11 	vmov	d1, r2, r3
 8002696:	ec46 5b10 	vmov	d0, r5, r6
 800269a:	4620      	mov	r0, r4
 800269c:	f000 f9e0 	bl	8002a60 <_ZN5Motor8setRatioEdd>

	pre_diff = diff;
 80026a0:	4a05      	ldr	r2, [pc, #20]	; (80026b8 <_ZN9LineTrace3pidEv+0x130>)
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	6013      	str	r3, [r2, #0]

}
 80026a6:	bf00      	nop
 80026a8:	3724      	adds	r7, #36	; 0x24
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80026ae:	bf00      	nop
 80026b0:	d2f1a9fc 	.word	0xd2f1a9fc
 80026b4:	3f50624d 	.word	0x3f50624d
 80026b8:	20000208 	.word	0x20000208
 80026bc:	2000020c 	.word	0x2000020c

080026c0 <_ZN9LineTrace7setGainEfff>:
{

}

void LineTrace::setGain(float kp, float kd, float ki)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b085      	sub	sp, #20
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	ed87 0a02 	vstr	s0, [r7, #8]
 80026cc:	edc7 0a01 	vstr	s1, [r7, #4]
 80026d0:	ed87 1a00 	vstr	s2, [r7]
	kp_ = kp;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	68ba      	ldr	r2, [r7, #8]
 80026d8:	611a      	str	r2, [r3, #16]
	kd_ = kd;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	615a      	str	r2, [r3, #20]
	ki_ = ki;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	683a      	ldr	r2, [r7, #0]
 80026e4:	619a      	str	r2, [r3, #24]
}
 80026e6:	bf00      	nop
 80026e8:	3714      	adds	r7, #20
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr

080026f2 <_ZN9LineTrace14setNormalRatioEf>:

void LineTrace::setNormalRatio(float ratio)
{
 80026f2:	b480      	push	{r7}
 80026f4:	b083      	sub	sp, #12
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
 80026fa:	ed87 0a00 	vstr	s0, [r7]
	normal_ratio_ = ratio;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	683a      	ldr	r2, [r7, #0]
 8002702:	621a      	str	r2, [r3, #32]
}
 8002704:	bf00      	nop
 8002706:	370c      	adds	r7, #12
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr

08002710 <_ZN9LineTrace17setTargetVelocityEf>:

void LineTrace::setTargetVelocity(float velocity)
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	ed87 0a00 	vstr	s0, [r7]
	target_velocity_ = velocity;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	683a      	ldr	r2, [r7, #0]
 8002720:	659a      	str	r2, [r3, #88]	; 0x58
}
 8002722:	bf00      	nop
 8002724:	370c      	adds	r7, #12
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
	...

08002730 <_ZN9LineTrace4flipEv>:

void LineTrace::flip()
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]

	if(excution_flag_ == true){
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	7f1b      	ldrb	r3, [r3, #28]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d002      	beq.n	8002746 <_ZN9LineTrace4flipEv+0x16>
		pid();
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f7ff ff21 	bl	8002588 <_ZN9LineTrace3pidEv>
		//steeringAngleTrace();
	}
	if(line_sensor_->emergencyStop() == true){
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	4618      	mov	r0, r3
 800274c:	f7ff fe56 	bl	80023fc <_ZN10LineSensor13emergencyStopEv>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d011      	beq.n	800277a <_ZN9LineTrace4flipEv+0x4a>
		motor_->setRatio(0, 0);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	ed9f 1b0f 	vldr	d1, [pc, #60]	; 8002798 <_ZN9LineTrace4flipEv+0x68>
 800275e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8002798 <_ZN9LineTrace4flipEv+0x68>
 8002762:	4618      	mov	r0, r3
 8002764:	f000 f97c 	bl	8002a60 <_ZN5Motor8setRatioEdd>
		led_.LR(1, -1);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	330c      	adds	r3, #12
 800276c:	f04f 32ff 	mov.w	r2, #4294967295
 8002770:	2101      	movs	r1, #1
 8002772:	4618      	mov	r0, r3
 8002774:	f7ff fb48 	bl	8001e08 <_ZN3LED2LREaa>
	else{
		led_.LR(0, -1);

	}

}
 8002778:	e007      	b.n	800278a <_ZN9LineTrace4flipEv+0x5a>
		led_.LR(0, -1);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	330c      	adds	r3, #12
 800277e:	f04f 32ff 	mov.w	r2, #4294967295
 8002782:	2100      	movs	r1, #0
 8002784:	4618      	mov	r0, r3
 8002786:	f7ff fb3f 	bl	8001e08 <_ZN3LED2LREaa>
}
 800278a:	bf00      	nop
 800278c:	3708      	adds	r7, #8
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	f3af 8000 	nop.w
	...

080027a0 <_ZN9LineTrace5startEv>:

void LineTrace::start()
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2201      	movs	r2, #1
 80027ac:	771a      	strb	r2, [r3, #28]
}
 80027ae:	bf00      	nop
 80027b0:	370c      	adds	r7, #12
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr
 80027ba:	0000      	movs	r0, r0
 80027bc:	0000      	movs	r0, r0
	...

080027c0 <_ZN9LineTrace4stopEv>:

void LineTrace::stop()
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	771a      	strb	r2, [r3, #28]
	motor_->setRatio(0, 0);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	ed9f 1b05 	vldr	d1, [pc, #20]	; 80027e8 <_ZN9LineTrace4stopEv+0x28>
 80027d6:	ed9f 0b04 	vldr	d0, [pc, #16]	; 80027e8 <_ZN9LineTrace4stopEv+0x28>
 80027da:	4618      	mov	r0, r3
 80027dc:	f000 f940 	bl	8002a60 <_ZN5Motor8setRatioEdd>
}
 80027e0:	bf00      	nop
 80027e2:	3708      	adds	r7, #8
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
	...

080027f0 <_ZN6LoggerC1Ev>:
#include "Logger.hpp"
#include "HAL_SDcard_lib.h"
#include <stdio.h>
#include "Macro.h"

Logger::Logger() : recording_flag_(false), log_index_(0){}
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 80027fe:	3330      	adds	r3, #48	; 0x30
 8002800:	2200      	movs	r2, #0
 8002802:	701a      	strb	r2, [r3, #0]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 800280a:	3332      	adds	r3, #50	; 0x32
 800280c:	2200      	movs	r2, #0
 800280e:	801a      	strh	r2, [r3, #0]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	4618      	mov	r0, r3
 8002814:	370c      	adds	r7, #12
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
	...

08002820 <_ZN6Logger10sdCardInitEv>:

void Logger::sdCardInit()
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b086      	sub	sp, #24
 8002824:	af02      	add	r7, sp, #8
 8002826:	6078      	str	r0, [r7, #4]
	if(sd_mount() == 1){
 8002828:	f7fe ff4e 	bl	80016c8 <sd_mount>
 800282c:	4603      	mov	r3, r0
 800282e:	2b01      	cmp	r3, #1
 8002830:	bf0c      	ite	eq
 8002832:	2301      	moveq	r3, #1
 8002834:	2300      	movne	r3, #0
 8002836:	b2db      	uxtb	r3, r3
 8002838:	2b00      	cmp	r3, #0
 800283a:	d003      	beq.n	8002844 <_ZN6Logger10sdCardInitEv+0x24>
	  printf("mount success\r\n");
 800283c:	4813      	ldr	r0, [pc, #76]	; (800288c <_ZN6Logger10sdCardInitEv+0x6c>)
 800283e:	f010 f9e9 	bl	8012c14 <puts>
 8002842:	e002      	b.n	800284a <_ZN6Logger10sdCardInitEv+0x2a>
	}
	else{
	  printf("mount error\r\n");
 8002844:	4812      	ldr	r0, [pc, #72]	; (8002890 <_ZN6Logger10sdCardInitEv+0x70>)
 8002846:	f010 f9e5 	bl	8012c14 <puts>
	}

	int	data[1];
	int temp[1];

	data[0] = 100;
 800284a:	2364      	movs	r3, #100	; 0x64
 800284c:	60fb      	str	r3, [r7, #12]
	sd_write_array_int("sdio", "write1.txt", DATA_SIZE, data, ADD_WRITE); //write
 800284e:	f107 020c 	add.w	r2, r7, #12
 8002852:	2301      	movs	r3, #1
 8002854:	9300      	str	r3, [sp, #0]
 8002856:	4613      	mov	r3, r2
 8002858:	2201      	movs	r2, #1
 800285a:	490e      	ldr	r1, [pc, #56]	; (8002894 <_ZN6Logger10sdCardInitEv+0x74>)
 800285c:	480e      	ldr	r0, [pc, #56]	; (8002898 <_ZN6Logger10sdCardInitEv+0x78>)
 800285e:	f7fe fe8f 	bl	8001580 <sd_write_array_int>
	sd_read_array_int("sdio", "write1.txt", DATA_SIZE, temp); //read
 8002862:	f107 0308 	add.w	r3, r7, #8
 8002866:	2201      	movs	r2, #1
 8002868:	490a      	ldr	r1, [pc, #40]	; (8002894 <_ZN6Logger10sdCardInitEv+0x74>)
 800286a:	480b      	ldr	r0, [pc, #44]	; (8002898 <_ZN6Logger10sdCardInitEv+0x78>)
 800286c:	f7fe fee6 	bl	800163c <sd_read_array_int>
	sd_write_array_int("sdio", "write2.txt", DATA_SIZE, temp, ADD_WRITE); //write
 8002870:	f107 0208 	add.w	r2, r7, #8
 8002874:	2301      	movs	r3, #1
 8002876:	9300      	str	r3, [sp, #0]
 8002878:	4613      	mov	r3, r2
 800287a:	2201      	movs	r2, #1
 800287c:	4907      	ldr	r1, [pc, #28]	; (800289c <_ZN6Logger10sdCardInitEv+0x7c>)
 800287e:	4806      	ldr	r0, [pc, #24]	; (8002898 <_ZN6Logger10sdCardInitEv+0x78>)
 8002880:	f7fe fe7e 	bl	8001580 <sd_write_array_int>

	//printf("sd write and read success!!\r\n");
	//sd_unmount();
}
 8002884:	bf00      	nop
 8002886:	3710      	adds	r7, #16
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	08016d50 	.word	0x08016d50
 8002890:	08016d60 	.word	0x08016d60
 8002894:	08016d70 	.word	0x08016d70
 8002898:	08016d7c 	.word	0x08016d7c
 800289c:	08016d84 	.word	0x08016d84

080028a0 <_ZN6Logger8storeLogEf>:

	}

}
void Logger::storeLog(float data)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b083      	sub	sp, #12
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	ed87 0a00 	vstr	s0, [r7]

	if(recording_flag_ == true){
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 80028b2:	3330      	adds	r3, #48	; 0x30
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d024      	beq.n	8002904 <_ZN6Logger8storeLogEf+0x64>
		store_data_float_[log_index_] = data;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 80028c0:	3332      	adds	r3, #50	; 0x32
 80028c2:	881b      	ldrh	r3, [r3, #0]
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	4413      	add	r3, r2
 80028ca:	683a      	ldr	r2, [r7, #0]
 80028cc:	601a      	str	r2, [r3, #0]

		log_index_++;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 80028d4:	3332      	adds	r3, #50	; 0x32
 80028d6:	881b      	ldrh	r3, [r3, #0]
 80028d8:	3301      	adds	r3, #1
 80028da:	b29a      	uxth	r2, r3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 80028e2:	3332      	adds	r3, #50	; 0x32
 80028e4:	801a      	strh	r2, [r3, #0]

		if(log_index_ >= LOG_DATA_SIZE) log_index_ = 0;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 80028ec:	3332      	adds	r3, #50	; 0x32
 80028ee:	881b      	ldrh	r3, [r3, #0]
 80028f0:	f241 3287 	movw	r2, #4999	; 0x1387
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d905      	bls.n	8002904 <_ZN6Logger8storeLogEf+0x64>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 80028fe:	3332      	adds	r3, #50	; 0x32
 8002900:	2200      	movs	r2, #0
 8002902:	801a      	strh	r2, [r3, #0]
	}
}
 8002904:	bf00      	nop
 8002906:	370c      	adds	r7, #12
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr

08002910 <_ZN6Logger8saveLogsEPKcS1_>:
{

}

void Logger::saveLogs(const char *folder_name, const char *file_name)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b086      	sub	sp, #24
 8002914:	af02      	add	r7, sp, #8
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	607a      	str	r2, [r7, #4]

	sd_write_array_float(folder_name, file_name, LOG_DATA_SIZE, store_data_float_, OVER_WRITE); //write
 800291c:	68fa      	ldr	r2, [r7, #12]
 800291e:	2300      	movs	r3, #0
 8002920:	9300      	str	r3, [sp, #0]
 8002922:	4613      	mov	r3, r2
 8002924:	f241 3288 	movw	r2, #5000	; 0x1388
 8002928:	6879      	ldr	r1, [r7, #4]
 800292a:	68b8      	ldr	r0, [r7, #8]
 800292c:	f7fe fdc2 	bl	80014b4 <sd_write_array_float>

}
 8002930:	bf00      	nop
 8002932:	3710      	adds	r7, #16
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <_ZN6Logger5startEv>:

	log_index_ = 0;
}

void Logger::start()
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
	recording_flag_ = true;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 8002946:	3330      	adds	r3, #48	; 0x30
 8002948:	2201      	movs	r2, #1
 800294a:	701a      	strb	r2, [r3, #0]
}
 800294c:	bf00      	nop
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr

08002958 <_ZN6Logger4stopEv>:

void Logger::stop()
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
	recording_flag_ = false;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 8002966:	3330      	adds	r3, #48	; 0x30
 8002968:	2200      	movs	r2, #0
 800296a:	701a      	strb	r2, [r3, #0]
}
 800296c:	bf00      	nop
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr

08002978 <_ZN5MotorC1Ev>:

#include "Motor.hpp"
#include "G_variables.h"


Motor::Motor() : temp_left_counter_period_(0), temp_right_counter_period_(0){}
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2200      	movs	r2, #0
 8002984:	801a      	strh	r2, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	805a      	strh	r2, [r3, #2]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	4618      	mov	r0, r3
 8002990:	370c      	adds	r7, #12
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
	...

0800299c <_ZN5Motor4initEv>:

void Motor::init()
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
	//PWM start
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80029a4:	2108      	movs	r1, #8
 80029a6:	4805      	ldr	r0, [pc, #20]	; (80029bc <_ZN5Motor4initEv+0x20>)
 80029a8:	f008 f912 	bl	800abd0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80029ac:	210c      	movs	r1, #12
 80029ae:	4803      	ldr	r0, [pc, #12]	; (80029bc <_ZN5Motor4initEv+0x20>)
 80029b0:	f008 f90e 	bl	800abd0 <HAL_TIM_PWM_Start>

}
 80029b4:	bf00      	nop
 80029b6:	3708      	adds	r7, #8
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	2000a1b4 	.word	0x2000a1b4

080029c0 <_ZN5Motor9motorCtrlEv>:

void Motor::motorCtrl()
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
	uint16_t left_counter_period, right_counter_period;

	if(temp_left_counter_period_ < 0) {
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	da0d      	bge.n	80029ee <_ZN5Motor9motorCtrlEv+0x2e>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 80029d2:	2200      	movs	r2, #0
 80029d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80029d8:	481f      	ldr	r0, [pc, #124]	; (8002a58 <_ZN5Motor9motorCtrlEv+0x98>)
 80029da:	f004 f9c7 	bl	8006d6c <HAL_GPIO_WritePin>
		left_counter_period = -1 * temp_left_counter_period_;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	425b      	negs	r3, r3
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	81fb      	strh	r3, [r7, #14]
 80029ec:	e00a      	b.n	8002a04 <_ZN5Motor9motorCtrlEv+0x44>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_SET);
 80029ee:	2201      	movs	r2, #1
 80029f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80029f4:	4818      	ldr	r0, [pc, #96]	; (8002a58 <_ZN5Motor9motorCtrlEv+0x98>)
 80029f6:	f004 f9b9 	bl	8006d6c <HAL_GPIO_WritePin>
		left_counter_period = temp_left_counter_period_;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	81fb      	strh	r3, [r7, #14]
	}

	if(temp_right_counter_period_ < 0) {
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	da0d      	bge.n	8002a2a <_ZN5Motor9motorCtrlEv+0x6a>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 8002a0e:	2201      	movs	r2, #1
 8002a10:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002a14:	4810      	ldr	r0, [pc, #64]	; (8002a58 <_ZN5Motor9motorCtrlEv+0x98>)
 8002a16:	f004 f9a9 	bl	8006d6c <HAL_GPIO_WritePin>
		right_counter_period = -1 * temp_right_counter_period_;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	425b      	negs	r3, r3
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	81bb      	strh	r3, [r7, #12]
 8002a28:	e00a      	b.n	8002a40 <_ZN5Motor9motorCtrlEv+0x80>
	}
	else{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002a30:	4809      	ldr	r0, [pc, #36]	; (8002a58 <_ZN5Motor9motorCtrlEv+0x98>)
 8002a32:	f004 f99b 	bl	8006d6c <HAL_GPIO_WritePin>
		right_counter_period = temp_right_counter_period_;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	81bb      	strh	r3, [r7, #12]
	}

	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, left_counter_period);
 8002a40:	89fa      	ldrh	r2, [r7, #14]
 8002a42:	4b06      	ldr	r3, [pc, #24]	; (8002a5c <_ZN5Motor9motorCtrlEv+0x9c>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, right_counter_period);
 8002a48:	89ba      	ldrh	r2, [r7, #12]
 8002a4a:	4b04      	ldr	r3, [pc, #16]	; (8002a5c <_ZN5Motor9motorCtrlEv+0x9c>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002a50:	bf00      	nop
 8002a52:	3710      	adds	r7, #16
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	40020c00 	.word	0x40020c00
 8002a5c:	2000a1b4 	.word	0x2000a1b4

08002a60 <_ZN5Motor8setRatioEdd>:

void Motor::setRatio(double left_ratio, double right_ratio)
{
 8002a60:	b590      	push	{r4, r7, lr}
 8002a62:	b087      	sub	sp, #28
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6178      	str	r0, [r7, #20]
 8002a68:	ed87 0b02 	vstr	d0, [r7, #8]
 8002a6c:	ed87 1b00 	vstr	d1, [r7]
	if(left_ratio > 1) left_ratio = 1;
 8002a70:	f04f 0200 	mov.w	r2, #0
 8002a74:	4b30      	ldr	r3, [pc, #192]	; (8002b38 <_ZN5Motor8setRatioEdd+0xd8>)
 8002a76:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002a7a:	f7fe f865 	bl	8000b48 <__aeabi_dcmpgt>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d005      	beq.n	8002a90 <_ZN5Motor8setRatioEdd+0x30>
 8002a84:	f04f 0300 	mov.w	r3, #0
 8002a88:	4c2b      	ldr	r4, [pc, #172]	; (8002b38 <_ZN5Motor8setRatioEdd+0xd8>)
 8002a8a:	e9c7 3402 	strd	r3, r4, [r7, #8]
 8002a8e:	e00e      	b.n	8002aae <_ZN5Motor8setRatioEdd+0x4e>
	else if(left_ratio < -1) left_ratio = -1;
 8002a90:	f04f 0200 	mov.w	r2, #0
 8002a94:	4b29      	ldr	r3, [pc, #164]	; (8002b3c <_ZN5Motor8setRatioEdd+0xdc>)
 8002a96:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002a9a:	f7fe f837 	bl	8000b0c <__aeabi_dcmplt>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d004      	beq.n	8002aae <_ZN5Motor8setRatioEdd+0x4e>
 8002aa4:	f04f 0300 	mov.w	r3, #0
 8002aa8:	4c24      	ldr	r4, [pc, #144]	; (8002b3c <_ZN5Motor8setRatioEdd+0xdc>)
 8002aaa:	e9c7 3402 	strd	r3, r4, [r7, #8]
	if(right_ratio > 1) right_ratio = 1;
 8002aae:	f04f 0200 	mov.w	r2, #0
 8002ab2:	4b21      	ldr	r3, [pc, #132]	; (8002b38 <_ZN5Motor8setRatioEdd+0xd8>)
 8002ab4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002ab8:	f7fe f846 	bl	8000b48 <__aeabi_dcmpgt>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d005      	beq.n	8002ace <_ZN5Motor8setRatioEdd+0x6e>
 8002ac2:	f04f 0300 	mov.w	r3, #0
 8002ac6:	4c1c      	ldr	r4, [pc, #112]	; (8002b38 <_ZN5Motor8setRatioEdd+0xd8>)
 8002ac8:	e9c7 3400 	strd	r3, r4, [r7]
 8002acc:	e00e      	b.n	8002aec <_ZN5Motor8setRatioEdd+0x8c>
	else if(right_ratio < -1) right_ratio = -1;
 8002ace:	f04f 0200 	mov.w	r2, #0
 8002ad2:	4b1a      	ldr	r3, [pc, #104]	; (8002b3c <_ZN5Motor8setRatioEdd+0xdc>)
 8002ad4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002ad8:	f7fe f818 	bl	8000b0c <__aeabi_dcmplt>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d004      	beq.n	8002aec <_ZN5Motor8setRatioEdd+0x8c>
 8002ae2:	f04f 0300 	mov.w	r3, #0
 8002ae6:	4c15      	ldr	r4, [pc, #84]	; (8002b3c <_ZN5Motor8setRatioEdd+0xdc>)
 8002ae8:	e9c7 3400 	strd	r3, r4, [r7]

	temp_left_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * left_ratio);
 8002aec:	f04f 0200 	mov.w	r2, #0
 8002af0:	4b13      	ldr	r3, [pc, #76]	; (8002b40 <_ZN5Motor8setRatioEdd+0xe0>)
 8002af2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002af6:	f7fd fd97 	bl	8000628 <__aeabi_dmul>
 8002afa:	4603      	mov	r3, r0
 8002afc:	460c      	mov	r4, r1
 8002afe:	4618      	mov	r0, r3
 8002b00:	4621      	mov	r1, r4
 8002b02:	f7fe f841 	bl	8000b88 <__aeabi_d2iz>
 8002b06:	4603      	mov	r3, r0
 8002b08:	b21a      	sxth	r2, r3
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	801a      	strh	r2, [r3, #0]
	temp_right_counter_period_ = (int)((double)MAX_COUNTER_PERIOD * right_ratio);
 8002b0e:	f04f 0200 	mov.w	r2, #0
 8002b12:	4b0b      	ldr	r3, [pc, #44]	; (8002b40 <_ZN5Motor8setRatioEdd+0xe0>)
 8002b14:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002b18:	f7fd fd86 	bl	8000628 <__aeabi_dmul>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	460c      	mov	r4, r1
 8002b20:	4618      	mov	r0, r3
 8002b22:	4621      	mov	r1, r4
 8002b24:	f7fe f830 	bl	8000b88 <__aeabi_d2iz>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	b21a      	sxth	r2, r3
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	805a      	strh	r2, [r3, #2]

}
 8002b30:	bf00      	nop
 8002b32:	371c      	adds	r7, #28
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd90      	pop	{r4, r7, pc}
 8002b38:	3ff00000 	.word	0x3ff00000
 8002b3c:	bff00000 	.word	0xbff00000
 8002b40:	409c2000 	.word	0x409c2000

08002b44 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>:

#define DELTA_T 0.001

float monitor_x, monitor_y, monitor_theta;

Odometry::Odometry(Encoder *encoder, IMU *imu, VelocityCtrl *velocity_ctrl) : x_(0), y_(0), theta_(0)
 8002b44:	b480      	push	{r7}
 8002b46:	b085      	sub	sp, #20
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	60f8      	str	r0, [r7, #12]
 8002b4c:	60b9      	str	r1, [r7, #8]
 8002b4e:	607a      	str	r2, [r7, #4]
 8002b50:	603b      	str	r3, [r7, #0]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	f04f 0200 	mov.w	r2, #0
 8002b58:	60da      	str	r2, [r3, #12]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	f04f 0200 	mov.w	r2, #0
 8002b60:	611a      	str	r2, [r3, #16]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	f04f 0200 	mov.w	r2, #0
 8002b68:	615a      	str	r2, [r3, #20]
{
	encoder_ = encoder;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	68ba      	ldr	r2, [r7, #8]
 8002b6e:	601a      	str	r2, [r3, #0]
	imu_ = imu;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	605a      	str	r2, [r3, #4]
	velocity_ctrl_ = velocity_ctrl;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	683a      	ldr	r2, [r7, #0]
 8002b7a:	609a      	str	r2, [r3, #8]
}
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3714      	adds	r7, #20
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
 8002b8a:	0000      	movs	r0, r0
 8002b8c:	0000      	movs	r0, r0
	...

08002b90 <_ZN8Odometry12calcPotitionEv>:


void Odometry::calcPotition()
{
 8002b90:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002b94:	b086      	sub	sp, #24
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	6078      	str	r0, [r7, #4]
	float current_velocity = velocity_ctrl_->getCurrentVelocity();
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f000 fc4a 	bl	8003438 <_ZN12VelocityCtrl18getCurrentVelocityEv>
 8002ba4:	ed87 0a05 	vstr	s0, [r7, #20]
	float current_omega = velocity_ctrl_->getCurrentOmega();
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	4618      	mov	r0, r3
 8002bae:	f000 fc52 	bl	8003456 <_ZN12VelocityCtrl15getCurrentOmegaEv>
 8002bb2:	ed87 0a04 	vstr	s0, [r7, #16]

	float delta_theta = current_omega * DELTA_T;
 8002bb6:	6938      	ldr	r0, [r7, #16]
 8002bb8:	f7fd fcde 	bl	8000578 <__aeabi_f2d>
 8002bbc:	a353      	add	r3, pc, #332	; (adr r3, 8002d0c <_ZN8Odometry12calcPotitionEv+0x17c>)
 8002bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bc2:	f7fd fd31 	bl	8000628 <__aeabi_dmul>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	460c      	mov	r4, r1
 8002bca:	4618      	mov	r0, r3
 8002bcc:	4621      	mov	r1, r4
 8002bce:	f7fe f823 	bl	8000c18 <__aeabi_d2f>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	60fb      	str	r3, [r7, #12]

	x_ = x_ + current_velocity * DELTA_T * cos(theta_ + delta_theta / 2);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7fd fccc 	bl	8000578 <__aeabi_f2d>
 8002be0:	4604      	mov	r4, r0
 8002be2:	460d      	mov	r5, r1
 8002be4:	6978      	ldr	r0, [r7, #20]
 8002be6:	f7fd fcc7 	bl	8000578 <__aeabi_f2d>
 8002bea:	a348      	add	r3, pc, #288	; (adr r3, 8002d0c <_ZN8Odometry12calcPotitionEv+0x17c>)
 8002bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bf0:	f7fd fd1a 	bl	8000628 <__aeabi_dmul>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	460b      	mov	r3, r1
 8002bf8:	4690      	mov	r8, r2
 8002bfa:	4699      	mov	r9, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	ed93 7a05 	vldr	s14, [r3, #20]
 8002c02:	edd7 6a03 	vldr	s13, [r7, #12]
 8002c06:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8002c0a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002c0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c12:	ee17 0a90 	vmov	r0, s15
 8002c16:	f7fd fcaf 	bl	8000578 <__aeabi_f2d>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	460b      	mov	r3, r1
 8002c1e:	ec43 2b10 	vmov	d0, r2, r3
 8002c22:	f00e f8a9 	bl	8010d78 <cos>
 8002c26:	ec53 2b10 	vmov	r2, r3, d0
 8002c2a:	4640      	mov	r0, r8
 8002c2c:	4649      	mov	r1, r9
 8002c2e:	f7fd fcfb 	bl	8000628 <__aeabi_dmul>
 8002c32:	4602      	mov	r2, r0
 8002c34:	460b      	mov	r3, r1
 8002c36:	4620      	mov	r0, r4
 8002c38:	4629      	mov	r1, r5
 8002c3a:	f7fd fb3f 	bl	80002bc <__adddf3>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	460c      	mov	r4, r1
 8002c42:	4618      	mov	r0, r3
 8002c44:	4621      	mov	r1, r4
 8002c46:	f7fd ffe7 	bl	8000c18 <__aeabi_d2f>
 8002c4a:	4602      	mov	r2, r0
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	60da      	str	r2, [r3, #12]
	y_ = y_ + current_velocity * DELTA_T * sin(theta_ + delta_theta / 2);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	691b      	ldr	r3, [r3, #16]
 8002c54:	4618      	mov	r0, r3
 8002c56:	f7fd fc8f 	bl	8000578 <__aeabi_f2d>
 8002c5a:	4604      	mov	r4, r0
 8002c5c:	460d      	mov	r5, r1
 8002c5e:	6978      	ldr	r0, [r7, #20]
 8002c60:	f7fd fc8a 	bl	8000578 <__aeabi_f2d>
 8002c64:	a329      	add	r3, pc, #164	; (adr r3, 8002d0c <_ZN8Odometry12calcPotitionEv+0x17c>)
 8002c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c6a:	f7fd fcdd 	bl	8000628 <__aeabi_dmul>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	460b      	mov	r3, r1
 8002c72:	4690      	mov	r8, r2
 8002c74:	4699      	mov	r9, r3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	ed93 7a05 	vldr	s14, [r3, #20]
 8002c7c:	edd7 6a03 	vldr	s13, [r7, #12]
 8002c80:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8002c84:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002c88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c8c:	ee17 0a90 	vmov	r0, s15
 8002c90:	f7fd fc72 	bl	8000578 <__aeabi_f2d>
 8002c94:	4602      	mov	r2, r0
 8002c96:	460b      	mov	r3, r1
 8002c98:	ec43 2b10 	vmov	d0, r2, r3
 8002c9c:	f00e f8b0 	bl	8010e00 <sin>
 8002ca0:	ec53 2b10 	vmov	r2, r3, d0
 8002ca4:	4640      	mov	r0, r8
 8002ca6:	4649      	mov	r1, r9
 8002ca8:	f7fd fcbe 	bl	8000628 <__aeabi_dmul>
 8002cac:	4602      	mov	r2, r0
 8002cae:	460b      	mov	r3, r1
 8002cb0:	4620      	mov	r0, r4
 8002cb2:	4629      	mov	r1, r5
 8002cb4:	f7fd fb02 	bl	80002bc <__adddf3>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	460c      	mov	r4, r1
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	4621      	mov	r1, r4
 8002cc0:	f7fd ffaa 	bl	8000c18 <__aeabi_d2f>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	611a      	str	r2, [r3, #16]
	theta_ = theta_ + delta_theta;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	ed93 7a05 	vldr	s14, [r3, #20]
 8002cd0:	edd7 7a03 	vldr	s15, [r7, #12]
 8002cd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	edc3 7a05 	vstr	s15, [r3, #20]


	monitor_x = x_;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	4a07      	ldr	r2, [pc, #28]	; (8002d00 <_ZN8Odometry12calcPotitionEv+0x170>)
 8002ce4:	6013      	str	r3, [r2, #0]
	monitor_y = y_;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	4a06      	ldr	r2, [pc, #24]	; (8002d04 <_ZN8Odometry12calcPotitionEv+0x174>)
 8002cec:	6013      	str	r3, [r2, #0]
	monitor_theta = theta_;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	695b      	ldr	r3, [r3, #20]
 8002cf2:	4a05      	ldr	r2, [pc, #20]	; (8002d08 <_ZN8Odometry12calcPotitionEv+0x178>)
 8002cf4:	6013      	str	r3, [r2, #0]

	//encoder_->getDistance();

}
 8002cf6:	bf00      	nop
 8002cf8:	3718      	adds	r7, #24
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002d00:	20000210 	.word	0x20000210
 8002d04:	20000214 	.word	0x20000214
 8002d08:	20000218 	.word	0x20000218
 8002d0c:	d2f1a9fc 	.word	0xd2f1a9fc
 8002d10:	3f50624d 	.word	0x3f50624d

08002d14 <_ZN8Odometry4flipEv>:

void Odometry::flip()
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
	calcPotition();
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f7ff ff37 	bl	8002b90 <_ZN8Odometry12calcPotitionEv>
}
 8002d22:	bf00      	nop
 8002d24:	3708      	adds	r7, #8
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}

08002d2a <_ZN11PowerSensor4initEv>:
#define LOW_VOLTAGE_THRESHOLD 7.4

float monitor_voltage;

void PowerSensor::init()
{
 8002d2a:	b580      	push	{r7, lr}
 8002d2c:	b082      	sub	sp, #8
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT);
 8002d32:	2088      	movs	r0, #136	; 0x88
 8002d34:	f7fe ff2d 	bl	8001b92 <INA260_init>
	INA260_init(CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT);
 8002d38:	2080      	movs	r0, #128	; 0x80
 8002d3a:	f7fe ff2a 	bl	8001b92 <INA260_init>
}
 8002d3e:	bf00      	nop
 8002d40:	3708      	adds	r7, #8
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
	...

08002d48 <_ZN11PowerSensor12updateValuesEv>:

void PowerSensor::updateValues()
{
 8002d48:	b590      	push	{r4, r7, lr}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
	//current_l_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
	//current_r_ = INA260_read(0x01, CURRENT_VOLTAGE_SENSOR_ADRESS_RIGHT) * 0.00125;
	buttery_voltage_ = INA260_read(0x02, CURRENT_VOLTAGE_SENSOR_ADRESS_LEFT) * 0.00125;
 8002d50:	2188      	movs	r1, #136	; 0x88
 8002d52:	2002      	movs	r0, #2
 8002d54:	f7fe feba 	bl	8001acc <INA260_read>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7fd fbfa 	bl	8000554 <__aeabi_i2d>
 8002d60:	a30c      	add	r3, pc, #48	; (adr r3, 8002d94 <_ZN11PowerSensor12updateValuesEv+0x4c>)
 8002d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d66:	f7fd fc5f 	bl	8000628 <__aeabi_dmul>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	460c      	mov	r4, r1
 8002d6e:	4618      	mov	r0, r3
 8002d70:	4621      	mov	r1, r4
 8002d72:	f7fd ff51 	bl	8000c18 <__aeabi_d2f>
 8002d76:	4602      	mov	r2, r0
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	609a      	str	r2, [r3, #8]

	monitor_voltage = buttery_voltage_;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	4a03      	ldr	r2, [pc, #12]	; (8002d90 <_ZN11PowerSensor12updateValuesEv+0x48>)
 8002d82:	6013      	str	r3, [r2, #0]
}
 8002d84:	bf00      	nop
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd90      	pop	{r4, r7, pc}
 8002d8c:	f3af 8000 	nop.w
 8002d90:	2000021c 	.word	0x2000021c
 8002d94:	47ae147b 	.word	0x47ae147b
 8002d98:	3f547ae1 	.word	0x3f547ae1
 8002d9c:	00000000 	.word	0x00000000

08002da0 <_ZN11PowerSensor12butteryCheckEv>:
	return buttery_voltage_;

}

bool PowerSensor::butteryCheck()
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
	static uint16_t cnt;
	bool ret = false;
 8002da8:	2300      	movs	r3, #0
 8002daa:	73fb      	strb	r3, [r7, #15]

	if(buttery_voltage_ < LOW_VOLTAGE_THRESHOLD) cnt++;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7fd fbe1 	bl	8000578 <__aeabi_f2d>
 8002db6:	a311      	add	r3, pc, #68	; (adr r3, 8002dfc <_ZN11PowerSensor12butteryCheckEv+0x5c>)
 8002db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dbc:	f7fd fea6 	bl	8000b0c <__aeabi_dcmplt>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d006      	beq.n	8002dd4 <_ZN11PowerSensor12butteryCheckEv+0x34>
 8002dc6:	4b0c      	ldr	r3, [pc, #48]	; (8002df8 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8002dc8:	881b      	ldrh	r3, [r3, #0]
 8002dca:	3301      	adds	r3, #1
 8002dcc:	b29a      	uxth	r2, r3
 8002dce:	4b0a      	ldr	r3, [pc, #40]	; (8002df8 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8002dd0:	801a      	strh	r2, [r3, #0]
 8002dd2:	e002      	b.n	8002dda <_ZN11PowerSensor12butteryCheckEv+0x3a>
	else cnt = 0;
 8002dd4:	4b08      	ldr	r3, [pc, #32]	; (8002df8 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	801a      	strh	r2, [r3, #0]

	if(cnt >= 1) {
 8002dda:	4b07      	ldr	r3, [pc, #28]	; (8002df8 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8002ddc:	881b      	ldrh	r3, [r3, #0]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d004      	beq.n	8002dec <_ZN11PowerSensor12butteryCheckEv+0x4c>
		ret = true;
 8002de2:	2301      	movs	r3, #1
 8002de4:	73fb      	strb	r3, [r7, #15]
		cnt = 1;
 8002de6:	4b04      	ldr	r3, [pc, #16]	; (8002df8 <_ZN11PowerSensor12butteryCheckEv+0x58>)
 8002de8:	2201      	movs	r2, #1
 8002dea:	801a      	strh	r2, [r3, #0]
	}

	return ret;
 8002dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3710      	adds	r7, #16
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	20000220 	.word	0x20000220
 8002dfc:	9999999a 	.word	0x9999999a
 8002e00:	401d9999 	.word	0x401d9999

08002e04 <_ZN12RotarySwitch8getValueEv>:

#include "RotarySwitch.hpp"


uint16_t RotarySwitch::getValue()
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
	uint16_t ret_value = 0;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	81fb      	strh	r3, [r7, #14]

	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_1))	ret_value |= 0x01;
 8002e10:	2102      	movs	r1, #2
 8002e12:	4822      	ldr	r0, [pc, #136]	; (8002e9c <_ZN12RotarySwitch8getValueEv+0x98>)
 8002e14:	f003 ff92 	bl	8006d3c <HAL_GPIO_ReadPin>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	bf0c      	ite	eq
 8002e1e:	2301      	moveq	r3, #1
 8002e20:	2300      	movne	r3, #0
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d003      	beq.n	8002e30 <_ZN12RotarySwitch8getValueEv+0x2c>
 8002e28:	89fb      	ldrh	r3, [r7, #14]
 8002e2a:	f043 0301 	orr.w	r3, r3, #1
 8002e2e:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_3))	ret_value |= 0x02;
 8002e30:	2108      	movs	r1, #8
 8002e32:	481a      	ldr	r0, [pc, #104]	; (8002e9c <_ZN12RotarySwitch8getValueEv+0x98>)
 8002e34:	f003 ff82 	bl	8006d3c <HAL_GPIO_ReadPin>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	bf0c      	ite	eq
 8002e3e:	2301      	moveq	r3, #1
 8002e40:	2300      	movne	r3, #0
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d003      	beq.n	8002e50 <_ZN12RotarySwitch8getValueEv+0x4c>
 8002e48:	89fb      	ldrh	r3, [r7, #14]
 8002e4a:	f043 0302 	orr.w	r3, r3, #2
 8002e4e:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_4))	ret_value |= 0x04;
 8002e50:	2110      	movs	r1, #16
 8002e52:	4812      	ldr	r0, [pc, #72]	; (8002e9c <_ZN12RotarySwitch8getValueEv+0x98>)
 8002e54:	f003 ff72 	bl	8006d3c <HAL_GPIO_ReadPin>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	bf0c      	ite	eq
 8002e5e:	2301      	moveq	r3, #1
 8002e60:	2300      	movne	r3, #0
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d003      	beq.n	8002e70 <_ZN12RotarySwitch8getValueEv+0x6c>
 8002e68:	89fb      	ldrh	r3, [r7, #14]
 8002e6a:	f043 0304 	orr.w	r3, r3, #4
 8002e6e:	81fb      	strh	r3, [r7, #14]
	if(!HAL_GPIO_ReadPin(GPIOD,GPIO_PIN_7))	ret_value |= 0x08;
 8002e70:	2180      	movs	r1, #128	; 0x80
 8002e72:	480a      	ldr	r0, [pc, #40]	; (8002e9c <_ZN12RotarySwitch8getValueEv+0x98>)
 8002e74:	f003 ff62 	bl	8006d3c <HAL_GPIO_ReadPin>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	bf0c      	ite	eq
 8002e7e:	2301      	moveq	r3, #1
 8002e80:	2300      	movne	r3, #0
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d003      	beq.n	8002e90 <_ZN12RotarySwitch8getValueEv+0x8c>
 8002e88:	89fb      	ldrh	r3, [r7, #14]
 8002e8a:	f043 0308 	orr.w	r3, r3, #8
 8002e8e:	81fb      	strh	r3, [r7, #14]

	return ret_value;
 8002e90:	89fb      	ldrh	r3, [r7, #14]

}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3710      	adds	r7, #16
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	40020c00 	.word	0x40020c00

08002ea0 <_ZN10SideSensorC1Ev>:
 *      Author: under
 */

#include "SideSensor.hpp"

SideSensor::SideSensor()
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
{

}
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	370c      	adds	r7, #12
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr
	...

08002eb8 <_ZN10SideSensor12updateStatusEt>:


void SideSensor::updateStatus(uint16_t gpio_pin)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	460b      	mov	r3, r1
 8002ec2:	807b      	strh	r3, [r7, #2]
	static bool white_flag1 = false;
	static bool white_flag2 = false;

	if (gpio_pin == GPIO_PIN_2 && white_flag1 == false){
 8002ec4:	887b      	ldrh	r3, [r7, #2]
 8002ec6:	2b04      	cmp	r3, #4
 8002ec8:	d111      	bne.n	8002eee <_ZN10SideSensor12updateStatusEt+0x36>
 8002eca:	4b28      	ldr	r3, [pc, #160]	; (8002f6c <_ZN10SideSensor12updateStatusEt+0xb4>)
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	f083 0301 	eor.w	r3, r3, #1
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d00a      	beq.n	8002eee <_ZN10SideSensor12updateStatusEt+0x36>
		status_ |= 0x01;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	881b      	ldrh	r3, [r3, #0]
 8002edc:	f043 0301 	orr.w	r3, r3, #1
 8002ee0:	b29a      	uxth	r2, r3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	801a      	strh	r2, [r3, #0]
		white_flag1 = true;
 8002ee6:	4b21      	ldr	r3, [pc, #132]	; (8002f6c <_ZN10SideSensor12updateStatusEt+0xb4>)
 8002ee8:	2201      	movs	r2, #1
 8002eea:	701a      	strb	r2, [r3, #0]
 8002eec:	e010      	b.n	8002f10 <_ZN10SideSensor12updateStatusEt+0x58>
	}
	else if(gpio_pin == GPIO_PIN_2 && white_flag1 == true){
 8002eee:	887b      	ldrh	r3, [r7, #2]
 8002ef0:	2b04      	cmp	r3, #4
 8002ef2:	d10d      	bne.n	8002f10 <_ZN10SideSensor12updateStatusEt+0x58>
 8002ef4:	4b1d      	ldr	r3, [pc, #116]	; (8002f6c <_ZN10SideSensor12updateStatusEt+0xb4>)
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d009      	beq.n	8002f10 <_ZN10SideSensor12updateStatusEt+0x58>
		status_ ^= 0x01;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	881b      	ldrh	r3, [r3, #0]
 8002f00:	f083 0301 	eor.w	r3, r3, #1
 8002f04:	b29a      	uxth	r2, r3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	801a      	strh	r2, [r3, #0]
		white_flag1 = false;
 8002f0a:	4b18      	ldr	r3, [pc, #96]	; (8002f6c <_ZN10SideSensor12updateStatusEt+0xb4>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	701a      	strb	r2, [r3, #0]

	}

	if (gpio_pin == GPIO_PIN_8 && white_flag2 == false){
 8002f10:	887b      	ldrh	r3, [r7, #2]
 8002f12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f16:	d111      	bne.n	8002f3c <_ZN10SideSensor12updateStatusEt+0x84>
 8002f18:	4b15      	ldr	r3, [pc, #84]	; (8002f70 <_ZN10SideSensor12updateStatusEt+0xb8>)
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	f083 0301 	eor.w	r3, r3, #1
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d00a      	beq.n	8002f3c <_ZN10SideSensor12updateStatusEt+0x84>
		status_ |= 0x02;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	881b      	ldrh	r3, [r3, #0]
 8002f2a:	f043 0302 	orr.w	r3, r3, #2
 8002f2e:	b29a      	uxth	r2, r3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	801a      	strh	r2, [r3, #0]
		white_flag2 = true;
 8002f34:	4b0e      	ldr	r3, [pc, #56]	; (8002f70 <_ZN10SideSensor12updateStatusEt+0xb8>)
 8002f36:	2201      	movs	r2, #1
 8002f38:	701a      	strb	r2, [r3, #0]
	else if(gpio_pin == GPIO_PIN_8 && white_flag2 == true){
		status_ ^= 0x02;
		white_flag2 = false;
	}

}
 8002f3a:	e011      	b.n	8002f60 <_ZN10SideSensor12updateStatusEt+0xa8>
	else if(gpio_pin == GPIO_PIN_8 && white_flag2 == true){
 8002f3c:	887b      	ldrh	r3, [r7, #2]
 8002f3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f42:	d10d      	bne.n	8002f60 <_ZN10SideSensor12updateStatusEt+0xa8>
 8002f44:	4b0a      	ldr	r3, [pc, #40]	; (8002f70 <_ZN10SideSensor12updateStatusEt+0xb8>)
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d009      	beq.n	8002f60 <_ZN10SideSensor12updateStatusEt+0xa8>
		status_ ^= 0x02;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	881b      	ldrh	r3, [r3, #0]
 8002f50:	f083 0302 	eor.w	r3, r3, #2
 8002f54:	b29a      	uxth	r2, r3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	801a      	strh	r2, [r3, #0]
		white_flag2 = false;
 8002f5a:	4b05      	ldr	r3, [pc, #20]	; (8002f70 <_ZN10SideSensor12updateStatusEt+0xb8>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	701a      	strb	r2, [r3, #0]
}
 8002f60:	bf00      	nop
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr
 8002f6c:	20000222 	.word	0x20000222
 8002f70:	20000223 	.word	0x20000223

08002f74 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>:

#include "VelocityCtrl.hpp"
//#include "ICM_20648.h"
#include <stdio.h>

VelocityCtrl::VelocityCtrl(Motor *motor, Encoder *encoder, IMU *imu) :
 8002f74:	b480      	push	{r7}
 8002f76:	b085      	sub	sp, #20
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	60f8      	str	r0, [r7, #12]
 8002f7c:	60b9      	str	r1, [r7, #8]
 8002f7e:	607a      	str	r2, [r7, #4]
 8002f80:	603b      	str	r3, [r7, #0]
target_velocity_(0), target_omega_(0), current_velocity_(0), current_omega_(0), v_kp_(0), v_kd_(0), v_ki_(0),
	o_kp_(0), o_kd_(0), o_ki_(0), excution_flag_(false)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	f04f 0200 	mov.w	r2, #0
 8002f88:	601a      	str	r2, [r3, #0]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	f04f 0200 	mov.w	r2, #0
 8002f90:	605a      	str	r2, [r3, #4]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	f04f 0200 	mov.w	r2, #0
 8002f98:	609a      	str	r2, [r3, #8]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	f04f 0200 	mov.w	r2, #0
 8002fa0:	60da      	str	r2, [r3, #12]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	f04f 0200 	mov.w	r2, #0
 8002fa8:	611a      	str	r2, [r3, #16]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	f04f 0200 	mov.w	r2, #0
 8002fb0:	615a      	str	r2, [r3, #20]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	f04f 0200 	mov.w	r2, #0
 8002fb8:	619a      	str	r2, [r3, #24]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	f04f 0200 	mov.w	r2, #0
 8002fc0:	61da      	str	r2, [r3, #28]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	f04f 0200 	mov.w	r2, #0
 8002fc8:	621a      	str	r2, [r3, #32]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f04f 0200 	mov.w	r2, #0
 8002fd0:	625a      	str	r2, [r3, #36]	; 0x24
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
{
	motor_ = motor;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	68ba      	ldr	r2, [r7, #8]
 8002fde:	62da      	str	r2, [r3, #44]	; 0x2c
	encoder_ = encoder;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	631a      	str	r2, [r3, #48]	; 0x30
	imu_ = imu;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	683a      	ldr	r2, [r7, #0]
 8002fea:	635a      	str	r2, [r3, #52]	; 0x34

}
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3714      	adds	r7, #20
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr
 8002ffa:	0000      	movs	r0, r0
 8002ffc:	0000      	movs	r0, r0
	...

08003000 <_ZN12VelocityCtrl12calcVelocityEv>:

// ---------private ---------//

float VelocityCtrl::calcVelocity()
{
 8003000:	b590      	push	{r4, r7, lr}
 8003002:	b087      	sub	sp, #28
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
	float enc_l, enc_r;
	encoder_->getCnt(enc_l, enc_r);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300c:	f107 020c 	add.w	r2, r7, #12
 8003010:	f107 0110 	add.w	r1, r7, #16
 8003014:	4618      	mov	r0, r3
 8003016:	f7fe f979 	bl	800130c <_ZN7Encoder6getCntERfS0_>
	float enc_cnt = (enc_l + enc_r) / 2;
 800301a:	ed97 7a04 	vldr	s14, [r7, #16]
 800301e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003022:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003026:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800302a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800302e:	edc7 7a05 	vstr	s15, [r7, #20]

	current_velocity_ = VELOCITY_PER_CNT * enc_cnt;
 8003032:	6978      	ldr	r0, [r7, #20]
 8003034:	f7fd faa0 	bl	8000578 <__aeabi_f2d>
 8003038:	a30b      	add	r3, pc, #44	; (adr r3, 8003068 <_ZN12VelocityCtrl12calcVelocityEv+0x68>)
 800303a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800303e:	f7fd faf3 	bl	8000628 <__aeabi_dmul>
 8003042:	4603      	mov	r3, r0
 8003044:	460c      	mov	r4, r1
 8003046:	4618      	mov	r0, r3
 8003048:	4621      	mov	r1, r4
 800304a:	f7fd fde5 	bl	8000c18 <__aeabi_d2f>
 800304e:	4602      	mov	r2, r0
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	609a      	str	r2, [r3, #8]

	return current_velocity_;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	ee07 3a90 	vmov	s15, r3
}
 800305c:	eeb0 0a67 	vmov.f32	s0, s15
 8003060:	371c      	adds	r7, #28
 8003062:	46bd      	mov	sp, r7
 8003064:	bd90      	pop	{r4, r7, pc}
 8003066:	bf00      	nop
 8003068:	1ab1d998 	.word	0x1ab1d998
 800306c:	3f7830b5 	.word	0x3f7830b5

08003070 <_ZN12VelocityCtrl9calcOmegaEv>:

float VelocityCtrl::calcOmega()
{
 8003070:	b5b0      	push	{r4, r5, r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
	float omega = imu_->getOmega();
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800307c:	4618      	mov	r0, r3
 800307e:	f7fe fd11 	bl	8001aa4 <_ZN3IMU8getOmegaEv>
 8003082:	ed87 0a03 	vstr	s0, [r7, #12]
	current_omega_ = -(omega / 16.4) * PI / 180;
 8003086:	68f8      	ldr	r0, [r7, #12]
 8003088:	f7fd fa76 	bl	8000578 <__aeabi_f2d>
 800308c:	a317      	add	r3, pc, #92	; (adr r3, 80030ec <_ZN12VelocityCtrl9calcOmegaEv+0x7c>)
 800308e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003092:	f7fd fbf3 	bl	800087c <__aeabi_ddiv>
 8003096:	4602      	mov	r2, r0
 8003098:	460b      	mov	r3, r1
 800309a:	4614      	mov	r4, r2
 800309c:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80030a0:	a314      	add	r3, pc, #80	; (adr r3, 80030f4 <_ZN12VelocityCtrl9calcOmegaEv+0x84>)
 80030a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030a6:	4620      	mov	r0, r4
 80030a8:	4629      	mov	r1, r5
 80030aa:	f7fd fabd 	bl	8000628 <__aeabi_dmul>
 80030ae:	4603      	mov	r3, r0
 80030b0:	460c      	mov	r4, r1
 80030b2:	4618      	mov	r0, r3
 80030b4:	4621      	mov	r1, r4
 80030b6:	f04f 0200 	mov.w	r2, #0
 80030ba:	4b0b      	ldr	r3, [pc, #44]	; (80030e8 <_ZN12VelocityCtrl9calcOmegaEv+0x78>)
 80030bc:	f7fd fbde 	bl	800087c <__aeabi_ddiv>
 80030c0:	4603      	mov	r3, r0
 80030c2:	460c      	mov	r4, r1
 80030c4:	4618      	mov	r0, r3
 80030c6:	4621      	mov	r1, r4
 80030c8:	f7fd fda6 	bl	8000c18 <__aeabi_d2f>
 80030cc:	4602      	mov	r2, r0
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	60da      	str	r2, [r3, #12]
	//printf("omegao: %f\n", current_omega_);

	return current_omega_;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	ee07 3a90 	vmov	s15, r3
}
 80030da:	eeb0 0a67 	vmov.f32	s0, s15
 80030de:	3710      	adds	r7, #16
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bdb0      	pop	{r4, r5, r7, pc}
 80030e4:	f3af 8000 	nop.w
 80030e8:	40668000 	.word	0x40668000
 80030ec:	66666666 	.word	0x66666666
 80030f0:	40306666 	.word	0x40306666
 80030f4:	54411744 	.word	0x54411744
 80030f8:	400921fb 	.word	0x400921fb
 80030fc:	00000000 	.word	0x00000000

08003100 <_ZN12VelocityCtrl3pidEv>:


void VelocityCtrl::pid()
{
 8003100:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003102:	b08d      	sub	sp, #52	; 0x34
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
	float static v_pre_diff, o_pre_diff;
	float v_diff = target_velocity_ - current_velocity_;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	ed93 7a00 	vldr	s14, [r3]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	edd3 7a02 	vldr	s15, [r3, #8]
 8003114:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003118:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	float o_diff = target_omega_- current_omega_;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	ed93 7a01 	vldr	s14, [r3, #4]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	edd3 7a03 	vldr	s15, [r3, #12]
 8003128:	ee77 7a67 	vsub.f32	s15, s14, s15
 800312c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28

	float v_p, v_d, o_p, o_d;
	static float v_i, o_i;

	v_p = v_kp_ * v_diff;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	edd3 7a04 	vldr	s15, [r3, #16]
 8003136:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800313a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800313e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	v_d = v_kd_ * (v_diff - v_pre_diff) * DELTA_T;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	ed93 7a05 	vldr	s14, [r3, #20]
 8003148:	4b73      	ldr	r3, [pc, #460]	; (8003318 <_ZN12VelocityCtrl3pidEv+0x218>)
 800314a:	edd3 7a00 	vldr	s15, [r3]
 800314e:	edd7 6a0b 	vldr	s13, [r7, #44]	; 0x2c
 8003152:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003156:	ee67 7a27 	vmul.f32	s15, s14, s15
 800315a:	ee17 0a90 	vmov	r0, s15
 800315e:	f7fd fa0b 	bl	8000578 <__aeabi_f2d>
 8003162:	a36b      	add	r3, pc, #428	; (adr r3, 8003310 <_ZN12VelocityCtrl3pidEv+0x210>)
 8003164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003168:	f7fd fa5e 	bl	8000628 <__aeabi_dmul>
 800316c:	4603      	mov	r3, r0
 800316e:	460c      	mov	r4, r1
 8003170:	4618      	mov	r0, r3
 8003172:	4621      	mov	r1, r4
 8003174:	f7fd fd50 	bl	8000c18 <__aeabi_d2f>
 8003178:	4603      	mov	r3, r0
 800317a:	623b      	str	r3, [r7, #32]
	v_i += v_ki_ * v_diff * DELTA_T;
 800317c:	4b67      	ldr	r3, [pc, #412]	; (800331c <_ZN12VelocityCtrl3pidEv+0x21c>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4618      	mov	r0, r3
 8003182:	f7fd f9f9 	bl	8000578 <__aeabi_f2d>
 8003186:	4604      	mov	r4, r0
 8003188:	460d      	mov	r5, r1
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	ed93 7a06 	vldr	s14, [r3, #24]
 8003190:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003194:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003198:	ee17 0a90 	vmov	r0, s15
 800319c:	f7fd f9ec 	bl	8000578 <__aeabi_f2d>
 80031a0:	a35b      	add	r3, pc, #364	; (adr r3, 8003310 <_ZN12VelocityCtrl3pidEv+0x210>)
 80031a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031a6:	f7fd fa3f 	bl	8000628 <__aeabi_dmul>
 80031aa:	4602      	mov	r2, r0
 80031ac:	460b      	mov	r3, r1
 80031ae:	4620      	mov	r0, r4
 80031b0:	4629      	mov	r1, r5
 80031b2:	f7fd f883 	bl	80002bc <__adddf3>
 80031b6:	4603      	mov	r3, r0
 80031b8:	460c      	mov	r4, r1
 80031ba:	4618      	mov	r0, r3
 80031bc:	4621      	mov	r1, r4
 80031be:	f7fd fd2b 	bl	8000c18 <__aeabi_d2f>
 80031c2:	4602      	mov	r2, r0
 80031c4:	4b55      	ldr	r3, [pc, #340]	; (800331c <_ZN12VelocityCtrl3pidEv+0x21c>)
 80031c6:	601a      	str	r2, [r3, #0]

	o_p = o_kp_ * o_diff;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	edd3 7a07 	vldr	s15, [r3, #28]
 80031ce:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80031d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031d6:	edc7 7a07 	vstr	s15, [r7, #28]
	o_d = o_kd_ * (o_diff - o_pre_diff) * DELTA_T;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	ed93 7a08 	vldr	s14, [r3, #32]
 80031e0:	4b4f      	ldr	r3, [pc, #316]	; (8003320 <_ZN12VelocityCtrl3pidEv+0x220>)
 80031e2:	edd3 7a00 	vldr	s15, [r3]
 80031e6:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 80031ea:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80031ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031f2:	ee17 0a90 	vmov	r0, s15
 80031f6:	f7fd f9bf 	bl	8000578 <__aeabi_f2d>
 80031fa:	a345      	add	r3, pc, #276	; (adr r3, 8003310 <_ZN12VelocityCtrl3pidEv+0x210>)
 80031fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003200:	f7fd fa12 	bl	8000628 <__aeabi_dmul>
 8003204:	4603      	mov	r3, r0
 8003206:	460c      	mov	r4, r1
 8003208:	4618      	mov	r0, r3
 800320a:	4621      	mov	r1, r4
 800320c:	f7fd fd04 	bl	8000c18 <__aeabi_d2f>
 8003210:	4603      	mov	r3, r0
 8003212:	61bb      	str	r3, [r7, #24]
	o_i += o_ki_ * o_diff * DELTA_T;
 8003214:	4b43      	ldr	r3, [pc, #268]	; (8003324 <_ZN12VelocityCtrl3pidEv+0x224>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4618      	mov	r0, r3
 800321a:	f7fd f9ad 	bl	8000578 <__aeabi_f2d>
 800321e:	4604      	mov	r4, r0
 8003220:	460d      	mov	r5, r1
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8003228:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800322c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003230:	ee17 0a90 	vmov	r0, s15
 8003234:	f7fd f9a0 	bl	8000578 <__aeabi_f2d>
 8003238:	a335      	add	r3, pc, #212	; (adr r3, 8003310 <_ZN12VelocityCtrl3pidEv+0x210>)
 800323a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800323e:	f7fd f9f3 	bl	8000628 <__aeabi_dmul>
 8003242:	4602      	mov	r2, r0
 8003244:	460b      	mov	r3, r1
 8003246:	4620      	mov	r0, r4
 8003248:	4629      	mov	r1, r5
 800324a:	f7fd f837 	bl	80002bc <__adddf3>
 800324e:	4603      	mov	r3, r0
 8003250:	460c      	mov	r4, r1
 8003252:	4618      	mov	r0, r3
 8003254:	4621      	mov	r1, r4
 8003256:	f7fd fcdf 	bl	8000c18 <__aeabi_d2f>
 800325a:	4602      	mov	r2, r0
 800325c:	4b31      	ldr	r3, [pc, #196]	; (8003324 <_ZN12VelocityCtrl3pidEv+0x224>)
 800325e:	601a      	str	r2, [r3, #0]

	float v_left_ratio, v_right_ratio, o_left_ratio, o_right_ratio;

	v_left_ratio = v_right_ratio =  v_p + v_d + v_i;
 8003260:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8003264:	edd7 7a08 	vldr	s15, [r7, #32]
 8003268:	ee37 7a27 	vadd.f32	s14, s14, s15
 800326c:	4b2b      	ldr	r3, [pc, #172]	; (800331c <_ZN12VelocityCtrl3pidEv+0x21c>)
 800326e:	edd3 7a00 	vldr	s15, [r3]
 8003272:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003276:	edc7 7a05 	vstr	s15, [r7, #20]
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	613b      	str	r3, [r7, #16]

	o_left_ratio = o_p + o_d + o_i;
 800327e:	ed97 7a07 	vldr	s14, [r7, #28]
 8003282:	edd7 7a06 	vldr	s15, [r7, #24]
 8003286:	ee37 7a27 	vadd.f32	s14, s14, s15
 800328a:	4b26      	ldr	r3, [pc, #152]	; (8003324 <_ZN12VelocityCtrl3pidEv+0x224>)
 800328c:	edd3 7a00 	vldr	s15, [r3]
 8003290:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003294:	edc7 7a03 	vstr	s15, [r7, #12]
	o_right_ratio = -(o_p + o_d + o_i);
 8003298:	ed97 7a07 	vldr	s14, [r7, #28]
 800329c:	edd7 7a06 	vldr	s15, [r7, #24]
 80032a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032a4:	4b1f      	ldr	r3, [pc, #124]	; (8003324 <_ZN12VelocityCtrl3pidEv+0x224>)
 80032a6:	edd3 7a00 	vldr	s15, [r3]
 80032aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032ae:	eef1 7a67 	vneg.f32	s15, s15
 80032b2:	edc7 7a02 	vstr	s15, [r7, #8]

	motor_->setRatio(v_left_ratio + o_left_ratio, v_right_ratio + o_right_ratio);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80032ba:	ed97 7a04 	vldr	s14, [r7, #16]
 80032be:	edd7 7a03 	vldr	s15, [r7, #12]
 80032c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032c6:	ee17 0a90 	vmov	r0, s15
 80032ca:	f7fd f955 	bl	8000578 <__aeabi_f2d>
 80032ce:	4605      	mov	r5, r0
 80032d0:	460e      	mov	r6, r1
 80032d2:	ed97 7a05 	vldr	s14, [r7, #20]
 80032d6:	edd7 7a02 	vldr	s15, [r7, #8]
 80032da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032de:	ee17 0a90 	vmov	r0, s15
 80032e2:	f7fd f949 	bl	8000578 <__aeabi_f2d>
 80032e6:	4602      	mov	r2, r0
 80032e8:	460b      	mov	r3, r1
 80032ea:	ec43 2b11 	vmov	d1, r2, r3
 80032ee:	ec46 5b10 	vmov	d0, r5, r6
 80032f2:	4620      	mov	r0, r4
 80032f4:	f7ff fbb4 	bl	8002a60 <_ZN5Motor8setRatioEdd>

	v_pre_diff = v_diff;
 80032f8:	4a07      	ldr	r2, [pc, #28]	; (8003318 <_ZN12VelocityCtrl3pidEv+0x218>)
 80032fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032fc:	6013      	str	r3, [r2, #0]
	o_pre_diff = o_diff;
 80032fe:	4a08      	ldr	r2, [pc, #32]	; (8003320 <_ZN12VelocityCtrl3pidEv+0x220>)
 8003300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003302:	6013      	str	r3, [r2, #0]
}
 8003304:	bf00      	nop
 8003306:	3734      	adds	r7, #52	; 0x34
 8003308:	46bd      	mov	sp, r7
 800330a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800330c:	f3af 8000 	nop.w
 8003310:	d2f1a9fc 	.word	0xd2f1a9fc
 8003314:	3f50624d 	.word	0x3f50624d
 8003318:	20000224 	.word	0x20000224
 800331c:	2000022c 	.word	0x2000022c
 8003320:	20000228 	.word	0x20000228
 8003324:	20000230 	.word	0x20000230

08003328 <_ZN12VelocityCtrl11setVelocityEff>:
{

}

void VelocityCtrl::setVelocity(float velocity, float omega)
{
 8003328:	b480      	push	{r7}
 800332a:	b085      	sub	sp, #20
 800332c:	af00      	add	r7, sp, #0
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	ed87 0a02 	vstr	s0, [r7, #8]
 8003334:	edc7 0a01 	vstr	s1, [r7, #4]
	target_velocity_ = velocity;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	68ba      	ldr	r2, [r7, #8]
 800333c:	601a      	str	r2, [r3, #0]
	target_omega_= omega;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	605a      	str	r2, [r3, #4]
}
 8003344:	bf00      	nop
 8003346:	3714      	adds	r7, #20
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr

08003350 <_ZN12VelocityCtrl15setVelocityGainEfff>:

void VelocityCtrl::setVelocityGain(float kp, float kd, float ki)
{
 8003350:	b480      	push	{r7}
 8003352:	b085      	sub	sp, #20
 8003354:	af00      	add	r7, sp, #0
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	ed87 0a02 	vstr	s0, [r7, #8]
 800335c:	edc7 0a01 	vstr	s1, [r7, #4]
 8003360:	ed87 1a00 	vstr	s2, [r7]
	v_kp_ = kp;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	68ba      	ldr	r2, [r7, #8]
 8003368:	611a      	str	r2, [r3, #16]
	v_kd_ = kd;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	615a      	str	r2, [r3, #20]
	v_ki_ = ki;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	683a      	ldr	r2, [r7, #0]
 8003374:	619a      	str	r2, [r3, #24]
}
 8003376:	bf00      	nop
 8003378:	3714      	adds	r7, #20
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr

08003382 <_ZN12VelocityCtrl12setOmegaGainEfff>:

void VelocityCtrl::setOmegaGain(float kp, float kd, float ki)
{
 8003382:	b480      	push	{r7}
 8003384:	b085      	sub	sp, #20
 8003386:	af00      	add	r7, sp, #0
 8003388:	60f8      	str	r0, [r7, #12]
 800338a:	ed87 0a02 	vstr	s0, [r7, #8]
 800338e:	edc7 0a01 	vstr	s1, [r7, #4]
 8003392:	ed87 1a00 	vstr	s2, [r7]
	o_kp_ = kp;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	68ba      	ldr	r2, [r7, #8]
 800339a:	61da      	str	r2, [r3, #28]
	o_kd_ = kd;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	621a      	str	r2, [r3, #32]
	o_ki_ = ki;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	683a      	ldr	r2, [r7, #0]
 80033a6:	625a      	str	r2, [r3, #36]	; 0x24
}
 80033a8:	bf00      	nop
 80033aa:	3714      	adds	r7, #20
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <_ZN12VelocityCtrl4flipEv>:

void VelocityCtrl::flip()
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
    calcVelocity();
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f7ff fe1f 	bl	8003000 <_ZN12VelocityCtrl12calcVelocityEv>
	calcOmega();
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f7ff fe54 	bl	8003070 <_ZN12VelocityCtrl9calcOmegaEv>

	if(excution_flag_ == true){
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d002      	beq.n	80033d8 <_ZN12VelocityCtrl4flipEv+0x24>
		pid();
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f7ff fe94 	bl	8003100 <_ZN12VelocityCtrl3pidEv>
	}


}
 80033d8:	bf00      	nop
 80033da:	3708      	adds	r7, #8
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}

080033e0 <_ZN12VelocityCtrl5startEv>:

void VelocityCtrl::start()
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
	excution_flag_ = true;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	//calcOmega();
}
 80033f0:	bf00      	nop
 80033f2:	370c      	adds	r7, #12
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr
 80033fc:	0000      	movs	r0, r0
	...

08003400 <_ZN12VelocityCtrl4stopEv>:

void VelocityCtrl::stop()
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
	excution_flag_ = false;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	motor_->setRatio(0, 0);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003414:	ed9f 1b06 	vldr	d1, [pc, #24]	; 8003430 <_ZN12VelocityCtrl4stopEv+0x30>
 8003418:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8003430 <_ZN12VelocityCtrl4stopEv+0x30>
 800341c:	4618      	mov	r0, r3
 800341e:	f7ff fb1f 	bl	8002a60 <_ZN5Motor8setRatioEdd>

}
 8003422:	bf00      	nop
 8003424:	3708      	adds	r7, #8
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	f3af 8000 	nop.w
	...

08003438 <_ZN12VelocityCtrl18getCurrentVelocityEv>:

float VelocityCtrl::getCurrentVelocity()
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
	return current_velocity_;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	ee07 3a90 	vmov	s15, r3
}
 8003448:	eeb0 0a67 	vmov.f32	s0, s15
 800344c:	370c      	adds	r7, #12
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr

08003456 <_ZN12VelocityCtrl15getCurrentOmegaEv>:

float VelocityCtrl::getCurrentOmega()
{
 8003456:	b480      	push	{r7}
 8003458:	b083      	sub	sp, #12
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
	return current_omega_;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	ee07 3a90 	vmov	s15, r3
}
 8003466:	eeb0 0a67 	vmov.f32	s0, s15
 800346a:	370c      	adds	r7, #12
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr

08003474 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800347c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003480:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8003484:	f003 0301 	and.w	r3, r3, #1
 8003488:	2b00      	cmp	r3, #0
 800348a:	d013      	beq.n	80034b4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800348c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003490:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8003494:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003498:	2b00      	cmp	r3, #0
 800349a:	d00b      	beq.n	80034b4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800349c:	e000      	b.n	80034a0 <ITM_SendChar+0x2c>
    {
      __NOP();
 800349e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80034a0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d0f9      	beq.n	800349e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80034aa:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	b2d2      	uxtb	r2, r2
 80034b2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80034b4:	687b      	ldr	r3, [r7, #4]
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	370c      	adds	r7, #12
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr

080034c2 <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


int _write(int file, char *ptr, int len)
{
 80034c2:	b580      	push	{r7, lr}
 80034c4:	b086      	sub	sp, #24
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	60f8      	str	r0, [r7, #12]
 80034ca:	60b9      	str	r1, [r7, #8]
 80034cc:	607a      	str	r2, [r7, #4]
  int DataIdx;
  for(DataIdx=0; DataIdx<len; DataIdx++)
 80034ce:	2300      	movs	r3, #0
 80034d0:	617b      	str	r3, [r7, #20]
 80034d2:	e009      	b.n	80034e8 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	1c5a      	adds	r2, r3, #1
 80034d8:	60ba      	str	r2, [r7, #8]
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	4618      	mov	r0, r3
 80034de:	f7ff ffc9 	bl	8003474 <ITM_SendChar>
  for(DataIdx=0; DataIdx<len; DataIdx++)
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	3301      	adds	r3, #1
 80034e6:	617b      	str	r3, [r7, #20]
 80034e8:	697a      	ldr	r2, [r7, #20]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	429a      	cmp	r2, r3
 80034ee:	dbf1      	blt.n	80034d4 <_write+0x12>
  }
  return len;
 80034f0:	687b      	ldr	r3, [r7, #4]
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3718      	adds	r7, #24
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}

080034fa <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80034fa:	b580      	push	{r7, lr}
 80034fc:	b082      	sub	sp, #8
 80034fe:	af00      	add	r7, sp, #0
 8003500:	4603      	mov	r3, r0
 8003502:	80fb      	strh	r3, [r7, #6]
	cppExit(GPIO_Pin);
 8003504:	88fb      	ldrh	r3, [r7, #6]
 8003506:	4618      	mov	r0, r3
 8003508:	f001 fe9a 	bl	8005240 <cppExit>
}
 800350c:	bf00      	nop
 800350e:	3708      	adds	r7, #8
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b082      	sub	sp, #8
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6){
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a1e      	ldr	r2, [pc, #120]	; (800359c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d10e      	bne.n	8003544 <HAL_TIM_PeriodElapsedCallback+0x30>
		cppFlip1ms();
 8003526:	f001 fe47 	bl	80051b8 <cppFlip1ms>

		tim6_timer++;
 800352a:	4b1d      	ldr	r3, [pc, #116]	; (80035a0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	3301      	adds	r3, #1
 8003530:	4a1b      	ldr	r2, [pc, #108]	; (80035a0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8003532:	6013      	str	r3, [r2, #0]
		if(tim6_timer >= 100000) tim6_timer = 0;
 8003534:	4b1a      	ldr	r3, [pc, #104]	; (80035a0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a1a      	ldr	r2, [pc, #104]	; (80035a4 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d902      	bls.n	8003544 <HAL_TIM_PeriodElapsedCallback+0x30>
 800353e:	4b18      	ldr	r3, [pc, #96]	; (80035a0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8003540:	2200      	movs	r2, #0
 8003542:	601a      	str	r2, [r3, #0]
	}

	if(htim->Instance == TIM7){
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a17      	ldr	r2, [pc, #92]	; (80035a8 <HAL_TIM_PeriodElapsedCallback+0x94>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d10e      	bne.n	800356c <HAL_TIM_PeriodElapsedCallback+0x58>
		cppFlip100ns();
 800354e:	f001 fe5d 	bl	800520c <cppFlip100ns>

		tim7_timer++;
 8003552:	4b16      	ldr	r3, [pc, #88]	; (80035ac <HAL_TIM_PeriodElapsedCallback+0x98>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	3301      	adds	r3, #1
 8003558:	4a14      	ldr	r2, [pc, #80]	; (80035ac <HAL_TIM_PeriodElapsedCallback+0x98>)
 800355a:	6013      	str	r3, [r2, #0]
		if(tim7_timer >= 100000) tim7_timer = 0;
 800355c:	4b13      	ldr	r3, [pc, #76]	; (80035ac <HAL_TIM_PeriodElapsedCallback+0x98>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a10      	ldr	r2, [pc, #64]	; (80035a4 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d902      	bls.n	800356c <HAL_TIM_PeriodElapsedCallback+0x58>
 8003566:	4b11      	ldr	r3, [pc, #68]	; (80035ac <HAL_TIM_PeriodElapsedCallback+0x98>)
 8003568:	2200      	movs	r2, #0
 800356a:	601a      	str	r2, [r3, #0]
	}
	if(htim->Instance == TIM13){
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a0f      	ldr	r2, [pc, #60]	; (80035b0 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d10e      	bne.n	8003594 <HAL_TIM_PeriodElapsedCallback+0x80>
		cppFlip10ms();
 8003576:	f001 fe53 	bl	8005220 <cppFlip10ms>

		tim13_timer++;
 800357a:	4b0e      	ldr	r3, [pc, #56]	; (80035b4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	3301      	adds	r3, #1
 8003580:	4a0c      	ldr	r2, [pc, #48]	; (80035b4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8003582:	6013      	str	r3, [r2, #0]
		if(tim13_timer >= 100000) tim13_timer = 0;
 8003584:	4b0b      	ldr	r3, [pc, #44]	; (80035b4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a06      	ldr	r2, [pc, #24]	; (80035a4 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d902      	bls.n	8003594 <HAL_TIM_PeriodElapsedCallback+0x80>
 800358e:	4b09      	ldr	r3, [pc, #36]	; (80035b4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8003590:	2200      	movs	r2, #0
 8003592:	601a      	str	r2, [r3, #0]
	}

}
 8003594:	bf00      	nop
 8003596:	3708      	adds	r7, #8
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}
 800359c:	40001000 	.word	0x40001000
 80035a0:	2000a324 	.word	0x2000a324
 80035a4:	0001869f 	.word	0x0001869f
 80035a8:	40001400 	.word	0x40001400
 80035ac:	2000a368 	.word	0x2000a368
 80035b0:	40001c00 	.word	0x40001c00
 80035b4:	2000a36c 	.word	0x2000a36c

080035b8 <init>:

void init()
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	af00      	add	r7, sp, #0
	// ------initialize------//
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_SET); // sensor led ON
 80035bc:	2201      	movs	r2, #1
 80035be:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80035c2:	4808      	ldr	r0, [pc, #32]	; (80035e4 <init+0x2c>)
 80035c4:	f003 fbd2 	bl	8006d6c <HAL_GPIO_WritePin>

	// timer interrpt in start
	HAL_TIM_Base_Start_IT(&htim6);
 80035c8:	4807      	ldr	r0, [pc, #28]	; (80035e8 <init+0x30>)
 80035ca:	f007 fab2 	bl	800ab32 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 80035ce:	4807      	ldr	r0, [pc, #28]	; (80035ec <init+0x34>)
 80035d0:	f007 faaf 	bl	800ab32 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim13);
 80035d4:	4806      	ldr	r0, [pc, #24]	; (80035f0 <init+0x38>)
 80035d6:	f007 faac 	bl	800ab32 <HAL_TIM_Base_Start_IT>

	cppInit();
 80035da:	f001 fd8b 	bl	80050f4 <cppInit>

}
 80035de:	bf00      	nop
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop
 80035e4:	40021000 	.word	0x40021000
 80035e8:	2000a450 	.word	0x2000a450
 80035ec:	2000a5f4 	.word	0x2000a5f4
 80035f0:	2000a370 	.word	0x2000a370

080035f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80035f8:	f002 f8b0 	bl	800575c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80035fc:	f000 f82a 	bl	8003654 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003600:	f000 fdbc 	bl	800417c <MX_GPIO_Init>
  MX_DMA_Init();
 8003604:	f000 fd8a 	bl	800411c <MX_DMA_Init>
  MX_I2C2_Init();
 8003608:	f000 f9e8 	bl	80039dc <MX_I2C2_Init>
  MX_SDIO_SD_Init();
 800360c:	f000 fa14 	bl	8003a38 <MX_SDIO_SD_Init>
  MX_SPI2_Init();
 8003610:	f000 fa32 	bl	8003a78 <MX_SPI2_Init>
  MX_TIM1_Init();
 8003614:	f000 fa66 	bl	8003ae4 <MX_TIM1_Init>
  MX_TIM4_Init();
 8003618:	f000 fb70 	bl	8003cfc <MX_TIM4_Init>
  MX_TIM8_Init();
 800361c:	f000 fc3c 	bl	8003e98 <MX_TIM8_Init>
  MX_USART2_UART_Init();
 8003620:	f000 fd52 	bl	80040c8 <MX_USART2_UART_Init>
  MX_FATFS_Init();
 8003624:	f009 fa58 	bl	800cad8 <MX_FATFS_Init>
  MX_TIM6_Init();
 8003628:	f000 fbcc 	bl	8003dc4 <MX_TIM6_Init>
  MX_I2C1_Init();
 800362c:	f000 f9a8 	bl	8003980 <MX_I2C1_Init>
  MX_TIM3_Init();
 8003630:	f000 fb00 	bl	8003c34 <MX_TIM3_Init>
  MX_TIM10_Init();
 8003634:	f000 fc88 	bl	8003f48 <MX_TIM10_Init>
  MX_TIM11_Init();
 8003638:	f000 fcd4 	bl	8003fe4 <MX_TIM11_Init>
  MX_ADC2_Init();
 800363c:	f000 f898 	bl	8003770 <MX_ADC2_Init>
  MX_TIM7_Init();
 8003640:	f000 fbf6 	bl	8003e30 <MX_TIM7_Init>
  MX_TIM13_Init();
 8003644:	f000 fd1c 	bl	8004080 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */

  init();
 8003648:	f7ff ffb6 	bl	80035b8 <init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  cppLoop();
 800364c:	f001 fe08 	bl	8005260 <cppLoop>
 8003650:	e7fc      	b.n	800364c <main+0x58>
	...

08003654 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b0a4      	sub	sp, #144	; 0x90
 8003658:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800365a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800365e:	2234      	movs	r2, #52	; 0x34
 8003660:	2100      	movs	r1, #0
 8003662:	4618      	mov	r0, r3
 8003664:	f00e fc08 	bl	8011e78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003668:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800366c:	2200      	movs	r2, #0
 800366e:	601a      	str	r2, [r3, #0]
 8003670:	605a      	str	r2, [r3, #4]
 8003672:	609a      	str	r2, [r3, #8]
 8003674:	60da      	str	r2, [r3, #12]
 8003676:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003678:	f107 030c 	add.w	r3, r7, #12
 800367c:	223c      	movs	r2, #60	; 0x3c
 800367e:	2100      	movs	r1, #0
 8003680:	4618      	mov	r0, r3
 8003682:	f00e fbf9 	bl	8011e78 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003686:	2300      	movs	r3, #0
 8003688:	60bb      	str	r3, [r7, #8]
 800368a:	4b37      	ldr	r3, [pc, #220]	; (8003768 <SystemClock_Config+0x114>)
 800368c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368e:	4a36      	ldr	r2, [pc, #216]	; (8003768 <SystemClock_Config+0x114>)
 8003690:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003694:	6413      	str	r3, [r2, #64]	; 0x40
 8003696:	4b34      	ldr	r3, [pc, #208]	; (8003768 <SystemClock_Config+0x114>)
 8003698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800369e:	60bb      	str	r3, [r7, #8]
 80036a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80036a2:	2300      	movs	r3, #0
 80036a4:	607b      	str	r3, [r7, #4]
 80036a6:	4b31      	ldr	r3, [pc, #196]	; (800376c <SystemClock_Config+0x118>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a30      	ldr	r2, [pc, #192]	; (800376c <SystemClock_Config+0x118>)
 80036ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80036b0:	6013      	str	r3, [r2, #0]
 80036b2:	4b2e      	ldr	r3, [pc, #184]	; (800376c <SystemClock_Config+0x118>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80036ba:	607b      	str	r3, [r7, #4]
 80036bc:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80036be:	2301      	movs	r3, #1
 80036c0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80036c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80036c6:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80036c8:	2302      	movs	r3, #2
 80036ca:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80036cc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80036d0:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = 8;
 80036d2:	2308      	movs	r3, #8
 80036d4:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80036d6:	23b4      	movs	r3, #180	; 0xb4
 80036d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80036dc:	2302      	movs	r3, #2
 80036de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80036e2:	2308      	movs	r3, #8
 80036e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = 2;
 80036e8:	2302      	movs	r3, #2
 80036ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80036ee:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80036f2:	4618      	mov	r0, r3
 80036f4:	f004 ff74 	bl	80085e0 <HAL_RCC_OscConfig>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d001      	beq.n	8003702 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80036fe:	f000 fe93 	bl	8004428 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003702:	f004 faef 	bl	8007ce4 <HAL_PWREx_EnableOverDrive>
 8003706:	4603      	mov	r3, r0
 8003708:	2b00      	cmp	r3, #0
 800370a:	d001      	beq.n	8003710 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 800370c:	f000 fe8c 	bl	8004428 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003710:	230f      	movs	r3, #15
 8003712:	64bb      	str	r3, [r7, #72]	; 0x48
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003714:	2302      	movs	r3, #2
 8003716:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003718:	2300      	movs	r3, #0
 800371a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800371c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003720:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003722:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003726:	65bb      	str	r3, [r7, #88]	; 0x58

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003728:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800372c:	2105      	movs	r1, #5
 800372e:	4618      	mov	r0, r3
 8003730:	f004 fb28 	bl	8007d84 <HAL_RCC_ClockConfig>
 8003734:	4603      	mov	r3, r0
 8003736:	2b00      	cmp	r3, #0
 8003738:	d001      	beq.n	800373e <SystemClock_Config+0xea>
  {
    Error_Handler();
 800373a:	f000 fe75 	bl	8004428 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 800373e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003742:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8003744:	2300      	movs	r3, #0
 8003746:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8003748:	2300      	movs	r3, #0
 800374a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800374c:	f107 030c 	add.w	r3, r7, #12
 8003750:	4618      	mov	r0, r3
 8003752:	f004 fd07 	bl	8008164 <HAL_RCCEx_PeriphCLKConfig>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	d001      	beq.n	8003760 <SystemClock_Config+0x10c>
  {
    Error_Handler();
 800375c:	f000 fe64 	bl	8004428 <Error_Handler>
  }
}
 8003760:	bf00      	nop
 8003762:	3790      	adds	r7, #144	; 0x90
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}
 8003768:	40023800 	.word	0x40023800
 800376c:	40007000 	.word	0x40007000

08003770 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003776:	463b      	mov	r3, r7
 8003778:	2200      	movs	r2, #0
 800377a:	601a      	str	r2, [r3, #0]
 800377c:	605a      	str	r2, [r3, #4]
 800377e:	609a      	str	r2, [r3, #8]
 8003780:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8003782:	4b7c      	ldr	r3, [pc, #496]	; (8003974 <MX_ADC2_Init+0x204>)
 8003784:	4a7c      	ldr	r2, [pc, #496]	; (8003978 <MX_ADC2_Init+0x208>)
 8003786:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003788:	4b7a      	ldr	r3, [pc, #488]	; (8003974 <MX_ADC2_Init+0x204>)
 800378a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800378e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8003790:	4b78      	ldr	r3, [pc, #480]	; (8003974 <MX_ADC2_Init+0x204>)
 8003792:	2200      	movs	r2, #0
 8003794:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8003796:	4b77      	ldr	r3, [pc, #476]	; (8003974 <MX_ADC2_Init+0x204>)
 8003798:	2201      	movs	r2, #1
 800379a:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800379c:	4b75      	ldr	r3, [pc, #468]	; (8003974 <MX_ADC2_Init+0x204>)
 800379e:	2201      	movs	r2, #1
 80037a0:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80037a2:	4b74      	ldr	r3, [pc, #464]	; (8003974 <MX_ADC2_Init+0x204>)
 80037a4:	2200      	movs	r2, #0
 80037a6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80037aa:	4b72      	ldr	r3, [pc, #456]	; (8003974 <MX_ADC2_Init+0x204>)
 80037ac:	2200      	movs	r2, #0
 80037ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80037b0:	4b70      	ldr	r3, [pc, #448]	; (8003974 <MX_ADC2_Init+0x204>)
 80037b2:	4a72      	ldr	r2, [pc, #456]	; (800397c <MX_ADC2_Init+0x20c>)
 80037b4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80037b6:	4b6f      	ldr	r3, [pc, #444]	; (8003974 <MX_ADC2_Init+0x204>)
 80037b8:	2200      	movs	r2, #0
 80037ba:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 14;
 80037bc:	4b6d      	ldr	r3, [pc, #436]	; (8003974 <MX_ADC2_Init+0x204>)
 80037be:	220e      	movs	r2, #14
 80037c0:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80037c2:	4b6c      	ldr	r3, [pc, #432]	; (8003974 <MX_ADC2_Init+0x204>)
 80037c4:	2201      	movs	r2, #1
 80037c6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80037ca:	4b6a      	ldr	r3, [pc, #424]	; (8003974 <MX_ADC2_Init+0x204>)
 80037cc:	2201      	movs	r2, #1
 80037ce:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80037d0:	4868      	ldr	r0, [pc, #416]	; (8003974 <MX_ADC2_Init+0x204>)
 80037d2:	f002 f857 	bl	8005884 <HAL_ADC_Init>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d001      	beq.n	80037e0 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80037dc:	f000 fe24 	bl	8004428 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80037e0:	230a      	movs	r3, #10
 80037e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80037e4:	2301      	movs	r3, #1
 80037e6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 80037e8:	2306      	movs	r3, #6
 80037ea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80037ec:	463b      	mov	r3, r7
 80037ee:	4619      	mov	r1, r3
 80037f0:	4860      	ldr	r0, [pc, #384]	; (8003974 <MX_ADC2_Init+0x204>)
 80037f2:	f002 f99b 	bl	8005b2c <HAL_ADC_ConfigChannel>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d001      	beq.n	8003800 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80037fc:	f000 fe14 	bl	8004428 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8003800:	230b      	movs	r3, #11
 8003802:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8003804:	2302      	movs	r3, #2
 8003806:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003808:	463b      	mov	r3, r7
 800380a:	4619      	mov	r1, r3
 800380c:	4859      	ldr	r0, [pc, #356]	; (8003974 <MX_ADC2_Init+0x204>)
 800380e:	f002 f98d 	bl	8005b2c <HAL_ADC_ConfigChannel>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	d001      	beq.n	800381c <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8003818:	f000 fe06 	bl	8004428 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800381c:	230c      	movs	r3, #12
 800381e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8003820:	2303      	movs	r3, #3
 8003822:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003824:	463b      	mov	r3, r7
 8003826:	4619      	mov	r1, r3
 8003828:	4852      	ldr	r0, [pc, #328]	; (8003974 <MX_ADC2_Init+0x204>)
 800382a:	f002 f97f 	bl	8005b2c <HAL_ADC_ConfigChannel>
 800382e:	4603      	mov	r3, r0
 8003830:	2b00      	cmp	r3, #0
 8003832:	d001      	beq.n	8003838 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8003834:	f000 fdf8 	bl	8004428 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8003838:	230d      	movs	r3, #13
 800383a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800383c:	2304      	movs	r3, #4
 800383e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003840:	463b      	mov	r3, r7
 8003842:	4619      	mov	r1, r3
 8003844:	484b      	ldr	r0, [pc, #300]	; (8003974 <MX_ADC2_Init+0x204>)
 8003846:	f002 f971 	bl	8005b2c <HAL_ADC_ConfigChannel>
 800384a:	4603      	mov	r3, r0
 800384c:	2b00      	cmp	r3, #0
 800384e:	d001      	beq.n	8003854 <MX_ADC2_Init+0xe4>
  {
    Error_Handler();
 8003850:	f000 fdea 	bl	8004428 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8003854:	2300      	movs	r3, #0
 8003856:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8003858:	2305      	movs	r3, #5
 800385a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800385c:	463b      	mov	r3, r7
 800385e:	4619      	mov	r1, r3
 8003860:	4844      	ldr	r0, [pc, #272]	; (8003974 <MX_ADC2_Init+0x204>)
 8003862:	f002 f963 	bl	8005b2c <HAL_ADC_ConfigChannel>
 8003866:	4603      	mov	r3, r0
 8003868:	2b00      	cmp	r3, #0
 800386a:	d001      	beq.n	8003870 <MX_ADC2_Init+0x100>
  {
    Error_Handler();
 800386c:	f000 fddc 	bl	8004428 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003870:	2301      	movs	r3, #1
 8003872:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8003874:	2306      	movs	r3, #6
 8003876:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003878:	463b      	mov	r3, r7
 800387a:	4619      	mov	r1, r3
 800387c:	483d      	ldr	r0, [pc, #244]	; (8003974 <MX_ADC2_Init+0x204>)
 800387e:	f002 f955 	bl	8005b2c <HAL_ADC_ConfigChannel>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d001      	beq.n	800388c <MX_ADC2_Init+0x11c>
  {
    Error_Handler();
 8003888:	f000 fdce 	bl	8004428 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800388c:	2302      	movs	r3, #2
 800388e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8003890:	2307      	movs	r3, #7
 8003892:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003894:	463b      	mov	r3, r7
 8003896:	4619      	mov	r1, r3
 8003898:	4836      	ldr	r0, [pc, #216]	; (8003974 <MX_ADC2_Init+0x204>)
 800389a:	f002 f947 	bl	8005b2c <HAL_ADC_ConfigChannel>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d001      	beq.n	80038a8 <MX_ADC2_Init+0x138>
  {
    Error_Handler();
 80038a4:	f000 fdc0 	bl	8004428 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80038a8:	2303      	movs	r3, #3
 80038aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 80038ac:	2308      	movs	r3, #8
 80038ae:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80038b0:	463b      	mov	r3, r7
 80038b2:	4619      	mov	r1, r3
 80038b4:	482f      	ldr	r0, [pc, #188]	; (8003974 <MX_ADC2_Init+0x204>)
 80038b6:	f002 f939 	bl	8005b2c <HAL_ADC_ConfigChannel>
 80038ba:	4603      	mov	r3, r0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d001      	beq.n	80038c4 <MX_ADC2_Init+0x154>
  {
    Error_Handler();
 80038c0:	f000 fdb2 	bl	8004428 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80038c4:	2304      	movs	r3, #4
 80038c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 9;
 80038c8:	2309      	movs	r3, #9
 80038ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80038cc:	463b      	mov	r3, r7
 80038ce:	4619      	mov	r1, r3
 80038d0:	4828      	ldr	r0, [pc, #160]	; (8003974 <MX_ADC2_Init+0x204>)
 80038d2:	f002 f92b 	bl	8005b2c <HAL_ADC_ConfigChannel>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d001      	beq.n	80038e0 <MX_ADC2_Init+0x170>
  {
    Error_Handler();
 80038dc:	f000 fda4 	bl	8004428 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80038e0:	2305      	movs	r3, #5
 80038e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 10;
 80038e4:	230a      	movs	r3, #10
 80038e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80038e8:	463b      	mov	r3, r7
 80038ea:	4619      	mov	r1, r3
 80038ec:	4821      	ldr	r0, [pc, #132]	; (8003974 <MX_ADC2_Init+0x204>)
 80038ee:	f002 f91d 	bl	8005b2c <HAL_ADC_ConfigChannel>
 80038f2:	4603      	mov	r3, r0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d001      	beq.n	80038fc <MX_ADC2_Init+0x18c>
  {
    Error_Handler();
 80038f8:	f000 fd96 	bl	8004428 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80038fc:	2306      	movs	r3, #6
 80038fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 11;
 8003900:	230b      	movs	r3, #11
 8003902:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003904:	463b      	mov	r3, r7
 8003906:	4619      	mov	r1, r3
 8003908:	481a      	ldr	r0, [pc, #104]	; (8003974 <MX_ADC2_Init+0x204>)
 800390a:	f002 f90f 	bl	8005b2c <HAL_ADC_ConfigChannel>
 800390e:	4603      	mov	r3, r0
 8003910:	2b00      	cmp	r3, #0
 8003912:	d001      	beq.n	8003918 <MX_ADC2_Init+0x1a8>
  {
    Error_Handler();
 8003914:	f000 fd88 	bl	8004428 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8003918:	2307      	movs	r3, #7
 800391a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 12;
 800391c:	230c      	movs	r3, #12
 800391e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003920:	463b      	mov	r3, r7
 8003922:	4619      	mov	r1, r3
 8003924:	4813      	ldr	r0, [pc, #76]	; (8003974 <MX_ADC2_Init+0x204>)
 8003926:	f002 f901 	bl	8005b2c <HAL_ADC_ConfigChannel>
 800392a:	4603      	mov	r3, r0
 800392c:	2b00      	cmp	r3, #0
 800392e:	d001      	beq.n	8003934 <MX_ADC2_Init+0x1c4>
  {
    Error_Handler();
 8003930:	f000 fd7a 	bl	8004428 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8003934:	2308      	movs	r3, #8
 8003936:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 13;
 8003938:	230d      	movs	r3, #13
 800393a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800393c:	463b      	mov	r3, r7
 800393e:	4619      	mov	r1, r3
 8003940:	480c      	ldr	r0, [pc, #48]	; (8003974 <MX_ADC2_Init+0x204>)
 8003942:	f002 f8f3 	bl	8005b2c <HAL_ADC_ConfigChannel>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d001      	beq.n	8003950 <MX_ADC2_Init+0x1e0>
  {
    Error_Handler();
 800394c:	f000 fd6c 	bl	8004428 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8003950:	2309      	movs	r3, #9
 8003952:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 14;
 8003954:	230e      	movs	r3, #14
 8003956:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003958:	463b      	mov	r3, r7
 800395a:	4619      	mov	r1, r3
 800395c:	4805      	ldr	r0, [pc, #20]	; (8003974 <MX_ADC2_Init+0x204>)
 800395e:	f002 f8e5 	bl	8005b2c <HAL_ADC_ConfigChannel>
 8003962:	4603      	mov	r3, r0
 8003964:	2b00      	cmp	r3, #0
 8003966:	d001      	beq.n	800396c <MX_ADC2_Init+0x1fc>
  {
    Error_Handler();
 8003968:	f000 fd5e 	bl	8004428 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800396c:	bf00      	nop
 800396e:	3710      	adds	r7, #16
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}
 8003974:	2000a1f4 	.word	0x2000a1f4
 8003978:	40012100 	.word	0x40012100
 800397c:	0f000001 	.word	0x0f000001

08003980 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003984:	4b12      	ldr	r3, [pc, #72]	; (80039d0 <MX_I2C1_Init+0x50>)
 8003986:	4a13      	ldr	r2, [pc, #76]	; (80039d4 <MX_I2C1_Init+0x54>)
 8003988:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800398a:	4b11      	ldr	r3, [pc, #68]	; (80039d0 <MX_I2C1_Init+0x50>)
 800398c:	4a12      	ldr	r2, [pc, #72]	; (80039d8 <MX_I2C1_Init+0x58>)
 800398e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003990:	4b0f      	ldr	r3, [pc, #60]	; (80039d0 <MX_I2C1_Init+0x50>)
 8003992:	2200      	movs	r2, #0
 8003994:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003996:	4b0e      	ldr	r3, [pc, #56]	; (80039d0 <MX_I2C1_Init+0x50>)
 8003998:	2200      	movs	r2, #0
 800399a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800399c:	4b0c      	ldr	r3, [pc, #48]	; (80039d0 <MX_I2C1_Init+0x50>)
 800399e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80039a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80039a4:	4b0a      	ldr	r3, [pc, #40]	; (80039d0 <MX_I2C1_Init+0x50>)
 80039a6:	2200      	movs	r2, #0
 80039a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80039aa:	4b09      	ldr	r3, [pc, #36]	; (80039d0 <MX_I2C1_Init+0x50>)
 80039ac:	2200      	movs	r2, #0
 80039ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80039b0:	4b07      	ldr	r3, [pc, #28]	; (80039d0 <MX_I2C1_Init+0x50>)
 80039b2:	2200      	movs	r2, #0
 80039b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 80039b6:	4b06      	ldr	r3, [pc, #24]	; (80039d0 <MX_I2C1_Init+0x50>)
 80039b8:	2280      	movs	r2, #128	; 0x80
 80039ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80039bc:	4804      	ldr	r0, [pc, #16]	; (80039d0 <MX_I2C1_Init+0x50>)
 80039be:	f003 fa07 	bl	8006dd0 <HAL_I2C_Init>
 80039c2:	4603      	mov	r3, r0
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d001      	beq.n	80039cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80039c8:	f000 fd2e 	bl	8004428 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80039cc:	bf00      	nop
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	2000a23c 	.word	0x2000a23c
 80039d4:	40005400 	.word	0x40005400
 80039d8:	000186a0 	.word	0x000186a0

080039dc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80039e0:	4b12      	ldr	r3, [pc, #72]	; (8003a2c <MX_I2C2_Init+0x50>)
 80039e2:	4a13      	ldr	r2, [pc, #76]	; (8003a30 <MX_I2C2_Init+0x54>)
 80039e4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80039e6:	4b11      	ldr	r3, [pc, #68]	; (8003a2c <MX_I2C2_Init+0x50>)
 80039e8:	4a12      	ldr	r2, [pc, #72]	; (8003a34 <MX_I2C2_Init+0x58>)
 80039ea:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80039ec:	4b0f      	ldr	r3, [pc, #60]	; (8003a2c <MX_I2C2_Init+0x50>)
 80039ee:	2200      	movs	r2, #0
 80039f0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80039f2:	4b0e      	ldr	r3, [pc, #56]	; (8003a2c <MX_I2C2_Init+0x50>)
 80039f4:	2200      	movs	r2, #0
 80039f6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80039f8:	4b0c      	ldr	r3, [pc, #48]	; (8003a2c <MX_I2C2_Init+0x50>)
 80039fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80039fe:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003a00:	4b0a      	ldr	r3, [pc, #40]	; (8003a2c <MX_I2C2_Init+0x50>)
 8003a02:	2200      	movs	r2, #0
 8003a04:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8003a06:	4b09      	ldr	r3, [pc, #36]	; (8003a2c <MX_I2C2_Init+0x50>)
 8003a08:	2200      	movs	r2, #0
 8003a0a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003a0c:	4b07      	ldr	r3, [pc, #28]	; (8003a2c <MX_I2C2_Init+0x50>)
 8003a0e:	2200      	movs	r2, #0
 8003a10:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8003a12:	4b06      	ldr	r3, [pc, #24]	; (8003a2c <MX_I2C2_Init+0x50>)
 8003a14:	2280      	movs	r2, #128	; 0x80
 8003a16:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003a18:	4804      	ldr	r0, [pc, #16]	; (8003a2c <MX_I2C2_Init+0x50>)
 8003a1a:	f003 f9d9 	bl	8006dd0 <HAL_I2C_Init>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d001      	beq.n	8003a28 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8003a24:	f000 fd00 	bl	8004428 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003a28:	bf00      	nop
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	2000a2d0 	.word	0x2000a2d0
 8003a30:	40005800 	.word	0x40005800
 8003a34:	000186a0 	.word	0x000186a0

08003a38 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8003a3c:	4b0c      	ldr	r3, [pc, #48]	; (8003a70 <MX_SDIO_SD_Init+0x38>)
 8003a3e:	4a0d      	ldr	r2, [pc, #52]	; (8003a74 <MX_SDIO_SD_Init+0x3c>)
 8003a40:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8003a42:	4b0b      	ldr	r3, [pc, #44]	; (8003a70 <MX_SDIO_SD_Init+0x38>)
 8003a44:	2200      	movs	r2, #0
 8003a46:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8003a48:	4b09      	ldr	r3, [pc, #36]	; (8003a70 <MX_SDIO_SD_Init+0x38>)
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003a4e:	4b08      	ldr	r3, [pc, #32]	; (8003a70 <MX_SDIO_SD_Init+0x38>)
 8003a50:	2200      	movs	r2, #0
 8003a52:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8003a54:	4b06      	ldr	r3, [pc, #24]	; (8003a70 <MX_SDIO_SD_Init+0x38>)
 8003a56:	2200      	movs	r2, #0
 8003a58:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003a5a:	4b05      	ldr	r3, [pc, #20]	; (8003a70 <MX_SDIO_SD_Init+0x38>)
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8003a60:	4b03      	ldr	r3, [pc, #12]	; (8003a70 <MX_SDIO_SD_Init+0x38>)
 8003a62:	2200      	movs	r2, #0
 8003a64:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8003a66:	bf00      	nop
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr
 8003a70:	2000a4d0 	.word	0x2000a4d0
 8003a74:	40012c00 	.word	0x40012c00

08003a78 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003a7c:	4b17      	ldr	r3, [pc, #92]	; (8003adc <MX_SPI2_Init+0x64>)
 8003a7e:	4a18      	ldr	r2, [pc, #96]	; (8003ae0 <MX_SPI2_Init+0x68>)
 8003a80:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003a82:	4b16      	ldr	r3, [pc, #88]	; (8003adc <MX_SPI2_Init+0x64>)
 8003a84:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003a88:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003a8a:	4b14      	ldr	r3, [pc, #80]	; (8003adc <MX_SPI2_Init+0x64>)
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003a90:	4b12      	ldr	r3, [pc, #72]	; (8003adc <MX_SPI2_Init+0x64>)
 8003a92:	2200      	movs	r2, #0
 8003a94:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8003a96:	4b11      	ldr	r3, [pc, #68]	; (8003adc <MX_SPI2_Init+0x64>)
 8003a98:	2202      	movs	r2, #2
 8003a9a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003a9c:	4b0f      	ldr	r3, [pc, #60]	; (8003adc <MX_SPI2_Init+0x64>)
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003aa2:	4b0e      	ldr	r3, [pc, #56]	; (8003adc <MX_SPI2_Init+0x64>)
 8003aa4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003aa8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8003aaa:	4b0c      	ldr	r3, [pc, #48]	; (8003adc <MX_SPI2_Init+0x64>)
 8003aac:	2228      	movs	r2, #40	; 0x28
 8003aae:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003ab0:	4b0a      	ldr	r3, [pc, #40]	; (8003adc <MX_SPI2_Init+0x64>)
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003ab6:	4b09      	ldr	r3, [pc, #36]	; (8003adc <MX_SPI2_Init+0x64>)
 8003ab8:	2200      	movs	r2, #0
 8003aba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003abc:	4b07      	ldr	r3, [pc, #28]	; (8003adc <MX_SPI2_Init+0x64>)
 8003abe:	2200      	movs	r2, #0
 8003ac0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003ac2:	4b06      	ldr	r3, [pc, #24]	; (8003adc <MX_SPI2_Init+0x64>)
 8003ac4:	220a      	movs	r2, #10
 8003ac6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003ac8:	4804      	ldr	r0, [pc, #16]	; (8003adc <MX_SPI2_Init+0x64>)
 8003aca:	f006 fab3 	bl	800a034 <HAL_SPI_Init>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d001      	beq.n	8003ad8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003ad4:	f000 fca8 	bl	8004428 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003ad8:	bf00      	nop
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	2000a11c 	.word	0x2000a11c
 8003ae0:	40003800 	.word	0x40003800

08003ae4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b09a      	sub	sp, #104	; 0x68
 8003ae8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003aea:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003aee:	2224      	movs	r2, #36	; 0x24
 8003af0:	2100      	movs	r1, #0
 8003af2:	4618      	mov	r0, r3
 8003af4:	f00e f9c0 	bl	8011e78 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003af8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003afc:	2200      	movs	r2, #0
 8003afe:	601a      	str	r2, [r3, #0]
 8003b00:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003b02:	f107 0320 	add.w	r3, r7, #32
 8003b06:	2200      	movs	r2, #0
 8003b08:	601a      	str	r2, [r3, #0]
 8003b0a:	605a      	str	r2, [r3, #4]
 8003b0c:	609a      	str	r2, [r3, #8]
 8003b0e:	60da      	str	r2, [r3, #12]
 8003b10:	611a      	str	r2, [r3, #16]
 8003b12:	615a      	str	r2, [r3, #20]
 8003b14:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003b16:	463b      	mov	r3, r7
 8003b18:	2220      	movs	r2, #32
 8003b1a:	2100      	movs	r1, #0
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f00e f9ab 	bl	8011e78 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003b22:	4b42      	ldr	r3, [pc, #264]	; (8003c2c <MX_TIM1_Init+0x148>)
 8003b24:	4a42      	ldr	r2, [pc, #264]	; (8003c30 <MX_TIM1_Init+0x14c>)
 8003b26:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003b28:	4b40      	ldr	r3, [pc, #256]	; (8003c2c <MX_TIM1_Init+0x148>)
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b2e:	4b3f      	ldr	r3, [pc, #252]	; (8003c2c <MX_TIM1_Init+0x148>)
 8003b30:	2200      	movs	r2, #0
 8003b32:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003b34:	4b3d      	ldr	r3, [pc, #244]	; (8003c2c <MX_TIM1_Init+0x148>)
 8003b36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b3a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b3c:	4b3b      	ldr	r3, [pc, #236]	; (8003c2c <MX_TIM1_Init+0x148>)
 8003b3e:	2200      	movs	r2, #0
 8003b40:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003b42:	4b3a      	ldr	r3, [pc, #232]	; (8003c2c <MX_TIM1_Init+0x148>)
 8003b44:	2200      	movs	r2, #0
 8003b46:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b48:	4b38      	ldr	r3, [pc, #224]	; (8003c2c <MX_TIM1_Init+0x148>)
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003b4e:	4837      	ldr	r0, [pc, #220]	; (8003c2c <MX_TIM1_Init+0x148>)
 8003b50:	f007 f813 	bl	800ab7a <HAL_TIM_PWM_Init>
 8003b54:	4603      	mov	r3, r0
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d001      	beq.n	8003b5e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8003b5a:	f000 fc65 	bl	8004428 <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003b62:	2300      	movs	r3, #0
 8003b64:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003b66:	2301      	movs	r3, #1
 8003b68:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003b72:	2300      	movs	r3, #0
 8003b74:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003b76:	2301      	movs	r3, #1
 8003b78:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8003b82:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003b86:	4619      	mov	r1, r3
 8003b88:	4828      	ldr	r0, [pc, #160]	; (8003c2c <MX_TIM1_Init+0x148>)
 8003b8a:	f007 f85f 	bl	800ac4c <HAL_TIM_Encoder_Init>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d001      	beq.n	8003b98 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8003b94:	f000 fc48 	bl	8004428 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003ba0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	4821      	ldr	r0, [pc, #132]	; (8003c2c <MX_TIM1_Init+0x148>)
 8003ba8:	f007 fd86 	bl	800b6b8 <HAL_TIMEx_MasterConfigSynchronization>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d001      	beq.n	8003bb6 <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 8003bb2:	f000 fc39 	bl	8004428 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003bb6:	2360      	movs	r3, #96	; 0x60
 8003bb8:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003bd2:	f107 0320 	add.w	r3, r7, #32
 8003bd6:	2208      	movs	r2, #8
 8003bd8:	4619      	mov	r1, r3
 8003bda:	4814      	ldr	r0, [pc, #80]	; (8003c2c <MX_TIM1_Init+0x148>)
 8003bdc:	f007 fa08 	bl	800aff0 <HAL_TIM_PWM_ConfigChannel>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d001      	beq.n	8003bea <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8003be6:	f000 fc1f 	bl	8004428 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003bea:	2300      	movs	r3, #0
 8003bec:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003bfe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003c02:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003c04:	2300      	movs	r3, #0
 8003c06:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003c08:	463b      	mov	r3, r7
 8003c0a:	4619      	mov	r1, r3
 8003c0c:	4807      	ldr	r0, [pc, #28]	; (8003c2c <MX_TIM1_Init+0x148>)
 8003c0e:	f007 fdcf 	bl	800b7b0 <HAL_TIMEx_ConfigBreakDeadTime>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d001      	beq.n	8003c1c <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8003c18:	f000 fc06 	bl	8004428 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003c1c:	4803      	ldr	r0, [pc, #12]	; (8003c2c <MX_TIM1_Init+0x148>)
 8003c1e:	f000 ffeb 	bl	8004bf8 <HAL_TIM_MspPostInit>

}
 8003c22:	bf00      	nop
 8003c24:	3768      	adds	r7, #104	; 0x68
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	2000a490 	.word	0x2000a490
 8003c30:	40010000 	.word	0x40010000

08003c34 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b08a      	sub	sp, #40	; 0x28
 8003c38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c3a:	f107 0320 	add.w	r3, r7, #32
 8003c3e:	2200      	movs	r2, #0
 8003c40:	601a      	str	r2, [r3, #0]
 8003c42:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003c44:	1d3b      	adds	r3, r7, #4
 8003c46:	2200      	movs	r2, #0
 8003c48:	601a      	str	r2, [r3, #0]
 8003c4a:	605a      	str	r2, [r3, #4]
 8003c4c:	609a      	str	r2, [r3, #8]
 8003c4e:	60da      	str	r2, [r3, #12]
 8003c50:	611a      	str	r2, [r3, #16]
 8003c52:	615a      	str	r2, [r3, #20]
 8003c54:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003c56:	4b27      	ldr	r3, [pc, #156]	; (8003cf4 <MX_TIM3_Init+0xc0>)
 8003c58:	4a27      	ldr	r2, [pc, #156]	; (8003cf8 <MX_TIM3_Init+0xc4>)
 8003c5a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003c5c:	4b25      	ldr	r3, [pc, #148]	; (8003cf4 <MX_TIM3_Init+0xc0>)
 8003c5e:	2200      	movs	r2, #0
 8003c60:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c62:	4b24      	ldr	r3, [pc, #144]	; (8003cf4 <MX_TIM3_Init+0xc0>)
 8003c64:	2200      	movs	r2, #0
 8003c66:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003c68:	4b22      	ldr	r3, [pc, #136]	; (8003cf4 <MX_TIM3_Init+0xc0>)
 8003c6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c6e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c70:	4b20      	ldr	r3, [pc, #128]	; (8003cf4 <MX_TIM3_Init+0xc0>)
 8003c72:	2200      	movs	r2, #0
 8003c74:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c76:	4b1f      	ldr	r3, [pc, #124]	; (8003cf4 <MX_TIM3_Init+0xc0>)
 8003c78:	2200      	movs	r2, #0
 8003c7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003c7c:	481d      	ldr	r0, [pc, #116]	; (8003cf4 <MX_TIM3_Init+0xc0>)
 8003c7e:	f006 ff7c 	bl	800ab7a <HAL_TIM_PWM_Init>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d001      	beq.n	8003c8c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8003c88:	f000 fbce 	bl	8004428 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c90:	2300      	movs	r3, #0
 8003c92:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003c94:	f107 0320 	add.w	r3, r7, #32
 8003c98:	4619      	mov	r1, r3
 8003c9a:	4816      	ldr	r0, [pc, #88]	; (8003cf4 <MX_TIM3_Init+0xc0>)
 8003c9c:	f007 fd0c 	bl	800b6b8 <HAL_TIMEx_MasterConfigSynchronization>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d001      	beq.n	8003caa <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8003ca6:	f000 fbbf 	bl	8004428 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003caa:	2360      	movs	r3, #96	; 0x60
 8003cac:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003cba:	1d3b      	adds	r3, r7, #4
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	480c      	ldr	r0, [pc, #48]	; (8003cf4 <MX_TIM3_Init+0xc0>)
 8003cc2:	f007 f995 	bl	800aff0 <HAL_TIM_PWM_ConfigChannel>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d001      	beq.n	8003cd0 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8003ccc:	f000 fbac 	bl	8004428 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003cd0:	1d3b      	adds	r3, r7, #4
 8003cd2:	2204      	movs	r2, #4
 8003cd4:	4619      	mov	r1, r3
 8003cd6:	4807      	ldr	r0, [pc, #28]	; (8003cf4 <MX_TIM3_Init+0xc0>)
 8003cd8:	f007 f98a 	bl	800aff0 <HAL_TIM_PWM_ConfigChannel>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d001      	beq.n	8003ce6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8003ce2:	f000 fba1 	bl	8004428 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003ce6:	4803      	ldr	r0, [pc, #12]	; (8003cf4 <MX_TIM3_Init+0xc0>)
 8003ce8:	f000 ff86 	bl	8004bf8 <HAL_TIM_MspPostInit>

}
 8003cec:	bf00      	nop
 8003cee:	3728      	adds	r7, #40	; 0x28
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	2000a328 	.word	0x2000a328
 8003cf8:	40000400 	.word	0x40000400

08003cfc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b08a      	sub	sp, #40	; 0x28
 8003d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d02:	f107 0320 	add.w	r3, r7, #32
 8003d06:	2200      	movs	r2, #0
 8003d08:	601a      	str	r2, [r3, #0]
 8003d0a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003d0c:	1d3b      	adds	r3, r7, #4
 8003d0e:	2200      	movs	r2, #0
 8003d10:	601a      	str	r2, [r3, #0]
 8003d12:	605a      	str	r2, [r3, #4]
 8003d14:	609a      	str	r2, [r3, #8]
 8003d16:	60da      	str	r2, [r3, #12]
 8003d18:	611a      	str	r2, [r3, #16]
 8003d1a:	615a      	str	r2, [r3, #20]
 8003d1c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003d1e:	4b27      	ldr	r3, [pc, #156]	; (8003dbc <MX_TIM4_Init+0xc0>)
 8003d20:	4a27      	ldr	r2, [pc, #156]	; (8003dc0 <MX_TIM4_Init+0xc4>)
 8003d22:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003d24:	4b25      	ldr	r3, [pc, #148]	; (8003dbc <MX_TIM4_Init+0xc0>)
 8003d26:	2200      	movs	r2, #0
 8003d28:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d2a:	4b24      	ldr	r3, [pc, #144]	; (8003dbc <MX_TIM4_Init+0xc0>)
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1800;
 8003d30:	4b22      	ldr	r3, [pc, #136]	; (8003dbc <MX_TIM4_Init+0xc0>)
 8003d32:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8003d36:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d38:	4b20      	ldr	r3, [pc, #128]	; (8003dbc <MX_TIM4_Init+0xc0>)
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d3e:	4b1f      	ldr	r3, [pc, #124]	; (8003dbc <MX_TIM4_Init+0xc0>)
 8003d40:	2200      	movs	r2, #0
 8003d42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003d44:	481d      	ldr	r0, [pc, #116]	; (8003dbc <MX_TIM4_Init+0xc0>)
 8003d46:	f006 ff18 	bl	800ab7a <HAL_TIM_PWM_Init>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d001      	beq.n	8003d54 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8003d50:	f000 fb6a 	bl	8004428 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d54:	2300      	movs	r3, #0
 8003d56:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003d5c:	f107 0320 	add.w	r3, r7, #32
 8003d60:	4619      	mov	r1, r3
 8003d62:	4816      	ldr	r0, [pc, #88]	; (8003dbc <MX_TIM4_Init+0xc0>)
 8003d64:	f007 fca8 	bl	800b6b8 <HAL_TIMEx_MasterConfigSynchronization>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d001      	beq.n	8003d72 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8003d6e:	f000 fb5b 	bl	8004428 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003d72:	2360      	movs	r3, #96	; 0x60
 8003d74:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003d76:	2300      	movs	r3, #0
 8003d78:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003d82:	1d3b      	adds	r3, r7, #4
 8003d84:	2208      	movs	r2, #8
 8003d86:	4619      	mov	r1, r3
 8003d88:	480c      	ldr	r0, [pc, #48]	; (8003dbc <MX_TIM4_Init+0xc0>)
 8003d8a:	f007 f931 	bl	800aff0 <HAL_TIM_PWM_ConfigChannel>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d001      	beq.n	8003d98 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8003d94:	f000 fb48 	bl	8004428 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003d98:	1d3b      	adds	r3, r7, #4
 8003d9a:	220c      	movs	r2, #12
 8003d9c:	4619      	mov	r1, r3
 8003d9e:	4807      	ldr	r0, [pc, #28]	; (8003dbc <MX_TIM4_Init+0xc0>)
 8003da0:	f007 f926 	bl	800aff0 <HAL_TIM_PWM_ConfigChannel>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d001      	beq.n	8003dae <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8003daa:	f000 fb3d 	bl	8004428 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8003dae:	4803      	ldr	r0, [pc, #12]	; (8003dbc <MX_TIM4_Init+0xc0>)
 8003db0:	f000 ff22 	bl	8004bf8 <HAL_TIM_MspPostInit>

}
 8003db4:	bf00      	nop
 8003db6:	3728      	adds	r7, #40	; 0x28
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}
 8003dbc:	2000a1b4 	.word	0x2000a1b4
 8003dc0:	40000800 	.word	0x40000800

08003dc4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b082      	sub	sp, #8
 8003dc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003dca:	463b      	mov	r3, r7
 8003dcc:	2200      	movs	r2, #0
 8003dce:	601a      	str	r2, [r3, #0]
 8003dd0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003dd2:	4b15      	ldr	r3, [pc, #84]	; (8003e28 <MX_TIM6_Init+0x64>)
 8003dd4:	4a15      	ldr	r2, [pc, #84]	; (8003e2c <MX_TIM6_Init+0x68>)
 8003dd6:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 89;
 8003dd8:	4b13      	ldr	r3, [pc, #76]	; (8003e28 <MX_TIM6_Init+0x64>)
 8003dda:	2259      	movs	r2, #89	; 0x59
 8003ddc:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003dde:	4b12      	ldr	r3, [pc, #72]	; (8003e28 <MX_TIM6_Init+0x64>)
 8003de0:	2200      	movs	r2, #0
 8003de2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8003de4:	4b10      	ldr	r3, [pc, #64]	; (8003e28 <MX_TIM6_Init+0x64>)
 8003de6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003dea:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003dec:	4b0e      	ldr	r3, [pc, #56]	; (8003e28 <MX_TIM6_Init+0x64>)
 8003dee:	2280      	movs	r2, #128	; 0x80
 8003df0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003df2:	480d      	ldr	r0, [pc, #52]	; (8003e28 <MX_TIM6_Init+0x64>)
 8003df4:	f006 fe72 	bl	800aadc <HAL_TIM_Base_Init>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d001      	beq.n	8003e02 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8003dfe:	f000 fb13 	bl	8004428 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e02:	2300      	movs	r3, #0
 8003e04:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e06:	2300      	movs	r3, #0
 8003e08:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003e0a:	463b      	mov	r3, r7
 8003e0c:	4619      	mov	r1, r3
 8003e0e:	4806      	ldr	r0, [pc, #24]	; (8003e28 <MX_TIM6_Init+0x64>)
 8003e10:	f007 fc52 	bl	800b6b8 <HAL_TIMEx_MasterConfigSynchronization>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d001      	beq.n	8003e1e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8003e1a:	f000 fb05 	bl	8004428 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003e1e:	bf00      	nop
 8003e20:	3708      	adds	r7, #8
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	2000a450 	.word	0x2000a450
 8003e2c:	40001000 	.word	0x40001000

08003e30 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b082      	sub	sp, #8
 8003e34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e36:	463b      	mov	r3, r7
 8003e38:	2200      	movs	r2, #0
 8003e3a:	601a      	str	r2, [r3, #0]
 8003e3c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003e3e:	4b14      	ldr	r3, [pc, #80]	; (8003e90 <MX_TIM7_Init+0x60>)
 8003e40:	4a14      	ldr	r2, [pc, #80]	; (8003e94 <MX_TIM7_Init+0x64>)
 8003e42:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 179;
 8003e44:	4b12      	ldr	r3, [pc, #72]	; (8003e90 <MX_TIM7_Init+0x60>)
 8003e46:	22b3      	movs	r2, #179	; 0xb3
 8003e48:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e4a:	4b11      	ldr	r3, [pc, #68]	; (8003e90 <MX_TIM7_Init+0x60>)
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 49;
 8003e50:	4b0f      	ldr	r3, [pc, #60]	; (8003e90 <MX_TIM7_Init+0x60>)
 8003e52:	2231      	movs	r2, #49	; 0x31
 8003e54:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003e56:	4b0e      	ldr	r3, [pc, #56]	; (8003e90 <MX_TIM7_Init+0x60>)
 8003e58:	2280      	movs	r2, #128	; 0x80
 8003e5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003e5c:	480c      	ldr	r0, [pc, #48]	; (8003e90 <MX_TIM7_Init+0x60>)
 8003e5e:	f006 fe3d 	bl	800aadc <HAL_TIM_Base_Init>
 8003e62:	4603      	mov	r3, r0
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d001      	beq.n	8003e6c <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 8003e68:	f000 fade 	bl	8004428 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e70:	2300      	movs	r3, #0
 8003e72:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003e74:	463b      	mov	r3, r7
 8003e76:	4619      	mov	r1, r3
 8003e78:	4805      	ldr	r0, [pc, #20]	; (8003e90 <MX_TIM7_Init+0x60>)
 8003e7a:	f007 fc1d 	bl	800b6b8 <HAL_TIMEx_MasterConfigSynchronization>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d001      	beq.n	8003e88 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 8003e84:	f000 fad0 	bl	8004428 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003e88:	bf00      	nop
 8003e8a:	3708      	adds	r7, #8
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	2000a5f4 	.word	0x2000a5f4
 8003e94:	40001400 	.word	0x40001400

08003e98 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b08c      	sub	sp, #48	; 0x30
 8003e9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8003e9e:	f107 030c 	add.w	r3, r7, #12
 8003ea2:	2224      	movs	r2, #36	; 0x24
 8003ea4:	2100      	movs	r1, #0
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f00d ffe6 	bl	8011e78 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003eac:	1d3b      	adds	r3, r7, #4
 8003eae:	2200      	movs	r2, #0
 8003eb0:	601a      	str	r2, [r3, #0]
 8003eb2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003eb4:	4b22      	ldr	r3, [pc, #136]	; (8003f40 <MX_TIM8_Init+0xa8>)
 8003eb6:	4a23      	ldr	r2, [pc, #140]	; (8003f44 <MX_TIM8_Init+0xac>)
 8003eb8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8003eba:	4b21      	ldr	r3, [pc, #132]	; (8003f40 <MX_TIM8_Init+0xa8>)
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8003ec0:	4b1f      	ldr	r3, [pc, #124]	; (8003f40 <MX_TIM8_Init+0xa8>)
 8003ec2:	2210      	movs	r2, #16
 8003ec4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8003ec6:	4b1e      	ldr	r3, [pc, #120]	; (8003f40 <MX_TIM8_Init+0xa8>)
 8003ec8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ecc:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ece:	4b1c      	ldr	r3, [pc, #112]	; (8003f40 <MX_TIM8_Init+0xa8>)
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003ed4:	4b1a      	ldr	r3, [pc, #104]	; (8003f40 <MX_TIM8_Init+0xa8>)
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003eda:	4b19      	ldr	r3, [pc, #100]	; (8003f40 <MX_TIM8_Init+0xa8>)
 8003edc:	2200      	movs	r2, #0
 8003ede:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003eec:	2300      	movs	r3, #0
 8003eee:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8003efc:	2300      	movs	r3, #0
 8003efe:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8003f00:	2300      	movs	r3, #0
 8003f02:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8003f04:	f107 030c 	add.w	r3, r7, #12
 8003f08:	4619      	mov	r1, r3
 8003f0a:	480d      	ldr	r0, [pc, #52]	; (8003f40 <MX_TIM8_Init+0xa8>)
 8003f0c:	f006 fe9e 	bl	800ac4c <HAL_TIM_Encoder_Init>
 8003f10:	4603      	mov	r3, r0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d001      	beq.n	8003f1a <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8003f16:	f000 fa87 	bl	8004428 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003f22:	1d3b      	adds	r3, r7, #4
 8003f24:	4619      	mov	r1, r3
 8003f26:	4806      	ldr	r0, [pc, #24]	; (8003f40 <MX_TIM8_Init+0xa8>)
 8003f28:	f007 fbc6 	bl	800b6b8 <HAL_TIMEx_MasterConfigSynchronization>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d001      	beq.n	8003f36 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8003f32:	f000 fa79 	bl	8004428 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8003f36:	bf00      	nop
 8003f38:	3730      	adds	r7, #48	; 0x30
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	bf00      	nop
 8003f40:	2000a174 	.word	0x2000a174
 8003f44:	40010400 	.word	0x40010400

08003f48 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b088      	sub	sp, #32
 8003f4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003f4e:	1d3b      	adds	r3, r7, #4
 8003f50:	2200      	movs	r2, #0
 8003f52:	601a      	str	r2, [r3, #0]
 8003f54:	605a      	str	r2, [r3, #4]
 8003f56:	609a      	str	r2, [r3, #8]
 8003f58:	60da      	str	r2, [r3, #12]
 8003f5a:	611a      	str	r2, [r3, #16]
 8003f5c:	615a      	str	r2, [r3, #20]
 8003f5e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8003f60:	4b1e      	ldr	r3, [pc, #120]	; (8003fdc <MX_TIM10_Init+0x94>)
 8003f62:	4a1f      	ldr	r2, [pc, #124]	; (8003fe0 <MX_TIM10_Init+0x98>)
 8003f64:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8003f66:	4b1d      	ldr	r3, [pc, #116]	; (8003fdc <MX_TIM10_Init+0x94>)
 8003f68:	2200      	movs	r2, #0
 8003f6a:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f6c:	4b1b      	ldr	r3, [pc, #108]	; (8003fdc <MX_TIM10_Init+0x94>)
 8003f6e:	2200      	movs	r2, #0
 8003f70:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8003f72:	4b1a      	ldr	r3, [pc, #104]	; (8003fdc <MX_TIM10_Init+0x94>)
 8003f74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f78:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f7a:	4b18      	ldr	r3, [pc, #96]	; (8003fdc <MX_TIM10_Init+0x94>)
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f80:	4b16      	ldr	r3, [pc, #88]	; (8003fdc <MX_TIM10_Init+0x94>)
 8003f82:	2200      	movs	r2, #0
 8003f84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8003f86:	4815      	ldr	r0, [pc, #84]	; (8003fdc <MX_TIM10_Init+0x94>)
 8003f88:	f006 fda8 	bl	800aadc <HAL_TIM_Base_Init>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d001      	beq.n	8003f96 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8003f92:	f000 fa49 	bl	8004428 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8003f96:	4811      	ldr	r0, [pc, #68]	; (8003fdc <MX_TIM10_Init+0x94>)
 8003f98:	f006 fdef 	bl	800ab7a <HAL_TIM_PWM_Init>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d001      	beq.n	8003fa6 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8003fa2:	f000 fa41 	bl	8004428 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003fa6:	2360      	movs	r3, #96	; 0x60
 8003fa8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003faa:	2300      	movs	r3, #0
 8003fac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003fb6:	1d3b      	adds	r3, r7, #4
 8003fb8:	2200      	movs	r2, #0
 8003fba:	4619      	mov	r1, r3
 8003fbc:	4807      	ldr	r0, [pc, #28]	; (8003fdc <MX_TIM10_Init+0x94>)
 8003fbe:	f007 f817 	bl	800aff0 <HAL_TIM_PWM_ConfigChannel>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d001      	beq.n	8003fcc <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8003fc8:	f000 fa2e 	bl	8004428 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8003fcc:	4803      	ldr	r0, [pc, #12]	; (8003fdc <MX_TIM10_Init+0x94>)
 8003fce:	f000 fe13 	bl	8004bf8 <HAL_TIM_MspPostInit>

}
 8003fd2:	bf00      	nop
 8003fd4:	3720      	adds	r7, #32
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	2000a290 	.word	0x2000a290
 8003fe0:	40014400 	.word	0x40014400

08003fe4 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b088      	sub	sp, #32
 8003fe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003fea:	1d3b      	adds	r3, r7, #4
 8003fec:	2200      	movs	r2, #0
 8003fee:	601a      	str	r2, [r3, #0]
 8003ff0:	605a      	str	r2, [r3, #4]
 8003ff2:	609a      	str	r2, [r3, #8]
 8003ff4:	60da      	str	r2, [r3, #12]
 8003ff6:	611a      	str	r2, [r3, #16]
 8003ff8:	615a      	str	r2, [r3, #20]
 8003ffa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8003ffc:	4b1e      	ldr	r3, [pc, #120]	; (8004078 <MX_TIM11_Init+0x94>)
 8003ffe:	4a1f      	ldr	r2, [pc, #124]	; (800407c <MX_TIM11_Init+0x98>)
 8004000:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8004002:	4b1d      	ldr	r3, [pc, #116]	; (8004078 <MX_TIM11_Init+0x94>)
 8004004:	2200      	movs	r2, #0
 8004006:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004008:	4b1b      	ldr	r3, [pc, #108]	; (8004078 <MX_TIM11_Init+0x94>)
 800400a:	2200      	movs	r2, #0
 800400c:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 800400e:	4b1a      	ldr	r3, [pc, #104]	; (8004078 <MX_TIM11_Init+0x94>)
 8004010:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004014:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004016:	4b18      	ldr	r3, [pc, #96]	; (8004078 <MX_TIM11_Init+0x94>)
 8004018:	2200      	movs	r2, #0
 800401a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800401c:	4b16      	ldr	r3, [pc, #88]	; (8004078 <MX_TIM11_Init+0x94>)
 800401e:	2200      	movs	r2, #0
 8004020:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8004022:	4815      	ldr	r0, [pc, #84]	; (8004078 <MX_TIM11_Init+0x94>)
 8004024:	f006 fd5a 	bl	800aadc <HAL_TIM_Base_Init>
 8004028:	4603      	mov	r3, r0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d001      	beq.n	8004032 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 800402e:	f000 f9fb 	bl	8004428 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8004032:	4811      	ldr	r0, [pc, #68]	; (8004078 <MX_TIM11_Init+0x94>)
 8004034:	f006 fda1 	bl	800ab7a <HAL_TIM_PWM_Init>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d001      	beq.n	8004042 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 800403e:	f000 f9f3 	bl	8004428 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004042:	2360      	movs	r3, #96	; 0x60
 8004044:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004046:	2300      	movs	r3, #0
 8004048:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800404a:	2300      	movs	r3, #0
 800404c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800404e:	2300      	movs	r3, #0
 8004050:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004052:	1d3b      	adds	r3, r7, #4
 8004054:	2200      	movs	r2, #0
 8004056:	4619      	mov	r1, r3
 8004058:	4807      	ldr	r0, [pc, #28]	; (8004078 <MX_TIM11_Init+0x94>)
 800405a:	f006 ffc9 	bl	800aff0 <HAL_TIM_PWM_ConfigChannel>
 800405e:	4603      	mov	r3, r0
 8004060:	2b00      	cmp	r3, #0
 8004062:	d001      	beq.n	8004068 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8004064:	f000 f9e0 	bl	8004428 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8004068:	4803      	ldr	r0, [pc, #12]	; (8004078 <MX_TIM11_Init+0x94>)
 800406a:	f000 fdc5 	bl	8004bf8 <HAL_TIM_MspPostInit>

}
 800406e:	bf00      	nop
 8004070:	3720      	adds	r7, #32
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
 8004076:	bf00      	nop
 8004078:	2000a3b0 	.word	0x2000a3b0
 800407c:	40014800 	.word	0x40014800

08004080 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8004084:	4b0e      	ldr	r3, [pc, #56]	; (80040c0 <MX_TIM13_Init+0x40>)
 8004086:	4a0f      	ldr	r2, [pc, #60]	; (80040c4 <MX_TIM13_Init+0x44>)
 8004088:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 89;
 800408a:	4b0d      	ldr	r3, [pc, #52]	; (80040c0 <MX_TIM13_Init+0x40>)
 800408c:	2259      	movs	r2, #89	; 0x59
 800408e:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004090:	4b0b      	ldr	r3, [pc, #44]	; (80040c0 <MX_TIM13_Init+0x40>)
 8004092:	2200      	movs	r2, #0
 8004094:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 9999;
 8004096:	4b0a      	ldr	r3, [pc, #40]	; (80040c0 <MX_TIM13_Init+0x40>)
 8004098:	f242 720f 	movw	r2, #9999	; 0x270f
 800409c:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800409e:	4b08      	ldr	r3, [pc, #32]	; (80040c0 <MX_TIM13_Init+0x40>)
 80040a0:	2200      	movs	r2, #0
 80040a2:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80040a4:	4b06      	ldr	r3, [pc, #24]	; (80040c0 <MX_TIM13_Init+0x40>)
 80040a6:	2280      	movs	r2, #128	; 0x80
 80040a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80040aa:	4805      	ldr	r0, [pc, #20]	; (80040c0 <MX_TIM13_Init+0x40>)
 80040ac:	f006 fd16 	bl	800aadc <HAL_TIM_Base_Init>
 80040b0:	4603      	mov	r3, r0
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d001      	beq.n	80040ba <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 80040b6:	f000 f9b7 	bl	8004428 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 80040ba:	bf00      	nop
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop
 80040c0:	2000a370 	.word	0x2000a370
 80040c4:	40001c00 	.word	0x40001c00

080040c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80040cc:	4b11      	ldr	r3, [pc, #68]	; (8004114 <MX_USART2_UART_Init+0x4c>)
 80040ce:	4a12      	ldr	r2, [pc, #72]	; (8004118 <MX_USART2_UART_Init+0x50>)
 80040d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80040d2:	4b10      	ldr	r3, [pc, #64]	; (8004114 <MX_USART2_UART_Init+0x4c>)
 80040d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80040d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80040da:	4b0e      	ldr	r3, [pc, #56]	; (8004114 <MX_USART2_UART_Init+0x4c>)
 80040dc:	2200      	movs	r2, #0
 80040de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80040e0:	4b0c      	ldr	r3, [pc, #48]	; (8004114 <MX_USART2_UART_Init+0x4c>)
 80040e2:	2200      	movs	r2, #0
 80040e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80040e6:	4b0b      	ldr	r3, [pc, #44]	; (8004114 <MX_USART2_UART_Init+0x4c>)
 80040e8:	2200      	movs	r2, #0
 80040ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80040ec:	4b09      	ldr	r3, [pc, #36]	; (8004114 <MX_USART2_UART_Init+0x4c>)
 80040ee:	220c      	movs	r2, #12
 80040f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80040f2:	4b08      	ldr	r3, [pc, #32]	; (8004114 <MX_USART2_UART_Init+0x4c>)
 80040f4:	2200      	movs	r2, #0
 80040f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80040f8:	4b06      	ldr	r3, [pc, #24]	; (8004114 <MX_USART2_UART_Init+0x4c>)
 80040fa:	2200      	movs	r2, #0
 80040fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80040fe:	4805      	ldr	r0, [pc, #20]	; (8004114 <MX_USART2_UART_Init+0x4c>)
 8004100:	f007 fbbc 	bl	800b87c <HAL_UART_Init>
 8004104:	4603      	mov	r3, r0
 8004106:	2b00      	cmp	r3, #0
 8004108:	d001      	beq.n	800410e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800410a:	f000 f98d 	bl	8004428 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800410e:	bf00      	nop
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	2000a554 	.word	0x2000a554
 8004118:	40004400 	.word	0x40004400

0800411c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b082      	sub	sp, #8
 8004120:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004122:	2300      	movs	r3, #0
 8004124:	607b      	str	r3, [r7, #4]
 8004126:	4b14      	ldr	r3, [pc, #80]	; (8004178 <MX_DMA_Init+0x5c>)
 8004128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800412a:	4a13      	ldr	r2, [pc, #76]	; (8004178 <MX_DMA_Init+0x5c>)
 800412c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004130:	6313      	str	r3, [r2, #48]	; 0x30
 8004132:	4b11      	ldr	r3, [pc, #68]	; (8004178 <MX_DMA_Init+0x5c>)
 8004134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004136:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800413a:	607b      	str	r3, [r7, #4]
 800413c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800413e:	2200      	movs	r2, #0
 8004140:	2100      	movs	r1, #0
 8004142:	203a      	movs	r0, #58	; 0x3a
 8004144:	f002 f87d 	bl	8006242 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8004148:	203a      	movs	r0, #58	; 0x3a
 800414a:	f002 f896 	bl	800627a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800414e:	2200      	movs	r2, #0
 8004150:	2100      	movs	r1, #0
 8004152:	203b      	movs	r0, #59	; 0x3b
 8004154:	f002 f875 	bl	8006242 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8004158:	203b      	movs	r0, #59	; 0x3b
 800415a:	f002 f88e 	bl	800627a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800415e:	2200      	movs	r2, #0
 8004160:	2100      	movs	r1, #0
 8004162:	2045      	movs	r0, #69	; 0x45
 8004164:	f002 f86d 	bl	8006242 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8004168:	2045      	movs	r0, #69	; 0x45
 800416a:	f002 f886 	bl	800627a <HAL_NVIC_EnableIRQ>

}
 800416e:	bf00      	nop
 8004170:	3708      	adds	r7, #8
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	40023800 	.word	0x40023800

0800417c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b08c      	sub	sp, #48	; 0x30
 8004180:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004182:	f107 031c 	add.w	r3, r7, #28
 8004186:	2200      	movs	r2, #0
 8004188:	601a      	str	r2, [r3, #0]
 800418a:	605a      	str	r2, [r3, #4]
 800418c:	609a      	str	r2, [r3, #8]
 800418e:	60da      	str	r2, [r3, #12]
 8004190:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004192:	2300      	movs	r3, #0
 8004194:	61bb      	str	r3, [r7, #24]
 8004196:	4b9c      	ldr	r3, [pc, #624]	; (8004408 <MX_GPIO_Init+0x28c>)
 8004198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800419a:	4a9b      	ldr	r2, [pc, #620]	; (8004408 <MX_GPIO_Init+0x28c>)
 800419c:	f043 0310 	orr.w	r3, r3, #16
 80041a0:	6313      	str	r3, [r2, #48]	; 0x30
 80041a2:	4b99      	ldr	r3, [pc, #612]	; (8004408 <MX_GPIO_Init+0x28c>)
 80041a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a6:	f003 0310 	and.w	r3, r3, #16
 80041aa:	61bb      	str	r3, [r7, #24]
 80041ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80041ae:	2300      	movs	r3, #0
 80041b0:	617b      	str	r3, [r7, #20]
 80041b2:	4b95      	ldr	r3, [pc, #596]	; (8004408 <MX_GPIO_Init+0x28c>)
 80041b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b6:	4a94      	ldr	r2, [pc, #592]	; (8004408 <MX_GPIO_Init+0x28c>)
 80041b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041bc:	6313      	str	r3, [r2, #48]	; 0x30
 80041be:	4b92      	ldr	r3, [pc, #584]	; (8004408 <MX_GPIO_Init+0x28c>)
 80041c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041c6:	617b      	str	r3, [r7, #20]
 80041c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80041ca:	2300      	movs	r3, #0
 80041cc:	613b      	str	r3, [r7, #16]
 80041ce:	4b8e      	ldr	r3, [pc, #568]	; (8004408 <MX_GPIO_Init+0x28c>)
 80041d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d2:	4a8d      	ldr	r2, [pc, #564]	; (8004408 <MX_GPIO_Init+0x28c>)
 80041d4:	f043 0304 	orr.w	r3, r3, #4
 80041d8:	6313      	str	r3, [r2, #48]	; 0x30
 80041da:	4b8b      	ldr	r3, [pc, #556]	; (8004408 <MX_GPIO_Init+0x28c>)
 80041dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041de:	f003 0304 	and.w	r3, r3, #4
 80041e2:	613b      	str	r3, [r7, #16]
 80041e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80041e6:	2300      	movs	r3, #0
 80041e8:	60fb      	str	r3, [r7, #12]
 80041ea:	4b87      	ldr	r3, [pc, #540]	; (8004408 <MX_GPIO_Init+0x28c>)
 80041ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ee:	4a86      	ldr	r2, [pc, #536]	; (8004408 <MX_GPIO_Init+0x28c>)
 80041f0:	f043 0301 	orr.w	r3, r3, #1
 80041f4:	6313      	str	r3, [r2, #48]	; 0x30
 80041f6:	4b84      	ldr	r3, [pc, #528]	; (8004408 <MX_GPIO_Init+0x28c>)
 80041f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041fa:	f003 0301 	and.w	r3, r3, #1
 80041fe:	60fb      	str	r3, [r7, #12]
 8004200:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004202:	2300      	movs	r3, #0
 8004204:	60bb      	str	r3, [r7, #8]
 8004206:	4b80      	ldr	r3, [pc, #512]	; (8004408 <MX_GPIO_Init+0x28c>)
 8004208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800420a:	4a7f      	ldr	r2, [pc, #508]	; (8004408 <MX_GPIO_Init+0x28c>)
 800420c:	f043 0302 	orr.w	r3, r3, #2
 8004210:	6313      	str	r3, [r2, #48]	; 0x30
 8004212:	4b7d      	ldr	r3, [pc, #500]	; (8004408 <MX_GPIO_Init+0x28c>)
 8004214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004216:	f003 0302 	and.w	r3, r3, #2
 800421a:	60bb      	str	r3, [r7, #8]
 800421c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800421e:	2300      	movs	r3, #0
 8004220:	607b      	str	r3, [r7, #4]
 8004222:	4b79      	ldr	r3, [pc, #484]	; (8004408 <MX_GPIO_Init+0x28c>)
 8004224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004226:	4a78      	ldr	r2, [pc, #480]	; (8004408 <MX_GPIO_Init+0x28c>)
 8004228:	f043 0308 	orr.w	r3, r3, #8
 800422c:	6313      	str	r3, [r2, #48]	; 0x30
 800422e:	4b76      	ldr	r3, [pc, #472]	; (8004408 <MX_GPIO_Init+0x28c>)
 8004230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004232:	f003 0308 	and.w	r3, r3, #8
 8004236:	607b      	str	r3, [r7, #4]
 8004238:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, GPIO_PIN_RESET);
 800423a:	2200      	movs	r2, #0
 800423c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004240:	4872      	ldr	r0, [pc, #456]	; (800440c <MX_GPIO_Init+0x290>)
 8004242:	f002 fd93 	bl	8006d6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 8004246:	2200      	movs	r2, #0
 8004248:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800424c:	4870      	ldr	r0, [pc, #448]	; (8004410 <MX_GPIO_Init+0x294>)
 800424e:	f002 fd8d 	bl	8006d6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);
 8004252:	2200      	movs	r2, #0
 8004254:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004258:	486e      	ldr	r0, [pc, #440]	; (8004414 <MX_GPIO_Init+0x298>)
 800425a:	f002 fd87 	bl	8006d6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800425e:	2200      	movs	r2, #0
 8004260:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 8004264:	486c      	ldr	r0, [pc, #432]	; (8004418 <MX_GPIO_Init+0x29c>)
 8004266:	f002 fd81 	bl	8006d6c <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800426a:	2304      	movs	r3, #4
 800426c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800426e:	4b6b      	ldr	r3, [pc, #428]	; (800441c <MX_GPIO_Init+0x2a0>)
 8004270:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004272:	2300      	movs	r3, #0
 8004274:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004276:	f107 031c 	add.w	r3, r7, #28
 800427a:	4619      	mov	r1, r3
 800427c:	4863      	ldr	r0, [pc, #396]	; (800440c <MX_GPIO_Init+0x290>)
 800427e:	f002 fbb3 	bl	80069e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8004282:	230f      	movs	r3, #15
 8004284:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004286:	2303      	movs	r3, #3
 8004288:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800428a:	2300      	movs	r3, #0
 800428c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800428e:	f107 031c 	add.w	r3, r7, #28
 8004292:	4619      	mov	r1, r3
 8004294:	4862      	ldr	r0, [pc, #392]	; (8004420 <MX_GPIO_Init+0x2a4>)
 8004296:	f002 fba7 	bl	80069e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800429a:	23e1      	movs	r3, #225	; 0xe1
 800429c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800429e:	2303      	movs	r3, #3
 80042a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042a2:	2300      	movs	r3, #0
 80042a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042a6:	f107 031c 	add.w	r3, r7, #28
 80042aa:	4619      	mov	r1, r3
 80042ac:	485a      	ldr	r0, [pc, #360]	; (8004418 <MX_GPIO_Init+0x29c>)
 80042ae:	f002 fb9b 	bl	80069e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80042b2:	2303      	movs	r3, #3
 80042b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80042b6:	2303      	movs	r3, #3
 80042b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042ba:	2300      	movs	r3, #0
 80042bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042be:	f107 031c 	add.w	r3, r7, #28
 80042c2:	4619      	mov	r1, r3
 80042c4:	4852      	ldr	r0, [pc, #328]	; (8004410 <MX_GPIO_Init+0x294>)
 80042c6:	f002 fb8f 	bl	80069e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80042ca:	2304      	movs	r3, #4
 80042cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80042ce:	2300      	movs	r3, #0
 80042d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80042d2:	2301      	movs	r3, #1
 80042d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042d6:	f107 031c 	add.w	r3, r7, #28
 80042da:	4619      	mov	r1, r3
 80042dc:	484c      	ldr	r0, [pc, #304]	; (8004410 <MX_GPIO_Init+0x294>)
 80042de:	f002 fb83 	bl	80069e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_10;
 80042e2:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 80042e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80042e8:	2300      	movs	r3, #0
 80042ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80042ec:	2301      	movs	r3, #1
 80042ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80042f0:	f107 031c 	add.w	r3, r7, #28
 80042f4:	4619      	mov	r1, r3
 80042f6:	4845      	ldr	r0, [pc, #276]	; (800440c <MX_GPIO_Init+0x290>)
 80042f8:	f002 fb76 	bl	80069e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80042fc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004300:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004302:	2301      	movs	r3, #1
 8004304:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004306:	2300      	movs	r3, #0
 8004308:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800430a:	2300      	movs	r3, #0
 800430c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800430e:	f107 031c 	add.w	r3, r7, #28
 8004312:	4619      	mov	r1, r3
 8004314:	483d      	ldr	r0, [pc, #244]	; (800440c <MX_GPIO_Init+0x290>)
 8004316:	f002 fb67 	bl	80069e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800431a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800431e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004320:	2301      	movs	r3, #1
 8004322:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004324:	2300      	movs	r3, #0
 8004326:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004328:	2300      	movs	r3, #0
 800432a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800432c:	f107 031c 	add.w	r3, r7, #28
 8004330:	4619      	mov	r1, r3
 8004332:	4837      	ldr	r0, [pc, #220]	; (8004410 <MX_GPIO_Init+0x294>)
 8004334:	f002 fb58 	bl	80069e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004338:	f44f 7380 	mov.w	r3, #256	; 0x100
 800433c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800433e:	4b39      	ldr	r3, [pc, #228]	; (8004424 <MX_GPIO_Init+0x2a8>)
 8004340:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004342:	2300      	movs	r3, #0
 8004344:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004346:	f107 031c 	add.w	r3, r7, #28
 800434a:	4619      	mov	r1, r3
 800434c:	4831      	ldr	r0, [pc, #196]	; (8004414 <MX_GPIO_Init+0x298>)
 800434e:	f002 fb4b 	bl	80069e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004352:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004356:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004358:	2301      	movs	r3, #1
 800435a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800435c:	2300      	movs	r3, #0
 800435e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004360:	2300      	movs	r3, #0
 8004362:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004364:	f107 031c 	add.w	r3, r7, #28
 8004368:	4619      	mov	r1, r3
 800436a:	482a      	ldr	r0, [pc, #168]	; (8004414 <MX_GPIO_Init+0x298>)
 800436c:	f002 fb3c 	bl	80069e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004370:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004374:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004376:	2301      	movs	r3, #1
 8004378:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800437a:	2301      	movs	r3, #1
 800437c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800437e:	2300      	movs	r3, #0
 8004380:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004382:	f107 031c 	add.w	r3, r7, #28
 8004386:	4619      	mov	r1, r3
 8004388:	4822      	ldr	r0, [pc, #136]	; (8004414 <MX_GPIO_Init+0x298>)
 800438a:	f002 fb2d 	bl	80069e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA9 PA10 PA11
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800438e:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8004392:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004394:	2301      	movs	r3, #1
 8004396:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004398:	2300      	movs	r3, #0
 800439a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800439c:	2300      	movs	r3, #0
 800439e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043a0:	f107 031c 	add.w	r3, r7, #28
 80043a4:	4619      	mov	r1, r3
 80043a6:	481c      	ldr	r0, [pc, #112]	; (8004418 <MX_GPIO_Init+0x29c>)
 80043a8:	f002 fb1e 	bl	80069e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80043ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80043b2:	2300      	movs	r3, #0
 80043b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043b6:	2300      	movs	r3, #0
 80043b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043ba:	f107 031c 	add.w	r3, r7, #28
 80043be:	4619      	mov	r1, r3
 80043c0:	4815      	ldr	r0, [pc, #84]	; (8004418 <MX_GPIO_Init+0x29c>)
 80043c2:	f002 fb11 	bl	80069e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 80043c6:	239b      	movs	r3, #155	; 0x9b
 80043c8:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80043ca:	2300      	movs	r3, #0
 80043cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80043ce:	2301      	movs	r3, #1
 80043d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80043d2:	f107 031c 	add.w	r3, r7, #28
 80043d6:	4619      	mov	r1, r3
 80043d8:	480e      	ldr	r0, [pc, #56]	; (8004414 <MX_GPIO_Init+0x298>)
 80043da:	f002 fb05 	bl	80069e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80043de:	2200      	movs	r2, #0
 80043e0:	2100      	movs	r1, #0
 80043e2:	2008      	movs	r0, #8
 80043e4:	f001 ff2d 	bl	8006242 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80043e8:	2008      	movs	r0, #8
 80043ea:	f001 ff46 	bl	800627a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80043ee:	2200      	movs	r2, #0
 80043f0:	2100      	movs	r1, #0
 80043f2:	2017      	movs	r0, #23
 80043f4:	f001 ff25 	bl	8006242 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80043f8:	2017      	movs	r0, #23
 80043fa:	f001 ff3e 	bl	800627a <HAL_NVIC_EnableIRQ>

}
 80043fe:	bf00      	nop
 8004400:	3730      	adds	r7, #48	; 0x30
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	40023800 	.word	0x40023800
 800440c:	40021000 	.word	0x40021000
 8004410:	40020400 	.word	0x40020400
 8004414:	40020c00 	.word	0x40020c00
 8004418:	40020000 	.word	0x40020000
 800441c:	10310000 	.word	0x10310000
 8004420:	40020800 	.word	0x40020800
 8004424:	10110000 	.word	0x10110000

08004428 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004428:	b480      	push	{r7}
 800442a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800442c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800442e:	e7fe      	b.n	800442e <Error_Handler+0x6>

08004430 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004430:	b480      	push	{r7}
 8004432:	b083      	sub	sp, #12
 8004434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004436:	2300      	movs	r3, #0
 8004438:	607b      	str	r3, [r7, #4]
 800443a:	4b10      	ldr	r3, [pc, #64]	; (800447c <HAL_MspInit+0x4c>)
 800443c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800443e:	4a0f      	ldr	r2, [pc, #60]	; (800447c <HAL_MspInit+0x4c>)
 8004440:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004444:	6453      	str	r3, [r2, #68]	; 0x44
 8004446:	4b0d      	ldr	r3, [pc, #52]	; (800447c <HAL_MspInit+0x4c>)
 8004448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800444a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800444e:	607b      	str	r3, [r7, #4]
 8004450:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004452:	2300      	movs	r3, #0
 8004454:	603b      	str	r3, [r7, #0]
 8004456:	4b09      	ldr	r3, [pc, #36]	; (800447c <HAL_MspInit+0x4c>)
 8004458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445a:	4a08      	ldr	r2, [pc, #32]	; (800447c <HAL_MspInit+0x4c>)
 800445c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004460:	6413      	str	r3, [r2, #64]	; 0x40
 8004462:	4b06      	ldr	r3, [pc, #24]	; (800447c <HAL_MspInit+0x4c>)
 8004464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800446a:	603b      	str	r3, [r7, #0]
 800446c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800446e:	bf00      	nop
 8004470:	370c      	adds	r7, #12
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr
 800447a:	bf00      	nop
 800447c:	40023800 	.word	0x40023800

08004480 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b08c      	sub	sp, #48	; 0x30
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004488:	f107 031c 	add.w	r3, r7, #28
 800448c:	2200      	movs	r2, #0
 800448e:	601a      	str	r2, [r3, #0]
 8004490:	605a      	str	r2, [r3, #4]
 8004492:	609a      	str	r2, [r3, #8]
 8004494:	60da      	str	r2, [r3, #12]
 8004496:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a4a      	ldr	r2, [pc, #296]	; (80045c8 <HAL_ADC_MspInit+0x148>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	f040 808e 	bne.w	80045c0 <HAL_ADC_MspInit+0x140>
  {
  /* USER CODE BEGIN ADC2_MspInit 0 */

  /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC2_CLK_ENABLE();
 80044a4:	2300      	movs	r3, #0
 80044a6:	61bb      	str	r3, [r7, #24]
 80044a8:	4b48      	ldr	r3, [pc, #288]	; (80045cc <HAL_ADC_MspInit+0x14c>)
 80044aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ac:	4a47      	ldr	r2, [pc, #284]	; (80045cc <HAL_ADC_MspInit+0x14c>)
 80044ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80044b2:	6453      	str	r3, [r2, #68]	; 0x44
 80044b4:	4b45      	ldr	r3, [pc, #276]	; (80045cc <HAL_ADC_MspInit+0x14c>)
 80044b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044bc:	61bb      	str	r3, [r7, #24]
 80044be:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80044c0:	2300      	movs	r3, #0
 80044c2:	617b      	str	r3, [r7, #20]
 80044c4:	4b41      	ldr	r3, [pc, #260]	; (80045cc <HAL_ADC_MspInit+0x14c>)
 80044c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c8:	4a40      	ldr	r2, [pc, #256]	; (80045cc <HAL_ADC_MspInit+0x14c>)
 80044ca:	f043 0304 	orr.w	r3, r3, #4
 80044ce:	6313      	str	r3, [r2, #48]	; 0x30
 80044d0:	4b3e      	ldr	r3, [pc, #248]	; (80045cc <HAL_ADC_MspInit+0x14c>)
 80044d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d4:	f003 0304 	and.w	r3, r3, #4
 80044d8:	617b      	str	r3, [r7, #20]
 80044da:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044dc:	2300      	movs	r3, #0
 80044de:	613b      	str	r3, [r7, #16]
 80044e0:	4b3a      	ldr	r3, [pc, #232]	; (80045cc <HAL_ADC_MspInit+0x14c>)
 80044e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e4:	4a39      	ldr	r2, [pc, #228]	; (80045cc <HAL_ADC_MspInit+0x14c>)
 80044e6:	f043 0301 	orr.w	r3, r3, #1
 80044ea:	6313      	str	r3, [r2, #48]	; 0x30
 80044ec:	4b37      	ldr	r3, [pc, #220]	; (80045cc <HAL_ADC_MspInit+0x14c>)
 80044ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f0:	f003 0301 	and.w	r3, r3, #1
 80044f4:	613b      	str	r3, [r7, #16]
 80044f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044f8:	2300      	movs	r3, #0
 80044fa:	60fb      	str	r3, [r7, #12]
 80044fc:	4b33      	ldr	r3, [pc, #204]	; (80045cc <HAL_ADC_MspInit+0x14c>)
 80044fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004500:	4a32      	ldr	r2, [pc, #200]	; (80045cc <HAL_ADC_MspInit+0x14c>)
 8004502:	f043 0302 	orr.w	r3, r3, #2
 8004506:	6313      	str	r3, [r2, #48]	; 0x30
 8004508:	4b30      	ldr	r3, [pc, #192]	; (80045cc <HAL_ADC_MspInit+0x14c>)
 800450a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800450c:	f003 0302 	and.w	r3, r3, #2
 8004510:	60fb      	str	r3, [r7, #12]
 8004512:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC2_IN6
    PA7     ------> ADC2_IN7
    PB0     ------> ADC2_IN8
    PB1     ------> ADC2_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8004514:	230f      	movs	r3, #15
 8004516:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004518:	2303      	movs	r3, #3
 800451a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800451c:	2300      	movs	r3, #0
 800451e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004520:	f107 031c 	add.w	r3, r7, #28
 8004524:	4619      	mov	r1, r3
 8004526:	482a      	ldr	r0, [pc, #168]	; (80045d0 <HAL_ADC_MspInit+0x150>)
 8004528:	f002 fa5e 	bl	80069e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800452c:	23ff      	movs	r3, #255	; 0xff
 800452e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004530:	2303      	movs	r3, #3
 8004532:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004534:	2300      	movs	r3, #0
 8004536:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004538:	f107 031c 	add.w	r3, r7, #28
 800453c:	4619      	mov	r1, r3
 800453e:	4825      	ldr	r0, [pc, #148]	; (80045d4 <HAL_ADC_MspInit+0x154>)
 8004540:	f002 fa52 	bl	80069e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004544:	2303      	movs	r3, #3
 8004546:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004548:	2303      	movs	r3, #3
 800454a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800454c:	2300      	movs	r3, #0
 800454e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004550:	f107 031c 	add.w	r3, r7, #28
 8004554:	4619      	mov	r1, r3
 8004556:	4820      	ldr	r0, [pc, #128]	; (80045d8 <HAL_ADC_MspInit+0x158>)
 8004558:	f002 fa46 	bl	80069e8 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Stream2;
 800455c:	4b1f      	ldr	r3, [pc, #124]	; (80045dc <HAL_ADC_MspInit+0x15c>)
 800455e:	4a20      	ldr	r2, [pc, #128]	; (80045e0 <HAL_ADC_MspInit+0x160>)
 8004560:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 8004562:	4b1e      	ldr	r3, [pc, #120]	; (80045dc <HAL_ADC_MspInit+0x15c>)
 8004564:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004568:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800456a:	4b1c      	ldr	r3, [pc, #112]	; (80045dc <HAL_ADC_MspInit+0x15c>)
 800456c:	2200      	movs	r2, #0
 800456e:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8004570:	4b1a      	ldr	r3, [pc, #104]	; (80045dc <HAL_ADC_MspInit+0x15c>)
 8004572:	2200      	movs	r2, #0
 8004574:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8004576:	4b19      	ldr	r3, [pc, #100]	; (80045dc <HAL_ADC_MspInit+0x15c>)
 8004578:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800457c:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800457e:	4b17      	ldr	r3, [pc, #92]	; (80045dc <HAL_ADC_MspInit+0x15c>)
 8004580:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004584:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004586:	4b15      	ldr	r3, [pc, #84]	; (80045dc <HAL_ADC_MspInit+0x15c>)
 8004588:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800458c:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800458e:	4b13      	ldr	r3, [pc, #76]	; (80045dc <HAL_ADC_MspInit+0x15c>)
 8004590:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004594:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004596:	4b11      	ldr	r3, [pc, #68]	; (80045dc <HAL_ADC_MspInit+0x15c>)
 8004598:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800459c:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800459e:	4b0f      	ldr	r3, [pc, #60]	; (80045dc <HAL_ADC_MspInit+0x15c>)
 80045a0:	2200      	movs	r2, #0
 80045a2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80045a4:	480d      	ldr	r0, [pc, #52]	; (80045dc <HAL_ADC_MspInit+0x15c>)
 80045a6:	f001 fe83 	bl	80062b0 <HAL_DMA_Init>
 80045aa:	4603      	mov	r3, r0
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d001      	beq.n	80045b4 <HAL_ADC_MspInit+0x134>
    {
      Error_Handler();
 80045b0:	f7ff ff3a 	bl	8004428 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	4a09      	ldr	r2, [pc, #36]	; (80045dc <HAL_ADC_MspInit+0x15c>)
 80045b8:	639a      	str	r2, [r3, #56]	; 0x38
 80045ba:	4a08      	ldr	r2, [pc, #32]	; (80045dc <HAL_ADC_MspInit+0x15c>)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80045c0:	bf00      	nop
 80045c2:	3730      	adds	r7, #48	; 0x30
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	40012100 	.word	0x40012100
 80045cc:	40023800 	.word	0x40023800
 80045d0:	40020800 	.word	0x40020800
 80045d4:	40020000 	.word	0x40020000
 80045d8:	40020400 	.word	0x40020400
 80045dc:	2000a594 	.word	0x2000a594
 80045e0:	40026440 	.word	0x40026440

080045e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b08c      	sub	sp, #48	; 0x30
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045ec:	f107 031c 	add.w	r3, r7, #28
 80045f0:	2200      	movs	r2, #0
 80045f2:	601a      	str	r2, [r3, #0]
 80045f4:	605a      	str	r2, [r3, #4]
 80045f6:	609a      	str	r2, [r3, #8]
 80045f8:	60da      	str	r2, [r3, #12]
 80045fa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a32      	ldr	r2, [pc, #200]	; (80046cc <HAL_I2C_MspInit+0xe8>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d12c      	bne.n	8004660 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004606:	2300      	movs	r3, #0
 8004608:	61bb      	str	r3, [r7, #24]
 800460a:	4b31      	ldr	r3, [pc, #196]	; (80046d0 <HAL_I2C_MspInit+0xec>)
 800460c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800460e:	4a30      	ldr	r2, [pc, #192]	; (80046d0 <HAL_I2C_MspInit+0xec>)
 8004610:	f043 0302 	orr.w	r3, r3, #2
 8004614:	6313      	str	r3, [r2, #48]	; 0x30
 8004616:	4b2e      	ldr	r3, [pc, #184]	; (80046d0 <HAL_I2C_MspInit+0xec>)
 8004618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800461a:	f003 0302 	and.w	r3, r3, #2
 800461e:	61bb      	str	r3, [r7, #24]
 8004620:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004622:	23c0      	movs	r3, #192	; 0xc0
 8004624:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004626:	2312      	movs	r3, #18
 8004628:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800462a:	2301      	movs	r3, #1
 800462c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800462e:	2303      	movs	r3, #3
 8004630:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004632:	2304      	movs	r3, #4
 8004634:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004636:	f107 031c 	add.w	r3, r7, #28
 800463a:	4619      	mov	r1, r3
 800463c:	4825      	ldr	r0, [pc, #148]	; (80046d4 <HAL_I2C_MspInit+0xf0>)
 800463e:	f002 f9d3 	bl	80069e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004642:	2300      	movs	r3, #0
 8004644:	617b      	str	r3, [r7, #20]
 8004646:	4b22      	ldr	r3, [pc, #136]	; (80046d0 <HAL_I2C_MspInit+0xec>)
 8004648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464a:	4a21      	ldr	r2, [pc, #132]	; (80046d0 <HAL_I2C_MspInit+0xec>)
 800464c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004650:	6413      	str	r3, [r2, #64]	; 0x40
 8004652:	4b1f      	ldr	r3, [pc, #124]	; (80046d0 <HAL_I2C_MspInit+0xec>)
 8004654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004656:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800465a:	617b      	str	r3, [r7, #20]
 800465c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800465e:	e031      	b.n	80046c4 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a1c      	ldr	r2, [pc, #112]	; (80046d8 <HAL_I2C_MspInit+0xf4>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d12c      	bne.n	80046c4 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800466a:	2300      	movs	r3, #0
 800466c:	613b      	str	r3, [r7, #16]
 800466e:	4b18      	ldr	r3, [pc, #96]	; (80046d0 <HAL_I2C_MspInit+0xec>)
 8004670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004672:	4a17      	ldr	r2, [pc, #92]	; (80046d0 <HAL_I2C_MspInit+0xec>)
 8004674:	f043 0302 	orr.w	r3, r3, #2
 8004678:	6313      	str	r3, [r2, #48]	; 0x30
 800467a:	4b15      	ldr	r3, [pc, #84]	; (80046d0 <HAL_I2C_MspInit+0xec>)
 800467c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800467e:	f003 0302 	and.w	r3, r3, #2
 8004682:	613b      	str	r3, [r7, #16]
 8004684:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004686:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800468a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800468c:	2312      	movs	r3, #18
 800468e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004690:	2301      	movs	r3, #1
 8004692:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004694:	2303      	movs	r3, #3
 8004696:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004698:	2304      	movs	r3, #4
 800469a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800469c:	f107 031c 	add.w	r3, r7, #28
 80046a0:	4619      	mov	r1, r3
 80046a2:	480c      	ldr	r0, [pc, #48]	; (80046d4 <HAL_I2C_MspInit+0xf0>)
 80046a4:	f002 f9a0 	bl	80069e8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80046a8:	2300      	movs	r3, #0
 80046aa:	60fb      	str	r3, [r7, #12]
 80046ac:	4b08      	ldr	r3, [pc, #32]	; (80046d0 <HAL_I2C_MspInit+0xec>)
 80046ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b0:	4a07      	ldr	r2, [pc, #28]	; (80046d0 <HAL_I2C_MspInit+0xec>)
 80046b2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80046b6:	6413      	str	r3, [r2, #64]	; 0x40
 80046b8:	4b05      	ldr	r3, [pc, #20]	; (80046d0 <HAL_I2C_MspInit+0xec>)
 80046ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046c0:	60fb      	str	r3, [r7, #12]
 80046c2:	68fb      	ldr	r3, [r7, #12]
}
 80046c4:	bf00      	nop
 80046c6:	3730      	adds	r7, #48	; 0x30
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}
 80046cc:	40005400 	.word	0x40005400
 80046d0:	40023800 	.word	0x40023800
 80046d4:	40020400 	.word	0x40020400
 80046d8:	40005800 	.word	0x40005800

080046dc <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b08a      	sub	sp, #40	; 0x28
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046e4:	f107 0314 	add.w	r3, r7, #20
 80046e8:	2200      	movs	r2, #0
 80046ea:	601a      	str	r2, [r3, #0]
 80046ec:	605a      	str	r2, [r3, #4]
 80046ee:	609a      	str	r2, [r3, #8]
 80046f0:	60da      	str	r2, [r3, #12]
 80046f2:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a69      	ldr	r2, [pc, #420]	; (80048a0 <HAL_SD_MspInit+0x1c4>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	f040 80cb 	bne.w	8004896 <HAL_SD_MspInit+0x1ba>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8004700:	2300      	movs	r3, #0
 8004702:	613b      	str	r3, [r7, #16]
 8004704:	4b67      	ldr	r3, [pc, #412]	; (80048a4 <HAL_SD_MspInit+0x1c8>)
 8004706:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004708:	4a66      	ldr	r2, [pc, #408]	; (80048a4 <HAL_SD_MspInit+0x1c8>)
 800470a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800470e:	6453      	str	r3, [r2, #68]	; 0x44
 8004710:	4b64      	ldr	r3, [pc, #400]	; (80048a4 <HAL_SD_MspInit+0x1c8>)
 8004712:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004714:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004718:	613b      	str	r3, [r7, #16]
 800471a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800471c:	2300      	movs	r3, #0
 800471e:	60fb      	str	r3, [r7, #12]
 8004720:	4b60      	ldr	r3, [pc, #384]	; (80048a4 <HAL_SD_MspInit+0x1c8>)
 8004722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004724:	4a5f      	ldr	r2, [pc, #380]	; (80048a4 <HAL_SD_MspInit+0x1c8>)
 8004726:	f043 0304 	orr.w	r3, r3, #4
 800472a:	6313      	str	r3, [r2, #48]	; 0x30
 800472c:	4b5d      	ldr	r3, [pc, #372]	; (80048a4 <HAL_SD_MspInit+0x1c8>)
 800472e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004730:	f003 0304 	and.w	r3, r3, #4
 8004734:	60fb      	str	r3, [r7, #12]
 8004736:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004738:	2300      	movs	r3, #0
 800473a:	60bb      	str	r3, [r7, #8]
 800473c:	4b59      	ldr	r3, [pc, #356]	; (80048a4 <HAL_SD_MspInit+0x1c8>)
 800473e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004740:	4a58      	ldr	r2, [pc, #352]	; (80048a4 <HAL_SD_MspInit+0x1c8>)
 8004742:	f043 0308 	orr.w	r3, r3, #8
 8004746:	6313      	str	r3, [r2, #48]	; 0x30
 8004748:	4b56      	ldr	r3, [pc, #344]	; (80048a4 <HAL_SD_MspInit+0x1c8>)
 800474a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800474c:	f003 0308 	and.w	r3, r3, #8
 8004750:	60bb      	str	r3, [r7, #8]
 8004752:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8004754:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8004758:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800475a:	2302      	movs	r3, #2
 800475c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800475e:	2300      	movs	r3, #0
 8004760:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004762:	2303      	movs	r3, #3
 8004764:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8004766:	230c      	movs	r3, #12
 8004768:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800476a:	f107 0314 	add.w	r3, r7, #20
 800476e:	4619      	mov	r1, r3
 8004770:	484d      	ldr	r0, [pc, #308]	; (80048a8 <HAL_SD_MspInit+0x1cc>)
 8004772:	f002 f939 	bl	80069e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004776:	2304      	movs	r3, #4
 8004778:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800477a:	2302      	movs	r3, #2
 800477c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800477e:	2300      	movs	r3, #0
 8004780:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004782:	2303      	movs	r3, #3
 8004784:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8004786:	230c      	movs	r3, #12
 8004788:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800478a:	f107 0314 	add.w	r3, r7, #20
 800478e:	4619      	mov	r1, r3
 8004790:	4846      	ldr	r0, [pc, #280]	; (80048ac <HAL_SD_MspInit+0x1d0>)
 8004792:	f002 f929 	bl	80069e8 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8004796:	4b46      	ldr	r3, [pc, #280]	; (80048b0 <HAL_SD_MspInit+0x1d4>)
 8004798:	4a46      	ldr	r2, [pc, #280]	; (80048b4 <HAL_SD_MspInit+0x1d8>)
 800479a:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 800479c:	4b44      	ldr	r3, [pc, #272]	; (80048b0 <HAL_SD_MspInit+0x1d4>)
 800479e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80047a2:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80047a4:	4b42      	ldr	r3, [pc, #264]	; (80048b0 <HAL_SD_MspInit+0x1d4>)
 80047a6:	2200      	movs	r2, #0
 80047a8:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80047aa:	4b41      	ldr	r3, [pc, #260]	; (80048b0 <HAL_SD_MspInit+0x1d4>)
 80047ac:	2200      	movs	r2, #0
 80047ae:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 80047b0:	4b3f      	ldr	r3, [pc, #252]	; (80048b0 <HAL_SD_MspInit+0x1d4>)
 80047b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80047b6:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80047b8:	4b3d      	ldr	r3, [pc, #244]	; (80048b0 <HAL_SD_MspInit+0x1d4>)
 80047ba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80047be:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80047c0:	4b3b      	ldr	r3, [pc, #236]	; (80048b0 <HAL_SD_MspInit+0x1d4>)
 80047c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80047c6:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 80047c8:	4b39      	ldr	r3, [pc, #228]	; (80048b0 <HAL_SD_MspInit+0x1d4>)
 80047ca:	2220      	movs	r2, #32
 80047cc:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80047ce:	4b38      	ldr	r3, [pc, #224]	; (80048b0 <HAL_SD_MspInit+0x1d4>)
 80047d0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80047d4:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80047d6:	4b36      	ldr	r3, [pc, #216]	; (80048b0 <HAL_SD_MspInit+0x1d4>)
 80047d8:	2204      	movs	r2, #4
 80047da:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80047dc:	4b34      	ldr	r3, [pc, #208]	; (80048b0 <HAL_SD_MspInit+0x1d4>)
 80047de:	2203      	movs	r2, #3
 80047e0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 80047e2:	4b33      	ldr	r3, [pc, #204]	; (80048b0 <HAL_SD_MspInit+0x1d4>)
 80047e4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80047e8:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80047ea:	4b31      	ldr	r3, [pc, #196]	; (80048b0 <HAL_SD_MspInit+0x1d4>)
 80047ec:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80047f0:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 80047f2:	482f      	ldr	r0, [pc, #188]	; (80048b0 <HAL_SD_MspInit+0x1d4>)
 80047f4:	f001 fd5c 	bl	80062b0 <HAL_DMA_Init>
 80047f8:	4603      	mov	r3, r0
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d001      	beq.n	8004802 <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 80047fe:	f7ff fe13 	bl	8004428 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	4a2a      	ldr	r2, [pc, #168]	; (80048b0 <HAL_SD_MspInit+0x1d4>)
 8004806:	641a      	str	r2, [r3, #64]	; 0x40
 8004808:	4a29      	ldr	r2, [pc, #164]	; (80048b0 <HAL_SD_MspInit+0x1d4>)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 800480e:	4b2a      	ldr	r3, [pc, #168]	; (80048b8 <HAL_SD_MspInit+0x1dc>)
 8004810:	4a2a      	ldr	r2, [pc, #168]	; (80048bc <HAL_SD_MspInit+0x1e0>)
 8004812:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8004814:	4b28      	ldr	r3, [pc, #160]	; (80048b8 <HAL_SD_MspInit+0x1dc>)
 8004816:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800481a:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800481c:	4b26      	ldr	r3, [pc, #152]	; (80048b8 <HAL_SD_MspInit+0x1dc>)
 800481e:	2240      	movs	r2, #64	; 0x40
 8004820:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004822:	4b25      	ldr	r3, [pc, #148]	; (80048b8 <HAL_SD_MspInit+0x1dc>)
 8004824:	2200      	movs	r2, #0
 8004826:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004828:	4b23      	ldr	r3, [pc, #140]	; (80048b8 <HAL_SD_MspInit+0x1dc>)
 800482a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800482e:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004830:	4b21      	ldr	r3, [pc, #132]	; (80048b8 <HAL_SD_MspInit+0x1dc>)
 8004832:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004836:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004838:	4b1f      	ldr	r3, [pc, #124]	; (80048b8 <HAL_SD_MspInit+0x1dc>)
 800483a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800483e:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8004840:	4b1d      	ldr	r3, [pc, #116]	; (80048b8 <HAL_SD_MspInit+0x1dc>)
 8004842:	2220      	movs	r2, #32
 8004844:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8004846:	4b1c      	ldr	r3, [pc, #112]	; (80048b8 <HAL_SD_MspInit+0x1dc>)
 8004848:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800484c:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800484e:	4b1a      	ldr	r3, [pc, #104]	; (80048b8 <HAL_SD_MspInit+0x1dc>)
 8004850:	2204      	movs	r2, #4
 8004852:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004854:	4b18      	ldr	r3, [pc, #96]	; (80048b8 <HAL_SD_MspInit+0x1dc>)
 8004856:	2203      	movs	r2, #3
 8004858:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 800485a:	4b17      	ldr	r3, [pc, #92]	; (80048b8 <HAL_SD_MspInit+0x1dc>)
 800485c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004860:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8004862:	4b15      	ldr	r3, [pc, #84]	; (80048b8 <HAL_SD_MspInit+0x1dc>)
 8004864:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004868:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 800486a:	4813      	ldr	r0, [pc, #76]	; (80048b8 <HAL_SD_MspInit+0x1dc>)
 800486c:	f001 fd20 	bl	80062b0 <HAL_DMA_Init>
 8004870:	4603      	mov	r3, r0
 8004872:	2b00      	cmp	r3, #0
 8004874:	d001      	beq.n	800487a <HAL_SD_MspInit+0x19e>
    {
      Error_Handler();
 8004876:	f7ff fdd7 	bl	8004428 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a0e      	ldr	r2, [pc, #56]	; (80048b8 <HAL_SD_MspInit+0x1dc>)
 800487e:	63da      	str	r2, [r3, #60]	; 0x3c
 8004880:	4a0d      	ldr	r2, [pc, #52]	; (80048b8 <HAL_SD_MspInit+0x1dc>)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8004886:	2200      	movs	r2, #0
 8004888:	2100      	movs	r1, #0
 800488a:	2031      	movs	r0, #49	; 0x31
 800488c:	f001 fcd9 	bl	8006242 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8004890:	2031      	movs	r0, #49	; 0x31
 8004892:	f001 fcf2 	bl	800627a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8004896:	bf00      	nop
 8004898:	3728      	adds	r7, #40	; 0x28
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
 800489e:	bf00      	nop
 80048a0:	40012c00 	.word	0x40012c00
 80048a4:	40023800 	.word	0x40023800
 80048a8:	40020800 	.word	0x40020800
 80048ac:	40020c00 	.word	0x40020c00
 80048b0:	2000a0bc 	.word	0x2000a0bc
 80048b4:	40026458 	.word	0x40026458
 80048b8:	2000a3f0 	.word	0x2000a3f0
 80048bc:	400264a0 	.word	0x400264a0

080048c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b08a      	sub	sp, #40	; 0x28
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048c8:	f107 0314 	add.w	r3, r7, #20
 80048cc:	2200      	movs	r2, #0
 80048ce:	601a      	str	r2, [r3, #0]
 80048d0:	605a      	str	r2, [r3, #4]
 80048d2:	609a      	str	r2, [r3, #8]
 80048d4:	60da      	str	r2, [r3, #12]
 80048d6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a19      	ldr	r2, [pc, #100]	; (8004944 <HAL_SPI_MspInit+0x84>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d12c      	bne.n	800493c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80048e2:	2300      	movs	r3, #0
 80048e4:	613b      	str	r3, [r7, #16]
 80048e6:	4b18      	ldr	r3, [pc, #96]	; (8004948 <HAL_SPI_MspInit+0x88>)
 80048e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ea:	4a17      	ldr	r2, [pc, #92]	; (8004948 <HAL_SPI_MspInit+0x88>)
 80048ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80048f0:	6413      	str	r3, [r2, #64]	; 0x40
 80048f2:	4b15      	ldr	r3, [pc, #84]	; (8004948 <HAL_SPI_MspInit+0x88>)
 80048f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048fa:	613b      	str	r3, [r7, #16]
 80048fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80048fe:	2300      	movs	r3, #0
 8004900:	60fb      	str	r3, [r7, #12]
 8004902:	4b11      	ldr	r3, [pc, #68]	; (8004948 <HAL_SPI_MspInit+0x88>)
 8004904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004906:	4a10      	ldr	r2, [pc, #64]	; (8004948 <HAL_SPI_MspInit+0x88>)
 8004908:	f043 0302 	orr.w	r3, r3, #2
 800490c:	6313      	str	r3, [r2, #48]	; 0x30
 800490e:	4b0e      	ldr	r3, [pc, #56]	; (8004948 <HAL_SPI_MspInit+0x88>)
 8004910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004912:	f003 0302 	and.w	r3, r3, #2
 8004916:	60fb      	str	r3, [r7, #12]
 8004918:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800491a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800491e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004920:	2302      	movs	r3, #2
 8004922:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004924:	2300      	movs	r3, #0
 8004926:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004928:	2303      	movs	r3, #3
 800492a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800492c:	2305      	movs	r3, #5
 800492e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004930:	f107 0314 	add.w	r3, r7, #20
 8004934:	4619      	mov	r1, r3
 8004936:	4805      	ldr	r0, [pc, #20]	; (800494c <HAL_SPI_MspInit+0x8c>)
 8004938:	f002 f856 	bl	80069e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800493c:	bf00      	nop
 800493e:	3728      	adds	r7, #40	; 0x28
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}
 8004944:	40003800 	.word	0x40003800
 8004948:	40023800 	.word	0x40023800
 800494c:	40020400 	.word	0x40020400

08004950 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b08c      	sub	sp, #48	; 0x30
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004958:	f107 031c 	add.w	r3, r7, #28
 800495c:	2200      	movs	r2, #0
 800495e:	601a      	str	r2, [r3, #0]
 8004960:	605a      	str	r2, [r3, #4]
 8004962:	609a      	str	r2, [r3, #8]
 8004964:	60da      	str	r2, [r3, #12]
 8004966:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM1)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a2d      	ldr	r2, [pc, #180]	; (8004a24 <HAL_TIM_PWM_MspInit+0xd4>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d12d      	bne.n	80049ce <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004972:	2300      	movs	r3, #0
 8004974:	61bb      	str	r3, [r7, #24]
 8004976:	4b2c      	ldr	r3, [pc, #176]	; (8004a28 <HAL_TIM_PWM_MspInit+0xd8>)
 8004978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800497a:	4a2b      	ldr	r2, [pc, #172]	; (8004a28 <HAL_TIM_PWM_MspInit+0xd8>)
 800497c:	f043 0301 	orr.w	r3, r3, #1
 8004980:	6453      	str	r3, [r2, #68]	; 0x44
 8004982:	4b29      	ldr	r3, [pc, #164]	; (8004a28 <HAL_TIM_PWM_MspInit+0xd8>)
 8004984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004986:	f003 0301 	and.w	r3, r3, #1
 800498a:	61bb      	str	r3, [r7, #24]
 800498c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800498e:	2300      	movs	r3, #0
 8004990:	617b      	str	r3, [r7, #20]
 8004992:	4b25      	ldr	r3, [pc, #148]	; (8004a28 <HAL_TIM_PWM_MspInit+0xd8>)
 8004994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004996:	4a24      	ldr	r2, [pc, #144]	; (8004a28 <HAL_TIM_PWM_MspInit+0xd8>)
 8004998:	f043 0310 	orr.w	r3, r3, #16
 800499c:	6313      	str	r3, [r2, #48]	; 0x30
 800499e:	4b22      	ldr	r3, [pc, #136]	; (8004a28 <HAL_TIM_PWM_MspInit+0xd8>)
 80049a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a2:	f003 0310 	and.w	r3, r3, #16
 80049a6:	617b      	str	r3, [r7, #20]
 80049a8:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80049aa:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80049ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049b0:	2302      	movs	r3, #2
 80049b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049b4:	2300      	movs	r3, #0
 80049b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049b8:	2300      	movs	r3, #0
 80049ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80049bc:	2301      	movs	r3, #1
 80049be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80049c0:	f107 031c 	add.w	r3, r7, #28
 80049c4:	4619      	mov	r1, r3
 80049c6:	4819      	ldr	r0, [pc, #100]	; (8004a2c <HAL_TIM_PWM_MspInit+0xdc>)
 80049c8:	f002 f80e 	bl	80069e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80049cc:	e026      	b.n	8004a1c <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM3)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a17      	ldr	r2, [pc, #92]	; (8004a30 <HAL_TIM_PWM_MspInit+0xe0>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d10e      	bne.n	80049f6 <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80049d8:	2300      	movs	r3, #0
 80049da:	613b      	str	r3, [r7, #16]
 80049dc:	4b12      	ldr	r3, [pc, #72]	; (8004a28 <HAL_TIM_PWM_MspInit+0xd8>)
 80049de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e0:	4a11      	ldr	r2, [pc, #68]	; (8004a28 <HAL_TIM_PWM_MspInit+0xd8>)
 80049e2:	f043 0302 	orr.w	r3, r3, #2
 80049e6:	6413      	str	r3, [r2, #64]	; 0x40
 80049e8:	4b0f      	ldr	r3, [pc, #60]	; (8004a28 <HAL_TIM_PWM_MspInit+0xd8>)
 80049ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ec:	f003 0302 	and.w	r3, r3, #2
 80049f0:	613b      	str	r3, [r7, #16]
 80049f2:	693b      	ldr	r3, [r7, #16]
}
 80049f4:	e012      	b.n	8004a1c <HAL_TIM_PWM_MspInit+0xcc>
  else if(htim_pwm->Instance==TIM4)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a0e      	ldr	r2, [pc, #56]	; (8004a34 <HAL_TIM_PWM_MspInit+0xe4>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d10d      	bne.n	8004a1c <HAL_TIM_PWM_MspInit+0xcc>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004a00:	2300      	movs	r3, #0
 8004a02:	60fb      	str	r3, [r7, #12]
 8004a04:	4b08      	ldr	r3, [pc, #32]	; (8004a28 <HAL_TIM_PWM_MspInit+0xd8>)
 8004a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a08:	4a07      	ldr	r2, [pc, #28]	; (8004a28 <HAL_TIM_PWM_MspInit+0xd8>)
 8004a0a:	f043 0304 	orr.w	r3, r3, #4
 8004a0e:	6413      	str	r3, [r2, #64]	; 0x40
 8004a10:	4b05      	ldr	r3, [pc, #20]	; (8004a28 <HAL_TIM_PWM_MspInit+0xd8>)
 8004a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a14:	f003 0304 	and.w	r3, r3, #4
 8004a18:	60fb      	str	r3, [r7, #12]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
}
 8004a1c:	bf00      	nop
 8004a1e:	3730      	adds	r7, #48	; 0x30
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}
 8004a24:	40010000 	.word	0x40010000
 8004a28:	40023800 	.word	0x40023800
 8004a2c:	40021000 	.word	0x40021000
 8004a30:	40000400 	.word	0x40000400
 8004a34:	40000800 	.word	0x40000800

08004a38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b088      	sub	sp, #32
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a3e      	ldr	r2, [pc, #248]	; (8004b40 <HAL_TIM_Base_MspInit+0x108>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d116      	bne.n	8004a78 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	61fb      	str	r3, [r7, #28]
 8004a4e:	4b3d      	ldr	r3, [pc, #244]	; (8004b44 <HAL_TIM_Base_MspInit+0x10c>)
 8004a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a52:	4a3c      	ldr	r2, [pc, #240]	; (8004b44 <HAL_TIM_Base_MspInit+0x10c>)
 8004a54:	f043 0310 	orr.w	r3, r3, #16
 8004a58:	6413      	str	r3, [r2, #64]	; 0x40
 8004a5a:	4b3a      	ldr	r3, [pc, #232]	; (8004b44 <HAL_TIM_Base_MspInit+0x10c>)
 8004a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a5e:	f003 0310 	and.w	r3, r3, #16
 8004a62:	61fb      	str	r3, [r7, #28]
 8004a64:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8004a66:	2200      	movs	r2, #0
 8004a68:	2101      	movs	r1, #1
 8004a6a:	2036      	movs	r0, #54	; 0x36
 8004a6c:	f001 fbe9 	bl	8006242 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004a70:	2036      	movs	r0, #54	; 0x36
 8004a72:	f001 fc02 	bl	800627a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8004a76:	e05e      	b.n	8004b36 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM7)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a32      	ldr	r2, [pc, #200]	; (8004b48 <HAL_TIM_Base_MspInit+0x110>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d116      	bne.n	8004ab0 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004a82:	2300      	movs	r3, #0
 8004a84:	61bb      	str	r3, [r7, #24]
 8004a86:	4b2f      	ldr	r3, [pc, #188]	; (8004b44 <HAL_TIM_Base_MspInit+0x10c>)
 8004a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8a:	4a2e      	ldr	r2, [pc, #184]	; (8004b44 <HAL_TIM_Base_MspInit+0x10c>)
 8004a8c:	f043 0320 	orr.w	r3, r3, #32
 8004a90:	6413      	str	r3, [r2, #64]	; 0x40
 8004a92:	4b2c      	ldr	r3, [pc, #176]	; (8004b44 <HAL_TIM_Base_MspInit+0x10c>)
 8004a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a96:	f003 0320 	and.w	r3, r3, #32
 8004a9a:	61bb      	str	r3, [r7, #24]
 8004a9c:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	2100      	movs	r1, #0
 8004aa2:	2037      	movs	r0, #55	; 0x37
 8004aa4:	f001 fbcd 	bl	8006242 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004aa8:	2037      	movs	r0, #55	; 0x37
 8004aaa:	f001 fbe6 	bl	800627a <HAL_NVIC_EnableIRQ>
}
 8004aae:	e042      	b.n	8004b36 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM10)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a25      	ldr	r2, [pc, #148]	; (8004b4c <HAL_TIM_Base_MspInit+0x114>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d10e      	bne.n	8004ad8 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8004aba:	2300      	movs	r3, #0
 8004abc:	617b      	str	r3, [r7, #20]
 8004abe:	4b21      	ldr	r3, [pc, #132]	; (8004b44 <HAL_TIM_Base_MspInit+0x10c>)
 8004ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ac2:	4a20      	ldr	r2, [pc, #128]	; (8004b44 <HAL_TIM_Base_MspInit+0x10c>)
 8004ac4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ac8:	6453      	str	r3, [r2, #68]	; 0x44
 8004aca:	4b1e      	ldr	r3, [pc, #120]	; (8004b44 <HAL_TIM_Base_MspInit+0x10c>)
 8004acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ad2:	617b      	str	r3, [r7, #20]
 8004ad4:	697b      	ldr	r3, [r7, #20]
}
 8004ad6:	e02e      	b.n	8004b36 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM11)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a1c      	ldr	r2, [pc, #112]	; (8004b50 <HAL_TIM_Base_MspInit+0x118>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d10e      	bne.n	8004b00 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	613b      	str	r3, [r7, #16]
 8004ae6:	4b17      	ldr	r3, [pc, #92]	; (8004b44 <HAL_TIM_Base_MspInit+0x10c>)
 8004ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aea:	4a16      	ldr	r2, [pc, #88]	; (8004b44 <HAL_TIM_Base_MspInit+0x10c>)
 8004aec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004af0:	6453      	str	r3, [r2, #68]	; 0x44
 8004af2:	4b14      	ldr	r3, [pc, #80]	; (8004b44 <HAL_TIM_Base_MspInit+0x10c>)
 8004af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004af6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004afa:	613b      	str	r3, [r7, #16]
 8004afc:	693b      	ldr	r3, [r7, #16]
}
 8004afe:	e01a      	b.n	8004b36 <HAL_TIM_Base_MspInit+0xfe>
  else if(htim_base->Instance==TIM13)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a13      	ldr	r2, [pc, #76]	; (8004b54 <HAL_TIM_Base_MspInit+0x11c>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d115      	bne.n	8004b36 <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	60fb      	str	r3, [r7, #12]
 8004b0e:	4b0d      	ldr	r3, [pc, #52]	; (8004b44 <HAL_TIM_Base_MspInit+0x10c>)
 8004b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b12:	4a0c      	ldr	r2, [pc, #48]	; (8004b44 <HAL_TIM_Base_MspInit+0x10c>)
 8004b14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b18:	6413      	str	r3, [r2, #64]	; 0x40
 8004b1a:	4b0a      	ldr	r3, [pc, #40]	; (8004b44 <HAL_TIM_Base_MspInit+0x10c>)
 8004b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b22:	60fb      	str	r3, [r7, #12]
 8004b24:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8004b26:	2200      	movs	r2, #0
 8004b28:	2100      	movs	r1, #0
 8004b2a:	202c      	movs	r0, #44	; 0x2c
 8004b2c:	f001 fb89 	bl	8006242 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8004b30:	202c      	movs	r0, #44	; 0x2c
 8004b32:	f001 fba2 	bl	800627a <HAL_NVIC_EnableIRQ>
}
 8004b36:	bf00      	nop
 8004b38:	3720      	adds	r7, #32
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	bf00      	nop
 8004b40:	40001000 	.word	0x40001000
 8004b44:	40023800 	.word	0x40023800
 8004b48:	40001400 	.word	0x40001400
 8004b4c:	40014400 	.word	0x40014400
 8004b50:	40014800 	.word	0x40014800
 8004b54:	40001c00 	.word	0x40001c00

08004b58 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b08a      	sub	sp, #40	; 0x28
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b60:	f107 0314 	add.w	r3, r7, #20
 8004b64:	2200      	movs	r2, #0
 8004b66:	601a      	str	r2, [r3, #0]
 8004b68:	605a      	str	r2, [r3, #4]
 8004b6a:	609a      	str	r2, [r3, #8]
 8004b6c:	60da      	str	r2, [r3, #12]
 8004b6e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a1d      	ldr	r2, [pc, #116]	; (8004bec <HAL_TIM_Encoder_MspInit+0x94>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d133      	bne.n	8004be2 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	613b      	str	r3, [r7, #16]
 8004b7e:	4b1c      	ldr	r3, [pc, #112]	; (8004bf0 <HAL_TIM_Encoder_MspInit+0x98>)
 8004b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b82:	4a1b      	ldr	r2, [pc, #108]	; (8004bf0 <HAL_TIM_Encoder_MspInit+0x98>)
 8004b84:	f043 0302 	orr.w	r3, r3, #2
 8004b88:	6453      	str	r3, [r2, #68]	; 0x44
 8004b8a:	4b19      	ldr	r3, [pc, #100]	; (8004bf0 <HAL_TIM_Encoder_MspInit+0x98>)
 8004b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b8e:	f003 0302 	and.w	r3, r3, #2
 8004b92:	613b      	str	r3, [r7, #16]
 8004b94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004b96:	2300      	movs	r3, #0
 8004b98:	60fb      	str	r3, [r7, #12]
 8004b9a:	4b15      	ldr	r3, [pc, #84]	; (8004bf0 <HAL_TIM_Encoder_MspInit+0x98>)
 8004b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b9e:	4a14      	ldr	r2, [pc, #80]	; (8004bf0 <HAL_TIM_Encoder_MspInit+0x98>)
 8004ba0:	f043 0304 	orr.w	r3, r3, #4
 8004ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8004ba6:	4b12      	ldr	r3, [pc, #72]	; (8004bf0 <HAL_TIM_Encoder_MspInit+0x98>)
 8004ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004baa:	f003 0304 	and.w	r3, r3, #4
 8004bae:	60fb      	str	r3, [r7, #12]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004bb2:	23c0      	movs	r3, #192	; 0xc0
 8004bb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bb6:	2302      	movs	r3, #2
 8004bb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004bc6:	f107 0314 	add.w	r3, r7, #20
 8004bca:	4619      	mov	r1, r3
 8004bcc:	4809      	ldr	r0, [pc, #36]	; (8004bf4 <HAL_TIM_Encoder_MspInit+0x9c>)
 8004bce:	f001 ff0b 	bl	80069e8 <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	2100      	movs	r1, #0
 8004bd6:	202c      	movs	r0, #44	; 0x2c
 8004bd8:	f001 fb33 	bl	8006242 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8004bdc:	202c      	movs	r0, #44	; 0x2c
 8004bde:	f001 fb4c 	bl	800627a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8004be2:	bf00      	nop
 8004be4:	3728      	adds	r7, #40	; 0x28
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop
 8004bec:	40010400 	.word	0x40010400
 8004bf0:	40023800 	.word	0x40023800
 8004bf4:	40020800 	.word	0x40020800

08004bf8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b08c      	sub	sp, #48	; 0x30
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c00:	f107 031c 	add.w	r3, r7, #28
 8004c04:	2200      	movs	r2, #0
 8004c06:	601a      	str	r2, [r3, #0]
 8004c08:	605a      	str	r2, [r3, #4]
 8004c0a:	609a      	str	r2, [r3, #8]
 8004c0c:	60da      	str	r2, [r3, #12]
 8004c0e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a5c      	ldr	r2, [pc, #368]	; (8004d88 <HAL_TIM_MspPostInit+0x190>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d11f      	bne.n	8004c5a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	61bb      	str	r3, [r7, #24]
 8004c1e:	4b5b      	ldr	r3, [pc, #364]	; (8004d8c <HAL_TIM_MspPostInit+0x194>)
 8004c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c22:	4a5a      	ldr	r2, [pc, #360]	; (8004d8c <HAL_TIM_MspPostInit+0x194>)
 8004c24:	f043 0310 	orr.w	r3, r3, #16
 8004c28:	6313      	str	r3, [r2, #48]	; 0x30
 8004c2a:	4b58      	ldr	r3, [pc, #352]	; (8004d8c <HAL_TIM_MspPostInit+0x194>)
 8004c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c2e:	f003 0310 	and.w	r3, r3, #16
 8004c32:	61bb      	str	r3, [r7, #24]
 8004c34:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004c36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004c3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c3c:	2302      	movs	r3, #2
 8004c3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c40:	2300      	movs	r3, #0
 8004c42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c44:	2300      	movs	r3, #0
 8004c46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004c4c:	f107 031c 	add.w	r3, r7, #28
 8004c50:	4619      	mov	r1, r3
 8004c52:	484f      	ldr	r0, [pc, #316]	; (8004d90 <HAL_TIM_MspPostInit+0x198>)
 8004c54:	f001 fec8 	bl	80069e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8004c58:	e091      	b.n	8004d7e <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM3)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a4d      	ldr	r2, [pc, #308]	; (8004d94 <HAL_TIM_MspPostInit+0x19c>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d11e      	bne.n	8004ca2 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c64:	2300      	movs	r3, #0
 8004c66:	617b      	str	r3, [r7, #20]
 8004c68:	4b48      	ldr	r3, [pc, #288]	; (8004d8c <HAL_TIM_MspPostInit+0x194>)
 8004c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c6c:	4a47      	ldr	r2, [pc, #284]	; (8004d8c <HAL_TIM_MspPostInit+0x194>)
 8004c6e:	f043 0302 	orr.w	r3, r3, #2
 8004c72:	6313      	str	r3, [r2, #48]	; 0x30
 8004c74:	4b45      	ldr	r3, [pc, #276]	; (8004d8c <HAL_TIM_MspPostInit+0x194>)
 8004c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c78:	f003 0302 	and.w	r3, r3, #2
 8004c7c:	617b      	str	r3, [r7, #20]
 8004c7e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8004c80:	2330      	movs	r3, #48	; 0x30
 8004c82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c84:	2302      	movs	r3, #2
 8004c86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004c90:	2302      	movs	r3, #2
 8004c92:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c94:	f107 031c 	add.w	r3, r7, #28
 8004c98:	4619      	mov	r1, r3
 8004c9a:	483f      	ldr	r0, [pc, #252]	; (8004d98 <HAL_TIM_MspPostInit+0x1a0>)
 8004c9c:	f001 fea4 	bl	80069e8 <HAL_GPIO_Init>
}
 8004ca0:	e06d      	b.n	8004d7e <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM4)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a3d      	ldr	r2, [pc, #244]	; (8004d9c <HAL_TIM_MspPostInit+0x1a4>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d11f      	bne.n	8004cec <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004cac:	2300      	movs	r3, #0
 8004cae:	613b      	str	r3, [r7, #16]
 8004cb0:	4b36      	ldr	r3, [pc, #216]	; (8004d8c <HAL_TIM_MspPostInit+0x194>)
 8004cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb4:	4a35      	ldr	r2, [pc, #212]	; (8004d8c <HAL_TIM_MspPostInit+0x194>)
 8004cb6:	f043 0308 	orr.w	r3, r3, #8
 8004cba:	6313      	str	r3, [r2, #48]	; 0x30
 8004cbc:	4b33      	ldr	r3, [pc, #204]	; (8004d8c <HAL_TIM_MspPostInit+0x194>)
 8004cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc0:	f003 0308 	and.w	r3, r3, #8
 8004cc4:	613b      	str	r3, [r7, #16]
 8004cc6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8004cc8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8004ccc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cce:	2302      	movs	r3, #2
 8004cd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004cda:	2302      	movs	r3, #2
 8004cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004cde:	f107 031c 	add.w	r3, r7, #28
 8004ce2:	4619      	mov	r1, r3
 8004ce4:	482e      	ldr	r0, [pc, #184]	; (8004da0 <HAL_TIM_MspPostInit+0x1a8>)
 8004ce6:	f001 fe7f 	bl	80069e8 <HAL_GPIO_Init>
}
 8004cea:	e048      	b.n	8004d7e <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM10)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a2c      	ldr	r2, [pc, #176]	; (8004da4 <HAL_TIM_MspPostInit+0x1ac>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d11f      	bne.n	8004d36 <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	60fb      	str	r3, [r7, #12]
 8004cfa:	4b24      	ldr	r3, [pc, #144]	; (8004d8c <HAL_TIM_MspPostInit+0x194>)
 8004cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cfe:	4a23      	ldr	r2, [pc, #140]	; (8004d8c <HAL_TIM_MspPostInit+0x194>)
 8004d00:	f043 0302 	orr.w	r3, r3, #2
 8004d04:	6313      	str	r3, [r2, #48]	; 0x30
 8004d06:	4b21      	ldr	r3, [pc, #132]	; (8004d8c <HAL_TIM_MspPostInit+0x194>)
 8004d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d0a:	f003 0302 	and.w	r3, r3, #2
 8004d0e:	60fb      	str	r3, [r7, #12]
 8004d10:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004d12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d18:	2302      	movs	r3, #2
 8004d1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d20:	2300      	movs	r3, #0
 8004d22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8004d24:	2303      	movs	r3, #3
 8004d26:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d28:	f107 031c 	add.w	r3, r7, #28
 8004d2c:	4619      	mov	r1, r3
 8004d2e:	481a      	ldr	r0, [pc, #104]	; (8004d98 <HAL_TIM_MspPostInit+0x1a0>)
 8004d30:	f001 fe5a 	bl	80069e8 <HAL_GPIO_Init>
}
 8004d34:	e023      	b.n	8004d7e <HAL_TIM_MspPostInit+0x186>
  else if(htim->Instance==TIM11)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a1b      	ldr	r2, [pc, #108]	; (8004da8 <HAL_TIM_MspPostInit+0x1b0>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d11e      	bne.n	8004d7e <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d40:	2300      	movs	r3, #0
 8004d42:	60bb      	str	r3, [r7, #8]
 8004d44:	4b11      	ldr	r3, [pc, #68]	; (8004d8c <HAL_TIM_MspPostInit+0x194>)
 8004d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d48:	4a10      	ldr	r2, [pc, #64]	; (8004d8c <HAL_TIM_MspPostInit+0x194>)
 8004d4a:	f043 0302 	orr.w	r3, r3, #2
 8004d4e:	6313      	str	r3, [r2, #48]	; 0x30
 8004d50:	4b0e      	ldr	r3, [pc, #56]	; (8004d8c <HAL_TIM_MspPostInit+0x194>)
 8004d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d54:	f003 0302 	and.w	r3, r3, #2
 8004d58:	60bb      	str	r3, [r7, #8]
 8004d5a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004d5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d62:	2302      	movs	r3, #2
 8004d64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d66:	2300      	movs	r3, #0
 8004d68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8004d6e:	2303      	movs	r3, #3
 8004d70:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d72:	f107 031c 	add.w	r3, r7, #28
 8004d76:	4619      	mov	r1, r3
 8004d78:	4807      	ldr	r0, [pc, #28]	; (8004d98 <HAL_TIM_MspPostInit+0x1a0>)
 8004d7a:	f001 fe35 	bl	80069e8 <HAL_GPIO_Init>
}
 8004d7e:	bf00      	nop
 8004d80:	3730      	adds	r7, #48	; 0x30
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}
 8004d86:	bf00      	nop
 8004d88:	40010000 	.word	0x40010000
 8004d8c:	40023800 	.word	0x40023800
 8004d90:	40021000 	.word	0x40021000
 8004d94:	40000400 	.word	0x40000400
 8004d98:	40020400 	.word	0x40020400
 8004d9c:	40000800 	.word	0x40000800
 8004da0:	40020c00 	.word	0x40020c00
 8004da4:	40014400 	.word	0x40014400
 8004da8:	40014800 	.word	0x40014800

08004dac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b08a      	sub	sp, #40	; 0x28
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004db4:	f107 0314 	add.w	r3, r7, #20
 8004db8:	2200      	movs	r2, #0
 8004dba:	601a      	str	r2, [r3, #0]
 8004dbc:	605a      	str	r2, [r3, #4]
 8004dbe:	609a      	str	r2, [r3, #8]
 8004dc0:	60da      	str	r2, [r3, #12]
 8004dc2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a19      	ldr	r2, [pc, #100]	; (8004e30 <HAL_UART_MspInit+0x84>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d12b      	bne.n	8004e26 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004dce:	2300      	movs	r3, #0
 8004dd0:	613b      	str	r3, [r7, #16]
 8004dd2:	4b18      	ldr	r3, [pc, #96]	; (8004e34 <HAL_UART_MspInit+0x88>)
 8004dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd6:	4a17      	ldr	r2, [pc, #92]	; (8004e34 <HAL_UART_MspInit+0x88>)
 8004dd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ddc:	6413      	str	r3, [r2, #64]	; 0x40
 8004dde:	4b15      	ldr	r3, [pc, #84]	; (8004e34 <HAL_UART_MspInit+0x88>)
 8004de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004de6:	613b      	str	r3, [r7, #16]
 8004de8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004dea:	2300      	movs	r3, #0
 8004dec:	60fb      	str	r3, [r7, #12]
 8004dee:	4b11      	ldr	r3, [pc, #68]	; (8004e34 <HAL_UART_MspInit+0x88>)
 8004df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004df2:	4a10      	ldr	r2, [pc, #64]	; (8004e34 <HAL_UART_MspInit+0x88>)
 8004df4:	f043 0308 	orr.w	r3, r3, #8
 8004df8:	6313      	str	r3, [r2, #48]	; 0x30
 8004dfa:	4b0e      	ldr	r3, [pc, #56]	; (8004e34 <HAL_UART_MspInit+0x88>)
 8004dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dfe:	f003 0308 	and.w	r3, r3, #8
 8004e02:	60fb      	str	r3, [r7, #12]
 8004e04:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8004e06:	2360      	movs	r3, #96	; 0x60
 8004e08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e0a:	2302      	movs	r3, #2
 8004e0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e12:	2303      	movs	r3, #3
 8004e14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004e16:	2307      	movs	r3, #7
 8004e18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004e1a:	f107 0314 	add.w	r3, r7, #20
 8004e1e:	4619      	mov	r1, r3
 8004e20:	4805      	ldr	r0, [pc, #20]	; (8004e38 <HAL_UART_MspInit+0x8c>)
 8004e22:	f001 fde1 	bl	80069e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004e26:	bf00      	nop
 8004e28:	3728      	adds	r7, #40	; 0x28
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	40004400 	.word	0x40004400
 8004e34:	40023800 	.word	0x40023800
 8004e38:	40020c00 	.word	0x40020c00

08004e3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004e40:	e7fe      	b.n	8004e40 <NMI_Handler+0x4>

08004e42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004e42:	b480      	push	{r7}
 8004e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004e46:	e7fe      	b.n	8004e46 <HardFault_Handler+0x4>

08004e48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004e4c:	e7fe      	b.n	8004e4c <MemManage_Handler+0x4>

08004e4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004e4e:	b480      	push	{r7}
 8004e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004e52:	e7fe      	b.n	8004e52 <BusFault_Handler+0x4>

08004e54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004e54:	b480      	push	{r7}
 8004e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004e58:	e7fe      	b.n	8004e58 <UsageFault_Handler+0x4>

08004e5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004e5a:	b480      	push	{r7}
 8004e5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004e5e:	bf00      	nop
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr

08004e68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004e6c:	bf00      	nop
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr

08004e76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004e76:	b480      	push	{r7}
 8004e78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004e7a:	bf00      	nop
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr

08004e84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004e88:	f000 fcba 	bl	8005800 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004e8c:	bf00      	nop
 8004e8e:	bd80      	pop	{r7, pc}

08004e90 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8004e94:	2004      	movs	r0, #4
 8004e96:	f001 ff83 	bl	8006da0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8004e9a:	bf00      	nop
 8004e9c:	bd80      	pop	{r7, pc}

08004e9e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004e9e:	b580      	push	{r7, lr}
 8004ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8004ea2:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004ea6:	f001 ff7b 	bl	8006da0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004eaa:	bf00      	nop
 8004eac:	bd80      	pop	{r7, pc}
	...

08004eb0 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8004eb4:	4803      	ldr	r0, [pc, #12]	; (8004ec4 <TIM8_UP_TIM13_IRQHandler+0x14>)
 8004eb6:	f005 ff92 	bl	800adde <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 8004eba:	4803      	ldr	r0, [pc, #12]	; (8004ec8 <TIM8_UP_TIM13_IRQHandler+0x18>)
 8004ebc:	f005 ff8f 	bl	800adde <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8004ec0:	bf00      	nop
 8004ec2:	bd80      	pop	{r7, pc}
 8004ec4:	2000a174 	.word	0x2000a174
 8004ec8:	2000a370 	.word	0x2000a370

08004ecc <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8004ed0:	4802      	ldr	r0, [pc, #8]	; (8004edc <SDIO_IRQHandler+0x10>)
 8004ed2:	f004 f82b 	bl	8008f2c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8004ed6:	bf00      	nop
 8004ed8:	bd80      	pop	{r7, pc}
 8004eda:	bf00      	nop
 8004edc:	2000a4d0 	.word	0x2000a4d0

08004ee0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004ee4:	4802      	ldr	r0, [pc, #8]	; (8004ef0 <TIM6_DAC_IRQHandler+0x10>)
 8004ee6:	f005 ff7a 	bl	800adde <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004eea:	bf00      	nop
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	2000a450 	.word	0x2000a450

08004ef4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004ef8:	4802      	ldr	r0, [pc, #8]	; (8004f04 <TIM7_IRQHandler+0x10>)
 8004efa:	f005 ff70 	bl	800adde <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8004efe:	bf00      	nop
 8004f00:	bd80      	pop	{r7, pc}
 8004f02:	bf00      	nop
 8004f04:	2000a5f4 	.word	0x2000a5f4

08004f08 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8004f0c:	4802      	ldr	r0, [pc, #8]	; (8004f18 <DMA2_Stream2_IRQHandler+0x10>)
 8004f0e:	f001 faf7 	bl	8006500 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8004f12:	bf00      	nop
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	bf00      	nop
 8004f18:	2000a594 	.word	0x2000a594

08004f1c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8004f20:	4802      	ldr	r0, [pc, #8]	; (8004f2c <DMA2_Stream3_IRQHandler+0x10>)
 8004f22:	f001 faed 	bl	8006500 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8004f26:	bf00      	nop
 8004f28:	bd80      	pop	{r7, pc}
 8004f2a:	bf00      	nop
 8004f2c:	2000a0bc 	.word	0x2000a0bc

08004f30 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8004f34:	4802      	ldr	r0, [pc, #8]	; (8004f40 <DMA2_Stream6_IRQHandler+0x10>)
 8004f36:	f001 fae3 	bl	8006500 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8004f3a:	bf00      	nop
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	bf00      	nop
 8004f40:	2000a3f0 	.word	0x2000a3f0

08004f44 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b086      	sub	sp, #24
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	60f8      	str	r0, [r7, #12]
 8004f4c:	60b9      	str	r1, [r7, #8]
 8004f4e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f50:	2300      	movs	r3, #0
 8004f52:	617b      	str	r3, [r7, #20]
 8004f54:	e00a      	b.n	8004f6c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004f56:	f3af 8000 	nop.w
 8004f5a:	4601      	mov	r1, r0
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	1c5a      	adds	r2, r3, #1
 8004f60:	60ba      	str	r2, [r7, #8]
 8004f62:	b2ca      	uxtb	r2, r1
 8004f64:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	3301      	adds	r3, #1
 8004f6a:	617b      	str	r3, [r7, #20]
 8004f6c:	697a      	ldr	r2, [r7, #20]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	429a      	cmp	r2, r3
 8004f72:	dbf0      	blt.n	8004f56 <_read+0x12>
	}

return len;
 8004f74:	687b      	ldr	r3, [r7, #4]
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	3718      	adds	r7, #24
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}

08004f7e <_close>:
	}
	return len;
}

int _close(int file)
{
 8004f7e:	b480      	push	{r7}
 8004f80:	b083      	sub	sp, #12
 8004f82:	af00      	add	r7, sp, #0
 8004f84:	6078      	str	r0, [r7, #4]
	return -1;
 8004f86:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	370c      	adds	r7, #12
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr

08004f96 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004f96:	b480      	push	{r7}
 8004f98:	b083      	sub	sp, #12
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	6078      	str	r0, [r7, #4]
 8004f9e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004fa6:	605a      	str	r2, [r3, #4]
	return 0;
 8004fa8:	2300      	movs	r3, #0
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	370c      	adds	r7, #12
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr

08004fb6 <_isatty>:

int _isatty(int file)
{
 8004fb6:	b480      	push	{r7}
 8004fb8:	b083      	sub	sp, #12
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	6078      	str	r0, [r7, #4]
	return 1;
 8004fbe:	2301      	movs	r3, #1
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	370c      	adds	r7, #12
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr

08004fcc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b085      	sub	sp, #20
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	60f8      	str	r0, [r7, #12]
 8004fd4:	60b9      	str	r1, [r7, #8]
 8004fd6:	607a      	str	r2, [r7, #4]
	return 0;
 8004fd8:	2300      	movs	r3, #0
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3714      	adds	r7, #20
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr
	...

08004fe8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b086      	sub	sp, #24
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004ff0:	4a14      	ldr	r2, [pc, #80]	; (8005044 <_sbrk+0x5c>)
 8004ff2:	4b15      	ldr	r3, [pc, #84]	; (8005048 <_sbrk+0x60>)
 8004ff4:	1ad3      	subs	r3, r2, r3
 8004ff6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004ffc:	4b13      	ldr	r3, [pc, #76]	; (800504c <_sbrk+0x64>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d102      	bne.n	800500a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005004:	4b11      	ldr	r3, [pc, #68]	; (800504c <_sbrk+0x64>)
 8005006:	4a12      	ldr	r2, [pc, #72]	; (8005050 <_sbrk+0x68>)
 8005008:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800500a:	4b10      	ldr	r3, [pc, #64]	; (800504c <_sbrk+0x64>)
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4413      	add	r3, r2
 8005012:	693a      	ldr	r2, [r7, #16]
 8005014:	429a      	cmp	r2, r3
 8005016:	d207      	bcs.n	8005028 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005018:	f00c ff04 	bl	8011e24 <__errno>
 800501c:	4602      	mov	r2, r0
 800501e:	230c      	movs	r3, #12
 8005020:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8005022:	f04f 33ff 	mov.w	r3, #4294967295
 8005026:	e009      	b.n	800503c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005028:	4b08      	ldr	r3, [pc, #32]	; (800504c <_sbrk+0x64>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800502e:	4b07      	ldr	r3, [pc, #28]	; (800504c <_sbrk+0x64>)
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4413      	add	r3, r2
 8005036:	4a05      	ldr	r2, [pc, #20]	; (800504c <_sbrk+0x64>)
 8005038:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800503a:	68fb      	ldr	r3, [r7, #12]
}
 800503c:	4618      	mov	r0, r3
 800503e:	3718      	adds	r7, #24
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}
 8005044:	20050000 	.word	0x20050000
 8005048:	00000400 	.word	0x00000400
 800504c:	20000234 	.word	0x20000234
 8005050:	2000c6b0 	.word	0x2000c6b0

08005054 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005054:	b480      	push	{r7}
 8005056:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005058:	4b08      	ldr	r3, [pc, #32]	; (800507c <SystemInit+0x28>)
 800505a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800505e:	4a07      	ldr	r2, [pc, #28]	; (800507c <SystemInit+0x28>)
 8005060:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005064:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005068:	4b04      	ldr	r3, [pc, #16]	; (800507c <SystemInit+0x28>)
 800506a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800506e:	609a      	str	r2, [r3, #8]
#endif
}
 8005070:	bf00      	nop
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr
 800507a:	bf00      	nop
 800507c:	e000ed00 	.word	0xe000ed00

08005080 <batteryLowMode>:
VelocityCtrl velocity_ctrl(&motor, &encoder, &imu);
LineTrace line_trace(&motor, &line_sensor, &velocity_ctrl);
Odometry odometry(&encoder, &imu, &velocity_ctrl);

void batteryLowMode()
{
 8005080:	b580      	push	{r7, lr}
 8005082:	af00      	add	r7, sp, #0
	lcd_clear();
 8005084:	f7fc f80c 	bl	80010a0 <lcd_clear>
	lcd_locate(0,0);
 8005088:	2100      	movs	r1, #0
 800508a:	2000      	movs	r0, #0
 800508c:	f7fc f818 	bl	80010c0 <lcd_locate>
	lcd_printf("Battery");
 8005090:	4814      	ldr	r0, [pc, #80]	; (80050e4 <batteryLowMode+0x64>)
 8005092:	f7fc f83f 	bl	8001114 <lcd_printf>
	lcd_locate(0,1);
 8005096:	2101      	movs	r1, #1
 8005098:	2000      	movs	r0, #0
 800509a:	f7fc f811 	bl	80010c0 <lcd_locate>
	lcd_printf("Low");
 800509e:	4812      	ldr	r0, [pc, #72]	; (80050e8 <batteryLowMode+0x68>)
 80050a0:	f7fc f838 	bl	8001114 <lcd_printf>

	while(1){
		led.fullColor('R');
 80050a4:	2152      	movs	r1, #82	; 0x52
 80050a6:	4811      	ldr	r0, [pc, #68]	; (80050ec <batteryLowMode+0x6c>)
 80050a8:	f7fc fdf2 	bl	8001c90 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 80050ac:	2064      	movs	r0, #100	; 0x64
 80050ae:	f000 fbc7 	bl	8005840 <HAL_Delay>
		led.fullColor('Y');
 80050b2:	2159      	movs	r1, #89	; 0x59
 80050b4:	480d      	ldr	r0, [pc, #52]	; (80050ec <batteryLowMode+0x6c>)
 80050b6:	f7fc fdeb 	bl	8001c90 <_ZN3LED9fullColorEc>
		HAL_Delay(100);
 80050ba:	2064      	movs	r0, #100	; 0x64
 80050bc:	f000 fbc0 	bl	8005840 <HAL_Delay>

		if(joy_stick.getValue() == JOY_C){
 80050c0:	480b      	ldr	r0, [pc, #44]	; (80050f0 <batteryLowMode+0x70>)
 80050c2:	f7fc fd81 	bl	8001bc8 <_ZN8JoyStick8getValueEv>
 80050c6:	4603      	mov	r3, r0
 80050c8:	2b02      	cmp	r3, #2
 80050ca:	bf0c      	ite	eq
 80050cc:	2301      	moveq	r3, #1
 80050ce:	2300      	movne	r3, #0
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d0e6      	beq.n	80050a4 <batteryLowMode+0x24>
			HAL_Delay(500);
 80050d6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80050da:	f000 fbb1 	bl	8005840 <HAL_Delay>
			break;
 80050de:	bf00      	nop
		}
	}
}
 80050e0:	bf00      	nop
 80050e2:	bd80      	pop	{r7, pc}
 80050e4:	08016d90 	.word	0x08016d90
 80050e8:	08016d98 	.word	0x08016d98
 80050ec:	20000540 	.word	0x20000540
 80050f0:	20000534 	.word	0x20000534

080050f4 <cppInit>:

void cppInit(void)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	af00      	add	r7, sp, #0
	lcd_init();
 80050f8:	f7fb ff8e 	bl	8001018 <lcd_init>

	//---------- Buttery Check ----------//
	power_sensor.init();
 80050fc:	4823      	ldr	r0, [pc, #140]	; (800518c <cppInit+0x98>)
 80050fe:	f7fd fe14 	bl	8002d2a <_ZN11PowerSensor4initEv>
	HAL_Delay(100);
 8005102:	2064      	movs	r0, #100	; 0x64
 8005104:	f000 fb9c 	bl	8005840 <HAL_Delay>
	power_sensor.updateValues();
 8005108:	4820      	ldr	r0, [pc, #128]	; (800518c <cppInit+0x98>)
 800510a:	f7fd fe1d 	bl	8002d48 <_ZN11PowerSensor12updateValuesEv>
	if(power_sensor.butteryCheck() == true) batteryLowMode();
 800510e:	481f      	ldr	r0, [pc, #124]	; (800518c <cppInit+0x98>)
 8005110:	f7fd fe46 	bl	8002da0 <_ZN11PowerSensor12butteryCheckEv>
 8005114:	4603      	mov	r3, r0
 8005116:	2b00      	cmp	r3, #0
 8005118:	d001      	beq.n	800511e <cppInit+0x2a>
 800511a:	f7ff ffb1 	bl	8005080 <batteryLowMode>

	// -----------initialize-------//
	logger.sdCardInit();
 800511e:	481c      	ldr	r0, [pc, #112]	; (8005190 <cppInit+0x9c>)
 8005120:	f7fd fb7e 	bl	8002820 <_ZN6Logger10sdCardInitEv>
	line_sensor.ADCStart();
 8005124:	481b      	ldr	r0, [pc, #108]	; (8005194 <cppInit+0xa0>)
 8005126:	f7fc ff0f 	bl	8001f48 <_ZN10LineSensor8ADCStartEv>
	motor.init();
 800512a:	481b      	ldr	r0, [pc, #108]	; (8005198 <cppInit+0xa4>)
 800512c:	f7fd fc36 	bl	800299c <_ZN5Motor4initEv>
	encoder.init();
 8005130:	481a      	ldr	r0, [pc, #104]	; (800519c <cppInit+0xa8>)
 8005132:	f7fc f82d 	bl	8001190 <_ZN7Encoder4initEv>
	imu.init();
 8005136:	481a      	ldr	r0, [pc, #104]	; (80051a0 <cppInit+0xac>)
 8005138:	f7fc fc4c 	bl	80019d4 <_ZN3IMU4initEv>

	line_sensor.calibration();
 800513c:	4815      	ldr	r0, [pc, #84]	; (8005194 <cppInit+0xa0>)
 800513e:	f7fc fff9 	bl	8002134 <_ZN10LineSensor11calibrationEv>
	HAL_Delay(1000);
 8005142:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005146:	f000 fb7b 	bl	8005840 <HAL_Delay>
	//imu.calibration();
	//printf("imu offset %f", imu.getOffsetVal());

	//line_trace.setGain(0.0005, 0.000003, 0);
	line_trace.setGain(0.0005, 0.000001, 0);
 800514a:	ed9f 1a16 	vldr	s2, [pc, #88]	; 80051a4 <cppInit+0xb0>
 800514e:	eddf 0a16 	vldr	s1, [pc, #88]	; 80051a8 <cppInit+0xb4>
 8005152:	ed9f 0a16 	vldr	s0, [pc, #88]	; 80051ac <cppInit+0xb8>
 8005156:	4816      	ldr	r0, [pc, #88]	; (80051b0 <cppInit+0xbc>)
 8005158:	f7fd fab2 	bl	80026c0 <_ZN9LineTrace7setGainEfff>

	//velocity_ctrl.setVelocityGain(1.5, 0, 20);
	velocity_ctrl.setVelocityGain(0, 0, 0);
 800515c:	ed9f 1a11 	vldr	s2, [pc, #68]	; 80051a4 <cppInit+0xb0>
 8005160:	eddf 0a10 	vldr	s1, [pc, #64]	; 80051a4 <cppInit+0xb0>
 8005164:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 80051a4 <cppInit+0xb0>
 8005168:	4812      	ldr	r0, [pc, #72]	; (80051b4 <cppInit+0xc0>)
 800516a:	f7fe f8f1 	bl	8003350 <_ZN12VelocityCtrl15setVelocityGainEfff>
	//velocity_ctrl.setOmegaGain(0.05, 0, 7);
	velocity_ctrl.setOmegaGain(0.0, 0, 0);
 800516e:	ed9f 1a0d 	vldr	s2, [pc, #52]	; 80051a4 <cppInit+0xb0>
 8005172:	eddf 0a0c 	vldr	s1, [pc, #48]	; 80051a4 <cppInit+0xb0>
 8005176:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 80051a4 <cppInit+0xb0>
 800517a:	480e      	ldr	r0, [pc, #56]	; (80051b4 <cppInit+0xc0>)
 800517c:	f7fe f901 	bl	8003382 <_ZN12VelocityCtrl12setOmegaGainEfff>


	encoder.clearDistance();
 8005180:	4806      	ldr	r0, [pc, #24]	; (800519c <cppInit+0xa8>)
 8005182:	f7fc f8e6 	bl	8001352 <_ZN7Encoder13clearDistanceEv>

}
 8005186:	bf00      	nop
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop
 800518c:	20000544 	.word	0x20000544
 8005190:	20000570 	.word	0x20000570
 8005194:	20000238 	.word	0x20000238
 8005198:	2000053c 	.word	0x2000053c
 800519c:	20007aa4 	.word	0x20007aa4
 80051a0:	20000550 	.word	0x20000550
 80051a4:	00000000 	.word	0x00000000
 80051a8:	358637bd 	.word	0x358637bd
 80051ac:	3a03126f 	.word	0x3a03126f
 80051b0:	20007af0 	.word	0x20007af0
 80051b4:	20007ab8 	.word	0x20007ab8

080051b8 <cppFlip1ms>:

void cppFlip1ms(void)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	af00      	add	r7, sp, #0
	line_sensor.updateSensorValues();
 80051bc:	480c      	ldr	r0, [pc, #48]	; (80051f0 <cppFlip1ms+0x38>)
 80051be:	f7fc ff21 	bl	8002004 <_ZN10LineSensor18updateSensorValuesEv>
	imu.updateValues();
 80051c2:	480c      	ldr	r0, [pc, #48]	; (80051f4 <cppFlip1ms+0x3c>)
 80051c4:	f7fc fc1a 	bl	80019fc <_ZN3IMU12updateValuesEv>
	encoder.updateCnt();
 80051c8:	480b      	ldr	r0, [pc, #44]	; (80051f8 <cppFlip1ms+0x40>)
 80051ca:	f7fc f801 	bl	80011d0 <_ZN7Encoder9updateCntEv>

	line_trace.flip();
 80051ce:	480b      	ldr	r0, [pc, #44]	; (80051fc <cppFlip1ms+0x44>)
 80051d0:	f7fd faae 	bl	8002730 <_ZN9LineTrace4flipEv>
	velocity_ctrl.flip();
 80051d4:	480a      	ldr	r0, [pc, #40]	; (8005200 <cppFlip1ms+0x48>)
 80051d6:	f7fe f8ed 	bl	80033b4 <_ZN12VelocityCtrl4flipEv>
	odometry.flip();
 80051da:	480a      	ldr	r0, [pc, #40]	; (8005204 <cppFlip1ms+0x4c>)
 80051dc:	f7fd fd9a 	bl	8002d14 <_ZN8Odometry4flipEv>

	motor.motorCtrl();
 80051e0:	4809      	ldr	r0, [pc, #36]	; (8005208 <cppFlip1ms+0x50>)
 80051e2:	f7fd fbed 	bl	80029c0 <_ZN5Motor9motorCtrlEv>

	encoder.clearCnt();
 80051e6:	4804      	ldr	r0, [pc, #16]	; (80051f8 <cppFlip1ms+0x40>)
 80051e8:	f7fc f8c2 	bl	8001370 <_ZN7Encoder8clearCntEv>

	//Buttery Check
	//power_sensor.updateValues();
	//if(power_sensor.butteryCheck() == true) led.fullColor('R');

}
 80051ec:	bf00      	nop
 80051ee:	bd80      	pop	{r7, pc}
 80051f0:	20000238 	.word	0x20000238
 80051f4:	20000550 	.word	0x20000550
 80051f8:	20007aa4 	.word	0x20007aa4
 80051fc:	20007af0 	.word	0x20007af0
 8005200:	20007ab8 	.word	0x20007ab8
 8005204:	20007b4c 	.word	0x20007b4c
 8005208:	2000053c 	.word	0x2000053c

0800520c <cppFlip100ns>:

void cppFlip100ns(void)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	af00      	add	r7, sp, #0
	line_sensor.storeSensorValues();
 8005210:	4802      	ldr	r0, [pc, #8]	; (800521c <cppFlip100ns+0x10>)
 8005212:	f7fc fea9 	bl	8001f68 <_ZN10LineSensor17storeSensorValuesEv>
}
 8005216:	bf00      	nop
 8005218:	bd80      	pop	{r7, pc}
 800521a:	bf00      	nop
 800521c:	20000238 	.word	0x20000238

08005220 <cppFlip10ms>:

void cppFlip10ms(void)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	af00      	add	r7, sp, #0
	logger.storeLog(line_sensor.sensor[7]);
 8005224:	4b04      	ldr	r3, [pc, #16]	; (8005238 <cppFlip10ms+0x18>)
 8005226:	edd3 7ab7 	vldr	s15, [r3, #732]	; 0x2dc
 800522a:	eeb0 0a67 	vmov.f32	s0, s15
 800522e:	4803      	ldr	r0, [pc, #12]	; (800523c <cppFlip10ms+0x1c>)
 8005230:	f7fd fb36 	bl	80028a0 <_ZN6Logger8storeLogEf>
}
 8005234:	bf00      	nop
 8005236:	bd80      	pop	{r7, pc}
 8005238:	20000238 	.word	0x20000238
 800523c:	20000570 	.word	0x20000570

08005240 <cppExit>:

void cppExit(uint16_t gpio_pin)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b082      	sub	sp, #8
 8005244:	af00      	add	r7, sp, #0
 8005246:	4603      	mov	r3, r0
 8005248:	80fb      	strh	r3, [r7, #6]
	side_sensor.updateStatus(gpio_pin);
 800524a:	88fb      	ldrh	r3, [r7, #6]
 800524c:	4619      	mov	r1, r3
 800524e:	4803      	ldr	r0, [pc, #12]	; (800525c <cppExit+0x1c>)
 8005250:	f7fd fe32 	bl	8002eb8 <_ZN10SideSensor12updateStatusEt>
}
 8005254:	bf00      	nop
 8005256:	3708      	adds	r7, #8
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}
 800525c:	20000530 	.word	0x20000530

08005260 <cppLoop>:

void cppLoop(void)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b082      	sub	sp, #8
 8005264:	af00      	add	r7, sp, #0
	switch(rotary_switch.getValue()){
 8005266:	48a8      	ldr	r0, [pc, #672]	; (8005508 <cppLoop+0x2a8>)
 8005268:	f7fd fdcc 	bl	8002e04 <_ZN12RotarySwitch8getValueEv>
 800526c:	4603      	mov	r3, r0
 800526e:	2b0f      	cmp	r3, #15
 8005270:	f200 81d2 	bhi.w	8005618 <cppLoop+0x3b8>
 8005274:	a201      	add	r2, pc, #4	; (adr r2, 800527c <cppLoop+0x1c>)
 8005276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800527a:	bf00      	nop
 800527c:	080052bd 	.word	0x080052bd
 8005280:	080052df 	.word	0x080052df
 8005284:	08005367 	.word	0x08005367
 8005288:	080053c3 	.word	0x080053c3
 800528c:	0800547b 	.word	0x0800547b
 8005290:	08005559 	.word	0x08005559
 8005294:	08005619 	.word	0x08005619
 8005298:	08005619 	.word	0x08005619
 800529c:	08005619 	.word	0x08005619
 80052a0:	08005619 	.word	0x08005619
 80052a4:	08005619 	.word	0x08005619
 80052a8:	08005619 	.word	0x08005619
 80052ac:	08005619 	.word	0x08005619
 80052b0:	08005619 	.word	0x08005619
 80052b4:	08005619 	.word	0x08005619
 80052b8:	08005619 	.word	0x08005619

	case 0:
		lcd_clear();
 80052bc:	f7fb fef0 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80052c0:	2100      	movs	r1, #0
 80052c2:	2000      	movs	r0, #0
 80052c4:	f7fb fefc 	bl	80010c0 <lcd_locate>
		lcd_printf("LCD");
 80052c8:	4890      	ldr	r0, [pc, #576]	; (800550c <cppLoop+0x2ac>)
 80052ca:	f7fb ff23 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80052ce:	2101      	movs	r1, #1
 80052d0:	2000      	movs	r0, #0
 80052d2:	f7fb fef5 	bl	80010c0 <lcd_locate>
		lcd_printf("TEST0");
 80052d6:	488e      	ldr	r0, [pc, #568]	; (8005510 <cppLoop+0x2b0>)
 80052d8:	f7fb ff1c 	bl	8001114 <lcd_printf>
		break;
 80052dc:	e1a7      	b.n	800562e <cppLoop+0x3ce>

	case 1:
		lcd_clear();
 80052de:	f7fb fedf 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80052e2:	2100      	movs	r1, #0
 80052e4:	2000      	movs	r0, #0
 80052e6:	f7fb feeb 	bl	80010c0 <lcd_locate>
		lcd_printf("velocity");
 80052ea:	488a      	ldr	r0, [pc, #552]	; (8005514 <cppLoop+0x2b4>)
 80052ec:	f7fb ff12 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80052f0:	2101      	movs	r1, #1
 80052f2:	2000      	movs	r0, #0
 80052f4:	f7fb fee4 	bl	80010c0 <lcd_locate>
		lcd_printf("test");
 80052f8:	4887      	ldr	r0, [pc, #540]	; (8005518 <cppLoop+0x2b8>)
 80052fa:	f7fb ff0b 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80052fe:	4887      	ldr	r0, [pc, #540]	; (800551c <cppLoop+0x2bc>)
 8005300:	f7fc fc62 	bl	8001bc8 <_ZN8JoyStick8getValueEv>
 8005304:	4603      	mov	r3, r0
 8005306:	2b02      	cmp	r3, #2
 8005308:	bf0c      	ite	eq
 800530a:	2301      	moveq	r3, #1
 800530c:	2300      	movne	r3, #0
 800530e:	b2db      	uxtb	r3, r3
 8005310:	2b00      	cmp	r3, #0
 8005312:	f000 8183 	beq.w	800561c <cppLoop+0x3bc>
			HAL_Delay(500);
 8005316:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800531a:	f000 fa91 	bl	8005840 <HAL_Delay>

			logger.start();
 800531e:	4880      	ldr	r0, [pc, #512]	; (8005520 <cppLoop+0x2c0>)
 8005320:	f7fd fb0a 	bl	8002938 <_ZN6Logger5startEv>
			velocity_ctrl.start();
 8005324:	487f      	ldr	r0, [pc, #508]	; (8005524 <cppLoop+0x2c4>)
 8005326:	f7fe f85b 	bl	80033e0 <_ZN12VelocityCtrl5startEv>
			velocity_ctrl.setVelocity(0.0, 0.0);
 800532a:	eddf 0a7f 	vldr	s1, [pc, #508]	; 8005528 <cppLoop+0x2c8>
 800532e:	ed9f 0a7e 	vldr	s0, [pc, #504]	; 8005528 <cppLoop+0x2c8>
 8005332:	487c      	ldr	r0, [pc, #496]	; (8005524 <cppLoop+0x2c4>)
 8005334:	f7fd fff8 	bl	8003328 <_ZN12VelocityCtrl11setVelocityEff>
			led.LR(1, -1);
 8005338:	f04f 32ff 	mov.w	r2, #4294967295
 800533c:	2101      	movs	r1, #1
 800533e:	487b      	ldr	r0, [pc, #492]	; (800552c <cppLoop+0x2cc>)
 8005340:	f7fc fd62 	bl	8001e08 <_ZN3LED2LREaa>

			HAL_Delay(3000);
 8005344:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8005348:	f000 fa7a 	bl	8005840 <HAL_Delay>

			velocity_ctrl.stop();
 800534c:	4875      	ldr	r0, [pc, #468]	; (8005524 <cppLoop+0x2c4>)
 800534e:	f7fe f857 	bl	8003400 <_ZN12VelocityCtrl4stopEv>
			led.LR(0, -1);
 8005352:	f04f 32ff 	mov.w	r2, #4294967295
 8005356:	2100      	movs	r1, #0
 8005358:	4874      	ldr	r0, [pc, #464]	; (800552c <cppLoop+0x2cc>)
 800535a:	f7fc fd55 	bl	8001e08 <_ZN3LED2LREaa>

			logger.stop();
 800535e:	4870      	ldr	r0, [pc, #448]	; (8005520 <cppLoop+0x2c0>)
 8005360:	f7fd fafa 	bl	8002958 <_ZN6Logger4stopEv>
		}

		break;
 8005364:	e15a      	b.n	800561c <cppLoop+0x3bc>

	case 2:
		lcd_clear();
 8005366:	f7fb fe9b 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 800536a:	2100      	movs	r1, #0
 800536c:	2000      	movs	r0, #0
 800536e:	f7fb fea7 	bl	80010c0 <lcd_locate>
		lcd_printf("LOG");
 8005372:	486f      	ldr	r0, [pc, #444]	; (8005530 <cppLoop+0x2d0>)
 8005374:	f7fb fece 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8005378:	2101      	movs	r1, #1
 800537a:	2000      	movs	r0, #0
 800537c:	f7fb fea0 	bl	80010c0 <lcd_locate>
		lcd_printf("SAVE");
 8005380:	486c      	ldr	r0, [pc, #432]	; (8005534 <cppLoop+0x2d4>)
 8005382:	f7fb fec7 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8005386:	4865      	ldr	r0, [pc, #404]	; (800551c <cppLoop+0x2bc>)
 8005388:	f7fc fc1e 	bl	8001bc8 <_ZN8JoyStick8getValueEv>
 800538c:	4603      	mov	r3, r0
 800538e:	2b02      	cmp	r3, #2
 8005390:	bf0c      	ite	eq
 8005392:	2301      	moveq	r3, #1
 8005394:	2300      	movne	r3, #0
 8005396:	b2db      	uxtb	r3, r3
 8005398:	2b00      	cmp	r3, #0
 800539a:	f000 8141 	beq.w	8005620 <cppLoop+0x3c0>
			led.LR(1, -1);
 800539e:	f04f 32ff 	mov.w	r2, #4294967295
 80053a2:	2101      	movs	r1, #1
 80053a4:	4861      	ldr	r0, [pc, #388]	; (800552c <cppLoop+0x2cc>)
 80053a6:	f7fc fd2f 	bl	8001e08 <_ZN3LED2LREaa>
			logger.saveLogs("line_sensors", "sensor6.csv");
 80053aa:	4a63      	ldr	r2, [pc, #396]	; (8005538 <cppLoop+0x2d8>)
 80053ac:	4963      	ldr	r1, [pc, #396]	; (800553c <cppLoop+0x2dc>)
 80053ae:	485c      	ldr	r0, [pc, #368]	; (8005520 <cppLoop+0x2c0>)
 80053b0:	f7fd faae 	bl	8002910 <_ZN6Logger8saveLogsEPKcS1_>
			led.LR(0, -1);
 80053b4:	f04f 32ff 	mov.w	r2, #4294967295
 80053b8:	2100      	movs	r1, #0
 80053ba:	485c      	ldr	r0, [pc, #368]	; (800552c <cppLoop+0x2cc>)
 80053bc:	f7fc fd24 	bl	8001e08 <_ZN3LED2LREaa>
		}
		break;
 80053c0:	e12e      	b.n	8005620 <cppLoop+0x3c0>

	case 3:
		led.fullColor('C');
 80053c2:	2143      	movs	r1, #67	; 0x43
 80053c4:	4859      	ldr	r0, [pc, #356]	; (800552c <cppLoop+0x2cc>)
 80053c6:	f7fc fc63 	bl	8001c90 <_ZN3LED9fullColorEc>

		lcd_clear();
 80053ca:	f7fb fe69 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 80053ce:	2100      	movs	r1, #0
 80053d0:	2000      	movs	r0, #0
 80053d2:	f7fb fe75 	bl	80010c0 <lcd_locate>
		lcd_printf("Line");
 80053d6:	485a      	ldr	r0, [pc, #360]	; (8005540 <cppLoop+0x2e0>)
 80053d8:	f7fb fe9c 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 80053dc:	2101      	movs	r1, #1
 80053de:	2000      	movs	r0, #0
 80053e0:	f7fb fe6e 	bl	80010c0 <lcd_locate>
		lcd_printf("Trace");
 80053e4:	4857      	ldr	r0, [pc, #348]	; (8005544 <cppLoop+0x2e4>)
 80053e6:	f7fb fe95 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80053ea:	484c      	ldr	r0, [pc, #304]	; (800551c <cppLoop+0x2bc>)
 80053ec:	f7fc fbec 	bl	8001bc8 <_ZN8JoyStick8getValueEv>
 80053f0:	4603      	mov	r3, r0
 80053f2:	2b02      	cmp	r3, #2
 80053f4:	bf0c      	ite	eq
 80053f6:	2301      	moveq	r3, #1
 80053f8:	2300      	movne	r3, #0
 80053fa:	b2db      	uxtb	r3, r3
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	f000 8111 	beq.w	8005624 <cppLoop+0x3c4>
			led.LR(-1, 1);
 8005402:	2201      	movs	r2, #1
 8005404:	f04f 31ff 	mov.w	r1, #4294967295
 8005408:	4848      	ldr	r0, [pc, #288]	; (800552c <cppLoop+0x2cc>)
 800540a:	f7fc fcfd 	bl	8001e08 <_ZN3LED2LREaa>
			HAL_Delay(500);
 800540e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005412:	f000 fa15 	bl	8005840 <HAL_Delay>

			logger.start();
 8005416:	4842      	ldr	r0, [pc, #264]	; (8005520 <cppLoop+0x2c0>)
 8005418:	f7fd fa8e 	bl	8002938 <_ZN6Logger5startEv>
			line_trace.setNormalRatio(0.1);
 800541c:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 8005548 <cppLoop+0x2e8>
 8005420:	484a      	ldr	r0, [pc, #296]	; (800554c <cppLoop+0x2ec>)
 8005422:	f7fd f966 	bl	80026f2 <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 8005426:	4849      	ldr	r0, [pc, #292]	; (800554c <cppLoop+0x2ec>)
 8005428:	f7fd f9ba 	bl	80027a0 <_ZN9LineTrace5startEv>

			HAL_Delay(5000);
 800542c:	f241 3088 	movw	r0, #5000	; 0x1388
 8005430:	f000 fa06 	bl	8005840 <HAL_Delay>

			logger.stop();
 8005434:	483a      	ldr	r0, [pc, #232]	; (8005520 <cppLoop+0x2c0>)
 8005436:	f7fd fa8f 	bl	8002958 <_ZN6Logger4stopEv>
			line_trace.setNormalRatio(0.1);
 800543a:	ed9f 0a43 	vldr	s0, [pc, #268]	; 8005548 <cppLoop+0x2e8>
 800543e:	4843      	ldr	r0, [pc, #268]	; (800554c <cppLoop+0x2ec>)
 8005440:	f7fd f957 	bl	80026f2 <_ZN9LineTrace14setNormalRatioEf>
			line_trace.stop();
 8005444:	4841      	ldr	r0, [pc, #260]	; (800554c <cppLoop+0x2ec>)
 8005446:	f7fd f9bb 	bl	80027c0 <_ZN9LineTrace4stopEv>

			led.LR(1, -1);
 800544a:	f04f 32ff 	mov.w	r2, #4294967295
 800544e:	2101      	movs	r1, #1
 8005450:	4836      	ldr	r0, [pc, #216]	; (800552c <cppLoop+0x2cc>)
 8005452:	f7fc fcd9 	bl	8001e08 <_ZN3LED2LREaa>
			logger.saveLogs("line_sensors", "sensor7.csv");
 8005456:	4a3e      	ldr	r2, [pc, #248]	; (8005550 <cppLoop+0x2f0>)
 8005458:	4938      	ldr	r1, [pc, #224]	; (800553c <cppLoop+0x2dc>)
 800545a:	4831      	ldr	r0, [pc, #196]	; (8005520 <cppLoop+0x2c0>)
 800545c:	f7fd fa58 	bl	8002910 <_ZN6Logger8saveLogsEPKcS1_>
			led.LR(0, -1);
 8005460:	f04f 32ff 	mov.w	r2, #4294967295
 8005464:	2100      	movs	r1, #0
 8005466:	4831      	ldr	r0, [pc, #196]	; (800552c <cppLoop+0x2cc>)
 8005468:	f7fc fcce 	bl	8001e08 <_ZN3LED2LREaa>

			led.LR(-1, 0);
 800546c:	2200      	movs	r2, #0
 800546e:	f04f 31ff 	mov.w	r1, #4294967295
 8005472:	482e      	ldr	r0, [pc, #184]	; (800552c <cppLoop+0x2cc>)
 8005474:	f7fc fcc8 	bl	8001e08 <_ZN3LED2LREaa>
		}

		break;
 8005478:	e0d4      	b.n	8005624 <cppLoop+0x3c4>

	case 4:
		led.fullColor('M');
 800547a:	214d      	movs	r1, #77	; 0x4d
 800547c:	482b      	ldr	r0, [pc, #172]	; (800552c <cppLoop+0x2cc>)
 800547e:	f7fc fc07 	bl	8001c90 <_ZN3LED9fullColorEc>

		lcd_clear();
 8005482:	f7fb fe0d 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8005486:	2100      	movs	r1, #0
 8005488:	2000      	movs	r0, #0
 800548a:	f7fb fe19 	bl	80010c0 <lcd_locate>
		lcd_printf("Steering");
 800548e:	4831      	ldr	r0, [pc, #196]	; (8005554 <cppLoop+0x2f4>)
 8005490:	f7fb fe40 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8005494:	2101      	movs	r1, #1
 8005496:	2000      	movs	r0, #0
 8005498:	f7fb fe12 	bl	80010c0 <lcd_locate>
		lcd_printf("Trace");
 800549c:	4829      	ldr	r0, [pc, #164]	; (8005544 <cppLoop+0x2e4>)
 800549e:	f7fb fe39 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 80054a2:	481e      	ldr	r0, [pc, #120]	; (800551c <cppLoop+0x2bc>)
 80054a4:	f7fc fb90 	bl	8001bc8 <_ZN8JoyStick8getValueEv>
 80054a8:	4603      	mov	r3, r0
 80054aa:	2b02      	cmp	r3, #2
 80054ac:	bf0c      	ite	eq
 80054ae:	2301      	moveq	r3, #1
 80054b0:	2300      	movne	r3, #0
 80054b2:	b2db      	uxtb	r3, r3
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	f000 80b7 	beq.w	8005628 <cppLoop+0x3c8>
			led.LR(-1, 1);
 80054ba:	2201      	movs	r2, #1
 80054bc:	f04f 31ff 	mov.w	r1, #4294967295
 80054c0:	481a      	ldr	r0, [pc, #104]	; (800552c <cppLoop+0x2cc>)
 80054c2:	f7fc fca1 	bl	8001e08 <_ZN3LED2LREaa>
			HAL_Delay(500);
 80054c6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80054ca:	f000 f9b9 	bl	8005840 <HAL_Delay>

			line_trace.setTargetVelocity(0.1);
 80054ce:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 8005548 <cppLoop+0x2e8>
 80054d2:	481e      	ldr	r0, [pc, #120]	; (800554c <cppLoop+0x2ec>)
 80054d4:	f7fd f91c 	bl	8002710 <_ZN9LineTrace17setTargetVelocityEf>
			velocity_ctrl.start();
 80054d8:	4812      	ldr	r0, [pc, #72]	; (8005524 <cppLoop+0x2c4>)
 80054da:	f7fd ff81 	bl	80033e0 <_ZN12VelocityCtrl5startEv>
			line_trace.start();
 80054de:	481b      	ldr	r0, [pc, #108]	; (800554c <cppLoop+0x2ec>)
 80054e0:	f7fd f95e 	bl	80027a0 <_ZN9LineTrace5startEv>

			HAL_Delay(10000);
 80054e4:	f242 7010 	movw	r0, #10000	; 0x2710
 80054e8:	f000 f9aa 	bl	8005840 <HAL_Delay>

			line_trace.stop();
 80054ec:	4817      	ldr	r0, [pc, #92]	; (800554c <cppLoop+0x2ec>)
 80054ee:	f7fd f967 	bl	80027c0 <_ZN9LineTrace4stopEv>
			velocity_ctrl.stop();
 80054f2:	480c      	ldr	r0, [pc, #48]	; (8005524 <cppLoop+0x2c4>)
 80054f4:	f7fd ff84 	bl	8003400 <_ZN12VelocityCtrl4stopEv>


			led.LR(-1, 0);
 80054f8:	2200      	movs	r2, #0
 80054fa:	f04f 31ff 	mov.w	r1, #4294967295
 80054fe:	480b      	ldr	r0, [pc, #44]	; (800552c <cppLoop+0x2cc>)
 8005500:	f7fc fc82 	bl	8001e08 <_ZN3LED2LREaa>
		}
		break;
 8005504:	e090      	b.n	8005628 <cppLoop+0x3c8>
 8005506:	bf00      	nop
 8005508:	20000538 	.word	0x20000538
 800550c:	08016d9c 	.word	0x08016d9c
 8005510:	08016da0 	.word	0x08016da0
 8005514:	08016da8 	.word	0x08016da8
 8005518:	08016db4 	.word	0x08016db4
 800551c:	20000534 	.word	0x20000534
 8005520:	20000570 	.word	0x20000570
 8005524:	20007ab8 	.word	0x20007ab8
 8005528:	00000000 	.word	0x00000000
 800552c:	20000540 	.word	0x20000540
 8005530:	08016dbc 	.word	0x08016dbc
 8005534:	08016dc0 	.word	0x08016dc0
 8005538:	08016dc8 	.word	0x08016dc8
 800553c:	08016dd4 	.word	0x08016dd4
 8005540:	08016de4 	.word	0x08016de4
 8005544:	08016dec 	.word	0x08016dec
 8005548:	3dcccccd 	.word	0x3dcccccd
 800554c:	20007af0 	.word	0x20007af0
 8005550:	08016df4 	.word	0x08016df4
 8005554:	08016e00 	.word	0x08016e00

	case 5:
		led.fullColor('Y');
 8005558:	2159      	movs	r1, #89	; 0x59
 800555a:	4838      	ldr	r0, [pc, #224]	; (800563c <cppLoop+0x3dc>)
 800555c:	f7fc fb98 	bl	8001c90 <_ZN3LED9fullColorEc>

		lcd_clear();
 8005560:	f7fb fd9e 	bl	80010a0 <lcd_clear>
		lcd_locate(0,0);
 8005564:	2100      	movs	r1, #0
 8005566:	2000      	movs	r0, #0
 8005568:	f7fb fdaa 	bl	80010c0 <lcd_locate>
		lcd_printf("Teoshi");
 800556c:	4834      	ldr	r0, [pc, #208]	; (8005640 <cppLoop+0x3e0>)
 800556e:	f7fb fdd1 	bl	8001114 <lcd_printf>
		lcd_locate(0,1);
 8005572:	2101      	movs	r1, #1
 8005574:	2000      	movs	r0, #0
 8005576:	f7fb fda3 	bl	80010c0 <lcd_locate>
		lcd_printf("Following");
 800557a:	4832      	ldr	r0, [pc, #200]	; (8005644 <cppLoop+0x3e4>)
 800557c:	f7fb fdca 	bl	8001114 <lcd_printf>

		if(joy_stick.getValue() == JOY_C){
 8005580:	4831      	ldr	r0, [pc, #196]	; (8005648 <cppLoop+0x3e8>)
 8005582:	f7fc fb21 	bl	8001bc8 <_ZN8JoyStick8getValueEv>
 8005586:	4603      	mov	r3, r0
 8005588:	2b02      	cmp	r3, #2
 800558a:	bf0c      	ite	eq
 800558c:	2301      	moveq	r3, #1
 800558e:	2300      	movne	r3, #0
 8005590:	b2db      	uxtb	r3, r3
 8005592:	2b00      	cmp	r3, #0
 8005594:	d04a      	beq.n	800562c <cppLoop+0x3cc>
			led.LR(-1, 1);
 8005596:	2201      	movs	r2, #1
 8005598:	f04f 31ff 	mov.w	r1, #4294967295
 800559c:	4827      	ldr	r0, [pc, #156]	; (800563c <cppLoop+0x3dc>)
 800559e:	f7fc fc33 	bl	8001e08 <_ZN3LED2LREaa>
			HAL_Delay(500);
 80055a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80055a6:	f000 f94b 	bl	8005840 <HAL_Delay>

			line_trace.setNormalRatio(0.0);
 80055aa:	ed9f 0a28 	vldr	s0, [pc, #160]	; 800564c <cppLoop+0x3ec>
 80055ae:	4828      	ldr	r0, [pc, #160]	; (8005650 <cppLoop+0x3f0>)
 80055b0:	f7fd f89f 	bl	80026f2 <_ZN9LineTrace14setNormalRatioEf>
			line_trace.start();
 80055b4:	4826      	ldr	r0, [pc, #152]	; (8005650 <cppLoop+0x3f0>)
 80055b6:	f7fd f8f3 	bl	80027a0 <_ZN9LineTrace5startEv>
			HAL_Delay(500);
 80055ba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80055be:	f000 f93f 	bl	8005840 <HAL_Delay>

			led.fullColor('R');
 80055c2:	2152      	movs	r1, #82	; 0x52
 80055c4:	481d      	ldr	r0, [pc, #116]	; (800563c <cppLoop+0x3dc>)
 80055c6:	f7fc fb63 	bl	8001c90 <_ZN3LED9fullColorEc>
			encoder.clearTotalCnt();
 80055ca:	4822      	ldr	r0, [pc, #136]	; (8005654 <cppLoop+0x3f4>)
 80055cc:	f7fb feee 	bl	80013ac <_ZN7Encoder13clearTotalCntEv>
			encoder.clearDistance();
 80055d0:	4820      	ldr	r0, [pc, #128]	; (8005654 <cppLoop+0x3f4>)
 80055d2:	f7fb febe 	bl	8001352 <_ZN7Encoder13clearDistanceEv>

			HAL_Delay(10000);
 80055d6:	f242 7010 	movw	r0, #10000	; 0x2710
 80055da:	f000 f931 	bl	8005840 <HAL_Delay>

			line_trace.stop();
 80055de:	481c      	ldr	r0, [pc, #112]	; (8005650 <cppLoop+0x3f0>)
 80055e0:	f7fd f8ee 	bl	80027c0 <_ZN9LineTrace4stopEv>
			//long total = encoder.getTotalCnt();

			//user_fopen("total_cnts", "cnts.txt");
			user_fopen("distance", "1m.txt");
 80055e4:	491c      	ldr	r1, [pc, #112]	; (8005658 <cppLoop+0x3f8>)
 80055e6:	481d      	ldr	r0, [pc, #116]	; (800565c <cppLoop+0x3fc>)
 80055e8:	f7fb fef0 	bl	80013cc <user_fopen>
			float d = encoder.getDistance();
 80055ec:	4819      	ldr	r0, [pc, #100]	; (8005654 <cppLoop+0x3f4>)
 80055ee:	f7fb fea1 	bl	8001334 <_ZN7Encoder11getDistanceEv>
 80055f2:	eef0 7a40 	vmov.f32	s15, s0
 80055f6:	edc7 7a01 	vstr	s15, [r7, #4]
			sd_write(1, &d, ADD_WRITE);
 80055fa:	1d3b      	adds	r3, r7, #4
 80055fc:	2201      	movs	r2, #1
 80055fe:	4619      	mov	r1, r3
 8005600:	2001      	movs	r0, #1
 8005602:	f7fb ff05 	bl	8001410 <sd_write>
			user_fclose();
 8005606:	f7fb fef3 	bl	80013f0 <user_fclose>

			led.LR(-1, 0);
 800560a:	2200      	movs	r2, #0
 800560c:	f04f 31ff 	mov.w	r1, #4294967295
 8005610:	480a      	ldr	r0, [pc, #40]	; (800563c <cppLoop+0x3dc>)
 8005612:	f7fc fbf9 	bl	8001e08 <_ZN3LED2LREaa>
		}

		break;
 8005616:	e009      	b.n	800562c <cppLoop+0x3cc>
	case 15:

		break;

	default:
		break;
 8005618:	bf00      	nop
 800561a:	e008      	b.n	800562e <cppLoop+0x3ce>
		break;
 800561c:	bf00      	nop
 800561e:	e006      	b.n	800562e <cppLoop+0x3ce>
		break;
 8005620:	bf00      	nop
 8005622:	e004      	b.n	800562e <cppLoop+0x3ce>
		break;
 8005624:	bf00      	nop
 8005626:	e002      	b.n	800562e <cppLoop+0x3ce>
		break;
 8005628:	bf00      	nop
 800562a:	e000      	b.n	800562e <cppLoop+0x3ce>
		break;
 800562c:	bf00      	nop

	}

	HAL_Delay(10);
 800562e:	200a      	movs	r0, #10
 8005630:	f000 f906 	bl	8005840 <HAL_Delay>

}
 8005634:	bf00      	nop
 8005636:	3708      	adds	r7, #8
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}
 800563c:	20000540 	.word	0x20000540
 8005640:	08016e0c 	.word	0x08016e0c
 8005644:	08016e14 	.word	0x08016e14
 8005648:	20000534 	.word	0x20000534
 800564c:	00000000 	.word	0x00000000
 8005650:	20007af0 	.word	0x20007af0
 8005654:	20007aa4 	.word	0x20007aa4
 8005658:	08016e20 	.word	0x08016e20
 800565c:	08016e28 	.word	0x08016e28

08005660 <_Z41__static_initialization_and_destruction_0ii>:
 8005660:	b580      	push	{r7, lr}
 8005662:	b082      	sub	sp, #8
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	6039      	str	r1, [r7, #0]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2b01      	cmp	r3, #1
 800566e:	d12b      	bne.n	80056c8 <_Z41__static_initialization_and_destruction_0ii+0x68>
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005676:	4293      	cmp	r3, r2
 8005678:	d126      	bne.n	80056c8 <_Z41__static_initialization_and_destruction_0ii+0x68>
LineSensor line_sensor;
 800567a:	4815      	ldr	r0, [pc, #84]	; (80056d0 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 800567c:	f7fc fbfc 	bl	8001e78 <_ZN10LineSensorC1Ev>
SideSensor side_sensor;
 8005680:	4814      	ldr	r0, [pc, #80]	; (80056d4 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 8005682:	f7fd fc0d 	bl	8002ea0 <_ZN10SideSensorC1Ev>
JoyStick joy_stick;
 8005686:	4814      	ldr	r0, [pc, #80]	; (80056d8 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8005688:	f7fc fa92 	bl	8001bb0 <_ZN8JoyStickC1Ev>
Motor motor;
 800568c:	4813      	ldr	r0, [pc, #76]	; (80056dc <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800568e:	f7fd f973 	bl	8002978 <_ZN5MotorC1Ev>
IMU imu;
 8005692:	4813      	ldr	r0, [pc, #76]	; (80056e0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8005694:	f7fc f976 	bl	8001984 <_ZN3IMUC1Ev>
Logger logger;
 8005698:	4812      	ldr	r0, [pc, #72]	; (80056e4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800569a:	f7fd f8a9 	bl	80027f0 <_ZN6LoggerC1Ev>
Encoder encoder;
 800569e:	4812      	ldr	r0, [pc, #72]	; (80056e8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80056a0:	f7fb fd58 	bl	8001154 <_ZN7EncoderC1Ev>
VelocityCtrl velocity_ctrl(&motor, &encoder, &imu);
 80056a4:	4b0e      	ldr	r3, [pc, #56]	; (80056e0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80056a6:	4a10      	ldr	r2, [pc, #64]	; (80056e8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80056a8:	490c      	ldr	r1, [pc, #48]	; (80056dc <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80056aa:	4810      	ldr	r0, [pc, #64]	; (80056ec <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80056ac:	f7fd fc62 	bl	8002f74 <_ZN12VelocityCtrlC1EP5MotorP7EncoderP3IMU>
LineTrace line_trace(&motor, &line_sensor, &velocity_ctrl);
 80056b0:	4b0e      	ldr	r3, [pc, #56]	; (80056ec <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80056b2:	4a07      	ldr	r2, [pc, #28]	; (80056d0 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 80056b4:	4909      	ldr	r1, [pc, #36]	; (80056dc <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80056b6:	480e      	ldr	r0, [pc, #56]	; (80056f0 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 80056b8:	f7fc fed8 	bl	800246c <_ZN9LineTraceC1EP5MotorP10LineSensorP12VelocityCtrl>
Odometry odometry(&encoder, &imu, &velocity_ctrl);
 80056bc:	4b0b      	ldr	r3, [pc, #44]	; (80056ec <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80056be:	4a08      	ldr	r2, [pc, #32]	; (80056e0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80056c0:	4909      	ldr	r1, [pc, #36]	; (80056e8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80056c2:	480c      	ldr	r0, [pc, #48]	; (80056f4 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 80056c4:	f7fd fa3e 	bl	8002b44 <_ZN8OdometryC1EP7EncoderP3IMUP12VelocityCtrl>
}
 80056c8:	bf00      	nop
 80056ca:	3708      	adds	r7, #8
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}
 80056d0:	20000238 	.word	0x20000238
 80056d4:	20000530 	.word	0x20000530
 80056d8:	20000534 	.word	0x20000534
 80056dc:	2000053c 	.word	0x2000053c
 80056e0:	20000550 	.word	0x20000550
 80056e4:	20000570 	.word	0x20000570
 80056e8:	20007aa4 	.word	0x20007aa4
 80056ec:	20007ab8 	.word	0x20007ab8
 80056f0:	20007af0 	.word	0x20007af0
 80056f4:	20007b4c 	.word	0x20007b4c

080056f8 <_GLOBAL__sub_I_line_sensor>:
 80056f8:	b580      	push	{r7, lr}
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005700:	2001      	movs	r0, #1
 8005702:	f7ff ffad 	bl	8005660 <_Z41__static_initialization_and_destruction_0ii>
 8005706:	bd80      	pop	{r7, pc}

08005708 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005708:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005740 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800570c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800570e:	e003      	b.n	8005718 <LoopCopyDataInit>

08005710 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005710:	4b0c      	ldr	r3, [pc, #48]	; (8005744 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005712:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005714:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005716:	3104      	adds	r1, #4

08005718 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005718:	480b      	ldr	r0, [pc, #44]	; (8005748 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800571a:	4b0c      	ldr	r3, [pc, #48]	; (800574c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800571c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800571e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005720:	d3f6      	bcc.n	8005710 <CopyDataInit>
  ldr  r2, =_sbss
 8005722:	4a0b      	ldr	r2, [pc, #44]	; (8005750 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005724:	e002      	b.n	800572c <LoopFillZerobss>

08005726 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005726:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005728:	f842 3b04 	str.w	r3, [r2], #4

0800572c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800572c:	4b09      	ldr	r3, [pc, #36]	; (8005754 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800572e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005730:	d3f9      	bcc.n	8005726 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005732:	f7ff fc8f 	bl	8005054 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005736:	f00c fb7b 	bl	8011e30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800573a:	f7fd ff5b 	bl	80035f4 <main>
  bx  lr    
 800573e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005740:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8005744:	08017828 	.word	0x08017828
  ldr  r0, =_sdata
 8005748:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800574c:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8005750:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 8005754:	2000c6b0 	.word	0x2000c6b0

08005758 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005758:	e7fe      	b.n	8005758 <ADC_IRQHandler>
	...

0800575c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005760:	4b0e      	ldr	r3, [pc, #56]	; (800579c <HAL_Init+0x40>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a0d      	ldr	r2, [pc, #52]	; (800579c <HAL_Init+0x40>)
 8005766:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800576a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800576c:	4b0b      	ldr	r3, [pc, #44]	; (800579c <HAL_Init+0x40>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a0a      	ldr	r2, [pc, #40]	; (800579c <HAL_Init+0x40>)
 8005772:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005776:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005778:	4b08      	ldr	r3, [pc, #32]	; (800579c <HAL_Init+0x40>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a07      	ldr	r2, [pc, #28]	; (800579c <HAL_Init+0x40>)
 800577e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005782:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005784:	2003      	movs	r0, #3
 8005786:	f000 fd51 	bl	800622c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800578a:	2000      	movs	r0, #0
 800578c:	f000 f808 	bl	80057a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005790:	f7fe fe4e 	bl	8004430 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005794:	2300      	movs	r3, #0
}
 8005796:	4618      	mov	r0, r3
 8005798:	bd80      	pop	{r7, pc}
 800579a:	bf00      	nop
 800579c:	40023c00 	.word	0x40023c00

080057a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b082      	sub	sp, #8
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80057a8:	4b12      	ldr	r3, [pc, #72]	; (80057f4 <HAL_InitTick+0x54>)
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	4b12      	ldr	r3, [pc, #72]	; (80057f8 <HAL_InitTick+0x58>)
 80057ae:	781b      	ldrb	r3, [r3, #0]
 80057b0:	4619      	mov	r1, r3
 80057b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80057b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80057ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80057be:	4618      	mov	r0, r3
 80057c0:	f000 fd69 	bl	8006296 <HAL_SYSTICK_Config>
 80057c4:	4603      	mov	r3, r0
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d001      	beq.n	80057ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	e00e      	b.n	80057ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2b0f      	cmp	r3, #15
 80057d2:	d80a      	bhi.n	80057ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80057d4:	2200      	movs	r2, #0
 80057d6:	6879      	ldr	r1, [r7, #4]
 80057d8:	f04f 30ff 	mov.w	r0, #4294967295
 80057dc:	f000 fd31 	bl	8006242 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80057e0:	4a06      	ldr	r2, [pc, #24]	; (80057fc <HAL_InitTick+0x5c>)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80057e6:	2300      	movs	r3, #0
 80057e8:	e000      	b.n	80057ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	3708      	adds	r7, #8
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}
 80057f4:	20000000 	.word	0x20000000
 80057f8:	20000008 	.word	0x20000008
 80057fc:	20000004 	.word	0x20000004

08005800 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005800:	b480      	push	{r7}
 8005802:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005804:	4b06      	ldr	r3, [pc, #24]	; (8005820 <HAL_IncTick+0x20>)
 8005806:	781b      	ldrb	r3, [r3, #0]
 8005808:	461a      	mov	r2, r3
 800580a:	4b06      	ldr	r3, [pc, #24]	; (8005824 <HAL_IncTick+0x24>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4413      	add	r3, r2
 8005810:	4a04      	ldr	r2, [pc, #16]	; (8005824 <HAL_IncTick+0x24>)
 8005812:	6013      	str	r3, [r2, #0]
}
 8005814:	bf00      	nop
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr
 800581e:	bf00      	nop
 8005820:	20000008 	.word	0x20000008
 8005824:	2000a634 	.word	0x2000a634

08005828 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005828:	b480      	push	{r7}
 800582a:	af00      	add	r7, sp, #0
  return uwTick;
 800582c:	4b03      	ldr	r3, [pc, #12]	; (800583c <HAL_GetTick+0x14>)
 800582e:	681b      	ldr	r3, [r3, #0]
}
 8005830:	4618      	mov	r0, r3
 8005832:	46bd      	mov	sp, r7
 8005834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005838:	4770      	bx	lr
 800583a:	bf00      	nop
 800583c:	2000a634 	.word	0x2000a634

08005840 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b084      	sub	sp, #16
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005848:	f7ff ffee 	bl	8005828 <HAL_GetTick>
 800584c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005858:	d005      	beq.n	8005866 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800585a:	4b09      	ldr	r3, [pc, #36]	; (8005880 <HAL_Delay+0x40>)
 800585c:	781b      	ldrb	r3, [r3, #0]
 800585e:	461a      	mov	r2, r3
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	4413      	add	r3, r2
 8005864:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005866:	bf00      	nop
 8005868:	f7ff ffde 	bl	8005828 <HAL_GetTick>
 800586c:	4602      	mov	r2, r0
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	1ad3      	subs	r3, r2, r3
 8005872:	68fa      	ldr	r2, [r7, #12]
 8005874:	429a      	cmp	r2, r3
 8005876:	d8f7      	bhi.n	8005868 <HAL_Delay+0x28>
  {
  }
}
 8005878:	bf00      	nop
 800587a:	3710      	adds	r7, #16
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}
 8005880:	20000008 	.word	0x20000008

08005884 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b084      	sub	sp, #16
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800588c:	2300      	movs	r3, #0
 800588e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d101      	bne.n	800589a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005896:	2301      	movs	r3, #1
 8005898:	e033      	b.n	8005902 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d109      	bne.n	80058b6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f7fe fdec 	bl	8004480 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2200      	movs	r2, #0
 80058b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ba:	f003 0310 	and.w	r3, r3, #16
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d118      	bne.n	80058f4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80058ca:	f023 0302 	bic.w	r3, r3, #2
 80058ce:	f043 0202 	orr.w	r2, r3, #2
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f000 fa5a 	bl	8005d90 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2200      	movs	r2, #0
 80058e0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e6:	f023 0303 	bic.w	r3, r3, #3
 80058ea:	f043 0201 	orr.w	r2, r3, #1
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	641a      	str	r2, [r3, #64]	; 0x40
 80058f2:	e001      	b.n	80058f8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2200      	movs	r2, #0
 80058fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005900:	7bfb      	ldrb	r3, [r7, #15]
}
 8005902:	4618      	mov	r0, r3
 8005904:	3710      	adds	r7, #16
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
	...

0800590c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b086      	sub	sp, #24
 8005910:	af00      	add	r7, sp, #0
 8005912:	60f8      	str	r0, [r7, #12]
 8005914:	60b9      	str	r1, [r7, #8]
 8005916:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8005918:	2300      	movs	r3, #0
 800591a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005922:	2b01      	cmp	r3, #1
 8005924:	d101      	bne.n	800592a <HAL_ADC_Start_DMA+0x1e>
 8005926:	2302      	movs	r3, #2
 8005928:	e0cc      	b.n	8005ac4 <HAL_ADC_Start_DMA+0x1b8>
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	2201      	movs	r2, #1
 800592e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	f003 0301 	and.w	r3, r3, #1
 800593c:	2b01      	cmp	r3, #1
 800593e:	d018      	beq.n	8005972 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	689a      	ldr	r2, [r3, #8]
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f042 0201 	orr.w	r2, r2, #1
 800594e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005950:	4b5e      	ldr	r3, [pc, #376]	; (8005acc <HAL_ADC_Start_DMA+0x1c0>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a5e      	ldr	r2, [pc, #376]	; (8005ad0 <HAL_ADC_Start_DMA+0x1c4>)
 8005956:	fba2 2303 	umull	r2, r3, r2, r3
 800595a:	0c9a      	lsrs	r2, r3, #18
 800595c:	4613      	mov	r3, r2
 800595e:	005b      	lsls	r3, r3, #1
 8005960:	4413      	add	r3, r2
 8005962:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8005964:	e002      	b.n	800596c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	3b01      	subs	r3, #1
 800596a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d1f9      	bne.n	8005966 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	f003 0301 	and.w	r3, r3, #1
 800597c:	2b01      	cmp	r3, #1
 800597e:	f040 80a0 	bne.w	8005ac2 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005986:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800598a:	f023 0301 	bic.w	r3, r3, #1
 800598e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d007      	beq.n	80059b4 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80059ac:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80059bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059c0:	d106      	bne.n	80059d0 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059c6:	f023 0206 	bic.w	r2, r3, #6
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	645a      	str	r2, [r3, #68]	; 0x44
 80059ce:	e002      	b.n	80059d6 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2200      	movs	r2, #0
 80059d4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2200      	movs	r2, #0
 80059da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80059de:	4b3d      	ldr	r3, [pc, #244]	; (8005ad4 <HAL_ADC_Start_DMA+0x1c8>)
 80059e0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059e6:	4a3c      	ldr	r2, [pc, #240]	; (8005ad8 <HAL_ADC_Start_DMA+0x1cc>)
 80059e8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ee:	4a3b      	ldr	r2, [pc, #236]	; (8005adc <HAL_ADC_Start_DMA+0x1d0>)
 80059f0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059f6:	4a3a      	ldr	r2, [pc, #232]	; (8005ae0 <HAL_ADC_Start_DMA+0x1d4>)
 80059f8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005a02:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	685a      	ldr	r2, [r3, #4]
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005a12:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	689a      	ldr	r2, [r3, #8]
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a22:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	334c      	adds	r3, #76	; 0x4c
 8005a2e:	4619      	mov	r1, r3
 8005a30:	68ba      	ldr	r2, [r7, #8]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f000 fcea 	bl	800640c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	f003 031f 	and.w	r3, r3, #31
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d12a      	bne.n	8005a9a <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a26      	ldr	r2, [pc, #152]	; (8005ae4 <HAL_ADC_Start_DMA+0x1d8>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d015      	beq.n	8005a7a <HAL_ADC_Start_DMA+0x16e>
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a25      	ldr	r2, [pc, #148]	; (8005ae8 <HAL_ADC_Start_DMA+0x1dc>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d105      	bne.n	8005a64 <HAL_ADC_Start_DMA+0x158>
 8005a58:	4b1e      	ldr	r3, [pc, #120]	; (8005ad4 <HAL_ADC_Start_DMA+0x1c8>)
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	f003 031f 	and.w	r3, r3, #31
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d00a      	beq.n	8005a7a <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a20      	ldr	r2, [pc, #128]	; (8005aec <HAL_ADC_Start_DMA+0x1e0>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d129      	bne.n	8005ac2 <HAL_ADC_Start_DMA+0x1b6>
 8005a6e:	4b19      	ldr	r3, [pc, #100]	; (8005ad4 <HAL_ADC_Start_DMA+0x1c8>)
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	f003 031f 	and.w	r3, r3, #31
 8005a76:	2b0f      	cmp	r3, #15
 8005a78:	d823      	bhi.n	8005ac2 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d11c      	bne.n	8005ac2 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	689a      	ldr	r2, [r3, #8]
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005a96:	609a      	str	r2, [r3, #8]
 8005a98:	e013      	b.n	8005ac2 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a11      	ldr	r2, [pc, #68]	; (8005ae4 <HAL_ADC_Start_DMA+0x1d8>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d10e      	bne.n	8005ac2 <HAL_ADC_Start_DMA+0x1b6>
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d107      	bne.n	8005ac2 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	689a      	ldr	r2, [r3, #8]
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005ac0:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8005ac2:	2300      	movs	r3, #0
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3718      	adds	r7, #24
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}
 8005acc:	20000000 	.word	0x20000000
 8005ad0:	431bde83 	.word	0x431bde83
 8005ad4:	40012300 	.word	0x40012300
 8005ad8:	08005f89 	.word	0x08005f89
 8005adc:	08006043 	.word	0x08006043
 8005ae0:	0800605f 	.word	0x0800605f
 8005ae4:	40012000 	.word	0x40012000
 8005ae8:	40012100 	.word	0x40012100
 8005aec:	40012200 	.word	0x40012200

08005af0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b083      	sub	sp, #12
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8005af8:	bf00      	nop
 8005afa:	370c      	adds	r7, #12
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr

08005b04 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b083      	sub	sp, #12
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8005b0c:	bf00      	nop
 8005b0e:	370c      	adds	r7, #12
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr

08005b18 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b083      	sub	sp, #12
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8005b20:	bf00      	nop
 8005b22:	370c      	adds	r7, #12
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr

08005b2c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b085      	sub	sp, #20
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005b36:	2300      	movs	r3, #0
 8005b38:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d101      	bne.n	8005b48 <HAL_ADC_ConfigChannel+0x1c>
 8005b44:	2302      	movs	r3, #2
 8005b46:	e113      	b.n	8005d70 <HAL_ADC_ConfigChannel+0x244>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	2b09      	cmp	r3, #9
 8005b56:	d925      	bls.n	8005ba4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	68d9      	ldr	r1, [r3, #12]
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	461a      	mov	r2, r3
 8005b66:	4613      	mov	r3, r2
 8005b68:	005b      	lsls	r3, r3, #1
 8005b6a:	4413      	add	r3, r2
 8005b6c:	3b1e      	subs	r3, #30
 8005b6e:	2207      	movs	r2, #7
 8005b70:	fa02 f303 	lsl.w	r3, r2, r3
 8005b74:	43da      	mvns	r2, r3
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	400a      	ands	r2, r1
 8005b7c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	68d9      	ldr	r1, [r3, #12]
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	689a      	ldr	r2, [r3, #8]
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	b29b      	uxth	r3, r3
 8005b8e:	4618      	mov	r0, r3
 8005b90:	4603      	mov	r3, r0
 8005b92:	005b      	lsls	r3, r3, #1
 8005b94:	4403      	add	r3, r0
 8005b96:	3b1e      	subs	r3, #30
 8005b98:	409a      	lsls	r2, r3
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	430a      	orrs	r2, r1
 8005ba0:	60da      	str	r2, [r3, #12]
 8005ba2:	e022      	b.n	8005bea <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	6919      	ldr	r1, [r3, #16]
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	4613      	mov	r3, r2
 8005bb4:	005b      	lsls	r3, r3, #1
 8005bb6:	4413      	add	r3, r2
 8005bb8:	2207      	movs	r2, #7
 8005bba:	fa02 f303 	lsl.w	r3, r2, r3
 8005bbe:	43da      	mvns	r2, r3
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	400a      	ands	r2, r1
 8005bc6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	6919      	ldr	r1, [r3, #16]
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	689a      	ldr	r2, [r3, #8]
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	b29b      	uxth	r3, r3
 8005bd8:	4618      	mov	r0, r3
 8005bda:	4603      	mov	r3, r0
 8005bdc:	005b      	lsls	r3, r3, #1
 8005bde:	4403      	add	r3, r0
 8005be0:	409a      	lsls	r2, r3
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	430a      	orrs	r2, r1
 8005be8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	2b06      	cmp	r3, #6
 8005bf0:	d824      	bhi.n	8005c3c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	685a      	ldr	r2, [r3, #4]
 8005bfc:	4613      	mov	r3, r2
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	4413      	add	r3, r2
 8005c02:	3b05      	subs	r3, #5
 8005c04:	221f      	movs	r2, #31
 8005c06:	fa02 f303 	lsl.w	r3, r2, r3
 8005c0a:	43da      	mvns	r2, r3
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	400a      	ands	r2, r1
 8005c12:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	b29b      	uxth	r3, r3
 8005c20:	4618      	mov	r0, r3
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	685a      	ldr	r2, [r3, #4]
 8005c26:	4613      	mov	r3, r2
 8005c28:	009b      	lsls	r3, r3, #2
 8005c2a:	4413      	add	r3, r2
 8005c2c:	3b05      	subs	r3, #5
 8005c2e:	fa00 f203 	lsl.w	r2, r0, r3
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	430a      	orrs	r2, r1
 8005c38:	635a      	str	r2, [r3, #52]	; 0x34
 8005c3a:	e04c      	b.n	8005cd6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	2b0c      	cmp	r3, #12
 8005c42:	d824      	bhi.n	8005c8e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	685a      	ldr	r2, [r3, #4]
 8005c4e:	4613      	mov	r3, r2
 8005c50:	009b      	lsls	r3, r3, #2
 8005c52:	4413      	add	r3, r2
 8005c54:	3b23      	subs	r3, #35	; 0x23
 8005c56:	221f      	movs	r2, #31
 8005c58:	fa02 f303 	lsl.w	r3, r2, r3
 8005c5c:	43da      	mvns	r2, r3
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	400a      	ands	r2, r1
 8005c64:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	4618      	mov	r0, r3
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	685a      	ldr	r2, [r3, #4]
 8005c78:	4613      	mov	r3, r2
 8005c7a:	009b      	lsls	r3, r3, #2
 8005c7c:	4413      	add	r3, r2
 8005c7e:	3b23      	subs	r3, #35	; 0x23
 8005c80:	fa00 f203 	lsl.w	r2, r0, r3
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	430a      	orrs	r2, r1
 8005c8a:	631a      	str	r2, [r3, #48]	; 0x30
 8005c8c:	e023      	b.n	8005cd6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	685a      	ldr	r2, [r3, #4]
 8005c98:	4613      	mov	r3, r2
 8005c9a:	009b      	lsls	r3, r3, #2
 8005c9c:	4413      	add	r3, r2
 8005c9e:	3b41      	subs	r3, #65	; 0x41
 8005ca0:	221f      	movs	r2, #31
 8005ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ca6:	43da      	mvns	r2, r3
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	400a      	ands	r2, r1
 8005cae:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	b29b      	uxth	r3, r3
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	685a      	ldr	r2, [r3, #4]
 8005cc2:	4613      	mov	r3, r2
 8005cc4:	009b      	lsls	r3, r3, #2
 8005cc6:	4413      	add	r3, r2
 8005cc8:	3b41      	subs	r3, #65	; 0x41
 8005cca:	fa00 f203 	lsl.w	r2, r0, r3
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	430a      	orrs	r2, r1
 8005cd4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005cd6:	4b29      	ldr	r3, [pc, #164]	; (8005d7c <HAL_ADC_ConfigChannel+0x250>)
 8005cd8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a28      	ldr	r2, [pc, #160]	; (8005d80 <HAL_ADC_ConfigChannel+0x254>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d10f      	bne.n	8005d04 <HAL_ADC_ConfigChannel+0x1d8>
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	2b12      	cmp	r3, #18
 8005cea:	d10b      	bne.n	8005d04 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a1d      	ldr	r2, [pc, #116]	; (8005d80 <HAL_ADC_ConfigChannel+0x254>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d12b      	bne.n	8005d66 <HAL_ADC_ConfigChannel+0x23a>
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a1c      	ldr	r2, [pc, #112]	; (8005d84 <HAL_ADC_ConfigChannel+0x258>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d003      	beq.n	8005d20 <HAL_ADC_ConfigChannel+0x1f4>
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	2b11      	cmp	r3, #17
 8005d1e:	d122      	bne.n	8005d66 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a11      	ldr	r2, [pc, #68]	; (8005d84 <HAL_ADC_ConfigChannel+0x258>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d111      	bne.n	8005d66 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005d42:	4b11      	ldr	r3, [pc, #68]	; (8005d88 <HAL_ADC_ConfigChannel+0x25c>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a11      	ldr	r2, [pc, #68]	; (8005d8c <HAL_ADC_ConfigChannel+0x260>)
 8005d48:	fba2 2303 	umull	r2, r3, r2, r3
 8005d4c:	0c9a      	lsrs	r2, r3, #18
 8005d4e:	4613      	mov	r3, r2
 8005d50:	009b      	lsls	r3, r3, #2
 8005d52:	4413      	add	r3, r2
 8005d54:	005b      	lsls	r3, r3, #1
 8005d56:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005d58:	e002      	b.n	8005d60 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	3b01      	subs	r3, #1
 8005d5e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d1f9      	bne.n	8005d5a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005d6e:	2300      	movs	r3, #0
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	3714      	adds	r7, #20
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr
 8005d7c:	40012300 	.word	0x40012300
 8005d80:	40012000 	.word	0x40012000
 8005d84:	10000012 	.word	0x10000012
 8005d88:	20000000 	.word	0x20000000
 8005d8c:	431bde83 	.word	0x431bde83

08005d90 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b085      	sub	sp, #20
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005d98:	4b79      	ldr	r3, [pc, #484]	; (8005f80 <ADC_Init+0x1f0>)
 8005d9a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	685a      	ldr	r2, [r3, #4]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	431a      	orrs	r2, r3
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	685a      	ldr	r2, [r3, #4]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005dc4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	6859      	ldr	r1, [r3, #4]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	691b      	ldr	r3, [r3, #16]
 8005dd0:	021a      	lsls	r2, r3, #8
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	430a      	orrs	r2, r1
 8005dd8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	685a      	ldr	r2, [r3, #4]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005de8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	6859      	ldr	r1, [r3, #4]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	689a      	ldr	r2, [r3, #8]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	430a      	orrs	r2, r1
 8005dfa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	689a      	ldr	r2, [r3, #8]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e0a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	6899      	ldr	r1, [r3, #8]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	68da      	ldr	r2, [r3, #12]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	430a      	orrs	r2, r1
 8005e1c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e22:	4a58      	ldr	r2, [pc, #352]	; (8005f84 <ADC_Init+0x1f4>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d022      	beq.n	8005e6e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	689a      	ldr	r2, [r3, #8]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005e36:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	6899      	ldr	r1, [r3, #8]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	430a      	orrs	r2, r1
 8005e48:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	689a      	ldr	r2, [r3, #8]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005e58:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	6899      	ldr	r1, [r3, #8]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	430a      	orrs	r2, r1
 8005e6a:	609a      	str	r2, [r3, #8]
 8005e6c:	e00f      	b.n	8005e8e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	689a      	ldr	r2, [r3, #8]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005e7c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	689a      	ldr	r2, [r3, #8]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005e8c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	689a      	ldr	r2, [r3, #8]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f022 0202 	bic.w	r2, r2, #2
 8005e9c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	6899      	ldr	r1, [r3, #8]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	7e1b      	ldrb	r3, [r3, #24]
 8005ea8:	005a      	lsls	r2, r3, #1
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	430a      	orrs	r2, r1
 8005eb0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d01b      	beq.n	8005ef4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	685a      	ldr	r2, [r3, #4]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005eca:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	685a      	ldr	r2, [r3, #4]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005eda:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	6859      	ldr	r1, [r3, #4]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee6:	3b01      	subs	r3, #1
 8005ee8:	035a      	lsls	r2, r3, #13
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	430a      	orrs	r2, r1
 8005ef0:	605a      	str	r2, [r3, #4]
 8005ef2:	e007      	b.n	8005f04 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	685a      	ldr	r2, [r3, #4]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f02:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005f12:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	69db      	ldr	r3, [r3, #28]
 8005f1e:	3b01      	subs	r3, #1
 8005f20:	051a      	lsls	r2, r3, #20
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	430a      	orrs	r2, r1
 8005f28:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	689a      	ldr	r2, [r3, #8]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005f38:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	6899      	ldr	r1, [r3, #8]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005f46:	025a      	lsls	r2, r3, #9
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	430a      	orrs	r2, r1
 8005f4e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	689a      	ldr	r2, [r3, #8]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f5e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	6899      	ldr	r1, [r3, #8]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	695b      	ldr	r3, [r3, #20]
 8005f6a:	029a      	lsls	r2, r3, #10
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	430a      	orrs	r2, r1
 8005f72:	609a      	str	r2, [r3, #8]
}
 8005f74:	bf00      	nop
 8005f76:	3714      	adds	r7, #20
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr
 8005f80:	40012300 	.word	0x40012300
 8005f84:	0f000001 	.word	0x0f000001

08005f88 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b084      	sub	sp, #16
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f94:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f9a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d13c      	bne.n	800601c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	689b      	ldr	r3, [r3, #8]
 8005fb4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d12b      	bne.n	8006014 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d127      	bne.n	8006014 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fca:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d006      	beq.n	8005fe0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d119      	bne.n	8006014 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	685a      	ldr	r2, [r3, #4]
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f022 0220 	bic.w	r2, r2, #32
 8005fee:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006000:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006004:	2b00      	cmp	r3, #0
 8006006:	d105      	bne.n	8006014 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800600c:	f043 0201 	orr.w	r2, r3, #1
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006014:	68f8      	ldr	r0, [r7, #12]
 8006016:	f7ff fd6b 	bl	8005af0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800601a:	e00e      	b.n	800603a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006020:	f003 0310 	and.w	r3, r3, #16
 8006024:	2b00      	cmp	r3, #0
 8006026:	d003      	beq.n	8006030 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8006028:	68f8      	ldr	r0, [r7, #12]
 800602a:	f7ff fd75 	bl	8005b18 <HAL_ADC_ErrorCallback>
}
 800602e:	e004      	b.n	800603a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	4798      	blx	r3
}
 800603a:	bf00      	nop
 800603c:	3710      	adds	r7, #16
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}

08006042 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006042:	b580      	push	{r7, lr}
 8006044:	b084      	sub	sp, #16
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800604e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006050:	68f8      	ldr	r0, [r7, #12]
 8006052:	f7ff fd57 	bl	8005b04 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006056:	bf00      	nop
 8006058:	3710      	adds	r7, #16
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}

0800605e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800605e:	b580      	push	{r7, lr}
 8006060:	b084      	sub	sp, #16
 8006062:	af00      	add	r7, sp, #0
 8006064:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800606a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2240      	movs	r2, #64	; 0x40
 8006070:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006076:	f043 0204 	orr.w	r2, r3, #4
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800607e:	68f8      	ldr	r0, [r7, #12]
 8006080:	f7ff fd4a 	bl	8005b18 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006084:	bf00      	nop
 8006086:	3710      	adds	r7, #16
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}

0800608c <__NVIC_SetPriorityGrouping>:
{
 800608c:	b480      	push	{r7}
 800608e:	b085      	sub	sp, #20
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f003 0307 	and.w	r3, r3, #7
 800609a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800609c:	4b0c      	ldr	r3, [pc, #48]	; (80060d0 <__NVIC_SetPriorityGrouping+0x44>)
 800609e:	68db      	ldr	r3, [r3, #12]
 80060a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80060a2:	68ba      	ldr	r2, [r7, #8]
 80060a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80060a8:	4013      	ands	r3, r2
 80060aa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80060b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80060b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80060be:	4a04      	ldr	r2, [pc, #16]	; (80060d0 <__NVIC_SetPriorityGrouping+0x44>)
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	60d3      	str	r3, [r2, #12]
}
 80060c4:	bf00      	nop
 80060c6:	3714      	adds	r7, #20
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr
 80060d0:	e000ed00 	.word	0xe000ed00

080060d4 <__NVIC_GetPriorityGrouping>:
{
 80060d4:	b480      	push	{r7}
 80060d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80060d8:	4b04      	ldr	r3, [pc, #16]	; (80060ec <__NVIC_GetPriorityGrouping+0x18>)
 80060da:	68db      	ldr	r3, [r3, #12]
 80060dc:	0a1b      	lsrs	r3, r3, #8
 80060de:	f003 0307 	and.w	r3, r3, #7
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr
 80060ec:	e000ed00 	.word	0xe000ed00

080060f0 <__NVIC_EnableIRQ>:
{
 80060f0:	b480      	push	{r7}
 80060f2:	b083      	sub	sp, #12
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	4603      	mov	r3, r0
 80060f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80060fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	db0b      	blt.n	800611a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006102:	79fb      	ldrb	r3, [r7, #7]
 8006104:	f003 021f 	and.w	r2, r3, #31
 8006108:	4907      	ldr	r1, [pc, #28]	; (8006128 <__NVIC_EnableIRQ+0x38>)
 800610a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800610e:	095b      	lsrs	r3, r3, #5
 8006110:	2001      	movs	r0, #1
 8006112:	fa00 f202 	lsl.w	r2, r0, r2
 8006116:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800611a:	bf00      	nop
 800611c:	370c      	adds	r7, #12
 800611e:	46bd      	mov	sp, r7
 8006120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006124:	4770      	bx	lr
 8006126:	bf00      	nop
 8006128:	e000e100 	.word	0xe000e100

0800612c <__NVIC_SetPriority>:
{
 800612c:	b480      	push	{r7}
 800612e:	b083      	sub	sp, #12
 8006130:	af00      	add	r7, sp, #0
 8006132:	4603      	mov	r3, r0
 8006134:	6039      	str	r1, [r7, #0]
 8006136:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006138:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800613c:	2b00      	cmp	r3, #0
 800613e:	db0a      	blt.n	8006156 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	b2da      	uxtb	r2, r3
 8006144:	490c      	ldr	r1, [pc, #48]	; (8006178 <__NVIC_SetPriority+0x4c>)
 8006146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800614a:	0112      	lsls	r2, r2, #4
 800614c:	b2d2      	uxtb	r2, r2
 800614e:	440b      	add	r3, r1
 8006150:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006154:	e00a      	b.n	800616c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	b2da      	uxtb	r2, r3
 800615a:	4908      	ldr	r1, [pc, #32]	; (800617c <__NVIC_SetPriority+0x50>)
 800615c:	79fb      	ldrb	r3, [r7, #7]
 800615e:	f003 030f 	and.w	r3, r3, #15
 8006162:	3b04      	subs	r3, #4
 8006164:	0112      	lsls	r2, r2, #4
 8006166:	b2d2      	uxtb	r2, r2
 8006168:	440b      	add	r3, r1
 800616a:	761a      	strb	r2, [r3, #24]
}
 800616c:	bf00      	nop
 800616e:	370c      	adds	r7, #12
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr
 8006178:	e000e100 	.word	0xe000e100
 800617c:	e000ed00 	.word	0xe000ed00

08006180 <NVIC_EncodePriority>:
{
 8006180:	b480      	push	{r7}
 8006182:	b089      	sub	sp, #36	; 0x24
 8006184:	af00      	add	r7, sp, #0
 8006186:	60f8      	str	r0, [r7, #12]
 8006188:	60b9      	str	r1, [r7, #8]
 800618a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	f003 0307 	and.w	r3, r3, #7
 8006192:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006194:	69fb      	ldr	r3, [r7, #28]
 8006196:	f1c3 0307 	rsb	r3, r3, #7
 800619a:	2b04      	cmp	r3, #4
 800619c:	bf28      	it	cs
 800619e:	2304      	movcs	r3, #4
 80061a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80061a2:	69fb      	ldr	r3, [r7, #28]
 80061a4:	3304      	adds	r3, #4
 80061a6:	2b06      	cmp	r3, #6
 80061a8:	d902      	bls.n	80061b0 <NVIC_EncodePriority+0x30>
 80061aa:	69fb      	ldr	r3, [r7, #28]
 80061ac:	3b03      	subs	r3, #3
 80061ae:	e000      	b.n	80061b2 <NVIC_EncodePriority+0x32>
 80061b0:	2300      	movs	r3, #0
 80061b2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80061b4:	f04f 32ff 	mov.w	r2, #4294967295
 80061b8:	69bb      	ldr	r3, [r7, #24]
 80061ba:	fa02 f303 	lsl.w	r3, r2, r3
 80061be:	43da      	mvns	r2, r3
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	401a      	ands	r2, r3
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80061c8:	f04f 31ff 	mov.w	r1, #4294967295
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	fa01 f303 	lsl.w	r3, r1, r3
 80061d2:	43d9      	mvns	r1, r3
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80061d8:	4313      	orrs	r3, r2
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3724      	adds	r7, #36	; 0x24
 80061de:	46bd      	mov	sp, r7
 80061e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e4:	4770      	bx	lr
	...

080061e8 <SysTick_Config>:
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b082      	sub	sp, #8
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	3b01      	subs	r3, #1
 80061f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80061f8:	d301      	bcc.n	80061fe <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80061fa:	2301      	movs	r3, #1
 80061fc:	e00f      	b.n	800621e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80061fe:	4a0a      	ldr	r2, [pc, #40]	; (8006228 <SysTick_Config+0x40>)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	3b01      	subs	r3, #1
 8006204:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006206:	210f      	movs	r1, #15
 8006208:	f04f 30ff 	mov.w	r0, #4294967295
 800620c:	f7ff ff8e 	bl	800612c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006210:	4b05      	ldr	r3, [pc, #20]	; (8006228 <SysTick_Config+0x40>)
 8006212:	2200      	movs	r2, #0
 8006214:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006216:	4b04      	ldr	r3, [pc, #16]	; (8006228 <SysTick_Config+0x40>)
 8006218:	2207      	movs	r2, #7
 800621a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800621c:	2300      	movs	r3, #0
}
 800621e:	4618      	mov	r0, r3
 8006220:	3708      	adds	r7, #8
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}
 8006226:	bf00      	nop
 8006228:	e000e010 	.word	0xe000e010

0800622c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b082      	sub	sp, #8
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f7ff ff29 	bl	800608c <__NVIC_SetPriorityGrouping>
}
 800623a:	bf00      	nop
 800623c:	3708      	adds	r7, #8
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}

08006242 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006242:	b580      	push	{r7, lr}
 8006244:	b086      	sub	sp, #24
 8006246:	af00      	add	r7, sp, #0
 8006248:	4603      	mov	r3, r0
 800624a:	60b9      	str	r1, [r7, #8]
 800624c:	607a      	str	r2, [r7, #4]
 800624e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006250:	2300      	movs	r3, #0
 8006252:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006254:	f7ff ff3e 	bl	80060d4 <__NVIC_GetPriorityGrouping>
 8006258:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800625a:	687a      	ldr	r2, [r7, #4]
 800625c:	68b9      	ldr	r1, [r7, #8]
 800625e:	6978      	ldr	r0, [r7, #20]
 8006260:	f7ff ff8e 	bl	8006180 <NVIC_EncodePriority>
 8006264:	4602      	mov	r2, r0
 8006266:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800626a:	4611      	mov	r1, r2
 800626c:	4618      	mov	r0, r3
 800626e:	f7ff ff5d 	bl	800612c <__NVIC_SetPriority>
}
 8006272:	bf00      	nop
 8006274:	3718      	adds	r7, #24
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}

0800627a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800627a:	b580      	push	{r7, lr}
 800627c:	b082      	sub	sp, #8
 800627e:	af00      	add	r7, sp, #0
 8006280:	4603      	mov	r3, r0
 8006282:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006284:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006288:	4618      	mov	r0, r3
 800628a:	f7ff ff31 	bl	80060f0 <__NVIC_EnableIRQ>
}
 800628e:	bf00      	nop
 8006290:	3708      	adds	r7, #8
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}

08006296 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006296:	b580      	push	{r7, lr}
 8006298:	b082      	sub	sp, #8
 800629a:	af00      	add	r7, sp, #0
 800629c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f7ff ffa2 	bl	80061e8 <SysTick_Config>
 80062a4:	4603      	mov	r3, r0
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3708      	adds	r7, #8
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}
	...

080062b0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b086      	sub	sp, #24
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80062b8:	2300      	movs	r3, #0
 80062ba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80062bc:	f7ff fab4 	bl	8005828 <HAL_GetTick>
 80062c0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d101      	bne.n	80062cc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80062c8:	2301      	movs	r3, #1
 80062ca:	e099      	b.n	8006400 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2200      	movs	r2, #0
 80062d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2202      	movs	r2, #2
 80062d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	681a      	ldr	r2, [r3, #0]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f022 0201 	bic.w	r2, r2, #1
 80062ea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80062ec:	e00f      	b.n	800630e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80062ee:	f7ff fa9b 	bl	8005828 <HAL_GetTick>
 80062f2:	4602      	mov	r2, r0
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	1ad3      	subs	r3, r2, r3
 80062f8:	2b05      	cmp	r3, #5
 80062fa:	d908      	bls.n	800630e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2220      	movs	r2, #32
 8006300:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2203      	movs	r2, #3
 8006306:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800630a:	2303      	movs	r3, #3
 800630c:	e078      	b.n	8006400 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f003 0301 	and.w	r3, r3, #1
 8006318:	2b00      	cmp	r3, #0
 800631a:	d1e8      	bne.n	80062ee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006324:	697a      	ldr	r2, [r7, #20]
 8006326:	4b38      	ldr	r3, [pc, #224]	; (8006408 <HAL_DMA_Init+0x158>)
 8006328:	4013      	ands	r3, r2
 800632a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	685a      	ldr	r2, [r3, #4]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	689b      	ldr	r3, [r3, #8]
 8006334:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800633a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	691b      	ldr	r3, [r3, #16]
 8006340:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006346:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	699b      	ldr	r3, [r3, #24]
 800634c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006352:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6a1b      	ldr	r3, [r3, #32]
 8006358:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800635a:	697a      	ldr	r2, [r7, #20]
 800635c:	4313      	orrs	r3, r2
 800635e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006364:	2b04      	cmp	r3, #4
 8006366:	d107      	bne.n	8006378 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006370:	4313      	orrs	r3, r2
 8006372:	697a      	ldr	r2, [r7, #20]
 8006374:	4313      	orrs	r3, r2
 8006376:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	697a      	ldr	r2, [r7, #20]
 800637e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	695b      	ldr	r3, [r3, #20]
 8006386:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	f023 0307 	bic.w	r3, r3, #7
 800638e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006394:	697a      	ldr	r2, [r7, #20]
 8006396:	4313      	orrs	r3, r2
 8006398:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800639e:	2b04      	cmp	r3, #4
 80063a0:	d117      	bne.n	80063d2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063a6:	697a      	ldr	r2, [r7, #20]
 80063a8:	4313      	orrs	r3, r2
 80063aa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d00e      	beq.n	80063d2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f000 fa9d 	bl	80068f4 <DMA_CheckFifoParam>
 80063ba:	4603      	mov	r3, r0
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d008      	beq.n	80063d2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2240      	movs	r2, #64	; 0x40
 80063c4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2201      	movs	r2, #1
 80063ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80063ce:	2301      	movs	r3, #1
 80063d0:	e016      	b.n	8006400 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	697a      	ldr	r2, [r7, #20]
 80063d8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f000 fa54 	bl	8006888 <DMA_CalcBaseAndBitshift>
 80063e0:	4603      	mov	r3, r0
 80063e2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063e8:	223f      	movs	r2, #63	; 0x3f
 80063ea:	409a      	lsls	r2, r3
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2200      	movs	r2, #0
 80063f4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2201      	movs	r2, #1
 80063fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80063fe:	2300      	movs	r3, #0
}
 8006400:	4618      	mov	r0, r3
 8006402:	3718      	adds	r7, #24
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}
 8006408:	f010803f 	.word	0xf010803f

0800640c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b086      	sub	sp, #24
 8006410:	af00      	add	r7, sp, #0
 8006412:	60f8      	str	r0, [r7, #12]
 8006414:	60b9      	str	r1, [r7, #8]
 8006416:	607a      	str	r2, [r7, #4]
 8006418:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800641a:	2300      	movs	r3, #0
 800641c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006422:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800642a:	2b01      	cmp	r3, #1
 800642c:	d101      	bne.n	8006432 <HAL_DMA_Start_IT+0x26>
 800642e:	2302      	movs	r3, #2
 8006430:	e040      	b.n	80064b4 <HAL_DMA_Start_IT+0xa8>
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2201      	movs	r2, #1
 8006436:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006440:	b2db      	uxtb	r3, r3
 8006442:	2b01      	cmp	r3, #1
 8006444:	d12f      	bne.n	80064a6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2202      	movs	r2, #2
 800644a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2200      	movs	r2, #0
 8006452:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	687a      	ldr	r2, [r7, #4]
 8006458:	68b9      	ldr	r1, [r7, #8]
 800645a:	68f8      	ldr	r0, [r7, #12]
 800645c:	f000 f9e6 	bl	800682c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006464:	223f      	movs	r2, #63	; 0x3f
 8006466:	409a      	lsls	r2, r3
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	681a      	ldr	r2, [r3, #0]
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f042 0216 	orr.w	r2, r2, #22
 800647a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006480:	2b00      	cmp	r3, #0
 8006482:	d007      	beq.n	8006494 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	681a      	ldr	r2, [r3, #0]
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f042 0208 	orr.w	r2, r2, #8
 8006492:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	681a      	ldr	r2, [r3, #0]
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f042 0201 	orr.w	r2, r2, #1
 80064a2:	601a      	str	r2, [r3, #0]
 80064a4:	e005      	b.n	80064b2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2200      	movs	r2, #0
 80064aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80064ae:	2302      	movs	r3, #2
 80064b0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80064b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	3718      	adds	r7, #24
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}

080064bc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80064bc:	b480      	push	{r7}
 80064be:	b083      	sub	sp, #12
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80064ca:	b2db      	uxtb	r3, r3
 80064cc:	2b02      	cmp	r3, #2
 80064ce:	d004      	beq.n	80064da <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2280      	movs	r2, #128	; 0x80
 80064d4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80064d6:	2301      	movs	r3, #1
 80064d8:	e00c      	b.n	80064f4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2205      	movs	r2, #5
 80064de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f022 0201 	bic.w	r2, r2, #1
 80064f0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80064f2:	2300      	movs	r3, #0
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	370c      	adds	r7, #12
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr

08006500 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b086      	sub	sp, #24
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006508:	2300      	movs	r3, #0
 800650a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800650c:	4b92      	ldr	r3, [pc, #584]	; (8006758 <HAL_DMA_IRQHandler+0x258>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a92      	ldr	r2, [pc, #584]	; (800675c <HAL_DMA_IRQHandler+0x25c>)
 8006512:	fba2 2303 	umull	r2, r3, r2, r3
 8006516:	0a9b      	lsrs	r3, r3, #10
 8006518:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800651e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800652a:	2208      	movs	r2, #8
 800652c:	409a      	lsls	r2, r3
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	4013      	ands	r3, r2
 8006532:	2b00      	cmp	r3, #0
 8006534:	d01a      	beq.n	800656c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f003 0304 	and.w	r3, r3, #4
 8006540:	2b00      	cmp	r3, #0
 8006542:	d013      	beq.n	800656c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	681a      	ldr	r2, [r3, #0]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f022 0204 	bic.w	r2, r2, #4
 8006552:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006558:	2208      	movs	r2, #8
 800655a:	409a      	lsls	r2, r3
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006564:	f043 0201 	orr.w	r2, r3, #1
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006570:	2201      	movs	r2, #1
 8006572:	409a      	lsls	r2, r3
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	4013      	ands	r3, r2
 8006578:	2b00      	cmp	r3, #0
 800657a:	d012      	beq.n	80065a2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	695b      	ldr	r3, [r3, #20]
 8006582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006586:	2b00      	cmp	r3, #0
 8006588:	d00b      	beq.n	80065a2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800658e:	2201      	movs	r2, #1
 8006590:	409a      	lsls	r2, r3
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800659a:	f043 0202 	orr.w	r2, r3, #2
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065a6:	2204      	movs	r2, #4
 80065a8:	409a      	lsls	r2, r3
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	4013      	ands	r3, r2
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d012      	beq.n	80065d8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f003 0302 	and.w	r3, r3, #2
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d00b      	beq.n	80065d8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065c4:	2204      	movs	r2, #4
 80065c6:	409a      	lsls	r2, r3
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065d0:	f043 0204 	orr.w	r2, r3, #4
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065dc:	2210      	movs	r2, #16
 80065de:	409a      	lsls	r2, r3
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	4013      	ands	r3, r2
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d043      	beq.n	8006670 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f003 0308 	and.w	r3, r3, #8
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d03c      	beq.n	8006670 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065fa:	2210      	movs	r2, #16
 80065fc:	409a      	lsls	r2, r3
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800660c:	2b00      	cmp	r3, #0
 800660e:	d018      	beq.n	8006642 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800661a:	2b00      	cmp	r3, #0
 800661c:	d108      	bne.n	8006630 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006622:	2b00      	cmp	r3, #0
 8006624:	d024      	beq.n	8006670 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	4798      	blx	r3
 800662e:	e01f      	b.n	8006670 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006634:	2b00      	cmp	r3, #0
 8006636:	d01b      	beq.n	8006670 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	4798      	blx	r3
 8006640:	e016      	b.n	8006670 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800664c:	2b00      	cmp	r3, #0
 800664e:	d107      	bne.n	8006660 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	681a      	ldr	r2, [r3, #0]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f022 0208 	bic.w	r2, r2, #8
 800665e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006664:	2b00      	cmp	r3, #0
 8006666:	d003      	beq.n	8006670 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006674:	2220      	movs	r2, #32
 8006676:	409a      	lsls	r2, r3
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	4013      	ands	r3, r2
 800667c:	2b00      	cmp	r3, #0
 800667e:	f000 808e 	beq.w	800679e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f003 0310 	and.w	r3, r3, #16
 800668c:	2b00      	cmp	r3, #0
 800668e:	f000 8086 	beq.w	800679e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006696:	2220      	movs	r2, #32
 8006698:	409a      	lsls	r2, r3
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80066a4:	b2db      	uxtb	r3, r3
 80066a6:	2b05      	cmp	r3, #5
 80066a8:	d136      	bne.n	8006718 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	681a      	ldr	r2, [r3, #0]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f022 0216 	bic.w	r2, r2, #22
 80066b8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	695a      	ldr	r2, [r3, #20]
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80066c8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d103      	bne.n	80066da <HAL_DMA_IRQHandler+0x1da>
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d007      	beq.n	80066ea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	681a      	ldr	r2, [r3, #0]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f022 0208 	bic.w	r2, r2, #8
 80066e8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066ee:	223f      	movs	r2, #63	; 0x3f
 80066f0:	409a      	lsls	r2, r3
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2200      	movs	r2, #0
 80066fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2201      	movs	r2, #1
 8006702:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800670a:	2b00      	cmp	r3, #0
 800670c:	d07d      	beq.n	800680a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	4798      	blx	r3
        }
        return;
 8006716:	e078      	b.n	800680a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006722:	2b00      	cmp	r3, #0
 8006724:	d01c      	beq.n	8006760 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006730:	2b00      	cmp	r3, #0
 8006732:	d108      	bne.n	8006746 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006738:	2b00      	cmp	r3, #0
 800673a:	d030      	beq.n	800679e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	4798      	blx	r3
 8006744:	e02b      	b.n	800679e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800674a:	2b00      	cmp	r3, #0
 800674c:	d027      	beq.n	800679e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	4798      	blx	r3
 8006756:	e022      	b.n	800679e <HAL_DMA_IRQHandler+0x29e>
 8006758:	20000000 	.word	0x20000000
 800675c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800676a:	2b00      	cmp	r3, #0
 800676c:	d10f      	bne.n	800678e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	681a      	ldr	r2, [r3, #0]
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f022 0210 	bic.w	r2, r2, #16
 800677c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2200      	movs	r2, #0
 8006782:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2201      	movs	r2, #1
 800678a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006792:	2b00      	cmp	r3, #0
 8006794:	d003      	beq.n	800679e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d032      	beq.n	800680c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067aa:	f003 0301 	and.w	r3, r3, #1
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d022      	beq.n	80067f8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2205      	movs	r2, #5
 80067b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	681a      	ldr	r2, [r3, #0]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f022 0201 	bic.w	r2, r2, #1
 80067c8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	3301      	adds	r3, #1
 80067ce:	60bb      	str	r3, [r7, #8]
 80067d0:	697a      	ldr	r2, [r7, #20]
 80067d2:	429a      	cmp	r2, r3
 80067d4:	d307      	bcc.n	80067e6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f003 0301 	and.w	r3, r3, #1
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d1f2      	bne.n	80067ca <HAL_DMA_IRQHandler+0x2ca>
 80067e4:	e000      	b.n	80067e8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80067e6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2200      	movs	r2, #0
 80067ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2201      	movs	r2, #1
 80067f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d005      	beq.n	800680c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	4798      	blx	r3
 8006808:	e000      	b.n	800680c <HAL_DMA_IRQHandler+0x30c>
        return;
 800680a:	bf00      	nop
    }
  }
}
 800680c:	3718      	adds	r7, #24
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}
 8006812:	bf00      	nop

08006814 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8006814:	b480      	push	{r7}
 8006816:	b083      	sub	sp, #12
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8006820:	4618      	mov	r0, r3
 8006822:	370c      	adds	r7, #12
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr

0800682c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800682c:	b480      	push	{r7}
 800682e:	b085      	sub	sp, #20
 8006830:	af00      	add	r7, sp, #0
 8006832:	60f8      	str	r0, [r7, #12]
 8006834:	60b9      	str	r1, [r7, #8]
 8006836:	607a      	str	r2, [r7, #4]
 8006838:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	681a      	ldr	r2, [r3, #0]
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006848:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	683a      	ldr	r2, [r7, #0]
 8006850:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	689b      	ldr	r3, [r3, #8]
 8006856:	2b40      	cmp	r3, #64	; 0x40
 8006858:	d108      	bne.n	800686c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	687a      	ldr	r2, [r7, #4]
 8006860:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	68ba      	ldr	r2, [r7, #8]
 8006868:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800686a:	e007      	b.n	800687c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	68ba      	ldr	r2, [r7, #8]
 8006872:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	687a      	ldr	r2, [r7, #4]
 800687a:	60da      	str	r2, [r3, #12]
}
 800687c:	bf00      	nop
 800687e:	3714      	adds	r7, #20
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr

08006888 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006888:	b480      	push	{r7}
 800688a:	b085      	sub	sp, #20
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	b2db      	uxtb	r3, r3
 8006896:	3b10      	subs	r3, #16
 8006898:	4a14      	ldr	r2, [pc, #80]	; (80068ec <DMA_CalcBaseAndBitshift+0x64>)
 800689a:	fba2 2303 	umull	r2, r3, r2, r3
 800689e:	091b      	lsrs	r3, r3, #4
 80068a0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80068a2:	4a13      	ldr	r2, [pc, #76]	; (80068f0 <DMA_CalcBaseAndBitshift+0x68>)
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	4413      	add	r3, r2
 80068a8:	781b      	ldrb	r3, [r3, #0]
 80068aa:	461a      	mov	r2, r3
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2b03      	cmp	r3, #3
 80068b4:	d909      	bls.n	80068ca <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80068be:	f023 0303 	bic.w	r3, r3, #3
 80068c2:	1d1a      	adds	r2, r3, #4
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	659a      	str	r2, [r3, #88]	; 0x58
 80068c8:	e007      	b.n	80068da <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80068d2:	f023 0303 	bic.w	r3, r3, #3
 80068d6:	687a      	ldr	r2, [r7, #4]
 80068d8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80068de:	4618      	mov	r0, r3
 80068e0:	3714      	adds	r7, #20
 80068e2:	46bd      	mov	sp, r7
 80068e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e8:	4770      	bx	lr
 80068ea:	bf00      	nop
 80068ec:	aaaaaaab 	.word	0xaaaaaaab
 80068f0:	08016ea0 	.word	0x08016ea0

080068f4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b085      	sub	sp, #20
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80068fc:	2300      	movs	r3, #0
 80068fe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006904:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	699b      	ldr	r3, [r3, #24]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d11f      	bne.n	800694e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	2b03      	cmp	r3, #3
 8006912:	d855      	bhi.n	80069c0 <DMA_CheckFifoParam+0xcc>
 8006914:	a201      	add	r2, pc, #4	; (adr r2, 800691c <DMA_CheckFifoParam+0x28>)
 8006916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800691a:	bf00      	nop
 800691c:	0800692d 	.word	0x0800692d
 8006920:	0800693f 	.word	0x0800693f
 8006924:	0800692d 	.word	0x0800692d
 8006928:	080069c1 	.word	0x080069c1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006930:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006934:	2b00      	cmp	r3, #0
 8006936:	d045      	beq.n	80069c4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8006938:	2301      	movs	r3, #1
 800693a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800693c:	e042      	b.n	80069c4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006942:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006946:	d13f      	bne.n	80069c8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8006948:	2301      	movs	r3, #1
 800694a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800694c:	e03c      	b.n	80069c8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	699b      	ldr	r3, [r3, #24]
 8006952:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006956:	d121      	bne.n	800699c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	2b03      	cmp	r3, #3
 800695c:	d836      	bhi.n	80069cc <DMA_CheckFifoParam+0xd8>
 800695e:	a201      	add	r2, pc, #4	; (adr r2, 8006964 <DMA_CheckFifoParam+0x70>)
 8006960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006964:	08006975 	.word	0x08006975
 8006968:	0800697b 	.word	0x0800697b
 800696c:	08006975 	.word	0x08006975
 8006970:	0800698d 	.word	0x0800698d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006974:	2301      	movs	r3, #1
 8006976:	73fb      	strb	r3, [r7, #15]
      break;
 8006978:	e02f      	b.n	80069da <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800697e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006982:	2b00      	cmp	r3, #0
 8006984:	d024      	beq.n	80069d0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8006986:	2301      	movs	r3, #1
 8006988:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800698a:	e021      	b.n	80069d0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006990:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006994:	d11e      	bne.n	80069d4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8006996:	2301      	movs	r3, #1
 8006998:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800699a:	e01b      	b.n	80069d4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	2b02      	cmp	r3, #2
 80069a0:	d902      	bls.n	80069a8 <DMA_CheckFifoParam+0xb4>
 80069a2:	2b03      	cmp	r3, #3
 80069a4:	d003      	beq.n	80069ae <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80069a6:	e018      	b.n	80069da <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80069a8:	2301      	movs	r3, #1
 80069aa:	73fb      	strb	r3, [r7, #15]
      break;
 80069ac:	e015      	b.n	80069da <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d00e      	beq.n	80069d8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80069ba:	2301      	movs	r3, #1
 80069bc:	73fb      	strb	r3, [r7, #15]
      break;
 80069be:	e00b      	b.n	80069d8 <DMA_CheckFifoParam+0xe4>
      break;
 80069c0:	bf00      	nop
 80069c2:	e00a      	b.n	80069da <DMA_CheckFifoParam+0xe6>
      break;
 80069c4:	bf00      	nop
 80069c6:	e008      	b.n	80069da <DMA_CheckFifoParam+0xe6>
      break;
 80069c8:	bf00      	nop
 80069ca:	e006      	b.n	80069da <DMA_CheckFifoParam+0xe6>
      break;
 80069cc:	bf00      	nop
 80069ce:	e004      	b.n	80069da <DMA_CheckFifoParam+0xe6>
      break;
 80069d0:	bf00      	nop
 80069d2:	e002      	b.n	80069da <DMA_CheckFifoParam+0xe6>
      break;   
 80069d4:	bf00      	nop
 80069d6:	e000      	b.n	80069da <DMA_CheckFifoParam+0xe6>
      break;
 80069d8:	bf00      	nop
    }
  } 
  
  return status; 
 80069da:	7bfb      	ldrb	r3, [r7, #15]
}
 80069dc:	4618      	mov	r0, r3
 80069de:	3714      	adds	r7, #20
 80069e0:	46bd      	mov	sp, r7
 80069e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e6:	4770      	bx	lr

080069e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b089      	sub	sp, #36	; 0x24
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80069f2:	2300      	movs	r3, #0
 80069f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80069f6:	2300      	movs	r3, #0
 80069f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80069fa:	2300      	movs	r3, #0
 80069fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80069fe:	2300      	movs	r3, #0
 8006a00:	61fb      	str	r3, [r7, #28]
 8006a02:	e177      	b.n	8006cf4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006a04:	2201      	movs	r2, #1
 8006a06:	69fb      	ldr	r3, [r7, #28]
 8006a08:	fa02 f303 	lsl.w	r3, r2, r3
 8006a0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	697a      	ldr	r2, [r7, #20]
 8006a14:	4013      	ands	r3, r2
 8006a16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006a18:	693a      	ldr	r2, [r7, #16]
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	f040 8166 	bne.w	8006cee <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	2b01      	cmp	r3, #1
 8006a28:	d00b      	beq.n	8006a42 <HAL_GPIO_Init+0x5a>
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	685b      	ldr	r3, [r3, #4]
 8006a2e:	2b02      	cmp	r3, #2
 8006a30:	d007      	beq.n	8006a42 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006a36:	2b11      	cmp	r3, #17
 8006a38:	d003      	beq.n	8006a42 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	2b12      	cmp	r3, #18
 8006a40:	d130      	bne.n	8006aa4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	689b      	ldr	r3, [r3, #8]
 8006a46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006a48:	69fb      	ldr	r3, [r7, #28]
 8006a4a:	005b      	lsls	r3, r3, #1
 8006a4c:	2203      	movs	r2, #3
 8006a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a52:	43db      	mvns	r3, r3
 8006a54:	69ba      	ldr	r2, [r7, #24]
 8006a56:	4013      	ands	r3, r2
 8006a58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	68da      	ldr	r2, [r3, #12]
 8006a5e:	69fb      	ldr	r3, [r7, #28]
 8006a60:	005b      	lsls	r3, r3, #1
 8006a62:	fa02 f303 	lsl.w	r3, r2, r3
 8006a66:	69ba      	ldr	r2, [r7, #24]
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	69ba      	ldr	r2, [r7, #24]
 8006a70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006a78:	2201      	movs	r2, #1
 8006a7a:	69fb      	ldr	r3, [r7, #28]
 8006a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a80:	43db      	mvns	r3, r3
 8006a82:	69ba      	ldr	r2, [r7, #24]
 8006a84:	4013      	ands	r3, r2
 8006a86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	685b      	ldr	r3, [r3, #4]
 8006a8c:	091b      	lsrs	r3, r3, #4
 8006a8e:	f003 0201 	and.w	r2, r3, #1
 8006a92:	69fb      	ldr	r3, [r7, #28]
 8006a94:	fa02 f303 	lsl.w	r3, r2, r3
 8006a98:	69ba      	ldr	r2, [r7, #24]
 8006a9a:	4313      	orrs	r3, r2
 8006a9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	69ba      	ldr	r2, [r7, #24]
 8006aa2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	68db      	ldr	r3, [r3, #12]
 8006aa8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006aaa:	69fb      	ldr	r3, [r7, #28]
 8006aac:	005b      	lsls	r3, r3, #1
 8006aae:	2203      	movs	r2, #3
 8006ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ab4:	43db      	mvns	r3, r3
 8006ab6:	69ba      	ldr	r2, [r7, #24]
 8006ab8:	4013      	ands	r3, r2
 8006aba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	689a      	ldr	r2, [r3, #8]
 8006ac0:	69fb      	ldr	r3, [r7, #28]
 8006ac2:	005b      	lsls	r3, r3, #1
 8006ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ac8:	69ba      	ldr	r2, [r7, #24]
 8006aca:	4313      	orrs	r3, r2
 8006acc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	69ba      	ldr	r2, [r7, #24]
 8006ad2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	685b      	ldr	r3, [r3, #4]
 8006ad8:	2b02      	cmp	r3, #2
 8006ada:	d003      	beq.n	8006ae4 <HAL_GPIO_Init+0xfc>
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	2b12      	cmp	r3, #18
 8006ae2:	d123      	bne.n	8006b2c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006ae4:	69fb      	ldr	r3, [r7, #28]
 8006ae6:	08da      	lsrs	r2, r3, #3
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	3208      	adds	r2, #8
 8006aec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006af0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006af2:	69fb      	ldr	r3, [r7, #28]
 8006af4:	f003 0307 	and.w	r3, r3, #7
 8006af8:	009b      	lsls	r3, r3, #2
 8006afa:	220f      	movs	r2, #15
 8006afc:	fa02 f303 	lsl.w	r3, r2, r3
 8006b00:	43db      	mvns	r3, r3
 8006b02:	69ba      	ldr	r2, [r7, #24]
 8006b04:	4013      	ands	r3, r2
 8006b06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	691a      	ldr	r2, [r3, #16]
 8006b0c:	69fb      	ldr	r3, [r7, #28]
 8006b0e:	f003 0307 	and.w	r3, r3, #7
 8006b12:	009b      	lsls	r3, r3, #2
 8006b14:	fa02 f303 	lsl.w	r3, r2, r3
 8006b18:	69ba      	ldr	r2, [r7, #24]
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006b1e:	69fb      	ldr	r3, [r7, #28]
 8006b20:	08da      	lsrs	r2, r3, #3
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	3208      	adds	r2, #8
 8006b26:	69b9      	ldr	r1, [r7, #24]
 8006b28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006b32:	69fb      	ldr	r3, [r7, #28]
 8006b34:	005b      	lsls	r3, r3, #1
 8006b36:	2203      	movs	r2, #3
 8006b38:	fa02 f303 	lsl.w	r3, r2, r3
 8006b3c:	43db      	mvns	r3, r3
 8006b3e:	69ba      	ldr	r2, [r7, #24]
 8006b40:	4013      	ands	r3, r2
 8006b42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	f003 0203 	and.w	r2, r3, #3
 8006b4c:	69fb      	ldr	r3, [r7, #28]
 8006b4e:	005b      	lsls	r3, r3, #1
 8006b50:	fa02 f303 	lsl.w	r3, r2, r3
 8006b54:	69ba      	ldr	r2, [r7, #24]
 8006b56:	4313      	orrs	r3, r2
 8006b58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	69ba      	ldr	r2, [r7, #24]
 8006b5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	685b      	ldr	r3, [r3, #4]
 8006b64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	f000 80c0 	beq.w	8006cee <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006b6e:	2300      	movs	r3, #0
 8006b70:	60fb      	str	r3, [r7, #12]
 8006b72:	4b65      	ldr	r3, [pc, #404]	; (8006d08 <HAL_GPIO_Init+0x320>)
 8006b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b76:	4a64      	ldr	r2, [pc, #400]	; (8006d08 <HAL_GPIO_Init+0x320>)
 8006b78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006b7c:	6453      	str	r3, [r2, #68]	; 0x44
 8006b7e:	4b62      	ldr	r3, [pc, #392]	; (8006d08 <HAL_GPIO_Init+0x320>)
 8006b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b86:	60fb      	str	r3, [r7, #12]
 8006b88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006b8a:	4a60      	ldr	r2, [pc, #384]	; (8006d0c <HAL_GPIO_Init+0x324>)
 8006b8c:	69fb      	ldr	r3, [r7, #28]
 8006b8e:	089b      	lsrs	r3, r3, #2
 8006b90:	3302      	adds	r3, #2
 8006b92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006b98:	69fb      	ldr	r3, [r7, #28]
 8006b9a:	f003 0303 	and.w	r3, r3, #3
 8006b9e:	009b      	lsls	r3, r3, #2
 8006ba0:	220f      	movs	r2, #15
 8006ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ba6:	43db      	mvns	r3, r3
 8006ba8:	69ba      	ldr	r2, [r7, #24]
 8006baa:	4013      	ands	r3, r2
 8006bac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	4a57      	ldr	r2, [pc, #348]	; (8006d10 <HAL_GPIO_Init+0x328>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d037      	beq.n	8006c26 <HAL_GPIO_Init+0x23e>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	4a56      	ldr	r2, [pc, #344]	; (8006d14 <HAL_GPIO_Init+0x32c>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d031      	beq.n	8006c22 <HAL_GPIO_Init+0x23a>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	4a55      	ldr	r2, [pc, #340]	; (8006d18 <HAL_GPIO_Init+0x330>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d02b      	beq.n	8006c1e <HAL_GPIO_Init+0x236>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	4a54      	ldr	r2, [pc, #336]	; (8006d1c <HAL_GPIO_Init+0x334>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d025      	beq.n	8006c1a <HAL_GPIO_Init+0x232>
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	4a53      	ldr	r2, [pc, #332]	; (8006d20 <HAL_GPIO_Init+0x338>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d01f      	beq.n	8006c16 <HAL_GPIO_Init+0x22e>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	4a52      	ldr	r2, [pc, #328]	; (8006d24 <HAL_GPIO_Init+0x33c>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d019      	beq.n	8006c12 <HAL_GPIO_Init+0x22a>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	4a51      	ldr	r2, [pc, #324]	; (8006d28 <HAL_GPIO_Init+0x340>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d013      	beq.n	8006c0e <HAL_GPIO_Init+0x226>
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	4a50      	ldr	r2, [pc, #320]	; (8006d2c <HAL_GPIO_Init+0x344>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d00d      	beq.n	8006c0a <HAL_GPIO_Init+0x222>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	4a4f      	ldr	r2, [pc, #316]	; (8006d30 <HAL_GPIO_Init+0x348>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d007      	beq.n	8006c06 <HAL_GPIO_Init+0x21e>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	4a4e      	ldr	r2, [pc, #312]	; (8006d34 <HAL_GPIO_Init+0x34c>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d101      	bne.n	8006c02 <HAL_GPIO_Init+0x21a>
 8006bfe:	2309      	movs	r3, #9
 8006c00:	e012      	b.n	8006c28 <HAL_GPIO_Init+0x240>
 8006c02:	230a      	movs	r3, #10
 8006c04:	e010      	b.n	8006c28 <HAL_GPIO_Init+0x240>
 8006c06:	2308      	movs	r3, #8
 8006c08:	e00e      	b.n	8006c28 <HAL_GPIO_Init+0x240>
 8006c0a:	2307      	movs	r3, #7
 8006c0c:	e00c      	b.n	8006c28 <HAL_GPIO_Init+0x240>
 8006c0e:	2306      	movs	r3, #6
 8006c10:	e00a      	b.n	8006c28 <HAL_GPIO_Init+0x240>
 8006c12:	2305      	movs	r3, #5
 8006c14:	e008      	b.n	8006c28 <HAL_GPIO_Init+0x240>
 8006c16:	2304      	movs	r3, #4
 8006c18:	e006      	b.n	8006c28 <HAL_GPIO_Init+0x240>
 8006c1a:	2303      	movs	r3, #3
 8006c1c:	e004      	b.n	8006c28 <HAL_GPIO_Init+0x240>
 8006c1e:	2302      	movs	r3, #2
 8006c20:	e002      	b.n	8006c28 <HAL_GPIO_Init+0x240>
 8006c22:	2301      	movs	r3, #1
 8006c24:	e000      	b.n	8006c28 <HAL_GPIO_Init+0x240>
 8006c26:	2300      	movs	r3, #0
 8006c28:	69fa      	ldr	r2, [r7, #28]
 8006c2a:	f002 0203 	and.w	r2, r2, #3
 8006c2e:	0092      	lsls	r2, r2, #2
 8006c30:	4093      	lsls	r3, r2
 8006c32:	69ba      	ldr	r2, [r7, #24]
 8006c34:	4313      	orrs	r3, r2
 8006c36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006c38:	4934      	ldr	r1, [pc, #208]	; (8006d0c <HAL_GPIO_Init+0x324>)
 8006c3a:	69fb      	ldr	r3, [r7, #28]
 8006c3c:	089b      	lsrs	r3, r3, #2
 8006c3e:	3302      	adds	r3, #2
 8006c40:	69ba      	ldr	r2, [r7, #24]
 8006c42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006c46:	4b3c      	ldr	r3, [pc, #240]	; (8006d38 <HAL_GPIO_Init+0x350>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	43db      	mvns	r3, r3
 8006c50:	69ba      	ldr	r2, [r7, #24]
 8006c52:	4013      	ands	r3, r2
 8006c54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d003      	beq.n	8006c6a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8006c62:	69ba      	ldr	r2, [r7, #24]
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	4313      	orrs	r3, r2
 8006c68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006c6a:	4a33      	ldr	r2, [pc, #204]	; (8006d38 <HAL_GPIO_Init+0x350>)
 8006c6c:	69bb      	ldr	r3, [r7, #24]
 8006c6e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006c70:	4b31      	ldr	r3, [pc, #196]	; (8006d38 <HAL_GPIO_Init+0x350>)
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	43db      	mvns	r3, r3
 8006c7a:	69ba      	ldr	r2, [r7, #24]
 8006c7c:	4013      	ands	r3, r2
 8006c7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d003      	beq.n	8006c94 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006c8c:	69ba      	ldr	r2, [r7, #24]
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	4313      	orrs	r3, r2
 8006c92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006c94:	4a28      	ldr	r2, [pc, #160]	; (8006d38 <HAL_GPIO_Init+0x350>)
 8006c96:	69bb      	ldr	r3, [r7, #24]
 8006c98:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006c9a:	4b27      	ldr	r3, [pc, #156]	; (8006d38 <HAL_GPIO_Init+0x350>)
 8006c9c:	689b      	ldr	r3, [r3, #8]
 8006c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	43db      	mvns	r3, r3
 8006ca4:	69ba      	ldr	r2, [r7, #24]
 8006ca6:	4013      	ands	r3, r2
 8006ca8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d003      	beq.n	8006cbe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006cb6:	69ba      	ldr	r2, [r7, #24]
 8006cb8:	693b      	ldr	r3, [r7, #16]
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006cbe:	4a1e      	ldr	r2, [pc, #120]	; (8006d38 <HAL_GPIO_Init+0x350>)
 8006cc0:	69bb      	ldr	r3, [r7, #24]
 8006cc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006cc4:	4b1c      	ldr	r3, [pc, #112]	; (8006d38 <HAL_GPIO_Init+0x350>)
 8006cc6:	68db      	ldr	r3, [r3, #12]
 8006cc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	43db      	mvns	r3, r3
 8006cce:	69ba      	ldr	r2, [r7, #24]
 8006cd0:	4013      	ands	r3, r2
 8006cd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	685b      	ldr	r3, [r3, #4]
 8006cd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d003      	beq.n	8006ce8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006ce0:	69ba      	ldr	r2, [r7, #24]
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006ce8:	4a13      	ldr	r2, [pc, #76]	; (8006d38 <HAL_GPIO_Init+0x350>)
 8006cea:	69bb      	ldr	r3, [r7, #24]
 8006cec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006cee:	69fb      	ldr	r3, [r7, #28]
 8006cf0:	3301      	adds	r3, #1
 8006cf2:	61fb      	str	r3, [r7, #28]
 8006cf4:	69fb      	ldr	r3, [r7, #28]
 8006cf6:	2b0f      	cmp	r3, #15
 8006cf8:	f67f ae84 	bls.w	8006a04 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006cfc:	bf00      	nop
 8006cfe:	3724      	adds	r7, #36	; 0x24
 8006d00:	46bd      	mov	sp, r7
 8006d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d06:	4770      	bx	lr
 8006d08:	40023800 	.word	0x40023800
 8006d0c:	40013800 	.word	0x40013800
 8006d10:	40020000 	.word	0x40020000
 8006d14:	40020400 	.word	0x40020400
 8006d18:	40020800 	.word	0x40020800
 8006d1c:	40020c00 	.word	0x40020c00
 8006d20:	40021000 	.word	0x40021000
 8006d24:	40021400 	.word	0x40021400
 8006d28:	40021800 	.word	0x40021800
 8006d2c:	40021c00 	.word	0x40021c00
 8006d30:	40022000 	.word	0x40022000
 8006d34:	40022400 	.word	0x40022400
 8006d38:	40013c00 	.word	0x40013c00

08006d3c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b085      	sub	sp, #20
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
 8006d44:	460b      	mov	r3, r1
 8006d46:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	691a      	ldr	r2, [r3, #16]
 8006d4c:	887b      	ldrh	r3, [r7, #2]
 8006d4e:	4013      	ands	r3, r2
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d002      	beq.n	8006d5a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006d54:	2301      	movs	r3, #1
 8006d56:	73fb      	strb	r3, [r7, #15]
 8006d58:	e001      	b.n	8006d5e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	3714      	adds	r7, #20
 8006d64:	46bd      	mov	sp, r7
 8006d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6a:	4770      	bx	lr

08006d6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b083      	sub	sp, #12
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
 8006d74:	460b      	mov	r3, r1
 8006d76:	807b      	strh	r3, [r7, #2]
 8006d78:	4613      	mov	r3, r2
 8006d7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006d7c:	787b      	ldrb	r3, [r7, #1]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d003      	beq.n	8006d8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006d82:	887a      	ldrh	r2, [r7, #2]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006d88:	e003      	b.n	8006d92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006d8a:	887b      	ldrh	r3, [r7, #2]
 8006d8c:	041a      	lsls	r2, r3, #16
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	619a      	str	r2, [r3, #24]
}
 8006d92:	bf00      	nop
 8006d94:	370c      	adds	r7, #12
 8006d96:	46bd      	mov	sp, r7
 8006d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9c:	4770      	bx	lr
	...

08006da0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b082      	sub	sp, #8
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	4603      	mov	r3, r0
 8006da8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006daa:	4b08      	ldr	r3, [pc, #32]	; (8006dcc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006dac:	695a      	ldr	r2, [r3, #20]
 8006dae:	88fb      	ldrh	r3, [r7, #6]
 8006db0:	4013      	ands	r3, r2
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d006      	beq.n	8006dc4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006db6:	4a05      	ldr	r2, [pc, #20]	; (8006dcc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006db8:	88fb      	ldrh	r3, [r7, #6]
 8006dba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006dbc:	88fb      	ldrh	r3, [r7, #6]
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f7fc fb9b 	bl	80034fa <HAL_GPIO_EXTI_Callback>
  }
}
 8006dc4:	bf00      	nop
 8006dc6:	3708      	adds	r7, #8
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bd80      	pop	{r7, pc}
 8006dcc:	40013c00 	.word	0x40013c00

08006dd0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b084      	sub	sp, #16
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d101      	bne.n	8006de2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006dde:	2301      	movs	r3, #1
 8006de0:	e11f      	b.n	8007022 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006de8:	b2db      	uxtb	r3, r3
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d106      	bne.n	8006dfc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2200      	movs	r2, #0
 8006df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f7fd fbf4 	bl	80045e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2224      	movs	r2, #36	; 0x24
 8006e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	681a      	ldr	r2, [r3, #0]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f022 0201 	bic.w	r2, r2, #1
 8006e12:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	681a      	ldr	r2, [r3, #0]
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006e22:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	681a      	ldr	r2, [r3, #0]
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006e32:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006e34:	f001 f96e 	bl	8008114 <HAL_RCC_GetPCLK1Freq>
 8006e38:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	4a7b      	ldr	r2, [pc, #492]	; (800702c <HAL_I2C_Init+0x25c>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d807      	bhi.n	8006e54 <HAL_I2C_Init+0x84>
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	4a7a      	ldr	r2, [pc, #488]	; (8007030 <HAL_I2C_Init+0x260>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	bf94      	ite	ls
 8006e4c:	2301      	movls	r3, #1
 8006e4e:	2300      	movhi	r3, #0
 8006e50:	b2db      	uxtb	r3, r3
 8006e52:	e006      	b.n	8006e62 <HAL_I2C_Init+0x92>
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	4a77      	ldr	r2, [pc, #476]	; (8007034 <HAL_I2C_Init+0x264>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	bf94      	ite	ls
 8006e5c:	2301      	movls	r3, #1
 8006e5e:	2300      	movhi	r3, #0
 8006e60:	b2db      	uxtb	r3, r3
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d001      	beq.n	8006e6a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006e66:	2301      	movs	r3, #1
 8006e68:	e0db      	b.n	8007022 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	4a72      	ldr	r2, [pc, #456]	; (8007038 <HAL_I2C_Init+0x268>)
 8006e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8006e72:	0c9b      	lsrs	r3, r3, #18
 8006e74:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	68ba      	ldr	r2, [r7, #8]
 8006e86:	430a      	orrs	r2, r1
 8006e88:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	6a1b      	ldr	r3, [r3, #32]
 8006e90:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	4a64      	ldr	r2, [pc, #400]	; (800702c <HAL_I2C_Init+0x25c>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d802      	bhi.n	8006ea4 <HAL_I2C_Init+0xd4>
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	3301      	adds	r3, #1
 8006ea2:	e009      	b.n	8006eb8 <HAL_I2C_Init+0xe8>
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006eaa:	fb02 f303 	mul.w	r3, r2, r3
 8006eae:	4a63      	ldr	r2, [pc, #396]	; (800703c <HAL_I2C_Init+0x26c>)
 8006eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8006eb4:	099b      	lsrs	r3, r3, #6
 8006eb6:	3301      	adds	r3, #1
 8006eb8:	687a      	ldr	r2, [r7, #4]
 8006eba:	6812      	ldr	r2, [r2, #0]
 8006ebc:	430b      	orrs	r3, r1
 8006ebe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	69db      	ldr	r3, [r3, #28]
 8006ec6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006eca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	685b      	ldr	r3, [r3, #4]
 8006ed2:	4956      	ldr	r1, [pc, #344]	; (800702c <HAL_I2C_Init+0x25c>)
 8006ed4:	428b      	cmp	r3, r1
 8006ed6:	d80d      	bhi.n	8006ef4 <HAL_I2C_Init+0x124>
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	1e59      	subs	r1, r3, #1
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	005b      	lsls	r3, r3, #1
 8006ee2:	fbb1 f3f3 	udiv	r3, r1, r3
 8006ee6:	3301      	adds	r3, #1
 8006ee8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006eec:	2b04      	cmp	r3, #4
 8006eee:	bf38      	it	cc
 8006ef0:	2304      	movcc	r3, #4
 8006ef2:	e04f      	b.n	8006f94 <HAL_I2C_Init+0x1c4>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	689b      	ldr	r3, [r3, #8]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d111      	bne.n	8006f20 <HAL_I2C_Init+0x150>
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	1e58      	subs	r0, r3, #1
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6859      	ldr	r1, [r3, #4]
 8006f04:	460b      	mov	r3, r1
 8006f06:	005b      	lsls	r3, r3, #1
 8006f08:	440b      	add	r3, r1
 8006f0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8006f0e:	3301      	adds	r3, #1
 8006f10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	bf0c      	ite	eq
 8006f18:	2301      	moveq	r3, #1
 8006f1a:	2300      	movne	r3, #0
 8006f1c:	b2db      	uxtb	r3, r3
 8006f1e:	e012      	b.n	8006f46 <HAL_I2C_Init+0x176>
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	1e58      	subs	r0, r3, #1
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6859      	ldr	r1, [r3, #4]
 8006f28:	460b      	mov	r3, r1
 8006f2a:	009b      	lsls	r3, r3, #2
 8006f2c:	440b      	add	r3, r1
 8006f2e:	0099      	lsls	r1, r3, #2
 8006f30:	440b      	add	r3, r1
 8006f32:	fbb0 f3f3 	udiv	r3, r0, r3
 8006f36:	3301      	adds	r3, #1
 8006f38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	bf0c      	ite	eq
 8006f40:	2301      	moveq	r3, #1
 8006f42:	2300      	movne	r3, #0
 8006f44:	b2db      	uxtb	r3, r3
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d001      	beq.n	8006f4e <HAL_I2C_Init+0x17e>
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	e022      	b.n	8006f94 <HAL_I2C_Init+0x1c4>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	689b      	ldr	r3, [r3, #8]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d10e      	bne.n	8006f74 <HAL_I2C_Init+0x1a4>
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	1e58      	subs	r0, r3, #1
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6859      	ldr	r1, [r3, #4]
 8006f5e:	460b      	mov	r3, r1
 8006f60:	005b      	lsls	r3, r3, #1
 8006f62:	440b      	add	r3, r1
 8006f64:	fbb0 f3f3 	udiv	r3, r0, r3
 8006f68:	3301      	adds	r3, #1
 8006f6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f72:	e00f      	b.n	8006f94 <HAL_I2C_Init+0x1c4>
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	1e58      	subs	r0, r3, #1
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6859      	ldr	r1, [r3, #4]
 8006f7c:	460b      	mov	r3, r1
 8006f7e:	009b      	lsls	r3, r3, #2
 8006f80:	440b      	add	r3, r1
 8006f82:	0099      	lsls	r1, r3, #2
 8006f84:	440b      	add	r3, r1
 8006f86:	fbb0 f3f3 	udiv	r3, r0, r3
 8006f8a:	3301      	adds	r3, #1
 8006f8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006f90:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006f94:	6879      	ldr	r1, [r7, #4]
 8006f96:	6809      	ldr	r1, [r1, #0]
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	69da      	ldr	r2, [r3, #28]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6a1b      	ldr	r3, [r3, #32]
 8006fae:	431a      	orrs	r2, r3
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	430a      	orrs	r2, r1
 8006fb6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	689b      	ldr	r3, [r3, #8]
 8006fbe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006fc2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006fc6:	687a      	ldr	r2, [r7, #4]
 8006fc8:	6911      	ldr	r1, [r2, #16]
 8006fca:	687a      	ldr	r2, [r7, #4]
 8006fcc:	68d2      	ldr	r2, [r2, #12]
 8006fce:	4311      	orrs	r1, r2
 8006fd0:	687a      	ldr	r2, [r7, #4]
 8006fd2:	6812      	ldr	r2, [r2, #0]
 8006fd4:	430b      	orrs	r3, r1
 8006fd6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	68db      	ldr	r3, [r3, #12]
 8006fde:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	695a      	ldr	r2, [r3, #20]
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	699b      	ldr	r3, [r3, #24]
 8006fea:	431a      	orrs	r2, r3
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	430a      	orrs	r2, r1
 8006ff2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	681a      	ldr	r2, [r3, #0]
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f042 0201 	orr.w	r2, r2, #1
 8007002:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2200      	movs	r2, #0
 8007008:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2220      	movs	r2, #32
 800700e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2200      	movs	r2, #0
 8007016:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2200      	movs	r2, #0
 800701c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007020:	2300      	movs	r3, #0
}
 8007022:	4618      	mov	r0, r3
 8007024:	3710      	adds	r7, #16
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}
 800702a:	bf00      	nop
 800702c:	000186a0 	.word	0x000186a0
 8007030:	001e847f 	.word	0x001e847f
 8007034:	003d08ff 	.word	0x003d08ff
 8007038:	431bde83 	.word	0x431bde83
 800703c:	10624dd3 	.word	0x10624dd3

08007040 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b088      	sub	sp, #32
 8007044:	af02      	add	r7, sp, #8
 8007046:	60f8      	str	r0, [r7, #12]
 8007048:	607a      	str	r2, [r7, #4]
 800704a:	461a      	mov	r2, r3
 800704c:	460b      	mov	r3, r1
 800704e:	817b      	strh	r3, [r7, #10]
 8007050:	4613      	mov	r3, r2
 8007052:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007054:	f7fe fbe8 	bl	8005828 <HAL_GetTick>
 8007058:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007060:	b2db      	uxtb	r3, r3
 8007062:	2b20      	cmp	r3, #32
 8007064:	f040 80e0 	bne.w	8007228 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	9300      	str	r3, [sp, #0]
 800706c:	2319      	movs	r3, #25
 800706e:	2201      	movs	r2, #1
 8007070:	4970      	ldr	r1, [pc, #448]	; (8007234 <HAL_I2C_Master_Transmit+0x1f4>)
 8007072:	68f8      	ldr	r0, [r7, #12]
 8007074:	f000 fc58 	bl	8007928 <I2C_WaitOnFlagUntilTimeout>
 8007078:	4603      	mov	r3, r0
 800707a:	2b00      	cmp	r3, #0
 800707c:	d001      	beq.n	8007082 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800707e:	2302      	movs	r3, #2
 8007080:	e0d3      	b.n	800722a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007088:	2b01      	cmp	r3, #1
 800708a:	d101      	bne.n	8007090 <HAL_I2C_Master_Transmit+0x50>
 800708c:	2302      	movs	r3, #2
 800708e:	e0cc      	b.n	800722a <HAL_I2C_Master_Transmit+0x1ea>
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	2201      	movs	r2, #1
 8007094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f003 0301 	and.w	r3, r3, #1
 80070a2:	2b01      	cmp	r3, #1
 80070a4:	d007      	beq.n	80070b6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	681a      	ldr	r2, [r3, #0]
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f042 0201 	orr.w	r2, r2, #1
 80070b4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	681a      	ldr	r2, [r3, #0]
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80070c4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	2221      	movs	r2, #33	; 0x21
 80070ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2210      	movs	r2, #16
 80070d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	2200      	movs	r2, #0
 80070da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	687a      	ldr	r2, [r7, #4]
 80070e0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	893a      	ldrh	r2, [r7, #8]
 80070e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070ec:	b29a      	uxth	r2, r3
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	4a50      	ldr	r2, [pc, #320]	; (8007238 <HAL_I2C_Master_Transmit+0x1f8>)
 80070f6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80070f8:	8979      	ldrh	r1, [r7, #10]
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	6a3a      	ldr	r2, [r7, #32]
 80070fe:	68f8      	ldr	r0, [r7, #12]
 8007100:	f000 fac2 	bl	8007688 <I2C_MasterRequestWrite>
 8007104:	4603      	mov	r3, r0
 8007106:	2b00      	cmp	r3, #0
 8007108:	d001      	beq.n	800710e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800710a:	2301      	movs	r3, #1
 800710c:	e08d      	b.n	800722a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800710e:	2300      	movs	r3, #0
 8007110:	613b      	str	r3, [r7, #16]
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	695b      	ldr	r3, [r3, #20]
 8007118:	613b      	str	r3, [r7, #16]
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	699b      	ldr	r3, [r3, #24]
 8007120:	613b      	str	r3, [r7, #16]
 8007122:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8007124:	e066      	b.n	80071f4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007126:	697a      	ldr	r2, [r7, #20]
 8007128:	6a39      	ldr	r1, [r7, #32]
 800712a:	68f8      	ldr	r0, [r7, #12]
 800712c:	f000 fcd2 	bl	8007ad4 <I2C_WaitOnTXEFlagUntilTimeout>
 8007130:	4603      	mov	r3, r0
 8007132:	2b00      	cmp	r3, #0
 8007134:	d00d      	beq.n	8007152 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800713a:	2b04      	cmp	r3, #4
 800713c:	d107      	bne.n	800714e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	681a      	ldr	r2, [r3, #0]
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800714c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800714e:	2301      	movs	r3, #1
 8007150:	e06b      	b.n	800722a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007156:	781a      	ldrb	r2, [r3, #0]
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007162:	1c5a      	adds	r2, r3, #1
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800716c:	b29b      	uxth	r3, r3
 800716e:	3b01      	subs	r3, #1
 8007170:	b29a      	uxth	r2, r3
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800717a:	3b01      	subs	r3, #1
 800717c:	b29a      	uxth	r2, r3
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	695b      	ldr	r3, [r3, #20]
 8007188:	f003 0304 	and.w	r3, r3, #4
 800718c:	2b04      	cmp	r3, #4
 800718e:	d11b      	bne.n	80071c8 <HAL_I2C_Master_Transmit+0x188>
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007194:	2b00      	cmp	r3, #0
 8007196:	d017      	beq.n	80071c8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800719c:	781a      	ldrb	r2, [r3, #0]
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071a8:	1c5a      	adds	r2, r3, #1
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071b2:	b29b      	uxth	r3, r3
 80071b4:	3b01      	subs	r3, #1
 80071b6:	b29a      	uxth	r2, r3
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071c0:	3b01      	subs	r3, #1
 80071c2:	b29a      	uxth	r2, r3
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80071c8:	697a      	ldr	r2, [r7, #20]
 80071ca:	6a39      	ldr	r1, [r7, #32]
 80071cc:	68f8      	ldr	r0, [r7, #12]
 80071ce:	f000 fcc2 	bl	8007b56 <I2C_WaitOnBTFFlagUntilTimeout>
 80071d2:	4603      	mov	r3, r0
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d00d      	beq.n	80071f4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071dc:	2b04      	cmp	r3, #4
 80071de:	d107      	bne.n	80071f0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	681a      	ldr	r2, [r3, #0]
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071ee:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80071f0:	2301      	movs	r3, #1
 80071f2:	e01a      	b.n	800722a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d194      	bne.n	8007126 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	681a      	ldr	r2, [r3, #0]
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800720a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	2220      	movs	r2, #32
 8007210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2200      	movs	r2, #0
 8007218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	2200      	movs	r2, #0
 8007220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007224:	2300      	movs	r3, #0
 8007226:	e000      	b.n	800722a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8007228:	2302      	movs	r3, #2
  }
}
 800722a:	4618      	mov	r0, r3
 800722c:	3718      	adds	r7, #24
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}
 8007232:	bf00      	nop
 8007234:	00100002 	.word	0x00100002
 8007238:	ffff0000 	.word	0xffff0000

0800723c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b08c      	sub	sp, #48	; 0x30
 8007240:	af02      	add	r7, sp, #8
 8007242:	60f8      	str	r0, [r7, #12]
 8007244:	607a      	str	r2, [r7, #4]
 8007246:	461a      	mov	r2, r3
 8007248:	460b      	mov	r3, r1
 800724a:	817b      	strh	r3, [r7, #10]
 800724c:	4613      	mov	r3, r2
 800724e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007250:	f7fe faea 	bl	8005828 <HAL_GetTick>
 8007254:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800725c:	b2db      	uxtb	r3, r3
 800725e:	2b20      	cmp	r3, #32
 8007260:	f040 820b 	bne.w	800767a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007266:	9300      	str	r3, [sp, #0]
 8007268:	2319      	movs	r3, #25
 800726a:	2201      	movs	r2, #1
 800726c:	497c      	ldr	r1, [pc, #496]	; (8007460 <HAL_I2C_Master_Receive+0x224>)
 800726e:	68f8      	ldr	r0, [r7, #12]
 8007270:	f000 fb5a 	bl	8007928 <I2C_WaitOnFlagUntilTimeout>
 8007274:	4603      	mov	r3, r0
 8007276:	2b00      	cmp	r3, #0
 8007278:	d001      	beq.n	800727e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800727a:	2302      	movs	r3, #2
 800727c:	e1fe      	b.n	800767c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007284:	2b01      	cmp	r3, #1
 8007286:	d101      	bne.n	800728c <HAL_I2C_Master_Receive+0x50>
 8007288:	2302      	movs	r3, #2
 800728a:	e1f7      	b.n	800767c <HAL_I2C_Master_Receive+0x440>
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	2201      	movs	r2, #1
 8007290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f003 0301 	and.w	r3, r3, #1
 800729e:	2b01      	cmp	r3, #1
 80072a0:	d007      	beq.n	80072b2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	681a      	ldr	r2, [r3, #0]
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f042 0201 	orr.w	r2, r2, #1
 80072b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	681a      	ldr	r2, [r3, #0]
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80072c0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2222      	movs	r2, #34	; 0x22
 80072c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2210      	movs	r2, #16
 80072ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	2200      	movs	r2, #0
 80072d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	687a      	ldr	r2, [r7, #4]
 80072dc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	893a      	ldrh	r2, [r7, #8]
 80072e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072e8:	b29a      	uxth	r2, r3
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	4a5c      	ldr	r2, [pc, #368]	; (8007464 <HAL_I2C_Master_Receive+0x228>)
 80072f2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80072f4:	8979      	ldrh	r1, [r7, #10]
 80072f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072fa:	68f8      	ldr	r0, [r7, #12]
 80072fc:	f000 fa46 	bl	800778c <I2C_MasterRequestRead>
 8007300:	4603      	mov	r3, r0
 8007302:	2b00      	cmp	r3, #0
 8007304:	d001      	beq.n	800730a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8007306:	2301      	movs	r3, #1
 8007308:	e1b8      	b.n	800767c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800730e:	2b00      	cmp	r3, #0
 8007310:	d113      	bne.n	800733a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007312:	2300      	movs	r3, #0
 8007314:	623b      	str	r3, [r7, #32]
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	695b      	ldr	r3, [r3, #20]
 800731c:	623b      	str	r3, [r7, #32]
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	699b      	ldr	r3, [r3, #24]
 8007324:	623b      	str	r3, [r7, #32]
 8007326:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	681a      	ldr	r2, [r3, #0]
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007336:	601a      	str	r2, [r3, #0]
 8007338:	e18c      	b.n	8007654 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800733e:	2b01      	cmp	r3, #1
 8007340:	d11b      	bne.n	800737a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	681a      	ldr	r2, [r3, #0]
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007350:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007352:	2300      	movs	r3, #0
 8007354:	61fb      	str	r3, [r7, #28]
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	695b      	ldr	r3, [r3, #20]
 800735c:	61fb      	str	r3, [r7, #28]
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	699b      	ldr	r3, [r3, #24]
 8007364:	61fb      	str	r3, [r7, #28]
 8007366:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	681a      	ldr	r2, [r3, #0]
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007376:	601a      	str	r2, [r3, #0]
 8007378:	e16c      	b.n	8007654 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800737e:	2b02      	cmp	r3, #2
 8007380:	d11b      	bne.n	80073ba <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	681a      	ldr	r2, [r3, #0]
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007390:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	681a      	ldr	r2, [r3, #0]
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80073a0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80073a2:	2300      	movs	r3, #0
 80073a4:	61bb      	str	r3, [r7, #24]
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	695b      	ldr	r3, [r3, #20]
 80073ac:	61bb      	str	r3, [r7, #24]
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	699b      	ldr	r3, [r3, #24]
 80073b4:	61bb      	str	r3, [r7, #24]
 80073b6:	69bb      	ldr	r3, [r7, #24]
 80073b8:	e14c      	b.n	8007654 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	681a      	ldr	r2, [r3, #0]
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80073c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80073ca:	2300      	movs	r3, #0
 80073cc:	617b      	str	r3, [r7, #20]
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	695b      	ldr	r3, [r3, #20]
 80073d4:	617b      	str	r3, [r7, #20]
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	699b      	ldr	r3, [r3, #24]
 80073dc:	617b      	str	r3, [r7, #20]
 80073de:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80073e0:	e138      	b.n	8007654 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073e6:	2b03      	cmp	r3, #3
 80073e8:	f200 80f1 	bhi.w	80075ce <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073f0:	2b01      	cmp	r3, #1
 80073f2:	d123      	bne.n	800743c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80073f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80073f8:	68f8      	ldr	r0, [r7, #12]
 80073fa:	f000 fbed 	bl	8007bd8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80073fe:	4603      	mov	r3, r0
 8007400:	2b00      	cmp	r3, #0
 8007402:	d001      	beq.n	8007408 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8007404:	2301      	movs	r3, #1
 8007406:	e139      	b.n	800767c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	691a      	ldr	r2, [r3, #16]
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007412:	b2d2      	uxtb	r2, r2
 8007414:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800741a:	1c5a      	adds	r2, r3, #1
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007424:	3b01      	subs	r3, #1
 8007426:	b29a      	uxth	r2, r3
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007430:	b29b      	uxth	r3, r3
 8007432:	3b01      	subs	r3, #1
 8007434:	b29a      	uxth	r2, r3
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	855a      	strh	r2, [r3, #42]	; 0x2a
 800743a:	e10b      	b.n	8007654 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007440:	2b02      	cmp	r3, #2
 8007442:	d14e      	bne.n	80074e2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007446:	9300      	str	r3, [sp, #0]
 8007448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800744a:	2200      	movs	r2, #0
 800744c:	4906      	ldr	r1, [pc, #24]	; (8007468 <HAL_I2C_Master_Receive+0x22c>)
 800744e:	68f8      	ldr	r0, [r7, #12]
 8007450:	f000 fa6a 	bl	8007928 <I2C_WaitOnFlagUntilTimeout>
 8007454:	4603      	mov	r3, r0
 8007456:	2b00      	cmp	r3, #0
 8007458:	d008      	beq.n	800746c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800745a:	2301      	movs	r3, #1
 800745c:	e10e      	b.n	800767c <HAL_I2C_Master_Receive+0x440>
 800745e:	bf00      	nop
 8007460:	00100002 	.word	0x00100002
 8007464:	ffff0000 	.word	0xffff0000
 8007468:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	681a      	ldr	r2, [r3, #0]
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800747a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	691a      	ldr	r2, [r3, #16]
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007486:	b2d2      	uxtb	r2, r2
 8007488:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800748e:	1c5a      	adds	r2, r3, #1
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007498:	3b01      	subs	r3, #1
 800749a:	b29a      	uxth	r2, r3
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074a4:	b29b      	uxth	r3, r3
 80074a6:	3b01      	subs	r3, #1
 80074a8:	b29a      	uxth	r2, r3
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	691a      	ldr	r2, [r3, #16]
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b8:	b2d2      	uxtb	r2, r2
 80074ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c0:	1c5a      	adds	r2, r3, #1
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074ca:	3b01      	subs	r3, #1
 80074cc:	b29a      	uxth	r2, r3
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074d6:	b29b      	uxth	r3, r3
 80074d8:	3b01      	subs	r3, #1
 80074da:	b29a      	uxth	r2, r3
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	855a      	strh	r2, [r3, #42]	; 0x2a
 80074e0:	e0b8      	b.n	8007654 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80074e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074e4:	9300      	str	r3, [sp, #0]
 80074e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074e8:	2200      	movs	r2, #0
 80074ea:	4966      	ldr	r1, [pc, #408]	; (8007684 <HAL_I2C_Master_Receive+0x448>)
 80074ec:	68f8      	ldr	r0, [r7, #12]
 80074ee:	f000 fa1b 	bl	8007928 <I2C_WaitOnFlagUntilTimeout>
 80074f2:	4603      	mov	r3, r0
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d001      	beq.n	80074fc <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80074f8:	2301      	movs	r3, #1
 80074fa:	e0bf      	b.n	800767c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	681a      	ldr	r2, [r3, #0]
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800750a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	691a      	ldr	r2, [r3, #16]
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007516:	b2d2      	uxtb	r2, r2
 8007518:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800751e:	1c5a      	adds	r2, r3, #1
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007528:	3b01      	subs	r3, #1
 800752a:	b29a      	uxth	r2, r3
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007534:	b29b      	uxth	r3, r3
 8007536:	3b01      	subs	r3, #1
 8007538:	b29a      	uxth	r2, r3
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800753e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007540:	9300      	str	r3, [sp, #0]
 8007542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007544:	2200      	movs	r2, #0
 8007546:	494f      	ldr	r1, [pc, #316]	; (8007684 <HAL_I2C_Master_Receive+0x448>)
 8007548:	68f8      	ldr	r0, [r7, #12]
 800754a:	f000 f9ed 	bl	8007928 <I2C_WaitOnFlagUntilTimeout>
 800754e:	4603      	mov	r3, r0
 8007550:	2b00      	cmp	r3, #0
 8007552:	d001      	beq.n	8007558 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8007554:	2301      	movs	r3, #1
 8007556:	e091      	b.n	800767c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	681a      	ldr	r2, [r3, #0]
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007566:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	691a      	ldr	r2, [r3, #16]
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007572:	b2d2      	uxtb	r2, r2
 8007574:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800757a:	1c5a      	adds	r2, r3, #1
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007584:	3b01      	subs	r3, #1
 8007586:	b29a      	uxth	r2, r3
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007590:	b29b      	uxth	r3, r3
 8007592:	3b01      	subs	r3, #1
 8007594:	b29a      	uxth	r2, r3
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	691a      	ldr	r2, [r3, #16]
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a4:	b2d2      	uxtb	r2, r2
 80075a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ac:	1c5a      	adds	r2, r3, #1
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075b6:	3b01      	subs	r3, #1
 80075b8:	b29a      	uxth	r2, r3
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075c2:	b29b      	uxth	r3, r3
 80075c4:	3b01      	subs	r3, #1
 80075c6:	b29a      	uxth	r2, r3
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	855a      	strh	r2, [r3, #42]	; 0x2a
 80075cc:	e042      	b.n	8007654 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80075ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80075d2:	68f8      	ldr	r0, [r7, #12]
 80075d4:	f000 fb00 	bl	8007bd8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80075d8:	4603      	mov	r3, r0
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d001      	beq.n	80075e2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80075de:	2301      	movs	r3, #1
 80075e0:	e04c      	b.n	800767c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	691a      	ldr	r2, [r3, #16]
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ec:	b2d2      	uxtb	r2, r2
 80075ee:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f4:	1c5a      	adds	r2, r3, #1
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075fe:	3b01      	subs	r3, #1
 8007600:	b29a      	uxth	r2, r3
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800760a:	b29b      	uxth	r3, r3
 800760c:	3b01      	subs	r3, #1
 800760e:	b29a      	uxth	r2, r3
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	695b      	ldr	r3, [r3, #20]
 800761a:	f003 0304 	and.w	r3, r3, #4
 800761e:	2b04      	cmp	r3, #4
 8007620:	d118      	bne.n	8007654 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	691a      	ldr	r2, [r3, #16]
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800762c:	b2d2      	uxtb	r2, r2
 800762e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007634:	1c5a      	adds	r2, r3, #1
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800763e:	3b01      	subs	r3, #1
 8007640:	b29a      	uxth	r2, r3
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800764a:	b29b      	uxth	r3, r3
 800764c:	3b01      	subs	r3, #1
 800764e:	b29a      	uxth	r2, r3
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007658:	2b00      	cmp	r3, #0
 800765a:	f47f aec2 	bne.w	80073e2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	2220      	movs	r2, #32
 8007662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	2200      	movs	r2, #0
 800766a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2200      	movs	r2, #0
 8007672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007676:	2300      	movs	r3, #0
 8007678:	e000      	b.n	800767c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800767a:	2302      	movs	r3, #2
  }
}
 800767c:	4618      	mov	r0, r3
 800767e:	3728      	adds	r7, #40	; 0x28
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}
 8007684:	00010004 	.word	0x00010004

08007688 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b088      	sub	sp, #32
 800768c:	af02      	add	r7, sp, #8
 800768e:	60f8      	str	r0, [r7, #12]
 8007690:	607a      	str	r2, [r7, #4]
 8007692:	603b      	str	r3, [r7, #0]
 8007694:	460b      	mov	r3, r1
 8007696:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800769c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800769e:	697b      	ldr	r3, [r7, #20]
 80076a0:	2b08      	cmp	r3, #8
 80076a2:	d006      	beq.n	80076b2 <I2C_MasterRequestWrite+0x2a>
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	2b01      	cmp	r3, #1
 80076a8:	d003      	beq.n	80076b2 <I2C_MasterRequestWrite+0x2a>
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80076b0:	d108      	bne.n	80076c4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	681a      	ldr	r2, [r3, #0]
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80076c0:	601a      	str	r2, [r3, #0]
 80076c2:	e00b      	b.n	80076dc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076c8:	2b12      	cmp	r3, #18
 80076ca:	d107      	bne.n	80076dc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	681a      	ldr	r2, [r3, #0]
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80076da:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	9300      	str	r3, [sp, #0]
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2200      	movs	r2, #0
 80076e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80076e8:	68f8      	ldr	r0, [r7, #12]
 80076ea:	f000 f91d 	bl	8007928 <I2C_WaitOnFlagUntilTimeout>
 80076ee:	4603      	mov	r3, r0
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d00d      	beq.n	8007710 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007702:	d103      	bne.n	800770c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	f44f 7200 	mov.w	r2, #512	; 0x200
 800770a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800770c:	2303      	movs	r3, #3
 800770e:	e035      	b.n	800777c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	691b      	ldr	r3, [r3, #16]
 8007714:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007718:	d108      	bne.n	800772c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800771a:	897b      	ldrh	r3, [r7, #10]
 800771c:	b2db      	uxtb	r3, r3
 800771e:	461a      	mov	r2, r3
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007728:	611a      	str	r2, [r3, #16]
 800772a:	e01b      	b.n	8007764 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800772c:	897b      	ldrh	r3, [r7, #10]
 800772e:	11db      	asrs	r3, r3, #7
 8007730:	b2db      	uxtb	r3, r3
 8007732:	f003 0306 	and.w	r3, r3, #6
 8007736:	b2db      	uxtb	r3, r3
 8007738:	f063 030f 	orn	r3, r3, #15
 800773c:	b2da      	uxtb	r2, r3
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	687a      	ldr	r2, [r7, #4]
 8007748:	490e      	ldr	r1, [pc, #56]	; (8007784 <I2C_MasterRequestWrite+0xfc>)
 800774a:	68f8      	ldr	r0, [r7, #12]
 800774c:	f000 f943 	bl	80079d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007750:	4603      	mov	r3, r0
 8007752:	2b00      	cmp	r3, #0
 8007754:	d001      	beq.n	800775a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8007756:	2301      	movs	r3, #1
 8007758:	e010      	b.n	800777c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800775a:	897b      	ldrh	r3, [r7, #10]
 800775c:	b2da      	uxtb	r2, r3
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	687a      	ldr	r2, [r7, #4]
 8007768:	4907      	ldr	r1, [pc, #28]	; (8007788 <I2C_MasterRequestWrite+0x100>)
 800776a:	68f8      	ldr	r0, [r7, #12]
 800776c:	f000 f933 	bl	80079d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007770:	4603      	mov	r3, r0
 8007772:	2b00      	cmp	r3, #0
 8007774:	d001      	beq.n	800777a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8007776:	2301      	movs	r3, #1
 8007778:	e000      	b.n	800777c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800777a:	2300      	movs	r3, #0
}
 800777c:	4618      	mov	r0, r3
 800777e:	3718      	adds	r7, #24
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}
 8007784:	00010008 	.word	0x00010008
 8007788:	00010002 	.word	0x00010002

0800778c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b088      	sub	sp, #32
 8007790:	af02      	add	r7, sp, #8
 8007792:	60f8      	str	r0, [r7, #12]
 8007794:	607a      	str	r2, [r7, #4]
 8007796:	603b      	str	r3, [r7, #0]
 8007798:	460b      	mov	r3, r1
 800779a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077a0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	681a      	ldr	r2, [r3, #0]
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80077b0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	2b08      	cmp	r3, #8
 80077b6:	d006      	beq.n	80077c6 <I2C_MasterRequestRead+0x3a>
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	2b01      	cmp	r3, #1
 80077bc:	d003      	beq.n	80077c6 <I2C_MasterRequestRead+0x3a>
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80077c4:	d108      	bne.n	80077d8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	681a      	ldr	r2, [r3, #0]
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80077d4:	601a      	str	r2, [r3, #0]
 80077d6:	e00b      	b.n	80077f0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077dc:	2b11      	cmp	r3, #17
 80077de:	d107      	bne.n	80077f0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	681a      	ldr	r2, [r3, #0]
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80077ee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	9300      	str	r3, [sp, #0]
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2200      	movs	r2, #0
 80077f8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80077fc:	68f8      	ldr	r0, [r7, #12]
 80077fe:	f000 f893 	bl	8007928 <I2C_WaitOnFlagUntilTimeout>
 8007802:	4603      	mov	r3, r0
 8007804:	2b00      	cmp	r3, #0
 8007806:	d00d      	beq.n	8007824 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007812:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007816:	d103      	bne.n	8007820 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800781e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007820:	2303      	movs	r3, #3
 8007822:	e079      	b.n	8007918 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	691b      	ldr	r3, [r3, #16]
 8007828:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800782c:	d108      	bne.n	8007840 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800782e:	897b      	ldrh	r3, [r7, #10]
 8007830:	b2db      	uxtb	r3, r3
 8007832:	f043 0301 	orr.w	r3, r3, #1
 8007836:	b2da      	uxtb	r2, r3
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	611a      	str	r2, [r3, #16]
 800783e:	e05f      	b.n	8007900 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007840:	897b      	ldrh	r3, [r7, #10]
 8007842:	11db      	asrs	r3, r3, #7
 8007844:	b2db      	uxtb	r3, r3
 8007846:	f003 0306 	and.w	r3, r3, #6
 800784a:	b2db      	uxtb	r3, r3
 800784c:	f063 030f 	orn	r3, r3, #15
 8007850:	b2da      	uxtb	r2, r3
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	687a      	ldr	r2, [r7, #4]
 800785c:	4930      	ldr	r1, [pc, #192]	; (8007920 <I2C_MasterRequestRead+0x194>)
 800785e:	68f8      	ldr	r0, [r7, #12]
 8007860:	f000 f8b9 	bl	80079d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007864:	4603      	mov	r3, r0
 8007866:	2b00      	cmp	r3, #0
 8007868:	d001      	beq.n	800786e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800786a:	2301      	movs	r3, #1
 800786c:	e054      	b.n	8007918 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800786e:	897b      	ldrh	r3, [r7, #10]
 8007870:	b2da      	uxtb	r2, r3
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	687a      	ldr	r2, [r7, #4]
 800787c:	4929      	ldr	r1, [pc, #164]	; (8007924 <I2C_MasterRequestRead+0x198>)
 800787e:	68f8      	ldr	r0, [r7, #12]
 8007880:	f000 f8a9 	bl	80079d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007884:	4603      	mov	r3, r0
 8007886:	2b00      	cmp	r3, #0
 8007888:	d001      	beq.n	800788e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800788a:	2301      	movs	r3, #1
 800788c:	e044      	b.n	8007918 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800788e:	2300      	movs	r3, #0
 8007890:	613b      	str	r3, [r7, #16]
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	695b      	ldr	r3, [r3, #20]
 8007898:	613b      	str	r3, [r7, #16]
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	699b      	ldr	r3, [r3, #24]
 80078a0:	613b      	str	r3, [r7, #16]
 80078a2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	681a      	ldr	r2, [r3, #0]
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80078b2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	9300      	str	r3, [sp, #0]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2200      	movs	r2, #0
 80078bc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80078c0:	68f8      	ldr	r0, [r7, #12]
 80078c2:	f000 f831 	bl	8007928 <I2C_WaitOnFlagUntilTimeout>
 80078c6:	4603      	mov	r3, r0
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d00d      	beq.n	80078e8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078da:	d103      	bne.n	80078e4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80078e2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80078e4:	2303      	movs	r3, #3
 80078e6:	e017      	b.n	8007918 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80078e8:	897b      	ldrh	r3, [r7, #10]
 80078ea:	11db      	asrs	r3, r3, #7
 80078ec:	b2db      	uxtb	r3, r3
 80078ee:	f003 0306 	and.w	r3, r3, #6
 80078f2:	b2db      	uxtb	r3, r3
 80078f4:	f063 030e 	orn	r3, r3, #14
 80078f8:	b2da      	uxtb	r2, r3
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	687a      	ldr	r2, [r7, #4]
 8007904:	4907      	ldr	r1, [pc, #28]	; (8007924 <I2C_MasterRequestRead+0x198>)
 8007906:	68f8      	ldr	r0, [r7, #12]
 8007908:	f000 f865 	bl	80079d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800790c:	4603      	mov	r3, r0
 800790e:	2b00      	cmp	r3, #0
 8007910:	d001      	beq.n	8007916 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8007912:	2301      	movs	r3, #1
 8007914:	e000      	b.n	8007918 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8007916:	2300      	movs	r3, #0
}
 8007918:	4618      	mov	r0, r3
 800791a:	3718      	adds	r7, #24
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}
 8007920:	00010008 	.word	0x00010008
 8007924:	00010002 	.word	0x00010002

08007928 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b084      	sub	sp, #16
 800792c:	af00      	add	r7, sp, #0
 800792e:	60f8      	str	r0, [r7, #12]
 8007930:	60b9      	str	r1, [r7, #8]
 8007932:	603b      	str	r3, [r7, #0]
 8007934:	4613      	mov	r3, r2
 8007936:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007938:	e025      	b.n	8007986 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007940:	d021      	beq.n	8007986 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007942:	f7fd ff71 	bl	8005828 <HAL_GetTick>
 8007946:	4602      	mov	r2, r0
 8007948:	69bb      	ldr	r3, [r7, #24]
 800794a:	1ad3      	subs	r3, r2, r3
 800794c:	683a      	ldr	r2, [r7, #0]
 800794e:	429a      	cmp	r2, r3
 8007950:	d302      	bcc.n	8007958 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d116      	bne.n	8007986 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	2200      	movs	r2, #0
 800795c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	2220      	movs	r2, #32
 8007962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	2200      	movs	r2, #0
 800796a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007972:	f043 0220 	orr.w	r2, r3, #32
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	2200      	movs	r2, #0
 800797e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007982:	2301      	movs	r3, #1
 8007984:	e023      	b.n	80079ce <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	0c1b      	lsrs	r3, r3, #16
 800798a:	b2db      	uxtb	r3, r3
 800798c:	2b01      	cmp	r3, #1
 800798e:	d10d      	bne.n	80079ac <I2C_WaitOnFlagUntilTimeout+0x84>
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	695b      	ldr	r3, [r3, #20]
 8007996:	43da      	mvns	r2, r3
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	4013      	ands	r3, r2
 800799c:	b29b      	uxth	r3, r3
 800799e:	2b00      	cmp	r3, #0
 80079a0:	bf0c      	ite	eq
 80079a2:	2301      	moveq	r3, #1
 80079a4:	2300      	movne	r3, #0
 80079a6:	b2db      	uxtb	r3, r3
 80079a8:	461a      	mov	r2, r3
 80079aa:	e00c      	b.n	80079c6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	699b      	ldr	r3, [r3, #24]
 80079b2:	43da      	mvns	r2, r3
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	4013      	ands	r3, r2
 80079b8:	b29b      	uxth	r3, r3
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	bf0c      	ite	eq
 80079be:	2301      	moveq	r3, #1
 80079c0:	2300      	movne	r3, #0
 80079c2:	b2db      	uxtb	r3, r3
 80079c4:	461a      	mov	r2, r3
 80079c6:	79fb      	ldrb	r3, [r7, #7]
 80079c8:	429a      	cmp	r2, r3
 80079ca:	d0b6      	beq.n	800793a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80079cc:	2300      	movs	r3, #0
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	3710      	adds	r7, #16
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}

080079d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80079d6:	b580      	push	{r7, lr}
 80079d8:	b084      	sub	sp, #16
 80079da:	af00      	add	r7, sp, #0
 80079dc:	60f8      	str	r0, [r7, #12]
 80079de:	60b9      	str	r1, [r7, #8]
 80079e0:	607a      	str	r2, [r7, #4]
 80079e2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80079e4:	e051      	b.n	8007a8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	695b      	ldr	r3, [r3, #20]
 80079ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80079f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079f4:	d123      	bne.n	8007a3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	681a      	ldr	r2, [r3, #0]
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a04:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007a0e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	2200      	movs	r2, #0
 8007a14:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	2220      	movs	r2, #32
 8007a1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	2200      	movs	r2, #0
 8007a22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a2a:	f043 0204 	orr.w	r2, r3, #4
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	2200      	movs	r2, #0
 8007a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	e046      	b.n	8007acc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a44:	d021      	beq.n	8007a8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a46:	f7fd feef 	bl	8005828 <HAL_GetTick>
 8007a4a:	4602      	mov	r2, r0
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	1ad3      	subs	r3, r2, r3
 8007a50:	687a      	ldr	r2, [r7, #4]
 8007a52:	429a      	cmp	r2, r3
 8007a54:	d302      	bcc.n	8007a5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d116      	bne.n	8007a8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	2200      	movs	r2, #0
 8007a60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	2220      	movs	r2, #32
 8007a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a76:	f043 0220 	orr.w	r2, r3, #32
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2200      	movs	r2, #0
 8007a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007a86:	2301      	movs	r3, #1
 8007a88:	e020      	b.n	8007acc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	0c1b      	lsrs	r3, r3, #16
 8007a8e:	b2db      	uxtb	r3, r3
 8007a90:	2b01      	cmp	r3, #1
 8007a92:	d10c      	bne.n	8007aae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	695b      	ldr	r3, [r3, #20]
 8007a9a:	43da      	mvns	r2, r3
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	4013      	ands	r3, r2
 8007aa0:	b29b      	uxth	r3, r3
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	bf14      	ite	ne
 8007aa6:	2301      	movne	r3, #1
 8007aa8:	2300      	moveq	r3, #0
 8007aaa:	b2db      	uxtb	r3, r3
 8007aac:	e00b      	b.n	8007ac6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	699b      	ldr	r3, [r3, #24]
 8007ab4:	43da      	mvns	r2, r3
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	4013      	ands	r3, r2
 8007aba:	b29b      	uxth	r3, r3
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	bf14      	ite	ne
 8007ac0:	2301      	movne	r3, #1
 8007ac2:	2300      	moveq	r3, #0
 8007ac4:	b2db      	uxtb	r3, r3
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d18d      	bne.n	80079e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007aca:	2300      	movs	r3, #0
}
 8007acc:	4618      	mov	r0, r3
 8007ace:	3710      	adds	r7, #16
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}

08007ad4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b084      	sub	sp, #16
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	60f8      	str	r0, [r7, #12]
 8007adc:	60b9      	str	r1, [r7, #8]
 8007ade:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007ae0:	e02d      	b.n	8007b3e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007ae2:	68f8      	ldr	r0, [r7, #12]
 8007ae4:	f000 f8ce 	bl	8007c84 <I2C_IsAcknowledgeFailed>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d001      	beq.n	8007af2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007aee:	2301      	movs	r3, #1
 8007af0:	e02d      	b.n	8007b4e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007af8:	d021      	beq.n	8007b3e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007afa:	f7fd fe95 	bl	8005828 <HAL_GetTick>
 8007afe:	4602      	mov	r2, r0
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	1ad3      	subs	r3, r2, r3
 8007b04:	68ba      	ldr	r2, [r7, #8]
 8007b06:	429a      	cmp	r2, r3
 8007b08:	d302      	bcc.n	8007b10 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d116      	bne.n	8007b3e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	2200      	movs	r2, #0
 8007b14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	2220      	movs	r2, #32
 8007b1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	2200      	movs	r2, #0
 8007b22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b2a:	f043 0220 	orr.w	r2, r3, #32
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	2200      	movs	r2, #0
 8007b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	e007      	b.n	8007b4e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	695b      	ldr	r3, [r3, #20]
 8007b44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b48:	2b80      	cmp	r3, #128	; 0x80
 8007b4a:	d1ca      	bne.n	8007ae2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007b4c:	2300      	movs	r3, #0
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	3710      	adds	r7, #16
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}

08007b56 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007b56:	b580      	push	{r7, lr}
 8007b58:	b084      	sub	sp, #16
 8007b5a:	af00      	add	r7, sp, #0
 8007b5c:	60f8      	str	r0, [r7, #12]
 8007b5e:	60b9      	str	r1, [r7, #8]
 8007b60:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007b62:	e02d      	b.n	8007bc0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007b64:	68f8      	ldr	r0, [r7, #12]
 8007b66:	f000 f88d 	bl	8007c84 <I2C_IsAcknowledgeFailed>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d001      	beq.n	8007b74 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007b70:	2301      	movs	r3, #1
 8007b72:	e02d      	b.n	8007bd0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b7a:	d021      	beq.n	8007bc0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b7c:	f7fd fe54 	bl	8005828 <HAL_GetTick>
 8007b80:	4602      	mov	r2, r0
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	1ad3      	subs	r3, r2, r3
 8007b86:	68ba      	ldr	r2, [r7, #8]
 8007b88:	429a      	cmp	r2, r3
 8007b8a:	d302      	bcc.n	8007b92 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d116      	bne.n	8007bc0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	2200      	movs	r2, #0
 8007b96:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	2220      	movs	r2, #32
 8007b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bac:	f043 0220 	orr.w	r2, r3, #32
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	e007      	b.n	8007bd0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	695b      	ldr	r3, [r3, #20]
 8007bc6:	f003 0304 	and.w	r3, r3, #4
 8007bca:	2b04      	cmp	r3, #4
 8007bcc:	d1ca      	bne.n	8007b64 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007bce:	2300      	movs	r3, #0
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	3710      	adds	r7, #16
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bd80      	pop	{r7, pc}

08007bd8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b084      	sub	sp, #16
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	60f8      	str	r0, [r7, #12]
 8007be0:	60b9      	str	r1, [r7, #8]
 8007be2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007be4:	e042      	b.n	8007c6c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	695b      	ldr	r3, [r3, #20]
 8007bec:	f003 0310 	and.w	r3, r3, #16
 8007bf0:	2b10      	cmp	r3, #16
 8007bf2:	d119      	bne.n	8007c28 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f06f 0210 	mvn.w	r2, #16
 8007bfc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	2200      	movs	r2, #0
 8007c02:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	2220      	movs	r2, #32
 8007c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007c24:	2301      	movs	r3, #1
 8007c26:	e029      	b.n	8007c7c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c28:	f7fd fdfe 	bl	8005828 <HAL_GetTick>
 8007c2c:	4602      	mov	r2, r0
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	1ad3      	subs	r3, r2, r3
 8007c32:	68ba      	ldr	r2, [r7, #8]
 8007c34:	429a      	cmp	r2, r3
 8007c36:	d302      	bcc.n	8007c3e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d116      	bne.n	8007c6c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	2200      	movs	r2, #0
 8007c42:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2220      	movs	r2, #32
 8007c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c58:	f043 0220 	orr.w	r2, r3, #32
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	2200      	movs	r2, #0
 8007c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007c68:	2301      	movs	r3, #1
 8007c6a:	e007      	b.n	8007c7c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	695b      	ldr	r3, [r3, #20]
 8007c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c76:	2b40      	cmp	r3, #64	; 0x40
 8007c78:	d1b5      	bne.n	8007be6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007c7a:	2300      	movs	r3, #0
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	3710      	adds	r7, #16
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}

08007c84 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b083      	sub	sp, #12
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	695b      	ldr	r3, [r3, #20]
 8007c92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c9a:	d11b      	bne.n	8007cd4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007ca4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2220      	movs	r2, #32
 8007cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2200      	movs	r2, #0
 8007cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cc0:	f043 0204 	orr.w	r2, r3, #4
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2200      	movs	r2, #0
 8007ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007cd0:	2301      	movs	r3, #1
 8007cd2:	e000      	b.n	8007cd6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007cd4:	2300      	movs	r3, #0
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	370c      	adds	r7, #12
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce0:	4770      	bx	lr
	...

08007ce4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b082      	sub	sp, #8
 8007ce8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8007cea:	2300      	movs	r3, #0
 8007cec:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8007cee:	2300      	movs	r3, #0
 8007cf0:	603b      	str	r3, [r7, #0]
 8007cf2:	4b20      	ldr	r3, [pc, #128]	; (8007d74 <HAL_PWREx_EnableOverDrive+0x90>)
 8007cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cf6:	4a1f      	ldr	r2, [pc, #124]	; (8007d74 <HAL_PWREx_EnableOverDrive+0x90>)
 8007cf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007cfc:	6413      	str	r3, [r2, #64]	; 0x40
 8007cfe:	4b1d      	ldr	r3, [pc, #116]	; (8007d74 <HAL_PWREx_EnableOverDrive+0x90>)
 8007d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d06:	603b      	str	r3, [r7, #0]
 8007d08:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8007d0a:	4b1b      	ldr	r3, [pc, #108]	; (8007d78 <HAL_PWREx_EnableOverDrive+0x94>)
 8007d0c:	2201      	movs	r2, #1
 8007d0e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007d10:	f7fd fd8a 	bl	8005828 <HAL_GetTick>
 8007d14:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007d16:	e009      	b.n	8007d2c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007d18:	f7fd fd86 	bl	8005828 <HAL_GetTick>
 8007d1c:	4602      	mov	r2, r0
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	1ad3      	subs	r3, r2, r3
 8007d22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007d26:	d901      	bls.n	8007d2c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8007d28:	2303      	movs	r3, #3
 8007d2a:	e01f      	b.n	8007d6c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007d2c:	4b13      	ldr	r3, [pc, #76]	; (8007d7c <HAL_PWREx_EnableOverDrive+0x98>)
 8007d2e:	685b      	ldr	r3, [r3, #4]
 8007d30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d38:	d1ee      	bne.n	8007d18 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8007d3a:	4b11      	ldr	r3, [pc, #68]	; (8007d80 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007d3c:	2201      	movs	r2, #1
 8007d3e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007d40:	f7fd fd72 	bl	8005828 <HAL_GetTick>
 8007d44:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007d46:	e009      	b.n	8007d5c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007d48:	f7fd fd6e 	bl	8005828 <HAL_GetTick>
 8007d4c:	4602      	mov	r2, r0
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	1ad3      	subs	r3, r2, r3
 8007d52:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007d56:	d901      	bls.n	8007d5c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8007d58:	2303      	movs	r3, #3
 8007d5a:	e007      	b.n	8007d6c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007d5c:	4b07      	ldr	r3, [pc, #28]	; (8007d7c <HAL_PWREx_EnableOverDrive+0x98>)
 8007d5e:	685b      	ldr	r3, [r3, #4]
 8007d60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007d68:	d1ee      	bne.n	8007d48 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8007d6a:	2300      	movs	r3, #0
}
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	3708      	adds	r7, #8
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}
 8007d74:	40023800 	.word	0x40023800
 8007d78:	420e0040 	.word	0x420e0040
 8007d7c:	40007000 	.word	0x40007000
 8007d80:	420e0044 	.word	0x420e0044

08007d84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b084      	sub	sp, #16
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
 8007d8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d101      	bne.n	8007d98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007d94:	2301      	movs	r3, #1
 8007d96:	e0cc      	b.n	8007f32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007d98:	4b68      	ldr	r3, [pc, #416]	; (8007f3c <HAL_RCC_ClockConfig+0x1b8>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f003 030f 	and.w	r3, r3, #15
 8007da0:	683a      	ldr	r2, [r7, #0]
 8007da2:	429a      	cmp	r2, r3
 8007da4:	d90c      	bls.n	8007dc0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007da6:	4b65      	ldr	r3, [pc, #404]	; (8007f3c <HAL_RCC_ClockConfig+0x1b8>)
 8007da8:	683a      	ldr	r2, [r7, #0]
 8007daa:	b2d2      	uxtb	r2, r2
 8007dac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007dae:	4b63      	ldr	r3, [pc, #396]	; (8007f3c <HAL_RCC_ClockConfig+0x1b8>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f003 030f 	and.w	r3, r3, #15
 8007db6:	683a      	ldr	r2, [r7, #0]
 8007db8:	429a      	cmp	r2, r3
 8007dba:	d001      	beq.n	8007dc0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	e0b8      	b.n	8007f32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f003 0302 	and.w	r3, r3, #2
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d020      	beq.n	8007e0e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f003 0304 	and.w	r3, r3, #4
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d005      	beq.n	8007de4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007dd8:	4b59      	ldr	r3, [pc, #356]	; (8007f40 <HAL_RCC_ClockConfig+0x1bc>)
 8007dda:	689b      	ldr	r3, [r3, #8]
 8007ddc:	4a58      	ldr	r2, [pc, #352]	; (8007f40 <HAL_RCC_ClockConfig+0x1bc>)
 8007dde:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007de2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f003 0308 	and.w	r3, r3, #8
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d005      	beq.n	8007dfc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007df0:	4b53      	ldr	r3, [pc, #332]	; (8007f40 <HAL_RCC_ClockConfig+0x1bc>)
 8007df2:	689b      	ldr	r3, [r3, #8]
 8007df4:	4a52      	ldr	r2, [pc, #328]	; (8007f40 <HAL_RCC_ClockConfig+0x1bc>)
 8007df6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007dfa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007dfc:	4b50      	ldr	r3, [pc, #320]	; (8007f40 <HAL_RCC_ClockConfig+0x1bc>)
 8007dfe:	689b      	ldr	r3, [r3, #8]
 8007e00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	689b      	ldr	r3, [r3, #8]
 8007e08:	494d      	ldr	r1, [pc, #308]	; (8007f40 <HAL_RCC_ClockConfig+0x1bc>)
 8007e0a:	4313      	orrs	r3, r2
 8007e0c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f003 0301 	and.w	r3, r3, #1
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d044      	beq.n	8007ea4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	685b      	ldr	r3, [r3, #4]
 8007e1e:	2b01      	cmp	r3, #1
 8007e20:	d107      	bne.n	8007e32 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007e22:	4b47      	ldr	r3, [pc, #284]	; (8007f40 <HAL_RCC_ClockConfig+0x1bc>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d119      	bne.n	8007e62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007e2e:	2301      	movs	r3, #1
 8007e30:	e07f      	b.n	8007f32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	685b      	ldr	r3, [r3, #4]
 8007e36:	2b02      	cmp	r3, #2
 8007e38:	d003      	beq.n	8007e42 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007e3e:	2b03      	cmp	r3, #3
 8007e40:	d107      	bne.n	8007e52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007e42:	4b3f      	ldr	r3, [pc, #252]	; (8007f40 <HAL_RCC_ClockConfig+0x1bc>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d109      	bne.n	8007e62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007e4e:	2301      	movs	r3, #1
 8007e50:	e06f      	b.n	8007f32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e52:	4b3b      	ldr	r3, [pc, #236]	; (8007f40 <HAL_RCC_ClockConfig+0x1bc>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f003 0302 	and.w	r3, r3, #2
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d101      	bne.n	8007e62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007e5e:	2301      	movs	r3, #1
 8007e60:	e067      	b.n	8007f32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007e62:	4b37      	ldr	r3, [pc, #220]	; (8007f40 <HAL_RCC_ClockConfig+0x1bc>)
 8007e64:	689b      	ldr	r3, [r3, #8]
 8007e66:	f023 0203 	bic.w	r2, r3, #3
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	685b      	ldr	r3, [r3, #4]
 8007e6e:	4934      	ldr	r1, [pc, #208]	; (8007f40 <HAL_RCC_ClockConfig+0x1bc>)
 8007e70:	4313      	orrs	r3, r2
 8007e72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007e74:	f7fd fcd8 	bl	8005828 <HAL_GetTick>
 8007e78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e7a:	e00a      	b.n	8007e92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007e7c:	f7fd fcd4 	bl	8005828 <HAL_GetTick>
 8007e80:	4602      	mov	r2, r0
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	1ad3      	subs	r3, r2, r3
 8007e86:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d901      	bls.n	8007e92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007e8e:	2303      	movs	r3, #3
 8007e90:	e04f      	b.n	8007f32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e92:	4b2b      	ldr	r3, [pc, #172]	; (8007f40 <HAL_RCC_ClockConfig+0x1bc>)
 8007e94:	689b      	ldr	r3, [r3, #8]
 8007e96:	f003 020c 	and.w	r2, r3, #12
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	685b      	ldr	r3, [r3, #4]
 8007e9e:	009b      	lsls	r3, r3, #2
 8007ea0:	429a      	cmp	r2, r3
 8007ea2:	d1eb      	bne.n	8007e7c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007ea4:	4b25      	ldr	r3, [pc, #148]	; (8007f3c <HAL_RCC_ClockConfig+0x1b8>)
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f003 030f 	and.w	r3, r3, #15
 8007eac:	683a      	ldr	r2, [r7, #0]
 8007eae:	429a      	cmp	r2, r3
 8007eb0:	d20c      	bcs.n	8007ecc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007eb2:	4b22      	ldr	r3, [pc, #136]	; (8007f3c <HAL_RCC_ClockConfig+0x1b8>)
 8007eb4:	683a      	ldr	r2, [r7, #0]
 8007eb6:	b2d2      	uxtb	r2, r2
 8007eb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007eba:	4b20      	ldr	r3, [pc, #128]	; (8007f3c <HAL_RCC_ClockConfig+0x1b8>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f003 030f 	and.w	r3, r3, #15
 8007ec2:	683a      	ldr	r2, [r7, #0]
 8007ec4:	429a      	cmp	r2, r3
 8007ec6:	d001      	beq.n	8007ecc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007ec8:	2301      	movs	r3, #1
 8007eca:	e032      	b.n	8007f32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f003 0304 	and.w	r3, r3, #4
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d008      	beq.n	8007eea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007ed8:	4b19      	ldr	r3, [pc, #100]	; (8007f40 <HAL_RCC_ClockConfig+0x1bc>)
 8007eda:	689b      	ldr	r3, [r3, #8]
 8007edc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	68db      	ldr	r3, [r3, #12]
 8007ee4:	4916      	ldr	r1, [pc, #88]	; (8007f40 <HAL_RCC_ClockConfig+0x1bc>)
 8007ee6:	4313      	orrs	r3, r2
 8007ee8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f003 0308 	and.w	r3, r3, #8
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d009      	beq.n	8007f0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007ef6:	4b12      	ldr	r3, [pc, #72]	; (8007f40 <HAL_RCC_ClockConfig+0x1bc>)
 8007ef8:	689b      	ldr	r3, [r3, #8]
 8007efa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	691b      	ldr	r3, [r3, #16]
 8007f02:	00db      	lsls	r3, r3, #3
 8007f04:	490e      	ldr	r1, [pc, #56]	; (8007f40 <HAL_RCC_ClockConfig+0x1bc>)
 8007f06:	4313      	orrs	r3, r2
 8007f08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007f0a:	f000 f821 	bl	8007f50 <HAL_RCC_GetSysClockFreq>
 8007f0e:	4601      	mov	r1, r0
 8007f10:	4b0b      	ldr	r3, [pc, #44]	; (8007f40 <HAL_RCC_ClockConfig+0x1bc>)
 8007f12:	689b      	ldr	r3, [r3, #8]
 8007f14:	091b      	lsrs	r3, r3, #4
 8007f16:	f003 030f 	and.w	r3, r3, #15
 8007f1a:	4a0a      	ldr	r2, [pc, #40]	; (8007f44 <HAL_RCC_ClockConfig+0x1c0>)
 8007f1c:	5cd3      	ldrb	r3, [r2, r3]
 8007f1e:	fa21 f303 	lsr.w	r3, r1, r3
 8007f22:	4a09      	ldr	r2, [pc, #36]	; (8007f48 <HAL_RCC_ClockConfig+0x1c4>)
 8007f24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007f26:	4b09      	ldr	r3, [pc, #36]	; (8007f4c <HAL_RCC_ClockConfig+0x1c8>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f7fd fc38 	bl	80057a0 <HAL_InitTick>

  return HAL_OK;
 8007f30:	2300      	movs	r3, #0
}
 8007f32:	4618      	mov	r0, r3
 8007f34:	3710      	adds	r7, #16
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}
 8007f3a:	bf00      	nop
 8007f3c:	40023c00 	.word	0x40023c00
 8007f40:	40023800 	.word	0x40023800
 8007f44:	08016e88 	.word	0x08016e88
 8007f48:	20000000 	.word	0x20000000
 8007f4c:	20000004 	.word	0x20000004

08007f50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007f50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f52:	b085      	sub	sp, #20
 8007f54:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007f56:	2300      	movs	r3, #0
 8007f58:	607b      	str	r3, [r7, #4]
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	60fb      	str	r3, [r7, #12]
 8007f5e:	2300      	movs	r3, #0
 8007f60:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007f62:	2300      	movs	r3, #0
 8007f64:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007f66:	4b63      	ldr	r3, [pc, #396]	; (80080f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007f68:	689b      	ldr	r3, [r3, #8]
 8007f6a:	f003 030c 	and.w	r3, r3, #12
 8007f6e:	2b04      	cmp	r3, #4
 8007f70:	d007      	beq.n	8007f82 <HAL_RCC_GetSysClockFreq+0x32>
 8007f72:	2b08      	cmp	r3, #8
 8007f74:	d008      	beq.n	8007f88 <HAL_RCC_GetSysClockFreq+0x38>
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	f040 80b4 	bne.w	80080e4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007f7c:	4b5e      	ldr	r3, [pc, #376]	; (80080f8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8007f7e:	60bb      	str	r3, [r7, #8]
       break;
 8007f80:	e0b3      	b.n	80080ea <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007f82:	4b5d      	ldr	r3, [pc, #372]	; (80080f8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8007f84:	60bb      	str	r3, [r7, #8]
      break;
 8007f86:	e0b0      	b.n	80080ea <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007f88:	4b5a      	ldr	r3, [pc, #360]	; (80080f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007f8a:	685b      	ldr	r3, [r3, #4]
 8007f8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f90:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007f92:	4b58      	ldr	r3, [pc, #352]	; (80080f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007f94:	685b      	ldr	r3, [r3, #4]
 8007f96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d04a      	beq.n	8008034 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007f9e:	4b55      	ldr	r3, [pc, #340]	; (80080f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007fa0:	685b      	ldr	r3, [r3, #4]
 8007fa2:	099b      	lsrs	r3, r3, #6
 8007fa4:	f04f 0400 	mov.w	r4, #0
 8007fa8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007fac:	f04f 0200 	mov.w	r2, #0
 8007fb0:	ea03 0501 	and.w	r5, r3, r1
 8007fb4:	ea04 0602 	and.w	r6, r4, r2
 8007fb8:	4629      	mov	r1, r5
 8007fba:	4632      	mov	r2, r6
 8007fbc:	f04f 0300 	mov.w	r3, #0
 8007fc0:	f04f 0400 	mov.w	r4, #0
 8007fc4:	0154      	lsls	r4, r2, #5
 8007fc6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8007fca:	014b      	lsls	r3, r1, #5
 8007fcc:	4619      	mov	r1, r3
 8007fce:	4622      	mov	r2, r4
 8007fd0:	1b49      	subs	r1, r1, r5
 8007fd2:	eb62 0206 	sbc.w	r2, r2, r6
 8007fd6:	f04f 0300 	mov.w	r3, #0
 8007fda:	f04f 0400 	mov.w	r4, #0
 8007fde:	0194      	lsls	r4, r2, #6
 8007fe0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007fe4:	018b      	lsls	r3, r1, #6
 8007fe6:	1a5b      	subs	r3, r3, r1
 8007fe8:	eb64 0402 	sbc.w	r4, r4, r2
 8007fec:	f04f 0100 	mov.w	r1, #0
 8007ff0:	f04f 0200 	mov.w	r2, #0
 8007ff4:	00e2      	lsls	r2, r4, #3
 8007ff6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8007ffa:	00d9      	lsls	r1, r3, #3
 8007ffc:	460b      	mov	r3, r1
 8007ffe:	4614      	mov	r4, r2
 8008000:	195b      	adds	r3, r3, r5
 8008002:	eb44 0406 	adc.w	r4, r4, r6
 8008006:	f04f 0100 	mov.w	r1, #0
 800800a:	f04f 0200 	mov.w	r2, #0
 800800e:	02a2      	lsls	r2, r4, #10
 8008010:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8008014:	0299      	lsls	r1, r3, #10
 8008016:	460b      	mov	r3, r1
 8008018:	4614      	mov	r4, r2
 800801a:	4618      	mov	r0, r3
 800801c:	4621      	mov	r1, r4
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f04f 0400 	mov.w	r4, #0
 8008024:	461a      	mov	r2, r3
 8008026:	4623      	mov	r3, r4
 8008028:	f7f8 fe46 	bl	8000cb8 <__aeabi_uldivmod>
 800802c:	4603      	mov	r3, r0
 800802e:	460c      	mov	r4, r1
 8008030:	60fb      	str	r3, [r7, #12]
 8008032:	e049      	b.n	80080c8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008034:	4b2f      	ldr	r3, [pc, #188]	; (80080f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8008036:	685b      	ldr	r3, [r3, #4]
 8008038:	099b      	lsrs	r3, r3, #6
 800803a:	f04f 0400 	mov.w	r4, #0
 800803e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008042:	f04f 0200 	mov.w	r2, #0
 8008046:	ea03 0501 	and.w	r5, r3, r1
 800804a:	ea04 0602 	and.w	r6, r4, r2
 800804e:	4629      	mov	r1, r5
 8008050:	4632      	mov	r2, r6
 8008052:	f04f 0300 	mov.w	r3, #0
 8008056:	f04f 0400 	mov.w	r4, #0
 800805a:	0154      	lsls	r4, r2, #5
 800805c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008060:	014b      	lsls	r3, r1, #5
 8008062:	4619      	mov	r1, r3
 8008064:	4622      	mov	r2, r4
 8008066:	1b49      	subs	r1, r1, r5
 8008068:	eb62 0206 	sbc.w	r2, r2, r6
 800806c:	f04f 0300 	mov.w	r3, #0
 8008070:	f04f 0400 	mov.w	r4, #0
 8008074:	0194      	lsls	r4, r2, #6
 8008076:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800807a:	018b      	lsls	r3, r1, #6
 800807c:	1a5b      	subs	r3, r3, r1
 800807e:	eb64 0402 	sbc.w	r4, r4, r2
 8008082:	f04f 0100 	mov.w	r1, #0
 8008086:	f04f 0200 	mov.w	r2, #0
 800808a:	00e2      	lsls	r2, r4, #3
 800808c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8008090:	00d9      	lsls	r1, r3, #3
 8008092:	460b      	mov	r3, r1
 8008094:	4614      	mov	r4, r2
 8008096:	195b      	adds	r3, r3, r5
 8008098:	eb44 0406 	adc.w	r4, r4, r6
 800809c:	f04f 0100 	mov.w	r1, #0
 80080a0:	f04f 0200 	mov.w	r2, #0
 80080a4:	02a2      	lsls	r2, r4, #10
 80080a6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80080aa:	0299      	lsls	r1, r3, #10
 80080ac:	460b      	mov	r3, r1
 80080ae:	4614      	mov	r4, r2
 80080b0:	4618      	mov	r0, r3
 80080b2:	4621      	mov	r1, r4
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f04f 0400 	mov.w	r4, #0
 80080ba:	461a      	mov	r2, r3
 80080bc:	4623      	mov	r3, r4
 80080be:	f7f8 fdfb 	bl	8000cb8 <__aeabi_uldivmod>
 80080c2:	4603      	mov	r3, r0
 80080c4:	460c      	mov	r4, r1
 80080c6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80080c8:	4b0a      	ldr	r3, [pc, #40]	; (80080f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80080ca:	685b      	ldr	r3, [r3, #4]
 80080cc:	0c1b      	lsrs	r3, r3, #16
 80080ce:	f003 0303 	and.w	r3, r3, #3
 80080d2:	3301      	adds	r3, #1
 80080d4:	005b      	lsls	r3, r3, #1
 80080d6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80080d8:	68fa      	ldr	r2, [r7, #12]
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80080e0:	60bb      	str	r3, [r7, #8]
      break;
 80080e2:	e002      	b.n	80080ea <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80080e4:	4b04      	ldr	r3, [pc, #16]	; (80080f8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80080e6:	60bb      	str	r3, [r7, #8]
      break;
 80080e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80080ea:	68bb      	ldr	r3, [r7, #8]
}
 80080ec:	4618      	mov	r0, r3
 80080ee:	3714      	adds	r7, #20
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080f4:	40023800 	.word	0x40023800
 80080f8:	00f42400 	.word	0x00f42400

080080fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80080fc:	b480      	push	{r7}
 80080fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008100:	4b03      	ldr	r3, [pc, #12]	; (8008110 <HAL_RCC_GetHCLKFreq+0x14>)
 8008102:	681b      	ldr	r3, [r3, #0]
}
 8008104:	4618      	mov	r0, r3
 8008106:	46bd      	mov	sp, r7
 8008108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810c:	4770      	bx	lr
 800810e:	bf00      	nop
 8008110:	20000000 	.word	0x20000000

08008114 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008118:	f7ff fff0 	bl	80080fc <HAL_RCC_GetHCLKFreq>
 800811c:	4601      	mov	r1, r0
 800811e:	4b05      	ldr	r3, [pc, #20]	; (8008134 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008120:	689b      	ldr	r3, [r3, #8]
 8008122:	0a9b      	lsrs	r3, r3, #10
 8008124:	f003 0307 	and.w	r3, r3, #7
 8008128:	4a03      	ldr	r2, [pc, #12]	; (8008138 <HAL_RCC_GetPCLK1Freq+0x24>)
 800812a:	5cd3      	ldrb	r3, [r2, r3]
 800812c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008130:	4618      	mov	r0, r3
 8008132:	bd80      	pop	{r7, pc}
 8008134:	40023800 	.word	0x40023800
 8008138:	08016e98 	.word	0x08016e98

0800813c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008140:	f7ff ffdc 	bl	80080fc <HAL_RCC_GetHCLKFreq>
 8008144:	4601      	mov	r1, r0
 8008146:	4b05      	ldr	r3, [pc, #20]	; (800815c <HAL_RCC_GetPCLK2Freq+0x20>)
 8008148:	689b      	ldr	r3, [r3, #8]
 800814a:	0b5b      	lsrs	r3, r3, #13
 800814c:	f003 0307 	and.w	r3, r3, #7
 8008150:	4a03      	ldr	r2, [pc, #12]	; (8008160 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008152:	5cd3      	ldrb	r3, [r2, r3]
 8008154:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008158:	4618      	mov	r0, r3
 800815a:	bd80      	pop	{r7, pc}
 800815c:	40023800 	.word	0x40023800
 8008160:	08016e98 	.word	0x08016e98

08008164 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b088      	sub	sp, #32
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800816c:	2300      	movs	r3, #0
 800816e:	61fb      	str	r3, [r7, #28]
  uint32_t tmpreg1 = 0U;
 8008170:	2300      	movs	r3, #0
 8008172:	61bb      	str	r3, [r7, #24]
  uint32_t pllsaip = 0U;
 8008174:	2300      	movs	r3, #0
 8008176:	617b      	str	r3, [r7, #20]
  uint32_t pllsaiq = 0U;
 8008178:	2300      	movs	r3, #0
 800817a:	613b      	str	r3, [r7, #16]
  uint32_t pllsair = 0U;
 800817c:	2300      	movs	r3, #0
 800817e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*--------------------------- CLK48 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008188:	2b00      	cmp	r3, #0
 800818a:	d00a      	beq.n	80081a2 <HAL_RCCEx_PeriphCLKConfig+0x3e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800818c:	4b66      	ldr	r3, [pc, #408]	; (8008328 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800818e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008192:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800819a:	4963      	ldr	r1, [pc, #396]	; (8008328 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800819c:	4313      	orrs	r3, r2
 800819e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SDIO Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d00a      	beq.n	80081c4 <HAL_RCCEx_PeriphCLKConfig+0x60>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80081ae:	4b5e      	ldr	r3, [pc, #376]	; (8008328 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80081b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081b4:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081bc:	495a      	ldr	r1, [pc, #360]	; (8008328 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80081be:	4313      	orrs	r3, r2
 80081c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*------------------- Common configuration SAI/I2S -------------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f003 0301 	and.w	r3, r3, #1
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d10b      	bne.n	80081e8 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d105      	bne.n	80081e8 <HAL_RCCEx_PeriphCLKConfig+0x84>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d075      	beq.n	80082d4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80081e8:	4b50      	ldr	r3, [pc, #320]	; (800832c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80081ea:	2200      	movs	r2, #0
 80081ec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80081ee:	f7fd fb1b 	bl	8005828 <HAL_GetTick>
 80081f2:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80081f4:	e008      	b.n	8008208 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80081f6:	f7fd fb17 	bl	8005828 <HAL_GetTick>
 80081fa:	4602      	mov	r2, r0
 80081fc:	69fb      	ldr	r3, [r7, #28]
 80081fe:	1ad3      	subs	r3, r2, r3
 8008200:	2b02      	cmp	r3, #2
 8008202:	d901      	bls.n	8008208 <HAL_RCCEx_PeriphCLKConfig+0xa4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008204:	2303      	movs	r3, #3
 8008206:	e1dc      	b.n	80085c2 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008208:	4b47      	ldr	r3, [pc, #284]	; (8008328 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008210:	2b00      	cmp	r3, #0
 8008212:	d1f0      	bne.n	80081f6 <HAL_RCCEx_PeriphCLKConfig+0x92>
    }

    /*---------------------- I2S configuration -------------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f003 0301 	and.w	r3, r3, #1
 800821c:	2b00      	cmp	r3, #0
 800821e:	d009      	beq.n	8008234 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	685b      	ldr	r3, [r3, #4]
 8008224:	019a      	lsls	r2, r3, #6
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	689b      	ldr	r3, [r3, #8]
 800822a:	071b      	lsls	r3, r3, #28
 800822c:	493e      	ldr	r1, [pc, #248]	; (8008328 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800822e:	4313      	orrs	r3, r2
 8008230:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f003 0302 	and.w	r3, r3, #2
 800823c:	2b00      	cmp	r3, #0
 800823e:	d01f      	beq.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x11c>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008240:	4b39      	ldr	r3, [pc, #228]	; (8008328 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008242:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008246:	0f1b      	lsrs	r3, r3, #28
 8008248:	f003 0307 	and.w	r3, r3, #7
 800824c:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	685b      	ldr	r3, [r3, #4]
 8008252:	019a      	lsls	r2, r3, #6
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	68db      	ldr	r3, [r3, #12]
 8008258:	061b      	lsls	r3, r3, #24
 800825a:	431a      	orrs	r2, r3
 800825c:	69bb      	ldr	r3, [r7, #24]
 800825e:	071b      	lsls	r3, r3, #28
 8008260:	4931      	ldr	r1, [pc, #196]	; (8008328 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8008262:	4313      	orrs	r3, r2
 8008264:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008268:	4b2f      	ldr	r3, [pc, #188]	; (8008328 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800826a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800826e:	f023 021f 	bic.w	r2, r3, #31
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	6a1b      	ldr	r3, [r3, #32]
 8008276:	3b01      	subs	r3, #1
 8008278:	492b      	ldr	r1, [pc, #172]	; (8008328 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800827a:	4313      	orrs	r3, r2
 800827c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008288:	2b00      	cmp	r3, #0
 800828a:	d00d      	beq.n	80082a8 <HAL_RCCEx_PeriphCLKConfig+0x144>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	685b      	ldr	r3, [r3, #4]
 8008290:	019a      	lsls	r2, r3, #6
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	68db      	ldr	r3, [r3, #12]
 8008296:	061b      	lsls	r3, r3, #24
 8008298:	431a      	orrs	r2, r3
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	689b      	ldr	r3, [r3, #8]
 800829e:	071b      	lsls	r3, r3, #28
 80082a0:	4921      	ldr	r1, [pc, #132]	; (8008328 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80082a2:	4313      	orrs	r3, r2
 80082a4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80082a8:	4b20      	ldr	r3, [pc, #128]	; (800832c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80082aa:	2201      	movs	r2, #1
 80082ac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80082ae:	f7fd fabb 	bl	8005828 <HAL_GetTick>
 80082b2:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80082b4:	e008      	b.n	80082c8 <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80082b6:	f7fd fab7 	bl	8005828 <HAL_GetTick>
 80082ba:	4602      	mov	r2, r0
 80082bc:	69fb      	ldr	r3, [r7, #28]
 80082be:	1ad3      	subs	r3, r2, r3
 80082c0:	2b02      	cmp	r3, #2
 80082c2:	d901      	bls.n	80082c8 <HAL_RCCEx_PeriphCLKConfig+0x164>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80082c4:	2303      	movs	r3, #3
 80082c6:	e17c      	b.n	80085c2 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80082c8:	4b17      	ldr	r3, [pc, #92]	; (8008328 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d0f0      	beq.n	80082b6 <HAL_RCCEx_PeriphCLKConfig+0x152>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI, LTDC or CLK48 Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for these peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f003 0304 	and.w	r3, r3, #4
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d112      	bne.n	8008306 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d10c      	bne.n	8008306 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)             ||
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	f000 80ce 	beq.w	8008496 <HAL_RCCEx_PeriphCLKConfig+0x332>
      (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)))
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)          &&
 80082fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008302:	f040 80c8 	bne.w	8008496 <HAL_RCCEx_PeriphCLKConfig+0x332>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008306:	4b0a      	ldr	r3, [pc, #40]	; (8008330 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8008308:	2200      	movs	r2, #0
 800830a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800830c:	f7fd fa8c 	bl	8005828 <HAL_GetTick>
 8008310:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008312:	e00f      	b.n	8008334 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8008314:	f7fd fa88 	bl	8005828 <HAL_GetTick>
 8008318:	4602      	mov	r2, r0
 800831a:	69fb      	ldr	r3, [r7, #28]
 800831c:	1ad3      	subs	r3, r2, r3
 800831e:	2b02      	cmp	r3, #2
 8008320:	d908      	bls.n	8008334 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008322:	2303      	movs	r3, #3
 8008324:	e14d      	b.n	80085c2 <HAL_RCCEx_PeriphCLKConfig+0x45e>
 8008326:	bf00      	nop
 8008328:	40023800 	.word	0x40023800
 800832c:	42470068 	.word	0x42470068
 8008330:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008334:	4ba5      	ldr	r3, [pc, #660]	; (80085cc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800833c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008340:	d0e8      	beq.n	8008314 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f003 0304 	and.w	r3, r3, #4
 800834a:	2b00      	cmp	r3, #0
 800834c:	d02e      	beq.n	80083ac <HAL_RCCEx_PeriphCLKConfig+0x248>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800834e:	4b9f      	ldr	r3, [pc, #636]	; (80085cc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008350:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008354:	0c1b      	lsrs	r3, r3, #16
 8008356:	f003 0303 	and.w	r3, r3, #3
 800835a:	3301      	adds	r3, #1
 800835c:	005b      	lsls	r3, r3, #1
 800835e:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008360:	4b9a      	ldr	r3, [pc, #616]	; (80085cc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008366:	0f1b      	lsrs	r3, r3, #28
 8008368:	f003 0307 	and.w	r3, r3, #7
 800836c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, pllsair);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	691b      	ldr	r3, [r3, #16]
 8008372:	019a      	lsls	r2, r3, #6
 8008374:	697b      	ldr	r3, [r7, #20]
 8008376:	085b      	lsrs	r3, r3, #1
 8008378:	3b01      	subs	r3, #1
 800837a:	041b      	lsls	r3, r3, #16
 800837c:	431a      	orrs	r2, r3
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	699b      	ldr	r3, [r3, #24]
 8008382:	061b      	lsls	r3, r3, #24
 8008384:	431a      	orrs	r2, r3
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	071b      	lsls	r3, r3, #28
 800838a:	4990      	ldr	r1, [pc, #576]	; (80085cc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800838c:	4313      	orrs	r3, r2
 800838e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008392:	4b8e      	ldr	r3, [pc, #568]	; (80085cc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008394:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008398:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083a0:	3b01      	subs	r3, #1
 80083a2:	021b      	lsls	r3, r3, #8
 80083a4:	4989      	ldr	r1, [pc, #548]	; (80085cc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80083a6:	4313      	orrs	r3, r2
 80083a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f003 0308 	and.w	r3, r3, #8
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d02c      	beq.n	8008412 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80083b8:	4b84      	ldr	r3, [pc, #528]	; (80085cc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80083ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083be:	0c1b      	lsrs	r3, r3, #16
 80083c0:	f003 0303 	and.w	r3, r3, #3
 80083c4:	3301      	adds	r3, #1
 80083c6:	005b      	lsls	r3, r3, #1
 80083c8:	617b      	str	r3, [r7, #20]
      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80083ca:	4b80      	ldr	r3, [pc, #512]	; (80085cc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80083cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083d0:	0e1b      	lsrs	r3, r3, #24
 80083d2:	f003 030f 	and.w	r3, r3, #15
 80083d6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, pllsaip, pllsaiq, PeriphClkInit->PLLSAI.PLLSAIR);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	691b      	ldr	r3, [r3, #16]
 80083dc:	019a      	lsls	r2, r3, #6
 80083de:	697b      	ldr	r3, [r7, #20]
 80083e0:	085b      	lsrs	r3, r3, #1
 80083e2:	3b01      	subs	r3, #1
 80083e4:	041b      	lsls	r3, r3, #16
 80083e6:	431a      	orrs	r2, r3
 80083e8:	693b      	ldr	r3, [r7, #16]
 80083ea:	061b      	lsls	r3, r3, #24
 80083ec:	431a      	orrs	r2, r3
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	69db      	ldr	r3, [r3, #28]
 80083f2:	071b      	lsls	r3, r3, #28
 80083f4:	4975      	ldr	r1, [pc, #468]	; (80085cc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80083f6:	4313      	orrs	r3, r2
 80083f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80083fc:	4b73      	ldr	r3, [pc, #460]	; (80085cc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80083fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008402:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800840a:	4970      	ldr	r1, [pc, #448]	; (80085cc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800840c:	4313      	orrs	r3, r2
 800840e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- CLK48 configuration ------------------------*/
    /* Configure the PLLSAI when it is used as clock source for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800841a:	2b00      	cmp	r3, #0
 800841c:	d024      	beq.n	8008468 <HAL_RCCEx_PeriphCLKConfig+0x304>
       (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == (RCC_PERIPHCLK_CLK48)) &&
 8008422:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008426:	d11f      	bne.n	8008468 <HAL_RCCEx_PeriphCLKConfig+0x304>
    {
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));

      /* Read PLLSAIQ value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008428:	4b68      	ldr	r3, [pc, #416]	; (80085cc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800842a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800842e:	0e1b      	lsrs	r3, r3, #24
 8008430:	f003 030f 	and.w	r3, r3, #15
 8008434:	613b      	str	r3, [r7, #16]
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      pllsair = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008436:	4b65      	ldr	r3, [pc, #404]	; (80085cc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008438:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800843c:	0f1b      	lsrs	r3, r3, #28
 800843e:	f003 0307 	and.w	r3, r3, #7
 8008442:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* CLK48_CLK(first level) = PLLSAI_VCO Output/PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, pllsair);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	691b      	ldr	r3, [r3, #16]
 8008448:	019a      	lsls	r2, r3, #6
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	695b      	ldr	r3, [r3, #20]
 800844e:	085b      	lsrs	r3, r3, #1
 8008450:	3b01      	subs	r3, #1
 8008452:	041b      	lsls	r3, r3, #16
 8008454:	431a      	orrs	r2, r3
 8008456:	693b      	ldr	r3, [r7, #16]
 8008458:	061b      	lsls	r3, r3, #24
 800845a:	431a      	orrs	r2, r3
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	071b      	lsls	r3, r3, #28
 8008460:	495a      	ldr	r1, [pc, #360]	; (80085cc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008462:	4313      	orrs	r3, r2
 8008464:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008468:	4b59      	ldr	r3, [pc, #356]	; (80085d0 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 800846a:	2201      	movs	r2, #1
 800846c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800846e:	f7fd f9db 	bl	8005828 <HAL_GetTick>
 8008472:	61f8      	str	r0, [r7, #28]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008474:	e008      	b.n	8008488 <HAL_RCCEx_PeriphCLKConfig+0x324>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8008476:	f7fd f9d7 	bl	8005828 <HAL_GetTick>
 800847a:	4602      	mov	r2, r0
 800847c:	69fb      	ldr	r3, [r7, #28]
 800847e:	1ad3      	subs	r3, r2, r3
 8008480:	2b02      	cmp	r3, #2
 8008482:	d901      	bls.n	8008488 <HAL_RCCEx_PeriphCLKConfig+0x324>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008484:	2303      	movs	r3, #3
 8008486:	e09c      	b.n	80085c2 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008488:	4b50      	ldr	r3, [pc, #320]	; (80085cc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008490:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008494:	d1ef      	bne.n	8008476 <HAL_RCCEx_PeriphCLKConfig+0x312>
  }

  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f003 0320 	and.w	r3, r3, #32
 800849e:	2b00      	cmp	r3, #0
 80084a0:	f000 8083 	beq.w	80085aa <HAL_RCCEx_PeriphCLKConfig+0x446>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80084a4:	2300      	movs	r3, #0
 80084a6:	60bb      	str	r3, [r7, #8]
 80084a8:	4b48      	ldr	r3, [pc, #288]	; (80085cc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80084aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ac:	4a47      	ldr	r2, [pc, #284]	; (80085cc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80084ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80084b2:	6413      	str	r3, [r2, #64]	; 0x40
 80084b4:	4b45      	ldr	r3, [pc, #276]	; (80085cc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80084b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80084bc:	60bb      	str	r3, [r7, #8]
 80084be:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80084c0:	4b44      	ldr	r3, [pc, #272]	; (80085d4 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	4a43      	ldr	r2, [pc, #268]	; (80085d4 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80084c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80084ca:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80084cc:	f7fd f9ac 	bl	8005828 <HAL_GetTick>
 80084d0:	61f8      	str	r0, [r7, #28]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80084d2:	e008      	b.n	80084e6 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80084d4:	f7fd f9a8 	bl	8005828 <HAL_GetTick>
 80084d8:	4602      	mov	r2, r0
 80084da:	69fb      	ldr	r3, [r7, #28]
 80084dc:	1ad3      	subs	r3, r2, r3
 80084de:	2b02      	cmp	r3, #2
 80084e0:	d901      	bls.n	80084e6 <HAL_RCCEx_PeriphCLKConfig+0x382>
      {
        return HAL_TIMEOUT;
 80084e2:	2303      	movs	r3, #3
 80084e4:	e06d      	b.n	80085c2 <HAL_RCCEx_PeriphCLKConfig+0x45e>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80084e6:	4b3b      	ldr	r3, [pc, #236]	; (80085d4 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d0f0      	beq.n	80084d4 <HAL_RCCEx_PeriphCLKConfig+0x370>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80084f2:	4b36      	ldr	r3, [pc, #216]	; (80085cc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80084f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80084fa:	61bb      	str	r3, [r7, #24]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80084fc:	69bb      	ldr	r3, [r7, #24]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d02f      	beq.n	8008562 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008506:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800850a:	69ba      	ldr	r2, [r7, #24]
 800850c:	429a      	cmp	r2, r3
 800850e:	d028      	beq.n	8008562 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008510:	4b2e      	ldr	r3, [pc, #184]	; (80085cc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008514:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008518:	61bb      	str	r3, [r7, #24]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800851a:	4b2f      	ldr	r3, [pc, #188]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800851c:	2201      	movs	r2, #1
 800851e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008520:	4b2d      	ldr	r3, [pc, #180]	; (80085d8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8008522:	2200      	movs	r2, #0
 8008524:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008526:	4a29      	ldr	r2, [pc, #164]	; (80085cc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008528:	69bb      	ldr	r3, [r7, #24]
 800852a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800852c:	4b27      	ldr	r3, [pc, #156]	; (80085cc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800852e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008530:	f003 0301 	and.w	r3, r3, #1
 8008534:	2b01      	cmp	r3, #1
 8008536:	d114      	bne.n	8008562 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008538:	f7fd f976 	bl	8005828 <HAL_GetTick>
 800853c:	61f8      	str	r0, [r7, #28]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800853e:	e00a      	b.n	8008556 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008540:	f7fd f972 	bl	8005828 <HAL_GetTick>
 8008544:	4602      	mov	r2, r0
 8008546:	69fb      	ldr	r3, [r7, #28]
 8008548:	1ad3      	subs	r3, r2, r3
 800854a:	f241 3288 	movw	r2, #5000	; 0x1388
 800854e:	4293      	cmp	r3, r2
 8008550:	d901      	bls.n	8008556 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
          {
            return HAL_TIMEOUT;
 8008552:	2303      	movs	r3, #3
 8008554:	e035      	b.n	80085c2 <HAL_RCCEx_PeriphCLKConfig+0x45e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008556:	4b1d      	ldr	r3, [pc, #116]	; (80085cc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800855a:	f003 0302 	and.w	r3, r3, #2
 800855e:	2b00      	cmp	r3, #0
 8008560:	d0ee      	beq.n	8008540 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008566:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800856a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800856e:	d10d      	bne.n	800858c <HAL_RCCEx_PeriphCLKConfig+0x428>
 8008570:	4b16      	ldr	r3, [pc, #88]	; (80085cc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008572:	689b      	ldr	r3, [r3, #8]
 8008574:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800857c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008580:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008584:	4911      	ldr	r1, [pc, #68]	; (80085cc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008586:	4313      	orrs	r3, r2
 8008588:	608b      	str	r3, [r1, #8]
 800858a:	e005      	b.n	8008598 <HAL_RCCEx_PeriphCLKConfig+0x434>
 800858c:	4b0f      	ldr	r3, [pc, #60]	; (80085cc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800858e:	689b      	ldr	r3, [r3, #8]
 8008590:	4a0e      	ldr	r2, [pc, #56]	; (80085cc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8008592:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008596:	6093      	str	r3, [r2, #8]
 8008598:	4b0c      	ldr	r3, [pc, #48]	; (80085cc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800859a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80085a4:	4909      	ldr	r1, [pc, #36]	; (80085cc <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80085a6:	4313      	orrs	r3, r2
 80085a8:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f003 0310 	and.w	r3, r3, #16
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d004      	beq.n	80085c0 <HAL_RCCEx_PeriphCLKConfig+0x45c>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80085bc:	4b07      	ldr	r3, [pc, #28]	; (80085dc <HAL_RCCEx_PeriphCLKConfig+0x478>)
 80085be:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80085c0:	2300      	movs	r3, #0
}
 80085c2:	4618      	mov	r0, r3
 80085c4:	3720      	adds	r7, #32
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}
 80085ca:	bf00      	nop
 80085cc:	40023800 	.word	0x40023800
 80085d0:	42470070 	.word	0x42470070
 80085d4:	40007000 	.word	0x40007000
 80085d8:	42470e40 	.word	0x42470e40
 80085dc:	424711e0 	.word	0x424711e0

080085e0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b086      	sub	sp, #24
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80085e8:	2300      	movs	r3, #0
 80085ea:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f003 0301 	and.w	r3, r3, #1
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d075      	beq.n	80086e4 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80085f8:	4ba2      	ldr	r3, [pc, #648]	; (8008884 <HAL_RCC_OscConfig+0x2a4>)
 80085fa:	689b      	ldr	r3, [r3, #8]
 80085fc:	f003 030c 	and.w	r3, r3, #12
 8008600:	2b04      	cmp	r3, #4
 8008602:	d00c      	beq.n	800861e <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008604:	4b9f      	ldr	r3, [pc, #636]	; (8008884 <HAL_RCC_OscConfig+0x2a4>)
 8008606:	689b      	ldr	r3, [r3, #8]
 8008608:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800860c:	2b08      	cmp	r3, #8
 800860e:	d112      	bne.n	8008636 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008610:	4b9c      	ldr	r3, [pc, #624]	; (8008884 <HAL_RCC_OscConfig+0x2a4>)
 8008612:	685b      	ldr	r3, [r3, #4]
 8008614:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008618:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800861c:	d10b      	bne.n	8008636 <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800861e:	4b99      	ldr	r3, [pc, #612]	; (8008884 <HAL_RCC_OscConfig+0x2a4>)
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008626:	2b00      	cmp	r3, #0
 8008628:	d05b      	beq.n	80086e2 <HAL_RCC_OscConfig+0x102>
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	685b      	ldr	r3, [r3, #4]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d157      	bne.n	80086e2 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 8008632:	2301      	movs	r3, #1
 8008634:	e20b      	b.n	8008a4e <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	685b      	ldr	r3, [r3, #4]
 800863a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800863e:	d106      	bne.n	800864e <HAL_RCC_OscConfig+0x6e>
 8008640:	4b90      	ldr	r3, [pc, #576]	; (8008884 <HAL_RCC_OscConfig+0x2a4>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	4a8f      	ldr	r2, [pc, #572]	; (8008884 <HAL_RCC_OscConfig+0x2a4>)
 8008646:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800864a:	6013      	str	r3, [r2, #0]
 800864c:	e01d      	b.n	800868a <HAL_RCC_OscConfig+0xaa>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	685b      	ldr	r3, [r3, #4]
 8008652:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008656:	d10c      	bne.n	8008672 <HAL_RCC_OscConfig+0x92>
 8008658:	4b8a      	ldr	r3, [pc, #552]	; (8008884 <HAL_RCC_OscConfig+0x2a4>)
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	4a89      	ldr	r2, [pc, #548]	; (8008884 <HAL_RCC_OscConfig+0x2a4>)
 800865e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008662:	6013      	str	r3, [r2, #0]
 8008664:	4b87      	ldr	r3, [pc, #540]	; (8008884 <HAL_RCC_OscConfig+0x2a4>)
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	4a86      	ldr	r2, [pc, #536]	; (8008884 <HAL_RCC_OscConfig+0x2a4>)
 800866a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800866e:	6013      	str	r3, [r2, #0]
 8008670:	e00b      	b.n	800868a <HAL_RCC_OscConfig+0xaa>
 8008672:	4b84      	ldr	r3, [pc, #528]	; (8008884 <HAL_RCC_OscConfig+0x2a4>)
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	4a83      	ldr	r2, [pc, #524]	; (8008884 <HAL_RCC_OscConfig+0x2a4>)
 8008678:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800867c:	6013      	str	r3, [r2, #0]
 800867e:	4b81      	ldr	r3, [pc, #516]	; (8008884 <HAL_RCC_OscConfig+0x2a4>)
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	4a80      	ldr	r2, [pc, #512]	; (8008884 <HAL_RCC_OscConfig+0x2a4>)
 8008684:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008688:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	685b      	ldr	r3, [r3, #4]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d013      	beq.n	80086ba <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008692:	f7fd f8c9 	bl	8005828 <HAL_GetTick>
 8008696:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008698:	e008      	b.n	80086ac <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800869a:	f7fd f8c5 	bl	8005828 <HAL_GetTick>
 800869e:	4602      	mov	r2, r0
 80086a0:	693b      	ldr	r3, [r7, #16]
 80086a2:	1ad3      	subs	r3, r2, r3
 80086a4:	2b64      	cmp	r3, #100	; 0x64
 80086a6:	d901      	bls.n	80086ac <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 80086a8:	2303      	movs	r3, #3
 80086aa:	e1d0      	b.n	8008a4e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80086ac:	4b75      	ldr	r3, [pc, #468]	; (8008884 <HAL_RCC_OscConfig+0x2a4>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d0f0      	beq.n	800869a <HAL_RCC_OscConfig+0xba>
 80086b8:	e014      	b.n	80086e4 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086ba:	f7fd f8b5 	bl	8005828 <HAL_GetTick>
 80086be:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80086c0:	e008      	b.n	80086d4 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80086c2:	f7fd f8b1 	bl	8005828 <HAL_GetTick>
 80086c6:	4602      	mov	r2, r0
 80086c8:	693b      	ldr	r3, [r7, #16]
 80086ca:	1ad3      	subs	r3, r2, r3
 80086cc:	2b64      	cmp	r3, #100	; 0x64
 80086ce:	d901      	bls.n	80086d4 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 80086d0:	2303      	movs	r3, #3
 80086d2:	e1bc      	b.n	8008a4e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80086d4:	4b6b      	ldr	r3, [pc, #428]	; (8008884 <HAL_RCC_OscConfig+0x2a4>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d1f0      	bne.n	80086c2 <HAL_RCC_OscConfig+0xe2>
 80086e0:	e000      	b.n	80086e4 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80086e2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f003 0302 	and.w	r3, r3, #2
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d063      	beq.n	80087b8 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80086f0:	4b64      	ldr	r3, [pc, #400]	; (8008884 <HAL_RCC_OscConfig+0x2a4>)
 80086f2:	689b      	ldr	r3, [r3, #8]
 80086f4:	f003 030c 	and.w	r3, r3, #12
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d00b      	beq.n	8008714 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80086fc:	4b61      	ldr	r3, [pc, #388]	; (8008884 <HAL_RCC_OscConfig+0x2a4>)
 80086fe:	689b      	ldr	r3, [r3, #8]
 8008700:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8008704:	2b08      	cmp	r3, #8
 8008706:	d11c      	bne.n	8008742 <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008708:	4b5e      	ldr	r3, [pc, #376]	; (8008884 <HAL_RCC_OscConfig+0x2a4>)
 800870a:	685b      	ldr	r3, [r3, #4]
 800870c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008710:	2b00      	cmp	r3, #0
 8008712:	d116      	bne.n	8008742 <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008714:	4b5b      	ldr	r3, [pc, #364]	; (8008884 <HAL_RCC_OscConfig+0x2a4>)
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f003 0302 	and.w	r3, r3, #2
 800871c:	2b00      	cmp	r3, #0
 800871e:	d005      	beq.n	800872c <HAL_RCC_OscConfig+0x14c>
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	68db      	ldr	r3, [r3, #12]
 8008724:	2b01      	cmp	r3, #1
 8008726:	d001      	beq.n	800872c <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8008728:	2301      	movs	r3, #1
 800872a:	e190      	b.n	8008a4e <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800872c:	4b55      	ldr	r3, [pc, #340]	; (8008884 <HAL_RCC_OscConfig+0x2a4>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	691b      	ldr	r3, [r3, #16]
 8008738:	00db      	lsls	r3, r3, #3
 800873a:	4952      	ldr	r1, [pc, #328]	; (8008884 <HAL_RCC_OscConfig+0x2a4>)
 800873c:	4313      	orrs	r3, r2
 800873e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008740:	e03a      	b.n	80087b8 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	68db      	ldr	r3, [r3, #12]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d020      	beq.n	800878c <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800874a:	4b4f      	ldr	r3, [pc, #316]	; (8008888 <HAL_RCC_OscConfig+0x2a8>)
 800874c:	2201      	movs	r2, #1
 800874e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008750:	f7fd f86a 	bl	8005828 <HAL_GetTick>
 8008754:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008756:	e008      	b.n	800876a <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008758:	f7fd f866 	bl	8005828 <HAL_GetTick>
 800875c:	4602      	mov	r2, r0
 800875e:	693b      	ldr	r3, [r7, #16]
 8008760:	1ad3      	subs	r3, r2, r3
 8008762:	2b02      	cmp	r3, #2
 8008764:	d901      	bls.n	800876a <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8008766:	2303      	movs	r3, #3
 8008768:	e171      	b.n	8008a4e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800876a:	4b46      	ldr	r3, [pc, #280]	; (8008884 <HAL_RCC_OscConfig+0x2a4>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f003 0302 	and.w	r3, r3, #2
 8008772:	2b00      	cmp	r3, #0
 8008774:	d0f0      	beq.n	8008758 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008776:	4b43      	ldr	r3, [pc, #268]	; (8008884 <HAL_RCC_OscConfig+0x2a4>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	691b      	ldr	r3, [r3, #16]
 8008782:	00db      	lsls	r3, r3, #3
 8008784:	493f      	ldr	r1, [pc, #252]	; (8008884 <HAL_RCC_OscConfig+0x2a4>)
 8008786:	4313      	orrs	r3, r2
 8008788:	600b      	str	r3, [r1, #0]
 800878a:	e015      	b.n	80087b8 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800878c:	4b3e      	ldr	r3, [pc, #248]	; (8008888 <HAL_RCC_OscConfig+0x2a8>)
 800878e:	2200      	movs	r2, #0
 8008790:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008792:	f7fd f849 	bl	8005828 <HAL_GetTick>
 8008796:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008798:	e008      	b.n	80087ac <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800879a:	f7fd f845 	bl	8005828 <HAL_GetTick>
 800879e:	4602      	mov	r2, r0
 80087a0:	693b      	ldr	r3, [r7, #16]
 80087a2:	1ad3      	subs	r3, r2, r3
 80087a4:	2b02      	cmp	r3, #2
 80087a6:	d901      	bls.n	80087ac <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80087a8:	2303      	movs	r3, #3
 80087aa:	e150      	b.n	8008a4e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80087ac:	4b35      	ldr	r3, [pc, #212]	; (8008884 <HAL_RCC_OscConfig+0x2a4>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f003 0302 	and.w	r3, r3, #2
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d1f0      	bne.n	800879a <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f003 0308 	and.w	r3, r3, #8
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d030      	beq.n	8008826 <HAL_RCC_OscConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	695b      	ldr	r3, [r3, #20]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d016      	beq.n	80087fa <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80087cc:	4b2f      	ldr	r3, [pc, #188]	; (800888c <HAL_RCC_OscConfig+0x2ac>)
 80087ce:	2201      	movs	r2, #1
 80087d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087d2:	f7fd f829 	bl	8005828 <HAL_GetTick>
 80087d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80087d8:	e008      	b.n	80087ec <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80087da:	f7fd f825 	bl	8005828 <HAL_GetTick>
 80087de:	4602      	mov	r2, r0
 80087e0:	693b      	ldr	r3, [r7, #16]
 80087e2:	1ad3      	subs	r3, r2, r3
 80087e4:	2b02      	cmp	r3, #2
 80087e6:	d901      	bls.n	80087ec <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 80087e8:	2303      	movs	r3, #3
 80087ea:	e130      	b.n	8008a4e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80087ec:	4b25      	ldr	r3, [pc, #148]	; (8008884 <HAL_RCC_OscConfig+0x2a4>)
 80087ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087f0:	f003 0302 	and.w	r3, r3, #2
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d0f0      	beq.n	80087da <HAL_RCC_OscConfig+0x1fa>
 80087f8:	e015      	b.n	8008826 <HAL_RCC_OscConfig+0x246>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80087fa:	4b24      	ldr	r3, [pc, #144]	; (800888c <HAL_RCC_OscConfig+0x2ac>)
 80087fc:	2200      	movs	r2, #0
 80087fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008800:	f7fd f812 	bl	8005828 <HAL_GetTick>
 8008804:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008806:	e008      	b.n	800881a <HAL_RCC_OscConfig+0x23a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008808:	f7fd f80e 	bl	8005828 <HAL_GetTick>
 800880c:	4602      	mov	r2, r0
 800880e:	693b      	ldr	r3, [r7, #16]
 8008810:	1ad3      	subs	r3, r2, r3
 8008812:	2b02      	cmp	r3, #2
 8008814:	d901      	bls.n	800881a <HAL_RCC_OscConfig+0x23a>
        {
          return HAL_TIMEOUT;
 8008816:	2303      	movs	r3, #3
 8008818:	e119      	b.n	8008a4e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800881a:	4b1a      	ldr	r3, [pc, #104]	; (8008884 <HAL_RCC_OscConfig+0x2a4>)
 800881c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800881e:	f003 0302 	and.w	r3, r3, #2
 8008822:	2b00      	cmp	r3, #0
 8008824:	d1f0      	bne.n	8008808 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f003 0304 	and.w	r3, r3, #4
 800882e:	2b00      	cmp	r3, #0
 8008830:	f000 809f 	beq.w	8008972 <HAL_RCC_OscConfig+0x392>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008834:	2300      	movs	r3, #0
 8008836:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008838:	4b12      	ldr	r3, [pc, #72]	; (8008884 <HAL_RCC_OscConfig+0x2a4>)
 800883a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800883c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008840:	2b00      	cmp	r3, #0
 8008842:	d10f      	bne.n	8008864 <HAL_RCC_OscConfig+0x284>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008844:	2300      	movs	r3, #0
 8008846:	60fb      	str	r3, [r7, #12]
 8008848:	4b0e      	ldr	r3, [pc, #56]	; (8008884 <HAL_RCC_OscConfig+0x2a4>)
 800884a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800884c:	4a0d      	ldr	r2, [pc, #52]	; (8008884 <HAL_RCC_OscConfig+0x2a4>)
 800884e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008852:	6413      	str	r3, [r2, #64]	; 0x40
 8008854:	4b0b      	ldr	r3, [pc, #44]	; (8008884 <HAL_RCC_OscConfig+0x2a4>)
 8008856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008858:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800885c:	60fb      	str	r3, [r7, #12]
 800885e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8008860:	2301      	movs	r3, #1
 8008862:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008864:	4b0a      	ldr	r3, [pc, #40]	; (8008890 <HAL_RCC_OscConfig+0x2b0>)
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800886c:	2b00      	cmp	r3, #0
 800886e:	d120      	bne.n	80088b2 <HAL_RCC_OscConfig+0x2d2>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008870:	4b07      	ldr	r3, [pc, #28]	; (8008890 <HAL_RCC_OscConfig+0x2b0>)
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	4a06      	ldr	r2, [pc, #24]	; (8008890 <HAL_RCC_OscConfig+0x2b0>)
 8008876:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800887a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800887c:	f7fc ffd4 	bl	8005828 <HAL_GetTick>
 8008880:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008882:	e010      	b.n	80088a6 <HAL_RCC_OscConfig+0x2c6>
 8008884:	40023800 	.word	0x40023800
 8008888:	42470000 	.word	0x42470000
 800888c:	42470e80 	.word	0x42470e80
 8008890:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008894:	f7fc ffc8 	bl	8005828 <HAL_GetTick>
 8008898:	4602      	mov	r2, r0
 800889a:	693b      	ldr	r3, [r7, #16]
 800889c:	1ad3      	subs	r3, r2, r3
 800889e:	2b02      	cmp	r3, #2
 80088a0:	d901      	bls.n	80088a6 <HAL_RCC_OscConfig+0x2c6>
        {
          return HAL_TIMEOUT;
 80088a2:	2303      	movs	r3, #3
 80088a4:	e0d3      	b.n	8008a4e <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80088a6:	4b6c      	ldr	r3, [pc, #432]	; (8008a58 <HAL_RCC_OscConfig+0x478>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d0f0      	beq.n	8008894 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	689b      	ldr	r3, [r3, #8]
 80088b6:	2b01      	cmp	r3, #1
 80088b8:	d106      	bne.n	80088c8 <HAL_RCC_OscConfig+0x2e8>
 80088ba:	4b68      	ldr	r3, [pc, #416]	; (8008a5c <HAL_RCC_OscConfig+0x47c>)
 80088bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088be:	4a67      	ldr	r2, [pc, #412]	; (8008a5c <HAL_RCC_OscConfig+0x47c>)
 80088c0:	f043 0301 	orr.w	r3, r3, #1
 80088c4:	6713      	str	r3, [r2, #112]	; 0x70
 80088c6:	e01c      	b.n	8008902 <HAL_RCC_OscConfig+0x322>
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	689b      	ldr	r3, [r3, #8]
 80088cc:	2b05      	cmp	r3, #5
 80088ce:	d10c      	bne.n	80088ea <HAL_RCC_OscConfig+0x30a>
 80088d0:	4b62      	ldr	r3, [pc, #392]	; (8008a5c <HAL_RCC_OscConfig+0x47c>)
 80088d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088d4:	4a61      	ldr	r2, [pc, #388]	; (8008a5c <HAL_RCC_OscConfig+0x47c>)
 80088d6:	f043 0304 	orr.w	r3, r3, #4
 80088da:	6713      	str	r3, [r2, #112]	; 0x70
 80088dc:	4b5f      	ldr	r3, [pc, #380]	; (8008a5c <HAL_RCC_OscConfig+0x47c>)
 80088de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088e0:	4a5e      	ldr	r2, [pc, #376]	; (8008a5c <HAL_RCC_OscConfig+0x47c>)
 80088e2:	f043 0301 	orr.w	r3, r3, #1
 80088e6:	6713      	str	r3, [r2, #112]	; 0x70
 80088e8:	e00b      	b.n	8008902 <HAL_RCC_OscConfig+0x322>
 80088ea:	4b5c      	ldr	r3, [pc, #368]	; (8008a5c <HAL_RCC_OscConfig+0x47c>)
 80088ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088ee:	4a5b      	ldr	r2, [pc, #364]	; (8008a5c <HAL_RCC_OscConfig+0x47c>)
 80088f0:	f023 0301 	bic.w	r3, r3, #1
 80088f4:	6713      	str	r3, [r2, #112]	; 0x70
 80088f6:	4b59      	ldr	r3, [pc, #356]	; (8008a5c <HAL_RCC_OscConfig+0x47c>)
 80088f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088fa:	4a58      	ldr	r2, [pc, #352]	; (8008a5c <HAL_RCC_OscConfig+0x47c>)
 80088fc:	f023 0304 	bic.w	r3, r3, #4
 8008900:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	689b      	ldr	r3, [r3, #8]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d015      	beq.n	8008936 <HAL_RCC_OscConfig+0x356>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800890a:	f7fc ff8d 	bl	8005828 <HAL_GetTick>
 800890e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008910:	e00a      	b.n	8008928 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008912:	f7fc ff89 	bl	8005828 <HAL_GetTick>
 8008916:	4602      	mov	r2, r0
 8008918:	693b      	ldr	r3, [r7, #16]
 800891a:	1ad3      	subs	r3, r2, r3
 800891c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008920:	4293      	cmp	r3, r2
 8008922:	d901      	bls.n	8008928 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8008924:	2303      	movs	r3, #3
 8008926:	e092      	b.n	8008a4e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008928:	4b4c      	ldr	r3, [pc, #304]	; (8008a5c <HAL_RCC_OscConfig+0x47c>)
 800892a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800892c:	f003 0302 	and.w	r3, r3, #2
 8008930:	2b00      	cmp	r3, #0
 8008932:	d0ee      	beq.n	8008912 <HAL_RCC_OscConfig+0x332>
 8008934:	e014      	b.n	8008960 <HAL_RCC_OscConfig+0x380>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008936:	f7fc ff77 	bl	8005828 <HAL_GetTick>
 800893a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800893c:	e00a      	b.n	8008954 <HAL_RCC_OscConfig+0x374>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800893e:	f7fc ff73 	bl	8005828 <HAL_GetTick>
 8008942:	4602      	mov	r2, r0
 8008944:	693b      	ldr	r3, [r7, #16]
 8008946:	1ad3      	subs	r3, r2, r3
 8008948:	f241 3288 	movw	r2, #5000	; 0x1388
 800894c:	4293      	cmp	r3, r2
 800894e:	d901      	bls.n	8008954 <HAL_RCC_OscConfig+0x374>
        {
          return HAL_TIMEOUT;
 8008950:	2303      	movs	r3, #3
 8008952:	e07c      	b.n	8008a4e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008954:	4b41      	ldr	r3, [pc, #260]	; (8008a5c <HAL_RCC_OscConfig+0x47c>)
 8008956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008958:	f003 0302 	and.w	r3, r3, #2
 800895c:	2b00      	cmp	r3, #0
 800895e:	d1ee      	bne.n	800893e <HAL_RCC_OscConfig+0x35e>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008960:	7dfb      	ldrb	r3, [r7, #23]
 8008962:	2b01      	cmp	r3, #1
 8008964:	d105      	bne.n	8008972 <HAL_RCC_OscConfig+0x392>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008966:	4b3d      	ldr	r3, [pc, #244]	; (8008a5c <HAL_RCC_OscConfig+0x47c>)
 8008968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800896a:	4a3c      	ldr	r2, [pc, #240]	; (8008a5c <HAL_RCC_OscConfig+0x47c>)
 800896c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008970:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	699b      	ldr	r3, [r3, #24]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d068      	beq.n	8008a4c <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800897a:	4b38      	ldr	r3, [pc, #224]	; (8008a5c <HAL_RCC_OscConfig+0x47c>)
 800897c:	689b      	ldr	r3, [r3, #8]
 800897e:	f003 030c 	and.w	r3, r3, #12
 8008982:	2b08      	cmp	r3, #8
 8008984:	d060      	beq.n	8008a48 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	699b      	ldr	r3, [r3, #24]
 800898a:	2b02      	cmp	r3, #2
 800898c:	d145      	bne.n	8008a1a <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800898e:	4b34      	ldr	r3, [pc, #208]	; (8008a60 <HAL_RCC_OscConfig+0x480>)
 8008990:	2200      	movs	r2, #0
 8008992:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008994:	f7fc ff48 	bl	8005828 <HAL_GetTick>
 8008998:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800899a:	e008      	b.n	80089ae <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800899c:	f7fc ff44 	bl	8005828 <HAL_GetTick>
 80089a0:	4602      	mov	r2, r0
 80089a2:	693b      	ldr	r3, [r7, #16]
 80089a4:	1ad3      	subs	r3, r2, r3
 80089a6:	2b02      	cmp	r3, #2
 80089a8:	d901      	bls.n	80089ae <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 80089aa:	2303      	movs	r3, #3
 80089ac:	e04f      	b.n	8008a4e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80089ae:	4b2b      	ldr	r3, [pc, #172]	; (8008a5c <HAL_RCC_OscConfig+0x47c>)
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d1f0      	bne.n	800899c <HAL_RCC_OscConfig+0x3bc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	69da      	ldr	r2, [r3, #28]
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6a1b      	ldr	r3, [r3, #32]
 80089c2:	431a      	orrs	r2, r3
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089c8:	019b      	lsls	r3, r3, #6
 80089ca:	431a      	orrs	r2, r3
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089d0:	085b      	lsrs	r3, r3, #1
 80089d2:	3b01      	subs	r3, #1
 80089d4:	041b      	lsls	r3, r3, #16
 80089d6:	431a      	orrs	r2, r3
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089dc:	061b      	lsls	r3, r3, #24
 80089de:	431a      	orrs	r2, r3
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089e4:	071b      	lsls	r3, r3, #28
 80089e6:	491d      	ldr	r1, [pc, #116]	; (8008a5c <HAL_RCC_OscConfig+0x47c>)
 80089e8:	4313      	orrs	r3, r2
 80089ea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80089ec:	4b1c      	ldr	r3, [pc, #112]	; (8008a60 <HAL_RCC_OscConfig+0x480>)
 80089ee:	2201      	movs	r2, #1
 80089f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089f2:	f7fc ff19 	bl	8005828 <HAL_GetTick>
 80089f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80089f8:	e008      	b.n	8008a0c <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80089fa:	f7fc ff15 	bl	8005828 <HAL_GetTick>
 80089fe:	4602      	mov	r2, r0
 8008a00:	693b      	ldr	r3, [r7, #16]
 8008a02:	1ad3      	subs	r3, r2, r3
 8008a04:	2b02      	cmp	r3, #2
 8008a06:	d901      	bls.n	8008a0c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8008a08:	2303      	movs	r3, #3
 8008a0a:	e020      	b.n	8008a4e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008a0c:	4b13      	ldr	r3, [pc, #76]	; (8008a5c <HAL_RCC_OscConfig+0x47c>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d0f0      	beq.n	80089fa <HAL_RCC_OscConfig+0x41a>
 8008a18:	e018      	b.n	8008a4c <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a1a:	4b11      	ldr	r3, [pc, #68]	; (8008a60 <HAL_RCC_OscConfig+0x480>)
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a20:	f7fc ff02 	bl	8005828 <HAL_GetTick>
 8008a24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a26:	e008      	b.n	8008a3a <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008a28:	f7fc fefe 	bl	8005828 <HAL_GetTick>
 8008a2c:	4602      	mov	r2, r0
 8008a2e:	693b      	ldr	r3, [r7, #16]
 8008a30:	1ad3      	subs	r3, r2, r3
 8008a32:	2b02      	cmp	r3, #2
 8008a34:	d901      	bls.n	8008a3a <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8008a36:	2303      	movs	r3, #3
 8008a38:	e009      	b.n	8008a4e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a3a:	4b08      	ldr	r3, [pc, #32]	; (8008a5c <HAL_RCC_OscConfig+0x47c>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d1f0      	bne.n	8008a28 <HAL_RCC_OscConfig+0x448>
 8008a46:	e001      	b.n	8008a4c <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8008a48:	2301      	movs	r3, #1
 8008a4a:	e000      	b.n	8008a4e <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8008a4c:	2300      	movs	r3, #0
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3718      	adds	r7, #24
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}
 8008a56:	bf00      	nop
 8008a58:	40007000 	.word	0x40007000
 8008a5c:	40023800 	.word	0x40023800
 8008a60:	42470060 	.word	0x42470060

08008a64 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b082      	sub	sp, #8
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d101      	bne.n	8008a76 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8008a72:	2301      	movs	r3, #1
 8008a74:	e022      	b.n	8008abc <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008a7c:	b2db      	uxtb	r3, r3
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d105      	bne.n	8008a8e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2200      	movs	r2, #0
 8008a86:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008a88:	6878      	ldr	r0, [r7, #4]
 8008a8a:	f7fb fe27 	bl	80046dc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2203      	movs	r2, #3
 8008a92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	f000 f814 	bl	8008ac4 <HAL_SD_InitCard>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d001      	beq.n	8008aa6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8008aa2:	2301      	movs	r3, #1
 8008aa4:	e00a      	b.n	8008abc <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2200      	movs	r2, #0
 8008ab0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2201      	movs	r2, #1
 8008ab6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008aba:	2300      	movs	r3, #0
}
 8008abc:	4618      	mov	r0, r3
 8008abe:	3708      	adds	r7, #8
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bd80      	pop	{r7, pc}

08008ac4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008ac4:	b5b0      	push	{r4, r5, r7, lr}
 8008ac6:	b08e      	sub	sp, #56	; 0x38
 8008ac8:	af04      	add	r7, sp, #16
 8008aca:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8008acc:	2300      	movs	r3, #0
 8008ace:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8008ad8:	2300      	movs	r3, #0
 8008ada:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8008adc:	2300      	movs	r3, #0
 8008ade:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8008ae0:	2376      	movs	r3, #118	; 0x76
 8008ae2:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681d      	ldr	r5, [r3, #0]
 8008ae8:	466c      	mov	r4, sp
 8008aea:	f107 0314 	add.w	r3, r7, #20
 8008aee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008af2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008af6:	f107 0308 	add.w	r3, r7, #8
 8008afa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008afc:	4628      	mov	r0, r5
 8008afe:	f003 fa87 	bl	800c010 <SDIO_Init>
 8008b02:	4603      	mov	r3, r0
 8008b04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8008b08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d001      	beq.n	8008b14 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8008b10:	2301      	movs	r3, #1
 8008b12:	e031      	b.n	8008b78 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8008b14:	4b1a      	ldr	r3, [pc, #104]	; (8008b80 <HAL_SD_InitCard+0xbc>)
 8008b16:	2200      	movs	r2, #0
 8008b18:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	4618      	mov	r0, r3
 8008b20:	f003 fabf 	bl	800c0a2 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8008b24:	4b16      	ldr	r3, [pc, #88]	; (8008b80 <HAL_SD_InitCard+0xbc>)
 8008b26:	2201      	movs	r2, #1
 8008b28:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	f000 ffc6 	bl	8009abc <SD_PowerON>
 8008b30:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008b32:	6a3b      	ldr	r3, [r7, #32]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d00b      	beq.n	8008b50 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2201      	movs	r2, #1
 8008b3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b44:	6a3b      	ldr	r3, [r7, #32]
 8008b46:	431a      	orrs	r2, r3
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008b4c:	2301      	movs	r3, #1
 8008b4e:	e013      	b.n	8008b78 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f000 fee5 	bl	8009920 <SD_InitCard>
 8008b56:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008b58:	6a3b      	ldr	r3, [r7, #32]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d00b      	beq.n	8008b76 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2201      	movs	r2, #1
 8008b62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b6a:	6a3b      	ldr	r3, [r7, #32]
 8008b6c:	431a      	orrs	r2, r3
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008b72:	2301      	movs	r3, #1
 8008b74:	e000      	b.n	8008b78 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8008b76:	2300      	movs	r3, #0
}
 8008b78:	4618      	mov	r0, r3
 8008b7a:	3728      	adds	r7, #40	; 0x28
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bdb0      	pop	{r4, r5, r7, pc}
 8008b80:	422580a0 	.word	0x422580a0

08008b84 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b08c      	sub	sp, #48	; 0x30
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	60f8      	str	r0, [r7, #12]
 8008b8c:	60b9      	str	r1, [r7, #8]
 8008b8e:	607a      	str	r2, [r7, #4]
 8008b90:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d107      	bne.n	8008bac <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ba0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008ba8:	2301      	movs	r3, #1
 8008baa:	e0c7      	b.n	8008d3c <HAL_SD_ReadBlocks_DMA+0x1b8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008bb2:	b2db      	uxtb	r3, r3
 8008bb4:	2b01      	cmp	r3, #1
 8008bb6:	f040 80c0 	bne.w	8008d3a <HAL_SD_ReadBlocks_DMA+0x1b6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008bc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	441a      	add	r2, r3
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008bca:	429a      	cmp	r2, r3
 8008bcc:	d907      	bls.n	8008bde <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bd2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008bda:	2301      	movs	r3, #1
 8008bdc:	e0ae      	b.n	8008d3c <HAL_SD_ReadBlocks_DMA+0x1b8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	2203      	movs	r2, #3
 8008be2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	2200      	movs	r2, #0
 8008bec:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8008bfc:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c02:	4a50      	ldr	r2, [pc, #320]	; (8008d44 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8008c04:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c0a:	4a4f      	ldr	r2, [pc, #316]	; (8008d48 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 8008c0c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c12:	2200      	movs	r2, #0
 8008c14:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	3380      	adds	r3, #128	; 0x80
 8008c20:	4619      	mov	r1, r3
 8008c22:	68ba      	ldr	r2, [r7, #8]
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	025b      	lsls	r3, r3, #9
 8008c28:	089b      	lsrs	r3, r3, #2
 8008c2a:	f7fd fbef 	bl	800640c <HAL_DMA_Start_IT>
 8008c2e:	4603      	mov	r3, r0
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d017      	beq.n	8008c64 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8008c42:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	4a40      	ldr	r2, [pc, #256]	; (8008d4c <HAL_SD_ReadBlocks_DMA+0x1c8>)
 8008c4a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c50:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	2201      	movs	r2, #1
 8008c5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8008c60:	2301      	movs	r3, #1
 8008c62:	e06b      	b.n	8008d3c <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8008c64:	4b3a      	ldr	r3, [pc, #232]	; (8008d50 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 8008c66:	2201      	movs	r2, #1
 8008c68:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c6e:	2b01      	cmp	r3, #1
 8008c70:	d002      	beq.n	8008c78 <HAL_SD_ReadBlocks_DMA+0xf4>
      {
        add *= 512U;
 8008c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c74:	025b      	lsls	r3, r3, #9
 8008c76:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008c80:	4618      	mov	r0, r3
 8008c82:	f003 faa1 	bl	800c1c8 <SDMMC_CmdBlockLength>
 8008c86:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 8008c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d00f      	beq.n	8008cae <HAL_SD_ReadBlocks_DMA+0x12a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	4a2e      	ldr	r2, [pc, #184]	; (8008d4c <HAL_SD_ReadBlocks_DMA+0x1c8>)
 8008c94:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c9c:	431a      	orrs	r2, r3
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	2201      	movs	r2, #1
 8008ca6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8008caa:	2301      	movs	r3, #1
 8008cac:	e046      	b.n	8008d3c <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008cae:	f04f 33ff 	mov.w	r3, #4294967295
 8008cb2:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	025b      	lsls	r3, r3, #9
 8008cb8:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8008cba:	2390      	movs	r3, #144	; 0x90
 8008cbc:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8008cbe:	2302      	movs	r3, #2
 8008cc0:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8008cc6:	2301      	movs	r3, #1
 8008cc8:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f107 0210 	add.w	r2, r7, #16
 8008cd2:	4611      	mov	r1, r2
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	f003 fa4b 	bl	800c170 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	2b01      	cmp	r3, #1
 8008cde:	d90a      	bls.n	8008cf6 <HAL_SD_ReadBlocks_DMA+0x172>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	2282      	movs	r2, #130	; 0x82
 8008ce4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008cec:	4618      	mov	r0, r3
 8008cee:	f003 faaf 	bl	800c250 <SDMMC_CmdReadMultiBlock>
 8008cf2:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008cf4:	e009      	b.n	8008d0a <HAL_SD_ReadBlocks_DMA+0x186>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	2281      	movs	r2, #129	; 0x81
 8008cfa:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008d02:	4618      	mov	r0, r3
 8008d04:	f003 fa82 	bl	800c20c <SDMMC_CmdReadSingleBlock>
 8008d08:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8008d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d012      	beq.n	8008d36 <HAL_SD_ReadBlocks_DMA+0x1b2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	4a0d      	ldr	r2, [pc, #52]	; (8008d4c <HAL_SD_ReadBlocks_DMA+0x1c8>)
 8008d16:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d1e:	431a      	orrs	r2, r3
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	2201      	movs	r2, #1
 8008d28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8008d32:	2301      	movs	r3, #1
 8008d34:	e002      	b.n	8008d3c <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      return HAL_OK;
 8008d36:	2300      	movs	r3, #0
 8008d38:	e000      	b.n	8008d3c <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
  }
  else
  {
    return HAL_BUSY;
 8008d3a:	2302      	movs	r3, #2
  }
}
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	3730      	adds	r7, #48	; 0x30
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bd80      	pop	{r7, pc}
 8008d44:	0800972f 	.word	0x0800972f
 8008d48:	080097a1 	.word	0x080097a1
 8008d4c:	004005ff 	.word	0x004005ff
 8008d50:	4225858c 	.word	0x4225858c

08008d54 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008d54:	b580      	push	{r7, lr}
 8008d56:	b08c      	sub	sp, #48	; 0x30
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	60f8      	str	r0, [r7, #12]
 8008d5c:	60b9      	str	r1, [r7, #8]
 8008d5e:	607a      	str	r2, [r7, #4]
 8008d60:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8008d66:	68bb      	ldr	r3, [r7, #8]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d107      	bne.n	8008d7c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d70:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008d78:	2301      	movs	r3, #1
 8008d7a:	e0ca      	b.n	8008f12 <HAL_SD_WriteBlocks_DMA+0x1be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008d82:	b2db      	uxtb	r3, r3
 8008d84:	2b01      	cmp	r3, #1
 8008d86:	f040 80c3 	bne.w	8008f10 <HAL_SD_WriteBlocks_DMA+0x1bc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008d90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	441a      	add	r2, r3
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d9a:	429a      	cmp	r2, r3
 8008d9c:	d907      	bls.n	8008dae <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008da2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008daa:	2301      	movs	r3, #1
 8008dac:	e0b1      	b.n	8008f12 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	2203      	movs	r2, #3
 8008db2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	2200      	movs	r2, #0
 8008dbc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f042 021a 	orr.w	r2, r2, #26
 8008dcc:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dd2:	4a52      	ldr	r2, [pc, #328]	; (8008f1c <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8008dd4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dda:	4a51      	ldr	r2, [pc, #324]	; (8008f20 <HAL_SD_WriteBlocks_DMA+0x1cc>)
 8008ddc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008de2:	2200      	movs	r2, #0
 8008de4:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dea:	2b01      	cmp	r3, #1
 8008dec:	d002      	beq.n	8008df4 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8008dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008df0:	025b      	lsls	r3, r3, #9
 8008df2:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	f003 f9e3 	bl	800c1c8 <SDMMC_CmdBlockLength>
 8008e02:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d00f      	beq.n	8008e2a <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	4a45      	ldr	r2, [pc, #276]	; (8008f24 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8008e10:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e18:	431a      	orrs	r2, r3
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	2201      	movs	r2, #1
 8008e22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8008e26:	2301      	movs	r3, #1
 8008e28:	e073      	b.n	8008f12 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	2b01      	cmp	r3, #1
 8008e2e:	d90a      	bls.n	8008e46 <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	22a0      	movs	r2, #160	; 0xa0
 8008e34:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	f003 fa4b 	bl	800c2d8 <SDMMC_CmdWriteMultiBlock>
 8008e42:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008e44:	e009      	b.n	8008e5a <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	2290      	movs	r2, #144	; 0x90
 8008e4a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008e52:	4618      	mov	r0, r3
 8008e54:	f003 fa1e 	bl	800c294 <SDMMC_CmdWriteSingleBlock>
 8008e58:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d012      	beq.n	8008e86 <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	4a2f      	ldr	r2, [pc, #188]	; (8008f24 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8008e66:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e6e:	431a      	orrs	r2, r3
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	2201      	movs	r2, #1
 8008e78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	2200      	movs	r2, #0
 8008e80:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008e82:	2301      	movs	r3, #1
 8008e84:	e045      	b.n	8008f12 <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8008e86:	4b28      	ldr	r3, [pc, #160]	; (8008f28 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 8008e88:	2201      	movs	r2, #1
 8008e8a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8008e90:	68b9      	ldr	r1, [r7, #8]
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	3380      	adds	r3, #128	; 0x80
 8008e98:	461a      	mov	r2, r3
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	025b      	lsls	r3, r3, #9
 8008e9e:	089b      	lsrs	r3, r3, #2
 8008ea0:	f7fd fab4 	bl	800640c <HAL_DMA_Start_IT>
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d01a      	beq.n	8008ee0 <HAL_SD_WriteBlocks_DMA+0x18c>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f022 021a 	bic.w	r2, r2, #26
 8008eb8:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	4a19      	ldr	r2, [pc, #100]	; (8008f24 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8008ec0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ec6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	2201      	movs	r2, #1
 8008ed2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	2200      	movs	r2, #0
 8008eda:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008edc:	2301      	movs	r3, #1
 8008ede:	e018      	b.n	8008f12 <HAL_SD_WriteBlocks_DMA+0x1be>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008ee0:	f04f 33ff 	mov.w	r3, #4294967295
 8008ee4:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	025b      	lsls	r3, r3, #9
 8008eea:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8008eec:	2390      	movs	r3, #144	; 0x90
 8008eee:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8008ef8:	2301      	movs	r3, #1
 8008efa:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f107 0210 	add.w	r2, r7, #16
 8008f04:	4611      	mov	r1, r2
 8008f06:	4618      	mov	r0, r3
 8008f08:	f003 f932 	bl	800c170 <SDIO_ConfigData>

      return HAL_OK;
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	e000      	b.n	8008f12 <HAL_SD_WriteBlocks_DMA+0x1be>
    }
  }
  else
  {
    return HAL_BUSY;
 8008f10:	2302      	movs	r3, #2
  }
}
 8008f12:	4618      	mov	r0, r3
 8008f14:	3730      	adds	r7, #48	; 0x30
 8008f16:	46bd      	mov	sp, r7
 8008f18:	bd80      	pop	{r7, pc}
 8008f1a:	bf00      	nop
 8008f1c:	08009705 	.word	0x08009705
 8008f20:	080097a1 	.word	0x080097a1
 8008f24:	004005ff 	.word	0x004005ff
 8008f28:	4225858c 	.word	0x4225858c

08008f2c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b084      	sub	sp, #16
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f38:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d008      	beq.n	8008f5a <HAL_SD_IRQHandler+0x2e>
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	f003 0308 	and.w	r3, r3, #8
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d003      	beq.n	8008f5a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f000 ffc8 	bl	8009ee8 <SD_Read_IT>
 8008f58:	e155      	b.n	8009206 <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	f000 808f 	beq.w	8009088 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008f72:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f7a:	687a      	ldr	r2, [r7, #4]
 8008f7c:	6812      	ldr	r2, [r2, #0]
 8008f7e:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8008f82:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8008f86:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f022 0201 	bic.w	r2, r2, #1
 8008f96:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	f003 0308 	and.w	r3, r3, #8
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d039      	beq.n	8009016 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	f003 0302 	and.w	r3, r3, #2
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d104      	bne.n	8008fb6 <HAL_SD_IRQHandler+0x8a>
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	f003 0320 	and.w	r3, r3, #32
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d011      	beq.n	8008fda <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	4618      	mov	r0, r3
 8008fbc:	f003 f9ae 	bl	800c31c <SDMMC_CmdStopTransfer>
 8008fc0:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8008fc2:	68bb      	ldr	r3, [r7, #8]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d008      	beq.n	8008fda <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008fcc:	68bb      	ldr	r3, [r7, #8]
 8008fce:	431a      	orrs	r2, r3
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f000 f91f 	bl	8009218 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	f240 523a 	movw	r2, #1338	; 0x53a
 8008fe2:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2201      	movs	r2, #1
 8008fe8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2200      	movs	r2, #0
 8008ff0:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	f003 0301 	and.w	r3, r3, #1
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d104      	bne.n	8009006 <HAL_SD_IRQHandler+0xda>
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	f003 0302 	and.w	r3, r3, #2
 8009002:	2b00      	cmp	r3, #0
 8009004:	d003      	beq.n	800900e <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	f003 fe0c 	bl	800cc24 <HAL_SD_RxCpltCallback>
 800900c:	e0fb      	b.n	8009206 <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800900e:	6878      	ldr	r0, [r7, #4]
 8009010:	f003 fdfe 	bl	800cc10 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8009014:	e0f7      	b.n	8009206 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800901c:	2b00      	cmp	r3, #0
 800901e:	f000 80f2 	beq.w	8009206 <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	f003 0320 	and.w	r3, r3, #32
 8009028:	2b00      	cmp	r3, #0
 800902a:	d011      	beq.n	8009050 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	4618      	mov	r0, r3
 8009032:	f003 f973 	bl	800c31c <SDMMC_CmdStopTransfer>
 8009036:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d008      	beq.n	8009050 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009042:	68bb      	ldr	r3, [r7, #8]
 8009044:	431a      	orrs	r2, r3
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f000 f8e4 	bl	8009218 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	f003 0301 	and.w	r3, r3, #1
 8009056:	2b00      	cmp	r3, #0
 8009058:	f040 80d5 	bne.w	8009206 <HAL_SD_IRQHandler+0x2da>
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	f003 0302 	and.w	r3, r3, #2
 8009062:	2b00      	cmp	r3, #0
 8009064:	f040 80cf 	bne.w	8009206 <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	f022 0208 	bic.w	r2, r2, #8
 8009076:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2201      	movs	r2, #1
 800907c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8009080:	6878      	ldr	r0, [r7, #4]
 8009082:	f003 fdc5 	bl	800cc10 <HAL_SD_TxCpltCallback>
}
 8009086:	e0be      	b.n	8009206 <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800908e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009092:	2b00      	cmp	r3, #0
 8009094:	d008      	beq.n	80090a8 <HAL_SD_IRQHandler+0x17c>
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	f003 0308 	and.w	r3, r3, #8
 800909c:	2b00      	cmp	r3, #0
 800909e:	d003      	beq.n	80090a8 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f000 ff72 	bl	8009f8a <SD_Write_IT>
 80090a6:	e0ae      	b.n	8009206 <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090ae:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	f000 80a7 	beq.w	8009206 <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090be:	f003 0302 	and.w	r3, r3, #2
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d005      	beq.n	80090d2 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090ca:	f043 0202 	orr.w	r2, r3, #2
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090d8:	f003 0308 	and.w	r3, r3, #8
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d005      	beq.n	80090ec <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090e4:	f043 0208 	orr.w	r2, r3, #8
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090f2:	f003 0320 	and.w	r3, r3, #32
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d005      	beq.n	8009106 <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090fe:	f043 0220 	orr.w	r2, r3, #32
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800910c:	f003 0310 	and.w	r3, r3, #16
 8009110:	2b00      	cmp	r3, #0
 8009112:	d005      	beq.n	8009120 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009118:	f043 0210 	orr.w	r2, r3, #16
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f240 523a 	movw	r2, #1338	; 0x53a
 8009128:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8009138:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	4618      	mov	r0, r3
 8009140:	f003 f8ec 	bl	800c31c <SDMMC_CmdStopTransfer>
 8009144:	4602      	mov	r2, r0
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800914a:	431a      	orrs	r2, r3
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	f003 0308 	and.w	r3, r3, #8
 8009156:	2b00      	cmp	r3, #0
 8009158:	d00a      	beq.n	8009170 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	2201      	movs	r2, #1
 800915e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	2200      	movs	r2, #0
 8009166:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8009168:	6878      	ldr	r0, [r7, #4]
 800916a:	f000 f855 	bl	8009218 <HAL_SD_ErrorCallback>
}
 800916e:	e04a      	b.n	8009206 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009176:	2b00      	cmp	r3, #0
 8009178:	d045      	beq.n	8009206 <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	f003 0310 	and.w	r3, r3, #16
 8009180:	2b00      	cmp	r3, #0
 8009182:	d104      	bne.n	800918e <HAL_SD_IRQHandler+0x262>
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	f003 0320 	and.w	r3, r3, #32
 800918a:	2b00      	cmp	r3, #0
 800918c:	d011      	beq.n	80091b2 <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009192:	4a1f      	ldr	r2, [pc, #124]	; (8009210 <HAL_SD_IRQHandler+0x2e4>)
 8009194:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800919a:	4618      	mov	r0, r3
 800919c:	f7fd f98e 	bl	80064bc <HAL_DMA_Abort_IT>
 80091a0:	4603      	mov	r3, r0
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d02f      	beq.n	8009206 <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091aa:	4618      	mov	r0, r3
 80091ac:	f000 fb4a 	bl	8009844 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80091b0:	e029      	b.n	8009206 <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	f003 0301 	and.w	r3, r3, #1
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d104      	bne.n	80091c6 <HAL_SD_IRQHandler+0x29a>
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	f003 0302 	and.w	r3, r3, #2
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d011      	beq.n	80091ea <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091ca:	4a12      	ldr	r2, [pc, #72]	; (8009214 <HAL_SD_IRQHandler+0x2e8>)
 80091cc:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091d2:	4618      	mov	r0, r3
 80091d4:	f7fd f972 	bl	80064bc <HAL_DMA_Abort_IT>
 80091d8:	4603      	mov	r3, r0
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d013      	beq.n	8009206 <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091e2:	4618      	mov	r0, r3
 80091e4:	f000 fb65 	bl	80098b2 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80091e8:	e00d      	b.n	8009206 <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2200      	movs	r2, #0
 80091ee:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2201      	movs	r2, #1
 80091f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2200      	movs	r2, #0
 80091fc:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	f003 fcfc 	bl	800cbfc <HAL_SD_AbortCallback>
}
 8009204:	e7ff      	b.n	8009206 <HAL_SD_IRQHandler+0x2da>
 8009206:	bf00      	nop
 8009208:	3710      	adds	r7, #16
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}
 800920e:	bf00      	nop
 8009210:	08009845 	.word	0x08009845
 8009214:	080098b3 	.word	0x080098b3

08009218 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8009218:	b480      	push	{r7}
 800921a:	b083      	sub	sp, #12
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8009220:	bf00      	nop
 8009222:	370c      	adds	r7, #12
 8009224:	46bd      	mov	sp, r7
 8009226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922a:	4770      	bx	lr

0800922c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800922c:	b480      	push	{r7}
 800922e:	b083      	sub	sp, #12
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
 8009234:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800923a:	0f9b      	lsrs	r3, r3, #30
 800923c:	b2da      	uxtb	r2, r3
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009246:	0e9b      	lsrs	r3, r3, #26
 8009248:	b2db      	uxtb	r3, r3
 800924a:	f003 030f 	and.w	r3, r3, #15
 800924e:	b2da      	uxtb	r2, r3
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009258:	0e1b      	lsrs	r3, r3, #24
 800925a:	b2db      	uxtb	r3, r3
 800925c:	f003 0303 	and.w	r3, r3, #3
 8009260:	b2da      	uxtb	r2, r3
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800926a:	0c1b      	lsrs	r3, r3, #16
 800926c:	b2da      	uxtb	r2, r3
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009276:	0a1b      	lsrs	r3, r3, #8
 8009278:	b2da      	uxtb	r2, r3
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009282:	b2da      	uxtb	r2, r3
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800928c:	0d1b      	lsrs	r3, r3, #20
 800928e:	b29a      	uxth	r2, r3
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009298:	0c1b      	lsrs	r3, r3, #16
 800929a:	b2db      	uxtb	r3, r3
 800929c:	f003 030f 	and.w	r3, r3, #15
 80092a0:	b2da      	uxtb	r2, r3
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80092aa:	0bdb      	lsrs	r3, r3, #15
 80092ac:	b2db      	uxtb	r3, r3
 80092ae:	f003 0301 	and.w	r3, r3, #1
 80092b2:	b2da      	uxtb	r2, r3
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80092bc:	0b9b      	lsrs	r3, r3, #14
 80092be:	b2db      	uxtb	r3, r3
 80092c0:	f003 0301 	and.w	r3, r3, #1
 80092c4:	b2da      	uxtb	r2, r3
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80092ce:	0b5b      	lsrs	r3, r3, #13
 80092d0:	b2db      	uxtb	r3, r3
 80092d2:	f003 0301 	and.w	r3, r3, #1
 80092d6:	b2da      	uxtb	r2, r3
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80092e0:	0b1b      	lsrs	r3, r3, #12
 80092e2:	b2db      	uxtb	r3, r3
 80092e4:	f003 0301 	and.w	r3, r3, #1
 80092e8:	b2da      	uxtb	r2, r3
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	2200      	movs	r2, #0
 80092f2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d163      	bne.n	80093c4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009300:	009a      	lsls	r2, r3, #2
 8009302:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009306:	4013      	ands	r3, r2
 8009308:	687a      	ldr	r2, [r7, #4]
 800930a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800930c:	0f92      	lsrs	r2, r2, #30
 800930e:	431a      	orrs	r2, r3
 8009310:	683b      	ldr	r3, [r7, #0]
 8009312:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009318:	0edb      	lsrs	r3, r3, #27
 800931a:	b2db      	uxtb	r3, r3
 800931c:	f003 0307 	and.w	r3, r3, #7
 8009320:	b2da      	uxtb	r2, r3
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800932a:	0e1b      	lsrs	r3, r3, #24
 800932c:	b2db      	uxtb	r3, r3
 800932e:	f003 0307 	and.w	r3, r3, #7
 8009332:	b2da      	uxtb	r2, r3
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800933c:	0d5b      	lsrs	r3, r3, #21
 800933e:	b2db      	uxtb	r3, r3
 8009340:	f003 0307 	and.w	r3, r3, #7
 8009344:	b2da      	uxtb	r2, r3
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800934e:	0c9b      	lsrs	r3, r3, #18
 8009350:	b2db      	uxtb	r3, r3
 8009352:	f003 0307 	and.w	r3, r3, #7
 8009356:	b2da      	uxtb	r2, r3
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009360:	0bdb      	lsrs	r3, r3, #15
 8009362:	b2db      	uxtb	r3, r3
 8009364:	f003 0307 	and.w	r3, r3, #7
 8009368:	b2da      	uxtb	r2, r3
 800936a:	683b      	ldr	r3, [r7, #0]
 800936c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	691b      	ldr	r3, [r3, #16]
 8009372:	1c5a      	adds	r2, r3, #1
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	7e1b      	ldrb	r3, [r3, #24]
 800937c:	b2db      	uxtb	r3, r3
 800937e:	f003 0307 	and.w	r3, r3, #7
 8009382:	3302      	adds	r3, #2
 8009384:	2201      	movs	r2, #1
 8009386:	fa02 f303 	lsl.w	r3, r2, r3
 800938a:	687a      	ldr	r2, [r7, #4]
 800938c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800938e:	fb02 f203 	mul.w	r2, r2, r3
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8009396:	683b      	ldr	r3, [r7, #0]
 8009398:	7a1b      	ldrb	r3, [r3, #8]
 800939a:	b2db      	uxtb	r3, r3
 800939c:	f003 030f 	and.w	r3, r3, #15
 80093a0:	2201      	movs	r2, #1
 80093a2:	409a      	lsls	r2, r3
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093ac:	687a      	ldr	r2, [r7, #4]
 80093ae:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80093b0:	0a52      	lsrs	r2, r2, #9
 80093b2:	fb02 f203 	mul.w	r2, r2, r3
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80093c0:	661a      	str	r2, [r3, #96]	; 0x60
 80093c2:	e031      	b.n	8009428 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093c8:	2b01      	cmp	r3, #1
 80093ca:	d11d      	bne.n	8009408 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80093d0:	041b      	lsls	r3, r3, #16
 80093d2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80093da:	0c1b      	lsrs	r3, r3, #16
 80093dc:	431a      	orrs	r2, r3
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	691b      	ldr	r3, [r3, #16]
 80093e6:	3301      	adds	r3, #1
 80093e8:	029a      	lsls	r2, r3, #10
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80093fc:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	661a      	str	r2, [r3, #96]	; 0x60
 8009406:	e00f      	b.n	8009428 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	4a58      	ldr	r2, [pc, #352]	; (8009570 <HAL_SD_GetCardCSD+0x344>)
 800940e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009414:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2201      	movs	r2, #1
 8009420:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009424:	2301      	movs	r3, #1
 8009426:	e09d      	b.n	8009564 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800942c:	0b9b      	lsrs	r3, r3, #14
 800942e:	b2db      	uxtb	r3, r3
 8009430:	f003 0301 	and.w	r3, r3, #1
 8009434:	b2da      	uxtb	r2, r3
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800943e:	09db      	lsrs	r3, r3, #7
 8009440:	b2db      	uxtb	r3, r3
 8009442:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009446:	b2da      	uxtb	r2, r3
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009450:	b2db      	uxtb	r3, r3
 8009452:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009456:	b2da      	uxtb	r2, r3
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009460:	0fdb      	lsrs	r3, r3, #31
 8009462:	b2da      	uxtb	r2, r3
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800946c:	0f5b      	lsrs	r3, r3, #29
 800946e:	b2db      	uxtb	r3, r3
 8009470:	f003 0303 	and.w	r3, r3, #3
 8009474:	b2da      	uxtb	r2, r3
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800947e:	0e9b      	lsrs	r3, r3, #26
 8009480:	b2db      	uxtb	r3, r3
 8009482:	f003 0307 	and.w	r3, r3, #7
 8009486:	b2da      	uxtb	r2, r3
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009490:	0d9b      	lsrs	r3, r3, #22
 8009492:	b2db      	uxtb	r3, r3
 8009494:	f003 030f 	and.w	r3, r3, #15
 8009498:	b2da      	uxtb	r2, r3
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094a2:	0d5b      	lsrs	r3, r3, #21
 80094a4:	b2db      	uxtb	r3, r3
 80094a6:	f003 0301 	and.w	r3, r3, #1
 80094aa:	b2da      	uxtb	r2, r3
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	2200      	movs	r2, #0
 80094b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094be:	0c1b      	lsrs	r3, r3, #16
 80094c0:	b2db      	uxtb	r3, r3
 80094c2:	f003 0301 	and.w	r3, r3, #1
 80094c6:	b2da      	uxtb	r2, r3
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094d2:	0bdb      	lsrs	r3, r3, #15
 80094d4:	b2db      	uxtb	r3, r3
 80094d6:	f003 0301 	and.w	r3, r3, #1
 80094da:	b2da      	uxtb	r2, r3
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094e6:	0b9b      	lsrs	r3, r3, #14
 80094e8:	b2db      	uxtb	r3, r3
 80094ea:	f003 0301 	and.w	r3, r3, #1
 80094ee:	b2da      	uxtb	r2, r3
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094fa:	0b5b      	lsrs	r3, r3, #13
 80094fc:	b2db      	uxtb	r3, r3
 80094fe:	f003 0301 	and.w	r3, r3, #1
 8009502:	b2da      	uxtb	r2, r3
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800950e:	0b1b      	lsrs	r3, r3, #12
 8009510:	b2db      	uxtb	r3, r3
 8009512:	f003 0301 	and.w	r3, r3, #1
 8009516:	b2da      	uxtb	r2, r3
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009522:	0a9b      	lsrs	r3, r3, #10
 8009524:	b2db      	uxtb	r3, r3
 8009526:	f003 0303 	and.w	r3, r3, #3
 800952a:	b2da      	uxtb	r2, r3
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009536:	0a1b      	lsrs	r3, r3, #8
 8009538:	b2db      	uxtb	r3, r3
 800953a:	f003 0303 	and.w	r3, r3, #3
 800953e:	b2da      	uxtb	r2, r3
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800954a:	085b      	lsrs	r3, r3, #1
 800954c:	b2db      	uxtb	r3, r3
 800954e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009552:	b2da      	uxtb	r2, r3
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	2201      	movs	r2, #1
 800955e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8009562:	2300      	movs	r3, #0
}
 8009564:	4618      	mov	r0, r3
 8009566:	370c      	adds	r7, #12
 8009568:	46bd      	mov	sp, r7
 800956a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956e:	4770      	bx	lr
 8009570:	004005ff 	.word	0x004005ff

08009574 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8009574:	b480      	push	{r7}
 8009576:	b083      	sub	sp, #12
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
 800957c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009582:	683b      	ldr	r3, [r7, #0]
 8009584:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80095be:	2300      	movs	r3, #0
}
 80095c0:	4618      	mov	r0, r3
 80095c2:	370c      	adds	r7, #12
 80095c4:	46bd      	mov	sp, r7
 80095c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ca:	4770      	bx	lr

080095cc <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80095cc:	b5b0      	push	{r4, r5, r7, lr}
 80095ce:	b08e      	sub	sp, #56	; 0x38
 80095d0:	af04      	add	r7, sp, #16
 80095d2:	6078      	str	r0, [r7, #4]
 80095d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2203      	movs	r2, #3
 80095da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095e2:	2b03      	cmp	r3, #3
 80095e4:	d02e      	beq.n	8009644 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80095ec:	d106      	bne.n	80095fc <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095f2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	639a      	str	r2, [r3, #56]	; 0x38
 80095fa:	e029      	b.n	8009650 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009602:	d10a      	bne.n	800961a <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8009604:	6878      	ldr	r0, [r7, #4]
 8009606:	f000 fb0f 	bl	8009c28 <SD_WideBus_Enable>
 800960a:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009612:	431a      	orrs	r2, r3
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	639a      	str	r2, [r3, #56]	; 0x38
 8009618:	e01a      	b.n	8009650 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d10a      	bne.n	8009636 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	f000 fb4c 	bl	8009cbe <SD_WideBus_Disable>
 8009626:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800962c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800962e:	431a      	orrs	r2, r3
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	639a      	str	r2, [r3, #56]	; 0x38
 8009634:	e00c      	b.n	8009650 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800963a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	639a      	str	r2, [r3, #56]	; 0x38
 8009642:	e005      	b.n	8009650 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009648:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009654:	2b00      	cmp	r3, #0
 8009656:	d009      	beq.n	800966c <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	4a18      	ldr	r2, [pc, #96]	; (80096c0 <HAL_SD_ConfigWideBusOperation+0xf4>)
 800965e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2201      	movs	r2, #1
 8009664:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009668:	2301      	movs	r3, #1
 800966a:	e024      	b.n	80096b6 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	685b      	ldr	r3, [r3, #4]
 8009670:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	689b      	ldr	r3, [r3, #8]
 8009676:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	68db      	ldr	r3, [r3, #12]
 800967c:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	695b      	ldr	r3, [r3, #20]
 8009686:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	699b      	ldr	r3, [r3, #24]
 800968c:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681d      	ldr	r5, [r3, #0]
 8009692:	466c      	mov	r4, sp
 8009694:	f107 0318 	add.w	r3, r7, #24
 8009698:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800969c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80096a0:	f107 030c 	add.w	r3, r7, #12
 80096a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80096a6:	4628      	mov	r0, r5
 80096a8:	f002 fcb2 	bl	800c010 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2201      	movs	r2, #1
 80096b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80096b4:	2300      	movs	r3, #0
}
 80096b6:	4618      	mov	r0, r3
 80096b8:	3728      	adds	r7, #40	; 0x28
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bdb0      	pop	{r4, r5, r7, pc}
 80096be:	bf00      	nop
 80096c0:	004005ff 	.word	0x004005ff

080096c4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b086      	sub	sp, #24
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80096cc:	2300      	movs	r3, #0
 80096ce:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80096d0:	f107 030c 	add.w	r3, r7, #12
 80096d4:	4619      	mov	r1, r3
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	f000 fa7e 	bl	8009bd8 <SD_SendStatus>
 80096dc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80096de:	697b      	ldr	r3, [r7, #20]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d005      	beq.n	80096f0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80096e8:	697b      	ldr	r3, [r7, #20]
 80096ea:	431a      	orrs	r2, r3
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	0a5b      	lsrs	r3, r3, #9
 80096f4:	f003 030f 	and.w	r3, r3, #15
 80096f8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80096fa:	693b      	ldr	r3, [r7, #16]
}
 80096fc:	4618      	mov	r0, r3
 80096fe:	3718      	adds	r7, #24
 8009700:	46bd      	mov	sp, r7
 8009702:	bd80      	pop	{r7, pc}

08009704 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009704:	b480      	push	{r7}
 8009706:	b085      	sub	sp, #20
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009710:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009720:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8009722:	bf00      	nop
 8009724:	3714      	adds	r7, #20
 8009726:	46bd      	mov	sp, r7
 8009728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972c:	4770      	bx	lr

0800972e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800972e:	b580      	push	{r7, lr}
 8009730:	b084      	sub	sp, #16
 8009732:	af00      	add	r7, sp, #0
 8009734:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800973a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009740:	2b82      	cmp	r3, #130	; 0x82
 8009742:	d111      	bne.n	8009768 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	4618      	mov	r0, r3
 800974a:	f002 fde7 	bl	800c31c <SDMMC_CmdStopTransfer>
 800974e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009750:	68bb      	ldr	r3, [r7, #8]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d008      	beq.n	8009768 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800975a:	68bb      	ldr	r3, [r7, #8]
 800975c:	431a      	orrs	r2, r3
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8009762:	68f8      	ldr	r0, [r7, #12]
 8009764:	f7ff fd58 	bl	8009218 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	f022 0208 	bic.w	r2, r2, #8
 8009776:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	f240 523a 	movw	r2, #1338	; 0x53a
 8009780:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	2201      	movs	r2, #1
 8009786:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	2200      	movs	r2, #0
 800978e:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8009790:	68f8      	ldr	r0, [r7, #12]
 8009792:	f003 fa47 	bl	800cc24 <HAL_SD_RxCpltCallback>
#endif
}
 8009796:	bf00      	nop
 8009798:	3710      	adds	r7, #16
 800979a:	46bd      	mov	sp, r7
 800979c:	bd80      	pop	{r7, pc}
	...

080097a0 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b086      	sub	sp, #24
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097ac:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80097ae:	6878      	ldr	r0, [r7, #4]
 80097b0:	f7fd f830 	bl	8006814 <HAL_DMA_GetError>
 80097b4:	4603      	mov	r3, r0
 80097b6:	2b02      	cmp	r3, #2
 80097b8:	d03e      	beq.n	8009838 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 80097ba:	697b      	ldr	r3, [r7, #20]
 80097bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097c0:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 80097c2:	697b      	ldr	r3, [r7, #20]
 80097c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097c8:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80097ca:	693b      	ldr	r3, [r7, #16]
 80097cc:	2b01      	cmp	r3, #1
 80097ce:	d002      	beq.n	80097d6 <SD_DMAError+0x36>
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	2b01      	cmp	r3, #1
 80097d4:	d12d      	bne.n	8009832 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80097d6:	697b      	ldr	r3, [r7, #20]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	4a19      	ldr	r2, [pc, #100]	; (8009840 <SD_DMAError+0xa0>)
 80097dc:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80097de:	697b      	ldr	r3, [r7, #20]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80097e4:	697b      	ldr	r3, [r7, #20]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80097ec:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80097ee:	697b      	ldr	r3, [r7, #20]
 80097f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097f2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80097f6:	697b      	ldr	r3, [r7, #20]
 80097f8:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 80097fa:	6978      	ldr	r0, [r7, #20]
 80097fc:	f7ff ff62 	bl	80096c4 <HAL_SD_GetCardState>
 8009800:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009802:	68bb      	ldr	r3, [r7, #8]
 8009804:	2b06      	cmp	r3, #6
 8009806:	d002      	beq.n	800980e <SD_DMAError+0x6e>
 8009808:	68bb      	ldr	r3, [r7, #8]
 800980a:	2b05      	cmp	r3, #5
 800980c:	d10a      	bne.n	8009824 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800980e:	697b      	ldr	r3, [r7, #20]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	4618      	mov	r0, r3
 8009814:	f002 fd82 	bl	800c31c <SDMMC_CmdStopTransfer>
 8009818:	4602      	mov	r2, r0
 800981a:	697b      	ldr	r3, [r7, #20]
 800981c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800981e:	431a      	orrs	r2, r3
 8009820:	697b      	ldr	r3, [r7, #20]
 8009822:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8009824:	697b      	ldr	r3, [r7, #20]
 8009826:	2201      	movs	r2, #1
 8009828:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800982c:	697b      	ldr	r3, [r7, #20]
 800982e:	2200      	movs	r2, #0
 8009830:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8009832:	6978      	ldr	r0, [r7, #20]
 8009834:	f7ff fcf0 	bl	8009218 <HAL_SD_ErrorCallback>
#endif
  }
}
 8009838:	bf00      	nop
 800983a:	3718      	adds	r7, #24
 800983c:	46bd      	mov	sp, r7
 800983e:	bd80      	pop	{r7, pc}
 8009840:	004005ff 	.word	0x004005ff

08009844 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b084      	sub	sp, #16
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009850:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	f240 523a 	movw	r2, #1338	; 0x53a
 800985a:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800985c:	68f8      	ldr	r0, [r7, #12]
 800985e:	f7ff ff31 	bl	80096c4 <HAL_SD_GetCardState>
 8009862:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	2201      	movs	r2, #1
 8009868:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	2200      	movs	r2, #0
 8009870:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009872:	68bb      	ldr	r3, [r7, #8]
 8009874:	2b06      	cmp	r3, #6
 8009876:	d002      	beq.n	800987e <SD_DMATxAbort+0x3a>
 8009878:	68bb      	ldr	r3, [r7, #8]
 800987a:	2b05      	cmp	r3, #5
 800987c:	d10a      	bne.n	8009894 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	4618      	mov	r0, r3
 8009884:	f002 fd4a 	bl	800c31c <SDMMC_CmdStopTransfer>
 8009888:	4602      	mov	r2, r0
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800988e:	431a      	orrs	r2, r3
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009898:	2b00      	cmp	r3, #0
 800989a:	d103      	bne.n	80098a4 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800989c:	68f8      	ldr	r0, [r7, #12]
 800989e:	f003 f9ad 	bl	800cbfc <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80098a2:	e002      	b.n	80098aa <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80098a4:	68f8      	ldr	r0, [r7, #12]
 80098a6:	f7ff fcb7 	bl	8009218 <HAL_SD_ErrorCallback>
}
 80098aa:	bf00      	nop
 80098ac:	3710      	adds	r7, #16
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bd80      	pop	{r7, pc}

080098b2 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 80098b2:	b580      	push	{r7, lr}
 80098b4:	b084      	sub	sp, #16
 80098b6:	af00      	add	r7, sp, #0
 80098b8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098be:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	f240 523a 	movw	r2, #1338	; 0x53a
 80098c8:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80098ca:	68f8      	ldr	r0, [r7, #12]
 80098cc:	f7ff fefa 	bl	80096c4 <HAL_SD_GetCardState>
 80098d0:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	2201      	movs	r2, #1
 80098d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	2200      	movs	r2, #0
 80098de:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80098e0:	68bb      	ldr	r3, [r7, #8]
 80098e2:	2b06      	cmp	r3, #6
 80098e4:	d002      	beq.n	80098ec <SD_DMARxAbort+0x3a>
 80098e6:	68bb      	ldr	r3, [r7, #8]
 80098e8:	2b05      	cmp	r3, #5
 80098ea:	d10a      	bne.n	8009902 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	4618      	mov	r0, r3
 80098f2:	f002 fd13 	bl	800c31c <SDMMC_CmdStopTransfer>
 80098f6:	4602      	mov	r2, r0
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098fc:	431a      	orrs	r2, r3
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009906:	2b00      	cmp	r3, #0
 8009908:	d103      	bne.n	8009912 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800990a:	68f8      	ldr	r0, [r7, #12]
 800990c:	f003 f976 	bl	800cbfc <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8009910:	e002      	b.n	8009918 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8009912:	68f8      	ldr	r0, [r7, #12]
 8009914:	f7ff fc80 	bl	8009218 <HAL_SD_ErrorCallback>
}
 8009918:	bf00      	nop
 800991a:	3710      	adds	r7, #16
 800991c:	46bd      	mov	sp, r7
 800991e:	bd80      	pop	{r7, pc}

08009920 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009920:	b5b0      	push	{r4, r5, r7, lr}
 8009922:	b094      	sub	sp, #80	; 0x50
 8009924:	af04      	add	r7, sp, #16
 8009926:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8009928:	2301      	movs	r3, #1
 800992a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	4618      	mov	r0, r3
 8009932:	f002 fbc5 	bl	800c0c0 <SDIO_GetPowerState>
 8009936:	4603      	mov	r3, r0
 8009938:	2b00      	cmp	r3, #0
 800993a:	d102      	bne.n	8009942 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800993c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8009940:	e0b7      	b.n	8009ab2 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009946:	2b03      	cmp	r3, #3
 8009948:	d02f      	beq.n	80099aa <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	4618      	mov	r0, r3
 8009950:	f002 fdee 	bl	800c530 <SDMMC_CmdSendCID>
 8009954:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009956:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009958:	2b00      	cmp	r3, #0
 800995a:	d001      	beq.n	8009960 <SD_InitCard+0x40>
    {
      return errorstate;
 800995c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800995e:	e0a8      	b.n	8009ab2 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	2100      	movs	r1, #0
 8009966:	4618      	mov	r0, r3
 8009968:	f002 fbef 	bl	800c14a <SDIO_GetResponse>
 800996c:	4602      	mov	r2, r0
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	2104      	movs	r1, #4
 8009978:	4618      	mov	r0, r3
 800997a:	f002 fbe6 	bl	800c14a <SDIO_GetResponse>
 800997e:	4602      	mov	r2, r0
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	2108      	movs	r1, #8
 800998a:	4618      	mov	r0, r3
 800998c:	f002 fbdd 	bl	800c14a <SDIO_GetResponse>
 8009990:	4602      	mov	r2, r0
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	210c      	movs	r1, #12
 800999c:	4618      	mov	r0, r3
 800999e:	f002 fbd4 	bl	800c14a <SDIO_GetResponse>
 80099a2:	4602      	mov	r2, r0
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099ae:	2b03      	cmp	r3, #3
 80099b0:	d00d      	beq.n	80099ce <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	f107 020e 	add.w	r2, r7, #14
 80099ba:	4611      	mov	r1, r2
 80099bc:	4618      	mov	r0, r3
 80099be:	f002 fdf4 	bl	800c5aa <SDMMC_CmdSetRelAdd>
 80099c2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80099c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d001      	beq.n	80099ce <SD_InitCard+0xae>
    {
      return errorstate;
 80099ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099cc:	e071      	b.n	8009ab2 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099d2:	2b03      	cmp	r3, #3
 80099d4:	d036      	beq.n	8009a44 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80099d6:	89fb      	ldrh	r3, [r7, #14]
 80099d8:	461a      	mov	r2, r3
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681a      	ldr	r2, [r3, #0]
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099e6:	041b      	lsls	r3, r3, #16
 80099e8:	4619      	mov	r1, r3
 80099ea:	4610      	mov	r0, r2
 80099ec:	f002 fdbe 	bl	800c56c <SDMMC_CmdSendCSD>
 80099f0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80099f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d001      	beq.n	80099fc <SD_InitCard+0xdc>
    {
      return errorstate;
 80099f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099fa:	e05a      	b.n	8009ab2 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	2100      	movs	r1, #0
 8009a02:	4618      	mov	r0, r3
 8009a04:	f002 fba1 	bl	800c14a <SDIO_GetResponse>
 8009a08:	4602      	mov	r2, r0
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	2104      	movs	r1, #4
 8009a14:	4618      	mov	r0, r3
 8009a16:	f002 fb98 	bl	800c14a <SDIO_GetResponse>
 8009a1a:	4602      	mov	r2, r0
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	2108      	movs	r1, #8
 8009a26:	4618      	mov	r0, r3
 8009a28:	f002 fb8f 	bl	800c14a <SDIO_GetResponse>
 8009a2c:	4602      	mov	r2, r0
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	210c      	movs	r1, #12
 8009a38:	4618      	mov	r0, r3
 8009a3a:	f002 fb86 	bl	800c14a <SDIO_GetResponse>
 8009a3e:	4602      	mov	r2, r0
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	2104      	movs	r1, #4
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	f002 fb7d 	bl	800c14a <SDIO_GetResponse>
 8009a50:	4603      	mov	r3, r0
 8009a52:	0d1a      	lsrs	r2, r3, #20
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009a58:	f107 0310 	add.w	r3, r7, #16
 8009a5c:	4619      	mov	r1, r3
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	f7ff fbe4 	bl	800922c <HAL_SD_GetCardCSD>
 8009a64:	4603      	mov	r3, r0
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d002      	beq.n	8009a70 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009a6a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009a6e:	e020      	b.n	8009ab2 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	6819      	ldr	r1, [r3, #0]
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a78:	041b      	lsls	r3, r3, #16
 8009a7a:	f04f 0400 	mov.w	r4, #0
 8009a7e:	461a      	mov	r2, r3
 8009a80:	4623      	mov	r3, r4
 8009a82:	4608      	mov	r0, r1
 8009a84:	f002 fc6c 	bl	800c360 <SDMMC_CmdSelDesel>
 8009a88:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8009a8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d001      	beq.n	8009a94 <SD_InitCard+0x174>
  {
    return errorstate;
 8009a90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a92:	e00e      	b.n	8009ab2 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681d      	ldr	r5, [r3, #0]
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	466c      	mov	r4, sp
 8009a9c:	f103 0210 	add.w	r2, r3, #16
 8009aa0:	ca07      	ldmia	r2, {r0, r1, r2}
 8009aa2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009aa6:	3304      	adds	r3, #4
 8009aa8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009aaa:	4628      	mov	r0, r5
 8009aac:	f002 fab0 	bl	800c010 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009ab0:	2300      	movs	r3, #0
}
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	3740      	adds	r7, #64	; 0x40
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	bdb0      	pop	{r4, r5, r7, pc}
	...

08009abc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b086      	sub	sp, #24
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8009ac8:	2300      	movs	r3, #0
 8009aca:	617b      	str	r3, [r7, #20]
 8009acc:	2300      	movs	r3, #0
 8009ace:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	f002 fc66 	bl	800c3a6 <SDMMC_CmdGoIdleState>
 8009ada:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d001      	beq.n	8009ae6 <SD_PowerON+0x2a>
  {
    return errorstate;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	e072      	b.n	8009bcc <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	4618      	mov	r0, r3
 8009aec:	f002 fc79 	bl	800c3e2 <SDMMC_CmdOperCond>
 8009af0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d00d      	beq.n	8009b14 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2200      	movs	r2, #0
 8009afc:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	4618      	mov	r0, r3
 8009b04:	f002 fc4f 	bl	800c3a6 <SDMMC_CmdGoIdleState>
 8009b08:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d004      	beq.n	8009b1a <SD_PowerON+0x5e>
    {
      return errorstate;
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	e05b      	b.n	8009bcc <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2201      	movs	r2, #1
 8009b18:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b1e:	2b01      	cmp	r3, #1
 8009b20:	d137      	bne.n	8009b92 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	2100      	movs	r1, #0
 8009b28:	4618      	mov	r0, r3
 8009b2a:	f002 fc79 	bl	800c420 <SDMMC_CmdAppCommand>
 8009b2e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d02d      	beq.n	8009b92 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009b36:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009b3a:	e047      	b.n	8009bcc <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	2100      	movs	r1, #0
 8009b42:	4618      	mov	r0, r3
 8009b44:	f002 fc6c 	bl	800c420 <SDMMC_CmdAppCommand>
 8009b48:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d001      	beq.n	8009b54 <SD_PowerON+0x98>
    {
      return errorstate;
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	e03b      	b.n	8009bcc <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	491e      	ldr	r1, [pc, #120]	; (8009bd4 <SD_PowerON+0x118>)
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	f002 fc82 	bl	800c464 <SDMMC_CmdAppOperCommand>
 8009b60:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d002      	beq.n	8009b6e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009b68:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009b6c:	e02e      	b.n	8009bcc <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	2100      	movs	r1, #0
 8009b74:	4618      	mov	r0, r3
 8009b76:	f002 fae8 	bl	800c14a <SDIO_GetResponse>
 8009b7a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009b7c:	697b      	ldr	r3, [r7, #20]
 8009b7e:	0fdb      	lsrs	r3, r3, #31
 8009b80:	2b01      	cmp	r3, #1
 8009b82:	d101      	bne.n	8009b88 <SD_PowerON+0xcc>
 8009b84:	2301      	movs	r3, #1
 8009b86:	e000      	b.n	8009b8a <SD_PowerON+0xce>
 8009b88:	2300      	movs	r3, #0
 8009b8a:	613b      	str	r3, [r7, #16]

    count++;
 8009b8c:	68bb      	ldr	r3, [r7, #8]
 8009b8e:	3301      	adds	r3, #1
 8009b90:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009b92:	68bb      	ldr	r3, [r7, #8]
 8009b94:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009b98:	4293      	cmp	r3, r2
 8009b9a:	d802      	bhi.n	8009ba2 <SD_PowerON+0xe6>
 8009b9c:	693b      	ldr	r3, [r7, #16]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d0cc      	beq.n	8009b3c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8009ba2:	68bb      	ldr	r3, [r7, #8]
 8009ba4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009ba8:	4293      	cmp	r3, r2
 8009baa:	d902      	bls.n	8009bb2 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009bac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009bb0:	e00c      	b.n	8009bcc <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8009bb2:	697b      	ldr	r3, [r7, #20]
 8009bb4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d003      	beq.n	8009bc4 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2201      	movs	r2, #1
 8009bc0:	645a      	str	r2, [r3, #68]	; 0x44
 8009bc2:	e002      	b.n	8009bca <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8009bca:	2300      	movs	r3, #0
}
 8009bcc:	4618      	mov	r0, r3
 8009bce:	3718      	adds	r7, #24
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bd80      	pop	{r7, pc}
 8009bd4:	c1100000 	.word	0xc1100000

08009bd8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b084      	sub	sp, #16
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
 8009be0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d102      	bne.n	8009bee <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009be8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009bec:	e018      	b.n	8009c20 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681a      	ldr	r2, [r3, #0]
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009bf6:	041b      	lsls	r3, r3, #16
 8009bf8:	4619      	mov	r1, r3
 8009bfa:	4610      	mov	r0, r2
 8009bfc:	f002 fcf6 	bl	800c5ec <SDMMC_CmdSendStatus>
 8009c00:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d001      	beq.n	8009c0c <SD_SendStatus+0x34>
  {
    return errorstate;
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	e009      	b.n	8009c20 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	2100      	movs	r1, #0
 8009c12:	4618      	mov	r0, r3
 8009c14:	f002 fa99 	bl	800c14a <SDIO_GetResponse>
 8009c18:	4602      	mov	r2, r0
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009c1e:	2300      	movs	r3, #0
}
 8009c20:	4618      	mov	r0, r3
 8009c22:	3710      	adds	r7, #16
 8009c24:	46bd      	mov	sp, r7
 8009c26:	bd80      	pop	{r7, pc}

08009c28 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b086      	sub	sp, #24
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009c30:	2300      	movs	r3, #0
 8009c32:	60fb      	str	r3, [r7, #12]
 8009c34:	2300      	movs	r3, #0
 8009c36:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	2100      	movs	r1, #0
 8009c3e:	4618      	mov	r0, r3
 8009c40:	f002 fa83 	bl	800c14a <SDIO_GetResponse>
 8009c44:	4603      	mov	r3, r0
 8009c46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009c4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009c4e:	d102      	bne.n	8009c56 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009c50:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009c54:	e02f      	b.n	8009cb6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009c56:	f107 030c 	add.w	r3, r7, #12
 8009c5a:	4619      	mov	r1, r3
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	f000 f879 	bl	8009d54 <SD_FindSCR>
 8009c62:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009c64:	697b      	ldr	r3, [r7, #20]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d001      	beq.n	8009c6e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8009c6a:	697b      	ldr	r3, [r7, #20]
 8009c6c:	e023      	b.n	8009cb6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009c6e:	693b      	ldr	r3, [r7, #16]
 8009c70:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d01c      	beq.n	8009cb2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681a      	ldr	r2, [r3, #0]
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c80:	041b      	lsls	r3, r3, #16
 8009c82:	4619      	mov	r1, r3
 8009c84:	4610      	mov	r0, r2
 8009c86:	f002 fbcb 	bl	800c420 <SDMMC_CmdAppCommand>
 8009c8a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009c8c:	697b      	ldr	r3, [r7, #20]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d001      	beq.n	8009c96 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8009c92:	697b      	ldr	r3, [r7, #20]
 8009c94:	e00f      	b.n	8009cb6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	2102      	movs	r1, #2
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	f002 fc04 	bl	800c4aa <SDMMC_CmdBusWidth>
 8009ca2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009ca4:	697b      	ldr	r3, [r7, #20]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d001      	beq.n	8009cae <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8009caa:	697b      	ldr	r3, [r7, #20]
 8009cac:	e003      	b.n	8009cb6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009cae:	2300      	movs	r3, #0
 8009cb0:	e001      	b.n	8009cb6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009cb2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	3718      	adds	r7, #24
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	bd80      	pop	{r7, pc}

08009cbe <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8009cbe:	b580      	push	{r7, lr}
 8009cc0:	b086      	sub	sp, #24
 8009cc2:	af00      	add	r7, sp, #0
 8009cc4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	60fb      	str	r3, [r7, #12]
 8009cca:	2300      	movs	r3, #0
 8009ccc:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	2100      	movs	r1, #0
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	f002 fa38 	bl	800c14a <SDIO_GetResponse>
 8009cda:	4603      	mov	r3, r0
 8009cdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ce0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009ce4:	d102      	bne.n	8009cec <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009ce6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009cea:	e02f      	b.n	8009d4c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009cec:	f107 030c 	add.w	r3, r7, #12
 8009cf0:	4619      	mov	r1, r3
 8009cf2:	6878      	ldr	r0, [r7, #4]
 8009cf4:	f000 f82e 	bl	8009d54 <SD_FindSCR>
 8009cf8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009cfa:	697b      	ldr	r3, [r7, #20]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d001      	beq.n	8009d04 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009d00:	697b      	ldr	r3, [r7, #20]
 8009d02:	e023      	b.n	8009d4c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009d04:	693b      	ldr	r3, [r7, #16]
 8009d06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d01c      	beq.n	8009d48 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681a      	ldr	r2, [r3, #0]
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d16:	041b      	lsls	r3, r3, #16
 8009d18:	4619      	mov	r1, r3
 8009d1a:	4610      	mov	r0, r2
 8009d1c:	f002 fb80 	bl	800c420 <SDMMC_CmdAppCommand>
 8009d20:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009d22:	697b      	ldr	r3, [r7, #20]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d001      	beq.n	8009d2c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009d28:	697b      	ldr	r3, [r7, #20]
 8009d2a:	e00f      	b.n	8009d4c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	2100      	movs	r1, #0
 8009d32:	4618      	mov	r0, r3
 8009d34:	f002 fbb9 	bl	800c4aa <SDMMC_CmdBusWidth>
 8009d38:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009d3a:	697b      	ldr	r3, [r7, #20]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d001      	beq.n	8009d44 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009d40:	697b      	ldr	r3, [r7, #20]
 8009d42:	e003      	b.n	8009d4c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009d44:	2300      	movs	r3, #0
 8009d46:	e001      	b.n	8009d4c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009d48:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	3718      	adds	r7, #24
 8009d50:	46bd      	mov	sp, r7
 8009d52:	bd80      	pop	{r7, pc}

08009d54 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009d54:	b590      	push	{r4, r7, lr}
 8009d56:	b08f      	sub	sp, #60	; 0x3c
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
 8009d5c:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009d5e:	f7fb fd63 	bl	8005828 <HAL_GetTick>
 8009d62:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8009d64:	2300      	movs	r3, #0
 8009d66:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8009d68:	2300      	movs	r3, #0
 8009d6a:	60bb      	str	r3, [r7, #8]
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	2108      	movs	r1, #8
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	f002 fa24 	bl	800c1c8 <SDMMC_CmdBlockLength>
 8009d80:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d001      	beq.n	8009d8c <SD_FindSCR+0x38>
  {
    return errorstate;
 8009d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d8a:	e0a9      	b.n	8009ee0 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681a      	ldr	r2, [r3, #0]
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d94:	041b      	lsls	r3, r3, #16
 8009d96:	4619      	mov	r1, r3
 8009d98:	4610      	mov	r0, r2
 8009d9a:	f002 fb41 	bl	800c420 <SDMMC_CmdAppCommand>
 8009d9e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d001      	beq.n	8009daa <SD_FindSCR+0x56>
  {
    return errorstate;
 8009da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009da8:	e09a      	b.n	8009ee0 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009daa:	f04f 33ff 	mov.w	r3, #4294967295
 8009dae:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8009db0:	2308      	movs	r3, #8
 8009db2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8009db4:	2330      	movs	r3, #48	; 0x30
 8009db6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8009db8:	2302      	movs	r3, #2
 8009dba:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8009dc0:	2301      	movs	r3, #1
 8009dc2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	f107 0210 	add.w	r2, r7, #16
 8009dcc:	4611      	mov	r1, r2
 8009dce:	4618      	mov	r0, r3
 8009dd0:	f002 f9ce 	bl	800c170 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	4618      	mov	r0, r3
 8009dda:	f002 fb88 	bl	800c4ee <SDMMC_CmdSendSCR>
 8009dde:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d022      	beq.n	8009e2c <SD_FindSCR+0xd8>
  {
    return errorstate;
 8009de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009de8:	e07a      	b.n	8009ee0 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009df0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d00e      	beq.n	8009e16 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	6819      	ldr	r1, [r3, #0]
 8009dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dfe:	009b      	lsls	r3, r3, #2
 8009e00:	f107 0208 	add.w	r2, r7, #8
 8009e04:	18d4      	adds	r4, r2, r3
 8009e06:	4608      	mov	r0, r1
 8009e08:	f002 f92d 	bl	800c066 <SDIO_ReadFIFO>
 8009e0c:	4603      	mov	r3, r0
 8009e0e:	6023      	str	r3, [r4, #0]
      index++;
 8009e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e12:	3301      	adds	r3, #1
 8009e14:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009e16:	f7fb fd07 	bl	8005828 <HAL_GetTick>
 8009e1a:	4602      	mov	r2, r0
 8009e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e1e:	1ad3      	subs	r3, r2, r3
 8009e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e24:	d102      	bne.n	8009e2c <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009e26:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009e2a:	e059      	b.n	8009ee0 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009e32:	f240 432a 	movw	r3, #1066	; 0x42a
 8009e36:	4013      	ands	r3, r2
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d0d6      	beq.n	8009dea <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e42:	f003 0308 	and.w	r3, r3, #8
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d005      	beq.n	8009e56 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	2208      	movs	r2, #8
 8009e50:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009e52:	2308      	movs	r3, #8
 8009e54:	e044      	b.n	8009ee0 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e5c:	f003 0302 	and.w	r3, r3, #2
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d005      	beq.n	8009e70 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	2202      	movs	r2, #2
 8009e6a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009e6c:	2302      	movs	r3, #2
 8009e6e:	e037      	b.n	8009ee0 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e76:	f003 0320 	and.w	r3, r3, #32
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d005      	beq.n	8009e8a <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	2220      	movs	r2, #32
 8009e84:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8009e86:	2320      	movs	r3, #32
 8009e88:	e02a      	b.n	8009ee0 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	f240 523a 	movw	r2, #1338	; 0x53a
 8009e92:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	061a      	lsls	r2, r3, #24
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	021b      	lsls	r3, r3, #8
 8009e9c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009ea0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	0a1b      	lsrs	r3, r3, #8
 8009ea6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009eaa:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	0e1b      	lsrs	r3, r3, #24
 8009eb0:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eb4:	601a      	str	r2, [r3, #0]
    scr++;
 8009eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eb8:	3304      	adds	r3, #4
 8009eba:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009ebc:	68bb      	ldr	r3, [r7, #8]
 8009ebe:	061a      	lsls	r2, r3, #24
 8009ec0:	68bb      	ldr	r3, [r7, #8]
 8009ec2:	021b      	lsls	r3, r3, #8
 8009ec4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009ec8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009eca:	68bb      	ldr	r3, [r7, #8]
 8009ecc:	0a1b      	lsrs	r3, r3, #8
 8009ece:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009ed2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009ed4:	68bb      	ldr	r3, [r7, #8]
 8009ed6:	0e1b      	lsrs	r3, r3, #24
 8009ed8:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009edc:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8009ede:	2300      	movs	r3, #0
}
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	373c      	adds	r7, #60	; 0x3c
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	bd90      	pop	{r4, r7, pc}

08009ee8 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b086      	sub	sp, #24
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ef4:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009efa:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8009efc:	693b      	ldr	r3, [r7, #16]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d03f      	beq.n	8009f82 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8009f02:	2300      	movs	r3, #0
 8009f04:	617b      	str	r3, [r7, #20]
 8009f06:	e033      	b.n	8009f70 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	f002 f8aa 	bl	800c066 <SDIO_ReadFIFO>
 8009f12:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8009f14:	68bb      	ldr	r3, [r7, #8]
 8009f16:	b2da      	uxtb	r2, r3
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	3301      	adds	r3, #1
 8009f20:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009f22:	693b      	ldr	r3, [r7, #16]
 8009f24:	3b01      	subs	r3, #1
 8009f26:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8009f28:	68bb      	ldr	r3, [r7, #8]
 8009f2a:	0a1b      	lsrs	r3, r3, #8
 8009f2c:	b2da      	uxtb	r2, r3
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	3301      	adds	r3, #1
 8009f36:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009f38:	693b      	ldr	r3, [r7, #16]
 8009f3a:	3b01      	subs	r3, #1
 8009f3c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8009f3e:	68bb      	ldr	r3, [r7, #8]
 8009f40:	0c1b      	lsrs	r3, r3, #16
 8009f42:	b2da      	uxtb	r2, r3
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	3301      	adds	r3, #1
 8009f4c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009f4e:	693b      	ldr	r3, [r7, #16]
 8009f50:	3b01      	subs	r3, #1
 8009f52:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8009f54:	68bb      	ldr	r3, [r7, #8]
 8009f56:	0e1b      	lsrs	r3, r3, #24
 8009f58:	b2da      	uxtb	r2, r3
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	3301      	adds	r3, #1
 8009f62:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009f64:	693b      	ldr	r3, [r7, #16]
 8009f66:	3b01      	subs	r3, #1
 8009f68:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8009f6a:	697b      	ldr	r3, [r7, #20]
 8009f6c:	3301      	adds	r3, #1
 8009f6e:	617b      	str	r3, [r7, #20]
 8009f70:	697b      	ldr	r3, [r7, #20]
 8009f72:	2b07      	cmp	r3, #7
 8009f74:	d9c8      	bls.n	8009f08 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	68fa      	ldr	r2, [r7, #12]
 8009f7a:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	693a      	ldr	r2, [r7, #16]
 8009f80:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8009f82:	bf00      	nop
 8009f84:	3718      	adds	r7, #24
 8009f86:	46bd      	mov	sp, r7
 8009f88:	bd80      	pop	{r7, pc}

08009f8a <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8009f8a:	b580      	push	{r7, lr}
 8009f8c:	b086      	sub	sp, #24
 8009f8e:	af00      	add	r7, sp, #0
 8009f90:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	6a1b      	ldr	r3, [r3, #32]
 8009f96:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f9c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8009f9e:	693b      	ldr	r3, [r7, #16]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d043      	beq.n	800a02c <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	617b      	str	r3, [r7, #20]
 8009fa8:	e037      	b.n	800a01a <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	781b      	ldrb	r3, [r3, #0]
 8009fae:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	3301      	adds	r3, #1
 8009fb4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009fb6:	693b      	ldr	r3, [r7, #16]
 8009fb8:	3b01      	subs	r3, #1
 8009fba:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	781b      	ldrb	r3, [r3, #0]
 8009fc0:	021a      	lsls	r2, r3, #8
 8009fc2:	68bb      	ldr	r3, [r7, #8]
 8009fc4:	4313      	orrs	r3, r2
 8009fc6:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	3301      	adds	r3, #1
 8009fcc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009fce:	693b      	ldr	r3, [r7, #16]
 8009fd0:	3b01      	subs	r3, #1
 8009fd2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	781b      	ldrb	r3, [r3, #0]
 8009fd8:	041a      	lsls	r2, r3, #16
 8009fda:	68bb      	ldr	r3, [r7, #8]
 8009fdc:	4313      	orrs	r3, r2
 8009fde:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	3301      	adds	r3, #1
 8009fe4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009fe6:	693b      	ldr	r3, [r7, #16]
 8009fe8:	3b01      	subs	r3, #1
 8009fea:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	781b      	ldrb	r3, [r3, #0]
 8009ff0:	061a      	lsls	r2, r3, #24
 8009ff2:	68bb      	ldr	r3, [r7, #8]
 8009ff4:	4313      	orrs	r3, r2
 8009ff6:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	3301      	adds	r3, #1
 8009ffc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009ffe:	693b      	ldr	r3, [r7, #16]
 800a000:	3b01      	subs	r3, #1
 800a002:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	f107 0208 	add.w	r2, r7, #8
 800a00c:	4611      	mov	r1, r2
 800a00e:	4618      	mov	r0, r3
 800a010:	f002 f836 	bl	800c080 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800a014:	697b      	ldr	r3, [r7, #20]
 800a016:	3301      	adds	r3, #1
 800a018:	617b      	str	r3, [r7, #20]
 800a01a:	697b      	ldr	r3, [r7, #20]
 800a01c:	2b07      	cmp	r3, #7
 800a01e:	d9c4      	bls.n	8009faa <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	68fa      	ldr	r2, [r7, #12]
 800a024:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	693a      	ldr	r2, [r7, #16]
 800a02a:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800a02c:	bf00      	nop
 800a02e:	3718      	adds	r7, #24
 800a030:	46bd      	mov	sp, r7
 800a032:	bd80      	pop	{r7, pc}

0800a034 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a034:	b580      	push	{r7, lr}
 800a036:	b082      	sub	sp, #8
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d101      	bne.n	800a046 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a042:	2301      	movs	r3, #1
 800a044:	e056      	b.n	800a0f4 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	2200      	movs	r2, #0
 800a04a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a052:	b2db      	uxtb	r3, r3
 800a054:	2b00      	cmp	r3, #0
 800a056:	d106      	bne.n	800a066 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	2200      	movs	r2, #0
 800a05c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a060:	6878      	ldr	r0, [r7, #4]
 800a062:	f7fa fc2d 	bl	80048c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	2202      	movs	r2, #2
 800a06a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	681a      	ldr	r2, [r3, #0]
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a07c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	685a      	ldr	r2, [r3, #4]
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	689b      	ldr	r3, [r3, #8]
 800a086:	431a      	orrs	r2, r3
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	68db      	ldr	r3, [r3, #12]
 800a08c:	431a      	orrs	r2, r3
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	691b      	ldr	r3, [r3, #16]
 800a092:	431a      	orrs	r2, r3
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	695b      	ldr	r3, [r3, #20]
 800a098:	431a      	orrs	r2, r3
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	699b      	ldr	r3, [r3, #24]
 800a09e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a0a2:	431a      	orrs	r2, r3
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	69db      	ldr	r3, [r3, #28]
 800a0a8:	431a      	orrs	r2, r3
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	6a1b      	ldr	r3, [r3, #32]
 800a0ae:	ea42 0103 	orr.w	r1, r2, r3
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	430a      	orrs	r2, r1
 800a0bc:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	699b      	ldr	r3, [r3, #24]
 800a0c2:	0c1b      	lsrs	r3, r3, #16
 800a0c4:	f003 0104 	and.w	r1, r3, #4
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	430a      	orrs	r2, r1
 800a0d2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	69da      	ldr	r2, [r3, #28]
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a0e2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	2201      	movs	r2, #1
 800a0ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800a0f2:	2300      	movs	r3, #0
}
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	3708      	adds	r7, #8
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	bd80      	pop	{r7, pc}

0800a0fc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b088      	sub	sp, #32
 800a100:	af00      	add	r7, sp, #0
 800a102:	60f8      	str	r0, [r7, #12]
 800a104:	60b9      	str	r1, [r7, #8]
 800a106:	603b      	str	r3, [r7, #0]
 800a108:	4613      	mov	r3, r2
 800a10a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a10c:	2300      	movs	r3, #0
 800a10e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a116:	2b01      	cmp	r3, #1
 800a118:	d101      	bne.n	800a11e <HAL_SPI_Transmit+0x22>
 800a11a:	2302      	movs	r3, #2
 800a11c:	e11e      	b.n	800a35c <HAL_SPI_Transmit+0x260>
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	2201      	movs	r2, #1
 800a122:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a126:	f7fb fb7f 	bl	8005828 <HAL_GetTick>
 800a12a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800a12c:	88fb      	ldrh	r3, [r7, #6]
 800a12e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a136:	b2db      	uxtb	r3, r3
 800a138:	2b01      	cmp	r3, #1
 800a13a:	d002      	beq.n	800a142 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800a13c:	2302      	movs	r3, #2
 800a13e:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a140:	e103      	b.n	800a34a <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800a142:	68bb      	ldr	r3, [r7, #8]
 800a144:	2b00      	cmp	r3, #0
 800a146:	d002      	beq.n	800a14e <HAL_SPI_Transmit+0x52>
 800a148:	88fb      	ldrh	r3, [r7, #6]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d102      	bne.n	800a154 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800a14e:	2301      	movs	r3, #1
 800a150:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a152:	e0fa      	b.n	800a34a <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	2203      	movs	r2, #3
 800a158:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	2200      	movs	r2, #0
 800a160:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	68ba      	ldr	r2, [r7, #8]
 800a166:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	88fa      	ldrh	r2, [r7, #6]
 800a16c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	88fa      	ldrh	r2, [r7, #6]
 800a172:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	2200      	movs	r2, #0
 800a178:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	2200      	movs	r2, #0
 800a17e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	2200      	movs	r2, #0
 800a184:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	2200      	movs	r2, #0
 800a18a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	2200      	movs	r2, #0
 800a190:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	689b      	ldr	r3, [r3, #8]
 800a196:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a19a:	d107      	bne.n	800a1ac <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	681a      	ldr	r2, [r3, #0]
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a1aa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1b6:	2b40      	cmp	r3, #64	; 0x40
 800a1b8:	d007      	beq.n	800a1ca <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	681a      	ldr	r2, [r3, #0]
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a1c8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	68db      	ldr	r3, [r3, #12]
 800a1ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a1d2:	d14b      	bne.n	800a26c <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	685b      	ldr	r3, [r3, #4]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d002      	beq.n	800a1e2 <HAL_SPI_Transmit+0xe6>
 800a1dc:	8afb      	ldrh	r3, [r7, #22]
 800a1de:	2b01      	cmp	r3, #1
 800a1e0:	d13e      	bne.n	800a260 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1e6:	881a      	ldrh	r2, [r3, #0]
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1f2:	1c9a      	adds	r2, r3, #2
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a1fc:	b29b      	uxth	r3, r3
 800a1fe:	3b01      	subs	r3, #1
 800a200:	b29a      	uxth	r2, r3
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800a206:	e02b      	b.n	800a260 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	689b      	ldr	r3, [r3, #8]
 800a20e:	f003 0302 	and.w	r3, r3, #2
 800a212:	2b02      	cmp	r3, #2
 800a214:	d112      	bne.n	800a23c <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a21a:	881a      	ldrh	r2, [r3, #0]
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a226:	1c9a      	adds	r2, r3, #2
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a230:	b29b      	uxth	r3, r3
 800a232:	3b01      	subs	r3, #1
 800a234:	b29a      	uxth	r2, r3
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	86da      	strh	r2, [r3, #54]	; 0x36
 800a23a:	e011      	b.n	800a260 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a23c:	f7fb faf4 	bl	8005828 <HAL_GetTick>
 800a240:	4602      	mov	r2, r0
 800a242:	69bb      	ldr	r3, [r7, #24]
 800a244:	1ad3      	subs	r3, r2, r3
 800a246:	683a      	ldr	r2, [r7, #0]
 800a248:	429a      	cmp	r2, r3
 800a24a:	d803      	bhi.n	800a254 <HAL_SPI_Transmit+0x158>
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a252:	d102      	bne.n	800a25a <HAL_SPI_Transmit+0x15e>
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d102      	bne.n	800a260 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800a25a:	2303      	movs	r3, #3
 800a25c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a25e:	e074      	b.n	800a34a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a264:	b29b      	uxth	r3, r3
 800a266:	2b00      	cmp	r3, #0
 800a268:	d1ce      	bne.n	800a208 <HAL_SPI_Transmit+0x10c>
 800a26a:	e04c      	b.n	800a306 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	685b      	ldr	r3, [r3, #4]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d002      	beq.n	800a27a <HAL_SPI_Transmit+0x17e>
 800a274:	8afb      	ldrh	r3, [r7, #22]
 800a276:	2b01      	cmp	r3, #1
 800a278:	d140      	bne.n	800a2fc <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	330c      	adds	r3, #12
 800a284:	7812      	ldrb	r2, [r2, #0]
 800a286:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a28c:	1c5a      	adds	r2, r3, #1
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a296:	b29b      	uxth	r3, r3
 800a298:	3b01      	subs	r3, #1
 800a29a:	b29a      	uxth	r2, r3
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800a2a0:	e02c      	b.n	800a2fc <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	689b      	ldr	r3, [r3, #8]
 800a2a8:	f003 0302 	and.w	r3, r3, #2
 800a2ac:	2b02      	cmp	r3, #2
 800a2ae:	d113      	bne.n	800a2d8 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	330c      	adds	r3, #12
 800a2ba:	7812      	ldrb	r2, [r2, #0]
 800a2bc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2c2:	1c5a      	adds	r2, r3, #1
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a2cc:	b29b      	uxth	r3, r3
 800a2ce:	3b01      	subs	r3, #1
 800a2d0:	b29a      	uxth	r2, r3
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	86da      	strh	r2, [r3, #54]	; 0x36
 800a2d6:	e011      	b.n	800a2fc <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a2d8:	f7fb faa6 	bl	8005828 <HAL_GetTick>
 800a2dc:	4602      	mov	r2, r0
 800a2de:	69bb      	ldr	r3, [r7, #24]
 800a2e0:	1ad3      	subs	r3, r2, r3
 800a2e2:	683a      	ldr	r2, [r7, #0]
 800a2e4:	429a      	cmp	r2, r3
 800a2e6:	d803      	bhi.n	800a2f0 <HAL_SPI_Transmit+0x1f4>
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2ee:	d102      	bne.n	800a2f6 <HAL_SPI_Transmit+0x1fa>
 800a2f0:	683b      	ldr	r3, [r7, #0]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d102      	bne.n	800a2fc <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800a2f6:	2303      	movs	r3, #3
 800a2f8:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a2fa:	e026      	b.n	800a34a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a300:	b29b      	uxth	r3, r3
 800a302:	2b00      	cmp	r3, #0
 800a304:	d1cd      	bne.n	800a2a2 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a306:	69ba      	ldr	r2, [r7, #24]
 800a308:	6839      	ldr	r1, [r7, #0]
 800a30a:	68f8      	ldr	r0, [r7, #12]
 800a30c:	f000 fba4 	bl	800aa58 <SPI_EndRxTxTransaction>
 800a310:	4603      	mov	r3, r0
 800a312:	2b00      	cmp	r3, #0
 800a314:	d002      	beq.n	800a31c <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	2220      	movs	r2, #32
 800a31a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	689b      	ldr	r3, [r3, #8]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d10a      	bne.n	800a33a <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a324:	2300      	movs	r3, #0
 800a326:	613b      	str	r3, [r7, #16]
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	68db      	ldr	r3, [r3, #12]
 800a32e:	613b      	str	r3, [r7, #16]
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	689b      	ldr	r3, [r3, #8]
 800a336:	613b      	str	r3, [r7, #16]
 800a338:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d002      	beq.n	800a348 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800a342:	2301      	movs	r3, #1
 800a344:	77fb      	strb	r3, [r7, #31]
 800a346:	e000      	b.n	800a34a <HAL_SPI_Transmit+0x24e>
  }

error:
 800a348:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	2201      	movs	r2, #1
 800a34e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	2200      	movs	r2, #0
 800a356:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a35a:	7ffb      	ldrb	r3, [r7, #31]
}
 800a35c:	4618      	mov	r0, r3
 800a35e:	3720      	adds	r7, #32
 800a360:	46bd      	mov	sp, r7
 800a362:	bd80      	pop	{r7, pc}

0800a364 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a364:	b580      	push	{r7, lr}
 800a366:	b088      	sub	sp, #32
 800a368:	af02      	add	r7, sp, #8
 800a36a:	60f8      	str	r0, [r7, #12]
 800a36c:	60b9      	str	r1, [r7, #8]
 800a36e:	603b      	str	r3, [r7, #0]
 800a370:	4613      	mov	r3, r2
 800a372:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a374:	2300      	movs	r3, #0
 800a376:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	685b      	ldr	r3, [r3, #4]
 800a37c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a380:	d112      	bne.n	800a3a8 <HAL_SPI_Receive+0x44>
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	689b      	ldr	r3, [r3, #8]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d10e      	bne.n	800a3a8 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	2204      	movs	r2, #4
 800a38e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800a392:	88fa      	ldrh	r2, [r7, #6]
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	9300      	str	r3, [sp, #0]
 800a398:	4613      	mov	r3, r2
 800a39a:	68ba      	ldr	r2, [r7, #8]
 800a39c:	68b9      	ldr	r1, [r7, #8]
 800a39e:	68f8      	ldr	r0, [r7, #12]
 800a3a0:	f000 f8e9 	bl	800a576 <HAL_SPI_TransmitReceive>
 800a3a4:	4603      	mov	r3, r0
 800a3a6:	e0e2      	b.n	800a56e <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a3ae:	2b01      	cmp	r3, #1
 800a3b0:	d101      	bne.n	800a3b6 <HAL_SPI_Receive+0x52>
 800a3b2:	2302      	movs	r3, #2
 800a3b4:	e0db      	b.n	800a56e <HAL_SPI_Receive+0x20a>
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	2201      	movs	r2, #1
 800a3ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a3be:	f7fb fa33 	bl	8005828 <HAL_GetTick>
 800a3c2:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a3ca:	b2db      	uxtb	r3, r3
 800a3cc:	2b01      	cmp	r3, #1
 800a3ce:	d002      	beq.n	800a3d6 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800a3d0:	2302      	movs	r3, #2
 800a3d2:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a3d4:	e0c2      	b.n	800a55c <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800a3d6:	68bb      	ldr	r3, [r7, #8]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d002      	beq.n	800a3e2 <HAL_SPI_Receive+0x7e>
 800a3dc:	88fb      	ldrh	r3, [r7, #6]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d102      	bne.n	800a3e8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800a3e2:	2301      	movs	r3, #1
 800a3e4:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a3e6:	e0b9      	b.n	800a55c <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	2204      	movs	r2, #4
 800a3ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	68ba      	ldr	r2, [r7, #8]
 800a3fa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	88fa      	ldrh	r2, [r7, #6]
 800a400:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	88fa      	ldrh	r2, [r7, #6]
 800a406:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	2200      	movs	r2, #0
 800a40c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	2200      	movs	r2, #0
 800a412:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	2200      	movs	r2, #0
 800a418:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	2200      	movs	r2, #0
 800a41e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	2200      	movs	r2, #0
 800a424:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	689b      	ldr	r3, [r3, #8]
 800a42a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a42e:	d107      	bne.n	800a440 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	681a      	ldr	r2, [r3, #0]
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a43e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a44a:	2b40      	cmp	r3, #64	; 0x40
 800a44c:	d007      	beq.n	800a45e <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	681a      	ldr	r2, [r3, #0]
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a45c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	68db      	ldr	r3, [r3, #12]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d162      	bne.n	800a52c <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800a466:	e02e      	b.n	800a4c6 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	689b      	ldr	r3, [r3, #8]
 800a46e:	f003 0301 	and.w	r3, r3, #1
 800a472:	2b01      	cmp	r3, #1
 800a474:	d115      	bne.n	800a4a2 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	f103 020c 	add.w	r2, r3, #12
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a482:	7812      	ldrb	r2, [r2, #0]
 800a484:	b2d2      	uxtb	r2, r2
 800a486:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a48c:	1c5a      	adds	r2, r3, #1
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a496:	b29b      	uxth	r3, r3
 800a498:	3b01      	subs	r3, #1
 800a49a:	b29a      	uxth	r2, r3
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a4a0:	e011      	b.n	800a4c6 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a4a2:	f7fb f9c1 	bl	8005828 <HAL_GetTick>
 800a4a6:	4602      	mov	r2, r0
 800a4a8:	693b      	ldr	r3, [r7, #16]
 800a4aa:	1ad3      	subs	r3, r2, r3
 800a4ac:	683a      	ldr	r2, [r7, #0]
 800a4ae:	429a      	cmp	r2, r3
 800a4b0:	d803      	bhi.n	800a4ba <HAL_SPI_Receive+0x156>
 800a4b2:	683b      	ldr	r3, [r7, #0]
 800a4b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4b8:	d102      	bne.n	800a4c0 <HAL_SPI_Receive+0x15c>
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d102      	bne.n	800a4c6 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800a4c0:	2303      	movs	r3, #3
 800a4c2:	75fb      	strb	r3, [r7, #23]
          goto error;
 800a4c4:	e04a      	b.n	800a55c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a4ca:	b29b      	uxth	r3, r3
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d1cb      	bne.n	800a468 <HAL_SPI_Receive+0x104>
 800a4d0:	e031      	b.n	800a536 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	689b      	ldr	r3, [r3, #8]
 800a4d8:	f003 0301 	and.w	r3, r3, #1
 800a4dc:	2b01      	cmp	r3, #1
 800a4de:	d113      	bne.n	800a508 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	68da      	ldr	r2, [r3, #12]
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4ea:	b292      	uxth	r2, r2
 800a4ec:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4f2:	1c9a      	adds	r2, r3, #2
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a4fc:	b29b      	uxth	r3, r3
 800a4fe:	3b01      	subs	r3, #1
 800a500:	b29a      	uxth	r2, r3
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a506:	e011      	b.n	800a52c <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a508:	f7fb f98e 	bl	8005828 <HAL_GetTick>
 800a50c:	4602      	mov	r2, r0
 800a50e:	693b      	ldr	r3, [r7, #16]
 800a510:	1ad3      	subs	r3, r2, r3
 800a512:	683a      	ldr	r2, [r7, #0]
 800a514:	429a      	cmp	r2, r3
 800a516:	d803      	bhi.n	800a520 <HAL_SPI_Receive+0x1bc>
 800a518:	683b      	ldr	r3, [r7, #0]
 800a51a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a51e:	d102      	bne.n	800a526 <HAL_SPI_Receive+0x1c2>
 800a520:	683b      	ldr	r3, [r7, #0]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d102      	bne.n	800a52c <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800a526:	2303      	movs	r3, #3
 800a528:	75fb      	strb	r3, [r7, #23]
          goto error;
 800a52a:	e017      	b.n	800a55c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a530:	b29b      	uxth	r3, r3
 800a532:	2b00      	cmp	r3, #0
 800a534:	d1cd      	bne.n	800a4d2 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a536:	693a      	ldr	r2, [r7, #16]
 800a538:	6839      	ldr	r1, [r7, #0]
 800a53a:	68f8      	ldr	r0, [r7, #12]
 800a53c:	f000 fa27 	bl	800a98e <SPI_EndRxTransaction>
 800a540:	4603      	mov	r3, r0
 800a542:	2b00      	cmp	r3, #0
 800a544:	d002      	beq.n	800a54c <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	2220      	movs	r2, #32
 800a54a:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a550:	2b00      	cmp	r3, #0
 800a552:	d002      	beq.n	800a55a <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800a554:	2301      	movs	r3, #1
 800a556:	75fb      	strb	r3, [r7, #23]
 800a558:	e000      	b.n	800a55c <HAL_SPI_Receive+0x1f8>
  }

error :
 800a55a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	2201      	movs	r2, #1
 800a560:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	2200      	movs	r2, #0
 800a568:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a56c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a56e:	4618      	mov	r0, r3
 800a570:	3718      	adds	r7, #24
 800a572:	46bd      	mov	sp, r7
 800a574:	bd80      	pop	{r7, pc}

0800a576 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a576:	b580      	push	{r7, lr}
 800a578:	b08c      	sub	sp, #48	; 0x30
 800a57a:	af00      	add	r7, sp, #0
 800a57c:	60f8      	str	r0, [r7, #12]
 800a57e:	60b9      	str	r1, [r7, #8]
 800a580:	607a      	str	r2, [r7, #4]
 800a582:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a584:	2301      	movs	r3, #1
 800a586:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a588:	2300      	movs	r3, #0
 800a58a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a594:	2b01      	cmp	r3, #1
 800a596:	d101      	bne.n	800a59c <HAL_SPI_TransmitReceive+0x26>
 800a598:	2302      	movs	r3, #2
 800a59a:	e18a      	b.n	800a8b2 <HAL_SPI_TransmitReceive+0x33c>
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	2201      	movs	r2, #1
 800a5a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a5a4:	f7fb f940 	bl	8005828 <HAL_GetTick>
 800a5a8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a5b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	685b      	ldr	r3, [r3, #4]
 800a5b8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800a5ba:	887b      	ldrh	r3, [r7, #2]
 800a5bc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a5be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a5c2:	2b01      	cmp	r3, #1
 800a5c4:	d00f      	beq.n	800a5e6 <HAL_SPI_TransmitReceive+0x70>
 800a5c6:	69fb      	ldr	r3, [r7, #28]
 800a5c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a5cc:	d107      	bne.n	800a5de <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	689b      	ldr	r3, [r3, #8]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d103      	bne.n	800a5de <HAL_SPI_TransmitReceive+0x68>
 800a5d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a5da:	2b04      	cmp	r3, #4
 800a5dc:	d003      	beq.n	800a5e6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800a5de:	2302      	movs	r3, #2
 800a5e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a5e4:	e15b      	b.n	800a89e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a5e6:	68bb      	ldr	r3, [r7, #8]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d005      	beq.n	800a5f8 <HAL_SPI_TransmitReceive+0x82>
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d002      	beq.n	800a5f8 <HAL_SPI_TransmitReceive+0x82>
 800a5f2:	887b      	ldrh	r3, [r7, #2]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d103      	bne.n	800a600 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800a5f8:	2301      	movs	r3, #1
 800a5fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a5fe:	e14e      	b.n	800a89e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a606:	b2db      	uxtb	r3, r3
 800a608:	2b04      	cmp	r3, #4
 800a60a:	d003      	beq.n	800a614 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	2205      	movs	r2, #5
 800a610:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	2200      	movs	r2, #0
 800a618:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	687a      	ldr	r2, [r7, #4]
 800a61e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	887a      	ldrh	r2, [r7, #2]
 800a624:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	887a      	ldrh	r2, [r7, #2]
 800a62a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	68ba      	ldr	r2, [r7, #8]
 800a630:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	887a      	ldrh	r2, [r7, #2]
 800a636:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	887a      	ldrh	r2, [r7, #2]
 800a63c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	2200      	movs	r2, #0
 800a642:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	2200      	movs	r2, #0
 800a648:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a654:	2b40      	cmp	r3, #64	; 0x40
 800a656:	d007      	beq.n	800a668 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	681a      	ldr	r2, [r3, #0]
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a666:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	68db      	ldr	r3, [r3, #12]
 800a66c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a670:	d178      	bne.n	800a764 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	685b      	ldr	r3, [r3, #4]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d002      	beq.n	800a680 <HAL_SPI_TransmitReceive+0x10a>
 800a67a:	8b7b      	ldrh	r3, [r7, #26]
 800a67c:	2b01      	cmp	r3, #1
 800a67e:	d166      	bne.n	800a74e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a684:	881a      	ldrh	r2, [r3, #0]
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a690:	1c9a      	adds	r2, r3, #2
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a69a:	b29b      	uxth	r3, r3
 800a69c:	3b01      	subs	r3, #1
 800a69e:	b29a      	uxth	r2, r3
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a6a4:	e053      	b.n	800a74e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	689b      	ldr	r3, [r3, #8]
 800a6ac:	f003 0302 	and.w	r3, r3, #2
 800a6b0:	2b02      	cmp	r3, #2
 800a6b2:	d11b      	bne.n	800a6ec <HAL_SPI_TransmitReceive+0x176>
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a6b8:	b29b      	uxth	r3, r3
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d016      	beq.n	800a6ec <HAL_SPI_TransmitReceive+0x176>
 800a6be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6c0:	2b01      	cmp	r3, #1
 800a6c2:	d113      	bne.n	800a6ec <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6c8:	881a      	ldrh	r2, [r3, #0]
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6d4:	1c9a      	adds	r2, r3, #2
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a6de:	b29b      	uxth	r3, r3
 800a6e0:	3b01      	subs	r3, #1
 800a6e2:	b29a      	uxth	r2, r3
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	689b      	ldr	r3, [r3, #8]
 800a6f2:	f003 0301 	and.w	r3, r3, #1
 800a6f6:	2b01      	cmp	r3, #1
 800a6f8:	d119      	bne.n	800a72e <HAL_SPI_TransmitReceive+0x1b8>
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a6fe:	b29b      	uxth	r3, r3
 800a700:	2b00      	cmp	r3, #0
 800a702:	d014      	beq.n	800a72e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	68da      	ldr	r2, [r3, #12]
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a70e:	b292      	uxth	r2, r2
 800a710:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a716:	1c9a      	adds	r2, r3, #2
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a720:	b29b      	uxth	r3, r3
 800a722:	3b01      	subs	r3, #1
 800a724:	b29a      	uxth	r2, r3
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a72a:	2301      	movs	r3, #1
 800a72c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a72e:	f7fb f87b 	bl	8005828 <HAL_GetTick>
 800a732:	4602      	mov	r2, r0
 800a734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a736:	1ad3      	subs	r3, r2, r3
 800a738:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a73a:	429a      	cmp	r2, r3
 800a73c:	d807      	bhi.n	800a74e <HAL_SPI_TransmitReceive+0x1d8>
 800a73e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a740:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a744:	d003      	beq.n	800a74e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800a746:	2303      	movs	r3, #3
 800a748:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800a74c:	e0a7      	b.n	800a89e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a752:	b29b      	uxth	r3, r3
 800a754:	2b00      	cmp	r3, #0
 800a756:	d1a6      	bne.n	800a6a6 <HAL_SPI_TransmitReceive+0x130>
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a75c:	b29b      	uxth	r3, r3
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d1a1      	bne.n	800a6a6 <HAL_SPI_TransmitReceive+0x130>
 800a762:	e07c      	b.n	800a85e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	685b      	ldr	r3, [r3, #4]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d002      	beq.n	800a772 <HAL_SPI_TransmitReceive+0x1fc>
 800a76c:	8b7b      	ldrh	r3, [r7, #26]
 800a76e:	2b01      	cmp	r3, #1
 800a770:	d16b      	bne.n	800a84a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	330c      	adds	r3, #12
 800a77c:	7812      	ldrb	r2, [r2, #0]
 800a77e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a784:	1c5a      	adds	r2, r3, #1
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a78e:	b29b      	uxth	r3, r3
 800a790:	3b01      	subs	r3, #1
 800a792:	b29a      	uxth	r2, r3
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a798:	e057      	b.n	800a84a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	689b      	ldr	r3, [r3, #8]
 800a7a0:	f003 0302 	and.w	r3, r3, #2
 800a7a4:	2b02      	cmp	r3, #2
 800a7a6:	d11c      	bne.n	800a7e2 <HAL_SPI_TransmitReceive+0x26c>
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a7ac:	b29b      	uxth	r3, r3
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d017      	beq.n	800a7e2 <HAL_SPI_TransmitReceive+0x26c>
 800a7b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7b4:	2b01      	cmp	r3, #1
 800a7b6:	d114      	bne.n	800a7e2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	330c      	adds	r3, #12
 800a7c2:	7812      	ldrb	r2, [r2, #0]
 800a7c4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7ca:	1c5a      	adds	r2, r3, #1
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a7d4:	b29b      	uxth	r3, r3
 800a7d6:	3b01      	subs	r3, #1
 800a7d8:	b29a      	uxth	r2, r3
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a7de:	2300      	movs	r3, #0
 800a7e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	689b      	ldr	r3, [r3, #8]
 800a7e8:	f003 0301 	and.w	r3, r3, #1
 800a7ec:	2b01      	cmp	r3, #1
 800a7ee:	d119      	bne.n	800a824 <HAL_SPI_TransmitReceive+0x2ae>
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a7f4:	b29b      	uxth	r3, r3
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d014      	beq.n	800a824 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	68da      	ldr	r2, [r3, #12]
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a804:	b2d2      	uxtb	r2, r2
 800a806:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a80c:	1c5a      	adds	r2, r3, #1
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a816:	b29b      	uxth	r3, r3
 800a818:	3b01      	subs	r3, #1
 800a81a:	b29a      	uxth	r2, r3
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a820:	2301      	movs	r3, #1
 800a822:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a824:	f7fb f800 	bl	8005828 <HAL_GetTick>
 800a828:	4602      	mov	r2, r0
 800a82a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a82c:	1ad3      	subs	r3, r2, r3
 800a82e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a830:	429a      	cmp	r2, r3
 800a832:	d803      	bhi.n	800a83c <HAL_SPI_TransmitReceive+0x2c6>
 800a834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a83a:	d102      	bne.n	800a842 <HAL_SPI_TransmitReceive+0x2cc>
 800a83c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d103      	bne.n	800a84a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800a842:	2303      	movs	r3, #3
 800a844:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800a848:	e029      	b.n	800a89e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a84e:	b29b      	uxth	r3, r3
 800a850:	2b00      	cmp	r3, #0
 800a852:	d1a2      	bne.n	800a79a <HAL_SPI_TransmitReceive+0x224>
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a858:	b29b      	uxth	r3, r3
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d19d      	bne.n	800a79a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a85e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a860:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a862:	68f8      	ldr	r0, [r7, #12]
 800a864:	f000 f8f8 	bl	800aa58 <SPI_EndRxTxTransaction>
 800a868:	4603      	mov	r3, r0
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d006      	beq.n	800a87c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800a86e:	2301      	movs	r3, #1
 800a870:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	2220      	movs	r2, #32
 800a878:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800a87a:	e010      	b.n	800a89e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	689b      	ldr	r3, [r3, #8]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d10b      	bne.n	800a89c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a884:	2300      	movs	r3, #0
 800a886:	617b      	str	r3, [r7, #20]
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	68db      	ldr	r3, [r3, #12]
 800a88e:	617b      	str	r3, [r7, #20]
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	689b      	ldr	r3, [r3, #8]
 800a896:	617b      	str	r3, [r7, #20]
 800a898:	697b      	ldr	r3, [r7, #20]
 800a89a:	e000      	b.n	800a89e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800a89c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	2201      	movs	r2, #1
 800a8a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a8ae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	3730      	adds	r7, #48	; 0x30
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	bd80      	pop	{r7, pc}

0800a8ba <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a8ba:	b580      	push	{r7, lr}
 800a8bc:	b084      	sub	sp, #16
 800a8be:	af00      	add	r7, sp, #0
 800a8c0:	60f8      	str	r0, [r7, #12]
 800a8c2:	60b9      	str	r1, [r7, #8]
 800a8c4:	603b      	str	r3, [r7, #0]
 800a8c6:	4613      	mov	r3, r2
 800a8c8:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a8ca:	e04c      	b.n	800a966 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a8cc:	683b      	ldr	r3, [r7, #0]
 800a8ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8d2:	d048      	beq.n	800a966 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800a8d4:	f7fa ffa8 	bl	8005828 <HAL_GetTick>
 800a8d8:	4602      	mov	r2, r0
 800a8da:	69bb      	ldr	r3, [r7, #24]
 800a8dc:	1ad3      	subs	r3, r2, r3
 800a8de:	683a      	ldr	r2, [r7, #0]
 800a8e0:	429a      	cmp	r2, r3
 800a8e2:	d902      	bls.n	800a8ea <SPI_WaitFlagStateUntilTimeout+0x30>
 800a8e4:	683b      	ldr	r3, [r7, #0]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d13d      	bne.n	800a966 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	685a      	ldr	r2, [r3, #4]
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a8f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	685b      	ldr	r3, [r3, #4]
 800a8fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a902:	d111      	bne.n	800a928 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	689b      	ldr	r3, [r3, #8]
 800a908:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a90c:	d004      	beq.n	800a918 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	689b      	ldr	r3, [r3, #8]
 800a912:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a916:	d107      	bne.n	800a928 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	681a      	ldr	r2, [r3, #0]
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a926:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a92c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a930:	d10f      	bne.n	800a952 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	681a      	ldr	r2, [r3, #0]
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a940:	601a      	str	r2, [r3, #0]
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	681a      	ldr	r2, [r3, #0]
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a950:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	2201      	movs	r2, #1
 800a956:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	2200      	movs	r2, #0
 800a95e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800a962:	2303      	movs	r3, #3
 800a964:	e00f      	b.n	800a986 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	689a      	ldr	r2, [r3, #8]
 800a96c:	68bb      	ldr	r3, [r7, #8]
 800a96e:	4013      	ands	r3, r2
 800a970:	68ba      	ldr	r2, [r7, #8]
 800a972:	429a      	cmp	r2, r3
 800a974:	bf0c      	ite	eq
 800a976:	2301      	moveq	r3, #1
 800a978:	2300      	movne	r3, #0
 800a97a:	b2db      	uxtb	r3, r3
 800a97c:	461a      	mov	r2, r3
 800a97e:	79fb      	ldrb	r3, [r7, #7]
 800a980:	429a      	cmp	r2, r3
 800a982:	d1a3      	bne.n	800a8cc <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800a984:	2300      	movs	r3, #0
}
 800a986:	4618      	mov	r0, r3
 800a988:	3710      	adds	r7, #16
 800a98a:	46bd      	mov	sp, r7
 800a98c:	bd80      	pop	{r7, pc}

0800a98e <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800a98e:	b580      	push	{r7, lr}
 800a990:	b086      	sub	sp, #24
 800a992:	af02      	add	r7, sp, #8
 800a994:	60f8      	str	r0, [r7, #12]
 800a996:	60b9      	str	r1, [r7, #8]
 800a998:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	685b      	ldr	r3, [r3, #4]
 800a99e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a9a2:	d111      	bne.n	800a9c8 <SPI_EndRxTransaction+0x3a>
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	689b      	ldr	r3, [r3, #8]
 800a9a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a9ac:	d004      	beq.n	800a9b8 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	689b      	ldr	r3, [r3, #8]
 800a9b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a9b6:	d107      	bne.n	800a9c8 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	681a      	ldr	r2, [r3, #0]
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a9c6:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	685b      	ldr	r3, [r3, #4]
 800a9cc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a9d0:	d12a      	bne.n	800aa28 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	689b      	ldr	r3, [r3, #8]
 800a9d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a9da:	d012      	beq.n	800aa02 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	9300      	str	r3, [sp, #0]
 800a9e0:	68bb      	ldr	r3, [r7, #8]
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	2180      	movs	r1, #128	; 0x80
 800a9e6:	68f8      	ldr	r0, [r7, #12]
 800a9e8:	f7ff ff67 	bl	800a8ba <SPI_WaitFlagStateUntilTimeout>
 800a9ec:	4603      	mov	r3, r0
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d02d      	beq.n	800aa4e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a9f6:	f043 0220 	orr.w	r2, r3, #32
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800a9fe:	2303      	movs	r3, #3
 800aa00:	e026      	b.n	800aa50 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	9300      	str	r3, [sp, #0]
 800aa06:	68bb      	ldr	r3, [r7, #8]
 800aa08:	2200      	movs	r2, #0
 800aa0a:	2101      	movs	r1, #1
 800aa0c:	68f8      	ldr	r0, [r7, #12]
 800aa0e:	f7ff ff54 	bl	800a8ba <SPI_WaitFlagStateUntilTimeout>
 800aa12:	4603      	mov	r3, r0
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d01a      	beq.n	800aa4e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa1c:	f043 0220 	orr.w	r2, r3, #32
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800aa24:	2303      	movs	r3, #3
 800aa26:	e013      	b.n	800aa50 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	9300      	str	r3, [sp, #0]
 800aa2c:	68bb      	ldr	r3, [r7, #8]
 800aa2e:	2200      	movs	r2, #0
 800aa30:	2101      	movs	r1, #1
 800aa32:	68f8      	ldr	r0, [r7, #12]
 800aa34:	f7ff ff41 	bl	800a8ba <SPI_WaitFlagStateUntilTimeout>
 800aa38:	4603      	mov	r3, r0
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d007      	beq.n	800aa4e <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa42:	f043 0220 	orr.w	r2, r3, #32
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800aa4a:	2303      	movs	r3, #3
 800aa4c:	e000      	b.n	800aa50 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800aa4e:	2300      	movs	r3, #0
}
 800aa50:	4618      	mov	r0, r3
 800aa52:	3710      	adds	r7, #16
 800aa54:	46bd      	mov	sp, r7
 800aa56:	bd80      	pop	{r7, pc}

0800aa58 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b088      	sub	sp, #32
 800aa5c:	af02      	add	r7, sp, #8
 800aa5e:	60f8      	str	r0, [r7, #12]
 800aa60:	60b9      	str	r1, [r7, #8]
 800aa62:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800aa64:	4b1b      	ldr	r3, [pc, #108]	; (800aad4 <SPI_EndRxTxTransaction+0x7c>)
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	4a1b      	ldr	r2, [pc, #108]	; (800aad8 <SPI_EndRxTxTransaction+0x80>)
 800aa6a:	fba2 2303 	umull	r2, r3, r2, r3
 800aa6e:	0d5b      	lsrs	r3, r3, #21
 800aa70:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800aa74:	fb02 f303 	mul.w	r3, r2, r3
 800aa78:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	685b      	ldr	r3, [r3, #4]
 800aa7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800aa82:	d112      	bne.n	800aaaa <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	9300      	str	r3, [sp, #0]
 800aa88:	68bb      	ldr	r3, [r7, #8]
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	2180      	movs	r1, #128	; 0x80
 800aa8e:	68f8      	ldr	r0, [r7, #12]
 800aa90:	f7ff ff13 	bl	800a8ba <SPI_WaitFlagStateUntilTimeout>
 800aa94:	4603      	mov	r3, r0
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d016      	beq.n	800aac8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa9e:	f043 0220 	orr.w	r2, r3, #32
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800aaa6:	2303      	movs	r3, #3
 800aaa8:	e00f      	b.n	800aaca <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800aaaa:	697b      	ldr	r3, [r7, #20]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d00a      	beq.n	800aac6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800aab0:	697b      	ldr	r3, [r7, #20]
 800aab2:	3b01      	subs	r3, #1
 800aab4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	689b      	ldr	r3, [r3, #8]
 800aabc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aac0:	2b80      	cmp	r3, #128	; 0x80
 800aac2:	d0f2      	beq.n	800aaaa <SPI_EndRxTxTransaction+0x52>
 800aac4:	e000      	b.n	800aac8 <SPI_EndRxTxTransaction+0x70>
        break;
 800aac6:	bf00      	nop
  }

  return HAL_OK;
 800aac8:	2300      	movs	r3, #0
}
 800aaca:	4618      	mov	r0, r3
 800aacc:	3718      	adds	r7, #24
 800aace:	46bd      	mov	sp, r7
 800aad0:	bd80      	pop	{r7, pc}
 800aad2:	bf00      	nop
 800aad4:	20000000 	.word	0x20000000
 800aad8:	165e9f81 	.word	0x165e9f81

0800aadc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b082      	sub	sp, #8
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d101      	bne.n	800aaee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800aaea:	2301      	movs	r3, #1
 800aaec:	e01d      	b.n	800ab2a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aaf4:	b2db      	uxtb	r3, r3
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d106      	bne.n	800ab08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	2200      	movs	r2, #0
 800aafe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ab02:	6878      	ldr	r0, [r7, #4]
 800ab04:	f7f9 ff98 	bl	8004a38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	2202      	movs	r2, #2
 800ab0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681a      	ldr	r2, [r3, #0]
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	3304      	adds	r3, #4
 800ab18:	4619      	mov	r1, r3
 800ab1a:	4610      	mov	r0, r2
 800ab1c:	f000 fb56 	bl	800b1cc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	2201      	movs	r2, #1
 800ab24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ab28:	2300      	movs	r3, #0
}
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	3708      	adds	r7, #8
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	bd80      	pop	{r7, pc}

0800ab32 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ab32:	b480      	push	{r7}
 800ab34:	b085      	sub	sp, #20
 800ab36:	af00      	add	r7, sp, #0
 800ab38:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	68da      	ldr	r2, [r3, #12]
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	f042 0201 	orr.w	r2, r2, #1
 800ab48:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	689b      	ldr	r3, [r3, #8]
 800ab50:	f003 0307 	and.w	r3, r3, #7
 800ab54:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	2b06      	cmp	r3, #6
 800ab5a:	d007      	beq.n	800ab6c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	681a      	ldr	r2, [r3, #0]
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	f042 0201 	orr.w	r2, r2, #1
 800ab6a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ab6c:	2300      	movs	r3, #0
}
 800ab6e:	4618      	mov	r0, r3
 800ab70:	3714      	adds	r7, #20
 800ab72:	46bd      	mov	sp, r7
 800ab74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab78:	4770      	bx	lr

0800ab7a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ab7a:	b580      	push	{r7, lr}
 800ab7c:	b082      	sub	sp, #8
 800ab7e:	af00      	add	r7, sp, #0
 800ab80:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d101      	bne.n	800ab8c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ab88:	2301      	movs	r3, #1
 800ab8a:	e01d      	b.n	800abc8 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ab92:	b2db      	uxtb	r3, r3
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d106      	bne.n	800aba6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800aba0:	6878      	ldr	r0, [r7, #4]
 800aba2:	f7f9 fed5 	bl	8004950 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	2202      	movs	r2, #2
 800abaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681a      	ldr	r2, [r3, #0]
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	3304      	adds	r3, #4
 800abb6:	4619      	mov	r1, r3
 800abb8:	4610      	mov	r0, r2
 800abba:	f000 fb07 	bl	800b1cc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	2201      	movs	r2, #1
 800abc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800abc6:	2300      	movs	r3, #0
}
 800abc8:	4618      	mov	r0, r3
 800abca:	3708      	adds	r7, #8
 800abcc:	46bd      	mov	sp, r7
 800abce:	bd80      	pop	{r7, pc}

0800abd0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b084      	sub	sp, #16
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
 800abd8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	2201      	movs	r2, #1
 800abe0:	6839      	ldr	r1, [r7, #0]
 800abe2:	4618      	mov	r0, r3
 800abe4:	f000 fd42 	bl	800b66c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	4a15      	ldr	r2, [pc, #84]	; (800ac44 <HAL_TIM_PWM_Start+0x74>)
 800abee:	4293      	cmp	r3, r2
 800abf0:	d004      	beq.n	800abfc <HAL_TIM_PWM_Start+0x2c>
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	4a14      	ldr	r2, [pc, #80]	; (800ac48 <HAL_TIM_PWM_Start+0x78>)
 800abf8:	4293      	cmp	r3, r2
 800abfa:	d101      	bne.n	800ac00 <HAL_TIM_PWM_Start+0x30>
 800abfc:	2301      	movs	r3, #1
 800abfe:	e000      	b.n	800ac02 <HAL_TIM_PWM_Start+0x32>
 800ac00:	2300      	movs	r3, #0
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d007      	beq.n	800ac16 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ac14:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	689b      	ldr	r3, [r3, #8]
 800ac1c:	f003 0307 	and.w	r3, r3, #7
 800ac20:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	2b06      	cmp	r3, #6
 800ac26:	d007      	beq.n	800ac38 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	681a      	ldr	r2, [r3, #0]
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	f042 0201 	orr.w	r2, r2, #1
 800ac36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ac38:	2300      	movs	r3, #0
}
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	3710      	adds	r7, #16
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	bd80      	pop	{r7, pc}
 800ac42:	bf00      	nop
 800ac44:	40010000 	.word	0x40010000
 800ac48:	40010400 	.word	0x40010400

0800ac4c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b086      	sub	sp, #24
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	6078      	str	r0, [r7, #4]
 800ac54:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d101      	bne.n	800ac60 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800ac5c:	2301      	movs	r3, #1
 800ac5e:	e083      	b.n	800ad68 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ac66:	b2db      	uxtb	r3, r3
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d106      	bne.n	800ac7a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	2200      	movs	r2, #0
 800ac70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800ac74:	6878      	ldr	r0, [r7, #4]
 800ac76:	f7f9 ff6f 	bl	8004b58 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	2202      	movs	r2, #2
 800ac7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	689b      	ldr	r3, [r3, #8]
 800ac88:	687a      	ldr	r2, [r7, #4]
 800ac8a:	6812      	ldr	r2, [r2, #0]
 800ac8c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ac90:	f023 0307 	bic.w	r3, r3, #7
 800ac94:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681a      	ldr	r2, [r3, #0]
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	3304      	adds	r3, #4
 800ac9e:	4619      	mov	r1, r3
 800aca0:	4610      	mov	r0, r2
 800aca2:	f000 fa93 	bl	800b1cc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	689b      	ldr	r3, [r3, #8]
 800acac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	699b      	ldr	r3, [r3, #24]
 800acb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	6a1b      	ldr	r3, [r3, #32]
 800acbc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800acbe:	683b      	ldr	r3, [r7, #0]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	697a      	ldr	r2, [r7, #20]
 800acc4:	4313      	orrs	r3, r2
 800acc6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800acc8:	693b      	ldr	r3, [r7, #16]
 800acca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800acce:	f023 0303 	bic.w	r3, r3, #3
 800acd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800acd4:	683b      	ldr	r3, [r7, #0]
 800acd6:	689a      	ldr	r2, [r3, #8]
 800acd8:	683b      	ldr	r3, [r7, #0]
 800acda:	699b      	ldr	r3, [r3, #24]
 800acdc:	021b      	lsls	r3, r3, #8
 800acde:	4313      	orrs	r3, r2
 800ace0:	693a      	ldr	r2, [r7, #16]
 800ace2:	4313      	orrs	r3, r2
 800ace4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800ace6:	693b      	ldr	r3, [r7, #16]
 800ace8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800acec:	f023 030c 	bic.w	r3, r3, #12
 800acf0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800acf2:	693b      	ldr	r3, [r7, #16]
 800acf4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800acf8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800acfc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800acfe:	683b      	ldr	r3, [r7, #0]
 800ad00:	68da      	ldr	r2, [r3, #12]
 800ad02:	683b      	ldr	r3, [r7, #0]
 800ad04:	69db      	ldr	r3, [r3, #28]
 800ad06:	021b      	lsls	r3, r3, #8
 800ad08:	4313      	orrs	r3, r2
 800ad0a:	693a      	ldr	r2, [r7, #16]
 800ad0c:	4313      	orrs	r3, r2
 800ad0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800ad10:	683b      	ldr	r3, [r7, #0]
 800ad12:	691b      	ldr	r3, [r3, #16]
 800ad14:	011a      	lsls	r2, r3, #4
 800ad16:	683b      	ldr	r3, [r7, #0]
 800ad18:	6a1b      	ldr	r3, [r3, #32]
 800ad1a:	031b      	lsls	r3, r3, #12
 800ad1c:	4313      	orrs	r3, r2
 800ad1e:	693a      	ldr	r2, [r7, #16]
 800ad20:	4313      	orrs	r3, r2
 800ad22:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800ad2a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800ad32:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800ad34:	683b      	ldr	r3, [r7, #0]
 800ad36:	685a      	ldr	r2, [r3, #4]
 800ad38:	683b      	ldr	r3, [r7, #0]
 800ad3a:	695b      	ldr	r3, [r3, #20]
 800ad3c:	011b      	lsls	r3, r3, #4
 800ad3e:	4313      	orrs	r3, r2
 800ad40:	68fa      	ldr	r2, [r7, #12]
 800ad42:	4313      	orrs	r3, r2
 800ad44:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	697a      	ldr	r2, [r7, #20]
 800ad4c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	693a      	ldr	r2, [r7, #16]
 800ad54:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	68fa      	ldr	r2, [r7, #12]
 800ad5c:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	2201      	movs	r2, #1
 800ad62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ad66:	2300      	movs	r3, #0
}
 800ad68:	4618      	mov	r0, r3
 800ad6a:	3718      	adds	r7, #24
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	bd80      	pop	{r7, pc}

0800ad70 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b082      	sub	sp, #8
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
 800ad78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800ad7a:	683b      	ldr	r3, [r7, #0]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d002      	beq.n	800ad86 <HAL_TIM_Encoder_Start+0x16>
 800ad80:	2b04      	cmp	r3, #4
 800ad82:	d008      	beq.n	800ad96 <HAL_TIM_Encoder_Start+0x26>
 800ad84:	e00f      	b.n	800ada6 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	2201      	movs	r2, #1
 800ad8c:	2100      	movs	r1, #0
 800ad8e:	4618      	mov	r0, r3
 800ad90:	f000 fc6c 	bl	800b66c <TIM_CCxChannelCmd>
      break;
 800ad94:	e016      	b.n	800adc4 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	2201      	movs	r2, #1
 800ad9c:	2104      	movs	r1, #4
 800ad9e:	4618      	mov	r0, r3
 800ada0:	f000 fc64 	bl	800b66c <TIM_CCxChannelCmd>
      break;
 800ada4:	e00e      	b.n	800adc4 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	2201      	movs	r2, #1
 800adac:	2100      	movs	r1, #0
 800adae:	4618      	mov	r0, r3
 800adb0:	f000 fc5c 	bl	800b66c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	2201      	movs	r2, #1
 800adba:	2104      	movs	r1, #4
 800adbc:	4618      	mov	r0, r3
 800adbe:	f000 fc55 	bl	800b66c <TIM_CCxChannelCmd>
      break;
 800adc2:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	681a      	ldr	r2, [r3, #0]
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	f042 0201 	orr.w	r2, r2, #1
 800add2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800add4:	2300      	movs	r3, #0
}
 800add6:	4618      	mov	r0, r3
 800add8:	3708      	adds	r7, #8
 800adda:	46bd      	mov	sp, r7
 800addc:	bd80      	pop	{r7, pc}

0800adde <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800adde:	b580      	push	{r7, lr}
 800ade0:	b082      	sub	sp, #8
 800ade2:	af00      	add	r7, sp, #0
 800ade4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	691b      	ldr	r3, [r3, #16]
 800adec:	f003 0302 	and.w	r3, r3, #2
 800adf0:	2b02      	cmp	r3, #2
 800adf2:	d122      	bne.n	800ae3a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	68db      	ldr	r3, [r3, #12]
 800adfa:	f003 0302 	and.w	r3, r3, #2
 800adfe:	2b02      	cmp	r3, #2
 800ae00:	d11b      	bne.n	800ae3a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	f06f 0202 	mvn.w	r2, #2
 800ae0a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	2201      	movs	r2, #1
 800ae10:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	699b      	ldr	r3, [r3, #24]
 800ae18:	f003 0303 	and.w	r3, r3, #3
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d003      	beq.n	800ae28 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ae20:	6878      	ldr	r0, [r7, #4]
 800ae22:	f000 f9b5 	bl	800b190 <HAL_TIM_IC_CaptureCallback>
 800ae26:	e005      	b.n	800ae34 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae28:	6878      	ldr	r0, [r7, #4]
 800ae2a:	f000 f9a7 	bl	800b17c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae2e:	6878      	ldr	r0, [r7, #4]
 800ae30:	f000 f9b8 	bl	800b1a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	2200      	movs	r2, #0
 800ae38:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	691b      	ldr	r3, [r3, #16]
 800ae40:	f003 0304 	and.w	r3, r3, #4
 800ae44:	2b04      	cmp	r3, #4
 800ae46:	d122      	bne.n	800ae8e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	68db      	ldr	r3, [r3, #12]
 800ae4e:	f003 0304 	and.w	r3, r3, #4
 800ae52:	2b04      	cmp	r3, #4
 800ae54:	d11b      	bne.n	800ae8e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	f06f 0204 	mvn.w	r2, #4
 800ae5e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	2202      	movs	r2, #2
 800ae64:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	699b      	ldr	r3, [r3, #24]
 800ae6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d003      	beq.n	800ae7c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ae74:	6878      	ldr	r0, [r7, #4]
 800ae76:	f000 f98b 	bl	800b190 <HAL_TIM_IC_CaptureCallback>
 800ae7a:	e005      	b.n	800ae88 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae7c:	6878      	ldr	r0, [r7, #4]
 800ae7e:	f000 f97d 	bl	800b17c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae82:	6878      	ldr	r0, [r7, #4]
 800ae84:	f000 f98e 	bl	800b1a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	691b      	ldr	r3, [r3, #16]
 800ae94:	f003 0308 	and.w	r3, r3, #8
 800ae98:	2b08      	cmp	r3, #8
 800ae9a:	d122      	bne.n	800aee2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	68db      	ldr	r3, [r3, #12]
 800aea2:	f003 0308 	and.w	r3, r3, #8
 800aea6:	2b08      	cmp	r3, #8
 800aea8:	d11b      	bne.n	800aee2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	f06f 0208 	mvn.w	r2, #8
 800aeb2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2204      	movs	r2, #4
 800aeb8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	69db      	ldr	r3, [r3, #28]
 800aec0:	f003 0303 	and.w	r3, r3, #3
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d003      	beq.n	800aed0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aec8:	6878      	ldr	r0, [r7, #4]
 800aeca:	f000 f961 	bl	800b190 <HAL_TIM_IC_CaptureCallback>
 800aece:	e005      	b.n	800aedc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aed0:	6878      	ldr	r0, [r7, #4]
 800aed2:	f000 f953 	bl	800b17c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aed6:	6878      	ldr	r0, [r7, #4]
 800aed8:	f000 f964 	bl	800b1a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	2200      	movs	r2, #0
 800aee0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	691b      	ldr	r3, [r3, #16]
 800aee8:	f003 0310 	and.w	r3, r3, #16
 800aeec:	2b10      	cmp	r3, #16
 800aeee:	d122      	bne.n	800af36 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	68db      	ldr	r3, [r3, #12]
 800aef6:	f003 0310 	and.w	r3, r3, #16
 800aefa:	2b10      	cmp	r3, #16
 800aefc:	d11b      	bne.n	800af36 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	f06f 0210 	mvn.w	r2, #16
 800af06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	2208      	movs	r2, #8
 800af0c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	69db      	ldr	r3, [r3, #28]
 800af14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d003      	beq.n	800af24 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800af1c:	6878      	ldr	r0, [r7, #4]
 800af1e:	f000 f937 	bl	800b190 <HAL_TIM_IC_CaptureCallback>
 800af22:	e005      	b.n	800af30 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800af24:	6878      	ldr	r0, [r7, #4]
 800af26:	f000 f929 	bl	800b17c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af2a:	6878      	ldr	r0, [r7, #4]
 800af2c:	f000 f93a 	bl	800b1a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	2200      	movs	r2, #0
 800af34:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	691b      	ldr	r3, [r3, #16]
 800af3c:	f003 0301 	and.w	r3, r3, #1
 800af40:	2b01      	cmp	r3, #1
 800af42:	d10e      	bne.n	800af62 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	68db      	ldr	r3, [r3, #12]
 800af4a:	f003 0301 	and.w	r3, r3, #1
 800af4e:	2b01      	cmp	r3, #1
 800af50:	d107      	bne.n	800af62 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	f06f 0201 	mvn.w	r2, #1
 800af5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800af5c:	6878      	ldr	r0, [r7, #4]
 800af5e:	f7f8 fad9 	bl	8003514 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	691b      	ldr	r3, [r3, #16]
 800af68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af6c:	2b80      	cmp	r3, #128	; 0x80
 800af6e:	d10e      	bne.n	800af8e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	68db      	ldr	r3, [r3, #12]
 800af76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af7a:	2b80      	cmp	r3, #128	; 0x80
 800af7c:	d107      	bne.n	800af8e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800af86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800af88:	6878      	ldr	r0, [r7, #4]
 800af8a:	f000 fc6d 	bl	800b868 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	691b      	ldr	r3, [r3, #16]
 800af94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af98:	2b40      	cmp	r3, #64	; 0x40
 800af9a:	d10e      	bne.n	800afba <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	68db      	ldr	r3, [r3, #12]
 800afa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afa6:	2b40      	cmp	r3, #64	; 0x40
 800afa8:	d107      	bne.n	800afba <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800afb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800afb4:	6878      	ldr	r0, [r7, #4]
 800afb6:	f000 f8ff 	bl	800b1b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	691b      	ldr	r3, [r3, #16]
 800afc0:	f003 0320 	and.w	r3, r3, #32
 800afc4:	2b20      	cmp	r3, #32
 800afc6:	d10e      	bne.n	800afe6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	68db      	ldr	r3, [r3, #12]
 800afce:	f003 0320 	and.w	r3, r3, #32
 800afd2:	2b20      	cmp	r3, #32
 800afd4:	d107      	bne.n	800afe6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	f06f 0220 	mvn.w	r2, #32
 800afde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800afe0:	6878      	ldr	r0, [r7, #4]
 800afe2:	f000 fc37 	bl	800b854 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800afe6:	bf00      	nop
 800afe8:	3708      	adds	r7, #8
 800afea:	46bd      	mov	sp, r7
 800afec:	bd80      	pop	{r7, pc}
	...

0800aff0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b084      	sub	sp, #16
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	60f8      	str	r0, [r7, #12]
 800aff8:	60b9      	str	r1, [r7, #8]
 800affa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b002:	2b01      	cmp	r3, #1
 800b004:	d101      	bne.n	800b00a <HAL_TIM_PWM_ConfigChannel+0x1a>
 800b006:	2302      	movs	r3, #2
 800b008:	e0b4      	b.n	800b174 <HAL_TIM_PWM_ConfigChannel+0x184>
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	2201      	movs	r2, #1
 800b00e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	2202      	movs	r2, #2
 800b016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	2b0c      	cmp	r3, #12
 800b01e:	f200 809f 	bhi.w	800b160 <HAL_TIM_PWM_ConfigChannel+0x170>
 800b022:	a201      	add	r2, pc, #4	; (adr r2, 800b028 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800b024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b028:	0800b05d 	.word	0x0800b05d
 800b02c:	0800b161 	.word	0x0800b161
 800b030:	0800b161 	.word	0x0800b161
 800b034:	0800b161 	.word	0x0800b161
 800b038:	0800b09d 	.word	0x0800b09d
 800b03c:	0800b161 	.word	0x0800b161
 800b040:	0800b161 	.word	0x0800b161
 800b044:	0800b161 	.word	0x0800b161
 800b048:	0800b0df 	.word	0x0800b0df
 800b04c:	0800b161 	.word	0x0800b161
 800b050:	0800b161 	.word	0x0800b161
 800b054:	0800b161 	.word	0x0800b161
 800b058:	0800b11f 	.word	0x0800b11f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	68b9      	ldr	r1, [r7, #8]
 800b062:	4618      	mov	r0, r3
 800b064:	f000 f952 	bl	800b30c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	699a      	ldr	r2, [r3, #24]
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	f042 0208 	orr.w	r2, r2, #8
 800b076:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	699a      	ldr	r2, [r3, #24]
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	f022 0204 	bic.w	r2, r2, #4
 800b086:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	6999      	ldr	r1, [r3, #24]
 800b08e:	68bb      	ldr	r3, [r7, #8]
 800b090:	691a      	ldr	r2, [r3, #16]
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	430a      	orrs	r2, r1
 800b098:	619a      	str	r2, [r3, #24]
      break;
 800b09a:	e062      	b.n	800b162 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	68b9      	ldr	r1, [r7, #8]
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	f000 f9a2 	bl	800b3ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	699a      	ldr	r2, [r3, #24]
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	681b      	ldr	r3, [r3, #0]
 800b0b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b0b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	699a      	ldr	r2, [r3, #24]
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b0c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	6999      	ldr	r1, [r3, #24]
 800b0ce:	68bb      	ldr	r3, [r7, #8]
 800b0d0:	691b      	ldr	r3, [r3, #16]
 800b0d2:	021a      	lsls	r2, r3, #8
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	430a      	orrs	r2, r1
 800b0da:	619a      	str	r2, [r3, #24]
      break;
 800b0dc:	e041      	b.n	800b162 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	68b9      	ldr	r1, [r7, #8]
 800b0e4:	4618      	mov	r0, r3
 800b0e6:	f000 f9f7 	bl	800b4d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	69da      	ldr	r2, [r3, #28]
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	f042 0208 	orr.w	r2, r2, #8
 800b0f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	69da      	ldr	r2, [r3, #28]
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	f022 0204 	bic.w	r2, r2, #4
 800b108:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	69d9      	ldr	r1, [r3, #28]
 800b110:	68bb      	ldr	r3, [r7, #8]
 800b112:	691a      	ldr	r2, [r3, #16]
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	430a      	orrs	r2, r1
 800b11a:	61da      	str	r2, [r3, #28]
      break;
 800b11c:	e021      	b.n	800b162 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	68b9      	ldr	r1, [r7, #8]
 800b124:	4618      	mov	r0, r3
 800b126:	f000 fa4b 	bl	800b5c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	69da      	ldr	r2, [r3, #28]
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b138:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	69da      	ldr	r2, [r3, #28]
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b148:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	69d9      	ldr	r1, [r3, #28]
 800b150:	68bb      	ldr	r3, [r7, #8]
 800b152:	691b      	ldr	r3, [r3, #16]
 800b154:	021a      	lsls	r2, r3, #8
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	430a      	orrs	r2, r1
 800b15c:	61da      	str	r2, [r3, #28]
      break;
 800b15e:	e000      	b.n	800b162 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800b160:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	2201      	movs	r2, #1
 800b166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	2200      	movs	r2, #0
 800b16e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b172:	2300      	movs	r3, #0
}
 800b174:	4618      	mov	r0, r3
 800b176:	3710      	adds	r7, #16
 800b178:	46bd      	mov	sp, r7
 800b17a:	bd80      	pop	{r7, pc}

0800b17c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b17c:	b480      	push	{r7}
 800b17e:	b083      	sub	sp, #12
 800b180:	af00      	add	r7, sp, #0
 800b182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b184:	bf00      	nop
 800b186:	370c      	adds	r7, #12
 800b188:	46bd      	mov	sp, r7
 800b18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18e:	4770      	bx	lr

0800b190 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b190:	b480      	push	{r7}
 800b192:	b083      	sub	sp, #12
 800b194:	af00      	add	r7, sp, #0
 800b196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b198:	bf00      	nop
 800b19a:	370c      	adds	r7, #12
 800b19c:	46bd      	mov	sp, r7
 800b19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a2:	4770      	bx	lr

0800b1a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b1a4:	b480      	push	{r7}
 800b1a6:	b083      	sub	sp, #12
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b1ac:	bf00      	nop
 800b1ae:	370c      	adds	r7, #12
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b6:	4770      	bx	lr

0800b1b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b1b8:	b480      	push	{r7}
 800b1ba:	b083      	sub	sp, #12
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b1c0:	bf00      	nop
 800b1c2:	370c      	adds	r7, #12
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ca:	4770      	bx	lr

0800b1cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b1cc:	b480      	push	{r7}
 800b1ce:	b085      	sub	sp, #20
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]
 800b1d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	4a40      	ldr	r2, [pc, #256]	; (800b2e0 <TIM_Base_SetConfig+0x114>)
 800b1e0:	4293      	cmp	r3, r2
 800b1e2:	d013      	beq.n	800b20c <TIM_Base_SetConfig+0x40>
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b1ea:	d00f      	beq.n	800b20c <TIM_Base_SetConfig+0x40>
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	4a3d      	ldr	r2, [pc, #244]	; (800b2e4 <TIM_Base_SetConfig+0x118>)
 800b1f0:	4293      	cmp	r3, r2
 800b1f2:	d00b      	beq.n	800b20c <TIM_Base_SetConfig+0x40>
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	4a3c      	ldr	r2, [pc, #240]	; (800b2e8 <TIM_Base_SetConfig+0x11c>)
 800b1f8:	4293      	cmp	r3, r2
 800b1fa:	d007      	beq.n	800b20c <TIM_Base_SetConfig+0x40>
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	4a3b      	ldr	r2, [pc, #236]	; (800b2ec <TIM_Base_SetConfig+0x120>)
 800b200:	4293      	cmp	r3, r2
 800b202:	d003      	beq.n	800b20c <TIM_Base_SetConfig+0x40>
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	4a3a      	ldr	r2, [pc, #232]	; (800b2f0 <TIM_Base_SetConfig+0x124>)
 800b208:	4293      	cmp	r3, r2
 800b20a:	d108      	bne.n	800b21e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b212:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b214:	683b      	ldr	r3, [r7, #0]
 800b216:	685b      	ldr	r3, [r3, #4]
 800b218:	68fa      	ldr	r2, [r7, #12]
 800b21a:	4313      	orrs	r3, r2
 800b21c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	4a2f      	ldr	r2, [pc, #188]	; (800b2e0 <TIM_Base_SetConfig+0x114>)
 800b222:	4293      	cmp	r3, r2
 800b224:	d02b      	beq.n	800b27e <TIM_Base_SetConfig+0xb2>
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b22c:	d027      	beq.n	800b27e <TIM_Base_SetConfig+0xb2>
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	4a2c      	ldr	r2, [pc, #176]	; (800b2e4 <TIM_Base_SetConfig+0x118>)
 800b232:	4293      	cmp	r3, r2
 800b234:	d023      	beq.n	800b27e <TIM_Base_SetConfig+0xb2>
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	4a2b      	ldr	r2, [pc, #172]	; (800b2e8 <TIM_Base_SetConfig+0x11c>)
 800b23a:	4293      	cmp	r3, r2
 800b23c:	d01f      	beq.n	800b27e <TIM_Base_SetConfig+0xb2>
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	4a2a      	ldr	r2, [pc, #168]	; (800b2ec <TIM_Base_SetConfig+0x120>)
 800b242:	4293      	cmp	r3, r2
 800b244:	d01b      	beq.n	800b27e <TIM_Base_SetConfig+0xb2>
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	4a29      	ldr	r2, [pc, #164]	; (800b2f0 <TIM_Base_SetConfig+0x124>)
 800b24a:	4293      	cmp	r3, r2
 800b24c:	d017      	beq.n	800b27e <TIM_Base_SetConfig+0xb2>
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	4a28      	ldr	r2, [pc, #160]	; (800b2f4 <TIM_Base_SetConfig+0x128>)
 800b252:	4293      	cmp	r3, r2
 800b254:	d013      	beq.n	800b27e <TIM_Base_SetConfig+0xb2>
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	4a27      	ldr	r2, [pc, #156]	; (800b2f8 <TIM_Base_SetConfig+0x12c>)
 800b25a:	4293      	cmp	r3, r2
 800b25c:	d00f      	beq.n	800b27e <TIM_Base_SetConfig+0xb2>
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	4a26      	ldr	r2, [pc, #152]	; (800b2fc <TIM_Base_SetConfig+0x130>)
 800b262:	4293      	cmp	r3, r2
 800b264:	d00b      	beq.n	800b27e <TIM_Base_SetConfig+0xb2>
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	4a25      	ldr	r2, [pc, #148]	; (800b300 <TIM_Base_SetConfig+0x134>)
 800b26a:	4293      	cmp	r3, r2
 800b26c:	d007      	beq.n	800b27e <TIM_Base_SetConfig+0xb2>
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	4a24      	ldr	r2, [pc, #144]	; (800b304 <TIM_Base_SetConfig+0x138>)
 800b272:	4293      	cmp	r3, r2
 800b274:	d003      	beq.n	800b27e <TIM_Base_SetConfig+0xb2>
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	4a23      	ldr	r2, [pc, #140]	; (800b308 <TIM_Base_SetConfig+0x13c>)
 800b27a:	4293      	cmp	r3, r2
 800b27c:	d108      	bne.n	800b290 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b284:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b286:	683b      	ldr	r3, [r7, #0]
 800b288:	68db      	ldr	r3, [r3, #12]
 800b28a:	68fa      	ldr	r2, [r7, #12]
 800b28c:	4313      	orrs	r3, r2
 800b28e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b296:	683b      	ldr	r3, [r7, #0]
 800b298:	695b      	ldr	r3, [r3, #20]
 800b29a:	4313      	orrs	r3, r2
 800b29c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	68fa      	ldr	r2, [r7, #12]
 800b2a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b2a4:	683b      	ldr	r3, [r7, #0]
 800b2a6:	689a      	ldr	r2, [r3, #8]
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b2ac:	683b      	ldr	r3, [r7, #0]
 800b2ae:	681a      	ldr	r2, [r3, #0]
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	4a0a      	ldr	r2, [pc, #40]	; (800b2e0 <TIM_Base_SetConfig+0x114>)
 800b2b8:	4293      	cmp	r3, r2
 800b2ba:	d003      	beq.n	800b2c4 <TIM_Base_SetConfig+0xf8>
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	4a0c      	ldr	r2, [pc, #48]	; (800b2f0 <TIM_Base_SetConfig+0x124>)
 800b2c0:	4293      	cmp	r3, r2
 800b2c2:	d103      	bne.n	800b2cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b2c4:	683b      	ldr	r3, [r7, #0]
 800b2c6:	691a      	ldr	r2, [r3, #16]
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	2201      	movs	r2, #1
 800b2d0:	615a      	str	r2, [r3, #20]
}
 800b2d2:	bf00      	nop
 800b2d4:	3714      	adds	r7, #20
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2dc:	4770      	bx	lr
 800b2de:	bf00      	nop
 800b2e0:	40010000 	.word	0x40010000
 800b2e4:	40000400 	.word	0x40000400
 800b2e8:	40000800 	.word	0x40000800
 800b2ec:	40000c00 	.word	0x40000c00
 800b2f0:	40010400 	.word	0x40010400
 800b2f4:	40014000 	.word	0x40014000
 800b2f8:	40014400 	.word	0x40014400
 800b2fc:	40014800 	.word	0x40014800
 800b300:	40001800 	.word	0x40001800
 800b304:	40001c00 	.word	0x40001c00
 800b308:	40002000 	.word	0x40002000

0800b30c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b30c:	b480      	push	{r7}
 800b30e:	b087      	sub	sp, #28
 800b310:	af00      	add	r7, sp, #0
 800b312:	6078      	str	r0, [r7, #4]
 800b314:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	6a1b      	ldr	r3, [r3, #32]
 800b31a:	f023 0201 	bic.w	r2, r3, #1
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	6a1b      	ldr	r3, [r3, #32]
 800b326:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	685b      	ldr	r3, [r3, #4]
 800b32c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	699b      	ldr	r3, [r3, #24]
 800b332:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b33a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	f023 0303 	bic.w	r3, r3, #3
 800b342:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b344:	683b      	ldr	r3, [r7, #0]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	68fa      	ldr	r2, [r7, #12]
 800b34a:	4313      	orrs	r3, r2
 800b34c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b34e:	697b      	ldr	r3, [r7, #20]
 800b350:	f023 0302 	bic.w	r3, r3, #2
 800b354:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b356:	683b      	ldr	r3, [r7, #0]
 800b358:	689b      	ldr	r3, [r3, #8]
 800b35a:	697a      	ldr	r2, [r7, #20]
 800b35c:	4313      	orrs	r3, r2
 800b35e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	4a20      	ldr	r2, [pc, #128]	; (800b3e4 <TIM_OC1_SetConfig+0xd8>)
 800b364:	4293      	cmp	r3, r2
 800b366:	d003      	beq.n	800b370 <TIM_OC1_SetConfig+0x64>
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	4a1f      	ldr	r2, [pc, #124]	; (800b3e8 <TIM_OC1_SetConfig+0xdc>)
 800b36c:	4293      	cmp	r3, r2
 800b36e:	d10c      	bne.n	800b38a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b370:	697b      	ldr	r3, [r7, #20]
 800b372:	f023 0308 	bic.w	r3, r3, #8
 800b376:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b378:	683b      	ldr	r3, [r7, #0]
 800b37a:	68db      	ldr	r3, [r3, #12]
 800b37c:	697a      	ldr	r2, [r7, #20]
 800b37e:	4313      	orrs	r3, r2
 800b380:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b382:	697b      	ldr	r3, [r7, #20]
 800b384:	f023 0304 	bic.w	r3, r3, #4
 800b388:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	4a15      	ldr	r2, [pc, #84]	; (800b3e4 <TIM_OC1_SetConfig+0xd8>)
 800b38e:	4293      	cmp	r3, r2
 800b390:	d003      	beq.n	800b39a <TIM_OC1_SetConfig+0x8e>
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	4a14      	ldr	r2, [pc, #80]	; (800b3e8 <TIM_OC1_SetConfig+0xdc>)
 800b396:	4293      	cmp	r3, r2
 800b398:	d111      	bne.n	800b3be <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b39a:	693b      	ldr	r3, [r7, #16]
 800b39c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b3a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b3a2:	693b      	ldr	r3, [r7, #16]
 800b3a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b3a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b3aa:	683b      	ldr	r3, [r7, #0]
 800b3ac:	695b      	ldr	r3, [r3, #20]
 800b3ae:	693a      	ldr	r2, [r7, #16]
 800b3b0:	4313      	orrs	r3, r2
 800b3b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b3b4:	683b      	ldr	r3, [r7, #0]
 800b3b6:	699b      	ldr	r3, [r3, #24]
 800b3b8:	693a      	ldr	r2, [r7, #16]
 800b3ba:	4313      	orrs	r3, r2
 800b3bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	693a      	ldr	r2, [r7, #16]
 800b3c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	68fa      	ldr	r2, [r7, #12]
 800b3c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b3ca:	683b      	ldr	r3, [r7, #0]
 800b3cc:	685a      	ldr	r2, [r3, #4]
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	697a      	ldr	r2, [r7, #20]
 800b3d6:	621a      	str	r2, [r3, #32]
}
 800b3d8:	bf00      	nop
 800b3da:	371c      	adds	r7, #28
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e2:	4770      	bx	lr
 800b3e4:	40010000 	.word	0x40010000
 800b3e8:	40010400 	.word	0x40010400

0800b3ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b3ec:	b480      	push	{r7}
 800b3ee:	b087      	sub	sp, #28
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
 800b3f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	6a1b      	ldr	r3, [r3, #32]
 800b3fa:	f023 0210 	bic.w	r2, r3, #16
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	6a1b      	ldr	r3, [r3, #32]
 800b406:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	685b      	ldr	r3, [r3, #4]
 800b40c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	699b      	ldr	r3, [r3, #24]
 800b412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b41a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b422:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b424:	683b      	ldr	r3, [r7, #0]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	021b      	lsls	r3, r3, #8
 800b42a:	68fa      	ldr	r2, [r7, #12]
 800b42c:	4313      	orrs	r3, r2
 800b42e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b430:	697b      	ldr	r3, [r7, #20]
 800b432:	f023 0320 	bic.w	r3, r3, #32
 800b436:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b438:	683b      	ldr	r3, [r7, #0]
 800b43a:	689b      	ldr	r3, [r3, #8]
 800b43c:	011b      	lsls	r3, r3, #4
 800b43e:	697a      	ldr	r2, [r7, #20]
 800b440:	4313      	orrs	r3, r2
 800b442:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	4a22      	ldr	r2, [pc, #136]	; (800b4d0 <TIM_OC2_SetConfig+0xe4>)
 800b448:	4293      	cmp	r3, r2
 800b44a:	d003      	beq.n	800b454 <TIM_OC2_SetConfig+0x68>
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	4a21      	ldr	r2, [pc, #132]	; (800b4d4 <TIM_OC2_SetConfig+0xe8>)
 800b450:	4293      	cmp	r3, r2
 800b452:	d10d      	bne.n	800b470 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b454:	697b      	ldr	r3, [r7, #20]
 800b456:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b45a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b45c:	683b      	ldr	r3, [r7, #0]
 800b45e:	68db      	ldr	r3, [r3, #12]
 800b460:	011b      	lsls	r3, r3, #4
 800b462:	697a      	ldr	r2, [r7, #20]
 800b464:	4313      	orrs	r3, r2
 800b466:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b468:	697b      	ldr	r3, [r7, #20]
 800b46a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b46e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	4a17      	ldr	r2, [pc, #92]	; (800b4d0 <TIM_OC2_SetConfig+0xe4>)
 800b474:	4293      	cmp	r3, r2
 800b476:	d003      	beq.n	800b480 <TIM_OC2_SetConfig+0x94>
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	4a16      	ldr	r2, [pc, #88]	; (800b4d4 <TIM_OC2_SetConfig+0xe8>)
 800b47c:	4293      	cmp	r3, r2
 800b47e:	d113      	bne.n	800b4a8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b480:	693b      	ldr	r3, [r7, #16]
 800b482:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b486:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b488:	693b      	ldr	r3, [r7, #16]
 800b48a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b48e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b490:	683b      	ldr	r3, [r7, #0]
 800b492:	695b      	ldr	r3, [r3, #20]
 800b494:	009b      	lsls	r3, r3, #2
 800b496:	693a      	ldr	r2, [r7, #16]
 800b498:	4313      	orrs	r3, r2
 800b49a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b49c:	683b      	ldr	r3, [r7, #0]
 800b49e:	699b      	ldr	r3, [r3, #24]
 800b4a0:	009b      	lsls	r3, r3, #2
 800b4a2:	693a      	ldr	r2, [r7, #16]
 800b4a4:	4313      	orrs	r3, r2
 800b4a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	693a      	ldr	r2, [r7, #16]
 800b4ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	68fa      	ldr	r2, [r7, #12]
 800b4b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b4b4:	683b      	ldr	r3, [r7, #0]
 800b4b6:	685a      	ldr	r2, [r3, #4]
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	697a      	ldr	r2, [r7, #20]
 800b4c0:	621a      	str	r2, [r3, #32]
}
 800b4c2:	bf00      	nop
 800b4c4:	371c      	adds	r7, #28
 800b4c6:	46bd      	mov	sp, r7
 800b4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4cc:	4770      	bx	lr
 800b4ce:	bf00      	nop
 800b4d0:	40010000 	.word	0x40010000
 800b4d4:	40010400 	.word	0x40010400

0800b4d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b4d8:	b480      	push	{r7}
 800b4da:	b087      	sub	sp, #28
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
 800b4e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	6a1b      	ldr	r3, [r3, #32]
 800b4e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	6a1b      	ldr	r3, [r3, #32]
 800b4f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	685b      	ldr	r3, [r3, #4]
 800b4f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	69db      	ldr	r3, [r3, #28]
 800b4fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b506:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	f023 0303 	bic.w	r3, r3, #3
 800b50e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b510:	683b      	ldr	r3, [r7, #0]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	68fa      	ldr	r2, [r7, #12]
 800b516:	4313      	orrs	r3, r2
 800b518:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b51a:	697b      	ldr	r3, [r7, #20]
 800b51c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b520:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b522:	683b      	ldr	r3, [r7, #0]
 800b524:	689b      	ldr	r3, [r3, #8]
 800b526:	021b      	lsls	r3, r3, #8
 800b528:	697a      	ldr	r2, [r7, #20]
 800b52a:	4313      	orrs	r3, r2
 800b52c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	4a21      	ldr	r2, [pc, #132]	; (800b5b8 <TIM_OC3_SetConfig+0xe0>)
 800b532:	4293      	cmp	r3, r2
 800b534:	d003      	beq.n	800b53e <TIM_OC3_SetConfig+0x66>
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	4a20      	ldr	r2, [pc, #128]	; (800b5bc <TIM_OC3_SetConfig+0xe4>)
 800b53a:	4293      	cmp	r3, r2
 800b53c:	d10d      	bne.n	800b55a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b53e:	697b      	ldr	r3, [r7, #20]
 800b540:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b544:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b546:	683b      	ldr	r3, [r7, #0]
 800b548:	68db      	ldr	r3, [r3, #12]
 800b54a:	021b      	lsls	r3, r3, #8
 800b54c:	697a      	ldr	r2, [r7, #20]
 800b54e:	4313      	orrs	r3, r2
 800b550:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b552:	697b      	ldr	r3, [r7, #20]
 800b554:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b558:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	4a16      	ldr	r2, [pc, #88]	; (800b5b8 <TIM_OC3_SetConfig+0xe0>)
 800b55e:	4293      	cmp	r3, r2
 800b560:	d003      	beq.n	800b56a <TIM_OC3_SetConfig+0x92>
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	4a15      	ldr	r2, [pc, #84]	; (800b5bc <TIM_OC3_SetConfig+0xe4>)
 800b566:	4293      	cmp	r3, r2
 800b568:	d113      	bne.n	800b592 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b56a:	693b      	ldr	r3, [r7, #16]
 800b56c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b570:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b572:	693b      	ldr	r3, [r7, #16]
 800b574:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b578:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b57a:	683b      	ldr	r3, [r7, #0]
 800b57c:	695b      	ldr	r3, [r3, #20]
 800b57e:	011b      	lsls	r3, r3, #4
 800b580:	693a      	ldr	r2, [r7, #16]
 800b582:	4313      	orrs	r3, r2
 800b584:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b586:	683b      	ldr	r3, [r7, #0]
 800b588:	699b      	ldr	r3, [r3, #24]
 800b58a:	011b      	lsls	r3, r3, #4
 800b58c:	693a      	ldr	r2, [r7, #16]
 800b58e:	4313      	orrs	r3, r2
 800b590:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	693a      	ldr	r2, [r7, #16]
 800b596:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	68fa      	ldr	r2, [r7, #12]
 800b59c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b59e:	683b      	ldr	r3, [r7, #0]
 800b5a0:	685a      	ldr	r2, [r3, #4]
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	697a      	ldr	r2, [r7, #20]
 800b5aa:	621a      	str	r2, [r3, #32]
}
 800b5ac:	bf00      	nop
 800b5ae:	371c      	adds	r7, #28
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b6:	4770      	bx	lr
 800b5b8:	40010000 	.word	0x40010000
 800b5bc:	40010400 	.word	0x40010400

0800b5c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b5c0:	b480      	push	{r7}
 800b5c2:	b087      	sub	sp, #28
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
 800b5c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	6a1b      	ldr	r3, [r3, #32]
 800b5ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	6a1b      	ldr	r3, [r3, #32]
 800b5da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	685b      	ldr	r3, [r3, #4]
 800b5e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	69db      	ldr	r3, [r3, #28]
 800b5e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b5ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b5f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b5f8:	683b      	ldr	r3, [r7, #0]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	021b      	lsls	r3, r3, #8
 800b5fe:	68fa      	ldr	r2, [r7, #12]
 800b600:	4313      	orrs	r3, r2
 800b602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b604:	693b      	ldr	r3, [r7, #16]
 800b606:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b60a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b60c:	683b      	ldr	r3, [r7, #0]
 800b60e:	689b      	ldr	r3, [r3, #8]
 800b610:	031b      	lsls	r3, r3, #12
 800b612:	693a      	ldr	r2, [r7, #16]
 800b614:	4313      	orrs	r3, r2
 800b616:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	4a12      	ldr	r2, [pc, #72]	; (800b664 <TIM_OC4_SetConfig+0xa4>)
 800b61c:	4293      	cmp	r3, r2
 800b61e:	d003      	beq.n	800b628 <TIM_OC4_SetConfig+0x68>
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	4a11      	ldr	r2, [pc, #68]	; (800b668 <TIM_OC4_SetConfig+0xa8>)
 800b624:	4293      	cmp	r3, r2
 800b626:	d109      	bne.n	800b63c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b628:	697b      	ldr	r3, [r7, #20]
 800b62a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b62e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b630:	683b      	ldr	r3, [r7, #0]
 800b632:	695b      	ldr	r3, [r3, #20]
 800b634:	019b      	lsls	r3, r3, #6
 800b636:	697a      	ldr	r2, [r7, #20]
 800b638:	4313      	orrs	r3, r2
 800b63a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	697a      	ldr	r2, [r7, #20]
 800b640:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	68fa      	ldr	r2, [r7, #12]
 800b646:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b648:	683b      	ldr	r3, [r7, #0]
 800b64a:	685a      	ldr	r2, [r3, #4]
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	693a      	ldr	r2, [r7, #16]
 800b654:	621a      	str	r2, [r3, #32]
}
 800b656:	bf00      	nop
 800b658:	371c      	adds	r7, #28
 800b65a:	46bd      	mov	sp, r7
 800b65c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b660:	4770      	bx	lr
 800b662:	bf00      	nop
 800b664:	40010000 	.word	0x40010000
 800b668:	40010400 	.word	0x40010400

0800b66c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b66c:	b480      	push	{r7}
 800b66e:	b087      	sub	sp, #28
 800b670:	af00      	add	r7, sp, #0
 800b672:	60f8      	str	r0, [r7, #12]
 800b674:	60b9      	str	r1, [r7, #8]
 800b676:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b678:	68bb      	ldr	r3, [r7, #8]
 800b67a:	f003 031f 	and.w	r3, r3, #31
 800b67e:	2201      	movs	r2, #1
 800b680:	fa02 f303 	lsl.w	r3, r2, r3
 800b684:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	6a1a      	ldr	r2, [r3, #32]
 800b68a:	697b      	ldr	r3, [r7, #20]
 800b68c:	43db      	mvns	r3, r3
 800b68e:	401a      	ands	r2, r3
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	6a1a      	ldr	r2, [r3, #32]
 800b698:	68bb      	ldr	r3, [r7, #8]
 800b69a:	f003 031f 	and.w	r3, r3, #31
 800b69e:	6879      	ldr	r1, [r7, #4]
 800b6a0:	fa01 f303 	lsl.w	r3, r1, r3
 800b6a4:	431a      	orrs	r2, r3
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	621a      	str	r2, [r3, #32]
}
 800b6aa:	bf00      	nop
 800b6ac:	371c      	adds	r7, #28
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b4:	4770      	bx	lr
	...

0800b6b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b6b8:	b480      	push	{r7}
 800b6ba:	b085      	sub	sp, #20
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	6078      	str	r0, [r7, #4]
 800b6c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b6c8:	2b01      	cmp	r3, #1
 800b6ca:	d101      	bne.n	800b6d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b6cc:	2302      	movs	r3, #2
 800b6ce:	e05a      	b.n	800b786 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	2201      	movs	r2, #1
 800b6d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	2202      	movs	r2, #2
 800b6dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	685b      	ldr	r3, [r3, #4]
 800b6e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	689b      	ldr	r3, [r3, #8]
 800b6ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b6f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b6f8:	683b      	ldr	r3, [r7, #0]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	68fa      	ldr	r2, [r7, #12]
 800b6fe:	4313      	orrs	r3, r2
 800b700:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	68fa      	ldr	r2, [r7, #12]
 800b708:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	4a21      	ldr	r2, [pc, #132]	; (800b794 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800b710:	4293      	cmp	r3, r2
 800b712:	d022      	beq.n	800b75a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b71c:	d01d      	beq.n	800b75a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	4a1d      	ldr	r2, [pc, #116]	; (800b798 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800b724:	4293      	cmp	r3, r2
 800b726:	d018      	beq.n	800b75a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	4a1b      	ldr	r2, [pc, #108]	; (800b79c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800b72e:	4293      	cmp	r3, r2
 800b730:	d013      	beq.n	800b75a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	4a1a      	ldr	r2, [pc, #104]	; (800b7a0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800b738:	4293      	cmp	r3, r2
 800b73a:	d00e      	beq.n	800b75a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	4a18      	ldr	r2, [pc, #96]	; (800b7a4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800b742:	4293      	cmp	r3, r2
 800b744:	d009      	beq.n	800b75a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	4a17      	ldr	r2, [pc, #92]	; (800b7a8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b74c:	4293      	cmp	r3, r2
 800b74e:	d004      	beq.n	800b75a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	4a15      	ldr	r2, [pc, #84]	; (800b7ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b756:	4293      	cmp	r3, r2
 800b758:	d10c      	bne.n	800b774 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b75a:	68bb      	ldr	r3, [r7, #8]
 800b75c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b760:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b762:	683b      	ldr	r3, [r7, #0]
 800b764:	685b      	ldr	r3, [r3, #4]
 800b766:	68ba      	ldr	r2, [r7, #8]
 800b768:	4313      	orrs	r3, r2
 800b76a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	68ba      	ldr	r2, [r7, #8]
 800b772:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	2201      	movs	r2, #1
 800b778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	2200      	movs	r2, #0
 800b780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b784:	2300      	movs	r3, #0
}
 800b786:	4618      	mov	r0, r3
 800b788:	3714      	adds	r7, #20
 800b78a:	46bd      	mov	sp, r7
 800b78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b790:	4770      	bx	lr
 800b792:	bf00      	nop
 800b794:	40010000 	.word	0x40010000
 800b798:	40000400 	.word	0x40000400
 800b79c:	40000800 	.word	0x40000800
 800b7a0:	40000c00 	.word	0x40000c00
 800b7a4:	40010400 	.word	0x40010400
 800b7a8:	40014000 	.word	0x40014000
 800b7ac:	40001800 	.word	0x40001800

0800b7b0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b7b0:	b480      	push	{r7}
 800b7b2:	b085      	sub	sp, #20
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
 800b7b8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b7c4:	2b01      	cmp	r3, #1
 800b7c6:	d101      	bne.n	800b7cc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b7c8:	2302      	movs	r3, #2
 800b7ca:	e03d      	b.n	800b848 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	2201      	movs	r2, #1
 800b7d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b7da:	683b      	ldr	r3, [r7, #0]
 800b7dc:	68db      	ldr	r3, [r3, #12]
 800b7de:	4313      	orrs	r3, r2
 800b7e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b7e8:	683b      	ldr	r3, [r7, #0]
 800b7ea:	689b      	ldr	r3, [r3, #8]
 800b7ec:	4313      	orrs	r3, r2
 800b7ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b7f6:	683b      	ldr	r3, [r7, #0]
 800b7f8:	685b      	ldr	r3, [r3, #4]
 800b7fa:	4313      	orrs	r3, r2
 800b7fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b804:	683b      	ldr	r3, [r7, #0]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	4313      	orrs	r3, r2
 800b80a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b80c:	68fb      	ldr	r3, [r7, #12]
 800b80e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b812:	683b      	ldr	r3, [r7, #0]
 800b814:	691b      	ldr	r3, [r3, #16]
 800b816:	4313      	orrs	r3, r2
 800b818:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b820:	683b      	ldr	r3, [r7, #0]
 800b822:	695b      	ldr	r3, [r3, #20]
 800b824:	4313      	orrs	r3, r2
 800b826:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b82e:	683b      	ldr	r3, [r7, #0]
 800b830:	69db      	ldr	r3, [r3, #28]
 800b832:	4313      	orrs	r3, r2
 800b834:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	68fa      	ldr	r2, [r7, #12]
 800b83c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	2200      	movs	r2, #0
 800b842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b846:	2300      	movs	r3, #0
}
 800b848:	4618      	mov	r0, r3
 800b84a:	3714      	adds	r7, #20
 800b84c:	46bd      	mov	sp, r7
 800b84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b852:	4770      	bx	lr

0800b854 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b854:	b480      	push	{r7}
 800b856:	b083      	sub	sp, #12
 800b858:	af00      	add	r7, sp, #0
 800b85a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b85c:	bf00      	nop
 800b85e:	370c      	adds	r7, #12
 800b860:	46bd      	mov	sp, r7
 800b862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b866:	4770      	bx	lr

0800b868 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b868:	b480      	push	{r7}
 800b86a:	b083      	sub	sp, #12
 800b86c:	af00      	add	r7, sp, #0
 800b86e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b870:	bf00      	nop
 800b872:	370c      	adds	r7, #12
 800b874:	46bd      	mov	sp, r7
 800b876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87a:	4770      	bx	lr

0800b87c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b87c:	b580      	push	{r7, lr}
 800b87e:	b082      	sub	sp, #8
 800b880:	af00      	add	r7, sp, #0
 800b882:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d101      	bne.n	800b88e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b88a:	2301      	movs	r3, #1
 800b88c:	e03f      	b.n	800b90e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b894:	b2db      	uxtb	r3, r3
 800b896:	2b00      	cmp	r3, #0
 800b898:	d106      	bne.n	800b8a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	2200      	movs	r2, #0
 800b89e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b8a2:	6878      	ldr	r0, [r7, #4]
 800b8a4:	f7f9 fa82 	bl	8004dac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	2224      	movs	r2, #36	; 0x24
 800b8ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	68da      	ldr	r2, [r3, #12]
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b8be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b8c0:	6878      	ldr	r0, [r7, #4]
 800b8c2:	f000 f829 	bl	800b918 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	691a      	ldr	r2, [r3, #16]
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b8d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	695a      	ldr	r2, [r3, #20]
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b8e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	68da      	ldr	r2, [r3, #12]
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b8f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	2200      	movs	r2, #0
 800b8fa:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	2220      	movs	r2, #32
 800b900:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	2220      	movs	r2, #32
 800b908:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800b90c:	2300      	movs	r3, #0
}
 800b90e:	4618      	mov	r0, r3
 800b910:	3708      	adds	r7, #8
 800b912:	46bd      	mov	sp, r7
 800b914:	bd80      	pop	{r7, pc}
	...

0800b918 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b91c:	b085      	sub	sp, #20
 800b91e:	af00      	add	r7, sp, #0
 800b920:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	691b      	ldr	r3, [r3, #16]
 800b928:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	68da      	ldr	r2, [r3, #12]
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	430a      	orrs	r2, r1
 800b936:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	689a      	ldr	r2, [r3, #8]
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	691b      	ldr	r3, [r3, #16]
 800b940:	431a      	orrs	r2, r3
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	695b      	ldr	r3, [r3, #20]
 800b946:	431a      	orrs	r2, r3
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	69db      	ldr	r3, [r3, #28]
 800b94c:	4313      	orrs	r3, r2
 800b94e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	68db      	ldr	r3, [r3, #12]
 800b956:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800b95a:	f023 030c 	bic.w	r3, r3, #12
 800b95e:	687a      	ldr	r2, [r7, #4]
 800b960:	6812      	ldr	r2, [r2, #0]
 800b962:	68f9      	ldr	r1, [r7, #12]
 800b964:	430b      	orrs	r3, r1
 800b966:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	695b      	ldr	r3, [r3, #20]
 800b96e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	699a      	ldr	r2, [r3, #24]
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	430a      	orrs	r2, r1
 800b97c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	69db      	ldr	r3, [r3, #28]
 800b982:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b986:	f040 818b 	bne.w	800bca0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	4ac1      	ldr	r2, [pc, #772]	; (800bc94 <UART_SetConfig+0x37c>)
 800b990:	4293      	cmp	r3, r2
 800b992:	d005      	beq.n	800b9a0 <UART_SetConfig+0x88>
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	4abf      	ldr	r2, [pc, #764]	; (800bc98 <UART_SetConfig+0x380>)
 800b99a:	4293      	cmp	r3, r2
 800b99c:	f040 80bd 	bne.w	800bb1a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b9a0:	f7fc fbcc 	bl	800813c <HAL_RCC_GetPCLK2Freq>
 800b9a4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b9a6:	68bb      	ldr	r3, [r7, #8]
 800b9a8:	461d      	mov	r5, r3
 800b9aa:	f04f 0600 	mov.w	r6, #0
 800b9ae:	46a8      	mov	r8, r5
 800b9b0:	46b1      	mov	r9, r6
 800b9b2:	eb18 0308 	adds.w	r3, r8, r8
 800b9b6:	eb49 0409 	adc.w	r4, r9, r9
 800b9ba:	4698      	mov	r8, r3
 800b9bc:	46a1      	mov	r9, r4
 800b9be:	eb18 0805 	adds.w	r8, r8, r5
 800b9c2:	eb49 0906 	adc.w	r9, r9, r6
 800b9c6:	f04f 0100 	mov.w	r1, #0
 800b9ca:	f04f 0200 	mov.w	r2, #0
 800b9ce:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800b9d2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800b9d6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800b9da:	4688      	mov	r8, r1
 800b9dc:	4691      	mov	r9, r2
 800b9de:	eb18 0005 	adds.w	r0, r8, r5
 800b9e2:	eb49 0106 	adc.w	r1, r9, r6
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	685b      	ldr	r3, [r3, #4]
 800b9ea:	461d      	mov	r5, r3
 800b9ec:	f04f 0600 	mov.w	r6, #0
 800b9f0:	196b      	adds	r3, r5, r5
 800b9f2:	eb46 0406 	adc.w	r4, r6, r6
 800b9f6:	461a      	mov	r2, r3
 800b9f8:	4623      	mov	r3, r4
 800b9fa:	f7f5 f95d 	bl	8000cb8 <__aeabi_uldivmod>
 800b9fe:	4603      	mov	r3, r0
 800ba00:	460c      	mov	r4, r1
 800ba02:	461a      	mov	r2, r3
 800ba04:	4ba5      	ldr	r3, [pc, #660]	; (800bc9c <UART_SetConfig+0x384>)
 800ba06:	fba3 2302 	umull	r2, r3, r3, r2
 800ba0a:	095b      	lsrs	r3, r3, #5
 800ba0c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800ba10:	68bb      	ldr	r3, [r7, #8]
 800ba12:	461d      	mov	r5, r3
 800ba14:	f04f 0600 	mov.w	r6, #0
 800ba18:	46a9      	mov	r9, r5
 800ba1a:	46b2      	mov	sl, r6
 800ba1c:	eb19 0309 	adds.w	r3, r9, r9
 800ba20:	eb4a 040a 	adc.w	r4, sl, sl
 800ba24:	4699      	mov	r9, r3
 800ba26:	46a2      	mov	sl, r4
 800ba28:	eb19 0905 	adds.w	r9, r9, r5
 800ba2c:	eb4a 0a06 	adc.w	sl, sl, r6
 800ba30:	f04f 0100 	mov.w	r1, #0
 800ba34:	f04f 0200 	mov.w	r2, #0
 800ba38:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ba3c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ba40:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ba44:	4689      	mov	r9, r1
 800ba46:	4692      	mov	sl, r2
 800ba48:	eb19 0005 	adds.w	r0, r9, r5
 800ba4c:	eb4a 0106 	adc.w	r1, sl, r6
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	685b      	ldr	r3, [r3, #4]
 800ba54:	461d      	mov	r5, r3
 800ba56:	f04f 0600 	mov.w	r6, #0
 800ba5a:	196b      	adds	r3, r5, r5
 800ba5c:	eb46 0406 	adc.w	r4, r6, r6
 800ba60:	461a      	mov	r2, r3
 800ba62:	4623      	mov	r3, r4
 800ba64:	f7f5 f928 	bl	8000cb8 <__aeabi_uldivmod>
 800ba68:	4603      	mov	r3, r0
 800ba6a:	460c      	mov	r4, r1
 800ba6c:	461a      	mov	r2, r3
 800ba6e:	4b8b      	ldr	r3, [pc, #556]	; (800bc9c <UART_SetConfig+0x384>)
 800ba70:	fba3 1302 	umull	r1, r3, r3, r2
 800ba74:	095b      	lsrs	r3, r3, #5
 800ba76:	2164      	movs	r1, #100	; 0x64
 800ba78:	fb01 f303 	mul.w	r3, r1, r3
 800ba7c:	1ad3      	subs	r3, r2, r3
 800ba7e:	00db      	lsls	r3, r3, #3
 800ba80:	3332      	adds	r3, #50	; 0x32
 800ba82:	4a86      	ldr	r2, [pc, #536]	; (800bc9c <UART_SetConfig+0x384>)
 800ba84:	fba2 2303 	umull	r2, r3, r2, r3
 800ba88:	095b      	lsrs	r3, r3, #5
 800ba8a:	005b      	lsls	r3, r3, #1
 800ba8c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ba90:	4498      	add	r8, r3
 800ba92:	68bb      	ldr	r3, [r7, #8]
 800ba94:	461d      	mov	r5, r3
 800ba96:	f04f 0600 	mov.w	r6, #0
 800ba9a:	46a9      	mov	r9, r5
 800ba9c:	46b2      	mov	sl, r6
 800ba9e:	eb19 0309 	adds.w	r3, r9, r9
 800baa2:	eb4a 040a 	adc.w	r4, sl, sl
 800baa6:	4699      	mov	r9, r3
 800baa8:	46a2      	mov	sl, r4
 800baaa:	eb19 0905 	adds.w	r9, r9, r5
 800baae:	eb4a 0a06 	adc.w	sl, sl, r6
 800bab2:	f04f 0100 	mov.w	r1, #0
 800bab6:	f04f 0200 	mov.w	r2, #0
 800baba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800babe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800bac2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800bac6:	4689      	mov	r9, r1
 800bac8:	4692      	mov	sl, r2
 800baca:	eb19 0005 	adds.w	r0, r9, r5
 800bace:	eb4a 0106 	adc.w	r1, sl, r6
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	685b      	ldr	r3, [r3, #4]
 800bad6:	461d      	mov	r5, r3
 800bad8:	f04f 0600 	mov.w	r6, #0
 800badc:	196b      	adds	r3, r5, r5
 800bade:	eb46 0406 	adc.w	r4, r6, r6
 800bae2:	461a      	mov	r2, r3
 800bae4:	4623      	mov	r3, r4
 800bae6:	f7f5 f8e7 	bl	8000cb8 <__aeabi_uldivmod>
 800baea:	4603      	mov	r3, r0
 800baec:	460c      	mov	r4, r1
 800baee:	461a      	mov	r2, r3
 800baf0:	4b6a      	ldr	r3, [pc, #424]	; (800bc9c <UART_SetConfig+0x384>)
 800baf2:	fba3 1302 	umull	r1, r3, r3, r2
 800baf6:	095b      	lsrs	r3, r3, #5
 800baf8:	2164      	movs	r1, #100	; 0x64
 800bafa:	fb01 f303 	mul.w	r3, r1, r3
 800bafe:	1ad3      	subs	r3, r2, r3
 800bb00:	00db      	lsls	r3, r3, #3
 800bb02:	3332      	adds	r3, #50	; 0x32
 800bb04:	4a65      	ldr	r2, [pc, #404]	; (800bc9c <UART_SetConfig+0x384>)
 800bb06:	fba2 2303 	umull	r2, r3, r2, r3
 800bb0a:	095b      	lsrs	r3, r3, #5
 800bb0c:	f003 0207 	and.w	r2, r3, #7
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	4442      	add	r2, r8
 800bb16:	609a      	str	r2, [r3, #8]
 800bb18:	e26f      	b.n	800bffa <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800bb1a:	f7fc fafb 	bl	8008114 <HAL_RCC_GetPCLK1Freq>
 800bb1e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800bb20:	68bb      	ldr	r3, [r7, #8]
 800bb22:	461d      	mov	r5, r3
 800bb24:	f04f 0600 	mov.w	r6, #0
 800bb28:	46a8      	mov	r8, r5
 800bb2a:	46b1      	mov	r9, r6
 800bb2c:	eb18 0308 	adds.w	r3, r8, r8
 800bb30:	eb49 0409 	adc.w	r4, r9, r9
 800bb34:	4698      	mov	r8, r3
 800bb36:	46a1      	mov	r9, r4
 800bb38:	eb18 0805 	adds.w	r8, r8, r5
 800bb3c:	eb49 0906 	adc.w	r9, r9, r6
 800bb40:	f04f 0100 	mov.w	r1, #0
 800bb44:	f04f 0200 	mov.w	r2, #0
 800bb48:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800bb4c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800bb50:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800bb54:	4688      	mov	r8, r1
 800bb56:	4691      	mov	r9, r2
 800bb58:	eb18 0005 	adds.w	r0, r8, r5
 800bb5c:	eb49 0106 	adc.w	r1, r9, r6
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	685b      	ldr	r3, [r3, #4]
 800bb64:	461d      	mov	r5, r3
 800bb66:	f04f 0600 	mov.w	r6, #0
 800bb6a:	196b      	adds	r3, r5, r5
 800bb6c:	eb46 0406 	adc.w	r4, r6, r6
 800bb70:	461a      	mov	r2, r3
 800bb72:	4623      	mov	r3, r4
 800bb74:	f7f5 f8a0 	bl	8000cb8 <__aeabi_uldivmod>
 800bb78:	4603      	mov	r3, r0
 800bb7a:	460c      	mov	r4, r1
 800bb7c:	461a      	mov	r2, r3
 800bb7e:	4b47      	ldr	r3, [pc, #284]	; (800bc9c <UART_SetConfig+0x384>)
 800bb80:	fba3 2302 	umull	r2, r3, r3, r2
 800bb84:	095b      	lsrs	r3, r3, #5
 800bb86:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800bb8a:	68bb      	ldr	r3, [r7, #8]
 800bb8c:	461d      	mov	r5, r3
 800bb8e:	f04f 0600 	mov.w	r6, #0
 800bb92:	46a9      	mov	r9, r5
 800bb94:	46b2      	mov	sl, r6
 800bb96:	eb19 0309 	adds.w	r3, r9, r9
 800bb9a:	eb4a 040a 	adc.w	r4, sl, sl
 800bb9e:	4699      	mov	r9, r3
 800bba0:	46a2      	mov	sl, r4
 800bba2:	eb19 0905 	adds.w	r9, r9, r5
 800bba6:	eb4a 0a06 	adc.w	sl, sl, r6
 800bbaa:	f04f 0100 	mov.w	r1, #0
 800bbae:	f04f 0200 	mov.w	r2, #0
 800bbb2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800bbb6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800bbba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800bbbe:	4689      	mov	r9, r1
 800bbc0:	4692      	mov	sl, r2
 800bbc2:	eb19 0005 	adds.w	r0, r9, r5
 800bbc6:	eb4a 0106 	adc.w	r1, sl, r6
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	685b      	ldr	r3, [r3, #4]
 800bbce:	461d      	mov	r5, r3
 800bbd0:	f04f 0600 	mov.w	r6, #0
 800bbd4:	196b      	adds	r3, r5, r5
 800bbd6:	eb46 0406 	adc.w	r4, r6, r6
 800bbda:	461a      	mov	r2, r3
 800bbdc:	4623      	mov	r3, r4
 800bbde:	f7f5 f86b 	bl	8000cb8 <__aeabi_uldivmod>
 800bbe2:	4603      	mov	r3, r0
 800bbe4:	460c      	mov	r4, r1
 800bbe6:	461a      	mov	r2, r3
 800bbe8:	4b2c      	ldr	r3, [pc, #176]	; (800bc9c <UART_SetConfig+0x384>)
 800bbea:	fba3 1302 	umull	r1, r3, r3, r2
 800bbee:	095b      	lsrs	r3, r3, #5
 800bbf0:	2164      	movs	r1, #100	; 0x64
 800bbf2:	fb01 f303 	mul.w	r3, r1, r3
 800bbf6:	1ad3      	subs	r3, r2, r3
 800bbf8:	00db      	lsls	r3, r3, #3
 800bbfa:	3332      	adds	r3, #50	; 0x32
 800bbfc:	4a27      	ldr	r2, [pc, #156]	; (800bc9c <UART_SetConfig+0x384>)
 800bbfe:	fba2 2303 	umull	r2, r3, r2, r3
 800bc02:	095b      	lsrs	r3, r3, #5
 800bc04:	005b      	lsls	r3, r3, #1
 800bc06:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800bc0a:	4498      	add	r8, r3
 800bc0c:	68bb      	ldr	r3, [r7, #8]
 800bc0e:	461d      	mov	r5, r3
 800bc10:	f04f 0600 	mov.w	r6, #0
 800bc14:	46a9      	mov	r9, r5
 800bc16:	46b2      	mov	sl, r6
 800bc18:	eb19 0309 	adds.w	r3, r9, r9
 800bc1c:	eb4a 040a 	adc.w	r4, sl, sl
 800bc20:	4699      	mov	r9, r3
 800bc22:	46a2      	mov	sl, r4
 800bc24:	eb19 0905 	adds.w	r9, r9, r5
 800bc28:	eb4a 0a06 	adc.w	sl, sl, r6
 800bc2c:	f04f 0100 	mov.w	r1, #0
 800bc30:	f04f 0200 	mov.w	r2, #0
 800bc34:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800bc38:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800bc3c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800bc40:	4689      	mov	r9, r1
 800bc42:	4692      	mov	sl, r2
 800bc44:	eb19 0005 	adds.w	r0, r9, r5
 800bc48:	eb4a 0106 	adc.w	r1, sl, r6
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	685b      	ldr	r3, [r3, #4]
 800bc50:	461d      	mov	r5, r3
 800bc52:	f04f 0600 	mov.w	r6, #0
 800bc56:	196b      	adds	r3, r5, r5
 800bc58:	eb46 0406 	adc.w	r4, r6, r6
 800bc5c:	461a      	mov	r2, r3
 800bc5e:	4623      	mov	r3, r4
 800bc60:	f7f5 f82a 	bl	8000cb8 <__aeabi_uldivmod>
 800bc64:	4603      	mov	r3, r0
 800bc66:	460c      	mov	r4, r1
 800bc68:	461a      	mov	r2, r3
 800bc6a:	4b0c      	ldr	r3, [pc, #48]	; (800bc9c <UART_SetConfig+0x384>)
 800bc6c:	fba3 1302 	umull	r1, r3, r3, r2
 800bc70:	095b      	lsrs	r3, r3, #5
 800bc72:	2164      	movs	r1, #100	; 0x64
 800bc74:	fb01 f303 	mul.w	r3, r1, r3
 800bc78:	1ad3      	subs	r3, r2, r3
 800bc7a:	00db      	lsls	r3, r3, #3
 800bc7c:	3332      	adds	r3, #50	; 0x32
 800bc7e:	4a07      	ldr	r2, [pc, #28]	; (800bc9c <UART_SetConfig+0x384>)
 800bc80:	fba2 2303 	umull	r2, r3, r2, r3
 800bc84:	095b      	lsrs	r3, r3, #5
 800bc86:	f003 0207 	and.w	r2, r3, #7
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	4442      	add	r2, r8
 800bc90:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800bc92:	e1b2      	b.n	800bffa <UART_SetConfig+0x6e2>
 800bc94:	40011000 	.word	0x40011000
 800bc98:	40011400 	.word	0x40011400
 800bc9c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	4ad7      	ldr	r2, [pc, #860]	; (800c004 <UART_SetConfig+0x6ec>)
 800bca6:	4293      	cmp	r3, r2
 800bca8:	d005      	beq.n	800bcb6 <UART_SetConfig+0x39e>
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	4ad6      	ldr	r2, [pc, #856]	; (800c008 <UART_SetConfig+0x6f0>)
 800bcb0:	4293      	cmp	r3, r2
 800bcb2:	f040 80d1 	bne.w	800be58 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800bcb6:	f7fc fa41 	bl	800813c <HAL_RCC_GetPCLK2Freq>
 800bcba:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bcbc:	68bb      	ldr	r3, [r7, #8]
 800bcbe:	469a      	mov	sl, r3
 800bcc0:	f04f 0b00 	mov.w	fp, #0
 800bcc4:	46d0      	mov	r8, sl
 800bcc6:	46d9      	mov	r9, fp
 800bcc8:	eb18 0308 	adds.w	r3, r8, r8
 800bccc:	eb49 0409 	adc.w	r4, r9, r9
 800bcd0:	4698      	mov	r8, r3
 800bcd2:	46a1      	mov	r9, r4
 800bcd4:	eb18 080a 	adds.w	r8, r8, sl
 800bcd8:	eb49 090b 	adc.w	r9, r9, fp
 800bcdc:	f04f 0100 	mov.w	r1, #0
 800bce0:	f04f 0200 	mov.w	r2, #0
 800bce4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800bce8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800bcec:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800bcf0:	4688      	mov	r8, r1
 800bcf2:	4691      	mov	r9, r2
 800bcf4:	eb1a 0508 	adds.w	r5, sl, r8
 800bcf8:	eb4b 0609 	adc.w	r6, fp, r9
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	685b      	ldr	r3, [r3, #4]
 800bd00:	4619      	mov	r1, r3
 800bd02:	f04f 0200 	mov.w	r2, #0
 800bd06:	f04f 0300 	mov.w	r3, #0
 800bd0a:	f04f 0400 	mov.w	r4, #0
 800bd0e:	0094      	lsls	r4, r2, #2
 800bd10:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800bd14:	008b      	lsls	r3, r1, #2
 800bd16:	461a      	mov	r2, r3
 800bd18:	4623      	mov	r3, r4
 800bd1a:	4628      	mov	r0, r5
 800bd1c:	4631      	mov	r1, r6
 800bd1e:	f7f4 ffcb 	bl	8000cb8 <__aeabi_uldivmod>
 800bd22:	4603      	mov	r3, r0
 800bd24:	460c      	mov	r4, r1
 800bd26:	461a      	mov	r2, r3
 800bd28:	4bb8      	ldr	r3, [pc, #736]	; (800c00c <UART_SetConfig+0x6f4>)
 800bd2a:	fba3 2302 	umull	r2, r3, r3, r2
 800bd2e:	095b      	lsrs	r3, r3, #5
 800bd30:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800bd34:	68bb      	ldr	r3, [r7, #8]
 800bd36:	469b      	mov	fp, r3
 800bd38:	f04f 0c00 	mov.w	ip, #0
 800bd3c:	46d9      	mov	r9, fp
 800bd3e:	46e2      	mov	sl, ip
 800bd40:	eb19 0309 	adds.w	r3, r9, r9
 800bd44:	eb4a 040a 	adc.w	r4, sl, sl
 800bd48:	4699      	mov	r9, r3
 800bd4a:	46a2      	mov	sl, r4
 800bd4c:	eb19 090b 	adds.w	r9, r9, fp
 800bd50:	eb4a 0a0c 	adc.w	sl, sl, ip
 800bd54:	f04f 0100 	mov.w	r1, #0
 800bd58:	f04f 0200 	mov.w	r2, #0
 800bd5c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800bd60:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800bd64:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800bd68:	4689      	mov	r9, r1
 800bd6a:	4692      	mov	sl, r2
 800bd6c:	eb1b 0509 	adds.w	r5, fp, r9
 800bd70:	eb4c 060a 	adc.w	r6, ip, sl
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	685b      	ldr	r3, [r3, #4]
 800bd78:	4619      	mov	r1, r3
 800bd7a:	f04f 0200 	mov.w	r2, #0
 800bd7e:	f04f 0300 	mov.w	r3, #0
 800bd82:	f04f 0400 	mov.w	r4, #0
 800bd86:	0094      	lsls	r4, r2, #2
 800bd88:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800bd8c:	008b      	lsls	r3, r1, #2
 800bd8e:	461a      	mov	r2, r3
 800bd90:	4623      	mov	r3, r4
 800bd92:	4628      	mov	r0, r5
 800bd94:	4631      	mov	r1, r6
 800bd96:	f7f4 ff8f 	bl	8000cb8 <__aeabi_uldivmod>
 800bd9a:	4603      	mov	r3, r0
 800bd9c:	460c      	mov	r4, r1
 800bd9e:	461a      	mov	r2, r3
 800bda0:	4b9a      	ldr	r3, [pc, #616]	; (800c00c <UART_SetConfig+0x6f4>)
 800bda2:	fba3 1302 	umull	r1, r3, r3, r2
 800bda6:	095b      	lsrs	r3, r3, #5
 800bda8:	2164      	movs	r1, #100	; 0x64
 800bdaa:	fb01 f303 	mul.w	r3, r1, r3
 800bdae:	1ad3      	subs	r3, r2, r3
 800bdb0:	011b      	lsls	r3, r3, #4
 800bdb2:	3332      	adds	r3, #50	; 0x32
 800bdb4:	4a95      	ldr	r2, [pc, #596]	; (800c00c <UART_SetConfig+0x6f4>)
 800bdb6:	fba2 2303 	umull	r2, r3, r2, r3
 800bdba:	095b      	lsrs	r3, r3, #5
 800bdbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bdc0:	4498      	add	r8, r3
 800bdc2:	68bb      	ldr	r3, [r7, #8]
 800bdc4:	469b      	mov	fp, r3
 800bdc6:	f04f 0c00 	mov.w	ip, #0
 800bdca:	46d9      	mov	r9, fp
 800bdcc:	46e2      	mov	sl, ip
 800bdce:	eb19 0309 	adds.w	r3, r9, r9
 800bdd2:	eb4a 040a 	adc.w	r4, sl, sl
 800bdd6:	4699      	mov	r9, r3
 800bdd8:	46a2      	mov	sl, r4
 800bdda:	eb19 090b 	adds.w	r9, r9, fp
 800bdde:	eb4a 0a0c 	adc.w	sl, sl, ip
 800bde2:	f04f 0100 	mov.w	r1, #0
 800bde6:	f04f 0200 	mov.w	r2, #0
 800bdea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800bdee:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800bdf2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800bdf6:	4689      	mov	r9, r1
 800bdf8:	4692      	mov	sl, r2
 800bdfa:	eb1b 0509 	adds.w	r5, fp, r9
 800bdfe:	eb4c 060a 	adc.w	r6, ip, sl
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	685b      	ldr	r3, [r3, #4]
 800be06:	4619      	mov	r1, r3
 800be08:	f04f 0200 	mov.w	r2, #0
 800be0c:	f04f 0300 	mov.w	r3, #0
 800be10:	f04f 0400 	mov.w	r4, #0
 800be14:	0094      	lsls	r4, r2, #2
 800be16:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800be1a:	008b      	lsls	r3, r1, #2
 800be1c:	461a      	mov	r2, r3
 800be1e:	4623      	mov	r3, r4
 800be20:	4628      	mov	r0, r5
 800be22:	4631      	mov	r1, r6
 800be24:	f7f4 ff48 	bl	8000cb8 <__aeabi_uldivmod>
 800be28:	4603      	mov	r3, r0
 800be2a:	460c      	mov	r4, r1
 800be2c:	461a      	mov	r2, r3
 800be2e:	4b77      	ldr	r3, [pc, #476]	; (800c00c <UART_SetConfig+0x6f4>)
 800be30:	fba3 1302 	umull	r1, r3, r3, r2
 800be34:	095b      	lsrs	r3, r3, #5
 800be36:	2164      	movs	r1, #100	; 0x64
 800be38:	fb01 f303 	mul.w	r3, r1, r3
 800be3c:	1ad3      	subs	r3, r2, r3
 800be3e:	011b      	lsls	r3, r3, #4
 800be40:	3332      	adds	r3, #50	; 0x32
 800be42:	4a72      	ldr	r2, [pc, #456]	; (800c00c <UART_SetConfig+0x6f4>)
 800be44:	fba2 2303 	umull	r2, r3, r2, r3
 800be48:	095b      	lsrs	r3, r3, #5
 800be4a:	f003 020f 	and.w	r2, r3, #15
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	4442      	add	r2, r8
 800be54:	609a      	str	r2, [r3, #8]
 800be56:	e0d0      	b.n	800bffa <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800be58:	f7fc f95c 	bl	8008114 <HAL_RCC_GetPCLK1Freq>
 800be5c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800be5e:	68bb      	ldr	r3, [r7, #8]
 800be60:	469a      	mov	sl, r3
 800be62:	f04f 0b00 	mov.w	fp, #0
 800be66:	46d0      	mov	r8, sl
 800be68:	46d9      	mov	r9, fp
 800be6a:	eb18 0308 	adds.w	r3, r8, r8
 800be6e:	eb49 0409 	adc.w	r4, r9, r9
 800be72:	4698      	mov	r8, r3
 800be74:	46a1      	mov	r9, r4
 800be76:	eb18 080a 	adds.w	r8, r8, sl
 800be7a:	eb49 090b 	adc.w	r9, r9, fp
 800be7e:	f04f 0100 	mov.w	r1, #0
 800be82:	f04f 0200 	mov.w	r2, #0
 800be86:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800be8a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800be8e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800be92:	4688      	mov	r8, r1
 800be94:	4691      	mov	r9, r2
 800be96:	eb1a 0508 	adds.w	r5, sl, r8
 800be9a:	eb4b 0609 	adc.w	r6, fp, r9
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	685b      	ldr	r3, [r3, #4]
 800bea2:	4619      	mov	r1, r3
 800bea4:	f04f 0200 	mov.w	r2, #0
 800bea8:	f04f 0300 	mov.w	r3, #0
 800beac:	f04f 0400 	mov.w	r4, #0
 800beb0:	0094      	lsls	r4, r2, #2
 800beb2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800beb6:	008b      	lsls	r3, r1, #2
 800beb8:	461a      	mov	r2, r3
 800beba:	4623      	mov	r3, r4
 800bebc:	4628      	mov	r0, r5
 800bebe:	4631      	mov	r1, r6
 800bec0:	f7f4 fefa 	bl	8000cb8 <__aeabi_uldivmod>
 800bec4:	4603      	mov	r3, r0
 800bec6:	460c      	mov	r4, r1
 800bec8:	461a      	mov	r2, r3
 800beca:	4b50      	ldr	r3, [pc, #320]	; (800c00c <UART_SetConfig+0x6f4>)
 800becc:	fba3 2302 	umull	r2, r3, r3, r2
 800bed0:	095b      	lsrs	r3, r3, #5
 800bed2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800bed6:	68bb      	ldr	r3, [r7, #8]
 800bed8:	469b      	mov	fp, r3
 800beda:	f04f 0c00 	mov.w	ip, #0
 800bede:	46d9      	mov	r9, fp
 800bee0:	46e2      	mov	sl, ip
 800bee2:	eb19 0309 	adds.w	r3, r9, r9
 800bee6:	eb4a 040a 	adc.w	r4, sl, sl
 800beea:	4699      	mov	r9, r3
 800beec:	46a2      	mov	sl, r4
 800beee:	eb19 090b 	adds.w	r9, r9, fp
 800bef2:	eb4a 0a0c 	adc.w	sl, sl, ip
 800bef6:	f04f 0100 	mov.w	r1, #0
 800befa:	f04f 0200 	mov.w	r2, #0
 800befe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800bf02:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800bf06:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800bf0a:	4689      	mov	r9, r1
 800bf0c:	4692      	mov	sl, r2
 800bf0e:	eb1b 0509 	adds.w	r5, fp, r9
 800bf12:	eb4c 060a 	adc.w	r6, ip, sl
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	685b      	ldr	r3, [r3, #4]
 800bf1a:	4619      	mov	r1, r3
 800bf1c:	f04f 0200 	mov.w	r2, #0
 800bf20:	f04f 0300 	mov.w	r3, #0
 800bf24:	f04f 0400 	mov.w	r4, #0
 800bf28:	0094      	lsls	r4, r2, #2
 800bf2a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800bf2e:	008b      	lsls	r3, r1, #2
 800bf30:	461a      	mov	r2, r3
 800bf32:	4623      	mov	r3, r4
 800bf34:	4628      	mov	r0, r5
 800bf36:	4631      	mov	r1, r6
 800bf38:	f7f4 febe 	bl	8000cb8 <__aeabi_uldivmod>
 800bf3c:	4603      	mov	r3, r0
 800bf3e:	460c      	mov	r4, r1
 800bf40:	461a      	mov	r2, r3
 800bf42:	4b32      	ldr	r3, [pc, #200]	; (800c00c <UART_SetConfig+0x6f4>)
 800bf44:	fba3 1302 	umull	r1, r3, r3, r2
 800bf48:	095b      	lsrs	r3, r3, #5
 800bf4a:	2164      	movs	r1, #100	; 0x64
 800bf4c:	fb01 f303 	mul.w	r3, r1, r3
 800bf50:	1ad3      	subs	r3, r2, r3
 800bf52:	011b      	lsls	r3, r3, #4
 800bf54:	3332      	adds	r3, #50	; 0x32
 800bf56:	4a2d      	ldr	r2, [pc, #180]	; (800c00c <UART_SetConfig+0x6f4>)
 800bf58:	fba2 2303 	umull	r2, r3, r2, r3
 800bf5c:	095b      	lsrs	r3, r3, #5
 800bf5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bf62:	4498      	add	r8, r3
 800bf64:	68bb      	ldr	r3, [r7, #8]
 800bf66:	469b      	mov	fp, r3
 800bf68:	f04f 0c00 	mov.w	ip, #0
 800bf6c:	46d9      	mov	r9, fp
 800bf6e:	46e2      	mov	sl, ip
 800bf70:	eb19 0309 	adds.w	r3, r9, r9
 800bf74:	eb4a 040a 	adc.w	r4, sl, sl
 800bf78:	4699      	mov	r9, r3
 800bf7a:	46a2      	mov	sl, r4
 800bf7c:	eb19 090b 	adds.w	r9, r9, fp
 800bf80:	eb4a 0a0c 	adc.w	sl, sl, ip
 800bf84:	f04f 0100 	mov.w	r1, #0
 800bf88:	f04f 0200 	mov.w	r2, #0
 800bf8c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800bf90:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800bf94:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800bf98:	4689      	mov	r9, r1
 800bf9a:	4692      	mov	sl, r2
 800bf9c:	eb1b 0509 	adds.w	r5, fp, r9
 800bfa0:	eb4c 060a 	adc.w	r6, ip, sl
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	685b      	ldr	r3, [r3, #4]
 800bfa8:	4619      	mov	r1, r3
 800bfaa:	f04f 0200 	mov.w	r2, #0
 800bfae:	f04f 0300 	mov.w	r3, #0
 800bfb2:	f04f 0400 	mov.w	r4, #0
 800bfb6:	0094      	lsls	r4, r2, #2
 800bfb8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800bfbc:	008b      	lsls	r3, r1, #2
 800bfbe:	461a      	mov	r2, r3
 800bfc0:	4623      	mov	r3, r4
 800bfc2:	4628      	mov	r0, r5
 800bfc4:	4631      	mov	r1, r6
 800bfc6:	f7f4 fe77 	bl	8000cb8 <__aeabi_uldivmod>
 800bfca:	4603      	mov	r3, r0
 800bfcc:	460c      	mov	r4, r1
 800bfce:	461a      	mov	r2, r3
 800bfd0:	4b0e      	ldr	r3, [pc, #56]	; (800c00c <UART_SetConfig+0x6f4>)
 800bfd2:	fba3 1302 	umull	r1, r3, r3, r2
 800bfd6:	095b      	lsrs	r3, r3, #5
 800bfd8:	2164      	movs	r1, #100	; 0x64
 800bfda:	fb01 f303 	mul.w	r3, r1, r3
 800bfde:	1ad3      	subs	r3, r2, r3
 800bfe0:	011b      	lsls	r3, r3, #4
 800bfe2:	3332      	adds	r3, #50	; 0x32
 800bfe4:	4a09      	ldr	r2, [pc, #36]	; (800c00c <UART_SetConfig+0x6f4>)
 800bfe6:	fba2 2303 	umull	r2, r3, r2, r3
 800bfea:	095b      	lsrs	r3, r3, #5
 800bfec:	f003 020f 	and.w	r2, r3, #15
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	4442      	add	r2, r8
 800bff6:	609a      	str	r2, [r3, #8]
}
 800bff8:	e7ff      	b.n	800bffa <UART_SetConfig+0x6e2>
 800bffa:	bf00      	nop
 800bffc:	3714      	adds	r7, #20
 800bffe:	46bd      	mov	sp, r7
 800c000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c004:	40011000 	.word	0x40011000
 800c008:	40011400 	.word	0x40011400
 800c00c:	51eb851f 	.word	0x51eb851f

0800c010 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800c010:	b084      	sub	sp, #16
 800c012:	b480      	push	{r7}
 800c014:	b085      	sub	sp, #20
 800c016:	af00      	add	r7, sp, #0
 800c018:	6078      	str	r0, [r7, #4]
 800c01a:	f107 001c 	add.w	r0, r7, #28
 800c01e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800c022:	2300      	movs	r3, #0
 800c024:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800c026:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800c028:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800c02a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800c02c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800c02e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800c030:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800c032:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800c034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800c036:	431a      	orrs	r2, r3
             Init.ClockDiv
 800c038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800c03a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800c03c:	68fa      	ldr	r2, [r7, #12]
 800c03e:	4313      	orrs	r3, r2
 800c040:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	685b      	ldr	r3, [r3, #4]
 800c046:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800c04a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c04e:	68fa      	ldr	r2, [r7, #12]
 800c050:	431a      	orrs	r2, r3
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800c056:	2300      	movs	r3, #0
}
 800c058:	4618      	mov	r0, r3
 800c05a:	3714      	adds	r7, #20
 800c05c:	46bd      	mov	sp, r7
 800c05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c062:	b004      	add	sp, #16
 800c064:	4770      	bx	lr

0800c066 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800c066:	b480      	push	{r7}
 800c068:	b083      	sub	sp, #12
 800c06a:	af00      	add	r7, sp, #0
 800c06c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800c074:	4618      	mov	r0, r3
 800c076:	370c      	adds	r7, #12
 800c078:	46bd      	mov	sp, r7
 800c07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c07e:	4770      	bx	lr

0800c080 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800c080:	b480      	push	{r7}
 800c082:	b083      	sub	sp, #12
 800c084:	af00      	add	r7, sp, #0
 800c086:	6078      	str	r0, [r7, #4]
 800c088:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800c08a:	683b      	ldr	r3, [r7, #0]
 800c08c:	681a      	ldr	r2, [r3, #0]
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c094:	2300      	movs	r3, #0
}
 800c096:	4618      	mov	r0, r3
 800c098:	370c      	adds	r7, #12
 800c09a:	46bd      	mov	sp, r7
 800c09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a0:	4770      	bx	lr

0800c0a2 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800c0a2:	b580      	push	{r7, lr}
 800c0a4:	b082      	sub	sp, #8
 800c0a6:	af00      	add	r7, sp, #0
 800c0a8:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	2203      	movs	r2, #3
 800c0ae:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800c0b0:	2002      	movs	r0, #2
 800c0b2:	f7f9 fbc5 	bl	8005840 <HAL_Delay>
  
  return HAL_OK;
 800c0b6:	2300      	movs	r3, #0
}
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	3708      	adds	r7, #8
 800c0bc:	46bd      	mov	sp, r7
 800c0be:	bd80      	pop	{r7, pc}

0800c0c0 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800c0c0:	b480      	push	{r7}
 800c0c2:	b083      	sub	sp, #12
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	f003 0303 	and.w	r3, r3, #3
}
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	370c      	adds	r7, #12
 800c0d4:	46bd      	mov	sp, r7
 800c0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0da:	4770      	bx	lr

0800c0dc <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800c0dc:	b480      	push	{r7}
 800c0de:	b085      	sub	sp, #20
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
 800c0e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c0e6:	2300      	movs	r3, #0
 800c0e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800c0ea:	683b      	ldr	r3, [r7, #0]
 800c0ec:	681a      	ldr	r2, [r3, #0]
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c0f2:	683b      	ldr	r3, [r7, #0]
 800c0f4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800c0f6:	683b      	ldr	r3, [r7, #0]
 800c0f8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c0fa:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800c0fc:	683b      	ldr	r3, [r7, #0]
 800c0fe:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800c100:	431a      	orrs	r2, r3
                       Command->CPSM);
 800c102:	683b      	ldr	r3, [r7, #0]
 800c104:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800c106:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c108:	68fa      	ldr	r2, [r7, #12]
 800c10a:	4313      	orrs	r3, r2
 800c10c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	68db      	ldr	r3, [r3, #12]
 800c112:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800c116:	f023 030f 	bic.w	r3, r3, #15
 800c11a:	68fa      	ldr	r2, [r7, #12]
 800c11c:	431a      	orrs	r2, r3
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800c122:	2300      	movs	r3, #0
}
 800c124:	4618      	mov	r0, r3
 800c126:	3714      	adds	r7, #20
 800c128:	46bd      	mov	sp, r7
 800c12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c12e:	4770      	bx	lr

0800c130 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800c130:	b480      	push	{r7}
 800c132:	b083      	sub	sp, #12
 800c134:	af00      	add	r7, sp, #0
 800c136:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	691b      	ldr	r3, [r3, #16]
 800c13c:	b2db      	uxtb	r3, r3
}
 800c13e:	4618      	mov	r0, r3
 800c140:	370c      	adds	r7, #12
 800c142:	46bd      	mov	sp, r7
 800c144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c148:	4770      	bx	lr

0800c14a <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800c14a:	b480      	push	{r7}
 800c14c:	b085      	sub	sp, #20
 800c14e:	af00      	add	r7, sp, #0
 800c150:	6078      	str	r0, [r7, #4]
 800c152:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	3314      	adds	r3, #20
 800c158:	461a      	mov	r2, r3
 800c15a:	683b      	ldr	r3, [r7, #0]
 800c15c:	4413      	add	r3, r2
 800c15e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	681b      	ldr	r3, [r3, #0]
}  
 800c164:	4618      	mov	r0, r3
 800c166:	3714      	adds	r7, #20
 800c168:	46bd      	mov	sp, r7
 800c16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c16e:	4770      	bx	lr

0800c170 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800c170:	b480      	push	{r7}
 800c172:	b085      	sub	sp, #20
 800c174:	af00      	add	r7, sp, #0
 800c176:	6078      	str	r0, [r7, #4]
 800c178:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c17a:	2300      	movs	r3, #0
 800c17c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800c17e:	683b      	ldr	r3, [r7, #0]
 800c180:	681a      	ldr	r2, [r3, #0]
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800c186:	683b      	ldr	r3, [r7, #0]
 800c188:	685a      	ldr	r2, [r3, #4]
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c18e:	683b      	ldr	r3, [r7, #0]
 800c190:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800c192:	683b      	ldr	r3, [r7, #0]
 800c194:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c196:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800c198:	683b      	ldr	r3, [r7, #0]
 800c19a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800c19c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800c19e:	683b      	ldr	r3, [r7, #0]
 800c1a0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800c1a2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c1a4:	68fa      	ldr	r2, [r7, #12]
 800c1a6:	4313      	orrs	r3, r2
 800c1a8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1ae:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	431a      	orrs	r2, r3
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800c1ba:	2300      	movs	r3, #0

}
 800c1bc:	4618      	mov	r0, r3
 800c1be:	3714      	adds	r7, #20
 800c1c0:	46bd      	mov	sp, r7
 800c1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c6:	4770      	bx	lr

0800c1c8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	b088      	sub	sp, #32
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	6078      	str	r0, [r7, #4]
 800c1d0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800c1d2:	683b      	ldr	r3, [r7, #0]
 800c1d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800c1d6:	2310      	movs	r3, #16
 800c1d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c1da:	2340      	movs	r3, #64	; 0x40
 800c1dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c1de:	2300      	movs	r3, #0
 800c1e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c1e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c1e6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c1e8:	f107 0308 	add.w	r3, r7, #8
 800c1ec:	4619      	mov	r1, r3
 800c1ee:	6878      	ldr	r0, [r7, #4]
 800c1f0:	f7ff ff74 	bl	800c0dc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800c1f4:	f241 3288 	movw	r2, #5000	; 0x1388
 800c1f8:	2110      	movs	r1, #16
 800c1fa:	6878      	ldr	r0, [r7, #4]
 800c1fc:	f000 fa40 	bl	800c680 <SDMMC_GetCmdResp1>
 800c200:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c202:	69fb      	ldr	r3, [r7, #28]
}
 800c204:	4618      	mov	r0, r3
 800c206:	3720      	adds	r7, #32
 800c208:	46bd      	mov	sp, r7
 800c20a:	bd80      	pop	{r7, pc}

0800c20c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800c20c:	b580      	push	{r7, lr}
 800c20e:	b088      	sub	sp, #32
 800c210:	af00      	add	r7, sp, #0
 800c212:	6078      	str	r0, [r7, #4]
 800c214:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c216:	683b      	ldr	r3, [r7, #0]
 800c218:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800c21a:	2311      	movs	r3, #17
 800c21c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c21e:	2340      	movs	r3, #64	; 0x40
 800c220:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c222:	2300      	movs	r3, #0
 800c224:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c226:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c22a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c22c:	f107 0308 	add.w	r3, r7, #8
 800c230:	4619      	mov	r1, r3
 800c232:	6878      	ldr	r0, [r7, #4]
 800c234:	f7ff ff52 	bl	800c0dc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800c238:	f241 3288 	movw	r2, #5000	; 0x1388
 800c23c:	2111      	movs	r1, #17
 800c23e:	6878      	ldr	r0, [r7, #4]
 800c240:	f000 fa1e 	bl	800c680 <SDMMC_GetCmdResp1>
 800c244:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c246:	69fb      	ldr	r3, [r7, #28]
}
 800c248:	4618      	mov	r0, r3
 800c24a:	3720      	adds	r7, #32
 800c24c:	46bd      	mov	sp, r7
 800c24e:	bd80      	pop	{r7, pc}

0800c250 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800c250:	b580      	push	{r7, lr}
 800c252:	b088      	sub	sp, #32
 800c254:	af00      	add	r7, sp, #0
 800c256:	6078      	str	r0, [r7, #4]
 800c258:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c25a:	683b      	ldr	r3, [r7, #0]
 800c25c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800c25e:	2312      	movs	r3, #18
 800c260:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c262:	2340      	movs	r3, #64	; 0x40
 800c264:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c266:	2300      	movs	r3, #0
 800c268:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c26a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c26e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c270:	f107 0308 	add.w	r3, r7, #8
 800c274:	4619      	mov	r1, r3
 800c276:	6878      	ldr	r0, [r7, #4]
 800c278:	f7ff ff30 	bl	800c0dc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800c27c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c280:	2112      	movs	r1, #18
 800c282:	6878      	ldr	r0, [r7, #4]
 800c284:	f000 f9fc 	bl	800c680 <SDMMC_GetCmdResp1>
 800c288:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c28a:	69fb      	ldr	r3, [r7, #28]
}
 800c28c:	4618      	mov	r0, r3
 800c28e:	3720      	adds	r7, #32
 800c290:	46bd      	mov	sp, r7
 800c292:	bd80      	pop	{r7, pc}

0800c294 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800c294:	b580      	push	{r7, lr}
 800c296:	b088      	sub	sp, #32
 800c298:	af00      	add	r7, sp, #0
 800c29a:	6078      	str	r0, [r7, #4]
 800c29c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c29e:	683b      	ldr	r3, [r7, #0]
 800c2a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800c2a2:	2318      	movs	r3, #24
 800c2a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c2a6:	2340      	movs	r3, #64	; 0x40
 800c2a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c2aa:	2300      	movs	r3, #0
 800c2ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c2ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c2b2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c2b4:	f107 0308 	add.w	r3, r7, #8
 800c2b8:	4619      	mov	r1, r3
 800c2ba:	6878      	ldr	r0, [r7, #4]
 800c2bc:	f7ff ff0e 	bl	800c0dc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800c2c0:	f241 3288 	movw	r2, #5000	; 0x1388
 800c2c4:	2118      	movs	r1, #24
 800c2c6:	6878      	ldr	r0, [r7, #4]
 800c2c8:	f000 f9da 	bl	800c680 <SDMMC_GetCmdResp1>
 800c2cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c2ce:	69fb      	ldr	r3, [r7, #28]
}
 800c2d0:	4618      	mov	r0, r3
 800c2d2:	3720      	adds	r7, #32
 800c2d4:	46bd      	mov	sp, r7
 800c2d6:	bd80      	pop	{r7, pc}

0800c2d8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800c2d8:	b580      	push	{r7, lr}
 800c2da:	b088      	sub	sp, #32
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	6078      	str	r0, [r7, #4]
 800c2e0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c2e2:	683b      	ldr	r3, [r7, #0]
 800c2e4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800c2e6:	2319      	movs	r3, #25
 800c2e8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c2ea:	2340      	movs	r3, #64	; 0x40
 800c2ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c2ee:	2300      	movs	r3, #0
 800c2f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c2f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c2f6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c2f8:	f107 0308 	add.w	r3, r7, #8
 800c2fc:	4619      	mov	r1, r3
 800c2fe:	6878      	ldr	r0, [r7, #4]
 800c300:	f7ff feec 	bl	800c0dc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800c304:	f241 3288 	movw	r2, #5000	; 0x1388
 800c308:	2119      	movs	r1, #25
 800c30a:	6878      	ldr	r0, [r7, #4]
 800c30c:	f000 f9b8 	bl	800c680 <SDMMC_GetCmdResp1>
 800c310:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c312:	69fb      	ldr	r3, [r7, #28]
}
 800c314:	4618      	mov	r0, r3
 800c316:	3720      	adds	r7, #32
 800c318:	46bd      	mov	sp, r7
 800c31a:	bd80      	pop	{r7, pc}

0800c31c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b088      	sub	sp, #32
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800c324:	2300      	movs	r3, #0
 800c326:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800c328:	230c      	movs	r3, #12
 800c32a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c32c:	2340      	movs	r3, #64	; 0x40
 800c32e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c330:	2300      	movs	r3, #0
 800c332:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c334:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c338:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c33a:	f107 0308 	add.w	r3, r7, #8
 800c33e:	4619      	mov	r1, r3
 800c340:	6878      	ldr	r0, [r7, #4]
 800c342:	f7ff fecb 	bl	800c0dc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800c346:	4a05      	ldr	r2, [pc, #20]	; (800c35c <SDMMC_CmdStopTransfer+0x40>)
 800c348:	210c      	movs	r1, #12
 800c34a:	6878      	ldr	r0, [r7, #4]
 800c34c:	f000 f998 	bl	800c680 <SDMMC_GetCmdResp1>
 800c350:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c352:	69fb      	ldr	r3, [r7, #28]
}
 800c354:	4618      	mov	r0, r3
 800c356:	3720      	adds	r7, #32
 800c358:	46bd      	mov	sp, r7
 800c35a:	bd80      	pop	{r7, pc}
 800c35c:	05f5e100 	.word	0x05f5e100

0800c360 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800c360:	b580      	push	{r7, lr}
 800c362:	b08a      	sub	sp, #40	; 0x28
 800c364:	af00      	add	r7, sp, #0
 800c366:	60f8      	str	r0, [r7, #12]
 800c368:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800c36c:	683b      	ldr	r3, [r7, #0]
 800c36e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800c370:	2307      	movs	r3, #7
 800c372:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c374:	2340      	movs	r3, #64	; 0x40
 800c376:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c378:	2300      	movs	r3, #0
 800c37a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c37c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c380:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c382:	f107 0310 	add.w	r3, r7, #16
 800c386:	4619      	mov	r1, r3
 800c388:	68f8      	ldr	r0, [r7, #12]
 800c38a:	f7ff fea7 	bl	800c0dc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800c38e:	f241 3288 	movw	r2, #5000	; 0x1388
 800c392:	2107      	movs	r1, #7
 800c394:	68f8      	ldr	r0, [r7, #12]
 800c396:	f000 f973 	bl	800c680 <SDMMC_GetCmdResp1>
 800c39a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800c39c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c39e:	4618      	mov	r0, r3
 800c3a0:	3728      	adds	r7, #40	; 0x28
 800c3a2:	46bd      	mov	sp, r7
 800c3a4:	bd80      	pop	{r7, pc}

0800c3a6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800c3a6:	b580      	push	{r7, lr}
 800c3a8:	b088      	sub	sp, #32
 800c3aa:	af00      	add	r7, sp, #0
 800c3ac:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800c3b6:	2300      	movs	r3, #0
 800c3b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c3be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c3c2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c3c4:	f107 0308 	add.w	r3, r7, #8
 800c3c8:	4619      	mov	r1, r3
 800c3ca:	6878      	ldr	r0, [r7, #4]
 800c3cc:	f7ff fe86 	bl	800c0dc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800c3d0:	6878      	ldr	r0, [r7, #4]
 800c3d2:	f000 f92d 	bl	800c630 <SDMMC_GetCmdError>
 800c3d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c3d8:	69fb      	ldr	r3, [r7, #28]
}
 800c3da:	4618      	mov	r0, r3
 800c3dc:	3720      	adds	r7, #32
 800c3de:	46bd      	mov	sp, r7
 800c3e0:	bd80      	pop	{r7, pc}

0800c3e2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800c3e2:	b580      	push	{r7, lr}
 800c3e4:	b088      	sub	sp, #32
 800c3e6:	af00      	add	r7, sp, #0
 800c3e8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800c3ea:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800c3ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800c3f0:	2308      	movs	r3, #8
 800c3f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c3f4:	2340      	movs	r3, #64	; 0x40
 800c3f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c3f8:	2300      	movs	r3, #0
 800c3fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c3fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c400:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c402:	f107 0308 	add.w	r3, r7, #8
 800c406:	4619      	mov	r1, r3
 800c408:	6878      	ldr	r0, [r7, #4]
 800c40a:	f7ff fe67 	bl	800c0dc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800c40e:	6878      	ldr	r0, [r7, #4]
 800c410:	f000 fb16 	bl	800ca40 <SDMMC_GetCmdResp7>
 800c414:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c416:	69fb      	ldr	r3, [r7, #28]
}
 800c418:	4618      	mov	r0, r3
 800c41a:	3720      	adds	r7, #32
 800c41c:	46bd      	mov	sp, r7
 800c41e:	bd80      	pop	{r7, pc}

0800c420 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800c420:	b580      	push	{r7, lr}
 800c422:	b088      	sub	sp, #32
 800c424:	af00      	add	r7, sp, #0
 800c426:	6078      	str	r0, [r7, #4]
 800c428:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800c42a:	683b      	ldr	r3, [r7, #0]
 800c42c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800c42e:	2337      	movs	r3, #55	; 0x37
 800c430:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c432:	2340      	movs	r3, #64	; 0x40
 800c434:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c436:	2300      	movs	r3, #0
 800c438:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c43a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c43e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c440:	f107 0308 	add.w	r3, r7, #8
 800c444:	4619      	mov	r1, r3
 800c446:	6878      	ldr	r0, [r7, #4]
 800c448:	f7ff fe48 	bl	800c0dc <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800c44c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c450:	2137      	movs	r1, #55	; 0x37
 800c452:	6878      	ldr	r0, [r7, #4]
 800c454:	f000 f914 	bl	800c680 <SDMMC_GetCmdResp1>
 800c458:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c45a:	69fb      	ldr	r3, [r7, #28]
}
 800c45c:	4618      	mov	r0, r3
 800c45e:	3720      	adds	r7, #32
 800c460:	46bd      	mov	sp, r7
 800c462:	bd80      	pop	{r7, pc}

0800c464 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800c464:	b580      	push	{r7, lr}
 800c466:	b088      	sub	sp, #32
 800c468:	af00      	add	r7, sp, #0
 800c46a:	6078      	str	r0, [r7, #4]
 800c46c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800c46e:	683b      	ldr	r3, [r7, #0]
 800c470:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c474:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c478:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800c47a:	2329      	movs	r3, #41	; 0x29
 800c47c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c47e:	2340      	movs	r3, #64	; 0x40
 800c480:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c482:	2300      	movs	r3, #0
 800c484:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c486:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c48a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c48c:	f107 0308 	add.w	r3, r7, #8
 800c490:	4619      	mov	r1, r3
 800c492:	6878      	ldr	r0, [r7, #4]
 800c494:	f7ff fe22 	bl	800c0dc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800c498:	6878      	ldr	r0, [r7, #4]
 800c49a:	f000 fa23 	bl	800c8e4 <SDMMC_GetCmdResp3>
 800c49e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c4a0:	69fb      	ldr	r3, [r7, #28]
}
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	3720      	adds	r7, #32
 800c4a6:	46bd      	mov	sp, r7
 800c4a8:	bd80      	pop	{r7, pc}

0800c4aa <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800c4aa:	b580      	push	{r7, lr}
 800c4ac:	b088      	sub	sp, #32
 800c4ae:	af00      	add	r7, sp, #0
 800c4b0:	6078      	str	r0, [r7, #4]
 800c4b2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800c4b4:	683b      	ldr	r3, [r7, #0]
 800c4b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800c4b8:	2306      	movs	r3, #6
 800c4ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c4bc:	2340      	movs	r3, #64	; 0x40
 800c4be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c4c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c4c8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c4ca:	f107 0308 	add.w	r3, r7, #8
 800c4ce:	4619      	mov	r1, r3
 800c4d0:	6878      	ldr	r0, [r7, #4]
 800c4d2:	f7ff fe03 	bl	800c0dc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800c4d6:	f241 3288 	movw	r2, #5000	; 0x1388
 800c4da:	2106      	movs	r1, #6
 800c4dc:	6878      	ldr	r0, [r7, #4]
 800c4de:	f000 f8cf 	bl	800c680 <SDMMC_GetCmdResp1>
 800c4e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c4e4:	69fb      	ldr	r3, [r7, #28]
}
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	3720      	adds	r7, #32
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	bd80      	pop	{r7, pc}

0800c4ee <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800c4ee:	b580      	push	{r7, lr}
 800c4f0:	b088      	sub	sp, #32
 800c4f2:	af00      	add	r7, sp, #0
 800c4f4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800c4fa:	2333      	movs	r3, #51	; 0x33
 800c4fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c4fe:	2340      	movs	r3, #64	; 0x40
 800c500:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c502:	2300      	movs	r3, #0
 800c504:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c506:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c50a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c50c:	f107 0308 	add.w	r3, r7, #8
 800c510:	4619      	mov	r1, r3
 800c512:	6878      	ldr	r0, [r7, #4]
 800c514:	f7ff fde2 	bl	800c0dc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800c518:	f241 3288 	movw	r2, #5000	; 0x1388
 800c51c:	2133      	movs	r1, #51	; 0x33
 800c51e:	6878      	ldr	r0, [r7, #4]
 800c520:	f000 f8ae 	bl	800c680 <SDMMC_GetCmdResp1>
 800c524:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c526:	69fb      	ldr	r3, [r7, #28]
}
 800c528:	4618      	mov	r0, r3
 800c52a:	3720      	adds	r7, #32
 800c52c:	46bd      	mov	sp, r7
 800c52e:	bd80      	pop	{r7, pc}

0800c530 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800c530:	b580      	push	{r7, lr}
 800c532:	b088      	sub	sp, #32
 800c534:	af00      	add	r7, sp, #0
 800c536:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800c538:	2300      	movs	r3, #0
 800c53a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800c53c:	2302      	movs	r3, #2
 800c53e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800c540:	23c0      	movs	r3, #192	; 0xc0
 800c542:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c544:	2300      	movs	r3, #0
 800c546:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c548:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c54c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c54e:	f107 0308 	add.w	r3, r7, #8
 800c552:	4619      	mov	r1, r3
 800c554:	6878      	ldr	r0, [r7, #4]
 800c556:	f7ff fdc1 	bl	800c0dc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800c55a:	6878      	ldr	r0, [r7, #4]
 800c55c:	f000 f97c 	bl	800c858 <SDMMC_GetCmdResp2>
 800c560:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c562:	69fb      	ldr	r3, [r7, #28]
}
 800c564:	4618      	mov	r0, r3
 800c566:	3720      	adds	r7, #32
 800c568:	46bd      	mov	sp, r7
 800c56a:	bd80      	pop	{r7, pc}

0800c56c <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800c56c:	b580      	push	{r7, lr}
 800c56e:	b088      	sub	sp, #32
 800c570:	af00      	add	r7, sp, #0
 800c572:	6078      	str	r0, [r7, #4]
 800c574:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800c576:	683b      	ldr	r3, [r7, #0]
 800c578:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800c57a:	2309      	movs	r3, #9
 800c57c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800c57e:	23c0      	movs	r3, #192	; 0xc0
 800c580:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c582:	2300      	movs	r3, #0
 800c584:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c586:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c58a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c58c:	f107 0308 	add.w	r3, r7, #8
 800c590:	4619      	mov	r1, r3
 800c592:	6878      	ldr	r0, [r7, #4]
 800c594:	f7ff fda2 	bl	800c0dc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800c598:	6878      	ldr	r0, [r7, #4]
 800c59a:	f000 f95d 	bl	800c858 <SDMMC_GetCmdResp2>
 800c59e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c5a0:	69fb      	ldr	r3, [r7, #28]
}
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	3720      	adds	r7, #32
 800c5a6:	46bd      	mov	sp, r7
 800c5a8:	bd80      	pop	{r7, pc}

0800c5aa <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800c5aa:	b580      	push	{r7, lr}
 800c5ac:	b088      	sub	sp, #32
 800c5ae:	af00      	add	r7, sp, #0
 800c5b0:	6078      	str	r0, [r7, #4]
 800c5b2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800c5b4:	2300      	movs	r3, #0
 800c5b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800c5b8:	2303      	movs	r3, #3
 800c5ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c5bc:	2340      	movs	r3, #64	; 0x40
 800c5be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c5c0:	2300      	movs	r3, #0
 800c5c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c5c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c5c8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c5ca:	f107 0308 	add.w	r3, r7, #8
 800c5ce:	4619      	mov	r1, r3
 800c5d0:	6878      	ldr	r0, [r7, #4]
 800c5d2:	f7ff fd83 	bl	800c0dc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800c5d6:	683a      	ldr	r2, [r7, #0]
 800c5d8:	2103      	movs	r1, #3
 800c5da:	6878      	ldr	r0, [r7, #4]
 800c5dc:	f000 f9bc 	bl	800c958 <SDMMC_GetCmdResp6>
 800c5e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c5e2:	69fb      	ldr	r3, [r7, #28]
}
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	3720      	adds	r7, #32
 800c5e8:	46bd      	mov	sp, r7
 800c5ea:	bd80      	pop	{r7, pc}

0800c5ec <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800c5ec:	b580      	push	{r7, lr}
 800c5ee:	b088      	sub	sp, #32
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	6078      	str	r0, [r7, #4]
 800c5f4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800c5f6:	683b      	ldr	r3, [r7, #0]
 800c5f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800c5fa:	230d      	movs	r3, #13
 800c5fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800c5fe:	2340      	movs	r3, #64	; 0x40
 800c600:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800c602:	2300      	movs	r3, #0
 800c604:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800c606:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c60a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800c60c:	f107 0308 	add.w	r3, r7, #8
 800c610:	4619      	mov	r1, r3
 800c612:	6878      	ldr	r0, [r7, #4]
 800c614:	f7ff fd62 	bl	800c0dc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800c618:	f241 3288 	movw	r2, #5000	; 0x1388
 800c61c:	210d      	movs	r1, #13
 800c61e:	6878      	ldr	r0, [r7, #4]
 800c620:	f000 f82e 	bl	800c680 <SDMMC_GetCmdResp1>
 800c624:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c626:	69fb      	ldr	r3, [r7, #28]
}
 800c628:	4618      	mov	r0, r3
 800c62a:	3720      	adds	r7, #32
 800c62c:	46bd      	mov	sp, r7
 800c62e:	bd80      	pop	{r7, pc}

0800c630 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800c630:	b490      	push	{r4, r7}
 800c632:	b082      	sub	sp, #8
 800c634:	af00      	add	r7, sp, #0
 800c636:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c638:	4b0f      	ldr	r3, [pc, #60]	; (800c678 <SDMMC_GetCmdError+0x48>)
 800c63a:	681b      	ldr	r3, [r3, #0]
 800c63c:	4a0f      	ldr	r2, [pc, #60]	; (800c67c <SDMMC_GetCmdError+0x4c>)
 800c63e:	fba2 2303 	umull	r2, r3, r2, r3
 800c642:	0a5b      	lsrs	r3, r3, #9
 800c644:	f241 3288 	movw	r2, #5000	; 0x1388
 800c648:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c64c:	4623      	mov	r3, r4
 800c64e:	1e5c      	subs	r4, r3, #1
 800c650:	2b00      	cmp	r3, #0
 800c652:	d102      	bne.n	800c65a <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c654:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c658:	e009      	b.n	800c66e <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c65e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c662:	2b00      	cmp	r3, #0
 800c664:	d0f2      	beq.n	800c64c <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	22c5      	movs	r2, #197	; 0xc5
 800c66a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800c66c:	2300      	movs	r3, #0
}
 800c66e:	4618      	mov	r0, r3
 800c670:	3708      	adds	r7, #8
 800c672:	46bd      	mov	sp, r7
 800c674:	bc90      	pop	{r4, r7}
 800c676:	4770      	bx	lr
 800c678:	20000000 	.word	0x20000000
 800c67c:	10624dd3 	.word	0x10624dd3

0800c680 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800c680:	b590      	push	{r4, r7, lr}
 800c682:	b087      	sub	sp, #28
 800c684:	af00      	add	r7, sp, #0
 800c686:	60f8      	str	r0, [r7, #12]
 800c688:	460b      	mov	r3, r1
 800c68a:	607a      	str	r2, [r7, #4]
 800c68c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800c68e:	4b6f      	ldr	r3, [pc, #444]	; (800c84c <SDMMC_GetCmdResp1+0x1cc>)
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	4a6f      	ldr	r2, [pc, #444]	; (800c850 <SDMMC_GetCmdResp1+0x1d0>)
 800c694:	fba2 2303 	umull	r2, r3, r2, r3
 800c698:	0a5b      	lsrs	r3, r3, #9
 800c69a:	687a      	ldr	r2, [r7, #4]
 800c69c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c6a0:	4623      	mov	r3, r4
 800c6a2:	1e5c      	subs	r4, r3, #1
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d102      	bne.n	800c6ae <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c6a8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c6ac:	e0c9      	b.n	800c842 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6b2:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c6b4:	697b      	ldr	r3, [r7, #20]
 800c6b6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d0f0      	beq.n	800c6a0 <SDMMC_GetCmdResp1+0x20>
 800c6be:	697b      	ldr	r3, [r7, #20]
 800c6c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d1eb      	bne.n	800c6a0 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6cc:	f003 0304 	and.w	r3, r3, #4
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d004      	beq.n	800c6de <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	2204      	movs	r2, #4
 800c6d8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c6da:	2304      	movs	r3, #4
 800c6dc:	e0b1      	b.n	800c842 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c6e2:	f003 0301 	and.w	r3, r3, #1
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d004      	beq.n	800c6f4 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	2201      	movs	r2, #1
 800c6ee:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c6f0:	2301      	movs	r3, #1
 800c6f2:	e0a6      	b.n	800c842 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	22c5      	movs	r2, #197	; 0xc5
 800c6f8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800c6fa:	68f8      	ldr	r0, [r7, #12]
 800c6fc:	f7ff fd18 	bl	800c130 <SDIO_GetCommandResponse>
 800c700:	4603      	mov	r3, r0
 800c702:	461a      	mov	r2, r3
 800c704:	7afb      	ldrb	r3, [r7, #11]
 800c706:	4293      	cmp	r3, r2
 800c708:	d001      	beq.n	800c70e <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c70a:	2301      	movs	r3, #1
 800c70c:	e099      	b.n	800c842 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800c70e:	2100      	movs	r1, #0
 800c710:	68f8      	ldr	r0, [r7, #12]
 800c712:	f7ff fd1a 	bl	800c14a <SDIO_GetResponse>
 800c716:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c718:	693a      	ldr	r2, [r7, #16]
 800c71a:	4b4e      	ldr	r3, [pc, #312]	; (800c854 <SDMMC_GetCmdResp1+0x1d4>)
 800c71c:	4013      	ands	r3, r2
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d101      	bne.n	800c726 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800c722:	2300      	movs	r3, #0
 800c724:	e08d      	b.n	800c842 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c726:	693b      	ldr	r3, [r7, #16]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	da02      	bge.n	800c732 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c72c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c730:	e087      	b.n	800c842 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c732:	693b      	ldr	r3, [r7, #16]
 800c734:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d001      	beq.n	800c740 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c73c:	2340      	movs	r3, #64	; 0x40
 800c73e:	e080      	b.n	800c842 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c740:	693b      	ldr	r3, [r7, #16]
 800c742:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c746:	2b00      	cmp	r3, #0
 800c748:	d001      	beq.n	800c74e <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c74a:	2380      	movs	r3, #128	; 0x80
 800c74c:	e079      	b.n	800c842 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c74e:	693b      	ldr	r3, [r7, #16]
 800c750:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c754:	2b00      	cmp	r3, #0
 800c756:	d002      	beq.n	800c75e <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c758:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c75c:	e071      	b.n	800c842 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c75e:	693b      	ldr	r3, [r7, #16]
 800c760:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c764:	2b00      	cmp	r3, #0
 800c766:	d002      	beq.n	800c76e <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c768:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c76c:	e069      	b.n	800c842 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c76e:	693b      	ldr	r3, [r7, #16]
 800c770:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c774:	2b00      	cmp	r3, #0
 800c776:	d002      	beq.n	800c77e <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c778:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c77c:	e061      	b.n	800c842 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c77e:	693b      	ldr	r3, [r7, #16]
 800c780:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c784:	2b00      	cmp	r3, #0
 800c786:	d002      	beq.n	800c78e <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c788:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c78c:	e059      	b.n	800c842 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c78e:	693b      	ldr	r3, [r7, #16]
 800c790:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c794:	2b00      	cmp	r3, #0
 800c796:	d002      	beq.n	800c79e <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c798:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c79c:	e051      	b.n	800c842 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c79e:	693b      	ldr	r3, [r7, #16]
 800c7a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d002      	beq.n	800c7ae <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c7a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c7ac:	e049      	b.n	800c842 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c7ae:	693b      	ldr	r3, [r7, #16]
 800c7b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d002      	beq.n	800c7be <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c7b8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800c7bc:	e041      	b.n	800c842 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c7be:	693b      	ldr	r3, [r7, #16]
 800c7c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d002      	beq.n	800c7ce <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800c7c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c7cc:	e039      	b.n	800c842 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c7ce:	693b      	ldr	r3, [r7, #16]
 800c7d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d002      	beq.n	800c7de <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c7d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c7dc:	e031      	b.n	800c842 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c7de:	693b      	ldr	r3, [r7, #16]
 800c7e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d002      	beq.n	800c7ee <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c7e8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c7ec:	e029      	b.n	800c842 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c7ee:	693b      	ldr	r3, [r7, #16]
 800c7f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d002      	beq.n	800c7fe <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c7f8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c7fc:	e021      	b.n	800c842 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c7fe:	693b      	ldr	r3, [r7, #16]
 800c800:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c804:	2b00      	cmp	r3, #0
 800c806:	d002      	beq.n	800c80e <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c808:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800c80c:	e019      	b.n	800c842 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c80e:	693b      	ldr	r3, [r7, #16]
 800c810:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c814:	2b00      	cmp	r3, #0
 800c816:	d002      	beq.n	800c81e <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c818:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c81c:	e011      	b.n	800c842 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c81e:	693b      	ldr	r3, [r7, #16]
 800c820:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c824:	2b00      	cmp	r3, #0
 800c826:	d002      	beq.n	800c82e <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800c828:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c82c:	e009      	b.n	800c842 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800c82e:	693b      	ldr	r3, [r7, #16]
 800c830:	f003 0308 	and.w	r3, r3, #8
 800c834:	2b00      	cmp	r3, #0
 800c836:	d002      	beq.n	800c83e <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800c838:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800c83c:	e001      	b.n	800c842 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c83e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800c842:	4618      	mov	r0, r3
 800c844:	371c      	adds	r7, #28
 800c846:	46bd      	mov	sp, r7
 800c848:	bd90      	pop	{r4, r7, pc}
 800c84a:	bf00      	nop
 800c84c:	20000000 	.word	0x20000000
 800c850:	10624dd3 	.word	0x10624dd3
 800c854:	fdffe008 	.word	0xfdffe008

0800c858 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800c858:	b490      	push	{r4, r7}
 800c85a:	b084      	sub	sp, #16
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c860:	4b1e      	ldr	r3, [pc, #120]	; (800c8dc <SDMMC_GetCmdResp2+0x84>)
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	4a1e      	ldr	r2, [pc, #120]	; (800c8e0 <SDMMC_GetCmdResp2+0x88>)
 800c866:	fba2 2303 	umull	r2, r3, r2, r3
 800c86a:	0a5b      	lsrs	r3, r3, #9
 800c86c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c870:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c874:	4623      	mov	r3, r4
 800c876:	1e5c      	subs	r4, r3, #1
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d102      	bne.n	800c882 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c87c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c880:	e026      	b.n	800c8d0 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c886:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d0f0      	beq.n	800c874 <SDMMC_GetCmdResp2+0x1c>
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d1eb      	bne.n	800c874 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8a0:	f003 0304 	and.w	r3, r3, #4
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d004      	beq.n	800c8b2 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	2204      	movs	r2, #4
 800c8ac:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c8ae:	2304      	movs	r3, #4
 800c8b0:	e00e      	b.n	800c8d0 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c8b6:	f003 0301 	and.w	r3, r3, #1
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d004      	beq.n	800c8c8 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	2201      	movs	r2, #1
 800c8c2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c8c4:	2301      	movs	r3, #1
 800c8c6:	e003      	b.n	800c8d0 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	22c5      	movs	r2, #197	; 0xc5
 800c8cc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800c8ce:	2300      	movs	r3, #0
}
 800c8d0:	4618      	mov	r0, r3
 800c8d2:	3710      	adds	r7, #16
 800c8d4:	46bd      	mov	sp, r7
 800c8d6:	bc90      	pop	{r4, r7}
 800c8d8:	4770      	bx	lr
 800c8da:	bf00      	nop
 800c8dc:	20000000 	.word	0x20000000
 800c8e0:	10624dd3 	.word	0x10624dd3

0800c8e4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800c8e4:	b490      	push	{r4, r7}
 800c8e6:	b084      	sub	sp, #16
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c8ec:	4b18      	ldr	r3, [pc, #96]	; (800c950 <SDMMC_GetCmdResp3+0x6c>)
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	4a18      	ldr	r2, [pc, #96]	; (800c954 <SDMMC_GetCmdResp3+0x70>)
 800c8f2:	fba2 2303 	umull	r2, r3, r2, r3
 800c8f6:	0a5b      	lsrs	r3, r3, #9
 800c8f8:	f241 3288 	movw	r2, #5000	; 0x1388
 800c8fc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c900:	4623      	mov	r3, r4
 800c902:	1e5c      	subs	r4, r3, #1
 800c904:	2b00      	cmp	r3, #0
 800c906:	d102      	bne.n	800c90e <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c908:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c90c:	e01b      	b.n	800c946 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c912:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d0f0      	beq.n	800c900 <SDMMC_GetCmdResp3+0x1c>
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c924:	2b00      	cmp	r3, #0
 800c926:	d1eb      	bne.n	800c900 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c92c:	f003 0304 	and.w	r3, r3, #4
 800c930:	2b00      	cmp	r3, #0
 800c932:	d004      	beq.n	800c93e <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	2204      	movs	r2, #4
 800c938:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c93a:	2304      	movs	r3, #4
 800c93c:	e003      	b.n	800c946 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	22c5      	movs	r2, #197	; 0xc5
 800c942:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800c944:	2300      	movs	r3, #0
}
 800c946:	4618      	mov	r0, r3
 800c948:	3710      	adds	r7, #16
 800c94a:	46bd      	mov	sp, r7
 800c94c:	bc90      	pop	{r4, r7}
 800c94e:	4770      	bx	lr
 800c950:	20000000 	.word	0x20000000
 800c954:	10624dd3 	.word	0x10624dd3

0800c958 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800c958:	b590      	push	{r4, r7, lr}
 800c95a:	b087      	sub	sp, #28
 800c95c:	af00      	add	r7, sp, #0
 800c95e:	60f8      	str	r0, [r7, #12]
 800c960:	460b      	mov	r3, r1
 800c962:	607a      	str	r2, [r7, #4]
 800c964:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800c966:	4b34      	ldr	r3, [pc, #208]	; (800ca38 <SDMMC_GetCmdResp6+0xe0>)
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	4a34      	ldr	r2, [pc, #208]	; (800ca3c <SDMMC_GetCmdResp6+0xe4>)
 800c96c:	fba2 2303 	umull	r2, r3, r2, r3
 800c970:	0a5b      	lsrs	r3, r3, #9
 800c972:	f241 3288 	movw	r2, #5000	; 0x1388
 800c976:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800c97a:	4623      	mov	r3, r4
 800c97c:	1e5c      	subs	r4, r3, #1
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d102      	bne.n	800c988 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c982:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c986:	e052      	b.n	800ca2e <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c98c:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c98e:	697b      	ldr	r3, [r7, #20]
 800c990:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800c994:	2b00      	cmp	r3, #0
 800c996:	d0f0      	beq.n	800c97a <SDMMC_GetCmdResp6+0x22>
 800c998:	697b      	ldr	r3, [r7, #20]
 800c99a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d1eb      	bne.n	800c97a <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9a6:	f003 0304 	and.w	r3, r3, #4
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d004      	beq.n	800c9b8 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	2204      	movs	r2, #4
 800c9b2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c9b4:	2304      	movs	r3, #4
 800c9b6:	e03a      	b.n	800ca2e <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9bc:	f003 0301 	and.w	r3, r3, #1
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d004      	beq.n	800c9ce <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	2201      	movs	r2, #1
 800c9c8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c9ca:	2301      	movs	r3, #1
 800c9cc:	e02f      	b.n	800ca2e <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800c9ce:	68f8      	ldr	r0, [r7, #12]
 800c9d0:	f7ff fbae 	bl	800c130 <SDIO_GetCommandResponse>
 800c9d4:	4603      	mov	r3, r0
 800c9d6:	461a      	mov	r2, r3
 800c9d8:	7afb      	ldrb	r3, [r7, #11]
 800c9da:	4293      	cmp	r3, r2
 800c9dc:	d001      	beq.n	800c9e2 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c9de:	2301      	movs	r3, #1
 800c9e0:	e025      	b.n	800ca2e <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	22c5      	movs	r2, #197	; 0xc5
 800c9e6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800c9e8:	2100      	movs	r1, #0
 800c9ea:	68f8      	ldr	r0, [r7, #12]
 800c9ec:	f7ff fbad 	bl	800c14a <SDIO_GetResponse>
 800c9f0:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800c9f2:	693b      	ldr	r3, [r7, #16]
 800c9f4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d106      	bne.n	800ca0a <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800c9fc:	693b      	ldr	r3, [r7, #16]
 800c9fe:	0c1b      	lsrs	r3, r3, #16
 800ca00:	b29a      	uxth	r2, r3
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800ca06:	2300      	movs	r3, #0
 800ca08:	e011      	b.n	800ca2e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800ca0a:	693b      	ldr	r3, [r7, #16]
 800ca0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d002      	beq.n	800ca1a <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ca14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ca18:	e009      	b.n	800ca2e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800ca1a:	693b      	ldr	r3, [r7, #16]
 800ca1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d002      	beq.n	800ca2a <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ca24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ca28:	e001      	b.n	800ca2e <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ca2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800ca2e:	4618      	mov	r0, r3
 800ca30:	371c      	adds	r7, #28
 800ca32:	46bd      	mov	sp, r7
 800ca34:	bd90      	pop	{r4, r7, pc}
 800ca36:	bf00      	nop
 800ca38:	20000000 	.word	0x20000000
 800ca3c:	10624dd3 	.word	0x10624dd3

0800ca40 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800ca40:	b490      	push	{r4, r7}
 800ca42:	b084      	sub	sp, #16
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ca48:	4b21      	ldr	r3, [pc, #132]	; (800cad0 <SDMMC_GetCmdResp7+0x90>)
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	4a21      	ldr	r2, [pc, #132]	; (800cad4 <SDMMC_GetCmdResp7+0x94>)
 800ca4e:	fba2 2303 	umull	r2, r3, r2, r3
 800ca52:	0a5b      	lsrs	r3, r3, #9
 800ca54:	f241 3288 	movw	r2, #5000	; 0x1388
 800ca58:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800ca5c:	4623      	mov	r3, r4
 800ca5e:	1e5c      	subs	r4, r3, #1
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d102      	bne.n	800ca6a <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ca64:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ca68:	e02c      	b.n	800cac4 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca6e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d0f0      	beq.n	800ca5c <SDMMC_GetCmdResp7+0x1c>
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d1eb      	bne.n	800ca5c <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca88:	f003 0304 	and.w	r3, r3, #4
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d004      	beq.n	800ca9a <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	2204      	movs	r2, #4
 800ca94:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ca96:	2304      	movs	r3, #4
 800ca98:	e014      	b.n	800cac4 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ca9e:	f003 0301 	and.w	r3, r3, #1
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d004      	beq.n	800cab0 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	2201      	movs	r2, #1
 800caaa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800caac:	2301      	movs	r3, #1
 800caae:	e009      	b.n	800cac4 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d002      	beq.n	800cac2 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	2240      	movs	r2, #64	; 0x40
 800cac0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800cac2:	2300      	movs	r3, #0
  
}
 800cac4:	4618      	mov	r0, r3
 800cac6:	3710      	adds	r7, #16
 800cac8:	46bd      	mov	sp, r7
 800caca:	bc90      	pop	{r4, r7}
 800cacc:	4770      	bx	lr
 800cace:	bf00      	nop
 800cad0:	20000000 	.word	0x20000000
 800cad4:	10624dd3 	.word	0x10624dd3

0800cad8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800cad8:	b580      	push	{r7, lr}
 800cada:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800cadc:	4904      	ldr	r1, [pc, #16]	; (800caf0 <MX_FATFS_Init+0x18>)
 800cade:	4805      	ldr	r0, [pc, #20]	; (800caf4 <MX_FATFS_Init+0x1c>)
 800cae0:	f004 f874 	bl	8010bcc <FATFS_LinkDriver>
 800cae4:	4603      	mov	r3, r0
 800cae6:	461a      	mov	r2, r3
 800cae8:	4b03      	ldr	r3, [pc, #12]	; (800caf8 <MX_FATFS_Init+0x20>)
 800caea:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800caec:	bf00      	nop
 800caee:	bd80      	pop	{r7, pc}
 800caf0:	2000a63c 	.word	0x2000a63c
 800caf4:	08016ea8 	.word	0x08016ea8
 800caf8:	2000a638 	.word	0x2000a638

0800cafc <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800cafc:	b480      	push	{r7}
 800cafe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800cb00:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800cb02:	4618      	mov	r0, r3
 800cb04:	46bd      	mov	sp, r7
 800cb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb0a:	4770      	bx	lr

0800cb0c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800cb0c:	b580      	push	{r7, lr}
 800cb0e:	b082      	sub	sp, #8
 800cb10:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800cb12:	2300      	movs	r3, #0
 800cb14:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800cb16:	f000 f896 	bl	800cc46 <BSP_SD_IsDetected>
 800cb1a:	4603      	mov	r3, r0
 800cb1c:	2b01      	cmp	r3, #1
 800cb1e:	d001      	beq.n	800cb24 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800cb20:	2301      	movs	r3, #1
 800cb22:	e012      	b.n	800cb4a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800cb24:	480b      	ldr	r0, [pc, #44]	; (800cb54 <BSP_SD_Init+0x48>)
 800cb26:	f7fb ff9d 	bl	8008a64 <HAL_SD_Init>
 800cb2a:	4603      	mov	r3, r0
 800cb2c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800cb2e:	79fb      	ldrb	r3, [r7, #7]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d109      	bne.n	800cb48 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800cb34:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800cb38:	4806      	ldr	r0, [pc, #24]	; (800cb54 <BSP_SD_Init+0x48>)
 800cb3a:	f7fc fd47 	bl	80095cc <HAL_SD_ConfigWideBusOperation>
 800cb3e:	4603      	mov	r3, r0
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d001      	beq.n	800cb48 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800cb44:	2301      	movs	r3, #1
 800cb46:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800cb48:	79fb      	ldrb	r3, [r7, #7]
}
 800cb4a:	4618      	mov	r0, r3
 800cb4c:	3708      	adds	r7, #8
 800cb4e:	46bd      	mov	sp, r7
 800cb50:	bd80      	pop	{r7, pc}
 800cb52:	bf00      	nop
 800cb54:	2000a4d0 	.word	0x2000a4d0

0800cb58 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800cb58:	b580      	push	{r7, lr}
 800cb5a:	b086      	sub	sp, #24
 800cb5c:	af00      	add	r7, sp, #0
 800cb5e:	60f8      	str	r0, [r7, #12]
 800cb60:	60b9      	str	r1, [r7, #8]
 800cb62:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800cb64:	2300      	movs	r3, #0
 800cb66:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	68ba      	ldr	r2, [r7, #8]
 800cb6c:	68f9      	ldr	r1, [r7, #12]
 800cb6e:	4806      	ldr	r0, [pc, #24]	; (800cb88 <BSP_SD_ReadBlocks_DMA+0x30>)
 800cb70:	f7fc f808 	bl	8008b84 <HAL_SD_ReadBlocks_DMA>
 800cb74:	4603      	mov	r3, r0
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d001      	beq.n	800cb7e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800cb7a:	2301      	movs	r3, #1
 800cb7c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800cb7e:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb80:	4618      	mov	r0, r3
 800cb82:	3718      	adds	r7, #24
 800cb84:	46bd      	mov	sp, r7
 800cb86:	bd80      	pop	{r7, pc}
 800cb88:	2000a4d0 	.word	0x2000a4d0

0800cb8c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800cb8c:	b580      	push	{r7, lr}
 800cb8e:	b086      	sub	sp, #24
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	60f8      	str	r0, [r7, #12]
 800cb94:	60b9      	str	r1, [r7, #8]
 800cb96:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800cb98:	2300      	movs	r3, #0
 800cb9a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	68ba      	ldr	r2, [r7, #8]
 800cba0:	68f9      	ldr	r1, [r7, #12]
 800cba2:	4806      	ldr	r0, [pc, #24]	; (800cbbc <BSP_SD_WriteBlocks_DMA+0x30>)
 800cba4:	f7fc f8d6 	bl	8008d54 <HAL_SD_WriteBlocks_DMA>
 800cba8:	4603      	mov	r3, r0
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d001      	beq.n	800cbb2 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800cbae:	2301      	movs	r3, #1
 800cbb0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800cbb2:	7dfb      	ldrb	r3, [r7, #23]
}
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	3718      	adds	r7, #24
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	bd80      	pop	{r7, pc}
 800cbbc:	2000a4d0 	.word	0x2000a4d0

0800cbc0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800cbc0:	b580      	push	{r7, lr}
 800cbc2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800cbc4:	4805      	ldr	r0, [pc, #20]	; (800cbdc <BSP_SD_GetCardState+0x1c>)
 800cbc6:	f7fc fd7d 	bl	80096c4 <HAL_SD_GetCardState>
 800cbca:	4603      	mov	r3, r0
 800cbcc:	2b04      	cmp	r3, #4
 800cbce:	bf14      	ite	ne
 800cbd0:	2301      	movne	r3, #1
 800cbd2:	2300      	moveq	r3, #0
 800cbd4:	b2db      	uxtb	r3, r3
}
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	bd80      	pop	{r7, pc}
 800cbda:	bf00      	nop
 800cbdc:	2000a4d0 	.word	0x2000a4d0

0800cbe0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800cbe0:	b580      	push	{r7, lr}
 800cbe2:	b082      	sub	sp, #8
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800cbe8:	6879      	ldr	r1, [r7, #4]
 800cbea:	4803      	ldr	r0, [pc, #12]	; (800cbf8 <BSP_SD_GetCardInfo+0x18>)
 800cbec:	f7fc fcc2 	bl	8009574 <HAL_SD_GetCardInfo>
}
 800cbf0:	bf00      	nop
 800cbf2:	3708      	adds	r7, #8
 800cbf4:	46bd      	mov	sp, r7
 800cbf6:	bd80      	pop	{r7, pc}
 800cbf8:	2000a4d0 	.word	0x2000a4d0

0800cbfc <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800cbfc:	b580      	push	{r7, lr}
 800cbfe:	b082      	sub	sp, #8
 800cc00:	af00      	add	r7, sp, #0
 800cc02:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800cc04:	f000 f818 	bl	800cc38 <BSP_SD_AbortCallback>
}
 800cc08:	bf00      	nop
 800cc0a:	3708      	adds	r7, #8
 800cc0c:	46bd      	mov	sp, r7
 800cc0e:	bd80      	pop	{r7, pc}

0800cc10 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800cc10:	b580      	push	{r7, lr}
 800cc12:	b082      	sub	sp, #8
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800cc18:	f000 f9a8 	bl	800cf6c <BSP_SD_WriteCpltCallback>
}
 800cc1c:	bf00      	nop
 800cc1e:	3708      	adds	r7, #8
 800cc20:	46bd      	mov	sp, r7
 800cc22:	bd80      	pop	{r7, pc}

0800cc24 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800cc24:	b580      	push	{r7, lr}
 800cc26:	b082      	sub	sp, #8
 800cc28:	af00      	add	r7, sp, #0
 800cc2a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800cc2c:	f000 f9aa 	bl	800cf84 <BSP_SD_ReadCpltCallback>
}
 800cc30:	bf00      	nop
 800cc32:	3708      	adds	r7, #8
 800cc34:	46bd      	mov	sp, r7
 800cc36:	bd80      	pop	{r7, pc}

0800cc38 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800cc38:	b480      	push	{r7}
 800cc3a:	af00      	add	r7, sp, #0

}
 800cc3c:	bf00      	nop
 800cc3e:	46bd      	mov	sp, r7
 800cc40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc44:	4770      	bx	lr

0800cc46 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800cc46:	b580      	push	{r7, lr}
 800cc48:	b082      	sub	sp, #8
 800cc4a:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800cc4c:	2301      	movs	r3, #1
 800cc4e:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800cc50:	f000 f80c 	bl	800cc6c <BSP_PlatformIsDetected>
 800cc54:	4603      	mov	r3, r0
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d101      	bne.n	800cc5e <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800cc5a:	2300      	movs	r3, #0
 800cc5c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800cc5e:	79fb      	ldrb	r3, [r7, #7]
 800cc60:	b2db      	uxtb	r3, r3
}
 800cc62:	4618      	mov	r0, r3
 800cc64:	3708      	adds	r7, #8
 800cc66:	46bd      	mov	sp, r7
 800cc68:	bd80      	pop	{r7, pc}
	...

0800cc6c <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800cc6c:	b580      	push	{r7, lr}
 800cc6e:	b082      	sub	sp, #8
 800cc70:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800cc72:	2301      	movs	r3, #1
 800cc74:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800cc76:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800cc7a:	4806      	ldr	r0, [pc, #24]	; (800cc94 <BSP_PlatformIsDetected+0x28>)
 800cc7c:	f7fa f85e 	bl	8006d3c <HAL_GPIO_ReadPin>
 800cc80:	4603      	mov	r3, r0
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d001      	beq.n	800cc8a <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800cc86:	2300      	movs	r3, #0
 800cc88:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800cc8a:	79fb      	ldrb	r3, [r7, #7]
}
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	3708      	adds	r7, #8
 800cc90:	46bd      	mov	sp, r7
 800cc92:	bd80      	pop	{r7, pc}
 800cc94:	40020000 	.word	0x40020000

0800cc98 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800cc98:	b580      	push	{r7, lr}
 800cc9a:	b084      	sub	sp, #16
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800cca0:	f7f8 fdc2 	bl	8005828 <HAL_GetTick>
 800cca4:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800cca6:	e006      	b.n	800ccb6 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800cca8:	f7ff ff8a 	bl	800cbc0 <BSP_SD_GetCardState>
 800ccac:	4603      	mov	r3, r0
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d101      	bne.n	800ccb6 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800ccb2:	2300      	movs	r3, #0
 800ccb4:	e009      	b.n	800ccca <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800ccb6:	f7f8 fdb7 	bl	8005828 <HAL_GetTick>
 800ccba:	4602      	mov	r2, r0
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	1ad3      	subs	r3, r2, r3
 800ccc0:	687a      	ldr	r2, [r7, #4]
 800ccc2:	429a      	cmp	r2, r3
 800ccc4:	d8f0      	bhi.n	800cca8 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800ccc6:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ccca:	4618      	mov	r0, r3
 800cccc:	3710      	adds	r7, #16
 800ccce:	46bd      	mov	sp, r7
 800ccd0:	bd80      	pop	{r7, pc}
	...

0800ccd4 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800ccd4:	b580      	push	{r7, lr}
 800ccd6:	b082      	sub	sp, #8
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	4603      	mov	r3, r0
 800ccdc:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800ccde:	4b0b      	ldr	r3, [pc, #44]	; (800cd0c <SD_CheckStatus+0x38>)
 800cce0:	2201      	movs	r2, #1
 800cce2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800cce4:	f7ff ff6c 	bl	800cbc0 <BSP_SD_GetCardState>
 800cce8:	4603      	mov	r3, r0
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d107      	bne.n	800ccfe <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800ccee:	4b07      	ldr	r3, [pc, #28]	; (800cd0c <SD_CheckStatus+0x38>)
 800ccf0:	781b      	ldrb	r3, [r3, #0]
 800ccf2:	b2db      	uxtb	r3, r3
 800ccf4:	f023 0301 	bic.w	r3, r3, #1
 800ccf8:	b2da      	uxtb	r2, r3
 800ccfa:	4b04      	ldr	r3, [pc, #16]	; (800cd0c <SD_CheckStatus+0x38>)
 800ccfc:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800ccfe:	4b03      	ldr	r3, [pc, #12]	; (800cd0c <SD_CheckStatus+0x38>)
 800cd00:	781b      	ldrb	r3, [r3, #0]
 800cd02:	b2db      	uxtb	r3, r3
}
 800cd04:	4618      	mov	r0, r3
 800cd06:	3708      	adds	r7, #8
 800cd08:	46bd      	mov	sp, r7
 800cd0a:	bd80      	pop	{r7, pc}
 800cd0c:	20000009 	.word	0x20000009

0800cd10 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800cd10:	b580      	push	{r7, lr}
 800cd12:	b082      	sub	sp, #8
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	4603      	mov	r3, r0
 800cd18:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800cd1a:	f7ff fef7 	bl	800cb0c <BSP_SD_Init>
 800cd1e:	4603      	mov	r3, r0
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d107      	bne.n	800cd34 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800cd24:	79fb      	ldrb	r3, [r7, #7]
 800cd26:	4618      	mov	r0, r3
 800cd28:	f7ff ffd4 	bl	800ccd4 <SD_CheckStatus>
 800cd2c:	4603      	mov	r3, r0
 800cd2e:	461a      	mov	r2, r3
 800cd30:	4b04      	ldr	r3, [pc, #16]	; (800cd44 <SD_initialize+0x34>)
 800cd32:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800cd34:	4b03      	ldr	r3, [pc, #12]	; (800cd44 <SD_initialize+0x34>)
 800cd36:	781b      	ldrb	r3, [r3, #0]
 800cd38:	b2db      	uxtb	r3, r3
}
 800cd3a:	4618      	mov	r0, r3
 800cd3c:	3708      	adds	r7, #8
 800cd3e:	46bd      	mov	sp, r7
 800cd40:	bd80      	pop	{r7, pc}
 800cd42:	bf00      	nop
 800cd44:	20000009 	.word	0x20000009

0800cd48 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800cd48:	b580      	push	{r7, lr}
 800cd4a:	b082      	sub	sp, #8
 800cd4c:	af00      	add	r7, sp, #0
 800cd4e:	4603      	mov	r3, r0
 800cd50:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800cd52:	79fb      	ldrb	r3, [r7, #7]
 800cd54:	4618      	mov	r0, r3
 800cd56:	f7ff ffbd 	bl	800ccd4 <SD_CheckStatus>
 800cd5a:	4603      	mov	r3, r0
}
 800cd5c:	4618      	mov	r0, r3
 800cd5e:	3708      	adds	r7, #8
 800cd60:	46bd      	mov	sp, r7
 800cd62:	bd80      	pop	{r7, pc}

0800cd64 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800cd64:	b580      	push	{r7, lr}
 800cd66:	b086      	sub	sp, #24
 800cd68:	af00      	add	r7, sp, #0
 800cd6a:	60b9      	str	r1, [r7, #8]
 800cd6c:	607a      	str	r2, [r7, #4]
 800cd6e:	603b      	str	r3, [r7, #0]
 800cd70:	4603      	mov	r3, r0
 800cd72:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800cd74:	2301      	movs	r3, #1
 800cd76:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800cd78:	f247 5030 	movw	r0, #30000	; 0x7530
 800cd7c:	f7ff ff8c 	bl	800cc98 <SD_CheckStatusWithTimeout>
 800cd80:	4603      	mov	r3, r0
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	da01      	bge.n	800cd8a <SD_read+0x26>
  {
    return res;
 800cd86:	7dfb      	ldrb	r3, [r7, #23]
 800cd88:	e03b      	b.n	800ce02 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800cd8a:	683a      	ldr	r2, [r7, #0]
 800cd8c:	6879      	ldr	r1, [r7, #4]
 800cd8e:	68b8      	ldr	r0, [r7, #8]
 800cd90:	f7ff fee2 	bl	800cb58 <BSP_SD_ReadBlocks_DMA>
 800cd94:	4603      	mov	r3, r0
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d132      	bne.n	800ce00 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800cd9a:	4b1c      	ldr	r3, [pc, #112]	; (800ce0c <SD_read+0xa8>)
 800cd9c:	2200      	movs	r2, #0
 800cd9e:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800cda0:	f7f8 fd42 	bl	8005828 <HAL_GetTick>
 800cda4:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800cda6:	bf00      	nop
 800cda8:	4b18      	ldr	r3, [pc, #96]	; (800ce0c <SD_read+0xa8>)
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d108      	bne.n	800cdc2 <SD_read+0x5e>
 800cdb0:	f7f8 fd3a 	bl	8005828 <HAL_GetTick>
 800cdb4:	4602      	mov	r2, r0
 800cdb6:	693b      	ldr	r3, [r7, #16]
 800cdb8:	1ad3      	subs	r3, r2, r3
 800cdba:	f247 522f 	movw	r2, #29999	; 0x752f
 800cdbe:	4293      	cmp	r3, r2
 800cdc0:	d9f2      	bls.n	800cda8 <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 800cdc2:	4b12      	ldr	r3, [pc, #72]	; (800ce0c <SD_read+0xa8>)
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d102      	bne.n	800cdd0 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800cdca:	2301      	movs	r3, #1
 800cdcc:	75fb      	strb	r3, [r7, #23]
 800cdce:	e017      	b.n	800ce00 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800cdd0:	4b0e      	ldr	r3, [pc, #56]	; (800ce0c <SD_read+0xa8>)
 800cdd2:	2200      	movs	r2, #0
 800cdd4:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800cdd6:	f7f8 fd27 	bl	8005828 <HAL_GetTick>
 800cdda:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800cddc:	e007      	b.n	800cdee <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800cdde:	f7ff feef 	bl	800cbc0 <BSP_SD_GetCardState>
 800cde2:	4603      	mov	r3, r0
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d102      	bne.n	800cdee <SD_read+0x8a>
          {
            res = RES_OK;
 800cde8:	2300      	movs	r3, #0
 800cdea:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800cdec:	e008      	b.n	800ce00 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800cdee:	f7f8 fd1b 	bl	8005828 <HAL_GetTick>
 800cdf2:	4602      	mov	r2, r0
 800cdf4:	693b      	ldr	r3, [r7, #16]
 800cdf6:	1ad3      	subs	r3, r2, r3
 800cdf8:	f247 522f 	movw	r2, #29999	; 0x752f
 800cdfc:	4293      	cmp	r3, r2
 800cdfe:	d9ee      	bls.n	800cdde <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800ce00:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce02:	4618      	mov	r0, r3
 800ce04:	3718      	adds	r7, #24
 800ce06:	46bd      	mov	sp, r7
 800ce08:	bd80      	pop	{r7, pc}
 800ce0a:	bf00      	nop
 800ce0c:	20007b68 	.word	0x20007b68

0800ce10 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800ce10:	b580      	push	{r7, lr}
 800ce12:	b086      	sub	sp, #24
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	60b9      	str	r1, [r7, #8]
 800ce18:	607a      	str	r2, [r7, #4]
 800ce1a:	603b      	str	r3, [r7, #0]
 800ce1c:	4603      	mov	r3, r0
 800ce1e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ce20:	2301      	movs	r3, #1
 800ce22:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800ce24:	4b24      	ldr	r3, [pc, #144]	; (800ceb8 <SD_write+0xa8>)
 800ce26:	2200      	movs	r2, #0
 800ce28:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800ce2a:	f247 5030 	movw	r0, #30000	; 0x7530
 800ce2e:	f7ff ff33 	bl	800cc98 <SD_CheckStatusWithTimeout>
 800ce32:	4603      	mov	r3, r0
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	da01      	bge.n	800ce3c <SD_write+0x2c>
  {
    return res;
 800ce38:	7dfb      	ldrb	r3, [r7, #23]
 800ce3a:	e038      	b.n	800ceae <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800ce3c:	683a      	ldr	r2, [r7, #0]
 800ce3e:	6879      	ldr	r1, [r7, #4]
 800ce40:	68b8      	ldr	r0, [r7, #8]
 800ce42:	f7ff fea3 	bl	800cb8c <BSP_SD_WriteBlocks_DMA>
 800ce46:	4603      	mov	r3, r0
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d12f      	bne.n	800ceac <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800ce4c:	f7f8 fcec 	bl	8005828 <HAL_GetTick>
 800ce50:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800ce52:	bf00      	nop
 800ce54:	4b18      	ldr	r3, [pc, #96]	; (800ceb8 <SD_write+0xa8>)
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d108      	bne.n	800ce6e <SD_write+0x5e>
 800ce5c:	f7f8 fce4 	bl	8005828 <HAL_GetTick>
 800ce60:	4602      	mov	r2, r0
 800ce62:	693b      	ldr	r3, [r7, #16]
 800ce64:	1ad3      	subs	r3, r2, r3
 800ce66:	f247 522f 	movw	r2, #29999	; 0x752f
 800ce6a:	4293      	cmp	r3, r2
 800ce6c:	d9f2      	bls.n	800ce54 <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 800ce6e:	4b12      	ldr	r3, [pc, #72]	; (800ceb8 <SD_write+0xa8>)
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d102      	bne.n	800ce7c <SD_write+0x6c>
      {
        res = RES_ERROR;
 800ce76:	2301      	movs	r3, #1
 800ce78:	75fb      	strb	r3, [r7, #23]
 800ce7a:	e017      	b.n	800ceac <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800ce7c:	4b0e      	ldr	r3, [pc, #56]	; (800ceb8 <SD_write+0xa8>)
 800ce7e:	2200      	movs	r2, #0
 800ce80:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800ce82:	f7f8 fcd1 	bl	8005828 <HAL_GetTick>
 800ce86:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800ce88:	e007      	b.n	800ce9a <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ce8a:	f7ff fe99 	bl	800cbc0 <BSP_SD_GetCardState>
 800ce8e:	4603      	mov	r3, r0
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	d102      	bne.n	800ce9a <SD_write+0x8a>
          {
            res = RES_OK;
 800ce94:	2300      	movs	r3, #0
 800ce96:	75fb      	strb	r3, [r7, #23]
            break;
 800ce98:	e008      	b.n	800ceac <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800ce9a:	f7f8 fcc5 	bl	8005828 <HAL_GetTick>
 800ce9e:	4602      	mov	r2, r0
 800cea0:	693b      	ldr	r3, [r7, #16]
 800cea2:	1ad3      	subs	r3, r2, r3
 800cea4:	f247 522f 	movw	r2, #29999	; 0x752f
 800cea8:	4293      	cmp	r3, r2
 800ceaa:	d9ee      	bls.n	800ce8a <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800ceac:	7dfb      	ldrb	r3, [r7, #23]
}
 800ceae:	4618      	mov	r0, r3
 800ceb0:	3718      	adds	r7, #24
 800ceb2:	46bd      	mov	sp, r7
 800ceb4:	bd80      	pop	{r7, pc}
 800ceb6:	bf00      	nop
 800ceb8:	20007b64 	.word	0x20007b64

0800cebc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800cebc:	b580      	push	{r7, lr}
 800cebe:	b08c      	sub	sp, #48	; 0x30
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	4603      	mov	r3, r0
 800cec4:	603a      	str	r2, [r7, #0]
 800cec6:	71fb      	strb	r3, [r7, #7]
 800cec8:	460b      	mov	r3, r1
 800ceca:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800cecc:	2301      	movs	r3, #1
 800cece:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800ced2:	4b25      	ldr	r3, [pc, #148]	; (800cf68 <SD_ioctl+0xac>)
 800ced4:	781b      	ldrb	r3, [r3, #0]
 800ced6:	b2db      	uxtb	r3, r3
 800ced8:	f003 0301 	and.w	r3, r3, #1
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d001      	beq.n	800cee4 <SD_ioctl+0x28>
 800cee0:	2303      	movs	r3, #3
 800cee2:	e03c      	b.n	800cf5e <SD_ioctl+0xa2>

  switch (cmd)
 800cee4:	79bb      	ldrb	r3, [r7, #6]
 800cee6:	2b03      	cmp	r3, #3
 800cee8:	d834      	bhi.n	800cf54 <SD_ioctl+0x98>
 800ceea:	a201      	add	r2, pc, #4	; (adr r2, 800cef0 <SD_ioctl+0x34>)
 800ceec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cef0:	0800cf01 	.word	0x0800cf01
 800cef4:	0800cf09 	.word	0x0800cf09
 800cef8:	0800cf21 	.word	0x0800cf21
 800cefc:	0800cf3b 	.word	0x0800cf3b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800cf00:	2300      	movs	r3, #0
 800cf02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cf06:	e028      	b.n	800cf5a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800cf08:	f107 030c 	add.w	r3, r7, #12
 800cf0c:	4618      	mov	r0, r3
 800cf0e:	f7ff fe67 	bl	800cbe0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800cf12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cf14:	683b      	ldr	r3, [r7, #0]
 800cf16:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800cf18:	2300      	movs	r3, #0
 800cf1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cf1e:	e01c      	b.n	800cf5a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800cf20:	f107 030c 	add.w	r3, r7, #12
 800cf24:	4618      	mov	r0, r3
 800cf26:	f7ff fe5b 	bl	800cbe0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800cf2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf2c:	b29a      	uxth	r2, r3
 800cf2e:	683b      	ldr	r3, [r7, #0]
 800cf30:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800cf32:	2300      	movs	r3, #0
 800cf34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cf38:	e00f      	b.n	800cf5a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800cf3a:	f107 030c 	add.w	r3, r7, #12
 800cf3e:	4618      	mov	r0, r3
 800cf40:	f7ff fe4e 	bl	800cbe0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800cf44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf46:	0a5a      	lsrs	r2, r3, #9
 800cf48:	683b      	ldr	r3, [r7, #0]
 800cf4a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800cf4c:	2300      	movs	r3, #0
 800cf4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cf52:	e002      	b.n	800cf5a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800cf54:	2304      	movs	r3, #4
 800cf56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800cf5a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800cf5e:	4618      	mov	r0, r3
 800cf60:	3730      	adds	r7, #48	; 0x30
 800cf62:	46bd      	mov	sp, r7
 800cf64:	bd80      	pop	{r7, pc}
 800cf66:	bf00      	nop
 800cf68:	20000009 	.word	0x20000009

0800cf6c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800cf6c:	b480      	push	{r7}
 800cf6e:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800cf70:	4b03      	ldr	r3, [pc, #12]	; (800cf80 <BSP_SD_WriteCpltCallback+0x14>)
 800cf72:	2201      	movs	r2, #1
 800cf74:	601a      	str	r2, [r3, #0]
}
 800cf76:	bf00      	nop
 800cf78:	46bd      	mov	sp, r7
 800cf7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf7e:	4770      	bx	lr
 800cf80:	20007b64 	.word	0x20007b64

0800cf84 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800cf84:	b480      	push	{r7}
 800cf86:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800cf88:	4b03      	ldr	r3, [pc, #12]	; (800cf98 <BSP_SD_ReadCpltCallback+0x14>)
 800cf8a:	2201      	movs	r2, #1
 800cf8c:	601a      	str	r2, [r3, #0]
}
 800cf8e:	bf00      	nop
 800cf90:	46bd      	mov	sp, r7
 800cf92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf96:	4770      	bx	lr
 800cf98:	20007b68 	.word	0x20007b68

0800cf9c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800cf9c:	b580      	push	{r7, lr}
 800cf9e:	b084      	sub	sp, #16
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	4603      	mov	r3, r0
 800cfa4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800cfa6:	79fb      	ldrb	r3, [r7, #7]
 800cfa8:	4a08      	ldr	r2, [pc, #32]	; (800cfcc <disk_status+0x30>)
 800cfaa:	009b      	lsls	r3, r3, #2
 800cfac:	4413      	add	r3, r2
 800cfae:	685b      	ldr	r3, [r3, #4]
 800cfb0:	685b      	ldr	r3, [r3, #4]
 800cfb2:	79fa      	ldrb	r2, [r7, #7]
 800cfb4:	4905      	ldr	r1, [pc, #20]	; (800cfcc <disk_status+0x30>)
 800cfb6:	440a      	add	r2, r1
 800cfb8:	7a12      	ldrb	r2, [r2, #8]
 800cfba:	4610      	mov	r0, r2
 800cfbc:	4798      	blx	r3
 800cfbe:	4603      	mov	r3, r0
 800cfc0:	73fb      	strb	r3, [r7, #15]
  return stat;
 800cfc2:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfc4:	4618      	mov	r0, r3
 800cfc6:	3710      	adds	r7, #16
 800cfc8:	46bd      	mov	sp, r7
 800cfca:	bd80      	pop	{r7, pc}
 800cfcc:	20007d94 	.word	0x20007d94

0800cfd0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800cfd0:	b580      	push	{r7, lr}
 800cfd2:	b084      	sub	sp, #16
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	4603      	mov	r3, r0
 800cfd8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800cfda:	2300      	movs	r3, #0
 800cfdc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800cfde:	79fb      	ldrb	r3, [r7, #7]
 800cfe0:	4a0d      	ldr	r2, [pc, #52]	; (800d018 <disk_initialize+0x48>)
 800cfe2:	5cd3      	ldrb	r3, [r2, r3]
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d111      	bne.n	800d00c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800cfe8:	79fb      	ldrb	r3, [r7, #7]
 800cfea:	4a0b      	ldr	r2, [pc, #44]	; (800d018 <disk_initialize+0x48>)
 800cfec:	2101      	movs	r1, #1
 800cfee:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800cff0:	79fb      	ldrb	r3, [r7, #7]
 800cff2:	4a09      	ldr	r2, [pc, #36]	; (800d018 <disk_initialize+0x48>)
 800cff4:	009b      	lsls	r3, r3, #2
 800cff6:	4413      	add	r3, r2
 800cff8:	685b      	ldr	r3, [r3, #4]
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	79fa      	ldrb	r2, [r7, #7]
 800cffe:	4906      	ldr	r1, [pc, #24]	; (800d018 <disk_initialize+0x48>)
 800d000:	440a      	add	r2, r1
 800d002:	7a12      	ldrb	r2, [r2, #8]
 800d004:	4610      	mov	r0, r2
 800d006:	4798      	blx	r3
 800d008:	4603      	mov	r3, r0
 800d00a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800d00c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d00e:	4618      	mov	r0, r3
 800d010:	3710      	adds	r7, #16
 800d012:	46bd      	mov	sp, r7
 800d014:	bd80      	pop	{r7, pc}
 800d016:	bf00      	nop
 800d018:	20007d94 	.word	0x20007d94

0800d01c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800d01c:	b590      	push	{r4, r7, lr}
 800d01e:	b087      	sub	sp, #28
 800d020:	af00      	add	r7, sp, #0
 800d022:	60b9      	str	r1, [r7, #8]
 800d024:	607a      	str	r2, [r7, #4]
 800d026:	603b      	str	r3, [r7, #0]
 800d028:	4603      	mov	r3, r0
 800d02a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800d02c:	7bfb      	ldrb	r3, [r7, #15]
 800d02e:	4a0a      	ldr	r2, [pc, #40]	; (800d058 <disk_read+0x3c>)
 800d030:	009b      	lsls	r3, r3, #2
 800d032:	4413      	add	r3, r2
 800d034:	685b      	ldr	r3, [r3, #4]
 800d036:	689c      	ldr	r4, [r3, #8]
 800d038:	7bfb      	ldrb	r3, [r7, #15]
 800d03a:	4a07      	ldr	r2, [pc, #28]	; (800d058 <disk_read+0x3c>)
 800d03c:	4413      	add	r3, r2
 800d03e:	7a18      	ldrb	r0, [r3, #8]
 800d040:	683b      	ldr	r3, [r7, #0]
 800d042:	687a      	ldr	r2, [r7, #4]
 800d044:	68b9      	ldr	r1, [r7, #8]
 800d046:	47a0      	blx	r4
 800d048:	4603      	mov	r3, r0
 800d04a:	75fb      	strb	r3, [r7, #23]
  return res;
 800d04c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d04e:	4618      	mov	r0, r3
 800d050:	371c      	adds	r7, #28
 800d052:	46bd      	mov	sp, r7
 800d054:	bd90      	pop	{r4, r7, pc}
 800d056:	bf00      	nop
 800d058:	20007d94 	.word	0x20007d94

0800d05c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800d05c:	b590      	push	{r4, r7, lr}
 800d05e:	b087      	sub	sp, #28
 800d060:	af00      	add	r7, sp, #0
 800d062:	60b9      	str	r1, [r7, #8]
 800d064:	607a      	str	r2, [r7, #4]
 800d066:	603b      	str	r3, [r7, #0]
 800d068:	4603      	mov	r3, r0
 800d06a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800d06c:	7bfb      	ldrb	r3, [r7, #15]
 800d06e:	4a0a      	ldr	r2, [pc, #40]	; (800d098 <disk_write+0x3c>)
 800d070:	009b      	lsls	r3, r3, #2
 800d072:	4413      	add	r3, r2
 800d074:	685b      	ldr	r3, [r3, #4]
 800d076:	68dc      	ldr	r4, [r3, #12]
 800d078:	7bfb      	ldrb	r3, [r7, #15]
 800d07a:	4a07      	ldr	r2, [pc, #28]	; (800d098 <disk_write+0x3c>)
 800d07c:	4413      	add	r3, r2
 800d07e:	7a18      	ldrb	r0, [r3, #8]
 800d080:	683b      	ldr	r3, [r7, #0]
 800d082:	687a      	ldr	r2, [r7, #4]
 800d084:	68b9      	ldr	r1, [r7, #8]
 800d086:	47a0      	blx	r4
 800d088:	4603      	mov	r3, r0
 800d08a:	75fb      	strb	r3, [r7, #23]
  return res;
 800d08c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d08e:	4618      	mov	r0, r3
 800d090:	371c      	adds	r7, #28
 800d092:	46bd      	mov	sp, r7
 800d094:	bd90      	pop	{r4, r7, pc}
 800d096:	bf00      	nop
 800d098:	20007d94 	.word	0x20007d94

0800d09c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800d09c:	b580      	push	{r7, lr}
 800d09e:	b084      	sub	sp, #16
 800d0a0:	af00      	add	r7, sp, #0
 800d0a2:	4603      	mov	r3, r0
 800d0a4:	603a      	str	r2, [r7, #0]
 800d0a6:	71fb      	strb	r3, [r7, #7]
 800d0a8:	460b      	mov	r3, r1
 800d0aa:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800d0ac:	79fb      	ldrb	r3, [r7, #7]
 800d0ae:	4a09      	ldr	r2, [pc, #36]	; (800d0d4 <disk_ioctl+0x38>)
 800d0b0:	009b      	lsls	r3, r3, #2
 800d0b2:	4413      	add	r3, r2
 800d0b4:	685b      	ldr	r3, [r3, #4]
 800d0b6:	691b      	ldr	r3, [r3, #16]
 800d0b8:	79fa      	ldrb	r2, [r7, #7]
 800d0ba:	4906      	ldr	r1, [pc, #24]	; (800d0d4 <disk_ioctl+0x38>)
 800d0bc:	440a      	add	r2, r1
 800d0be:	7a10      	ldrb	r0, [r2, #8]
 800d0c0:	79b9      	ldrb	r1, [r7, #6]
 800d0c2:	683a      	ldr	r2, [r7, #0]
 800d0c4:	4798      	blx	r3
 800d0c6:	4603      	mov	r3, r0
 800d0c8:	73fb      	strb	r3, [r7, #15]
  return res;
 800d0ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0cc:	4618      	mov	r0, r3
 800d0ce:	3710      	adds	r7, #16
 800d0d0:	46bd      	mov	sp, r7
 800d0d2:	bd80      	pop	{r7, pc}
 800d0d4:	20007d94 	.word	0x20007d94

0800d0d8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800d0d8:	b480      	push	{r7}
 800d0da:	b085      	sub	sp, #20
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	3301      	adds	r3, #1
 800d0e4:	781b      	ldrb	r3, [r3, #0]
 800d0e6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800d0e8:	89fb      	ldrh	r3, [r7, #14]
 800d0ea:	021b      	lsls	r3, r3, #8
 800d0ec:	b21a      	sxth	r2, r3
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	781b      	ldrb	r3, [r3, #0]
 800d0f2:	b21b      	sxth	r3, r3
 800d0f4:	4313      	orrs	r3, r2
 800d0f6:	b21b      	sxth	r3, r3
 800d0f8:	81fb      	strh	r3, [r7, #14]
	return rv;
 800d0fa:	89fb      	ldrh	r3, [r7, #14]
}
 800d0fc:	4618      	mov	r0, r3
 800d0fe:	3714      	adds	r7, #20
 800d100:	46bd      	mov	sp, r7
 800d102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d106:	4770      	bx	lr

0800d108 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800d108:	b480      	push	{r7}
 800d10a:	b085      	sub	sp, #20
 800d10c:	af00      	add	r7, sp, #0
 800d10e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	3303      	adds	r3, #3
 800d114:	781b      	ldrb	r3, [r3, #0]
 800d116:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	021b      	lsls	r3, r3, #8
 800d11c:	687a      	ldr	r2, [r7, #4]
 800d11e:	3202      	adds	r2, #2
 800d120:	7812      	ldrb	r2, [r2, #0]
 800d122:	4313      	orrs	r3, r2
 800d124:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	021b      	lsls	r3, r3, #8
 800d12a:	687a      	ldr	r2, [r7, #4]
 800d12c:	3201      	adds	r2, #1
 800d12e:	7812      	ldrb	r2, [r2, #0]
 800d130:	4313      	orrs	r3, r2
 800d132:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	021b      	lsls	r3, r3, #8
 800d138:	687a      	ldr	r2, [r7, #4]
 800d13a:	7812      	ldrb	r2, [r2, #0]
 800d13c:	4313      	orrs	r3, r2
 800d13e:	60fb      	str	r3, [r7, #12]
	return rv;
 800d140:	68fb      	ldr	r3, [r7, #12]
}
 800d142:	4618      	mov	r0, r3
 800d144:	3714      	adds	r7, #20
 800d146:	46bd      	mov	sp, r7
 800d148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d14c:	4770      	bx	lr

0800d14e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800d14e:	b480      	push	{r7}
 800d150:	b083      	sub	sp, #12
 800d152:	af00      	add	r7, sp, #0
 800d154:	6078      	str	r0, [r7, #4]
 800d156:	460b      	mov	r3, r1
 800d158:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	1c5a      	adds	r2, r3, #1
 800d15e:	607a      	str	r2, [r7, #4]
 800d160:	887a      	ldrh	r2, [r7, #2]
 800d162:	b2d2      	uxtb	r2, r2
 800d164:	701a      	strb	r2, [r3, #0]
 800d166:	887b      	ldrh	r3, [r7, #2]
 800d168:	0a1b      	lsrs	r3, r3, #8
 800d16a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	1c5a      	adds	r2, r3, #1
 800d170:	607a      	str	r2, [r7, #4]
 800d172:	887a      	ldrh	r2, [r7, #2]
 800d174:	b2d2      	uxtb	r2, r2
 800d176:	701a      	strb	r2, [r3, #0]
}
 800d178:	bf00      	nop
 800d17a:	370c      	adds	r7, #12
 800d17c:	46bd      	mov	sp, r7
 800d17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d182:	4770      	bx	lr

0800d184 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800d184:	b480      	push	{r7}
 800d186:	b083      	sub	sp, #12
 800d188:	af00      	add	r7, sp, #0
 800d18a:	6078      	str	r0, [r7, #4]
 800d18c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	1c5a      	adds	r2, r3, #1
 800d192:	607a      	str	r2, [r7, #4]
 800d194:	683a      	ldr	r2, [r7, #0]
 800d196:	b2d2      	uxtb	r2, r2
 800d198:	701a      	strb	r2, [r3, #0]
 800d19a:	683b      	ldr	r3, [r7, #0]
 800d19c:	0a1b      	lsrs	r3, r3, #8
 800d19e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	1c5a      	adds	r2, r3, #1
 800d1a4:	607a      	str	r2, [r7, #4]
 800d1a6:	683a      	ldr	r2, [r7, #0]
 800d1a8:	b2d2      	uxtb	r2, r2
 800d1aa:	701a      	strb	r2, [r3, #0]
 800d1ac:	683b      	ldr	r3, [r7, #0]
 800d1ae:	0a1b      	lsrs	r3, r3, #8
 800d1b0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	1c5a      	adds	r2, r3, #1
 800d1b6:	607a      	str	r2, [r7, #4]
 800d1b8:	683a      	ldr	r2, [r7, #0]
 800d1ba:	b2d2      	uxtb	r2, r2
 800d1bc:	701a      	strb	r2, [r3, #0]
 800d1be:	683b      	ldr	r3, [r7, #0]
 800d1c0:	0a1b      	lsrs	r3, r3, #8
 800d1c2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	1c5a      	adds	r2, r3, #1
 800d1c8:	607a      	str	r2, [r7, #4]
 800d1ca:	683a      	ldr	r2, [r7, #0]
 800d1cc:	b2d2      	uxtb	r2, r2
 800d1ce:	701a      	strb	r2, [r3, #0]
}
 800d1d0:	bf00      	nop
 800d1d2:	370c      	adds	r7, #12
 800d1d4:	46bd      	mov	sp, r7
 800d1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1da:	4770      	bx	lr

0800d1dc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800d1dc:	b480      	push	{r7}
 800d1de:	b087      	sub	sp, #28
 800d1e0:	af00      	add	r7, sp, #0
 800d1e2:	60f8      	str	r0, [r7, #12]
 800d1e4:	60b9      	str	r1, [r7, #8]
 800d1e6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800d1ec:	68bb      	ldr	r3, [r7, #8]
 800d1ee:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d00d      	beq.n	800d212 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800d1f6:	693a      	ldr	r2, [r7, #16]
 800d1f8:	1c53      	adds	r3, r2, #1
 800d1fa:	613b      	str	r3, [r7, #16]
 800d1fc:	697b      	ldr	r3, [r7, #20]
 800d1fe:	1c59      	adds	r1, r3, #1
 800d200:	6179      	str	r1, [r7, #20]
 800d202:	7812      	ldrb	r2, [r2, #0]
 800d204:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	3b01      	subs	r3, #1
 800d20a:	607b      	str	r3, [r7, #4]
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d1f1      	bne.n	800d1f6 <mem_cpy+0x1a>
	}
}
 800d212:	bf00      	nop
 800d214:	371c      	adds	r7, #28
 800d216:	46bd      	mov	sp, r7
 800d218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d21c:	4770      	bx	lr

0800d21e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800d21e:	b480      	push	{r7}
 800d220:	b087      	sub	sp, #28
 800d222:	af00      	add	r7, sp, #0
 800d224:	60f8      	str	r0, [r7, #12]
 800d226:	60b9      	str	r1, [r7, #8]
 800d228:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800d22e:	697b      	ldr	r3, [r7, #20]
 800d230:	1c5a      	adds	r2, r3, #1
 800d232:	617a      	str	r2, [r7, #20]
 800d234:	68ba      	ldr	r2, [r7, #8]
 800d236:	b2d2      	uxtb	r2, r2
 800d238:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	3b01      	subs	r3, #1
 800d23e:	607b      	str	r3, [r7, #4]
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	2b00      	cmp	r3, #0
 800d244:	d1f3      	bne.n	800d22e <mem_set+0x10>
}
 800d246:	bf00      	nop
 800d248:	371c      	adds	r7, #28
 800d24a:	46bd      	mov	sp, r7
 800d24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d250:	4770      	bx	lr

0800d252 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800d252:	b480      	push	{r7}
 800d254:	b089      	sub	sp, #36	; 0x24
 800d256:	af00      	add	r7, sp, #0
 800d258:	60f8      	str	r0, [r7, #12]
 800d25a:	60b9      	str	r1, [r7, #8]
 800d25c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	61fb      	str	r3, [r7, #28]
 800d262:	68bb      	ldr	r3, [r7, #8]
 800d264:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800d266:	2300      	movs	r3, #0
 800d268:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800d26a:	69fb      	ldr	r3, [r7, #28]
 800d26c:	1c5a      	adds	r2, r3, #1
 800d26e:	61fa      	str	r2, [r7, #28]
 800d270:	781b      	ldrb	r3, [r3, #0]
 800d272:	4619      	mov	r1, r3
 800d274:	69bb      	ldr	r3, [r7, #24]
 800d276:	1c5a      	adds	r2, r3, #1
 800d278:	61ba      	str	r2, [r7, #24]
 800d27a:	781b      	ldrb	r3, [r3, #0]
 800d27c:	1acb      	subs	r3, r1, r3
 800d27e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	3b01      	subs	r3, #1
 800d284:	607b      	str	r3, [r7, #4]
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d002      	beq.n	800d292 <mem_cmp+0x40>
 800d28c:	697b      	ldr	r3, [r7, #20]
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d0eb      	beq.n	800d26a <mem_cmp+0x18>

	return r;
 800d292:	697b      	ldr	r3, [r7, #20]
}
 800d294:	4618      	mov	r0, r3
 800d296:	3724      	adds	r7, #36	; 0x24
 800d298:	46bd      	mov	sp, r7
 800d29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d29e:	4770      	bx	lr

0800d2a0 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800d2a0:	b480      	push	{r7}
 800d2a2:	b083      	sub	sp, #12
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	6078      	str	r0, [r7, #4]
 800d2a8:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800d2aa:	e002      	b.n	800d2b2 <chk_chr+0x12>
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	3301      	adds	r3, #1
 800d2b0:	607b      	str	r3, [r7, #4]
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	781b      	ldrb	r3, [r3, #0]
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d005      	beq.n	800d2c6 <chk_chr+0x26>
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	781b      	ldrb	r3, [r3, #0]
 800d2be:	461a      	mov	r2, r3
 800d2c0:	683b      	ldr	r3, [r7, #0]
 800d2c2:	4293      	cmp	r3, r2
 800d2c4:	d1f2      	bne.n	800d2ac <chk_chr+0xc>
	return *str;
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	781b      	ldrb	r3, [r3, #0]
}
 800d2ca:	4618      	mov	r0, r3
 800d2cc:	370c      	adds	r7, #12
 800d2ce:	46bd      	mov	sp, r7
 800d2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d4:	4770      	bx	lr
	...

0800d2d8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d2d8:	b480      	push	{r7}
 800d2da:	b085      	sub	sp, #20
 800d2dc:	af00      	add	r7, sp, #0
 800d2de:	6078      	str	r0, [r7, #4]
 800d2e0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d2e2:	2300      	movs	r3, #0
 800d2e4:	60bb      	str	r3, [r7, #8]
 800d2e6:	68bb      	ldr	r3, [r7, #8]
 800d2e8:	60fb      	str	r3, [r7, #12]
 800d2ea:	e029      	b.n	800d340 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800d2ec:	4a27      	ldr	r2, [pc, #156]	; (800d38c <chk_lock+0xb4>)
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	011b      	lsls	r3, r3, #4
 800d2f2:	4413      	add	r3, r2
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d01d      	beq.n	800d336 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d2fa:	4a24      	ldr	r2, [pc, #144]	; (800d38c <chk_lock+0xb4>)
 800d2fc:	68fb      	ldr	r3, [r7, #12]
 800d2fe:	011b      	lsls	r3, r3, #4
 800d300:	4413      	add	r3, r2
 800d302:	681a      	ldr	r2, [r3, #0]
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	429a      	cmp	r2, r3
 800d30a:	d116      	bne.n	800d33a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800d30c:	4a1f      	ldr	r2, [pc, #124]	; (800d38c <chk_lock+0xb4>)
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	011b      	lsls	r3, r3, #4
 800d312:	4413      	add	r3, r2
 800d314:	3304      	adds	r3, #4
 800d316:	681a      	ldr	r2, [r3, #0]
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d31c:	429a      	cmp	r2, r3
 800d31e:	d10c      	bne.n	800d33a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d320:	4a1a      	ldr	r2, [pc, #104]	; (800d38c <chk_lock+0xb4>)
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	011b      	lsls	r3, r3, #4
 800d326:	4413      	add	r3, r2
 800d328:	3308      	adds	r3, #8
 800d32a:	681a      	ldr	r2, [r3, #0]
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800d330:	429a      	cmp	r2, r3
 800d332:	d102      	bne.n	800d33a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d334:	e007      	b.n	800d346 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800d336:	2301      	movs	r3, #1
 800d338:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d33a:	68fb      	ldr	r3, [r7, #12]
 800d33c:	3301      	adds	r3, #1
 800d33e:	60fb      	str	r3, [r7, #12]
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	2b01      	cmp	r3, #1
 800d344:	d9d2      	bls.n	800d2ec <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	2b02      	cmp	r3, #2
 800d34a:	d109      	bne.n	800d360 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800d34c:	68bb      	ldr	r3, [r7, #8]
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d102      	bne.n	800d358 <chk_lock+0x80>
 800d352:	683b      	ldr	r3, [r7, #0]
 800d354:	2b02      	cmp	r3, #2
 800d356:	d101      	bne.n	800d35c <chk_lock+0x84>
 800d358:	2300      	movs	r3, #0
 800d35a:	e010      	b.n	800d37e <chk_lock+0xa6>
 800d35c:	2312      	movs	r3, #18
 800d35e:	e00e      	b.n	800d37e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800d360:	683b      	ldr	r3, [r7, #0]
 800d362:	2b00      	cmp	r3, #0
 800d364:	d108      	bne.n	800d378 <chk_lock+0xa0>
 800d366:	4a09      	ldr	r2, [pc, #36]	; (800d38c <chk_lock+0xb4>)
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	011b      	lsls	r3, r3, #4
 800d36c:	4413      	add	r3, r2
 800d36e:	330c      	adds	r3, #12
 800d370:	881b      	ldrh	r3, [r3, #0]
 800d372:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d376:	d101      	bne.n	800d37c <chk_lock+0xa4>
 800d378:	2310      	movs	r3, #16
 800d37a:	e000      	b.n	800d37e <chk_lock+0xa6>
 800d37c:	2300      	movs	r3, #0
}
 800d37e:	4618      	mov	r0, r3
 800d380:	3714      	adds	r7, #20
 800d382:	46bd      	mov	sp, r7
 800d384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d388:	4770      	bx	lr
 800d38a:	bf00      	nop
 800d38c:	20007b74 	.word	0x20007b74

0800d390 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800d390:	b480      	push	{r7}
 800d392:	b083      	sub	sp, #12
 800d394:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d396:	2300      	movs	r3, #0
 800d398:	607b      	str	r3, [r7, #4]
 800d39a:	e002      	b.n	800d3a2 <enq_lock+0x12>
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	3301      	adds	r3, #1
 800d3a0:	607b      	str	r3, [r7, #4]
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	2b01      	cmp	r3, #1
 800d3a6:	d806      	bhi.n	800d3b6 <enq_lock+0x26>
 800d3a8:	4a09      	ldr	r2, [pc, #36]	; (800d3d0 <enq_lock+0x40>)
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	011b      	lsls	r3, r3, #4
 800d3ae:	4413      	add	r3, r2
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d1f2      	bne.n	800d39c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	2b02      	cmp	r3, #2
 800d3ba:	bf14      	ite	ne
 800d3bc:	2301      	movne	r3, #1
 800d3be:	2300      	moveq	r3, #0
 800d3c0:	b2db      	uxtb	r3, r3
}
 800d3c2:	4618      	mov	r0, r3
 800d3c4:	370c      	adds	r7, #12
 800d3c6:	46bd      	mov	sp, r7
 800d3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3cc:	4770      	bx	lr
 800d3ce:	bf00      	nop
 800d3d0:	20007b74 	.word	0x20007b74

0800d3d4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d3d4:	b480      	push	{r7}
 800d3d6:	b085      	sub	sp, #20
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	6078      	str	r0, [r7, #4]
 800d3dc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d3de:	2300      	movs	r3, #0
 800d3e0:	60fb      	str	r3, [r7, #12]
 800d3e2:	e01f      	b.n	800d424 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800d3e4:	4a41      	ldr	r2, [pc, #260]	; (800d4ec <inc_lock+0x118>)
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	011b      	lsls	r3, r3, #4
 800d3ea:	4413      	add	r3, r2
 800d3ec:	681a      	ldr	r2, [r3, #0]
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	429a      	cmp	r2, r3
 800d3f4:	d113      	bne.n	800d41e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800d3f6:	4a3d      	ldr	r2, [pc, #244]	; (800d4ec <inc_lock+0x118>)
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	011b      	lsls	r3, r3, #4
 800d3fc:	4413      	add	r3, r2
 800d3fe:	3304      	adds	r3, #4
 800d400:	681a      	ldr	r2, [r3, #0]
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800d406:	429a      	cmp	r2, r3
 800d408:	d109      	bne.n	800d41e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800d40a:	4a38      	ldr	r2, [pc, #224]	; (800d4ec <inc_lock+0x118>)
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	011b      	lsls	r3, r3, #4
 800d410:	4413      	add	r3, r2
 800d412:	3308      	adds	r3, #8
 800d414:	681a      	ldr	r2, [r3, #0]
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800d41a:	429a      	cmp	r2, r3
 800d41c:	d006      	beq.n	800d42c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	3301      	adds	r3, #1
 800d422:	60fb      	str	r3, [r7, #12]
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	2b01      	cmp	r3, #1
 800d428:	d9dc      	bls.n	800d3e4 <inc_lock+0x10>
 800d42a:	e000      	b.n	800d42e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800d42c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	2b02      	cmp	r3, #2
 800d432:	d132      	bne.n	800d49a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d434:	2300      	movs	r3, #0
 800d436:	60fb      	str	r3, [r7, #12]
 800d438:	e002      	b.n	800d440 <inc_lock+0x6c>
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	3301      	adds	r3, #1
 800d43e:	60fb      	str	r3, [r7, #12]
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	2b01      	cmp	r3, #1
 800d444:	d806      	bhi.n	800d454 <inc_lock+0x80>
 800d446:	4a29      	ldr	r2, [pc, #164]	; (800d4ec <inc_lock+0x118>)
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	011b      	lsls	r3, r3, #4
 800d44c:	4413      	add	r3, r2
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	2b00      	cmp	r3, #0
 800d452:	d1f2      	bne.n	800d43a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	2b02      	cmp	r3, #2
 800d458:	d101      	bne.n	800d45e <inc_lock+0x8a>
 800d45a:	2300      	movs	r3, #0
 800d45c:	e040      	b.n	800d4e0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	681a      	ldr	r2, [r3, #0]
 800d462:	4922      	ldr	r1, [pc, #136]	; (800d4ec <inc_lock+0x118>)
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	011b      	lsls	r3, r3, #4
 800d468:	440b      	add	r3, r1
 800d46a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	689a      	ldr	r2, [r3, #8]
 800d470:	491e      	ldr	r1, [pc, #120]	; (800d4ec <inc_lock+0x118>)
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	011b      	lsls	r3, r3, #4
 800d476:	440b      	add	r3, r1
 800d478:	3304      	adds	r3, #4
 800d47a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	695a      	ldr	r2, [r3, #20]
 800d480:	491a      	ldr	r1, [pc, #104]	; (800d4ec <inc_lock+0x118>)
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	011b      	lsls	r3, r3, #4
 800d486:	440b      	add	r3, r1
 800d488:	3308      	adds	r3, #8
 800d48a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800d48c:	4a17      	ldr	r2, [pc, #92]	; (800d4ec <inc_lock+0x118>)
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	011b      	lsls	r3, r3, #4
 800d492:	4413      	add	r3, r2
 800d494:	330c      	adds	r3, #12
 800d496:	2200      	movs	r2, #0
 800d498:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800d49a:	683b      	ldr	r3, [r7, #0]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d009      	beq.n	800d4b4 <inc_lock+0xe0>
 800d4a0:	4a12      	ldr	r2, [pc, #72]	; (800d4ec <inc_lock+0x118>)
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	011b      	lsls	r3, r3, #4
 800d4a6:	4413      	add	r3, r2
 800d4a8:	330c      	adds	r3, #12
 800d4aa:	881b      	ldrh	r3, [r3, #0]
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d001      	beq.n	800d4b4 <inc_lock+0xe0>
 800d4b0:	2300      	movs	r3, #0
 800d4b2:	e015      	b.n	800d4e0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800d4b4:	683b      	ldr	r3, [r7, #0]
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d108      	bne.n	800d4cc <inc_lock+0xf8>
 800d4ba:	4a0c      	ldr	r2, [pc, #48]	; (800d4ec <inc_lock+0x118>)
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	011b      	lsls	r3, r3, #4
 800d4c0:	4413      	add	r3, r2
 800d4c2:	330c      	adds	r3, #12
 800d4c4:	881b      	ldrh	r3, [r3, #0]
 800d4c6:	3301      	adds	r3, #1
 800d4c8:	b29a      	uxth	r2, r3
 800d4ca:	e001      	b.n	800d4d0 <inc_lock+0xfc>
 800d4cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d4d0:	4906      	ldr	r1, [pc, #24]	; (800d4ec <inc_lock+0x118>)
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	011b      	lsls	r3, r3, #4
 800d4d6:	440b      	add	r3, r1
 800d4d8:	330c      	adds	r3, #12
 800d4da:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	3301      	adds	r3, #1
}
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	3714      	adds	r7, #20
 800d4e4:	46bd      	mov	sp, r7
 800d4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ea:	4770      	bx	lr
 800d4ec:	20007b74 	.word	0x20007b74

0800d4f0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800d4f0:	b480      	push	{r7}
 800d4f2:	b085      	sub	sp, #20
 800d4f4:	af00      	add	r7, sp, #0
 800d4f6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	3b01      	subs	r3, #1
 800d4fc:	607b      	str	r3, [r7, #4]
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	2b01      	cmp	r3, #1
 800d502:	d825      	bhi.n	800d550 <dec_lock+0x60>
		n = Files[i].ctr;
 800d504:	4a17      	ldr	r2, [pc, #92]	; (800d564 <dec_lock+0x74>)
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	011b      	lsls	r3, r3, #4
 800d50a:	4413      	add	r3, r2
 800d50c:	330c      	adds	r3, #12
 800d50e:	881b      	ldrh	r3, [r3, #0]
 800d510:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800d512:	89fb      	ldrh	r3, [r7, #14]
 800d514:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d518:	d101      	bne.n	800d51e <dec_lock+0x2e>
 800d51a:	2300      	movs	r3, #0
 800d51c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800d51e:	89fb      	ldrh	r3, [r7, #14]
 800d520:	2b00      	cmp	r3, #0
 800d522:	d002      	beq.n	800d52a <dec_lock+0x3a>
 800d524:	89fb      	ldrh	r3, [r7, #14]
 800d526:	3b01      	subs	r3, #1
 800d528:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800d52a:	4a0e      	ldr	r2, [pc, #56]	; (800d564 <dec_lock+0x74>)
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	011b      	lsls	r3, r3, #4
 800d530:	4413      	add	r3, r2
 800d532:	330c      	adds	r3, #12
 800d534:	89fa      	ldrh	r2, [r7, #14]
 800d536:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800d538:	89fb      	ldrh	r3, [r7, #14]
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d105      	bne.n	800d54a <dec_lock+0x5a>
 800d53e:	4a09      	ldr	r2, [pc, #36]	; (800d564 <dec_lock+0x74>)
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	011b      	lsls	r3, r3, #4
 800d544:	4413      	add	r3, r2
 800d546:	2200      	movs	r2, #0
 800d548:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800d54a:	2300      	movs	r3, #0
 800d54c:	737b      	strb	r3, [r7, #13]
 800d54e:	e001      	b.n	800d554 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800d550:	2302      	movs	r3, #2
 800d552:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800d554:	7b7b      	ldrb	r3, [r7, #13]
}
 800d556:	4618      	mov	r0, r3
 800d558:	3714      	adds	r7, #20
 800d55a:	46bd      	mov	sp, r7
 800d55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d560:	4770      	bx	lr
 800d562:	bf00      	nop
 800d564:	20007b74 	.word	0x20007b74

0800d568 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800d568:	b480      	push	{r7}
 800d56a:	b085      	sub	sp, #20
 800d56c:	af00      	add	r7, sp, #0
 800d56e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800d570:	2300      	movs	r3, #0
 800d572:	60fb      	str	r3, [r7, #12]
 800d574:	e010      	b.n	800d598 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d576:	4a0d      	ldr	r2, [pc, #52]	; (800d5ac <clear_lock+0x44>)
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	011b      	lsls	r3, r3, #4
 800d57c:	4413      	add	r3, r2
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	687a      	ldr	r2, [r7, #4]
 800d582:	429a      	cmp	r2, r3
 800d584:	d105      	bne.n	800d592 <clear_lock+0x2a>
 800d586:	4a09      	ldr	r2, [pc, #36]	; (800d5ac <clear_lock+0x44>)
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	011b      	lsls	r3, r3, #4
 800d58c:	4413      	add	r3, r2
 800d58e:	2200      	movs	r2, #0
 800d590:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	3301      	adds	r3, #1
 800d596:	60fb      	str	r3, [r7, #12]
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	2b01      	cmp	r3, #1
 800d59c:	d9eb      	bls.n	800d576 <clear_lock+0xe>
	}
}
 800d59e:	bf00      	nop
 800d5a0:	3714      	adds	r7, #20
 800d5a2:	46bd      	mov	sp, r7
 800d5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a8:	4770      	bx	lr
 800d5aa:	bf00      	nop
 800d5ac:	20007b74 	.word	0x20007b74

0800d5b0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800d5b0:	b580      	push	{r7, lr}
 800d5b2:	b086      	sub	sp, #24
 800d5b4:	af00      	add	r7, sp, #0
 800d5b6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800d5b8:	2300      	movs	r3, #0
 800d5ba:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	78db      	ldrb	r3, [r3, #3]
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d034      	beq.n	800d62e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5c8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	7858      	ldrb	r0, [r3, #1]
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800d5d4:	2301      	movs	r3, #1
 800d5d6:	697a      	ldr	r2, [r7, #20]
 800d5d8:	f7ff fd40 	bl	800d05c <disk_write>
 800d5dc:	4603      	mov	r3, r0
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d002      	beq.n	800d5e8 <sync_window+0x38>
			res = FR_DISK_ERR;
 800d5e2:	2301      	movs	r3, #1
 800d5e4:	73fb      	strb	r3, [r7, #15]
 800d5e6:	e022      	b.n	800d62e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	2200      	movs	r2, #0
 800d5ec:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5f2:	697a      	ldr	r2, [r7, #20]
 800d5f4:	1ad2      	subs	r2, r2, r3
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5fa:	429a      	cmp	r2, r3
 800d5fc:	d217      	bcs.n	800d62e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	789b      	ldrb	r3, [r3, #2]
 800d602:	613b      	str	r3, [r7, #16]
 800d604:	e010      	b.n	800d628 <sync_window+0x78>
					wsect += fs->fsize;
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d60a:	697a      	ldr	r2, [r7, #20]
 800d60c:	4413      	add	r3, r2
 800d60e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	7858      	ldrb	r0, [r3, #1]
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800d61a:	2301      	movs	r3, #1
 800d61c:	697a      	ldr	r2, [r7, #20]
 800d61e:	f7ff fd1d 	bl	800d05c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d622:	693b      	ldr	r3, [r7, #16]
 800d624:	3b01      	subs	r3, #1
 800d626:	613b      	str	r3, [r7, #16]
 800d628:	693b      	ldr	r3, [r7, #16]
 800d62a:	2b01      	cmp	r3, #1
 800d62c:	d8eb      	bhi.n	800d606 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800d62e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d630:	4618      	mov	r0, r3
 800d632:	3718      	adds	r7, #24
 800d634:	46bd      	mov	sp, r7
 800d636:	bd80      	pop	{r7, pc}

0800d638 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800d638:	b580      	push	{r7, lr}
 800d63a:	b084      	sub	sp, #16
 800d63c:	af00      	add	r7, sp, #0
 800d63e:	6078      	str	r0, [r7, #4]
 800d640:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800d642:	2300      	movs	r3, #0
 800d644:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d64a:	683a      	ldr	r2, [r7, #0]
 800d64c:	429a      	cmp	r2, r3
 800d64e:	d01b      	beq.n	800d688 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800d650:	6878      	ldr	r0, [r7, #4]
 800d652:	f7ff ffad 	bl	800d5b0 <sync_window>
 800d656:	4603      	mov	r3, r0
 800d658:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800d65a:	7bfb      	ldrb	r3, [r7, #15]
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d113      	bne.n	800d688 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	7858      	ldrb	r0, [r3, #1]
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800d66a:	2301      	movs	r3, #1
 800d66c:	683a      	ldr	r2, [r7, #0]
 800d66e:	f7ff fcd5 	bl	800d01c <disk_read>
 800d672:	4603      	mov	r3, r0
 800d674:	2b00      	cmp	r3, #0
 800d676:	d004      	beq.n	800d682 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800d678:	f04f 33ff 	mov.w	r3, #4294967295
 800d67c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800d67e:	2301      	movs	r3, #1
 800d680:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	683a      	ldr	r2, [r7, #0]
 800d686:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	return res;
 800d688:	7bfb      	ldrb	r3, [r7, #15]
}
 800d68a:	4618      	mov	r0, r3
 800d68c:	3710      	adds	r7, #16
 800d68e:	46bd      	mov	sp, r7
 800d690:	bd80      	pop	{r7, pc}
	...

0800d694 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800d694:	b580      	push	{r7, lr}
 800d696:	b084      	sub	sp, #16
 800d698:	af00      	add	r7, sp, #0
 800d69a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800d69c:	6878      	ldr	r0, [r7, #4]
 800d69e:	f7ff ff87 	bl	800d5b0 <sync_window>
 800d6a2:	4603      	mov	r3, r0
 800d6a4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d6a6:	7bfb      	ldrb	r3, [r7, #15]
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d159      	bne.n	800d760 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	781b      	ldrb	r3, [r3, #0]
 800d6b0:	2b03      	cmp	r3, #3
 800d6b2:	d149      	bne.n	800d748 <sync_fs+0xb4>
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	791b      	ldrb	r3, [r3, #4]
 800d6b8:	2b01      	cmp	r3, #1
 800d6ba:	d145      	bne.n	800d748 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	899b      	ldrh	r3, [r3, #12]
 800d6c6:	461a      	mov	r2, r3
 800d6c8:	2100      	movs	r1, #0
 800d6ca:	f7ff fda8 	bl	800d21e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	333c      	adds	r3, #60	; 0x3c
 800d6d2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d6d6:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800d6da:	4618      	mov	r0, r3
 800d6dc:	f7ff fd37 	bl	800d14e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	333c      	adds	r3, #60	; 0x3c
 800d6e4:	4921      	ldr	r1, [pc, #132]	; (800d76c <sync_fs+0xd8>)
 800d6e6:	4618      	mov	r0, r3
 800d6e8:	f7ff fd4c 	bl	800d184 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	333c      	adds	r3, #60	; 0x3c
 800d6f0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d6f4:	491e      	ldr	r1, [pc, #120]	; (800d770 <sync_fs+0xdc>)
 800d6f6:	4618      	mov	r0, r3
 800d6f8:	f7ff fd44 	bl	800d184 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	333c      	adds	r3, #60	; 0x3c
 800d700:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	699b      	ldr	r3, [r3, #24]
 800d708:	4619      	mov	r1, r3
 800d70a:	4610      	mov	r0, r2
 800d70c:	f7ff fd3a 	bl	800d184 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	333c      	adds	r3, #60	; 0x3c
 800d714:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	695b      	ldr	r3, [r3, #20]
 800d71c:	4619      	mov	r1, r3
 800d71e:	4610      	mov	r0, r2
 800d720:	f7ff fd30 	bl	800d184 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d728:	1c5a      	adds	r2, r3, #1
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	639a      	str	r2, [r3, #56]	; 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	7858      	ldrb	r0, [r3, #1]
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d73c:	2301      	movs	r3, #1
 800d73e:	f7ff fc8d 	bl	800d05c <disk_write>
			fs->fsi_flag = 0;
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	2200      	movs	r2, #0
 800d746:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	785b      	ldrb	r3, [r3, #1]
 800d74c:	2200      	movs	r2, #0
 800d74e:	2100      	movs	r1, #0
 800d750:	4618      	mov	r0, r3
 800d752:	f7ff fca3 	bl	800d09c <disk_ioctl>
 800d756:	4603      	mov	r3, r0
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d001      	beq.n	800d760 <sync_fs+0xcc>
 800d75c:	2301      	movs	r3, #1
 800d75e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800d760:	7bfb      	ldrb	r3, [r7, #15]
}
 800d762:	4618      	mov	r0, r3
 800d764:	3710      	adds	r7, #16
 800d766:	46bd      	mov	sp, r7
 800d768:	bd80      	pop	{r7, pc}
 800d76a:	bf00      	nop
 800d76c:	41615252 	.word	0x41615252
 800d770:	61417272 	.word	0x61417272

0800d774 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800d774:	b480      	push	{r7}
 800d776:	b083      	sub	sp, #12
 800d778:	af00      	add	r7, sp, #0
 800d77a:	6078      	str	r0, [r7, #4]
 800d77c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800d77e:	683b      	ldr	r3, [r7, #0]
 800d780:	3b02      	subs	r3, #2
 800d782:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	6a1b      	ldr	r3, [r3, #32]
 800d788:	3b02      	subs	r3, #2
 800d78a:	683a      	ldr	r2, [r7, #0]
 800d78c:	429a      	cmp	r2, r3
 800d78e:	d301      	bcc.n	800d794 <clust2sect+0x20>
 800d790:	2300      	movs	r3, #0
 800d792:	e008      	b.n	800d7a6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	895b      	ldrh	r3, [r3, #10]
 800d798:	461a      	mov	r2, r3
 800d79a:	683b      	ldr	r3, [r7, #0]
 800d79c:	fb03 f202 	mul.w	r2, r3, r2
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7a4:	4413      	add	r3, r2
}
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	370c      	adds	r7, #12
 800d7aa:	46bd      	mov	sp, r7
 800d7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b0:	4770      	bx	lr

0800d7b2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800d7b2:	b580      	push	{r7, lr}
 800d7b4:	b086      	sub	sp, #24
 800d7b6:	af00      	add	r7, sp, #0
 800d7b8:	6078      	str	r0, [r7, #4]
 800d7ba:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d7c2:	683b      	ldr	r3, [r7, #0]
 800d7c4:	2b01      	cmp	r3, #1
 800d7c6:	d904      	bls.n	800d7d2 <get_fat+0x20>
 800d7c8:	693b      	ldr	r3, [r7, #16]
 800d7ca:	6a1b      	ldr	r3, [r3, #32]
 800d7cc:	683a      	ldr	r2, [r7, #0]
 800d7ce:	429a      	cmp	r2, r3
 800d7d0:	d302      	bcc.n	800d7d8 <get_fat+0x26>
		val = 1;	/* Internal error */
 800d7d2:	2301      	movs	r3, #1
 800d7d4:	617b      	str	r3, [r7, #20]
 800d7d6:	e0b7      	b.n	800d948 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800d7d8:	f04f 33ff 	mov.w	r3, #4294967295
 800d7dc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800d7de:	693b      	ldr	r3, [r7, #16]
 800d7e0:	781b      	ldrb	r3, [r3, #0]
 800d7e2:	2b02      	cmp	r3, #2
 800d7e4:	d05a      	beq.n	800d89c <get_fat+0xea>
 800d7e6:	2b03      	cmp	r3, #3
 800d7e8:	d07d      	beq.n	800d8e6 <get_fat+0x134>
 800d7ea:	2b01      	cmp	r3, #1
 800d7ec:	f040 80a2 	bne.w	800d934 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800d7f0:	683b      	ldr	r3, [r7, #0]
 800d7f2:	60fb      	str	r3, [r7, #12]
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	085b      	lsrs	r3, r3, #1
 800d7f8:	68fa      	ldr	r2, [r7, #12]
 800d7fa:	4413      	add	r3, r2
 800d7fc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d7fe:	693b      	ldr	r3, [r7, #16]
 800d800:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d802:	693b      	ldr	r3, [r7, #16]
 800d804:	899b      	ldrh	r3, [r3, #12]
 800d806:	4619      	mov	r1, r3
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	fbb3 f3f1 	udiv	r3, r3, r1
 800d80e:	4413      	add	r3, r2
 800d810:	4619      	mov	r1, r3
 800d812:	6938      	ldr	r0, [r7, #16]
 800d814:	f7ff ff10 	bl	800d638 <move_window>
 800d818:	4603      	mov	r3, r0
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	f040 808d 	bne.w	800d93a <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	1c5a      	adds	r2, r3, #1
 800d824:	60fa      	str	r2, [r7, #12]
 800d826:	693a      	ldr	r2, [r7, #16]
 800d828:	8992      	ldrh	r2, [r2, #12]
 800d82a:	fbb3 f1f2 	udiv	r1, r3, r2
 800d82e:	fb02 f201 	mul.w	r2, r2, r1
 800d832:	1a9b      	subs	r3, r3, r2
 800d834:	693a      	ldr	r2, [r7, #16]
 800d836:	4413      	add	r3, r2
 800d838:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d83c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d83e:	693b      	ldr	r3, [r7, #16]
 800d840:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d842:	693b      	ldr	r3, [r7, #16]
 800d844:	899b      	ldrh	r3, [r3, #12]
 800d846:	4619      	mov	r1, r3
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	fbb3 f3f1 	udiv	r3, r3, r1
 800d84e:	4413      	add	r3, r2
 800d850:	4619      	mov	r1, r3
 800d852:	6938      	ldr	r0, [r7, #16]
 800d854:	f7ff fef0 	bl	800d638 <move_window>
 800d858:	4603      	mov	r3, r0
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d16f      	bne.n	800d93e <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800d85e:	693b      	ldr	r3, [r7, #16]
 800d860:	899b      	ldrh	r3, [r3, #12]
 800d862:	461a      	mov	r2, r3
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	fbb3 f1f2 	udiv	r1, r3, r2
 800d86a:	fb02 f201 	mul.w	r2, r2, r1
 800d86e:	1a9b      	subs	r3, r3, r2
 800d870:	693a      	ldr	r2, [r7, #16]
 800d872:	4413      	add	r3, r2
 800d874:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d878:	021b      	lsls	r3, r3, #8
 800d87a:	461a      	mov	r2, r3
 800d87c:	68bb      	ldr	r3, [r7, #8]
 800d87e:	4313      	orrs	r3, r2
 800d880:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800d882:	683b      	ldr	r3, [r7, #0]
 800d884:	f003 0301 	and.w	r3, r3, #1
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d002      	beq.n	800d892 <get_fat+0xe0>
 800d88c:	68bb      	ldr	r3, [r7, #8]
 800d88e:	091b      	lsrs	r3, r3, #4
 800d890:	e002      	b.n	800d898 <get_fat+0xe6>
 800d892:	68bb      	ldr	r3, [r7, #8]
 800d894:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d898:	617b      	str	r3, [r7, #20]
			break;
 800d89a:	e055      	b.n	800d948 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d89c:	693b      	ldr	r3, [r7, #16]
 800d89e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8a0:	693b      	ldr	r3, [r7, #16]
 800d8a2:	899b      	ldrh	r3, [r3, #12]
 800d8a4:	085b      	lsrs	r3, r3, #1
 800d8a6:	b29b      	uxth	r3, r3
 800d8a8:	4619      	mov	r1, r3
 800d8aa:	683b      	ldr	r3, [r7, #0]
 800d8ac:	fbb3 f3f1 	udiv	r3, r3, r1
 800d8b0:	4413      	add	r3, r2
 800d8b2:	4619      	mov	r1, r3
 800d8b4:	6938      	ldr	r0, [r7, #16]
 800d8b6:	f7ff febf 	bl	800d638 <move_window>
 800d8ba:	4603      	mov	r3, r0
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d140      	bne.n	800d942 <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800d8c0:	693b      	ldr	r3, [r7, #16]
 800d8c2:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800d8c6:	683b      	ldr	r3, [r7, #0]
 800d8c8:	005b      	lsls	r3, r3, #1
 800d8ca:	693a      	ldr	r2, [r7, #16]
 800d8cc:	8992      	ldrh	r2, [r2, #12]
 800d8ce:	fbb3 f0f2 	udiv	r0, r3, r2
 800d8d2:	fb02 f200 	mul.w	r2, r2, r0
 800d8d6:	1a9b      	subs	r3, r3, r2
 800d8d8:	440b      	add	r3, r1
 800d8da:	4618      	mov	r0, r3
 800d8dc:	f7ff fbfc 	bl	800d0d8 <ld_word>
 800d8e0:	4603      	mov	r3, r0
 800d8e2:	617b      	str	r3, [r7, #20]
			break;
 800d8e4:	e030      	b.n	800d948 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d8e6:	693b      	ldr	r3, [r7, #16]
 800d8e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8ea:	693b      	ldr	r3, [r7, #16]
 800d8ec:	899b      	ldrh	r3, [r3, #12]
 800d8ee:	089b      	lsrs	r3, r3, #2
 800d8f0:	b29b      	uxth	r3, r3
 800d8f2:	4619      	mov	r1, r3
 800d8f4:	683b      	ldr	r3, [r7, #0]
 800d8f6:	fbb3 f3f1 	udiv	r3, r3, r1
 800d8fa:	4413      	add	r3, r2
 800d8fc:	4619      	mov	r1, r3
 800d8fe:	6938      	ldr	r0, [r7, #16]
 800d900:	f7ff fe9a 	bl	800d638 <move_window>
 800d904:	4603      	mov	r3, r0
 800d906:	2b00      	cmp	r3, #0
 800d908:	d11d      	bne.n	800d946 <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800d90a:	693b      	ldr	r3, [r7, #16]
 800d90c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800d910:	683b      	ldr	r3, [r7, #0]
 800d912:	009b      	lsls	r3, r3, #2
 800d914:	693a      	ldr	r2, [r7, #16]
 800d916:	8992      	ldrh	r2, [r2, #12]
 800d918:	fbb3 f0f2 	udiv	r0, r3, r2
 800d91c:	fb02 f200 	mul.w	r2, r2, r0
 800d920:	1a9b      	subs	r3, r3, r2
 800d922:	440b      	add	r3, r1
 800d924:	4618      	mov	r0, r3
 800d926:	f7ff fbef 	bl	800d108 <ld_dword>
 800d92a:	4603      	mov	r3, r0
 800d92c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800d930:	617b      	str	r3, [r7, #20]
			break;
 800d932:	e009      	b.n	800d948 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800d934:	2301      	movs	r3, #1
 800d936:	617b      	str	r3, [r7, #20]
 800d938:	e006      	b.n	800d948 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d93a:	bf00      	nop
 800d93c:	e004      	b.n	800d948 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d93e:	bf00      	nop
 800d940:	e002      	b.n	800d948 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d942:	bf00      	nop
 800d944:	e000      	b.n	800d948 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d946:	bf00      	nop
		}
	}

	return val;
 800d948:	697b      	ldr	r3, [r7, #20]
}
 800d94a:	4618      	mov	r0, r3
 800d94c:	3718      	adds	r7, #24
 800d94e:	46bd      	mov	sp, r7
 800d950:	bd80      	pop	{r7, pc}

0800d952 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800d952:	b590      	push	{r4, r7, lr}
 800d954:	b089      	sub	sp, #36	; 0x24
 800d956:	af00      	add	r7, sp, #0
 800d958:	60f8      	str	r0, [r7, #12]
 800d95a:	60b9      	str	r1, [r7, #8]
 800d95c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800d95e:	2302      	movs	r3, #2
 800d960:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800d962:	68bb      	ldr	r3, [r7, #8]
 800d964:	2b01      	cmp	r3, #1
 800d966:	f240 8106 	bls.w	800db76 <put_fat+0x224>
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	6a1b      	ldr	r3, [r3, #32]
 800d96e:	68ba      	ldr	r2, [r7, #8]
 800d970:	429a      	cmp	r2, r3
 800d972:	f080 8100 	bcs.w	800db76 <put_fat+0x224>
		switch (fs->fs_type) {
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	781b      	ldrb	r3, [r3, #0]
 800d97a:	2b02      	cmp	r3, #2
 800d97c:	f000 8088 	beq.w	800da90 <put_fat+0x13e>
 800d980:	2b03      	cmp	r3, #3
 800d982:	f000 80b0 	beq.w	800dae6 <put_fat+0x194>
 800d986:	2b01      	cmp	r3, #1
 800d988:	f040 80f5 	bne.w	800db76 <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800d98c:	68bb      	ldr	r3, [r7, #8]
 800d98e:	61bb      	str	r3, [r7, #24]
 800d990:	69bb      	ldr	r3, [r7, #24]
 800d992:	085b      	lsrs	r3, r3, #1
 800d994:	69ba      	ldr	r2, [r7, #24]
 800d996:	4413      	add	r3, r2
 800d998:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	899b      	ldrh	r3, [r3, #12]
 800d9a2:	4619      	mov	r1, r3
 800d9a4:	69bb      	ldr	r3, [r7, #24]
 800d9a6:	fbb3 f3f1 	udiv	r3, r3, r1
 800d9aa:	4413      	add	r3, r2
 800d9ac:	4619      	mov	r1, r3
 800d9ae:	68f8      	ldr	r0, [r7, #12]
 800d9b0:	f7ff fe42 	bl	800d638 <move_window>
 800d9b4:	4603      	mov	r3, r0
 800d9b6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d9b8:	7ffb      	ldrb	r3, [r7, #31]
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	f040 80d4 	bne.w	800db68 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800d9c6:	69bb      	ldr	r3, [r7, #24]
 800d9c8:	1c5a      	adds	r2, r3, #1
 800d9ca:	61ba      	str	r2, [r7, #24]
 800d9cc:	68fa      	ldr	r2, [r7, #12]
 800d9ce:	8992      	ldrh	r2, [r2, #12]
 800d9d0:	fbb3 f0f2 	udiv	r0, r3, r2
 800d9d4:	fb02 f200 	mul.w	r2, r2, r0
 800d9d8:	1a9b      	subs	r3, r3, r2
 800d9da:	440b      	add	r3, r1
 800d9dc:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800d9de:	68bb      	ldr	r3, [r7, #8]
 800d9e0:	f003 0301 	and.w	r3, r3, #1
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d00d      	beq.n	800da04 <put_fat+0xb2>
 800d9e8:	697b      	ldr	r3, [r7, #20]
 800d9ea:	781b      	ldrb	r3, [r3, #0]
 800d9ec:	b25b      	sxtb	r3, r3
 800d9ee:	f003 030f 	and.w	r3, r3, #15
 800d9f2:	b25a      	sxtb	r2, r3
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	b2db      	uxtb	r3, r3
 800d9f8:	011b      	lsls	r3, r3, #4
 800d9fa:	b25b      	sxtb	r3, r3
 800d9fc:	4313      	orrs	r3, r2
 800d9fe:	b25b      	sxtb	r3, r3
 800da00:	b2db      	uxtb	r3, r3
 800da02:	e001      	b.n	800da08 <put_fat+0xb6>
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	b2db      	uxtb	r3, r3
 800da08:	697a      	ldr	r2, [r7, #20]
 800da0a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	2201      	movs	r2, #1
 800da10:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	899b      	ldrh	r3, [r3, #12]
 800da1a:	4619      	mov	r1, r3
 800da1c:	69bb      	ldr	r3, [r7, #24]
 800da1e:	fbb3 f3f1 	udiv	r3, r3, r1
 800da22:	4413      	add	r3, r2
 800da24:	4619      	mov	r1, r3
 800da26:	68f8      	ldr	r0, [r7, #12]
 800da28:	f7ff fe06 	bl	800d638 <move_window>
 800da2c:	4603      	mov	r3, r0
 800da2e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800da30:	7ffb      	ldrb	r3, [r7, #31]
 800da32:	2b00      	cmp	r3, #0
 800da34:	f040 809a 	bne.w	800db6c <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	899b      	ldrh	r3, [r3, #12]
 800da42:	461a      	mov	r2, r3
 800da44:	69bb      	ldr	r3, [r7, #24]
 800da46:	fbb3 f0f2 	udiv	r0, r3, r2
 800da4a:	fb02 f200 	mul.w	r2, r2, r0
 800da4e:	1a9b      	subs	r3, r3, r2
 800da50:	440b      	add	r3, r1
 800da52:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800da54:	68bb      	ldr	r3, [r7, #8]
 800da56:	f003 0301 	and.w	r3, r3, #1
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d003      	beq.n	800da66 <put_fat+0x114>
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	091b      	lsrs	r3, r3, #4
 800da62:	b2db      	uxtb	r3, r3
 800da64:	e00e      	b.n	800da84 <put_fat+0x132>
 800da66:	697b      	ldr	r3, [r7, #20]
 800da68:	781b      	ldrb	r3, [r3, #0]
 800da6a:	b25b      	sxtb	r3, r3
 800da6c:	f023 030f 	bic.w	r3, r3, #15
 800da70:	b25a      	sxtb	r2, r3
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	0a1b      	lsrs	r3, r3, #8
 800da76:	b25b      	sxtb	r3, r3
 800da78:	f003 030f 	and.w	r3, r3, #15
 800da7c:	b25b      	sxtb	r3, r3
 800da7e:	4313      	orrs	r3, r2
 800da80:	b25b      	sxtb	r3, r3
 800da82:	b2db      	uxtb	r3, r3
 800da84:	697a      	ldr	r2, [r7, #20]
 800da86:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	2201      	movs	r2, #1
 800da8c:	70da      	strb	r2, [r3, #3]
			break;
 800da8e:	e072      	b.n	800db76 <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	899b      	ldrh	r3, [r3, #12]
 800da98:	085b      	lsrs	r3, r3, #1
 800da9a:	b29b      	uxth	r3, r3
 800da9c:	4619      	mov	r1, r3
 800da9e:	68bb      	ldr	r3, [r7, #8]
 800daa0:	fbb3 f3f1 	udiv	r3, r3, r1
 800daa4:	4413      	add	r3, r2
 800daa6:	4619      	mov	r1, r3
 800daa8:	68f8      	ldr	r0, [r7, #12]
 800daaa:	f7ff fdc5 	bl	800d638 <move_window>
 800daae:	4603      	mov	r3, r0
 800dab0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800dab2:	7ffb      	ldrb	r3, [r7, #31]
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d15b      	bne.n	800db70 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800dabe:	68bb      	ldr	r3, [r7, #8]
 800dac0:	005b      	lsls	r3, r3, #1
 800dac2:	68fa      	ldr	r2, [r7, #12]
 800dac4:	8992      	ldrh	r2, [r2, #12]
 800dac6:	fbb3 f0f2 	udiv	r0, r3, r2
 800daca:	fb02 f200 	mul.w	r2, r2, r0
 800dace:	1a9b      	subs	r3, r3, r2
 800dad0:	440b      	add	r3, r1
 800dad2:	687a      	ldr	r2, [r7, #4]
 800dad4:	b292      	uxth	r2, r2
 800dad6:	4611      	mov	r1, r2
 800dad8:	4618      	mov	r0, r3
 800dada:	f7ff fb38 	bl	800d14e <st_word>
			fs->wflag = 1;
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	2201      	movs	r2, #1
 800dae2:	70da      	strb	r2, [r3, #3]
			break;
 800dae4:	e047      	b.n	800db76 <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	899b      	ldrh	r3, [r3, #12]
 800daee:	089b      	lsrs	r3, r3, #2
 800daf0:	b29b      	uxth	r3, r3
 800daf2:	4619      	mov	r1, r3
 800daf4:	68bb      	ldr	r3, [r7, #8]
 800daf6:	fbb3 f3f1 	udiv	r3, r3, r1
 800dafa:	4413      	add	r3, r2
 800dafc:	4619      	mov	r1, r3
 800dafe:	68f8      	ldr	r0, [r7, #12]
 800db00:	f7ff fd9a 	bl	800d638 <move_window>
 800db04:	4603      	mov	r3, r0
 800db06:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800db08:	7ffb      	ldrb	r3, [r7, #31]
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d132      	bne.n	800db74 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800db1a:	68bb      	ldr	r3, [r7, #8]
 800db1c:	009b      	lsls	r3, r3, #2
 800db1e:	68fa      	ldr	r2, [r7, #12]
 800db20:	8992      	ldrh	r2, [r2, #12]
 800db22:	fbb3 f0f2 	udiv	r0, r3, r2
 800db26:	fb02 f200 	mul.w	r2, r2, r0
 800db2a:	1a9b      	subs	r3, r3, r2
 800db2c:	440b      	add	r3, r1
 800db2e:	4618      	mov	r0, r3
 800db30:	f7ff faea 	bl	800d108 <ld_dword>
 800db34:	4603      	mov	r3, r0
 800db36:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800db3a:	4323      	orrs	r3, r4
 800db3c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800db44:	68bb      	ldr	r3, [r7, #8]
 800db46:	009b      	lsls	r3, r3, #2
 800db48:	68fa      	ldr	r2, [r7, #12]
 800db4a:	8992      	ldrh	r2, [r2, #12]
 800db4c:	fbb3 f0f2 	udiv	r0, r3, r2
 800db50:	fb02 f200 	mul.w	r2, r2, r0
 800db54:	1a9b      	subs	r3, r3, r2
 800db56:	440b      	add	r3, r1
 800db58:	6879      	ldr	r1, [r7, #4]
 800db5a:	4618      	mov	r0, r3
 800db5c:	f7ff fb12 	bl	800d184 <st_dword>
			fs->wflag = 1;
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	2201      	movs	r2, #1
 800db64:	70da      	strb	r2, [r3, #3]
			break;
 800db66:	e006      	b.n	800db76 <put_fat+0x224>
			if (res != FR_OK) break;
 800db68:	bf00      	nop
 800db6a:	e004      	b.n	800db76 <put_fat+0x224>
			if (res != FR_OK) break;
 800db6c:	bf00      	nop
 800db6e:	e002      	b.n	800db76 <put_fat+0x224>
			if (res != FR_OK) break;
 800db70:	bf00      	nop
 800db72:	e000      	b.n	800db76 <put_fat+0x224>
			if (res != FR_OK) break;
 800db74:	bf00      	nop
		}
	}
	return res;
 800db76:	7ffb      	ldrb	r3, [r7, #31]
}
 800db78:	4618      	mov	r0, r3
 800db7a:	3724      	adds	r7, #36	; 0x24
 800db7c:	46bd      	mov	sp, r7
 800db7e:	bd90      	pop	{r4, r7, pc}

0800db80 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800db80:	b580      	push	{r7, lr}
 800db82:	b088      	sub	sp, #32
 800db84:	af00      	add	r7, sp, #0
 800db86:	60f8      	str	r0, [r7, #12]
 800db88:	60b9      	str	r1, [r7, #8]
 800db8a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800db8c:	2300      	movs	r3, #0
 800db8e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800db96:	68bb      	ldr	r3, [r7, #8]
 800db98:	2b01      	cmp	r3, #1
 800db9a:	d904      	bls.n	800dba6 <remove_chain+0x26>
 800db9c:	69bb      	ldr	r3, [r7, #24]
 800db9e:	6a1b      	ldr	r3, [r3, #32]
 800dba0:	68ba      	ldr	r2, [r7, #8]
 800dba2:	429a      	cmp	r2, r3
 800dba4:	d301      	bcc.n	800dbaa <remove_chain+0x2a>
 800dba6:	2302      	movs	r3, #2
 800dba8:	e04b      	b.n	800dc42 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d00c      	beq.n	800dbca <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800dbb0:	f04f 32ff 	mov.w	r2, #4294967295
 800dbb4:	6879      	ldr	r1, [r7, #4]
 800dbb6:	69b8      	ldr	r0, [r7, #24]
 800dbb8:	f7ff fecb 	bl	800d952 <put_fat>
 800dbbc:	4603      	mov	r3, r0
 800dbbe:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800dbc0:	7ffb      	ldrb	r3, [r7, #31]
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d001      	beq.n	800dbca <remove_chain+0x4a>
 800dbc6:	7ffb      	ldrb	r3, [r7, #31]
 800dbc8:	e03b      	b.n	800dc42 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800dbca:	68b9      	ldr	r1, [r7, #8]
 800dbcc:	68f8      	ldr	r0, [r7, #12]
 800dbce:	f7ff fdf0 	bl	800d7b2 <get_fat>
 800dbd2:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800dbd4:	697b      	ldr	r3, [r7, #20]
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d031      	beq.n	800dc3e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800dbda:	697b      	ldr	r3, [r7, #20]
 800dbdc:	2b01      	cmp	r3, #1
 800dbde:	d101      	bne.n	800dbe4 <remove_chain+0x64>
 800dbe0:	2302      	movs	r3, #2
 800dbe2:	e02e      	b.n	800dc42 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800dbe4:	697b      	ldr	r3, [r7, #20]
 800dbe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbea:	d101      	bne.n	800dbf0 <remove_chain+0x70>
 800dbec:	2301      	movs	r3, #1
 800dbee:	e028      	b.n	800dc42 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800dbf0:	2200      	movs	r2, #0
 800dbf2:	68b9      	ldr	r1, [r7, #8]
 800dbf4:	69b8      	ldr	r0, [r7, #24]
 800dbf6:	f7ff feac 	bl	800d952 <put_fat>
 800dbfa:	4603      	mov	r3, r0
 800dbfc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800dbfe:	7ffb      	ldrb	r3, [r7, #31]
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d001      	beq.n	800dc08 <remove_chain+0x88>
 800dc04:	7ffb      	ldrb	r3, [r7, #31]
 800dc06:	e01c      	b.n	800dc42 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800dc08:	69bb      	ldr	r3, [r7, #24]
 800dc0a:	699a      	ldr	r2, [r3, #24]
 800dc0c:	69bb      	ldr	r3, [r7, #24]
 800dc0e:	6a1b      	ldr	r3, [r3, #32]
 800dc10:	3b02      	subs	r3, #2
 800dc12:	429a      	cmp	r2, r3
 800dc14:	d20b      	bcs.n	800dc2e <remove_chain+0xae>
			fs->free_clst++;
 800dc16:	69bb      	ldr	r3, [r7, #24]
 800dc18:	699b      	ldr	r3, [r3, #24]
 800dc1a:	1c5a      	adds	r2, r3, #1
 800dc1c:	69bb      	ldr	r3, [r7, #24]
 800dc1e:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800dc20:	69bb      	ldr	r3, [r7, #24]
 800dc22:	791b      	ldrb	r3, [r3, #4]
 800dc24:	f043 0301 	orr.w	r3, r3, #1
 800dc28:	b2da      	uxtb	r2, r3
 800dc2a:	69bb      	ldr	r3, [r7, #24]
 800dc2c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800dc2e:	697b      	ldr	r3, [r7, #20]
 800dc30:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800dc32:	69bb      	ldr	r3, [r7, #24]
 800dc34:	6a1b      	ldr	r3, [r3, #32]
 800dc36:	68ba      	ldr	r2, [r7, #8]
 800dc38:	429a      	cmp	r2, r3
 800dc3a:	d3c6      	bcc.n	800dbca <remove_chain+0x4a>
 800dc3c:	e000      	b.n	800dc40 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800dc3e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800dc40:	2300      	movs	r3, #0
}
 800dc42:	4618      	mov	r0, r3
 800dc44:	3720      	adds	r7, #32
 800dc46:	46bd      	mov	sp, r7
 800dc48:	bd80      	pop	{r7, pc}

0800dc4a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800dc4a:	b580      	push	{r7, lr}
 800dc4c:	b088      	sub	sp, #32
 800dc4e:	af00      	add	r7, sp, #0
 800dc50:	6078      	str	r0, [r7, #4]
 800dc52:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800dc5a:	683b      	ldr	r3, [r7, #0]
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d10d      	bne.n	800dc7c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800dc60:	693b      	ldr	r3, [r7, #16]
 800dc62:	695b      	ldr	r3, [r3, #20]
 800dc64:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800dc66:	69bb      	ldr	r3, [r7, #24]
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d004      	beq.n	800dc76 <create_chain+0x2c>
 800dc6c:	693b      	ldr	r3, [r7, #16]
 800dc6e:	6a1b      	ldr	r3, [r3, #32]
 800dc70:	69ba      	ldr	r2, [r7, #24]
 800dc72:	429a      	cmp	r2, r3
 800dc74:	d31b      	bcc.n	800dcae <create_chain+0x64>
 800dc76:	2301      	movs	r3, #1
 800dc78:	61bb      	str	r3, [r7, #24]
 800dc7a:	e018      	b.n	800dcae <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800dc7c:	6839      	ldr	r1, [r7, #0]
 800dc7e:	6878      	ldr	r0, [r7, #4]
 800dc80:	f7ff fd97 	bl	800d7b2 <get_fat>
 800dc84:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	2b01      	cmp	r3, #1
 800dc8a:	d801      	bhi.n	800dc90 <create_chain+0x46>
 800dc8c:	2301      	movs	r3, #1
 800dc8e:	e070      	b.n	800dd72 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc96:	d101      	bne.n	800dc9c <create_chain+0x52>
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	e06a      	b.n	800dd72 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800dc9c:	693b      	ldr	r3, [r7, #16]
 800dc9e:	6a1b      	ldr	r3, [r3, #32]
 800dca0:	68fa      	ldr	r2, [r7, #12]
 800dca2:	429a      	cmp	r2, r3
 800dca4:	d201      	bcs.n	800dcaa <create_chain+0x60>
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	e063      	b.n	800dd72 <create_chain+0x128>
		scl = clst;
 800dcaa:	683b      	ldr	r3, [r7, #0]
 800dcac:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800dcae:	69bb      	ldr	r3, [r7, #24]
 800dcb0:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800dcb2:	69fb      	ldr	r3, [r7, #28]
 800dcb4:	3301      	adds	r3, #1
 800dcb6:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800dcb8:	693b      	ldr	r3, [r7, #16]
 800dcba:	6a1b      	ldr	r3, [r3, #32]
 800dcbc:	69fa      	ldr	r2, [r7, #28]
 800dcbe:	429a      	cmp	r2, r3
 800dcc0:	d307      	bcc.n	800dcd2 <create_chain+0x88>
				ncl = 2;
 800dcc2:	2302      	movs	r3, #2
 800dcc4:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800dcc6:	69fa      	ldr	r2, [r7, #28]
 800dcc8:	69bb      	ldr	r3, [r7, #24]
 800dcca:	429a      	cmp	r2, r3
 800dccc:	d901      	bls.n	800dcd2 <create_chain+0x88>
 800dcce:	2300      	movs	r3, #0
 800dcd0:	e04f      	b.n	800dd72 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800dcd2:	69f9      	ldr	r1, [r7, #28]
 800dcd4:	6878      	ldr	r0, [r7, #4]
 800dcd6:	f7ff fd6c 	bl	800d7b2 <get_fat>
 800dcda:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d00e      	beq.n	800dd00 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	2b01      	cmp	r3, #1
 800dce6:	d003      	beq.n	800dcf0 <create_chain+0xa6>
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dcee:	d101      	bne.n	800dcf4 <create_chain+0xaa>
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	e03e      	b.n	800dd72 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800dcf4:	69fa      	ldr	r2, [r7, #28]
 800dcf6:	69bb      	ldr	r3, [r7, #24]
 800dcf8:	429a      	cmp	r2, r3
 800dcfa:	d1da      	bne.n	800dcb2 <create_chain+0x68>
 800dcfc:	2300      	movs	r3, #0
 800dcfe:	e038      	b.n	800dd72 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800dd00:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800dd02:	f04f 32ff 	mov.w	r2, #4294967295
 800dd06:	69f9      	ldr	r1, [r7, #28]
 800dd08:	6938      	ldr	r0, [r7, #16]
 800dd0a:	f7ff fe22 	bl	800d952 <put_fat>
 800dd0e:	4603      	mov	r3, r0
 800dd10:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800dd12:	7dfb      	ldrb	r3, [r7, #23]
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d109      	bne.n	800dd2c <create_chain+0xe2>
 800dd18:	683b      	ldr	r3, [r7, #0]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d006      	beq.n	800dd2c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800dd1e:	69fa      	ldr	r2, [r7, #28]
 800dd20:	6839      	ldr	r1, [r7, #0]
 800dd22:	6938      	ldr	r0, [r7, #16]
 800dd24:	f7ff fe15 	bl	800d952 <put_fat>
 800dd28:	4603      	mov	r3, r0
 800dd2a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800dd2c:	7dfb      	ldrb	r3, [r7, #23]
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d116      	bne.n	800dd60 <create_chain+0x116>
		fs->last_clst = ncl;
 800dd32:	693b      	ldr	r3, [r7, #16]
 800dd34:	69fa      	ldr	r2, [r7, #28]
 800dd36:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800dd38:	693b      	ldr	r3, [r7, #16]
 800dd3a:	699a      	ldr	r2, [r3, #24]
 800dd3c:	693b      	ldr	r3, [r7, #16]
 800dd3e:	6a1b      	ldr	r3, [r3, #32]
 800dd40:	3b02      	subs	r3, #2
 800dd42:	429a      	cmp	r2, r3
 800dd44:	d804      	bhi.n	800dd50 <create_chain+0x106>
 800dd46:	693b      	ldr	r3, [r7, #16]
 800dd48:	699b      	ldr	r3, [r3, #24]
 800dd4a:	1e5a      	subs	r2, r3, #1
 800dd4c:	693b      	ldr	r3, [r7, #16]
 800dd4e:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800dd50:	693b      	ldr	r3, [r7, #16]
 800dd52:	791b      	ldrb	r3, [r3, #4]
 800dd54:	f043 0301 	orr.w	r3, r3, #1
 800dd58:	b2da      	uxtb	r2, r3
 800dd5a:	693b      	ldr	r3, [r7, #16]
 800dd5c:	711a      	strb	r2, [r3, #4]
 800dd5e:	e007      	b.n	800dd70 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800dd60:	7dfb      	ldrb	r3, [r7, #23]
 800dd62:	2b01      	cmp	r3, #1
 800dd64:	d102      	bne.n	800dd6c <create_chain+0x122>
 800dd66:	f04f 33ff 	mov.w	r3, #4294967295
 800dd6a:	e000      	b.n	800dd6e <create_chain+0x124>
 800dd6c:	2301      	movs	r3, #1
 800dd6e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800dd70:	69fb      	ldr	r3, [r7, #28]
}
 800dd72:	4618      	mov	r0, r3
 800dd74:	3720      	adds	r7, #32
 800dd76:	46bd      	mov	sp, r7
 800dd78:	bd80      	pop	{r7, pc}

0800dd7a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800dd7a:	b480      	push	{r7}
 800dd7c:	b087      	sub	sp, #28
 800dd7e:	af00      	add	r7, sp, #0
 800dd80:	6078      	str	r0, [r7, #4]
 800dd82:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd8e:	3304      	adds	r3, #4
 800dd90:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	899b      	ldrh	r3, [r3, #12]
 800dd96:	461a      	mov	r2, r3
 800dd98:	683b      	ldr	r3, [r7, #0]
 800dd9a:	fbb3 f3f2 	udiv	r3, r3, r2
 800dd9e:	68fa      	ldr	r2, [r7, #12]
 800dda0:	8952      	ldrh	r2, [r2, #10]
 800dda2:	fbb3 f3f2 	udiv	r3, r3, r2
 800dda6:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800dda8:	693b      	ldr	r3, [r7, #16]
 800ddaa:	1d1a      	adds	r2, r3, #4
 800ddac:	613a      	str	r2, [r7, #16]
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800ddb2:	68bb      	ldr	r3, [r7, #8]
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d101      	bne.n	800ddbc <clmt_clust+0x42>
 800ddb8:	2300      	movs	r3, #0
 800ddba:	e010      	b.n	800ddde <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800ddbc:	697a      	ldr	r2, [r7, #20]
 800ddbe:	68bb      	ldr	r3, [r7, #8]
 800ddc0:	429a      	cmp	r2, r3
 800ddc2:	d307      	bcc.n	800ddd4 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800ddc4:	697a      	ldr	r2, [r7, #20]
 800ddc6:	68bb      	ldr	r3, [r7, #8]
 800ddc8:	1ad3      	subs	r3, r2, r3
 800ddca:	617b      	str	r3, [r7, #20]
 800ddcc:	693b      	ldr	r3, [r7, #16]
 800ddce:	3304      	adds	r3, #4
 800ddd0:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ddd2:	e7e9      	b.n	800dda8 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800ddd4:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800ddd6:	693b      	ldr	r3, [r7, #16]
 800ddd8:	681a      	ldr	r2, [r3, #0]
 800ddda:	697b      	ldr	r3, [r7, #20]
 800dddc:	4413      	add	r3, r2
}
 800ddde:	4618      	mov	r0, r3
 800dde0:	371c      	adds	r7, #28
 800dde2:	46bd      	mov	sp, r7
 800dde4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde8:	4770      	bx	lr

0800ddea <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800ddea:	b580      	push	{r7, lr}
 800ddec:	b086      	sub	sp, #24
 800ddee:	af00      	add	r7, sp, #0
 800ddf0:	6078      	str	r0, [r7, #4]
 800ddf2:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800ddfa:	683b      	ldr	r3, [r7, #0]
 800ddfc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800de00:	d204      	bcs.n	800de0c <dir_sdi+0x22>
 800de02:	683b      	ldr	r3, [r7, #0]
 800de04:	f003 031f 	and.w	r3, r3, #31
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d001      	beq.n	800de10 <dir_sdi+0x26>
		return FR_INT_ERR;
 800de0c:	2302      	movs	r3, #2
 800de0e:	e071      	b.n	800def4 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	683a      	ldr	r2, [r7, #0]
 800de14:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	689b      	ldr	r3, [r3, #8]
 800de1a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800de1c:	697b      	ldr	r3, [r7, #20]
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d106      	bne.n	800de30 <dir_sdi+0x46>
 800de22:	693b      	ldr	r3, [r7, #16]
 800de24:	781b      	ldrb	r3, [r3, #0]
 800de26:	2b02      	cmp	r3, #2
 800de28:	d902      	bls.n	800de30 <dir_sdi+0x46>
		clst = fs->dirbase;
 800de2a:	693b      	ldr	r3, [r7, #16]
 800de2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de2e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800de30:	697b      	ldr	r3, [r7, #20]
 800de32:	2b00      	cmp	r3, #0
 800de34:	d10c      	bne.n	800de50 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800de36:	683b      	ldr	r3, [r7, #0]
 800de38:	095b      	lsrs	r3, r3, #5
 800de3a:	693a      	ldr	r2, [r7, #16]
 800de3c:	8912      	ldrh	r2, [r2, #8]
 800de3e:	4293      	cmp	r3, r2
 800de40:	d301      	bcc.n	800de46 <dir_sdi+0x5c>
 800de42:	2302      	movs	r3, #2
 800de44:	e056      	b.n	800def4 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800de46:	693b      	ldr	r3, [r7, #16]
 800de48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	61da      	str	r2, [r3, #28]
 800de4e:	e02d      	b.n	800deac <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800de50:	693b      	ldr	r3, [r7, #16]
 800de52:	895b      	ldrh	r3, [r3, #10]
 800de54:	461a      	mov	r2, r3
 800de56:	693b      	ldr	r3, [r7, #16]
 800de58:	899b      	ldrh	r3, [r3, #12]
 800de5a:	fb03 f302 	mul.w	r3, r3, r2
 800de5e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800de60:	e019      	b.n	800de96 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	6979      	ldr	r1, [r7, #20]
 800de66:	4618      	mov	r0, r3
 800de68:	f7ff fca3 	bl	800d7b2 <get_fat>
 800de6c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800de6e:	697b      	ldr	r3, [r7, #20]
 800de70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de74:	d101      	bne.n	800de7a <dir_sdi+0x90>
 800de76:	2301      	movs	r3, #1
 800de78:	e03c      	b.n	800def4 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800de7a:	697b      	ldr	r3, [r7, #20]
 800de7c:	2b01      	cmp	r3, #1
 800de7e:	d904      	bls.n	800de8a <dir_sdi+0xa0>
 800de80:	693b      	ldr	r3, [r7, #16]
 800de82:	6a1b      	ldr	r3, [r3, #32]
 800de84:	697a      	ldr	r2, [r7, #20]
 800de86:	429a      	cmp	r2, r3
 800de88:	d301      	bcc.n	800de8e <dir_sdi+0xa4>
 800de8a:	2302      	movs	r3, #2
 800de8c:	e032      	b.n	800def4 <dir_sdi+0x10a>
			ofs -= csz;
 800de8e:	683a      	ldr	r2, [r7, #0]
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	1ad3      	subs	r3, r2, r3
 800de94:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800de96:	683a      	ldr	r2, [r7, #0]
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	429a      	cmp	r2, r3
 800de9c:	d2e1      	bcs.n	800de62 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800de9e:	6979      	ldr	r1, [r7, #20]
 800dea0:	6938      	ldr	r0, [r7, #16]
 800dea2:	f7ff fc67 	bl	800d774 <clust2sect>
 800dea6:	4602      	mov	r2, r0
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	697a      	ldr	r2, [r7, #20]
 800deb0:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	69db      	ldr	r3, [r3, #28]
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d101      	bne.n	800debe <dir_sdi+0xd4>
 800deba:	2302      	movs	r3, #2
 800debc:	e01a      	b.n	800def4 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	69da      	ldr	r2, [r3, #28]
 800dec2:	693b      	ldr	r3, [r7, #16]
 800dec4:	899b      	ldrh	r3, [r3, #12]
 800dec6:	4619      	mov	r1, r3
 800dec8:	683b      	ldr	r3, [r7, #0]
 800deca:	fbb3 f3f1 	udiv	r3, r3, r1
 800dece:	441a      	add	r2, r3
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800ded4:	693b      	ldr	r3, [r7, #16]
 800ded6:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800deda:	693b      	ldr	r3, [r7, #16]
 800dedc:	899b      	ldrh	r3, [r3, #12]
 800dede:	461a      	mov	r2, r3
 800dee0:	683b      	ldr	r3, [r7, #0]
 800dee2:	fbb3 f0f2 	udiv	r0, r3, r2
 800dee6:	fb02 f200 	mul.w	r2, r2, r0
 800deea:	1a9b      	subs	r3, r3, r2
 800deec:	18ca      	adds	r2, r1, r3
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800def2:	2300      	movs	r3, #0
}
 800def4:	4618      	mov	r0, r3
 800def6:	3718      	adds	r7, #24
 800def8:	46bd      	mov	sp, r7
 800defa:	bd80      	pop	{r7, pc}

0800defc <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800defc:	b580      	push	{r7, lr}
 800defe:	b086      	sub	sp, #24
 800df00:	af00      	add	r7, sp, #0
 800df02:	6078      	str	r0, [r7, #4]
 800df04:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	695b      	ldr	r3, [r3, #20]
 800df10:	3320      	adds	r3, #32
 800df12:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	69db      	ldr	r3, [r3, #28]
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d003      	beq.n	800df24 <dir_next+0x28>
 800df1c:	68bb      	ldr	r3, [r7, #8]
 800df1e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800df22:	d301      	bcc.n	800df28 <dir_next+0x2c>
 800df24:	2304      	movs	r3, #4
 800df26:	e0bb      	b.n	800e0a0 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	899b      	ldrh	r3, [r3, #12]
 800df2c:	461a      	mov	r2, r3
 800df2e:	68bb      	ldr	r3, [r7, #8]
 800df30:	fbb3 f1f2 	udiv	r1, r3, r2
 800df34:	fb02 f201 	mul.w	r2, r2, r1
 800df38:	1a9b      	subs	r3, r3, r2
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	f040 809d 	bne.w	800e07a <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	69db      	ldr	r3, [r3, #28]
 800df44:	1c5a      	adds	r2, r3, #1
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	699b      	ldr	r3, [r3, #24]
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d10b      	bne.n	800df6a <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800df52:	68bb      	ldr	r3, [r7, #8]
 800df54:	095b      	lsrs	r3, r3, #5
 800df56:	68fa      	ldr	r2, [r7, #12]
 800df58:	8912      	ldrh	r2, [r2, #8]
 800df5a:	4293      	cmp	r3, r2
 800df5c:	f0c0 808d 	bcc.w	800e07a <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	2200      	movs	r2, #0
 800df64:	61da      	str	r2, [r3, #28]
 800df66:	2304      	movs	r3, #4
 800df68:	e09a      	b.n	800e0a0 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	899b      	ldrh	r3, [r3, #12]
 800df6e:	461a      	mov	r2, r3
 800df70:	68bb      	ldr	r3, [r7, #8]
 800df72:	fbb3 f3f2 	udiv	r3, r3, r2
 800df76:	68fa      	ldr	r2, [r7, #12]
 800df78:	8952      	ldrh	r2, [r2, #10]
 800df7a:	3a01      	subs	r2, #1
 800df7c:	4013      	ands	r3, r2
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d17b      	bne.n	800e07a <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800df82:	687a      	ldr	r2, [r7, #4]
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	699b      	ldr	r3, [r3, #24]
 800df88:	4619      	mov	r1, r3
 800df8a:	4610      	mov	r0, r2
 800df8c:	f7ff fc11 	bl	800d7b2 <get_fat>
 800df90:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800df92:	697b      	ldr	r3, [r7, #20]
 800df94:	2b01      	cmp	r3, #1
 800df96:	d801      	bhi.n	800df9c <dir_next+0xa0>
 800df98:	2302      	movs	r3, #2
 800df9a:	e081      	b.n	800e0a0 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800df9c:	697b      	ldr	r3, [r7, #20]
 800df9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfa2:	d101      	bne.n	800dfa8 <dir_next+0xac>
 800dfa4:	2301      	movs	r3, #1
 800dfa6:	e07b      	b.n	800e0a0 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	6a1b      	ldr	r3, [r3, #32]
 800dfac:	697a      	ldr	r2, [r7, #20]
 800dfae:	429a      	cmp	r2, r3
 800dfb0:	d359      	bcc.n	800e066 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800dfb2:	683b      	ldr	r3, [r7, #0]
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d104      	bne.n	800dfc2 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	2200      	movs	r2, #0
 800dfbc:	61da      	str	r2, [r3, #28]
 800dfbe:	2304      	movs	r3, #4
 800dfc0:	e06e      	b.n	800e0a0 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800dfc2:	687a      	ldr	r2, [r7, #4]
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	699b      	ldr	r3, [r3, #24]
 800dfc8:	4619      	mov	r1, r3
 800dfca:	4610      	mov	r0, r2
 800dfcc:	f7ff fe3d 	bl	800dc4a <create_chain>
 800dfd0:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800dfd2:	697b      	ldr	r3, [r7, #20]
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d101      	bne.n	800dfdc <dir_next+0xe0>
 800dfd8:	2307      	movs	r3, #7
 800dfda:	e061      	b.n	800e0a0 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800dfdc:	697b      	ldr	r3, [r7, #20]
 800dfde:	2b01      	cmp	r3, #1
 800dfe0:	d101      	bne.n	800dfe6 <dir_next+0xea>
 800dfe2:	2302      	movs	r3, #2
 800dfe4:	e05c      	b.n	800e0a0 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800dfe6:	697b      	ldr	r3, [r7, #20]
 800dfe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfec:	d101      	bne.n	800dff2 <dir_next+0xf6>
 800dfee:	2301      	movs	r3, #1
 800dff0:	e056      	b.n	800e0a0 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800dff2:	68f8      	ldr	r0, [r7, #12]
 800dff4:	f7ff fadc 	bl	800d5b0 <sync_window>
 800dff8:	4603      	mov	r3, r0
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d001      	beq.n	800e002 <dir_next+0x106>
 800dffe:	2301      	movs	r3, #1
 800e000:	e04e      	b.n	800e0a0 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	899b      	ldrh	r3, [r3, #12]
 800e00c:	461a      	mov	r2, r3
 800e00e:	2100      	movs	r1, #0
 800e010:	f7ff f905 	bl	800d21e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e014:	2300      	movs	r3, #0
 800e016:	613b      	str	r3, [r7, #16]
 800e018:	6979      	ldr	r1, [r7, #20]
 800e01a:	68f8      	ldr	r0, [r7, #12]
 800e01c:	f7ff fbaa 	bl	800d774 <clust2sect>
 800e020:	4602      	mov	r2, r0
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	639a      	str	r2, [r3, #56]	; 0x38
 800e026:	e012      	b.n	800e04e <dir_next+0x152>
						fs->wflag = 1;
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	2201      	movs	r2, #1
 800e02c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800e02e:	68f8      	ldr	r0, [r7, #12]
 800e030:	f7ff fabe 	bl	800d5b0 <sync_window>
 800e034:	4603      	mov	r3, r0
 800e036:	2b00      	cmp	r3, #0
 800e038:	d001      	beq.n	800e03e <dir_next+0x142>
 800e03a:	2301      	movs	r3, #1
 800e03c:	e030      	b.n	800e0a0 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e03e:	693b      	ldr	r3, [r7, #16]
 800e040:	3301      	adds	r3, #1
 800e042:	613b      	str	r3, [r7, #16]
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e048:	1c5a      	adds	r2, r3, #1
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	639a      	str	r2, [r3, #56]	; 0x38
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	895b      	ldrh	r3, [r3, #10]
 800e052:	461a      	mov	r2, r3
 800e054:	693b      	ldr	r3, [r7, #16]
 800e056:	4293      	cmp	r3, r2
 800e058:	d3e6      	bcc.n	800e028 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e05e:	693b      	ldr	r3, [r7, #16]
 800e060:	1ad2      	subs	r2, r2, r3
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	639a      	str	r2, [r3, #56]	; 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	697a      	ldr	r2, [r7, #20]
 800e06a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800e06c:	6979      	ldr	r1, [r7, #20]
 800e06e:	68f8      	ldr	r0, [r7, #12]
 800e070:	f7ff fb80 	bl	800d774 <clust2sect>
 800e074:	4602      	mov	r2, r0
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	68ba      	ldr	r2, [r7, #8]
 800e07e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	899b      	ldrh	r3, [r3, #12]
 800e08a:	461a      	mov	r2, r3
 800e08c:	68bb      	ldr	r3, [r7, #8]
 800e08e:	fbb3 f0f2 	udiv	r0, r3, r2
 800e092:	fb02 f200 	mul.w	r2, r2, r0
 800e096:	1a9b      	subs	r3, r3, r2
 800e098:	18ca      	adds	r2, r1, r3
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e09e:	2300      	movs	r3, #0
}
 800e0a0:	4618      	mov	r0, r3
 800e0a2:	3718      	adds	r7, #24
 800e0a4:	46bd      	mov	sp, r7
 800e0a6:	bd80      	pop	{r7, pc}

0800e0a8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800e0a8:	b580      	push	{r7, lr}
 800e0aa:	b086      	sub	sp, #24
 800e0ac:	af00      	add	r7, sp, #0
 800e0ae:	6078      	str	r0, [r7, #4]
 800e0b0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800e0b8:	2100      	movs	r1, #0
 800e0ba:	6878      	ldr	r0, [r7, #4]
 800e0bc:	f7ff fe95 	bl	800ddea <dir_sdi>
 800e0c0:	4603      	mov	r3, r0
 800e0c2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e0c4:	7dfb      	ldrb	r3, [r7, #23]
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d12b      	bne.n	800e122 <dir_alloc+0x7a>
		n = 0;
 800e0ca:	2300      	movs	r3, #0
 800e0cc:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	69db      	ldr	r3, [r3, #28]
 800e0d2:	4619      	mov	r1, r3
 800e0d4:	68f8      	ldr	r0, [r7, #12]
 800e0d6:	f7ff faaf 	bl	800d638 <move_window>
 800e0da:	4603      	mov	r3, r0
 800e0dc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e0de:	7dfb      	ldrb	r3, [r7, #23]
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d11d      	bne.n	800e120 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	6a1b      	ldr	r3, [r3, #32]
 800e0e8:	781b      	ldrb	r3, [r3, #0]
 800e0ea:	2be5      	cmp	r3, #229	; 0xe5
 800e0ec:	d004      	beq.n	800e0f8 <dir_alloc+0x50>
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	6a1b      	ldr	r3, [r3, #32]
 800e0f2:	781b      	ldrb	r3, [r3, #0]
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d107      	bne.n	800e108 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800e0f8:	693b      	ldr	r3, [r7, #16]
 800e0fa:	3301      	adds	r3, #1
 800e0fc:	613b      	str	r3, [r7, #16]
 800e0fe:	693a      	ldr	r2, [r7, #16]
 800e100:	683b      	ldr	r3, [r7, #0]
 800e102:	429a      	cmp	r2, r3
 800e104:	d102      	bne.n	800e10c <dir_alloc+0x64>
 800e106:	e00c      	b.n	800e122 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800e108:	2300      	movs	r3, #0
 800e10a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800e10c:	2101      	movs	r1, #1
 800e10e:	6878      	ldr	r0, [r7, #4]
 800e110:	f7ff fef4 	bl	800defc <dir_next>
 800e114:	4603      	mov	r3, r0
 800e116:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800e118:	7dfb      	ldrb	r3, [r7, #23]
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d0d7      	beq.n	800e0ce <dir_alloc+0x26>
 800e11e:	e000      	b.n	800e122 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800e120:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800e122:	7dfb      	ldrb	r3, [r7, #23]
 800e124:	2b04      	cmp	r3, #4
 800e126:	d101      	bne.n	800e12c <dir_alloc+0x84>
 800e128:	2307      	movs	r3, #7
 800e12a:	75fb      	strb	r3, [r7, #23]
	return res;
 800e12c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e12e:	4618      	mov	r0, r3
 800e130:	3718      	adds	r7, #24
 800e132:	46bd      	mov	sp, r7
 800e134:	bd80      	pop	{r7, pc}

0800e136 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800e136:	b580      	push	{r7, lr}
 800e138:	b084      	sub	sp, #16
 800e13a:	af00      	add	r7, sp, #0
 800e13c:	6078      	str	r0, [r7, #4]
 800e13e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800e140:	683b      	ldr	r3, [r7, #0]
 800e142:	331a      	adds	r3, #26
 800e144:	4618      	mov	r0, r3
 800e146:	f7fe ffc7 	bl	800d0d8 <ld_word>
 800e14a:	4603      	mov	r3, r0
 800e14c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	781b      	ldrb	r3, [r3, #0]
 800e152:	2b03      	cmp	r3, #3
 800e154:	d109      	bne.n	800e16a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800e156:	683b      	ldr	r3, [r7, #0]
 800e158:	3314      	adds	r3, #20
 800e15a:	4618      	mov	r0, r3
 800e15c:	f7fe ffbc 	bl	800d0d8 <ld_word>
 800e160:	4603      	mov	r3, r0
 800e162:	041b      	lsls	r3, r3, #16
 800e164:	68fa      	ldr	r2, [r7, #12]
 800e166:	4313      	orrs	r3, r2
 800e168:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800e16a:	68fb      	ldr	r3, [r7, #12]
}
 800e16c:	4618      	mov	r0, r3
 800e16e:	3710      	adds	r7, #16
 800e170:	46bd      	mov	sp, r7
 800e172:	bd80      	pop	{r7, pc}

0800e174 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800e174:	b580      	push	{r7, lr}
 800e176:	b084      	sub	sp, #16
 800e178:	af00      	add	r7, sp, #0
 800e17a:	60f8      	str	r0, [r7, #12]
 800e17c:	60b9      	str	r1, [r7, #8]
 800e17e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800e180:	68bb      	ldr	r3, [r7, #8]
 800e182:	331a      	adds	r3, #26
 800e184:	687a      	ldr	r2, [r7, #4]
 800e186:	b292      	uxth	r2, r2
 800e188:	4611      	mov	r1, r2
 800e18a:	4618      	mov	r0, r3
 800e18c:	f7fe ffdf 	bl	800d14e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	781b      	ldrb	r3, [r3, #0]
 800e194:	2b03      	cmp	r3, #3
 800e196:	d109      	bne.n	800e1ac <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800e198:	68bb      	ldr	r3, [r7, #8]
 800e19a:	f103 0214 	add.w	r2, r3, #20
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	0c1b      	lsrs	r3, r3, #16
 800e1a2:	b29b      	uxth	r3, r3
 800e1a4:	4619      	mov	r1, r3
 800e1a6:	4610      	mov	r0, r2
 800e1a8:	f7fe ffd1 	bl	800d14e <st_word>
	}
}
 800e1ac:	bf00      	nop
 800e1ae:	3710      	adds	r7, #16
 800e1b0:	46bd      	mov	sp, r7
 800e1b2:	bd80      	pop	{r7, pc}

0800e1b4 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800e1b4:	b590      	push	{r4, r7, lr}
 800e1b6:	b087      	sub	sp, #28
 800e1b8:	af00      	add	r7, sp, #0
 800e1ba:	6078      	str	r0, [r7, #4]
 800e1bc:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800e1be:	683b      	ldr	r3, [r7, #0]
 800e1c0:	331a      	adds	r3, #26
 800e1c2:	4618      	mov	r0, r3
 800e1c4:	f7fe ff88 	bl	800d0d8 <ld_word>
 800e1c8:	4603      	mov	r3, r0
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d001      	beq.n	800e1d2 <cmp_lfn+0x1e>
 800e1ce:	2300      	movs	r3, #0
 800e1d0:	e059      	b.n	800e286 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800e1d2:	683b      	ldr	r3, [r7, #0]
 800e1d4:	781b      	ldrb	r3, [r3, #0]
 800e1d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e1da:	1e5a      	subs	r2, r3, #1
 800e1dc:	4613      	mov	r3, r2
 800e1de:	005b      	lsls	r3, r3, #1
 800e1e0:	4413      	add	r3, r2
 800e1e2:	009b      	lsls	r3, r3, #2
 800e1e4:	4413      	add	r3, r2
 800e1e6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e1e8:	2301      	movs	r3, #1
 800e1ea:	81fb      	strh	r3, [r7, #14]
 800e1ec:	2300      	movs	r3, #0
 800e1ee:	613b      	str	r3, [r7, #16]
 800e1f0:	e033      	b.n	800e25a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800e1f2:	4a27      	ldr	r2, [pc, #156]	; (800e290 <cmp_lfn+0xdc>)
 800e1f4:	693b      	ldr	r3, [r7, #16]
 800e1f6:	4413      	add	r3, r2
 800e1f8:	781b      	ldrb	r3, [r3, #0]
 800e1fa:	461a      	mov	r2, r3
 800e1fc:	683b      	ldr	r3, [r7, #0]
 800e1fe:	4413      	add	r3, r2
 800e200:	4618      	mov	r0, r3
 800e202:	f7fe ff69 	bl	800d0d8 <ld_word>
 800e206:	4603      	mov	r3, r0
 800e208:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800e20a:	89fb      	ldrh	r3, [r7, #14]
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d01a      	beq.n	800e246 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800e210:	697b      	ldr	r3, [r7, #20]
 800e212:	2bfe      	cmp	r3, #254	; 0xfe
 800e214:	d812      	bhi.n	800e23c <cmp_lfn+0x88>
 800e216:	89bb      	ldrh	r3, [r7, #12]
 800e218:	4618      	mov	r0, r3
 800e21a:	f002 fd23 	bl	8010c64 <ff_wtoupper>
 800e21e:	4603      	mov	r3, r0
 800e220:	461c      	mov	r4, r3
 800e222:	697b      	ldr	r3, [r7, #20]
 800e224:	1c5a      	adds	r2, r3, #1
 800e226:	617a      	str	r2, [r7, #20]
 800e228:	005b      	lsls	r3, r3, #1
 800e22a:	687a      	ldr	r2, [r7, #4]
 800e22c:	4413      	add	r3, r2
 800e22e:	881b      	ldrh	r3, [r3, #0]
 800e230:	4618      	mov	r0, r3
 800e232:	f002 fd17 	bl	8010c64 <ff_wtoupper>
 800e236:	4603      	mov	r3, r0
 800e238:	429c      	cmp	r4, r3
 800e23a:	d001      	beq.n	800e240 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800e23c:	2300      	movs	r3, #0
 800e23e:	e022      	b.n	800e286 <cmp_lfn+0xd2>
			}
			wc = uc;
 800e240:	89bb      	ldrh	r3, [r7, #12]
 800e242:	81fb      	strh	r3, [r7, #14]
 800e244:	e006      	b.n	800e254 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800e246:	89bb      	ldrh	r3, [r7, #12]
 800e248:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e24c:	4293      	cmp	r3, r2
 800e24e:	d001      	beq.n	800e254 <cmp_lfn+0xa0>
 800e250:	2300      	movs	r3, #0
 800e252:	e018      	b.n	800e286 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e254:	693b      	ldr	r3, [r7, #16]
 800e256:	3301      	adds	r3, #1
 800e258:	613b      	str	r3, [r7, #16]
 800e25a:	693b      	ldr	r3, [r7, #16]
 800e25c:	2b0c      	cmp	r3, #12
 800e25e:	d9c8      	bls.n	800e1f2 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800e260:	683b      	ldr	r3, [r7, #0]
 800e262:	781b      	ldrb	r3, [r3, #0]
 800e264:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d00b      	beq.n	800e284 <cmp_lfn+0xd0>
 800e26c:	89fb      	ldrh	r3, [r7, #14]
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d008      	beq.n	800e284 <cmp_lfn+0xd0>
 800e272:	697b      	ldr	r3, [r7, #20]
 800e274:	005b      	lsls	r3, r3, #1
 800e276:	687a      	ldr	r2, [r7, #4]
 800e278:	4413      	add	r3, r2
 800e27a:	881b      	ldrh	r3, [r3, #0]
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d001      	beq.n	800e284 <cmp_lfn+0xd0>
 800e280:	2300      	movs	r3, #0
 800e282:	e000      	b.n	800e286 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800e284:	2301      	movs	r3, #1
}
 800e286:	4618      	mov	r0, r3
 800e288:	371c      	adds	r7, #28
 800e28a:	46bd      	mov	sp, r7
 800e28c:	bd90      	pop	{r4, r7, pc}
 800e28e:	bf00      	nop
 800e290:	08016f3c 	.word	0x08016f3c

0800e294 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800e294:	b580      	push	{r7, lr}
 800e296:	b086      	sub	sp, #24
 800e298:	af00      	add	r7, sp, #0
 800e29a:	6078      	str	r0, [r7, #4]
 800e29c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800e29e:	683b      	ldr	r3, [r7, #0]
 800e2a0:	331a      	adds	r3, #26
 800e2a2:	4618      	mov	r0, r3
 800e2a4:	f7fe ff18 	bl	800d0d8 <ld_word>
 800e2a8:	4603      	mov	r3, r0
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d001      	beq.n	800e2b2 <pick_lfn+0x1e>
 800e2ae:	2300      	movs	r3, #0
 800e2b0:	e04d      	b.n	800e34e <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800e2b2:	683b      	ldr	r3, [r7, #0]
 800e2b4:	781b      	ldrb	r3, [r3, #0]
 800e2b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e2ba:	1e5a      	subs	r2, r3, #1
 800e2bc:	4613      	mov	r3, r2
 800e2be:	005b      	lsls	r3, r3, #1
 800e2c0:	4413      	add	r3, r2
 800e2c2:	009b      	lsls	r3, r3, #2
 800e2c4:	4413      	add	r3, r2
 800e2c6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e2c8:	2301      	movs	r3, #1
 800e2ca:	81fb      	strh	r3, [r7, #14]
 800e2cc:	2300      	movs	r3, #0
 800e2ce:	613b      	str	r3, [r7, #16]
 800e2d0:	e028      	b.n	800e324 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800e2d2:	4a21      	ldr	r2, [pc, #132]	; (800e358 <pick_lfn+0xc4>)
 800e2d4:	693b      	ldr	r3, [r7, #16]
 800e2d6:	4413      	add	r3, r2
 800e2d8:	781b      	ldrb	r3, [r3, #0]
 800e2da:	461a      	mov	r2, r3
 800e2dc:	683b      	ldr	r3, [r7, #0]
 800e2de:	4413      	add	r3, r2
 800e2e0:	4618      	mov	r0, r3
 800e2e2:	f7fe fef9 	bl	800d0d8 <ld_word>
 800e2e6:	4603      	mov	r3, r0
 800e2e8:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800e2ea:	89fb      	ldrh	r3, [r7, #14]
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d00f      	beq.n	800e310 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800e2f0:	697b      	ldr	r3, [r7, #20]
 800e2f2:	2bfe      	cmp	r3, #254	; 0xfe
 800e2f4:	d901      	bls.n	800e2fa <pick_lfn+0x66>
 800e2f6:	2300      	movs	r3, #0
 800e2f8:	e029      	b.n	800e34e <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800e2fa:	89bb      	ldrh	r3, [r7, #12]
 800e2fc:	81fb      	strh	r3, [r7, #14]
 800e2fe:	697b      	ldr	r3, [r7, #20]
 800e300:	1c5a      	adds	r2, r3, #1
 800e302:	617a      	str	r2, [r7, #20]
 800e304:	005b      	lsls	r3, r3, #1
 800e306:	687a      	ldr	r2, [r7, #4]
 800e308:	4413      	add	r3, r2
 800e30a:	89fa      	ldrh	r2, [r7, #14]
 800e30c:	801a      	strh	r2, [r3, #0]
 800e30e:	e006      	b.n	800e31e <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800e310:	89bb      	ldrh	r3, [r7, #12]
 800e312:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e316:	4293      	cmp	r3, r2
 800e318:	d001      	beq.n	800e31e <pick_lfn+0x8a>
 800e31a:	2300      	movs	r3, #0
 800e31c:	e017      	b.n	800e34e <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e31e:	693b      	ldr	r3, [r7, #16]
 800e320:	3301      	adds	r3, #1
 800e322:	613b      	str	r3, [r7, #16]
 800e324:	693b      	ldr	r3, [r7, #16]
 800e326:	2b0c      	cmp	r3, #12
 800e328:	d9d3      	bls.n	800e2d2 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800e32a:	683b      	ldr	r3, [r7, #0]
 800e32c:	781b      	ldrb	r3, [r3, #0]
 800e32e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e332:	2b00      	cmp	r3, #0
 800e334:	d00a      	beq.n	800e34c <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800e336:	697b      	ldr	r3, [r7, #20]
 800e338:	2bfe      	cmp	r3, #254	; 0xfe
 800e33a:	d901      	bls.n	800e340 <pick_lfn+0xac>
 800e33c:	2300      	movs	r3, #0
 800e33e:	e006      	b.n	800e34e <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800e340:	697b      	ldr	r3, [r7, #20]
 800e342:	005b      	lsls	r3, r3, #1
 800e344:	687a      	ldr	r2, [r7, #4]
 800e346:	4413      	add	r3, r2
 800e348:	2200      	movs	r2, #0
 800e34a:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800e34c:	2301      	movs	r3, #1
}
 800e34e:	4618      	mov	r0, r3
 800e350:	3718      	adds	r7, #24
 800e352:	46bd      	mov	sp, r7
 800e354:	bd80      	pop	{r7, pc}
 800e356:	bf00      	nop
 800e358:	08016f3c 	.word	0x08016f3c

0800e35c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800e35c:	b580      	push	{r7, lr}
 800e35e:	b088      	sub	sp, #32
 800e360:	af00      	add	r7, sp, #0
 800e362:	60f8      	str	r0, [r7, #12]
 800e364:	60b9      	str	r1, [r7, #8]
 800e366:	4611      	mov	r1, r2
 800e368:	461a      	mov	r2, r3
 800e36a:	460b      	mov	r3, r1
 800e36c:	71fb      	strb	r3, [r7, #7]
 800e36e:	4613      	mov	r3, r2
 800e370:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800e372:	68bb      	ldr	r3, [r7, #8]
 800e374:	330d      	adds	r3, #13
 800e376:	79ba      	ldrb	r2, [r7, #6]
 800e378:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800e37a:	68bb      	ldr	r3, [r7, #8]
 800e37c:	330b      	adds	r3, #11
 800e37e:	220f      	movs	r2, #15
 800e380:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800e382:	68bb      	ldr	r3, [r7, #8]
 800e384:	330c      	adds	r3, #12
 800e386:	2200      	movs	r2, #0
 800e388:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800e38a:	68bb      	ldr	r3, [r7, #8]
 800e38c:	331a      	adds	r3, #26
 800e38e:	2100      	movs	r1, #0
 800e390:	4618      	mov	r0, r3
 800e392:	f7fe fedc 	bl	800d14e <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800e396:	79fb      	ldrb	r3, [r7, #7]
 800e398:	1e5a      	subs	r2, r3, #1
 800e39a:	4613      	mov	r3, r2
 800e39c:	005b      	lsls	r3, r3, #1
 800e39e:	4413      	add	r3, r2
 800e3a0:	009b      	lsls	r3, r3, #2
 800e3a2:	4413      	add	r3, r2
 800e3a4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800e3a6:	2300      	movs	r3, #0
 800e3a8:	82fb      	strh	r3, [r7, #22]
 800e3aa:	2300      	movs	r3, #0
 800e3ac:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800e3ae:	8afb      	ldrh	r3, [r7, #22]
 800e3b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e3b4:	4293      	cmp	r3, r2
 800e3b6:	d007      	beq.n	800e3c8 <put_lfn+0x6c>
 800e3b8:	69fb      	ldr	r3, [r7, #28]
 800e3ba:	1c5a      	adds	r2, r3, #1
 800e3bc:	61fa      	str	r2, [r7, #28]
 800e3be:	005b      	lsls	r3, r3, #1
 800e3c0:	68fa      	ldr	r2, [r7, #12]
 800e3c2:	4413      	add	r3, r2
 800e3c4:	881b      	ldrh	r3, [r3, #0]
 800e3c6:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800e3c8:	4a17      	ldr	r2, [pc, #92]	; (800e428 <put_lfn+0xcc>)
 800e3ca:	69bb      	ldr	r3, [r7, #24]
 800e3cc:	4413      	add	r3, r2
 800e3ce:	781b      	ldrb	r3, [r3, #0]
 800e3d0:	461a      	mov	r2, r3
 800e3d2:	68bb      	ldr	r3, [r7, #8]
 800e3d4:	4413      	add	r3, r2
 800e3d6:	8afa      	ldrh	r2, [r7, #22]
 800e3d8:	4611      	mov	r1, r2
 800e3da:	4618      	mov	r0, r3
 800e3dc:	f7fe feb7 	bl	800d14e <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800e3e0:	8afb      	ldrh	r3, [r7, #22]
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d102      	bne.n	800e3ec <put_lfn+0x90>
 800e3e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e3ea:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800e3ec:	69bb      	ldr	r3, [r7, #24]
 800e3ee:	3301      	adds	r3, #1
 800e3f0:	61bb      	str	r3, [r7, #24]
 800e3f2:	69bb      	ldr	r3, [r7, #24]
 800e3f4:	2b0c      	cmp	r3, #12
 800e3f6:	d9da      	bls.n	800e3ae <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800e3f8:	8afb      	ldrh	r3, [r7, #22]
 800e3fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e3fe:	4293      	cmp	r3, r2
 800e400:	d006      	beq.n	800e410 <put_lfn+0xb4>
 800e402:	69fb      	ldr	r3, [r7, #28]
 800e404:	005b      	lsls	r3, r3, #1
 800e406:	68fa      	ldr	r2, [r7, #12]
 800e408:	4413      	add	r3, r2
 800e40a:	881b      	ldrh	r3, [r3, #0]
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d103      	bne.n	800e418 <put_lfn+0xbc>
 800e410:	79fb      	ldrb	r3, [r7, #7]
 800e412:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e416:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800e418:	68bb      	ldr	r3, [r7, #8]
 800e41a:	79fa      	ldrb	r2, [r7, #7]
 800e41c:	701a      	strb	r2, [r3, #0]
}
 800e41e:	bf00      	nop
 800e420:	3720      	adds	r7, #32
 800e422:	46bd      	mov	sp, r7
 800e424:	bd80      	pop	{r7, pc}
 800e426:	bf00      	nop
 800e428:	08016f3c 	.word	0x08016f3c

0800e42c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800e42c:	b580      	push	{r7, lr}
 800e42e:	b08c      	sub	sp, #48	; 0x30
 800e430:	af00      	add	r7, sp, #0
 800e432:	60f8      	str	r0, [r7, #12]
 800e434:	60b9      	str	r1, [r7, #8]
 800e436:	607a      	str	r2, [r7, #4]
 800e438:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800e43a:	220b      	movs	r2, #11
 800e43c:	68b9      	ldr	r1, [r7, #8]
 800e43e:	68f8      	ldr	r0, [r7, #12]
 800e440:	f7fe fecc 	bl	800d1dc <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800e444:	683b      	ldr	r3, [r7, #0]
 800e446:	2b05      	cmp	r3, #5
 800e448:	d92b      	bls.n	800e4a2 <gen_numname+0x76>
		sr = seq;
 800e44a:	683b      	ldr	r3, [r7, #0]
 800e44c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800e44e:	e022      	b.n	800e496 <gen_numname+0x6a>
			wc = *lfn++;
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	1c9a      	adds	r2, r3, #2
 800e454:	607a      	str	r2, [r7, #4]
 800e456:	881b      	ldrh	r3, [r3, #0]
 800e458:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800e45a:	2300      	movs	r3, #0
 800e45c:	62bb      	str	r3, [r7, #40]	; 0x28
 800e45e:	e017      	b.n	800e490 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800e460:	69fb      	ldr	r3, [r7, #28]
 800e462:	005a      	lsls	r2, r3, #1
 800e464:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e466:	f003 0301 	and.w	r3, r3, #1
 800e46a:	4413      	add	r3, r2
 800e46c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800e46e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e470:	085b      	lsrs	r3, r3, #1
 800e472:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800e474:	69fb      	ldr	r3, [r7, #28]
 800e476:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d005      	beq.n	800e48a <gen_numname+0x5e>
 800e47e:	69fb      	ldr	r3, [r7, #28]
 800e480:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800e484:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800e488:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800e48a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e48c:	3301      	adds	r3, #1
 800e48e:	62bb      	str	r3, [r7, #40]	; 0x28
 800e490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e492:	2b0f      	cmp	r3, #15
 800e494:	d9e4      	bls.n	800e460 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	881b      	ldrh	r3, [r3, #0]
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d1d8      	bne.n	800e450 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800e49e:	69fb      	ldr	r3, [r7, #28]
 800e4a0:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800e4a2:	2307      	movs	r3, #7
 800e4a4:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800e4a6:	683b      	ldr	r3, [r7, #0]
 800e4a8:	b2db      	uxtb	r3, r3
 800e4aa:	f003 030f 	and.w	r3, r3, #15
 800e4ae:	b2db      	uxtb	r3, r3
 800e4b0:	3330      	adds	r3, #48	; 0x30
 800e4b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800e4b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e4ba:	2b39      	cmp	r3, #57	; 0x39
 800e4bc:	d904      	bls.n	800e4c8 <gen_numname+0x9c>
 800e4be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e4c2:	3307      	adds	r3, #7
 800e4c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800e4c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4ca:	1e5a      	subs	r2, r3, #1
 800e4cc:	62ba      	str	r2, [r7, #40]	; 0x28
 800e4ce:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800e4d2:	4413      	add	r3, r2
 800e4d4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800e4d8:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800e4dc:	683b      	ldr	r3, [r7, #0]
 800e4de:	091b      	lsrs	r3, r3, #4
 800e4e0:	603b      	str	r3, [r7, #0]
	} while (seq);
 800e4e2:	683b      	ldr	r3, [r7, #0]
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d1de      	bne.n	800e4a6 <gen_numname+0x7a>
	ns[i] = '~';
 800e4e8:	f107 0214 	add.w	r2, r7, #20
 800e4ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4ee:	4413      	add	r3, r2
 800e4f0:	227e      	movs	r2, #126	; 0x7e
 800e4f2:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800e4f4:	2300      	movs	r3, #0
 800e4f6:	627b      	str	r3, [r7, #36]	; 0x24
 800e4f8:	e002      	b.n	800e500 <gen_numname+0xd4>
 800e4fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4fc:	3301      	adds	r3, #1
 800e4fe:	627b      	str	r3, [r7, #36]	; 0x24
 800e500:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e504:	429a      	cmp	r2, r3
 800e506:	d205      	bcs.n	800e514 <gen_numname+0xe8>
 800e508:	68fa      	ldr	r2, [r7, #12]
 800e50a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e50c:	4413      	add	r3, r2
 800e50e:	781b      	ldrb	r3, [r3, #0]
 800e510:	2b20      	cmp	r3, #32
 800e512:	d1f2      	bne.n	800e4fa <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800e514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e516:	2b07      	cmp	r3, #7
 800e518:	d808      	bhi.n	800e52c <gen_numname+0x100>
 800e51a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e51c:	1c5a      	adds	r2, r3, #1
 800e51e:	62ba      	str	r2, [r7, #40]	; 0x28
 800e520:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800e524:	4413      	add	r3, r2
 800e526:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800e52a:	e000      	b.n	800e52e <gen_numname+0x102>
 800e52c:	2120      	movs	r1, #32
 800e52e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e530:	1c5a      	adds	r2, r3, #1
 800e532:	627a      	str	r2, [r7, #36]	; 0x24
 800e534:	68fa      	ldr	r2, [r7, #12]
 800e536:	4413      	add	r3, r2
 800e538:	460a      	mov	r2, r1
 800e53a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800e53c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e53e:	2b07      	cmp	r3, #7
 800e540:	d9e8      	bls.n	800e514 <gen_numname+0xe8>
}
 800e542:	bf00      	nop
 800e544:	3730      	adds	r7, #48	; 0x30
 800e546:	46bd      	mov	sp, r7
 800e548:	bd80      	pop	{r7, pc}

0800e54a <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800e54a:	b480      	push	{r7}
 800e54c:	b085      	sub	sp, #20
 800e54e:	af00      	add	r7, sp, #0
 800e550:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800e552:	2300      	movs	r3, #0
 800e554:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800e556:	230b      	movs	r3, #11
 800e558:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800e55a:	7bfb      	ldrb	r3, [r7, #15]
 800e55c:	b2da      	uxtb	r2, r3
 800e55e:	0852      	lsrs	r2, r2, #1
 800e560:	01db      	lsls	r3, r3, #7
 800e562:	4313      	orrs	r3, r2
 800e564:	b2da      	uxtb	r2, r3
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	1c59      	adds	r1, r3, #1
 800e56a:	6079      	str	r1, [r7, #4]
 800e56c:	781b      	ldrb	r3, [r3, #0]
 800e56e:	4413      	add	r3, r2
 800e570:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800e572:	68bb      	ldr	r3, [r7, #8]
 800e574:	3b01      	subs	r3, #1
 800e576:	60bb      	str	r3, [r7, #8]
 800e578:	68bb      	ldr	r3, [r7, #8]
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d1ed      	bne.n	800e55a <sum_sfn+0x10>
	return sum;
 800e57e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e580:	4618      	mov	r0, r3
 800e582:	3714      	adds	r7, #20
 800e584:	46bd      	mov	sp, r7
 800e586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e58a:	4770      	bx	lr

0800e58c <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800e58c:	b580      	push	{r7, lr}
 800e58e:	b086      	sub	sp, #24
 800e590:	af00      	add	r7, sp, #0
 800e592:	6078      	str	r0, [r7, #4]
 800e594:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800e596:	2304      	movs	r3, #4
 800e598:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800e5a0:	23ff      	movs	r3, #255	; 0xff
 800e5a2:	757b      	strb	r3, [r7, #21]
 800e5a4:	23ff      	movs	r3, #255	; 0xff
 800e5a6:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800e5a8:	e081      	b.n	800e6ae <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	69db      	ldr	r3, [r3, #28]
 800e5ae:	4619      	mov	r1, r3
 800e5b0:	6938      	ldr	r0, [r7, #16]
 800e5b2:	f7ff f841 	bl	800d638 <move_window>
 800e5b6:	4603      	mov	r3, r0
 800e5b8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e5ba:	7dfb      	ldrb	r3, [r7, #23]
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d17c      	bne.n	800e6ba <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	6a1b      	ldr	r3, [r3, #32]
 800e5c4:	781b      	ldrb	r3, [r3, #0]
 800e5c6:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800e5c8:	7dbb      	ldrb	r3, [r7, #22]
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d102      	bne.n	800e5d4 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800e5ce:	2304      	movs	r3, #4
 800e5d0:	75fb      	strb	r3, [r7, #23]
 800e5d2:	e077      	b.n	800e6c4 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	6a1b      	ldr	r3, [r3, #32]
 800e5d8:	330b      	adds	r3, #11
 800e5da:	781b      	ldrb	r3, [r3, #0]
 800e5dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e5e0:	73fb      	strb	r3, [r7, #15]
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	7bfa      	ldrb	r2, [r7, #15]
 800e5e6:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800e5e8:	7dbb      	ldrb	r3, [r7, #22]
 800e5ea:	2be5      	cmp	r3, #229	; 0xe5
 800e5ec:	d00e      	beq.n	800e60c <dir_read+0x80>
 800e5ee:	7dbb      	ldrb	r3, [r7, #22]
 800e5f0:	2b2e      	cmp	r3, #46	; 0x2e
 800e5f2:	d00b      	beq.n	800e60c <dir_read+0x80>
 800e5f4:	7bfb      	ldrb	r3, [r7, #15]
 800e5f6:	f023 0320 	bic.w	r3, r3, #32
 800e5fa:	2b08      	cmp	r3, #8
 800e5fc:	bf0c      	ite	eq
 800e5fe:	2301      	moveq	r3, #1
 800e600:	2300      	movne	r3, #0
 800e602:	b2db      	uxtb	r3, r3
 800e604:	461a      	mov	r2, r3
 800e606:	683b      	ldr	r3, [r7, #0]
 800e608:	4293      	cmp	r3, r2
 800e60a:	d002      	beq.n	800e612 <dir_read+0x86>
				ord = 0xFF;
 800e60c:	23ff      	movs	r3, #255	; 0xff
 800e60e:	757b      	strb	r3, [r7, #21]
 800e610:	e044      	b.n	800e69c <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800e612:	7bfb      	ldrb	r3, [r7, #15]
 800e614:	2b0f      	cmp	r3, #15
 800e616:	d12f      	bne.n	800e678 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800e618:	7dbb      	ldrb	r3, [r7, #22]
 800e61a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d00d      	beq.n	800e63e <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	6a1b      	ldr	r3, [r3, #32]
 800e626:	7b5b      	ldrb	r3, [r3, #13]
 800e628:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800e62a:	7dbb      	ldrb	r3, [r7, #22]
 800e62c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e630:	75bb      	strb	r3, [r7, #22]
 800e632:	7dbb      	ldrb	r3, [r7, #22]
 800e634:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	695a      	ldr	r2, [r3, #20]
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800e63e:	7dba      	ldrb	r2, [r7, #22]
 800e640:	7d7b      	ldrb	r3, [r7, #21]
 800e642:	429a      	cmp	r2, r3
 800e644:	d115      	bne.n	800e672 <dir_read+0xe6>
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	6a1b      	ldr	r3, [r3, #32]
 800e64a:	330d      	adds	r3, #13
 800e64c:	781b      	ldrb	r3, [r3, #0]
 800e64e:	7d3a      	ldrb	r2, [r7, #20]
 800e650:	429a      	cmp	r2, r3
 800e652:	d10e      	bne.n	800e672 <dir_read+0xe6>
 800e654:	693b      	ldr	r3, [r7, #16]
 800e656:	691a      	ldr	r2, [r3, #16]
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	6a1b      	ldr	r3, [r3, #32]
 800e65c:	4619      	mov	r1, r3
 800e65e:	4610      	mov	r0, r2
 800e660:	f7ff fe18 	bl	800e294 <pick_lfn>
 800e664:	4603      	mov	r3, r0
 800e666:	2b00      	cmp	r3, #0
 800e668:	d003      	beq.n	800e672 <dir_read+0xe6>
 800e66a:	7d7b      	ldrb	r3, [r7, #21]
 800e66c:	3b01      	subs	r3, #1
 800e66e:	b2db      	uxtb	r3, r3
 800e670:	e000      	b.n	800e674 <dir_read+0xe8>
 800e672:	23ff      	movs	r3, #255	; 0xff
 800e674:	757b      	strb	r3, [r7, #21]
 800e676:	e011      	b.n	800e69c <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800e678:	7d7b      	ldrb	r3, [r7, #21]
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d109      	bne.n	800e692 <dir_read+0x106>
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	6a1b      	ldr	r3, [r3, #32]
 800e682:	4618      	mov	r0, r3
 800e684:	f7ff ff61 	bl	800e54a <sum_sfn>
 800e688:	4603      	mov	r3, r0
 800e68a:	461a      	mov	r2, r3
 800e68c:	7d3b      	ldrb	r3, [r7, #20]
 800e68e:	4293      	cmp	r3, r2
 800e690:	d015      	beq.n	800e6be <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	f04f 32ff 	mov.w	r2, #4294967295
 800e698:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 800e69a:	e010      	b.n	800e6be <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800e69c:	2100      	movs	r1, #0
 800e69e:	6878      	ldr	r0, [r7, #4]
 800e6a0:	f7ff fc2c 	bl	800defc <dir_next>
 800e6a4:	4603      	mov	r3, r0
 800e6a6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e6a8:	7dfb      	ldrb	r3, [r7, #23]
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d109      	bne.n	800e6c2 <dir_read+0x136>
	while (dp->sect) {
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	69db      	ldr	r3, [r3, #28]
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	f47f af79 	bne.w	800e5aa <dir_read+0x1e>
 800e6b8:	e004      	b.n	800e6c4 <dir_read+0x138>
		if (res != FR_OK) break;
 800e6ba:	bf00      	nop
 800e6bc:	e002      	b.n	800e6c4 <dir_read+0x138>
					break;
 800e6be:	bf00      	nop
 800e6c0:	e000      	b.n	800e6c4 <dir_read+0x138>
		if (res != FR_OK) break;
 800e6c2:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800e6c4:	7dfb      	ldrb	r3, [r7, #23]
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d002      	beq.n	800e6d0 <dir_read+0x144>
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	2200      	movs	r2, #0
 800e6ce:	61da      	str	r2, [r3, #28]
	return res;
 800e6d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800e6d2:	4618      	mov	r0, r3
 800e6d4:	3718      	adds	r7, #24
 800e6d6:	46bd      	mov	sp, r7
 800e6d8:	bd80      	pop	{r7, pc}

0800e6da <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800e6da:	b580      	push	{r7, lr}
 800e6dc:	b086      	sub	sp, #24
 800e6de:	af00      	add	r7, sp, #0
 800e6e0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800e6e8:	2100      	movs	r1, #0
 800e6ea:	6878      	ldr	r0, [r7, #4]
 800e6ec:	f7ff fb7d 	bl	800ddea <dir_sdi>
 800e6f0:	4603      	mov	r3, r0
 800e6f2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800e6f4:	7dfb      	ldrb	r3, [r7, #23]
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d001      	beq.n	800e6fe <dir_find+0x24>
 800e6fa:	7dfb      	ldrb	r3, [r7, #23]
 800e6fc:	e0a9      	b.n	800e852 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e6fe:	23ff      	movs	r3, #255	; 0xff
 800e700:	753b      	strb	r3, [r7, #20]
 800e702:	7d3b      	ldrb	r3, [r7, #20]
 800e704:	757b      	strb	r3, [r7, #21]
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	f04f 32ff 	mov.w	r2, #4294967295
 800e70c:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	69db      	ldr	r3, [r3, #28]
 800e712:	4619      	mov	r1, r3
 800e714:	6938      	ldr	r0, [r7, #16]
 800e716:	f7fe ff8f 	bl	800d638 <move_window>
 800e71a:	4603      	mov	r3, r0
 800e71c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e71e:	7dfb      	ldrb	r3, [r7, #23]
 800e720:	2b00      	cmp	r3, #0
 800e722:	f040 8090 	bne.w	800e846 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	6a1b      	ldr	r3, [r3, #32]
 800e72a:	781b      	ldrb	r3, [r3, #0]
 800e72c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800e72e:	7dbb      	ldrb	r3, [r7, #22]
 800e730:	2b00      	cmp	r3, #0
 800e732:	d102      	bne.n	800e73a <dir_find+0x60>
 800e734:	2304      	movs	r3, #4
 800e736:	75fb      	strb	r3, [r7, #23]
 800e738:	e08a      	b.n	800e850 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	6a1b      	ldr	r3, [r3, #32]
 800e73e:	330b      	adds	r3, #11
 800e740:	781b      	ldrb	r3, [r3, #0]
 800e742:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e746:	73fb      	strb	r3, [r7, #15]
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	7bfa      	ldrb	r2, [r7, #15]
 800e74c:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800e74e:	7dbb      	ldrb	r3, [r7, #22]
 800e750:	2be5      	cmp	r3, #229	; 0xe5
 800e752:	d007      	beq.n	800e764 <dir_find+0x8a>
 800e754:	7bfb      	ldrb	r3, [r7, #15]
 800e756:	f003 0308 	and.w	r3, r3, #8
 800e75a:	2b00      	cmp	r3, #0
 800e75c:	d009      	beq.n	800e772 <dir_find+0x98>
 800e75e:	7bfb      	ldrb	r3, [r7, #15]
 800e760:	2b0f      	cmp	r3, #15
 800e762:	d006      	beq.n	800e772 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e764:	23ff      	movs	r3, #255	; 0xff
 800e766:	757b      	strb	r3, [r7, #21]
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	f04f 32ff 	mov.w	r2, #4294967295
 800e76e:	631a      	str	r2, [r3, #48]	; 0x30
 800e770:	e05e      	b.n	800e830 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800e772:	7bfb      	ldrb	r3, [r7, #15]
 800e774:	2b0f      	cmp	r3, #15
 800e776:	d136      	bne.n	800e7e6 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e77e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e782:	2b00      	cmp	r3, #0
 800e784:	d154      	bne.n	800e830 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800e786:	7dbb      	ldrb	r3, [r7, #22]
 800e788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d00d      	beq.n	800e7ac <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	6a1b      	ldr	r3, [r3, #32]
 800e794:	7b5b      	ldrb	r3, [r3, #13]
 800e796:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800e798:	7dbb      	ldrb	r3, [r7, #22]
 800e79a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e79e:	75bb      	strb	r3, [r7, #22]
 800e7a0:	7dbb      	ldrb	r3, [r7, #22]
 800e7a2:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	695a      	ldr	r2, [r3, #20]
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800e7ac:	7dba      	ldrb	r2, [r7, #22]
 800e7ae:	7d7b      	ldrb	r3, [r7, #21]
 800e7b0:	429a      	cmp	r2, r3
 800e7b2:	d115      	bne.n	800e7e0 <dir_find+0x106>
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	6a1b      	ldr	r3, [r3, #32]
 800e7b8:	330d      	adds	r3, #13
 800e7ba:	781b      	ldrb	r3, [r3, #0]
 800e7bc:	7d3a      	ldrb	r2, [r7, #20]
 800e7be:	429a      	cmp	r2, r3
 800e7c0:	d10e      	bne.n	800e7e0 <dir_find+0x106>
 800e7c2:	693b      	ldr	r3, [r7, #16]
 800e7c4:	691a      	ldr	r2, [r3, #16]
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	6a1b      	ldr	r3, [r3, #32]
 800e7ca:	4619      	mov	r1, r3
 800e7cc:	4610      	mov	r0, r2
 800e7ce:	f7ff fcf1 	bl	800e1b4 <cmp_lfn>
 800e7d2:	4603      	mov	r3, r0
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d003      	beq.n	800e7e0 <dir_find+0x106>
 800e7d8:	7d7b      	ldrb	r3, [r7, #21]
 800e7da:	3b01      	subs	r3, #1
 800e7dc:	b2db      	uxtb	r3, r3
 800e7de:	e000      	b.n	800e7e2 <dir_find+0x108>
 800e7e0:	23ff      	movs	r3, #255	; 0xff
 800e7e2:	757b      	strb	r3, [r7, #21]
 800e7e4:	e024      	b.n	800e830 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800e7e6:	7d7b      	ldrb	r3, [r7, #21]
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d109      	bne.n	800e800 <dir_find+0x126>
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	6a1b      	ldr	r3, [r3, #32]
 800e7f0:	4618      	mov	r0, r3
 800e7f2:	f7ff feaa 	bl	800e54a <sum_sfn>
 800e7f6:	4603      	mov	r3, r0
 800e7f8:	461a      	mov	r2, r3
 800e7fa:	7d3b      	ldrb	r3, [r7, #20]
 800e7fc:	4293      	cmp	r3, r2
 800e7fe:	d024      	beq.n	800e84a <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e806:	f003 0301 	and.w	r3, r3, #1
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d10a      	bne.n	800e824 <dir_find+0x14a>
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	6a18      	ldr	r0, [r3, #32]
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	3324      	adds	r3, #36	; 0x24
 800e816:	220b      	movs	r2, #11
 800e818:	4619      	mov	r1, r3
 800e81a:	f7fe fd1a 	bl	800d252 <mem_cmp>
 800e81e:	4603      	mov	r3, r0
 800e820:	2b00      	cmp	r3, #0
 800e822:	d014      	beq.n	800e84e <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800e824:	23ff      	movs	r3, #255	; 0xff
 800e826:	757b      	strb	r3, [r7, #21]
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	f04f 32ff 	mov.w	r2, #4294967295
 800e82e:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800e830:	2100      	movs	r1, #0
 800e832:	6878      	ldr	r0, [r7, #4]
 800e834:	f7ff fb62 	bl	800defc <dir_next>
 800e838:	4603      	mov	r3, r0
 800e83a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800e83c:	7dfb      	ldrb	r3, [r7, #23]
 800e83e:	2b00      	cmp	r3, #0
 800e840:	f43f af65 	beq.w	800e70e <dir_find+0x34>
 800e844:	e004      	b.n	800e850 <dir_find+0x176>
		if (res != FR_OK) break;
 800e846:	bf00      	nop
 800e848:	e002      	b.n	800e850 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800e84a:	bf00      	nop
 800e84c:	e000      	b.n	800e850 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800e84e:	bf00      	nop

	return res;
 800e850:	7dfb      	ldrb	r3, [r7, #23]
}
 800e852:	4618      	mov	r0, r3
 800e854:	3718      	adds	r7, #24
 800e856:	46bd      	mov	sp, r7
 800e858:	bd80      	pop	{r7, pc}
	...

0800e85c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800e85c:	b580      	push	{r7, lr}
 800e85e:	b08c      	sub	sp, #48	; 0x30
 800e860:	af00      	add	r7, sp, #0
 800e862:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800e870:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800e874:	2b00      	cmp	r3, #0
 800e876:	d001      	beq.n	800e87c <dir_register+0x20>
 800e878:	2306      	movs	r3, #6
 800e87a:	e0e0      	b.n	800ea3e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800e87c:	2300      	movs	r3, #0
 800e87e:	627b      	str	r3, [r7, #36]	; 0x24
 800e880:	e002      	b.n	800e888 <dir_register+0x2c>
 800e882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e884:	3301      	adds	r3, #1
 800e886:	627b      	str	r3, [r7, #36]	; 0x24
 800e888:	69fb      	ldr	r3, [r7, #28]
 800e88a:	691a      	ldr	r2, [r3, #16]
 800e88c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e88e:	005b      	lsls	r3, r3, #1
 800e890:	4413      	add	r3, r2
 800e892:	881b      	ldrh	r3, [r3, #0]
 800e894:	2b00      	cmp	r3, #0
 800e896:	d1f4      	bne.n	800e882 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800e89e:	f107 030c 	add.w	r3, r7, #12
 800e8a2:	220c      	movs	r2, #12
 800e8a4:	4618      	mov	r0, r3
 800e8a6:	f7fe fc99 	bl	800d1dc <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800e8aa:	7dfb      	ldrb	r3, [r7, #23]
 800e8ac:	f003 0301 	and.w	r3, r3, #1
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d032      	beq.n	800e91a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	2240      	movs	r2, #64	; 0x40
 800e8b8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800e8bc:	2301      	movs	r3, #1
 800e8be:	62bb      	str	r3, [r7, #40]	; 0x28
 800e8c0:	e016      	b.n	800e8f0 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800e8c8:	69fb      	ldr	r3, [r7, #28]
 800e8ca:	691a      	ldr	r2, [r3, #16]
 800e8cc:	f107 010c 	add.w	r1, r7, #12
 800e8d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8d2:	f7ff fdab 	bl	800e42c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800e8d6:	6878      	ldr	r0, [r7, #4]
 800e8d8:	f7ff feff 	bl	800e6da <dir_find>
 800e8dc:	4603      	mov	r3, r0
 800e8de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800e8e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d106      	bne.n	800e8f8 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800e8ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8ec:	3301      	adds	r3, #1
 800e8ee:	62bb      	str	r3, [r7, #40]	; 0x28
 800e8f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8f2:	2b63      	cmp	r3, #99	; 0x63
 800e8f4:	d9e5      	bls.n	800e8c2 <dir_register+0x66>
 800e8f6:	e000      	b.n	800e8fa <dir_register+0x9e>
			if (res != FR_OK) break;
 800e8f8:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800e8fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8fc:	2b64      	cmp	r3, #100	; 0x64
 800e8fe:	d101      	bne.n	800e904 <dir_register+0xa8>
 800e900:	2307      	movs	r3, #7
 800e902:	e09c      	b.n	800ea3e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800e904:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e908:	2b04      	cmp	r3, #4
 800e90a:	d002      	beq.n	800e912 <dir_register+0xb6>
 800e90c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e910:	e095      	b.n	800ea3e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800e912:	7dfa      	ldrb	r2, [r7, #23]
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800e91a:	7dfb      	ldrb	r3, [r7, #23]
 800e91c:	f003 0302 	and.w	r3, r3, #2
 800e920:	2b00      	cmp	r3, #0
 800e922:	d007      	beq.n	800e934 <dir_register+0xd8>
 800e924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e926:	330c      	adds	r3, #12
 800e928:	4a47      	ldr	r2, [pc, #284]	; (800ea48 <dir_register+0x1ec>)
 800e92a:	fba2 2303 	umull	r2, r3, r2, r3
 800e92e:	089b      	lsrs	r3, r3, #2
 800e930:	3301      	adds	r3, #1
 800e932:	e000      	b.n	800e936 <dir_register+0xda>
 800e934:	2301      	movs	r3, #1
 800e936:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800e938:	6a39      	ldr	r1, [r7, #32]
 800e93a:	6878      	ldr	r0, [r7, #4]
 800e93c:	f7ff fbb4 	bl	800e0a8 <dir_alloc>
 800e940:	4603      	mov	r3, r0
 800e942:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800e946:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d148      	bne.n	800e9e0 <dir_register+0x184>
 800e94e:	6a3b      	ldr	r3, [r7, #32]
 800e950:	3b01      	subs	r3, #1
 800e952:	623b      	str	r3, [r7, #32]
 800e954:	6a3b      	ldr	r3, [r7, #32]
 800e956:	2b00      	cmp	r3, #0
 800e958:	d042      	beq.n	800e9e0 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	695a      	ldr	r2, [r3, #20]
 800e95e:	6a3b      	ldr	r3, [r7, #32]
 800e960:	015b      	lsls	r3, r3, #5
 800e962:	1ad3      	subs	r3, r2, r3
 800e964:	4619      	mov	r1, r3
 800e966:	6878      	ldr	r0, [r7, #4]
 800e968:	f7ff fa3f 	bl	800ddea <dir_sdi>
 800e96c:	4603      	mov	r3, r0
 800e96e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800e972:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e976:	2b00      	cmp	r3, #0
 800e978:	d132      	bne.n	800e9e0 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	3324      	adds	r3, #36	; 0x24
 800e97e:	4618      	mov	r0, r3
 800e980:	f7ff fde3 	bl	800e54a <sum_sfn>
 800e984:	4603      	mov	r3, r0
 800e986:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	69db      	ldr	r3, [r3, #28]
 800e98c:	4619      	mov	r1, r3
 800e98e:	69f8      	ldr	r0, [r7, #28]
 800e990:	f7fe fe52 	bl	800d638 <move_window>
 800e994:	4603      	mov	r3, r0
 800e996:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800e99a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d11d      	bne.n	800e9de <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800e9a2:	69fb      	ldr	r3, [r7, #28]
 800e9a4:	6918      	ldr	r0, [r3, #16]
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	6a19      	ldr	r1, [r3, #32]
 800e9aa:	6a3b      	ldr	r3, [r7, #32]
 800e9ac:	b2da      	uxtb	r2, r3
 800e9ae:	7efb      	ldrb	r3, [r7, #27]
 800e9b0:	f7ff fcd4 	bl	800e35c <put_lfn>
				fs->wflag = 1;
 800e9b4:	69fb      	ldr	r3, [r7, #28]
 800e9b6:	2201      	movs	r2, #1
 800e9b8:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800e9ba:	2100      	movs	r1, #0
 800e9bc:	6878      	ldr	r0, [r7, #4]
 800e9be:	f7ff fa9d 	bl	800defc <dir_next>
 800e9c2:	4603      	mov	r3, r0
 800e9c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800e9c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d107      	bne.n	800e9e0 <dir_register+0x184>
 800e9d0:	6a3b      	ldr	r3, [r7, #32]
 800e9d2:	3b01      	subs	r3, #1
 800e9d4:	623b      	str	r3, [r7, #32]
 800e9d6:	6a3b      	ldr	r3, [r7, #32]
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d1d5      	bne.n	800e988 <dir_register+0x12c>
 800e9dc:	e000      	b.n	800e9e0 <dir_register+0x184>
				if (res != FR_OK) break;
 800e9de:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800e9e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d128      	bne.n	800ea3a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	69db      	ldr	r3, [r3, #28]
 800e9ec:	4619      	mov	r1, r3
 800e9ee:	69f8      	ldr	r0, [r7, #28]
 800e9f0:	f7fe fe22 	bl	800d638 <move_window>
 800e9f4:	4603      	mov	r3, r0
 800e9f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800e9fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d11b      	bne.n	800ea3a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	6a1b      	ldr	r3, [r3, #32]
 800ea06:	2220      	movs	r2, #32
 800ea08:	2100      	movs	r1, #0
 800ea0a:	4618      	mov	r0, r3
 800ea0c:	f7fe fc07 	bl	800d21e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	6a18      	ldr	r0, [r3, #32]
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	3324      	adds	r3, #36	; 0x24
 800ea18:	220b      	movs	r2, #11
 800ea1a:	4619      	mov	r1, r3
 800ea1c:	f7fe fbde 	bl	800d1dc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	6a1b      	ldr	r3, [r3, #32]
 800ea2a:	330c      	adds	r3, #12
 800ea2c:	f002 0218 	and.w	r2, r2, #24
 800ea30:	b2d2      	uxtb	r2, r2
 800ea32:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800ea34:	69fb      	ldr	r3, [r7, #28]
 800ea36:	2201      	movs	r2, #1
 800ea38:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800ea3a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800ea3e:	4618      	mov	r0, r3
 800ea40:	3730      	adds	r7, #48	; 0x30
 800ea42:	46bd      	mov	sp, r7
 800ea44:	bd80      	pop	{r7, pc}
 800ea46:	bf00      	nop
 800ea48:	4ec4ec4f 	.word	0x4ec4ec4f

0800ea4c <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 800ea4c:	b580      	push	{r7, lr}
 800ea4e:	b086      	sub	sp, #24
 800ea50:	af00      	add	r7, sp, #0
 800ea52:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	695b      	ldr	r3, [r3, #20]
 800ea5e:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea68:	d007      	beq.n	800ea7a <dir_remove+0x2e>
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea6e:	4619      	mov	r1, r3
 800ea70:	6878      	ldr	r0, [r7, #4]
 800ea72:	f7ff f9ba 	bl	800ddea <dir_sdi>
 800ea76:	4603      	mov	r3, r0
 800ea78:	e000      	b.n	800ea7c <dir_remove+0x30>
 800ea7a:	2300      	movs	r3, #0
 800ea7c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ea7e:	7dfb      	ldrb	r3, [r7, #23]
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d128      	bne.n	800ead6 <dir_remove+0x8a>
		do {
			res = move_window(fs, dp->sect);
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	69db      	ldr	r3, [r3, #28]
 800ea88:	4619      	mov	r1, r3
 800ea8a:	6938      	ldr	r0, [r7, #16]
 800ea8c:	f7fe fdd4 	bl	800d638 <move_window>
 800ea90:	4603      	mov	r3, r0
 800ea92:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ea94:	7dfb      	ldrb	r3, [r7, #23]
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d115      	bne.n	800eac6 <dir_remove+0x7a>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
				dp->dir[XDIR_Type] &= 0x7F;
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	6a1b      	ldr	r3, [r3, #32]
 800ea9e:	22e5      	movs	r2, #229	; 0xe5
 800eaa0:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 800eaa2:	693b      	ldr	r3, [r7, #16]
 800eaa4:	2201      	movs	r2, #1
 800eaa6:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	695b      	ldr	r3, [r3, #20]
 800eaac:	68fa      	ldr	r2, [r7, #12]
 800eaae:	429a      	cmp	r2, r3
 800eab0:	d90b      	bls.n	800eaca <dir_remove+0x7e>
			res = dir_next(dp, 0);	/* Next entry */
 800eab2:	2100      	movs	r1, #0
 800eab4:	6878      	ldr	r0, [r7, #4]
 800eab6:	f7ff fa21 	bl	800defc <dir_next>
 800eaba:	4603      	mov	r3, r0
 800eabc:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 800eabe:	7dfb      	ldrb	r3, [r7, #23]
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d0df      	beq.n	800ea84 <dir_remove+0x38>
 800eac4:	e002      	b.n	800eacc <dir_remove+0x80>
			if (res != FR_OK) break;
 800eac6:	bf00      	nop
 800eac8:	e000      	b.n	800eacc <dir_remove+0x80>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 800eaca:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 800eacc:	7dfb      	ldrb	r3, [r7, #23]
 800eace:	2b04      	cmp	r3, #4
 800ead0:	d101      	bne.n	800ead6 <dir_remove+0x8a>
 800ead2:	2302      	movs	r3, #2
 800ead4:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 800ead6:	7dfb      	ldrb	r3, [r7, #23]
}
 800ead8:	4618      	mov	r0, r3
 800eada:	3718      	adds	r7, #24
 800eadc:	46bd      	mov	sp, r7
 800eade:	bd80      	pop	{r7, pc}

0800eae0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800eae0:	b580      	push	{r7, lr}
 800eae2:	b08a      	sub	sp, #40	; 0x28
 800eae4:	af00      	add	r7, sp, #0
 800eae6:	6078      	str	r0, [r7, #4]
 800eae8:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800eaea:	683b      	ldr	r3, [r7, #0]
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	613b      	str	r3, [r7, #16]
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	691b      	ldr	r3, [r3, #16]
 800eaf6:	60fb      	str	r3, [r7, #12]
 800eaf8:	2300      	movs	r3, #0
 800eafa:	617b      	str	r3, [r7, #20]
 800eafc:	697b      	ldr	r3, [r7, #20]
 800eafe:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800eb00:	69bb      	ldr	r3, [r7, #24]
 800eb02:	1c5a      	adds	r2, r3, #1
 800eb04:	61ba      	str	r2, [r7, #24]
 800eb06:	693a      	ldr	r2, [r7, #16]
 800eb08:	4413      	add	r3, r2
 800eb0a:	781b      	ldrb	r3, [r3, #0]
 800eb0c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800eb0e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eb10:	2b1f      	cmp	r3, #31
 800eb12:	d940      	bls.n	800eb96 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800eb14:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eb16:	2b2f      	cmp	r3, #47	; 0x2f
 800eb18:	d006      	beq.n	800eb28 <create_name+0x48>
 800eb1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eb1c:	2b5c      	cmp	r3, #92	; 0x5c
 800eb1e:	d110      	bne.n	800eb42 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800eb20:	e002      	b.n	800eb28 <create_name+0x48>
 800eb22:	69bb      	ldr	r3, [r7, #24]
 800eb24:	3301      	adds	r3, #1
 800eb26:	61bb      	str	r3, [r7, #24]
 800eb28:	693a      	ldr	r2, [r7, #16]
 800eb2a:	69bb      	ldr	r3, [r7, #24]
 800eb2c:	4413      	add	r3, r2
 800eb2e:	781b      	ldrb	r3, [r3, #0]
 800eb30:	2b2f      	cmp	r3, #47	; 0x2f
 800eb32:	d0f6      	beq.n	800eb22 <create_name+0x42>
 800eb34:	693a      	ldr	r2, [r7, #16]
 800eb36:	69bb      	ldr	r3, [r7, #24]
 800eb38:	4413      	add	r3, r2
 800eb3a:	781b      	ldrb	r3, [r3, #0]
 800eb3c:	2b5c      	cmp	r3, #92	; 0x5c
 800eb3e:	d0f0      	beq.n	800eb22 <create_name+0x42>
			break;
 800eb40:	e02a      	b.n	800eb98 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800eb42:	697b      	ldr	r3, [r7, #20]
 800eb44:	2bfe      	cmp	r3, #254	; 0xfe
 800eb46:	d901      	bls.n	800eb4c <create_name+0x6c>
 800eb48:	2306      	movs	r3, #6
 800eb4a:	e1c9      	b.n	800eee0 <create_name+0x400>
#if !_LFN_UNICODE
		w &= 0xFF;
 800eb4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eb4e:	b2db      	uxtb	r3, r3
 800eb50:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800eb52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eb54:	2101      	movs	r1, #1
 800eb56:	4618      	mov	r0, r3
 800eb58:	f002 f848 	bl	8010bec <ff_convert>
 800eb5c:	4603      	mov	r3, r0
 800eb5e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800eb60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d101      	bne.n	800eb6a <create_name+0x8a>
 800eb66:	2306      	movs	r3, #6
 800eb68:	e1ba      	b.n	800eee0 <create_name+0x400>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800eb6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eb6c:	2b7f      	cmp	r3, #127	; 0x7f
 800eb6e:	d809      	bhi.n	800eb84 <create_name+0xa4>
 800eb70:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eb72:	4619      	mov	r1, r3
 800eb74:	48a5      	ldr	r0, [pc, #660]	; (800ee0c <create_name+0x32c>)
 800eb76:	f7fe fb93 	bl	800d2a0 <chk_chr>
 800eb7a:	4603      	mov	r3, r0
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d001      	beq.n	800eb84 <create_name+0xa4>
 800eb80:	2306      	movs	r3, #6
 800eb82:	e1ad      	b.n	800eee0 <create_name+0x400>
		lfn[di++] = w;					/* Store the Unicode character */
 800eb84:	697b      	ldr	r3, [r7, #20]
 800eb86:	1c5a      	adds	r2, r3, #1
 800eb88:	617a      	str	r2, [r7, #20]
 800eb8a:	005b      	lsls	r3, r3, #1
 800eb8c:	68fa      	ldr	r2, [r7, #12]
 800eb8e:	4413      	add	r3, r2
 800eb90:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800eb92:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800eb94:	e7b4      	b.n	800eb00 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800eb96:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800eb98:	693a      	ldr	r2, [r7, #16]
 800eb9a:	69bb      	ldr	r3, [r7, #24]
 800eb9c:	441a      	add	r2, r3
 800eb9e:	683b      	ldr	r3, [r7, #0]
 800eba0:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800eba2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eba4:	2b1f      	cmp	r3, #31
 800eba6:	d801      	bhi.n	800ebac <create_name+0xcc>
 800eba8:	2304      	movs	r3, #4
 800ebaa:	e000      	b.n	800ebae <create_name+0xce>
 800ebac:	2300      	movs	r3, #0
 800ebae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if _FS_RPATH != 0
	if ((di == 1 && lfn[di - 1] == '.') ||
 800ebb2:	697b      	ldr	r3, [r7, #20]
 800ebb4:	2b01      	cmp	r3, #1
 800ebb6:	d109      	bne.n	800ebcc <create_name+0xec>
 800ebb8:	697b      	ldr	r3, [r7, #20]
 800ebba:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ebbe:	3b01      	subs	r3, #1
 800ebc0:	005b      	lsls	r3, r3, #1
 800ebc2:	68fa      	ldr	r2, [r7, #12]
 800ebc4:	4413      	add	r3, r2
 800ebc6:	881b      	ldrh	r3, [r3, #0]
 800ebc8:	2b2e      	cmp	r3, #46	; 0x2e
 800ebca:	d016      	beq.n	800ebfa <create_name+0x11a>
 800ebcc:	697b      	ldr	r3, [r7, #20]
 800ebce:	2b02      	cmp	r3, #2
 800ebd0:	d14e      	bne.n	800ec70 <create_name+0x190>
		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
 800ebd2:	697b      	ldr	r3, [r7, #20]
 800ebd4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ebd8:	3b01      	subs	r3, #1
 800ebda:	005b      	lsls	r3, r3, #1
 800ebdc:	68fa      	ldr	r2, [r7, #12]
 800ebde:	4413      	add	r3, r2
 800ebe0:	881b      	ldrh	r3, [r3, #0]
 800ebe2:	2b2e      	cmp	r3, #46	; 0x2e
 800ebe4:	d144      	bne.n	800ec70 <create_name+0x190>
 800ebe6:	697b      	ldr	r3, [r7, #20]
 800ebe8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ebec:	3b02      	subs	r3, #2
 800ebee:	005b      	lsls	r3, r3, #1
 800ebf0:	68fa      	ldr	r2, [r7, #12]
 800ebf2:	4413      	add	r3, r2
 800ebf4:	881b      	ldrh	r3, [r3, #0]
 800ebf6:	2b2e      	cmp	r3, #46	; 0x2e
 800ebf8:	d13a      	bne.n	800ec70 <create_name+0x190>
		lfn[di] = 0;
 800ebfa:	697b      	ldr	r3, [r7, #20]
 800ebfc:	005b      	lsls	r3, r3, #1
 800ebfe:	68fa      	ldr	r2, [r7, #12]
 800ec00:	4413      	add	r3, r2
 800ec02:	2200      	movs	r2, #0
 800ec04:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 800ec06:	2300      	movs	r3, #0
 800ec08:	623b      	str	r3, [r7, #32]
 800ec0a:	e00f      	b.n	800ec2c <create_name+0x14c>
			dp->fn[i] = (i < di) ? '.' : ' ';
 800ec0c:	6a3a      	ldr	r2, [r7, #32]
 800ec0e:	697b      	ldr	r3, [r7, #20]
 800ec10:	429a      	cmp	r2, r3
 800ec12:	d201      	bcs.n	800ec18 <create_name+0x138>
 800ec14:	212e      	movs	r1, #46	; 0x2e
 800ec16:	e000      	b.n	800ec1a <create_name+0x13a>
 800ec18:	2120      	movs	r1, #32
 800ec1a:	687a      	ldr	r2, [r7, #4]
 800ec1c:	6a3b      	ldr	r3, [r7, #32]
 800ec1e:	4413      	add	r3, r2
 800ec20:	3324      	adds	r3, #36	; 0x24
 800ec22:	460a      	mov	r2, r1
 800ec24:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 11; i++)		/* Create dot name for SFN entry */
 800ec26:	6a3b      	ldr	r3, [r7, #32]
 800ec28:	3301      	adds	r3, #1
 800ec2a:	623b      	str	r3, [r7, #32]
 800ec2c:	6a3b      	ldr	r3, [r7, #32]
 800ec2e:	2b0a      	cmp	r3, #10
 800ec30:	d9ec      	bls.n	800ec0c <create_name+0x12c>
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
 800ec32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ec36:	f043 0320 	orr.w	r3, r3, #32
 800ec3a:	b2d9      	uxtb	r1, r3
 800ec3c:	687a      	ldr	r2, [r7, #4]
 800ec3e:	6a3b      	ldr	r3, [r7, #32]
 800ec40:	4413      	add	r3, r2
 800ec42:	3324      	adds	r3, #36	; 0x24
 800ec44:	460a      	mov	r2, r1
 800ec46:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 800ec48:	2300      	movs	r3, #0
 800ec4a:	e149      	b.n	800eee0 <create_name+0x400>
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
		w = lfn[di - 1];
 800ec4c:	697b      	ldr	r3, [r7, #20]
 800ec4e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ec52:	3b01      	subs	r3, #1
 800ec54:	005b      	lsls	r3, r3, #1
 800ec56:	68fa      	ldr	r2, [r7, #12]
 800ec58:	4413      	add	r3, r2
 800ec5a:	881b      	ldrh	r3, [r3, #0]
 800ec5c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800ec5e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ec60:	2b20      	cmp	r3, #32
 800ec62:	d002      	beq.n	800ec6a <create_name+0x18a>
 800ec64:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ec66:	2b2e      	cmp	r3, #46	; 0x2e
 800ec68:	d106      	bne.n	800ec78 <create_name+0x198>
		di--;
 800ec6a:	697b      	ldr	r3, [r7, #20]
 800ec6c:	3b01      	subs	r3, #1
 800ec6e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800ec70:	697b      	ldr	r3, [r7, #20]
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d1ea      	bne.n	800ec4c <create_name+0x16c>
 800ec76:	e000      	b.n	800ec7a <create_name+0x19a>
		if (w != ' ' && w != '.') break;
 800ec78:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800ec7a:	697b      	ldr	r3, [r7, #20]
 800ec7c:	005b      	lsls	r3, r3, #1
 800ec7e:	68fa      	ldr	r2, [r7, #12]
 800ec80:	4413      	add	r3, r2
 800ec82:	2200      	movs	r2, #0
 800ec84:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800ec86:	697b      	ldr	r3, [r7, #20]
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d101      	bne.n	800ec90 <create_name+0x1b0>
 800ec8c:	2306      	movs	r3, #6
 800ec8e:	e127      	b.n	800eee0 <create_name+0x400>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	3324      	adds	r3, #36	; 0x24
 800ec94:	220b      	movs	r2, #11
 800ec96:	2120      	movs	r1, #32
 800ec98:	4618      	mov	r0, r3
 800ec9a:	f7fe fac0 	bl	800d21e <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800ec9e:	2300      	movs	r3, #0
 800eca0:	61bb      	str	r3, [r7, #24]
 800eca2:	e002      	b.n	800ecaa <create_name+0x1ca>
 800eca4:	69bb      	ldr	r3, [r7, #24]
 800eca6:	3301      	adds	r3, #1
 800eca8:	61bb      	str	r3, [r7, #24]
 800ecaa:	69bb      	ldr	r3, [r7, #24]
 800ecac:	005b      	lsls	r3, r3, #1
 800ecae:	68fa      	ldr	r2, [r7, #12]
 800ecb0:	4413      	add	r3, r2
 800ecb2:	881b      	ldrh	r3, [r3, #0]
 800ecb4:	2b20      	cmp	r3, #32
 800ecb6:	d0f5      	beq.n	800eca4 <create_name+0x1c4>
 800ecb8:	69bb      	ldr	r3, [r7, #24]
 800ecba:	005b      	lsls	r3, r3, #1
 800ecbc:	68fa      	ldr	r2, [r7, #12]
 800ecbe:	4413      	add	r3, r2
 800ecc0:	881b      	ldrh	r3, [r3, #0]
 800ecc2:	2b2e      	cmp	r3, #46	; 0x2e
 800ecc4:	d0ee      	beq.n	800eca4 <create_name+0x1c4>
	if (si) cf |= NS_LOSS | NS_LFN;
 800ecc6:	69bb      	ldr	r3, [r7, #24]
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d009      	beq.n	800ece0 <create_name+0x200>
 800eccc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ecd0:	f043 0303 	orr.w	r3, r3, #3
 800ecd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800ecd8:	e002      	b.n	800ece0 <create_name+0x200>
 800ecda:	697b      	ldr	r3, [r7, #20]
 800ecdc:	3b01      	subs	r3, #1
 800ecde:	617b      	str	r3, [r7, #20]
 800ece0:	697b      	ldr	r3, [r7, #20]
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d009      	beq.n	800ecfa <create_name+0x21a>
 800ece6:	697b      	ldr	r3, [r7, #20]
 800ece8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ecec:	3b01      	subs	r3, #1
 800ecee:	005b      	lsls	r3, r3, #1
 800ecf0:	68fa      	ldr	r2, [r7, #12]
 800ecf2:	4413      	add	r3, r2
 800ecf4:	881b      	ldrh	r3, [r3, #0]
 800ecf6:	2b2e      	cmp	r3, #46	; 0x2e
 800ecf8:	d1ef      	bne.n	800ecda <create_name+0x1fa>

	i = b = 0; ni = 8;
 800ecfa:	2300      	movs	r3, #0
 800ecfc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ed00:	2300      	movs	r3, #0
 800ed02:	623b      	str	r3, [r7, #32]
 800ed04:	2308      	movs	r3, #8
 800ed06:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800ed08:	69bb      	ldr	r3, [r7, #24]
 800ed0a:	1c5a      	adds	r2, r3, #1
 800ed0c:	61ba      	str	r2, [r7, #24]
 800ed0e:	005b      	lsls	r3, r3, #1
 800ed10:	68fa      	ldr	r2, [r7, #12]
 800ed12:	4413      	add	r3, r2
 800ed14:	881b      	ldrh	r3, [r3, #0]
 800ed16:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800ed18:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	f000 8096 	beq.w	800ee4c <create_name+0x36c>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800ed20:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ed22:	2b20      	cmp	r3, #32
 800ed24:	d006      	beq.n	800ed34 <create_name+0x254>
 800ed26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ed28:	2b2e      	cmp	r3, #46	; 0x2e
 800ed2a:	d10a      	bne.n	800ed42 <create_name+0x262>
 800ed2c:	69ba      	ldr	r2, [r7, #24]
 800ed2e:	697b      	ldr	r3, [r7, #20]
 800ed30:	429a      	cmp	r2, r3
 800ed32:	d006      	beq.n	800ed42 <create_name+0x262>
			cf |= NS_LOSS | NS_LFN; continue;
 800ed34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ed38:	f043 0303 	orr.w	r3, r3, #3
 800ed3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ed40:	e083      	b.n	800ee4a <create_name+0x36a>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800ed42:	6a3a      	ldr	r2, [r7, #32]
 800ed44:	69fb      	ldr	r3, [r7, #28]
 800ed46:	429a      	cmp	r2, r3
 800ed48:	d203      	bcs.n	800ed52 <create_name+0x272>
 800ed4a:	69ba      	ldr	r2, [r7, #24]
 800ed4c:	697b      	ldr	r3, [r7, #20]
 800ed4e:	429a      	cmp	r2, r3
 800ed50:	d123      	bne.n	800ed9a <create_name+0x2ba>
			if (ni == 11) {				/* Long extension */
 800ed52:	69fb      	ldr	r3, [r7, #28]
 800ed54:	2b0b      	cmp	r3, #11
 800ed56:	d106      	bne.n	800ed66 <create_name+0x286>
				cf |= NS_LOSS | NS_LFN; break;
 800ed58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ed5c:	f043 0303 	orr.w	r3, r3, #3
 800ed60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ed64:	e075      	b.n	800ee52 <create_name+0x372>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800ed66:	69ba      	ldr	r2, [r7, #24]
 800ed68:	697b      	ldr	r3, [r7, #20]
 800ed6a:	429a      	cmp	r2, r3
 800ed6c:	d005      	beq.n	800ed7a <create_name+0x29a>
 800ed6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ed72:	f043 0303 	orr.w	r3, r3, #3
 800ed76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800ed7a:	69ba      	ldr	r2, [r7, #24]
 800ed7c:	697b      	ldr	r3, [r7, #20]
 800ed7e:	429a      	cmp	r2, r3
 800ed80:	d866      	bhi.n	800ee50 <create_name+0x370>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800ed82:	697b      	ldr	r3, [r7, #20]
 800ed84:	61bb      	str	r3, [r7, #24]
 800ed86:	2308      	movs	r3, #8
 800ed88:	623b      	str	r3, [r7, #32]
 800ed8a:	230b      	movs	r3, #11
 800ed8c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800ed8e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ed92:	009b      	lsls	r3, r3, #2
 800ed94:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ed98:	e057      	b.n	800ee4a <create_name+0x36a>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800ed9a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ed9c:	2b7f      	cmp	r3, #127	; 0x7f
 800ed9e:	d914      	bls.n	800edca <create_name+0x2ea>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800eda0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eda2:	2100      	movs	r1, #0
 800eda4:	4618      	mov	r0, r3
 800eda6:	f001 ff21 	bl	8010bec <ff_convert>
 800edaa:	4603      	mov	r3, r0
 800edac:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800edae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d004      	beq.n	800edbe <create_name+0x2de>
 800edb4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800edb6:	3b80      	subs	r3, #128	; 0x80
 800edb8:	4a15      	ldr	r2, [pc, #84]	; (800ee10 <create_name+0x330>)
 800edba:	5cd3      	ldrb	r3, [r2, r3]
 800edbc:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800edbe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800edc2:	f043 0302 	orr.w	r3, r3, #2
 800edc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800edca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d007      	beq.n	800ede0 <create_name+0x300>
 800edd0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800edd2:	4619      	mov	r1, r3
 800edd4:	480f      	ldr	r0, [pc, #60]	; (800ee14 <create_name+0x334>)
 800edd6:	f7fe fa63 	bl	800d2a0 <chk_chr>
 800edda:	4603      	mov	r3, r0
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d008      	beq.n	800edf2 <create_name+0x312>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800ede0:	235f      	movs	r3, #95	; 0x5f
 800ede2:	84bb      	strh	r3, [r7, #36]	; 0x24
 800ede4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ede8:	f043 0303 	orr.w	r3, r3, #3
 800edec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800edf0:	e021      	b.n	800ee36 <create_name+0x356>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800edf2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800edf4:	2b40      	cmp	r3, #64	; 0x40
 800edf6:	d90f      	bls.n	800ee18 <create_name+0x338>
 800edf8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800edfa:	2b5a      	cmp	r3, #90	; 0x5a
 800edfc:	d80c      	bhi.n	800ee18 <create_name+0x338>
					b |= 2;
 800edfe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ee02:	f043 0302 	orr.w	r3, r3, #2
 800ee06:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ee0a:	e014      	b.n	800ee36 <create_name+0x356>
 800ee0c:	08016e34 	.word	0x08016e34
 800ee10:	08016ebc 	.word	0x08016ebc
 800ee14:	08016e40 	.word	0x08016e40
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800ee18:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ee1a:	2b60      	cmp	r3, #96	; 0x60
 800ee1c:	d90b      	bls.n	800ee36 <create_name+0x356>
 800ee1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ee20:	2b7a      	cmp	r3, #122	; 0x7a
 800ee22:	d808      	bhi.n	800ee36 <create_name+0x356>
						b |= 1; w -= 0x20;
 800ee24:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ee28:	f043 0301 	orr.w	r3, r3, #1
 800ee2c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ee30:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ee32:	3b20      	subs	r3, #32
 800ee34:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800ee36:	6a3b      	ldr	r3, [r7, #32]
 800ee38:	1c5a      	adds	r2, r3, #1
 800ee3a:	623a      	str	r2, [r7, #32]
 800ee3c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ee3e:	b2d1      	uxtb	r1, r2
 800ee40:	687a      	ldr	r2, [r7, #4]
 800ee42:	4413      	add	r3, r2
 800ee44:	460a      	mov	r2, r1
 800ee46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800ee4a:	e75d      	b.n	800ed08 <create_name+0x228>
		if (!w) break;					/* Break on end of the LFN */
 800ee4c:	bf00      	nop
 800ee4e:	e000      	b.n	800ee52 <create_name+0x372>
			if (si > di) break;			/* No extension */
 800ee50:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ee58:	2be5      	cmp	r3, #229	; 0xe5
 800ee5a:	d103      	bne.n	800ee64 <create_name+0x384>
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	2205      	movs	r2, #5
 800ee60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800ee64:	69fb      	ldr	r3, [r7, #28]
 800ee66:	2b08      	cmp	r3, #8
 800ee68:	d104      	bne.n	800ee74 <create_name+0x394>
 800ee6a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ee6e:	009b      	lsls	r3, r3, #2
 800ee70:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800ee74:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ee78:	f003 030c 	and.w	r3, r3, #12
 800ee7c:	2b0c      	cmp	r3, #12
 800ee7e:	d005      	beq.n	800ee8c <create_name+0x3ac>
 800ee80:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ee84:	f003 0303 	and.w	r3, r3, #3
 800ee88:	2b03      	cmp	r3, #3
 800ee8a:	d105      	bne.n	800ee98 <create_name+0x3b8>
 800ee8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ee90:	f043 0302 	orr.w	r3, r3, #2
 800ee94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800ee98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ee9c:	f003 0302 	and.w	r3, r3, #2
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d117      	bne.n	800eed4 <create_name+0x3f4>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800eea4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800eea8:	f003 0303 	and.w	r3, r3, #3
 800eeac:	2b01      	cmp	r3, #1
 800eeae:	d105      	bne.n	800eebc <create_name+0x3dc>
 800eeb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eeb4:	f043 0310 	orr.w	r3, r3, #16
 800eeb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800eebc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800eec0:	f003 030c 	and.w	r3, r3, #12
 800eec4:	2b04      	cmp	r3, #4
 800eec6:	d105      	bne.n	800eed4 <create_name+0x3f4>
 800eec8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eecc:	f043 0308 	orr.w	r3, r3, #8
 800eed0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800eeda:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800eede:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800eee0:	4618      	mov	r0, r3
 800eee2:	3728      	adds	r7, #40	; 0x28
 800eee4:	46bd      	mov	sp, r7
 800eee6:	bd80      	pop	{r7, pc}

0800eee8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800eee8:	b580      	push	{r7, lr}
 800eeea:	b086      	sub	sp, #24
 800eeec:	af00      	add	r7, sp, #0
 800eeee:	6078      	str	r0, [r7, #4]
 800eef0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800eef6:	693b      	ldr	r3, [r7, #16]
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	60fb      	str	r3, [r7, #12]


#if _FS_RPATH != 0
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 800eefc:	683b      	ldr	r3, [r7, #0]
 800eefe:	781b      	ldrb	r3, [r3, #0]
 800ef00:	2b2f      	cmp	r3, #47	; 0x2f
 800ef02:	d00b      	beq.n	800ef1c <follow_path+0x34>
 800ef04:	683b      	ldr	r3, [r7, #0]
 800ef06:	781b      	ldrb	r3, [r3, #0]
 800ef08:	2b5c      	cmp	r3, #92	; 0x5c
 800ef0a:	d007      	beq.n	800ef1c <follow_path+0x34>
		obj->sclust = fs->cdir;				/* Start from current directory */
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	69da      	ldr	r2, [r3, #28]
 800ef10:	693b      	ldr	r3, [r7, #16]
 800ef12:	609a      	str	r2, [r3, #8]
 800ef14:	e00d      	b.n	800ef32 <follow_path+0x4a>
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800ef16:	683b      	ldr	r3, [r7, #0]
 800ef18:	3301      	adds	r3, #1
 800ef1a:	603b      	str	r3, [r7, #0]
 800ef1c:	683b      	ldr	r3, [r7, #0]
 800ef1e:	781b      	ldrb	r3, [r3, #0]
 800ef20:	2b2f      	cmp	r3, #47	; 0x2f
 800ef22:	d0f8      	beq.n	800ef16 <follow_path+0x2e>
 800ef24:	683b      	ldr	r3, [r7, #0]
 800ef26:	781b      	ldrb	r3, [r3, #0]
 800ef28:	2b5c      	cmp	r3, #92	; 0x5c
 800ef2a:	d0f4      	beq.n	800ef16 <follow_path+0x2e>
		obj->sclust = 0;					/* Start from root directory */
 800ef2c:	693b      	ldr	r3, [r7, #16]
 800ef2e:	2200      	movs	r2, #0
 800ef30:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800ef32:	683b      	ldr	r3, [r7, #0]
 800ef34:	781b      	ldrb	r3, [r3, #0]
 800ef36:	2b1f      	cmp	r3, #31
 800ef38:	d80a      	bhi.n	800ef50 <follow_path+0x68>
		dp->fn[NSFLAG] = NS_NONAME;
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	2280      	movs	r2, #128	; 0x80
 800ef3e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800ef42:	2100      	movs	r1, #0
 800ef44:	6878      	ldr	r0, [r7, #4]
 800ef46:	f7fe ff50 	bl	800ddea <dir_sdi>
 800ef4a:	4603      	mov	r3, r0
 800ef4c:	75fb      	strb	r3, [r7, #23]
 800ef4e:	e05b      	b.n	800f008 <follow_path+0x120>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ef50:	463b      	mov	r3, r7
 800ef52:	4619      	mov	r1, r3
 800ef54:	6878      	ldr	r0, [r7, #4]
 800ef56:	f7ff fdc3 	bl	800eae0 <create_name>
 800ef5a:	4603      	mov	r3, r0
 800ef5c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ef5e:	7dfb      	ldrb	r3, [r7, #23]
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d14c      	bne.n	800effe <follow_path+0x116>
			res = dir_find(dp);				/* Find an object with the segment name */
 800ef64:	6878      	ldr	r0, [r7, #4]
 800ef66:	f7ff fbb8 	bl	800e6da <dir_find>
 800ef6a:	4603      	mov	r3, r0
 800ef6c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ef74:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800ef76:	7dfb      	ldrb	r3, [r7, #23]
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d01b      	beq.n	800efb4 <follow_path+0xcc>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800ef7c:	7dfb      	ldrb	r3, [r7, #23]
 800ef7e:	2b04      	cmp	r3, #4
 800ef80:	d13f      	bne.n	800f002 <follow_path+0x11a>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 800ef82:	7afb      	ldrb	r3, [r7, #11]
 800ef84:	f003 0320 	and.w	r3, r3, #32
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d00b      	beq.n	800efa4 <follow_path+0xbc>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 800ef8c:	7afb      	ldrb	r3, [r7, #11]
 800ef8e:	f003 0304 	and.w	r3, r3, #4
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d031      	beq.n	800effa <follow_path+0x112>
						dp->fn[NSFLAG] = NS_NONAME;
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	2280      	movs	r2, #128	; 0x80
 800ef9a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
						res = FR_OK;
 800ef9e:	2300      	movs	r3, #0
 800efa0:	75fb      	strb	r3, [r7, #23]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 800efa2:	e02e      	b.n	800f002 <follow_path+0x11a>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800efa4:	7afb      	ldrb	r3, [r7, #11]
 800efa6:	f003 0304 	and.w	r3, r3, #4
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d129      	bne.n	800f002 <follow_path+0x11a>
 800efae:	2305      	movs	r3, #5
 800efb0:	75fb      	strb	r3, [r7, #23]
				break;
 800efb2:	e026      	b.n	800f002 <follow_path+0x11a>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800efb4:	7afb      	ldrb	r3, [r7, #11]
 800efb6:	f003 0304 	and.w	r3, r3, #4
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d123      	bne.n	800f006 <follow_path+0x11e>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800efbe:	693b      	ldr	r3, [r7, #16]
 800efc0:	799b      	ldrb	r3, [r3, #6]
 800efc2:	f003 0310 	and.w	r3, r3, #16
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d102      	bne.n	800efd0 <follow_path+0xe8>
				res = FR_NO_PATH; break;
 800efca:	2305      	movs	r3, #5
 800efcc:	75fb      	strb	r3, [r7, #23]
 800efce:	e01b      	b.n	800f008 <follow_path+0x120>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	695b      	ldr	r3, [r3, #20]
 800efda:	68fa      	ldr	r2, [r7, #12]
 800efdc:	8992      	ldrh	r2, [r2, #12]
 800efde:	fbb3 f0f2 	udiv	r0, r3, r2
 800efe2:	fb02 f200 	mul.w	r2, r2, r0
 800efe6:	1a9b      	subs	r3, r3, r2
 800efe8:	440b      	add	r3, r1
 800efea:	4619      	mov	r1, r3
 800efec:	68f8      	ldr	r0, [r7, #12]
 800efee:	f7ff f8a2 	bl	800e136 <ld_clust>
 800eff2:	4602      	mov	r2, r0
 800eff4:	693b      	ldr	r3, [r7, #16]
 800eff6:	609a      	str	r2, [r3, #8]
 800eff8:	e7aa      	b.n	800ef50 <follow_path+0x68>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 800effa:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800effc:	e7a8      	b.n	800ef50 <follow_path+0x68>
			if (res != FR_OK) break;
 800effe:	bf00      	nop
 800f000:	e002      	b.n	800f008 <follow_path+0x120>
				break;
 800f002:	bf00      	nop
 800f004:	e000      	b.n	800f008 <follow_path+0x120>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f006:	bf00      	nop
			}
		}
	}

	return res;
 800f008:	7dfb      	ldrb	r3, [r7, #23]
}
 800f00a:	4618      	mov	r0, r3
 800f00c:	3718      	adds	r7, #24
 800f00e:	46bd      	mov	sp, r7
 800f010:	bd80      	pop	{r7, pc}

0800f012 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800f012:	b480      	push	{r7}
 800f014:	b087      	sub	sp, #28
 800f016:	af00      	add	r7, sp, #0
 800f018:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800f01a:	f04f 33ff 	mov.w	r3, #4294967295
 800f01e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	2b00      	cmp	r3, #0
 800f026:	d031      	beq.n	800f08c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	617b      	str	r3, [r7, #20]
 800f02e:	e002      	b.n	800f036 <get_ldnumber+0x24>
 800f030:	697b      	ldr	r3, [r7, #20]
 800f032:	3301      	adds	r3, #1
 800f034:	617b      	str	r3, [r7, #20]
 800f036:	697b      	ldr	r3, [r7, #20]
 800f038:	781b      	ldrb	r3, [r3, #0]
 800f03a:	2b1f      	cmp	r3, #31
 800f03c:	d903      	bls.n	800f046 <get_ldnumber+0x34>
 800f03e:	697b      	ldr	r3, [r7, #20]
 800f040:	781b      	ldrb	r3, [r3, #0]
 800f042:	2b3a      	cmp	r3, #58	; 0x3a
 800f044:	d1f4      	bne.n	800f030 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800f046:	697b      	ldr	r3, [r7, #20]
 800f048:	781b      	ldrb	r3, [r3, #0]
 800f04a:	2b3a      	cmp	r3, #58	; 0x3a
 800f04c:	d11c      	bne.n	800f088 <get_ldnumber+0x76>
			tp = *path;
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800f054:	68fb      	ldr	r3, [r7, #12]
 800f056:	1c5a      	adds	r2, r3, #1
 800f058:	60fa      	str	r2, [r7, #12]
 800f05a:	781b      	ldrb	r3, [r3, #0]
 800f05c:	3b30      	subs	r3, #48	; 0x30
 800f05e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800f060:	68bb      	ldr	r3, [r7, #8]
 800f062:	2b09      	cmp	r3, #9
 800f064:	d80e      	bhi.n	800f084 <get_ldnumber+0x72>
 800f066:	68fa      	ldr	r2, [r7, #12]
 800f068:	697b      	ldr	r3, [r7, #20]
 800f06a:	429a      	cmp	r2, r3
 800f06c:	d10a      	bne.n	800f084 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800f06e:	68bb      	ldr	r3, [r7, #8]
 800f070:	2b00      	cmp	r3, #0
 800f072:	d107      	bne.n	800f084 <get_ldnumber+0x72>
					vol = (int)i;
 800f074:	68bb      	ldr	r3, [r7, #8]
 800f076:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800f078:	697b      	ldr	r3, [r7, #20]
 800f07a:	3301      	adds	r3, #1
 800f07c:	617b      	str	r3, [r7, #20]
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	697a      	ldr	r2, [r7, #20]
 800f082:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800f084:	693b      	ldr	r3, [r7, #16]
 800f086:	e002      	b.n	800f08e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800f088:	2300      	movs	r3, #0
 800f08a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800f08c:	693b      	ldr	r3, [r7, #16]
}
 800f08e:	4618      	mov	r0, r3
 800f090:	371c      	adds	r7, #28
 800f092:	46bd      	mov	sp, r7
 800f094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f098:	4770      	bx	lr
	...

0800f09c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800f09c:	b580      	push	{r7, lr}
 800f09e:	b082      	sub	sp, #8
 800f0a0:	af00      	add	r7, sp, #0
 800f0a2:	6078      	str	r0, [r7, #4]
 800f0a4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	2200      	movs	r2, #0
 800f0aa:	70da      	strb	r2, [r3, #3]
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	f04f 32ff 	mov.w	r2, #4294967295
 800f0b2:	639a      	str	r2, [r3, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800f0b4:	6839      	ldr	r1, [r7, #0]
 800f0b6:	6878      	ldr	r0, [r7, #4]
 800f0b8:	f7fe fabe 	bl	800d638 <move_window>
 800f0bc:	4603      	mov	r3, r0
 800f0be:	2b00      	cmp	r3, #0
 800f0c0:	d001      	beq.n	800f0c6 <check_fs+0x2a>
 800f0c2:	2304      	movs	r3, #4
 800f0c4:	e038      	b.n	800f138 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	333c      	adds	r3, #60	; 0x3c
 800f0ca:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f0ce:	4618      	mov	r0, r3
 800f0d0:	f7fe f802 	bl	800d0d8 <ld_word>
 800f0d4:	4603      	mov	r3, r0
 800f0d6:	461a      	mov	r2, r3
 800f0d8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800f0dc:	429a      	cmp	r2, r3
 800f0de:	d001      	beq.n	800f0e4 <check_fs+0x48>
 800f0e0:	2303      	movs	r3, #3
 800f0e2:	e029      	b.n	800f138 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f0ea:	2be9      	cmp	r3, #233	; 0xe9
 800f0ec:	d009      	beq.n	800f102 <check_fs+0x66>
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f0f4:	2beb      	cmp	r3, #235	; 0xeb
 800f0f6:	d11e      	bne.n	800f136 <check_fs+0x9a>
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f0fe:	2b90      	cmp	r3, #144	; 0x90
 800f100:	d119      	bne.n	800f136 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	333c      	adds	r3, #60	; 0x3c
 800f106:	3336      	adds	r3, #54	; 0x36
 800f108:	4618      	mov	r0, r3
 800f10a:	f7fd fffd 	bl	800d108 <ld_dword>
 800f10e:	4603      	mov	r3, r0
 800f110:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800f114:	4a0a      	ldr	r2, [pc, #40]	; (800f140 <check_fs+0xa4>)
 800f116:	4293      	cmp	r3, r2
 800f118:	d101      	bne.n	800f11e <check_fs+0x82>
 800f11a:	2300      	movs	r3, #0
 800f11c:	e00c      	b.n	800f138 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	333c      	adds	r3, #60	; 0x3c
 800f122:	3352      	adds	r3, #82	; 0x52
 800f124:	4618      	mov	r0, r3
 800f126:	f7fd ffef 	bl	800d108 <ld_dword>
 800f12a:	4602      	mov	r2, r0
 800f12c:	4b05      	ldr	r3, [pc, #20]	; (800f144 <check_fs+0xa8>)
 800f12e:	429a      	cmp	r2, r3
 800f130:	d101      	bne.n	800f136 <check_fs+0x9a>
 800f132:	2300      	movs	r3, #0
 800f134:	e000      	b.n	800f138 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800f136:	2302      	movs	r3, #2
}
 800f138:	4618      	mov	r0, r3
 800f13a:	3708      	adds	r7, #8
 800f13c:	46bd      	mov	sp, r7
 800f13e:	bd80      	pop	{r7, pc}
 800f140:	00544146 	.word	0x00544146
 800f144:	33544146 	.word	0x33544146

0800f148 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800f148:	b580      	push	{r7, lr}
 800f14a:	b096      	sub	sp, #88	; 0x58
 800f14c:	af00      	add	r7, sp, #0
 800f14e:	60f8      	str	r0, [r7, #12]
 800f150:	60b9      	str	r1, [r7, #8]
 800f152:	4613      	mov	r3, r2
 800f154:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800f156:	68bb      	ldr	r3, [r7, #8]
 800f158:	2200      	movs	r2, #0
 800f15a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800f15c:	68f8      	ldr	r0, [r7, #12]
 800f15e:	f7ff ff58 	bl	800f012 <get_ldnumber>
 800f162:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800f164:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f166:	2b00      	cmp	r3, #0
 800f168:	da01      	bge.n	800f16e <find_volume+0x26>
 800f16a:	230b      	movs	r3, #11
 800f16c:	e26b      	b.n	800f646 <find_volume+0x4fe>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800f16e:	4ab0      	ldr	r2, [pc, #704]	; (800f430 <find_volume+0x2e8>)
 800f170:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f172:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f176:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800f178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d101      	bne.n	800f182 <find_volume+0x3a>
 800f17e:	230c      	movs	r3, #12
 800f180:	e261      	b.n	800f646 <find_volume+0x4fe>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800f182:	68bb      	ldr	r3, [r7, #8]
 800f184:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f186:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800f188:	79fb      	ldrb	r3, [r7, #7]
 800f18a:	f023 0301 	bic.w	r3, r3, #1
 800f18e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800f190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f192:	781b      	ldrb	r3, [r3, #0]
 800f194:	2b00      	cmp	r3, #0
 800f196:	d01a      	beq.n	800f1ce <find_volume+0x86>
		stat = disk_status(fs->drv);
 800f198:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f19a:	785b      	ldrb	r3, [r3, #1]
 800f19c:	4618      	mov	r0, r3
 800f19e:	f7fd fefd 	bl	800cf9c <disk_status>
 800f1a2:	4603      	mov	r3, r0
 800f1a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800f1a8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f1ac:	f003 0301 	and.w	r3, r3, #1
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d10c      	bne.n	800f1ce <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800f1b4:	79fb      	ldrb	r3, [r7, #7]
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d007      	beq.n	800f1ca <find_volume+0x82>
 800f1ba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f1be:	f003 0304 	and.w	r3, r3, #4
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d001      	beq.n	800f1ca <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800f1c6:	230a      	movs	r3, #10
 800f1c8:	e23d      	b.n	800f646 <find_volume+0x4fe>
			}
			return FR_OK;				/* The file system object is valid */
 800f1ca:	2300      	movs	r3, #0
 800f1cc:	e23b      	b.n	800f646 <find_volume+0x4fe>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800f1ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1d0:	2200      	movs	r2, #0
 800f1d2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800f1d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f1d6:	b2da      	uxtb	r2, r3
 800f1d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1da:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800f1dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1de:	785b      	ldrb	r3, [r3, #1]
 800f1e0:	4618      	mov	r0, r3
 800f1e2:	f7fd fef5 	bl	800cfd0 <disk_initialize>
 800f1e6:	4603      	mov	r3, r0
 800f1e8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800f1ec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f1f0:	f003 0301 	and.w	r3, r3, #1
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d001      	beq.n	800f1fc <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800f1f8:	2303      	movs	r3, #3
 800f1fa:	e224      	b.n	800f646 <find_volume+0x4fe>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800f1fc:	79fb      	ldrb	r3, [r7, #7]
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	d007      	beq.n	800f212 <find_volume+0xca>
 800f202:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f206:	f003 0304 	and.w	r3, r3, #4
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d001      	beq.n	800f212 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800f20e:	230a      	movs	r3, #10
 800f210:	e219      	b.n	800f646 <find_volume+0x4fe>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800f212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f214:	7858      	ldrb	r0, [r3, #1]
 800f216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f218:	330c      	adds	r3, #12
 800f21a:	461a      	mov	r2, r3
 800f21c:	2102      	movs	r1, #2
 800f21e:	f7fd ff3d 	bl	800d09c <disk_ioctl>
 800f222:	4603      	mov	r3, r0
 800f224:	2b00      	cmp	r3, #0
 800f226:	d001      	beq.n	800f22c <find_volume+0xe4>
 800f228:	2301      	movs	r3, #1
 800f22a:	e20c      	b.n	800f646 <find_volume+0x4fe>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800f22c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f22e:	899b      	ldrh	r3, [r3, #12]
 800f230:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f234:	d80d      	bhi.n	800f252 <find_volume+0x10a>
 800f236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f238:	899b      	ldrh	r3, [r3, #12]
 800f23a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f23e:	d308      	bcc.n	800f252 <find_volume+0x10a>
 800f240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f242:	899b      	ldrh	r3, [r3, #12]
 800f244:	461a      	mov	r2, r3
 800f246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f248:	899b      	ldrh	r3, [r3, #12]
 800f24a:	3b01      	subs	r3, #1
 800f24c:	4013      	ands	r3, r2
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d001      	beq.n	800f256 <find_volume+0x10e>
 800f252:	2301      	movs	r3, #1
 800f254:	e1f7      	b.n	800f646 <find_volume+0x4fe>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800f256:	2300      	movs	r3, #0
 800f258:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800f25a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f25c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f25e:	f7ff ff1d 	bl	800f09c <check_fs>
 800f262:	4603      	mov	r3, r0
 800f264:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800f268:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f26c:	2b02      	cmp	r3, #2
 800f26e:	d14b      	bne.n	800f308 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f270:	2300      	movs	r3, #0
 800f272:	643b      	str	r3, [r7, #64]	; 0x40
 800f274:	e01f      	b.n	800f2b6 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800f276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f278:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800f27c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f27e:	011b      	lsls	r3, r3, #4
 800f280:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800f284:	4413      	add	r3, r2
 800f286:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800f288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f28a:	3304      	adds	r3, #4
 800f28c:	781b      	ldrb	r3, [r3, #0]
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d006      	beq.n	800f2a0 <find_volume+0x158>
 800f292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f294:	3308      	adds	r3, #8
 800f296:	4618      	mov	r0, r3
 800f298:	f7fd ff36 	bl	800d108 <ld_dword>
 800f29c:	4602      	mov	r2, r0
 800f29e:	e000      	b.n	800f2a2 <find_volume+0x15a>
 800f2a0:	2200      	movs	r2, #0
 800f2a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f2a4:	009b      	lsls	r3, r3, #2
 800f2a6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800f2aa:	440b      	add	r3, r1
 800f2ac:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f2b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f2b2:	3301      	adds	r3, #1
 800f2b4:	643b      	str	r3, [r7, #64]	; 0x40
 800f2b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f2b8:	2b03      	cmp	r3, #3
 800f2ba:	d9dc      	bls.n	800f276 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800f2bc:	2300      	movs	r3, #0
 800f2be:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800f2c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d002      	beq.n	800f2cc <find_volume+0x184>
 800f2c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f2c8:	3b01      	subs	r3, #1
 800f2ca:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800f2cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f2ce:	009b      	lsls	r3, r3, #2
 800f2d0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800f2d4:	4413      	add	r3, r2
 800f2d6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800f2da:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800f2dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d005      	beq.n	800f2ee <find_volume+0x1a6>
 800f2e2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f2e4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f2e6:	f7ff fed9 	bl	800f09c <check_fs>
 800f2ea:	4603      	mov	r3, r0
 800f2ec:	e000      	b.n	800f2f0 <find_volume+0x1a8>
 800f2ee:	2303      	movs	r3, #3
 800f2f0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800f2f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f2f8:	2b01      	cmp	r3, #1
 800f2fa:	d905      	bls.n	800f308 <find_volume+0x1c0>
 800f2fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f2fe:	3301      	adds	r3, #1
 800f300:	643b      	str	r3, [r7, #64]	; 0x40
 800f302:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f304:	2b03      	cmp	r3, #3
 800f306:	d9e1      	bls.n	800f2cc <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800f308:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f30c:	2b04      	cmp	r3, #4
 800f30e:	d101      	bne.n	800f314 <find_volume+0x1cc>
 800f310:	2301      	movs	r3, #1
 800f312:	e198      	b.n	800f646 <find_volume+0x4fe>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800f314:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f318:	2b01      	cmp	r3, #1
 800f31a:	d901      	bls.n	800f320 <find_volume+0x1d8>
 800f31c:	230d      	movs	r3, #13
 800f31e:	e192      	b.n	800f646 <find_volume+0x4fe>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800f320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f322:	333c      	adds	r3, #60	; 0x3c
 800f324:	330b      	adds	r3, #11
 800f326:	4618      	mov	r0, r3
 800f328:	f7fd fed6 	bl	800d0d8 <ld_word>
 800f32c:	4603      	mov	r3, r0
 800f32e:	461a      	mov	r2, r3
 800f330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f332:	899b      	ldrh	r3, [r3, #12]
 800f334:	429a      	cmp	r2, r3
 800f336:	d001      	beq.n	800f33c <find_volume+0x1f4>
 800f338:	230d      	movs	r3, #13
 800f33a:	e184      	b.n	800f646 <find_volume+0x4fe>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800f33c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f33e:	333c      	adds	r3, #60	; 0x3c
 800f340:	3316      	adds	r3, #22
 800f342:	4618      	mov	r0, r3
 800f344:	f7fd fec8 	bl	800d0d8 <ld_word>
 800f348:	4603      	mov	r3, r0
 800f34a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800f34c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d106      	bne.n	800f360 <find_volume+0x218>
 800f352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f354:	333c      	adds	r3, #60	; 0x3c
 800f356:	3324      	adds	r3, #36	; 0x24
 800f358:	4618      	mov	r0, r3
 800f35a:	f7fd fed5 	bl	800d108 <ld_dword>
 800f35e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800f360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f362:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f364:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800f366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f368:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 800f36c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f36e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800f370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f372:	789b      	ldrb	r3, [r3, #2]
 800f374:	2b01      	cmp	r3, #1
 800f376:	d005      	beq.n	800f384 <find_volume+0x23c>
 800f378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f37a:	789b      	ldrb	r3, [r3, #2]
 800f37c:	2b02      	cmp	r3, #2
 800f37e:	d001      	beq.n	800f384 <find_volume+0x23c>
 800f380:	230d      	movs	r3, #13
 800f382:	e160      	b.n	800f646 <find_volume+0x4fe>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800f384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f386:	789b      	ldrb	r3, [r3, #2]
 800f388:	461a      	mov	r2, r3
 800f38a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f38c:	fb02 f303 	mul.w	r3, r2, r3
 800f390:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800f392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f394:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800f398:	b29a      	uxth	r2, r3
 800f39a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f39c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800f39e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3a0:	895b      	ldrh	r3, [r3, #10]
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d008      	beq.n	800f3b8 <find_volume+0x270>
 800f3a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3a8:	895b      	ldrh	r3, [r3, #10]
 800f3aa:	461a      	mov	r2, r3
 800f3ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3ae:	895b      	ldrh	r3, [r3, #10]
 800f3b0:	3b01      	subs	r3, #1
 800f3b2:	4013      	ands	r3, r2
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d001      	beq.n	800f3bc <find_volume+0x274>
 800f3b8:	230d      	movs	r3, #13
 800f3ba:	e144      	b.n	800f646 <find_volume+0x4fe>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800f3bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3be:	333c      	adds	r3, #60	; 0x3c
 800f3c0:	3311      	adds	r3, #17
 800f3c2:	4618      	mov	r0, r3
 800f3c4:	f7fd fe88 	bl	800d0d8 <ld_word>
 800f3c8:	4603      	mov	r3, r0
 800f3ca:	461a      	mov	r2, r3
 800f3cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3ce:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800f3d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3d2:	891b      	ldrh	r3, [r3, #8]
 800f3d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f3d6:	8992      	ldrh	r2, [r2, #12]
 800f3d8:	0952      	lsrs	r2, r2, #5
 800f3da:	b292      	uxth	r2, r2
 800f3dc:	fbb3 f1f2 	udiv	r1, r3, r2
 800f3e0:	fb02 f201 	mul.w	r2, r2, r1
 800f3e4:	1a9b      	subs	r3, r3, r2
 800f3e6:	b29b      	uxth	r3, r3
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d001      	beq.n	800f3f0 <find_volume+0x2a8>
 800f3ec:	230d      	movs	r3, #13
 800f3ee:	e12a      	b.n	800f646 <find_volume+0x4fe>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800f3f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3f2:	333c      	adds	r3, #60	; 0x3c
 800f3f4:	3313      	adds	r3, #19
 800f3f6:	4618      	mov	r0, r3
 800f3f8:	f7fd fe6e 	bl	800d0d8 <ld_word>
 800f3fc:	4603      	mov	r3, r0
 800f3fe:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800f400:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f402:	2b00      	cmp	r3, #0
 800f404:	d106      	bne.n	800f414 <find_volume+0x2cc>
 800f406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f408:	333c      	adds	r3, #60	; 0x3c
 800f40a:	3320      	adds	r3, #32
 800f40c:	4618      	mov	r0, r3
 800f40e:	f7fd fe7b 	bl	800d108 <ld_dword>
 800f412:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800f414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f416:	333c      	adds	r3, #60	; 0x3c
 800f418:	330e      	adds	r3, #14
 800f41a:	4618      	mov	r0, r3
 800f41c:	f7fd fe5c 	bl	800d0d8 <ld_word>
 800f420:	4603      	mov	r3, r0
 800f422:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800f424:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f426:	2b00      	cmp	r3, #0
 800f428:	d104      	bne.n	800f434 <find_volume+0x2ec>
 800f42a:	230d      	movs	r3, #13
 800f42c:	e10b      	b.n	800f646 <find_volume+0x4fe>
 800f42e:	bf00      	nop
 800f430:	20007b6c 	.word	0x20007b6c

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800f434:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f436:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f438:	4413      	add	r3, r2
 800f43a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f43c:	8911      	ldrh	r1, [r2, #8]
 800f43e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f440:	8992      	ldrh	r2, [r2, #12]
 800f442:	0952      	lsrs	r2, r2, #5
 800f444:	b292      	uxth	r2, r2
 800f446:	fbb1 f2f2 	udiv	r2, r1, r2
 800f44a:	b292      	uxth	r2, r2
 800f44c:	4413      	add	r3, r2
 800f44e:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800f450:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f454:	429a      	cmp	r2, r3
 800f456:	d201      	bcs.n	800f45c <find_volume+0x314>
 800f458:	230d      	movs	r3, #13
 800f45a:	e0f4      	b.n	800f646 <find_volume+0x4fe>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800f45c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f45e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f460:	1ad3      	subs	r3, r2, r3
 800f462:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f464:	8952      	ldrh	r2, [r2, #10]
 800f466:	fbb3 f3f2 	udiv	r3, r3, r2
 800f46a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800f46c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d101      	bne.n	800f476 <find_volume+0x32e>
 800f472:	230d      	movs	r3, #13
 800f474:	e0e7      	b.n	800f646 <find_volume+0x4fe>
		fmt = FS_FAT32;
 800f476:	2303      	movs	r3, #3
 800f478:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800f47c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f47e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800f482:	4293      	cmp	r3, r2
 800f484:	d802      	bhi.n	800f48c <find_volume+0x344>
 800f486:	2302      	movs	r3, #2
 800f488:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800f48c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f48e:	f640 72f5 	movw	r2, #4085	; 0xff5
 800f492:	4293      	cmp	r3, r2
 800f494:	d802      	bhi.n	800f49c <find_volume+0x354>
 800f496:	2301      	movs	r3, #1
 800f498:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800f49c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f49e:	1c9a      	adds	r2, r3, #2
 800f4a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4a2:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 800f4a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4a6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f4a8:	629a      	str	r2, [r3, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800f4aa:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f4ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f4ae:	441a      	add	r2, r3
 800f4b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4b2:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 800f4b4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f4b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4b8:	441a      	add	r2, r3
 800f4ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4bc:	635a      	str	r2, [r3, #52]	; 0x34
		if (fmt == FS_FAT32) {
 800f4be:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f4c2:	2b03      	cmp	r3, #3
 800f4c4:	d11e      	bne.n	800f504 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800f4c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4c8:	333c      	adds	r3, #60	; 0x3c
 800f4ca:	332a      	adds	r3, #42	; 0x2a
 800f4cc:	4618      	mov	r0, r3
 800f4ce:	f7fd fe03 	bl	800d0d8 <ld_word>
 800f4d2:	4603      	mov	r3, r0
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d001      	beq.n	800f4dc <find_volume+0x394>
 800f4d8:	230d      	movs	r3, #13
 800f4da:	e0b4      	b.n	800f646 <find_volume+0x4fe>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800f4dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4de:	891b      	ldrh	r3, [r3, #8]
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d001      	beq.n	800f4e8 <find_volume+0x3a0>
 800f4e4:	230d      	movs	r3, #13
 800f4e6:	e0ae      	b.n	800f646 <find_volume+0x4fe>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800f4e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4ea:	333c      	adds	r3, #60	; 0x3c
 800f4ec:	332c      	adds	r3, #44	; 0x2c
 800f4ee:	4618      	mov	r0, r3
 800f4f0:	f7fd fe0a 	bl	800d108 <ld_dword>
 800f4f4:	4602      	mov	r2, r0
 800f4f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4f8:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800f4fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4fc:	6a1b      	ldr	r3, [r3, #32]
 800f4fe:	009b      	lsls	r3, r3, #2
 800f500:	647b      	str	r3, [r7, #68]	; 0x44
 800f502:	e01f      	b.n	800f544 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800f504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f506:	891b      	ldrh	r3, [r3, #8]
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d101      	bne.n	800f510 <find_volume+0x3c8>
 800f50c:	230d      	movs	r3, #13
 800f50e:	e09a      	b.n	800f646 <find_volume+0x4fe>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800f510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f512:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f514:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f516:	441a      	add	r2, r3
 800f518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f51a:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800f51c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f520:	2b02      	cmp	r3, #2
 800f522:	d103      	bne.n	800f52c <find_volume+0x3e4>
 800f524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f526:	6a1b      	ldr	r3, [r3, #32]
 800f528:	005b      	lsls	r3, r3, #1
 800f52a:	e00a      	b.n	800f542 <find_volume+0x3fa>
 800f52c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f52e:	6a1a      	ldr	r2, [r3, #32]
 800f530:	4613      	mov	r3, r2
 800f532:	005b      	lsls	r3, r3, #1
 800f534:	4413      	add	r3, r2
 800f536:	085a      	lsrs	r2, r3, #1
 800f538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f53a:	6a1b      	ldr	r3, [r3, #32]
 800f53c:	f003 0301 	and.w	r3, r3, #1
 800f540:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800f542:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800f544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f546:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f54a:	899b      	ldrh	r3, [r3, #12]
 800f54c:	4619      	mov	r1, r3
 800f54e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f550:	440b      	add	r3, r1
 800f552:	3b01      	subs	r3, #1
 800f554:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f556:	8989      	ldrh	r1, [r1, #12]
 800f558:	fbb3 f3f1 	udiv	r3, r3, r1
 800f55c:	429a      	cmp	r2, r3
 800f55e:	d201      	bcs.n	800f564 <find_volume+0x41c>
 800f560:	230d      	movs	r3, #13
 800f562:	e070      	b.n	800f646 <find_volume+0x4fe>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800f564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f566:	f04f 32ff 	mov.w	r2, #4294967295
 800f56a:	619a      	str	r2, [r3, #24]
 800f56c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f56e:	699a      	ldr	r2, [r3, #24]
 800f570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f572:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800f574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f576:	2280      	movs	r2, #128	; 0x80
 800f578:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800f57a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f57e:	2b03      	cmp	r3, #3
 800f580:	d149      	bne.n	800f616 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800f582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f584:	333c      	adds	r3, #60	; 0x3c
 800f586:	3330      	adds	r3, #48	; 0x30
 800f588:	4618      	mov	r0, r3
 800f58a:	f7fd fda5 	bl	800d0d8 <ld_word>
 800f58e:	4603      	mov	r3, r0
 800f590:	2b01      	cmp	r3, #1
 800f592:	d140      	bne.n	800f616 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 800f594:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f596:	3301      	adds	r3, #1
 800f598:	4619      	mov	r1, r3
 800f59a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f59c:	f7fe f84c 	bl	800d638 <move_window>
 800f5a0:	4603      	mov	r3, r0
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d137      	bne.n	800f616 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 800f5a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5a8:	2200      	movs	r2, #0
 800f5aa:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800f5ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5ae:	333c      	adds	r3, #60	; 0x3c
 800f5b0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f5b4:	4618      	mov	r0, r3
 800f5b6:	f7fd fd8f 	bl	800d0d8 <ld_word>
 800f5ba:	4603      	mov	r3, r0
 800f5bc:	461a      	mov	r2, r3
 800f5be:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800f5c2:	429a      	cmp	r2, r3
 800f5c4:	d127      	bne.n	800f616 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800f5c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5c8:	333c      	adds	r3, #60	; 0x3c
 800f5ca:	4618      	mov	r0, r3
 800f5cc:	f7fd fd9c 	bl	800d108 <ld_dword>
 800f5d0:	4602      	mov	r2, r0
 800f5d2:	4b1f      	ldr	r3, [pc, #124]	; (800f650 <find_volume+0x508>)
 800f5d4:	429a      	cmp	r2, r3
 800f5d6:	d11e      	bne.n	800f616 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800f5d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5da:	333c      	adds	r3, #60	; 0x3c
 800f5dc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800f5e0:	4618      	mov	r0, r3
 800f5e2:	f7fd fd91 	bl	800d108 <ld_dword>
 800f5e6:	4602      	mov	r2, r0
 800f5e8:	4b1a      	ldr	r3, [pc, #104]	; (800f654 <find_volume+0x50c>)
 800f5ea:	429a      	cmp	r2, r3
 800f5ec:	d113      	bne.n	800f616 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800f5ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5f0:	333c      	adds	r3, #60	; 0x3c
 800f5f2:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800f5f6:	4618      	mov	r0, r3
 800f5f8:	f7fd fd86 	bl	800d108 <ld_dword>
 800f5fc:	4602      	mov	r2, r0
 800f5fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f600:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800f602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f604:	333c      	adds	r3, #60	; 0x3c
 800f606:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800f60a:	4618      	mov	r0, r3
 800f60c:	f7fd fd7c 	bl	800d108 <ld_dword>
 800f610:	4602      	mov	r2, r0
 800f612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f614:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800f616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f618:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800f61c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800f61e:	4b0e      	ldr	r3, [pc, #56]	; (800f658 <find_volume+0x510>)
 800f620:	881b      	ldrh	r3, [r3, #0]
 800f622:	3301      	adds	r3, #1
 800f624:	b29a      	uxth	r2, r3
 800f626:	4b0c      	ldr	r3, [pc, #48]	; (800f658 <find_volume+0x510>)
 800f628:	801a      	strh	r2, [r3, #0]
 800f62a:	4b0b      	ldr	r3, [pc, #44]	; (800f658 <find_volume+0x510>)
 800f62c:	881a      	ldrh	r2, [r3, #0]
 800f62e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f630:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800f632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f634:	4a09      	ldr	r2, [pc, #36]	; (800f65c <find_volume+0x514>)
 800f636:	611a      	str	r2, [r3, #16]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
#endif
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 800f638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f63a:	2200      	movs	r2, #0
 800f63c:	61da      	str	r2, [r3, #28]
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800f63e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f640:	f7fd ff92 	bl	800d568 <clear_lock>
#endif
	return FR_OK;
 800f644:	2300      	movs	r3, #0
}
 800f646:	4618      	mov	r0, r3
 800f648:	3758      	adds	r7, #88	; 0x58
 800f64a:	46bd      	mov	sp, r7
 800f64c:	bd80      	pop	{r7, pc}
 800f64e:	bf00      	nop
 800f650:	41615252 	.word	0x41615252
 800f654:	61417272 	.word	0x61417272
 800f658:	20007b70 	.word	0x20007b70
 800f65c:	20007b94 	.word	0x20007b94

0800f660 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800f660:	b580      	push	{r7, lr}
 800f662:	b084      	sub	sp, #16
 800f664:	af00      	add	r7, sp, #0
 800f666:	6078      	str	r0, [r7, #4]
 800f668:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800f66a:	2309      	movs	r3, #9
 800f66c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	2b00      	cmp	r3, #0
 800f672:	d01c      	beq.n	800f6ae <validate+0x4e>
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	681b      	ldr	r3, [r3, #0]
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d018      	beq.n	800f6ae <validate+0x4e>
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	681b      	ldr	r3, [r3, #0]
 800f680:	781b      	ldrb	r3, [r3, #0]
 800f682:	2b00      	cmp	r3, #0
 800f684:	d013      	beq.n	800f6ae <validate+0x4e>
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	889a      	ldrh	r2, [r3, #4]
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	88db      	ldrh	r3, [r3, #6]
 800f690:	429a      	cmp	r2, r3
 800f692:	d10c      	bne.n	800f6ae <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	785b      	ldrb	r3, [r3, #1]
 800f69a:	4618      	mov	r0, r3
 800f69c:	f7fd fc7e 	bl	800cf9c <disk_status>
 800f6a0:	4603      	mov	r3, r0
 800f6a2:	f003 0301 	and.w	r3, r3, #1
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d101      	bne.n	800f6ae <validate+0x4e>
			res = FR_OK;
 800f6aa:	2300      	movs	r3, #0
 800f6ac:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800f6ae:	7bfb      	ldrb	r3, [r7, #15]
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d102      	bne.n	800f6ba <validate+0x5a>
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	e000      	b.n	800f6bc <validate+0x5c>
 800f6ba:	2300      	movs	r3, #0
 800f6bc:	683a      	ldr	r2, [r7, #0]
 800f6be:	6013      	str	r3, [r2, #0]
	return res;
 800f6c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f6c2:	4618      	mov	r0, r3
 800f6c4:	3710      	adds	r7, #16
 800f6c6:	46bd      	mov	sp, r7
 800f6c8:	bd80      	pop	{r7, pc}
	...

0800f6cc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800f6cc:	b580      	push	{r7, lr}
 800f6ce:	b088      	sub	sp, #32
 800f6d0:	af00      	add	r7, sp, #0
 800f6d2:	60f8      	str	r0, [r7, #12]
 800f6d4:	60b9      	str	r1, [r7, #8]
 800f6d6:	4613      	mov	r3, r2
 800f6d8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800f6da:	68bb      	ldr	r3, [r7, #8]
 800f6dc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800f6de:	f107 0310 	add.w	r3, r7, #16
 800f6e2:	4618      	mov	r0, r3
 800f6e4:	f7ff fc95 	bl	800f012 <get_ldnumber>
 800f6e8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800f6ea:	69fb      	ldr	r3, [r7, #28]
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	da01      	bge.n	800f6f4 <f_mount+0x28>
 800f6f0:	230b      	movs	r3, #11
 800f6f2:	e02b      	b.n	800f74c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800f6f4:	4a17      	ldr	r2, [pc, #92]	; (800f754 <f_mount+0x88>)
 800f6f6:	69fb      	ldr	r3, [r7, #28]
 800f6f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f6fc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800f6fe:	69bb      	ldr	r3, [r7, #24]
 800f700:	2b00      	cmp	r3, #0
 800f702:	d005      	beq.n	800f710 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800f704:	69b8      	ldr	r0, [r7, #24]
 800f706:	f7fd ff2f 	bl	800d568 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800f70a:	69bb      	ldr	r3, [r7, #24]
 800f70c:	2200      	movs	r2, #0
 800f70e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800f710:	68fb      	ldr	r3, [r7, #12]
 800f712:	2b00      	cmp	r3, #0
 800f714:	d002      	beq.n	800f71c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800f716:	68fb      	ldr	r3, [r7, #12]
 800f718:	2200      	movs	r2, #0
 800f71a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800f71c:	68fa      	ldr	r2, [r7, #12]
 800f71e:	490d      	ldr	r1, [pc, #52]	; (800f754 <f_mount+0x88>)
 800f720:	69fb      	ldr	r3, [r7, #28]
 800f722:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d002      	beq.n	800f732 <f_mount+0x66>
 800f72c:	79fb      	ldrb	r3, [r7, #7]
 800f72e:	2b01      	cmp	r3, #1
 800f730:	d001      	beq.n	800f736 <f_mount+0x6a>
 800f732:	2300      	movs	r3, #0
 800f734:	e00a      	b.n	800f74c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800f736:	f107 010c 	add.w	r1, r7, #12
 800f73a:	f107 0308 	add.w	r3, r7, #8
 800f73e:	2200      	movs	r2, #0
 800f740:	4618      	mov	r0, r3
 800f742:	f7ff fd01 	bl	800f148 <find_volume>
 800f746:	4603      	mov	r3, r0
 800f748:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800f74a:	7dfb      	ldrb	r3, [r7, #23]
}
 800f74c:	4618      	mov	r0, r3
 800f74e:	3720      	adds	r7, #32
 800f750:	46bd      	mov	sp, r7
 800f752:	bd80      	pop	{r7, pc}
 800f754:	20007b6c 	.word	0x20007b6c

0800f758 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800f758:	b580      	push	{r7, lr}
 800f75a:	b09a      	sub	sp, #104	; 0x68
 800f75c:	af00      	add	r7, sp, #0
 800f75e:	60f8      	str	r0, [r7, #12]
 800f760:	60b9      	str	r1, [r7, #8]
 800f762:	4613      	mov	r3, r2
 800f764:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d101      	bne.n	800f770 <f_open+0x18>
 800f76c:	2309      	movs	r3, #9
 800f76e:	e1bb      	b.n	800fae8 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800f770:	79fb      	ldrb	r3, [r7, #7]
 800f772:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f776:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800f778:	79fa      	ldrb	r2, [r7, #7]
 800f77a:	f107 0114 	add.w	r1, r7, #20
 800f77e:	f107 0308 	add.w	r3, r7, #8
 800f782:	4618      	mov	r0, r3
 800f784:	f7ff fce0 	bl	800f148 <find_volume>
 800f788:	4603      	mov	r3, r0
 800f78a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800f78e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f792:	2b00      	cmp	r3, #0
 800f794:	f040 819f 	bne.w	800fad6 <f_open+0x37e>
		dj.obj.fs = fs;
 800f798:	697b      	ldr	r3, [r7, #20]
 800f79a:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800f79c:	68ba      	ldr	r2, [r7, #8]
 800f79e:	f107 0318 	add.w	r3, r7, #24
 800f7a2:	4611      	mov	r1, r2
 800f7a4:	4618      	mov	r0, r3
 800f7a6:	f7ff fb9f 	bl	800eee8 <follow_path>
 800f7aa:	4603      	mov	r3, r0
 800f7ac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800f7b0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	d11a      	bne.n	800f7ee <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800f7b8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800f7bc:	b25b      	sxtb	r3, r3
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	da03      	bge.n	800f7ca <f_open+0x72>
				res = FR_INVALID_NAME;
 800f7c2:	2306      	movs	r3, #6
 800f7c4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800f7c8:	e011      	b.n	800f7ee <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f7ca:	79fb      	ldrb	r3, [r7, #7]
 800f7cc:	f023 0301 	bic.w	r3, r3, #1
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	bf14      	ite	ne
 800f7d4:	2301      	movne	r3, #1
 800f7d6:	2300      	moveq	r3, #0
 800f7d8:	b2db      	uxtb	r3, r3
 800f7da:	461a      	mov	r2, r3
 800f7dc:	f107 0318 	add.w	r3, r7, #24
 800f7e0:	4611      	mov	r1, r2
 800f7e2:	4618      	mov	r0, r3
 800f7e4:	f7fd fd78 	bl	800d2d8 <chk_lock>
 800f7e8:	4603      	mov	r3, r0
 800f7ea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800f7ee:	79fb      	ldrb	r3, [r7, #7]
 800f7f0:	f003 031c 	and.w	r3, r3, #28
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d07f      	beq.n	800f8f8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800f7f8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d017      	beq.n	800f830 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800f800:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f804:	2b04      	cmp	r3, #4
 800f806:	d10e      	bne.n	800f826 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800f808:	f7fd fdc2 	bl	800d390 <enq_lock>
 800f80c:	4603      	mov	r3, r0
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d006      	beq.n	800f820 <f_open+0xc8>
 800f812:	f107 0318 	add.w	r3, r7, #24
 800f816:	4618      	mov	r0, r3
 800f818:	f7ff f820 	bl	800e85c <dir_register>
 800f81c:	4603      	mov	r3, r0
 800f81e:	e000      	b.n	800f822 <f_open+0xca>
 800f820:	2312      	movs	r3, #18
 800f822:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800f826:	79fb      	ldrb	r3, [r7, #7]
 800f828:	f043 0308 	orr.w	r3, r3, #8
 800f82c:	71fb      	strb	r3, [r7, #7]
 800f82e:	e010      	b.n	800f852 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800f830:	7fbb      	ldrb	r3, [r7, #30]
 800f832:	f003 0311 	and.w	r3, r3, #17
 800f836:	2b00      	cmp	r3, #0
 800f838:	d003      	beq.n	800f842 <f_open+0xea>
					res = FR_DENIED;
 800f83a:	2307      	movs	r3, #7
 800f83c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800f840:	e007      	b.n	800f852 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800f842:	79fb      	ldrb	r3, [r7, #7]
 800f844:	f003 0304 	and.w	r3, r3, #4
 800f848:	2b00      	cmp	r3, #0
 800f84a:	d002      	beq.n	800f852 <f_open+0xfa>
 800f84c:	2308      	movs	r3, #8
 800f84e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800f852:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f856:	2b00      	cmp	r3, #0
 800f858:	d168      	bne.n	800f92c <f_open+0x1d4>
 800f85a:	79fb      	ldrb	r3, [r7, #7]
 800f85c:	f003 0308 	and.w	r3, r3, #8
 800f860:	2b00      	cmp	r3, #0
 800f862:	d063      	beq.n	800f92c <f_open+0x1d4>
				dw = GET_FATTIME();
 800f864:	f7fd f94a 	bl	800cafc <get_fattime>
 800f868:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800f86a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f86c:	330e      	adds	r3, #14
 800f86e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f870:	4618      	mov	r0, r3
 800f872:	f7fd fc87 	bl	800d184 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800f876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f878:	3316      	adds	r3, #22
 800f87a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f87c:	4618      	mov	r0, r3
 800f87e:	f7fd fc81 	bl	800d184 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800f882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f884:	330b      	adds	r3, #11
 800f886:	2220      	movs	r2, #32
 800f888:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800f88a:	697b      	ldr	r3, [r7, #20]
 800f88c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f88e:	4611      	mov	r1, r2
 800f890:	4618      	mov	r0, r3
 800f892:	f7fe fc50 	bl	800e136 <ld_clust>
 800f896:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800f898:	697b      	ldr	r3, [r7, #20]
 800f89a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f89c:	2200      	movs	r2, #0
 800f89e:	4618      	mov	r0, r3
 800f8a0:	f7fe fc68 	bl	800e174 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800f8a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8a6:	331c      	adds	r3, #28
 800f8a8:	2100      	movs	r1, #0
 800f8aa:	4618      	mov	r0, r3
 800f8ac:	f7fd fc6a 	bl	800d184 <st_dword>
					fs->wflag = 1;
 800f8b0:	697b      	ldr	r3, [r7, #20]
 800f8b2:	2201      	movs	r2, #1
 800f8b4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800f8b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f8b8:	2b00      	cmp	r3, #0
 800f8ba:	d037      	beq.n	800f92c <f_open+0x1d4>
						dw = fs->winsect;
 800f8bc:	697b      	ldr	r3, [r7, #20]
 800f8be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f8c0:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800f8c2:	f107 0318 	add.w	r3, r7, #24
 800f8c6:	2200      	movs	r2, #0
 800f8c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f8ca:	4618      	mov	r0, r3
 800f8cc:	f7fe f958 	bl	800db80 <remove_chain>
 800f8d0:	4603      	mov	r3, r0
 800f8d2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800f8d6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d126      	bne.n	800f92c <f_open+0x1d4>
							res = move_window(fs, dw);
 800f8de:	697b      	ldr	r3, [r7, #20]
 800f8e0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f8e2:	4618      	mov	r0, r3
 800f8e4:	f7fd fea8 	bl	800d638 <move_window>
 800f8e8:	4603      	mov	r3, r0
 800f8ea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800f8ee:	697b      	ldr	r3, [r7, #20]
 800f8f0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f8f2:	3a01      	subs	r2, #1
 800f8f4:	615a      	str	r2, [r3, #20]
 800f8f6:	e019      	b.n	800f92c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800f8f8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d115      	bne.n	800f92c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800f900:	7fbb      	ldrb	r3, [r7, #30]
 800f902:	f003 0310 	and.w	r3, r3, #16
 800f906:	2b00      	cmp	r3, #0
 800f908:	d003      	beq.n	800f912 <f_open+0x1ba>
					res = FR_NO_FILE;
 800f90a:	2304      	movs	r3, #4
 800f90c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800f910:	e00c      	b.n	800f92c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800f912:	79fb      	ldrb	r3, [r7, #7]
 800f914:	f003 0302 	and.w	r3, r3, #2
 800f918:	2b00      	cmp	r3, #0
 800f91a:	d007      	beq.n	800f92c <f_open+0x1d4>
 800f91c:	7fbb      	ldrb	r3, [r7, #30]
 800f91e:	f003 0301 	and.w	r3, r3, #1
 800f922:	2b00      	cmp	r3, #0
 800f924:	d002      	beq.n	800f92c <f_open+0x1d4>
						res = FR_DENIED;
 800f926:	2307      	movs	r3, #7
 800f928:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800f92c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f930:	2b00      	cmp	r3, #0
 800f932:	d128      	bne.n	800f986 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800f934:	79fb      	ldrb	r3, [r7, #7]
 800f936:	f003 0308 	and.w	r3, r3, #8
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	d003      	beq.n	800f946 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800f93e:	79fb      	ldrb	r3, [r7, #7]
 800f940:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f944:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800f946:	697b      	ldr	r3, [r7, #20]
 800f948:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f94a:	68fb      	ldr	r3, [r7, #12]
 800f94c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800f94e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f950:	68fb      	ldr	r3, [r7, #12]
 800f952:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f954:	79fb      	ldrb	r3, [r7, #7]
 800f956:	f023 0301 	bic.w	r3, r3, #1
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	bf14      	ite	ne
 800f95e:	2301      	movne	r3, #1
 800f960:	2300      	moveq	r3, #0
 800f962:	b2db      	uxtb	r3, r3
 800f964:	461a      	mov	r2, r3
 800f966:	f107 0318 	add.w	r3, r7, #24
 800f96a:	4611      	mov	r1, r2
 800f96c:	4618      	mov	r0, r3
 800f96e:	f7fd fd31 	bl	800d3d4 <inc_lock>
 800f972:	4602      	mov	r2, r0
 800f974:	68fb      	ldr	r3, [r7, #12]
 800f976:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800f978:	68fb      	ldr	r3, [r7, #12]
 800f97a:	691b      	ldr	r3, [r3, #16]
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d102      	bne.n	800f986 <f_open+0x22e>
 800f980:	2302      	movs	r3, #2
 800f982:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800f986:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	f040 80a3 	bne.w	800fad6 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800f990:	697b      	ldr	r3, [r7, #20]
 800f992:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f994:	4611      	mov	r1, r2
 800f996:	4618      	mov	r0, r3
 800f998:	f7fe fbcd 	bl	800e136 <ld_clust>
 800f99c:	4602      	mov	r2, r0
 800f99e:	68fb      	ldr	r3, [r7, #12]
 800f9a0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800f9a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9a4:	331c      	adds	r3, #28
 800f9a6:	4618      	mov	r0, r3
 800f9a8:	f7fd fbae 	bl	800d108 <ld_dword>
 800f9ac:	4602      	mov	r2, r0
 800f9ae:	68fb      	ldr	r3, [r7, #12]
 800f9b0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800f9b2:	68fb      	ldr	r3, [r7, #12]
 800f9b4:	2200      	movs	r2, #0
 800f9b6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800f9b8:	697a      	ldr	r2, [r7, #20]
 800f9ba:	68fb      	ldr	r3, [r7, #12]
 800f9bc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800f9be:	697b      	ldr	r3, [r7, #20]
 800f9c0:	88da      	ldrh	r2, [r3, #6]
 800f9c2:	68fb      	ldr	r3, [r7, #12]
 800f9c4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800f9c6:	68fb      	ldr	r3, [r7, #12]
 800f9c8:	79fa      	ldrb	r2, [r7, #7]
 800f9ca:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800f9cc:	68fb      	ldr	r3, [r7, #12]
 800f9ce:	2200      	movs	r2, #0
 800f9d0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800f9d2:	68fb      	ldr	r3, [r7, #12]
 800f9d4:	2200      	movs	r2, #0
 800f9d6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800f9d8:	68fb      	ldr	r3, [r7, #12]
 800f9da:	2200      	movs	r2, #0
 800f9dc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800f9de:	68fb      	ldr	r3, [r7, #12]
 800f9e0:	3330      	adds	r3, #48	; 0x30
 800f9e2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800f9e6:	2100      	movs	r1, #0
 800f9e8:	4618      	mov	r0, r3
 800f9ea:	f7fd fc18 	bl	800d21e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800f9ee:	79fb      	ldrb	r3, [r7, #7]
 800f9f0:	f003 0320 	and.w	r3, r3, #32
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	d06e      	beq.n	800fad6 <f_open+0x37e>
 800f9f8:	68fb      	ldr	r3, [r7, #12]
 800f9fa:	68db      	ldr	r3, [r3, #12]
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d06a      	beq.n	800fad6 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800fa00:	68fb      	ldr	r3, [r7, #12]
 800fa02:	68da      	ldr	r2, [r3, #12]
 800fa04:	68fb      	ldr	r3, [r7, #12]
 800fa06:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800fa08:	697b      	ldr	r3, [r7, #20]
 800fa0a:	895b      	ldrh	r3, [r3, #10]
 800fa0c:	461a      	mov	r2, r3
 800fa0e:	697b      	ldr	r3, [r7, #20]
 800fa10:	899b      	ldrh	r3, [r3, #12]
 800fa12:	fb03 f302 	mul.w	r3, r3, r2
 800fa16:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800fa18:	68fb      	ldr	r3, [r7, #12]
 800fa1a:	689b      	ldr	r3, [r3, #8]
 800fa1c:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	68db      	ldr	r3, [r3, #12]
 800fa22:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fa24:	e016      	b.n	800fa54 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800fa2a:	4618      	mov	r0, r3
 800fa2c:	f7fd fec1 	bl	800d7b2 <get_fat>
 800fa30:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800fa32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fa34:	2b01      	cmp	r3, #1
 800fa36:	d802      	bhi.n	800fa3e <f_open+0x2e6>
 800fa38:	2302      	movs	r3, #2
 800fa3a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800fa3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fa40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa44:	d102      	bne.n	800fa4c <f_open+0x2f4>
 800fa46:	2301      	movs	r3, #1
 800fa48:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800fa4c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fa4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa50:	1ad3      	subs	r3, r2, r3
 800fa52:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fa54:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d103      	bne.n	800fa64 <f_open+0x30c>
 800fa5c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800fa5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa60:	429a      	cmp	r2, r3
 800fa62:	d8e0      	bhi.n	800fa26 <f_open+0x2ce>
				}
				fp->clust = clst;
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800fa68:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800fa6a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d131      	bne.n	800fad6 <f_open+0x37e>
 800fa72:	697b      	ldr	r3, [r7, #20]
 800fa74:	899b      	ldrh	r3, [r3, #12]
 800fa76:	461a      	mov	r2, r3
 800fa78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fa7a:	fbb3 f1f2 	udiv	r1, r3, r2
 800fa7e:	fb02 f201 	mul.w	r2, r2, r1
 800fa82:	1a9b      	subs	r3, r3, r2
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d026      	beq.n	800fad6 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800fa88:	697b      	ldr	r3, [r7, #20]
 800fa8a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800fa8c:	4618      	mov	r0, r3
 800fa8e:	f7fd fe71 	bl	800d774 <clust2sect>
 800fa92:	64f8      	str	r0, [r7, #76]	; 0x4c
 800fa94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d103      	bne.n	800faa2 <f_open+0x34a>
						res = FR_INT_ERR;
 800fa9a:	2302      	movs	r3, #2
 800fa9c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800faa0:	e019      	b.n	800fad6 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800faa2:	697b      	ldr	r3, [r7, #20]
 800faa4:	899b      	ldrh	r3, [r3, #12]
 800faa6:	461a      	mov	r2, r3
 800faa8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800faaa:	fbb3 f2f2 	udiv	r2, r3, r2
 800faae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fab0:	441a      	add	r2, r3
 800fab2:	68fb      	ldr	r3, [r7, #12]
 800fab4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800fab6:	697b      	ldr	r3, [r7, #20]
 800fab8:	7858      	ldrb	r0, [r3, #1]
 800faba:	68fb      	ldr	r3, [r7, #12]
 800fabc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fac0:	68fb      	ldr	r3, [r7, #12]
 800fac2:	6a1a      	ldr	r2, [r3, #32]
 800fac4:	2301      	movs	r3, #1
 800fac6:	f7fd faa9 	bl	800d01c <disk_read>
 800faca:	4603      	mov	r3, r0
 800facc:	2b00      	cmp	r3, #0
 800face:	d002      	beq.n	800fad6 <f_open+0x37e>
 800fad0:	2301      	movs	r3, #1
 800fad2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800fad6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d002      	beq.n	800fae4 <f_open+0x38c>
 800fade:	68fb      	ldr	r3, [r7, #12]
 800fae0:	2200      	movs	r2, #0
 800fae2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800fae4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800fae8:	4618      	mov	r0, r3
 800faea:	3768      	adds	r7, #104	; 0x68
 800faec:	46bd      	mov	sp, r7
 800faee:	bd80      	pop	{r7, pc}

0800faf0 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800faf0:	b580      	push	{r7, lr}
 800faf2:	b08e      	sub	sp, #56	; 0x38
 800faf4:	af00      	add	r7, sp, #0
 800faf6:	60f8      	str	r0, [r7, #12]
 800faf8:	60b9      	str	r1, [r7, #8]
 800fafa:	607a      	str	r2, [r7, #4]
 800fafc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800fafe:	68bb      	ldr	r3, [r7, #8]
 800fb00:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800fb02:	683b      	ldr	r3, [r7, #0]
 800fb04:	2200      	movs	r2, #0
 800fb06:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800fb08:	68fb      	ldr	r3, [r7, #12]
 800fb0a:	f107 0214 	add.w	r2, r7, #20
 800fb0e:	4611      	mov	r1, r2
 800fb10:	4618      	mov	r0, r3
 800fb12:	f7ff fda5 	bl	800f660 <validate>
 800fb16:	4603      	mov	r3, r0
 800fb18:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800fb1c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	d107      	bne.n	800fb34 <f_read+0x44>
 800fb24:	68fb      	ldr	r3, [r7, #12]
 800fb26:	7d5b      	ldrb	r3, [r3, #21]
 800fb28:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800fb2c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d002      	beq.n	800fb3a <f_read+0x4a>
 800fb34:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fb38:	e135      	b.n	800fda6 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800fb3a:	68fb      	ldr	r3, [r7, #12]
 800fb3c:	7d1b      	ldrb	r3, [r3, #20]
 800fb3e:	f003 0301 	and.w	r3, r3, #1
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d101      	bne.n	800fb4a <f_read+0x5a>
 800fb46:	2307      	movs	r3, #7
 800fb48:	e12d      	b.n	800fda6 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 800fb4a:	68fb      	ldr	r3, [r7, #12]
 800fb4c:	68da      	ldr	r2, [r3, #12]
 800fb4e:	68fb      	ldr	r3, [r7, #12]
 800fb50:	699b      	ldr	r3, [r3, #24]
 800fb52:	1ad3      	subs	r3, r2, r3
 800fb54:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800fb56:	687a      	ldr	r2, [r7, #4]
 800fb58:	6a3b      	ldr	r3, [r7, #32]
 800fb5a:	429a      	cmp	r2, r3
 800fb5c:	f240 811e 	bls.w	800fd9c <f_read+0x2ac>
 800fb60:	6a3b      	ldr	r3, [r7, #32]
 800fb62:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800fb64:	e11a      	b.n	800fd9c <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800fb66:	68fb      	ldr	r3, [r7, #12]
 800fb68:	699b      	ldr	r3, [r3, #24]
 800fb6a:	697a      	ldr	r2, [r7, #20]
 800fb6c:	8992      	ldrh	r2, [r2, #12]
 800fb6e:	fbb3 f1f2 	udiv	r1, r3, r2
 800fb72:	fb02 f201 	mul.w	r2, r2, r1
 800fb76:	1a9b      	subs	r3, r3, r2
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	f040 80d5 	bne.w	800fd28 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800fb7e:	68fb      	ldr	r3, [r7, #12]
 800fb80:	699b      	ldr	r3, [r3, #24]
 800fb82:	697a      	ldr	r2, [r7, #20]
 800fb84:	8992      	ldrh	r2, [r2, #12]
 800fb86:	fbb3 f3f2 	udiv	r3, r3, r2
 800fb8a:	697a      	ldr	r2, [r7, #20]
 800fb8c:	8952      	ldrh	r2, [r2, #10]
 800fb8e:	3a01      	subs	r2, #1
 800fb90:	4013      	ands	r3, r2
 800fb92:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800fb94:	69fb      	ldr	r3, [r7, #28]
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d12f      	bne.n	800fbfa <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800fb9a:	68fb      	ldr	r3, [r7, #12]
 800fb9c:	699b      	ldr	r3, [r3, #24]
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d103      	bne.n	800fbaa <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800fba2:	68fb      	ldr	r3, [r7, #12]
 800fba4:	689b      	ldr	r3, [r3, #8]
 800fba6:	633b      	str	r3, [r7, #48]	; 0x30
 800fba8:	e013      	b.n	800fbd2 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800fbaa:	68fb      	ldr	r3, [r7, #12]
 800fbac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d007      	beq.n	800fbc2 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800fbb2:	68fb      	ldr	r3, [r7, #12]
 800fbb4:	699b      	ldr	r3, [r3, #24]
 800fbb6:	4619      	mov	r1, r3
 800fbb8:	68f8      	ldr	r0, [r7, #12]
 800fbba:	f7fe f8de 	bl	800dd7a <clmt_clust>
 800fbbe:	6338      	str	r0, [r7, #48]	; 0x30
 800fbc0:	e007      	b.n	800fbd2 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800fbc2:	68fa      	ldr	r2, [r7, #12]
 800fbc4:	68fb      	ldr	r3, [r7, #12]
 800fbc6:	69db      	ldr	r3, [r3, #28]
 800fbc8:	4619      	mov	r1, r3
 800fbca:	4610      	mov	r0, r2
 800fbcc:	f7fd fdf1 	bl	800d7b2 <get_fat>
 800fbd0:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800fbd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbd4:	2b01      	cmp	r3, #1
 800fbd6:	d804      	bhi.n	800fbe2 <f_read+0xf2>
 800fbd8:	68fb      	ldr	r3, [r7, #12]
 800fbda:	2202      	movs	r2, #2
 800fbdc:	755a      	strb	r2, [r3, #21]
 800fbde:	2302      	movs	r3, #2
 800fbe0:	e0e1      	b.n	800fda6 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800fbe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fbe8:	d104      	bne.n	800fbf4 <f_read+0x104>
 800fbea:	68fb      	ldr	r3, [r7, #12]
 800fbec:	2201      	movs	r2, #1
 800fbee:	755a      	strb	r2, [r3, #21]
 800fbf0:	2301      	movs	r3, #1
 800fbf2:	e0d8      	b.n	800fda6 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fbf8:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800fbfa:	697a      	ldr	r2, [r7, #20]
 800fbfc:	68fb      	ldr	r3, [r7, #12]
 800fbfe:	69db      	ldr	r3, [r3, #28]
 800fc00:	4619      	mov	r1, r3
 800fc02:	4610      	mov	r0, r2
 800fc04:	f7fd fdb6 	bl	800d774 <clust2sect>
 800fc08:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800fc0a:	69bb      	ldr	r3, [r7, #24]
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d104      	bne.n	800fc1a <f_read+0x12a>
 800fc10:	68fb      	ldr	r3, [r7, #12]
 800fc12:	2202      	movs	r2, #2
 800fc14:	755a      	strb	r2, [r3, #21]
 800fc16:	2302      	movs	r3, #2
 800fc18:	e0c5      	b.n	800fda6 <f_read+0x2b6>
			sect += csect;
 800fc1a:	69ba      	ldr	r2, [r7, #24]
 800fc1c:	69fb      	ldr	r3, [r7, #28]
 800fc1e:	4413      	add	r3, r2
 800fc20:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800fc22:	697b      	ldr	r3, [r7, #20]
 800fc24:	899b      	ldrh	r3, [r3, #12]
 800fc26:	461a      	mov	r2, r3
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	fbb3 f3f2 	udiv	r3, r3, r2
 800fc2e:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800fc30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d041      	beq.n	800fcba <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800fc36:	69fa      	ldr	r2, [r7, #28]
 800fc38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc3a:	4413      	add	r3, r2
 800fc3c:	697a      	ldr	r2, [r7, #20]
 800fc3e:	8952      	ldrh	r2, [r2, #10]
 800fc40:	4293      	cmp	r3, r2
 800fc42:	d905      	bls.n	800fc50 <f_read+0x160>
					cc = fs->csize - csect;
 800fc44:	697b      	ldr	r3, [r7, #20]
 800fc46:	895b      	ldrh	r3, [r3, #10]
 800fc48:	461a      	mov	r2, r3
 800fc4a:	69fb      	ldr	r3, [r7, #28]
 800fc4c:	1ad3      	subs	r3, r2, r3
 800fc4e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800fc50:	697b      	ldr	r3, [r7, #20]
 800fc52:	7858      	ldrb	r0, [r3, #1]
 800fc54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc56:	69ba      	ldr	r2, [r7, #24]
 800fc58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fc5a:	f7fd f9df 	bl	800d01c <disk_read>
 800fc5e:	4603      	mov	r3, r0
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d004      	beq.n	800fc6e <f_read+0x17e>
 800fc64:	68fb      	ldr	r3, [r7, #12]
 800fc66:	2201      	movs	r2, #1
 800fc68:	755a      	strb	r2, [r3, #21]
 800fc6a:	2301      	movs	r3, #1
 800fc6c:	e09b      	b.n	800fda6 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800fc6e:	68fb      	ldr	r3, [r7, #12]
 800fc70:	7d1b      	ldrb	r3, [r3, #20]
 800fc72:	b25b      	sxtb	r3, r3
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	da18      	bge.n	800fcaa <f_read+0x1ba>
 800fc78:	68fb      	ldr	r3, [r7, #12]
 800fc7a:	6a1a      	ldr	r2, [r3, #32]
 800fc7c:	69bb      	ldr	r3, [r7, #24]
 800fc7e:	1ad3      	subs	r3, r2, r3
 800fc80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fc82:	429a      	cmp	r2, r3
 800fc84:	d911      	bls.n	800fcaa <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800fc86:	68fb      	ldr	r3, [r7, #12]
 800fc88:	6a1a      	ldr	r2, [r3, #32]
 800fc8a:	69bb      	ldr	r3, [r7, #24]
 800fc8c:	1ad3      	subs	r3, r2, r3
 800fc8e:	697a      	ldr	r2, [r7, #20]
 800fc90:	8992      	ldrh	r2, [r2, #12]
 800fc92:	fb02 f303 	mul.w	r3, r2, r3
 800fc96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fc98:	18d0      	adds	r0, r2, r3
 800fc9a:	68fb      	ldr	r3, [r7, #12]
 800fc9c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fca0:	697b      	ldr	r3, [r7, #20]
 800fca2:	899b      	ldrh	r3, [r3, #12]
 800fca4:	461a      	mov	r2, r3
 800fca6:	f7fd fa99 	bl	800d1dc <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800fcaa:	697b      	ldr	r3, [r7, #20]
 800fcac:	899b      	ldrh	r3, [r3, #12]
 800fcae:	461a      	mov	r2, r3
 800fcb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcb2:	fb02 f303 	mul.w	r3, r2, r3
 800fcb6:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800fcb8:	e05c      	b.n	800fd74 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800fcba:	68fb      	ldr	r3, [r7, #12]
 800fcbc:	6a1b      	ldr	r3, [r3, #32]
 800fcbe:	69ba      	ldr	r2, [r7, #24]
 800fcc0:	429a      	cmp	r2, r3
 800fcc2:	d02e      	beq.n	800fd22 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	7d1b      	ldrb	r3, [r3, #20]
 800fcc8:	b25b      	sxtb	r3, r3
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	da18      	bge.n	800fd00 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800fcce:	697b      	ldr	r3, [r7, #20]
 800fcd0:	7858      	ldrb	r0, [r3, #1]
 800fcd2:	68fb      	ldr	r3, [r7, #12]
 800fcd4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fcd8:	68fb      	ldr	r3, [r7, #12]
 800fcda:	6a1a      	ldr	r2, [r3, #32]
 800fcdc:	2301      	movs	r3, #1
 800fcde:	f7fd f9bd 	bl	800d05c <disk_write>
 800fce2:	4603      	mov	r3, r0
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	d004      	beq.n	800fcf2 <f_read+0x202>
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	2201      	movs	r2, #1
 800fcec:	755a      	strb	r2, [r3, #21]
 800fcee:	2301      	movs	r3, #1
 800fcf0:	e059      	b.n	800fda6 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800fcf2:	68fb      	ldr	r3, [r7, #12]
 800fcf4:	7d1b      	ldrb	r3, [r3, #20]
 800fcf6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fcfa:	b2da      	uxtb	r2, r3
 800fcfc:	68fb      	ldr	r3, [r7, #12]
 800fcfe:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800fd00:	697b      	ldr	r3, [r7, #20]
 800fd02:	7858      	ldrb	r0, [r3, #1]
 800fd04:	68fb      	ldr	r3, [r7, #12]
 800fd06:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fd0a:	2301      	movs	r3, #1
 800fd0c:	69ba      	ldr	r2, [r7, #24]
 800fd0e:	f7fd f985 	bl	800d01c <disk_read>
 800fd12:	4603      	mov	r3, r0
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	d004      	beq.n	800fd22 <f_read+0x232>
 800fd18:	68fb      	ldr	r3, [r7, #12]
 800fd1a:	2201      	movs	r2, #1
 800fd1c:	755a      	strb	r2, [r3, #21]
 800fd1e:	2301      	movs	r3, #1
 800fd20:	e041      	b.n	800fda6 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800fd22:	68fb      	ldr	r3, [r7, #12]
 800fd24:	69ba      	ldr	r2, [r7, #24]
 800fd26:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800fd28:	697b      	ldr	r3, [r7, #20]
 800fd2a:	899b      	ldrh	r3, [r3, #12]
 800fd2c:	4618      	mov	r0, r3
 800fd2e:	68fb      	ldr	r3, [r7, #12]
 800fd30:	699b      	ldr	r3, [r3, #24]
 800fd32:	697a      	ldr	r2, [r7, #20]
 800fd34:	8992      	ldrh	r2, [r2, #12]
 800fd36:	fbb3 f1f2 	udiv	r1, r3, r2
 800fd3a:	fb02 f201 	mul.w	r2, r2, r1
 800fd3e:	1a9b      	subs	r3, r3, r2
 800fd40:	1ac3      	subs	r3, r0, r3
 800fd42:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800fd44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	429a      	cmp	r2, r3
 800fd4a:	d901      	bls.n	800fd50 <f_read+0x260>
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800fd50:	68fb      	ldr	r3, [r7, #12]
 800fd52:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	699b      	ldr	r3, [r3, #24]
 800fd5a:	697a      	ldr	r2, [r7, #20]
 800fd5c:	8992      	ldrh	r2, [r2, #12]
 800fd5e:	fbb3 f0f2 	udiv	r0, r3, r2
 800fd62:	fb02 f200 	mul.w	r2, r2, r0
 800fd66:	1a9b      	subs	r3, r3, r2
 800fd68:	440b      	add	r3, r1
 800fd6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fd6c:	4619      	mov	r1, r3
 800fd6e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fd70:	f7fd fa34 	bl	800d1dc <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800fd74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fd76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd78:	4413      	add	r3, r2
 800fd7a:	627b      	str	r3, [r7, #36]	; 0x24
 800fd7c:	68fb      	ldr	r3, [r7, #12]
 800fd7e:	699a      	ldr	r2, [r3, #24]
 800fd80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd82:	441a      	add	r2, r3
 800fd84:	68fb      	ldr	r3, [r7, #12]
 800fd86:	619a      	str	r2, [r3, #24]
 800fd88:	683b      	ldr	r3, [r7, #0]
 800fd8a:	681a      	ldr	r2, [r3, #0]
 800fd8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd8e:	441a      	add	r2, r3
 800fd90:	683b      	ldr	r3, [r7, #0]
 800fd92:	601a      	str	r2, [r3, #0]
 800fd94:	687a      	ldr	r2, [r7, #4]
 800fd96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd98:	1ad3      	subs	r3, r2, r3
 800fd9a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	f47f aee1 	bne.w	800fb66 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800fda4:	2300      	movs	r3, #0
}
 800fda6:	4618      	mov	r0, r3
 800fda8:	3738      	adds	r7, #56	; 0x38
 800fdaa:	46bd      	mov	sp, r7
 800fdac:	bd80      	pop	{r7, pc}

0800fdae <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800fdae:	b580      	push	{r7, lr}
 800fdb0:	b08c      	sub	sp, #48	; 0x30
 800fdb2:	af00      	add	r7, sp, #0
 800fdb4:	60f8      	str	r0, [r7, #12]
 800fdb6:	60b9      	str	r1, [r7, #8]
 800fdb8:	607a      	str	r2, [r7, #4]
 800fdba:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800fdbc:	68bb      	ldr	r3, [r7, #8]
 800fdbe:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800fdc0:	683b      	ldr	r3, [r7, #0]
 800fdc2:	2200      	movs	r2, #0
 800fdc4:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800fdc6:	68fb      	ldr	r3, [r7, #12]
 800fdc8:	f107 0210 	add.w	r2, r7, #16
 800fdcc:	4611      	mov	r1, r2
 800fdce:	4618      	mov	r0, r3
 800fdd0:	f7ff fc46 	bl	800f660 <validate>
 800fdd4:	4603      	mov	r3, r0
 800fdd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800fdda:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d107      	bne.n	800fdf2 <f_write+0x44>
 800fde2:	68fb      	ldr	r3, [r7, #12]
 800fde4:	7d5b      	ldrb	r3, [r3, #21]
 800fde6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800fdea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d002      	beq.n	800fdf8 <f_write+0x4a>
 800fdf2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fdf6:	e16a      	b.n	80100ce <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800fdf8:	68fb      	ldr	r3, [r7, #12]
 800fdfa:	7d1b      	ldrb	r3, [r3, #20]
 800fdfc:	f003 0302 	and.w	r3, r3, #2
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d101      	bne.n	800fe08 <f_write+0x5a>
 800fe04:	2307      	movs	r3, #7
 800fe06:	e162      	b.n	80100ce <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800fe08:	68fb      	ldr	r3, [r7, #12]
 800fe0a:	699a      	ldr	r2, [r3, #24]
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	441a      	add	r2, r3
 800fe10:	68fb      	ldr	r3, [r7, #12]
 800fe12:	699b      	ldr	r3, [r3, #24]
 800fe14:	429a      	cmp	r2, r3
 800fe16:	f080 814c 	bcs.w	80100b2 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	699b      	ldr	r3, [r3, #24]
 800fe1e:	43db      	mvns	r3, r3
 800fe20:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800fe22:	e146      	b.n	80100b2 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800fe24:	68fb      	ldr	r3, [r7, #12]
 800fe26:	699b      	ldr	r3, [r3, #24]
 800fe28:	693a      	ldr	r2, [r7, #16]
 800fe2a:	8992      	ldrh	r2, [r2, #12]
 800fe2c:	fbb3 f1f2 	udiv	r1, r3, r2
 800fe30:	fb02 f201 	mul.w	r2, r2, r1
 800fe34:	1a9b      	subs	r3, r3, r2
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	f040 80f1 	bne.w	801001e <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800fe3c:	68fb      	ldr	r3, [r7, #12]
 800fe3e:	699b      	ldr	r3, [r3, #24]
 800fe40:	693a      	ldr	r2, [r7, #16]
 800fe42:	8992      	ldrh	r2, [r2, #12]
 800fe44:	fbb3 f3f2 	udiv	r3, r3, r2
 800fe48:	693a      	ldr	r2, [r7, #16]
 800fe4a:	8952      	ldrh	r2, [r2, #10]
 800fe4c:	3a01      	subs	r2, #1
 800fe4e:	4013      	ands	r3, r2
 800fe50:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800fe52:	69bb      	ldr	r3, [r7, #24]
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d143      	bne.n	800fee0 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800fe58:	68fb      	ldr	r3, [r7, #12]
 800fe5a:	699b      	ldr	r3, [r3, #24]
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d10c      	bne.n	800fe7a <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	689b      	ldr	r3, [r3, #8]
 800fe64:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800fe66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d11a      	bne.n	800fea2 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800fe6c:	68fb      	ldr	r3, [r7, #12]
 800fe6e:	2100      	movs	r1, #0
 800fe70:	4618      	mov	r0, r3
 800fe72:	f7fd feea 	bl	800dc4a <create_chain>
 800fe76:	62b8      	str	r0, [r7, #40]	; 0x28
 800fe78:	e013      	b.n	800fea2 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800fe7a:	68fb      	ldr	r3, [r7, #12]
 800fe7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d007      	beq.n	800fe92 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	699b      	ldr	r3, [r3, #24]
 800fe86:	4619      	mov	r1, r3
 800fe88:	68f8      	ldr	r0, [r7, #12]
 800fe8a:	f7fd ff76 	bl	800dd7a <clmt_clust>
 800fe8e:	62b8      	str	r0, [r7, #40]	; 0x28
 800fe90:	e007      	b.n	800fea2 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800fe92:	68fa      	ldr	r2, [r7, #12]
 800fe94:	68fb      	ldr	r3, [r7, #12]
 800fe96:	69db      	ldr	r3, [r3, #28]
 800fe98:	4619      	mov	r1, r3
 800fe9a:	4610      	mov	r0, r2
 800fe9c:	f7fd fed5 	bl	800dc4a <create_chain>
 800fea0:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800fea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	f000 8109 	beq.w	80100bc <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800feaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800feac:	2b01      	cmp	r3, #1
 800feae:	d104      	bne.n	800feba <f_write+0x10c>
 800feb0:	68fb      	ldr	r3, [r7, #12]
 800feb2:	2202      	movs	r2, #2
 800feb4:	755a      	strb	r2, [r3, #21]
 800feb6:	2302      	movs	r3, #2
 800feb8:	e109      	b.n	80100ce <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800feba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800febc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fec0:	d104      	bne.n	800fecc <f_write+0x11e>
 800fec2:	68fb      	ldr	r3, [r7, #12]
 800fec4:	2201      	movs	r2, #1
 800fec6:	755a      	strb	r2, [r3, #21]
 800fec8:	2301      	movs	r3, #1
 800feca:	e100      	b.n	80100ce <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800fecc:	68fb      	ldr	r3, [r7, #12]
 800fece:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fed0:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800fed2:	68fb      	ldr	r3, [r7, #12]
 800fed4:	689b      	ldr	r3, [r3, #8]
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d102      	bne.n	800fee0 <f_write+0x132>
 800feda:	68fb      	ldr	r3, [r7, #12]
 800fedc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fede:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800fee0:	68fb      	ldr	r3, [r7, #12]
 800fee2:	7d1b      	ldrb	r3, [r3, #20]
 800fee4:	b25b      	sxtb	r3, r3
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	da18      	bge.n	800ff1c <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800feea:	693b      	ldr	r3, [r7, #16]
 800feec:	7858      	ldrb	r0, [r3, #1]
 800feee:	68fb      	ldr	r3, [r7, #12]
 800fef0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	6a1a      	ldr	r2, [r3, #32]
 800fef8:	2301      	movs	r3, #1
 800fefa:	f7fd f8af 	bl	800d05c <disk_write>
 800fefe:	4603      	mov	r3, r0
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d004      	beq.n	800ff0e <f_write+0x160>
 800ff04:	68fb      	ldr	r3, [r7, #12]
 800ff06:	2201      	movs	r2, #1
 800ff08:	755a      	strb	r2, [r3, #21]
 800ff0a:	2301      	movs	r3, #1
 800ff0c:	e0df      	b.n	80100ce <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ff0e:	68fb      	ldr	r3, [r7, #12]
 800ff10:	7d1b      	ldrb	r3, [r3, #20]
 800ff12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ff16:	b2da      	uxtb	r2, r3
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ff1c:	693a      	ldr	r2, [r7, #16]
 800ff1e:	68fb      	ldr	r3, [r7, #12]
 800ff20:	69db      	ldr	r3, [r3, #28]
 800ff22:	4619      	mov	r1, r3
 800ff24:	4610      	mov	r0, r2
 800ff26:	f7fd fc25 	bl	800d774 <clust2sect>
 800ff2a:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ff2c:	697b      	ldr	r3, [r7, #20]
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d104      	bne.n	800ff3c <f_write+0x18e>
 800ff32:	68fb      	ldr	r3, [r7, #12]
 800ff34:	2202      	movs	r2, #2
 800ff36:	755a      	strb	r2, [r3, #21]
 800ff38:	2302      	movs	r3, #2
 800ff3a:	e0c8      	b.n	80100ce <f_write+0x320>
			sect += csect;
 800ff3c:	697a      	ldr	r2, [r7, #20]
 800ff3e:	69bb      	ldr	r3, [r7, #24]
 800ff40:	4413      	add	r3, r2
 800ff42:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800ff44:	693b      	ldr	r3, [r7, #16]
 800ff46:	899b      	ldrh	r3, [r3, #12]
 800ff48:	461a      	mov	r2, r3
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	fbb3 f3f2 	udiv	r3, r3, r2
 800ff50:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800ff52:	6a3b      	ldr	r3, [r7, #32]
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d043      	beq.n	800ffe0 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ff58:	69ba      	ldr	r2, [r7, #24]
 800ff5a:	6a3b      	ldr	r3, [r7, #32]
 800ff5c:	4413      	add	r3, r2
 800ff5e:	693a      	ldr	r2, [r7, #16]
 800ff60:	8952      	ldrh	r2, [r2, #10]
 800ff62:	4293      	cmp	r3, r2
 800ff64:	d905      	bls.n	800ff72 <f_write+0x1c4>
					cc = fs->csize - csect;
 800ff66:	693b      	ldr	r3, [r7, #16]
 800ff68:	895b      	ldrh	r3, [r3, #10]
 800ff6a:	461a      	mov	r2, r3
 800ff6c:	69bb      	ldr	r3, [r7, #24]
 800ff6e:	1ad3      	subs	r3, r2, r3
 800ff70:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ff72:	693b      	ldr	r3, [r7, #16]
 800ff74:	7858      	ldrb	r0, [r3, #1]
 800ff76:	6a3b      	ldr	r3, [r7, #32]
 800ff78:	697a      	ldr	r2, [r7, #20]
 800ff7a:	69f9      	ldr	r1, [r7, #28]
 800ff7c:	f7fd f86e 	bl	800d05c <disk_write>
 800ff80:	4603      	mov	r3, r0
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d004      	beq.n	800ff90 <f_write+0x1e2>
 800ff86:	68fb      	ldr	r3, [r7, #12]
 800ff88:	2201      	movs	r2, #1
 800ff8a:	755a      	strb	r2, [r3, #21]
 800ff8c:	2301      	movs	r3, #1
 800ff8e:	e09e      	b.n	80100ce <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800ff90:	68fb      	ldr	r3, [r7, #12]
 800ff92:	6a1a      	ldr	r2, [r3, #32]
 800ff94:	697b      	ldr	r3, [r7, #20]
 800ff96:	1ad3      	subs	r3, r2, r3
 800ff98:	6a3a      	ldr	r2, [r7, #32]
 800ff9a:	429a      	cmp	r2, r3
 800ff9c:	d918      	bls.n	800ffd0 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800ff9e:	68fb      	ldr	r3, [r7, #12]
 800ffa0:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800ffa4:	68fb      	ldr	r3, [r7, #12]
 800ffa6:	6a1a      	ldr	r2, [r3, #32]
 800ffa8:	697b      	ldr	r3, [r7, #20]
 800ffaa:	1ad3      	subs	r3, r2, r3
 800ffac:	693a      	ldr	r2, [r7, #16]
 800ffae:	8992      	ldrh	r2, [r2, #12]
 800ffb0:	fb02 f303 	mul.w	r3, r2, r3
 800ffb4:	69fa      	ldr	r2, [r7, #28]
 800ffb6:	18d1      	adds	r1, r2, r3
 800ffb8:	693b      	ldr	r3, [r7, #16]
 800ffba:	899b      	ldrh	r3, [r3, #12]
 800ffbc:	461a      	mov	r2, r3
 800ffbe:	f7fd f90d 	bl	800d1dc <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ffc2:	68fb      	ldr	r3, [r7, #12]
 800ffc4:	7d1b      	ldrb	r3, [r3, #20]
 800ffc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ffca:	b2da      	uxtb	r2, r3
 800ffcc:	68fb      	ldr	r3, [r7, #12]
 800ffce:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800ffd0:	693b      	ldr	r3, [r7, #16]
 800ffd2:	899b      	ldrh	r3, [r3, #12]
 800ffd4:	461a      	mov	r2, r3
 800ffd6:	6a3b      	ldr	r3, [r7, #32]
 800ffd8:	fb02 f303 	mul.w	r3, r2, r3
 800ffdc:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800ffde:	e04b      	b.n	8010078 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ffe0:	68fb      	ldr	r3, [r7, #12]
 800ffe2:	6a1b      	ldr	r3, [r3, #32]
 800ffe4:	697a      	ldr	r2, [r7, #20]
 800ffe6:	429a      	cmp	r2, r3
 800ffe8:	d016      	beq.n	8010018 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800ffea:	68fb      	ldr	r3, [r7, #12]
 800ffec:	699a      	ldr	r2, [r3, #24]
 800ffee:	68fb      	ldr	r3, [r7, #12]
 800fff0:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800fff2:	429a      	cmp	r2, r3
 800fff4:	d210      	bcs.n	8010018 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800fff6:	693b      	ldr	r3, [r7, #16]
 800fff8:	7858      	ldrb	r0, [r3, #1]
 800fffa:	68fb      	ldr	r3, [r7, #12]
 800fffc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010000:	2301      	movs	r3, #1
 8010002:	697a      	ldr	r2, [r7, #20]
 8010004:	f7fd f80a 	bl	800d01c <disk_read>
 8010008:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801000a:	2b00      	cmp	r3, #0
 801000c:	d004      	beq.n	8010018 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 801000e:	68fb      	ldr	r3, [r7, #12]
 8010010:	2201      	movs	r2, #1
 8010012:	755a      	strb	r2, [r3, #21]
 8010014:	2301      	movs	r3, #1
 8010016:	e05a      	b.n	80100ce <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8010018:	68fb      	ldr	r3, [r7, #12]
 801001a:	697a      	ldr	r2, [r7, #20]
 801001c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801001e:	693b      	ldr	r3, [r7, #16]
 8010020:	899b      	ldrh	r3, [r3, #12]
 8010022:	4618      	mov	r0, r3
 8010024:	68fb      	ldr	r3, [r7, #12]
 8010026:	699b      	ldr	r3, [r3, #24]
 8010028:	693a      	ldr	r2, [r7, #16]
 801002a:	8992      	ldrh	r2, [r2, #12]
 801002c:	fbb3 f1f2 	udiv	r1, r3, r2
 8010030:	fb02 f201 	mul.w	r2, r2, r1
 8010034:	1a9b      	subs	r3, r3, r2
 8010036:	1ac3      	subs	r3, r0, r3
 8010038:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801003a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	429a      	cmp	r2, r3
 8010040:	d901      	bls.n	8010046 <f_write+0x298>
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801004c:	68fb      	ldr	r3, [r7, #12]
 801004e:	699b      	ldr	r3, [r3, #24]
 8010050:	693a      	ldr	r2, [r7, #16]
 8010052:	8992      	ldrh	r2, [r2, #12]
 8010054:	fbb3 f0f2 	udiv	r0, r3, r2
 8010058:	fb02 f200 	mul.w	r2, r2, r0
 801005c:	1a9b      	subs	r3, r3, r2
 801005e:	440b      	add	r3, r1
 8010060:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010062:	69f9      	ldr	r1, [r7, #28]
 8010064:	4618      	mov	r0, r3
 8010066:	f7fd f8b9 	bl	800d1dc <mem_cpy>
		fp->flag |= FA_DIRTY;
 801006a:	68fb      	ldr	r3, [r7, #12]
 801006c:	7d1b      	ldrb	r3, [r3, #20]
 801006e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010072:	b2da      	uxtb	r2, r3
 8010074:	68fb      	ldr	r3, [r7, #12]
 8010076:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8010078:	69fa      	ldr	r2, [r7, #28]
 801007a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801007c:	4413      	add	r3, r2
 801007e:	61fb      	str	r3, [r7, #28]
 8010080:	68fb      	ldr	r3, [r7, #12]
 8010082:	699a      	ldr	r2, [r3, #24]
 8010084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010086:	441a      	add	r2, r3
 8010088:	68fb      	ldr	r3, [r7, #12]
 801008a:	619a      	str	r2, [r3, #24]
 801008c:	68fb      	ldr	r3, [r7, #12]
 801008e:	68da      	ldr	r2, [r3, #12]
 8010090:	68fb      	ldr	r3, [r7, #12]
 8010092:	699b      	ldr	r3, [r3, #24]
 8010094:	429a      	cmp	r2, r3
 8010096:	bf38      	it	cc
 8010098:	461a      	movcc	r2, r3
 801009a:	68fb      	ldr	r3, [r7, #12]
 801009c:	60da      	str	r2, [r3, #12]
 801009e:	683b      	ldr	r3, [r7, #0]
 80100a0:	681a      	ldr	r2, [r3, #0]
 80100a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100a4:	441a      	add	r2, r3
 80100a6:	683b      	ldr	r3, [r7, #0]
 80100a8:	601a      	str	r2, [r3, #0]
 80100aa:	687a      	ldr	r2, [r7, #4]
 80100ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100ae:	1ad3      	subs	r3, r2, r3
 80100b0:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80100b2:	687b      	ldr	r3, [r7, #4]
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	f47f aeb5 	bne.w	800fe24 <f_write+0x76>
 80100ba:	e000      	b.n	80100be <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80100bc:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80100be:	68fb      	ldr	r3, [r7, #12]
 80100c0:	7d1b      	ldrb	r3, [r3, #20]
 80100c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80100c6:	b2da      	uxtb	r2, r3
 80100c8:	68fb      	ldr	r3, [r7, #12]
 80100ca:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80100cc:	2300      	movs	r3, #0
}
 80100ce:	4618      	mov	r0, r3
 80100d0:	3730      	adds	r7, #48	; 0x30
 80100d2:	46bd      	mov	sp, r7
 80100d4:	bd80      	pop	{r7, pc}

080100d6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80100d6:	b580      	push	{r7, lr}
 80100d8:	b086      	sub	sp, #24
 80100da:	af00      	add	r7, sp, #0
 80100dc:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	f107 0208 	add.w	r2, r7, #8
 80100e4:	4611      	mov	r1, r2
 80100e6:	4618      	mov	r0, r3
 80100e8:	f7ff faba 	bl	800f660 <validate>
 80100ec:	4603      	mov	r3, r0
 80100ee:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80100f0:	7dfb      	ldrb	r3, [r7, #23]
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d168      	bne.n	80101c8 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	7d1b      	ldrb	r3, [r3, #20]
 80100fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d062      	beq.n	80101c8 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	7d1b      	ldrb	r3, [r3, #20]
 8010106:	b25b      	sxtb	r3, r3
 8010108:	2b00      	cmp	r3, #0
 801010a:	da15      	bge.n	8010138 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801010c:	68bb      	ldr	r3, [r7, #8]
 801010e:	7858      	ldrb	r0, [r3, #1]
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	6a1a      	ldr	r2, [r3, #32]
 801011a:	2301      	movs	r3, #1
 801011c:	f7fc ff9e 	bl	800d05c <disk_write>
 8010120:	4603      	mov	r3, r0
 8010122:	2b00      	cmp	r3, #0
 8010124:	d001      	beq.n	801012a <f_sync+0x54>
 8010126:	2301      	movs	r3, #1
 8010128:	e04f      	b.n	80101ca <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	7d1b      	ldrb	r3, [r3, #20]
 801012e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010132:	b2da      	uxtb	r2, r3
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8010138:	f7fc fce0 	bl	800cafc <get_fattime>
 801013c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801013e:	68ba      	ldr	r2, [r7, #8]
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010144:	4619      	mov	r1, r3
 8010146:	4610      	mov	r0, r2
 8010148:	f7fd fa76 	bl	800d638 <move_window>
 801014c:	4603      	mov	r3, r0
 801014e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8010150:	7dfb      	ldrb	r3, [r7, #23]
 8010152:	2b00      	cmp	r3, #0
 8010154:	d138      	bne.n	80101c8 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801015a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801015c:	68fb      	ldr	r3, [r7, #12]
 801015e:	330b      	adds	r3, #11
 8010160:	781a      	ldrb	r2, [r3, #0]
 8010162:	68fb      	ldr	r3, [r7, #12]
 8010164:	330b      	adds	r3, #11
 8010166:	f042 0220 	orr.w	r2, r2, #32
 801016a:	b2d2      	uxtb	r2, r2
 801016c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	6818      	ldr	r0, [r3, #0]
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	689b      	ldr	r3, [r3, #8]
 8010176:	461a      	mov	r2, r3
 8010178:	68f9      	ldr	r1, [r7, #12]
 801017a:	f7fd fffb 	bl	800e174 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801017e:	68fb      	ldr	r3, [r7, #12]
 8010180:	f103 021c 	add.w	r2, r3, #28
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	68db      	ldr	r3, [r3, #12]
 8010188:	4619      	mov	r1, r3
 801018a:	4610      	mov	r0, r2
 801018c:	f7fc fffa 	bl	800d184 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8010190:	68fb      	ldr	r3, [r7, #12]
 8010192:	3316      	adds	r3, #22
 8010194:	6939      	ldr	r1, [r7, #16]
 8010196:	4618      	mov	r0, r3
 8010198:	f7fc fff4 	bl	800d184 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801019c:	68fb      	ldr	r3, [r7, #12]
 801019e:	3312      	adds	r3, #18
 80101a0:	2100      	movs	r1, #0
 80101a2:	4618      	mov	r0, r3
 80101a4:	f7fc ffd3 	bl	800d14e <st_word>
					fs->wflag = 1;
 80101a8:	68bb      	ldr	r3, [r7, #8]
 80101aa:	2201      	movs	r2, #1
 80101ac:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80101ae:	68bb      	ldr	r3, [r7, #8]
 80101b0:	4618      	mov	r0, r3
 80101b2:	f7fd fa6f 	bl	800d694 <sync_fs>
 80101b6:	4603      	mov	r3, r0
 80101b8:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	7d1b      	ldrb	r3, [r3, #20]
 80101be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80101c2:	b2da      	uxtb	r2, r3
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80101c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80101ca:	4618      	mov	r0, r3
 80101cc:	3718      	adds	r7, #24
 80101ce:	46bd      	mov	sp, r7
 80101d0:	bd80      	pop	{r7, pc}

080101d2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80101d2:	b580      	push	{r7, lr}
 80101d4:	b084      	sub	sp, #16
 80101d6:	af00      	add	r7, sp, #0
 80101d8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80101da:	6878      	ldr	r0, [r7, #4]
 80101dc:	f7ff ff7b 	bl	80100d6 <f_sync>
 80101e0:	4603      	mov	r3, r0
 80101e2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80101e4:	7bfb      	ldrb	r3, [r7, #15]
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d118      	bne.n	801021c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	f107 0208 	add.w	r2, r7, #8
 80101f0:	4611      	mov	r1, r2
 80101f2:	4618      	mov	r0, r3
 80101f4:	f7ff fa34 	bl	800f660 <validate>
 80101f8:	4603      	mov	r3, r0
 80101fa:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80101fc:	7bfb      	ldrb	r3, [r7, #15]
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d10c      	bne.n	801021c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	691b      	ldr	r3, [r3, #16]
 8010206:	4618      	mov	r0, r3
 8010208:	f7fd f972 	bl	800d4f0 <dec_lock>
 801020c:	4603      	mov	r3, r0
 801020e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8010210:	7bfb      	ldrb	r3, [r7, #15]
 8010212:	2b00      	cmp	r3, #0
 8010214:	d102      	bne.n	801021c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	2200      	movs	r2, #0
 801021a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801021c:	7bfb      	ldrb	r3, [r7, #15]
}
 801021e:	4618      	mov	r0, r3
 8010220:	3710      	adds	r7, #16
 8010222:	46bd      	mov	sp, r7
 8010224:	bd80      	pop	{r7, pc}

08010226 <f_chdir>:


FRESULT f_chdir (
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8010226:	b590      	push	{r4, r7, lr}
 8010228:	b093      	sub	sp, #76	; 0x4c
 801022a:	af00      	add	r7, sp, #0
 801022c:	6078      	str	r0, [r7, #4]
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF

	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 801022e:	f107 010c 	add.w	r1, r7, #12
 8010232:	1d3b      	adds	r3, r7, #4
 8010234:	2200      	movs	r2, #0
 8010236:	4618      	mov	r0, r3
 8010238:	f7fe ff86 	bl	800f148 <find_volume>
 801023c:	4603      	mov	r3, r0
 801023e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8010242:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8010246:	2b00      	cmp	r3, #0
 8010248:	d131      	bne.n	80102ae <f_chdir+0x88>
		dj.obj.fs = fs;
 801024a:	68fb      	ldr	r3, [r7, #12]
 801024c:	613b      	str	r3, [r7, #16]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the path */
 801024e:	687a      	ldr	r2, [r7, #4]
 8010250:	f107 0310 	add.w	r3, r7, #16
 8010254:	4611      	mov	r1, r2
 8010256:	4618      	mov	r0, r3
 8010258:	f7fe fe46 	bl	800eee8 <follow_path>
 801025c:	4603      	mov	r3, r0
 801025e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		if (res == FR_OK) {					/* Follow completed */
 8010262:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8010266:	2b00      	cmp	r3, #0
 8010268:	d11a      	bne.n	80102a0 <f_chdir+0x7a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 801026a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801026e:	b25b      	sxtb	r3, r3
 8010270:	2b00      	cmp	r3, #0
 8010272:	da03      	bge.n	801027c <f_chdir+0x56>
				fs->cdir = dj.obj.sclust;	/* It is the start directory itself */
 8010274:	68fb      	ldr	r3, [r7, #12]
 8010276:	69ba      	ldr	r2, [r7, #24]
 8010278:	61da      	str	r2, [r3, #28]
 801027a:	e011      	b.n	80102a0 <f_chdir+0x7a>
					fs->cdc_size = dj.obj.c_size;
					fs->cdc_ofs = dj.obj.c_ofs;
				}
#endif
			} else {
				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 801027c:	7dbb      	ldrb	r3, [r7, #22]
 801027e:	f003 0310 	and.w	r3, r3, #16
 8010282:	2b00      	cmp	r3, #0
 8010284:	d009      	beq.n	801029a <f_chdir+0x74>
						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
						fs->cdc_ofs = dj.blk_ofs;
					} else
#endif
					{
						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 8010286:	68fb      	ldr	r3, [r7, #12]
 8010288:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801028a:	68fc      	ldr	r4, [r7, #12]
 801028c:	4611      	mov	r1, r2
 801028e:	4618      	mov	r0, r3
 8010290:	f7fd ff51 	bl	800e136 <ld_clust>
 8010294:	4603      	mov	r3, r0
 8010296:	61e3      	str	r3, [r4, #28]
 8010298:	e002      	b.n	80102a0 <f_chdir+0x7a>
					}
				} else {
					res = FR_NO_PATH;		/* Reached but a file */
 801029a:	2305      	movs	r3, #5
 801029c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				}
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 80102a0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80102a4:	2b04      	cmp	r3, #4
 80102a6:	d102      	bne.n	80102ae <f_chdir+0x88>
 80102a8:	2305      	movs	r3, #5
 80102aa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	}

	LEAVE_FF(fs, res);
 80102ae:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80102b2:	4618      	mov	r0, r3
 80102b4:	374c      	adds	r7, #76	; 0x4c
 80102b6:	46bd      	mov	sp, r7
 80102b8:	bd90      	pop	{r4, r7, pc}

080102ba <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 80102ba:	b580      	push	{r7, lr}
 80102bc:	b090      	sub	sp, #64	; 0x40
 80102be:	af00      	add	r7, sp, #0
 80102c0:	6078      	str	r0, [r7, #4]
 80102c2:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	f107 0208 	add.w	r2, r7, #8
 80102ca:	4611      	mov	r1, r2
 80102cc:	4618      	mov	r0, r3
 80102ce:	f7ff f9c7 	bl	800f660 <validate>
 80102d2:	4603      	mov	r3, r0
 80102d4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 80102d8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80102dc:	2b00      	cmp	r3, #0
 80102de:	d103      	bne.n	80102e8 <f_lseek+0x2e>
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	7d5b      	ldrb	r3, [r3, #21]
 80102e4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 80102e8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d002      	beq.n	80102f6 <f_lseek+0x3c>
 80102f0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80102f4:	e201      	b.n	80106fa <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	f000 80d9 	beq.w	80104b2 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8010300:	683b      	ldr	r3, [r7, #0]
 8010302:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010306:	d15a      	bne.n	80103be <f_lseek+0x104>
			tbl = fp->cltbl;
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801030c:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 801030e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010310:	1d1a      	adds	r2, r3, #4
 8010312:	627a      	str	r2, [r7, #36]	; 0x24
 8010314:	681b      	ldr	r3, [r3, #0]
 8010316:	617b      	str	r3, [r7, #20]
 8010318:	2302      	movs	r3, #2
 801031a:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	689b      	ldr	r3, [r3, #8]
 8010320:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8010322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010324:	2b00      	cmp	r3, #0
 8010326:	d03a      	beq.n	801039e <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8010328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801032a:	613b      	str	r3, [r7, #16]
 801032c:	2300      	movs	r3, #0
 801032e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010332:	3302      	adds	r3, #2
 8010334:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8010336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010338:	60fb      	str	r3, [r7, #12]
 801033a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801033c:	3301      	adds	r3, #1
 801033e:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010344:	4618      	mov	r0, r3
 8010346:	f7fd fa34 	bl	800d7b2 <get_fat>
 801034a:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 801034c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801034e:	2b01      	cmp	r3, #1
 8010350:	d804      	bhi.n	801035c <f_lseek+0xa2>
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	2202      	movs	r2, #2
 8010356:	755a      	strb	r2, [r3, #21]
 8010358:	2302      	movs	r3, #2
 801035a:	e1ce      	b.n	80106fa <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801035c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801035e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010362:	d104      	bne.n	801036e <f_lseek+0xb4>
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	2201      	movs	r2, #1
 8010368:	755a      	strb	r2, [r3, #21]
 801036a:	2301      	movs	r3, #1
 801036c:	e1c5      	b.n	80106fa <f_lseek+0x440>
					} while (cl == pcl + 1);
 801036e:	68fb      	ldr	r3, [r7, #12]
 8010370:	3301      	adds	r3, #1
 8010372:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010374:	429a      	cmp	r2, r3
 8010376:	d0de      	beq.n	8010336 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8010378:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801037a:	697b      	ldr	r3, [r7, #20]
 801037c:	429a      	cmp	r2, r3
 801037e:	d809      	bhi.n	8010394 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8010380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010382:	1d1a      	adds	r2, r3, #4
 8010384:	627a      	str	r2, [r7, #36]	; 0x24
 8010386:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010388:	601a      	str	r2, [r3, #0]
 801038a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801038c:	1d1a      	adds	r2, r3, #4
 801038e:	627a      	str	r2, [r7, #36]	; 0x24
 8010390:	693a      	ldr	r2, [r7, #16]
 8010392:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8010394:	68bb      	ldr	r3, [r7, #8]
 8010396:	6a1b      	ldr	r3, [r3, #32]
 8010398:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801039a:	429a      	cmp	r2, r3
 801039c:	d3c4      	bcc.n	8010328 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80103a4:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 80103a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80103a8:	697b      	ldr	r3, [r7, #20]
 80103aa:	429a      	cmp	r2, r3
 80103ac:	d803      	bhi.n	80103b6 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 80103ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103b0:	2200      	movs	r2, #0
 80103b2:	601a      	str	r2, [r3, #0]
 80103b4:	e19f      	b.n	80106f6 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80103b6:	2311      	movs	r3, #17
 80103b8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80103bc:	e19b      	b.n	80106f6 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	68db      	ldr	r3, [r3, #12]
 80103c2:	683a      	ldr	r2, [r7, #0]
 80103c4:	429a      	cmp	r2, r3
 80103c6:	d902      	bls.n	80103ce <f_lseek+0x114>
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	68db      	ldr	r3, [r3, #12]
 80103cc:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	683a      	ldr	r2, [r7, #0]
 80103d2:	619a      	str	r2, [r3, #24]
			if (ofs) {
 80103d4:	683b      	ldr	r3, [r7, #0]
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	f000 818d 	beq.w	80106f6 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 80103dc:	683b      	ldr	r3, [r7, #0]
 80103de:	3b01      	subs	r3, #1
 80103e0:	4619      	mov	r1, r3
 80103e2:	6878      	ldr	r0, [r7, #4]
 80103e4:	f7fd fcc9 	bl	800dd7a <clmt_clust>
 80103e8:	4602      	mov	r2, r0
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 80103ee:	68ba      	ldr	r2, [r7, #8]
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	69db      	ldr	r3, [r3, #28]
 80103f4:	4619      	mov	r1, r3
 80103f6:	4610      	mov	r0, r2
 80103f8:	f7fd f9bc 	bl	800d774 <clust2sect>
 80103fc:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80103fe:	69bb      	ldr	r3, [r7, #24]
 8010400:	2b00      	cmp	r3, #0
 8010402:	d104      	bne.n	801040e <f_lseek+0x154>
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	2202      	movs	r2, #2
 8010408:	755a      	strb	r2, [r3, #21]
 801040a:	2302      	movs	r3, #2
 801040c:	e175      	b.n	80106fa <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 801040e:	683b      	ldr	r3, [r7, #0]
 8010410:	3b01      	subs	r3, #1
 8010412:	68ba      	ldr	r2, [r7, #8]
 8010414:	8992      	ldrh	r2, [r2, #12]
 8010416:	fbb3 f3f2 	udiv	r3, r3, r2
 801041a:	68ba      	ldr	r2, [r7, #8]
 801041c:	8952      	ldrh	r2, [r2, #10]
 801041e:	3a01      	subs	r2, #1
 8010420:	4013      	ands	r3, r2
 8010422:	69ba      	ldr	r2, [r7, #24]
 8010424:	4413      	add	r3, r2
 8010426:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	699b      	ldr	r3, [r3, #24]
 801042c:	68ba      	ldr	r2, [r7, #8]
 801042e:	8992      	ldrh	r2, [r2, #12]
 8010430:	fbb3 f1f2 	udiv	r1, r3, r2
 8010434:	fb02 f201 	mul.w	r2, r2, r1
 8010438:	1a9b      	subs	r3, r3, r2
 801043a:	2b00      	cmp	r3, #0
 801043c:	f000 815b 	beq.w	80106f6 <f_lseek+0x43c>
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	6a1b      	ldr	r3, [r3, #32]
 8010444:	69ba      	ldr	r2, [r7, #24]
 8010446:	429a      	cmp	r2, r3
 8010448:	f000 8155 	beq.w	80106f6 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	7d1b      	ldrb	r3, [r3, #20]
 8010450:	b25b      	sxtb	r3, r3
 8010452:	2b00      	cmp	r3, #0
 8010454:	da18      	bge.n	8010488 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010456:	68bb      	ldr	r3, [r7, #8]
 8010458:	7858      	ldrb	r0, [r3, #1]
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	6a1a      	ldr	r2, [r3, #32]
 8010464:	2301      	movs	r3, #1
 8010466:	f7fc fdf9 	bl	800d05c <disk_write>
 801046a:	4603      	mov	r3, r0
 801046c:	2b00      	cmp	r3, #0
 801046e:	d004      	beq.n	801047a <f_lseek+0x1c0>
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	2201      	movs	r2, #1
 8010474:	755a      	strb	r2, [r3, #21]
 8010476:	2301      	movs	r3, #1
 8010478:	e13f      	b.n	80106fa <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	7d1b      	ldrb	r3, [r3, #20]
 801047e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010482:	b2da      	uxtb	r2, r3
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8010488:	68bb      	ldr	r3, [r7, #8]
 801048a:	7858      	ldrb	r0, [r3, #1]
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010492:	2301      	movs	r3, #1
 8010494:	69ba      	ldr	r2, [r7, #24]
 8010496:	f7fc fdc1 	bl	800d01c <disk_read>
 801049a:	4603      	mov	r3, r0
 801049c:	2b00      	cmp	r3, #0
 801049e:	d004      	beq.n	80104aa <f_lseek+0x1f0>
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	2201      	movs	r2, #1
 80104a4:	755a      	strb	r2, [r3, #21]
 80104a6:	2301      	movs	r3, #1
 80104a8:	e127      	b.n	80106fa <f_lseek+0x440>
#endif
					fp->sect = dsc;
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	69ba      	ldr	r2, [r7, #24]
 80104ae:	621a      	str	r2, [r3, #32]
 80104b0:	e121      	b.n	80106f6 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	68db      	ldr	r3, [r3, #12]
 80104b6:	683a      	ldr	r2, [r7, #0]
 80104b8:	429a      	cmp	r2, r3
 80104ba:	d908      	bls.n	80104ce <f_lseek+0x214>
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	7d1b      	ldrb	r3, [r3, #20]
 80104c0:	f003 0302 	and.w	r3, r3, #2
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d102      	bne.n	80104ce <f_lseek+0x214>
			ofs = fp->obj.objsize;
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	68db      	ldr	r3, [r3, #12]
 80104cc:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	699b      	ldr	r3, [r3, #24]
 80104d2:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 80104d4:	2300      	movs	r3, #0
 80104d6:	637b      	str	r3, [r7, #52]	; 0x34
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80104dc:	619a      	str	r2, [r3, #24]
		if (ofs) {
 80104de:	683b      	ldr	r3, [r7, #0]
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	f000 80b5 	beq.w	8010650 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 80104e6:	68bb      	ldr	r3, [r7, #8]
 80104e8:	895b      	ldrh	r3, [r3, #10]
 80104ea:	461a      	mov	r2, r3
 80104ec:	68bb      	ldr	r3, [r7, #8]
 80104ee:	899b      	ldrh	r3, [r3, #12]
 80104f0:	fb03 f302 	mul.w	r3, r3, r2
 80104f4:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 80104f6:	6a3b      	ldr	r3, [r7, #32]
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d01b      	beq.n	8010534 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80104fc:	683b      	ldr	r3, [r7, #0]
 80104fe:	1e5a      	subs	r2, r3, #1
 8010500:	69fb      	ldr	r3, [r7, #28]
 8010502:	fbb2 f2f3 	udiv	r2, r2, r3
 8010506:	6a3b      	ldr	r3, [r7, #32]
 8010508:	1e59      	subs	r1, r3, #1
 801050a:	69fb      	ldr	r3, [r7, #28]
 801050c:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8010510:	429a      	cmp	r2, r3
 8010512:	d30f      	bcc.n	8010534 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8010514:	6a3b      	ldr	r3, [r7, #32]
 8010516:	1e5a      	subs	r2, r3, #1
 8010518:	69fb      	ldr	r3, [r7, #28]
 801051a:	425b      	negs	r3, r3
 801051c:	401a      	ands	r2, r3
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	699b      	ldr	r3, [r3, #24]
 8010526:	683a      	ldr	r2, [r7, #0]
 8010528:	1ad3      	subs	r3, r2, r3
 801052a:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	69db      	ldr	r3, [r3, #28]
 8010530:	63bb      	str	r3, [r7, #56]	; 0x38
 8010532:	e022      	b.n	801057a <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	689b      	ldr	r3, [r3, #8]
 8010538:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 801053a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801053c:	2b00      	cmp	r3, #0
 801053e:	d119      	bne.n	8010574 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	2100      	movs	r1, #0
 8010544:	4618      	mov	r0, r3
 8010546:	f7fd fb80 	bl	800dc4a <create_chain>
 801054a:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 801054c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801054e:	2b01      	cmp	r3, #1
 8010550:	d104      	bne.n	801055c <f_lseek+0x2a2>
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	2202      	movs	r2, #2
 8010556:	755a      	strb	r2, [r3, #21]
 8010558:	2302      	movs	r3, #2
 801055a:	e0ce      	b.n	80106fa <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801055c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801055e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010562:	d104      	bne.n	801056e <f_lseek+0x2b4>
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	2201      	movs	r2, #1
 8010568:	755a      	strb	r2, [r3, #21]
 801056a:	2301      	movs	r3, #1
 801056c:	e0c5      	b.n	80106fa <f_lseek+0x440>
					fp->obj.sclust = clst;
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010572:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010578:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 801057a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801057c:	2b00      	cmp	r3, #0
 801057e:	d067      	beq.n	8010650 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8010580:	e03a      	b.n	80105f8 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8010582:	683a      	ldr	r2, [r7, #0]
 8010584:	69fb      	ldr	r3, [r7, #28]
 8010586:	1ad3      	subs	r3, r2, r3
 8010588:	603b      	str	r3, [r7, #0]
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	699a      	ldr	r2, [r3, #24]
 801058e:	69fb      	ldr	r3, [r7, #28]
 8010590:	441a      	add	r2, r3
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	7d1b      	ldrb	r3, [r3, #20]
 801059a:	f003 0302 	and.w	r3, r3, #2
 801059e:	2b00      	cmp	r3, #0
 80105a0:	d00b      	beq.n	80105ba <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80105a6:	4618      	mov	r0, r3
 80105a8:	f7fd fb4f 	bl	800dc4a <create_chain>
 80105ac:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 80105ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	d108      	bne.n	80105c6 <f_lseek+0x30c>
							ofs = 0; break;
 80105b4:	2300      	movs	r3, #0
 80105b6:	603b      	str	r3, [r7, #0]
 80105b8:	e022      	b.n	8010600 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80105be:	4618      	mov	r0, r3
 80105c0:	f7fd f8f7 	bl	800d7b2 <get_fat>
 80105c4:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80105c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80105cc:	d104      	bne.n	80105d8 <f_lseek+0x31e>
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	2201      	movs	r2, #1
 80105d2:	755a      	strb	r2, [r3, #21]
 80105d4:	2301      	movs	r3, #1
 80105d6:	e090      	b.n	80106fa <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80105d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105da:	2b01      	cmp	r3, #1
 80105dc:	d904      	bls.n	80105e8 <f_lseek+0x32e>
 80105de:	68bb      	ldr	r3, [r7, #8]
 80105e0:	6a1b      	ldr	r3, [r3, #32]
 80105e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80105e4:	429a      	cmp	r2, r3
 80105e6:	d304      	bcc.n	80105f2 <f_lseek+0x338>
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	2202      	movs	r2, #2
 80105ec:	755a      	strb	r2, [r3, #21]
 80105ee:	2302      	movs	r3, #2
 80105f0:	e083      	b.n	80106fa <f_lseek+0x440>
					fp->clust = clst;
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80105f6:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 80105f8:	683a      	ldr	r2, [r7, #0]
 80105fa:	69fb      	ldr	r3, [r7, #28]
 80105fc:	429a      	cmp	r2, r3
 80105fe:	d8c0      	bhi.n	8010582 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	699a      	ldr	r2, [r3, #24]
 8010604:	683b      	ldr	r3, [r7, #0]
 8010606:	441a      	add	r2, r3
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 801060c:	68bb      	ldr	r3, [r7, #8]
 801060e:	899b      	ldrh	r3, [r3, #12]
 8010610:	461a      	mov	r2, r3
 8010612:	683b      	ldr	r3, [r7, #0]
 8010614:	fbb3 f1f2 	udiv	r1, r3, r2
 8010618:	fb02 f201 	mul.w	r2, r2, r1
 801061c:	1a9b      	subs	r3, r3, r2
 801061e:	2b00      	cmp	r3, #0
 8010620:	d016      	beq.n	8010650 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8010622:	68bb      	ldr	r3, [r7, #8]
 8010624:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010626:	4618      	mov	r0, r3
 8010628:	f7fd f8a4 	bl	800d774 <clust2sect>
 801062c:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 801062e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010630:	2b00      	cmp	r3, #0
 8010632:	d104      	bne.n	801063e <f_lseek+0x384>
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	2202      	movs	r2, #2
 8010638:	755a      	strb	r2, [r3, #21]
 801063a:	2302      	movs	r3, #2
 801063c:	e05d      	b.n	80106fa <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 801063e:	68bb      	ldr	r3, [r7, #8]
 8010640:	899b      	ldrh	r3, [r3, #12]
 8010642:	461a      	mov	r2, r3
 8010644:	683b      	ldr	r3, [r7, #0]
 8010646:	fbb3 f3f2 	udiv	r3, r3, r2
 801064a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801064c:	4413      	add	r3, r2
 801064e:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	699a      	ldr	r2, [r3, #24]
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	68db      	ldr	r3, [r3, #12]
 8010658:	429a      	cmp	r2, r3
 801065a:	d90a      	bls.n	8010672 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	699a      	ldr	r2, [r3, #24]
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	7d1b      	ldrb	r3, [r3, #20]
 8010668:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801066c:	b2da      	uxtb	r2, r3
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	699b      	ldr	r3, [r3, #24]
 8010676:	68ba      	ldr	r2, [r7, #8]
 8010678:	8992      	ldrh	r2, [r2, #12]
 801067a:	fbb3 f1f2 	udiv	r1, r3, r2
 801067e:	fb02 f201 	mul.w	r2, r2, r1
 8010682:	1a9b      	subs	r3, r3, r2
 8010684:	2b00      	cmp	r3, #0
 8010686:	d036      	beq.n	80106f6 <f_lseek+0x43c>
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	6a1b      	ldr	r3, [r3, #32]
 801068c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801068e:	429a      	cmp	r2, r3
 8010690:	d031      	beq.n	80106f6 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	7d1b      	ldrb	r3, [r3, #20]
 8010696:	b25b      	sxtb	r3, r3
 8010698:	2b00      	cmp	r3, #0
 801069a:	da18      	bge.n	80106ce <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801069c:	68bb      	ldr	r3, [r7, #8]
 801069e:	7858      	ldrb	r0, [r3, #1]
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	6a1a      	ldr	r2, [r3, #32]
 80106aa:	2301      	movs	r3, #1
 80106ac:	f7fc fcd6 	bl	800d05c <disk_write>
 80106b0:	4603      	mov	r3, r0
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d004      	beq.n	80106c0 <f_lseek+0x406>
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	2201      	movs	r2, #1
 80106ba:	755a      	strb	r2, [r3, #21]
 80106bc:	2301      	movs	r3, #1
 80106be:	e01c      	b.n	80106fa <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	7d1b      	ldrb	r3, [r3, #20]
 80106c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80106c8:	b2da      	uxtb	r2, r3
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80106ce:	68bb      	ldr	r3, [r7, #8]
 80106d0:	7858      	ldrb	r0, [r3, #1]
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80106d8:	2301      	movs	r3, #1
 80106da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80106dc:	f7fc fc9e 	bl	800d01c <disk_read>
 80106e0:	4603      	mov	r3, r0
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d004      	beq.n	80106f0 <f_lseek+0x436>
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	2201      	movs	r2, #1
 80106ea:	755a      	strb	r2, [r3, #21]
 80106ec:	2301      	movs	r3, #1
 80106ee:	e004      	b.n	80106fa <f_lseek+0x440>
#endif
			fp->sect = nsect;
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80106f4:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 80106f6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80106fa:	4618      	mov	r0, r3
 80106fc:	3740      	adds	r7, #64	; 0x40
 80106fe:	46bd      	mov	sp, r7
 8010700:	bd80      	pop	{r7, pc}

08010702 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8010702:	b580      	push	{r7, lr}
 8010704:	b0a0      	sub	sp, #128	; 0x80
 8010706:	af00      	add	r7, sp, #0
 8010708:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 801070a:	2300      	movs	r3, #0
 801070c:	67bb      	str	r3, [r7, #120]	; 0x78
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 801070e:	f107 010c 	add.w	r1, r7, #12
 8010712:	1d3b      	adds	r3, r7, #4
 8010714:	2202      	movs	r2, #2
 8010716:	4618      	mov	r0, r3
 8010718:	f7fe fd16 	bl	800f148 <find_volume>
 801071c:	4603      	mov	r3, r0
 801071e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	dj.obj.fs = fs;
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	647b      	str	r3, [r7, #68]	; 0x44
	if (res == FR_OK) {
 8010726:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801072a:	2b00      	cmp	r3, #0
 801072c:	f040 80a4 	bne.w	8010878 <f_unlink+0x176>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 8010730:	687a      	ldr	r2, [r7, #4]
 8010732:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8010736:	4611      	mov	r1, r2
 8010738:	4618      	mov	r0, r3
 801073a:	f7fe fbd5 	bl	800eee8 <follow_path>
 801073e:	4603      	mov	r3, r0
 8010740:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 8010744:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8010748:	2b00      	cmp	r3, #0
 801074a:	d108      	bne.n	801075e <f_unlink+0x5c>
 801074c:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8010750:	f003 0320 	and.w	r3, r3, #32
 8010754:	2b00      	cmp	r3, #0
 8010756:	d002      	beq.n	801075e <f_unlink+0x5c>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 8010758:	2306      	movs	r3, #6
 801075a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 801075e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8010762:	2b00      	cmp	r3, #0
 8010764:	d108      	bne.n	8010778 <f_unlink+0x76>
 8010766:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801076a:	2102      	movs	r1, #2
 801076c:	4618      	mov	r0, r3
 801076e:	f7fc fdb3 	bl	800d2d8 <chk_lock>
 8010772:	4603      	mov	r3, r0
 8010774:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8010778:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801077c:	2b00      	cmp	r3, #0
 801077e:	d17b      	bne.n	8010878 <f_unlink+0x176>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8010780:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8010784:	b25b      	sxtb	r3, r3
 8010786:	2b00      	cmp	r3, #0
 8010788:	da03      	bge.n	8010792 <f_unlink+0x90>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 801078a:	2306      	movs	r3, #6
 801078c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8010790:	e008      	b.n	80107a4 <f_unlink+0xa2>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8010792:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8010796:	f003 0301 	and.w	r3, r3, #1
 801079a:	2b00      	cmp	r3, #0
 801079c:	d002      	beq.n	80107a4 <f_unlink+0xa2>
					res = FR_DENIED;		/* Cannot remove R/O object */
 801079e:	2307      	movs	r3, #7
 80107a0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				}
			}
			if (res == FR_OK) {
 80107a4:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d13d      	bne.n	8010828 <f_unlink+0x126>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 80107ac:	68fb      	ldr	r3, [r7, #12]
 80107ae:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80107b0:	4611      	mov	r1, r2
 80107b2:	4618      	mov	r0, r3
 80107b4:	f7fd fcbf 	bl	800e136 <ld_clust>
 80107b8:	67b8      	str	r0, [r7, #120]	; 0x78
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 80107ba:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80107be:	f003 0310 	and.w	r3, r3, #16
 80107c2:	2b00      	cmp	r3, #0
 80107c4:	d030      	beq.n	8010828 <f_unlink+0x126>
#if _FS_RPATH != 0
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
 80107c6:	68fb      	ldr	r3, [r7, #12]
 80107c8:	69db      	ldr	r3, [r3, #28]
 80107ca:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80107cc:	429a      	cmp	r2, r3
 80107ce:	d103      	bne.n	80107d8 <f_unlink+0xd6>
						res = FR_DENIED;
 80107d0:	2307      	movs	r3, #7
 80107d2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80107d6:	e027      	b.n	8010828 <f_unlink+0x126>
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 80107d8:	68fb      	ldr	r3, [r7, #12]
 80107da:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 80107dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80107de:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 80107e0:	f107 0310 	add.w	r3, r7, #16
 80107e4:	2100      	movs	r1, #0
 80107e6:	4618      	mov	r0, r3
 80107e8:	f7fd faff 	bl	800ddea <dir_sdi>
 80107ec:	4603      	mov	r3, r0
 80107ee:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						if (res == FR_OK) {
 80107f2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d116      	bne.n	8010828 <f_unlink+0x126>
							res = dir_read(&sdj, 0);			/* Read an item */
 80107fa:	f107 0310 	add.w	r3, r7, #16
 80107fe:	2100      	movs	r1, #0
 8010800:	4618      	mov	r0, r3
 8010802:	f7fd fec3 	bl	800e58c <dir_read>
 8010806:	4603      	mov	r3, r0
 8010808:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 801080c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8010810:	2b00      	cmp	r3, #0
 8010812:	d102      	bne.n	801081a <f_unlink+0x118>
 8010814:	2307      	movs	r3, #7
 8010816:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 801081a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801081e:	2b04      	cmp	r3, #4
 8010820:	d102      	bne.n	8010828 <f_unlink+0x126>
 8010822:	2300      	movs	r3, #0
 8010824:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
						}
					}
				}
			}
			if (res == FR_OK) {
 8010828:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 801082c:	2b00      	cmp	r3, #0
 801082e:	d123      	bne.n	8010878 <f_unlink+0x176>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8010830:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8010834:	4618      	mov	r0, r3
 8010836:	f7fe f909 	bl	800ea4c <dir_remove>
 801083a:	4603      	mov	r3, r0
 801083c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8010840:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8010844:	2b00      	cmp	r3, #0
 8010846:	d10c      	bne.n	8010862 <f_unlink+0x160>
 8010848:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801084a:	2b00      	cmp	r3, #0
 801084c:	d009      	beq.n	8010862 <f_unlink+0x160>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 801084e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8010852:	2200      	movs	r2, #0
 8010854:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8010856:	4618      	mov	r0, r3
 8010858:	f7fd f992 	bl	800db80 <remove_chain>
 801085c:	4603      	mov	r3, r0
 801085e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8010862:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8010866:	2b00      	cmp	r3, #0
 8010868:	d106      	bne.n	8010878 <f_unlink+0x176>
 801086a:	68fb      	ldr	r3, [r7, #12]
 801086c:	4618      	mov	r0, r3
 801086e:	f7fc ff11 	bl	800d694 <sync_fs>
 8010872:	4603      	mov	r3, r0
 8010874:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8010878:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 801087c:	4618      	mov	r0, r3
 801087e:	3780      	adds	r7, #128	; 0x80
 8010880:	46bd      	mov	sp, r7
 8010882:	bd80      	pop	{r7, pc}

08010884 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8010884:	b580      	push	{r7, lr}
 8010886:	b098      	sub	sp, #96	; 0x60
 8010888:	af00      	add	r7, sp, #0
 801088a:	6078      	str	r0, [r7, #4]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 801088c:	f107 010c 	add.w	r1, r7, #12
 8010890:	1d3b      	adds	r3, r7, #4
 8010892:	2202      	movs	r2, #2
 8010894:	4618      	mov	r0, r3
 8010896:	f7fe fc57 	bl	800f148 <find_volume>
 801089a:	4603      	mov	r3, r0
 801089c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	dj.obj.fs = fs;
 80108a0:	68fb      	ldr	r3, [r7, #12]
 80108a2:	613b      	str	r3, [r7, #16]
	if (res == FR_OK) {
 80108a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	f040 80ff 	bne.w	8010aac <f_mkdir+0x228>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);			/* Follow the file path */
 80108ae:	687a      	ldr	r2, [r7, #4]
 80108b0:	f107 0310 	add.w	r3, r7, #16
 80108b4:	4611      	mov	r1, r2
 80108b6:	4618      	mov	r0, r3
 80108b8:	f7fe fb16 	bl	800eee8 <follow_path>
 80108bc:	4603      	mov	r3, r0
 80108be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 80108c2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	d102      	bne.n	80108d0 <f_mkdir+0x4c>
 80108ca:	2308      	movs	r3, #8
 80108cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
 80108d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80108d4:	2b04      	cmp	r3, #4
 80108d6:	d108      	bne.n	80108ea <f_mkdir+0x66>
 80108d8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80108dc:	f003 0320 	and.w	r3, r3, #32
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d002      	beq.n	80108ea <f_mkdir+0x66>
			res = FR_INVALID_NAME;
 80108e4:	2306      	movs	r3, #6
 80108e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 80108ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80108ee:	2b04      	cmp	r3, #4
 80108f0:	f040 80dc 	bne.w	8010aac <f_mkdir+0x228>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 80108f4:	f107 0310 	add.w	r3, r7, #16
 80108f8:	2100      	movs	r1, #0
 80108fa:	4618      	mov	r0, r3
 80108fc:	f7fd f9a5 	bl	800dc4a <create_chain>
 8010900:	64f8      	str	r0, [r7, #76]	; 0x4c
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8010902:	68fb      	ldr	r3, [r7, #12]
 8010904:	895b      	ldrh	r3, [r3, #10]
 8010906:	461a      	mov	r2, r3
 8010908:	68fb      	ldr	r3, [r7, #12]
 801090a:	899b      	ldrh	r3, [r3, #12]
 801090c:	fb03 f302 	mul.w	r3, r3, r2
 8010910:	61fb      	str	r3, [r7, #28]
			res = FR_OK;
 8010912:	2300      	movs	r3, #0
 8010914:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8010918:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801091a:	2b00      	cmp	r3, #0
 801091c:	d102      	bne.n	8010924 <f_mkdir+0xa0>
 801091e:	2307      	movs	r3, #7
 8010920:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 1) res = FR_INT_ERR;
 8010924:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010926:	2b01      	cmp	r3, #1
 8010928:	d102      	bne.n	8010930 <f_mkdir+0xac>
 801092a:	2302      	movs	r3, #2
 801092c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8010930:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010936:	d102      	bne.n	801093e <f_mkdir+0xba>
 8010938:	2301      	movs	r3, #1
 801093a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 801093e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010942:	2b00      	cmp	r3, #0
 8010944:	d106      	bne.n	8010954 <f_mkdir+0xd0>
 8010946:	68fb      	ldr	r3, [r7, #12]
 8010948:	4618      	mov	r0, r3
 801094a:	f7fc fe31 	bl	800d5b0 <sync_window>
 801094e:	4603      	mov	r3, r0
 8010950:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			tm = GET_FATTIME();
 8010954:	f7fc f8d2 	bl	800cafc <get_fattime>
 8010958:	64b8      	str	r0, [r7, #72]	; 0x48
			if (res == FR_OK) {					/* Initialize the new directory table */
 801095a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801095e:	2b00      	cmp	r3, #0
 8010960:	d16c      	bne.n	8010a3c <f_mkdir+0x1b8>
				dsc = clust2sect(fs, dcl);
 8010962:	68fb      	ldr	r3, [r7, #12]
 8010964:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8010966:	4618      	mov	r0, r3
 8010968:	f7fc ff04 	bl	800d774 <clust2sect>
 801096c:	6578      	str	r0, [r7, #84]	; 0x54
				dir = fs->win;
 801096e:	68fb      	ldr	r3, [r7, #12]
 8010970:	333c      	adds	r3, #60	; 0x3c
 8010972:	647b      	str	r3, [r7, #68]	; 0x44
				mem_set(dir, 0, SS(fs));
 8010974:	68fb      	ldr	r3, [r7, #12]
 8010976:	899b      	ldrh	r3, [r3, #12]
 8010978:	461a      	mov	r2, r3
 801097a:	2100      	movs	r1, #0
 801097c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801097e:	f7fc fc4e 	bl	800d21e <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8010982:	220b      	movs	r2, #11
 8010984:	2120      	movs	r1, #32
 8010986:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8010988:	f7fc fc49 	bl	800d21e <mem_set>
					dir[DIR_Name] = '.';
 801098c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801098e:	222e      	movs	r2, #46	; 0x2e
 8010990:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8010992:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010994:	330b      	adds	r3, #11
 8010996:	2210      	movs	r2, #16
 8010998:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 801099a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801099c:	3316      	adds	r3, #22
 801099e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80109a0:	4618      	mov	r0, r3
 80109a2:	f7fc fbef 	bl	800d184 <st_dword>
					st_clust(fs, dir, dcl);
 80109a6:	68fb      	ldr	r3, [r7, #12]
 80109a8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80109aa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80109ac:	4618      	mov	r0, r3
 80109ae:	f7fd fbe1 	bl	800e174 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 80109b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80109b4:	3320      	adds	r3, #32
 80109b6:	2220      	movs	r2, #32
 80109b8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80109ba:	4618      	mov	r0, r3
 80109bc:	f7fc fc0e 	bl	800d1dc <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 80109c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80109c2:	3321      	adds	r3, #33	; 0x21
 80109c4:	222e      	movs	r2, #46	; 0x2e
 80109c6:	701a      	strb	r2, [r3, #0]
 80109c8:	69bb      	ldr	r3, [r7, #24]
 80109ca:	653b      	str	r3, [r7, #80]	; 0x50
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 80109cc:	68fb      	ldr	r3, [r7, #12]
 80109ce:	781b      	ldrb	r3, [r3, #0]
 80109d0:	2b03      	cmp	r3, #3
 80109d2:	d106      	bne.n	80109e2 <f_mkdir+0x15e>
 80109d4:	68fb      	ldr	r3, [r7, #12]
 80109d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80109d8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80109da:	429a      	cmp	r2, r3
 80109dc:	d101      	bne.n	80109e2 <f_mkdir+0x15e>
 80109de:	2300      	movs	r3, #0
 80109e0:	653b      	str	r3, [r7, #80]	; 0x50
					st_clust(fs, dir + SZDIRE, pcl);
 80109e2:	68f8      	ldr	r0, [r7, #12]
 80109e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80109e6:	3320      	adds	r3, #32
 80109e8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80109ea:	4619      	mov	r1, r3
 80109ec:	f7fd fbc2 	bl	800e174 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80109f0:	68fb      	ldr	r3, [r7, #12]
 80109f2:	895b      	ldrh	r3, [r3, #10]
 80109f4:	65bb      	str	r3, [r7, #88]	; 0x58
 80109f6:	e01c      	b.n	8010a32 <f_mkdir+0x1ae>
					fs->winsect = dsc++;
 80109f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80109fa:	1c5a      	adds	r2, r3, #1
 80109fc:	657a      	str	r2, [r7, #84]	; 0x54
 80109fe:	68fa      	ldr	r2, [r7, #12]
 8010a00:	6393      	str	r3, [r2, #56]	; 0x38
					fs->wflag = 1;
 8010a02:	68fb      	ldr	r3, [r7, #12]
 8010a04:	2201      	movs	r2, #1
 8010a06:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 8010a08:	68fb      	ldr	r3, [r7, #12]
 8010a0a:	4618      	mov	r0, r3
 8010a0c:	f7fc fdd0 	bl	800d5b0 <sync_window>
 8010a10:	4603      	mov	r3, r0
 8010a12:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (res != FR_OK) break;
 8010a16:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	d10d      	bne.n	8010a3a <f_mkdir+0x1b6>
					mem_set(dir, 0, SS(fs));
 8010a1e:	68fb      	ldr	r3, [r7, #12]
 8010a20:	899b      	ldrh	r3, [r3, #12]
 8010a22:	461a      	mov	r2, r3
 8010a24:	2100      	movs	r1, #0
 8010a26:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8010a28:	f7fc fbf9 	bl	800d21e <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8010a2c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010a2e:	3b01      	subs	r3, #1
 8010a30:	65bb      	str	r3, [r7, #88]	; 0x58
 8010a32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d1df      	bne.n	80109f8 <f_mkdir+0x174>
 8010a38:	e000      	b.n	8010a3c <f_mkdir+0x1b8>
					if (res != FR_OK) break;
 8010a3a:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8010a3c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010a40:	2b00      	cmp	r3, #0
 8010a42:	d107      	bne.n	8010a54 <f_mkdir+0x1d0>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8010a44:	f107 0310 	add.w	r3, r7, #16
 8010a48:	4618      	mov	r0, r3
 8010a4a:	f7fd ff07 	bl	800e85c <dir_register>
 8010a4e:	4603      	mov	r3, r0
 8010a50:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
			if (res == FR_OK) {
 8010a54:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	d120      	bne.n	8010a9e <f_mkdir+0x21a>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8010a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a5e:	647b      	str	r3, [r7, #68]	; 0x44
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8010a60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010a62:	3316      	adds	r3, #22
 8010a64:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8010a66:	4618      	mov	r0, r3
 8010a68:	f7fc fb8c 	bl	800d184 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8010a6c:	68fb      	ldr	r3, [r7, #12]
 8010a6e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010a70:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010a72:	4618      	mov	r0, r3
 8010a74:	f7fd fb7e 	bl	800e174 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8010a78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010a7a:	330b      	adds	r3, #11
 8010a7c:	2210      	movs	r2, #16
 8010a7e:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8010a80:	68fb      	ldr	r3, [r7, #12]
 8010a82:	2201      	movs	r2, #1
 8010a84:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8010a86:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	d10e      	bne.n	8010aac <f_mkdir+0x228>
					res = sync_fs(fs);
 8010a8e:	68fb      	ldr	r3, [r7, #12]
 8010a90:	4618      	mov	r0, r3
 8010a92:	f7fc fdff 	bl	800d694 <sync_fs>
 8010a96:	4603      	mov	r3, r0
 8010a98:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010a9c:	e006      	b.n	8010aac <f_mkdir+0x228>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8010a9e:	f107 0310 	add.w	r3, r7, #16
 8010aa2:	2200      	movs	r2, #0
 8010aa4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8010aa6:	4618      	mov	r0, r3
 8010aa8:	f7fd f86a 	bl	800db80 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8010aac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8010ab0:	4618      	mov	r0, r3
 8010ab2:	3760      	adds	r7, #96	; 0x60
 8010ab4:	46bd      	mov	sp, r7
 8010ab6:	bd80      	pop	{r7, pc}

08010ab8 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8010ab8:	b580      	push	{r7, lr}
 8010aba:	b088      	sub	sp, #32
 8010abc:	af00      	add	r7, sp, #0
 8010abe:	60f8      	str	r0, [r7, #12]
 8010ac0:	60b9      	str	r1, [r7, #8]
 8010ac2:	607a      	str	r2, [r7, #4]
	int n = 0;
 8010ac4:	2300      	movs	r3, #0
 8010ac6:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8010ac8:	68fb      	ldr	r3, [r7, #12]
 8010aca:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8010acc:	e01b      	b.n	8010b06 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8010ace:	f107 0310 	add.w	r3, r7, #16
 8010ad2:	f107 0114 	add.w	r1, r7, #20
 8010ad6:	2201      	movs	r2, #1
 8010ad8:	6878      	ldr	r0, [r7, #4]
 8010ada:	f7ff f809 	bl	800faf0 <f_read>
		if (rc != 1) break;
 8010ade:	693b      	ldr	r3, [r7, #16]
 8010ae0:	2b01      	cmp	r3, #1
 8010ae2:	d116      	bne.n	8010b12 <f_gets+0x5a>
		c = s[0];
 8010ae4:	7d3b      	ldrb	r3, [r7, #20]
 8010ae6:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8010ae8:	7dfb      	ldrb	r3, [r7, #23]
 8010aea:	2b0d      	cmp	r3, #13
 8010aec:	d100      	bne.n	8010af0 <f_gets+0x38>
 8010aee:	e00a      	b.n	8010b06 <f_gets+0x4e>
		*p++ = c;
 8010af0:	69bb      	ldr	r3, [r7, #24]
 8010af2:	1c5a      	adds	r2, r3, #1
 8010af4:	61ba      	str	r2, [r7, #24]
 8010af6:	7dfa      	ldrb	r2, [r7, #23]
 8010af8:	701a      	strb	r2, [r3, #0]
		n++;
 8010afa:	69fb      	ldr	r3, [r7, #28]
 8010afc:	3301      	adds	r3, #1
 8010afe:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8010b00:	7dfb      	ldrb	r3, [r7, #23]
 8010b02:	2b0a      	cmp	r3, #10
 8010b04:	d007      	beq.n	8010b16 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8010b06:	68bb      	ldr	r3, [r7, #8]
 8010b08:	3b01      	subs	r3, #1
 8010b0a:	69fa      	ldr	r2, [r7, #28]
 8010b0c:	429a      	cmp	r2, r3
 8010b0e:	dbde      	blt.n	8010ace <f_gets+0x16>
 8010b10:	e002      	b.n	8010b18 <f_gets+0x60>
		if (rc != 1) break;
 8010b12:	bf00      	nop
 8010b14:	e000      	b.n	8010b18 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 8010b16:	bf00      	nop
	}
	*p = 0;
 8010b18:	69bb      	ldr	r3, [r7, #24]
 8010b1a:	2200      	movs	r2, #0
 8010b1c:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8010b1e:	69fb      	ldr	r3, [r7, #28]
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d001      	beq.n	8010b28 <f_gets+0x70>
 8010b24:	68fb      	ldr	r3, [r7, #12]
 8010b26:	e000      	b.n	8010b2a <f_gets+0x72>
 8010b28:	2300      	movs	r3, #0
}
 8010b2a:	4618      	mov	r0, r3
 8010b2c:	3720      	adds	r7, #32
 8010b2e:	46bd      	mov	sp, r7
 8010b30:	bd80      	pop	{r7, pc}
	...

08010b34 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8010b34:	b480      	push	{r7}
 8010b36:	b087      	sub	sp, #28
 8010b38:	af00      	add	r7, sp, #0
 8010b3a:	60f8      	str	r0, [r7, #12]
 8010b3c:	60b9      	str	r1, [r7, #8]
 8010b3e:	4613      	mov	r3, r2
 8010b40:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8010b42:	2301      	movs	r3, #1
 8010b44:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8010b46:	2300      	movs	r3, #0
 8010b48:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8010b4a:	4b1f      	ldr	r3, [pc, #124]	; (8010bc8 <FATFS_LinkDriverEx+0x94>)
 8010b4c:	7a5b      	ldrb	r3, [r3, #9]
 8010b4e:	b2db      	uxtb	r3, r3
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	d131      	bne.n	8010bb8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010b54:	4b1c      	ldr	r3, [pc, #112]	; (8010bc8 <FATFS_LinkDriverEx+0x94>)
 8010b56:	7a5b      	ldrb	r3, [r3, #9]
 8010b58:	b2db      	uxtb	r3, r3
 8010b5a:	461a      	mov	r2, r3
 8010b5c:	4b1a      	ldr	r3, [pc, #104]	; (8010bc8 <FATFS_LinkDriverEx+0x94>)
 8010b5e:	2100      	movs	r1, #0
 8010b60:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8010b62:	4b19      	ldr	r3, [pc, #100]	; (8010bc8 <FATFS_LinkDriverEx+0x94>)
 8010b64:	7a5b      	ldrb	r3, [r3, #9]
 8010b66:	b2db      	uxtb	r3, r3
 8010b68:	4a17      	ldr	r2, [pc, #92]	; (8010bc8 <FATFS_LinkDriverEx+0x94>)
 8010b6a:	009b      	lsls	r3, r3, #2
 8010b6c:	4413      	add	r3, r2
 8010b6e:	68fa      	ldr	r2, [r7, #12]
 8010b70:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8010b72:	4b15      	ldr	r3, [pc, #84]	; (8010bc8 <FATFS_LinkDriverEx+0x94>)
 8010b74:	7a5b      	ldrb	r3, [r3, #9]
 8010b76:	b2db      	uxtb	r3, r3
 8010b78:	461a      	mov	r2, r3
 8010b7a:	4b13      	ldr	r3, [pc, #76]	; (8010bc8 <FATFS_LinkDriverEx+0x94>)
 8010b7c:	4413      	add	r3, r2
 8010b7e:	79fa      	ldrb	r2, [r7, #7]
 8010b80:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8010b82:	4b11      	ldr	r3, [pc, #68]	; (8010bc8 <FATFS_LinkDriverEx+0x94>)
 8010b84:	7a5b      	ldrb	r3, [r3, #9]
 8010b86:	b2db      	uxtb	r3, r3
 8010b88:	1c5a      	adds	r2, r3, #1
 8010b8a:	b2d1      	uxtb	r1, r2
 8010b8c:	4a0e      	ldr	r2, [pc, #56]	; (8010bc8 <FATFS_LinkDriverEx+0x94>)
 8010b8e:	7251      	strb	r1, [r2, #9]
 8010b90:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8010b92:	7dbb      	ldrb	r3, [r7, #22]
 8010b94:	3330      	adds	r3, #48	; 0x30
 8010b96:	b2da      	uxtb	r2, r3
 8010b98:	68bb      	ldr	r3, [r7, #8]
 8010b9a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8010b9c:	68bb      	ldr	r3, [r7, #8]
 8010b9e:	3301      	adds	r3, #1
 8010ba0:	223a      	movs	r2, #58	; 0x3a
 8010ba2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8010ba4:	68bb      	ldr	r3, [r7, #8]
 8010ba6:	3302      	adds	r3, #2
 8010ba8:	222f      	movs	r2, #47	; 0x2f
 8010baa:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8010bac:	68bb      	ldr	r3, [r7, #8]
 8010bae:	3303      	adds	r3, #3
 8010bb0:	2200      	movs	r2, #0
 8010bb2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8010bb4:	2300      	movs	r3, #0
 8010bb6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8010bb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8010bba:	4618      	mov	r0, r3
 8010bbc:	371c      	adds	r7, #28
 8010bbe:	46bd      	mov	sp, r7
 8010bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bc4:	4770      	bx	lr
 8010bc6:	bf00      	nop
 8010bc8:	20007d94 	.word	0x20007d94

08010bcc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8010bcc:	b580      	push	{r7, lr}
 8010bce:	b082      	sub	sp, #8
 8010bd0:	af00      	add	r7, sp, #0
 8010bd2:	6078      	str	r0, [r7, #4]
 8010bd4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8010bd6:	2200      	movs	r2, #0
 8010bd8:	6839      	ldr	r1, [r7, #0]
 8010bda:	6878      	ldr	r0, [r7, #4]
 8010bdc:	f7ff ffaa 	bl	8010b34 <FATFS_LinkDriverEx>
 8010be0:	4603      	mov	r3, r0
}
 8010be2:	4618      	mov	r0, r3
 8010be4:	3708      	adds	r7, #8
 8010be6:	46bd      	mov	sp, r7
 8010be8:	bd80      	pop	{r7, pc}
	...

08010bec <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8010bec:	b480      	push	{r7}
 8010bee:	b085      	sub	sp, #20
 8010bf0:	af00      	add	r7, sp, #0
 8010bf2:	4603      	mov	r3, r0
 8010bf4:	6039      	str	r1, [r7, #0]
 8010bf6:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8010bf8:	88fb      	ldrh	r3, [r7, #6]
 8010bfa:	2b7f      	cmp	r3, #127	; 0x7f
 8010bfc:	d802      	bhi.n	8010c04 <ff_convert+0x18>
		c = chr;
 8010bfe:	88fb      	ldrh	r3, [r7, #6]
 8010c00:	81fb      	strh	r3, [r7, #14]
 8010c02:	e025      	b.n	8010c50 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8010c04:	683b      	ldr	r3, [r7, #0]
 8010c06:	2b00      	cmp	r3, #0
 8010c08:	d00b      	beq.n	8010c22 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8010c0a:	88fb      	ldrh	r3, [r7, #6]
 8010c0c:	2bff      	cmp	r3, #255	; 0xff
 8010c0e:	d805      	bhi.n	8010c1c <ff_convert+0x30>
 8010c10:	88fb      	ldrh	r3, [r7, #6]
 8010c12:	3b80      	subs	r3, #128	; 0x80
 8010c14:	4a12      	ldr	r2, [pc, #72]	; (8010c60 <ff_convert+0x74>)
 8010c16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010c1a:	e000      	b.n	8010c1e <ff_convert+0x32>
 8010c1c:	2300      	movs	r3, #0
 8010c1e:	81fb      	strh	r3, [r7, #14]
 8010c20:	e016      	b.n	8010c50 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8010c22:	2300      	movs	r3, #0
 8010c24:	81fb      	strh	r3, [r7, #14]
 8010c26:	e009      	b.n	8010c3c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8010c28:	89fb      	ldrh	r3, [r7, #14]
 8010c2a:	4a0d      	ldr	r2, [pc, #52]	; (8010c60 <ff_convert+0x74>)
 8010c2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010c30:	88fa      	ldrh	r2, [r7, #6]
 8010c32:	429a      	cmp	r2, r3
 8010c34:	d006      	beq.n	8010c44 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8010c36:	89fb      	ldrh	r3, [r7, #14]
 8010c38:	3301      	adds	r3, #1
 8010c3a:	81fb      	strh	r3, [r7, #14]
 8010c3c:	89fb      	ldrh	r3, [r7, #14]
 8010c3e:	2b7f      	cmp	r3, #127	; 0x7f
 8010c40:	d9f2      	bls.n	8010c28 <ff_convert+0x3c>
 8010c42:	e000      	b.n	8010c46 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8010c44:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8010c46:	89fb      	ldrh	r3, [r7, #14]
 8010c48:	3380      	adds	r3, #128	; 0x80
 8010c4a:	b29b      	uxth	r3, r3
 8010c4c:	b2db      	uxtb	r3, r3
 8010c4e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8010c50:	89fb      	ldrh	r3, [r7, #14]
}
 8010c52:	4618      	mov	r0, r3
 8010c54:	3714      	adds	r7, #20
 8010c56:	46bd      	mov	sp, r7
 8010c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c5c:	4770      	bx	lr
 8010c5e:	bf00      	nop
 8010c60:	08016f4c 	.word	0x08016f4c

08010c64 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8010c64:	b480      	push	{r7}
 8010c66:	b087      	sub	sp, #28
 8010c68:	af00      	add	r7, sp, #0
 8010c6a:	4603      	mov	r3, r0
 8010c6c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8010c6e:	88fb      	ldrh	r3, [r7, #6]
 8010c70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010c74:	d201      	bcs.n	8010c7a <ff_wtoupper+0x16>
 8010c76:	4b3e      	ldr	r3, [pc, #248]	; (8010d70 <ff_wtoupper+0x10c>)
 8010c78:	e000      	b.n	8010c7c <ff_wtoupper+0x18>
 8010c7a:	4b3e      	ldr	r3, [pc, #248]	; (8010d74 <ff_wtoupper+0x110>)
 8010c7c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8010c7e:	697b      	ldr	r3, [r7, #20]
 8010c80:	1c9a      	adds	r2, r3, #2
 8010c82:	617a      	str	r2, [r7, #20]
 8010c84:	881b      	ldrh	r3, [r3, #0]
 8010c86:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8010c88:	8a7b      	ldrh	r3, [r7, #18]
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	d068      	beq.n	8010d60 <ff_wtoupper+0xfc>
 8010c8e:	88fa      	ldrh	r2, [r7, #6]
 8010c90:	8a7b      	ldrh	r3, [r7, #18]
 8010c92:	429a      	cmp	r2, r3
 8010c94:	d364      	bcc.n	8010d60 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8010c96:	697b      	ldr	r3, [r7, #20]
 8010c98:	1c9a      	adds	r2, r3, #2
 8010c9a:	617a      	str	r2, [r7, #20]
 8010c9c:	881b      	ldrh	r3, [r3, #0]
 8010c9e:	823b      	strh	r3, [r7, #16]
 8010ca0:	8a3b      	ldrh	r3, [r7, #16]
 8010ca2:	0a1b      	lsrs	r3, r3, #8
 8010ca4:	81fb      	strh	r3, [r7, #14]
 8010ca6:	8a3b      	ldrh	r3, [r7, #16]
 8010ca8:	b2db      	uxtb	r3, r3
 8010caa:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8010cac:	88fa      	ldrh	r2, [r7, #6]
 8010cae:	8a79      	ldrh	r1, [r7, #18]
 8010cb0:	8a3b      	ldrh	r3, [r7, #16]
 8010cb2:	440b      	add	r3, r1
 8010cb4:	429a      	cmp	r2, r3
 8010cb6:	da49      	bge.n	8010d4c <ff_wtoupper+0xe8>
			switch (cmd) {
 8010cb8:	89fb      	ldrh	r3, [r7, #14]
 8010cba:	2b08      	cmp	r3, #8
 8010cbc:	d84f      	bhi.n	8010d5e <ff_wtoupper+0xfa>
 8010cbe:	a201      	add	r2, pc, #4	; (adr r2, 8010cc4 <ff_wtoupper+0x60>)
 8010cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010cc4:	08010ce9 	.word	0x08010ce9
 8010cc8:	08010cfb 	.word	0x08010cfb
 8010ccc:	08010d11 	.word	0x08010d11
 8010cd0:	08010d19 	.word	0x08010d19
 8010cd4:	08010d21 	.word	0x08010d21
 8010cd8:	08010d29 	.word	0x08010d29
 8010cdc:	08010d31 	.word	0x08010d31
 8010ce0:	08010d39 	.word	0x08010d39
 8010ce4:	08010d41 	.word	0x08010d41
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8010ce8:	88fa      	ldrh	r2, [r7, #6]
 8010cea:	8a7b      	ldrh	r3, [r7, #18]
 8010cec:	1ad3      	subs	r3, r2, r3
 8010cee:	005b      	lsls	r3, r3, #1
 8010cf0:	697a      	ldr	r2, [r7, #20]
 8010cf2:	4413      	add	r3, r2
 8010cf4:	881b      	ldrh	r3, [r3, #0]
 8010cf6:	80fb      	strh	r3, [r7, #6]
 8010cf8:	e027      	b.n	8010d4a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8010cfa:	88fa      	ldrh	r2, [r7, #6]
 8010cfc:	8a7b      	ldrh	r3, [r7, #18]
 8010cfe:	1ad3      	subs	r3, r2, r3
 8010d00:	b29b      	uxth	r3, r3
 8010d02:	f003 0301 	and.w	r3, r3, #1
 8010d06:	b29b      	uxth	r3, r3
 8010d08:	88fa      	ldrh	r2, [r7, #6]
 8010d0a:	1ad3      	subs	r3, r2, r3
 8010d0c:	80fb      	strh	r3, [r7, #6]
 8010d0e:	e01c      	b.n	8010d4a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8010d10:	88fb      	ldrh	r3, [r7, #6]
 8010d12:	3b10      	subs	r3, #16
 8010d14:	80fb      	strh	r3, [r7, #6]
 8010d16:	e018      	b.n	8010d4a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8010d18:	88fb      	ldrh	r3, [r7, #6]
 8010d1a:	3b20      	subs	r3, #32
 8010d1c:	80fb      	strh	r3, [r7, #6]
 8010d1e:	e014      	b.n	8010d4a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8010d20:	88fb      	ldrh	r3, [r7, #6]
 8010d22:	3b30      	subs	r3, #48	; 0x30
 8010d24:	80fb      	strh	r3, [r7, #6]
 8010d26:	e010      	b.n	8010d4a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8010d28:	88fb      	ldrh	r3, [r7, #6]
 8010d2a:	3b1a      	subs	r3, #26
 8010d2c:	80fb      	strh	r3, [r7, #6]
 8010d2e:	e00c      	b.n	8010d4a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8010d30:	88fb      	ldrh	r3, [r7, #6]
 8010d32:	3308      	adds	r3, #8
 8010d34:	80fb      	strh	r3, [r7, #6]
 8010d36:	e008      	b.n	8010d4a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8010d38:	88fb      	ldrh	r3, [r7, #6]
 8010d3a:	3b50      	subs	r3, #80	; 0x50
 8010d3c:	80fb      	strh	r3, [r7, #6]
 8010d3e:	e004      	b.n	8010d4a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8010d40:	88fb      	ldrh	r3, [r7, #6]
 8010d42:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8010d46:	80fb      	strh	r3, [r7, #6]
 8010d48:	bf00      	nop
			}
			break;
 8010d4a:	e008      	b.n	8010d5e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8010d4c:	89fb      	ldrh	r3, [r7, #14]
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	d195      	bne.n	8010c7e <ff_wtoupper+0x1a>
 8010d52:	8a3b      	ldrh	r3, [r7, #16]
 8010d54:	005b      	lsls	r3, r3, #1
 8010d56:	697a      	ldr	r2, [r7, #20]
 8010d58:	4413      	add	r3, r2
 8010d5a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8010d5c:	e78f      	b.n	8010c7e <ff_wtoupper+0x1a>
			break;
 8010d5e:	bf00      	nop
	}

	return chr;
 8010d60:	88fb      	ldrh	r3, [r7, #6]
}
 8010d62:	4618      	mov	r0, r3
 8010d64:	371c      	adds	r7, #28
 8010d66:	46bd      	mov	sp, r7
 8010d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d6c:	4770      	bx	lr
 8010d6e:	bf00      	nop
 8010d70:	0801704c 	.word	0x0801704c
 8010d74:	08017240 	.word	0x08017240

08010d78 <cos>:
 8010d78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010d7a:	ec51 0b10 	vmov	r0, r1, d0
 8010d7e:	4a1e      	ldr	r2, [pc, #120]	; (8010df8 <cos+0x80>)
 8010d80:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010d84:	4293      	cmp	r3, r2
 8010d86:	dc06      	bgt.n	8010d96 <cos+0x1e>
 8010d88:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8010df0 <cos+0x78>
 8010d8c:	f000 fa74 	bl	8011278 <__kernel_cos>
 8010d90:	ec51 0b10 	vmov	r0, r1, d0
 8010d94:	e007      	b.n	8010da6 <cos+0x2e>
 8010d96:	4a19      	ldr	r2, [pc, #100]	; (8010dfc <cos+0x84>)
 8010d98:	4293      	cmp	r3, r2
 8010d9a:	dd09      	ble.n	8010db0 <cos+0x38>
 8010d9c:	ee10 2a10 	vmov	r2, s0
 8010da0:	460b      	mov	r3, r1
 8010da2:	f7ef fa89 	bl	80002b8 <__aeabi_dsub>
 8010da6:	ec41 0b10 	vmov	d0, r0, r1
 8010daa:	b005      	add	sp, #20
 8010dac:	f85d fb04 	ldr.w	pc, [sp], #4
 8010db0:	4668      	mov	r0, sp
 8010db2:	f000 f86d 	bl	8010e90 <__ieee754_rem_pio2>
 8010db6:	f000 0003 	and.w	r0, r0, #3
 8010dba:	2801      	cmp	r0, #1
 8010dbc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010dc0:	ed9d 0b00 	vldr	d0, [sp]
 8010dc4:	d007      	beq.n	8010dd6 <cos+0x5e>
 8010dc6:	2802      	cmp	r0, #2
 8010dc8:	d00e      	beq.n	8010de8 <cos+0x70>
 8010dca:	2800      	cmp	r0, #0
 8010dcc:	d0de      	beq.n	8010d8c <cos+0x14>
 8010dce:	2001      	movs	r0, #1
 8010dd0:	f000 fe5a 	bl	8011a88 <__kernel_sin>
 8010dd4:	e7dc      	b.n	8010d90 <cos+0x18>
 8010dd6:	f000 fe57 	bl	8011a88 <__kernel_sin>
 8010dda:	ec53 2b10 	vmov	r2, r3, d0
 8010dde:	ee10 0a10 	vmov	r0, s0
 8010de2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8010de6:	e7de      	b.n	8010da6 <cos+0x2e>
 8010de8:	f000 fa46 	bl	8011278 <__kernel_cos>
 8010dec:	e7f5      	b.n	8010dda <cos+0x62>
 8010dee:	bf00      	nop
	...
 8010df8:	3fe921fb 	.word	0x3fe921fb
 8010dfc:	7fefffff 	.word	0x7fefffff

08010e00 <sin>:
 8010e00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010e02:	ec51 0b10 	vmov	r0, r1, d0
 8010e06:	4a20      	ldr	r2, [pc, #128]	; (8010e88 <sin+0x88>)
 8010e08:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010e0c:	4293      	cmp	r3, r2
 8010e0e:	dc07      	bgt.n	8010e20 <sin+0x20>
 8010e10:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8010e80 <sin+0x80>
 8010e14:	2000      	movs	r0, #0
 8010e16:	f000 fe37 	bl	8011a88 <__kernel_sin>
 8010e1a:	ec51 0b10 	vmov	r0, r1, d0
 8010e1e:	e007      	b.n	8010e30 <sin+0x30>
 8010e20:	4a1a      	ldr	r2, [pc, #104]	; (8010e8c <sin+0x8c>)
 8010e22:	4293      	cmp	r3, r2
 8010e24:	dd09      	ble.n	8010e3a <sin+0x3a>
 8010e26:	ee10 2a10 	vmov	r2, s0
 8010e2a:	460b      	mov	r3, r1
 8010e2c:	f7ef fa44 	bl	80002b8 <__aeabi_dsub>
 8010e30:	ec41 0b10 	vmov	d0, r0, r1
 8010e34:	b005      	add	sp, #20
 8010e36:	f85d fb04 	ldr.w	pc, [sp], #4
 8010e3a:	4668      	mov	r0, sp
 8010e3c:	f000 f828 	bl	8010e90 <__ieee754_rem_pio2>
 8010e40:	f000 0003 	and.w	r0, r0, #3
 8010e44:	2801      	cmp	r0, #1
 8010e46:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010e4a:	ed9d 0b00 	vldr	d0, [sp]
 8010e4e:	d004      	beq.n	8010e5a <sin+0x5a>
 8010e50:	2802      	cmp	r0, #2
 8010e52:	d005      	beq.n	8010e60 <sin+0x60>
 8010e54:	b970      	cbnz	r0, 8010e74 <sin+0x74>
 8010e56:	2001      	movs	r0, #1
 8010e58:	e7dd      	b.n	8010e16 <sin+0x16>
 8010e5a:	f000 fa0d 	bl	8011278 <__kernel_cos>
 8010e5e:	e7dc      	b.n	8010e1a <sin+0x1a>
 8010e60:	2001      	movs	r0, #1
 8010e62:	f000 fe11 	bl	8011a88 <__kernel_sin>
 8010e66:	ec53 2b10 	vmov	r2, r3, d0
 8010e6a:	ee10 0a10 	vmov	r0, s0
 8010e6e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8010e72:	e7dd      	b.n	8010e30 <sin+0x30>
 8010e74:	f000 fa00 	bl	8011278 <__kernel_cos>
 8010e78:	e7f5      	b.n	8010e66 <sin+0x66>
 8010e7a:	bf00      	nop
 8010e7c:	f3af 8000 	nop.w
	...
 8010e88:	3fe921fb 	.word	0x3fe921fb
 8010e8c:	7fefffff 	.word	0x7fefffff

08010e90 <__ieee754_rem_pio2>:
 8010e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e94:	ec57 6b10 	vmov	r6, r7, d0
 8010e98:	4bc3      	ldr	r3, [pc, #780]	; (80111a8 <__ieee754_rem_pio2+0x318>)
 8010e9a:	b08d      	sub	sp, #52	; 0x34
 8010e9c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8010ea0:	4598      	cmp	r8, r3
 8010ea2:	4604      	mov	r4, r0
 8010ea4:	9704      	str	r7, [sp, #16]
 8010ea6:	dc07      	bgt.n	8010eb8 <__ieee754_rem_pio2+0x28>
 8010ea8:	2200      	movs	r2, #0
 8010eaa:	2300      	movs	r3, #0
 8010eac:	ed84 0b00 	vstr	d0, [r4]
 8010eb0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8010eb4:	2500      	movs	r5, #0
 8010eb6:	e027      	b.n	8010f08 <__ieee754_rem_pio2+0x78>
 8010eb8:	4bbc      	ldr	r3, [pc, #752]	; (80111ac <__ieee754_rem_pio2+0x31c>)
 8010eba:	4598      	cmp	r8, r3
 8010ebc:	dc75      	bgt.n	8010faa <__ieee754_rem_pio2+0x11a>
 8010ebe:	9b04      	ldr	r3, [sp, #16]
 8010ec0:	4dbb      	ldr	r5, [pc, #748]	; (80111b0 <__ieee754_rem_pio2+0x320>)
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	ee10 0a10 	vmov	r0, s0
 8010ec8:	a3a9      	add	r3, pc, #676	; (adr r3, 8011170 <__ieee754_rem_pio2+0x2e0>)
 8010eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ece:	4639      	mov	r1, r7
 8010ed0:	dd36      	ble.n	8010f40 <__ieee754_rem_pio2+0xb0>
 8010ed2:	f7ef f9f1 	bl	80002b8 <__aeabi_dsub>
 8010ed6:	45a8      	cmp	r8, r5
 8010ed8:	4606      	mov	r6, r0
 8010eda:	460f      	mov	r7, r1
 8010edc:	d018      	beq.n	8010f10 <__ieee754_rem_pio2+0x80>
 8010ede:	a3a6      	add	r3, pc, #664	; (adr r3, 8011178 <__ieee754_rem_pio2+0x2e8>)
 8010ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ee4:	f7ef f9e8 	bl	80002b8 <__aeabi_dsub>
 8010ee8:	4602      	mov	r2, r0
 8010eea:	460b      	mov	r3, r1
 8010eec:	e9c4 2300 	strd	r2, r3, [r4]
 8010ef0:	4630      	mov	r0, r6
 8010ef2:	4639      	mov	r1, r7
 8010ef4:	f7ef f9e0 	bl	80002b8 <__aeabi_dsub>
 8010ef8:	a39f      	add	r3, pc, #636	; (adr r3, 8011178 <__ieee754_rem_pio2+0x2e8>)
 8010efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010efe:	f7ef f9db 	bl	80002b8 <__aeabi_dsub>
 8010f02:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010f06:	2501      	movs	r5, #1
 8010f08:	4628      	mov	r0, r5
 8010f0a:	b00d      	add	sp, #52	; 0x34
 8010f0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f10:	a39b      	add	r3, pc, #620	; (adr r3, 8011180 <__ieee754_rem_pio2+0x2f0>)
 8010f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f16:	f7ef f9cf 	bl	80002b8 <__aeabi_dsub>
 8010f1a:	a39b      	add	r3, pc, #620	; (adr r3, 8011188 <__ieee754_rem_pio2+0x2f8>)
 8010f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f20:	4606      	mov	r6, r0
 8010f22:	460f      	mov	r7, r1
 8010f24:	f7ef f9c8 	bl	80002b8 <__aeabi_dsub>
 8010f28:	4602      	mov	r2, r0
 8010f2a:	460b      	mov	r3, r1
 8010f2c:	e9c4 2300 	strd	r2, r3, [r4]
 8010f30:	4630      	mov	r0, r6
 8010f32:	4639      	mov	r1, r7
 8010f34:	f7ef f9c0 	bl	80002b8 <__aeabi_dsub>
 8010f38:	a393      	add	r3, pc, #588	; (adr r3, 8011188 <__ieee754_rem_pio2+0x2f8>)
 8010f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f3e:	e7de      	b.n	8010efe <__ieee754_rem_pio2+0x6e>
 8010f40:	f7ef f9bc 	bl	80002bc <__adddf3>
 8010f44:	45a8      	cmp	r8, r5
 8010f46:	4606      	mov	r6, r0
 8010f48:	460f      	mov	r7, r1
 8010f4a:	d016      	beq.n	8010f7a <__ieee754_rem_pio2+0xea>
 8010f4c:	a38a      	add	r3, pc, #552	; (adr r3, 8011178 <__ieee754_rem_pio2+0x2e8>)
 8010f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f52:	f7ef f9b3 	bl	80002bc <__adddf3>
 8010f56:	4602      	mov	r2, r0
 8010f58:	460b      	mov	r3, r1
 8010f5a:	e9c4 2300 	strd	r2, r3, [r4]
 8010f5e:	4630      	mov	r0, r6
 8010f60:	4639      	mov	r1, r7
 8010f62:	f7ef f9a9 	bl	80002b8 <__aeabi_dsub>
 8010f66:	a384      	add	r3, pc, #528	; (adr r3, 8011178 <__ieee754_rem_pio2+0x2e8>)
 8010f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f6c:	f7ef f9a6 	bl	80002bc <__adddf3>
 8010f70:	f04f 35ff 	mov.w	r5, #4294967295
 8010f74:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010f78:	e7c6      	b.n	8010f08 <__ieee754_rem_pio2+0x78>
 8010f7a:	a381      	add	r3, pc, #516	; (adr r3, 8011180 <__ieee754_rem_pio2+0x2f0>)
 8010f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f80:	f7ef f99c 	bl	80002bc <__adddf3>
 8010f84:	a380      	add	r3, pc, #512	; (adr r3, 8011188 <__ieee754_rem_pio2+0x2f8>)
 8010f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f8a:	4606      	mov	r6, r0
 8010f8c:	460f      	mov	r7, r1
 8010f8e:	f7ef f995 	bl	80002bc <__adddf3>
 8010f92:	4602      	mov	r2, r0
 8010f94:	460b      	mov	r3, r1
 8010f96:	e9c4 2300 	strd	r2, r3, [r4]
 8010f9a:	4630      	mov	r0, r6
 8010f9c:	4639      	mov	r1, r7
 8010f9e:	f7ef f98b 	bl	80002b8 <__aeabi_dsub>
 8010fa2:	a379      	add	r3, pc, #484	; (adr r3, 8011188 <__ieee754_rem_pio2+0x2f8>)
 8010fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fa8:	e7e0      	b.n	8010f6c <__ieee754_rem_pio2+0xdc>
 8010faa:	4b82      	ldr	r3, [pc, #520]	; (80111b4 <__ieee754_rem_pio2+0x324>)
 8010fac:	4598      	cmp	r8, r3
 8010fae:	f300 80d0 	bgt.w	8011152 <__ieee754_rem_pio2+0x2c2>
 8010fb2:	f000 fe23 	bl	8011bfc <fabs>
 8010fb6:	ec57 6b10 	vmov	r6, r7, d0
 8010fba:	ee10 0a10 	vmov	r0, s0
 8010fbe:	a374      	add	r3, pc, #464	; (adr r3, 8011190 <__ieee754_rem_pio2+0x300>)
 8010fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fc4:	4639      	mov	r1, r7
 8010fc6:	f7ef fb2f 	bl	8000628 <__aeabi_dmul>
 8010fca:	2200      	movs	r2, #0
 8010fcc:	4b7a      	ldr	r3, [pc, #488]	; (80111b8 <__ieee754_rem_pio2+0x328>)
 8010fce:	f7ef f975 	bl	80002bc <__adddf3>
 8010fd2:	f7ef fdd9 	bl	8000b88 <__aeabi_d2iz>
 8010fd6:	4605      	mov	r5, r0
 8010fd8:	f7ef fabc 	bl	8000554 <__aeabi_i2d>
 8010fdc:	a364      	add	r3, pc, #400	; (adr r3, 8011170 <__ieee754_rem_pio2+0x2e0>)
 8010fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fe2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010fe6:	f7ef fb1f 	bl	8000628 <__aeabi_dmul>
 8010fea:	4602      	mov	r2, r0
 8010fec:	460b      	mov	r3, r1
 8010fee:	4630      	mov	r0, r6
 8010ff0:	4639      	mov	r1, r7
 8010ff2:	f7ef f961 	bl	80002b8 <__aeabi_dsub>
 8010ff6:	a360      	add	r3, pc, #384	; (adr r3, 8011178 <__ieee754_rem_pio2+0x2e8>)
 8010ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ffc:	4682      	mov	sl, r0
 8010ffe:	468b      	mov	fp, r1
 8011000:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011004:	f7ef fb10 	bl	8000628 <__aeabi_dmul>
 8011008:	2d1f      	cmp	r5, #31
 801100a:	4606      	mov	r6, r0
 801100c:	460f      	mov	r7, r1
 801100e:	dc0c      	bgt.n	801102a <__ieee754_rem_pio2+0x19a>
 8011010:	1e6a      	subs	r2, r5, #1
 8011012:	4b6a      	ldr	r3, [pc, #424]	; (80111bc <__ieee754_rem_pio2+0x32c>)
 8011014:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011018:	4543      	cmp	r3, r8
 801101a:	d006      	beq.n	801102a <__ieee754_rem_pio2+0x19a>
 801101c:	4632      	mov	r2, r6
 801101e:	463b      	mov	r3, r7
 8011020:	4650      	mov	r0, sl
 8011022:	4659      	mov	r1, fp
 8011024:	f7ef f948 	bl	80002b8 <__aeabi_dsub>
 8011028:	e00e      	b.n	8011048 <__ieee754_rem_pio2+0x1b8>
 801102a:	4632      	mov	r2, r6
 801102c:	463b      	mov	r3, r7
 801102e:	4650      	mov	r0, sl
 8011030:	4659      	mov	r1, fp
 8011032:	f7ef f941 	bl	80002b8 <__aeabi_dsub>
 8011036:	ea4f 5328 	mov.w	r3, r8, asr #20
 801103a:	9305      	str	r3, [sp, #20]
 801103c:	9a05      	ldr	r2, [sp, #20]
 801103e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011042:	1ad3      	subs	r3, r2, r3
 8011044:	2b10      	cmp	r3, #16
 8011046:	dc02      	bgt.n	801104e <__ieee754_rem_pio2+0x1be>
 8011048:	e9c4 0100 	strd	r0, r1, [r4]
 801104c:	e039      	b.n	80110c2 <__ieee754_rem_pio2+0x232>
 801104e:	a34c      	add	r3, pc, #304	; (adr r3, 8011180 <__ieee754_rem_pio2+0x2f0>)
 8011050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011054:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011058:	f7ef fae6 	bl	8000628 <__aeabi_dmul>
 801105c:	4606      	mov	r6, r0
 801105e:	460f      	mov	r7, r1
 8011060:	4602      	mov	r2, r0
 8011062:	460b      	mov	r3, r1
 8011064:	4650      	mov	r0, sl
 8011066:	4659      	mov	r1, fp
 8011068:	f7ef f926 	bl	80002b8 <__aeabi_dsub>
 801106c:	4602      	mov	r2, r0
 801106e:	460b      	mov	r3, r1
 8011070:	4680      	mov	r8, r0
 8011072:	4689      	mov	r9, r1
 8011074:	4650      	mov	r0, sl
 8011076:	4659      	mov	r1, fp
 8011078:	f7ef f91e 	bl	80002b8 <__aeabi_dsub>
 801107c:	4632      	mov	r2, r6
 801107e:	463b      	mov	r3, r7
 8011080:	f7ef f91a 	bl	80002b8 <__aeabi_dsub>
 8011084:	a340      	add	r3, pc, #256	; (adr r3, 8011188 <__ieee754_rem_pio2+0x2f8>)
 8011086:	e9d3 2300 	ldrd	r2, r3, [r3]
 801108a:	4606      	mov	r6, r0
 801108c:	460f      	mov	r7, r1
 801108e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011092:	f7ef fac9 	bl	8000628 <__aeabi_dmul>
 8011096:	4632      	mov	r2, r6
 8011098:	463b      	mov	r3, r7
 801109a:	f7ef f90d 	bl	80002b8 <__aeabi_dsub>
 801109e:	4602      	mov	r2, r0
 80110a0:	460b      	mov	r3, r1
 80110a2:	4606      	mov	r6, r0
 80110a4:	460f      	mov	r7, r1
 80110a6:	4640      	mov	r0, r8
 80110a8:	4649      	mov	r1, r9
 80110aa:	f7ef f905 	bl	80002b8 <__aeabi_dsub>
 80110ae:	9a05      	ldr	r2, [sp, #20]
 80110b0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80110b4:	1ad3      	subs	r3, r2, r3
 80110b6:	2b31      	cmp	r3, #49	; 0x31
 80110b8:	dc20      	bgt.n	80110fc <__ieee754_rem_pio2+0x26c>
 80110ba:	e9c4 0100 	strd	r0, r1, [r4]
 80110be:	46c2      	mov	sl, r8
 80110c0:	46cb      	mov	fp, r9
 80110c2:	e9d4 8900 	ldrd	r8, r9, [r4]
 80110c6:	4650      	mov	r0, sl
 80110c8:	4642      	mov	r2, r8
 80110ca:	464b      	mov	r3, r9
 80110cc:	4659      	mov	r1, fp
 80110ce:	f7ef f8f3 	bl	80002b8 <__aeabi_dsub>
 80110d2:	463b      	mov	r3, r7
 80110d4:	4632      	mov	r2, r6
 80110d6:	f7ef f8ef 	bl	80002b8 <__aeabi_dsub>
 80110da:	9b04      	ldr	r3, [sp, #16]
 80110dc:	2b00      	cmp	r3, #0
 80110de:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80110e2:	f6bf af11 	bge.w	8010f08 <__ieee754_rem_pio2+0x78>
 80110e6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80110ea:	6063      	str	r3, [r4, #4]
 80110ec:	f8c4 8000 	str.w	r8, [r4]
 80110f0:	60a0      	str	r0, [r4, #8]
 80110f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80110f6:	60e3      	str	r3, [r4, #12]
 80110f8:	426d      	negs	r5, r5
 80110fa:	e705      	b.n	8010f08 <__ieee754_rem_pio2+0x78>
 80110fc:	a326      	add	r3, pc, #152	; (adr r3, 8011198 <__ieee754_rem_pio2+0x308>)
 80110fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011102:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011106:	f7ef fa8f 	bl	8000628 <__aeabi_dmul>
 801110a:	4606      	mov	r6, r0
 801110c:	460f      	mov	r7, r1
 801110e:	4602      	mov	r2, r0
 8011110:	460b      	mov	r3, r1
 8011112:	4640      	mov	r0, r8
 8011114:	4649      	mov	r1, r9
 8011116:	f7ef f8cf 	bl	80002b8 <__aeabi_dsub>
 801111a:	4602      	mov	r2, r0
 801111c:	460b      	mov	r3, r1
 801111e:	4682      	mov	sl, r0
 8011120:	468b      	mov	fp, r1
 8011122:	4640      	mov	r0, r8
 8011124:	4649      	mov	r1, r9
 8011126:	f7ef f8c7 	bl	80002b8 <__aeabi_dsub>
 801112a:	4632      	mov	r2, r6
 801112c:	463b      	mov	r3, r7
 801112e:	f7ef f8c3 	bl	80002b8 <__aeabi_dsub>
 8011132:	a31b      	add	r3, pc, #108	; (adr r3, 80111a0 <__ieee754_rem_pio2+0x310>)
 8011134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011138:	4606      	mov	r6, r0
 801113a:	460f      	mov	r7, r1
 801113c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011140:	f7ef fa72 	bl	8000628 <__aeabi_dmul>
 8011144:	4632      	mov	r2, r6
 8011146:	463b      	mov	r3, r7
 8011148:	f7ef f8b6 	bl	80002b8 <__aeabi_dsub>
 801114c:	4606      	mov	r6, r0
 801114e:	460f      	mov	r7, r1
 8011150:	e764      	b.n	801101c <__ieee754_rem_pio2+0x18c>
 8011152:	4b1b      	ldr	r3, [pc, #108]	; (80111c0 <__ieee754_rem_pio2+0x330>)
 8011154:	4598      	cmp	r8, r3
 8011156:	dd35      	ble.n	80111c4 <__ieee754_rem_pio2+0x334>
 8011158:	ee10 2a10 	vmov	r2, s0
 801115c:	463b      	mov	r3, r7
 801115e:	4630      	mov	r0, r6
 8011160:	4639      	mov	r1, r7
 8011162:	f7ef f8a9 	bl	80002b8 <__aeabi_dsub>
 8011166:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801116a:	e9c4 0100 	strd	r0, r1, [r4]
 801116e:	e6a1      	b.n	8010eb4 <__ieee754_rem_pio2+0x24>
 8011170:	54400000 	.word	0x54400000
 8011174:	3ff921fb 	.word	0x3ff921fb
 8011178:	1a626331 	.word	0x1a626331
 801117c:	3dd0b461 	.word	0x3dd0b461
 8011180:	1a600000 	.word	0x1a600000
 8011184:	3dd0b461 	.word	0x3dd0b461
 8011188:	2e037073 	.word	0x2e037073
 801118c:	3ba3198a 	.word	0x3ba3198a
 8011190:	6dc9c883 	.word	0x6dc9c883
 8011194:	3fe45f30 	.word	0x3fe45f30
 8011198:	2e000000 	.word	0x2e000000
 801119c:	3ba3198a 	.word	0x3ba3198a
 80111a0:	252049c1 	.word	0x252049c1
 80111a4:	397b839a 	.word	0x397b839a
 80111a8:	3fe921fb 	.word	0x3fe921fb
 80111ac:	4002d97b 	.word	0x4002d97b
 80111b0:	3ff921fb 	.word	0x3ff921fb
 80111b4:	413921fb 	.word	0x413921fb
 80111b8:	3fe00000 	.word	0x3fe00000
 80111bc:	080172fc 	.word	0x080172fc
 80111c0:	7fefffff 	.word	0x7fefffff
 80111c4:	ea4f 5528 	mov.w	r5, r8, asr #20
 80111c8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 80111cc:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80111d0:	4630      	mov	r0, r6
 80111d2:	460f      	mov	r7, r1
 80111d4:	f7ef fcd8 	bl	8000b88 <__aeabi_d2iz>
 80111d8:	f7ef f9bc 	bl	8000554 <__aeabi_i2d>
 80111dc:	4602      	mov	r2, r0
 80111de:	460b      	mov	r3, r1
 80111e0:	4630      	mov	r0, r6
 80111e2:	4639      	mov	r1, r7
 80111e4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80111e8:	f7ef f866 	bl	80002b8 <__aeabi_dsub>
 80111ec:	2200      	movs	r2, #0
 80111ee:	4b1f      	ldr	r3, [pc, #124]	; (801126c <__ieee754_rem_pio2+0x3dc>)
 80111f0:	f7ef fa1a 	bl	8000628 <__aeabi_dmul>
 80111f4:	460f      	mov	r7, r1
 80111f6:	4606      	mov	r6, r0
 80111f8:	f7ef fcc6 	bl	8000b88 <__aeabi_d2iz>
 80111fc:	f7ef f9aa 	bl	8000554 <__aeabi_i2d>
 8011200:	4602      	mov	r2, r0
 8011202:	460b      	mov	r3, r1
 8011204:	4630      	mov	r0, r6
 8011206:	4639      	mov	r1, r7
 8011208:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801120c:	f7ef f854 	bl	80002b8 <__aeabi_dsub>
 8011210:	2200      	movs	r2, #0
 8011212:	4b16      	ldr	r3, [pc, #88]	; (801126c <__ieee754_rem_pio2+0x3dc>)
 8011214:	f7ef fa08 	bl	8000628 <__aeabi_dmul>
 8011218:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801121c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8011220:	f04f 0803 	mov.w	r8, #3
 8011224:	2600      	movs	r6, #0
 8011226:	2700      	movs	r7, #0
 8011228:	4632      	mov	r2, r6
 801122a:	463b      	mov	r3, r7
 801122c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8011230:	f108 3aff 	add.w	sl, r8, #4294967295
 8011234:	f7ef fc60 	bl	8000af8 <__aeabi_dcmpeq>
 8011238:	b9b0      	cbnz	r0, 8011268 <__ieee754_rem_pio2+0x3d8>
 801123a:	4b0d      	ldr	r3, [pc, #52]	; (8011270 <__ieee754_rem_pio2+0x3e0>)
 801123c:	9301      	str	r3, [sp, #4]
 801123e:	2302      	movs	r3, #2
 8011240:	9300      	str	r3, [sp, #0]
 8011242:	462a      	mov	r2, r5
 8011244:	4643      	mov	r3, r8
 8011246:	4621      	mov	r1, r4
 8011248:	a806      	add	r0, sp, #24
 801124a:	f000 f8dd 	bl	8011408 <__kernel_rem_pio2>
 801124e:	9b04      	ldr	r3, [sp, #16]
 8011250:	2b00      	cmp	r3, #0
 8011252:	4605      	mov	r5, r0
 8011254:	f6bf ae58 	bge.w	8010f08 <__ieee754_rem_pio2+0x78>
 8011258:	6863      	ldr	r3, [r4, #4]
 801125a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801125e:	6063      	str	r3, [r4, #4]
 8011260:	68e3      	ldr	r3, [r4, #12]
 8011262:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011266:	e746      	b.n	80110f6 <__ieee754_rem_pio2+0x266>
 8011268:	46d0      	mov	r8, sl
 801126a:	e7dd      	b.n	8011228 <__ieee754_rem_pio2+0x398>
 801126c:	41700000 	.word	0x41700000
 8011270:	0801737c 	.word	0x0801737c
 8011274:	00000000 	.word	0x00000000

08011278 <__kernel_cos>:
 8011278:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801127c:	ec59 8b10 	vmov	r8, r9, d0
 8011280:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8011284:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8011288:	ed2d 8b02 	vpush	{d8}
 801128c:	eeb0 8a41 	vmov.f32	s16, s2
 8011290:	eef0 8a61 	vmov.f32	s17, s3
 8011294:	da07      	bge.n	80112a6 <__kernel_cos+0x2e>
 8011296:	ee10 0a10 	vmov	r0, s0
 801129a:	4649      	mov	r1, r9
 801129c:	f7ef fc74 	bl	8000b88 <__aeabi_d2iz>
 80112a0:	2800      	cmp	r0, #0
 80112a2:	f000 8089 	beq.w	80113b8 <__kernel_cos+0x140>
 80112a6:	4642      	mov	r2, r8
 80112a8:	464b      	mov	r3, r9
 80112aa:	4640      	mov	r0, r8
 80112ac:	4649      	mov	r1, r9
 80112ae:	f7ef f9bb 	bl	8000628 <__aeabi_dmul>
 80112b2:	2200      	movs	r2, #0
 80112b4:	4b4e      	ldr	r3, [pc, #312]	; (80113f0 <__kernel_cos+0x178>)
 80112b6:	4604      	mov	r4, r0
 80112b8:	460d      	mov	r5, r1
 80112ba:	f7ef f9b5 	bl	8000628 <__aeabi_dmul>
 80112be:	a340      	add	r3, pc, #256	; (adr r3, 80113c0 <__kernel_cos+0x148>)
 80112c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112c4:	4682      	mov	sl, r0
 80112c6:	468b      	mov	fp, r1
 80112c8:	4620      	mov	r0, r4
 80112ca:	4629      	mov	r1, r5
 80112cc:	f7ef f9ac 	bl	8000628 <__aeabi_dmul>
 80112d0:	a33d      	add	r3, pc, #244	; (adr r3, 80113c8 <__kernel_cos+0x150>)
 80112d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112d6:	f7ee fff1 	bl	80002bc <__adddf3>
 80112da:	4622      	mov	r2, r4
 80112dc:	462b      	mov	r3, r5
 80112de:	f7ef f9a3 	bl	8000628 <__aeabi_dmul>
 80112e2:	a33b      	add	r3, pc, #236	; (adr r3, 80113d0 <__kernel_cos+0x158>)
 80112e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112e8:	f7ee ffe6 	bl	80002b8 <__aeabi_dsub>
 80112ec:	4622      	mov	r2, r4
 80112ee:	462b      	mov	r3, r5
 80112f0:	f7ef f99a 	bl	8000628 <__aeabi_dmul>
 80112f4:	a338      	add	r3, pc, #224	; (adr r3, 80113d8 <__kernel_cos+0x160>)
 80112f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112fa:	f7ee ffdf 	bl	80002bc <__adddf3>
 80112fe:	4622      	mov	r2, r4
 8011300:	462b      	mov	r3, r5
 8011302:	f7ef f991 	bl	8000628 <__aeabi_dmul>
 8011306:	a336      	add	r3, pc, #216	; (adr r3, 80113e0 <__kernel_cos+0x168>)
 8011308:	e9d3 2300 	ldrd	r2, r3, [r3]
 801130c:	f7ee ffd4 	bl	80002b8 <__aeabi_dsub>
 8011310:	4622      	mov	r2, r4
 8011312:	462b      	mov	r3, r5
 8011314:	f7ef f988 	bl	8000628 <__aeabi_dmul>
 8011318:	a333      	add	r3, pc, #204	; (adr r3, 80113e8 <__kernel_cos+0x170>)
 801131a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801131e:	f7ee ffcd 	bl	80002bc <__adddf3>
 8011322:	4622      	mov	r2, r4
 8011324:	462b      	mov	r3, r5
 8011326:	f7ef f97f 	bl	8000628 <__aeabi_dmul>
 801132a:	4622      	mov	r2, r4
 801132c:	462b      	mov	r3, r5
 801132e:	f7ef f97b 	bl	8000628 <__aeabi_dmul>
 8011332:	ec53 2b18 	vmov	r2, r3, d8
 8011336:	4604      	mov	r4, r0
 8011338:	460d      	mov	r5, r1
 801133a:	4640      	mov	r0, r8
 801133c:	4649      	mov	r1, r9
 801133e:	f7ef f973 	bl	8000628 <__aeabi_dmul>
 8011342:	460b      	mov	r3, r1
 8011344:	4602      	mov	r2, r0
 8011346:	4629      	mov	r1, r5
 8011348:	4620      	mov	r0, r4
 801134a:	f7ee ffb5 	bl	80002b8 <__aeabi_dsub>
 801134e:	4b29      	ldr	r3, [pc, #164]	; (80113f4 <__kernel_cos+0x17c>)
 8011350:	429e      	cmp	r6, r3
 8011352:	4680      	mov	r8, r0
 8011354:	4689      	mov	r9, r1
 8011356:	dc11      	bgt.n	801137c <__kernel_cos+0x104>
 8011358:	4602      	mov	r2, r0
 801135a:	460b      	mov	r3, r1
 801135c:	4650      	mov	r0, sl
 801135e:	4659      	mov	r1, fp
 8011360:	f7ee ffaa 	bl	80002b8 <__aeabi_dsub>
 8011364:	460b      	mov	r3, r1
 8011366:	4924      	ldr	r1, [pc, #144]	; (80113f8 <__kernel_cos+0x180>)
 8011368:	4602      	mov	r2, r0
 801136a:	2000      	movs	r0, #0
 801136c:	f7ee ffa4 	bl	80002b8 <__aeabi_dsub>
 8011370:	ecbd 8b02 	vpop	{d8}
 8011374:	ec41 0b10 	vmov	d0, r0, r1
 8011378:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801137c:	4b1f      	ldr	r3, [pc, #124]	; (80113fc <__kernel_cos+0x184>)
 801137e:	491e      	ldr	r1, [pc, #120]	; (80113f8 <__kernel_cos+0x180>)
 8011380:	429e      	cmp	r6, r3
 8011382:	bfcc      	ite	gt
 8011384:	4d1e      	ldrgt	r5, [pc, #120]	; (8011400 <__kernel_cos+0x188>)
 8011386:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 801138a:	2400      	movs	r4, #0
 801138c:	4622      	mov	r2, r4
 801138e:	462b      	mov	r3, r5
 8011390:	2000      	movs	r0, #0
 8011392:	f7ee ff91 	bl	80002b8 <__aeabi_dsub>
 8011396:	4622      	mov	r2, r4
 8011398:	4606      	mov	r6, r0
 801139a:	460f      	mov	r7, r1
 801139c:	462b      	mov	r3, r5
 801139e:	4650      	mov	r0, sl
 80113a0:	4659      	mov	r1, fp
 80113a2:	f7ee ff89 	bl	80002b8 <__aeabi_dsub>
 80113a6:	4642      	mov	r2, r8
 80113a8:	464b      	mov	r3, r9
 80113aa:	f7ee ff85 	bl	80002b8 <__aeabi_dsub>
 80113ae:	4602      	mov	r2, r0
 80113b0:	460b      	mov	r3, r1
 80113b2:	4630      	mov	r0, r6
 80113b4:	4639      	mov	r1, r7
 80113b6:	e7d9      	b.n	801136c <__kernel_cos+0xf4>
 80113b8:	2000      	movs	r0, #0
 80113ba:	490f      	ldr	r1, [pc, #60]	; (80113f8 <__kernel_cos+0x180>)
 80113bc:	e7d8      	b.n	8011370 <__kernel_cos+0xf8>
 80113be:	bf00      	nop
 80113c0:	be8838d4 	.word	0xbe8838d4
 80113c4:	bda8fae9 	.word	0xbda8fae9
 80113c8:	bdb4b1c4 	.word	0xbdb4b1c4
 80113cc:	3e21ee9e 	.word	0x3e21ee9e
 80113d0:	809c52ad 	.word	0x809c52ad
 80113d4:	3e927e4f 	.word	0x3e927e4f
 80113d8:	19cb1590 	.word	0x19cb1590
 80113dc:	3efa01a0 	.word	0x3efa01a0
 80113e0:	16c15177 	.word	0x16c15177
 80113e4:	3f56c16c 	.word	0x3f56c16c
 80113e8:	5555554c 	.word	0x5555554c
 80113ec:	3fa55555 	.word	0x3fa55555
 80113f0:	3fe00000 	.word	0x3fe00000
 80113f4:	3fd33332 	.word	0x3fd33332
 80113f8:	3ff00000 	.word	0x3ff00000
 80113fc:	3fe90000 	.word	0x3fe90000
 8011400:	3fd20000 	.word	0x3fd20000
 8011404:	00000000 	.word	0x00000000

08011408 <__kernel_rem_pio2>:
 8011408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801140c:	ed2d 8b02 	vpush	{d8}
 8011410:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8011414:	1ed4      	subs	r4, r2, #3
 8011416:	9308      	str	r3, [sp, #32]
 8011418:	9101      	str	r1, [sp, #4]
 801141a:	4bc5      	ldr	r3, [pc, #788]	; (8011730 <__kernel_rem_pio2+0x328>)
 801141c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 801141e:	9009      	str	r0, [sp, #36]	; 0x24
 8011420:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011424:	9304      	str	r3, [sp, #16]
 8011426:	9b08      	ldr	r3, [sp, #32]
 8011428:	3b01      	subs	r3, #1
 801142a:	9307      	str	r3, [sp, #28]
 801142c:	2318      	movs	r3, #24
 801142e:	fb94 f4f3 	sdiv	r4, r4, r3
 8011432:	f06f 0317 	mvn.w	r3, #23
 8011436:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 801143a:	fb04 3303 	mla	r3, r4, r3, r3
 801143e:	eb03 0a02 	add.w	sl, r3, r2
 8011442:	9b04      	ldr	r3, [sp, #16]
 8011444:	9a07      	ldr	r2, [sp, #28]
 8011446:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8011720 <__kernel_rem_pio2+0x318>
 801144a:	eb03 0802 	add.w	r8, r3, r2
 801144e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8011450:	1aa7      	subs	r7, r4, r2
 8011452:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8011456:	ae22      	add	r6, sp, #136	; 0x88
 8011458:	2500      	movs	r5, #0
 801145a:	4545      	cmp	r5, r8
 801145c:	dd13      	ble.n	8011486 <__kernel_rem_pio2+0x7e>
 801145e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8011720 <__kernel_rem_pio2+0x318>
 8011462:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8011466:	2600      	movs	r6, #0
 8011468:	9b04      	ldr	r3, [sp, #16]
 801146a:	429e      	cmp	r6, r3
 801146c:	dc32      	bgt.n	80114d4 <__kernel_rem_pio2+0xcc>
 801146e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011470:	9302      	str	r3, [sp, #8]
 8011472:	9b08      	ldr	r3, [sp, #32]
 8011474:	199d      	adds	r5, r3, r6
 8011476:	ab22      	add	r3, sp, #136	; 0x88
 8011478:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801147c:	9306      	str	r3, [sp, #24]
 801147e:	ec59 8b18 	vmov	r8, r9, d8
 8011482:	2700      	movs	r7, #0
 8011484:	e01f      	b.n	80114c6 <__kernel_rem_pio2+0xbe>
 8011486:	42ef      	cmn	r7, r5
 8011488:	d407      	bmi.n	801149a <__kernel_rem_pio2+0x92>
 801148a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801148e:	f7ef f861 	bl	8000554 <__aeabi_i2d>
 8011492:	e8e6 0102 	strd	r0, r1, [r6], #8
 8011496:	3501      	adds	r5, #1
 8011498:	e7df      	b.n	801145a <__kernel_rem_pio2+0x52>
 801149a:	ec51 0b18 	vmov	r0, r1, d8
 801149e:	e7f8      	b.n	8011492 <__kernel_rem_pio2+0x8a>
 80114a0:	9906      	ldr	r1, [sp, #24]
 80114a2:	9d02      	ldr	r5, [sp, #8]
 80114a4:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 80114a8:	9106      	str	r1, [sp, #24]
 80114aa:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 80114ae:	9502      	str	r5, [sp, #8]
 80114b0:	f7ef f8ba 	bl	8000628 <__aeabi_dmul>
 80114b4:	4602      	mov	r2, r0
 80114b6:	460b      	mov	r3, r1
 80114b8:	4640      	mov	r0, r8
 80114ba:	4649      	mov	r1, r9
 80114bc:	f7ee fefe 	bl	80002bc <__adddf3>
 80114c0:	3701      	adds	r7, #1
 80114c2:	4680      	mov	r8, r0
 80114c4:	4689      	mov	r9, r1
 80114c6:	9b07      	ldr	r3, [sp, #28]
 80114c8:	429f      	cmp	r7, r3
 80114ca:	dde9      	ble.n	80114a0 <__kernel_rem_pio2+0x98>
 80114cc:	e8eb 8902 	strd	r8, r9, [fp], #8
 80114d0:	3601      	adds	r6, #1
 80114d2:	e7c9      	b.n	8011468 <__kernel_rem_pio2+0x60>
 80114d4:	9b04      	ldr	r3, [sp, #16]
 80114d6:	aa0e      	add	r2, sp, #56	; 0x38
 80114d8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80114dc:	930c      	str	r3, [sp, #48]	; 0x30
 80114de:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80114e0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80114e4:	9c04      	ldr	r4, [sp, #16]
 80114e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80114e8:	ab9a      	add	r3, sp, #616	; 0x268
 80114ea:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 80114ee:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80114f2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80114f6:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 80114fa:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 80114fe:	ab9a      	add	r3, sp, #616	; 0x268
 8011500:	445b      	add	r3, fp
 8011502:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8011506:	2500      	movs	r5, #0
 8011508:	1b63      	subs	r3, r4, r5
 801150a:	2b00      	cmp	r3, #0
 801150c:	dc78      	bgt.n	8011600 <__kernel_rem_pio2+0x1f8>
 801150e:	4650      	mov	r0, sl
 8011510:	ec49 8b10 	vmov	d0, r8, r9
 8011514:	f000 fc00 	bl	8011d18 <scalbn>
 8011518:	ec57 6b10 	vmov	r6, r7, d0
 801151c:	2200      	movs	r2, #0
 801151e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8011522:	ee10 0a10 	vmov	r0, s0
 8011526:	4639      	mov	r1, r7
 8011528:	f7ef f87e 	bl	8000628 <__aeabi_dmul>
 801152c:	ec41 0b10 	vmov	d0, r0, r1
 8011530:	f000 fb6e 	bl	8011c10 <floor>
 8011534:	2200      	movs	r2, #0
 8011536:	ec51 0b10 	vmov	r0, r1, d0
 801153a:	4b7e      	ldr	r3, [pc, #504]	; (8011734 <__kernel_rem_pio2+0x32c>)
 801153c:	f7ef f874 	bl	8000628 <__aeabi_dmul>
 8011540:	4602      	mov	r2, r0
 8011542:	460b      	mov	r3, r1
 8011544:	4630      	mov	r0, r6
 8011546:	4639      	mov	r1, r7
 8011548:	f7ee feb6 	bl	80002b8 <__aeabi_dsub>
 801154c:	460f      	mov	r7, r1
 801154e:	4606      	mov	r6, r0
 8011550:	f7ef fb1a 	bl	8000b88 <__aeabi_d2iz>
 8011554:	9006      	str	r0, [sp, #24]
 8011556:	f7ee fffd 	bl	8000554 <__aeabi_i2d>
 801155a:	4602      	mov	r2, r0
 801155c:	460b      	mov	r3, r1
 801155e:	4630      	mov	r0, r6
 8011560:	4639      	mov	r1, r7
 8011562:	f7ee fea9 	bl	80002b8 <__aeabi_dsub>
 8011566:	f1ba 0f00 	cmp.w	sl, #0
 801156a:	4606      	mov	r6, r0
 801156c:	460f      	mov	r7, r1
 801156e:	dd6c      	ble.n	801164a <__kernel_rem_pio2+0x242>
 8011570:	1e62      	subs	r2, r4, #1
 8011572:	ab0e      	add	r3, sp, #56	; 0x38
 8011574:	f1ca 0118 	rsb	r1, sl, #24
 8011578:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801157c:	9d06      	ldr	r5, [sp, #24]
 801157e:	fa40 f301 	asr.w	r3, r0, r1
 8011582:	441d      	add	r5, r3
 8011584:	408b      	lsls	r3, r1
 8011586:	1ac0      	subs	r0, r0, r3
 8011588:	ab0e      	add	r3, sp, #56	; 0x38
 801158a:	9506      	str	r5, [sp, #24]
 801158c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8011590:	f1ca 0317 	rsb	r3, sl, #23
 8011594:	fa40 f303 	asr.w	r3, r0, r3
 8011598:	9302      	str	r3, [sp, #8]
 801159a:	9b02      	ldr	r3, [sp, #8]
 801159c:	2b00      	cmp	r3, #0
 801159e:	dd62      	ble.n	8011666 <__kernel_rem_pio2+0x25e>
 80115a0:	9b06      	ldr	r3, [sp, #24]
 80115a2:	2200      	movs	r2, #0
 80115a4:	3301      	adds	r3, #1
 80115a6:	9306      	str	r3, [sp, #24]
 80115a8:	4615      	mov	r5, r2
 80115aa:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80115ae:	4294      	cmp	r4, r2
 80115b0:	f300 8095 	bgt.w	80116de <__kernel_rem_pio2+0x2d6>
 80115b4:	f1ba 0f00 	cmp.w	sl, #0
 80115b8:	dd07      	ble.n	80115ca <__kernel_rem_pio2+0x1c2>
 80115ba:	f1ba 0f01 	cmp.w	sl, #1
 80115be:	f000 80a2 	beq.w	8011706 <__kernel_rem_pio2+0x2fe>
 80115c2:	f1ba 0f02 	cmp.w	sl, #2
 80115c6:	f000 80c1 	beq.w	801174c <__kernel_rem_pio2+0x344>
 80115ca:	9b02      	ldr	r3, [sp, #8]
 80115cc:	2b02      	cmp	r3, #2
 80115ce:	d14a      	bne.n	8011666 <__kernel_rem_pio2+0x25e>
 80115d0:	4632      	mov	r2, r6
 80115d2:	463b      	mov	r3, r7
 80115d4:	2000      	movs	r0, #0
 80115d6:	4958      	ldr	r1, [pc, #352]	; (8011738 <__kernel_rem_pio2+0x330>)
 80115d8:	f7ee fe6e 	bl	80002b8 <__aeabi_dsub>
 80115dc:	4606      	mov	r6, r0
 80115de:	460f      	mov	r7, r1
 80115e0:	2d00      	cmp	r5, #0
 80115e2:	d040      	beq.n	8011666 <__kernel_rem_pio2+0x25e>
 80115e4:	4650      	mov	r0, sl
 80115e6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8011728 <__kernel_rem_pio2+0x320>
 80115ea:	f000 fb95 	bl	8011d18 <scalbn>
 80115ee:	4630      	mov	r0, r6
 80115f0:	4639      	mov	r1, r7
 80115f2:	ec53 2b10 	vmov	r2, r3, d0
 80115f6:	f7ee fe5f 	bl	80002b8 <__aeabi_dsub>
 80115fa:	4606      	mov	r6, r0
 80115fc:	460f      	mov	r7, r1
 80115fe:	e032      	b.n	8011666 <__kernel_rem_pio2+0x25e>
 8011600:	2200      	movs	r2, #0
 8011602:	4b4e      	ldr	r3, [pc, #312]	; (801173c <__kernel_rem_pio2+0x334>)
 8011604:	4640      	mov	r0, r8
 8011606:	4649      	mov	r1, r9
 8011608:	f7ef f80e 	bl	8000628 <__aeabi_dmul>
 801160c:	f7ef fabc 	bl	8000b88 <__aeabi_d2iz>
 8011610:	f7ee ffa0 	bl	8000554 <__aeabi_i2d>
 8011614:	2200      	movs	r2, #0
 8011616:	4b4a      	ldr	r3, [pc, #296]	; (8011740 <__kernel_rem_pio2+0x338>)
 8011618:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801161c:	f7ef f804 	bl	8000628 <__aeabi_dmul>
 8011620:	4602      	mov	r2, r0
 8011622:	460b      	mov	r3, r1
 8011624:	4640      	mov	r0, r8
 8011626:	4649      	mov	r1, r9
 8011628:	f7ee fe46 	bl	80002b8 <__aeabi_dsub>
 801162c:	f7ef faac 	bl	8000b88 <__aeabi_d2iz>
 8011630:	ab0e      	add	r3, sp, #56	; 0x38
 8011632:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8011636:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 801163a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801163e:	f7ee fe3d 	bl	80002bc <__adddf3>
 8011642:	3501      	adds	r5, #1
 8011644:	4680      	mov	r8, r0
 8011646:	4689      	mov	r9, r1
 8011648:	e75e      	b.n	8011508 <__kernel_rem_pio2+0x100>
 801164a:	d105      	bne.n	8011658 <__kernel_rem_pio2+0x250>
 801164c:	1e63      	subs	r3, r4, #1
 801164e:	aa0e      	add	r2, sp, #56	; 0x38
 8011650:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8011654:	15c3      	asrs	r3, r0, #23
 8011656:	e79f      	b.n	8011598 <__kernel_rem_pio2+0x190>
 8011658:	2200      	movs	r2, #0
 801165a:	4b3a      	ldr	r3, [pc, #232]	; (8011744 <__kernel_rem_pio2+0x33c>)
 801165c:	f7ef fa6a 	bl	8000b34 <__aeabi_dcmpge>
 8011660:	2800      	cmp	r0, #0
 8011662:	d139      	bne.n	80116d8 <__kernel_rem_pio2+0x2d0>
 8011664:	9002      	str	r0, [sp, #8]
 8011666:	2200      	movs	r2, #0
 8011668:	2300      	movs	r3, #0
 801166a:	4630      	mov	r0, r6
 801166c:	4639      	mov	r1, r7
 801166e:	f7ef fa43 	bl	8000af8 <__aeabi_dcmpeq>
 8011672:	2800      	cmp	r0, #0
 8011674:	f000 80c7 	beq.w	8011806 <__kernel_rem_pio2+0x3fe>
 8011678:	1e65      	subs	r5, r4, #1
 801167a:	462b      	mov	r3, r5
 801167c:	2200      	movs	r2, #0
 801167e:	9904      	ldr	r1, [sp, #16]
 8011680:	428b      	cmp	r3, r1
 8011682:	da6a      	bge.n	801175a <__kernel_rem_pio2+0x352>
 8011684:	2a00      	cmp	r2, #0
 8011686:	f000 8088 	beq.w	801179a <__kernel_rem_pio2+0x392>
 801168a:	ab0e      	add	r3, sp, #56	; 0x38
 801168c:	f1aa 0a18 	sub.w	sl, sl, #24
 8011690:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8011694:	2b00      	cmp	r3, #0
 8011696:	f000 80b4 	beq.w	8011802 <__kernel_rem_pio2+0x3fa>
 801169a:	4650      	mov	r0, sl
 801169c:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8011728 <__kernel_rem_pio2+0x320>
 80116a0:	f000 fb3a 	bl	8011d18 <scalbn>
 80116a4:	00ec      	lsls	r4, r5, #3
 80116a6:	ab72      	add	r3, sp, #456	; 0x1c8
 80116a8:	191e      	adds	r6, r3, r4
 80116aa:	ec59 8b10 	vmov	r8, r9, d0
 80116ae:	f106 0a08 	add.w	sl, r6, #8
 80116b2:	462f      	mov	r7, r5
 80116b4:	2f00      	cmp	r7, #0
 80116b6:	f280 80df 	bge.w	8011878 <__kernel_rem_pio2+0x470>
 80116ba:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8011720 <__kernel_rem_pio2+0x318>
 80116be:	f04f 0a00 	mov.w	sl, #0
 80116c2:	eba5 030a 	sub.w	r3, r5, sl
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	f2c0 810a 	blt.w	80118e0 <__kernel_rem_pio2+0x4d8>
 80116cc:	f8df b078 	ldr.w	fp, [pc, #120]	; 8011748 <__kernel_rem_pio2+0x340>
 80116d0:	ec59 8b18 	vmov	r8, r9, d8
 80116d4:	2700      	movs	r7, #0
 80116d6:	e0f5      	b.n	80118c4 <__kernel_rem_pio2+0x4bc>
 80116d8:	2302      	movs	r3, #2
 80116da:	9302      	str	r3, [sp, #8]
 80116dc:	e760      	b.n	80115a0 <__kernel_rem_pio2+0x198>
 80116de:	ab0e      	add	r3, sp, #56	; 0x38
 80116e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80116e4:	b94d      	cbnz	r5, 80116fa <__kernel_rem_pio2+0x2f2>
 80116e6:	b12b      	cbz	r3, 80116f4 <__kernel_rem_pio2+0x2ec>
 80116e8:	a80e      	add	r0, sp, #56	; 0x38
 80116ea:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80116ee:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80116f2:	2301      	movs	r3, #1
 80116f4:	3201      	adds	r2, #1
 80116f6:	461d      	mov	r5, r3
 80116f8:	e759      	b.n	80115ae <__kernel_rem_pio2+0x1a6>
 80116fa:	a80e      	add	r0, sp, #56	; 0x38
 80116fc:	1acb      	subs	r3, r1, r3
 80116fe:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8011702:	462b      	mov	r3, r5
 8011704:	e7f6      	b.n	80116f4 <__kernel_rem_pio2+0x2ec>
 8011706:	1e62      	subs	r2, r4, #1
 8011708:	ab0e      	add	r3, sp, #56	; 0x38
 801170a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801170e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8011712:	a90e      	add	r1, sp, #56	; 0x38
 8011714:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8011718:	e757      	b.n	80115ca <__kernel_rem_pio2+0x1c2>
 801171a:	bf00      	nop
 801171c:	f3af 8000 	nop.w
	...
 801172c:	3ff00000 	.word	0x3ff00000
 8011730:	080174c8 	.word	0x080174c8
 8011734:	40200000 	.word	0x40200000
 8011738:	3ff00000 	.word	0x3ff00000
 801173c:	3e700000 	.word	0x3e700000
 8011740:	41700000 	.word	0x41700000
 8011744:	3fe00000 	.word	0x3fe00000
 8011748:	08017488 	.word	0x08017488
 801174c:	1e62      	subs	r2, r4, #1
 801174e:	ab0e      	add	r3, sp, #56	; 0x38
 8011750:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011754:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8011758:	e7db      	b.n	8011712 <__kernel_rem_pio2+0x30a>
 801175a:	a90e      	add	r1, sp, #56	; 0x38
 801175c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8011760:	3b01      	subs	r3, #1
 8011762:	430a      	orrs	r2, r1
 8011764:	e78b      	b.n	801167e <__kernel_rem_pio2+0x276>
 8011766:	3301      	adds	r3, #1
 8011768:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801176c:	2900      	cmp	r1, #0
 801176e:	d0fa      	beq.n	8011766 <__kernel_rem_pio2+0x35e>
 8011770:	9a08      	ldr	r2, [sp, #32]
 8011772:	4422      	add	r2, r4
 8011774:	00d2      	lsls	r2, r2, #3
 8011776:	a922      	add	r1, sp, #136	; 0x88
 8011778:	18e3      	adds	r3, r4, r3
 801177a:	9206      	str	r2, [sp, #24]
 801177c:	440a      	add	r2, r1
 801177e:	9302      	str	r3, [sp, #8]
 8011780:	f10b 0108 	add.w	r1, fp, #8
 8011784:	f102 0308 	add.w	r3, r2, #8
 8011788:	1c66      	adds	r6, r4, #1
 801178a:	910a      	str	r1, [sp, #40]	; 0x28
 801178c:	2500      	movs	r5, #0
 801178e:	930d      	str	r3, [sp, #52]	; 0x34
 8011790:	9b02      	ldr	r3, [sp, #8]
 8011792:	42b3      	cmp	r3, r6
 8011794:	da04      	bge.n	80117a0 <__kernel_rem_pio2+0x398>
 8011796:	461c      	mov	r4, r3
 8011798:	e6a6      	b.n	80114e8 <__kernel_rem_pio2+0xe0>
 801179a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801179c:	2301      	movs	r3, #1
 801179e:	e7e3      	b.n	8011768 <__kernel_rem_pio2+0x360>
 80117a0:	9b06      	ldr	r3, [sp, #24]
 80117a2:	18ef      	adds	r7, r5, r3
 80117a4:	ab22      	add	r3, sp, #136	; 0x88
 80117a6:	441f      	add	r7, r3
 80117a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80117aa:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80117ae:	f7ee fed1 	bl	8000554 <__aeabi_i2d>
 80117b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80117b4:	461c      	mov	r4, r3
 80117b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80117b8:	e9c7 0100 	strd	r0, r1, [r7]
 80117bc:	eb03 0b05 	add.w	fp, r3, r5
 80117c0:	2700      	movs	r7, #0
 80117c2:	f04f 0800 	mov.w	r8, #0
 80117c6:	f04f 0900 	mov.w	r9, #0
 80117ca:	9b07      	ldr	r3, [sp, #28]
 80117cc:	429f      	cmp	r7, r3
 80117ce:	dd08      	ble.n	80117e2 <__kernel_rem_pio2+0x3da>
 80117d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80117d2:	aa72      	add	r2, sp, #456	; 0x1c8
 80117d4:	18eb      	adds	r3, r5, r3
 80117d6:	4413      	add	r3, r2
 80117d8:	e9c3 8902 	strd	r8, r9, [r3, #8]
 80117dc:	3601      	adds	r6, #1
 80117de:	3508      	adds	r5, #8
 80117e0:	e7d6      	b.n	8011790 <__kernel_rem_pio2+0x388>
 80117e2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80117e6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80117ea:	f7ee ff1d 	bl	8000628 <__aeabi_dmul>
 80117ee:	4602      	mov	r2, r0
 80117f0:	460b      	mov	r3, r1
 80117f2:	4640      	mov	r0, r8
 80117f4:	4649      	mov	r1, r9
 80117f6:	f7ee fd61 	bl	80002bc <__adddf3>
 80117fa:	3701      	adds	r7, #1
 80117fc:	4680      	mov	r8, r0
 80117fe:	4689      	mov	r9, r1
 8011800:	e7e3      	b.n	80117ca <__kernel_rem_pio2+0x3c2>
 8011802:	3d01      	subs	r5, #1
 8011804:	e741      	b.n	801168a <__kernel_rem_pio2+0x282>
 8011806:	f1ca 0000 	rsb	r0, sl, #0
 801180a:	ec47 6b10 	vmov	d0, r6, r7
 801180e:	f000 fa83 	bl	8011d18 <scalbn>
 8011812:	ec57 6b10 	vmov	r6, r7, d0
 8011816:	2200      	movs	r2, #0
 8011818:	4b99      	ldr	r3, [pc, #612]	; (8011a80 <__kernel_rem_pio2+0x678>)
 801181a:	ee10 0a10 	vmov	r0, s0
 801181e:	4639      	mov	r1, r7
 8011820:	f7ef f988 	bl	8000b34 <__aeabi_dcmpge>
 8011824:	b1f8      	cbz	r0, 8011866 <__kernel_rem_pio2+0x45e>
 8011826:	2200      	movs	r2, #0
 8011828:	4b96      	ldr	r3, [pc, #600]	; (8011a84 <__kernel_rem_pio2+0x67c>)
 801182a:	4630      	mov	r0, r6
 801182c:	4639      	mov	r1, r7
 801182e:	f7ee fefb 	bl	8000628 <__aeabi_dmul>
 8011832:	f7ef f9a9 	bl	8000b88 <__aeabi_d2iz>
 8011836:	4680      	mov	r8, r0
 8011838:	f7ee fe8c 	bl	8000554 <__aeabi_i2d>
 801183c:	2200      	movs	r2, #0
 801183e:	4b90      	ldr	r3, [pc, #576]	; (8011a80 <__kernel_rem_pio2+0x678>)
 8011840:	f7ee fef2 	bl	8000628 <__aeabi_dmul>
 8011844:	460b      	mov	r3, r1
 8011846:	4602      	mov	r2, r0
 8011848:	4639      	mov	r1, r7
 801184a:	4630      	mov	r0, r6
 801184c:	f7ee fd34 	bl	80002b8 <__aeabi_dsub>
 8011850:	f7ef f99a 	bl	8000b88 <__aeabi_d2iz>
 8011854:	1c65      	adds	r5, r4, #1
 8011856:	ab0e      	add	r3, sp, #56	; 0x38
 8011858:	f10a 0a18 	add.w	sl, sl, #24
 801185c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8011860:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8011864:	e719      	b.n	801169a <__kernel_rem_pio2+0x292>
 8011866:	4630      	mov	r0, r6
 8011868:	4639      	mov	r1, r7
 801186a:	f7ef f98d 	bl	8000b88 <__aeabi_d2iz>
 801186e:	ab0e      	add	r3, sp, #56	; 0x38
 8011870:	4625      	mov	r5, r4
 8011872:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8011876:	e710      	b.n	801169a <__kernel_rem_pio2+0x292>
 8011878:	ab0e      	add	r3, sp, #56	; 0x38
 801187a:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 801187e:	f7ee fe69 	bl	8000554 <__aeabi_i2d>
 8011882:	4642      	mov	r2, r8
 8011884:	464b      	mov	r3, r9
 8011886:	f7ee fecf 	bl	8000628 <__aeabi_dmul>
 801188a:	2200      	movs	r2, #0
 801188c:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8011890:	4b7c      	ldr	r3, [pc, #496]	; (8011a84 <__kernel_rem_pio2+0x67c>)
 8011892:	4640      	mov	r0, r8
 8011894:	4649      	mov	r1, r9
 8011896:	f7ee fec7 	bl	8000628 <__aeabi_dmul>
 801189a:	3f01      	subs	r7, #1
 801189c:	4680      	mov	r8, r0
 801189e:	4689      	mov	r9, r1
 80118a0:	e708      	b.n	80116b4 <__kernel_rem_pio2+0x2ac>
 80118a2:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 80118a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118aa:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 80118ae:	f7ee febb 	bl	8000628 <__aeabi_dmul>
 80118b2:	4602      	mov	r2, r0
 80118b4:	460b      	mov	r3, r1
 80118b6:	4640      	mov	r0, r8
 80118b8:	4649      	mov	r1, r9
 80118ba:	f7ee fcff 	bl	80002bc <__adddf3>
 80118be:	3701      	adds	r7, #1
 80118c0:	4680      	mov	r8, r0
 80118c2:	4689      	mov	r9, r1
 80118c4:	9b04      	ldr	r3, [sp, #16]
 80118c6:	429f      	cmp	r7, r3
 80118c8:	dc01      	bgt.n	80118ce <__kernel_rem_pio2+0x4c6>
 80118ca:	45ba      	cmp	sl, r7
 80118cc:	dae9      	bge.n	80118a2 <__kernel_rem_pio2+0x49a>
 80118ce:	ab4a      	add	r3, sp, #296	; 0x128
 80118d0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80118d4:	e9c3 8900 	strd	r8, r9, [r3]
 80118d8:	f10a 0a01 	add.w	sl, sl, #1
 80118dc:	3e08      	subs	r6, #8
 80118de:	e6f0      	b.n	80116c2 <__kernel_rem_pio2+0x2ba>
 80118e0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80118e2:	2b03      	cmp	r3, #3
 80118e4:	d85b      	bhi.n	801199e <__kernel_rem_pio2+0x596>
 80118e6:	e8df f003 	tbb	[pc, r3]
 80118ea:	264a      	.short	0x264a
 80118ec:	0226      	.short	0x0226
 80118ee:	ab9a      	add	r3, sp, #616	; 0x268
 80118f0:	441c      	add	r4, r3
 80118f2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80118f6:	46a2      	mov	sl, r4
 80118f8:	46ab      	mov	fp, r5
 80118fa:	f1bb 0f00 	cmp.w	fp, #0
 80118fe:	dc6c      	bgt.n	80119da <__kernel_rem_pio2+0x5d2>
 8011900:	46a2      	mov	sl, r4
 8011902:	46ab      	mov	fp, r5
 8011904:	f1bb 0f01 	cmp.w	fp, #1
 8011908:	f300 8086 	bgt.w	8011a18 <__kernel_rem_pio2+0x610>
 801190c:	2000      	movs	r0, #0
 801190e:	2100      	movs	r1, #0
 8011910:	2d01      	cmp	r5, #1
 8011912:	f300 80a0 	bgt.w	8011a56 <__kernel_rem_pio2+0x64e>
 8011916:	9b02      	ldr	r3, [sp, #8]
 8011918:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 801191c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8011920:	2b00      	cmp	r3, #0
 8011922:	f040 809e 	bne.w	8011a62 <__kernel_rem_pio2+0x65a>
 8011926:	9b01      	ldr	r3, [sp, #4]
 8011928:	e9c3 7800 	strd	r7, r8, [r3]
 801192c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8011930:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8011934:	e033      	b.n	801199e <__kernel_rem_pio2+0x596>
 8011936:	3408      	adds	r4, #8
 8011938:	ab4a      	add	r3, sp, #296	; 0x128
 801193a:	441c      	add	r4, r3
 801193c:	462e      	mov	r6, r5
 801193e:	2000      	movs	r0, #0
 8011940:	2100      	movs	r1, #0
 8011942:	2e00      	cmp	r6, #0
 8011944:	da3a      	bge.n	80119bc <__kernel_rem_pio2+0x5b4>
 8011946:	9b02      	ldr	r3, [sp, #8]
 8011948:	2b00      	cmp	r3, #0
 801194a:	d03d      	beq.n	80119c8 <__kernel_rem_pio2+0x5c0>
 801194c:	4602      	mov	r2, r0
 801194e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011952:	9c01      	ldr	r4, [sp, #4]
 8011954:	e9c4 2300 	strd	r2, r3, [r4]
 8011958:	4602      	mov	r2, r0
 801195a:	460b      	mov	r3, r1
 801195c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8011960:	f7ee fcaa 	bl	80002b8 <__aeabi_dsub>
 8011964:	ae4c      	add	r6, sp, #304	; 0x130
 8011966:	2401      	movs	r4, #1
 8011968:	42a5      	cmp	r5, r4
 801196a:	da30      	bge.n	80119ce <__kernel_rem_pio2+0x5c6>
 801196c:	9b02      	ldr	r3, [sp, #8]
 801196e:	b113      	cbz	r3, 8011976 <__kernel_rem_pio2+0x56e>
 8011970:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011974:	4619      	mov	r1, r3
 8011976:	9b01      	ldr	r3, [sp, #4]
 8011978:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801197c:	e00f      	b.n	801199e <__kernel_rem_pio2+0x596>
 801197e:	ab9a      	add	r3, sp, #616	; 0x268
 8011980:	441c      	add	r4, r3
 8011982:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8011986:	2000      	movs	r0, #0
 8011988:	2100      	movs	r1, #0
 801198a:	2d00      	cmp	r5, #0
 801198c:	da10      	bge.n	80119b0 <__kernel_rem_pio2+0x5a8>
 801198e:	9b02      	ldr	r3, [sp, #8]
 8011990:	b113      	cbz	r3, 8011998 <__kernel_rem_pio2+0x590>
 8011992:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011996:	4619      	mov	r1, r3
 8011998:	9b01      	ldr	r3, [sp, #4]
 801199a:	e9c3 0100 	strd	r0, r1, [r3]
 801199e:	9b06      	ldr	r3, [sp, #24]
 80119a0:	f003 0007 	and.w	r0, r3, #7
 80119a4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80119a8:	ecbd 8b02 	vpop	{d8}
 80119ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80119b0:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80119b4:	f7ee fc82 	bl	80002bc <__adddf3>
 80119b8:	3d01      	subs	r5, #1
 80119ba:	e7e6      	b.n	801198a <__kernel_rem_pio2+0x582>
 80119bc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80119c0:	f7ee fc7c 	bl	80002bc <__adddf3>
 80119c4:	3e01      	subs	r6, #1
 80119c6:	e7bc      	b.n	8011942 <__kernel_rem_pio2+0x53a>
 80119c8:	4602      	mov	r2, r0
 80119ca:	460b      	mov	r3, r1
 80119cc:	e7c1      	b.n	8011952 <__kernel_rem_pio2+0x54a>
 80119ce:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80119d2:	f7ee fc73 	bl	80002bc <__adddf3>
 80119d6:	3401      	adds	r4, #1
 80119d8:	e7c6      	b.n	8011968 <__kernel_rem_pio2+0x560>
 80119da:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 80119de:	ed3a 7b02 	vldmdb	sl!, {d7}
 80119e2:	4640      	mov	r0, r8
 80119e4:	ec53 2b17 	vmov	r2, r3, d7
 80119e8:	4649      	mov	r1, r9
 80119ea:	ed8d 7b04 	vstr	d7, [sp, #16]
 80119ee:	f7ee fc65 	bl	80002bc <__adddf3>
 80119f2:	4602      	mov	r2, r0
 80119f4:	460b      	mov	r3, r1
 80119f6:	4606      	mov	r6, r0
 80119f8:	460f      	mov	r7, r1
 80119fa:	4640      	mov	r0, r8
 80119fc:	4649      	mov	r1, r9
 80119fe:	f7ee fc5b 	bl	80002b8 <__aeabi_dsub>
 8011a02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011a06:	f7ee fc59 	bl	80002bc <__adddf3>
 8011a0a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011a0e:	e9ca 0100 	strd	r0, r1, [sl]
 8011a12:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8011a16:	e770      	b.n	80118fa <__kernel_rem_pio2+0x4f2>
 8011a18:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8011a1c:	ed3a 7b02 	vldmdb	sl!, {d7}
 8011a20:	4630      	mov	r0, r6
 8011a22:	ec53 2b17 	vmov	r2, r3, d7
 8011a26:	4639      	mov	r1, r7
 8011a28:	ed8d 7b04 	vstr	d7, [sp, #16]
 8011a2c:	f7ee fc46 	bl	80002bc <__adddf3>
 8011a30:	4602      	mov	r2, r0
 8011a32:	460b      	mov	r3, r1
 8011a34:	4680      	mov	r8, r0
 8011a36:	4689      	mov	r9, r1
 8011a38:	4630      	mov	r0, r6
 8011a3a:	4639      	mov	r1, r7
 8011a3c:	f7ee fc3c 	bl	80002b8 <__aeabi_dsub>
 8011a40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011a44:	f7ee fc3a 	bl	80002bc <__adddf3>
 8011a48:	f10b 3bff 	add.w	fp, fp, #4294967295
 8011a4c:	e9ca 0100 	strd	r0, r1, [sl]
 8011a50:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8011a54:	e756      	b.n	8011904 <__kernel_rem_pio2+0x4fc>
 8011a56:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8011a5a:	f7ee fc2f 	bl	80002bc <__adddf3>
 8011a5e:	3d01      	subs	r5, #1
 8011a60:	e756      	b.n	8011910 <__kernel_rem_pio2+0x508>
 8011a62:	9b01      	ldr	r3, [sp, #4]
 8011a64:	9a01      	ldr	r2, [sp, #4]
 8011a66:	601f      	str	r7, [r3, #0]
 8011a68:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8011a6c:	605c      	str	r4, [r3, #4]
 8011a6e:	609d      	str	r5, [r3, #8]
 8011a70:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8011a74:	60d3      	str	r3, [r2, #12]
 8011a76:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011a7a:	6110      	str	r0, [r2, #16]
 8011a7c:	6153      	str	r3, [r2, #20]
 8011a7e:	e78e      	b.n	801199e <__kernel_rem_pio2+0x596>
 8011a80:	41700000 	.word	0x41700000
 8011a84:	3e700000 	.word	0x3e700000

08011a88 <__kernel_sin>:
 8011a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a8c:	ec55 4b10 	vmov	r4, r5, d0
 8011a90:	b085      	sub	sp, #20
 8011a92:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8011a96:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8011a9a:	ed8d 1b00 	vstr	d1, [sp]
 8011a9e:	9002      	str	r0, [sp, #8]
 8011aa0:	da06      	bge.n	8011ab0 <__kernel_sin+0x28>
 8011aa2:	ee10 0a10 	vmov	r0, s0
 8011aa6:	4629      	mov	r1, r5
 8011aa8:	f7ef f86e 	bl	8000b88 <__aeabi_d2iz>
 8011aac:	2800      	cmp	r0, #0
 8011aae:	d051      	beq.n	8011b54 <__kernel_sin+0xcc>
 8011ab0:	4622      	mov	r2, r4
 8011ab2:	462b      	mov	r3, r5
 8011ab4:	4620      	mov	r0, r4
 8011ab6:	4629      	mov	r1, r5
 8011ab8:	f7ee fdb6 	bl	8000628 <__aeabi_dmul>
 8011abc:	4682      	mov	sl, r0
 8011abe:	468b      	mov	fp, r1
 8011ac0:	4602      	mov	r2, r0
 8011ac2:	460b      	mov	r3, r1
 8011ac4:	4620      	mov	r0, r4
 8011ac6:	4629      	mov	r1, r5
 8011ac8:	f7ee fdae 	bl	8000628 <__aeabi_dmul>
 8011acc:	a341      	add	r3, pc, #260	; (adr r3, 8011bd4 <__kernel_sin+0x14c>)
 8011ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ad2:	4680      	mov	r8, r0
 8011ad4:	4689      	mov	r9, r1
 8011ad6:	4650      	mov	r0, sl
 8011ad8:	4659      	mov	r1, fp
 8011ada:	f7ee fda5 	bl	8000628 <__aeabi_dmul>
 8011ade:	a33f      	add	r3, pc, #252	; (adr r3, 8011bdc <__kernel_sin+0x154>)
 8011ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ae4:	f7ee fbe8 	bl	80002b8 <__aeabi_dsub>
 8011ae8:	4652      	mov	r2, sl
 8011aea:	465b      	mov	r3, fp
 8011aec:	f7ee fd9c 	bl	8000628 <__aeabi_dmul>
 8011af0:	a33c      	add	r3, pc, #240	; (adr r3, 8011be4 <__kernel_sin+0x15c>)
 8011af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011af6:	f7ee fbe1 	bl	80002bc <__adddf3>
 8011afa:	4652      	mov	r2, sl
 8011afc:	465b      	mov	r3, fp
 8011afe:	f7ee fd93 	bl	8000628 <__aeabi_dmul>
 8011b02:	a33a      	add	r3, pc, #232	; (adr r3, 8011bec <__kernel_sin+0x164>)
 8011b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b08:	f7ee fbd6 	bl	80002b8 <__aeabi_dsub>
 8011b0c:	4652      	mov	r2, sl
 8011b0e:	465b      	mov	r3, fp
 8011b10:	f7ee fd8a 	bl	8000628 <__aeabi_dmul>
 8011b14:	a337      	add	r3, pc, #220	; (adr r3, 8011bf4 <__kernel_sin+0x16c>)
 8011b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b1a:	f7ee fbcf 	bl	80002bc <__adddf3>
 8011b1e:	9b02      	ldr	r3, [sp, #8]
 8011b20:	4606      	mov	r6, r0
 8011b22:	460f      	mov	r7, r1
 8011b24:	b9db      	cbnz	r3, 8011b5e <__kernel_sin+0xd6>
 8011b26:	4602      	mov	r2, r0
 8011b28:	460b      	mov	r3, r1
 8011b2a:	4650      	mov	r0, sl
 8011b2c:	4659      	mov	r1, fp
 8011b2e:	f7ee fd7b 	bl	8000628 <__aeabi_dmul>
 8011b32:	a325      	add	r3, pc, #148	; (adr r3, 8011bc8 <__kernel_sin+0x140>)
 8011b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b38:	f7ee fbbe 	bl	80002b8 <__aeabi_dsub>
 8011b3c:	4642      	mov	r2, r8
 8011b3e:	464b      	mov	r3, r9
 8011b40:	f7ee fd72 	bl	8000628 <__aeabi_dmul>
 8011b44:	4602      	mov	r2, r0
 8011b46:	460b      	mov	r3, r1
 8011b48:	4620      	mov	r0, r4
 8011b4a:	4629      	mov	r1, r5
 8011b4c:	f7ee fbb6 	bl	80002bc <__adddf3>
 8011b50:	4604      	mov	r4, r0
 8011b52:	460d      	mov	r5, r1
 8011b54:	ec45 4b10 	vmov	d0, r4, r5
 8011b58:	b005      	add	sp, #20
 8011b5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b5e:	2200      	movs	r2, #0
 8011b60:	4b1b      	ldr	r3, [pc, #108]	; (8011bd0 <__kernel_sin+0x148>)
 8011b62:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011b66:	f7ee fd5f 	bl	8000628 <__aeabi_dmul>
 8011b6a:	4632      	mov	r2, r6
 8011b6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011b70:	463b      	mov	r3, r7
 8011b72:	4640      	mov	r0, r8
 8011b74:	4649      	mov	r1, r9
 8011b76:	f7ee fd57 	bl	8000628 <__aeabi_dmul>
 8011b7a:	4602      	mov	r2, r0
 8011b7c:	460b      	mov	r3, r1
 8011b7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011b82:	f7ee fb99 	bl	80002b8 <__aeabi_dsub>
 8011b86:	4652      	mov	r2, sl
 8011b88:	465b      	mov	r3, fp
 8011b8a:	f7ee fd4d 	bl	8000628 <__aeabi_dmul>
 8011b8e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011b92:	f7ee fb91 	bl	80002b8 <__aeabi_dsub>
 8011b96:	a30c      	add	r3, pc, #48	; (adr r3, 8011bc8 <__kernel_sin+0x140>)
 8011b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b9c:	4606      	mov	r6, r0
 8011b9e:	460f      	mov	r7, r1
 8011ba0:	4640      	mov	r0, r8
 8011ba2:	4649      	mov	r1, r9
 8011ba4:	f7ee fd40 	bl	8000628 <__aeabi_dmul>
 8011ba8:	4602      	mov	r2, r0
 8011baa:	460b      	mov	r3, r1
 8011bac:	4630      	mov	r0, r6
 8011bae:	4639      	mov	r1, r7
 8011bb0:	f7ee fb84 	bl	80002bc <__adddf3>
 8011bb4:	4602      	mov	r2, r0
 8011bb6:	460b      	mov	r3, r1
 8011bb8:	4620      	mov	r0, r4
 8011bba:	4629      	mov	r1, r5
 8011bbc:	f7ee fb7c 	bl	80002b8 <__aeabi_dsub>
 8011bc0:	e7c6      	b.n	8011b50 <__kernel_sin+0xc8>
 8011bc2:	bf00      	nop
 8011bc4:	f3af 8000 	nop.w
 8011bc8:	55555549 	.word	0x55555549
 8011bcc:	3fc55555 	.word	0x3fc55555
 8011bd0:	3fe00000 	.word	0x3fe00000
 8011bd4:	5acfd57c 	.word	0x5acfd57c
 8011bd8:	3de5d93a 	.word	0x3de5d93a
 8011bdc:	8a2b9ceb 	.word	0x8a2b9ceb
 8011be0:	3e5ae5e6 	.word	0x3e5ae5e6
 8011be4:	57b1fe7d 	.word	0x57b1fe7d
 8011be8:	3ec71de3 	.word	0x3ec71de3
 8011bec:	19c161d5 	.word	0x19c161d5
 8011bf0:	3f2a01a0 	.word	0x3f2a01a0
 8011bf4:	1110f8a6 	.word	0x1110f8a6
 8011bf8:	3f811111 	.word	0x3f811111

08011bfc <fabs>:
 8011bfc:	ec51 0b10 	vmov	r0, r1, d0
 8011c00:	ee10 2a10 	vmov	r2, s0
 8011c04:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011c08:	ec43 2b10 	vmov	d0, r2, r3
 8011c0c:	4770      	bx	lr
	...

08011c10 <floor>:
 8011c10:	ec51 0b10 	vmov	r0, r1, d0
 8011c14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c18:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8011c1c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8011c20:	2e13      	cmp	r6, #19
 8011c22:	460c      	mov	r4, r1
 8011c24:	ee10 5a10 	vmov	r5, s0
 8011c28:	4680      	mov	r8, r0
 8011c2a:	dc34      	bgt.n	8011c96 <floor+0x86>
 8011c2c:	2e00      	cmp	r6, #0
 8011c2e:	da16      	bge.n	8011c5e <floor+0x4e>
 8011c30:	a335      	add	r3, pc, #212	; (adr r3, 8011d08 <floor+0xf8>)
 8011c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c36:	f7ee fb41 	bl	80002bc <__adddf3>
 8011c3a:	2200      	movs	r2, #0
 8011c3c:	2300      	movs	r3, #0
 8011c3e:	f7ee ff83 	bl	8000b48 <__aeabi_dcmpgt>
 8011c42:	b148      	cbz	r0, 8011c58 <floor+0x48>
 8011c44:	2c00      	cmp	r4, #0
 8011c46:	da59      	bge.n	8011cfc <floor+0xec>
 8011c48:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8011c4c:	4a30      	ldr	r2, [pc, #192]	; (8011d10 <floor+0x100>)
 8011c4e:	432b      	orrs	r3, r5
 8011c50:	2500      	movs	r5, #0
 8011c52:	42ab      	cmp	r3, r5
 8011c54:	bf18      	it	ne
 8011c56:	4614      	movne	r4, r2
 8011c58:	4621      	mov	r1, r4
 8011c5a:	4628      	mov	r0, r5
 8011c5c:	e025      	b.n	8011caa <floor+0x9a>
 8011c5e:	4f2d      	ldr	r7, [pc, #180]	; (8011d14 <floor+0x104>)
 8011c60:	4137      	asrs	r7, r6
 8011c62:	ea01 0307 	and.w	r3, r1, r7
 8011c66:	4303      	orrs	r3, r0
 8011c68:	d01f      	beq.n	8011caa <floor+0x9a>
 8011c6a:	a327      	add	r3, pc, #156	; (adr r3, 8011d08 <floor+0xf8>)
 8011c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c70:	f7ee fb24 	bl	80002bc <__adddf3>
 8011c74:	2200      	movs	r2, #0
 8011c76:	2300      	movs	r3, #0
 8011c78:	f7ee ff66 	bl	8000b48 <__aeabi_dcmpgt>
 8011c7c:	2800      	cmp	r0, #0
 8011c7e:	d0eb      	beq.n	8011c58 <floor+0x48>
 8011c80:	2c00      	cmp	r4, #0
 8011c82:	bfbe      	ittt	lt
 8011c84:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8011c88:	fa43 f606 	asrlt.w	r6, r3, r6
 8011c8c:	19a4      	addlt	r4, r4, r6
 8011c8e:	ea24 0407 	bic.w	r4, r4, r7
 8011c92:	2500      	movs	r5, #0
 8011c94:	e7e0      	b.n	8011c58 <floor+0x48>
 8011c96:	2e33      	cmp	r6, #51	; 0x33
 8011c98:	dd0b      	ble.n	8011cb2 <floor+0xa2>
 8011c9a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8011c9e:	d104      	bne.n	8011caa <floor+0x9a>
 8011ca0:	ee10 2a10 	vmov	r2, s0
 8011ca4:	460b      	mov	r3, r1
 8011ca6:	f7ee fb09 	bl	80002bc <__adddf3>
 8011caa:	ec41 0b10 	vmov	d0, r0, r1
 8011cae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011cb2:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8011cb6:	f04f 33ff 	mov.w	r3, #4294967295
 8011cba:	fa23 f707 	lsr.w	r7, r3, r7
 8011cbe:	4207      	tst	r7, r0
 8011cc0:	d0f3      	beq.n	8011caa <floor+0x9a>
 8011cc2:	a311      	add	r3, pc, #68	; (adr r3, 8011d08 <floor+0xf8>)
 8011cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cc8:	f7ee faf8 	bl	80002bc <__adddf3>
 8011ccc:	2200      	movs	r2, #0
 8011cce:	2300      	movs	r3, #0
 8011cd0:	f7ee ff3a 	bl	8000b48 <__aeabi_dcmpgt>
 8011cd4:	2800      	cmp	r0, #0
 8011cd6:	d0bf      	beq.n	8011c58 <floor+0x48>
 8011cd8:	2c00      	cmp	r4, #0
 8011cda:	da02      	bge.n	8011ce2 <floor+0xd2>
 8011cdc:	2e14      	cmp	r6, #20
 8011cde:	d103      	bne.n	8011ce8 <floor+0xd8>
 8011ce0:	3401      	adds	r4, #1
 8011ce2:	ea25 0507 	bic.w	r5, r5, r7
 8011ce6:	e7b7      	b.n	8011c58 <floor+0x48>
 8011ce8:	2301      	movs	r3, #1
 8011cea:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8011cee:	fa03 f606 	lsl.w	r6, r3, r6
 8011cf2:	4435      	add	r5, r6
 8011cf4:	4545      	cmp	r5, r8
 8011cf6:	bf38      	it	cc
 8011cf8:	18e4      	addcc	r4, r4, r3
 8011cfa:	e7f2      	b.n	8011ce2 <floor+0xd2>
 8011cfc:	2500      	movs	r5, #0
 8011cfe:	462c      	mov	r4, r5
 8011d00:	e7aa      	b.n	8011c58 <floor+0x48>
 8011d02:	bf00      	nop
 8011d04:	f3af 8000 	nop.w
 8011d08:	8800759c 	.word	0x8800759c
 8011d0c:	7e37e43c 	.word	0x7e37e43c
 8011d10:	bff00000 	.word	0xbff00000
 8011d14:	000fffff 	.word	0x000fffff

08011d18 <scalbn>:
 8011d18:	b570      	push	{r4, r5, r6, lr}
 8011d1a:	ec55 4b10 	vmov	r4, r5, d0
 8011d1e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8011d22:	4606      	mov	r6, r0
 8011d24:	462b      	mov	r3, r5
 8011d26:	b9aa      	cbnz	r2, 8011d54 <scalbn+0x3c>
 8011d28:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8011d2c:	4323      	orrs	r3, r4
 8011d2e:	d03b      	beq.n	8011da8 <scalbn+0x90>
 8011d30:	4b31      	ldr	r3, [pc, #196]	; (8011df8 <scalbn+0xe0>)
 8011d32:	4629      	mov	r1, r5
 8011d34:	2200      	movs	r2, #0
 8011d36:	ee10 0a10 	vmov	r0, s0
 8011d3a:	f7ee fc75 	bl	8000628 <__aeabi_dmul>
 8011d3e:	4b2f      	ldr	r3, [pc, #188]	; (8011dfc <scalbn+0xe4>)
 8011d40:	429e      	cmp	r6, r3
 8011d42:	4604      	mov	r4, r0
 8011d44:	460d      	mov	r5, r1
 8011d46:	da12      	bge.n	8011d6e <scalbn+0x56>
 8011d48:	a327      	add	r3, pc, #156	; (adr r3, 8011de8 <scalbn+0xd0>)
 8011d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d4e:	f7ee fc6b 	bl	8000628 <__aeabi_dmul>
 8011d52:	e009      	b.n	8011d68 <scalbn+0x50>
 8011d54:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8011d58:	428a      	cmp	r2, r1
 8011d5a:	d10c      	bne.n	8011d76 <scalbn+0x5e>
 8011d5c:	ee10 2a10 	vmov	r2, s0
 8011d60:	4620      	mov	r0, r4
 8011d62:	4629      	mov	r1, r5
 8011d64:	f7ee faaa 	bl	80002bc <__adddf3>
 8011d68:	4604      	mov	r4, r0
 8011d6a:	460d      	mov	r5, r1
 8011d6c:	e01c      	b.n	8011da8 <scalbn+0x90>
 8011d6e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8011d72:	460b      	mov	r3, r1
 8011d74:	3a36      	subs	r2, #54	; 0x36
 8011d76:	4432      	add	r2, r6
 8011d78:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8011d7c:	428a      	cmp	r2, r1
 8011d7e:	dd0b      	ble.n	8011d98 <scalbn+0x80>
 8011d80:	ec45 4b11 	vmov	d1, r4, r5
 8011d84:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8011df0 <scalbn+0xd8>
 8011d88:	f000 f83c 	bl	8011e04 <copysign>
 8011d8c:	a318      	add	r3, pc, #96	; (adr r3, 8011df0 <scalbn+0xd8>)
 8011d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d92:	ec51 0b10 	vmov	r0, r1, d0
 8011d96:	e7da      	b.n	8011d4e <scalbn+0x36>
 8011d98:	2a00      	cmp	r2, #0
 8011d9a:	dd08      	ble.n	8011dae <scalbn+0x96>
 8011d9c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011da0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011da4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011da8:	ec45 4b10 	vmov	d0, r4, r5
 8011dac:	bd70      	pop	{r4, r5, r6, pc}
 8011dae:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8011db2:	da0d      	bge.n	8011dd0 <scalbn+0xb8>
 8011db4:	f24c 3350 	movw	r3, #50000	; 0xc350
 8011db8:	429e      	cmp	r6, r3
 8011dba:	ec45 4b11 	vmov	d1, r4, r5
 8011dbe:	dce1      	bgt.n	8011d84 <scalbn+0x6c>
 8011dc0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8011de8 <scalbn+0xd0>
 8011dc4:	f000 f81e 	bl	8011e04 <copysign>
 8011dc8:	a307      	add	r3, pc, #28	; (adr r3, 8011de8 <scalbn+0xd0>)
 8011dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011dce:	e7e0      	b.n	8011d92 <scalbn+0x7a>
 8011dd0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011dd4:	3236      	adds	r2, #54	; 0x36
 8011dd6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011dda:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011dde:	4620      	mov	r0, r4
 8011de0:	4629      	mov	r1, r5
 8011de2:	2200      	movs	r2, #0
 8011de4:	4b06      	ldr	r3, [pc, #24]	; (8011e00 <scalbn+0xe8>)
 8011de6:	e7b2      	b.n	8011d4e <scalbn+0x36>
 8011de8:	c2f8f359 	.word	0xc2f8f359
 8011dec:	01a56e1f 	.word	0x01a56e1f
 8011df0:	8800759c 	.word	0x8800759c
 8011df4:	7e37e43c 	.word	0x7e37e43c
 8011df8:	43500000 	.word	0x43500000
 8011dfc:	ffff3cb0 	.word	0xffff3cb0
 8011e00:	3c900000 	.word	0x3c900000

08011e04 <copysign>:
 8011e04:	ec51 0b10 	vmov	r0, r1, d0
 8011e08:	ee11 0a90 	vmov	r0, s3
 8011e0c:	ee10 2a10 	vmov	r2, s0
 8011e10:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8011e14:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8011e18:	ea41 0300 	orr.w	r3, r1, r0
 8011e1c:	ec43 2b10 	vmov	d0, r2, r3
 8011e20:	4770      	bx	lr
	...

08011e24 <__errno>:
 8011e24:	4b01      	ldr	r3, [pc, #4]	; (8011e2c <__errno+0x8>)
 8011e26:	6818      	ldr	r0, [r3, #0]
 8011e28:	4770      	bx	lr
 8011e2a:	bf00      	nop
 8011e2c:	2000000c 	.word	0x2000000c

08011e30 <__libc_init_array>:
 8011e30:	b570      	push	{r4, r5, r6, lr}
 8011e32:	4e0d      	ldr	r6, [pc, #52]	; (8011e68 <__libc_init_array+0x38>)
 8011e34:	4c0d      	ldr	r4, [pc, #52]	; (8011e6c <__libc_init_array+0x3c>)
 8011e36:	1ba4      	subs	r4, r4, r6
 8011e38:	10a4      	asrs	r4, r4, #2
 8011e3a:	2500      	movs	r5, #0
 8011e3c:	42a5      	cmp	r5, r4
 8011e3e:	d109      	bne.n	8011e54 <__libc_init_array+0x24>
 8011e40:	4e0b      	ldr	r6, [pc, #44]	; (8011e70 <__libc_init_array+0x40>)
 8011e42:	4c0c      	ldr	r4, [pc, #48]	; (8011e74 <__libc_init_array+0x44>)
 8011e44:	f004 ff36 	bl	8016cb4 <_init>
 8011e48:	1ba4      	subs	r4, r4, r6
 8011e4a:	10a4      	asrs	r4, r4, #2
 8011e4c:	2500      	movs	r5, #0
 8011e4e:	42a5      	cmp	r5, r4
 8011e50:	d105      	bne.n	8011e5e <__libc_init_array+0x2e>
 8011e52:	bd70      	pop	{r4, r5, r6, pc}
 8011e54:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011e58:	4798      	blx	r3
 8011e5a:	3501      	adds	r5, #1
 8011e5c:	e7ee      	b.n	8011e3c <__libc_init_array+0xc>
 8011e5e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011e62:	4798      	blx	r3
 8011e64:	3501      	adds	r5, #1
 8011e66:	e7f2      	b.n	8011e4e <__libc_init_array+0x1e>
 8011e68:	0801781c 	.word	0x0801781c
 8011e6c:	0801781c 	.word	0x0801781c
 8011e70:	0801781c 	.word	0x0801781c
 8011e74:	08017824 	.word	0x08017824

08011e78 <memset>:
 8011e78:	4402      	add	r2, r0
 8011e7a:	4603      	mov	r3, r0
 8011e7c:	4293      	cmp	r3, r2
 8011e7e:	d100      	bne.n	8011e82 <memset+0xa>
 8011e80:	4770      	bx	lr
 8011e82:	f803 1b01 	strb.w	r1, [r3], #1
 8011e86:	e7f9      	b.n	8011e7c <memset+0x4>

08011e88 <__cvt>:
 8011e88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011e8c:	ec55 4b10 	vmov	r4, r5, d0
 8011e90:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8011e92:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8011e96:	2d00      	cmp	r5, #0
 8011e98:	460e      	mov	r6, r1
 8011e9a:	4691      	mov	r9, r2
 8011e9c:	4619      	mov	r1, r3
 8011e9e:	bfb8      	it	lt
 8011ea0:	4622      	movlt	r2, r4
 8011ea2:	462b      	mov	r3, r5
 8011ea4:	f027 0720 	bic.w	r7, r7, #32
 8011ea8:	bfbb      	ittet	lt
 8011eaa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8011eae:	461d      	movlt	r5, r3
 8011eb0:	2300      	movge	r3, #0
 8011eb2:	232d      	movlt	r3, #45	; 0x2d
 8011eb4:	bfb8      	it	lt
 8011eb6:	4614      	movlt	r4, r2
 8011eb8:	2f46      	cmp	r7, #70	; 0x46
 8011eba:	700b      	strb	r3, [r1, #0]
 8011ebc:	d004      	beq.n	8011ec8 <__cvt+0x40>
 8011ebe:	2f45      	cmp	r7, #69	; 0x45
 8011ec0:	d100      	bne.n	8011ec4 <__cvt+0x3c>
 8011ec2:	3601      	adds	r6, #1
 8011ec4:	2102      	movs	r1, #2
 8011ec6:	e000      	b.n	8011eca <__cvt+0x42>
 8011ec8:	2103      	movs	r1, #3
 8011eca:	ab03      	add	r3, sp, #12
 8011ecc:	9301      	str	r3, [sp, #4]
 8011ece:	ab02      	add	r3, sp, #8
 8011ed0:	9300      	str	r3, [sp, #0]
 8011ed2:	4632      	mov	r2, r6
 8011ed4:	4653      	mov	r3, sl
 8011ed6:	ec45 4b10 	vmov	d0, r4, r5
 8011eda:	f001 ffb1 	bl	8013e40 <_dtoa_r>
 8011ede:	2f47      	cmp	r7, #71	; 0x47
 8011ee0:	4680      	mov	r8, r0
 8011ee2:	d102      	bne.n	8011eea <__cvt+0x62>
 8011ee4:	f019 0f01 	tst.w	r9, #1
 8011ee8:	d026      	beq.n	8011f38 <__cvt+0xb0>
 8011eea:	2f46      	cmp	r7, #70	; 0x46
 8011eec:	eb08 0906 	add.w	r9, r8, r6
 8011ef0:	d111      	bne.n	8011f16 <__cvt+0x8e>
 8011ef2:	f898 3000 	ldrb.w	r3, [r8]
 8011ef6:	2b30      	cmp	r3, #48	; 0x30
 8011ef8:	d10a      	bne.n	8011f10 <__cvt+0x88>
 8011efa:	2200      	movs	r2, #0
 8011efc:	2300      	movs	r3, #0
 8011efe:	4620      	mov	r0, r4
 8011f00:	4629      	mov	r1, r5
 8011f02:	f7ee fdf9 	bl	8000af8 <__aeabi_dcmpeq>
 8011f06:	b918      	cbnz	r0, 8011f10 <__cvt+0x88>
 8011f08:	f1c6 0601 	rsb	r6, r6, #1
 8011f0c:	f8ca 6000 	str.w	r6, [sl]
 8011f10:	f8da 3000 	ldr.w	r3, [sl]
 8011f14:	4499      	add	r9, r3
 8011f16:	2200      	movs	r2, #0
 8011f18:	2300      	movs	r3, #0
 8011f1a:	4620      	mov	r0, r4
 8011f1c:	4629      	mov	r1, r5
 8011f1e:	f7ee fdeb 	bl	8000af8 <__aeabi_dcmpeq>
 8011f22:	b938      	cbnz	r0, 8011f34 <__cvt+0xac>
 8011f24:	2230      	movs	r2, #48	; 0x30
 8011f26:	9b03      	ldr	r3, [sp, #12]
 8011f28:	454b      	cmp	r3, r9
 8011f2a:	d205      	bcs.n	8011f38 <__cvt+0xb0>
 8011f2c:	1c59      	adds	r1, r3, #1
 8011f2e:	9103      	str	r1, [sp, #12]
 8011f30:	701a      	strb	r2, [r3, #0]
 8011f32:	e7f8      	b.n	8011f26 <__cvt+0x9e>
 8011f34:	f8cd 900c 	str.w	r9, [sp, #12]
 8011f38:	9b03      	ldr	r3, [sp, #12]
 8011f3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011f3c:	eba3 0308 	sub.w	r3, r3, r8
 8011f40:	4640      	mov	r0, r8
 8011f42:	6013      	str	r3, [r2, #0]
 8011f44:	b004      	add	sp, #16
 8011f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08011f4a <__exponent>:
 8011f4a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011f4c:	2900      	cmp	r1, #0
 8011f4e:	4604      	mov	r4, r0
 8011f50:	bfba      	itte	lt
 8011f52:	4249      	neglt	r1, r1
 8011f54:	232d      	movlt	r3, #45	; 0x2d
 8011f56:	232b      	movge	r3, #43	; 0x2b
 8011f58:	2909      	cmp	r1, #9
 8011f5a:	f804 2b02 	strb.w	r2, [r4], #2
 8011f5e:	7043      	strb	r3, [r0, #1]
 8011f60:	dd20      	ble.n	8011fa4 <__exponent+0x5a>
 8011f62:	f10d 0307 	add.w	r3, sp, #7
 8011f66:	461f      	mov	r7, r3
 8011f68:	260a      	movs	r6, #10
 8011f6a:	fb91 f5f6 	sdiv	r5, r1, r6
 8011f6e:	fb06 1115 	mls	r1, r6, r5, r1
 8011f72:	3130      	adds	r1, #48	; 0x30
 8011f74:	2d09      	cmp	r5, #9
 8011f76:	f803 1c01 	strb.w	r1, [r3, #-1]
 8011f7a:	f103 32ff 	add.w	r2, r3, #4294967295
 8011f7e:	4629      	mov	r1, r5
 8011f80:	dc09      	bgt.n	8011f96 <__exponent+0x4c>
 8011f82:	3130      	adds	r1, #48	; 0x30
 8011f84:	3b02      	subs	r3, #2
 8011f86:	f802 1c01 	strb.w	r1, [r2, #-1]
 8011f8a:	42bb      	cmp	r3, r7
 8011f8c:	4622      	mov	r2, r4
 8011f8e:	d304      	bcc.n	8011f9a <__exponent+0x50>
 8011f90:	1a10      	subs	r0, r2, r0
 8011f92:	b003      	add	sp, #12
 8011f94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011f96:	4613      	mov	r3, r2
 8011f98:	e7e7      	b.n	8011f6a <__exponent+0x20>
 8011f9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011f9e:	f804 2b01 	strb.w	r2, [r4], #1
 8011fa2:	e7f2      	b.n	8011f8a <__exponent+0x40>
 8011fa4:	2330      	movs	r3, #48	; 0x30
 8011fa6:	4419      	add	r1, r3
 8011fa8:	7083      	strb	r3, [r0, #2]
 8011faa:	1d02      	adds	r2, r0, #4
 8011fac:	70c1      	strb	r1, [r0, #3]
 8011fae:	e7ef      	b.n	8011f90 <__exponent+0x46>

08011fb0 <_printf_float>:
 8011fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fb4:	b08d      	sub	sp, #52	; 0x34
 8011fb6:	460c      	mov	r4, r1
 8011fb8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8011fbc:	4616      	mov	r6, r2
 8011fbe:	461f      	mov	r7, r3
 8011fc0:	4605      	mov	r5, r0
 8011fc2:	f003 f9a9 	bl	8015318 <_localeconv_r>
 8011fc6:	6803      	ldr	r3, [r0, #0]
 8011fc8:	9304      	str	r3, [sp, #16]
 8011fca:	4618      	mov	r0, r3
 8011fcc:	f7ee f918 	bl	8000200 <strlen>
 8011fd0:	2300      	movs	r3, #0
 8011fd2:	930a      	str	r3, [sp, #40]	; 0x28
 8011fd4:	f8d8 3000 	ldr.w	r3, [r8]
 8011fd8:	9005      	str	r0, [sp, #20]
 8011fda:	3307      	adds	r3, #7
 8011fdc:	f023 0307 	bic.w	r3, r3, #7
 8011fe0:	f103 0208 	add.w	r2, r3, #8
 8011fe4:	f894 a018 	ldrb.w	sl, [r4, #24]
 8011fe8:	f8d4 b000 	ldr.w	fp, [r4]
 8011fec:	f8c8 2000 	str.w	r2, [r8]
 8011ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ff4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8011ff8:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8011ffc:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8012000:	9307      	str	r3, [sp, #28]
 8012002:	f8cd 8018 	str.w	r8, [sp, #24]
 8012006:	f04f 32ff 	mov.w	r2, #4294967295
 801200a:	4ba7      	ldr	r3, [pc, #668]	; (80122a8 <_printf_float+0x2f8>)
 801200c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012010:	f7ee fda4 	bl	8000b5c <__aeabi_dcmpun>
 8012014:	bb70      	cbnz	r0, 8012074 <_printf_float+0xc4>
 8012016:	f04f 32ff 	mov.w	r2, #4294967295
 801201a:	4ba3      	ldr	r3, [pc, #652]	; (80122a8 <_printf_float+0x2f8>)
 801201c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012020:	f7ee fd7e 	bl	8000b20 <__aeabi_dcmple>
 8012024:	bb30      	cbnz	r0, 8012074 <_printf_float+0xc4>
 8012026:	2200      	movs	r2, #0
 8012028:	2300      	movs	r3, #0
 801202a:	4640      	mov	r0, r8
 801202c:	4649      	mov	r1, r9
 801202e:	f7ee fd6d 	bl	8000b0c <__aeabi_dcmplt>
 8012032:	b110      	cbz	r0, 801203a <_printf_float+0x8a>
 8012034:	232d      	movs	r3, #45	; 0x2d
 8012036:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801203a:	4a9c      	ldr	r2, [pc, #624]	; (80122ac <_printf_float+0x2fc>)
 801203c:	4b9c      	ldr	r3, [pc, #624]	; (80122b0 <_printf_float+0x300>)
 801203e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8012042:	bf8c      	ite	hi
 8012044:	4690      	movhi	r8, r2
 8012046:	4698      	movls	r8, r3
 8012048:	2303      	movs	r3, #3
 801204a:	f02b 0204 	bic.w	r2, fp, #4
 801204e:	6123      	str	r3, [r4, #16]
 8012050:	6022      	str	r2, [r4, #0]
 8012052:	f04f 0900 	mov.w	r9, #0
 8012056:	9700      	str	r7, [sp, #0]
 8012058:	4633      	mov	r3, r6
 801205a:	aa0b      	add	r2, sp, #44	; 0x2c
 801205c:	4621      	mov	r1, r4
 801205e:	4628      	mov	r0, r5
 8012060:	f000 f9e6 	bl	8012430 <_printf_common>
 8012064:	3001      	adds	r0, #1
 8012066:	f040 808d 	bne.w	8012184 <_printf_float+0x1d4>
 801206a:	f04f 30ff 	mov.w	r0, #4294967295
 801206e:	b00d      	add	sp, #52	; 0x34
 8012070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012074:	4642      	mov	r2, r8
 8012076:	464b      	mov	r3, r9
 8012078:	4640      	mov	r0, r8
 801207a:	4649      	mov	r1, r9
 801207c:	f7ee fd6e 	bl	8000b5c <__aeabi_dcmpun>
 8012080:	b110      	cbz	r0, 8012088 <_printf_float+0xd8>
 8012082:	4a8c      	ldr	r2, [pc, #560]	; (80122b4 <_printf_float+0x304>)
 8012084:	4b8c      	ldr	r3, [pc, #560]	; (80122b8 <_printf_float+0x308>)
 8012086:	e7da      	b.n	801203e <_printf_float+0x8e>
 8012088:	6861      	ldr	r1, [r4, #4]
 801208a:	1c4b      	adds	r3, r1, #1
 801208c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8012090:	a80a      	add	r0, sp, #40	; 0x28
 8012092:	d13e      	bne.n	8012112 <_printf_float+0x162>
 8012094:	2306      	movs	r3, #6
 8012096:	6063      	str	r3, [r4, #4]
 8012098:	2300      	movs	r3, #0
 801209a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801209e:	ab09      	add	r3, sp, #36	; 0x24
 80120a0:	9300      	str	r3, [sp, #0]
 80120a2:	ec49 8b10 	vmov	d0, r8, r9
 80120a6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80120aa:	6022      	str	r2, [r4, #0]
 80120ac:	f8cd a004 	str.w	sl, [sp, #4]
 80120b0:	6861      	ldr	r1, [r4, #4]
 80120b2:	4628      	mov	r0, r5
 80120b4:	f7ff fee8 	bl	8011e88 <__cvt>
 80120b8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80120bc:	2b47      	cmp	r3, #71	; 0x47
 80120be:	4680      	mov	r8, r0
 80120c0:	d109      	bne.n	80120d6 <_printf_float+0x126>
 80120c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80120c4:	1cd8      	adds	r0, r3, #3
 80120c6:	db02      	blt.n	80120ce <_printf_float+0x11e>
 80120c8:	6862      	ldr	r2, [r4, #4]
 80120ca:	4293      	cmp	r3, r2
 80120cc:	dd47      	ble.n	801215e <_printf_float+0x1ae>
 80120ce:	f1aa 0a02 	sub.w	sl, sl, #2
 80120d2:	fa5f fa8a 	uxtb.w	sl, sl
 80120d6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80120da:	9909      	ldr	r1, [sp, #36]	; 0x24
 80120dc:	d824      	bhi.n	8012128 <_printf_float+0x178>
 80120de:	3901      	subs	r1, #1
 80120e0:	4652      	mov	r2, sl
 80120e2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80120e6:	9109      	str	r1, [sp, #36]	; 0x24
 80120e8:	f7ff ff2f 	bl	8011f4a <__exponent>
 80120ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80120ee:	1813      	adds	r3, r2, r0
 80120f0:	2a01      	cmp	r2, #1
 80120f2:	4681      	mov	r9, r0
 80120f4:	6123      	str	r3, [r4, #16]
 80120f6:	dc02      	bgt.n	80120fe <_printf_float+0x14e>
 80120f8:	6822      	ldr	r2, [r4, #0]
 80120fa:	07d1      	lsls	r1, r2, #31
 80120fc:	d501      	bpl.n	8012102 <_printf_float+0x152>
 80120fe:	3301      	adds	r3, #1
 8012100:	6123      	str	r3, [r4, #16]
 8012102:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8012106:	2b00      	cmp	r3, #0
 8012108:	d0a5      	beq.n	8012056 <_printf_float+0xa6>
 801210a:	232d      	movs	r3, #45	; 0x2d
 801210c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012110:	e7a1      	b.n	8012056 <_printf_float+0xa6>
 8012112:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8012116:	f000 8177 	beq.w	8012408 <_printf_float+0x458>
 801211a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 801211e:	d1bb      	bne.n	8012098 <_printf_float+0xe8>
 8012120:	2900      	cmp	r1, #0
 8012122:	d1b9      	bne.n	8012098 <_printf_float+0xe8>
 8012124:	2301      	movs	r3, #1
 8012126:	e7b6      	b.n	8012096 <_printf_float+0xe6>
 8012128:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 801212c:	d119      	bne.n	8012162 <_printf_float+0x1b2>
 801212e:	2900      	cmp	r1, #0
 8012130:	6863      	ldr	r3, [r4, #4]
 8012132:	dd0c      	ble.n	801214e <_printf_float+0x19e>
 8012134:	6121      	str	r1, [r4, #16]
 8012136:	b913      	cbnz	r3, 801213e <_printf_float+0x18e>
 8012138:	6822      	ldr	r2, [r4, #0]
 801213a:	07d2      	lsls	r2, r2, #31
 801213c:	d502      	bpl.n	8012144 <_printf_float+0x194>
 801213e:	3301      	adds	r3, #1
 8012140:	440b      	add	r3, r1
 8012142:	6123      	str	r3, [r4, #16]
 8012144:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012146:	65a3      	str	r3, [r4, #88]	; 0x58
 8012148:	f04f 0900 	mov.w	r9, #0
 801214c:	e7d9      	b.n	8012102 <_printf_float+0x152>
 801214e:	b913      	cbnz	r3, 8012156 <_printf_float+0x1a6>
 8012150:	6822      	ldr	r2, [r4, #0]
 8012152:	07d0      	lsls	r0, r2, #31
 8012154:	d501      	bpl.n	801215a <_printf_float+0x1aa>
 8012156:	3302      	adds	r3, #2
 8012158:	e7f3      	b.n	8012142 <_printf_float+0x192>
 801215a:	2301      	movs	r3, #1
 801215c:	e7f1      	b.n	8012142 <_printf_float+0x192>
 801215e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8012162:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8012166:	4293      	cmp	r3, r2
 8012168:	db05      	blt.n	8012176 <_printf_float+0x1c6>
 801216a:	6822      	ldr	r2, [r4, #0]
 801216c:	6123      	str	r3, [r4, #16]
 801216e:	07d1      	lsls	r1, r2, #31
 8012170:	d5e8      	bpl.n	8012144 <_printf_float+0x194>
 8012172:	3301      	adds	r3, #1
 8012174:	e7e5      	b.n	8012142 <_printf_float+0x192>
 8012176:	2b00      	cmp	r3, #0
 8012178:	bfd4      	ite	le
 801217a:	f1c3 0302 	rsble	r3, r3, #2
 801217e:	2301      	movgt	r3, #1
 8012180:	4413      	add	r3, r2
 8012182:	e7de      	b.n	8012142 <_printf_float+0x192>
 8012184:	6823      	ldr	r3, [r4, #0]
 8012186:	055a      	lsls	r2, r3, #21
 8012188:	d407      	bmi.n	801219a <_printf_float+0x1ea>
 801218a:	6923      	ldr	r3, [r4, #16]
 801218c:	4642      	mov	r2, r8
 801218e:	4631      	mov	r1, r6
 8012190:	4628      	mov	r0, r5
 8012192:	47b8      	blx	r7
 8012194:	3001      	adds	r0, #1
 8012196:	d12b      	bne.n	80121f0 <_printf_float+0x240>
 8012198:	e767      	b.n	801206a <_printf_float+0xba>
 801219a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801219e:	f240 80dc 	bls.w	801235a <_printf_float+0x3aa>
 80121a2:	2200      	movs	r2, #0
 80121a4:	2300      	movs	r3, #0
 80121a6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80121aa:	f7ee fca5 	bl	8000af8 <__aeabi_dcmpeq>
 80121ae:	2800      	cmp	r0, #0
 80121b0:	d033      	beq.n	801221a <_printf_float+0x26a>
 80121b2:	2301      	movs	r3, #1
 80121b4:	4a41      	ldr	r2, [pc, #260]	; (80122bc <_printf_float+0x30c>)
 80121b6:	4631      	mov	r1, r6
 80121b8:	4628      	mov	r0, r5
 80121ba:	47b8      	blx	r7
 80121bc:	3001      	adds	r0, #1
 80121be:	f43f af54 	beq.w	801206a <_printf_float+0xba>
 80121c2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80121c6:	429a      	cmp	r2, r3
 80121c8:	db02      	blt.n	80121d0 <_printf_float+0x220>
 80121ca:	6823      	ldr	r3, [r4, #0]
 80121cc:	07d8      	lsls	r0, r3, #31
 80121ce:	d50f      	bpl.n	80121f0 <_printf_float+0x240>
 80121d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80121d4:	4631      	mov	r1, r6
 80121d6:	4628      	mov	r0, r5
 80121d8:	47b8      	blx	r7
 80121da:	3001      	adds	r0, #1
 80121dc:	f43f af45 	beq.w	801206a <_printf_float+0xba>
 80121e0:	f04f 0800 	mov.w	r8, #0
 80121e4:	f104 091a 	add.w	r9, r4, #26
 80121e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80121ea:	3b01      	subs	r3, #1
 80121ec:	4543      	cmp	r3, r8
 80121ee:	dc09      	bgt.n	8012204 <_printf_float+0x254>
 80121f0:	6823      	ldr	r3, [r4, #0]
 80121f2:	079b      	lsls	r3, r3, #30
 80121f4:	f100 8103 	bmi.w	80123fe <_printf_float+0x44e>
 80121f8:	68e0      	ldr	r0, [r4, #12]
 80121fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80121fc:	4298      	cmp	r0, r3
 80121fe:	bfb8      	it	lt
 8012200:	4618      	movlt	r0, r3
 8012202:	e734      	b.n	801206e <_printf_float+0xbe>
 8012204:	2301      	movs	r3, #1
 8012206:	464a      	mov	r2, r9
 8012208:	4631      	mov	r1, r6
 801220a:	4628      	mov	r0, r5
 801220c:	47b8      	blx	r7
 801220e:	3001      	adds	r0, #1
 8012210:	f43f af2b 	beq.w	801206a <_printf_float+0xba>
 8012214:	f108 0801 	add.w	r8, r8, #1
 8012218:	e7e6      	b.n	80121e8 <_printf_float+0x238>
 801221a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801221c:	2b00      	cmp	r3, #0
 801221e:	dc2b      	bgt.n	8012278 <_printf_float+0x2c8>
 8012220:	2301      	movs	r3, #1
 8012222:	4a26      	ldr	r2, [pc, #152]	; (80122bc <_printf_float+0x30c>)
 8012224:	4631      	mov	r1, r6
 8012226:	4628      	mov	r0, r5
 8012228:	47b8      	blx	r7
 801222a:	3001      	adds	r0, #1
 801222c:	f43f af1d 	beq.w	801206a <_printf_float+0xba>
 8012230:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012232:	b923      	cbnz	r3, 801223e <_printf_float+0x28e>
 8012234:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012236:	b913      	cbnz	r3, 801223e <_printf_float+0x28e>
 8012238:	6823      	ldr	r3, [r4, #0]
 801223a:	07d9      	lsls	r1, r3, #31
 801223c:	d5d8      	bpl.n	80121f0 <_printf_float+0x240>
 801223e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012242:	4631      	mov	r1, r6
 8012244:	4628      	mov	r0, r5
 8012246:	47b8      	blx	r7
 8012248:	3001      	adds	r0, #1
 801224a:	f43f af0e 	beq.w	801206a <_printf_float+0xba>
 801224e:	f04f 0900 	mov.w	r9, #0
 8012252:	f104 0a1a 	add.w	sl, r4, #26
 8012256:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012258:	425b      	negs	r3, r3
 801225a:	454b      	cmp	r3, r9
 801225c:	dc01      	bgt.n	8012262 <_printf_float+0x2b2>
 801225e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012260:	e794      	b.n	801218c <_printf_float+0x1dc>
 8012262:	2301      	movs	r3, #1
 8012264:	4652      	mov	r2, sl
 8012266:	4631      	mov	r1, r6
 8012268:	4628      	mov	r0, r5
 801226a:	47b8      	blx	r7
 801226c:	3001      	adds	r0, #1
 801226e:	f43f aefc 	beq.w	801206a <_printf_float+0xba>
 8012272:	f109 0901 	add.w	r9, r9, #1
 8012276:	e7ee      	b.n	8012256 <_printf_float+0x2a6>
 8012278:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801227a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801227c:	429a      	cmp	r2, r3
 801227e:	bfa8      	it	ge
 8012280:	461a      	movge	r2, r3
 8012282:	2a00      	cmp	r2, #0
 8012284:	4691      	mov	r9, r2
 8012286:	dd07      	ble.n	8012298 <_printf_float+0x2e8>
 8012288:	4613      	mov	r3, r2
 801228a:	4631      	mov	r1, r6
 801228c:	4642      	mov	r2, r8
 801228e:	4628      	mov	r0, r5
 8012290:	47b8      	blx	r7
 8012292:	3001      	adds	r0, #1
 8012294:	f43f aee9 	beq.w	801206a <_printf_float+0xba>
 8012298:	f104 031a 	add.w	r3, r4, #26
 801229c:	f04f 0b00 	mov.w	fp, #0
 80122a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80122a4:	9306      	str	r3, [sp, #24]
 80122a6:	e015      	b.n	80122d4 <_printf_float+0x324>
 80122a8:	7fefffff 	.word	0x7fefffff
 80122ac:	080174e0 	.word	0x080174e0
 80122b0:	080174dc 	.word	0x080174dc
 80122b4:	080174e8 	.word	0x080174e8
 80122b8:	080174e4 	.word	0x080174e4
 80122bc:	0801770b 	.word	0x0801770b
 80122c0:	2301      	movs	r3, #1
 80122c2:	9a06      	ldr	r2, [sp, #24]
 80122c4:	4631      	mov	r1, r6
 80122c6:	4628      	mov	r0, r5
 80122c8:	47b8      	blx	r7
 80122ca:	3001      	adds	r0, #1
 80122cc:	f43f aecd 	beq.w	801206a <_printf_float+0xba>
 80122d0:	f10b 0b01 	add.w	fp, fp, #1
 80122d4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80122d8:	ebaa 0309 	sub.w	r3, sl, r9
 80122dc:	455b      	cmp	r3, fp
 80122de:	dcef      	bgt.n	80122c0 <_printf_float+0x310>
 80122e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80122e4:	429a      	cmp	r2, r3
 80122e6:	44d0      	add	r8, sl
 80122e8:	db15      	blt.n	8012316 <_printf_float+0x366>
 80122ea:	6823      	ldr	r3, [r4, #0]
 80122ec:	07da      	lsls	r2, r3, #31
 80122ee:	d412      	bmi.n	8012316 <_printf_float+0x366>
 80122f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80122f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80122f4:	eba3 020a 	sub.w	r2, r3, sl
 80122f8:	eba3 0a01 	sub.w	sl, r3, r1
 80122fc:	4592      	cmp	sl, r2
 80122fe:	bfa8      	it	ge
 8012300:	4692      	movge	sl, r2
 8012302:	f1ba 0f00 	cmp.w	sl, #0
 8012306:	dc0e      	bgt.n	8012326 <_printf_float+0x376>
 8012308:	f04f 0800 	mov.w	r8, #0
 801230c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8012310:	f104 091a 	add.w	r9, r4, #26
 8012314:	e019      	b.n	801234a <_printf_float+0x39a>
 8012316:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801231a:	4631      	mov	r1, r6
 801231c:	4628      	mov	r0, r5
 801231e:	47b8      	blx	r7
 8012320:	3001      	adds	r0, #1
 8012322:	d1e5      	bne.n	80122f0 <_printf_float+0x340>
 8012324:	e6a1      	b.n	801206a <_printf_float+0xba>
 8012326:	4653      	mov	r3, sl
 8012328:	4642      	mov	r2, r8
 801232a:	4631      	mov	r1, r6
 801232c:	4628      	mov	r0, r5
 801232e:	47b8      	blx	r7
 8012330:	3001      	adds	r0, #1
 8012332:	d1e9      	bne.n	8012308 <_printf_float+0x358>
 8012334:	e699      	b.n	801206a <_printf_float+0xba>
 8012336:	2301      	movs	r3, #1
 8012338:	464a      	mov	r2, r9
 801233a:	4631      	mov	r1, r6
 801233c:	4628      	mov	r0, r5
 801233e:	47b8      	blx	r7
 8012340:	3001      	adds	r0, #1
 8012342:	f43f ae92 	beq.w	801206a <_printf_float+0xba>
 8012346:	f108 0801 	add.w	r8, r8, #1
 801234a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801234e:	1a9b      	subs	r3, r3, r2
 8012350:	eba3 030a 	sub.w	r3, r3, sl
 8012354:	4543      	cmp	r3, r8
 8012356:	dcee      	bgt.n	8012336 <_printf_float+0x386>
 8012358:	e74a      	b.n	80121f0 <_printf_float+0x240>
 801235a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801235c:	2a01      	cmp	r2, #1
 801235e:	dc01      	bgt.n	8012364 <_printf_float+0x3b4>
 8012360:	07db      	lsls	r3, r3, #31
 8012362:	d53a      	bpl.n	80123da <_printf_float+0x42a>
 8012364:	2301      	movs	r3, #1
 8012366:	4642      	mov	r2, r8
 8012368:	4631      	mov	r1, r6
 801236a:	4628      	mov	r0, r5
 801236c:	47b8      	blx	r7
 801236e:	3001      	adds	r0, #1
 8012370:	f43f ae7b 	beq.w	801206a <_printf_float+0xba>
 8012374:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012378:	4631      	mov	r1, r6
 801237a:	4628      	mov	r0, r5
 801237c:	47b8      	blx	r7
 801237e:	3001      	adds	r0, #1
 8012380:	f108 0801 	add.w	r8, r8, #1
 8012384:	f43f ae71 	beq.w	801206a <_printf_float+0xba>
 8012388:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801238a:	2200      	movs	r2, #0
 801238c:	f103 3aff 	add.w	sl, r3, #4294967295
 8012390:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012394:	2300      	movs	r3, #0
 8012396:	f7ee fbaf 	bl	8000af8 <__aeabi_dcmpeq>
 801239a:	b9c8      	cbnz	r0, 80123d0 <_printf_float+0x420>
 801239c:	4653      	mov	r3, sl
 801239e:	4642      	mov	r2, r8
 80123a0:	4631      	mov	r1, r6
 80123a2:	4628      	mov	r0, r5
 80123a4:	47b8      	blx	r7
 80123a6:	3001      	adds	r0, #1
 80123a8:	d10e      	bne.n	80123c8 <_printf_float+0x418>
 80123aa:	e65e      	b.n	801206a <_printf_float+0xba>
 80123ac:	2301      	movs	r3, #1
 80123ae:	4652      	mov	r2, sl
 80123b0:	4631      	mov	r1, r6
 80123b2:	4628      	mov	r0, r5
 80123b4:	47b8      	blx	r7
 80123b6:	3001      	adds	r0, #1
 80123b8:	f43f ae57 	beq.w	801206a <_printf_float+0xba>
 80123bc:	f108 0801 	add.w	r8, r8, #1
 80123c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80123c2:	3b01      	subs	r3, #1
 80123c4:	4543      	cmp	r3, r8
 80123c6:	dcf1      	bgt.n	80123ac <_printf_float+0x3fc>
 80123c8:	464b      	mov	r3, r9
 80123ca:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80123ce:	e6de      	b.n	801218e <_printf_float+0x1de>
 80123d0:	f04f 0800 	mov.w	r8, #0
 80123d4:	f104 0a1a 	add.w	sl, r4, #26
 80123d8:	e7f2      	b.n	80123c0 <_printf_float+0x410>
 80123da:	2301      	movs	r3, #1
 80123dc:	e7df      	b.n	801239e <_printf_float+0x3ee>
 80123de:	2301      	movs	r3, #1
 80123e0:	464a      	mov	r2, r9
 80123e2:	4631      	mov	r1, r6
 80123e4:	4628      	mov	r0, r5
 80123e6:	47b8      	blx	r7
 80123e8:	3001      	adds	r0, #1
 80123ea:	f43f ae3e 	beq.w	801206a <_printf_float+0xba>
 80123ee:	f108 0801 	add.w	r8, r8, #1
 80123f2:	68e3      	ldr	r3, [r4, #12]
 80123f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80123f6:	1a9b      	subs	r3, r3, r2
 80123f8:	4543      	cmp	r3, r8
 80123fa:	dcf0      	bgt.n	80123de <_printf_float+0x42e>
 80123fc:	e6fc      	b.n	80121f8 <_printf_float+0x248>
 80123fe:	f04f 0800 	mov.w	r8, #0
 8012402:	f104 0919 	add.w	r9, r4, #25
 8012406:	e7f4      	b.n	80123f2 <_printf_float+0x442>
 8012408:	2900      	cmp	r1, #0
 801240a:	f43f ae8b 	beq.w	8012124 <_printf_float+0x174>
 801240e:	2300      	movs	r3, #0
 8012410:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8012414:	ab09      	add	r3, sp, #36	; 0x24
 8012416:	9300      	str	r3, [sp, #0]
 8012418:	ec49 8b10 	vmov	d0, r8, r9
 801241c:	6022      	str	r2, [r4, #0]
 801241e:	f8cd a004 	str.w	sl, [sp, #4]
 8012422:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8012426:	4628      	mov	r0, r5
 8012428:	f7ff fd2e 	bl	8011e88 <__cvt>
 801242c:	4680      	mov	r8, r0
 801242e:	e648      	b.n	80120c2 <_printf_float+0x112>

08012430 <_printf_common>:
 8012430:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012434:	4691      	mov	r9, r2
 8012436:	461f      	mov	r7, r3
 8012438:	688a      	ldr	r2, [r1, #8]
 801243a:	690b      	ldr	r3, [r1, #16]
 801243c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012440:	4293      	cmp	r3, r2
 8012442:	bfb8      	it	lt
 8012444:	4613      	movlt	r3, r2
 8012446:	f8c9 3000 	str.w	r3, [r9]
 801244a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801244e:	4606      	mov	r6, r0
 8012450:	460c      	mov	r4, r1
 8012452:	b112      	cbz	r2, 801245a <_printf_common+0x2a>
 8012454:	3301      	adds	r3, #1
 8012456:	f8c9 3000 	str.w	r3, [r9]
 801245a:	6823      	ldr	r3, [r4, #0]
 801245c:	0699      	lsls	r1, r3, #26
 801245e:	bf42      	ittt	mi
 8012460:	f8d9 3000 	ldrmi.w	r3, [r9]
 8012464:	3302      	addmi	r3, #2
 8012466:	f8c9 3000 	strmi.w	r3, [r9]
 801246a:	6825      	ldr	r5, [r4, #0]
 801246c:	f015 0506 	ands.w	r5, r5, #6
 8012470:	d107      	bne.n	8012482 <_printf_common+0x52>
 8012472:	f104 0a19 	add.w	sl, r4, #25
 8012476:	68e3      	ldr	r3, [r4, #12]
 8012478:	f8d9 2000 	ldr.w	r2, [r9]
 801247c:	1a9b      	subs	r3, r3, r2
 801247e:	42ab      	cmp	r3, r5
 8012480:	dc28      	bgt.n	80124d4 <_printf_common+0xa4>
 8012482:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8012486:	6822      	ldr	r2, [r4, #0]
 8012488:	3300      	adds	r3, #0
 801248a:	bf18      	it	ne
 801248c:	2301      	movne	r3, #1
 801248e:	0692      	lsls	r2, r2, #26
 8012490:	d42d      	bmi.n	80124ee <_printf_common+0xbe>
 8012492:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012496:	4639      	mov	r1, r7
 8012498:	4630      	mov	r0, r6
 801249a:	47c0      	blx	r8
 801249c:	3001      	adds	r0, #1
 801249e:	d020      	beq.n	80124e2 <_printf_common+0xb2>
 80124a0:	6823      	ldr	r3, [r4, #0]
 80124a2:	68e5      	ldr	r5, [r4, #12]
 80124a4:	f8d9 2000 	ldr.w	r2, [r9]
 80124a8:	f003 0306 	and.w	r3, r3, #6
 80124ac:	2b04      	cmp	r3, #4
 80124ae:	bf08      	it	eq
 80124b0:	1aad      	subeq	r5, r5, r2
 80124b2:	68a3      	ldr	r3, [r4, #8]
 80124b4:	6922      	ldr	r2, [r4, #16]
 80124b6:	bf0c      	ite	eq
 80124b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80124bc:	2500      	movne	r5, #0
 80124be:	4293      	cmp	r3, r2
 80124c0:	bfc4      	itt	gt
 80124c2:	1a9b      	subgt	r3, r3, r2
 80124c4:	18ed      	addgt	r5, r5, r3
 80124c6:	f04f 0900 	mov.w	r9, #0
 80124ca:	341a      	adds	r4, #26
 80124cc:	454d      	cmp	r5, r9
 80124ce:	d11a      	bne.n	8012506 <_printf_common+0xd6>
 80124d0:	2000      	movs	r0, #0
 80124d2:	e008      	b.n	80124e6 <_printf_common+0xb6>
 80124d4:	2301      	movs	r3, #1
 80124d6:	4652      	mov	r2, sl
 80124d8:	4639      	mov	r1, r7
 80124da:	4630      	mov	r0, r6
 80124dc:	47c0      	blx	r8
 80124de:	3001      	adds	r0, #1
 80124e0:	d103      	bne.n	80124ea <_printf_common+0xba>
 80124e2:	f04f 30ff 	mov.w	r0, #4294967295
 80124e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80124ea:	3501      	adds	r5, #1
 80124ec:	e7c3      	b.n	8012476 <_printf_common+0x46>
 80124ee:	18e1      	adds	r1, r4, r3
 80124f0:	1c5a      	adds	r2, r3, #1
 80124f2:	2030      	movs	r0, #48	; 0x30
 80124f4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80124f8:	4422      	add	r2, r4
 80124fa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80124fe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012502:	3302      	adds	r3, #2
 8012504:	e7c5      	b.n	8012492 <_printf_common+0x62>
 8012506:	2301      	movs	r3, #1
 8012508:	4622      	mov	r2, r4
 801250a:	4639      	mov	r1, r7
 801250c:	4630      	mov	r0, r6
 801250e:	47c0      	blx	r8
 8012510:	3001      	adds	r0, #1
 8012512:	d0e6      	beq.n	80124e2 <_printf_common+0xb2>
 8012514:	f109 0901 	add.w	r9, r9, #1
 8012518:	e7d8      	b.n	80124cc <_printf_common+0x9c>
	...

0801251c <_printf_i>:
 801251c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012520:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8012524:	460c      	mov	r4, r1
 8012526:	7e09      	ldrb	r1, [r1, #24]
 8012528:	b085      	sub	sp, #20
 801252a:	296e      	cmp	r1, #110	; 0x6e
 801252c:	4617      	mov	r7, r2
 801252e:	4606      	mov	r6, r0
 8012530:	4698      	mov	r8, r3
 8012532:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012534:	f000 80b3 	beq.w	801269e <_printf_i+0x182>
 8012538:	d822      	bhi.n	8012580 <_printf_i+0x64>
 801253a:	2963      	cmp	r1, #99	; 0x63
 801253c:	d036      	beq.n	80125ac <_printf_i+0x90>
 801253e:	d80a      	bhi.n	8012556 <_printf_i+0x3a>
 8012540:	2900      	cmp	r1, #0
 8012542:	f000 80b9 	beq.w	80126b8 <_printf_i+0x19c>
 8012546:	2958      	cmp	r1, #88	; 0x58
 8012548:	f000 8083 	beq.w	8012652 <_printf_i+0x136>
 801254c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012550:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8012554:	e032      	b.n	80125bc <_printf_i+0xa0>
 8012556:	2964      	cmp	r1, #100	; 0x64
 8012558:	d001      	beq.n	801255e <_printf_i+0x42>
 801255a:	2969      	cmp	r1, #105	; 0x69
 801255c:	d1f6      	bne.n	801254c <_printf_i+0x30>
 801255e:	6820      	ldr	r0, [r4, #0]
 8012560:	6813      	ldr	r3, [r2, #0]
 8012562:	0605      	lsls	r5, r0, #24
 8012564:	f103 0104 	add.w	r1, r3, #4
 8012568:	d52a      	bpl.n	80125c0 <_printf_i+0xa4>
 801256a:	681b      	ldr	r3, [r3, #0]
 801256c:	6011      	str	r1, [r2, #0]
 801256e:	2b00      	cmp	r3, #0
 8012570:	da03      	bge.n	801257a <_printf_i+0x5e>
 8012572:	222d      	movs	r2, #45	; 0x2d
 8012574:	425b      	negs	r3, r3
 8012576:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801257a:	486f      	ldr	r0, [pc, #444]	; (8012738 <_printf_i+0x21c>)
 801257c:	220a      	movs	r2, #10
 801257e:	e039      	b.n	80125f4 <_printf_i+0xd8>
 8012580:	2973      	cmp	r1, #115	; 0x73
 8012582:	f000 809d 	beq.w	80126c0 <_printf_i+0x1a4>
 8012586:	d808      	bhi.n	801259a <_printf_i+0x7e>
 8012588:	296f      	cmp	r1, #111	; 0x6f
 801258a:	d020      	beq.n	80125ce <_printf_i+0xb2>
 801258c:	2970      	cmp	r1, #112	; 0x70
 801258e:	d1dd      	bne.n	801254c <_printf_i+0x30>
 8012590:	6823      	ldr	r3, [r4, #0]
 8012592:	f043 0320 	orr.w	r3, r3, #32
 8012596:	6023      	str	r3, [r4, #0]
 8012598:	e003      	b.n	80125a2 <_printf_i+0x86>
 801259a:	2975      	cmp	r1, #117	; 0x75
 801259c:	d017      	beq.n	80125ce <_printf_i+0xb2>
 801259e:	2978      	cmp	r1, #120	; 0x78
 80125a0:	d1d4      	bne.n	801254c <_printf_i+0x30>
 80125a2:	2378      	movs	r3, #120	; 0x78
 80125a4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80125a8:	4864      	ldr	r0, [pc, #400]	; (801273c <_printf_i+0x220>)
 80125aa:	e055      	b.n	8012658 <_printf_i+0x13c>
 80125ac:	6813      	ldr	r3, [r2, #0]
 80125ae:	1d19      	adds	r1, r3, #4
 80125b0:	681b      	ldr	r3, [r3, #0]
 80125b2:	6011      	str	r1, [r2, #0]
 80125b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80125b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80125bc:	2301      	movs	r3, #1
 80125be:	e08c      	b.n	80126da <_printf_i+0x1be>
 80125c0:	681b      	ldr	r3, [r3, #0]
 80125c2:	6011      	str	r1, [r2, #0]
 80125c4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80125c8:	bf18      	it	ne
 80125ca:	b21b      	sxthne	r3, r3
 80125cc:	e7cf      	b.n	801256e <_printf_i+0x52>
 80125ce:	6813      	ldr	r3, [r2, #0]
 80125d0:	6825      	ldr	r5, [r4, #0]
 80125d2:	1d18      	adds	r0, r3, #4
 80125d4:	6010      	str	r0, [r2, #0]
 80125d6:	0628      	lsls	r0, r5, #24
 80125d8:	d501      	bpl.n	80125de <_printf_i+0xc2>
 80125da:	681b      	ldr	r3, [r3, #0]
 80125dc:	e002      	b.n	80125e4 <_printf_i+0xc8>
 80125de:	0668      	lsls	r0, r5, #25
 80125e0:	d5fb      	bpl.n	80125da <_printf_i+0xbe>
 80125e2:	881b      	ldrh	r3, [r3, #0]
 80125e4:	4854      	ldr	r0, [pc, #336]	; (8012738 <_printf_i+0x21c>)
 80125e6:	296f      	cmp	r1, #111	; 0x6f
 80125e8:	bf14      	ite	ne
 80125ea:	220a      	movne	r2, #10
 80125ec:	2208      	moveq	r2, #8
 80125ee:	2100      	movs	r1, #0
 80125f0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80125f4:	6865      	ldr	r5, [r4, #4]
 80125f6:	60a5      	str	r5, [r4, #8]
 80125f8:	2d00      	cmp	r5, #0
 80125fa:	f2c0 8095 	blt.w	8012728 <_printf_i+0x20c>
 80125fe:	6821      	ldr	r1, [r4, #0]
 8012600:	f021 0104 	bic.w	r1, r1, #4
 8012604:	6021      	str	r1, [r4, #0]
 8012606:	2b00      	cmp	r3, #0
 8012608:	d13d      	bne.n	8012686 <_printf_i+0x16a>
 801260a:	2d00      	cmp	r5, #0
 801260c:	f040 808e 	bne.w	801272c <_printf_i+0x210>
 8012610:	4665      	mov	r5, ip
 8012612:	2a08      	cmp	r2, #8
 8012614:	d10b      	bne.n	801262e <_printf_i+0x112>
 8012616:	6823      	ldr	r3, [r4, #0]
 8012618:	07db      	lsls	r3, r3, #31
 801261a:	d508      	bpl.n	801262e <_printf_i+0x112>
 801261c:	6923      	ldr	r3, [r4, #16]
 801261e:	6862      	ldr	r2, [r4, #4]
 8012620:	429a      	cmp	r2, r3
 8012622:	bfde      	ittt	le
 8012624:	2330      	movle	r3, #48	; 0x30
 8012626:	f805 3c01 	strble.w	r3, [r5, #-1]
 801262a:	f105 35ff 	addle.w	r5, r5, #4294967295
 801262e:	ebac 0305 	sub.w	r3, ip, r5
 8012632:	6123      	str	r3, [r4, #16]
 8012634:	f8cd 8000 	str.w	r8, [sp]
 8012638:	463b      	mov	r3, r7
 801263a:	aa03      	add	r2, sp, #12
 801263c:	4621      	mov	r1, r4
 801263e:	4630      	mov	r0, r6
 8012640:	f7ff fef6 	bl	8012430 <_printf_common>
 8012644:	3001      	adds	r0, #1
 8012646:	d14d      	bne.n	80126e4 <_printf_i+0x1c8>
 8012648:	f04f 30ff 	mov.w	r0, #4294967295
 801264c:	b005      	add	sp, #20
 801264e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012652:	4839      	ldr	r0, [pc, #228]	; (8012738 <_printf_i+0x21c>)
 8012654:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8012658:	6813      	ldr	r3, [r2, #0]
 801265a:	6821      	ldr	r1, [r4, #0]
 801265c:	1d1d      	adds	r5, r3, #4
 801265e:	681b      	ldr	r3, [r3, #0]
 8012660:	6015      	str	r5, [r2, #0]
 8012662:	060a      	lsls	r2, r1, #24
 8012664:	d50b      	bpl.n	801267e <_printf_i+0x162>
 8012666:	07ca      	lsls	r2, r1, #31
 8012668:	bf44      	itt	mi
 801266a:	f041 0120 	orrmi.w	r1, r1, #32
 801266e:	6021      	strmi	r1, [r4, #0]
 8012670:	b91b      	cbnz	r3, 801267a <_printf_i+0x15e>
 8012672:	6822      	ldr	r2, [r4, #0]
 8012674:	f022 0220 	bic.w	r2, r2, #32
 8012678:	6022      	str	r2, [r4, #0]
 801267a:	2210      	movs	r2, #16
 801267c:	e7b7      	b.n	80125ee <_printf_i+0xd2>
 801267e:	064d      	lsls	r5, r1, #25
 8012680:	bf48      	it	mi
 8012682:	b29b      	uxthmi	r3, r3
 8012684:	e7ef      	b.n	8012666 <_printf_i+0x14a>
 8012686:	4665      	mov	r5, ip
 8012688:	fbb3 f1f2 	udiv	r1, r3, r2
 801268c:	fb02 3311 	mls	r3, r2, r1, r3
 8012690:	5cc3      	ldrb	r3, [r0, r3]
 8012692:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8012696:	460b      	mov	r3, r1
 8012698:	2900      	cmp	r1, #0
 801269a:	d1f5      	bne.n	8012688 <_printf_i+0x16c>
 801269c:	e7b9      	b.n	8012612 <_printf_i+0xf6>
 801269e:	6813      	ldr	r3, [r2, #0]
 80126a0:	6825      	ldr	r5, [r4, #0]
 80126a2:	6961      	ldr	r1, [r4, #20]
 80126a4:	1d18      	adds	r0, r3, #4
 80126a6:	6010      	str	r0, [r2, #0]
 80126a8:	0628      	lsls	r0, r5, #24
 80126aa:	681b      	ldr	r3, [r3, #0]
 80126ac:	d501      	bpl.n	80126b2 <_printf_i+0x196>
 80126ae:	6019      	str	r1, [r3, #0]
 80126b0:	e002      	b.n	80126b8 <_printf_i+0x19c>
 80126b2:	066a      	lsls	r2, r5, #25
 80126b4:	d5fb      	bpl.n	80126ae <_printf_i+0x192>
 80126b6:	8019      	strh	r1, [r3, #0]
 80126b8:	2300      	movs	r3, #0
 80126ba:	6123      	str	r3, [r4, #16]
 80126bc:	4665      	mov	r5, ip
 80126be:	e7b9      	b.n	8012634 <_printf_i+0x118>
 80126c0:	6813      	ldr	r3, [r2, #0]
 80126c2:	1d19      	adds	r1, r3, #4
 80126c4:	6011      	str	r1, [r2, #0]
 80126c6:	681d      	ldr	r5, [r3, #0]
 80126c8:	6862      	ldr	r2, [r4, #4]
 80126ca:	2100      	movs	r1, #0
 80126cc:	4628      	mov	r0, r5
 80126ce:	f7ed fd9f 	bl	8000210 <memchr>
 80126d2:	b108      	cbz	r0, 80126d8 <_printf_i+0x1bc>
 80126d4:	1b40      	subs	r0, r0, r5
 80126d6:	6060      	str	r0, [r4, #4]
 80126d8:	6863      	ldr	r3, [r4, #4]
 80126da:	6123      	str	r3, [r4, #16]
 80126dc:	2300      	movs	r3, #0
 80126de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80126e2:	e7a7      	b.n	8012634 <_printf_i+0x118>
 80126e4:	6923      	ldr	r3, [r4, #16]
 80126e6:	462a      	mov	r2, r5
 80126e8:	4639      	mov	r1, r7
 80126ea:	4630      	mov	r0, r6
 80126ec:	47c0      	blx	r8
 80126ee:	3001      	adds	r0, #1
 80126f0:	d0aa      	beq.n	8012648 <_printf_i+0x12c>
 80126f2:	6823      	ldr	r3, [r4, #0]
 80126f4:	079b      	lsls	r3, r3, #30
 80126f6:	d413      	bmi.n	8012720 <_printf_i+0x204>
 80126f8:	68e0      	ldr	r0, [r4, #12]
 80126fa:	9b03      	ldr	r3, [sp, #12]
 80126fc:	4298      	cmp	r0, r3
 80126fe:	bfb8      	it	lt
 8012700:	4618      	movlt	r0, r3
 8012702:	e7a3      	b.n	801264c <_printf_i+0x130>
 8012704:	2301      	movs	r3, #1
 8012706:	464a      	mov	r2, r9
 8012708:	4639      	mov	r1, r7
 801270a:	4630      	mov	r0, r6
 801270c:	47c0      	blx	r8
 801270e:	3001      	adds	r0, #1
 8012710:	d09a      	beq.n	8012648 <_printf_i+0x12c>
 8012712:	3501      	adds	r5, #1
 8012714:	68e3      	ldr	r3, [r4, #12]
 8012716:	9a03      	ldr	r2, [sp, #12]
 8012718:	1a9b      	subs	r3, r3, r2
 801271a:	42ab      	cmp	r3, r5
 801271c:	dcf2      	bgt.n	8012704 <_printf_i+0x1e8>
 801271e:	e7eb      	b.n	80126f8 <_printf_i+0x1dc>
 8012720:	2500      	movs	r5, #0
 8012722:	f104 0919 	add.w	r9, r4, #25
 8012726:	e7f5      	b.n	8012714 <_printf_i+0x1f8>
 8012728:	2b00      	cmp	r3, #0
 801272a:	d1ac      	bne.n	8012686 <_printf_i+0x16a>
 801272c:	7803      	ldrb	r3, [r0, #0]
 801272e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012732:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012736:	e76c      	b.n	8012612 <_printf_i+0xf6>
 8012738:	080174ec 	.word	0x080174ec
 801273c:	080174fd 	.word	0x080174fd

08012740 <_scanf_float>:
 8012740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012744:	469a      	mov	sl, r3
 8012746:	688b      	ldr	r3, [r1, #8]
 8012748:	4616      	mov	r6, r2
 801274a:	1e5a      	subs	r2, r3, #1
 801274c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8012750:	b087      	sub	sp, #28
 8012752:	bf83      	ittte	hi
 8012754:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8012758:	189b      	addhi	r3, r3, r2
 801275a:	9301      	strhi	r3, [sp, #4]
 801275c:	2300      	movls	r3, #0
 801275e:	bf86      	itte	hi
 8012760:	f240 135d 	movwhi	r3, #349	; 0x15d
 8012764:	608b      	strhi	r3, [r1, #8]
 8012766:	9301      	strls	r3, [sp, #4]
 8012768:	680b      	ldr	r3, [r1, #0]
 801276a:	4688      	mov	r8, r1
 801276c:	f04f 0b00 	mov.w	fp, #0
 8012770:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8012774:	f848 3b1c 	str.w	r3, [r8], #28
 8012778:	e9cd bb03 	strd	fp, fp, [sp, #12]
 801277c:	4607      	mov	r7, r0
 801277e:	460c      	mov	r4, r1
 8012780:	4645      	mov	r5, r8
 8012782:	465a      	mov	r2, fp
 8012784:	46d9      	mov	r9, fp
 8012786:	f8cd b008 	str.w	fp, [sp, #8]
 801278a:	68a1      	ldr	r1, [r4, #8]
 801278c:	b181      	cbz	r1, 80127b0 <_scanf_float+0x70>
 801278e:	6833      	ldr	r3, [r6, #0]
 8012790:	781b      	ldrb	r3, [r3, #0]
 8012792:	2b49      	cmp	r3, #73	; 0x49
 8012794:	d071      	beq.n	801287a <_scanf_float+0x13a>
 8012796:	d84d      	bhi.n	8012834 <_scanf_float+0xf4>
 8012798:	2b39      	cmp	r3, #57	; 0x39
 801279a:	d840      	bhi.n	801281e <_scanf_float+0xde>
 801279c:	2b31      	cmp	r3, #49	; 0x31
 801279e:	f080 8088 	bcs.w	80128b2 <_scanf_float+0x172>
 80127a2:	2b2d      	cmp	r3, #45	; 0x2d
 80127a4:	f000 8090 	beq.w	80128c8 <_scanf_float+0x188>
 80127a8:	d815      	bhi.n	80127d6 <_scanf_float+0x96>
 80127aa:	2b2b      	cmp	r3, #43	; 0x2b
 80127ac:	f000 808c 	beq.w	80128c8 <_scanf_float+0x188>
 80127b0:	f1b9 0f00 	cmp.w	r9, #0
 80127b4:	d003      	beq.n	80127be <_scanf_float+0x7e>
 80127b6:	6823      	ldr	r3, [r4, #0]
 80127b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80127bc:	6023      	str	r3, [r4, #0]
 80127be:	3a01      	subs	r2, #1
 80127c0:	2a01      	cmp	r2, #1
 80127c2:	f200 80ea 	bhi.w	801299a <_scanf_float+0x25a>
 80127c6:	4545      	cmp	r5, r8
 80127c8:	f200 80dc 	bhi.w	8012984 <_scanf_float+0x244>
 80127cc:	2601      	movs	r6, #1
 80127ce:	4630      	mov	r0, r6
 80127d0:	b007      	add	sp, #28
 80127d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80127d6:	2b2e      	cmp	r3, #46	; 0x2e
 80127d8:	f000 809f 	beq.w	801291a <_scanf_float+0x1da>
 80127dc:	2b30      	cmp	r3, #48	; 0x30
 80127de:	d1e7      	bne.n	80127b0 <_scanf_float+0x70>
 80127e0:	6820      	ldr	r0, [r4, #0]
 80127e2:	f410 7f80 	tst.w	r0, #256	; 0x100
 80127e6:	d064      	beq.n	80128b2 <_scanf_float+0x172>
 80127e8:	9b01      	ldr	r3, [sp, #4]
 80127ea:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 80127ee:	6020      	str	r0, [r4, #0]
 80127f0:	f109 0901 	add.w	r9, r9, #1
 80127f4:	b11b      	cbz	r3, 80127fe <_scanf_float+0xbe>
 80127f6:	3b01      	subs	r3, #1
 80127f8:	3101      	adds	r1, #1
 80127fa:	9301      	str	r3, [sp, #4]
 80127fc:	60a1      	str	r1, [r4, #8]
 80127fe:	68a3      	ldr	r3, [r4, #8]
 8012800:	3b01      	subs	r3, #1
 8012802:	60a3      	str	r3, [r4, #8]
 8012804:	6923      	ldr	r3, [r4, #16]
 8012806:	3301      	adds	r3, #1
 8012808:	6123      	str	r3, [r4, #16]
 801280a:	6873      	ldr	r3, [r6, #4]
 801280c:	3b01      	subs	r3, #1
 801280e:	2b00      	cmp	r3, #0
 8012810:	6073      	str	r3, [r6, #4]
 8012812:	f340 80ac 	ble.w	801296e <_scanf_float+0x22e>
 8012816:	6833      	ldr	r3, [r6, #0]
 8012818:	3301      	adds	r3, #1
 801281a:	6033      	str	r3, [r6, #0]
 801281c:	e7b5      	b.n	801278a <_scanf_float+0x4a>
 801281e:	2b45      	cmp	r3, #69	; 0x45
 8012820:	f000 8085 	beq.w	801292e <_scanf_float+0x1ee>
 8012824:	2b46      	cmp	r3, #70	; 0x46
 8012826:	d06a      	beq.n	80128fe <_scanf_float+0x1be>
 8012828:	2b41      	cmp	r3, #65	; 0x41
 801282a:	d1c1      	bne.n	80127b0 <_scanf_float+0x70>
 801282c:	2a01      	cmp	r2, #1
 801282e:	d1bf      	bne.n	80127b0 <_scanf_float+0x70>
 8012830:	2202      	movs	r2, #2
 8012832:	e046      	b.n	80128c2 <_scanf_float+0x182>
 8012834:	2b65      	cmp	r3, #101	; 0x65
 8012836:	d07a      	beq.n	801292e <_scanf_float+0x1ee>
 8012838:	d818      	bhi.n	801286c <_scanf_float+0x12c>
 801283a:	2b54      	cmp	r3, #84	; 0x54
 801283c:	d066      	beq.n	801290c <_scanf_float+0x1cc>
 801283e:	d811      	bhi.n	8012864 <_scanf_float+0x124>
 8012840:	2b4e      	cmp	r3, #78	; 0x4e
 8012842:	d1b5      	bne.n	80127b0 <_scanf_float+0x70>
 8012844:	2a00      	cmp	r2, #0
 8012846:	d146      	bne.n	80128d6 <_scanf_float+0x196>
 8012848:	f1b9 0f00 	cmp.w	r9, #0
 801284c:	d145      	bne.n	80128da <_scanf_float+0x19a>
 801284e:	6821      	ldr	r1, [r4, #0]
 8012850:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8012854:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8012858:	d13f      	bne.n	80128da <_scanf_float+0x19a>
 801285a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 801285e:	6021      	str	r1, [r4, #0]
 8012860:	2201      	movs	r2, #1
 8012862:	e02e      	b.n	80128c2 <_scanf_float+0x182>
 8012864:	2b59      	cmp	r3, #89	; 0x59
 8012866:	d01e      	beq.n	80128a6 <_scanf_float+0x166>
 8012868:	2b61      	cmp	r3, #97	; 0x61
 801286a:	e7de      	b.n	801282a <_scanf_float+0xea>
 801286c:	2b6e      	cmp	r3, #110	; 0x6e
 801286e:	d0e9      	beq.n	8012844 <_scanf_float+0x104>
 8012870:	d815      	bhi.n	801289e <_scanf_float+0x15e>
 8012872:	2b66      	cmp	r3, #102	; 0x66
 8012874:	d043      	beq.n	80128fe <_scanf_float+0x1be>
 8012876:	2b69      	cmp	r3, #105	; 0x69
 8012878:	d19a      	bne.n	80127b0 <_scanf_float+0x70>
 801287a:	f1bb 0f00 	cmp.w	fp, #0
 801287e:	d138      	bne.n	80128f2 <_scanf_float+0x1b2>
 8012880:	f1b9 0f00 	cmp.w	r9, #0
 8012884:	d197      	bne.n	80127b6 <_scanf_float+0x76>
 8012886:	6821      	ldr	r1, [r4, #0]
 8012888:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 801288c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8012890:	d195      	bne.n	80127be <_scanf_float+0x7e>
 8012892:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8012896:	6021      	str	r1, [r4, #0]
 8012898:	f04f 0b01 	mov.w	fp, #1
 801289c:	e011      	b.n	80128c2 <_scanf_float+0x182>
 801289e:	2b74      	cmp	r3, #116	; 0x74
 80128a0:	d034      	beq.n	801290c <_scanf_float+0x1cc>
 80128a2:	2b79      	cmp	r3, #121	; 0x79
 80128a4:	d184      	bne.n	80127b0 <_scanf_float+0x70>
 80128a6:	f1bb 0f07 	cmp.w	fp, #7
 80128aa:	d181      	bne.n	80127b0 <_scanf_float+0x70>
 80128ac:	f04f 0b08 	mov.w	fp, #8
 80128b0:	e007      	b.n	80128c2 <_scanf_float+0x182>
 80128b2:	eb12 0f0b 	cmn.w	r2, fp
 80128b6:	f47f af7b 	bne.w	80127b0 <_scanf_float+0x70>
 80128ba:	6821      	ldr	r1, [r4, #0]
 80128bc:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 80128c0:	6021      	str	r1, [r4, #0]
 80128c2:	702b      	strb	r3, [r5, #0]
 80128c4:	3501      	adds	r5, #1
 80128c6:	e79a      	b.n	80127fe <_scanf_float+0xbe>
 80128c8:	6821      	ldr	r1, [r4, #0]
 80128ca:	0608      	lsls	r0, r1, #24
 80128cc:	f57f af70 	bpl.w	80127b0 <_scanf_float+0x70>
 80128d0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80128d4:	e7f4      	b.n	80128c0 <_scanf_float+0x180>
 80128d6:	2a02      	cmp	r2, #2
 80128d8:	d047      	beq.n	801296a <_scanf_float+0x22a>
 80128da:	f1bb 0f01 	cmp.w	fp, #1
 80128de:	d003      	beq.n	80128e8 <_scanf_float+0x1a8>
 80128e0:	f1bb 0f04 	cmp.w	fp, #4
 80128e4:	f47f af64 	bne.w	80127b0 <_scanf_float+0x70>
 80128e8:	f10b 0b01 	add.w	fp, fp, #1
 80128ec:	fa5f fb8b 	uxtb.w	fp, fp
 80128f0:	e7e7      	b.n	80128c2 <_scanf_float+0x182>
 80128f2:	f1bb 0f03 	cmp.w	fp, #3
 80128f6:	d0f7      	beq.n	80128e8 <_scanf_float+0x1a8>
 80128f8:	f1bb 0f05 	cmp.w	fp, #5
 80128fc:	e7f2      	b.n	80128e4 <_scanf_float+0x1a4>
 80128fe:	f1bb 0f02 	cmp.w	fp, #2
 8012902:	f47f af55 	bne.w	80127b0 <_scanf_float+0x70>
 8012906:	f04f 0b03 	mov.w	fp, #3
 801290a:	e7da      	b.n	80128c2 <_scanf_float+0x182>
 801290c:	f1bb 0f06 	cmp.w	fp, #6
 8012910:	f47f af4e 	bne.w	80127b0 <_scanf_float+0x70>
 8012914:	f04f 0b07 	mov.w	fp, #7
 8012918:	e7d3      	b.n	80128c2 <_scanf_float+0x182>
 801291a:	6821      	ldr	r1, [r4, #0]
 801291c:	0588      	lsls	r0, r1, #22
 801291e:	f57f af47 	bpl.w	80127b0 <_scanf_float+0x70>
 8012922:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8012926:	6021      	str	r1, [r4, #0]
 8012928:	f8cd 9008 	str.w	r9, [sp, #8]
 801292c:	e7c9      	b.n	80128c2 <_scanf_float+0x182>
 801292e:	6821      	ldr	r1, [r4, #0]
 8012930:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8012934:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8012938:	d006      	beq.n	8012948 <_scanf_float+0x208>
 801293a:	0548      	lsls	r0, r1, #21
 801293c:	f57f af38 	bpl.w	80127b0 <_scanf_float+0x70>
 8012940:	f1b9 0f00 	cmp.w	r9, #0
 8012944:	f43f af3b 	beq.w	80127be <_scanf_float+0x7e>
 8012948:	0588      	lsls	r0, r1, #22
 801294a:	bf58      	it	pl
 801294c:	9802      	ldrpl	r0, [sp, #8]
 801294e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8012952:	bf58      	it	pl
 8012954:	eba9 0000 	subpl.w	r0, r9, r0
 8012958:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 801295c:	bf58      	it	pl
 801295e:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8012962:	6021      	str	r1, [r4, #0]
 8012964:	f04f 0900 	mov.w	r9, #0
 8012968:	e7ab      	b.n	80128c2 <_scanf_float+0x182>
 801296a:	2203      	movs	r2, #3
 801296c:	e7a9      	b.n	80128c2 <_scanf_float+0x182>
 801296e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8012972:	9205      	str	r2, [sp, #20]
 8012974:	4631      	mov	r1, r6
 8012976:	4638      	mov	r0, r7
 8012978:	4798      	blx	r3
 801297a:	9a05      	ldr	r2, [sp, #20]
 801297c:	2800      	cmp	r0, #0
 801297e:	f43f af04 	beq.w	801278a <_scanf_float+0x4a>
 8012982:	e715      	b.n	80127b0 <_scanf_float+0x70>
 8012984:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012988:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 801298c:	4632      	mov	r2, r6
 801298e:	4638      	mov	r0, r7
 8012990:	4798      	blx	r3
 8012992:	6923      	ldr	r3, [r4, #16]
 8012994:	3b01      	subs	r3, #1
 8012996:	6123      	str	r3, [r4, #16]
 8012998:	e715      	b.n	80127c6 <_scanf_float+0x86>
 801299a:	f10b 33ff 	add.w	r3, fp, #4294967295
 801299e:	2b06      	cmp	r3, #6
 80129a0:	d80a      	bhi.n	80129b8 <_scanf_float+0x278>
 80129a2:	f1bb 0f02 	cmp.w	fp, #2
 80129a6:	d968      	bls.n	8012a7a <_scanf_float+0x33a>
 80129a8:	f1ab 0b03 	sub.w	fp, fp, #3
 80129ac:	fa5f fb8b 	uxtb.w	fp, fp
 80129b0:	eba5 0b0b 	sub.w	fp, r5, fp
 80129b4:	455d      	cmp	r5, fp
 80129b6:	d14b      	bne.n	8012a50 <_scanf_float+0x310>
 80129b8:	6823      	ldr	r3, [r4, #0]
 80129ba:	05da      	lsls	r2, r3, #23
 80129bc:	d51f      	bpl.n	80129fe <_scanf_float+0x2be>
 80129be:	055b      	lsls	r3, r3, #21
 80129c0:	d468      	bmi.n	8012a94 <_scanf_float+0x354>
 80129c2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80129c6:	6923      	ldr	r3, [r4, #16]
 80129c8:	2965      	cmp	r1, #101	; 0x65
 80129ca:	f103 33ff 	add.w	r3, r3, #4294967295
 80129ce:	f105 3bff 	add.w	fp, r5, #4294967295
 80129d2:	6123      	str	r3, [r4, #16]
 80129d4:	d00d      	beq.n	80129f2 <_scanf_float+0x2b2>
 80129d6:	2945      	cmp	r1, #69	; 0x45
 80129d8:	d00b      	beq.n	80129f2 <_scanf_float+0x2b2>
 80129da:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80129de:	4632      	mov	r2, r6
 80129e0:	4638      	mov	r0, r7
 80129e2:	4798      	blx	r3
 80129e4:	6923      	ldr	r3, [r4, #16]
 80129e6:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 80129ea:	3b01      	subs	r3, #1
 80129ec:	f1a5 0b02 	sub.w	fp, r5, #2
 80129f0:	6123      	str	r3, [r4, #16]
 80129f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80129f6:	4632      	mov	r2, r6
 80129f8:	4638      	mov	r0, r7
 80129fa:	4798      	blx	r3
 80129fc:	465d      	mov	r5, fp
 80129fe:	6826      	ldr	r6, [r4, #0]
 8012a00:	f016 0610 	ands.w	r6, r6, #16
 8012a04:	d17a      	bne.n	8012afc <_scanf_float+0x3bc>
 8012a06:	702e      	strb	r6, [r5, #0]
 8012a08:	6823      	ldr	r3, [r4, #0]
 8012a0a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8012a0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012a12:	d142      	bne.n	8012a9a <_scanf_float+0x35a>
 8012a14:	9b02      	ldr	r3, [sp, #8]
 8012a16:	eba9 0303 	sub.w	r3, r9, r3
 8012a1a:	425a      	negs	r2, r3
 8012a1c:	2b00      	cmp	r3, #0
 8012a1e:	d149      	bne.n	8012ab4 <_scanf_float+0x374>
 8012a20:	2200      	movs	r2, #0
 8012a22:	4641      	mov	r1, r8
 8012a24:	4638      	mov	r0, r7
 8012a26:	f000 ffdf 	bl	80139e8 <_strtod_r>
 8012a2a:	6825      	ldr	r5, [r4, #0]
 8012a2c:	f8da 3000 	ldr.w	r3, [sl]
 8012a30:	f015 0f02 	tst.w	r5, #2
 8012a34:	f103 0204 	add.w	r2, r3, #4
 8012a38:	ec59 8b10 	vmov	r8, r9, d0
 8012a3c:	f8ca 2000 	str.w	r2, [sl]
 8012a40:	d043      	beq.n	8012aca <_scanf_float+0x38a>
 8012a42:	681b      	ldr	r3, [r3, #0]
 8012a44:	e9c3 8900 	strd	r8, r9, [r3]
 8012a48:	68e3      	ldr	r3, [r4, #12]
 8012a4a:	3301      	adds	r3, #1
 8012a4c:	60e3      	str	r3, [r4, #12]
 8012a4e:	e6be      	b.n	80127ce <_scanf_float+0x8e>
 8012a50:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012a54:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8012a58:	4632      	mov	r2, r6
 8012a5a:	4638      	mov	r0, r7
 8012a5c:	4798      	blx	r3
 8012a5e:	6923      	ldr	r3, [r4, #16]
 8012a60:	3b01      	subs	r3, #1
 8012a62:	6123      	str	r3, [r4, #16]
 8012a64:	e7a6      	b.n	80129b4 <_scanf_float+0x274>
 8012a66:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012a6a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8012a6e:	4632      	mov	r2, r6
 8012a70:	4638      	mov	r0, r7
 8012a72:	4798      	blx	r3
 8012a74:	6923      	ldr	r3, [r4, #16]
 8012a76:	3b01      	subs	r3, #1
 8012a78:	6123      	str	r3, [r4, #16]
 8012a7a:	4545      	cmp	r5, r8
 8012a7c:	d8f3      	bhi.n	8012a66 <_scanf_float+0x326>
 8012a7e:	e6a5      	b.n	80127cc <_scanf_float+0x8c>
 8012a80:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8012a84:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8012a88:	4632      	mov	r2, r6
 8012a8a:	4638      	mov	r0, r7
 8012a8c:	4798      	blx	r3
 8012a8e:	6923      	ldr	r3, [r4, #16]
 8012a90:	3b01      	subs	r3, #1
 8012a92:	6123      	str	r3, [r4, #16]
 8012a94:	4545      	cmp	r5, r8
 8012a96:	d8f3      	bhi.n	8012a80 <_scanf_float+0x340>
 8012a98:	e698      	b.n	80127cc <_scanf_float+0x8c>
 8012a9a:	9b03      	ldr	r3, [sp, #12]
 8012a9c:	2b00      	cmp	r3, #0
 8012a9e:	d0bf      	beq.n	8012a20 <_scanf_float+0x2e0>
 8012aa0:	9904      	ldr	r1, [sp, #16]
 8012aa2:	230a      	movs	r3, #10
 8012aa4:	4632      	mov	r2, r6
 8012aa6:	3101      	adds	r1, #1
 8012aa8:	4638      	mov	r0, r7
 8012aaa:	f001 f829 	bl	8013b00 <_strtol_r>
 8012aae:	9b03      	ldr	r3, [sp, #12]
 8012ab0:	9d04      	ldr	r5, [sp, #16]
 8012ab2:	1ac2      	subs	r2, r0, r3
 8012ab4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8012ab8:	429d      	cmp	r5, r3
 8012aba:	bf28      	it	cs
 8012abc:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8012ac0:	490f      	ldr	r1, [pc, #60]	; (8012b00 <_scanf_float+0x3c0>)
 8012ac2:	4628      	mov	r0, r5
 8012ac4:	f000 f8e8 	bl	8012c98 <siprintf>
 8012ac8:	e7aa      	b.n	8012a20 <_scanf_float+0x2e0>
 8012aca:	f015 0504 	ands.w	r5, r5, #4
 8012ace:	d1b8      	bne.n	8012a42 <_scanf_float+0x302>
 8012ad0:	681f      	ldr	r7, [r3, #0]
 8012ad2:	ee10 2a10 	vmov	r2, s0
 8012ad6:	464b      	mov	r3, r9
 8012ad8:	ee10 0a10 	vmov	r0, s0
 8012adc:	4649      	mov	r1, r9
 8012ade:	f7ee f83d 	bl	8000b5c <__aeabi_dcmpun>
 8012ae2:	b128      	cbz	r0, 8012af0 <_scanf_float+0x3b0>
 8012ae4:	4628      	mov	r0, r5
 8012ae6:	f000 f89d 	bl	8012c24 <nanf>
 8012aea:	ed87 0a00 	vstr	s0, [r7]
 8012aee:	e7ab      	b.n	8012a48 <_scanf_float+0x308>
 8012af0:	4640      	mov	r0, r8
 8012af2:	4649      	mov	r1, r9
 8012af4:	f7ee f890 	bl	8000c18 <__aeabi_d2f>
 8012af8:	6038      	str	r0, [r7, #0]
 8012afa:	e7a5      	b.n	8012a48 <_scanf_float+0x308>
 8012afc:	2600      	movs	r6, #0
 8012afe:	e666      	b.n	80127ce <_scanf_float+0x8e>
 8012b00:	0801750e 	.word	0x0801750e

08012b04 <iprintf>:
 8012b04:	b40f      	push	{r0, r1, r2, r3}
 8012b06:	4b0a      	ldr	r3, [pc, #40]	; (8012b30 <iprintf+0x2c>)
 8012b08:	b513      	push	{r0, r1, r4, lr}
 8012b0a:	681c      	ldr	r4, [r3, #0]
 8012b0c:	b124      	cbz	r4, 8012b18 <iprintf+0x14>
 8012b0e:	69a3      	ldr	r3, [r4, #24]
 8012b10:	b913      	cbnz	r3, 8012b18 <iprintf+0x14>
 8012b12:	4620      	mov	r0, r4
 8012b14:	f002 f83c 	bl	8014b90 <__sinit>
 8012b18:	ab05      	add	r3, sp, #20
 8012b1a:	9a04      	ldr	r2, [sp, #16]
 8012b1c:	68a1      	ldr	r1, [r4, #8]
 8012b1e:	9301      	str	r3, [sp, #4]
 8012b20:	4620      	mov	r0, r4
 8012b22:	f003 fc7d 	bl	8016420 <_vfiprintf_r>
 8012b26:	b002      	add	sp, #8
 8012b28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012b2c:	b004      	add	sp, #16
 8012b2e:	4770      	bx	lr
 8012b30:	2000000c 	.word	0x2000000c

08012b34 <putchar>:
 8012b34:	b538      	push	{r3, r4, r5, lr}
 8012b36:	4b08      	ldr	r3, [pc, #32]	; (8012b58 <putchar+0x24>)
 8012b38:	681c      	ldr	r4, [r3, #0]
 8012b3a:	4605      	mov	r5, r0
 8012b3c:	b124      	cbz	r4, 8012b48 <putchar+0x14>
 8012b3e:	69a3      	ldr	r3, [r4, #24]
 8012b40:	b913      	cbnz	r3, 8012b48 <putchar+0x14>
 8012b42:	4620      	mov	r0, r4
 8012b44:	f002 f824 	bl	8014b90 <__sinit>
 8012b48:	68a2      	ldr	r2, [r4, #8]
 8012b4a:	4629      	mov	r1, r5
 8012b4c:	4620      	mov	r0, r4
 8012b4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012b52:	f003 bed3 	b.w	80168fc <_putc_r>
 8012b56:	bf00      	nop
 8012b58:	2000000c 	.word	0x2000000c

08012b5c <_puts_r>:
 8012b5c:	b570      	push	{r4, r5, r6, lr}
 8012b5e:	460e      	mov	r6, r1
 8012b60:	4605      	mov	r5, r0
 8012b62:	b118      	cbz	r0, 8012b6c <_puts_r+0x10>
 8012b64:	6983      	ldr	r3, [r0, #24]
 8012b66:	b90b      	cbnz	r3, 8012b6c <_puts_r+0x10>
 8012b68:	f002 f812 	bl	8014b90 <__sinit>
 8012b6c:	69ab      	ldr	r3, [r5, #24]
 8012b6e:	68ac      	ldr	r4, [r5, #8]
 8012b70:	b913      	cbnz	r3, 8012b78 <_puts_r+0x1c>
 8012b72:	4628      	mov	r0, r5
 8012b74:	f002 f80c 	bl	8014b90 <__sinit>
 8012b78:	4b23      	ldr	r3, [pc, #140]	; (8012c08 <_puts_r+0xac>)
 8012b7a:	429c      	cmp	r4, r3
 8012b7c:	d117      	bne.n	8012bae <_puts_r+0x52>
 8012b7e:	686c      	ldr	r4, [r5, #4]
 8012b80:	89a3      	ldrh	r3, [r4, #12]
 8012b82:	071b      	lsls	r3, r3, #28
 8012b84:	d51d      	bpl.n	8012bc2 <_puts_r+0x66>
 8012b86:	6923      	ldr	r3, [r4, #16]
 8012b88:	b1db      	cbz	r3, 8012bc2 <_puts_r+0x66>
 8012b8a:	3e01      	subs	r6, #1
 8012b8c:	68a3      	ldr	r3, [r4, #8]
 8012b8e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8012b92:	3b01      	subs	r3, #1
 8012b94:	60a3      	str	r3, [r4, #8]
 8012b96:	b9e9      	cbnz	r1, 8012bd4 <_puts_r+0x78>
 8012b98:	2b00      	cmp	r3, #0
 8012b9a:	da2e      	bge.n	8012bfa <_puts_r+0x9e>
 8012b9c:	4622      	mov	r2, r4
 8012b9e:	210a      	movs	r1, #10
 8012ba0:	4628      	mov	r0, r5
 8012ba2:	f000 ffdf 	bl	8013b64 <__swbuf_r>
 8012ba6:	3001      	adds	r0, #1
 8012ba8:	d011      	beq.n	8012bce <_puts_r+0x72>
 8012baa:	200a      	movs	r0, #10
 8012bac:	e011      	b.n	8012bd2 <_puts_r+0x76>
 8012bae:	4b17      	ldr	r3, [pc, #92]	; (8012c0c <_puts_r+0xb0>)
 8012bb0:	429c      	cmp	r4, r3
 8012bb2:	d101      	bne.n	8012bb8 <_puts_r+0x5c>
 8012bb4:	68ac      	ldr	r4, [r5, #8]
 8012bb6:	e7e3      	b.n	8012b80 <_puts_r+0x24>
 8012bb8:	4b15      	ldr	r3, [pc, #84]	; (8012c10 <_puts_r+0xb4>)
 8012bba:	429c      	cmp	r4, r3
 8012bbc:	bf08      	it	eq
 8012bbe:	68ec      	ldreq	r4, [r5, #12]
 8012bc0:	e7de      	b.n	8012b80 <_puts_r+0x24>
 8012bc2:	4621      	mov	r1, r4
 8012bc4:	4628      	mov	r0, r5
 8012bc6:	f001 f831 	bl	8013c2c <__swsetup_r>
 8012bca:	2800      	cmp	r0, #0
 8012bcc:	d0dd      	beq.n	8012b8a <_puts_r+0x2e>
 8012bce:	f04f 30ff 	mov.w	r0, #4294967295
 8012bd2:	bd70      	pop	{r4, r5, r6, pc}
 8012bd4:	2b00      	cmp	r3, #0
 8012bd6:	da04      	bge.n	8012be2 <_puts_r+0x86>
 8012bd8:	69a2      	ldr	r2, [r4, #24]
 8012bda:	429a      	cmp	r2, r3
 8012bdc:	dc06      	bgt.n	8012bec <_puts_r+0x90>
 8012bde:	290a      	cmp	r1, #10
 8012be0:	d004      	beq.n	8012bec <_puts_r+0x90>
 8012be2:	6823      	ldr	r3, [r4, #0]
 8012be4:	1c5a      	adds	r2, r3, #1
 8012be6:	6022      	str	r2, [r4, #0]
 8012be8:	7019      	strb	r1, [r3, #0]
 8012bea:	e7cf      	b.n	8012b8c <_puts_r+0x30>
 8012bec:	4622      	mov	r2, r4
 8012bee:	4628      	mov	r0, r5
 8012bf0:	f000 ffb8 	bl	8013b64 <__swbuf_r>
 8012bf4:	3001      	adds	r0, #1
 8012bf6:	d1c9      	bne.n	8012b8c <_puts_r+0x30>
 8012bf8:	e7e9      	b.n	8012bce <_puts_r+0x72>
 8012bfa:	6823      	ldr	r3, [r4, #0]
 8012bfc:	200a      	movs	r0, #10
 8012bfe:	1c5a      	adds	r2, r3, #1
 8012c00:	6022      	str	r2, [r4, #0]
 8012c02:	7018      	strb	r0, [r3, #0]
 8012c04:	e7e5      	b.n	8012bd2 <_puts_r+0x76>
 8012c06:	bf00      	nop
 8012c08:	08017598 	.word	0x08017598
 8012c0c:	080175b8 	.word	0x080175b8
 8012c10:	08017578 	.word	0x08017578

08012c14 <puts>:
 8012c14:	4b02      	ldr	r3, [pc, #8]	; (8012c20 <puts+0xc>)
 8012c16:	4601      	mov	r1, r0
 8012c18:	6818      	ldr	r0, [r3, #0]
 8012c1a:	f7ff bf9f 	b.w	8012b5c <_puts_r>
 8012c1e:	bf00      	nop
 8012c20:	2000000c 	.word	0x2000000c

08012c24 <nanf>:
 8012c24:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8012c2c <nanf+0x8>
 8012c28:	4770      	bx	lr
 8012c2a:	bf00      	nop
 8012c2c:	7fc00000 	.word	0x7fc00000

08012c30 <sniprintf>:
 8012c30:	b40c      	push	{r2, r3}
 8012c32:	b530      	push	{r4, r5, lr}
 8012c34:	4b17      	ldr	r3, [pc, #92]	; (8012c94 <sniprintf+0x64>)
 8012c36:	1e0c      	subs	r4, r1, #0
 8012c38:	b09d      	sub	sp, #116	; 0x74
 8012c3a:	681d      	ldr	r5, [r3, #0]
 8012c3c:	da08      	bge.n	8012c50 <sniprintf+0x20>
 8012c3e:	238b      	movs	r3, #139	; 0x8b
 8012c40:	602b      	str	r3, [r5, #0]
 8012c42:	f04f 30ff 	mov.w	r0, #4294967295
 8012c46:	b01d      	add	sp, #116	; 0x74
 8012c48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012c4c:	b002      	add	sp, #8
 8012c4e:	4770      	bx	lr
 8012c50:	f44f 7302 	mov.w	r3, #520	; 0x208
 8012c54:	f8ad 3014 	strh.w	r3, [sp, #20]
 8012c58:	bf14      	ite	ne
 8012c5a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8012c5e:	4623      	moveq	r3, r4
 8012c60:	9304      	str	r3, [sp, #16]
 8012c62:	9307      	str	r3, [sp, #28]
 8012c64:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012c68:	9002      	str	r0, [sp, #8]
 8012c6a:	9006      	str	r0, [sp, #24]
 8012c6c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8012c70:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8012c72:	ab21      	add	r3, sp, #132	; 0x84
 8012c74:	a902      	add	r1, sp, #8
 8012c76:	4628      	mov	r0, r5
 8012c78:	9301      	str	r3, [sp, #4]
 8012c7a:	f003 f905 	bl	8015e88 <_svfiprintf_r>
 8012c7e:	1c43      	adds	r3, r0, #1
 8012c80:	bfbc      	itt	lt
 8012c82:	238b      	movlt	r3, #139	; 0x8b
 8012c84:	602b      	strlt	r3, [r5, #0]
 8012c86:	2c00      	cmp	r4, #0
 8012c88:	d0dd      	beq.n	8012c46 <sniprintf+0x16>
 8012c8a:	9b02      	ldr	r3, [sp, #8]
 8012c8c:	2200      	movs	r2, #0
 8012c8e:	701a      	strb	r2, [r3, #0]
 8012c90:	e7d9      	b.n	8012c46 <sniprintf+0x16>
 8012c92:	bf00      	nop
 8012c94:	2000000c 	.word	0x2000000c

08012c98 <siprintf>:
 8012c98:	b40e      	push	{r1, r2, r3}
 8012c9a:	b500      	push	{lr}
 8012c9c:	b09c      	sub	sp, #112	; 0x70
 8012c9e:	ab1d      	add	r3, sp, #116	; 0x74
 8012ca0:	9002      	str	r0, [sp, #8]
 8012ca2:	9006      	str	r0, [sp, #24]
 8012ca4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8012ca8:	4809      	ldr	r0, [pc, #36]	; (8012cd0 <siprintf+0x38>)
 8012caa:	9107      	str	r1, [sp, #28]
 8012cac:	9104      	str	r1, [sp, #16]
 8012cae:	4909      	ldr	r1, [pc, #36]	; (8012cd4 <siprintf+0x3c>)
 8012cb0:	f853 2b04 	ldr.w	r2, [r3], #4
 8012cb4:	9105      	str	r1, [sp, #20]
 8012cb6:	6800      	ldr	r0, [r0, #0]
 8012cb8:	9301      	str	r3, [sp, #4]
 8012cba:	a902      	add	r1, sp, #8
 8012cbc:	f003 f8e4 	bl	8015e88 <_svfiprintf_r>
 8012cc0:	9b02      	ldr	r3, [sp, #8]
 8012cc2:	2200      	movs	r2, #0
 8012cc4:	701a      	strb	r2, [r3, #0]
 8012cc6:	b01c      	add	sp, #112	; 0x70
 8012cc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8012ccc:	b003      	add	sp, #12
 8012cce:	4770      	bx	lr
 8012cd0:	2000000c 	.word	0x2000000c
 8012cd4:	ffff0208 	.word	0xffff0208

08012cd8 <siscanf>:
 8012cd8:	b40e      	push	{r1, r2, r3}
 8012cda:	b530      	push	{r4, r5, lr}
 8012cdc:	b09c      	sub	sp, #112	; 0x70
 8012cde:	ac1f      	add	r4, sp, #124	; 0x7c
 8012ce0:	f44f 7201 	mov.w	r2, #516	; 0x204
 8012ce4:	f854 5b04 	ldr.w	r5, [r4], #4
 8012ce8:	f8ad 2014 	strh.w	r2, [sp, #20]
 8012cec:	9002      	str	r0, [sp, #8]
 8012cee:	9006      	str	r0, [sp, #24]
 8012cf0:	f7ed fa86 	bl	8000200 <strlen>
 8012cf4:	4b0b      	ldr	r3, [pc, #44]	; (8012d24 <siscanf+0x4c>)
 8012cf6:	9003      	str	r0, [sp, #12]
 8012cf8:	9007      	str	r0, [sp, #28]
 8012cfa:	930b      	str	r3, [sp, #44]	; 0x2c
 8012cfc:	480a      	ldr	r0, [pc, #40]	; (8012d28 <siscanf+0x50>)
 8012cfe:	9401      	str	r4, [sp, #4]
 8012d00:	2300      	movs	r3, #0
 8012d02:	930f      	str	r3, [sp, #60]	; 0x3c
 8012d04:	9314      	str	r3, [sp, #80]	; 0x50
 8012d06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012d0a:	f8ad 3016 	strh.w	r3, [sp, #22]
 8012d0e:	462a      	mov	r2, r5
 8012d10:	4623      	mov	r3, r4
 8012d12:	a902      	add	r1, sp, #8
 8012d14:	6800      	ldr	r0, [r0, #0]
 8012d16:	f003 fa09 	bl	801612c <__ssvfiscanf_r>
 8012d1a:	b01c      	add	sp, #112	; 0x70
 8012d1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012d20:	b003      	add	sp, #12
 8012d22:	4770      	bx	lr
 8012d24:	08012d4f 	.word	0x08012d4f
 8012d28:	2000000c 	.word	0x2000000c

08012d2c <__sread>:
 8012d2c:	b510      	push	{r4, lr}
 8012d2e:	460c      	mov	r4, r1
 8012d30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012d34:	f003 fe18 	bl	8016968 <_read_r>
 8012d38:	2800      	cmp	r0, #0
 8012d3a:	bfab      	itete	ge
 8012d3c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012d3e:	89a3      	ldrhlt	r3, [r4, #12]
 8012d40:	181b      	addge	r3, r3, r0
 8012d42:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012d46:	bfac      	ite	ge
 8012d48:	6563      	strge	r3, [r4, #84]	; 0x54
 8012d4a:	81a3      	strhlt	r3, [r4, #12]
 8012d4c:	bd10      	pop	{r4, pc}

08012d4e <__seofread>:
 8012d4e:	2000      	movs	r0, #0
 8012d50:	4770      	bx	lr

08012d52 <__swrite>:
 8012d52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d56:	461f      	mov	r7, r3
 8012d58:	898b      	ldrh	r3, [r1, #12]
 8012d5a:	05db      	lsls	r3, r3, #23
 8012d5c:	4605      	mov	r5, r0
 8012d5e:	460c      	mov	r4, r1
 8012d60:	4616      	mov	r6, r2
 8012d62:	d505      	bpl.n	8012d70 <__swrite+0x1e>
 8012d64:	2302      	movs	r3, #2
 8012d66:	2200      	movs	r2, #0
 8012d68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012d6c:	f002 fae2 	bl	8015334 <_lseek_r>
 8012d70:	89a3      	ldrh	r3, [r4, #12]
 8012d72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012d76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012d7a:	81a3      	strh	r3, [r4, #12]
 8012d7c:	4632      	mov	r2, r6
 8012d7e:	463b      	mov	r3, r7
 8012d80:	4628      	mov	r0, r5
 8012d82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012d86:	f000 bf3f 	b.w	8013c08 <_write_r>

08012d8a <__sseek>:
 8012d8a:	b510      	push	{r4, lr}
 8012d8c:	460c      	mov	r4, r1
 8012d8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012d92:	f002 facf 	bl	8015334 <_lseek_r>
 8012d96:	1c43      	adds	r3, r0, #1
 8012d98:	89a3      	ldrh	r3, [r4, #12]
 8012d9a:	bf15      	itete	ne
 8012d9c:	6560      	strne	r0, [r4, #84]	; 0x54
 8012d9e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012da2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012da6:	81a3      	strheq	r3, [r4, #12]
 8012da8:	bf18      	it	ne
 8012daa:	81a3      	strhne	r3, [r4, #12]
 8012dac:	bd10      	pop	{r4, pc}

08012dae <__sclose>:
 8012dae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012db2:	f000 bfa9 	b.w	8013d08 <_close_r>

08012db6 <strcpy>:
 8012db6:	4603      	mov	r3, r0
 8012db8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012dbc:	f803 2b01 	strb.w	r2, [r3], #1
 8012dc0:	2a00      	cmp	r2, #0
 8012dc2:	d1f9      	bne.n	8012db8 <strcpy+0x2>
 8012dc4:	4770      	bx	lr

08012dc6 <sulp>:
 8012dc6:	b570      	push	{r4, r5, r6, lr}
 8012dc8:	4604      	mov	r4, r0
 8012dca:	460d      	mov	r5, r1
 8012dcc:	ec45 4b10 	vmov	d0, r4, r5
 8012dd0:	4616      	mov	r6, r2
 8012dd2:	f002 fe15 	bl	8015a00 <__ulp>
 8012dd6:	ec51 0b10 	vmov	r0, r1, d0
 8012dda:	b17e      	cbz	r6, 8012dfc <sulp+0x36>
 8012ddc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8012de0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	dd09      	ble.n	8012dfc <sulp+0x36>
 8012de8:	051b      	lsls	r3, r3, #20
 8012dea:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8012dee:	2400      	movs	r4, #0
 8012df0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8012df4:	4622      	mov	r2, r4
 8012df6:	462b      	mov	r3, r5
 8012df8:	f7ed fc16 	bl	8000628 <__aeabi_dmul>
 8012dfc:	bd70      	pop	{r4, r5, r6, pc}
	...

08012e00 <_strtod_l>:
 8012e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e04:	461f      	mov	r7, r3
 8012e06:	b0a1      	sub	sp, #132	; 0x84
 8012e08:	2300      	movs	r3, #0
 8012e0a:	4681      	mov	r9, r0
 8012e0c:	4638      	mov	r0, r7
 8012e0e:	460e      	mov	r6, r1
 8012e10:	9217      	str	r2, [sp, #92]	; 0x5c
 8012e12:	931c      	str	r3, [sp, #112]	; 0x70
 8012e14:	f002 fa7e 	bl	8015314 <__localeconv_l>
 8012e18:	4680      	mov	r8, r0
 8012e1a:	6800      	ldr	r0, [r0, #0]
 8012e1c:	f7ed f9f0 	bl	8000200 <strlen>
 8012e20:	f04f 0a00 	mov.w	sl, #0
 8012e24:	4604      	mov	r4, r0
 8012e26:	f04f 0b00 	mov.w	fp, #0
 8012e2a:	961b      	str	r6, [sp, #108]	; 0x6c
 8012e2c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012e2e:	781a      	ldrb	r2, [r3, #0]
 8012e30:	2a0d      	cmp	r2, #13
 8012e32:	d832      	bhi.n	8012e9a <_strtod_l+0x9a>
 8012e34:	2a09      	cmp	r2, #9
 8012e36:	d236      	bcs.n	8012ea6 <_strtod_l+0xa6>
 8012e38:	2a00      	cmp	r2, #0
 8012e3a:	d03e      	beq.n	8012eba <_strtod_l+0xba>
 8012e3c:	2300      	movs	r3, #0
 8012e3e:	930d      	str	r3, [sp, #52]	; 0x34
 8012e40:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8012e42:	782b      	ldrb	r3, [r5, #0]
 8012e44:	2b30      	cmp	r3, #48	; 0x30
 8012e46:	f040 80ac 	bne.w	8012fa2 <_strtod_l+0x1a2>
 8012e4a:	786b      	ldrb	r3, [r5, #1]
 8012e4c:	2b58      	cmp	r3, #88	; 0x58
 8012e4e:	d001      	beq.n	8012e54 <_strtod_l+0x54>
 8012e50:	2b78      	cmp	r3, #120	; 0x78
 8012e52:	d167      	bne.n	8012f24 <_strtod_l+0x124>
 8012e54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012e56:	9301      	str	r3, [sp, #4]
 8012e58:	ab1c      	add	r3, sp, #112	; 0x70
 8012e5a:	9300      	str	r3, [sp, #0]
 8012e5c:	9702      	str	r7, [sp, #8]
 8012e5e:	ab1d      	add	r3, sp, #116	; 0x74
 8012e60:	4a88      	ldr	r2, [pc, #544]	; (8013084 <_strtod_l+0x284>)
 8012e62:	a91b      	add	r1, sp, #108	; 0x6c
 8012e64:	4648      	mov	r0, r9
 8012e66:	f001 ff6c 	bl	8014d42 <__gethex>
 8012e6a:	f010 0407 	ands.w	r4, r0, #7
 8012e6e:	4606      	mov	r6, r0
 8012e70:	d005      	beq.n	8012e7e <_strtod_l+0x7e>
 8012e72:	2c06      	cmp	r4, #6
 8012e74:	d12b      	bne.n	8012ece <_strtod_l+0xce>
 8012e76:	3501      	adds	r5, #1
 8012e78:	2300      	movs	r3, #0
 8012e7a:	951b      	str	r5, [sp, #108]	; 0x6c
 8012e7c:	930d      	str	r3, [sp, #52]	; 0x34
 8012e7e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	f040 859a 	bne.w	80139ba <_strtod_l+0xbba>
 8012e86:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012e88:	b1e3      	cbz	r3, 8012ec4 <_strtod_l+0xc4>
 8012e8a:	4652      	mov	r2, sl
 8012e8c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8012e90:	ec43 2b10 	vmov	d0, r2, r3
 8012e94:	b021      	add	sp, #132	; 0x84
 8012e96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e9a:	2a2b      	cmp	r2, #43	; 0x2b
 8012e9c:	d015      	beq.n	8012eca <_strtod_l+0xca>
 8012e9e:	2a2d      	cmp	r2, #45	; 0x2d
 8012ea0:	d004      	beq.n	8012eac <_strtod_l+0xac>
 8012ea2:	2a20      	cmp	r2, #32
 8012ea4:	d1ca      	bne.n	8012e3c <_strtod_l+0x3c>
 8012ea6:	3301      	adds	r3, #1
 8012ea8:	931b      	str	r3, [sp, #108]	; 0x6c
 8012eaa:	e7bf      	b.n	8012e2c <_strtod_l+0x2c>
 8012eac:	2201      	movs	r2, #1
 8012eae:	920d      	str	r2, [sp, #52]	; 0x34
 8012eb0:	1c5a      	adds	r2, r3, #1
 8012eb2:	921b      	str	r2, [sp, #108]	; 0x6c
 8012eb4:	785b      	ldrb	r3, [r3, #1]
 8012eb6:	2b00      	cmp	r3, #0
 8012eb8:	d1c2      	bne.n	8012e40 <_strtod_l+0x40>
 8012eba:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8012ebc:	961b      	str	r6, [sp, #108]	; 0x6c
 8012ebe:	2b00      	cmp	r3, #0
 8012ec0:	f040 8579 	bne.w	80139b6 <_strtod_l+0xbb6>
 8012ec4:	4652      	mov	r2, sl
 8012ec6:	465b      	mov	r3, fp
 8012ec8:	e7e2      	b.n	8012e90 <_strtod_l+0x90>
 8012eca:	2200      	movs	r2, #0
 8012ecc:	e7ef      	b.n	8012eae <_strtod_l+0xae>
 8012ece:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8012ed0:	b13a      	cbz	r2, 8012ee2 <_strtod_l+0xe2>
 8012ed2:	2135      	movs	r1, #53	; 0x35
 8012ed4:	a81e      	add	r0, sp, #120	; 0x78
 8012ed6:	f002 fe8b 	bl	8015bf0 <__copybits>
 8012eda:	991c      	ldr	r1, [sp, #112]	; 0x70
 8012edc:	4648      	mov	r0, r9
 8012ede:	f002 faf8 	bl	80154d2 <_Bfree>
 8012ee2:	3c01      	subs	r4, #1
 8012ee4:	2c04      	cmp	r4, #4
 8012ee6:	d806      	bhi.n	8012ef6 <_strtod_l+0xf6>
 8012ee8:	e8df f004 	tbb	[pc, r4]
 8012eec:	1714030a 	.word	0x1714030a
 8012ef0:	0a          	.byte	0x0a
 8012ef1:	00          	.byte	0x00
 8012ef2:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8012ef6:	0730      	lsls	r0, r6, #28
 8012ef8:	d5c1      	bpl.n	8012e7e <_strtod_l+0x7e>
 8012efa:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8012efe:	e7be      	b.n	8012e7e <_strtod_l+0x7e>
 8012f00:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8012f04:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8012f06:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8012f0a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8012f0e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8012f12:	e7f0      	b.n	8012ef6 <_strtod_l+0xf6>
 8012f14:	f8df b170 	ldr.w	fp, [pc, #368]	; 8013088 <_strtod_l+0x288>
 8012f18:	e7ed      	b.n	8012ef6 <_strtod_l+0xf6>
 8012f1a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8012f1e:	f04f 3aff 	mov.w	sl, #4294967295
 8012f22:	e7e8      	b.n	8012ef6 <_strtod_l+0xf6>
 8012f24:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012f26:	1c5a      	adds	r2, r3, #1
 8012f28:	921b      	str	r2, [sp, #108]	; 0x6c
 8012f2a:	785b      	ldrb	r3, [r3, #1]
 8012f2c:	2b30      	cmp	r3, #48	; 0x30
 8012f2e:	d0f9      	beq.n	8012f24 <_strtod_l+0x124>
 8012f30:	2b00      	cmp	r3, #0
 8012f32:	d0a4      	beq.n	8012e7e <_strtod_l+0x7e>
 8012f34:	2301      	movs	r3, #1
 8012f36:	2500      	movs	r5, #0
 8012f38:	9306      	str	r3, [sp, #24]
 8012f3a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012f3c:	9308      	str	r3, [sp, #32]
 8012f3e:	9507      	str	r5, [sp, #28]
 8012f40:	9505      	str	r5, [sp, #20]
 8012f42:	220a      	movs	r2, #10
 8012f44:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8012f46:	7807      	ldrb	r7, [r0, #0]
 8012f48:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8012f4c:	b2d9      	uxtb	r1, r3
 8012f4e:	2909      	cmp	r1, #9
 8012f50:	d929      	bls.n	8012fa6 <_strtod_l+0x1a6>
 8012f52:	4622      	mov	r2, r4
 8012f54:	f8d8 1000 	ldr.w	r1, [r8]
 8012f58:	f003 fd5a 	bl	8016a10 <strncmp>
 8012f5c:	2800      	cmp	r0, #0
 8012f5e:	d031      	beq.n	8012fc4 <_strtod_l+0x1c4>
 8012f60:	2000      	movs	r0, #0
 8012f62:	9c05      	ldr	r4, [sp, #20]
 8012f64:	9004      	str	r0, [sp, #16]
 8012f66:	463b      	mov	r3, r7
 8012f68:	4602      	mov	r2, r0
 8012f6a:	2b65      	cmp	r3, #101	; 0x65
 8012f6c:	d001      	beq.n	8012f72 <_strtod_l+0x172>
 8012f6e:	2b45      	cmp	r3, #69	; 0x45
 8012f70:	d114      	bne.n	8012f9c <_strtod_l+0x19c>
 8012f72:	b924      	cbnz	r4, 8012f7e <_strtod_l+0x17e>
 8012f74:	b910      	cbnz	r0, 8012f7c <_strtod_l+0x17c>
 8012f76:	9b06      	ldr	r3, [sp, #24]
 8012f78:	2b00      	cmp	r3, #0
 8012f7a:	d09e      	beq.n	8012eba <_strtod_l+0xba>
 8012f7c:	2400      	movs	r4, #0
 8012f7e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8012f80:	1c73      	adds	r3, r6, #1
 8012f82:	931b      	str	r3, [sp, #108]	; 0x6c
 8012f84:	7873      	ldrb	r3, [r6, #1]
 8012f86:	2b2b      	cmp	r3, #43	; 0x2b
 8012f88:	d078      	beq.n	801307c <_strtod_l+0x27c>
 8012f8a:	2b2d      	cmp	r3, #45	; 0x2d
 8012f8c:	d070      	beq.n	8013070 <_strtod_l+0x270>
 8012f8e:	f04f 0c00 	mov.w	ip, #0
 8012f92:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8012f96:	2f09      	cmp	r7, #9
 8012f98:	d97c      	bls.n	8013094 <_strtod_l+0x294>
 8012f9a:	961b      	str	r6, [sp, #108]	; 0x6c
 8012f9c:	f04f 0e00 	mov.w	lr, #0
 8012fa0:	e09a      	b.n	80130d8 <_strtod_l+0x2d8>
 8012fa2:	2300      	movs	r3, #0
 8012fa4:	e7c7      	b.n	8012f36 <_strtod_l+0x136>
 8012fa6:	9905      	ldr	r1, [sp, #20]
 8012fa8:	2908      	cmp	r1, #8
 8012faa:	bfdd      	ittte	le
 8012fac:	9907      	ldrle	r1, [sp, #28]
 8012fae:	fb02 3301 	mlale	r3, r2, r1, r3
 8012fb2:	9307      	strle	r3, [sp, #28]
 8012fb4:	fb02 3505 	mlagt	r5, r2, r5, r3
 8012fb8:	9b05      	ldr	r3, [sp, #20]
 8012fba:	3001      	adds	r0, #1
 8012fbc:	3301      	adds	r3, #1
 8012fbe:	9305      	str	r3, [sp, #20]
 8012fc0:	901b      	str	r0, [sp, #108]	; 0x6c
 8012fc2:	e7bf      	b.n	8012f44 <_strtod_l+0x144>
 8012fc4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012fc6:	191a      	adds	r2, r3, r4
 8012fc8:	921b      	str	r2, [sp, #108]	; 0x6c
 8012fca:	9a05      	ldr	r2, [sp, #20]
 8012fcc:	5d1b      	ldrb	r3, [r3, r4]
 8012fce:	2a00      	cmp	r2, #0
 8012fd0:	d037      	beq.n	8013042 <_strtod_l+0x242>
 8012fd2:	9c05      	ldr	r4, [sp, #20]
 8012fd4:	4602      	mov	r2, r0
 8012fd6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8012fda:	2909      	cmp	r1, #9
 8012fdc:	d913      	bls.n	8013006 <_strtod_l+0x206>
 8012fde:	2101      	movs	r1, #1
 8012fe0:	9104      	str	r1, [sp, #16]
 8012fe2:	e7c2      	b.n	8012f6a <_strtod_l+0x16a>
 8012fe4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8012fe6:	1c5a      	adds	r2, r3, #1
 8012fe8:	921b      	str	r2, [sp, #108]	; 0x6c
 8012fea:	785b      	ldrb	r3, [r3, #1]
 8012fec:	3001      	adds	r0, #1
 8012fee:	2b30      	cmp	r3, #48	; 0x30
 8012ff0:	d0f8      	beq.n	8012fe4 <_strtod_l+0x1e4>
 8012ff2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8012ff6:	2a08      	cmp	r2, #8
 8012ff8:	f200 84e4 	bhi.w	80139c4 <_strtod_l+0xbc4>
 8012ffc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8012ffe:	9208      	str	r2, [sp, #32]
 8013000:	4602      	mov	r2, r0
 8013002:	2000      	movs	r0, #0
 8013004:	4604      	mov	r4, r0
 8013006:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 801300a:	f100 0101 	add.w	r1, r0, #1
 801300e:	d012      	beq.n	8013036 <_strtod_l+0x236>
 8013010:	440a      	add	r2, r1
 8013012:	eb00 0c04 	add.w	ip, r0, r4
 8013016:	4621      	mov	r1, r4
 8013018:	270a      	movs	r7, #10
 801301a:	458c      	cmp	ip, r1
 801301c:	d113      	bne.n	8013046 <_strtod_l+0x246>
 801301e:	1821      	adds	r1, r4, r0
 8013020:	2908      	cmp	r1, #8
 8013022:	f104 0401 	add.w	r4, r4, #1
 8013026:	4404      	add	r4, r0
 8013028:	dc19      	bgt.n	801305e <_strtod_l+0x25e>
 801302a:	9b07      	ldr	r3, [sp, #28]
 801302c:	210a      	movs	r1, #10
 801302e:	fb01 e303 	mla	r3, r1, r3, lr
 8013032:	9307      	str	r3, [sp, #28]
 8013034:	2100      	movs	r1, #0
 8013036:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013038:	1c58      	adds	r0, r3, #1
 801303a:	901b      	str	r0, [sp, #108]	; 0x6c
 801303c:	785b      	ldrb	r3, [r3, #1]
 801303e:	4608      	mov	r0, r1
 8013040:	e7c9      	b.n	8012fd6 <_strtod_l+0x1d6>
 8013042:	9805      	ldr	r0, [sp, #20]
 8013044:	e7d3      	b.n	8012fee <_strtod_l+0x1ee>
 8013046:	2908      	cmp	r1, #8
 8013048:	f101 0101 	add.w	r1, r1, #1
 801304c:	dc03      	bgt.n	8013056 <_strtod_l+0x256>
 801304e:	9b07      	ldr	r3, [sp, #28]
 8013050:	437b      	muls	r3, r7
 8013052:	9307      	str	r3, [sp, #28]
 8013054:	e7e1      	b.n	801301a <_strtod_l+0x21a>
 8013056:	2910      	cmp	r1, #16
 8013058:	bfd8      	it	le
 801305a:	437d      	mulle	r5, r7
 801305c:	e7dd      	b.n	801301a <_strtod_l+0x21a>
 801305e:	2c10      	cmp	r4, #16
 8013060:	bfdc      	itt	le
 8013062:	210a      	movle	r1, #10
 8013064:	fb01 e505 	mlale	r5, r1, r5, lr
 8013068:	e7e4      	b.n	8013034 <_strtod_l+0x234>
 801306a:	2301      	movs	r3, #1
 801306c:	9304      	str	r3, [sp, #16]
 801306e:	e781      	b.n	8012f74 <_strtod_l+0x174>
 8013070:	f04f 0c01 	mov.w	ip, #1
 8013074:	1cb3      	adds	r3, r6, #2
 8013076:	931b      	str	r3, [sp, #108]	; 0x6c
 8013078:	78b3      	ldrb	r3, [r6, #2]
 801307a:	e78a      	b.n	8012f92 <_strtod_l+0x192>
 801307c:	f04f 0c00 	mov.w	ip, #0
 8013080:	e7f8      	b.n	8013074 <_strtod_l+0x274>
 8013082:	bf00      	nop
 8013084:	08017514 	.word	0x08017514
 8013088:	7ff00000 	.word	0x7ff00000
 801308c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801308e:	1c5f      	adds	r7, r3, #1
 8013090:	971b      	str	r7, [sp, #108]	; 0x6c
 8013092:	785b      	ldrb	r3, [r3, #1]
 8013094:	2b30      	cmp	r3, #48	; 0x30
 8013096:	d0f9      	beq.n	801308c <_strtod_l+0x28c>
 8013098:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 801309c:	2f08      	cmp	r7, #8
 801309e:	f63f af7d 	bhi.w	8012f9c <_strtod_l+0x19c>
 80130a2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80130a6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80130a8:	930a      	str	r3, [sp, #40]	; 0x28
 80130aa:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80130ac:	1c5f      	adds	r7, r3, #1
 80130ae:	971b      	str	r7, [sp, #108]	; 0x6c
 80130b0:	785b      	ldrb	r3, [r3, #1]
 80130b2:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 80130b6:	f1b8 0f09 	cmp.w	r8, #9
 80130ba:	d937      	bls.n	801312c <_strtod_l+0x32c>
 80130bc:	990a      	ldr	r1, [sp, #40]	; 0x28
 80130be:	1a7f      	subs	r7, r7, r1
 80130c0:	2f08      	cmp	r7, #8
 80130c2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80130c6:	dc37      	bgt.n	8013138 <_strtod_l+0x338>
 80130c8:	45be      	cmp	lr, r7
 80130ca:	bfa8      	it	ge
 80130cc:	46be      	movge	lr, r7
 80130ce:	f1bc 0f00 	cmp.w	ip, #0
 80130d2:	d001      	beq.n	80130d8 <_strtod_l+0x2d8>
 80130d4:	f1ce 0e00 	rsb	lr, lr, #0
 80130d8:	2c00      	cmp	r4, #0
 80130da:	d151      	bne.n	8013180 <_strtod_l+0x380>
 80130dc:	2800      	cmp	r0, #0
 80130de:	f47f aece 	bne.w	8012e7e <_strtod_l+0x7e>
 80130e2:	9a06      	ldr	r2, [sp, #24]
 80130e4:	2a00      	cmp	r2, #0
 80130e6:	f47f aeca 	bne.w	8012e7e <_strtod_l+0x7e>
 80130ea:	9a04      	ldr	r2, [sp, #16]
 80130ec:	2a00      	cmp	r2, #0
 80130ee:	f47f aee4 	bne.w	8012eba <_strtod_l+0xba>
 80130f2:	2b4e      	cmp	r3, #78	; 0x4e
 80130f4:	d027      	beq.n	8013146 <_strtod_l+0x346>
 80130f6:	dc21      	bgt.n	801313c <_strtod_l+0x33c>
 80130f8:	2b49      	cmp	r3, #73	; 0x49
 80130fa:	f47f aede 	bne.w	8012eba <_strtod_l+0xba>
 80130fe:	49a0      	ldr	r1, [pc, #640]	; (8013380 <_strtod_l+0x580>)
 8013100:	a81b      	add	r0, sp, #108	; 0x6c
 8013102:	f002 f851 	bl	80151a8 <__match>
 8013106:	2800      	cmp	r0, #0
 8013108:	f43f aed7 	beq.w	8012eba <_strtod_l+0xba>
 801310c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801310e:	499d      	ldr	r1, [pc, #628]	; (8013384 <_strtod_l+0x584>)
 8013110:	3b01      	subs	r3, #1
 8013112:	a81b      	add	r0, sp, #108	; 0x6c
 8013114:	931b      	str	r3, [sp, #108]	; 0x6c
 8013116:	f002 f847 	bl	80151a8 <__match>
 801311a:	b910      	cbnz	r0, 8013122 <_strtod_l+0x322>
 801311c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801311e:	3301      	adds	r3, #1
 8013120:	931b      	str	r3, [sp, #108]	; 0x6c
 8013122:	f8df b274 	ldr.w	fp, [pc, #628]	; 8013398 <_strtod_l+0x598>
 8013126:	f04f 0a00 	mov.w	sl, #0
 801312a:	e6a8      	b.n	8012e7e <_strtod_l+0x7e>
 801312c:	210a      	movs	r1, #10
 801312e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8013132:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8013136:	e7b8      	b.n	80130aa <_strtod_l+0x2aa>
 8013138:	46be      	mov	lr, r7
 801313a:	e7c8      	b.n	80130ce <_strtod_l+0x2ce>
 801313c:	2b69      	cmp	r3, #105	; 0x69
 801313e:	d0de      	beq.n	80130fe <_strtod_l+0x2fe>
 8013140:	2b6e      	cmp	r3, #110	; 0x6e
 8013142:	f47f aeba 	bne.w	8012eba <_strtod_l+0xba>
 8013146:	4990      	ldr	r1, [pc, #576]	; (8013388 <_strtod_l+0x588>)
 8013148:	a81b      	add	r0, sp, #108	; 0x6c
 801314a:	f002 f82d 	bl	80151a8 <__match>
 801314e:	2800      	cmp	r0, #0
 8013150:	f43f aeb3 	beq.w	8012eba <_strtod_l+0xba>
 8013154:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8013156:	781b      	ldrb	r3, [r3, #0]
 8013158:	2b28      	cmp	r3, #40	; 0x28
 801315a:	d10e      	bne.n	801317a <_strtod_l+0x37a>
 801315c:	aa1e      	add	r2, sp, #120	; 0x78
 801315e:	498b      	ldr	r1, [pc, #556]	; (801338c <_strtod_l+0x58c>)
 8013160:	a81b      	add	r0, sp, #108	; 0x6c
 8013162:	f002 f835 	bl	80151d0 <__hexnan>
 8013166:	2805      	cmp	r0, #5
 8013168:	d107      	bne.n	801317a <_strtod_l+0x37a>
 801316a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801316c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8013170:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8013174:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8013178:	e681      	b.n	8012e7e <_strtod_l+0x7e>
 801317a:	f8df b224 	ldr.w	fp, [pc, #548]	; 80133a0 <_strtod_l+0x5a0>
 801317e:	e7d2      	b.n	8013126 <_strtod_l+0x326>
 8013180:	ebae 0302 	sub.w	r3, lr, r2
 8013184:	9306      	str	r3, [sp, #24]
 8013186:	9b05      	ldr	r3, [sp, #20]
 8013188:	9807      	ldr	r0, [sp, #28]
 801318a:	2b00      	cmp	r3, #0
 801318c:	bf08      	it	eq
 801318e:	4623      	moveq	r3, r4
 8013190:	2c10      	cmp	r4, #16
 8013192:	9305      	str	r3, [sp, #20]
 8013194:	46a0      	mov	r8, r4
 8013196:	bfa8      	it	ge
 8013198:	f04f 0810 	movge.w	r8, #16
 801319c:	f7ed f9ca 	bl	8000534 <__aeabi_ui2d>
 80131a0:	2c09      	cmp	r4, #9
 80131a2:	4682      	mov	sl, r0
 80131a4:	468b      	mov	fp, r1
 80131a6:	dc13      	bgt.n	80131d0 <_strtod_l+0x3d0>
 80131a8:	9b06      	ldr	r3, [sp, #24]
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	f43f ae67 	beq.w	8012e7e <_strtod_l+0x7e>
 80131b0:	9b06      	ldr	r3, [sp, #24]
 80131b2:	dd7a      	ble.n	80132aa <_strtod_l+0x4aa>
 80131b4:	2b16      	cmp	r3, #22
 80131b6:	dc61      	bgt.n	801327c <_strtod_l+0x47c>
 80131b8:	4a75      	ldr	r2, [pc, #468]	; (8013390 <_strtod_l+0x590>)
 80131ba:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 80131be:	e9de 0100 	ldrd	r0, r1, [lr]
 80131c2:	4652      	mov	r2, sl
 80131c4:	465b      	mov	r3, fp
 80131c6:	f7ed fa2f 	bl	8000628 <__aeabi_dmul>
 80131ca:	4682      	mov	sl, r0
 80131cc:	468b      	mov	fp, r1
 80131ce:	e656      	b.n	8012e7e <_strtod_l+0x7e>
 80131d0:	4b6f      	ldr	r3, [pc, #444]	; (8013390 <_strtod_l+0x590>)
 80131d2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80131d6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80131da:	f7ed fa25 	bl	8000628 <__aeabi_dmul>
 80131de:	4606      	mov	r6, r0
 80131e0:	4628      	mov	r0, r5
 80131e2:	460f      	mov	r7, r1
 80131e4:	f7ed f9a6 	bl	8000534 <__aeabi_ui2d>
 80131e8:	4602      	mov	r2, r0
 80131ea:	460b      	mov	r3, r1
 80131ec:	4630      	mov	r0, r6
 80131ee:	4639      	mov	r1, r7
 80131f0:	f7ed f864 	bl	80002bc <__adddf3>
 80131f4:	2c0f      	cmp	r4, #15
 80131f6:	4682      	mov	sl, r0
 80131f8:	468b      	mov	fp, r1
 80131fa:	ddd5      	ble.n	80131a8 <_strtod_l+0x3a8>
 80131fc:	9b06      	ldr	r3, [sp, #24]
 80131fe:	eba4 0808 	sub.w	r8, r4, r8
 8013202:	4498      	add	r8, r3
 8013204:	f1b8 0f00 	cmp.w	r8, #0
 8013208:	f340 8096 	ble.w	8013338 <_strtod_l+0x538>
 801320c:	f018 030f 	ands.w	r3, r8, #15
 8013210:	d00a      	beq.n	8013228 <_strtod_l+0x428>
 8013212:	495f      	ldr	r1, [pc, #380]	; (8013390 <_strtod_l+0x590>)
 8013214:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013218:	4652      	mov	r2, sl
 801321a:	465b      	mov	r3, fp
 801321c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013220:	f7ed fa02 	bl	8000628 <__aeabi_dmul>
 8013224:	4682      	mov	sl, r0
 8013226:	468b      	mov	fp, r1
 8013228:	f038 080f 	bics.w	r8, r8, #15
 801322c:	d073      	beq.n	8013316 <_strtod_l+0x516>
 801322e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8013232:	dd47      	ble.n	80132c4 <_strtod_l+0x4c4>
 8013234:	2400      	movs	r4, #0
 8013236:	46a0      	mov	r8, r4
 8013238:	9407      	str	r4, [sp, #28]
 801323a:	9405      	str	r4, [sp, #20]
 801323c:	2322      	movs	r3, #34	; 0x22
 801323e:	f8df b158 	ldr.w	fp, [pc, #344]	; 8013398 <_strtod_l+0x598>
 8013242:	f8c9 3000 	str.w	r3, [r9]
 8013246:	f04f 0a00 	mov.w	sl, #0
 801324a:	9b07      	ldr	r3, [sp, #28]
 801324c:	2b00      	cmp	r3, #0
 801324e:	f43f ae16 	beq.w	8012e7e <_strtod_l+0x7e>
 8013252:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013254:	4648      	mov	r0, r9
 8013256:	f002 f93c 	bl	80154d2 <_Bfree>
 801325a:	9905      	ldr	r1, [sp, #20]
 801325c:	4648      	mov	r0, r9
 801325e:	f002 f938 	bl	80154d2 <_Bfree>
 8013262:	4641      	mov	r1, r8
 8013264:	4648      	mov	r0, r9
 8013266:	f002 f934 	bl	80154d2 <_Bfree>
 801326a:	9907      	ldr	r1, [sp, #28]
 801326c:	4648      	mov	r0, r9
 801326e:	f002 f930 	bl	80154d2 <_Bfree>
 8013272:	4621      	mov	r1, r4
 8013274:	4648      	mov	r0, r9
 8013276:	f002 f92c 	bl	80154d2 <_Bfree>
 801327a:	e600      	b.n	8012e7e <_strtod_l+0x7e>
 801327c:	9a06      	ldr	r2, [sp, #24]
 801327e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8013282:	4293      	cmp	r3, r2
 8013284:	dbba      	blt.n	80131fc <_strtod_l+0x3fc>
 8013286:	4d42      	ldr	r5, [pc, #264]	; (8013390 <_strtod_l+0x590>)
 8013288:	f1c4 040f 	rsb	r4, r4, #15
 801328c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8013290:	4652      	mov	r2, sl
 8013292:	465b      	mov	r3, fp
 8013294:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013298:	f7ed f9c6 	bl	8000628 <__aeabi_dmul>
 801329c:	9b06      	ldr	r3, [sp, #24]
 801329e:	1b1c      	subs	r4, r3, r4
 80132a0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80132a4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80132a8:	e78d      	b.n	80131c6 <_strtod_l+0x3c6>
 80132aa:	f113 0f16 	cmn.w	r3, #22
 80132ae:	dba5      	blt.n	80131fc <_strtod_l+0x3fc>
 80132b0:	4a37      	ldr	r2, [pc, #220]	; (8013390 <_strtod_l+0x590>)
 80132b2:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 80132b6:	e9d2 2300 	ldrd	r2, r3, [r2]
 80132ba:	4650      	mov	r0, sl
 80132bc:	4659      	mov	r1, fp
 80132be:	f7ed fadd 	bl	800087c <__aeabi_ddiv>
 80132c2:	e782      	b.n	80131ca <_strtod_l+0x3ca>
 80132c4:	2300      	movs	r3, #0
 80132c6:	4e33      	ldr	r6, [pc, #204]	; (8013394 <_strtod_l+0x594>)
 80132c8:	ea4f 1828 	mov.w	r8, r8, asr #4
 80132cc:	4650      	mov	r0, sl
 80132ce:	4659      	mov	r1, fp
 80132d0:	461d      	mov	r5, r3
 80132d2:	f1b8 0f01 	cmp.w	r8, #1
 80132d6:	dc21      	bgt.n	801331c <_strtod_l+0x51c>
 80132d8:	b10b      	cbz	r3, 80132de <_strtod_l+0x4de>
 80132da:	4682      	mov	sl, r0
 80132dc:	468b      	mov	fp, r1
 80132de:	4b2d      	ldr	r3, [pc, #180]	; (8013394 <_strtod_l+0x594>)
 80132e0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80132e4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80132e8:	4652      	mov	r2, sl
 80132ea:	465b      	mov	r3, fp
 80132ec:	e9d5 0100 	ldrd	r0, r1, [r5]
 80132f0:	f7ed f99a 	bl	8000628 <__aeabi_dmul>
 80132f4:	4b28      	ldr	r3, [pc, #160]	; (8013398 <_strtod_l+0x598>)
 80132f6:	460a      	mov	r2, r1
 80132f8:	400b      	ands	r3, r1
 80132fa:	4928      	ldr	r1, [pc, #160]	; (801339c <_strtod_l+0x59c>)
 80132fc:	428b      	cmp	r3, r1
 80132fe:	4682      	mov	sl, r0
 8013300:	d898      	bhi.n	8013234 <_strtod_l+0x434>
 8013302:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8013306:	428b      	cmp	r3, r1
 8013308:	bf86      	itte	hi
 801330a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80133a4 <_strtod_l+0x5a4>
 801330e:	f04f 3aff 	movhi.w	sl, #4294967295
 8013312:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8013316:	2300      	movs	r3, #0
 8013318:	9304      	str	r3, [sp, #16]
 801331a:	e077      	b.n	801340c <_strtod_l+0x60c>
 801331c:	f018 0f01 	tst.w	r8, #1
 8013320:	d006      	beq.n	8013330 <_strtod_l+0x530>
 8013322:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8013326:	e9d3 2300 	ldrd	r2, r3, [r3]
 801332a:	f7ed f97d 	bl	8000628 <__aeabi_dmul>
 801332e:	2301      	movs	r3, #1
 8013330:	3501      	adds	r5, #1
 8013332:	ea4f 0868 	mov.w	r8, r8, asr #1
 8013336:	e7cc      	b.n	80132d2 <_strtod_l+0x4d2>
 8013338:	d0ed      	beq.n	8013316 <_strtod_l+0x516>
 801333a:	f1c8 0800 	rsb	r8, r8, #0
 801333e:	f018 020f 	ands.w	r2, r8, #15
 8013342:	d00a      	beq.n	801335a <_strtod_l+0x55a>
 8013344:	4b12      	ldr	r3, [pc, #72]	; (8013390 <_strtod_l+0x590>)
 8013346:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801334a:	4650      	mov	r0, sl
 801334c:	4659      	mov	r1, fp
 801334e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013352:	f7ed fa93 	bl	800087c <__aeabi_ddiv>
 8013356:	4682      	mov	sl, r0
 8013358:	468b      	mov	fp, r1
 801335a:	ea5f 1828 	movs.w	r8, r8, asr #4
 801335e:	d0da      	beq.n	8013316 <_strtod_l+0x516>
 8013360:	f1b8 0f1f 	cmp.w	r8, #31
 8013364:	dd20      	ble.n	80133a8 <_strtod_l+0x5a8>
 8013366:	2400      	movs	r4, #0
 8013368:	46a0      	mov	r8, r4
 801336a:	9407      	str	r4, [sp, #28]
 801336c:	9405      	str	r4, [sp, #20]
 801336e:	2322      	movs	r3, #34	; 0x22
 8013370:	f04f 0a00 	mov.w	sl, #0
 8013374:	f04f 0b00 	mov.w	fp, #0
 8013378:	f8c9 3000 	str.w	r3, [r9]
 801337c:	e765      	b.n	801324a <_strtod_l+0x44a>
 801337e:	bf00      	nop
 8013380:	080174e1 	.word	0x080174e1
 8013384:	0801756b 	.word	0x0801756b
 8013388:	080174e9 	.word	0x080174e9
 801338c:	08017528 	.word	0x08017528
 8013390:	08017610 	.word	0x08017610
 8013394:	080175e8 	.word	0x080175e8
 8013398:	7ff00000 	.word	0x7ff00000
 801339c:	7ca00000 	.word	0x7ca00000
 80133a0:	fff80000 	.word	0xfff80000
 80133a4:	7fefffff 	.word	0x7fefffff
 80133a8:	f018 0310 	ands.w	r3, r8, #16
 80133ac:	bf18      	it	ne
 80133ae:	236a      	movne	r3, #106	; 0x6a
 80133b0:	4da0      	ldr	r5, [pc, #640]	; (8013634 <_strtod_l+0x834>)
 80133b2:	9304      	str	r3, [sp, #16]
 80133b4:	4650      	mov	r0, sl
 80133b6:	4659      	mov	r1, fp
 80133b8:	2300      	movs	r3, #0
 80133ba:	f1b8 0f00 	cmp.w	r8, #0
 80133be:	f300 810a 	bgt.w	80135d6 <_strtod_l+0x7d6>
 80133c2:	b10b      	cbz	r3, 80133c8 <_strtod_l+0x5c8>
 80133c4:	4682      	mov	sl, r0
 80133c6:	468b      	mov	fp, r1
 80133c8:	9b04      	ldr	r3, [sp, #16]
 80133ca:	b1bb      	cbz	r3, 80133fc <_strtod_l+0x5fc>
 80133cc:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80133d0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80133d4:	2b00      	cmp	r3, #0
 80133d6:	4659      	mov	r1, fp
 80133d8:	dd10      	ble.n	80133fc <_strtod_l+0x5fc>
 80133da:	2b1f      	cmp	r3, #31
 80133dc:	f340 8107 	ble.w	80135ee <_strtod_l+0x7ee>
 80133e0:	2b34      	cmp	r3, #52	; 0x34
 80133e2:	bfde      	ittt	le
 80133e4:	3b20      	suble	r3, #32
 80133e6:	f04f 32ff 	movle.w	r2, #4294967295
 80133ea:	fa02 f303 	lslle.w	r3, r2, r3
 80133ee:	f04f 0a00 	mov.w	sl, #0
 80133f2:	bfcc      	ite	gt
 80133f4:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80133f8:	ea03 0b01 	andle.w	fp, r3, r1
 80133fc:	2200      	movs	r2, #0
 80133fe:	2300      	movs	r3, #0
 8013400:	4650      	mov	r0, sl
 8013402:	4659      	mov	r1, fp
 8013404:	f7ed fb78 	bl	8000af8 <__aeabi_dcmpeq>
 8013408:	2800      	cmp	r0, #0
 801340a:	d1ac      	bne.n	8013366 <_strtod_l+0x566>
 801340c:	9b07      	ldr	r3, [sp, #28]
 801340e:	9300      	str	r3, [sp, #0]
 8013410:	9a05      	ldr	r2, [sp, #20]
 8013412:	9908      	ldr	r1, [sp, #32]
 8013414:	4623      	mov	r3, r4
 8013416:	4648      	mov	r0, r9
 8013418:	f002 f8ad 	bl	8015576 <__s2b>
 801341c:	9007      	str	r0, [sp, #28]
 801341e:	2800      	cmp	r0, #0
 8013420:	f43f af08 	beq.w	8013234 <_strtod_l+0x434>
 8013424:	9a06      	ldr	r2, [sp, #24]
 8013426:	9b06      	ldr	r3, [sp, #24]
 8013428:	2a00      	cmp	r2, #0
 801342a:	f1c3 0300 	rsb	r3, r3, #0
 801342e:	bfa8      	it	ge
 8013430:	2300      	movge	r3, #0
 8013432:	930e      	str	r3, [sp, #56]	; 0x38
 8013434:	2400      	movs	r4, #0
 8013436:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801343a:	9316      	str	r3, [sp, #88]	; 0x58
 801343c:	46a0      	mov	r8, r4
 801343e:	9b07      	ldr	r3, [sp, #28]
 8013440:	4648      	mov	r0, r9
 8013442:	6859      	ldr	r1, [r3, #4]
 8013444:	f002 f811 	bl	801546a <_Balloc>
 8013448:	9005      	str	r0, [sp, #20]
 801344a:	2800      	cmp	r0, #0
 801344c:	f43f aef6 	beq.w	801323c <_strtod_l+0x43c>
 8013450:	9b07      	ldr	r3, [sp, #28]
 8013452:	691a      	ldr	r2, [r3, #16]
 8013454:	3202      	adds	r2, #2
 8013456:	f103 010c 	add.w	r1, r3, #12
 801345a:	0092      	lsls	r2, r2, #2
 801345c:	300c      	adds	r0, #12
 801345e:	f001 fff9 	bl	8015454 <memcpy>
 8013462:	aa1e      	add	r2, sp, #120	; 0x78
 8013464:	a91d      	add	r1, sp, #116	; 0x74
 8013466:	ec4b ab10 	vmov	d0, sl, fp
 801346a:	4648      	mov	r0, r9
 801346c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8013470:	f002 fb3c 	bl	8015aec <__d2b>
 8013474:	901c      	str	r0, [sp, #112]	; 0x70
 8013476:	2800      	cmp	r0, #0
 8013478:	f43f aee0 	beq.w	801323c <_strtod_l+0x43c>
 801347c:	2101      	movs	r1, #1
 801347e:	4648      	mov	r0, r9
 8013480:	f002 f905 	bl	801568e <__i2b>
 8013484:	4680      	mov	r8, r0
 8013486:	2800      	cmp	r0, #0
 8013488:	f43f aed8 	beq.w	801323c <_strtod_l+0x43c>
 801348c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801348e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8013490:	2e00      	cmp	r6, #0
 8013492:	bfab      	itete	ge
 8013494:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8013496:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8013498:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 801349a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 801349c:	bfac      	ite	ge
 801349e:	18f7      	addge	r7, r6, r3
 80134a0:	1b9d      	sublt	r5, r3, r6
 80134a2:	9b04      	ldr	r3, [sp, #16]
 80134a4:	1af6      	subs	r6, r6, r3
 80134a6:	4416      	add	r6, r2
 80134a8:	4b63      	ldr	r3, [pc, #396]	; (8013638 <_strtod_l+0x838>)
 80134aa:	3e01      	subs	r6, #1
 80134ac:	429e      	cmp	r6, r3
 80134ae:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80134b2:	f280 80af 	bge.w	8013614 <_strtod_l+0x814>
 80134b6:	1b9b      	subs	r3, r3, r6
 80134b8:	2b1f      	cmp	r3, #31
 80134ba:	eba2 0203 	sub.w	r2, r2, r3
 80134be:	f04f 0101 	mov.w	r1, #1
 80134c2:	f300 809b 	bgt.w	80135fc <_strtod_l+0x7fc>
 80134c6:	fa01 f303 	lsl.w	r3, r1, r3
 80134ca:	930f      	str	r3, [sp, #60]	; 0x3c
 80134cc:	2300      	movs	r3, #0
 80134ce:	930a      	str	r3, [sp, #40]	; 0x28
 80134d0:	18be      	adds	r6, r7, r2
 80134d2:	9b04      	ldr	r3, [sp, #16]
 80134d4:	42b7      	cmp	r7, r6
 80134d6:	4415      	add	r5, r2
 80134d8:	441d      	add	r5, r3
 80134da:	463b      	mov	r3, r7
 80134dc:	bfa8      	it	ge
 80134de:	4633      	movge	r3, r6
 80134e0:	42ab      	cmp	r3, r5
 80134e2:	bfa8      	it	ge
 80134e4:	462b      	movge	r3, r5
 80134e6:	2b00      	cmp	r3, #0
 80134e8:	bfc2      	ittt	gt
 80134ea:	1af6      	subgt	r6, r6, r3
 80134ec:	1aed      	subgt	r5, r5, r3
 80134ee:	1aff      	subgt	r7, r7, r3
 80134f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80134f2:	b1bb      	cbz	r3, 8013524 <_strtod_l+0x724>
 80134f4:	4641      	mov	r1, r8
 80134f6:	461a      	mov	r2, r3
 80134f8:	4648      	mov	r0, r9
 80134fa:	f002 f967 	bl	80157cc <__pow5mult>
 80134fe:	4680      	mov	r8, r0
 8013500:	2800      	cmp	r0, #0
 8013502:	f43f ae9b 	beq.w	801323c <_strtod_l+0x43c>
 8013506:	4601      	mov	r1, r0
 8013508:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 801350a:	4648      	mov	r0, r9
 801350c:	f002 f8c8 	bl	80156a0 <__multiply>
 8013510:	900c      	str	r0, [sp, #48]	; 0x30
 8013512:	2800      	cmp	r0, #0
 8013514:	f43f ae92 	beq.w	801323c <_strtod_l+0x43c>
 8013518:	991c      	ldr	r1, [sp, #112]	; 0x70
 801351a:	4648      	mov	r0, r9
 801351c:	f001 ffd9 	bl	80154d2 <_Bfree>
 8013520:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013522:	931c      	str	r3, [sp, #112]	; 0x70
 8013524:	2e00      	cmp	r6, #0
 8013526:	dc7a      	bgt.n	801361e <_strtod_l+0x81e>
 8013528:	9b06      	ldr	r3, [sp, #24]
 801352a:	2b00      	cmp	r3, #0
 801352c:	dd08      	ble.n	8013540 <_strtod_l+0x740>
 801352e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8013530:	9905      	ldr	r1, [sp, #20]
 8013532:	4648      	mov	r0, r9
 8013534:	f002 f94a 	bl	80157cc <__pow5mult>
 8013538:	9005      	str	r0, [sp, #20]
 801353a:	2800      	cmp	r0, #0
 801353c:	f43f ae7e 	beq.w	801323c <_strtod_l+0x43c>
 8013540:	2d00      	cmp	r5, #0
 8013542:	dd08      	ble.n	8013556 <_strtod_l+0x756>
 8013544:	462a      	mov	r2, r5
 8013546:	9905      	ldr	r1, [sp, #20]
 8013548:	4648      	mov	r0, r9
 801354a:	f002 f98d 	bl	8015868 <__lshift>
 801354e:	9005      	str	r0, [sp, #20]
 8013550:	2800      	cmp	r0, #0
 8013552:	f43f ae73 	beq.w	801323c <_strtod_l+0x43c>
 8013556:	2f00      	cmp	r7, #0
 8013558:	dd08      	ble.n	801356c <_strtod_l+0x76c>
 801355a:	4641      	mov	r1, r8
 801355c:	463a      	mov	r2, r7
 801355e:	4648      	mov	r0, r9
 8013560:	f002 f982 	bl	8015868 <__lshift>
 8013564:	4680      	mov	r8, r0
 8013566:	2800      	cmp	r0, #0
 8013568:	f43f ae68 	beq.w	801323c <_strtod_l+0x43c>
 801356c:	9a05      	ldr	r2, [sp, #20]
 801356e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013570:	4648      	mov	r0, r9
 8013572:	f002 f9e7 	bl	8015944 <__mdiff>
 8013576:	4604      	mov	r4, r0
 8013578:	2800      	cmp	r0, #0
 801357a:	f43f ae5f 	beq.w	801323c <_strtod_l+0x43c>
 801357e:	68c3      	ldr	r3, [r0, #12]
 8013580:	930c      	str	r3, [sp, #48]	; 0x30
 8013582:	2300      	movs	r3, #0
 8013584:	60c3      	str	r3, [r0, #12]
 8013586:	4641      	mov	r1, r8
 8013588:	f002 f9c2 	bl	8015910 <__mcmp>
 801358c:	2800      	cmp	r0, #0
 801358e:	da55      	bge.n	801363c <_strtod_l+0x83c>
 8013590:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013592:	b9e3      	cbnz	r3, 80135ce <_strtod_l+0x7ce>
 8013594:	f1ba 0f00 	cmp.w	sl, #0
 8013598:	d119      	bne.n	80135ce <_strtod_l+0x7ce>
 801359a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801359e:	b9b3      	cbnz	r3, 80135ce <_strtod_l+0x7ce>
 80135a0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80135a4:	0d1b      	lsrs	r3, r3, #20
 80135a6:	051b      	lsls	r3, r3, #20
 80135a8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80135ac:	d90f      	bls.n	80135ce <_strtod_l+0x7ce>
 80135ae:	6963      	ldr	r3, [r4, #20]
 80135b0:	b913      	cbnz	r3, 80135b8 <_strtod_l+0x7b8>
 80135b2:	6923      	ldr	r3, [r4, #16]
 80135b4:	2b01      	cmp	r3, #1
 80135b6:	dd0a      	ble.n	80135ce <_strtod_l+0x7ce>
 80135b8:	4621      	mov	r1, r4
 80135ba:	2201      	movs	r2, #1
 80135bc:	4648      	mov	r0, r9
 80135be:	f002 f953 	bl	8015868 <__lshift>
 80135c2:	4641      	mov	r1, r8
 80135c4:	4604      	mov	r4, r0
 80135c6:	f002 f9a3 	bl	8015910 <__mcmp>
 80135ca:	2800      	cmp	r0, #0
 80135cc:	dc67      	bgt.n	801369e <_strtod_l+0x89e>
 80135ce:	9b04      	ldr	r3, [sp, #16]
 80135d0:	2b00      	cmp	r3, #0
 80135d2:	d171      	bne.n	80136b8 <_strtod_l+0x8b8>
 80135d4:	e63d      	b.n	8013252 <_strtod_l+0x452>
 80135d6:	f018 0f01 	tst.w	r8, #1
 80135da:	d004      	beq.n	80135e6 <_strtod_l+0x7e6>
 80135dc:	e9d5 2300 	ldrd	r2, r3, [r5]
 80135e0:	f7ed f822 	bl	8000628 <__aeabi_dmul>
 80135e4:	2301      	movs	r3, #1
 80135e6:	ea4f 0868 	mov.w	r8, r8, asr #1
 80135ea:	3508      	adds	r5, #8
 80135ec:	e6e5      	b.n	80133ba <_strtod_l+0x5ba>
 80135ee:	f04f 32ff 	mov.w	r2, #4294967295
 80135f2:	fa02 f303 	lsl.w	r3, r2, r3
 80135f6:	ea03 0a0a 	and.w	sl, r3, sl
 80135fa:	e6ff      	b.n	80133fc <_strtod_l+0x5fc>
 80135fc:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8013600:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8013604:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8013608:	36e2      	adds	r6, #226	; 0xe2
 801360a:	fa01 f306 	lsl.w	r3, r1, r6
 801360e:	930a      	str	r3, [sp, #40]	; 0x28
 8013610:	910f      	str	r1, [sp, #60]	; 0x3c
 8013612:	e75d      	b.n	80134d0 <_strtod_l+0x6d0>
 8013614:	2300      	movs	r3, #0
 8013616:	930a      	str	r3, [sp, #40]	; 0x28
 8013618:	2301      	movs	r3, #1
 801361a:	930f      	str	r3, [sp, #60]	; 0x3c
 801361c:	e758      	b.n	80134d0 <_strtod_l+0x6d0>
 801361e:	4632      	mov	r2, r6
 8013620:	991c      	ldr	r1, [sp, #112]	; 0x70
 8013622:	4648      	mov	r0, r9
 8013624:	f002 f920 	bl	8015868 <__lshift>
 8013628:	901c      	str	r0, [sp, #112]	; 0x70
 801362a:	2800      	cmp	r0, #0
 801362c:	f47f af7c 	bne.w	8013528 <_strtod_l+0x728>
 8013630:	e604      	b.n	801323c <_strtod_l+0x43c>
 8013632:	bf00      	nop
 8013634:	08017540 	.word	0x08017540
 8013638:	fffffc02 	.word	0xfffffc02
 801363c:	465d      	mov	r5, fp
 801363e:	f040 8086 	bne.w	801374e <_strtod_l+0x94e>
 8013642:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013644:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013648:	b32a      	cbz	r2, 8013696 <_strtod_l+0x896>
 801364a:	4aaf      	ldr	r2, [pc, #700]	; (8013908 <_strtod_l+0xb08>)
 801364c:	4293      	cmp	r3, r2
 801364e:	d153      	bne.n	80136f8 <_strtod_l+0x8f8>
 8013650:	9b04      	ldr	r3, [sp, #16]
 8013652:	4650      	mov	r0, sl
 8013654:	b1d3      	cbz	r3, 801368c <_strtod_l+0x88c>
 8013656:	4aad      	ldr	r2, [pc, #692]	; (801390c <_strtod_l+0xb0c>)
 8013658:	402a      	ands	r2, r5
 801365a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801365e:	f04f 31ff 	mov.w	r1, #4294967295
 8013662:	d816      	bhi.n	8013692 <_strtod_l+0x892>
 8013664:	0d12      	lsrs	r2, r2, #20
 8013666:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801366a:	fa01 f303 	lsl.w	r3, r1, r3
 801366e:	4298      	cmp	r0, r3
 8013670:	d142      	bne.n	80136f8 <_strtod_l+0x8f8>
 8013672:	4ba7      	ldr	r3, [pc, #668]	; (8013910 <_strtod_l+0xb10>)
 8013674:	429d      	cmp	r5, r3
 8013676:	d102      	bne.n	801367e <_strtod_l+0x87e>
 8013678:	3001      	adds	r0, #1
 801367a:	f43f addf 	beq.w	801323c <_strtod_l+0x43c>
 801367e:	4ba3      	ldr	r3, [pc, #652]	; (801390c <_strtod_l+0xb0c>)
 8013680:	402b      	ands	r3, r5
 8013682:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8013686:	f04f 0a00 	mov.w	sl, #0
 801368a:	e7a0      	b.n	80135ce <_strtod_l+0x7ce>
 801368c:	f04f 33ff 	mov.w	r3, #4294967295
 8013690:	e7ed      	b.n	801366e <_strtod_l+0x86e>
 8013692:	460b      	mov	r3, r1
 8013694:	e7eb      	b.n	801366e <_strtod_l+0x86e>
 8013696:	bb7b      	cbnz	r3, 80136f8 <_strtod_l+0x8f8>
 8013698:	f1ba 0f00 	cmp.w	sl, #0
 801369c:	d12c      	bne.n	80136f8 <_strtod_l+0x8f8>
 801369e:	9904      	ldr	r1, [sp, #16]
 80136a0:	4a9a      	ldr	r2, [pc, #616]	; (801390c <_strtod_l+0xb0c>)
 80136a2:	465b      	mov	r3, fp
 80136a4:	b1f1      	cbz	r1, 80136e4 <_strtod_l+0x8e4>
 80136a6:	ea02 010b 	and.w	r1, r2, fp
 80136aa:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80136ae:	dc19      	bgt.n	80136e4 <_strtod_l+0x8e4>
 80136b0:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80136b4:	f77f ae5b 	ble.w	801336e <_strtod_l+0x56e>
 80136b8:	4a96      	ldr	r2, [pc, #600]	; (8013914 <_strtod_l+0xb14>)
 80136ba:	2300      	movs	r3, #0
 80136bc:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80136c0:	4650      	mov	r0, sl
 80136c2:	4659      	mov	r1, fp
 80136c4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80136c8:	f7ec ffae 	bl	8000628 <__aeabi_dmul>
 80136cc:	4682      	mov	sl, r0
 80136ce:	468b      	mov	fp, r1
 80136d0:	2900      	cmp	r1, #0
 80136d2:	f47f adbe 	bne.w	8013252 <_strtod_l+0x452>
 80136d6:	2800      	cmp	r0, #0
 80136d8:	f47f adbb 	bne.w	8013252 <_strtod_l+0x452>
 80136dc:	2322      	movs	r3, #34	; 0x22
 80136de:	f8c9 3000 	str.w	r3, [r9]
 80136e2:	e5b6      	b.n	8013252 <_strtod_l+0x452>
 80136e4:	4013      	ands	r3, r2
 80136e6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80136ea:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80136ee:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80136f2:	f04f 3aff 	mov.w	sl, #4294967295
 80136f6:	e76a      	b.n	80135ce <_strtod_l+0x7ce>
 80136f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80136fa:	b193      	cbz	r3, 8013722 <_strtod_l+0x922>
 80136fc:	422b      	tst	r3, r5
 80136fe:	f43f af66 	beq.w	80135ce <_strtod_l+0x7ce>
 8013702:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013704:	9a04      	ldr	r2, [sp, #16]
 8013706:	4650      	mov	r0, sl
 8013708:	4659      	mov	r1, fp
 801370a:	b173      	cbz	r3, 801372a <_strtod_l+0x92a>
 801370c:	f7ff fb5b 	bl	8012dc6 <sulp>
 8013710:	4602      	mov	r2, r0
 8013712:	460b      	mov	r3, r1
 8013714:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8013718:	f7ec fdd0 	bl	80002bc <__adddf3>
 801371c:	4682      	mov	sl, r0
 801371e:	468b      	mov	fp, r1
 8013720:	e755      	b.n	80135ce <_strtod_l+0x7ce>
 8013722:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013724:	ea13 0f0a 	tst.w	r3, sl
 8013728:	e7e9      	b.n	80136fe <_strtod_l+0x8fe>
 801372a:	f7ff fb4c 	bl	8012dc6 <sulp>
 801372e:	4602      	mov	r2, r0
 8013730:	460b      	mov	r3, r1
 8013732:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8013736:	f7ec fdbf 	bl	80002b8 <__aeabi_dsub>
 801373a:	2200      	movs	r2, #0
 801373c:	2300      	movs	r3, #0
 801373e:	4682      	mov	sl, r0
 8013740:	468b      	mov	fp, r1
 8013742:	f7ed f9d9 	bl	8000af8 <__aeabi_dcmpeq>
 8013746:	2800      	cmp	r0, #0
 8013748:	f47f ae11 	bne.w	801336e <_strtod_l+0x56e>
 801374c:	e73f      	b.n	80135ce <_strtod_l+0x7ce>
 801374e:	4641      	mov	r1, r8
 8013750:	4620      	mov	r0, r4
 8013752:	f002 fa1a 	bl	8015b8a <__ratio>
 8013756:	ec57 6b10 	vmov	r6, r7, d0
 801375a:	2200      	movs	r2, #0
 801375c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8013760:	ee10 0a10 	vmov	r0, s0
 8013764:	4639      	mov	r1, r7
 8013766:	f7ed f9db 	bl	8000b20 <__aeabi_dcmple>
 801376a:	2800      	cmp	r0, #0
 801376c:	d077      	beq.n	801385e <_strtod_l+0xa5e>
 801376e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013770:	2b00      	cmp	r3, #0
 8013772:	d04a      	beq.n	801380a <_strtod_l+0xa0a>
 8013774:	4b68      	ldr	r3, [pc, #416]	; (8013918 <_strtod_l+0xb18>)
 8013776:	2200      	movs	r2, #0
 8013778:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801377c:	4f66      	ldr	r7, [pc, #408]	; (8013918 <_strtod_l+0xb18>)
 801377e:	2600      	movs	r6, #0
 8013780:	4b62      	ldr	r3, [pc, #392]	; (801390c <_strtod_l+0xb0c>)
 8013782:	402b      	ands	r3, r5
 8013784:	930f      	str	r3, [sp, #60]	; 0x3c
 8013786:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013788:	4b64      	ldr	r3, [pc, #400]	; (801391c <_strtod_l+0xb1c>)
 801378a:	429a      	cmp	r2, r3
 801378c:	f040 80ce 	bne.w	801392c <_strtod_l+0xb2c>
 8013790:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013794:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013798:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 801379c:	ec4b ab10 	vmov	d0, sl, fp
 80137a0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80137a4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80137a8:	f002 f92a 	bl	8015a00 <__ulp>
 80137ac:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80137b0:	ec53 2b10 	vmov	r2, r3, d0
 80137b4:	f7ec ff38 	bl	8000628 <__aeabi_dmul>
 80137b8:	4652      	mov	r2, sl
 80137ba:	465b      	mov	r3, fp
 80137bc:	f7ec fd7e 	bl	80002bc <__adddf3>
 80137c0:	460b      	mov	r3, r1
 80137c2:	4952      	ldr	r1, [pc, #328]	; (801390c <_strtod_l+0xb0c>)
 80137c4:	4a56      	ldr	r2, [pc, #344]	; (8013920 <_strtod_l+0xb20>)
 80137c6:	4019      	ands	r1, r3
 80137c8:	4291      	cmp	r1, r2
 80137ca:	4682      	mov	sl, r0
 80137cc:	d95b      	bls.n	8013886 <_strtod_l+0xa86>
 80137ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80137d0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80137d4:	4293      	cmp	r3, r2
 80137d6:	d103      	bne.n	80137e0 <_strtod_l+0x9e0>
 80137d8:	9b08      	ldr	r3, [sp, #32]
 80137da:	3301      	adds	r3, #1
 80137dc:	f43f ad2e 	beq.w	801323c <_strtod_l+0x43c>
 80137e0:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8013910 <_strtod_l+0xb10>
 80137e4:	f04f 3aff 	mov.w	sl, #4294967295
 80137e8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80137ea:	4648      	mov	r0, r9
 80137ec:	f001 fe71 	bl	80154d2 <_Bfree>
 80137f0:	9905      	ldr	r1, [sp, #20]
 80137f2:	4648      	mov	r0, r9
 80137f4:	f001 fe6d 	bl	80154d2 <_Bfree>
 80137f8:	4641      	mov	r1, r8
 80137fa:	4648      	mov	r0, r9
 80137fc:	f001 fe69 	bl	80154d2 <_Bfree>
 8013800:	4621      	mov	r1, r4
 8013802:	4648      	mov	r0, r9
 8013804:	f001 fe65 	bl	80154d2 <_Bfree>
 8013808:	e619      	b.n	801343e <_strtod_l+0x63e>
 801380a:	f1ba 0f00 	cmp.w	sl, #0
 801380e:	d11a      	bne.n	8013846 <_strtod_l+0xa46>
 8013810:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013814:	b9eb      	cbnz	r3, 8013852 <_strtod_l+0xa52>
 8013816:	2200      	movs	r2, #0
 8013818:	4b3f      	ldr	r3, [pc, #252]	; (8013918 <_strtod_l+0xb18>)
 801381a:	4630      	mov	r0, r6
 801381c:	4639      	mov	r1, r7
 801381e:	f7ed f975 	bl	8000b0c <__aeabi_dcmplt>
 8013822:	b9c8      	cbnz	r0, 8013858 <_strtod_l+0xa58>
 8013824:	4630      	mov	r0, r6
 8013826:	4639      	mov	r1, r7
 8013828:	2200      	movs	r2, #0
 801382a:	4b3e      	ldr	r3, [pc, #248]	; (8013924 <_strtod_l+0xb24>)
 801382c:	f7ec fefc 	bl	8000628 <__aeabi_dmul>
 8013830:	4606      	mov	r6, r0
 8013832:	460f      	mov	r7, r1
 8013834:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8013838:	9618      	str	r6, [sp, #96]	; 0x60
 801383a:	9319      	str	r3, [sp, #100]	; 0x64
 801383c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8013840:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8013844:	e79c      	b.n	8013780 <_strtod_l+0x980>
 8013846:	f1ba 0f01 	cmp.w	sl, #1
 801384a:	d102      	bne.n	8013852 <_strtod_l+0xa52>
 801384c:	2d00      	cmp	r5, #0
 801384e:	f43f ad8e 	beq.w	801336e <_strtod_l+0x56e>
 8013852:	2200      	movs	r2, #0
 8013854:	4b34      	ldr	r3, [pc, #208]	; (8013928 <_strtod_l+0xb28>)
 8013856:	e78f      	b.n	8013778 <_strtod_l+0x978>
 8013858:	2600      	movs	r6, #0
 801385a:	4f32      	ldr	r7, [pc, #200]	; (8013924 <_strtod_l+0xb24>)
 801385c:	e7ea      	b.n	8013834 <_strtod_l+0xa34>
 801385e:	4b31      	ldr	r3, [pc, #196]	; (8013924 <_strtod_l+0xb24>)
 8013860:	4630      	mov	r0, r6
 8013862:	4639      	mov	r1, r7
 8013864:	2200      	movs	r2, #0
 8013866:	f7ec fedf 	bl	8000628 <__aeabi_dmul>
 801386a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801386c:	4606      	mov	r6, r0
 801386e:	460f      	mov	r7, r1
 8013870:	b933      	cbnz	r3, 8013880 <_strtod_l+0xa80>
 8013872:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013876:	9010      	str	r0, [sp, #64]	; 0x40
 8013878:	9311      	str	r3, [sp, #68]	; 0x44
 801387a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 801387e:	e7df      	b.n	8013840 <_strtod_l+0xa40>
 8013880:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8013884:	e7f9      	b.n	801387a <_strtod_l+0xa7a>
 8013886:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801388a:	9b04      	ldr	r3, [sp, #16]
 801388c:	2b00      	cmp	r3, #0
 801388e:	d1ab      	bne.n	80137e8 <_strtod_l+0x9e8>
 8013890:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8013894:	0d1b      	lsrs	r3, r3, #20
 8013896:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013898:	051b      	lsls	r3, r3, #20
 801389a:	429a      	cmp	r2, r3
 801389c:	465d      	mov	r5, fp
 801389e:	d1a3      	bne.n	80137e8 <_strtod_l+0x9e8>
 80138a0:	4639      	mov	r1, r7
 80138a2:	4630      	mov	r0, r6
 80138a4:	f7ed f970 	bl	8000b88 <__aeabi_d2iz>
 80138a8:	f7ec fe54 	bl	8000554 <__aeabi_i2d>
 80138ac:	460b      	mov	r3, r1
 80138ae:	4602      	mov	r2, r0
 80138b0:	4639      	mov	r1, r7
 80138b2:	4630      	mov	r0, r6
 80138b4:	f7ec fd00 	bl	80002b8 <__aeabi_dsub>
 80138b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80138ba:	4606      	mov	r6, r0
 80138bc:	460f      	mov	r7, r1
 80138be:	b933      	cbnz	r3, 80138ce <_strtod_l+0xace>
 80138c0:	f1ba 0f00 	cmp.w	sl, #0
 80138c4:	d103      	bne.n	80138ce <_strtod_l+0xace>
 80138c6:	f3cb 0513 	ubfx	r5, fp, #0, #20
 80138ca:	2d00      	cmp	r5, #0
 80138cc:	d06d      	beq.n	80139aa <_strtod_l+0xbaa>
 80138ce:	a30a      	add	r3, pc, #40	; (adr r3, 80138f8 <_strtod_l+0xaf8>)
 80138d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138d4:	4630      	mov	r0, r6
 80138d6:	4639      	mov	r1, r7
 80138d8:	f7ed f918 	bl	8000b0c <__aeabi_dcmplt>
 80138dc:	2800      	cmp	r0, #0
 80138de:	f47f acb8 	bne.w	8013252 <_strtod_l+0x452>
 80138e2:	a307      	add	r3, pc, #28	; (adr r3, 8013900 <_strtod_l+0xb00>)
 80138e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80138e8:	4630      	mov	r0, r6
 80138ea:	4639      	mov	r1, r7
 80138ec:	f7ed f92c 	bl	8000b48 <__aeabi_dcmpgt>
 80138f0:	2800      	cmp	r0, #0
 80138f2:	f43f af79 	beq.w	80137e8 <_strtod_l+0x9e8>
 80138f6:	e4ac      	b.n	8013252 <_strtod_l+0x452>
 80138f8:	94a03595 	.word	0x94a03595
 80138fc:	3fdfffff 	.word	0x3fdfffff
 8013900:	35afe535 	.word	0x35afe535
 8013904:	3fe00000 	.word	0x3fe00000
 8013908:	000fffff 	.word	0x000fffff
 801390c:	7ff00000 	.word	0x7ff00000
 8013910:	7fefffff 	.word	0x7fefffff
 8013914:	39500000 	.word	0x39500000
 8013918:	3ff00000 	.word	0x3ff00000
 801391c:	7fe00000 	.word	0x7fe00000
 8013920:	7c9fffff 	.word	0x7c9fffff
 8013924:	3fe00000 	.word	0x3fe00000
 8013928:	bff00000 	.word	0xbff00000
 801392c:	9b04      	ldr	r3, [sp, #16]
 801392e:	b333      	cbz	r3, 801397e <_strtod_l+0xb7e>
 8013930:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013932:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8013936:	d822      	bhi.n	801397e <_strtod_l+0xb7e>
 8013938:	a327      	add	r3, pc, #156	; (adr r3, 80139d8 <_strtod_l+0xbd8>)
 801393a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801393e:	4630      	mov	r0, r6
 8013940:	4639      	mov	r1, r7
 8013942:	f7ed f8ed 	bl	8000b20 <__aeabi_dcmple>
 8013946:	b1a0      	cbz	r0, 8013972 <_strtod_l+0xb72>
 8013948:	4639      	mov	r1, r7
 801394a:	4630      	mov	r0, r6
 801394c:	f7ed f944 	bl	8000bd8 <__aeabi_d2uiz>
 8013950:	2800      	cmp	r0, #0
 8013952:	bf08      	it	eq
 8013954:	2001      	moveq	r0, #1
 8013956:	f7ec fded 	bl	8000534 <__aeabi_ui2d>
 801395a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801395c:	4606      	mov	r6, r0
 801395e:	460f      	mov	r7, r1
 8013960:	bb03      	cbnz	r3, 80139a4 <_strtod_l+0xba4>
 8013962:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013966:	9012      	str	r0, [sp, #72]	; 0x48
 8013968:	9313      	str	r3, [sp, #76]	; 0x4c
 801396a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801396e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8013972:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013974:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013976:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 801397a:	1a9b      	subs	r3, r3, r2
 801397c:	930b      	str	r3, [sp, #44]	; 0x2c
 801397e:	ed9d 0b08 	vldr	d0, [sp, #32]
 8013982:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8013986:	f002 f83b 	bl	8015a00 <__ulp>
 801398a:	4650      	mov	r0, sl
 801398c:	ec53 2b10 	vmov	r2, r3, d0
 8013990:	4659      	mov	r1, fp
 8013992:	f7ec fe49 	bl	8000628 <__aeabi_dmul>
 8013996:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801399a:	f7ec fc8f 	bl	80002bc <__adddf3>
 801399e:	4682      	mov	sl, r0
 80139a0:	468b      	mov	fp, r1
 80139a2:	e772      	b.n	801388a <_strtod_l+0xa8a>
 80139a4:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 80139a8:	e7df      	b.n	801396a <_strtod_l+0xb6a>
 80139aa:	a30d      	add	r3, pc, #52	; (adr r3, 80139e0 <_strtod_l+0xbe0>)
 80139ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139b0:	f7ed f8ac 	bl	8000b0c <__aeabi_dcmplt>
 80139b4:	e79c      	b.n	80138f0 <_strtod_l+0xaf0>
 80139b6:	2300      	movs	r3, #0
 80139b8:	930d      	str	r3, [sp, #52]	; 0x34
 80139ba:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80139bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80139be:	6013      	str	r3, [r2, #0]
 80139c0:	f7ff ba61 	b.w	8012e86 <_strtod_l+0x86>
 80139c4:	2b65      	cmp	r3, #101	; 0x65
 80139c6:	f04f 0200 	mov.w	r2, #0
 80139ca:	f43f ab4e 	beq.w	801306a <_strtod_l+0x26a>
 80139ce:	2101      	movs	r1, #1
 80139d0:	4614      	mov	r4, r2
 80139d2:	9104      	str	r1, [sp, #16]
 80139d4:	f7ff bacb 	b.w	8012f6e <_strtod_l+0x16e>
 80139d8:	ffc00000 	.word	0xffc00000
 80139dc:	41dfffff 	.word	0x41dfffff
 80139e0:	94a03595 	.word	0x94a03595
 80139e4:	3fcfffff 	.word	0x3fcfffff

080139e8 <_strtod_r>:
 80139e8:	4b05      	ldr	r3, [pc, #20]	; (8013a00 <_strtod_r+0x18>)
 80139ea:	681b      	ldr	r3, [r3, #0]
 80139ec:	b410      	push	{r4}
 80139ee:	6a1b      	ldr	r3, [r3, #32]
 80139f0:	4c04      	ldr	r4, [pc, #16]	; (8013a04 <_strtod_r+0x1c>)
 80139f2:	2b00      	cmp	r3, #0
 80139f4:	bf08      	it	eq
 80139f6:	4623      	moveq	r3, r4
 80139f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80139fc:	f7ff ba00 	b.w	8012e00 <_strtod_l>
 8013a00:	2000000c 	.word	0x2000000c
 8013a04:	20000070 	.word	0x20000070

08013a08 <_strtol_l.isra.0>:
 8013a08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013a0c:	4680      	mov	r8, r0
 8013a0e:	4689      	mov	r9, r1
 8013a10:	4692      	mov	sl, r2
 8013a12:	461e      	mov	r6, r3
 8013a14:	460f      	mov	r7, r1
 8013a16:	463d      	mov	r5, r7
 8013a18:	9808      	ldr	r0, [sp, #32]
 8013a1a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013a1e:	f001 fc67 	bl	80152f0 <__locale_ctype_ptr_l>
 8013a22:	4420      	add	r0, r4
 8013a24:	7843      	ldrb	r3, [r0, #1]
 8013a26:	f013 0308 	ands.w	r3, r3, #8
 8013a2a:	d132      	bne.n	8013a92 <_strtol_l.isra.0+0x8a>
 8013a2c:	2c2d      	cmp	r4, #45	; 0x2d
 8013a2e:	d132      	bne.n	8013a96 <_strtol_l.isra.0+0x8e>
 8013a30:	787c      	ldrb	r4, [r7, #1]
 8013a32:	1cbd      	adds	r5, r7, #2
 8013a34:	2201      	movs	r2, #1
 8013a36:	2e00      	cmp	r6, #0
 8013a38:	d05d      	beq.n	8013af6 <_strtol_l.isra.0+0xee>
 8013a3a:	2e10      	cmp	r6, #16
 8013a3c:	d109      	bne.n	8013a52 <_strtol_l.isra.0+0x4a>
 8013a3e:	2c30      	cmp	r4, #48	; 0x30
 8013a40:	d107      	bne.n	8013a52 <_strtol_l.isra.0+0x4a>
 8013a42:	782b      	ldrb	r3, [r5, #0]
 8013a44:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8013a48:	2b58      	cmp	r3, #88	; 0x58
 8013a4a:	d14f      	bne.n	8013aec <_strtol_l.isra.0+0xe4>
 8013a4c:	786c      	ldrb	r4, [r5, #1]
 8013a4e:	2610      	movs	r6, #16
 8013a50:	3502      	adds	r5, #2
 8013a52:	2a00      	cmp	r2, #0
 8013a54:	bf14      	ite	ne
 8013a56:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8013a5a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8013a5e:	2700      	movs	r7, #0
 8013a60:	fbb1 fcf6 	udiv	ip, r1, r6
 8013a64:	4638      	mov	r0, r7
 8013a66:	fb06 1e1c 	mls	lr, r6, ip, r1
 8013a6a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8013a6e:	2b09      	cmp	r3, #9
 8013a70:	d817      	bhi.n	8013aa2 <_strtol_l.isra.0+0x9a>
 8013a72:	461c      	mov	r4, r3
 8013a74:	42a6      	cmp	r6, r4
 8013a76:	dd23      	ble.n	8013ac0 <_strtol_l.isra.0+0xb8>
 8013a78:	1c7b      	adds	r3, r7, #1
 8013a7a:	d007      	beq.n	8013a8c <_strtol_l.isra.0+0x84>
 8013a7c:	4584      	cmp	ip, r0
 8013a7e:	d31c      	bcc.n	8013aba <_strtol_l.isra.0+0xb2>
 8013a80:	d101      	bne.n	8013a86 <_strtol_l.isra.0+0x7e>
 8013a82:	45a6      	cmp	lr, r4
 8013a84:	db19      	blt.n	8013aba <_strtol_l.isra.0+0xb2>
 8013a86:	fb00 4006 	mla	r0, r0, r6, r4
 8013a8a:	2701      	movs	r7, #1
 8013a8c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013a90:	e7eb      	b.n	8013a6a <_strtol_l.isra.0+0x62>
 8013a92:	462f      	mov	r7, r5
 8013a94:	e7bf      	b.n	8013a16 <_strtol_l.isra.0+0xe>
 8013a96:	2c2b      	cmp	r4, #43	; 0x2b
 8013a98:	bf04      	itt	eq
 8013a9a:	1cbd      	addeq	r5, r7, #2
 8013a9c:	787c      	ldrbeq	r4, [r7, #1]
 8013a9e:	461a      	mov	r2, r3
 8013aa0:	e7c9      	b.n	8013a36 <_strtol_l.isra.0+0x2e>
 8013aa2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8013aa6:	2b19      	cmp	r3, #25
 8013aa8:	d801      	bhi.n	8013aae <_strtol_l.isra.0+0xa6>
 8013aaa:	3c37      	subs	r4, #55	; 0x37
 8013aac:	e7e2      	b.n	8013a74 <_strtol_l.isra.0+0x6c>
 8013aae:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8013ab2:	2b19      	cmp	r3, #25
 8013ab4:	d804      	bhi.n	8013ac0 <_strtol_l.isra.0+0xb8>
 8013ab6:	3c57      	subs	r4, #87	; 0x57
 8013ab8:	e7dc      	b.n	8013a74 <_strtol_l.isra.0+0x6c>
 8013aba:	f04f 37ff 	mov.w	r7, #4294967295
 8013abe:	e7e5      	b.n	8013a8c <_strtol_l.isra.0+0x84>
 8013ac0:	1c7b      	adds	r3, r7, #1
 8013ac2:	d108      	bne.n	8013ad6 <_strtol_l.isra.0+0xce>
 8013ac4:	2322      	movs	r3, #34	; 0x22
 8013ac6:	f8c8 3000 	str.w	r3, [r8]
 8013aca:	4608      	mov	r0, r1
 8013acc:	f1ba 0f00 	cmp.w	sl, #0
 8013ad0:	d107      	bne.n	8013ae2 <_strtol_l.isra.0+0xda>
 8013ad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013ad6:	b102      	cbz	r2, 8013ada <_strtol_l.isra.0+0xd2>
 8013ad8:	4240      	negs	r0, r0
 8013ada:	f1ba 0f00 	cmp.w	sl, #0
 8013ade:	d0f8      	beq.n	8013ad2 <_strtol_l.isra.0+0xca>
 8013ae0:	b10f      	cbz	r7, 8013ae6 <_strtol_l.isra.0+0xde>
 8013ae2:	f105 39ff 	add.w	r9, r5, #4294967295
 8013ae6:	f8ca 9000 	str.w	r9, [sl]
 8013aea:	e7f2      	b.n	8013ad2 <_strtol_l.isra.0+0xca>
 8013aec:	2430      	movs	r4, #48	; 0x30
 8013aee:	2e00      	cmp	r6, #0
 8013af0:	d1af      	bne.n	8013a52 <_strtol_l.isra.0+0x4a>
 8013af2:	2608      	movs	r6, #8
 8013af4:	e7ad      	b.n	8013a52 <_strtol_l.isra.0+0x4a>
 8013af6:	2c30      	cmp	r4, #48	; 0x30
 8013af8:	d0a3      	beq.n	8013a42 <_strtol_l.isra.0+0x3a>
 8013afa:	260a      	movs	r6, #10
 8013afc:	e7a9      	b.n	8013a52 <_strtol_l.isra.0+0x4a>
	...

08013b00 <_strtol_r>:
 8013b00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013b02:	4c06      	ldr	r4, [pc, #24]	; (8013b1c <_strtol_r+0x1c>)
 8013b04:	4d06      	ldr	r5, [pc, #24]	; (8013b20 <_strtol_r+0x20>)
 8013b06:	6824      	ldr	r4, [r4, #0]
 8013b08:	6a24      	ldr	r4, [r4, #32]
 8013b0a:	2c00      	cmp	r4, #0
 8013b0c:	bf08      	it	eq
 8013b0e:	462c      	moveq	r4, r5
 8013b10:	9400      	str	r4, [sp, #0]
 8013b12:	f7ff ff79 	bl	8013a08 <_strtol_l.isra.0>
 8013b16:	b003      	add	sp, #12
 8013b18:	bd30      	pop	{r4, r5, pc}
 8013b1a:	bf00      	nop
 8013b1c:	2000000c 	.word	0x2000000c
 8013b20:	20000070 	.word	0x20000070

08013b24 <_vsiprintf_r>:
 8013b24:	b500      	push	{lr}
 8013b26:	b09b      	sub	sp, #108	; 0x6c
 8013b28:	9100      	str	r1, [sp, #0]
 8013b2a:	9104      	str	r1, [sp, #16]
 8013b2c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013b30:	9105      	str	r1, [sp, #20]
 8013b32:	9102      	str	r1, [sp, #8]
 8013b34:	4905      	ldr	r1, [pc, #20]	; (8013b4c <_vsiprintf_r+0x28>)
 8013b36:	9103      	str	r1, [sp, #12]
 8013b38:	4669      	mov	r1, sp
 8013b3a:	f002 f9a5 	bl	8015e88 <_svfiprintf_r>
 8013b3e:	9b00      	ldr	r3, [sp, #0]
 8013b40:	2200      	movs	r2, #0
 8013b42:	701a      	strb	r2, [r3, #0]
 8013b44:	b01b      	add	sp, #108	; 0x6c
 8013b46:	f85d fb04 	ldr.w	pc, [sp], #4
 8013b4a:	bf00      	nop
 8013b4c:	ffff0208 	.word	0xffff0208

08013b50 <vsiprintf>:
 8013b50:	4613      	mov	r3, r2
 8013b52:	460a      	mov	r2, r1
 8013b54:	4601      	mov	r1, r0
 8013b56:	4802      	ldr	r0, [pc, #8]	; (8013b60 <vsiprintf+0x10>)
 8013b58:	6800      	ldr	r0, [r0, #0]
 8013b5a:	f7ff bfe3 	b.w	8013b24 <_vsiprintf_r>
 8013b5e:	bf00      	nop
 8013b60:	2000000c 	.word	0x2000000c

08013b64 <__swbuf_r>:
 8013b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b66:	460e      	mov	r6, r1
 8013b68:	4614      	mov	r4, r2
 8013b6a:	4605      	mov	r5, r0
 8013b6c:	b118      	cbz	r0, 8013b76 <__swbuf_r+0x12>
 8013b6e:	6983      	ldr	r3, [r0, #24]
 8013b70:	b90b      	cbnz	r3, 8013b76 <__swbuf_r+0x12>
 8013b72:	f001 f80d 	bl	8014b90 <__sinit>
 8013b76:	4b21      	ldr	r3, [pc, #132]	; (8013bfc <__swbuf_r+0x98>)
 8013b78:	429c      	cmp	r4, r3
 8013b7a:	d12a      	bne.n	8013bd2 <__swbuf_r+0x6e>
 8013b7c:	686c      	ldr	r4, [r5, #4]
 8013b7e:	69a3      	ldr	r3, [r4, #24]
 8013b80:	60a3      	str	r3, [r4, #8]
 8013b82:	89a3      	ldrh	r3, [r4, #12]
 8013b84:	071a      	lsls	r2, r3, #28
 8013b86:	d52e      	bpl.n	8013be6 <__swbuf_r+0x82>
 8013b88:	6923      	ldr	r3, [r4, #16]
 8013b8a:	b363      	cbz	r3, 8013be6 <__swbuf_r+0x82>
 8013b8c:	6923      	ldr	r3, [r4, #16]
 8013b8e:	6820      	ldr	r0, [r4, #0]
 8013b90:	1ac0      	subs	r0, r0, r3
 8013b92:	6963      	ldr	r3, [r4, #20]
 8013b94:	b2f6      	uxtb	r6, r6
 8013b96:	4283      	cmp	r3, r0
 8013b98:	4637      	mov	r7, r6
 8013b9a:	dc04      	bgt.n	8013ba6 <__swbuf_r+0x42>
 8013b9c:	4621      	mov	r1, r4
 8013b9e:	4628      	mov	r0, r5
 8013ba0:	f000 ff8c 	bl	8014abc <_fflush_r>
 8013ba4:	bb28      	cbnz	r0, 8013bf2 <__swbuf_r+0x8e>
 8013ba6:	68a3      	ldr	r3, [r4, #8]
 8013ba8:	3b01      	subs	r3, #1
 8013baa:	60a3      	str	r3, [r4, #8]
 8013bac:	6823      	ldr	r3, [r4, #0]
 8013bae:	1c5a      	adds	r2, r3, #1
 8013bb0:	6022      	str	r2, [r4, #0]
 8013bb2:	701e      	strb	r6, [r3, #0]
 8013bb4:	6963      	ldr	r3, [r4, #20]
 8013bb6:	3001      	adds	r0, #1
 8013bb8:	4283      	cmp	r3, r0
 8013bba:	d004      	beq.n	8013bc6 <__swbuf_r+0x62>
 8013bbc:	89a3      	ldrh	r3, [r4, #12]
 8013bbe:	07db      	lsls	r3, r3, #31
 8013bc0:	d519      	bpl.n	8013bf6 <__swbuf_r+0x92>
 8013bc2:	2e0a      	cmp	r6, #10
 8013bc4:	d117      	bne.n	8013bf6 <__swbuf_r+0x92>
 8013bc6:	4621      	mov	r1, r4
 8013bc8:	4628      	mov	r0, r5
 8013bca:	f000 ff77 	bl	8014abc <_fflush_r>
 8013bce:	b190      	cbz	r0, 8013bf6 <__swbuf_r+0x92>
 8013bd0:	e00f      	b.n	8013bf2 <__swbuf_r+0x8e>
 8013bd2:	4b0b      	ldr	r3, [pc, #44]	; (8013c00 <__swbuf_r+0x9c>)
 8013bd4:	429c      	cmp	r4, r3
 8013bd6:	d101      	bne.n	8013bdc <__swbuf_r+0x78>
 8013bd8:	68ac      	ldr	r4, [r5, #8]
 8013bda:	e7d0      	b.n	8013b7e <__swbuf_r+0x1a>
 8013bdc:	4b09      	ldr	r3, [pc, #36]	; (8013c04 <__swbuf_r+0xa0>)
 8013bde:	429c      	cmp	r4, r3
 8013be0:	bf08      	it	eq
 8013be2:	68ec      	ldreq	r4, [r5, #12]
 8013be4:	e7cb      	b.n	8013b7e <__swbuf_r+0x1a>
 8013be6:	4621      	mov	r1, r4
 8013be8:	4628      	mov	r0, r5
 8013bea:	f000 f81f 	bl	8013c2c <__swsetup_r>
 8013bee:	2800      	cmp	r0, #0
 8013bf0:	d0cc      	beq.n	8013b8c <__swbuf_r+0x28>
 8013bf2:	f04f 37ff 	mov.w	r7, #4294967295
 8013bf6:	4638      	mov	r0, r7
 8013bf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013bfa:	bf00      	nop
 8013bfc:	08017598 	.word	0x08017598
 8013c00:	080175b8 	.word	0x080175b8
 8013c04:	08017578 	.word	0x08017578

08013c08 <_write_r>:
 8013c08:	b538      	push	{r3, r4, r5, lr}
 8013c0a:	4c07      	ldr	r4, [pc, #28]	; (8013c28 <_write_r+0x20>)
 8013c0c:	4605      	mov	r5, r0
 8013c0e:	4608      	mov	r0, r1
 8013c10:	4611      	mov	r1, r2
 8013c12:	2200      	movs	r2, #0
 8013c14:	6022      	str	r2, [r4, #0]
 8013c16:	461a      	mov	r2, r3
 8013c18:	f7ef fc53 	bl	80034c2 <_write>
 8013c1c:	1c43      	adds	r3, r0, #1
 8013c1e:	d102      	bne.n	8013c26 <_write_r+0x1e>
 8013c20:	6823      	ldr	r3, [r4, #0]
 8013c22:	b103      	cbz	r3, 8013c26 <_write_r+0x1e>
 8013c24:	602b      	str	r3, [r5, #0]
 8013c26:	bd38      	pop	{r3, r4, r5, pc}
 8013c28:	2000c6ac 	.word	0x2000c6ac

08013c2c <__swsetup_r>:
 8013c2c:	4b32      	ldr	r3, [pc, #200]	; (8013cf8 <__swsetup_r+0xcc>)
 8013c2e:	b570      	push	{r4, r5, r6, lr}
 8013c30:	681d      	ldr	r5, [r3, #0]
 8013c32:	4606      	mov	r6, r0
 8013c34:	460c      	mov	r4, r1
 8013c36:	b125      	cbz	r5, 8013c42 <__swsetup_r+0x16>
 8013c38:	69ab      	ldr	r3, [r5, #24]
 8013c3a:	b913      	cbnz	r3, 8013c42 <__swsetup_r+0x16>
 8013c3c:	4628      	mov	r0, r5
 8013c3e:	f000 ffa7 	bl	8014b90 <__sinit>
 8013c42:	4b2e      	ldr	r3, [pc, #184]	; (8013cfc <__swsetup_r+0xd0>)
 8013c44:	429c      	cmp	r4, r3
 8013c46:	d10f      	bne.n	8013c68 <__swsetup_r+0x3c>
 8013c48:	686c      	ldr	r4, [r5, #4]
 8013c4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013c4e:	b29a      	uxth	r2, r3
 8013c50:	0715      	lsls	r5, r2, #28
 8013c52:	d42c      	bmi.n	8013cae <__swsetup_r+0x82>
 8013c54:	06d0      	lsls	r0, r2, #27
 8013c56:	d411      	bmi.n	8013c7c <__swsetup_r+0x50>
 8013c58:	2209      	movs	r2, #9
 8013c5a:	6032      	str	r2, [r6, #0]
 8013c5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013c60:	81a3      	strh	r3, [r4, #12]
 8013c62:	f04f 30ff 	mov.w	r0, #4294967295
 8013c66:	e03e      	b.n	8013ce6 <__swsetup_r+0xba>
 8013c68:	4b25      	ldr	r3, [pc, #148]	; (8013d00 <__swsetup_r+0xd4>)
 8013c6a:	429c      	cmp	r4, r3
 8013c6c:	d101      	bne.n	8013c72 <__swsetup_r+0x46>
 8013c6e:	68ac      	ldr	r4, [r5, #8]
 8013c70:	e7eb      	b.n	8013c4a <__swsetup_r+0x1e>
 8013c72:	4b24      	ldr	r3, [pc, #144]	; (8013d04 <__swsetup_r+0xd8>)
 8013c74:	429c      	cmp	r4, r3
 8013c76:	bf08      	it	eq
 8013c78:	68ec      	ldreq	r4, [r5, #12]
 8013c7a:	e7e6      	b.n	8013c4a <__swsetup_r+0x1e>
 8013c7c:	0751      	lsls	r1, r2, #29
 8013c7e:	d512      	bpl.n	8013ca6 <__swsetup_r+0x7a>
 8013c80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013c82:	b141      	cbz	r1, 8013c96 <__swsetup_r+0x6a>
 8013c84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013c88:	4299      	cmp	r1, r3
 8013c8a:	d002      	beq.n	8013c92 <__swsetup_r+0x66>
 8013c8c:	4630      	mov	r0, r6
 8013c8e:	f001 fff9 	bl	8015c84 <_free_r>
 8013c92:	2300      	movs	r3, #0
 8013c94:	6363      	str	r3, [r4, #52]	; 0x34
 8013c96:	89a3      	ldrh	r3, [r4, #12]
 8013c98:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013c9c:	81a3      	strh	r3, [r4, #12]
 8013c9e:	2300      	movs	r3, #0
 8013ca0:	6063      	str	r3, [r4, #4]
 8013ca2:	6923      	ldr	r3, [r4, #16]
 8013ca4:	6023      	str	r3, [r4, #0]
 8013ca6:	89a3      	ldrh	r3, [r4, #12]
 8013ca8:	f043 0308 	orr.w	r3, r3, #8
 8013cac:	81a3      	strh	r3, [r4, #12]
 8013cae:	6923      	ldr	r3, [r4, #16]
 8013cb0:	b94b      	cbnz	r3, 8013cc6 <__swsetup_r+0x9a>
 8013cb2:	89a3      	ldrh	r3, [r4, #12]
 8013cb4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013cb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013cbc:	d003      	beq.n	8013cc6 <__swsetup_r+0x9a>
 8013cbe:	4621      	mov	r1, r4
 8013cc0:	4630      	mov	r0, r6
 8013cc2:	f001 fb6d 	bl	80153a0 <__smakebuf_r>
 8013cc6:	89a2      	ldrh	r2, [r4, #12]
 8013cc8:	f012 0301 	ands.w	r3, r2, #1
 8013ccc:	d00c      	beq.n	8013ce8 <__swsetup_r+0xbc>
 8013cce:	2300      	movs	r3, #0
 8013cd0:	60a3      	str	r3, [r4, #8]
 8013cd2:	6963      	ldr	r3, [r4, #20]
 8013cd4:	425b      	negs	r3, r3
 8013cd6:	61a3      	str	r3, [r4, #24]
 8013cd8:	6923      	ldr	r3, [r4, #16]
 8013cda:	b953      	cbnz	r3, 8013cf2 <__swsetup_r+0xc6>
 8013cdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013ce0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8013ce4:	d1ba      	bne.n	8013c5c <__swsetup_r+0x30>
 8013ce6:	bd70      	pop	{r4, r5, r6, pc}
 8013ce8:	0792      	lsls	r2, r2, #30
 8013cea:	bf58      	it	pl
 8013cec:	6963      	ldrpl	r3, [r4, #20]
 8013cee:	60a3      	str	r3, [r4, #8]
 8013cf0:	e7f2      	b.n	8013cd8 <__swsetup_r+0xac>
 8013cf2:	2000      	movs	r0, #0
 8013cf4:	e7f7      	b.n	8013ce6 <__swsetup_r+0xba>
 8013cf6:	bf00      	nop
 8013cf8:	2000000c 	.word	0x2000000c
 8013cfc:	08017598 	.word	0x08017598
 8013d00:	080175b8 	.word	0x080175b8
 8013d04:	08017578 	.word	0x08017578

08013d08 <_close_r>:
 8013d08:	b538      	push	{r3, r4, r5, lr}
 8013d0a:	4c06      	ldr	r4, [pc, #24]	; (8013d24 <_close_r+0x1c>)
 8013d0c:	2300      	movs	r3, #0
 8013d0e:	4605      	mov	r5, r0
 8013d10:	4608      	mov	r0, r1
 8013d12:	6023      	str	r3, [r4, #0]
 8013d14:	f7f1 f933 	bl	8004f7e <_close>
 8013d18:	1c43      	adds	r3, r0, #1
 8013d1a:	d102      	bne.n	8013d22 <_close_r+0x1a>
 8013d1c:	6823      	ldr	r3, [r4, #0]
 8013d1e:	b103      	cbz	r3, 8013d22 <_close_r+0x1a>
 8013d20:	602b      	str	r3, [r5, #0]
 8013d22:	bd38      	pop	{r3, r4, r5, pc}
 8013d24:	2000c6ac 	.word	0x2000c6ac

08013d28 <quorem>:
 8013d28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d2c:	6903      	ldr	r3, [r0, #16]
 8013d2e:	690c      	ldr	r4, [r1, #16]
 8013d30:	42a3      	cmp	r3, r4
 8013d32:	4680      	mov	r8, r0
 8013d34:	f2c0 8082 	blt.w	8013e3c <quorem+0x114>
 8013d38:	3c01      	subs	r4, #1
 8013d3a:	f101 0714 	add.w	r7, r1, #20
 8013d3e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8013d42:	f100 0614 	add.w	r6, r0, #20
 8013d46:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8013d4a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8013d4e:	eb06 030c 	add.w	r3, r6, ip
 8013d52:	3501      	adds	r5, #1
 8013d54:	eb07 090c 	add.w	r9, r7, ip
 8013d58:	9301      	str	r3, [sp, #4]
 8013d5a:	fbb0 f5f5 	udiv	r5, r0, r5
 8013d5e:	b395      	cbz	r5, 8013dc6 <quorem+0x9e>
 8013d60:	f04f 0a00 	mov.w	sl, #0
 8013d64:	4638      	mov	r0, r7
 8013d66:	46b6      	mov	lr, r6
 8013d68:	46d3      	mov	fp, sl
 8013d6a:	f850 2b04 	ldr.w	r2, [r0], #4
 8013d6e:	b293      	uxth	r3, r2
 8013d70:	fb05 a303 	mla	r3, r5, r3, sl
 8013d74:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013d78:	b29b      	uxth	r3, r3
 8013d7a:	ebab 0303 	sub.w	r3, fp, r3
 8013d7e:	0c12      	lsrs	r2, r2, #16
 8013d80:	f8de b000 	ldr.w	fp, [lr]
 8013d84:	fb05 a202 	mla	r2, r5, r2, sl
 8013d88:	fa13 f38b 	uxtah	r3, r3, fp
 8013d8c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8013d90:	fa1f fb82 	uxth.w	fp, r2
 8013d94:	f8de 2000 	ldr.w	r2, [lr]
 8013d98:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8013d9c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013da0:	b29b      	uxth	r3, r3
 8013da2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013da6:	4581      	cmp	r9, r0
 8013da8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8013dac:	f84e 3b04 	str.w	r3, [lr], #4
 8013db0:	d2db      	bcs.n	8013d6a <quorem+0x42>
 8013db2:	f856 300c 	ldr.w	r3, [r6, ip]
 8013db6:	b933      	cbnz	r3, 8013dc6 <quorem+0x9e>
 8013db8:	9b01      	ldr	r3, [sp, #4]
 8013dba:	3b04      	subs	r3, #4
 8013dbc:	429e      	cmp	r6, r3
 8013dbe:	461a      	mov	r2, r3
 8013dc0:	d330      	bcc.n	8013e24 <quorem+0xfc>
 8013dc2:	f8c8 4010 	str.w	r4, [r8, #16]
 8013dc6:	4640      	mov	r0, r8
 8013dc8:	f001 fda2 	bl	8015910 <__mcmp>
 8013dcc:	2800      	cmp	r0, #0
 8013dce:	db25      	blt.n	8013e1c <quorem+0xf4>
 8013dd0:	3501      	adds	r5, #1
 8013dd2:	4630      	mov	r0, r6
 8013dd4:	f04f 0c00 	mov.w	ip, #0
 8013dd8:	f857 2b04 	ldr.w	r2, [r7], #4
 8013ddc:	f8d0 e000 	ldr.w	lr, [r0]
 8013de0:	b293      	uxth	r3, r2
 8013de2:	ebac 0303 	sub.w	r3, ip, r3
 8013de6:	0c12      	lsrs	r2, r2, #16
 8013de8:	fa13 f38e 	uxtah	r3, r3, lr
 8013dec:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8013df0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013df4:	b29b      	uxth	r3, r3
 8013df6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013dfa:	45b9      	cmp	r9, r7
 8013dfc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8013e00:	f840 3b04 	str.w	r3, [r0], #4
 8013e04:	d2e8      	bcs.n	8013dd8 <quorem+0xb0>
 8013e06:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8013e0a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8013e0e:	b92a      	cbnz	r2, 8013e1c <quorem+0xf4>
 8013e10:	3b04      	subs	r3, #4
 8013e12:	429e      	cmp	r6, r3
 8013e14:	461a      	mov	r2, r3
 8013e16:	d30b      	bcc.n	8013e30 <quorem+0x108>
 8013e18:	f8c8 4010 	str.w	r4, [r8, #16]
 8013e1c:	4628      	mov	r0, r5
 8013e1e:	b003      	add	sp, #12
 8013e20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e24:	6812      	ldr	r2, [r2, #0]
 8013e26:	3b04      	subs	r3, #4
 8013e28:	2a00      	cmp	r2, #0
 8013e2a:	d1ca      	bne.n	8013dc2 <quorem+0x9a>
 8013e2c:	3c01      	subs	r4, #1
 8013e2e:	e7c5      	b.n	8013dbc <quorem+0x94>
 8013e30:	6812      	ldr	r2, [r2, #0]
 8013e32:	3b04      	subs	r3, #4
 8013e34:	2a00      	cmp	r2, #0
 8013e36:	d1ef      	bne.n	8013e18 <quorem+0xf0>
 8013e38:	3c01      	subs	r4, #1
 8013e3a:	e7ea      	b.n	8013e12 <quorem+0xea>
 8013e3c:	2000      	movs	r0, #0
 8013e3e:	e7ee      	b.n	8013e1e <quorem+0xf6>

08013e40 <_dtoa_r>:
 8013e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e44:	ec57 6b10 	vmov	r6, r7, d0
 8013e48:	b097      	sub	sp, #92	; 0x5c
 8013e4a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8013e4c:	9106      	str	r1, [sp, #24]
 8013e4e:	4604      	mov	r4, r0
 8013e50:	920b      	str	r2, [sp, #44]	; 0x2c
 8013e52:	9312      	str	r3, [sp, #72]	; 0x48
 8013e54:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8013e58:	e9cd 6700 	strd	r6, r7, [sp]
 8013e5c:	b93d      	cbnz	r5, 8013e6e <_dtoa_r+0x2e>
 8013e5e:	2010      	movs	r0, #16
 8013e60:	f001 fade 	bl	8015420 <malloc>
 8013e64:	6260      	str	r0, [r4, #36]	; 0x24
 8013e66:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8013e6a:	6005      	str	r5, [r0, #0]
 8013e6c:	60c5      	str	r5, [r0, #12]
 8013e6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013e70:	6819      	ldr	r1, [r3, #0]
 8013e72:	b151      	cbz	r1, 8013e8a <_dtoa_r+0x4a>
 8013e74:	685a      	ldr	r2, [r3, #4]
 8013e76:	604a      	str	r2, [r1, #4]
 8013e78:	2301      	movs	r3, #1
 8013e7a:	4093      	lsls	r3, r2
 8013e7c:	608b      	str	r3, [r1, #8]
 8013e7e:	4620      	mov	r0, r4
 8013e80:	f001 fb27 	bl	80154d2 <_Bfree>
 8013e84:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013e86:	2200      	movs	r2, #0
 8013e88:	601a      	str	r2, [r3, #0]
 8013e8a:	1e3b      	subs	r3, r7, #0
 8013e8c:	bfbb      	ittet	lt
 8013e8e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8013e92:	9301      	strlt	r3, [sp, #4]
 8013e94:	2300      	movge	r3, #0
 8013e96:	2201      	movlt	r2, #1
 8013e98:	bfac      	ite	ge
 8013e9a:	f8c8 3000 	strge.w	r3, [r8]
 8013e9e:	f8c8 2000 	strlt.w	r2, [r8]
 8013ea2:	4baf      	ldr	r3, [pc, #700]	; (8014160 <_dtoa_r+0x320>)
 8013ea4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8013ea8:	ea33 0308 	bics.w	r3, r3, r8
 8013eac:	d114      	bne.n	8013ed8 <_dtoa_r+0x98>
 8013eae:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013eb0:	f242 730f 	movw	r3, #9999	; 0x270f
 8013eb4:	6013      	str	r3, [r2, #0]
 8013eb6:	9b00      	ldr	r3, [sp, #0]
 8013eb8:	b923      	cbnz	r3, 8013ec4 <_dtoa_r+0x84>
 8013eba:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8013ebe:	2800      	cmp	r0, #0
 8013ec0:	f000 8542 	beq.w	8014948 <_dtoa_r+0xb08>
 8013ec4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013ec6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8014174 <_dtoa_r+0x334>
 8013eca:	2b00      	cmp	r3, #0
 8013ecc:	f000 8544 	beq.w	8014958 <_dtoa_r+0xb18>
 8013ed0:	f10b 0303 	add.w	r3, fp, #3
 8013ed4:	f000 bd3e 	b.w	8014954 <_dtoa_r+0xb14>
 8013ed8:	e9dd 6700 	ldrd	r6, r7, [sp]
 8013edc:	2200      	movs	r2, #0
 8013ede:	2300      	movs	r3, #0
 8013ee0:	4630      	mov	r0, r6
 8013ee2:	4639      	mov	r1, r7
 8013ee4:	f7ec fe08 	bl	8000af8 <__aeabi_dcmpeq>
 8013ee8:	4681      	mov	r9, r0
 8013eea:	b168      	cbz	r0, 8013f08 <_dtoa_r+0xc8>
 8013eec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8013eee:	2301      	movs	r3, #1
 8013ef0:	6013      	str	r3, [r2, #0]
 8013ef2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013ef4:	2b00      	cmp	r3, #0
 8013ef6:	f000 8524 	beq.w	8014942 <_dtoa_r+0xb02>
 8013efa:	4b9a      	ldr	r3, [pc, #616]	; (8014164 <_dtoa_r+0x324>)
 8013efc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013efe:	f103 3bff 	add.w	fp, r3, #4294967295
 8013f02:	6013      	str	r3, [r2, #0]
 8013f04:	f000 bd28 	b.w	8014958 <_dtoa_r+0xb18>
 8013f08:	aa14      	add	r2, sp, #80	; 0x50
 8013f0a:	a915      	add	r1, sp, #84	; 0x54
 8013f0c:	ec47 6b10 	vmov	d0, r6, r7
 8013f10:	4620      	mov	r0, r4
 8013f12:	f001 fdeb 	bl	8015aec <__d2b>
 8013f16:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8013f1a:	9004      	str	r0, [sp, #16]
 8013f1c:	2d00      	cmp	r5, #0
 8013f1e:	d07c      	beq.n	801401a <_dtoa_r+0x1da>
 8013f20:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8013f24:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8013f28:	46b2      	mov	sl, r6
 8013f2a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8013f2e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8013f32:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8013f36:	2200      	movs	r2, #0
 8013f38:	4b8b      	ldr	r3, [pc, #556]	; (8014168 <_dtoa_r+0x328>)
 8013f3a:	4650      	mov	r0, sl
 8013f3c:	4659      	mov	r1, fp
 8013f3e:	f7ec f9bb 	bl	80002b8 <__aeabi_dsub>
 8013f42:	a381      	add	r3, pc, #516	; (adr r3, 8014148 <_dtoa_r+0x308>)
 8013f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f48:	f7ec fb6e 	bl	8000628 <__aeabi_dmul>
 8013f4c:	a380      	add	r3, pc, #512	; (adr r3, 8014150 <_dtoa_r+0x310>)
 8013f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f52:	f7ec f9b3 	bl	80002bc <__adddf3>
 8013f56:	4606      	mov	r6, r0
 8013f58:	4628      	mov	r0, r5
 8013f5a:	460f      	mov	r7, r1
 8013f5c:	f7ec fafa 	bl	8000554 <__aeabi_i2d>
 8013f60:	a37d      	add	r3, pc, #500	; (adr r3, 8014158 <_dtoa_r+0x318>)
 8013f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f66:	f7ec fb5f 	bl	8000628 <__aeabi_dmul>
 8013f6a:	4602      	mov	r2, r0
 8013f6c:	460b      	mov	r3, r1
 8013f6e:	4630      	mov	r0, r6
 8013f70:	4639      	mov	r1, r7
 8013f72:	f7ec f9a3 	bl	80002bc <__adddf3>
 8013f76:	4606      	mov	r6, r0
 8013f78:	460f      	mov	r7, r1
 8013f7a:	f7ec fe05 	bl	8000b88 <__aeabi_d2iz>
 8013f7e:	2200      	movs	r2, #0
 8013f80:	4682      	mov	sl, r0
 8013f82:	2300      	movs	r3, #0
 8013f84:	4630      	mov	r0, r6
 8013f86:	4639      	mov	r1, r7
 8013f88:	f7ec fdc0 	bl	8000b0c <__aeabi_dcmplt>
 8013f8c:	b148      	cbz	r0, 8013fa2 <_dtoa_r+0x162>
 8013f8e:	4650      	mov	r0, sl
 8013f90:	f7ec fae0 	bl	8000554 <__aeabi_i2d>
 8013f94:	4632      	mov	r2, r6
 8013f96:	463b      	mov	r3, r7
 8013f98:	f7ec fdae 	bl	8000af8 <__aeabi_dcmpeq>
 8013f9c:	b908      	cbnz	r0, 8013fa2 <_dtoa_r+0x162>
 8013f9e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013fa2:	f1ba 0f16 	cmp.w	sl, #22
 8013fa6:	d859      	bhi.n	801405c <_dtoa_r+0x21c>
 8013fa8:	4970      	ldr	r1, [pc, #448]	; (801416c <_dtoa_r+0x32c>)
 8013faa:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8013fae:	e9dd 2300 	ldrd	r2, r3, [sp]
 8013fb2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8013fb6:	f7ec fdc7 	bl	8000b48 <__aeabi_dcmpgt>
 8013fba:	2800      	cmp	r0, #0
 8013fbc:	d050      	beq.n	8014060 <_dtoa_r+0x220>
 8013fbe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013fc2:	2300      	movs	r3, #0
 8013fc4:	930f      	str	r3, [sp, #60]	; 0x3c
 8013fc6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8013fc8:	1b5d      	subs	r5, r3, r5
 8013fca:	f1b5 0801 	subs.w	r8, r5, #1
 8013fce:	bf49      	itett	mi
 8013fd0:	f1c5 0301 	rsbmi	r3, r5, #1
 8013fd4:	2300      	movpl	r3, #0
 8013fd6:	9305      	strmi	r3, [sp, #20]
 8013fd8:	f04f 0800 	movmi.w	r8, #0
 8013fdc:	bf58      	it	pl
 8013fde:	9305      	strpl	r3, [sp, #20]
 8013fe0:	f1ba 0f00 	cmp.w	sl, #0
 8013fe4:	db3e      	blt.n	8014064 <_dtoa_r+0x224>
 8013fe6:	2300      	movs	r3, #0
 8013fe8:	44d0      	add	r8, sl
 8013fea:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8013fee:	9307      	str	r3, [sp, #28]
 8013ff0:	9b06      	ldr	r3, [sp, #24]
 8013ff2:	2b09      	cmp	r3, #9
 8013ff4:	f200 8090 	bhi.w	8014118 <_dtoa_r+0x2d8>
 8013ff8:	2b05      	cmp	r3, #5
 8013ffa:	bfc4      	itt	gt
 8013ffc:	3b04      	subgt	r3, #4
 8013ffe:	9306      	strgt	r3, [sp, #24]
 8014000:	9b06      	ldr	r3, [sp, #24]
 8014002:	f1a3 0302 	sub.w	r3, r3, #2
 8014006:	bfcc      	ite	gt
 8014008:	2500      	movgt	r5, #0
 801400a:	2501      	movle	r5, #1
 801400c:	2b03      	cmp	r3, #3
 801400e:	f200 808f 	bhi.w	8014130 <_dtoa_r+0x2f0>
 8014012:	e8df f003 	tbb	[pc, r3]
 8014016:	7f7d      	.short	0x7f7d
 8014018:	7131      	.short	0x7131
 801401a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 801401e:	441d      	add	r5, r3
 8014020:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8014024:	2820      	cmp	r0, #32
 8014026:	dd13      	ble.n	8014050 <_dtoa_r+0x210>
 8014028:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 801402c:	9b00      	ldr	r3, [sp, #0]
 801402e:	fa08 f800 	lsl.w	r8, r8, r0
 8014032:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8014036:	fa23 f000 	lsr.w	r0, r3, r0
 801403a:	ea48 0000 	orr.w	r0, r8, r0
 801403e:	f7ec fa79 	bl	8000534 <__aeabi_ui2d>
 8014042:	2301      	movs	r3, #1
 8014044:	4682      	mov	sl, r0
 8014046:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 801404a:	3d01      	subs	r5, #1
 801404c:	9313      	str	r3, [sp, #76]	; 0x4c
 801404e:	e772      	b.n	8013f36 <_dtoa_r+0xf6>
 8014050:	9b00      	ldr	r3, [sp, #0]
 8014052:	f1c0 0020 	rsb	r0, r0, #32
 8014056:	fa03 f000 	lsl.w	r0, r3, r0
 801405a:	e7f0      	b.n	801403e <_dtoa_r+0x1fe>
 801405c:	2301      	movs	r3, #1
 801405e:	e7b1      	b.n	8013fc4 <_dtoa_r+0x184>
 8014060:	900f      	str	r0, [sp, #60]	; 0x3c
 8014062:	e7b0      	b.n	8013fc6 <_dtoa_r+0x186>
 8014064:	9b05      	ldr	r3, [sp, #20]
 8014066:	eba3 030a 	sub.w	r3, r3, sl
 801406a:	9305      	str	r3, [sp, #20]
 801406c:	f1ca 0300 	rsb	r3, sl, #0
 8014070:	9307      	str	r3, [sp, #28]
 8014072:	2300      	movs	r3, #0
 8014074:	930e      	str	r3, [sp, #56]	; 0x38
 8014076:	e7bb      	b.n	8013ff0 <_dtoa_r+0x1b0>
 8014078:	2301      	movs	r3, #1
 801407a:	930a      	str	r3, [sp, #40]	; 0x28
 801407c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801407e:	2b00      	cmp	r3, #0
 8014080:	dd59      	ble.n	8014136 <_dtoa_r+0x2f6>
 8014082:	9302      	str	r3, [sp, #8]
 8014084:	4699      	mov	r9, r3
 8014086:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8014088:	2200      	movs	r2, #0
 801408a:	6072      	str	r2, [r6, #4]
 801408c:	2204      	movs	r2, #4
 801408e:	f102 0014 	add.w	r0, r2, #20
 8014092:	4298      	cmp	r0, r3
 8014094:	6871      	ldr	r1, [r6, #4]
 8014096:	d953      	bls.n	8014140 <_dtoa_r+0x300>
 8014098:	4620      	mov	r0, r4
 801409a:	f001 f9e6 	bl	801546a <_Balloc>
 801409e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80140a0:	6030      	str	r0, [r6, #0]
 80140a2:	f1b9 0f0e 	cmp.w	r9, #14
 80140a6:	f8d3 b000 	ldr.w	fp, [r3]
 80140aa:	f200 80e6 	bhi.w	801427a <_dtoa_r+0x43a>
 80140ae:	2d00      	cmp	r5, #0
 80140b0:	f000 80e3 	beq.w	801427a <_dtoa_r+0x43a>
 80140b4:	ed9d 7b00 	vldr	d7, [sp]
 80140b8:	f1ba 0f00 	cmp.w	sl, #0
 80140bc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80140c0:	dd74      	ble.n	80141ac <_dtoa_r+0x36c>
 80140c2:	4a2a      	ldr	r2, [pc, #168]	; (801416c <_dtoa_r+0x32c>)
 80140c4:	f00a 030f 	and.w	r3, sl, #15
 80140c8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80140cc:	ed93 7b00 	vldr	d7, [r3]
 80140d0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80140d4:	06f0      	lsls	r0, r6, #27
 80140d6:	ed8d 7b08 	vstr	d7, [sp, #32]
 80140da:	d565      	bpl.n	80141a8 <_dtoa_r+0x368>
 80140dc:	4b24      	ldr	r3, [pc, #144]	; (8014170 <_dtoa_r+0x330>)
 80140de:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80140e2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80140e6:	f7ec fbc9 	bl	800087c <__aeabi_ddiv>
 80140ea:	e9cd 0100 	strd	r0, r1, [sp]
 80140ee:	f006 060f 	and.w	r6, r6, #15
 80140f2:	2503      	movs	r5, #3
 80140f4:	4f1e      	ldr	r7, [pc, #120]	; (8014170 <_dtoa_r+0x330>)
 80140f6:	e04c      	b.n	8014192 <_dtoa_r+0x352>
 80140f8:	2301      	movs	r3, #1
 80140fa:	930a      	str	r3, [sp, #40]	; 0x28
 80140fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80140fe:	4453      	add	r3, sl
 8014100:	f103 0901 	add.w	r9, r3, #1
 8014104:	9302      	str	r3, [sp, #8]
 8014106:	464b      	mov	r3, r9
 8014108:	2b01      	cmp	r3, #1
 801410a:	bfb8      	it	lt
 801410c:	2301      	movlt	r3, #1
 801410e:	e7ba      	b.n	8014086 <_dtoa_r+0x246>
 8014110:	2300      	movs	r3, #0
 8014112:	e7b2      	b.n	801407a <_dtoa_r+0x23a>
 8014114:	2300      	movs	r3, #0
 8014116:	e7f0      	b.n	80140fa <_dtoa_r+0x2ba>
 8014118:	2501      	movs	r5, #1
 801411a:	2300      	movs	r3, #0
 801411c:	9306      	str	r3, [sp, #24]
 801411e:	950a      	str	r5, [sp, #40]	; 0x28
 8014120:	f04f 33ff 	mov.w	r3, #4294967295
 8014124:	9302      	str	r3, [sp, #8]
 8014126:	4699      	mov	r9, r3
 8014128:	2200      	movs	r2, #0
 801412a:	2312      	movs	r3, #18
 801412c:	920b      	str	r2, [sp, #44]	; 0x2c
 801412e:	e7aa      	b.n	8014086 <_dtoa_r+0x246>
 8014130:	2301      	movs	r3, #1
 8014132:	930a      	str	r3, [sp, #40]	; 0x28
 8014134:	e7f4      	b.n	8014120 <_dtoa_r+0x2e0>
 8014136:	2301      	movs	r3, #1
 8014138:	9302      	str	r3, [sp, #8]
 801413a:	4699      	mov	r9, r3
 801413c:	461a      	mov	r2, r3
 801413e:	e7f5      	b.n	801412c <_dtoa_r+0x2ec>
 8014140:	3101      	adds	r1, #1
 8014142:	6071      	str	r1, [r6, #4]
 8014144:	0052      	lsls	r2, r2, #1
 8014146:	e7a2      	b.n	801408e <_dtoa_r+0x24e>
 8014148:	636f4361 	.word	0x636f4361
 801414c:	3fd287a7 	.word	0x3fd287a7
 8014150:	8b60c8b3 	.word	0x8b60c8b3
 8014154:	3fc68a28 	.word	0x3fc68a28
 8014158:	509f79fb 	.word	0x509f79fb
 801415c:	3fd34413 	.word	0x3fd34413
 8014160:	7ff00000 	.word	0x7ff00000
 8014164:	0801770c 	.word	0x0801770c
 8014168:	3ff80000 	.word	0x3ff80000
 801416c:	08017610 	.word	0x08017610
 8014170:	080175e8 	.word	0x080175e8
 8014174:	08017571 	.word	0x08017571
 8014178:	07f1      	lsls	r1, r6, #31
 801417a:	d508      	bpl.n	801418e <_dtoa_r+0x34e>
 801417c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8014180:	e9d7 2300 	ldrd	r2, r3, [r7]
 8014184:	f7ec fa50 	bl	8000628 <__aeabi_dmul>
 8014188:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801418c:	3501      	adds	r5, #1
 801418e:	1076      	asrs	r6, r6, #1
 8014190:	3708      	adds	r7, #8
 8014192:	2e00      	cmp	r6, #0
 8014194:	d1f0      	bne.n	8014178 <_dtoa_r+0x338>
 8014196:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801419a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801419e:	f7ec fb6d 	bl	800087c <__aeabi_ddiv>
 80141a2:	e9cd 0100 	strd	r0, r1, [sp]
 80141a6:	e01a      	b.n	80141de <_dtoa_r+0x39e>
 80141a8:	2502      	movs	r5, #2
 80141aa:	e7a3      	b.n	80140f4 <_dtoa_r+0x2b4>
 80141ac:	f000 80a0 	beq.w	80142f0 <_dtoa_r+0x4b0>
 80141b0:	f1ca 0600 	rsb	r6, sl, #0
 80141b4:	4b9f      	ldr	r3, [pc, #636]	; (8014434 <_dtoa_r+0x5f4>)
 80141b6:	4fa0      	ldr	r7, [pc, #640]	; (8014438 <_dtoa_r+0x5f8>)
 80141b8:	f006 020f 	and.w	r2, r6, #15
 80141bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80141c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80141c4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80141c8:	f7ec fa2e 	bl	8000628 <__aeabi_dmul>
 80141cc:	e9cd 0100 	strd	r0, r1, [sp]
 80141d0:	1136      	asrs	r6, r6, #4
 80141d2:	2300      	movs	r3, #0
 80141d4:	2502      	movs	r5, #2
 80141d6:	2e00      	cmp	r6, #0
 80141d8:	d17f      	bne.n	80142da <_dtoa_r+0x49a>
 80141da:	2b00      	cmp	r3, #0
 80141dc:	d1e1      	bne.n	80141a2 <_dtoa_r+0x362>
 80141de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80141e0:	2b00      	cmp	r3, #0
 80141e2:	f000 8087 	beq.w	80142f4 <_dtoa_r+0x4b4>
 80141e6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80141ea:	2200      	movs	r2, #0
 80141ec:	4b93      	ldr	r3, [pc, #588]	; (801443c <_dtoa_r+0x5fc>)
 80141ee:	4630      	mov	r0, r6
 80141f0:	4639      	mov	r1, r7
 80141f2:	f7ec fc8b 	bl	8000b0c <__aeabi_dcmplt>
 80141f6:	2800      	cmp	r0, #0
 80141f8:	d07c      	beq.n	80142f4 <_dtoa_r+0x4b4>
 80141fa:	f1b9 0f00 	cmp.w	r9, #0
 80141fe:	d079      	beq.n	80142f4 <_dtoa_r+0x4b4>
 8014200:	9b02      	ldr	r3, [sp, #8]
 8014202:	2b00      	cmp	r3, #0
 8014204:	dd35      	ble.n	8014272 <_dtoa_r+0x432>
 8014206:	f10a 33ff 	add.w	r3, sl, #4294967295
 801420a:	9308      	str	r3, [sp, #32]
 801420c:	4639      	mov	r1, r7
 801420e:	2200      	movs	r2, #0
 8014210:	4b8b      	ldr	r3, [pc, #556]	; (8014440 <_dtoa_r+0x600>)
 8014212:	4630      	mov	r0, r6
 8014214:	f7ec fa08 	bl	8000628 <__aeabi_dmul>
 8014218:	e9cd 0100 	strd	r0, r1, [sp]
 801421c:	9f02      	ldr	r7, [sp, #8]
 801421e:	3501      	adds	r5, #1
 8014220:	4628      	mov	r0, r5
 8014222:	f7ec f997 	bl	8000554 <__aeabi_i2d>
 8014226:	e9dd 2300 	ldrd	r2, r3, [sp]
 801422a:	f7ec f9fd 	bl	8000628 <__aeabi_dmul>
 801422e:	2200      	movs	r2, #0
 8014230:	4b84      	ldr	r3, [pc, #528]	; (8014444 <_dtoa_r+0x604>)
 8014232:	f7ec f843 	bl	80002bc <__adddf3>
 8014236:	4605      	mov	r5, r0
 8014238:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 801423c:	2f00      	cmp	r7, #0
 801423e:	d15d      	bne.n	80142fc <_dtoa_r+0x4bc>
 8014240:	2200      	movs	r2, #0
 8014242:	4b81      	ldr	r3, [pc, #516]	; (8014448 <_dtoa_r+0x608>)
 8014244:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014248:	f7ec f836 	bl	80002b8 <__aeabi_dsub>
 801424c:	462a      	mov	r2, r5
 801424e:	4633      	mov	r3, r6
 8014250:	e9cd 0100 	strd	r0, r1, [sp]
 8014254:	f7ec fc78 	bl	8000b48 <__aeabi_dcmpgt>
 8014258:	2800      	cmp	r0, #0
 801425a:	f040 8288 	bne.w	801476e <_dtoa_r+0x92e>
 801425e:	462a      	mov	r2, r5
 8014260:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8014264:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014268:	f7ec fc50 	bl	8000b0c <__aeabi_dcmplt>
 801426c:	2800      	cmp	r0, #0
 801426e:	f040 827c 	bne.w	801476a <_dtoa_r+0x92a>
 8014272:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8014276:	e9cd 2300 	strd	r2, r3, [sp]
 801427a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801427c:	2b00      	cmp	r3, #0
 801427e:	f2c0 8150 	blt.w	8014522 <_dtoa_r+0x6e2>
 8014282:	f1ba 0f0e 	cmp.w	sl, #14
 8014286:	f300 814c 	bgt.w	8014522 <_dtoa_r+0x6e2>
 801428a:	4b6a      	ldr	r3, [pc, #424]	; (8014434 <_dtoa_r+0x5f4>)
 801428c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8014290:	ed93 7b00 	vldr	d7, [r3]
 8014294:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014296:	2b00      	cmp	r3, #0
 8014298:	ed8d 7b02 	vstr	d7, [sp, #8]
 801429c:	f280 80d8 	bge.w	8014450 <_dtoa_r+0x610>
 80142a0:	f1b9 0f00 	cmp.w	r9, #0
 80142a4:	f300 80d4 	bgt.w	8014450 <_dtoa_r+0x610>
 80142a8:	f040 825e 	bne.w	8014768 <_dtoa_r+0x928>
 80142ac:	2200      	movs	r2, #0
 80142ae:	4b66      	ldr	r3, [pc, #408]	; (8014448 <_dtoa_r+0x608>)
 80142b0:	ec51 0b17 	vmov	r0, r1, d7
 80142b4:	f7ec f9b8 	bl	8000628 <__aeabi_dmul>
 80142b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80142bc:	f7ec fc3a 	bl	8000b34 <__aeabi_dcmpge>
 80142c0:	464f      	mov	r7, r9
 80142c2:	464e      	mov	r6, r9
 80142c4:	2800      	cmp	r0, #0
 80142c6:	f040 8234 	bne.w	8014732 <_dtoa_r+0x8f2>
 80142ca:	2331      	movs	r3, #49	; 0x31
 80142cc:	f10b 0501 	add.w	r5, fp, #1
 80142d0:	f88b 3000 	strb.w	r3, [fp]
 80142d4:	f10a 0a01 	add.w	sl, sl, #1
 80142d8:	e22f      	b.n	801473a <_dtoa_r+0x8fa>
 80142da:	07f2      	lsls	r2, r6, #31
 80142dc:	d505      	bpl.n	80142ea <_dtoa_r+0x4aa>
 80142de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80142e2:	f7ec f9a1 	bl	8000628 <__aeabi_dmul>
 80142e6:	3501      	adds	r5, #1
 80142e8:	2301      	movs	r3, #1
 80142ea:	1076      	asrs	r6, r6, #1
 80142ec:	3708      	adds	r7, #8
 80142ee:	e772      	b.n	80141d6 <_dtoa_r+0x396>
 80142f0:	2502      	movs	r5, #2
 80142f2:	e774      	b.n	80141de <_dtoa_r+0x39e>
 80142f4:	f8cd a020 	str.w	sl, [sp, #32]
 80142f8:	464f      	mov	r7, r9
 80142fa:	e791      	b.n	8014220 <_dtoa_r+0x3e0>
 80142fc:	4b4d      	ldr	r3, [pc, #308]	; (8014434 <_dtoa_r+0x5f4>)
 80142fe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8014302:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8014306:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014308:	2b00      	cmp	r3, #0
 801430a:	d047      	beq.n	801439c <_dtoa_r+0x55c>
 801430c:	4602      	mov	r2, r0
 801430e:	460b      	mov	r3, r1
 8014310:	2000      	movs	r0, #0
 8014312:	494e      	ldr	r1, [pc, #312]	; (801444c <_dtoa_r+0x60c>)
 8014314:	f7ec fab2 	bl	800087c <__aeabi_ddiv>
 8014318:	462a      	mov	r2, r5
 801431a:	4633      	mov	r3, r6
 801431c:	f7eb ffcc 	bl	80002b8 <__aeabi_dsub>
 8014320:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8014324:	465d      	mov	r5, fp
 8014326:	e9dd 0100 	ldrd	r0, r1, [sp]
 801432a:	f7ec fc2d 	bl	8000b88 <__aeabi_d2iz>
 801432e:	4606      	mov	r6, r0
 8014330:	f7ec f910 	bl	8000554 <__aeabi_i2d>
 8014334:	4602      	mov	r2, r0
 8014336:	460b      	mov	r3, r1
 8014338:	e9dd 0100 	ldrd	r0, r1, [sp]
 801433c:	f7eb ffbc 	bl	80002b8 <__aeabi_dsub>
 8014340:	3630      	adds	r6, #48	; 0x30
 8014342:	f805 6b01 	strb.w	r6, [r5], #1
 8014346:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801434a:	e9cd 0100 	strd	r0, r1, [sp]
 801434e:	f7ec fbdd 	bl	8000b0c <__aeabi_dcmplt>
 8014352:	2800      	cmp	r0, #0
 8014354:	d163      	bne.n	801441e <_dtoa_r+0x5de>
 8014356:	e9dd 2300 	ldrd	r2, r3, [sp]
 801435a:	2000      	movs	r0, #0
 801435c:	4937      	ldr	r1, [pc, #220]	; (801443c <_dtoa_r+0x5fc>)
 801435e:	f7eb ffab 	bl	80002b8 <__aeabi_dsub>
 8014362:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8014366:	f7ec fbd1 	bl	8000b0c <__aeabi_dcmplt>
 801436a:	2800      	cmp	r0, #0
 801436c:	f040 80b7 	bne.w	80144de <_dtoa_r+0x69e>
 8014370:	eba5 030b 	sub.w	r3, r5, fp
 8014374:	429f      	cmp	r7, r3
 8014376:	f77f af7c 	ble.w	8014272 <_dtoa_r+0x432>
 801437a:	2200      	movs	r2, #0
 801437c:	4b30      	ldr	r3, [pc, #192]	; (8014440 <_dtoa_r+0x600>)
 801437e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8014382:	f7ec f951 	bl	8000628 <__aeabi_dmul>
 8014386:	2200      	movs	r2, #0
 8014388:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801438c:	4b2c      	ldr	r3, [pc, #176]	; (8014440 <_dtoa_r+0x600>)
 801438e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014392:	f7ec f949 	bl	8000628 <__aeabi_dmul>
 8014396:	e9cd 0100 	strd	r0, r1, [sp]
 801439a:	e7c4      	b.n	8014326 <_dtoa_r+0x4e6>
 801439c:	462a      	mov	r2, r5
 801439e:	4633      	mov	r3, r6
 80143a0:	f7ec f942 	bl	8000628 <__aeabi_dmul>
 80143a4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80143a8:	eb0b 0507 	add.w	r5, fp, r7
 80143ac:	465e      	mov	r6, fp
 80143ae:	e9dd 0100 	ldrd	r0, r1, [sp]
 80143b2:	f7ec fbe9 	bl	8000b88 <__aeabi_d2iz>
 80143b6:	4607      	mov	r7, r0
 80143b8:	f7ec f8cc 	bl	8000554 <__aeabi_i2d>
 80143bc:	3730      	adds	r7, #48	; 0x30
 80143be:	4602      	mov	r2, r0
 80143c0:	460b      	mov	r3, r1
 80143c2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80143c6:	f7eb ff77 	bl	80002b8 <__aeabi_dsub>
 80143ca:	f806 7b01 	strb.w	r7, [r6], #1
 80143ce:	42ae      	cmp	r6, r5
 80143d0:	e9cd 0100 	strd	r0, r1, [sp]
 80143d4:	f04f 0200 	mov.w	r2, #0
 80143d8:	d126      	bne.n	8014428 <_dtoa_r+0x5e8>
 80143da:	4b1c      	ldr	r3, [pc, #112]	; (801444c <_dtoa_r+0x60c>)
 80143dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80143e0:	f7eb ff6c 	bl	80002bc <__adddf3>
 80143e4:	4602      	mov	r2, r0
 80143e6:	460b      	mov	r3, r1
 80143e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80143ec:	f7ec fbac 	bl	8000b48 <__aeabi_dcmpgt>
 80143f0:	2800      	cmp	r0, #0
 80143f2:	d174      	bne.n	80144de <_dtoa_r+0x69e>
 80143f4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80143f8:	2000      	movs	r0, #0
 80143fa:	4914      	ldr	r1, [pc, #80]	; (801444c <_dtoa_r+0x60c>)
 80143fc:	f7eb ff5c 	bl	80002b8 <__aeabi_dsub>
 8014400:	4602      	mov	r2, r0
 8014402:	460b      	mov	r3, r1
 8014404:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014408:	f7ec fb80 	bl	8000b0c <__aeabi_dcmplt>
 801440c:	2800      	cmp	r0, #0
 801440e:	f43f af30 	beq.w	8014272 <_dtoa_r+0x432>
 8014412:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8014416:	2b30      	cmp	r3, #48	; 0x30
 8014418:	f105 32ff 	add.w	r2, r5, #4294967295
 801441c:	d002      	beq.n	8014424 <_dtoa_r+0x5e4>
 801441e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8014422:	e04a      	b.n	80144ba <_dtoa_r+0x67a>
 8014424:	4615      	mov	r5, r2
 8014426:	e7f4      	b.n	8014412 <_dtoa_r+0x5d2>
 8014428:	4b05      	ldr	r3, [pc, #20]	; (8014440 <_dtoa_r+0x600>)
 801442a:	f7ec f8fd 	bl	8000628 <__aeabi_dmul>
 801442e:	e9cd 0100 	strd	r0, r1, [sp]
 8014432:	e7bc      	b.n	80143ae <_dtoa_r+0x56e>
 8014434:	08017610 	.word	0x08017610
 8014438:	080175e8 	.word	0x080175e8
 801443c:	3ff00000 	.word	0x3ff00000
 8014440:	40240000 	.word	0x40240000
 8014444:	401c0000 	.word	0x401c0000
 8014448:	40140000 	.word	0x40140000
 801444c:	3fe00000 	.word	0x3fe00000
 8014450:	e9dd 6700 	ldrd	r6, r7, [sp]
 8014454:	465d      	mov	r5, fp
 8014456:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801445a:	4630      	mov	r0, r6
 801445c:	4639      	mov	r1, r7
 801445e:	f7ec fa0d 	bl	800087c <__aeabi_ddiv>
 8014462:	f7ec fb91 	bl	8000b88 <__aeabi_d2iz>
 8014466:	4680      	mov	r8, r0
 8014468:	f7ec f874 	bl	8000554 <__aeabi_i2d>
 801446c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014470:	f7ec f8da 	bl	8000628 <__aeabi_dmul>
 8014474:	4602      	mov	r2, r0
 8014476:	460b      	mov	r3, r1
 8014478:	4630      	mov	r0, r6
 801447a:	4639      	mov	r1, r7
 801447c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8014480:	f7eb ff1a 	bl	80002b8 <__aeabi_dsub>
 8014484:	f805 6b01 	strb.w	r6, [r5], #1
 8014488:	eba5 060b 	sub.w	r6, r5, fp
 801448c:	45b1      	cmp	r9, r6
 801448e:	4602      	mov	r2, r0
 8014490:	460b      	mov	r3, r1
 8014492:	d139      	bne.n	8014508 <_dtoa_r+0x6c8>
 8014494:	f7eb ff12 	bl	80002bc <__adddf3>
 8014498:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801449c:	4606      	mov	r6, r0
 801449e:	460f      	mov	r7, r1
 80144a0:	f7ec fb52 	bl	8000b48 <__aeabi_dcmpgt>
 80144a4:	b9c8      	cbnz	r0, 80144da <_dtoa_r+0x69a>
 80144a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80144aa:	4630      	mov	r0, r6
 80144ac:	4639      	mov	r1, r7
 80144ae:	f7ec fb23 	bl	8000af8 <__aeabi_dcmpeq>
 80144b2:	b110      	cbz	r0, 80144ba <_dtoa_r+0x67a>
 80144b4:	f018 0f01 	tst.w	r8, #1
 80144b8:	d10f      	bne.n	80144da <_dtoa_r+0x69a>
 80144ba:	9904      	ldr	r1, [sp, #16]
 80144bc:	4620      	mov	r0, r4
 80144be:	f001 f808 	bl	80154d2 <_Bfree>
 80144c2:	2300      	movs	r3, #0
 80144c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80144c6:	702b      	strb	r3, [r5, #0]
 80144c8:	f10a 0301 	add.w	r3, sl, #1
 80144cc:	6013      	str	r3, [r2, #0]
 80144ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80144d0:	2b00      	cmp	r3, #0
 80144d2:	f000 8241 	beq.w	8014958 <_dtoa_r+0xb18>
 80144d6:	601d      	str	r5, [r3, #0]
 80144d8:	e23e      	b.n	8014958 <_dtoa_r+0xb18>
 80144da:	f8cd a020 	str.w	sl, [sp, #32]
 80144de:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80144e2:	2a39      	cmp	r2, #57	; 0x39
 80144e4:	f105 33ff 	add.w	r3, r5, #4294967295
 80144e8:	d108      	bne.n	80144fc <_dtoa_r+0x6bc>
 80144ea:	459b      	cmp	fp, r3
 80144ec:	d10a      	bne.n	8014504 <_dtoa_r+0x6c4>
 80144ee:	9b08      	ldr	r3, [sp, #32]
 80144f0:	3301      	adds	r3, #1
 80144f2:	9308      	str	r3, [sp, #32]
 80144f4:	2330      	movs	r3, #48	; 0x30
 80144f6:	f88b 3000 	strb.w	r3, [fp]
 80144fa:	465b      	mov	r3, fp
 80144fc:	781a      	ldrb	r2, [r3, #0]
 80144fe:	3201      	adds	r2, #1
 8014500:	701a      	strb	r2, [r3, #0]
 8014502:	e78c      	b.n	801441e <_dtoa_r+0x5de>
 8014504:	461d      	mov	r5, r3
 8014506:	e7ea      	b.n	80144de <_dtoa_r+0x69e>
 8014508:	2200      	movs	r2, #0
 801450a:	4b9b      	ldr	r3, [pc, #620]	; (8014778 <_dtoa_r+0x938>)
 801450c:	f7ec f88c 	bl	8000628 <__aeabi_dmul>
 8014510:	2200      	movs	r2, #0
 8014512:	2300      	movs	r3, #0
 8014514:	4606      	mov	r6, r0
 8014516:	460f      	mov	r7, r1
 8014518:	f7ec faee 	bl	8000af8 <__aeabi_dcmpeq>
 801451c:	2800      	cmp	r0, #0
 801451e:	d09a      	beq.n	8014456 <_dtoa_r+0x616>
 8014520:	e7cb      	b.n	80144ba <_dtoa_r+0x67a>
 8014522:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8014524:	2a00      	cmp	r2, #0
 8014526:	f000 808b 	beq.w	8014640 <_dtoa_r+0x800>
 801452a:	9a06      	ldr	r2, [sp, #24]
 801452c:	2a01      	cmp	r2, #1
 801452e:	dc6e      	bgt.n	801460e <_dtoa_r+0x7ce>
 8014530:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8014532:	2a00      	cmp	r2, #0
 8014534:	d067      	beq.n	8014606 <_dtoa_r+0x7c6>
 8014536:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801453a:	9f07      	ldr	r7, [sp, #28]
 801453c:	9d05      	ldr	r5, [sp, #20]
 801453e:	9a05      	ldr	r2, [sp, #20]
 8014540:	2101      	movs	r1, #1
 8014542:	441a      	add	r2, r3
 8014544:	4620      	mov	r0, r4
 8014546:	9205      	str	r2, [sp, #20]
 8014548:	4498      	add	r8, r3
 801454a:	f001 f8a0 	bl	801568e <__i2b>
 801454e:	4606      	mov	r6, r0
 8014550:	2d00      	cmp	r5, #0
 8014552:	dd0c      	ble.n	801456e <_dtoa_r+0x72e>
 8014554:	f1b8 0f00 	cmp.w	r8, #0
 8014558:	dd09      	ble.n	801456e <_dtoa_r+0x72e>
 801455a:	4545      	cmp	r5, r8
 801455c:	9a05      	ldr	r2, [sp, #20]
 801455e:	462b      	mov	r3, r5
 8014560:	bfa8      	it	ge
 8014562:	4643      	movge	r3, r8
 8014564:	1ad2      	subs	r2, r2, r3
 8014566:	9205      	str	r2, [sp, #20]
 8014568:	1aed      	subs	r5, r5, r3
 801456a:	eba8 0803 	sub.w	r8, r8, r3
 801456e:	9b07      	ldr	r3, [sp, #28]
 8014570:	b1eb      	cbz	r3, 80145ae <_dtoa_r+0x76e>
 8014572:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014574:	2b00      	cmp	r3, #0
 8014576:	d067      	beq.n	8014648 <_dtoa_r+0x808>
 8014578:	b18f      	cbz	r7, 801459e <_dtoa_r+0x75e>
 801457a:	4631      	mov	r1, r6
 801457c:	463a      	mov	r2, r7
 801457e:	4620      	mov	r0, r4
 8014580:	f001 f924 	bl	80157cc <__pow5mult>
 8014584:	9a04      	ldr	r2, [sp, #16]
 8014586:	4601      	mov	r1, r0
 8014588:	4606      	mov	r6, r0
 801458a:	4620      	mov	r0, r4
 801458c:	f001 f888 	bl	80156a0 <__multiply>
 8014590:	9904      	ldr	r1, [sp, #16]
 8014592:	9008      	str	r0, [sp, #32]
 8014594:	4620      	mov	r0, r4
 8014596:	f000 ff9c 	bl	80154d2 <_Bfree>
 801459a:	9b08      	ldr	r3, [sp, #32]
 801459c:	9304      	str	r3, [sp, #16]
 801459e:	9b07      	ldr	r3, [sp, #28]
 80145a0:	1bda      	subs	r2, r3, r7
 80145a2:	d004      	beq.n	80145ae <_dtoa_r+0x76e>
 80145a4:	9904      	ldr	r1, [sp, #16]
 80145a6:	4620      	mov	r0, r4
 80145a8:	f001 f910 	bl	80157cc <__pow5mult>
 80145ac:	9004      	str	r0, [sp, #16]
 80145ae:	2101      	movs	r1, #1
 80145b0:	4620      	mov	r0, r4
 80145b2:	f001 f86c 	bl	801568e <__i2b>
 80145b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80145b8:	4607      	mov	r7, r0
 80145ba:	2b00      	cmp	r3, #0
 80145bc:	f000 81d0 	beq.w	8014960 <_dtoa_r+0xb20>
 80145c0:	461a      	mov	r2, r3
 80145c2:	4601      	mov	r1, r0
 80145c4:	4620      	mov	r0, r4
 80145c6:	f001 f901 	bl	80157cc <__pow5mult>
 80145ca:	9b06      	ldr	r3, [sp, #24]
 80145cc:	2b01      	cmp	r3, #1
 80145ce:	4607      	mov	r7, r0
 80145d0:	dc40      	bgt.n	8014654 <_dtoa_r+0x814>
 80145d2:	9b00      	ldr	r3, [sp, #0]
 80145d4:	2b00      	cmp	r3, #0
 80145d6:	d139      	bne.n	801464c <_dtoa_r+0x80c>
 80145d8:	9b01      	ldr	r3, [sp, #4]
 80145da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80145de:	2b00      	cmp	r3, #0
 80145e0:	d136      	bne.n	8014650 <_dtoa_r+0x810>
 80145e2:	9b01      	ldr	r3, [sp, #4]
 80145e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80145e8:	0d1b      	lsrs	r3, r3, #20
 80145ea:	051b      	lsls	r3, r3, #20
 80145ec:	b12b      	cbz	r3, 80145fa <_dtoa_r+0x7ba>
 80145ee:	9b05      	ldr	r3, [sp, #20]
 80145f0:	3301      	adds	r3, #1
 80145f2:	9305      	str	r3, [sp, #20]
 80145f4:	f108 0801 	add.w	r8, r8, #1
 80145f8:	2301      	movs	r3, #1
 80145fa:	9307      	str	r3, [sp, #28]
 80145fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80145fe:	2b00      	cmp	r3, #0
 8014600:	d12a      	bne.n	8014658 <_dtoa_r+0x818>
 8014602:	2001      	movs	r0, #1
 8014604:	e030      	b.n	8014668 <_dtoa_r+0x828>
 8014606:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014608:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801460c:	e795      	b.n	801453a <_dtoa_r+0x6fa>
 801460e:	9b07      	ldr	r3, [sp, #28]
 8014610:	f109 37ff 	add.w	r7, r9, #4294967295
 8014614:	42bb      	cmp	r3, r7
 8014616:	bfbf      	itttt	lt
 8014618:	9b07      	ldrlt	r3, [sp, #28]
 801461a:	9707      	strlt	r7, [sp, #28]
 801461c:	1afa      	sublt	r2, r7, r3
 801461e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8014620:	bfbb      	ittet	lt
 8014622:	189b      	addlt	r3, r3, r2
 8014624:	930e      	strlt	r3, [sp, #56]	; 0x38
 8014626:	1bdf      	subge	r7, r3, r7
 8014628:	2700      	movlt	r7, #0
 801462a:	f1b9 0f00 	cmp.w	r9, #0
 801462e:	bfb5      	itete	lt
 8014630:	9b05      	ldrlt	r3, [sp, #20]
 8014632:	9d05      	ldrge	r5, [sp, #20]
 8014634:	eba3 0509 	sublt.w	r5, r3, r9
 8014638:	464b      	movge	r3, r9
 801463a:	bfb8      	it	lt
 801463c:	2300      	movlt	r3, #0
 801463e:	e77e      	b.n	801453e <_dtoa_r+0x6fe>
 8014640:	9f07      	ldr	r7, [sp, #28]
 8014642:	9d05      	ldr	r5, [sp, #20]
 8014644:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8014646:	e783      	b.n	8014550 <_dtoa_r+0x710>
 8014648:	9a07      	ldr	r2, [sp, #28]
 801464a:	e7ab      	b.n	80145a4 <_dtoa_r+0x764>
 801464c:	2300      	movs	r3, #0
 801464e:	e7d4      	b.n	80145fa <_dtoa_r+0x7ba>
 8014650:	9b00      	ldr	r3, [sp, #0]
 8014652:	e7d2      	b.n	80145fa <_dtoa_r+0x7ba>
 8014654:	2300      	movs	r3, #0
 8014656:	9307      	str	r3, [sp, #28]
 8014658:	693b      	ldr	r3, [r7, #16]
 801465a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 801465e:	6918      	ldr	r0, [r3, #16]
 8014660:	f000 ffc7 	bl	80155f2 <__hi0bits>
 8014664:	f1c0 0020 	rsb	r0, r0, #32
 8014668:	4440      	add	r0, r8
 801466a:	f010 001f 	ands.w	r0, r0, #31
 801466e:	d047      	beq.n	8014700 <_dtoa_r+0x8c0>
 8014670:	f1c0 0320 	rsb	r3, r0, #32
 8014674:	2b04      	cmp	r3, #4
 8014676:	dd3b      	ble.n	80146f0 <_dtoa_r+0x8b0>
 8014678:	9b05      	ldr	r3, [sp, #20]
 801467a:	f1c0 001c 	rsb	r0, r0, #28
 801467e:	4403      	add	r3, r0
 8014680:	9305      	str	r3, [sp, #20]
 8014682:	4405      	add	r5, r0
 8014684:	4480      	add	r8, r0
 8014686:	9b05      	ldr	r3, [sp, #20]
 8014688:	2b00      	cmp	r3, #0
 801468a:	dd05      	ble.n	8014698 <_dtoa_r+0x858>
 801468c:	461a      	mov	r2, r3
 801468e:	9904      	ldr	r1, [sp, #16]
 8014690:	4620      	mov	r0, r4
 8014692:	f001 f8e9 	bl	8015868 <__lshift>
 8014696:	9004      	str	r0, [sp, #16]
 8014698:	f1b8 0f00 	cmp.w	r8, #0
 801469c:	dd05      	ble.n	80146aa <_dtoa_r+0x86a>
 801469e:	4639      	mov	r1, r7
 80146a0:	4642      	mov	r2, r8
 80146a2:	4620      	mov	r0, r4
 80146a4:	f001 f8e0 	bl	8015868 <__lshift>
 80146a8:	4607      	mov	r7, r0
 80146aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80146ac:	b353      	cbz	r3, 8014704 <_dtoa_r+0x8c4>
 80146ae:	4639      	mov	r1, r7
 80146b0:	9804      	ldr	r0, [sp, #16]
 80146b2:	f001 f92d 	bl	8015910 <__mcmp>
 80146b6:	2800      	cmp	r0, #0
 80146b8:	da24      	bge.n	8014704 <_dtoa_r+0x8c4>
 80146ba:	2300      	movs	r3, #0
 80146bc:	220a      	movs	r2, #10
 80146be:	9904      	ldr	r1, [sp, #16]
 80146c0:	4620      	mov	r0, r4
 80146c2:	f000 ff1d 	bl	8015500 <__multadd>
 80146c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80146c8:	9004      	str	r0, [sp, #16]
 80146ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80146ce:	2b00      	cmp	r3, #0
 80146d0:	f000 814d 	beq.w	801496e <_dtoa_r+0xb2e>
 80146d4:	2300      	movs	r3, #0
 80146d6:	4631      	mov	r1, r6
 80146d8:	220a      	movs	r2, #10
 80146da:	4620      	mov	r0, r4
 80146dc:	f000 ff10 	bl	8015500 <__multadd>
 80146e0:	9b02      	ldr	r3, [sp, #8]
 80146e2:	2b00      	cmp	r3, #0
 80146e4:	4606      	mov	r6, r0
 80146e6:	dc4f      	bgt.n	8014788 <_dtoa_r+0x948>
 80146e8:	9b06      	ldr	r3, [sp, #24]
 80146ea:	2b02      	cmp	r3, #2
 80146ec:	dd4c      	ble.n	8014788 <_dtoa_r+0x948>
 80146ee:	e011      	b.n	8014714 <_dtoa_r+0x8d4>
 80146f0:	d0c9      	beq.n	8014686 <_dtoa_r+0x846>
 80146f2:	9a05      	ldr	r2, [sp, #20]
 80146f4:	331c      	adds	r3, #28
 80146f6:	441a      	add	r2, r3
 80146f8:	9205      	str	r2, [sp, #20]
 80146fa:	441d      	add	r5, r3
 80146fc:	4498      	add	r8, r3
 80146fe:	e7c2      	b.n	8014686 <_dtoa_r+0x846>
 8014700:	4603      	mov	r3, r0
 8014702:	e7f6      	b.n	80146f2 <_dtoa_r+0x8b2>
 8014704:	f1b9 0f00 	cmp.w	r9, #0
 8014708:	dc38      	bgt.n	801477c <_dtoa_r+0x93c>
 801470a:	9b06      	ldr	r3, [sp, #24]
 801470c:	2b02      	cmp	r3, #2
 801470e:	dd35      	ble.n	801477c <_dtoa_r+0x93c>
 8014710:	f8cd 9008 	str.w	r9, [sp, #8]
 8014714:	9b02      	ldr	r3, [sp, #8]
 8014716:	b963      	cbnz	r3, 8014732 <_dtoa_r+0x8f2>
 8014718:	4639      	mov	r1, r7
 801471a:	2205      	movs	r2, #5
 801471c:	4620      	mov	r0, r4
 801471e:	f000 feef 	bl	8015500 <__multadd>
 8014722:	4601      	mov	r1, r0
 8014724:	4607      	mov	r7, r0
 8014726:	9804      	ldr	r0, [sp, #16]
 8014728:	f001 f8f2 	bl	8015910 <__mcmp>
 801472c:	2800      	cmp	r0, #0
 801472e:	f73f adcc 	bgt.w	80142ca <_dtoa_r+0x48a>
 8014732:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8014734:	465d      	mov	r5, fp
 8014736:	ea6f 0a03 	mvn.w	sl, r3
 801473a:	f04f 0900 	mov.w	r9, #0
 801473e:	4639      	mov	r1, r7
 8014740:	4620      	mov	r0, r4
 8014742:	f000 fec6 	bl	80154d2 <_Bfree>
 8014746:	2e00      	cmp	r6, #0
 8014748:	f43f aeb7 	beq.w	80144ba <_dtoa_r+0x67a>
 801474c:	f1b9 0f00 	cmp.w	r9, #0
 8014750:	d005      	beq.n	801475e <_dtoa_r+0x91e>
 8014752:	45b1      	cmp	r9, r6
 8014754:	d003      	beq.n	801475e <_dtoa_r+0x91e>
 8014756:	4649      	mov	r1, r9
 8014758:	4620      	mov	r0, r4
 801475a:	f000 feba 	bl	80154d2 <_Bfree>
 801475e:	4631      	mov	r1, r6
 8014760:	4620      	mov	r0, r4
 8014762:	f000 feb6 	bl	80154d2 <_Bfree>
 8014766:	e6a8      	b.n	80144ba <_dtoa_r+0x67a>
 8014768:	2700      	movs	r7, #0
 801476a:	463e      	mov	r6, r7
 801476c:	e7e1      	b.n	8014732 <_dtoa_r+0x8f2>
 801476e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8014772:	463e      	mov	r6, r7
 8014774:	e5a9      	b.n	80142ca <_dtoa_r+0x48a>
 8014776:	bf00      	nop
 8014778:	40240000 	.word	0x40240000
 801477c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801477e:	f8cd 9008 	str.w	r9, [sp, #8]
 8014782:	2b00      	cmp	r3, #0
 8014784:	f000 80fa 	beq.w	801497c <_dtoa_r+0xb3c>
 8014788:	2d00      	cmp	r5, #0
 801478a:	dd05      	ble.n	8014798 <_dtoa_r+0x958>
 801478c:	4631      	mov	r1, r6
 801478e:	462a      	mov	r2, r5
 8014790:	4620      	mov	r0, r4
 8014792:	f001 f869 	bl	8015868 <__lshift>
 8014796:	4606      	mov	r6, r0
 8014798:	9b07      	ldr	r3, [sp, #28]
 801479a:	2b00      	cmp	r3, #0
 801479c:	d04c      	beq.n	8014838 <_dtoa_r+0x9f8>
 801479e:	6871      	ldr	r1, [r6, #4]
 80147a0:	4620      	mov	r0, r4
 80147a2:	f000 fe62 	bl	801546a <_Balloc>
 80147a6:	6932      	ldr	r2, [r6, #16]
 80147a8:	3202      	adds	r2, #2
 80147aa:	4605      	mov	r5, r0
 80147ac:	0092      	lsls	r2, r2, #2
 80147ae:	f106 010c 	add.w	r1, r6, #12
 80147b2:	300c      	adds	r0, #12
 80147b4:	f000 fe4e 	bl	8015454 <memcpy>
 80147b8:	2201      	movs	r2, #1
 80147ba:	4629      	mov	r1, r5
 80147bc:	4620      	mov	r0, r4
 80147be:	f001 f853 	bl	8015868 <__lshift>
 80147c2:	9b00      	ldr	r3, [sp, #0]
 80147c4:	f8cd b014 	str.w	fp, [sp, #20]
 80147c8:	f003 0301 	and.w	r3, r3, #1
 80147cc:	46b1      	mov	r9, r6
 80147ce:	9307      	str	r3, [sp, #28]
 80147d0:	4606      	mov	r6, r0
 80147d2:	4639      	mov	r1, r7
 80147d4:	9804      	ldr	r0, [sp, #16]
 80147d6:	f7ff faa7 	bl	8013d28 <quorem>
 80147da:	4649      	mov	r1, r9
 80147dc:	4605      	mov	r5, r0
 80147de:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80147e2:	9804      	ldr	r0, [sp, #16]
 80147e4:	f001 f894 	bl	8015910 <__mcmp>
 80147e8:	4632      	mov	r2, r6
 80147ea:	9000      	str	r0, [sp, #0]
 80147ec:	4639      	mov	r1, r7
 80147ee:	4620      	mov	r0, r4
 80147f0:	f001 f8a8 	bl	8015944 <__mdiff>
 80147f4:	68c3      	ldr	r3, [r0, #12]
 80147f6:	4602      	mov	r2, r0
 80147f8:	bb03      	cbnz	r3, 801483c <_dtoa_r+0x9fc>
 80147fa:	4601      	mov	r1, r0
 80147fc:	9008      	str	r0, [sp, #32]
 80147fe:	9804      	ldr	r0, [sp, #16]
 8014800:	f001 f886 	bl	8015910 <__mcmp>
 8014804:	9a08      	ldr	r2, [sp, #32]
 8014806:	4603      	mov	r3, r0
 8014808:	4611      	mov	r1, r2
 801480a:	4620      	mov	r0, r4
 801480c:	9308      	str	r3, [sp, #32]
 801480e:	f000 fe60 	bl	80154d2 <_Bfree>
 8014812:	9b08      	ldr	r3, [sp, #32]
 8014814:	b9a3      	cbnz	r3, 8014840 <_dtoa_r+0xa00>
 8014816:	9a06      	ldr	r2, [sp, #24]
 8014818:	b992      	cbnz	r2, 8014840 <_dtoa_r+0xa00>
 801481a:	9a07      	ldr	r2, [sp, #28]
 801481c:	b982      	cbnz	r2, 8014840 <_dtoa_r+0xa00>
 801481e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8014822:	d029      	beq.n	8014878 <_dtoa_r+0xa38>
 8014824:	9b00      	ldr	r3, [sp, #0]
 8014826:	2b00      	cmp	r3, #0
 8014828:	dd01      	ble.n	801482e <_dtoa_r+0x9ee>
 801482a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 801482e:	9b05      	ldr	r3, [sp, #20]
 8014830:	1c5d      	adds	r5, r3, #1
 8014832:	f883 8000 	strb.w	r8, [r3]
 8014836:	e782      	b.n	801473e <_dtoa_r+0x8fe>
 8014838:	4630      	mov	r0, r6
 801483a:	e7c2      	b.n	80147c2 <_dtoa_r+0x982>
 801483c:	2301      	movs	r3, #1
 801483e:	e7e3      	b.n	8014808 <_dtoa_r+0x9c8>
 8014840:	9a00      	ldr	r2, [sp, #0]
 8014842:	2a00      	cmp	r2, #0
 8014844:	db04      	blt.n	8014850 <_dtoa_r+0xa10>
 8014846:	d125      	bne.n	8014894 <_dtoa_r+0xa54>
 8014848:	9a06      	ldr	r2, [sp, #24]
 801484a:	bb1a      	cbnz	r2, 8014894 <_dtoa_r+0xa54>
 801484c:	9a07      	ldr	r2, [sp, #28]
 801484e:	bb0a      	cbnz	r2, 8014894 <_dtoa_r+0xa54>
 8014850:	2b00      	cmp	r3, #0
 8014852:	ddec      	ble.n	801482e <_dtoa_r+0x9ee>
 8014854:	2201      	movs	r2, #1
 8014856:	9904      	ldr	r1, [sp, #16]
 8014858:	4620      	mov	r0, r4
 801485a:	f001 f805 	bl	8015868 <__lshift>
 801485e:	4639      	mov	r1, r7
 8014860:	9004      	str	r0, [sp, #16]
 8014862:	f001 f855 	bl	8015910 <__mcmp>
 8014866:	2800      	cmp	r0, #0
 8014868:	dc03      	bgt.n	8014872 <_dtoa_r+0xa32>
 801486a:	d1e0      	bne.n	801482e <_dtoa_r+0x9ee>
 801486c:	f018 0f01 	tst.w	r8, #1
 8014870:	d0dd      	beq.n	801482e <_dtoa_r+0x9ee>
 8014872:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8014876:	d1d8      	bne.n	801482a <_dtoa_r+0x9ea>
 8014878:	9b05      	ldr	r3, [sp, #20]
 801487a:	9a05      	ldr	r2, [sp, #20]
 801487c:	1c5d      	adds	r5, r3, #1
 801487e:	2339      	movs	r3, #57	; 0x39
 8014880:	7013      	strb	r3, [r2, #0]
 8014882:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8014886:	2b39      	cmp	r3, #57	; 0x39
 8014888:	f105 32ff 	add.w	r2, r5, #4294967295
 801488c:	d04f      	beq.n	801492e <_dtoa_r+0xaee>
 801488e:	3301      	adds	r3, #1
 8014890:	7013      	strb	r3, [r2, #0]
 8014892:	e754      	b.n	801473e <_dtoa_r+0x8fe>
 8014894:	9a05      	ldr	r2, [sp, #20]
 8014896:	2b00      	cmp	r3, #0
 8014898:	f102 0501 	add.w	r5, r2, #1
 801489c:	dd06      	ble.n	80148ac <_dtoa_r+0xa6c>
 801489e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80148a2:	d0e9      	beq.n	8014878 <_dtoa_r+0xa38>
 80148a4:	f108 0801 	add.w	r8, r8, #1
 80148a8:	9b05      	ldr	r3, [sp, #20]
 80148aa:	e7c2      	b.n	8014832 <_dtoa_r+0x9f2>
 80148ac:	9a02      	ldr	r2, [sp, #8]
 80148ae:	f805 8c01 	strb.w	r8, [r5, #-1]
 80148b2:	eba5 030b 	sub.w	r3, r5, fp
 80148b6:	4293      	cmp	r3, r2
 80148b8:	d021      	beq.n	80148fe <_dtoa_r+0xabe>
 80148ba:	2300      	movs	r3, #0
 80148bc:	220a      	movs	r2, #10
 80148be:	9904      	ldr	r1, [sp, #16]
 80148c0:	4620      	mov	r0, r4
 80148c2:	f000 fe1d 	bl	8015500 <__multadd>
 80148c6:	45b1      	cmp	r9, r6
 80148c8:	9004      	str	r0, [sp, #16]
 80148ca:	f04f 0300 	mov.w	r3, #0
 80148ce:	f04f 020a 	mov.w	r2, #10
 80148d2:	4649      	mov	r1, r9
 80148d4:	4620      	mov	r0, r4
 80148d6:	d105      	bne.n	80148e4 <_dtoa_r+0xaa4>
 80148d8:	f000 fe12 	bl	8015500 <__multadd>
 80148dc:	4681      	mov	r9, r0
 80148de:	4606      	mov	r6, r0
 80148e0:	9505      	str	r5, [sp, #20]
 80148e2:	e776      	b.n	80147d2 <_dtoa_r+0x992>
 80148e4:	f000 fe0c 	bl	8015500 <__multadd>
 80148e8:	4631      	mov	r1, r6
 80148ea:	4681      	mov	r9, r0
 80148ec:	2300      	movs	r3, #0
 80148ee:	220a      	movs	r2, #10
 80148f0:	4620      	mov	r0, r4
 80148f2:	f000 fe05 	bl	8015500 <__multadd>
 80148f6:	4606      	mov	r6, r0
 80148f8:	e7f2      	b.n	80148e0 <_dtoa_r+0xaa0>
 80148fa:	f04f 0900 	mov.w	r9, #0
 80148fe:	2201      	movs	r2, #1
 8014900:	9904      	ldr	r1, [sp, #16]
 8014902:	4620      	mov	r0, r4
 8014904:	f000 ffb0 	bl	8015868 <__lshift>
 8014908:	4639      	mov	r1, r7
 801490a:	9004      	str	r0, [sp, #16]
 801490c:	f001 f800 	bl	8015910 <__mcmp>
 8014910:	2800      	cmp	r0, #0
 8014912:	dcb6      	bgt.n	8014882 <_dtoa_r+0xa42>
 8014914:	d102      	bne.n	801491c <_dtoa_r+0xadc>
 8014916:	f018 0f01 	tst.w	r8, #1
 801491a:	d1b2      	bne.n	8014882 <_dtoa_r+0xa42>
 801491c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8014920:	2b30      	cmp	r3, #48	; 0x30
 8014922:	f105 32ff 	add.w	r2, r5, #4294967295
 8014926:	f47f af0a 	bne.w	801473e <_dtoa_r+0x8fe>
 801492a:	4615      	mov	r5, r2
 801492c:	e7f6      	b.n	801491c <_dtoa_r+0xadc>
 801492e:	4593      	cmp	fp, r2
 8014930:	d105      	bne.n	801493e <_dtoa_r+0xafe>
 8014932:	2331      	movs	r3, #49	; 0x31
 8014934:	f10a 0a01 	add.w	sl, sl, #1
 8014938:	f88b 3000 	strb.w	r3, [fp]
 801493c:	e6ff      	b.n	801473e <_dtoa_r+0x8fe>
 801493e:	4615      	mov	r5, r2
 8014940:	e79f      	b.n	8014882 <_dtoa_r+0xa42>
 8014942:	f8df b064 	ldr.w	fp, [pc, #100]	; 80149a8 <_dtoa_r+0xb68>
 8014946:	e007      	b.n	8014958 <_dtoa_r+0xb18>
 8014948:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801494a:	f8df b060 	ldr.w	fp, [pc, #96]	; 80149ac <_dtoa_r+0xb6c>
 801494e:	b11b      	cbz	r3, 8014958 <_dtoa_r+0xb18>
 8014950:	f10b 0308 	add.w	r3, fp, #8
 8014954:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8014956:	6013      	str	r3, [r2, #0]
 8014958:	4658      	mov	r0, fp
 801495a:	b017      	add	sp, #92	; 0x5c
 801495c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014960:	9b06      	ldr	r3, [sp, #24]
 8014962:	2b01      	cmp	r3, #1
 8014964:	f77f ae35 	ble.w	80145d2 <_dtoa_r+0x792>
 8014968:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801496a:	9307      	str	r3, [sp, #28]
 801496c:	e649      	b.n	8014602 <_dtoa_r+0x7c2>
 801496e:	9b02      	ldr	r3, [sp, #8]
 8014970:	2b00      	cmp	r3, #0
 8014972:	dc03      	bgt.n	801497c <_dtoa_r+0xb3c>
 8014974:	9b06      	ldr	r3, [sp, #24]
 8014976:	2b02      	cmp	r3, #2
 8014978:	f73f aecc 	bgt.w	8014714 <_dtoa_r+0x8d4>
 801497c:	465d      	mov	r5, fp
 801497e:	4639      	mov	r1, r7
 8014980:	9804      	ldr	r0, [sp, #16]
 8014982:	f7ff f9d1 	bl	8013d28 <quorem>
 8014986:	f100 0830 	add.w	r8, r0, #48	; 0x30
 801498a:	f805 8b01 	strb.w	r8, [r5], #1
 801498e:	9a02      	ldr	r2, [sp, #8]
 8014990:	eba5 030b 	sub.w	r3, r5, fp
 8014994:	429a      	cmp	r2, r3
 8014996:	ddb0      	ble.n	80148fa <_dtoa_r+0xaba>
 8014998:	2300      	movs	r3, #0
 801499a:	220a      	movs	r2, #10
 801499c:	9904      	ldr	r1, [sp, #16]
 801499e:	4620      	mov	r0, r4
 80149a0:	f000 fdae 	bl	8015500 <__multadd>
 80149a4:	9004      	str	r0, [sp, #16]
 80149a6:	e7ea      	b.n	801497e <_dtoa_r+0xb3e>
 80149a8:	0801770b 	.word	0x0801770b
 80149ac:	08017568 	.word	0x08017568

080149b0 <__sflush_r>:
 80149b0:	898a      	ldrh	r2, [r1, #12]
 80149b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80149b6:	4605      	mov	r5, r0
 80149b8:	0710      	lsls	r0, r2, #28
 80149ba:	460c      	mov	r4, r1
 80149bc:	d458      	bmi.n	8014a70 <__sflush_r+0xc0>
 80149be:	684b      	ldr	r3, [r1, #4]
 80149c0:	2b00      	cmp	r3, #0
 80149c2:	dc05      	bgt.n	80149d0 <__sflush_r+0x20>
 80149c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80149c6:	2b00      	cmp	r3, #0
 80149c8:	dc02      	bgt.n	80149d0 <__sflush_r+0x20>
 80149ca:	2000      	movs	r0, #0
 80149cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80149d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80149d2:	2e00      	cmp	r6, #0
 80149d4:	d0f9      	beq.n	80149ca <__sflush_r+0x1a>
 80149d6:	2300      	movs	r3, #0
 80149d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80149dc:	682f      	ldr	r7, [r5, #0]
 80149de:	6a21      	ldr	r1, [r4, #32]
 80149e0:	602b      	str	r3, [r5, #0]
 80149e2:	d032      	beq.n	8014a4a <__sflush_r+0x9a>
 80149e4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80149e6:	89a3      	ldrh	r3, [r4, #12]
 80149e8:	075a      	lsls	r2, r3, #29
 80149ea:	d505      	bpl.n	80149f8 <__sflush_r+0x48>
 80149ec:	6863      	ldr	r3, [r4, #4]
 80149ee:	1ac0      	subs	r0, r0, r3
 80149f0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80149f2:	b10b      	cbz	r3, 80149f8 <__sflush_r+0x48>
 80149f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80149f6:	1ac0      	subs	r0, r0, r3
 80149f8:	2300      	movs	r3, #0
 80149fa:	4602      	mov	r2, r0
 80149fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80149fe:	6a21      	ldr	r1, [r4, #32]
 8014a00:	4628      	mov	r0, r5
 8014a02:	47b0      	blx	r6
 8014a04:	1c43      	adds	r3, r0, #1
 8014a06:	89a3      	ldrh	r3, [r4, #12]
 8014a08:	d106      	bne.n	8014a18 <__sflush_r+0x68>
 8014a0a:	6829      	ldr	r1, [r5, #0]
 8014a0c:	291d      	cmp	r1, #29
 8014a0e:	d848      	bhi.n	8014aa2 <__sflush_r+0xf2>
 8014a10:	4a29      	ldr	r2, [pc, #164]	; (8014ab8 <__sflush_r+0x108>)
 8014a12:	40ca      	lsrs	r2, r1
 8014a14:	07d6      	lsls	r6, r2, #31
 8014a16:	d544      	bpl.n	8014aa2 <__sflush_r+0xf2>
 8014a18:	2200      	movs	r2, #0
 8014a1a:	6062      	str	r2, [r4, #4]
 8014a1c:	04d9      	lsls	r1, r3, #19
 8014a1e:	6922      	ldr	r2, [r4, #16]
 8014a20:	6022      	str	r2, [r4, #0]
 8014a22:	d504      	bpl.n	8014a2e <__sflush_r+0x7e>
 8014a24:	1c42      	adds	r2, r0, #1
 8014a26:	d101      	bne.n	8014a2c <__sflush_r+0x7c>
 8014a28:	682b      	ldr	r3, [r5, #0]
 8014a2a:	b903      	cbnz	r3, 8014a2e <__sflush_r+0x7e>
 8014a2c:	6560      	str	r0, [r4, #84]	; 0x54
 8014a2e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014a30:	602f      	str	r7, [r5, #0]
 8014a32:	2900      	cmp	r1, #0
 8014a34:	d0c9      	beq.n	80149ca <__sflush_r+0x1a>
 8014a36:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014a3a:	4299      	cmp	r1, r3
 8014a3c:	d002      	beq.n	8014a44 <__sflush_r+0x94>
 8014a3e:	4628      	mov	r0, r5
 8014a40:	f001 f920 	bl	8015c84 <_free_r>
 8014a44:	2000      	movs	r0, #0
 8014a46:	6360      	str	r0, [r4, #52]	; 0x34
 8014a48:	e7c0      	b.n	80149cc <__sflush_r+0x1c>
 8014a4a:	2301      	movs	r3, #1
 8014a4c:	4628      	mov	r0, r5
 8014a4e:	47b0      	blx	r6
 8014a50:	1c41      	adds	r1, r0, #1
 8014a52:	d1c8      	bne.n	80149e6 <__sflush_r+0x36>
 8014a54:	682b      	ldr	r3, [r5, #0]
 8014a56:	2b00      	cmp	r3, #0
 8014a58:	d0c5      	beq.n	80149e6 <__sflush_r+0x36>
 8014a5a:	2b1d      	cmp	r3, #29
 8014a5c:	d001      	beq.n	8014a62 <__sflush_r+0xb2>
 8014a5e:	2b16      	cmp	r3, #22
 8014a60:	d101      	bne.n	8014a66 <__sflush_r+0xb6>
 8014a62:	602f      	str	r7, [r5, #0]
 8014a64:	e7b1      	b.n	80149ca <__sflush_r+0x1a>
 8014a66:	89a3      	ldrh	r3, [r4, #12]
 8014a68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014a6c:	81a3      	strh	r3, [r4, #12]
 8014a6e:	e7ad      	b.n	80149cc <__sflush_r+0x1c>
 8014a70:	690f      	ldr	r7, [r1, #16]
 8014a72:	2f00      	cmp	r7, #0
 8014a74:	d0a9      	beq.n	80149ca <__sflush_r+0x1a>
 8014a76:	0793      	lsls	r3, r2, #30
 8014a78:	680e      	ldr	r6, [r1, #0]
 8014a7a:	bf08      	it	eq
 8014a7c:	694b      	ldreq	r3, [r1, #20]
 8014a7e:	600f      	str	r7, [r1, #0]
 8014a80:	bf18      	it	ne
 8014a82:	2300      	movne	r3, #0
 8014a84:	eba6 0807 	sub.w	r8, r6, r7
 8014a88:	608b      	str	r3, [r1, #8]
 8014a8a:	f1b8 0f00 	cmp.w	r8, #0
 8014a8e:	dd9c      	ble.n	80149ca <__sflush_r+0x1a>
 8014a90:	4643      	mov	r3, r8
 8014a92:	463a      	mov	r2, r7
 8014a94:	6a21      	ldr	r1, [r4, #32]
 8014a96:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014a98:	4628      	mov	r0, r5
 8014a9a:	47b0      	blx	r6
 8014a9c:	2800      	cmp	r0, #0
 8014a9e:	dc06      	bgt.n	8014aae <__sflush_r+0xfe>
 8014aa0:	89a3      	ldrh	r3, [r4, #12]
 8014aa2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014aa6:	81a3      	strh	r3, [r4, #12]
 8014aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8014aac:	e78e      	b.n	80149cc <__sflush_r+0x1c>
 8014aae:	4407      	add	r7, r0
 8014ab0:	eba8 0800 	sub.w	r8, r8, r0
 8014ab4:	e7e9      	b.n	8014a8a <__sflush_r+0xda>
 8014ab6:	bf00      	nop
 8014ab8:	20400001 	.word	0x20400001

08014abc <_fflush_r>:
 8014abc:	b538      	push	{r3, r4, r5, lr}
 8014abe:	690b      	ldr	r3, [r1, #16]
 8014ac0:	4605      	mov	r5, r0
 8014ac2:	460c      	mov	r4, r1
 8014ac4:	b1db      	cbz	r3, 8014afe <_fflush_r+0x42>
 8014ac6:	b118      	cbz	r0, 8014ad0 <_fflush_r+0x14>
 8014ac8:	6983      	ldr	r3, [r0, #24]
 8014aca:	b90b      	cbnz	r3, 8014ad0 <_fflush_r+0x14>
 8014acc:	f000 f860 	bl	8014b90 <__sinit>
 8014ad0:	4b0c      	ldr	r3, [pc, #48]	; (8014b04 <_fflush_r+0x48>)
 8014ad2:	429c      	cmp	r4, r3
 8014ad4:	d109      	bne.n	8014aea <_fflush_r+0x2e>
 8014ad6:	686c      	ldr	r4, [r5, #4]
 8014ad8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014adc:	b17b      	cbz	r3, 8014afe <_fflush_r+0x42>
 8014ade:	4621      	mov	r1, r4
 8014ae0:	4628      	mov	r0, r5
 8014ae2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014ae6:	f7ff bf63 	b.w	80149b0 <__sflush_r>
 8014aea:	4b07      	ldr	r3, [pc, #28]	; (8014b08 <_fflush_r+0x4c>)
 8014aec:	429c      	cmp	r4, r3
 8014aee:	d101      	bne.n	8014af4 <_fflush_r+0x38>
 8014af0:	68ac      	ldr	r4, [r5, #8]
 8014af2:	e7f1      	b.n	8014ad8 <_fflush_r+0x1c>
 8014af4:	4b05      	ldr	r3, [pc, #20]	; (8014b0c <_fflush_r+0x50>)
 8014af6:	429c      	cmp	r4, r3
 8014af8:	bf08      	it	eq
 8014afa:	68ec      	ldreq	r4, [r5, #12]
 8014afc:	e7ec      	b.n	8014ad8 <_fflush_r+0x1c>
 8014afe:	2000      	movs	r0, #0
 8014b00:	bd38      	pop	{r3, r4, r5, pc}
 8014b02:	bf00      	nop
 8014b04:	08017598 	.word	0x08017598
 8014b08:	080175b8 	.word	0x080175b8
 8014b0c:	08017578 	.word	0x08017578

08014b10 <std>:
 8014b10:	2300      	movs	r3, #0
 8014b12:	b510      	push	{r4, lr}
 8014b14:	4604      	mov	r4, r0
 8014b16:	e9c0 3300 	strd	r3, r3, [r0]
 8014b1a:	6083      	str	r3, [r0, #8]
 8014b1c:	8181      	strh	r1, [r0, #12]
 8014b1e:	6643      	str	r3, [r0, #100]	; 0x64
 8014b20:	81c2      	strh	r2, [r0, #14]
 8014b22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014b26:	6183      	str	r3, [r0, #24]
 8014b28:	4619      	mov	r1, r3
 8014b2a:	2208      	movs	r2, #8
 8014b2c:	305c      	adds	r0, #92	; 0x5c
 8014b2e:	f7fd f9a3 	bl	8011e78 <memset>
 8014b32:	4b05      	ldr	r3, [pc, #20]	; (8014b48 <std+0x38>)
 8014b34:	6263      	str	r3, [r4, #36]	; 0x24
 8014b36:	4b05      	ldr	r3, [pc, #20]	; (8014b4c <std+0x3c>)
 8014b38:	62a3      	str	r3, [r4, #40]	; 0x28
 8014b3a:	4b05      	ldr	r3, [pc, #20]	; (8014b50 <std+0x40>)
 8014b3c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014b3e:	4b05      	ldr	r3, [pc, #20]	; (8014b54 <std+0x44>)
 8014b40:	6224      	str	r4, [r4, #32]
 8014b42:	6323      	str	r3, [r4, #48]	; 0x30
 8014b44:	bd10      	pop	{r4, pc}
 8014b46:	bf00      	nop
 8014b48:	08012d2d 	.word	0x08012d2d
 8014b4c:	08012d53 	.word	0x08012d53
 8014b50:	08012d8b 	.word	0x08012d8b
 8014b54:	08012daf 	.word	0x08012daf

08014b58 <_cleanup_r>:
 8014b58:	4901      	ldr	r1, [pc, #4]	; (8014b60 <_cleanup_r+0x8>)
 8014b5a:	f000 b885 	b.w	8014c68 <_fwalk_reent>
 8014b5e:	bf00      	nop
 8014b60:	08014abd 	.word	0x08014abd

08014b64 <__sfmoreglue>:
 8014b64:	b570      	push	{r4, r5, r6, lr}
 8014b66:	1e4a      	subs	r2, r1, #1
 8014b68:	2568      	movs	r5, #104	; 0x68
 8014b6a:	4355      	muls	r5, r2
 8014b6c:	460e      	mov	r6, r1
 8014b6e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8014b72:	f001 f8d5 	bl	8015d20 <_malloc_r>
 8014b76:	4604      	mov	r4, r0
 8014b78:	b140      	cbz	r0, 8014b8c <__sfmoreglue+0x28>
 8014b7a:	2100      	movs	r1, #0
 8014b7c:	e9c0 1600 	strd	r1, r6, [r0]
 8014b80:	300c      	adds	r0, #12
 8014b82:	60a0      	str	r0, [r4, #8]
 8014b84:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014b88:	f7fd f976 	bl	8011e78 <memset>
 8014b8c:	4620      	mov	r0, r4
 8014b8e:	bd70      	pop	{r4, r5, r6, pc}

08014b90 <__sinit>:
 8014b90:	6983      	ldr	r3, [r0, #24]
 8014b92:	b510      	push	{r4, lr}
 8014b94:	4604      	mov	r4, r0
 8014b96:	bb33      	cbnz	r3, 8014be6 <__sinit+0x56>
 8014b98:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8014b9c:	6503      	str	r3, [r0, #80]	; 0x50
 8014b9e:	4b12      	ldr	r3, [pc, #72]	; (8014be8 <__sinit+0x58>)
 8014ba0:	4a12      	ldr	r2, [pc, #72]	; (8014bec <__sinit+0x5c>)
 8014ba2:	681b      	ldr	r3, [r3, #0]
 8014ba4:	6282      	str	r2, [r0, #40]	; 0x28
 8014ba6:	4298      	cmp	r0, r3
 8014ba8:	bf04      	itt	eq
 8014baa:	2301      	moveq	r3, #1
 8014bac:	6183      	streq	r3, [r0, #24]
 8014bae:	f000 f81f 	bl	8014bf0 <__sfp>
 8014bb2:	6060      	str	r0, [r4, #4]
 8014bb4:	4620      	mov	r0, r4
 8014bb6:	f000 f81b 	bl	8014bf0 <__sfp>
 8014bba:	60a0      	str	r0, [r4, #8]
 8014bbc:	4620      	mov	r0, r4
 8014bbe:	f000 f817 	bl	8014bf0 <__sfp>
 8014bc2:	2200      	movs	r2, #0
 8014bc4:	60e0      	str	r0, [r4, #12]
 8014bc6:	2104      	movs	r1, #4
 8014bc8:	6860      	ldr	r0, [r4, #4]
 8014bca:	f7ff ffa1 	bl	8014b10 <std>
 8014bce:	2201      	movs	r2, #1
 8014bd0:	2109      	movs	r1, #9
 8014bd2:	68a0      	ldr	r0, [r4, #8]
 8014bd4:	f7ff ff9c 	bl	8014b10 <std>
 8014bd8:	2202      	movs	r2, #2
 8014bda:	2112      	movs	r1, #18
 8014bdc:	68e0      	ldr	r0, [r4, #12]
 8014bde:	f7ff ff97 	bl	8014b10 <std>
 8014be2:	2301      	movs	r3, #1
 8014be4:	61a3      	str	r3, [r4, #24]
 8014be6:	bd10      	pop	{r4, pc}
 8014be8:	080174d8 	.word	0x080174d8
 8014bec:	08014b59 	.word	0x08014b59

08014bf0 <__sfp>:
 8014bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014bf2:	4b1b      	ldr	r3, [pc, #108]	; (8014c60 <__sfp+0x70>)
 8014bf4:	681e      	ldr	r6, [r3, #0]
 8014bf6:	69b3      	ldr	r3, [r6, #24]
 8014bf8:	4607      	mov	r7, r0
 8014bfa:	b913      	cbnz	r3, 8014c02 <__sfp+0x12>
 8014bfc:	4630      	mov	r0, r6
 8014bfe:	f7ff ffc7 	bl	8014b90 <__sinit>
 8014c02:	3648      	adds	r6, #72	; 0x48
 8014c04:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014c08:	3b01      	subs	r3, #1
 8014c0a:	d503      	bpl.n	8014c14 <__sfp+0x24>
 8014c0c:	6833      	ldr	r3, [r6, #0]
 8014c0e:	b133      	cbz	r3, 8014c1e <__sfp+0x2e>
 8014c10:	6836      	ldr	r6, [r6, #0]
 8014c12:	e7f7      	b.n	8014c04 <__sfp+0x14>
 8014c14:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014c18:	b16d      	cbz	r5, 8014c36 <__sfp+0x46>
 8014c1a:	3468      	adds	r4, #104	; 0x68
 8014c1c:	e7f4      	b.n	8014c08 <__sfp+0x18>
 8014c1e:	2104      	movs	r1, #4
 8014c20:	4638      	mov	r0, r7
 8014c22:	f7ff ff9f 	bl	8014b64 <__sfmoreglue>
 8014c26:	6030      	str	r0, [r6, #0]
 8014c28:	2800      	cmp	r0, #0
 8014c2a:	d1f1      	bne.n	8014c10 <__sfp+0x20>
 8014c2c:	230c      	movs	r3, #12
 8014c2e:	603b      	str	r3, [r7, #0]
 8014c30:	4604      	mov	r4, r0
 8014c32:	4620      	mov	r0, r4
 8014c34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014c36:	4b0b      	ldr	r3, [pc, #44]	; (8014c64 <__sfp+0x74>)
 8014c38:	6665      	str	r5, [r4, #100]	; 0x64
 8014c3a:	e9c4 5500 	strd	r5, r5, [r4]
 8014c3e:	60a5      	str	r5, [r4, #8]
 8014c40:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8014c44:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8014c48:	2208      	movs	r2, #8
 8014c4a:	4629      	mov	r1, r5
 8014c4c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014c50:	f7fd f912 	bl	8011e78 <memset>
 8014c54:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014c58:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8014c5c:	e7e9      	b.n	8014c32 <__sfp+0x42>
 8014c5e:	bf00      	nop
 8014c60:	080174d8 	.word	0x080174d8
 8014c64:	ffff0001 	.word	0xffff0001

08014c68 <_fwalk_reent>:
 8014c68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014c6c:	4680      	mov	r8, r0
 8014c6e:	4689      	mov	r9, r1
 8014c70:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014c74:	2600      	movs	r6, #0
 8014c76:	b914      	cbnz	r4, 8014c7e <_fwalk_reent+0x16>
 8014c78:	4630      	mov	r0, r6
 8014c7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014c7e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8014c82:	3f01      	subs	r7, #1
 8014c84:	d501      	bpl.n	8014c8a <_fwalk_reent+0x22>
 8014c86:	6824      	ldr	r4, [r4, #0]
 8014c88:	e7f5      	b.n	8014c76 <_fwalk_reent+0xe>
 8014c8a:	89ab      	ldrh	r3, [r5, #12]
 8014c8c:	2b01      	cmp	r3, #1
 8014c8e:	d907      	bls.n	8014ca0 <_fwalk_reent+0x38>
 8014c90:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014c94:	3301      	adds	r3, #1
 8014c96:	d003      	beq.n	8014ca0 <_fwalk_reent+0x38>
 8014c98:	4629      	mov	r1, r5
 8014c9a:	4640      	mov	r0, r8
 8014c9c:	47c8      	blx	r9
 8014c9e:	4306      	orrs	r6, r0
 8014ca0:	3568      	adds	r5, #104	; 0x68
 8014ca2:	e7ee      	b.n	8014c82 <_fwalk_reent+0x1a>

08014ca4 <rshift>:
 8014ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014ca6:	6906      	ldr	r6, [r0, #16]
 8014ca8:	114b      	asrs	r3, r1, #5
 8014caa:	429e      	cmp	r6, r3
 8014cac:	f100 0414 	add.w	r4, r0, #20
 8014cb0:	dd30      	ble.n	8014d14 <rshift+0x70>
 8014cb2:	f011 011f 	ands.w	r1, r1, #31
 8014cb6:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8014cba:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8014cbe:	d108      	bne.n	8014cd2 <rshift+0x2e>
 8014cc0:	4621      	mov	r1, r4
 8014cc2:	42b2      	cmp	r2, r6
 8014cc4:	460b      	mov	r3, r1
 8014cc6:	d211      	bcs.n	8014cec <rshift+0x48>
 8014cc8:	f852 3b04 	ldr.w	r3, [r2], #4
 8014ccc:	f841 3b04 	str.w	r3, [r1], #4
 8014cd0:	e7f7      	b.n	8014cc2 <rshift+0x1e>
 8014cd2:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8014cd6:	f1c1 0c20 	rsb	ip, r1, #32
 8014cda:	40cd      	lsrs	r5, r1
 8014cdc:	3204      	adds	r2, #4
 8014cde:	4623      	mov	r3, r4
 8014ce0:	42b2      	cmp	r2, r6
 8014ce2:	4617      	mov	r7, r2
 8014ce4:	d30c      	bcc.n	8014d00 <rshift+0x5c>
 8014ce6:	601d      	str	r5, [r3, #0]
 8014ce8:	b105      	cbz	r5, 8014cec <rshift+0x48>
 8014cea:	3304      	adds	r3, #4
 8014cec:	1b1a      	subs	r2, r3, r4
 8014cee:	42a3      	cmp	r3, r4
 8014cf0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8014cf4:	bf08      	it	eq
 8014cf6:	2300      	moveq	r3, #0
 8014cf8:	6102      	str	r2, [r0, #16]
 8014cfa:	bf08      	it	eq
 8014cfc:	6143      	streq	r3, [r0, #20]
 8014cfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014d00:	683f      	ldr	r7, [r7, #0]
 8014d02:	fa07 f70c 	lsl.w	r7, r7, ip
 8014d06:	433d      	orrs	r5, r7
 8014d08:	f843 5b04 	str.w	r5, [r3], #4
 8014d0c:	f852 5b04 	ldr.w	r5, [r2], #4
 8014d10:	40cd      	lsrs	r5, r1
 8014d12:	e7e5      	b.n	8014ce0 <rshift+0x3c>
 8014d14:	4623      	mov	r3, r4
 8014d16:	e7e9      	b.n	8014cec <rshift+0x48>

08014d18 <__hexdig_fun>:
 8014d18:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8014d1c:	2b09      	cmp	r3, #9
 8014d1e:	d802      	bhi.n	8014d26 <__hexdig_fun+0xe>
 8014d20:	3820      	subs	r0, #32
 8014d22:	b2c0      	uxtb	r0, r0
 8014d24:	4770      	bx	lr
 8014d26:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8014d2a:	2b05      	cmp	r3, #5
 8014d2c:	d801      	bhi.n	8014d32 <__hexdig_fun+0x1a>
 8014d2e:	3847      	subs	r0, #71	; 0x47
 8014d30:	e7f7      	b.n	8014d22 <__hexdig_fun+0xa>
 8014d32:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8014d36:	2b05      	cmp	r3, #5
 8014d38:	d801      	bhi.n	8014d3e <__hexdig_fun+0x26>
 8014d3a:	3827      	subs	r0, #39	; 0x27
 8014d3c:	e7f1      	b.n	8014d22 <__hexdig_fun+0xa>
 8014d3e:	2000      	movs	r0, #0
 8014d40:	4770      	bx	lr

08014d42 <__gethex>:
 8014d42:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d46:	b08b      	sub	sp, #44	; 0x2c
 8014d48:	468a      	mov	sl, r1
 8014d4a:	9002      	str	r0, [sp, #8]
 8014d4c:	9816      	ldr	r0, [sp, #88]	; 0x58
 8014d4e:	9306      	str	r3, [sp, #24]
 8014d50:	4690      	mov	r8, r2
 8014d52:	f000 fadf 	bl	8015314 <__localeconv_l>
 8014d56:	6803      	ldr	r3, [r0, #0]
 8014d58:	9303      	str	r3, [sp, #12]
 8014d5a:	4618      	mov	r0, r3
 8014d5c:	f7eb fa50 	bl	8000200 <strlen>
 8014d60:	9b03      	ldr	r3, [sp, #12]
 8014d62:	9001      	str	r0, [sp, #4]
 8014d64:	4403      	add	r3, r0
 8014d66:	f04f 0b00 	mov.w	fp, #0
 8014d6a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8014d6e:	9307      	str	r3, [sp, #28]
 8014d70:	f8da 3000 	ldr.w	r3, [sl]
 8014d74:	3302      	adds	r3, #2
 8014d76:	461f      	mov	r7, r3
 8014d78:	f813 0b01 	ldrb.w	r0, [r3], #1
 8014d7c:	2830      	cmp	r0, #48	; 0x30
 8014d7e:	d06c      	beq.n	8014e5a <__gethex+0x118>
 8014d80:	f7ff ffca 	bl	8014d18 <__hexdig_fun>
 8014d84:	4604      	mov	r4, r0
 8014d86:	2800      	cmp	r0, #0
 8014d88:	d16a      	bne.n	8014e60 <__gethex+0x11e>
 8014d8a:	9a01      	ldr	r2, [sp, #4]
 8014d8c:	9903      	ldr	r1, [sp, #12]
 8014d8e:	4638      	mov	r0, r7
 8014d90:	f001 fe3e 	bl	8016a10 <strncmp>
 8014d94:	2800      	cmp	r0, #0
 8014d96:	d166      	bne.n	8014e66 <__gethex+0x124>
 8014d98:	9b01      	ldr	r3, [sp, #4]
 8014d9a:	5cf8      	ldrb	r0, [r7, r3]
 8014d9c:	18fe      	adds	r6, r7, r3
 8014d9e:	f7ff ffbb 	bl	8014d18 <__hexdig_fun>
 8014da2:	2800      	cmp	r0, #0
 8014da4:	d062      	beq.n	8014e6c <__gethex+0x12a>
 8014da6:	4633      	mov	r3, r6
 8014da8:	7818      	ldrb	r0, [r3, #0]
 8014daa:	2830      	cmp	r0, #48	; 0x30
 8014dac:	461f      	mov	r7, r3
 8014dae:	f103 0301 	add.w	r3, r3, #1
 8014db2:	d0f9      	beq.n	8014da8 <__gethex+0x66>
 8014db4:	f7ff ffb0 	bl	8014d18 <__hexdig_fun>
 8014db8:	fab0 f580 	clz	r5, r0
 8014dbc:	096d      	lsrs	r5, r5, #5
 8014dbe:	4634      	mov	r4, r6
 8014dc0:	f04f 0b01 	mov.w	fp, #1
 8014dc4:	463a      	mov	r2, r7
 8014dc6:	4616      	mov	r6, r2
 8014dc8:	3201      	adds	r2, #1
 8014dca:	7830      	ldrb	r0, [r6, #0]
 8014dcc:	f7ff ffa4 	bl	8014d18 <__hexdig_fun>
 8014dd0:	2800      	cmp	r0, #0
 8014dd2:	d1f8      	bne.n	8014dc6 <__gethex+0x84>
 8014dd4:	9a01      	ldr	r2, [sp, #4]
 8014dd6:	9903      	ldr	r1, [sp, #12]
 8014dd8:	4630      	mov	r0, r6
 8014dda:	f001 fe19 	bl	8016a10 <strncmp>
 8014dde:	b950      	cbnz	r0, 8014df6 <__gethex+0xb4>
 8014de0:	b954      	cbnz	r4, 8014df8 <__gethex+0xb6>
 8014de2:	9b01      	ldr	r3, [sp, #4]
 8014de4:	18f4      	adds	r4, r6, r3
 8014de6:	4622      	mov	r2, r4
 8014de8:	4616      	mov	r6, r2
 8014dea:	3201      	adds	r2, #1
 8014dec:	7830      	ldrb	r0, [r6, #0]
 8014dee:	f7ff ff93 	bl	8014d18 <__hexdig_fun>
 8014df2:	2800      	cmp	r0, #0
 8014df4:	d1f8      	bne.n	8014de8 <__gethex+0xa6>
 8014df6:	b10c      	cbz	r4, 8014dfc <__gethex+0xba>
 8014df8:	1ba4      	subs	r4, r4, r6
 8014dfa:	00a4      	lsls	r4, r4, #2
 8014dfc:	7833      	ldrb	r3, [r6, #0]
 8014dfe:	2b50      	cmp	r3, #80	; 0x50
 8014e00:	d001      	beq.n	8014e06 <__gethex+0xc4>
 8014e02:	2b70      	cmp	r3, #112	; 0x70
 8014e04:	d140      	bne.n	8014e88 <__gethex+0x146>
 8014e06:	7873      	ldrb	r3, [r6, #1]
 8014e08:	2b2b      	cmp	r3, #43	; 0x2b
 8014e0a:	d031      	beq.n	8014e70 <__gethex+0x12e>
 8014e0c:	2b2d      	cmp	r3, #45	; 0x2d
 8014e0e:	d033      	beq.n	8014e78 <__gethex+0x136>
 8014e10:	1c71      	adds	r1, r6, #1
 8014e12:	f04f 0900 	mov.w	r9, #0
 8014e16:	7808      	ldrb	r0, [r1, #0]
 8014e18:	f7ff ff7e 	bl	8014d18 <__hexdig_fun>
 8014e1c:	1e43      	subs	r3, r0, #1
 8014e1e:	b2db      	uxtb	r3, r3
 8014e20:	2b18      	cmp	r3, #24
 8014e22:	d831      	bhi.n	8014e88 <__gethex+0x146>
 8014e24:	f1a0 0210 	sub.w	r2, r0, #16
 8014e28:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8014e2c:	f7ff ff74 	bl	8014d18 <__hexdig_fun>
 8014e30:	1e43      	subs	r3, r0, #1
 8014e32:	b2db      	uxtb	r3, r3
 8014e34:	2b18      	cmp	r3, #24
 8014e36:	d922      	bls.n	8014e7e <__gethex+0x13c>
 8014e38:	f1b9 0f00 	cmp.w	r9, #0
 8014e3c:	d000      	beq.n	8014e40 <__gethex+0xfe>
 8014e3e:	4252      	negs	r2, r2
 8014e40:	4414      	add	r4, r2
 8014e42:	f8ca 1000 	str.w	r1, [sl]
 8014e46:	b30d      	cbz	r5, 8014e8c <__gethex+0x14a>
 8014e48:	f1bb 0f00 	cmp.w	fp, #0
 8014e4c:	bf0c      	ite	eq
 8014e4e:	2706      	moveq	r7, #6
 8014e50:	2700      	movne	r7, #0
 8014e52:	4638      	mov	r0, r7
 8014e54:	b00b      	add	sp, #44	; 0x2c
 8014e56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e5a:	f10b 0b01 	add.w	fp, fp, #1
 8014e5e:	e78a      	b.n	8014d76 <__gethex+0x34>
 8014e60:	2500      	movs	r5, #0
 8014e62:	462c      	mov	r4, r5
 8014e64:	e7ae      	b.n	8014dc4 <__gethex+0x82>
 8014e66:	463e      	mov	r6, r7
 8014e68:	2501      	movs	r5, #1
 8014e6a:	e7c7      	b.n	8014dfc <__gethex+0xba>
 8014e6c:	4604      	mov	r4, r0
 8014e6e:	e7fb      	b.n	8014e68 <__gethex+0x126>
 8014e70:	f04f 0900 	mov.w	r9, #0
 8014e74:	1cb1      	adds	r1, r6, #2
 8014e76:	e7ce      	b.n	8014e16 <__gethex+0xd4>
 8014e78:	f04f 0901 	mov.w	r9, #1
 8014e7c:	e7fa      	b.n	8014e74 <__gethex+0x132>
 8014e7e:	230a      	movs	r3, #10
 8014e80:	fb03 0202 	mla	r2, r3, r2, r0
 8014e84:	3a10      	subs	r2, #16
 8014e86:	e7cf      	b.n	8014e28 <__gethex+0xe6>
 8014e88:	4631      	mov	r1, r6
 8014e8a:	e7da      	b.n	8014e42 <__gethex+0x100>
 8014e8c:	1bf3      	subs	r3, r6, r7
 8014e8e:	3b01      	subs	r3, #1
 8014e90:	4629      	mov	r1, r5
 8014e92:	2b07      	cmp	r3, #7
 8014e94:	dc49      	bgt.n	8014f2a <__gethex+0x1e8>
 8014e96:	9802      	ldr	r0, [sp, #8]
 8014e98:	f000 fae7 	bl	801546a <_Balloc>
 8014e9c:	9b01      	ldr	r3, [sp, #4]
 8014e9e:	f100 0914 	add.w	r9, r0, #20
 8014ea2:	f04f 0b00 	mov.w	fp, #0
 8014ea6:	f1c3 0301 	rsb	r3, r3, #1
 8014eaa:	4605      	mov	r5, r0
 8014eac:	f8cd 9010 	str.w	r9, [sp, #16]
 8014eb0:	46da      	mov	sl, fp
 8014eb2:	9308      	str	r3, [sp, #32]
 8014eb4:	42b7      	cmp	r7, r6
 8014eb6:	d33b      	bcc.n	8014f30 <__gethex+0x1ee>
 8014eb8:	9804      	ldr	r0, [sp, #16]
 8014eba:	f840 ab04 	str.w	sl, [r0], #4
 8014ebe:	eba0 0009 	sub.w	r0, r0, r9
 8014ec2:	1080      	asrs	r0, r0, #2
 8014ec4:	6128      	str	r0, [r5, #16]
 8014ec6:	0147      	lsls	r7, r0, #5
 8014ec8:	4650      	mov	r0, sl
 8014eca:	f000 fb92 	bl	80155f2 <__hi0bits>
 8014ece:	f8d8 6000 	ldr.w	r6, [r8]
 8014ed2:	1a3f      	subs	r7, r7, r0
 8014ed4:	42b7      	cmp	r7, r6
 8014ed6:	dd64      	ble.n	8014fa2 <__gethex+0x260>
 8014ed8:	1bbf      	subs	r7, r7, r6
 8014eda:	4639      	mov	r1, r7
 8014edc:	4628      	mov	r0, r5
 8014ede:	f000 fea1 	bl	8015c24 <__any_on>
 8014ee2:	4682      	mov	sl, r0
 8014ee4:	b178      	cbz	r0, 8014f06 <__gethex+0x1c4>
 8014ee6:	1e7b      	subs	r3, r7, #1
 8014ee8:	1159      	asrs	r1, r3, #5
 8014eea:	f003 021f 	and.w	r2, r3, #31
 8014eee:	f04f 0a01 	mov.w	sl, #1
 8014ef2:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8014ef6:	fa0a f202 	lsl.w	r2, sl, r2
 8014efa:	420a      	tst	r2, r1
 8014efc:	d003      	beq.n	8014f06 <__gethex+0x1c4>
 8014efe:	4553      	cmp	r3, sl
 8014f00:	dc46      	bgt.n	8014f90 <__gethex+0x24e>
 8014f02:	f04f 0a02 	mov.w	sl, #2
 8014f06:	4639      	mov	r1, r7
 8014f08:	4628      	mov	r0, r5
 8014f0a:	f7ff fecb 	bl	8014ca4 <rshift>
 8014f0e:	443c      	add	r4, r7
 8014f10:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8014f14:	42a3      	cmp	r3, r4
 8014f16:	da52      	bge.n	8014fbe <__gethex+0x27c>
 8014f18:	4629      	mov	r1, r5
 8014f1a:	9802      	ldr	r0, [sp, #8]
 8014f1c:	f000 fad9 	bl	80154d2 <_Bfree>
 8014f20:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8014f22:	2300      	movs	r3, #0
 8014f24:	6013      	str	r3, [r2, #0]
 8014f26:	27a3      	movs	r7, #163	; 0xa3
 8014f28:	e793      	b.n	8014e52 <__gethex+0x110>
 8014f2a:	3101      	adds	r1, #1
 8014f2c:	105b      	asrs	r3, r3, #1
 8014f2e:	e7b0      	b.n	8014e92 <__gethex+0x150>
 8014f30:	1e73      	subs	r3, r6, #1
 8014f32:	9305      	str	r3, [sp, #20]
 8014f34:	9a07      	ldr	r2, [sp, #28]
 8014f36:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8014f3a:	4293      	cmp	r3, r2
 8014f3c:	d018      	beq.n	8014f70 <__gethex+0x22e>
 8014f3e:	f1bb 0f20 	cmp.w	fp, #32
 8014f42:	d107      	bne.n	8014f54 <__gethex+0x212>
 8014f44:	9b04      	ldr	r3, [sp, #16]
 8014f46:	f8c3 a000 	str.w	sl, [r3]
 8014f4a:	3304      	adds	r3, #4
 8014f4c:	f04f 0a00 	mov.w	sl, #0
 8014f50:	9304      	str	r3, [sp, #16]
 8014f52:	46d3      	mov	fp, sl
 8014f54:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8014f58:	f7ff fede 	bl	8014d18 <__hexdig_fun>
 8014f5c:	f000 000f 	and.w	r0, r0, #15
 8014f60:	fa00 f00b 	lsl.w	r0, r0, fp
 8014f64:	ea4a 0a00 	orr.w	sl, sl, r0
 8014f68:	f10b 0b04 	add.w	fp, fp, #4
 8014f6c:	9b05      	ldr	r3, [sp, #20]
 8014f6e:	e00d      	b.n	8014f8c <__gethex+0x24a>
 8014f70:	9b05      	ldr	r3, [sp, #20]
 8014f72:	9a08      	ldr	r2, [sp, #32]
 8014f74:	4413      	add	r3, r2
 8014f76:	42bb      	cmp	r3, r7
 8014f78:	d3e1      	bcc.n	8014f3e <__gethex+0x1fc>
 8014f7a:	4618      	mov	r0, r3
 8014f7c:	9a01      	ldr	r2, [sp, #4]
 8014f7e:	9903      	ldr	r1, [sp, #12]
 8014f80:	9309      	str	r3, [sp, #36]	; 0x24
 8014f82:	f001 fd45 	bl	8016a10 <strncmp>
 8014f86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014f88:	2800      	cmp	r0, #0
 8014f8a:	d1d8      	bne.n	8014f3e <__gethex+0x1fc>
 8014f8c:	461e      	mov	r6, r3
 8014f8e:	e791      	b.n	8014eb4 <__gethex+0x172>
 8014f90:	1eb9      	subs	r1, r7, #2
 8014f92:	4628      	mov	r0, r5
 8014f94:	f000 fe46 	bl	8015c24 <__any_on>
 8014f98:	2800      	cmp	r0, #0
 8014f9a:	d0b2      	beq.n	8014f02 <__gethex+0x1c0>
 8014f9c:	f04f 0a03 	mov.w	sl, #3
 8014fa0:	e7b1      	b.n	8014f06 <__gethex+0x1c4>
 8014fa2:	da09      	bge.n	8014fb8 <__gethex+0x276>
 8014fa4:	1bf7      	subs	r7, r6, r7
 8014fa6:	4629      	mov	r1, r5
 8014fa8:	463a      	mov	r2, r7
 8014faa:	9802      	ldr	r0, [sp, #8]
 8014fac:	f000 fc5c 	bl	8015868 <__lshift>
 8014fb0:	1be4      	subs	r4, r4, r7
 8014fb2:	4605      	mov	r5, r0
 8014fb4:	f100 0914 	add.w	r9, r0, #20
 8014fb8:	f04f 0a00 	mov.w	sl, #0
 8014fbc:	e7a8      	b.n	8014f10 <__gethex+0x1ce>
 8014fbe:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8014fc2:	42a0      	cmp	r0, r4
 8014fc4:	dd6a      	ble.n	801509c <__gethex+0x35a>
 8014fc6:	1b04      	subs	r4, r0, r4
 8014fc8:	42a6      	cmp	r6, r4
 8014fca:	dc2e      	bgt.n	801502a <__gethex+0x2e8>
 8014fcc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8014fd0:	2b02      	cmp	r3, #2
 8014fd2:	d022      	beq.n	801501a <__gethex+0x2d8>
 8014fd4:	2b03      	cmp	r3, #3
 8014fd6:	d024      	beq.n	8015022 <__gethex+0x2e0>
 8014fd8:	2b01      	cmp	r3, #1
 8014fda:	d115      	bne.n	8015008 <__gethex+0x2c6>
 8014fdc:	42a6      	cmp	r6, r4
 8014fde:	d113      	bne.n	8015008 <__gethex+0x2c6>
 8014fe0:	2e01      	cmp	r6, #1
 8014fe2:	dc0b      	bgt.n	8014ffc <__gethex+0x2ba>
 8014fe4:	9a06      	ldr	r2, [sp, #24]
 8014fe6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8014fea:	6013      	str	r3, [r2, #0]
 8014fec:	2301      	movs	r3, #1
 8014fee:	612b      	str	r3, [r5, #16]
 8014ff0:	f8c9 3000 	str.w	r3, [r9]
 8014ff4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8014ff6:	2762      	movs	r7, #98	; 0x62
 8014ff8:	601d      	str	r5, [r3, #0]
 8014ffa:	e72a      	b.n	8014e52 <__gethex+0x110>
 8014ffc:	1e71      	subs	r1, r6, #1
 8014ffe:	4628      	mov	r0, r5
 8015000:	f000 fe10 	bl	8015c24 <__any_on>
 8015004:	2800      	cmp	r0, #0
 8015006:	d1ed      	bne.n	8014fe4 <__gethex+0x2a2>
 8015008:	4629      	mov	r1, r5
 801500a:	9802      	ldr	r0, [sp, #8]
 801500c:	f000 fa61 	bl	80154d2 <_Bfree>
 8015010:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8015012:	2300      	movs	r3, #0
 8015014:	6013      	str	r3, [r2, #0]
 8015016:	2750      	movs	r7, #80	; 0x50
 8015018:	e71b      	b.n	8014e52 <__gethex+0x110>
 801501a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801501c:	2b00      	cmp	r3, #0
 801501e:	d0e1      	beq.n	8014fe4 <__gethex+0x2a2>
 8015020:	e7f2      	b.n	8015008 <__gethex+0x2c6>
 8015022:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8015024:	2b00      	cmp	r3, #0
 8015026:	d1dd      	bne.n	8014fe4 <__gethex+0x2a2>
 8015028:	e7ee      	b.n	8015008 <__gethex+0x2c6>
 801502a:	1e67      	subs	r7, r4, #1
 801502c:	f1ba 0f00 	cmp.w	sl, #0
 8015030:	d131      	bne.n	8015096 <__gethex+0x354>
 8015032:	b127      	cbz	r7, 801503e <__gethex+0x2fc>
 8015034:	4639      	mov	r1, r7
 8015036:	4628      	mov	r0, r5
 8015038:	f000 fdf4 	bl	8015c24 <__any_on>
 801503c:	4682      	mov	sl, r0
 801503e:	117a      	asrs	r2, r7, #5
 8015040:	2301      	movs	r3, #1
 8015042:	f007 071f 	and.w	r7, r7, #31
 8015046:	fa03 f707 	lsl.w	r7, r3, r7
 801504a:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 801504e:	4621      	mov	r1, r4
 8015050:	421f      	tst	r7, r3
 8015052:	4628      	mov	r0, r5
 8015054:	bf18      	it	ne
 8015056:	f04a 0a02 	orrne.w	sl, sl, #2
 801505a:	1b36      	subs	r6, r6, r4
 801505c:	f7ff fe22 	bl	8014ca4 <rshift>
 8015060:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8015064:	2702      	movs	r7, #2
 8015066:	f1ba 0f00 	cmp.w	sl, #0
 801506a:	d048      	beq.n	80150fe <__gethex+0x3bc>
 801506c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015070:	2b02      	cmp	r3, #2
 8015072:	d015      	beq.n	80150a0 <__gethex+0x35e>
 8015074:	2b03      	cmp	r3, #3
 8015076:	d017      	beq.n	80150a8 <__gethex+0x366>
 8015078:	2b01      	cmp	r3, #1
 801507a:	d109      	bne.n	8015090 <__gethex+0x34e>
 801507c:	f01a 0f02 	tst.w	sl, #2
 8015080:	d006      	beq.n	8015090 <__gethex+0x34e>
 8015082:	f8d9 3000 	ldr.w	r3, [r9]
 8015086:	ea4a 0a03 	orr.w	sl, sl, r3
 801508a:	f01a 0f01 	tst.w	sl, #1
 801508e:	d10e      	bne.n	80150ae <__gethex+0x36c>
 8015090:	f047 0710 	orr.w	r7, r7, #16
 8015094:	e033      	b.n	80150fe <__gethex+0x3bc>
 8015096:	f04f 0a01 	mov.w	sl, #1
 801509a:	e7d0      	b.n	801503e <__gethex+0x2fc>
 801509c:	2701      	movs	r7, #1
 801509e:	e7e2      	b.n	8015066 <__gethex+0x324>
 80150a0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80150a2:	f1c3 0301 	rsb	r3, r3, #1
 80150a6:	9315      	str	r3, [sp, #84]	; 0x54
 80150a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80150aa:	2b00      	cmp	r3, #0
 80150ac:	d0f0      	beq.n	8015090 <__gethex+0x34e>
 80150ae:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80150b2:	f105 0314 	add.w	r3, r5, #20
 80150b6:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80150ba:	eb03 010a 	add.w	r1, r3, sl
 80150be:	f04f 0c00 	mov.w	ip, #0
 80150c2:	4618      	mov	r0, r3
 80150c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80150c8:	f1b2 3fff 	cmp.w	r2, #4294967295
 80150cc:	d01c      	beq.n	8015108 <__gethex+0x3c6>
 80150ce:	3201      	adds	r2, #1
 80150d0:	6002      	str	r2, [r0, #0]
 80150d2:	2f02      	cmp	r7, #2
 80150d4:	f105 0314 	add.w	r3, r5, #20
 80150d8:	d138      	bne.n	801514c <__gethex+0x40a>
 80150da:	f8d8 2000 	ldr.w	r2, [r8]
 80150de:	3a01      	subs	r2, #1
 80150e0:	42b2      	cmp	r2, r6
 80150e2:	d10a      	bne.n	80150fa <__gethex+0x3b8>
 80150e4:	1171      	asrs	r1, r6, #5
 80150e6:	2201      	movs	r2, #1
 80150e8:	f006 061f 	and.w	r6, r6, #31
 80150ec:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80150f0:	fa02 f606 	lsl.w	r6, r2, r6
 80150f4:	421e      	tst	r6, r3
 80150f6:	bf18      	it	ne
 80150f8:	4617      	movne	r7, r2
 80150fa:	f047 0720 	orr.w	r7, r7, #32
 80150fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8015100:	601d      	str	r5, [r3, #0]
 8015102:	9b06      	ldr	r3, [sp, #24]
 8015104:	601c      	str	r4, [r3, #0]
 8015106:	e6a4      	b.n	8014e52 <__gethex+0x110>
 8015108:	4299      	cmp	r1, r3
 801510a:	f843 cc04 	str.w	ip, [r3, #-4]
 801510e:	d8d8      	bhi.n	80150c2 <__gethex+0x380>
 8015110:	68ab      	ldr	r3, [r5, #8]
 8015112:	4599      	cmp	r9, r3
 8015114:	db12      	blt.n	801513c <__gethex+0x3fa>
 8015116:	6869      	ldr	r1, [r5, #4]
 8015118:	9802      	ldr	r0, [sp, #8]
 801511a:	3101      	adds	r1, #1
 801511c:	f000 f9a5 	bl	801546a <_Balloc>
 8015120:	692a      	ldr	r2, [r5, #16]
 8015122:	3202      	adds	r2, #2
 8015124:	f105 010c 	add.w	r1, r5, #12
 8015128:	4683      	mov	fp, r0
 801512a:	0092      	lsls	r2, r2, #2
 801512c:	300c      	adds	r0, #12
 801512e:	f000 f991 	bl	8015454 <memcpy>
 8015132:	4629      	mov	r1, r5
 8015134:	9802      	ldr	r0, [sp, #8]
 8015136:	f000 f9cc 	bl	80154d2 <_Bfree>
 801513a:	465d      	mov	r5, fp
 801513c:	692b      	ldr	r3, [r5, #16]
 801513e:	1c5a      	adds	r2, r3, #1
 8015140:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8015144:	612a      	str	r2, [r5, #16]
 8015146:	2201      	movs	r2, #1
 8015148:	615a      	str	r2, [r3, #20]
 801514a:	e7c2      	b.n	80150d2 <__gethex+0x390>
 801514c:	692a      	ldr	r2, [r5, #16]
 801514e:	454a      	cmp	r2, r9
 8015150:	dd0b      	ble.n	801516a <__gethex+0x428>
 8015152:	2101      	movs	r1, #1
 8015154:	4628      	mov	r0, r5
 8015156:	f7ff fda5 	bl	8014ca4 <rshift>
 801515a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801515e:	3401      	adds	r4, #1
 8015160:	42a3      	cmp	r3, r4
 8015162:	f6ff aed9 	blt.w	8014f18 <__gethex+0x1d6>
 8015166:	2701      	movs	r7, #1
 8015168:	e7c7      	b.n	80150fa <__gethex+0x3b8>
 801516a:	f016 061f 	ands.w	r6, r6, #31
 801516e:	d0fa      	beq.n	8015166 <__gethex+0x424>
 8015170:	449a      	add	sl, r3
 8015172:	f1c6 0620 	rsb	r6, r6, #32
 8015176:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801517a:	f000 fa3a 	bl	80155f2 <__hi0bits>
 801517e:	42b0      	cmp	r0, r6
 8015180:	dbe7      	blt.n	8015152 <__gethex+0x410>
 8015182:	e7f0      	b.n	8015166 <__gethex+0x424>

08015184 <L_shift>:
 8015184:	f1c2 0208 	rsb	r2, r2, #8
 8015188:	0092      	lsls	r2, r2, #2
 801518a:	b570      	push	{r4, r5, r6, lr}
 801518c:	f1c2 0620 	rsb	r6, r2, #32
 8015190:	6843      	ldr	r3, [r0, #4]
 8015192:	6804      	ldr	r4, [r0, #0]
 8015194:	fa03 f506 	lsl.w	r5, r3, r6
 8015198:	432c      	orrs	r4, r5
 801519a:	40d3      	lsrs	r3, r2
 801519c:	6004      	str	r4, [r0, #0]
 801519e:	f840 3f04 	str.w	r3, [r0, #4]!
 80151a2:	4288      	cmp	r0, r1
 80151a4:	d3f4      	bcc.n	8015190 <L_shift+0xc>
 80151a6:	bd70      	pop	{r4, r5, r6, pc}

080151a8 <__match>:
 80151a8:	b530      	push	{r4, r5, lr}
 80151aa:	6803      	ldr	r3, [r0, #0]
 80151ac:	3301      	adds	r3, #1
 80151ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80151b2:	b914      	cbnz	r4, 80151ba <__match+0x12>
 80151b4:	6003      	str	r3, [r0, #0]
 80151b6:	2001      	movs	r0, #1
 80151b8:	bd30      	pop	{r4, r5, pc}
 80151ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80151be:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80151c2:	2d19      	cmp	r5, #25
 80151c4:	bf98      	it	ls
 80151c6:	3220      	addls	r2, #32
 80151c8:	42a2      	cmp	r2, r4
 80151ca:	d0f0      	beq.n	80151ae <__match+0x6>
 80151cc:	2000      	movs	r0, #0
 80151ce:	e7f3      	b.n	80151b8 <__match+0x10>

080151d0 <__hexnan>:
 80151d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80151d4:	680b      	ldr	r3, [r1, #0]
 80151d6:	6801      	ldr	r1, [r0, #0]
 80151d8:	115f      	asrs	r7, r3, #5
 80151da:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80151de:	f013 031f 	ands.w	r3, r3, #31
 80151e2:	b087      	sub	sp, #28
 80151e4:	bf18      	it	ne
 80151e6:	3704      	addne	r7, #4
 80151e8:	2500      	movs	r5, #0
 80151ea:	1f3e      	subs	r6, r7, #4
 80151ec:	4682      	mov	sl, r0
 80151ee:	4690      	mov	r8, r2
 80151f0:	9301      	str	r3, [sp, #4]
 80151f2:	f847 5c04 	str.w	r5, [r7, #-4]
 80151f6:	46b1      	mov	r9, r6
 80151f8:	4634      	mov	r4, r6
 80151fa:	9502      	str	r5, [sp, #8]
 80151fc:	46ab      	mov	fp, r5
 80151fe:	784a      	ldrb	r2, [r1, #1]
 8015200:	1c4b      	adds	r3, r1, #1
 8015202:	9303      	str	r3, [sp, #12]
 8015204:	b342      	cbz	r2, 8015258 <__hexnan+0x88>
 8015206:	4610      	mov	r0, r2
 8015208:	9105      	str	r1, [sp, #20]
 801520a:	9204      	str	r2, [sp, #16]
 801520c:	f7ff fd84 	bl	8014d18 <__hexdig_fun>
 8015210:	2800      	cmp	r0, #0
 8015212:	d143      	bne.n	801529c <__hexnan+0xcc>
 8015214:	9a04      	ldr	r2, [sp, #16]
 8015216:	9905      	ldr	r1, [sp, #20]
 8015218:	2a20      	cmp	r2, #32
 801521a:	d818      	bhi.n	801524e <__hexnan+0x7e>
 801521c:	9b02      	ldr	r3, [sp, #8]
 801521e:	459b      	cmp	fp, r3
 8015220:	dd13      	ble.n	801524a <__hexnan+0x7a>
 8015222:	454c      	cmp	r4, r9
 8015224:	d206      	bcs.n	8015234 <__hexnan+0x64>
 8015226:	2d07      	cmp	r5, #7
 8015228:	dc04      	bgt.n	8015234 <__hexnan+0x64>
 801522a:	462a      	mov	r2, r5
 801522c:	4649      	mov	r1, r9
 801522e:	4620      	mov	r0, r4
 8015230:	f7ff ffa8 	bl	8015184 <L_shift>
 8015234:	4544      	cmp	r4, r8
 8015236:	d944      	bls.n	80152c2 <__hexnan+0xf2>
 8015238:	2300      	movs	r3, #0
 801523a:	f1a4 0904 	sub.w	r9, r4, #4
 801523e:	f844 3c04 	str.w	r3, [r4, #-4]
 8015242:	f8cd b008 	str.w	fp, [sp, #8]
 8015246:	464c      	mov	r4, r9
 8015248:	461d      	mov	r5, r3
 801524a:	9903      	ldr	r1, [sp, #12]
 801524c:	e7d7      	b.n	80151fe <__hexnan+0x2e>
 801524e:	2a29      	cmp	r2, #41	; 0x29
 8015250:	d14a      	bne.n	80152e8 <__hexnan+0x118>
 8015252:	3102      	adds	r1, #2
 8015254:	f8ca 1000 	str.w	r1, [sl]
 8015258:	f1bb 0f00 	cmp.w	fp, #0
 801525c:	d044      	beq.n	80152e8 <__hexnan+0x118>
 801525e:	454c      	cmp	r4, r9
 8015260:	d206      	bcs.n	8015270 <__hexnan+0xa0>
 8015262:	2d07      	cmp	r5, #7
 8015264:	dc04      	bgt.n	8015270 <__hexnan+0xa0>
 8015266:	462a      	mov	r2, r5
 8015268:	4649      	mov	r1, r9
 801526a:	4620      	mov	r0, r4
 801526c:	f7ff ff8a 	bl	8015184 <L_shift>
 8015270:	4544      	cmp	r4, r8
 8015272:	d928      	bls.n	80152c6 <__hexnan+0xf6>
 8015274:	4643      	mov	r3, r8
 8015276:	f854 2b04 	ldr.w	r2, [r4], #4
 801527a:	f843 2b04 	str.w	r2, [r3], #4
 801527e:	42a6      	cmp	r6, r4
 8015280:	d2f9      	bcs.n	8015276 <__hexnan+0xa6>
 8015282:	2200      	movs	r2, #0
 8015284:	f843 2b04 	str.w	r2, [r3], #4
 8015288:	429e      	cmp	r6, r3
 801528a:	d2fb      	bcs.n	8015284 <__hexnan+0xb4>
 801528c:	6833      	ldr	r3, [r6, #0]
 801528e:	b91b      	cbnz	r3, 8015298 <__hexnan+0xc8>
 8015290:	4546      	cmp	r6, r8
 8015292:	d127      	bne.n	80152e4 <__hexnan+0x114>
 8015294:	2301      	movs	r3, #1
 8015296:	6033      	str	r3, [r6, #0]
 8015298:	2005      	movs	r0, #5
 801529a:	e026      	b.n	80152ea <__hexnan+0x11a>
 801529c:	3501      	adds	r5, #1
 801529e:	2d08      	cmp	r5, #8
 80152a0:	f10b 0b01 	add.w	fp, fp, #1
 80152a4:	dd06      	ble.n	80152b4 <__hexnan+0xe4>
 80152a6:	4544      	cmp	r4, r8
 80152a8:	d9cf      	bls.n	801524a <__hexnan+0x7a>
 80152aa:	2300      	movs	r3, #0
 80152ac:	f844 3c04 	str.w	r3, [r4, #-4]
 80152b0:	2501      	movs	r5, #1
 80152b2:	3c04      	subs	r4, #4
 80152b4:	6822      	ldr	r2, [r4, #0]
 80152b6:	f000 000f 	and.w	r0, r0, #15
 80152ba:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80152be:	6020      	str	r0, [r4, #0]
 80152c0:	e7c3      	b.n	801524a <__hexnan+0x7a>
 80152c2:	2508      	movs	r5, #8
 80152c4:	e7c1      	b.n	801524a <__hexnan+0x7a>
 80152c6:	9b01      	ldr	r3, [sp, #4]
 80152c8:	2b00      	cmp	r3, #0
 80152ca:	d0df      	beq.n	801528c <__hexnan+0xbc>
 80152cc:	f04f 32ff 	mov.w	r2, #4294967295
 80152d0:	f1c3 0320 	rsb	r3, r3, #32
 80152d4:	fa22 f303 	lsr.w	r3, r2, r3
 80152d8:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80152dc:	401a      	ands	r2, r3
 80152de:	f847 2c04 	str.w	r2, [r7, #-4]
 80152e2:	e7d3      	b.n	801528c <__hexnan+0xbc>
 80152e4:	3e04      	subs	r6, #4
 80152e6:	e7d1      	b.n	801528c <__hexnan+0xbc>
 80152e8:	2004      	movs	r0, #4
 80152ea:	b007      	add	sp, #28
 80152ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080152f0 <__locale_ctype_ptr_l>:
 80152f0:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80152f4:	4770      	bx	lr
	...

080152f8 <__locale_ctype_ptr>:
 80152f8:	4b04      	ldr	r3, [pc, #16]	; (801530c <__locale_ctype_ptr+0x14>)
 80152fa:	4a05      	ldr	r2, [pc, #20]	; (8015310 <__locale_ctype_ptr+0x18>)
 80152fc:	681b      	ldr	r3, [r3, #0]
 80152fe:	6a1b      	ldr	r3, [r3, #32]
 8015300:	2b00      	cmp	r3, #0
 8015302:	bf08      	it	eq
 8015304:	4613      	moveq	r3, r2
 8015306:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 801530a:	4770      	bx	lr
 801530c:	2000000c 	.word	0x2000000c
 8015310:	20000070 	.word	0x20000070

08015314 <__localeconv_l>:
 8015314:	30f0      	adds	r0, #240	; 0xf0
 8015316:	4770      	bx	lr

08015318 <_localeconv_r>:
 8015318:	4b04      	ldr	r3, [pc, #16]	; (801532c <_localeconv_r+0x14>)
 801531a:	681b      	ldr	r3, [r3, #0]
 801531c:	6a18      	ldr	r0, [r3, #32]
 801531e:	4b04      	ldr	r3, [pc, #16]	; (8015330 <_localeconv_r+0x18>)
 8015320:	2800      	cmp	r0, #0
 8015322:	bf08      	it	eq
 8015324:	4618      	moveq	r0, r3
 8015326:	30f0      	adds	r0, #240	; 0xf0
 8015328:	4770      	bx	lr
 801532a:	bf00      	nop
 801532c:	2000000c 	.word	0x2000000c
 8015330:	20000070 	.word	0x20000070

08015334 <_lseek_r>:
 8015334:	b538      	push	{r3, r4, r5, lr}
 8015336:	4c07      	ldr	r4, [pc, #28]	; (8015354 <_lseek_r+0x20>)
 8015338:	4605      	mov	r5, r0
 801533a:	4608      	mov	r0, r1
 801533c:	4611      	mov	r1, r2
 801533e:	2200      	movs	r2, #0
 8015340:	6022      	str	r2, [r4, #0]
 8015342:	461a      	mov	r2, r3
 8015344:	f7ef fe42 	bl	8004fcc <_lseek>
 8015348:	1c43      	adds	r3, r0, #1
 801534a:	d102      	bne.n	8015352 <_lseek_r+0x1e>
 801534c:	6823      	ldr	r3, [r4, #0]
 801534e:	b103      	cbz	r3, 8015352 <_lseek_r+0x1e>
 8015350:	602b      	str	r3, [r5, #0]
 8015352:	bd38      	pop	{r3, r4, r5, pc}
 8015354:	2000c6ac 	.word	0x2000c6ac

08015358 <__swhatbuf_r>:
 8015358:	b570      	push	{r4, r5, r6, lr}
 801535a:	460e      	mov	r6, r1
 801535c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015360:	2900      	cmp	r1, #0
 8015362:	b096      	sub	sp, #88	; 0x58
 8015364:	4614      	mov	r4, r2
 8015366:	461d      	mov	r5, r3
 8015368:	da07      	bge.n	801537a <__swhatbuf_r+0x22>
 801536a:	2300      	movs	r3, #0
 801536c:	602b      	str	r3, [r5, #0]
 801536e:	89b3      	ldrh	r3, [r6, #12]
 8015370:	061a      	lsls	r2, r3, #24
 8015372:	d410      	bmi.n	8015396 <__swhatbuf_r+0x3e>
 8015374:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015378:	e00e      	b.n	8015398 <__swhatbuf_r+0x40>
 801537a:	466a      	mov	r2, sp
 801537c:	f001 fc2e 	bl	8016bdc <_fstat_r>
 8015380:	2800      	cmp	r0, #0
 8015382:	dbf2      	blt.n	801536a <__swhatbuf_r+0x12>
 8015384:	9a01      	ldr	r2, [sp, #4]
 8015386:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801538a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801538e:	425a      	negs	r2, r3
 8015390:	415a      	adcs	r2, r3
 8015392:	602a      	str	r2, [r5, #0]
 8015394:	e7ee      	b.n	8015374 <__swhatbuf_r+0x1c>
 8015396:	2340      	movs	r3, #64	; 0x40
 8015398:	2000      	movs	r0, #0
 801539a:	6023      	str	r3, [r4, #0]
 801539c:	b016      	add	sp, #88	; 0x58
 801539e:	bd70      	pop	{r4, r5, r6, pc}

080153a0 <__smakebuf_r>:
 80153a0:	898b      	ldrh	r3, [r1, #12]
 80153a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80153a4:	079d      	lsls	r5, r3, #30
 80153a6:	4606      	mov	r6, r0
 80153a8:	460c      	mov	r4, r1
 80153aa:	d507      	bpl.n	80153bc <__smakebuf_r+0x1c>
 80153ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80153b0:	6023      	str	r3, [r4, #0]
 80153b2:	6123      	str	r3, [r4, #16]
 80153b4:	2301      	movs	r3, #1
 80153b6:	6163      	str	r3, [r4, #20]
 80153b8:	b002      	add	sp, #8
 80153ba:	bd70      	pop	{r4, r5, r6, pc}
 80153bc:	ab01      	add	r3, sp, #4
 80153be:	466a      	mov	r2, sp
 80153c0:	f7ff ffca 	bl	8015358 <__swhatbuf_r>
 80153c4:	9900      	ldr	r1, [sp, #0]
 80153c6:	4605      	mov	r5, r0
 80153c8:	4630      	mov	r0, r6
 80153ca:	f000 fca9 	bl	8015d20 <_malloc_r>
 80153ce:	b948      	cbnz	r0, 80153e4 <__smakebuf_r+0x44>
 80153d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80153d4:	059a      	lsls	r2, r3, #22
 80153d6:	d4ef      	bmi.n	80153b8 <__smakebuf_r+0x18>
 80153d8:	f023 0303 	bic.w	r3, r3, #3
 80153dc:	f043 0302 	orr.w	r3, r3, #2
 80153e0:	81a3      	strh	r3, [r4, #12]
 80153e2:	e7e3      	b.n	80153ac <__smakebuf_r+0xc>
 80153e4:	4b0d      	ldr	r3, [pc, #52]	; (801541c <__smakebuf_r+0x7c>)
 80153e6:	62b3      	str	r3, [r6, #40]	; 0x28
 80153e8:	89a3      	ldrh	r3, [r4, #12]
 80153ea:	6020      	str	r0, [r4, #0]
 80153ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80153f0:	81a3      	strh	r3, [r4, #12]
 80153f2:	9b00      	ldr	r3, [sp, #0]
 80153f4:	6163      	str	r3, [r4, #20]
 80153f6:	9b01      	ldr	r3, [sp, #4]
 80153f8:	6120      	str	r0, [r4, #16]
 80153fa:	b15b      	cbz	r3, 8015414 <__smakebuf_r+0x74>
 80153fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015400:	4630      	mov	r0, r6
 8015402:	f001 fbfd 	bl	8016c00 <_isatty_r>
 8015406:	b128      	cbz	r0, 8015414 <__smakebuf_r+0x74>
 8015408:	89a3      	ldrh	r3, [r4, #12]
 801540a:	f023 0303 	bic.w	r3, r3, #3
 801540e:	f043 0301 	orr.w	r3, r3, #1
 8015412:	81a3      	strh	r3, [r4, #12]
 8015414:	89a3      	ldrh	r3, [r4, #12]
 8015416:	431d      	orrs	r5, r3
 8015418:	81a5      	strh	r5, [r4, #12]
 801541a:	e7cd      	b.n	80153b8 <__smakebuf_r+0x18>
 801541c:	08014b59 	.word	0x08014b59

08015420 <malloc>:
 8015420:	4b02      	ldr	r3, [pc, #8]	; (801542c <malloc+0xc>)
 8015422:	4601      	mov	r1, r0
 8015424:	6818      	ldr	r0, [r3, #0]
 8015426:	f000 bc7b 	b.w	8015d20 <_malloc_r>
 801542a:	bf00      	nop
 801542c:	2000000c 	.word	0x2000000c

08015430 <__ascii_mbtowc>:
 8015430:	b082      	sub	sp, #8
 8015432:	b901      	cbnz	r1, 8015436 <__ascii_mbtowc+0x6>
 8015434:	a901      	add	r1, sp, #4
 8015436:	b142      	cbz	r2, 801544a <__ascii_mbtowc+0x1a>
 8015438:	b14b      	cbz	r3, 801544e <__ascii_mbtowc+0x1e>
 801543a:	7813      	ldrb	r3, [r2, #0]
 801543c:	600b      	str	r3, [r1, #0]
 801543e:	7812      	ldrb	r2, [r2, #0]
 8015440:	1c10      	adds	r0, r2, #0
 8015442:	bf18      	it	ne
 8015444:	2001      	movne	r0, #1
 8015446:	b002      	add	sp, #8
 8015448:	4770      	bx	lr
 801544a:	4610      	mov	r0, r2
 801544c:	e7fb      	b.n	8015446 <__ascii_mbtowc+0x16>
 801544e:	f06f 0001 	mvn.w	r0, #1
 8015452:	e7f8      	b.n	8015446 <__ascii_mbtowc+0x16>

08015454 <memcpy>:
 8015454:	b510      	push	{r4, lr}
 8015456:	1e43      	subs	r3, r0, #1
 8015458:	440a      	add	r2, r1
 801545a:	4291      	cmp	r1, r2
 801545c:	d100      	bne.n	8015460 <memcpy+0xc>
 801545e:	bd10      	pop	{r4, pc}
 8015460:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015464:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015468:	e7f7      	b.n	801545a <memcpy+0x6>

0801546a <_Balloc>:
 801546a:	b570      	push	{r4, r5, r6, lr}
 801546c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801546e:	4604      	mov	r4, r0
 8015470:	460e      	mov	r6, r1
 8015472:	b93d      	cbnz	r5, 8015484 <_Balloc+0x1a>
 8015474:	2010      	movs	r0, #16
 8015476:	f7ff ffd3 	bl	8015420 <malloc>
 801547a:	6260      	str	r0, [r4, #36]	; 0x24
 801547c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8015480:	6005      	str	r5, [r0, #0]
 8015482:	60c5      	str	r5, [r0, #12]
 8015484:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8015486:	68eb      	ldr	r3, [r5, #12]
 8015488:	b183      	cbz	r3, 80154ac <_Balloc+0x42>
 801548a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801548c:	68db      	ldr	r3, [r3, #12]
 801548e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8015492:	b9b8      	cbnz	r0, 80154c4 <_Balloc+0x5a>
 8015494:	2101      	movs	r1, #1
 8015496:	fa01 f506 	lsl.w	r5, r1, r6
 801549a:	1d6a      	adds	r2, r5, #5
 801549c:	0092      	lsls	r2, r2, #2
 801549e:	4620      	mov	r0, r4
 80154a0:	f000 fbe1 	bl	8015c66 <_calloc_r>
 80154a4:	b160      	cbz	r0, 80154c0 <_Balloc+0x56>
 80154a6:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80154aa:	e00e      	b.n	80154ca <_Balloc+0x60>
 80154ac:	2221      	movs	r2, #33	; 0x21
 80154ae:	2104      	movs	r1, #4
 80154b0:	4620      	mov	r0, r4
 80154b2:	f000 fbd8 	bl	8015c66 <_calloc_r>
 80154b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80154b8:	60e8      	str	r0, [r5, #12]
 80154ba:	68db      	ldr	r3, [r3, #12]
 80154bc:	2b00      	cmp	r3, #0
 80154be:	d1e4      	bne.n	801548a <_Balloc+0x20>
 80154c0:	2000      	movs	r0, #0
 80154c2:	bd70      	pop	{r4, r5, r6, pc}
 80154c4:	6802      	ldr	r2, [r0, #0]
 80154c6:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80154ca:	2300      	movs	r3, #0
 80154cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80154d0:	e7f7      	b.n	80154c2 <_Balloc+0x58>

080154d2 <_Bfree>:
 80154d2:	b570      	push	{r4, r5, r6, lr}
 80154d4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80154d6:	4606      	mov	r6, r0
 80154d8:	460d      	mov	r5, r1
 80154da:	b93c      	cbnz	r4, 80154ec <_Bfree+0x1a>
 80154dc:	2010      	movs	r0, #16
 80154de:	f7ff ff9f 	bl	8015420 <malloc>
 80154e2:	6270      	str	r0, [r6, #36]	; 0x24
 80154e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80154e8:	6004      	str	r4, [r0, #0]
 80154ea:	60c4      	str	r4, [r0, #12]
 80154ec:	b13d      	cbz	r5, 80154fe <_Bfree+0x2c>
 80154ee:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80154f0:	686a      	ldr	r2, [r5, #4]
 80154f2:	68db      	ldr	r3, [r3, #12]
 80154f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80154f8:	6029      	str	r1, [r5, #0]
 80154fa:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80154fe:	bd70      	pop	{r4, r5, r6, pc}

08015500 <__multadd>:
 8015500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015504:	690d      	ldr	r5, [r1, #16]
 8015506:	461f      	mov	r7, r3
 8015508:	4606      	mov	r6, r0
 801550a:	460c      	mov	r4, r1
 801550c:	f101 0c14 	add.w	ip, r1, #20
 8015510:	2300      	movs	r3, #0
 8015512:	f8dc 0000 	ldr.w	r0, [ip]
 8015516:	b281      	uxth	r1, r0
 8015518:	fb02 7101 	mla	r1, r2, r1, r7
 801551c:	0c0f      	lsrs	r7, r1, #16
 801551e:	0c00      	lsrs	r0, r0, #16
 8015520:	fb02 7000 	mla	r0, r2, r0, r7
 8015524:	b289      	uxth	r1, r1
 8015526:	3301      	adds	r3, #1
 8015528:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 801552c:	429d      	cmp	r5, r3
 801552e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8015532:	f84c 1b04 	str.w	r1, [ip], #4
 8015536:	dcec      	bgt.n	8015512 <__multadd+0x12>
 8015538:	b1d7      	cbz	r7, 8015570 <__multadd+0x70>
 801553a:	68a3      	ldr	r3, [r4, #8]
 801553c:	42ab      	cmp	r3, r5
 801553e:	dc12      	bgt.n	8015566 <__multadd+0x66>
 8015540:	6861      	ldr	r1, [r4, #4]
 8015542:	4630      	mov	r0, r6
 8015544:	3101      	adds	r1, #1
 8015546:	f7ff ff90 	bl	801546a <_Balloc>
 801554a:	6922      	ldr	r2, [r4, #16]
 801554c:	3202      	adds	r2, #2
 801554e:	f104 010c 	add.w	r1, r4, #12
 8015552:	4680      	mov	r8, r0
 8015554:	0092      	lsls	r2, r2, #2
 8015556:	300c      	adds	r0, #12
 8015558:	f7ff ff7c 	bl	8015454 <memcpy>
 801555c:	4621      	mov	r1, r4
 801555e:	4630      	mov	r0, r6
 8015560:	f7ff ffb7 	bl	80154d2 <_Bfree>
 8015564:	4644      	mov	r4, r8
 8015566:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801556a:	3501      	adds	r5, #1
 801556c:	615f      	str	r7, [r3, #20]
 801556e:	6125      	str	r5, [r4, #16]
 8015570:	4620      	mov	r0, r4
 8015572:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015576 <__s2b>:
 8015576:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801557a:	460c      	mov	r4, r1
 801557c:	4615      	mov	r5, r2
 801557e:	461f      	mov	r7, r3
 8015580:	2209      	movs	r2, #9
 8015582:	3308      	adds	r3, #8
 8015584:	4606      	mov	r6, r0
 8015586:	fb93 f3f2 	sdiv	r3, r3, r2
 801558a:	2100      	movs	r1, #0
 801558c:	2201      	movs	r2, #1
 801558e:	429a      	cmp	r2, r3
 8015590:	db20      	blt.n	80155d4 <__s2b+0x5e>
 8015592:	4630      	mov	r0, r6
 8015594:	f7ff ff69 	bl	801546a <_Balloc>
 8015598:	9b08      	ldr	r3, [sp, #32]
 801559a:	6143      	str	r3, [r0, #20]
 801559c:	2d09      	cmp	r5, #9
 801559e:	f04f 0301 	mov.w	r3, #1
 80155a2:	6103      	str	r3, [r0, #16]
 80155a4:	dd19      	ble.n	80155da <__s2b+0x64>
 80155a6:	f104 0809 	add.w	r8, r4, #9
 80155aa:	46c1      	mov	r9, r8
 80155ac:	442c      	add	r4, r5
 80155ae:	f819 3b01 	ldrb.w	r3, [r9], #1
 80155b2:	4601      	mov	r1, r0
 80155b4:	3b30      	subs	r3, #48	; 0x30
 80155b6:	220a      	movs	r2, #10
 80155b8:	4630      	mov	r0, r6
 80155ba:	f7ff ffa1 	bl	8015500 <__multadd>
 80155be:	45a1      	cmp	r9, r4
 80155c0:	d1f5      	bne.n	80155ae <__s2b+0x38>
 80155c2:	eb08 0405 	add.w	r4, r8, r5
 80155c6:	3c08      	subs	r4, #8
 80155c8:	1b2d      	subs	r5, r5, r4
 80155ca:	1963      	adds	r3, r4, r5
 80155cc:	42bb      	cmp	r3, r7
 80155ce:	db07      	blt.n	80155e0 <__s2b+0x6a>
 80155d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80155d4:	0052      	lsls	r2, r2, #1
 80155d6:	3101      	adds	r1, #1
 80155d8:	e7d9      	b.n	801558e <__s2b+0x18>
 80155da:	340a      	adds	r4, #10
 80155dc:	2509      	movs	r5, #9
 80155de:	e7f3      	b.n	80155c8 <__s2b+0x52>
 80155e0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80155e4:	4601      	mov	r1, r0
 80155e6:	3b30      	subs	r3, #48	; 0x30
 80155e8:	220a      	movs	r2, #10
 80155ea:	4630      	mov	r0, r6
 80155ec:	f7ff ff88 	bl	8015500 <__multadd>
 80155f0:	e7eb      	b.n	80155ca <__s2b+0x54>

080155f2 <__hi0bits>:
 80155f2:	0c02      	lsrs	r2, r0, #16
 80155f4:	0412      	lsls	r2, r2, #16
 80155f6:	4603      	mov	r3, r0
 80155f8:	b9b2      	cbnz	r2, 8015628 <__hi0bits+0x36>
 80155fa:	0403      	lsls	r3, r0, #16
 80155fc:	2010      	movs	r0, #16
 80155fe:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8015602:	bf04      	itt	eq
 8015604:	021b      	lsleq	r3, r3, #8
 8015606:	3008      	addeq	r0, #8
 8015608:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 801560c:	bf04      	itt	eq
 801560e:	011b      	lsleq	r3, r3, #4
 8015610:	3004      	addeq	r0, #4
 8015612:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8015616:	bf04      	itt	eq
 8015618:	009b      	lsleq	r3, r3, #2
 801561a:	3002      	addeq	r0, #2
 801561c:	2b00      	cmp	r3, #0
 801561e:	db06      	blt.n	801562e <__hi0bits+0x3c>
 8015620:	005b      	lsls	r3, r3, #1
 8015622:	d503      	bpl.n	801562c <__hi0bits+0x3a>
 8015624:	3001      	adds	r0, #1
 8015626:	4770      	bx	lr
 8015628:	2000      	movs	r0, #0
 801562a:	e7e8      	b.n	80155fe <__hi0bits+0xc>
 801562c:	2020      	movs	r0, #32
 801562e:	4770      	bx	lr

08015630 <__lo0bits>:
 8015630:	6803      	ldr	r3, [r0, #0]
 8015632:	f013 0207 	ands.w	r2, r3, #7
 8015636:	4601      	mov	r1, r0
 8015638:	d00b      	beq.n	8015652 <__lo0bits+0x22>
 801563a:	07da      	lsls	r2, r3, #31
 801563c:	d423      	bmi.n	8015686 <__lo0bits+0x56>
 801563e:	0798      	lsls	r0, r3, #30
 8015640:	bf49      	itett	mi
 8015642:	085b      	lsrmi	r3, r3, #1
 8015644:	089b      	lsrpl	r3, r3, #2
 8015646:	2001      	movmi	r0, #1
 8015648:	600b      	strmi	r3, [r1, #0]
 801564a:	bf5c      	itt	pl
 801564c:	600b      	strpl	r3, [r1, #0]
 801564e:	2002      	movpl	r0, #2
 8015650:	4770      	bx	lr
 8015652:	b298      	uxth	r0, r3
 8015654:	b9a8      	cbnz	r0, 8015682 <__lo0bits+0x52>
 8015656:	0c1b      	lsrs	r3, r3, #16
 8015658:	2010      	movs	r0, #16
 801565a:	f013 0fff 	tst.w	r3, #255	; 0xff
 801565e:	bf04      	itt	eq
 8015660:	0a1b      	lsreq	r3, r3, #8
 8015662:	3008      	addeq	r0, #8
 8015664:	071a      	lsls	r2, r3, #28
 8015666:	bf04      	itt	eq
 8015668:	091b      	lsreq	r3, r3, #4
 801566a:	3004      	addeq	r0, #4
 801566c:	079a      	lsls	r2, r3, #30
 801566e:	bf04      	itt	eq
 8015670:	089b      	lsreq	r3, r3, #2
 8015672:	3002      	addeq	r0, #2
 8015674:	07da      	lsls	r2, r3, #31
 8015676:	d402      	bmi.n	801567e <__lo0bits+0x4e>
 8015678:	085b      	lsrs	r3, r3, #1
 801567a:	d006      	beq.n	801568a <__lo0bits+0x5a>
 801567c:	3001      	adds	r0, #1
 801567e:	600b      	str	r3, [r1, #0]
 8015680:	4770      	bx	lr
 8015682:	4610      	mov	r0, r2
 8015684:	e7e9      	b.n	801565a <__lo0bits+0x2a>
 8015686:	2000      	movs	r0, #0
 8015688:	4770      	bx	lr
 801568a:	2020      	movs	r0, #32
 801568c:	4770      	bx	lr

0801568e <__i2b>:
 801568e:	b510      	push	{r4, lr}
 8015690:	460c      	mov	r4, r1
 8015692:	2101      	movs	r1, #1
 8015694:	f7ff fee9 	bl	801546a <_Balloc>
 8015698:	2201      	movs	r2, #1
 801569a:	6144      	str	r4, [r0, #20]
 801569c:	6102      	str	r2, [r0, #16]
 801569e:	bd10      	pop	{r4, pc}

080156a0 <__multiply>:
 80156a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80156a4:	4614      	mov	r4, r2
 80156a6:	690a      	ldr	r2, [r1, #16]
 80156a8:	6923      	ldr	r3, [r4, #16]
 80156aa:	429a      	cmp	r2, r3
 80156ac:	bfb8      	it	lt
 80156ae:	460b      	movlt	r3, r1
 80156b0:	4688      	mov	r8, r1
 80156b2:	bfbc      	itt	lt
 80156b4:	46a0      	movlt	r8, r4
 80156b6:	461c      	movlt	r4, r3
 80156b8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80156bc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80156c0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80156c4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80156c8:	eb07 0609 	add.w	r6, r7, r9
 80156cc:	42b3      	cmp	r3, r6
 80156ce:	bfb8      	it	lt
 80156d0:	3101      	addlt	r1, #1
 80156d2:	f7ff feca 	bl	801546a <_Balloc>
 80156d6:	f100 0514 	add.w	r5, r0, #20
 80156da:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80156de:	462b      	mov	r3, r5
 80156e0:	2200      	movs	r2, #0
 80156e2:	4573      	cmp	r3, lr
 80156e4:	d316      	bcc.n	8015714 <__multiply+0x74>
 80156e6:	f104 0214 	add.w	r2, r4, #20
 80156ea:	f108 0114 	add.w	r1, r8, #20
 80156ee:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80156f2:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80156f6:	9300      	str	r3, [sp, #0]
 80156f8:	9b00      	ldr	r3, [sp, #0]
 80156fa:	9201      	str	r2, [sp, #4]
 80156fc:	4293      	cmp	r3, r2
 80156fe:	d80c      	bhi.n	801571a <__multiply+0x7a>
 8015700:	2e00      	cmp	r6, #0
 8015702:	dd03      	ble.n	801570c <__multiply+0x6c>
 8015704:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8015708:	2b00      	cmp	r3, #0
 801570a:	d05d      	beq.n	80157c8 <__multiply+0x128>
 801570c:	6106      	str	r6, [r0, #16]
 801570e:	b003      	add	sp, #12
 8015710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015714:	f843 2b04 	str.w	r2, [r3], #4
 8015718:	e7e3      	b.n	80156e2 <__multiply+0x42>
 801571a:	f8b2 b000 	ldrh.w	fp, [r2]
 801571e:	f1bb 0f00 	cmp.w	fp, #0
 8015722:	d023      	beq.n	801576c <__multiply+0xcc>
 8015724:	4689      	mov	r9, r1
 8015726:	46ac      	mov	ip, r5
 8015728:	f04f 0800 	mov.w	r8, #0
 801572c:	f859 4b04 	ldr.w	r4, [r9], #4
 8015730:	f8dc a000 	ldr.w	sl, [ip]
 8015734:	b2a3      	uxth	r3, r4
 8015736:	fa1f fa8a 	uxth.w	sl, sl
 801573a:	fb0b a303 	mla	r3, fp, r3, sl
 801573e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8015742:	f8dc 4000 	ldr.w	r4, [ip]
 8015746:	4443      	add	r3, r8
 8015748:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801574c:	fb0b 840a 	mla	r4, fp, sl, r8
 8015750:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8015754:	46e2      	mov	sl, ip
 8015756:	b29b      	uxth	r3, r3
 8015758:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801575c:	454f      	cmp	r7, r9
 801575e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8015762:	f84a 3b04 	str.w	r3, [sl], #4
 8015766:	d82b      	bhi.n	80157c0 <__multiply+0x120>
 8015768:	f8cc 8004 	str.w	r8, [ip, #4]
 801576c:	9b01      	ldr	r3, [sp, #4]
 801576e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8015772:	3204      	adds	r2, #4
 8015774:	f1ba 0f00 	cmp.w	sl, #0
 8015778:	d020      	beq.n	80157bc <__multiply+0x11c>
 801577a:	682b      	ldr	r3, [r5, #0]
 801577c:	4689      	mov	r9, r1
 801577e:	46a8      	mov	r8, r5
 8015780:	f04f 0b00 	mov.w	fp, #0
 8015784:	f8b9 c000 	ldrh.w	ip, [r9]
 8015788:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 801578c:	fb0a 440c 	mla	r4, sl, ip, r4
 8015790:	445c      	add	r4, fp
 8015792:	46c4      	mov	ip, r8
 8015794:	b29b      	uxth	r3, r3
 8015796:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801579a:	f84c 3b04 	str.w	r3, [ip], #4
 801579e:	f859 3b04 	ldr.w	r3, [r9], #4
 80157a2:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80157a6:	0c1b      	lsrs	r3, r3, #16
 80157a8:	fb0a b303 	mla	r3, sl, r3, fp
 80157ac:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80157b0:	454f      	cmp	r7, r9
 80157b2:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80157b6:	d805      	bhi.n	80157c4 <__multiply+0x124>
 80157b8:	f8c8 3004 	str.w	r3, [r8, #4]
 80157bc:	3504      	adds	r5, #4
 80157be:	e79b      	b.n	80156f8 <__multiply+0x58>
 80157c0:	46d4      	mov	ip, sl
 80157c2:	e7b3      	b.n	801572c <__multiply+0x8c>
 80157c4:	46e0      	mov	r8, ip
 80157c6:	e7dd      	b.n	8015784 <__multiply+0xe4>
 80157c8:	3e01      	subs	r6, #1
 80157ca:	e799      	b.n	8015700 <__multiply+0x60>

080157cc <__pow5mult>:
 80157cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80157d0:	4615      	mov	r5, r2
 80157d2:	f012 0203 	ands.w	r2, r2, #3
 80157d6:	4606      	mov	r6, r0
 80157d8:	460f      	mov	r7, r1
 80157da:	d007      	beq.n	80157ec <__pow5mult+0x20>
 80157dc:	3a01      	subs	r2, #1
 80157de:	4c21      	ldr	r4, [pc, #132]	; (8015864 <__pow5mult+0x98>)
 80157e0:	2300      	movs	r3, #0
 80157e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80157e6:	f7ff fe8b 	bl	8015500 <__multadd>
 80157ea:	4607      	mov	r7, r0
 80157ec:	10ad      	asrs	r5, r5, #2
 80157ee:	d035      	beq.n	801585c <__pow5mult+0x90>
 80157f0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80157f2:	b93c      	cbnz	r4, 8015804 <__pow5mult+0x38>
 80157f4:	2010      	movs	r0, #16
 80157f6:	f7ff fe13 	bl	8015420 <malloc>
 80157fa:	6270      	str	r0, [r6, #36]	; 0x24
 80157fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8015800:	6004      	str	r4, [r0, #0]
 8015802:	60c4      	str	r4, [r0, #12]
 8015804:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8015808:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801580c:	b94c      	cbnz	r4, 8015822 <__pow5mult+0x56>
 801580e:	f240 2171 	movw	r1, #625	; 0x271
 8015812:	4630      	mov	r0, r6
 8015814:	f7ff ff3b 	bl	801568e <__i2b>
 8015818:	2300      	movs	r3, #0
 801581a:	f8c8 0008 	str.w	r0, [r8, #8]
 801581e:	4604      	mov	r4, r0
 8015820:	6003      	str	r3, [r0, #0]
 8015822:	f04f 0800 	mov.w	r8, #0
 8015826:	07eb      	lsls	r3, r5, #31
 8015828:	d50a      	bpl.n	8015840 <__pow5mult+0x74>
 801582a:	4639      	mov	r1, r7
 801582c:	4622      	mov	r2, r4
 801582e:	4630      	mov	r0, r6
 8015830:	f7ff ff36 	bl	80156a0 <__multiply>
 8015834:	4639      	mov	r1, r7
 8015836:	4681      	mov	r9, r0
 8015838:	4630      	mov	r0, r6
 801583a:	f7ff fe4a 	bl	80154d2 <_Bfree>
 801583e:	464f      	mov	r7, r9
 8015840:	106d      	asrs	r5, r5, #1
 8015842:	d00b      	beq.n	801585c <__pow5mult+0x90>
 8015844:	6820      	ldr	r0, [r4, #0]
 8015846:	b938      	cbnz	r0, 8015858 <__pow5mult+0x8c>
 8015848:	4622      	mov	r2, r4
 801584a:	4621      	mov	r1, r4
 801584c:	4630      	mov	r0, r6
 801584e:	f7ff ff27 	bl	80156a0 <__multiply>
 8015852:	6020      	str	r0, [r4, #0]
 8015854:	f8c0 8000 	str.w	r8, [r0]
 8015858:	4604      	mov	r4, r0
 801585a:	e7e4      	b.n	8015826 <__pow5mult+0x5a>
 801585c:	4638      	mov	r0, r7
 801585e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015862:	bf00      	nop
 8015864:	080176d8 	.word	0x080176d8

08015868 <__lshift>:
 8015868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801586c:	460c      	mov	r4, r1
 801586e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8015872:	6923      	ldr	r3, [r4, #16]
 8015874:	6849      	ldr	r1, [r1, #4]
 8015876:	eb0a 0903 	add.w	r9, sl, r3
 801587a:	68a3      	ldr	r3, [r4, #8]
 801587c:	4607      	mov	r7, r0
 801587e:	4616      	mov	r6, r2
 8015880:	f109 0501 	add.w	r5, r9, #1
 8015884:	42ab      	cmp	r3, r5
 8015886:	db32      	blt.n	80158ee <__lshift+0x86>
 8015888:	4638      	mov	r0, r7
 801588a:	f7ff fdee 	bl	801546a <_Balloc>
 801588e:	2300      	movs	r3, #0
 8015890:	4680      	mov	r8, r0
 8015892:	f100 0114 	add.w	r1, r0, #20
 8015896:	461a      	mov	r2, r3
 8015898:	4553      	cmp	r3, sl
 801589a:	db2b      	blt.n	80158f4 <__lshift+0x8c>
 801589c:	6920      	ldr	r0, [r4, #16]
 801589e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80158a2:	f104 0314 	add.w	r3, r4, #20
 80158a6:	f016 021f 	ands.w	r2, r6, #31
 80158aa:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80158ae:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80158b2:	d025      	beq.n	8015900 <__lshift+0x98>
 80158b4:	f1c2 0e20 	rsb	lr, r2, #32
 80158b8:	2000      	movs	r0, #0
 80158ba:	681e      	ldr	r6, [r3, #0]
 80158bc:	468a      	mov	sl, r1
 80158be:	4096      	lsls	r6, r2
 80158c0:	4330      	orrs	r0, r6
 80158c2:	f84a 0b04 	str.w	r0, [sl], #4
 80158c6:	f853 0b04 	ldr.w	r0, [r3], #4
 80158ca:	459c      	cmp	ip, r3
 80158cc:	fa20 f00e 	lsr.w	r0, r0, lr
 80158d0:	d814      	bhi.n	80158fc <__lshift+0x94>
 80158d2:	6048      	str	r0, [r1, #4]
 80158d4:	b108      	cbz	r0, 80158da <__lshift+0x72>
 80158d6:	f109 0502 	add.w	r5, r9, #2
 80158da:	3d01      	subs	r5, #1
 80158dc:	4638      	mov	r0, r7
 80158de:	f8c8 5010 	str.w	r5, [r8, #16]
 80158e2:	4621      	mov	r1, r4
 80158e4:	f7ff fdf5 	bl	80154d2 <_Bfree>
 80158e8:	4640      	mov	r0, r8
 80158ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80158ee:	3101      	adds	r1, #1
 80158f0:	005b      	lsls	r3, r3, #1
 80158f2:	e7c7      	b.n	8015884 <__lshift+0x1c>
 80158f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80158f8:	3301      	adds	r3, #1
 80158fa:	e7cd      	b.n	8015898 <__lshift+0x30>
 80158fc:	4651      	mov	r1, sl
 80158fe:	e7dc      	b.n	80158ba <__lshift+0x52>
 8015900:	3904      	subs	r1, #4
 8015902:	f853 2b04 	ldr.w	r2, [r3], #4
 8015906:	f841 2f04 	str.w	r2, [r1, #4]!
 801590a:	459c      	cmp	ip, r3
 801590c:	d8f9      	bhi.n	8015902 <__lshift+0x9a>
 801590e:	e7e4      	b.n	80158da <__lshift+0x72>

08015910 <__mcmp>:
 8015910:	6903      	ldr	r3, [r0, #16]
 8015912:	690a      	ldr	r2, [r1, #16]
 8015914:	1a9b      	subs	r3, r3, r2
 8015916:	b530      	push	{r4, r5, lr}
 8015918:	d10c      	bne.n	8015934 <__mcmp+0x24>
 801591a:	0092      	lsls	r2, r2, #2
 801591c:	3014      	adds	r0, #20
 801591e:	3114      	adds	r1, #20
 8015920:	1884      	adds	r4, r0, r2
 8015922:	4411      	add	r1, r2
 8015924:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8015928:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801592c:	4295      	cmp	r5, r2
 801592e:	d003      	beq.n	8015938 <__mcmp+0x28>
 8015930:	d305      	bcc.n	801593e <__mcmp+0x2e>
 8015932:	2301      	movs	r3, #1
 8015934:	4618      	mov	r0, r3
 8015936:	bd30      	pop	{r4, r5, pc}
 8015938:	42a0      	cmp	r0, r4
 801593a:	d3f3      	bcc.n	8015924 <__mcmp+0x14>
 801593c:	e7fa      	b.n	8015934 <__mcmp+0x24>
 801593e:	f04f 33ff 	mov.w	r3, #4294967295
 8015942:	e7f7      	b.n	8015934 <__mcmp+0x24>

08015944 <__mdiff>:
 8015944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015948:	460d      	mov	r5, r1
 801594a:	4607      	mov	r7, r0
 801594c:	4611      	mov	r1, r2
 801594e:	4628      	mov	r0, r5
 8015950:	4614      	mov	r4, r2
 8015952:	f7ff ffdd 	bl	8015910 <__mcmp>
 8015956:	1e06      	subs	r6, r0, #0
 8015958:	d108      	bne.n	801596c <__mdiff+0x28>
 801595a:	4631      	mov	r1, r6
 801595c:	4638      	mov	r0, r7
 801595e:	f7ff fd84 	bl	801546a <_Balloc>
 8015962:	2301      	movs	r3, #1
 8015964:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8015968:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801596c:	bfa4      	itt	ge
 801596e:	4623      	movge	r3, r4
 8015970:	462c      	movge	r4, r5
 8015972:	4638      	mov	r0, r7
 8015974:	6861      	ldr	r1, [r4, #4]
 8015976:	bfa6      	itte	ge
 8015978:	461d      	movge	r5, r3
 801597a:	2600      	movge	r6, #0
 801597c:	2601      	movlt	r6, #1
 801597e:	f7ff fd74 	bl	801546a <_Balloc>
 8015982:	692b      	ldr	r3, [r5, #16]
 8015984:	60c6      	str	r6, [r0, #12]
 8015986:	6926      	ldr	r6, [r4, #16]
 8015988:	f105 0914 	add.w	r9, r5, #20
 801598c:	f104 0214 	add.w	r2, r4, #20
 8015990:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8015994:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8015998:	f100 0514 	add.w	r5, r0, #20
 801599c:	f04f 0e00 	mov.w	lr, #0
 80159a0:	f852 ab04 	ldr.w	sl, [r2], #4
 80159a4:	f859 4b04 	ldr.w	r4, [r9], #4
 80159a8:	fa1e f18a 	uxtah	r1, lr, sl
 80159ac:	b2a3      	uxth	r3, r4
 80159ae:	1ac9      	subs	r1, r1, r3
 80159b0:	0c23      	lsrs	r3, r4, #16
 80159b2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80159b6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80159ba:	b289      	uxth	r1, r1
 80159bc:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80159c0:	45c8      	cmp	r8, r9
 80159c2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80159c6:	4694      	mov	ip, r2
 80159c8:	f845 3b04 	str.w	r3, [r5], #4
 80159cc:	d8e8      	bhi.n	80159a0 <__mdiff+0x5c>
 80159ce:	45bc      	cmp	ip, r7
 80159d0:	d304      	bcc.n	80159dc <__mdiff+0x98>
 80159d2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80159d6:	b183      	cbz	r3, 80159fa <__mdiff+0xb6>
 80159d8:	6106      	str	r6, [r0, #16]
 80159da:	e7c5      	b.n	8015968 <__mdiff+0x24>
 80159dc:	f85c 1b04 	ldr.w	r1, [ip], #4
 80159e0:	fa1e f381 	uxtah	r3, lr, r1
 80159e4:	141a      	asrs	r2, r3, #16
 80159e6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80159ea:	b29b      	uxth	r3, r3
 80159ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80159f0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80159f4:	f845 3b04 	str.w	r3, [r5], #4
 80159f8:	e7e9      	b.n	80159ce <__mdiff+0x8a>
 80159fa:	3e01      	subs	r6, #1
 80159fc:	e7e9      	b.n	80159d2 <__mdiff+0x8e>
	...

08015a00 <__ulp>:
 8015a00:	4b12      	ldr	r3, [pc, #72]	; (8015a4c <__ulp+0x4c>)
 8015a02:	ee10 2a90 	vmov	r2, s1
 8015a06:	401a      	ands	r2, r3
 8015a08:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8015a0c:	2b00      	cmp	r3, #0
 8015a0e:	dd04      	ble.n	8015a1a <__ulp+0x1a>
 8015a10:	2000      	movs	r0, #0
 8015a12:	4619      	mov	r1, r3
 8015a14:	ec41 0b10 	vmov	d0, r0, r1
 8015a18:	4770      	bx	lr
 8015a1a:	425b      	negs	r3, r3
 8015a1c:	151b      	asrs	r3, r3, #20
 8015a1e:	2b13      	cmp	r3, #19
 8015a20:	f04f 0000 	mov.w	r0, #0
 8015a24:	f04f 0100 	mov.w	r1, #0
 8015a28:	dc04      	bgt.n	8015a34 <__ulp+0x34>
 8015a2a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8015a2e:	fa42 f103 	asr.w	r1, r2, r3
 8015a32:	e7ef      	b.n	8015a14 <__ulp+0x14>
 8015a34:	3b14      	subs	r3, #20
 8015a36:	2b1e      	cmp	r3, #30
 8015a38:	f04f 0201 	mov.w	r2, #1
 8015a3c:	bfda      	itte	le
 8015a3e:	f1c3 031f 	rsble	r3, r3, #31
 8015a42:	fa02 f303 	lslle.w	r3, r2, r3
 8015a46:	4613      	movgt	r3, r2
 8015a48:	4618      	mov	r0, r3
 8015a4a:	e7e3      	b.n	8015a14 <__ulp+0x14>
 8015a4c:	7ff00000 	.word	0x7ff00000

08015a50 <__b2d>:
 8015a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015a52:	6905      	ldr	r5, [r0, #16]
 8015a54:	f100 0714 	add.w	r7, r0, #20
 8015a58:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8015a5c:	1f2e      	subs	r6, r5, #4
 8015a5e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8015a62:	4620      	mov	r0, r4
 8015a64:	f7ff fdc5 	bl	80155f2 <__hi0bits>
 8015a68:	f1c0 0320 	rsb	r3, r0, #32
 8015a6c:	280a      	cmp	r0, #10
 8015a6e:	600b      	str	r3, [r1, #0]
 8015a70:	f8df c074 	ldr.w	ip, [pc, #116]	; 8015ae8 <__b2d+0x98>
 8015a74:	dc14      	bgt.n	8015aa0 <__b2d+0x50>
 8015a76:	f1c0 0e0b 	rsb	lr, r0, #11
 8015a7a:	fa24 f10e 	lsr.w	r1, r4, lr
 8015a7e:	42b7      	cmp	r7, r6
 8015a80:	ea41 030c 	orr.w	r3, r1, ip
 8015a84:	bf34      	ite	cc
 8015a86:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8015a8a:	2100      	movcs	r1, #0
 8015a8c:	3015      	adds	r0, #21
 8015a8e:	fa04 f000 	lsl.w	r0, r4, r0
 8015a92:	fa21 f10e 	lsr.w	r1, r1, lr
 8015a96:	ea40 0201 	orr.w	r2, r0, r1
 8015a9a:	ec43 2b10 	vmov	d0, r2, r3
 8015a9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015aa0:	42b7      	cmp	r7, r6
 8015aa2:	bf3a      	itte	cc
 8015aa4:	f1a5 0608 	subcc.w	r6, r5, #8
 8015aa8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8015aac:	2100      	movcs	r1, #0
 8015aae:	380b      	subs	r0, #11
 8015ab0:	d015      	beq.n	8015ade <__b2d+0x8e>
 8015ab2:	4084      	lsls	r4, r0
 8015ab4:	f1c0 0520 	rsb	r5, r0, #32
 8015ab8:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8015abc:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8015ac0:	42be      	cmp	r6, r7
 8015ac2:	fa21 fc05 	lsr.w	ip, r1, r5
 8015ac6:	ea44 030c 	orr.w	r3, r4, ip
 8015aca:	bf8c      	ite	hi
 8015acc:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8015ad0:	2400      	movls	r4, #0
 8015ad2:	fa01 f000 	lsl.w	r0, r1, r0
 8015ad6:	40ec      	lsrs	r4, r5
 8015ad8:	ea40 0204 	orr.w	r2, r0, r4
 8015adc:	e7dd      	b.n	8015a9a <__b2d+0x4a>
 8015ade:	ea44 030c 	orr.w	r3, r4, ip
 8015ae2:	460a      	mov	r2, r1
 8015ae4:	e7d9      	b.n	8015a9a <__b2d+0x4a>
 8015ae6:	bf00      	nop
 8015ae8:	3ff00000 	.word	0x3ff00000

08015aec <__d2b>:
 8015aec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8015af0:	460e      	mov	r6, r1
 8015af2:	2101      	movs	r1, #1
 8015af4:	ec59 8b10 	vmov	r8, r9, d0
 8015af8:	4615      	mov	r5, r2
 8015afa:	f7ff fcb6 	bl	801546a <_Balloc>
 8015afe:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8015b02:	4607      	mov	r7, r0
 8015b04:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8015b08:	bb34      	cbnz	r4, 8015b58 <__d2b+0x6c>
 8015b0a:	9301      	str	r3, [sp, #4]
 8015b0c:	f1b8 0300 	subs.w	r3, r8, #0
 8015b10:	d027      	beq.n	8015b62 <__d2b+0x76>
 8015b12:	a802      	add	r0, sp, #8
 8015b14:	f840 3d08 	str.w	r3, [r0, #-8]!
 8015b18:	f7ff fd8a 	bl	8015630 <__lo0bits>
 8015b1c:	9900      	ldr	r1, [sp, #0]
 8015b1e:	b1f0      	cbz	r0, 8015b5e <__d2b+0x72>
 8015b20:	9a01      	ldr	r2, [sp, #4]
 8015b22:	f1c0 0320 	rsb	r3, r0, #32
 8015b26:	fa02 f303 	lsl.w	r3, r2, r3
 8015b2a:	430b      	orrs	r3, r1
 8015b2c:	40c2      	lsrs	r2, r0
 8015b2e:	617b      	str	r3, [r7, #20]
 8015b30:	9201      	str	r2, [sp, #4]
 8015b32:	9b01      	ldr	r3, [sp, #4]
 8015b34:	61bb      	str	r3, [r7, #24]
 8015b36:	2b00      	cmp	r3, #0
 8015b38:	bf14      	ite	ne
 8015b3a:	2102      	movne	r1, #2
 8015b3c:	2101      	moveq	r1, #1
 8015b3e:	6139      	str	r1, [r7, #16]
 8015b40:	b1c4      	cbz	r4, 8015b74 <__d2b+0x88>
 8015b42:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8015b46:	4404      	add	r4, r0
 8015b48:	6034      	str	r4, [r6, #0]
 8015b4a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8015b4e:	6028      	str	r0, [r5, #0]
 8015b50:	4638      	mov	r0, r7
 8015b52:	b003      	add	sp, #12
 8015b54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015b58:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8015b5c:	e7d5      	b.n	8015b0a <__d2b+0x1e>
 8015b5e:	6179      	str	r1, [r7, #20]
 8015b60:	e7e7      	b.n	8015b32 <__d2b+0x46>
 8015b62:	a801      	add	r0, sp, #4
 8015b64:	f7ff fd64 	bl	8015630 <__lo0bits>
 8015b68:	9b01      	ldr	r3, [sp, #4]
 8015b6a:	617b      	str	r3, [r7, #20]
 8015b6c:	2101      	movs	r1, #1
 8015b6e:	6139      	str	r1, [r7, #16]
 8015b70:	3020      	adds	r0, #32
 8015b72:	e7e5      	b.n	8015b40 <__d2b+0x54>
 8015b74:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8015b78:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8015b7c:	6030      	str	r0, [r6, #0]
 8015b7e:	6918      	ldr	r0, [r3, #16]
 8015b80:	f7ff fd37 	bl	80155f2 <__hi0bits>
 8015b84:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8015b88:	e7e1      	b.n	8015b4e <__d2b+0x62>

08015b8a <__ratio>:
 8015b8a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b8e:	4688      	mov	r8, r1
 8015b90:	4669      	mov	r1, sp
 8015b92:	4681      	mov	r9, r0
 8015b94:	f7ff ff5c 	bl	8015a50 <__b2d>
 8015b98:	a901      	add	r1, sp, #4
 8015b9a:	4640      	mov	r0, r8
 8015b9c:	ec57 6b10 	vmov	r6, r7, d0
 8015ba0:	f7ff ff56 	bl	8015a50 <__b2d>
 8015ba4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8015ba8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8015bac:	eba3 0c02 	sub.w	ip, r3, r2
 8015bb0:	e9dd 3200 	ldrd	r3, r2, [sp]
 8015bb4:	1a9b      	subs	r3, r3, r2
 8015bb6:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8015bba:	ec5b ab10 	vmov	sl, fp, d0
 8015bbe:	2b00      	cmp	r3, #0
 8015bc0:	bfce      	itee	gt
 8015bc2:	463a      	movgt	r2, r7
 8015bc4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8015bc8:	465a      	movle	r2, fp
 8015bca:	4659      	mov	r1, fp
 8015bcc:	463d      	mov	r5, r7
 8015bce:	bfd4      	ite	le
 8015bd0:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8015bd4:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8015bd8:	4630      	mov	r0, r6
 8015bda:	ee10 2a10 	vmov	r2, s0
 8015bde:	460b      	mov	r3, r1
 8015be0:	4629      	mov	r1, r5
 8015be2:	f7ea fe4b 	bl	800087c <__aeabi_ddiv>
 8015be6:	ec41 0b10 	vmov	d0, r0, r1
 8015bea:	b003      	add	sp, #12
 8015bec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015bf0 <__copybits>:
 8015bf0:	3901      	subs	r1, #1
 8015bf2:	b510      	push	{r4, lr}
 8015bf4:	1149      	asrs	r1, r1, #5
 8015bf6:	6914      	ldr	r4, [r2, #16]
 8015bf8:	3101      	adds	r1, #1
 8015bfa:	f102 0314 	add.w	r3, r2, #20
 8015bfe:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8015c02:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8015c06:	42a3      	cmp	r3, r4
 8015c08:	4602      	mov	r2, r0
 8015c0a:	d303      	bcc.n	8015c14 <__copybits+0x24>
 8015c0c:	2300      	movs	r3, #0
 8015c0e:	428a      	cmp	r2, r1
 8015c10:	d305      	bcc.n	8015c1e <__copybits+0x2e>
 8015c12:	bd10      	pop	{r4, pc}
 8015c14:	f853 2b04 	ldr.w	r2, [r3], #4
 8015c18:	f840 2b04 	str.w	r2, [r0], #4
 8015c1c:	e7f3      	b.n	8015c06 <__copybits+0x16>
 8015c1e:	f842 3b04 	str.w	r3, [r2], #4
 8015c22:	e7f4      	b.n	8015c0e <__copybits+0x1e>

08015c24 <__any_on>:
 8015c24:	f100 0214 	add.w	r2, r0, #20
 8015c28:	6900      	ldr	r0, [r0, #16]
 8015c2a:	114b      	asrs	r3, r1, #5
 8015c2c:	4298      	cmp	r0, r3
 8015c2e:	b510      	push	{r4, lr}
 8015c30:	db11      	blt.n	8015c56 <__any_on+0x32>
 8015c32:	dd0a      	ble.n	8015c4a <__any_on+0x26>
 8015c34:	f011 011f 	ands.w	r1, r1, #31
 8015c38:	d007      	beq.n	8015c4a <__any_on+0x26>
 8015c3a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8015c3e:	fa24 f001 	lsr.w	r0, r4, r1
 8015c42:	fa00 f101 	lsl.w	r1, r0, r1
 8015c46:	428c      	cmp	r4, r1
 8015c48:	d10b      	bne.n	8015c62 <__any_on+0x3e>
 8015c4a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8015c4e:	4293      	cmp	r3, r2
 8015c50:	d803      	bhi.n	8015c5a <__any_on+0x36>
 8015c52:	2000      	movs	r0, #0
 8015c54:	bd10      	pop	{r4, pc}
 8015c56:	4603      	mov	r3, r0
 8015c58:	e7f7      	b.n	8015c4a <__any_on+0x26>
 8015c5a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8015c5e:	2900      	cmp	r1, #0
 8015c60:	d0f5      	beq.n	8015c4e <__any_on+0x2a>
 8015c62:	2001      	movs	r0, #1
 8015c64:	e7f6      	b.n	8015c54 <__any_on+0x30>

08015c66 <_calloc_r>:
 8015c66:	b538      	push	{r3, r4, r5, lr}
 8015c68:	fb02 f401 	mul.w	r4, r2, r1
 8015c6c:	4621      	mov	r1, r4
 8015c6e:	f000 f857 	bl	8015d20 <_malloc_r>
 8015c72:	4605      	mov	r5, r0
 8015c74:	b118      	cbz	r0, 8015c7e <_calloc_r+0x18>
 8015c76:	4622      	mov	r2, r4
 8015c78:	2100      	movs	r1, #0
 8015c7a:	f7fc f8fd 	bl	8011e78 <memset>
 8015c7e:	4628      	mov	r0, r5
 8015c80:	bd38      	pop	{r3, r4, r5, pc}
	...

08015c84 <_free_r>:
 8015c84:	b538      	push	{r3, r4, r5, lr}
 8015c86:	4605      	mov	r5, r0
 8015c88:	2900      	cmp	r1, #0
 8015c8a:	d045      	beq.n	8015d18 <_free_r+0x94>
 8015c8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015c90:	1f0c      	subs	r4, r1, #4
 8015c92:	2b00      	cmp	r3, #0
 8015c94:	bfb8      	it	lt
 8015c96:	18e4      	addlt	r4, r4, r3
 8015c98:	f000 ffdb 	bl	8016c52 <__malloc_lock>
 8015c9c:	4a1f      	ldr	r2, [pc, #124]	; (8015d1c <_free_r+0x98>)
 8015c9e:	6813      	ldr	r3, [r2, #0]
 8015ca0:	4610      	mov	r0, r2
 8015ca2:	b933      	cbnz	r3, 8015cb2 <_free_r+0x2e>
 8015ca4:	6063      	str	r3, [r4, #4]
 8015ca6:	6014      	str	r4, [r2, #0]
 8015ca8:	4628      	mov	r0, r5
 8015caa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015cae:	f000 bfd1 	b.w	8016c54 <__malloc_unlock>
 8015cb2:	42a3      	cmp	r3, r4
 8015cb4:	d90c      	bls.n	8015cd0 <_free_r+0x4c>
 8015cb6:	6821      	ldr	r1, [r4, #0]
 8015cb8:	1862      	adds	r2, r4, r1
 8015cba:	4293      	cmp	r3, r2
 8015cbc:	bf04      	itt	eq
 8015cbe:	681a      	ldreq	r2, [r3, #0]
 8015cc0:	685b      	ldreq	r3, [r3, #4]
 8015cc2:	6063      	str	r3, [r4, #4]
 8015cc4:	bf04      	itt	eq
 8015cc6:	1852      	addeq	r2, r2, r1
 8015cc8:	6022      	streq	r2, [r4, #0]
 8015cca:	6004      	str	r4, [r0, #0]
 8015ccc:	e7ec      	b.n	8015ca8 <_free_r+0x24>
 8015cce:	4613      	mov	r3, r2
 8015cd0:	685a      	ldr	r2, [r3, #4]
 8015cd2:	b10a      	cbz	r2, 8015cd8 <_free_r+0x54>
 8015cd4:	42a2      	cmp	r2, r4
 8015cd6:	d9fa      	bls.n	8015cce <_free_r+0x4a>
 8015cd8:	6819      	ldr	r1, [r3, #0]
 8015cda:	1858      	adds	r0, r3, r1
 8015cdc:	42a0      	cmp	r0, r4
 8015cde:	d10b      	bne.n	8015cf8 <_free_r+0x74>
 8015ce0:	6820      	ldr	r0, [r4, #0]
 8015ce2:	4401      	add	r1, r0
 8015ce4:	1858      	adds	r0, r3, r1
 8015ce6:	4282      	cmp	r2, r0
 8015ce8:	6019      	str	r1, [r3, #0]
 8015cea:	d1dd      	bne.n	8015ca8 <_free_r+0x24>
 8015cec:	6810      	ldr	r0, [r2, #0]
 8015cee:	6852      	ldr	r2, [r2, #4]
 8015cf0:	605a      	str	r2, [r3, #4]
 8015cf2:	4401      	add	r1, r0
 8015cf4:	6019      	str	r1, [r3, #0]
 8015cf6:	e7d7      	b.n	8015ca8 <_free_r+0x24>
 8015cf8:	d902      	bls.n	8015d00 <_free_r+0x7c>
 8015cfa:	230c      	movs	r3, #12
 8015cfc:	602b      	str	r3, [r5, #0]
 8015cfe:	e7d3      	b.n	8015ca8 <_free_r+0x24>
 8015d00:	6820      	ldr	r0, [r4, #0]
 8015d02:	1821      	adds	r1, r4, r0
 8015d04:	428a      	cmp	r2, r1
 8015d06:	bf04      	itt	eq
 8015d08:	6811      	ldreq	r1, [r2, #0]
 8015d0a:	6852      	ldreq	r2, [r2, #4]
 8015d0c:	6062      	str	r2, [r4, #4]
 8015d0e:	bf04      	itt	eq
 8015d10:	1809      	addeq	r1, r1, r0
 8015d12:	6021      	streq	r1, [r4, #0]
 8015d14:	605c      	str	r4, [r3, #4]
 8015d16:	e7c7      	b.n	8015ca8 <_free_r+0x24>
 8015d18:	bd38      	pop	{r3, r4, r5, pc}
 8015d1a:	bf00      	nop
 8015d1c:	20007da0 	.word	0x20007da0

08015d20 <_malloc_r>:
 8015d20:	b570      	push	{r4, r5, r6, lr}
 8015d22:	1ccd      	adds	r5, r1, #3
 8015d24:	f025 0503 	bic.w	r5, r5, #3
 8015d28:	3508      	adds	r5, #8
 8015d2a:	2d0c      	cmp	r5, #12
 8015d2c:	bf38      	it	cc
 8015d2e:	250c      	movcc	r5, #12
 8015d30:	2d00      	cmp	r5, #0
 8015d32:	4606      	mov	r6, r0
 8015d34:	db01      	blt.n	8015d3a <_malloc_r+0x1a>
 8015d36:	42a9      	cmp	r1, r5
 8015d38:	d903      	bls.n	8015d42 <_malloc_r+0x22>
 8015d3a:	230c      	movs	r3, #12
 8015d3c:	6033      	str	r3, [r6, #0]
 8015d3e:	2000      	movs	r0, #0
 8015d40:	bd70      	pop	{r4, r5, r6, pc}
 8015d42:	f000 ff86 	bl	8016c52 <__malloc_lock>
 8015d46:	4a21      	ldr	r2, [pc, #132]	; (8015dcc <_malloc_r+0xac>)
 8015d48:	6814      	ldr	r4, [r2, #0]
 8015d4a:	4621      	mov	r1, r4
 8015d4c:	b991      	cbnz	r1, 8015d74 <_malloc_r+0x54>
 8015d4e:	4c20      	ldr	r4, [pc, #128]	; (8015dd0 <_malloc_r+0xb0>)
 8015d50:	6823      	ldr	r3, [r4, #0]
 8015d52:	b91b      	cbnz	r3, 8015d5c <_malloc_r+0x3c>
 8015d54:	4630      	mov	r0, r6
 8015d56:	f000 fe19 	bl	801698c <_sbrk_r>
 8015d5a:	6020      	str	r0, [r4, #0]
 8015d5c:	4629      	mov	r1, r5
 8015d5e:	4630      	mov	r0, r6
 8015d60:	f000 fe14 	bl	801698c <_sbrk_r>
 8015d64:	1c43      	adds	r3, r0, #1
 8015d66:	d124      	bne.n	8015db2 <_malloc_r+0x92>
 8015d68:	230c      	movs	r3, #12
 8015d6a:	6033      	str	r3, [r6, #0]
 8015d6c:	4630      	mov	r0, r6
 8015d6e:	f000 ff71 	bl	8016c54 <__malloc_unlock>
 8015d72:	e7e4      	b.n	8015d3e <_malloc_r+0x1e>
 8015d74:	680b      	ldr	r3, [r1, #0]
 8015d76:	1b5b      	subs	r3, r3, r5
 8015d78:	d418      	bmi.n	8015dac <_malloc_r+0x8c>
 8015d7a:	2b0b      	cmp	r3, #11
 8015d7c:	d90f      	bls.n	8015d9e <_malloc_r+0x7e>
 8015d7e:	600b      	str	r3, [r1, #0]
 8015d80:	50cd      	str	r5, [r1, r3]
 8015d82:	18cc      	adds	r4, r1, r3
 8015d84:	4630      	mov	r0, r6
 8015d86:	f000 ff65 	bl	8016c54 <__malloc_unlock>
 8015d8a:	f104 000b 	add.w	r0, r4, #11
 8015d8e:	1d23      	adds	r3, r4, #4
 8015d90:	f020 0007 	bic.w	r0, r0, #7
 8015d94:	1ac3      	subs	r3, r0, r3
 8015d96:	d0d3      	beq.n	8015d40 <_malloc_r+0x20>
 8015d98:	425a      	negs	r2, r3
 8015d9a:	50e2      	str	r2, [r4, r3]
 8015d9c:	e7d0      	b.n	8015d40 <_malloc_r+0x20>
 8015d9e:	428c      	cmp	r4, r1
 8015da0:	684b      	ldr	r3, [r1, #4]
 8015da2:	bf16      	itet	ne
 8015da4:	6063      	strne	r3, [r4, #4]
 8015da6:	6013      	streq	r3, [r2, #0]
 8015da8:	460c      	movne	r4, r1
 8015daa:	e7eb      	b.n	8015d84 <_malloc_r+0x64>
 8015dac:	460c      	mov	r4, r1
 8015dae:	6849      	ldr	r1, [r1, #4]
 8015db0:	e7cc      	b.n	8015d4c <_malloc_r+0x2c>
 8015db2:	1cc4      	adds	r4, r0, #3
 8015db4:	f024 0403 	bic.w	r4, r4, #3
 8015db8:	42a0      	cmp	r0, r4
 8015dba:	d005      	beq.n	8015dc8 <_malloc_r+0xa8>
 8015dbc:	1a21      	subs	r1, r4, r0
 8015dbe:	4630      	mov	r0, r6
 8015dc0:	f000 fde4 	bl	801698c <_sbrk_r>
 8015dc4:	3001      	adds	r0, #1
 8015dc6:	d0cf      	beq.n	8015d68 <_malloc_r+0x48>
 8015dc8:	6025      	str	r5, [r4, #0]
 8015dca:	e7db      	b.n	8015d84 <_malloc_r+0x64>
 8015dcc:	20007da0 	.word	0x20007da0
 8015dd0:	20007da4 	.word	0x20007da4

08015dd4 <__ssputs_r>:
 8015dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015dd8:	688e      	ldr	r6, [r1, #8]
 8015dda:	429e      	cmp	r6, r3
 8015ddc:	4682      	mov	sl, r0
 8015dde:	460c      	mov	r4, r1
 8015de0:	4690      	mov	r8, r2
 8015de2:	4699      	mov	r9, r3
 8015de4:	d837      	bhi.n	8015e56 <__ssputs_r+0x82>
 8015de6:	898a      	ldrh	r2, [r1, #12]
 8015de8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8015dec:	d031      	beq.n	8015e52 <__ssputs_r+0x7e>
 8015dee:	6825      	ldr	r5, [r4, #0]
 8015df0:	6909      	ldr	r1, [r1, #16]
 8015df2:	1a6f      	subs	r7, r5, r1
 8015df4:	6965      	ldr	r5, [r4, #20]
 8015df6:	2302      	movs	r3, #2
 8015df8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015dfc:	fb95 f5f3 	sdiv	r5, r5, r3
 8015e00:	f109 0301 	add.w	r3, r9, #1
 8015e04:	443b      	add	r3, r7
 8015e06:	429d      	cmp	r5, r3
 8015e08:	bf38      	it	cc
 8015e0a:	461d      	movcc	r5, r3
 8015e0c:	0553      	lsls	r3, r2, #21
 8015e0e:	d530      	bpl.n	8015e72 <__ssputs_r+0x9e>
 8015e10:	4629      	mov	r1, r5
 8015e12:	f7ff ff85 	bl	8015d20 <_malloc_r>
 8015e16:	4606      	mov	r6, r0
 8015e18:	b950      	cbnz	r0, 8015e30 <__ssputs_r+0x5c>
 8015e1a:	230c      	movs	r3, #12
 8015e1c:	f8ca 3000 	str.w	r3, [sl]
 8015e20:	89a3      	ldrh	r3, [r4, #12]
 8015e22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015e26:	81a3      	strh	r3, [r4, #12]
 8015e28:	f04f 30ff 	mov.w	r0, #4294967295
 8015e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015e30:	463a      	mov	r2, r7
 8015e32:	6921      	ldr	r1, [r4, #16]
 8015e34:	f7ff fb0e 	bl	8015454 <memcpy>
 8015e38:	89a3      	ldrh	r3, [r4, #12]
 8015e3a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8015e3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015e42:	81a3      	strh	r3, [r4, #12]
 8015e44:	6126      	str	r6, [r4, #16]
 8015e46:	6165      	str	r5, [r4, #20]
 8015e48:	443e      	add	r6, r7
 8015e4a:	1bed      	subs	r5, r5, r7
 8015e4c:	6026      	str	r6, [r4, #0]
 8015e4e:	60a5      	str	r5, [r4, #8]
 8015e50:	464e      	mov	r6, r9
 8015e52:	454e      	cmp	r6, r9
 8015e54:	d900      	bls.n	8015e58 <__ssputs_r+0x84>
 8015e56:	464e      	mov	r6, r9
 8015e58:	4632      	mov	r2, r6
 8015e5a:	4641      	mov	r1, r8
 8015e5c:	6820      	ldr	r0, [r4, #0]
 8015e5e:	f000 fedf 	bl	8016c20 <memmove>
 8015e62:	68a3      	ldr	r3, [r4, #8]
 8015e64:	1b9b      	subs	r3, r3, r6
 8015e66:	60a3      	str	r3, [r4, #8]
 8015e68:	6823      	ldr	r3, [r4, #0]
 8015e6a:	441e      	add	r6, r3
 8015e6c:	6026      	str	r6, [r4, #0]
 8015e6e:	2000      	movs	r0, #0
 8015e70:	e7dc      	b.n	8015e2c <__ssputs_r+0x58>
 8015e72:	462a      	mov	r2, r5
 8015e74:	f000 feef 	bl	8016c56 <_realloc_r>
 8015e78:	4606      	mov	r6, r0
 8015e7a:	2800      	cmp	r0, #0
 8015e7c:	d1e2      	bne.n	8015e44 <__ssputs_r+0x70>
 8015e7e:	6921      	ldr	r1, [r4, #16]
 8015e80:	4650      	mov	r0, sl
 8015e82:	f7ff feff 	bl	8015c84 <_free_r>
 8015e86:	e7c8      	b.n	8015e1a <__ssputs_r+0x46>

08015e88 <_svfiprintf_r>:
 8015e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e8c:	461d      	mov	r5, r3
 8015e8e:	898b      	ldrh	r3, [r1, #12]
 8015e90:	061f      	lsls	r7, r3, #24
 8015e92:	b09d      	sub	sp, #116	; 0x74
 8015e94:	4680      	mov	r8, r0
 8015e96:	460c      	mov	r4, r1
 8015e98:	4616      	mov	r6, r2
 8015e9a:	d50f      	bpl.n	8015ebc <_svfiprintf_r+0x34>
 8015e9c:	690b      	ldr	r3, [r1, #16]
 8015e9e:	b96b      	cbnz	r3, 8015ebc <_svfiprintf_r+0x34>
 8015ea0:	2140      	movs	r1, #64	; 0x40
 8015ea2:	f7ff ff3d 	bl	8015d20 <_malloc_r>
 8015ea6:	6020      	str	r0, [r4, #0]
 8015ea8:	6120      	str	r0, [r4, #16]
 8015eaa:	b928      	cbnz	r0, 8015eb8 <_svfiprintf_r+0x30>
 8015eac:	230c      	movs	r3, #12
 8015eae:	f8c8 3000 	str.w	r3, [r8]
 8015eb2:	f04f 30ff 	mov.w	r0, #4294967295
 8015eb6:	e0c8      	b.n	801604a <_svfiprintf_r+0x1c2>
 8015eb8:	2340      	movs	r3, #64	; 0x40
 8015eba:	6163      	str	r3, [r4, #20]
 8015ebc:	2300      	movs	r3, #0
 8015ebe:	9309      	str	r3, [sp, #36]	; 0x24
 8015ec0:	2320      	movs	r3, #32
 8015ec2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015ec6:	2330      	movs	r3, #48	; 0x30
 8015ec8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015ecc:	9503      	str	r5, [sp, #12]
 8015ece:	f04f 0b01 	mov.w	fp, #1
 8015ed2:	4637      	mov	r7, r6
 8015ed4:	463d      	mov	r5, r7
 8015ed6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8015eda:	b10b      	cbz	r3, 8015ee0 <_svfiprintf_r+0x58>
 8015edc:	2b25      	cmp	r3, #37	; 0x25
 8015ede:	d13e      	bne.n	8015f5e <_svfiprintf_r+0xd6>
 8015ee0:	ebb7 0a06 	subs.w	sl, r7, r6
 8015ee4:	d00b      	beq.n	8015efe <_svfiprintf_r+0x76>
 8015ee6:	4653      	mov	r3, sl
 8015ee8:	4632      	mov	r2, r6
 8015eea:	4621      	mov	r1, r4
 8015eec:	4640      	mov	r0, r8
 8015eee:	f7ff ff71 	bl	8015dd4 <__ssputs_r>
 8015ef2:	3001      	adds	r0, #1
 8015ef4:	f000 80a4 	beq.w	8016040 <_svfiprintf_r+0x1b8>
 8015ef8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015efa:	4453      	add	r3, sl
 8015efc:	9309      	str	r3, [sp, #36]	; 0x24
 8015efe:	783b      	ldrb	r3, [r7, #0]
 8015f00:	2b00      	cmp	r3, #0
 8015f02:	f000 809d 	beq.w	8016040 <_svfiprintf_r+0x1b8>
 8015f06:	2300      	movs	r3, #0
 8015f08:	f04f 32ff 	mov.w	r2, #4294967295
 8015f0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015f10:	9304      	str	r3, [sp, #16]
 8015f12:	9307      	str	r3, [sp, #28]
 8015f14:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015f18:	931a      	str	r3, [sp, #104]	; 0x68
 8015f1a:	462f      	mov	r7, r5
 8015f1c:	2205      	movs	r2, #5
 8015f1e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8015f22:	4850      	ldr	r0, [pc, #320]	; (8016064 <_svfiprintf_r+0x1dc>)
 8015f24:	f7ea f974 	bl	8000210 <memchr>
 8015f28:	9b04      	ldr	r3, [sp, #16]
 8015f2a:	b9d0      	cbnz	r0, 8015f62 <_svfiprintf_r+0xda>
 8015f2c:	06d9      	lsls	r1, r3, #27
 8015f2e:	bf44      	itt	mi
 8015f30:	2220      	movmi	r2, #32
 8015f32:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8015f36:	071a      	lsls	r2, r3, #28
 8015f38:	bf44      	itt	mi
 8015f3a:	222b      	movmi	r2, #43	; 0x2b
 8015f3c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8015f40:	782a      	ldrb	r2, [r5, #0]
 8015f42:	2a2a      	cmp	r2, #42	; 0x2a
 8015f44:	d015      	beq.n	8015f72 <_svfiprintf_r+0xea>
 8015f46:	9a07      	ldr	r2, [sp, #28]
 8015f48:	462f      	mov	r7, r5
 8015f4a:	2000      	movs	r0, #0
 8015f4c:	250a      	movs	r5, #10
 8015f4e:	4639      	mov	r1, r7
 8015f50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015f54:	3b30      	subs	r3, #48	; 0x30
 8015f56:	2b09      	cmp	r3, #9
 8015f58:	d94d      	bls.n	8015ff6 <_svfiprintf_r+0x16e>
 8015f5a:	b1b8      	cbz	r0, 8015f8c <_svfiprintf_r+0x104>
 8015f5c:	e00f      	b.n	8015f7e <_svfiprintf_r+0xf6>
 8015f5e:	462f      	mov	r7, r5
 8015f60:	e7b8      	b.n	8015ed4 <_svfiprintf_r+0x4c>
 8015f62:	4a40      	ldr	r2, [pc, #256]	; (8016064 <_svfiprintf_r+0x1dc>)
 8015f64:	1a80      	subs	r0, r0, r2
 8015f66:	fa0b f000 	lsl.w	r0, fp, r0
 8015f6a:	4318      	orrs	r0, r3
 8015f6c:	9004      	str	r0, [sp, #16]
 8015f6e:	463d      	mov	r5, r7
 8015f70:	e7d3      	b.n	8015f1a <_svfiprintf_r+0x92>
 8015f72:	9a03      	ldr	r2, [sp, #12]
 8015f74:	1d11      	adds	r1, r2, #4
 8015f76:	6812      	ldr	r2, [r2, #0]
 8015f78:	9103      	str	r1, [sp, #12]
 8015f7a:	2a00      	cmp	r2, #0
 8015f7c:	db01      	blt.n	8015f82 <_svfiprintf_r+0xfa>
 8015f7e:	9207      	str	r2, [sp, #28]
 8015f80:	e004      	b.n	8015f8c <_svfiprintf_r+0x104>
 8015f82:	4252      	negs	r2, r2
 8015f84:	f043 0302 	orr.w	r3, r3, #2
 8015f88:	9207      	str	r2, [sp, #28]
 8015f8a:	9304      	str	r3, [sp, #16]
 8015f8c:	783b      	ldrb	r3, [r7, #0]
 8015f8e:	2b2e      	cmp	r3, #46	; 0x2e
 8015f90:	d10c      	bne.n	8015fac <_svfiprintf_r+0x124>
 8015f92:	787b      	ldrb	r3, [r7, #1]
 8015f94:	2b2a      	cmp	r3, #42	; 0x2a
 8015f96:	d133      	bne.n	8016000 <_svfiprintf_r+0x178>
 8015f98:	9b03      	ldr	r3, [sp, #12]
 8015f9a:	1d1a      	adds	r2, r3, #4
 8015f9c:	681b      	ldr	r3, [r3, #0]
 8015f9e:	9203      	str	r2, [sp, #12]
 8015fa0:	2b00      	cmp	r3, #0
 8015fa2:	bfb8      	it	lt
 8015fa4:	f04f 33ff 	movlt.w	r3, #4294967295
 8015fa8:	3702      	adds	r7, #2
 8015faa:	9305      	str	r3, [sp, #20]
 8015fac:	4d2e      	ldr	r5, [pc, #184]	; (8016068 <_svfiprintf_r+0x1e0>)
 8015fae:	7839      	ldrb	r1, [r7, #0]
 8015fb0:	2203      	movs	r2, #3
 8015fb2:	4628      	mov	r0, r5
 8015fb4:	f7ea f92c 	bl	8000210 <memchr>
 8015fb8:	b138      	cbz	r0, 8015fca <_svfiprintf_r+0x142>
 8015fba:	2340      	movs	r3, #64	; 0x40
 8015fbc:	1b40      	subs	r0, r0, r5
 8015fbe:	fa03 f000 	lsl.w	r0, r3, r0
 8015fc2:	9b04      	ldr	r3, [sp, #16]
 8015fc4:	4303      	orrs	r3, r0
 8015fc6:	3701      	adds	r7, #1
 8015fc8:	9304      	str	r3, [sp, #16]
 8015fca:	7839      	ldrb	r1, [r7, #0]
 8015fcc:	4827      	ldr	r0, [pc, #156]	; (801606c <_svfiprintf_r+0x1e4>)
 8015fce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015fd2:	2206      	movs	r2, #6
 8015fd4:	1c7e      	adds	r6, r7, #1
 8015fd6:	f7ea f91b 	bl	8000210 <memchr>
 8015fda:	2800      	cmp	r0, #0
 8015fdc:	d038      	beq.n	8016050 <_svfiprintf_r+0x1c8>
 8015fde:	4b24      	ldr	r3, [pc, #144]	; (8016070 <_svfiprintf_r+0x1e8>)
 8015fe0:	bb13      	cbnz	r3, 8016028 <_svfiprintf_r+0x1a0>
 8015fe2:	9b03      	ldr	r3, [sp, #12]
 8015fe4:	3307      	adds	r3, #7
 8015fe6:	f023 0307 	bic.w	r3, r3, #7
 8015fea:	3308      	adds	r3, #8
 8015fec:	9303      	str	r3, [sp, #12]
 8015fee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015ff0:	444b      	add	r3, r9
 8015ff2:	9309      	str	r3, [sp, #36]	; 0x24
 8015ff4:	e76d      	b.n	8015ed2 <_svfiprintf_r+0x4a>
 8015ff6:	fb05 3202 	mla	r2, r5, r2, r3
 8015ffa:	2001      	movs	r0, #1
 8015ffc:	460f      	mov	r7, r1
 8015ffe:	e7a6      	b.n	8015f4e <_svfiprintf_r+0xc6>
 8016000:	2300      	movs	r3, #0
 8016002:	3701      	adds	r7, #1
 8016004:	9305      	str	r3, [sp, #20]
 8016006:	4619      	mov	r1, r3
 8016008:	250a      	movs	r5, #10
 801600a:	4638      	mov	r0, r7
 801600c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016010:	3a30      	subs	r2, #48	; 0x30
 8016012:	2a09      	cmp	r2, #9
 8016014:	d903      	bls.n	801601e <_svfiprintf_r+0x196>
 8016016:	2b00      	cmp	r3, #0
 8016018:	d0c8      	beq.n	8015fac <_svfiprintf_r+0x124>
 801601a:	9105      	str	r1, [sp, #20]
 801601c:	e7c6      	b.n	8015fac <_svfiprintf_r+0x124>
 801601e:	fb05 2101 	mla	r1, r5, r1, r2
 8016022:	2301      	movs	r3, #1
 8016024:	4607      	mov	r7, r0
 8016026:	e7f0      	b.n	801600a <_svfiprintf_r+0x182>
 8016028:	ab03      	add	r3, sp, #12
 801602a:	9300      	str	r3, [sp, #0]
 801602c:	4622      	mov	r2, r4
 801602e:	4b11      	ldr	r3, [pc, #68]	; (8016074 <_svfiprintf_r+0x1ec>)
 8016030:	a904      	add	r1, sp, #16
 8016032:	4640      	mov	r0, r8
 8016034:	f7fb ffbc 	bl	8011fb0 <_printf_float>
 8016038:	f1b0 3fff 	cmp.w	r0, #4294967295
 801603c:	4681      	mov	r9, r0
 801603e:	d1d6      	bne.n	8015fee <_svfiprintf_r+0x166>
 8016040:	89a3      	ldrh	r3, [r4, #12]
 8016042:	065b      	lsls	r3, r3, #25
 8016044:	f53f af35 	bmi.w	8015eb2 <_svfiprintf_r+0x2a>
 8016048:	9809      	ldr	r0, [sp, #36]	; 0x24
 801604a:	b01d      	add	sp, #116	; 0x74
 801604c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016050:	ab03      	add	r3, sp, #12
 8016052:	9300      	str	r3, [sp, #0]
 8016054:	4622      	mov	r2, r4
 8016056:	4b07      	ldr	r3, [pc, #28]	; (8016074 <_svfiprintf_r+0x1ec>)
 8016058:	a904      	add	r1, sp, #16
 801605a:	4640      	mov	r0, r8
 801605c:	f7fc fa5e 	bl	801251c <_printf_i>
 8016060:	e7ea      	b.n	8016038 <_svfiprintf_r+0x1b0>
 8016062:	bf00      	nop
 8016064:	080176e4 	.word	0x080176e4
 8016068:	080176ea 	.word	0x080176ea
 801606c:	080176ee 	.word	0x080176ee
 8016070:	08011fb1 	.word	0x08011fb1
 8016074:	08015dd5 	.word	0x08015dd5

08016078 <_sungetc_r>:
 8016078:	b538      	push	{r3, r4, r5, lr}
 801607a:	1c4b      	adds	r3, r1, #1
 801607c:	4614      	mov	r4, r2
 801607e:	d103      	bne.n	8016088 <_sungetc_r+0x10>
 8016080:	f04f 35ff 	mov.w	r5, #4294967295
 8016084:	4628      	mov	r0, r5
 8016086:	bd38      	pop	{r3, r4, r5, pc}
 8016088:	8993      	ldrh	r3, [r2, #12]
 801608a:	f023 0320 	bic.w	r3, r3, #32
 801608e:	8193      	strh	r3, [r2, #12]
 8016090:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016092:	6852      	ldr	r2, [r2, #4]
 8016094:	b2cd      	uxtb	r5, r1
 8016096:	b18b      	cbz	r3, 80160bc <_sungetc_r+0x44>
 8016098:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801609a:	4293      	cmp	r3, r2
 801609c:	dd08      	ble.n	80160b0 <_sungetc_r+0x38>
 801609e:	6823      	ldr	r3, [r4, #0]
 80160a0:	1e5a      	subs	r2, r3, #1
 80160a2:	6022      	str	r2, [r4, #0]
 80160a4:	f803 5c01 	strb.w	r5, [r3, #-1]
 80160a8:	6863      	ldr	r3, [r4, #4]
 80160aa:	3301      	adds	r3, #1
 80160ac:	6063      	str	r3, [r4, #4]
 80160ae:	e7e9      	b.n	8016084 <_sungetc_r+0xc>
 80160b0:	4621      	mov	r1, r4
 80160b2:	f000 fd4b 	bl	8016b4c <__submore>
 80160b6:	2800      	cmp	r0, #0
 80160b8:	d0f1      	beq.n	801609e <_sungetc_r+0x26>
 80160ba:	e7e1      	b.n	8016080 <_sungetc_r+0x8>
 80160bc:	6921      	ldr	r1, [r4, #16]
 80160be:	6823      	ldr	r3, [r4, #0]
 80160c0:	b151      	cbz	r1, 80160d8 <_sungetc_r+0x60>
 80160c2:	4299      	cmp	r1, r3
 80160c4:	d208      	bcs.n	80160d8 <_sungetc_r+0x60>
 80160c6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80160ca:	42a9      	cmp	r1, r5
 80160cc:	d104      	bne.n	80160d8 <_sungetc_r+0x60>
 80160ce:	3b01      	subs	r3, #1
 80160d0:	3201      	adds	r2, #1
 80160d2:	6023      	str	r3, [r4, #0]
 80160d4:	6062      	str	r2, [r4, #4]
 80160d6:	e7d5      	b.n	8016084 <_sungetc_r+0xc>
 80160d8:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80160dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80160e0:	6363      	str	r3, [r4, #52]	; 0x34
 80160e2:	2303      	movs	r3, #3
 80160e4:	63a3      	str	r3, [r4, #56]	; 0x38
 80160e6:	4623      	mov	r3, r4
 80160e8:	f803 5f46 	strb.w	r5, [r3, #70]!
 80160ec:	6023      	str	r3, [r4, #0]
 80160ee:	2301      	movs	r3, #1
 80160f0:	e7dc      	b.n	80160ac <_sungetc_r+0x34>

080160f2 <__ssrefill_r>:
 80160f2:	b510      	push	{r4, lr}
 80160f4:	460c      	mov	r4, r1
 80160f6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80160f8:	b169      	cbz	r1, 8016116 <__ssrefill_r+0x24>
 80160fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80160fe:	4299      	cmp	r1, r3
 8016100:	d001      	beq.n	8016106 <__ssrefill_r+0x14>
 8016102:	f7ff fdbf 	bl	8015c84 <_free_r>
 8016106:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016108:	6063      	str	r3, [r4, #4]
 801610a:	2000      	movs	r0, #0
 801610c:	6360      	str	r0, [r4, #52]	; 0x34
 801610e:	b113      	cbz	r3, 8016116 <__ssrefill_r+0x24>
 8016110:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8016112:	6023      	str	r3, [r4, #0]
 8016114:	bd10      	pop	{r4, pc}
 8016116:	6923      	ldr	r3, [r4, #16]
 8016118:	6023      	str	r3, [r4, #0]
 801611a:	2300      	movs	r3, #0
 801611c:	6063      	str	r3, [r4, #4]
 801611e:	89a3      	ldrh	r3, [r4, #12]
 8016120:	f043 0320 	orr.w	r3, r3, #32
 8016124:	81a3      	strh	r3, [r4, #12]
 8016126:	f04f 30ff 	mov.w	r0, #4294967295
 801612a:	e7f3      	b.n	8016114 <__ssrefill_r+0x22>

0801612c <__ssvfiscanf_r>:
 801612c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016130:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8016134:	460c      	mov	r4, r1
 8016136:	2100      	movs	r1, #0
 8016138:	9144      	str	r1, [sp, #272]	; 0x110
 801613a:	9145      	str	r1, [sp, #276]	; 0x114
 801613c:	499f      	ldr	r1, [pc, #636]	; (80163bc <__ssvfiscanf_r+0x290>)
 801613e:	91a0      	str	r1, [sp, #640]	; 0x280
 8016140:	f10d 0804 	add.w	r8, sp, #4
 8016144:	499e      	ldr	r1, [pc, #632]	; (80163c0 <__ssvfiscanf_r+0x294>)
 8016146:	f8df 927c 	ldr.w	r9, [pc, #636]	; 80163c4 <__ssvfiscanf_r+0x298>
 801614a:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 801614e:	4606      	mov	r6, r0
 8016150:	4692      	mov	sl, r2
 8016152:	91a1      	str	r1, [sp, #644]	; 0x284
 8016154:	9300      	str	r3, [sp, #0]
 8016156:	270a      	movs	r7, #10
 8016158:	f89a 3000 	ldrb.w	r3, [sl]
 801615c:	2b00      	cmp	r3, #0
 801615e:	f000 812a 	beq.w	80163b6 <__ssvfiscanf_r+0x28a>
 8016162:	4655      	mov	r5, sl
 8016164:	f7ff f8c8 	bl	80152f8 <__locale_ctype_ptr>
 8016168:	f815 bb01 	ldrb.w	fp, [r5], #1
 801616c:	4458      	add	r0, fp
 801616e:	7843      	ldrb	r3, [r0, #1]
 8016170:	f013 0308 	ands.w	r3, r3, #8
 8016174:	d01c      	beq.n	80161b0 <__ssvfiscanf_r+0x84>
 8016176:	6863      	ldr	r3, [r4, #4]
 8016178:	2b00      	cmp	r3, #0
 801617a:	dd12      	ble.n	80161a2 <__ssvfiscanf_r+0x76>
 801617c:	f7ff f8bc 	bl	80152f8 <__locale_ctype_ptr>
 8016180:	6823      	ldr	r3, [r4, #0]
 8016182:	781a      	ldrb	r2, [r3, #0]
 8016184:	4410      	add	r0, r2
 8016186:	7842      	ldrb	r2, [r0, #1]
 8016188:	0712      	lsls	r2, r2, #28
 801618a:	d401      	bmi.n	8016190 <__ssvfiscanf_r+0x64>
 801618c:	46aa      	mov	sl, r5
 801618e:	e7e3      	b.n	8016158 <__ssvfiscanf_r+0x2c>
 8016190:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8016192:	3201      	adds	r2, #1
 8016194:	9245      	str	r2, [sp, #276]	; 0x114
 8016196:	6862      	ldr	r2, [r4, #4]
 8016198:	3301      	adds	r3, #1
 801619a:	3a01      	subs	r2, #1
 801619c:	6062      	str	r2, [r4, #4]
 801619e:	6023      	str	r3, [r4, #0]
 80161a0:	e7e9      	b.n	8016176 <__ssvfiscanf_r+0x4a>
 80161a2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80161a4:	4621      	mov	r1, r4
 80161a6:	4630      	mov	r0, r6
 80161a8:	4798      	blx	r3
 80161aa:	2800      	cmp	r0, #0
 80161ac:	d0e6      	beq.n	801617c <__ssvfiscanf_r+0x50>
 80161ae:	e7ed      	b.n	801618c <__ssvfiscanf_r+0x60>
 80161b0:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 80161b4:	f040 8082 	bne.w	80162bc <__ssvfiscanf_r+0x190>
 80161b8:	9343      	str	r3, [sp, #268]	; 0x10c
 80161ba:	9341      	str	r3, [sp, #260]	; 0x104
 80161bc:	f89a 3001 	ldrb.w	r3, [sl, #1]
 80161c0:	2b2a      	cmp	r3, #42	; 0x2a
 80161c2:	d103      	bne.n	80161cc <__ssvfiscanf_r+0xa0>
 80161c4:	2310      	movs	r3, #16
 80161c6:	9341      	str	r3, [sp, #260]	; 0x104
 80161c8:	f10a 0502 	add.w	r5, sl, #2
 80161cc:	46aa      	mov	sl, r5
 80161ce:	f815 1b01 	ldrb.w	r1, [r5], #1
 80161d2:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80161d6:	2a09      	cmp	r2, #9
 80161d8:	d922      	bls.n	8016220 <__ssvfiscanf_r+0xf4>
 80161da:	2203      	movs	r2, #3
 80161dc:	4879      	ldr	r0, [pc, #484]	; (80163c4 <__ssvfiscanf_r+0x298>)
 80161de:	f7ea f817 	bl	8000210 <memchr>
 80161e2:	b138      	cbz	r0, 80161f4 <__ssvfiscanf_r+0xc8>
 80161e4:	eba0 0309 	sub.w	r3, r0, r9
 80161e8:	2001      	movs	r0, #1
 80161ea:	4098      	lsls	r0, r3
 80161ec:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80161ee:	4318      	orrs	r0, r3
 80161f0:	9041      	str	r0, [sp, #260]	; 0x104
 80161f2:	46aa      	mov	sl, r5
 80161f4:	f89a 3000 	ldrb.w	r3, [sl]
 80161f8:	2b67      	cmp	r3, #103	; 0x67
 80161fa:	f10a 0501 	add.w	r5, sl, #1
 80161fe:	d82b      	bhi.n	8016258 <__ssvfiscanf_r+0x12c>
 8016200:	2b65      	cmp	r3, #101	; 0x65
 8016202:	f080 809f 	bcs.w	8016344 <__ssvfiscanf_r+0x218>
 8016206:	2b47      	cmp	r3, #71	; 0x47
 8016208:	d810      	bhi.n	801622c <__ssvfiscanf_r+0x100>
 801620a:	2b45      	cmp	r3, #69	; 0x45
 801620c:	f080 809a 	bcs.w	8016344 <__ssvfiscanf_r+0x218>
 8016210:	2b00      	cmp	r3, #0
 8016212:	d06c      	beq.n	80162ee <__ssvfiscanf_r+0x1c2>
 8016214:	2b25      	cmp	r3, #37	; 0x25
 8016216:	d051      	beq.n	80162bc <__ssvfiscanf_r+0x190>
 8016218:	2303      	movs	r3, #3
 801621a:	9347      	str	r3, [sp, #284]	; 0x11c
 801621c:	9742      	str	r7, [sp, #264]	; 0x108
 801621e:	e027      	b.n	8016270 <__ssvfiscanf_r+0x144>
 8016220:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8016222:	fb07 1303 	mla	r3, r7, r3, r1
 8016226:	3b30      	subs	r3, #48	; 0x30
 8016228:	9343      	str	r3, [sp, #268]	; 0x10c
 801622a:	e7cf      	b.n	80161cc <__ssvfiscanf_r+0xa0>
 801622c:	2b5b      	cmp	r3, #91	; 0x5b
 801622e:	d06a      	beq.n	8016306 <__ssvfiscanf_r+0x1da>
 8016230:	d80c      	bhi.n	801624c <__ssvfiscanf_r+0x120>
 8016232:	2b58      	cmp	r3, #88	; 0x58
 8016234:	d1f0      	bne.n	8016218 <__ssvfiscanf_r+0xec>
 8016236:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8016238:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801623c:	9241      	str	r2, [sp, #260]	; 0x104
 801623e:	2210      	movs	r2, #16
 8016240:	9242      	str	r2, [sp, #264]	; 0x108
 8016242:	2b6e      	cmp	r3, #110	; 0x6e
 8016244:	bf8c      	ite	hi
 8016246:	2304      	movhi	r3, #4
 8016248:	2303      	movls	r3, #3
 801624a:	e010      	b.n	801626e <__ssvfiscanf_r+0x142>
 801624c:	2b63      	cmp	r3, #99	; 0x63
 801624e:	d065      	beq.n	801631c <__ssvfiscanf_r+0x1f0>
 8016250:	2b64      	cmp	r3, #100	; 0x64
 8016252:	d1e1      	bne.n	8016218 <__ssvfiscanf_r+0xec>
 8016254:	9742      	str	r7, [sp, #264]	; 0x108
 8016256:	e7f4      	b.n	8016242 <__ssvfiscanf_r+0x116>
 8016258:	2b70      	cmp	r3, #112	; 0x70
 801625a:	d04b      	beq.n	80162f4 <__ssvfiscanf_r+0x1c8>
 801625c:	d826      	bhi.n	80162ac <__ssvfiscanf_r+0x180>
 801625e:	2b6e      	cmp	r3, #110	; 0x6e
 8016260:	d062      	beq.n	8016328 <__ssvfiscanf_r+0x1fc>
 8016262:	d84c      	bhi.n	80162fe <__ssvfiscanf_r+0x1d2>
 8016264:	2b69      	cmp	r3, #105	; 0x69
 8016266:	d1d7      	bne.n	8016218 <__ssvfiscanf_r+0xec>
 8016268:	2300      	movs	r3, #0
 801626a:	9342      	str	r3, [sp, #264]	; 0x108
 801626c:	2303      	movs	r3, #3
 801626e:	9347      	str	r3, [sp, #284]	; 0x11c
 8016270:	6863      	ldr	r3, [r4, #4]
 8016272:	2b00      	cmp	r3, #0
 8016274:	dd68      	ble.n	8016348 <__ssvfiscanf_r+0x21c>
 8016276:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016278:	0659      	lsls	r1, r3, #25
 801627a:	d407      	bmi.n	801628c <__ssvfiscanf_r+0x160>
 801627c:	f7ff f83c 	bl	80152f8 <__locale_ctype_ptr>
 8016280:	6823      	ldr	r3, [r4, #0]
 8016282:	781a      	ldrb	r2, [r3, #0]
 8016284:	4410      	add	r0, r2
 8016286:	7842      	ldrb	r2, [r0, #1]
 8016288:	0712      	lsls	r2, r2, #28
 801628a:	d464      	bmi.n	8016356 <__ssvfiscanf_r+0x22a>
 801628c:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 801628e:	2b02      	cmp	r3, #2
 8016290:	dc73      	bgt.n	801637a <__ssvfiscanf_r+0x24e>
 8016292:	466b      	mov	r3, sp
 8016294:	4622      	mov	r2, r4
 8016296:	a941      	add	r1, sp, #260	; 0x104
 8016298:	4630      	mov	r0, r6
 801629a:	f000 f9d7 	bl	801664c <_scanf_chars>
 801629e:	2801      	cmp	r0, #1
 80162a0:	f000 8089 	beq.w	80163b6 <__ssvfiscanf_r+0x28a>
 80162a4:	2802      	cmp	r0, #2
 80162a6:	f47f af71 	bne.w	801618c <__ssvfiscanf_r+0x60>
 80162aa:	e01d      	b.n	80162e8 <__ssvfiscanf_r+0x1bc>
 80162ac:	2b75      	cmp	r3, #117	; 0x75
 80162ae:	d0d1      	beq.n	8016254 <__ssvfiscanf_r+0x128>
 80162b0:	2b78      	cmp	r3, #120	; 0x78
 80162b2:	d0c0      	beq.n	8016236 <__ssvfiscanf_r+0x10a>
 80162b4:	2b73      	cmp	r3, #115	; 0x73
 80162b6:	d1af      	bne.n	8016218 <__ssvfiscanf_r+0xec>
 80162b8:	2302      	movs	r3, #2
 80162ba:	e7d8      	b.n	801626e <__ssvfiscanf_r+0x142>
 80162bc:	6863      	ldr	r3, [r4, #4]
 80162be:	2b00      	cmp	r3, #0
 80162c0:	dd0c      	ble.n	80162dc <__ssvfiscanf_r+0x1b0>
 80162c2:	6823      	ldr	r3, [r4, #0]
 80162c4:	781a      	ldrb	r2, [r3, #0]
 80162c6:	455a      	cmp	r2, fp
 80162c8:	d175      	bne.n	80163b6 <__ssvfiscanf_r+0x28a>
 80162ca:	3301      	adds	r3, #1
 80162cc:	6862      	ldr	r2, [r4, #4]
 80162ce:	6023      	str	r3, [r4, #0]
 80162d0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80162d2:	3a01      	subs	r2, #1
 80162d4:	3301      	adds	r3, #1
 80162d6:	6062      	str	r2, [r4, #4]
 80162d8:	9345      	str	r3, [sp, #276]	; 0x114
 80162da:	e757      	b.n	801618c <__ssvfiscanf_r+0x60>
 80162dc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80162de:	4621      	mov	r1, r4
 80162e0:	4630      	mov	r0, r6
 80162e2:	4798      	blx	r3
 80162e4:	2800      	cmp	r0, #0
 80162e6:	d0ec      	beq.n	80162c2 <__ssvfiscanf_r+0x196>
 80162e8:	9844      	ldr	r0, [sp, #272]	; 0x110
 80162ea:	2800      	cmp	r0, #0
 80162ec:	d159      	bne.n	80163a2 <__ssvfiscanf_r+0x276>
 80162ee:	f04f 30ff 	mov.w	r0, #4294967295
 80162f2:	e05c      	b.n	80163ae <__ssvfiscanf_r+0x282>
 80162f4:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80162f6:	f042 0220 	orr.w	r2, r2, #32
 80162fa:	9241      	str	r2, [sp, #260]	; 0x104
 80162fc:	e79b      	b.n	8016236 <__ssvfiscanf_r+0x10a>
 80162fe:	2308      	movs	r3, #8
 8016300:	9342      	str	r3, [sp, #264]	; 0x108
 8016302:	2304      	movs	r3, #4
 8016304:	e7b3      	b.n	801626e <__ssvfiscanf_r+0x142>
 8016306:	4629      	mov	r1, r5
 8016308:	4640      	mov	r0, r8
 801630a:	f000 fb4f 	bl	80169ac <__sccl>
 801630e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8016310:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016314:	9341      	str	r3, [sp, #260]	; 0x104
 8016316:	4605      	mov	r5, r0
 8016318:	2301      	movs	r3, #1
 801631a:	e7a8      	b.n	801626e <__ssvfiscanf_r+0x142>
 801631c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 801631e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016322:	9341      	str	r3, [sp, #260]	; 0x104
 8016324:	2300      	movs	r3, #0
 8016326:	e7a2      	b.n	801626e <__ssvfiscanf_r+0x142>
 8016328:	9841      	ldr	r0, [sp, #260]	; 0x104
 801632a:	06c3      	lsls	r3, r0, #27
 801632c:	f53f af2e 	bmi.w	801618c <__ssvfiscanf_r+0x60>
 8016330:	9b00      	ldr	r3, [sp, #0]
 8016332:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8016334:	1d19      	adds	r1, r3, #4
 8016336:	9100      	str	r1, [sp, #0]
 8016338:	681b      	ldr	r3, [r3, #0]
 801633a:	07c0      	lsls	r0, r0, #31
 801633c:	bf4c      	ite	mi
 801633e:	801a      	strhmi	r2, [r3, #0]
 8016340:	601a      	strpl	r2, [r3, #0]
 8016342:	e723      	b.n	801618c <__ssvfiscanf_r+0x60>
 8016344:	2305      	movs	r3, #5
 8016346:	e792      	b.n	801626e <__ssvfiscanf_r+0x142>
 8016348:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801634a:	4621      	mov	r1, r4
 801634c:	4630      	mov	r0, r6
 801634e:	4798      	blx	r3
 8016350:	2800      	cmp	r0, #0
 8016352:	d090      	beq.n	8016276 <__ssvfiscanf_r+0x14a>
 8016354:	e7c8      	b.n	80162e8 <__ssvfiscanf_r+0x1bc>
 8016356:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8016358:	3201      	adds	r2, #1
 801635a:	9245      	str	r2, [sp, #276]	; 0x114
 801635c:	6862      	ldr	r2, [r4, #4]
 801635e:	3a01      	subs	r2, #1
 8016360:	2a00      	cmp	r2, #0
 8016362:	6062      	str	r2, [r4, #4]
 8016364:	dd02      	ble.n	801636c <__ssvfiscanf_r+0x240>
 8016366:	3301      	adds	r3, #1
 8016368:	6023      	str	r3, [r4, #0]
 801636a:	e787      	b.n	801627c <__ssvfiscanf_r+0x150>
 801636c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 801636e:	4621      	mov	r1, r4
 8016370:	4630      	mov	r0, r6
 8016372:	4798      	blx	r3
 8016374:	2800      	cmp	r0, #0
 8016376:	d081      	beq.n	801627c <__ssvfiscanf_r+0x150>
 8016378:	e7b6      	b.n	80162e8 <__ssvfiscanf_r+0x1bc>
 801637a:	2b04      	cmp	r3, #4
 801637c:	dc06      	bgt.n	801638c <__ssvfiscanf_r+0x260>
 801637e:	466b      	mov	r3, sp
 8016380:	4622      	mov	r2, r4
 8016382:	a941      	add	r1, sp, #260	; 0x104
 8016384:	4630      	mov	r0, r6
 8016386:	f000 f9c5 	bl	8016714 <_scanf_i>
 801638a:	e788      	b.n	801629e <__ssvfiscanf_r+0x172>
 801638c:	4b0e      	ldr	r3, [pc, #56]	; (80163c8 <__ssvfiscanf_r+0x29c>)
 801638e:	2b00      	cmp	r3, #0
 8016390:	f43f aefc 	beq.w	801618c <__ssvfiscanf_r+0x60>
 8016394:	466b      	mov	r3, sp
 8016396:	4622      	mov	r2, r4
 8016398:	a941      	add	r1, sp, #260	; 0x104
 801639a:	4630      	mov	r0, r6
 801639c:	f7fc f9d0 	bl	8012740 <_scanf_float>
 80163a0:	e77d      	b.n	801629e <__ssvfiscanf_r+0x172>
 80163a2:	89a3      	ldrh	r3, [r4, #12]
 80163a4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80163a8:	bf18      	it	ne
 80163aa:	f04f 30ff 	movne.w	r0, #4294967295
 80163ae:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80163b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80163b6:	9844      	ldr	r0, [sp, #272]	; 0x110
 80163b8:	e7f9      	b.n	80163ae <__ssvfiscanf_r+0x282>
 80163ba:	bf00      	nop
 80163bc:	08016079 	.word	0x08016079
 80163c0:	080160f3 	.word	0x080160f3
 80163c4:	080176ea 	.word	0x080176ea
 80163c8:	08012741 	.word	0x08012741

080163cc <__sfputc_r>:
 80163cc:	6893      	ldr	r3, [r2, #8]
 80163ce:	3b01      	subs	r3, #1
 80163d0:	2b00      	cmp	r3, #0
 80163d2:	b410      	push	{r4}
 80163d4:	6093      	str	r3, [r2, #8]
 80163d6:	da08      	bge.n	80163ea <__sfputc_r+0x1e>
 80163d8:	6994      	ldr	r4, [r2, #24]
 80163da:	42a3      	cmp	r3, r4
 80163dc:	db01      	blt.n	80163e2 <__sfputc_r+0x16>
 80163de:	290a      	cmp	r1, #10
 80163e0:	d103      	bne.n	80163ea <__sfputc_r+0x1e>
 80163e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80163e6:	f7fd bbbd 	b.w	8013b64 <__swbuf_r>
 80163ea:	6813      	ldr	r3, [r2, #0]
 80163ec:	1c58      	adds	r0, r3, #1
 80163ee:	6010      	str	r0, [r2, #0]
 80163f0:	7019      	strb	r1, [r3, #0]
 80163f2:	4608      	mov	r0, r1
 80163f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80163f8:	4770      	bx	lr

080163fa <__sfputs_r>:
 80163fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80163fc:	4606      	mov	r6, r0
 80163fe:	460f      	mov	r7, r1
 8016400:	4614      	mov	r4, r2
 8016402:	18d5      	adds	r5, r2, r3
 8016404:	42ac      	cmp	r4, r5
 8016406:	d101      	bne.n	801640c <__sfputs_r+0x12>
 8016408:	2000      	movs	r0, #0
 801640a:	e007      	b.n	801641c <__sfputs_r+0x22>
 801640c:	463a      	mov	r2, r7
 801640e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016412:	4630      	mov	r0, r6
 8016414:	f7ff ffda 	bl	80163cc <__sfputc_r>
 8016418:	1c43      	adds	r3, r0, #1
 801641a:	d1f3      	bne.n	8016404 <__sfputs_r+0xa>
 801641c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016420 <_vfiprintf_r>:
 8016420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016424:	460c      	mov	r4, r1
 8016426:	b09d      	sub	sp, #116	; 0x74
 8016428:	4617      	mov	r7, r2
 801642a:	461d      	mov	r5, r3
 801642c:	4606      	mov	r6, r0
 801642e:	b118      	cbz	r0, 8016438 <_vfiprintf_r+0x18>
 8016430:	6983      	ldr	r3, [r0, #24]
 8016432:	b90b      	cbnz	r3, 8016438 <_vfiprintf_r+0x18>
 8016434:	f7fe fbac 	bl	8014b90 <__sinit>
 8016438:	4b7c      	ldr	r3, [pc, #496]	; (801662c <_vfiprintf_r+0x20c>)
 801643a:	429c      	cmp	r4, r3
 801643c:	d158      	bne.n	80164f0 <_vfiprintf_r+0xd0>
 801643e:	6874      	ldr	r4, [r6, #4]
 8016440:	89a3      	ldrh	r3, [r4, #12]
 8016442:	0718      	lsls	r0, r3, #28
 8016444:	d55e      	bpl.n	8016504 <_vfiprintf_r+0xe4>
 8016446:	6923      	ldr	r3, [r4, #16]
 8016448:	2b00      	cmp	r3, #0
 801644a:	d05b      	beq.n	8016504 <_vfiprintf_r+0xe4>
 801644c:	2300      	movs	r3, #0
 801644e:	9309      	str	r3, [sp, #36]	; 0x24
 8016450:	2320      	movs	r3, #32
 8016452:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016456:	2330      	movs	r3, #48	; 0x30
 8016458:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801645c:	9503      	str	r5, [sp, #12]
 801645e:	f04f 0b01 	mov.w	fp, #1
 8016462:	46b8      	mov	r8, r7
 8016464:	4645      	mov	r5, r8
 8016466:	f815 3b01 	ldrb.w	r3, [r5], #1
 801646a:	b10b      	cbz	r3, 8016470 <_vfiprintf_r+0x50>
 801646c:	2b25      	cmp	r3, #37	; 0x25
 801646e:	d154      	bne.n	801651a <_vfiprintf_r+0xfa>
 8016470:	ebb8 0a07 	subs.w	sl, r8, r7
 8016474:	d00b      	beq.n	801648e <_vfiprintf_r+0x6e>
 8016476:	4653      	mov	r3, sl
 8016478:	463a      	mov	r2, r7
 801647a:	4621      	mov	r1, r4
 801647c:	4630      	mov	r0, r6
 801647e:	f7ff ffbc 	bl	80163fa <__sfputs_r>
 8016482:	3001      	adds	r0, #1
 8016484:	f000 80c2 	beq.w	801660c <_vfiprintf_r+0x1ec>
 8016488:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801648a:	4453      	add	r3, sl
 801648c:	9309      	str	r3, [sp, #36]	; 0x24
 801648e:	f898 3000 	ldrb.w	r3, [r8]
 8016492:	2b00      	cmp	r3, #0
 8016494:	f000 80ba 	beq.w	801660c <_vfiprintf_r+0x1ec>
 8016498:	2300      	movs	r3, #0
 801649a:	f04f 32ff 	mov.w	r2, #4294967295
 801649e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80164a2:	9304      	str	r3, [sp, #16]
 80164a4:	9307      	str	r3, [sp, #28]
 80164a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80164aa:	931a      	str	r3, [sp, #104]	; 0x68
 80164ac:	46a8      	mov	r8, r5
 80164ae:	2205      	movs	r2, #5
 80164b0:	f818 1b01 	ldrb.w	r1, [r8], #1
 80164b4:	485e      	ldr	r0, [pc, #376]	; (8016630 <_vfiprintf_r+0x210>)
 80164b6:	f7e9 feab 	bl	8000210 <memchr>
 80164ba:	9b04      	ldr	r3, [sp, #16]
 80164bc:	bb78      	cbnz	r0, 801651e <_vfiprintf_r+0xfe>
 80164be:	06d9      	lsls	r1, r3, #27
 80164c0:	bf44      	itt	mi
 80164c2:	2220      	movmi	r2, #32
 80164c4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80164c8:	071a      	lsls	r2, r3, #28
 80164ca:	bf44      	itt	mi
 80164cc:	222b      	movmi	r2, #43	; 0x2b
 80164ce:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80164d2:	782a      	ldrb	r2, [r5, #0]
 80164d4:	2a2a      	cmp	r2, #42	; 0x2a
 80164d6:	d02a      	beq.n	801652e <_vfiprintf_r+0x10e>
 80164d8:	9a07      	ldr	r2, [sp, #28]
 80164da:	46a8      	mov	r8, r5
 80164dc:	2000      	movs	r0, #0
 80164de:	250a      	movs	r5, #10
 80164e0:	4641      	mov	r1, r8
 80164e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80164e6:	3b30      	subs	r3, #48	; 0x30
 80164e8:	2b09      	cmp	r3, #9
 80164ea:	d969      	bls.n	80165c0 <_vfiprintf_r+0x1a0>
 80164ec:	b360      	cbz	r0, 8016548 <_vfiprintf_r+0x128>
 80164ee:	e024      	b.n	801653a <_vfiprintf_r+0x11a>
 80164f0:	4b50      	ldr	r3, [pc, #320]	; (8016634 <_vfiprintf_r+0x214>)
 80164f2:	429c      	cmp	r4, r3
 80164f4:	d101      	bne.n	80164fa <_vfiprintf_r+0xda>
 80164f6:	68b4      	ldr	r4, [r6, #8]
 80164f8:	e7a2      	b.n	8016440 <_vfiprintf_r+0x20>
 80164fa:	4b4f      	ldr	r3, [pc, #316]	; (8016638 <_vfiprintf_r+0x218>)
 80164fc:	429c      	cmp	r4, r3
 80164fe:	bf08      	it	eq
 8016500:	68f4      	ldreq	r4, [r6, #12]
 8016502:	e79d      	b.n	8016440 <_vfiprintf_r+0x20>
 8016504:	4621      	mov	r1, r4
 8016506:	4630      	mov	r0, r6
 8016508:	f7fd fb90 	bl	8013c2c <__swsetup_r>
 801650c:	2800      	cmp	r0, #0
 801650e:	d09d      	beq.n	801644c <_vfiprintf_r+0x2c>
 8016510:	f04f 30ff 	mov.w	r0, #4294967295
 8016514:	b01d      	add	sp, #116	; 0x74
 8016516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801651a:	46a8      	mov	r8, r5
 801651c:	e7a2      	b.n	8016464 <_vfiprintf_r+0x44>
 801651e:	4a44      	ldr	r2, [pc, #272]	; (8016630 <_vfiprintf_r+0x210>)
 8016520:	1a80      	subs	r0, r0, r2
 8016522:	fa0b f000 	lsl.w	r0, fp, r0
 8016526:	4318      	orrs	r0, r3
 8016528:	9004      	str	r0, [sp, #16]
 801652a:	4645      	mov	r5, r8
 801652c:	e7be      	b.n	80164ac <_vfiprintf_r+0x8c>
 801652e:	9a03      	ldr	r2, [sp, #12]
 8016530:	1d11      	adds	r1, r2, #4
 8016532:	6812      	ldr	r2, [r2, #0]
 8016534:	9103      	str	r1, [sp, #12]
 8016536:	2a00      	cmp	r2, #0
 8016538:	db01      	blt.n	801653e <_vfiprintf_r+0x11e>
 801653a:	9207      	str	r2, [sp, #28]
 801653c:	e004      	b.n	8016548 <_vfiprintf_r+0x128>
 801653e:	4252      	negs	r2, r2
 8016540:	f043 0302 	orr.w	r3, r3, #2
 8016544:	9207      	str	r2, [sp, #28]
 8016546:	9304      	str	r3, [sp, #16]
 8016548:	f898 3000 	ldrb.w	r3, [r8]
 801654c:	2b2e      	cmp	r3, #46	; 0x2e
 801654e:	d10e      	bne.n	801656e <_vfiprintf_r+0x14e>
 8016550:	f898 3001 	ldrb.w	r3, [r8, #1]
 8016554:	2b2a      	cmp	r3, #42	; 0x2a
 8016556:	d138      	bne.n	80165ca <_vfiprintf_r+0x1aa>
 8016558:	9b03      	ldr	r3, [sp, #12]
 801655a:	1d1a      	adds	r2, r3, #4
 801655c:	681b      	ldr	r3, [r3, #0]
 801655e:	9203      	str	r2, [sp, #12]
 8016560:	2b00      	cmp	r3, #0
 8016562:	bfb8      	it	lt
 8016564:	f04f 33ff 	movlt.w	r3, #4294967295
 8016568:	f108 0802 	add.w	r8, r8, #2
 801656c:	9305      	str	r3, [sp, #20]
 801656e:	4d33      	ldr	r5, [pc, #204]	; (801663c <_vfiprintf_r+0x21c>)
 8016570:	f898 1000 	ldrb.w	r1, [r8]
 8016574:	2203      	movs	r2, #3
 8016576:	4628      	mov	r0, r5
 8016578:	f7e9 fe4a 	bl	8000210 <memchr>
 801657c:	b140      	cbz	r0, 8016590 <_vfiprintf_r+0x170>
 801657e:	2340      	movs	r3, #64	; 0x40
 8016580:	1b40      	subs	r0, r0, r5
 8016582:	fa03 f000 	lsl.w	r0, r3, r0
 8016586:	9b04      	ldr	r3, [sp, #16]
 8016588:	4303      	orrs	r3, r0
 801658a:	f108 0801 	add.w	r8, r8, #1
 801658e:	9304      	str	r3, [sp, #16]
 8016590:	f898 1000 	ldrb.w	r1, [r8]
 8016594:	482a      	ldr	r0, [pc, #168]	; (8016640 <_vfiprintf_r+0x220>)
 8016596:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801659a:	2206      	movs	r2, #6
 801659c:	f108 0701 	add.w	r7, r8, #1
 80165a0:	f7e9 fe36 	bl	8000210 <memchr>
 80165a4:	2800      	cmp	r0, #0
 80165a6:	d037      	beq.n	8016618 <_vfiprintf_r+0x1f8>
 80165a8:	4b26      	ldr	r3, [pc, #152]	; (8016644 <_vfiprintf_r+0x224>)
 80165aa:	bb1b      	cbnz	r3, 80165f4 <_vfiprintf_r+0x1d4>
 80165ac:	9b03      	ldr	r3, [sp, #12]
 80165ae:	3307      	adds	r3, #7
 80165b0:	f023 0307 	bic.w	r3, r3, #7
 80165b4:	3308      	adds	r3, #8
 80165b6:	9303      	str	r3, [sp, #12]
 80165b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80165ba:	444b      	add	r3, r9
 80165bc:	9309      	str	r3, [sp, #36]	; 0x24
 80165be:	e750      	b.n	8016462 <_vfiprintf_r+0x42>
 80165c0:	fb05 3202 	mla	r2, r5, r2, r3
 80165c4:	2001      	movs	r0, #1
 80165c6:	4688      	mov	r8, r1
 80165c8:	e78a      	b.n	80164e0 <_vfiprintf_r+0xc0>
 80165ca:	2300      	movs	r3, #0
 80165cc:	f108 0801 	add.w	r8, r8, #1
 80165d0:	9305      	str	r3, [sp, #20]
 80165d2:	4619      	mov	r1, r3
 80165d4:	250a      	movs	r5, #10
 80165d6:	4640      	mov	r0, r8
 80165d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80165dc:	3a30      	subs	r2, #48	; 0x30
 80165de:	2a09      	cmp	r2, #9
 80165e0:	d903      	bls.n	80165ea <_vfiprintf_r+0x1ca>
 80165e2:	2b00      	cmp	r3, #0
 80165e4:	d0c3      	beq.n	801656e <_vfiprintf_r+0x14e>
 80165e6:	9105      	str	r1, [sp, #20]
 80165e8:	e7c1      	b.n	801656e <_vfiprintf_r+0x14e>
 80165ea:	fb05 2101 	mla	r1, r5, r1, r2
 80165ee:	2301      	movs	r3, #1
 80165f0:	4680      	mov	r8, r0
 80165f2:	e7f0      	b.n	80165d6 <_vfiprintf_r+0x1b6>
 80165f4:	ab03      	add	r3, sp, #12
 80165f6:	9300      	str	r3, [sp, #0]
 80165f8:	4622      	mov	r2, r4
 80165fa:	4b13      	ldr	r3, [pc, #76]	; (8016648 <_vfiprintf_r+0x228>)
 80165fc:	a904      	add	r1, sp, #16
 80165fe:	4630      	mov	r0, r6
 8016600:	f7fb fcd6 	bl	8011fb0 <_printf_float>
 8016604:	f1b0 3fff 	cmp.w	r0, #4294967295
 8016608:	4681      	mov	r9, r0
 801660a:	d1d5      	bne.n	80165b8 <_vfiprintf_r+0x198>
 801660c:	89a3      	ldrh	r3, [r4, #12]
 801660e:	065b      	lsls	r3, r3, #25
 8016610:	f53f af7e 	bmi.w	8016510 <_vfiprintf_r+0xf0>
 8016614:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016616:	e77d      	b.n	8016514 <_vfiprintf_r+0xf4>
 8016618:	ab03      	add	r3, sp, #12
 801661a:	9300      	str	r3, [sp, #0]
 801661c:	4622      	mov	r2, r4
 801661e:	4b0a      	ldr	r3, [pc, #40]	; (8016648 <_vfiprintf_r+0x228>)
 8016620:	a904      	add	r1, sp, #16
 8016622:	4630      	mov	r0, r6
 8016624:	f7fb ff7a 	bl	801251c <_printf_i>
 8016628:	e7ec      	b.n	8016604 <_vfiprintf_r+0x1e4>
 801662a:	bf00      	nop
 801662c:	08017598 	.word	0x08017598
 8016630:	080176e4 	.word	0x080176e4
 8016634:	080175b8 	.word	0x080175b8
 8016638:	08017578 	.word	0x08017578
 801663c:	080176ea 	.word	0x080176ea
 8016640:	080176ee 	.word	0x080176ee
 8016644:	08011fb1 	.word	0x08011fb1
 8016648:	080163fb 	.word	0x080163fb

0801664c <_scanf_chars>:
 801664c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016650:	4615      	mov	r5, r2
 8016652:	688a      	ldr	r2, [r1, #8]
 8016654:	4680      	mov	r8, r0
 8016656:	460c      	mov	r4, r1
 8016658:	b932      	cbnz	r2, 8016668 <_scanf_chars+0x1c>
 801665a:	698a      	ldr	r2, [r1, #24]
 801665c:	2a00      	cmp	r2, #0
 801665e:	bf14      	ite	ne
 8016660:	f04f 32ff 	movne.w	r2, #4294967295
 8016664:	2201      	moveq	r2, #1
 8016666:	608a      	str	r2, [r1, #8]
 8016668:	6822      	ldr	r2, [r4, #0]
 801666a:	06d1      	lsls	r1, r2, #27
 801666c:	bf5f      	itttt	pl
 801666e:	681a      	ldrpl	r2, [r3, #0]
 8016670:	1d11      	addpl	r1, r2, #4
 8016672:	6019      	strpl	r1, [r3, #0]
 8016674:	6817      	ldrpl	r7, [r2, #0]
 8016676:	2600      	movs	r6, #0
 8016678:	69a3      	ldr	r3, [r4, #24]
 801667a:	b1db      	cbz	r3, 80166b4 <_scanf_chars+0x68>
 801667c:	2b01      	cmp	r3, #1
 801667e:	d107      	bne.n	8016690 <_scanf_chars+0x44>
 8016680:	682b      	ldr	r3, [r5, #0]
 8016682:	6962      	ldr	r2, [r4, #20]
 8016684:	781b      	ldrb	r3, [r3, #0]
 8016686:	5cd3      	ldrb	r3, [r2, r3]
 8016688:	b9a3      	cbnz	r3, 80166b4 <_scanf_chars+0x68>
 801668a:	2e00      	cmp	r6, #0
 801668c:	d132      	bne.n	80166f4 <_scanf_chars+0xa8>
 801668e:	e006      	b.n	801669e <_scanf_chars+0x52>
 8016690:	2b02      	cmp	r3, #2
 8016692:	d007      	beq.n	80166a4 <_scanf_chars+0x58>
 8016694:	2e00      	cmp	r6, #0
 8016696:	d12d      	bne.n	80166f4 <_scanf_chars+0xa8>
 8016698:	69a3      	ldr	r3, [r4, #24]
 801669a:	2b01      	cmp	r3, #1
 801669c:	d12a      	bne.n	80166f4 <_scanf_chars+0xa8>
 801669e:	2001      	movs	r0, #1
 80166a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80166a4:	f7fe fe28 	bl	80152f8 <__locale_ctype_ptr>
 80166a8:	682b      	ldr	r3, [r5, #0]
 80166aa:	781b      	ldrb	r3, [r3, #0]
 80166ac:	4418      	add	r0, r3
 80166ae:	7843      	ldrb	r3, [r0, #1]
 80166b0:	071b      	lsls	r3, r3, #28
 80166b2:	d4ef      	bmi.n	8016694 <_scanf_chars+0x48>
 80166b4:	6823      	ldr	r3, [r4, #0]
 80166b6:	06da      	lsls	r2, r3, #27
 80166b8:	bf5e      	ittt	pl
 80166ba:	682b      	ldrpl	r3, [r5, #0]
 80166bc:	781b      	ldrbpl	r3, [r3, #0]
 80166be:	703b      	strbpl	r3, [r7, #0]
 80166c0:	682a      	ldr	r2, [r5, #0]
 80166c2:	686b      	ldr	r3, [r5, #4]
 80166c4:	f102 0201 	add.w	r2, r2, #1
 80166c8:	602a      	str	r2, [r5, #0]
 80166ca:	68a2      	ldr	r2, [r4, #8]
 80166cc:	f103 33ff 	add.w	r3, r3, #4294967295
 80166d0:	f102 32ff 	add.w	r2, r2, #4294967295
 80166d4:	606b      	str	r3, [r5, #4]
 80166d6:	f106 0601 	add.w	r6, r6, #1
 80166da:	bf58      	it	pl
 80166dc:	3701      	addpl	r7, #1
 80166de:	60a2      	str	r2, [r4, #8]
 80166e0:	b142      	cbz	r2, 80166f4 <_scanf_chars+0xa8>
 80166e2:	2b00      	cmp	r3, #0
 80166e4:	dcc8      	bgt.n	8016678 <_scanf_chars+0x2c>
 80166e6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80166ea:	4629      	mov	r1, r5
 80166ec:	4640      	mov	r0, r8
 80166ee:	4798      	blx	r3
 80166f0:	2800      	cmp	r0, #0
 80166f2:	d0c1      	beq.n	8016678 <_scanf_chars+0x2c>
 80166f4:	6823      	ldr	r3, [r4, #0]
 80166f6:	f013 0310 	ands.w	r3, r3, #16
 80166fa:	d105      	bne.n	8016708 <_scanf_chars+0xbc>
 80166fc:	68e2      	ldr	r2, [r4, #12]
 80166fe:	3201      	adds	r2, #1
 8016700:	60e2      	str	r2, [r4, #12]
 8016702:	69a2      	ldr	r2, [r4, #24]
 8016704:	b102      	cbz	r2, 8016708 <_scanf_chars+0xbc>
 8016706:	703b      	strb	r3, [r7, #0]
 8016708:	6923      	ldr	r3, [r4, #16]
 801670a:	441e      	add	r6, r3
 801670c:	6126      	str	r6, [r4, #16]
 801670e:	2000      	movs	r0, #0
 8016710:	e7c6      	b.n	80166a0 <_scanf_chars+0x54>
	...

08016714 <_scanf_i>:
 8016714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016718:	469a      	mov	sl, r3
 801671a:	4b74      	ldr	r3, [pc, #464]	; (80168ec <_scanf_i+0x1d8>)
 801671c:	460c      	mov	r4, r1
 801671e:	4683      	mov	fp, r0
 8016720:	4616      	mov	r6, r2
 8016722:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016726:	b087      	sub	sp, #28
 8016728:	ab03      	add	r3, sp, #12
 801672a:	68a7      	ldr	r7, [r4, #8]
 801672c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8016730:	4b6f      	ldr	r3, [pc, #444]	; (80168f0 <_scanf_i+0x1dc>)
 8016732:	69a1      	ldr	r1, [r4, #24]
 8016734:	4a6f      	ldr	r2, [pc, #444]	; (80168f4 <_scanf_i+0x1e0>)
 8016736:	2903      	cmp	r1, #3
 8016738:	bf08      	it	eq
 801673a:	461a      	moveq	r2, r3
 801673c:	1e7b      	subs	r3, r7, #1
 801673e:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8016742:	bf84      	itt	hi
 8016744:	f240 135d 	movwhi	r3, #349	; 0x15d
 8016748:	60a3      	strhi	r3, [r4, #8]
 801674a:	6823      	ldr	r3, [r4, #0]
 801674c:	9200      	str	r2, [sp, #0]
 801674e:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8016752:	bf88      	it	hi
 8016754:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8016758:	f104 091c 	add.w	r9, r4, #28
 801675c:	6023      	str	r3, [r4, #0]
 801675e:	bf8c      	ite	hi
 8016760:	197f      	addhi	r7, r7, r5
 8016762:	2700      	movls	r7, #0
 8016764:	464b      	mov	r3, r9
 8016766:	f04f 0800 	mov.w	r8, #0
 801676a:	9301      	str	r3, [sp, #4]
 801676c:	6831      	ldr	r1, [r6, #0]
 801676e:	ab03      	add	r3, sp, #12
 8016770:	2202      	movs	r2, #2
 8016772:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8016776:	7809      	ldrb	r1, [r1, #0]
 8016778:	f7e9 fd4a 	bl	8000210 <memchr>
 801677c:	9b01      	ldr	r3, [sp, #4]
 801677e:	b330      	cbz	r0, 80167ce <_scanf_i+0xba>
 8016780:	f1b8 0f01 	cmp.w	r8, #1
 8016784:	d15a      	bne.n	801683c <_scanf_i+0x128>
 8016786:	6862      	ldr	r2, [r4, #4]
 8016788:	b92a      	cbnz	r2, 8016796 <_scanf_i+0x82>
 801678a:	6822      	ldr	r2, [r4, #0]
 801678c:	2108      	movs	r1, #8
 801678e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8016792:	6061      	str	r1, [r4, #4]
 8016794:	6022      	str	r2, [r4, #0]
 8016796:	6822      	ldr	r2, [r4, #0]
 8016798:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 801679c:	6022      	str	r2, [r4, #0]
 801679e:	68a2      	ldr	r2, [r4, #8]
 80167a0:	1e51      	subs	r1, r2, #1
 80167a2:	60a1      	str	r1, [r4, #8]
 80167a4:	b19a      	cbz	r2, 80167ce <_scanf_i+0xba>
 80167a6:	6832      	ldr	r2, [r6, #0]
 80167a8:	1c51      	adds	r1, r2, #1
 80167aa:	6031      	str	r1, [r6, #0]
 80167ac:	7812      	ldrb	r2, [r2, #0]
 80167ae:	701a      	strb	r2, [r3, #0]
 80167b0:	1c5d      	adds	r5, r3, #1
 80167b2:	6873      	ldr	r3, [r6, #4]
 80167b4:	3b01      	subs	r3, #1
 80167b6:	2b00      	cmp	r3, #0
 80167b8:	6073      	str	r3, [r6, #4]
 80167ba:	dc07      	bgt.n	80167cc <_scanf_i+0xb8>
 80167bc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80167c0:	4631      	mov	r1, r6
 80167c2:	4658      	mov	r0, fp
 80167c4:	4798      	blx	r3
 80167c6:	2800      	cmp	r0, #0
 80167c8:	f040 8086 	bne.w	80168d8 <_scanf_i+0x1c4>
 80167cc:	462b      	mov	r3, r5
 80167ce:	f108 0801 	add.w	r8, r8, #1
 80167d2:	f1b8 0f03 	cmp.w	r8, #3
 80167d6:	d1c8      	bne.n	801676a <_scanf_i+0x56>
 80167d8:	6862      	ldr	r2, [r4, #4]
 80167da:	b90a      	cbnz	r2, 80167e0 <_scanf_i+0xcc>
 80167dc:	220a      	movs	r2, #10
 80167de:	6062      	str	r2, [r4, #4]
 80167e0:	6862      	ldr	r2, [r4, #4]
 80167e2:	4945      	ldr	r1, [pc, #276]	; (80168f8 <_scanf_i+0x1e4>)
 80167e4:	6960      	ldr	r0, [r4, #20]
 80167e6:	9301      	str	r3, [sp, #4]
 80167e8:	1a89      	subs	r1, r1, r2
 80167ea:	f000 f8df 	bl	80169ac <__sccl>
 80167ee:	9b01      	ldr	r3, [sp, #4]
 80167f0:	f04f 0800 	mov.w	r8, #0
 80167f4:	461d      	mov	r5, r3
 80167f6:	68a3      	ldr	r3, [r4, #8]
 80167f8:	6822      	ldr	r2, [r4, #0]
 80167fa:	2b00      	cmp	r3, #0
 80167fc:	d03a      	beq.n	8016874 <_scanf_i+0x160>
 80167fe:	6831      	ldr	r1, [r6, #0]
 8016800:	6960      	ldr	r0, [r4, #20]
 8016802:	f891 c000 	ldrb.w	ip, [r1]
 8016806:	f810 000c 	ldrb.w	r0, [r0, ip]
 801680a:	2800      	cmp	r0, #0
 801680c:	d032      	beq.n	8016874 <_scanf_i+0x160>
 801680e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8016812:	d121      	bne.n	8016858 <_scanf_i+0x144>
 8016814:	0510      	lsls	r0, r2, #20
 8016816:	d51f      	bpl.n	8016858 <_scanf_i+0x144>
 8016818:	f108 0801 	add.w	r8, r8, #1
 801681c:	b117      	cbz	r7, 8016824 <_scanf_i+0x110>
 801681e:	3301      	adds	r3, #1
 8016820:	3f01      	subs	r7, #1
 8016822:	60a3      	str	r3, [r4, #8]
 8016824:	6873      	ldr	r3, [r6, #4]
 8016826:	3b01      	subs	r3, #1
 8016828:	2b00      	cmp	r3, #0
 801682a:	6073      	str	r3, [r6, #4]
 801682c:	dd1b      	ble.n	8016866 <_scanf_i+0x152>
 801682e:	6833      	ldr	r3, [r6, #0]
 8016830:	3301      	adds	r3, #1
 8016832:	6033      	str	r3, [r6, #0]
 8016834:	68a3      	ldr	r3, [r4, #8]
 8016836:	3b01      	subs	r3, #1
 8016838:	60a3      	str	r3, [r4, #8]
 801683a:	e7dc      	b.n	80167f6 <_scanf_i+0xe2>
 801683c:	f1b8 0f02 	cmp.w	r8, #2
 8016840:	d1ad      	bne.n	801679e <_scanf_i+0x8a>
 8016842:	6822      	ldr	r2, [r4, #0]
 8016844:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8016848:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801684c:	d1bf      	bne.n	80167ce <_scanf_i+0xba>
 801684e:	2110      	movs	r1, #16
 8016850:	6061      	str	r1, [r4, #4]
 8016852:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8016856:	e7a1      	b.n	801679c <_scanf_i+0x88>
 8016858:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801685c:	6022      	str	r2, [r4, #0]
 801685e:	780b      	ldrb	r3, [r1, #0]
 8016860:	702b      	strb	r3, [r5, #0]
 8016862:	3501      	adds	r5, #1
 8016864:	e7de      	b.n	8016824 <_scanf_i+0x110>
 8016866:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801686a:	4631      	mov	r1, r6
 801686c:	4658      	mov	r0, fp
 801686e:	4798      	blx	r3
 8016870:	2800      	cmp	r0, #0
 8016872:	d0df      	beq.n	8016834 <_scanf_i+0x120>
 8016874:	6823      	ldr	r3, [r4, #0]
 8016876:	05d9      	lsls	r1, r3, #23
 8016878:	d50c      	bpl.n	8016894 <_scanf_i+0x180>
 801687a:	454d      	cmp	r5, r9
 801687c:	d908      	bls.n	8016890 <_scanf_i+0x17c>
 801687e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8016882:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8016886:	4632      	mov	r2, r6
 8016888:	4658      	mov	r0, fp
 801688a:	4798      	blx	r3
 801688c:	1e6f      	subs	r7, r5, #1
 801688e:	463d      	mov	r5, r7
 8016890:	454d      	cmp	r5, r9
 8016892:	d029      	beq.n	80168e8 <_scanf_i+0x1d4>
 8016894:	6822      	ldr	r2, [r4, #0]
 8016896:	f012 0210 	ands.w	r2, r2, #16
 801689a:	d113      	bne.n	80168c4 <_scanf_i+0x1b0>
 801689c:	702a      	strb	r2, [r5, #0]
 801689e:	6863      	ldr	r3, [r4, #4]
 80168a0:	9e00      	ldr	r6, [sp, #0]
 80168a2:	4649      	mov	r1, r9
 80168a4:	4658      	mov	r0, fp
 80168a6:	47b0      	blx	r6
 80168a8:	f8da 3000 	ldr.w	r3, [sl]
 80168ac:	6821      	ldr	r1, [r4, #0]
 80168ae:	1d1a      	adds	r2, r3, #4
 80168b0:	f8ca 2000 	str.w	r2, [sl]
 80168b4:	f011 0f20 	tst.w	r1, #32
 80168b8:	681b      	ldr	r3, [r3, #0]
 80168ba:	d010      	beq.n	80168de <_scanf_i+0x1ca>
 80168bc:	6018      	str	r0, [r3, #0]
 80168be:	68e3      	ldr	r3, [r4, #12]
 80168c0:	3301      	adds	r3, #1
 80168c2:	60e3      	str	r3, [r4, #12]
 80168c4:	eba5 0509 	sub.w	r5, r5, r9
 80168c8:	44a8      	add	r8, r5
 80168ca:	6925      	ldr	r5, [r4, #16]
 80168cc:	4445      	add	r5, r8
 80168ce:	6125      	str	r5, [r4, #16]
 80168d0:	2000      	movs	r0, #0
 80168d2:	b007      	add	sp, #28
 80168d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80168d8:	f04f 0800 	mov.w	r8, #0
 80168dc:	e7ca      	b.n	8016874 <_scanf_i+0x160>
 80168de:	07ca      	lsls	r2, r1, #31
 80168e0:	bf4c      	ite	mi
 80168e2:	8018      	strhmi	r0, [r3, #0]
 80168e4:	6018      	strpl	r0, [r3, #0]
 80168e6:	e7ea      	b.n	80168be <_scanf_i+0x1aa>
 80168e8:	2001      	movs	r0, #1
 80168ea:	e7f2      	b.n	80168d2 <_scanf_i+0x1be>
 80168ec:	08016e7c 	.word	0x08016e7c
 80168f0:	08013b01 	.word	0x08013b01
 80168f4:	08016b29 	.word	0x08016b29
 80168f8:	08017705 	.word	0x08017705

080168fc <_putc_r>:
 80168fc:	b570      	push	{r4, r5, r6, lr}
 80168fe:	460d      	mov	r5, r1
 8016900:	4614      	mov	r4, r2
 8016902:	4606      	mov	r6, r0
 8016904:	b118      	cbz	r0, 801690e <_putc_r+0x12>
 8016906:	6983      	ldr	r3, [r0, #24]
 8016908:	b90b      	cbnz	r3, 801690e <_putc_r+0x12>
 801690a:	f7fe f941 	bl	8014b90 <__sinit>
 801690e:	4b13      	ldr	r3, [pc, #76]	; (801695c <_putc_r+0x60>)
 8016910:	429c      	cmp	r4, r3
 8016912:	d112      	bne.n	801693a <_putc_r+0x3e>
 8016914:	6874      	ldr	r4, [r6, #4]
 8016916:	68a3      	ldr	r3, [r4, #8]
 8016918:	3b01      	subs	r3, #1
 801691a:	2b00      	cmp	r3, #0
 801691c:	60a3      	str	r3, [r4, #8]
 801691e:	da16      	bge.n	801694e <_putc_r+0x52>
 8016920:	69a2      	ldr	r2, [r4, #24]
 8016922:	4293      	cmp	r3, r2
 8016924:	db02      	blt.n	801692c <_putc_r+0x30>
 8016926:	b2eb      	uxtb	r3, r5
 8016928:	2b0a      	cmp	r3, #10
 801692a:	d110      	bne.n	801694e <_putc_r+0x52>
 801692c:	4622      	mov	r2, r4
 801692e:	4629      	mov	r1, r5
 8016930:	4630      	mov	r0, r6
 8016932:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016936:	f7fd b915 	b.w	8013b64 <__swbuf_r>
 801693a:	4b09      	ldr	r3, [pc, #36]	; (8016960 <_putc_r+0x64>)
 801693c:	429c      	cmp	r4, r3
 801693e:	d101      	bne.n	8016944 <_putc_r+0x48>
 8016940:	68b4      	ldr	r4, [r6, #8]
 8016942:	e7e8      	b.n	8016916 <_putc_r+0x1a>
 8016944:	4b07      	ldr	r3, [pc, #28]	; (8016964 <_putc_r+0x68>)
 8016946:	429c      	cmp	r4, r3
 8016948:	bf08      	it	eq
 801694a:	68f4      	ldreq	r4, [r6, #12]
 801694c:	e7e3      	b.n	8016916 <_putc_r+0x1a>
 801694e:	6823      	ldr	r3, [r4, #0]
 8016950:	1c5a      	adds	r2, r3, #1
 8016952:	6022      	str	r2, [r4, #0]
 8016954:	701d      	strb	r5, [r3, #0]
 8016956:	b2e8      	uxtb	r0, r5
 8016958:	bd70      	pop	{r4, r5, r6, pc}
 801695a:	bf00      	nop
 801695c:	08017598 	.word	0x08017598
 8016960:	080175b8 	.word	0x080175b8
 8016964:	08017578 	.word	0x08017578

08016968 <_read_r>:
 8016968:	b538      	push	{r3, r4, r5, lr}
 801696a:	4c07      	ldr	r4, [pc, #28]	; (8016988 <_read_r+0x20>)
 801696c:	4605      	mov	r5, r0
 801696e:	4608      	mov	r0, r1
 8016970:	4611      	mov	r1, r2
 8016972:	2200      	movs	r2, #0
 8016974:	6022      	str	r2, [r4, #0]
 8016976:	461a      	mov	r2, r3
 8016978:	f7ee fae4 	bl	8004f44 <_read>
 801697c:	1c43      	adds	r3, r0, #1
 801697e:	d102      	bne.n	8016986 <_read_r+0x1e>
 8016980:	6823      	ldr	r3, [r4, #0]
 8016982:	b103      	cbz	r3, 8016986 <_read_r+0x1e>
 8016984:	602b      	str	r3, [r5, #0]
 8016986:	bd38      	pop	{r3, r4, r5, pc}
 8016988:	2000c6ac 	.word	0x2000c6ac

0801698c <_sbrk_r>:
 801698c:	b538      	push	{r3, r4, r5, lr}
 801698e:	4c06      	ldr	r4, [pc, #24]	; (80169a8 <_sbrk_r+0x1c>)
 8016990:	2300      	movs	r3, #0
 8016992:	4605      	mov	r5, r0
 8016994:	4608      	mov	r0, r1
 8016996:	6023      	str	r3, [r4, #0]
 8016998:	f7ee fb26 	bl	8004fe8 <_sbrk>
 801699c:	1c43      	adds	r3, r0, #1
 801699e:	d102      	bne.n	80169a6 <_sbrk_r+0x1a>
 80169a0:	6823      	ldr	r3, [r4, #0]
 80169a2:	b103      	cbz	r3, 80169a6 <_sbrk_r+0x1a>
 80169a4:	602b      	str	r3, [r5, #0]
 80169a6:	bd38      	pop	{r3, r4, r5, pc}
 80169a8:	2000c6ac 	.word	0x2000c6ac

080169ac <__sccl>:
 80169ac:	b570      	push	{r4, r5, r6, lr}
 80169ae:	780b      	ldrb	r3, [r1, #0]
 80169b0:	2b5e      	cmp	r3, #94	; 0x5e
 80169b2:	bf13      	iteet	ne
 80169b4:	1c4a      	addne	r2, r1, #1
 80169b6:	1c8a      	addeq	r2, r1, #2
 80169b8:	784b      	ldrbeq	r3, [r1, #1]
 80169ba:	2100      	movne	r1, #0
 80169bc:	bf08      	it	eq
 80169be:	2101      	moveq	r1, #1
 80169c0:	1e44      	subs	r4, r0, #1
 80169c2:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 80169c6:	f804 1f01 	strb.w	r1, [r4, #1]!
 80169ca:	42ac      	cmp	r4, r5
 80169cc:	d1fb      	bne.n	80169c6 <__sccl+0x1a>
 80169ce:	b913      	cbnz	r3, 80169d6 <__sccl+0x2a>
 80169d0:	3a01      	subs	r2, #1
 80169d2:	4610      	mov	r0, r2
 80169d4:	bd70      	pop	{r4, r5, r6, pc}
 80169d6:	f081 0401 	eor.w	r4, r1, #1
 80169da:	54c4      	strb	r4, [r0, r3]
 80169dc:	1c51      	adds	r1, r2, #1
 80169de:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 80169e2:	2d2d      	cmp	r5, #45	; 0x2d
 80169e4:	f101 36ff 	add.w	r6, r1, #4294967295
 80169e8:	460a      	mov	r2, r1
 80169ea:	d006      	beq.n	80169fa <__sccl+0x4e>
 80169ec:	2d5d      	cmp	r5, #93	; 0x5d
 80169ee:	d0f0      	beq.n	80169d2 <__sccl+0x26>
 80169f0:	b90d      	cbnz	r5, 80169f6 <__sccl+0x4a>
 80169f2:	4632      	mov	r2, r6
 80169f4:	e7ed      	b.n	80169d2 <__sccl+0x26>
 80169f6:	462b      	mov	r3, r5
 80169f8:	e7ef      	b.n	80169da <__sccl+0x2e>
 80169fa:	780e      	ldrb	r6, [r1, #0]
 80169fc:	2e5d      	cmp	r6, #93	; 0x5d
 80169fe:	d0fa      	beq.n	80169f6 <__sccl+0x4a>
 8016a00:	42b3      	cmp	r3, r6
 8016a02:	dcf8      	bgt.n	80169f6 <__sccl+0x4a>
 8016a04:	3301      	adds	r3, #1
 8016a06:	429e      	cmp	r6, r3
 8016a08:	54c4      	strb	r4, [r0, r3]
 8016a0a:	dcfb      	bgt.n	8016a04 <__sccl+0x58>
 8016a0c:	3102      	adds	r1, #2
 8016a0e:	e7e6      	b.n	80169de <__sccl+0x32>

08016a10 <strncmp>:
 8016a10:	b510      	push	{r4, lr}
 8016a12:	b16a      	cbz	r2, 8016a30 <strncmp+0x20>
 8016a14:	3901      	subs	r1, #1
 8016a16:	1884      	adds	r4, r0, r2
 8016a18:	f810 3b01 	ldrb.w	r3, [r0], #1
 8016a1c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8016a20:	4293      	cmp	r3, r2
 8016a22:	d103      	bne.n	8016a2c <strncmp+0x1c>
 8016a24:	42a0      	cmp	r0, r4
 8016a26:	d001      	beq.n	8016a2c <strncmp+0x1c>
 8016a28:	2b00      	cmp	r3, #0
 8016a2a:	d1f5      	bne.n	8016a18 <strncmp+0x8>
 8016a2c:	1a98      	subs	r0, r3, r2
 8016a2e:	bd10      	pop	{r4, pc}
 8016a30:	4610      	mov	r0, r2
 8016a32:	e7fc      	b.n	8016a2e <strncmp+0x1e>

08016a34 <_strtoul_l.isra.0>:
 8016a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016a38:	4680      	mov	r8, r0
 8016a3a:	4689      	mov	r9, r1
 8016a3c:	4692      	mov	sl, r2
 8016a3e:	461e      	mov	r6, r3
 8016a40:	460f      	mov	r7, r1
 8016a42:	463d      	mov	r5, r7
 8016a44:	9808      	ldr	r0, [sp, #32]
 8016a46:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016a4a:	f7fe fc51 	bl	80152f0 <__locale_ctype_ptr_l>
 8016a4e:	4420      	add	r0, r4
 8016a50:	7843      	ldrb	r3, [r0, #1]
 8016a52:	f013 0308 	ands.w	r3, r3, #8
 8016a56:	d130      	bne.n	8016aba <_strtoul_l.isra.0+0x86>
 8016a58:	2c2d      	cmp	r4, #45	; 0x2d
 8016a5a:	d130      	bne.n	8016abe <_strtoul_l.isra.0+0x8a>
 8016a5c:	787c      	ldrb	r4, [r7, #1]
 8016a5e:	1cbd      	adds	r5, r7, #2
 8016a60:	2101      	movs	r1, #1
 8016a62:	2e00      	cmp	r6, #0
 8016a64:	d05c      	beq.n	8016b20 <_strtoul_l.isra.0+0xec>
 8016a66:	2e10      	cmp	r6, #16
 8016a68:	d109      	bne.n	8016a7e <_strtoul_l.isra.0+0x4a>
 8016a6a:	2c30      	cmp	r4, #48	; 0x30
 8016a6c:	d107      	bne.n	8016a7e <_strtoul_l.isra.0+0x4a>
 8016a6e:	782b      	ldrb	r3, [r5, #0]
 8016a70:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8016a74:	2b58      	cmp	r3, #88	; 0x58
 8016a76:	d14e      	bne.n	8016b16 <_strtoul_l.isra.0+0xe2>
 8016a78:	786c      	ldrb	r4, [r5, #1]
 8016a7a:	2610      	movs	r6, #16
 8016a7c:	3502      	adds	r5, #2
 8016a7e:	f04f 32ff 	mov.w	r2, #4294967295
 8016a82:	2300      	movs	r3, #0
 8016a84:	fbb2 f2f6 	udiv	r2, r2, r6
 8016a88:	fb06 fc02 	mul.w	ip, r6, r2
 8016a8c:	ea6f 0c0c 	mvn.w	ip, ip
 8016a90:	4618      	mov	r0, r3
 8016a92:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8016a96:	2f09      	cmp	r7, #9
 8016a98:	d817      	bhi.n	8016aca <_strtoul_l.isra.0+0x96>
 8016a9a:	463c      	mov	r4, r7
 8016a9c:	42a6      	cmp	r6, r4
 8016a9e:	dd23      	ble.n	8016ae8 <_strtoul_l.isra.0+0xb4>
 8016aa0:	2b00      	cmp	r3, #0
 8016aa2:	db1e      	blt.n	8016ae2 <_strtoul_l.isra.0+0xae>
 8016aa4:	4282      	cmp	r2, r0
 8016aa6:	d31c      	bcc.n	8016ae2 <_strtoul_l.isra.0+0xae>
 8016aa8:	d101      	bne.n	8016aae <_strtoul_l.isra.0+0x7a>
 8016aaa:	45a4      	cmp	ip, r4
 8016aac:	db19      	blt.n	8016ae2 <_strtoul_l.isra.0+0xae>
 8016aae:	fb00 4006 	mla	r0, r0, r6, r4
 8016ab2:	2301      	movs	r3, #1
 8016ab4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016ab8:	e7eb      	b.n	8016a92 <_strtoul_l.isra.0+0x5e>
 8016aba:	462f      	mov	r7, r5
 8016abc:	e7c1      	b.n	8016a42 <_strtoul_l.isra.0+0xe>
 8016abe:	2c2b      	cmp	r4, #43	; 0x2b
 8016ac0:	bf04      	itt	eq
 8016ac2:	1cbd      	addeq	r5, r7, #2
 8016ac4:	787c      	ldrbeq	r4, [r7, #1]
 8016ac6:	4619      	mov	r1, r3
 8016ac8:	e7cb      	b.n	8016a62 <_strtoul_l.isra.0+0x2e>
 8016aca:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8016ace:	2f19      	cmp	r7, #25
 8016ad0:	d801      	bhi.n	8016ad6 <_strtoul_l.isra.0+0xa2>
 8016ad2:	3c37      	subs	r4, #55	; 0x37
 8016ad4:	e7e2      	b.n	8016a9c <_strtoul_l.isra.0+0x68>
 8016ad6:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8016ada:	2f19      	cmp	r7, #25
 8016adc:	d804      	bhi.n	8016ae8 <_strtoul_l.isra.0+0xb4>
 8016ade:	3c57      	subs	r4, #87	; 0x57
 8016ae0:	e7dc      	b.n	8016a9c <_strtoul_l.isra.0+0x68>
 8016ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8016ae6:	e7e5      	b.n	8016ab4 <_strtoul_l.isra.0+0x80>
 8016ae8:	2b00      	cmp	r3, #0
 8016aea:	da09      	bge.n	8016b00 <_strtoul_l.isra.0+0xcc>
 8016aec:	2322      	movs	r3, #34	; 0x22
 8016aee:	f8c8 3000 	str.w	r3, [r8]
 8016af2:	f04f 30ff 	mov.w	r0, #4294967295
 8016af6:	f1ba 0f00 	cmp.w	sl, #0
 8016afa:	d107      	bne.n	8016b0c <_strtoul_l.isra.0+0xd8>
 8016afc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016b00:	b101      	cbz	r1, 8016b04 <_strtoul_l.isra.0+0xd0>
 8016b02:	4240      	negs	r0, r0
 8016b04:	f1ba 0f00 	cmp.w	sl, #0
 8016b08:	d0f8      	beq.n	8016afc <_strtoul_l.isra.0+0xc8>
 8016b0a:	b10b      	cbz	r3, 8016b10 <_strtoul_l.isra.0+0xdc>
 8016b0c:	f105 39ff 	add.w	r9, r5, #4294967295
 8016b10:	f8ca 9000 	str.w	r9, [sl]
 8016b14:	e7f2      	b.n	8016afc <_strtoul_l.isra.0+0xc8>
 8016b16:	2430      	movs	r4, #48	; 0x30
 8016b18:	2e00      	cmp	r6, #0
 8016b1a:	d1b0      	bne.n	8016a7e <_strtoul_l.isra.0+0x4a>
 8016b1c:	2608      	movs	r6, #8
 8016b1e:	e7ae      	b.n	8016a7e <_strtoul_l.isra.0+0x4a>
 8016b20:	2c30      	cmp	r4, #48	; 0x30
 8016b22:	d0a4      	beq.n	8016a6e <_strtoul_l.isra.0+0x3a>
 8016b24:	260a      	movs	r6, #10
 8016b26:	e7aa      	b.n	8016a7e <_strtoul_l.isra.0+0x4a>

08016b28 <_strtoul_r>:
 8016b28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016b2a:	4c06      	ldr	r4, [pc, #24]	; (8016b44 <_strtoul_r+0x1c>)
 8016b2c:	4d06      	ldr	r5, [pc, #24]	; (8016b48 <_strtoul_r+0x20>)
 8016b2e:	6824      	ldr	r4, [r4, #0]
 8016b30:	6a24      	ldr	r4, [r4, #32]
 8016b32:	2c00      	cmp	r4, #0
 8016b34:	bf08      	it	eq
 8016b36:	462c      	moveq	r4, r5
 8016b38:	9400      	str	r4, [sp, #0]
 8016b3a:	f7ff ff7b 	bl	8016a34 <_strtoul_l.isra.0>
 8016b3e:	b003      	add	sp, #12
 8016b40:	bd30      	pop	{r4, r5, pc}
 8016b42:	bf00      	nop
 8016b44:	2000000c 	.word	0x2000000c
 8016b48:	20000070 	.word	0x20000070

08016b4c <__submore>:
 8016b4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016b50:	460c      	mov	r4, r1
 8016b52:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8016b54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016b58:	4299      	cmp	r1, r3
 8016b5a:	d11d      	bne.n	8016b98 <__submore+0x4c>
 8016b5c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8016b60:	f7ff f8de 	bl	8015d20 <_malloc_r>
 8016b64:	b918      	cbnz	r0, 8016b6e <__submore+0x22>
 8016b66:	f04f 30ff 	mov.w	r0, #4294967295
 8016b6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016b6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016b72:	63a3      	str	r3, [r4, #56]	; 0x38
 8016b74:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8016b78:	6360      	str	r0, [r4, #52]	; 0x34
 8016b7a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8016b7e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8016b82:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8016b86:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8016b8a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8016b8e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8016b92:	6020      	str	r0, [r4, #0]
 8016b94:	2000      	movs	r0, #0
 8016b96:	e7e8      	b.n	8016b6a <__submore+0x1e>
 8016b98:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8016b9a:	0077      	lsls	r7, r6, #1
 8016b9c:	463a      	mov	r2, r7
 8016b9e:	f000 f85a 	bl	8016c56 <_realloc_r>
 8016ba2:	4605      	mov	r5, r0
 8016ba4:	2800      	cmp	r0, #0
 8016ba6:	d0de      	beq.n	8016b66 <__submore+0x1a>
 8016ba8:	eb00 0806 	add.w	r8, r0, r6
 8016bac:	4601      	mov	r1, r0
 8016bae:	4632      	mov	r2, r6
 8016bb0:	4640      	mov	r0, r8
 8016bb2:	f7fe fc4f 	bl	8015454 <memcpy>
 8016bb6:	f8c4 8000 	str.w	r8, [r4]
 8016bba:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8016bbe:	e7e9      	b.n	8016b94 <__submore+0x48>

08016bc0 <__ascii_wctomb>:
 8016bc0:	b149      	cbz	r1, 8016bd6 <__ascii_wctomb+0x16>
 8016bc2:	2aff      	cmp	r2, #255	; 0xff
 8016bc4:	bf85      	ittet	hi
 8016bc6:	238a      	movhi	r3, #138	; 0x8a
 8016bc8:	6003      	strhi	r3, [r0, #0]
 8016bca:	700a      	strbls	r2, [r1, #0]
 8016bcc:	f04f 30ff 	movhi.w	r0, #4294967295
 8016bd0:	bf98      	it	ls
 8016bd2:	2001      	movls	r0, #1
 8016bd4:	4770      	bx	lr
 8016bd6:	4608      	mov	r0, r1
 8016bd8:	4770      	bx	lr
	...

08016bdc <_fstat_r>:
 8016bdc:	b538      	push	{r3, r4, r5, lr}
 8016bde:	4c07      	ldr	r4, [pc, #28]	; (8016bfc <_fstat_r+0x20>)
 8016be0:	2300      	movs	r3, #0
 8016be2:	4605      	mov	r5, r0
 8016be4:	4608      	mov	r0, r1
 8016be6:	4611      	mov	r1, r2
 8016be8:	6023      	str	r3, [r4, #0]
 8016bea:	f7ee f9d4 	bl	8004f96 <_fstat>
 8016bee:	1c43      	adds	r3, r0, #1
 8016bf0:	d102      	bne.n	8016bf8 <_fstat_r+0x1c>
 8016bf2:	6823      	ldr	r3, [r4, #0]
 8016bf4:	b103      	cbz	r3, 8016bf8 <_fstat_r+0x1c>
 8016bf6:	602b      	str	r3, [r5, #0]
 8016bf8:	bd38      	pop	{r3, r4, r5, pc}
 8016bfa:	bf00      	nop
 8016bfc:	2000c6ac 	.word	0x2000c6ac

08016c00 <_isatty_r>:
 8016c00:	b538      	push	{r3, r4, r5, lr}
 8016c02:	4c06      	ldr	r4, [pc, #24]	; (8016c1c <_isatty_r+0x1c>)
 8016c04:	2300      	movs	r3, #0
 8016c06:	4605      	mov	r5, r0
 8016c08:	4608      	mov	r0, r1
 8016c0a:	6023      	str	r3, [r4, #0]
 8016c0c:	f7ee f9d3 	bl	8004fb6 <_isatty>
 8016c10:	1c43      	adds	r3, r0, #1
 8016c12:	d102      	bne.n	8016c1a <_isatty_r+0x1a>
 8016c14:	6823      	ldr	r3, [r4, #0]
 8016c16:	b103      	cbz	r3, 8016c1a <_isatty_r+0x1a>
 8016c18:	602b      	str	r3, [r5, #0]
 8016c1a:	bd38      	pop	{r3, r4, r5, pc}
 8016c1c:	2000c6ac 	.word	0x2000c6ac

08016c20 <memmove>:
 8016c20:	4288      	cmp	r0, r1
 8016c22:	b510      	push	{r4, lr}
 8016c24:	eb01 0302 	add.w	r3, r1, r2
 8016c28:	d807      	bhi.n	8016c3a <memmove+0x1a>
 8016c2a:	1e42      	subs	r2, r0, #1
 8016c2c:	4299      	cmp	r1, r3
 8016c2e:	d00a      	beq.n	8016c46 <memmove+0x26>
 8016c30:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016c34:	f802 4f01 	strb.w	r4, [r2, #1]!
 8016c38:	e7f8      	b.n	8016c2c <memmove+0xc>
 8016c3a:	4283      	cmp	r3, r0
 8016c3c:	d9f5      	bls.n	8016c2a <memmove+0xa>
 8016c3e:	1881      	adds	r1, r0, r2
 8016c40:	1ad2      	subs	r2, r2, r3
 8016c42:	42d3      	cmn	r3, r2
 8016c44:	d100      	bne.n	8016c48 <memmove+0x28>
 8016c46:	bd10      	pop	{r4, pc}
 8016c48:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016c4c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8016c50:	e7f7      	b.n	8016c42 <memmove+0x22>

08016c52 <__malloc_lock>:
 8016c52:	4770      	bx	lr

08016c54 <__malloc_unlock>:
 8016c54:	4770      	bx	lr

08016c56 <_realloc_r>:
 8016c56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016c58:	4607      	mov	r7, r0
 8016c5a:	4614      	mov	r4, r2
 8016c5c:	460e      	mov	r6, r1
 8016c5e:	b921      	cbnz	r1, 8016c6a <_realloc_r+0x14>
 8016c60:	4611      	mov	r1, r2
 8016c62:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8016c66:	f7ff b85b 	b.w	8015d20 <_malloc_r>
 8016c6a:	b922      	cbnz	r2, 8016c76 <_realloc_r+0x20>
 8016c6c:	f7ff f80a 	bl	8015c84 <_free_r>
 8016c70:	4625      	mov	r5, r4
 8016c72:	4628      	mov	r0, r5
 8016c74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016c76:	f000 f814 	bl	8016ca2 <_malloc_usable_size_r>
 8016c7a:	42a0      	cmp	r0, r4
 8016c7c:	d20f      	bcs.n	8016c9e <_realloc_r+0x48>
 8016c7e:	4621      	mov	r1, r4
 8016c80:	4638      	mov	r0, r7
 8016c82:	f7ff f84d 	bl	8015d20 <_malloc_r>
 8016c86:	4605      	mov	r5, r0
 8016c88:	2800      	cmp	r0, #0
 8016c8a:	d0f2      	beq.n	8016c72 <_realloc_r+0x1c>
 8016c8c:	4631      	mov	r1, r6
 8016c8e:	4622      	mov	r2, r4
 8016c90:	f7fe fbe0 	bl	8015454 <memcpy>
 8016c94:	4631      	mov	r1, r6
 8016c96:	4638      	mov	r0, r7
 8016c98:	f7fe fff4 	bl	8015c84 <_free_r>
 8016c9c:	e7e9      	b.n	8016c72 <_realloc_r+0x1c>
 8016c9e:	4635      	mov	r5, r6
 8016ca0:	e7e7      	b.n	8016c72 <_realloc_r+0x1c>

08016ca2 <_malloc_usable_size_r>:
 8016ca2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016ca6:	1f18      	subs	r0, r3, #4
 8016ca8:	2b00      	cmp	r3, #0
 8016caa:	bfbc      	itt	lt
 8016cac:	580b      	ldrlt	r3, [r1, r0]
 8016cae:	18c0      	addlt	r0, r0, r3
 8016cb0:	4770      	bx	lr
	...

08016cb4 <_init>:
 8016cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016cb6:	bf00      	nop
 8016cb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016cba:	bc08      	pop	{r3}
 8016cbc:	469e      	mov	lr, r3
 8016cbe:	4770      	bx	lr

08016cc0 <_fini>:
 8016cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016cc2:	bf00      	nop
 8016cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016cc6:	bc08      	pop	{r3}
 8016cc8:	469e      	mov	lr, r3
 8016cca:	4770      	bx	lr
